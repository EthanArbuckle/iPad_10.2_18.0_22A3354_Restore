unint64_t sub_1D4B63CD0(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t *v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _OWORD *v63;
  __int128 *v64;
  __int128 v65;
  _DWORD *v66;
  unint64_t v67;
  unint64_t v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  __int16 v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  char *v83;
  uint64_t v84;
  _OWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _OWORD *v89;
  __int128 *v90;
  __int128 v91;
  unint64_t v92;
  _OWORD *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _OWORD *v97;
  __int128 *v98;
  __int128 v99;
  unint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  unint64_t v108;
  _OWORD *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unint64_t v122;
  uint64_t *v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t *v135;
  unint64_t v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _OWORD *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  _QWORD *v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _OWORD *v162;
  __int128 *v163;
  __int128 v164;
  _DWORD *v165;
  unint64_t v166;
  unint64_t v167;
  unsigned __int8 *v168;
  unsigned __int8 *v169;
  unsigned __int8 *v170;
  __int16 v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  unint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  unint64_t v178;
  unsigned __int8 *v179;
  unsigned __int8 *v180;
  unsigned __int8 *v181;
  unsigned __int8 *v182;
  char *v183;
  uint64_t v184;
  _OWORD *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  _OWORD *v189;
  __int128 *v190;
  __int128 v191;
  unint64_t v192;
  _OWORD *v193;
  uint64_t v194;
  unint64_t v195;
  _OWORD *v196;
  __int128 *v197;
  __int128 v198;
  unint64_t v199;
  unint64_t v200;
  unsigned int v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  unint64_t v206;
  unint64_t v207;
  _OWORD *v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  unint64_t v221;
  uint64_t *v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  char v233;
  uint64_t *v234;
  unint64_t v235;
  uint64_t v236;
  unsigned int v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v245;
  unint64_t v246;
  char *v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  _OWORD *v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  char *v255;
  _QWORD *v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  _OWORD *v261;
  __int128 *v262;
  __int128 v263;
  _DWORD *v264;
  unint64_t v265;
  unint64_t v266;
  unsigned __int8 *v267;
  unsigned __int8 *v268;
  unsigned __int8 *v269;
  __int16 v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  unint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  unint64_t v277;
  unsigned __int8 *v278;
  unsigned __int8 *v279;
  unsigned __int8 *v280;
  unsigned __int8 *v281;
  char *v282;
  uint64_t v283;
  _OWORD *v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  _OWORD *v288;
  __int128 *v289;
  __int128 v290;
  unint64_t v291;
  _OWORD *v292;
  uint64_t v293;
  unint64_t v294;
  _OWORD *v295;
  __int128 *v296;
  __int128 v297;
  unint64_t v298;
  unint64_t v299;
  unsigned int v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  unint64_t v305;
  unint64_t v306;
  _OWORD *v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  unsigned int v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int v319;
  unint64_t v320;
  int *v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  unsigned int v327;
  unsigned int v328;
  int v329;
  unint64_t v330;
  uint64_t v331;
  char v332;
  int *v333;
  unsigned int v334;
  uint64_t v335;
  unsigned int v336;
  unsigned int v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  unint64_t v342;
  uint64_t v344;
  unint64_t v345;
  char *v346;
  unint64_t v347;
  unint64_t v348;
  uint64_t v349;
  _OWORD *v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  char *v354;
  _QWORD *v355;
  unint64_t v356;
  unint64_t v357;
  uint64_t v358;
  unint64_t v359;
  _OWORD *v360;
  __int128 *v361;
  __int128 v362;
  _DWORD *v363;
  unint64_t v364;
  unint64_t v365;
  unsigned __int8 *v366;
  unsigned __int8 *v367;
  unsigned __int8 *v368;
  __int16 v369;
  uint64_t v370;
  uint64_t v371;
  unint64_t v372;
  _QWORD *v373;
  uint64_t v374;
  unint64_t v375;
  unsigned __int8 *v376;
  unsigned __int8 *v377;
  unsigned __int8 *v378;
  unsigned __int8 *v379;
  char *v380;
  uint64_t v381;
  _OWORD *v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  _OWORD *v386;
  __int128 *v387;
  __int128 v388;
  unint64_t v389;
  _OWORD *v390;
  unint64_t v391;
  uint64_t v392;
  unint64_t v393;
  _OWORD *v394;
  __int128 *v395;
  __int128 v396;
  unint64_t v397;
  unsigned int v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  char *v402;
  unint64_t v403;
  unint64_t v404;
  _OWORD *v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  unint64_t v422;
  unint64_t v423;
  unint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unsigned int v441;
  unsigned int v442;
  unsigned int v443;
  unsigned int v444;
  unint64_t v445;
  unint64_t v446;
  unint64_t v447;
  unint64_t v448;
  char *v449;
  char *v450;
  char *v451;
  char *v452;
  unsigned int v453;
  unsigned int *v454;
  unsigned int *v455;
  unsigned int *v456;
  unsigned int *v457;
  char *v458;
  char *v459;
  char *v460;
  char *v461;
  int v462;
  int v463;
  int v464;
  int v465;
  unsigned __int8 *v466;
  unsigned __int8 *v467;
  unsigned __int8 *v468;
  unsigned __int8 *v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t v474;
  int v475;
  int v476;
  int v477;
  int v478;
  unint64_t v479;
  uint64_t v480;

  v6 = *(_DWORD *)(a1 + 272);
  v480 = a2;
  if (v6 == 5)
  {
    v112 = *(_QWORD *)(a1 + 112);
    v113 = *(_DWORD *)(a1 + 276);
    if (v113)
      v114 = v113;
    else
      v114 = 1;
    v115 = *(_QWORD *)(a1 + 8);
    v116 = *(unsigned int *)(a1 + 24);
    v479 = a4 + a5;
    v117 = a4 + a5 - 8;
    v13 = a3[1];
    v453 = *a3;
    v118 = *(_QWORD *)(a1 + 248);
    v119 = *(_QWORD *)(v118 + 112);
    v471 = *(unsigned int *)(v118 + 24);
    v120 = *(_QWORD *)(v118 + 8);
    v459 = *(char **)v118;
    v121 = *(_DWORD *)(v118 + 264);
    if (*(_DWORD *)(a1 + 296) && v121 <= 0x3D)
    {
      v122 = 0;
      do
      {
        _X12 = v119 + v122;
        __asm { PRFM            #2, [X12] }
        v122 += 64;
      }
      while (v122 < 4 << v121);
    }
    v125 = (uint64_t *)(a4 + v114);
    if (a4 + v114 <= v117)
    {
      v467 = (unsigned __int8 *)(v115 + v116);
      v414 = v120 + v471;
      v126 = v116 + v120 - (_DWORD)v459;
      if ((_DWORD)v459 + (_DWORD)a4 - ((_DWORD)v115 + (_DWORD)v116) == (_DWORD)v120 + (_DWORD)v471)
        v27 = a4 + 1;
      else
        v27 = a4;
      v463 = 64 - *(_DWORD *)(a1 + 264);
      v127 = 56 - v121;
      v476 = v116 - 1;
      v446 = v117;
      v450 = (char *)(v479 - 32);
      v422 = v479 - 7;
      v410 = v120 - 1;
      v418 = v115 + 12;
      v430 = v120 - v126;
      v434 = v120;
      v128 = v114;
      v438 = v119;
      v442 = v116 + v120 - (_DWORD)v459;
      v455 = a3;
      v426 = v114;
      while (1)
      {
        v474 = a4;
        v129 = 0xCF1BBCDCBB000000 * *(_QWORD *)v27;
        v130 = *(unsigned int *)(v119 + ((v129 >> v127 >> 6) & 0x3FFFFFFFFFFFFFCLL));
        v131 = (v129 >> v127) ^ v130;
        v132 = v27 + 256;
        v133 = v128;
        v134 = v463;
        while (1)
        {
          v135 = v125;
          v136 = v129 >> v463;
          v137 = *(unsigned int *)(v112 + 4 * (v129 >> v463));
          v138 = v27 - v115;
          v139 = v27 - v115 - v453 + 1;
          v140 = *v135;
          *(_DWORD *)(v112 + 4 * v136) = v27 - v115;
          if (v476 - v139 >= 3)
          {
            v141 = v120 + v139 - v126;
            if (v139 >= v116)
              v141 = v115 + v139;
            if (*(_DWORD *)v141 == *(_DWORD *)(v27 + 1))
            {
              v147 = v27 + 1;
              if (v139 >= v116)
                v148 = (char *)v479;
              else
                v148 = v459;
              v149 = sub_1D4B5F19C((_QWORD *)(v27 + 5), (char *)(v141 + 4), v479, v148, v467);
              a2 = v480;
              v150 = v149;
              v151 = v147 - v474;
              v152 = *(_OWORD **)(v480 + 24);
              if (v147 > (unint64_t)v450)
              {
                sub_1D4B56E1C(v152, (char *)v474, v147, v450);
                a2 = v480;
                v117 = v446;
                v120 = v434;
                v119 = v438;
                v126 = v442;
                v134 = v463;
                v153 = v453;
                goto LABEL_166;
              }
              *v152 = *(_OWORD *)v474;
              v160 = *(_QWORD *)(v480 + 24);
              v117 = v446;
              if ((unint64_t)v151 <= 0x10)
              {
                *(_QWORD *)(v480 + 24) = v160 + v151;
                v154 = *(_QWORD *)(v480 + 8);
                v120 = v434;
                v119 = v438;
                v126 = v442;
                v134 = v463;
                v153 = v453;
              }
              else
              {
                *(_OWORD *)(v160 + 16) = *(_OWORD *)(v474 + 16);
                v120 = v434;
                v119 = v438;
                v126 = v442;
                v134 = v463;
                v153 = v453;
                if (v151 >= 33)
                {
                  v161 = v160 + v151;
                  v162 = (_OWORD *)(v160 + 32);
                  v163 = (__int128 *)(v474 + 48);
                  do
                  {
                    *v162 = *(v163 - 1);
                    v164 = *v163;
                    v163 += 2;
                    v162[1] = v164;
                    v162 += 2;
                  }
                  while ((unint64_t)v162 < v161);
                }
LABEL_166:
                *(_QWORD *)(a2 + 24) += v151;
                v154 = *(_QWORD *)(a2 + 8);
                if ((unint64_t)v151 >= 0x10000)
                {
                  v155 = (unint64_t)(v154 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 1;
                  *(_DWORD *)(a2 + 76) = v155;
                }
              }
              v167 = v150 + 4;
              *(_WORD *)(v154 + 4) = v151;
              *(_DWORD *)v154 = 1;
              v171 = v150 + 1;
              v172 = v153;
              if ((v150 + 1) >> 16)
                goto LABEL_236;
              goto LABEL_237;
            }
          }
          v142 = v127;
          if (!(_BYTE)v131)
          {
            v143 = v130;
            v144 = (unint64_t)v130 >> 8;
            if (v144 > v471
              && *(_DWORD *)(v120 + v144) == *(_DWORD *)v27
              && v137 <= v116)
            {
              v167 = sub_1D4B5F19C((_QWORD *)(v27 + 4), (char *)(v120 + v144 + 4), v479, v459, v467) + 4;
              if (v27 <= v474)
              {
                a2 = v480;
                v117 = v446;
                v173 = (char *)(v479 - 32);
                v126 = v442;
                v127 = v142;
              }
              else
              {
                v168 = (unsigned __int8 *)(v410 + (v143 >> 8));
                v169 = (unsigned __int8 *)(v27 - 1);
                a2 = v480;
                v117 = v446;
                v126 = v442;
                v127 = v142;
                while (*v169 == *v168)
                {
                  ++v167;
                  v170 = v169 - 1;
                  if ((unint64_t)v168 > v414)
                  {
                    --v168;
                    v46 = (unint64_t)v169-- > v474;
                    if (v46)
                      continue;
                  }
                  v27 = (unint64_t)(v170 + 1);
                  goto LABEL_223;
                }
                v27 = (unint64_t)(v169 + 1);
LABEL_223:
                v173 = (char *)(v479 - 32);
              }
              v147 = v27;
              v184 = v27 - v474;
              v193 = *(_OWORD **)(a2 + 24);
              if (v27 > (unint64_t)v173)
              {
                sub_1D4B56E1C(v193, (char *)v474, v27, v173);
                v126 = v442;
                v117 = v446;
                a2 = v480;
                v120 = v434;
                v119 = v438;
                v134 = v463;
                v186 = v453;
                goto LABEL_230;
              }
              *v193 = *(_OWORD *)v474;
              v194 = *(_QWORD *)(a2 + 24);
              v120 = v434;
              v119 = v438;
              v134 = v463;
              if ((unint64_t)v184 <= 0x10)
              {
                *(_QWORD *)(a2 + 24) = v194 + v184;
                v154 = *(_QWORD *)(a2 + 8);
                v186 = v453;
              }
              else
              {
                *(_OWORD *)(v194 + 16) = *(_OWORD *)(v474 + 16);
                v186 = v453;
                if (v184 >= 33)
                {
                  v195 = v194 + v184;
                  v196 = (_OWORD *)(v194 + 32);
                  v197 = (__int128 *)(v474 + 48);
                  do
                  {
                    *v196 = *(v197 - 1);
                    v198 = *v197;
                    v197 += 2;
                    v196[1] = v198;
                    v196 += 2;
                  }
                  while ((unint64_t)v196 < v195);
                }
LABEL_230:
                *(_QWORD *)(a2 + 24) += v184;
                v154 = *(_QWORD *)(a2 + 8);
                if ((unint64_t)v184 >= 0x10000)
                {
                  v199 = (unint64_t)(v154 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 1;
                  *(_DWORD *)(a2 + 76) = v199;
                }
              }
              v172 = v138 - v126 - v144;
              goto LABEL_235;
            }
          }
          if (v137 > v116)
          {
            v146 = v115 + v137;
            if (*(_DWORD *)(v115 + v137) == *(_DWORD *)v27)
              break;
          }
          if ((unint64_t)v135 >= v132)
            ++v133;
          v125 = (uint64_t *)((char *)v135 + v133);
          if ((unint64_t)v135 + v133 > v117)
          {
LABEL_511:
            LODWORD(v102) = v13;
            v27 = v474;
            goto LABEL_512;
          }
          v129 = 0xCF1BBCDCBB000000 * v140;
          v127 = v142;
          v132 += (unint64_t)((unint64_t)v135 >= v132) << 8;
          LODWORD(v130) = *(_DWORD *)(v119 + ((v129 >> v142 >> 6) & 0x3FFFFFFFFFFFFFCLL));
          LOBYTE(v131) = (v129 >> v142) ^ v130;
          v27 = (unint64_t)v135;
        }
        v156 = (char *)(v27 + 4);
        v157 = (_QWORD *)(v146 + 4);
        if (v422 <= v27 + 4)
        {
          v165 = (_DWORD *)(v27 + 4);
          goto LABEL_177;
        }
        v158 = *(_QWORD *)v156 ^ *v157;
        if (v158)
        {
          v159 = __clz(__rbit64(v158)) >> 3;
          goto LABEL_202;
        }
        v174 = 0;
        v175 = v27 + 12;
        while (2)
        {
          v176 = (_QWORD *)(v175 + v174);
          if (v175 + v174 >= v422)
          {
            v165 = (_DWORD *)(v27 + v174 + 12);
            v157 = (_QWORD *)(v418 + v137 + v174);
LABEL_177:
            if ((unint64_t)v165 < v479 - 3 && *(_DWORD *)v157 == *v165)
            {
              ++v165;
              v157 = (_QWORD *)((char *)v157 + 4);
            }
            if ((unint64_t)v165 < v479 - 1 && *(unsigned __int16 *)v157 == *(unsigned __int16 *)v165)
            {
              v165 = (_DWORD *)((char *)v165 + 2);
              v157 = (_QWORD *)((char *)v157 + 2);
            }
            if ((unint64_t)v165 < v479 && *(unsigned __int8 *)v157 == *(unsigned __int8 *)v165)
              v165 = (_DWORD *)((char *)v165 + 1);
            v166 = a4;
            v159 = (char *)v165 - v156;
            goto LABEL_203;
          }
          v177 = *(_QWORD *)(v418 + v137 + v174);
          v174 += 8;
          v178 = *v176 ^ v177;
          if (!v178)
            continue;
          break;
        }
        v159 = v174 + (__clz(__rbit64(v178)) >> 3);
LABEL_202:
        v166 = a4;
LABEL_203:
        v167 = v159 + 4;
        if (v27 <= v166)
        {
          v127 = v142;
          v147 = v27;
          v183 = (char *)(v479 - 32);
        }
        else
        {
          v179 = (unsigned __int8 *)(v115 - 1 + v137);
          v180 = (unsigned __int8 *)(v27 - 1);
          while (*v180 == *v179)
          {
            ++v167;
            v181 = v180 - 1;
            if (v179 > v467)
            {
              --v179;
              v46 = (unint64_t)v180-- > v166;
              if (v46)
                continue;
            }
            v182 = v181 + 1;
            goto LABEL_211;
          }
          v182 = v180 + 1;
LABEL_211:
          v127 = v142;
          v183 = (char *)(v479 - 32);
          v147 = (unint64_t)v182;
        }
        v184 = v147 - v166;
        v185 = *(_OWORD **)(a2 + 24);
        if (v147 > (unint64_t)v183)
        {
          sub_1D4B56E1C(v185, (char *)v166, v147, v183);
          v134 = v463;
          v126 = v442;
          v120 = v434;
          v119 = v438;
          v117 = v446;
          a2 = v480;
          v186 = v453;
          goto LABEL_218;
        }
        *v185 = *(_OWORD *)v166;
        v187 = *(_QWORD *)(a2 + 24);
        if ((unint64_t)v184 <= 0x10)
        {
          *(_QWORD *)(a2 + 24) = v187 + v184;
          v154 = *(_QWORD *)(a2 + 8);
          v186 = v453;
        }
        else
        {
          *(_OWORD *)(v187 + 16) = *(_OWORD *)(v166 + 16);
          v186 = v453;
          if (v184 >= 33)
          {
            v188 = v187 + v184;
            v189 = (_OWORD *)(v187 + 32);
            v190 = (__int128 *)(v166 + 48);
            do
            {
              *v189 = *(v190 - 1);
              v191 = *v190;
              v190 += 2;
              v189[1] = v191;
              v189 += 2;
            }
            while ((unint64_t)v189 < v188);
          }
LABEL_218:
          *(_QWORD *)(a2 + 24) += v184;
          v154 = *(_QWORD *)(a2 + 8);
          if ((unint64_t)v184 >= 0x10000)
          {
            v192 = (unint64_t)(v154 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v192;
          }
        }
        v172 = (v27 - v146);
LABEL_235:
        *(_WORD *)(v154 + 4) = v184;
        *(_DWORD *)v154 = v172 + 3;
        v171 = v167 - 3;
        v13 = v186;
        if ((v167 - 3) >> 16)
        {
LABEL_236:
          v200 = (unint64_t)(v154 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v200;
        }
LABEL_237:
        *(_WORD *)(v154 + 6) = v171;
        *(_QWORD *)(a2 + 8) = v154 + 8;
        v27 = v147 + v167;
        if (v147 + v167 <= v117)
        {
          *(_DWORD *)(v112 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v115 + 2 + v138)) >> v134)) = v138 + 2;
          *(_DWORD *)(v112 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v27 - 2)) >> v134)) = v27 - 2 - v115;
          a3 = v455;
          while (1)
          {
            v102 = v172;
            v172 = v13;
            v202 = (v27 - v115 - v13);
            v203 = v430;
            if (v202 >= v116)
              v203 = v115;
            if ((v476 - v202) < 3)
              break;
            v204 = v203 + v202;
            if (*(_DWORD *)v204 != *(_DWORD *)v27)
              break;
            if (v202 >= v116)
              v205 = (char *)v479;
            else
              v205 = v459;
            v206 = sub_1D4B5F19C((_QWORD *)(v27 + 4), (char *)(v204 + 4), v479, v205, v467);
            a2 = v480;
            v207 = v206;
            v208 = *(_OWORD **)(v480 + 24);
            if (v27 <= (unint64_t)v450)
            {
              *v208 = *(_OWORD *)v27;
            }
            else
            {
              sub_1D4B56E1C(v208, (char *)v27, v27, v450);
              a2 = v480;
            }
            v117 = v446;
            v209 = *(_QWORD *)(a2 + 8);
            *(_WORD *)(v209 + 4) = 0;
            *(_DWORD *)v209 = 1;
            v120 = v434;
            v119 = v438;
            v126 = v442;
            if (v207 + 1 >= 0x10000)
            {
              v210 = (unint64_t)(v209 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v210;
            }
            *(_WORD *)(v209 + 6) = v207 + 1;
            *(_QWORD *)(a2 + 8) = v209 + 8;
            *(_DWORD *)(v112 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v27) >> v463)) = v27 - v115;
            v27 += v207 + 4;
            v13 = v102;
            v201 = v172;
            if (v27 > v446)
              goto LABEL_255;
          }
          v201 = v102;
          v102 = v13;
        }
        else
        {
          v201 = v172;
          v102 = v13;
          a3 = v455;
        }
LABEL_255:
        v453 = v201;
        v128 = v426;
        v125 = (uint64_t *)(v27 + v426);
        a4 = v27;
        v13 = v102;
        if (v27 + v426 > v117)
          goto LABEL_512;
      }
    }
LABEL_391:
    LODWORD(v102) = v13;
    v27 = a4;
    goto LABEL_512;
  }
  if (v6 == 6)
  {
    v211 = *(_QWORD *)(a1 + 112);
    v212 = *(_DWORD *)(a1 + 276);
    if (v212)
      v213 = v212;
    else
      v213 = 1;
    v214 = *(_QWORD *)(a1 + 8);
    v215 = *(unsigned int *)(a1 + 24);
    v479 = a4 + a5;
    v216 = a4 + a5 - 8;
    v13 = a3[1];
    v453 = *a3;
    v217 = *(_QWORD *)(a1 + 248);
    v218 = *(_QWORD *)(v217 + 112);
    v472 = *(unsigned int *)(v217 + 24);
    v219 = *(_QWORD *)(v217 + 8);
    v460 = *(char **)v217;
    v220 = *(_DWORD *)(v217 + 264);
    if (*(_DWORD *)(a1 + 296) && v220 <= 0x3D)
    {
      v221 = 0;
      do
      {
        _X12 = v218 + v221;
        __asm { PRFM            #2, [X12] }
        v221 += 64;
      }
      while (v221 < 4 << v220);
    }
    v224 = (uint64_t *)(a4 + v213);
    if (a4 + v213 <= v216)
    {
      v468 = (unsigned __int8 *)(v214 + v215);
      v415 = v219 + v472;
      v225 = v215 + v219 - (_DWORD)v460;
      if ((_DWORD)v460 + (_DWORD)a4 - ((_DWORD)v214 + (_DWORD)v215) == (_DWORD)v219 + (_DWORD)v472)
        v27 = a4 + 1;
      else
        v27 = a4;
      v464 = 64 - *(_DWORD *)(a1 + 264);
      v226 = 56 - v220;
      v477 = v215 - 1;
      v447 = v216;
      v451 = (char *)(v479 - 32);
      v423 = v479 - 7;
      v411 = v219 - 1;
      v419 = v214 + 12;
      v431 = v219 - v225;
      v435 = v219;
      v227 = v213;
      v439 = v218;
      v443 = v215 + v219 - (_DWORD)v460;
      v456 = a3;
      v427 = v213;
      while (1)
      {
        v474 = a4;
        v228 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)v27;
        v229 = *(unsigned int *)(v218 + ((v228 >> v226 >> 6) & 0x3FFFFFFFFFFFFFCLL));
        v230 = (v228 >> v226) ^ v229;
        v231 = v27 + 256;
        v232 = v227;
        v233 = v464;
        while (1)
        {
          v234 = v224;
          v235 = v228 >> v464;
          v236 = *(unsigned int *)(v211 + 4 * (v228 >> v464));
          v237 = v27 - v214;
          v238 = v27 - v214 - v453 + 1;
          v239 = *v234;
          *(_DWORD *)(v211 + 4 * v235) = v27 - v214;
          if (v477 - v238 >= 3)
          {
            v240 = v219 + v238 - v225;
            if (v238 >= v215)
              v240 = v214 + v238;
            if (*(_DWORD *)v240 == *(_DWORD *)(v27 + 1))
            {
              v246 = v27 + 1;
              if (v238 >= v215)
                v247 = (char *)v479;
              else
                v247 = v460;
              v248 = sub_1D4B5F19C((_QWORD *)(v27 + 5), (char *)(v240 + 4), v479, v247, v468);
              a2 = v480;
              v249 = v248;
              v250 = v246 - v474;
              v251 = *(_OWORD **)(v480 + 24);
              if (v246 > (unint64_t)v451)
              {
                sub_1D4B56E1C(v251, (char *)v474, v246, v451);
                a2 = v480;
                v216 = v447;
                v219 = v435;
                v218 = v439;
                v225 = v443;
                v233 = v464;
                v252 = v453;
                goto LABEL_292;
              }
              *v251 = *(_OWORD *)v474;
              v259 = *(_QWORD *)(v480 + 24);
              v216 = v447;
              if ((unint64_t)v250 <= 0x10)
              {
                *(_QWORD *)(v480 + 24) = v259 + v250;
                v253 = *(_QWORD *)(v480 + 8);
                v219 = v435;
                v218 = v439;
                v225 = v443;
                v233 = v464;
                v252 = v453;
              }
              else
              {
                *(_OWORD *)(v259 + 16) = *(_OWORD *)(v474 + 16);
                v219 = v435;
                v218 = v439;
                v225 = v443;
                v233 = v464;
                v252 = v453;
                if (v250 >= 33)
                {
                  v260 = v259 + v250;
                  v261 = (_OWORD *)(v259 + 32);
                  v262 = (__int128 *)(v474 + 48);
                  do
                  {
                    *v261 = *(v262 - 1);
                    v263 = *v262;
                    v262 += 2;
                    v261[1] = v263;
                    v261 += 2;
                  }
                  while ((unint64_t)v261 < v260);
                }
LABEL_292:
                *(_QWORD *)(a2 + 24) += v250;
                v253 = *(_QWORD *)(a2 + 8);
                if ((unint64_t)v250 >= 0x10000)
                {
                  v254 = (unint64_t)(v253 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 1;
                  *(_DWORD *)(a2 + 76) = v254;
                }
              }
              v266 = v249 + 4;
              *(_WORD *)(v253 + 4) = v250;
              *(_DWORD *)v253 = 1;
              v270 = v249 + 1;
              v271 = v252;
              if ((v249 + 1) >> 16)
                goto LABEL_362;
              goto LABEL_363;
            }
          }
          v241 = v226;
          if (!(_BYTE)v230)
          {
            v242 = v229;
            v243 = (unint64_t)v229 >> 8;
            if (v243 > v472
              && *(_DWORD *)(v219 + v243) == *(_DWORD *)v27
              && v236 <= v215)
            {
              v266 = sub_1D4B5F19C((_QWORD *)(v27 + 4), (char *)(v219 + v243 + 4), v479, v460, v468) + 4;
              if (v27 <= v474)
              {
                a2 = v480;
                v216 = v447;
                v272 = (char *)(v479 - 32);
                v225 = v443;
                v226 = v241;
              }
              else
              {
                v267 = (unsigned __int8 *)(v411 + (v242 >> 8));
                v268 = (unsigned __int8 *)(v27 - 1);
                a2 = v480;
                v216 = v447;
                v225 = v443;
                v226 = v241;
                while (*v268 == *v267)
                {
                  ++v266;
                  v269 = v268 - 1;
                  if ((unint64_t)v267 > v415)
                  {
                    --v267;
                    v46 = (unint64_t)v268-- > v474;
                    if (v46)
                      continue;
                  }
                  v27 = (unint64_t)(v269 + 1);
                  goto LABEL_349;
                }
                v27 = (unint64_t)(v268 + 1);
LABEL_349:
                v272 = (char *)(v479 - 32);
              }
              v246 = v27;
              v283 = v27 - v474;
              v292 = *(_OWORD **)(a2 + 24);
              if (v27 > (unint64_t)v272)
              {
                sub_1D4B56E1C(v292, (char *)v474, v27, v272);
                v225 = v443;
                v216 = v447;
                a2 = v480;
                v219 = v435;
                v218 = v439;
                v233 = v464;
                v285 = v453;
                goto LABEL_356;
              }
              *v292 = *(_OWORD *)v474;
              v293 = *(_QWORD *)(a2 + 24);
              v219 = v435;
              v218 = v439;
              v233 = v464;
              if ((unint64_t)v283 <= 0x10)
              {
                *(_QWORD *)(a2 + 24) = v293 + v283;
                v253 = *(_QWORD *)(a2 + 8);
                v285 = v453;
              }
              else
              {
                *(_OWORD *)(v293 + 16) = *(_OWORD *)(v474 + 16);
                v285 = v453;
                if (v283 >= 33)
                {
                  v294 = v293 + v283;
                  v295 = (_OWORD *)(v293 + 32);
                  v296 = (__int128 *)(v474 + 48);
                  do
                  {
                    *v295 = *(v296 - 1);
                    v297 = *v296;
                    v296 += 2;
                    v295[1] = v297;
                    v295 += 2;
                  }
                  while ((unint64_t)v295 < v294);
                }
LABEL_356:
                *(_QWORD *)(a2 + 24) += v283;
                v253 = *(_QWORD *)(a2 + 8);
                if ((unint64_t)v283 >= 0x10000)
                {
                  v298 = (unint64_t)(v253 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 1;
                  *(_DWORD *)(a2 + 76) = v298;
                }
              }
              v271 = v237 - v225 - v243;
              goto LABEL_361;
            }
          }
          if (v236 > v215)
          {
            v245 = v214 + v236;
            if (*(_DWORD *)(v214 + v236) == *(_DWORD *)v27)
              break;
          }
          if ((unint64_t)v234 >= v231)
            ++v232;
          v224 = (uint64_t *)((char *)v234 + v232);
          if ((unint64_t)v234 + v232 > v216)
            goto LABEL_511;
          v228 = 0xCF1BBCDCBF9B0000 * v239;
          v226 = v241;
          v231 += (unint64_t)((unint64_t)v234 >= v231) << 8;
          LODWORD(v229) = *(_DWORD *)(v218 + ((v228 >> v241 >> 6) & 0x3FFFFFFFFFFFFFCLL));
          LOBYTE(v230) = (v228 >> v241) ^ v229;
          v27 = (unint64_t)v234;
        }
        v255 = (char *)(v27 + 4);
        v256 = (_QWORD *)(v245 + 4);
        if (v423 <= v27 + 4)
        {
          v264 = (_DWORD *)(v27 + 4);
          goto LABEL_303;
        }
        v257 = *(_QWORD *)v255 ^ *v256;
        if (v257)
        {
          v258 = __clz(__rbit64(v257)) >> 3;
          goto LABEL_328;
        }
        v273 = 0;
        v274 = v27 + 12;
        while (2)
        {
          v275 = (_QWORD *)(v274 + v273);
          if (v274 + v273 >= v423)
          {
            v264 = (_DWORD *)(v27 + v273 + 12);
            v256 = (_QWORD *)(v419 + v236 + v273);
LABEL_303:
            if ((unint64_t)v264 < v479 - 3 && *(_DWORD *)v256 == *v264)
            {
              ++v264;
              v256 = (_QWORD *)((char *)v256 + 4);
            }
            if ((unint64_t)v264 < v479 - 1 && *(unsigned __int16 *)v256 == *(unsigned __int16 *)v264)
            {
              v264 = (_DWORD *)((char *)v264 + 2);
              v256 = (_QWORD *)((char *)v256 + 2);
            }
            if ((unint64_t)v264 < v479 && *(unsigned __int8 *)v256 == *(unsigned __int8 *)v264)
              v264 = (_DWORD *)((char *)v264 + 1);
            v265 = a4;
            v258 = (char *)v264 - v255;
            goto LABEL_329;
          }
          v276 = *(_QWORD *)(v419 + v236 + v273);
          v273 += 8;
          v277 = *v275 ^ v276;
          if (!v277)
            continue;
          break;
        }
        v258 = v273 + (__clz(__rbit64(v277)) >> 3);
LABEL_328:
        v265 = a4;
LABEL_329:
        v266 = v258 + 4;
        if (v27 <= v265)
        {
          v226 = v241;
          v246 = v27;
          v282 = (char *)(v479 - 32);
        }
        else
        {
          v278 = (unsigned __int8 *)(v214 - 1 + v236);
          v279 = (unsigned __int8 *)(v27 - 1);
          while (*v279 == *v278)
          {
            ++v266;
            v280 = v279 - 1;
            if (v278 > v468)
            {
              --v278;
              v46 = (unint64_t)v279-- > v265;
              if (v46)
                continue;
            }
            v281 = v280 + 1;
            goto LABEL_337;
          }
          v281 = v279 + 1;
LABEL_337:
          v226 = v241;
          v282 = (char *)(v479 - 32);
          v246 = (unint64_t)v281;
        }
        v283 = v246 - v265;
        v284 = *(_OWORD **)(a2 + 24);
        if (v246 > (unint64_t)v282)
        {
          sub_1D4B56E1C(v284, (char *)v265, v246, v282);
          v233 = v464;
          v225 = v443;
          v219 = v435;
          v218 = v439;
          v216 = v447;
          a2 = v480;
          v285 = v453;
          goto LABEL_344;
        }
        *v284 = *(_OWORD *)v265;
        v286 = *(_QWORD *)(a2 + 24);
        if ((unint64_t)v283 <= 0x10)
        {
          *(_QWORD *)(a2 + 24) = v286 + v283;
          v253 = *(_QWORD *)(a2 + 8);
          v285 = v453;
        }
        else
        {
          *(_OWORD *)(v286 + 16) = *(_OWORD *)(v265 + 16);
          v285 = v453;
          if (v283 >= 33)
          {
            v287 = v286 + v283;
            v288 = (_OWORD *)(v286 + 32);
            v289 = (__int128 *)(v265 + 48);
            do
            {
              *v288 = *(v289 - 1);
              v290 = *v289;
              v289 += 2;
              v288[1] = v290;
              v288 += 2;
            }
            while ((unint64_t)v288 < v287);
          }
LABEL_344:
          *(_QWORD *)(a2 + 24) += v283;
          v253 = *(_QWORD *)(a2 + 8);
          if ((unint64_t)v283 >= 0x10000)
          {
            v291 = (unint64_t)(v253 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v291;
          }
        }
        v271 = (v27 - v245);
LABEL_361:
        *(_WORD *)(v253 + 4) = v283;
        *(_DWORD *)v253 = v271 + 3;
        v270 = v266 - 3;
        v13 = v285;
        if ((v266 - 3) >> 16)
        {
LABEL_362:
          v299 = (unint64_t)(v253 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v299;
        }
LABEL_363:
        *(_WORD *)(v253 + 6) = v270;
        *(_QWORD *)(a2 + 8) = v253 + 8;
        v27 = v246 + v266;
        if (v246 + v266 <= v216)
        {
          *(_DWORD *)(v211 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v214 + 2 + v237)) >> v233)) = v237 + 2;
          *(_DWORD *)(v211 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v27 - 2)) >> v233)) = v27 - 2 - v214;
          a3 = v456;
          while (1)
          {
            v102 = v271;
            v271 = v13;
            v301 = (v27 - v214 - v13);
            v302 = v431;
            if (v301 >= v215)
              v302 = v214;
            if ((v477 - v301) < 3)
              break;
            v303 = v302 + v301;
            if (*(_DWORD *)v303 != *(_DWORD *)v27)
              break;
            if (v301 >= v215)
              v304 = (char *)v479;
            else
              v304 = v460;
            v305 = sub_1D4B5F19C((_QWORD *)(v27 + 4), (char *)(v303 + 4), v479, v304, v468);
            a2 = v480;
            v306 = v305;
            v307 = *(_OWORD **)(v480 + 24);
            if (v27 <= (unint64_t)v451)
            {
              *v307 = *(_OWORD *)v27;
            }
            else
            {
              sub_1D4B56E1C(v307, (char *)v27, v27, v451);
              a2 = v480;
            }
            v216 = v447;
            v308 = *(_QWORD *)(a2 + 8);
            *(_WORD *)(v308 + 4) = 0;
            *(_DWORD *)v308 = 1;
            v219 = v435;
            v218 = v439;
            v225 = v443;
            if (v306 + 1 >= 0x10000)
            {
              v309 = (unint64_t)(v308 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v309;
            }
            *(_WORD *)(v308 + 6) = v306 + 1;
            *(_QWORD *)(a2 + 8) = v308 + 8;
            *(_DWORD *)(v211 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v27) >> v464)) = v27 - v214;
            v27 += v306 + 4;
            v13 = v102;
            v300 = v271;
            if (v27 > v447)
              goto LABEL_381;
          }
          v300 = v102;
          v102 = v13;
        }
        else
        {
          v300 = v271;
          v102 = v13;
          a3 = v456;
        }
LABEL_381:
        v453 = v300;
        v227 = v427;
        v224 = (uint64_t *)(v27 + v427);
        a4 = v27;
        v13 = v102;
        if (v27 + v427 > v216)
          goto LABEL_512;
      }
    }
    goto LABEL_391;
  }
  if (v6 != 7)
  {
    v310 = *(_QWORD *)(a1 + 112);
    v311 = *(_DWORD *)(a1 + 276);
    if (v311)
      v312 = v311;
    else
      v312 = 1;
    v313 = *(_QWORD *)(a1 + 8);
    v314 = *(unsigned int *)(a1 + 24);
    v479 = a4 + a5;
    v315 = a4 + a5 - 8;
    v13 = a3[1];
    v453 = *a3;
    v316 = *(_QWORD *)(a1 + 248);
    v317 = *(_QWORD *)(v316 + 112);
    v473 = *(unsigned int *)(v316 + 24);
    v318 = *(_QWORD *)(v316 + 8);
    v461 = *(char **)v316;
    v319 = *(_DWORD *)(v316 + 264);
    if (*(_DWORD *)(a1 + 296) && v319 <= 0x3D)
    {
      v320 = 0;
      do
      {
        _X12 = v317 + v320;
        __asm { PRFM            #2, [X12] }
        v320 += 64;
      }
      while (v320 < 4 << v319);
    }
    v323 = (int *)(a4 + v312);
    if (a4 + v312 <= v315)
    {
      v469 = (unsigned __int8 *)(v313 + v314);
      v416 = v318 + v473;
      v324 = v314 + v318 - (_DWORD)v461;
      if ((_DWORD)v461 + (_DWORD)a4 - ((_DWORD)v313 + (_DWORD)v314) == (_DWORD)v318 + (_DWORD)v473)
        v27 = a4 + 1;
      else
        v27 = a4;
      v465 = 32 - *(_DWORD *)(a1 + 264);
      v325 = 24 - v319;
      v478 = v314 - 1;
      v448 = v315;
      v452 = (char *)(v479 - 32);
      v424 = v479 - 7;
      v412 = v318 - 1;
      v420 = v313 + 12;
      v432 = v318 - v324;
      v436 = v318;
      v326 = v312;
      v440 = v317;
      v444 = v314 + v318 - (_DWORD)v461;
      v457 = a3;
      v428 = v312;
      while (1)
      {
        v474 = a4;
        v327 = -1640531535 * *(_DWORD *)v27;
        v328 = *(_DWORD *)(v317 + 4 * (v327 >> v325 >> 8));
        v329 = (v327 >> v325) ^ v328;
        v330 = v27 + 256;
        v331 = v326;
        v332 = v465;
        while (1)
        {
          v333 = v323;
          v334 = v327 >> v465;
          v335 = *(unsigned int *)(v310 + 4 * (v327 >> v465));
          v336 = v27 - v313;
          v337 = v27 - v313 - v453 + 1;
          v338 = *v333;
          *(_DWORD *)(v310 + 4 * v334) = v27 - v313;
          if (v478 - v337 >= 3)
          {
            v339 = v318 + v337 - v324;
            if (v337 >= v314)
              v339 = v313 + v337;
            if (*(_DWORD *)v339 == *(_DWORD *)(v27 + 1))
            {
              v345 = v27 + 1;
              if (v337 >= v314)
                v346 = (char *)v479;
              else
                v346 = v461;
              v347 = sub_1D4B5F19C((_QWORD *)(v27 + 5), (char *)(v339 + 4), v479, v346, v469);
              a2 = v480;
              v348 = v347;
              v349 = v345 - v474;
              v350 = *(_OWORD **)(v480 + 24);
              if (v345 > (unint64_t)v452)
              {
                sub_1D4B56E1C(v350, (char *)v474, v345, v452);
                a2 = v480;
                v315 = v448;
                v318 = v436;
                v317 = v440;
                v324 = v444;
                v332 = v465;
                v351 = v453;
                goto LABEL_419;
              }
              *v350 = *(_OWORD *)v474;
              v358 = *(_QWORD *)(v480 + 24);
              v315 = v448;
              if ((unint64_t)v349 <= 0x10)
              {
                *(_QWORD *)(v480 + 24) = v358 + v349;
                v352 = *(_QWORD *)(v480 + 8);
                v318 = v436;
                v317 = v440;
                v324 = v444;
                v332 = v465;
                v351 = v453;
              }
              else
              {
                *(_OWORD *)(v358 + 16) = *(_OWORD *)(v474 + 16);
                v318 = v436;
                v317 = v440;
                v324 = v444;
                v332 = v465;
                v351 = v453;
                if (v349 >= 33)
                {
                  v359 = v358 + v349;
                  v360 = (_OWORD *)(v358 + 32);
                  v361 = (__int128 *)(v474 + 48);
                  do
                  {
                    *v360 = *(v361 - 1);
                    v362 = *v361;
                    v361 += 2;
                    v360[1] = v362;
                    v360 += 2;
                  }
                  while ((unint64_t)v360 < v359);
                }
LABEL_419:
                *(_QWORD *)(a2 + 24) += v349;
                v352 = *(_QWORD *)(a2 + 8);
                if ((unint64_t)v349 >= 0x10000)
                {
                  v353 = (unint64_t)(v352 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 1;
                  *(_DWORD *)(a2 + 76) = v353;
                }
              }
              v365 = v348 + 4;
              *(_WORD *)(v352 + 4) = v349;
              *(_DWORD *)v352 = 1;
              v369 = v348 + 1;
              v370 = v351;
              if ((v348 + 1) >> 16)
                goto LABEL_490;
              goto LABEL_491;
            }
          }
          v340 = v325;
          if (!(_BYTE)v329)
          {
            v341 = v328;
            v342 = (unint64_t)v328 >> 8;
            if (v342 > v473
              && *(_DWORD *)(v318 + v342) == *(_DWORD *)v27
              && v335 <= v314)
            {
              v365 = sub_1D4B5F19C((_QWORD *)(v27 + 4), (char *)(v318 + v342 + 4), v479, v461, v469) + 4;
              if (v27 <= v474)
              {
                a2 = v480;
                v315 = v448;
                v324 = v444;
                v325 = v340;
                v345 = v27;
              }
              else
              {
                v366 = (unsigned __int8 *)(v412 + (v341 >> 8));
                v367 = (unsigned __int8 *)(v27 - 1);
                v315 = v448;
                v324 = v444;
                v325 = v340;
                while (*v367 == *v366)
                {
                  ++v365;
                  v368 = v367 - 1;
                  if ((unint64_t)v366 > v416)
                  {
                    --v366;
                    v46 = (unint64_t)v367-- > v474;
                    if (v46)
                      continue;
                  }
                  v27 = (unint64_t)(v368 + 1);
                  goto LABEL_476;
                }
                v27 = (unint64_t)(v367 + 1);
LABEL_476:
                v345 = v27;
                a2 = v480;
              }
              v381 = v27 - v474;
              v390 = *(_OWORD **)(a2 + 24);
              if (v27 > (unint64_t)v452)
              {
                sub_1D4B56E1C(v390, (char *)v474, v27, v452);
                v324 = v444;
                v315 = v448;
                a2 = v480;
                v318 = v436;
                v317 = v440;
                v332 = v465;
                v383 = v453;
                goto LABEL_479;
              }
              *v390 = *(_OWORD *)v474;
              v392 = *(_QWORD *)(a2 + 24);
              v318 = v436;
              v317 = v440;
              v332 = v465;
              if ((unint64_t)v381 <= 0x10)
              {
                *(_QWORD *)(a2 + 24) = v392 + v381;
                v352 = *(_QWORD *)(a2 + 8);
                v383 = v453;
              }
              else
              {
                *(_OWORD *)(v392 + 16) = *(_OWORD *)(v474 + 16);
                v383 = v453;
                if (v381 >= 33)
                {
                  v393 = v392 + v381;
                  v394 = (_OWORD *)(v392 + 32);
                  v395 = (__int128 *)(v474 + 48);
                  do
                  {
                    *v394 = *(v395 - 1);
                    v396 = *v395;
                    v395 += 2;
                    v394[1] = v396;
                    v394 += 2;
                  }
                  while ((unint64_t)v394 < v393);
                }
LABEL_479:
                *(_QWORD *)(a2 + 24) += v381;
                v352 = *(_QWORD *)(a2 + 8);
                if ((unint64_t)v381 >= 0x10000)
                {
                  v391 = (unint64_t)(v352 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 1;
                  *(_DWORD *)(a2 + 76) = v391;
                }
              }
              v370 = v336 - v324 - v342;
              goto LABEL_489;
            }
          }
          if (v335 > v314)
          {
            v344 = v313 + v335;
            if (*(_DWORD *)(v313 + v335) == *(_DWORD *)v27)
              break;
          }
          if ((unint64_t)v333 >= v330)
            ++v331;
          v323 = (int *)((char *)v333 + v331);
          if ((unint64_t)v333 + v331 > v315)
            goto LABEL_511;
          v327 = -1640531535 * v338;
          v325 = v340;
          v330 += (unint64_t)((unint64_t)v333 >= v330) << 8;
          v328 = *(_DWORD *)(v317 + 4 * (v327 >> v340 >> 8));
          LOBYTE(v329) = v328 ^ (v327 >> v340);
          v27 = (unint64_t)v333;
        }
        v354 = (char *)(v27 + 4);
        v355 = (_QWORD *)(v344 + 4);
        if (v424 <= v27 + 4)
        {
          v363 = (_DWORD *)(v27 + 4);
          goto LABEL_430;
        }
        v356 = *(_QWORD *)v354 ^ *v355;
        if (v356)
        {
          v357 = __clz(__rbit64(v356)) >> 3;
          goto LABEL_454;
        }
        v371 = 0;
        v372 = v27 + 12;
        while (2)
        {
          v373 = (_QWORD *)(v372 + v371);
          if (v372 + v371 >= v424)
          {
            v363 = (_DWORD *)(v27 + v371 + 12);
            v355 = (_QWORD *)(v420 + v335 + v371);
LABEL_430:
            if ((unint64_t)v363 < v479 - 3 && *(_DWORD *)v355 == *v363)
            {
              ++v363;
              v355 = (_QWORD *)((char *)v355 + 4);
            }
            if ((unint64_t)v363 < v479 - 1 && *(unsigned __int16 *)v355 == *(unsigned __int16 *)v363)
            {
              v363 = (_DWORD *)((char *)v363 + 2);
              v355 = (_QWORD *)((char *)v355 + 2);
            }
            if ((unint64_t)v363 < v479 && *(unsigned __int8 *)v355 == *(unsigned __int8 *)v363)
              v363 = (_DWORD *)((char *)v363 + 1);
            v364 = a4;
            v357 = (char *)v363 - v354;
            goto LABEL_455;
          }
          v374 = *(_QWORD *)(v420 + v335 + v371);
          v371 += 8;
          v375 = *v373 ^ v374;
          if (!v375)
            continue;
          break;
        }
        v357 = v371 + (__clz(__rbit64(v375)) >> 3);
LABEL_454:
        v364 = a4;
LABEL_455:
        v365 = v357 + 4;
        if (v27 <= v364)
        {
          v325 = v340;
          v345 = v27;
          v380 = (char *)(v479 - 32);
        }
        else
        {
          v376 = (unsigned __int8 *)(v313 - 1 + v335);
          v377 = (unsigned __int8 *)(v27 - 1);
          while (*v377 == *v376)
          {
            ++v365;
            v378 = v377 - 1;
            if (v376 > v469)
            {
              --v376;
              v46 = (unint64_t)v377-- > v364;
              if (v46)
                continue;
            }
            v379 = v378 + 1;
            goto LABEL_463;
          }
          v379 = v377 + 1;
LABEL_463:
          v325 = v340;
          v380 = (char *)(v479 - 32);
          v345 = (unint64_t)v379;
        }
        v381 = v345 - v364;
        v382 = *(_OWORD **)(a2 + 24);
        if (v345 > (unint64_t)v380)
        {
          sub_1D4B56E1C(v382, (char *)v364, v345, v380);
          v332 = v465;
          v324 = v444;
          v318 = v436;
          v317 = v440;
          v315 = v448;
          a2 = v480;
          v383 = v453;
          goto LABEL_470;
        }
        *v382 = *(_OWORD *)v364;
        v384 = *(_QWORD *)(a2 + 24);
        if ((unint64_t)v381 <= 0x10)
        {
          *(_QWORD *)(a2 + 24) = v384 + v381;
          v352 = *(_QWORD *)(a2 + 8);
          v383 = v453;
        }
        else
        {
          *(_OWORD *)(v384 + 16) = *(_OWORD *)(v364 + 16);
          v383 = v453;
          if (v381 >= 33)
          {
            v385 = v384 + v381;
            v386 = (_OWORD *)(v384 + 32);
            v387 = (__int128 *)(v364 + 48);
            do
            {
              *v386 = *(v387 - 1);
              v388 = *v387;
              v387 += 2;
              v386[1] = v388;
              v386 += 2;
            }
            while ((unint64_t)v386 < v385);
          }
LABEL_470:
          *(_QWORD *)(a2 + 24) += v381;
          v352 = *(_QWORD *)(a2 + 8);
          if ((unint64_t)v381 >= 0x10000)
          {
            v389 = (unint64_t)(v352 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v389;
          }
        }
        v370 = (v27 - v344);
LABEL_489:
        *(_WORD *)(v352 + 4) = v381;
        *(_DWORD *)v352 = v370 + 3;
        v369 = v365 - 3;
        v13 = v383;
        if ((v365 - 3) >> 16)
        {
LABEL_490:
          v397 = (unint64_t)(v352 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v397;
        }
LABEL_491:
        *(_WORD *)(v352 + 6) = v369;
        *(_QWORD *)(a2 + 8) = v352 + 8;
        v27 = v345 + v365;
        if (v345 + v365 <= v315)
        {
          *(_DWORD *)(v310 + 4 * ((-1640531535 * *(_DWORD *)(v313 + 2 + v336)) >> v332)) = v336 + 2;
          *(_DWORD *)(v310 + 4 * ((-1640531535 * *(_DWORD *)(v27 - 2)) >> v332)) = v27 - 2 - v313;
          a3 = v457;
          while (1)
          {
            v102 = v370;
            v370 = v13;
            v399 = (v27 - v313 - v13);
            v400 = v432;
            if (v399 >= v314)
              v400 = v313;
            if ((v478 - v399) < 3)
              break;
            v401 = v400 + v399;
            if (*(_DWORD *)v401 != *(_DWORD *)v27)
              break;
            if (v399 >= v314)
              v402 = (char *)v479;
            else
              v402 = v461;
            v403 = sub_1D4B5F19C((_QWORD *)(v27 + 4), (char *)(v401 + 4), v479, v402, v469);
            a2 = v480;
            v404 = v403;
            v405 = *(_OWORD **)(v480 + 24);
            if (v27 <= (unint64_t)v452)
            {
              *v405 = *(_OWORD *)v27;
            }
            else
            {
              sub_1D4B56E1C(v405, (char *)v27, v27, v452);
              a2 = v480;
            }
            v315 = v448;
            v406 = *(_QWORD *)(a2 + 8);
            *(_WORD *)(v406 + 4) = 0;
            *(_DWORD *)v406 = 1;
            v318 = v436;
            v317 = v440;
            v324 = v444;
            if (v404 + 1 >= 0x10000)
            {
              v407 = (unint64_t)(v406 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v407;
            }
            *(_WORD *)(v406 + 6) = v404 + 1;
            *(_QWORD *)(a2 + 8) = v406 + 8;
            *(_DWORD *)(v310 + 4 * ((-1640531535 * *(_DWORD *)v27) >> v465)) = v27 - v313;
            v27 += v404 + 4;
            v13 = v102;
            v398 = v370;
            if (v27 > v448)
              goto LABEL_509;
          }
          v398 = v102;
          v102 = v13;
        }
        else
        {
          v398 = v370;
          v102 = v13;
          a3 = v457;
        }
LABEL_509:
        v453 = v398;
        v326 = v428;
        v323 = (int *)(v27 + v428);
        a4 = v27;
        v13 = v102;
        if (v27 + v428 > v315)
          goto LABEL_512;
      }
    }
    goto LABEL_391;
  }
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_DWORD *)(a1 + 276);
  if (v8)
    v9 = v8;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(unsigned int *)(a1 + 24);
  v479 = a4 + a5;
  v12 = a4 + a5 - 8;
  v13 = a3[1];
  v453 = *a3;
  v14 = *(_QWORD *)(a1 + 248);
  v15 = *(_QWORD *)(v14 + 112);
  v470 = *(unsigned int *)(v14 + 24);
  v16 = *(_QWORD *)(v14 + 8);
  v458 = *(char **)v14;
  v17 = *(_DWORD *)(v14 + 264);
  if (*(_DWORD *)(a1 + 296) && v17 <= 0x3D)
  {
    v18 = 0;
    do
    {
      _X12 = v15 + v18;
      __asm { PRFM            #2, [X12] }
      v18 += 64;
    }
    while (v18 < 4 << v17);
  }
  v25 = (uint64_t *)(a4 + v9);
  if (a4 + v9 > v12)
    goto LABEL_391;
  v466 = (unsigned __int8 *)(v10 + v11);
  v413 = v16 + v470;
  v26 = v11 + v16 - (_DWORD)v458;
  if ((_DWORD)v458 + (_DWORD)a4 - ((_DWORD)v10 + (_DWORD)v11) == (_DWORD)v16 + (_DWORD)v470)
    v27 = a4 + 1;
  else
    v27 = a4;
  v462 = 64 - *(_DWORD *)(a1 + 264);
  v28 = 56 - v17;
  v475 = v11 - 1;
  v445 = v12;
  v449 = (char *)(v479 - 32);
  v421 = v479 - 7;
  v409 = v16 - 1;
  v417 = v10 + 12;
  v429 = v16 - v26;
  v433 = v16;
  v29 = v9;
  v437 = v15;
  v441 = v11 + v16 - (_DWORD)v458;
  v454 = a3;
  v425 = v9;
  do
  {
    v474 = a4;
    v30 = 0xCF1BBCDCBFA56300 * *(_QWORD *)v27;
    v31 = *(unsigned int *)(v15 + ((v30 >> v28 >> 6) & 0x3FFFFFFFFFFFFFCLL));
    v32 = (v30 >> v28) ^ v31;
    v33 = v27 + 256;
    v34 = v29;
    v35 = v462;
    while (1)
    {
      v36 = v25;
      v37 = v30 >> v462;
      v38 = *(unsigned int *)(v7 + 4 * (v30 >> v462));
      v39 = v27 - v10;
      v40 = v27 - v10 - v453 + 1;
      v41 = *v36;
      *(_DWORD *)(v7 + 4 * v37) = v27 - v10;
      if (v475 - v40 >= 3)
      {
        v42 = v16 + v40 - v26;
        if (v40 >= v11)
          v42 = v10 + v40;
        if (*(_DWORD *)v42 == *(_DWORD *)(v27 + 1))
        {
          v48 = v27 + 1;
          if (v40 >= v11)
            v49 = (char *)v479;
          else
            v49 = v458;
          v50 = sub_1D4B5F19C((_QWORD *)(v27 + 5), (char *)(v42 + 4), v479, v49, v466);
          a2 = v480;
          v51 = v50;
          v52 = v48 - v474;
          v53 = *(_OWORD **)(v480 + 24);
          if (v48 <= (unint64_t)v449)
          {
            *v53 = *(_OWORD *)v474;
            v61 = *(_QWORD *)(v480 + 24);
            v12 = v445;
            if ((unint64_t)v52 <= 0x10)
            {
              *(_QWORD *)(v480 + 24) = v61 + v52;
              v55 = *(_QWORD *)(v480 + 8);
              v16 = v433;
              v15 = v437;
              v26 = v441;
              v35 = v462;
              v54 = v453;
              goto LABEL_68;
            }
            *(_OWORD *)(v61 + 16) = *(_OWORD *)(v474 + 16);
            v16 = v433;
            v15 = v437;
            v26 = v441;
            v35 = v462;
            v54 = v453;
            if (v52 >= 33)
            {
              v62 = v61 + v52;
              v63 = (_OWORD *)(v61 + 32);
              v64 = (__int128 *)(v474 + 48);
              do
              {
                *v63 = *(v64 - 1);
                v65 = *v64;
                v64 += 2;
                v63[1] = v65;
                v63 += 2;
              }
              while ((unint64_t)v63 < v62);
            }
          }
          else
          {
            sub_1D4B56E1C(v53, (char *)v474, v48, v449);
            a2 = v480;
            v12 = v445;
            v16 = v433;
            v15 = v437;
            v26 = v441;
            v35 = v462;
            v54 = v453;
          }
          *(_QWORD *)(a2 + 24) += v52;
          v55 = *(_QWORD *)(a2 + 8);
          if ((unint64_t)v52 >= 0x10000)
          {
            v56 = (unint64_t)(v55 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v56;
          }
LABEL_68:
          v68 = v51 + 4;
          *(_WORD *)(v55 + 4) = v52;
          *(_DWORD *)v55 = 1;
          v72 = v51 + 1;
          v73 = v54;
          if (!((v51 + 1) >> 16))
            goto LABEL_111;
          goto LABEL_110;
        }
      }
      v43 = v28;
      if (!(_BYTE)v32)
      {
        v44 = v31;
        v45 = (unint64_t)v31 >> 8;
        if (v45 > v470)
        {
          v46 = *(_DWORD *)(v16 + v45) != *(_DWORD *)v27 || v38 > v11;
          if (!v46)
            break;
        }
      }
      if (v38 > v11)
      {
        v47 = v10 + v38;
        if (*(_DWORD *)(v10 + v38) == *(_DWORD *)v27)
        {
          v57 = (char *)(v27 + 4);
          v58 = (_QWORD *)(v47 + 4);
          if (v421 <= v27 + 4)
          {
            v66 = (_DWORD *)(v27 + 4);
          }
          else
          {
            v59 = *(_QWORD *)v57 ^ *v58;
            if (v59)
            {
              v60 = __clz(__rbit64(v59)) >> 3;
LABEL_74:
              v67 = a4;
LABEL_75:
              v68 = v60 + 4;
              if (v27 <= v67)
              {
                v28 = v43;
                v48 = v27;
                v83 = (char *)(v479 - 32);
              }
              else
              {
                v79 = (unsigned __int8 *)(v10 - 1 + v38);
                v80 = (unsigned __int8 *)(v27 - 1);
                while (*v80 == *v79)
                {
                  ++v68;
                  v81 = v80 - 1;
                  if (v79 > v466)
                  {
                    --v79;
                    v46 = (unint64_t)v80-- > v67;
                    if (v46)
                      continue;
                  }
                  v82 = v81 + 1;
                  goto LABEL_83;
                }
                v82 = v80 + 1;
LABEL_83:
                v28 = v43;
                v83 = (char *)(v479 - 32);
                v48 = (unint64_t)v82;
              }
              v84 = v48 - v67;
              v85 = *(_OWORD **)(a2 + 24);
              if (v48 <= (unint64_t)v83)
              {
                *v85 = *(_OWORD *)v67;
                v87 = *(_QWORD *)(a2 + 24);
                if ((unint64_t)v84 <= 0x10)
                {
                  *(_QWORD *)(a2 + 24) = v87 + v84;
                  v55 = *(_QWORD *)(a2 + 8);
                  v86 = v453;
LABEL_93:
                  v73 = (v27 - v47);
                  goto LABEL_109;
                }
                *(_OWORD *)(v87 + 16) = *(_OWORD *)(v67 + 16);
                v86 = v453;
                if (v84 >= 33)
                {
                  v88 = v87 + v84;
                  v89 = (_OWORD *)(v87 + 32);
                  v90 = (__int128 *)(v67 + 48);
                  do
                  {
                    *v89 = *(v90 - 1);
                    v91 = *v90;
                    v90 += 2;
                    v89[1] = v91;
                    v89 += 2;
                  }
                  while ((unint64_t)v89 < v88);
                }
              }
              else
              {
                sub_1D4B56E1C(v85, (char *)v67, v48, v83);
                v35 = v462;
                v26 = v441;
                v16 = v433;
                v15 = v437;
                v12 = v445;
                a2 = v480;
                v86 = v453;
              }
              *(_QWORD *)(a2 + 24) += v84;
              v55 = *(_QWORD *)(a2 + 8);
              if ((unint64_t)v84 >= 0x10000)
              {
                v92 = (unint64_t)(v55 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 1;
                *(_DWORD *)(a2 + 76) = v92;
              }
              goto LABEL_93;
            }
            v74 = 0;
            v75 = v27 + 12;
            while (1)
            {
              v76 = (_QWORD *)(v75 + v74);
              if (v75 + v74 >= v421)
                break;
              v77 = *(_QWORD *)(v417 + v38 + v74);
              v74 += 8;
              v78 = *v76 ^ v77;
              if (v78)
              {
                v60 = v74 + (__clz(__rbit64(v78)) >> 3);
                goto LABEL_74;
              }
            }
            v66 = (_DWORD *)(v27 + v74 + 12);
            v58 = (_QWORD *)(v417 + v38 + v74);
          }
          if ((unint64_t)v66 < v479 - 3 && *(_DWORD *)v58 == *v66)
          {
            ++v66;
            v58 = (_QWORD *)((char *)v58 + 4);
          }
          if ((unint64_t)v66 < v479 - 1 && *(unsigned __int16 *)v58 == *(unsigned __int16 *)v66)
          {
            v66 = (_DWORD *)((char *)v66 + 2);
            v58 = (_QWORD *)((char *)v58 + 2);
          }
          if ((unint64_t)v66 < v479 && *(unsigned __int8 *)v58 == *(unsigned __int8 *)v66)
            v66 = (_DWORD *)((char *)v66 + 1);
          v67 = a4;
          v60 = (char *)v66 - v57;
          goto LABEL_75;
        }
      }
      if ((unint64_t)v36 >= v33)
        ++v34;
      v25 = (uint64_t *)((char *)v36 + v34);
      if ((unint64_t)v36 + v34 > v12)
        goto LABEL_511;
      v30 = 0xCF1BBCDCBFA56300 * v41;
      v28 = v43;
      v33 += (unint64_t)((unint64_t)v36 >= v33) << 8;
      LODWORD(v31) = *(_DWORD *)(v15 + ((v30 >> v43 >> 6) & 0x3FFFFFFFFFFFFFCLL));
      LOBYTE(v32) = (v30 >> v43) ^ v31;
      v27 = (unint64_t)v36;
    }
    v68 = sub_1D4B5F19C((_QWORD *)(v27 + 4), (char *)(v16 + v45 + 4), v479, v458, v466) + 4;
    if (v27 <= v474)
    {
      a2 = v480;
      v12 = v445;
      v26 = v441;
      v28 = v43;
      v48 = v27;
    }
    else
    {
      v69 = (unsigned __int8 *)(v409 + (v44 >> 8));
      v70 = (unsigned __int8 *)(v27 - 1);
      v12 = v445;
      v26 = v441;
      v28 = v43;
      while (*v70 == *v69)
      {
        ++v68;
        v71 = v70 - 1;
        if ((unint64_t)v69 > v413)
        {
          --v69;
          v46 = (unint64_t)v70-- > v474;
          if (v46)
            continue;
        }
        v27 = (unint64_t)(v71 + 1);
        goto LABEL_96;
      }
      v27 = (unint64_t)(v70 + 1);
LABEL_96:
      v48 = v27;
      a2 = v480;
    }
    v84 = v27 - v474;
    v93 = *(_OWORD **)(a2 + 24);
    if (v27 > (unint64_t)v449)
    {
      sub_1D4B56E1C(v93, (char *)v474, v27, v449);
      v26 = v441;
      v12 = v445;
      a2 = v480;
      v16 = v433;
      v15 = v437;
      v35 = v462;
      v86 = v453;
      goto LABEL_99;
    }
    *v93 = *(_OWORD *)v474;
    v95 = *(_QWORD *)(a2 + 24);
    v16 = v433;
    v15 = v437;
    v35 = v462;
    if ((unint64_t)v84 <= 0x10)
    {
      *(_QWORD *)(a2 + 24) = v95 + v84;
      v55 = *(_QWORD *)(a2 + 8);
      v86 = v453;
    }
    else
    {
      *(_OWORD *)(v95 + 16) = *(_OWORD *)(v474 + 16);
      v86 = v453;
      if (v84 >= 33)
      {
        v96 = v95 + v84;
        v97 = (_OWORD *)(v95 + 32);
        v98 = (__int128 *)(v474 + 48);
        do
        {
          *v97 = *(v98 - 1);
          v99 = *v98;
          v98 += 2;
          v97[1] = v99;
          v97 += 2;
        }
        while ((unint64_t)v97 < v96);
      }
LABEL_99:
      *(_QWORD *)(a2 + 24) += v84;
      v55 = *(_QWORD *)(a2 + 8);
      if ((unint64_t)v84 >= 0x10000)
      {
        v94 = (unint64_t)(v55 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v94;
      }
    }
    v73 = v39 - v26 - v45;
LABEL_109:
    *(_WORD *)(v55 + 4) = v84;
    *(_DWORD *)v55 = v73 + 3;
    v72 = v68 - 3;
    v13 = v86;
    if (!((v68 - 3) >> 16))
      goto LABEL_111;
LABEL_110:
    v100 = (unint64_t)(v55 - *(_QWORD *)a2) >> 3;
    *(_DWORD *)(a2 + 72) = 2;
    *(_DWORD *)(a2 + 76) = v100;
LABEL_111:
    *(_WORD *)(v55 + 6) = v72;
    *(_QWORD *)(a2 + 8) = v55 + 8;
    v27 = v48 + v68;
    if (v48 + v68 <= v12)
    {
      *(_DWORD *)(v7 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(v10 + 2 + v39)) >> v35)) = v39 + 2;
      *(_DWORD *)(v7 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(v27 - 2)) >> v35)) = v27 - 2 - v10;
      a3 = v454;
      while (1)
      {
        v102 = v73;
        v73 = v13;
        v103 = (v27 - v10 - v13);
        v104 = v429;
        if (v103 >= v11)
          v104 = v10;
        if ((v475 - v103) < 3)
          break;
        v105 = v104 + v103;
        if (*(_DWORD *)v105 != *(_DWORD *)v27)
          break;
        if (v103 >= v11)
          v106 = (char *)v479;
        else
          v106 = v458;
        v107 = sub_1D4B5F19C((_QWORD *)(v27 + 4), (char *)(v105 + 4), v479, v106, v466);
        a2 = v480;
        v108 = v107;
        v109 = *(_OWORD **)(v480 + 24);
        if (v27 <= (unint64_t)v449)
        {
          *v109 = *(_OWORD *)v27;
        }
        else
        {
          sub_1D4B56E1C(v109, (char *)v27, v27, v449);
          a2 = v480;
        }
        v12 = v445;
        v110 = *(_QWORD *)(a2 + 8);
        *(_WORD *)(v110 + 4) = 0;
        *(_DWORD *)v110 = 1;
        v16 = v433;
        v15 = v437;
        v26 = v441;
        if (v108 + 1 >= 0x10000)
        {
          v111 = (unint64_t)(v110 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v111;
        }
        *(_WORD *)(v110 + 6) = v108 + 1;
        *(_QWORD *)(a2 + 8) = v110 + 8;
        *(_DWORD *)(v7 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)v27) >> v462)) = v27 - v10;
        v27 += v108 + 4;
        v13 = v102;
        v101 = v73;
        if (v27 > v445)
          goto LABEL_129;
      }
      v101 = v102;
      v102 = v13;
    }
    else
    {
      v101 = v73;
      v102 = v13;
      a3 = v454;
    }
LABEL_129:
    v453 = v101;
    v29 = v425;
    v25 = (uint64_t *)(v27 + v425);
    a4 = v27;
    v13 = v102;
  }
  while (v27 + v425 <= v12);
LABEL_512:
  *a3 = v453;
  a3[1] = v102;
  return v479 - v27;
}

unint64_t sub_1D4B66378(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  int v5;

  if ((*(_DWORD *)(a1 + 272) - 5) >= 3)
    v5 = 4;
  else
    v5 = *(_DWORD *)(a1 + 272);
  return sub_1D4B66390(a1, a2, a3, a4, a5, v5);
}

unint64_t sub_1D4B66390(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5, int a6)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int *v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  _BOOL8 v69;
  uint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  _OWORD *v86;
  __int128 *v87;
  __int128 v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unsigned int v92;
  unsigned __int8 *v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  _OWORD *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unsigned int v109;
  unint64_t v110;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  BOOL v115;
  uint64_t v116;
  unsigned __int8 *v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  unint64_t v123;
  int v124;
  unsigned __int8 *v125;
  char *v127;
  char v128;
  char v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  int v134;
  char *v135;

  v6 = a4;
  if (*(_DWORD *)(a1 + 276))
    v7 = *(_DWORD *)(a1 + 276);
  else
    v7 = 1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = a4 - v8;
  v10 = a4 - v8 + a5;
  v11 = 1 << *(_DWORD *)(a1 + 256);
  v13 = *(_DWORD *)(a1 + 24);
  v12 = *(_DWORD *)(a1 + 28);
  v14 = v10 - v12 > v11;
  v15 = v10 - v11;
  if (v14 && *(_DWORD *)(a1 + 40) == 0)
    v17 = v15;
  else
    v17 = v12;
  if (v13 <= v17)
    v18 = v17;
  else
    v18 = v13;
  if (v17 >= v13)
    return sub_1D4B601F8(a1, a2, a3, v6, a5);
  v19 = (v7 + 1);
  v20 = v6 + a5;
  v21 = v6 + a5 - 8;
  v23 = *a3;
  v22 = a3[1];
  v24 = v9 - v17;
  if (v22 >= v24)
    v25 = 0;
  else
    v25 = v22;
  if (v22 >= v24)
    v26 = a3[1];
  else
    v26 = 0;
  if (v23 >= v24)
    v27 = 0;
  else
    v27 = v23;
  if (v23 < v24)
    v23 = 0;
  v28 = (int *)(v6 + v19);
  _X9 = (int *)(v6 + v19 + 1);
  v120 = v23;
  v121 = v26;
  if ((unint64_t)_X9 < v21)
  {
    v30 = *(_QWORD *)(a1 + 16);
    v117 = (unsigned __int8 *)(v30 + v17);
    v125 = (unsigned __int8 *)(v8 + v18);
    v131 = (char *)(v30 + v18);
    v116 = v8 + 2;
    v31 = *(_QWORD *)(a1 + 112);
    v32 = *(_DWORD *)(a1 + 264);
    v33 = 64 - v32;
    v128 = 32 - v32;
    v135 = (char *)(v20 - 32);
    v34 = a6 - 5;
    v127 = (char *)v20;
    v119 = v17;
    v134 = v18;
    v118 = v19;
    v133 = v21;
    v132 = v30;
    v129 = 64 - v32;
    v130 = v31;
    while (1)
    {
      switch(v34)
      {
        case 0:
          v35 = *(_QWORD *)v6;
          v36 = -1157627904;
          goto LABEL_33;
        case 1:
          v37 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)v6) >> v33;
          v39 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v6 + 1);
          goto LABEL_34;
        case 2:
          v37 = (0xCF1BBCDCBFA56300 * *(_QWORD *)v6) >> v33;
          v39 = 0xCF1BBCDCBFA56300 * *(_QWORD *)(v6 + 1);
          goto LABEL_34;
        case 3:
          v35 = *(_QWORD *)v6;
          v36 = -1213897629;
LABEL_33:
          v40 = v36 | 0xCF1BBCDC00000000;
          v37 = (v35 * v40) >> v33;
          v39 = *(_QWORD *)(v6 + 1) * v40;
LABEL_34:
          v38 = v39 >> v33;
          break;
        default:
          v37 = (-1640531535 * *(_DWORD *)v6) >> v128;
          v38 = (-1640531535 * *(_DWORD *)(v6 + 1)) >> v128;
          break;
      }
      v41 = (int *)(v6 + 1);
      v42 = v6 + 128;
      LODWORD(v43) = *(_DWORD *)(v31 + 4 * v37);
      v44 = v43 >= v18 ? v8 : v30;
      v45 = (int *)v6;
      while (1)
      {
        v46 = (_DWORD)v28 - v8 - v27;
        if (v18 <= v46)
          v47 = v8;
        else
          v47 = v30;
        if ((_DWORD)v27 && v18 - v46 >= 4)
          v48 = *(_DWORD *)(v47 + v46);
        else
          v48 = *v28 ^ 1;
        v49 = (_DWORD)v45 - v8;
        *(_DWORD *)(v31 + 4 * v37) = (_DWORD)v45 - v8;
        if (*v28 == v48)
        {
          v66 = v47 + v46;
          v67 = (unint64_t)v127;
          if (v18 <= v46)
            v68 = v127;
          else
            v68 = v131;
          v69 = *((unsigned __int8 *)v28 - 1) == *(unsigned __int8 *)(v66 - 1);
          if (*((unsigned __int8 *)v28 - 1) == *(unsigned __int8 *)(v66 - 1))
            v70 = 5;
          else
            v70 = 4;
          v45 = (int *)((char *)v28 - v69);
          v71 = (unsigned __int8 *)(v66 - v69);
          v124 = 1;
          v72 = v27;
          v27 = v25;
          goto LABEL_103;
        }
        if (v43 >= v17)
        {
          v51 = *(_DWORD *)(v44 + v43);
          v50 = *v45;
        }
        else
        {
          v50 = *v45;
          v51 = *v45 ^ 1;
        }
        if (v50 == v51)
          break;
        v43 = *(unsigned int *)(v31 + 4 * v38);
        if (v43 >= v18)
          v44 = v8;
        else
          v44 = v30;
        switch(v34)
        {
          case 0:
            v52 = *(_QWORD *)v28;
            v53 = -1157627904;
            goto LABEL_60;
          case 1:
            v54 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)v28;
            goto LABEL_61;
          case 2:
            v54 = 0xCF1BBCDCBFA56300 * *(_QWORD *)v28;
            goto LABEL_61;
          case 3:
            v52 = *(_QWORD *)v28;
            v53 = -1213897629;
LABEL_60:
            v54 = v52 * (v53 | 0xCF1BBCDC00000000);
LABEL_61:
            v37 = v54 >> v33;
            break;
          default:
            v37 = (-1640531535 * *v28) >> v128;
            break;
        }
        v49 = (_DWORD)v41 - v8;
        *(_DWORD *)(v31 + 4 * v38) = (_DWORD)v41 - v8;
        if (v43 >= v17)
        {
          v56 = *(_DWORD *)(v44 + v43);
          v55 = *v41;
        }
        else
        {
          v55 = *v41;
          v56 = *v41 ^ 1;
        }
        if (v55 == v56)
        {
          v45 = v41;
          v41 = v28;
          v38 = v37;
          break;
        }
        LODWORD(v43) = *(_DWORD *)(v31 + 4 * v37);
        if (v43 >= v18)
          v44 = v8;
        else
          v44 = v30;
        switch(v34)
        {
          case 0:
            v57 = *(_QWORD *)_X9;
            v58 = -1157627904;
            goto LABEL_75;
          case 1:
            v59 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)_X9;
            goto LABEL_76;
          case 2:
            v59 = 0xCF1BBCDCBFA56300 * *(_QWORD *)_X9;
            goto LABEL_76;
          case 3:
            v57 = *(_QWORD *)_X9;
            v58 = -1213897629;
LABEL_75:
            v59 = v57 * (v58 | 0xCF1BBCDC00000000);
LABEL_76:
            v38 = v59 >> v33;
            break;
          default:
            v38 = (-1640531535 * *_X9) >> v128;
            break;
        }
        if ((unint64_t)v28 + v19 >= v42)
        {
          v60 = v19 + 1;
          __asm
          {
            PRFM            #0, [X9,#0x40]
            PRFM            #0, [X9,#0x80]
          }
          v42 += 128;
        }
        else
        {
          v60 = v19;
        }
        v41 = _X9;
        v45 = v28;
        v28 = (int *)((char *)v28 + v19);
        _X9 = (int *)((char *)_X9 + v19);
        v19 = v60;
        if ((unint64_t)_X9 >= v21)
        {
          LODWORD(v112) = v27;
          v20 = (unint64_t)v127;
          goto LABEL_156;
        }
      }
      v72 = v49 - v43;
      v73 = v125;
      if (v43 >= v18)
      {
        v68 = v127;
      }
      else
      {
        v73 = v117;
        v68 = v131;
      }
      v71 = (unsigned __int8 *)(v44 + v43);
      v124 = v72 + 3;
      if ((unint64_t)v45 <= v6 || v71 <= v73)
      {
        v70 = 4;
      }
      else
      {
        v74 = (unsigned __int8 *)(v44 + v43 - 1);
        v75 = (unsigned __int8 *)v45 - 1;
        v70 = 4;
        while (*v75 == *v74)
        {
          ++v70;
          v76 = v74 - 1;
          v77 = v75 - 1;
          if ((unint64_t)v75 > v6)
          {
            --v75;
            v14 = v74-- > v73;
            if (v14)
              continue;
          }
          v71 = v76 + 1;
          v45 = (int *)(v77 + 1);
          goto LABEL_102;
        }
        v71 = v74 + 1;
        v45 = (int *)(v75 + 1);
      }
LABEL_102:
      v67 = (unint64_t)v127;
LABEL_103:
      v78 = sub_1D4B5F19C((int *)((char *)v45 + v70), (char *)&v71[v70], v67, v68, v125);
      v79 = (uint64_t)v45 - v6;
      v80 = *(_OWORD **)(a2 + 24);
      if (v45 > (int *)v135)
        break;
      *v80 = *(_OWORD *)v6;
      v84 = *(_QWORD *)(a2 + 24);
      if ((unint64_t)v79 > 0x10)
      {
        v123 = v78;
        *(_OWORD *)(v84 + 16) = *(_OWORD *)(v6 + 16);
        v21 = v133;
        LODWORD(v18) = v134;
        v30 = v132;
        v33 = v129;
        v31 = v130;
        if (v79 >= 33)
        {
          v85 = v84 + v79;
          v86 = (_OWORD *)(v84 + 32);
          v87 = (__int128 *)(v6 + 48);
          do
          {
            *v86 = *(v87 - 1);
            v88 = *v87;
            v87 += 2;
            v86[1] = v88;
            v86 += 2;
          }
          while ((unint64_t)v86 < v85);
        }
        goto LABEL_105;
      }
      *(_QWORD *)(a2 + 24) = v84 + v79;
      v81 = *(_QWORD *)(a2 + 8);
      v21 = v133;
      LODWORD(v18) = v134;
      v30 = v132;
      v33 = v129;
      v31 = v130;
      v83 = v124;
LABEL_114:
      v89 = v78 + v70;
      *(_WORD *)(v81 + 4) = v79;
      *(_DWORD *)v81 = v83;
      v90 = v78 + v70 - 3;
      if (v90 >= 0x10000)
      {
        v91 = (unint64_t)(v81 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v91;
      }
      *(_WORD *)(v81 + 6) = v90;
      *(_QWORD *)(a2 + 8) = v81 + 8;
      v6 = (unint64_t)v45 + v89;
      if (v41 < (int *)((char *)v45 + v89))
        *(_DWORD *)(v31 + 4 * v38) = (_DWORD)v41 - v8;
      if (v6 <= v21)
      {
        v92 = v49 + 2;
        v20 = (unint64_t)v127;
        v93 = v125;
        switch(v34)
        {
          case 0:
            v94 = *(_QWORD *)(v116 + v49);
            v95 = -1157627904;
            goto LABEL_126;
          case 1:
            v94 = *(_QWORD *)(v116 + v49);
            v95 = -1080360960;
            goto LABEL_126;
          case 2:
            v94 = *(_QWORD *)(v116 + v49);
            v95 = -1079680256;
            goto LABEL_126;
          case 3:
            v94 = *(_QWORD *)(v116 + v49);
            v95 = -1213897629;
LABEL_126:
            v98 = v95 | 0xCF1BBCDC00000000;
            *(_DWORD *)(v31 + 4 * ((v94 * v98) >> v33)) = v92;
            v96 = v6 - 2;
            v97 = (*(_QWORD *)(v6 - 2) * v98) >> v33;
            break;
          default:
            *(_DWORD *)(v31 + 4 * ((-1640531535 * *(_DWORD *)(v116 + v49)) >> v128)) = v92;
            v96 = v6 - 2;
            v97 = (-1640531535 * *(_DWORD *)(v6 - 2)) >> v128;
            v20 = (unint64_t)v127;
            v93 = v125;
            break;
        }
        *(_DWORD *)(v31 + 4 * v97) = v96 - v8;
        while (1)
        {
          v99 = v72;
          v72 = v27;
          v100 = (v6 - v8 - v27);
          v101 = v100 >= v18 ? v8 : v30;
          if (!(_DWORD)v27)
            break;
          if ((v18 + ~(_DWORD)v100) < 3)
            break;
          v102 = v101 + v100;
          if (*(_DWORD *)v102 != *(_DWORD *)v6)
            break;
          v27 = v99;
          if (v100 >= v18)
            v103 = (char *)v20;
          else
            v103 = v131;
          v104 = sub_1D4B5F19C((_QWORD *)(v6 + 4), (char *)(v102 + 4), v20, v103, v93);
          v105 = *(_OWORD **)(a2 + 24);
          if (v6 <= (unint64_t)v135)
            *v105 = *(_OWORD *)v6;
          else
            sub_1D4B56E1C(v105, (char *)v6, v6, v135);
          v106 = *(_QWORD *)(a2 + 8);
          *(_WORD *)(v106 + 4) = 0;
          *(_DWORD *)v106 = 1;
          v21 = v133;
          LODWORD(v18) = v134;
          v30 = v132;
          v33 = v129;
          v31 = v130;
          v25 = v27;
          if (v104 + 1 >= 0x10000)
          {
            v107 = (unint64_t)(v106 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v107;
          }
          *(_WORD *)(v106 + 6) = v104 + 1;
          *(_QWORD *)(a2 + 8) = v106 + 8;
          switch(v34)
          {
            case 0:
              v108 = *(_QWORD *)v6;
              v109 = -1157627904;
              goto LABEL_148;
            case 1:
              v108 = *(_QWORD *)v6;
              v109 = -1080360960;
              goto LABEL_148;
            case 2:
              v108 = *(_QWORD *)v6;
              v109 = -1079680256;
              goto LABEL_148;
            case 3:
              v108 = *(_QWORD *)v6;
              v109 = -1213897629;
LABEL_148:
              v110 = (v108 * (v109 | 0xCF1BBCDC00000000)) >> v129;
              break;
            default:
              v110 = (-1640531535 * *(_DWORD *)v6) >> v128;
              break;
          }
          *(_DWORD *)(v130 + 4 * v110) = v6 - v8;
          v6 += v104 + 4;
          v112 = v72;
          if (v6 > v133)
            goto LABEL_152;
        }
        v112 = v99;
        v25 = v27;
      }
      else
      {
        v112 = v72;
        v25 = v27;
        v20 = (unint64_t)v127;
      }
LABEL_152:
      v19 = v118;
      LODWORD(v17) = v119;
      v28 = (int *)(v6 + v118);
      _X9 = (int *)(v6 + v118 + 1);
      v27 = v112;
      if ((unint64_t)_X9 >= v21)
        goto LABEL_156;
    }
    v123 = v78;
    sub_1D4B56E1C(v80, (char *)v6, (unint64_t)v45, v135);
    v79 = (uint64_t)v45 - v6;
    v21 = v133;
    LODWORD(v18) = v134;
    v30 = v132;
    v33 = v129;
    v31 = v130;
LABEL_105:
    *(_QWORD *)(a2 + 24) += v79;
    v81 = *(_QWORD *)(a2 + 8);
    if ((unint64_t)v79 >= 0x10000)
    {
      v82 = (unint64_t)(v81 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v82;
    }
    v83 = v124;
    v78 = v123;
    goto LABEL_114;
  }
  LODWORD(v112) = v27;
LABEL_156:
  v113 = v121;
  if ((_DWORD)v112)
    v114 = v112;
  else
    v114 = v120;
  if ((_DWORD)v112)
    v115 = v120 == 0;
  else
    v115 = 1;
  if (!v115)
    v113 = v120;
  if ((_DWORD)v25)
    v113 = v25;
  *a3 = v114;
  a3[1] = v113;
  return v20 - v6;
}

uint64_t sub_1D4B66CF0(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int *v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  char v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = *(_QWORD *)(result + 8);
  v3 = a2 - v2;
  v4 = 1 << *(_DWORD *)(result + 260);
  v5 = *(unsigned int *)(result + 44);
  if (v4 >= a2 - (int)v2 - (int)v5)
    v6 = *(_DWORD *)(result + 44);
  else
    v6 = a2 - v2 - v4;
  if (((1 << *(_DWORD *)(result + 268)) - 3) >= 0xFF)
    v7 = 255;
  else
    v7 = (1 << *(_DWORD *)(result + 268)) - 3;
  v8 = *(_DWORD *)(result + 264);
  v9 = v8 - 2;
  v10 = 3 << (v8 - 2);
  v26 = v3 >= v10;
  v11 = v3 - v10;
  if (v11 != 0 && v26)
    v12 = v11;
  else
    v12 = v5;
  v13 = *(_QWORD *)(result + 112);
  v14 = *(_QWORD *)(result + 128);
  v15 = v13 + 4 * (1 << v9);
  if (v3 > v5)
  {
    do
    {
      switch(*(_DWORD *)(result + 272))
      {
        case 5:
          v16 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v2 + v5);
          goto LABEL_17;
        case 6:
          v16 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v2 + v5);
          goto LABEL_17;
        case 7:
          v16 = 0xCF1BBCDCBFA56300 * *(_QWORD *)(v2 + v5);
          goto LABEL_17;
        case 8:
          v16 = 0xCF1BBCDCB7A56463 * *(_QWORD *)(v2 + v5);
LABEL_17:
          v17 = v16 >> (66 - v8);
          break;
        default:
          LODWORD(v17) = (-1640531535 * *(_DWORD *)(v2 + v5)) >> (34 - v8);
          break;
      }
      if (v5 >= v12)
        *(_DWORD *)(v15 + 4 * (v5 - v12)) = *(_DWORD *)(v13 + 4 * v17);
      *(_DWORD *)(v13 + 4 * v17) = v5++;
    }
    while (v5 < v3);
  }
  v18 = 0;
  v19 = 0;
  v20 = (1 << v9);
  do
  {
    v21 = *(_DWORD *)(v13 + 4 * v18);
    if (v21 < v12)
      goto LABEL_23;
    v23 = 0;
    v24 = 0;
    do
    {
      if (v21 < v6)
        ++v23;
      v25 = v24 + 1;
      v21 = *(_DWORD *)(v15 + 4 * (v21 - v12));
      v26 = v21 < v12 || v24++ >= 2;
    }
    while (!v26);
    if (v25 == 3 && v7)
    {
      v27 = 0;
      while (1)
      {
        if (v21 < v6)
        {
          if (!v21)
            break;
          if (++v23 > 3)
            break;
        }
        *(_DWORD *)(v14 + 4 * (v19 + v27++)) = v21;
        v26 = v21 >= v12;
        v28 = v21 - v12;
        if (!v26)
        {
          v22 = v27 + (v19 << 8);
          v19 += v27;
          goto LABEL_24;
        }
        v21 = *(_DWORD *)(v15 + 4 * v28);
        if (v7 == v27)
        {
          v19 += v27;
          v27 = v7;
          goto LABEL_45;
        }
      }
      v19 += v27;
      if (!v27)
        goto LABEL_23;
LABEL_45:
      v22 = v27 + ((v19 - v27) << 8);
    }
    else
    {
LABEL_23:
      v22 = 0;
    }
LABEL_24:
    *(_DWORD *)(v13 + 4 * v18++) = v22;
  }
  while (v18 != v20);
  v29 = (4 << v9) - 4;
  v30 = (int *)(v13 + 4 * (v20 - 1));
  v31 = 4 * v20 - 1;
  do
  {
    v32 = v13 + 4 * v29;
    v33 = *v30--;
    *(_DWORD *)(v32 + 8) = 0;
    *(_QWORD *)v32 = 0;
    *(_DWORD *)(v13 + 4 * v31) = v33;
    v29 -= 4;
    v31 -= 4;
    LODWORD(v20) = v20 - 1;
  }
  while ((_DWORD)v20);
  v34 = *(unsigned int *)(result + 44);
  if (v34 < v3)
  {
    v35 = 66 - v8;
    v36 = 34 - v8;
    do
    {
      switch(*(_DWORD *)(result + 272))
      {
        case 5:
          v37 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v2 + v34);
          goto LABEL_55;
        case 6:
          v37 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v2 + v34);
          goto LABEL_55;
        case 7:
          v37 = 0xCF1BBCDCBFA56300 * *(_QWORD *)(v2 + v34);
          goto LABEL_55;
        case 8:
          v37 = 0xCF1BBCDCB7A56463 * *(_QWORD *)(v2 + v34);
LABEL_55:
          v38 = v37 >> v35;
          break;
        default:
          LODWORD(v38) = (-1640531535 * *(_DWORD *)(v2 + v34)) >> v36;
          break;
      }
      v39 = 0;
      v40 = (4 * v38);
      v41 = v13 + 16 * (v38 & 0x3FFFFFFF);
      do
      {
        *(_DWORD *)(v41 + v39 + 8) = *(_DWORD *)(v41 + v39 + 4);
        v39 -= 4;
      }
      while (v39 != -8);
      *(_DWORD *)(v13 + 4 * v40) = v34++;
    }
    while (v34 < v3);
  }
  *(_DWORD *)(result + 44) = v3;
  return result;
}

uint64_t sub_1D4B67044(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;

  v2 = *(_DWORD *)(a1 + 272);
  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(_DWORD *)(a1 + 264);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 44);
  if (v6 < (int)a2 - (int)v5)
  {
    v7 = ~(-1 << *(_DWORD *)(a1 + 260));
    v8 = *(_QWORD *)(a1 + 128);
    do
    {
      switch(v2)
      {
        case 5:
          v9 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v5 + v6);
          goto LABEL_8;
        case 6:
          v9 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v5 + v6);
          goto LABEL_8;
        case 7:
          v9 = 0xCF1BBCDCBFA56300 * *(_QWORD *)(v5 + v6);
          goto LABEL_8;
        case 8:
          v9 = 0xCF1BBCDCB7A56463 * *(_QWORD *)(v5 + v6);
LABEL_8:
          v10 = v9 >> (64 - v4);
          break;
        default:
          v10 = (-1640531535 * *(_DWORD *)(v5 + v6)) >> (32 - v4);
          break;
      }
      *(_DWORD *)(v8 + 4 * (v6 & v7)) = *(_DWORD *)(v3 + 4 * v10);
      *(_DWORD *)(v3 + 4 * v10) = v6++;
    }
    while (v6 < ((_DWORD)a2 - v5));
  }
  *(_DWORD *)(a1 + 44) = (_DWORD)a2 - v5;
  switch(v2)
  {
    case 5:
      v11 = *a2;
      v12 = -1157627904;
      goto LABEL_18;
    case 6:
      v11 = *a2;
      v12 = -1080360960;
      goto LABEL_18;
    case 7:
      v11 = *a2;
      v12 = -1079680256;
      goto LABEL_18;
    case 8:
      v11 = *a2;
      v12 = -1213897629;
LABEL_18:
      v13 = (v11 * (v12 | 0xCF1BBCDC00000000)) >> -(char)v4;
      break;
    default:
      v13 = (-1640531535 * *(_DWORD *)a2) >> -(char)v4;
      break;
  }
  return *(unsigned int *)(v3 + 4 * v13);
}

uint64_t sub_1D4B671FC(uint64_t result, int a2)
{
  unsigned int v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_DWORD *)(result + 268);
  if (v2 >= 6)
    v2 = 6;
  if (v2 <= 4)
    LOBYTE(v2) = 4;
  if (*(_DWORD *)(result + 272) >= 6u)
    v3 = 6;
  else
    v3 = *(_DWORD *)(result + 272);
  v4 = *(unsigned int *)(result + 44);
  v5 = *(_QWORD *)(result + 8);
  if (v4 < a2 - (int)v5)
  {
    v6 = ~(-1 << v2);
    v7 = *(_QWORD *)(result + 112);
    v8 = *(_DWORD *)(result + 52);
    v9 = 56 - v8;
    v10 = *(_QWORD *)(result + 56);
    v11 = 24 - v8;
    do
    {
      v12 = *(_QWORD *)(result + 96);
      if (v3 == 5)
      {
        v13 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v5 + v4);
      }
      else
      {
        if (v3 != 6)
        {
          LODWORD(v12) = ((-1640531535 * *(_DWORD *)(v5 + v4)) ^ v12) >> v11;
          goto LABEL_16;
        }
        v13 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v5 + v4);
      }
      v12 = (v13 ^ v12) >> v9;
LABEL_16:
      v14 = (unint64_t)(v12 >> 8) << v2;
      v15 = v7 + 4 * v14;
      v16 = (_BYTE *)(v10 + v14);
      if (((*v16 + 127) & v6) != 0)
        v17 = 0;
      else
        v17 = v6;
      v18 = v17 + ((*v16 + 127) & v6);
      *v16 = v18;
      v16[v18] = v12;
      *(_DWORD *)(v15 + 4 * v18) = v4++;
    }
    while (v4 < (a2 - v5));
  }
  *(_DWORD *)(result + 44) = a2 - v5;
  return result;
}

unint64_t sub_1D4B67318(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  int v15;
  unsigned int v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  char *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t *v64;
  int v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _OWORD *v77;
  __int128 *v78;
  __int128 v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  _QWORD *v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  _DWORD *v88;
  _OWORD *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  BOOL v99;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int *v104;
  unint64_t v105;
  unsigned int v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  char *v110;
  int v111;
  unint64_t v112;
  unint64_t v114;
  uint64_t v115;

  v5 = (unint64_t)a4;
  v6 = (unint64_t)a4 + a5;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 24);
  v9 = v7 + v8;
  v10 = *(_DWORD *)(a1 + 272);
  if (v10 >= 6)
    v10 = 6;
  if (v10 <= 4)
    v11 = 4;
  else
    v11 = v10;
  v13 = *a3;
  v12 = a3[1];
  if ((_DWORD)a4 == (_DWORD)v9)
    v14 = (uint64_t *)((char *)a4 + 1);
  else
    v14 = a4;
  v15 = (_DWORD)v14 - v7;
  v16 = 1 << *(_DWORD *)(a1 + 256);
  if (v15 - (int)v8 > v16 && *(_DWORD *)(a1 + 40) == 0)
    LODWORD(v8) = v15 - v16;
  v18 = v15 - v8;
  if (v12 <= v18)
    LODWORD(v19) = a3[1];
  else
    LODWORD(v19) = 0;
  if (v13 <= v18)
    v20 = v13;
  else
    v20 = 0;
  *(_DWORD *)(a1 + 300) = 0;
  v114 = (unint64_t)a4 + a5 - 8;
  if ((unint64_t)v14 < v114)
  {
    v22 = a1;
    v101 = v18;
    v102 = v13;
    v104 = a3;
    v105 = v9;
    v103 = v12;
    v23 = v6 - 7;
    v107 = v6 - 1;
    v108 = v6 - 3;
    v110 = (char *)(v6 - 32);
    v112 = (unint64_t)a4 + a5;
    v111 = v11;
    while (1)
    {
      v24 = 0;
      if ((_DWORD)v20 && *(_DWORD *)((char *)v14 - v20 + 1) == *(_DWORD *)((char *)v14 + 1))
      {
        v25 = (char *)v14 + 5;
        v26 = (uint64_t *)((char *)v14 - v20 + 5);
        if (v23 <= (unint64_t)v14 + 5)
        {
          v29 = (_DWORD *)((char *)v14 + 5);
        }
        else
        {
          v27 = *(_QWORD *)v25 ^ *v26;
          if (v27)
          {
            v28 = __clz(__rbit64(v27)) >> 3;
            goto LABEL_38;
          }
          v67 = (char *)v14 + 13;
          while (1)
          {
            v68 = &v67[v27];
            if ((unint64_t)&v67[v27] >= v23)
              break;
            v69 = *(uint64_t *)((char *)v14 + v27 - v20 + 13);
            v27 += 8;
            v70 = *(_QWORD *)v68 ^ v69;
            if (v70)
            {
              v28 = v27 + (__clz(__rbit64(v70)) >> 3);
              goto LABEL_38;
            }
          }
          v29 = (_DWORD *)((char *)v14 + v27 + 13);
          v26 = (_QWORD *)((char *)v29 - v20);
        }
        if ((unint64_t)v29 < v108 && *(_DWORD *)v26 == *v29)
        {
          ++v29;
          v26 = (_QWORD *)((char *)v26 + 4);
        }
        if ((unint64_t)v29 < v107 && *(unsigned __int16 *)v26 == *(unsigned __int16 *)v29)
        {
          v29 = (_DWORD *)((char *)v29 + 2);
          v26 = (_QWORD *)((char *)v26 + 2);
        }
        if ((unint64_t)v29 < v6 && *(unsigned __int8 *)v26 == *(unsigned __int8 *)v29)
          v29 = (_DWORD *)((char *)v29 + 1);
        v28 = (char *)v29 - v25;
LABEL_38:
        v24 = v28 + 4;
      }
      v115 = 999999999;
      v106 = v19;
      if (v11 == 6)
      {
        v30 = sub_1D4B76570(v22, v14, v6, (unsigned int *)&v115);
      }
      else if (v11 == 5)
      {
        v30 = sub_1D4B764F8(v22, v14, v6, (unsigned int *)&v115);
      }
      else
      {
        v30 = sub_1D4B76480(v22, v14, v6, (unsigned int *)&v115);
      }
      if (v30 <= v24)
        v31 = v24;
      else
        v31 = v30;
      if (v31 < 4)
      {
        v32 = (unint64_t)v14 - v5;
        v14 = (uint64_t *)((char *)v14 + (((unint64_t)v14 - v5) >> 8) + 1);
        v22 = a1;
        *(_DWORD *)(a1 + 300) = v32 > 0x7FF;
        LODWORD(v19) = v106;
        goto LABEL_191;
      }
      if (v30 <= v24)
        v33 = (uint64_t *)((char *)v14 + 1);
      else
        v33 = v14;
      if (v30 <= v24)
        v34 = 1;
      else
        v34 = v115;
      v35 = v31;
      v36 = v34;
      v109 = v33;
      v37 = -(uint64_t)v20;
      if ((unint64_t)v14 < v114)
      {
        do
        {
          v33 = (uint64_t *)((char *)v14 + 1);
          if (!v34 || !(_DWORD)v20)
          {
            v38 = v112;
            v39 = v111;
            goto LABEL_63;
          }
          v38 = v112;
          v39 = v111;
          if (*(_DWORD *)v33 != *(_DWORD *)((char *)v33 + v37))
            goto LABEL_63;
          v40 = (char *)v14 + 5;
          v41 = (uint64_t *)((char *)v14 + v37 + 5);
          if (v23 <= (unint64_t)v14 + 5)
          {
            v51 = (unsigned __int16 *)((char *)v14 + 5);
          }
          else
          {
            v42 = *(_QWORD *)v40 ^ *v41;
            if (v42)
            {
              v43 = __clz(__rbit64(v42)) >> 3;
LABEL_105:
              v56 = v43 + 4;
              if (3 * (int)v56 > (int)(3 * v31 + __clz(v34) - 30))
              {
                v31 = v56;
                v34 = 1;
                v109 = (uint64_t *)((char *)v14 + 1);
              }
              goto LABEL_63;
            }
            v51 = (unsigned __int16 *)((char *)v14 + 13);
            while ((unint64_t)v51 < v23)
            {
              v53 = *(_QWORD *)((char *)v51 + v37);
              v54 = *(_QWORD *)v51;
              v51 += 4;
              v55 = v54 ^ v53;
              if (v55)
              {
                v51 = (unsigned __int16 *)((char *)v51 + (__clz(__rbit64(v55)) >> 3) - 8);
                goto LABEL_104;
              }
            }
            v41 = (_QWORD *)((char *)v51 + v37);
          }
          if ((unint64_t)v51 < v108 && *(_DWORD *)v41 == *(_DWORD *)v51)
          {
            v51 += 2;
            v41 = (_QWORD *)((char *)v41 + 4);
          }
          if ((unint64_t)v51 < v107 && *(unsigned __int16 *)v41 == *v51)
          {
            ++v51;
            v41 = (_QWORD *)((char *)v41 + 2);
          }
          if ((unint64_t)v51 < v112 && *(unsigned __int8 *)v41 == *(unsigned __int8 *)v51)
            v51 = (unsigned __int16 *)((char *)v51 + 1);
LABEL_104:
          v43 = (char *)v51 - v40;
          if (v43 <= 0xFFFFFFFFFFFFFFFBLL)
            goto LABEL_105;
LABEL_63:
          v115 = 999999999;
          if (v39 == 6)
          {
            v44 = sub_1D4B76570(a1, (uint64_t *)((char *)v14 + 1), v38, (unsigned int *)&v115);
          }
          else if (v39 == 5)
          {
            v44 = sub_1D4B764F8(a1, (uint64_t *)((char *)v14 + 1), v38, (unsigned int *)&v115);
          }
          else
          {
            v44 = sub_1D4B76480(a1, (uint64_t *)((char *)v14 + 1), v38, (unsigned int *)&v115);
          }
          v35 = v44;
          if (v44 >= 4)
          {
            v36 = v115;
            if ((int)(__clz(v115) + 4 * v44 - 31) > (int)(__clz(v34) + 4 * v31 - 27))
              goto LABEL_121;
          }
          if ((unint64_t)v33 >= v114)
            goto LABEL_125;
          v33 = (uint64_t *)((char *)v14 + 2);
          if (!v34)
          {
            v45 = v112;
            v46 = v111;
            goto LABEL_114;
          }
          v45 = v112;
          v46 = v111;
          if (!(_DWORD)v20 || *(_DWORD *)v33 != *(_DWORD *)((char *)v33 - v20))
            goto LABEL_114;
          v47 = (char *)v14 + 6;
          v48 = (uint64_t *)((char *)v14 - v20 + 6);
          if (v23 <= (unint64_t)v14 + 6)
          {
            v52 = (unsigned __int16 *)v14 + 3;
          }
          else
          {
            v49 = *(_QWORD *)v47 ^ *v48;
            if (v49)
            {
              v50 = __clz(__rbit64(v49)) >> 3;
LABEL_112:
              v60 = v50 + 4;
              if ((int)(__clz(v34) + 4 * v31 - 30) < 4 * (int)v60)
              {
                v31 = v60;
                v34 = 1;
                v109 = (uint64_t *)((char *)v14 + 2);
              }
              goto LABEL_114;
            }
            v52 = (unsigned __int16 *)v14 + 7;
            while ((unint64_t)v52 < v23)
            {
              v57 = *(_QWORD *)((char *)v52 - v20);
              v58 = *(_QWORD *)v52;
              v52 += 4;
              v59 = v58 ^ v57;
              if (v59)
              {
                v52 = (unsigned __int16 *)((char *)v52 + (__clz(__rbit64(v59)) >> 3) - 8);
                goto LABEL_111;
              }
            }
            v48 = (_QWORD *)((char *)v52 - v20);
          }
          if ((unint64_t)v52 < v108 && *(_DWORD *)v48 == *(_DWORD *)v52)
          {
            v52 += 2;
            v48 = (_QWORD *)((char *)v48 + 4);
          }
          if ((unint64_t)v52 < v107 && *(unsigned __int16 *)v48 == *v52)
          {
            ++v52;
            v48 = (_QWORD *)((char *)v48 + 2);
          }
          if ((unint64_t)v52 < v112 && *(unsigned __int8 *)v48 == *(unsigned __int8 *)v52)
            v52 = (unsigned __int16 *)((char *)v52 + 1);
LABEL_111:
          v50 = (char *)v52 - v47;
          if (v50 <= 0xFFFFFFFFFFFFFFFBLL)
            goto LABEL_112;
LABEL_114:
          v115 = 999999999;
          if (v46 == 6)
          {
            v61 = sub_1D4B76570(a1, (uint64_t *)((char *)v14 + 2), v45, (unsigned int *)&v115);
          }
          else if (v46 == 5)
          {
            v61 = sub_1D4B764F8(a1, (uint64_t *)((char *)v14 + 2), v45, (unsigned int *)&v115);
          }
          else
          {
            v61 = sub_1D4B76480(a1, (uint64_t *)((char *)v14 + 2), v45, (unsigned int *)&v115);
          }
          v35 = v61;
          if (v61 < 4 || (v36 = v115, (int)(__clz(v115) + 4 * v61 - 31) <= (int)(__clz(v34) + 4 * v31 - 24)))
          {
LABEL_125:
            v35 = v31;
            v36 = v34;
            v33 = v109;
            break;
          }
LABEL_121:
          v37 = -(uint64_t)v20;
          v14 = v33;
          v109 = v33;
          v34 = v36;
          v31 = v35;
        }
        while ((unint64_t)v33 < v114);
      }
      if (v36 <= 3)
      {
        v22 = a1;
        v62 = v110;
      }
      else
      {
        v62 = v110;
        if ((unint64_t)v33 <= v5 || (unint64_t)v33 - v36 + 3 <= v105)
        {
          v64 = v33;
          v22 = a1;
        }
        else
        {
          v63 = 2 - v36;
          v64 = v33;
          v22 = a1;
          while (1)
          {
            v65 = *((unsigned __int8 *)v64 - 1);
            v64 = (uint64_t *)((char *)v64 - 1);
            if (v65 != *((unsigned __int8 *)v33 + v63))
              break;
            ++v35;
            if ((unint64_t)v64 > v5)
            {
              v66 = (char *)v33 + v63;
              v33 = v64;
              if ((unint64_t)v66 > v105)
                continue;
            }
            goto LABEL_141;
          }
          v64 = v33;
        }
LABEL_141:
        v106 = v20;
        v20 = (v36 - 3);
        v33 = v64;
      }
      v71 = (uint64_t)v33 - v5;
      v72 = *(_OWORD **)(a2 + 24);
      if (v33 > (uint64_t *)v62)
        break;
      *v72 = *(_OWORD *)v5;
      v75 = *(_QWORD *)(a2 + 24);
      if ((unint64_t)v71 > 0x10)
      {
        *(_OWORD *)(v75 + 16) = *(_OWORD *)(v5 + 16);
        if (v71 >= 33)
        {
          v76 = v75 + v71;
          v77 = (_OWORD *)(v75 + 32);
          v78 = (__int128 *)(v5 + 48);
          do
          {
            *v77 = *(v78 - 1);
            v79 = *v78;
            v78 += 2;
            v77[1] = v79;
            v77 += 2;
          }
          while ((unint64_t)v77 < v76);
        }
        goto LABEL_144;
      }
      *(_QWORD *)(a2 + 24) = v75 + v71;
      v73 = *(_QWORD *)(a2 + 8);
      v19 = v106;
LABEL_152:
      *(_WORD *)(v73 + 4) = v71;
      *(_DWORD *)v73 = v36;
      if (v35 - 3 >= 0x10000)
      {
        v80 = (unint64_t)(v73 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v80;
      }
      *(_WORD *)(v73 + 6) = v35 - 3;
      *(_QWORD *)(a2 + 8) = v73 + 8;
      if (*(_DWORD *)(v22 + 300))
        *(_DWORD *)(v22 + 300) = 0;
      v5 = (unint64_t)v33 + v35;
      if (!(_DWORD)v19 || v5 > v114)
      {
        v14 = (uint64_t *)((char *)v33 + v35);
        v6 = v112;
        v11 = v111;
        goto LABEL_191;
      }
      v81 = v20;
      v82 = v19;
      v6 = v112;
      v11 = v111;
      while (1)
      {
        v20 = v82;
        v82 = v81;
        if (*(_DWORD *)v5 != *(_DWORD *)(v5 - v20))
        {
          LODWORD(v19) = v20;
          v20 = v81;
          goto LABEL_190;
        }
        v83 = (char *)(v5 + 4);
        v84 = (_QWORD *)(v5 + 4 - v20);
        if (v23 <= v5 + 4)
        {
          v88 = (_DWORD *)(v5 + 4);
          v86 = v110;
        }
        else
        {
          v85 = *(_QWORD *)v83 ^ *v84;
          v86 = v110;
          if (v85)
          {
            v87 = __clz(__rbit64(v85)) >> 3;
            goto LABEL_174;
          }
          v92 = v5 + 12;
          while (1)
          {
            v93 = (_QWORD *)(v92 + v85);
            if (v92 + v85 >= v23)
              break;
            v94 = *(_QWORD *)(v5 + 12 - v20 + v85);
            v85 += 8;
            v95 = *v93 ^ v94;
            if (v95)
            {
              v87 = v85 + (__clz(__rbit64(v95)) >> 3);
              goto LABEL_174;
            }
          }
          v88 = (_DWORD *)(v5 + v85 + 12);
          v84 = (_QWORD *)((char *)v88 - v20);
        }
        if ((unint64_t)v88 < v108 && *(_DWORD *)v84 == *v88)
        {
          ++v88;
          v84 = (_QWORD *)((char *)v84 + 4);
        }
        if ((unint64_t)v88 < v107 && *(unsigned __int16 *)v84 == *(unsigned __int16 *)v88)
        {
          v88 = (_DWORD *)((char *)v88 + 2);
          v84 = (_QWORD *)((char *)v84 + 2);
        }
        if ((unint64_t)v88 < v112 && *(unsigned __int8 *)v84 == *(unsigned __int8 *)v88)
          v88 = (_DWORD *)((char *)v88 + 1);
        v87 = (char *)v88 - v83;
LABEL_174:
        v89 = *(_OWORD **)(a2 + 24);
        if (v5 <= (unint64_t)v86)
          *v89 = *(_OWORD *)v5;
        else
          sub_1D4B56E1C(v89, (char *)v5, v5, v86);
        v90 = *(_QWORD *)(a2 + 8);
        *(_WORD *)(v90 + 4) = 0;
        *(_DWORD *)v90 = 1;
        if (v87 + 1 >= 0x10000)
        {
          v91 = (unint64_t)(v90 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v91;
        }
        *(_WORD *)(v90 + 6) = v87 + 1;
        *(_QWORD *)(a2 + 8) = v90 + 8;
        v5 += v87 + 4;
        if (!(_DWORD)v82)
          break;
        v81 = v20;
        LODWORD(v19) = v82;
        v14 = (uint64_t *)v5;
        if (v5 > v114)
          goto LABEL_191;
      }
      LODWORD(v19) = 0;
LABEL_190:
      v14 = (uint64_t *)v5;
LABEL_191:
      if ((unint64_t)v14 >= v114)
      {
        a3 = v104;
        v13 = v102;
        v12 = v103;
        v18 = v101;
        goto LABEL_194;
      }
    }
    sub_1D4B56E1C(v72, (char *)v5, (unint64_t)v33, v62);
LABEL_144:
    *(_QWORD *)(a2 + 24) += v71;
    v73 = *(_QWORD *)(a2 + 8);
    v19 = v106;
    if ((unint64_t)v71 >= 0x10000)
    {
      v74 = (unint64_t)(v73 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v74;
    }
    goto LABEL_152;
  }
LABEL_194:
  if (v13 <= v18)
    v96 = 0;
  else
    v96 = v13;
  if (v12 <= v18)
    v97 = 0;
  else
    v97 = v12;
  if ((_DWORD)v20)
    v98 = v20;
  else
    v98 = v96;
  if ((_DWORD)v20)
    v99 = v96 == 0;
  else
    v99 = 1;
  if (v99)
    v96 = v97;
  if ((_DWORD)v19)
    v96 = v19;
  *a3 = v98;
  a3[1] = v96;
  return v6 - v5;
}

char *sub_1D4B67D28(uint64_t a1, uint64_t a2, unsigned int *a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  int v15;
  unsigned int v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unsigned __int16 *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int16 *v38;
  int v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int16 *v45;
  int v46;
  char *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  _DWORD *v64;
  int v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _OWORD *v77;
  __int128 *v78;
  __int128 v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  _QWORD *v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  unsigned __int16 *v88;
  _OWORD *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  BOOL v99;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int *v104;
  unint64_t v105;
  unsigned int v106;
  unsigned __int16 *v107;
  unsigned __int16 *v108;
  _DWORD *v109;
  char *v110;
  int v111;
  unsigned __int16 *v112;
  unint64_t v114;
  uint64_t v115;

  v5 = (unint64_t)a4;
  v6 = (unsigned __int16 *)((char *)a4 + a5);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 24);
  v9 = v7 + v8;
  v10 = *(_DWORD *)(a1 + 272);
  if (v10 >= 6)
    v10 = 6;
  if (v10 <= 4)
    v11 = 4;
  else
    v11 = v10;
  v13 = *a3;
  v12 = a3[1];
  if ((_DWORD)a4 == (_DWORD)v9)
    v14 = (_QWORD *)((char *)a4 + 1);
  else
    v14 = a4;
  v15 = (_DWORD)v14 - v7;
  v16 = 1 << *(_DWORD *)(a1 + 256);
  if (v15 - (int)v8 > v16 && *(_DWORD *)(a1 + 40) == 0)
    LODWORD(v8) = v15 - v16;
  v18 = v15 - v8;
  if (v12 <= v18)
    LODWORD(v19) = a3[1];
  else
    LODWORD(v19) = 0;
  if (v13 <= v18)
    v20 = v13;
  else
    v20 = 0;
  *(_DWORD *)(a1 + 300) = 0;
  v114 = (unint64_t)a4 + a5 - 8;
  if ((unint64_t)v14 < v114)
  {
    v22 = a1;
    v101 = v18;
    v102 = v13;
    v104 = a3;
    v105 = v9;
    v103 = v12;
    v23 = (unint64_t)v6 - 7;
    v107 = (unsigned __int16 *)((char *)v6 - 1);
    v108 = (unsigned __int16 *)((char *)v6 - 3);
    v110 = (char *)(v6 - 16);
    v112 = (unsigned __int16 *)((char *)a4 + a5);
    v111 = v11;
    while (1)
    {
      v24 = 0;
      if ((_DWORD)v20 && *(_DWORD *)((char *)v14 - v20 + 1) == *(_DWORD *)((char *)v14 + 1))
      {
        v25 = (char *)v14 + 5;
        v26 = (_QWORD *)((char *)v14 - v20 + 5);
        if (v23 <= (unint64_t)v14 + 5)
        {
          v29 = (unsigned __int16 *)((char *)v14 + 5);
        }
        else
        {
          v27 = *(_QWORD *)v25 ^ *v26;
          if (v27)
          {
            v28 = __clz(__rbit64(v27)) >> 3;
            goto LABEL_38;
          }
          v67 = (char *)v14 + 13;
          while (1)
          {
            v68 = &v67[v27];
            if ((unint64_t)&v67[v27] >= v23)
              break;
            v69 = *(_QWORD *)((char *)v14 + v27 - v20 + 13);
            v27 += 8;
            v70 = *(_QWORD *)v68 ^ v69;
            if (v70)
            {
              v28 = v27 + (__clz(__rbit64(v70)) >> 3);
              goto LABEL_38;
            }
          }
          v29 = (unsigned __int16 *)((char *)v14 + v27 + 13);
          v26 = (_QWORD *)((char *)v29 - v20);
        }
        if (v29 < v108 && *(_DWORD *)v26 == *(_DWORD *)v29)
        {
          v29 += 2;
          v26 = (_QWORD *)((char *)v26 + 4);
        }
        if (v29 < v107 && *(unsigned __int16 *)v26 == *v29)
        {
          ++v29;
          v26 = (_QWORD *)((char *)v26 + 2);
        }
        if (v29 < v6 && *(unsigned __int8 *)v26 == *(unsigned __int8 *)v29)
          v29 = (unsigned __int16 *)((char *)v29 + 1);
        v28 = (char *)v29 - v25;
LABEL_38:
        v24 = v28 + 4;
      }
      v115 = 999999999;
      v106 = v19;
      if (v11 == 6)
      {
        v30 = sub_1D4B76238(v22, v14, v6, &v115);
      }
      else if (v11 == 5)
      {
        v30 = sub_1D4B75FF0(v22, v14, v6, &v115);
      }
      else
      {
        v30 = sub_1D4B75DAC(v22, v14, v6, &v115);
      }
      if (v30 <= v24)
        v31 = v24;
      else
        v31 = v30;
      if (v31 < 4)
      {
        v32 = (unint64_t)v14 - v5;
        v14 = (_QWORD *)((char *)v14 + (((unint64_t)v14 - v5) >> 8) + 1);
        v22 = a1;
        *(_DWORD *)(a1 + 300) = v32 > 0x7FF;
        LODWORD(v19) = v106;
        goto LABEL_191;
      }
      if (v30 <= v24)
        v33 = (_DWORD *)((char *)v14 + 1);
      else
        v33 = v14;
      if (v30 <= v24)
        v34 = 1;
      else
        v34 = v115;
      v35 = v31;
      v36 = v34;
      v109 = v33;
      v37 = -(uint64_t)v20;
      if ((unint64_t)v14 < v114)
      {
        do
        {
          v33 = (_DWORD *)((char *)v14 + 1);
          if (!v34 || !(_DWORD)v20)
          {
            v38 = v112;
            v39 = v111;
            goto LABEL_63;
          }
          v38 = v112;
          v39 = v111;
          if (*v33 != *(_DWORD *)((char *)v33 + v37))
            goto LABEL_63;
          v40 = (char *)v14 + 5;
          v41 = (_QWORD *)((char *)v14 + v37 + 5);
          if (v23 <= (unint64_t)v14 + 5)
          {
            v51 = (unsigned __int16 *)((char *)v14 + 5);
          }
          else
          {
            v42 = *(_QWORD *)v40 ^ *v41;
            if (v42)
            {
              v43 = __clz(__rbit64(v42)) >> 3;
LABEL_105:
              v56 = v43 + 4;
              if (3 * (int)v56 > (int)(3 * v31 + __clz(v34) - 30))
              {
                v31 = v56;
                v34 = 1;
                v109 = (_DWORD *)((char *)v14 + 1);
              }
              goto LABEL_63;
            }
            v51 = (unsigned __int16 *)((char *)v14 + 13);
            while ((unint64_t)v51 < v23)
            {
              v53 = *(_QWORD *)((char *)v51 + v37);
              v54 = *(_QWORD *)v51;
              v51 += 4;
              v55 = v54 ^ v53;
              if (v55)
              {
                v51 = (unsigned __int16 *)((char *)v51 + (__clz(__rbit64(v55)) >> 3) - 8);
                goto LABEL_104;
              }
            }
            v41 = (_QWORD *)((char *)v51 + v37);
          }
          if (v51 < v108 && *(_DWORD *)v41 == *(_DWORD *)v51)
          {
            v51 += 2;
            v41 = (_QWORD *)((char *)v41 + 4);
          }
          if (v51 < v107 && *(unsigned __int16 *)v41 == *v51)
          {
            ++v51;
            v41 = (_QWORD *)((char *)v41 + 2);
          }
          if (v51 < v112 && *(unsigned __int8 *)v41 == *(unsigned __int8 *)v51)
            v51 = (unsigned __int16 *)((char *)v51 + 1);
LABEL_104:
          v43 = (char *)v51 - v40;
          if (v43 <= 0xFFFFFFFFFFFFFFFBLL)
            goto LABEL_105;
LABEL_63:
          v115 = 999999999;
          if (v39 == 6)
          {
            v44 = sub_1D4B76238(a1, (_QWORD *)((char *)v14 + 1), v38, &v115);
          }
          else if (v39 == 5)
          {
            v44 = sub_1D4B75FF0(a1, (_QWORD *)((char *)v14 + 1), v38, &v115);
          }
          else
          {
            v44 = sub_1D4B75DAC(a1, (_QWORD *)((char *)v14 + 1), v38, &v115);
          }
          v35 = v44;
          if (v44 >= 4)
          {
            v36 = v115;
            if ((int)(__clz(v115) + 4 * v44 - 31) > (int)(__clz(v34) + 4 * v31 - 27))
              goto LABEL_121;
          }
          if ((unint64_t)v33 >= v114)
            goto LABEL_125;
          v33 = (_DWORD *)((char *)v14 + 2);
          if (!v34)
          {
            v45 = v112;
            v46 = v111;
            goto LABEL_114;
          }
          v45 = v112;
          v46 = v111;
          if (!(_DWORD)v20 || *v33 != *(_DWORD *)((char *)v33 - v20))
            goto LABEL_114;
          v47 = (char *)v14 + 6;
          v48 = (_QWORD *)((char *)v14 - v20 + 6);
          if (v23 <= (unint64_t)v14 + 6)
          {
            v52 = (unsigned __int16 *)v14 + 3;
          }
          else
          {
            v49 = *(_QWORD *)v47 ^ *v48;
            if (v49)
            {
              v50 = __clz(__rbit64(v49)) >> 3;
LABEL_112:
              v60 = v50 + 4;
              if ((int)(__clz(v34) + 4 * v31 - 30) < 4 * (int)v60)
              {
                v31 = v60;
                v34 = 1;
                v109 = (_DWORD *)((char *)v14 + 2);
              }
              goto LABEL_114;
            }
            v52 = (unsigned __int16 *)v14 + 7;
            while ((unint64_t)v52 < v23)
            {
              v57 = *(_QWORD *)((char *)v52 - v20);
              v58 = *(_QWORD *)v52;
              v52 += 4;
              v59 = v58 ^ v57;
              if (v59)
              {
                v52 = (unsigned __int16 *)((char *)v52 + (__clz(__rbit64(v59)) >> 3) - 8);
                goto LABEL_111;
              }
            }
            v48 = (_QWORD *)((char *)v52 - v20);
          }
          if (v52 < v108 && *(_DWORD *)v48 == *(_DWORD *)v52)
          {
            v52 += 2;
            v48 = (_QWORD *)((char *)v48 + 4);
          }
          if (v52 < v107 && *(unsigned __int16 *)v48 == *v52)
          {
            ++v52;
            v48 = (_QWORD *)((char *)v48 + 2);
          }
          if (v52 < v112 && *(unsigned __int8 *)v48 == *(unsigned __int8 *)v52)
            v52 = (unsigned __int16 *)((char *)v52 + 1);
LABEL_111:
          v50 = (char *)v52 - v47;
          if (v50 <= 0xFFFFFFFFFFFFFFFBLL)
            goto LABEL_112;
LABEL_114:
          v115 = 999999999;
          if (v46 == 6)
          {
            v61 = sub_1D4B76238(a1, (_QWORD *)((char *)v14 + 2), v45, &v115);
          }
          else if (v46 == 5)
          {
            v61 = sub_1D4B75FF0(a1, (_QWORD *)((char *)v14 + 2), v45, &v115);
          }
          else
          {
            v61 = sub_1D4B75DAC(a1, (_QWORD *)((char *)v14 + 2), v45, &v115);
          }
          v35 = v61;
          if (v61 < 4 || (v36 = v115, (int)(__clz(v115) + 4 * v61 - 31) <= (int)(__clz(v34) + 4 * v31 - 24)))
          {
LABEL_125:
            v35 = v31;
            v36 = v34;
            v33 = v109;
            break;
          }
LABEL_121:
          v37 = -(uint64_t)v20;
          v14 = v33;
          v109 = v33;
          v34 = v36;
          v31 = v35;
        }
        while ((unint64_t)v33 < v114);
      }
      if (v36 <= 3)
      {
        v22 = a1;
        v62 = v110;
      }
      else
      {
        v62 = v110;
        if ((unint64_t)v33 <= v5 || (unint64_t)v33 - v36 + 3 <= v105)
        {
          v64 = v33;
          v22 = a1;
        }
        else
        {
          v63 = 2 - v36;
          v64 = v33;
          v22 = a1;
          while (1)
          {
            v65 = *((unsigned __int8 *)v64 - 1);
            v64 = (_DWORD *)((char *)v64 - 1);
            if (v65 != *((unsigned __int8 *)v33 + v63))
              break;
            ++v35;
            if ((unint64_t)v64 > v5)
            {
              v66 = (char *)v33 + v63;
              v33 = v64;
              if ((unint64_t)v66 > v105)
                continue;
            }
            goto LABEL_141;
          }
          v64 = v33;
        }
LABEL_141:
        v106 = v20;
        v20 = (v36 - 3);
        v33 = v64;
      }
      v71 = (uint64_t)v33 - v5;
      v72 = *(_OWORD **)(a2 + 24);
      if (v33 > (_DWORD *)v62)
        break;
      *v72 = *(_OWORD *)v5;
      v75 = *(_QWORD *)(a2 + 24);
      if ((unint64_t)v71 > 0x10)
      {
        *(_OWORD *)(v75 + 16) = *(_OWORD *)(v5 + 16);
        if (v71 >= 33)
        {
          v76 = v75 + v71;
          v77 = (_OWORD *)(v75 + 32);
          v78 = (__int128 *)(v5 + 48);
          do
          {
            *v77 = *(v78 - 1);
            v79 = *v78;
            v78 += 2;
            v77[1] = v79;
            v77 += 2;
          }
          while ((unint64_t)v77 < v76);
        }
        goto LABEL_144;
      }
      *(_QWORD *)(a2 + 24) = v75 + v71;
      v73 = *(_QWORD *)(a2 + 8);
      v19 = v106;
LABEL_152:
      *(_WORD *)(v73 + 4) = v71;
      *(_DWORD *)v73 = v36;
      if (v35 - 3 >= 0x10000)
      {
        v80 = (unint64_t)(v73 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v80;
      }
      *(_WORD *)(v73 + 6) = v35 - 3;
      *(_QWORD *)(a2 + 8) = v73 + 8;
      if (*(_DWORD *)(v22 + 300))
        *(_DWORD *)(v22 + 300) = 0;
      v5 = (unint64_t)v33 + v35;
      if (!(_DWORD)v19 || v5 > v114)
      {
        v14 = (_QWORD *)((char *)v33 + v35);
        v6 = v112;
        v11 = v111;
        goto LABEL_191;
      }
      v81 = v20;
      v82 = v19;
      v6 = v112;
      v11 = v111;
      while (1)
      {
        v20 = v82;
        v82 = v81;
        if (*(_DWORD *)v5 != *(_DWORD *)(v5 - v20))
        {
          LODWORD(v19) = v20;
          v20 = v81;
          goto LABEL_190;
        }
        v83 = (char *)(v5 + 4);
        v84 = (_QWORD *)(v5 + 4 - v20);
        if (v23 <= v5 + 4)
        {
          v88 = (unsigned __int16 *)(v5 + 4);
          v86 = v110;
        }
        else
        {
          v85 = *(_QWORD *)v83 ^ *v84;
          v86 = v110;
          if (v85)
          {
            v87 = __clz(__rbit64(v85)) >> 3;
            goto LABEL_174;
          }
          v92 = v5 + 12;
          while (1)
          {
            v93 = (_QWORD *)(v92 + v85);
            if (v92 + v85 >= v23)
              break;
            v94 = *(_QWORD *)(v5 + 12 - v20 + v85);
            v85 += 8;
            v95 = *v93 ^ v94;
            if (v95)
            {
              v87 = v85 + (__clz(__rbit64(v95)) >> 3);
              goto LABEL_174;
            }
          }
          v88 = (unsigned __int16 *)(v5 + v85 + 12);
          v84 = (_QWORD *)((char *)v88 - v20);
        }
        if (v88 < v108 && *(_DWORD *)v84 == *(_DWORD *)v88)
        {
          v88 += 2;
          v84 = (_QWORD *)((char *)v84 + 4);
        }
        if (v88 < v107 && *(unsigned __int16 *)v84 == *v88)
        {
          ++v88;
          v84 = (_QWORD *)((char *)v84 + 2);
        }
        if (v88 < v112 && *(unsigned __int8 *)v84 == *(unsigned __int8 *)v88)
          v88 = (unsigned __int16 *)((char *)v88 + 1);
        v87 = (char *)v88 - v83;
LABEL_174:
        v89 = *(_OWORD **)(a2 + 24);
        if (v5 <= (unint64_t)v86)
          *v89 = *(_OWORD *)v5;
        else
          sub_1D4B56E1C(v89, (char *)v5, v5, v86);
        v90 = *(_QWORD *)(a2 + 8);
        *(_WORD *)(v90 + 4) = 0;
        *(_DWORD *)v90 = 1;
        if (v87 + 1 >= 0x10000)
        {
          v91 = (unint64_t)(v90 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v91;
        }
        *(_WORD *)(v90 + 6) = v87 + 1;
        *(_QWORD *)(a2 + 8) = v90 + 8;
        v5 += v87 + 4;
        if (!(_DWORD)v82)
          break;
        v81 = v20;
        LODWORD(v19) = v82;
        v14 = (_QWORD *)v5;
        if (v5 > v114)
          goto LABEL_191;
      }
      LODWORD(v19) = 0;
LABEL_190:
      v14 = (_QWORD *)v5;
LABEL_191:
      if ((unint64_t)v14 >= v114)
      {
        a3 = v104;
        v13 = v102;
        v12 = v103;
        v18 = v101;
        goto LABEL_194;
      }
    }
    sub_1D4B56E1C(v72, (char *)v5, (unint64_t)v33, v62);
LABEL_144:
    *(_QWORD *)(a2 + 24) += v71;
    v73 = *(_QWORD *)(a2 + 8);
    v19 = v106;
    if ((unint64_t)v71 >= 0x10000)
    {
      v74 = (unint64_t)(v73 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v74;
    }
    goto LABEL_152;
  }
LABEL_194:
  if (v13 <= v18)
    v96 = 0;
  else
    v96 = v13;
  if (v12 <= v18)
    v97 = 0;
  else
    v97 = v12;
  if ((_DWORD)v20)
    v98 = v20;
  else
    v98 = v96;
  if ((_DWORD)v20)
    v99 = v96 == 0;
  else
    v99 = 1;
  if (v99)
    v96 = v97;
  if ((_DWORD)v19)
    v96 = v19;
  *a3 = v98;
  a3[1] = v96;
  return (char *)v6 - v5;
}

char *sub_1D4B68738(uint64_t a1, uint64_t a2, unsigned int *a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v5;
  unsigned __int16 *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  int v16;
  unsigned int v17;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unsigned __int16 *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  unsigned __int16 *v35;
  _DWORD *v36;
  int v37;
  char *v38;
  _QWORD *v39;
  unsigned __int16 *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  _DWORD *v53;
  int v54;
  char *v55;
  uint64_t v56;
  _OWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  __int128 v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  unsigned __int16 *v73;
  _OWORD *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  BOOL v88;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int *v93;
  unint64_t v94;
  unsigned int v96;
  unint64_t v97;
  unsigned __int16 *v98;
  unsigned __int16 *v99;
  int v100;
  unsigned __int16 *v101;
  char *v103;
  char *v104;
  uint64_t v105;

  v5 = (unint64_t)a4;
  v6 = (unsigned __int16 *)((char *)a4 + a5);
  v7 = (unint64_t)a4 + a5 - 8;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v10 = v8 + v9;
  v11 = *(_DWORD *)(a1 + 272);
  if (v11 >= 6)
    v11 = 6;
  if (v11 <= 4)
    v12 = 4;
  else
    v12 = v11;
  v14 = *a3;
  v13 = a3[1];
  if ((_DWORD)a4 == (_DWORD)v10)
    v15 = (_QWORD *)((char *)a4 + 1);
  else
    v15 = a4;
  v16 = (_DWORD)v15 - v8;
  v17 = 1 << *(_DWORD *)(a1 + 256);
  if (v16 - (int)v9 > v17 && *(_DWORD *)(a1 + 40) == 0)
    LODWORD(v9) = v16 - v17;
  v19 = v16 - v9;
  if (v13 <= v19)
    LODWORD(v20) = a3[1];
  else
    LODWORD(v20) = 0;
  if (v14 <= v19)
    v21 = v14;
  else
    v21 = 0;
  *(_DWORD *)(a1 + 300) = 0;
  if ((unint64_t)v15 < v7)
  {
    v22 = a1;
    v90 = v19;
    v91 = v14;
    v93 = a3;
    v94 = v10;
    v92 = v13;
    v23 = (unint64_t)v6 - 7;
    v98 = (unsigned __int16 *)((char *)v6 - 1);
    v99 = (unsigned __int16 *)((char *)v6 - 3);
    v103 = (char *)(v6 - 16);
    v104 = (char *)v6 - 7;
    v101 = (unsigned __int16 *)((char *)a4 + a5);
    v97 = (unint64_t)a4 + a5 - 8;
    v100 = v12;
    while (1)
    {
      v96 = v20;
      v24 = 0;
      if ((_DWORD)v21 && *(_DWORD *)((char *)v15 - v21 + 1) == *(_DWORD *)((char *)v15 + 1))
      {
        v25 = (char *)v15 + 5;
        v26 = (_QWORD *)((char *)v15 - v21 + 5);
        if (v23 <= (unint64_t)v15 + 5)
        {
          v29 = (unsigned __int16 *)((char *)v15 + 5);
        }
        else
        {
          v27 = *(_QWORD *)v25 ^ *v26;
          if (v27)
          {
            v28 = __clz(__rbit64(v27)) >> 3;
            goto LABEL_38;
          }
          v81 = (char *)v15 + 13;
          while (1)
          {
            v82 = &v81[v27];
            if ((unint64_t)&v81[v27] >= v23)
              break;
            v83 = *(_QWORD *)((char *)v15 + v27 - v21 + 13);
            v27 += 8;
            v84 = *(_QWORD *)v82 ^ v83;
            if (v84)
            {
              v28 = v27 + (__clz(__rbit64(v84)) >> 3);
              goto LABEL_38;
            }
          }
          v29 = (unsigned __int16 *)((char *)v15 + v27 + 13);
          v26 = (_QWORD *)((char *)v29 - v21);
        }
        if (v29 < v99 && *(_DWORD *)v26 == *(_DWORD *)v29)
        {
          v29 += 2;
          v26 = (_QWORD *)((char *)v26 + 4);
        }
        if (v29 < v98 && *(unsigned __int16 *)v26 == *v29)
        {
          ++v29;
          v26 = (_QWORD *)((char *)v26 + 2);
        }
        if (v29 < v6 && *(unsigned __int8 *)v26 == *(unsigned __int8 *)v29)
          v29 = (unsigned __int16 *)((char *)v29 + 1);
        v28 = (char *)v29 - v25;
LABEL_38:
        v24 = v28 + 4;
      }
      v105 = 999999999;
      if (v12 == 6)
      {
        v30 = sub_1D4B76238(v22, v15, v6, &v105);
      }
      else if (v12 == 5)
      {
        v30 = sub_1D4B75FF0(v22, v15, v6, &v105);
      }
      else
      {
        v30 = sub_1D4B75DAC(v22, v15, v6, &v105);
      }
      if (v30 <= v24)
        v31 = v24;
      else
        v31 = v30;
      if (v31 < 4)
      {
        v32 = (unint64_t)v15 - v5;
        v15 = (_QWORD *)((char *)v15 + (((unint64_t)v15 - v5) >> 8) + 1);
        v22 = a1;
        *(_DWORD *)(a1 + 300) = v32 > 0x7FF;
        v23 = (unint64_t)v104;
        goto LABEL_158;
      }
      v23 = (unint64_t)v104;
      if (v30 <= v24)
        v33 = (_DWORD *)((char *)v15 + 1);
      else
        v33 = v15;
      if (v30 <= v24)
        v34 = 1;
      else
        v34 = v105;
      if ((unint64_t)v15 >= v7)
      {
        v48 = v31;
        v49 = v34;
        v36 = v33;
        goto LABEL_92;
      }
      v35 = (unsigned __int16 *)((char *)v15 + 13);
      while (1)
      {
        v36 = (_DWORD *)((char *)v15 + 1);
        if (!v34)
        {
          v37 = v100;
          goto LABEL_80;
        }
        v37 = v100;
        if (!(_DWORD)v21 || *v36 != *(_DWORD *)((char *)v36 - v21))
          goto LABEL_80;
        v38 = (char *)v15 + 5;
        v39 = (_QWORD *)((char *)v15 - v21 + 5);
        if (v23 <= (unint64_t)v15 + 5)
        {
          v40 = (unsigned __int16 *)((char *)v15 + 5);
        }
        else
        {
          v40 = v35;
          v41 = *(_QWORD *)v38 ^ *v39;
          if (v41)
          {
            v42 = __clz(__rbit64(v41)) >> 3;
LABEL_78:
            v46 = v42 + 4;
            if (3 * (int)v46 > (int)(3 * v31 + __clz(v34) - 30))
            {
              v31 = v46;
              v34 = 1;
              v33 = (_DWORD *)((char *)v15 + 1);
            }
            goto LABEL_80;
          }
          while ((unint64_t)v40 < v23)
          {
            v43 = *(_QWORD *)((char *)v40 - v21);
            v44 = *(_QWORD *)v40;
            v40 += 4;
            v45 = v44 ^ v43;
            if (v45)
            {
              v40 = (unsigned __int16 *)((char *)v40 + (__clz(__rbit64(v45)) >> 3) - 8);
              goto LABEL_77;
            }
          }
          v39 = (_QWORD *)((char *)v40 - v21);
        }
        if (v40 < v99 && *(_DWORD *)v39 == *(_DWORD *)v40)
        {
          v40 += 2;
          v39 = (_QWORD *)((char *)v39 + 4);
        }
        if (v40 < v98 && *(unsigned __int16 *)v39 == *v40)
        {
          ++v40;
          v39 = (_QWORD *)((char *)v39 + 2);
        }
        if (v40 < v101 && *(unsigned __int8 *)v39 == *(unsigned __int8 *)v40)
          v40 = (unsigned __int16 *)((char *)v40 + 1);
LABEL_77:
        v42 = (char *)v40 - v38;
        if (v42 <= 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_78;
LABEL_80:
        v105 = 999999999;
        if (v37 == 6)
          v47 = sub_1D4B76238(a1, (_QWORD *)((char *)v15 + 1), v101, &v105);
        else
          v47 = v37 == 5
              ? sub_1D4B75FF0(a1, (_QWORD *)((char *)v15 + 1), v101, &v105)
              : sub_1D4B75DAC(a1, (_QWORD *)((char *)v15 + 1), v101, &v105);
        v48 = v47;
        if (v47 < 4)
          break;
        v49 = v105;
        if ((int)(__clz(v105) + 4 * v47 - 31) <= (int)(__clz(v34) + 4 * v31 - 27))
          break;
        v35 = (unsigned __int16 *)((char *)v35 + 1);
        v15 = (_QWORD *)((char *)v15 + 1);
        v33 = v36;
        v34 = v105;
        v31 = v47;
        v23 = (unint64_t)v104;
        if ((unint64_t)v36 >= v97)
          goto LABEL_92;
      }
      v48 = v31;
      v49 = v34;
      v36 = v33;
      v23 = (unint64_t)v104;
LABEL_92:
      if (v49 <= 3)
      {
        v50 = a2;
        v22 = a1;
        v51 = v103;
        v20 = v96;
      }
      else
      {
        v50 = a2;
        v22 = a1;
        v51 = v103;
        if ((unint64_t)v36 > v5 && (unint64_t)v36 - v49 + 3 > v94)
        {
          v52 = 2 - v49;
          v53 = v36;
          while (1)
          {
            v54 = *((unsigned __int8 *)v53 - 1);
            v53 = (_DWORD *)((char *)v53 - 1);
            if (v54 != *((unsigned __int8 *)v36 + v52))
              break;
            ++v48;
            if ((unint64_t)v53 > v5)
            {
              v55 = (char *)v36 + v52;
              v36 = v53;
              if ((unint64_t)v55 > v94)
                continue;
            }
            goto LABEL_102;
          }
        }
        v53 = v36;
LABEL_102:
        v20 = v21;
        v21 = (v49 - 3);
        v36 = v53;
      }
      v56 = (uint64_t)v36 - v5;
      v57 = *(_OWORD **)(v50 + 24);
      if (v36 > (_DWORD *)v51)
      {
        sub_1D4B56E1C(v57, (char *)v5, (unint64_t)v36, v51);
        v23 = (unint64_t)v104;
        goto LABEL_105;
      }
      *v57 = *(_OWORD *)v5;
      v60 = *(_QWORD *)(v50 + 24);
      if ((unint64_t)v56 <= 0x10)
      {
        *(_QWORD *)(v50 + 24) = v60 + v56;
        v58 = *(_QWORD *)(v50 + 8);
      }
      else
      {
        *(_OWORD *)(v60 + 16) = *(_OWORD *)(v5 + 16);
        if (v56 >= 33)
        {
          v61 = v60 + v56;
          v62 = (_OWORD *)(v60 + 32);
          v63 = (__int128 *)(v5 + 48);
          do
          {
            *v62 = *(v63 - 1);
            v64 = *v63;
            v63 += 2;
            v62[1] = v64;
            v62 += 2;
          }
          while ((unint64_t)v62 < v61);
        }
LABEL_105:
        *(_QWORD *)(v50 + 24) += v56;
        v58 = *(_QWORD *)(v50 + 8);
        if ((unint64_t)v56 >= 0x10000)
        {
          v59 = (unint64_t)(v58 - *(_QWORD *)v50) >> 3;
          *(_DWORD *)(v50 + 72) = 1;
          *(_DWORD *)(v50 + 76) = v59;
        }
      }
      *(_WORD *)(v58 + 4) = v56;
      *(_DWORD *)v58 = v49;
      if (v48 - 3 >= 0x10000)
      {
        v65 = (unint64_t)(v58 - *(_QWORD *)v50) >> 3;
        *(_DWORD *)(v50 + 72) = 2;
        *(_DWORD *)(v50 + 76) = v65;
      }
      *(_WORD *)(v58 + 6) = v48 - 3;
      *(_QWORD *)(v50 + 8) = v58 + 8;
      if (*(_DWORD *)(v22 + 300))
        *(_DWORD *)(v22 + 300) = 0;
      v5 = (unint64_t)v36 + v48;
      if (!(_DWORD)v20)
      {
        v15 = (_QWORD *)((char *)v36 + v48);
        v6 = v101;
        v7 = v97;
        goto LABEL_151;
      }
      v7 = v97;
      if (v5 > v97)
      {
        v15 = (_QWORD *)v5;
        v6 = v101;
LABEL_151:
        v12 = v100;
        goto LABEL_158;
      }
      v66 = v21;
      v67 = v20;
      v6 = v101;
      v12 = v100;
      while (2)
      {
        v21 = v67;
        v67 = v66;
        if (*(_DWORD *)v5 != *(_DWORD *)(v5 - v21))
        {
          LODWORD(v20) = v21;
          v21 = v66;
          goto LABEL_157;
        }
        v68 = (char *)(v5 + 4);
        v69 = (_QWORD *)(v5 + 4 - v21);
        if (v23 <= v5 + 4)
        {
          v73 = (unsigned __int16 *)(v5 + 4);
          v71 = v103;
        }
        else
        {
          v70 = *(_QWORD *)v68 ^ *v69;
          v71 = v103;
          if (v70)
          {
            v72 = __clz(__rbit64(v70)) >> 3;
            goto LABEL_135;
          }
          v77 = v5 + 12;
          while (1)
          {
            v78 = (_QWORD *)(v77 + v70);
            if (v77 + v70 >= v23)
              break;
            v79 = *(_QWORD *)(v5 + 12 - v21 + v70);
            v70 += 8;
            v80 = *v78 ^ v79;
            if (v80)
            {
              v72 = v70 + (__clz(__rbit64(v80)) >> 3);
              goto LABEL_135;
            }
          }
          v73 = (unsigned __int16 *)(v5 + v70 + 12);
          v69 = (_QWORD *)((char *)v73 - v21);
        }
        if (v73 < v99 && *(_DWORD *)v69 == *(_DWORD *)v73)
        {
          v73 += 2;
          v69 = (_QWORD *)((char *)v69 + 4);
        }
        if (v73 < v98 && *(unsigned __int16 *)v69 == *v73)
        {
          ++v73;
          v69 = (_QWORD *)((char *)v69 + 2);
        }
        if (v73 < v101 && *(unsigned __int8 *)v69 == *(unsigned __int8 *)v73)
          v73 = (unsigned __int16 *)((char *)v73 + 1);
        v72 = (char *)v73 - v68;
LABEL_135:
        v74 = *(_OWORD **)(v50 + 24);
        if (v5 <= (unint64_t)v71)
        {
          *v74 = *(_OWORD *)v5;
        }
        else
        {
          sub_1D4B56E1C(v74, (char *)v5, v5, v71);
          v23 = (unint64_t)v104;
        }
        v75 = *(_QWORD *)(v50 + 8);
        *(_WORD *)(v75 + 4) = 0;
        *(_DWORD *)v75 = 1;
        if (v72 + 1 >= 0x10000)
        {
          v76 = (unint64_t)(v75 - *(_QWORD *)v50) >> 3;
          *(_DWORD *)(v50 + 72) = 2;
          *(_DWORD *)(v50 + 76) = v76;
        }
        *(_WORD *)(v75 + 6) = v72 + 1;
        *(_QWORD *)(v50 + 8) = v75 + 8;
        v5 += v72 + 4;
        if ((_DWORD)v67)
        {
          v66 = v21;
          LODWORD(v20) = v67;
          v15 = (_QWORD *)v5;
          if (v5 > v97)
            goto LABEL_158;
          continue;
        }
        break;
      }
      LODWORD(v20) = 0;
LABEL_157:
      v15 = (_QWORD *)v5;
LABEL_158:
      if ((unint64_t)v15 >= v7)
      {
        a3 = v93;
        v14 = v91;
        v13 = v92;
        v19 = v90;
        break;
      }
    }
  }
  if (v14 <= v19)
    v85 = 0;
  else
    v85 = v14;
  if (v13 <= v19)
    v86 = 0;
  else
    v86 = v13;
  if ((_DWORD)v21)
    v87 = v21;
  else
    v87 = v85;
  if ((_DWORD)v21)
    v88 = v85 == 0;
  else
    v88 = 1;
  if (v88)
    v85 = v86;
  if ((_DWORD)v20)
    v85 = v20;
  *a3 = v87;
  a3[1] = v85;
  return (char *)v6 - v5;
}

char *sub_1D4B68FA0(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _OWORD *v42;
  __int128 *v43;
  __int128 v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  _OWORD *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  BOOL v67;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  unint64_t v73;
  unsigned int v74;
  char *v75;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;

  v5 = a4;
  v6 = (char *)(a4 + a5);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 272);
  if (v9 >= 6)
    v9 = 6;
  if (v9 <= 4)
    v9 = 4;
  v74 = v9;
  v11 = *a3;
  v10 = a3[1];
  v73 = v7 + v8;
  if ((_DWORD)a4 == (_DWORD)v7 + (_DWORD)v8)
    v12 = a4 + 1;
  else
    v12 = a4;
  v13 = v12 - v7;
  v14 = 1 << *(_DWORD *)(a1 + 256);
  if (v13 - (int)v8 > v14 && *(_DWORD *)(a1 + 40) == 0)
    LODWORD(v8) = v13 - v14;
  v16 = v13 - v8;
  if (v10 <= v16)
    v17 = v10;
  else
    v17 = 0;
  if (v11 <= v16)
    v18 = v11;
  else
    v18 = 0;
  *(_DWORD *)(a1 + 300) = 0;
  v79 = a4 + a5 - 8;
  if (v12 < v79)
  {
    v69 = v16;
    v70 = v11;
    v71 = v10;
    v72 = a3;
    v20 = (unint64_t)(v6 - 7);
    v77 = v6 - 1;
    v78 = v6 - 3;
    v21 = v6 - 32;
    v75 = (char *)(a4 + a5);
    while (1)
    {
      if ((_DWORD)v18)
      {
        v22 = v12 + 1;
        if (*(_DWORD *)(v12 + 1 - v18) == *(_DWORD *)(v12 + 1))
          break;
      }
      v80 = 999999999;
      if (v74 == 6)
      {
        v27 = sub_1D4B76238(a1, (_QWORD *)v12, v6, &v80);
      }
      else if (v74 == 5)
      {
        v27 = sub_1D4B75FF0(a1, (_QWORD *)v12, v6, &v80);
      }
      else
      {
        v27 = sub_1D4B75DAC(a1, (_DWORD *)v12, v6, &v80);
      }
      v29 = v27;
      if (v27)
        v30 = v80;
      else
        v30 = 1;
      if (v27 > 3)
      {
        if (v30 >= 4)
        {
          if (v12 > v5 && v12 - v30 + 3 > v73)
          {
            v32 = 2 - v30;
            v22 = v12;
            while (1)
            {
              v33 = *(unsigned __int8 *)--v22;
              if (v33 != *(unsigned __int8 *)(v12 + v32))
                break;
              ++v29;
              if (v22 > v5)
              {
                v34 = v12 + v32;
                v12 = v22;
                if (v34 > v73)
                  continue;
              }
              goto LABEL_57;
            }
          }
          v22 = v12;
LABEL_57:
          v17 = v18;
          v18 = (v30 - 3);
LABEL_58:
          v12 = v22;
        }
        v35 = v12 - v5;
        v36 = *(_OWORD **)(a2 + 24);
        if (v12 > (unint64_t)v21)
        {
          sub_1D4B56E1C(v36, (char *)v5, v12, v21);
          goto LABEL_61;
        }
        *v36 = *(_OWORD *)v5;
        v40 = *(_QWORD *)(a2 + 24);
        if ((unint64_t)v35 <= 0x10)
        {
          *(_QWORD *)(a2 + 24) = v40 + v35;
          v37 = *(_QWORD *)(a2 + 8);
          v38 = a1;
        }
        else
        {
          *(_OWORD *)(v40 + 16) = *(_OWORD *)(v5 + 16);
          if (v35 >= 33)
          {
            v41 = v40 + v35;
            v42 = (_OWORD *)(v40 + 32);
            v43 = (__int128 *)(v5 + 48);
            do
            {
              *v42 = *(v43 - 1);
              v44 = *v43;
              v43 += 2;
              v42[1] = v44;
              v42 += 2;
            }
            while ((unint64_t)v42 < v41);
          }
LABEL_61:
          *(_QWORD *)(a2 + 24) += v35;
          v37 = *(_QWORD *)(a2 + 8);
          v38 = a1;
          if ((unint64_t)v35 >= 0x10000)
          {
            v39 = (unint64_t)(v37 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v39;
          }
        }
        *(_WORD *)(v37 + 4) = v35;
        *(_DWORD *)v37 = v30;
        if (v29 - 3 >= 0x10000)
        {
          v45 = (unint64_t)(v37 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v45;
        }
        *(_WORD *)(v37 + 6) = v29 - 3;
        *(_QWORD *)(a2 + 8) = v37 + 8;
        v6 = v75;
        if (*(_DWORD *)(v38 + 300))
          *(_DWORD *)(v38 + 300) = 0;
        v5 = v12 + v29;
        if ((_DWORD)v17 && v5 <= v79)
        {
          v46 = v18;
          v47 = v17;
          while (1)
          {
            v18 = v47;
            v47 = v46;
            if (*(_DWORD *)v5 != *(_DWORD *)(v5 - v18))
            {
              v17 = v18;
              v18 = v46;
              break;
            }
            v48 = (char *)(v5 + 4);
            v49 = (char *)(v5 + 4 - v18);
            if (v20 <= v5 + 4)
            {
              v52 = (char *)(v5 + 4);
            }
            else
            {
              v50 = *(_QWORD *)v48 ^ *(_QWORD *)v49;
              if (v50)
              {
                v51 = __clz(__rbit64(v50)) >> 3;
                goto LABEL_91;
              }
              v56 = v5 + 12;
              while (1)
              {
                v57 = (_QWORD *)(v56 + v50);
                if (v56 + v50 >= v20)
                  break;
                v58 = *(_QWORD *)(v5 + 12 - v18 + v50);
                v50 += 8;
                v59 = *v57 ^ v58;
                if (v59)
                {
                  v51 = v50 + (__clz(__rbit64(v59)) >> 3);
                  goto LABEL_91;
                }
              }
              v52 = (char *)(v5 + v50 + 12);
              v49 = &v52[-v18];
            }
            if (v52 < v78 && *(_DWORD *)v49 == *(_DWORD *)v52)
            {
              v52 += 4;
              v49 += 4;
            }
            if (v52 < v77 && *(unsigned __int16 *)v49 == *(unsigned __int16 *)v52)
            {
              v52 += 2;
              v49 += 2;
            }
            if (v52 < v75 && *v49 == *v52)
              ++v52;
            v51 = v52 - v48;
LABEL_91:
            v53 = *(_OWORD **)(a2 + 24);
            if (v5 <= (unint64_t)v21)
              *v53 = *(_OWORD *)v5;
            else
              sub_1D4B56E1C(v53, (char *)v5, v5, v21);
            v54 = *(_QWORD *)(a2 + 8);
            *(_WORD *)(v54 + 4) = 0;
            *(_DWORD *)v54 = 1;
            if (v51 + 1 >= 0x10000)
            {
              v55 = (unint64_t)(v54 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v55;
            }
            *(_WORD *)(v54 + 6) = v51 + 1;
            *(_QWORD *)(a2 + 8) = v54 + 8;
            v5 += v51 + 4;
            if (!(_DWORD)v47)
            {
              v17 = v47;
              break;
            }
            v46 = v18;
            v17 = v47;
            v12 = v5;
            if (v5 > v79)
              goto LABEL_111;
          }
        }
        v12 = v5;
        goto LABEL_111;
      }
      v31 = v12 - v5;
      v12 += ((v12 - v5) >> 8) + 1;
      v6 = v75;
      *(_DWORD *)(a1 + 300) = v31 > 0x7FF;
LABEL_111:
      if (v12 >= v79)
      {
        a3 = v72;
        v11 = v70;
        v10 = v71;
        v16 = v69;
        goto LABEL_114;
      }
    }
    v23 = (char *)(v12 + 5);
    v24 = (char *)(v12 + 5 - v18);
    if (v20 <= v12 + 5)
    {
      v28 = (char *)(v12 + 5);
    }
    else
    {
      v25 = *(_QWORD *)v23 ^ *(_QWORD *)v24;
      if (v25)
      {
        v26 = __clz(__rbit64(v25)) >> 3;
LABEL_40:
        v29 = v26 + 4;
        LODWORD(v30) = 1;
        goto LABEL_58;
      }
      v60 = v12 + 13;
      while (1)
      {
        v61 = (_QWORD *)(v60 + v25);
        if (v60 + v25 >= v20)
          break;
        v62 = *(_QWORD *)(v12 + 13 - v18 + v25);
        v25 += 8;
        v63 = *v61 ^ v62;
        if (v63)
        {
          v26 = v25 + (__clz(__rbit64(v63)) >> 3);
          goto LABEL_40;
        }
      }
      v28 = (char *)(v12 + v25 + 13);
      v24 = &v28[-v18];
      v6 = v75;
    }
    if (v28 < v78 && *(_DWORD *)v24 == *(_DWORD *)v28)
    {
      v28 += 4;
      v24 += 4;
    }
    if (v28 < v77 && *(unsigned __int16 *)v24 == *(unsigned __int16 *)v28)
    {
      v28 += 2;
      v24 += 2;
    }
    if (v28 < v6 && *v24 == *v28)
      ++v28;
    v26 = v28 - v23;
    goto LABEL_40;
  }
LABEL_114:
  if (v11 <= v16)
    v64 = 0;
  else
    v64 = v11;
  if (v10 <= v16)
    v65 = 0;
  else
    v65 = v10;
  if ((_DWORD)v18)
    v66 = v18;
  else
    v66 = v64;
  if ((_DWORD)v18)
    v67 = v64 == 0;
  else
    v67 = 1;
  if (v67)
    v64 = v65;
  if ((_DWORD)v17)
    v64 = v17;
  *a3 = v66;
  a3[1] = v64;
  return &v6[-v5];
}

unint64_t sub_1D4B695D4(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  char *v53;
  uint64_t v54;
  _OWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _OWORD *v60;
  __int128 *v61;
  __int128 v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  _OWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int *v75;
  unint64_t v76;
  unsigned int v78;
  uint64_t v79;
  char *v80;
  char *v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;

  v5 = (unint64_t)a4;
  v6 = (unint64_t)a4 + a5;
  v7 = *(unsigned int *)(a1 + 24);
  v88 = *(_QWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 272);
  if (v8 >= 6)
    v8 = 6;
  if (v8 <= 4)
    v8 = 4;
  v87 = v8;
  v9 = *a3;
  v10 = a3[1];
  v11 = *(_QWORD *)(a1 + 248);
  v12 = *(char **)v11;
  v13 = *(_QWORD *)(v11 + 8);
  v82 = (_QWORD *)(v88 + v7);
  v76 = v13 + *(unsigned int *)(v11 + 24);
  if ((_DWORD)a4 - ((_DWORD)v88 + (_DWORD)v7) - (_DWORD)v76 + *(_QWORD *)v11)
    v14 = a4;
  else
    v14 = (uint64_t *)((char *)a4 + 1);
  *(_DWORD *)(a1 + 300) = 0;
  v89 = (unint64_t)a4 + a5 - 8;
  if ((unint64_t)v14 < v89)
  {
    v15 = a1;
    v75 = a3;
    v86 = v7 + v13 - (_DWORD)v12;
    v79 = v13 - v86;
    v80 = (char *)(v6 - 32);
    v81 = v12;
    v85 = v13;
    v83 = (unint64_t)a4 + a5;
    while (1)
    {
      v16 = (uint64_t *)((char *)v14 + 1);
      v17 = (_DWORD)v14 - v88 - v9;
      v18 = (v17 + 1);
      v19 = v13 + v18 - v86;
      if (v18 >= v7)
        v19 = v88 + v18;
      if ((v7 - v17 - 5) <= 0xFFFFFFFC && *(_DWORD *)v19 == *(_DWORD *)v16)
      {
        v20 = v18 >= v7 ? (char *)v6 : v81;
        v21 = sub_1D4B5F19C((uint64_t *)((char *)v14 + 5), (char *)(v19 + 4), v6, v20, v82) + 4;
      }
      else
      {
        v21 = 0;
      }
      v90 = 999999999;
      if (v87 == 6)
        v22 = sub_1D4B7E304(v15, v14, v6, (unsigned int *)&v90);
      else
        v22 = v87 == 5
            ? sub_1D4B7E28C(v15, v14, v6, (unsigned int *)&v90)
            : sub_1D4B7E214(v15, v14, v6, (unsigned int *)&v90);
      v23 = v22 <= v21 ? v21 : v22;
      if (v23 >= 4)
        break;
      v24 = (unint64_t)v14 - v5;
      v14 = (uint64_t *)((char *)v14 + (((unint64_t)v14 - v5) >> 8) + 1);
      *(_DWORD *)(v15 + 300) = v24 > 0x7FF;
      v13 = v85;
LABEL_120:
      if ((unint64_t)v14 >= v89)
      {
        a3 = v75;
        goto LABEL_122;
      }
    }
    v78 = v10;
    if (v22 <= v21)
    {
      v25 = 1;
    }
    else
    {
      v16 = v14;
      v25 = v90;
    }
    v26 = v23;
    v27 = v25;
    v28 = v16;
    if ((unint64_t)v14 < v89)
    {
      while (1)
      {
        v28 = (uint64_t *)((char *)v14 + 1);
        v29 = ((_DWORD)v14 + 1 - v88 - v9);
        v30 = v85 + v29 - v86;
        if (v29 >= v7)
          v30 = v88 + v29;
        if ((v7 + ~(_DWORD)v29) < 3)
          break;
        v31 = v83;
        v32 = a1;
        if (*(_DWORD *)v30 != *(_DWORD *)v28)
          goto LABEL_44;
        v33 = v29 >= v7 ? (char *)v83 : v81;
        v34 = sub_1D4B5F19C((uint64_t *)((char *)v14 + 5), (char *)(v30 + 4), v83, v33, v82);
        if (v34 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_44;
        v35 = v87;
        if (3 * ((int)v34 + 4) > (int)(3 * v23 + __clz(v25) - 30))
        {
          v23 = v34 + 4;
          v25 = 1;
          v16 = (uint64_t *)((char *)v14 + 1);
        }
LABEL_45:
        v90 = 999999999;
        v36 = (uint64_t *)((char *)v14 + 1);
        if (v35 == 6)
        {
          v37 = sub_1D4B7E304(v32, v36, v31, (unsigned int *)&v90);
        }
        else if (v35 == 5)
        {
          v37 = sub_1D4B7E28C(v32, v36, v31, (unsigned int *)&v90);
        }
        else
        {
          v37 = sub_1D4B7E214(v32, v36, v31, (unsigned int *)&v90);
        }
        v26 = v37;
        if (v37 >= 4)
        {
          v27 = v90;
          if ((int)(__clz(v90) + 4 * v37 - 31) > (int)(__clz(v25) + 4 * v23 - 27))
            goto LABEL_72;
        }
        if ((unint64_t)v28 >= v89)
          goto LABEL_74;
        v28 = (uint64_t *)((char *)v14 + 2);
        v38 = ((_DWORD)v14 + 2 - v88 - v9);
        v39 = v85 + v38 - v86;
        if (v38 >= v7)
          v39 = v88 + v38;
        if ((v7 + ~(_DWORD)v38) < 3)
        {
          v40 = v83;
          v41 = a1;
LABEL_64:
          v44 = v87;
          goto LABEL_65;
        }
        v40 = v83;
        v41 = a1;
        if (*(_DWORD *)v39 != *(_DWORD *)v28)
          goto LABEL_64;
        v42 = v38 >= v7 ? (char *)v83 : v81;
        v43 = sub_1D4B5F19C((uint64_t *)((char *)v14 + 6), (char *)(v39 + 4), v83, v42, v82);
        if (v43 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_64;
        v44 = v87;
        if ((int)(__clz(v25) + 4 * v23 - 30) < 4 * ((int)v43 + 4))
        {
          v23 = v43 + 4;
          v25 = 1;
          v16 = (uint64_t *)((char *)v14 + 2);
        }
LABEL_65:
        v90 = 999999999;
        v45 = (uint64_t *)((char *)v14 + 2);
        if (v44 == 6)
        {
          v46 = sub_1D4B7E304(v41, v45, v40, (unsigned int *)&v90);
        }
        else if (v44 == 5)
        {
          v46 = sub_1D4B7E28C(v41, v45, v40, (unsigned int *)&v90);
        }
        else
        {
          v46 = sub_1D4B7E214(v41, v45, v40, (unsigned int *)&v90);
        }
        v26 = v46;
        if (v46 < 4 || (v27 = v90, (int)(__clz(v90) + 4 * v46 - 31) <= (int)(__clz(v25) + 4 * v23 - 24)))
        {
LABEL_74:
          v26 = v23;
          v27 = v25;
          v28 = v16;
          goto LABEL_75;
        }
LABEL_72:
        v14 = v28;
        v16 = v28;
        v25 = v27;
        v23 = v26;
        if ((unint64_t)v28 >= v89)
          goto LABEL_75;
      }
      v31 = v83;
      v32 = a1;
LABEL_44:
      v35 = v87;
      goto LABEL_45;
    }
LABEL_75:
    if (v27 <= 3)
    {
      v53 = v80;
    }
    else
    {
      v47 = v88;
      v48 = v88 + v7;
      if (v7 > (int)v28 - ((int)v27 + (int)v88) + 3)
      {
        v48 = v76;
        v47 = v79;
      }
      if ((unint64_t)v28 > v5 && v47 + (unint64_t)((_DWORD)v28 - (v27 + v88) + 3) > v48)
      {
        v49 = (unsigned __int8 *)(v47 + ((_DWORD)v28 - (v27 + v88) + 3) - 1);
        v50 = (unsigned __int8 *)v28 - 1;
        while (*v50 == *v49)
        {
          ++v26;
          v51 = v50 - 1;
          if ((unint64_t)v50 > v5)
          {
            --v50;
            if ((unint64_t)v49-- > v48)
              continue;
          }
          v28 = (uint64_t *)(v51 + 1);
          goto LABEL_87;
        }
        v28 = (uint64_t *)(v50 + 1);
      }
LABEL_87:
      v53 = v80;
      v78 = v9;
      v9 = (v27 - 3);
    }
    v54 = (uint64_t)v28 - v5;
    v55 = *(_OWORD **)(a2 + 24);
    if (v28 <= (uint64_t *)v53)
    {
      *v55 = *(_OWORD *)v5;
      v58 = *(_QWORD *)(a2 + 24);
      if ((unint64_t)v54 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v58 + v54;
        v56 = *(_QWORD *)(a2 + 8);
        goto LABEL_98;
      }
      *(_OWORD *)(v58 + 16) = *(_OWORD *)(v5 + 16);
      if (v54 >= 33)
      {
        v59 = v58 + v54;
        v60 = (_OWORD *)(v58 + 32);
        v61 = (__int128 *)(v5 + 48);
        do
        {
          *v60 = *(v61 - 1);
          v62 = *v61;
          v61 += 2;
          v60[1] = v62;
          v60 += 2;
        }
        while ((unint64_t)v60 < v59);
      }
    }
    else
    {
      sub_1D4B56E1C(v55, (char *)v5, (unint64_t)v28, v53);
    }
    *(_QWORD *)(a2 + 24) += v54;
    v56 = *(_QWORD *)(a2 + 8);
    if ((unint64_t)v54 >= 0x10000)
    {
      v57 = (unint64_t)(v56 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v57;
    }
LABEL_98:
    *(_WORD *)(v56 + 4) = v54;
    *(_DWORD *)v56 = v27;
    if (v26 - 3 >= 0x10000)
    {
      v63 = (unint64_t)(v56 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v63;
    }
    *(_WORD *)(v56 + 6) = v26 - 3;
    *(_QWORD *)(a2 + 8) = v56 + 8;
    v13 = v85;
    if (*(_DWORD *)(a1 + 300))
      *(_DWORD *)(a1 + 300) = 0;
    v5 = (unint64_t)v28 + v26;
    if ((unint64_t)v28 + v26 <= v89)
    {
      v64 = v9;
      v65 = v78;
      v6 = v83;
      v15 = a1;
      while (1)
      {
        v9 = v65;
        v65 = v64;
        v66 = v88;
        v67 = (v5 - v88 - v9);
        if (v67 < v7)
          v66 = v79;
        if ((v7 + ~(_DWORD)v67) < 3)
          break;
        v68 = v66 + v67;
        if (*(_DWORD *)v68 != *(_DWORD *)v5)
          break;
        if (v67 >= v7)
          v69 = (char *)v83;
        else
          v69 = v81;
        v70 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v68 + 4), v83, v69, v82);
        v71 = *(_OWORD **)(a2 + 24);
        if (v5 <= (unint64_t)v80)
          *v71 = *(_OWORD *)v5;
        else
          sub_1D4B56E1C(v71, (char *)v5, v5, v80);
        v72 = *(_QWORD *)(a2 + 8);
        *(_WORD *)(v72 + 4) = 0;
        *(_DWORD *)v72 = 1;
        if (v70 + 1 >= 0x10000)
        {
          v73 = (unint64_t)(v72 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v73;
        }
        *(_WORD *)(v72 + 6) = v70 + 1;
        v5 += v70 + 4;
        *(_QWORD *)(a2 + 8) = v72 + 8;
        v64 = v9;
        v10 = v65;
        v14 = (uint64_t *)v5;
        if (v5 > v89)
          goto LABEL_120;
      }
      v10 = v9;
      v9 = v64;
      v14 = (uint64_t *)v5;
    }
    else
    {
      v14 = (uint64_t *)((char *)v28 + v26);
      v6 = v83;
      v15 = a1;
      v10 = v78;
    }
    goto LABEL_120;
  }
LABEL_122:
  *a3 = v9;
  a3[1] = v10;
  return v6 - v5;
}

unint64_t sub_1D4B69D20(uint64_t a1, uint64_t a2, unsigned int *a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unsigned int v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  char *v53;
  uint64_t v54;
  _OWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _OWORD *v60;
  __int128 *v61;
  __int128 v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  _OWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int *v75;
  unint64_t v76;
  unsigned int v78;
  uint64_t v79;
  char *v80;
  char *v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;

  v5 = (unint64_t)a4;
  v6 = (unint64_t)a4 + a5;
  v7 = *(unsigned int *)(a1 + 24);
  v88 = *(_QWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 272);
  if (v8 >= 6)
    v8 = 6;
  if (v8 <= 4)
    v8 = 4;
  v87 = v8;
  v9 = *a3;
  v10 = a3[1];
  v11 = *(_QWORD *)(a1 + 248);
  v12 = *(char **)v11;
  v13 = *(_QWORD *)(v11 + 8);
  v82 = (_QWORD *)(v88 + v7);
  v76 = v13 + *(unsigned int *)(v11 + 24);
  if ((_DWORD)a4 - ((_DWORD)v88 + (_DWORD)v7) - (_DWORD)v76 + *(_QWORD *)v11)
    v14 = a4;
  else
    v14 = (_QWORD *)((char *)a4 + 1);
  *(_DWORD *)(a1 + 300) = 0;
  v89 = (unint64_t)a4 + a5 - 8;
  if ((unint64_t)v14 < v89)
  {
    v15 = a1;
    v75 = a3;
    v86 = v7 + v13 - (_DWORD)v12;
    v79 = v13 - v86;
    v80 = (char *)(v6 - 32);
    v81 = v12;
    v85 = v13;
    v83 = (unint64_t)a4 + a5;
    while (1)
    {
      v16 = (_DWORD *)((char *)v14 + 1);
      v17 = (_DWORD)v14 - v88 - v9;
      v18 = (v17 + 1);
      v19 = v13 + v18 - v86;
      if (v18 >= v7)
        v19 = v88 + v18;
      if ((v7 - v17 - 5) <= 0xFFFFFFFC && *(_DWORD *)v19 == *v16)
      {
        v20 = v18 >= v7 ? (char *)v6 : v81;
        v21 = sub_1D4B5F19C((_QWORD *)((char *)v14 + 5), (char *)(v19 + 4), v6, v20, v82) + 4;
      }
      else
      {
        v21 = 0;
      }
      v90 = 999999999;
      if (v87 == 6)
        v22 = sub_1D4B7DEA8(v15, v14, v6, &v90);
      else
        v22 = v87 == 5 ? sub_1D4B7DB3C(v15, v14, v6, &v90) : sub_1D4B7D7D4(v15, v14, v6, &v90);
      v23 = v22 <= v21 ? v21 : v22;
      if (v23 >= 4)
        break;
      v24 = (unint64_t)v14 - v5;
      v14 = (_QWORD *)((char *)v14 + (((unint64_t)v14 - v5) >> 8) + 1);
      *(_DWORD *)(v15 + 300) = v24 > 0x7FF;
      v13 = v85;
LABEL_120:
      if ((unint64_t)v14 >= v89)
      {
        a3 = v75;
        goto LABEL_122;
      }
    }
    v78 = v10;
    if (v22 <= v21)
    {
      v25 = 1;
    }
    else
    {
      v16 = v14;
      v25 = v90;
    }
    v26 = v23;
    v27 = v25;
    v28 = v16;
    if ((unint64_t)v14 < v89)
    {
      while (1)
      {
        v28 = (_DWORD *)((char *)v14 + 1);
        v29 = ((_DWORD)v14 + 1 - v88 - v9);
        v30 = v85 + v29 - v86;
        if (v29 >= v7)
          v30 = v88 + v29;
        if ((v7 + ~(_DWORD)v29) < 3)
          break;
        v31 = v83;
        v32 = a1;
        if (*(_DWORD *)v30 != *v28)
          goto LABEL_44;
        v33 = v29 >= v7 ? (char *)v83 : v81;
        v34 = sub_1D4B5F19C((_QWORD *)((char *)v14 + 5), (char *)(v30 + 4), v83, v33, v82);
        if (v34 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_44;
        v35 = v87;
        if (3 * ((int)v34 + 4) > (int)(3 * v23 + __clz(v25) - 30))
        {
          v23 = v34 + 4;
          v25 = 1;
          v16 = (_DWORD *)((char *)v14 + 1);
        }
LABEL_45:
        v90 = 999999999;
        v36 = (_QWORD *)((char *)v14 + 1);
        if (v35 == 6)
        {
          v37 = sub_1D4B7DEA8(v32, v36, v31, &v90);
        }
        else if (v35 == 5)
        {
          v37 = sub_1D4B7DB3C(v32, v36, v31, &v90);
        }
        else
        {
          v37 = sub_1D4B7D7D4(v32, v36, v31, &v90);
        }
        v26 = v37;
        if (v37 >= 4)
        {
          v27 = v90;
          if ((int)(__clz(v90) + 4 * v37 - 31) > (int)(__clz(v25) + 4 * v23 - 27))
            goto LABEL_72;
        }
        if ((unint64_t)v28 >= v89)
          goto LABEL_74;
        v28 = (_DWORD *)((char *)v14 + 2);
        v38 = ((_DWORD)v14 + 2 - v88 - v9);
        v39 = v85 + v38 - v86;
        if (v38 >= v7)
          v39 = v88 + v38;
        if ((v7 + ~(_DWORD)v38) < 3)
        {
          v40 = v83;
          v41 = a1;
LABEL_64:
          v44 = v87;
          goto LABEL_65;
        }
        v40 = v83;
        v41 = a1;
        if (*(_DWORD *)v39 != *v28)
          goto LABEL_64;
        v42 = v38 >= v7 ? (char *)v83 : v81;
        v43 = sub_1D4B5F19C((_QWORD *)((char *)v14 + 6), (char *)(v39 + 4), v83, v42, v82);
        if (v43 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_64;
        v44 = v87;
        if ((int)(__clz(v25) + 4 * v23 - 30) < 4 * ((int)v43 + 4))
        {
          v23 = v43 + 4;
          v25 = 1;
          v16 = (_DWORD *)((char *)v14 + 2);
        }
LABEL_65:
        v90 = 999999999;
        v45 = (_QWORD *)((char *)v14 + 2);
        if (v44 == 6)
        {
          v46 = sub_1D4B7DEA8(v41, v45, v40, &v90);
        }
        else if (v44 == 5)
        {
          v46 = sub_1D4B7DB3C(v41, v45, v40, &v90);
        }
        else
        {
          v46 = sub_1D4B7D7D4(v41, v45, v40, &v90);
        }
        v26 = v46;
        if (v46 < 4 || (v27 = v90, (int)(__clz(v90) + 4 * v46 - 31) <= (int)(__clz(v25) + 4 * v23 - 24)))
        {
LABEL_74:
          v26 = v23;
          v27 = v25;
          v28 = v16;
          goto LABEL_75;
        }
LABEL_72:
        v14 = v28;
        v16 = v28;
        v25 = v27;
        v23 = v26;
        if ((unint64_t)v28 >= v89)
          goto LABEL_75;
      }
      v31 = v83;
      v32 = a1;
LABEL_44:
      v35 = v87;
      goto LABEL_45;
    }
LABEL_75:
    if (v27 <= 3)
    {
      v53 = v80;
    }
    else
    {
      v47 = v88;
      v48 = v88 + v7;
      if (v7 > (int)v28 - ((int)v27 + (int)v88) + 3)
      {
        v48 = v76;
        v47 = v79;
      }
      if ((unint64_t)v28 > v5 && v47 + (unint64_t)((_DWORD)v28 - (v27 + v88) + 3) > v48)
      {
        v49 = (unsigned __int8 *)(v47 + ((_DWORD)v28 - (v27 + v88) + 3) - 1);
        v50 = (unsigned __int8 *)v28 - 1;
        while (*v50 == *v49)
        {
          ++v26;
          v51 = v50 - 1;
          if ((unint64_t)v50 > v5)
          {
            --v50;
            if ((unint64_t)v49-- > v48)
              continue;
          }
          v28 = v51 + 1;
          goto LABEL_87;
        }
        v28 = v50 + 1;
      }
LABEL_87:
      v53 = v80;
      v78 = v9;
      v9 = (v27 - 3);
    }
    v54 = (uint64_t)v28 - v5;
    v55 = *(_OWORD **)(a2 + 24);
    if (v28 <= (_DWORD *)v53)
    {
      *v55 = *(_OWORD *)v5;
      v58 = *(_QWORD *)(a2 + 24);
      if ((unint64_t)v54 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v58 + v54;
        v56 = *(_QWORD *)(a2 + 8);
        goto LABEL_98;
      }
      *(_OWORD *)(v58 + 16) = *(_OWORD *)(v5 + 16);
      if (v54 >= 33)
      {
        v59 = v58 + v54;
        v60 = (_OWORD *)(v58 + 32);
        v61 = (__int128 *)(v5 + 48);
        do
        {
          *v60 = *(v61 - 1);
          v62 = *v61;
          v61 += 2;
          v60[1] = v62;
          v60 += 2;
        }
        while ((unint64_t)v60 < v59);
      }
    }
    else
    {
      sub_1D4B56E1C(v55, (char *)v5, (unint64_t)v28, v53);
    }
    *(_QWORD *)(a2 + 24) += v54;
    v56 = *(_QWORD *)(a2 + 8);
    if ((unint64_t)v54 >= 0x10000)
    {
      v57 = (unint64_t)(v56 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v57;
    }
LABEL_98:
    *(_WORD *)(v56 + 4) = v54;
    *(_DWORD *)v56 = v27;
    if (v26 - 3 >= 0x10000)
    {
      v63 = (unint64_t)(v56 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v63;
    }
    *(_WORD *)(v56 + 6) = v26 - 3;
    *(_QWORD *)(a2 + 8) = v56 + 8;
    v13 = v85;
    if (*(_DWORD *)(a1 + 300))
      *(_DWORD *)(a1 + 300) = 0;
    v5 = (unint64_t)v28 + v26;
    if ((unint64_t)v28 + v26 <= v89)
    {
      v64 = v9;
      v65 = v78;
      v6 = v83;
      v15 = a1;
      while (1)
      {
        v9 = v65;
        v65 = v64;
        v66 = v88;
        v67 = (v5 - v88 - v9);
        if (v67 < v7)
          v66 = v79;
        if ((v7 + ~(_DWORD)v67) < 3)
          break;
        v68 = v66 + v67;
        if (*(_DWORD *)v68 != *(_DWORD *)v5)
          break;
        if (v67 >= v7)
          v69 = (char *)v83;
        else
          v69 = v81;
        v70 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v68 + 4), v83, v69, v82);
        v71 = *(_OWORD **)(a2 + 24);
        if (v5 <= (unint64_t)v80)
          *v71 = *(_OWORD *)v5;
        else
          sub_1D4B56E1C(v71, (char *)v5, v5, v80);
        v72 = *(_QWORD *)(a2 + 8);
        *(_WORD *)(v72 + 4) = 0;
        *(_DWORD *)v72 = 1;
        if (v70 + 1 >= 0x10000)
        {
          v73 = (unint64_t)(v72 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v73;
        }
        *(_WORD *)(v72 + 6) = v70 + 1;
        v5 += v70 + 4;
        *(_QWORD *)(a2 + 8) = v72 + 8;
        v64 = v9;
        v10 = v65;
        v14 = (_QWORD *)v5;
        if (v5 > v89)
          goto LABEL_120;
      }
      v10 = v9;
      v9 = v64;
      v14 = (_QWORD *)v5;
    }
    else
    {
      v14 = (_QWORD *)((char *)v28 + v26);
      v6 = v83;
      v15 = a1;
      v10 = v78;
    }
    goto LABEL_120;
  }
LABEL_122:
  *a3 = v9;
  a3[1] = v10;
  return v6 - v5;
}

unint64_t sub_1D4B6A46C(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _OWORD *v52;
  __int128 *v53;
  __int128 v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  _OWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int *v67;
  int v68;
  int v69;
  int v70;
  unsigned __int8 *v71;
  unint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v81;
  unsigned int v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86[4];

  v5 = a4;
  v6 = a4 + a5;
  v7 = a4 + a5 - 8;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 272);
  if (v10 >= 6)
    v10 = 6;
  if (v10 <= 4)
    v10 = 4;
  v82 = v10;
  v11 = *a3;
  v74 = a3[1];
  v12 = *(_QWORD *)(a1 + 248);
  v13 = *(_QWORD *)(v12 + 8);
  v14 = *(char **)v12;
  v83 = (unsigned __int8 *)(v8 + v9);
  v71 = (unsigned __int8 *)(v13 + *(unsigned int *)(v12 + 24));
  if ((_DWORD)a4 - ((_DWORD)v8 + (_DWORD)v9) - (_DWORD)v71 + *(_QWORD *)v12)
    v15 = a4;
  else
    v15 = a4 + 1;
  *(_DWORD *)(a1 + 300) = 0;
  if (v15 < v7)
  {
    v17 = a1;
    v67 = a3;
    v73 = v9 + v13 - (_DWORD)v14;
    v76 = v13 - v73;
    v77 = (char *)(v6 - 32);
    v69 = -(int)v8;
    v70 = v9 + v8 - 2;
    v78 = v14;
    v68 = (_DWORD)v14 - v9 - v13 - v8 + 1;
    v72 = a4 + a5 - 8;
    v84 = v8;
    v81 = v13;
    v79 = a4 + a5;
    v85 = v9;
    while (1)
    {
      v18 = v15 - v8 - v11;
      v19 = (v18 + 1);
      v20 = v13 + v19 - v73;
      if (v19 >= v9)
        v20 = v8 + v19;
      if ((v9 - v18 - 5) <= 0xFFFFFFFC && *(_DWORD *)v20 == *(_DWORD *)(v15 + 1))
      {
        v21 = v19 >= v85 ? (char *)v6 : v78;
        v22 = sub_1D4B5F19C((_QWORD *)(v15 + 5), (char *)(v20 + 4), v6, v21, v83) + 4;
      }
      else
      {
        v22 = 0;
      }
      *(_QWORD *)v86 = 999999999;
      if (v82 == 6)
        v23 = sub_1D4B7DEA8(v17, (_QWORD *)v15, v6, v86);
      else
        v23 = v82 == 5 ? sub_1D4B7DB3C(v17, (_QWORD *)v15, v6, v86) : sub_1D4B7D7D4(v17, (_DWORD *)v15, v6, v86);
      v24 = v23 <= v22 ? v22 : v23;
      if (v24 >= 4)
        break;
      v25 = v15 - v5;
      v15 += ((v15 - v5) >> 8) + 1;
      *(_DWORD *)(v17 + 300) = v25 > 0x7FF;
      v8 = v84;
      LODWORD(v9) = v85;
      v26 = v74;
LABEL_101:
      v74 = v26;
      v13 = v81;
      if (v15 >= v7)
      {
        a3 = v67;
        goto LABEL_103;
      }
    }
    v27 = v7;
    if (v23 <= v22)
      v28 = v15 + 1;
    else
      v28 = v15;
    if (v23 <= v22)
      v29 = 1;
    else
      v29 = *(_QWORD *)v86;
    if (v15 < v27)
    {
      v30 = 0;
      v75 = v27 - v15;
      v31 = v70 + v11 - v15;
      while (1)
      {
        v32 = (_DWORD *)(v15 + v30 + 1);
        v33 = (v69 + v15 - v11 + v30 + 1);
        v34 = v81 + (v68 + v15 - v11 + v30);
        if (v33 >= v85)
          v34 = v84 + v33;
        if (v31 >= 3 && *(_DWORD *)v34 == *v32)
        {
          v35 = v33 >= v85 ? (char *)v79 : v78;
          v36 = sub_1D4B5F19C((_QWORD *)(v15 + v30 + 5), (char *)(v34 + 4), v79, v35, v83);
          if (v36 <= 0xFFFFFFFFFFFFFFFBLL && 3 * ((int)v36 + 4) > (int)(3 * v24 + __clz(v29) - 30))
          {
            v24 = v36 + 4;
            v29 = 1;
            v28 = v15 + v30 + 1;
          }
        }
        *(_QWORD *)v86 = 999999999;
        if (v82 == 6)
          v37 = sub_1D4B7DEA8(a1, (_QWORD *)(v15 + v30 + 1), v79, v86);
        else
          v37 = v82 == 5
              ? sub_1D4B7DB3C(a1, (_QWORD *)(v15 + v30 + 1), v79, v86)
              : sub_1D4B7D7D4(a1, (_DWORD *)(v15 + v30 + 1), v79, v86);
        if (v37 < 4 || (int)(__clz(v86[0]) + 4 * v37 - 31) <= (int)(__clz(v29) + 4 * v24 - 27))
          break;
        ++v30;
        --v31;
        v28 = (unint64_t)v32;
        v29 = *(_QWORD *)v86;
        v24 = v37;
        if (v75 == v30)
        {
          v24 = v37;
          v29 = *(_QWORD *)v86;
          v28 = v72;
          break;
        }
      }
      v6 = v79;
    }
    v38 = v84;
    v39 = v77;
    v40 = v74;
    if (v29 > 3)
    {
      v41 = v83;
      if (v85 > (int)v28 - ((int)v29 + (int)v84) + 3)
      {
        v41 = v71;
        v38 = v76;
      }
      if (v28 > v5 && v38 + (unint64_t)(v28 - (v29 + v84) + 3) > (unint64_t)v41)
      {
        v42 = (unsigned __int8 *)(v38 + (v28 - (v29 + v84) + 3) - 1);
        v43 = (unsigned __int8 *)(v28 - 1);
        while (*v43 == *v42)
        {
          ++v24;
          v44 = v43 - 1;
          if ((unint64_t)v43 > v5)
          {
            --v43;
            if (v42-- > v41)
              continue;
          }
          v28 = (unint64_t)(v44 + 1);
          goto LABEL_68;
        }
        v28 = (unint64_t)(v43 + 1);
      }
LABEL_68:
      v39 = v77;
      v40 = v11;
      v11 = (v29 - 3);
    }
    v46 = v28 - v5;
    v47 = *(_OWORD **)(a2 + 24);
    if (v28 <= (unint64_t)v39)
    {
      *v47 = *(_OWORD *)v5;
      v50 = *(_QWORD *)(a2 + 24);
      if ((unint64_t)v46 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v50 + v46;
        v48 = *(_QWORD *)(a2 + 8);
        goto LABEL_79;
      }
      *(_OWORD *)(v50 + 16) = *(_OWORD *)(v5 + 16);
      if (v46 >= 33)
      {
        v51 = v50 + v46;
        v52 = (_OWORD *)(v50 + 32);
        v53 = (__int128 *)(v5 + 48);
        do
        {
          *v52 = *(v53 - 1);
          v54 = *v53;
          v53 += 2;
          v52[1] = v54;
          v52 += 2;
        }
        while ((unint64_t)v52 < v51);
      }
    }
    else
    {
      sub_1D4B56E1C(v47, (char *)v5, v28, v39);
    }
    *(_QWORD *)(a2 + 24) += v46;
    v48 = *(_QWORD *)(a2 + 8);
    if ((unint64_t)v46 >= 0x10000)
    {
      v49 = (unint64_t)(v48 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v49;
    }
LABEL_79:
    *(_WORD *)(v48 + 4) = v46;
    *(_DWORD *)v48 = v29;
    if (v24 - 3 >= 0x10000)
    {
      v55 = (unint64_t)(v48 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v55;
    }
    *(_WORD *)(v48 + 6) = v24 - 3;
    *(_QWORD *)(a2 + 8) = v48 + 8;
    v8 = v84;
    LODWORD(v9) = v85;
    if (*(_DWORD *)(a1 + 300))
      *(_DWORD *)(a1 + 300) = 0;
    v5 = v28 + v24;
    v7 = v72;
    if (v5 <= v72)
    {
      v56 = v11;
      v57 = v40;
      v17 = a1;
      while (1)
      {
        v11 = v57;
        v57 = v56;
        v58 = (v5 - v84 - v11);
        v59 = v76;
        if (v58 >= v85)
          v59 = v84;
        if (v85 + ~(_DWORD)v58 < 3)
          break;
        v60 = v59 + v58;
        if (*(_DWORD *)v60 != *(_DWORD *)v5)
          break;
        if (v58 >= v85)
          v61 = (char *)v6;
        else
          v61 = v78;
        v62 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v60 + 4), v6, v61, v83);
        v63 = *(_OWORD **)(a2 + 24);
        if (v5 <= (unint64_t)v77)
          *v63 = *(_OWORD *)v5;
        else
          sub_1D4B56E1C(v63, (char *)v5, v5, v77);
        v64 = *(_QWORD *)(a2 + 8);
        *(_WORD *)(v64 + 4) = 0;
        *(_DWORD *)v64 = 1;
        if (v62 + 1 >= 0x10000)
        {
          v65 = (unint64_t)(v64 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v65;
        }
        *(_WORD *)(v64 + 6) = v62 + 1;
        v5 += v62 + 4;
        *(_QWORD *)(a2 + 8) = v64 + 8;
        v56 = v11;
        v26 = v57;
        v15 = v5;
        if (v5 > v72)
          goto LABEL_101;
      }
      v26 = v11;
      v11 = v56;
      v15 = v5;
    }
    else
    {
      v15 = v5;
      v26 = v40;
      v17 = a1;
    }
    goto LABEL_101;
  }
LABEL_103:
  *a3 = v11;
  a3[1] = v74;
  return v6 - v5;
}

unint64_t sub_1D4B6AAF8(uint64_t a1, uint64_t a2, unsigned int *a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  char *v32;
  uint64_t v33;
  _OWORD *v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _OWORD *v40;
  __int128 *v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int *v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;

  v5 = (unint64_t)a4;
  v6 = (unint64_t)a4 + a5;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 272);
  if (v9 >= 6)
    v9 = 6;
  if (v9 <= 4)
    v9 = 4;
  v59 = v9;
  v10 = *a3;
  v11 = a3[1];
  v12 = *(_QWORD *)(a1 + 248);
  v14 = *(char **)v12;
  v13 = *(_QWORD *)(v12 + 8);
  v65 = (_QWORD *)(v7 + v8);
  v58 = v13 + *(unsigned int *)(v12 + 24);
  if ((_DWORD)a4 - ((_DWORD)v7 + (_DWORD)v8) - (_DWORD)v58 + *(_QWORD *)v12)
    v15 = a4;
  else
    v15 = (_QWORD *)((char *)a4 + 1);
  *(_DWORD *)(a1 + 300) = 0;
  v67 = (unint64_t)a4 + a5 - 8;
  if ((unint64_t)v15 < v67)
  {
    v63 = v14;
    v57 = a3;
    v60 = v8 + v13 - (_DWORD)v14;
    v64 = v13 - v60;
    v66 = (char *)(v6 - 32);
    v61 = v13;
    while (1)
    {
      v17 = (_DWORD *)((char *)v15 + 1);
      v18 = (_DWORD)v15 - v7 - v10;
      v19 = (v18 + 1);
      v20 = v13 + v19 - v60;
      if (v19 >= v8)
        v20 = v7 + v19;
      if ((v8 - v18 - 5) <= 0xFFFFFFFC && *(_DWORD *)v20 == *v17)
        break;
      v68 = 999999999;
      if (v59 == 6)
      {
        v24 = sub_1D4B7DEA8(a1, v15, v6, &v68);
      }
      else if (v59 == 5)
      {
        v24 = sub_1D4B7DB3C(a1, v15, v6, &v68);
      }
      else
      {
        v24 = sub_1D4B7D7D4(a1, v15, v6, &v68);
      }
      v22 = v24;
      if (v24)
        v23 = v68;
      else
        v23 = 1;
      if (v24)
        v17 = v15;
      if (v24 > 3)
      {
        if (v23 >= 4)
        {
          v26 = v7 + v8;
          if (v8 > (int)v17 - (int)v7 - (int)v23 + 3)
            v26 = v58;
          v27 = v64;
          if (v8 <= (int)v17 - (int)v7 - (int)v23 + 3)
            v27 = v7;
          if ((unint64_t)v17 > v5 && v27 + (unint64_t)((_DWORD)v17 - v7 - v23 + 3) > v26)
          {
            v28 = (unsigned __int8 *)(v27 + ((_DWORD)v17 - v7 - v23 + 3) - 1);
            v29 = (unsigned __int8 *)v17 - 1;
            while (*v29 == *v28)
            {
              ++v22;
              v30 = v29 - 1;
              if ((unint64_t)v29 > v5)
              {
                --v29;
                if ((unint64_t)v28-- > v26)
                  continue;
              }
              v17 = v30 + 1;
              goto LABEL_44;
            }
            v17 = v29 + 1;
          }
LABEL_44:
          v32 = (char *)(v6 - 32);
          v11 = v10;
          v10 = (v23 - 3);
LABEL_45:
          v33 = (uint64_t)v17 - v5;
          v34 = *(_OWORD **)(a2 + 24);
          if (v17 > (_DWORD *)v32)
          {
            v35 = (char *)v5;
            v36 = v23;
            sub_1D4B56E1C(v34, v35, (unint64_t)v17, v32);
            LODWORD(v23) = v36;
            v37 = a1;
            goto LABEL_51;
          }
          *v34 = *(_OWORD *)v5;
          v38 = *(_QWORD *)(a2 + 24);
          if ((unint64_t)v33 <= 0x10)
          {
            *(_QWORD *)(a2 + 24) = v38 + v33;
            v43 = *(_QWORD *)(a2 + 8);
            v37 = a1;
          }
          else
          {
            *(_OWORD *)(v38 + 16) = *(_OWORD *)(v5 + 16);
            v37 = a1;
            if (v33 >= 33)
            {
              v39 = v38 + v33;
              v40 = (_OWORD *)(v38 + 32);
              v41 = (__int128 *)(v5 + 48);
              do
              {
                *v40 = *(v41 - 1);
                v42 = *v41;
                v41 += 2;
                v40[1] = v42;
                v40 += 2;
              }
              while ((unint64_t)v40 < v39);
            }
LABEL_51:
            *(_QWORD *)(a2 + 24) += v33;
            v43 = *(_QWORD *)(a2 + 8);
            if ((unint64_t)v33 >= 0x10000)
            {
              v44 = (unint64_t)(v43 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v44;
            }
          }
          *(_WORD *)(v43 + 4) = v33;
          *(_DWORD *)v43 = v23;
          if (v22 - 3 >= 0x10000)
          {
            v45 = (unint64_t)(v43 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v45;
          }
          *(_WORD *)(v43 + 6) = v22 - 3;
          *(_QWORD *)(a2 + 8) = v43 + 8;
          if (*(_DWORD *)(v37 + 300))
            *(_DWORD *)(v37 + 300) = 0;
          v5 = (unint64_t)v17 + v22;
          if ((unint64_t)v17 + v22 <= v67)
          {
            v46 = v10;
            v47 = v11;
            while (1)
            {
              v10 = v47;
              v47 = v46;
              v48 = (v5 - v7 - v10);
              v49 = v64;
              if (v48 >= v8)
                v49 = v7;
              if ((v8 + ~(_DWORD)v48) < 3)
                break;
              v50 = v49 + v48;
              if (*(_DWORD *)v50 != *(_DWORD *)v5)
                break;
              if (v48 >= v8)
                v51 = (char *)v6;
              else
                v51 = v63;
              v52 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v50 + 4), v6, v51, v65);
              v53 = *(_OWORD **)(a2 + 24);
              if (v5 <= (unint64_t)v66)
                *v53 = *(_OWORD *)v5;
              else
                sub_1D4B56E1C(v53, (char *)v5, v5, v66);
              v54 = *(_QWORD *)(a2 + 8);
              *(_WORD *)(v54 + 4) = 0;
              *(_DWORD *)v54 = 1;
              if (v52 + 1 >= 0x10000)
              {
                v55 = (unint64_t)(v54 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v55;
              }
              *(_WORD *)(v54 + 6) = v52 + 1;
              v5 += v52 + 4;
              *(_QWORD *)(a2 + 8) = v54 + 8;
              v46 = v10;
              v11 = v47;
              v15 = (_QWORD *)v5;
              if (v5 > v67)
                goto LABEL_76;
            }
            v11 = v10;
            v10 = v46;
          }
          v15 = (_QWORD *)v5;
          goto LABEL_76;
        }
LABEL_42:
        v32 = (char *)(v6 - 32);
        goto LABEL_45;
      }
      v25 = (unint64_t)v15 - v5;
      v15 = (_QWORD *)((char *)v15 + (((unint64_t)v15 - v5) >> 8) + 1);
      *(_DWORD *)(a1 + 300) = v25 > 0x7FF;
LABEL_76:
      v13 = v61;
      if ((unint64_t)v15 >= v67)
      {
        a3 = v57;
        goto LABEL_78;
      }
    }
    if (v19 >= v8)
      v21 = (char *)v6;
    else
      v21 = v63;
    v22 = sub_1D4B5F19C((_QWORD *)((char *)v15 + 5), (char *)(v20 + 4), v6, v21, v65) + 4;
    LODWORD(v23) = 1;
    goto LABEL_42;
  }
LABEL_78:
  *a3 = v10;
  a3[1] = v11;
  return v6 - v5;
}

unint64_t sub_1D4B6AFB0(uint64_t a1, uint64_t a2, unsigned int *a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unsigned int v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  char *v53;
  uint64_t v54;
  _OWORD *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  _OWORD *v60;
  __int128 *v61;
  __int128 v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  _OWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int *v75;
  unint64_t v76;
  unsigned int v78;
  uint64_t v79;
  char *v80;
  char *v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;

  v5 = (unint64_t)a4;
  v6 = (unint64_t)a4 + a5;
  v7 = *(unsigned int *)(a1 + 24);
  v88 = *(_QWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 272);
  if (v8 >= 6)
    v8 = 6;
  if (v8 <= 4)
    v8 = 4;
  v87 = v8;
  v9 = *a3;
  v10 = a3[1];
  v11 = *(_QWORD *)(a1 + 248);
  v12 = *(char **)v11;
  v13 = *(_QWORD *)(v11 + 8);
  v82 = (_QWORD *)(v88 + v7);
  v76 = v13 + *(unsigned int *)(v11 + 24);
  if ((_DWORD)a4 - ((_DWORD)v88 + (_DWORD)v7) - (_DWORD)v76 + *(_QWORD *)v11)
    v14 = a4;
  else
    v14 = (_QWORD *)((char *)a4 + 1);
  *(_DWORD *)(a1 + 300) = 0;
  v89 = (unint64_t)a4 + a5 - 8;
  if ((unint64_t)v14 < v89)
  {
    v15 = a1;
    v75 = a3;
    v86 = v7 + v13 - (_DWORD)v12;
    v79 = v13 - v86;
    v80 = (char *)(v6 - 32);
    v81 = v12;
    v85 = v13;
    v83 = (unint64_t)a4 + a5;
    while (1)
    {
      v16 = (_DWORD *)((char *)v14 + 1);
      v17 = (_DWORD)v14 - v88 - v9;
      v18 = (v17 + 1);
      v19 = v13 + v18 - v86;
      if (v18 >= v7)
        v19 = v88 + v18;
      if ((v7 - v17 - 5) <= 0xFFFFFFFC && *(_DWORD *)v19 == *v16)
      {
        v20 = v18 >= v7 ? (char *)v6 : v81;
        v21 = sub_1D4B5F19C((_QWORD *)((char *)v14 + 5), (char *)(v19 + 4), v6, v20, v82) + 4;
      }
      else
      {
        v21 = 0;
      }
      v90 = 999999999;
      if (v87 == 6)
        v22 = sub_1D4B8291C(v15, v14, v6, &v90);
      else
        v22 = v87 == 5 ? sub_1D4B824C4(v15, v14, v6, &v90) : sub_1D4B82060(v15, v14, v6, &v90);
      v23 = v22 <= v21 ? v21 : v22;
      if (v23 >= 4)
        break;
      v24 = (unint64_t)v14 - v5;
      v14 = (_QWORD *)((char *)v14 + (((unint64_t)v14 - v5) >> 8) + 1);
      *(_DWORD *)(v15 + 300) = v24 > 0x7FF;
      v13 = v85;
LABEL_120:
      if ((unint64_t)v14 >= v89)
      {
        a3 = v75;
        goto LABEL_122;
      }
    }
    v78 = v10;
    if (v22 <= v21)
    {
      v25 = 1;
    }
    else
    {
      v16 = v14;
      v25 = v90;
    }
    v26 = v23;
    v27 = v25;
    v28 = v16;
    if ((unint64_t)v14 < v89)
    {
      while (1)
      {
        v28 = (_DWORD *)((char *)v14 + 1);
        v29 = ((_DWORD)v14 + 1 - v88 - v9);
        v30 = v85 + v29 - v86;
        if (v29 >= v7)
          v30 = v88 + v29;
        if ((v7 + ~(_DWORD)v29) < 3)
          break;
        v31 = v83;
        v32 = a1;
        if (*(_DWORD *)v30 != *v28)
          goto LABEL_44;
        v33 = v29 >= v7 ? (char *)v83 : v81;
        v34 = sub_1D4B5F19C((_QWORD *)((char *)v14 + 5), (char *)(v30 + 4), v83, v33, v82);
        if (v34 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_44;
        v35 = v87;
        if (3 * ((int)v34 + 4) > (int)(3 * v23 + __clz(v25) - 30))
        {
          v23 = v34 + 4;
          v25 = 1;
          v16 = (_DWORD *)((char *)v14 + 1);
        }
LABEL_45:
        v90 = 999999999;
        v36 = (_QWORD *)((char *)v14 + 1);
        if (v35 == 6)
        {
          v37 = sub_1D4B8291C(v32, v36, v31, &v90);
        }
        else if (v35 == 5)
        {
          v37 = sub_1D4B824C4(v32, v36, v31, &v90);
        }
        else
        {
          v37 = sub_1D4B82060(v32, v36, v31, &v90);
        }
        v26 = v37;
        if (v37 >= 4)
        {
          v27 = v90;
          if ((int)(__clz(v90) + 4 * v37 - 31) > (int)(__clz(v25) + 4 * v23 - 27))
            goto LABEL_72;
        }
        if ((unint64_t)v28 >= v89)
          goto LABEL_74;
        v28 = (_DWORD *)((char *)v14 + 2);
        v38 = ((_DWORD)v14 + 2 - v88 - v9);
        v39 = v85 + v38 - v86;
        if (v38 >= v7)
          v39 = v88 + v38;
        if ((v7 + ~(_DWORD)v38) < 3)
        {
          v40 = v83;
          v41 = a1;
LABEL_64:
          v44 = v87;
          goto LABEL_65;
        }
        v40 = v83;
        v41 = a1;
        if (*(_DWORD *)v39 != *v28)
          goto LABEL_64;
        v42 = v38 >= v7 ? (char *)v83 : v81;
        v43 = sub_1D4B5F19C((_QWORD *)((char *)v14 + 6), (char *)(v39 + 4), v83, v42, v82);
        if (v43 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_64;
        v44 = v87;
        if ((int)(__clz(v25) + 4 * v23 - 30) < 4 * ((int)v43 + 4))
        {
          v23 = v43 + 4;
          v25 = 1;
          v16 = (_DWORD *)((char *)v14 + 2);
        }
LABEL_65:
        v90 = 999999999;
        v45 = (_QWORD *)((char *)v14 + 2);
        if (v44 == 6)
        {
          v46 = sub_1D4B8291C(v41, v45, v40, &v90);
        }
        else if (v44 == 5)
        {
          v46 = sub_1D4B824C4(v41, v45, v40, &v90);
        }
        else
        {
          v46 = sub_1D4B82060(v41, v45, v40, &v90);
        }
        v26 = v46;
        if (v46 < 4 || (v27 = v90, (int)(__clz(v90) + 4 * v46 - 31) <= (int)(__clz(v25) + 4 * v23 - 24)))
        {
LABEL_74:
          v26 = v23;
          v27 = v25;
          v28 = v16;
          goto LABEL_75;
        }
LABEL_72:
        v14 = v28;
        v16 = v28;
        v25 = v27;
        v23 = v26;
        if ((unint64_t)v28 >= v89)
          goto LABEL_75;
      }
      v31 = v83;
      v32 = a1;
LABEL_44:
      v35 = v87;
      goto LABEL_45;
    }
LABEL_75:
    if (v27 <= 3)
    {
      v53 = v80;
    }
    else
    {
      v47 = v88;
      v48 = v88 + v7;
      if (v7 > (int)v28 - ((int)v27 + (int)v88) + 3)
      {
        v48 = v76;
        v47 = v79;
      }
      if ((unint64_t)v28 > v5 && v47 + (unint64_t)((_DWORD)v28 - (v27 + v88) + 3) > v48)
      {
        v49 = (unsigned __int8 *)(v47 + ((_DWORD)v28 - (v27 + v88) + 3) - 1);
        v50 = (unsigned __int8 *)v28 - 1;
        while (*v50 == *v49)
        {
          ++v26;
          v51 = v50 - 1;
          if ((unint64_t)v50 > v5)
          {
            --v50;
            if ((unint64_t)v49-- > v48)
              continue;
          }
          v28 = v51 + 1;
          goto LABEL_87;
        }
        v28 = v50 + 1;
      }
LABEL_87:
      v53 = v80;
      v78 = v9;
      v9 = (v27 - 3);
    }
    v54 = (uint64_t)v28 - v5;
    v55 = *(_OWORD **)(a2 + 24);
    if (v28 <= (_DWORD *)v53)
    {
      *v55 = *(_OWORD *)v5;
      v58 = *(_QWORD *)(a2 + 24);
      if ((unint64_t)v54 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v58 + v54;
        v56 = *(_QWORD *)(a2 + 8);
        goto LABEL_98;
      }
      *(_OWORD *)(v58 + 16) = *(_OWORD *)(v5 + 16);
      if (v54 >= 33)
      {
        v59 = v58 + v54;
        v60 = (_OWORD *)(v58 + 32);
        v61 = (__int128 *)(v5 + 48);
        do
        {
          *v60 = *(v61 - 1);
          v62 = *v61;
          v61 += 2;
          v60[1] = v62;
          v60 += 2;
        }
        while ((unint64_t)v60 < v59);
      }
    }
    else
    {
      sub_1D4B56E1C(v55, (char *)v5, (unint64_t)v28, v53);
    }
    *(_QWORD *)(a2 + 24) += v54;
    v56 = *(_QWORD *)(a2 + 8);
    if ((unint64_t)v54 >= 0x10000)
    {
      v57 = (unint64_t)(v56 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v57;
    }
LABEL_98:
    *(_WORD *)(v56 + 4) = v54;
    *(_DWORD *)v56 = v27;
    if (v26 - 3 >= 0x10000)
    {
      v63 = (unint64_t)(v56 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v63;
    }
    *(_WORD *)(v56 + 6) = v26 - 3;
    *(_QWORD *)(a2 + 8) = v56 + 8;
    v13 = v85;
    if (*(_DWORD *)(a1 + 300))
      *(_DWORD *)(a1 + 300) = 0;
    v5 = (unint64_t)v28 + v26;
    if ((unint64_t)v28 + v26 <= v89)
    {
      v64 = v9;
      v65 = v78;
      v6 = v83;
      v15 = a1;
      while (1)
      {
        v9 = v65;
        v65 = v64;
        v66 = v88;
        v67 = (v5 - v88 - v9);
        if (v67 < v7)
          v66 = v79;
        if ((v7 + ~(_DWORD)v67) < 3)
          break;
        v68 = v66 + v67;
        if (*(_DWORD *)v68 != *(_DWORD *)v5)
          break;
        if (v67 >= v7)
          v69 = (char *)v83;
        else
          v69 = v81;
        v70 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v68 + 4), v83, v69, v82);
        v71 = *(_OWORD **)(a2 + 24);
        if (v5 <= (unint64_t)v80)
          *v71 = *(_OWORD *)v5;
        else
          sub_1D4B56E1C(v71, (char *)v5, v5, v80);
        v72 = *(_QWORD *)(a2 + 8);
        *(_WORD *)(v72 + 4) = 0;
        *(_DWORD *)v72 = 1;
        if (v70 + 1 >= 0x10000)
        {
          v73 = (unint64_t)(v72 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v73;
        }
        *(_WORD *)(v72 + 6) = v70 + 1;
        v5 += v70 + 4;
        *(_QWORD *)(a2 + 8) = v72 + 8;
        v64 = v9;
        v10 = v65;
        v14 = (_QWORD *)v5;
        if (v5 > v89)
          goto LABEL_120;
      }
      v10 = v9;
      v9 = v64;
      v14 = (_QWORD *)v5;
    }
    else
    {
      v14 = (_QWORD *)((char *)v28 + v26);
      v6 = v83;
      v15 = a1;
      v10 = v78;
    }
    goto LABEL_120;
  }
LABEL_122:
  *a3 = v9;
  a3[1] = v10;
  return v6 - v5;
}

unint64_t sub_1D4B6B6FC(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _OWORD *v52;
  __int128 *v53;
  __int128 v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  _OWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int *v67;
  int v68;
  int v69;
  int v70;
  unsigned __int8 *v71;
  unint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v81;
  unsigned int v82;
  unsigned __int8 *v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86[4];

  v5 = a4;
  v6 = a4 + a5;
  v7 = a4 + a5 - 8;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 272);
  if (v10 >= 6)
    v10 = 6;
  if (v10 <= 4)
    v10 = 4;
  v82 = v10;
  v11 = *a3;
  v74 = a3[1];
  v12 = *(_QWORD *)(a1 + 248);
  v13 = *(_QWORD *)(v12 + 8);
  v14 = *(char **)v12;
  v83 = (unsigned __int8 *)(v8 + v9);
  v71 = (unsigned __int8 *)(v13 + *(unsigned int *)(v12 + 24));
  if ((_DWORD)a4 - ((_DWORD)v8 + (_DWORD)v9) - (_DWORD)v71 + *(_QWORD *)v12)
    v15 = a4;
  else
    v15 = a4 + 1;
  *(_DWORD *)(a1 + 300) = 0;
  if (v15 < v7)
  {
    v17 = a1;
    v67 = a3;
    v73 = v9 + v13 - (_DWORD)v14;
    v76 = v13 - v73;
    v77 = (char *)(v6 - 32);
    v69 = -(int)v8;
    v70 = v9 + v8 - 2;
    v78 = v14;
    v68 = (_DWORD)v14 - v9 - v13 - v8 + 1;
    v72 = a4 + a5 - 8;
    v84 = v8;
    v81 = v13;
    v79 = a4 + a5;
    v85 = v9;
    while (1)
    {
      v18 = v15 - v8 - v11;
      v19 = (v18 + 1);
      v20 = v13 + v19 - v73;
      if (v19 >= v9)
        v20 = v8 + v19;
      if ((v9 - v18 - 5) <= 0xFFFFFFFC && *(_DWORD *)v20 == *(_DWORD *)(v15 + 1))
      {
        v21 = v19 >= v85 ? (char *)v6 : v78;
        v22 = sub_1D4B5F19C((_QWORD *)(v15 + 5), (char *)(v20 + 4), v6, v21, v83) + 4;
      }
      else
      {
        v22 = 0;
      }
      *(_QWORD *)v86 = 999999999;
      if (v82 == 6)
        v23 = sub_1D4B8291C(v17, (_QWORD *)v15, v6, v86);
      else
        v23 = v82 == 5 ? sub_1D4B824C4(v17, (_QWORD *)v15, v6, v86) : sub_1D4B82060(v17, (_QWORD *)v15, v6, v86);
      v24 = v23 <= v22 ? v22 : v23;
      if (v24 >= 4)
        break;
      v25 = v15 - v5;
      v15 += ((v15 - v5) >> 8) + 1;
      *(_DWORD *)(v17 + 300) = v25 > 0x7FF;
      v8 = v84;
      LODWORD(v9) = v85;
      v26 = v74;
LABEL_101:
      v74 = v26;
      v13 = v81;
      if (v15 >= v7)
      {
        a3 = v67;
        goto LABEL_103;
      }
    }
    v27 = v7;
    if (v23 <= v22)
      v28 = v15 + 1;
    else
      v28 = v15;
    if (v23 <= v22)
      v29 = 1;
    else
      v29 = *(_QWORD *)v86;
    if (v15 < v27)
    {
      v30 = 0;
      v75 = v27 - v15;
      v31 = v70 + v11 - v15;
      while (1)
      {
        v32 = (_DWORD *)(v15 + v30 + 1);
        v33 = (v69 + v15 - v11 + v30 + 1);
        v34 = v81 + (v68 + v15 - v11 + v30);
        if (v33 >= v85)
          v34 = v84 + v33;
        if (v31 >= 3 && *(_DWORD *)v34 == *v32)
        {
          v35 = v33 >= v85 ? (char *)v79 : v78;
          v36 = sub_1D4B5F19C((_QWORD *)(v15 + v30 + 5), (char *)(v34 + 4), v79, v35, v83);
          if (v36 <= 0xFFFFFFFFFFFFFFFBLL && 3 * ((int)v36 + 4) > (int)(3 * v24 + __clz(v29) - 30))
          {
            v24 = v36 + 4;
            v29 = 1;
            v28 = v15 + v30 + 1;
          }
        }
        *(_QWORD *)v86 = 999999999;
        if (v82 == 6)
          v37 = sub_1D4B8291C(a1, (_QWORD *)(v15 + v30 + 1), v79, v86);
        else
          v37 = v82 == 5
              ? sub_1D4B824C4(a1, (_QWORD *)(v15 + v30 + 1), v79, v86)
              : sub_1D4B82060(a1, (_QWORD *)(v15 + v30 + 1), v79, v86);
        if (v37 < 4 || (int)(__clz(v86[0]) + 4 * v37 - 31) <= (int)(__clz(v29) + 4 * v24 - 27))
          break;
        ++v30;
        --v31;
        v28 = (unint64_t)v32;
        v29 = *(_QWORD *)v86;
        v24 = v37;
        if (v75 == v30)
        {
          v24 = v37;
          v29 = *(_QWORD *)v86;
          v28 = v72;
          break;
        }
      }
      v6 = v79;
    }
    v38 = v84;
    v39 = v77;
    v40 = v74;
    if (v29 > 3)
    {
      v41 = v83;
      if (v85 > (int)v28 - ((int)v29 + (int)v84) + 3)
      {
        v41 = v71;
        v38 = v76;
      }
      if (v28 > v5 && v38 + (unint64_t)(v28 - (v29 + v84) + 3) > (unint64_t)v41)
      {
        v42 = (unsigned __int8 *)(v38 + (v28 - (v29 + v84) + 3) - 1);
        v43 = (unsigned __int8 *)(v28 - 1);
        while (*v43 == *v42)
        {
          ++v24;
          v44 = v43 - 1;
          if ((unint64_t)v43 > v5)
          {
            --v43;
            if (v42-- > v41)
              continue;
          }
          v28 = (unint64_t)(v44 + 1);
          goto LABEL_68;
        }
        v28 = (unint64_t)(v43 + 1);
      }
LABEL_68:
      v39 = v77;
      v40 = v11;
      v11 = (v29 - 3);
    }
    v46 = v28 - v5;
    v47 = *(_OWORD **)(a2 + 24);
    if (v28 <= (unint64_t)v39)
    {
      *v47 = *(_OWORD *)v5;
      v50 = *(_QWORD *)(a2 + 24);
      if ((unint64_t)v46 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v50 + v46;
        v48 = *(_QWORD *)(a2 + 8);
        goto LABEL_79;
      }
      *(_OWORD *)(v50 + 16) = *(_OWORD *)(v5 + 16);
      if (v46 >= 33)
      {
        v51 = v50 + v46;
        v52 = (_OWORD *)(v50 + 32);
        v53 = (__int128 *)(v5 + 48);
        do
        {
          *v52 = *(v53 - 1);
          v54 = *v53;
          v53 += 2;
          v52[1] = v54;
          v52 += 2;
        }
        while ((unint64_t)v52 < v51);
      }
    }
    else
    {
      sub_1D4B56E1C(v47, (char *)v5, v28, v39);
    }
    *(_QWORD *)(a2 + 24) += v46;
    v48 = *(_QWORD *)(a2 + 8);
    if ((unint64_t)v46 >= 0x10000)
    {
      v49 = (unint64_t)(v48 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v49;
    }
LABEL_79:
    *(_WORD *)(v48 + 4) = v46;
    *(_DWORD *)v48 = v29;
    if (v24 - 3 >= 0x10000)
    {
      v55 = (unint64_t)(v48 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v55;
    }
    *(_WORD *)(v48 + 6) = v24 - 3;
    *(_QWORD *)(a2 + 8) = v48 + 8;
    v8 = v84;
    LODWORD(v9) = v85;
    if (*(_DWORD *)(a1 + 300))
      *(_DWORD *)(a1 + 300) = 0;
    v5 = v28 + v24;
    v7 = v72;
    if (v5 <= v72)
    {
      v56 = v11;
      v57 = v40;
      v17 = a1;
      while (1)
      {
        v11 = v57;
        v57 = v56;
        v58 = (v5 - v84 - v11);
        v59 = v76;
        if (v58 >= v85)
          v59 = v84;
        if (v85 + ~(_DWORD)v58 < 3)
          break;
        v60 = v59 + v58;
        if (*(_DWORD *)v60 != *(_DWORD *)v5)
          break;
        if (v58 >= v85)
          v61 = (char *)v6;
        else
          v61 = v78;
        v62 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v60 + 4), v6, v61, v83);
        v63 = *(_OWORD **)(a2 + 24);
        if (v5 <= (unint64_t)v77)
          *v63 = *(_OWORD *)v5;
        else
          sub_1D4B56E1C(v63, (char *)v5, v5, v77);
        v64 = *(_QWORD *)(a2 + 8);
        *(_WORD *)(v64 + 4) = 0;
        *(_DWORD *)v64 = 1;
        if (v62 + 1 >= 0x10000)
        {
          v65 = (unint64_t)(v64 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v65;
        }
        *(_WORD *)(v64 + 6) = v62 + 1;
        v5 += v62 + 4;
        *(_QWORD *)(a2 + 8) = v64 + 8;
        v56 = v11;
        v26 = v57;
        v15 = v5;
        if (v5 > v72)
          goto LABEL_101;
      }
      v26 = v11;
      v11 = v56;
      v15 = v5;
    }
    else
    {
      v15 = v5;
      v26 = v40;
      v17 = a1;
    }
    goto LABEL_101;
  }
LABEL_103:
  *a3 = v11;
  a3[1] = v74;
  return v6 - v5;
}

unint64_t sub_1D4B6BD88(uint64_t a1, uint64_t a2, unsigned int *a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  char *v32;
  uint64_t v33;
  _OWORD *v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _OWORD *v40;
  __int128 *v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int *v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;

  v5 = (unint64_t)a4;
  v6 = (unint64_t)a4 + a5;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 272);
  if (v9 >= 6)
    v9 = 6;
  if (v9 <= 4)
    v9 = 4;
  v59 = v9;
  v10 = *a3;
  v11 = a3[1];
  v12 = *(_QWORD *)(a1 + 248);
  v14 = *(char **)v12;
  v13 = *(_QWORD *)(v12 + 8);
  v65 = (_QWORD *)(v7 + v8);
  v58 = v13 + *(unsigned int *)(v12 + 24);
  if ((_DWORD)a4 - ((_DWORD)v7 + (_DWORD)v8) - (_DWORD)v58 + *(_QWORD *)v12)
    v15 = a4;
  else
    v15 = (_QWORD *)((char *)a4 + 1);
  *(_DWORD *)(a1 + 300) = 0;
  v67 = (unint64_t)a4 + a5 - 8;
  if ((unint64_t)v15 < v67)
  {
    v63 = v14;
    v57 = a3;
    v60 = v8 + v13 - (_DWORD)v14;
    v64 = v13 - v60;
    v66 = (char *)(v6 - 32);
    v61 = v13;
    while (1)
    {
      v17 = (_DWORD *)((char *)v15 + 1);
      v18 = (_DWORD)v15 - v7 - v10;
      v19 = (v18 + 1);
      v20 = v13 + v19 - v60;
      if (v19 >= v8)
        v20 = v7 + v19;
      if ((v8 - v18 - 5) <= 0xFFFFFFFC && *(_DWORD *)v20 == *v17)
        break;
      v68 = 999999999;
      if (v59 == 6)
      {
        v24 = sub_1D4B8291C(a1, v15, v6, &v68);
      }
      else if (v59 == 5)
      {
        v24 = sub_1D4B824C4(a1, v15, v6, &v68);
      }
      else
      {
        v24 = sub_1D4B82060(a1, v15, v6, &v68);
      }
      v22 = v24;
      if (v24)
        v23 = v68;
      else
        v23 = 1;
      if (v24)
        v17 = v15;
      if (v24 > 3)
      {
        if (v23 >= 4)
        {
          v26 = v7 + v8;
          if (v8 > (int)v17 - (int)v7 - (int)v23 + 3)
            v26 = v58;
          v27 = v64;
          if (v8 <= (int)v17 - (int)v7 - (int)v23 + 3)
            v27 = v7;
          if ((unint64_t)v17 > v5 && v27 + (unint64_t)((_DWORD)v17 - v7 - v23 + 3) > v26)
          {
            v28 = (unsigned __int8 *)(v27 + ((_DWORD)v17 - v7 - v23 + 3) - 1);
            v29 = (unsigned __int8 *)v17 - 1;
            while (*v29 == *v28)
            {
              ++v22;
              v30 = v29 - 1;
              if ((unint64_t)v29 > v5)
              {
                --v29;
                if ((unint64_t)v28-- > v26)
                  continue;
              }
              v17 = v30 + 1;
              goto LABEL_44;
            }
            v17 = v29 + 1;
          }
LABEL_44:
          v32 = (char *)(v6 - 32);
          v11 = v10;
          v10 = (v23 - 3);
LABEL_45:
          v33 = (uint64_t)v17 - v5;
          v34 = *(_OWORD **)(a2 + 24);
          if (v17 > (_DWORD *)v32)
          {
            v35 = (char *)v5;
            v36 = v23;
            sub_1D4B56E1C(v34, v35, (unint64_t)v17, v32);
            LODWORD(v23) = v36;
            v37 = a1;
            goto LABEL_51;
          }
          *v34 = *(_OWORD *)v5;
          v38 = *(_QWORD *)(a2 + 24);
          if ((unint64_t)v33 <= 0x10)
          {
            *(_QWORD *)(a2 + 24) = v38 + v33;
            v43 = *(_QWORD *)(a2 + 8);
            v37 = a1;
          }
          else
          {
            *(_OWORD *)(v38 + 16) = *(_OWORD *)(v5 + 16);
            v37 = a1;
            if (v33 >= 33)
            {
              v39 = v38 + v33;
              v40 = (_OWORD *)(v38 + 32);
              v41 = (__int128 *)(v5 + 48);
              do
              {
                *v40 = *(v41 - 1);
                v42 = *v41;
                v41 += 2;
                v40[1] = v42;
                v40 += 2;
              }
              while ((unint64_t)v40 < v39);
            }
LABEL_51:
            *(_QWORD *)(a2 + 24) += v33;
            v43 = *(_QWORD *)(a2 + 8);
            if ((unint64_t)v33 >= 0x10000)
            {
              v44 = (unint64_t)(v43 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v44;
            }
          }
          *(_WORD *)(v43 + 4) = v33;
          *(_DWORD *)v43 = v23;
          if (v22 - 3 >= 0x10000)
          {
            v45 = (unint64_t)(v43 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v45;
          }
          *(_WORD *)(v43 + 6) = v22 - 3;
          *(_QWORD *)(a2 + 8) = v43 + 8;
          if (*(_DWORD *)(v37 + 300))
            *(_DWORD *)(v37 + 300) = 0;
          v5 = (unint64_t)v17 + v22;
          if ((unint64_t)v17 + v22 <= v67)
          {
            v46 = v10;
            v47 = v11;
            while (1)
            {
              v10 = v47;
              v47 = v46;
              v48 = (v5 - v7 - v10);
              v49 = v64;
              if (v48 >= v8)
                v49 = v7;
              if ((v8 + ~(_DWORD)v48) < 3)
                break;
              v50 = v49 + v48;
              if (*(_DWORD *)v50 != *(_DWORD *)v5)
                break;
              if (v48 >= v8)
                v51 = (char *)v6;
              else
                v51 = v63;
              v52 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v50 + 4), v6, v51, v65);
              v53 = *(_OWORD **)(a2 + 24);
              if (v5 <= (unint64_t)v66)
                *v53 = *(_OWORD *)v5;
              else
                sub_1D4B56E1C(v53, (char *)v5, v5, v66);
              v54 = *(_QWORD *)(a2 + 8);
              *(_WORD *)(v54 + 4) = 0;
              *(_DWORD *)v54 = 1;
              if (v52 + 1 >= 0x10000)
              {
                v55 = (unint64_t)(v54 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v55;
              }
              *(_WORD *)(v54 + 6) = v52 + 1;
              v5 += v52 + 4;
              *(_QWORD *)(a2 + 8) = v54 + 8;
              v46 = v10;
              v11 = v47;
              v15 = (_QWORD *)v5;
              if (v5 > v67)
                goto LABEL_76;
            }
            v11 = v10;
            v10 = v46;
          }
          v15 = (_QWORD *)v5;
          goto LABEL_76;
        }
LABEL_42:
        v32 = (char *)(v6 - 32);
        goto LABEL_45;
      }
      v25 = (unint64_t)v15 - v5;
      v15 = (_QWORD *)((char *)v15 + (((unint64_t)v15 - v5) >> 8) + 1);
      *(_DWORD *)(a1 + 300) = v25 > 0x7FF;
LABEL_76:
      v13 = v61;
      if ((unint64_t)v15 >= v67)
      {
        a3 = v57;
        goto LABEL_78;
      }
    }
    if (v19 >= v8)
      v21 = (char *)v6;
    else
      v21 = v63;
    v22 = sub_1D4B5F19C((_QWORD *)((char *)v15 + 5), (char *)(v20 + 4), v6, v21, v65) + 4;
    LODWORD(v23) = 1;
    goto LABEL_42;
  }
LABEL_78:
  *a3 = v10;
  a3[1] = v11;
  return v6 - v5;
}

char *sub_1D4B6C240(uint64_t a1, uint64_t a2, unsigned int *a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  int v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v51;
  unsigned __int16 *v52;
  unsigned int v53;
  unint64_t v54;
  char *v55;
  _DWORD *v56;
  unint64_t v57;
  unint64_t v58;
  unsigned __int16 *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  char *v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned __int16 *v74;
  unint64_t v75;
  int v76;
  char *v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  unsigned __int16 *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  int v98;
  char *v99;
  uint64_t v100;
  _OWORD *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _OWORD *v106;
  __int128 *v107;
  __int128 v108;
  unint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  char v119;
  char v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  _QWORD *v135;
  unint64_t v136;
  unint64_t v137;
  unsigned __int16 *v138;
  _OWORD *v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  BOOL v149;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int *v154;
  unint64_t v155;
  unsigned int v156;
  uint64_t v157;
  char *v158;
  unsigned __int16 *v159;
  unsigned int v160;
  unsigned int v161;
  unsigned __int16 *v162;
  _DWORD *v163;
  int v164;
  uint64_t v165;
  int v166;
  unsigned __int16 *v167;
  unint64_t v168;
  uint64_t v169;

  v5 = (unint64_t)a4;
  v167 = (unsigned __int16 *)((char *)a4 + a5);
  v8 = (unint64_t)a4 + a5 - 16;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unsigned int *)(a1 + 24);
  v11 = *(_DWORD *)(a1 + 272);
  if (v11 >= 6)
    v11 = 6;
  if (v11 <= 4)
    v12 = 4;
  else
    v12 = v11;
  if (*(_DWORD *)(a1 + 268) >= 6u)
    v13 = 6;
  else
    v13 = *(_DWORD *)(a1 + 268);
  if (v13 <= 4)
    v14 = 4;
  else
    v14 = v13;
  v16 = *a3;
  v15 = a3[1];
  v155 = v9 + v10;
  if ((_DWORD)a4 == (_DWORD)v9 + (_DWORD)v10)
    v17 = (_QWORD *)((char *)a4 + 1);
  else
    v17 = a4;
  v18 = (_DWORD)v17 - v9;
  v19 = 1 << *(_DWORD *)(a1 + 256);
  v20 = (_DWORD)v17 - v9 - v19;
  v21 = (int)v17 - (int)v9 - (int)v10 > v19;
  v22 = *(unsigned int *)(a1 + 44);
  if (v21 && *(_DWORD *)(a1 + 40) == 0)
    LODWORD(v10) = v20;
  v24 = v18 - v10;
  if (v15 <= v18 - (int)v10)
    v25 = a3[1];
  else
    v25 = 0;
  v160 = v25;
  if (v16 <= v24)
    v26 = v16;
  else
    v26 = 0;
  *(_DWORD *)(a1 + 300) = 0;
  v27 = v8 - (v9 + v22);
  if ((v27 + 1) < 8)
    v28 = v27 + 1;
  else
    v28 = 8;
  v168 = v8;
  if (v8 >= v9 + v22)
    v29 = v28;
  else
    v29 = 0;
  v30 = (v29 + v22);
  if (v22 < v30)
  {
    v31 = *(_QWORD *)(a1 + 112);
    v32 = *(_QWORD *)(a1 + 56);
    v33 = *(_DWORD *)(a1 + 52);
    v34 = *(_QWORD *)(a1 + 96);
    v35 = 56 - v33;
    v36 = 24 - v33;
    do
    {
      if (v12 == 5)
      {
        v37 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v22);
      }
      else
      {
        if (v12 != 6)
        {
          LODWORD(v38) = ((-1640531535 * *(_DWORD *)(v9 + v22)) ^ v34) >> v36;
          goto LABEL_40;
        }
        v37 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v22);
      }
      v38 = (v37 ^ v34) >> v35;
LABEL_40:
      v39 = v38 >> 8 << v14;
      _X3 = v31 + 4 * v39;
      __asm { PRFM            #0, [X3] }
      if (v13 > 4)
      {
        __asm { PRFM            #0, [X3,#0x40] }
        _X1 = v32 + v39;
        __asm { PRFM            #0, [X1] }
        if (v14 == 6)
          __asm { PRFM            #0, [X1,#0x20] }
      }
      else
      {
        _X1 = v32 + v39;
        __asm { PRFM            #0, [X1] }
      }
      *(_DWORD *)(a1 + 4 * (v22++ & 7) + 64) = v38;
    }
    while (v30 != v22);
  }
  if ((unint64_t)v17 >= v8)
    goto LABEL_278;
  v151 = v24;
  v152 = v16;
  v156 = v13;
  v164 = v12;
  v153 = v15;
  v157 = v9;
  v154 = a3;
  v51 = (unint64_t)v167 - 7;
  v52 = (unsigned __int16 *)((char *)v167 - 3);
  v162 = (unsigned __int16 *)((char *)v167 - 1);
  v166 = v14;
  v53 = v160;
  v165 = a1;
  v158 = (char *)(v167 - 16);
  v159 = (unsigned __int16 *)((char *)v167 - 3);
  do
  {
    v54 = 0;
    if (!(_DWORD)v26 || *(_DWORD *)((char *)v17 - v26 + 1) != *(_DWORD *)((char *)v17 + 1))
      goto LABEL_64;
    v55 = (char *)v17 + 5;
    v56 = (_DWORD *)((char *)v17 - v26 + 5);
    if (v51 <= (unint64_t)v17 + 5)
    {
      v59 = (unsigned __int16 *)((char *)v17 + 5);
LABEL_53:
      if (v59 < v52 && *v56 == *(_DWORD *)v59)
      {
        v59 += 2;
        ++v56;
      }
      if (v59 < v162 && *(unsigned __int16 *)v56 == *v59)
      {
        ++v59;
        v56 = (_DWORD *)((char *)v56 + 2);
      }
      if (v59 < v167 && *(unsigned __int8 *)v56 == *(unsigned __int8 *)v59)
        v59 = (unsigned __int16 *)((char *)v59 + 1);
      v58 = (char *)v59 - v55;
      goto LABEL_63;
    }
    v57 = *(_QWORD *)v55 ^ *(_QWORD *)v56;
    if (!v57)
    {
      v91 = (char *)v17 + 13;
      while (1)
      {
        v92 = &v91[v57];
        if ((unint64_t)&v91[v57] >= v51)
          break;
        v93 = *(_QWORD *)((char *)v17 + v57 - v26 + 13);
        v57 += 8;
        v94 = *(_QWORD *)v92 ^ v93;
        if (v94)
        {
          v58 = v57 + (__clz(__rbit64(v94)) >> 3);
          goto LABEL_63;
        }
      }
      v59 = (unsigned __int16 *)((char *)v17 + v57 + 13);
      v56 = (_DWORD *)((char *)v59 - v26);
      goto LABEL_53;
    }
    v58 = __clz(__rbit64(v57)) >> 3;
LABEL_63:
    v54 = v58 + 4;
LABEL_64:
    v169 = 999999999;
    v161 = v53;
    if (v164 == 6)
    {
      if (v14 == 6)
      {
        v60 = sub_1D4B790C0(v165, v17, v167, &v169);
      }
      else if (v14 == 5)
      {
        v60 = sub_1D4B78B5C(v165, v17, v167, &v169);
      }
      else
      {
        v60 = sub_1D4B78610(v165, v17, v167, &v169);
      }
    }
    else if (v164 == 5)
    {
      if (v14 == 6)
      {
        v60 = sub_1D4B780A0(v165, v17, v167, &v169);
      }
      else if (v14 == 5)
      {
        v60 = sub_1D4B77B3C(v165, v17, v167, &v169);
      }
      else
      {
        v60 = sub_1D4B775F0(v165, v17, v167, &v169);
      }
    }
    else if (v14 == 6)
    {
      v60 = sub_1D4B77088(v165, v17, v167, &v169);
    }
    else if (v14 == 5)
    {
      v60 = sub_1D4B76B2C(v165, v17, v167, &v169);
    }
    else
    {
      v60 = sub_1D4B765E8(v165, v17, v167, &v169);
    }
    if (v60 <= v54)
      v61 = v54;
    else
      v61 = v60;
    if (v61 < 4)
    {
      v62 = (unint64_t)v17 - v5;
      v17 = (_QWORD *)((char *)v17 + (((unint64_t)v17 - v5) >> 8) + 1);
      *(_DWORD *)(v165 + 300) = v62 > 0x7FF;
      v14 = v166;
      v53 = v161;
      continue;
    }
    if (v60 <= v54)
      v63 = (_DWORD *)((char *)v17 + 1);
    else
      v63 = v17;
    if (v60 <= v54)
      v64 = 1;
    else
      v64 = v169;
    v65 = v61;
    v66 = v64;
    v163 = v63;
    v14 = v166;
    v67 = -(uint64_t)v26;
    if ((unint64_t)v17 < v168)
    {
      do
      {
        v63 = (_DWORD *)((char *)v17 + 1);
        if (!v64 || !(_DWORD)v26)
        {
          v68 = v164;
          goto LABEL_100;
        }
        v68 = v164;
        if (*v63 != *(_DWORD *)((char *)v63 + v67))
          goto LABEL_100;
        v69 = (char *)v17 + 5;
        v70 = (_QWORD *)((char *)v17 + v67 + 5);
        if (v51 <= (unint64_t)v17 + 5)
        {
          v74 = (unsigned __int16 *)((char *)v17 + 5);
        }
        else
        {
          v71 = *(_QWORD *)v69 ^ *v70;
          if (v71)
          {
            v72 = __clz(__rbit64(v71)) >> 3;
LABEL_156:
            v85 = v72 + 4;
            if (3 * (int)v85 > (int)(3 * v61 + __clz(v64) - 30))
            {
              v61 = v85;
              v64 = 1;
              v163 = (_DWORD *)((char *)v17 + 1);
            }
            goto LABEL_100;
          }
          v74 = (unsigned __int16 *)((char *)v17 + 13);
          while ((unint64_t)v74 < v51)
          {
            v82 = *(_QWORD *)((char *)v74 + v67);
            v83 = *(_QWORD *)v74;
            v74 += 4;
            v84 = v83 ^ v82;
            if (v84)
            {
              v74 = (unsigned __int16 *)((char *)v74 + (__clz(__rbit64(v84)) >> 3) - 8);
              goto LABEL_155;
            }
          }
          v70 = (_QWORD *)((char *)v74 + v67);
        }
        if (v74 < v159 && *(_DWORD *)v70 == *(_DWORD *)v74)
        {
          v74 += 2;
          v70 = (_QWORD *)((char *)v70 + 4);
        }
        if (v74 < v162 && *(unsigned __int16 *)v70 == *v74)
        {
          ++v74;
          v70 = (_QWORD *)((char *)v70 + 2);
        }
        if (v74 < v167 && *(unsigned __int8 *)v70 == *(unsigned __int8 *)v74)
          v74 = (unsigned __int16 *)((char *)v74 + 1);
LABEL_155:
        v72 = (char *)v74 - v69;
        if (v72 <= 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_156;
LABEL_100:
        v169 = 999999999;
        if (v68 == 6)
        {
          if (v166 == 6)
          {
            v73 = sub_1D4B790C0(v165, (_QWORD *)((char *)v17 + 1), v167, &v169);
          }
          else
          {
            if (v166 != 5)
            {
              v75 = sub_1D4B78610(v165, (_QWORD *)((char *)v17 + 1), v167, &v169);
              goto LABEL_129;
            }
            v73 = sub_1D4B78B5C(v165, (_QWORD *)((char *)v17 + 1), v167, &v169);
          }
        }
        else if (v68 == 5)
        {
          if (v166 == 6)
          {
            v73 = sub_1D4B780A0(v165, (_QWORD *)((char *)v17 + 1), v167, &v169);
          }
          else
          {
            if (v166 != 5)
            {
              v75 = sub_1D4B775F0(v165, (_QWORD *)((char *)v17 + 1), v167, &v169);
LABEL_129:
              v65 = v75;
              v14 = v166;
              v67 = -(uint64_t)v26;
              goto LABEL_130;
            }
            v73 = sub_1D4B77B3C(v165, (_QWORD *)((char *)v17 + 1), v167, &v169);
          }
        }
        else if (v166 == 6)
        {
          v73 = sub_1D4B77088(v165, (_QWORD *)((char *)v17 + 1), v167, &v169);
        }
        else
        {
          if (v166 != 5)
          {
            v75 = sub_1D4B765E8(v165, (_QWORD *)((char *)v17 + 1), v167, &v169);
            goto LABEL_129;
          }
          v73 = sub_1D4B76B2C(v165, (_QWORD *)((char *)v17 + 1), v167, &v169);
        }
        v67 = -(uint64_t)v26;
        v14 = v166;
        v65 = v73;
LABEL_130:
        if (v65 >= 4)
        {
          v66 = v169;
          if ((int)(__clz(v169) + 4 * v65 - 31) > (int)(__clz(v64) + 4 * v61 - 27))
            goto LABEL_185;
        }
        if ((unint64_t)v63 >= v168)
        {
          v65 = v61;
          v66 = v64;
          v63 = v163;
          break;
        }
        v63 = (_DWORD *)((char *)v17 + 2);
        if (v64)
        {
          v76 = v164;
          if ((_DWORD)v26 && *v63 == *(_DWORD *)((char *)v63 + v67))
          {
            v77 = (char *)v17 + 6;
            v78 = (_QWORD *)((char *)v17 + v67 + 6);
            if (v51 <= (unint64_t)v17 + 6)
            {
              v81 = (unsigned __int16 *)v17 + 3;
            }
            else
            {
              v79 = *(_QWORD *)v77 ^ *v78;
              if (v79)
              {
                v80 = __clz(__rbit64(v79)) >> 3;
LABEL_163:
                v89 = v80 + 4;
                if ((int)(__clz(v64) + 4 * v61 - 30) < 4 * (int)v89)
                {
                  v61 = v89;
                  v64 = 1;
                  v163 = (_DWORD *)((char *)v17 + 2);
                }
                goto LABEL_165;
              }
              v81 = (unsigned __int16 *)v17 + 7;
              while ((unint64_t)v81 < v51)
              {
                v86 = *(_QWORD *)((char *)v81 + v67);
                v87 = *(_QWORD *)v81;
                v81 += 4;
                v88 = v87 ^ v86;
                if (v88)
                {
                  v81 = (unsigned __int16 *)((char *)v81 + (__clz(__rbit64(v88)) >> 3) - 8);
                  goto LABEL_162;
                }
              }
              v78 = (_QWORD *)((char *)v81 + v67);
            }
            if (v81 < v159 && *(_DWORD *)v78 == *(_DWORD *)v81)
            {
              v81 += 2;
              v78 = (_QWORD *)((char *)v78 + 4);
            }
            if (v81 < v162 && *(unsigned __int16 *)v78 == *v81)
            {
              ++v81;
              v78 = (_QWORD *)((char *)v78 + 2);
            }
            if (v81 < v167 && *(unsigned __int8 *)v78 == *(unsigned __int8 *)v81)
              v81 = (unsigned __int16 *)((char *)v81 + 1);
LABEL_162:
            v80 = (char *)v81 - v77;
            if (v80 > 0xFFFFFFFFFFFFFFFBLL)
              goto LABEL_165;
            goto LABEL_163;
          }
        }
        else
        {
          v76 = v164;
        }
LABEL_165:
        v169 = 999999999;
        if (v76 == 6)
        {
          if (v166 == 6)
          {
            v90 = sub_1D4B790C0(v165, (_QWORD *)((char *)v17 + 2), v167, &v169);
          }
          else if (v166 == 5)
          {
            v90 = sub_1D4B78B5C(v165, (_QWORD *)((char *)v17 + 2), v167, &v169);
          }
          else
          {
            v90 = sub_1D4B78610(v165, (_QWORD *)((char *)v17 + 2), v167, &v169);
          }
        }
        else if (v76 == 5)
        {
          if (v166 == 6)
          {
            v90 = sub_1D4B780A0(v165, (_QWORD *)((char *)v17 + 2), v167, &v169);
          }
          else if (v166 == 5)
          {
            v90 = sub_1D4B77B3C(v165, (_QWORD *)((char *)v17 + 2), v167, &v169);
          }
          else
          {
            v90 = sub_1D4B775F0(v165, (_QWORD *)((char *)v17 + 2), v167, &v169);
          }
        }
        else if (v166 == 6)
        {
          v90 = sub_1D4B77088(v165, (_QWORD *)((char *)v17 + 2), v167, &v169);
        }
        else if (v166 == 5)
        {
          v90 = sub_1D4B76B2C(v165, (_QWORD *)((char *)v17 + 2), v167, &v169);
        }
        else
        {
          v90 = sub_1D4B765E8(v165, (_QWORD *)((char *)v17 + 2), v167, &v169);
        }
        v65 = v90;
        if (v90 < 4 || (v66 = v169, (int)(__clz(v169) + 4 * v90 - 31) <= (int)(__clz(v64) + 4 * v61 - 24)))
        {
          v65 = v61;
          v66 = v64;
          v63 = v163;
          v14 = v166;
          break;
        }
        v14 = v166;
        v67 = -(uint64_t)v26;
LABEL_185:
        v17 = v63;
        v163 = v63;
        v64 = v66;
        v61 = v65;
      }
      while ((unint64_t)v63 < v168);
    }
    if (v66 <= 3)
    {
      v97 = v165;
    }
    else
    {
      if ((unint64_t)v63 <= v5 || (unint64_t)v63 - v66 + 3 <= v155)
      {
        v96 = v63;
        v97 = v165;
      }
      else
      {
        v95 = 2 - v66;
        v96 = v63;
        v97 = v165;
        while (1)
        {
          v98 = *((unsigned __int8 *)v96 - 1);
          v96 = (_DWORD *)((char *)v96 - 1);
          if (v98 != *((unsigned __int8 *)v63 + v95))
            break;
          ++v65;
          if ((unint64_t)v96 > v5)
          {
            v99 = (char *)v63 + v95;
            v63 = v96;
            if ((unint64_t)v99 > v155)
              continue;
          }
          goto LABEL_206;
        }
        v96 = v63;
      }
LABEL_206:
      v161 = v26;
      v26 = (v66 - 3);
      v63 = v96;
    }
    v100 = (uint64_t)v63 - v5;
    v101 = *(_OWORD **)(a2 + 24);
    if (v63 > (_DWORD *)v158)
    {
      sub_1D4B56E1C(v101, (char *)v5, (unint64_t)v63, v158);
      v14 = v166;
LABEL_209:
      *(_QWORD *)(a2 + 24) += v100;
      v102 = *(_QWORD *)(a2 + 8);
      if ((unint64_t)v100 >= 0x10000)
      {
        v103 = (unint64_t)(v102 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v103;
      }
      goto LABEL_217;
    }
    *v101 = *(_OWORD *)v5;
    v104 = *(_QWORD *)(a2 + 24);
    if ((unint64_t)v100 > 0x10)
    {
      *(_OWORD *)(v104 + 16) = *(_OWORD *)(v5 + 16);
      if (v100 >= 33)
      {
        v105 = v104 + v100;
        v106 = (_OWORD *)(v104 + 32);
        v107 = (__int128 *)(v5 + 48);
        do
        {
          *v106 = *(v107 - 1);
          v108 = *v107;
          v107 += 2;
          v106[1] = v108;
          v106 += 2;
        }
        while ((unint64_t)v106 < v105);
      }
      goto LABEL_209;
    }
    *(_QWORD *)(a2 + 24) = v104 + v100;
    v102 = *(_QWORD *)(a2 + 8);
LABEL_217:
    *(_WORD *)(v102 + 4) = v100;
    *(_DWORD *)v102 = v66;
    if (v65 - 3 >= 0x10000)
    {
      v109 = (unint64_t)(v102 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v109;
    }
    *(_WORD *)(v102 + 6) = v65 - 3;
    *(_QWORD *)(a2 + 8) = v102 + 8;
    v53 = v161;
    if (*(_DWORD *)(v97 + 300))
    {
      v110 = *(unsigned int *)(v97 + 44);
      v111 = v168 - (v157 + v110);
      if ((v111 + 1) < 8)
        v112 = v111 + 1;
      else
        v112 = 8;
      if (v168 >= v157 + v110)
        v113 = v112;
      else
        v113 = 0;
      v114 = (v113 + v110);
      if (v110 < v114)
      {
        v115 = *(_QWORD *)(v97 + 112);
        v116 = *(_QWORD *)(v97 + 56);
        v117 = *(_DWORD *)(v97 + 52);
        v118 = *(_QWORD *)(v97 + 96);
        v119 = 56 - v117;
        v120 = 24 - v117;
        do
        {
          if (v164 == 5)
          {
            v121 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v157 + v110);
          }
          else
          {
            if (v164 != 6)
            {
              LODWORD(v122) = ((-1640531535 * *(_DWORD *)(v157 + v110)) ^ v118) >> v120;
              goto LABEL_234;
            }
            v121 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v157 + v110);
          }
          v122 = (v121 ^ v118) >> v119;
LABEL_234:
          v123 = v122 >> 8 << v166;
          _X17 = v115 + 4 * v123;
          __asm { PRFM            #0, [X17] }
          if (v156 > 4)
          {
            __asm { PRFM            #0, [X17,#0x40] }
            _X16 = v116 + v123;
            __asm { PRFM            #0, [X16] }
            if (v166 == 6)
              __asm { PRFM            #0, [X16,#0x20] }
          }
          else
          {
            _X16 = v116 + v123;
            __asm { PRFM            #0, [X16] }
          }
          *(_DWORD *)(v97 + 4 * (v110++ & 7) + 64) = v122;
        }
        while (v114 != v110);
      }
      *(_DWORD *)(v97 + 300) = 0;
    }
    v5 = (unint64_t)v63 + v65;
    if (!v161 || v5 > v168)
    {
      v17 = (_QWORD *)((char *)v63 + v65);
      v52 = (unsigned __int16 *)((char *)v167 - 3);
      continue;
    }
    v132 = v26;
    v133 = v161;
    v52 = (unsigned __int16 *)((char *)v167 - 3);
    while (1)
    {
      v26 = v133;
      v133 = v132;
      if (*(_DWORD *)v5 != *(_DWORD *)(v5 - v26))
      {
        v53 = v26;
        v26 = v132;
        goto LABEL_274;
      }
      v134 = (char *)(v5 + 4);
      v135 = (_QWORD *)(v5 + 4 - v26);
      if (v51 <= v5 + 4)
      {
        v138 = (unsigned __int16 *)(v5 + 4);
      }
      else
      {
        v136 = *(_QWORD *)v134 ^ *v135;
        if (v136)
        {
          v137 = __clz(__rbit64(v136)) >> 3;
          goto LABEL_258;
        }
        v142 = v5 + 12;
        while (1)
        {
          v143 = (_QWORD *)(v142 + v136);
          if (v142 + v136 >= v51)
            break;
          v144 = *(_QWORD *)(v5 + 12 - v26 + v136);
          v136 += 8;
          v145 = *v143 ^ v144;
          if (v145)
          {
            v137 = v136 + (__clz(__rbit64(v145)) >> 3);
            goto LABEL_258;
          }
        }
        v138 = (unsigned __int16 *)(v5 + v136 + 12);
        v135 = (_QWORD *)((char *)v138 - v26);
      }
      if (v138 < v159 && *(_DWORD *)v135 == *(_DWORD *)v138)
      {
        v138 += 2;
        v135 = (_QWORD *)((char *)v135 + 4);
      }
      if (v138 < v162 && *(unsigned __int16 *)v135 == *v138)
      {
        ++v138;
        v135 = (_QWORD *)((char *)v135 + 2);
      }
      if (v138 < v167 && *(unsigned __int8 *)v135 == *(unsigned __int8 *)v138)
        v138 = (unsigned __int16 *)((char *)v138 + 1);
      v137 = (char *)v138 - v134;
LABEL_258:
      v139 = *(_OWORD **)(a2 + 24);
      if (v5 <= (unint64_t)v158)
      {
        *v139 = *(_OWORD *)v5;
      }
      else
      {
        sub_1D4B56E1C(v139, (char *)v5, v5, v158);
        v14 = v166;
      }
      v140 = *(_QWORD *)(a2 + 8);
      *(_WORD *)(v140 + 4) = 0;
      *(_DWORD *)v140 = 1;
      if (v137 + 1 >= 0x10000)
      {
        v141 = (unint64_t)(v140 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v141;
      }
      *(_WORD *)(v140 + 6) = v137 + 1;
      *(_QWORD *)(a2 + 8) = v140 + 8;
      v5 += v137 + 4;
      if (!(_DWORD)v133)
        break;
      v132 = v26;
      v53 = v133;
      v17 = (_QWORD *)v5;
      if (v5 > v168)
        goto LABEL_275;
    }
    v53 = 0;
LABEL_274:
    v17 = (_QWORD *)v5;
LABEL_275:
    ;
  }
  while ((unint64_t)v17 < v168);
  v160 = v53;
  a3 = v154;
  v16 = v152;
  v15 = v153;
  v24 = v151;
LABEL_278:
  if (v16 <= v24)
    v146 = 0;
  else
    v146 = v16;
  if (v15 <= v24)
    v147 = 0;
  else
    v147 = v15;
  if ((_DWORD)v26)
    v148 = v26;
  else
    v148 = v146;
  if ((_DWORD)v26)
    v149 = v146 == 0;
  else
    v149 = 1;
  if (v149)
    v146 = v147;
  if (v160)
    v146 = v160;
  *a3 = v148;
  a3[1] = v146;
  return (char *)v167 - v5;
}

char *sub_1D4B6D0F0(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unsigned __int16 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  unsigned __int16 *v65;
  uint64_t v66;
  _DWORD *v67;
  unsigned __int16 *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  unsigned __int16 *v72;
  unint64_t v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  _DWORD *v88;
  int v89;
  int v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _OWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  _OWORD *v102;
  __int128 *v103;
  __int128 v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  char v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  _QWORD *v131;
  unint64_t v132;
  char *v133;
  unint64_t v134;
  unsigned __int16 *v135;
  _OWORD *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  BOOL v146;
  unsigned int v148;
  unsigned int v149;
  unsigned int *v150;
  unsigned int v151;
  unint64_t v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unsigned int v157;
  unsigned __int16 *v158;
  unsigned __int16 *v159;
  unsigned __int16 *v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  int v164;
  int v165;
  uint64_t v166;

  v5 = a4;
  v8 = (unsigned __int16 *)(a4 + a5);
  v9 = a4 + a5 - 16;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(unsigned int *)(a1 + 24);
  v12 = v10 + v11;
  v13 = *(_DWORD *)(a1 + 272);
  if (v13 >= 6)
    v13 = 6;
  if (v13 <= 4)
    v14 = 4;
  else
    v14 = v13;
  if (*(_DWORD *)(a1 + 268) >= 6u)
    v15 = 6;
  else
    v15 = *(_DWORD *)(a1 + 268);
  if (v15 <= 4)
    v16 = 4;
  else
    v16 = v15;
  v164 = v16;
  v18 = *a3;
  v17 = a3[1];
  if ((_DWORD)a4 == (_DWORD)v12)
    v19 = (char *)(a4 + 1);
  else
    v19 = (char *)a4;
  v20 = 1 << *(_DWORD *)(a1 + 256);
  v21 = (_DWORD)v19 - v10 - v20;
  v22 = (int)v19 - (int)v10 - (int)v11 > v20;
  v23 = *(unsigned int *)(a1 + 44);
  if (v22 && *(_DWORD *)(a1 + 40) == 0)
    LODWORD(v11) = v21;
  v25 = (_DWORD)v19 - v10 - v11;
  if (v17 <= v25)
    v26 = a3[1];
  else
    v26 = 0;
  v151 = v25;
  if (v18 <= v25)
    v27 = v18;
  else
    v27 = 0;
  *(_DWORD *)(a1 + 300) = 0;
  v28 = v9 - (v10 + v23);
  if ((v28 + 1) < 8)
    v29 = v28 + 1;
  else
    v29 = 8;
  if (v9 >= v10 + v23)
    v30 = v29;
  else
    v30 = 0;
  v31 = (v30 + v23);
  if (v23 < v31)
  {
    v32 = *(_QWORD *)(a1 + 112);
    v33 = *(_QWORD *)(a1 + 56);
    v34 = *(_DWORD *)(a1 + 52);
    v35 = *(_QWORD *)(a1 + 96);
    v36 = 56 - v34;
    v37 = 24 - v34;
    v38 = v26;
    do
    {
      if (v14 == 5)
      {
        v39 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v10 + v23);
      }
      else
      {
        if (v14 != 6)
        {
          LODWORD(v40) = ((-1640531535 * *(_DWORD *)(v10 + v23)) ^ v35) >> v37;
          goto LABEL_40;
        }
        v39 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v10 + v23);
      }
      v40 = (v39 ^ v35) >> v36;
LABEL_40:
      v41 = v40 >> 8 << v164;
      _X3 = v32 + 4 * v41;
      __asm { PRFM            #0, [X3] }
      if (v15 > 4)
      {
        __asm { PRFM            #0, [X3,#0x40] }
        _X1 = v33 + v41;
        __asm { PRFM            #0, [X1] }
        v26 = v38;
        if (v164 == 6)
          __asm { PRFM            #0, [X1,#0x20] }
      }
      else
      {
        _X1 = v33 + v41;
        __asm { PRFM            #0, [X1] }
        v26 = v38;
      }
      *(_DWORD *)(a1 + 4 * (v23++ & 7) + 64) = v40;
    }
    while (v31 != v23);
  }
  if ((unint64_t)v19 >= v9)
    goto LABEL_233;
  v153 = v15;
  v152 = v12;
  v148 = v18;
  v149 = v17;
  v154 = v10;
  v150 = a3;
  v53 = (unint64_t)v8 - 7;
  v158 = (unsigned __int16 *)((char *)v8 - 1);
  v159 = (unsigned __int16 *)((char *)v8 - 3);
  v162 = (char *)(v8 - 16);
  v165 = v14;
  v160 = v8;
  v155 = a2;
  v163 = a1;
  v161 = v9;
  v156 = (unint64_t)v8 - 7;
  do
  {
    v54 = 0;
    if ((_DWORD)v27 && *(_DWORD *)&v19[-v27 + 1] == *(_DWORD *)(v19 + 1))
    {
      v55 = v19 + 5;
      v56 = &v19[-v27 + 5];
      if (v53 <= (unint64_t)(v19 + 5))
      {
        v59 = v19 + 5;
      }
      else
      {
        v57 = *(_QWORD *)v55 ^ *(_QWORD *)v56;
        if (v57)
        {
          v58 = __clz(__rbit64(v57)) >> 3;
LABEL_63:
          v54 = v58 + 4;
          goto LABEL_64;
        }
        v92 = v19 + 13;
        while (1)
        {
          v93 = &v92[v57];
          if ((unint64_t)&v92[v57] >= v53)
            break;
          v94 = *(_QWORD *)&v19[v57 + 13 - v27];
          v57 += 8;
          v95 = *(_QWORD *)v93 ^ v94;
          if (v95)
          {
            v58 = v57 + (__clz(__rbit64(v95)) >> 3);
            goto LABEL_63;
          }
        }
        v59 = &v19[v57 + 13];
        v56 = &v59[-v27];
      }
      if (v59 < (char *)v159 && *(_DWORD *)v56 == *(_DWORD *)v59)
      {
        v59 += 4;
        v56 += 4;
      }
      if (v59 < (char *)v158 && *(unsigned __int16 *)v56 == *(unsigned __int16 *)v59)
      {
        v59 += 2;
        v56 += 2;
      }
      if (v59 < (char *)v8 && *v56 == *v59)
        ++v59;
      v58 = v59 - v55;
      goto LABEL_63;
    }
LABEL_64:
    v166 = 999999999;
    v157 = v26;
    if (v14 == 6)
    {
      if (v164 == 6)
      {
        v60 = sub_1D4B790C0(v163, v19, v8, &v166);
      }
      else if (v164 == 5)
      {
        v60 = sub_1D4B78B5C(v163, v19, v8, &v166);
      }
      else
      {
        v60 = sub_1D4B78610(v163, v19, v8, &v166);
      }
    }
    else if (v14 == 5)
    {
      if (v164 == 6)
      {
        v60 = sub_1D4B780A0(v163, v19, v8, &v166);
      }
      else if (v164 == 5)
      {
        v60 = sub_1D4B77B3C(v163, v19, v8, &v166);
      }
      else
      {
        v60 = sub_1D4B775F0(v163, v19, v8, &v166);
      }
    }
    else if (v164 == 6)
    {
      v60 = sub_1D4B77088(v163, v19, v8, &v166);
    }
    else if (v164 == 5)
    {
      v60 = sub_1D4B76B2C(v163, v19, v8, &v166);
    }
    else
    {
      v60 = sub_1D4B765E8(v163, v19, v8, &v166);
    }
    if (v60 <= v54)
      v61 = v54;
    else
      v61 = v60;
    if (v61 < 4)
    {
      v62 = (unint64_t)&v19[-v5];
      v19 += ((unint64_t)&v19[-v5] >> 8) + 1;
      *(_DWORD *)(v163 + 300) = v62 > 0x7FF;
      v14 = v165;
      v26 = v157;
      continue;
    }
    if (v60 <= v54)
      v63 = v19 + 1;
    else
      v63 = v19;
    if (v60 <= v54)
      v64 = 1;
    else
      v64 = v166;
    v14 = v165;
    if ((unint64_t)v19 >= v9)
    {
      v83 = v61;
      v84 = v64;
      v67 = v63;
      goto LABEL_144;
    }
    v65 = (unsigned __int16 *)(v19 + 13);
    v66 = -(uint64_t)v27;
    while (1)
    {
      v67 = v19 + 1;
      if (!v64)
      {
        v68 = v160;
        v69 = v163;
LABEL_104:
        v74 = v164;
        goto LABEL_105;
      }
      v68 = v160;
      v69 = v163;
      if (!(_DWORD)v27 || *v67 != *(_DWORD *)((char *)v67 + v66))
        goto LABEL_104;
      v70 = v19 + 5;
      v71 = &v19[v66 + 5];
      if (v156 <= (unint64_t)(v19 + 5))
      {
        v72 = (unsigned __int16 *)(v19 + 5);
        v74 = v164;
      }
      else
      {
        v72 = v65;
        v73 = *(_QWORD *)v70 ^ *(_QWORD *)v71;
        v74 = v164;
        if (v73)
        {
          v75 = __clz(__rbit64(v73)) >> 3;
LABEL_127:
          v81 = v75 + 4;
          if (3 * (int)v81 > (int)(3 * v61 + __clz(v64) - 30))
          {
            v61 = v81;
            v64 = 1;
            v63 = v19 + 1;
          }
          goto LABEL_105;
        }
        while ((unint64_t)v72 < v156)
        {
          v76 = *(_QWORD *)((char *)v72 + v66);
          v77 = *(_QWORD *)v72;
          v72 += 4;
          v78 = v77 ^ v76;
          if (v78)
          {
            v72 = (unsigned __int16 *)((char *)v72 + (__clz(__rbit64(v78)) >> 3) - 8);
            goto LABEL_126;
          }
        }
        v71 = (char *)v72 + v66;
      }
      if (v72 < v159 && *(_DWORD *)v71 == *(_DWORD *)v72)
      {
        v72 += 2;
        v71 += 4;
      }
      if (v72 < v158 && *(unsigned __int16 *)v71 == *v72)
      {
        ++v72;
        v71 += 2;
      }
      if (v72 < v160 && *v71 == *(_BYTE *)v72)
        v72 = (unsigned __int16 *)((char *)v72 + 1);
LABEL_126:
      v75 = (char *)v72 - v70;
      if (v75 <= 0xFFFFFFFFFFFFFFFBLL)
        goto LABEL_127;
LABEL_105:
      v166 = 999999999;
      v79 = v19 + 1;
      if (v165 == 6)
      {
        if (v74 == 6)
        {
          v80 = sub_1D4B790C0(v69, v79, v68, &v166);
          goto LABEL_134;
        }
        if (v74 != 5)
        {
          v82 = sub_1D4B78610(v69, v79, v68, &v166);
          goto LABEL_136;
        }
        v80 = sub_1D4B78B5C(v69, v79, v68, &v166);
      }
      else if (v165 == 5)
      {
        if (v74 == 6)
        {
          v80 = sub_1D4B780A0(v69, v79, v68, &v166);
        }
        else
        {
          if (v74 != 5)
          {
            v82 = sub_1D4B775F0(v69, v79, v68, &v166);
LABEL_136:
            v83 = v82;
            v66 = -(uint64_t)v27;
            goto LABEL_137;
          }
          v80 = sub_1D4B77B3C(v69, v79, v68, &v166);
        }
      }
      else
      {
        if (v74 == 6)
        {
          v80 = sub_1D4B77088(v69, v79, v68, &v166);
          goto LABEL_134;
        }
        if (v74 != 5)
        {
          v82 = sub_1D4B765E8(v69, v79, v68, &v166);
          goto LABEL_136;
        }
        v80 = sub_1D4B76B2C(v69, v79, v68, &v166);
      }
LABEL_134:
      v66 = -(uint64_t)v27;
      v83 = v80;
LABEL_137:
      if (v83 < 4)
        break;
      v84 = v166;
      if ((int)(__clz(v166) + 4 * v83 - 31) <= (int)(__clz(v64) + 4 * v61 - 27))
        break;
      v65 = (unsigned __int16 *)((char *)v65 + 1);
      ++v19;
      v63 = v67;
      v64 = v166;
      v61 = v83;
      v14 = v165;
      if ((unint64_t)v67 >= v161)
        goto LABEL_144;
    }
    v83 = v61;
    v84 = v64;
    v67 = v63;
    v14 = v165;
LABEL_144:
    if (v84 <= 3)
    {
      v85 = v155;
      v89 = v164;
      v86 = v162;
    }
    else
    {
      v85 = v155;
      v86 = v162;
      if ((unint64_t)v67 <= v5 || (unint64_t)v67 - v84 + 3 <= v152)
      {
        v88 = v67;
        v89 = v164;
      }
      else
      {
        v87 = 2 - v84;
        v88 = v67;
        v89 = v164;
        while (1)
        {
          v90 = *((unsigned __int8 *)v88 - 1);
          v88 = (_DWORD *)((char *)v88 - 1);
          if (v90 != *((unsigned __int8 *)v67 + v87))
            break;
          ++v83;
          if ((unint64_t)v88 > v5)
          {
            v91 = (char *)v67 + v87;
            v67 = v88;
            if ((unint64_t)v91 > v152)
              continue;
          }
          goto LABEL_159;
        }
        v88 = v67;
      }
LABEL_159:
      v157 = v27;
      v27 = (v84 - 3);
      v67 = v88;
    }
    v96 = (uint64_t)v67 - v5;
    v97 = *(_OWORD **)(v85 + 24);
    if (v67 > (_DWORD *)v86)
    {
      sub_1D4B56E1C(v97, (char *)v5, (unint64_t)v67, v86);
      v14 = v165;
      goto LABEL_162;
    }
    *v97 = *(_OWORD *)v5;
    v100 = *(_QWORD *)(v85 + 24);
    if ((unint64_t)v96 <= 0x10)
    {
      *(_QWORD *)(v85 + 24) = v100 + v96;
      v98 = *(_QWORD *)(v85 + 8);
    }
    else
    {
      *(_OWORD *)(v100 + 16) = *(_OWORD *)(v5 + 16);
      if (v96 >= 33)
      {
        v101 = v100 + v96;
        v102 = (_OWORD *)(v100 + 32);
        v103 = (__int128 *)(v5 + 48);
        do
        {
          *v102 = *(v103 - 1);
          v104 = *v103;
          v103 += 2;
          v102[1] = v104;
          v102 += 2;
        }
        while ((unint64_t)v102 < v101);
      }
LABEL_162:
      *(_QWORD *)(v85 + 24) += v96;
      v98 = *(_QWORD *)(v85 + 8);
      if ((unint64_t)v96 >= 0x10000)
      {
        v99 = (unint64_t)(v98 - *(_QWORD *)v85) >> 3;
        *(_DWORD *)(v85 + 72) = 1;
        *(_DWORD *)(v85 + 76) = v99;
      }
    }
    *(_WORD *)(v98 + 4) = v96;
    *(_DWORD *)v98 = v84;
    if (v83 - 3 >= 0x10000)
    {
      v105 = (unint64_t)(v98 - *(_QWORD *)v85) >> 3;
      *(_DWORD *)(v85 + 72) = 2;
      *(_DWORD *)(v85 + 76) = v105;
    }
    *(_WORD *)(v98 + 6) = v83 - 3;
    *(_QWORD *)(v85 + 8) = v98 + 8;
    if (*(_DWORD *)(v163 + 300))
    {
      v106 = *(unsigned int *)(v163 + 44);
      v107 = v161 - (v154 + v106);
      if ((v107 + 1) < 8)
        v108 = v107 + 1;
      else
        v108 = 8;
      if (v161 >= v154 + v106)
        v109 = v108;
      else
        v109 = 0;
      v110 = (v109 + v106);
      if (v106 < v110)
      {
        v111 = *(_QWORD *)(v163 + 112);
        v112 = *(_QWORD *)(v163 + 56);
        v113 = *(_DWORD *)(v163 + 52);
        v114 = *(_QWORD *)(v163 + 96);
        v115 = 56 - v113;
        v116 = 24 - v113;
        do
        {
          if (v165 == 5)
          {
            v117 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v154 + v106);
          }
          else
          {
            if (v165 != 6)
            {
              LODWORD(v118) = ((-1640531535 * *(_DWORD *)(v154 + v106)) ^ v114) >> v116;
              goto LABEL_187;
            }
            v117 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v154 + v106);
          }
          v118 = (v117 ^ v114) >> v115;
LABEL_187:
          v119 = v118 >> 8 << v89;
          _X17 = v111 + 4 * v119;
          __asm { PRFM            #0, [X17] }
          if (v153 > 4)
          {
            __asm { PRFM            #0, [X17,#0x40] }
            _X16 = v112 + v119;
            __asm { PRFM            #0, [X16] }
            if (v89 == 6)
              __asm { PRFM            #0, [X16,#0x20] }
          }
          else
          {
            _X16 = v112 + v119;
            __asm { PRFM            #0, [X16] }
          }
          *(_DWORD *)(v163 + 4 * (v106++ & 7) + 64) = v118;
        }
        while (v110 != v106);
      }
      *(_DWORD *)(v163 + 300) = 0;
    }
    v5 = (unint64_t)v67 + v83;
    v26 = v157;
    if (!v157)
    {
      v19 = (char *)v67 + v83;
      v8 = v160;
      v9 = v161;
      goto LABEL_227;
    }
    v9 = v161;
    if (v5 > v161)
    {
      v19 = (char *)v5;
      v8 = v160;
LABEL_227:
      v53 = v156;
      continue;
    }
    v128 = v27;
    v129 = v157;
    v8 = v160;
    v53 = v156;
LABEL_196:
    v27 = v129;
    v129 = v128;
    if (*(_DWORD *)v5 != *(_DWORD *)(v5 - v27))
    {
      v26 = v27;
      v27 = v128;
      goto LABEL_229;
    }
    v130 = (char *)(v5 + 4);
    v131 = (_QWORD *)(v5 + 4 - v27);
    if (v156 <= v5 + 4)
    {
      v135 = (unsigned __int16 *)(v5 + 4);
      v133 = v162;
    }
    else
    {
      v132 = *(_QWORD *)v130 ^ *v131;
      v133 = v162;
      if (v132)
      {
        v134 = __clz(__rbit64(v132)) >> 3;
        goto LABEL_211;
      }
      v139 = v5 + 12;
      while (1)
      {
        v140 = (_QWORD *)(v139 + v132);
        if (v139 + v132 >= v156)
          break;
        v141 = *(_QWORD *)(v5 + 12 - v27 + v132);
        v132 += 8;
        v142 = *v140 ^ v141;
        if (v142)
        {
          v134 = v132 + (__clz(__rbit64(v142)) >> 3);
          goto LABEL_211;
        }
      }
      v135 = (unsigned __int16 *)(v5 + v132 + 12);
      v131 = (_QWORD *)((char *)v135 - v27);
    }
    if (v135 < v159 && *(_DWORD *)v131 == *(_DWORD *)v135)
    {
      v135 += 2;
      v131 = (_QWORD *)((char *)v131 + 4);
    }
    if (v135 < v158 && *(unsigned __int16 *)v131 == *v135)
    {
      ++v135;
      v131 = (_QWORD *)((char *)v131 + 2);
    }
    if (v135 < v160 && *(unsigned __int8 *)v131 == *(unsigned __int8 *)v135)
      v135 = (unsigned __int16 *)((char *)v135 + 1);
    v134 = (char *)v135 - v130;
LABEL_211:
    v136 = *(_OWORD **)(v85 + 24);
    if (v5 <= (unint64_t)v133)
    {
      *v136 = *(_OWORD *)v5;
    }
    else
    {
      sub_1D4B56E1C(v136, (char *)v5, v5, v133);
      v14 = v165;
    }
    v137 = *(_QWORD *)(v85 + 8);
    *(_WORD *)(v137 + 4) = 0;
    *(_DWORD *)v137 = 1;
    if (v134 + 1 >= 0x10000)
    {
      v138 = (unint64_t)(v137 - *(_QWORD *)v85) >> 3;
      *(_DWORD *)(v85 + 72) = 2;
      *(_DWORD *)(v85 + 76) = v138;
    }
    *(_WORD *)(v137 + 6) = v134 + 1;
    *(_QWORD *)(v85 + 8) = v137 + 8;
    v5 += v134 + 4;
    if ((_DWORD)v129)
    {
      v128 = v27;
      v26 = v129;
      v19 = (char *)v5;
      if (v5 > v161)
        continue;
      goto LABEL_196;
    }
    v26 = 0;
LABEL_229:
    v19 = (char *)v5;
  }
  while ((unint64_t)v19 < v9);
  a3 = v150;
  v18 = v148;
  v17 = v149;
LABEL_233:
  if (v18 <= v151)
    v143 = 0;
  else
    v143 = v18;
  if (v17 <= v151)
    v144 = 0;
  else
    v144 = v17;
  if ((_DWORD)v27)
    v145 = v27;
  else
    v145 = v143;
  if ((_DWORD)v27)
    v146 = v143 == 0;
  else
    v146 = 1;
  if (v146)
    v143 = v144;
  if (v26)
    v143 = v26;
  *a3 = v145;
  a3[1] = v143;
  return (char *)v8 - v5;
}

char *sub_1D4B6DCF8(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  char *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _OWORD *v81;
  __int128 *v82;
  __int128 v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  char v94;
  char v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  _OWORD *v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  BOOL v124;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int *v129;
  unint64_t v130;
  uint64_t v131;
  unsigned int v132;
  char *v134;
  char *v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;

  v5 = a4;
  v137 = (char *)(a4 + a5);
  v7 = a4 + a5 - 16;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 272);
  if (v10 >= 6)
    v10 = 6;
  if (v10 <= 4)
    v11 = 4;
  else
    v11 = v10;
  v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 6)
    v12 = 6;
  v132 = v12;
  if (v12 <= 4)
    v13 = 4;
  else
    v13 = v12;
  v15 = *a3;
  v14 = a3[1];
  v130 = v8 + v9;
  if ((_DWORD)a4 == (_DWORD)v8 + (_DWORD)v9)
    v16 = a4 + 1;
  else
    v16 = a4;
  v17 = v16 - v8;
  v18 = 1 << *(_DWORD *)(a1 + 256);
  v19 = v16 - v8 - v18;
  v20 = (int)v16 - (int)v8 - (int)v9 > v18;
  v21 = *(unsigned int *)(a1 + 44);
  if (v20 && *(_DWORD *)(a1 + 40) == 0)
    LODWORD(v9) = v19;
  v23 = v17 - v9;
  if (v14 <= v17 - (int)v9)
    v24 = v14;
  else
    v24 = 0;
  if (v15 <= v23)
    v25 = v15;
  else
    v25 = 0;
  *(_DWORD *)(a1 + 300) = 0;
  v131 = v8;
  v26 = v7 - (v8 + v21);
  if ((v26 + 1) < 8)
    v27 = v26 + 1;
  else
    v27 = 8;
  if (v7 >= v8 + v21)
    v28 = v27;
  else
    v28 = 0;
  v29 = (v28 + v21);
  if (v21 < v29)
  {
    v30 = *(_QWORD *)(a1 + 112);
    v31 = *(_QWORD *)(a1 + 56);
    v32 = *(_DWORD *)(a1 + 52);
    v33 = *(_QWORD *)(a1 + 96);
    v34 = 56 - v32;
    v35 = 24 - v32;
    do
    {
      if (v11 == 5)
      {
        v36 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v8 + v21);
      }
      else
      {
        if (v11 != 6)
        {
          LODWORD(v37) = ((-1640531535 * *(_DWORD *)(v8 + v21)) ^ v33) >> v35;
          goto LABEL_39;
        }
        v36 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v8 + v21);
      }
      v37 = (v36 ^ v33) >> v34;
LABEL_39:
      v38 = v37 >> 8 << v13;
      _X3 = v30 + 4 * v38;
      __asm { PRFM            #0, [X3] }
      if (v132 > 4)
      {
        __asm { PRFM            #0, [X3,#0x40] }
        _X1 = v31 + v38;
        __asm { PRFM            #0, [X1] }
        if (v13 == 6)
          __asm { PRFM            #0, [X1,#0x20] }
      }
      else
      {
        _X1 = v31 + v38;
        __asm { PRFM            #0, [X1] }
      }
      *(_DWORD *)(a1 + 4 * (v21++ & 7) + 64) = v37;
    }
    while (v29 != v21);
  }
  if (v16 < v7)
  {
    v126 = v23;
    v127 = v15;
    v128 = v14;
    v129 = a3;
    v50 = (unint64_t)(v137 - 7);
    v134 = v137 - 1;
    v135 = v137 - 3;
    v51 = v137 - 32;
    v136 = v7;
    while (1)
    {
      if ((_DWORD)v25)
      {
        v52 = v16 + 1;
        if (*(_DWORD *)(v16 + 1 - v25) == *(_DWORD *)(v16 + 1))
        {
          v53 = (char *)(v16 + 5);
          v54 = (char *)(v16 + 5 - v25);
          if (v50 <= v16 + 5)
          {
            v58 = (char *)(v16 + 5);
          }
          else
          {
            v55 = *(_QWORD *)v53 ^ *(_QWORD *)v54;
            if (v55)
            {
              v56 = __clz(__rbit64(v55)) >> 3;
LABEL_67:
              v59 = v56 + 4;
              LODWORD(v60) = 1;
              goto LABEL_101;
            }
            v61 = v16 + 13;
            while (1)
            {
              v62 = (_QWORD *)(v61 + v55);
              if (v61 + v55 >= v50)
                break;
              v63 = *(_QWORD *)(v16 + 13 - v25 + v55);
              v55 += 8;
              v64 = *v62 ^ v63;
              if (v64)
              {
                v56 = v55 + (__clz(__rbit64(v64)) >> 3);
                goto LABEL_67;
              }
            }
            v58 = (char *)(v16 + v55 + 13);
            v54 = &v58[-v25];
          }
          if (v58 < v135 && *(_DWORD *)v54 == *(_DWORD *)v58)
          {
            v58 += 4;
            v54 += 4;
          }
          if (v58 < v134 && *(unsigned __int16 *)v54 == *(unsigned __int16 *)v58)
          {
            v58 += 2;
            v54 += 2;
          }
          if (v58 < v137 && *v54 == *v58)
            ++v58;
          v56 = v58 - v53;
          goto LABEL_67;
        }
      }
      v138 = 999999999;
      if (v11 == 6)
      {
        if (v13 == 6)
        {
          v57 = sub_1D4B790C0(a1, (_QWORD *)v16, v137, &v138);
          goto LABEL_83;
        }
        if (v13 == 5)
        {
          v57 = sub_1D4B78B5C(a1, (_QWORD *)v16, v137, &v138);
          goto LABEL_83;
        }
        v65 = sub_1D4B78610(a1, (_QWORD *)v16, v137, &v138);
      }
      else if (v11 == 5)
      {
        if (v13 == 6)
        {
          v57 = sub_1D4B780A0(a1, (_QWORD *)v16, v137, &v138);
          goto LABEL_83;
        }
        if (v13 == 5)
        {
          v57 = sub_1D4B77B3C(a1, (_QWORD *)v16, v137, &v138);
LABEL_83:
          v7 = v136;
          v51 = v137 - 32;
          v59 = v57;
          goto LABEL_86;
        }
        v65 = sub_1D4B775F0(a1, (_QWORD *)v16, v137, &v138);
      }
      else
      {
        if (v13 == 6)
        {
          v57 = sub_1D4B77088(a1, (_DWORD *)v16, v137, &v138);
          goto LABEL_83;
        }
        if (v13 == 5)
        {
          v57 = sub_1D4B76B2C(a1, (_DWORD *)v16, v137, &v138);
          goto LABEL_83;
        }
        v65 = sub_1D4B765E8(a1, (_DWORD *)v16, v137, &v138);
      }
      v59 = v65;
      v7 = v136;
      v51 = v137 - 32;
LABEL_86:
      if (v59)
        v60 = v138;
      else
        v60 = 1;
      if (v59 > 3)
      {
        if (v60 >= 4)
        {
          if (v16 > v5 && v16 - v60 + 3 > v130)
          {
            v67 = 2 - v60;
            v52 = v16;
            while (1)
            {
              v68 = *(unsigned __int8 *)--v52;
              if (v68 != *(unsigned __int8 *)(v16 + v67))
                break;
              ++v59;
              if (v52 > v5)
              {
                v69 = v16 + v67;
                v16 = v52;
                if (v69 > v130)
                  continue;
              }
              goto LABEL_100;
            }
          }
          v52 = v16;
LABEL_100:
          v24 = v25;
          v25 = (v60 - 3);
LABEL_101:
          v16 = v52;
        }
        v70 = v16 - v5;
        v71 = *(_OWORD **)(a2 + 24);
        if (v16 > (unint64_t)v51)
        {
          v72 = (char *)v5;
          v73 = v60;
          sub_1D4B56E1C(v71, v72, v16, v51);
          LODWORD(v60) = v73;
          v7 = v136;
          goto LABEL_104;
        }
        *v71 = *(_OWORD *)v5;
        v79 = *(_QWORD *)(a2 + 24);
        if ((unint64_t)v70 <= 0x10)
        {
          *(_QWORD *)(a2 + 24) = v79 + v70;
          v74 = *(_QWORD *)(a2 + 8);
          v75 = a1;
          v76 = v131;
          v77 = v132;
        }
        else
        {
          *(_OWORD *)(v79 + 16) = *(_OWORD *)(v5 + 16);
          if (v70 >= 33)
          {
            v80 = v79 + v70;
            v81 = (_OWORD *)(v79 + 32);
            v82 = (__int128 *)(v5 + 48);
            do
            {
              *v81 = *(v82 - 1);
              v83 = *v82;
              v82 += 2;
              v81[1] = v83;
              v81 += 2;
            }
            while ((unint64_t)v81 < v80);
          }
LABEL_104:
          *(_QWORD *)(a2 + 24) += v70;
          v74 = *(_QWORD *)(a2 + 8);
          v75 = a1;
          v76 = v131;
          v77 = v132;
          if ((unint64_t)v70 >= 0x10000)
          {
            v78 = (unint64_t)(v74 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v78;
          }
          v51 = v137 - 32;
        }
        *(_WORD *)(v74 + 4) = v70;
        *(_DWORD *)v74 = v60;
        if (v59 - 3 >= 0x10000)
        {
          v84 = (unint64_t)(v74 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v84;
        }
        *(_WORD *)(v74 + 6) = v59 - 3;
        *(_QWORD *)(a2 + 8) = v74 + 8;
        if (*(_DWORD *)(v75 + 300))
        {
          v85 = *(unsigned int *)(v75 + 44);
          v86 = v7 - (v76 + v85);
          if ((v86 + 1) < 8)
            v87 = v86 + 1;
          else
            v87 = 8;
          if (v7 >= v76 + v85)
            v88 = v87;
          else
            v88 = 0;
          v89 = (v88 + v85);
          if (v85 < v89)
          {
            v90 = *(_QWORD *)(v75 + 112);
            v91 = *(_QWORD *)(v75 + 56);
            v92 = *(_DWORD *)(v75 + 52);
            v93 = *(_QWORD *)(v75 + 96);
            v94 = 56 - v92;
            v95 = 24 - v92;
            do
            {
              if (v11 == 5)
              {
                v96 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v76 + v85);
              }
              else
              {
                if (v11 != 6)
                {
                  LODWORD(v97) = ((-1640531535 * *(_DWORD *)(v76 + v85)) ^ v93) >> v95;
                  goto LABEL_130;
                }
                v96 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v76 + v85);
              }
              v97 = (v96 ^ v93) >> v94;
LABEL_130:
              v98 = v97 >> 8 << v13;
              _X17 = v90 + 4 * v98;
              __asm { PRFM            #0, [X17] }
              if (v77 > 4)
              {
                __asm { PRFM            #0, [X17,#0x40] }
                _X16 = v91 + v98;
                __asm { PRFM            #0, [X16] }
                if (v13 == 6)
                  __asm { PRFM            #0, [X16,#0x20] }
              }
              else
              {
                _X16 = v91 + v98;
                __asm { PRFM            #0, [X16] }
              }
              *(_DWORD *)(v75 + 4 * (v85++ & 7) + 64) = v97;
            }
            while (v89 != v85);
          }
          *(_DWORD *)(v75 + 300) = 0;
        }
        v5 = v16 + v59;
        if ((_DWORD)v24 && v5 <= v7)
        {
          v107 = v25;
          v108 = v24;
          while (1)
          {
            v25 = v108;
            v108 = v107;
            if (*(_DWORD *)v5 != *(_DWORD *)(v5 - v25))
            {
              v24 = v25;
              v25 = v107;
              break;
            }
            v109 = (char *)(v5 + 4);
            v110 = (char *)(v5 + 4 - v25);
            if (v50 <= v5 + 4)
            {
              v113 = (char *)(v5 + 4);
            }
            else
            {
              v111 = *(_QWORD *)v109 ^ *(_QWORD *)v110;
              if (v111)
              {
                v112 = __clz(__rbit64(v111)) >> 3;
                goto LABEL_154;
              }
              v117 = v5 + 12;
              while (1)
              {
                v118 = (_QWORD *)(v117 + v111);
                if (v117 + v111 >= v50)
                  break;
                v119 = *(_QWORD *)(v5 + 12 - v25 + v111);
                v111 += 8;
                v120 = *v118 ^ v119;
                if (v120)
                {
                  v112 = v111 + (__clz(__rbit64(v120)) >> 3);
                  goto LABEL_154;
                }
              }
              v113 = (char *)(v5 + v111 + 12);
              v110 = &v113[-v25];
            }
            if (v113 < v135 && *(_DWORD *)v110 == *(_DWORD *)v113)
            {
              v113 += 4;
              v110 += 4;
            }
            if (v113 < v134 && *(unsigned __int16 *)v110 == *(unsigned __int16 *)v113)
            {
              v113 += 2;
              v110 += 2;
            }
            if (v113 < v137 && *v110 == *v113)
              ++v113;
            v112 = v113 - v109;
LABEL_154:
            v114 = *(_OWORD **)(a2 + 24);
            if (v5 <= (unint64_t)v51)
            {
              *v114 = *(_OWORD *)v5;
            }
            else
            {
              sub_1D4B56E1C(v114, (char *)v5, v5, v51);
              v7 = v136;
              v51 = v137 - 32;
            }
            v115 = *(_QWORD *)(a2 + 8);
            *(_WORD *)(v115 + 4) = 0;
            *(_DWORD *)v115 = 1;
            if (v112 + 1 >= 0x10000)
            {
              v116 = (unint64_t)(v115 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v116;
            }
            *(_WORD *)(v115 + 6) = v112 + 1;
            *(_QWORD *)(a2 + 8) = v115 + 8;
            v5 += v112 + 4;
            if (!(_DWORD)v108)
            {
              v24 = v108;
              break;
            }
            v107 = v25;
            v24 = v108;
            v16 = v5;
            if (v5 > v7)
              goto LABEL_170;
          }
        }
        v16 = v5;
        goto LABEL_170;
      }
      v66 = v16 - v5;
      v16 += ((v16 - v5) >> 8) + 1;
      *(_DWORD *)(a1 + 300) = v66 > 0x7FF;
LABEL_170:
      if (v16 >= v7)
      {
        a3 = v129;
        v15 = v127;
        v14 = v128;
        v23 = v126;
        break;
      }
    }
  }
  if (v15 <= v23)
    v121 = 0;
  else
    v121 = v15;
  if (v14 <= v23)
    v122 = 0;
  else
    v122 = v14;
  if ((_DWORD)v25)
    v123 = v25;
  else
    v123 = v121;
  if ((_DWORD)v25)
    v124 = v121 == 0;
  else
    v124 = 1;
  if (v124)
    v121 = v122;
  if ((_DWORD)v24)
    v121 = v24;
  *a3 = v123;
  a3[1] = v121;
  return &v137[-v5];
}

unint64_t sub_1D4B6E648(uint64_t a1, uint64_t a2, _DWORD *a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t v76;
  _OWORD *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _OWORD *v82;
  __int128 *v83;
  __int128 v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  char v95;
  char v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  unint64_t v114;
  _OWORD *v115;
  uint64_t v116;
  unint64_t v117;
  _DWORD *v119;
  unint64_t v120;
  unsigned int v121;
  uint64_t v122;
  char *v123;
  unsigned int v124;
  char *v125;
  _QWORD *v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  int v131;
  int v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;

  v5 = (unint64_t)a4;
  v7 = a1;
  v134 = (unint64_t)a4 + a5;
  v8 = (unint64_t)a4 + a5 - 16;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unsigned int *)(a1 + 24);
  v11 = *(_DWORD *)(a1 + 272);
  if (v11 >= 6)
    v11 = 6;
  if (v11 <= 4)
    v12 = 4;
  else
    v12 = v11;
  if (*(_DWORD *)(a1 + 268) >= 6u)
    v13 = 6;
  else
    v13 = *(_DWORD *)(a1 + 268);
  if (v13 <= 4)
    v14 = 4;
  else
    v14 = v13;
  LODWORD(v16) = *a3;
  v15 = a3[1];
  v17 = *(_QWORD *)(a1 + 248);
  v18 = *(unsigned int *)(v17 + 24);
  v129 = *(_QWORD *)(v17 + 8);
  v125 = *(char **)v17;
  v126 = (_QWORD *)(v9 + v10);
  v120 = v129 + v18;
  if ((_DWORD)a4 - ((_DWORD)v9 + (_DWORD)v10) - ((_DWORD)v129 + (_DWORD)v18) + *(_QWORD *)v17)
    v19 = a4;
  else
    v19 = (_QWORD *)((char *)a4 + 1);
  *(_DWORD *)(a1 + 300) = 0;
  v20 = *(unsigned int *)(a1 + 44);
  v21 = v8 - (v9 + v20);
  if ((v21 + 1) < 8)
    v22 = v21 + 1;
  else
    v22 = 8;
  v133 = v8;
  if (v8 >= v9 + v20)
    v23 = v22;
  else
    v23 = 0;
  v24 = (v23 + v20);
  if (v20 < v24)
  {
    v25 = *(_QWORD *)(a1 + 112);
    v26 = *(_QWORD *)(a1 + 56);
    v27 = *(_DWORD *)(a1 + 52);
    v28 = *(_QWORD *)(a1 + 96);
    v29 = 56 - v27;
    v30 = 24 - v27;
    do
    {
      if (v12 == 5)
      {
        v31 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v20);
      }
      else
      {
        if (v12 != 6)
        {
          LODWORD(v32) = ((-1640531535 * *(_DWORD *)(v9 + v20)) ^ v28) >> v30;
          goto LABEL_29;
        }
        v31 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v20);
      }
      v32 = (v31 ^ v28) >> v29;
LABEL_29:
      v33 = v32 >> 8 << v14;
      _X3 = v25 + 4 * v33;
      __asm { PRFM            #0, [X3] }
      if (v13 > 4)
      {
        __asm { PRFM            #0, [X3,#0x40] }
        _X1 = v26 + v33;
        __asm { PRFM            #0, [X1] }
        if (v14 == 6)
          __asm { PRFM            #0, [X1,#0x20] }
      }
      else
      {
        _X1 = v26 + v33;
        __asm { PRFM            #0, [X1] }
      }
      *(_DWORD *)(v7 + 4 * (v20++ & 7) + 64) = v32;
    }
    while (v24 != v20);
  }
  if ((unint64_t)v19 < v8)
  {
    v121 = v13;
    v119 = a3;
    v123 = (char *)(v134 - 32);
    v128 = v10 + v129 - (_DWORD)v125;
    v127 = v7;
    v132 = v12;
    v131 = v14;
    v122 = a2;
    while (1)
    {
      v46 = (_DWORD)v19 - v9 - v16;
      v47 = (v46 + 1);
      v48 = v129 + v47 - v128;
      if (v47 >= v10)
        v48 = v9 + v47;
      if ((v10 - v46 - 5) <= 0xFFFFFFFC && *(_DWORD *)v48 == *(_DWORD *)((char *)v19 + 1))
      {
        v49 = v47 >= v10 ? (char *)v134 : v125;
        v50 = sub_1D4B5F19C((_QWORD *)((char *)v19 + 5), (char *)(v48 + 4), v134, v49, v126) + 4;
      }
      else
      {
        v50 = 0;
      }
      v135 = 999999999;
      if (v132 == 6)
      {
        if (v131 == 6)
          v51 = sub_1D4B81980(v7, v19, v134, &v135);
        else
          v51 = v131 == 5 ? sub_1D4B812B4(v7, v19, v134, &v135) : sub_1D4B80C10(v7, v19, v134, &v135);
      }
      else if (v132 == 5)
      {
        if (v131 == 6)
          v51 = sub_1D4B80530(v7, v19, v134, &v135);
        else
          v51 = v131 == 5 ? sub_1D4B7FE64(v7, v19, v134, &v135) : sub_1D4B7F7C0(v7, v19, v134, &v135);
      }
      else if (v131 == 6)
      {
        v51 = sub_1D4B7F0E4(v7, v19, v134, &v135);
      }
      else
      {
        v51 = v131 == 5 ? sub_1D4B7EA1C(v7, v19, v134, &v135) : sub_1D4B7E37C(v7, v19, v134, &v135);
      }
      v52 = v51 <= v50 ? v50 : v51;
      if (v52 >= 4)
        break;
      v53 = (unint64_t)v19 - v5;
      v19 = (_QWORD *)((char *)v19 + (((unint64_t)v19 - v5) >> 8) + 1);
      v7 = v127;
      *(_DWORD *)(v127 + 300) = v53 > 0x7FF;
LABEL_205:
      if ((unint64_t)v19 >= v133)
      {
        a3 = v119;
        goto LABEL_207;
      }
    }
    v124 = v15;
    v130 = v16;
    if (v51 <= v50)
      v54 = (_DWORD *)((char *)v19 + 1);
    else
      v54 = v19;
    if (v51 <= v50)
      v55 = 1;
    else
      v55 = v135;
    v16 = v52;
    v56 = v55;
    v57 = v54;
    if ((unint64_t)v19 < v133)
    {
      while (1)
      {
        v57 = (_DWORD *)((char *)v19 + 1);
        v58 = (_DWORD)v19 + 1 - (_DWORD)v9 - v130;
        v59 = v129 + v58 - v128;
        if (v58 >= v10)
          v59 = v9 + v58;
        if ((v10 + ~(_DWORD)v58) < 3)
        {
          v60 = v132;
        }
        else
        {
          v60 = v132;
          if (*(_DWORD *)v59 == *v57)
          {
            v61 = v58 >= v10 ? (char *)v134 : v125;
            v62 = sub_1D4B5F19C((_QWORD *)((char *)v19 + 5), (char *)(v59 + 4), v134, v61, v126);
            if (v62 <= 0xFFFFFFFFFFFFFFFBLL && 3 * ((int)v62 + 4) > (int)(3 * v52 + __clz(v55) - 30))
            {
              v52 = v62 + 4;
              v55 = 1;
              v54 = (_DWORD *)((char *)v19 + 1);
            }
          }
        }
        v135 = 999999999;
        if (v60 == 6)
        {
          if (v131 == 6)
            v63 = sub_1D4B81980(v127, (_QWORD *)((char *)v19 + 1), v134, &v135);
          else
            v63 = v131 == 5
                ? sub_1D4B812B4(v127, (_QWORD *)((char *)v19 + 1), v134, &v135)
                : sub_1D4B80C10(v127, (_QWORD *)((char *)v19 + 1), v134, &v135);
        }
        else if (v60 == 5)
        {
          if (v131 == 6)
            v63 = sub_1D4B80530(v127, (_QWORD *)((char *)v19 + 1), v134, &v135);
          else
            v63 = v131 == 5
                ? sub_1D4B7FE64(v127, (_QWORD *)((char *)v19 + 1), v134, &v135)
                : sub_1D4B7F7C0(v127, (_QWORD *)((char *)v19 + 1), v134, &v135);
        }
        else if (v131 == 6)
        {
          v63 = sub_1D4B7F0E4(v127, (_QWORD *)((char *)v19 + 1), v134, &v135);
        }
        else
        {
          v63 = v131 == 5
              ? sub_1D4B7EA1C(v127, (_QWORD *)((char *)v19 + 1), v134, &v135)
              : sub_1D4B7E37C(v127, (_QWORD *)((char *)v19 + 1), v134, &v135);
        }
        v16 = v63;
        if (v63 < 4 || (v56 = v135, (int)(__clz(v135) + 4 * v63 - 31) <= (int)(__clz(v55) + 4 * v52 - 27)))
        {
          if ((unint64_t)v57 >= v133)
            break;
          v57 = (_DWORD *)((char *)v19 + 2);
          v64 = (_DWORD)v19 + 2 - (_DWORD)v9 - v130;
          v65 = v129 + v64 - v128;
          if (v64 >= v10)
            v65 = v9 + v64;
          if ((v10 + ~(_DWORD)v64) < 3)
          {
            v66 = v132;
          }
          else
          {
            v66 = v132;
            if (*(_DWORD *)v65 == *v57)
            {
              v67 = v64 >= v10 ? (char *)v134 : v125;
              v68 = sub_1D4B5F19C((_QWORD *)((char *)v19 + 6), (char *)(v65 + 4), v134, v67, v126);
              if (v68 <= 0xFFFFFFFFFFFFFFFBLL && (int)(__clz(v55) + 4 * v52 - 30) < 4 * ((int)v68 + 4))
              {
                v52 = v68 + 4;
                v55 = 1;
                v54 = (_DWORD *)((char *)v19 + 2);
              }
            }
          }
          v135 = 999999999;
          if (v66 == 6)
          {
            if (v131 == 6)
              v69 = sub_1D4B81980(v127, (_QWORD *)((char *)v19 + 2), v134, &v135);
            else
              v69 = v131 == 5
                  ? sub_1D4B812B4(v127, (_QWORD *)((char *)v19 + 2), v134, &v135)
                  : sub_1D4B80C10(v127, (_QWORD *)((char *)v19 + 2), v134, &v135);
          }
          else if (v66 == 5)
          {
            if (v131 == 6)
              v69 = sub_1D4B80530(v127, (_QWORD *)((char *)v19 + 2), v134, &v135);
            else
              v69 = v131 == 5
                  ? sub_1D4B7FE64(v127, (_QWORD *)((char *)v19 + 2), v134, &v135)
                  : sub_1D4B7F7C0(v127, (_QWORD *)((char *)v19 + 2), v134, &v135);
          }
          else if (v131 == 6)
          {
            v69 = sub_1D4B7F0E4(v127, (_QWORD *)((char *)v19 + 2), v134, &v135);
          }
          else
          {
            v69 = v131 == 5
                ? sub_1D4B7EA1C(v127, (_QWORD *)((char *)v19 + 2), v134, &v135)
                : sub_1D4B7E37C(v127, (_QWORD *)((char *)v19 + 2), v134, &v135);
          }
          v16 = v69;
          if (v69 < 4)
            break;
          v56 = v135;
          if ((int)(__clz(v135) + 4 * v69 - 31) <= (int)(__clz(v55) + 4 * v52 - 24))
            break;
        }
        v19 = v57;
        v54 = v57;
        v55 = v56;
        v52 = v16;
        if ((unint64_t)v57 >= v133)
          goto LABEL_138;
      }
      v16 = v52;
      v56 = v55;
      v57 = v54;
    }
LABEL_138:
    if (v56 <= 3)
    {
      v7 = v127;
    }
    else
    {
      v70 = v9 + v10;
      if (v10 > (int)v57 - ((int)v56 + (int)v9) + 3)
        v70 = v120;
      v71 = v129 - v128;
      if (v10 <= (int)v57 - ((int)v56 + (int)v9) + 3)
        v71 = v9;
      if ((unint64_t)v57 <= v5 || v71 + (unint64_t)((_DWORD)v57 - (v56 + v9) + 3) <= v70)
      {
        v7 = v127;
      }
      else
      {
        v72 = (unsigned __int8 *)(v71 + ((_DWORD)v57 - (v56 + v9) + 3) - 1);
        v73 = (unsigned __int8 *)v57 - 1;
        v7 = v127;
        while (*v73 == *v72)
        {
          ++v16;
          v74 = v73 - 1;
          if ((unint64_t)v73 > v5)
          {
            --v73;
            if ((unint64_t)v72-- > v70)
              continue;
          }
          v57 = v74 + 1;
          goto LABEL_153;
        }
        v57 = v73 + 1;
      }
LABEL_153:
      v124 = v130;
      v130 = v56 - 3;
    }
    v76 = (uint64_t)v57 - v5;
    v77 = *(_OWORD **)(v122 + 24);
    if (v57 <= (_DWORD *)v123)
    {
      *v77 = *(_OWORD *)v5;
      v80 = *(_QWORD *)(v122 + 24);
      if ((unint64_t)v76 <= 0x10)
      {
        *(_QWORD *)(v122 + 24) = v80 + v76;
        v78 = *(_QWORD *)(v122 + 8);
        goto LABEL_164;
      }
      *(_OWORD *)(v80 + 16) = *(_OWORD *)(v5 + 16);
      if (v76 >= 33)
      {
        v81 = v80 + v76;
        v82 = (_OWORD *)(v80 + 32);
        v83 = (__int128 *)(v5 + 48);
        do
        {
          *v82 = *(v83 - 1);
          v84 = *v83;
          v83 += 2;
          v82[1] = v84;
          v82 += 2;
        }
        while ((unint64_t)v82 < v81);
      }
    }
    else
    {
      sub_1D4B56E1C(v77, (char *)v5, (unint64_t)v57, v123);
    }
    *(_QWORD *)(v122 + 24) += v76;
    v78 = *(_QWORD *)(v122 + 8);
    if ((unint64_t)v76 >= 0x10000)
    {
      v79 = (unint64_t)(v78 - *(_QWORD *)v122) >> 3;
      *(_DWORD *)(v122 + 72) = 1;
      *(_DWORD *)(v122 + 76) = v79;
    }
LABEL_164:
    *(_WORD *)(v78 + 4) = v76;
    *(_DWORD *)v78 = v56;
    if (v16 - 3 >= 0x10000)
    {
      v85 = (unint64_t)(v78 - *(_QWORD *)v122) >> 3;
      *(_DWORD *)(v122 + 72) = 2;
      *(_DWORD *)(v122 + 76) = v85;
    }
    *(_WORD *)(v78 + 6) = v16 - 3;
    *(_QWORD *)(v122 + 8) = v78 + 8;
    if (*(_DWORD *)(v7 + 300))
    {
      v86 = *(unsigned int *)(v7 + 44);
      v87 = v133 - (v9 + v86);
      if ((v87 + 1) < 8)
        v88 = v87 + 1;
      else
        v88 = 8;
      if (v133 >= v9 + v86)
        v89 = v88;
      else
        v89 = 0;
      v90 = (v89 + v86);
      if (v86 < v90)
      {
        v91 = *(_QWORD *)(v7 + 112);
        v92 = *(_QWORD *)(v7 + 56);
        v93 = *(_DWORD *)(v7 + 52);
        v94 = *(_QWORD *)(v7 + 96);
        v95 = 56 - v93;
        v96 = 24 - v93;
        do
        {
          if (v132 == 5)
          {
            v97 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v86);
          }
          else
          {
            if (v132 != 6)
            {
              LODWORD(v98) = ((-1640531535 * *(_DWORD *)(v9 + v86)) ^ v94) >> v96;
              goto LABEL_181;
            }
            v97 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v86);
          }
          v98 = (v97 ^ v94) >> v95;
LABEL_181:
          v99 = v98 >> 8 << v131;
          _X17 = v91 + 4 * v99;
          __asm { PRFM            #0, [X17] }
          if (v121 > 4)
          {
            __asm { PRFM            #0, [X17,#0x40] }
            _X16 = v92 + v99;
            __asm { PRFM            #0, [X16] }
            if (v131 == 6)
              __asm { PRFM            #0, [X16,#0x20] }
          }
          else
          {
            _X16 = v92 + v99;
            __asm { PRFM            #0, [X16] }
          }
          *(_DWORD *)(v7 + 4 * (v86++ & 7) + 64) = v98;
        }
        while (v90 != v86);
      }
      *(_DWORD *)(v7 + 300) = 0;
    }
    v5 = (unint64_t)v57 + v16;
    if ((unint64_t)v57 + v16 <= v133)
    {
      v108 = v130;
      v109 = v124;
      while (1)
      {
        v16 = v109;
        v109 = v108;
        v110 = (v5 - v9 - v16);
        v111 = v129 - v128;
        if (v110 >= v10)
          v111 = v9;
        if ((v10 + ~(_DWORD)v110) < 3)
          break;
        v112 = v111 + v110;
        if (*(_DWORD *)v112 != *(_DWORD *)v5)
          break;
        if (v110 >= v10)
          v113 = (char *)v134;
        else
          v113 = v125;
        v114 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v112 + 4), v134, v113, v126);
        v115 = *(_OWORD **)(v122 + 24);
        if (v5 <= (unint64_t)v123)
          *v115 = *(_OWORD *)v5;
        else
          sub_1D4B56E1C(v115, (char *)v5, v5, v123);
        v116 = *(_QWORD *)(v122 + 8);
        *(_WORD *)(v116 + 4) = 0;
        *(_DWORD *)v116 = 1;
        if (v114 + 1 >= 0x10000)
        {
          v117 = (unint64_t)(v116 - *(_QWORD *)v122) >> 3;
          *(_DWORD *)(v122 + 72) = 2;
          *(_DWORD *)(v122 + 76) = v117;
        }
        *(_WORD *)(v116 + 6) = v114 + 1;
        v5 += v114 + 4;
        *(_QWORD *)(v122 + 8) = v116 + 8;
        v108 = v16;
        v15 = v109;
        v19 = (_QWORD *)v5;
        if (v5 > v133)
          goto LABEL_205;
      }
      v15 = v16;
      LODWORD(v16) = v108;
      v19 = (_QWORD *)v5;
    }
    else
    {
      v19 = (_QWORD *)((char *)v57 + v16);
      LODWORD(v16) = v130;
      v15 = v124;
    }
    goto LABEL_205;
  }
LABEL_207:
  *a3 = v16;
  a3[1] = v15;
  return v134 - v5;
}

unint64_t sub_1D4B6F238(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  uint64_t v72;
  _OWORD *v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _OWORD *v79;
  __int128 *v80;
  __int128 v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  char v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  _OWORD *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v118;
  uint64_t v119;
  unsigned int v121;
  unint64_t v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  char *v126;
  char *v127;
  unint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  unsigned int v134[4];

  v5 = a4;
  v6 = a1;
  v7 = a4 + a5;
  v8 = a4 + a5 - 16;
  v9 = *(_QWORD *)(a1 + 8);
  v133 = *(unsigned int *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 272);
  if (v10 >= 6)
    v10 = 6;
  if (v10 <= 4)
    v11 = 4;
  else
    v11 = v10;
  if (*(_DWORD *)(v6 + 268) >= 6u)
    v12 = 6;
  else
    v12 = *(_DWORD *)(v6 + 268);
  if (v12 <= 4)
    v13 = 4;
  else
    v13 = v12;
  v14 = *a3;
  v124 = a3[1];
  v15 = *(_QWORD *)(v6 + 248);
  v129 = (_QWORD *)(v9 + v133);
  v130 = *(_QWORD *)(v15 + 8);
  v118 = v130 + *(unsigned int *)(v15 + 24);
  v127 = *(char **)v15;
  if ((_DWORD)a4 - ((_DWORD)v9 + (_DWORD)v133) - (_DWORD)v118 + *(_QWORD *)v15)
    v16 = a4;
  else
    v16 = a4 + 1;
  *(_DWORD *)(v6 + 300) = 0;
  v17 = *(unsigned int *)(v6 + 44);
  v18 = v8 - (v9 + v17);
  if ((v18 + 1) < 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  if (v8 >= v9 + v17)
    v20 = v19;
  else
    v20 = 0;
  v21 = (v20 + v17);
  v131 = v11;
  if (v17 < v21)
  {
    v22 = *(_QWORD *)(v6 + 112);
    v23 = *(_QWORD *)(v6 + 56);
    v24 = *(_DWORD *)(v6 + 52);
    v25 = *(_QWORD *)(v6 + 96);
    v26 = 56 - v24;
    v27 = 24 - v24;
    do
    {
      if (v11 == 5)
      {
        v28 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v17);
      }
      else
      {
        if (v11 != 6)
        {
          LODWORD(v29) = ((-1640531535 * *(_DWORD *)(v9 + v17)) ^ v25) >> v27;
          goto LABEL_29;
        }
        v28 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v17);
      }
      v29 = (v28 ^ v25) >> v26;
LABEL_29:
      v30 = v29 >> 8 << v13;
      _X2 = v22 + 4 * v30;
      __asm { PRFM            #0, [X2] }
      if (v12 > 4)
      {
        __asm { PRFM            #0, [X2,#0x40] }
        _X2 = v23 + v30;
        __asm { PRFM            #0, [X2] }
        if (v13 == 6)
          __asm { PRFM            #0, [X2,#0x20] }
      }
      else
      {
        _X2 = v23 + v30;
        __asm { PRFM            #0, [X2] }
      }
      *(_DWORD *)(v6 + 4 * (v17++ & 7) + 64) = v29;
      v11 = v131;
    }
    while (v21 != v17);
  }
  if (v16 < v8)
  {
    v126 = (char *)(v7 - 32);
    v119 = v5 + a5 - 16;
    v123 = v133 + v130 - (_DWORD)v127;
    v132 = v13;
    v128 = v7;
    v125 = v6;
    v122 = v8;
    v121 = v12;
    do
    {
      v43 = v16 - v9 - v14;
      v44 = (v43 + 1);
      v45 = v130 + v44 - v123;
      if (v44 >= v133)
        v45 = v9 + v44;
      if ((v133 - v43 - 5) <= 0xFFFFFFFC && *(_DWORD *)v45 == *(_DWORD *)(v16 + 1))
      {
        if (v44 >= v133)
          v46 = (char *)v7;
        else
          v46 = v127;
        v47 = sub_1D4B5F19C((_QWORD *)(v16 + 5), (char *)(v45 + 4), v7, v46, v129) + 4;
        v11 = v131;
        v13 = v132;
      }
      else
      {
        v47 = 0;
      }
      *(_QWORD *)v134 = 999999999;
      if (v11 == 6)
      {
        if (v13 == 6)
        {
          v48 = sub_1D4B81980(v6, (_QWORD *)v16, v7, v134);
        }
        else if (v13 == 5)
        {
          v48 = sub_1D4B812B4(v6, (_QWORD *)v16, v7, v134);
        }
        else
        {
          v48 = sub_1D4B80C10(v6, (_QWORD *)v16, v7, v134);
        }
      }
      else if (v11 == 5)
      {
        if (v13 == 6)
        {
          v48 = sub_1D4B80530(v6, (_QWORD *)v16, v7, v134);
        }
        else if (v13 == 5)
        {
          v48 = sub_1D4B7FE64(v6, (_QWORD *)v16, v7, v134);
        }
        else
        {
          v48 = sub_1D4B7F7C0(v6, (_QWORD *)v16, v7, v134);
        }
      }
      else if (v13 == 6)
      {
        v48 = sub_1D4B7F0E4(v6, (_QWORD *)v16, v7, v134);
      }
      else if (v13 == 5)
      {
        v48 = sub_1D4B7EA1C(v6, (_QWORD *)v16, v7, v134);
      }
      else
      {
        v48 = sub_1D4B7E37C(v6, (_QWORD *)v16, v7, v134);
      }
      if (v48 <= v47)
        v49 = v47;
      else
        v49 = v48;
      if (v49 < 4)
      {
        v50 = v16 - v5;
        v16 += ((v16 - v5) >> 8) + 1;
        *(_DWORD *)(v6 + 300) = v50 > 0x7FF;
        v13 = v132;
        goto LABEL_159;
      }
      v51 = v8;
      if (v48 <= v47)
        v52 = v16 + 1;
      else
        v52 = v16;
      if (v48 <= v47)
        v53 = 1;
      else
        v53 = *(_QWORD *)v134;
      if (v16 >= v51)
      {
        v63 = a2;
        v13 = v132;
      }
      else
      {
        v54 = 0;
        v55 = v133 + v9 - 2 + v14 - v16;
        v13 = v132;
        while (1)
        {
          v56 = (_DWORD *)(v16 + v54 + 1);
          v57 = (v16 - v9 - v14 + v54 + 1);
          v58 = v130 + ((_DWORD)v127 - v133 - v130 - v9 + 1 + v16 - v14 + v54);
          if (v57 >= v133)
            v58 = v9 + v57;
          if (v55 >= 3 && *(_DWORD *)v58 == *v56)
          {
            v59 = v57 >= v133 ? (char *)v128 : v127;
            v60 = sub_1D4B5F19C((_QWORD *)(v16 + v54 + 5), (char *)(v58 + 4), v128, v59, v129);
            if (v60 > 0xFFFFFFFFFFFFFFFBLL)
            {
              v61 = v131;
              v13 = v132;
            }
            else
            {
              v61 = v131;
              v13 = v132;
              if (3 * ((int)v60 + 4) > (int)(3 * v49 + __clz(v53) - 30))
              {
                v49 = v60 + 4;
                v53 = 1;
                v52 = v16 + v54 + 1;
              }
            }
          }
          else
          {
            v61 = v131;
          }
          *(_QWORD *)v134 = 999999999;
          if (v61 == 6)
          {
            if (v13 == 6)
              v62 = sub_1D4B81980(v125, (_QWORD *)(v16 + v54 + 1), v128, v134);
            else
              v62 = v13 == 5
                  ? sub_1D4B812B4(v125, (_QWORD *)(v16 + v54 + 1), v128, v134)
                  : sub_1D4B80C10(v125, (_QWORD *)(v16 + v54 + 1), v128, v134);
          }
          else if (v61 == 5)
          {
            if (v13 == 6)
              v62 = sub_1D4B80530(v125, (_QWORD *)(v16 + v54 + 1), v128, v134);
            else
              v62 = v13 == 5
                  ? sub_1D4B7FE64(v125, (_QWORD *)(v16 + v54 + 1), v128, v134)
                  : sub_1D4B7F7C0(v125, (_QWORD *)(v16 + v54 + 1), v128, v134);
          }
          else if (v13 == 6)
          {
            v62 = sub_1D4B7F0E4(v125, (_QWORD *)(v16 + v54 + 1), v128, v134);
          }
          else
          {
            v62 = v13 == 5
                ? sub_1D4B7EA1C(v125, (_QWORD *)(v16 + v54 + 1), v128, v134)
                : sub_1D4B7E37C(v125, (_QWORD *)(v16 + v54 + 1), v128, v134);
          }
          v13 = v132;
          if (v62 < 4 || (int)(__clz(v134[0]) + 4 * v62 - 31) <= (int)(__clz(v53) + 4 * v49 - 27))
            break;
          ++v54;
          --v55;
          v52 = (unint64_t)v56;
          v53 = *(_QWORD *)v134;
          v49 = v62;
          if (v119 - v16 == v54)
          {
            v49 = v62;
            v53 = *(_QWORD *)v134;
            v52 = v119;
            break;
          }
        }
        v7 = v128;
        v63 = a2;
      }
      v64 = v126;
      v65 = v124;
      if (v53 > 3)
      {
        v66 = v9 + v133;
        if (v133 > (int)v52 - ((int)v53 + (int)v9) + 3)
          v66 = v118;
        v67 = v130 - v123;
        if (v133 <= (int)v52 - ((int)v53 + (int)v9) + 3)
          v67 = v9;
        if (v52 > v5 && v67 + (unint64_t)(v52 - (v53 + v9) + 3) > v66)
        {
          v68 = (unsigned __int8 *)(v67 + (v52 - (v53 + v9) + 3) - 1);
          v69 = (unsigned __int8 *)(v52 - 1);
          while (*v69 == *v68)
          {
            ++v49;
            v70 = v69 - 1;
            if ((unint64_t)v69 > v5)
            {
              --v69;
              if ((unint64_t)v68-- > v66)
                continue;
            }
            v52 = (unint64_t)(v70 + 1);
            goto LABEL_123;
          }
          v52 = (unint64_t)(v69 + 1);
        }
LABEL_123:
        v64 = v126;
        v65 = v14;
        v14 = (v53 - 3);
      }
      v72 = v52 - v5;
      v73 = *(_OWORD **)(v63 + 24);
      v124 = v65;
      if (v52 <= (unint64_t)v64)
      {
        *v73 = *(_OWORD *)v5;
        v77 = *(_QWORD *)(v63 + 24);
        if ((unint64_t)v72 <= 0x10)
        {
          *(_QWORD *)(v63 + 24) = v77 + v72;
          v75 = *(_QWORD *)(v63 + 8);
          v74 = v131;
          goto LABEL_134;
        }
        *(_OWORD *)(v77 + 16) = *(_OWORD *)(v5 + 16);
        v74 = v131;
        if (v72 >= 33)
        {
          v78 = v77 + v72;
          v79 = (_OWORD *)(v77 + 32);
          v80 = (__int128 *)(v5 + 48);
          do
          {
            *v79 = *(v80 - 1);
            v81 = *v80;
            v80 += 2;
            v79[1] = v81;
            v79 += 2;
          }
          while ((unint64_t)v79 < v78);
        }
      }
      else
      {
        sub_1D4B56E1C(v73, (char *)v5, v52, v64);
        v74 = v131;
        v13 = v132;
      }
      *(_QWORD *)(v63 + 24) += v72;
      v75 = *(_QWORD *)(v63 + 8);
      if ((unint64_t)v72 >= 0x10000)
      {
        v76 = (unint64_t)(v75 - *(_QWORD *)v63) >> 3;
        *(_DWORD *)(v63 + 72) = 1;
        *(_DWORD *)(v63 + 76) = v76;
      }
LABEL_134:
      *(_WORD *)(v75 + 4) = v72;
      *(_DWORD *)v75 = v53;
      if (v49 - 3 >= 0x10000)
      {
        v82 = (unint64_t)(v75 - *(_QWORD *)v63) >> 3;
        *(_DWORD *)(v63 + 72) = 2;
        *(_DWORD *)(v63 + 76) = v82;
      }
      *(_WORD *)(v75 + 6) = v49 - 3;
      *(_QWORD *)(v63 + 8) = v75 + 8;
      v6 = v125;
      if (*(_DWORD *)(v125 + 300))
      {
        v83 = *(unsigned int *)(v125 + 44);
        v84 = v122 - (v9 + v83);
        if ((v84 + 1) < 8)
          v85 = v84 + 1;
        else
          v85 = 8;
        if (v122 >= v9 + v83)
          v86 = v85;
        else
          v86 = 0;
        v87 = (v86 + v83);
        if (v83 < v87)
        {
          v88 = *(_QWORD *)(v125 + 112);
          v89 = *(_QWORD *)(v125 + 56);
          v90 = *(_DWORD *)(v125 + 52);
          v91 = *(_QWORD *)(v125 + 96);
          v92 = 56 - v90;
          v93 = 24 - v90;
          do
          {
            if (v74 == 5)
            {
              v94 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v83);
            }
            else
            {
              if (v74 != 6)
              {
                LODWORD(v95) = ((-1640531535 * *(_DWORD *)(v9 + v83)) ^ v91) >> v93;
                goto LABEL_151;
              }
              v94 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v83);
            }
            v95 = (v94 ^ v91) >> v92;
LABEL_151:
            v96 = v95 >> 8 << v13;
            _X17 = v88 + 4 * v96;
            __asm { PRFM            #0, [X17] }
            if (v121 > 4)
            {
              __asm { PRFM            #0, [X17,#0x40] }
              _X16 = v89 + v96;
              __asm { PRFM            #0, [X16] }
              if (v13 == 6)
                __asm { PRFM            #0, [X16,#0x20] }
            }
            else
            {
              _X16 = v89 + v96;
              __asm { PRFM            #0, [X16] }
            }
            *(_DWORD *)(v125 + 4 * (v83++ & 7) + 64) = v95;
          }
          while (v87 != v83);
        }
        *(_DWORD *)(v125 + 300) = 0;
      }
      v5 = v52 + v49;
      v8 = v122;
      if (v5 <= v122)
      {
        v106 = v14;
        v107 = v124;
        while (1)
        {
          v14 = v107;
          v107 = v106;
          v108 = (v5 - v9 - v14);
          v109 = v130 - v123;
          if (v108 >= v133)
            v109 = v9;
          if ((v133 + ~(_DWORD)v108) < 3)
            break;
          v110 = v109 + v108;
          if (*(_DWORD *)v110 != *(_DWORD *)v5)
            break;
          if (v108 >= v133)
            v111 = (char *)v7;
          else
            v111 = v127;
          v112 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v110 + 4), v7, v111, v129);
          v113 = *(_OWORD **)(v63 + 24);
          if (v5 <= (unint64_t)v126)
            *v113 = *(_OWORD *)v5;
          else
            sub_1D4B56E1C(v113, (char *)v5, v5, v126);
          v13 = v132;
          v114 = *(_QWORD *)(v63 + 8);
          *(_WORD *)(v114 + 4) = 0;
          *(_DWORD *)v114 = 1;
          if (v112 + 1 >= 0x10000)
          {
            v115 = (unint64_t)(v114 - *(_QWORD *)v63) >> 3;
            *(_DWORD *)(v63 + 72) = 2;
            *(_DWORD *)(v63 + 76) = v115;
          }
          *(_WORD *)(v114 + 6) = v112 + 1;
          v5 += v112 + 4;
          *(_QWORD *)(v63 + 8) = v114 + 8;
          v106 = v14;
          v105 = v107;
          v16 = v5;
          if (v5 > v122)
            goto LABEL_160;
        }
        v105 = v14;
        v14 = v106;
        v16 = v5;
        goto LABEL_160;
      }
      v16 = v5;
LABEL_159:
      v105 = v124;
LABEL_160:
      v124 = v105;
      v11 = v131;
    }
    while (v16 < v8);
  }
  *a3 = v14;
  a3[1] = v124;
  return v7 - v5;
}

unint64_t sub_1D4B6FC88(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  char *v63;
  uint64_t v64;
  _OWORD *v65;
  char *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _OWORD *v71;
  __int128 *v72;
  __int128 v73;
  uint64_t v74;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  char v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  _OWORD *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int v117;
  char *v119;
  _QWORD *v120;
  char *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;

  v5 = a4;
  v122 = a4 + a5;
  v7 = a4 + a5 - 16;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 272);
  if (v10 >= 6)
    v10 = 6;
  if (v10 <= 4)
    v11 = 4;
  else
    v11 = v10;
  v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 6)
    v12 = 6;
  v117 = v12;
  if (v12 <= 4)
    v13 = 4;
  else
    v13 = v12;
  v14 = *a3;
  v15 = a3[1];
  v16 = *(_QWORD *)(a1 + 248);
  v17 = *(unsigned int *)(v16 + 24);
  v114 = *(_QWORD *)(v16 + 8);
  v120 = (_QWORD *)(v8 + v9);
  v112 = v114 + v17;
  v119 = *(char **)v16;
  if ((_DWORD)a4 - ((_DWORD)v8 + (_DWORD)v9) - ((_DWORD)v114 + (_DWORD)v17) + *(_QWORD *)v16)
    v18 = a4;
  else
    v18 = a4 + 1;
  *(_DWORD *)(a1 + 300) = 0;
  v19 = *(unsigned int *)(a1 + 44);
  v20 = v7 - (v8 + v19);
  if ((v20 + 1) < 8)
    v21 = v20 + 1;
  else
    v21 = 8;
  v123 = a4 + a5 - 16;
  if (v7 >= v8 + v19)
    v22 = v21;
  else
    v22 = 0;
  v23 = (v22 + v19);
  if (v19 < v23)
  {
    v24 = *(_QWORD *)(a1 + 112);
    v25 = *(_QWORD *)(a1 + 56);
    v26 = *(_DWORD *)(a1 + 52);
    v27 = *(_QWORD *)(a1 + 96);
    v28 = 56 - v26;
    v29 = 24 - v26;
    do
    {
      if (v11 == 5)
      {
        v30 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v8 + v19);
      }
      else
      {
        if (v11 != 6)
        {
          LODWORD(v31) = ((-1640531535 * *(_DWORD *)(v8 + v19)) ^ v27) >> v29;
          goto LABEL_28;
        }
        v30 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v8 + v19);
      }
      v31 = (v30 ^ v27) >> v28;
LABEL_28:
      v32 = v31 >> 8 << v13;
      _X2 = v24 + 4 * v32;
      __asm { PRFM            #0, [X2] }
      if (v117 > 4)
      {
        __asm { PRFM            #0, [X2,#0x40] }
        _X1 = v25 + v32;
        __asm { PRFM            #0, [X1] }
        if (v13 == 6)
          __asm { PRFM            #0, [X1,#0x20] }
      }
      else
      {
        _X1 = v25 + v32;
        __asm { PRFM            #0, [X1] }
      }
      *(_DWORD *)(a1 + 4 * (v19++ & 7) + 64) = v31;
    }
    while (v23 != v19);
  }
  if (v18 < v123)
  {
    v121 = (char *)(v122 - 32);
    v113 = v9 + v114 - (_DWORD)v119;
    do
    {
      v45 = v18 - v8 - v14;
      v46 = (v45 + 1);
      v47 = v114 + v46 - v113;
      if (v46 >= v9)
        v47 = v8 + v46;
      if ((v9 - v45 - 5) <= 0xFFFFFFFC && *(_DWORD *)v47 == *(_DWORD *)(v18 + 1))
      {
        if (v46 >= v9)
          v48 = (char *)v122;
        else
          v48 = v119;
        v49 = sub_1D4B5F19C((_QWORD *)(v18 + 5), (char *)(v47 + 4), v122, v48, v120);
        v50 = v18 + 1;
        v51 = v49 + 4;
        LODWORD(v52) = 1;
LABEL_81:
        v63 = (char *)(v122 - 32);
        goto LABEL_84;
      }
      v124 = 999999999;
      if (v11 == 6)
      {
        if (v13 == 6)
        {
          v53 = v18 + 1;
          v54 = sub_1D4B81980(a1, (_QWORD *)v18, v122, &v124);
          goto LABEL_59;
        }
        if (v13 == 5)
        {
          v53 = v18 + 1;
          v54 = sub_1D4B812B4(a1, (_QWORD *)v18, v122, &v124);
          goto LABEL_59;
        }
        v115 = v18 + 1;
        v55 = sub_1D4B80C10(a1, (_QWORD *)v18, v122, &v124);
      }
      else if (v11 == 5)
      {
        if (v13 == 6)
        {
          v53 = v18 + 1;
          v54 = sub_1D4B80530(a1, (_QWORD *)v18, v122, &v124);
          goto LABEL_59;
        }
        if (v13 == 5)
        {
          v53 = v18 + 1;
          v54 = sub_1D4B7FE64(a1, (_QWORD *)v18, v122, &v124);
LABEL_59:
          v50 = v53;
          v51 = v54;
          goto LABEL_62;
        }
        v115 = v18 + 1;
        v55 = sub_1D4B7F7C0(a1, (_QWORD *)v18, v122, &v124);
      }
      else
      {
        if (v13 == 6)
        {
          v53 = v18 + 1;
          v54 = sub_1D4B7F0E4(a1, (_QWORD *)v18, v122, &v124);
          goto LABEL_59;
        }
        if (v13 == 5)
        {
          v53 = v18 + 1;
          v54 = sub_1D4B7EA1C(a1, (_QWORD *)v18, v122, &v124);
          goto LABEL_59;
        }
        v115 = v18 + 1;
        v55 = sub_1D4B7E37C(a1, (_QWORD *)v18, v122, &v124);
      }
      v51 = v55;
      v50 = v115;
LABEL_62:
      if (v51)
        v52 = v124;
      else
        v52 = 1;
      if (v51)
        v50 = v18;
      if (v51 <= 3)
      {
        v56 = v18 - v5;
        v18 += ((v18 - v5) >> 8) + 1;
        *(_DWORD *)(a1 + 300) = v56 > 0x7FF;
        continue;
      }
      if (v52 < 4)
        goto LABEL_81;
      v57 = v8 + v9;
      if (v9 > (int)v50 - (int)v8 - (int)v52 + 3)
        v57 = v112;
      v58 = v114 - v113;
      if (v9 <= (int)v50 - (int)v8 - (int)v52 + 3)
        v58 = v8;
      if (v50 > v5 && v58 + (unint64_t)(v50 - v8 - v52 + 3) > v57)
      {
        v59 = (unsigned __int8 *)(v58 + (v50 - v8 - v52 + 3) - 1);
        v60 = (unsigned __int8 *)(v50 - 1);
        while (*v60 == *v59)
        {
          ++v51;
          v61 = v60 - 1;
          if ((unint64_t)v60 > v5)
          {
            --v60;
            if ((unint64_t)v59-- > v57)
              continue;
          }
          v50 = (unint64_t)(v61 + 1);
          goto LABEL_83;
        }
        v50 = (unint64_t)(v60 + 1);
      }
LABEL_83:
      v63 = (char *)(v122 - 32);
      v15 = v14;
      v14 = (v52 - 3);
LABEL_84:
      v64 = v50 - v5;
      v65 = *(_OWORD **)(a2 + 24);
      if (v50 > (unint64_t)v63)
      {
        v66 = (char *)v5;
        v116 = v50;
        v67 = v52;
        sub_1D4B56E1C(v65, v66, v50, v63);
        LODWORD(v52) = v67;
        v68 = a1;
LABEL_90:
        *(_QWORD *)(a2 + 24) += v64;
        v74 = *(_QWORD *)(a2 + 8);
        v75 = v117;
        if ((unint64_t)v64 >= 0x10000)
        {
          v76 = (unint64_t)(v74 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 1;
          *(_DWORD *)(a2 + 76) = v76;
        }
        v50 = v116;
        goto LABEL_94;
      }
      *v65 = *(_OWORD *)v5;
      v69 = *(_QWORD *)(a2 + 24);
      if ((unint64_t)v64 > 0x10)
      {
        v116 = v50;
        *(_OWORD *)(v69 + 16) = *(_OWORD *)(v5 + 16);
        v68 = a1;
        if (v64 >= 33)
        {
          v70 = v69 + v64;
          v71 = (_OWORD *)(v69 + 32);
          v72 = (__int128 *)(v5 + 48);
          do
          {
            *v71 = *(v72 - 1);
            v73 = *v72;
            v72 += 2;
            v71[1] = v73;
            v71 += 2;
          }
          while ((unint64_t)v71 < v70);
        }
        goto LABEL_90;
      }
      *(_QWORD *)(a2 + 24) = v69 + v64;
      v74 = *(_QWORD *)(a2 + 8);
      v68 = a1;
      v75 = v117;
LABEL_94:
      *(_WORD *)(v74 + 4) = v64;
      *(_DWORD *)v74 = v52;
      if (v51 - 3 >= 0x10000)
      {
        v77 = (unint64_t)(v74 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v77;
      }
      *(_WORD *)(v74 + 6) = v51 - 3;
      *(_QWORD *)(a2 + 8) = v74 + 8;
      if (*(_DWORD *)(v68 + 300))
      {
        v78 = *(unsigned int *)(v68 + 44);
        v79 = v123 - (v8 + v78);
        if ((v79 + 1) < 8)
          v80 = v79 + 1;
        else
          v80 = 8;
        if (v123 >= v8 + v78)
          v81 = v80;
        else
          v81 = 0;
        v82 = (v81 + v78);
        if (v78 < v82)
        {
          v83 = *(_QWORD *)(v68 + 112);
          v84 = *(_QWORD *)(v68 + 56);
          v85 = *(_DWORD *)(v68 + 52);
          v86 = *(_QWORD *)(v68 + 96);
          v87 = 56 - v85;
          v88 = 24 - v85;
          do
          {
            if (v11 == 5)
            {
              v89 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v8 + v78);
            }
            else
            {
              if (v11 != 6)
              {
                LODWORD(v90) = ((-1640531535 * *(_DWORD *)(v8 + v78)) ^ v86) >> v88;
                goto LABEL_111;
              }
              v89 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v8 + v78);
            }
            v90 = (v89 ^ v86) >> v87;
LABEL_111:
            v91 = v90 >> 8 << v13;
            _X17 = v83 + 4 * v91;
            __asm { PRFM            #0, [X17] }
            if (v75 > 4)
            {
              __asm { PRFM            #0, [X17,#0x40] }
              _X16 = v84 + v91;
              __asm { PRFM            #0, [X16] }
              if (v13 == 6)
                __asm { PRFM            #0, [X16,#0x20] }
            }
            else
            {
              _X16 = v84 + v91;
              __asm { PRFM            #0, [X16] }
            }
            *(_DWORD *)(v68 + 4 * (v78++ & 7) + 64) = v90;
          }
          while (v82 != v78);
        }
        *(_DWORD *)(v68 + 300) = 0;
      }
      v5 = v50 + v51;
      if (v50 + v51 <= v123)
      {
        v100 = v14;
        v101 = v15;
        while (1)
        {
          v14 = v101;
          v101 = v100;
          v102 = (v5 - v8 - v14);
          v103 = v114 - v113;
          if (v102 >= v9)
            v103 = v8;
          if ((v9 + ~(_DWORD)v102) < 3)
            break;
          v104 = v103 + v102;
          if (*(_DWORD *)v104 != *(_DWORD *)v5)
            break;
          if (v102 >= v9)
            v105 = (char *)v122;
          else
            v105 = v119;
          v106 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v104 + 4), v122, v105, v120);
          v107 = *(_OWORD **)(a2 + 24);
          if (v5 <= (unint64_t)v121)
            *v107 = *(_OWORD *)v5;
          else
            sub_1D4B56E1C(v107, (char *)v5, v5, v121);
          v108 = *(_QWORD *)(a2 + 8);
          *(_WORD *)(v108 + 4) = 0;
          *(_DWORD *)v108 = 1;
          if (v106 + 1 >= 0x10000)
          {
            v109 = (unint64_t)(v108 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v109;
          }
          *(_WORD *)(v108 + 6) = v106 + 1;
          v5 += v106 + 4;
          *(_QWORD *)(a2 + 8) = v108 + 8;
          v100 = v14;
          v15 = v101;
          v18 = v5;
          if (v5 > v123)
            goto LABEL_135;
        }
        v15 = v14;
        v14 = v100;
      }
      v18 = v5;
LABEL_135:
      ;
    }
    while (v18 < v123);
  }
  *a3 = v14;
  a3[1] = v15;
  return v122 - v5;
}

unint64_t sub_1D4B70490(uint64_t a1, uint64_t a2, _DWORD *a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t v76;
  _OWORD *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _OWORD *v82;
  __int128 *v83;
  __int128 v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  char v95;
  char v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  unint64_t v114;
  _OWORD *v115;
  uint64_t v116;
  unint64_t v117;
  _DWORD *v119;
  unint64_t v120;
  unsigned int v121;
  uint64_t v122;
  char *v123;
  unsigned int v124;
  char *v125;
  _QWORD *v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  int v131;
  int v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;

  v5 = (unint64_t)a4;
  v7 = a1;
  v134 = (unint64_t)a4 + a5;
  v8 = (unint64_t)a4 + a5 - 16;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unsigned int *)(a1 + 24);
  v11 = *(_DWORD *)(a1 + 272);
  if (v11 >= 6)
    v11 = 6;
  if (v11 <= 4)
    v12 = 4;
  else
    v12 = v11;
  if (*(_DWORD *)(a1 + 268) >= 6u)
    v13 = 6;
  else
    v13 = *(_DWORD *)(a1 + 268);
  if (v13 <= 4)
    v14 = 4;
  else
    v14 = v13;
  LODWORD(v16) = *a3;
  v15 = a3[1];
  v17 = *(_QWORD *)(a1 + 248);
  v18 = *(unsigned int *)(v17 + 24);
  v129 = *(_QWORD *)(v17 + 8);
  v125 = *(char **)v17;
  v126 = (_QWORD *)(v9 + v10);
  v120 = v129 + v18;
  if ((_DWORD)a4 - ((_DWORD)v9 + (_DWORD)v10) - ((_DWORD)v129 + (_DWORD)v18) + *(_QWORD *)v17)
    v19 = a4;
  else
    v19 = (_QWORD *)((char *)a4 + 1);
  *(_DWORD *)(a1 + 300) = 0;
  v20 = *(unsigned int *)(a1 + 44);
  v21 = v8 - (v9 + v20);
  if ((v21 + 1) < 8)
    v22 = v21 + 1;
  else
    v22 = 8;
  v133 = v8;
  if (v8 >= v9 + v20)
    v23 = v22;
  else
    v23 = 0;
  v24 = (v23 + v20);
  if (v20 < v24)
  {
    v25 = *(_QWORD *)(a1 + 112);
    v26 = *(_QWORD *)(a1 + 56);
    v27 = *(_DWORD *)(a1 + 52);
    v28 = *(_QWORD *)(a1 + 96);
    v29 = 56 - v27;
    v30 = 24 - v27;
    do
    {
      if (v12 == 5)
      {
        v31 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v20);
      }
      else
      {
        if (v12 != 6)
        {
          LODWORD(v32) = ((-1640531535 * *(_DWORD *)(v9 + v20)) ^ v28) >> v30;
          goto LABEL_29;
        }
        v31 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v20);
      }
      v32 = (v31 ^ v28) >> v29;
LABEL_29:
      v33 = v32 >> 8 << v14;
      _X3 = v25 + 4 * v33;
      __asm { PRFM            #0, [X3] }
      if (v13 > 4)
      {
        __asm { PRFM            #0, [X3,#0x40] }
        _X1 = v26 + v33;
        __asm { PRFM            #0, [X1] }
        if (v14 == 6)
          __asm { PRFM            #0, [X1,#0x20] }
      }
      else
      {
        _X1 = v26 + v33;
        __asm { PRFM            #0, [X1] }
      }
      *(_DWORD *)(v7 + 4 * (v20++ & 7) + 64) = v32;
    }
    while (v24 != v20);
  }
  if ((unint64_t)v19 < v8)
  {
    v121 = v13;
    v119 = a3;
    v123 = (char *)(v134 - 32);
    v128 = v10 + v129 - (_DWORD)v125;
    v127 = v7;
    v132 = v12;
    v131 = v14;
    v122 = a2;
    while (1)
    {
      v46 = (_DWORD)v19 - v9 - v16;
      v47 = (v46 + 1);
      v48 = v129 + v47 - v128;
      if (v47 >= v10)
        v48 = v9 + v47;
      if ((v10 - v46 - 5) <= 0xFFFFFFFC && *(_DWORD *)v48 == *(_DWORD *)((char *)v19 + 1))
      {
        v49 = v47 >= v10 ? (char *)v134 : v125;
        v50 = sub_1D4B5F19C((_QWORD *)((char *)v19 + 5), (char *)(v48 + 4), v134, v49, v126) + 4;
      }
      else
      {
        v50 = 0;
      }
      v135 = 999999999;
      if (v132 == 6)
      {
        if (v131 == 6)
          v51 = sub_1D4B868B8(v7, v19, v134, &v135);
        else
          v51 = v131 == 5 ? sub_1D4B86148(v7, v19, v134, &v135) : sub_1D4B859F0(v7, v19, v134, &v135);
      }
      else if (v132 == 5)
      {
        if (v131 == 6)
          v51 = sub_1D4B85274(v7, v19, v134, &v135);
        else
          v51 = v131 == 5 ? sub_1D4B84B04(v7, v19, v134, &v135) : sub_1D4B843AC(v7, v19, v134, &v135);
      }
      else if (v131 == 6)
      {
        v51 = sub_1D4B83C34(v7, v19, v134, &v135);
      }
      else
      {
        v51 = v131 == 5 ? sub_1D4B834C8(v7, v19, v134, &v135) : sub_1D4B82D74(v7, v19, v134, &v135);
      }
      v52 = v51 <= v50 ? v50 : v51;
      if (v52 >= 4)
        break;
      v53 = (unint64_t)v19 - v5;
      v19 = (_QWORD *)((char *)v19 + (((unint64_t)v19 - v5) >> 8) + 1);
      v7 = v127;
      *(_DWORD *)(v127 + 300) = v53 > 0x7FF;
LABEL_205:
      if ((unint64_t)v19 >= v133)
      {
        a3 = v119;
        goto LABEL_207;
      }
    }
    v124 = v15;
    v130 = v16;
    if (v51 <= v50)
      v54 = (_DWORD *)((char *)v19 + 1);
    else
      v54 = v19;
    if (v51 <= v50)
      v55 = 1;
    else
      v55 = v135;
    v16 = v52;
    v56 = v55;
    v57 = v54;
    if ((unint64_t)v19 < v133)
    {
      while (1)
      {
        v57 = (_DWORD *)((char *)v19 + 1);
        v58 = (_DWORD)v19 + 1 - (_DWORD)v9 - v130;
        v59 = v129 + v58 - v128;
        if (v58 >= v10)
          v59 = v9 + v58;
        if ((v10 + ~(_DWORD)v58) < 3)
        {
          v60 = v132;
        }
        else
        {
          v60 = v132;
          if (*(_DWORD *)v59 == *v57)
          {
            v61 = v58 >= v10 ? (char *)v134 : v125;
            v62 = sub_1D4B5F19C((_QWORD *)((char *)v19 + 5), (char *)(v59 + 4), v134, v61, v126);
            if (v62 <= 0xFFFFFFFFFFFFFFFBLL && 3 * ((int)v62 + 4) > (int)(3 * v52 + __clz(v55) - 30))
            {
              v52 = v62 + 4;
              v55 = 1;
              v54 = (_DWORD *)((char *)v19 + 1);
            }
          }
        }
        v135 = 999999999;
        if (v60 == 6)
        {
          if (v131 == 6)
            v63 = sub_1D4B868B8(v127, (_QWORD *)((char *)v19 + 1), v134, &v135);
          else
            v63 = v131 == 5
                ? sub_1D4B86148(v127, (_QWORD *)((char *)v19 + 1), v134, &v135)
                : sub_1D4B859F0(v127, (_QWORD *)((char *)v19 + 1), v134, &v135);
        }
        else if (v60 == 5)
        {
          if (v131 == 6)
            v63 = sub_1D4B85274(v127, (_QWORD *)((char *)v19 + 1), v134, &v135);
          else
            v63 = v131 == 5
                ? sub_1D4B84B04(v127, (_QWORD *)((char *)v19 + 1), v134, &v135)
                : sub_1D4B843AC(v127, (_QWORD *)((char *)v19 + 1), v134, &v135);
        }
        else if (v131 == 6)
        {
          v63 = sub_1D4B83C34(v127, (_QWORD *)((char *)v19 + 1), v134, &v135);
        }
        else
        {
          v63 = v131 == 5
              ? sub_1D4B834C8(v127, (_QWORD *)((char *)v19 + 1), v134, &v135)
              : sub_1D4B82D74(v127, (_QWORD *)((char *)v19 + 1), v134, &v135);
        }
        v16 = v63;
        if (v63 < 4 || (v56 = v135, (int)(__clz(v135) + 4 * v63 - 31) <= (int)(__clz(v55) + 4 * v52 - 27)))
        {
          if ((unint64_t)v57 >= v133)
            break;
          v57 = (_DWORD *)((char *)v19 + 2);
          v64 = (_DWORD)v19 + 2 - (_DWORD)v9 - v130;
          v65 = v129 + v64 - v128;
          if (v64 >= v10)
            v65 = v9 + v64;
          if ((v10 + ~(_DWORD)v64) < 3)
          {
            v66 = v132;
          }
          else
          {
            v66 = v132;
            if (*(_DWORD *)v65 == *v57)
            {
              v67 = v64 >= v10 ? (char *)v134 : v125;
              v68 = sub_1D4B5F19C((_QWORD *)((char *)v19 + 6), (char *)(v65 + 4), v134, v67, v126);
              if (v68 <= 0xFFFFFFFFFFFFFFFBLL && (int)(__clz(v55) + 4 * v52 - 30) < 4 * ((int)v68 + 4))
              {
                v52 = v68 + 4;
                v55 = 1;
                v54 = (_DWORD *)((char *)v19 + 2);
              }
            }
          }
          v135 = 999999999;
          if (v66 == 6)
          {
            if (v131 == 6)
              v69 = sub_1D4B868B8(v127, (_QWORD *)((char *)v19 + 2), v134, &v135);
            else
              v69 = v131 == 5
                  ? sub_1D4B86148(v127, (_QWORD *)((char *)v19 + 2), v134, &v135)
                  : sub_1D4B859F0(v127, (_QWORD *)((char *)v19 + 2), v134, &v135);
          }
          else if (v66 == 5)
          {
            if (v131 == 6)
              v69 = sub_1D4B85274(v127, (_QWORD *)((char *)v19 + 2), v134, &v135);
            else
              v69 = v131 == 5
                  ? sub_1D4B84B04(v127, (_QWORD *)((char *)v19 + 2), v134, &v135)
                  : sub_1D4B843AC(v127, (_QWORD *)((char *)v19 + 2), v134, &v135);
          }
          else if (v131 == 6)
          {
            v69 = sub_1D4B83C34(v127, (_QWORD *)((char *)v19 + 2), v134, &v135);
          }
          else
          {
            v69 = v131 == 5
                ? sub_1D4B834C8(v127, (_QWORD *)((char *)v19 + 2), v134, &v135)
                : sub_1D4B82D74(v127, (_QWORD *)((char *)v19 + 2), v134, &v135);
          }
          v16 = v69;
          if (v69 < 4)
            break;
          v56 = v135;
          if ((int)(__clz(v135) + 4 * v69 - 31) <= (int)(__clz(v55) + 4 * v52 - 24))
            break;
        }
        v19 = v57;
        v54 = v57;
        v55 = v56;
        v52 = v16;
        if ((unint64_t)v57 >= v133)
          goto LABEL_138;
      }
      v16 = v52;
      v56 = v55;
      v57 = v54;
    }
LABEL_138:
    if (v56 <= 3)
    {
      v7 = v127;
    }
    else
    {
      v70 = v9 + v10;
      if (v10 > (int)v57 - ((int)v56 + (int)v9) + 3)
        v70 = v120;
      v71 = v129 - v128;
      if (v10 <= (int)v57 - ((int)v56 + (int)v9) + 3)
        v71 = v9;
      if ((unint64_t)v57 <= v5 || v71 + (unint64_t)((_DWORD)v57 - (v56 + v9) + 3) <= v70)
      {
        v7 = v127;
      }
      else
      {
        v72 = (unsigned __int8 *)(v71 + ((_DWORD)v57 - (v56 + v9) + 3) - 1);
        v73 = (unsigned __int8 *)v57 - 1;
        v7 = v127;
        while (*v73 == *v72)
        {
          ++v16;
          v74 = v73 - 1;
          if ((unint64_t)v73 > v5)
          {
            --v73;
            if ((unint64_t)v72-- > v70)
              continue;
          }
          v57 = v74 + 1;
          goto LABEL_153;
        }
        v57 = v73 + 1;
      }
LABEL_153:
      v124 = v130;
      v130 = v56 - 3;
    }
    v76 = (uint64_t)v57 - v5;
    v77 = *(_OWORD **)(v122 + 24);
    if (v57 <= (_DWORD *)v123)
    {
      *v77 = *(_OWORD *)v5;
      v80 = *(_QWORD *)(v122 + 24);
      if ((unint64_t)v76 <= 0x10)
      {
        *(_QWORD *)(v122 + 24) = v80 + v76;
        v78 = *(_QWORD *)(v122 + 8);
        goto LABEL_164;
      }
      *(_OWORD *)(v80 + 16) = *(_OWORD *)(v5 + 16);
      if (v76 >= 33)
      {
        v81 = v80 + v76;
        v82 = (_OWORD *)(v80 + 32);
        v83 = (__int128 *)(v5 + 48);
        do
        {
          *v82 = *(v83 - 1);
          v84 = *v83;
          v83 += 2;
          v82[1] = v84;
          v82 += 2;
        }
        while ((unint64_t)v82 < v81);
      }
    }
    else
    {
      sub_1D4B56E1C(v77, (char *)v5, (unint64_t)v57, v123);
    }
    *(_QWORD *)(v122 + 24) += v76;
    v78 = *(_QWORD *)(v122 + 8);
    if ((unint64_t)v76 >= 0x10000)
    {
      v79 = (unint64_t)(v78 - *(_QWORD *)v122) >> 3;
      *(_DWORD *)(v122 + 72) = 1;
      *(_DWORD *)(v122 + 76) = v79;
    }
LABEL_164:
    *(_WORD *)(v78 + 4) = v76;
    *(_DWORD *)v78 = v56;
    if (v16 - 3 >= 0x10000)
    {
      v85 = (unint64_t)(v78 - *(_QWORD *)v122) >> 3;
      *(_DWORD *)(v122 + 72) = 2;
      *(_DWORD *)(v122 + 76) = v85;
    }
    *(_WORD *)(v78 + 6) = v16 - 3;
    *(_QWORD *)(v122 + 8) = v78 + 8;
    if (*(_DWORD *)(v7 + 300))
    {
      v86 = *(unsigned int *)(v7 + 44);
      v87 = v133 - (v9 + v86);
      if ((v87 + 1) < 8)
        v88 = v87 + 1;
      else
        v88 = 8;
      if (v133 >= v9 + v86)
        v89 = v88;
      else
        v89 = 0;
      v90 = (v89 + v86);
      if (v86 < v90)
      {
        v91 = *(_QWORD *)(v7 + 112);
        v92 = *(_QWORD *)(v7 + 56);
        v93 = *(_DWORD *)(v7 + 52);
        v94 = *(_QWORD *)(v7 + 96);
        v95 = 56 - v93;
        v96 = 24 - v93;
        do
        {
          if (v132 == 5)
          {
            v97 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v86);
          }
          else
          {
            if (v132 != 6)
            {
              LODWORD(v98) = ((-1640531535 * *(_DWORD *)(v9 + v86)) ^ v94) >> v96;
              goto LABEL_181;
            }
            v97 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v86);
          }
          v98 = (v97 ^ v94) >> v95;
LABEL_181:
          v99 = v98 >> 8 << v131;
          _X17 = v91 + 4 * v99;
          __asm { PRFM            #0, [X17] }
          if (v121 > 4)
          {
            __asm { PRFM            #0, [X17,#0x40] }
            _X16 = v92 + v99;
            __asm { PRFM            #0, [X16] }
            if (v131 == 6)
              __asm { PRFM            #0, [X16,#0x20] }
          }
          else
          {
            _X16 = v92 + v99;
            __asm { PRFM            #0, [X16] }
          }
          *(_DWORD *)(v7 + 4 * (v86++ & 7) + 64) = v98;
        }
        while (v90 != v86);
      }
      *(_DWORD *)(v7 + 300) = 0;
    }
    v5 = (unint64_t)v57 + v16;
    if ((unint64_t)v57 + v16 <= v133)
    {
      v108 = v130;
      v109 = v124;
      while (1)
      {
        v16 = v109;
        v109 = v108;
        v110 = (v5 - v9 - v16);
        v111 = v129 - v128;
        if (v110 >= v10)
          v111 = v9;
        if ((v10 + ~(_DWORD)v110) < 3)
          break;
        v112 = v111 + v110;
        if (*(_DWORD *)v112 != *(_DWORD *)v5)
          break;
        if (v110 >= v10)
          v113 = (char *)v134;
        else
          v113 = v125;
        v114 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v112 + 4), v134, v113, v126);
        v115 = *(_OWORD **)(v122 + 24);
        if (v5 <= (unint64_t)v123)
          *v115 = *(_OWORD *)v5;
        else
          sub_1D4B56E1C(v115, (char *)v5, v5, v123);
        v116 = *(_QWORD *)(v122 + 8);
        *(_WORD *)(v116 + 4) = 0;
        *(_DWORD *)v116 = 1;
        if (v114 + 1 >= 0x10000)
        {
          v117 = (unint64_t)(v116 - *(_QWORD *)v122) >> 3;
          *(_DWORD *)(v122 + 72) = 2;
          *(_DWORD *)(v122 + 76) = v117;
        }
        *(_WORD *)(v116 + 6) = v114 + 1;
        v5 += v114 + 4;
        *(_QWORD *)(v122 + 8) = v116 + 8;
        v108 = v16;
        v15 = v109;
        v19 = (_QWORD *)v5;
        if (v5 > v133)
          goto LABEL_205;
      }
      v15 = v16;
      LODWORD(v16) = v108;
      v19 = (_QWORD *)v5;
    }
    else
    {
      v19 = (_QWORD *)((char *)v57 + v16);
      LODWORD(v16) = v130;
      v15 = v124;
    }
    goto LABEL_205;
  }
LABEL_207:
  *a3 = v16;
  a3[1] = v15;
  return v134 - v5;
}

unint64_t sub_1D4B71080(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  uint64_t v72;
  _OWORD *v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _OWORD *v79;
  __int128 *v80;
  __int128 v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  char v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  _OWORD *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v118;
  uint64_t v119;
  unsigned int v121;
  unint64_t v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  char *v126;
  char *v127;
  unint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  unsigned int v134[4];

  v5 = a4;
  v6 = a1;
  v7 = a4 + a5;
  v8 = a4 + a5 - 16;
  v9 = *(_QWORD *)(a1 + 8);
  v133 = *(unsigned int *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 272);
  if (v10 >= 6)
    v10 = 6;
  if (v10 <= 4)
    v11 = 4;
  else
    v11 = v10;
  if (*(_DWORD *)(v6 + 268) >= 6u)
    v12 = 6;
  else
    v12 = *(_DWORD *)(v6 + 268);
  if (v12 <= 4)
    v13 = 4;
  else
    v13 = v12;
  v14 = *a3;
  v124 = a3[1];
  v15 = *(_QWORD *)(v6 + 248);
  v129 = (_QWORD *)(v9 + v133);
  v130 = *(_QWORD *)(v15 + 8);
  v118 = v130 + *(unsigned int *)(v15 + 24);
  v127 = *(char **)v15;
  if ((_DWORD)a4 - ((_DWORD)v9 + (_DWORD)v133) - (_DWORD)v118 + *(_QWORD *)v15)
    v16 = a4;
  else
    v16 = a4 + 1;
  *(_DWORD *)(v6 + 300) = 0;
  v17 = *(unsigned int *)(v6 + 44);
  v18 = v8 - (v9 + v17);
  if ((v18 + 1) < 8)
    v19 = v18 + 1;
  else
    v19 = 8;
  if (v8 >= v9 + v17)
    v20 = v19;
  else
    v20 = 0;
  v21 = (v20 + v17);
  v131 = v11;
  if (v17 < v21)
  {
    v22 = *(_QWORD *)(v6 + 112);
    v23 = *(_QWORD *)(v6 + 56);
    v24 = *(_DWORD *)(v6 + 52);
    v25 = *(_QWORD *)(v6 + 96);
    v26 = 56 - v24;
    v27 = 24 - v24;
    do
    {
      if (v11 == 5)
      {
        v28 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v17);
      }
      else
      {
        if (v11 != 6)
        {
          LODWORD(v29) = ((-1640531535 * *(_DWORD *)(v9 + v17)) ^ v25) >> v27;
          goto LABEL_29;
        }
        v28 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v17);
      }
      v29 = (v28 ^ v25) >> v26;
LABEL_29:
      v30 = v29 >> 8 << v13;
      _X2 = v22 + 4 * v30;
      __asm { PRFM            #0, [X2] }
      if (v12 > 4)
      {
        __asm { PRFM            #0, [X2,#0x40] }
        _X2 = v23 + v30;
        __asm { PRFM            #0, [X2] }
        if (v13 == 6)
          __asm { PRFM            #0, [X2,#0x20] }
      }
      else
      {
        _X2 = v23 + v30;
        __asm { PRFM            #0, [X2] }
      }
      *(_DWORD *)(v6 + 4 * (v17++ & 7) + 64) = v29;
      v11 = v131;
    }
    while (v21 != v17);
  }
  if (v16 < v8)
  {
    v126 = (char *)(v7 - 32);
    v119 = v5 + a5 - 16;
    v123 = v133 + v130 - (_DWORD)v127;
    v132 = v13;
    v128 = v7;
    v125 = v6;
    v122 = v8;
    v121 = v12;
    do
    {
      v43 = v16 - v9 - v14;
      v44 = (v43 + 1);
      v45 = v130 + v44 - v123;
      if (v44 >= v133)
        v45 = v9 + v44;
      if ((v133 - v43 - 5) <= 0xFFFFFFFC && *(_DWORD *)v45 == *(_DWORD *)(v16 + 1))
      {
        if (v44 >= v133)
          v46 = (char *)v7;
        else
          v46 = v127;
        v47 = sub_1D4B5F19C((_QWORD *)(v16 + 5), (char *)(v45 + 4), v7, v46, v129) + 4;
        v11 = v131;
        v13 = v132;
      }
      else
      {
        v47 = 0;
      }
      *(_QWORD *)v134 = 999999999;
      if (v11 == 6)
      {
        if (v13 == 6)
        {
          v48 = sub_1D4B868B8(v6, (_QWORD *)v16, v7, v134);
        }
        else if (v13 == 5)
        {
          v48 = sub_1D4B86148(v6, (_QWORD *)v16, v7, v134);
        }
        else
        {
          v48 = sub_1D4B859F0(v6, (_QWORD *)v16, v7, v134);
        }
      }
      else if (v11 == 5)
      {
        if (v13 == 6)
        {
          v48 = sub_1D4B85274(v6, (_QWORD *)v16, v7, v134);
        }
        else if (v13 == 5)
        {
          v48 = sub_1D4B84B04(v6, (_QWORD *)v16, v7, v134);
        }
        else
        {
          v48 = sub_1D4B843AC(v6, (_QWORD *)v16, v7, v134);
        }
      }
      else if (v13 == 6)
      {
        v48 = sub_1D4B83C34(v6, (_QWORD *)v16, v7, v134);
      }
      else if (v13 == 5)
      {
        v48 = sub_1D4B834C8(v6, (_QWORD *)v16, v7, v134);
      }
      else
      {
        v48 = sub_1D4B82D74(v6, (_QWORD *)v16, v7, v134);
      }
      if (v48 <= v47)
        v49 = v47;
      else
        v49 = v48;
      if (v49 < 4)
      {
        v50 = v16 - v5;
        v16 += ((v16 - v5) >> 8) + 1;
        *(_DWORD *)(v6 + 300) = v50 > 0x7FF;
        v13 = v132;
        goto LABEL_159;
      }
      v51 = v8;
      if (v48 <= v47)
        v52 = v16 + 1;
      else
        v52 = v16;
      if (v48 <= v47)
        v53 = 1;
      else
        v53 = *(_QWORD *)v134;
      if (v16 >= v51)
      {
        v63 = a2;
        v13 = v132;
      }
      else
      {
        v54 = 0;
        v55 = v133 + v9 - 2 + v14 - v16;
        v13 = v132;
        while (1)
        {
          v56 = (_DWORD *)(v16 + v54 + 1);
          v57 = (v16 - v9 - v14 + v54 + 1);
          v58 = v130 + ((_DWORD)v127 - v133 - v130 - v9 + 1 + v16 - v14 + v54);
          if (v57 >= v133)
            v58 = v9 + v57;
          if (v55 >= 3 && *(_DWORD *)v58 == *v56)
          {
            v59 = v57 >= v133 ? (char *)v128 : v127;
            v60 = sub_1D4B5F19C((_QWORD *)(v16 + v54 + 5), (char *)(v58 + 4), v128, v59, v129);
            if (v60 > 0xFFFFFFFFFFFFFFFBLL)
            {
              v61 = v131;
              v13 = v132;
            }
            else
            {
              v61 = v131;
              v13 = v132;
              if (3 * ((int)v60 + 4) > (int)(3 * v49 + __clz(v53) - 30))
              {
                v49 = v60 + 4;
                v53 = 1;
                v52 = v16 + v54 + 1;
              }
            }
          }
          else
          {
            v61 = v131;
          }
          *(_QWORD *)v134 = 999999999;
          if (v61 == 6)
          {
            if (v13 == 6)
              v62 = sub_1D4B868B8(v125, (_QWORD *)(v16 + v54 + 1), v128, v134);
            else
              v62 = v13 == 5
                  ? sub_1D4B86148(v125, (_QWORD *)(v16 + v54 + 1), v128, v134)
                  : sub_1D4B859F0(v125, (_QWORD *)(v16 + v54 + 1), v128, v134);
          }
          else if (v61 == 5)
          {
            if (v13 == 6)
              v62 = sub_1D4B85274(v125, (_QWORD *)(v16 + v54 + 1), v128, v134);
            else
              v62 = v13 == 5
                  ? sub_1D4B84B04(v125, (_QWORD *)(v16 + v54 + 1), v128, v134)
                  : sub_1D4B843AC(v125, (_QWORD *)(v16 + v54 + 1), v128, v134);
          }
          else if (v13 == 6)
          {
            v62 = sub_1D4B83C34(v125, (_QWORD *)(v16 + v54 + 1), v128, v134);
          }
          else
          {
            v62 = v13 == 5
                ? sub_1D4B834C8(v125, (_QWORD *)(v16 + v54 + 1), v128, v134)
                : sub_1D4B82D74(v125, (_QWORD *)(v16 + v54 + 1), v128, v134);
          }
          v13 = v132;
          if (v62 < 4 || (int)(__clz(v134[0]) + 4 * v62 - 31) <= (int)(__clz(v53) + 4 * v49 - 27))
            break;
          ++v54;
          --v55;
          v52 = (unint64_t)v56;
          v53 = *(_QWORD *)v134;
          v49 = v62;
          if (v119 - v16 == v54)
          {
            v49 = v62;
            v53 = *(_QWORD *)v134;
            v52 = v119;
            break;
          }
        }
        v7 = v128;
        v63 = a2;
      }
      v64 = v126;
      v65 = v124;
      if (v53 > 3)
      {
        v66 = v9 + v133;
        if (v133 > (int)v52 - ((int)v53 + (int)v9) + 3)
          v66 = v118;
        v67 = v130 - v123;
        if (v133 <= (int)v52 - ((int)v53 + (int)v9) + 3)
          v67 = v9;
        if (v52 > v5 && v67 + (unint64_t)(v52 - (v53 + v9) + 3) > v66)
        {
          v68 = (unsigned __int8 *)(v67 + (v52 - (v53 + v9) + 3) - 1);
          v69 = (unsigned __int8 *)(v52 - 1);
          while (*v69 == *v68)
          {
            ++v49;
            v70 = v69 - 1;
            if ((unint64_t)v69 > v5)
            {
              --v69;
              if ((unint64_t)v68-- > v66)
                continue;
            }
            v52 = (unint64_t)(v70 + 1);
            goto LABEL_123;
          }
          v52 = (unint64_t)(v69 + 1);
        }
LABEL_123:
        v64 = v126;
        v65 = v14;
        v14 = (v53 - 3);
      }
      v72 = v52 - v5;
      v73 = *(_OWORD **)(v63 + 24);
      v124 = v65;
      if (v52 <= (unint64_t)v64)
      {
        *v73 = *(_OWORD *)v5;
        v77 = *(_QWORD *)(v63 + 24);
        if ((unint64_t)v72 <= 0x10)
        {
          *(_QWORD *)(v63 + 24) = v77 + v72;
          v75 = *(_QWORD *)(v63 + 8);
          v74 = v131;
          goto LABEL_134;
        }
        *(_OWORD *)(v77 + 16) = *(_OWORD *)(v5 + 16);
        v74 = v131;
        if (v72 >= 33)
        {
          v78 = v77 + v72;
          v79 = (_OWORD *)(v77 + 32);
          v80 = (__int128 *)(v5 + 48);
          do
          {
            *v79 = *(v80 - 1);
            v81 = *v80;
            v80 += 2;
            v79[1] = v81;
            v79 += 2;
          }
          while ((unint64_t)v79 < v78);
        }
      }
      else
      {
        sub_1D4B56E1C(v73, (char *)v5, v52, v64);
        v74 = v131;
        v13 = v132;
      }
      *(_QWORD *)(v63 + 24) += v72;
      v75 = *(_QWORD *)(v63 + 8);
      if ((unint64_t)v72 >= 0x10000)
      {
        v76 = (unint64_t)(v75 - *(_QWORD *)v63) >> 3;
        *(_DWORD *)(v63 + 72) = 1;
        *(_DWORD *)(v63 + 76) = v76;
      }
LABEL_134:
      *(_WORD *)(v75 + 4) = v72;
      *(_DWORD *)v75 = v53;
      if (v49 - 3 >= 0x10000)
      {
        v82 = (unint64_t)(v75 - *(_QWORD *)v63) >> 3;
        *(_DWORD *)(v63 + 72) = 2;
        *(_DWORD *)(v63 + 76) = v82;
      }
      *(_WORD *)(v75 + 6) = v49 - 3;
      *(_QWORD *)(v63 + 8) = v75 + 8;
      v6 = v125;
      if (*(_DWORD *)(v125 + 300))
      {
        v83 = *(unsigned int *)(v125 + 44);
        v84 = v122 - (v9 + v83);
        if ((v84 + 1) < 8)
          v85 = v84 + 1;
        else
          v85 = 8;
        if (v122 >= v9 + v83)
          v86 = v85;
        else
          v86 = 0;
        v87 = (v86 + v83);
        if (v83 < v87)
        {
          v88 = *(_QWORD *)(v125 + 112);
          v89 = *(_QWORD *)(v125 + 56);
          v90 = *(_DWORD *)(v125 + 52);
          v91 = *(_QWORD *)(v125 + 96);
          v92 = 56 - v90;
          v93 = 24 - v90;
          do
          {
            if (v74 == 5)
            {
              v94 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v83);
            }
            else
            {
              if (v74 != 6)
              {
                LODWORD(v95) = ((-1640531535 * *(_DWORD *)(v9 + v83)) ^ v91) >> v93;
                goto LABEL_151;
              }
              v94 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v83);
            }
            v95 = (v94 ^ v91) >> v92;
LABEL_151:
            v96 = v95 >> 8 << v13;
            _X17 = v88 + 4 * v96;
            __asm { PRFM            #0, [X17] }
            if (v121 > 4)
            {
              __asm { PRFM            #0, [X17,#0x40] }
              _X16 = v89 + v96;
              __asm { PRFM            #0, [X16] }
              if (v13 == 6)
                __asm { PRFM            #0, [X16,#0x20] }
            }
            else
            {
              _X16 = v89 + v96;
              __asm { PRFM            #0, [X16] }
            }
            *(_DWORD *)(v125 + 4 * (v83++ & 7) + 64) = v95;
          }
          while (v87 != v83);
        }
        *(_DWORD *)(v125 + 300) = 0;
      }
      v5 = v52 + v49;
      v8 = v122;
      if (v5 <= v122)
      {
        v106 = v14;
        v107 = v124;
        while (1)
        {
          v14 = v107;
          v107 = v106;
          v108 = (v5 - v9 - v14);
          v109 = v130 - v123;
          if (v108 >= v133)
            v109 = v9;
          if ((v133 + ~(_DWORD)v108) < 3)
            break;
          v110 = v109 + v108;
          if (*(_DWORD *)v110 != *(_DWORD *)v5)
            break;
          if (v108 >= v133)
            v111 = (char *)v7;
          else
            v111 = v127;
          v112 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v110 + 4), v7, v111, v129);
          v113 = *(_OWORD **)(v63 + 24);
          if (v5 <= (unint64_t)v126)
            *v113 = *(_OWORD *)v5;
          else
            sub_1D4B56E1C(v113, (char *)v5, v5, v126);
          v13 = v132;
          v114 = *(_QWORD *)(v63 + 8);
          *(_WORD *)(v114 + 4) = 0;
          *(_DWORD *)v114 = 1;
          if (v112 + 1 >= 0x10000)
          {
            v115 = (unint64_t)(v114 - *(_QWORD *)v63) >> 3;
            *(_DWORD *)(v63 + 72) = 2;
            *(_DWORD *)(v63 + 76) = v115;
          }
          *(_WORD *)(v114 + 6) = v112 + 1;
          v5 += v112 + 4;
          *(_QWORD *)(v63 + 8) = v114 + 8;
          v106 = v14;
          v105 = v107;
          v16 = v5;
          if (v5 > v122)
            goto LABEL_160;
        }
        v105 = v14;
        v14 = v106;
        v16 = v5;
        goto LABEL_160;
      }
      v16 = v5;
LABEL_159:
      v105 = v124;
LABEL_160:
      v124 = v105;
      v11 = v131;
    }
    while (v16 < v8);
  }
  *a3 = v14;
  a3[1] = v124;
  return v7 - v5;
}

unint64_t sub_1D4B71AD0(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  char *v63;
  uint64_t v64;
  _OWORD *v65;
  char *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _OWORD *v71;
  __int128 *v72;
  __int128 v73;
  uint64_t v74;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  char v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  _OWORD *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int v117;
  char *v119;
  _QWORD *v120;
  char *v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;

  v5 = a4;
  v122 = a4 + a5;
  v7 = a4 + a5 - 16;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 272);
  if (v10 >= 6)
    v10 = 6;
  if (v10 <= 4)
    v11 = 4;
  else
    v11 = v10;
  v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 6)
    v12 = 6;
  v117 = v12;
  if (v12 <= 4)
    v13 = 4;
  else
    v13 = v12;
  v14 = *a3;
  v15 = a3[1];
  v16 = *(_QWORD *)(a1 + 248);
  v17 = *(unsigned int *)(v16 + 24);
  v114 = *(_QWORD *)(v16 + 8);
  v120 = (_QWORD *)(v8 + v9);
  v112 = v114 + v17;
  v119 = *(char **)v16;
  if ((_DWORD)a4 - ((_DWORD)v8 + (_DWORD)v9) - ((_DWORD)v114 + (_DWORD)v17) + *(_QWORD *)v16)
    v18 = a4;
  else
    v18 = a4 + 1;
  *(_DWORD *)(a1 + 300) = 0;
  v19 = *(unsigned int *)(a1 + 44);
  v20 = v7 - (v8 + v19);
  if ((v20 + 1) < 8)
    v21 = v20 + 1;
  else
    v21 = 8;
  v123 = a4 + a5 - 16;
  if (v7 >= v8 + v19)
    v22 = v21;
  else
    v22 = 0;
  v23 = (v22 + v19);
  if (v19 < v23)
  {
    v24 = *(_QWORD *)(a1 + 112);
    v25 = *(_QWORD *)(a1 + 56);
    v26 = *(_DWORD *)(a1 + 52);
    v27 = *(_QWORD *)(a1 + 96);
    v28 = 56 - v26;
    v29 = 24 - v26;
    do
    {
      if (v11 == 5)
      {
        v30 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v8 + v19);
      }
      else
      {
        if (v11 != 6)
        {
          LODWORD(v31) = ((-1640531535 * *(_DWORD *)(v8 + v19)) ^ v27) >> v29;
          goto LABEL_28;
        }
        v30 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v8 + v19);
      }
      v31 = (v30 ^ v27) >> v28;
LABEL_28:
      v32 = v31 >> 8 << v13;
      _X2 = v24 + 4 * v32;
      __asm { PRFM            #0, [X2] }
      if (v117 > 4)
      {
        __asm { PRFM            #0, [X2,#0x40] }
        _X1 = v25 + v32;
        __asm { PRFM            #0, [X1] }
        if (v13 == 6)
          __asm { PRFM            #0, [X1,#0x20] }
      }
      else
      {
        _X1 = v25 + v32;
        __asm { PRFM            #0, [X1] }
      }
      *(_DWORD *)(a1 + 4 * (v19++ & 7) + 64) = v31;
    }
    while (v23 != v19);
  }
  if (v18 < v123)
  {
    v121 = (char *)(v122 - 32);
    v113 = v9 + v114 - (_DWORD)v119;
    do
    {
      v45 = v18 - v8 - v14;
      v46 = (v45 + 1);
      v47 = v114 + v46 - v113;
      if (v46 >= v9)
        v47 = v8 + v46;
      if ((v9 - v45 - 5) <= 0xFFFFFFFC && *(_DWORD *)v47 == *(_DWORD *)(v18 + 1))
      {
        if (v46 >= v9)
          v48 = (char *)v122;
        else
          v48 = v119;
        v49 = sub_1D4B5F19C((_QWORD *)(v18 + 5), (char *)(v47 + 4), v122, v48, v120);
        v50 = v18 + 1;
        v51 = v49 + 4;
        LODWORD(v52) = 1;
LABEL_81:
        v63 = (char *)(v122 - 32);
        goto LABEL_84;
      }
      v124 = 999999999;
      if (v11 == 6)
      {
        if (v13 == 6)
        {
          v53 = v18 + 1;
          v54 = sub_1D4B868B8(a1, (_QWORD *)v18, v122, &v124);
          goto LABEL_59;
        }
        if (v13 == 5)
        {
          v53 = v18 + 1;
          v54 = sub_1D4B86148(a1, (_QWORD *)v18, v122, &v124);
          goto LABEL_59;
        }
        v115 = v18 + 1;
        v55 = sub_1D4B859F0(a1, (_QWORD *)v18, v122, &v124);
      }
      else if (v11 == 5)
      {
        if (v13 == 6)
        {
          v53 = v18 + 1;
          v54 = sub_1D4B85274(a1, (_QWORD *)v18, v122, &v124);
          goto LABEL_59;
        }
        if (v13 == 5)
        {
          v53 = v18 + 1;
          v54 = sub_1D4B84B04(a1, (_QWORD *)v18, v122, &v124);
LABEL_59:
          v50 = v53;
          v51 = v54;
          goto LABEL_62;
        }
        v115 = v18 + 1;
        v55 = sub_1D4B843AC(a1, (_QWORD *)v18, v122, &v124);
      }
      else
      {
        if (v13 == 6)
        {
          v53 = v18 + 1;
          v54 = sub_1D4B83C34(a1, (_QWORD *)v18, v122, &v124);
          goto LABEL_59;
        }
        if (v13 == 5)
        {
          v53 = v18 + 1;
          v54 = sub_1D4B834C8(a1, (_QWORD *)v18, v122, &v124);
          goto LABEL_59;
        }
        v115 = v18 + 1;
        v55 = sub_1D4B82D74(a1, (_QWORD *)v18, v122, &v124);
      }
      v51 = v55;
      v50 = v115;
LABEL_62:
      if (v51)
        v52 = v124;
      else
        v52 = 1;
      if (v51)
        v50 = v18;
      if (v51 <= 3)
      {
        v56 = v18 - v5;
        v18 += ((v18 - v5) >> 8) + 1;
        *(_DWORD *)(a1 + 300) = v56 > 0x7FF;
        continue;
      }
      if (v52 < 4)
        goto LABEL_81;
      v57 = v8 + v9;
      if (v9 > (int)v50 - (int)v8 - (int)v52 + 3)
        v57 = v112;
      v58 = v114 - v113;
      if (v9 <= (int)v50 - (int)v8 - (int)v52 + 3)
        v58 = v8;
      if (v50 > v5 && v58 + (unint64_t)(v50 - v8 - v52 + 3) > v57)
      {
        v59 = (unsigned __int8 *)(v58 + (v50 - v8 - v52 + 3) - 1);
        v60 = (unsigned __int8 *)(v50 - 1);
        while (*v60 == *v59)
        {
          ++v51;
          v61 = v60 - 1;
          if ((unint64_t)v60 > v5)
          {
            --v60;
            if ((unint64_t)v59-- > v57)
              continue;
          }
          v50 = (unint64_t)(v61 + 1);
          goto LABEL_83;
        }
        v50 = (unint64_t)(v60 + 1);
      }
LABEL_83:
      v63 = (char *)(v122 - 32);
      v15 = v14;
      v14 = (v52 - 3);
LABEL_84:
      v64 = v50 - v5;
      v65 = *(_OWORD **)(a2 + 24);
      if (v50 > (unint64_t)v63)
      {
        v66 = (char *)v5;
        v116 = v50;
        v67 = v52;
        sub_1D4B56E1C(v65, v66, v50, v63);
        LODWORD(v52) = v67;
        v68 = a1;
LABEL_90:
        *(_QWORD *)(a2 + 24) += v64;
        v74 = *(_QWORD *)(a2 + 8);
        v75 = v117;
        if ((unint64_t)v64 >= 0x10000)
        {
          v76 = (unint64_t)(v74 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 1;
          *(_DWORD *)(a2 + 76) = v76;
        }
        v50 = v116;
        goto LABEL_94;
      }
      *v65 = *(_OWORD *)v5;
      v69 = *(_QWORD *)(a2 + 24);
      if ((unint64_t)v64 > 0x10)
      {
        v116 = v50;
        *(_OWORD *)(v69 + 16) = *(_OWORD *)(v5 + 16);
        v68 = a1;
        if (v64 >= 33)
        {
          v70 = v69 + v64;
          v71 = (_OWORD *)(v69 + 32);
          v72 = (__int128 *)(v5 + 48);
          do
          {
            *v71 = *(v72 - 1);
            v73 = *v72;
            v72 += 2;
            v71[1] = v73;
            v71 += 2;
          }
          while ((unint64_t)v71 < v70);
        }
        goto LABEL_90;
      }
      *(_QWORD *)(a2 + 24) = v69 + v64;
      v74 = *(_QWORD *)(a2 + 8);
      v68 = a1;
      v75 = v117;
LABEL_94:
      *(_WORD *)(v74 + 4) = v64;
      *(_DWORD *)v74 = v52;
      if (v51 - 3 >= 0x10000)
      {
        v77 = (unint64_t)(v74 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v77;
      }
      *(_WORD *)(v74 + 6) = v51 - 3;
      *(_QWORD *)(a2 + 8) = v74 + 8;
      if (*(_DWORD *)(v68 + 300))
      {
        v78 = *(unsigned int *)(v68 + 44);
        v79 = v123 - (v8 + v78);
        if ((v79 + 1) < 8)
          v80 = v79 + 1;
        else
          v80 = 8;
        if (v123 >= v8 + v78)
          v81 = v80;
        else
          v81 = 0;
        v82 = (v81 + v78);
        if (v78 < v82)
        {
          v83 = *(_QWORD *)(v68 + 112);
          v84 = *(_QWORD *)(v68 + 56);
          v85 = *(_DWORD *)(v68 + 52);
          v86 = *(_QWORD *)(v68 + 96);
          v87 = 56 - v85;
          v88 = 24 - v85;
          do
          {
            if (v11 == 5)
            {
              v89 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v8 + v78);
            }
            else
            {
              if (v11 != 6)
              {
                LODWORD(v90) = ((-1640531535 * *(_DWORD *)(v8 + v78)) ^ v86) >> v88;
                goto LABEL_111;
              }
              v89 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v8 + v78);
            }
            v90 = (v89 ^ v86) >> v87;
LABEL_111:
            v91 = v90 >> 8 << v13;
            _X17 = v83 + 4 * v91;
            __asm { PRFM            #0, [X17] }
            if (v75 > 4)
            {
              __asm { PRFM            #0, [X17,#0x40] }
              _X16 = v84 + v91;
              __asm { PRFM            #0, [X16] }
              if (v13 == 6)
                __asm { PRFM            #0, [X16,#0x20] }
            }
            else
            {
              _X16 = v84 + v91;
              __asm { PRFM            #0, [X16] }
            }
            *(_DWORD *)(v68 + 4 * (v78++ & 7) + 64) = v90;
          }
          while (v82 != v78);
        }
        *(_DWORD *)(v68 + 300) = 0;
      }
      v5 = v50 + v51;
      if (v50 + v51 <= v123)
      {
        v100 = v14;
        v101 = v15;
        while (1)
        {
          v14 = v101;
          v101 = v100;
          v102 = (v5 - v8 - v14);
          v103 = v114 - v113;
          if (v102 >= v9)
            v103 = v8;
          if ((v9 + ~(_DWORD)v102) < 3)
            break;
          v104 = v103 + v102;
          if (*(_DWORD *)v104 != *(_DWORD *)v5)
            break;
          if (v102 >= v9)
            v105 = (char *)v122;
          else
            v105 = v119;
          v106 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v104 + 4), v122, v105, v120);
          v107 = *(_OWORD **)(a2 + 24);
          if (v5 <= (unint64_t)v121)
            *v107 = *(_OWORD *)v5;
          else
            sub_1D4B56E1C(v107, (char *)v5, v5, v121);
          v108 = *(_QWORD *)(a2 + 8);
          *(_WORD *)(v108 + 4) = 0;
          *(_DWORD *)v108 = 1;
          if (v106 + 1 >= 0x10000)
          {
            v109 = (unint64_t)(v108 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v109;
          }
          *(_WORD *)(v108 + 6) = v106 + 1;
          v5 += v106 + 4;
          *(_QWORD *)(a2 + 8) = v108 + 8;
          v100 = v14;
          v15 = v101;
          v18 = v5;
          if (v5 > v123)
            goto LABEL_135;
        }
        v15 = v14;
        v14 = v100;
      }
      v18 = v5;
LABEL_135:
      ;
    }
    while (v18 < v123);
  }
  *a3 = v14;
  a3[1] = v15;
  return v122 - v5;
}

unint64_t sub_1D4B722D8(uint64_t a1, uint64_t a2, unsigned int *a3, _QWORD *a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v18;
  _DWORD *v19;
  int v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  char *v37;
  uint64_t v38;
  _OWORD *v39;
  char *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  _OWORD *v44;
  __int128 *v45;
  __int128 v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  _OWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unsigned __int8 *v64;
  unsigned int v65;
  char *v66;
  unsigned __int8 *v67;
  char *v68;
  unint64_t v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;

  v5 = (unint64_t)a4;
  v6 = (unint64_t)a4 + a5;
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v10 = *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(a1 + 28);
  v11 = *(_DWORD *)(a1 + 256);
  v12 = *(_DWORD *)(a1 + 272);
  if (v12 >= 6)
    v12 = 6;
  if (v12 <= 4)
    v12 = 4;
  v14 = *a3;
  v13 = a3[1];
  *(_DWORD *)(a1 + 300) = 0;
  v67 = (unsigned __int8 *)(v8 + v10);
  if ((_QWORD *)(v8 + v10) == a4)
    v15 = (_QWORD *)((char *)a4 + 1);
  else
    v15 = a4;
  v73 = (unint64_t)a4 + a5 - 8;
  if ((unint64_t)v15 < v73)
  {
    v65 = v12;
    v66 = (char *)(v7 + v10);
    v64 = (unsigned __int8 *)(v7 + v9);
    v18 = 1 << v11;
    v70 = v10 - 1;
    v68 = (char *)(v6 - 32);
    v69 = (unint64_t)a4 + a5;
    v71 = v10;
    v72 = v7;
    while (1)
    {
      v19 = (_DWORD *)((char *)v15 + 1);
      v20 = (_DWORD)v15 - v8 + 1;
      v21 = v20 - v18;
      if (v20 - *(_DWORD *)(a1 + 28) <= v18 || *(_DWORD *)(a1 + 40) != 0)
        v21 = *(_DWORD *)(a1 + 28);
      v23 = (v20 - v14);
      v24 = v23 >= v10 ? v8 : v7;
      if ((v70 - v23) >= 3 && v14 <= v20 - v21 && *v19 == *(_DWORD *)(v24 + v23))
        break;
      v74 = 999999999;
      if (v65 == 6)
      {
        v28 = sub_1D4B79C74(a1, v15, v6, &v74);
      }
      else if (v65 == 5)
      {
        v28 = sub_1D4B79954(a1, v15, v6, &v74);
      }
      else
      {
        v28 = sub_1D4B79630(a1, v15, v6, &v74);
      }
      v26 = v28;
      if (v28)
        v27 = v74;
      else
        v27 = 1;
      if (v28)
        v19 = v15;
      if (v28 > 3)
      {
        if (v27 >= 4)
        {
          v30 = (_DWORD)v19 - v8 - v27 + 3;
          if (v71 <= v30)
            v31 = v8;
          else
            v31 = v72;
          v32 = v67;
          if (v71 > v30)
            v32 = v64;
          if ((unint64_t)v19 > v5 && v31 + (unint64_t)v30 > (unint64_t)v32)
          {
            v33 = (unsigned __int8 *)(v31 + ((_DWORD)v19 - v8 - v27 + 3) - 1);
            v34 = (unsigned __int8 *)v19 - 1;
            while (*v34 == *v33)
            {
              ++v26;
              v35 = v34 - 1;
              if ((unint64_t)v34 > v5)
              {
                --v34;
                if (v33-- > v32)
                  continue;
              }
              v19 = v35 + 1;
              goto LABEL_52;
            }
            v19 = v34 + 1;
          }
LABEL_52:
          v37 = v68;
          v13 = v14;
          v14 = (v27 - 3);
LABEL_53:
          v38 = (uint64_t)v19 - v5;
          v39 = *(_OWORD **)(a2 + 24);
          if (v19 > (_DWORD *)v37)
          {
            v40 = (char *)v5;
            v41 = v27;
            sub_1D4B56E1C(v39, v40, (unint64_t)v19, v37);
            LODWORD(v27) = v41;
            goto LABEL_59;
          }
          *v39 = *(_OWORD *)v5;
          v42 = *(_QWORD *)(a2 + 24);
          if ((unint64_t)v38 <= 0x10)
          {
            *(_QWORD *)(a2 + 24) = v42 + v38;
            v47 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            *(_OWORD *)(v42 + 16) = *(_OWORD *)(v5 + 16);
            if (v38 >= 33)
            {
              v43 = v42 + v38;
              v44 = (_OWORD *)(v42 + 32);
              v45 = (__int128 *)(v5 + 48);
              do
              {
                *v44 = *(v45 - 1);
                v46 = *v45;
                v45 += 2;
                v44[1] = v46;
                v44 += 2;
              }
              while ((unint64_t)v44 < v43);
            }
LABEL_59:
            *(_QWORD *)(a2 + 24) += v38;
            v47 = *(_QWORD *)(a2 + 8);
            if ((unint64_t)v38 >= 0x10000)
            {
              v48 = (unint64_t)(v47 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v48;
            }
          }
          *(_WORD *)(v47 + 4) = v38;
          *(_DWORD *)v47 = v27;
          if (v26 - 3 >= 0x10000)
          {
            v49 = (unint64_t)(v47 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v49;
          }
          *(_WORD *)(v47 + 6) = v26 - 3;
          *(_QWORD *)(a2 + 8) = v47 + 8;
          if (*(_DWORD *)(a1 + 300))
            *(_DWORD *)(a1 + 300) = 0;
          v5 = (unint64_t)v19 + v26;
          if ((unint64_t)v19 + v26 <= v73)
          {
            v50 = v14;
            v51 = v13;
            while (1)
            {
              v14 = v51;
              v51 = v50;
              v52 = v5 - v8;
              v53 = v5 - v8 - v18;
              if ((int)v5 - (int)v8 - *(_DWORD *)(a1 + 28) <= v18 || *(_DWORD *)(a1 + 40) != 0)
                v53 = *(_DWORD *)(a1 + 28);
              v55 = (v52 - v14);
              v56 = v72;
              if (v55 >= v71)
                v56 = v8;
              if ((v70 - v55) < 3
                || v14 > v52 - v53
                || *(_DWORD *)v5 != *(_DWORD *)(v56 + v55))
              {
                break;
              }
              if (v55 >= v71)
                v57 = (char *)v69;
              else
                v57 = v66;
              v58 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v56 + v55 + 4), v69, v57, v67);
              v59 = *(_OWORD **)(a2 + 24);
              if (v5 <= (unint64_t)v68)
                *v59 = *(_OWORD *)v5;
              else
                sub_1D4B56E1C(v59, (char *)v5, v5, v68);
              v60 = *(_QWORD *)(a2 + 8);
              *(_WORD *)(v60 + 4) = 0;
              *(_DWORD *)v60 = 1;
              if (v58 + 1 >= 0x10000)
              {
                v61 = (unint64_t)(v60 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v61;
              }
              *(_WORD *)(v60 + 6) = v58 + 1;
              v5 += v58 + 4;
              *(_QWORD *)(a2 + 8) = v60 + 8;
              v50 = v14;
              v13 = v51;
              v15 = (_QWORD *)v5;
              if (v5 > v73)
                goto LABEL_90;
            }
            v13 = v14;
            v14 = v50;
          }
          v15 = (_QWORD *)v5;
          goto LABEL_90;
        }
LABEL_50:
        v37 = v68;
        goto LABEL_53;
      }
      v29 = (unint64_t)v15 - v5;
      v15 = (_QWORD *)((char *)v15 + (((unint64_t)v15 - v5) >> 8) + 1);
      *(_DWORD *)(a1 + 300) = v29 > 0x8FF;
LABEL_90:
      v7 = v72;
      v6 = v69;
      LODWORD(v10) = v71;
      if ((unint64_t)v15 >= v73)
        goto LABEL_91;
    }
    if (v23 >= v10)
      v25 = (char *)v6;
    else
      v25 = v66;
    v26 = sub_1D4B5F19C((_QWORD *)((char *)v15 + 5), (char *)(v24 + v23 + 4), v6, v25, v67) + 4;
    LODWORD(v27) = 1;
    goto LABEL_50;
  }
LABEL_91:
  *a3 = v14;
  a3[1] = v13;
  return v6 - v5;
}

unint64_t sub_1D4B727A0(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _DWORD *v34;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  char *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _OWORD *v58;
  __int128 *v59;
  __int128 v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  _OWORD *v72;
  uint64_t v73;
  unint64_t v74;
  int v77;
  int v78;
  int v79;
  unsigned __int8 *v80;
  int v82;
  uint64_t v83;
  unsigned int v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  unint64_t v89;
  unsigned __int8 *v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95[4];

  v5 = a4;
  v6 = a4 + a5;
  v7 = a4 + a5 - 8;
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v11 = *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(a1 + 28);
  v12 = *(_DWORD *)(a1 + 256);
  v13 = *(_DWORD *)(a1 + 272);
  if (v13 >= 6)
    v13 = 6;
  if (v13 <= 4)
    v13 = 4;
  v92 = v13;
  v14 = *a3;
  v84 = a3[1];
  *(_DWORD *)(a1 + 300) = 0;
  v90 = (unsigned __int8 *)(v9 + v11);
  if (v9 + v11 == a4)
    v15 = a4 + 1;
  else
    v15 = a4;
  if (v15 < v7)
  {
    v16 = a2;
    v87 = (char *)(v8 + v11);
    v80 = (unsigned __int8 *)(v8 + v10);
    v91 = v11 - 1;
    v88 = (char *)(v6 - 32);
    v93 = 1 << v12;
    v79 = 1 - v9 - (1 << v12);
    v78 = 1 - v9;
    v94 = v11;
    v77 = v11 + v9 - 2;
    v83 = v9;
    v89 = a4 + a5;
    v85 = a4 + a5 - 8;
    v86 = v8;
    while (1)
    {
      v18 = v8;
      v19 = 0;
      v20 = v15 - v9 + 1;
      v21 = v20 - v93;
      if (v20 - *(_DWORD *)(a1 + 28) <= v93 || *(_DWORD *)(a1 + 40) != 0)
        v21 = *(_DWORD *)(a1 + 28);
      v23 = (v20 - v14);
      if (v23 >= v94)
        v24 = v9;
      else
        v24 = v18;
      if ((v91 - v23) >= 3 && v14 <= v20 - v21)
      {
        if (*(_DWORD *)(v15 + 1) == *(_DWORD *)(v24 + v23))
        {
          if (v23 >= v94)
            v25 = (char *)v6;
          else
            v25 = v87;
          v19 = sub_1D4B5F19C((_QWORD *)(v15 + 5), (char *)(v24 + v23 + 4), v6, v25, v90) + 4;
        }
        else
        {
          v19 = 0;
        }
      }
      *(_QWORD *)v95 = 999999999;
      if (v92 == 6)
      {
        v26 = sub_1D4B79C74(a1, (_QWORD *)v15, v6, v95);
      }
      else if (v92 == 5)
      {
        v26 = sub_1D4B79954(a1, (_QWORD *)v15, v6, v95);
      }
      else
      {
        v26 = sub_1D4B79630(a1, (_DWORD *)v15, v6, v95);
      }
      if (v26 <= v19)
        v27 = v19;
      else
        v27 = v26;
      if (v27 < 4)
      {
        v28 = v15 - v5;
        v15 += ((v15 - v5) >> 8) + 1;
        *(_DWORD *)(a1 + 300) = v28 > 0x8FF;
        v9 = v83;
        v8 = v86;
        goto LABEL_102;
      }
      v29 = v7;
      if (v26 <= v19)
        v30 = v15 + 1;
      else
        v30 = v15;
      if (v26 <= v19)
        v31 = 1;
      else
        v31 = *(_QWORD *)v95;
      if (v15 < v29)
      {
        v32 = 0;
        v33 = v77 + v14 - v15;
        v82 = v78 + v15;
        while (1)
        {
          v34 = (_DWORD *)(v15 + v32 + 1);
          if (v31)
          {
            if (v82 + (int)v32 - *(_DWORD *)(a1 + 28) > v93 && *(_DWORD *)(a1 + 40) == 0)
              v36 = v79 + v15 + v32;
            else
              v36 = *(_DWORD *)(a1 + 28);
            v37 = (v78 + v15 - v14 + v32);
            v38 = v83;
            if (v37 < v94)
              v38 = v86;
            if (v33 >= 3 && v14 <= v82 + (int)v32 - v36 && *v34 == *(_DWORD *)(v38 + v37))
            {
              v39 = v37 >= v94 ? (char *)v89 : v87;
              v40 = sub_1D4B5F19C((_QWORD *)(v15 + v32 + 5), (char *)(v38 + v37 + 4), v89, v39, v90);
              if (v40 <= 0xFFFFFFFFFFFFFFFBLL && 3 * ((int)v40 + 4) > (int)(__clz(v31) + 3 * v27 - 30))
              {
                v31 = 1;
                v30 = v15 + v32 + 1;
                v27 = v40 + 4;
              }
            }
          }
          *(_QWORD *)v95 = 999999999;
          v41 = (_QWORD *)(v15 + v32 + 1);
          if (v92 == 6)
            v42 = sub_1D4B79C74(a1, v41, v89, v95);
          else
            v42 = v92 == 5 ? sub_1D4B79954(a1, v41, v89, v95) : sub_1D4B79630(a1, v41, v89, v95);
          if (v42 < 4 || (int)(__clz(v95[0]) + 4 * v42 - 31) <= (int)(__clz(v31) + 4 * v27 - 27))
            break;
          ++v32;
          --v33;
          v27 = v42;
          v30 = (unint64_t)v34;
          v31 = *(_QWORD *)v95;
          if (v15 + v32 >= v85)
          {
            v31 = *(_QWORD *)v95;
            v30 = v15 + v32;
            v27 = v42;
            break;
          }
        }
        v6 = v89;
        v16 = a2;
      }
      v43 = v88;
      v44 = v84;
      if (v31 > 3)
      {
        v45 = v83;
        v46 = v30 - (v31 + v83) + 3;
        if (v94 > v46)
          v45 = v86;
        v47 = v90;
        if (v94 > v46)
          v47 = v80;
        if (v30 > v5 && v45 + (unint64_t)v46 > (unint64_t)v47)
        {
          v48 = (unsigned __int8 *)(v45 + (v30 - (v31 + v83) + 3) - 1);
          v49 = (unsigned __int8 *)(v30 - 1);
          while (*v49 == *v48)
          {
            ++v27;
            v50 = v49 - 1;
            if ((unint64_t)v49 > v5)
            {
              --v49;
              if (v48-- > v47)
                continue;
            }
            v30 = (unint64_t)(v50 + 1);
            goto LABEL_85;
          }
          v30 = (unint64_t)(v49 + 1);
        }
LABEL_85:
        v43 = v88;
        v44 = v14;
        v14 = (v31 - 3);
      }
      v52 = v30 - v5;
      v53 = *(_OWORD **)(v16 + 24);
      v84 = v44;
      if (v30 > (unint64_t)v43)
        break;
      *v53 = *(_OWORD *)v5;
      v56 = *(_QWORD *)(v16 + 24);
      if ((unint64_t)v52 > 0x10)
      {
        *(_OWORD *)(v56 + 16) = *(_OWORD *)(v5 + 16);
        if (v52 >= 33)
        {
          v57 = v56 + v52;
          v58 = (_OWORD *)(v56 + 32);
          v59 = (__int128 *)(v5 + 48);
          do
          {
            *v58 = *(v59 - 1);
            v60 = *v59;
            v59 += 2;
            v58[1] = v60;
            v58 += 2;
          }
          while ((unint64_t)v58 < v57);
        }
        goto LABEL_88;
      }
      *(_QWORD *)(v16 + 24) = v56 + v52;
      v54 = *(_QWORD *)(v16 + 8);
LABEL_96:
      *(_WORD *)(v54 + 4) = v52;
      *(_DWORD *)v54 = v31;
      if (v27 - 3 >= 0x10000)
      {
        v61 = (unint64_t)(v54 - *(_QWORD *)v16) >> 3;
        *(_DWORD *)(v16 + 72) = 2;
        *(_DWORD *)(v16 + 76) = v61;
      }
      *(_WORD *)(v54 + 6) = v27 - 3;
      *(_QWORD *)(v16 + 8) = v54 + 8;
      v8 = v86;
      if (*(_DWORD *)(a1 + 300))
        *(_DWORD *)(a1 + 300) = 0;
      v5 = v30 + v27;
      v7 = v85;
      if (v5 <= v85)
      {
        v63 = v14;
        v64 = v84;
        v9 = v83;
        while (1)
        {
          v14 = v64;
          v64 = v63;
          v65 = v5 - v83;
          v66 = v5 - v83 - v93;
          if ((int)v5 - (int)v83 - *(_DWORD *)(a1 + 28) <= v93 || *(_DWORD *)(a1 + 40) != 0)
            v66 = *(_DWORD *)(a1 + 28);
          v68 = (v65 - v14);
          v69 = v68 >= v94 ? v83 : v86;
          if ((v91 - v68) < 3 || v14 > v65 - v66 || *(_DWORD *)v5 != *(_DWORD *)(v69 + v68))
            break;
          if (v68 >= v94)
            v70 = (char *)v6;
          else
            v70 = v87;
          v71 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v69 + v68 + 4), v6, v70, v90);
          v72 = *(_OWORD **)(v16 + 24);
          if (v5 <= (unint64_t)v88)
            *v72 = *(_OWORD *)v5;
          else
            sub_1D4B56E1C(v72, (char *)v5, v5, v88);
          v73 = *(_QWORD *)(v16 + 8);
          *(_WORD *)(v73 + 4) = 0;
          *(_DWORD *)v73 = 1;
          if (v71 + 1 >= 0x10000)
          {
            v74 = (unint64_t)(v73 - *(_QWORD *)v16) >> 3;
            *(_DWORD *)(v16 + 72) = 2;
            *(_DWORD *)(v16 + 76) = v74;
          }
          *(_WORD *)(v73 + 6) = v71 + 1;
          v5 += v71 + 4;
          *(_QWORD *)(v16 + 8) = v73 + 8;
          v63 = v14;
          v62 = v64;
          v15 = v5;
          if (v5 > v85)
            goto LABEL_103;
        }
        v62 = v14;
        v14 = v63;
        v15 = v5;
        goto LABEL_103;
      }
      v15 = v5;
      v9 = v83;
LABEL_102:
      v62 = v84;
LABEL_103:
      v84 = v62;
      if (v15 >= v7)
        goto LABEL_128;
    }
    sub_1D4B56E1C(v53, (char *)v5, v30, v43);
LABEL_88:
    *(_QWORD *)(v16 + 24) += v52;
    v54 = *(_QWORD *)(v16 + 8);
    if ((unint64_t)v52 >= 0x10000)
    {
      v55 = (unint64_t)(v54 - *(_QWORD *)v16) >> 3;
      *(_DWORD *)(v16 + 72) = 1;
      *(_DWORD *)(v16 + 76) = v55;
    }
    goto LABEL_96;
  }
LABEL_128:
  *a3 = v14;
  a3[1] = v84;
  return v6 - v5;
}

unint64_t sub_1D4B72E98(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  char *v62;
  uint64_t v63;
  _OWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _OWORD *v69;
  __int128 *v70;
  __int128 v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  _OWORD *v82;
  uint64_t v83;
  unint64_t v84;
  unsigned __int8 *v87;
  unsigned int v89;
  char *v90;
  _DWORD *v91;
  char *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned int v95;
  unint64_t v96;
  unsigned int v98;
  int v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;

  v5 = a4;
  v6 = a4 + a5;
  v7 = *(_QWORD *)(a1 + 16);
  v9 = *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(a1 + 28);
  v101 = *(_QWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 256);
  v11 = *(_DWORD *)(a1 + 272);
  if (v11 >= 6)
    v11 = 6;
  if (v11 <= 4)
    v11 = 4;
  v98 = v11;
  v12 = *a3;
  v13 = a3[1];
  *(_DWORD *)(a1 + 300) = 0;
  v94 = (unsigned __int8 *)(v101 + v9);
  if (v101 + v9 == a4)
    v14 = (char *)(a4 + 1);
  else
    v14 = (char *)a4;
  v102 = a4 + a5 - 8;
  if ((unint64_t)v14 < v102)
  {
    v15 = (_DWORD *)a1;
    v92 = (char *)(v7 + v9);
    v87 = (unsigned __int8 *)(v7 + v8);
    v100 = 1 << v10;
    v99 = v9 - 1;
    v90 = (char *)(v6 - 32);
    v96 = a4 + a5;
    v93 = v7;
    v95 = v9;
    while (1)
    {
      v16 = 0;
      v17 = v7;
      v18 = (_DWORD)v14 - v101;
      v19 = (_DWORD)v14 - v101 + 1;
      v20 = v19 - v100;
      if (v19 - v15[7] <= v100 || v15[10] != 0)
        v20 = v15[7];
      v22 = (v19 - v12);
      if (v22 >= v9)
        v23 = v101;
      else
        v23 = v17;
      if ((v99 - v22) >= 3 && v12 <= v19 - v20)
      {
        if (*(_DWORD *)(v14 + 1) == *(_DWORD *)(v23 + v22))
        {
          if (v22 >= v95)
            v24 = (char *)v6;
          else
            v24 = v92;
          v16 = sub_1D4B5F19C(v14 + 5, (char *)(v23 + v22 + 4), v6, v24, v94) + 4;
        }
        else
        {
          v16 = 0;
        }
      }
      v103 = 999999999;
      if (v98 == 6)
        v25 = sub_1D4B79C74((uint64_t)v15, v14, v6, &v103);
      else
        v25 = v98 == 5 ? sub_1D4B79954((uint64_t)v15, v14, v6, &v103) : sub_1D4B79630((uint64_t)v15, v14, v6, &v103);
      v26 = v25 <= v16 ? v16 : v25;
      if (v26 >= 4)
        break;
      v27 = (unint64_t)&v14[-v5];
      v14 += ((unint64_t)&v14[-v5] >> 8) + 1;
      v15[75] = v27 > 0x8FF;
      v7 = v93;
      LODWORD(v9) = v95;
LABEL_152:
      if ((unint64_t)v14 >= v102)
        goto LABEL_153;
    }
    v89 = v13;
    if (v25 <= v16)
      v28 = v14 + 1;
    else
      v28 = v14;
    if (v25 <= v16)
      v29 = 1;
    else
      v29 = v103;
    v30 = v29;
    v91 = v28;
    v31 = v26;
    if ((unint64_t)v14 < v102)
    {
      do
      {
        v28 = v14 + 1;
        v32 = v18 + 1;
        if (v29)
        {
          v33 = a1;
          v34 = v32 - v100;
          if (v32 - *(_DWORD *)(a1 + 28) <= v100 || *(_DWORD *)(a1 + 40) != 0)
            v34 = *(_DWORD *)(a1 + 28);
          v36 = (v32 - v12);
          v37 = v101;
          if (v36 < v95)
            v37 = v93;
          if ((v99 - v36) >= 3
            && v12 <= v32 - v34
            && (v38 = v37 + v36, *v28 == *(_DWORD *)v38))
          {
            v39 = v96;
            if (v36 >= v95)
              v40 = (char *)v96;
            else
              v40 = v92;
            v41 = sub_1D4B5F19C(v14 + 5, (char *)(v38 + 4), v96, v40, v94);
            if (v41 <= 0xFFFFFFFFFFFFFFFBLL && 3 * ((int)v41 + 4) > (int)(__clz(v29) + 3 * v26 - 30))
            {
              v29 = 1;
              v91 = v14 + 1;
              v26 = v41 + 4;
            }
          }
          else
          {
            v39 = v96;
          }
        }
        else
        {
          v39 = v96;
          v33 = a1;
        }
        v103 = 999999999;
        v42 = v14 + 1;
        if (v98 == 6)
        {
          v43 = sub_1D4B79C74(v33, v42, v39, &v103);
        }
        else if (v98 == 5)
        {
          v43 = sub_1D4B79954(v33, v42, v39, &v103);
        }
        else
        {
          v43 = sub_1D4B79630(v33, v42, v39, &v103);
        }
        v31 = v43;
        if (v43 < 4 || (v30 = v103, (int)(__clz(v103) + 4 * v43 - 31) <= (int)(__clz(v29) + 4 * v26 - 27)))
        {
          if ((unint64_t)v28 >= v102)
            goto LABEL_99;
          v28 = v14 + 2;
          v18 += 2;
          if (v29)
          {
            v44 = a1;
            v45 = v18 - v100;
            if (v18 - *(_DWORD *)(a1 + 28) <= v100 || *(_DWORD *)(a1 + 40) != 0)
              v45 = *(_DWORD *)(a1 + 28);
            v47 = (v18 - v12);
            v48 = v101;
            if (v47 < v95)
              v48 = v93;
            if ((v99 - v47) < 3)
            {
              v49 = v96;
            }
            else
            {
              v49 = v96;
              if (v12 <= v18 - v45)
              {
                v50 = v48 + v47;
                if (*v28 == *(_DWORD *)v50)
                {
                  v51 = v47 >= v95 ? (char *)v96 : v92;
                  v52 = sub_1D4B5F19C(v14 + 6, (char *)(v50 + 4), v96, v51, v94);
                  if (v52 <= 0xFFFFFFFFFFFFFFFBLL && (int)(__clz(v29) + 4 * v26 - 30) < 4 * ((int)v52 + 4))
                  {
                    v29 = 1;
                    v91 = v14 + 2;
                    v26 = v52 + 4;
                  }
                }
              }
            }
          }
          else
          {
            v49 = v96;
            v44 = a1;
          }
          v103 = 999999999;
          v53 = v14 + 2;
          if (v98 == 6)
            v54 = sub_1D4B79C74(v44, v53, v49, &v103);
          else
            v54 = v98 == 5 ? sub_1D4B79954(v44, v53, v49, &v103) : sub_1D4B79630(v44, v53, v49, &v103);
          v31 = v54;
          if (v54 < 4 || (v30 = v103, (int)(__clz(v103) + 4 * v54 - 31) <= (int)(__clz(v29) + 4 * v26 - 24)))
          {
LABEL_99:
            v30 = v29;
            v28 = v91;
            v31 = v26;
            break;
          }
        }
        else
        {
          ++v18;
        }
        v14 = (char *)v28;
        v26 = v31;
        v91 = v28;
        v29 = v30;
      }
      while ((unint64_t)v28 < v102);
    }
    if (v30 <= 3)
    {
      v7 = v93;
      v62 = v90;
    }
    else
    {
      v55 = v101;
      v56 = (_DWORD)v28 - (v30 + v101) + 3;
      v7 = v93;
      v57 = v94;
      if (v95 > v56)
      {
        v55 = v93;
        v57 = v87;
      }
      if ((unint64_t)v28 > v5 && v55 + (unint64_t)v56 > (unint64_t)v57)
      {
        v58 = (unsigned __int8 *)(v55 + ((_DWORD)v28 - (v30 + v101) + 3) - 1);
        v59 = (unsigned __int8 *)v28 - 1;
        while (*v59 == *v58)
        {
          ++v31;
          v60 = v59 - 1;
          if ((unint64_t)v59 > v5)
          {
            --v59;
            if (v58-- > v57)
              continue;
          }
          v28 = v60 + 1;
          goto LABEL_112;
        }
        v28 = v59 + 1;
      }
LABEL_112:
      v62 = v90;
      v89 = v12;
      v12 = (v30 - 3);
    }
    v63 = (uint64_t)v28 - v5;
    v64 = *(_OWORD **)(a2 + 24);
    if (v28 <= (_DWORD *)v62)
    {
      *v64 = *(_OWORD *)v5;
      v67 = *(_QWORD *)(a2 + 24);
      if ((unint64_t)v63 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v67 + v63;
        v65 = *(_QWORD *)(a2 + 8);
        goto LABEL_123;
      }
      *(_OWORD *)(v67 + 16) = *(_OWORD *)(v5 + 16);
      if (v63 >= 33)
      {
        v68 = v67 + v63;
        v69 = (_OWORD *)(v67 + 32);
        v70 = (__int128 *)(v5 + 48);
        do
        {
          *v69 = *(v70 - 1);
          v71 = *v70;
          v70 += 2;
          v69[1] = v71;
          v69 += 2;
        }
        while ((unint64_t)v69 < v68);
      }
    }
    else
    {
      sub_1D4B56E1C(v64, (char *)v5, (unint64_t)v28, v62);
    }
    *(_QWORD *)(a2 + 24) += v63;
    v65 = *(_QWORD *)(a2 + 8);
    if ((unint64_t)v63 >= 0x10000)
    {
      v66 = (unint64_t)(v65 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v66;
    }
LABEL_123:
    *(_WORD *)(v65 + 4) = v63;
    *(_DWORD *)v65 = v30;
    if (v31 - 3 >= 0x10000)
    {
      v72 = (unint64_t)(v65 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v72;
    }
    *(_WORD *)(v65 + 6) = v31 - 3;
    *(_QWORD *)(a2 + 8) = v65 + 8;
    LODWORD(v9) = v95;
    if (*(_DWORD *)(a1 + 300))
      *(_DWORD *)(a1 + 300) = 0;
    v5 = (unint64_t)v28 + v31;
    if ((unint64_t)v28 + v31 <= v102)
    {
      v73 = v12;
      v74 = v89;
      v6 = v96;
      v15 = (_DWORD *)a1;
      while (1)
      {
        v12 = v74;
        v74 = v73;
        v75 = v5 - v101;
        v76 = v5 - v101 - v100;
        if ((int)v5 - (int)v101 - *(_DWORD *)(a1 + 28) <= v100 || *(_DWORD *)(a1 + 40) != 0)
          v76 = *(_DWORD *)(a1 + 28);
        v78 = (v75 - v12);
        v79 = v78 >= v95 ? v101 : v7;
        if ((v99 - v78) < 3 || v12 > v75 - v76 || *(_DWORD *)v5 != *(_DWORD *)(v79 + v78))
          break;
        if (v78 >= v95)
          v80 = (char *)v96;
        else
          v80 = v92;
        v81 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v79 + v78 + 4), v96, v80, v94);
        v82 = *(_OWORD **)(a2 + 24);
        if (v5 <= (unint64_t)v90)
          *v82 = *(_OWORD *)v5;
        else
          sub_1D4B56E1C(v82, (char *)v5, v5, v90);
        v83 = *(_QWORD *)(a2 + 8);
        *(_WORD *)(v83 + 4) = 0;
        *(_DWORD *)v83 = 1;
        if (v81 + 1 >= 0x10000)
        {
          v84 = (unint64_t)(v83 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v84;
        }
        *(_WORD *)(v83 + 6) = v81 + 1;
        v5 += v81 + 4;
        *(_QWORD *)(a2 + 8) = v83 + 8;
        v73 = v12;
        v13 = v74;
        v14 = (char *)v5;
        if (v5 > v102)
          goto LABEL_152;
      }
      v13 = v12;
      v12 = v73;
      v14 = (char *)v5;
    }
    else
    {
      v14 = (char *)v28 + v31;
      v6 = v96;
      v15 = (_DWORD *)a1;
      v13 = v89;
    }
    goto LABEL_152;
  }
LABEL_153:
  *a3 = v12;
  a3[1] = v13;
  return v6 - v5;
}

unint64_t sub_1D4B736B0(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  char *v62;
  uint64_t v63;
  _OWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _OWORD *v69;
  __int128 *v70;
  __int128 v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  _OWORD *v82;
  uint64_t v83;
  unint64_t v84;
  unsigned __int8 *v87;
  unsigned int v89;
  char *v90;
  _DWORD *v91;
  char *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned int v95;
  unint64_t v96;
  unsigned int v98;
  int v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;

  v5 = a4;
  v6 = a4 + a5;
  v7 = *(_QWORD *)(a1 + 16);
  v9 = *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(a1 + 28);
  v101 = *(_QWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 256);
  v11 = *(_DWORD *)(a1 + 272);
  if (v11 >= 6)
    v11 = 6;
  if (v11 <= 4)
    v11 = 4;
  v98 = v11;
  v12 = *a3;
  v13 = a3[1];
  *(_DWORD *)(a1 + 300) = 0;
  v94 = (unsigned __int8 *)(v101 + v9);
  if (v101 + v9 == a4)
    v14 = (char *)(a4 + 1);
  else
    v14 = (char *)a4;
  v102 = a4 + a5 - 8;
  if ((unint64_t)v14 < v102)
  {
    v15 = (_DWORD *)a1;
    v92 = (char *)(v7 + v9);
    v87 = (unsigned __int8 *)(v7 + v8);
    v100 = 1 << v10;
    v99 = v9 - 1;
    v90 = (char *)(v6 - 32);
    v96 = a4 + a5;
    v93 = v7;
    v95 = v9;
    while (1)
    {
      v16 = 0;
      v17 = v7;
      v18 = (_DWORD)v14 - v101;
      v19 = (_DWORD)v14 - v101 + 1;
      v20 = v19 - v100;
      if (v19 - v15[7] <= v100 || v15[10] != 0)
        v20 = v15[7];
      v22 = (v19 - v12);
      if (v22 >= v9)
        v23 = v101;
      else
        v23 = v17;
      if ((v99 - v22) >= 3 && v12 <= v19 - v20)
      {
        if (*(_DWORD *)(v14 + 1) == *(_DWORD *)(v23 + v22))
        {
          if (v22 >= v95)
            v24 = (char *)v6;
          else
            v24 = v92;
          v16 = sub_1D4B5F19C(v14 + 5, (char *)(v23 + v22 + 4), v6, v24, v94) + 4;
        }
        else
        {
          v16 = 0;
        }
      }
      v103 = 999999999;
      if (v98 == 6)
        v25 = sub_1D4B7A084((uint64_t)v15, (uint64_t *)v14, v6, (unsigned int *)&v103);
      else
        v25 = v98 == 5
            ? sub_1D4B7A00C((uint64_t)v15, (uint64_t *)v14, v6, (unsigned int *)&v103)
            : sub_1D4B79F94((uint64_t)v15, (uint64_t *)v14, v6, (unsigned int *)&v103);
      v26 = v25 <= v16 ? v16 : v25;
      if (v26 >= 4)
        break;
      v27 = (unint64_t)&v14[-v5];
      v14 += ((unint64_t)&v14[-v5] >> 8) + 1;
      v15[75] = v27 > 0x8FF;
      v7 = v93;
      LODWORD(v9) = v95;
LABEL_152:
      if ((unint64_t)v14 >= v102)
        goto LABEL_153;
    }
    v89 = v13;
    if (v25 <= v16)
      v28 = v14 + 1;
    else
      v28 = v14;
    if (v25 <= v16)
      v29 = 1;
    else
      v29 = v103;
    v30 = v29;
    v91 = v28;
    v31 = v26;
    if ((unint64_t)v14 < v102)
    {
      do
      {
        v28 = v14 + 1;
        v32 = v18 + 1;
        if (v29)
        {
          v33 = a1;
          v34 = v32 - v100;
          if (v32 - *(_DWORD *)(a1 + 28) <= v100 || *(_DWORD *)(a1 + 40) != 0)
            v34 = *(_DWORD *)(a1 + 28);
          v36 = (v32 - v12);
          v37 = v101;
          if (v36 < v95)
            v37 = v93;
          if ((v99 - v36) >= 3
            && v12 <= v32 - v34
            && (v38 = v37 + v36, *v28 == *(_DWORD *)v38))
          {
            v39 = v96;
            if (v36 >= v95)
              v40 = (char *)v96;
            else
              v40 = v92;
            v41 = sub_1D4B5F19C(v14 + 5, (char *)(v38 + 4), v96, v40, v94);
            if (v41 <= 0xFFFFFFFFFFFFFFFBLL && 3 * ((int)v41 + 4) > (int)(__clz(v29) + 3 * v26 - 30))
            {
              v29 = 1;
              v91 = v14 + 1;
              v26 = v41 + 4;
            }
          }
          else
          {
            v39 = v96;
          }
        }
        else
        {
          v39 = v96;
          v33 = a1;
        }
        v103 = 999999999;
        v42 = (uint64_t *)(v14 + 1);
        if (v98 == 6)
        {
          v43 = sub_1D4B7A084(v33, v42, v39, (unsigned int *)&v103);
        }
        else if (v98 == 5)
        {
          v43 = sub_1D4B7A00C(v33, v42, v39, (unsigned int *)&v103);
        }
        else
        {
          v43 = sub_1D4B79F94(v33, v42, v39, (unsigned int *)&v103);
        }
        v31 = v43;
        if (v43 < 4 || (v30 = v103, (int)(__clz(v103) + 4 * v43 - 31) <= (int)(__clz(v29) + 4 * v26 - 27)))
        {
          if ((unint64_t)v28 >= v102)
            goto LABEL_99;
          v28 = v14 + 2;
          v18 += 2;
          if (v29)
          {
            v44 = a1;
            v45 = v18 - v100;
            if (v18 - *(_DWORD *)(a1 + 28) <= v100 || *(_DWORD *)(a1 + 40) != 0)
              v45 = *(_DWORD *)(a1 + 28);
            v47 = (v18 - v12);
            v48 = v101;
            if (v47 < v95)
              v48 = v93;
            if ((v99 - v47) < 3)
            {
              v49 = v96;
            }
            else
            {
              v49 = v96;
              if (v12 <= v18 - v45)
              {
                v50 = v48 + v47;
                if (*v28 == *(_DWORD *)v50)
                {
                  v51 = v47 >= v95 ? (char *)v96 : v92;
                  v52 = sub_1D4B5F19C(v14 + 6, (char *)(v50 + 4), v96, v51, v94);
                  if (v52 <= 0xFFFFFFFFFFFFFFFBLL && (int)(__clz(v29) + 4 * v26 - 30) < 4 * ((int)v52 + 4))
                  {
                    v29 = 1;
                    v91 = v14 + 2;
                    v26 = v52 + 4;
                  }
                }
              }
            }
          }
          else
          {
            v49 = v96;
            v44 = a1;
          }
          v103 = 999999999;
          v53 = (uint64_t *)(v14 + 2);
          if (v98 == 6)
            v54 = sub_1D4B7A084(v44, v53, v49, (unsigned int *)&v103);
          else
            v54 = v98 == 5
                ? sub_1D4B7A00C(v44, v53, v49, (unsigned int *)&v103)
                : sub_1D4B79F94(v44, v53, v49, (unsigned int *)&v103);
          v31 = v54;
          if (v54 < 4 || (v30 = v103, (int)(__clz(v103) + 4 * v54 - 31) <= (int)(__clz(v29) + 4 * v26 - 24)))
          {
LABEL_99:
            v30 = v29;
            v28 = v91;
            v31 = v26;
            break;
          }
        }
        else
        {
          ++v18;
        }
        v14 = (char *)v28;
        v26 = v31;
        v91 = v28;
        v29 = v30;
      }
      while ((unint64_t)v28 < v102);
    }
    if (v30 <= 3)
    {
      v7 = v93;
      v62 = v90;
    }
    else
    {
      v55 = v101;
      v56 = (_DWORD)v28 - (v30 + v101) + 3;
      v7 = v93;
      v57 = v94;
      if (v95 > v56)
      {
        v55 = v93;
        v57 = v87;
      }
      if ((unint64_t)v28 > v5 && v55 + (unint64_t)v56 > (unint64_t)v57)
      {
        v58 = (unsigned __int8 *)(v55 + ((_DWORD)v28 - (v30 + v101) + 3) - 1);
        v59 = (unsigned __int8 *)v28 - 1;
        while (*v59 == *v58)
        {
          ++v31;
          v60 = v59 - 1;
          if ((unint64_t)v59 > v5)
          {
            --v59;
            if (v58-- > v57)
              continue;
          }
          v28 = v60 + 1;
          goto LABEL_112;
        }
        v28 = v59 + 1;
      }
LABEL_112:
      v62 = v90;
      v89 = v12;
      v12 = (v30 - 3);
    }
    v63 = (uint64_t)v28 - v5;
    v64 = *(_OWORD **)(a2 + 24);
    if (v28 <= (_DWORD *)v62)
    {
      *v64 = *(_OWORD *)v5;
      v67 = *(_QWORD *)(a2 + 24);
      if ((unint64_t)v63 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v67 + v63;
        v65 = *(_QWORD *)(a2 + 8);
        goto LABEL_123;
      }
      *(_OWORD *)(v67 + 16) = *(_OWORD *)(v5 + 16);
      if (v63 >= 33)
      {
        v68 = v67 + v63;
        v69 = (_OWORD *)(v67 + 32);
        v70 = (__int128 *)(v5 + 48);
        do
        {
          *v69 = *(v70 - 1);
          v71 = *v70;
          v70 += 2;
          v69[1] = v71;
          v69 += 2;
        }
        while ((unint64_t)v69 < v68);
      }
    }
    else
    {
      sub_1D4B56E1C(v64, (char *)v5, (unint64_t)v28, v62);
    }
    *(_QWORD *)(a2 + 24) += v63;
    v65 = *(_QWORD *)(a2 + 8);
    if ((unint64_t)v63 >= 0x10000)
    {
      v66 = (unint64_t)(v65 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v66;
    }
LABEL_123:
    *(_WORD *)(v65 + 4) = v63;
    *(_DWORD *)v65 = v30;
    if (v31 - 3 >= 0x10000)
    {
      v72 = (unint64_t)(v65 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v72;
    }
    *(_WORD *)(v65 + 6) = v31 - 3;
    *(_QWORD *)(a2 + 8) = v65 + 8;
    LODWORD(v9) = v95;
    if (*(_DWORD *)(a1 + 300))
      *(_DWORD *)(a1 + 300) = 0;
    v5 = (unint64_t)v28 + v31;
    if ((unint64_t)v28 + v31 <= v102)
    {
      v73 = v12;
      v74 = v89;
      v6 = v96;
      v15 = (_DWORD *)a1;
      while (1)
      {
        v12 = v74;
        v74 = v73;
        v75 = v5 - v101;
        v76 = v5 - v101 - v100;
        if ((int)v5 - (int)v101 - *(_DWORD *)(a1 + 28) <= v100 || *(_DWORD *)(a1 + 40) != 0)
          v76 = *(_DWORD *)(a1 + 28);
        v78 = (v75 - v12);
        v79 = v78 >= v95 ? v101 : v7;
        if ((v99 - v78) < 3 || v12 > v75 - v76 || *(_DWORD *)v5 != *(_DWORD *)(v79 + v78))
          break;
        if (v78 >= v95)
          v80 = (char *)v96;
        else
          v80 = v92;
        v81 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v79 + v78 + 4), v96, v80, v94);
        v82 = *(_OWORD **)(a2 + 24);
        if (v5 <= (unint64_t)v90)
          *v82 = *(_OWORD *)v5;
        else
          sub_1D4B56E1C(v82, (char *)v5, v5, v90);
        v83 = *(_QWORD *)(a2 + 8);
        *(_WORD *)(v83 + 4) = 0;
        *(_DWORD *)v83 = 1;
        if (v81 + 1 >= 0x10000)
        {
          v84 = (unint64_t)(v83 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v84;
        }
        *(_WORD *)(v83 + 6) = v81 + 1;
        v5 += v81 + 4;
        *(_QWORD *)(a2 + 8) = v83 + 8;
        v73 = v12;
        v13 = v74;
        v14 = (char *)v5;
        if (v5 > v102)
          goto LABEL_152;
      }
      v13 = v12;
      v12 = v73;
      v14 = (char *)v5;
    }
    else
    {
      v14 = (char *)v28 + v31;
      v6 = v96;
      v15 = (_DWORD *)a1;
      v13 = v89;
    }
    goto LABEL_152;
  }
LABEL_153:
  *a3 = v12;
  a3[1] = v13;
  return v6 - v5;
}

unint64_t sub_1D4B73EC8(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v44;
  int v45;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  char *v65;
  uint64_t v66;
  _OWORD *v67;
  char *v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  _OWORD *v73;
  __int128 *v74;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  char v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  _OWORD *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unsigned int v118;
  _QWORD *v119;
  char *v120;
  unint64_t v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;

  v5 = a4;
  v121 = a4 + a5;
  v8 = a4 + a5 - 16;
  v9 = *(_QWORD *)(a1 + 8);
  v124 = *(_QWORD *)(a1 + 16);
  v10 = *(unsigned int *)(a1 + 28);
  v126 = *(unsigned int *)(a1 + 24);
  v11 = *(_DWORD *)(a1 + 256);
  v12 = *(_DWORD *)(a1 + 272);
  if (v12 >= 6)
    v12 = 6;
  if (v12 <= 4)
    v13 = 4;
  else
    v13 = v12;
  v14 = *(_DWORD *)(a1 + 268);
  if (v14 >= 6)
    v14 = 6;
  v118 = v14;
  if (v14 <= 4)
    v15 = 4;
  else
    v15 = v14;
  v16 = *a3;
  v17 = a3[1];
  *(_DWORD *)(a1 + 300) = 0;
  v119 = (_QWORD *)(v9 + v126);
  if (v9 + v126 == a4)
    v18 = a4 + 1;
  else
    v18 = a4;
  v19 = *(unsigned int *)(a1 + 44);
  v20 = v8 - (v9 + v19);
  if ((v20 + 1) < 8)
    v21 = v20 + 1;
  else
    v21 = 8;
  v125 = a4 + a5 - 16;
  if (v8 >= v9 + v19)
    v22 = v21;
  else
    v22 = 0;
  v23 = (v22 + v19);
  if (v19 < v23)
  {
    v24 = *(_QWORD *)(a1 + 112);
    v25 = *(_QWORD *)(a1 + 56);
    v26 = *(_DWORD *)(a1 + 52);
    v27 = *(_QWORD *)(a1 + 96);
    v28 = 56 - v26;
    v29 = 24 - v26;
    do
    {
      if (v13 == 5)
      {
        v30 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v19);
      }
      else
      {
        if (v13 != 6)
        {
          LODWORD(v31) = ((-1640531535 * *(_DWORD *)(v9 + v19)) ^ v27) >> v29;
          goto LABEL_28;
        }
        v30 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v19);
      }
      v31 = (v30 ^ v27) >> v28;
LABEL_28:
      v32 = v31 >> 8 << v15;
      _X4 = v24 + 4 * v32;
      __asm { PRFM            #0, [X4] }
      if (v118 > 4)
      {
        __asm { PRFM            #0, [X4,#0x40] }
        _X3 = v25 + v32;
        __asm { PRFM            #0, [X3] }
        if (v15 == 6)
          __asm { PRFM            #0, [X3,#0x20] }
      }
      else
      {
        _X3 = v25 + v32;
        __asm { PRFM            #0, [X3] }
      }
      *(_DWORD *)(a1 + 4 * (v19++ & 7) + 64) = v31;
    }
    while (v23 != v19);
  }
  if (v18 < v125)
  {
    v115 = v124 + v10;
    v122 = v126 - 1;
    v123 = 1 << v11;
    v120 = (char *)(v121 - 32);
    do
    {
      v44 = v18 - v9 + 1;
      v45 = v44 - v123;
      if (v44 - *(_DWORD *)(a1 + 28) <= v123 || *(_DWORD *)(a1 + 40) != 0)
        v45 = *(_DWORD *)(a1 + 28);
      v47 = (v44 - v16);
      v48 = v124;
      if (v47 >= v126)
        v48 = v9;
      if ((v122 - v47) >= 3
        && v16 <= v44 - v45
        && *(_DWORD *)(v18 + 1) == *(_DWORD *)(v48 + v47))
      {
        if (v47 >= v126)
          v49 = (char *)v121;
        else
          v49 = (char *)(v124 + v126);
        v50 = sub_1D4B5F19C((_QWORD *)(v18 + 5), (char *)(v48 + v47 + 4), v121, v49, v119);
        v51 = v18 + 1;
        v52 = v50 + 4;
        LODWORD(v53) = 1;
LABEL_88:
        v65 = (char *)(v121 - 32);
        goto LABEL_91;
      }
      v127 = 999999999;
      if (v13 == 6)
      {
        if (v15 == 6)
        {
          v54 = v18 + 1;
          v55 = sub_1D4B7D1A4(a1, (_QWORD *)v18, v121, &v127);
          goto LABEL_65;
        }
        if (v15 == 5)
        {
          v54 = v18 + 1;
          v55 = sub_1D4B7CB88(a1, (_QWORD *)v18, v121, &v127);
          goto LABEL_65;
        }
        v116 = v18 + 1;
        v56 = sub_1D4B7C584(a1, (_QWORD *)v18, v121, &v127);
      }
      else if (v13 == 5)
      {
        if (v15 == 6)
        {
          v54 = v18 + 1;
          v55 = sub_1D4B7BF54(a1, (_QWORD *)v18, v121, &v127);
          goto LABEL_65;
        }
        if (v15 == 5)
        {
          v54 = v18 + 1;
          v55 = sub_1D4B7B938(a1, (_QWORD *)v18, v121, &v127);
LABEL_65:
          v51 = v54;
          v52 = v55;
          goto LABEL_68;
        }
        v116 = v18 + 1;
        v56 = sub_1D4B7B334(a1, (_QWORD *)v18, v121, &v127);
      }
      else
      {
        if (v15 == 6)
        {
          v54 = v18 + 1;
          v55 = sub_1D4B7AD0C(a1, (_DWORD *)v18, v121, &v127);
          goto LABEL_65;
        }
        if (v15 == 5)
        {
          v54 = v18 + 1;
          v55 = sub_1D4B7A6F8(a1, (_DWORD *)v18, v121, &v127);
          goto LABEL_65;
        }
        v116 = v18 + 1;
        v56 = sub_1D4B7A0FC(a1, (_DWORD *)v18, v121, &v127);
      }
      v52 = v56;
      v51 = v116;
LABEL_68:
      if (v52)
        v53 = v127;
      else
        v53 = 1;
      if (v52)
        v51 = v18;
      if (v52 <= 3)
      {
        v57 = v18 - v5;
        v18 += ((v18 - v5) >> 8) + 1;
        *(_DWORD *)(a1 + 300) = v57 > 0x8FF;
        continue;
      }
      if (v53 < 4)
        goto LABEL_88;
      v58 = v51 - (v53 + v9) + 3;
      if (v126 <= v58)
        v59 = v9;
      else
        v59 = v124;
      v60 = v9 + v126;
      if (v126 > v58)
        v60 = v115;
      if (v51 > v5 && v59 + (unint64_t)v58 > v60)
      {
        v61 = (unsigned __int8 *)(v59 + (v51 - (v53 + v9) + 3) - 1);
        v62 = (unsigned __int8 *)(v51 - 1);
        while (*v62 == *v61)
        {
          ++v52;
          v63 = v62 - 1;
          if ((unint64_t)v62 > v5)
          {
            --v62;
            if ((unint64_t)v61-- > v60)
              continue;
          }
          v51 = (unint64_t)(v63 + 1);
          goto LABEL_90;
        }
        v51 = (unint64_t)(v62 + 1);
      }
LABEL_90:
      v65 = (char *)(v121 - 32);
      v17 = v16;
      v16 = (v53 - 3);
LABEL_91:
      v66 = v51 - v5;
      v67 = *(_OWORD **)(a2 + 24);
      if (v51 > (unint64_t)v65)
      {
        v68 = (char *)v5;
        v117 = v51;
        v69 = v53;
        sub_1D4B56E1C(v67, v68, v51, v65);
        LODWORD(v53) = v69;
        v70 = v118;
LABEL_97:
        *(_QWORD *)(a2 + 24) += v66;
        v76 = *(_QWORD *)(a2 + 8);
        if ((unint64_t)v66 >= 0x10000)
        {
          v77 = (unint64_t)(v76 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 1;
          *(_DWORD *)(a2 + 76) = v77;
        }
        v51 = v117;
        goto LABEL_101;
      }
      *v67 = *(_OWORD *)v5;
      v71 = *(_QWORD *)(a2 + 24);
      if ((unint64_t)v66 > 0x10)
      {
        v117 = v51;
        *(_OWORD *)(v71 + 16) = *(_OWORD *)(v5 + 16);
        v70 = v118;
        if (v66 >= 33)
        {
          v72 = v71 + v66;
          v73 = (_OWORD *)(v71 + 32);
          v74 = (__int128 *)(v5 + 48);
          do
          {
            *v73 = *(v74 - 1);
            v75 = *v74;
            v74 += 2;
            v73[1] = v75;
            v73 += 2;
          }
          while ((unint64_t)v73 < v72);
        }
        goto LABEL_97;
      }
      *(_QWORD *)(a2 + 24) = v71 + v66;
      v76 = *(_QWORD *)(a2 + 8);
      v70 = v118;
LABEL_101:
      *(_WORD *)(v76 + 4) = v66;
      *(_DWORD *)v76 = v53;
      if (v52 - 3 >= 0x10000)
      {
        v78 = (unint64_t)(v76 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v78;
      }
      *(_WORD *)(v76 + 6) = v52 - 3;
      *(_QWORD *)(a2 + 8) = v76 + 8;
      if (*(_DWORD *)(a1 + 300))
      {
        v79 = *(unsigned int *)(a1 + 44);
        v80 = v125 - (v9 + v79);
        if ((v80 + 1) < 8)
          v81 = v80 + 1;
        else
          v81 = 8;
        if (v125 >= v9 + v79)
          v82 = v81;
        else
          v82 = 0;
        v83 = (v82 + v79);
        if (v79 < v83)
        {
          v84 = *(_QWORD *)(a1 + 112);
          v85 = *(_QWORD *)(a1 + 56);
          v86 = *(_DWORD *)(a1 + 52);
          v87 = *(_QWORD *)(a1 + 96);
          v88 = 56 - v86;
          v89 = 24 - v86;
          do
          {
            if (v13 == 5)
            {
              v90 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v79);
            }
            else
            {
              if (v13 != 6)
              {
                LODWORD(v91) = ((-1640531535 * *(_DWORD *)(v9 + v79)) ^ v87) >> v89;
                goto LABEL_118;
              }
              v90 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v79);
            }
            v91 = (v90 ^ v87) >> v88;
LABEL_118:
            v92 = v91 >> 8 << v15;
            _X17 = v84 + 4 * v92;
            __asm { PRFM            #0, [X17] }
            if (v70 > 4)
            {
              __asm { PRFM            #0, [X17,#0x40] }
              _X16 = v85 + v92;
              __asm { PRFM            #0, [X16] }
              if (v15 == 6)
                __asm { PRFM            #0, [X16,#0x20] }
            }
            else
            {
              _X16 = v85 + v92;
              __asm { PRFM            #0, [X16] }
            }
            *(_DWORD *)(a1 + 4 * (v79++ & 7) + 64) = v91;
          }
          while (v83 != v79);
        }
        *(_DWORD *)(a1 + 300) = 0;
      }
      v5 = v51 + v52;
      if (v51 + v52 <= v125)
      {
        v101 = v16;
        v102 = v17;
        while (1)
        {
          v16 = v102;
          v102 = v101;
          v103 = v5 - v9;
          v104 = v5 - v9 - v123;
          if ((int)v5 - (int)v9 - *(_DWORD *)(a1 + 28) <= v123 || *(_DWORD *)(a1 + 40) != 0)
            v104 = *(_DWORD *)(a1 + 28);
          v106 = (v103 - v16);
          v107 = v124;
          if (v106 >= v126)
            v107 = v9;
          if ((v122 - v106) < 3
            || v16 > v103 - v104
            || *(_DWORD *)v5 != *(_DWORD *)(v107 + v106))
          {
            break;
          }
          if (v106 >= v126)
            v108 = (char *)v121;
          else
            v108 = (char *)(v124 + v126);
          v109 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v107 + v106 + 4), v121, v108, v119);
          v110 = *(_OWORD **)(a2 + 24);
          if (v5 <= (unint64_t)v120)
            *v110 = *(_OWORD *)v5;
          else
            sub_1D4B56E1C(v110, (char *)v5, v5, v120);
          v111 = *(_QWORD *)(a2 + 8);
          *(_WORD *)(v111 + 4) = 0;
          *(_DWORD *)v111 = 1;
          if (v109 + 1 >= 0x10000)
          {
            v112 = (unint64_t)(v111 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v112;
          }
          *(_WORD *)(v111 + 6) = v109 + 1;
          v5 += v109 + 4;
          *(_QWORD *)(a2 + 8) = v111 + 8;
          v101 = v16;
          v17 = v102;
          v18 = v5;
          if (v5 > v125)
            goto LABEL_148;
        }
        v17 = v16;
        v16 = v101;
      }
      v18 = v5;
LABEL_148:
      ;
    }
    while (v18 < v125);
  }
  *a3 = v16;
  a3[1] = v17;
  return v121 - v5;
}

unint64_t sub_1D4B7472C(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  _DWORD *v61;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  char *v67;
  unint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  _QWORD *v71;
  _DWORD *v72;
  char *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  uint64_t v82;
  _OWORD *v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _OWORD *v89;
  __int128 *v90;
  __int128 v91;
  unint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  char v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  unint64_t v124;
  _OWORD *v125;
  uint64_t v126;
  unint64_t v127;
  int v130;
  int v131;
  int v132;
  unsigned __int8 *v133;
  uint64_t v134;
  unsigned int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  char *v140;
  char *v141;
  unsigned int v142;
  unint64_t v143;
  unsigned __int8 *v144;
  int v145;
  int v146;
  unsigned int v147;
  unsigned int v148;
  unint64_t v149;
  unsigned int v150[4];

  v5 = a4;
  v8 = a4 + a5;
  v9 = a4 + a5 - 16;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v13 = *(unsigned int *)(a1 + 24);
  v12 = *(unsigned int *)(a1 + 28);
  v14 = *(_DWORD *)(a1 + 256);
  v15 = *(_DWORD *)(a1 + 272);
  if (v15 >= 6)
    v15 = 6;
  if (v15 <= 4)
    v15 = 4;
  v148 = v15;
  if (*(_DWORD *)(a1 + 268) >= 6u)
    v16 = 6;
  else
    v16 = *(_DWORD *)(a1 + 268);
  if (v16 <= 4)
    v17 = 4;
  else
    v17 = v16;
  v18 = *a3;
  v139 = a3[1];
  *(_DWORD *)(a1 + 300) = 0;
  v144 = (unsigned __int8 *)(v10 + v13);
  if (v10 + v13 == a4)
    v19 = a4 + 1;
  else
    v19 = a4;
  v20 = *(unsigned int *)(a1 + 44);
  v21 = v9 - (v10 + v20);
  if ((v21 + 1) < 8)
    v22 = v21 + 1;
  else
    v22 = 8;
  v149 = a4 + a5 - 16;
  if (v9 >= v10 + v20)
    v23 = v22;
  else
    v23 = 0;
  v24 = (v23 + v20);
  if (v20 < v24)
  {
    v25 = *(_QWORD *)(a1 + 112);
    v26 = *(_QWORD *)(a1 + 56);
    v27 = *(_DWORD *)(a1 + 52);
    v28 = *(_QWORD *)(a1 + 96);
    v29 = 56 - v27;
    v30 = 24 - v27;
    do
    {
      if (v148 == 5)
      {
        v31 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v10 + v20);
      }
      else
      {
        if (v148 != 6)
        {
          LODWORD(v32) = ((-1640531535 * *(_DWORD *)(v10 + v20)) ^ v28) >> v30;
          goto LABEL_28;
        }
        v31 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v10 + v20);
      }
      v32 = (v31 ^ v28) >> v29;
LABEL_28:
      v33 = v32 >> 8 << v17;
      _X4 = v25 + 4 * v33;
      __asm { PRFM            #0, [X4] }
      if (v16 > 4)
      {
        __asm { PRFM            #0, [X4,#0x40] }
        _X3 = v26 + v33;
        __asm { PRFM            #0, [X3] }
        if (v17 == 6)
          __asm { PRFM            #0, [X3,#0x20] }
      }
      else
      {
        _X3 = v26 + v33;
        __asm { PRFM            #0, [X3] }
      }
      *(_DWORD *)(a1 + 4 * (v20++ & 7) + 64) = v32;
    }
    while (v24 != v20);
  }
  if (v19 < v9)
  {
    v146 = v17;
    v135 = v16;
    v140 = (char *)(v11 + v13);
    v133 = (unsigned __int8 *)(v11 + v12);
    v145 = v13 - 1;
    v141 = (char *)(v8 - 32);
    v147 = 1 << v14;
    v132 = 1 - v10 - (1 << v14);
    v131 = 1 - v10;
    v130 = v13 + v10 - 2;
    v142 = v13;
    v143 = v8;
    v134 = a2;
    v137 = v11;
    v138 = v10;
    do
    {
      v45 = v10;
      v46 = 0;
      v47 = v19 - v45 + 1;
      v48 = v47 - v147;
      if (v47 - *(_DWORD *)(a1 + 28) <= v147 || *(_DWORD *)(a1 + 40) != 0)
        v48 = *(_DWORD *)(a1 + 28);
      v50 = (v47 - v18);
      if (v50 >= v13)
        v51 = v45;
      else
        v51 = v11;
      v52 = v148;
      if ((v145 - v50) >= 3 && v18 <= v47 - v48)
      {
        if (*(_DWORD *)(v19 + 1) == *(_DWORD *)(v51 + v50))
        {
          if (v50 >= v13)
            v53 = (char *)v8;
          else
            v53 = v140;
          v46 = sub_1D4B5F19C((_QWORD *)(v19 + 5), (char *)(v51 + v50 + 4), v8, v53, v144) + 4;
          v52 = v148;
        }
        else
        {
          v46 = 0;
        }
      }
      *(_QWORD *)v150 = 999999999;
      if (v52 == 6)
      {
        if (v146 == 6)
        {
          v54 = sub_1D4B7D1A4(a1, (_QWORD *)v19, v8, v150);
        }
        else if (v146 == 5)
        {
          v54 = sub_1D4B7CB88(a1, (_QWORD *)v19, v8, v150);
        }
        else
        {
          v54 = sub_1D4B7C584(a1, (_QWORD *)v19, v8, v150);
        }
      }
      else if (v52 == 5)
      {
        if (v146 == 6)
        {
          v54 = sub_1D4B7BF54(a1, (_QWORD *)v19, v8, v150);
        }
        else if (v146 == 5)
        {
          v54 = sub_1D4B7B938(a1, (_QWORD *)v19, v8, v150);
        }
        else
        {
          v54 = sub_1D4B7B334(a1, (_QWORD *)v19, v8, v150);
        }
      }
      else if (v146 == 6)
      {
        v54 = sub_1D4B7AD0C(a1, (_DWORD *)v19, v8, v150);
      }
      else if (v146 == 5)
      {
        v54 = sub_1D4B7A6F8(a1, (_DWORD *)v19, v8, v150);
      }
      else
      {
        v54 = sub_1D4B7A0FC(a1, (_DWORD *)v19, v8, v150);
      }
      if (v54 <= v46)
        v55 = v46;
      else
        v55 = v54;
      if (v55 < 4)
      {
        v56 = v19 - v5;
        v19 += ((v19 - v5) >> 8) + 1;
        *(_DWORD *)(a1 + 300) = v56 > 0x8FF;
        v10 = v138;
        goto LABEL_171;
      }
      if (v54 <= v46)
        v57 = v19 + 1;
      else
        v57 = v19;
      if (v54 <= v46)
        v58 = 1;
      else
        v58 = *(_QWORD *)v150;
      if (v19 >= v149)
        goto LABEL_122;
      v59 = 0;
      v60 = v130 + v18 - v19;
      v136 = v131 + v19;
      do
      {
        v61 = (_DWORD *)(v19 + v59 + 1);
        if (!v58)
        {
LABEL_99:
          v66 = v148;
          goto LABEL_100;
        }
        if (v136 + (int)v59 - *(_DWORD *)(a1 + 28) > v147 && *(_DWORD *)(a1 + 40) == 0)
          v63 = v132 + v19 + v59;
        else
          v63 = *(_DWORD *)(a1 + 28);
        v64 = (v131 + v19 - v18 + v59);
        v65 = v138;
        if (v64 < v142)
          v65 = v137;
        v66 = v148;
        if (v60 >= 3 && v18 <= v136 + (int)v59 - v63 && *v61 == *(_DWORD *)(v65 + v64))
        {
          if (v64 >= v142)
            v67 = (char *)v143;
          else
            v67 = v140;
          v68 = sub_1D4B5F19C((_QWORD *)(v19 + v59 + 5), (char *)(v65 + v64 + 4), v143, v67, v144);
          if (v68 > 0xFFFFFFFFFFFFFFFBLL)
            goto LABEL_99;
          v66 = v148;
          if (3 * ((int)v68 + 4) > (int)(__clz(v58) + 3 * v55 - 30))
          {
            v58 = 1;
            v57 = v19 + v59 + 1;
            v55 = v68 + 4;
          }
        }
LABEL_100:
        *(_QWORD *)v150 = 999999999;
        if (v66 == 6)
        {
          v71 = (_QWORD *)(v19 + v59 + 1);
          if (v146 == 6)
          {
            v70 = sub_1D4B7D1A4(a1, v71, v143, v150);
          }
          else if (v146 == 5)
          {
            v70 = sub_1D4B7CB88(a1, v71, v143, v150);
          }
          else
          {
            v70 = sub_1D4B7C584(a1, v71, v143, v150);
          }
        }
        else if (v66 == 5)
        {
          v69 = (_QWORD *)(v19 + v59 + 1);
          if (v146 == 6)
          {
            v70 = sub_1D4B7BF54(a1, v69, v143, v150);
          }
          else if (v146 == 5)
          {
            v70 = sub_1D4B7B938(a1, v69, v143, v150);
          }
          else
          {
            v70 = sub_1D4B7B334(a1, v69, v143, v150);
          }
        }
        else
        {
          v72 = (_DWORD *)(v19 + v59 + 1);
          if (v146 == 6)
          {
            v70 = sub_1D4B7AD0C(a1, v72, v143, v150);
          }
          else if (v146 == 5)
          {
            v70 = sub_1D4B7A6F8(a1, v72, v143, v150);
          }
          else
          {
            v70 = sub_1D4B7A0FC(a1, v72, v143, v150);
          }
        }
        if (v70 < 4 || (int)(__clz(v150[0]) + 4 * v70 - 31) <= (int)(__clz(v58) + 4 * v55 - 27))
          goto LABEL_121;
        ++v59;
        --v60;
        v55 = v70;
        v57 = (unint64_t)v61;
        v58 = *(_QWORD *)v150;
      }
      while (v19 + v59 < v149);
      v58 = *(_QWORD *)v150;
      v57 = v19 + v59;
      v55 = v70;
LABEL_121:
      v8 = v143;
      a2 = v134;
LABEL_122:
      v73 = v141;
      v74 = v139;
      if (v58 > 3)
      {
        v75 = v138;
        v76 = v57 - (v58 + v138) + 3;
        if (v142 > v76)
          v75 = v137;
        v77 = v144;
        if (v142 > v76)
          v77 = v133;
        if (v57 > v5 && v75 + (unint64_t)v76 > (unint64_t)v77)
        {
          v78 = (unsigned __int8 *)(v75 + (v57 - (v58 + v138) + 3) - 1);
          v79 = (unsigned __int8 *)(v57 - 1);
          while (*v79 == *v78)
          {
            ++v55;
            v80 = v79 - 1;
            if ((unint64_t)v79 > v5)
            {
              --v79;
              if (v78-- > v77)
                continue;
            }
            v57 = (unint64_t)(v80 + 1);
            goto LABEL_135;
          }
          v57 = (unint64_t)(v79 + 1);
        }
LABEL_135:
        v73 = v141;
        v74 = v18;
        v18 = (v58 - 3);
      }
      v82 = v57 - v5;
      v83 = *(_OWORD **)(a2 + 24);
      v139 = v74;
      if (v57 > (unint64_t)v73)
      {
        sub_1D4B56E1C(v83, (char *)v5, v57, v73);
        v84 = v148;
        goto LABEL_138;
      }
      *v83 = *(_OWORD *)v5;
      v87 = *(_QWORD *)(a2 + 24);
      if ((unint64_t)v82 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v87 + v82;
        v85 = *(_QWORD *)(a2 + 8);
        v84 = v148;
      }
      else
      {
        *(_OWORD *)(v87 + 16) = *(_OWORD *)(v5 + 16);
        v84 = v148;
        if (v82 >= 33)
        {
          v88 = v87 + v82;
          v89 = (_OWORD *)(v87 + 32);
          v90 = (__int128 *)(v5 + 48);
          do
          {
            *v89 = *(v90 - 1);
            v91 = *v90;
            v90 += 2;
            v89[1] = v91;
            v89 += 2;
          }
          while ((unint64_t)v89 < v88);
        }
LABEL_138:
        *(_QWORD *)(a2 + 24) += v82;
        v85 = *(_QWORD *)(a2 + 8);
        if ((unint64_t)v82 >= 0x10000)
        {
          v86 = (unint64_t)(v85 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 1;
          *(_DWORD *)(a2 + 76) = v86;
        }
      }
      *(_WORD *)(v85 + 4) = v82;
      *(_DWORD *)v85 = v58;
      if (v55 - 3 >= 0x10000)
      {
        v92 = (unint64_t)(v85 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v92;
      }
      *(_WORD *)(v85 + 6) = v55 - 3;
      *(_QWORD *)(a2 + 8) = v85 + 8;
      v10 = v138;
      if (*(_DWORD *)(a1 + 300))
      {
        v93 = *(unsigned int *)(a1 + 44);
        v94 = v149 - (v138 + v93);
        if ((v94 + 1) < 8)
          v95 = v94 + 1;
        else
          v95 = 8;
        if (v149 >= v138 + v93)
          v96 = v95;
        else
          v96 = 0;
        v97 = (v96 + v93);
        if (v93 < v97)
        {
          v98 = *(_QWORD *)(a1 + 112);
          v99 = *(_QWORD *)(a1 + 56);
          v100 = *(_DWORD *)(a1 + 52);
          v101 = *(_QWORD *)(a1 + 96);
          v102 = 56 - v100;
          v103 = 24 - v100;
          do
          {
            if (v84 == 5)
            {
              v104 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v138 + v93);
            }
            else
            {
              if (v84 != 6)
              {
                LODWORD(v105) = ((-1640531535 * *(_DWORD *)(v138 + v93)) ^ v101) >> v103;
                goto LABEL_163;
              }
              v104 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v138 + v93);
            }
            v105 = (v104 ^ v101) >> v102;
LABEL_163:
            v106 = v105 >> 8 << v146;
            _X17 = v98 + 4 * v106;
            __asm { PRFM            #0, [X17] }
            if (v135 > 4)
            {
              __asm { PRFM            #0, [X17,#0x40] }
              _X16 = v99 + v106;
              __asm { PRFM            #0, [X16] }
              if (v146 == 6)
                __asm { PRFM            #0, [X16,#0x20] }
            }
            else
            {
              _X16 = v99 + v106;
              __asm { PRFM            #0, [X16] }
            }
            *(_DWORD *)(a1 + 4 * (v93++ & 7) + 64) = v105;
          }
          while (v97 != v93);
        }
        *(_DWORD *)(a1 + 300) = 0;
      }
      v5 = v57 + v55;
      if (v57 + v55 <= v149)
      {
        v116 = v18;
        v117 = v139;
        v11 = v137;
        LODWORD(v13) = v142;
        while (1)
        {
          v18 = v117;
          v117 = v116;
          v118 = v5 - v138;
          v119 = v5 - v138 - v147;
          if ((int)v5 - (int)v138 - *(_DWORD *)(a1 + 28) <= v147 || *(_DWORD *)(a1 + 40) != 0)
            v119 = *(_DWORD *)(a1 + 28);
          v121 = (v118 - v18);
          v122 = v121 >= v142 ? v138 : v137;
          if ((v145 - v121) < 3
            || v18 > v118 - v119
            || *(_DWORD *)v5 != *(_DWORD *)(v122 + v121))
          {
            break;
          }
          if (v121 >= v142)
            v123 = (char *)v8;
          else
            v123 = v140;
          v124 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v122 + v121 + 4), v8, v123, v144);
          v125 = *(_OWORD **)(a2 + 24);
          if (v5 <= (unint64_t)v141)
            *v125 = *(_OWORD *)v5;
          else
            sub_1D4B56E1C(v125, (char *)v5, v5, v141);
          v126 = *(_QWORD *)(a2 + 8);
          *(_WORD *)(v126 + 4) = 0;
          *(_DWORD *)v126 = 1;
          if (v124 + 1 >= 0x10000)
          {
            v127 = (unint64_t)(v126 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v127;
          }
          *(_WORD *)(v126 + 6) = v124 + 1;
          v5 += v124 + 4;
          *(_QWORD *)(a2 + 8) = v126 + 8;
          v116 = v18;
          v115 = v117;
          v19 = v5;
          if (v5 > v149)
            goto LABEL_172;
        }
        v115 = v18;
        v18 = v116;
        v19 = v5;
        goto LABEL_172;
      }
      v19 = v57 + v55;
      v11 = v137;
LABEL_171:
      LODWORD(v13) = v142;
      v115 = v139;
LABEL_172:
      v139 = v115;
    }
    while (v19 < v149);
  }
  *a3 = v18;
  a3[1] = v139;
  return v8 - v5;
}

unint64_t sub_1D4B75198(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v45;
  int v46;
  int v47;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  int v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  int v66;
  int v67;
  _QWORD *v68;
  unint64_t v69;
  int v70;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  _QWORD *v80;
  _DWORD *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  uint64_t v87;
  unsigned __int8 *v88;
  char *v90;
  uint64_t v91;
  _OWORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _OWORD *v97;
  __int128 *v98;
  __int128 v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  char v110;
  char v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  unint64_t v131;
  _OWORD *v132;
  uint64_t v133;
  unint64_t v134;
  unsigned __int8 *v137;
  uint64_t v138;
  unsigned int v139;
  unsigned int v140;
  char *v141;
  _DWORD *v142;
  unsigned int v143;
  char *v144;
  uint64_t v145;
  unsigned __int8 *v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  unsigned int v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;

  v5 = a4;
  v154 = a4 + a5;
  v8 = a4 + a5 - 16;
  v9 = *(_QWORD *)(a1 + 8);
  v153 = *(_QWORD *)(a1 + 16);
  v11 = *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(a1 + 28);
  v12 = *(_DWORD *)(a1 + 256);
  v13 = *(_DWORD *)(a1 + 272);
  if (v13 >= 6)
    v13 = 6;
  if (v13 <= 4)
    v14 = 4;
  else
    v14 = v13;
  if (*(_DWORD *)(a1 + 268) >= 6u)
    v15 = 6;
  else
    v15 = *(_DWORD *)(a1 + 268);
  if (v15 <= 4)
    v16 = 4;
  else
    v16 = v15;
  v17 = *a3;
  v18 = a3[1];
  *(_DWORD *)(a1 + 300) = 0;
  v146 = (unsigned __int8 *)(v9 + v11);
  if (v9 + v11 == a4)
    v19 = (char *)(a4 + 1);
  else
    v19 = (char *)a4;
  v20 = *(unsigned int *)(a1 + 44);
  v21 = v8 - (v9 + v20);
  if ((v21 + 1) < 8)
    v22 = v21 + 1;
  else
    v22 = 8;
  v155 = a4 + a5 - 16;
  if (v8 >= v9 + v20)
    v23 = v22;
  else
    v23 = 0;
  v24 = (v23 + v20);
  if (v20 < v24)
  {
    v25 = *(_QWORD *)(a1 + 112);
    v26 = *(_QWORD *)(a1 + 56);
    v27 = *(_DWORD *)(a1 + 52);
    v28 = *(_QWORD *)(a1 + 96);
    v29 = 56 - v27;
    v30 = 24 - v27;
    do
    {
      if (v14 == 5)
      {
        v31 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v20);
      }
      else
      {
        if (v14 != 6)
        {
          LODWORD(v32) = ((-1640531535 * *(_DWORD *)(v9 + v20)) ^ v28) >> v30;
          goto LABEL_29;
        }
        v31 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v20);
      }
      v32 = (v31 ^ v28) >> v29;
LABEL_29:
      v33 = v32 >> 8 << v16;
      _X4 = v25 + 4 * v33;
      __asm { PRFM            #0, [X4] }
      if (v15 > 4)
      {
        __asm { PRFM            #0, [X4,#0x40] }
        _X3 = v26 + v33;
        __asm { PRFM            #0, [X3] }
        if (v16 == 6)
          __asm { PRFM            #0, [X3,#0x20] }
      }
      else
      {
        _X3 = v26 + v33;
        __asm { PRFM            #0, [X3] }
      }
      *(_DWORD *)(a1 + 4 * (v20++ & 7) + 64) = v32;
    }
    while (v24 != v20);
  }
  if ((unint64_t)v19 < v8)
  {
    v149 = v16;
    v150 = v14;
    v139 = v15;
    v144 = (char *)(v153 + v11);
    v137 = (unsigned __int8 *)(v153 + v10);
    v151 = v11 - 1;
    v152 = 1 << v12;
    v141 = (char *)(v154 - 32);
    v145 = v9;
    v138 = a2;
    v143 = v11;
    while (1)
    {
      v45 = 0;
      v147 = (_DWORD)v19 - v9;
      v46 = (_DWORD)v19 - v9 + 1;
      v47 = v46 - v152;
      if (v46 - *(_DWORD *)(a1 + 28) <= v152 || *(_DWORD *)(a1 + 40) != 0)
        v47 = *(_DWORD *)(a1 + 28);
      v49 = (v46 - v17);
      v50 = v153;
      if (v49 >= v11)
        v50 = v9;
      if ((v151 - v49) >= 3 && v17 <= v46 - v47)
      {
        if (*(_DWORD *)(v19 + 1) == *(_DWORD *)(v50 + v49))
        {
          if (v49 >= v11)
            v51 = (char *)v154;
          else
            v51 = v144;
          v45 = sub_1D4B5F19C(v19 + 5, (char *)(v50 + v49 + 4), v154, v51, v146) + 4;
        }
        else
        {
          v45 = 0;
        }
      }
      v156 = 999999999;
      if (v150 == 6)
      {
        if (v149 == 6)
          v52 = sub_1D4B7D1A4(a1, v19, v154, &v156);
        else
          v52 = v149 == 5 ? sub_1D4B7CB88(a1, v19, v154, &v156) : sub_1D4B7C584(a1, v19, v154, &v156);
      }
      else if (v150 == 5)
      {
        if (v149 == 6)
          v52 = sub_1D4B7BF54(a1, v19, v154, &v156);
        else
          v52 = v149 == 5 ? sub_1D4B7B938(a1, v19, v154, &v156) : sub_1D4B7B334(a1, v19, v154, &v156);
      }
      else if (v149 == 6)
      {
        v52 = sub_1D4B7AD0C(a1, v19, v154, &v156);
      }
      else
      {
        v52 = v149 == 5 ? sub_1D4B7A6F8(a1, v19, v154, &v156) : sub_1D4B7A0FC(a1, v19, v154, &v156);
      }
      v53 = v52 <= v45 ? v45 : v52;
      if (v53 >= 4)
        break;
      v54 = (unint64_t)&v19[-v5];
      v19 += ((unint64_t)&v19[-v5] >> 8) + 1;
      *(_DWORD *)(a1 + 300) = v54 > 0x8FF;
      v9 = v145;
LABEL_232:
      if ((unint64_t)v19 >= v155)
        goto LABEL_233;
    }
    v140 = v18;
    if (v52 <= v45)
      v55 = v19 + 1;
    else
      v55 = v19;
    if (v52 <= v45)
      v56 = 1;
    else
      v56 = v156;
    v57 = v56;
    v142 = v55;
    v11 = v53;
    v58 = v147;
    if ((unint64_t)v19 < v155)
    {
      while (1)
      {
        v55 = v19 + 1;
        v148 = v58++;
        if (!v56)
          goto LABEL_97;
        v59 = v58 - v152;
        if (v58 - *(_DWORD *)(a1 + 28) <= v152 || *(_DWORD *)(a1 + 40) != 0)
          v59 = *(_DWORD *)(a1 + 28);
        v61 = (v58 - v17);
        v62 = v145;
        if (v61 < v143)
          v62 = v153;
        if ((v151 - v61) >= 3
          && v17 <= v58 - v59
          && (v63 = v62 + v61, *v55 == *(_DWORD *)v63)
          && (v61 >= v143 ? (v64 = (char *)v154) : (v64 = v144),
              v65 = sub_1D4B5F19C(v19 + 5, (char *)(v63 + 4), v154, v64, v146),
              v65 <= 0xFFFFFFFFFFFFFFFBLL))
        {
          v67 = v149;
          v66 = v150;
          if (3 * ((int)v65 + 4) > (int)(__clz(v56) + 3 * v53 - 30))
          {
            v56 = 1;
            v142 = v19 + 1;
            v53 = v65 + 4;
          }
        }
        else
        {
LABEL_97:
          v67 = v149;
          v66 = v150;
        }
        v156 = 999999999;
        v68 = v19 + 1;
        if (v66 == 6)
        {
          if (v67 == 6)
            v69 = sub_1D4B7D1A4(a1, v68, v154, &v156);
          else
            v69 = v67 == 5 ? sub_1D4B7CB88(a1, v68, v154, &v156) : sub_1D4B7C584(a1, v68, v154, &v156);
        }
        else if (v66 == 5)
        {
          if (v67 == 6)
            v69 = sub_1D4B7BF54(a1, v68, v154, &v156);
          else
            v69 = v67 == 5 ? sub_1D4B7B938(a1, v68, v154, &v156) : sub_1D4B7B334(a1, v68, v154, &v156);
        }
        else if (v67 == 6)
        {
          v69 = sub_1D4B7AD0C(a1, v68, v154, &v156);
        }
        else
        {
          v69 = v67 == 5 ? sub_1D4B7A6F8(a1, v68, v154, &v156) : sub_1D4B7A0FC(a1, v68, v154, &v156);
        }
        v11 = v69;
        if (v69 < 4 || (v57 = v156, (int)(__clz(v156) + 4 * v69 - 31) <= (int)(__clz(v56) + 4 * v53 - 27)))
        {
          if ((unint64_t)v55 >= v155)
            break;
          v55 = v19 + 2;
          v58 = v148 + 2;
          if (!v56)
            goto LABEL_135;
          v70 = v58 - v152;
          if (v58 - *(_DWORD *)(a1 + 28) <= v152 || *(_DWORD *)(a1 + 40) != 0)
            v70 = *(_DWORD *)(a1 + 28);
          v72 = (v58 - v17);
          v73 = v145;
          if (v72 < v143)
            v73 = v153;
          if ((v151 - v72) >= 3)
          {
            v74 = v150;
            if (v17 <= v58 - v70)
            {
              v75 = v73 + v72;
              if (*v55 == *(_DWORD *)v75)
              {
                v76 = v72 >= v143 ? (char *)v154 : v144;
                v77 = sub_1D4B5F19C(v19 + 6, (char *)(v75 + 4), v154, v76, v146);
                if (v77 <= 0xFFFFFFFFFFFFFFFBLL && (int)(__clz(v56) + 4 * v53 - 30) < 4 * ((int)v77 + 4))
                {
                  v56 = 1;
                  v142 = v19 + 2;
                  v53 = v77 + 4;
                }
              }
            }
          }
          else
          {
LABEL_135:
            v74 = v150;
          }
          v156 = 999999999;
          if (v74 == 6)
          {
            v80 = v19 + 2;
            if (v149 == 6)
              v79 = sub_1D4B7D1A4(a1, v80, v154, &v156);
            else
              v79 = v149 == 5 ? sub_1D4B7CB88(a1, v80, v154, &v156) : sub_1D4B7C584(a1, v80, v154, &v156);
          }
          else if (v74 == 5)
          {
            v78 = v19 + 2;
            if (v149 == 6)
              v79 = sub_1D4B7BF54(a1, v78, v154, &v156);
            else
              v79 = v149 == 5 ? sub_1D4B7B938(a1, v78, v154, &v156) : sub_1D4B7B334(a1, v78, v154, &v156);
          }
          else
          {
            v81 = v19 + 2;
            if (v149 == 6)
              v79 = sub_1D4B7AD0C(a1, v81, v154, &v156);
            else
              v79 = v149 == 5 ? sub_1D4B7A6F8(a1, v81, v154, &v156) : sub_1D4B7A0FC(a1, v81, v154, &v156);
          }
          v11 = v79;
          if (v79 < 4)
            break;
          v57 = v156;
          if ((int)(__clz(v156) + 4 * v79 - 31) <= (int)(__clz(v56) + 4 * v53 - 24))
            break;
        }
        v19 = (char *)v55;
        v53 = v11;
        v142 = v55;
        v56 = v57;
        if ((unint64_t)v55 >= v155)
          goto LABEL_158;
      }
      v57 = v56;
      v55 = v142;
      v11 = v53;
    }
LABEL_158:
    if (v57 <= 3)
    {
      v87 = v138;
      v9 = v145;
      v90 = (char *)(v154 - 32);
    }
    else
    {
      v9 = v145;
      v82 = (_DWORD)v55 - (v57 + v145) + 3;
      if (v143 <= v82)
        v83 = v145;
      else
        v83 = v153;
      v84 = v146;
      if (v143 > v82)
        v84 = v137;
      if ((unint64_t)v55 <= v5 || v83 + (unint64_t)v82 <= (unint64_t)v84)
      {
        v87 = v138;
      }
      else
      {
        v85 = (unsigned __int8 *)(v83 + ((_DWORD)v55 - (v57 + v145) + 3) - 1);
        v86 = (unsigned __int8 *)v55 - 1;
        v87 = v138;
        while (*v86 == *v85)
        {
          ++v11;
          v88 = v86 - 1;
          if ((unint64_t)v86 > v5)
          {
            --v86;
            if (v85-- > v84)
              continue;
          }
          v55 = v88 + 1;
          goto LABEL_174;
        }
        v55 = v86 + 1;
      }
LABEL_174:
      v90 = (char *)(v154 - 32);
      v140 = v17;
      v17 = (v57 - 3);
    }
    v91 = (uint64_t)v55 - v5;
    v92 = *(_OWORD **)(v87 + 24);
    if (v55 <= (_DWORD *)v90)
    {
      *v92 = *(_OWORD *)v5;
      v95 = *(_QWORD *)(v87 + 24);
      if ((unint64_t)v91 <= 0x10)
      {
        *(_QWORD *)(v87 + 24) = v95 + v91;
        v93 = *(_QWORD *)(v87 + 8);
        goto LABEL_185;
      }
      *(_OWORD *)(v95 + 16) = *(_OWORD *)(v5 + 16);
      if (v91 >= 33)
      {
        v96 = v95 + v91;
        v97 = (_OWORD *)(v95 + 32);
        v98 = (__int128 *)(v5 + 48);
        do
        {
          *v97 = *(v98 - 1);
          v99 = *v98;
          v98 += 2;
          v97[1] = v99;
          v97 += 2;
        }
        while ((unint64_t)v97 < v96);
      }
    }
    else
    {
      sub_1D4B56E1C(v92, (char *)v5, (unint64_t)v55, v90);
    }
    *(_QWORD *)(v87 + 24) += v91;
    v93 = *(_QWORD *)(v87 + 8);
    if ((unint64_t)v91 >= 0x10000)
    {
      v94 = (unint64_t)(v93 - *(_QWORD *)v87) >> 3;
      *(_DWORD *)(v87 + 72) = 1;
      *(_DWORD *)(v87 + 76) = v94;
    }
LABEL_185:
    *(_WORD *)(v93 + 4) = v91;
    *(_DWORD *)v93 = v57;
    if (v11 - 3 >= 0x10000)
    {
      v100 = (unint64_t)(v93 - *(_QWORD *)v87) >> 3;
      *(_DWORD *)(v87 + 72) = 2;
      *(_DWORD *)(v87 + 76) = v100;
    }
    *(_WORD *)(v93 + 6) = v11 - 3;
    *(_QWORD *)(v87 + 8) = v93 + 8;
    if (*(_DWORD *)(a1 + 300))
    {
      v101 = *(unsigned int *)(a1 + 44);
      v102 = v155 - (v9 + v101);
      if ((v102 + 1) < 8)
        v103 = v102 + 1;
      else
        v103 = 8;
      if (v155 >= v9 + v101)
        v104 = v103;
      else
        v104 = 0;
      v105 = (v104 + v101);
      if (v101 < v105)
      {
        v106 = *(_QWORD *)(a1 + 112);
        v107 = *(_QWORD *)(a1 + 56);
        v108 = *(_DWORD *)(a1 + 52);
        v109 = *(_QWORD *)(a1 + 96);
        v110 = 56 - v108;
        v111 = 24 - v108;
        do
        {
          if (v150 == 5)
          {
            v112 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v101);
          }
          else
          {
            if (v150 != 6)
            {
              LODWORD(v113) = ((-1640531535 * *(_DWORD *)(v9 + v101)) ^ v109) >> v111;
              goto LABEL_202;
            }
            v112 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v101);
          }
          v113 = (v112 ^ v109) >> v110;
LABEL_202:
          v114 = v113 >> 8 << v149;
          _X17 = v106 + 4 * v114;
          __asm { PRFM            #0, [X17] }
          if (v139 > 4)
          {
            __asm { PRFM            #0, [X17,#0x40] }
            _X16 = v107 + v114;
            __asm { PRFM            #0, [X16] }
            if (v149 == 6)
              __asm { PRFM            #0, [X16,#0x20] }
          }
          else
          {
            _X16 = v107 + v114;
            __asm { PRFM            #0, [X16] }
          }
          *(_DWORD *)(a1 + 4 * (v101++ & 7) + 64) = v113;
        }
        while (v105 != v101);
      }
      *(_DWORD *)(a1 + 300) = 0;
    }
    v5 = (unint64_t)v55 + v11;
    if ((unint64_t)v55 + v11 <= v155)
    {
      v123 = v17;
      v124 = v140;
      LODWORD(v11) = v143;
      while (1)
      {
        v17 = v124;
        v124 = v123;
        v125 = v5 - v9;
        v126 = v5 - v9 - v152;
        if ((int)v5 - (int)v9 - *(_DWORD *)(a1 + 28) <= v152 || *(_DWORD *)(a1 + 40) != 0)
          v126 = *(_DWORD *)(a1 + 28);
        v128 = (v125 - v17);
        v129 = v153;
        if (v128 >= v143)
          v129 = v9;
        if ((v151 - v128) < 3
          || v17 > v125 - v126
          || *(_DWORD *)v5 != *(_DWORD *)(v129 + v128))
        {
          break;
        }
        if (v128 >= v143)
          v130 = (char *)v154;
        else
          v130 = v144;
        v131 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v129 + v128 + 4), v154, v130, v146);
        v132 = *(_OWORD **)(v87 + 24);
        if (v5 <= (unint64_t)v141)
          *v132 = *(_OWORD *)v5;
        else
          sub_1D4B56E1C(v132, (char *)v5, v5, v141);
        v133 = *(_QWORD *)(v87 + 8);
        *(_WORD *)(v133 + 4) = 0;
        *(_DWORD *)v133 = 1;
        if (v131 + 1 >= 0x10000)
        {
          v134 = (unint64_t)(v133 - *(_QWORD *)v87) >> 3;
          *(_DWORD *)(v87 + 72) = 2;
          *(_DWORD *)(v87 + 76) = v134;
        }
        *(_WORD *)(v133 + 6) = v131 + 1;
        v5 += v131 + 4;
        *(_QWORD *)(v87 + 8) = v133 + 8;
        v123 = v17;
        v18 = v124;
        v19 = (char *)v5;
        if (v5 > v155)
          goto LABEL_232;
      }
      v18 = v17;
      v17 = v123;
      v19 = (char *)v5;
    }
    else
    {
      v19 = (char *)v55 + v11;
      LODWORD(v11) = v143;
      v18 = v140;
    }
    goto LABEL_232;
  }
LABEL_233:
  *a3 = v17;
  a3[1] = v18;
  return v154 - v5;
}

unint64_t sub_1D4B75DAC(uint64_t a1, _DWORD *a2, _DWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t result;
  unint64_t v25;
  unsigned int v26;
  _DWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v4 = *(_QWORD *)(a1 + 128);
  v5 = *(_DWORD *)(a1 + 260);
  v6 = 1 << v5;
  v7 = (1 << v5) - 1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (_DWORD)a2 - v8;
  v10 = 1 << *(_DWORD *)(a1 + 256);
  v11 = *(unsigned int *)(a1 + 44);
  if ((int)a2 - (int)v8 - *(_DWORD *)(a1 + 28) > v10 && *(_DWORD *)(a1 + 40) == 0)
    v13 = (_DWORD)a2 - v8 - v10;
  else
    v13 = *(_DWORD *)(a1 + 28);
  v14 = v9 >= v6;
  v15 = v9 - v6;
  if (!v14)
    v15 = 0;
  v16 = 1 << *(_DWORD *)(a1 + 268);
  v17 = *(_DWORD *)(a1 + 300);
  v18 = *(_QWORD *)(a1 + 112);
  v19 = ~(-1 << v5);
  v20 = 32 - *(_DWORD *)(a1 + 264);
  if (v11 <= v9)
    v21 = v9;
  else
    v21 = v11;
  do
  {
    if (v21 == v11)
      break;
    v22 = (-1640531535 * *(_DWORD *)(v8 + v11)) >> v20;
    *(_DWORD *)(v4 + 4 * (v11 & v19)) = *(_DWORD *)(v18 + 4 * v22);
    *(_DWORD *)(v18 + 4 * v22) = v11++;
  }
  while (!v17);
  *(_DWORD *)(a1 + 44) = v9;
  v23 = *(_DWORD *)(v18 + 4 * ((-1640531535 * *a2) >> v20));
  if (v23 < v13)
    return 3;
  v25 = (unint64_t)a3 - 7;
  v26 = v9 + 3;
  v27 = a2 + 2;
  v28 = v8 + 8;
  v29 = 3;
  while (1)
  {
    v30 = v23;
    v31 = (_QWORD *)(v8 + v23);
    if (*(_DWORD *)((char *)v31 + v29 - 3) != *(_DWORD *)((char *)a2 + v29 - 3))
      goto LABEL_34;
    if (v25 <= (unint64_t)a2)
    {
      v33 = a2;
    }
    else
    {
      v32 = *(_QWORD *)a2 ^ *v31;
      if (v32)
      {
        result = __clz(__rbit64(v32)) >> 3;
        goto LABEL_32;
      }
      v34 = 0;
      while (1)
      {
        v33 = &v27[v34];
        if ((unint64_t)&v27[v34] >= v25)
          break;
        v35 = *(_QWORD *)(v28 + v30 + v34 * 4);
        v34 += 2;
        v36 = *v33 ^ v35;
        if (v36)
        {
          result = v34 * 4 + (__clz(__rbit64(v36)) >> 3);
          goto LABEL_32;
        }
      }
      v31 = (_QWORD *)(v28 + v30 + v34 * 4);
    }
    if (v33 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v31 == *(_DWORD *)v33)
    {
      v33 = (_QWORD *)((char *)v33 + 4);
      v31 = (_QWORD *)((char *)v31 + 4);
    }
    if (v33 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v31 == *(unsigned __int16 *)v33)
    {
      v33 = (_QWORD *)((char *)v33 + 2);
      v31 = (_QWORD *)((char *)v31 + 2);
    }
    if (v33 < (_QWORD *)a3 && *(unsigned __int8 *)v31 == *(unsigned __int8 *)v33)
      v33 = (_QWORD *)((char *)v33 + 1);
    result = (char *)v33 - (char *)a2;
LABEL_32:
    if (result > v29)
    {
      *a4 = v26 - v30;
      v29 = result;
      if ((_DWORD *)((char *)a2 + result) == a3)
        return result;
    }
LABEL_34:
    if (v30 <= v15)
      return v29;
    if (!--v16)
      return v29;
    v23 = *(_DWORD *)(v4 + 4 * (v30 & v7));
    result = v29;
    if (v23 < v13)
      return result;
  }
}

unint64_t sub_1D4B75FF0(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t result;
  unint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v4 = *(_QWORD *)(a1 + 128);
  v5 = *(_DWORD *)(a1 + 260);
  v6 = 1 << v5;
  v7 = (1 << v5) - 1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (_DWORD)a2 - v8;
  v10 = 1 << *(_DWORD *)(a1 + 256);
  v11 = *(unsigned int *)(a1 + 44);
  if ((int)a2 - (int)v8 - *(_DWORD *)(a1 + 28) > v10 && *(_DWORD *)(a1 + 40) == 0)
    v13 = (_DWORD)a2 - v8 - v10;
  else
    v13 = *(_DWORD *)(a1 + 28);
  v14 = v9 >= v6;
  v15 = v9 - v6;
  if (!v14)
    v15 = 0;
  v16 = 1 << *(_DWORD *)(a1 + 268);
  v17 = *(_DWORD *)(a1 + 300);
  v18 = *(_QWORD *)(a1 + 112);
  v19 = ~(-1 << v5);
  v20 = 64 - *(_DWORD *)(a1 + 264);
  if (v11 <= v9)
    v21 = v9;
  else
    v21 = v11;
  do
  {
    if (v21 == v11)
      break;
    v22 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v8 + v11)) >> v20;
    *(_DWORD *)(v4 + 4 * (v11 & v19)) = *(_DWORD *)(v18 + 4 * v22);
    *(_DWORD *)(v18 + 4 * v22) = v11++;
  }
  while (!v17);
  v23 = *a2;
  *(_DWORD *)(a1 + 44) = v9;
  v24 = *(_DWORD *)(v18 + 4 * ((0xCF1BBCDCBB000000 * v23) >> v20));
  if (v24 < v13)
    return 3;
  v26 = (unint64_t)a3 - 7;
  v27 = v9 + 3;
  v28 = a2 + 1;
  v29 = v8 + 8;
  v30 = 3;
  while (1)
  {
    v31 = v24;
    v32 = (_QWORD *)(v8 + v24);
    if (*(_DWORD *)((char *)v32 + v30 - 3) != *(_DWORD *)((char *)a2 + v30 - 3))
      goto LABEL_34;
    if (v26 <= (unint64_t)a2)
    {
      v34 = a2;
    }
    else
    {
      v33 = *a2 ^ *v32;
      if (v33)
      {
        result = __clz(__rbit64(v33)) >> 3;
        goto LABEL_32;
      }
      v35 = 0;
      while (1)
      {
        v34 = &v28[v35];
        if ((unint64_t)&v28[v35] >= v26)
          break;
        v36 = *(_QWORD *)(v29 + v31 + v35 * 8);
        ++v35;
        v37 = *v34 ^ v36;
        if (v37)
        {
          result = v35 * 8 + (__clz(__rbit64(v37)) >> 3);
          goto LABEL_32;
        }
      }
      v32 = (_QWORD *)(v29 + v31 + v35 * 8);
    }
    if (v34 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v32 == *(_DWORD *)v34)
    {
      v34 = (_QWORD *)((char *)v34 + 4);
      v32 = (_QWORD *)((char *)v32 + 4);
    }
    if (v34 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v32 == *(unsigned __int16 *)v34)
    {
      v34 = (_QWORD *)((char *)v34 + 2);
      v32 = (_QWORD *)((char *)v32 + 2);
    }
    if (v34 < a3 && *(unsigned __int8 *)v32 == *(unsigned __int8 *)v34)
      v34 = (_QWORD *)((char *)v34 + 1);
    result = (char *)v34 - (char *)a2;
LABEL_32:
    if (result > v30)
    {
      *a4 = v27 - v31;
      v30 = result;
      if ((_QWORD *)((char *)a2 + result) == a3)
        return result;
    }
LABEL_34:
    if (v31 <= v15)
      return v30;
    if (!--v16)
      return v30;
    v24 = *(_DWORD *)(v4 + 4 * (v31 & v7));
    result = v30;
    if (v24 < v13)
      return result;
  }
}

unint64_t sub_1D4B76238(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t result;
  unint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v4 = *(_QWORD *)(a1 + 128);
  v5 = *(_DWORD *)(a1 + 260);
  v6 = 1 << v5;
  v7 = (1 << v5) - 1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (_DWORD)a2 - v8;
  v10 = 1 << *(_DWORD *)(a1 + 256);
  v11 = *(unsigned int *)(a1 + 44);
  if ((int)a2 - (int)v8 - *(_DWORD *)(a1 + 28) > v10 && *(_DWORD *)(a1 + 40) == 0)
    v13 = (_DWORD)a2 - v8 - v10;
  else
    v13 = *(_DWORD *)(a1 + 28);
  v14 = v9 >= v6;
  v15 = v9 - v6;
  if (!v14)
    v15 = 0;
  v16 = 1 << *(_DWORD *)(a1 + 268);
  v17 = *(_DWORD *)(a1 + 300);
  v18 = *(_QWORD *)(a1 + 112);
  v19 = ~(-1 << v5);
  v20 = 64 - *(_DWORD *)(a1 + 264);
  if (v11 <= v9)
    v21 = v9;
  else
    v21 = v11;
  do
  {
    if (v21 == v11)
      break;
    v22 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v8 + v11)) >> v20;
    *(_DWORD *)(v4 + 4 * (v11 & v19)) = *(_DWORD *)(v18 + 4 * v22);
    *(_DWORD *)(v18 + 4 * v22) = v11++;
  }
  while (!v17);
  v23 = *a2;
  *(_DWORD *)(a1 + 44) = v9;
  v24 = *(_DWORD *)(v18 + 4 * ((0xCF1BBCDCBF9B0000 * v23) >> v20));
  if (v24 < v13)
    return 3;
  v26 = (unint64_t)a3 - 7;
  v27 = v9 + 3;
  v28 = a2 + 1;
  v29 = v8 + 8;
  v30 = 3;
  while (1)
  {
    v31 = v24;
    v32 = (_QWORD *)(v8 + v24);
    if (*(_DWORD *)((char *)v32 + v30 - 3) != *(_DWORD *)((char *)a2 + v30 - 3))
      goto LABEL_34;
    if (v26 <= (unint64_t)a2)
    {
      v34 = a2;
    }
    else
    {
      v33 = *a2 ^ *v32;
      if (v33)
      {
        result = __clz(__rbit64(v33)) >> 3;
        goto LABEL_32;
      }
      v35 = 0;
      while (1)
      {
        v34 = &v28[v35];
        if ((unint64_t)&v28[v35] >= v26)
          break;
        v36 = *(_QWORD *)(v29 + v31 + v35 * 8);
        ++v35;
        v37 = *v34 ^ v36;
        if (v37)
        {
          result = v35 * 8 + (__clz(__rbit64(v37)) >> 3);
          goto LABEL_32;
        }
      }
      v32 = (_QWORD *)(v29 + v31 + v35 * 8);
    }
    if (v34 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v32 == *(_DWORD *)v34)
    {
      v34 = (_QWORD *)((char *)v34 + 4);
      v32 = (_QWORD *)((char *)v32 + 4);
    }
    if (v34 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v32 == *(unsigned __int16 *)v34)
    {
      v34 = (_QWORD *)((char *)v34 + 2);
      v32 = (_QWORD *)((char *)v32 + 2);
    }
    if (v34 < a3 && *(unsigned __int8 *)v32 == *(unsigned __int8 *)v34)
      v34 = (_QWORD *)((char *)v34 + 1);
    result = (char *)v34 - (char *)a2;
LABEL_32:
    if (result > v30)
    {
      *a4 = v27 - v31;
      v30 = result;
      if ((_QWORD *)((char *)a2 + result) == a3)
        return result;
    }
LABEL_34:
    if (v31 <= v15)
      return v30;
    if (!--v16)
      return v30;
    v24 = *(_DWORD *)(v4 + 4 * (v31 & v7));
    result = v30;
    if (v24 < v13)
      return result;
  }
}

unint64_t sub_1D4B76480(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned int *a4)
{
  if (*(_QWORD *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2)
    return 0;
  sub_1D4B87034(a1, (int)a2, 4);
  return sub_1D4B87160(a1, a2, a3, a4, 4, 0);
}

unint64_t sub_1D4B764F8(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned int *a4)
{
  if (*(_QWORD *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2)
    return 0;
  sub_1D4B87034(a1, (int)a2, 5);
  return sub_1D4B87160(a1, a2, a3, a4, 5, 0);
}

unint64_t sub_1D4B76570(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned int *a4)
{
  if (*(_QWORD *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2)
    return 0;
  sub_1D4B87034(a1, (int)a2, 6);
  return sub_1D4B87160(a1, a2, a3, a4, 6, 0);
}

unint64_t sub_1D4B765E8(uint64_t a1, _DWORD *a2, _DWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v42;
  uint64_t v43;
  int8x16_t *v44;
  char v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  _DWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t result;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  _DWORD v96[64];
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_DWORD *)(a1 + 52);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > v9 && *(_DWORD *)(a1 + 40) == 0)
    v11 = (_DWORD)a2 - v7 - v9;
  else
    v11 = *(_DWORD *)(a1 + 28);
  v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 4)
    LOBYTE(v12) = 4;
  v13 = *(_QWORD *)(a1 + 96);
  if (*(_DWORD *)(a1 + 300))
  {
    v14 = ((-1640531535 * *a2) ^ v13) >> (24 - v6);
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    v15 = a1 + 64;
    v16 = *(unsigned int *)(a1 + 44);
    if (v8 - v16 >= 0x181)
    {
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(a1 + 112);
      if (v16 <= 0xFFFFFF9F)
      {
        v71 = v16 + 96;
        do
        {
          v72 = ((-1640531535 * *(_DWORD *)(v7 + 8 + v16)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v6);
          v73 = (v72 >> 4) & 0xFFFFFF0;
          _X23 = v4 + 4 * v73;
          __asm { PRFM            #0, [X23] }
          _X22 = v5 + v73;
          __asm { PRFM            #0, [X22] }
          v78 = *(unsigned int *)(v15 + 4 * (v16 & 7));
          *(_DWORD *)(v15 + 4 * (v16 & 7)) = v72;
          v79 = (v78 >> 4) & 0xFFFFFF0;
          v80 = v4 + 4 * v79;
          v81 = (_BYTE *)(v5 + v79);
          if (((*v81 - 1) & 0xF) != 0)
            v82 = 0;
          else
            v82 = 15;
          v83 = v82 + ((*v81 - 1) & 0xF);
          *v81 = v83;
          v81[v83] = v78;
          *(_DWORD *)(v80 + 4 * v83) = v16++;
        }
        while (v16 < v71);
        v18 = *(_QWORD *)(a1 + 112);
        v17 = *(_QWORD *)(a1 + 56);
      }
      v84 = v8 - 32;
      LODWORD(v16) = v8 - 32;
      v85 = (_DWORD)a2 + 1 - (v7 + v84);
      if ((v85 + 1) < 8)
        v86 = v85 + 1;
      else
        v86 = 8;
      if ((unint64_t)a2 + 1 >= v7 + v84)
        v87 = v86;
      else
        v87 = 0;
      if (v84 < v87 + (int)v84)
      {
        v88 = *(_DWORD *)(a1 + 96);
        v89 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          v90 = ((-1640531535 * *(_DWORD *)(v7 + v84)) ^ v88) >> v89;
          v91 = (v90 >> 4) & 0xFFFFFF0;
          _X25 = v18 + 4 * v91;
          __asm { PRFM            #0, [X25] }
          _X24 = v17 + v91;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v84++ & 7) + 64) = v90;
          --v87;
        }
        while (v87);
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(a1 + 112);
    }
    if (v16 < v8)
    {
      v19 = *(_QWORD *)(a1 + 8) + 8;
      v20 = 24 - *(_DWORD *)(a1 + 52);
      v16 = v16;
      do
      {
        v21 = ((-1640531535 * *(_DWORD *)(v19 + v16)) ^ *(_DWORD *)(a1 + 96)) >> v20;
        v22 = (v21 >> 4) & 0xFFFFFF0;
        _X25 = v18 + 4 * v22;
        __asm { PRFM            #0, [X25] }
        _X24 = v17 + v22;
        __asm { PRFM            #0, [X24] }
        v30 = *(unsigned int *)(v15 + 4 * (v16 & 7));
        *(_DWORD *)(v15 + 4 * (v16 & 7)) = v21;
        v31 = (v30 >> 4) & 0xFFFFFF0;
        v32 = v18 + 4 * v31;
        v33 = (_BYTE *)(v17 + v31);
        if (((*v33 - 1) & 0xF) != 0)
          v34 = 0;
        else
          v34 = 15;
        v35 = v34 + ((*v33 - 1) & 0xF);
        *v33 = v35;
        v33[v35] = v30;
        *(_DWORD *)(v32 + 4 * v35) = v16++;
      }
      while (v16 < ((_DWORD)a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    v36 = ((-1640531535 * *(_DWORD *)(v7 + v8 + 8)) ^ v13) >> (24 - v6);
    v37 = (v36 >> 4) & 0xFFFFFF0;
    _X4 = v4 + 4 * v37;
    __asm { PRFM            #0, [X4] }
    _X15 = v5 + v37;
    __asm { PRFM            #0, [X15] }
    v14 = *(_DWORD *)(v15 + 4 * (v8 & 7));
    *(_DWORD *)(v15 + 4 * (v8 & 7)) = v36;
  }
  *(_DWORD *)(a1 + 104) += v14;
  v42 = (v14 >> 4) & 0xFFFFFF0;
  v43 = v4 + 4 * v42;
  v44 = (int8x16_t *)(v5 + v42);
  v45 = 4 * v44->i8[0];
  v46 = (char)*v44;
  v47 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v44, vdupq_n_s8(v14)), 4uLL), v45) & 0x8888888888888888;
  if (v47)
  {
    v48 = 0;
    v49 = 1 << v12;
    do
    {
      v50 = ((__clz(__rbit64(v47)) + (v45 & 0xFC)) >> 2) & 0xF;
      if (v50)
      {
        v51 = *(unsigned int *)(v43 + 4 * v50);
        if (v51 < v11)
          break;
        _X7 = v7 + v51;
        __asm { PRFM            #0, [X7] }
        v96[v48++] = v51;
        --v49;
      }
      v47 &= v47 - 1;
    }
    while (v47 && v49);
  }
  else
  {
    v48 = 0;
  }
  if (((v46 - 1) & 0xF) != 0)
    v54 = 0;
  else
    v54 = 15;
  v55 = v54 + ((v46 - 1) & 0xF);
  v44->i8[0] = v55;
  v44->i8[v55] = v14;
  v56 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v56 + 1;
  *(_DWORD *)(v43 + 4 * v55) = v56;
  if (v48)
  {
    v57 = 0;
    v58 = (unint64_t)a3 - 7;
    v59 = v8 + 3;
    v60 = a2 + 2;
    v61 = v7 + 8;
    v62 = 3;
    while (1)
    {
      v63 = v96[v57];
      v64 = (_QWORD *)(v7 + v63);
      if (*(_DWORD *)(v7 + v63 + v62 - 3) != *(_DWORD *)((char *)a2 + v62 - 3))
        goto LABEL_51;
      if (v58 <= (unint64_t)a2)
      {
        v67 = a2;
      }
      else
      {
        v65 = *(_QWORD *)a2 ^ *v64;
        if (v65)
        {
          result = __clz(__rbit64(v65)) >> 3;
          goto LABEL_49;
        }
        v68 = 0;
        while (1)
        {
          v67 = &v60[v68];
          if ((unint64_t)&v60[v68] >= v58)
            break;
          v69 = *(_QWORD *)(v61 + v63 + v68 * 4);
          v68 += 2;
          v70 = *v67 ^ v69;
          if (v70)
          {
            result = v68 * 4 + (__clz(__rbit64(v70)) >> 3);
            goto LABEL_49;
          }
        }
        v64 = (_QWORD *)(v61 + v63 + v68 * 4);
      }
      if (v67 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v64 == *(_DWORD *)v67)
      {
        v67 = (_QWORD *)((char *)v67 + 4);
        v64 = (_QWORD *)((char *)v64 + 4);
      }
      if (v67 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v64 == *(unsigned __int16 *)v67)
      {
        v67 = (_QWORD *)((char *)v67 + 2);
        v64 = (_QWORD *)((char *)v64 + 2);
      }
      if (v67 < (_QWORD *)a3 && *(unsigned __int8 *)v64 == *(unsigned __int8 *)v67)
        v67 = (_QWORD *)((char *)v67 + 1);
      result = (char *)v67 - (char *)a2;
LABEL_49:
      if (result > v62)
      {
        *a4 = v59 - v63;
        v62 = result;
        if ((_DWORD *)((char *)a2 + result) == a3)
          return result;
      }
LABEL_51:
      ++v57;
      result = v62;
      if (v57 == v48)
        return result;
    }
  }
  return 3;
}

unint64_t sub_1D4B76B2C(uint64_t a1, _DWORD *a2, _DWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v44;
  uint64_t v45;
  __int16 *v46;
  char v47;
  char v48;
  int8x16_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  unsigned int v62;
  _DWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t result;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  int v93;
  unsigned int v94;
  uint64_t v95;
  _DWORD v101[64];
  uint64_t v102;
  int16x8x2_t v103;

  v102 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_DWORD *)(a1 + 52);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > v9 && *(_DWORD *)(a1 + 40) == 0)
    v11 = (_DWORD)a2 - v7 - v9;
  else
    v11 = *(_DWORD *)(a1 + 28);
  v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 5)
    LOBYTE(v12) = 5;
  v13 = *(_QWORD *)(a1 + 96);
  if (*(_DWORD *)(a1 + 300))
  {
    v14 = ((-1640531535 * *a2) ^ v13) >> (24 - v6);
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    v15 = a1 + 64;
    v16 = *(unsigned int *)(a1 + 44);
    if (v8 - v16 >= 0x181)
    {
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(a1 + 112);
      if (v16 <= 0xFFFFFF9F)
      {
        v74 = v16 + 96;
        do
        {
          v75 = ((-1640531535 * *(_DWORD *)(v7 + 8 + v16)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v6);
          v76 = (v75 >> 3) & 0x1FFFFFE0;
          _X23 = v4 + 4 * v76;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v5 + v76;
          __asm { PRFM            #0, [X22] }
          v82 = *(unsigned int *)(v15 + 4 * (v16 & 7));
          *(_DWORD *)(v15 + 4 * (v16 & 7)) = v75;
          v83 = (v82 >> 3) & 0x1FFFFFE0;
          v84 = v4 + 4 * v83;
          v85 = (_BYTE *)(v5 + v83);
          if (((*v85 - 1) & 0x1F) != 0)
            v86 = 0;
          else
            v86 = 31;
          v87 = v86 + ((*v85 - 1) & 0x1F);
          *v85 = v87;
          v85[v87] = v82;
          *(_DWORD *)(v84 + 4 * v87) = v16++;
        }
        while (v16 < v74);
        v18 = *(_QWORD *)(a1 + 112);
        v17 = *(_QWORD *)(a1 + 56);
      }
      v88 = v8 - 32;
      LODWORD(v16) = v8 - 32;
      v89 = (_DWORD)a2 + 1 - (v7 + v88);
      if ((v89 + 1) < 8)
        v90 = v89 + 1;
      else
        v90 = 8;
      if ((unint64_t)a2 + 1 >= v7 + v88)
        v91 = v90;
      else
        v91 = 0;
      if (v88 < v91 + (int)v88)
      {
        v92 = *(_DWORD *)(a1 + 96);
        v93 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          v94 = ((-1640531535 * *(_DWORD *)(v7 + v88)) ^ v92) >> v93;
          v95 = (v94 >> 3) & 0x1FFFFFE0;
          _X25 = v18 + 4 * v95;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v17 + v95;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v88++ & 7) + 64) = v94;
          --v91;
        }
        while (v91);
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(a1 + 112);
    }
    if (v16 < v8)
    {
      v19 = *(_QWORD *)(a1 + 8) + 8;
      v20 = 24 - *(_DWORD *)(a1 + 52);
      v16 = v16;
      do
      {
        v21 = ((-1640531535 * *(_DWORD *)(v19 + v16)) ^ *(_DWORD *)(a1 + 96)) >> v20;
        v22 = (v21 >> 3) & 0x1FFFFFE0;
        _X25 = v18 + 4 * v22;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v17 + v22;
        __asm { PRFM            #0, [X24] }
        v31 = *(unsigned int *)(v15 + 4 * (v16 & 7));
        *(_DWORD *)(v15 + 4 * (v16 & 7)) = v21;
        v32 = (v31 >> 3) & 0x1FFFFFE0;
        v33 = v18 + 4 * v32;
        v34 = (_BYTE *)(v17 + v32);
        if (((*v34 - 1) & 0x1F) != 0)
          v35 = 0;
        else
          v35 = 31;
        v36 = v35 + ((*v34 - 1) & 0x1F);
        *v34 = v36;
        v34[v36] = v31;
        *(_DWORD *)(v33 + 4 * v36) = v16++;
      }
      while (v16 < ((_DWORD)a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    v37 = ((-1640531535 * *(_DWORD *)(v7 + v8 + 8)) ^ v13) >> (24 - v6);
    v38 = (v37 >> 3) & 0x1FFFFFE0;
    _X4 = v4 + 4 * v38;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X15 = v5 + v38;
    __asm { PRFM            #0, [X15] }
    v14 = *(_DWORD *)(v15 + 4 * (v8 & 7));
    *(_DWORD *)(v15 + 4 * (v8 & 7)) = v37;
  }
  *(_DWORD *)(a1 + 104) += v14;
  v44 = (v14 >> 3) & 0x1FFFFFE0;
  v45 = v4 + 4 * v44;
  v46 = (__int16 *)(v5 + v44);
  v103 = vld2q_s16(v46);
  v47 = *(_BYTE *)v46;
  v48 = 2 * *(_BYTE *)v46;
  v49 = vdupq_n_s8(v14);
  v50 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v49, (int8x16_t)v103.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v49, (int8x16_t)v103.val[1]), 6uLL), 4uLL), v48) & 0x5555555555555555;
  if (v50)
  {
    v51 = 0;
    v52 = 1 << v12;
    do
    {
      v53 = ((__clz(__rbit64(v50)) + (v48 & 0xFE)) >> 1) & 0x1F;
      if (v53)
      {
        v54 = *(unsigned int *)(v45 + 4 * v53);
        if (v54 < v11)
          break;
        _X7 = v7 + v54;
        __asm { PRFM            #0, [X7] }
        v101[v51++] = v54;
        --v52;
      }
      v50 &= v50 - 1;
    }
    while (v50 && v52);
  }
  else
  {
    v51 = 0;
  }
  if (((v47 - 1) & 0x1F) != 0)
    v57 = 0;
  else
    v57 = 31;
  v58 = v57 + ((v47 - 1) & 0x1F);
  *(_BYTE *)v46 = v58;
  *((_BYTE *)v46 + v58) = v14;
  v59 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v59 + 1;
  *(_DWORD *)(v45 + 4 * v58) = v59;
  if (v51)
  {
    v60 = 0;
    v61 = (unint64_t)a3 - 7;
    v62 = v8 + 3;
    v63 = a2 + 2;
    v64 = v7 + 8;
    v65 = 3;
    while (1)
    {
      v66 = v101[v60];
      v67 = (_QWORD *)(v7 + v66);
      if (*(_DWORD *)(v7 + v66 + v65 - 3) != *(_DWORD *)((char *)a2 + v65 - 3))
        goto LABEL_51;
      if (v61 <= (unint64_t)a2)
      {
        v70 = a2;
      }
      else
      {
        v68 = *(_QWORD *)a2 ^ *v67;
        if (v68)
        {
          result = __clz(__rbit64(v68)) >> 3;
          goto LABEL_49;
        }
        v71 = 0;
        while (1)
        {
          v70 = &v63[v71];
          if ((unint64_t)&v63[v71] >= v61)
            break;
          v72 = *(_QWORD *)(v64 + v66 + v71 * 4);
          v71 += 2;
          v73 = *v70 ^ v72;
          if (v73)
          {
            result = v71 * 4 + (__clz(__rbit64(v73)) >> 3);
            goto LABEL_49;
          }
        }
        v67 = (_QWORD *)(v64 + v66 + v71 * 4);
      }
      if (v70 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v67 == *(_DWORD *)v70)
      {
        v70 = (_QWORD *)((char *)v70 + 4);
        v67 = (_QWORD *)((char *)v67 + 4);
      }
      if (v70 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v67 == *(unsigned __int16 *)v70)
      {
        v70 = (_QWORD *)((char *)v70 + 2);
        v67 = (_QWORD *)((char *)v67 + 2);
      }
      if (v70 < (_QWORD *)a3 && *(unsigned __int8 *)v67 == *(unsigned __int8 *)v70)
        v70 = (_QWORD *)((char *)v70 + 1);
      result = (char *)v70 - (char *)a2;
LABEL_49:
      if (result > v65)
      {
        *a4 = v62 - v66;
        v65 = result;
        if ((_DWORD *)((char *)a2 + result) == a3)
          return result;
      }
LABEL_51:
      ++v60;
      result = v65;
      if (v60 == v51)
        return result;
    }
  }
  return 3;
}

unint64_t sub_1D4B77088(uint64_t a1, _DWORD *a2, _DWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char v49;
  int8x16_t v50;
  int8x8_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int v64;
  _DWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t result;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  _DWORD v105[64];
  uint64_t v106;
  int8x16x4_t v107;

  v106 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_DWORD *)(a1 + 52);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > v9 && *(_DWORD *)(a1 + 40) == 0)
    v11 = (_DWORD)a2 - v7 - v9;
  else
    v11 = *(_DWORD *)(a1 + 28);
  v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 6)
    LOBYTE(v12) = 6;
  v13 = *(_QWORD *)(a1 + 96);
  if (*(_DWORD *)(a1 + 300))
  {
    v14 = ((-1640531535 * *a2) ^ v13) >> (24 - v6);
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    v15 = a1 + 64;
    v16 = *(unsigned int *)(a1 + 44);
    if (v8 - v16 >= 0x181)
    {
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(a1 + 112);
      if (v16 <= 0xFFFFFF9F)
      {
        v76 = v16 + 96;
        do
        {
          v77 = ((-1640531535 * *(_DWORD *)(v7 + 8 + v16)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v6);
          v78 = (v77 >> 2) & 0x3FFFFFC0;
          _X23 = v4 + 4 * v78;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v5 + v78;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x20]
          }
          v85 = *(unsigned int *)(v15 + 4 * (v16 & 7));
          *(_DWORD *)(v15 + 4 * (v16 & 7)) = v77;
          v86 = (v85 >> 2) & 0x3FFFFFC0;
          v87 = v4 + 4 * v86;
          v88 = (_BYTE *)(v5 + v86);
          if (((*v88 - 1) & 0x3F) != 0)
            v89 = 0;
          else
            v89 = 63;
          v90 = v89 + ((*v88 - 1) & 0x3F);
          *v88 = v90;
          v88[v90] = v85;
          *(_DWORD *)(v87 + 4 * v90) = v16++;
        }
        while (v16 < v76);
        v18 = *(_QWORD *)(a1 + 112);
        v17 = *(_QWORD *)(a1 + 56);
      }
      v91 = v8 - 32;
      LODWORD(v16) = v8 - 32;
      v92 = (_DWORD)a2 + 1 - (v7 + v91);
      if ((v92 + 1) < 8)
        v93 = v92 + 1;
      else
        v93 = 8;
      if ((unint64_t)a2 + 1 >= v7 + v91)
        v94 = v93;
      else
        v94 = 0;
      if (v91 < v94 + (int)v91)
      {
        v95 = *(_DWORD *)(a1 + 96);
        v96 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          v97 = ((-1640531535 * *(_DWORD *)(v7 + v91)) ^ v95) >> v96;
          v98 = (v97 >> 2) & 0x3FFFFFC0;
          _X25 = v18 + 4 * v98;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v17 + v98;
          __asm
          {
            PRFM            #0, [X24]
            PRFM            #0, [X24,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v91++ & 7) + 64) = v97;
          --v94;
        }
        while (v94);
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(a1 + 112);
    }
    if (v16 < v8)
    {
      v19 = *(_QWORD *)(a1 + 8) + 8;
      v20 = 24 - *(_DWORD *)(a1 + 52);
      v16 = v16;
      do
      {
        v21 = ((-1640531535 * *(_DWORD *)(v19 + v16)) ^ *(_DWORD *)(a1 + 96)) >> v20;
        v22 = (v21 >> 2) & 0x3FFFFFC0;
        _X25 = v18 + 4 * v22;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v17 + v22;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x20]
        }
        v32 = *(unsigned int *)(v15 + 4 * (v16 & 7));
        *(_DWORD *)(v15 + 4 * (v16 & 7)) = v21;
        v33 = (v32 >> 2) & 0x3FFFFFC0;
        v34 = v18 + 4 * v33;
        v35 = (_BYTE *)(v17 + v33);
        if (((*v35 - 1) & 0x3F) != 0)
          v36 = 0;
        else
          v36 = 63;
        v37 = v36 + ((*v35 - 1) & 0x3F);
        *v35 = v37;
        v35[v37] = v32;
        *(_DWORD *)(v34 + 4 * v37) = v16++;
      }
      while (v16 < ((_DWORD)a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    v38 = ((-1640531535 * *(_DWORD *)(v7 + v8 + 8)) ^ v13) >> (24 - v6);
    v39 = (v38 >> 2) & 0x3FFFFFC0;
    _X4 = v4 + 4 * v39;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X15 = v5 + v39;
    __asm
    {
      PRFM            #0, [X15]
      PRFM            #0, [X15,#0x20]
    }
    v14 = *(_DWORD *)(v15 + 4 * (v8 & 7));
    *(_DWORD *)(v15 + 4 * (v8 & 7)) = v38;
  }
  *(_DWORD *)(a1 + 104) += v14;
  v46 = (v14 >> 2) & 0x3FFFFFC0;
  v47 = v4 + 4 * v46;
  v48 = (char *)(v5 + v46);
  v49 = *v48;
  v107 = vld4q_s8(v48);
  v50 = vdupq_n_s8(v14);
  v107.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v107.val[3], v50), vceqq_s8(v107.val[2], v50), 1uLL), vsriq_n_s8(vceqq_s8(v107.val[1], v50), vceqq_s8(v107.val[0], v50), 1uLL), 2uLL);
  v51 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v107.val[0], v107.val[0], 4uLL), 4uLL);
  v52 = 0;
  if (v51)
  {
    v53 = 1 << v12;
    v54 = __ROR8__(*(_QWORD *)&v51, v49);
    do
    {
      v55 = (__clz(__rbit64(v54)) + v49) & 0x3F;
      if (v55)
      {
        v56 = *(unsigned int *)(v47 + 4 * v55);
        if (v56 < v11)
          break;
        _X6 = v7 + v56;
        __asm { PRFM            #0, [X6] }
        v105[v52++] = v56;
        --v53;
      }
      v54 &= v54 - 1;
    }
    while (v54 && v53);
  }
  if (((v49 - 1) & 0x3F) != 0)
    v59 = 0;
  else
    v59 = 63;
  v60 = v59 + ((v49 - 1) & 0x3F);
  *v48 = v60;
  v48[v60] = v14;
  v61 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v61 + 1;
  *(_DWORD *)(v47 + 4 * v60) = v61;
  if (v52)
  {
    v62 = 0;
    v63 = (unint64_t)a3 - 7;
    v64 = v8 + 3;
    v65 = a2 + 2;
    v66 = v7 + 8;
    v67 = 3;
    while (1)
    {
      v68 = v105[v62];
      v69 = (_QWORD *)(v7 + v68);
      if (*(_DWORD *)(v7 + v68 + v67 - 3) != *(_DWORD *)((char *)a2 + v67 - 3))
        goto LABEL_49;
      if (v63 <= (unint64_t)a2)
      {
        v72 = a2;
      }
      else
      {
        v70 = *(_QWORD *)a2 ^ *v69;
        if (v70)
        {
          result = __clz(__rbit64(v70)) >> 3;
          goto LABEL_47;
        }
        v73 = 0;
        while (1)
        {
          v72 = &v65[v73];
          if ((unint64_t)&v65[v73] >= v63)
            break;
          v74 = *(_QWORD *)(v66 + v68 + v73 * 4);
          v73 += 2;
          v75 = *v72 ^ v74;
          if (v75)
          {
            result = v73 * 4 + (__clz(__rbit64(v75)) >> 3);
            goto LABEL_47;
          }
        }
        v69 = (_QWORD *)(v66 + v68 + v73 * 4);
      }
      if (v72 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v69 == *(_DWORD *)v72)
      {
        v72 = (_QWORD *)((char *)v72 + 4);
        v69 = (_QWORD *)((char *)v69 + 4);
      }
      if (v72 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v69 == *(unsigned __int16 *)v72)
      {
        v72 = (_QWORD *)((char *)v72 + 2);
        v69 = (_QWORD *)((char *)v69 + 2);
      }
      if (v72 < (_QWORD *)a3 && *(unsigned __int8 *)v69 == *(unsigned __int8 *)v72)
        v72 = (_QWORD *)((char *)v72 + 1);
      result = (char *)v72 - (char *)a2;
LABEL_47:
      if (result > v67)
      {
        *a4 = v64 - v68;
        v67 = result;
        if ((_DWORD *)((char *)a2 + result) == a3)
          return result;
      }
LABEL_49:
      ++v62;
      result = v67;
      if (v62 == v52)
        return result;
    }
  }
  return 3;
}

unint64_t sub_1D4B775F0(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v41;
  uint64_t v42;
  int8x16_t *v43;
  char v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t result;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  _DWORD v95[64];
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_DWORD *)(a1 + 52);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > v9 && *(_DWORD *)(a1 + 40) == 0)
    v11 = (_DWORD)a2 - v7 - v9;
  else
    v11 = *(_DWORD *)(a1 + 28);
  v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 4)
    LOBYTE(v12) = 4;
  v13 = *(_QWORD *)(a1 + 96);
  if (*(_DWORD *)(a1 + 300))
  {
    _X15 = ((0xCF1BBCDCBB000000 * *a2) ^ v13) >> (56 - v6);
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    v15 = a1 + 64;
    v16 = *(unsigned int *)(a1 + 44);
    if (v8 - v16 >= 0x181)
    {
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(a1 + 112);
      if (v16 <= 0xFFFFFF9F)
      {
        v70 = v16 + 96;
        do
        {
          v71 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v7 + 8 + v16)) ^ *(_QWORD *)(a1 + 96)) >> (56 - v6);
          v72 = (v71 >> 4) & 0xFFFFFF0;
          _X23 = v4 + 4 * v72;
          __asm { PRFM            #0, [X23] }
          _X22 = v5 + v72;
          __asm { PRFM            #0, [X22] }
          v77 = *(unsigned int *)(v15 + 4 * (v16 & 7));
          *(_DWORD *)(v15 + 4 * (v16 & 7)) = v71;
          v78 = (v77 >> 4) & 0xFFFFFF0;
          v79 = v4 + 4 * v78;
          v80 = (_BYTE *)(v5 + v78);
          if (((*v80 - 1) & 0xF) != 0)
            v81 = 0;
          else
            v81 = 15;
          v82 = v81 + ((*v80 - 1) & 0xF);
          *v80 = v82;
          v80[v82] = v77;
          *(_DWORD *)(v79 + 4 * v82) = v16++;
        }
        while (v16 < v70);
        v18 = *(_QWORD *)(a1 + 112);
        v17 = *(_QWORD *)(a1 + 56);
      }
      v83 = v8 - 32;
      LODWORD(v16) = v8 - 32;
      v84 = (_DWORD)a2 + 1 - (v7 + v83);
      if ((v84 + 1) < 8)
        v85 = v84 + 1;
      else
        v85 = 8;
      if ((unint64_t)a2 + 1 >= v7 + v83)
        v86 = v85;
      else
        v86 = 0;
      if (v83 < v86 + (int)v83)
      {
        v87 = *(_QWORD *)(a1 + 96);
        v88 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v89 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v7 + v83)) ^ v87) >> v88;
          v90 = (v89 >> 4) & 0xFFFFFF0;
          _X25 = v18 + 4 * v90;
          __asm { PRFM            #0, [X25] }
          _X24 = v17 + v90;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v83++ & 7) + 64) = v89;
          --v86;
        }
        while (v86);
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(a1 + 112);
    }
    if (v16 < v8)
    {
      v19 = *(_QWORD *)(a1 + 8) + 8;
      v20 = 56 - *(_DWORD *)(a1 + 52);
      v16 = v16;
      do
      {
        v21 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v19 + v16)) ^ *(_QWORD *)(a1 + 96)) >> v20;
        v22 = (v21 >> 4) & 0xFFFFFF0;
        _X25 = v18 + 4 * v22;
        __asm { PRFM            #0, [X25] }
        _X24 = v17 + v22;
        __asm { PRFM            #0, [X24] }
        v30 = *(unsigned int *)(v15 + 4 * (v16 & 7));
        *(_DWORD *)(v15 + 4 * (v16 & 7)) = v21;
        v31 = (v30 >> 4) & 0xFFFFFF0;
        v32 = v18 + 4 * v31;
        v33 = (_BYTE *)(v17 + v31);
        if (((*v33 - 1) & 0xF) != 0)
          v34 = 0;
        else
          v34 = 15;
        v35 = v34 + ((*v33 - 1) & 0xF);
        *v33 = v35;
        v33[v35] = v30;
        *(_DWORD *)(v32 + 4 * v35) = v16++;
      }
      while (v16 < ((_DWORD)a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    v36 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v7 + v8 + 8)) ^ v13) >> (56 - v6);
    v37 = (v36 >> 4) & 0xFFFFFF0;
    _X4 = v4 + 4 * v37;
    __asm { PRFM            #0, [X4] }
    _X15 = v5 + v37;
    __asm { PRFM            #0, [X15] }
    LODWORD(_X15) = *(_DWORD *)(v15 + 4 * (v8 & 7));
    *(_DWORD *)(v15 + 4 * (v8 & 7)) = v36;
  }
  *(_DWORD *)(a1 + 104) += _X15;
  v41 = (_X15 >> 4) & 0xFFFFFF0;
  v42 = v4 + 4 * v41;
  v43 = (int8x16_t *)(v5 + v41);
  v44 = 4 * v43->i8[0];
  v45 = (char)*v43;
  v46 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v43, vdupq_n_s8(_X15)), 4uLL), v44) & 0x8888888888888888;
  if (v46)
  {
    v47 = 0;
    v48 = 1 << v12;
    do
    {
      v49 = ((__clz(__rbit64(v46)) + (v44 & 0xFC)) >> 2) & 0xF;
      if (v49)
      {
        v50 = *(unsigned int *)(v42 + 4 * v49);
        if (v50 < v11)
          break;
        _X7 = v7 + v50;
        __asm { PRFM            #0, [X7] }
        v95[v47++] = v50;
        --v48;
      }
      v46 &= v46 - 1;
    }
    while (v46 && v48);
  }
  else
  {
    v47 = 0;
  }
  if (((v45 - 1) & 0xF) != 0)
    v53 = 0;
  else
    v53 = 15;
  v54 = v53 + ((v45 - 1) & 0xF);
  v43->i8[0] = v54;
  v43->i8[v54] = _X15;
  v55 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v55 + 1;
  *(_DWORD *)(v42 + 4 * v54) = v55;
  if (v47)
  {
    v56 = 0;
    v57 = (unint64_t)a3 - 7;
    v58 = v8 + 3;
    v59 = a2 + 1;
    v60 = v7 + 8;
    v61 = 3;
    while (1)
    {
      v62 = v95[v56];
      v63 = (_QWORD *)(v7 + v62);
      if (*(_DWORD *)(v7 + v62 + v61 - 3) != *(_DWORD *)((char *)a2 + v61 - 3))
        goto LABEL_51;
      if (v57 <= (unint64_t)a2)
      {
        v66 = a2;
      }
      else
      {
        v64 = *a2 ^ *v63;
        if (v64)
        {
          result = __clz(__rbit64(v64)) >> 3;
          goto LABEL_49;
        }
        v67 = 0;
        while (1)
        {
          v66 = &v59[v67];
          if ((unint64_t)&v59[v67] >= v57)
            break;
          v68 = *(_QWORD *)(v60 + v62 + v67 * 8);
          ++v67;
          v69 = *v66 ^ v68;
          if (v69)
          {
            result = v67 * 8 + (__clz(__rbit64(v69)) >> 3);
            goto LABEL_49;
          }
        }
        v63 = (_QWORD *)(v60 + v62 + v67 * 8);
      }
      if (v66 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v63 == *(_DWORD *)v66)
      {
        v66 = (_QWORD *)((char *)v66 + 4);
        v63 = (_QWORD *)((char *)v63 + 4);
      }
      if (v66 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v63 == *(unsigned __int16 *)v66)
      {
        v66 = (_QWORD *)((char *)v66 + 2);
        v63 = (_QWORD *)((char *)v63 + 2);
      }
      if (v66 < a3 && *(unsigned __int8 *)v63 == *(unsigned __int8 *)v66)
        v66 = (_QWORD *)((char *)v66 + 1);
      result = (char *)v66 - (char *)a2;
LABEL_49:
      if (result > v61)
      {
        *a4 = v58 - v62;
        v61 = result;
        if ((_QWORD *)((char *)a2 + result) == a3)
          return result;
      }
LABEL_51:
      ++v56;
      result = v61;
      if (v56 == v47)
        return result;
    }
  }
  return 3;
}

unint64_t sub_1D4B77B3C(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v43;
  uint64_t v44;
  __int16 *v45;
  char v46;
  char v47;
  int8x16_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t result;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  _DWORD v100[64];
  uint64_t v101;
  int16x8x2_t v102;

  v101 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_DWORD *)(a1 + 52);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > v9 && *(_DWORD *)(a1 + 40) == 0)
    v11 = (_DWORD)a2 - v7 - v9;
  else
    v11 = *(_DWORD *)(a1 + 28);
  v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 5)
    LOBYTE(v12) = 5;
  v13 = *(_QWORD *)(a1 + 96);
  if (*(_DWORD *)(a1 + 300))
  {
    _X15 = ((0xCF1BBCDCBB000000 * *a2) ^ v13) >> (56 - v6);
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    v15 = a1 + 64;
    v16 = *(unsigned int *)(a1 + 44);
    if (v8 - v16 >= 0x181)
    {
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(a1 + 112);
      if (v16 <= 0xFFFFFF9F)
      {
        v73 = v16 + 96;
        do
        {
          v74 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v7 + 8 + v16)) ^ *(_QWORD *)(a1 + 96)) >> (56 - v6);
          v75 = (v74 >> 3) & 0x1FFFFFE0;
          _X23 = v4 + 4 * v75;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v5 + v75;
          __asm { PRFM            #0, [X22] }
          v81 = *(unsigned int *)(v15 + 4 * (v16 & 7));
          *(_DWORD *)(v15 + 4 * (v16 & 7)) = v74;
          v82 = (v81 >> 3) & 0x1FFFFFE0;
          v83 = v4 + 4 * v82;
          v84 = (_BYTE *)(v5 + v82);
          if (((*v84 - 1) & 0x1F) != 0)
            v85 = 0;
          else
            v85 = 31;
          v86 = v85 + ((*v84 - 1) & 0x1F);
          *v84 = v86;
          v84[v86] = v81;
          *(_DWORD *)(v83 + 4 * v86) = v16++;
        }
        while (v16 < v73);
        v18 = *(_QWORD *)(a1 + 112);
        v17 = *(_QWORD *)(a1 + 56);
      }
      v87 = v8 - 32;
      LODWORD(v16) = v8 - 32;
      v88 = (_DWORD)a2 + 1 - (v7 + v87);
      if ((v88 + 1) < 8)
        v89 = v88 + 1;
      else
        v89 = 8;
      if ((unint64_t)a2 + 1 >= v7 + v87)
        v90 = v89;
      else
        v90 = 0;
      if (v87 < v90 + (int)v87)
      {
        v91 = *(_QWORD *)(a1 + 96);
        v92 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v93 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v7 + v87)) ^ v91) >> v92;
          v94 = (v93 >> 3) & 0x1FFFFFE0;
          _X25 = v18 + 4 * v94;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v17 + v94;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v87++ & 7) + 64) = v93;
          --v90;
        }
        while (v90);
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(a1 + 112);
    }
    if (v16 < v8)
    {
      v19 = *(_QWORD *)(a1 + 8) + 8;
      v20 = 56 - *(_DWORD *)(a1 + 52);
      v16 = v16;
      do
      {
        v21 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v19 + v16)) ^ *(_QWORD *)(a1 + 96)) >> v20;
        v22 = (v21 >> 3) & 0x1FFFFFE0;
        _X25 = v18 + 4 * v22;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v17 + v22;
        __asm { PRFM            #0, [X24] }
        v31 = *(unsigned int *)(v15 + 4 * (v16 & 7));
        *(_DWORD *)(v15 + 4 * (v16 & 7)) = v21;
        v32 = (v31 >> 3) & 0x1FFFFFE0;
        v33 = v18 + 4 * v32;
        v34 = (_BYTE *)(v17 + v32);
        if (((*v34 - 1) & 0x1F) != 0)
          v35 = 0;
        else
          v35 = 31;
        v36 = v35 + ((*v34 - 1) & 0x1F);
        *v34 = v36;
        v34[v36] = v31;
        *(_DWORD *)(v33 + 4 * v36) = v16++;
      }
      while (v16 < ((_DWORD)a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    v37 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v7 + v8 + 8)) ^ v13) >> (56 - v6);
    v38 = (v37 >> 3) & 0x1FFFFFE0;
    _X4 = v4 + 4 * v38;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X15 = v5 + v38;
    __asm { PRFM            #0, [X15] }
    LODWORD(_X15) = *(_DWORD *)(v15 + 4 * (v8 & 7));
    *(_DWORD *)(v15 + 4 * (v8 & 7)) = v37;
  }
  *(_DWORD *)(a1 + 104) += _X15;
  v43 = (_X15 >> 3) & 0x1FFFFFE0;
  v44 = v4 + 4 * v43;
  v45 = (__int16 *)(v5 + v43);
  v102 = vld2q_s16(v45);
  v46 = *(_BYTE *)v45;
  v47 = 2 * *(_BYTE *)v45;
  v48 = vdupq_n_s8(_X15);
  v49 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v48, (int8x16_t)v102.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v48, (int8x16_t)v102.val[1]), 6uLL), 4uLL), v47) & 0x5555555555555555;
  if (v49)
  {
    v50 = 0;
    v51 = 1 << v12;
    do
    {
      v52 = ((__clz(__rbit64(v49)) + (v47 & 0xFE)) >> 1) & 0x1F;
      if (v52)
      {
        v53 = *(unsigned int *)(v44 + 4 * v52);
        if (v53 < v11)
          break;
        _X7 = v7 + v53;
        __asm { PRFM            #0, [X7] }
        v100[v50++] = v53;
        --v51;
      }
      v49 &= v49 - 1;
    }
    while (v49 && v51);
  }
  else
  {
    v50 = 0;
  }
  if (((v46 - 1) & 0x1F) != 0)
    v56 = 0;
  else
    v56 = 31;
  v57 = v56 + ((v46 - 1) & 0x1F);
  *(_BYTE *)v45 = v57;
  *((_BYTE *)v45 + v57) = _X15;
  v58 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v58 + 1;
  *(_DWORD *)(v44 + 4 * v57) = v58;
  if (v50)
  {
    v59 = 0;
    v60 = (unint64_t)a3 - 7;
    v61 = v8 + 3;
    v62 = a2 + 1;
    v63 = v7 + 8;
    v64 = 3;
    while (1)
    {
      v65 = v100[v59];
      v66 = (_QWORD *)(v7 + v65);
      if (*(_DWORD *)(v7 + v65 + v64 - 3) != *(_DWORD *)((char *)a2 + v64 - 3))
        goto LABEL_51;
      if (v60 <= (unint64_t)a2)
      {
        v69 = a2;
      }
      else
      {
        v67 = *a2 ^ *v66;
        if (v67)
        {
          result = __clz(__rbit64(v67)) >> 3;
          goto LABEL_49;
        }
        v70 = 0;
        while (1)
        {
          v69 = &v62[v70];
          if ((unint64_t)&v62[v70] >= v60)
            break;
          v71 = *(_QWORD *)(v63 + v65 + v70 * 8);
          ++v70;
          v72 = *v69 ^ v71;
          if (v72)
          {
            result = v70 * 8 + (__clz(__rbit64(v72)) >> 3);
            goto LABEL_49;
          }
        }
        v66 = (_QWORD *)(v63 + v65 + v70 * 8);
      }
      if (v69 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v66 == *(_DWORD *)v69)
      {
        v69 = (_QWORD *)((char *)v69 + 4);
        v66 = (_QWORD *)((char *)v66 + 4);
      }
      if (v69 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v66 == *(unsigned __int16 *)v69)
      {
        v69 = (_QWORD *)((char *)v69 + 2);
        v66 = (_QWORD *)((char *)v66 + 2);
      }
      if (v69 < a3 && *(unsigned __int8 *)v66 == *(unsigned __int8 *)v69)
        v69 = (_QWORD *)((char *)v69 + 1);
      result = (char *)v69 - (char *)a2;
LABEL_49:
      if (result > v64)
      {
        *a4 = v61 - v65;
        v64 = result;
        if ((_QWORD *)((char *)a2 + result) == a3)
          return result;
      }
LABEL_51:
      ++v59;
      result = v64;
      if (v59 == v50)
        return result;
    }
  }
  return 3;
}

unint64_t sub_1D4B780A0(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char v48;
  int8x16_t v49;
  int8x8_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t result;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  _DWORD v104[64];
  uint64_t v105;
  int8x16x4_t v106;

  v105 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_DWORD *)(a1 + 52);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > v9 && *(_DWORD *)(a1 + 40) == 0)
    v11 = (_DWORD)a2 - v7 - v9;
  else
    v11 = *(_DWORD *)(a1 + 28);
  v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 6)
    LOBYTE(v12) = 6;
  v13 = *(_QWORD *)(a1 + 96);
  if (*(_DWORD *)(a1 + 300))
  {
    _X15 = ((0xCF1BBCDCBB000000 * *a2) ^ v13) >> (56 - v6);
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    v15 = a1 + 64;
    v16 = *(unsigned int *)(a1 + 44);
    if (v8 - v16 >= 0x181)
    {
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(a1 + 112);
      if (v16 <= 0xFFFFFF9F)
      {
        v75 = v16 + 96;
        do
        {
          v76 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v7 + 8 + v16)) ^ *(_QWORD *)(a1 + 96)) >> (56 - v6);
          v77 = (v76 >> 2) & 0x3FFFFFC0;
          _X23 = v4 + 4 * v77;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v5 + v77;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x20]
          }
          v84 = *(unsigned int *)(v15 + 4 * (v16 & 7));
          *(_DWORD *)(v15 + 4 * (v16 & 7)) = v76;
          v85 = (v84 >> 2) & 0x3FFFFFC0;
          v86 = v4 + 4 * v85;
          v87 = (_BYTE *)(v5 + v85);
          if (((*v87 - 1) & 0x3F) != 0)
            v88 = 0;
          else
            v88 = 63;
          v89 = v88 + ((*v87 - 1) & 0x3F);
          *v87 = v89;
          v87[v89] = v84;
          *(_DWORD *)(v86 + 4 * v89) = v16++;
        }
        while (v16 < v75);
        v18 = *(_QWORD *)(a1 + 112);
        v17 = *(_QWORD *)(a1 + 56);
      }
      v90 = v8 - 32;
      LODWORD(v16) = v8 - 32;
      v91 = (_DWORD)a2 + 1 - (v7 + v90);
      if ((v91 + 1) < 8)
        v92 = v91 + 1;
      else
        v92 = 8;
      if ((unint64_t)a2 + 1 >= v7 + v90)
        v93 = v92;
      else
        v93 = 0;
      if (v90 < v93 + (int)v90)
      {
        v94 = *(_QWORD *)(a1 + 96);
        v95 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v96 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v7 + v90)) ^ v94) >> v95;
          v97 = (v96 >> 2) & 0x3FFFFFC0;
          _X25 = v18 + 4 * v97;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v17 + v97;
          __asm
          {
            PRFM            #0, [X24]
            PRFM            #0, [X24,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v90++ & 7) + 64) = v96;
          --v93;
        }
        while (v93);
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(a1 + 112);
    }
    if (v16 < v8)
    {
      v19 = *(_QWORD *)(a1 + 8) + 8;
      v20 = 56 - *(_DWORD *)(a1 + 52);
      v16 = v16;
      do
      {
        v21 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v19 + v16)) ^ *(_QWORD *)(a1 + 96)) >> v20;
        v22 = (v21 >> 2) & 0x3FFFFFC0;
        _X25 = v18 + 4 * v22;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v17 + v22;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x20]
        }
        v32 = *(unsigned int *)(v15 + 4 * (v16 & 7));
        *(_DWORD *)(v15 + 4 * (v16 & 7)) = v21;
        v33 = (v32 >> 2) & 0x3FFFFFC0;
        v34 = v18 + 4 * v33;
        v35 = (_BYTE *)(v17 + v33);
        if (((*v35 - 1) & 0x3F) != 0)
          v36 = 0;
        else
          v36 = 63;
        v37 = v36 + ((*v35 - 1) & 0x3F);
        *v35 = v37;
        v35[v37] = v32;
        *(_DWORD *)(v34 + 4 * v37) = v16++;
      }
      while (v16 < ((_DWORD)a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    v38 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v7 + v8 + 8)) ^ v13) >> (56 - v6);
    v39 = (v38 >> 2) & 0x3FFFFFC0;
    _X4 = v4 + 4 * v39;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X15 = v5 + v39;
    __asm
    {
      PRFM            #0, [X15]
      PRFM            #0, [X15,#0x20]
    }
    LODWORD(_X15) = *(_DWORD *)(v15 + 4 * (v8 & 7));
    *(_DWORD *)(v15 + 4 * (v8 & 7)) = v38;
  }
  *(_DWORD *)(a1 + 104) += _X15;
  v45 = (_X15 >> 2) & 0x3FFFFFC0;
  v46 = v4 + 4 * v45;
  v47 = (char *)(v5 + v45);
  v48 = *v47;
  v106 = vld4q_s8(v47);
  v49 = vdupq_n_s8(_X15);
  v106.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v106.val[3], v49), vceqq_s8(v106.val[2], v49), 1uLL), vsriq_n_s8(vceqq_s8(v106.val[1], v49), vceqq_s8(v106.val[0], v49), 1uLL), 2uLL);
  v50 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v106.val[0], v106.val[0], 4uLL), 4uLL);
  v51 = 0;
  if (v50)
  {
    v52 = 1 << v12;
    v53 = __ROR8__(*(_QWORD *)&v50, v48);
    do
    {
      v54 = (__clz(__rbit64(v53)) + v48) & 0x3F;
      if (v54)
      {
        v55 = *(unsigned int *)(v46 + 4 * v54);
        if (v55 < v11)
          break;
        _X6 = v7 + v55;
        __asm { PRFM            #0, [X6] }
        v104[v51++] = v55;
        --v52;
      }
      v53 &= v53 - 1;
    }
    while (v53 && v52);
  }
  if (((v48 - 1) & 0x3F) != 0)
    v58 = 0;
  else
    v58 = 63;
  v59 = v58 + ((v48 - 1) & 0x3F);
  *v47 = v59;
  v47[v59] = _X15;
  v60 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v60 + 1;
  *(_DWORD *)(v46 + 4 * v59) = v60;
  if (v51)
  {
    v61 = 0;
    v62 = (unint64_t)a3 - 7;
    v63 = v8 + 3;
    v64 = a2 + 1;
    v65 = v7 + 8;
    v66 = 3;
    while (1)
    {
      v67 = v104[v61];
      v68 = (_QWORD *)(v7 + v67);
      if (*(_DWORD *)(v7 + v67 + v66 - 3) != *(_DWORD *)((char *)a2 + v66 - 3))
        goto LABEL_49;
      if (v62 <= (unint64_t)a2)
      {
        v71 = a2;
      }
      else
      {
        v69 = *a2 ^ *v68;
        if (v69)
        {
          result = __clz(__rbit64(v69)) >> 3;
          goto LABEL_47;
        }
        v72 = 0;
        while (1)
        {
          v71 = &v64[v72];
          if ((unint64_t)&v64[v72] >= v62)
            break;
          v73 = *(_QWORD *)(v65 + v67 + v72 * 8);
          ++v72;
          v74 = *v71 ^ v73;
          if (v74)
          {
            result = v72 * 8 + (__clz(__rbit64(v74)) >> 3);
            goto LABEL_47;
          }
        }
        v68 = (_QWORD *)(v65 + v67 + v72 * 8);
      }
      if (v71 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v68 == *(_DWORD *)v71)
      {
        v71 = (_QWORD *)((char *)v71 + 4);
        v68 = (_QWORD *)((char *)v68 + 4);
      }
      if (v71 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v68 == *(unsigned __int16 *)v71)
      {
        v71 = (_QWORD *)((char *)v71 + 2);
        v68 = (_QWORD *)((char *)v68 + 2);
      }
      if (v71 < a3 && *(unsigned __int8 *)v68 == *(unsigned __int8 *)v71)
        v71 = (_QWORD *)((char *)v71 + 1);
      result = (char *)v71 - (char *)a2;
LABEL_47:
      if (result > v66)
      {
        *a4 = v63 - v67;
        v66 = result;
        if ((_QWORD *)((char *)a2 + result) == a3)
          return result;
      }
LABEL_49:
      ++v61;
      result = v66;
      if (v61 == v51)
        return result;
    }
  }
  return 3;
}

unint64_t sub_1D4B78610(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v41;
  uint64_t v42;
  int8x16_t *v43;
  char v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t result;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  _DWORD v95[64];
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_DWORD *)(a1 + 52);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > v9 && *(_DWORD *)(a1 + 40) == 0)
    v11 = (_DWORD)a2 - v7 - v9;
  else
    v11 = *(_DWORD *)(a1 + 28);
  v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 4)
    LOBYTE(v12) = 4;
  v13 = *(_QWORD *)(a1 + 96);
  if (*(_DWORD *)(a1 + 300))
  {
    _X15 = ((0xCF1BBCDCBF9B0000 * *a2) ^ v13) >> (56 - v6);
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    v15 = a1 + 64;
    v16 = *(unsigned int *)(a1 + 44);
    if (v8 - v16 >= 0x181)
    {
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(a1 + 112);
      if (v16 <= 0xFFFFFF9F)
      {
        v70 = v16 + 96;
        do
        {
          v71 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v7 + 8 + v16)) ^ *(_QWORD *)(a1 + 96)) >> (56 - v6);
          v72 = (v71 >> 4) & 0xFFFFFF0;
          _X23 = v4 + 4 * v72;
          __asm { PRFM            #0, [X23] }
          _X22 = v5 + v72;
          __asm { PRFM            #0, [X22] }
          v77 = *(unsigned int *)(v15 + 4 * (v16 & 7));
          *(_DWORD *)(v15 + 4 * (v16 & 7)) = v71;
          v78 = (v77 >> 4) & 0xFFFFFF0;
          v79 = v4 + 4 * v78;
          v80 = (_BYTE *)(v5 + v78);
          if (((*v80 - 1) & 0xF) != 0)
            v81 = 0;
          else
            v81 = 15;
          v82 = v81 + ((*v80 - 1) & 0xF);
          *v80 = v82;
          v80[v82] = v77;
          *(_DWORD *)(v79 + 4 * v82) = v16++;
        }
        while (v16 < v70);
        v18 = *(_QWORD *)(a1 + 112);
        v17 = *(_QWORD *)(a1 + 56);
      }
      v83 = v8 - 32;
      LODWORD(v16) = v8 - 32;
      v84 = (_DWORD)a2 + 1 - (v7 + v83);
      if ((v84 + 1) < 8)
        v85 = v84 + 1;
      else
        v85 = 8;
      if ((unint64_t)a2 + 1 >= v7 + v83)
        v86 = v85;
      else
        v86 = 0;
      if (v83 < v86 + (int)v83)
      {
        v87 = *(_QWORD *)(a1 + 96);
        v88 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v89 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v7 + v83)) ^ v87) >> v88;
          v90 = (v89 >> 4) & 0xFFFFFF0;
          _X25 = v18 + 4 * v90;
          __asm { PRFM            #0, [X25] }
          _X24 = v17 + v90;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v83++ & 7) + 64) = v89;
          --v86;
        }
        while (v86);
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(a1 + 112);
    }
    if (v16 < v8)
    {
      v19 = *(_QWORD *)(a1 + 8) + 8;
      v20 = 56 - *(_DWORD *)(a1 + 52);
      v16 = v16;
      do
      {
        v21 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v19 + v16)) ^ *(_QWORD *)(a1 + 96)) >> v20;
        v22 = (v21 >> 4) & 0xFFFFFF0;
        _X25 = v18 + 4 * v22;
        __asm { PRFM            #0, [X25] }
        _X24 = v17 + v22;
        __asm { PRFM            #0, [X24] }
        v30 = *(unsigned int *)(v15 + 4 * (v16 & 7));
        *(_DWORD *)(v15 + 4 * (v16 & 7)) = v21;
        v31 = (v30 >> 4) & 0xFFFFFF0;
        v32 = v18 + 4 * v31;
        v33 = (_BYTE *)(v17 + v31);
        if (((*v33 - 1) & 0xF) != 0)
          v34 = 0;
        else
          v34 = 15;
        v35 = v34 + ((*v33 - 1) & 0xF);
        *v33 = v35;
        v33[v35] = v30;
        *(_DWORD *)(v32 + 4 * v35) = v16++;
      }
      while (v16 < ((_DWORD)a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    v36 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v7 + v8 + 8)) ^ v13) >> (56 - v6);
    v37 = (v36 >> 4) & 0xFFFFFF0;
    _X4 = v4 + 4 * v37;
    __asm { PRFM            #0, [X4] }
    _X15 = v5 + v37;
    __asm { PRFM            #0, [X15] }
    LODWORD(_X15) = *(_DWORD *)(v15 + 4 * (v8 & 7));
    *(_DWORD *)(v15 + 4 * (v8 & 7)) = v36;
  }
  *(_DWORD *)(a1 + 104) += _X15;
  v41 = (_X15 >> 4) & 0xFFFFFF0;
  v42 = v4 + 4 * v41;
  v43 = (int8x16_t *)(v5 + v41);
  v44 = 4 * v43->i8[0];
  v45 = (char)*v43;
  v46 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v43, vdupq_n_s8(_X15)), 4uLL), v44) & 0x8888888888888888;
  if (v46)
  {
    v47 = 0;
    v48 = 1 << v12;
    do
    {
      v49 = ((__clz(__rbit64(v46)) + (v44 & 0xFC)) >> 2) & 0xF;
      if (v49)
      {
        v50 = *(unsigned int *)(v42 + 4 * v49);
        if (v50 < v11)
          break;
        _X7 = v7 + v50;
        __asm { PRFM            #0, [X7] }
        v95[v47++] = v50;
        --v48;
      }
      v46 &= v46 - 1;
    }
    while (v46 && v48);
  }
  else
  {
    v47 = 0;
  }
  if (((v45 - 1) & 0xF) != 0)
    v53 = 0;
  else
    v53 = 15;
  v54 = v53 + ((v45 - 1) & 0xF);
  v43->i8[0] = v54;
  v43->i8[v54] = _X15;
  v55 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v55 + 1;
  *(_DWORD *)(v42 + 4 * v54) = v55;
  if (v47)
  {
    v56 = 0;
    v57 = (unint64_t)a3 - 7;
    v58 = v8 + 3;
    v59 = a2 + 1;
    v60 = v7 + 8;
    v61 = 3;
    while (1)
    {
      v62 = v95[v56];
      v63 = (_QWORD *)(v7 + v62);
      if (*(_DWORD *)(v7 + v62 + v61 - 3) != *(_DWORD *)((char *)a2 + v61 - 3))
        goto LABEL_51;
      if (v57 <= (unint64_t)a2)
      {
        v66 = a2;
      }
      else
      {
        v64 = *a2 ^ *v63;
        if (v64)
        {
          result = __clz(__rbit64(v64)) >> 3;
          goto LABEL_49;
        }
        v67 = 0;
        while (1)
        {
          v66 = &v59[v67];
          if ((unint64_t)&v59[v67] >= v57)
            break;
          v68 = *(_QWORD *)(v60 + v62 + v67 * 8);
          ++v67;
          v69 = *v66 ^ v68;
          if (v69)
          {
            result = v67 * 8 + (__clz(__rbit64(v69)) >> 3);
            goto LABEL_49;
          }
        }
        v63 = (_QWORD *)(v60 + v62 + v67 * 8);
      }
      if (v66 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v63 == *(_DWORD *)v66)
      {
        v66 = (_QWORD *)((char *)v66 + 4);
        v63 = (_QWORD *)((char *)v63 + 4);
      }
      if (v66 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v63 == *(unsigned __int16 *)v66)
      {
        v66 = (_QWORD *)((char *)v66 + 2);
        v63 = (_QWORD *)((char *)v63 + 2);
      }
      if (v66 < a3 && *(unsigned __int8 *)v63 == *(unsigned __int8 *)v66)
        v66 = (_QWORD *)((char *)v66 + 1);
      result = (char *)v66 - (char *)a2;
LABEL_49:
      if (result > v61)
      {
        *a4 = v58 - v62;
        v61 = result;
        if ((_QWORD *)((char *)a2 + result) == a3)
          return result;
      }
LABEL_51:
      ++v56;
      result = v61;
      if (v56 == v47)
        return result;
    }
  }
  return 3;
}

unint64_t sub_1D4B78B5C(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v43;
  uint64_t v44;
  __int16 *v45;
  char v46;
  char v47;
  int8x16_t v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t result;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  _DWORD v100[64];
  uint64_t v101;
  int16x8x2_t v102;

  v101 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_DWORD *)(a1 + 52);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > v9 && *(_DWORD *)(a1 + 40) == 0)
    v11 = (_DWORD)a2 - v7 - v9;
  else
    v11 = *(_DWORD *)(a1 + 28);
  v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 5)
    LOBYTE(v12) = 5;
  v13 = *(_QWORD *)(a1 + 96);
  if (*(_DWORD *)(a1 + 300))
  {
    _X15 = ((0xCF1BBCDCBF9B0000 * *a2) ^ v13) >> (56 - v6);
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    v15 = a1 + 64;
    v16 = *(unsigned int *)(a1 + 44);
    if (v8 - v16 >= 0x181)
    {
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(a1 + 112);
      if (v16 <= 0xFFFFFF9F)
      {
        v73 = v16 + 96;
        do
        {
          v74 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v7 + 8 + v16)) ^ *(_QWORD *)(a1 + 96)) >> (56 - v6);
          v75 = (v74 >> 3) & 0x1FFFFFE0;
          _X23 = v4 + 4 * v75;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v5 + v75;
          __asm { PRFM            #0, [X22] }
          v81 = *(unsigned int *)(v15 + 4 * (v16 & 7));
          *(_DWORD *)(v15 + 4 * (v16 & 7)) = v74;
          v82 = (v81 >> 3) & 0x1FFFFFE0;
          v83 = v4 + 4 * v82;
          v84 = (_BYTE *)(v5 + v82);
          if (((*v84 - 1) & 0x1F) != 0)
            v85 = 0;
          else
            v85 = 31;
          v86 = v85 + ((*v84 - 1) & 0x1F);
          *v84 = v86;
          v84[v86] = v81;
          *(_DWORD *)(v83 + 4 * v86) = v16++;
        }
        while (v16 < v73);
        v18 = *(_QWORD *)(a1 + 112);
        v17 = *(_QWORD *)(a1 + 56);
      }
      v87 = v8 - 32;
      LODWORD(v16) = v8 - 32;
      v88 = (_DWORD)a2 + 1 - (v7 + v87);
      if ((v88 + 1) < 8)
        v89 = v88 + 1;
      else
        v89 = 8;
      if ((unint64_t)a2 + 1 >= v7 + v87)
        v90 = v89;
      else
        v90 = 0;
      if (v87 < v90 + (int)v87)
      {
        v91 = *(_QWORD *)(a1 + 96);
        v92 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v93 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v7 + v87)) ^ v91) >> v92;
          v94 = (v93 >> 3) & 0x1FFFFFE0;
          _X25 = v18 + 4 * v94;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v17 + v94;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v87++ & 7) + 64) = v93;
          --v90;
        }
        while (v90);
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(a1 + 112);
    }
    if (v16 < v8)
    {
      v19 = *(_QWORD *)(a1 + 8) + 8;
      v20 = 56 - *(_DWORD *)(a1 + 52);
      v16 = v16;
      do
      {
        v21 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v19 + v16)) ^ *(_QWORD *)(a1 + 96)) >> v20;
        v22 = (v21 >> 3) & 0x1FFFFFE0;
        _X25 = v18 + 4 * v22;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v17 + v22;
        __asm { PRFM            #0, [X24] }
        v31 = *(unsigned int *)(v15 + 4 * (v16 & 7));
        *(_DWORD *)(v15 + 4 * (v16 & 7)) = v21;
        v32 = (v31 >> 3) & 0x1FFFFFE0;
        v33 = v18 + 4 * v32;
        v34 = (_BYTE *)(v17 + v32);
        if (((*v34 - 1) & 0x1F) != 0)
          v35 = 0;
        else
          v35 = 31;
        v36 = v35 + ((*v34 - 1) & 0x1F);
        *v34 = v36;
        v34[v36] = v31;
        *(_DWORD *)(v33 + 4 * v36) = v16++;
      }
      while (v16 < ((_DWORD)a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    v37 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v7 + v8 + 8)) ^ v13) >> (56 - v6);
    v38 = (v37 >> 3) & 0x1FFFFFE0;
    _X4 = v4 + 4 * v38;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X15 = v5 + v38;
    __asm { PRFM            #0, [X15] }
    LODWORD(_X15) = *(_DWORD *)(v15 + 4 * (v8 & 7));
    *(_DWORD *)(v15 + 4 * (v8 & 7)) = v37;
  }
  *(_DWORD *)(a1 + 104) += _X15;
  v43 = (_X15 >> 3) & 0x1FFFFFE0;
  v44 = v4 + 4 * v43;
  v45 = (__int16 *)(v5 + v43);
  v102 = vld2q_s16(v45);
  v46 = *(_BYTE *)v45;
  v47 = 2 * *(_BYTE *)v45;
  v48 = vdupq_n_s8(_X15);
  v49 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v48, (int8x16_t)v102.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v48, (int8x16_t)v102.val[1]), 6uLL), 4uLL), v47) & 0x5555555555555555;
  if (v49)
  {
    v50 = 0;
    v51 = 1 << v12;
    do
    {
      v52 = ((__clz(__rbit64(v49)) + (v47 & 0xFE)) >> 1) & 0x1F;
      if (v52)
      {
        v53 = *(unsigned int *)(v44 + 4 * v52);
        if (v53 < v11)
          break;
        _X7 = v7 + v53;
        __asm { PRFM            #0, [X7] }
        v100[v50++] = v53;
        --v51;
      }
      v49 &= v49 - 1;
    }
    while (v49 && v51);
  }
  else
  {
    v50 = 0;
  }
  if (((v46 - 1) & 0x1F) != 0)
    v56 = 0;
  else
    v56 = 31;
  v57 = v56 + ((v46 - 1) & 0x1F);
  *(_BYTE *)v45 = v57;
  *((_BYTE *)v45 + v57) = _X15;
  v58 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v58 + 1;
  *(_DWORD *)(v44 + 4 * v57) = v58;
  if (v50)
  {
    v59 = 0;
    v60 = (unint64_t)a3 - 7;
    v61 = v8 + 3;
    v62 = a2 + 1;
    v63 = v7 + 8;
    v64 = 3;
    while (1)
    {
      v65 = v100[v59];
      v66 = (_QWORD *)(v7 + v65);
      if (*(_DWORD *)(v7 + v65 + v64 - 3) != *(_DWORD *)((char *)a2 + v64 - 3))
        goto LABEL_51;
      if (v60 <= (unint64_t)a2)
      {
        v69 = a2;
      }
      else
      {
        v67 = *a2 ^ *v66;
        if (v67)
        {
          result = __clz(__rbit64(v67)) >> 3;
          goto LABEL_49;
        }
        v70 = 0;
        while (1)
        {
          v69 = &v62[v70];
          if ((unint64_t)&v62[v70] >= v60)
            break;
          v71 = *(_QWORD *)(v63 + v65 + v70 * 8);
          ++v70;
          v72 = *v69 ^ v71;
          if (v72)
          {
            result = v70 * 8 + (__clz(__rbit64(v72)) >> 3);
            goto LABEL_49;
          }
        }
        v66 = (_QWORD *)(v63 + v65 + v70 * 8);
      }
      if (v69 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v66 == *(_DWORD *)v69)
      {
        v69 = (_QWORD *)((char *)v69 + 4);
        v66 = (_QWORD *)((char *)v66 + 4);
      }
      if (v69 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v66 == *(unsigned __int16 *)v69)
      {
        v69 = (_QWORD *)((char *)v69 + 2);
        v66 = (_QWORD *)((char *)v66 + 2);
      }
      if (v69 < a3 && *(unsigned __int8 *)v66 == *(unsigned __int8 *)v69)
        v69 = (_QWORD *)((char *)v69 + 1);
      result = (char *)v69 - (char *)a2;
LABEL_49:
      if (result > v64)
      {
        *a4 = v61 - v65;
        v64 = result;
        if ((_QWORD *)((char *)a2 + result) == a3)
          return result;
      }
LABEL_51:
      ++v59;
      result = v64;
      if (v59 == v50)
        return result;
    }
  }
  return 3;
}

unint64_t sub_1D4B790C0(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char v48;
  int8x16_t v49;
  int8x8_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t result;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  uint64_t v97;
  _DWORD v104[64];
  uint64_t v105;
  int8x16x4_t v106;

  v105 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_DWORD *)(a1 + 52);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > v9 && *(_DWORD *)(a1 + 40) == 0)
    v11 = (_DWORD)a2 - v7 - v9;
  else
    v11 = *(_DWORD *)(a1 + 28);
  v12 = *(_DWORD *)(a1 + 268);
  if (v12 >= 6)
    LOBYTE(v12) = 6;
  v13 = *(_QWORD *)(a1 + 96);
  if (*(_DWORD *)(a1 + 300))
  {
    _X15 = ((0xCF1BBCDCBF9B0000 * *a2) ^ v13) >> (56 - v6);
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    v15 = a1 + 64;
    v16 = *(unsigned int *)(a1 + 44);
    if (v8 - v16 >= 0x181)
    {
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(a1 + 112);
      if (v16 <= 0xFFFFFF9F)
      {
        v75 = v16 + 96;
        do
        {
          v76 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v7 + 8 + v16)) ^ *(_QWORD *)(a1 + 96)) >> (56 - v6);
          v77 = (v76 >> 2) & 0x3FFFFFC0;
          _X23 = v4 + 4 * v77;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v5 + v77;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x20]
          }
          v84 = *(unsigned int *)(v15 + 4 * (v16 & 7));
          *(_DWORD *)(v15 + 4 * (v16 & 7)) = v76;
          v85 = (v84 >> 2) & 0x3FFFFFC0;
          v86 = v4 + 4 * v85;
          v87 = (_BYTE *)(v5 + v85);
          if (((*v87 - 1) & 0x3F) != 0)
            v88 = 0;
          else
            v88 = 63;
          v89 = v88 + ((*v87 - 1) & 0x3F);
          *v87 = v89;
          v87[v89] = v84;
          *(_DWORD *)(v86 + 4 * v89) = v16++;
        }
        while (v16 < v75);
        v18 = *(_QWORD *)(a1 + 112);
        v17 = *(_QWORD *)(a1 + 56);
      }
      v90 = v8 - 32;
      LODWORD(v16) = v8 - 32;
      v91 = (_DWORD)a2 + 1 - (v7 + v90);
      if ((v91 + 1) < 8)
        v92 = v91 + 1;
      else
        v92 = 8;
      if ((unint64_t)a2 + 1 >= v7 + v90)
        v93 = v92;
      else
        v93 = 0;
      if (v90 < v93 + (int)v90)
      {
        v94 = *(_QWORD *)(a1 + 96);
        v95 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v96 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v7 + v90)) ^ v94) >> v95;
          v97 = (v96 >> 2) & 0x3FFFFFC0;
          _X25 = v18 + 4 * v97;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v17 + v97;
          __asm
          {
            PRFM            #0, [X24]
            PRFM            #0, [X24,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v90++ & 7) + 64) = v96;
          --v93;
        }
        while (v93);
      }
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 56);
      v18 = *(_QWORD *)(a1 + 112);
    }
    if (v16 < v8)
    {
      v19 = *(_QWORD *)(a1 + 8) + 8;
      v20 = 56 - *(_DWORD *)(a1 + 52);
      v16 = v16;
      do
      {
        v21 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v19 + v16)) ^ *(_QWORD *)(a1 + 96)) >> v20;
        v22 = (v21 >> 2) & 0x3FFFFFC0;
        _X25 = v18 + 4 * v22;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v17 + v22;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x20]
        }
        v32 = *(unsigned int *)(v15 + 4 * (v16 & 7));
        *(_DWORD *)(v15 + 4 * (v16 & 7)) = v21;
        v33 = (v32 >> 2) & 0x3FFFFFC0;
        v34 = v18 + 4 * v33;
        v35 = (_BYTE *)(v17 + v33);
        if (((*v35 - 1) & 0x3F) != 0)
          v36 = 0;
        else
          v36 = 63;
        v37 = v36 + ((*v35 - 1) & 0x3F);
        *v35 = v37;
        v35[v37] = v32;
        *(_DWORD *)(v34 + 4 * v37) = v16++;
      }
      while (v16 < ((_DWORD)a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    v38 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v7 + v8 + 8)) ^ v13) >> (56 - v6);
    v39 = (v38 >> 2) & 0x3FFFFFC0;
    _X4 = v4 + 4 * v39;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X15 = v5 + v39;
    __asm
    {
      PRFM            #0, [X15]
      PRFM            #0, [X15,#0x20]
    }
    LODWORD(_X15) = *(_DWORD *)(v15 + 4 * (v8 & 7));
    *(_DWORD *)(v15 + 4 * (v8 & 7)) = v38;
  }
  *(_DWORD *)(a1 + 104) += _X15;
  v45 = (_X15 >> 2) & 0x3FFFFFC0;
  v46 = v4 + 4 * v45;
  v47 = (char *)(v5 + v45);
  v48 = *v47;
  v106 = vld4q_s8(v47);
  v49 = vdupq_n_s8(_X15);
  v106.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v106.val[3], v49), vceqq_s8(v106.val[2], v49), 1uLL), vsriq_n_s8(vceqq_s8(v106.val[1], v49), vceqq_s8(v106.val[0], v49), 1uLL), 2uLL);
  v50 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v106.val[0], v106.val[0], 4uLL), 4uLL);
  v51 = 0;
  if (v50)
  {
    v52 = 1 << v12;
    v53 = __ROR8__(*(_QWORD *)&v50, v48);
    do
    {
      v54 = (__clz(__rbit64(v53)) + v48) & 0x3F;
      if (v54)
      {
        v55 = *(unsigned int *)(v46 + 4 * v54);
        if (v55 < v11)
          break;
        _X6 = v7 + v55;
        __asm { PRFM            #0, [X6] }
        v104[v51++] = v55;
        --v52;
      }
      v53 &= v53 - 1;
    }
    while (v53 && v52);
  }
  if (((v48 - 1) & 0x3F) != 0)
    v58 = 0;
  else
    v58 = 63;
  v59 = v58 + ((v48 - 1) & 0x3F);
  *v47 = v59;
  v47[v59] = _X15;
  v60 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v60 + 1;
  *(_DWORD *)(v46 + 4 * v59) = v60;
  if (v51)
  {
    v61 = 0;
    v62 = (unint64_t)a3 - 7;
    v63 = v8 + 3;
    v64 = a2 + 1;
    v65 = v7 + 8;
    v66 = 3;
    while (1)
    {
      v67 = v104[v61];
      v68 = (_QWORD *)(v7 + v67);
      if (*(_DWORD *)(v7 + v67 + v66 - 3) != *(_DWORD *)((char *)a2 + v66 - 3))
        goto LABEL_49;
      if (v62 <= (unint64_t)a2)
      {
        v71 = a2;
      }
      else
      {
        v69 = *a2 ^ *v68;
        if (v69)
        {
          result = __clz(__rbit64(v69)) >> 3;
          goto LABEL_47;
        }
        v72 = 0;
        while (1)
        {
          v71 = &v64[v72];
          if ((unint64_t)&v64[v72] >= v62)
            break;
          v73 = *(_QWORD *)(v65 + v67 + v72 * 8);
          ++v72;
          v74 = *v71 ^ v73;
          if (v74)
          {
            result = v72 * 8 + (__clz(__rbit64(v74)) >> 3);
            goto LABEL_47;
          }
        }
        v68 = (_QWORD *)(v65 + v67 + v72 * 8);
      }
      if (v71 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v68 == *(_DWORD *)v71)
      {
        v71 = (_QWORD *)((char *)v71 + 4);
        v68 = (_QWORD *)((char *)v68 + 4);
      }
      if (v71 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v68 == *(unsigned __int16 *)v71)
      {
        v71 = (_QWORD *)((char *)v71 + 2);
        v68 = (_QWORD *)((char *)v68 + 2);
      }
      if (v71 < a3 && *(unsigned __int8 *)v68 == *(unsigned __int8 *)v71)
        v71 = (_QWORD *)((char *)v71 + 1);
      result = (char *)v71 - (char *)a2;
LABEL_47:
      if (result > v66)
      {
        *a4 = v63 - v67;
        v66 = result;
        if ((_QWORD *)((char *)a2 + result) == a3)
          return result;
      }
LABEL_49:
      ++v61;
      result = v66;
      if (v61 == v51)
        return result;
    }
  }
  return 3;
}

unint64_t sub_1D4B79630(uint64_t a1, _DWORD *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  char *v30;
  int v31;
  unsigned int v32;
  unint64_t result;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  char *v59;
  _QWORD *v60;

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 128);
  v7 = *(_DWORD *)(a1 + 260);
  v8 = 1 << v7;
  v9 = (1 << v7) - 1;
  v11 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v12 = *(unsigned int *)(a1 + 24);
  v60 = (_QWORD *)(v11 + v12);
  v59 = (char *)(v10 + v12);
  v13 = (_DWORD)a2 - v11;
  v14 = 1 << *(_DWORD *)(a1 + 256);
  v15 = (_DWORD)a2 - v11 - v14;
  v16 = (int)a2 - (int)v11 - *(_DWORD *)(a1 + 28) > v14;
  v17 = *(unsigned int *)(a1 + 44);
  if (v16 && *(_DWORD *)(a1 + 40) == 0)
    v19 = v15;
  else
    v19 = *(_DWORD *)(a1 + 28);
  v20 = v13 >= v8;
  v21 = v13 - v8;
  if (v20)
    v22 = v21;
  else
    v22 = 0;
  v23 = 1 << *(_DWORD *)(a1 + 268);
  v24 = *(_DWORD *)(a1 + 300);
  v25 = *(_QWORD *)(a1 + 112);
  v26 = ~(-1 << v7);
  v27 = 32 - *(_DWORD *)(a1 + 264);
  if (v17 <= v13)
    v28 = v13;
  else
    v28 = v17;
  do
  {
    if (v28 == v17)
      break;
    v29 = (-1640531535 * *(_DWORD *)(v11 + v17)) >> v27;
    *(_DWORD *)(v6 + 4 * (v17 & v26)) = *(_DWORD *)(v25 + 4 * v29);
    *(_DWORD *)(v25 + 4 * v29) = v17++;
  }
  while (!v24);
  *(_DWORD *)(a1 + 44) = v13;
  v30 = (char *)a2 - 3;
  v31 = *a2;
  v32 = *(_DWORD *)(v25 + 4 * ((-1640531535 * *a2) >> v27));
  if (v32 < v19)
    return 3;
  v34 = a3 - 7;
  v50 = a3 - 1;
  v51 = a3 - 3;
  v54 = a2 + 1;
  v53 = v13 + 3;
  v48 = a2 + 2;
  v49 = v11 + 8;
  v35 = 3;
  v58 = v22;
  v56 = v6;
  v57 = v11;
  v55 = v9;
  v52 = v10;
  while (1)
  {
    v36 = v32;
    if (v32 >= v12)
    {
      v42 = (_QWORD *)(v11 + v32);
      if (*(_DWORD *)((char *)v42 + v35 - 3) != *(_DWORD *)&v30[v35])
        goto LABEL_38;
      if (v34 <= (unint64_t)v5)
      {
        v44 = v5;
      }
      else
      {
        v43 = *v5 ^ *v42;
        if (v43)
        {
          result = __clz(__rbit64(v43)) >> 3;
          goto LABEL_36;
        }
        v45 = 0;
        while (1)
        {
          v44 = &v48[v45];
          if ((unint64_t)&v48[v45] >= v34)
            break;
          v46 = *(_QWORD *)(v49 + v36 + v45 * 4);
          v45 += 2;
          v47 = *v44 ^ v46;
          if (v47)
          {
            result = v45 * 4 + (__clz(__rbit64(v47)) >> 3);
            goto LABEL_36;
          }
        }
        v42 = (_QWORD *)(v49 + v36 + v45 * 4);
      }
      if ((unint64_t)v44 < v51 && *(_DWORD *)v42 == *(_DWORD *)v44)
      {
        v44 = (_QWORD *)((char *)v44 + 4);
        v42 = (_QWORD *)((char *)v42 + 4);
      }
      if ((unint64_t)v44 < v50 && *(unsigned __int16 *)v42 == *(unsigned __int16 *)v44)
      {
        v44 = (_QWORD *)((char *)v44 + 2);
        v42 = (_QWORD *)((char *)v42 + 2);
      }
      if ((unint64_t)v44 < a3 && *(unsigned __int8 *)v42 == *(unsigned __int8 *)v44)
        v44 = (_QWORD *)((char *)v44 + 1);
      result = (char *)v44 - (char *)v5;
    }
    else
    {
      v37 = v10 + v32;
      if (*(_DWORD *)(v10 + v36) != v31)
        goto LABEL_38;
      v38 = v5;
      v39 = v12;
      v40 = v35;
      v41 = sub_1D4B5F19C(v54, (char *)(v37 + 4), a3, v59, v60);
      v35 = v40;
      v12 = v39;
      v5 = v38;
      v6 = v56;
      v11 = v57;
      v10 = v52;
      v22 = v58;
      v9 = v55;
      result = v41 + 4;
    }
LABEL_36:
    if (result > v35)
    {
      *a4 = v53 - v36;
      v35 = result;
      if ((_QWORD *)((char *)v5 + result) == (_QWORD *)a3)
        return result;
    }
LABEL_38:
    if (v36 <= v22)
      return v35;
    if (!--v23)
      return v35;
    v32 = *(_DWORD *)(v6 + 4 * (v36 & v9));
    result = v35;
    if (v32 < v19)
      return result;
  }
}

unint64_t sub_1D4B79954(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t result;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;

  v6 = *(_QWORD *)(a1 + 128);
  v7 = *(_DWORD *)(a1 + 260);
  v8 = 1 << v7;
  v9 = (1 << v7) - 1;
  v11 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v12 = *(unsigned int *)(a1 + 24);
  v13 = *(_DWORD *)(a1 + 28);
  v58 = (_QWORD *)(v11 + v12);
  v57 = (char *)(v10 + v12);
  v14 = (_DWORD)a2 - v11;
  v15 = 1 << *(_DWORD *)(a1 + 256);
  v16 = (_DWORD)a2 - v11 - v15;
  v17 = (_DWORD)a2 - (_DWORD)v11 - v13 > v15;
  v18 = *(unsigned int *)(a1 + 44);
  if (v17 && *(_DWORD *)(a1 + 40) == 0)
    v20 = v16;
  else
    v20 = v13;
  v21 = v14 >= v8;
  v22 = v14 - v8;
  if (v21)
    v23 = v22;
  else
    v23 = 0;
  v24 = 1 << *(_DWORD *)(a1 + 268);
  v25 = *(_DWORD *)(a1 + 300);
  v26 = *(_QWORD *)(a1 + 112);
  v27 = ~(-1 << v7);
  v28 = 64 - *(_DWORD *)(a1 + 264);
  if (v18 <= v14)
    v29 = v14;
  else
    v29 = v18;
  do
  {
    if (v29 == v18)
      break;
    v30 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v11 + v18)) >> v28;
    *(_DWORD *)(v6 + 4 * (v18 & v27)) = *(_DWORD *)(v26 + 4 * v30);
    *(_DWORD *)(v26 + 4 * v30) = v18++;
  }
  while (!v25);
  v31 = *a2;
  *(_DWORD *)(a1 + 44) = v14;
  v32 = *(_DWORD *)(v26 + 4 * ((0xCF1BBCDCBB000000 * v31) >> v28));
  if (v32 < v20)
    return 3;
  v34 = a3 - 7;
  v50 = a3 - 1;
  v51 = a3 - 3;
  v52 = v9;
  v53 = v14 + 3;
  v48 = a2 + 1;
  v49 = v11 + 8;
  v35 = 3;
  v55 = v6;
  v56 = v11;
  v54 = v23;
  while (1)
  {
    v36 = v32;
    if (v32 >= v12)
    {
      v42 = (_QWORD *)(v11 + v32);
      if (*(_DWORD *)((char *)v42 + v35 - 3) != *(_DWORD *)((char *)a2 + v35 - 3))
        goto LABEL_38;
      if (v34 <= (unint64_t)a2)
      {
        v44 = a2;
      }
      else
      {
        v43 = *a2 ^ *v42;
        if (v43)
        {
          result = __clz(__rbit64(v43)) >> 3;
          goto LABEL_36;
        }
        v45 = 0;
        while (1)
        {
          v44 = &v48[v45];
          if ((unint64_t)&v48[v45] >= v34)
            break;
          v46 = *(_QWORD *)(v49 + v36 + v45 * 8);
          ++v45;
          v47 = *v44 ^ v46;
          if (v47)
          {
            result = v45 * 8 + (__clz(__rbit64(v47)) >> 3);
            goto LABEL_36;
          }
        }
        v42 = (_QWORD *)(v49 + v36 + v45 * 8);
      }
      if ((unint64_t)v44 < v51 && *(_DWORD *)v42 == *(_DWORD *)v44)
      {
        v44 = (_QWORD *)((char *)v44 + 4);
        v42 = (_QWORD *)((char *)v42 + 4);
      }
      if ((unint64_t)v44 < v50 && *(unsigned __int16 *)v42 == *(unsigned __int16 *)v44)
      {
        v44 = (_QWORD *)((char *)v44 + 2);
        v42 = (_QWORD *)((char *)v42 + 2);
      }
      if ((unint64_t)v44 < a3 && *(unsigned __int8 *)v42 == *(unsigned __int8 *)v44)
        v44 = (_QWORD *)((char *)v44 + 1);
      result = (char *)v44 - (char *)a2;
    }
    else
    {
      v37 = v10 + v32;
      if (*(_DWORD *)(v10 + v36) != *(_DWORD *)a2)
        goto LABEL_38;
      v38 = v10;
      v39 = v12;
      v40 = v20;
      v41 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v37 + 4), a3, v57, v58);
      v20 = v40;
      v23 = v54;
      v12 = v39;
      v10 = v38;
      v6 = v55;
      v11 = v56;
      v9 = v52;
      result = v41 + 4;
    }
LABEL_36:
    if (result > v35)
    {
      *a4 = v53 - v36;
      v35 = result;
      if ((_QWORD *)((char *)a2 + result) == (_QWORD *)a3)
        return result;
    }
LABEL_38:
    if (v36 <= v23)
      return v35;
    if (!--v24)
      return v35;
    v32 = *(_DWORD *)(v6 + 4 * (v36 & v9));
    result = v35;
    if (v32 < v20)
      return result;
  }
}

unint64_t sub_1D4B79C74(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t result;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;

  v6 = *(_QWORD *)(a1 + 128);
  v7 = *(_DWORD *)(a1 + 260);
  v8 = 1 << v7;
  v9 = (1 << v7) - 1;
  v11 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v12 = *(unsigned int *)(a1 + 24);
  v13 = *(_DWORD *)(a1 + 28);
  v58 = (_QWORD *)(v11 + v12);
  v57 = (char *)(v10 + v12);
  v14 = (_DWORD)a2 - v11;
  v15 = 1 << *(_DWORD *)(a1 + 256);
  v16 = (_DWORD)a2 - v11 - v15;
  v17 = (_DWORD)a2 - (_DWORD)v11 - v13 > v15;
  v18 = *(unsigned int *)(a1 + 44);
  if (v17 && *(_DWORD *)(a1 + 40) == 0)
    v20 = v16;
  else
    v20 = v13;
  v21 = v14 >= v8;
  v22 = v14 - v8;
  if (v21)
    v23 = v22;
  else
    v23 = 0;
  v24 = 1 << *(_DWORD *)(a1 + 268);
  v25 = *(_DWORD *)(a1 + 300);
  v26 = *(_QWORD *)(a1 + 112);
  v27 = ~(-1 << v7);
  v28 = 64 - *(_DWORD *)(a1 + 264);
  if (v18 <= v14)
    v29 = v14;
  else
    v29 = v18;
  do
  {
    if (v29 == v18)
      break;
    v30 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v11 + v18)) >> v28;
    *(_DWORD *)(v6 + 4 * (v18 & v27)) = *(_DWORD *)(v26 + 4 * v30);
    *(_DWORD *)(v26 + 4 * v30) = v18++;
  }
  while (!v25);
  v31 = *a2;
  *(_DWORD *)(a1 + 44) = v14;
  v32 = *(_DWORD *)(v26 + 4 * ((0xCF1BBCDCBF9B0000 * v31) >> v28));
  if (v32 < v20)
    return 3;
  v34 = a3 - 7;
  v50 = a3 - 1;
  v51 = a3 - 3;
  v52 = v9;
  v53 = v14 + 3;
  v48 = a2 + 1;
  v49 = v11 + 8;
  v35 = 3;
  v55 = v6;
  v56 = v11;
  v54 = v23;
  while (1)
  {
    v36 = v32;
    if (v32 >= v12)
    {
      v42 = (_QWORD *)(v11 + v32);
      if (*(_DWORD *)((char *)v42 + v35 - 3) != *(_DWORD *)((char *)a2 + v35 - 3))
        goto LABEL_38;
      if (v34 <= (unint64_t)a2)
      {
        v44 = a2;
      }
      else
      {
        v43 = *a2 ^ *v42;
        if (v43)
        {
          result = __clz(__rbit64(v43)) >> 3;
          goto LABEL_36;
        }
        v45 = 0;
        while (1)
        {
          v44 = &v48[v45];
          if ((unint64_t)&v48[v45] >= v34)
            break;
          v46 = *(_QWORD *)(v49 + v36 + v45 * 8);
          ++v45;
          v47 = *v44 ^ v46;
          if (v47)
          {
            result = v45 * 8 + (__clz(__rbit64(v47)) >> 3);
            goto LABEL_36;
          }
        }
        v42 = (_QWORD *)(v49 + v36 + v45 * 8);
      }
      if ((unint64_t)v44 < v51 && *(_DWORD *)v42 == *(_DWORD *)v44)
      {
        v44 = (_QWORD *)((char *)v44 + 4);
        v42 = (_QWORD *)((char *)v42 + 4);
      }
      if ((unint64_t)v44 < v50 && *(unsigned __int16 *)v42 == *(unsigned __int16 *)v44)
      {
        v44 = (_QWORD *)((char *)v44 + 2);
        v42 = (_QWORD *)((char *)v42 + 2);
      }
      if ((unint64_t)v44 < a3 && *(unsigned __int8 *)v42 == *(unsigned __int8 *)v44)
        v44 = (_QWORD *)((char *)v44 + 1);
      result = (char *)v44 - (char *)a2;
    }
    else
    {
      v37 = v10 + v32;
      if (*(_DWORD *)(v10 + v36) != *(_DWORD *)a2)
        goto LABEL_38;
      v38 = v10;
      v39 = v12;
      v40 = v20;
      v41 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v37 + 4), a3, v57, v58);
      v20 = v40;
      v23 = v54;
      v12 = v39;
      v10 = v38;
      v6 = v55;
      v11 = v56;
      v9 = v52;
      result = v41 + 4;
    }
LABEL_36:
    if (result > v35)
    {
      *a4 = v53 - v36;
      v35 = result;
      if ((_QWORD *)((char *)a2 + result) == (_QWORD *)a3)
        return result;
    }
LABEL_38:
    if (v36 <= v23)
      return v35;
    if (!--v24)
      return v35;
    v32 = *(_DWORD *)(v6 + 4 * (v36 & v9));
    result = v35;
    if (v32 < v20)
      return result;
  }
}

unint64_t sub_1D4B79F94(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned int *a4)
{
  if (*(_QWORD *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2)
    return 0;
  sub_1D4B87034(a1, (int)a2, 4);
  return sub_1D4B87160(a1, a2, a3, a4, 4, 1);
}

unint64_t sub_1D4B7A00C(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned int *a4)
{
  if (*(_QWORD *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2)
    return 0;
  sub_1D4B87034(a1, (int)a2, 5);
  return sub_1D4B87160(a1, a2, a3, a4, 5, 1);
}

unint64_t sub_1D4B7A084(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned int *a4)
{
  if (*(_QWORD *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2)
    return 0;
  sub_1D4B87034(a1, (int)a2, 6);
  return sub_1D4B87160(a1, a2, a3, a4, 6, 1);
}

unint64_t sub_1D4B7A0FC(uint64_t a1, _DWORD *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v46;
  uint64_t v47;
  int8x16_t *v48;
  char v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  unint64_t result;
  _QWORD *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int v108;
  _QWORD *v109;
  char *v110;
  _QWORD *v111;
  uint64_t v113;
  _DWORD v114[64];
  uint64_t v115;

  v4 = a2;
  v115 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 52);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v10 = (_DWORD)a2 - v9;
  v11 = 1 << *(_DWORD *)(a1 + 256);
  v12 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0)
    v14 = (_DWORD)a2 - v9 - v11;
  else
    v14 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 268);
  if (v15 >= 4)
    LOBYTE(v15) = 4;
  v16 = *(_QWORD *)(a1 + 96);
  v113 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 300))
  {
    v17 = ((-1640531535 * *a2) ^ v16) >> (24 - v7);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    v18 = a1 + 64;
    v19 = *(unsigned int *)(a1 + 44);
    v20 = *(_QWORD *)(a1 + 16);
    if (v10 - v19 >= 0x181)
    {
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_QWORD *)(a1 + 112);
      if (v19 <= 0xFFFFFF9F)
      {
        v79 = v19 + 96;
        do
        {
          v80 = ((-1640531535 * *(_DWORD *)(v9 + 8 + v19)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v7);
          v81 = (v80 >> 4) & 0xFFFFFF0;
          _X19 = v5 + 4 * v81;
          __asm { PRFM            #0, [X19] }
          _X7 = v6 + v81;
          __asm { PRFM            #0, [X7] }
          v86 = *(unsigned int *)(v18 + 4 * (v19 & 7));
          *(_DWORD *)(v18 + 4 * (v19 & 7)) = v80;
          v87 = (v86 >> 4) & 0xFFFFFF0;
          v88 = v5 + 4 * v87;
          v89 = (_BYTE *)(v6 + v87);
          if (((*v89 - 1) & 0xF) != 0)
            v90 = 0;
          else
            v90 = 15;
          v91 = v90 + ((*v89 - 1) & 0xF);
          *v89 = v91;
          v89[v91] = v86;
          *(_DWORD *)(v88 + 4 * v91) = v19++;
        }
        while (v19 < v79);
        v22 = *(_QWORD *)(a1 + 112);
        v21 = *(_QWORD *)(a1 + 56);
        v9 = v113;
      }
      v92 = v10 - 32;
      LODWORD(v19) = v10 - 32;
      v93 = (_DWORD)v4 + 1 - (v9 + v92);
      if ((v93 + 1) < 8)
        v94 = v93 + 1;
      else
        v94 = 8;
      if ((unint64_t)v4 + 1 >= v9 + v92)
        v95 = v94;
      else
        v95 = 0;
      if (v92 < v95 + (int)v92)
      {
        v96 = *(_DWORD *)(a1 + 96);
        v97 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          v98 = ((-1640531535 * *(_DWORD *)(v9 + v92)) ^ v96) >> v97;
          v99 = (v98 >> 4) & 0xFFFFFF0;
          _X22 = v22 + 4 * v99;
          __asm { PRFM            #0, [X22] }
          _X20 = v21 + v99;
          __asm { PRFM            #0, [X20] }
          *(_DWORD *)(a1 + 4 * (v92++ & 7) + 64) = v98;
          --v95;
        }
        while (v95);
      }
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_QWORD *)(a1 + 112);
    }
    if (v19 < v10)
    {
      v23 = *(_QWORD *)(a1 + 8) + 8;
      v24 = 24 - *(_DWORD *)(a1 + 52);
      v19 = v19;
      do
      {
        v25 = ((-1640531535 * *(_DWORD *)(v23 + v19)) ^ *(_DWORD *)(a1 + 96)) >> v24;
        v26 = (v25 >> 4) & 0xFFFFFF0;
        _X22 = v22 + 4 * v26;
        __asm { PRFM            #0, [X22] }
        _X20 = v21 + v26;
        __asm { PRFM            #0, [X20] }
        v34 = *(unsigned int *)(v18 + 4 * (v19 & 7));
        *(_DWORD *)(v18 + 4 * (v19 & 7)) = v25;
        v35 = (v34 >> 4) & 0xFFFFFF0;
        v36 = v22 + 4 * v35;
        v37 = (_BYTE *)(v21 + v35);
        if (((*v37 - 1) & 0xF) != 0)
          v38 = 0;
        else
          v38 = 15;
        v39 = v38 + ((*v37 - 1) & 0xF);
        *v37 = v39;
        v37[v39] = v34;
        *(_DWORD *)(v36 + 4 * v39) = v19++;
      }
      while (v19 < v10);
    }
    *(_DWORD *)(a1 + 44) = v10;
    v40 = ((-1640531535 * *(_DWORD *)(v9 + v10 + 8)) ^ v16) >> (24 - v7);
    v41 = (v40 >> 4) & 0xFFFFFF0;
    _X17 = v5 + 4 * v41;
    __asm { PRFM            #0, [X17] }
    _X14 = v6 + v41;
    __asm { PRFM            #0, [X14] }
    v17 = *(_DWORD *)(v18 + 4 * (v10 & 7));
    *(_DWORD *)(v18 + 4 * (v10 & 7)) = v40;
    v8 = v20;
  }
  *(_DWORD *)(a1 + 104) += v17;
  v46 = (v17 >> 4) & 0xFFFFFF0;
  v47 = v5 + 4 * v46;
  v48 = (int8x16_t *)(v6 + v46);
  v49 = 4 * v48->i8[0];
  v50 = (char)*v48;
  v51 = 0;
  v52 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v48, vdupq_n_s8(v17)), 4uLL), v49) & 0x8888888888888888;
  if (v52)
  {
    v53 = 1 << v15;
    do
    {
      v54 = ((__clz(__rbit64(v52)) + (v49 & 0xFC)) >> 2) & 0xF;
      if (v54)
      {
        v55 = *(unsigned int *)(v47 + 4 * v54);
        if (v55 < v14)
          break;
        if (v55 >= v12)
          v56 = v9;
        else
          v56 = v8;
        _X3 = v56 + v55;
        __asm { PRFM            #0, [X3] }
        v114[v51++] = v55;
        --v53;
      }
      v52 &= v52 - 1;
    }
    while (v52 && v53);
  }
  if (((v50 - 1) & 0xF) != 0)
    v59 = 0;
  else
    v59 = 15;
  v60 = v59 + ((v50 - 1) & 0xF);
  v48->i8[0] = v60;
  v48->i8[v60] = v17;
  v61 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v61 + 1;
  *(_DWORD *)(v47 + 4 * v60) = v61;
  if (v51)
  {
    v62 = 0;
    v111 = (_QWORD *)(v9 + v12);
    v110 = (char *)(v8 + v12);
    v63 = (char *)v4 - 3;
    v64 = a3 - 7;
    v106 = a3 - 1;
    v107 = a3 - 3;
    v109 = (_QWORD *)((char *)v4 + 4);
    v108 = v10 + 3;
    v104 = v4 + 1;
    v105 = v9 + 8;
    v65 = 3;
    while (1)
    {
      v66 = v114[v62];
      if (v66 >= v12)
      {
        v73 = (_QWORD *)(v9 + v66);
        if (*(_DWORD *)(v9 + v66 + v65 - 3) != *(_DWORD *)&v63[v65])
          goto LABEL_55;
        if (v64 <= (unint64_t)v4)
        {
          v75 = v4;
        }
        else
        {
          v74 = *v4 ^ *v73;
          if (v74)
          {
            result = __clz(__rbit64(v74)) >> 3;
            goto LABEL_53;
          }
          v76 = 0;
          while (1)
          {
            v75 = &v104[v76];
            if ((unint64_t)&v104[v76] >= v64)
              break;
            v77 = *(_QWORD *)(v105 + v66 + v76 * 8);
            ++v76;
            v78 = *v75 ^ v77;
            if (v78)
            {
              result = v76 * 8 + (__clz(__rbit64(v78)) >> 3);
              goto LABEL_53;
            }
          }
          v73 = (_QWORD *)(v105 + v66 + v76 * 8);
        }
        if ((unint64_t)v75 < v107 && *(_DWORD *)v73 == *(_DWORD *)v75)
        {
          v75 = (_QWORD *)((char *)v75 + 4);
          v73 = (_QWORD *)((char *)v73 + 4);
        }
        if ((unint64_t)v75 < v106 && *(unsigned __int16 *)v73 == *(unsigned __int16 *)v75)
        {
          v75 = (_QWORD *)((char *)v75 + 2);
          v73 = (_QWORD *)((char *)v73 + 2);
        }
        if ((unint64_t)v75 < a3 && *(unsigned __int8 *)v73 == *(unsigned __int8 *)v75)
          v75 = (_QWORD *)((char *)v75 + 1);
        result = (char *)v75 - (char *)v4;
      }
      else
      {
        if (*(_DWORD *)(v8 + v66) != *(_DWORD *)v4)
          goto LABEL_55;
        v67 = a3;
        v68 = v4;
        v69 = v12;
        v70 = v63;
        v71 = sub_1D4B5F19C(v109, (char *)(v8 + v66 + 4), a3, v110, v111);
        v63 = v70;
        v12 = v69;
        v4 = v68;
        v9 = v113;
        a3 = v67;
        result = v71 + 4;
      }
LABEL_53:
      if (result > v65)
      {
        *a4 = v108 - v66;
        v65 = result;
        if ((_QWORD *)((char *)v4 + result) == (_QWORD *)a3)
          return result;
      }
LABEL_55:
      ++v62;
      result = v65;
      if (v62 == v51)
        return result;
    }
  }
  return 3;
}

unint64_t sub_1D4B7A6F8(uint64_t a1, _DWORD *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  char v51;
  char v52;
  int8x16_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  unint64_t result;
  _QWORD *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unsigned int v113;
  _QWORD *v114;
  char *v115;
  _QWORD *v116;
  uint64_t v118;
  _DWORD v119[64];
  uint64_t v120;
  int16x8x2_t v121;

  v4 = a2;
  v120 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 52);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v10 = (_DWORD)a2 - v9;
  v11 = 1 << *(_DWORD *)(a1 + 256);
  v12 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0)
    v14 = (_DWORD)a2 - v9 - v11;
  else
    v14 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 268);
  if (v15 >= 5)
    LOBYTE(v15) = 5;
  v16 = *(_QWORD *)(a1 + 96);
  v118 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 300))
  {
    v17 = ((-1640531535 * *a2) ^ v16) >> (24 - v7);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    v18 = a1 + 64;
    v19 = *(unsigned int *)(a1 + 44);
    v20 = *(_QWORD *)(a1 + 16);
    if (v10 - v19 >= 0x181)
    {
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_QWORD *)(a1 + 112);
      if (v19 <= 0xFFFFFF9F)
      {
        v82 = v19 + 96;
        do
        {
          v83 = ((-1640531535 * *(_DWORD *)(v9 + 8 + v19)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v7);
          v84 = (v83 >> 3) & 0x1FFFFFE0;
          _X19 = v5 + 4 * v84;
          __asm
          {
            PRFM            #0, [X19]
            PRFM            #0, [X19,#0x40]
          }
          _X7 = v6 + v84;
          __asm { PRFM            #0, [X7] }
          v90 = *(unsigned int *)(v18 + 4 * (v19 & 7));
          *(_DWORD *)(v18 + 4 * (v19 & 7)) = v83;
          v91 = (v90 >> 3) & 0x1FFFFFE0;
          v92 = v5 + 4 * v91;
          v93 = (_BYTE *)(v6 + v91);
          if (((*v93 - 1) & 0x1F) != 0)
            v94 = 0;
          else
            v94 = 31;
          v95 = v94 + ((*v93 - 1) & 0x1F);
          *v93 = v95;
          v93[v95] = v90;
          *(_DWORD *)(v92 + 4 * v95) = v19++;
        }
        while (v19 < v82);
        v22 = *(_QWORD *)(a1 + 112);
        v21 = *(_QWORD *)(a1 + 56);
        v9 = v118;
      }
      v96 = v10 - 32;
      LODWORD(v19) = v10 - 32;
      v97 = (_DWORD)v4 + 1 - (v9 + v96);
      if ((v97 + 1) < 8)
        v98 = v97 + 1;
      else
        v98 = 8;
      if ((unint64_t)v4 + 1 >= v9 + v96)
        v99 = v98;
      else
        v99 = 0;
      if (v96 < v99 + (int)v96)
      {
        v100 = *(_DWORD *)(a1 + 96);
        v101 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          v102 = ((-1640531535 * *(_DWORD *)(v9 + v96)) ^ v100) >> v101;
          v103 = (v102 >> 3) & 0x1FFFFFE0;
          _X22 = v22 + 4 * v103;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x40]
          }
          _X20 = v21 + v103;
          __asm { PRFM            #0, [X20] }
          *(_DWORD *)(a1 + 4 * (v96++ & 7) + 64) = v102;
          --v99;
        }
        while (v99);
      }
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_QWORD *)(a1 + 112);
    }
    if (v19 < v10)
    {
      v23 = *(_QWORD *)(a1 + 8) + 8;
      v24 = 24 - *(_DWORD *)(a1 + 52);
      v19 = v19;
      do
      {
        v25 = ((-1640531535 * *(_DWORD *)(v23 + v19)) ^ *(_DWORD *)(a1 + 96)) >> v24;
        v26 = (v25 >> 3) & 0x1FFFFFE0;
        _X22 = v22 + 4 * v26;
        __asm
        {
          PRFM            #0, [X22]
          PRFM            #0, [X22,#0x40]
        }
        _X20 = v21 + v26;
        __asm { PRFM            #0, [X20] }
        v35 = *(unsigned int *)(v18 + 4 * (v19 & 7));
        *(_DWORD *)(v18 + 4 * (v19 & 7)) = v25;
        v36 = (v35 >> 3) & 0x1FFFFFE0;
        v37 = v22 + 4 * v36;
        v38 = (_BYTE *)(v21 + v36);
        if (((*v38 - 1) & 0x1F) != 0)
          v39 = 0;
        else
          v39 = 31;
        v40 = v39 + ((*v38 - 1) & 0x1F);
        *v38 = v40;
        v38[v40] = v35;
        *(_DWORD *)(v37 + 4 * v40) = v19++;
      }
      while (v19 < v10);
    }
    *(_DWORD *)(a1 + 44) = v10;
    v41 = ((-1640531535 * *(_DWORD *)(v9 + v10 + 8)) ^ v16) >> (24 - v7);
    v42 = (v41 >> 3) & 0x1FFFFFE0;
    _X17 = v5 + 4 * v42;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X17,#0x40]
    }
    _X14 = v6 + v42;
    __asm { PRFM            #0, [X14] }
    v17 = *(_DWORD *)(v18 + 4 * (v10 & 7));
    *(_DWORD *)(v18 + 4 * (v10 & 7)) = v41;
    v8 = v20;
  }
  *(_DWORD *)(a1 + 104) += v17;
  v48 = (v17 >> 3) & 0x1FFFFFE0;
  v49 = v5 + 4 * v48;
  v50 = (__int16 *)(v6 + v48);
  v121 = vld2q_s16(v50);
  v51 = *(_BYTE *)v50;
  v52 = 2 * *(_BYTE *)v50;
  v53 = vdupq_n_s8(v17);
  v54 = 0;
  v55 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v53, (int8x16_t)v121.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v53, (int8x16_t)v121.val[1]), 6uLL), 4uLL), v52) & 0x5555555555555555;
  if (v55)
  {
    v56 = 1 << v15;
    do
    {
      v57 = ((__clz(__rbit64(v55)) + (v52 & 0xFE)) >> 1) & 0x1F;
      if (v57)
      {
        v58 = *(unsigned int *)(v49 + 4 * v57);
        if (v58 < v14)
          break;
        if (v58 >= v12)
          v59 = v9;
        else
          v59 = v8;
        _X3 = v59 + v58;
        __asm { PRFM            #0, [X3] }
        v119[v54++] = v58;
        --v56;
      }
      v55 &= v55 - 1;
    }
    while (v55 && v56);
  }
  if (((v51 - 1) & 0x1F) != 0)
    v62 = 0;
  else
    v62 = 31;
  v63 = v62 + ((v51 - 1) & 0x1F);
  *(_BYTE *)v50 = v63;
  *((_BYTE *)v50 + v63) = v17;
  v64 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v64 + 1;
  *(_DWORD *)(v49 + 4 * v63) = v64;
  if (v54)
  {
    v65 = 0;
    v116 = (_QWORD *)(v9 + v12);
    v115 = (char *)(v8 + v12);
    v66 = (char *)v4 - 3;
    v67 = a3 - 7;
    v111 = a3 - 1;
    v112 = a3 - 3;
    v114 = (_QWORD *)((char *)v4 + 4);
    v113 = v10 + 3;
    v109 = v4 + 1;
    v110 = v9 + 8;
    v68 = 3;
    while (1)
    {
      v69 = v119[v65];
      if (v69 >= v12)
      {
        v76 = (_QWORD *)(v9 + v69);
        if (*(_DWORD *)(v9 + v69 + v68 - 3) != *(_DWORD *)&v66[v68])
          goto LABEL_55;
        if (v67 <= (unint64_t)v4)
        {
          v78 = v4;
        }
        else
        {
          v77 = *v4 ^ *v76;
          if (v77)
          {
            result = __clz(__rbit64(v77)) >> 3;
            goto LABEL_53;
          }
          v79 = 0;
          while (1)
          {
            v78 = &v109[v79];
            if ((unint64_t)&v109[v79] >= v67)
              break;
            v80 = *(_QWORD *)(v110 + v69 + v79 * 8);
            ++v79;
            v81 = *v78 ^ v80;
            if (v81)
            {
              result = v79 * 8 + (__clz(__rbit64(v81)) >> 3);
              goto LABEL_53;
            }
          }
          v76 = (_QWORD *)(v110 + v69 + v79 * 8);
        }
        if ((unint64_t)v78 < v112 && *(_DWORD *)v76 == *(_DWORD *)v78)
        {
          v78 = (_QWORD *)((char *)v78 + 4);
          v76 = (_QWORD *)((char *)v76 + 4);
        }
        if ((unint64_t)v78 < v111 && *(unsigned __int16 *)v76 == *(unsigned __int16 *)v78)
        {
          v78 = (_QWORD *)((char *)v78 + 2);
          v76 = (_QWORD *)((char *)v76 + 2);
        }
        if ((unint64_t)v78 < a3 && *(unsigned __int8 *)v76 == *(unsigned __int8 *)v78)
          v78 = (_QWORD *)((char *)v78 + 1);
        result = (char *)v78 - (char *)v4;
      }
      else
      {
        if (*(_DWORD *)(v8 + v69) != *(_DWORD *)v4)
          goto LABEL_55;
        v70 = a3;
        v71 = v4;
        v72 = v12;
        v73 = v66;
        v74 = sub_1D4B5F19C(v114, (char *)(v8 + v69 + 4), a3, v115, v116);
        v66 = v73;
        v12 = v72;
        v4 = v71;
        v9 = v118;
        a3 = v70;
        result = v74 + 4;
      }
LABEL_53:
      if (result > v68)
      {
        *a4 = v113 - v69;
        v68 = result;
        if ((_QWORD *)((char *)v4 + result) == (_QWORD *)a3)
          return result;
      }
LABEL_55:
      ++v65;
      result = v68;
      if (v65 == v54)
        return result;
    }
  }
  return 3;
}

unint64_t sub_1D4B7AD0C(uint64_t a1, _DWORD *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  int8x16_t v54;
  int8x8_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  unint64_t result;
  _QWORD *v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  unsigned int v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  _QWORD *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int v117;
  _QWORD *v118;
  char *v119;
  _QWORD *v120;
  uint64_t v122;
  _DWORD v123[64];
  uint64_t v124;
  int8x16x4_t v125;

  v4 = a2;
  v124 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 52);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v10 = (_DWORD)a2 - v9;
  v11 = 1 << *(_DWORD *)(a1 + 256);
  v12 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0)
    v14 = (_DWORD)a2 - v9 - v11;
  else
    v14 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 268);
  if (v15 >= 6)
    LOBYTE(v15) = 6;
  v16 = *(_QWORD *)(a1 + 96);
  v122 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 300))
  {
    v17 = ((-1640531535 * *a2) ^ v16) >> (24 - v7);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    v18 = a1 + 64;
    v19 = *(unsigned int *)(a1 + 44);
    v20 = *(_QWORD *)(a1 + 16);
    if (v10 - v19 >= 0x181)
    {
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_QWORD *)(a1 + 112);
      if (v19 <= 0xFFFFFF9F)
      {
        v84 = v19 + 96;
        do
        {
          v85 = ((-1640531535 * *(_DWORD *)(v9 + 8 + v19)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v7);
          v86 = (v85 >> 2) & 0x3FFFFFC0;
          _X19 = v5 + 4 * v86;
          __asm
          {
            PRFM            #0, [X19]
            PRFM            #0, [X19,#0x40]
          }
          _X7 = v6 + v86;
          __asm
          {
            PRFM            #0, [X7]
            PRFM            #0, [X7,#0x20]
          }
          v93 = *(unsigned int *)(v18 + 4 * (v19 & 7));
          *(_DWORD *)(v18 + 4 * (v19 & 7)) = v85;
          v94 = (v93 >> 2) & 0x3FFFFFC0;
          v95 = v5 + 4 * v94;
          v96 = (_BYTE *)(v6 + v94);
          if (((*v96 - 1) & 0x3F) != 0)
            v97 = 0;
          else
            v97 = 63;
          v98 = v97 + ((*v96 - 1) & 0x3F);
          *v96 = v98;
          v96[v98] = v93;
          *(_DWORD *)(v95 + 4 * v98) = v19++;
        }
        while (v19 < v84);
        v22 = *(_QWORD *)(a1 + 112);
        v21 = *(_QWORD *)(a1 + 56);
        v9 = v122;
      }
      v99 = v10 - 32;
      LODWORD(v19) = v10 - 32;
      v100 = (_DWORD)v4 + 1 - (v9 + v99);
      if ((v100 + 1) < 8)
        v101 = v100 + 1;
      else
        v101 = 8;
      if ((unint64_t)v4 + 1 >= v9 + v99)
        v102 = v101;
      else
        v102 = 0;
      if (v99 < v102 + (int)v99)
      {
        v103 = *(_DWORD *)(a1 + 96);
        v104 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          v105 = ((-1640531535 * *(_DWORD *)(v9 + v99)) ^ v103) >> v104;
          v106 = (v105 >> 2) & 0x3FFFFFC0;
          _X22 = v22 + 4 * v106;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x40]
          }
          _X20 = v21 + v106;
          __asm
          {
            PRFM            #0, [X20]
            PRFM            #0, [X20,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v99++ & 7) + 64) = v105;
          --v102;
        }
        while (v102);
      }
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_QWORD *)(a1 + 112);
    }
    if (v19 < v10)
    {
      v23 = *(_QWORD *)(a1 + 8) + 8;
      v24 = 24 - *(_DWORD *)(a1 + 52);
      v19 = v19;
      do
      {
        v25 = ((-1640531535 * *(_DWORD *)(v23 + v19)) ^ *(_DWORD *)(a1 + 96)) >> v24;
        v26 = (v25 >> 2) & 0x3FFFFFC0;
        _X22 = v22 + 4 * v26;
        __asm
        {
          PRFM            #0, [X22]
          PRFM            #0, [X22,#0x40]
        }
        _X20 = v21 + v26;
        __asm
        {
          PRFM            #0, [X20]
          PRFM            #0, [X20,#0x20]
        }
        v36 = *(unsigned int *)(v18 + 4 * (v19 & 7));
        *(_DWORD *)(v18 + 4 * (v19 & 7)) = v25;
        v37 = (v36 >> 2) & 0x3FFFFFC0;
        v38 = v22 + 4 * v37;
        v39 = (_BYTE *)(v21 + v37);
        if (((*v39 - 1) & 0x3F) != 0)
          v40 = 0;
        else
          v40 = 63;
        v41 = v40 + ((*v39 - 1) & 0x3F);
        *v39 = v41;
        v39[v41] = v36;
        *(_DWORD *)(v38 + 4 * v41) = v19++;
      }
      while (v19 < v10);
    }
    *(_DWORD *)(a1 + 44) = v10;
    v42 = ((-1640531535 * *(_DWORD *)(v9 + v10 + 8)) ^ v16) >> (24 - v7);
    v43 = (v42 >> 2) & 0x3FFFFFC0;
    _X17 = v5 + 4 * v43;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X17,#0x40]
    }
    _X14 = v6 + v43;
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X14,#0x20]
    }
    v17 = *(_DWORD *)(v18 + 4 * (v10 & 7));
    *(_DWORD *)(v18 + 4 * (v10 & 7)) = v42;
    v8 = v20;
  }
  *(_DWORD *)(a1 + 104) += v17;
  v50 = (v17 >> 2) & 0x3FFFFFC0;
  v51 = v5 + 4 * v50;
  v52 = (char *)(v6 + v50);
  v53 = *v52;
  v125 = vld4q_s8(v52);
  v54 = vdupq_n_s8(v17);
  v125.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v125.val[3], v54), vceqq_s8(v125.val[2], v54), 1uLL), vsriq_n_s8(vceqq_s8(v125.val[1], v54), vceqq_s8(v125.val[0], v54), 1uLL), 2uLL);
  v55 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v125.val[0], v125.val[0], 4uLL), 4uLL);
  v56 = 0;
  if (v55)
  {
    v57 = 1 << v15;
    v58 = __ROR8__(*(_QWORD *)&v55, v53);
    do
    {
      v59 = (__clz(__rbit64(v58)) + v53) & 0x3F;
      if (v59)
      {
        v60 = *(unsigned int *)(v51 + 4 * v59);
        if (v60 < v14)
          break;
        if (v60 >= v12)
          v61 = v9;
        else
          v61 = v8;
        _X1 = v61 + v60;
        __asm { PRFM            #0, [X1] }
        v123[v56++] = v60;
        --v57;
      }
      v58 &= v58 - 1;
    }
    while (v58 && v57);
  }
  if (((v53 - 1) & 0x3F) != 0)
    v64 = 0;
  else
    v64 = 63;
  v65 = v64 + ((v53 - 1) & 0x3F);
  *v52 = v65;
  v52[v65] = v17;
  v66 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v66 + 1;
  *(_DWORD *)(v51 + 4 * v65) = v66;
  if (v56)
  {
    v67 = 0;
    v120 = (_QWORD *)(v9 + v12);
    v119 = (char *)(v8 + v12);
    v68 = (char *)v4 - 3;
    v69 = a3 - 7;
    v115 = a3 - 1;
    v116 = a3 - 3;
    v118 = (_QWORD *)((char *)v4 + 4);
    v117 = v10 + 3;
    v113 = v4 + 1;
    v114 = v9 + 8;
    v70 = 3;
    while (1)
    {
      v71 = v123[v67];
      if (v71 >= v12)
      {
        v78 = (_QWORD *)(v9 + v71);
        if (*(_DWORD *)(v9 + v71 + v70 - 3) != *(_DWORD *)&v68[v70])
          goto LABEL_55;
        if (v69 <= (unint64_t)v4)
        {
          v80 = v4;
        }
        else
        {
          v79 = *v4 ^ *v78;
          if (v79)
          {
            result = __clz(__rbit64(v79)) >> 3;
            goto LABEL_53;
          }
          v81 = 0;
          while (1)
          {
            v80 = &v113[v81];
            if ((unint64_t)&v113[v81] >= v69)
              break;
            v82 = *(_QWORD *)(v114 + v71 + v81 * 8);
            ++v81;
            v83 = *v80 ^ v82;
            if (v83)
            {
              result = v81 * 8 + (__clz(__rbit64(v83)) >> 3);
              goto LABEL_53;
            }
          }
          v78 = (_QWORD *)(v114 + v71 + v81 * 8);
        }
        if ((unint64_t)v80 < v116 && *(_DWORD *)v78 == *(_DWORD *)v80)
        {
          v80 = (_QWORD *)((char *)v80 + 4);
          v78 = (_QWORD *)((char *)v78 + 4);
        }
        if ((unint64_t)v80 < v115 && *(unsigned __int16 *)v78 == *(unsigned __int16 *)v80)
        {
          v80 = (_QWORD *)((char *)v80 + 2);
          v78 = (_QWORD *)((char *)v78 + 2);
        }
        if ((unint64_t)v80 < a3 && *(unsigned __int8 *)v78 == *(unsigned __int8 *)v80)
          v80 = (_QWORD *)((char *)v80 + 1);
        result = (char *)v80 - (char *)v4;
      }
      else
      {
        if (*(_DWORD *)(v8 + v71) != *(_DWORD *)v4)
          goto LABEL_55;
        v72 = a3;
        v73 = v4;
        v74 = v12;
        v75 = v68;
        v76 = sub_1D4B5F19C(v118, (char *)(v8 + v71 + 4), a3, v119, v120);
        v68 = v75;
        v12 = v74;
        v4 = v73;
        v9 = v122;
        a3 = v72;
        result = v76 + 4;
      }
LABEL_53:
      if (result > v70)
      {
        *a4 = v117 - v71;
        v70 = result;
        if ((_QWORD *)((char *)v4 + result) == (_QWORD *)a3)
          return result;
      }
LABEL_55:
      ++v67;
      result = v70;
      if (v67 == v56)
        return result;
    }
  }
  return 3;
}

unint64_t sub_1D4B7B334(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v45;
  uint64_t v46;
  int8x16_t *v47;
  char v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  unint64_t result;
  _QWORD *v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int v107;
  _QWORD *v108;
  char *v109;
  _QWORD *v110;
  uint64_t v112;
  _DWORD v113[64];
  uint64_t v114;

  v4 = a2;
  v114 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 52);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v10 = (_DWORD)a2 - v9;
  v11 = 1 << *(_DWORD *)(a1 + 256);
  v12 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0)
    v14 = (_DWORD)a2 - v9 - v11;
  else
    v14 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 268);
  if (v15 >= 4)
    LOBYTE(v15) = 4;
  v16 = *(_QWORD *)(a1 + 96);
  v112 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 300))
  {
    _X14 = ((0xCF1BBCDCBB000000 * *a2) ^ v16) >> (56 - v7);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    v18 = a1 + 64;
    v19 = *(unsigned int *)(a1 + 44);
    v20 = *(_QWORD *)(a1 + 16);
    if (v10 - v19 >= 0x181)
    {
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_QWORD *)(a1 + 112);
      if (v19 <= 0xFFFFFF9F)
      {
        v78 = v19 + 96;
        do
        {
          v79 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + 8 + v19)) ^ *(_QWORD *)(a1 + 96)) >> (56 - v7);
          v80 = (v79 >> 4) & 0xFFFFFF0;
          _X19 = v5 + 4 * v80;
          __asm { PRFM            #0, [X19] }
          _X7 = v6 + v80;
          __asm { PRFM            #0, [X7] }
          v85 = *(unsigned int *)(v18 + 4 * (v19 & 7));
          *(_DWORD *)(v18 + 4 * (v19 & 7)) = v79;
          v86 = (v85 >> 4) & 0xFFFFFF0;
          v87 = v5 + 4 * v86;
          v88 = (_BYTE *)(v6 + v86);
          if (((*v88 - 1) & 0xF) != 0)
            v89 = 0;
          else
            v89 = 15;
          v90 = v89 + ((*v88 - 1) & 0xF);
          *v88 = v90;
          v88[v90] = v85;
          *(_DWORD *)(v87 + 4 * v90) = v19++;
        }
        while (v19 < v78);
        v22 = *(_QWORD *)(a1 + 112);
        v21 = *(_QWORD *)(a1 + 56);
        v9 = v112;
      }
      v91 = v10 - 32;
      LODWORD(v19) = v10 - 32;
      v92 = (_DWORD)v4 + 1 - (v9 + v91);
      if ((v92 + 1) < 8)
        v93 = v92 + 1;
      else
        v93 = 8;
      if ((unint64_t)v4 + 1 >= v9 + v91)
        v94 = v93;
      else
        v94 = 0;
      if (v91 < v94 + (int)v91)
      {
        v95 = *(_QWORD *)(a1 + 96);
        v96 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v97 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v91)) ^ v95) >> v96;
          v98 = (v97 >> 4) & 0xFFFFFF0;
          _X22 = v22 + 4 * v98;
          __asm { PRFM            #0, [X22] }
          _X20 = v21 + v98;
          __asm { PRFM            #0, [X20] }
          *(_DWORD *)(a1 + 4 * (v91++ & 7) + 64) = v97;
          --v94;
        }
        while (v94);
      }
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_QWORD *)(a1 + 112);
    }
    if (v19 < v10)
    {
      v23 = *(_QWORD *)(a1 + 8) + 8;
      v24 = 56 - *(_DWORD *)(a1 + 52);
      v19 = v19;
      do
      {
        v25 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v23 + v19)) ^ *(_QWORD *)(a1 + 96)) >> v24;
        v26 = (v25 >> 4) & 0xFFFFFF0;
        _X22 = v22 + 4 * v26;
        __asm { PRFM            #0, [X22] }
        _X20 = v21 + v26;
        __asm { PRFM            #0, [X20] }
        v34 = *(unsigned int *)(v18 + 4 * (v19 & 7));
        *(_DWORD *)(v18 + 4 * (v19 & 7)) = v25;
        v35 = (v34 >> 4) & 0xFFFFFF0;
        v36 = v22 + 4 * v35;
        v37 = (_BYTE *)(v21 + v35);
        if (((*v37 - 1) & 0xF) != 0)
          v38 = 0;
        else
          v38 = 15;
        v39 = v38 + ((*v37 - 1) & 0xF);
        *v37 = v39;
        v37[v39] = v34;
        *(_DWORD *)(v36 + 4 * v39) = v19++;
      }
      while (v19 < v10);
    }
    *(_DWORD *)(a1 + 44) = v10;
    v40 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v10 + 8)) ^ v16) >> (56 - v7);
    v41 = (v40 >> 4) & 0xFFFFFF0;
    _X17 = v5 + 4 * v41;
    __asm { PRFM            #0, [X17] }
    _X14 = v6 + v41;
    __asm { PRFM            #0, [X14] }
    LODWORD(_X14) = *(_DWORD *)(v18 + 4 * (v10 & 7));
    *(_DWORD *)(v18 + 4 * (v10 & 7)) = v40;
    v8 = v20;
  }
  *(_DWORD *)(a1 + 104) += _X14;
  v45 = (_X14 >> 4) & 0xFFFFFF0;
  v46 = v5 + 4 * v45;
  v47 = (int8x16_t *)(v6 + v45);
  v48 = 4 * v47->i8[0];
  v49 = (char)*v47;
  v50 = 0;
  v51 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v47, vdupq_n_s8(_X14)), 4uLL), v48) & 0x8888888888888888;
  if (v51)
  {
    v52 = 1 << v15;
    do
    {
      v53 = ((__clz(__rbit64(v51)) + (v48 & 0xFC)) >> 2) & 0xF;
      if (v53)
      {
        v54 = *(unsigned int *)(v46 + 4 * v53);
        if (v54 < v14)
          break;
        if (v54 >= v12)
          v55 = v9;
        else
          v55 = v8;
        _X3 = v55 + v54;
        __asm { PRFM            #0, [X3] }
        v113[v50++] = v54;
        --v52;
      }
      v51 &= v51 - 1;
    }
    while (v51 && v52);
  }
  if (((v49 - 1) & 0xF) != 0)
    v58 = 0;
  else
    v58 = 15;
  v59 = v58 + ((v49 - 1) & 0xF);
  v47->i8[0] = v59;
  v47->i8[v59] = _X14;
  v60 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v60 + 1;
  *(_DWORD *)(v46 + 4 * v59) = v60;
  if (v50)
  {
    v61 = 0;
    v110 = (_QWORD *)(v9 + v12);
    v109 = (char *)(v8 + v12);
    v62 = (char *)v4 - 3;
    v63 = a3 - 7;
    v105 = a3 - 1;
    v106 = a3 - 3;
    v108 = (_QWORD *)((char *)v4 + 4);
    v107 = v10 + 3;
    v103 = v4 + 1;
    v104 = v9 + 8;
    v64 = 3;
    while (1)
    {
      v65 = v113[v61];
      if (v65 >= v12)
      {
        v72 = (_QWORD *)(v9 + v65);
        if (*(_DWORD *)(v9 + v65 + v64 - 3) != *(_DWORD *)&v62[v64])
          goto LABEL_55;
        if (v63 <= (unint64_t)v4)
        {
          v74 = v4;
        }
        else
        {
          v73 = *v4 ^ *v72;
          if (v73)
          {
            result = __clz(__rbit64(v73)) >> 3;
            goto LABEL_53;
          }
          v75 = 0;
          while (1)
          {
            v74 = &v103[v75];
            if ((unint64_t)&v103[v75] >= v63)
              break;
            v76 = *(_QWORD *)(v104 + v65 + v75 * 8);
            ++v75;
            v77 = *v74 ^ v76;
            if (v77)
            {
              result = v75 * 8 + (__clz(__rbit64(v77)) >> 3);
              goto LABEL_53;
            }
          }
          v72 = (_QWORD *)(v104 + v65 + v75 * 8);
        }
        if ((unint64_t)v74 < v106 && *(_DWORD *)v72 == *(_DWORD *)v74)
        {
          v74 = (_QWORD *)((char *)v74 + 4);
          v72 = (_QWORD *)((char *)v72 + 4);
        }
        if ((unint64_t)v74 < v105 && *(unsigned __int16 *)v72 == *(unsigned __int16 *)v74)
        {
          v74 = (_QWORD *)((char *)v74 + 2);
          v72 = (_QWORD *)((char *)v72 + 2);
        }
        if ((unint64_t)v74 < a3 && *(unsigned __int8 *)v72 == *(unsigned __int8 *)v74)
          v74 = (_QWORD *)((char *)v74 + 1);
        result = (char *)v74 - (char *)v4;
      }
      else
      {
        if (*(_DWORD *)(v8 + v65) != *(_DWORD *)v4)
          goto LABEL_55;
        v66 = a3;
        v67 = v4;
        v68 = v12;
        v69 = v62;
        v70 = sub_1D4B5F19C(v108, (char *)(v8 + v65 + 4), a3, v109, v110);
        v62 = v69;
        v12 = v68;
        v4 = v67;
        v9 = v112;
        a3 = v66;
        result = v70 + 4;
      }
LABEL_53:
      if (result > v64)
      {
        *a4 = v107 - v65;
        v64 = result;
        if ((_QWORD *)((char *)v4 + result) == (_QWORD *)a3)
          return result;
      }
LABEL_55:
      ++v61;
      result = v64;
      if (v61 == v50)
        return result;
    }
  }
  return 3;
}

unint64_t sub_1D4B7B938(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v47;
  uint64_t v48;
  __int16 *v49;
  char v50;
  char v51;
  int8x16_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  unint64_t result;
  _QWORD *v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unsigned int v112;
  _QWORD *v113;
  char *v114;
  _QWORD *v115;
  uint64_t v117;
  _DWORD v118[64];
  uint64_t v119;
  int16x8x2_t v120;

  v4 = a2;
  v119 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 52);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v10 = (_DWORD)a2 - v9;
  v11 = 1 << *(_DWORD *)(a1 + 256);
  v12 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0)
    v14 = (_DWORD)a2 - v9 - v11;
  else
    v14 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 268);
  if (v15 >= 5)
    LOBYTE(v15) = 5;
  v16 = *(_QWORD *)(a1 + 96);
  v117 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 300))
  {
    _X14 = ((0xCF1BBCDCBB000000 * *a2) ^ v16) >> (56 - v7);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    v18 = a1 + 64;
    v19 = *(unsigned int *)(a1 + 44);
    v20 = *(_QWORD *)(a1 + 16);
    if (v10 - v19 >= 0x181)
    {
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_QWORD *)(a1 + 112);
      if (v19 <= 0xFFFFFF9F)
      {
        v81 = v19 + 96;
        do
        {
          v82 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + 8 + v19)) ^ *(_QWORD *)(a1 + 96)) >> (56 - v7);
          v83 = (v82 >> 3) & 0x1FFFFFE0;
          _X19 = v5 + 4 * v83;
          __asm
          {
            PRFM            #0, [X19]
            PRFM            #0, [X19,#0x40]
          }
          _X7 = v6 + v83;
          __asm { PRFM            #0, [X7] }
          v89 = *(unsigned int *)(v18 + 4 * (v19 & 7));
          *(_DWORD *)(v18 + 4 * (v19 & 7)) = v82;
          v90 = (v89 >> 3) & 0x1FFFFFE0;
          v91 = v5 + 4 * v90;
          v92 = (_BYTE *)(v6 + v90);
          if (((*v92 - 1) & 0x1F) != 0)
            v93 = 0;
          else
            v93 = 31;
          v94 = v93 + ((*v92 - 1) & 0x1F);
          *v92 = v94;
          v92[v94] = v89;
          *(_DWORD *)(v91 + 4 * v94) = v19++;
        }
        while (v19 < v81);
        v22 = *(_QWORD *)(a1 + 112);
        v21 = *(_QWORD *)(a1 + 56);
        v9 = v117;
      }
      v95 = v10 - 32;
      LODWORD(v19) = v10 - 32;
      v96 = (_DWORD)v4 + 1 - (v9 + v95);
      if ((v96 + 1) < 8)
        v97 = v96 + 1;
      else
        v97 = 8;
      if ((unint64_t)v4 + 1 >= v9 + v95)
        v98 = v97;
      else
        v98 = 0;
      if (v95 < v98 + (int)v95)
      {
        v99 = *(_QWORD *)(a1 + 96);
        v100 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v101 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v95)) ^ v99) >> v100;
          v102 = (v101 >> 3) & 0x1FFFFFE0;
          _X22 = v22 + 4 * v102;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x40]
          }
          _X20 = v21 + v102;
          __asm { PRFM            #0, [X20] }
          *(_DWORD *)(a1 + 4 * (v95++ & 7) + 64) = v101;
          --v98;
        }
        while (v98);
      }
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_QWORD *)(a1 + 112);
    }
    if (v19 < v10)
    {
      v23 = *(_QWORD *)(a1 + 8) + 8;
      v24 = 56 - *(_DWORD *)(a1 + 52);
      v19 = v19;
      do
      {
        v25 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v23 + v19)) ^ *(_QWORD *)(a1 + 96)) >> v24;
        v26 = (v25 >> 3) & 0x1FFFFFE0;
        _X22 = v22 + 4 * v26;
        __asm
        {
          PRFM            #0, [X22]
          PRFM            #0, [X22,#0x40]
        }
        _X20 = v21 + v26;
        __asm { PRFM            #0, [X20] }
        v35 = *(unsigned int *)(v18 + 4 * (v19 & 7));
        *(_DWORD *)(v18 + 4 * (v19 & 7)) = v25;
        v36 = (v35 >> 3) & 0x1FFFFFE0;
        v37 = v22 + 4 * v36;
        v38 = (_BYTE *)(v21 + v36);
        if (((*v38 - 1) & 0x1F) != 0)
          v39 = 0;
        else
          v39 = 31;
        v40 = v39 + ((*v38 - 1) & 0x1F);
        *v38 = v40;
        v38[v40] = v35;
        *(_DWORD *)(v37 + 4 * v40) = v19++;
      }
      while (v19 < v10);
    }
    *(_DWORD *)(a1 + 44) = v10;
    v41 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v10 + 8)) ^ v16) >> (56 - v7);
    v42 = (v41 >> 3) & 0x1FFFFFE0;
    _X17 = v5 + 4 * v42;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X17,#0x40]
    }
    _X14 = v6 + v42;
    __asm { PRFM            #0, [X14] }
    LODWORD(_X14) = *(_DWORD *)(v18 + 4 * (v10 & 7));
    *(_DWORD *)(v18 + 4 * (v10 & 7)) = v41;
    v8 = v20;
  }
  *(_DWORD *)(a1 + 104) += _X14;
  v47 = (_X14 >> 3) & 0x1FFFFFE0;
  v48 = v5 + 4 * v47;
  v49 = (__int16 *)(v6 + v47);
  v120 = vld2q_s16(v49);
  v50 = *(_BYTE *)v49;
  v51 = 2 * *(_BYTE *)v49;
  v52 = vdupq_n_s8(_X14);
  v53 = 0;
  v54 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v52, (int8x16_t)v120.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v52, (int8x16_t)v120.val[1]), 6uLL), 4uLL), v51) & 0x5555555555555555;
  if (v54)
  {
    v55 = 1 << v15;
    do
    {
      v56 = ((__clz(__rbit64(v54)) + (v51 & 0xFE)) >> 1) & 0x1F;
      if (v56)
      {
        v57 = *(unsigned int *)(v48 + 4 * v56);
        if (v57 < v14)
          break;
        if (v57 >= v12)
          v58 = v9;
        else
          v58 = v8;
        _X3 = v58 + v57;
        __asm { PRFM            #0, [X3] }
        v118[v53++] = v57;
        --v55;
      }
      v54 &= v54 - 1;
    }
    while (v54 && v55);
  }
  if (((v50 - 1) & 0x1F) != 0)
    v61 = 0;
  else
    v61 = 31;
  v62 = v61 + ((v50 - 1) & 0x1F);
  *(_BYTE *)v49 = v62;
  *((_BYTE *)v49 + v62) = _X14;
  v63 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v63 + 1;
  *(_DWORD *)(v48 + 4 * v62) = v63;
  if (v53)
  {
    v64 = 0;
    v115 = (_QWORD *)(v9 + v12);
    v114 = (char *)(v8 + v12);
    v65 = (char *)v4 - 3;
    v66 = a3 - 7;
    v110 = a3 - 1;
    v111 = a3 - 3;
    v113 = (_QWORD *)((char *)v4 + 4);
    v112 = v10 + 3;
    v108 = v4 + 1;
    v109 = v9 + 8;
    v67 = 3;
    while (1)
    {
      v68 = v118[v64];
      if (v68 >= v12)
      {
        v75 = (_QWORD *)(v9 + v68);
        if (*(_DWORD *)(v9 + v68 + v67 - 3) != *(_DWORD *)&v65[v67])
          goto LABEL_55;
        if (v66 <= (unint64_t)v4)
        {
          v77 = v4;
        }
        else
        {
          v76 = *v4 ^ *v75;
          if (v76)
          {
            result = __clz(__rbit64(v76)) >> 3;
            goto LABEL_53;
          }
          v78 = 0;
          while (1)
          {
            v77 = &v108[v78];
            if ((unint64_t)&v108[v78] >= v66)
              break;
            v79 = *(_QWORD *)(v109 + v68 + v78 * 8);
            ++v78;
            v80 = *v77 ^ v79;
            if (v80)
            {
              result = v78 * 8 + (__clz(__rbit64(v80)) >> 3);
              goto LABEL_53;
            }
          }
          v75 = (_QWORD *)(v109 + v68 + v78 * 8);
        }
        if ((unint64_t)v77 < v111 && *(_DWORD *)v75 == *(_DWORD *)v77)
        {
          v77 = (_QWORD *)((char *)v77 + 4);
          v75 = (_QWORD *)((char *)v75 + 4);
        }
        if ((unint64_t)v77 < v110 && *(unsigned __int16 *)v75 == *(unsigned __int16 *)v77)
        {
          v77 = (_QWORD *)((char *)v77 + 2);
          v75 = (_QWORD *)((char *)v75 + 2);
        }
        if ((unint64_t)v77 < a3 && *(unsigned __int8 *)v75 == *(unsigned __int8 *)v77)
          v77 = (_QWORD *)((char *)v77 + 1);
        result = (char *)v77 - (char *)v4;
      }
      else
      {
        if (*(_DWORD *)(v8 + v68) != *(_DWORD *)v4)
          goto LABEL_55;
        v69 = a3;
        v70 = v4;
        v71 = v12;
        v72 = v65;
        v73 = sub_1D4B5F19C(v113, (char *)(v8 + v68 + 4), a3, v114, v115);
        v65 = v72;
        v12 = v71;
        v4 = v70;
        v9 = v117;
        a3 = v69;
        result = v73 + 4;
      }
LABEL_53:
      if (result > v67)
      {
        *a4 = v112 - v68;
        v67 = result;
        if ((_QWORD *)((char *)v4 + result) == (_QWORD *)a3)
          return result;
      }
LABEL_55:
      ++v64;
      result = v67;
      if (v64 == v53)
        return result;
    }
  }
  return 3;
}

unint64_t sub_1D4B7BF54(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char v52;
  int8x16_t v53;
  int8x8_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  unint64_t result;
  _QWORD *v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unsigned int v116;
  _QWORD *v117;
  char *v118;
  _QWORD *v119;
  uint64_t v121;
  _DWORD v122[64];
  uint64_t v123;
  int8x16x4_t v124;

  v4 = a2;
  v123 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 52);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v10 = (_DWORD)a2 - v9;
  v11 = 1 << *(_DWORD *)(a1 + 256);
  v12 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0)
    v14 = (_DWORD)a2 - v9 - v11;
  else
    v14 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 268);
  if (v15 >= 6)
    LOBYTE(v15) = 6;
  v16 = *(_QWORD *)(a1 + 96);
  v121 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 300))
  {
    _X14 = ((0xCF1BBCDCBB000000 * *a2) ^ v16) >> (56 - v7);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    v18 = a1 + 64;
    v19 = *(unsigned int *)(a1 + 44);
    v20 = *(_QWORD *)(a1 + 16);
    if (v10 - v19 >= 0x181)
    {
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_QWORD *)(a1 + 112);
      if (v19 <= 0xFFFFFF9F)
      {
        v83 = v19 + 96;
        do
        {
          v84 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + 8 + v19)) ^ *(_QWORD *)(a1 + 96)) >> (56 - v7);
          v85 = (v84 >> 2) & 0x3FFFFFC0;
          _X19 = v5 + 4 * v85;
          __asm
          {
            PRFM            #0, [X19]
            PRFM            #0, [X19,#0x40]
          }
          _X7 = v6 + v85;
          __asm
          {
            PRFM            #0, [X7]
            PRFM            #0, [X7,#0x20]
          }
          v92 = *(unsigned int *)(v18 + 4 * (v19 & 7));
          *(_DWORD *)(v18 + 4 * (v19 & 7)) = v84;
          v93 = (v92 >> 2) & 0x3FFFFFC0;
          v94 = v5 + 4 * v93;
          v95 = (_BYTE *)(v6 + v93);
          if (((*v95 - 1) & 0x3F) != 0)
            v96 = 0;
          else
            v96 = 63;
          v97 = v96 + ((*v95 - 1) & 0x3F);
          *v95 = v97;
          v95[v97] = v92;
          *(_DWORD *)(v94 + 4 * v97) = v19++;
        }
        while (v19 < v83);
        v22 = *(_QWORD *)(a1 + 112);
        v21 = *(_QWORD *)(a1 + 56);
        v9 = v121;
      }
      v98 = v10 - 32;
      LODWORD(v19) = v10 - 32;
      v99 = (_DWORD)v4 + 1 - (v9 + v98);
      if ((v99 + 1) < 8)
        v100 = v99 + 1;
      else
        v100 = 8;
      if ((unint64_t)v4 + 1 >= v9 + v98)
        v101 = v100;
      else
        v101 = 0;
      if (v98 < v101 + (int)v98)
      {
        v102 = *(_QWORD *)(a1 + 96);
        v103 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v104 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v98)) ^ v102) >> v103;
          v105 = (v104 >> 2) & 0x3FFFFFC0;
          _X22 = v22 + 4 * v105;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x40]
          }
          _X20 = v21 + v105;
          __asm
          {
            PRFM            #0, [X20]
            PRFM            #0, [X20,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v98++ & 7) + 64) = v104;
          --v101;
        }
        while (v101);
      }
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_QWORD *)(a1 + 112);
    }
    if (v19 < v10)
    {
      v23 = *(_QWORD *)(a1 + 8) + 8;
      v24 = 56 - *(_DWORD *)(a1 + 52);
      v19 = v19;
      do
      {
        v25 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v23 + v19)) ^ *(_QWORD *)(a1 + 96)) >> v24;
        v26 = (v25 >> 2) & 0x3FFFFFC0;
        _X22 = v22 + 4 * v26;
        __asm
        {
          PRFM            #0, [X22]
          PRFM            #0, [X22,#0x40]
        }
        _X20 = v21 + v26;
        __asm
        {
          PRFM            #0, [X20]
          PRFM            #0, [X20,#0x20]
        }
        v36 = *(unsigned int *)(v18 + 4 * (v19 & 7));
        *(_DWORD *)(v18 + 4 * (v19 & 7)) = v25;
        v37 = (v36 >> 2) & 0x3FFFFFC0;
        v38 = v22 + 4 * v37;
        v39 = (_BYTE *)(v21 + v37);
        if (((*v39 - 1) & 0x3F) != 0)
          v40 = 0;
        else
          v40 = 63;
        v41 = v40 + ((*v39 - 1) & 0x3F);
        *v39 = v41;
        v39[v41] = v36;
        *(_DWORD *)(v38 + 4 * v41) = v19++;
      }
      while (v19 < v10);
    }
    *(_DWORD *)(a1 + 44) = v10;
    v42 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v10 + 8)) ^ v16) >> (56 - v7);
    v43 = (v42 >> 2) & 0x3FFFFFC0;
    _X17 = v5 + 4 * v43;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X17,#0x40]
    }
    _X14 = v6 + v43;
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X14,#0x20]
    }
    LODWORD(_X14) = *(_DWORD *)(v18 + 4 * (v10 & 7));
    *(_DWORD *)(v18 + 4 * (v10 & 7)) = v42;
    v8 = v20;
  }
  *(_DWORD *)(a1 + 104) += _X14;
  v49 = (_X14 >> 2) & 0x3FFFFFC0;
  v50 = v5 + 4 * v49;
  v51 = (char *)(v6 + v49);
  v52 = *v51;
  v124 = vld4q_s8(v51);
  v53 = vdupq_n_s8(_X14);
  v124.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v124.val[3], v53), vceqq_s8(v124.val[2], v53), 1uLL), vsriq_n_s8(vceqq_s8(v124.val[1], v53), vceqq_s8(v124.val[0], v53), 1uLL), 2uLL);
  v54 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v124.val[0], v124.val[0], 4uLL), 4uLL);
  v55 = 0;
  if (v54)
  {
    v56 = 1 << v15;
    v57 = __ROR8__(*(_QWORD *)&v54, v52);
    do
    {
      v58 = (__clz(__rbit64(v57)) + v52) & 0x3F;
      if (v58)
      {
        v59 = *(unsigned int *)(v50 + 4 * v58);
        if (v59 < v14)
          break;
        if (v59 >= v12)
          v60 = v9;
        else
          v60 = v8;
        _X1 = v60 + v59;
        __asm { PRFM            #0, [X1] }
        v122[v55++] = v59;
        --v56;
      }
      v57 &= v57 - 1;
    }
    while (v57 && v56);
  }
  if (((v52 - 1) & 0x3F) != 0)
    v63 = 0;
  else
    v63 = 63;
  v64 = v63 + ((v52 - 1) & 0x3F);
  *v51 = v64;
  v51[v64] = _X14;
  v65 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v65 + 1;
  *(_DWORD *)(v50 + 4 * v64) = v65;
  if (v55)
  {
    v66 = 0;
    v119 = (_QWORD *)(v9 + v12);
    v118 = (char *)(v8 + v12);
    v67 = (char *)v4 - 3;
    v68 = a3 - 7;
    v114 = a3 - 1;
    v115 = a3 - 3;
    v117 = (_QWORD *)((char *)v4 + 4);
    v116 = v10 + 3;
    v112 = v4 + 1;
    v113 = v9 + 8;
    v69 = 3;
    while (1)
    {
      v70 = v122[v66];
      if (v70 >= v12)
      {
        v77 = (_QWORD *)(v9 + v70);
        if (*(_DWORD *)(v9 + v70 + v69 - 3) != *(_DWORD *)&v67[v69])
          goto LABEL_55;
        if (v68 <= (unint64_t)v4)
        {
          v79 = v4;
        }
        else
        {
          v78 = *v4 ^ *v77;
          if (v78)
          {
            result = __clz(__rbit64(v78)) >> 3;
            goto LABEL_53;
          }
          v80 = 0;
          while (1)
          {
            v79 = &v112[v80];
            if ((unint64_t)&v112[v80] >= v68)
              break;
            v81 = *(_QWORD *)(v113 + v70 + v80 * 8);
            ++v80;
            v82 = *v79 ^ v81;
            if (v82)
            {
              result = v80 * 8 + (__clz(__rbit64(v82)) >> 3);
              goto LABEL_53;
            }
          }
          v77 = (_QWORD *)(v113 + v70 + v80 * 8);
        }
        if ((unint64_t)v79 < v115 && *(_DWORD *)v77 == *(_DWORD *)v79)
        {
          v79 = (_QWORD *)((char *)v79 + 4);
          v77 = (_QWORD *)((char *)v77 + 4);
        }
        if ((unint64_t)v79 < v114 && *(unsigned __int16 *)v77 == *(unsigned __int16 *)v79)
        {
          v79 = (_QWORD *)((char *)v79 + 2);
          v77 = (_QWORD *)((char *)v77 + 2);
        }
        if ((unint64_t)v79 < a3 && *(unsigned __int8 *)v77 == *(unsigned __int8 *)v79)
          v79 = (_QWORD *)((char *)v79 + 1);
        result = (char *)v79 - (char *)v4;
      }
      else
      {
        if (*(_DWORD *)(v8 + v70) != *(_DWORD *)v4)
          goto LABEL_55;
        v71 = a3;
        v72 = v4;
        v73 = v12;
        v74 = v67;
        v75 = sub_1D4B5F19C(v117, (char *)(v8 + v70 + 4), a3, v118, v119);
        v67 = v74;
        v12 = v73;
        v4 = v72;
        v9 = v121;
        a3 = v71;
        result = v75 + 4;
      }
LABEL_53:
      if (result > v69)
      {
        *a4 = v116 - v70;
        v69 = result;
        if ((_QWORD *)((char *)v4 + result) == (_QWORD *)a3)
          return result;
      }
LABEL_55:
      ++v66;
      result = v69;
      if (v66 == v55)
        return result;
    }
  }
  return 3;
}

unint64_t sub_1D4B7C584(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v45;
  uint64_t v46;
  int8x16_t *v47;
  char v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  unint64_t result;
  _QWORD *v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int v107;
  _QWORD *v108;
  char *v109;
  _QWORD *v110;
  uint64_t v112;
  _DWORD v113[64];
  uint64_t v114;

  v4 = a2;
  v114 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 52);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v10 = (_DWORD)a2 - v9;
  v11 = 1 << *(_DWORD *)(a1 + 256);
  v12 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0)
    v14 = (_DWORD)a2 - v9 - v11;
  else
    v14 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 268);
  if (v15 >= 4)
    LOBYTE(v15) = 4;
  v16 = *(_QWORD *)(a1 + 96);
  v112 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 300))
  {
    _X14 = ((0xCF1BBCDCBF9B0000 * *a2) ^ v16) >> (56 - v7);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    v18 = a1 + 64;
    v19 = *(unsigned int *)(a1 + 44);
    v20 = *(_QWORD *)(a1 + 16);
    if (v10 - v19 >= 0x181)
    {
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_QWORD *)(a1 + 112);
      if (v19 <= 0xFFFFFF9F)
      {
        v78 = v19 + 96;
        do
        {
          v79 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + 8 + v19)) ^ *(_QWORD *)(a1 + 96)) >> (56 - v7);
          v80 = (v79 >> 4) & 0xFFFFFF0;
          _X19 = v5 + 4 * v80;
          __asm { PRFM            #0, [X19] }
          _X7 = v6 + v80;
          __asm { PRFM            #0, [X7] }
          v85 = *(unsigned int *)(v18 + 4 * (v19 & 7));
          *(_DWORD *)(v18 + 4 * (v19 & 7)) = v79;
          v86 = (v85 >> 4) & 0xFFFFFF0;
          v87 = v5 + 4 * v86;
          v88 = (_BYTE *)(v6 + v86);
          if (((*v88 - 1) & 0xF) != 0)
            v89 = 0;
          else
            v89 = 15;
          v90 = v89 + ((*v88 - 1) & 0xF);
          *v88 = v90;
          v88[v90] = v85;
          *(_DWORD *)(v87 + 4 * v90) = v19++;
        }
        while (v19 < v78);
        v22 = *(_QWORD *)(a1 + 112);
        v21 = *(_QWORD *)(a1 + 56);
        v9 = v112;
      }
      v91 = v10 - 32;
      LODWORD(v19) = v10 - 32;
      v92 = (_DWORD)v4 + 1 - (v9 + v91);
      if ((v92 + 1) < 8)
        v93 = v92 + 1;
      else
        v93 = 8;
      if ((unint64_t)v4 + 1 >= v9 + v91)
        v94 = v93;
      else
        v94 = 0;
      if (v91 < v94 + (int)v91)
      {
        v95 = *(_QWORD *)(a1 + 96);
        v96 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v97 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v91)) ^ v95) >> v96;
          v98 = (v97 >> 4) & 0xFFFFFF0;
          _X22 = v22 + 4 * v98;
          __asm { PRFM            #0, [X22] }
          _X20 = v21 + v98;
          __asm { PRFM            #0, [X20] }
          *(_DWORD *)(a1 + 4 * (v91++ & 7) + 64) = v97;
          --v94;
        }
        while (v94);
      }
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_QWORD *)(a1 + 112);
    }
    if (v19 < v10)
    {
      v23 = *(_QWORD *)(a1 + 8) + 8;
      v24 = 56 - *(_DWORD *)(a1 + 52);
      v19 = v19;
      do
      {
        v25 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v23 + v19)) ^ *(_QWORD *)(a1 + 96)) >> v24;
        v26 = (v25 >> 4) & 0xFFFFFF0;
        _X22 = v22 + 4 * v26;
        __asm { PRFM            #0, [X22] }
        _X20 = v21 + v26;
        __asm { PRFM            #0, [X20] }
        v34 = *(unsigned int *)(v18 + 4 * (v19 & 7));
        *(_DWORD *)(v18 + 4 * (v19 & 7)) = v25;
        v35 = (v34 >> 4) & 0xFFFFFF0;
        v36 = v22 + 4 * v35;
        v37 = (_BYTE *)(v21 + v35);
        if (((*v37 - 1) & 0xF) != 0)
          v38 = 0;
        else
          v38 = 15;
        v39 = v38 + ((*v37 - 1) & 0xF);
        *v37 = v39;
        v37[v39] = v34;
        *(_DWORD *)(v36 + 4 * v39) = v19++;
      }
      while (v19 < v10);
    }
    *(_DWORD *)(a1 + 44) = v10;
    v40 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v10 + 8)) ^ v16) >> (56 - v7);
    v41 = (v40 >> 4) & 0xFFFFFF0;
    _X17 = v5 + 4 * v41;
    __asm { PRFM            #0, [X17] }
    _X14 = v6 + v41;
    __asm { PRFM            #0, [X14] }
    LODWORD(_X14) = *(_DWORD *)(v18 + 4 * (v10 & 7));
    *(_DWORD *)(v18 + 4 * (v10 & 7)) = v40;
    v8 = v20;
  }
  *(_DWORD *)(a1 + 104) += _X14;
  v45 = (_X14 >> 4) & 0xFFFFFF0;
  v46 = v5 + 4 * v45;
  v47 = (int8x16_t *)(v6 + v45);
  v48 = 4 * v47->i8[0];
  v49 = (char)*v47;
  v50 = 0;
  v51 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v47, vdupq_n_s8(_X14)), 4uLL), v48) & 0x8888888888888888;
  if (v51)
  {
    v52 = 1 << v15;
    do
    {
      v53 = ((__clz(__rbit64(v51)) + (v48 & 0xFC)) >> 2) & 0xF;
      if (v53)
      {
        v54 = *(unsigned int *)(v46 + 4 * v53);
        if (v54 < v14)
          break;
        if (v54 >= v12)
          v55 = v9;
        else
          v55 = v8;
        _X3 = v55 + v54;
        __asm { PRFM            #0, [X3] }
        v113[v50++] = v54;
        --v52;
      }
      v51 &= v51 - 1;
    }
    while (v51 && v52);
  }
  if (((v49 - 1) & 0xF) != 0)
    v58 = 0;
  else
    v58 = 15;
  v59 = v58 + ((v49 - 1) & 0xF);
  v47->i8[0] = v59;
  v47->i8[v59] = _X14;
  v60 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v60 + 1;
  *(_DWORD *)(v46 + 4 * v59) = v60;
  if (v50)
  {
    v61 = 0;
    v110 = (_QWORD *)(v9 + v12);
    v109 = (char *)(v8 + v12);
    v62 = (char *)v4 - 3;
    v63 = a3 - 7;
    v105 = a3 - 1;
    v106 = a3 - 3;
    v108 = (_QWORD *)((char *)v4 + 4);
    v107 = v10 + 3;
    v103 = v4 + 1;
    v104 = v9 + 8;
    v64 = 3;
    while (1)
    {
      v65 = v113[v61];
      if (v65 >= v12)
      {
        v72 = (_QWORD *)(v9 + v65);
        if (*(_DWORD *)(v9 + v65 + v64 - 3) != *(_DWORD *)&v62[v64])
          goto LABEL_55;
        if (v63 <= (unint64_t)v4)
        {
          v74 = v4;
        }
        else
        {
          v73 = *v4 ^ *v72;
          if (v73)
          {
            result = __clz(__rbit64(v73)) >> 3;
            goto LABEL_53;
          }
          v75 = 0;
          while (1)
          {
            v74 = &v103[v75];
            if ((unint64_t)&v103[v75] >= v63)
              break;
            v76 = *(_QWORD *)(v104 + v65 + v75 * 8);
            ++v75;
            v77 = *v74 ^ v76;
            if (v77)
            {
              result = v75 * 8 + (__clz(__rbit64(v77)) >> 3);
              goto LABEL_53;
            }
          }
          v72 = (_QWORD *)(v104 + v65 + v75 * 8);
        }
        if ((unint64_t)v74 < v106 && *(_DWORD *)v72 == *(_DWORD *)v74)
        {
          v74 = (_QWORD *)((char *)v74 + 4);
          v72 = (_QWORD *)((char *)v72 + 4);
        }
        if ((unint64_t)v74 < v105 && *(unsigned __int16 *)v72 == *(unsigned __int16 *)v74)
        {
          v74 = (_QWORD *)((char *)v74 + 2);
          v72 = (_QWORD *)((char *)v72 + 2);
        }
        if ((unint64_t)v74 < a3 && *(unsigned __int8 *)v72 == *(unsigned __int8 *)v74)
          v74 = (_QWORD *)((char *)v74 + 1);
        result = (char *)v74 - (char *)v4;
      }
      else
      {
        if (*(_DWORD *)(v8 + v65) != *(_DWORD *)v4)
          goto LABEL_55;
        v66 = a3;
        v67 = v4;
        v68 = v12;
        v69 = v62;
        v70 = sub_1D4B5F19C(v108, (char *)(v8 + v65 + 4), a3, v109, v110);
        v62 = v69;
        v12 = v68;
        v4 = v67;
        v9 = v112;
        a3 = v66;
        result = v70 + 4;
      }
LABEL_53:
      if (result > v64)
      {
        *a4 = v107 - v65;
        v64 = result;
        if ((_QWORD *)((char *)v4 + result) == (_QWORD *)a3)
          return result;
      }
LABEL_55:
      ++v61;
      result = v64;
      if (v61 == v50)
        return result;
    }
  }
  return 3;
}

unint64_t sub_1D4B7CB88(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v47;
  uint64_t v48;
  __int16 *v49;
  char v50;
  char v51;
  int8x16_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  unint64_t result;
  _QWORD *v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unsigned int v112;
  _QWORD *v113;
  char *v114;
  _QWORD *v115;
  uint64_t v117;
  _DWORD v118[64];
  uint64_t v119;
  int16x8x2_t v120;

  v4 = a2;
  v119 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 52);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v10 = (_DWORD)a2 - v9;
  v11 = 1 << *(_DWORD *)(a1 + 256);
  v12 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0)
    v14 = (_DWORD)a2 - v9 - v11;
  else
    v14 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 268);
  if (v15 >= 5)
    LOBYTE(v15) = 5;
  v16 = *(_QWORD *)(a1 + 96);
  v117 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 300))
  {
    _X14 = ((0xCF1BBCDCBF9B0000 * *a2) ^ v16) >> (56 - v7);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    v18 = a1 + 64;
    v19 = *(unsigned int *)(a1 + 44);
    v20 = *(_QWORD *)(a1 + 16);
    if (v10 - v19 >= 0x181)
    {
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_QWORD *)(a1 + 112);
      if (v19 <= 0xFFFFFF9F)
      {
        v81 = v19 + 96;
        do
        {
          v82 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + 8 + v19)) ^ *(_QWORD *)(a1 + 96)) >> (56 - v7);
          v83 = (v82 >> 3) & 0x1FFFFFE0;
          _X19 = v5 + 4 * v83;
          __asm
          {
            PRFM            #0, [X19]
            PRFM            #0, [X19,#0x40]
          }
          _X7 = v6 + v83;
          __asm { PRFM            #0, [X7] }
          v89 = *(unsigned int *)(v18 + 4 * (v19 & 7));
          *(_DWORD *)(v18 + 4 * (v19 & 7)) = v82;
          v90 = (v89 >> 3) & 0x1FFFFFE0;
          v91 = v5 + 4 * v90;
          v92 = (_BYTE *)(v6 + v90);
          if (((*v92 - 1) & 0x1F) != 0)
            v93 = 0;
          else
            v93 = 31;
          v94 = v93 + ((*v92 - 1) & 0x1F);
          *v92 = v94;
          v92[v94] = v89;
          *(_DWORD *)(v91 + 4 * v94) = v19++;
        }
        while (v19 < v81);
        v22 = *(_QWORD *)(a1 + 112);
        v21 = *(_QWORD *)(a1 + 56);
        v9 = v117;
      }
      v95 = v10 - 32;
      LODWORD(v19) = v10 - 32;
      v96 = (_DWORD)v4 + 1 - (v9 + v95);
      if ((v96 + 1) < 8)
        v97 = v96 + 1;
      else
        v97 = 8;
      if ((unint64_t)v4 + 1 >= v9 + v95)
        v98 = v97;
      else
        v98 = 0;
      if (v95 < v98 + (int)v95)
      {
        v99 = *(_QWORD *)(a1 + 96);
        v100 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v101 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v95)) ^ v99) >> v100;
          v102 = (v101 >> 3) & 0x1FFFFFE0;
          _X22 = v22 + 4 * v102;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x40]
          }
          _X20 = v21 + v102;
          __asm { PRFM            #0, [X20] }
          *(_DWORD *)(a1 + 4 * (v95++ & 7) + 64) = v101;
          --v98;
        }
        while (v98);
      }
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_QWORD *)(a1 + 112);
    }
    if (v19 < v10)
    {
      v23 = *(_QWORD *)(a1 + 8) + 8;
      v24 = 56 - *(_DWORD *)(a1 + 52);
      v19 = v19;
      do
      {
        v25 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v23 + v19)) ^ *(_QWORD *)(a1 + 96)) >> v24;
        v26 = (v25 >> 3) & 0x1FFFFFE0;
        _X22 = v22 + 4 * v26;
        __asm
        {
          PRFM            #0, [X22]
          PRFM            #0, [X22,#0x40]
        }
        _X20 = v21 + v26;
        __asm { PRFM            #0, [X20] }
        v35 = *(unsigned int *)(v18 + 4 * (v19 & 7));
        *(_DWORD *)(v18 + 4 * (v19 & 7)) = v25;
        v36 = (v35 >> 3) & 0x1FFFFFE0;
        v37 = v22 + 4 * v36;
        v38 = (_BYTE *)(v21 + v36);
        if (((*v38 - 1) & 0x1F) != 0)
          v39 = 0;
        else
          v39 = 31;
        v40 = v39 + ((*v38 - 1) & 0x1F);
        *v38 = v40;
        v38[v40] = v35;
        *(_DWORD *)(v37 + 4 * v40) = v19++;
      }
      while (v19 < v10);
    }
    *(_DWORD *)(a1 + 44) = v10;
    v41 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v10 + 8)) ^ v16) >> (56 - v7);
    v42 = (v41 >> 3) & 0x1FFFFFE0;
    _X17 = v5 + 4 * v42;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X17,#0x40]
    }
    _X14 = v6 + v42;
    __asm { PRFM            #0, [X14] }
    LODWORD(_X14) = *(_DWORD *)(v18 + 4 * (v10 & 7));
    *(_DWORD *)(v18 + 4 * (v10 & 7)) = v41;
    v8 = v20;
  }
  *(_DWORD *)(a1 + 104) += _X14;
  v47 = (_X14 >> 3) & 0x1FFFFFE0;
  v48 = v5 + 4 * v47;
  v49 = (__int16 *)(v6 + v47);
  v120 = vld2q_s16(v49);
  v50 = *(_BYTE *)v49;
  v51 = 2 * *(_BYTE *)v49;
  v52 = vdupq_n_s8(_X14);
  v53 = 0;
  v54 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v52, (int8x16_t)v120.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v52, (int8x16_t)v120.val[1]), 6uLL), 4uLL), v51) & 0x5555555555555555;
  if (v54)
  {
    v55 = 1 << v15;
    do
    {
      v56 = ((__clz(__rbit64(v54)) + (v51 & 0xFE)) >> 1) & 0x1F;
      if (v56)
      {
        v57 = *(unsigned int *)(v48 + 4 * v56);
        if (v57 < v14)
          break;
        if (v57 >= v12)
          v58 = v9;
        else
          v58 = v8;
        _X3 = v58 + v57;
        __asm { PRFM            #0, [X3] }
        v118[v53++] = v57;
        --v55;
      }
      v54 &= v54 - 1;
    }
    while (v54 && v55);
  }
  if (((v50 - 1) & 0x1F) != 0)
    v61 = 0;
  else
    v61 = 31;
  v62 = v61 + ((v50 - 1) & 0x1F);
  *(_BYTE *)v49 = v62;
  *((_BYTE *)v49 + v62) = _X14;
  v63 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v63 + 1;
  *(_DWORD *)(v48 + 4 * v62) = v63;
  if (v53)
  {
    v64 = 0;
    v115 = (_QWORD *)(v9 + v12);
    v114 = (char *)(v8 + v12);
    v65 = (char *)v4 - 3;
    v66 = a3 - 7;
    v110 = a3 - 1;
    v111 = a3 - 3;
    v113 = (_QWORD *)((char *)v4 + 4);
    v112 = v10 + 3;
    v108 = v4 + 1;
    v109 = v9 + 8;
    v67 = 3;
    while (1)
    {
      v68 = v118[v64];
      if (v68 >= v12)
      {
        v75 = (_QWORD *)(v9 + v68);
        if (*(_DWORD *)(v9 + v68 + v67 - 3) != *(_DWORD *)&v65[v67])
          goto LABEL_55;
        if (v66 <= (unint64_t)v4)
        {
          v77 = v4;
        }
        else
        {
          v76 = *v4 ^ *v75;
          if (v76)
          {
            result = __clz(__rbit64(v76)) >> 3;
            goto LABEL_53;
          }
          v78 = 0;
          while (1)
          {
            v77 = &v108[v78];
            if ((unint64_t)&v108[v78] >= v66)
              break;
            v79 = *(_QWORD *)(v109 + v68 + v78 * 8);
            ++v78;
            v80 = *v77 ^ v79;
            if (v80)
            {
              result = v78 * 8 + (__clz(__rbit64(v80)) >> 3);
              goto LABEL_53;
            }
          }
          v75 = (_QWORD *)(v109 + v68 + v78 * 8);
        }
        if ((unint64_t)v77 < v111 && *(_DWORD *)v75 == *(_DWORD *)v77)
        {
          v77 = (_QWORD *)((char *)v77 + 4);
          v75 = (_QWORD *)((char *)v75 + 4);
        }
        if ((unint64_t)v77 < v110 && *(unsigned __int16 *)v75 == *(unsigned __int16 *)v77)
        {
          v77 = (_QWORD *)((char *)v77 + 2);
          v75 = (_QWORD *)((char *)v75 + 2);
        }
        if ((unint64_t)v77 < a3 && *(unsigned __int8 *)v75 == *(unsigned __int8 *)v77)
          v77 = (_QWORD *)((char *)v77 + 1);
        result = (char *)v77 - (char *)v4;
      }
      else
      {
        if (*(_DWORD *)(v8 + v68) != *(_DWORD *)v4)
          goto LABEL_55;
        v69 = a3;
        v70 = v4;
        v71 = v12;
        v72 = v65;
        v73 = sub_1D4B5F19C(v113, (char *)(v8 + v68 + 4), a3, v114, v115);
        v65 = v72;
        v12 = v71;
        v4 = v70;
        v9 = v117;
        a3 = v69;
        result = v73 + 4;
      }
LABEL_53:
      if (result > v67)
      {
        *a4 = v112 - v68;
        v67 = result;
        if ((_QWORD *)((char *)v4 + result) == (_QWORD *)a3)
          return result;
      }
LABEL_55:
      ++v64;
      result = v67;
      if (v64 == v53)
        return result;
    }
  }
  return 3;
}

unint64_t sub_1D4B7D1A4(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char v52;
  int8x16_t v53;
  int8x8_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  unint64_t result;
  _QWORD *v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  int v100;
  int v101;
  uint64_t v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unsigned int v116;
  _QWORD *v117;
  char *v118;
  _QWORD *v119;
  uint64_t v121;
  _DWORD v122[64];
  uint64_t v123;
  int8x16x4_t v124;

  v4 = a2;
  v123 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 52);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v10 = (_DWORD)a2 - v9;
  v11 = 1 << *(_DWORD *)(a1 + 256);
  v12 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0)
    v14 = (_DWORD)a2 - v9 - v11;
  else
    v14 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 268);
  if (v15 >= 6)
    LOBYTE(v15) = 6;
  v16 = *(_QWORD *)(a1 + 96);
  v121 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 300))
  {
    _X14 = ((0xCF1BBCDCBF9B0000 * *a2) ^ v16) >> (56 - v7);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    v18 = a1 + 64;
    v19 = *(unsigned int *)(a1 + 44);
    v20 = *(_QWORD *)(a1 + 16);
    if (v10 - v19 >= 0x181)
    {
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_QWORD *)(a1 + 112);
      if (v19 <= 0xFFFFFF9F)
      {
        v83 = v19 + 96;
        do
        {
          v84 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + 8 + v19)) ^ *(_QWORD *)(a1 + 96)) >> (56 - v7);
          v85 = (v84 >> 2) & 0x3FFFFFC0;
          _X19 = v5 + 4 * v85;
          __asm
          {
            PRFM            #0, [X19]
            PRFM            #0, [X19,#0x40]
          }
          _X7 = v6 + v85;
          __asm
          {
            PRFM            #0, [X7]
            PRFM            #0, [X7,#0x20]
          }
          v92 = *(unsigned int *)(v18 + 4 * (v19 & 7));
          *(_DWORD *)(v18 + 4 * (v19 & 7)) = v84;
          v93 = (v92 >> 2) & 0x3FFFFFC0;
          v94 = v5 + 4 * v93;
          v95 = (_BYTE *)(v6 + v93);
          if (((*v95 - 1) & 0x3F) != 0)
            v96 = 0;
          else
            v96 = 63;
          v97 = v96 + ((*v95 - 1) & 0x3F);
          *v95 = v97;
          v95[v97] = v92;
          *(_DWORD *)(v94 + 4 * v97) = v19++;
        }
        while (v19 < v83);
        v22 = *(_QWORD *)(a1 + 112);
        v21 = *(_QWORD *)(a1 + 56);
        v9 = v121;
      }
      v98 = v10 - 32;
      LODWORD(v19) = v10 - 32;
      v99 = (_DWORD)v4 + 1 - (v9 + v98);
      if ((v99 + 1) < 8)
        v100 = v99 + 1;
      else
        v100 = 8;
      if ((unint64_t)v4 + 1 >= v9 + v98)
        v101 = v100;
      else
        v101 = 0;
      if (v98 < v101 + (int)v98)
      {
        v102 = *(_QWORD *)(a1 + 96);
        v103 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v104 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v98)) ^ v102) >> v103;
          v105 = (v104 >> 2) & 0x3FFFFFC0;
          _X22 = v22 + 4 * v105;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x40]
          }
          _X20 = v21 + v105;
          __asm
          {
            PRFM            #0, [X20]
            PRFM            #0, [X20,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v98++ & 7) + 64) = v104;
          --v101;
        }
        while (v101);
      }
    }
    else
    {
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_QWORD *)(a1 + 112);
    }
    if (v19 < v10)
    {
      v23 = *(_QWORD *)(a1 + 8) + 8;
      v24 = 56 - *(_DWORD *)(a1 + 52);
      v19 = v19;
      do
      {
        v25 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v23 + v19)) ^ *(_QWORD *)(a1 + 96)) >> v24;
        v26 = (v25 >> 2) & 0x3FFFFFC0;
        _X22 = v22 + 4 * v26;
        __asm
        {
          PRFM            #0, [X22]
          PRFM            #0, [X22,#0x40]
        }
        _X20 = v21 + v26;
        __asm
        {
          PRFM            #0, [X20]
          PRFM            #0, [X20,#0x20]
        }
        v36 = *(unsigned int *)(v18 + 4 * (v19 & 7));
        *(_DWORD *)(v18 + 4 * (v19 & 7)) = v25;
        v37 = (v36 >> 2) & 0x3FFFFFC0;
        v38 = v22 + 4 * v37;
        v39 = (_BYTE *)(v21 + v37);
        if (((*v39 - 1) & 0x3F) != 0)
          v40 = 0;
        else
          v40 = 63;
        v41 = v40 + ((*v39 - 1) & 0x3F);
        *v39 = v41;
        v39[v41] = v36;
        *(_DWORD *)(v38 + 4 * v41) = v19++;
      }
      while (v19 < v10);
    }
    *(_DWORD *)(a1 + 44) = v10;
    v42 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v10 + 8)) ^ v16) >> (56 - v7);
    v43 = (v42 >> 2) & 0x3FFFFFC0;
    _X17 = v5 + 4 * v43;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X17,#0x40]
    }
    _X14 = v6 + v43;
    __asm
    {
      PRFM            #0, [X14]
      PRFM            #0, [X14,#0x20]
    }
    LODWORD(_X14) = *(_DWORD *)(v18 + 4 * (v10 & 7));
    *(_DWORD *)(v18 + 4 * (v10 & 7)) = v42;
    v8 = v20;
  }
  *(_DWORD *)(a1 + 104) += _X14;
  v49 = (_X14 >> 2) & 0x3FFFFFC0;
  v50 = v5 + 4 * v49;
  v51 = (char *)(v6 + v49);
  v52 = *v51;
  v124 = vld4q_s8(v51);
  v53 = vdupq_n_s8(_X14);
  v124.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v124.val[3], v53), vceqq_s8(v124.val[2], v53), 1uLL), vsriq_n_s8(vceqq_s8(v124.val[1], v53), vceqq_s8(v124.val[0], v53), 1uLL), 2uLL);
  v54 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v124.val[0], v124.val[0], 4uLL), 4uLL);
  v55 = 0;
  if (v54)
  {
    v56 = 1 << v15;
    v57 = __ROR8__(*(_QWORD *)&v54, v52);
    do
    {
      v58 = (__clz(__rbit64(v57)) + v52) & 0x3F;
      if (v58)
      {
        v59 = *(unsigned int *)(v50 + 4 * v58);
        if (v59 < v14)
          break;
        if (v59 >= v12)
          v60 = v9;
        else
          v60 = v8;
        _X1 = v60 + v59;
        __asm { PRFM            #0, [X1] }
        v122[v55++] = v59;
        --v56;
      }
      v57 &= v57 - 1;
    }
    while (v57 && v56);
  }
  if (((v52 - 1) & 0x3F) != 0)
    v63 = 0;
  else
    v63 = 63;
  v64 = v63 + ((v52 - 1) & 0x3F);
  *v51 = v64;
  v51[v64] = _X14;
  v65 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v65 + 1;
  *(_DWORD *)(v50 + 4 * v64) = v65;
  if (v55)
  {
    v66 = 0;
    v119 = (_QWORD *)(v9 + v12);
    v118 = (char *)(v8 + v12);
    v67 = (char *)v4 - 3;
    v68 = a3 - 7;
    v114 = a3 - 1;
    v115 = a3 - 3;
    v117 = (_QWORD *)((char *)v4 + 4);
    v116 = v10 + 3;
    v112 = v4 + 1;
    v113 = v9 + 8;
    v69 = 3;
    while (1)
    {
      v70 = v122[v66];
      if (v70 >= v12)
      {
        v77 = (_QWORD *)(v9 + v70);
        if (*(_DWORD *)(v9 + v70 + v69 - 3) != *(_DWORD *)&v67[v69])
          goto LABEL_55;
        if (v68 <= (unint64_t)v4)
        {
          v79 = v4;
        }
        else
        {
          v78 = *v4 ^ *v77;
          if (v78)
          {
            result = __clz(__rbit64(v78)) >> 3;
            goto LABEL_53;
          }
          v80 = 0;
          while (1)
          {
            v79 = &v112[v80];
            if ((unint64_t)&v112[v80] >= v68)
              break;
            v81 = *(_QWORD *)(v113 + v70 + v80 * 8);
            ++v80;
            v82 = *v79 ^ v81;
            if (v82)
            {
              result = v80 * 8 + (__clz(__rbit64(v82)) >> 3);
              goto LABEL_53;
            }
          }
          v77 = (_QWORD *)(v113 + v70 + v80 * 8);
        }
        if ((unint64_t)v79 < v115 && *(_DWORD *)v77 == *(_DWORD *)v79)
        {
          v79 = (_QWORD *)((char *)v79 + 4);
          v77 = (_QWORD *)((char *)v77 + 4);
        }
        if ((unint64_t)v79 < v114 && *(unsigned __int16 *)v77 == *(unsigned __int16 *)v79)
        {
          v79 = (_QWORD *)((char *)v79 + 2);
          v77 = (_QWORD *)((char *)v77 + 2);
        }
        if ((unint64_t)v79 < a3 && *(unsigned __int8 *)v77 == *(unsigned __int8 *)v79)
          v79 = (_QWORD *)((char *)v79 + 1);
        result = (char *)v79 - (char *)v4;
      }
      else
      {
        if (*(_DWORD *)(v8 + v70) != *(_DWORD *)v4)
          goto LABEL_55;
        v71 = a3;
        v72 = v4;
        v73 = v12;
        v74 = v67;
        v75 = sub_1D4B5F19C(v117, (char *)(v8 + v70 + 4), a3, v118, v119);
        v67 = v74;
        v12 = v73;
        v4 = v72;
        v9 = v121;
        a3 = v71;
        result = v75 + 4;
      }
LABEL_53:
      if (result > v69)
      {
        *a4 = v116 - v70;
        v69 = result;
        if ((_QWORD *)((char *)v4 + result) == (_QWORD *)a3)
          return result;
      }
LABEL_55:
      ++v66;
      result = v69;
      if (v66 == v55)
        return result;
    }
  }
  return 3;
}

unint64_t sub_1D4B7D7D4(uint64_t a1, _DWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  _DWORD *v39;
  unint64_t v40;
  unint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  _QWORD *v56;
  char *v57;
  _QWORD *v58;

  v4 = *(_QWORD *)(a1 + 128);
  v5 = *(_DWORD *)(a1 + 260);
  v6 = 1 << v5;
  v7 = (1 << v5) - 1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 28);
  v58 = (_QWORD *)(v8 + v9);
  v11 = (_DWORD)a2 - v8;
  v12 = 1 << *(_DWORD *)(a1 + 256);
  v13 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)a2 - (_DWORD)v8 - v10 > v12 && *(_DWORD *)(a1 + 40) == 0)
    v10 = (_DWORD)a2 - v8 - v12;
  v15 = v11 >= v6;
  v16 = v11 - v6;
  if (v15)
    v17 = v16;
  else
    v17 = 0;
  v18 = 1 << *(_DWORD *)(a1 + 268);
  v19 = *(_QWORD *)(a1 + 248);
  v20 = *(_DWORD *)(a1 + 300);
  v21 = *(_QWORD *)(a1 + 112);
  v22 = ~(-1 << v5);
  v23 = 32 - *(_DWORD *)(a1 + 264);
  if (v13 <= v11)
    v24 = v11;
  else
    v24 = v13;
  do
  {
    if (v24 == v13)
      break;
    v25 = (-1640531535 * *(_DWORD *)(v8 + v13)) >> v23;
    *(_DWORD *)(v4 + 4 * (v13 & v22)) = *(_DWORD *)(v21 + 4 * v25);
    *(_DWORD *)(v21 + 4 * v25) = v13++;
  }
  while (!v20);
  *(_DWORD *)(a1 + 44) = v11;
  v26 = *a2;
  v27 = *(_DWORD *)(v21 + 4 * ((-1640531535 * *a2) >> v23));
  if (v27 < v10)
  {
    v28 = 3;
    goto LABEL_16;
  }
  v42 = a3 - 7;
  v43 = a2 + 2;
  v44 = v8 + 8;
  v28 = 3;
  while (1)
  {
    v45 = v27;
    v46 = (_QWORD *)(v8 + v27);
    if (*(_DWORD *)((char *)v46 + v28 - 3) == *(_DWORD *)((char *)a2 + v28 - 3))
      break;
LABEL_48:
    if (v45 > v17)
    {
      if (--v18)
      {
        v27 = *(_DWORD *)(v4 + 4 * (v45 & v7));
        if (v27 >= v10)
          continue;
      }
    }
    goto LABEL_16;
  }
  if (v42 <= (unint64_t)a2)
  {
    v49 = a2;
  }
  else
  {
    v47 = *(_QWORD *)a2 ^ *v46;
    if (v47)
    {
      v48 = __clz(__rbit64(v47)) >> 3;
      goto LABEL_46;
    }
    v50 = 0;
    while (1)
    {
      v49 = &v43[v50];
      if ((unint64_t)&v43[v50] >= v42)
        break;
      v51 = *(_QWORD *)(v44 + v45 + v50 * 4);
      v50 += 2;
      v52 = *v49 ^ v51;
      if (v52)
      {
        v48 = v50 * 4 + (__clz(__rbit64(v52)) >> 3);
        goto LABEL_46;
      }
    }
    v46 = (_QWORD *)(v44 + v45 + v50 * 4);
  }
  if ((unint64_t)v49 < a3 - 3 && *(_DWORD *)v46 == *(_DWORD *)v49)
  {
    v49 = (_QWORD *)((char *)v49 + 4);
    v46 = (_QWORD *)((char *)v46 + 4);
  }
  if ((unint64_t)v49 < a3 - 1 && *(unsigned __int16 *)v46 == *(unsigned __int16 *)v49)
  {
    v49 = (_QWORD *)((char *)v49 + 2);
    v46 = (_QWORD *)((char *)v46 + 2);
  }
  if ((unint64_t)v49 < a3 && *(unsigned __int8 *)v46 == *(unsigned __int8 *)v49)
    v49 = (_QWORD *)((char *)v49 + 1);
  v48 = (char *)v49 - (char *)a2;
LABEL_46:
  if (v48 <= v28)
    goto LABEL_48;
  *a4 = v11 + 3 - v45;
  v28 = v48;
  if ((_DWORD *)((char *)a2 + v48) != (_DWORD *)a3)
    goto LABEL_48;
  v28 = v48;
LABEL_16:
  v29 = 1 << *(_DWORD *)(v19 + 260);
  v30 = *(_QWORD *)(v19 + 8);
  v57 = *(char **)v19;
  v31 = *(_QWORD *)v19 - v30;
  if (v31 >= v29)
    v32 = v31 - v29;
  else
    v32 = 0;
  if (v18)
  {
    v33 = *(_DWORD *)(v19 + 24);
    v34 = *(_DWORD *)(*(_QWORD *)(v19 + 112) + 4 * ((-1640531535 * v26) >> -*(_BYTE *)(v19 + 264)));
    if (v34 >= v33)
    {
      v35 = *(_QWORD *)(v19 + 128);
      v36 = v29 - 1;
      v56 = a2 + 1;
      v53 = v11 - v9 + v31 + 3;
      v37 = v18 - 1;
      do
      {
        v38 = v30 + v34;
        if (*(_DWORD *)v38 == v26)
        {
          v39 = (_DWORD *)a3;
          v40 = sub_1D4B5F19C(v56, (char *)(v38 + 4), a3, v57, v58);
          a3 = (unint64_t)v39;
          if (v40 + 4 > v28)
          {
            *a4 = v53 - v34;
            v28 = v40 + 4;
            if ((_DWORD *)((char *)a2 + v40 + 4) == v39)
              break;
          }
        }
        if (v34 <= v32)
          break;
        v15 = v37-- != 0;
        if (!v15)
          break;
        v34 = *(_DWORD *)(v35 + 4 * (v34 & v36));
      }
      while (v34 >= v33);
    }
  }
  return v28;
}

unint64_t sub_1D4B7DB3C(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;

  v4 = *(_QWORD *)(a1 + 128);
  v5 = *(_DWORD *)(a1 + 260);
  v6 = 1 << v5;
  v7 = (1 << v5) - 1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 28);
  v59 = (_QWORD *)(v8 + v9);
  v11 = (_DWORD)a2 - v8;
  v12 = 1 << *(_DWORD *)(a1 + 256);
  v13 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)a2 - (_DWORD)v8 - v10 > v12 && *(_DWORD *)(a1 + 40) == 0)
    v10 = (_DWORD)a2 - v8 - v12;
  v15 = v11 >= v6;
  v16 = v11 - v6;
  if (v15)
    v17 = v16;
  else
    v17 = 0;
  v18 = 1 << *(_DWORD *)(a1 + 268);
  v19 = *(_QWORD *)(a1 + 248);
  v20 = *(_DWORD *)(a1 + 300);
  v21 = *(_QWORD *)(a1 + 112);
  v22 = ~(-1 << v5);
  v23 = 64 - *(_DWORD *)(a1 + 264);
  if (v13 <= v11)
    v24 = v11;
  else
    v24 = v13;
  do
  {
    if (v24 == v13)
      break;
    v25 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v8 + v13)) >> v23;
    *(_DWORD *)(v4 + 4 * (v13 & v22)) = *(_DWORD *)(v21 + 4 * v25);
    *(_DWORD *)(v21 + 4 * v25) = v13++;
  }
  while (!v20);
  v26 = *a2;
  *(_DWORD *)(a1 + 44) = v11;
  v27 = *(_DWORD *)(v21 + 4 * ((0xCF1BBCDCBB000000 * v26) >> v23));
  if (v27 < v10)
  {
    v28 = 3;
    goto LABEL_16;
  }
  v43 = a3 - 7;
  v44 = a2 + 1;
  v45 = v8 + 8;
  v28 = 3;
  while (1)
  {
    v46 = v27;
    v47 = (_QWORD *)(v8 + v27);
    if (*(_DWORD *)((char *)v47 + v28 - 3) == *(_DWORD *)((char *)a2 + v28 - 3))
      break;
LABEL_48:
    if (v46 > v17)
    {
      if (--v18)
      {
        v27 = *(_DWORD *)(v4 + 4 * (v46 & v7));
        if (v27 >= v10)
          continue;
      }
    }
    goto LABEL_16;
  }
  if (v43 <= (unint64_t)a2)
  {
    v50 = a2;
  }
  else
  {
    v48 = *a2 ^ *v47;
    if (v48)
    {
      v49 = __clz(__rbit64(v48)) >> 3;
      goto LABEL_46;
    }
    v51 = 0;
    while (1)
    {
      v50 = &v44[v51];
      if ((unint64_t)&v44[v51] >= v43)
        break;
      v52 = *(_QWORD *)(v45 + v46 + v51 * 8);
      ++v51;
      v53 = *v50 ^ v52;
      if (v53)
      {
        v49 = v51 * 8 + (__clz(__rbit64(v53)) >> 3);
        goto LABEL_46;
      }
    }
    v47 = (_QWORD *)(v45 + v46 + v51 * 8);
  }
  if ((unint64_t)v50 < a3 - 3 && *(_DWORD *)v47 == *(_DWORD *)v50)
  {
    v50 = (_QWORD *)((char *)v50 + 4);
    v47 = (_QWORD *)((char *)v47 + 4);
  }
  if ((unint64_t)v50 < a3 - 1 && *(unsigned __int16 *)v47 == *(unsigned __int16 *)v50)
  {
    v50 = (_QWORD *)((char *)v50 + 2);
    v47 = (_QWORD *)((char *)v47 + 2);
  }
  if ((unint64_t)v50 < a3 && *(unsigned __int8 *)v47 == *(unsigned __int8 *)v50)
    v50 = (_QWORD *)((char *)v50 + 1);
  v49 = (char *)v50 - (char *)a2;
LABEL_46:
  if (v49 <= v28)
    goto LABEL_48;
  *a4 = v11 + 3 - v46;
  v28 = v49;
  if ((_QWORD *)((char *)a2 + v49) != (_QWORD *)a3)
    goto LABEL_48;
  v28 = v49;
LABEL_16:
  v29 = 1 << *(_DWORD *)(v19 + 260);
  v30 = *(_QWORD *)(v19 + 8);
  v58 = *(char **)v19;
  v31 = *(_QWORD *)v19 - v30;
  if (v31 >= v29)
    v32 = v31 - v29;
  else
    v32 = 0;
  if (v18)
  {
    v33 = *(_DWORD *)(v19 + 24);
    v34 = *(_DWORD *)(*(_QWORD *)(v19 + 112) + 4 * ((0xCF1BBCDCBB000000 * v26) >> -*(_BYTE *)(v19 + 264)));
    if (v34 >= v33)
    {
      v35 = *(_QWORD *)(v19 + 128);
      v36 = v29 - 1;
      v37 = *(_DWORD *)a2;
      v57 = (_QWORD *)((char *)a2 + 4);
      v54 = v11 - v9 + v31 + 3;
      v38 = v18 - 1;
      do
      {
        v39 = v30 + v34;
        if (*(_DWORD *)v39 == v37)
        {
          v40 = (_QWORD *)a3;
          v41 = sub_1D4B5F19C(v57, (char *)(v39 + 4), a3, v58, v59);
          a3 = (unint64_t)v40;
          if (v41 + 4 > v28)
          {
            *a4 = v54 - v34;
            v28 = v41 + 4;
            if ((_QWORD *)((char *)a2 + v41 + 4) == v40)
              break;
          }
        }
        if (v34 <= v32)
          break;
        v15 = v38-- != 0;
        if (!v15)
          break;
        v34 = *(_DWORD *)(v35 + 4 * (v34 & v36));
      }
      while (v34 >= v33);
    }
  }
  return v28;
}

unint64_t sub_1D4B7DEA8(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  _QWORD *v57;
  char *v58;
  _QWORD *v59;

  v4 = *(_QWORD *)(a1 + 128);
  v5 = *(_DWORD *)(a1 + 260);
  v6 = 1 << v5;
  v7 = (1 << v5) - 1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 28);
  v59 = (_QWORD *)(v8 + v9);
  v11 = (_DWORD)a2 - v8;
  v12 = 1 << *(_DWORD *)(a1 + 256);
  v13 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)a2 - (_DWORD)v8 - v10 > v12 && *(_DWORD *)(a1 + 40) == 0)
    v10 = (_DWORD)a2 - v8 - v12;
  v15 = v11 >= v6;
  v16 = v11 - v6;
  if (v15)
    v17 = v16;
  else
    v17 = 0;
  v18 = 1 << *(_DWORD *)(a1 + 268);
  v19 = *(_QWORD *)(a1 + 248);
  v20 = *(_DWORD *)(a1 + 300);
  v21 = *(_QWORD *)(a1 + 112);
  v22 = ~(-1 << v5);
  v23 = 64 - *(_DWORD *)(a1 + 264);
  if (v13 <= v11)
    v24 = v11;
  else
    v24 = v13;
  do
  {
    if (v24 == v13)
      break;
    v25 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v8 + v13)) >> v23;
    *(_DWORD *)(v4 + 4 * (v13 & v22)) = *(_DWORD *)(v21 + 4 * v25);
    *(_DWORD *)(v21 + 4 * v25) = v13++;
  }
  while (!v20);
  v26 = *a2;
  *(_DWORD *)(a1 + 44) = v11;
  v27 = *(_DWORD *)(v21 + 4 * ((0xCF1BBCDCBF9B0000 * v26) >> v23));
  if (v27 < v10)
  {
    v28 = 3;
    goto LABEL_16;
  }
  v43 = a3 - 7;
  v44 = a2 + 1;
  v45 = v8 + 8;
  v28 = 3;
  while (1)
  {
    v46 = v27;
    v47 = (_QWORD *)(v8 + v27);
    if (*(_DWORD *)((char *)v47 + v28 - 3) == *(_DWORD *)((char *)a2 + v28 - 3))
      break;
LABEL_48:
    if (v46 > v17)
    {
      if (--v18)
      {
        v27 = *(_DWORD *)(v4 + 4 * (v46 & v7));
        if (v27 >= v10)
          continue;
      }
    }
    goto LABEL_16;
  }
  if (v43 <= (unint64_t)a2)
  {
    v50 = a2;
  }
  else
  {
    v48 = *a2 ^ *v47;
    if (v48)
    {
      v49 = __clz(__rbit64(v48)) >> 3;
      goto LABEL_46;
    }
    v51 = 0;
    while (1)
    {
      v50 = &v44[v51];
      if ((unint64_t)&v44[v51] >= v43)
        break;
      v52 = *(_QWORD *)(v45 + v46 + v51 * 8);
      ++v51;
      v53 = *v50 ^ v52;
      if (v53)
      {
        v49 = v51 * 8 + (__clz(__rbit64(v53)) >> 3);
        goto LABEL_46;
      }
    }
    v47 = (_QWORD *)(v45 + v46 + v51 * 8);
  }
  if ((unint64_t)v50 < a3 - 3 && *(_DWORD *)v47 == *(_DWORD *)v50)
  {
    v50 = (_QWORD *)((char *)v50 + 4);
    v47 = (_QWORD *)((char *)v47 + 4);
  }
  if ((unint64_t)v50 < a3 - 1 && *(unsigned __int16 *)v47 == *(unsigned __int16 *)v50)
  {
    v50 = (_QWORD *)((char *)v50 + 2);
    v47 = (_QWORD *)((char *)v47 + 2);
  }
  if ((unint64_t)v50 < a3 && *(unsigned __int8 *)v47 == *(unsigned __int8 *)v50)
    v50 = (_QWORD *)((char *)v50 + 1);
  v49 = (char *)v50 - (char *)a2;
LABEL_46:
  if (v49 <= v28)
    goto LABEL_48;
  *a4 = v11 + 3 - v46;
  v28 = v49;
  if ((_QWORD *)((char *)a2 + v49) != (_QWORD *)a3)
    goto LABEL_48;
  v28 = v49;
LABEL_16:
  v29 = 1 << *(_DWORD *)(v19 + 260);
  v30 = *(_QWORD *)(v19 + 8);
  v58 = *(char **)v19;
  v31 = *(_QWORD *)v19 - v30;
  if (v31 >= v29)
    v32 = v31 - v29;
  else
    v32 = 0;
  if (v18)
  {
    v33 = *(_DWORD *)(v19 + 24);
    v34 = *(_DWORD *)(*(_QWORD *)(v19 + 112) + 4 * ((0xCF1BBCDCBF9B0000 * v26) >> -*(_BYTE *)(v19 + 264)));
    if (v34 >= v33)
    {
      v35 = *(_QWORD *)(v19 + 128);
      v36 = v29 - 1;
      v37 = *(_DWORD *)a2;
      v57 = (_QWORD *)((char *)a2 + 4);
      v54 = v11 - v9 + v31 + 3;
      v38 = v18 - 1;
      do
      {
        v39 = v30 + v34;
        if (*(_DWORD *)v39 == v37)
        {
          v40 = (_QWORD *)a3;
          v41 = sub_1D4B5F19C(v57, (char *)(v39 + 4), a3, v58, v59);
          a3 = (unint64_t)v40;
          if (v41 + 4 > v28)
          {
            *a4 = v54 - v34;
            v28 = v41 + 4;
            if ((_QWORD *)((char *)a2 + v41 + 4) == v40)
              break;
          }
        }
        if (v34 <= v32)
          break;
        v15 = v38-- != 0;
        if (!v15)
          break;
        v34 = *(_DWORD *)(v35 + 4 * (v34 & v36));
      }
      while (v34 >= v33);
    }
  }
  return v28;
}

unint64_t sub_1D4B7E214(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned int *a4)
{
  if (*(_QWORD *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2)
    return 0;
  sub_1D4B87034(a1, (int)a2, 4);
  return sub_1D4B87160(a1, a2, a3, a4, 4, 2);
}

unint64_t sub_1D4B7E28C(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned int *a4)
{
  if (*(_QWORD *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2)
    return 0;
  sub_1D4B87034(a1, (int)a2, 5);
  return sub_1D4B87160(a1, a2, a3, a4, 5, 2);
}

unint64_t sub_1D4B7E304(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned int *a4)
{
  if (*(_QWORD *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2)
    return 0;
  sub_1D4B87034(a1, (int)a2, 6);
  return sub_1D4B87160(a1, a2, a3, a4, 6, 2);
}

unint64_t sub_1D4B7E37C(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v52;
  uint64_t v53;
  int8x16_t *v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  unint64_t v80;
  BOOL v81;
  uint64_t v82;
  unsigned int v83;
  char *v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  unsigned int v116;
  int v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t v124;
  uint64_t v125;
  int v126;
  _QWORD *v127;
  _QWORD *v128;
  int v129;
  _QWORD *v130;
  _DWORD v131[64];
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = *(_DWORD *)(a1 + 256);
  v10 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > (1 << v9) && *(_DWORD *)(a1 + 40) == 0)
    v12 = (_DWORD)a2 - v7 - (1 << v9);
  else
    v12 = *(_DWORD *)(a1 + 28);
  v13 = *(_DWORD *)(a1 + 268);
  if (v13 >= 4)
    LOBYTE(v13) = 4;
  v14 = *(_QWORD *)(a1 + 96);
  v15 = 1 << v13;
  v16 = *(_QWORD *)(a1 + 248);
  v17 = -1640531535 * *(_DWORD *)a2;
  v18 = v17 >> (24 - *(_DWORD *)(v16 + 52));
  v19 = (v18 >> 4) & 0xFFFFFF0;
  _X15 = (int8x16_t *)(*(_QWORD *)(v16 + 56) + v19);
  _X11 = *(_QWORD *)(v16 + 112) + 4 * v19;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X15]
  }
  if (*(_DWORD *)(a1 + 300))
  {
    v27 = (v17 ^ v14) >> (24 - *(_DWORD *)(a1 + 52));
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    v28 = a1 + 64;
    v29 = *(unsigned int *)(a1 + 44);
    v125 = *(unsigned int *)(a1 + 24);
    v127 = a4;
    v124 = a3;
    v129 = *(_DWORD *)(a1 + 52);
    v30 = *(_QWORD *)(a1 + 56);
    v31 = *(_QWORD *)(a1 + 112);
    if (v8 - v29 >= 0x181)
    {
      if (v29 <= 0xFFFFFF9F)
      {
        v99 = v29 + 96;
        do
        {
          v100 = ((-1640531535 * *(_DWORD *)(v7 + 8 + v29)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v129);
          v101 = (v100 >> 4) & 0xFFFFFF0;
          _X25 = v5 + 4 * v101;
          __asm { PRFM            #0, [X25] }
          _X24 = v6 + v101;
          __asm { PRFM            #0, [X24] }
          v106 = *(unsigned int *)(v28 + 4 * (v29 & 7));
          *(_DWORD *)(v28 + 4 * (v29 & 7)) = v100;
          v107 = (v106 >> 4) & 0xFFFFFF0;
          v108 = v5 + 4 * v107;
          v109 = (_BYTE *)(v6 + v107);
          if (((*v109 - 1) & 0xF) != 0)
            v110 = 0;
          else
            v110 = 15;
          v111 = v110 + ((*v109 - 1) & 0xF);
          *v109 = v111;
          v109[v111] = v106;
          *(_DWORD *)(v108 + 4 * v111) = v29++;
        }
        while (v29 < v99);
        v31 = *(_QWORD *)(a1 + 112);
        v30 = *(_QWORD *)(a1 + 56);
      }
      v112 = v8 - 32;
      LODWORD(v29) = v8 - 32;
      v113 = (_DWORD)a2 + 1 - (v7 + v112);
      if ((v113 + 1) < 8)
        v114 = v113 + 1;
      else
        v114 = 8;
      if ((unint64_t)a2 + 1 >= v7 + v112)
        v115 = v114;
      else
        v115 = 0;
      if (v112 < v115 + (int)v112)
      {
        v116 = *(_DWORD *)(a1 + 96);
        v117 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          v118 = ((-1640531535 * *(_DWORD *)(v7 + v112)) ^ v116) >> v117;
          v119 = (v118 >> 4) & 0xFFFFFF0;
          _X27 = v31 + 4 * v119;
          __asm { PRFM            #0, [X27] }
          _X26 = v30 + v119;
          __asm { PRFM            #0, [X26] }
          *(_DWORD *)(a1 + 4 * (v112++ & 7) + 64) = v118;
          --v115;
        }
        while (v115);
      }
    }
    if (v29 < v8)
    {
      v32 = *(_QWORD *)(a1 + 8) + 8;
      v33 = 24 - *(_DWORD *)(a1 + 52);
      v29 = v29;
      do
      {
        v34 = ((-1640531535 * *(_DWORD *)(v32 + v29)) ^ *(_DWORD *)(a1 + 96)) >> v33;
        v35 = (v34 >> 4) & 0xFFFFFF0;
        _X27 = v31 + 4 * v35;
        __asm { PRFM            #0, [X27] }
        _X26 = v30 + v35;
        __asm { PRFM            #0, [X26] }
        v40 = *(unsigned int *)(v28 + 4 * (v29 & 7));
        *(_DWORD *)(v28 + 4 * (v29 & 7)) = v34;
        v41 = (v40 >> 4) & 0xFFFFFF0;
        v42 = v31 + 4 * v41;
        v43 = (_BYTE *)(v30 + v41);
        if (((*v43 - 1) & 0xF) != 0)
          v44 = 0;
        else
          v44 = 15;
        v45 = v44 + ((*v43 - 1) & 0xF);
        *v43 = v45;
        v43[v45] = v40;
        *(_DWORD *)(v42 + 4 * v45) = v29++;
      }
      while (v29 < ((_DWORD)a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    v46 = ((-1640531535 * *(_DWORD *)(v7 + v8 + 8)) ^ v14) >> (24 - v129);
    v47 = (v46 >> 4) & 0xFFFFFF0;
    _X4 = v5 + 4 * v47;
    __asm { PRFM            #0, [X4] }
    _X2 = v6 + v47;
    __asm { PRFM            #0, [X2] }
    v27 = *(_DWORD *)(v28 + 4 * (v8 & 7));
    *(_DWORD *)(v28 + 4 * (v8 & 7)) = v46;
    v10 = v125;
    a4 = v127;
    a3 = v124;
  }
  *(_DWORD *)(a1 + 104) += v27;
  v52 = (v27 >> 4) & 0xFFFFFF0;
  v53 = v5 + 4 * v52;
  v54 = (int8x16_t *)(v6 + v52);
  v55 = (char)*v54;
  v56 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v54, vdupq_n_s8(v27)), 4uLL), 4 * v54->i8[0]) & 0x8888888888888888;
  if (v56)
  {
    v57 = 0;
    v58 = (4 * v54->i8[0]);
    do
    {
      v59 = ((__clz(__rbit64(v56)) + v58) >> 2) & 0xF;
      if (v59)
      {
        v60 = *(unsigned int *)(v53 + 4 * v59);
        if (v60 < v12)
          break;
        _X20 = v7 + v60;
        __asm { PRFM            #0, [X20] }
        v131[v57++] = v60;
        --v15;
      }
      v56 &= v56 - 1;
    }
    while (v56 && v15);
  }
  else
  {
    v57 = 0;
  }
  v63 = (v55 - 1) & 0xF;
  if (((v55 - 1) & 0xF) != 0)
    v64 = 0;
  else
    v64 = 15;
  v65 = v64 + v63;
  v54->i8[0] = v65;
  v54->i8[v65] = v27;
  v66 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v66 + 1;
  *(_DWORD *)(v53 + 4 * v65) = v66;
  if (v57)
  {
    v67 = 0;
    v68 = a3 - 7;
    v69 = a2 + 1;
    v70 = v7 + 8;
    v71 = 3;
    while (1)
    {
      v72 = v131[v67];
      v73 = (_QWORD *)(v7 + v72);
      if (*(_DWORD *)(v7 + v72 + v71 - 3) != *(_DWORD *)((char *)a2 + v71 - 3))
        goto LABEL_50;
      if (v68 <= (unint64_t)a2)
      {
        v76 = a2;
      }
      else
      {
        v74 = *a2 ^ *v73;
        if (v74)
        {
          v75 = __clz(__rbit64(v74)) >> 3;
          goto LABEL_48;
        }
        while (1)
        {
          v76 = (_QWORD *)((char *)v69 + v74);
          if ((unint64_t)v69 + v74 >= v68)
            break;
          v77 = *(_QWORD *)(v70 + v72 + v74);
          v74 += 8;
          v78 = *v76 ^ v77;
          if (v78)
          {
            v75 = v74 + (__clz(__rbit64(v78)) >> 3);
            goto LABEL_48;
          }
        }
        v73 = (_QWORD *)(v70 + v72 + v74);
      }
      if ((unint64_t)v76 < a3 - 3 && *(_DWORD *)v73 == *(_DWORD *)v76)
      {
        v76 = (_QWORD *)((char *)v76 + 4);
        v73 = (_QWORD *)((char *)v73 + 4);
      }
      if ((unint64_t)v76 < a3 - 1 && *(unsigned __int16 *)v73 == *(unsigned __int16 *)v76)
      {
        v76 = (_QWORD *)((char *)v76 + 2);
        v73 = (_QWORD *)((char *)v73 + 2);
      }
      if ((unint64_t)v76 < a3 && *(unsigned __int8 *)v73 == *(unsigned __int8 *)v76)
        v76 = (_QWORD *)((char *)v76 + 1);
      v75 = (char *)v76 - (char *)a2;
LABEL_48:
      if (v75 > v71)
      {
        *a4 = v8 + 3 - v72;
        v71 = v75;
        if ((_QWORD *)((char *)a2 + v75) == (_QWORD *)a3)
          goto LABEL_57;
      }
LABEL_50:
      ++v67;
      v75 = v71;
      if (v67 == v57)
        goto LABEL_57;
    }
  }
  v75 = 3;
LABEL_57:
  v79 = 4 * _X15->i8[0];
  v80 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*_X15, vdupq_n_s8(v18)), 4uLL), v79) & 0x8888888888888888;
  if (v80)
    v81 = v15 == 0;
  else
    v81 = 1;
  if (!v81)
  {
    v82 = 0;
    v130 = (_QWORD *)(v7 + v10);
    v83 = *(_DWORD *)(v16 + 24);
    v84 = *(char **)v16;
    v85 = *(_QWORD *)(v16 + 8);
    v86 = *(_QWORD *)v16 - v85;
    do
    {
      v87 = ((__clz(__rbit64(v80)) + (v79 & 0xFC)) >> 2) & 0xF;
      if (v87)
      {
        v88 = *(unsigned int *)(_X11 + 4 * v87);
        if (v88 < v83)
          break;
        _X0 = v85 + v88;
        __asm { PRFM            #0, [X0] }
        v131[v82++] = v88;
        --v15;
      }
      v80 &= v80 - 1;
    }
    while (v80 && v15);
    if (v82)
    {
      v128 = a4;
      v91 = *(_DWORD *)a2;
      v126 = v8 - v10 + v86 + 3;
      v92 = v131;
      do
      {
        v94 = *v92++;
        v93 = v94;
        v95 = v85 + v94;
        if (*(_DWORD *)v95 == v91)
        {
          v96 = a3;
          v97 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v95 + 4), a3, v84, v130);
          a3 = v96;
          if (v97 + 4 > v75)
          {
            *v128 = v126 - v93;
            v75 = v97 + 4;
            if ((_QWORD *)((char *)a2 + v97 + 4) == (_QWORD *)v96)
              break;
          }
        }
        --v82;
      }
      while (v82);
    }
  }
  return v75;
}

unint64_t sub_1D4B7EA1C(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v55;
  uint64_t v56;
  __int16 *v57;
  char v58;
  int8x16_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  int8x16_t v84;
  unint64_t v85;
  BOOL v86;
  uint64_t v87;
  unsigned int v88;
  char *v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  unsigned int v122;
  int v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v131;
  uint64_t v132;
  int v133;
  _QWORD *v134;
  _QWORD *v135;
  int v136;
  _QWORD *v137;
  _DWORD v138[64];
  uint64_t v139;
  int16x8x2_t v140;
  int16x8x2_t v141;

  v139 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = *(_DWORD *)(a1 + 256);
  v10 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > (1 << v9) && *(_DWORD *)(a1 + 40) == 0)
    v12 = (_DWORD)a2 - v7 - (1 << v9);
  else
    v12 = *(_DWORD *)(a1 + 28);
  v13 = *(_DWORD *)(a1 + 268);
  if (v13 >= 5)
    LOBYTE(v13) = 5;
  v14 = *(_QWORD *)(a1 + 96);
  v15 = 1 << v13;
  v16 = *(_QWORD *)(a1 + 248);
  v17 = -1640531535 * *(_DWORD *)a2;
  v18 = v17 >> (24 - *(_DWORD *)(v16 + 52));
  v19 = (v18 >> 3) & 0x1FFFFFE0;
  _X15 = (const __int16 *)(*(_QWORD *)(v16 + 56) + v19);
  _X11 = *(_QWORD *)(v16 + 112) + 4 * v19;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X11,#0x40]
    PRFM            #0, [X15]
  }
  if (*(_DWORD *)(a1 + 300))
  {
    v28 = (v17 ^ v14) >> (24 - *(_DWORD *)(a1 + 52));
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    v29 = a1 + 64;
    v30 = *(unsigned int *)(a1 + 44);
    v132 = *(unsigned int *)(a1 + 24);
    v134 = a4;
    v131 = a3;
    v136 = *(_DWORD *)(a1 + 52);
    v31 = *(_QWORD *)(a1 + 56);
    v32 = *(_QWORD *)(a1 + 112);
    if (v8 - v30 >= 0x181)
    {
      if (v30 <= 0xFFFFFF9F)
      {
        v104 = v30 + 96;
        do
        {
          v105 = ((-1640531535 * *(_DWORD *)(v7 + 8 + v30)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v136);
          v106 = (v105 >> 3) & 0x1FFFFFE0;
          _X25 = v5 + 4 * v106;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v6 + v106;
          __asm { PRFM            #0, [X24] }
          v112 = *(unsigned int *)(v29 + 4 * (v30 & 7));
          *(_DWORD *)(v29 + 4 * (v30 & 7)) = v105;
          v113 = (v112 >> 3) & 0x1FFFFFE0;
          v114 = v5 + 4 * v113;
          v115 = (_BYTE *)(v6 + v113);
          if (((*v115 - 1) & 0x1F) != 0)
            v116 = 0;
          else
            v116 = 31;
          v117 = v116 + ((*v115 - 1) & 0x1F);
          *v115 = v117;
          v115[v117] = v112;
          *(_DWORD *)(v114 + 4 * v117) = v30++;
        }
        while (v30 < v104);
        v32 = *(_QWORD *)(a1 + 112);
        v31 = *(_QWORD *)(a1 + 56);
      }
      v118 = v8 - 32;
      LODWORD(v30) = v8 - 32;
      v119 = (_DWORD)a2 + 1 - (v7 + v118);
      if ((v119 + 1) < 8)
        v120 = v119 + 1;
      else
        v120 = 8;
      if ((unint64_t)a2 + 1 >= v7 + v118)
        v121 = v120;
      else
        v121 = 0;
      if (v118 < v121 + (int)v118)
      {
        v122 = *(_DWORD *)(a1 + 96);
        v123 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          v124 = ((-1640531535 * *(_DWORD *)(v7 + v118)) ^ v122) >> v123;
          v125 = (v124 >> 3) & 0x1FFFFFE0;
          _X27 = v32 + 4 * v125;
          __asm
          {
            PRFM            #0, [X27]
            PRFM            #0, [X27,#0x40]
          }
          _X26 = v31 + v125;
          __asm { PRFM            #0, [X26] }
          *(_DWORD *)(a1 + 4 * (v118++ & 7) + 64) = v124;
          --v121;
        }
        while (v121);
      }
    }
    if (v30 < v8)
    {
      v33 = *(_QWORD *)(a1 + 8) + 8;
      v34 = 24 - *(_DWORD *)(a1 + 52);
      v30 = v30;
      do
      {
        v35 = ((-1640531535 * *(_DWORD *)(v33 + v30)) ^ *(_DWORD *)(a1 + 96)) >> v34;
        v36 = (v35 >> 3) & 0x1FFFFFE0;
        _X27 = v32 + 4 * v36;
        __asm
        {
          PRFM            #0, [X27]
          PRFM            #0, [X27,#0x40]
        }
        _X26 = v31 + v36;
        __asm { PRFM            #0, [X26] }
        v42 = *(unsigned int *)(v29 + 4 * (v30 & 7));
        *(_DWORD *)(v29 + 4 * (v30 & 7)) = v35;
        v43 = (v42 >> 3) & 0x1FFFFFE0;
        v44 = v32 + 4 * v43;
        v45 = (_BYTE *)(v31 + v43);
        if (((*v45 - 1) & 0x1F) != 0)
          v46 = 0;
        else
          v46 = 31;
        v47 = v46 + ((*v45 - 1) & 0x1F);
        *v45 = v47;
        v45[v47] = v42;
        *(_DWORD *)(v44 + 4 * v47) = v30++;
      }
      while (v30 < ((_DWORD)a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    v48 = ((-1640531535 * *(_DWORD *)(v7 + v8 + 8)) ^ v14) >> (24 - v136);
    v49 = (v48 >> 3) & 0x1FFFFFE0;
    _X4 = v5 + 4 * v49;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X2 = v6 + v49;
    __asm { PRFM            #0, [X2] }
    v28 = *(_DWORD *)(v29 + 4 * (v8 & 7));
    *(_DWORD *)(v29 + 4 * (v8 & 7)) = v48;
    v10 = v132;
    a4 = v134;
    a3 = v131;
  }
  *(_DWORD *)(a1 + 104) += v28;
  v55 = (v28 >> 3) & 0x1FFFFFE0;
  v56 = v5 + 4 * v55;
  v57 = (__int16 *)(v6 + v55);
  v140 = vld2q_s16(v57);
  v58 = *(_BYTE *)v57;
  v59 = vdupq_n_s8(v28);
  v60 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v140.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v140.val[1]), 6uLL), 4uLL), 2 * *(_BYTE *)v57) & 0x5555555555555555;
  if (v60)
  {
    v61 = 0;
    v62 = (2 * *(_BYTE *)v57);
    do
    {
      v63 = ((__clz(__rbit64(v60)) + v62) >> 1) & 0x1F;
      if (v63)
      {
        v64 = *(unsigned int *)(v56 + 4 * v63);
        if (v64 < v12)
          break;
        _X20 = v7 + v64;
        __asm { PRFM            #0, [X20] }
        v138[v61++] = v64;
        --v15;
      }
      v60 &= v60 - 1;
    }
    while (v60 && v15);
  }
  else
  {
    v61 = 0;
  }
  v67 = (v58 - 1) & 0x1F;
  if (((v58 - 1) & 0x1F) != 0)
    v68 = 0;
  else
    v68 = 31;
  v69 = v68 + v67;
  *(_BYTE *)v57 = v69;
  *((_BYTE *)v57 + v69) = v28;
  v70 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v70 + 1;
  *(_DWORD *)(v56 + 4 * v69) = v70;
  if (v61)
  {
    v71 = 0;
    v72 = a3 - 7;
    v73 = a2 + 1;
    v74 = v7 + 8;
    v75 = 3;
    while (1)
    {
      v76 = v138[v71];
      v77 = (_QWORD *)(v7 + v76);
      if (*(_DWORD *)(v7 + v76 + v75 - 3) != *(_DWORD *)((char *)a2 + v75 - 3))
        goto LABEL_50;
      if (v72 <= (unint64_t)a2)
      {
        v80 = a2;
      }
      else
      {
        v78 = *a2 ^ *v77;
        if (v78)
        {
          v79 = __clz(__rbit64(v78)) >> 3;
          goto LABEL_48;
        }
        while (1)
        {
          v80 = (_QWORD *)((char *)v73 + v78);
          if ((unint64_t)v73 + v78 >= v72)
            break;
          v81 = *(_QWORD *)(v74 + v76 + v78);
          v78 += 8;
          v82 = *v80 ^ v81;
          if (v82)
          {
            v79 = v78 + (__clz(__rbit64(v82)) >> 3);
            goto LABEL_48;
          }
        }
        v77 = (_QWORD *)(v74 + v76 + v78);
      }
      if ((unint64_t)v80 < a3 - 3 && *(_DWORD *)v77 == *(_DWORD *)v80)
      {
        v80 = (_QWORD *)((char *)v80 + 4);
        v77 = (_QWORD *)((char *)v77 + 4);
      }
      if ((unint64_t)v80 < a3 - 1 && *(unsigned __int16 *)v77 == *(unsigned __int16 *)v80)
      {
        v80 = (_QWORD *)((char *)v80 + 2);
        v77 = (_QWORD *)((char *)v77 + 2);
      }
      if ((unint64_t)v80 < a3 && *(unsigned __int8 *)v77 == *(unsigned __int8 *)v80)
        v80 = (_QWORD *)((char *)v80 + 1);
      v79 = (char *)v80 - (char *)a2;
LABEL_48:
      if (v79 > v75)
      {
        *a4 = v8 + 3 - v76;
        v75 = v79;
        if ((_QWORD *)((char *)a2 + v79) == (_QWORD *)a3)
          goto LABEL_57;
      }
LABEL_50:
      ++v71;
      v79 = v75;
      if (v71 == v61)
        goto LABEL_57;
    }
  }
  v79 = 3;
LABEL_57:
  v83 = 2 * *(_BYTE *)_X15;
  v141 = vld2q_s16(_X15);
  v84 = vdupq_n_s8(v18);
  v85 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v84, (int8x16_t)v141.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v84, (int8x16_t)v141.val[1]), 6uLL), 4uLL), v83) & 0x5555555555555555;
  if (v85)
    v86 = v15 == 0;
  else
    v86 = 1;
  if (!v86)
  {
    v87 = 0;
    v137 = (_QWORD *)(v7 + v10);
    v88 = *(_DWORD *)(v16 + 24);
    v89 = *(char **)v16;
    v90 = *(_QWORD *)(v16 + 8);
    v91 = *(_QWORD *)v16 - v90;
    do
    {
      v92 = ((__clz(__rbit64(v85)) + (v83 & 0xFE)) >> 1) & 0x1F;
      if (v92)
      {
        v93 = *(unsigned int *)(_X11 + 4 * v92);
        if (v93 < v88)
          break;
        _X0 = v90 + v93;
        __asm { PRFM            #0, [X0] }
        v138[v87++] = v93;
        --v15;
      }
      v85 &= v85 - 1;
    }
    while (v85 && v15);
    if (v87)
    {
      v135 = a4;
      v96 = *(_DWORD *)a2;
      v133 = v8 - v10 + v91 + 3;
      v97 = v138;
      do
      {
        v99 = *v97++;
        v98 = v99;
        v100 = v90 + v99;
        if (*(_DWORD *)v100 == v96)
        {
          v101 = a3;
          v102 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v100 + 4), a3, v89, v137);
          a3 = v101;
          if (v102 + 4 > v79)
          {
            *v135 = v133 - v98;
            v79 = v102 + 4;
            if ((_QWORD *)((char *)a2 + v102 + 4) == (_QWORD *)v101)
              break;
          }
        }
        --v87;
      }
      while (v87);
    }
  }
  return v79;
}

unint64_t sub_1D4B7F0E4(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char v61;
  int8x16_t v62;
  int8x8_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  int8x16_t v86;
  int8x8_t v87;
  BOOL v88;
  uint64_t v89;
  unsigned int v90;
  char *v91;
  uint64_t v92;
  int v93;
  char v94;
  unint64_t v95;
  unsigned int v96;
  uint64_t v97;
  int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v137;
  uint64_t v138;
  int v139;
  _QWORD *v140;
  _QWORD *v141;
  int v142;
  _QWORD *v143;
  _DWORD v144[64];
  uint64_t v145;
  int8x16x4_t v146;
  int8x16x4_t v147;

  v145 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = *(_DWORD *)(a1 + 256);
  v10 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > (1 << v9) && *(_DWORD *)(a1 + 40) == 0)
    v12 = (_DWORD)a2 - v7 - (1 << v9);
  else
    v12 = *(_DWORD *)(a1 + 28);
  v13 = *(_DWORD *)(a1 + 268);
  if (v13 >= 6)
    LOBYTE(v13) = 6;
  v14 = *(_QWORD *)(a1 + 96);
  v15 = 1 << v13;
  v16 = *(_QWORD *)(a1 + 248);
  v17 = -1640531535 * *(_DWORD *)a2;
  v18 = v17 >> (24 - *(_DWORD *)(v16 + 52));
  v19 = (v18 >> 2) & 0x3FFFFFC0;
  _X14 = (const char *)(*(_QWORD *)(v16 + 56) + v19);
  _X11 = *(_QWORD *)(v16 + 112) + 4 * v19;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X11,#0x40]
    PRFM            #0, [X14]
    PRFM            #0, [X14,#0x20]
  }
  if (*(_DWORD *)(a1 + 300))
  {
    v29 = (v17 ^ v14) >> (24 - *(_DWORD *)(a1 + 52));
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    v30 = a1 + 64;
    v31 = *(unsigned int *)(a1 + 44);
    v138 = *(unsigned int *)(a1 + 24);
    v140 = a4;
    v137 = a3;
    v142 = *(_DWORD *)(a1 + 52);
    v32 = *(_QWORD *)(a1 + 56);
    v33 = *(_QWORD *)(a1 + 112);
    if (v8 - v31 >= 0x181)
    {
      if (v31 <= 0xFFFFFF9F)
      {
        v108 = v31 + 96;
        do
        {
          v109 = ((-1640531535 * *(_DWORD *)(v7 + 8 + v31)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v142);
          v110 = (v109 >> 2) & 0x3FFFFFC0;
          _X25 = v5 + 4 * v110;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v6 + v110;
          __asm
          {
            PRFM            #0, [X24]
            PRFM            #0, [X24,#0x20]
          }
          v117 = *(unsigned int *)(v30 + 4 * (v31 & 7));
          *(_DWORD *)(v30 + 4 * (v31 & 7)) = v109;
          v118 = (v117 >> 2) & 0x3FFFFFC0;
          v119 = v5 + 4 * v118;
          v120 = (_BYTE *)(v6 + v118);
          if (((*v120 - 1) & 0x3F) != 0)
            v121 = 0;
          else
            v121 = 63;
          v122 = v121 + ((*v120 - 1) & 0x3F);
          *v120 = v122;
          v120[v122] = v117;
          *(_DWORD *)(v119 + 4 * v122) = v31++;
        }
        while (v31 < v108);
        v33 = *(_QWORD *)(a1 + 112);
        v32 = *(_QWORD *)(a1 + 56);
      }
      v123 = v8 - 32;
      LODWORD(v31) = v8 - 32;
      v124 = (_DWORD)a2 + 1 - (v7 + v123);
      if ((v124 + 1) < 8)
        v125 = v124 + 1;
      else
        v125 = 8;
      if ((unint64_t)a2 + 1 >= v7 + v123)
        v126 = v125;
      else
        v126 = 0;
      if (v123 < v126 + (int)v123)
      {
        v127 = *(_DWORD *)(a1 + 96);
        v128 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          v129 = ((-1640531535 * *(_DWORD *)(v7 + v123)) ^ v127) >> v128;
          v130 = (v129 >> 2) & 0x3FFFFFC0;
          _X27 = v33 + 4 * v130;
          __asm
          {
            PRFM            #0, [X27]
            PRFM            #0, [X27,#0x40]
          }
          _X26 = v32 + v130;
          __asm
          {
            PRFM            #0, [X26]
            PRFM            #0, [X26,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v123++ & 7) + 64) = v129;
          --v126;
        }
        while (v126);
      }
    }
    if (v31 < v8)
    {
      v34 = *(_QWORD *)(a1 + 8) + 8;
      v35 = 24 - *(_DWORD *)(a1 + 52);
      v31 = v31;
      do
      {
        v36 = ((-1640531535 * *(_DWORD *)(v34 + v31)) ^ *(_DWORD *)(a1 + 96)) >> v35;
        v37 = (v36 >> 2) & 0x3FFFFFC0;
        _X27 = v33 + 4 * v37;
        __asm
        {
          PRFM            #0, [X27]
          PRFM            #0, [X27,#0x40]
        }
        _X26 = v32 + v37;
        __asm
        {
          PRFM            #0, [X26]
          PRFM            #0, [X26,#0x20]
        }
        v44 = *(unsigned int *)(v30 + 4 * (v31 & 7));
        *(_DWORD *)(v30 + 4 * (v31 & 7)) = v36;
        v45 = (v44 >> 2) & 0x3FFFFFC0;
        v46 = v33 + 4 * v45;
        v47 = (_BYTE *)(v32 + v45);
        if (((*v47 - 1) & 0x3F) != 0)
          v48 = 0;
        else
          v48 = 63;
        v49 = v48 + ((*v47 - 1) & 0x3F);
        *v47 = v49;
        v47[v49] = v44;
        *(_DWORD *)(v46 + 4 * v49) = v31++;
      }
      while (v31 < ((_DWORD)a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    v50 = ((-1640531535 * *(_DWORD *)(v7 + v8 + 8)) ^ v14) >> (24 - v142);
    v51 = (v50 >> 2) & 0x3FFFFFC0;
    _X4 = v5 + 4 * v51;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X2 = v6 + v51;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X2,#0x20]
    }
    v29 = *(_DWORD *)(v30 + 4 * (v8 & 7));
    *(_DWORD *)(v30 + 4 * (v8 & 7)) = v50;
    v10 = v138;
    a4 = v140;
    a3 = v137;
  }
  *(_DWORD *)(a1 + 104) += v29;
  v58 = (v29 >> 2) & 0x3FFFFFC0;
  v59 = v5 + 4 * v58;
  v60 = (char *)(v6 + v58);
  v61 = *v60;
  v146 = vld4q_s8(v60);
  v62 = vdupq_n_s8(v29);
  v146.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v146.val[3], v62), vceqq_s8(v146.val[2], v62), 1uLL), vsriq_n_s8(vceqq_s8(v146.val[1], v62), vceqq_s8(v146.val[0], v62), 1uLL), 2uLL);
  v63 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v146.val[0], v146.val[0], 4uLL), 4uLL);
  v64 = 0;
  if (v63)
  {
    v65 = __ROR8__(*(_QWORD *)&v63, v61);
    do
    {
      v66 = (__clz(__rbit64(v65)) + v61) & 0x3F;
      if (v66)
      {
        v67 = *(unsigned int *)(v59 + 4 * v66);
        if (v67 < v12)
          break;
        _X19 = v7 + v67;
        __asm { PRFM            #0, [X19] }
        v144[v64++] = v67;
        --v15;
      }
      v65 &= v65 - 1;
    }
    while (v65 && v15);
  }
  v70 = (v61 - 1) & 0x3F;
  if (((v61 - 1) & 0x3F) != 0)
    v71 = 0;
  else
    v71 = 63;
  v72 = v71 + v70;
  *v60 = v72;
  v60[v72] = v29;
  v73 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v73 + 1;
  *(_DWORD *)(v59 + 4 * v72) = v73;
  if (v64)
  {
    v74 = 0;
    v75 = a3 - 7;
    v76 = a2 + 1;
    v77 = v7 + 8;
    v78 = 3;
    while (1)
    {
      v79 = v144[v74];
      v80 = (_QWORD *)(v7 + v79);
      if (*(_DWORD *)(v7 + v79 + v78 - 3) != *(_DWORD *)((char *)a2 + v78 - 3))
        goto LABEL_48;
      if (v75 <= (unint64_t)a2)
      {
        v83 = a2;
      }
      else
      {
        v81 = *a2 ^ *v80;
        if (v81)
        {
          v82 = __clz(__rbit64(v81)) >> 3;
          goto LABEL_46;
        }
        while (1)
        {
          v83 = (_QWORD *)((char *)v76 + v81);
          if ((unint64_t)v76 + v81 >= v75)
            break;
          v84 = *(_QWORD *)(v77 + v79 + v81);
          v81 += 8;
          v85 = *v83 ^ v84;
          if (v85)
          {
            v82 = v81 + (__clz(__rbit64(v85)) >> 3);
            goto LABEL_46;
          }
        }
        v80 = (_QWORD *)(v77 + v79 + v81);
      }
      if ((unint64_t)v83 < a3 - 3 && *(_DWORD *)v80 == *(_DWORD *)v83)
      {
        v83 = (_QWORD *)((char *)v83 + 4);
        v80 = (_QWORD *)((char *)v80 + 4);
      }
      if ((unint64_t)v83 < a3 - 1 && *(unsigned __int16 *)v80 == *(unsigned __int16 *)v83)
      {
        v83 = (_QWORD *)((char *)v83 + 2);
        v80 = (_QWORD *)((char *)v80 + 2);
      }
      if ((unint64_t)v83 < a3 && *(unsigned __int8 *)v80 == *(unsigned __int8 *)v83)
        v83 = (_QWORD *)((char *)v83 + 1);
      v82 = (char *)v83 - (char *)a2;
LABEL_46:
      if (v82 > v78)
      {
        *a4 = v8 + 3 - v79;
        v78 = v82;
        if ((_QWORD *)((char *)a2 + v82) == (_QWORD *)a3)
          goto LABEL_55;
      }
LABEL_48:
      ++v74;
      v82 = v78;
      if (v74 == v64)
        goto LABEL_55;
    }
  }
  v82 = 3;
LABEL_55:
  v147 = vld4q_s8(_X14);
  v86 = vdupq_n_s8(v18);
  v147.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v147.val[3], v86), vceqq_s8(v147.val[2], v86), 1uLL), vsriq_n_s8(vceqq_s8(v147.val[1], v86), vceqq_s8(v147.val[0], v86), 1uLL), 2uLL);
  v87 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v147.val[0], v147.val[0], 4uLL), 4uLL);
  if (v87)
    v88 = v15 == 0;
  else
    v88 = 1;
  if (!v88)
  {
    v89 = 0;
    v143 = (_QWORD *)(v7 + v10);
    v90 = *(_DWORD *)(v16 + 24);
    v91 = *(char **)v16;
    v92 = *(_QWORD *)(v16 + 8);
    v93 = *(_QWORD *)v16 - v92;
    v94 = *_X14;
    v95 = __ROR8__(*(_QWORD *)&v87, *_X14);
    do
    {
      v96 = (__clz(__rbit64(v95)) + v94) & 0x3F;
      if (v96)
      {
        v97 = *(unsigned int *)(_X11 + 4 * v96);
        if (v97 < v90)
          break;
        _X0 = v92 + v97;
        __asm { PRFM            #0, [X0] }
        v144[v89++] = v97;
        --v15;
      }
      v95 &= v95 - 1;
    }
    while (v95 && v15);
    if (v89)
    {
      v141 = a4;
      v100 = *(_DWORD *)a2;
      v139 = v8 - v10 + v93 + 3;
      v101 = v144;
      do
      {
        v103 = *v101++;
        v102 = v103;
        v104 = v92 + v103;
        if (*(_DWORD *)v104 == v100)
        {
          v105 = a3;
          v106 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v104 + 4), a3, v91, v143);
          a3 = v105;
          if (v106 + 4 > v82)
          {
            *v141 = v139 - v102;
            v82 = v106 + 4;
            if ((_QWORD *)((char *)a2 + v106 + 4) == (_QWORD *)v105)
              break;
          }
        }
        --v89;
      }
      while (v89);
    }
  }
  return v82;
}

unint64_t sub_1D4B7F7C0(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v52;
  uint64_t v53;
  int8x16_t *v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  unint64_t v80;
  BOOL v81;
  uint64_t v82;
  unsigned int v83;
  char *v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v124;
  uint64_t v125;
  int v126;
  _QWORD *v127;
  _QWORD *v128;
  int v129;
  _QWORD *v130;
  _DWORD v131[64];
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = *(_DWORD *)(a1 + 256);
  v10 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > (1 << v9) && *(_DWORD *)(a1 + 40) == 0)
    v12 = (_DWORD)a2 - v7 - (1 << v9);
  else
    v12 = *(_DWORD *)(a1 + 28);
  v13 = *(_DWORD *)(a1 + 268);
  if (v13 >= 4)
    LOBYTE(v13) = 4;
  v14 = *(_QWORD *)(a1 + 96);
  v15 = 1 << v13;
  v16 = *(_QWORD *)(a1 + 248);
  v17 = 0xCF1BBCDCBB000000 * *a2;
  v18 = v17 >> (56 - *(_DWORD *)(v16 + 52));
  v19 = (v18 >> 4) & 0xFFFFFF0;
  _X15 = (int8x16_t *)(*(_QWORD *)(v16 + 56) + v19);
  _X11 = *(_QWORD *)(v16 + 112) + 4 * v19;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X15]
  }
  if (*(_DWORD *)(a1 + 300))
  {
    v27 = (v17 ^ v14) >> (56 - *(_DWORD *)(a1 + 52));
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    v28 = a1 + 64;
    v29 = *(unsigned int *)(a1 + 44);
    v125 = *(unsigned int *)(a1 + 24);
    v127 = a4;
    v124 = a3;
    v129 = *(_DWORD *)(a1 + 52);
    v30 = *(_QWORD *)(a1 + 56);
    v31 = *(_QWORD *)(a1 + 112);
    if (v8 - v29 >= 0x181)
    {
      if (v29 <= 0xFFFFFF9F)
      {
        v99 = v29 + 96;
        do
        {
          v100 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v7 + 8 + v29)) ^ *(_QWORD *)(a1 + 96)) >> (56
                                                                                               - v129);
          v101 = (v100 >> 4) & 0xFFFFFF0;
          _X25 = v5 + 4 * v101;
          __asm { PRFM            #0, [X25] }
          _X24 = v6 + v101;
          __asm { PRFM            #0, [X24] }
          v106 = *(unsigned int *)(v28 + 4 * (v29 & 7));
          *(_DWORD *)(v28 + 4 * (v29 & 7)) = v100;
          v107 = (v106 >> 4) & 0xFFFFFF0;
          v108 = v5 + 4 * v107;
          v109 = (_BYTE *)(v6 + v107);
          if (((*v109 - 1) & 0xF) != 0)
            v110 = 0;
          else
            v110 = 15;
          v111 = v110 + ((*v109 - 1) & 0xF);
          *v109 = v111;
          v109[v111] = v106;
          *(_DWORD *)(v108 + 4 * v111) = v29++;
        }
        while (v29 < v99);
        v31 = *(_QWORD *)(a1 + 112);
        v30 = *(_QWORD *)(a1 + 56);
      }
      v112 = v8 - 32;
      LODWORD(v29) = v8 - 32;
      v113 = (_DWORD)a2 + 1 - (v7 + v112);
      if ((v113 + 1) < 8)
        v114 = v113 + 1;
      else
        v114 = 8;
      if ((unint64_t)a2 + 1 >= v7 + v112)
        v115 = v114;
      else
        v115 = 0;
      if (v112 < v115 + (int)v112)
      {
        v116 = *(_QWORD *)(a1 + 96);
        v117 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v118 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v7 + v112)) ^ v116) >> v117;
          v119 = (v118 >> 4) & 0xFFFFFF0;
          _X27 = v31 + 4 * v119;
          __asm { PRFM            #0, [X27] }
          _X26 = v30 + v119;
          __asm { PRFM            #0, [X26] }
          *(_DWORD *)(a1 + 4 * (v112++ & 7) + 64) = v118;
          --v115;
        }
        while (v115);
      }
    }
    if (v29 < v8)
    {
      v32 = *(_QWORD *)(a1 + 8) + 8;
      v33 = 56 - *(_DWORD *)(a1 + 52);
      v29 = v29;
      do
      {
        v34 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v32 + v29)) ^ *(_QWORD *)(a1 + 96)) >> v33;
        v35 = (v34 >> 4) & 0xFFFFFF0;
        _X27 = v31 + 4 * v35;
        __asm { PRFM            #0, [X27] }
        _X26 = v30 + v35;
        __asm { PRFM            #0, [X26] }
        v40 = *(unsigned int *)(v28 + 4 * (v29 & 7));
        *(_DWORD *)(v28 + 4 * (v29 & 7)) = v34;
        v41 = (v40 >> 4) & 0xFFFFFF0;
        v42 = v31 + 4 * v41;
        v43 = (_BYTE *)(v30 + v41);
        if (((*v43 - 1) & 0xF) != 0)
          v44 = 0;
        else
          v44 = 15;
        v45 = v44 + ((*v43 - 1) & 0xF);
        *v43 = v45;
        v43[v45] = v40;
        *(_DWORD *)(v42 + 4 * v45) = v29++;
      }
      while (v29 < ((_DWORD)a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    v46 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v7 + v8 + 8)) ^ v14) >> (56 - v129);
    v47 = (v46 >> 4) & 0xFFFFFF0;
    _X4 = v5 + 4 * v47;
    __asm { PRFM            #0, [X4] }
    _X2 = v6 + v47;
    __asm { PRFM            #0, [X2] }
    LODWORD(v27) = *(_DWORD *)(v28 + 4 * (v8 & 7));
    *(_DWORD *)(v28 + 4 * (v8 & 7)) = v46;
    v10 = v125;
    a4 = v127;
    a3 = v124;
  }
  *(_DWORD *)(a1 + 104) += v27;
  v52 = (v27 >> 4) & 0xFFFFFF0;
  v53 = v5 + 4 * v52;
  v54 = (int8x16_t *)(v6 + v52);
  v55 = (char)*v54;
  v56 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v54, vdupq_n_s8(v27)), 4uLL), 4 * v54->i8[0]) & 0x8888888888888888;
  if (v56)
  {
    v57 = 0;
    v58 = (4 * v54->i8[0]);
    do
    {
      v59 = ((__clz(__rbit64(v56)) + v58) >> 2) & 0xF;
      if (v59)
      {
        v60 = *(unsigned int *)(v53 + 4 * v59);
        if (v60 < v12)
          break;
        _X20 = v7 + v60;
        __asm { PRFM            #0, [X20] }
        v131[v57++] = v60;
        --v15;
      }
      v56 &= v56 - 1;
    }
    while (v56 && v15);
  }
  else
  {
    v57 = 0;
  }
  v63 = (v55 - 1) & 0xF;
  if (((v55 - 1) & 0xF) != 0)
    v64 = 0;
  else
    v64 = 15;
  v65 = v64 + v63;
  v54->i8[0] = v65;
  v54->i8[v65] = v27;
  v66 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v66 + 1;
  *(_DWORD *)(v53 + 4 * v65) = v66;
  if (v57)
  {
    v67 = 0;
    v68 = a3 - 7;
    v69 = a2 + 1;
    v70 = v7 + 8;
    v71 = 3;
    while (1)
    {
      v72 = v131[v67];
      v73 = (_QWORD *)(v7 + v72);
      if (*(_DWORD *)(v7 + v72 + v71 - 3) != *(_DWORD *)((char *)a2 + v71 - 3))
        goto LABEL_50;
      if (v68 <= (unint64_t)a2)
      {
        v76 = a2;
      }
      else
      {
        v74 = *a2 ^ *v73;
        if (v74)
        {
          v75 = __clz(__rbit64(v74)) >> 3;
          goto LABEL_48;
        }
        while (1)
        {
          v76 = (_QWORD *)((char *)v69 + v74);
          if ((unint64_t)v69 + v74 >= v68)
            break;
          v77 = *(_QWORD *)(v70 + v72 + v74);
          v74 += 8;
          v78 = *v76 ^ v77;
          if (v78)
          {
            v75 = v74 + (__clz(__rbit64(v78)) >> 3);
            goto LABEL_48;
          }
        }
        v73 = (_QWORD *)(v70 + v72 + v74);
      }
      if ((unint64_t)v76 < a3 - 3 && *(_DWORD *)v73 == *(_DWORD *)v76)
      {
        v76 = (_QWORD *)((char *)v76 + 4);
        v73 = (_QWORD *)((char *)v73 + 4);
      }
      if ((unint64_t)v76 < a3 - 1 && *(unsigned __int16 *)v73 == *(unsigned __int16 *)v76)
      {
        v76 = (_QWORD *)((char *)v76 + 2);
        v73 = (_QWORD *)((char *)v73 + 2);
      }
      if ((unint64_t)v76 < a3 && *(unsigned __int8 *)v73 == *(unsigned __int8 *)v76)
        v76 = (_QWORD *)((char *)v76 + 1);
      v75 = (char *)v76 - (char *)a2;
LABEL_48:
      if (v75 > v71)
      {
        *a4 = v8 + 3 - v72;
        v71 = v75;
        if ((_QWORD *)((char *)a2 + v75) == (_QWORD *)a3)
          goto LABEL_57;
      }
LABEL_50:
      ++v67;
      v75 = v71;
      if (v67 == v57)
        goto LABEL_57;
    }
  }
  v75 = 3;
LABEL_57:
  v79 = 4 * _X15->i8[0];
  v80 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*_X15, vdupq_n_s8(v18)), 4uLL), v79) & 0x8888888888888888;
  if (v80)
    v81 = v15 == 0;
  else
    v81 = 1;
  if (!v81)
  {
    v82 = 0;
    v130 = (_QWORD *)(v7 + v10);
    v83 = *(_DWORD *)(v16 + 24);
    v84 = *(char **)v16;
    v85 = *(_QWORD *)(v16 + 8);
    v86 = *(_QWORD *)v16 - v85;
    do
    {
      v87 = ((__clz(__rbit64(v80)) + (v79 & 0xFC)) >> 2) & 0xF;
      if (v87)
      {
        v88 = *(unsigned int *)(_X11 + 4 * v87);
        if (v88 < v83)
          break;
        _X0 = v85 + v88;
        __asm { PRFM            #0, [X0] }
        v131[v82++] = v88;
        --v15;
      }
      v80 &= v80 - 1;
    }
    while (v80 && v15);
    if (v82)
    {
      v128 = a4;
      v91 = *(_DWORD *)a2;
      v126 = v8 - v10 + v86 + 3;
      v92 = v131;
      do
      {
        v94 = *v92++;
        v93 = v94;
        v95 = v85 + v94;
        if (*(_DWORD *)v95 == v91)
        {
          v96 = (_QWORD *)a3;
          v97 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v95 + 4), a3, v84, v130);
          a3 = (unint64_t)v96;
          if (v97 + 4 > v75)
          {
            *v128 = v126 - v93;
            v75 = v97 + 4;
            if ((_QWORD *)((char *)a2 + v97 + 4) == v96)
              break;
          }
        }
        --v82;
      }
      while (v82);
    }
  }
  return v75;
}

unint64_t sub_1D4B7FE64(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v55;
  uint64_t v56;
  __int16 *v57;
  char v58;
  int8x16_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  int8x16_t v84;
  unint64_t v85;
  BOOL v86;
  uint64_t v87;
  unsigned int v88;
  char *v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v131;
  uint64_t v132;
  int v133;
  _QWORD *v134;
  _QWORD *v135;
  int v136;
  _QWORD *v137;
  _DWORD v138[64];
  uint64_t v139;
  int16x8x2_t v140;
  int16x8x2_t v141;

  v139 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = *(_DWORD *)(a1 + 256);
  v10 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > (1 << v9) && *(_DWORD *)(a1 + 40) == 0)
    v12 = (_DWORD)a2 - v7 - (1 << v9);
  else
    v12 = *(_DWORD *)(a1 + 28);
  v13 = *(_DWORD *)(a1 + 268);
  if (v13 >= 5)
    LOBYTE(v13) = 5;
  v14 = *(_QWORD *)(a1 + 96);
  v15 = 1 << v13;
  v16 = *(_QWORD *)(a1 + 248);
  v17 = 0xCF1BBCDCBB000000 * *a2;
  v18 = v17 >> (56 - *(_DWORD *)(v16 + 52));
  v19 = (v18 >> 3) & 0x1FFFFFE0;
  _X15 = (const __int16 *)(*(_QWORD *)(v16 + 56) + v19);
  _X11 = *(_QWORD *)(v16 + 112) + 4 * v19;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X11,#0x40]
    PRFM            #0, [X15]
  }
  if (*(_DWORD *)(a1 + 300))
  {
    v28 = (v17 ^ v14) >> (56 - *(_DWORD *)(a1 + 52));
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    v29 = a1 + 64;
    v30 = *(unsigned int *)(a1 + 44);
    v132 = *(unsigned int *)(a1 + 24);
    v134 = a4;
    v131 = a3;
    v136 = *(_DWORD *)(a1 + 52);
    v31 = *(_QWORD *)(a1 + 56);
    v32 = *(_QWORD *)(a1 + 112);
    if (v8 - v30 >= 0x181)
    {
      if (v30 <= 0xFFFFFF9F)
      {
        v104 = v30 + 96;
        do
        {
          v105 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v7 + 8 + v30)) ^ *(_QWORD *)(a1 + 96)) >> (56
                                                                                               - v136);
          v106 = (v105 >> 3) & 0x1FFFFFE0;
          _X25 = v5 + 4 * v106;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v6 + v106;
          __asm { PRFM            #0, [X24] }
          v112 = *(unsigned int *)(v29 + 4 * (v30 & 7));
          *(_DWORD *)(v29 + 4 * (v30 & 7)) = v105;
          v113 = (v112 >> 3) & 0x1FFFFFE0;
          v114 = v5 + 4 * v113;
          v115 = (_BYTE *)(v6 + v113);
          if (((*v115 - 1) & 0x1F) != 0)
            v116 = 0;
          else
            v116 = 31;
          v117 = v116 + ((*v115 - 1) & 0x1F);
          *v115 = v117;
          v115[v117] = v112;
          *(_DWORD *)(v114 + 4 * v117) = v30++;
        }
        while (v30 < v104);
        v32 = *(_QWORD *)(a1 + 112);
        v31 = *(_QWORD *)(a1 + 56);
      }
      v118 = v8 - 32;
      LODWORD(v30) = v8 - 32;
      v119 = (_DWORD)a2 + 1 - (v7 + v118);
      if ((v119 + 1) < 8)
        v120 = v119 + 1;
      else
        v120 = 8;
      if ((unint64_t)a2 + 1 >= v7 + v118)
        v121 = v120;
      else
        v121 = 0;
      if (v118 < v121 + (int)v118)
      {
        v122 = *(_QWORD *)(a1 + 96);
        v123 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v124 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v7 + v118)) ^ v122) >> v123;
          v125 = (v124 >> 3) & 0x1FFFFFE0;
          _X27 = v32 + 4 * v125;
          __asm
          {
            PRFM            #0, [X27]
            PRFM            #0, [X27,#0x40]
          }
          _X26 = v31 + v125;
          __asm { PRFM            #0, [X26] }
          *(_DWORD *)(a1 + 4 * (v118++ & 7) + 64) = v124;
          --v121;
        }
        while (v121);
      }
    }
    if (v30 < v8)
    {
      v33 = *(_QWORD *)(a1 + 8) + 8;
      v34 = 56 - *(_DWORD *)(a1 + 52);
      v30 = v30;
      do
      {
        v35 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v33 + v30)) ^ *(_QWORD *)(a1 + 96)) >> v34;
        v36 = (v35 >> 3) & 0x1FFFFFE0;
        _X27 = v32 + 4 * v36;
        __asm
        {
          PRFM            #0, [X27]
          PRFM            #0, [X27,#0x40]
        }
        _X26 = v31 + v36;
        __asm { PRFM            #0, [X26] }
        v42 = *(unsigned int *)(v29 + 4 * (v30 & 7));
        *(_DWORD *)(v29 + 4 * (v30 & 7)) = v35;
        v43 = (v42 >> 3) & 0x1FFFFFE0;
        v44 = v32 + 4 * v43;
        v45 = (_BYTE *)(v31 + v43);
        if (((*v45 - 1) & 0x1F) != 0)
          v46 = 0;
        else
          v46 = 31;
        v47 = v46 + ((*v45 - 1) & 0x1F);
        *v45 = v47;
        v45[v47] = v42;
        *(_DWORD *)(v44 + 4 * v47) = v30++;
      }
      while (v30 < ((_DWORD)a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    v48 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v7 + v8 + 8)) ^ v14) >> (56 - v136);
    v49 = (v48 >> 3) & 0x1FFFFFE0;
    _X4 = v5 + 4 * v49;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X2 = v6 + v49;
    __asm { PRFM            #0, [X2] }
    LODWORD(v28) = *(_DWORD *)(v29 + 4 * (v8 & 7));
    *(_DWORD *)(v29 + 4 * (v8 & 7)) = v48;
    v10 = v132;
    a4 = v134;
    a3 = v131;
  }
  *(_DWORD *)(a1 + 104) += v28;
  v55 = (v28 >> 3) & 0x1FFFFFE0;
  v56 = v5 + 4 * v55;
  v57 = (__int16 *)(v6 + v55);
  v140 = vld2q_s16(v57);
  v58 = *(_BYTE *)v57;
  v59 = vdupq_n_s8(v28);
  v60 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v140.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v140.val[1]), 6uLL), 4uLL), 2 * *(_BYTE *)v57) & 0x5555555555555555;
  if (v60)
  {
    v61 = 0;
    v62 = (2 * *(_BYTE *)v57);
    do
    {
      v63 = ((__clz(__rbit64(v60)) + v62) >> 1) & 0x1F;
      if (v63)
      {
        v64 = *(unsigned int *)(v56 + 4 * v63);
        if (v64 < v12)
          break;
        _X20 = v7 + v64;
        __asm { PRFM            #0, [X20] }
        v138[v61++] = v64;
        --v15;
      }
      v60 &= v60 - 1;
    }
    while (v60 && v15);
  }
  else
  {
    v61 = 0;
  }
  v67 = (v58 - 1) & 0x1F;
  if (((v58 - 1) & 0x1F) != 0)
    v68 = 0;
  else
    v68 = 31;
  v69 = v68 + v67;
  *(_BYTE *)v57 = v69;
  *((_BYTE *)v57 + v69) = v28;
  v70 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v70 + 1;
  *(_DWORD *)(v56 + 4 * v69) = v70;
  if (v61)
  {
    v71 = 0;
    v72 = a3 - 7;
    v73 = a2 + 1;
    v74 = v7 + 8;
    v75 = 3;
    while (1)
    {
      v76 = v138[v71];
      v77 = (_QWORD *)(v7 + v76);
      if (*(_DWORD *)(v7 + v76 + v75 - 3) != *(_DWORD *)((char *)a2 + v75 - 3))
        goto LABEL_50;
      if (v72 <= (unint64_t)a2)
      {
        v80 = a2;
      }
      else
      {
        v78 = *a2 ^ *v77;
        if (v78)
        {
          v79 = __clz(__rbit64(v78)) >> 3;
          goto LABEL_48;
        }
        while (1)
        {
          v80 = (_QWORD *)((char *)v73 + v78);
          if ((unint64_t)v73 + v78 >= v72)
            break;
          v81 = *(_QWORD *)(v74 + v76 + v78);
          v78 += 8;
          v82 = *v80 ^ v81;
          if (v82)
          {
            v79 = v78 + (__clz(__rbit64(v82)) >> 3);
            goto LABEL_48;
          }
        }
        v77 = (_QWORD *)(v74 + v76 + v78);
      }
      if ((unint64_t)v80 < a3 - 3 && *(_DWORD *)v77 == *(_DWORD *)v80)
      {
        v80 = (_QWORD *)((char *)v80 + 4);
        v77 = (_QWORD *)((char *)v77 + 4);
      }
      if ((unint64_t)v80 < a3 - 1 && *(unsigned __int16 *)v77 == *(unsigned __int16 *)v80)
      {
        v80 = (_QWORD *)((char *)v80 + 2);
        v77 = (_QWORD *)((char *)v77 + 2);
      }
      if ((unint64_t)v80 < a3 && *(unsigned __int8 *)v77 == *(unsigned __int8 *)v80)
        v80 = (_QWORD *)((char *)v80 + 1);
      v79 = (char *)v80 - (char *)a2;
LABEL_48:
      if (v79 > v75)
      {
        *a4 = v8 + 3 - v76;
        v75 = v79;
        if ((_QWORD *)((char *)a2 + v79) == (_QWORD *)a3)
          goto LABEL_57;
      }
LABEL_50:
      ++v71;
      v79 = v75;
      if (v71 == v61)
        goto LABEL_57;
    }
  }
  v79 = 3;
LABEL_57:
  v83 = 2 * *(_BYTE *)_X15;
  v141 = vld2q_s16(_X15);
  v84 = vdupq_n_s8(v18);
  v85 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v84, (int8x16_t)v141.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v84, (int8x16_t)v141.val[1]), 6uLL), 4uLL), v83) & 0x5555555555555555;
  if (v85)
    v86 = v15 == 0;
  else
    v86 = 1;
  if (!v86)
  {
    v87 = 0;
    v137 = (_QWORD *)(v7 + v10);
    v88 = *(_DWORD *)(v16 + 24);
    v89 = *(char **)v16;
    v90 = *(_QWORD *)(v16 + 8);
    v91 = *(_QWORD *)v16 - v90;
    do
    {
      v92 = ((__clz(__rbit64(v85)) + (v83 & 0xFE)) >> 1) & 0x1F;
      if (v92)
      {
        v93 = *(unsigned int *)(_X11 + 4 * v92);
        if (v93 < v88)
          break;
        _X0 = v90 + v93;
        __asm { PRFM            #0, [X0] }
        v138[v87++] = v93;
        --v15;
      }
      v85 &= v85 - 1;
    }
    while (v85 && v15);
    if (v87)
    {
      v135 = a4;
      v96 = *(_DWORD *)a2;
      v133 = v8 - v10 + v91 + 3;
      v97 = v138;
      do
      {
        v99 = *v97++;
        v98 = v99;
        v100 = v90 + v99;
        if (*(_DWORD *)v100 == v96)
        {
          v101 = (_QWORD *)a3;
          v102 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v100 + 4), a3, v89, v137);
          a3 = (unint64_t)v101;
          if (v102 + 4 > v79)
          {
            *v135 = v133 - v98;
            v79 = v102 + 4;
            if ((_QWORD *)((char *)a2 + v102 + 4) == v101)
              break;
          }
        }
        --v87;
      }
      while (v87);
    }
  }
  return v79;
}

unint64_t sub_1D4B80530(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char v61;
  int8x16_t v62;
  int8x8_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  int8x16_t v86;
  int8x8_t v87;
  BOOL v88;
  uint64_t v89;
  unsigned int v90;
  char *v91;
  uint64_t v92;
  int v93;
  char v94;
  unint64_t v95;
  unsigned int v96;
  uint64_t v97;
  int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  int v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v137;
  uint64_t v138;
  int v139;
  _QWORD *v140;
  _QWORD *v141;
  int v142;
  _QWORD *v143;
  _DWORD v144[64];
  uint64_t v145;
  int8x16x4_t v146;
  int8x16x4_t v147;

  v145 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = *(_DWORD *)(a1 + 256);
  v10 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > (1 << v9) && *(_DWORD *)(a1 + 40) == 0)
    v12 = (_DWORD)a2 - v7 - (1 << v9);
  else
    v12 = *(_DWORD *)(a1 + 28);
  v13 = *(_DWORD *)(a1 + 268);
  if (v13 >= 6)
    LOBYTE(v13) = 6;
  v14 = *(_QWORD *)(a1 + 96);
  v15 = 1 << v13;
  v16 = *(_QWORD *)(a1 + 248);
  v17 = 0xCF1BBCDCBB000000 * *a2;
  v18 = v17 >> (56 - *(_DWORD *)(v16 + 52));
  v19 = (v18 >> 2) & 0x3FFFFFC0;
  _X14 = (const char *)(*(_QWORD *)(v16 + 56) + v19);
  _X11 = *(_QWORD *)(v16 + 112) + 4 * v19;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X11,#0x40]
    PRFM            #0, [X14]
    PRFM            #0, [X14,#0x20]
  }
  if (*(_DWORD *)(a1 + 300))
  {
    v29 = (v17 ^ v14) >> (56 - *(_DWORD *)(a1 + 52));
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    v30 = a1 + 64;
    v31 = *(unsigned int *)(a1 + 44);
    v138 = *(unsigned int *)(a1 + 24);
    v140 = a4;
    v137 = a3;
    v142 = *(_DWORD *)(a1 + 52);
    v32 = *(_QWORD *)(a1 + 56);
    v33 = *(_QWORD *)(a1 + 112);
    if (v8 - v31 >= 0x181)
    {
      if (v31 <= 0xFFFFFF9F)
      {
        v108 = v31 + 96;
        do
        {
          v109 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v7 + 8 + v31)) ^ *(_QWORD *)(a1 + 96)) >> (56
                                                                                               - v142);
          v110 = (v109 >> 2) & 0x3FFFFFC0;
          _X25 = v5 + 4 * v110;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v6 + v110;
          __asm
          {
            PRFM            #0, [X24]
            PRFM            #0, [X24,#0x20]
          }
          v117 = *(unsigned int *)(v30 + 4 * (v31 & 7));
          *(_DWORD *)(v30 + 4 * (v31 & 7)) = v109;
          v118 = (v117 >> 2) & 0x3FFFFFC0;
          v119 = v5 + 4 * v118;
          v120 = (_BYTE *)(v6 + v118);
          if (((*v120 - 1) & 0x3F) != 0)
            v121 = 0;
          else
            v121 = 63;
          v122 = v121 + ((*v120 - 1) & 0x3F);
          *v120 = v122;
          v120[v122] = v117;
          *(_DWORD *)(v119 + 4 * v122) = v31++;
        }
        while (v31 < v108);
        v33 = *(_QWORD *)(a1 + 112);
        v32 = *(_QWORD *)(a1 + 56);
      }
      v123 = v8 - 32;
      LODWORD(v31) = v8 - 32;
      v124 = (_DWORD)a2 + 1 - (v7 + v123);
      if ((v124 + 1) < 8)
        v125 = v124 + 1;
      else
        v125 = 8;
      if ((unint64_t)a2 + 1 >= v7 + v123)
        v126 = v125;
      else
        v126 = 0;
      if (v123 < v126 + (int)v123)
      {
        v127 = *(_QWORD *)(a1 + 96);
        v128 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v129 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v7 + v123)) ^ v127) >> v128;
          v130 = (v129 >> 2) & 0x3FFFFFC0;
          _X27 = v33 + 4 * v130;
          __asm
          {
            PRFM            #0, [X27]
            PRFM            #0, [X27,#0x40]
          }
          _X26 = v32 + v130;
          __asm
          {
            PRFM            #0, [X26]
            PRFM            #0, [X26,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v123++ & 7) + 64) = v129;
          --v126;
        }
        while (v126);
      }
    }
    if (v31 < v8)
    {
      v34 = *(_QWORD *)(a1 + 8) + 8;
      v35 = 56 - *(_DWORD *)(a1 + 52);
      v31 = v31;
      do
      {
        v36 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v34 + v31)) ^ *(_QWORD *)(a1 + 96)) >> v35;
        v37 = (v36 >> 2) & 0x3FFFFFC0;
        _X27 = v33 + 4 * v37;
        __asm
        {
          PRFM            #0, [X27]
          PRFM            #0, [X27,#0x40]
        }
        _X26 = v32 + v37;
        __asm
        {
          PRFM            #0, [X26]
          PRFM            #0, [X26,#0x20]
        }
        v44 = *(unsigned int *)(v30 + 4 * (v31 & 7));
        *(_DWORD *)(v30 + 4 * (v31 & 7)) = v36;
        v45 = (v44 >> 2) & 0x3FFFFFC0;
        v46 = v33 + 4 * v45;
        v47 = (_BYTE *)(v32 + v45);
        if (((*v47 - 1) & 0x3F) != 0)
          v48 = 0;
        else
          v48 = 63;
        v49 = v48 + ((*v47 - 1) & 0x3F);
        *v47 = v49;
        v47[v49] = v44;
        *(_DWORD *)(v46 + 4 * v49) = v31++;
      }
      while (v31 < ((_DWORD)a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    v50 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v7 + v8 + 8)) ^ v14) >> (56 - v142);
    v51 = (v50 >> 2) & 0x3FFFFFC0;
    _X4 = v5 + 4 * v51;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X2 = v6 + v51;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X2,#0x20]
    }
    LODWORD(v29) = *(_DWORD *)(v30 + 4 * (v8 & 7));
    *(_DWORD *)(v30 + 4 * (v8 & 7)) = v50;
    v10 = v138;
    a4 = v140;
    a3 = v137;
  }
  *(_DWORD *)(a1 + 104) += v29;
  v58 = (v29 >> 2) & 0x3FFFFFC0;
  v59 = v5 + 4 * v58;
  v60 = (char *)(v6 + v58);
  v61 = *v60;
  v146 = vld4q_s8(v60);
  v62 = vdupq_n_s8(v29);
  v146.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v146.val[3], v62), vceqq_s8(v146.val[2], v62), 1uLL), vsriq_n_s8(vceqq_s8(v146.val[1], v62), vceqq_s8(v146.val[0], v62), 1uLL), 2uLL);
  v63 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v146.val[0], v146.val[0], 4uLL), 4uLL);
  v64 = 0;
  if (v63)
  {
    v65 = __ROR8__(*(_QWORD *)&v63, v61);
    do
    {
      v66 = (__clz(__rbit64(v65)) + v61) & 0x3F;
      if (v66)
      {
        v67 = *(unsigned int *)(v59 + 4 * v66);
        if (v67 < v12)
          break;
        _X19 = v7 + v67;
        __asm { PRFM            #0, [X19] }
        v144[v64++] = v67;
        --v15;
      }
      v65 &= v65 - 1;
    }
    while (v65 && v15);
  }
  v70 = (v61 - 1) & 0x3F;
  if (((v61 - 1) & 0x3F) != 0)
    v71 = 0;
  else
    v71 = 63;
  v72 = v71 + v70;
  *v60 = v72;
  v60[v72] = v29;
  v73 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v73 + 1;
  *(_DWORD *)(v59 + 4 * v72) = v73;
  if (v64)
  {
    v74 = 0;
    v75 = a3 - 7;
    v76 = a2 + 1;
    v77 = v7 + 8;
    v78 = 3;
    while (1)
    {
      v79 = v144[v74];
      v80 = (_QWORD *)(v7 + v79);
      if (*(_DWORD *)(v7 + v79 + v78 - 3) != *(_DWORD *)((char *)a2 + v78 - 3))
        goto LABEL_48;
      if (v75 <= (unint64_t)a2)
      {
        v83 = a2;
      }
      else
      {
        v81 = *a2 ^ *v80;
        if (v81)
        {
          v82 = __clz(__rbit64(v81)) >> 3;
          goto LABEL_46;
        }
        while (1)
        {
          v83 = (_QWORD *)((char *)v76 + v81);
          if ((unint64_t)v76 + v81 >= v75)
            break;
          v84 = *(_QWORD *)(v77 + v79 + v81);
          v81 += 8;
          v85 = *v83 ^ v84;
          if (v85)
          {
            v82 = v81 + (__clz(__rbit64(v85)) >> 3);
            goto LABEL_46;
          }
        }
        v80 = (_QWORD *)(v77 + v79 + v81);
      }
      if ((unint64_t)v83 < a3 - 3 && *(_DWORD *)v80 == *(_DWORD *)v83)
      {
        v83 = (_QWORD *)((char *)v83 + 4);
        v80 = (_QWORD *)((char *)v80 + 4);
      }
      if ((unint64_t)v83 < a3 - 1 && *(unsigned __int16 *)v80 == *(unsigned __int16 *)v83)
      {
        v83 = (_QWORD *)((char *)v83 + 2);
        v80 = (_QWORD *)((char *)v80 + 2);
      }
      if ((unint64_t)v83 < a3 && *(unsigned __int8 *)v80 == *(unsigned __int8 *)v83)
        v83 = (_QWORD *)((char *)v83 + 1);
      v82 = (char *)v83 - (char *)a2;
LABEL_46:
      if (v82 > v78)
      {
        *a4 = v8 + 3 - v79;
        v78 = v82;
        if ((_QWORD *)((char *)a2 + v82) == (_QWORD *)a3)
          goto LABEL_55;
      }
LABEL_48:
      ++v74;
      v82 = v78;
      if (v74 == v64)
        goto LABEL_55;
    }
  }
  v82 = 3;
LABEL_55:
  v147 = vld4q_s8(_X14);
  v86 = vdupq_n_s8(v18);
  v147.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v147.val[3], v86), vceqq_s8(v147.val[2], v86), 1uLL), vsriq_n_s8(vceqq_s8(v147.val[1], v86), vceqq_s8(v147.val[0], v86), 1uLL), 2uLL);
  v87 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v147.val[0], v147.val[0], 4uLL), 4uLL);
  if (v87)
    v88 = v15 == 0;
  else
    v88 = 1;
  if (!v88)
  {
    v89 = 0;
    v143 = (_QWORD *)(v7 + v10);
    v90 = *(_DWORD *)(v16 + 24);
    v91 = *(char **)v16;
    v92 = *(_QWORD *)(v16 + 8);
    v93 = *(_QWORD *)v16 - v92;
    v94 = *_X14;
    v95 = __ROR8__(*(_QWORD *)&v87, *_X14);
    do
    {
      v96 = (__clz(__rbit64(v95)) + v94) & 0x3F;
      if (v96)
      {
        v97 = *(unsigned int *)(_X11 + 4 * v96);
        if (v97 < v90)
          break;
        _X0 = v92 + v97;
        __asm { PRFM            #0, [X0] }
        v144[v89++] = v97;
        --v15;
      }
      v95 &= v95 - 1;
    }
    while (v95 && v15);
    if (v89)
    {
      v141 = a4;
      v100 = *(_DWORD *)a2;
      v139 = v8 - v10 + v93 + 3;
      v101 = v144;
      do
      {
        v103 = *v101++;
        v102 = v103;
        v104 = v92 + v103;
        if (*(_DWORD *)v104 == v100)
        {
          v105 = (_QWORD *)a3;
          v106 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v104 + 4), a3, v91, v143);
          a3 = (unint64_t)v105;
          if (v106 + 4 > v82)
          {
            *v141 = v139 - v102;
            v82 = v106 + 4;
            if ((_QWORD *)((char *)a2 + v106 + 4) == v105)
              break;
          }
        }
        --v89;
      }
      while (v89);
    }
  }
  return v82;
}

unint64_t sub_1D4B80C10(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v52;
  uint64_t v53;
  int8x16_t *v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  unint64_t v80;
  BOOL v81;
  uint64_t v82;
  unsigned int v83;
  char *v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  int v91;
  unsigned int *v92;
  unsigned int v93;
  unsigned int v94;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v124;
  uint64_t v125;
  int v126;
  _QWORD *v127;
  _QWORD *v128;
  int v129;
  _QWORD *v130;
  _DWORD v131[64];
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = *(_DWORD *)(a1 + 256);
  v10 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > (1 << v9) && *(_DWORD *)(a1 + 40) == 0)
    v12 = (_DWORD)a2 - v7 - (1 << v9);
  else
    v12 = *(_DWORD *)(a1 + 28);
  v13 = *(_DWORD *)(a1 + 268);
  if (v13 >= 4)
    LOBYTE(v13) = 4;
  v14 = *(_QWORD *)(a1 + 96);
  v15 = 1 << v13;
  v16 = *(_QWORD *)(a1 + 248);
  v17 = 0xCF1BBCDCBF9B0000 * *a2;
  v18 = v17 >> (56 - *(_DWORD *)(v16 + 52));
  v19 = (v18 >> 4) & 0xFFFFFF0;
  _X15 = (int8x16_t *)(*(_QWORD *)(v16 + 56) + v19);
  _X11 = *(_QWORD *)(v16 + 112) + 4 * v19;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X15]
  }
  if (*(_DWORD *)(a1 + 300))
  {
    v27 = (v17 ^ v14) >> (56 - *(_DWORD *)(a1 + 52));
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    v28 = a1 + 64;
    v29 = *(unsigned int *)(a1 + 44);
    v125 = *(unsigned int *)(a1 + 24);
    v127 = a4;
    v124 = a3;
    v129 = *(_DWORD *)(a1 + 52);
    v30 = *(_QWORD *)(a1 + 56);
    v31 = *(_QWORD *)(a1 + 112);
    if (v8 - v29 >= 0x181)
    {
      if (v29 <= 0xFFFFFF9F)
      {
        v99 = v29 + 96;
        do
        {
          v100 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v7 + 8 + v29)) ^ *(_QWORD *)(a1 + 96)) >> (56
                                                                                               - v129);
          v101 = (v100 >> 4) & 0xFFFFFF0;
          _X25 = v5 + 4 * v101;
          __asm { PRFM            #0, [X25] }
          _X24 = v6 + v101;
          __asm { PRFM            #0, [X24] }
          v106 = *(unsigned int *)(v28 + 4 * (v29 & 7));
          *(_DWORD *)(v28 + 4 * (v29 & 7)) = v100;
          v107 = (v106 >> 4) & 0xFFFFFF0;
          v108 = v5 + 4 * v107;
          v109 = (_BYTE *)(v6 + v107);
          if (((*v109 - 1) & 0xF) != 0)
            v110 = 0;
          else
            v110 = 15;
          v111 = v110 + ((*v109 - 1) & 0xF);
          *v109 = v111;
          v109[v111] = v106;
          *(_DWORD *)(v108 + 4 * v111) = v29++;
        }
        while (v29 < v99);
        v31 = *(_QWORD *)(a1 + 112);
        v30 = *(_QWORD *)(a1 + 56);
      }
      v112 = v8 - 32;
      LODWORD(v29) = v8 - 32;
      v113 = (_DWORD)a2 + 1 - (v7 + v112);
      if ((v113 + 1) < 8)
        v114 = v113 + 1;
      else
        v114 = 8;
      if ((unint64_t)a2 + 1 >= v7 + v112)
        v115 = v114;
      else
        v115 = 0;
      if (v112 < v115 + (int)v112)
      {
        v116 = *(_QWORD *)(a1 + 96);
        v117 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v118 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v7 + v112)) ^ v116) >> v117;
          v119 = (v118 >> 4) & 0xFFFFFF0;
          _X27 = v31 + 4 * v119;
          __asm { PRFM            #0, [X27] }
          _X26 = v30 + v119;
          __asm { PRFM            #0, [X26] }
          *(_DWORD *)(a1 + 4 * (v112++ & 7) + 64) = v118;
          --v115;
        }
        while (v115);
      }
    }
    if (v29 < v8)
    {
      v32 = *(_QWORD *)(a1 + 8) + 8;
      v33 = 56 - *(_DWORD *)(a1 + 52);
      v29 = v29;
      do
      {
        v34 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v32 + v29)) ^ *(_QWORD *)(a1 + 96)) >> v33;
        v35 = (v34 >> 4) & 0xFFFFFF0;
        _X27 = v31 + 4 * v35;
        __asm { PRFM            #0, [X27] }
        _X26 = v30 + v35;
        __asm { PRFM            #0, [X26] }
        v40 = *(unsigned int *)(v28 + 4 * (v29 & 7));
        *(_DWORD *)(v28 + 4 * (v29 & 7)) = v34;
        v41 = (v40 >> 4) & 0xFFFFFF0;
        v42 = v31 + 4 * v41;
        v43 = (_BYTE *)(v30 + v41);
        if (((*v43 - 1) & 0xF) != 0)
          v44 = 0;
        else
          v44 = 15;
        v45 = v44 + ((*v43 - 1) & 0xF);
        *v43 = v45;
        v43[v45] = v40;
        *(_DWORD *)(v42 + 4 * v45) = v29++;
      }
      while (v29 < ((_DWORD)a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    v46 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v7 + v8 + 8)) ^ v14) >> (56 - v129);
    v47 = (v46 >> 4) & 0xFFFFFF0;
    _X4 = v5 + 4 * v47;
    __asm { PRFM            #0, [X4] }
    _X2 = v6 + v47;
    __asm { PRFM            #0, [X2] }
    LODWORD(v27) = *(_DWORD *)(v28 + 4 * (v8 & 7));
    *(_DWORD *)(v28 + 4 * (v8 & 7)) = v46;
    v10 = v125;
    a4 = v127;
    a3 = v124;
  }
  *(_DWORD *)(a1 + 104) += v27;
  v52 = (v27 >> 4) & 0xFFFFFF0;
  v53 = v5 + 4 * v52;
  v54 = (int8x16_t *)(v6 + v52);
  v55 = (char)*v54;
  v56 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v54, vdupq_n_s8(v27)), 4uLL), 4 * v54->i8[0]) & 0x8888888888888888;
  if (v56)
  {
    v57 = 0;
    v58 = (4 * v54->i8[0]);
    do
    {
      v59 = ((__clz(__rbit64(v56)) + v58) >> 2) & 0xF;
      if (v59)
      {
        v60 = *(unsigned int *)(v53 + 4 * v59);
        if (v60 < v12)
          break;
        _X20 = v7 + v60;
        __asm { PRFM            #0, [X20] }
        v131[v57++] = v60;
        --v15;
      }
      v56 &= v56 - 1;
    }
    while (v56 && v15);
  }
  else
  {
    v57 = 0;
  }
  v63 = (v55 - 1) & 0xF;
  if (((v55 - 1) & 0xF) != 0)
    v64 = 0;
  else
    v64 = 15;
  v65 = v64 + v63;
  v54->i8[0] = v65;
  v54->i8[v65] = v27;
  v66 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v66 + 1;
  *(_DWORD *)(v53 + 4 * v65) = v66;
  if (v57)
  {
    v67 = 0;
    v68 = a3 - 7;
    v69 = a2 + 1;
    v70 = v7 + 8;
    v71 = 3;
    while (1)
    {
      v72 = v131[v67];
      v73 = (_QWORD *)(v7 + v72);
      if (*(_DWORD *)(v7 + v72 + v71 - 3) != *(_DWORD *)((char *)a2 + v71 - 3))
        goto LABEL_50;
      if (v68 <= (unint64_t)a2)
      {
        v76 = a2;
      }
      else
      {
        v74 = *a2 ^ *v73;
        if (v74)
        {
          v75 = __clz(__rbit64(v74)) >> 3;
          goto LABEL_48;
        }
        while (1)
        {
          v76 = (_QWORD *)((char *)v69 + v74);
          if ((unint64_t)v69 + v74 >= v68)
            break;
          v77 = *(_QWORD *)(v70 + v72 + v74);
          v74 += 8;
          v78 = *v76 ^ v77;
          if (v78)
          {
            v75 = v74 + (__clz(__rbit64(v78)) >> 3);
            goto LABEL_48;
          }
        }
        v73 = (_QWORD *)(v70 + v72 + v74);
      }
      if ((unint64_t)v76 < a3 - 3 && *(_DWORD *)v73 == *(_DWORD *)v76)
      {
        v76 = (_QWORD *)((char *)v76 + 4);
        v73 = (_QWORD *)((char *)v73 + 4);
      }
      if ((unint64_t)v76 < a3 - 1 && *(unsigned __int16 *)v73 == *(unsigned __int16 *)v76)
      {
        v76 = (_QWORD *)((char *)v76 + 2);
        v73 = (_QWORD *)((char *)v73 + 2);
      }
      if ((unint64_t)v76 < a3 && *(unsigned __int8 *)v73 == *(unsigned __int8 *)v76)
        v76 = (_QWORD *)((char *)v76 + 1);
      v75 = (char *)v76 - (char *)a2;
LABEL_48:
      if (v75 > v71)
      {
        *a4 = v8 + 3 - v72;
        v71 = v75;
        if ((_QWORD *)((char *)a2 + v75) == (_QWORD *)a3)
          goto LABEL_57;
      }
LABEL_50:
      ++v67;
      v75 = v71;
      if (v67 == v57)
        goto LABEL_57;
    }
  }
  v75 = 3;
LABEL_57:
  v79 = 4 * _X15->i8[0];
  v80 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*_X15, vdupq_n_s8(v18)), 4uLL), v79) & 0x8888888888888888;
  if (v80)
    v81 = v15 == 0;
  else
    v81 = 1;
  if (!v81)
  {
    v82 = 0;
    v130 = (_QWORD *)(v7 + v10);
    v83 = *(_DWORD *)(v16 + 24);
    v84 = *(char **)v16;
    v85 = *(_QWORD *)(v16 + 8);
    v86 = *(_QWORD *)v16 - v85;
    do
    {
      v87 = ((__clz(__rbit64(v80)) + (v79 & 0xFC)) >> 2) & 0xF;
      if (v87)
      {
        v88 = *(unsigned int *)(_X11 + 4 * v87);
        if (v88 < v83)
          break;
        _X0 = v85 + v88;
        __asm { PRFM            #0, [X0] }
        v131[v82++] = v88;
        --v15;
      }
      v80 &= v80 - 1;
    }
    while (v80 && v15);
    if (v82)
    {
      v128 = a4;
      v91 = *(_DWORD *)a2;
      v126 = v8 - v10 + v86 + 3;
      v92 = v131;
      do
      {
        v94 = *v92++;
        v93 = v94;
        v95 = v85 + v94;
        if (*(_DWORD *)v95 == v91)
        {
          v96 = (_QWORD *)a3;
          v97 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v95 + 4), a3, v84, v130);
          a3 = (unint64_t)v96;
          if (v97 + 4 > v75)
          {
            *v128 = v126 - v93;
            v75 = v97 + 4;
            if ((_QWORD *)((char *)a2 + v97 + 4) == v96)
              break;
          }
        }
        --v82;
      }
      while (v82);
    }
  }
  return v75;
}

unint64_t sub_1D4B812B4(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v55;
  uint64_t v56;
  __int16 *v57;
  char v58;
  int8x16_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  int8x16_t v84;
  unint64_t v85;
  BOOL v86;
  uint64_t v87;
  unsigned int v88;
  char *v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  int v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v131;
  uint64_t v132;
  int v133;
  _QWORD *v134;
  _QWORD *v135;
  int v136;
  _QWORD *v137;
  _DWORD v138[64];
  uint64_t v139;
  int16x8x2_t v140;
  int16x8x2_t v141;

  v139 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = *(_DWORD *)(a1 + 256);
  v10 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > (1 << v9) && *(_DWORD *)(a1 + 40) == 0)
    v12 = (_DWORD)a2 - v7 - (1 << v9);
  else
    v12 = *(_DWORD *)(a1 + 28);
  v13 = *(_DWORD *)(a1 + 268);
  if (v13 >= 5)
    LOBYTE(v13) = 5;
  v14 = *(_QWORD *)(a1 + 96);
  v15 = 1 << v13;
  v16 = *(_QWORD *)(a1 + 248);
  v17 = 0xCF1BBCDCBF9B0000 * *a2;
  v18 = v17 >> (56 - *(_DWORD *)(v16 + 52));
  v19 = (v18 >> 3) & 0x1FFFFFE0;
  _X15 = (const __int16 *)(*(_QWORD *)(v16 + 56) + v19);
  _X11 = *(_QWORD *)(v16 + 112) + 4 * v19;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X11,#0x40]
    PRFM            #0, [X15]
  }
  if (*(_DWORD *)(a1 + 300))
  {
    v28 = (v17 ^ v14) >> (56 - *(_DWORD *)(a1 + 52));
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    v29 = a1 + 64;
    v30 = *(unsigned int *)(a1 + 44);
    v132 = *(unsigned int *)(a1 + 24);
    v134 = a4;
    v131 = a3;
    v136 = *(_DWORD *)(a1 + 52);
    v31 = *(_QWORD *)(a1 + 56);
    v32 = *(_QWORD *)(a1 + 112);
    if (v8 - v30 >= 0x181)
    {
      if (v30 <= 0xFFFFFF9F)
      {
        v104 = v30 + 96;
        do
        {
          v105 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v7 + 8 + v30)) ^ *(_QWORD *)(a1 + 96)) >> (56
                                                                                               - v136);
          v106 = (v105 >> 3) & 0x1FFFFFE0;
          _X25 = v5 + 4 * v106;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v6 + v106;
          __asm { PRFM            #0, [X24] }
          v112 = *(unsigned int *)(v29 + 4 * (v30 & 7));
          *(_DWORD *)(v29 + 4 * (v30 & 7)) = v105;
          v113 = (v112 >> 3) & 0x1FFFFFE0;
          v114 = v5 + 4 * v113;
          v115 = (_BYTE *)(v6 + v113);
          if (((*v115 - 1) & 0x1F) != 0)
            v116 = 0;
          else
            v116 = 31;
          v117 = v116 + ((*v115 - 1) & 0x1F);
          *v115 = v117;
          v115[v117] = v112;
          *(_DWORD *)(v114 + 4 * v117) = v30++;
        }
        while (v30 < v104);
        v32 = *(_QWORD *)(a1 + 112);
        v31 = *(_QWORD *)(a1 + 56);
      }
      v118 = v8 - 32;
      LODWORD(v30) = v8 - 32;
      v119 = (_DWORD)a2 + 1 - (v7 + v118);
      if ((v119 + 1) < 8)
        v120 = v119 + 1;
      else
        v120 = 8;
      if ((unint64_t)a2 + 1 >= v7 + v118)
        v121 = v120;
      else
        v121 = 0;
      if (v118 < v121 + (int)v118)
      {
        v122 = *(_QWORD *)(a1 + 96);
        v123 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v124 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v7 + v118)) ^ v122) >> v123;
          v125 = (v124 >> 3) & 0x1FFFFFE0;
          _X27 = v32 + 4 * v125;
          __asm
          {
            PRFM            #0, [X27]
            PRFM            #0, [X27,#0x40]
          }
          _X26 = v31 + v125;
          __asm { PRFM            #0, [X26] }
          *(_DWORD *)(a1 + 4 * (v118++ & 7) + 64) = v124;
          --v121;
        }
        while (v121);
      }
    }
    if (v30 < v8)
    {
      v33 = *(_QWORD *)(a1 + 8) + 8;
      v34 = 56 - *(_DWORD *)(a1 + 52);
      v30 = v30;
      do
      {
        v35 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v33 + v30)) ^ *(_QWORD *)(a1 + 96)) >> v34;
        v36 = (v35 >> 3) & 0x1FFFFFE0;
        _X27 = v32 + 4 * v36;
        __asm
        {
          PRFM            #0, [X27]
          PRFM            #0, [X27,#0x40]
        }
        _X26 = v31 + v36;
        __asm { PRFM            #0, [X26] }
        v42 = *(unsigned int *)(v29 + 4 * (v30 & 7));
        *(_DWORD *)(v29 + 4 * (v30 & 7)) = v35;
        v43 = (v42 >> 3) & 0x1FFFFFE0;
        v44 = v32 + 4 * v43;
        v45 = (_BYTE *)(v31 + v43);
        if (((*v45 - 1) & 0x1F) != 0)
          v46 = 0;
        else
          v46 = 31;
        v47 = v46 + ((*v45 - 1) & 0x1F);
        *v45 = v47;
        v45[v47] = v42;
        *(_DWORD *)(v44 + 4 * v47) = v30++;
      }
      while (v30 < ((_DWORD)a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    v48 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v7 + v8 + 8)) ^ v14) >> (56 - v136);
    v49 = (v48 >> 3) & 0x1FFFFFE0;
    _X4 = v5 + 4 * v49;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X2 = v6 + v49;
    __asm { PRFM            #0, [X2] }
    LODWORD(v28) = *(_DWORD *)(v29 + 4 * (v8 & 7));
    *(_DWORD *)(v29 + 4 * (v8 & 7)) = v48;
    v10 = v132;
    a4 = v134;
    a3 = v131;
  }
  *(_DWORD *)(a1 + 104) += v28;
  v55 = (v28 >> 3) & 0x1FFFFFE0;
  v56 = v5 + 4 * v55;
  v57 = (__int16 *)(v6 + v55);
  v140 = vld2q_s16(v57);
  v58 = *(_BYTE *)v57;
  v59 = vdupq_n_s8(v28);
  v60 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v140.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v140.val[1]), 6uLL), 4uLL), 2 * *(_BYTE *)v57) & 0x5555555555555555;
  if (v60)
  {
    v61 = 0;
    v62 = (2 * *(_BYTE *)v57);
    do
    {
      v63 = ((__clz(__rbit64(v60)) + v62) >> 1) & 0x1F;
      if (v63)
      {
        v64 = *(unsigned int *)(v56 + 4 * v63);
        if (v64 < v12)
          break;
        _X20 = v7 + v64;
        __asm { PRFM            #0, [X20] }
        v138[v61++] = v64;
        --v15;
      }
      v60 &= v60 - 1;
    }
    while (v60 && v15);
  }
  else
  {
    v61 = 0;
  }
  v67 = (v58 - 1) & 0x1F;
  if (((v58 - 1) & 0x1F) != 0)
    v68 = 0;
  else
    v68 = 31;
  v69 = v68 + v67;
  *(_BYTE *)v57 = v69;
  *((_BYTE *)v57 + v69) = v28;
  v70 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v70 + 1;
  *(_DWORD *)(v56 + 4 * v69) = v70;
  if (v61)
  {
    v71 = 0;
    v72 = a3 - 7;
    v73 = a2 + 1;
    v74 = v7 + 8;
    v75 = 3;
    while (1)
    {
      v76 = v138[v71];
      v77 = (_QWORD *)(v7 + v76);
      if (*(_DWORD *)(v7 + v76 + v75 - 3) != *(_DWORD *)((char *)a2 + v75 - 3))
        goto LABEL_50;
      if (v72 <= (unint64_t)a2)
      {
        v80 = a2;
      }
      else
      {
        v78 = *a2 ^ *v77;
        if (v78)
        {
          v79 = __clz(__rbit64(v78)) >> 3;
          goto LABEL_48;
        }
        while (1)
        {
          v80 = (_QWORD *)((char *)v73 + v78);
          if ((unint64_t)v73 + v78 >= v72)
            break;
          v81 = *(_QWORD *)(v74 + v76 + v78);
          v78 += 8;
          v82 = *v80 ^ v81;
          if (v82)
          {
            v79 = v78 + (__clz(__rbit64(v82)) >> 3);
            goto LABEL_48;
          }
        }
        v77 = (_QWORD *)(v74 + v76 + v78);
      }
      if ((unint64_t)v80 < a3 - 3 && *(_DWORD *)v77 == *(_DWORD *)v80)
      {
        v80 = (_QWORD *)((char *)v80 + 4);
        v77 = (_QWORD *)((char *)v77 + 4);
      }
      if ((unint64_t)v80 < a3 - 1 && *(unsigned __int16 *)v77 == *(unsigned __int16 *)v80)
      {
        v80 = (_QWORD *)((char *)v80 + 2);
        v77 = (_QWORD *)((char *)v77 + 2);
      }
      if ((unint64_t)v80 < a3 && *(unsigned __int8 *)v77 == *(unsigned __int8 *)v80)
        v80 = (_QWORD *)((char *)v80 + 1);
      v79 = (char *)v80 - (char *)a2;
LABEL_48:
      if (v79 > v75)
      {
        *a4 = v8 + 3 - v76;
        v75 = v79;
        if ((_QWORD *)((char *)a2 + v79) == (_QWORD *)a3)
          goto LABEL_57;
      }
LABEL_50:
      ++v71;
      v79 = v75;
      if (v71 == v61)
        goto LABEL_57;
    }
  }
  v79 = 3;
LABEL_57:
  v83 = 2 * *(_BYTE *)_X15;
  v141 = vld2q_s16(_X15);
  v84 = vdupq_n_s8(v18);
  v85 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v84, (int8x16_t)v141.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v84, (int8x16_t)v141.val[1]), 6uLL), 4uLL), v83) & 0x5555555555555555;
  if (v85)
    v86 = v15 == 0;
  else
    v86 = 1;
  if (!v86)
  {
    v87 = 0;
    v137 = (_QWORD *)(v7 + v10);
    v88 = *(_DWORD *)(v16 + 24);
    v89 = *(char **)v16;
    v90 = *(_QWORD *)(v16 + 8);
    v91 = *(_QWORD *)v16 - v90;
    do
    {
      v92 = ((__clz(__rbit64(v85)) + (v83 & 0xFE)) >> 1) & 0x1F;
      if (v92)
      {
        v93 = *(unsigned int *)(_X11 + 4 * v92);
        if (v93 < v88)
          break;
        _X0 = v90 + v93;
        __asm { PRFM            #0, [X0] }
        v138[v87++] = v93;
        --v15;
      }
      v85 &= v85 - 1;
    }
    while (v85 && v15);
    if (v87)
    {
      v135 = a4;
      v96 = *(_DWORD *)a2;
      v133 = v8 - v10 + v91 + 3;
      v97 = v138;
      do
      {
        v99 = *v97++;
        v98 = v99;
        v100 = v90 + v99;
        if (*(_DWORD *)v100 == v96)
        {
          v101 = (_QWORD *)a3;
          v102 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v100 + 4), a3, v89, v137);
          a3 = (unint64_t)v101;
          if (v102 + 4 > v79)
          {
            *v135 = v133 - v98;
            v79 = v102 + 4;
            if ((_QWORD *)((char *)a2 + v102 + 4) == v101)
              break;
          }
        }
        --v87;
      }
      while (v87);
    }
  }
  return v79;
}

unint64_t sub_1D4B81980(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char v61;
  int8x16_t v62;
  int8x8_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  int8x16_t v86;
  int8x8_t v87;
  BOOL v88;
  uint64_t v89;
  unsigned int v90;
  char *v91;
  uint64_t v92;
  int v93;
  char v94;
  unint64_t v95;
  unsigned int v96;
  uint64_t v97;
  int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  int v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v137;
  uint64_t v138;
  int v139;
  _QWORD *v140;
  _QWORD *v141;
  int v142;
  _QWORD *v143;
  _DWORD v144[64];
  uint64_t v145;
  int8x16x4_t v146;
  int8x16x4_t v147;

  v145 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = *(_DWORD *)(a1 + 256);
  v10 = *(unsigned int *)(a1 + 24);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > (1 << v9) && *(_DWORD *)(a1 + 40) == 0)
    v12 = (_DWORD)a2 - v7 - (1 << v9);
  else
    v12 = *(_DWORD *)(a1 + 28);
  v13 = *(_DWORD *)(a1 + 268);
  if (v13 >= 6)
    LOBYTE(v13) = 6;
  v14 = *(_QWORD *)(a1 + 96);
  v15 = 1 << v13;
  v16 = *(_QWORD *)(a1 + 248);
  v17 = 0xCF1BBCDCBF9B0000 * *a2;
  v18 = v17 >> (56 - *(_DWORD *)(v16 + 52));
  v19 = (v18 >> 2) & 0x3FFFFFC0;
  _X14 = (const char *)(*(_QWORD *)(v16 + 56) + v19);
  _X11 = *(_QWORD *)(v16 + 112) + 4 * v19;
  __asm
  {
    PRFM            #0, [X11]
    PRFM            #0, [X11,#0x40]
    PRFM            #0, [X14]
    PRFM            #0, [X14,#0x20]
  }
  if (*(_DWORD *)(a1 + 300))
  {
    v29 = (v17 ^ v14) >> (56 - *(_DWORD *)(a1 + 52));
    *(_DWORD *)(a1 + 44) = v8;
  }
  else
  {
    v30 = a1 + 64;
    v31 = *(unsigned int *)(a1 + 44);
    v138 = *(unsigned int *)(a1 + 24);
    v140 = a4;
    v137 = a3;
    v142 = *(_DWORD *)(a1 + 52);
    v32 = *(_QWORD *)(a1 + 56);
    v33 = *(_QWORD *)(a1 + 112);
    if (v8 - v31 >= 0x181)
    {
      if (v31 <= 0xFFFFFF9F)
      {
        v108 = v31 + 96;
        do
        {
          v109 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v7 + 8 + v31)) ^ *(_QWORD *)(a1 + 96)) >> (56
                                                                                               - v142);
          v110 = (v109 >> 2) & 0x3FFFFFC0;
          _X25 = v5 + 4 * v110;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v6 + v110;
          __asm
          {
            PRFM            #0, [X24]
            PRFM            #0, [X24,#0x20]
          }
          v117 = *(unsigned int *)(v30 + 4 * (v31 & 7));
          *(_DWORD *)(v30 + 4 * (v31 & 7)) = v109;
          v118 = (v117 >> 2) & 0x3FFFFFC0;
          v119 = v5 + 4 * v118;
          v120 = (_BYTE *)(v6 + v118);
          if (((*v120 - 1) & 0x3F) != 0)
            v121 = 0;
          else
            v121 = 63;
          v122 = v121 + ((*v120 - 1) & 0x3F);
          *v120 = v122;
          v120[v122] = v117;
          *(_DWORD *)(v119 + 4 * v122) = v31++;
        }
        while (v31 < v108);
        v33 = *(_QWORD *)(a1 + 112);
        v32 = *(_QWORD *)(a1 + 56);
      }
      v123 = v8 - 32;
      LODWORD(v31) = v8 - 32;
      v124 = (_DWORD)a2 + 1 - (v7 + v123);
      if ((v124 + 1) < 8)
        v125 = v124 + 1;
      else
        v125 = 8;
      if ((unint64_t)a2 + 1 >= v7 + v123)
        v126 = v125;
      else
        v126 = 0;
      if (v123 < v126 + (int)v123)
      {
        v127 = *(_QWORD *)(a1 + 96);
        v128 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v129 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v7 + v123)) ^ v127) >> v128;
          v130 = (v129 >> 2) & 0x3FFFFFC0;
          _X27 = v33 + 4 * v130;
          __asm
          {
            PRFM            #0, [X27]
            PRFM            #0, [X27,#0x40]
          }
          _X26 = v32 + v130;
          __asm
          {
            PRFM            #0, [X26]
            PRFM            #0, [X26,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v123++ & 7) + 64) = v129;
          --v126;
        }
        while (v126);
      }
    }
    if (v31 < v8)
    {
      v34 = *(_QWORD *)(a1 + 8) + 8;
      v35 = 56 - *(_DWORD *)(a1 + 52);
      v31 = v31;
      do
      {
        v36 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v34 + v31)) ^ *(_QWORD *)(a1 + 96)) >> v35;
        v37 = (v36 >> 2) & 0x3FFFFFC0;
        _X27 = v33 + 4 * v37;
        __asm
        {
          PRFM            #0, [X27]
          PRFM            #0, [X27,#0x40]
        }
        _X26 = v32 + v37;
        __asm
        {
          PRFM            #0, [X26]
          PRFM            #0, [X26,#0x20]
        }
        v44 = *(unsigned int *)(v30 + 4 * (v31 & 7));
        *(_DWORD *)(v30 + 4 * (v31 & 7)) = v36;
        v45 = (v44 >> 2) & 0x3FFFFFC0;
        v46 = v33 + 4 * v45;
        v47 = (_BYTE *)(v32 + v45);
        if (((*v47 - 1) & 0x3F) != 0)
          v48 = 0;
        else
          v48 = 63;
        v49 = v48 + ((*v47 - 1) & 0x3F);
        *v47 = v49;
        v47[v49] = v44;
        *(_DWORD *)(v46 + 4 * v49) = v31++;
      }
      while (v31 < ((_DWORD)a2 - v7));
    }
    *(_DWORD *)(a1 + 44) = v8;
    v50 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v7 + v8 + 8)) ^ v14) >> (56 - v142);
    v51 = (v50 >> 2) & 0x3FFFFFC0;
    _X4 = v5 + 4 * v51;
    __asm
    {
      PRFM            #0, [X4]
      PRFM            #0, [X4,#0x40]
    }
    _X2 = v6 + v51;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X2,#0x20]
    }
    LODWORD(v29) = *(_DWORD *)(v30 + 4 * (v8 & 7));
    *(_DWORD *)(v30 + 4 * (v8 & 7)) = v50;
    v10 = v138;
    a4 = v140;
    a3 = v137;
  }
  *(_DWORD *)(a1 + 104) += v29;
  v58 = (v29 >> 2) & 0x3FFFFFC0;
  v59 = v5 + 4 * v58;
  v60 = (char *)(v6 + v58);
  v61 = *v60;
  v146 = vld4q_s8(v60);
  v62 = vdupq_n_s8(v29);
  v146.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v146.val[3], v62), vceqq_s8(v146.val[2], v62), 1uLL), vsriq_n_s8(vceqq_s8(v146.val[1], v62), vceqq_s8(v146.val[0], v62), 1uLL), 2uLL);
  v63 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v146.val[0], v146.val[0], 4uLL), 4uLL);
  v64 = 0;
  if (v63)
  {
    v65 = __ROR8__(*(_QWORD *)&v63, v61);
    do
    {
      v66 = (__clz(__rbit64(v65)) + v61) & 0x3F;
      if (v66)
      {
        v67 = *(unsigned int *)(v59 + 4 * v66);
        if (v67 < v12)
          break;
        _X19 = v7 + v67;
        __asm { PRFM            #0, [X19] }
        v144[v64++] = v67;
        --v15;
      }
      v65 &= v65 - 1;
    }
    while (v65 && v15);
  }
  v70 = (v61 - 1) & 0x3F;
  if (((v61 - 1) & 0x3F) != 0)
    v71 = 0;
  else
    v71 = 63;
  v72 = v71 + v70;
  *v60 = v72;
  v60[v72] = v29;
  v73 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v73 + 1;
  *(_DWORD *)(v59 + 4 * v72) = v73;
  if (v64)
  {
    v74 = 0;
    v75 = a3 - 7;
    v76 = a2 + 1;
    v77 = v7 + 8;
    v78 = 3;
    while (1)
    {
      v79 = v144[v74];
      v80 = (_QWORD *)(v7 + v79);
      if (*(_DWORD *)(v7 + v79 + v78 - 3) != *(_DWORD *)((char *)a2 + v78 - 3))
        goto LABEL_48;
      if (v75 <= (unint64_t)a2)
      {
        v83 = a2;
      }
      else
      {
        v81 = *a2 ^ *v80;
        if (v81)
        {
          v82 = __clz(__rbit64(v81)) >> 3;
          goto LABEL_46;
        }
        while (1)
        {
          v83 = (_QWORD *)((char *)v76 + v81);
          if ((unint64_t)v76 + v81 >= v75)
            break;
          v84 = *(_QWORD *)(v77 + v79 + v81);
          v81 += 8;
          v85 = *v83 ^ v84;
          if (v85)
          {
            v82 = v81 + (__clz(__rbit64(v85)) >> 3);
            goto LABEL_46;
          }
        }
        v80 = (_QWORD *)(v77 + v79 + v81);
      }
      if ((unint64_t)v83 < a3 - 3 && *(_DWORD *)v80 == *(_DWORD *)v83)
      {
        v83 = (_QWORD *)((char *)v83 + 4);
        v80 = (_QWORD *)((char *)v80 + 4);
      }
      if ((unint64_t)v83 < a3 - 1 && *(unsigned __int16 *)v80 == *(unsigned __int16 *)v83)
      {
        v83 = (_QWORD *)((char *)v83 + 2);
        v80 = (_QWORD *)((char *)v80 + 2);
      }
      if ((unint64_t)v83 < a3 && *(unsigned __int8 *)v80 == *(unsigned __int8 *)v83)
        v83 = (_QWORD *)((char *)v83 + 1);
      v82 = (char *)v83 - (char *)a2;
LABEL_46:
      if (v82 > v78)
      {
        *a4 = v8 + 3 - v79;
        v78 = v82;
        if ((_QWORD *)((char *)a2 + v82) == (_QWORD *)a3)
          goto LABEL_55;
      }
LABEL_48:
      ++v74;
      v82 = v78;
      if (v74 == v64)
        goto LABEL_55;
    }
  }
  v82 = 3;
LABEL_55:
  v147 = vld4q_s8(_X14);
  v86 = vdupq_n_s8(v18);
  v147.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v147.val[3], v86), vceqq_s8(v147.val[2], v86), 1uLL), vsriq_n_s8(vceqq_s8(v147.val[1], v86), vceqq_s8(v147.val[0], v86), 1uLL), 2uLL);
  v87 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v147.val[0], v147.val[0], 4uLL), 4uLL);
  if (v87)
    v88 = v15 == 0;
  else
    v88 = 1;
  if (!v88)
  {
    v89 = 0;
    v143 = (_QWORD *)(v7 + v10);
    v90 = *(_DWORD *)(v16 + 24);
    v91 = *(char **)v16;
    v92 = *(_QWORD *)(v16 + 8);
    v93 = *(_QWORD *)v16 - v92;
    v94 = *_X14;
    v95 = __ROR8__(*(_QWORD *)&v87, *_X14);
    do
    {
      v96 = (__clz(__rbit64(v95)) + v94) & 0x3F;
      if (v96)
      {
        v97 = *(unsigned int *)(_X11 + 4 * v96);
        if (v97 < v90)
          break;
        _X0 = v92 + v97;
        __asm { PRFM            #0, [X0] }
        v144[v89++] = v97;
        --v15;
      }
      v95 &= v95 - 1;
    }
    while (v95 && v15);
    if (v89)
    {
      v141 = a4;
      v100 = *(_DWORD *)a2;
      v139 = v8 - v10 + v93 + 3;
      v101 = v144;
      do
      {
        v103 = *v101++;
        v102 = v103;
        v104 = v92 + v103;
        if (*(_DWORD *)v104 == v100)
        {
          v105 = (_QWORD *)a3;
          v106 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v104 + 4), a3, v91, v143);
          a3 = (unint64_t)v105;
          if (v106 + 4 > v82)
          {
            *v141 = v139 - v102;
            v82 = v106 + 4;
            if ((_QWORD *)((char *)a2 + v106 + 4) == v105)
              break;
          }
        }
        --v89;
      }
      while (v89);
    }
  }
  return v82;
}

unint64_t sub_1D4B82060(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v13;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  int v38;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v46;
  unsigned int *v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v64;
  unsigned int v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  _QWORD *v84;

  v4 = *(_QWORD *)(a1 + 128);
  v5 = *(_DWORD *)(a1 + 260);
  v6 = 1 << v5;
  v7 = (1 << v5) - 1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v84 = (_QWORD *)(v8 + v9);
  v10 = (_DWORD)a2 - v8;
  v11 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v8 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0)
    v13 = (_DWORD)a2 - v8 - v11;
  else
    v13 = *(_DWORD *)(a1 + 28);
  _CF = v10 >= v6;
  v15 = v10 - v6;
  if (_CF)
    v16 = v15;
  else
    v16 = 0;
  v17 = 1 << *(_DWORD *)(a1 + 268);
  v18 = *(_QWORD *)(a1 + 248);
  v19 = (-1640531535 * *(_DWORD *)a2) >> (34 - *(_DWORD *)(v18 + 264));
  v20 = *(_QWORD *)(v18 + 112);
  _X2 = v20 + 16 * v19;
  __asm { PRFM            #0, [X2] }
  v25 = *(_DWORD *)(a1 + 300);
  v26 = *(_QWORD *)(a1 + 112);
  v27 = ~(-1 << v5);
  v28 = *(unsigned int *)(a1 + 44);
  v29 = 32 - *(_DWORD *)(a1 + 264);
  if (v28 <= v10)
    v30 = v10;
  else
    v30 = v28;
  do
  {
    if (v30 == v28)
      break;
    v31 = (-1640531535 * *(_DWORD *)(v8 + v28)) >> v29;
    *(_DWORD *)(v4 + 4 * (v28 & v27)) = *(_DWORD *)(v26 + 4 * v31);
    *(_DWORD *)(v26 + 4 * v31) = v28++;
  }
  while (!v25);
  *(_DWORD *)(a1 + 44) = v10;
  v32 = *(_DWORD *)a2;
  v33 = *(_DWORD *)(v26 + 4 * ((-1640531535 * *(_DWORD *)a2) >> v29));
  v80 = (_DWORD)a2 - v8;
  if (v33 >= v13)
  {
    v64 = a3 - 7;
    v65 = v10 + 3;
    v66 = a2 + 1;
    v67 = v8 + 8;
    v34 = 3;
    while (1)
    {
      v68 = v33;
      v69 = (_QWORD *)(v8 + v33);
      if (*(_DWORD *)((char *)v69 + v34 - 3) != *(_DWORD *)((char *)a2 + v34 - 3))
        goto LABEL_61;
      if (v64 <= (unint64_t)a2)
      {
        v72 = a2;
      }
      else
      {
        v70 = *a2 ^ *v69;
        if (v70)
        {
          v71 = __clz(__rbit64(v70)) >> 3;
          goto LABEL_59;
        }
        while (1)
        {
          v72 = (_QWORD *)((char *)v66 + v70);
          if ((unint64_t)v66 + v70 >= v64)
            break;
          v73 = *(_QWORD *)(v67 + v68 + v70);
          v70 += 8;
          v74 = *v72 ^ v73;
          if (v74)
          {
            v71 = v70 + (__clz(__rbit64(v74)) >> 3);
            goto LABEL_59;
          }
        }
        v69 = (_QWORD *)(v67 + v68 + v70);
      }
      if ((unint64_t)v72 < a3 - 3 && *(_DWORD *)v69 == *(_DWORD *)v72)
      {
        v72 = (_QWORD *)((char *)v72 + 4);
        v69 = (_QWORD *)((char *)v69 + 4);
      }
      if ((unint64_t)v72 < a3 - 1 && *(unsigned __int16 *)v69 == *(unsigned __int16 *)v72)
      {
        v72 = (_QWORD *)((char *)v72 + 2);
        v69 = (_QWORD *)((char *)v69 + 2);
      }
      if ((unint64_t)v72 < a3 && *(unsigned __int8 *)v69 == *(unsigned __int8 *)v72)
        v72 = (_QWORD *)((char *)v72 + 1);
      v71 = (char *)v72 - (char *)a2;
LABEL_59:
      if (v71 > v34)
      {
        *a4 = v65 - v68;
        v34 = v71;
        if ((_QWORD *)((char *)a2 + v71) == (_QWORD *)a3)
        {
          v34 = v71;
          goto LABEL_17;
        }
      }
LABEL_61:
      if (v68 > v16)
      {
        if (--v17)
        {
          v33 = *(_DWORD *)(v4 + 4 * (v68 & v7));
          if (v33 >= v13)
            continue;
        }
      }
      goto LABEL_17;
    }
  }
  v34 = 3;
LABEL_17:
  v35 = 0;
  v36 = *(char **)v18;
  v37 = *(_QWORD *)(v18 + 8);
  v38 = *(_QWORD *)v18 - v37 - v9;
  do
  {
    _X14 = v37 + *(unsigned int *)(v20 + 16 * v19 + v35);
    __asm { PRFM            #0, [X14] }
    v35 += 4;
  }
  while (v35 != 12);
  if (v17 >= 3)
    v41 = 3;
  else
    v41 = v17;
  v42 = *(unsigned int *)(v20 + ((16 * v19) | 0xC));
  v43 = *(_QWORD *)(v18 + 128);
  _X9 = v43 + 4 * (v42 >> 8);
  __asm { PRFM            #0, [X9] }
  v77 = v38;
  v75 = v43;
  v76 = v42 >> 8;
  v78 = *(_DWORD *)(v20 + ((16 * v19) | 0xC));
  v79 = v41;
  if ((_DWORD)v41)
  {
    v46 = (_QWORD *)((char *)a2 + 4);
    v81 = v80 + v38 + 3;
    v47 = (unsigned int *)(v20 + 16 * v19);
    do
    {
      v49 = *v47++;
      v48 = v49;
      if (!v49)
        return v34;
      if (*(_DWORD *)(v37 + v48) == v32)
      {
        v50 = sub_1D4B5F19C(v46, (char *)(v37 + v48 + 4), a3, v36, v84);
        v51 = v50 + 4;
        if (v50 + 4 > v34)
        {
          *a4 = (v81 - v48);
          v34 = v50 + 4;
          if ((_QWORD *)((char *)a2 + v51) == (_QWORD *)a3)
            return v51;
        }
      }
    }
    while (--v41);
  }
  if (v17 - v79 >= v78)
    v52 = v78;
  else
    v52 = v17 - v79;
  if (!(_DWORD)v52)
    return v34;
  v53 = (unsigned int *)(v75 + 4 * v76);
  v54 = v52;
  do
  {
    v55 = *v53++;
    _X10 = v37 + v55;
    __asm { PRFM            #0, [X10] }
    --v54;
  }
  while (v54);
  v58 = (unsigned int *)(v75 + 4 * v76);
  v51 = v34;
  do
  {
    v60 = *v58++;
    v59 = v60;
    v61 = v37 + v60;
    if (*(_DWORD *)v61 == v32)
    {
      v62 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v61 + 4), a3, v36, v84);
      if (v62 + 4 > v51)
      {
        *a4 = v80 + v77 + 3 - v59;
        v51 = v62 + 4;
        if ((_QWORD *)((char *)a2 + v62 + 4) == (_QWORD *)a3)
          break;
      }
    }
    LODWORD(v52) = v52 - 1;
  }
  while ((_DWORD)v52);
  return v51;
}

unint64_t sub_1D4B824C4(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int v39;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  unsigned int v54;
  int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;
  int v81;
  _QWORD *v83;

  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_DWORD *)(a1 + 260);
  v7 = 1 << v6;
  v8 = (1 << v6) - 1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unsigned int *)(a1 + 24);
  v83 = (_QWORD *)(v9 + v10);
  v11 = (_DWORD)a2 - v9;
  v12 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v12 && *(_DWORD *)(a1 + 40) == 0)
    v14 = (_DWORD)a2 - v9 - v12;
  else
    v14 = *(_DWORD *)(a1 + 28);
  _CF = v11 >= v7;
  v16 = v11 - v7;
  if (_CF)
    v17 = v16;
  else
    v17 = 0;
  v18 = 1 << *(_DWORD *)(a1 + 268);
  v19 = *(_QWORD *)(a1 + 248);
  v20 = 0xCF1BBCDCBB000000 * *a2;
  v21 = v20 >> (66 - *(_DWORD *)(v19 + 264));
  v22 = *(_QWORD *)(v19 + 112);
  _X3 = v22 + 16 * v21;
  __asm { PRFM            #0, [X3] }
  v27 = *(_DWORD *)(a1 + 300);
  v28 = *(_QWORD *)(a1 + 112);
  v29 = ~(-1 << v6);
  v30 = *(unsigned int *)(a1 + 44);
  v31 = 64 - *(_DWORD *)(a1 + 264);
  if (v30 <= v11)
    v32 = v11;
  else
    v32 = v30;
  do
  {
    if (v32 == v30)
      break;
    v33 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v30)) >> v31;
    *(_DWORD *)(v5 + 4 * (v30 & v29)) = *(_DWORD *)(v28 + 4 * v33);
    *(_DWORD *)(v28 + 4 * v33) = v30++;
  }
  while (!v27);
  *(_DWORD *)(a1 + 44) = v11;
  v34 = *(_DWORD *)(v28 + 4 * (v20 >> v31));
  if (v34 >= v14)
  {
    v64 = a3 - 7;
    v65 = a2 + 1;
    v66 = v9 + 8;
    v35 = 3;
    while (1)
    {
      v67 = v34;
      v68 = (_QWORD *)(v9 + v34);
      if (*(_DWORD *)((char *)v68 + v35 - 3) != *(_DWORD *)((char *)a2 + v35 - 3))
        goto LABEL_61;
      if (v64 <= (unint64_t)a2)
      {
        v71 = a2;
      }
      else
      {
        v69 = *a2 ^ *v68;
        if (v69)
        {
          v70 = __clz(__rbit64(v69)) >> 3;
          goto LABEL_59;
        }
        v72 = 0;
        while (1)
        {
          v71 = &v65[v72];
          if ((unint64_t)&v65[v72] >= v64)
            break;
          v73 = *(_QWORD *)(v66 + v67 + v72 * 8);
          ++v72;
          v74 = *v71 ^ v73;
          if (v74)
          {
            v70 = v72 * 8 + (__clz(__rbit64(v74)) >> 3);
            goto LABEL_59;
          }
        }
        v68 = (_QWORD *)(v66 + v67 + v72 * 8);
      }
      if ((unint64_t)v71 < a3 - 3 && *(_DWORD *)v68 == *(_DWORD *)v71)
      {
        v71 = (_QWORD *)((char *)v71 + 4);
        v68 = (_QWORD *)((char *)v68 + 4);
      }
      if ((unint64_t)v71 < a3 - 1 && *(unsigned __int16 *)v68 == *(unsigned __int16 *)v71)
      {
        v71 = (_QWORD *)((char *)v71 + 2);
        v68 = (_QWORD *)((char *)v68 + 2);
      }
      if ((unint64_t)v71 < a3 && *(unsigned __int8 *)v68 == *(unsigned __int8 *)v71)
        v71 = (_QWORD *)((char *)v71 + 1);
      v70 = (char *)v71 - (char *)a2;
LABEL_59:
      if (v70 > v35)
      {
        *a4 = v11 + 3 - v67;
        v35 = v70;
        if ((_QWORD *)((char *)a2 + v70) == (_QWORD *)a3)
        {
          v35 = v70;
          goto LABEL_17;
        }
      }
LABEL_61:
      if (v67 > v17)
      {
        if (--v18)
        {
          v34 = *(_DWORD *)(v5 + 4 * (v67 & v8));
          if (v34 >= v14)
            continue;
        }
      }
      goto LABEL_17;
    }
  }
  v35 = 3;
LABEL_17:
  v36 = 0;
  v38 = *(char **)v19;
  v37 = *(_QWORD *)(v19 + 8);
  v39 = *(_QWORD *)v19 - v37 - v10;
  do
  {
    _X14 = v37 + *(unsigned int *)(v22 + 16 * v21 + v36);
    __asm { PRFM            #0, [X14] }
    v36 += 4;
  }
  while (v36 != 12);
  if (v18 >= 3)
    v42 = 3;
  else
    v42 = v18;
  v43 = *(_QWORD *)(v19 + 128);
  _X9 = v43 + 4 * ((unint64_t)*(unsigned int *)(v22 + ((16 * v21) | 0xC)) >> 8);
  __asm { PRFM            #0, [X9] }
  v77 = v39;
  v78 = v11;
  v75 = v43;
  v76 = (unint64_t)*(unsigned int *)(v22 + ((16 * v21) | 0xC)) >> 8;
  v79 = *(_DWORD *)(v22 + ((16 * v21) | 0xC));
  v80 = v42;
  if ((_DWORD)v42)
  {
    v81 = v11 + v39 + 3;
    v46 = (unsigned int *)(v22 + 16 * v21);
    do
    {
      v48 = *v46++;
      v47 = v48;
      if (!v48)
        return v35;
      if (*(_DWORD *)(v37 + v47) == *(_DWORD *)a2)
      {
        v49 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v37 + v47 + 4), a3, v38, v83);
        v50 = v49 + 4;
        if (v49 + 4 > v35)
        {
          *a4 = (v81 - v47);
          v35 = v49 + 4;
          if ((_QWORD *)((char *)a2 + v50) == (_QWORD *)a3)
            return v50;
        }
      }
    }
    while (--v42);
  }
  if (v18 - v80 >= v79)
    v51 = v79;
  else
    v51 = v18 - v80;
  if (!(_DWORD)v51)
    return v35;
  v52 = (unsigned int *)(v75 + 4 * v76);
  v53 = v51;
  do
  {
    v54 = *v52++;
    _X10 = v37 + v54;
    __asm { PRFM            #0, [X10] }
    --v53;
  }
  while (v53);
  v57 = *(_DWORD *)a2;
  v58 = (unsigned int *)(v75 + 4 * v76);
  v50 = v35;
  do
  {
    v60 = *v58++;
    v59 = v60;
    v61 = v37 + v60;
    if (*(_DWORD *)v61 == v57)
    {
      v62 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v61 + 4), a3, v38, v83);
      if (v62 + 4 > v50)
      {
        *a4 = v78 + v77 + 3 - v59;
        v50 = v62 + 4;
        if ((_QWORD *)((char *)a2 + v62 + 4) == (_QWORD *)a3)
          break;
      }
    }
    LODWORD(v51) = v51 - 1;
  }
  while ((_DWORD)v51);
  return v50;
}

unint64_t sub_1D4B8291C(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  int v39;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  uint64_t v53;
  unsigned int v54;
  int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  unsigned int v78;
  int v79;
  int v80;
  int v81;
  _QWORD *v83;

  v5 = *(_QWORD *)(a1 + 128);
  v6 = *(_DWORD *)(a1 + 260);
  v7 = 1 << v6;
  v8 = (1 << v6) - 1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unsigned int *)(a1 + 24);
  v83 = (_QWORD *)(v9 + v10);
  v11 = (_DWORD)a2 - v9;
  v12 = 1 << *(_DWORD *)(a1 + 256);
  if ((int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v12 && *(_DWORD *)(a1 + 40) == 0)
    v14 = (_DWORD)a2 - v9 - v12;
  else
    v14 = *(_DWORD *)(a1 + 28);
  _CF = v11 >= v7;
  v16 = v11 - v7;
  if (_CF)
    v17 = v16;
  else
    v17 = 0;
  v18 = 1 << *(_DWORD *)(a1 + 268);
  v19 = *(_QWORD *)(a1 + 248);
  v20 = 0xCF1BBCDCBF9B0000 * *a2;
  v21 = v20 >> (66 - *(_DWORD *)(v19 + 264));
  v22 = *(_QWORD *)(v19 + 112);
  _X3 = v22 + 16 * v21;
  __asm { PRFM            #0, [X3] }
  v27 = *(_DWORD *)(a1 + 300);
  v28 = *(_QWORD *)(a1 + 112);
  v29 = ~(-1 << v6);
  v30 = *(unsigned int *)(a1 + 44);
  v31 = 64 - *(_DWORD *)(a1 + 264);
  if (v30 <= v11)
    v32 = v11;
  else
    v32 = v30;
  do
  {
    if (v32 == v30)
      break;
    v33 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v30)) >> v31;
    *(_DWORD *)(v5 + 4 * (v30 & v29)) = *(_DWORD *)(v28 + 4 * v33);
    *(_DWORD *)(v28 + 4 * v33) = v30++;
  }
  while (!v27);
  *(_DWORD *)(a1 + 44) = v11;
  v34 = *(_DWORD *)(v28 + 4 * (v20 >> v31));
  if (v34 >= v14)
  {
    v64 = a3 - 7;
    v65 = a2 + 1;
    v66 = v9 + 8;
    v35 = 3;
    while (1)
    {
      v67 = v34;
      v68 = (_QWORD *)(v9 + v34);
      if (*(_DWORD *)((char *)v68 + v35 - 3) != *(_DWORD *)((char *)a2 + v35 - 3))
        goto LABEL_61;
      if (v64 <= (unint64_t)a2)
      {
        v71 = a2;
      }
      else
      {
        v69 = *a2 ^ *v68;
        if (v69)
        {
          v70 = __clz(__rbit64(v69)) >> 3;
          goto LABEL_59;
        }
        v72 = 0;
        while (1)
        {
          v71 = &v65[v72];
          if ((unint64_t)&v65[v72] >= v64)
            break;
          v73 = *(_QWORD *)(v66 + v67 + v72 * 8);
          ++v72;
          v74 = *v71 ^ v73;
          if (v74)
          {
            v70 = v72 * 8 + (__clz(__rbit64(v74)) >> 3);
            goto LABEL_59;
          }
        }
        v68 = (_QWORD *)(v66 + v67 + v72 * 8);
      }
      if ((unint64_t)v71 < a3 - 3 && *(_DWORD *)v68 == *(_DWORD *)v71)
      {
        v71 = (_QWORD *)((char *)v71 + 4);
        v68 = (_QWORD *)((char *)v68 + 4);
      }
      if ((unint64_t)v71 < a3 - 1 && *(unsigned __int16 *)v68 == *(unsigned __int16 *)v71)
      {
        v71 = (_QWORD *)((char *)v71 + 2);
        v68 = (_QWORD *)((char *)v68 + 2);
      }
      if ((unint64_t)v71 < a3 && *(unsigned __int8 *)v68 == *(unsigned __int8 *)v71)
        v71 = (_QWORD *)((char *)v71 + 1);
      v70 = (char *)v71 - (char *)a2;
LABEL_59:
      if (v70 > v35)
      {
        *a4 = v11 + 3 - v67;
        v35 = v70;
        if ((_QWORD *)((char *)a2 + v70) == (_QWORD *)a3)
        {
          v35 = v70;
          goto LABEL_17;
        }
      }
LABEL_61:
      if (v67 > v17)
      {
        if (--v18)
        {
          v34 = *(_DWORD *)(v5 + 4 * (v67 & v8));
          if (v34 >= v14)
            continue;
        }
      }
      goto LABEL_17;
    }
  }
  v35 = 3;
LABEL_17:
  v36 = 0;
  v38 = *(char **)v19;
  v37 = *(_QWORD *)(v19 + 8);
  v39 = *(_QWORD *)v19 - v37 - v10;
  do
  {
    _X14 = v37 + *(unsigned int *)(v22 + 16 * v21 + v36);
    __asm { PRFM            #0, [X14] }
    v36 += 4;
  }
  while (v36 != 12);
  if (v18 >= 3)
    v42 = 3;
  else
    v42 = v18;
  v43 = *(_QWORD *)(v19 + 128);
  _X9 = v43 + 4 * ((unint64_t)*(unsigned int *)(v22 + ((16 * v21) | 0xC)) >> 8);
  __asm { PRFM            #0, [X9] }
  v77 = v39;
  v78 = v11;
  v75 = v43;
  v76 = (unint64_t)*(unsigned int *)(v22 + ((16 * v21) | 0xC)) >> 8;
  v79 = *(_DWORD *)(v22 + ((16 * v21) | 0xC));
  v80 = v42;
  if ((_DWORD)v42)
  {
    v81 = v11 + v39 + 3;
    v46 = (unsigned int *)(v22 + 16 * v21);
    do
    {
      v48 = *v46++;
      v47 = v48;
      if (!v48)
        return v35;
      if (*(_DWORD *)(v37 + v47) == *(_DWORD *)a2)
      {
        v49 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v37 + v47 + 4), a3, v38, v83);
        v50 = v49 + 4;
        if (v49 + 4 > v35)
        {
          *a4 = (v81 - v47);
          v35 = v49 + 4;
          if ((_QWORD *)((char *)a2 + v50) == (_QWORD *)a3)
            return v50;
        }
      }
    }
    while (--v42);
  }
  if (v18 - v80 >= v79)
    v51 = v79;
  else
    v51 = v18 - v80;
  if (!(_DWORD)v51)
    return v35;
  v52 = (unsigned int *)(v75 + 4 * v76);
  v53 = v51;
  do
  {
    v54 = *v52++;
    _X10 = v37 + v54;
    __asm { PRFM            #0, [X10] }
    --v53;
  }
  while (v53);
  v57 = *(_DWORD *)a2;
  v58 = (unsigned int *)(v75 + 4 * v76);
  v50 = v35;
  do
  {
    v60 = *v58++;
    v59 = v60;
    v61 = v37 + v60;
    if (*(_DWORD *)v61 == v57)
    {
      v62 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v61 + 4), a3, v38, v83);
      if (v62 + 4 > v50)
      {
        *a4 = v78 + v77 + 3 - v59;
        v50 = v62 + 4;
        if ((_QWORD *)((char *)a2 + v62 + 4) == (_QWORD *)a3)
          break;
      }
    }
    LODWORD(v51) = v51 - 1;
  }
  while ((_DWORD)v51);
  return v50;
}

unint64_t sub_1D4B82D74(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v53;
  uint64_t v54;
  int8x16_t *v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v92;
  uint64_t v93;
  unsigned int v94;
  unint64_t v95;
  unint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  unsigned int v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v135;
  unint64_t v136;
  int v137;
  unint64_t v138;
  int v139;
  unsigned int v140;
  int v141;
  _QWORD *v143;
  unint64_t v144;
  _DWORD v145[64];
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_DWORD *)(a1 + 52);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_DWORD)a2 - v9;
  v11 = 1 << *(_DWORD *)(a1 + 256);
  v12 = *(unsigned int *)(a1 + 24);
  v13 = (_DWORD)a2 - v9 - v11;
  _ZF = (int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF)
    v13 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 268);
  v16 = *(_QWORD *)(a1 + 248);
  v17 = v15 - 4;
  if (v15 >= 4)
    LOBYTE(v15) = 4;
  v18 = *(_QWORD *)(a1 + 96);
  v19 = 1 << v15;
  v20 = -1640531535 * *(_DWORD *)a2;
  v21 = v20 >> (34 - *(_BYTE *)(v16 + 264));
  _X4 = *(_QWORD *)(v16 + 112) + 16 * v21;
  __asm { PRFM            #0, [X4] }
  v27 = 1 << v17;
  if (!(!_ZF & _CF))
    v27 = 0;
  v144 = a3;
  v140 = (_DWORD)a2 - v9;
  if (*(_DWORD *)(a1 + 300))
  {
    v28 = (v20 ^ v18) >> (24 - v8);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    v29 = a1 + 64;
    v30 = *(unsigned int *)(a1 + 44);
    if (v10 - v30 >= 0x181)
    {
      v31 = *(_QWORD *)(a1 + 56);
      v32 = *(_QWORD *)(a1 + 112);
      if (v30 <= 0xFFFFFF9F)
      {
        v110 = v30 + 96;
        do
        {
          v111 = ((-1640531535 * *(_DWORD *)(v9 + 8 + v30)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v8);
          v112 = (v111 >> 4) & 0xFFFFFF0;
          _X23 = v6 + 4 * v112;
          __asm { PRFM            #0, [X23] }
          _X22 = v7 + v112;
          __asm { PRFM            #0, [X22] }
          v117 = *(unsigned int *)(v29 + 4 * (v30 & 7));
          *(_DWORD *)(v29 + 4 * (v30 & 7)) = v111;
          v118 = (v117 >> 4) & 0xFFFFFF0;
          v119 = v6 + 4 * v118;
          v120 = (_BYTE *)(v7 + v118);
          if (((*v120 - 1) & 0xF) != 0)
            v121 = 0;
          else
            v121 = 15;
          v122 = v121 + ((*v120 - 1) & 0xF);
          *v120 = v122;
          v120[v122] = v117;
          *(_DWORD *)(v119 + 4 * v122) = v30++;
        }
        while (v30 < v110);
        v32 = *(_QWORD *)(a1 + 112);
        v31 = *(_QWORD *)(a1 + 56);
        v10 = (_DWORD)a2 - v9;
      }
      v123 = v10 - 32;
      LODWORD(v30) = v10 - 32;
      v124 = (_DWORD)a2 + 1 - (v9 + v123);
      if ((v124 + 1) < 8)
        v125 = v124 + 1;
      else
        v125 = 8;
      if ((unint64_t)a2 + 1 >= v9 + v123)
        v126 = v125;
      else
        v126 = 0;
      if (v123 < v126 + (int)v123)
      {
        v127 = *(_DWORD *)(a1 + 96);
        v128 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          v129 = ((-1640531535 * *(_DWORD *)(v9 + v123)) ^ v127) >> v128;
          v130 = (v129 >> 4) & 0xFFFFFF0;
          _X25 = v32 + 4 * v130;
          __asm { PRFM            #0, [X25] }
          _X24 = v31 + v130;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v123++ & 7) + 64) = v129;
          --v126;
        }
        while (v126);
        v10 = (_DWORD)a2 - v9;
      }
    }
    else
    {
      v31 = *(_QWORD *)(a1 + 56);
      v32 = *(_QWORD *)(a1 + 112);
    }
    if (v30 < v10)
    {
      v33 = *(_QWORD *)(a1 + 8) + 8;
      v34 = 24 - *(_DWORD *)(a1 + 52);
      v30 = v30;
      do
      {
        v35 = ((-1640531535 * *(_DWORD *)(v33 + v30)) ^ *(_DWORD *)(a1 + 96)) >> v34;
        v36 = (v35 >> 4) & 0xFFFFFF0;
        _X25 = v32 + 4 * v36;
        __asm { PRFM            #0, [X25] }
        _X24 = v31 + v36;
        __asm { PRFM            #0, [X24] }
        v41 = *(unsigned int *)(v29 + 4 * (v30 & 7));
        *(_DWORD *)(v29 + 4 * (v30 & 7)) = v35;
        v42 = (v41 >> 4) & 0xFFFFFF0;
        v43 = v32 + 4 * v42;
        v44 = (_BYTE *)(v31 + v42);
        if (((*v44 - 1) & 0xF) != 0)
          v45 = 0;
        else
          v45 = 15;
        v46 = v45 + ((*v44 - 1) & 0xF);
        *v44 = v46;
        v44[v46] = v41;
        *(_DWORD *)(v43 + 4 * v46) = v30++;
      }
      while (v30 < v140);
    }
    v10 = (_DWORD)a2 - v9;
    *(_DWORD *)(a1 + 44) = v140;
    v47 = ((-1640531535 * *(_DWORD *)(v9 + v140 + 8)) ^ v18) >> (24 - v8);
    v48 = (v47 >> 4) & 0xFFFFFF0;
    _X2 = v6 + 4 * v48;
    __asm { PRFM            #0, [X2] }
    _X17 = v7 + v48;
    __asm { PRFM            #0, [X17] }
    v28 = *(_DWORD *)(v29 + 4 * (v140 & 7));
    *(_DWORD *)(v29 + 4 * (v140 & 7)) = v47;
  }
  *(_DWORD *)(a1 + 104) += v28;
  v53 = (v28 >> 4) & 0xFFFFFF0;
  v54 = v6 + 4 * v53;
  v55 = (int8x16_t *)(v7 + v53);
  v56 = (char)*v55;
  v57 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v55, vdupq_n_s8(v28)), 4uLL), 4 * v55->i8[0]) & 0x8888888888888888;
  if (v57)
  {
    v58 = 0;
    v59 = (4 * v55->i8[0]);
    do
    {
      v60 = ((__clz(__rbit64(v57)) + v59) >> 2) & 0xF;
      if (v60)
      {
        v61 = *(unsigned int *)(v54 + 4 * v60);
        if (v61 < v13)
          break;
        _X7 = v9 + v61;
        __asm { PRFM            #0, [X7] }
        v145[v58++] = v61;
        --v19;
      }
      v57 &= v57 - 1;
    }
    while (v57 && v19);
  }
  else
  {
    v58 = 0;
  }
  v64 = (v56 - 1) & 0xF;
  if (((v56 - 1) & 0xF) != 0)
    v65 = 0;
  else
    v65 = 15;
  v66 = v65 + v64;
  v55->i8[0] = v66;
  v55->i8[v66] = v28;
  v143 = (_QWORD *)(v9 + v12);
  v67 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v67 + 1;
  *(_DWORD *)(v54 + 4 * v66) = v67;
  if (v58)
  {
    v68 = 0;
    v69 = a3 - 7;
    v70 = a2 + 1;
    v71 = v9 + 8;
    v72 = 3;
    while (1)
    {
      v73 = v145[v68];
      v74 = (_QWORD *)(v9 + v73);
      if (*(_DWORD *)(v9 + v73 + v72 - 3) != *(_DWORD *)((char *)a2 + v72 - 3))
        goto LABEL_52;
      if (v69 <= (unint64_t)a2)
      {
        v77 = a2;
      }
      else
      {
        v75 = *a2 ^ *v74;
        if (v75)
        {
          v76 = __clz(__rbit64(v75)) >> 3;
          goto LABEL_50;
        }
        v78 = 0;
        while (1)
        {
          v77 = &v70[v78];
          if ((unint64_t)&v70[v78] >= v69)
            break;
          v79 = *(_QWORD *)(v71 + v73 + v78 * 8);
          ++v78;
          v80 = *v77 ^ v79;
          if (v80)
          {
            v76 = v78 * 8 + (__clz(__rbit64(v80)) >> 3);
            goto LABEL_50;
          }
        }
        v74 = (_QWORD *)(v71 + v73 + v78 * 8);
      }
      if ((unint64_t)v77 < a3 - 3 && *(_DWORD *)v74 == *(_DWORD *)v77)
      {
        v77 = (_QWORD *)((char *)v77 + 4);
        v74 = (_QWORD *)((char *)v74 + 4);
      }
      if ((unint64_t)v77 < a3 - 1 && *(unsigned __int16 *)v74 == *(unsigned __int16 *)v77)
      {
        v77 = (_QWORD *)((char *)v77 + 2);
        v74 = (_QWORD *)((char *)v74 + 2);
      }
      if ((unint64_t)v77 < a3 && *(unsigned __int8 *)v74 == *(unsigned __int8 *)v77)
        v77 = (_QWORD *)((char *)v77 + 1);
      v76 = (char *)v77 - (char *)a2;
LABEL_50:
      if (v76 > v72)
      {
        *a4 = v10 + 3 - v73;
        v72 = v76;
        if ((_QWORD *)((char *)a2 + v76) == (_QWORD *)a3)
          goto LABEL_60;
      }
LABEL_52:
      ++v68;
      v76 = v72;
      if (v68 == v58)
        goto LABEL_60;
    }
  }
  v76 = 3;
LABEL_60:
  v81 = 0;
  v82 = *(char **)v16;
  v83 = *(_QWORD *)(v16 + 8);
  v84 = *(_QWORD *)v16 - v83 - v12;
  v85 = *(_QWORD *)(v16 + 112);
  do
  {
    _X16 = v83 + *(unsigned int *)(v85 + 16 * v21 + v81);
    __asm { PRFM            #0, [X16] }
    v81 += 4;
  }
  while (v81 != 12);
  v88 = v19 + v27;
  if ((v19 + v27) >= 3)
    v89 = 3;
  else
    v89 = v88;
  v138 = *(unsigned int *)(v85 + ((16 * v21) | 0xC));
  v139 = v89;
  v135 = *(_QWORD *)(v16 + 128);
  v136 = v138 >> 8;
  _X8 = v135 + 4 * (v138 >> 8);
  __asm { PRFM            #0, [X8] }
  v137 = v84;
  if ((_DWORD)v89)
  {
    v141 = v10 + v84 + 3;
    v92 = (unsigned int *)(v85 + 16 * v21);
    do
    {
      v94 = *v92++;
      v93 = v94;
      if (!v94)
        return v76;
      if (*(_DWORD *)(v83 + v93) == *(_DWORD *)a2)
      {
        v95 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v83 + v93 + 4), a3, v82, v143);
        a3 = v144;
        v96 = v95 + 4;
        if (v95 + 4 > v76)
        {
          *a4 = (v141 - v93);
          v76 = v95 + 4;
          if ((_QWORD *)((char *)a2 + v96) == (_QWORD *)v144)
            return v96;
        }
      }
    }
    while (--v89);
  }
  if (v88 - v139 >= v138)
    v97 = v138;
  else
    v97 = v88 - v139;
  if (!v97)
    return v76;
  v98 = 4 * v97;
  v99 = (unsigned int *)(v135 + 4 * v136);
  do
  {
    v100 = *v99++;
    _X10 = v83 + v100;
    __asm { PRFM            #0, [X10] }
    v98 -= 4;
  }
  while (v98);
  v103 = *(_DWORD *)a2;
  v104 = (unsigned int *)(v135 + 4 * v136);
  v96 = v76;
  do
  {
    v106 = *v104++;
    v105 = v106;
    v107 = v83 + v106;
    if (*(_DWORD *)v107 == v103)
    {
      v108 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v107 + 4), a3, v82, v143);
      a3 = v144;
      if (v108 + 4 > v96)
      {
        *a4 = v140 + v137 + 3 - v105;
        v96 = v108 + 4;
        if ((_QWORD *)((char *)a2 + v108 + 4) == (_QWORD *)v144)
          break;
      }
    }
    --v97;
  }
  while (v97);
  return v96;
}

unint64_t sub_1D4B834C8(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v55;
  uint64_t v56;
  __int16 *v57;
  char v58;
  int8x16_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  unsigned int v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v140;
  unint64_t v141;
  int v142;
  unint64_t v143;
  int v144;
  unsigned int v145;
  int v146;
  _QWORD *v148;
  unint64_t v149;
  _DWORD v150[64];
  uint64_t v151;
  int16x8x2_t v152;

  v151 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_DWORD *)(a1 + 52);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_DWORD)a2 - v9;
  v11 = 1 << *(_DWORD *)(a1 + 256);
  v12 = *(unsigned int *)(a1 + 24);
  v13 = (_DWORD)a2 - v9 - v11;
  _ZF = (int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF)
    v13 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 268);
  v16 = *(_QWORD *)(a1 + 248);
  v17 = v15 - 5;
  if (v15 >= 5)
    LOBYTE(v15) = 5;
  v18 = *(_QWORD *)(a1 + 96);
  v19 = 1 << v15;
  v20 = -1640531535 * *(_DWORD *)a2;
  v21 = v20 >> (34 - *(_BYTE *)(v16 + 264));
  _X4 = *(_QWORD *)(v16 + 112) + 16 * v21;
  __asm { PRFM            #0, [X4] }
  v27 = 1 << v17;
  if (!(!_ZF & _CF))
    v27 = 0;
  v149 = a3;
  v145 = (_DWORD)a2 - v9;
  if (*(_DWORD *)(a1 + 300))
  {
    v28 = (v20 ^ v18) >> (24 - v8);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    v29 = a1 + 64;
    v30 = *(unsigned int *)(a1 + 44);
    if (v10 - v30 >= 0x181)
    {
      v31 = *(_QWORD *)(a1 + 56);
      v32 = *(_QWORD *)(a1 + 112);
      if (v30 <= 0xFFFFFF9F)
      {
        v113 = v30 + 96;
        do
        {
          v114 = ((-1640531535 * *(_DWORD *)(v9 + 8 + v30)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v8);
          v115 = (v114 >> 3) & 0x1FFFFFE0;
          _X23 = v6 + 4 * v115;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v7 + v115;
          __asm { PRFM            #0, [X22] }
          v121 = *(unsigned int *)(v29 + 4 * (v30 & 7));
          *(_DWORD *)(v29 + 4 * (v30 & 7)) = v114;
          v122 = (v121 >> 3) & 0x1FFFFFE0;
          v123 = v6 + 4 * v122;
          v124 = (_BYTE *)(v7 + v122);
          if (((*v124 - 1) & 0x1F) != 0)
            v125 = 0;
          else
            v125 = 31;
          v126 = v125 + ((*v124 - 1) & 0x1F);
          *v124 = v126;
          v124[v126] = v121;
          *(_DWORD *)(v123 + 4 * v126) = v30++;
        }
        while (v30 < v113);
        v32 = *(_QWORD *)(a1 + 112);
        v31 = *(_QWORD *)(a1 + 56);
        v10 = (_DWORD)a2 - v9;
      }
      v127 = v10 - 32;
      LODWORD(v30) = v10 - 32;
      v128 = (_DWORD)a2 + 1 - (v9 + v127);
      if ((v128 + 1) < 8)
        v129 = v128 + 1;
      else
        v129 = 8;
      if ((unint64_t)a2 + 1 >= v9 + v127)
        v130 = v129;
      else
        v130 = 0;
      if (v127 < v130 + (int)v127)
      {
        v131 = *(_DWORD *)(a1 + 96);
        v132 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          v133 = ((-1640531535 * *(_DWORD *)(v9 + v127)) ^ v131) >> v132;
          v134 = (v133 >> 3) & 0x1FFFFFE0;
          _X25 = v32 + 4 * v134;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v31 + v134;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v127++ & 7) + 64) = v133;
          --v130;
        }
        while (v130);
        v10 = (_DWORD)a2 - v9;
      }
    }
    else
    {
      v31 = *(_QWORD *)(a1 + 56);
      v32 = *(_QWORD *)(a1 + 112);
    }
    if (v30 < v10)
    {
      v33 = *(_QWORD *)(a1 + 8) + 8;
      v34 = 24 - *(_DWORD *)(a1 + 52);
      v30 = v30;
      do
      {
        v35 = ((-1640531535 * *(_DWORD *)(v33 + v30)) ^ *(_DWORD *)(a1 + 96)) >> v34;
        v36 = (v35 >> 3) & 0x1FFFFFE0;
        _X25 = v32 + 4 * v36;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v31 + v36;
        __asm { PRFM            #0, [X24] }
        v42 = *(unsigned int *)(v29 + 4 * (v30 & 7));
        *(_DWORD *)(v29 + 4 * (v30 & 7)) = v35;
        v43 = (v42 >> 3) & 0x1FFFFFE0;
        v44 = v32 + 4 * v43;
        v45 = (_BYTE *)(v31 + v43);
        if (((*v45 - 1) & 0x1F) != 0)
          v46 = 0;
        else
          v46 = 31;
        v47 = v46 + ((*v45 - 1) & 0x1F);
        *v45 = v47;
        v45[v47] = v42;
        *(_DWORD *)(v44 + 4 * v47) = v30++;
      }
      while (v30 < v145);
    }
    v10 = (_DWORD)a2 - v9;
    *(_DWORD *)(a1 + 44) = v145;
    v48 = ((-1640531535 * *(_DWORD *)(v9 + v145 + 8)) ^ v18) >> (24 - v8);
    v49 = (v48 >> 3) & 0x1FFFFFE0;
    _X2 = v6 + 4 * v49;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X2,#0x40]
    }
    _X17 = v7 + v49;
    __asm { PRFM            #0, [X17] }
    v28 = *(_DWORD *)(v29 + 4 * (v145 & 7));
    *(_DWORD *)(v29 + 4 * (v145 & 7)) = v48;
  }
  *(_DWORD *)(a1 + 104) += v28;
  v55 = (v28 >> 3) & 0x1FFFFFE0;
  v56 = v6 + 4 * v55;
  v57 = (__int16 *)(v7 + v55);
  v152 = vld2q_s16(v57);
  v58 = *(_BYTE *)v57;
  v59 = vdupq_n_s8(v28);
  v60 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v152.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v152.val[1]), 6uLL), 4uLL), 2 * *(_BYTE *)v57) & 0x5555555555555555;
  if (v60)
  {
    v61 = 0;
    v62 = (2 * *(_BYTE *)v57);
    do
    {
      v63 = ((__clz(__rbit64(v60)) + v62) >> 1) & 0x1F;
      if (v63)
      {
        v64 = *(unsigned int *)(v56 + 4 * v63);
        if (v64 < v13)
          break;
        _X7 = v9 + v64;
        __asm { PRFM            #0, [X7] }
        v150[v61++] = v64;
        --v19;
      }
      v60 &= v60 - 1;
    }
    while (v60 && v19);
  }
  else
  {
    v61 = 0;
  }
  v67 = (v58 - 1) & 0x1F;
  if (((v58 - 1) & 0x1F) != 0)
    v68 = 0;
  else
    v68 = 31;
  v69 = v68 + v67;
  *(_BYTE *)v57 = v69;
  *((_BYTE *)v57 + v69) = v28;
  v148 = (_QWORD *)(v9 + v12);
  v70 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v70 + 1;
  *(_DWORD *)(v56 + 4 * v69) = v70;
  if (v61)
  {
    v71 = 0;
    v72 = a3 - 7;
    v73 = a2 + 1;
    v74 = v9 + 8;
    v75 = 3;
    while (1)
    {
      v76 = v150[v71];
      v77 = (_QWORD *)(v9 + v76);
      if (*(_DWORD *)(v9 + v76 + v75 - 3) != *(_DWORD *)((char *)a2 + v75 - 3))
        goto LABEL_52;
      if (v72 <= (unint64_t)a2)
      {
        v80 = a2;
      }
      else
      {
        v78 = *a2 ^ *v77;
        if (v78)
        {
          v79 = __clz(__rbit64(v78)) >> 3;
          goto LABEL_50;
        }
        v81 = 0;
        while (1)
        {
          v80 = &v73[v81];
          if ((unint64_t)&v73[v81] >= v72)
            break;
          v82 = *(_QWORD *)(v74 + v76 + v81 * 8);
          ++v81;
          v83 = *v80 ^ v82;
          if (v83)
          {
            v79 = v81 * 8 + (__clz(__rbit64(v83)) >> 3);
            goto LABEL_50;
          }
        }
        v77 = (_QWORD *)(v74 + v76 + v81 * 8);
      }
      if ((unint64_t)v80 < a3 - 3 && *(_DWORD *)v77 == *(_DWORD *)v80)
      {
        v80 = (_QWORD *)((char *)v80 + 4);
        v77 = (_QWORD *)((char *)v77 + 4);
      }
      if ((unint64_t)v80 < a3 - 1 && *(unsigned __int16 *)v77 == *(unsigned __int16 *)v80)
      {
        v80 = (_QWORD *)((char *)v80 + 2);
        v77 = (_QWORD *)((char *)v77 + 2);
      }
      if ((unint64_t)v80 < a3 && *(unsigned __int8 *)v77 == *(unsigned __int8 *)v80)
        v80 = (_QWORD *)((char *)v80 + 1);
      v79 = (char *)v80 - (char *)a2;
LABEL_50:
      if (v79 > v75)
      {
        *a4 = v10 + 3 - v76;
        v75 = v79;
        if ((_QWORD *)((char *)a2 + v79) == (_QWORD *)a3)
          goto LABEL_60;
      }
LABEL_52:
      ++v71;
      v79 = v75;
      if (v71 == v61)
        goto LABEL_60;
    }
  }
  v79 = 3;
LABEL_60:
  v84 = 0;
  v85 = *(char **)v16;
  v86 = *(_QWORD *)(v16 + 8);
  v87 = *(_QWORD *)v16 - v86 - v12;
  v88 = *(_QWORD *)(v16 + 112);
  do
  {
    _X16 = v86 + *(unsigned int *)(v88 + 16 * v21 + v84);
    __asm { PRFM            #0, [X16] }
    v84 += 4;
  }
  while (v84 != 12);
  v91 = v19 + v27;
  if ((v19 + v27) >= 3)
    v92 = 3;
  else
    v92 = v91;
  v143 = *(unsigned int *)(v88 + ((16 * v21) | 0xC));
  v144 = v92;
  v140 = *(_QWORD *)(v16 + 128);
  v141 = v143 >> 8;
  _X8 = v140 + 4 * (v143 >> 8);
  __asm { PRFM            #0, [X8] }
  v142 = v87;
  if ((_DWORD)v92)
  {
    v146 = v10 + v87 + 3;
    v95 = (unsigned int *)(v88 + 16 * v21);
    do
    {
      v97 = *v95++;
      v96 = v97;
      if (!v97)
        return v79;
      if (*(_DWORD *)(v86 + v96) == *(_DWORD *)a2)
      {
        v98 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v86 + v96 + 4), a3, v85, v148);
        a3 = v149;
        v99 = v98 + 4;
        if (v98 + 4 > v79)
        {
          *a4 = (v146 - v96);
          v79 = v98 + 4;
          if ((_QWORD *)((char *)a2 + v99) == (_QWORD *)v149)
            return v99;
        }
      }
    }
    while (--v92);
  }
  if (v91 - v144 >= v143)
    v100 = v143;
  else
    v100 = v91 - v144;
  if (!v100)
    return v79;
  v101 = 4 * v100;
  v102 = (unsigned int *)(v140 + 4 * v141);
  do
  {
    v103 = *v102++;
    _X10 = v86 + v103;
    __asm { PRFM            #0, [X10] }
    v101 -= 4;
  }
  while (v101);
  v106 = *(_DWORD *)a2;
  v107 = (unsigned int *)(v140 + 4 * v141);
  v99 = v79;
  do
  {
    v109 = *v107++;
    v108 = v109;
    v110 = v86 + v109;
    if (*(_DWORD *)v110 == v106)
    {
      v111 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v110 + 4), a3, v85, v148);
      a3 = v149;
      if (v111 + 4 > v99)
      {
        *a4 = v145 + v142 + 3 - v108;
        v99 = v111 + 4;
        if ((_QWORD *)((char *)a2 + v111 + 4) == (_QWORD *)v149)
          break;
      }
    }
    --v100;
  }
  while (v100);
  return v99;
}

unint64_t sub_1D4B83C34(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char v60;
  int8x16_t v61;
  int8x8_t v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unsigned int v93;
  uint64_t v94;
  unsigned int *v97;
  uint64_t v98;
  unsigned int v99;
  unint64_t v100;
  unint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  int v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v144;
  unint64_t v145;
  int v146;
  unint64_t v147;
  int v148;
  unsigned int v149;
  int v150;
  _QWORD *v152;
  unint64_t v153;
  _DWORD v154[64];
  uint64_t v155;
  int8x16x4_t v156;

  v155 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_DWORD *)(a1 + 52);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_DWORD)a2 - v9;
  v11 = 1 << *(_DWORD *)(a1 + 256);
  v12 = *(unsigned int *)(a1 + 24);
  v13 = (_DWORD)a2 - v9 - v11;
  _ZF = (int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF)
    v13 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 268);
  v16 = *(_QWORD *)(a1 + 248);
  v17 = v15 - 6;
  if (v15 >= 6)
    LOBYTE(v15) = 6;
  v18 = *(_QWORD *)(a1 + 96);
  v19 = 1 << v15;
  v20 = -1640531535 * *(_DWORD *)a2;
  v21 = v20 >> (34 - *(_BYTE *)(v16 + 264));
  _X4 = *(_QWORD *)(v16 + 112) + 16 * v21;
  __asm { PRFM            #0, [X4] }
  v27 = 1 << v17;
  if (!(!_ZF & _CF))
    v27 = 0;
  v153 = a3;
  v149 = (_DWORD)a2 - v9;
  if (*(_DWORD *)(a1 + 300))
  {
    v28 = (v20 ^ v18) >> (24 - v8);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    v29 = a1 + 64;
    v30 = *(unsigned int *)(a1 + 44);
    if (v10 - v30 >= 0x181)
    {
      v31 = *(_QWORD *)(a1 + 56);
      v32 = *(_QWORD *)(a1 + 112);
      if (v30 <= 0xFFFFFF9F)
      {
        v115 = v30 + 96;
        do
        {
          v116 = ((-1640531535 * *(_DWORD *)(v9 + 8 + v30)) ^ *(_DWORD *)(a1 + 96)) >> (24 - v8);
          v117 = (v116 >> 2) & 0x3FFFFFC0;
          _X23 = v6 + 4 * v117;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v7 + v117;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x20]
          }
          v124 = *(unsigned int *)(v29 + 4 * (v30 & 7));
          *(_DWORD *)(v29 + 4 * (v30 & 7)) = v116;
          v125 = (v124 >> 2) & 0x3FFFFFC0;
          v126 = v6 + 4 * v125;
          v127 = (_BYTE *)(v7 + v125);
          if (((*v127 - 1) & 0x3F) != 0)
            v128 = 0;
          else
            v128 = 63;
          v129 = v128 + ((*v127 - 1) & 0x3F);
          *v127 = v129;
          v127[v129] = v124;
          *(_DWORD *)(v126 + 4 * v129) = v30++;
        }
        while (v30 < v115);
        v32 = *(_QWORD *)(a1 + 112);
        v31 = *(_QWORD *)(a1 + 56);
        v10 = (_DWORD)a2 - v9;
      }
      v130 = v10 - 32;
      LODWORD(v30) = v10 - 32;
      v131 = (_DWORD)a2 + 1 - (v9 + v130);
      if ((v131 + 1) < 8)
        v132 = v131 + 1;
      else
        v132 = 8;
      if ((unint64_t)a2 + 1 >= v9 + v130)
        v133 = v132;
      else
        v133 = 0;
      if (v130 < v133 + (int)v130)
      {
        v134 = *(_DWORD *)(a1 + 96);
        v135 = 24 - *(_DWORD *)(a1 + 52);
        do
        {
          v136 = ((-1640531535 * *(_DWORD *)(v9 + v130)) ^ v134) >> v135;
          v137 = (v136 >> 2) & 0x3FFFFFC0;
          _X25 = v32 + 4 * v137;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v31 + v137;
          __asm
          {
            PRFM            #0, [X24]
            PRFM            #0, [X24,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v130++ & 7) + 64) = v136;
          --v133;
        }
        while (v133);
        v10 = (_DWORD)a2 - v9;
      }
    }
    else
    {
      v31 = *(_QWORD *)(a1 + 56);
      v32 = *(_QWORD *)(a1 + 112);
    }
    if (v30 < v10)
    {
      v33 = *(_QWORD *)(a1 + 8) + 8;
      v34 = 24 - *(_DWORD *)(a1 + 52);
      v30 = v30;
      do
      {
        v35 = ((-1640531535 * *(_DWORD *)(v33 + v30)) ^ *(_DWORD *)(a1 + 96)) >> v34;
        v36 = (v35 >> 2) & 0x3FFFFFC0;
        _X25 = v32 + 4 * v36;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v31 + v36;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x20]
        }
        v43 = *(unsigned int *)(v29 + 4 * (v30 & 7));
        *(_DWORD *)(v29 + 4 * (v30 & 7)) = v35;
        v44 = (v43 >> 2) & 0x3FFFFFC0;
        v45 = v32 + 4 * v44;
        v46 = (_BYTE *)(v31 + v44);
        if (((*v46 - 1) & 0x3F) != 0)
          v47 = 0;
        else
          v47 = 63;
        v48 = v47 + ((*v46 - 1) & 0x3F);
        *v46 = v48;
        v46[v48] = v43;
        *(_DWORD *)(v45 + 4 * v48) = v30++;
      }
      while (v30 < v149);
    }
    v10 = (_DWORD)a2 - v9;
    *(_DWORD *)(a1 + 44) = v149;
    v49 = ((-1640531535 * *(_DWORD *)(v9 + v149 + 8)) ^ v18) >> (24 - v8);
    v50 = (v49 >> 2) & 0x3FFFFFC0;
    _X2 = v6 + 4 * v50;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X2,#0x40]
    }
    _X17 = v7 + v50;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X17,#0x20]
    }
    v28 = *(_DWORD *)(v29 + 4 * (v149 & 7));
    *(_DWORD *)(v29 + 4 * (v149 & 7)) = v49;
  }
  *(_DWORD *)(a1 + 104) += v28;
  v57 = (v28 >> 2) & 0x3FFFFFC0;
  v58 = v6 + 4 * v57;
  v59 = (char *)(v7 + v57);
  v60 = *v59;
  v156 = vld4q_s8(v59);
  v61 = vdupq_n_s8(v28);
  v156.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v156.val[3], v61), vceqq_s8(v156.val[2], v61), 1uLL), vsriq_n_s8(vceqq_s8(v156.val[1], v61), vceqq_s8(v156.val[0], v61), 1uLL), 2uLL);
  v62 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v156.val[0], v156.val[0], 4uLL), 4uLL);
  v63 = 0;
  if (v62)
  {
    v64 = __ROR8__(*(_QWORD *)&v62, v60);
    do
    {
      v65 = (__clz(__rbit64(v64)) + v60) & 0x3F;
      if (v65)
      {
        v66 = *(unsigned int *)(v58 + 4 * v65);
        if (v66 < v13)
          break;
        _X6 = v9 + v66;
        __asm { PRFM            #0, [X6] }
        v154[v63++] = v66;
        --v19;
      }
      v64 &= v64 - 1;
    }
    while (v64 && v19);
  }
  v69 = (v60 - 1) & 0x3F;
  if (((v60 - 1) & 0x3F) != 0)
    v70 = 0;
  else
    v70 = 63;
  v71 = v70 + v69;
  *v59 = v71;
  v59[v71] = v28;
  v152 = (_QWORD *)(v9 + v12);
  v72 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v72 + 1;
  *(_DWORD *)(v58 + 4 * v71) = v72;
  if (v63)
  {
    v73 = 0;
    v74 = a3 - 7;
    v75 = a2 + 1;
    v76 = v9 + 8;
    v77 = 3;
    while (1)
    {
      v78 = v154[v73];
      v79 = (_QWORD *)(v9 + v78);
      if (*(_DWORD *)(v9 + v78 + v77 - 3) != *(_DWORD *)((char *)a2 + v77 - 3))
        goto LABEL_50;
      if (v74 <= (unint64_t)a2)
      {
        v82 = a2;
      }
      else
      {
        v80 = *a2 ^ *v79;
        if (v80)
        {
          v81 = __clz(__rbit64(v80)) >> 3;
          goto LABEL_48;
        }
        v83 = 0;
        while (1)
        {
          v82 = &v75[v83];
          if ((unint64_t)&v75[v83] >= v74)
            break;
          v84 = *(_QWORD *)(v76 + v78 + v83 * 8);
          ++v83;
          v85 = *v82 ^ v84;
          if (v85)
          {
            v81 = v83 * 8 + (__clz(__rbit64(v85)) >> 3);
            goto LABEL_48;
          }
        }
        v79 = (_QWORD *)(v76 + v78 + v83 * 8);
      }
      if ((unint64_t)v82 < a3 - 3 && *(_DWORD *)v79 == *(_DWORD *)v82)
      {
        v82 = (_QWORD *)((char *)v82 + 4);
        v79 = (_QWORD *)((char *)v79 + 4);
      }
      if ((unint64_t)v82 < a3 - 1 && *(unsigned __int16 *)v79 == *(unsigned __int16 *)v82)
      {
        v82 = (_QWORD *)((char *)v82 + 2);
        v79 = (_QWORD *)((char *)v79 + 2);
      }
      if ((unint64_t)v82 < a3 && *(unsigned __int8 *)v79 == *(unsigned __int8 *)v82)
        v82 = (_QWORD *)((char *)v82 + 1);
      v81 = (char *)v82 - (char *)a2;
LABEL_48:
      if (v81 > v77)
      {
        *a4 = v10 + 3 - v78;
        v77 = v81;
        if ((_QWORD *)((char *)a2 + v81) == (_QWORD *)a3)
          goto LABEL_58;
      }
LABEL_50:
      ++v73;
      v81 = v77;
      if (v73 == v63)
        goto LABEL_58;
    }
  }
  v81 = 3;
LABEL_58:
  v86 = 0;
  v87 = *(char **)v16;
  v88 = *(_QWORD *)(v16 + 8);
  v89 = *(_QWORD *)v16 - v88 - v12;
  v90 = *(_QWORD *)(v16 + 112);
  do
  {
    _X16 = v88 + *(unsigned int *)(v90 + 16 * v21 + v86);
    __asm { PRFM            #0, [X16] }
    v86 += 4;
  }
  while (v86 != 12);
  v93 = v19 + v27;
  if ((v19 + v27) >= 3)
    v94 = 3;
  else
    v94 = v93;
  v147 = *(unsigned int *)(v90 + ((16 * v21) | 0xC));
  v148 = v94;
  v144 = *(_QWORD *)(v16 + 128);
  v145 = v147 >> 8;
  _X8 = v144 + 4 * (v147 >> 8);
  __asm { PRFM            #0, [X8] }
  v146 = v89;
  if ((_DWORD)v94)
  {
    v150 = v10 + v89 + 3;
    v97 = (unsigned int *)(v90 + 16 * v21);
    do
    {
      v99 = *v97++;
      v98 = v99;
      if (!v99)
        return v81;
      if (*(_DWORD *)(v88 + v98) == *(_DWORD *)a2)
      {
        v100 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v88 + v98 + 4), a3, v87, v152);
        a3 = v153;
        v101 = v100 + 4;
        if (v100 + 4 > v81)
        {
          *a4 = (v150 - v98);
          v81 = v100 + 4;
          if ((_QWORD *)((char *)a2 + v101) == (_QWORD *)v153)
            return v101;
        }
      }
    }
    while (--v94);
  }
  if (v93 - v148 >= v147)
    v102 = v147;
  else
    v102 = v93 - v148;
  if (!v102)
    return v81;
  v103 = 4 * v102;
  v104 = (unsigned int *)(v144 + 4 * v145);
  do
  {
    v105 = *v104++;
    _X10 = v88 + v105;
    __asm { PRFM            #0, [X10] }
    v103 -= 4;
  }
  while (v103);
  v108 = *(_DWORD *)a2;
  v109 = (unsigned int *)(v144 + 4 * v145);
  v101 = v81;
  do
  {
    v111 = *v109++;
    v110 = v111;
    v112 = v88 + v111;
    if (*(_DWORD *)v112 == v108)
    {
      v113 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v112 + 4), a3, v87, v152);
      a3 = v153;
      if (v113 + 4 > v101)
      {
        *a4 = v149 + v146 + 3 - v110;
        v101 = v113 + 4;
        if ((_QWORD *)((char *)a2 + v113 + 4) == (_QWORD *)v153)
          break;
      }
    }
    --v102;
  }
  while (v102);
  return v101;
}

unint64_t sub_1D4B843AC(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v53;
  uint64_t v54;
  int8x16_t *v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v92;
  uint64_t v93;
  unsigned int v94;
  unint64_t v95;
  unint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  int v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v135;
  unint64_t v136;
  int v137;
  unint64_t v138;
  int v139;
  unsigned int v140;
  int v141;
  _QWORD *v143;
  _QWORD *v144;
  _DWORD v145[64];
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_DWORD *)(a1 + 52);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_DWORD)a2 - v9;
  v11 = 1 << *(_DWORD *)(a1 + 256);
  v12 = *(unsigned int *)(a1 + 24);
  v13 = (_DWORD)a2 - v9 - v11;
  _ZF = (int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF)
    v13 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 268);
  v16 = *(_QWORD *)(a1 + 248);
  v17 = 66 - *(_DWORD *)(v16 + 264);
  v18 = v15 - 4;
  if (v15 >= 4)
    LOBYTE(v15) = 4;
  v19 = *(_QWORD *)(a1 + 96);
  v20 = 1 << v15;
  v21 = 0xCF1BBCDCBB000000 * *a2;
  v22 = v21 >> v17;
  _X4 = *(_QWORD *)(v16 + 112) + 16 * (v21 >> v17);
  __asm { PRFM            #0, [X4] }
  v28 = 1 << v18;
  if (!(!_ZF & _CF))
    v28 = 0;
  v144 = (_QWORD *)a3;
  v140 = (_DWORD)a2 - v9;
  if (*(_DWORD *)(a1 + 300))
  {
    _X17 = (v21 ^ v19) >> (56 - v8);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    v30 = a1 + 64;
    v31 = *(unsigned int *)(a1 + 44);
    if (v10 - v31 >= 0x181)
    {
      v32 = *(_QWORD *)(a1 + 56);
      v33 = *(_QWORD *)(a1 + 112);
      if (v31 <= 0xFFFFFF9F)
      {
        v110 = v31 + 96;
        do
        {
          v111 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + 8 + v31)) ^ *(_QWORD *)(a1 + 96)) >> (56 - v8);
          v112 = (v111 >> 4) & 0xFFFFFF0;
          _X23 = v6 + 4 * v112;
          __asm { PRFM            #0, [X23] }
          _X22 = v7 + v112;
          __asm { PRFM            #0, [X22] }
          v117 = *(unsigned int *)(v30 + 4 * (v31 & 7));
          *(_DWORD *)(v30 + 4 * (v31 & 7)) = v111;
          v118 = (v117 >> 4) & 0xFFFFFF0;
          v119 = v6 + 4 * v118;
          v120 = (_BYTE *)(v7 + v118);
          if (((*v120 - 1) & 0xF) != 0)
            v121 = 0;
          else
            v121 = 15;
          v122 = v121 + ((*v120 - 1) & 0xF);
          *v120 = v122;
          v120[v122] = v117;
          *(_DWORD *)(v119 + 4 * v122) = v31++;
        }
        while (v31 < v110);
        v33 = *(_QWORD *)(a1 + 112);
        v32 = *(_QWORD *)(a1 + 56);
        v10 = (_DWORD)a2 - v9;
      }
      v123 = v10 - 32;
      LODWORD(v31) = v10 - 32;
      v124 = (_DWORD)a2 + 1 - (v9 + v123);
      if ((v124 + 1) < 8)
        v125 = v124 + 1;
      else
        v125 = 8;
      if ((unint64_t)a2 + 1 >= v9 + v123)
        v126 = v125;
      else
        v126 = 0;
      if (v123 < v126 + (int)v123)
      {
        v127 = *(_QWORD *)(a1 + 96);
        v128 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v129 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v123)) ^ v127) >> v128;
          v130 = (v129 >> 4) & 0xFFFFFF0;
          _X25 = v33 + 4 * v130;
          __asm { PRFM            #0, [X25] }
          _X24 = v32 + v130;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v123++ & 7) + 64) = v129;
          --v126;
        }
        while (v126);
        v10 = (_DWORD)a2 - v9;
      }
    }
    else
    {
      v32 = *(_QWORD *)(a1 + 56);
      v33 = *(_QWORD *)(a1 + 112);
    }
    if (v31 < v10)
    {
      v34 = *(_QWORD *)(a1 + 8) + 8;
      v35 = 56 - *(_DWORD *)(a1 + 52);
      v31 = v31;
      do
      {
        v36 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v34 + v31)) ^ *(_QWORD *)(a1 + 96)) >> v35;
        v37 = (v36 >> 4) & 0xFFFFFF0;
        _X25 = v33 + 4 * v37;
        __asm { PRFM            #0, [X25] }
        _X24 = v32 + v37;
        __asm { PRFM            #0, [X24] }
        v42 = *(unsigned int *)(v30 + 4 * (v31 & 7));
        *(_DWORD *)(v30 + 4 * (v31 & 7)) = v36;
        v43 = (v42 >> 4) & 0xFFFFFF0;
        v44 = v33 + 4 * v43;
        v45 = (_BYTE *)(v32 + v43);
        if (((*v45 - 1) & 0xF) != 0)
          v46 = 0;
        else
          v46 = 15;
        v47 = v46 + ((*v45 - 1) & 0xF);
        *v45 = v47;
        v45[v47] = v42;
        *(_DWORD *)(v44 + 4 * v47) = v31++;
      }
      while (v31 < v140);
    }
    v10 = (_DWORD)a2 - v9;
    *(_DWORD *)(a1 + 44) = v140;
    v48 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v140 + 8)) ^ v19) >> (56 - v8);
    v49 = (v48 >> 4) & 0xFFFFFF0;
    _X2 = v6 + 4 * v49;
    __asm { PRFM            #0, [X2] }
    _X17 = v7 + v49;
    __asm { PRFM            #0, [X17] }
    LODWORD(_X17) = *(_DWORD *)(v30 + 4 * (v140 & 7));
    *(_DWORD *)(v30 + 4 * (v140 & 7)) = v48;
  }
  *(_DWORD *)(a1 + 104) += _X17;
  v53 = (_X17 >> 4) & 0xFFFFFF0;
  v54 = v6 + 4 * v53;
  v55 = (int8x16_t *)(v7 + v53);
  v56 = (char)*v55;
  v57 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v55, vdupq_n_s8(_X17)), 4uLL), 4 * v55->i8[0]) & 0x8888888888888888;
  if (v57)
  {
    v58 = 0;
    v59 = (4 * v55->i8[0]);
    do
    {
      v60 = ((__clz(__rbit64(v57)) + v59) >> 2) & 0xF;
      if (v60)
      {
        v61 = *(unsigned int *)(v54 + 4 * v60);
        if (v61 < v13)
          break;
        _X7 = v9 + v61;
        __asm { PRFM            #0, [X7] }
        v145[v58++] = v61;
        --v20;
      }
      v57 &= v57 - 1;
    }
    while (v57 && v20);
  }
  else
  {
    v58 = 0;
  }
  v64 = (v56 - 1) & 0xF;
  if (((v56 - 1) & 0xF) != 0)
    v65 = 0;
  else
    v65 = 15;
  v66 = v65 + v64;
  v55->i8[0] = v66;
  v55->i8[v66] = _X17;
  v143 = (_QWORD *)(v9 + v12);
  v67 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v67 + 1;
  *(_DWORD *)(v54 + 4 * v66) = v67;
  if (v58)
  {
    v68 = 0;
    v69 = a3 - 7;
    v70 = a2 + 1;
    v71 = v9 + 8;
    v72 = 3;
    while (1)
    {
      v73 = v145[v68];
      v74 = (_QWORD *)(v9 + v73);
      if (*(_DWORD *)(v9 + v73 + v72 - 3) != *(_DWORD *)((char *)a2 + v72 - 3))
        goto LABEL_52;
      if (v69 <= (unint64_t)a2)
      {
        v77 = a2;
      }
      else
      {
        v75 = *a2 ^ *v74;
        if (v75)
        {
          v76 = __clz(__rbit64(v75)) >> 3;
          goto LABEL_50;
        }
        v78 = 0;
        while (1)
        {
          v77 = &v70[v78];
          if ((unint64_t)&v70[v78] >= v69)
            break;
          v79 = *(_QWORD *)(v71 + v73 + v78 * 8);
          ++v78;
          v80 = *v77 ^ v79;
          if (v80)
          {
            v76 = v78 * 8 + (__clz(__rbit64(v80)) >> 3);
            goto LABEL_50;
          }
        }
        v74 = (_QWORD *)(v71 + v73 + v78 * 8);
      }
      if ((unint64_t)v77 < a3 - 3 && *(_DWORD *)v74 == *(_DWORD *)v77)
      {
        v77 = (_QWORD *)((char *)v77 + 4);
        v74 = (_QWORD *)((char *)v74 + 4);
      }
      if ((unint64_t)v77 < a3 - 1 && *(unsigned __int16 *)v74 == *(unsigned __int16 *)v77)
      {
        v77 = (_QWORD *)((char *)v77 + 2);
        v74 = (_QWORD *)((char *)v74 + 2);
      }
      if ((unint64_t)v77 < a3 && *(unsigned __int8 *)v74 == *(unsigned __int8 *)v77)
        v77 = (_QWORD *)((char *)v77 + 1);
      v76 = (char *)v77 - (char *)a2;
LABEL_50:
      if (v76 > v72)
      {
        *a4 = v10 + 3 - v73;
        v72 = v76;
        if ((_QWORD *)((char *)a2 + v76) == (_QWORD *)a3)
          goto LABEL_60;
      }
LABEL_52:
      ++v68;
      v76 = v72;
      if (v68 == v58)
        goto LABEL_60;
    }
  }
  v76 = 3;
LABEL_60:
  v81 = 0;
  v82 = *(char **)v16;
  v83 = *(_QWORD *)(v16 + 8);
  v84 = *(_QWORD *)v16 - v83 - v12;
  v85 = *(_QWORD *)(v16 + 112);
  do
  {
    _X16 = v83 + *(unsigned int *)(v85 + 16 * v22 + v81);
    __asm { PRFM            #0, [X16] }
    v81 += 4;
  }
  while (v81 != 12);
  v88 = v20 + v28;
  if ((v20 + v28) >= 3)
    v89 = 3;
  else
    v89 = v88;
  v138 = *(unsigned int *)(v85 + ((16 * v22) | 0xC));
  v139 = v89;
  v135 = *(_QWORD *)(v16 + 128);
  v136 = v138 >> 8;
  _X8 = v135 + 4 * (v138 >> 8);
  __asm { PRFM            #0, [X8] }
  v137 = v84;
  if ((_DWORD)v89)
  {
    v141 = v10 + v84 + 3;
    v92 = (unsigned int *)(v85 + 16 * v22);
    do
    {
      v94 = *v92++;
      v93 = v94;
      if (!v94)
        return v76;
      if (*(_DWORD *)(v83 + v93) == *(_DWORD *)a2)
      {
        v95 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v83 + v93 + 4), a3, v82, v143);
        a3 = (unint64_t)v144;
        v96 = v95 + 4;
        if (v95 + 4 > v76)
        {
          *a4 = (v141 - v93);
          v76 = v95 + 4;
          if ((_QWORD *)((char *)a2 + v96) == v144)
            return v96;
        }
      }
    }
    while (--v89);
  }
  if (v88 - v139 >= v138)
    v97 = v138;
  else
    v97 = v88 - v139;
  if (!v97)
    return v76;
  v98 = 4 * v97;
  v99 = (unsigned int *)(v135 + 4 * v136);
  do
  {
    v100 = *v99++;
    _X10 = v83 + v100;
    __asm { PRFM            #0, [X10] }
    v98 -= 4;
  }
  while (v98);
  v103 = *(_DWORD *)a2;
  v104 = (unsigned int *)(v135 + 4 * v136);
  v96 = v76;
  do
  {
    v106 = *v104++;
    v105 = v106;
    v107 = v83 + v106;
    if (*(_DWORD *)v107 == v103)
    {
      v108 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v107 + 4), a3, v82, v143);
      a3 = (unint64_t)v144;
      if (v108 + 4 > v96)
      {
        *a4 = v140 + v137 + 3 - v105;
        v96 = v108 + 4;
        if ((_QWORD *)((char *)a2 + v108 + 4) == v144)
          break;
      }
    }
    --v97;
  }
  while (v97);
  return v96;
}

unint64_t sub_1D4B84B04(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v55;
  uint64_t v56;
  __int16 *v57;
  char v58;
  int8x16_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  uint64_t v131;
  int v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v140;
  unint64_t v141;
  int v142;
  unint64_t v143;
  int v144;
  unsigned int v145;
  int v146;
  _QWORD *v148;
  _QWORD *v149;
  _DWORD v150[64];
  uint64_t v151;
  int16x8x2_t v152;

  v151 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_DWORD *)(a1 + 52);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_DWORD)a2 - v9;
  v11 = 1 << *(_DWORD *)(a1 + 256);
  v12 = *(unsigned int *)(a1 + 24);
  v13 = (_DWORD)a2 - v9 - v11;
  _ZF = (int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF)
    v13 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 268);
  v16 = *(_QWORD *)(a1 + 248);
  v17 = 66 - *(_DWORD *)(v16 + 264);
  v18 = v15 - 5;
  if (v15 >= 5)
    LOBYTE(v15) = 5;
  v19 = *(_QWORD *)(a1 + 96);
  v20 = 1 << v15;
  v21 = 0xCF1BBCDCBB000000 * *a2;
  v22 = v21 >> v17;
  _X4 = *(_QWORD *)(v16 + 112) + 16 * (v21 >> v17);
  __asm { PRFM            #0, [X4] }
  v28 = 1 << v18;
  if (!(!_ZF & _CF))
    v28 = 0;
  v149 = (_QWORD *)a3;
  v145 = (_DWORD)a2 - v9;
  if (*(_DWORD *)(a1 + 300))
  {
    _X17 = (v21 ^ v19) >> (56 - v8);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    v30 = a1 + 64;
    v31 = *(unsigned int *)(a1 + 44);
    if (v10 - v31 >= 0x181)
    {
      v32 = *(_QWORD *)(a1 + 56);
      v33 = *(_QWORD *)(a1 + 112);
      if (v31 <= 0xFFFFFF9F)
      {
        v113 = v31 + 96;
        do
        {
          v114 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + 8 + v31)) ^ *(_QWORD *)(a1 + 96)) >> (56 - v8);
          v115 = (v114 >> 3) & 0x1FFFFFE0;
          _X23 = v6 + 4 * v115;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v7 + v115;
          __asm { PRFM            #0, [X22] }
          v121 = *(unsigned int *)(v30 + 4 * (v31 & 7));
          *(_DWORD *)(v30 + 4 * (v31 & 7)) = v114;
          v122 = (v121 >> 3) & 0x1FFFFFE0;
          v123 = v6 + 4 * v122;
          v124 = (_BYTE *)(v7 + v122);
          if (((*v124 - 1) & 0x1F) != 0)
            v125 = 0;
          else
            v125 = 31;
          v126 = v125 + ((*v124 - 1) & 0x1F);
          *v124 = v126;
          v124[v126] = v121;
          *(_DWORD *)(v123 + 4 * v126) = v31++;
        }
        while (v31 < v113);
        v33 = *(_QWORD *)(a1 + 112);
        v32 = *(_QWORD *)(a1 + 56);
        v10 = (_DWORD)a2 - v9;
      }
      v127 = v10 - 32;
      LODWORD(v31) = v10 - 32;
      v128 = (_DWORD)a2 + 1 - (v9 + v127);
      if ((v128 + 1) < 8)
        v129 = v128 + 1;
      else
        v129 = 8;
      if ((unint64_t)a2 + 1 >= v9 + v127)
        v130 = v129;
      else
        v130 = 0;
      if (v127 < v130 + (int)v127)
      {
        v131 = *(_QWORD *)(a1 + 96);
        v132 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v133 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v127)) ^ v131) >> v132;
          v134 = (v133 >> 3) & 0x1FFFFFE0;
          _X25 = v33 + 4 * v134;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v32 + v134;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v127++ & 7) + 64) = v133;
          --v130;
        }
        while (v130);
        v10 = (_DWORD)a2 - v9;
      }
    }
    else
    {
      v32 = *(_QWORD *)(a1 + 56);
      v33 = *(_QWORD *)(a1 + 112);
    }
    if (v31 < v10)
    {
      v34 = *(_QWORD *)(a1 + 8) + 8;
      v35 = 56 - *(_DWORD *)(a1 + 52);
      v31 = v31;
      do
      {
        v36 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v34 + v31)) ^ *(_QWORD *)(a1 + 96)) >> v35;
        v37 = (v36 >> 3) & 0x1FFFFFE0;
        _X25 = v33 + 4 * v37;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v32 + v37;
        __asm { PRFM            #0, [X24] }
        v43 = *(unsigned int *)(v30 + 4 * (v31 & 7));
        *(_DWORD *)(v30 + 4 * (v31 & 7)) = v36;
        v44 = (v43 >> 3) & 0x1FFFFFE0;
        v45 = v33 + 4 * v44;
        v46 = (_BYTE *)(v32 + v44);
        if (((*v46 - 1) & 0x1F) != 0)
          v47 = 0;
        else
          v47 = 31;
        v48 = v47 + ((*v46 - 1) & 0x1F);
        *v46 = v48;
        v46[v48] = v43;
        *(_DWORD *)(v45 + 4 * v48) = v31++;
      }
      while (v31 < v145);
    }
    v10 = (_DWORD)a2 - v9;
    *(_DWORD *)(a1 + 44) = v145;
    v49 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v145 + 8)) ^ v19) >> (56 - v8);
    v50 = (v49 >> 3) & 0x1FFFFFE0;
    _X2 = v6 + 4 * v50;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X2,#0x40]
    }
    _X17 = v7 + v50;
    __asm { PRFM            #0, [X17] }
    LODWORD(_X17) = *(_DWORD *)(v30 + 4 * (v145 & 7));
    *(_DWORD *)(v30 + 4 * (v145 & 7)) = v49;
  }
  *(_DWORD *)(a1 + 104) += _X17;
  v55 = (_X17 >> 3) & 0x1FFFFFE0;
  v56 = v6 + 4 * v55;
  v57 = (__int16 *)(v7 + v55);
  v152 = vld2q_s16(v57);
  v58 = *(_BYTE *)v57;
  v59 = vdupq_n_s8(_X17);
  v60 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v152.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v152.val[1]), 6uLL), 4uLL), 2 * *(_BYTE *)v57) & 0x5555555555555555;
  if (v60)
  {
    v61 = 0;
    v62 = (2 * *(_BYTE *)v57);
    do
    {
      v63 = ((__clz(__rbit64(v60)) + v62) >> 1) & 0x1F;
      if (v63)
      {
        v64 = *(unsigned int *)(v56 + 4 * v63);
        if (v64 < v13)
          break;
        _X7 = v9 + v64;
        __asm { PRFM            #0, [X7] }
        v150[v61++] = v64;
        --v20;
      }
      v60 &= v60 - 1;
    }
    while (v60 && v20);
  }
  else
  {
    v61 = 0;
  }
  v67 = (v58 - 1) & 0x1F;
  if (((v58 - 1) & 0x1F) != 0)
    v68 = 0;
  else
    v68 = 31;
  v69 = v68 + v67;
  *(_BYTE *)v57 = v69;
  *((_BYTE *)v57 + v69) = _X17;
  v148 = (_QWORD *)(v9 + v12);
  v70 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v70 + 1;
  *(_DWORD *)(v56 + 4 * v69) = v70;
  if (v61)
  {
    v71 = 0;
    v72 = a3 - 7;
    v73 = a2 + 1;
    v74 = v9 + 8;
    v75 = 3;
    while (1)
    {
      v76 = v150[v71];
      v77 = (_QWORD *)(v9 + v76);
      if (*(_DWORD *)(v9 + v76 + v75 - 3) != *(_DWORD *)((char *)a2 + v75 - 3))
        goto LABEL_52;
      if (v72 <= (unint64_t)a2)
      {
        v80 = a2;
      }
      else
      {
        v78 = *a2 ^ *v77;
        if (v78)
        {
          v79 = __clz(__rbit64(v78)) >> 3;
          goto LABEL_50;
        }
        v81 = 0;
        while (1)
        {
          v80 = &v73[v81];
          if ((unint64_t)&v73[v81] >= v72)
            break;
          v82 = *(_QWORD *)(v74 + v76 + v81 * 8);
          ++v81;
          v83 = *v80 ^ v82;
          if (v83)
          {
            v79 = v81 * 8 + (__clz(__rbit64(v83)) >> 3);
            goto LABEL_50;
          }
        }
        v77 = (_QWORD *)(v74 + v76 + v81 * 8);
      }
      if ((unint64_t)v80 < a3 - 3 && *(_DWORD *)v77 == *(_DWORD *)v80)
      {
        v80 = (_QWORD *)((char *)v80 + 4);
        v77 = (_QWORD *)((char *)v77 + 4);
      }
      if ((unint64_t)v80 < a3 - 1 && *(unsigned __int16 *)v77 == *(unsigned __int16 *)v80)
      {
        v80 = (_QWORD *)((char *)v80 + 2);
        v77 = (_QWORD *)((char *)v77 + 2);
      }
      if ((unint64_t)v80 < a3 && *(unsigned __int8 *)v77 == *(unsigned __int8 *)v80)
        v80 = (_QWORD *)((char *)v80 + 1);
      v79 = (char *)v80 - (char *)a2;
LABEL_50:
      if (v79 > v75)
      {
        *a4 = v10 + 3 - v76;
        v75 = v79;
        if ((_QWORD *)((char *)a2 + v79) == (_QWORD *)a3)
          goto LABEL_60;
      }
LABEL_52:
      ++v71;
      v79 = v75;
      if (v71 == v61)
        goto LABEL_60;
    }
  }
  v79 = 3;
LABEL_60:
  v84 = 0;
  v85 = *(char **)v16;
  v86 = *(_QWORD *)(v16 + 8);
  v87 = *(_QWORD *)v16 - v86 - v12;
  v88 = *(_QWORD *)(v16 + 112);
  do
  {
    _X16 = v86 + *(unsigned int *)(v88 + 16 * v22 + v84);
    __asm { PRFM            #0, [X16] }
    v84 += 4;
  }
  while (v84 != 12);
  v91 = v20 + v28;
  if ((v20 + v28) >= 3)
    v92 = 3;
  else
    v92 = v91;
  v143 = *(unsigned int *)(v88 + ((16 * v22) | 0xC));
  v144 = v92;
  v140 = *(_QWORD *)(v16 + 128);
  v141 = v143 >> 8;
  _X8 = v140 + 4 * (v143 >> 8);
  __asm { PRFM            #0, [X8] }
  v142 = v87;
  if ((_DWORD)v92)
  {
    v146 = v10 + v87 + 3;
    v95 = (unsigned int *)(v88 + 16 * v22);
    do
    {
      v97 = *v95++;
      v96 = v97;
      if (!v97)
        return v79;
      if (*(_DWORD *)(v86 + v96) == *(_DWORD *)a2)
      {
        v98 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v86 + v96 + 4), a3, v85, v148);
        a3 = (unint64_t)v149;
        v99 = v98 + 4;
        if (v98 + 4 > v79)
        {
          *a4 = (v146 - v96);
          v79 = v98 + 4;
          if ((_QWORD *)((char *)a2 + v99) == v149)
            return v99;
        }
      }
    }
    while (--v92);
  }
  if (v91 - v144 >= v143)
    v100 = v143;
  else
    v100 = v91 - v144;
  if (!v100)
    return v79;
  v101 = 4 * v100;
  v102 = (unsigned int *)(v140 + 4 * v141);
  do
  {
    v103 = *v102++;
    _X10 = v86 + v103;
    __asm { PRFM            #0, [X10] }
    v101 -= 4;
  }
  while (v101);
  v106 = *(_DWORD *)a2;
  v107 = (unsigned int *)(v140 + 4 * v141);
  v99 = v79;
  do
  {
    v109 = *v107++;
    v108 = v109;
    v110 = v86 + v109;
    if (*(_DWORD *)v110 == v106)
    {
      v111 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v110 + 4), a3, v85, v148);
      a3 = (unint64_t)v149;
      if (v111 + 4 > v99)
      {
        *a4 = v145 + v142 + 3 - v108;
        v99 = v111 + 4;
        if ((_QWORD *)((char *)a2 + v111 + 4) == v149)
          break;
      }
    }
    --v100;
  }
  while (v100);
  return v99;
}

unint64_t sub_1D4B85274(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char v60;
  int8x16_t v61;
  int8x8_t v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unsigned int v93;
  uint64_t v94;
  unsigned int *v97;
  uint64_t v98;
  unsigned int v99;
  unint64_t v100;
  unint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  int v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  int v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v144;
  unint64_t v145;
  int v146;
  unint64_t v147;
  int v148;
  unsigned int v149;
  int v150;
  _QWORD *v152;
  _QWORD *v153;
  _DWORD v154[64];
  uint64_t v155;
  int8x16x4_t v156;

  v155 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_DWORD *)(a1 + 52);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_DWORD)a2 - v9;
  v11 = 1 << *(_DWORD *)(a1 + 256);
  v12 = *(unsigned int *)(a1 + 24);
  v13 = (_DWORD)a2 - v9 - v11;
  _ZF = (int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF)
    v13 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 268);
  v16 = *(_QWORD *)(a1 + 248);
  v17 = 66 - *(_DWORD *)(v16 + 264);
  v18 = v15 - 6;
  if (v15 >= 6)
    LOBYTE(v15) = 6;
  v19 = *(_QWORD *)(a1 + 96);
  v20 = 1 << v15;
  v21 = 0xCF1BBCDCBB000000 * *a2;
  v22 = v21 >> v17;
  _X4 = *(_QWORD *)(v16 + 112) + 16 * (v21 >> v17);
  __asm { PRFM            #0, [X4] }
  v28 = 1 << v18;
  if (!(!_ZF & _CF))
    v28 = 0;
  v153 = (_QWORD *)a3;
  v149 = (_DWORD)a2 - v9;
  if (*(_DWORD *)(a1 + 300))
  {
    _X17 = (v21 ^ v19) >> (56 - v8);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    v30 = a1 + 64;
    v31 = *(unsigned int *)(a1 + 44);
    if (v10 - v31 >= 0x181)
    {
      v32 = *(_QWORD *)(a1 + 56);
      v33 = *(_QWORD *)(a1 + 112);
      if (v31 <= 0xFFFFFF9F)
      {
        v115 = v31 + 96;
        do
        {
          v116 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + 8 + v31)) ^ *(_QWORD *)(a1 + 96)) >> (56 - v8);
          v117 = (v116 >> 2) & 0x3FFFFFC0;
          _X23 = v6 + 4 * v117;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v7 + v117;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x20]
          }
          v124 = *(unsigned int *)(v30 + 4 * (v31 & 7));
          *(_DWORD *)(v30 + 4 * (v31 & 7)) = v116;
          v125 = (v124 >> 2) & 0x3FFFFFC0;
          v126 = v6 + 4 * v125;
          v127 = (_BYTE *)(v7 + v125);
          if (((*v127 - 1) & 0x3F) != 0)
            v128 = 0;
          else
            v128 = 63;
          v129 = v128 + ((*v127 - 1) & 0x3F);
          *v127 = v129;
          v127[v129] = v124;
          *(_DWORD *)(v126 + 4 * v129) = v31++;
        }
        while (v31 < v115);
        v33 = *(_QWORD *)(a1 + 112);
        v32 = *(_QWORD *)(a1 + 56);
        v10 = (_DWORD)a2 - v9;
      }
      v130 = v10 - 32;
      LODWORD(v31) = v10 - 32;
      v131 = (_DWORD)a2 + 1 - (v9 + v130);
      if ((v131 + 1) < 8)
        v132 = v131 + 1;
      else
        v132 = 8;
      if ((unint64_t)a2 + 1 >= v9 + v130)
        v133 = v132;
      else
        v133 = 0;
      if (v130 < v133 + (int)v130)
      {
        v134 = *(_QWORD *)(a1 + 96);
        v135 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v136 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v130)) ^ v134) >> v135;
          v137 = (v136 >> 2) & 0x3FFFFFC0;
          _X25 = v33 + 4 * v137;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v32 + v137;
          __asm
          {
            PRFM            #0, [X24]
            PRFM            #0, [X24,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v130++ & 7) + 64) = v136;
          --v133;
        }
        while (v133);
        v10 = (_DWORD)a2 - v9;
      }
    }
    else
    {
      v32 = *(_QWORD *)(a1 + 56);
      v33 = *(_QWORD *)(a1 + 112);
    }
    if (v31 < v10)
    {
      v34 = *(_QWORD *)(a1 + 8) + 8;
      v35 = 56 - *(_DWORD *)(a1 + 52);
      v31 = v31;
      do
      {
        v36 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v34 + v31)) ^ *(_QWORD *)(a1 + 96)) >> v35;
        v37 = (v36 >> 2) & 0x3FFFFFC0;
        _X25 = v33 + 4 * v37;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v32 + v37;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x20]
        }
        v44 = *(unsigned int *)(v30 + 4 * (v31 & 7));
        *(_DWORD *)(v30 + 4 * (v31 & 7)) = v36;
        v45 = (v44 >> 2) & 0x3FFFFFC0;
        v46 = v33 + 4 * v45;
        v47 = (_BYTE *)(v32 + v45);
        if (((*v47 - 1) & 0x3F) != 0)
          v48 = 0;
        else
          v48 = 63;
        v49 = v48 + ((*v47 - 1) & 0x3F);
        *v47 = v49;
        v47[v49] = v44;
        *(_DWORD *)(v46 + 4 * v49) = v31++;
      }
      while (v31 < v149);
    }
    v10 = (_DWORD)a2 - v9;
    *(_DWORD *)(a1 + 44) = v149;
    v50 = ((0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v149 + 8)) ^ v19) >> (56 - v8);
    v51 = (v50 >> 2) & 0x3FFFFFC0;
    _X2 = v6 + 4 * v51;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X2,#0x40]
    }
    _X17 = v7 + v51;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X17,#0x20]
    }
    LODWORD(_X17) = *(_DWORD *)(v30 + 4 * (v149 & 7));
    *(_DWORD *)(v30 + 4 * (v149 & 7)) = v50;
  }
  *(_DWORD *)(a1 + 104) += _X17;
  v57 = (_X17 >> 2) & 0x3FFFFFC0;
  v58 = v6 + 4 * v57;
  v59 = (char *)(v7 + v57);
  v60 = *v59;
  v156 = vld4q_s8(v59);
  v61 = vdupq_n_s8(_X17);
  v156.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v156.val[3], v61), vceqq_s8(v156.val[2], v61), 1uLL), vsriq_n_s8(vceqq_s8(v156.val[1], v61), vceqq_s8(v156.val[0], v61), 1uLL), 2uLL);
  v62 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v156.val[0], v156.val[0], 4uLL), 4uLL);
  v63 = 0;
  if (v62)
  {
    v64 = __ROR8__(*(_QWORD *)&v62, v60);
    do
    {
      v65 = (__clz(__rbit64(v64)) + v60) & 0x3F;
      if (v65)
      {
        v66 = *(unsigned int *)(v58 + 4 * v65);
        if (v66 < v13)
          break;
        _X6 = v9 + v66;
        __asm { PRFM            #0, [X6] }
        v154[v63++] = v66;
        --v20;
      }
      v64 &= v64 - 1;
    }
    while (v64 && v20);
  }
  v69 = (v60 - 1) & 0x3F;
  if (((v60 - 1) & 0x3F) != 0)
    v70 = 0;
  else
    v70 = 63;
  v71 = v70 + v69;
  *v59 = v71;
  v59[v71] = _X17;
  v152 = (_QWORD *)(v9 + v12);
  v72 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v72 + 1;
  *(_DWORD *)(v58 + 4 * v71) = v72;
  if (v63)
  {
    v73 = 0;
    v74 = a3 - 7;
    v75 = a2 + 1;
    v76 = v9 + 8;
    v77 = 3;
    while (1)
    {
      v78 = v154[v73];
      v79 = (_QWORD *)(v9 + v78);
      if (*(_DWORD *)(v9 + v78 + v77 - 3) != *(_DWORD *)((char *)a2 + v77 - 3))
        goto LABEL_50;
      if (v74 <= (unint64_t)a2)
      {
        v82 = a2;
      }
      else
      {
        v80 = *a2 ^ *v79;
        if (v80)
        {
          v81 = __clz(__rbit64(v80)) >> 3;
          goto LABEL_48;
        }
        v83 = 0;
        while (1)
        {
          v82 = &v75[v83];
          if ((unint64_t)&v75[v83] >= v74)
            break;
          v84 = *(_QWORD *)(v76 + v78 + v83 * 8);
          ++v83;
          v85 = *v82 ^ v84;
          if (v85)
          {
            v81 = v83 * 8 + (__clz(__rbit64(v85)) >> 3);
            goto LABEL_48;
          }
        }
        v79 = (_QWORD *)(v76 + v78 + v83 * 8);
      }
      if ((unint64_t)v82 < a3 - 3 && *(_DWORD *)v79 == *(_DWORD *)v82)
      {
        v82 = (_QWORD *)((char *)v82 + 4);
        v79 = (_QWORD *)((char *)v79 + 4);
      }
      if ((unint64_t)v82 < a3 - 1 && *(unsigned __int16 *)v79 == *(unsigned __int16 *)v82)
      {
        v82 = (_QWORD *)((char *)v82 + 2);
        v79 = (_QWORD *)((char *)v79 + 2);
      }
      if ((unint64_t)v82 < a3 && *(unsigned __int8 *)v79 == *(unsigned __int8 *)v82)
        v82 = (_QWORD *)((char *)v82 + 1);
      v81 = (char *)v82 - (char *)a2;
LABEL_48:
      if (v81 > v77)
      {
        *a4 = v10 + 3 - v78;
        v77 = v81;
        if ((_QWORD *)((char *)a2 + v81) == (_QWORD *)a3)
          goto LABEL_58;
      }
LABEL_50:
      ++v73;
      v81 = v77;
      if (v73 == v63)
        goto LABEL_58;
    }
  }
  v81 = 3;
LABEL_58:
  v86 = 0;
  v87 = *(char **)v16;
  v88 = *(_QWORD *)(v16 + 8);
  v89 = *(_QWORD *)v16 - v88 - v12;
  v90 = *(_QWORD *)(v16 + 112);
  do
  {
    _X16 = v88 + *(unsigned int *)(v90 + 16 * v22 + v86);
    __asm { PRFM            #0, [X16] }
    v86 += 4;
  }
  while (v86 != 12);
  v93 = v20 + v28;
  if ((v20 + v28) >= 3)
    v94 = 3;
  else
    v94 = v93;
  v147 = *(unsigned int *)(v90 + ((16 * v22) | 0xC));
  v148 = v94;
  v144 = *(_QWORD *)(v16 + 128);
  v145 = v147 >> 8;
  _X8 = v144 + 4 * (v147 >> 8);
  __asm { PRFM            #0, [X8] }
  v146 = v89;
  if ((_DWORD)v94)
  {
    v150 = v10 + v89 + 3;
    v97 = (unsigned int *)(v90 + 16 * v22);
    do
    {
      v99 = *v97++;
      v98 = v99;
      if (!v99)
        return v81;
      if (*(_DWORD *)(v88 + v98) == *(_DWORD *)a2)
      {
        v100 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v88 + v98 + 4), a3, v87, v152);
        a3 = (unint64_t)v153;
        v101 = v100 + 4;
        if (v100 + 4 > v81)
        {
          *a4 = (v150 - v98);
          v81 = v100 + 4;
          if ((_QWORD *)((char *)a2 + v101) == v153)
            return v101;
        }
      }
    }
    while (--v94);
  }
  if (v93 - v148 >= v147)
    v102 = v147;
  else
    v102 = v93 - v148;
  if (!v102)
    return v81;
  v103 = 4 * v102;
  v104 = (unsigned int *)(v144 + 4 * v145);
  do
  {
    v105 = *v104++;
    _X10 = v88 + v105;
    __asm { PRFM            #0, [X10] }
    v103 -= 4;
  }
  while (v103);
  v108 = *(_DWORD *)a2;
  v109 = (unsigned int *)(v144 + 4 * v145);
  v101 = v81;
  do
  {
    v111 = *v109++;
    v110 = v111;
    v112 = v88 + v111;
    if (*(_DWORD *)v112 == v108)
    {
      v113 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v112 + 4), a3, v87, v152);
      a3 = (unint64_t)v153;
      if (v113 + 4 > v101)
      {
        *a4 = v149 + v146 + 3 - v110;
        v101 = v113 + 4;
        if ((_QWORD *)((char *)a2 + v113 + 4) == v153)
          break;
      }
    }
    --v102;
  }
  while (v102);
  return v101;
}

unint64_t sub_1D4B859F0(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v53;
  uint64_t v54;
  int8x16_t *v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v92;
  uint64_t v93;
  unsigned int v94;
  unint64_t v95;
  unint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  uint64_t v127;
  int v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v135;
  unint64_t v136;
  int v137;
  unint64_t v138;
  int v139;
  unsigned int v140;
  int v141;
  _QWORD *v143;
  _QWORD *v144;
  _DWORD v145[64];
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_DWORD *)(a1 + 52);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_DWORD)a2 - v9;
  v11 = 1 << *(_DWORD *)(a1 + 256);
  v12 = *(unsigned int *)(a1 + 24);
  v13 = (_DWORD)a2 - v9 - v11;
  _ZF = (int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF)
    v13 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 268);
  v16 = *(_QWORD *)(a1 + 248);
  v17 = 66 - *(_DWORD *)(v16 + 264);
  v18 = v15 - 4;
  if (v15 >= 4)
    LOBYTE(v15) = 4;
  v19 = *(_QWORD *)(a1 + 96);
  v20 = 1 << v15;
  v21 = 0xCF1BBCDCBF9B0000 * *a2;
  v22 = v21 >> v17;
  _X4 = *(_QWORD *)(v16 + 112) + 16 * (v21 >> v17);
  __asm { PRFM            #0, [X4] }
  v28 = 1 << v18;
  if (!(!_ZF & _CF))
    v28 = 0;
  v144 = (_QWORD *)a3;
  v140 = (_DWORD)a2 - v9;
  if (*(_DWORD *)(a1 + 300))
  {
    _X17 = (v21 ^ v19) >> (56 - v8);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    v30 = a1 + 64;
    v31 = *(unsigned int *)(a1 + 44);
    if (v10 - v31 >= 0x181)
    {
      v32 = *(_QWORD *)(a1 + 56);
      v33 = *(_QWORD *)(a1 + 112);
      if (v31 <= 0xFFFFFF9F)
      {
        v110 = v31 + 96;
        do
        {
          v111 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + 8 + v31)) ^ *(_QWORD *)(a1 + 96)) >> (56 - v8);
          v112 = (v111 >> 4) & 0xFFFFFF0;
          _X23 = v6 + 4 * v112;
          __asm { PRFM            #0, [X23] }
          _X22 = v7 + v112;
          __asm { PRFM            #0, [X22] }
          v117 = *(unsigned int *)(v30 + 4 * (v31 & 7));
          *(_DWORD *)(v30 + 4 * (v31 & 7)) = v111;
          v118 = (v117 >> 4) & 0xFFFFFF0;
          v119 = v6 + 4 * v118;
          v120 = (_BYTE *)(v7 + v118);
          if (((*v120 - 1) & 0xF) != 0)
            v121 = 0;
          else
            v121 = 15;
          v122 = v121 + ((*v120 - 1) & 0xF);
          *v120 = v122;
          v120[v122] = v117;
          *(_DWORD *)(v119 + 4 * v122) = v31++;
        }
        while (v31 < v110);
        v33 = *(_QWORD *)(a1 + 112);
        v32 = *(_QWORD *)(a1 + 56);
        v10 = (_DWORD)a2 - v9;
      }
      v123 = v10 - 32;
      LODWORD(v31) = v10 - 32;
      v124 = (_DWORD)a2 + 1 - (v9 + v123);
      if ((v124 + 1) < 8)
        v125 = v124 + 1;
      else
        v125 = 8;
      if ((unint64_t)a2 + 1 >= v9 + v123)
        v126 = v125;
      else
        v126 = 0;
      if (v123 < v126 + (int)v123)
      {
        v127 = *(_QWORD *)(a1 + 96);
        v128 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v129 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v123)) ^ v127) >> v128;
          v130 = (v129 >> 4) & 0xFFFFFF0;
          _X25 = v33 + 4 * v130;
          __asm { PRFM            #0, [X25] }
          _X24 = v32 + v130;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v123++ & 7) + 64) = v129;
          --v126;
        }
        while (v126);
        v10 = (_DWORD)a2 - v9;
      }
    }
    else
    {
      v32 = *(_QWORD *)(a1 + 56);
      v33 = *(_QWORD *)(a1 + 112);
    }
    if (v31 < v10)
    {
      v34 = *(_QWORD *)(a1 + 8) + 8;
      v35 = 56 - *(_DWORD *)(a1 + 52);
      v31 = v31;
      do
      {
        v36 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v34 + v31)) ^ *(_QWORD *)(a1 + 96)) >> v35;
        v37 = (v36 >> 4) & 0xFFFFFF0;
        _X25 = v33 + 4 * v37;
        __asm { PRFM            #0, [X25] }
        _X24 = v32 + v37;
        __asm { PRFM            #0, [X24] }
        v42 = *(unsigned int *)(v30 + 4 * (v31 & 7));
        *(_DWORD *)(v30 + 4 * (v31 & 7)) = v36;
        v43 = (v42 >> 4) & 0xFFFFFF0;
        v44 = v33 + 4 * v43;
        v45 = (_BYTE *)(v32 + v43);
        if (((*v45 - 1) & 0xF) != 0)
          v46 = 0;
        else
          v46 = 15;
        v47 = v46 + ((*v45 - 1) & 0xF);
        *v45 = v47;
        v45[v47] = v42;
        *(_DWORD *)(v44 + 4 * v47) = v31++;
      }
      while (v31 < v140);
    }
    v10 = (_DWORD)a2 - v9;
    *(_DWORD *)(a1 + 44) = v140;
    v48 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v140 + 8)) ^ v19) >> (56 - v8);
    v49 = (v48 >> 4) & 0xFFFFFF0;
    _X2 = v6 + 4 * v49;
    __asm { PRFM            #0, [X2] }
    _X17 = v7 + v49;
    __asm { PRFM            #0, [X17] }
    LODWORD(_X17) = *(_DWORD *)(v30 + 4 * (v140 & 7));
    *(_DWORD *)(v30 + 4 * (v140 & 7)) = v48;
  }
  *(_DWORD *)(a1 + 104) += _X17;
  v53 = (_X17 >> 4) & 0xFFFFFF0;
  v54 = v6 + 4 * v53;
  v55 = (int8x16_t *)(v7 + v53);
  v56 = (char)*v55;
  v57 = __ROR8__(vshrn_n_s16((int16x8_t)vceqq_s8(*v55, vdupq_n_s8(_X17)), 4uLL), 4 * v55->i8[0]) & 0x8888888888888888;
  if (v57)
  {
    v58 = 0;
    v59 = (4 * v55->i8[0]);
    do
    {
      v60 = ((__clz(__rbit64(v57)) + v59) >> 2) & 0xF;
      if (v60)
      {
        v61 = *(unsigned int *)(v54 + 4 * v60);
        if (v61 < v13)
          break;
        _X7 = v9 + v61;
        __asm { PRFM            #0, [X7] }
        v145[v58++] = v61;
        --v20;
      }
      v57 &= v57 - 1;
    }
    while (v57 && v20);
  }
  else
  {
    v58 = 0;
  }
  v64 = (v56 - 1) & 0xF;
  if (((v56 - 1) & 0xF) != 0)
    v65 = 0;
  else
    v65 = 15;
  v66 = v65 + v64;
  v55->i8[0] = v66;
  v55->i8[v66] = _X17;
  v143 = (_QWORD *)(v9 + v12);
  v67 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v67 + 1;
  *(_DWORD *)(v54 + 4 * v66) = v67;
  if (v58)
  {
    v68 = 0;
    v69 = a3 - 7;
    v70 = a2 + 1;
    v71 = v9 + 8;
    v72 = 3;
    while (1)
    {
      v73 = v145[v68];
      v74 = (_QWORD *)(v9 + v73);
      if (*(_DWORD *)(v9 + v73 + v72 - 3) != *(_DWORD *)((char *)a2 + v72 - 3))
        goto LABEL_52;
      if (v69 <= (unint64_t)a2)
      {
        v77 = a2;
      }
      else
      {
        v75 = *a2 ^ *v74;
        if (v75)
        {
          v76 = __clz(__rbit64(v75)) >> 3;
          goto LABEL_50;
        }
        v78 = 0;
        while (1)
        {
          v77 = &v70[v78];
          if ((unint64_t)&v70[v78] >= v69)
            break;
          v79 = *(_QWORD *)(v71 + v73 + v78 * 8);
          ++v78;
          v80 = *v77 ^ v79;
          if (v80)
          {
            v76 = v78 * 8 + (__clz(__rbit64(v80)) >> 3);
            goto LABEL_50;
          }
        }
        v74 = (_QWORD *)(v71 + v73 + v78 * 8);
      }
      if ((unint64_t)v77 < a3 - 3 && *(_DWORD *)v74 == *(_DWORD *)v77)
      {
        v77 = (_QWORD *)((char *)v77 + 4);
        v74 = (_QWORD *)((char *)v74 + 4);
      }
      if ((unint64_t)v77 < a3 - 1 && *(unsigned __int16 *)v74 == *(unsigned __int16 *)v77)
      {
        v77 = (_QWORD *)((char *)v77 + 2);
        v74 = (_QWORD *)((char *)v74 + 2);
      }
      if ((unint64_t)v77 < a3 && *(unsigned __int8 *)v74 == *(unsigned __int8 *)v77)
        v77 = (_QWORD *)((char *)v77 + 1);
      v76 = (char *)v77 - (char *)a2;
LABEL_50:
      if (v76 > v72)
      {
        *a4 = v10 + 3 - v73;
        v72 = v76;
        if ((_QWORD *)((char *)a2 + v76) == (_QWORD *)a3)
          goto LABEL_60;
      }
LABEL_52:
      ++v68;
      v76 = v72;
      if (v68 == v58)
        goto LABEL_60;
    }
  }
  v76 = 3;
LABEL_60:
  v81 = 0;
  v82 = *(char **)v16;
  v83 = *(_QWORD *)(v16 + 8);
  v84 = *(_QWORD *)v16 - v83 - v12;
  v85 = *(_QWORD *)(v16 + 112);
  do
  {
    _X16 = v83 + *(unsigned int *)(v85 + 16 * v22 + v81);
    __asm { PRFM            #0, [X16] }
    v81 += 4;
  }
  while (v81 != 12);
  v88 = v20 + v28;
  if ((v20 + v28) >= 3)
    v89 = 3;
  else
    v89 = v88;
  v138 = *(unsigned int *)(v85 + ((16 * v22) | 0xC));
  v139 = v89;
  v135 = *(_QWORD *)(v16 + 128);
  v136 = v138 >> 8;
  _X8 = v135 + 4 * (v138 >> 8);
  __asm { PRFM            #0, [X8] }
  v137 = v84;
  if ((_DWORD)v89)
  {
    v141 = v10 + v84 + 3;
    v92 = (unsigned int *)(v85 + 16 * v22);
    do
    {
      v94 = *v92++;
      v93 = v94;
      if (!v94)
        return v76;
      if (*(_DWORD *)(v83 + v93) == *(_DWORD *)a2)
      {
        v95 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v83 + v93 + 4), a3, v82, v143);
        a3 = (unint64_t)v144;
        v96 = v95 + 4;
        if (v95 + 4 > v76)
        {
          *a4 = (v141 - v93);
          v76 = v95 + 4;
          if ((_QWORD *)((char *)a2 + v96) == v144)
            return v96;
        }
      }
    }
    while (--v89);
  }
  if (v88 - v139 >= v138)
    v97 = v138;
  else
    v97 = v88 - v139;
  if (!v97)
    return v76;
  v98 = 4 * v97;
  v99 = (unsigned int *)(v135 + 4 * v136);
  do
  {
    v100 = *v99++;
    _X10 = v83 + v100;
    __asm { PRFM            #0, [X10] }
    v98 -= 4;
  }
  while (v98);
  v103 = *(_DWORD *)a2;
  v104 = (unsigned int *)(v135 + 4 * v136);
  v96 = v76;
  do
  {
    v106 = *v104++;
    v105 = v106;
    v107 = v83 + v106;
    if (*(_DWORD *)v107 == v103)
    {
      v108 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v107 + 4), a3, v82, v143);
      a3 = (unint64_t)v144;
      if (v108 + 4 > v96)
      {
        *a4 = v140 + v137 + 3 - v105;
        v96 = v108 + 4;
        if ((_QWORD *)((char *)a2 + v108 + 4) == v144)
          break;
      }
    }
    --v97;
  }
  while (v97);
  return v96;
}

unint64_t sub_1D4B86148(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v55;
  uint64_t v56;
  __int16 *v57;
  char v58;
  int8x16_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  uint64_t v131;
  int v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v140;
  unint64_t v141;
  int v142;
  unint64_t v143;
  int v144;
  unsigned int v145;
  int v146;
  _QWORD *v148;
  _QWORD *v149;
  _DWORD v150[64];
  uint64_t v151;
  int16x8x2_t v152;

  v151 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_DWORD *)(a1 + 52);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_DWORD)a2 - v9;
  v11 = 1 << *(_DWORD *)(a1 + 256);
  v12 = *(unsigned int *)(a1 + 24);
  v13 = (_DWORD)a2 - v9 - v11;
  _ZF = (int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF)
    v13 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 268);
  v16 = *(_QWORD *)(a1 + 248);
  v17 = 66 - *(_DWORD *)(v16 + 264);
  v18 = v15 - 5;
  if (v15 >= 5)
    LOBYTE(v15) = 5;
  v19 = *(_QWORD *)(a1 + 96);
  v20 = 1 << v15;
  v21 = 0xCF1BBCDCBF9B0000 * *a2;
  v22 = v21 >> v17;
  _X4 = *(_QWORD *)(v16 + 112) + 16 * (v21 >> v17);
  __asm { PRFM            #0, [X4] }
  v28 = 1 << v18;
  if (!(!_ZF & _CF))
    v28 = 0;
  v149 = (_QWORD *)a3;
  v145 = (_DWORD)a2 - v9;
  if (*(_DWORD *)(a1 + 300))
  {
    _X17 = (v21 ^ v19) >> (56 - v8);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    v30 = a1 + 64;
    v31 = *(unsigned int *)(a1 + 44);
    if (v10 - v31 >= 0x181)
    {
      v32 = *(_QWORD *)(a1 + 56);
      v33 = *(_QWORD *)(a1 + 112);
      if (v31 <= 0xFFFFFF9F)
      {
        v113 = v31 + 96;
        do
        {
          v114 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + 8 + v31)) ^ *(_QWORD *)(a1 + 96)) >> (56 - v8);
          v115 = (v114 >> 3) & 0x1FFFFFE0;
          _X23 = v6 + 4 * v115;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v7 + v115;
          __asm { PRFM            #0, [X22] }
          v121 = *(unsigned int *)(v30 + 4 * (v31 & 7));
          *(_DWORD *)(v30 + 4 * (v31 & 7)) = v114;
          v122 = (v121 >> 3) & 0x1FFFFFE0;
          v123 = v6 + 4 * v122;
          v124 = (_BYTE *)(v7 + v122);
          if (((*v124 - 1) & 0x1F) != 0)
            v125 = 0;
          else
            v125 = 31;
          v126 = v125 + ((*v124 - 1) & 0x1F);
          *v124 = v126;
          v124[v126] = v121;
          *(_DWORD *)(v123 + 4 * v126) = v31++;
        }
        while (v31 < v113);
        v33 = *(_QWORD *)(a1 + 112);
        v32 = *(_QWORD *)(a1 + 56);
        v10 = (_DWORD)a2 - v9;
      }
      v127 = v10 - 32;
      LODWORD(v31) = v10 - 32;
      v128 = (_DWORD)a2 + 1 - (v9 + v127);
      if ((v128 + 1) < 8)
        v129 = v128 + 1;
      else
        v129 = 8;
      if ((unint64_t)a2 + 1 >= v9 + v127)
        v130 = v129;
      else
        v130 = 0;
      if (v127 < v130 + (int)v127)
      {
        v131 = *(_QWORD *)(a1 + 96);
        v132 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v133 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v127)) ^ v131) >> v132;
          v134 = (v133 >> 3) & 0x1FFFFFE0;
          _X25 = v33 + 4 * v134;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v32 + v134;
          __asm { PRFM            #0, [X24] }
          *(_DWORD *)(a1 + 4 * (v127++ & 7) + 64) = v133;
          --v130;
        }
        while (v130);
        v10 = (_DWORD)a2 - v9;
      }
    }
    else
    {
      v32 = *(_QWORD *)(a1 + 56);
      v33 = *(_QWORD *)(a1 + 112);
    }
    if (v31 < v10)
    {
      v34 = *(_QWORD *)(a1 + 8) + 8;
      v35 = 56 - *(_DWORD *)(a1 + 52);
      v31 = v31;
      do
      {
        v36 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v34 + v31)) ^ *(_QWORD *)(a1 + 96)) >> v35;
        v37 = (v36 >> 3) & 0x1FFFFFE0;
        _X25 = v33 + 4 * v37;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v32 + v37;
        __asm { PRFM            #0, [X24] }
        v43 = *(unsigned int *)(v30 + 4 * (v31 & 7));
        *(_DWORD *)(v30 + 4 * (v31 & 7)) = v36;
        v44 = (v43 >> 3) & 0x1FFFFFE0;
        v45 = v33 + 4 * v44;
        v46 = (_BYTE *)(v32 + v44);
        if (((*v46 - 1) & 0x1F) != 0)
          v47 = 0;
        else
          v47 = 31;
        v48 = v47 + ((*v46 - 1) & 0x1F);
        *v46 = v48;
        v46[v48] = v43;
        *(_DWORD *)(v45 + 4 * v48) = v31++;
      }
      while (v31 < v145);
    }
    v10 = (_DWORD)a2 - v9;
    *(_DWORD *)(a1 + 44) = v145;
    v49 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v145 + 8)) ^ v19) >> (56 - v8);
    v50 = (v49 >> 3) & 0x1FFFFFE0;
    _X2 = v6 + 4 * v50;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X2,#0x40]
    }
    _X17 = v7 + v50;
    __asm { PRFM            #0, [X17] }
    LODWORD(_X17) = *(_DWORD *)(v30 + 4 * (v145 & 7));
    *(_DWORD *)(v30 + 4 * (v145 & 7)) = v49;
  }
  *(_DWORD *)(a1 + 104) += _X17;
  v55 = (_X17 >> 3) & 0x1FFFFFE0;
  v56 = v6 + 4 * v55;
  v57 = (__int16 *)(v7 + v55);
  v152 = vld2q_s16(v57);
  v58 = *(_BYTE *)v57;
  v59 = vdupq_n_s8(_X17);
  v60 = __ROR8__(vsli_n_s8(vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v152.val[0]), 6uLL), vshrn_n_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v152.val[1]), 6uLL), 4uLL), 2 * *(_BYTE *)v57) & 0x5555555555555555;
  if (v60)
  {
    v61 = 0;
    v62 = (2 * *(_BYTE *)v57);
    do
    {
      v63 = ((__clz(__rbit64(v60)) + v62) >> 1) & 0x1F;
      if (v63)
      {
        v64 = *(unsigned int *)(v56 + 4 * v63);
        if (v64 < v13)
          break;
        _X7 = v9 + v64;
        __asm { PRFM            #0, [X7] }
        v150[v61++] = v64;
        --v20;
      }
      v60 &= v60 - 1;
    }
    while (v60 && v20);
  }
  else
  {
    v61 = 0;
  }
  v67 = (v58 - 1) & 0x1F;
  if (((v58 - 1) & 0x1F) != 0)
    v68 = 0;
  else
    v68 = 31;
  v69 = v68 + v67;
  *(_BYTE *)v57 = v69;
  *((_BYTE *)v57 + v69) = _X17;
  v148 = (_QWORD *)(v9 + v12);
  v70 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v70 + 1;
  *(_DWORD *)(v56 + 4 * v69) = v70;
  if (v61)
  {
    v71 = 0;
    v72 = a3 - 7;
    v73 = a2 + 1;
    v74 = v9 + 8;
    v75 = 3;
    while (1)
    {
      v76 = v150[v71];
      v77 = (_QWORD *)(v9 + v76);
      if (*(_DWORD *)(v9 + v76 + v75 - 3) != *(_DWORD *)((char *)a2 + v75 - 3))
        goto LABEL_52;
      if (v72 <= (unint64_t)a2)
      {
        v80 = a2;
      }
      else
      {
        v78 = *a2 ^ *v77;
        if (v78)
        {
          v79 = __clz(__rbit64(v78)) >> 3;
          goto LABEL_50;
        }
        v81 = 0;
        while (1)
        {
          v80 = &v73[v81];
          if ((unint64_t)&v73[v81] >= v72)
            break;
          v82 = *(_QWORD *)(v74 + v76 + v81 * 8);
          ++v81;
          v83 = *v80 ^ v82;
          if (v83)
          {
            v79 = v81 * 8 + (__clz(__rbit64(v83)) >> 3);
            goto LABEL_50;
          }
        }
        v77 = (_QWORD *)(v74 + v76 + v81 * 8);
      }
      if ((unint64_t)v80 < a3 - 3 && *(_DWORD *)v77 == *(_DWORD *)v80)
      {
        v80 = (_QWORD *)((char *)v80 + 4);
        v77 = (_QWORD *)((char *)v77 + 4);
      }
      if ((unint64_t)v80 < a3 - 1 && *(unsigned __int16 *)v77 == *(unsigned __int16 *)v80)
      {
        v80 = (_QWORD *)((char *)v80 + 2);
        v77 = (_QWORD *)((char *)v77 + 2);
      }
      if ((unint64_t)v80 < a3 && *(unsigned __int8 *)v77 == *(unsigned __int8 *)v80)
        v80 = (_QWORD *)((char *)v80 + 1);
      v79 = (char *)v80 - (char *)a2;
LABEL_50:
      if (v79 > v75)
      {
        *a4 = v10 + 3 - v76;
        v75 = v79;
        if ((_QWORD *)((char *)a2 + v79) == (_QWORD *)a3)
          goto LABEL_60;
      }
LABEL_52:
      ++v71;
      v79 = v75;
      if (v71 == v61)
        goto LABEL_60;
    }
  }
  v79 = 3;
LABEL_60:
  v84 = 0;
  v85 = *(char **)v16;
  v86 = *(_QWORD *)(v16 + 8);
  v87 = *(_QWORD *)v16 - v86 - v12;
  v88 = *(_QWORD *)(v16 + 112);
  do
  {
    _X16 = v86 + *(unsigned int *)(v88 + 16 * v22 + v84);
    __asm { PRFM            #0, [X16] }
    v84 += 4;
  }
  while (v84 != 12);
  v91 = v20 + v28;
  if ((v20 + v28) >= 3)
    v92 = 3;
  else
    v92 = v91;
  v143 = *(unsigned int *)(v88 + ((16 * v22) | 0xC));
  v144 = v92;
  v140 = *(_QWORD *)(v16 + 128);
  v141 = v143 >> 8;
  _X8 = v140 + 4 * (v143 >> 8);
  __asm { PRFM            #0, [X8] }
  v142 = v87;
  if ((_DWORD)v92)
  {
    v146 = v10 + v87 + 3;
    v95 = (unsigned int *)(v88 + 16 * v22);
    do
    {
      v97 = *v95++;
      v96 = v97;
      if (!v97)
        return v79;
      if (*(_DWORD *)(v86 + v96) == *(_DWORD *)a2)
      {
        v98 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v86 + v96 + 4), a3, v85, v148);
        a3 = (unint64_t)v149;
        v99 = v98 + 4;
        if (v98 + 4 > v79)
        {
          *a4 = (v146 - v96);
          v79 = v98 + 4;
          if ((_QWORD *)((char *)a2 + v99) == v149)
            return v99;
        }
      }
    }
    while (--v92);
  }
  if (v91 - v144 >= v143)
    v100 = v143;
  else
    v100 = v91 - v144;
  if (!v100)
    return v79;
  v101 = 4 * v100;
  v102 = (unsigned int *)(v140 + 4 * v141);
  do
  {
    v103 = *v102++;
    _X10 = v86 + v103;
    __asm { PRFM            #0, [X10] }
    v101 -= 4;
  }
  while (v101);
  v106 = *(_DWORD *)a2;
  v107 = (unsigned int *)(v140 + 4 * v141);
  v99 = v79;
  do
  {
    v109 = *v107++;
    v108 = v109;
    v110 = v86 + v109;
    if (*(_DWORD *)v110 == v106)
    {
      v111 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v110 + 4), a3, v85, v148);
      a3 = (unint64_t)v149;
      if (v111 + 4 > v99)
      {
        *a4 = v145 + v142 + 3 - v108;
        v99 = v111 + 4;
        if ((_QWORD *)((char *)a2 + v111 + 4) == v149)
          break;
      }
    }
    --v100;
  }
  while (v100);
  return v99;
}

unint64_t sub_1D4B868B8(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char v60;
  int8x16_t v61;
  int8x8_t v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unsigned int v93;
  uint64_t v94;
  unsigned int *v97;
  uint64_t v98;
  unsigned int v99;
  unint64_t v100;
  unint64_t v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int *v104;
  unsigned int v105;
  int v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  int v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v144;
  unint64_t v145;
  int v146;
  unint64_t v147;
  int v148;
  unsigned int v149;
  int v150;
  _QWORD *v152;
  _QWORD *v153;
  _DWORD v154[64];
  uint64_t v155;
  int8x16x4_t v156;

  v155 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_DWORD *)(a1 + 52);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_DWORD)a2 - v9;
  v11 = 1 << *(_DWORD *)(a1 + 256);
  v12 = *(unsigned int *)(a1 + 24);
  v13 = (_DWORD)a2 - v9 - v11;
  _ZF = (int)a2 - (int)v9 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF)
    v13 = *(_DWORD *)(a1 + 28);
  v15 = *(_DWORD *)(a1 + 268);
  v16 = *(_QWORD *)(a1 + 248);
  v17 = 66 - *(_DWORD *)(v16 + 264);
  v18 = v15 - 6;
  if (v15 >= 6)
    LOBYTE(v15) = 6;
  v19 = *(_QWORD *)(a1 + 96);
  v20 = 1 << v15;
  v21 = 0xCF1BBCDCBF9B0000 * *a2;
  v22 = v21 >> v17;
  _X4 = *(_QWORD *)(v16 + 112) + 16 * (v21 >> v17);
  __asm { PRFM            #0, [X4] }
  v28 = 1 << v18;
  if (!(!_ZF & _CF))
    v28 = 0;
  v153 = (_QWORD *)a3;
  v149 = (_DWORD)a2 - v9;
  if (*(_DWORD *)(a1 + 300))
  {
    _X17 = (v21 ^ v19) >> (56 - v8);
    *(_DWORD *)(a1 + 44) = v10;
  }
  else
  {
    v30 = a1 + 64;
    v31 = *(unsigned int *)(a1 + 44);
    if (v10 - v31 >= 0x181)
    {
      v32 = *(_QWORD *)(a1 + 56);
      v33 = *(_QWORD *)(a1 + 112);
      if (v31 <= 0xFFFFFF9F)
      {
        v115 = v31 + 96;
        do
        {
          v116 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + 8 + v31)) ^ *(_QWORD *)(a1 + 96)) >> (56 - v8);
          v117 = (v116 >> 2) & 0x3FFFFFC0;
          _X23 = v6 + 4 * v117;
          __asm
          {
            PRFM            #0, [X23]
            PRFM            #0, [X23,#0x40]
          }
          _X22 = v7 + v117;
          __asm
          {
            PRFM            #0, [X22]
            PRFM            #0, [X22,#0x20]
          }
          v124 = *(unsigned int *)(v30 + 4 * (v31 & 7));
          *(_DWORD *)(v30 + 4 * (v31 & 7)) = v116;
          v125 = (v124 >> 2) & 0x3FFFFFC0;
          v126 = v6 + 4 * v125;
          v127 = (_BYTE *)(v7 + v125);
          if (((*v127 - 1) & 0x3F) != 0)
            v128 = 0;
          else
            v128 = 63;
          v129 = v128 + ((*v127 - 1) & 0x3F);
          *v127 = v129;
          v127[v129] = v124;
          *(_DWORD *)(v126 + 4 * v129) = v31++;
        }
        while (v31 < v115);
        v33 = *(_QWORD *)(a1 + 112);
        v32 = *(_QWORD *)(a1 + 56);
        v10 = (_DWORD)a2 - v9;
      }
      v130 = v10 - 32;
      LODWORD(v31) = v10 - 32;
      v131 = (_DWORD)a2 + 1 - (v9 + v130);
      if ((v131 + 1) < 8)
        v132 = v131 + 1;
      else
        v132 = 8;
      if ((unint64_t)a2 + 1 >= v9 + v130)
        v133 = v132;
      else
        v133 = 0;
      if (v130 < v133 + (int)v130)
      {
        v134 = *(_QWORD *)(a1 + 96);
        v135 = 56 - *(_DWORD *)(a1 + 52);
        do
        {
          v136 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v130)) ^ v134) >> v135;
          v137 = (v136 >> 2) & 0x3FFFFFC0;
          _X25 = v33 + 4 * v137;
          __asm
          {
            PRFM            #0, [X25]
            PRFM            #0, [X25,#0x40]
          }
          _X24 = v32 + v137;
          __asm
          {
            PRFM            #0, [X24]
            PRFM            #0, [X24,#0x20]
          }
          *(_DWORD *)(a1 + 4 * (v130++ & 7) + 64) = v136;
          --v133;
        }
        while (v133);
        v10 = (_DWORD)a2 - v9;
      }
    }
    else
    {
      v32 = *(_QWORD *)(a1 + 56);
      v33 = *(_QWORD *)(a1 + 112);
    }
    if (v31 < v10)
    {
      v34 = *(_QWORD *)(a1 + 8) + 8;
      v35 = 56 - *(_DWORD *)(a1 + 52);
      v31 = v31;
      do
      {
        v36 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v34 + v31)) ^ *(_QWORD *)(a1 + 96)) >> v35;
        v37 = (v36 >> 2) & 0x3FFFFFC0;
        _X25 = v33 + 4 * v37;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        _X24 = v32 + v37;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x20]
        }
        v44 = *(unsigned int *)(v30 + 4 * (v31 & 7));
        *(_DWORD *)(v30 + 4 * (v31 & 7)) = v36;
        v45 = (v44 >> 2) & 0x3FFFFFC0;
        v46 = v33 + 4 * v45;
        v47 = (_BYTE *)(v32 + v45);
        if (((*v47 - 1) & 0x3F) != 0)
          v48 = 0;
        else
          v48 = 63;
        v49 = v48 + ((*v47 - 1) & 0x3F);
        *v47 = v49;
        v47[v49] = v44;
        *(_DWORD *)(v46 + 4 * v49) = v31++;
      }
      while (v31 < v149);
    }
    v10 = (_DWORD)a2 - v9;
    *(_DWORD *)(a1 + 44) = v149;
    v50 = ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v149 + 8)) ^ v19) >> (56 - v8);
    v51 = (v50 >> 2) & 0x3FFFFFC0;
    _X2 = v6 + 4 * v51;
    __asm
    {
      PRFM            #0, [X2]
      PRFM            #0, [X2,#0x40]
    }
    _X17 = v7 + v51;
    __asm
    {
      PRFM            #0, [X17]
      PRFM            #0, [X17,#0x20]
    }
    LODWORD(_X17) = *(_DWORD *)(v30 + 4 * (v149 & 7));
    *(_DWORD *)(v30 + 4 * (v149 & 7)) = v50;
  }
  *(_DWORD *)(a1 + 104) += _X17;
  v57 = (_X17 >> 2) & 0x3FFFFFC0;
  v58 = v6 + 4 * v57;
  v59 = (char *)(v7 + v57);
  v60 = *v59;
  v156 = vld4q_s8(v59);
  v61 = vdupq_n_s8(_X17);
  v156.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v156.val[3], v61), vceqq_s8(v156.val[2], v61), 1uLL), vsriq_n_s8(vceqq_s8(v156.val[1], v61), vceqq_s8(v156.val[0], v61), 1uLL), 2uLL);
  v62 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v156.val[0], v156.val[0], 4uLL), 4uLL);
  v63 = 0;
  if (v62)
  {
    v64 = __ROR8__(*(_QWORD *)&v62, v60);
    do
    {
      v65 = (__clz(__rbit64(v64)) + v60) & 0x3F;
      if (v65)
      {
        v66 = *(unsigned int *)(v58 + 4 * v65);
        if (v66 < v13)
          break;
        _X6 = v9 + v66;
        __asm { PRFM            #0, [X6] }
        v154[v63++] = v66;
        --v20;
      }
      v64 &= v64 - 1;
    }
    while (v64 && v20);
  }
  v69 = (v60 - 1) & 0x3F;
  if (((v60 - 1) & 0x3F) != 0)
    v70 = 0;
  else
    v70 = 63;
  v71 = v70 + v69;
  *v59 = v71;
  v59[v71] = _X17;
  v152 = (_QWORD *)(v9 + v12);
  v72 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v72 + 1;
  *(_DWORD *)(v58 + 4 * v71) = v72;
  if (v63)
  {
    v73 = 0;
    v74 = a3 - 7;
    v75 = a2 + 1;
    v76 = v9 + 8;
    v77 = 3;
    while (1)
    {
      v78 = v154[v73];
      v79 = (_QWORD *)(v9 + v78);
      if (*(_DWORD *)(v9 + v78 + v77 - 3) != *(_DWORD *)((char *)a2 + v77 - 3))
        goto LABEL_50;
      if (v74 <= (unint64_t)a2)
      {
        v82 = a2;
      }
      else
      {
        v80 = *a2 ^ *v79;
        if (v80)
        {
          v81 = __clz(__rbit64(v80)) >> 3;
          goto LABEL_48;
        }
        v83 = 0;
        while (1)
        {
          v82 = &v75[v83];
          if ((unint64_t)&v75[v83] >= v74)
            break;
          v84 = *(_QWORD *)(v76 + v78 + v83 * 8);
          ++v83;
          v85 = *v82 ^ v84;
          if (v85)
          {
            v81 = v83 * 8 + (__clz(__rbit64(v85)) >> 3);
            goto LABEL_48;
          }
        }
        v79 = (_QWORD *)(v76 + v78 + v83 * 8);
      }
      if ((unint64_t)v82 < a3 - 3 && *(_DWORD *)v79 == *(_DWORD *)v82)
      {
        v82 = (_QWORD *)((char *)v82 + 4);
        v79 = (_QWORD *)((char *)v79 + 4);
      }
      if ((unint64_t)v82 < a3 - 1 && *(unsigned __int16 *)v79 == *(unsigned __int16 *)v82)
      {
        v82 = (_QWORD *)((char *)v82 + 2);
        v79 = (_QWORD *)((char *)v79 + 2);
      }
      if ((unint64_t)v82 < a3 && *(unsigned __int8 *)v79 == *(unsigned __int8 *)v82)
        v82 = (_QWORD *)((char *)v82 + 1);
      v81 = (char *)v82 - (char *)a2;
LABEL_48:
      if (v81 > v77)
      {
        *a4 = v10 + 3 - v78;
        v77 = v81;
        if ((_QWORD *)((char *)a2 + v81) == (_QWORD *)a3)
          goto LABEL_58;
      }
LABEL_50:
      ++v73;
      v81 = v77;
      if (v73 == v63)
        goto LABEL_58;
    }
  }
  v81 = 3;
LABEL_58:
  v86 = 0;
  v87 = *(char **)v16;
  v88 = *(_QWORD *)(v16 + 8);
  v89 = *(_QWORD *)v16 - v88 - v12;
  v90 = *(_QWORD *)(v16 + 112);
  do
  {
    _X16 = v88 + *(unsigned int *)(v90 + 16 * v22 + v86);
    __asm { PRFM            #0, [X16] }
    v86 += 4;
  }
  while (v86 != 12);
  v93 = v20 + v28;
  if ((v20 + v28) >= 3)
    v94 = 3;
  else
    v94 = v93;
  v147 = *(unsigned int *)(v90 + ((16 * v22) | 0xC));
  v148 = v94;
  v144 = *(_QWORD *)(v16 + 128);
  v145 = v147 >> 8;
  _X8 = v144 + 4 * (v147 >> 8);
  __asm { PRFM            #0, [X8] }
  v146 = v89;
  if ((_DWORD)v94)
  {
    v150 = v10 + v89 + 3;
    v97 = (unsigned int *)(v90 + 16 * v22);
    do
    {
      v99 = *v97++;
      v98 = v99;
      if (!v99)
        return v81;
      if (*(_DWORD *)(v88 + v98) == *(_DWORD *)a2)
      {
        v100 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v88 + v98 + 4), a3, v87, v152);
        a3 = (unint64_t)v153;
        v101 = v100 + 4;
        if (v100 + 4 > v81)
        {
          *a4 = (v150 - v98);
          v81 = v100 + 4;
          if ((_QWORD *)((char *)a2 + v101) == v153)
            return v101;
        }
      }
    }
    while (--v94);
  }
  if (v93 - v148 >= v147)
    v102 = v147;
  else
    v102 = v93 - v148;
  if (!v102)
    return v81;
  v103 = 4 * v102;
  v104 = (unsigned int *)(v144 + 4 * v145);
  do
  {
    v105 = *v104++;
    _X10 = v88 + v105;
    __asm { PRFM            #0, [X10] }
    v103 -= 4;
  }
  while (v103);
  v108 = *(_DWORD *)a2;
  v109 = (unsigned int *)(v144 + 4 * v145);
  v101 = v81;
  do
  {
    v111 = *v109++;
    v110 = v111;
    v112 = v88 + v111;
    if (*(_DWORD *)v112 == v108)
    {
      v113 = sub_1D4B5F19C((_QWORD *)((char *)a2 + 4), (char *)(v112 + 4), a3, v87, v152);
      a3 = (unint64_t)v153;
      if (v113 + 4 > v101)
      {
        *a4 = v149 + v146 + 3 - v110;
        v101 = v113 + 4;
        if ((_QWORD *)((char *)a2 + v113 + 4) == v153)
          break;
      }
    }
    --v102;
  }
  while (v102);
  return v101;
}

uint64_t sub_1D4B87034(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  char v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  _DWORD *v14;

  v3 = *(_QWORD *)(result + 8);
  v4 = *(unsigned int *)(result + 44);
  if (v4 < a2 - (int)v3)
  {
    v5 = *(_QWORD *)(result + 112);
    v6 = ~(-1 << (*(_DWORD *)(result + 260) - 1));
    v7 = *(_DWORD *)(result + 264);
    v8 = 64 - v7;
    v9 = 32 - v7;
    v10 = *(_QWORD *)(result + 128);
    do
    {
      switch(a3)
      {
        case 5:
          v11 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v3 + v4);
          goto LABEL_9;
        case 6:
          v11 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v3 + v4);
          goto LABEL_9;
        case 7:
          v11 = 0xCF1BBCDCBFA56300 * *(_QWORD *)(v3 + v4);
          goto LABEL_9;
        case 8:
          v11 = 0xCF1BBCDCB7A56463 * *(_QWORD *)(v3 + v4);
LABEL_9:
          v12 = v11 >> v8;
          break;
        default:
          v12 = (-1640531535 * *(_DWORD *)(v3 + v4)) >> v9;
          break;
      }
      v13 = *(_DWORD *)(v5 + 4 * v12);
      v14 = (_DWORD *)(v10 + 8 * (v4 & v6));
      *(_DWORD *)(v5 + 4 * v12) = v4;
      *v14 = v13;
      v14[1] = 1;
      ++v4;
    }
    while (v4 < (a2 - v3));
  }
  *(_DWORD *)(result + 44) = a2 - v3;
  return result;
}

unint64_t sub_1D4B87160(uint64_t a1, uint64_t *a2, unint64_t a3, unsigned int *a4, int a5, int a6)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unsigned int *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  _DWORD *v64;
  unsigned int *v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int *v73;
  unsigned int *v74;
  int v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  _DWORD *v91;
  unsigned int *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int v121;
  unsigned int *v122;
  unint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  unsigned int v128;
  unsigned int v129;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  _QWORD *v147;
  int v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  char *v155;
  _QWORD *v156;
  uint64_t v157;
  unsigned int *v158;
  char *v159;
  unint64_t v160;
  unsigned int v161;
  unint64_t v162;
  _QWORD *v163;
  unint64_t v164;
  int v165;
  int v166;
  unint64_t v167;
  unint64_t v168;
  int v169;
  _DWORD v170[3];

  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_DWORD *)(a1 + 264);
  v8 = a5 - 5;
  switch(a5)
  {
    case 5:
      v9 = (int)a2;
      v10 = *a2;
      v11 = -1157627904;
      goto LABEL_7;
    case 6:
      v9 = (int)a2;
      v10 = *a2;
      v11 = -1080360960;
      goto LABEL_7;
    case 7:
      v9 = (int)a2;
      v10 = *a2;
      v11 = -1079680256;
      goto LABEL_7;
    case 8:
      v9 = (int)a2;
      v10 = *a2;
      v11 = -1213897629;
LABEL_7:
      v12 = (v10 * (v11 | 0xCF1BBCDC00000000)) >> -(char)v7;
      break;
    default:
      v9 = (int)a2;
      v12 = (-1640531535 * *(_DWORD *)a2) >> -(char)v7;
      break;
  }
  v13 = *(_QWORD *)(a1 + 8);
  v14 = v9 - v13;
  v15 = 1 << *(_DWORD *)(a1 + 256);
  v16 = v9 - v13 - v15;
  if (v9 - (int)v13 - *(_DWORD *)(a1 + 28) <= v15 || *(_DWORD *)(a1 + 40) != 0)
    v16 = *(_DWORD *)(a1 + 28);
  v18 = *(_QWORD *)(a1 + 128);
  v19 = ~(-1 << (*(_DWORD *)(a1 + 260) - 1));
  v20 = v14 + (-1 << (*(_DWORD *)(a1 + 260) - 1)) + 1;
  if (v14 < v19)
    v20 = 0;
  v127 = v9 - v13;
  v128 = v20;
  if (v20 <= v16)
    v21 = v16;
  else
    v21 = v20;
  v22 = *(_DWORD *)(v6 + 4 * v12);
  v134 = a1;
  v139 = *(_QWORD *)(a1 + 128);
  v140 = *(_QWORD *)(a1 + 8);
  v148 = a6;
  v135 = ~(-1 << (*(_DWORD *)(a1 + 260) - 1));
  v126 = v8;
  v133 = 1 << *(_DWORD *)(a1 + 268);
  v129 = v16;
  if (v22 > v21)
  {
    v23 = 0;
    v24 = 1 << *(_DWORD *)(a1 + 268);
    while (1)
    {
      v25 = v22;
      v26 = (unsigned int *)(v18 + 8 * (v22 & v19));
      v27 = v26[1];
      v28 = v27 == 1 && v24 >= 2;
      if (!v28)
        break;
      v26[1] = v23;
      --v24;
      v22 = *v26;
      v23 = v25;
      if (v22 <= v21)
        goto LABEL_30;
    }
    if (v27 == 1)
      *(_QWORD *)v26 = 0;
    v25 = v23;
    if (v23)
    {
LABEL_30:
      v124 = v12;
      v125 = v6;
      v132 = v18 + 4;
      v29 = *(_QWORD *)(a1 + 16);
      v137 = v29;
      v136 = v21;
      while (1)
      {
        v30 = *(_DWORD *)(v132 + 8 * (v25 & v19));
        v31 = -1 << (*(_DWORD *)(a1 + 260) - 1);
        v32 = *(unsigned int *)(a1 + 24);
        v33 = *(_DWORD *)(a1 + 28);
        if (v32 <= v25)
          v34 = v13;
        else
          v34 = v29;
        v155 = (char *)(v29 + v32);
        if (v32 <= v25)
          v35 = a3;
        else
          v35 = v29 + v32;
        v36 = (unsigned int *)(v18 + 8 * (v25 & ~v31));
        v37 = v36 + 1;
        v38 = *v36;
        v170[0] = 0;
        v39 = 1 << *(_DWORD *)(a1 + 256);
        if (v25 - v33 > v39)
          v33 = v25 - v39;
        v152 = v24;
        v150 = v30;
        if (v24)
        {
          if (v38 > v33)
            break;
        }
LABEL_85:
        *v37 = 0;
        *v36 = 0;
        v24 = v152 + 1;
        a1 = v134;
        v19 = v135;
        v25 = v150;
        if (!v150)
        {
          v16 = v129;
          v12 = v124;
          v6 = v125;
          goto LABEL_88;
        }
      }
      v40 = 0;
      v41 = 0;
      v42 = ~v31;
      v43 = v25;
      v44 = v34 + v25;
      v143 = (_QWORD *)(v13 + v32);
      v45 = v35 - 7;
      v46 = v35 - 3;
      v47 = v35 - 1;
      v138 = v44 + 8;
      v161 = v33;
      v146 = ~v31;
      v144 = v44;
      v141 = v35 - 3;
      v142 = v35 - 7;
      while (1)
      {
        if (v41 >= v40)
          v48 = v40;
        else
          v48 = v41;
        v49 = v13;
        v164 = v41;
        v167 = v40;
        if (a6 != 1)
          goto LABEL_54;
        v50 = v48 + v38;
        if (v32 > v43 || v50 >= v32)
          break;
        v51 = v29 + v38;
        v52 = (_QWORD *)(v44 + v48);
        v158 = v36;
        v53 = v37;
        v54 = v32;
        v55 = v35;
        v56 = v43;
        v57 = sub_1D4B5F19C(v52, (char *)(v51 + v48), v35, v155, v143);
        v43 = v56;
        v35 = v55;
        v32 = v54;
        v46 = v141;
        v45 = v142;
        v37 = v53;
        v44 = v144;
        v36 = v158;
        v21 = v136;
        v29 = v137;
        v18 = v139;
        v13 = v140;
        a6 = v148;
        v58 = v57 + v48;
        v42 = v146;
        if (v58 + v38 >= v32)
          v59 = v140 + v38;
        else
          v59 = v51;
LABEL_69:
        if (v44 + v58 == v35)
          goto LABEL_85;
        v65 = (unsigned int *)(v18 + 8 * (v38 & v42));
        if (*(unsigned __int8 *)(v59 + v58) >= *(unsigned __int8 *)(v44 + v58))
        {
          *v37 = v38;
          if (v38 <= v21)
          {
            v37 = v170;
            goto LABEL_85;
          }
          v40 = v58;
          v37 = (unsigned int *)(v18 + 8 * (v38 & v42));
          v66 = v161;
          v41 = v164;
        }
        else
        {
          *v36 = v38;
          if (v38 <= v21)
          {
            v36 = v170;
            goto LABEL_85;
          }
          v36 = v65 + 1;
          v41 = v58;
          ++v65;
          v66 = v161;
          v40 = v167;
        }
        if (--v24)
        {
          v38 = *v65;
          if (*v65 > v66)
            continue;
        }
        goto LABEL_85;
      }
      if (v50 >= v32)
        v49 = v13;
      else
        v49 = v29;
LABEL_54:
      v59 = v49 + v38;
      v60 = (char *)(v44 + v48);
      v61 = (_QWORD *)(v59 + v48);
      if (v45 <= v44 + v48)
      {
        v64 = (_DWORD *)(v44 + v48);
      }
      else
      {
        v62 = *(_QWORD *)v60 ^ *v61;
        if (v62)
        {
          v63 = __clz(__rbit64(v62)) >> 3;
LABEL_68:
          v58 = v63 + v48;
          goto LABEL_69;
        }
        v67 = 0;
        v68 = v138 + v48;
        while (1)
        {
          v69 = (_QWORD *)(v68 + v67);
          if (v68 + v67 >= v45)
            break;
          v70 = *(_QWORD *)(v49 + v48 + v38 + 8 + v67);
          v67 += 8;
          v71 = *v69 ^ v70;
          if (v71)
          {
            v63 = v67 + (__clz(__rbit64(v71)) >> 3);
            goto LABEL_68;
          }
        }
        v64 = (_DWORD *)(v138 + v48 + v67);
        v61 = (_QWORD *)(v49 + v67 + v48 + v38 + 8);
      }
      if ((unint64_t)v64 < v46 && *(_DWORD *)v61 == *v64)
      {
        ++v64;
        v61 = (_QWORD *)((char *)v61 + 4);
      }
      if ((unint64_t)v64 < v47 && *(unsigned __int16 *)v61 == *(unsigned __int16 *)v64)
      {
        v64 = (_DWORD *)((char *)v64 + 2);
        v61 = (_QWORD *)((char *)v61 + 2);
      }
      if ((unint64_t)v64 < v35 && *(unsigned __int8 *)v61 == *(unsigned __int8 *)v64)
        v64 = (_DWORD *)((char *)v64 + 1);
      v63 = (char *)v64 - v60;
      goto LABEL_68;
    }
  }
  v29 = *(_QWORD *)(a1 + 16);
LABEL_88:
  v72 = *(unsigned int *)(a1 + 24);
  v73 = (unsigned int *)(v18 + 8 * (v19 & v127));
  v74 = v73 + 1;
  v75 = v127 + 9;
  v169 = 0;
  v76 = *(_DWORD *)(v6 + 4 * v12);
  *(_DWORD *)(v6 + 4 * v12) = v127;
  if (v76 <= v16)
  {
    v168 = 0;
    v80 = a2;
    goto LABEL_136;
  }
  v168 = 0;
  v77 = 0;
  v78 = 0;
  v159 = (char *)(v29 + v72);
  v156 = (_QWORD *)(v13 + v72);
  v79 = a3 - 7;
  v80 = a2;
  v145 = v13 + 8;
  v147 = a2 + 1;
  while (1)
  {
    if (v78 >= v77)
      v81 = v77;
    else
      v81 = v78;
    v82 = (char *)v80 + v81;
    if (a6 != 1 || v81 + v76 >= v72)
    {
      v87 = v13 + v76;
      v88 = (_QWORD *)(v87 + v81);
      if (v79 <= (unint64_t)v82)
      {
        v91 = (_DWORD *)((char *)v80 + v81);
      }
      else
      {
        v89 = *(_QWORD *)v82 ^ *v88;
        if (v89)
        {
          v90 = __clz(__rbit64(v89)) >> 3;
LABEL_113:
          v80 = a2;
          v86 = v90 + v81;
          goto LABEL_114;
        }
        v93 = 0;
        v94 = (char *)v147 + v81;
        while (1)
        {
          v95 = &v94[v93];
          if ((unint64_t)&v94[v93] >= v79)
            break;
          v96 = *(_QWORD *)(v145 + v81 + v76 + v93);
          v93 += 8;
          v97 = *(_QWORD *)v95 ^ v96;
          if (v97)
          {
            v90 = v93 + (__clz(__rbit64(v97)) >> 3);
            goto LABEL_113;
          }
        }
        v91 = (_DWORD *)((char *)v147 + v81 + v93);
        v88 = (_QWORD *)(v145 + v81 + v76 + v93);
      }
      if ((unint64_t)v91 < a3 - 3 && *(_DWORD *)v88 == *v91)
      {
        ++v91;
        v88 = (_QWORD *)((char *)v88 + 4);
      }
      if ((unint64_t)v91 < a3 - 1 && *(unsigned __int16 *)v88 == *(unsigned __int16 *)v91)
      {
        v91 = (_DWORD *)((char *)v91 + 2);
        v88 = (_QWORD *)((char *)v88 + 2);
      }
      if ((unint64_t)v91 < a3 && *(unsigned __int8 *)v88 == *(unsigned __int8 *)v91)
        v91 = (_DWORD *)((char *)v91 + 1);
      v90 = (char *)v91 - v82;
      goto LABEL_113;
    }
    v165 = v75;
    v162 = v78;
    v83 = v29 + v76;
    v84 = v29;
    v85 = sub_1D4B5F19C(v82, (char *)(v83 + v81), a3, v159, v156);
    v29 = v84;
    v18 = v139;
    v13 = v140;
    v86 = v85 + v81;
    v87 = v85 + v81 + v76 >= v72 ? v140 + v76 : v83;
    v78 = v162;
    v75 = v165;
    v19 = v135;
    v80 = a2;
LABEL_114:
    if (v86 <= v168)
    {
      a6 = v148;
      goto LABEL_122;
    }
    if (v86 > v75 - v76)
      v75 = v76 + v86;
    if ((int)(__clz(*a4) - __clz(v127 - v76 + 1)) < 4 * ((int)v86 - (int)v168))
    {
      *(_QWORD *)a4 = v127 - v76 + 3;
      v168 = v86;
    }
    a6 = v148;
    if ((uint64_t *)((char *)v80 + v86) == (uint64_t *)a3)
      break;
LABEL_122:
    v92 = (unsigned int *)(v18 + 8 * (v76 & v19));
    if (*(unsigned __int8 *)(v87 + v86) >= *((unsigned __int8 *)v80 + v86))
    {
      *v74 = v76;
      if (v76 <= v128)
      {
        v74 = (unsigned int *)&v169;
        goto LABEL_136;
      }
      v77 = v86;
      v74 = (unsigned int *)(v18 + 8 * (v76 & v19));
    }
    else
    {
      *v73 = v76;
      if (v76 <= v128)
      {
        v73 = (unsigned int *)&v169;
        goto LABEL_136;
      }
      ++v92;
      v78 = v86;
      v73 = v92;
    }
    if (--v133)
    {
      v76 = *v92;
      if (*v92 > v129)
        continue;
    }
    goto LABEL_136;
  }
  v102 = v133;
  if (v148 == 2)
    v102 = 0;
  v133 = v102;
LABEL_136:
  *v74 = 0;
  *v73 = 0;
  v166 = v75;
  if (a6 == 2 && v133)
  {
    v98 = *(_QWORD *)(v134 + 248);
    v99 = *(_DWORD *)(v98 + 264);
    switch(v126)
    {
      case 0:
        v100 = *v80;
        v101 = -1157627904;
        goto LABEL_148;
      case 1:
        v100 = *v80;
        v101 = -1080360960;
        goto LABEL_148;
      case 2:
        v100 = *v80;
        v101 = -1079680256;
        goto LABEL_148;
      case 3:
        v100 = *v80;
        v101 = -1213897629;
LABEL_148:
        v103 = (v100 * (v101 | 0xCF1BBCDC00000000)) >> -(char)v99;
        break;
      default:
        v103 = (-1640531535 * *(_DWORD *)v80) >> -(char)v99;
        break;
    }
    v104 = *(char **)v98;
    v105 = *(_QWORD *)(v98 + 8);
    v106 = *(_QWORD *)v98 - v105;
    v107 = *(_DWORD *)(v98 + 28);
    v108 = ~(-1 << (*(_DWORD *)(v98 + 260) - 1));
    v109 = v106 - v107 <= v108 ? *(_DWORD *)(v98 + 28) : v106 + (-1 << (*(_DWORD *)(v98 + 260) - 1)) + 1;
    v110 = *(_DWORD *)(*(_QWORD *)(v98 + 112) + 4 * v103);
    if (v110 > v107)
    {
      v151 = *(_DWORD *)(v98 + 28);
      v111 = 0;
      v112 = 0;
      v163 = (_QWORD *)(v13 + *(unsigned int *)(v134 + 24));
      v153 = *(_QWORD *)(v98 + 128);
      v160 = (*(_DWORD *)v98 - v105);
      v149 = (*(_DWORD *)(v134 + 28) - v106);
      v157 = v13 + v149;
      v113 = v133 - 1;
      do
      {
        if (v112 >= v111)
          v114 = v111;
        else
          v114 = v112;
        v115 = v105;
        v116 = v105 + v110;
        v117 = v104;
        v118 = sub_1D4B5F19C((uint64_t *)((char *)v80 + v114), (char *)(v116 + v114), a3, v104, v163);
        v119 = v118 + v114;
        if (v118 + v114 + v110 >= v160)
          v120 = v157 + v110;
        else
          v120 = v116;
        if (v119 <= v168)
        {
          v80 = a2;
          v105 = v115;
          v104 = v117;
        }
        else
        {
          v121 = v127 - (v149 + v110);
          if ((int)(__clz(*a4 + 1) - __clz(v121 + 1)) < 4 * ((int)v119 - (int)v168))
          {
            *(_QWORD *)a4 = (v121 + 3);
            v168 = v118 + v114;
          }
          v80 = a2;
          v105 = v115;
          v104 = v117;
          if ((uint64_t *)((char *)a2 + v119) == (uint64_t *)a3)
            break;
        }
        v122 = (unsigned int *)(v153 + 8 * (v110 & v108));
        if (*(unsigned __int8 *)(v120 + v119) >= *((unsigned __int8 *)v80 + v119))
        {
          if (v110 <= v109)
            break;
        }
        else
        {
          if (v110 <= v109)
            break;
          ++v122;
          v112 = v118 + v114;
          v119 = v111;
        }
        v28 = v113-- != 0;
        if (!v28)
          break;
        v110 = *v122;
        v111 = v119;
      }
      while (*v122 > v151);
    }
  }
  *(_DWORD *)(v134 + 44) = v166 - 8;
  return v168;
}

_DWORD *sub_1D4B87C08(_DWORD *result, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *a2;
  result[5] = *a2;
  if (!result[3])
    result[3] = 64;
  v3 = result[1];
  if (!v3)
  {
    v3 = v2 - 7;
    if (v2 - 7 <= 6)
      v3 = 6;
    result[1] = v3;
  }
  v4 = result[2];
  if (!result[4])
  {
    v5 = v2 >= v3;
    v6 = v2 - v3;
    if (!v5)
      v6 = 0;
    result[4] = v6;
  }
  if (v4)
    v7 = v4;
  else
    v7 = 3;
  if (v7 >= v3)
    v7 = v3;
  result[2] = v7;
  return result;
}

uint64_t sub_1D4B87C70(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 >= v2)
    LOBYTE(v1) = a1[1];
  v3 = (1 << (v2 - v1)) + (8 << v2);
  if (*a1 == 1)
    return v3;
  else
    return 0;
}

unint64_t sub_1D4B87CA4(_DWORD *a1, unint64_t a2)
{
  if (*a1 == 1)
    return a2 / a1[3];
  else
    return 0;
}

unint64_t sub_1D4B87CC4(unint64_t result, unint64_t a2, unint64_t a3, _DWORD *a4)
{
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  unsigned __int8 v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30[2];

  v4 = a4[1];
  v5 = a4[2];
  v28 = *(_QWORD *)(result + 8);
  v7 = a4[3];
  v6 = a4[4];
  if (v7 >= 0x40)
    v8 = 64;
  else
    v8 = a4[3];
  v9 = v6 - 1;
  v10 = ~(-1 << v6);
  v11 = v8 - v6;
  if (v9 >= v8)
    v11 = 0;
  v30[0] = 0xFFFFFFFFLL;
  v30[1] = v10 << v11;
  if (a2 < a3)
  {
    v12 = a2;
    v13 = result;
    v25 = a3;
    v26 = result + 64;
    v15 = a2 + v7;
    v16 = ~(-1 << (v4 - v5));
    do
    {
      v29 = 0;
      result = sub_1D4B87E34(v30, v12, a3 - v12, v26, &v29);
      v27 = result;
      v17 = v29;
      if (v29)
      {
        v18 = (uint64_t *)v26;
        do
        {
          v19 = *v18++;
          v20 = v12 + v19;
          if (v12 + v19 >= v15)
          {
            v21 = v20 - v7;
            result = sub_1D4B4DB8C((uint64_t *)(v20 - v7), v7, 0);
            v22 = a4[2];
            v23 = *(_QWORD *)(v13 + 56);
            v24 = *(_BYTE *)(v23 + (result & v16));
            *(_QWORD *)(*(_QWORD *)(v13 + 40) + 8 * ((result & v16) << v22) + 8 * v24) = result & 0xFFFFFFFF00000000 | (v21 - v28);
            *(_BYTE *)(v23 + (result & v16)) = (v24 + 1) & ~(-1 << v22);
          }
          --v17;
        }
        while (v17);
      }
      v12 += v27;
      a3 = v25;
    }
    while (v12 < v25);
  }
  return result;
}

unint64_t sub_1D4B87E34(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v5 = *a1;
  v6 = a1[1];
  if (a3 < 4)
  {
    v9 = 0;
LABEL_18:
    if (v9 < a3)
    {
      while (1)
      {
        v5 = qword_1D4BD73B8[*(unsigned __int8 *)(a2 + v9)] + 2 * v5;
        v14 = v9 + 1;
        if ((v5 & v6) != 0)
        {
          if (v14 >= a3)
            goto LABEL_27;
        }
        else
        {
          v15 = *a5;
          *(_QWORD *)(a4 + 8 * v15) = v14;
          LODWORD(v15) = v15 + 1;
          *a5 = v15;
          if ((_DWORD)v15 == 64 || v14 >= a3)
          {
LABEL_27:
            ++v9;
            break;
          }
        }
        ++v9;
      }
    }
  }
  else
  {
    v7 = 0;
    v8 = a2 + 1;
    while (1)
    {
      v5 = qword_1D4BD73B8[*(unsigned __int8 *)(a2 + v7)] + 2 * v5;
      if ((v5 & v6) == 0)
      {
        v10 = *a5;
        *(_QWORD *)(a4 + 8 * v10) = v7 + 1;
        *a5 = v10 + 1;
        if ((_DWORD)v10 == 63)
        {
          v9 = v7 + 1;
          goto LABEL_28;
        }
      }
      v5 = qword_1D4BD73B8[*(unsigned __int8 *)(v8 + v7)] + 2 * v5;
      if ((v5 & v6) == 0)
      {
        v11 = *a5;
        *(_QWORD *)(a4 + 8 * v11) = v7 + 2;
        *a5 = v11 + 1;
        if ((_DWORD)v11 == 63)
        {
          v9 = v7 + 2;
          goto LABEL_28;
        }
      }
      v5 = qword_1D4BD73B8[*(unsigned __int8 *)(v8 + v7 + 1)] + 2 * v5;
      if ((v5 & v6) == 0)
      {
        v12 = *a5;
        *(_QWORD *)(a4 + 8 * v12) = v7 + 3;
        *a5 = v12 + 1;
        if ((_DWORD)v12 == 63)
        {
          v9 = v7 + 3;
          goto LABEL_28;
        }
      }
      v5 = qword_1D4BD73B8[*(unsigned __int8 *)(v8 + v7 + 2)] + 2 * v5;
      v9 = v7 + 4;
      if ((v5 & v6) == 0)
      {
        v13 = *a5;
        *(_QWORD *)(a4 + 8 * v13) = v9;
        LODWORD(v13) = v13 + 1;
        *a5 = v13;
        if ((_DWORD)v13 == 64)
          break;
      }
      v7 += 4;
      if (v9 + 3 >= a3)
        goto LABEL_18;
    }
    v9 = v7 + 4;
  }
LABEL_28:
  *a1 = v5;
  return v9;
}

unint64_t sub_1D4B87FC0(uint32x2_t *a1, _QWORD *a2, _DWORD *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint32x2_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint32x2_t *v13;
  uint32x2_t *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint32x2_t v18;
  unsigned int v19;
  __int32 v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint32x2_t v24;
  _DWORD *v25;
  int v26;
  unsigned __int32 v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  uint32x2_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t result;
  char *v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _DWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v63;
  uint32x2_t v64;
  unsigned int v65;
  unsigned int v66;
  _QWORD *v67;
  uint64_t v68;
  uint32x2_t *v69;
  unsigned __int8 *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int *v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  unsigned int *v78;
  unsigned int *v79;
  _QWORD *v80;
  uint64_t v81;
  uint32x2_t v82;
  char *v83;
  char *v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  _DWORD *v88;
  unint64_t v89;
  char *v90;
  _DWORD *v91;
  unsigned __int8 *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  BOOL v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unsigned __int8 *v104;
  _DWORD *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  uint64_t v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  uint64_t v116;
  _DWORD *v117;
  int v118;
  unint64_t v119;
  char v120;
  uint32x2_t v121;
  unsigned __int8 v122;
  uint32x2_t v123;
  char v124;
  unsigned __int8 v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint32x2_t *v135;
  unint64_t v136;
  int v137;
  uint32x2_t *v138;
  _QWORD *v139;
  uint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _DWORD *v147;
  unint64_t v148;
  uint64_t v149;
  uint32x2_t *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint32x2_t v155;
  char *v156;
  uint32x2_t v157;
  unsigned int v158;
  unsigned int v159;
  unint64_t v160;
  _QWORD *v161;
  unint64_t v162;
  unsigned int v163;
  uint64_t v164[3];

  if ((a5 & 0xFFFFF) != 0)
    v5 = (a5 >> 20) + 1;
  else
    v5 = a5 >> 20;
  if (!v5)
    return 0;
  v8 = a1;
  v9 = 0;
  v10 = 0;
  v11 = 1 << a3[5];
  v12 = (char *)(a4 + a5);
  v13 = a1 + 8;
  v14 = a1 + 72;
  v15 = a2[3];
  v140 = (uint64_t *)&a1[74];
  v147 = a3;
  while (1)
  {
    if (v15 >= a2[4])
      return 0;
    v16 = (unsigned __int8 *)(a4 + (v10 << 20));
    v17 = (unint64_t)(v12 - (char *)v16) >= 0x100000 ? (uint64_t)(v16 + 0x100000) : (uint64_t)v12;
    v18 = v8[1];
    v19 = v17 - v18.i32[0];
    if ((v17 - v18.i32[0]) > 0xE0000000)
    {
      v21 = 1 << a3[1];
      v22 = (_DWORD)v16 - v18.i32[0] - v11;
      v23 = v22 - 2;
      v24 = (uint32x2_t)(*(_QWORD *)&v8[2] + v23);
      v8[1] = (uint32x2_t)(*(_QWORD *)&v18 + v23);
      v8[2] = v24;
      v8[3] = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)vdup_n_s32(v22), v8[3]), (int8x8_t)0x200000002, (int8x8_t)vsub_s32((int32x2_t)v8[3], vdup_n_s32(v23)));
      ++v8[4].i32[0];
      v25 = (_DWORD *)v8[5];
      do
      {
        v26 = *v25 - v23;
        if (*v25 < v23)
          v26 = 0;
        *v25 = v26;
        v25 += 2;
        --v21;
      }
      while (v21);
      v20 = 0;
      v8[6].i32[0] = 0;
      v18 = v8[1];
      v19 = v17 - v18.i32[0];
    }
    else
    {
      v20 = v8[6].i32[0];
    }
    v27 = v8[3].u32[1];
    if (v20 + v11 >= v19)
    {
      v29 = v8[3].u32[0];
    }
    else
    {
      v28 = v19 - v11;
      if (v27 < v28)
      {
        v8[3].i32[1] = v28;
        v27 = v28;
      }
      v29 = v8[3].u32[0];
      if (v29 < v27)
      {
        v8[3].i32[0] = v27;
        v29 = v27;
      }
      v8[6].i32[0] = 0;
    }
    v162 = a3[3];
    v31 = a3[1];
    v30 = a3[2];
    if (v27 >= v29)
    {
      v32 = 0;
      v33 = v29;
    }
    else
    {
      v32 = v8[2];
      v33 = v27;
    }
    v34 = v17 - (_QWORD)v16;
    v35 = *(_QWORD *)&v32 + v33;
    if (v27 >= v29)
      v35 = 0;
    v152 = v35;
    v36 = (char *)(*(_QWORD *)&v32 + v29);
    v156 = v36;
    if (v27 >= v29)
      v36 = 0;
    v148 = (unint64_t)v36;
    result = v34;
    if (v34 >= v162)
      break;
LABEL_162:
    if (result > 0xFFFFFFFFFFFFFF88)
      return result;
    v126 = a2[3];
    if (v15 >= v126)
      result = v34 + v9;
    else
      *(_DWORD *)(*a2 + 12 * v15 + 4) += v9;
    ++v10;
    v15 = v126;
    v9 = result;
    if (v10 == v5)
      return 0;
  }
  v155 = v32;
  v134 = v34;
  v38 = (char *)&v16[v34];
  v39 = (unint64_t)&v16[v34 - 8];
  if (v162 >= 0x40)
    v40 = 64;
  else
    v40 = a3[3];
  v41 = a3[4];
  v42 = v41 - 1;
  v43 = ~(-1 << v41);
  v44 = v40 - v41;
  if (v42 >= v40)
    v45 = 0;
  else
    v45 = v44;
  v164[0] = 0xFFFFFFFFLL;
  v164[1] = v43 << v45;
  v141 = v39;
  if ((unint64_t)&v16[v162] >= v39)
  {
LABEL_161:
    result = v38 - (char *)v16;
    v34 = v134;
    goto LABEL_162;
  }
  v127 = v15;
  v128 = v9;
  v129 = v12;
  v130 = v11;
  v131 = v10;
  v132 = v5;
  v133 = a4;
  v146 = 1 << v30;
  v154 = (unint64_t)(v38 - 3);
  v160 = (unint64_t)v38;
  v153 = (unint64_t)(v38 - 1);
  v145 = *(_QWORD *)&v18 - 1;
  v149 = *(_QWORD *)&v18 + 8;
  v144 = *(_QWORD *)&v18 + 8 + v29;
  v161 = (_QWORD *)(*(_QWORD *)&v18 + v29);
  v46 = v39;
  v47 = (unint64_t)&v16[v162];
  v138 = v14;
  v139 = a2;
  v150 = v8;
  v135 = v13;
  v157 = v18;
  v158 = v29;
  v159 = v33;
  v137 = ~(-1 << (v31 - v30));
  v136 = (unint64_t)(v38 - 7);
  while (2)
  {
    v163 = 0;
    v48 = sub_1D4B87E34(v164, v47, v46 - v47, (uint64_t)v13, &v163);
    if (!v163)
    {
      v8 = v150;
      goto LABEL_159;
    }
    v142 = v47;
    v143 = v48;
    v49 = v47 - v162;
    v50 = a3;
    v51 = v140;
    v151 = v163;
    v52 = v163;
    v53 = v162;
    do
    {
      v54 = (uint64_t)*v13++;
      v55 = sub_1D4B4DB8C((uint64_t *)(v49 + v54), v162, 0);
      v56 = v55 & v137;
      *(v51 - 2) = v49 + v54;
      *((_DWORD *)v51 - 2) = v56;
      *((_DWORD *)v51 - 1) = HIDWORD(v55);
      _X8 = *(_QWORD *)&v150[5] + 8 * (v56 << v50[2]);
      *v51 = _X8;
      v51 += 3;
      __asm { PRFM            #0, [X8] }
      --v52;
    }
    while (v52);
    v63 = 0;
    a3 = v50;
    v8 = v150;
    v14 = v138;
    a2 = v139;
    v64 = v157;
    v65 = v27;
    v66 = v159;
    v67 = v161;
    v68 = v151;
    while (2)
    {
      v69 = &v138[3 * v63];
      v70 = (unsigned __int8 *)*v69;
      v71 = v69[1].u32[0];
      v72 = v69[1].u32[1];
      v73 = *(_QWORD *)v69 - *(_QWORD *)&v64;
      if (*(_QWORD *)v69 < (unint64_t)v16)
        goto LABEL_154;
      v74 = 0;
      v75 = 0;
      v76 = 0;
      v77 = 0;
      v78 = (unsigned int *)v138[3 * v63 + 2];
      v79 = &v78[2 * v146];
      v80 = v70 + 8;
      while (2)
      {
        if (v78[1] != v72)
          goto LABEL_147;
        v81 = *v78;
        if (v81 <= v66)
          goto LABEL_147;
        if (v65 < v158)
        {
          if (v81 >= v158)
            v82 = v64;
          else
            v82 = v155;
          v83 = (char *)(*(_QWORD *)&v82 + v81);
          if (v81 >= v158)
            v84 = (char *)v160;
          else
            v84 = v156;
          v85 = (char *)&v70[v84 - v83];
          if ((unint64_t)v85 >= v160)
            v85 = (char *)v160;
          if (v85 - 7 <= (char *)v70)
          {
            v90 = (char *)v70;
            v91 = (_DWORD *)(*(_QWORD *)&v82 + v81);
          }
          else
          {
            v86 = *(_QWORD *)v70 ^ *(_QWORD *)v83;
            if (v86)
            {
              v87 = __clz(__rbit64(v86)) >> 3;
              v64 = v157;
LABEL_96:
              v67 = v161;
              v53 = v162;
LABEL_97:
              if (&v83[v87] != v84)
                goto LABEL_123;
              v99 = (char *)&v70[v87];
              if (v136 <= (unint64_t)&v70[v87])
              {
                v104 = &v70[v87];
                v105 = v67;
              }
              else
              {
                v100 = *(_QWORD *)v99 ^ *v67;
                if (v100)
                {
                  v101 = __clz(__rbit64(v100)) >> 3;
LABEL_121:
                  v67 = v161;
                  v53 = v162;
LABEL_122:
                  v87 += v101;
LABEL_123:
                  if (v87 >= v53)
                  {
                    v93 = 0;
                    if (v81 >= v158)
                      v110 = (unsigned __int8 *)v67;
                    else
                      v110 = (unsigned __int8 *)v152;
                    if (v70 > v16 && v83 > (char *)v110)
                    {
                      v93 = 0;
                      v111 = (unsigned __int8 *)(*(_QWORD *)&v82 + v81 - 1);
                      v112 = v70 - 1;
                      do
                      {
                        if (*v112 != *v111)
                          break;
                        ++v93;
                        if (v112 <= v16)
                          break;
                        --v112;
                        v96 = v111-- > v110;
                      }
                      while (v96);
                    }
                    if (v110 == (unsigned __int8 *)v152 || &v83[-v93] != (char *)v110)
                    {
                      v65 = v27;
                    }
                    else
                    {
                      v113 = 0;
                      v65 = v27;
                      if (v148 > v152 && &v70[-v93] > v16)
                      {
                        v113 = 0;
                        v114 = &v70[-v93 - 1];
                        v115 = (unsigned __int8 *)(v148 - 1);
                        do
                        {
                          if (*v114 != *v115)
                            break;
                          ++v113;
                          if (v114 <= v16)
                            break;
                          --v114;
                          v96 = (unint64_t)v115-- > v152;
                        }
                        while (v96);
                      }
                      v93 += v113;
                    }
                    v67 = v161;
                    v53 = v162;
                    goto LABEL_144;
                  }
                  goto LABEL_146;
                }
                v106 = (char *)v80 + v87;
                while (1)
                {
                  v107 = &v106[v100];
                  if ((unint64_t)&v106[v100] >= v136)
                    break;
                  v108 = *(_QWORD *)(v144 + v100);
                  v100 += 8;
                  v109 = *(_QWORD *)v107 ^ v108;
                  if (v109)
                  {
                    v101 = v100 + (__clz(__rbit64(v109)) >> 3);
                    a3 = v147;
                    v64 = v157;
                    goto LABEL_121;
                  }
                }
                v104 = (unsigned __int8 *)v80 + v87 + v100;
                v105 = (_DWORD *)(v144 + v100);
                a3 = v147;
              }
              if ((unint64_t)v104 < v154 && *v105 == *(_DWORD *)v104)
              {
                v104 += 4;
                ++v105;
              }
              if ((unint64_t)v104 < v153 && *(unsigned __int16 *)v105 == *(unsigned __int16 *)v104)
              {
                v104 += 2;
                v105 = (_DWORD *)((char *)v105 + 2);
              }
              if ((unint64_t)v104 < v160 && *(unsigned __int8 *)v105 == *v104)
                ++v104;
              v64 = v157;
              v67 = v161;
              v53 = v162;
              v101 = v104 - (unsigned __int8 *)v99;
              v65 = v27;
              goto LABEL_122;
            }
            while (1)
            {
              v90 = (char *)v80 + v86;
              if ((char *)v80 + v86 >= v85 - 7)
                break;
              v97 = *(_QWORD *)(*(_QWORD *)&v82 + v81 + 8 + v86);
              v86 += 8;
              v98 = *(_QWORD *)v90 ^ v97;
              if (v98)
              {
                v87 = v86 + (__clz(__rbit64(v98)) >> 3);
                a3 = v147;
                v64 = v157;
                v65 = v27;
                goto LABEL_96;
              }
            }
            v91 = (_DWORD *)(*(_QWORD *)&v82 + v81 + v86 + 8);
            a3 = v147;
          }
          if (v90 < v85 - 3 && *v91 == *(_DWORD *)v90)
          {
            v90 += 4;
            ++v91;
          }
          if (v90 < v85 - 1 && *(unsigned __int16 *)v91 == *(unsigned __int16 *)v90)
          {
            v90 += 2;
            v91 = (_DWORD *)((char *)v91 + 2);
          }
          v64 = v157;
          if (v90 < v85 && *(unsigned __int8 *)v91 == *v90)
            ++v90;
          v67 = v161;
          v53 = v162;
          v87 = v90 - (char *)v70;
          v65 = v27;
          goto LABEL_97;
        }
        v88 = (_DWORD *)(*(_QWORD *)&v64 + v81);
        if (v136 <= (unint64_t)v70)
        {
          v92 = v70;
LABEL_75:
          if ((unint64_t)v92 < v154 && *v88 == *(_DWORD *)v92)
          {
            v92 += 4;
            ++v88;
          }
          if ((unint64_t)v92 < v153 && *(unsigned __int16 *)v88 == *(unsigned __int16 *)v92)
          {
            v92 += 2;
            v88 = (_DWORD *)((char *)v88 + 2);
          }
          if ((unint64_t)v92 < v160 && *(unsigned __int8 *)v88 == *v92)
            ++v92;
          v87 = v92 - v70;
          goto LABEL_85;
        }
        v89 = *(_QWORD *)v70 ^ *(_QWORD *)v88;
        if (!v89)
        {
          while (1)
          {
            v92 = (unsigned __int8 *)v80 + v89;
            if ((unint64_t)v80 + v89 >= v136)
              break;
            v102 = *(_QWORD *)(v149 + v81 + v89);
            v89 += 8;
            v103 = *(_QWORD *)v92 ^ v102;
            if (v103)
            {
              v87 = v89 + (__clz(__rbit64(v103)) >> 3);
              goto LABEL_85;
            }
          }
          v88 = (_DWORD *)(v149 + v81 + v89);
          goto LABEL_75;
        }
        v87 = __clz(__rbit64(v89)) >> 3;
LABEL_85:
        if (v87 >= v53)
        {
          v93 = 0;
          if (v70 > v16 && v81 > v158)
          {
            v93 = 0;
            v94 = (unsigned __int8 *)(v145 + v81);
            v95 = v70 - 1;
            do
            {
              if (*v95 != *v94)
                break;
              ++v93;
              if (v95 <= v16)
                break;
              --v95;
              v96 = v94-- > (unsigned __int8 *)v67;
            }
            while (v96);
          }
LABEL_144:
          if (v93 + v87 > v75)
          {
            v77 = v87;
            v76 = v93;
            v75 = v93 + v87;
            v74 = v78;
          }
LABEL_146:
          v66 = v159;
        }
LABEL_147:
        v78 += 2;
        if (v78 < v79)
          continue;
        break;
      }
      v8 = v150;
      v68 = v151;
      if (!v74)
      {
LABEL_154:
        v123 = v8[7];
        v124 = a3[2];
        v125 = *(_BYTE *)(*(_QWORD *)&v123 + v71);
        *(_QWORD *)(*(_QWORD *)&v8[5] + 8 * (v71 << v124) + 8 * v125) = v73 | ((unint64_t)v72 << 32);
        *(_BYTE *)(*(_QWORD *)&v123 + v71) = (v125 + 1) & ~(-1 << v124);
LABEL_155:
        if (++v63 == v68)
        {
          v13 = v135;
          v46 = v141;
          v47 = v142;
          v48 = v143;
          goto LABEL_159;
        }
        continue;
      }
      break;
    }
    v116 = v139[3];
    if (v116 != v139[4])
    {
      v117 = (_DWORD *)(*v139 + 12 * v116);
      v118 = v73 - *v74;
      v117[1] = (_DWORD)v70 - v76 - (_DWORD)v16;
      v117[2] = v76 + v77;
      *v117 = v118;
      v139[3] = v116 + 1;
      v119 = v73 | ((unint64_t)v72 << 32);
      v120 = a3[2];
      v121 = v150[7];
      v122 = *(_BYTE *)(*(_QWORD *)&v121 + v71);
      *(_QWORD *)(*(_QWORD *)&v150[5] + 8 * (v71 << v120) + 8 * v122) = v119;
      *(_BYTE *)(*(_QWORD *)&v121 + v71) = (v122 + 1) & ~(-1 << v120);
      v16 = &v70[v77];
      if ((unint64_t)&v70[v77] <= v142 + v143)
      {
        v68 = v151;
        goto LABEL_155;
      }
      v48 = v143;
      v47 = (unint64_t)&v16[-v143];
      v13 = v135;
      v46 = v141;
LABEL_159:
      v47 += v48;
      if (v47 >= v46)
      {
        v5 = v132;
        a4 = v133;
        v10 = v131;
        v11 = v130;
        v9 = v128;
        v12 = v129;
        v15 = v127;
        v38 = (char *)v160;
        goto LABEL_161;
      }
      continue;
    }
    return -70;
  }
}

uint64_t *sub_1D4B88A2C(uint64_t *result, unint64_t a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (a2)
  {
    v3 = result[3];
    v4 = result[1];
    if (v4 <= v3)
      v5 = result[3];
    else
      v5 = result[1];
    v6 = 12 * v4;
    while (v5 != v4)
    {
      v7 = *result;
      v8 = *result + v6;
      v9 = *(unsigned int *)(v8 + 4);
      v10 = a2 - v9;
      if (a2 <= v9)
      {
        *(_DWORD *)(v8 + 4) = v9 - a2;
        return result;
      }
      *(_DWORD *)(v8 + 4) = 0;
      v11 = *(unsigned int *)(v8 + 8);
      a2 = v10 - v11;
      if (v10 < v11)
      {
        *(_DWORD *)(v7 + v6 + 8) = v11 - v10;
        if ((int)v11 - (int)v10 < a3)
        {
          v12 = v4 + 1;
          if (v12 < v3)
            *(_DWORD *)(v7 + v6 + 16) += v11 - v10;
          result[1] = v12;
        }
        return result;
      }
      *(_DWORD *)(v8 + 8) = 0;
      result[1] = ++v4;
      v6 += 12;
      if (v10 == v11)
        return result;
    }
  }
  return result;
}

uint64_t sub_1D4B88AD0(uint64_t result, int a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;

  v2 = *(_DWORD *)(result + 16) + a2;
  if (!v2)
    goto LABEL_12;
  v3 = *(_QWORD *)(result + 24);
  v4 = *(_QWORD *)(result + 8);
  v5 = v4 <= v3 ? *(_QWORD *)(result + 24) : *(_QWORD *)(result + 8);
  v6 = 12 * v4;
  while (v5 != v4)
  {
    v7 = *(_DWORD *)(*(_QWORD *)result + v6 + 8) + *(_DWORD *)(*(_QWORD *)result + v6 + 4);
    v8 = v2 >= v7;
    v9 = v2 - v7;
    if (!v8)
    {
      *(_QWORD *)(result + 16) = v2;
      break;
    }
    *(_QWORD *)(result + 8) = ++v4;
    v6 += 12;
    v2 = v9;
    if (!v9)
      goto LABEL_12;
  }
  if (v3 == v4)
LABEL_12:
    *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1D4B88B44(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5, unint64_t a6, uint64_t a7)
{
  int v13;
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  _OWORD *v37;
  _OWORD *v38;
  _OWORD *v39;
  __int128 *v40;
  __int128 v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  _OWORD *v46;
  __int128 *v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t (*v54)();

  if (*(_DWORD *)(a2 + 28) >= *(_DWORD *)(a2 + 24))
  {
    v14 = *(_QWORD *)(a2 + 248);
    if (v14)
    {
      if (*(_DWORD *)(v14 + 140))
        v13 = 3;
      else
        v13 = 2;
    }
    else
    {
      v13 = 0;
    }
  }
  else
  {
    v13 = 1;
  }
  v53 = *(_DWORD *)(a2 + 272);
  v15 = sub_1D4B51CB4(*(_DWORD *)(a2 + 280), a5, v13);
  if (*(_DWORD *)(a2 + 280) > 6u)
  {
    *(_QWORD *)(a2 + 288) = a1;
    v16 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD *, unint64_t, uint64_t))v15)(a2, a3, a4, a6, a7);
    sub_1D4B88AD0((uint64_t)a1, a7);
    return v16;
  }
  v18 = a6 + a7;
  v19 = a1[1];
  v20 = v19 >= a1[3] || a7 < 1;
  v54 = v15;
  if (!v20)
  {
    v24 = v18 - 32;
    while (1)
    {
      v25 = v18 - a6;
      v26 = *a1 + 12 * v19;
      v27 = *(_QWORD *)v26;
      v28 = HIDWORD(*(_QWORD *)v26);
      v29 = *(_DWORD *)(v26 + 8);
      if (v29 + v28 <= (int)v18 - (int)a6)
      {
        a1[1] = v19 + 1;
        if (!(_DWORD)v27)
          goto LABEL_15;
      }
      else
      {
        if (v25 - v28 >= v53)
          v30 = *(_QWORD *)v26;
        else
          v30 = 0;
        if (v25 <= v28)
        {
          LODWORD(v27) = 0;
        }
        else
        {
          v29 = v25 - v28;
          LODWORD(v27) = v30;
        }
        sub_1D4B88A2C(a1, (v18 - a6), v53);
        if (!(_DWORD)v27)
          goto LABEL_15;
      }
      v31 = a6 - *(_DWORD *)(a2 + 8);
      v32 = *(_DWORD *)(a2 + 44);
      if (v32 + 1024 < v31)
      {
        v33 = v31 - v32 - 1024;
        if (v33 >= 0x200)
          v33 = 512;
        *(_DWORD *)(a2 + 44) = v31 - v33;
      }
      sub_1D4B88EFC(a2, a6);
      v34 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD *, unint64_t, uint64_t))v54)(a2, a3, a4, a6, v28);
      *(_QWORD *)((char *)a4 + 4) = *a4;
      v35 = a6 + v28;
      *(_DWORD *)a4 = v27;
      v36 = (char *)(a6 + v28 - v34);
      v37 = *(_OWORD **)(a3 + 24);
      if (a6 + v28 > v24)
        break;
      *v37 = *(_OWORD *)v36;
      v44 = *(_QWORD *)(a3 + 24);
      if ((unint64_t)v34 > 0x10)
      {
        *(_OWORD *)(v44 + 16) = *((_OWORD *)v36 + 1);
        if (v34 >= 33)
        {
          v45 = v44 + v34;
          v46 = (_OWORD *)(v44 + 32);
          v47 = (__int128 *)(a6 + v28 - v34 + 48);
          do
          {
            *v46 = *(v47 - 1);
            v48 = *v47;
            v47 += 2;
            v46[1] = v48;
            v46 += 2;
          }
          while ((unint64_t)v46 < v45);
        }
        goto LABEL_48;
      }
      *(_QWORD *)(a3 + 24) = v44 + v34;
      v49 = *(_QWORD *)(a3 + 8);
LABEL_51:
      *(_WORD *)(v49 + 4) = v34;
      *(_DWORD *)v49 = v27 + 3;
      v51 = v29 - 3;
      if (v51 >= 0x10000)
      {
        v52 = (unint64_t)(v49 - *(_QWORD *)a3) >> 3;
        *(_DWORD *)(a3 + 72) = 2;
        *(_DWORD *)(a3 + 76) = v52;
      }
      *(_WORD *)(v49 + 6) = v51;
      *(_QWORD *)(a3 + 8) = v49 + 8;
      a6 = v35 + v29;
      v19 = a1[1];
      if (v19 >= a1[3] || a6 >= v18)
        goto LABEL_15;
    }
    if ((unint64_t)v36 <= v24)
    {
      v38 = (_OWORD *)((char *)v37 + v24 - (_QWORD)v36);
      *v37 = *(_OWORD *)v36;
      if ((uint64_t)(v24 - (_QWORD)v36) >= 17)
      {
        v39 = v37 + 1;
        v40 = (__int128 *)(a6 + v28 - v34 + 32);
        do
        {
          *v39 = *(v40 - 1);
          v41 = *v40;
          v40 += 2;
          v39[1] = v41;
          v39 += 2;
        }
        while (v39 < v38);
      }
      v36 = (char *)(v18 - 32);
      v37 = v38;
    }
    if ((unint64_t)v36 < v35)
    {
      v42 = v35 - (_QWORD)v36;
      do
      {
        v43 = *v36++;
        *(_BYTE *)v37 = v43;
        v37 = (_OWORD *)((char *)v37 + 1);
        --v42;
      }
      while (v42);
    }
LABEL_48:
    *(_QWORD *)(a3 + 24) += v34;
    v49 = *(_QWORD *)(a3 + 8);
    if ((unint64_t)v34 >= 0x10000)
    {
      v50 = (unint64_t)(v49 - *(_QWORD *)a3) >> 3;
      *(_DWORD *)(a3 + 72) = 1;
      *(_DWORD *)(a3 + 76) = v50;
    }
    goto LABEL_51;
  }
LABEL_15:
  v21 = a6 - *(_DWORD *)(a2 + 8);
  v22 = *(_DWORD *)(a2 + 44);
  if (v22 + 1024 < v21)
  {
    v23 = v21 - v22 - 1024;
    if (v23 >= 0x200)
      v23 = 512;
    *(_DWORD *)(a2 + 44) = v21 - v23;
  }
  sub_1D4B88EFC(a2, a6);
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD *, unint64_t, unint64_t))v54)(a2, a3, a4, a6, v18 - a6);
}

uint64_t sub_1D4B88EFC(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 280);
  if (v2 == 2)
    return sub_1D4B5880C(result, a2, 0, 0);
  if (v2 == 1)
    return sub_1D4B5FEC8(result, a2, 0, 0);
  return result;
}

uint64_t sub_1D4B88F2C(uint64_t result, int a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v8;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  v5 = a2 - v4;
  v6 = *(_DWORD *)(result + 44);
  if (v6 < a2 - (int)v4)
  {
    v8 = *(_DWORD *)(result + 272);
    do
    {
      result = sub_1D4B8A754(v3, (_QWORD *)(v4 + v6), a3, v5, v8, 0);
      v6 += result;
    }
    while (v6 < v5);
  }
  *(_DWORD *)(v3 + 44) = v5;
  return result;
}

int64_t sub_1D4B88FA0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  return sub_1D4B88FA8(a1, a2, a3, a4, a5, 0);
}

int64_t sub_1D4B88FA8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5, unsigned int a6)
{
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  _DWORD *v18;
  __int128 *v19;
  __int128 v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t i;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v36;
  _DWORD *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int *v50;
  unsigned int v51;
  unsigned int v52;
  int *v53;
  int v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  int *v63;
  _DWORD *v64;
  int v65;
  int v66;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  unsigned int v70;
  int v71;
  int v72;
  unsigned int v73;
  unint64_t v74;
  _DWORD *v75;
  int v76;
  _DWORD *v77;
  _DWORD *v78;
  int v79;
  unsigned int v80;
  int v81;
  int *v82;
  _DWORD *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  _DWORD *v103;
  int *v104;
  _DWORD *v105;
  _DWORD *v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  int *v112;
  _DWORD *v113;
  unsigned int v114;
  _DWORD *v115;
  unsigned int v116;
  _OWORD *v117;
  __int128 v118;
  BOOL v119;
  unsigned int v120;
  unsigned __int8 *v121;
  unsigned int v122;
  _DWORD *v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int v126;
  unsigned __int8 *v127;
  unsigned __int8 *v128;
  _OWORD *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _OWORD *v133;
  __int128 *v134;
  __int128 v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  _DWORD *v139;
  uint64_t v140;
  _DWORD *v142;
  int v143;
  unsigned int v144;
  int v145;
  int v146;
  uint64_t (*v147)(uint64_t, uint64_t, int *, unsigned __int8 *, unsigned __int8 *, uint64_t, BOOL, uint64_t);
  unsigned __int8 *v148;
  unsigned __int8 *v149;
  unsigned __int8 *v151;
  uint64_t v152;
  unint64_t v153;
  unsigned __int8 *v154;
  uint64_t v155;
  unsigned int v156;
  unsigned int v157;
  char *v158;
  uint64_t *v159;
  unint64_t v160;
  unsigned int v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v9 = *(_DWORD *)(a1 + 272);
  v10 = v9 - 6;
  v11 = v9 >= 3;
  v12 = v9 - 3;
  if (v11)
    v13 = 3;
  else
    v13 = 0;
  if ((_DWORD)v12)
    v14 = 4;
  else
    v14 = 3;
  v162 = v14;
  if (v10 < 0xFFFFFFFD)
    v12 = v13;
  v147 = (uint64_t (*)(uint64_t, uint64_t, int *, unsigned __int8 *, unsigned __int8 *, uint64_t, BOOL, uint64_t))*(&off_1E984B258[4 * a6] + v12);
  v15 = a1 + 144;
  v148 = &a4[a5];
  v149 = a4;
  v153 = (unint64_t)&a4[a5 - 8];
  v16 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + *(unsigned int *)(a1 + 24));
  if (*(_DWORD *)(a1 + 276) >= 0xFFFu)
    v17 = 4095;
  else
    v17 = *(_DWORD *)(a1 + 276);
  v144 = v17;
  v167 = *(_DWORD *)(a1 + 44);
  v18 = *(_DWORD **)(a1 + 184);
  v155 = *(_QWORD *)(a1 + 176);
  v166 = 0;
  v164 = 0u;
  v165 = 0u;
  v163 = 0u;
  v170 = 0;
  v171 = 0;
  v19 = *(__int128 **)(a1 + 288);
  if (v19)
  {
    v20 = v19[1];
    v163 = *v19;
    v164 = v20;
    *(_QWORD *)&v165 = *((_QWORD *)v19 + 4);
  }
  else
  {
    *(_QWORD *)&v165 = 0;
    v163 = 0uLL;
    v164 = 0uLL;
  }
  LODWORD(v166) = 0;
  *((_QWORD *)&v165 + 1) = 0;
  sub_1D4B8AB94((uint64_t)&v163, 0, a5);
  sub_1D4B8AC2C(v15, v149, a5, 0);
  if (v16 == v149)
    v21 = v149 + 1;
  else
    v21 = v149;
  if ((unint64_t)v21 < v153)
  {
    v143 = 0;
    v158 = (char *)(v148 - 32);
    v159 = (uint64_t *)v15;
    v23 = v149;
    v22 = a3;
    v152 = a2;
    v24 = v155;
    while (1)
    {
      v151 = v23;
      v25 = (_DWORD)v21 - (_DWORD)v23;
      LODWORD(v168) = 0;
      LODWORD(v168) = v147(v24, a1, &v167, v21, v148, v22, (_DWORD)v21 == (_DWORD)v23, v162);
      sub_1D4B8B108((uint64_t)&v163, v24, &v168, (_DWORD)v21 - (_DWORD)v149, (_DWORD)v148 - (_DWORD)v21);
      v26 = v21;
      v27 = v168;
      if (!(_DWORD)v168)
      {
        v21 = v26 + 1;
        v22 = a3;
        goto LABEL_148;
      }
      v154 = v26;
      for (i = 0; i != 3; ++i)
        v18[i + 4] = *(_DWORD *)(a3 + i * 4);
      v18[2] = 0;
      v18[3] = v25;
      v29 = sub_1D4B8B1EC(v25, (uint64_t)v159, 0);
      *v18 = v29;
      v30 = (v27 - 1);
      v31 = *(_DWORD *)(v155 + 8 * v30 + 4);
      if (v31 > v144)
      {
        v32 = 0;
        v33 = *(_DWORD *)(v155 + 8 * v30);
        v21 = v154;
        goto LABEL_107;
      }
      v34 = v29;
      v35 = sub_1D4B8B1EC(0, (uint64_t)v159, 0);
      v36 = v162 - 1;
      v37 = v18 + 7;
      do
      {
        *v37 = 0x40000000;
        v37 += 7;
        --v36;
      }
      while (v36);
      v38 = v162;
      do
      {
        v39 = (unsigned int *)(v155 + 8 * v36);
        v40 = v39[1];
        if (v38 <= v40)
        {
          v41 = *v39;
          v42 = 31 - __clz(v41);
          v43 = *(_DWORD *)(a1 + 224);
          v44 = ((_DWORD)v42 << 9) - 25549;
          if (v42 <= 0x13)
            v44 = -15821;
          do
          {
            if (v43 == 1)
            {
              v45 = v42 - __clz(v38 - 2);
              v46 = 12032;
            }
            else
            {
              v47 = v38 - 3;
              if (v38 - 3 < 0x80)
                v48 = byte_1D4BD7D65[v47];
              else
                v48 = 67 - __clz(v47);
              v45 = __clz(*(_DWORD *)(*(_QWORD *)(a1 + 168) + 4 * v42) + 1)
                  + v42
                  + byte_1D4BD7D30[v48]
                  + __clz(*(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * v48) + 1);
              v46 = v44 + *(_DWORD *)(a1 + 220) + *(_DWORD *)(a1 + 216);
            }
            v49 = v35 + v34 + v46 + (v45 << 8);
            v50 = &v18[7 * v38];
            v50[2] = v38;
            v50[3] = v25;
            *v50 = v49;
            v50[1] = v41;
            ++v38;
          }
          while (v38 <= v40);
        }
        ++v36;
      }
      while (v36 != v27);
      v51 = v38 - 1;
      if (v38 == 1)
      {
LABEL_104:
        v105 = &v18[7 * v51];
        v33 = v105[1];
        v143 = *v105;
        v31 = v105[2];
        v25 = v105[3];
        v170 = *((_QWORD *)v105 + 2);
        v171 = v105[6];
        v32 = v51 - (v25 + v31);
        if (v51 < v25 + v31)
          v32 = 0;
        v21 = v154;
        if (!v31)
          goto LABEL_156;
LABEL_107:
        v106 = &v18[7 * v32];
        v168 = *((_QWORD *)v106 + 2);
        v169 = v106[6];
        if (v33 >= 4)
        {
          v107 = HIDWORD(v168);
          HIDWORD(v168) = v168;
          v108 = v33 - 3;
          goto LABEL_121;
        }
        if (v25)
          v109 = v33;
        else
          v109 = v33 + 1;
        v110 = v109 - 1;
        if (v109 == 4)
        {
          v111 = v168;
          v108 = v168 - 1;
        }
        else
        {
          if (v109 == 1)
          {
            v107 = v169;
            goto LABEL_122;
          }
          v108 = *((_DWORD *)&v168 + v110);
          v111 = v168;
        }
        if (v110 <= 1)
          v112 = &v169;
        else
          v112 = (int *)&v168 + 1;
        v107 = *v112;
        HIDWORD(v168) = v111;
LABEL_121:
        LODWORD(v168) = v108;
LABEL_122:
        *(_QWORD *)a3 = v168;
        *(_DWORD *)(a3 + 8) = v107;
        goto LABEL_123;
      }
      v52 = 1;
      while (1)
      {
        v53 = &v18[7 * v52 - 7];
        if (v53[2])
          v54 = 1;
        else
          v54 = v18[7 * v52 - 4] + 1;
        v160 = (unint64_t)&v154[v52];
        v156 = v52 - 1;
        if (*(_DWORD *)(a1 + 240) == 2)
        {
          v55 = 2048;
        }
        else if (*(_DWORD *)(a1 + 224) == 1)
        {
          v55 = 1536;
        }
        else
        {
          v56 = *(_DWORD *)(a1 + 208);
          v57 = v56 - 256;
          v58 = 7936 - (__clz(*(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v154[v52 - 1]) + 1) << 8);
          if (v58 <= v56 - 256)
            v57 = v58;
          v55 = v56 - v57;
        }
        v59 = v52;
        v60 = *v53;
        v61 = v55 + sub_1D4B8B1EC(v54, (uint64_t)v159, 0) + v60;
        v62 = sub_1D4B8B1EC(v54 - 1, (uint64_t)v159, 0);
        v63 = &v18[7 * v59];
        v66 = *v63;
        v64 = v63 + 2;
        v65 = v66;
        if (v61 - v62 <= v66)
        {
          v75 = &v18[7 * v59];
          v75[1] = 0;
          v75[2] = 0;
          v75[3] = v54;
          *v75 = v61 - v62;
          v65 = v61 - v62;
          v67 = v155;
LABEL_57:
          v76 = 0;
          v77 = &v18[7 * v59];
          v78 = &v18[7 * v156];
          *((_QWORD *)v77 + 2) = *((_QWORD *)v78 + 2);
          v77[6] = v78[6];
          v79 = 1;
          a2 = v152;
          v74 = v160;
          goto LABEL_71;
        }
        v67 = v155;
        if (!*v64)
          goto LABEL_57;
        v68 = &v18[7 * (v59 - *v64)];
        v69 = &v18[7 * v59];
        v70 = v69[1];
        v71 = v69[3];
        v168 = *((_QWORD *)v68 + 2);
        v169 = v68[6];
        if (v70 >= 4)
        {
          v72 = HIDWORD(v168);
          HIDWORD(v168) = v168;
          v73 = v70 - 3;
          a2 = v152;
          v74 = v160;
LABEL_69:
          LODWORD(v168) = v73;
          goto LABEL_70;
        }
        if (!v71)
          ++v70;
        v80 = v70 - 1;
        if (v70 == 4)
        {
          v81 = v168;
          v73 = v168 - 1;
          a2 = v152;
          v74 = v160;
LABEL_65:
          if (v80 <= 1)
            v82 = &v169;
          else
            v82 = (int *)&v168 + 1;
          v72 = *v82;
          HIDWORD(v168) = v81;
          goto LABEL_69;
        }
        a2 = v152;
        v74 = v160;
        if (v70 != 1)
        {
          v73 = *((_DWORD *)&v168 + v80);
          v81 = v168;
          goto LABEL_65;
        }
        v72 = v169;
LABEL_70:
        v79 = 0;
        v83 = &v18[7 * v59];
        *((_QWORD *)v83 + 2) = v168;
        v83[6] = v72;
        v76 = 1;
LABEL_71:
        if (v74 <= v153)
          break;
        v52 = v59 + 1;
LABEL_103:
        if (v52 > v51)
          goto LABEL_104;
      }
      if (v59 == v51)
        goto LABEL_104;
      v52 = v59 + 1;
      if (v18[7 * v59 + 7] <= v65 + 128)
        goto LABEL_103;
      v146 = v65;
      v142 = v64;
      v157 = v76;
      v84 = v74;
      if (v79)
        v25 = v18[7 * v59 + 3];
      else
        v25 = 0;
      v145 = sub_1D4B8B1EC(0, (uint64_t)v159, 0);
      LODWORD(v168) = 0;
      LODWORD(v168) = v147(v67, a1, &v167, (unsigned __int8 *)v84, v148, (uint64_t)&v18[7 * v59 + 4], v157, v162);
      sub_1D4B8B108((uint64_t)&v163, v155, &v168, v84 - (_DWORD)v149, (_DWORD)v148 - v84);
      v85 = v168;
      if (!(_DWORD)v168)
      {
        a2 = v152;
LABEL_102:
        v52 = v59 + 1;
        goto LABEL_103;
      }
      v86 = (v168 - 1);
      v31 = *(_DWORD *)(v155 + 8 * v86 + 4);
      a2 = v152;
      if (v31 <= v144 && v31 + v59 <= 0xFFF)
      {
        v87 = 0;
        do
        {
          v88 = (unsigned int *)(v155 + 8 * v87);
          v89 = v162;
          if (v87)
            v89 = *(v88 - 1) + 1;
          v90 = v88[1];
          if (v90 >= v89)
          {
            v91 = *v88;
            v92 = 31 - __clz(v91);
            v93 = *(_DWORD *)(a1 + 224);
            v94 = ((_DWORD)v92 << 9) - 25549;
            if (v92 <= 0x13)
              v94 = -15821;
            do
            {
              if (v93 == 1)
              {
                v95 = v92 - __clz(v90 - 2);
                v96 = 12032;
              }
              else
              {
                v97 = v90 - 3;
                if (v90 - 3 < 0x80)
                  v98 = byte_1D4BD7D65[v97];
                else
                  v98 = 67 - __clz(v97);
                v95 = __clz(*(_DWORD *)(*(_QWORD *)(a1 + 168) + 4 * v92) + 1)
                    + v92
                    + byte_1D4BD7D30[v98]
                    + __clz(*(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * v98) + 1);
                v96 = v94 + *(_DWORD *)(a1 + 220) + *(_DWORD *)(a1 + 216);
              }
              v99 = v96 + (v95 << 8);
              v100 = v90 + v59;
              v101 = v145 + v146 + v99;
              if (v100 <= v51)
              {
                if (v101 >= v18[7 * v100])
                  break;
              }
              else
              {
                v102 = 0;
                v103 = &v18[7 * v51 + 7];
                do
                {
                  *v103 = 0x40000000;
                  v103 += 7;
                  ++v102;
                }
                while ((unint64_t)v51 + v102 < v100);
                v51 += v102;
              }
              v104 = &v18[7 * v100];
              v104[2] = v90;
              v104[3] = v25;
              *v104 = v101;
              v104[1] = v91;
              --v90;
            }
            while (v90 >= v89);
          }
          ++v87;
        }
        while (v87 != v85);
        goto LABEL_102;
      }
      if (*v142)
        v138 = 0;
      else
        v138 = v18[7 * v59 + 3];
      v21 = v154;
      v33 = *(_DWORD *)(v155 + 8 * v86);
      v32 = v59 - v138;
      if (v32 > 0x1000)
        v32 = 0;
      if (v31)
        goto LABEL_107;
LABEL_156:
      v139 = &v18[7 * v32];
      v140 = *((_QWORD *)v139 + 2);
      *(_DWORD *)(a3 + 8) = v139[6];
      *(_QWORD *)a3 = v140;
LABEL_123:
      v161 = v32 + 1;
      v113 = &v18[7 * v32 + 7];
      *v113 = v143;
      v113[1] = v33;
      v113[2] = v31;
      v113[3] = v25;
      *((_QWORD *)v113 + 2) = v170;
      v113[6] = v171;
      v114 = v32;
      if (!v32)
      {
        v120 = 1;
LABEL_130:
        v121 = v151;
        while (2)
        {
          v122 = v120;
          v123 = &v18[7 * v120];
          v125 = v123[2];
          v124 = v123[3];
          if ((_DWORD)v125)
          {
            v126 = v18[7 * v122 + 1];
            v127 = v121;
            sub_1D4B8B2C4(v159, v124, v121, v126, v125);
            v128 = v127;
            v129 = *(_OWORD **)(a2 + 24);
            if (&v127[v124] > (unsigned __int8 *)v158)
            {
              sub_1D4B56E1C(v129, (char *)v127, (unint64_t)&v127[v124], v158);
              goto LABEL_140;
            }
            *v129 = *(_OWORD *)v127;
            if (v124 >= 0x11
              && (v130 = *(_QWORD *)(a2 + 24),
                  *(_OWORD *)(v130 + 16) = *((_OWORD *)v127 + 1),
                  (unint64_t)(v124 - 16) >= 0x11))
            {
              v132 = v130 + v124;
              v133 = (_OWORD *)(v130 + 32);
              v134 = (__int128 *)(v127 + 48);
              do
              {
                *v133 = *(v134 - 1);
                v135 = *v134;
                v134 += 2;
                v133[1] = v135;
                v133 += 2;
              }
              while ((unint64_t)v133 < v132);
LABEL_140:
              *(_QWORD *)(a2 + 24) += v124;
              v131 = *(_QWORD *)(a2 + 8);
              if (v124 >= 0x10000)
              {
                v136 = (unint64_t)(v131 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 1;
                *(_DWORD *)(a2 + 76) = v136;
              }
              v128 = v127;
            }
            else
            {
              *(_QWORD *)(a2 + 24) += v124;
              v131 = *(_QWORD *)(a2 + 8);
            }
            *(_WORD *)(v131 + 4) = v124;
            *(_DWORD *)v131 = v126;
            if ((unint64_t)(v125 - 3) >= 0x10000)
            {
              v137 = (unint64_t)(v131 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v137;
            }
            *(_WORD *)(v131 + 6) = v125 - 3;
            *(_QWORD *)(a2 + 8) = v131 + 8;
            v121 = &v128[(v125 + v124)];
            v21 = v121;
          }
          else
          {
            v21 = &v121[v124];
          }
          v120 = v122 + 1;
          if (v122 + 1 > v161)
            goto LABEL_147;
          continue;
        }
      }
      do
      {
        v115 = &v18[7 * v114];
        v116 = v115[3] + v115[2];
        v117 = &v18[7 * v32];
        v118 = *(_OWORD *)v115;
        *(_OWORD *)((char *)v117 + 12) = *(_OWORD *)(v115 + 3);
        *v117 = v118;
        --v32;
        v11 = v114 >= v116;
        v114 -= v116;
        v119 = v114 != 0 && v11;
        if (!v11)
          v114 = 0;
      }
      while (v119);
      v120 = v32 + 1;
      if (v32 + 1 <= v161)
        goto LABEL_130;
      v121 = v151;
LABEL_147:
      v151 = v121;
      sub_1D4B8B3B0((int32x2_t *)v159, 0);
      v22 = a3;
      v24 = v155;
LABEL_148:
      v23 = v151;
      if ((unint64_t)v21 >= v153)
      {
        v149 = v151;
        return v148 - v149;
      }
    }
  }
  return v148 - v149;
}

int64_t sub_1D4B89ABC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  return sub_1D4B89AC4(a1, a2, a3, a4, a5, 0);
}

int64_t sub_1D4B89AC4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5, unsigned int a6)
{
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t i;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  _DWORD *v57;
  unsigned int v58;
  unsigned int v59;
  int *v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int *v73;
  _DWORD *v74;
  int v75;
  int v76;
  _DWORD *v77;
  _DWORD *v78;
  unsigned int v79;
  int v80;
  int v81;
  unsigned int v82;
  _DWORD *v83;
  int v84;
  _DWORD *v85;
  _DWORD *v86;
  int v87;
  unsigned int v88;
  int v89;
  int *v90;
  _DWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  _DWORD *v114;
  int *v115;
  _DWORD *v116;
  _DWORD *v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  int v122;
  int *v123;
  _DWORD *v124;
  unsigned int v125;
  unsigned __int8 *v126;
  _DWORD *v127;
  unsigned int v128;
  _OWORD *v129;
  __int128 v130;
  BOOL v131;
  unsigned int v132;
  int v133;
  _DWORD *v134;
  uint64_t v135;
  unsigned int v136;
  _DWORD *v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  unsigned __int8 *v141;
  unsigned __int8 *v142;
  uint64_t v143;
  _OWORD *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  _OWORD *v148;
  __int128 *v149;
  __int128 v150;
  unint64_t v151;
  unint64_t v152;
  int v154;
  _DWORD *v155;
  unsigned int v156;
  int v158;
  uint64_t (*v159)(uint64_t, uint64_t, int *, unsigned __int8 *, unsigned __int8 *, uint64_t, BOOL);
  unsigned __int8 *v160;
  unsigned __int8 *v161;
  unsigned __int8 *v162;
  unint64_t v163;
  unsigned __int8 *v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  char *v168;
  unint64_t v170;
  unsigned int v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  int v183;
  uint64_t v184;

  v184 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a1 + 272);
  v9 = v8 - 6;
  v10 = v8 >= 3;
  v11 = v8 - 3;
  if (v10)
    v12 = 3;
  else
    v12 = 0;
  if ((_DWORD)v11)
    v13 = 4;
  else
    v13 = 3;
  v173 = v13;
  if (v9 < 0xFFFFFFFD)
    v11 = v12;
  v159 = (uint64_t (*)(uint64_t, uint64_t, int *, unsigned __int8 *, unsigned __int8 *, uint64_t, BOOL))*(&off_1E984B258[4 * a6] + v11);
  v160 = a4;
  v14 = a1 + 144;
  v162 = &a4[a5];
  v163 = (unint64_t)&a4[a5 - 8];
  v15 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + *(unsigned int *)(a1 + 24));
  if (*(_DWORD *)(a1 + 276) >= 0xFFFu)
    v16 = 4095;
  else
    v16 = *(_DWORD *)(a1 + 276);
  v156 = v16;
  v179 = *(_DWORD *)(a1 + 44);
  v18 = *(_QWORD *)(a1 + 176);
  v17 = *(_DWORD **)(a1 + 184);
  v178 = 0;
  v176 = 0u;
  v177 = 0u;
  v175 = 0u;
  v182 = 0;
  v183 = 0;
  v19 = *(__int128 **)(a1 + 288);
  if (v19)
  {
    v20 = v19[1];
    v175 = *v19;
    v176 = v20;
    *(_QWORD *)&v177 = *((_QWORD *)v19 + 4);
  }
  else
  {
    *(_QWORD *)&v177 = 0;
    v175 = 0uLL;
    v176 = 0uLL;
  }
  LODWORD(v178) = 0;
  *((_QWORD *)&v177 + 1) = 0;
  sub_1D4B8AB94((uint64_t)&v175, 0, a5);
  sub_1D4B8AC2C(v14, v160, a5, 2);
  if (v15 == v160)
    v21 = v160 + 1;
  else
    v21 = v160;
  if ((unint64_t)v21 < v163)
  {
    v172 = (uint64_t *)v14;
    v154 = 0;
    v168 = (char *)(v162 - 32);
    v22 = v160;
    v23 = a3;
    v24 = v18;
    v174 = v18;
    v25 = v21;
    while (1)
    {
      v161 = v22;
      v26 = (_DWORD)v25 - (_DWORD)v22;
      LODWORD(v180) = 0;
      LODWORD(v180) = v159(v24, a1, &v179, v25, v162, v23, (_DWORD)v25 == (_DWORD)v22);
      sub_1D4B8B108((uint64_t)&v175, v24, &v180, (_DWORD)v25 - (_DWORD)v160, (_DWORD)v162 - (_DWORD)v25);
      v27 = v25;
      v28 = v180;
      if (!(_DWORD)v180)
      {
        v25 = v27 + 1;
        goto LABEL_148;
      }
      v164 = v27;
      for (i = 0; i != 3; ++i)
        v17[i + 4] = *(_DWORD *)(a3 + i * 4);
      v17[2] = 0;
      v17[3] = v26;
      v30 = sub_1D4B8B1EC(v26, (uint64_t)v172, 2);
      *v17 = v30;
      v31 = (v28 - 1);
      v32 = *(_DWORD *)(v174 + 8 * v31 + 4);
      if (v32 > v156)
      {
        v33 = 0;
        v34 = *(_DWORD *)(v174 + 8 * v31);
        v25 = v164;
        goto LABEL_101;
      }
      v35 = v30;
      v36 = sub_1D4B8B1EC(0, (uint64_t)v172, 2);
      v37 = v173 - 1;
      v38 = v17 + 7;
      do
      {
        *v38 = 0x40000000;
        v38 += 7;
        --v37;
      }
      while (v37);
      v39 = v36 + v35;
      v40 = v173;
      do
      {
        v41 = (unsigned int *)(v174 + 8 * v37);
        v42 = v41[1];
        if (v40 <= v42)
        {
          v43 = *v41;
          v44 = __clz(v43);
          v45 = 31 - v44;
          v46 = *(_DWORD *)(a1 + 224);
          v47 = (v40 << 8) - 512;
          do
          {
            if (v46 == 1)
            {
              v48 = __clz(v40 - 2);
              v49 = (v47 >> ~(_BYTE)v48) + ((31 - v48 + (_DWORD)v45) << 8) + 4096;
            }
            else
            {
              v50 = v40 - 3;
              if (v40 - 3 < 0x80)
                v51 = byte_1D4BD7D65[v50];
              else
                v51 = 67 - __clz(v50);
              v52 = *(_DWORD *)(*(_QWORD *)(a1 + 168) + 4 * v45) + 1;
              v53 = __clz(v52);
              v54 = byte_1D4BD7D30[v51];
              v55 = *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * v51) + 1;
              v56 = __clz(v55);
              v49 = *(_DWORD *)(a1 + 220)
                  + *(_DWORD *)(a1 + 216)
                  - (v52 << 8 >> ~(_BYTE)v53)
                  - (v55 << 8 >> ~(_BYTE)v56)
                  + ((v53 - v44 + v54 + v56 + 16777185) << 8)
                  + 51;
            }
            v57 = &v17[7 * v40];
            v57[2] = v40;
            v57[3] = v26;
            *v57 = v39 + v49;
            v57[1] = v43;
            ++v40;
            v47 += 256;
          }
          while (v40 <= v42);
        }
        ++v37;
      }
      while (v37 != v28);
      v58 = v40 - 1;
      if (v40 == 1)
      {
LABEL_98:
        v116 = &v17[7 * v58];
        v34 = v116[1];
        v154 = *v116;
        v32 = v116[2];
        v26 = v116[3];
        v182 = *((_QWORD *)v116 + 2);
        v183 = v116[6];
        v33 = v58 - (v26 + v32);
        if (v58 < v26 + v32)
          v33 = 0;
        v25 = v164;
        if (!v32)
          goto LABEL_129;
LABEL_101:
        v117 = &v17[7 * v33];
        v180 = *((_QWORD *)v117 + 2);
        v181 = v117[6];
        if (v34 >= 4)
        {
          v118 = HIDWORD(v180);
          HIDWORD(v180) = v180;
          v119 = v34 - 3;
          goto LABEL_115;
        }
        if (v26)
          v120 = v34;
        else
          v120 = v34 + 1;
        v121 = v120 - 1;
        if (v120 == 4)
        {
          v122 = v180;
          v119 = v180 - 1;
        }
        else
        {
          if (v120 == 1)
          {
            v118 = v181;
            goto LABEL_116;
          }
          v119 = *((_DWORD *)&v180 + v121);
          v122 = v180;
        }
        if (v121 <= 1)
          v123 = &v181;
        else
          v123 = (int *)&v180 + 1;
        v118 = *v123;
        HIDWORD(v180) = v122;
LABEL_115:
        LODWORD(v180) = v119;
LABEL_116:
        *(_QWORD *)a3 = v180;
        *(_DWORD *)(a3 + 8) = v118;
        goto LABEL_117;
      }
      v59 = 1;
      while (1)
      {
        v60 = &v17[7 * v59 - 7];
        v61 = v60[2] ? 1 : v17[7 * v59 - 4] + 1;
        v170 = (unint64_t)&v164[v59];
        v165 = v59 - 1;
        if (*(_DWORD *)(a1 + 240) == 2)
        {
          v62 = 2048;
        }
        else if (*(_DWORD *)(a1 + 224) == 1)
        {
          v62 = 1536;
        }
        else
        {
          v63 = *(_DWORD *)(a1 + 208);
          v64 = v63 - 256;
          v65 = *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * *(unsigned __int8 *)(v170 - 1)) + 1;
          v66 = __clz(v65);
          v67 = (v65 << 8 >> ~(_BYTE)v66) + ((31 - v66) << 8);
          if (v67 <= v63 - 256)
            v64 = v67;
          v62 = v63 - v64;
        }
        v68 = v59;
        v69 = *v60;
        v70 = v61;
        v71 = v62 + sub_1D4B8B1EC(v61, (uint64_t)v172, 2) + v69;
        v72 = sub_1D4B8B1EC(v70 - 1, (uint64_t)v172, 2);
        v73 = &v17[7 * v68];
        v76 = *v73;
        v74 = v73 + 2;
        v75 = v76;
        if (v71 - v72 <= v76)
        {
          v83 = &v17[7 * v68];
          v83[1] = 0;
          v83[2] = 0;
          v83[3] = v70;
          *v83 = v71 - v72;
          v75 = v71 - v72;
        }
        else if (*v74)
        {
          v77 = &v17[7 * (v68 - *v74)];
          v78 = &v17[7 * v68];
          v79 = v78[1];
          v80 = v78[3];
          v180 = *((_QWORD *)v77 + 2);
          v181 = v77[6];
          if (v79 >= 4)
          {
            v81 = HIDWORD(v180);
            HIDWORD(v180) = v180;
            v82 = v79 - 3;
            goto LABEL_68;
          }
          if (!v80)
            ++v79;
          v88 = v79 - 1;
          if (v79 == 4)
          {
            v89 = v180;
            v82 = v180 - 1;
          }
          else
          {
            if (v79 == 1)
            {
              v81 = v181;
              goto LABEL_69;
            }
            v82 = *((_DWORD *)&v180 + v88);
            v89 = v180;
          }
          if (v88 <= 1)
            v90 = &v181;
          else
            v90 = (int *)&v180 + 1;
          v81 = *v90;
          HIDWORD(v180) = v89;
LABEL_68:
          LODWORD(v180) = v82;
LABEL_69:
          v87 = 0;
          v91 = &v17[7 * v68];
          *((_QWORD *)v91 + 2) = v180;
          v91[6] = v81;
          v84 = 1;
          goto LABEL_70;
        }
        v84 = 0;
        v85 = &v17[7 * v68];
        v86 = &v17[7 * v165];
        *((_QWORD *)v85 + 2) = *((_QWORD *)v86 + 2);
        v85[6] = v86[6];
        v87 = 1;
LABEL_70:
        if (v170 <= v163)
        {
          if (v68 == v58)
            goto LABEL_98;
          v155 = v74;
          v166 = v75;
          v167 = v84;
          v26 = v87 ? v17[7 * v68 + 3] : 0;
          v158 = sub_1D4B8B1EC(0, (uint64_t)v172, 2);
          LODWORD(v180) = 0;
          LODWORD(v180) = ((uint64_t (*)(uint64_t, uint64_t, int *, unint64_t, unsigned __int8 *, _DWORD *, _QWORD, uint64_t))v159)(v174, a1, &v179, v170, v162, &v17[7 * v68 + 4], v167, v173);
          sub_1D4B8B108((uint64_t)&v175, v174, &v180, v170 - (_DWORD)v160, (_DWORD)v162 - v170);
          v92 = v180;
          if ((_DWORD)v180)
            break;
        }
LABEL_97:
        v59 = v68 + 1;
        if (v68 + 1 > v58)
          goto LABEL_98;
      }
      v93 = (v180 - 1);
      v32 = *(_DWORD *)(v174 + 8 * v93 + 4);
      if (v32 <= v156 && v32 + v68 <= 0xFFF)
      {
        v94 = 0;
        while (1)
        {
          v95 = (unsigned int *)(v174 + 8 * v94);
          v96 = v173;
          if (v94)
            v96 = *(v95 - 1) + 1;
          v97 = v95[1];
          if (v97 >= v96)
            break;
LABEL_96:
          if (++v94 == v92)
            goto LABEL_97;
        }
        v98 = *v95;
        v99 = __clz(v98);
        v100 = 31 - v99;
        v101 = *(_DWORD *)(a1 + 224);
        while (2)
        {
          if (v101 == 1)
          {
            v102 = __clz(v97 - 2);
            v103 = ((v97 - 2) << 8 >> ~(_BYTE)v102) + ((31 - v102 + (_DWORD)v100) << 8) + 4096;
          }
          else
          {
            v104 = v97 - 3;
            if (v97 - 3 < 0x80)
              v105 = byte_1D4BD7D65[v104];
            else
              v105 = 67 - __clz(v104);
            v106 = *(_DWORD *)(*(_QWORD *)(a1 + 168) + 4 * v100) + 1;
            v107 = __clz(v106);
            v108 = byte_1D4BD7D30[v105];
            v109 = *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * v105) + 1;
            v110 = __clz(v109);
            v103 = *(_DWORD *)(a1 + 220)
                 + *(_DWORD *)(a1 + 216)
                 - (v106 << 8 >> ~(_BYTE)v107)
                 - (v109 << 8 >> ~(_BYTE)v110)
                 + ((v107 - v99 + v108 + v110 + 16777185) << 8)
                 + 51;
          }
          v111 = v97 + v68;
          v112 = v158 + v166 + v103;
          if (v111 <= v58)
          {
            if (v112 < v17[7 * v111])
              goto LABEL_94;
          }
          else
          {
            v113 = 0;
            v114 = &v17[7 * v58 + 7];
            do
            {
              *v114 = 0x40000000;
              v114 += 7;
              ++v113;
            }
            while ((unint64_t)v58 + v113 < v111);
            v58 += v113;
LABEL_94:
            v115 = &v17[7 * v111];
            v115[2] = v97;
            v115[3] = v26;
            *v115 = v112;
            v115[1] = v98;
          }
          if (--v97 < v96)
            goto LABEL_96;
          continue;
        }
      }
      if (*v155)
        v133 = 0;
      else
        v133 = v17[7 * v68 + 3];
      v25 = v164;
      v34 = *(_DWORD *)(v174 + 8 * v93);
      v33 = v68 - v133;
      if (v33 > 0x1000)
        v33 = 0;
      if (v32)
        goto LABEL_101;
LABEL_129:
      v134 = &v17[7 * v33];
      v135 = *((_QWORD *)v134 + 2);
      *(_DWORD *)(a3 + 8) = v134[6];
      *(_QWORD *)a3 = v135;
LABEL_117:
      v171 = v33 + 1;
      v124 = &v17[7 * v33 + 7];
      *v124 = v154;
      v124[1] = v34;
      v124[2] = v32;
      v124[3] = v26;
      *((_QWORD *)v124 + 2) = v182;
      v124[6] = v183;
      v125 = v33;
      v126 = v161;
      if (v33)
      {
        do
        {
          v127 = &v17[7 * v125];
          v128 = v127[3] + v127[2];
          v129 = &v17[7 * v33];
          v130 = *(_OWORD *)v127;
          *(_OWORD *)((char *)v129 + 12) = *(_OWORD *)(v127 + 3);
          *v129 = v130;
          --v33;
          v10 = v125 >= v128;
          v125 -= v128;
          v131 = v125 != 0 && v10;
          if (!v10)
            v125 = 0;
        }
        while (v131);
        v132 = v33 + 1;
        goto LABEL_130;
      }
      v132 = 1;
      while (2)
      {
        v136 = v132;
        v137 = &v17[7 * v132];
        v139 = v137[2];
        v138 = v137[3];
        if ((_DWORD)v139)
        {
          v140 = v17[7 * v136 + 1];
          v141 = v126;
          sub_1D4B8B2C4(v172, v138, v126, v140, v139);
          v142 = v141;
          v143 = a2;
          v144 = *(_OWORD **)(a2 + 24);
          if (&v141[v138] > (unsigned __int8 *)v168)
          {
            sub_1D4B56E1C(v144, (char *)v141, (unint64_t)&v141[v138], v168);
            v143 = a2;
            goto LABEL_140;
          }
          *v144 = *(_OWORD *)v141;
          if (v138 >= 0x11
            && (v145 = *(_QWORD *)(a2 + 24),
                *(_OWORD *)(v145 + 16) = *((_OWORD *)v141 + 1),
                (unint64_t)(v138 - 16) >= 0x11))
          {
            v147 = v145 + v138;
            v148 = (_OWORD *)(v145 + 32);
            v149 = (__int128 *)(v141 + 48);
            do
            {
              *v148 = *(v149 - 1);
              v150 = *v149;
              v149 += 2;
              v148[1] = v150;
              v148 += 2;
            }
            while ((unint64_t)v148 < v147);
LABEL_140:
            *(_QWORD *)(v143 + 24) += v138;
            v146 = *(_QWORD *)(v143 + 8);
            if (v138 >= 0x10000)
            {
              v151 = (unint64_t)(v146 - *(_QWORD *)v143) >> 3;
              *(_DWORD *)(v143 + 72) = 1;
              *(_DWORD *)(v143 + 76) = v151;
            }
            v142 = v141;
          }
          else
          {
            *(_QWORD *)(a2 + 24) += v138;
            v146 = *(_QWORD *)(a2 + 8);
          }
          *(_WORD *)(v146 + 4) = v138;
          *(_DWORD *)v146 = v140;
          if ((unint64_t)(v139 - 3) >= 0x10000)
          {
            v152 = (unint64_t)(v146 - *(_QWORD *)v143) >> 3;
            *(_DWORD *)(v143 + 72) = 2;
            *(_DWORD *)(v143 + 76) = v152;
          }
          *(_WORD *)(v146 + 6) = v139 - 3;
          *(_QWORD *)(v143 + 8) = v146 + 8;
          v126 = &v142[(v139 + v138)];
          v25 = v126;
        }
        else
        {
          v25 = &v126[v138];
        }
        v132 = v136 + 1;
LABEL_130:
        if (v132 <= v171)
          continue;
        break;
      }
      v161 = v126;
      sub_1D4B8B3B0((int32x2_t *)v172, 2);
LABEL_148:
      v23 = a3;
      v24 = v174;
      v22 = v161;
      if ((unint64_t)v25 >= v163)
      {
        v160 = v161;
        return v162 - v160;
      }
    }
  }
  return v162 - v160;
}

int64_t sub_1D4B8A628(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  int v10;
  int v13;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 196) && a2[1] == *a2)
  {
    v10 = *(_DWORD *)(a1 + 24);
    if (v10 == *(_DWORD *)(a1 + 28) && a5 >= 9 && v10 == (_DWORD)a4 - *(_DWORD *)(a1 + 8))
    {
      v15 = *(_QWORD *)a3;
      v16 = *(_DWORD *)(a3 + 8);
      sub_1D4B89AC4(a1, (uint64_t)a2, (uint64_t)&v15, a4, a5, 0);
      sub_1D4B51CF4((uint64_t)a2);
      *(_QWORD *)(a1 + 8) -= a5;
      v13 = *(_DWORD *)(a1 + 24) + a5;
      *(_DWORD *)(a1 + 24) = v13;
      *(_DWORD *)(a1 + 28) = v13;
      *(_DWORD *)(a1 + 44) = v13;
    }
  }
  return sub_1D4B89AC4(a1, (uint64_t)a2, a3, a4, a5, 0);
}

int64_t sub_1D4B8A734(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  return sub_1D4B88FA8(a1, a2, a3, a4, a5, 2u);
}

int64_t sub_1D4B8A73C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  return sub_1D4B89AC4(a1, a2, a3, a4, a5, 2u);
}

int64_t sub_1D4B8A744(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  return sub_1D4B88FA8(a1, a2, a3, a4, a5, 1u);
}

int64_t sub_1D4B8A74C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  return sub_1D4B89AC4(a1, a2, a3, a4, a5, 1u);
}

uint64_t sub_1D4B8A754(uint64_t a1, _QWORD *a2, unint64_t a3, int a4, int a5, uint64_t a6)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  int v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  int v49;
  unsigned int *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  _QWORD *v65;
  char *v66;
  unsigned int v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  _DWORD v77[3];

  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_DWORD *)(a1 + 264);
  switch(a5)
  {
    case 5:
      v9 = *a2;
      v10 = -1157627904;
      goto LABEL_7;
    case 6:
      v9 = *a2;
      v10 = -1080360960;
      goto LABEL_7;
    case 7:
      v9 = *a2;
      v10 = -1079680256;
      goto LABEL_7;
    case 8:
      v9 = *a2;
      v10 = -1213897629;
LABEL_7:
      v11 = (v9 * (v10 | 0xCF1BBCDC00000000)) >> -(char)v8;
      break;
    default:
      v11 = (-1640531535 * *(_DWORD *)a2) >> -(char)v8;
      break;
  }
  v12 = *(_QWORD *)(a1 + 128);
  v13 = -1 << (*(_DWORD *)(a1 + 260) - 1);
  v14 = ~v13;
  v15 = *(_DWORD *)(v7 + 4 * v11);
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(_QWORD *)(a1 + 16);
  v18 = (_DWORD)a2 - v16;
  if ((int)a2 - (int)v16 >= ~v13)
    v19 = (_DWORD)a2 - v16 + v13 + 1;
  else
    v19 = 0;
  v20 = (_QWORD *)(v12 + 8 * (v18 & ~v13));
  v77[0] = 0;
  v21 = 1 << *(_DWORD *)(a1 + 256);
  v23 = *(unsigned int *)(a1 + 24);
  v22 = *(_DWORD *)(a1 + 28);
  if (a4 - v22 > v21 && *(_DWORD *)(a1 + 40) == 0)
    v22 = a4 - v21;
  v25 = v18 + 9;
  v26 = *(_DWORD *)(a1 + 268);
  *(_DWORD *)(v7 + 4 * v11) = v18;
  if (v15 < v22)
  {
    v27 = 0;
    *v20 = 0;
    goto LABEL_66;
  }
  v73 = v22;
  v58 = (_DWORD)a2 - v16;
  v28 = 0;
  v29 = 0;
  v66 = (char *)(v17 + v23);
  v65 = (_QWORD *)(v16 + v23);
  v30 = (unsigned int *)v20 + 1;
  v76 = 1 << v26;
  v31 = a3 - 7;
  v61 = a3 - 1;
  v62 = a3 - 3;
  v59 = v16 + 8;
  v60 = a2 + 1;
  v32 = 8;
  v68 = a2;
  v67 = v19;
  v64 = a3 - 7;
  v63 = ~v13;
  while (1)
  {
    if (v29 >= v28)
      v33 = v28;
    else
      v33 = v29;
    v34 = v15;
    v35 = (char *)a2 + v33;
    v74 = v29;
    v75 = v28;
    if (!(_DWORD)a6 || v33 + v15 >= v23)
    {
      v44 = v16 + v15;
      v45 = (_QWORD *)(v44 + v33);
      if (v31 <= (unint64_t)v35)
      {
        v48 = (_DWORD *)((char *)a2 + v33);
      }
      else
      {
        v46 = *(_QWORD *)v35 ^ *v45;
        if (v46)
        {
          v47 = __clz(__rbit64(v46)) >> 3;
LABEL_40:
          v28 = v47 + v33;
          goto LABEL_41;
        }
        v51 = 0;
        v52 = (char *)v60 + v33;
        while (1)
        {
          v53 = &v52[v51];
          if ((unint64_t)&v52[v51] >= v31)
            break;
          v54 = *(_QWORD *)(v59 + v33 + v15 + v51);
          v51 += 8;
          v55 = *(_QWORD *)v53 ^ v54;
          if (v55)
          {
            v47 = v51 + (__clz(__rbit64(v55)) >> 3);
            goto LABEL_40;
          }
        }
        v48 = (_DWORD *)((char *)v60 + v33 + v51);
        v45 = (_QWORD *)(v59 + v33 + v15 + v51);
      }
      if ((unint64_t)v48 < v62 && *(_DWORD *)v45 == *v48)
      {
        ++v48;
        v45 = (_QWORD *)((char *)v45 + 4);
      }
      if ((unint64_t)v48 < v61 && *(unsigned __int16 *)v45 == *(unsigned __int16 *)v48)
      {
        v48 = (_DWORD *)((char *)v48 + 2);
        v45 = (_QWORD *)((char *)v45 + 2);
      }
      if ((unint64_t)v48 < a3 && *(unsigned __int8 *)v45 == *(unsigned __int8 *)v48)
        v48 = (_DWORD *)((char *)v48 + 1);
      v47 = (char *)v48 - v35;
      goto LABEL_40;
    }
    v69 = v33;
    v70 = v17 + v15;
    v36 = (char *)(v70 + v33);
    v72 = v30;
    v37 = a6;
    v38 = v12;
    v39 = v25;
    v40 = v16;
    v41 = v17;
    v71 = v15;
    v42 = v32;
    v43 = sub_1D4B5F19C(v35, v36, a3, v66, v65);
    v30 = v72;
    v32 = v42;
    v15 = v71;
    v17 = v41;
    v16 = v40;
    v31 = v64;
    v25 = v39;
    v19 = v67;
    v14 = v63;
    v12 = v38;
    a2 = v68;
    a6 = v37;
    v28 = v43 + v69;
    v44 = v70;
    if (v43 + v69 + v34 >= v23)
      v44 = v16 + v34;
LABEL_41:
    v49 = v15 + v28;
    if (v28 <= v25 - v15)
      v49 = v25;
    if (v28 > v32)
    {
      v25 = v49;
      v32 = v28;
    }
    if ((_QWORD *)((char *)a2 + v28) == (_QWORD *)a3)
      goto LABEL_61;
    v50 = (unsigned int *)(v12 + 8 * (v15 & v14));
    if (*(unsigned __int8 *)(v44 + v28) >= *((unsigned __int8 *)a2 + v28))
      break;
    *(_DWORD *)v20 = v15;
    if (v15 <= v19)
    {
      v20 = v77;
      goto LABEL_61;
    }
    ++v50;
    v29 = v28;
    v20 = v50;
    v28 = v75;
LABEL_51:
    if (v76 != 1)
    {
      --v76;
      v15 = *v50;
      if (*v50 >= v73)
        continue;
    }
    goto LABEL_61;
  }
  *v30 = v15;
  if (v15 > v19)
  {
    v30 = (unsigned int *)(v12 + 8 * (v15 & v14));
    v29 = v74;
    goto LABEL_51;
  }
  v30 = v77;
LABEL_61:
  *v30 = 0;
  *(_DWORD *)v20 = 0;
  v27 = v32 - 384;
  if ((v32 - 384) >= 0xC0)
    v27 = 192;
  if (v32 <= 0x180)
    v27 = 0;
  v18 = v58;
LABEL_66:
  v56 = v25 - v18 - 8;
  if (v27 <= v56)
    return v56;
  else
    return v27;
}

uint64_t sub_1D4B8AB94(uint64_t result, int a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  int *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;

  v3 = *(_QWORD *)(result + 24);
  if (!v3 || (v4 = *(_QWORD *)(result + 8), v4 >= v3))
  {
    *(_QWORD *)(result + 40) = -1;
    return result;
  }
  v5 = (int *)(*(_QWORD *)result + 12 * v4);
  v6 = v5[1];
  v7 = *(_QWORD *)(result + 16);
  v8 = v6 - v7;
  if (v7 >= v6)
    v9 = 0;
  else
    v9 = v6 - v7;
  if (v9)
    v8 = 0;
  if (v9 >= a3)
  {
    *(_QWORD *)(result + 40) = -1;
  }
  else
  {
    v10 = v8 + v5[2];
    v11 = *v5;
    v12 = v10 + v9 + a2;
    *(_DWORD *)(result + 40) = v9 + a2;
    *(_DWORD *)(result + 44) = v12;
    *(_DWORD *)(result + 48) = v11;
    if (v12 <= a3 + a2)
    {
      v13 = v10 + v9;
      return sub_1D4B88AD0(result, v13);
    }
    *(_DWORD *)(result + 44) = a3 + a2;
  }
  v13 = a3;
  return sub_1D4B88AD0(result, v13);
}

int32x2_t *sub_1D4B8AC2C(uint64_t a1, unsigned __int8 *a2, unint64_t a3, int a4)
{
  int v6;
  uint64_t v7;
  int32x2_t v8;
  int32x4_t v9;
  unsigned int v10;
  uint64_t v11;
  int32x4_t v12;
  uint32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  unsigned int v19;
  uint64_t v20;
  int32x4_t v21;
  uint32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int32x4_t v33;
  unsigned int v34;
  uint64_t v35;
  int32x4_t v36;
  uint32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int32x2_t v66;
  int32x4_t v67;
  int32x4_t v68;
  _OWORD *v69;
  _OWORD *v70;
  unsigned int v72;

  v6 = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 80) = 0;
  if (*(_DWORD *)(a1 + 52))
  {
    if (v6 != 2)
    {
      v7 = 0;
      v8 = *(int32x2_t *)a1;
      v9 = 0uLL;
      do
      {
        v9 = vaddq_s32(*(int32x4_t *)(*(_QWORD *)&v8 + v7), v9);
        v7 += 16;
      }
      while (v7 != 1024);
      v10 = vaddvq_s32(v9);
      if (v10 >= 0x2000)
      {
        v11 = 0;
        v12 = 0uLL;
        v13 = (uint32x4_t)vnegq_s32(vdupq_n_s32(__clz(v10 >> 12) ^ 0x1F));
        v14.i64[0] = 0x100000001;
        v14.i64[1] = 0x100000001;
        do
        {
          v15 = vaddq_s32((int32x4_t)vshlq_u32(*(uint32x4_t *)(*(_QWORD *)&v8 + v11), v13), v14);
          v12 = vaddq_s32(v15, v12);
          *(int32x4_t *)(*(_QWORD *)&v8 + v11) = v15;
          v11 += 16;
        }
        while (v11 != 1024);
        v10 = vaddvq_s32(v12);
      }
      *(_DWORD *)(a1 + 48) = v10;
    }
    v16 = 0;
    v17 = *(_QWORD *)(a1 + 8);
    v18 = 0uLL;
    do
    {
      v18 = vaddq_s32(*(int32x4_t *)(v17 + v16), v18);
      v16 += 16;
    }
    while (v16 != 144);
    v19 = vaddvq_s32(v18);
    if (v19 >= 0x1000)
    {
      v20 = 0;
      v21 = 0uLL;
      v22 = (uint32x4_t)vnegq_s32(vdupq_n_s32(__clz(v19 >> 11) ^ 0x1F));
      v23.i64[0] = 0x100000001;
      v23.i64[1] = 0x100000001;
      do
      {
        v24 = vaddq_s32((int32x4_t)vshlq_u32(*(uint32x4_t *)(v17 + v20), v22), v23);
        v21 = vaddq_s32(v24, v21);
        *(int32x4_t *)(v17 + v20) = v24;
        v20 += 16;
      }
      while (v20 != 144);
      v19 = vaddvq_s32(v21);
    }
    v25 = 0;
    v26 = 0;
    *(_DWORD *)(a1 + 52) = v19;
    v27 = *(_QWORD *)(a1 + 16);
    do
    {
      v26 += *(_DWORD *)(v27 + v25);
      v25 += 4;
    }
    while (v25 != 212);
    if (v26 >= 0x1000)
    {
      v28 = 0;
      v29 = __clz(v26 >> 11) ^ 0x1F;
      v26 = 0;
      do
      {
        v30 = (*(_DWORD *)(v27 + v28) >> v29) + 1;
        v26 += v30;
        *(_DWORD *)(v27 + v28) = v30;
        v28 += 4;
      }
      while (v28 != 212);
    }
    v31 = 0;
    *(_DWORD *)(a1 + 56) = v26;
    v32 = *(_QWORD *)(a1 + 24);
    v33 = 0uLL;
    do
    {
      v33 = vaddq_s32(*(int32x4_t *)(v32 + v31), v33);
      v31 += 16;
    }
    while (v31 != 128);
    v34 = vaddvq_s32(v33);
    if (v34 >= 0x1000)
    {
      v35 = 0;
      v36 = 0uLL;
      v37 = (uint32x4_t)vnegq_s32(vdupq_n_s32(__clz(v34 >> 11) ^ 0x1F));
      v38.i64[0] = 0x100000001;
      v38.i64[1] = 0x100000001;
      do
      {
        v39 = vaddq_s32((int32x4_t)vshlq_u32(*(uint32x4_t *)(v32 + v35), v37), v38);
        v36 = vaddq_s32(v39, v36);
        *(int32x4_t *)(v32 + v35) = v39;
        v35 += 16;
      }
      while (v35 != 128);
      v34 = vaddvq_s32(v36);
    }
LABEL_63:
    *(_DWORD *)(a1 + 60) = v34;
    return sub_1D4B8B3B0((int32x2_t *)a1, a4);
  }
  if (a3 <= 8)
    *(_DWORD *)(a1 + 80) = 1;
  v40 = *(_QWORD *)(a1 + 88);
  if (*(_DWORD *)(v40 + 2056) != 2)
  {
    if (v6 != 2)
    {
      v72 = 255;
      sub_1D4B4ED60(*(void **)a1, &v72, a2, a3);
      v65 = 0;
      v66 = *(int32x2_t *)a1;
      v67 = 0uLL;
      do
      {
        v68 = vsubq_s32((int32x4_t)vshrq_n_u32(*(uint32x4_t *)(*(_QWORD *)&v66 + v65), 8uLL), vtstq_s32(*(int32x4_t *)(*(_QWORD *)&v66 + v65), *(int32x4_t *)(*(_QWORD *)&v66 + v65)));
        v67 = vaddq_s32(v68, v67);
        *(int32x4_t *)(*(_QWORD *)&v66 + v65) = v68;
        v65 += 16;
      }
      while (v65 != 1024);
      *(_DWORD *)(a1 + 48) = vaddvq_s32(v67);
    }
    v69 = *(_OWORD **)(a1 + 8);
    v69[6] = xmmword_1D4BD7C1C;
    v69[7] = unk_1D4BD7C2C;
    v69[8] = xmmword_1D4BD7C3C;
    v69[2] = xmmword_1D4BD7BDC;
    v69[3] = unk_1D4BD7BEC;
    v69[4] = xmmword_1D4BD7BFC;
    v69[5] = unk_1D4BD7C0C;
    *v69 = xmmword_1D4BD7BBC;
    v69[1] = unk_1D4BD7BCC;
    *(_DWORD *)(a1 + 52) = 40;
    memset_pattern16(*(void **)(a1 + 16), &unk_1D4BD7DF0, 0xD4uLL);
    v34 = 53;
    *(_DWORD *)(a1 + 56) = 53;
    v70 = *(_OWORD **)(a1 + 24);
    v70[4] = xmmword_1D4BD7C8C;
    v70[5] = unk_1D4BD7C9C;
    v70[6] = xmmword_1D4BD7CAC;
    v70[7] = unk_1D4BD7CBC;
    *v70 = xmmword_1D4BD7C4C;
    v70[1] = unk_1D4BD7C5C;
    v70[2] = xmmword_1D4BD7C6C;
    v70[3] = unk_1D4BD7C7C;
    goto LABEL_63;
  }
  *(_DWORD *)(a1 + 80) = 0;
  if (v6 != 2)
  {
    v41 = 0;
    *(_DWORD *)(a1 + 48) = 0;
    do
    {
      v42 = sub_1D4B4F5C0(*(_QWORD *)(a1 + 88), v41);
      v43 = 1 << (11 - v42);
      if (!v42)
        v43 = 1;
      *(_DWORD *)(*(_QWORD *)a1 + 4 * v41) = v43;
      *(_DWORD *)(a1 + 48) += v43;
      ++v41;
    }
    while (v41 != 256);
    v40 = *(_QWORD *)(a1 + 88);
  }
  v44 = 0;
  v45 = 1 << (*(_WORD *)(v40 + 4288) - 1);
  if (!*(_WORD *)(v40 + 4288))
    v45 = 1;
  *(_DWORD *)(a1 + 52) = 0;
  v46 = *(_QWORD *)(a1 + 8);
  v47 = (int *)(v40 + 4 * v45 + 4296);
  do
  {
    v48 = *v47;
    v47 += 2;
    v49 = 1 << (10 - ((v48 + 0xFFFF) >> 16));
    if ((v48 + 0xFFFF) < 0x10000)
      v50 = 1;
    else
      v50 = v49;
    *(_DWORD *)(v46 + v44) = v50;
    *(_DWORD *)(a1 + 52) += v50;
    v44 += 4;
  }
  while (v44 != 144);
  v51 = 0;
  v52 = 1 << (*(_WORD *)(v40 + 2836) - 1);
  if (!*(_WORD *)(v40 + 2836))
    v52 = 1;
  *(_DWORD *)(a1 + 56) = 0;
  v53 = *(_QWORD *)(a1 + 16);
  v54 = (int *)(v40 + 4 * v52 + 2844);
  do
  {
    v55 = *v54;
    v54 += 2;
    v56 = 1 << (10 - ((v55 + 0xFFFF) >> 16));
    if ((v55 + 0xFFFF) < 0x10000)
      v57 = 1;
    else
      v57 = v56;
    *(_DWORD *)(v53 + v51) = v57;
    *(_DWORD *)(a1 + 56) += v57;
    v51 += 4;
  }
  while (v51 != 212);
  v58 = 0;
  v59 = 1 << (*(_WORD *)(v40 + 2064) - 1);
  if (!*(_WORD *)(v40 + 2064))
    v59 = 1;
  *(_DWORD *)(a1 + 60) = 0;
  v60 = *(_QWORD *)(a1 + 24);
  v61 = (int *)(v40 + 4 * v59 + 2072);
  do
  {
    v62 = *v61;
    v61 += 2;
    v63 = 1 << (10 - ((v62 + 0xFFFF) >> 16));
    if ((v62 + 0xFFFF) < 0x10000)
      v64 = 1;
    else
      v64 = v63;
    *(_DWORD *)(v60 + v58) = v64;
    *(_DWORD *)(a1 + 60) += v64;
    v58 += 4;
  }
  while (v58 != 128);
  return sub_1D4B8B3B0((int32x2_t *)a1, a4);
}

uint64_t sub_1D4B8B108(uint64_t result, uint64_t a2, _DWORD *a3, unsigned int a4, unsigned int a5)
{
  unint64_t v5;
  _DWORD *v6;
  unsigned int v10;
  unsigned int v12;
  uint64_t v15;
  int v16;

  v5 = *(_QWORD *)(result + 24);
  if (v5)
  {
    v6 = (_DWORD *)result;
    if (*(_QWORD *)(result + 8) < v5)
    {
      v10 = *(_DWORD *)(result + 44);
      if (a4 >= v10)
      {
        if (a4 > v10)
          sub_1D4B88AD0(result, a4 - v10);
        result = sub_1D4B8AB94((uint64_t)v6, a4, a5);
        v10 = v6[11];
      }
      v12 = v10 - a4;
      if (v6[10] <= a4 && v10 > a4 && v12 >= 3)
      {
        v15 = *a3;
        if (!(_DWORD)v15 || v15 <= 0xFFF && v12 > *(_DWORD *)(a2 + 8 * (v15 - 1) + 4))
        {
          v16 = v6[12] + 3;
          *(_DWORD *)(a2 + 8 * v15 + 4) = v12;
          *(_DWORD *)(a2 + 8 * (*a3)++) = v16;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1D4B8B1EC(int a1, uint64_t a2, int a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  if (*(_DWORD *)(a2 + 80) == 1)
  {
    v3 = __clz(a1 + 1);
    v4 = 7936 - (v3 << 8);
    v5 = (((a1 + 1) << 8) >> ~(_BYTE)v3) + ((31 - v3) << 8);
    v6 = 0;
    if (!a3)
      v5 = v4;
  }
  else
  {
    v6 = -256;
    do
    {
      v7 = a1;
      v6 += 256;
      a1 = 0x1FFFF;
    }
    while (v7 == 0x20000);
    if (v7 < 0x40)
      v8 = byte_1D4BD7CF0[v7];
    else
      v8 = 50 - __clz(v7);
    v9 = *(_DWORD *)(a2 + 68) + (byte_1D4BD7CCC[v8] << 8);
    v10 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * v8) + 1;
    v11 = __clz(v10);
    v12 = (v11 << 8) - (v10 << 8 >> ~(_BYTE)v11) - 7936;
    if (!a3)
      v12 = (v11 << 8) - 7936;
    v5 = v9 + v12;
  }
  return v5 + v6;
}

uint64_t *sub_1D4B8B2C4(uint64_t *result, unsigned int a2, unsigned __int8 *a3, unsigned int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  if (*((_DWORD *)result + 24) != 2)
  {
    if (a2)
    {
      v5 = *result;
      v6 = a2;
      do
      {
        v7 = *a3++;
        *(_DWORD *)(v5 + 4 * v7) += 2;
        --v6;
      }
      while (v6);
    }
    *((_DWORD *)result + 12) += 2 * a2;
  }
  if (a2 < 0x40)
    v8 = byte_1D4BD7CF0[a2];
  else
    v8 = 50 - __clz(a2);
  ++*(_DWORD *)(result[1] + 4 * v8);
  ++*((_DWORD *)result + 13);
  v9 = __clz(a4);
  ++*(_DWORD *)(result[3] + 4 * (31 - v9));
  ++*((_DWORD *)result + 15);
  v10 = a5 - 3;
  if ((a5 - 3) < 0x80)
    v11 = byte_1D4BD7D65[v10];
  else
    v11 = 67 - __clz(v10);
  ++*(_DWORD *)(result[2] + 4 * v11);
  ++*((_DWORD *)result + 14);
  return result;
}

int32x2_t *sub_1D4B8B3B0(int32x2_t *result, int a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;

  if (result[12].i32[0] != 2)
  {
    v2 = result[6].i32[0] + 1;
    v3 = __clz(v2);
    v4 = (v2 << 8 >> ~(_BYTE)v3) + ((31 - v3) << 8);
    if (!a2)
      v4 = 7936 - (v3 << 8);
    result[8].i32[0] = v4;
  }
  v5 = result[6].i32[1] + 1;
  v6 = __clz(v5);
  if (a2)
  {
    v7 = (v5 << 8 >> ~(_BYTE)v6) + ((31 - v6) << 8);
    v8 = vadd_s32(result[7], (int32x2_t)0x100000001);
    v9 = vsub_s32((int32x2_t)0x1F0000001FLL, vclz_s32(v8));
    v10 = vadd_s32(vshl_n_s32(v9, 8uLL), (int32x2_t)vshl_u32((uint32x2_t)vshl_n_s32(v8, 8uLL), (uint32x2_t)vneg_s32(v9)));
  }
  else
  {
    v7 = 7936 - (v6 << 8);
    v10 = vsub_s32((int32x2_t)0x1F0000001F00, vshl_n_s32(vclz_s32(vadd_s32(result[7], (int32x2_t)0x100000001)), 8uLL));
  }
  result[8].i32[1] = v7;
  result[9] = v10;
  return result;
}

uint64_t sub_1D4B8B47C(_DWORD *a1, uint64_t a2, _DWORD *a3, int *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unsigned int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  _QWORD *v53;
  unint64_t v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  int *v58;
  unsigned int v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  unint64_t v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  _DWORD *v76;
  unint64_t v77;
  _DWORD *v78;
  BOOL v79;
  unsigned int *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  int *v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  unsigned int v90;
  uint64_t v91;
  int v92;
  int v94;
  int *v95;
  int v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v100;
  int v101;

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v17 = a1;
  v18 = (_DWORD)a4 - v8;
  v19 = (_DWORD)a4 - v8;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1D4B8A754(a2, (_QWORD *)(v8 + v9), a5, v18, 3, 0) + v9;
    while (v9 < v18);
    v8 = *(_QWORD *)(a2 + 8);
    v19 = (_DWORD)a4 - v8;
    v17 = a1;
  }
  *(_DWORD *)(a2 + 44) = v18;
  v20 = *(_DWORD *)(a2 + 276);
  if (v20 >= 0xFFF)
    v21 = 4095;
  else
    v21 = v20;
  v22 = *(_QWORD *)(a2 + 112);
  v23 = (-1640531535 * *a4) >> -*(_BYTE *)(a2 + 264);
  v24 = *(_DWORD *)(v22 + 4 * v23);
  v97 = *(_QWORD *)(a2 + 128);
  v94 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  v96 = ~v94;
  v25 = v19 + v94 + 1;
  if (v19 < ~v94)
    v25 = 0;
  v100 = v25;
  v26 = 1 << *(_DWORD *)(a2 + 256);
  v27 = *(_DWORD *)(a2 + 24);
  v28 = v19 - *(_DWORD *)(a2 + 28) > v26;
  v29 = v19 - v26;
  if (!v28 || *(_DWORD *)(a2 + 40) != 0)
    v29 = *(_DWORD *)(a2 + 28);
  if (v29 <= 1)
    v31 = 1;
  else
    v31 = v29;
  v101 = 0;
  v32 = (a8 - 1);
  v92 = *(_DWORD *)(a2 + 268);
  v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    v33 = v19 - v27;
    v34 = (_QWORD *)((char *)a4 + 3);
    v35 = a5 - 7;
    v36 = (char *)a4 + 11;
    v37 = a7;
    while (1)
    {
      if (v37 == 3)
        v38 = *a6 - 1;
      else
        v38 = a6[v37];
      if (v38 - 1 >= v33
        || (v19 - v38 >= v29 ? (v39 = ((*(int *)((char *)a4 - v38) ^ *a4) & 0xFFFFFF) == 0) : (v39 = 0), !v39))
      {
        v40 = 0;
        goto LABEL_45;
      }
      v41 = -(uint64_t)v38;
      v42 = (char *)v34 - v38;
      if (v35 <= (unint64_t)v34)
        break;
      v43 = *v34 ^ *(_QWORD *)v42;
      if (!v43)
      {
        v46 = v21;
        v47 = 0;
        while (1)
        {
          v44 = &v36[v47];
          if ((unint64_t)&v36[v47] >= v35)
            break;
          v48 = *(_QWORD *)&v36[v41 + v47];
          v47 += 8;
          v49 = *(_QWORD *)v44 ^ v48;
          if (v49)
          {
            v44 = (char *)(v47 + (__clz(__rbit64(v49)) >> 3));
            v21 = v46;
            goto LABEL_44;
          }
        }
        v42 = &v44[v41];
        v21 = v46;
        goto LABEL_34;
      }
      v44 = (char *)(__clz(__rbit64(v43)) >> 3);
LABEL_44:
      v40 = (_DWORD)v44 + 3;
LABEL_45:
      if (v32 < v40)
      {
        v45 = &v17[2 * v10];
        *v45 = v37 - a7 + 1;
        v45[1] = v40;
        v10 = (v10 + 1);
        if (v40 > v21)
          return v10;
        v32 = v40;
        if ((int *)((char *)a4 + v40) == (int *)a5)
          return v10;
      }
      if (++v37 >= (unint64_t)(a7 + 3))
        goto LABEL_55;
    }
    v44 = (char *)a4 + 3;
LABEL_34:
    if ((unint64_t)v44 < a5 - 3 && *(_DWORD *)v42 == *(_DWORD *)v44)
    {
      v44 += 4;
      v42 += 4;
    }
    if ((unint64_t)v44 < a5 - 1 && *(unsigned __int16 *)v42 == *(unsigned __int16 *)v44)
    {
      v44 += 2;
      v42 += 2;
    }
    if ((unint64_t)v44 < a5 && *v42 == *v44)
      LODWORD(v44) = (_DWORD)v44 + 1;
    LODWORD(v44) = (_DWORD)v44 - (_DWORD)v34;
    goto LABEL_44;
  }
LABEL_55:
  v98 = v31;
  if (v32 > 2)
  {
    v57 = v97;
    v52 = ~v94;
  }
  else
  {
    v90 = v21;
    v91 = v23;
    v50 = v22;
    v51 = sub_1D4B90B28(a2, a3, a4);
    v31 = v98;
    v52 = ~v94;
    if (v51 < v98)
    {
      v57 = v97;
      v22 = v50;
      v23 = v91;
    }
    else
    {
      v22 = v50;
      v23 = v91;
      if (!((v19 - v51) >> 18))
      {
        v53 = (_QWORD *)(v8 + v51);
        if (a5 - 7 <= (unint64_t)a4)
        {
          v58 = a4;
          v55 = v90;
        }
        else
        {
          v54 = *(_QWORD *)a4 ^ *v53;
          v55 = v90;
          if (v54)
          {
            v56 = __clz(__rbit64(v54)) >> 3;
            v57 = v97;
            goto LABEL_75;
          }
          v86 = a4 + 2;
          v57 = v97;
          while (1)
          {
            v87 = (_QWORD *)((char *)v86 + v54);
            if ((unint64_t)v86 + v54 >= a5 - 7)
              break;
            v88 = *(_QWORD *)(v51 + v8 + 8 + v54);
            v54 += 8;
            v89 = *v87 ^ v88;
            if (v89)
            {
              v56 = v54 + (__clz(__rbit64(v89)) >> 3);
              goto LABEL_75;
            }
          }
          v58 = (int *)((char *)a4 + v54 + 8);
          v53 = (_QWORD *)(v51 + v8 + v54 + 8);
        }
        if ((unint64_t)v58 < a5 - 3 && *(_DWORD *)v53 == *v58)
        {
          ++v58;
          v53 = (_QWORD *)((char *)v53 + 4);
        }
        v57 = v97;
        if ((unint64_t)v58 < a5 - 1 && *(unsigned __int16 *)v53 == *(unsigned __int16 *)v58)
        {
          v58 = (int *)((char *)v58 + 2);
          v53 = (_QWORD *)((char *)v53 + 2);
        }
        if ((unint64_t)v58 < a5 && *(unsigned __int8 *)v53 == *(unsigned __int8 *)v58)
          v58 = (int *)((char *)v58 + 1);
        v56 = (char *)v58 - (char *)a4;
LABEL_75:
        if (v56 >= 3)
        {
          *v17 = v19 - v51 + 3;
          v17[1] = v56;
          if (v56 > v55 || (int *)((char *)a4 + v56) == (int *)a5)
          {
            v60 = v19 + 1;
            v10 = 1;
            goto LABEL_84;
          }
          v10 = 1;
          v32 = v56;
        }
        goto LABEL_82;
      }
      v57 = v97;
    }
  }
LABEL_82:
  v61 = (unsigned int *)(v57 + 8 * (v19 & ~v94));
  v62 = v61 + 1;
  v63 = v19 + 9;
  *(_DWORD *)(v22 + 4 * v23) = v19;
  if (v24 < v31)
    goto LABEL_83;
  v65 = 0;
  v66 = 0;
  v67 = 1 << v92;
  v68 = a5 - 7;
  v95 = a4 + 2;
  v69 = v8 + 8;
  while (1)
  {
    v70 = v66 >= v65 ? v65 : v66;
    v71 = v8 + v24;
    v72 = (char *)a4 + v70;
    v73 = (_QWORD *)(v71 + v70);
    if (v68 <= (unint64_t)a4 + v70)
    {
      v76 = (int *)((char *)a4 + v70);
    }
    else
    {
      v74 = *(_QWORD *)v72 ^ *v73;
      if (v74)
      {
        v75 = __clz(__rbit64(v74)) >> 3;
        goto LABEL_104;
      }
      v81 = 0;
      v82 = (char *)v95 + v70;
      while (1)
      {
        v83 = &v82[v81];
        if ((unint64_t)&v82[v81] >= v68)
          break;
        v84 = *(_QWORD *)(v69 + v70 + v24 + v81);
        v81 += 8;
        v85 = *(_QWORD *)v83 ^ v84;
        if (v85)
        {
          v75 = v81 + (__clz(__rbit64(v85)) >> 3);
          v57 = v97;
          v52 = v96;
          v31 = v98;
          goto LABEL_104;
        }
      }
      v76 = (int *)((char *)v95 + v70 + v81);
      v73 = (_QWORD *)(v69 + v70 + v24 + v81);
      v57 = v97;
      v52 = v96;
    }
    if ((unint64_t)v76 < a5 - 3 && *(_DWORD *)v73 == *v76)
    {
      ++v76;
      v73 = (_QWORD *)((char *)v73 + 4);
    }
    if ((unint64_t)v76 < a5 - 1 && *(unsigned __int16 *)v73 == *(unsigned __int16 *)v76)
    {
      v76 = (_DWORD *)((char *)v76 + 2);
      v73 = (_QWORD *)((char *)v73 + 2);
    }
    if ((unint64_t)v76 < a5 && *(unsigned __int8 *)v73 == *(unsigned __int8 *)v76)
      v76 = (_DWORD *)((char *)v76 + 1);
    v31 = v98;
    v75 = (char *)v76 - v72;
LABEL_104:
    v77 = v75 + v70;
    if (v77 > v32)
    {
      if (v77 > v63 - v24)
        v63 = v24 + v77;
      v78 = &v17[2 * v10];
      *v78 = v19 + 3 - v24;
      v78[1] = v77;
      v10 = (v10 + 1);
      v79 = v77 > 0x1000 || (int *)((char *)a4 + v77) == (int *)a5;
      v32 = v77;
      if (v79)
        goto LABEL_83;
    }
    v80 = (unsigned int *)(v57 + 8 * (v24 & v52));
    if (*(unsigned __int8 *)(v71 + v77) >= *((unsigned __int8 *)a4 + v77))
      break;
    *v61 = v24;
    if (v24 <= v100)
    {
      v61 = (unsigned int *)&v101;
      goto LABEL_83;
    }
    ++v80;
    v66 = v77;
    v61 = v80;
LABEL_116:
    if (--v67)
    {
      v24 = *v80;
      if (*v80 >= v31)
        continue;
    }
    goto LABEL_83;
  }
  *v62 = v24;
  if (v24 > v100)
  {
    v65 = v77;
    v62 = (unsigned int *)(v57 + 8 * (v24 & v52));
    goto LABEL_116;
  }
  v62 = (unsigned int *)&v101;
LABEL_83:
  *v62 = 0;
  *v61 = 0;
  v60 = v63 - 8;
LABEL_84:
  *(_DWORD *)(a2 + 44) = v60;
  return v10;
}

uint64_t sub_1D4B8BBAC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  unint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  _DWORD *v66;
  unint64_t v67;
  _DWORD *v68;
  BOOL v69;
  unsigned int *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  unsigned int v80;
  unsigned int v81;
  int v82;

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v18 = (_DWORD)a4 - v8;
  v19 = (_DWORD)a4 - v8;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1D4B8A754(a2, (_QWORD *)(v8 + v9), a5, v18, 4, 0) + v9;
    while (v9 < v18);
    v8 = *(_QWORD *)(a2 + 8);
    v19 = (_DWORD)a4 - v8;
  }
  *(_DWORD *)(a2 + 44) = v18;
  if (*(_DWORD *)(a2 + 276) >= 0xFFFu)
    v20 = 4095;
  else
    v20 = *(_DWORD *)(a2 + 276);
  v76 = (-1640531535 * *a4) >> -*(_BYTE *)(a2 + 264);
  v77 = *(_QWORD *)(a2 + 112);
  v21 = *(_DWORD *)(v77 + 4 * v76);
  v22 = *(_QWORD *)(a2 + 128);
  v23 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  v24 = ~v23;
  v25 = v19 + v23 + 1;
  if (v19 < ~v23)
    v25 = 0;
  v80 = v25;
  v26 = 1 << *(_DWORD *)(a2 + 256);
  v27 = *(_DWORD *)(a2 + 24);
  v28 = v19 - *(_DWORD *)(a2 + 28) > v26;
  v29 = v19 - v26;
  if (v28 && *(_DWORD *)(a2 + 40) == 0)
    v31 = v29;
  else
    v31 = *(_DWORD *)(a2 + 28);
  if (v31 <= 1)
    v32 = 1;
  else
    v32 = v31;
  v82 = 0;
  v33 = *(_DWORD *)(a2 + 268);
  v34 = (a8 - 1);
  if (a7 <= 0xFFFFFFFC)
  {
    result = 0;
    v35 = v19 - v27;
    v36 = a4 + 1;
    v37 = a5 - 7;
    v38 = a4 + 3;
    v39 = a7;
    while (1)
    {
      if (v39 == 3)
        v40 = *a6 - 1;
      else
        v40 = a6[v39];
      if (v40 - 1 >= v35 || (v19 - v40 >= v31 ? (v41 = *a4 == *(_DWORD *)((char *)a4 - v40)) : (v41 = 0), !v41))
      {
        v42 = 0;
        goto LABEL_46;
      }
      v43 = -(uint64_t)v40;
      v44 = (_QWORD *)((char *)v36 - v40);
      if (v37 <= (unint64_t)v36)
        break;
      v45 = *v36 ^ *v44;
      if (!v45)
      {
        v49 = 0;
        while (1)
        {
          v47 = &v38[v49];
          if ((unint64_t)&v38[v49] >= v37)
            break;
          v50 = *(_QWORD *)((char *)v38 + v43 + v49 * 4);
          v49 += 2;
          v51 = *v47 ^ v50;
          if (v51)
          {
            v46 = v49 * 4 + (__clz(__rbit64(v51)) >> 3);
            goto LABEL_45;
          }
        }
        v44 = (_QWORD *)((char *)v47 + v43);
        goto LABEL_35;
      }
      v46 = __clz(__rbit64(v45)) >> 3;
LABEL_45:
      v42 = v46 + 4;
LABEL_46:
      if (v34 < v42)
      {
        v48 = (_DWORD *)(a1 + 8 * result);
        *v48 = v39 - a7 + 1;
        v48[1] = v42;
        result = (result + 1);
        if (v42 > v20)
          return result;
        v34 = v42;
        if ((_DWORD *)((char *)a4 + v42) == (_DWORD *)a5)
          return result;
      }
      if (++v39 >= (unint64_t)(a7 + 3))
        goto LABEL_57;
    }
    v47 = a4 + 1;
LABEL_35:
    if ((unint64_t)v47 < a5 - 3 && *(_DWORD *)v44 == *(_DWORD *)v47)
    {
      v47 = (_QWORD *)((char *)v47 + 4);
      v44 = (_QWORD *)((char *)v44 + 4);
    }
    if ((unint64_t)v47 < a5 - 1 && *(unsigned __int16 *)v44 == *(unsigned __int16 *)v47)
    {
      v47 = (_QWORD *)((char *)v47 + 2);
      v44 = (_QWORD *)((char *)v44 + 2);
    }
    if ((unint64_t)v47 < a5 && *(unsigned __int8 *)v44 == *(unsigned __int8 *)v47)
      LODWORD(v47) = (_DWORD)v47 + 1;
    LODWORD(v46) = (_DWORD)v47 - (_DWORD)v36;
    goto LABEL_45;
  }
  result = 0;
LABEL_57:
  v52 = (unsigned int *)(v22 + 8 * (v19 & ~v23));
  v53 = v52 + 1;
  v54 = v19 + 9;
  *(_DWORD *)(v77 + 4 * v76) = v19;
  if (v21 < v32)
    goto LABEL_58;
  v55 = 0;
  v56 = 0;
  v57 = 1 << v33;
  v58 = a5 - 7;
  v81 = v19 + 3;
  v79 = a4 + 2;
  v78 = v8 + 8;
  v59 = v80;
  while (1)
  {
    v60 = v56 >= v55 ? v55 : v56;
    v61 = v8 + v21;
    v62 = (char *)a4 + v60;
    v63 = (_QWORD *)(v61 + v60);
    if (v58 <= (unint64_t)a4 + v60)
    {
      v66 = (_DWORD *)((char *)a4 + v60);
    }
    else
    {
      v64 = *(_QWORD *)v62 ^ *v63;
      if (v64)
      {
        v65 = __clz(__rbit64(v64)) >> 3;
        goto LABEL_78;
      }
      v71 = 0;
      v72 = (char *)v79 + v60;
      while (1)
      {
        v73 = &v72[v71];
        if ((unint64_t)&v72[v71] >= v58)
          break;
        v74 = *(_QWORD *)(v78 + v60 + v21 + v71);
        v71 += 8;
        v75 = *(_QWORD *)v73 ^ v74;
        if (v75)
        {
          v65 = v71 + (__clz(__rbit64(v75)) >> 3);
          v59 = v80;
          goto LABEL_78;
        }
      }
      v66 = (_DWORD *)((char *)v79 + v60 + v71);
      v63 = (_QWORD *)(v78 + v60 + v21 + v71);
      v59 = v80;
    }
    if ((unint64_t)v66 < a5 - 3 && *(_DWORD *)v63 == *v66)
    {
      ++v66;
      v63 = (_QWORD *)((char *)v63 + 4);
    }
    if ((unint64_t)v66 < a5 - 1 && *(unsigned __int16 *)v63 == *(unsigned __int16 *)v66)
    {
      v66 = (_DWORD *)((char *)v66 + 2);
      v63 = (_QWORD *)((char *)v63 + 2);
    }
    if ((unint64_t)v66 < a5 && *(unsigned __int8 *)v63 == *(unsigned __int8 *)v66)
      v66 = (_DWORD *)((char *)v66 + 1);
    v65 = (char *)v66 - v62;
LABEL_78:
    v67 = v65 + v60;
    if (v67 > v34)
    {
      if (v67 > v54 - v21)
        v54 = v21 + v67;
      v68 = (_DWORD *)(a1 + 8 * result);
      *v68 = v81 - v21;
      v68[1] = v67;
      result = (result + 1);
      v69 = v67 > 0x1000 || (_DWORD *)((char *)a4 + v67) == (_DWORD *)a5;
      v34 = v67;
      if (v69)
        goto LABEL_58;
    }
    v70 = (unsigned int *)(v22 + 8 * (v21 & v24));
    if (*(unsigned __int8 *)(v61 + v67) >= *((unsigned __int8 *)a4 + v67))
      break;
    *v52 = v21;
    if (v21 <= v59)
    {
      v52 = (unsigned int *)&v82;
      goto LABEL_58;
    }
    ++v70;
    v56 = v67;
    v52 = v70;
LABEL_90:
    if (--v57)
    {
      v21 = *v70;
      if (*v70 >= v32)
        continue;
    }
    goto LABEL_58;
  }
  *v53 = v21;
  if (v21 > v59)
  {
    v55 = v67;
    v53 = (unsigned int *)(v22 + 8 * (v21 & v24));
    goto LABEL_90;
  }
  v53 = (unsigned int *)&v82;
LABEL_58:
  *v53 = 0;
  *v52 = 0;
  *(_DWORD *)(a2 + 44) = v54 - 8;
  return result;
}

uint64_t sub_1D4B8C0F0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  _DWORD *v66;
  unint64_t v67;
  _DWORD *v68;
  BOOL v69;
  unsigned int *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unsigned int v80;
  unsigned int v81;
  int v82;

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v18 = (_DWORD)a4 - v8;
  v19 = (_DWORD)a4 - v8;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1D4B8A754(a2, (_QWORD *)(v8 + v9), a5, v18, 5, 0) + v9;
    while (v9 < v18);
    v8 = *(_QWORD *)(a2 + 8);
    v19 = (_DWORD)a4 - v8;
  }
  *(_DWORD *)(a2 + 44) = v18;
  if (*(_DWORD *)(a2 + 276) >= 0xFFFu)
    v20 = 4095;
  else
    v20 = *(_DWORD *)(a2 + 276);
  v76 = (0xCF1BBCDCBB000000 * *a4) >> -*(_BYTE *)(a2 + 264);
  v77 = *(_QWORD *)(a2 + 112);
  v21 = *(_DWORD *)(v77 + 4 * v76);
  v22 = *(_QWORD *)(a2 + 128);
  v23 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  v24 = ~v23;
  v25 = v19 + v23 + 1;
  if (v19 < ~v23)
    v25 = 0;
  v80 = v25;
  v26 = 1 << *(_DWORD *)(a2 + 256);
  v27 = *(_DWORD *)(a2 + 24);
  v28 = v19 - *(_DWORD *)(a2 + 28) > v26;
  v29 = v19 - v26;
  if (v28 && *(_DWORD *)(a2 + 40) == 0)
    v31 = v29;
  else
    v31 = *(_DWORD *)(a2 + 28);
  if (v31 <= 1)
    v32 = 1;
  else
    v32 = v31;
  v82 = 0;
  v33 = *(_DWORD *)(a2 + 268);
  v34 = (a8 - 1);
  if (a7 <= 0xFFFFFFFC)
  {
    result = 0;
    v35 = v19 - v27;
    v36 = (_QWORD *)((char *)a4 + 4);
    v37 = a5 - 7;
    v38 = (char *)a4 + 12;
    v39 = a7;
    while (1)
    {
      if (v39 == 3)
        v40 = *a6 - 1;
      else
        v40 = a6[v39];
      if (v40 - 1 >= v35
        || (v19 - v40 >= v31 ? (v41 = *(_DWORD *)a4 == *(_DWORD *)((char *)a4 - v40)) : (v41 = 0), !v41))
      {
        v42 = 0;
        goto LABEL_46;
      }
      v43 = -(uint64_t)v40;
      v44 = (char *)v36 - v40;
      if (v37 <= (unint64_t)v36)
        break;
      v45 = *v36 ^ *(_QWORD *)v44;
      if (!v45)
      {
        v49 = 0;
        while (1)
        {
          v47 = &v38[v49];
          if ((unint64_t)&v38[v49] >= v37)
            break;
          v50 = *(_QWORD *)&v38[v43 + v49];
          v49 += 8;
          v51 = *(_QWORD *)v47 ^ v50;
          if (v51)
          {
            v46 = v49 + (__clz(__rbit64(v51)) >> 3);
            goto LABEL_45;
          }
        }
        v44 = &v47[v43];
        goto LABEL_35;
      }
      v46 = __clz(__rbit64(v45)) >> 3;
LABEL_45:
      v42 = v46 + 4;
LABEL_46:
      if (v34 < v42)
      {
        v48 = (_DWORD *)(a1 + 8 * result);
        *v48 = v39 - a7 + 1;
        v48[1] = v42;
        result = (result + 1);
        if (v42 > v20)
          return result;
        v34 = v42;
        if ((_QWORD *)((char *)a4 + v42) == (_QWORD *)a5)
          return result;
      }
      if (++v39 >= (unint64_t)(a7 + 3))
        goto LABEL_57;
    }
    v47 = (char *)a4 + 4;
LABEL_35:
    if ((unint64_t)v47 < a5 - 3 && *(_DWORD *)v44 == *(_DWORD *)v47)
    {
      v47 += 4;
      v44 += 4;
    }
    if ((unint64_t)v47 < a5 - 1 && *(unsigned __int16 *)v44 == *(unsigned __int16 *)v47)
    {
      v47 += 2;
      v44 += 2;
    }
    if ((unint64_t)v47 < a5 && *v44 == *v47)
      LODWORD(v47) = (_DWORD)v47 + 1;
    LODWORD(v46) = (_DWORD)v47 - (_DWORD)v36;
    goto LABEL_45;
  }
  result = 0;
LABEL_57:
  v52 = (unsigned int *)(v22 + 8 * (v19 & ~v23));
  v53 = v52 + 1;
  v54 = v19 + 9;
  *(_DWORD *)(v77 + 4 * v76) = v19;
  if (v21 < v32)
    goto LABEL_58;
  v55 = 0;
  v56 = 0;
  v57 = 1 << v33;
  v58 = a5 - 7;
  v81 = v19 + 3;
  v79 = a4 + 1;
  v78 = v8 + 8;
  v59 = v80;
  while (1)
  {
    v60 = v56 >= v55 ? v55 : v56;
    v61 = v8 + v21;
    v62 = (char *)a4 + v60;
    v63 = (_QWORD *)(v61 + v60);
    if (v58 <= (unint64_t)a4 + v60)
    {
      v66 = (_DWORD *)((char *)a4 + v60);
    }
    else
    {
      v64 = *(_QWORD *)v62 ^ *v63;
      if (v64)
      {
        v65 = __clz(__rbit64(v64)) >> 3;
        goto LABEL_78;
      }
      v71 = 0;
      v72 = (char *)v79 + v60;
      while (1)
      {
        v73 = &v72[v71];
        if ((unint64_t)&v72[v71] >= v58)
          break;
        v74 = *(_QWORD *)(v78 + v60 + v21 + v71);
        v71 += 8;
        v75 = *(_QWORD *)v73 ^ v74;
        if (v75)
        {
          v65 = v71 + (__clz(__rbit64(v75)) >> 3);
          v59 = v80;
          goto LABEL_78;
        }
      }
      v66 = (_DWORD *)((char *)v79 + v60 + v71);
      v63 = (_QWORD *)(v78 + v60 + v21 + v71);
      v59 = v80;
    }
    if ((unint64_t)v66 < a5 - 3 && *(_DWORD *)v63 == *v66)
    {
      ++v66;
      v63 = (_QWORD *)((char *)v63 + 4);
    }
    if ((unint64_t)v66 < a5 - 1 && *(unsigned __int16 *)v63 == *(unsigned __int16 *)v66)
    {
      v66 = (_DWORD *)((char *)v66 + 2);
      v63 = (_QWORD *)((char *)v63 + 2);
    }
    if ((unint64_t)v66 < a5 && *(unsigned __int8 *)v63 == *(unsigned __int8 *)v66)
      v66 = (_DWORD *)((char *)v66 + 1);
    v65 = (char *)v66 - v62;
LABEL_78:
    v67 = v65 + v60;
    if (v67 > v34)
    {
      if (v67 > v54 - v21)
        v54 = v21 + v67;
      v68 = (_DWORD *)(a1 + 8 * result);
      *v68 = v81 - v21;
      v68[1] = v67;
      result = (result + 1);
      v69 = v67 > 0x1000 || (_QWORD *)((char *)a4 + v67) == (_QWORD *)a5;
      v34 = v67;
      if (v69)
        goto LABEL_58;
    }
    v70 = (unsigned int *)(v22 + 8 * (v21 & v24));
    if (*(unsigned __int8 *)(v61 + v67) >= *((unsigned __int8 *)a4 + v67))
      break;
    *v52 = v21;
    if (v21 <= v59)
    {
      v52 = (unsigned int *)&v82;
      goto LABEL_58;
    }
    ++v70;
    v56 = v67;
    v52 = v70;
LABEL_90:
    if (--v57)
    {
      v21 = *v70;
      if (*v70 >= v32)
        continue;
    }
    goto LABEL_58;
  }
  *v53 = v21;
  if (v21 > v59)
  {
    v55 = v67;
    v53 = (unsigned int *)(v22 + 8 * (v21 & v24));
    goto LABEL_90;
  }
  v53 = (unsigned int *)&v82;
LABEL_58:
  *v53 = 0;
  *v52 = 0;
  *(_DWORD *)(a2 + 44) = v54 - 8;
  return result;
}

uint64_t sub_1D4B8C638(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  _DWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  _DWORD *v66;
  unint64_t v67;
  _DWORD *v68;
  BOOL v69;
  unsigned int *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unsigned int v80;
  unsigned int v81;
  int v82;

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v18 = (_DWORD)a4 - v8;
  v19 = (_DWORD)a4 - v8;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1D4B8A754(a2, (_QWORD *)(v8 + v9), a5, v18, 6, 0) + v9;
    while (v9 < v18);
    v8 = *(_QWORD *)(a2 + 8);
    v19 = (_DWORD)a4 - v8;
  }
  *(_DWORD *)(a2 + 44) = v18;
  if (*(_DWORD *)(a2 + 276) >= 0xFFFu)
    v20 = 4095;
  else
    v20 = *(_DWORD *)(a2 + 276);
  v76 = (0xCF1BBCDCBF9B0000 * *a4) >> -*(_BYTE *)(a2 + 264);
  v77 = *(_QWORD *)(a2 + 112);
  v21 = *(_DWORD *)(v77 + 4 * v76);
  v22 = *(_QWORD *)(a2 + 128);
  v23 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  v24 = ~v23;
  v25 = v19 + v23 + 1;
  if (v19 < ~v23)
    v25 = 0;
  v80 = v25;
  v26 = 1 << *(_DWORD *)(a2 + 256);
  v27 = *(_DWORD *)(a2 + 24);
  v28 = v19 - *(_DWORD *)(a2 + 28) > v26;
  v29 = v19 - v26;
  if (v28 && *(_DWORD *)(a2 + 40) == 0)
    v31 = v29;
  else
    v31 = *(_DWORD *)(a2 + 28);
  if (v31 <= 1)
    v32 = 1;
  else
    v32 = v31;
  v82 = 0;
  v33 = *(_DWORD *)(a2 + 268);
  v34 = (a8 - 1);
  if (a7 <= 0xFFFFFFFC)
  {
    result = 0;
    v35 = v19 - v27;
    v36 = (_QWORD *)((char *)a4 + 4);
    v37 = a5 - 7;
    v38 = (char *)a4 + 12;
    v39 = a7;
    while (1)
    {
      if (v39 == 3)
        v40 = *a6 - 1;
      else
        v40 = a6[v39];
      if (v40 - 1 >= v35
        || (v19 - v40 >= v31 ? (v41 = *(_DWORD *)a4 == *(_DWORD *)((char *)a4 - v40)) : (v41 = 0), !v41))
      {
        v42 = 0;
        goto LABEL_46;
      }
      v43 = -(uint64_t)v40;
      v44 = (char *)v36 - v40;
      if (v37 <= (unint64_t)v36)
        break;
      v45 = *v36 ^ *(_QWORD *)v44;
      if (!v45)
      {
        v49 = 0;
        while (1)
        {
          v47 = &v38[v49];
          if ((unint64_t)&v38[v49] >= v37)
            break;
          v50 = *(_QWORD *)&v38[v43 + v49];
          v49 += 8;
          v51 = *(_QWORD *)v47 ^ v50;
          if (v51)
          {
            v46 = v49 + (__clz(__rbit64(v51)) >> 3);
            goto LABEL_45;
          }
        }
        v44 = &v47[v43];
        goto LABEL_35;
      }
      v46 = __clz(__rbit64(v45)) >> 3;
LABEL_45:
      v42 = v46 + 4;
LABEL_46:
      if (v34 < v42)
      {
        v48 = (_DWORD *)(a1 + 8 * result);
        *v48 = v39 - a7 + 1;
        v48[1] = v42;
        result = (result + 1);
        if (v42 > v20)
          return result;
        v34 = v42;
        if ((_QWORD *)((char *)a4 + v42) == (_QWORD *)a5)
          return result;
      }
      if (++v39 >= (unint64_t)(a7 + 3))
        goto LABEL_57;
    }
    v47 = (char *)a4 + 4;
LABEL_35:
    if ((unint64_t)v47 < a5 - 3 && *(_DWORD *)v44 == *(_DWORD *)v47)
    {
      v47 += 4;
      v44 += 4;
    }
    if ((unint64_t)v47 < a5 - 1 && *(unsigned __int16 *)v44 == *(unsigned __int16 *)v47)
    {
      v47 += 2;
      v44 += 2;
    }
    if ((unint64_t)v47 < a5 && *v44 == *v47)
      LODWORD(v47) = (_DWORD)v47 + 1;
    LODWORD(v46) = (_DWORD)v47 - (_DWORD)v36;
    goto LABEL_45;
  }
  result = 0;
LABEL_57:
  v52 = (unsigned int *)(v22 + 8 * (v19 & ~v23));
  v53 = v52 + 1;
  v54 = v19 + 9;
  *(_DWORD *)(v77 + 4 * v76) = v19;
  if (v21 < v32)
    goto LABEL_58;
  v55 = 0;
  v56 = 0;
  v57 = 1 << v33;
  v58 = a5 - 7;
  v81 = v19 + 3;
  v79 = a4 + 1;
  v78 = v8 + 8;
  v59 = v80;
  while (1)
  {
    v60 = v56 >= v55 ? v55 : v56;
    v61 = v8 + v21;
    v62 = (char *)a4 + v60;
    v63 = (_QWORD *)(v61 + v60);
    if (v58 <= (unint64_t)a4 + v60)
    {
      v66 = (_DWORD *)((char *)a4 + v60);
    }
    else
    {
      v64 = *(_QWORD *)v62 ^ *v63;
      if (v64)
      {
        v65 = __clz(__rbit64(v64)) >> 3;
        goto LABEL_78;
      }
      v71 = 0;
      v72 = (char *)v79 + v60;
      while (1)
      {
        v73 = &v72[v71];
        if ((unint64_t)&v72[v71] >= v58)
          break;
        v74 = *(_QWORD *)(v78 + v60 + v21 + v71);
        v71 += 8;
        v75 = *(_QWORD *)v73 ^ v74;
        if (v75)
        {
          v65 = v71 + (__clz(__rbit64(v75)) >> 3);
          v59 = v80;
          goto LABEL_78;
        }
      }
      v66 = (_DWORD *)((char *)v79 + v60 + v71);
      v63 = (_QWORD *)(v78 + v60 + v21 + v71);
      v59 = v80;
    }
    if ((unint64_t)v66 < a5 - 3 && *(_DWORD *)v63 == *v66)
    {
      ++v66;
      v63 = (_QWORD *)((char *)v63 + 4);
    }
    if ((unint64_t)v66 < a5 - 1 && *(unsigned __int16 *)v63 == *(unsigned __int16 *)v66)
    {
      v66 = (_DWORD *)((char *)v66 + 2);
      v63 = (_QWORD *)((char *)v63 + 2);
    }
    if ((unint64_t)v66 < a5 && *(unsigned __int8 *)v63 == *(unsigned __int8 *)v66)
      v66 = (_DWORD *)((char *)v66 + 1);
    v65 = (char *)v66 - v62;
LABEL_78:
    v67 = v65 + v60;
    if (v67 > v34)
    {
      if (v67 > v54 - v21)
        v54 = v21 + v67;
      v68 = (_DWORD *)(a1 + 8 * result);
      *v68 = v81 - v21;
      v68[1] = v67;
      result = (result + 1);
      v69 = v67 > 0x1000 || (_QWORD *)((char *)a4 + v67) == (_QWORD *)a5;
      v34 = v67;
      if (v69)
        goto LABEL_58;
    }
    v70 = (unsigned int *)(v22 + 8 * (v21 & v24));
    if (*(unsigned __int8 *)(v61 + v67) >= *((unsigned __int8 *)a4 + v67))
      break;
    *v52 = v21;
    if (v21 <= v59)
    {
      v52 = (unsigned int *)&v82;
      goto LABEL_58;
    }
    ++v70;
    v56 = v67;
    v52 = v70;
LABEL_90:
    if (--v57)
    {
      v21 = *v70;
      if (*v70 >= v32)
        continue;
    }
    goto LABEL_58;
  }
  *v53 = v21;
  if (v21 > v59)
  {
    v55 = v67;
    v53 = (unsigned int *)(v22 + 8 * (v21 & v24));
    goto LABEL_90;
  }
  v53 = (unsigned int *)&v82;
LABEL_58:
  *v53 = 0;
  *v52 = 0;
  *(_DWORD *)(a2 + 44) = v54 - 8;
  return result;
}

uint64_t sub_1D4B8CB80(_DWORD *a1, uint64_t a2, _DWORD *a3, unint64_t a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v13;
  _DWORD *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  BOOL v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  unint64_t v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  _DWORD *v83;
  _DWORD *v84;
  unsigned int *v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  _DWORD *v93;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  unsigned int v101;
  unint64_t v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  int v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  _QWORD *v114;
  char *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unsigned int v120;
  int v121;
  uint64_t v122;
  _DWORD *v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int *v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  unint64_t v132;
  _DWORD v133[3];

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > a4)
    return 0;
  v13 = a4;
  v15 = a1;
  v16 = a4 - v8;
  v17 = a4 - v8;
  v125 = a7;
  v123 = a6;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1D4B8A754(a2, (_QWORD *)(v8 + v9), a5, v16, 3, 1) + v9;
    while (v9 < v16);
    v8 = *(_QWORD *)(a2 + 8);
    v17 = v13 - v8;
    v15 = a1;
    a7 = v125;
    a6 = v123;
  }
  *(_DWORD *)(a2 + 44) = v16;
  if (*(_DWORD *)(a2 + 276) >= 0xFFFu)
    v18 = 4095;
  else
    v18 = *(_DWORD *)(a2 + 276);
  v117 = *(_QWORD *)(a2 + 112);
  v112 = (-1640531535 * *(_DWORD *)v13) >> -*(_BYTE *)(a2 + 264);
  v19 = *(_DWORD *)(v117 + 4 * v112);
  v127 = *(_QWORD *)(a2 + 128);
  v109 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  v20 = *(unsigned int *)(a2 + 24);
  v122 = *(_QWORD *)(a2 + 16);
  v115 = (char *)(v122 + v20);
  v128 = v8;
  v114 = (_QWORD *)(v8 + v20);
  v121 = ~v109;
  v21 = v17 + v109 + 1;
  if (v17 < ~v109)
    v21 = 0;
  v120 = v21;
  v22 = 1 << *(_DWORD *)(a2 + 256);
  v23 = v17 - *(_DWORD *)(a2 + 28) > v22;
  v24 = v17 - v22;
  if (v23 && *(_DWORD *)(a2 + 40) == 0)
    v26 = v24;
  else
    v26 = *(_DWORD *)(a2 + 28);
  if (v26 <= 1)
    v27 = 1;
  else
    v27 = v26;
  v129 = v27;
  v133[0] = 0;
  v111 = a2;
  v99 = *(_DWORD *)(a2 + 268);
  v28 = (a8 - 1);
  v116 = v20;
  v130 = v17;
  v132 = a5;
  v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    v29 = a7 + 3;
    v30 = v17 - v20;
    v31 = v17 - v26;
    v32 = (_QWORD *)(v13 + 3);
    v33 = a5 - 7;
    v34 = a5 - 3;
    v35 = a5 - 1;
    v36 = v13 + 11;
    v37 = a7;
    v107 = v29;
    v105 = v18;
    v103 = v17 - v20;
    v102 = v35;
    v101 = v17 - v26;
    while (1)
    {
      v38 = v37 == 3 ? *a6 - 1 : a6[v37];
      v39 = v17 - v38;
      if (v38 - 1 < v30)
        break;
      v45 = v38 - 1 < v31 && v20 + ~v39 >= 3;
      if (!v45 || (v46 = v122 + v39, ((*(_DWORD *)v46 ^ *(_DWORD *)v13) & 0xFFFFFF) != 0))
      {
LABEL_40:
        v47 = 0;
        goto LABEL_54;
      }
      v48 = v33;
      v49 = v34;
      v50 = sub_1D4B5F19C((_QWORD *)(v13 + 3), (char *)(v46 + 3), v132, v115, v114);
      v34 = v49;
      v33 = v48;
      v35 = v102;
      v31 = v101;
      v30 = v103;
      a6 = v123;
      a7 = v125;
      v17 = v130;
      v20 = v116;
      v15 = a1;
      v47 = v50 + 3;
      v29 = v107;
      v18 = v105;
LABEL_54:
      if (v28 < v47)
      {
        v51 = &v15[2 * v10];
        *v51 = v37 - a7 + 1;
        v51[1] = v47;
        v10 = (v10 + 1);
        if (v47 > v18)
          return v10;
        v28 = v47;
        if (v13 + v47 == v132)
          return v10;
      }
      if (++v37 >= v29)
        goto LABEL_64;
    }
    if (v39 < v26 || ((*(_DWORD *)(v13 - v38) ^ *(_DWORD *)v13) & 0xFFFFFF) != 0)
      goto LABEL_40;
    v41 = -(uint64_t)v38;
    v42 = (_QWORD *)((char *)v32 - v38);
    if (v33 <= (unint64_t)v32)
    {
      v44 = (_QWORD *)(v13 + 3);
    }
    else
    {
      v43 = *v32 ^ *v42;
      if (v43)
      {
        v44 = (_QWORD *)(__clz(__rbit64(v43)) >> 3);
LABEL_52:
        v47 = (_DWORD)v44 + 3;
        goto LABEL_54;
      }
      v52 = 0;
      while (1)
      {
        v44 = (_QWORD *)(v36 + v52);
        if (v36 + v52 >= v33)
          break;
        v53 = *(_QWORD *)(v36 + v41 + v52);
        v52 += 8;
        v54 = *v44 ^ v53;
        if (v54)
        {
          v44 = (_QWORD *)(v52 + (__clz(__rbit64(v54)) >> 3));
          goto LABEL_52;
        }
      }
      v42 = (_QWORD *)((char *)v44 + v41);
    }
    if ((unint64_t)v44 < v34 && *(_DWORD *)v42 == *(_DWORD *)v44)
    {
      v44 = (_QWORD *)((char *)v44 + 4);
      v42 = (_QWORD *)((char *)v42 + 4);
    }
    if ((unint64_t)v44 < v35 && *(unsigned __int16 *)v42 == *(unsigned __int16 *)v44)
    {
      v44 = (_QWORD *)((char *)v44 + 2);
      v42 = (_QWORD *)((char *)v42 + 2);
    }
    if ((unint64_t)v44 < v132 && *(unsigned __int8 *)v42 == *(unsigned __int8 *)v44)
      LODWORD(v44) = (_DWORD)v44 + 1;
    LODWORD(v44) = (_DWORD)v44 - (_DWORD)v32;
    goto LABEL_52;
  }
LABEL_64:
  if (v28 > 2)
  {
    v58 = v132;
    v59 = v128;
  }
  else
  {
    v55 = v18;
    v56 = sub_1D4B90B28(v111, a3, (int *)v13);
    if (v56 < v129)
    {
      v58 = v132;
      v15 = a1;
      v59 = v128;
      v20 = v116;
      v17 = v130;
    }
    else
    {
      v17 = v130;
      v57 = v130 - v56;
      v58 = v132;
      v15 = a1;
      v59 = v128;
      v20 = v116;
      if (!((v130 - v56) >> 18))
      {
        if (v56 < v116)
        {
          v60 = sub_1D4B5F19C((_QWORD *)v13, (char *)(v122 + v56), v132, v115, v114);
          v17 = v130;
          v20 = v116;
          v15 = a1;
          goto LABEL_136;
        }
        v91 = (_QWORD *)(v128 + v56);
        if (v132 - 7 <= v13)
        {
          v93 = (_DWORD *)v13;
        }
        else
        {
          v92 = *(_QWORD *)v13 ^ *v91;
          if (v92)
          {
            v60 = __clz(__rbit64(v92)) >> 3;
            goto LABEL_136;
          }
          v95 = v13 + 8;
          while (1)
          {
            v96 = (_QWORD *)(v95 + v92);
            if (v95 + v92 >= v132 - 7)
              break;
            v97 = *(_QWORD *)(v56 + v128 + 8 + v92);
            v92 += 8;
            v98 = *v96 ^ v97;
            if (v98)
            {
              v60 = v92 + (__clz(__rbit64(v98)) >> 3);
              goto LABEL_136;
            }
          }
          v93 = (_DWORD *)(v13 + v92 + 8);
          v91 = (_QWORD *)(v56 + v128 + v92 + 8);
        }
        if ((unint64_t)v93 < v132 - 3 && *(_DWORD *)v91 == *v93)
        {
          ++v93;
          v91 = (_QWORD *)((char *)v91 + 4);
        }
        if ((unint64_t)v93 < v132 - 1 && *(unsigned __int16 *)v91 == *(unsigned __int16 *)v93)
        {
          v93 = (_DWORD *)((char *)v93 + 2);
          v91 = (_QWORD *)((char *)v91 + 2);
        }
        if ((unint64_t)v93 < v132 && *(unsigned __int8 *)v91 == *(unsigned __int8 *)v93)
          v93 = (_DWORD *)((char *)v93 + 1);
        v60 = (unint64_t)v93 - v13;
LABEL_136:
        if (v60 >= 3)
        {
          *v15 = v57 + 3;
          v15[1] = v60;
          if (v60 > v55 || v13 + v60 == v132)
          {
            v62 = v17 + 1;
            v10 = 1;
            goto LABEL_72;
          }
          v10 = 1;
          v28 = v60;
        }
      }
    }
  }
  v126 = (unsigned int *)(v127 + 8 * (v17 & ~v109));
  v124 = v126 + 1;
  v61 = v17 + 9;
  *(_DWORD *)(v117 + 4 * v112) = v17;
  if (v19 < v129)
    goto LABEL_71;
  v64 = 0;
  v65 = 0;
  v66 = 1 << v99;
  v67 = v58 - 7;
  v108 = v58 - 1;
  v110 = v58 - 3;
  v113 = v17 + 3;
  v104 = v59 + 8;
  v106 = v13 + 8;
  v118 = v13;
  while (1)
  {
    if (v65 >= v64)
      v68 = v64;
    else
      v68 = v65;
    v69 = v19;
    v70 = (char *)(v13 + v68);
    v131 = v66;
    if (v68 + v19 >= v20)
    {
      v79 = v59 + v19;
      v80 = (_QWORD *)(v79 + v68);
      if (v67 <= (unint64_t)v70)
      {
        v83 = (_DWORD *)(v13 + v68);
      }
      else
      {
        v81 = *(_QWORD *)v70 ^ *v80;
        if (v81)
        {
          v82 = __clz(__rbit64(v81)) >> 3;
LABEL_97:
          v78 = v82 + v68;
          goto LABEL_98;
        }
        v86 = 0;
        v87 = v106 + v68;
        while (1)
        {
          v88 = (_QWORD *)(v87 + v86);
          if (v87 + v86 >= v67)
            break;
          v89 = *(_QWORD *)(v104 + v68 + v19 + v86);
          v86 += 8;
          v90 = *v88 ^ v89;
          if (v90)
          {
            v82 = v86 + (__clz(__rbit64(v90)) >> 3);
            goto LABEL_97;
          }
        }
        v83 = (_DWORD *)(v106 + v68 + v86);
        v80 = (_QWORD *)(v104 + v68 + v19 + v86);
      }
      if ((unint64_t)v83 < v110 && *(_DWORD *)v80 == *v83)
      {
        ++v83;
        v80 = (_QWORD *)((char *)v80 + 4);
      }
      if ((unint64_t)v83 < v108 && *(unsigned __int16 *)v80 == *(unsigned __int16 *)v83)
      {
        v83 = (_DWORD *)((char *)v83 + 2);
        v80 = (_QWORD *)((char *)v80 + 2);
      }
      if ((unint64_t)v83 < v132 && *(unsigned __int8 *)v80 == *(unsigned __int8 *)v83)
        v83 = (_DWORD *)((char *)v83 + 1);
      v82 = (char *)v83 - v70;
      goto LABEL_97;
    }
    v71 = v122 + v19;
    v72 = v64;
    v73 = v19;
    v74 = v10;
    v75 = v28;
    v76 = v61;
    v77 = sub_1D4B5F19C(v70, (char *)(v71 + v68), v132, v115, v114);
    v61 = v76;
    v28 = v75;
    v10 = v74;
    v19 = v73;
    v64 = v72;
    v20 = v116;
    v15 = a1;
    v78 = v77 + v68;
    v79 = v77 + v68 + v69 >= v116 ? v128 + v69 : v71;
    v59 = v128;
LABEL_98:
    if (v78 <= v28)
    {
      v13 = v118;
    }
    else
    {
      if (v78 <= v61 - v19)
        v61 = v61;
      else
        v61 = v19 + v78;
      v84 = &v15[2 * v10];
      *v84 = v113 - v19;
      v84[1] = v78;
      v10 = (v10 + 1);
      if (v78 > 0x1000)
        goto LABEL_71;
      v13 = v118;
      v28 = v78;
      if (v118 + v78 == v132)
        goto LABEL_71;
    }
    v85 = (unsigned int *)(v127 + 8 * (v19 & v121));
    if (*(unsigned __int8 *)(v79 + v78) >= *(unsigned __int8 *)(v13 + v78))
      break;
    *v126 = v19;
    if (v19 <= v120)
    {
      v126 = v133;
      goto LABEL_71;
    }
    ++v85;
    v65 = v78;
    v126 = v85;
LABEL_111:
    v66 = v131 - 1;
    if (v131 != 1)
    {
      v19 = *v85;
      if (*v85 >= v129)
        continue;
    }
    goto LABEL_71;
  }
  *v124 = v19;
  if (v19 > v120)
  {
    v64 = v78;
    v124 = (unsigned int *)(v127 + 8 * (v19 & v121));
    goto LABEL_111;
  }
  v124 = v133;
LABEL_71:
  *v124 = 0;
  *v126 = 0;
  v62 = v61 - 8;
LABEL_72:
  *(_DWORD *)(v111 + 44) = v62;
  return v10;
}

uint64_t sub_1D4B8D45C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v13;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD *v35;
  unint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  _DWORD *v75;
  _DWORD *v76;
  unsigned int *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  unint64_t v90;
  unsigned int v91;
  unint64_t v92;
  unsigned int v93;
  unsigned int v94;
  _QWORD *v96;
  char *v97;
  unint64_t v98;
  unsigned int v99;
  _DWORD *v100;
  unint64_t v101;
  unsigned int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int *v107;
  _DWORD *v108;
  unsigned int *v109;
  uint64_t v110;
  unsigned int v111;
  int v112;
  unint64_t v113;
  _DWORD v114[3];

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v13 = a4;
  v15 = (_DWORD)a4 - v8;
  v16 = (_DWORD)a4 - v8;
  v111 = a7;
  v108 = a6;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1D4B8A754(a2, (_QWORD *)(v8 + v9), a5, v15, 4, 1) + v9;
    while (v9 < v15);
    v8 = *(_QWORD *)(a2 + 8);
    v16 = (_DWORD)v13 - v8;
    a7 = v111;
    a6 = v108;
  }
  *(_DWORD *)(a2 + 44) = v15;
  v17 = *(_DWORD *)(a2 + 276);
  if (v17 >= 0xFFF)
    v18 = 4095;
  else
    v18 = v17;
  v19 = *(_QWORD *)(a2 + 112);
  v20 = (-1640531535 * *v13) >> -*(_BYTE *)(a2 + 264);
  v21 = *(_DWORD *)(v19 + 4 * v20);
  v110 = *(_QWORD *)(a2 + 128);
  v22 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  v24 = *(unsigned int *)(a2 + 24);
  v23 = *(_DWORD *)(a2 + 28);
  v104 = *(_QWORD *)(a2 + 16);
  v105 = v8;
  v97 = (char *)(v104 + v24);
  v96 = (_QWORD *)(v8 + v24);
  v103 = ~v22;
  v25 = v16 + v22 + 1;
  if (v16 < ~v22)
    v25 = 0;
  v102 = v25;
  v26 = 1 << *(_DWORD *)(a2 + 256);
  v27 = v16 - v23 > v26;
  v28 = v16 - v26;
  if (v27 && *(_DWORD *)(a2 + 40) == 0)
    v30 = v28;
  else
    v30 = v23;
  if (v30 <= 1)
    v31 = 1;
  else
    v31 = v30;
  v106 = v31;
  v114[0] = 0;
  v88 = a2;
  v113 = (a8 - 1);
  v98 = v24;
  v85 = v20;
  v86 = v19;
  v84 = v22;
  v83 = *(_DWORD *)(a2 + 268);
  v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    v32 = a7 + 3;
    v33 = v16 - v24;
    v34 = v16 - v30;
    v35 = v13 + 1;
    v36 = a5 - 7;
    v37 = v13 + 3;
    v38 = a7;
    v39 = a1;
    v99 = v16;
    v93 = v16 - v24;
    v91 = v16 - v30;
    while (1)
    {
      if (v38 == 3)
        v40 = *a6 - 1;
      else
        v40 = a6[v38];
      v41 = v16 - v40;
      if (v40 - 1 >= v33)
      {
        if (v40 - 1 < v34 && v24 + ~v41 >= 3)
        {
          v48 = v104 + v41;
          if (*v13 == *(_DWORD *)v48)
          {
            v49 = v18;
            v50 = v39;
            v51 = v30;
            v52 = sub_1D4B5F19C(v35, (char *)(v48 + 4), a5, v97, v96);
            v36 = a5 - 7;
            v35 = v13 + 1;
            v34 = v91;
            v33 = v93;
            v30 = v51;
            v39 = v50;
            v18 = v49;
            a6 = v108;
            a7 = v111;
            v24 = v98;
            v53 = v52 + 4;
            v16 = v99;
            goto LABEL_54;
          }
        }
LABEL_41:
        v53 = 0;
        goto LABEL_54;
      }
      if (v41 < v30 || *v13 != *(_DWORD *)((char *)v13 - v40))
        goto LABEL_41;
      v43 = -(uint64_t)v40;
      v44 = (_QWORD *)((char *)v35 - v40);
      if (v36 <= (unint64_t)v35)
        break;
      v45 = *v35 ^ *v44;
      if (!v45)
      {
        v55 = 0;
        while (1)
        {
          v46 = &v37[v55];
          if ((unint64_t)&v37[v55] >= v36)
            break;
          v56 = *(_QWORD *)((char *)v37 + v43 + v55 * 4);
          v55 += 2;
          v57 = *v46 ^ v56;
          if (v57)
          {
            v46 = (_QWORD *)(v55 * 4 + (__clz(__rbit64(v57)) >> 3));
            goto LABEL_53;
          }
        }
        v44 = (_QWORD *)((char *)v46 + v43);
        goto LABEL_43;
      }
      v46 = (_QWORD *)(__clz(__rbit64(v45)) >> 3);
LABEL_53:
      v53 = (_DWORD)v46 + 4;
LABEL_54:
      if (v113 < v53)
      {
        v54 = (_DWORD *)(v39 + 8 * v10);
        *v54 = v38 - a7 + 1;
        v54[1] = v53;
        v10 = (v10 + 1);
        if (v53 > v18)
          return v10;
        v113 = v53;
        if ((_DWORD *)((char *)v13 + v53) == (_DWORD *)a5)
          return v10;
      }
      if (++v38 >= v32)
        goto LABEL_65;
    }
    v46 = v35;
LABEL_43:
    if ((unint64_t)v46 < a5 - 3 && *(_DWORD *)v44 == *(_DWORD *)v46)
    {
      v46 = (_QWORD *)((char *)v46 + 4);
      v44 = (_QWORD *)((char *)v44 + 4);
    }
    if ((unint64_t)v46 < a5 - 1 && *(unsigned __int16 *)v44 == *(unsigned __int16 *)v46)
    {
      v46 = (_QWORD *)((char *)v46 + 2);
      v44 = (_QWORD *)((char *)v44 + 2);
    }
    if ((unint64_t)v46 < a5 && *(unsigned __int8 *)v44 == *(unsigned __int8 *)v46)
      LODWORD(v46) = (_DWORD)v46 + 1;
    LODWORD(v46) = (_DWORD)v46 - (_DWORD)v35;
    goto LABEL_53;
  }
  v39 = a1;
LABEL_65:
  v109 = (unsigned int *)(v110 + 8 * (v16 & ~v84));
  v107 = v109 + 1;
  v58 = v16 + 9;
  *(_DWORD *)(v86 + 4 * v85) = v16;
  if (v21 < v106)
    goto LABEL_66;
  v60 = 0;
  v61 = 0;
  v62 = 1 << v83;
  v63 = a5 - 7;
  v90 = a5 - 1;
  v92 = a5 - 3;
  v94 = v16 + 3;
  v89 = v13 + 2;
  v87 = v105 + 8;
  v100 = v13;
  v101 = a5;
  while (1)
  {
    if (v61 >= v60)
      v64 = v60;
    else
      v64 = v61;
    v65 = (char *)v13 + v64;
    v112 = v62;
    if (v64 + v21 >= v24)
    {
      v71 = v105 + v21;
      v72 = (_QWORD *)(v71 + v64);
      if (v63 <= (unint64_t)v65)
      {
        v75 = (_DWORD *)((char *)v13 + v64);
      }
      else
      {
        v73 = *(_QWORD *)v65 ^ *v72;
        if (v73)
        {
          v74 = __clz(__rbit64(v73)) >> 3;
LABEL_91:
          v70 = v74 + v64;
          goto LABEL_92;
        }
        v78 = 0;
        v79 = (char *)v89 + v64;
        while (1)
        {
          v80 = &v79[v78];
          if ((unint64_t)&v79[v78] >= v63)
            break;
          v81 = *(_QWORD *)(v87 + v64 + v21 + v78);
          v78 += 8;
          v82 = *(_QWORD *)v80 ^ v81;
          if (v82)
          {
            v74 = v78 + (__clz(__rbit64(v82)) >> 3);
            goto LABEL_91;
          }
        }
        v75 = (_DWORD *)((char *)v89 + v64 + v78);
        v72 = (_QWORD *)(v87 + v64 + v21 + v78);
      }
      if ((unint64_t)v75 < v92 && *(_DWORD *)v72 == *v75)
      {
        ++v75;
        v72 = (_QWORD *)((char *)v72 + 4);
      }
      if ((unint64_t)v75 < v90 && *(unsigned __int16 *)v72 == *(unsigned __int16 *)v75)
      {
        v75 = (_DWORD *)((char *)v75 + 2);
        v72 = (_QWORD *)((char *)v72 + 2);
      }
      if ((unint64_t)v75 < a5 && *(unsigned __int8 *)v72 == *(unsigned __int8 *)v75)
        v75 = (_DWORD *)((char *)v75 + 1);
      v74 = (char *)v75 - v65;
      goto LABEL_91;
    }
    v66 = v58;
    v67 = a5;
    v68 = v63;
    v69 = sub_1D4B5F19C(v65, (char *)(v104 + v21 + v64), v67, v97, v96);
    v58 = v66;
    v63 = v68;
    v24 = v98;
    v70 = v69 + v64;
    v71 = v69 + v64 + v21 >= v98 ? v105 + v21 : v104 + v21;
    v39 = a1;
LABEL_92:
    if (v70 <= v113)
    {
      v13 = v100;
      a5 = v101;
    }
    else
    {
      if (v70 <= v58 - v21)
        v58 = v58;
      else
        v58 = v21 + v70;
      v76 = (_DWORD *)(v39 + 8 * v10);
      *v76 = v94 - v21;
      v76[1] = v70;
      v10 = (v10 + 1);
      v13 = v100;
      a5 = v101;
      if (v70 > 0x1000)
        goto LABEL_66;
      v113 = v70;
      if ((_DWORD *)((char *)v100 + v70) == (_DWORD *)v101)
        goto LABEL_66;
    }
    v77 = (unsigned int *)(v110 + 8 * (v21 & v103));
    if (*(unsigned __int8 *)(v71 + v70) >= *((unsigned __int8 *)v13 + v70))
      break;
    *v109 = v21;
    if (v21 <= v102)
    {
      v109 = v114;
      goto LABEL_66;
    }
    ++v77;
    v61 = v70;
    v109 = v77;
LABEL_105:
    v62 = v112 - 1;
    if (v112 != 1)
    {
      v21 = *v77;
      if (*v77 >= v106)
        continue;
    }
    goto LABEL_66;
  }
  *v107 = v21;
  if (v21 > v102)
  {
    v60 = v70;
    v107 = (unsigned int *)(v110 + 8 * (v21 & v103));
    goto LABEL_105;
  }
  v107 = v114;
LABEL_66:
  *v107 = 0;
  *v109 = 0;
  *(_DWORD *)(v88 + 44) = v58 - 8;
  return v10;
}

uint64_t sub_1D4B8DB4C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v13;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  char *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  char *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  _DWORD *v75;
  _DWORD *v76;
  unsigned int *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  unsigned int v91;
  unint64_t v92;
  unsigned int v93;
  unsigned int v94;
  _QWORD *v96;
  char *v97;
  unint64_t v98;
  unsigned int v99;
  _QWORD *v100;
  unint64_t v101;
  unsigned int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int *v107;
  _DWORD *v108;
  unsigned int *v109;
  uint64_t v110;
  unsigned int v111;
  int v112;
  unint64_t v113;
  _DWORD v114[3];

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v13 = a4;
  v15 = (_DWORD)a4 - v8;
  v16 = (_DWORD)a4 - v8;
  v111 = a7;
  v108 = a6;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1D4B8A754(a2, (_QWORD *)(v8 + v9), a5, v15, 5, 1) + v9;
    while (v9 < v15);
    v8 = *(_QWORD *)(a2 + 8);
    v16 = (_DWORD)v13 - v8;
    a7 = v111;
    a6 = v108;
  }
  *(_DWORD *)(a2 + 44) = v15;
  v17 = *(_DWORD *)(a2 + 276);
  if (v17 >= 0xFFF)
    v18 = 4095;
  else
    v18 = v17;
  v19 = *(_QWORD *)(a2 + 112);
  v20 = (0xCF1BBCDCBB000000 * *v13) >> -*(_BYTE *)(a2 + 264);
  v21 = *(_DWORD *)(v19 + 4 * v20);
  v110 = *(_QWORD *)(a2 + 128);
  v22 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  v24 = *(unsigned int *)(a2 + 24);
  v23 = *(_DWORD *)(a2 + 28);
  v104 = *(_QWORD *)(a2 + 16);
  v105 = v8;
  v97 = (char *)(v104 + v24);
  v96 = (_QWORD *)(v8 + v24);
  v103 = ~v22;
  v25 = v16 + v22 + 1;
  if (v16 < ~v22)
    v25 = 0;
  v102 = v25;
  v26 = 1 << *(_DWORD *)(a2 + 256);
  v27 = v16 - v23 > v26;
  v28 = v16 - v26;
  if (v27 && *(_DWORD *)(a2 + 40) == 0)
    v30 = v28;
  else
    v30 = v23;
  if (v30 <= 1)
    v31 = 1;
  else
    v31 = v30;
  v106 = v31;
  v114[0] = 0;
  v88 = a2;
  v113 = (a8 - 1);
  v98 = v24;
  v85 = v20;
  v86 = v19;
  v84 = v22;
  v83 = *(_DWORD *)(a2 + 268);
  v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    v32 = a7 + 3;
    v33 = v16 - v24;
    v34 = v16 - v30;
    v35 = (char *)v13 + 4;
    v36 = a5 - 7;
    v37 = (char *)v13 + 12;
    v38 = a7;
    v39 = a1;
    v99 = v16;
    v93 = v16 - v24;
    v91 = v16 - v30;
    while (1)
    {
      if (v38 == 3)
        v40 = *a6 - 1;
      else
        v40 = a6[v38];
      v41 = v16 - v40;
      if (v40 - 1 >= v33)
      {
        if (v40 - 1 < v34 && v24 + ~v41 >= 3)
        {
          v48 = v104 + v41;
          if (*(_DWORD *)v13 == *(_DWORD *)v48)
          {
            v49 = v18;
            v50 = v39;
            v51 = v30;
            v52 = sub_1D4B5F19C(v35, (char *)(v48 + 4), a5, v97, v96);
            v36 = a5 - 7;
            v35 = (char *)v13 + 4;
            v34 = v91;
            v33 = v93;
            v30 = v51;
            v39 = v50;
            v18 = v49;
            a6 = v108;
            a7 = v111;
            v24 = v98;
            v53 = v52 + 4;
            v16 = v99;
            goto LABEL_54;
          }
        }
LABEL_41:
        v53 = 0;
        goto LABEL_54;
      }
      if (v41 < v30 || *(_DWORD *)v13 != *(_DWORD *)((char *)v13 - v40))
        goto LABEL_41;
      v43 = -(uint64_t)v40;
      v44 = &v35[-v40];
      if (v36 <= (unint64_t)v35)
        break;
      v45 = *(_QWORD *)v35 ^ *(_QWORD *)v44;
      if (!v45)
      {
        v55 = 0;
        while (1)
        {
          v46 = &v37[v55];
          if ((unint64_t)&v37[v55] >= v36)
            break;
          v56 = *(_QWORD *)&v37[v43 + v55];
          v55 += 8;
          v57 = *(_QWORD *)v46 ^ v56;
          if (v57)
          {
            v46 = (char *)(v55 + (__clz(__rbit64(v57)) >> 3));
            goto LABEL_53;
          }
        }
        v44 = &v46[v43];
        goto LABEL_43;
      }
      v46 = (char *)(__clz(__rbit64(v45)) >> 3);
LABEL_53:
      v53 = (_DWORD)v46 + 4;
LABEL_54:
      if (v113 < v53)
      {
        v54 = (_DWORD *)(v39 + 8 * v10);
        *v54 = v38 - a7 + 1;
        v54[1] = v53;
        v10 = (v10 + 1);
        if (v53 > v18)
          return v10;
        v113 = v53;
        if ((_QWORD *)((char *)v13 + v53) == (_QWORD *)a5)
          return v10;
      }
      if (++v38 >= v32)
        goto LABEL_65;
    }
    v46 = v35;
LABEL_43:
    if ((unint64_t)v46 < a5 - 3 && *(_DWORD *)v44 == *(_DWORD *)v46)
    {
      v46 += 4;
      v44 += 4;
    }
    if ((unint64_t)v46 < a5 - 1 && *(unsigned __int16 *)v44 == *(unsigned __int16 *)v46)
    {
      v46 += 2;
      v44 += 2;
    }
    if ((unint64_t)v46 < a5 && *v44 == *v46)
      LODWORD(v46) = (_DWORD)v46 + 1;
    LODWORD(v46) = (_DWORD)v46 - (_DWORD)v35;
    goto LABEL_53;
  }
  v39 = a1;
LABEL_65:
  v109 = (unsigned int *)(v110 + 8 * (v16 & ~v84));
  v107 = v109 + 1;
  v58 = v16 + 9;
  *(_DWORD *)(v86 + 4 * v85) = v16;
  if (v21 < v106)
    goto LABEL_66;
  v60 = 0;
  v61 = 0;
  v62 = 1 << v83;
  v63 = a5 - 7;
  v90 = a5 - 1;
  v92 = a5 - 3;
  v94 = v16 + 3;
  v89 = v13 + 1;
  v87 = v105 + 8;
  v100 = v13;
  v101 = a5;
  while (1)
  {
    if (v61 >= v60)
      v64 = v60;
    else
      v64 = v61;
    v65 = (char *)v13 + v64;
    v112 = v62;
    if (v64 + v21 >= v24)
    {
      v71 = v105 + v21;
      v72 = (_QWORD *)(v71 + v64);
      if (v63 <= (unint64_t)v65)
      {
        v75 = (_DWORD *)((char *)v13 + v64);
      }
      else
      {
        v73 = *(_QWORD *)v65 ^ *v72;
        if (v73)
        {
          v74 = __clz(__rbit64(v73)) >> 3;
LABEL_91:
          v70 = v74 + v64;
          goto LABEL_92;
        }
        v78 = 0;
        v79 = (char *)v89 + v64;
        while (1)
        {
          v80 = &v79[v78];
          if ((unint64_t)&v79[v78] >= v63)
            break;
          v81 = *(_QWORD *)(v87 + v64 + v21 + v78);
          v78 += 8;
          v82 = *(_QWORD *)v80 ^ v81;
          if (v82)
          {
            v74 = v78 + (__clz(__rbit64(v82)) >> 3);
            goto LABEL_91;
          }
        }
        v75 = (_DWORD *)((char *)v89 + v64 + v78);
        v72 = (_QWORD *)(v87 + v64 + v21 + v78);
      }
      if ((unint64_t)v75 < v92 && *(_DWORD *)v72 == *v75)
      {
        ++v75;
        v72 = (_QWORD *)((char *)v72 + 4);
      }
      if ((unint64_t)v75 < v90 && *(unsigned __int16 *)v72 == *(unsigned __int16 *)v75)
      {
        v75 = (_DWORD *)((char *)v75 + 2);
        v72 = (_QWORD *)((char *)v72 + 2);
      }
      if ((unint64_t)v75 < a5 && *(unsigned __int8 *)v72 == *(unsigned __int8 *)v75)
        v75 = (_DWORD *)((char *)v75 + 1);
      v74 = (char *)v75 - v65;
      goto LABEL_91;
    }
    v66 = v58;
    v67 = a5;
    v68 = v63;
    v69 = sub_1D4B5F19C(v65, (char *)(v104 + v21 + v64), v67, v97, v96);
    v58 = v66;
    v63 = v68;
    v24 = v98;
    v70 = v69 + v64;
    v71 = v69 + v64 + v21 >= v98 ? v105 + v21 : v104 + v21;
    v39 = a1;
LABEL_92:
    if (v70 <= v113)
    {
      v13 = v100;
      a5 = v101;
    }
    else
    {
      if (v70 <= v58 - v21)
        v58 = v58;
      else
        v58 = v21 + v70;
      v76 = (_DWORD *)(v39 + 8 * v10);
      *v76 = v94 - v21;
      v76[1] = v70;
      v10 = (v10 + 1);
      v13 = v100;
      a5 = v101;
      if (v70 > 0x1000)
        goto LABEL_66;
      v113 = v70;
      if ((_QWORD *)((char *)v100 + v70) == (_QWORD *)v101)
        goto LABEL_66;
    }
    v77 = (unsigned int *)(v110 + 8 * (v21 & v103));
    if (*(unsigned __int8 *)(v71 + v70) >= *((unsigned __int8 *)v13 + v70))
      break;
    *v109 = v21;
    if (v21 <= v102)
    {
      v109 = v114;
      goto LABEL_66;
    }
    ++v77;
    v61 = v70;
    v109 = v77;
LABEL_105:
    v62 = v112 - 1;
    if (v112 != 1)
    {
      v21 = *v77;
      if (*v77 >= v106)
        continue;
    }
    goto LABEL_66;
  }
  *v107 = v21;
  if (v21 > v102)
  {
    v60 = v70;
    v107 = (unsigned int *)(v110 + 8 * (v21 & v103));
    goto LABEL_105;
  }
  v107 = v114;
LABEL_66:
  *v107 = 0;
  *v109 = 0;
  *(_DWORD *)(v88 + 44) = v58 - 8;
  return v10;
}

uint64_t sub_1D4B8E240(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v13;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  char *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  char *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  _DWORD *v75;
  _DWORD *v76;
  unsigned int *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  int v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  unsigned int v91;
  unint64_t v92;
  unsigned int v93;
  unsigned int v94;
  _QWORD *v96;
  char *v97;
  unint64_t v98;
  unsigned int v99;
  _QWORD *v100;
  unint64_t v101;
  unsigned int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int *v107;
  _DWORD *v108;
  unsigned int *v109;
  uint64_t v110;
  unsigned int v111;
  int v112;
  unint64_t v113;
  _DWORD v114[3];

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v13 = a4;
  v15 = (_DWORD)a4 - v8;
  v16 = (_DWORD)a4 - v8;
  v111 = a7;
  v108 = a6;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1D4B8A754(a2, (_QWORD *)(v8 + v9), a5, v15, 6, 1) + v9;
    while (v9 < v15);
    v8 = *(_QWORD *)(a2 + 8);
    v16 = (_DWORD)v13 - v8;
    a7 = v111;
    a6 = v108;
  }
  *(_DWORD *)(a2 + 44) = v15;
  v17 = *(_DWORD *)(a2 + 276);
  if (v17 >= 0xFFF)
    v18 = 4095;
  else
    v18 = v17;
  v19 = *(_QWORD *)(a2 + 112);
  v20 = (0xCF1BBCDCBF9B0000 * *v13) >> -*(_BYTE *)(a2 + 264);
  v21 = *(_DWORD *)(v19 + 4 * v20);
  v110 = *(_QWORD *)(a2 + 128);
  v22 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  v24 = *(unsigned int *)(a2 + 24);
  v23 = *(_DWORD *)(a2 + 28);
  v104 = *(_QWORD *)(a2 + 16);
  v105 = v8;
  v97 = (char *)(v104 + v24);
  v96 = (_QWORD *)(v8 + v24);
  v103 = ~v22;
  v25 = v16 + v22 + 1;
  if (v16 < ~v22)
    v25 = 0;
  v102 = v25;
  v26 = 1 << *(_DWORD *)(a2 + 256);
  v27 = v16 - v23 > v26;
  v28 = v16 - v26;
  if (v27 && *(_DWORD *)(a2 + 40) == 0)
    v30 = v28;
  else
    v30 = v23;
  if (v30 <= 1)
    v31 = 1;
  else
    v31 = v30;
  v106 = v31;
  v114[0] = 0;
  v88 = a2;
  v113 = (a8 - 1);
  v98 = v24;
  v85 = v20;
  v86 = v19;
  v84 = v22;
  v83 = *(_DWORD *)(a2 + 268);
  v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    v32 = a7 + 3;
    v33 = v16 - v24;
    v34 = v16 - v30;
    v35 = (char *)v13 + 4;
    v36 = a5 - 7;
    v37 = (char *)v13 + 12;
    v38 = a7;
    v39 = a1;
    v99 = v16;
    v93 = v16 - v24;
    v91 = v16 - v30;
    while (1)
    {
      if (v38 == 3)
        v40 = *a6 - 1;
      else
        v40 = a6[v38];
      v41 = v16 - v40;
      if (v40 - 1 >= v33)
      {
        if (v40 - 1 < v34 && v24 + ~v41 >= 3)
        {
          v48 = v104 + v41;
          if (*(_DWORD *)v13 == *(_DWORD *)v48)
          {
            v49 = v18;
            v50 = v39;
            v51 = v30;
            v52 = sub_1D4B5F19C(v35, (char *)(v48 + 4), a5, v97, v96);
            v36 = a5 - 7;
            v35 = (char *)v13 + 4;
            v34 = v91;
            v33 = v93;
            v30 = v51;
            v39 = v50;
            v18 = v49;
            a6 = v108;
            a7 = v111;
            v24 = v98;
            v53 = v52 + 4;
            v16 = v99;
            goto LABEL_54;
          }
        }
LABEL_41:
        v53 = 0;
        goto LABEL_54;
      }
      if (v41 < v30 || *(_DWORD *)v13 != *(_DWORD *)((char *)v13 - v40))
        goto LABEL_41;
      v43 = -(uint64_t)v40;
      v44 = &v35[-v40];
      if (v36 <= (unint64_t)v35)
        break;
      v45 = *(_QWORD *)v35 ^ *(_QWORD *)v44;
      if (!v45)
      {
        v55 = 0;
        while (1)
        {
          v46 = &v37[v55];
          if ((unint64_t)&v37[v55] >= v36)
            break;
          v56 = *(_QWORD *)&v37[v43 + v55];
          v55 += 8;
          v57 = *(_QWORD *)v46 ^ v56;
          if (v57)
          {
            v46 = (char *)(v55 + (__clz(__rbit64(v57)) >> 3));
            goto LABEL_53;
          }
        }
        v44 = &v46[v43];
        goto LABEL_43;
      }
      v46 = (char *)(__clz(__rbit64(v45)) >> 3);
LABEL_53:
      v53 = (_DWORD)v46 + 4;
LABEL_54:
      if (v113 < v53)
      {
        v54 = (_DWORD *)(v39 + 8 * v10);
        *v54 = v38 - a7 + 1;
        v54[1] = v53;
        v10 = (v10 + 1);
        if (v53 > v18)
          return v10;
        v113 = v53;
        if ((_QWORD *)((char *)v13 + v53) == (_QWORD *)a5)
          return v10;
      }
      if (++v38 >= v32)
        goto LABEL_65;
    }
    v46 = v35;
LABEL_43:
    if ((unint64_t)v46 < a5 - 3 && *(_DWORD *)v44 == *(_DWORD *)v46)
    {
      v46 += 4;
      v44 += 4;
    }
    if ((unint64_t)v46 < a5 - 1 && *(unsigned __int16 *)v44 == *(unsigned __int16 *)v46)
    {
      v46 += 2;
      v44 += 2;
    }
    if ((unint64_t)v46 < a5 && *v44 == *v46)
      LODWORD(v46) = (_DWORD)v46 + 1;
    LODWORD(v46) = (_DWORD)v46 - (_DWORD)v35;
    goto LABEL_53;
  }
  v39 = a1;
LABEL_65:
  v109 = (unsigned int *)(v110 + 8 * (v16 & ~v84));
  v107 = v109 + 1;
  v58 = v16 + 9;
  *(_DWORD *)(v86 + 4 * v85) = v16;
  if (v21 < v106)
    goto LABEL_66;
  v60 = 0;
  v61 = 0;
  v62 = 1 << v83;
  v63 = a5 - 7;
  v90 = a5 - 1;
  v92 = a5 - 3;
  v94 = v16 + 3;
  v89 = v13 + 1;
  v87 = v105 + 8;
  v100 = v13;
  v101 = a5;
  while (1)
  {
    if (v61 >= v60)
      v64 = v60;
    else
      v64 = v61;
    v65 = (char *)v13 + v64;
    v112 = v62;
    if (v64 + v21 >= v24)
    {
      v71 = v105 + v21;
      v72 = (_QWORD *)(v71 + v64);
      if (v63 <= (unint64_t)v65)
      {
        v75 = (_DWORD *)((char *)v13 + v64);
      }
      else
      {
        v73 = *(_QWORD *)v65 ^ *v72;
        if (v73)
        {
          v74 = __clz(__rbit64(v73)) >> 3;
LABEL_91:
          v70 = v74 + v64;
          goto LABEL_92;
        }
        v78 = 0;
        v79 = (char *)v89 + v64;
        while (1)
        {
          v80 = &v79[v78];
          if ((unint64_t)&v79[v78] >= v63)
            break;
          v81 = *(_QWORD *)(v87 + v64 + v21 + v78);
          v78 += 8;
          v82 = *(_QWORD *)v80 ^ v81;
          if (v82)
          {
            v74 = v78 + (__clz(__rbit64(v82)) >> 3);
            goto LABEL_91;
          }
        }
        v75 = (_DWORD *)((char *)v89 + v64 + v78);
        v72 = (_QWORD *)(v87 + v64 + v21 + v78);
      }
      if ((unint64_t)v75 < v92 && *(_DWORD *)v72 == *v75)
      {
        ++v75;
        v72 = (_QWORD *)((char *)v72 + 4);
      }
      if ((unint64_t)v75 < v90 && *(unsigned __int16 *)v72 == *(unsigned __int16 *)v75)
      {
        v75 = (_DWORD *)((char *)v75 + 2);
        v72 = (_QWORD *)((char *)v72 + 2);
      }
      if ((unint64_t)v75 < a5 && *(unsigned __int8 *)v72 == *(unsigned __int8 *)v75)
        v75 = (_DWORD *)((char *)v75 + 1);
      v74 = (char *)v75 - v65;
      goto LABEL_91;
    }
    v66 = v58;
    v67 = a5;
    v68 = v63;
    v69 = sub_1D4B5F19C(v65, (char *)(v104 + v21 + v64), v67, v97, v96);
    v58 = v66;
    v63 = v68;
    v24 = v98;
    v70 = v69 + v64;
    v71 = v69 + v64 + v21 >= v98 ? v105 + v21 : v104 + v21;
    v39 = a1;
LABEL_92:
    if (v70 <= v113)
    {
      v13 = v100;
      a5 = v101;
    }
    else
    {
      if (v70 <= v58 - v21)
        v58 = v58;
      else
        v58 = v21 + v70;
      v76 = (_DWORD *)(v39 + 8 * v10);
      *v76 = v94 - v21;
      v76[1] = v70;
      v10 = (v10 + 1);
      v13 = v100;
      a5 = v101;
      if (v70 > 0x1000)
        goto LABEL_66;
      v113 = v70;
      if ((_QWORD *)((char *)v100 + v70) == (_QWORD *)v101)
        goto LABEL_66;
    }
    v77 = (unsigned int *)(v110 + 8 * (v21 & v103));
    if (*(unsigned __int8 *)(v71 + v70) >= *((unsigned __int8 *)v13 + v70))
      break;
    *v109 = v21;
    if (v21 <= v102)
    {
      v109 = v114;
      goto LABEL_66;
    }
    ++v77;
    v61 = v70;
    v109 = v77;
LABEL_105:
    v62 = v112 - 1;
    if (v112 != 1)
    {
      v21 = *v77;
      if (*v77 >= v106)
        continue;
    }
    goto LABEL_66;
  }
  *v107 = v21;
  if (v21 > v102)
  {
    v60 = v70;
    v107 = (unsigned int *)(v110 + 8 * (v21 & v103));
    goto LABEL_105;
  }
  v107 = v114;
LABEL_66:
  *v107 = 0;
  *v109 = 0;
  *(_DWORD *)(v88 + 44) = v58 - 8;
  return v10;
}

uint64_t sub_1D4B8E934(_DWORD *a1, uint64_t a2, _DWORD *a3, int *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v13;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  char *v54;
  BOOL v55;
  uint64_t v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  int *v63;
  char *v64;
  uint64_t v65;
  int v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  int *v80;
  unsigned int v82;
  unsigned int *v83;
  unsigned int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  unsigned int *v88;
  char *v89;
  unsigned int v90;
  int *v91;
  uint64_t v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  int *v100;
  unint64_t v101;
  _DWORD *v102;
  unsigned int *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  unsigned int v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  _DWORD *v118;
  unsigned int v119;
  unsigned int v120;
  _BOOL4 v121;
  int *v123;
  _QWORD *v124;
  uint64_t v125;
  unint64_t v126;
  unsigned int v127;
  _DWORD *v128;
  unint64_t v129;
  _QWORD *v130;
  unsigned int v131;
  unint64_t v132;
  unsigned int v133;
  char v134;
  uint64_t v135;
  char v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  _DWORD *v145;
  unsigned int v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  uint64_t v155;
  unsigned int v157;
  char *v158;
  _QWORD *v159;
  unsigned int v160;
  unint64_t v161;
  _DWORD v162[3];

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v13 = a4;
  v16 = a1;
  v17 = (_DWORD)a4 - v8;
  v18 = (_DWORD)a4 - v8;
  v146 = a7;
  v145 = a6;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1D4B8A754(a2, (_QWORD *)(v8 + v9), a5, v17, 3, 0) + v9;
    while (v9 < v17);
    v8 = *(_QWORD *)(a2 + 8);
    v18 = (_DWORD)v13 - v8;
    v16 = a1;
    a7 = v146;
    a6 = v145;
  }
  v142 = v8;
  *(_DWORD *)(a2 + 44) = v17;
  v19 = *(_DWORD *)(a2 + 276);
  v20 = *(_QWORD *)(a2 + 112);
  v21 = (-1640531535 * *v13) >> -*(_BYTE *)(a2 + 264);
  v22 = *(_DWORD *)(v20 + 4 * v21);
  if (v19 >= 0xFFF)
    v19 = 4095;
  v147 = v19;
  v140 = *(_QWORD *)(a2 + 128);
  v23 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  v144 = ~v23;
  v24 = *(unsigned int *)(a2 + 24);
  v25 = *(_DWORD *)(a2 + 28);
  v159 = (_QWORD *)(v8 + v24);
  v26 = v18 + v23 + 1;
  if (v18 < ~v23)
    v26 = 0;
  v152 = v26;
  v27 = 1 << *(_DWORD *)(a2 + 256);
  if (v18 - v25 > v27 && *(_DWORD *)(a2 + 40) == 0)
    v29 = v18 - v27;
  else
    v29 = v25;
  if (v29 <= 1)
    v30 = 1;
  else
    v30 = v29;
  v162[0] = 0;
  v31 = *(_QWORD *)(a2 + 248);
  v32 = *(_QWORD *)(v31 + 8);
  v158 = *(char **)v31;
  v33 = *(_DWORD *)(v31 + 28);
  v34 = v29 - (*(_QWORD *)v31 - v32);
  v135 = v31;
  v35 = *(_DWORD *)v31 - v32 + (-1 << (*(_DWORD *)(v31 + 260) - 1)) + 1;
  if (*(_QWORD *)v31 - v32 - v33 <= ~(-1 << (*(_DWORD *)(v31 + 260) - 1)))
    v35 = *(_DWORD *)(v31 + 28);
  v153 = ~(-1 << (*(_DWORD *)(v31 + 260) - 1));
  v154 = v35;
  v36 = (a8 - 1);
  v143 = a2;
  v161 = a5;
  v150 = v18;
  v160 = v30;
  v155 = *(_QWORD *)(v31 + 8);
  v157 = *(_DWORD *)(v31 + 28);
  v149 = v29 - (*(_QWORD *)v31 - v32);
  v127 = *(_DWORD *)v31 - v32;
  v128 = a3;
  v134 = *(_DWORD *)(v31 + 264);
  v138 = v21;
  v139 = v20;
  v137 = v23;
  v136 = *(_DWORD *)(a2 + 268);
  v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    v37 = a7 + 3;
    v38 = v18 - v24;
    v39 = v18 - v33 - v34;
    v40 = (_QWORD *)((char *)v13 + 3);
    v41 = a5 - 7;
    v42 = a5 - 3;
    v43 = a5 - 1;
    v44 = (char *)v13 + 11;
    v45 = v32 - v34;
    v46 = a7;
    v47 = v147;
    v133 = v22;
    v132 = v37;
    v131 = v18 - v24;
    v129 = v41;
    v130 = (_QWORD *)((char *)v13 + 3);
    while (1)
    {
      v48 = v46 == 3 ? *a6 - 1 : a6[v46];
      v49 = v18 - v48;
      if (v48 - 1 < v38)
        break;
      v55 = v48 - 1 < v39 && v24 + ~v49 >= 3;
      if (!v55 || (v56 = v45 + v49, ((*(_DWORD *)v56 ^ *v13) & 0xFFFFFF) != 0))
      {
LABEL_41:
        v57 = 0;
        goto LABEL_55;
      }
      v58 = v40;
      v59 = v24;
      v60 = v29;
      v61 = v39;
      v62 = v42;
      v141 = v36;
      v63 = v13;
      v64 = v44;
      v65 = v45;
      v66 = sub_1D4B5F19C(v58, (char *)(v56 + 3), v161, v158, v159);
      v38 = v131;
      v45 = v65;
      v44 = v64;
      v13 = v63;
      v36 = v141;
      v22 = v133;
      v42 = v62;
      a7 = v146;
      v47 = v147;
      v39 = v61;
      v29 = v60;
      v24 = v59;
      v41 = v129;
      v40 = v130;
      a6 = v145;
      v30 = v160;
      v18 = v150;
      v16 = a1;
      v57 = v66 + 3;
      v37 = v132;
LABEL_55:
      if (v36 < v57)
      {
        v67 = &v16[2 * v10];
        *v67 = v46 - a7 + 1;
        v67[1] = v57;
        v10 = (v10 + 1);
        if (v57 > v47)
          return v10;
        v36 = v57;
        if ((int *)((char *)v13 + v57) == (int *)v161)
          return v10;
      }
      if (++v46 >= v37)
        goto LABEL_65;
    }
    if (v49 < v29 || ((*(int *)((char *)v13 - v48) ^ *v13) & 0xFFFFFF) != 0)
      goto LABEL_41;
    v51 = -(uint64_t)v48;
    v52 = (char *)v40 - v48;
    if (v41 <= (unint64_t)v40)
    {
      v54 = (char *)v40;
    }
    else
    {
      v53 = *v40 ^ *(_QWORD *)v52;
      if (v53)
      {
        v54 = (char *)(__clz(__rbit64(v53)) >> 3);
LABEL_53:
        v57 = (_DWORD)v54 + 3;
        goto LABEL_55;
      }
      v68 = 0;
      while (1)
      {
        v54 = &v44[v68];
        if ((unint64_t)&v44[v68] >= v41)
          break;
        v69 = *(_QWORD *)&v44[v51 + v68];
        v68 += 8;
        v70 = *(_QWORD *)v54 ^ v69;
        if (v70)
        {
          v54 = (char *)(v68 + (__clz(__rbit64(v70)) >> 3));
          goto LABEL_53;
        }
      }
      v52 = &v54[v51];
    }
    if ((unint64_t)v54 < v42 && *(_DWORD *)v52 == *(_DWORD *)v54)
    {
      v54 += 4;
      v52 += 4;
    }
    if ((unint64_t)v54 < v43 && *(unsigned __int16 *)v52 == *(unsigned __int16 *)v54)
    {
      v54 += 2;
      v52 += 2;
    }
    if ((unint64_t)v54 < v161 && *v52 == *v54)
      LODWORD(v54) = (_DWORD)v54 + 1;
    LODWORD(v54) = (_DWORD)v54 - (_DWORD)v40;
    goto LABEL_53;
  }
LABEL_65:
  if (v36 > 2)
  {
    v73 = (int *)v161;
    v74 = v142;
    v75 = v140;
    v76 = v152;
  }
  else
  {
    v71 = v143;
    v72 = sub_1D4B90B28(v143, v128, v13);
    v30 = v160;
    v73 = (int *)v161;
    v74 = v142;
    v75 = v140;
    v76 = v152;
    if (v72 < v160)
    {
      v16 = a1;
      v18 = v150;
    }
    else
    {
      v18 = v150;
      v16 = a1;
      if (!((v150 - v72) >> 18))
      {
        v77 = (_QWORD *)(v142 + v72);
        if (v161 - 7 <= (unint64_t)v13)
        {
          v80 = v13;
        }
        else
        {
          v78 = *(_QWORD *)v13 ^ *v77;
          if (v78)
          {
            v79 = __clz(__rbit64(v78)) >> 3;
            goto LABEL_84;
          }
          v123 = v13 + 2;
          while (1)
          {
            v124 = (_QWORD *)((char *)v123 + v78);
            if ((unint64_t)v123 + v78 >= v161 - 7)
              break;
            v125 = *(_QWORD *)(v72 + v142 + 8 + v78);
            v78 += 8;
            v126 = *v124 ^ v125;
            if (v126)
            {
              v79 = v78 + (__clz(__rbit64(v126)) >> 3);
              goto LABEL_84;
            }
          }
          v80 = (int *)((char *)v13 + v78 + 8);
          v77 = (_QWORD *)(v72 + v142 + v78 + 8);
        }
        if ((unint64_t)v80 < v161 - 3 && *(_DWORD *)v77 == *v80)
        {
          ++v80;
          v77 = (_QWORD *)((char *)v77 + 4);
        }
        if ((unint64_t)v80 < v161 - 1 && *(unsigned __int16 *)v77 == *(unsigned __int16 *)v80)
        {
          v80 = (int *)((char *)v80 + 2);
          v77 = (_QWORD *)((char *)v77 + 2);
        }
        if ((unint64_t)v80 < v161 && *(unsigned __int8 *)v77 == *(unsigned __int8 *)v80)
          v80 = (int *)((char *)v80 + 1);
        v79 = (char *)v80 - (char *)v13;
LABEL_84:
        if (v79 >= 3)
        {
          *a1 = v150 - v72 + 3;
          a1[1] = v79;
          if (v79 > v147 || (int *)((char *)v13 + v79) == (int *)v161)
          {
            v82 = v150 + 1;
            v10 = 1;
            goto LABEL_157;
          }
          v10 = 1;
          v36 = v79;
        }
      }
    }
  }
  v83 = (unsigned int *)(v75 + 8 * (v18 & ~v137));
  v84 = v18 + 9;
  v85 = 1 << v136;
  *(_DWORD *)(v139 + 4 * v138) = v18;
  if (v22 < v30)
  {
    *(_QWORD *)v83 = 0;
    goto LABEL_136;
  }
  v86 = 0;
  v87 = 0;
  v88 = v83 + 1;
  v89 = (char *)v73 - 7;
  v90 = v18 + 3;
  v91 = v13 + 2;
  v92 = v74 + 8;
  v93 = v144;
  while (1)
  {
    v94 = v87 >= v86 ? v86 : v87;
    v95 = v74 + v22;
    v96 = (char *)v13 + v94;
    v97 = (_QWORD *)(v95 + v94);
    if (v89 <= (char *)v13 + v94)
    {
      v100 = (int *)((char *)v13 + v94);
    }
    else
    {
      v98 = *(_QWORD *)v96 ^ *v97;
      if (v98)
      {
        v99 = __clz(__rbit64(v98)) >> 3;
        goto LABEL_111;
      }
      v105 = 0;
      v106 = (char *)v91 + v94;
      while (1)
      {
        v107 = &v106[v105];
        if (&v106[v105] >= v89)
          break;
        v108 = *(_QWORD *)(v92 + v94 + v22 + v105);
        v105 += 8;
        v109 = *(_QWORD *)v107 ^ v108;
        if (v109)
        {
          v99 = v105 + (__clz(__rbit64(v109)) >> 3);
          v93 = v144;
          v76 = v152;
          v30 = v160;
          goto LABEL_111;
        }
      }
      v100 = (int *)((char *)v91 + v94 + v105);
      v97 = (_QWORD *)(v92 + v94 + v22 + v105);
      v93 = v144;
      v76 = v152;
    }
    if (v100 < (int *)((char *)v73 - 3) && *(_DWORD *)v97 == *v100)
    {
      ++v100;
      v97 = (_QWORD *)((char *)v97 + 4);
    }
    if (v100 < (int *)((char *)v73 - 1) && *(unsigned __int16 *)v97 == *(unsigned __int16 *)v100)
    {
      v100 = (int *)((char *)v100 + 2);
      v97 = (_QWORD *)((char *)v97 + 2);
    }
    if (v100 < v73 && *(unsigned __int8 *)v97 == *(unsigned __int8 *)v100)
      v100 = (int *)((char *)v100 + 1);
    v30 = v160;
    v99 = (char *)v100 - v96;
LABEL_111:
    v101 = v99 + v94;
    if (v101 > v36)
    {
      if (v101 > v84 - v22)
        v84 = v22 + v101;
      v102 = &v16[2 * v10];
      *v102 = v90 - v22;
      v102[1] = v101;
      v10 = (v10 + 1);
      if (v101 > 0x1000 || (int *)((char *)v13 + v101) == v73)
      {
        *v88 = 0;
        *v83 = 0;
        goto LABEL_156;
      }
      v36 = v101;
    }
    v104 = (unsigned int *)(v75 + 8 * (v22 & v93));
    if (*(unsigned __int8 *)(v95 + v101) >= *((unsigned __int8 *)v13 + v101))
      break;
    *v83 = v22;
    if (v22 <= v76)
    {
      v83 = v162;
      goto LABEL_135;
    }
    ++v104;
    v87 = v101;
    v83 = v104;
LABEL_124:
    if (--v85)
    {
      v22 = *v104;
      if (*v104 >= v30)
        continue;
    }
    goto LABEL_135;
  }
  *v88 = v22;
  if (v22 > v76)
  {
    v86 = v101;
    v88 = (unsigned int *)(v75 + 8 * (v22 & v93));
    goto LABEL_124;
  }
  v88 = v162;
LABEL_135:
  *v88 = 0;
  *v83 = 0;
  v18 = v150;
  if (v85)
  {
LABEL_136:
    v110 = *(_DWORD *)(*(_QWORD *)(v135 + 112) + 4 * ((-1640531535 * *v13) >> -v134));
    if (v110 > v157)
    {
      v111 = 0;
      v112 = 0;
      v151 = *(_QWORD *)(v135 + 128);
      v148 = v18 + 3;
      v113 = v85 - 1;
      do
      {
        if (v112 >= v111)
          v114 = v111;
        else
          v114 = v112;
        v115 = sub_1D4B5F19C((int *)((char *)v13 + v114), (char *)(v155 + v110 + v114), v161, v158, v159);
        v116 = v115 + v114;
        if (v115 + v114 + v110 >= v127)
          v117 = v142 + v149 + v110;
        else
          v117 = v155 + v110;
        if (v116 > v36)
        {
          if (v116 > v84 - (v110 + v149))
            v84 = v110 + v149 + v116;
          v118 = &a1[2 * v10];
          *v118 = v148 - (v110 + v149);
          v118[1] = v116;
          v10 = (v10 + 1);
          if (v116 > 0x1000)
            break;
          v36 = v115 + v114;
          if ((int *)((char *)v13 + v116) == (int *)v161)
            break;
        }
        if (v110 <= v154)
          break;
        v119 = *(unsigned __int8 *)(v117 + v116);
        v120 = *((unsigned __int8 *)v13 + v116);
        v55 = v119 >= v120;
        v121 = v119 < v120;
        if (v55)
          v111 = v115 + v114;
        else
          v112 = v115 + v114;
        v55 = v113-- != 0;
        if (!v55)
          break;
        v110 = *(_DWORD *)(v151 + 8 * (v110 & v153) + 4 * v121);
      }
      while (v110 > v157);
    }
  }
LABEL_156:
  v82 = v84 - 8;
  v71 = v143;
LABEL_157:
  *(_DWORD *)(v71 + 44) = v82;
  return v10;
}

uint64_t sub_1D4B8F2E4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, unint64_t a5, _DWORD *a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD *v37;
  unint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  BOOL v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int *v73;
  unint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  _DWORD *v83;
  unint64_t v84;
  _DWORD *v85;
  unsigned int *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  unsigned int v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  unsigned int v102;
  unsigned int v103;
  _BOOL4 v104;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD *v116;
  _DWORD *v117;
  unint64_t v118;
  _QWORD *v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unint64_t v123;
  unint64_t v124;
  unsigned int v125;
  unint64_t v126;
  unsigned int v127;
  unsigned int v129;
  uint64_t v130;
  _DWORD *v131;
  _DWORD *v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  unsigned int v136;
  char *v137;
  _QWORD *v138;
  unsigned int v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _DWORD v143[3];

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v14 = a4;
  v16 = (_DWORD)a4 - v8;
  v17 = (_DWORD)a4 - v8;
  v131 = a6;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1D4B8A754(a2, (_QWORD *)(v8 + v9), a5, v16, 4, 0) + v9;
    while (v9 < v16);
    v8 = *(_QWORD *)(a2 + 8);
    v17 = (_DWORD)v14 - v8;
    a6 = v131;
  }
  *(_DWORD *)(a2 + 44) = v16;
  v18 = *(_DWORD *)(a2 + 276);
  v112 = (-1640531535 * *v14) >> -*(_BYTE *)(a2 + 264);
  v113 = *(_QWORD *)(a2 + 112);
  v19 = *(_DWORD *)(v113 + 4 * v112);
  if (v18 >= 0xFFF)
    v20 = 4095;
  else
    v20 = v18;
  v114 = *(_QWORD *)(a2 + 128);
  v111 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  v22 = *(unsigned int *)(a2 + 24);
  v21 = *(_DWORD *)(a2 + 28);
  v141 = v8;
  v138 = (_QWORD *)(v8 + v22);
  v107 = ~v111;
  v23 = v17 + v111 + 1;
  if (v17 < ~v111)
    v23 = 0;
  v125 = v23;
  v24 = 1 << *(_DWORD *)(a2 + 256);
  if (v17 - v21 > v24 && *(_DWORD *)(a2 + 40) == 0)
    v26 = v17 - v24;
  else
    v26 = v21;
  if (v26 <= 1)
    v27 = 1;
  else
    v27 = v26;
  v139 = v27;
  v143[0] = 0;
  v110 = *(_DWORD *)(a2 + 268);
  v115 = a2;
  v28 = *(_QWORD *)(a2 + 248);
  v29 = *(_QWORD *)(v28 + 8);
  v137 = *(char **)v28;
  v30 = *(_DWORD *)(v28 + 28);
  v31 = v26 - (*(_QWORD *)v28 - v29);
  v108 = *(_DWORD *)(v28 + 264);
  v109 = v28;
  v133 = ~(-1 << (*(_DWORD *)(v28 + 260) - 1));
  v106 = *(_QWORD *)v28 - v29;
  v32 = v106 + (-1 << (*(_DWORD *)(v28 + 260) - 1)) + 1;
  if (*(_QWORD *)v28 - v29 - v30 <= v133)
    v32 = *(_DWORD *)(v28 + 28);
  v134 = v32;
  v33 = (a8 - 1);
  v135 = *(_QWORD *)(v28 + 8);
  v136 = *(_DWORD *)(v28 + 28);
  v127 = v26 - (*(_QWORD *)v28 - v29);
  v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    v34 = (a7 + 3);
    v35 = v17 - v22;
    v36 = v17 - v30 - v31;
    v37 = v14 + 1;
    v38 = a5 - 7;
    v123 = a5 - 1;
    v124 = a5 - 3;
    v39 = v14 + 3;
    v40 = v29 - v31;
    v41 = a7;
    v42 = a1;
    v121 = v17 - v22;
    v122 = v19;
    v120 = v36;
    v118 = a5 - 7;
    v119 = v14 + 1;
    v116 = v14;
    v117 = v14 + 3;
    while (1)
    {
      if (v41 == 3)
        v43 = *a6 - 1;
      else
        v43 = a6[v41];
      v44 = v17 - v43;
      if (v43 - 1 >= v35)
      {
        v50 = v43 - 1 < v36 && v22 + ~v44 >= 3;
        if (v50)
        {
          v51 = v40 + v44;
          if (*v14 == *(_DWORD *)v51)
          {
            v52 = v37;
            v53 = a5;
            v54 = a7;
            v55 = v42;
            v56 = v20;
            v129 = v10;
            v126 = v33;
            v57 = a5;
            v58 = v22;
            v59 = v26;
            v60 = v34;
            v61 = v40;
            v62 = sub_1D4B5F19C(v52, (char *)(v51 + 4), v53, v137, v138);
            v40 = v61;
            v39 = v117;
            v38 = v118;
            v37 = v119;
            v34 = v60;
            v26 = v59;
            v22 = v58;
            a5 = v57;
            v14 = v116;
            v33 = v126;
            v19 = v122;
            v10 = v129;
            v20 = v56;
            a6 = v131;
            v42 = v55;
            a7 = v54;
            v63 = v62 + 4;
            v36 = v120;
            v35 = v121;
            goto LABEL_56;
          }
        }
LABEL_43:
        v63 = 0;
        goto LABEL_56;
      }
      if (v44 < v26 || *v14 != *(_DWORD *)((char *)v14 - v43))
        goto LABEL_43;
      v46 = -(uint64_t)v43;
      v47 = (_QWORD *)((char *)v37 - v43);
      if (v38 <= (unint64_t)v37)
        break;
      v48 = *v37 ^ *v47;
      if (!v48)
      {
        v65 = 0;
        while (1)
        {
          v49 = &v39[v65];
          if ((unint64_t)&v39[v65] >= v38)
            break;
          v66 = *(_QWORD *)((char *)v39 + v46 + v65 * 4);
          v65 += 2;
          v67 = *v49 ^ v66;
          if (v67)
          {
            v49 = (_QWORD *)(v65 * 4 + (__clz(__rbit64(v67)) >> 3));
            goto LABEL_55;
          }
        }
        v47 = (_QWORD *)((char *)v49 + v46);
        goto LABEL_45;
      }
      v49 = (_QWORD *)(__clz(__rbit64(v48)) >> 3);
LABEL_55:
      v63 = (_DWORD)v49 + 4;
LABEL_56:
      if (v33 < v63)
      {
        v64 = (_DWORD *)(v42 + 8 * v10);
        *v64 = v41 - a7 + 1;
        v64[1] = v63;
        v10 = (v10 + 1);
        if (v63 > v20)
          return v10;
        v33 = v63;
        if ((_DWORD *)((char *)v14 + v63) == (_DWORD *)a5)
          return v10;
      }
      if (++v41 >= v34)
        goto LABEL_67;
    }
    v49 = v37;
LABEL_45:
    if ((unint64_t)v49 < v124 && *(_DWORD *)v47 == *(_DWORD *)v49)
    {
      v49 = (_QWORD *)((char *)v49 + 4);
      v47 = (_QWORD *)((char *)v47 + 4);
    }
    if ((unint64_t)v49 < v123 && *(unsigned __int16 *)v47 == *(unsigned __int16 *)v49)
    {
      v49 = (_QWORD *)((char *)v49 + 2);
      v47 = (_QWORD *)((char *)v47 + 2);
    }
    if ((unint64_t)v49 < a5 && *(unsigned __int8 *)v47 == *(unsigned __int8 *)v49)
      LODWORD(v49) = (_DWORD)v49 + 1;
    LODWORD(v49) = (_DWORD)v49 - (_DWORD)v37;
    goto LABEL_55;
  }
  v42 = a1;
LABEL_67:
  v68 = (unsigned int *)(v114 + 8 * (v17 & ~v111));
  v69 = v17 + 9;
  v70 = 1 << v110;
  *(_DWORD *)(v113 + 4 * v112) = v17;
  if (v19 < v139)
  {
    v140 = a5;
    *(_QWORD *)v68 = 0;
    goto LABEL_112;
  }
  v71 = 0;
  v72 = 0;
  v73 = v68 + 1;
  v74 = a5 - 7;
  v132 = v14 + 2;
  v75 = v141 + 8;
  v76 = v125;
  while (1)
  {
    v77 = v72 >= v71 ? v71 : v72;
    v78 = v141 + v19;
    v79 = (char *)v14 + v77;
    v80 = (_QWORD *)(v78 + v77);
    if (v74 <= (unint64_t)v14 + v77)
    {
      v83 = (_DWORD *)((char *)v14 + v77);
    }
    else
    {
      v81 = *(_QWORD *)v79 ^ *v80;
      if (v81)
      {
        v82 = __clz(__rbit64(v81)) >> 3;
        goto LABEL_87;
      }
      v88 = 0;
      v89 = (char *)v132 + v77;
      while (1)
      {
        v90 = &v89[v88];
        if ((unint64_t)&v89[v88] >= v74)
          break;
        v91 = *(_QWORD *)(v75 + v77 + v19 + v88);
        v88 += 8;
        v92 = *(_QWORD *)v90 ^ v91;
        if (v92)
        {
          v82 = v88 + (__clz(__rbit64(v92)) >> 3);
          v76 = v125;
          goto LABEL_87;
        }
      }
      v83 = (_DWORD *)((char *)v132 + v77 + v88);
      v80 = (_QWORD *)(v75 + v77 + v19 + v88);
      v76 = v125;
    }
    if ((unint64_t)v83 < a5 - 3 && *(_DWORD *)v80 == *v83)
    {
      ++v83;
      v80 = (_QWORD *)((char *)v80 + 4);
    }
    if ((unint64_t)v83 < a5 - 1 && *(unsigned __int16 *)v80 == *(unsigned __int16 *)v83)
    {
      v83 = (_DWORD *)((char *)v83 + 2);
      v80 = (_QWORD *)((char *)v80 + 2);
    }
    if ((unint64_t)v83 < a5 && *(unsigned __int8 *)v80 == *(unsigned __int8 *)v83)
      v83 = (_DWORD *)((char *)v83 + 1);
    v82 = (char *)v83 - v79;
LABEL_87:
    v84 = v82 + v77;
    if (v84 > v33)
    {
      if (v84 > v69 - v19)
        v69 = v19 + v84;
      v85 = (_DWORD *)(v42 + 8 * v10);
      *v85 = v17 + 3 - v19;
      v85[1] = v84;
      v10 = (v10 + 1);
      if (v84 > 0x1000 || (_DWORD *)((char *)v14 + v84) == (_DWORD *)a5)
      {
        *v73 = 0;
        *v68 = 0;
        goto LABEL_132;
      }
      v33 = v84;
    }
    v87 = (unsigned int *)(v114 + 8 * (v19 & v107));
    if (*(unsigned __int8 *)(v78 + v84) >= *((unsigned __int8 *)v14 + v84))
      break;
    *v68 = v19;
    if (v19 <= v76)
    {
      v68 = v143;
      goto LABEL_111;
    }
    ++v87;
    v72 = v84;
    v68 = v87;
LABEL_100:
    if (--v70)
    {
      v19 = *v87;
      if (*v87 >= v139)
        continue;
    }
    goto LABEL_111;
  }
  *v73 = v19;
  if (v19 > v76)
  {
    v71 = v84;
    v73 = (unsigned int *)(v114 + 8 * (v19 & v107));
    goto LABEL_100;
  }
  v73 = v143;
LABEL_111:
  v140 = a5;
  *v73 = 0;
  *v68 = 0;
  if (v70)
  {
LABEL_112:
    v93 = *(_DWORD *)(*(_QWORD *)(v109 + 112) + 4 * ((-1640531535 * *v14) >> -(char)v108));
    if (v93 > v136)
    {
      v94 = 0;
      v95 = 0;
      v130 = *(_QWORD *)(v109 + 128);
      v96 = v70 - 1;
      v142 = v141 + v127;
      do
      {
        if (v95 >= v94)
          v97 = v94;
        else
          v97 = v95;
        v98 = sub_1D4B5F19C((_DWORD *)((char *)v14 + v97), (char *)(v135 + v93 + v97), v140, v137, v138);
        v99 = v98 + v97;
        if (v98 + v97 + v93 >= v106)
          v100 = v142 + v93;
        else
          v100 = v135 + v93;
        if (v99 > v33)
        {
          if (v99 > v69 - (v93 + v127))
            v69 = v93 + v127 + v99;
          v101 = (_DWORD *)(a1 + 8 * v10);
          *v101 = v17 + 3 - (v93 + v127);
          v101[1] = v99;
          v10 = (v10 + 1);
          if (v99 > 0x1000)
            break;
          v33 = v98 + v97;
          if ((_DWORD *)((char *)v14 + v99) == (_DWORD *)v140)
            break;
        }
        if (v93 <= v134)
          break;
        v102 = *(unsigned __int8 *)(v100 + v99);
        v103 = *((unsigned __int8 *)v14 + v99);
        v50 = v102 >= v103;
        v104 = v102 < v103;
        if (v50)
          v94 = v98 + v97;
        else
          v95 = v98 + v97;
        v50 = v96-- != 0;
        if (!v50)
          break;
        v93 = *(_DWORD *)(v130 + 8 * (v93 & v133) + 4 * v104);
      }
      while (v93 > v136);
    }
  }
LABEL_132:
  *(_DWORD *)(v115 + 44) = v69 - 8;
  return v10;
}

uint64_t sub_1D4B8FB00(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t a5, _DWORD *a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  BOOL v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int *v73;
  unint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  _DWORD *v83;
  unint64_t v84;
  _DWORD *v85;
  unsigned int *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  unsigned int v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  unsigned int v102;
  unsigned int v103;
  _BOOL4 v104;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char *v118;
  unint64_t v119;
  _QWORD *v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unint64_t v124;
  unint64_t v125;
  unsigned int v126;
  unint64_t v127;
  unsigned int v128;
  unsigned int v130;
  uint64_t v131;
  _DWORD *v132;
  _QWORD *v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  char *v138;
  _QWORD *v139;
  unsigned int v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _DWORD v144[3];

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v14 = a4;
  v16 = (_DWORD)a4 - v8;
  v17 = (_DWORD)a4 - v8;
  v132 = a6;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1D4B8A754(a2, (_QWORD *)(v8 + v9), a5, v16, 5, 0) + v9;
    while (v9 < v16);
    v8 = *(_QWORD *)(a2 + 8);
    v17 = (_DWORD)v14 - v8;
    a6 = v132;
  }
  *(_DWORD *)(a2 + 44) = v16;
  v18 = *(_DWORD *)(a2 + 276);
  v110 = 0xCF1BBCDCBB000000 * *v14;
  v113 = v110 >> -*(_BYTE *)(a2 + 264);
  v114 = *(_QWORD *)(a2 + 112);
  v19 = *(_DWORD *)(v114 + 4 * v113);
  if (v18 >= 0xFFF)
    v20 = 4095;
  else
    v20 = v18;
  v115 = *(_QWORD *)(a2 + 128);
  v112 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  v22 = *(unsigned int *)(a2 + 24);
  v21 = *(_DWORD *)(a2 + 28);
  v142 = v8;
  v139 = (_QWORD *)(v8 + v22);
  v107 = ~v112;
  v23 = v17 + v112 + 1;
  if (v17 < ~v112)
    v23 = 0;
  v126 = v23;
  v24 = 1 << *(_DWORD *)(a2 + 256);
  if (v17 - v21 > v24 && *(_DWORD *)(a2 + 40) == 0)
    v26 = v17 - v24;
  else
    v26 = v21;
  if (v26 <= 1)
    v27 = 1;
  else
    v27 = v26;
  v140 = v27;
  v144[0] = 0;
  v111 = *(_DWORD *)(a2 + 268);
  v116 = a2;
  v28 = *(_QWORD *)(a2 + 248);
  v29 = *(_QWORD *)(v28 + 8);
  v138 = *(char **)v28;
  v30 = *(_DWORD *)(v28 + 28);
  v31 = v26 - (*(_QWORD *)v28 - v29);
  v108 = *(_DWORD *)(v28 + 264);
  v109 = v28;
  v134 = ~(-1 << (*(_DWORD *)(v28 + 260) - 1));
  v106 = *(_QWORD *)v28 - v29;
  v32 = v106 + (-1 << (*(_DWORD *)(v28 + 260) - 1)) + 1;
  if (*(_QWORD *)v28 - v29 - v30 <= v134)
    v32 = *(_DWORD *)(v28 + 28);
  v135 = v32;
  v33 = (a8 - 1);
  v136 = *(_QWORD *)(v28 + 8);
  v137 = *(_DWORD *)(v28 + 28);
  v128 = v26 - (*(_QWORD *)v28 - v29);
  v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    v34 = (a7 + 3);
    v35 = v17 - v22;
    v36 = v17 - v30 - v31;
    v37 = (_QWORD *)((char *)v14 + 4);
    v38 = a5 - 7;
    v124 = a5 - 1;
    v125 = a5 - 3;
    v39 = (char *)v14 + 12;
    v40 = v29 - v31;
    v41 = a7;
    v42 = a1;
    v122 = v17 - v22;
    v123 = v19;
    v121 = v36;
    v119 = a5 - 7;
    v120 = (_QWORD *)((char *)v14 + 4);
    v117 = v14;
    v118 = (char *)v14 + 12;
    while (1)
    {
      if (v41 == 3)
        v43 = *a6 - 1;
      else
        v43 = a6[v41];
      v44 = v17 - v43;
      if (v43 - 1 >= v35)
      {
        v50 = v43 - 1 < v36 && v22 + ~v44 >= 3;
        if (v50)
        {
          v51 = v40 + v44;
          if (*(_DWORD *)v14 == *(_DWORD *)v51)
          {
            v52 = v37;
            v53 = a5;
            v54 = a7;
            v55 = v42;
            v56 = v20;
            v130 = v10;
            v127 = v33;
            v57 = a5;
            v58 = v22;
            v59 = v26;
            v60 = v34;
            v61 = v40;
            v62 = sub_1D4B5F19C(v52, (char *)(v51 + 4), v53, v138, v139);
            v40 = v61;
            v39 = v118;
            v38 = v119;
            v37 = v120;
            v34 = v60;
            v26 = v59;
            v22 = v58;
            a5 = v57;
            v14 = v117;
            v33 = v127;
            v19 = v123;
            v10 = v130;
            v20 = v56;
            a6 = v132;
            v42 = v55;
            a7 = v54;
            v63 = v62 + 4;
            v36 = v121;
            v35 = v122;
            goto LABEL_56;
          }
        }
LABEL_43:
        v63 = 0;
        goto LABEL_56;
      }
      if (v44 < v26 || *(_DWORD *)v14 != *(_DWORD *)((char *)v14 - v43))
        goto LABEL_43;
      v46 = -(uint64_t)v43;
      v47 = (char *)v37 - v43;
      if (v38 <= (unint64_t)v37)
        break;
      v48 = *v37 ^ *(_QWORD *)v47;
      if (!v48)
      {
        v65 = 0;
        while (1)
        {
          v49 = &v39[v65];
          if ((unint64_t)&v39[v65] >= v38)
            break;
          v66 = *(_QWORD *)&v39[v46 + v65];
          v65 += 8;
          v67 = *(_QWORD *)v49 ^ v66;
          if (v67)
          {
            v49 = (char *)(v65 + (__clz(__rbit64(v67)) >> 3));
            goto LABEL_55;
          }
        }
        v47 = &v49[v46];
        goto LABEL_45;
      }
      v49 = (char *)(__clz(__rbit64(v48)) >> 3);
LABEL_55:
      v63 = (_DWORD)v49 + 4;
LABEL_56:
      if (v33 < v63)
      {
        v64 = (_DWORD *)(v42 + 8 * v10);
        *v64 = v41 - a7 + 1;
        v64[1] = v63;
        v10 = (v10 + 1);
        if (v63 > v20)
          return v10;
        v33 = v63;
        if ((_QWORD *)((char *)v14 + v63) == (_QWORD *)a5)
          return v10;
      }
      if (++v41 >= v34)
        goto LABEL_67;
    }
    v49 = (char *)v37;
LABEL_45:
    if ((unint64_t)v49 < v125 && *(_DWORD *)v47 == *(_DWORD *)v49)
    {
      v49 += 4;
      v47 += 4;
    }
    if ((unint64_t)v49 < v124 && *(unsigned __int16 *)v47 == *(unsigned __int16 *)v49)
    {
      v49 += 2;
      v47 += 2;
    }
    if ((unint64_t)v49 < a5 && *v47 == *v49)
      LODWORD(v49) = (_DWORD)v49 + 1;
    LODWORD(v49) = (_DWORD)v49 - (_DWORD)v37;
    goto LABEL_55;
  }
  v42 = a1;
LABEL_67:
  v68 = (unsigned int *)(v115 + 8 * (v17 & ~v112));
  v69 = v17 + 9;
  v70 = 1 << v111;
  *(_DWORD *)(v114 + 4 * v113) = v17;
  if (v19 < v140)
  {
    v141 = a5;
    *(_QWORD *)v68 = 0;
    goto LABEL_112;
  }
  v71 = 0;
  v72 = 0;
  v73 = v68 + 1;
  v74 = a5 - 7;
  v133 = v14 + 1;
  v75 = v142 + 8;
  v76 = v126;
  while (1)
  {
    v77 = v72 >= v71 ? v71 : v72;
    v78 = v142 + v19;
    v79 = (char *)v14 + v77;
    v80 = (_QWORD *)(v78 + v77);
    if (v74 <= (unint64_t)v14 + v77)
    {
      v83 = (_DWORD *)((char *)v14 + v77);
    }
    else
    {
      v81 = *(_QWORD *)v79 ^ *v80;
      if (v81)
      {
        v82 = __clz(__rbit64(v81)) >> 3;
        goto LABEL_87;
      }
      v88 = 0;
      v89 = (char *)v133 + v77;
      while (1)
      {
        v90 = &v89[v88];
        if ((unint64_t)&v89[v88] >= v74)
          break;
        v91 = *(_QWORD *)(v75 + v77 + v19 + v88);
        v88 += 8;
        v92 = *(_QWORD *)v90 ^ v91;
        if (v92)
        {
          v82 = v88 + (__clz(__rbit64(v92)) >> 3);
          v76 = v126;
          goto LABEL_87;
        }
      }
      v83 = (_DWORD *)((char *)v133 + v77 + v88);
      v80 = (_QWORD *)(v75 + v77 + v19 + v88);
      v76 = v126;
    }
    if ((unint64_t)v83 < a5 - 3 && *(_DWORD *)v80 == *v83)
    {
      ++v83;
      v80 = (_QWORD *)((char *)v80 + 4);
    }
    if ((unint64_t)v83 < a5 - 1 && *(unsigned __int16 *)v80 == *(unsigned __int16 *)v83)
    {
      v83 = (_DWORD *)((char *)v83 + 2);
      v80 = (_QWORD *)((char *)v80 + 2);
    }
    if ((unint64_t)v83 < a5 && *(unsigned __int8 *)v80 == *(unsigned __int8 *)v83)
      v83 = (_DWORD *)((char *)v83 + 1);
    v82 = (char *)v83 - v79;
LABEL_87:
    v84 = v82 + v77;
    if (v84 > v33)
    {
      if (v84 > v69 - v19)
        v69 = v19 + v84;
      v85 = (_DWORD *)(v42 + 8 * v10);
      *v85 = v17 + 3 - v19;
      v85[1] = v84;
      v10 = (v10 + 1);
      if (v84 > 0x1000 || (_QWORD *)((char *)v14 + v84) == (_QWORD *)a5)
      {
        *v73 = 0;
        *v68 = 0;
        goto LABEL_132;
      }
      v33 = v84;
    }
    v87 = (unsigned int *)(v115 + 8 * (v19 & v107));
    if (*(unsigned __int8 *)(v78 + v84) >= *((unsigned __int8 *)v14 + v84))
      break;
    *v68 = v19;
    if (v19 <= v76)
    {
      v68 = v144;
      goto LABEL_111;
    }
    ++v87;
    v72 = v84;
    v68 = v87;
LABEL_100:
    if (--v70)
    {
      v19 = *v87;
      if (*v87 >= v140)
        continue;
    }
    goto LABEL_111;
  }
  *v73 = v19;
  if (v19 > v76)
  {
    v71 = v84;
    v73 = (unsigned int *)(v115 + 8 * (v19 & v107));
    goto LABEL_100;
  }
  v73 = v144;
LABEL_111:
  v141 = a5;
  *v73 = 0;
  *v68 = 0;
  if (v70)
  {
LABEL_112:
    v93 = *(_DWORD *)(*(_QWORD *)(v109 + 112) + 4 * (v110 >> -(char)v108));
    if (v93 > v137)
    {
      v94 = 0;
      v95 = 0;
      v131 = *(_QWORD *)(v109 + 128);
      v96 = v70 - 1;
      v143 = v142 + v128;
      do
      {
        if (v95 >= v94)
          v97 = v94;
        else
          v97 = v95;
        v98 = sub_1D4B5F19C((_QWORD *)((char *)v14 + v97), (char *)(v136 + v93 + v97), v141, v138, v139);
        v99 = v98 + v97;
        if (v98 + v97 + v93 >= v106)
          v100 = v143 + v93;
        else
          v100 = v136 + v93;
        if (v99 > v33)
        {
          if (v99 > v69 - (v93 + v128))
            v69 = v93 + v128 + v99;
          v101 = (_DWORD *)(a1 + 8 * v10);
          *v101 = v17 + 3 - (v93 + v128);
          v101[1] = v99;
          v10 = (v10 + 1);
          if (v99 > 0x1000)
            break;
          v33 = v98 + v97;
          if ((_QWORD *)((char *)v14 + v99) == (_QWORD *)v141)
            break;
        }
        if (v93 <= v135)
          break;
        v102 = *(unsigned __int8 *)(v100 + v99);
        v103 = *((unsigned __int8 *)v14 + v99);
        v50 = v102 >= v103;
        v104 = v102 < v103;
        if (v50)
          v94 = v98 + v97;
        else
          v95 = v98 + v97;
        v50 = v96-- != 0;
        if (!v50)
          break;
        v93 = *(_DWORD *)(v131 + 8 * (v93 & v134) + 4 * v104);
      }
      while (v93 > v137);
    }
  }
LABEL_132:
  *(_DWORD *)(v116 + 44) = v69 - 8;
  return v10;
}

uint64_t sub_1D4B90314(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t a5, _DWORD *a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  BOOL v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int *v73;
  unint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  _DWORD *v83;
  unint64_t v84;
  _DWORD *v85;
  unsigned int *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  unsigned int v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  unsigned int v102;
  unsigned int v103;
  _BOOL4 v104;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char *v118;
  unint64_t v119;
  _QWORD *v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unint64_t v124;
  unint64_t v125;
  unsigned int v126;
  unint64_t v127;
  unsigned int v128;
  unsigned int v130;
  uint64_t v131;
  _DWORD *v132;
  _QWORD *v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  char *v138;
  _QWORD *v139;
  unsigned int v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _DWORD v144[3];

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v14 = a4;
  v16 = (_DWORD)a4 - v8;
  v17 = (_DWORD)a4 - v8;
  v132 = a6;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = sub_1D4B8A754(a2, (_QWORD *)(v8 + v9), a5, v16, 6, 0) + v9;
    while (v9 < v16);
    v8 = *(_QWORD *)(a2 + 8);
    v17 = (_DWORD)v14 - v8;
    a6 = v132;
  }
  *(_DWORD *)(a2 + 44) = v16;
  v18 = *(_DWORD *)(a2 + 276);
  v110 = 0xCF1BBCDCBF9B0000 * *v14;
  v113 = v110 >> -*(_BYTE *)(a2 + 264);
  v114 = *(_QWORD *)(a2 + 112);
  v19 = *(_DWORD *)(v114 + 4 * v113);
  if (v18 >= 0xFFF)
    v20 = 4095;
  else
    v20 = v18;
  v115 = *(_QWORD *)(a2 + 128);
  v112 = -1 << (*(_DWORD *)(a2 + 260) - 1);
  v22 = *(unsigned int *)(a2 + 24);
  v21 = *(_DWORD *)(a2 + 28);
  v142 = v8;
  v139 = (_QWORD *)(v8 + v22);
  v107 = ~v112;
  v23 = v17 + v112 + 1;
  if (v17 < ~v112)
    v23 = 0;
  v126 = v23;
  v24 = 1 << *(_DWORD *)(a2 + 256);
  if (v17 - v21 > v24 && *(_DWORD *)(a2 + 40) == 0)
    v26 = v17 - v24;
  else
    v26 = v21;
  if (v26 <= 1)
    v27 = 1;
  else
    v27 = v26;
  v140 = v27;
  v144[0] = 0;
  v111 = *(_DWORD *)(a2 + 268);
  v116 = a2;
  v28 = *(_QWORD *)(a2 + 248);
  v29 = *(_QWORD *)(v28 + 8);
  v138 = *(char **)v28;
  v30 = *(_DWORD *)(v28 + 28);
  v31 = v26 - (*(_QWORD *)v28 - v29);
  v108 = *(_DWORD *)(v28 + 264);
  v109 = v28;
  v134 = ~(-1 << (*(_DWORD *)(v28 + 260) - 1));
  v106 = *(_QWORD *)v28 - v29;
  v32 = v106 + (-1 << (*(_DWORD *)(v28 + 260) - 1)) + 1;
  if (*(_QWORD *)v28 - v29 - v30 <= v134)
    v32 = *(_DWORD *)(v28 + 28);
  v135 = v32;
  v33 = (a8 - 1);
  v136 = *(_QWORD *)(v28 + 8);
  v137 = *(_DWORD *)(v28 + 28);
  v128 = v26 - (*(_QWORD *)v28 - v29);
  v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    v34 = (a7 + 3);
    v35 = v17 - v22;
    v36 = v17 - v30 - v31;
    v37 = (_QWORD *)((char *)v14 + 4);
    v38 = a5 - 7;
    v124 = a5 - 1;
    v125 = a5 - 3;
    v39 = (char *)v14 + 12;
    v40 = v29 - v31;
    v41 = a7;
    v42 = a1;
    v122 = v17 - v22;
    v123 = v19;
    v121 = v36;
    v119 = a5 - 7;
    v120 = (_QWORD *)((char *)v14 + 4);
    v117 = v14;
    v118 = (char *)v14 + 12;
    while (1)
    {
      if (v41 == 3)
        v43 = *a6 - 1;
      else
        v43 = a6[v41];
      v44 = v17 - v43;
      if (v43 - 1 >= v35)
      {
        v50 = v43 - 1 < v36 && v22 + ~v44 >= 3;
        if (v50)
        {
          v51 = v40 + v44;
          if (*(_DWORD *)v14 == *(_DWORD *)v51)
          {
            v52 = v37;
            v53 = a5;
            v54 = a7;
            v55 = v42;
            v56 = v20;
            v130 = v10;
            v127 = v33;
            v57 = a5;
            v58 = v22;
            v59 = v26;
            v60 = v34;
            v61 = v40;
            v62 = sub_1D4B5F19C(v52, (char *)(v51 + 4), v53, v138, v139);
            v40 = v61;
            v39 = v118;
            v38 = v119;
            v37 = v120;
            v34 = v60;
            v26 = v59;
            v22 = v58;
            a5 = v57;
            v14 = v117;
            v33 = v127;
            v19 = v123;
            v10 = v130;
            v20 = v56;
            a6 = v132;
            v42 = v55;
            a7 = v54;
            v63 = v62 + 4;
            v36 = v121;
            v35 = v122;
            goto LABEL_56;
          }
        }
LABEL_43:
        v63 = 0;
        goto LABEL_56;
      }
      if (v44 < v26 || *(_DWORD *)v14 != *(_DWORD *)((char *)v14 - v43))
        goto LABEL_43;
      v46 = -(uint64_t)v43;
      v47 = (char *)v37 - v43;
      if (v38 <= (unint64_t)v37)
        break;
      v48 = *v37 ^ *(_QWORD *)v47;
      if (!v48)
      {
        v65 = 0;
        while (1)
        {
          v49 = &v39[v65];
          if ((unint64_t)&v39[v65] >= v38)
            break;
          v66 = *(_QWORD *)&v39[v46 + v65];
          v65 += 8;
          v67 = *(_QWORD *)v49 ^ v66;
          if (v67)
          {
            v49 = (char *)(v65 + (__clz(__rbit64(v67)) >> 3));
            goto LABEL_55;
          }
        }
        v47 = &v49[v46];
        goto LABEL_45;
      }
      v49 = (char *)(__clz(__rbit64(v48)) >> 3);
LABEL_55:
      v63 = (_DWORD)v49 + 4;
LABEL_56:
      if (v33 < v63)
      {
        v64 = (_DWORD *)(v42 + 8 * v10);
        *v64 = v41 - a7 + 1;
        v64[1] = v63;
        v10 = (v10 + 1);
        if (v63 > v20)
          return v10;
        v33 = v63;
        if ((_QWORD *)((char *)v14 + v63) == (_QWORD *)a5)
          return v10;
      }
      if (++v41 >= v34)
        goto LABEL_67;
    }
    v49 = (char *)v37;
LABEL_45:
    if ((unint64_t)v49 < v125 && *(_DWORD *)v47 == *(_DWORD *)v49)
    {
      v49 += 4;
      v47 += 4;
    }
    if ((unint64_t)v49 < v124 && *(unsigned __int16 *)v47 == *(unsigned __int16 *)v49)
    {
      v49 += 2;
      v47 += 2;
    }
    if ((unint64_t)v49 < a5 && *v47 == *v49)
      LODWORD(v49) = (_DWORD)v49 + 1;
    LODWORD(v49) = (_DWORD)v49 - (_DWORD)v37;
    goto LABEL_55;
  }
  v42 = a1;
LABEL_67:
  v68 = (unsigned int *)(v115 + 8 * (v17 & ~v112));
  v69 = v17 + 9;
  v70 = 1 << v111;
  *(_DWORD *)(v114 + 4 * v113) = v17;
  if (v19 < v140)
  {
    v141 = a5;
    *(_QWORD *)v68 = 0;
    goto LABEL_112;
  }
  v71 = 0;
  v72 = 0;
  v73 = v68 + 1;
  v74 = a5 - 7;
  v133 = v14 + 1;
  v75 = v142 + 8;
  v76 = v126;
  while (1)
  {
    v77 = v72 >= v71 ? v71 : v72;
    v78 = v142 + v19;
    v79 = (char *)v14 + v77;
    v80 = (_QWORD *)(v78 + v77);
    if (v74 <= (unint64_t)v14 + v77)
    {
      v83 = (_DWORD *)((char *)v14 + v77);
    }
    else
    {
      v81 = *(_QWORD *)v79 ^ *v80;
      if (v81)
      {
        v82 = __clz(__rbit64(v81)) >> 3;
        goto LABEL_87;
      }
      v88 = 0;
      v89 = (char *)v133 + v77;
      while (1)
      {
        v90 = &v89[v88];
        if ((unint64_t)&v89[v88] >= v74)
          break;
        v91 = *(_QWORD *)(v75 + v77 + v19 + v88);
        v88 += 8;
        v92 = *(_QWORD *)v90 ^ v91;
        if (v92)
        {
          v82 = v88 + (__clz(__rbit64(v92)) >> 3);
          v76 = v126;
          goto LABEL_87;
        }
      }
      v83 = (_DWORD *)((char *)v133 + v77 + v88);
      v80 = (_QWORD *)(v75 + v77 + v19 + v88);
      v76 = v126;
    }
    if ((unint64_t)v83 < a5 - 3 && *(_DWORD *)v80 == *v83)
    {
      ++v83;
      v80 = (_QWORD *)((char *)v80 + 4);
    }
    if ((unint64_t)v83 < a5 - 1 && *(unsigned __int16 *)v80 == *(unsigned __int16 *)v83)
    {
      v83 = (_DWORD *)((char *)v83 + 2);
      v80 = (_QWORD *)((char *)v80 + 2);
    }
    if ((unint64_t)v83 < a5 && *(unsigned __int8 *)v80 == *(unsigned __int8 *)v83)
      v83 = (_DWORD *)((char *)v83 + 1);
    v82 = (char *)v83 - v79;
LABEL_87:
    v84 = v82 + v77;
    if (v84 > v33)
    {
      if (v84 > v69 - v19)
        v69 = v19 + v84;
      v85 = (_DWORD *)(v42 + 8 * v10);
      *v85 = v17 + 3 - v19;
      v85[1] = v84;
      v10 = (v10 + 1);
      if (v84 > 0x1000 || (_QWORD *)((char *)v14 + v84) == (_QWORD *)a5)
      {
        *v73 = 0;
        *v68 = 0;
        goto LABEL_132;
      }
      v33 = v84;
    }
    v87 = (unsigned int *)(v115 + 8 * (v19 & v107));
    if (*(unsigned __int8 *)(v78 + v84) >= *((unsigned __int8 *)v14 + v84))
      break;
    *v68 = v19;
    if (v19 <= v76)
    {
      v68 = v144;
      goto LABEL_111;
    }
    ++v87;
    v72 = v84;
    v68 = v87;
LABEL_100:
    if (--v70)
    {
      v19 = *v87;
      if (*v87 >= v140)
        continue;
    }
    goto LABEL_111;
  }
  *v73 = v19;
  if (v19 > v76)
  {
    v71 = v84;
    v73 = (unsigned int *)(v115 + 8 * (v19 & v107));
    goto LABEL_100;
  }
  v73 = v144;
LABEL_111:
  v141 = a5;
  *v73 = 0;
  *v68 = 0;
  if (v70)
  {
LABEL_112:
    v93 = *(_DWORD *)(*(_QWORD *)(v109 + 112) + 4 * (v110 >> -(char)v108));
    if (v93 > v137)
    {
      v94 = 0;
      v95 = 0;
      v131 = *(_QWORD *)(v109 + 128);
      v96 = v70 - 1;
      v143 = v142 + v128;
      do
      {
        if (v95 >= v94)
          v97 = v94;
        else
          v97 = v95;
        v98 = sub_1D4B5F19C((_QWORD *)((char *)v14 + v97), (char *)(v136 + v93 + v97), v141, v138, v139);
        v99 = v98 + v97;
        if (v98 + v97 + v93 >= v106)
          v100 = v143 + v93;
        else
          v100 = v136 + v93;
        if (v99 > v33)
        {
          if (v99 > v69 - (v93 + v128))
            v69 = v93 + v128 + v99;
          v101 = (_DWORD *)(a1 + 8 * v10);
          *v101 = v17 + 3 - (v93 + v128);
          v101[1] = v99;
          v10 = (v10 + 1);
          if (v99 > 0x1000)
            break;
          v33 = v98 + v97;
          if ((_QWORD *)((char *)v14 + v99) == (_QWORD *)v141)
            break;
        }
        if (v93 <= v135)
          break;
        v102 = *(unsigned __int8 *)(v100 + v99);
        v103 = *((unsigned __int8 *)v14 + v99);
        v50 = v102 >= v103;
        v104 = v102 < v103;
        if (v50)
          v94 = v98 + v97;
        else
          v95 = v98 + v97;
        v50 = v96-- != 0;
        if (!v50)
          break;
        v93 = *(_DWORD *)(v131 + 8 * (v93 & v134) + 4 * v104);
      }
      while (v93 > v137);
    }
  }
LABEL_132:
  *(_DWORD *)(v116 + 44) = v69 - 8;
  return v10;
}

uint64_t sub_1D4B90B28(uint64_t a1, _DWORD *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;

  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  v6 = *a3;
  v7 = 32 - *(_DWORD *)(a1 + 48);
  if (v5 < (int)a3 - (int)v4)
  {
    do
    {
      *(_DWORD *)(v3 + 4 * ((900185344 * *(_DWORD *)(v4 + v5)) >> v7)) = v5;
      ++v5;
    }
    while (v5 < ((_DWORD)a3 - v4));
  }
  *a2 = (_DWORD)a3 - v4;
  return *(unsigned int *)(v3 + 4 * ((900185344 * v6) >> v7));
}

uint64_t sub_1D4B90B8C(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  void *v6;
  void (*v7)(_QWORD);
  void (*v8)(_QWORD, uint64_t);
  __int128 v10;
  uint64_t v11;

  if (!a1)
    return 0;
  if ((*(_BYTE *)(a1 + 3128) & 1) == 0)
    sub_1D4B4DA68(*(_QWORD *)a1);
  sub_1D4B90CCC(a1);
  v2 = *(char **)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 3040) + 1;
  v10 = *(_OWORD *)(a1 + 3088);
  v11 = *(_QWORD *)(a1 + 3104);
  sub_1D4B90DF4(v2, v3, (uint64_t)&v10);
  sub_1D4B90E7C(*(pthread_mutex_t **)(a1 + 16));
  sub_1D4B90F28(*(pthread_mutex_t **)(a1 + 24));
  sub_1D4B90E7C(*(pthread_mutex_t **)(a1 + 32));
  v4 = *(void (**)(uint64_t))(a1 + 608);
  v5 = *(_QWORD *)(a1 + 616);
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 336));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 400));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 2864));
  pthread_cond_destroy((pthread_cond_t *)(a1 + 2928));
  if (*(_QWORD *)(a1 + 696))
  {
    if (!v4)
    {
      free(*(void **)(a1 + 696));
      v6 = *(void **)(a1 + 712);
      if (!v6)
        goto LABEL_12;
      goto LABEL_11;
    }
    v4(v5);
  }
  v6 = *(void **)(a1 + 712);
  if (v6)
  {
    if (v4)
    {
      v4(v5);
      goto LABEL_12;
    }
LABEL_11:
    free(v6);
  }
LABEL_12:
  sub_1D4B534AC(*(_QWORD **)(a1 + 3112));
  if (*(_QWORD *)(a1 + 312))
  {
    v7 = *(void (**)(_QWORD))(a1 + 3096);
    if (v7)
      v7(*(_QWORD *)(a1 + 3104));
    else
      free(*(void **)(a1 + 312));
  }
  v8 = *(void (**)(_QWORD, uint64_t))(a1 + 3096);
  if (v8)
    v8(*(_QWORD *)(a1 + 3104), a1);
  else
    free((void *)a1);
  return 0;
}

void sub_1D4B90CCC(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v2 = 0;
  do
  {
    v3 = *(_QWORD *)(a1 + 8) + 464 * v2;
    v10 = *(_OWORD *)(v3 + 16);
    v11 = *(_OWORD *)(v3 + 32);
    v12 = *(_OWORD *)(v3 + 48);
    v13 = *(_OWORD *)(v3 + 64);
    v7 = *(_OWORD *)(v3 + 80);
    v8 = *(_OWORD *)(v3 + 96);
    v9 = *(_OWORD *)(v3 + 112);
    sub_1D4B90FA4(*(_QWORD *)(a1 + 16), *(void **)(v3 + 160), *(_QWORD *)(v3 + 168));
    v4 = (_OWORD *)(*(_QWORD *)(a1 + 8) + 464 * v2);
    v4[27] = 0u;
    v4[28] = 0u;
    v4[25] = 0u;
    v4[26] = 0u;
    v4[23] = 0u;
    v4[24] = 0u;
    v4[21] = 0u;
    v4[22] = 0u;
    v4[19] = 0u;
    v4[20] = 0u;
    v4[17] = 0u;
    v4[18] = 0u;
    v4[15] = 0u;
    v4[16] = 0u;
    v4[13] = 0u;
    v4[14] = 0u;
    v4[11] = 0u;
    v4[12] = 0u;
    v4[9] = 0u;
    v4[10] = 0u;
    v4[7] = 0u;
    v4[8] = 0u;
    v4[5] = 0u;
    v4[6] = 0u;
    v4[3] = 0u;
    v4[4] = 0u;
    v4[1] = 0u;
    v4[2] = 0u;
    *v4 = 0u;
    v5 = (_OWORD *)(*(_QWORD *)(a1 + 8) + 464 * v2);
    v5[1] = v10;
    v5[2] = v11;
    v5[3] = v12;
    v5[4] = v13;
    v6 = (_OWORD *)(*(_QWORD *)(a1 + 8) + 464 * v2);
    v6[5] = v7;
    v6[6] = v8;
    v6[7] = v9;
    ++v2;
  }
  while (v2 <= *(_DWORD *)(a1 + 3040));
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 3056) = 1;
}

void sub_1D4B90DF4(char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  pthread_cond_t *v6;
  void (*v7)(_QWORD, char *);

  if (a1)
  {
    if (a2)
    {
      v5 = a2;
      v6 = (pthread_cond_t *)(a1 + 80);
      do
      {
        pthread_mutex_destroy((pthread_mutex_t *)&v6[-2].__opaque[24]);
        pthread_cond_destroy(v6);
        v6 = (pthread_cond_t *)((char *)v6 + 464);
        --v5;
      }
      while (v5);
    }
    v7 = *(void (**)(_QWORD, char *))(a3 + 8);
    if (v7)
      v7(*(_QWORD *)(a3 + 16), a1);
    else
      free(a1);
  }
}

void sub_1D4B90E7C(pthread_mutex_t *a1)
{
  unint64_t v2;
  void **v3;
  void (*v4)(_QWORD);
  void (*v5)(_QWORD, pthread_mutex_t *);

  if (a1)
  {
    if (*(_DWORD *)a1[1].__opaque)
    {
      v2 = 0;
      v3 = (void **)&a1[1].__opaque[32];
      do
      {
        if (*v3)
        {
          v4 = *(void (**)(_QWORD))&a1[1].__opaque[16];
          if (v4)
            v4(*(_QWORD *)&a1[1].__opaque[24]);
          else
            free(*v3);
        }
        ++v2;
        v3 += 2;
      }
      while (v2 < *(unsigned int *)a1[1].__opaque);
    }
    pthread_mutex_destroy(a1);
    v5 = *(void (**)(_QWORD, pthread_mutex_t *))&a1[1].__opaque[16];
    if (v5)
      v5(*(_QWORD *)&a1[1].__opaque[24], a1);
    else
      free(a1);
  }
}

void sub_1D4B90F28(pthread_mutex_t *a1)
{
  uint64_t v2;
  void (*v3)(_QWORD, pthread_mutex_t *);

  if (SLODWORD(a1[1].__sig) >= 1)
  {
    v2 = 0;
    do
      sub_1D4B515C4(*(_QWORD *)&a1[1].__opaque[8 * v2++ + 24]);
    while (v2 < SLODWORD(a1[1].__sig));
  }
  pthread_mutex_destroy(a1);
  v3 = *(void (**)(_QWORD, pthread_mutex_t *))&a1[1].__opaque[8];
  if (v3)
    v3(*(_QWORD *)&a1[1].__opaque[16], a1);
  else
    free(a1);
}

void sub_1D4B90FA4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(_QWORD, void *);

  if (a2)
  {
    pthread_mutex_lock((pthread_mutex_t *)a1);
    v6 = *(unsigned int *)(a1 + 76);
    if (v6 >= *(_DWORD *)(a1 + 72))
    {
      pthread_mutex_unlock((pthread_mutex_t *)a1);
      v8 = *(void (**)(_QWORD, void *))(a1 + 88);
      if (v8)
        v8(*(_QWORD *)(a1 + 96), a2);
      else
        free(a2);
    }
    else
    {
      *(_DWORD *)(a1 + 76) = v6 + 1;
      v7 = a1 + 16 * v6;
      *(_QWORD *)(v7 + 104) = a2;
      *(_QWORD *)(v7 + 112) = a3;
      pthread_mutex_unlock((pthread_mutex_t *)a1);
    }
  }
}

uint64_t sub_1D4B91044(int *a1, char *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;
  _BYTE *v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _DWORD *v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int *v34;
  int v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t j;
  uint64_t v42;
  int v43;
  char v44;
  _BYTE *v45;
  uint64_t v46;
  char *v47;
  char v48;
  char *v49;
  uint64_t v50;
  _BYTE *v51;
  char v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unint64_t *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v68;

  v68 = 0;
  if (a5 < 0x5D4)
    return -44;
  v8 = (_BYTE *)(a4 + 1236);
  v5 = sub_1D4B4CDAC((_BYTE *)(a4 + 1236), 0x100uLL, a4, &v68, (_DWORD *)&v68 + 1, a2, a3, (unsigned __int16 *)(a4 + 104), 0x36CuLL);
  if (v5 > 0xFFFFFFFFFFFFFF88)
    return v5;
  v9 = *a1;
  v10 = *a1;
  v11 = v10 + 1;
  if ((v10 + 1) < 0xB)
    v12 = v10 + 1;
  else
    v12 = 11;
  v14 = v68;
  v13 = HIDWORD(v68);
  v15 = HIDWORD(v68) - v12;
  if (HIDWORD(v68) <= v12)
  {
    if (HIDWORD(v68) < v12)
    {
      v16 = v12 - HIDWORD(v68);
      if ((_DWORD)v68)
      {
        v17 = v68;
        do
        {
          if (*v8)
            v18 = v16;
          else
            v18 = 0;
          *v8++ += v18;
          --v17;
        }
        while (v17);
      }
      if (v16 < v12)
      {
        v19 = (_DWORD *)(a4 + 4 * v12);
        v20 = v12;
        do
          *v19-- = *(_DWORD *)(a4 + 4 * (v15 + v20--));
        while (v16 < v20);
      }
      if (v12 != v13)
        bzero((void *)(a4 + 4 * (v16 - (v12 + ~v13))), 4 * (v12 + ~v13) + 4);
    }
  }
  else
  {
    v12 = HIDWORD(v68);
    if (HIDWORD(v68) > v11)
      return -44;
  }
  *(_BYTE *)a1 = v9;
  *((_BYTE *)a1 + 1) = 0;
  *((_BYTE *)a1 + 2) = v12;
  *((_BYTE *)a1 + 3) = HIBYTE(v9);
  if ((v12 & 0x80000000) == 0)
  {
    v21 = 0;
    v22 = v12 + 1;
    v23 = (int *)a4;
    do
    {
      v24 = *v23;
      v23[13] = v21;
      v21 += v24;
      ++v23;
      --v22;
    }
    while (v22);
  }
  if ((int)v14 < 4)
  {
    LODWORD(v25) = 0;
  }
  else
  {
    v25 = 0;
    v26 = a4 + 1236;
    do
    {
      for (i = 0; i != 4; ++i)
      {
        v28 = a4 + 4 * *(unsigned __int8 *)(v26 + i);
        v29 = *(unsigned int *)(v28 + 52);
        *(_DWORD *)(v28 + 52) = v29 + 1;
        *(_BYTE *)(a4 + v29 + 980) = i + v25;
      }
      v25 += 4;
      v26 += 4;
    }
    while (v25 < (v14 - 3));
  }
  if ((int)v25 < (int)v14)
  {
    v25 = v25;
    do
    {
      v30 = a4 + 4 * *(unsigned __int8 *)(a4 + 1236 + v25);
      v31 = *(unsigned int *)(v30 + 52);
      *(_DWORD *)(v30 + 52) = v31 + 1;
      *(_BYTE *)(a4 + v31 + 980) = v25++;
    }
    while (v14 != v25);
  }
  v32 = v12 + 1;
  if (v32 >= 2)
  {
    v33 = 0;
    v34 = a1 + 3;
    v35 = *(_DWORD *)a4;
    v36 = a4 + 980;
    v37 = a1 + 1;
    v38 = (uint64_t)a1 + 7;
    v39 = (uint64_t)a1 + 5;
    v40 = a1 + 5;
    for (j = 1; j != v32; ++j)
    {
      v42 = *(unsigned int *)(a4 + 4 * j);
      v43 = 1 << j >> 1;
      v44 = v32 - j;
      switch(v43)
      {
        case 1:
          if ((int)v42 >= 1)
          {
            v45 = (_BYTE *)(v39 + 2 * v33);
            v46 = *(unsigned int *)(a4 + 4 * j);
            v47 = (char *)(v36 + v35);
            do
            {
              v48 = *v47++;
              *(v45 - 1) = v44;
              *v45 = v48;
              v45 += 2;
              --v46;
            }
            while (v46);
          }
          break;
        case 2:
          if ((int)v42 >= 1)
          {
            v49 = (char *)(v36 + v35);
            v50 = *(unsigned int *)(a4 + 4 * j);
            v51 = (_BYTE *)(v38 + 2 * v33);
            do
            {
              v52 = *v49++;
              *(v51 - 3) = v44;
              *(v51 - 2) = v52;
              *(v51 - 1) = v44;
              *v51 = v52;
              v51 += 4;
              --v50;
            }
            while (v50);
          }
          break;
        case 4:
          if ((int)v42 >= 1)
          {
            v58 = (_QWORD *)((char *)v37 + 2 * v33);
            v59 = *(unsigned int *)(a4 + 4 * j);
            v60 = (unsigned __int8 *)(v36 + v35);
            do
            {
              v61 = *v60++;
              *v58++ = 0x1000100010001 * ((v32 - j) | ((unint64_t)v61 << 8));
              --v59;
            }
            while (v59);
          }
          break;
        case 8:
          if ((int)v42 >= 1)
          {
            v62 = (unint64_t *)((char *)v34 + 2 * v33);
            v63 = *(unsigned int *)(a4 + 4 * j);
            v64 = (unsigned __int8 *)(v36 + v35);
            do
            {
              v65 = *v64++;
              v66 = 0x1000100010001 * ((v32 - j) | ((unint64_t)v65 << 8));
              *(v62 - 1) = v66;
              *v62 = v66;
              v62 += 2;
              --v63;
            }
            while (v63);
          }
          break;
        default:
          if ((int)v42 >= 1)
          {
            v53 = 0;
            v54 = (unint64_t *)((char *)v40 + 2 * v33);
            do
            {
              if (1 << j >= 2)
              {
                v55 = 0;
                v56 = 0x1000100010001
                    * ((v32 - j) | ((unint64_t)*(unsigned __int8 *)(a4 + v53 + v35 + 980) << 8));
                v57 = v54;
                do
                {
                  *(v57 - 2) = v56;
                  *(v57 - 1) = v56;
                  *v57 = v56;
                  v57[1] = v56;
                  v57 += 4;
                  v55 += 16;
                }
                while (v55 < v43);
              }
              ++v53;
              v54 = (unint64_t *)((char *)v54 + 2 * v43);
            }
            while (v53 != v42);
          }
          break;
      }
      v35 += v42;
      v33 += v42 * v43;
    }
  }
  return v5;
}

unint64_t sub_1D4B91418(int *a1, char *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  int v10;
  _DWORD *v11;
  unsigned int v12;
  int v13;
  _DWORD *v14;
  _BOOL4 v16;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  int *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  _DWORD *v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  _QWORD v84[14];

  if (a5 < 0x84C)
    return -1;
  v84[12] = v5;
  v84[13] = v6;
  v11 = a1 + 1;
  v10 = *a1;
  *(_OWORD *)(a4 + 704) = 0u;
  *(_OWORD *)(a4 + 720) = 0u;
  *(_OWORD *)(a4 + 672) = 0u;
  *(_OWORD *)(a4 + 688) = 0u;
  *(_OWORD *)(a4 + 640) = 0u;
  *(_OWORD *)(a4 + 656) = 0u;
  *(_OWORD *)(a4 + 624) = 0u;
  if (v10 <= 0xCu)
  {
    v84[0] = 0;
    result = sub_1D4B4CDAC((_BYTE *)(a4 + 992), 0x100uLL, a4 + 624, v84, (_DWORD *)v84 + 1, a2, a3, (unsigned __int16 *)(a4 + 1248), 0x36CuLL);
    if (result > 0xFFFFFFFFFFFFFF88)
      return result;
    v12 = HIDWORD(v84[0]);
    if (HIDWORD(v84[0]) <= v10)
    {
      v59 = result;
      v60 = v10;
      v13 = 0;
      v68 = a4 + 676;
      v14 = (_DWORD *)(a4 + 680);
      v16 = HIDWORD(v84[0]) < 0xC && v10 > 0xBu;
      v69 = HIDWORD(v84[0]) + 1;
      while (!*(_DWORD *)(a4 + 4 * (HIDWORD(v84[0]) + v13--) + 624))
        ;
      v18 = 0;
      if (v16)
        v10 = 11;
      else
        v10 = v10;
      v19 = HIDWORD(v84[0]) + v13;
      v20 = (HIDWORD(v84[0]) + v13 + 2);
      if ((HIDWORD(v84[0]) + v13) < 0xFFFFFFFE)
      {
        v21 = 0;
        v22 = (_DWORD *)(a4 + 684);
        v23 = v20 - 1;
        do
        {
          v18 = *(v22 - 14) + v21;
          *v22++ = v21;
          v21 = v18;
          --v23;
        }
        while (v23);
      }
      *v14 = v18;
      v14[v20] = v18;
      v24 = LODWORD(v84[0]);
      if (LODWORD(v84[0]))
      {
        v25 = 0;
        do
        {
          v26 = *(unsigned __int8 *)(a4 + 992 + v25);
          v27 = v14[v26];
          v14[v26] = v27 + 1;
          *(_BYTE *)(a4 + v27 + 736) = v25++;
        }
        while (v24 != v25);
      }
      *v14 = 0;
      if (v20 >= 2)
      {
        v28 = 0;
        v29 = v10 - v12;
        v30 = v20 - 1;
        v31 = a4;
        do
        {
          *(_DWORD *)(v31 + 4) = v28;
          v31 += 4;
          v28 += *(_DWORD *)(v31 + 624) << v29++;
          --v30;
        }
        while (v30);
      }
      v80 = v19 + 1;
      v32 = v10 + v13 + 1;
      v67 = -v13;
      if (-v13 < v32)
      {
        v33 = -v13;
        v34 = 13 * v33;
        do
        {
          if (v20 >= 2)
          {
            v35 = v20 - 1;
            v36 = (_DWORD *)(a4 + 4);
            do
            {
              v36[v34] = *v36 >> v33;
              ++v36;
              --v35;
            }
            while (v35);
          }
          ++v33;
          v34 += 13;
        }
        while (v32 != v33);
      }
      v64 = a4;
      v61 = a1;
      if (v80 < 1)
      {
LABEL_60:
        *(_BYTE *)v61 = v60;
        *((_BYTE *)v61 + 1) = 1;
        *((_BYTE *)v61 + 2) = v10;
        *((_BYTE *)v61 + 3) = HIBYTE(v60);
        return v59;
      }
      v37 = a4 + 736;
      v63 = v69 - v10;
      v65 = a1 + 5;
      v66 = v20;
      v74 = (2 * v12) | 1;
      LODWORD(v38) = v74 - v10;
      v62 = (int)v20;
      v39 = 1;
      v79 = v11;
      while (1)
      {
        v40 = v38 - 1;
        v38 = (int)v38 <= 1 ? 1 : v38;
        v41 = *(int *)(v68 + 4 * v39);
        v42 = *(int *)(v68 + 4 * (v39 + 1));
        v43 = v69 - v39;
        v44 = v10 - (v69 - v39);
        v72 = v40;
        v73 = v12;
        v71 = v39 + 1;
        if (v44 >= v67)
          break;
        sub_1D4B94ED0((uint64_t)&v11[*(unsigned int *)(v64 + 4 * v39)], (unsigned __int8 *)(v37 + v41), (unsigned __int8 *)(v37 + v42), v43, v10, 0, 1);
LABEL_59:
        v12 = v73 - 1;
        --v74;
        v39 = v71;
        LODWORD(v38) = v72;
        if (v71 == v66)
          goto LABEL_60;
      }
      if ((_DWORD)v41 == (_DWORD)v42)
        goto LABEL_59;
      v45 = 52 * v12;
      v78 = v64 + 4 * v38;
      v77 = v74 - v38;
      v76 = v62 - v38;
      v46 = 1 << v44;
      if ((int)(v63 + v43) <= 1)
        v47 = 1;
      else
        v47 = v63 + v43;
      v48 = *(_DWORD *)(v64 + 4 * v39);
      v70 = v64 + 52 * v43;
      v75 = (v43 << 16) + 0x1000000;
      v83 = *(_DWORD *)(v68 + 4 * (v39 + 1));
      v82 = 1 << v44;
      v81 = v47;
      while (1)
      {
        v49 = *(unsigned __int8 *)(v37 + v41);
        v50 = (unint64_t *)&v11[v48];
        if (v47 >= 2)
        {
          v51 = v75 | v49 | ((unint64_t)(v75 | v49) << 32);
          if (v46 == 2)
          {
            v52 = (unint64_t *)&v11[v48];
          }
          else
          {
            if (v46 != 4)
            {
              v53 = *(unsigned int *)(v70 + 4 * v47);
              if ((int)v53 >= 1)
              {
                v54 = 0;
                v55 = (unint64_t *)&v65[v48];
                do
                {
                  *(v55 - 2) = v51;
                  *(v55 - 1) = v51;
                  *v55 = v51;
                  v55[1] = v51;
                  v55 += 4;
                  v54 += 8;
                }
                while (v54 < v53);
              }
              goto LABEL_55;
            }
            *v50 = v51;
            v52 = v50 + 1;
          }
          *v52 = v51;
        }
LABEL_55:
        if ((int)v47 <= v80)
        {
          v56 = v76;
          v57 = v77;
          v58 = v78;
          do
          {
            sub_1D4B94ED0((uint64_t)v50 + 4 * *(unsigned int *)(v58 + v45), (unsigned __int8 *)(v37 + *(int *)(v58 + 676)), (unsigned __int8 *)(v37 + *(int *)(v58 + 680)), v57, v10, v49, 2);
            v58 += 4;
            --v57;
            --v56;
          }
          while (v56);
        }
        v46 = v82;
        v48 += v82;
        ++v41;
        v11 = v79;
        v47 = v81;
        if (v83 == (_DWORD)v41)
          goto LABEL_59;
      }
    }
  }
  return -44;
}

uint64_t sub_1D4B918AC(char *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, int *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  _DWORD *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  char *v15;
  _DWORD *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  _BOOL4 v19;
  unsigned int v20;
  _DWORD *v21;
  unsigned int v22;
  char *v23;
  _DWORD *v24;
  unsigned int v25;
  char *v26;
  _DWORD *v27;
  unsigned int v28;
  char *v29;
  _DWORD *v30;
  unsigned int v31;
  char *v32;
  _DWORD *v33;
  unint64_t v34;
  unsigned __int8 *v35;
  _BOOL4 v36;
  unsigned int v37;
  _DWORD *v38;
  unsigned int v39;
  char *v40;
  _DWORD *v41;
  unsigned int v42;
  char *v43;
  _DWORD *v44;
  unsigned int v45;
  char *v46;
  _DWORD *v47;
  unint64_t v48;
  int v49;
  unsigned __int8 *v50;
  _BOOL4 v51;
  unsigned int v52;
  _DWORD *v53;
  _DWORD *v54;
  unint64_t v55;
  char *v56;
  unsigned int v57;

  if (!a4)
    return -72;
  v5 = a4 - 8;
  if ((unint64_t)a4 < 8)
  {
    v6 = *a3;
    switch(a4)
    {
      case 2:
        goto LABEL_18;
      case 3:
        goto LABEL_17;
      case 4:
        goto LABEL_16;
      case 5:
        goto LABEL_15;
      case 6:
        goto LABEL_14;
      case 7:
        v6 |= (unint64_t)a3[6] << 48;
LABEL_14:
        v6 += (unint64_t)a3[5] << 40;
LABEL_15:
        v6 += (unint64_t)a3[4] << 32;
LABEL_16:
        v6 += (unint64_t)a3[3] << 24;
LABEL_17:
        v6 += (unint64_t)a3[2] << 16;
LABEL_18:
        v6 += (unint64_t)a3[1] << 8;
        break;
      default:
        break;
    }
    if (!a3[a4 - 1])
      return -20;
    v5 = 0;
    v7 = __clz(a3[a4 - 1]) - 8 * a4 + 41;
    v8 = &a1[a2];
    v9 = a5 + 1;
    v10 = *a5;
    v11 = HIWORD(*a5);
    if (a2 < 8)
      goto LABEL_51;
    goto LABEL_21;
  }
  if (!a3[a4 - 1])
    return -1;
  if ((unint64_t)a4 <= 0xFFFFFFFFFFFFFF88)
  {
    v6 = *(_QWORD *)&a3[v5];
    v7 = __clz(a3[a4 - 1]) - 23;
    v8 = &a1[a2];
    v9 = a5 + 1;
    v10 = *a5;
    v11 = HIWORD(*a5);
    if (a2 <= 7)
    {
      if (a4 >= 16)
      {
        LODWORD(v12) = v7 >> 3;
        v7 &= 7u;
      }
      else
      {
        if (a4 == 8)
        {
LABEL_51:
          if ((unint64_t)(v8 - a1) >= 2)
          {
            v48 = (unint64_t)(v8 - 2);
            v49 = -v11 & 0x3F;
            while (v7 <= 0x40)
            {
              if (v5 >= 8)
              {
                v51 = 0;
                v52 = v7 >> 3;
                v7 &= 7u;
              }
              else
              {
                if (!v5)
                  break;
                v50 = &a3[v5 - (v7 >> 3)];
                v51 = v50 < a3;
                v52 = v50 >= a3 ? v7 >> 3 : v5;
                v7 -= 8 * v52;
              }
              v5 -= v52;
              v6 = *(_QWORD *)&a3[v5];
              if ((unint64_t)a1 > v48 || v51)
                break;
              v53 = &v9[(unint64_t)(v6 << v7) >> v49];
              *(_WORD *)a1 = *(_WORD *)v53;
              v7 += *((unsigned __int8 *)v53 + 2);
              a1 += *((unsigned __int8 *)v53 + 3);
            }
            while ((unint64_t)a1 <= v48)
            {
              v54 = &v9[(unint64_t)(v6 << v7) >> v49];
              *(_WORD *)a1 = *(_WORD *)v54;
              v7 += *((unsigned __int8 *)v54 + 2);
              a1 += *((unsigned __int8 *)v54 + 3);
            }
          }
          if (a1 < v8)
          {
            v55 = (unint64_t)(v6 << v7) >> -(char)v11;
            v56 = (char *)&v9[v55];
            *a1 = *v56;
            if (v56[3] == 1)
            {
              v7 += v56[2];
            }
            else if (v7 <= 0x3F)
            {
              v57 = v7 + BYTE2(v9[v55]);
              if (v57 >= 0x40)
                v7 = 64;
              else
                v7 = v57;
            }
          }
          if (v7 == 64 && v5 == 0)
            return a2;
          else
            return -20;
        }
        v12 = v7 >> 3;
        if (&a3[v5 - v12] < a3)
          LODWORD(v12) = a4 - 8;
        v7 -= 8 * v12;
      }
      v5 -= v12;
      v6 = *(_QWORD *)&a3[v5];
      goto LABEL_51;
    }
LABEL_21:
    v13 = v10 & 0xFC0000;
    v14 = -v11 & 0x3F;
    v15 = &a1[a2];
    v16 = a5 + 1;
    if (v13 >= 0xC0000)
    {
      v34 = (unint64_t)(v15 - 7);
      do
      {
        if (v5 >= 8)
        {
          v36 = 0;
          v37 = v7 >> 3;
          v7 &= 7u;
        }
        else
        {
          if (!v5)
            goto LABEL_51;
          v35 = &a3[v5 - (v7 >> 3)];
          v36 = v35 < a3;
          if (v35 >= a3)
            v37 = v7 >> 3;
          else
            v37 = v5;
          v7 -= 8 * v37;
        }
        v5 -= v37;
        v6 = *(_QWORD *)&a3[v5];
        if ((unint64_t)a1 >= v34)
          break;
        if (v36)
          break;
        v38 = &v16[(unint64_t)(v6 << v7) >> v14];
        *(_WORD *)a1 = *(_WORD *)v38;
        v39 = v7 + *((unsigned __int8 *)v38 + 2);
        v40 = &a1[*((unsigned __int8 *)v38 + 3)];
        v41 = &v16[(unint64_t)(v6 << v39) >> v14];
        *(_WORD *)v40 = *(_WORD *)v41;
        v42 = v39 + *((unsigned __int8 *)v41 + 2);
        v43 = &v40[*((unsigned __int8 *)v41 + 3)];
        v44 = &v16[(unint64_t)(v6 << v42) >> v14];
        *(_WORD *)v43 = *(_WORD *)v44;
        v45 = v42 + *((unsigned __int8 *)v44 + 2);
        v46 = &v43[*((unsigned __int8 *)v44 + 3)];
        v47 = &v16[(unint64_t)(v6 << v45) >> v14];
        *(_WORD *)v46 = *(_WORD *)v47;
        v7 = v45 + *((unsigned __int8 *)v47 + 2);
        a1 = &v46[*((unsigned __int8 *)v47 + 3)];
      }
      while (v7 <= 0x40);
    }
    else
    {
      v17 = (unint64_t)(v15 - 9);
      do
      {
        if (v5 >= 8)
        {
          v19 = 0;
          v20 = v7 >> 3;
          v7 &= 7u;
        }
        else
        {
          if (!v5)
            goto LABEL_51;
          v18 = &a3[v5 - (v7 >> 3)];
          v19 = v18 < a3;
          if (v18 >= a3)
            v20 = v7 >> 3;
          else
            v20 = v5;
          v7 -= 8 * v20;
        }
        v5 -= v20;
        v6 = *(_QWORD *)&a3[v5];
        if ((unint64_t)a1 >= v17)
          break;
        if (v19)
          break;
        v21 = &v16[(unint64_t)(v6 << v7) >> v14];
        *(_WORD *)a1 = *(_WORD *)v21;
        v22 = v7 + *((unsigned __int8 *)v21 + 2);
        v23 = &a1[*((unsigned __int8 *)v21 + 3)];
        v24 = &v16[(unint64_t)(v6 << v22) >> v14];
        *(_WORD *)v23 = *(_WORD *)v24;
        v25 = v22 + *((unsigned __int8 *)v24 + 2);
        v26 = &v23[*((unsigned __int8 *)v24 + 3)];
        v27 = &v16[(unint64_t)(v6 << v25) >> v14];
        *(_WORD *)v26 = *(_WORD *)v27;
        v28 = v25 + *((unsigned __int8 *)v27 + 2);
        v29 = &v26[*((unsigned __int8 *)v27 + 3)];
        v30 = &v16[(unint64_t)(v6 << v28) >> v14];
        *(_WORD *)v29 = *(_WORD *)v30;
        v31 = v28 + *((unsigned __int8 *)v30 + 2);
        v32 = &v29[*((unsigned __int8 *)v30 + 3)];
        v33 = &v16[(unint64_t)(v6 << v31) >> v14];
        *(_WORD *)v32 = *(_WORD *)v33;
        v7 = v31 + *((unsigned __int8 *)v33 + 2);
        a1 = &v32[*((unsigned __int8 *)v33 + 3)];
      }
      while (v7 <= 0x40);
    }
    goto LABEL_51;
  }
  return a4;
}

BOOL sub_1D4B91D1C(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  unsigned int v4;

  if (a2 >= a1)
    v2 = 15;
  else
    v2 = (16 * a2 / a1);
  v3 = (_DWORD *)((char *)&unk_1D4BD7E4C + 16 * v2);
  v4 = *v3 + v3[1] * (a1 >> 8);
  LODWORD(v3) = v3[2] + v3[3] * (a1 >> 8);
  return v3 + (v3 >> 5) < v4;
}

unint64_t sub_1D4B91D68(int *a1, _BYTE *a2, uint64_t a3, char *a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t result;

  result = sub_1D4B91044(a1, a4, a5, a6, a7);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (a5 <= result)
      return -72;
    else
      return sub_1D4B91E04(a2, a3, (unsigned __int8 *)&a4[result], a5 - result, (uint64_t)a1);
  }
  return result;
}

uint64_t sub_1D4B91DF4(char *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, int *a5)
{
  if (*((_BYTE *)a5 + 1))
    return sub_1D4B918AC(a1, a2, a3, a4, a5);
  else
    return sub_1D4B91E04(a1, a2, a3, a4, (uint64_t)a5);
}

uint64_t sub_1D4B91E04(_BYTE *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  char *v17;
  _BOOL4 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned __int8 *v25;
  unsigned __int8 v26;
  int v27;
  uint64_t v28;
  unsigned __int8 *v29;

  if (!a4)
    return -72;
  v5 = (unint64_t)&a1[a2];
  v6 = a5 + 4;
  v7 = *(unsigned __int16 *)(a5 + 2);
  v8 = a4 - 8;
  if ((unint64_t)a4 < 8)
  {
    v10 = *a3;
    switch(a4)
    {
      case 2:
        goto LABEL_18;
      case 3:
        goto LABEL_17;
      case 4:
        goto LABEL_16;
      case 5:
        goto LABEL_15;
      case 6:
        goto LABEL_14;
      case 7:
        v10 |= (unint64_t)a3[6] << 48;
LABEL_14:
        v10 += (unint64_t)a3[5] << 40;
LABEL_15:
        v10 += (unint64_t)a3[4] << 32;
LABEL_16:
        v10 += (unint64_t)a3[3] << 24;
LABEL_17:
        v10 += (unint64_t)a3[2] << 16;
LABEL_18:
        v10 += (unint64_t)a3[1] << 8;
        break;
      default:
        break;
    }
    if (!a3[a4 - 1])
      return -20;
    v11 = __clz(a3[a4 - 1]) - 8 * a4 + 41;
    if (a2 < 4)
    {
      v9 = a3;
      goto LABEL_39;
    }
    v8 = 0;
    v9 = a3;
LABEL_22:
    v14 = -v7 & 0x3F;
    v15 = a1;
    while (1)
    {
      if (v8 >= 8)
      {
        v18 = 0;
        LODWORD(v16) = v11 >> 3;
        v11 &= 7u;
      }
      else
      {
        if (!v8)
          break;
        v16 = v11 >> 3;
        v17 = (char *)&v9[-v16];
        v18 = v17 < (char *)a3;
        if (v17 < (char *)a3)
          LODWORD(v16) = v8;
        v11 -= 8 * v16;
      }
      v8 -= v16;
      v9 = &a3[v8];
      v10 = *(_QWORD *)&a3[v8];
      if ((unint64_t)v15 >= v5 - 3 || v18)
        break;
      v19 = (unsigned __int8 *)(v6 + 2 * ((unint64_t)(v10 << v11) >> v14));
      v20 = v11 + *v19;
      *v15 = v19[1];
      v21 = (unsigned __int8 *)(v6 + 2 * ((unint64_t)(v10 << v20) >> v14));
      v22 = v20 + *v21;
      v15[1] = v21[1];
      v23 = (unsigned __int8 *)(v6 + 2 * ((unint64_t)(v10 << v22) >> v14));
      v24 = v22 + *v23;
      v15[2] = v23[1];
      v25 = (unsigned __int8 *)(v6 + 2 * ((unint64_t)(v10 << v24) >> v14));
      v26 = v25[1];
      v11 = v24 + *v25;
      v12 = v15 + 4;
      v15[3] = v26;
      v15 += 4;
      if (v11 > 0x40)
        goto LABEL_40;
    }
    v12 = v15;
    goto LABEL_40;
  }
  if (!a3[a4 - 1])
    return -1;
  if ((unint64_t)a4 <= 0xFFFFFFFFFFFFFF88)
  {
    v9 = &a3[v8];
    v10 = *(_QWORD *)&a3[v8];
    v11 = __clz(a3[a4 - 1]) - 23;
    if (a2 <= 3)
    {
      if (a4 >= 16)
      {
        LODWORD(v13) = v11 >> 3;
        v11 &= 7u;
      }
      else
      {
        v12 = a1;
        if (!v8)
        {
LABEL_40:
          if ((unint64_t)v12 < v5)
          {
            v27 = -v7 & 0x3F;
            v28 = &a1[a2] - v12;
            do
            {
              v29 = (unsigned __int8 *)(v6 + 2 * ((unint64_t)(v10 << v11) >> v27));
              v11 += *v29;
              *v12++ = v29[1];
              --v28;
            }
            while (v28);
          }
          if (v11 == 64 && v9 == a3)
            return a2;
          else
            return -20;
        }
        v13 = v11 >> 3;
        if (&v9[-v13] < a3)
          LODWORD(v13) = v8;
        v11 -= 8 * v13;
      }
      v9 -= v13;
      v10 = *(_QWORD *)v9;
LABEL_39:
      v12 = a1;
      goto LABEL_40;
    }
    goto LABEL_22;
  }
  return a4;
}

unint64_t sub_1D4B92060(uint64_t a1, unint64_t a2, unsigned __int16 *a3, unint64_t a4, unsigned int *a5, char a6)
{
  if (*((_BYTE *)a5 + 1))
    return sub_1D4B92070(a1, a2, a3, a4, a5, a6);
  else
    return sub_1D4B93CA4(a1, a2, a3, a4, (uint64_t)a5, a6);
}

unint64_t sub_1D4B92070(uint64_t a1, unint64_t a2, unsigned __int16 *a3, unint64_t a4, unsigned int *a5, char a6)
{
  char *v10;
  unint64_t result;
  _DWORD *v12;
  __int128 v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  unint64_t v19;
  int8x8_t v20;
  int v21;
  char *v22;
  uint64_t i;
  unint64_t v24;
  __int16 *v25;
  __int16 v26;
  char v27;
  uint64_t v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;
  __int16 *v32;
  __int16 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 *v38;
  __int16 v39;
  char v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  _BOOL4 v58;
  _DWORD *v59;
  int v60;
  char *v61;
  _DWORD *v62;
  int v63;
  char *v64;
  _DWORD *v65;
  int v66;
  char *v67;
  _DWORD *v68;
  int v69;
  char *v70;
  _DWORD *v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  _BOOL4 v76;
  _DWORD *v77;
  _DWORD *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  unint64_t v88;
  _DWORD *v89;
  unsigned int v90;
  unsigned int v91;
  unsigned __int8 *v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned __int8 *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  unsigned __int8 *v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unsigned __int8 *v106;
  uint64_t v107;
  unsigned int v108;
  int v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  _DWORD *v114;
  unsigned int v115;
  char *v116;
  _DWORD *v117;
  unsigned int v118;
  char *v119;
  _DWORD *v120;
  unsigned int v121;
  char *v122;
  _DWORD *v123;
  unsigned int v124;
  char *v125;
  _DWORD *v126;
  unsigned int v127;
  uint64_t v128;
  _DWORD *v129;
  unsigned int v130;
  char *v131;
  _DWORD *v132;
  unsigned int v133;
  char *v134;
  _DWORD *v135;
  unsigned int v136;
  char *v137;
  char *v138;
  _DWORD *v139;
  unsigned int v140;
  char *v141;
  _DWORD *v142;
  unsigned int v143;
  char *v144;
  _DWORD *v145;
  unsigned int v146;
  char *v147;
  _DWORD *v148;
  unsigned int v149;
  char *v150;
  _DWORD *v151;
  uint64_t v152;
  _DWORD *v153;
  int v154;
  uint64_t v155;
  _DWORD *v156;
  int v157;
  uint64_t v158;
  _DWORD *v159;
  int v160;
  int v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  BOOL v172;
  uint64_t v173;
  unsigned int v174;
  unsigned int v175;
  int v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  BOOL v181;
  _BOOL4 v182;
  uint64_t v183;
  _DWORD *v184;
  unsigned int v185;
  char *v186;
  _DWORD *v187;
  unsigned int v188;
  char *v189;
  _DWORD *v190;
  unsigned int v191;
  char *v192;
  _DWORD *v193;
  unsigned int v194;
  char *v195;
  _DWORD *v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  _BOOL4 v203;
  _DWORD *v204;
  unsigned int v205;
  char *v206;
  _DWORD *v207;
  unsigned int v208;
  char *v209;
  _DWORD *v210;
  unsigned int v211;
  char *v212;
  _DWORD *v213;
  unint64_t v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  _BOOL4 v220;
  _DWORD *v221;
  _DWORD *v222;
  int v223;
  unint64_t v224;
  char *v225;
  unsigned int v226;
  uint64_t v227;
  int v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  BOOL v232;
  _BOOL4 v233;
  _DWORD *v234;
  unsigned int v235;
  char *v236;
  _DWORD *v237;
  unsigned int v238;
  char *v239;
  _DWORD *v240;
  unsigned int v241;
  char *v242;
  _DWORD *v243;
  unsigned int v244;
  char *v245;
  _DWORD *v246;
  unsigned int v247;
  int v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  _BOOL4 v252;
  _DWORD *v253;
  unsigned int v254;
  char *v255;
  _DWORD *v256;
  unsigned int v257;
  char *v258;
  _DWORD *v259;
  unsigned int v260;
  char *v261;
  _DWORD *v262;
  unint64_t v263;
  int v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  _BOOL4 v268;
  _DWORD *v269;
  _DWORD *v270;
  unint64_t v271;
  char *v272;
  unint64_t v273;
  uint64_t v274;
  int v275;
  uint64_t v276;
  unint64_t v277;
  _BOOL4 v278;
  _DWORD *v279;
  unsigned int v280;
  char *v281;
  _DWORD *v282;
  unsigned int v283;
  char *v284;
  _DWORD *v285;
  unsigned int v286;
  char *v287;
  _DWORD *v288;
  unsigned int v289;
  char *v290;
  _DWORD *v291;
  unsigned int v292;
  unsigned int v293;
  int v294;
  uint64_t v295;
  unint64_t v296;
  _BOOL4 v297;
  _DWORD *v298;
  unsigned int v299;
  char *v300;
  _DWORD *v301;
  unsigned int v302;
  char *v303;
  _DWORD *v304;
  unsigned int v305;
  char *v306;
  _DWORD *v307;
  unint64_t v308;
  int v309;
  uint64_t v310;
  unint64_t v311;
  _BOOL4 v312;
  _DWORD *v313;
  _DWORD *v314;
  unint64_t v315;
  char *v316;
  unsigned int v317;
  int v318;
  uint64_t v319;
  unint64_t v320;
  _BOOL4 v321;
  _DWORD *v322;
  unsigned int v323;
  char *v324;
  _DWORD *v325;
  unsigned int v326;
  char *v327;
  _DWORD *v328;
  unsigned int v329;
  char *v330;
  _DWORD *v331;
  unsigned int v332;
  char *v333;
  _DWORD *v334;
  unsigned int v335;
  int v336;
  uint64_t v337;
  unint64_t v338;
  _BOOL4 v339;
  _DWORD *v340;
  unsigned int v341;
  char *v342;
  _DWORD *v343;
  unsigned int v344;
  char *v345;
  _DWORD *v346;
  unsigned int v347;
  char *v348;
  _DWORD *v349;
  unint64_t v350;
  unint64_t v351;
  int v352;
  uint64_t v353;
  _BOOL4 v354;
  _DWORD *v355;
  _DWORD *v356;
  uint64_t v357;
  unint64_t v358;
  char *v359;
  unsigned int v360;
  unsigned __int8 v368;
  unsigned int v369;
  char *v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  unint64_t v374;
  unsigned __int8 *v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  uint64_t v388;
  __int128 v389;
  uint64_t v390;
  uint64_t v391;
  _BYTE v392[32];
  __int128 v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  uint64_t v397;

  v10 = (char *)a1;
  v397 = *MEMORY[0x1E0C80C00];
  if ((a6 & 0x20) != 0)
    goto LABEL_69;
  v388 = 0;
  v386 = 0u;
  v387 = 0u;
  v384 = 0u;
  v385 = 0u;
  v382 = 0u;
  v383 = 0u;
  v380 = 0u;
  v381 = 0u;
  v379 = 0u;
  result = sub_1D4B95034(&v379, a1, a2, a3, a4, (uint64_t)a5);
  if (result - 1 > 0xFFFFFFFFFFFFFF87)
    goto LABEL_68;
  v12 = a5 + 1;
  v13 = v385;
  v395 = v383;
  v396 = v384;
  v393 = v379;
  v394 = v380;
  *(_OWORD *)v392 = v381;
  *(_OWORD *)&v392[16] = v382;
  v389 = *(_OWORD *)&v392[8];
  v14 = (char *)*((_QWORD *)&v382 + 1);
  v390 = *((_QWORD *)&v382 + 1);
  v391 = v386;
  while (1)
  {
    v15 = 0;
    v16 = ((unint64_t)(v393 - *((_QWORD *)&v13 + 1)) * (unsigned __int128)0x2492492492492493uLL) >> 64;
    v17 = (int8x16_t)vdupq_n_s64((v16 + ((unint64_t)(v393 - *((_QWORD *)&v13 + 1) - v16) >> 1)) >> 2);
    do
    {
      v18 = (int8x16_t)vsubq_s64(*(int64x2_t *)((char *)&v389 + v15), *(int64x2_t *)&v392[v15]);
      v18.i64[0] /= 0xAuLL;
      v18.i64[1] /= 0xAuLL;
      v17 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v18, (uint64x2_t)v17), v17, v18);
      v15 += 16;
    }
    while (v15 != 32);
    v19 = vextq_s8(v17, v17, 8uLL).u64[0];
    v20 = vbsl_s8((int8x8_t)vcgtd_u64(v19, v17.u64[0]), *(int8x8_t *)v17.i8, (int8x8_t)v19);
    if (*(_QWORD *)&v20 < 2uLL
      || *((_QWORD *)&v393 + 1) < (unint64_t)v393
      || (unint64_t)v394 < *((_QWORD *)&v393 + 1)
      || *((_QWORD *)&v394 + 1) < (unint64_t)v394)
    {
      break;
    }
    v21 = 0;
    v22 = &v14[5 * *(_QWORD *)&v20];
    while (1)
    {
      for (i = 0; i != 24; i += 8)
      {
        v24 = *(_QWORD *)((char *)&v395 + i);
        v25 = (__int16 *)(v13 + 4 * (v24 >> 53));
        v26 = *v25;
        v27 = *((_BYTE *)v25 + 2);
        v28 = *((unsigned __int8 *)v25 + 3);
        v29 = *(_WORD **)&v392[i];
        *(_QWORD *)((char *)&v395 + i) = v24 << v27;
        *v29 = v26;
        *(_QWORD *)&v392[i] = (char *)v29 + v28;
      }
      if (++v21 == 5)
      {
        v30 = 0;
        v31 = *((_QWORD *)&v396 + 1);
        v32 = (__int16 *)(v13 + 4 * (*((_QWORD *)&v396 + 1) >> 53));
        v33 = *v32;
        v34 = *((_BYTE *)v32 + 2);
        v35 = *((unsigned __int8 *)v32 + 3);
        v36 = *(_QWORD *)&v392[24];
        **(_WORD **)&v392[24] = v33;
        *((_QWORD *)&v396 + 1) = v31 << v34;
        v14 = (char *)(v36 + v35);
        do
        {
          v37 = *((_QWORD *)&v396 + 1);
          v38 = (__int16 *)(v13 + 4 * (*((_QWORD *)&v396 + 1) >> 53));
          v39 = *v38;
          v40 = *((_BYTE *)v38 + 2);
          v41 = *((unsigned __int8 *)v38 + 3);
          *(_WORD *)v14 = v39;
          *((_QWORD *)&v396 + 1) = v37 << v40;
          v14 += v41;
          LODWORD(v37) = __clz(__rbit64(*(_QWORD *)((char *)&v395 + v30)));
          LOBYTE(v41) = v37 & 7;
          v42 = (_QWORD *)(*(_QWORD *)((char *)&v393 + v30) - (v37 >> 3));
          *(_QWORD *)((char *)&v393 + v30) = v42;
          *(_QWORD *)((char *)&v395 + v30) = (*v42 | 1) << v41;
          v30 += 8;
        }
        while (v30 != 32);
        v21 = 0;
        *(_QWORD *)&v392[24] = v14;
        if (v14 >= v22)
          break;
      }
    }
  }
  v43 = 0;
  v383 = v395;
  v384 = v396;
  v381 = *(_OWORD *)v392;
  v382 = *(_OWORD *)&v392[16];
  v44 = (a2 + 3) >> 2;
  v45 = v10;
  v379 = v393;
  v380 = v394;
  do
  {
    v46 = (char *)(&v10[a2] - v45);
    v45 += v44;
    if (v44 > (unint64_t)v46)
      v45 = &v10[a2];
    v47 = (char *)&v379 + 8 * v43;
    v48 = v47 + 32;
    v49 = (char *)*((_QWORD *)v47 + 4);
    if (v49 > v45)
      return -20;
    v50 = *(uint64_t **)v47;
    if (*(_QWORD *)v47 < (unint64_t)(*((_QWORD *)v47 + 15) - 8))
      return -20;
    v51 = *v50;
    v52 = __clz(__rbit64(*((_QWORD *)&v383 + v43)));
    v53 = (uint64_t *)*((_QWORD *)&v386 + 1);
    v54 = *((_QWORD *)&v386 + 1) + 8;
    v55 = v45 - v49;
    if ((unint64_t)(v45 - v49) < 8)
    {
      if ((unint64_t)v50 >= v54)
      {
        v50 = (uint64_t *)((char *)v50 - (v52 >> 3));
        v73 = v52 & 7;
      }
      else
      {
        if (v50 == *((uint64_t **)&v386 + 1))
        {
          v73 = v52;
          goto LABEL_43;
        }
        v72 = v52 >> 3;
        if ((unint64_t)v50 - v72 >= *((_QWORD *)&v386 + 1))
          v72 = v72;
        else
          v72 = ((_DWORD)v50 - DWORD2(v386));
        v50 = (uint64_t *)((char *)v50 - v72);
        v73 = v52 - 8 * v72;
      }
      v51 = *v50;
LABEL_43:
      v56 = v49;
      goto LABEL_47;
    }
    v56 = v49;
    while ((unint64_t)v50 >= v54)
    {
      v58 = 0;
      LODWORD(v57) = v52 >> 3;
      LODWORD(v52) = v52 & 7;
LABEL_31:
      v50 = (uint64_t *)((char *)v50 - v57);
      v51 = *v50;
      if (v56 < v45 - 9 && !v58)
      {
        v59 = &v12[(unint64_t)(v51 << v52) >> 53];
        *(_WORD *)v56 = *(_WORD *)v59;
        v60 = v52 + *((unsigned __int8 *)v59 + 2);
        v61 = &v56[*((unsigned __int8 *)v59 + 3)];
        v62 = &v12[(unint64_t)(v51 << v60) >> 53];
        *(_WORD *)v61 = *(_WORD *)v62;
        v63 = v60 + *((unsigned __int8 *)v62 + 2);
        v64 = &v61[*((unsigned __int8 *)v62 + 3)];
        v65 = &v12[(unint64_t)(v51 << v63) >> 53];
        *(_WORD *)v64 = *(_WORD *)v65;
        v66 = v63 + *((unsigned __int8 *)v65 + 2);
        v67 = &v64[*((unsigned __int8 *)v65 + 3)];
        v68 = &v12[(unint64_t)(v51 << v66) >> 53];
        *(_WORD *)v67 = *(_WORD *)v68;
        v69 = v66 + *((unsigned __int8 *)v68 + 2);
        v70 = &v67[*((unsigned __int8 *)v68 + 3)];
        v71 = &v12[(unint64_t)(v51 << v69) >> 53];
        *(_WORD *)v70 = *(_WORD *)v71;
        LODWORD(v52) = v69 + *((unsigned __int8 *)v71 + 2);
        v56 = &v70[*((unsigned __int8 *)v71 + 3)];
        if (v52 <= 0x40)
          continue;
      }
      goto LABEL_46;
    }
    if (v50 != v53)
    {
      v57 = v52 >> 3;
      v58 = (uint64_t *)((char *)v50 - v57) < v53;
      if ((uint64_t *)((char *)v50 - v57) < v53)
        LODWORD(v57) = (_DWORD)v50 - (_DWORD)v53;
      LODWORD(v52) = v52 - 8 * v57;
      goto LABEL_31;
    }
    v50 = v53;
LABEL_46:
    v55 = v45 - v56;
    v73 = v52;
LABEL_47:
    if (v55 >= 2)
    {
      v74 = (unint64_t)(v45 - 2);
      while (v73 <= 0x40)
      {
        if ((unint64_t)v50 >= v54)
        {
          v76 = 0;
          LODWORD(v75) = v73 >> 3;
          v73 &= 7u;
        }
        else
        {
          if (v50 == v53)
            break;
          v75 = v73 >> 3;
          v76 = (uint64_t *)((char *)v50 - v75) < v53;
          if ((uint64_t *)((char *)v50 - v75) < v53)
            LODWORD(v75) = (_DWORD)v50 - (_DWORD)v53;
          v73 -= 8 * v75;
        }
        v50 = (uint64_t *)((char *)v50 - v75);
        v51 = *v50;
        if ((unint64_t)v56 > v74 || v76)
          break;
        v77 = &v12[(unint64_t)(v51 << v73) >> 53];
        *(_WORD *)v56 = *(_WORD *)v77;
        v73 += *((unsigned __int8 *)v77 + 2);
        v56 += *((unsigned __int8 *)v77 + 3);
      }
      while ((unint64_t)v56 <= v74)
      {
        v78 = &v12[(unint64_t)(v51 << v73) >> 53];
        *(_WORD *)v56 = *(_WORD *)v78;
        LOBYTE(v73) = v73 + *((_BYTE *)v78 + 2);
        v56 += *((unsigned __int8 *)v78 + 3);
      }
    }
    if (v56 < v45)
      *v56++ = *((_BYTE *)v12 + (((unint64_t)(v51 << v73) >> 51) & 0x1FFC));
    v79 = (char *)(*v48 + v56 - v49);
    *v48 = v79;
    if (v79 != v45)
      return -20;
    ++v43;
  }
  while (v43 != 4);
  result = a2;
LABEL_68:
  if (result)
    return result;
LABEL_69:
  if (a4 < 0xA)
    return -20;
  result = -20;
  if (a2 < 6)
    return result;
  v80 = *a3;
  v81 = a3[1];
  v82 = a3[2];
  v83 = v80 + 6;
  v84 = v80 + 6 + v81 + v82;
  if (a4 < v84)
    return result;
  v85 = &v10[a2];
  v86 = &v10[(a2 + 3) >> 2];
  v87 = &v86[(a2 + 3) >> 2];
  v88 = (unint64_t)&v87[(a2 + 3) >> 2];
  if (v88 > (unint64_t)&v10[a2])
    return result;
  if (!*a3)
    return -72;
  v91 = *a5;
  v89 = a5 + 1;
  v90 = v91;
  v92 = (unsigned __int8 *)(a3 + 3);
  if (v80 < 8)
  {
    v95 = *v92;
    switch(*a3)
    {
      case 2u:
        goto LABEL_86;
      case 3u:
        goto LABEL_85;
      case 4u:
        goto LABEL_84;
      case 5u:
        goto LABEL_83;
      case 6u:
        goto LABEL_82;
      case 7u:
        v95 |= (unint64_t)*((unsigned __int8 *)a3 + 12) << 48;
LABEL_82:
        v95 += (unint64_t)*((unsigned __int8 *)a3 + 11) << 40;
LABEL_83:
        v95 += (unint64_t)*((unsigned __int8 *)a3 + 10) << 32;
LABEL_84:
        v95 += (unint64_t)*((unsigned __int8 *)a3 + 9) << 24;
LABEL_85:
        v95 += (unint64_t)*((unsigned __int8 *)a3 + 8) << 16;
LABEL_86:
        v95 += (unint64_t)*((unsigned __int8 *)a3 + 7) << 8;
        break;
      default:
        break;
    }
    v97 = v92[v80 - 1];
    if (v97)
    {
      v96 = __clz(v97) - 8 * v80 + 41;
      v94 = 6;
      if (!a3[1])
        return -72;
      goto LABEL_89;
    }
    return -20;
  }
  v93 = v92[v80 - 1];
  if (!v93)
    return -1;
  v94 = v80 - 2;
  v95 = *(_QWORD *)((char *)a3 + v80 - 2);
  v96 = __clz(v93) - 23;
  if (!a3[1])
    return -72;
LABEL_89:
  v98 = (unsigned __int8 *)a3 + v83;
  if (v81 >= 8)
  {
    if (v98[v81 - 1])
    {
      v99 = v81 - 8;
      v100 = *(_QWORD *)&v98[v81 - 8];
      v101 = __clz(v98[v81 - 1]) - 23;
      goto LABEL_101;
    }
    return -1;
  }
  v100 = *v98;
  switch(a3[1])
  {
    case 2u:
      goto LABEL_98;
    case 3u:
      goto LABEL_97;
    case 4u:
      goto LABEL_96;
    case 5u:
      goto LABEL_95;
    case 6u:
      goto LABEL_94;
    case 7u:
      v100 |= (unint64_t)v98[6] << 48;
LABEL_94:
      v100 += (unint64_t)v98[5] << 40;
LABEL_95:
      v100 += (unint64_t)v98[4] << 32;
LABEL_96:
      v100 += (unint64_t)v98[3] << 24;
LABEL_97:
      v100 += (unint64_t)v98[2] << 16;
LABEL_98:
      v100 += (unint64_t)v98[1] << 8;
      break;
    default:
      break;
  }
  if (!v98[v81 - 1])
    return -20;
  v99 = 0;
  v101 = __clz(v98[v81 - 1]) - 8 * v81 + 41;
LABEL_101:
  if (!a3[2])
    return -72;
  v102 = &v98[v81];
  if (v82 < 8)
  {
    v104 = *v102;
    switch(a3[2])
    {
      case 2u:
        goto LABEL_111;
      case 3u:
        goto LABEL_110;
      case 4u:
        goto LABEL_109;
      case 5u:
        goto LABEL_108;
      case 6u:
        goto LABEL_107;
      case 7u:
        v104 |= (unint64_t)v102[6] << 48;
LABEL_107:
        v104 += (unint64_t)v102[5] << 40;
LABEL_108:
        v104 += (unint64_t)v102[4] << 32;
LABEL_109:
        v104 += (unint64_t)v102[3] << 24;
LABEL_110:
        v104 += (unint64_t)v102[2] << 16;
LABEL_111:
        v104 += (unint64_t)v102[1] << 8;
        break;
      default:
        break;
    }
    if (v102[v82 - 1])
    {
      v103 = 0;
      v105 = __clz(v102[v82 - 1]) - 8 * v82 + 41;
      goto LABEL_114;
    }
    return -20;
  }
  if (!v102[v82 - 1])
    return -1;
  v103 = v82 - 8;
  v104 = *(_QWORD *)&v102[v82 - 8];
  v105 = __clz(v102[v82 - 1]) - 23;
LABEL_114:
  result = a4 - v84;
  if (a4 == v84)
    return -72;
  v106 = &v102[v82];
  v378 = result - 8;
  if (result < 8)
  {
    v107 = *v106;
    switch(result)
    {
      case 2uLL:
        goto LABEL_127;
      case 3uLL:
        goto LABEL_126;
      case 4uLL:
        goto LABEL_125;
      case 5uLL:
        goto LABEL_124;
      case 6uLL:
        goto LABEL_123;
      case 7uLL:
        v107 |= (unint64_t)v106[6] << 48;
LABEL_123:
        v107 += (unint64_t)v106[5] << 40;
LABEL_124:
        v107 += (unint64_t)v106[4] << 32;
LABEL_125:
        v107 += (unint64_t)v106[3] << 24;
LABEL_126:
        v107 += (unint64_t)v106[2] << 16;
LABEL_127:
        v107 += (unint64_t)v106[1] << 8;
        break;
      default:
        break;
    }
    if (v106[result - 1])
    {
      v377 = v104;
      v378 = 0;
      v375 = &v98[v81];
      v108 = __clz(v106[result - 1]) - 8 * result + 41;
      goto LABEL_130;
    }
    return -20;
  }
  if (!v106[result - 1])
    return -1;
  v377 = v104;
  v375 = &v98[v81];
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    v107 = *(_QWORD *)&v106[v378];
    v108 = __clz(v106[result - 1]) - 23;
LABEL_130:
    v371 = (unint64_t)&v87[(a2 + 3) >> 2];
    v372 = (unint64_t)&v86[(a2 + 3) >> 2];
    v376 = (unint64_t)a3 + v83;
    v370 = &v10[a2];
    v373 = (unint64_t)(v85 - 7);
    v374 = (unint64_t)&v102[v82];
    v368 = BYTE2(v90);
    v369 = HIWORD(v90);
    if ((unint64_t)&v85[-v88] < 8 || v88 >= (unint64_t)(v85 - 7))
    {
      v112 = &v10[(a2 + 3) >> 2];
      v111 = &v86[(a2 + 3) >> 2];
      v110 = &v87[(a2 + 3) >> 2];
      v113 = v99;
    }
    else
    {
      v109 = -HIWORD(v90) & 0x3F;
      v110 = &v87[(a2 + 3) >> 2];
      v111 = &v86[(a2 + 3) >> 2];
      v112 = &v10[(a2 + 3) >> 2];
      v113 = v99;
      do
      {
        v114 = &v89[(unint64_t)(v95 << v96) >> v109];
        *(_WORD *)v10 = *(_WORD *)v114;
        v115 = v96 + *((unsigned __int8 *)v114 + 2);
        v116 = &v10[*((unsigned __int8 *)v114 + 3)];
        v117 = &v89[(unint64_t)(v100 << v101) >> v109];
        *(_WORD *)v112 = *(_WORD *)v117;
        v118 = v101 + *((unsigned __int8 *)v117 + 2);
        v119 = &v112[*((unsigned __int8 *)v117 + 3)];
        v120 = &v89[(unint64_t)(v377 << v105) >> v109];
        *(_WORD *)v111 = *(_WORD *)v120;
        v121 = v105 + *((unsigned __int8 *)v120 + 2);
        v122 = &v111[*((unsigned __int8 *)v120 + 3)];
        v123 = &v89[(unint64_t)(v107 << v108) >> v109];
        *(_WORD *)v110 = *(_WORD *)v123;
        v124 = v108 + *((unsigned __int8 *)v123 + 2);
        v125 = &v110[*((unsigned __int8 *)v123 + 3)];
        v126 = &v89[(unint64_t)(v95 << v115) >> v109];
        *(_WORD *)v116 = *(_WORD *)v126;
        v127 = v115 + *((unsigned __int8 *)v126 + 2);
        v128 = *((unsigned __int8 *)v126 + 3);
        v129 = &v89[(unint64_t)(v100 << v118) >> v109];
        *(_WORD *)v119 = *(_WORD *)v129;
        v130 = v118 + *((unsigned __int8 *)v129 + 2);
        v131 = &v119[*((unsigned __int8 *)v129 + 3)];
        v132 = &v89[(unint64_t)(v377 << v121) >> v109];
        *(_WORD *)v122 = *(_WORD *)v132;
        v133 = v121 + *((unsigned __int8 *)v132 + 2);
        v134 = &v122[*((unsigned __int8 *)v132 + 3)];
        v135 = &v89[(unint64_t)(v107 << v124) >> v109];
        *(_WORD *)v125 = *(_WORD *)v135;
        v136 = v124 + *((unsigned __int8 *)v135 + 2);
        v137 = &v125[*((unsigned __int8 *)v135 + 3)];
        v138 = &v116[v128];
        v139 = &v89[(unint64_t)(v95 << v127) >> v109];
        *(_WORD *)v138 = *(_WORD *)v139;
        v140 = v127 + *((unsigned __int8 *)v139 + 2);
        v141 = &v138[*((unsigned __int8 *)v139 + 3)];
        v142 = &v89[(unint64_t)(v100 << v130) >> v109];
        *(_WORD *)v131 = *(_WORD *)v142;
        v143 = v130 + *((unsigned __int8 *)v142 + 2);
        v144 = &v131[*((unsigned __int8 *)v142 + 3)];
        v145 = &v89[(unint64_t)(v377 << v133) >> v109];
        *(_WORD *)v134 = *(_WORD *)v145;
        v146 = v133 + *((unsigned __int8 *)v145 + 2);
        v147 = &v134[*((unsigned __int8 *)v145 + 3)];
        v148 = &v89[(unint64_t)(v107 << v136) >> v109];
        *(_WORD *)v137 = *(_WORD *)v148;
        v149 = v136 + *((unsigned __int8 *)v148 + 2);
        v150 = &v137[*((unsigned __int8 *)v148 + 3)];
        v151 = &v89[(unint64_t)(v95 << v140) >> v109];
        *(_WORD *)v141 = *(_WORD *)v151;
        v96 = v140 + *((unsigned __int8 *)v151 + 2);
        v152 = *((unsigned __int8 *)v151 + 3);
        v153 = &v89[(unint64_t)(v100 << v143) >> v109];
        *(_WORD *)v144 = *(_WORD *)v153;
        v154 = *((unsigned __int8 *)v153 + 2);
        v155 = *((unsigned __int8 *)v153 + 3);
        v156 = &v89[(unint64_t)(v377 << v146) >> v109];
        *(_WORD *)v147 = *(_WORD *)v156;
        v157 = *((unsigned __int8 *)v156 + 2);
        v158 = *((unsigned __int8 *)v156 + 3);
        v159 = &v89[(unint64_t)(v107 << v149) >> v109];
        *(_WORD *)v150 = *(_WORD *)v159;
        if (v94 < 14)
        {
          v160 = 3;
        }
        else
        {
          v160 = 0;
          v94 -= v96 >> 3;
          v96 &= 7u;
          v95 = *(_QWORD *)((char *)a3 + v94);
        }
        v101 = v143 + v154;
        v161 = *((unsigned __int8 *)v159 + 2);
        v162 = *((unsigned __int8 *)v159 + 3);
        if (v113 < 8)
        {
          v163 = 3;
        }
        else
        {
          v163 = 0;
          v113 -= v101 >> 3;
          v101 &= 7u;
          v100 = *(_QWORD *)&v98[v113];
        }
        v164 = v107;
        v105 = v146 + v157;
        if (v103 < 8)
        {
          v168 = v103;
          v165 = v113;
          v166 = 3;
        }
        else
        {
          v165 = v113;
          v166 = 0;
          v167 = v103 - (v105 >> 3);
          v105 &= 7u;
          v168 = v167;
          v377 = *(_QWORD *)&v375[v167];
        }
        v108 = v149 + v161;
        if (v378 < 8)
        {
          v169 = 3;
        }
        else
        {
          v169 = 0;
          v170 = v378 - (v108 >> 3);
          v108 &= 7u;
          v378 = v170;
          v164 = *(_QWORD *)(v374 + v170);
        }
        v10 = &v141[v152];
        v112 = &v144[v155];
        v111 = &v147[v158];
        v110 = &v150[v162];
        v171 = v163 | v160 | v166 | v169;
        v172 = (unint64_t)&v150[v162] < v373 && v171 == 0;
        v113 = v165;
        v103 = v168;
        v107 = v164;
        v98 = (unsigned __int8 *)v376;
      }
      while (v172);
    }
    result = -20;
    if (v10 > v86)
      return result;
    if ((unint64_t)v112 > v372)
      return result;
    v173 = v113;
    if ((unint64_t)v111 > v371)
      return result;
    if ((unint64_t)(v86 - v10) < 8)
    {
      v174 = v368;
      v175 = v369;
      if (v96 > 0x40)
        goto LABEL_190;
      if (v94 >= 14)
      {
        LODWORD(v197) = v96 >> 3;
        v96 &= 7u;
      }
      else
      {
        if (v94 == 6)
          goto LABEL_191;
        v197 = v96 >> 3;
        if (v94 - v197 < 6)
          LODWORD(v197) = v94 - 6;
        v96 -= 8 * v197;
      }
      v94 -= v197;
      v95 = *(_QWORD *)((char *)a3 + v94);
    }
    else
    {
      v174 = v368;
      v175 = v369;
      if (v368 >= 0xCu)
      {
        if (v96 <= 0x40)
        {
          v198 = -v369 & 0x3F;
          while (1)
          {
            if (v94 >= 14)
            {
              v203 = 0;
              LODWORD(v199) = v96 >> 3;
              v96 &= 7u;
            }
            else
            {
              if (v94 == 6)
                break;
              v199 = v96 >> 3;
              v200 = v94 - v199;
              v201 = v94;
              v202 = v94 - 6;
              v181 = v200 < 6;
              v203 = v200 < 6;
              if (v181)
                LODWORD(v199) = v202;
              v94 = v201;
              v96 -= 8 * v199;
            }
            v94 -= v199;
            v95 = *(_QWORD *)((char *)a3 + v94);
            if (v10 >= v86 - 7)
              break;
            v183 = v94;
            if (v203)
            {
LABEL_189:
              v94 = v183;
              break;
            }
            v204 = &v89[(unint64_t)(v95 << v96) >> v198];
            *(_WORD *)v10 = *(_WORD *)v204;
            v205 = v96 + *((unsigned __int8 *)v204 + 2);
            v206 = &v10[*((unsigned __int8 *)v204 + 3)];
            v207 = &v89[(unint64_t)(v95 << v205) >> v198];
            *(_WORD *)v206 = *(_WORD *)v207;
            v208 = v205 + *((unsigned __int8 *)v207 + 2);
            v209 = &v206[*((unsigned __int8 *)v207 + 3)];
            v210 = &v89[(unint64_t)(v95 << v208) >> v198];
            *(_WORD *)v209 = *(_WORD *)v210;
            v211 = v208 + *((unsigned __int8 *)v210 + 2);
            v212 = &v209[*((unsigned __int8 *)v210 + 3)];
            v213 = &v89[(unint64_t)(v95 << v211) >> v198];
            *(_WORD *)v212 = *(_WORD *)v213;
            v96 = v211 + *((unsigned __int8 *)v213 + 2);
            v10 = &v212[*((unsigned __int8 *)v213 + 3)];
            v94 = v183;
            v113 = v173;
            if (v96 > 0x40)
              goto LABEL_191;
          }
        }
      }
      else if (v96 <= 0x40)
      {
        v176 = -v369 & 0x3F;
        while (1)
        {
          if (v94 >= 14)
          {
            v182 = 0;
            LODWORD(v177) = v96 >> 3;
            v96 &= 7u;
          }
          else
          {
            if (v94 == 6)
              break;
            v177 = v96 >> 3;
            v178 = v94 - v177;
            v179 = v94;
            v180 = v94 - 6;
            v181 = v178 < 6;
            v182 = v178 < 6;
            if (v181)
              LODWORD(v177) = v180;
            v94 = v179;
            v96 -= 8 * v177;
          }
          v94 -= v177;
          v95 = *(_QWORD *)((char *)a3 + v94);
          if (v10 >= v86 - 9)
            break;
          v183 = v94;
          if (v182)
            goto LABEL_189;
          v184 = &v89[(unint64_t)(v95 << v96) >> v176];
          *(_WORD *)v10 = *(_WORD *)v184;
          v185 = v96 + *((unsigned __int8 *)v184 + 2);
          v186 = &v10[*((unsigned __int8 *)v184 + 3)];
          v187 = &v89[(unint64_t)(v95 << v185) >> v176];
          *(_WORD *)v186 = *(_WORD *)v187;
          v188 = v185 + *((unsigned __int8 *)v187 + 2);
          v189 = &v186[*((unsigned __int8 *)v187 + 3)];
          v190 = &v89[(unint64_t)(v95 << v188) >> v176];
          *(_WORD *)v189 = *(_WORD *)v190;
          v191 = v188 + *((unsigned __int8 *)v190 + 2);
          v192 = &v189[*((unsigned __int8 *)v190 + 3)];
          v193 = &v89[(unint64_t)(v95 << v191) >> v176];
          *(_WORD *)v192 = *(_WORD *)v193;
          v194 = v191 + *((unsigned __int8 *)v193 + 2);
          v195 = &v192[*((unsigned __int8 *)v193 + 3)];
          v196 = &v89[(unint64_t)(v95 << v194) >> v176];
          *(_WORD *)v195 = *(_WORD *)v196;
          v96 = v194 + *((unsigned __int8 *)v196 + 2);
          v10 = &v195[*((unsigned __int8 *)v196 + 3)];
          v94 = v183;
          v113 = v173;
          if (v96 > 0x40)
            goto LABEL_191;
        }
      }
LABEL_190:
      v113 = v173;
    }
LABEL_191:
    if ((unint64_t)(v86 - v10) >= 2)
    {
      v214 = (unint64_t)(v86 - 2);
      v215 = -v175 & 0x3F;
      while (v96 <= 0x40)
      {
        if (v94 >= 14)
        {
          v220 = 0;
          LODWORD(v216) = v96 >> 3;
          v96 &= 7u;
        }
        else
        {
          if (v94 == 6)
            break;
          v216 = v96 >> 3;
          v217 = v94 - v216;
          v218 = v94;
          v219 = v94 - 6;
          v181 = v217 < 6;
          v220 = v217 < 6;
          if (v181)
            LODWORD(v216) = v219;
          v94 = v218;
          v113 = v173;
          v96 -= 8 * v216;
        }
        v94 -= v216;
        v95 = *(_QWORD *)((char *)a3 + v94);
        if ((unint64_t)v10 > v214 || v220)
          break;
        v221 = &v89[(unint64_t)(v95 << v96) >> v215];
        *(_WORD *)v10 = *(_WORD *)v221;
        v96 += *((unsigned __int8 *)v221 + 2);
        v10 += *((unsigned __int8 *)v221 + 3);
      }
      while ((unint64_t)v10 <= v214)
      {
        v222 = &v89[(unint64_t)(v95 << v96) >> v215];
        *(_WORD *)v10 = *(_WORD *)v222;
        v96 += *((unsigned __int8 *)v222 + 2);
        v10 += *((unsigned __int8 *)v222 + 3);
      }
    }
    v223 = v96;
    if (v10 < v86)
    {
      v224 = (unint64_t)(v95 << v96) >> -(char)v175;
      v225 = (char *)&v89[v224];
      *v10 = *v225;
      if (v225[3] == 1)
      {
        v223 = v96 + v225[2];
      }
      else if (v96 <= 0x3F)
      {
        v226 = v96 + BYTE2(v89[v224]);
        if (v226 >= 0x40)
          v223 = 64;
        else
          v223 = v226;
      }
    }
    v227 = v94;
    if (v372 - (unint64_t)v112 < 8)
    {
      if (v101 > 0x40)
        goto LABEL_247;
      if (v113 >= 8)
      {
        v247 = v101 >> 3;
        v101 &= 7u;
      }
      else
      {
        if (!v113)
          goto LABEL_247;
        if (v376 + v113 - (v101 >> 3) >= v376)
          v247 = v101 >> 3;
        else
          v247 = v113;
        v101 -= 8 * v247;
      }
      v113 -= v247;
      v100 = *(_QWORD *)(v376 + v113);
    }
    else if (v174 >= 0xC)
    {
      if (v101 <= 0x40)
      {
        v248 = -v175 & 0x3F;
        do
        {
          if (v113 >= 8)
          {
            v252 = 0;
            LODWORD(v250) = v101 >> 3;
            v101 &= 7u;
            v249 = v376;
          }
          else
          {
            if (!v113)
              break;
            v249 = v376;
            v250 = v101 >> 3;
            v251 = v376 + v113 - v250;
            v232 = v251 >= v376;
            v252 = v251 < v376;
            if (!v232)
              LODWORD(v250) = v113;
            v101 -= 8 * v250;
          }
          v113 -= v250;
          v100 = *(_QWORD *)(v249 + v113);
          if ((unint64_t)v112 >= v372 - 7)
            break;
          if (v252)
            break;
          v253 = &v89[(unint64_t)(v100 << v101) >> v248];
          *(_WORD *)v112 = *(_WORD *)v253;
          v254 = v101 + *((unsigned __int8 *)v253 + 2);
          v255 = &v112[*((unsigned __int8 *)v253 + 3)];
          v256 = &v89[(unint64_t)(v100 << v254) >> v248];
          *(_WORD *)v255 = *(_WORD *)v256;
          v257 = v254 + *((unsigned __int8 *)v256 + 2);
          v258 = &v255[*((unsigned __int8 *)v256 + 3)];
          v259 = &v89[(unint64_t)(v100 << v257) >> v248];
          *(_WORD *)v258 = *(_WORD *)v259;
          v260 = v257 + *((unsigned __int8 *)v259 + 2);
          v261 = &v258[*((unsigned __int8 *)v259 + 3)];
          v262 = &v89[(unint64_t)(v100 << v260) >> v248];
          *(_WORD *)v261 = *(_WORD *)v262;
          v101 = v260 + *((unsigned __int8 *)v262 + 2);
          v112 = &v261[*((unsigned __int8 *)v262 + 3)];
        }
        while (v101 <= 0x40);
      }
    }
    else if (v101 <= 0x40)
    {
      v228 = -v175 & 0x3F;
      do
      {
        if (v113 >= 8)
        {
          v233 = 0;
          LODWORD(v230) = v101 >> 3;
          v101 &= 7u;
          v229 = v376;
        }
        else
        {
          if (!v113)
            break;
          v229 = v376;
          v230 = v101 >> 3;
          v231 = v376 + v113 - v230;
          v232 = v231 >= v376;
          v233 = v231 < v376;
          if (!v232)
            LODWORD(v230) = v113;
          v101 -= 8 * v230;
        }
        v113 -= v230;
        v100 = *(_QWORD *)(v229 + v113);
        if ((unint64_t)v112 >= v372 - 9)
          break;
        if (v233)
          break;
        v234 = &v89[(unint64_t)(v100 << v101) >> v228];
        *(_WORD *)v112 = *(_WORD *)v234;
        v235 = v101 + *((unsigned __int8 *)v234 + 2);
        v236 = &v112[*((unsigned __int8 *)v234 + 3)];
        v237 = &v89[(unint64_t)(v100 << v235) >> v228];
        *(_WORD *)v236 = *(_WORD *)v237;
        v238 = v235 + *((unsigned __int8 *)v237 + 2);
        v239 = &v236[*((unsigned __int8 *)v237 + 3)];
        v240 = &v89[(unint64_t)(v100 << v238) >> v228];
        *(_WORD *)v239 = *(_WORD *)v240;
        v241 = v238 + *((unsigned __int8 *)v240 + 2);
        v242 = &v239[*((unsigned __int8 *)v240 + 3)];
        v243 = &v89[(unint64_t)(v100 << v241) >> v228];
        *(_WORD *)v242 = *(_WORD *)v243;
        v244 = v241 + *((unsigned __int8 *)v243 + 2);
        v245 = &v242[*((unsigned __int8 *)v243 + 3)];
        v246 = &v89[(unint64_t)(v100 << v244) >> v228];
        *(_WORD *)v245 = *(_WORD *)v246;
        v101 = v244 + *((unsigned __int8 *)v246 + 2);
        v112 = &v245[*((unsigned __int8 *)v246 + 3)];
      }
      while (v101 <= 0x40);
    }
LABEL_247:
    if (v372 - (unint64_t)v112 >= 2)
    {
      v263 = v372 - 2;
      v264 = -v175 & 0x3F;
      while (v101 <= 0x40)
      {
        if (v113 >= 8)
        {
          v268 = 0;
          LODWORD(v266) = v101 >> 3;
          v101 &= 7u;
          v265 = v376;
        }
        else
        {
          if (!v113)
            break;
          v265 = v376;
          v266 = v101 >> 3;
          v267 = v376 + v113 - v266;
          v232 = v267 >= v376;
          v268 = v267 < v376;
          if (!v232)
            LODWORD(v266) = v113;
          v101 -= 8 * v266;
        }
        v113 -= v266;
        v100 = *(_QWORD *)(v265 + v113);
        if ((unint64_t)v112 > v263 || v268)
          break;
        v269 = &v89[(unint64_t)(v100 << v101) >> v264];
        *(_WORD *)v112 = *(_WORD *)v269;
        v101 += *((unsigned __int8 *)v269 + 2);
        v112 += *((unsigned __int8 *)v269 + 3);
      }
      while ((unint64_t)v112 <= v263)
      {
        v270 = &v89[(unint64_t)(v100 << v101) >> v264];
        *(_WORD *)v112 = *(_WORD *)v270;
        v101 += *((unsigned __int8 *)v270 + 2);
        v112 += *((unsigned __int8 *)v270 + 3);
      }
    }
    if ((unint64_t)v112 >= v372)
    {
LABEL_264:
      v273 = (unint64_t)v375;
      v274 = v377;
    }
    else
    {
      v271 = (unint64_t)(v100 << v101) >> -(char)v175;
      v272 = (char *)&v89[v271];
      *v112 = *v272;
      if (v272[3] == 1)
      {
        v101 += v272[2];
        goto LABEL_264;
      }
      v273 = (unint64_t)v375;
      v274 = v377;
      if (v101 <= 0x3F)
      {
        v293 = v101 + BYTE2(v89[v271]);
        if (v293 >= 0x40)
          v101 = 64;
        else
          v101 = v293;
      }
    }
    if (v371 - (unint64_t)v111 < 8)
    {
      if (v105 > 0x40)
        goto LABEL_304;
      if (v103 >= 8)
      {
        v292 = v105 >> 3;
        v105 &= 7u;
      }
      else
      {
        if (!v103)
          goto LABEL_304;
        if (v273 + v103 - (v105 >> 3) >= v273)
          v292 = v105 >> 3;
        else
          v292 = v103;
        v105 -= 8 * v292;
      }
      v103 -= v292;
      v274 = *(_QWORD *)(v273 + v103);
    }
    else if (v174 >= 0xC)
    {
      if (v105 <= 0x40)
      {
        v294 = -v175 & 0x3F;
        do
        {
          if (v103 >= 8)
          {
            v297 = 0;
            LODWORD(v295) = v105 >> 3;
            v105 &= 7u;
          }
          else
          {
            if (!v103)
              break;
            v295 = v105 >> 3;
            v296 = v273 + v103 - v295;
            v232 = v296 >= v273;
            v297 = v296 < v273;
            if (!v232)
              LODWORD(v295) = v103;
            v105 -= 8 * v295;
          }
          v103 -= v295;
          v274 = *(_QWORD *)(v273 + v103);
          if ((unint64_t)v111 >= v371 - 7)
            break;
          if (v297)
            break;
          v298 = &v89[(unint64_t)(v274 << v105) >> v294];
          *(_WORD *)v111 = *(_WORD *)v298;
          v299 = v105 + *((unsigned __int8 *)v298 + 2);
          v300 = &v111[*((unsigned __int8 *)v298 + 3)];
          v301 = &v89[(unint64_t)(v274 << v299) >> v294];
          *(_WORD *)v300 = *(_WORD *)v301;
          v302 = v299 + *((unsigned __int8 *)v301 + 2);
          v303 = &v300[*((unsigned __int8 *)v301 + 3)];
          v304 = &v89[(unint64_t)(v274 << v302) >> v294];
          *(_WORD *)v303 = *(_WORD *)v304;
          v305 = v302 + *((unsigned __int8 *)v304 + 2);
          v306 = &v303[*((unsigned __int8 *)v304 + 3)];
          v307 = &v89[(unint64_t)(v274 << v305) >> v294];
          *(_WORD *)v306 = *(_WORD *)v307;
          v105 = v305 + *((unsigned __int8 *)v307 + 2);
          v111 = &v306[*((unsigned __int8 *)v307 + 3)];
        }
        while (v105 <= 0x40);
      }
    }
    else if (v105 <= 0x40)
    {
      v275 = -v175 & 0x3F;
      do
      {
        if (v103 >= 8)
        {
          v278 = 0;
          LODWORD(v276) = v105 >> 3;
          v105 &= 7u;
        }
        else
        {
          if (!v103)
            break;
          v276 = v105 >> 3;
          v277 = v273 + v103 - v276;
          v232 = v277 >= v273;
          v278 = v277 < v273;
          if (!v232)
            LODWORD(v276) = v103;
          v105 -= 8 * v276;
        }
        v103 -= v276;
        v274 = *(_QWORD *)(v273 + v103);
        if ((unint64_t)v111 >= v371 - 9)
          break;
        if (v278)
          break;
        v279 = &v89[(unint64_t)(v274 << v105) >> v275];
        *(_WORD *)v111 = *(_WORD *)v279;
        v280 = v105 + *((unsigned __int8 *)v279 + 2);
        v281 = &v111[*((unsigned __int8 *)v279 + 3)];
        v282 = &v89[(unint64_t)(v274 << v280) >> v275];
        *(_WORD *)v281 = *(_WORD *)v282;
        v283 = v280 + *((unsigned __int8 *)v282 + 2);
        v284 = &v281[*((unsigned __int8 *)v282 + 3)];
        v285 = &v89[(unint64_t)(v274 << v283) >> v275];
        *(_WORD *)v284 = *(_WORD *)v285;
        v286 = v283 + *((unsigned __int8 *)v285 + 2);
        v287 = &v284[*((unsigned __int8 *)v285 + 3)];
        v288 = &v89[(unint64_t)(v274 << v286) >> v275];
        *(_WORD *)v287 = *(_WORD *)v288;
        v289 = v286 + *((unsigned __int8 *)v288 + 2);
        v290 = &v287[*((unsigned __int8 *)v288 + 3)];
        v291 = &v89[(unint64_t)(v274 << v289) >> v275];
        *(_WORD *)v290 = *(_WORD *)v291;
        v105 = v289 + *((unsigned __int8 *)v291 + 2);
        v111 = &v290[*((unsigned __int8 *)v291 + 3)];
      }
      while (v105 <= 0x40);
    }
LABEL_304:
    if (v371 - (unint64_t)v111 >= 2)
    {
      v308 = v371 - 2;
      v309 = -v175 & 0x3F;
      while (v105 <= 0x40)
      {
        if (v103 >= 8)
        {
          v312 = 0;
          LODWORD(v310) = v105 >> 3;
          v105 &= 7u;
        }
        else
        {
          if (!v103)
            break;
          v310 = v105 >> 3;
          v311 = v273 + v103 - v310;
          v232 = v311 >= v273;
          v312 = v311 < v273;
          if (!v232)
            LODWORD(v310) = v103;
          v105 -= 8 * v310;
        }
        v103 -= v310;
        v274 = *(_QWORD *)(v273 + v103);
        if ((unint64_t)v111 > v308 || v312)
          break;
        v313 = &v89[(unint64_t)(v274 << v105) >> v309];
        *(_WORD *)v111 = *(_WORD *)v313;
        v105 += *((unsigned __int8 *)v313 + 2);
        v111 += *((unsigned __int8 *)v313 + 3);
      }
      while ((unint64_t)v111 <= v308)
      {
        v314 = &v89[(unint64_t)(v274 << v105) >> v309];
        *(_WORD *)v111 = *(_WORD *)v314;
        v105 += *((unsigned __int8 *)v314 + 2);
        v111 += *((unsigned __int8 *)v314 + 3);
      }
    }
    if ((unint64_t)v111 < v371)
    {
      v315 = (unint64_t)(v274 << v105) >> -(char)v175;
      v316 = (char *)&v89[v315];
      *v111 = *v316;
      if (v316[3] == 1)
      {
        v105 += v316[2];
      }
      else if (v105 <= 0x3F)
      {
        v317 = v105 + BYTE2(v89[v315]);
        if (v317 >= 0x40)
          v105 = 64;
        else
          v105 = v317;
      }
    }
    if ((unint64_t)(v370 - v110) >= 8)
    {
      if (v174 >= 0xC)
      {
        if (v108 <= 0x40)
        {
          v336 = -v175 & 0x3F;
          do
          {
            if (v378 >= 8)
            {
              v339 = 0;
              LODWORD(v337) = v108 >> 3;
              v108 &= 7u;
            }
            else
            {
              if (!v378)
                goto LABEL_361;
              v337 = v108 >> 3;
              v338 = v374 + v378 - v337;
              v232 = v338 >= v374;
              v339 = v338 < v374;
              if (!v232)
                LODWORD(v337) = v378;
              v108 -= 8 * v337;
            }
            v378 -= v337;
            v107 = *(_QWORD *)(v374 + v378);
            if ((unint64_t)v110 >= v373)
              break;
            if (v339)
              break;
            v340 = &v89[(unint64_t)(v107 << v108) >> v336];
            *(_WORD *)v110 = *(_WORD *)v340;
            v341 = v108 + *((unsigned __int8 *)v340 + 2);
            v342 = &v110[*((unsigned __int8 *)v340 + 3)];
            v343 = &v89[(unint64_t)(v107 << v341) >> v336];
            *(_WORD *)v342 = *(_WORD *)v343;
            v344 = v341 + *((unsigned __int8 *)v343 + 2);
            v345 = &v342[*((unsigned __int8 *)v343 + 3)];
            v346 = &v89[(unint64_t)(v107 << v344) >> v336];
            *(_WORD *)v345 = *(_WORD *)v346;
            v347 = v344 + *((unsigned __int8 *)v346 + 2);
            v348 = &v345[*((unsigned __int8 *)v346 + 3)];
            v349 = &v89[(unint64_t)(v107 << v347) >> v336];
            *(_WORD *)v348 = *(_WORD *)v349;
            v108 = v347 + *((unsigned __int8 *)v349 + 2);
            v110 = &v348[*((unsigned __int8 *)v349 + 3)];
          }
          while (v108 <= 0x40);
        }
      }
      else if (v108 <= 0x40)
      {
        v318 = -v175 & 0x3F;
        do
        {
          if (v378 >= 8)
          {
            v321 = 0;
            LODWORD(v319) = v108 >> 3;
            v108 &= 7u;
          }
          else
          {
            if (!v378)
              goto LABEL_361;
            v319 = v108 >> 3;
            v320 = v374 + v378 - v319;
            v232 = v320 >= v374;
            v321 = v320 < v374;
            if (!v232)
              LODWORD(v319) = v378;
            v108 -= 8 * v319;
          }
          v378 -= v319;
          v107 = *(_QWORD *)(v374 + v378);
          if (v110 >= v370 - 9)
            break;
          if (v321)
            break;
          v322 = &v89[(unint64_t)(v107 << v108) >> v318];
          *(_WORD *)v110 = *(_WORD *)v322;
          v323 = v108 + *((unsigned __int8 *)v322 + 2);
          v324 = &v110[*((unsigned __int8 *)v322 + 3)];
          v325 = &v89[(unint64_t)(v107 << v323) >> v318];
          *(_WORD *)v324 = *(_WORD *)v325;
          v326 = v323 + *((unsigned __int8 *)v325 + 2);
          v327 = &v324[*((unsigned __int8 *)v325 + 3)];
          v328 = &v89[(unint64_t)(v107 << v326) >> v318];
          *(_WORD *)v327 = *(_WORD *)v328;
          v329 = v326 + *((unsigned __int8 *)v328 + 2);
          v330 = &v327[*((unsigned __int8 *)v328 + 3)];
          v331 = &v89[(unint64_t)(v107 << v329) >> v318];
          *(_WORD *)v330 = *(_WORD *)v331;
          v332 = v329 + *((unsigned __int8 *)v331 + 2);
          v333 = &v330[*((unsigned __int8 *)v331 + 3)];
          v334 = &v89[(unint64_t)(v107 << v332) >> v318];
          *(_WORD *)v333 = *(_WORD *)v334;
          v108 = v332 + *((unsigned __int8 *)v334 + 2);
          v110 = &v333[*((unsigned __int8 *)v334 + 3)];
        }
        while (v108 <= 0x40);
      }
      goto LABEL_362;
    }
    if (v108 <= 0x40)
    {
      if (v378 >= 8)
      {
        v335 = v108 >> 3;
        v108 &= 7u;
        goto LABEL_359;
      }
      if (v378)
      {
        if (v374 + v378 - (v108 >> 3) >= v374)
          v335 = v108 >> 3;
        else
          v335 = v378;
        v108 -= 8 * v335;
LABEL_359:
        v378 -= v335;
        v107 = *(_QWORD *)(v374 + v378);
      }
      else
      {
LABEL_361:
        v378 = 0;
      }
    }
LABEL_362:
    v350 = v374 + v378;
    if ((unint64_t)(v370 - v110) >= 2)
    {
      v351 = (unint64_t)(v370 - 2);
      v352 = -v175 & 0x3F;
      while (v108 <= 0x40)
      {
        if (v378 >= 8)
        {
          v354 = 0;
          LODWORD(v353) = v108 >> 3;
          v108 &= 7u;
        }
        else
        {
          if (!v378)
            break;
          v353 = v108 >> 3;
          v354 = v350 - v353 < v374;
          if (v350 - v353 < v374)
            LODWORD(v353) = v378;
          v108 -= 8 * v353;
        }
        v378 -= v353;
        v350 = v374 + v378;
        v107 = *(_QWORD *)(v374 + v378);
        if ((unint64_t)v110 > v351 || v354)
          break;
        v355 = &v89[(unint64_t)(v107 << v108) >> v352];
        *(_WORD *)v110 = *(_WORD *)v355;
        v108 += *((unsigned __int8 *)v355 + 2);
        v110 += *((unsigned __int8 *)v355 + 3);
      }
      while ((unint64_t)v110 <= v351)
      {
        v356 = &v89[(unint64_t)(v107 << v108) >> v352];
        *(_WORD *)v110 = *(_WORD *)v356;
        v108 += *((unsigned __int8 *)v356 + 2);
        v110 += *((unsigned __int8 *)v356 + 3);
      }
    }
    v357 = v113;
    if (v110 < v370)
    {
      v358 = (unint64_t)(v107 << v108) >> -(char)v175;
      v359 = (char *)&v89[v358];
      *v110 = *v359;
      if (v359[3] == 1)
      {
        v108 += v359[2];
      }
      else if (v108 <= 0x3F)
      {
        v360 = v108 + BYTE2(v89[v358]);
        if (v360 >= 0x40)
          v108 = 64;
        else
          v108 = v360;
      }
    }
    if (v108 == 64 && v350 == v374 && v105 == 64 && v103 == 0 && v101 == 64 && v357 == 0 && v223 == 64 && v227 == 6)
      return a2;
    else
      return -20;
  }
  return result;
}

unint64_t sub_1D4B93CA4(uint64_t a1, unint64_t a2, unsigned __int16 *a3, unint64_t a4, uint64_t a5, char a6)
{
  unint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  __int16 v25;
  uint64_t j;
  unsigned int v27;
  char v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  _BYTE *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  _BOOL4 v50;
  unsigned __int8 *v51;
  int v52;
  unsigned __int8 *v53;
  int v54;
  unsigned __int8 *v55;
  int v56;
  unsigned __int8 *v57;
  unsigned __int8 v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  unsigned __int8 *v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned __int8 *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unsigned __int8 *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned __int8 *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  int v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  unsigned __int8 v100;
  unsigned __int8 *v101;
  unsigned int v102;
  unsigned __int8 *v103;
  unsigned int v104;
  unsigned __int8 *v105;
  unsigned int v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  unsigned int v109;
  unsigned __int8 *v110;
  unsigned int v111;
  unsigned __int8 *v112;
  unsigned int v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  unsigned int v116;
  unsigned __int8 *v117;
  unsigned int v118;
  unsigned __int8 *v119;
  unsigned int v120;
  unsigned __int8 *v121;
  unsigned __int8 v122;
  unsigned __int8 *v123;
  int v124;
  unsigned __int8 *v125;
  int v126;
  unsigned __int8 *v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  _BYTE *v134;
  unsigned __int8 *v135;
  unsigned __int8 *v136;
  unsigned __int8 *v137;
  int v138;
  uint64_t v139;
  _BOOL4 v140;
  unsigned __int8 *v141;
  unsigned __int8 v142;
  unsigned __int8 *v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  _BYTE *v146;
  uint64_t v147;
  uint64_t *v148;
  unint64_t v149;
  unsigned __int8 *v150;
  int v151;
  unsigned __int8 *v152;
  uint64_t v153;
  uint64_t *v154;
  _BOOL4 v155;
  unsigned int v156;
  unsigned __int8 *v157;
  unsigned __int8 v158;
  unsigned __int8 *v159;
  unsigned __int8 *v160;
  unsigned __int8 *v161;
  uint64_t v162;
  unsigned __int8 *k;
  unsigned __int8 *v164;
  int v165;
  unsigned __int8 *v166;
  uint64_t v167;
  unsigned __int8 *v168;
  _BOOL4 v169;
  unsigned __int8 *v170;
  unsigned __int8 v171;
  unsigned __int8 *v172;
  unsigned __int8 *v173;
  unsigned __int8 *v174;
  uint64_t v175;
  unsigned __int8 *m;
  unsigned __int8 *v177;
  unsigned __int8 *v178;
  int v179;
  uint64_t v180;
  _BOOL4 v181;
  unsigned __int8 *v182;
  unsigned __int8 v183;
  unsigned __int8 *v184;
  unsigned __int8 *v185;
  unsigned __int8 *v186;
  unsigned __int8 *v187;
  uint64_t v188;
  unint64_t v189;
  unsigned __int8 *v190;
  int v198;
  unint64_t v199;
  unsigned __int8 *v200;
  unint64_t v201;
  unsigned __int8 *v202;
  uint64_t *v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;

  v220 = *MEMORY[0x1E0C80C00];
  if ((a6 & 0x20) == 0)
  {
    v213 = 0;
    v211 = 0u;
    v212 = 0u;
    v209 = 0u;
    v210 = 0u;
    v207 = 0u;
    v208 = 0u;
    v205 = 0u;
    v206 = 0u;
    v204 = 0u;
    result = sub_1D4B95034(&v204, a1, a2, a3, a4, a5);
    if (result - 1 <= 0xFFFFFFFFFFFFFF87)
    {
      v13 = *((_QWORD *)&v210 + 1);
      v12 = v211;
      v14 = v210;
      v218 = v208;
      v219 = v209;
      v216 = v204;
      v217 = v205;
      v214 = v206;
      v215 = v207;
      v15 = v204;
      v16 = ((_QWORD)v211 - *((_QWORD *)&v207 + 1)) / 5uLL;
      v17 = ((unint64_t)(v204 - *((_QWORD *)&v210 + 1)) * (unsigned __int128)0x2492492492492493uLL) >> 64;
      v18 = (v17 + ((unint64_t)(v204 - *((_QWORD *)&v210 + 1) - v17) >> 1)) >> 2;
      if (v16 >= v18)
        v16 = v18;
      v19 = 5 * v16;
      if (v19 >= 20)
      {
        v20 = *((_QWORD *)&v207 + 1) + v19;
        do
        {
          if (*((_QWORD *)&v216 + 1) < v15)
            break;
          if ((unint64_t)v217 < *((_QWORD *)&v216 + 1) || *((_QWORD *)&v217 + 1) < (unint64_t)v217)
            break;
          v22 = 0;
          while (1)
          {
            for (i = 0; i != 32; i += 8)
            {
              v24 = *(_QWORD *)((char *)&v218 + i);
              v25 = *(_WORD *)(v14 + ((v24 >> 52) & 0xFFE));
              *(_QWORD *)((char *)&v218 + i) = v24 << v25;
              *(_BYTE *)(*(_QWORD *)((char *)&v214 + i) + v22) = HIBYTE(v25);
            }
            if (++v22 == 5)
            {
              for (j = 0; j != 32; j += 8)
              {
                v27 = __clz(__rbit64(*(_QWORD *)((char *)&v218 + j)));
                v28 = v27 & 7;
                *(_QWORD *)((char *)&v214 + j) += 5;
                v29 = (_QWORD *)(*(_QWORD *)((char *)&v216 + j) - (v27 >> 3));
                *(_QWORD *)((char *)&v216 + j) = v29;
                *(_QWORD *)((char *)&v218 + j) = (*v29 | 1) << v28;
              }
              v22 = 0;
              if (*((_QWORD *)&v215 + 1) >= v20)
                break;
            }
          }
          v30 = (v12 - *((_QWORD *)&v215 + 1)) / 5uLL;
          v15 = v216;
          v31 = ((unint64_t)(v216 - v13) * (unsigned __int128)0x2492492492492493uLL) >> 64;
          v32 = (v31 + ((unint64_t)(v216 - v13 - v31) >> 1)) >> 2;
          if (v30 >= v32)
            v30 = v32;
          v33 = 5 * v30;
          v20 = *((_QWORD *)&v215 + 1) + 5 * v30;
        }
        while (v33 >= 20);
      }
      v34 = 0;
      v35 = a5 + 4;
      v208 = v218;
      v209 = v219;
      v206 = v214;
      v207 = v215;
      v36 = (a2 + 3) >> 2;
      v37 = a1;
      v204 = v216;
      v205 = v217;
      while (1)
      {
        v38 = a1 + a2 - v37;
        v37 += v36;
        if (v36 > v38)
          v37 = a1 + a2;
        v39 = (char *)&v204 + 8 * v34;
        v40 = v39 + 32;
        v41 = (_BYTE *)*((_QWORD *)v39 + 4);
        if ((unint64_t)v41 > v37)
          return -20;
        v42 = *(uint64_t **)v39;
        if (*(_QWORD *)v39 < (unint64_t)(*((_QWORD *)v39 + 15) - 8))
          return -20;
        v43 = *v42;
        v44 = __clz(__rbit64(*((_QWORD *)&v208 + v34)));
        v45 = (uint64_t *)*((_QWORD *)&v211 + 1);
        v46 = *((_QWORD *)&v211 + 1) + 8;
        v47 = v37 - (_QWORD)v41;
        if ((uint64_t)(v37 - (_QWORD)v41) < 4)
        {
          if ((unint64_t)v42 >= v46)
          {
            v61 = (uint64_t *)((char *)v42 - (v44 >> 3));
            LODWORD(v44) = v44 & 7;
            v43 = *v61;
          }
          else if (v42 != *((uint64_t **)&v211 + 1))
          {
            v60 = v44 >> 3;
            if ((unint64_t)v42 - v60 >= *((_QWORD *)&v211 + 1))
              v60 = v60;
            else
              v60 = ((_DWORD)v42 - DWORD2(v211));
            LODWORD(v44) = v44 - 8 * v60;
            v43 = *(uint64_t *)((char *)v42 - v60);
          }
          v59 = v41;
        }
        else
        {
          v48 = v41;
          while (1)
          {
            if ((unint64_t)v42 >= v46)
            {
              v50 = 0;
              LODWORD(v49) = v44 >> 3;
              LODWORD(v44) = v44 & 7;
            }
            else
            {
              if (v42 == v45)
                break;
              v49 = v44 >> 3;
              v50 = (uint64_t *)((char *)v42 - v49) < v45;
              if ((uint64_t *)((char *)v42 - v49) < v45)
                LODWORD(v49) = (_DWORD)v42 - (_DWORD)v45;
              LODWORD(v44) = v44 - 8 * v49;
            }
            v42 = (uint64_t *)((char *)v42 - v49);
            v43 = *v42;
            if ((unint64_t)v48 >= v37 - 3 || v50)
              break;
            v51 = (unsigned __int8 *)(v35 + 2 * ((unint64_t)(v43 << v44) >> 53));
            v52 = v44 + *v51;
            *v48 = v51[1];
            v53 = (unsigned __int8 *)(v35 + 2 * ((unint64_t)(v43 << v52) >> 53));
            v54 = v52 + *v53;
            v48[1] = v53[1];
            v55 = (unsigned __int8 *)(v35 + 2 * ((unint64_t)(v43 << v54) >> 53));
            v56 = v54 + *v55;
            v48[2] = v55[1];
            v57 = (unsigned __int8 *)(v35 + 2 * ((unint64_t)(v43 << v56) >> 53));
            v58 = v57[1];
            LODWORD(v44) = v56 + *v57;
            v59 = v48 + 4;
            v48[3] = v58;
            v48 += 4;
            if (v44 > 0x40)
              goto LABEL_49;
          }
          v59 = v48;
        }
LABEL_49:
        if ((unint64_t)v59 < v37)
        {
          v62 = v37 - (_QWORD)v59;
          do
          {
            v63 = (unsigned __int8 *)(v35 + 2 * ((unint64_t)(v43 << v44) >> 53));
            LODWORD(v44) = v44 + *v63;
            *v59++ = v63[1];
            --v62;
          }
          while (v62);
          v41 = (_BYTE *)*v40;
        }
        v64 = &v41[v47];
        *v40 = v64;
        if (v64 != (_BYTE *)v37)
          return -20;
        if (++v34 == 4)
        {
          result = a2;
          break;
        }
      }
    }
    if (result)
      return result;
  }
  if (a4 < 0xA)
    return -20;
  result = -20;
  if (a2 < 6)
    return result;
  v65 = *a3;
  v66 = a3[1];
  v67 = a3[2];
  v68 = v65 + 6;
  v69 = v65 + 6 + v66 + v67;
  if (a4 < v69)
    return result;
  v70 = a1 + a2;
  v71 = a1 + ((a2 + 3) >> 2);
  v72 = v71 + ((a2 + 3) >> 2);
  v73 = v72 + ((a2 + 3) >> 2);
  if (v73 > a1 + a2)
    return result;
  if (!*a3)
    return -72;
  v74 = (unsigned __int8 *)(a3 + 3);
  if (v65 < 8)
  {
    v77 = *v74;
    switch(*a3)
    {
      case 2u:
        goto LABEL_74;
      case 3u:
        goto LABEL_73;
      case 4u:
        goto LABEL_72;
      case 5u:
        goto LABEL_71;
      case 6u:
        goto LABEL_70;
      case 7u:
        v77 |= (unint64_t)*((unsigned __int8 *)a3 + 12) << 48;
LABEL_70:
        v77 += (unint64_t)*((unsigned __int8 *)a3 + 11) << 40;
LABEL_71:
        v77 += (unint64_t)*((unsigned __int8 *)a3 + 10) << 32;
LABEL_72:
        v77 += (unint64_t)*((unsigned __int8 *)a3 + 9) << 24;
LABEL_73:
        v77 += (unint64_t)*((unsigned __int8 *)a3 + 8) << 16;
LABEL_74:
        v77 += (unint64_t)*((unsigned __int8 *)a3 + 7) << 8;
        break;
      default:
        break;
    }
    v79 = v74[v65 - 1];
    if (!v79)
      return -20;
    v78 = __clz(v79) - 8 * v65 + 41;
    v76 = 6;
    if (!a3[1])
      return -72;
  }
  else
  {
    v75 = v74[v65 - 1];
    if (!v75)
      return -1;
    v76 = v65 - 2;
    v77 = *(_QWORD *)((char *)a3 + v76);
    v78 = __clz(v75) - 23;
    if (!a3[1])
      return -72;
  }
  v80 = (unsigned __int8 *)a3 + v68;
  if (v66 < 8)
  {
    v82 = *v80;
    switch(a3[1])
    {
      case 2u:
        goto LABEL_86;
      case 3u:
        goto LABEL_85;
      case 4u:
        goto LABEL_84;
      case 5u:
        goto LABEL_83;
      case 6u:
        goto LABEL_82;
      case 7u:
        v82 |= (unint64_t)v80[6] << 48;
LABEL_82:
        v82 += (unint64_t)v80[5] << 40;
LABEL_83:
        v82 += (unint64_t)v80[4] << 32;
LABEL_84:
        v82 += (unint64_t)v80[3] << 24;
LABEL_85:
        v82 += (unint64_t)v80[2] << 16;
LABEL_86:
        v82 += (unint64_t)v80[1] << 8;
        break;
      default:
        break;
    }
    if (!v80[v66 - 1])
      return -20;
    v81 = 0;
    v83 = __clz(v80[v66 - 1]) - 8 * v66 + 41;
  }
  else
  {
    if (!v80[v66 - 1])
      return -1;
    v81 = v66 - 8;
    v82 = *(_QWORD *)&v80[v66 - 8];
    v83 = __clz(v80[v66 - 1]) - 23;
  }
  if (!a3[2])
    return -72;
  v84 = &v80[v66];
  if (v67 < 8)
  {
    v86 = *v84;
    switch(a3[2])
    {
      case 2u:
        goto LABEL_99;
      case 3u:
        goto LABEL_98;
      case 4u:
        goto LABEL_97;
      case 5u:
        goto LABEL_96;
      case 6u:
        goto LABEL_95;
      case 7u:
        v86 |= (unint64_t)v84[6] << 48;
LABEL_95:
        v86 += (unint64_t)v84[5] << 40;
LABEL_96:
        v86 += (unint64_t)v84[4] << 32;
LABEL_97:
        v86 += (unint64_t)v84[3] << 24;
LABEL_98:
        v86 += (unint64_t)v84[2] << 16;
LABEL_99:
        v86 += (unint64_t)v84[1] << 8;
        break;
      default:
        break;
    }
    if (!v84[v67 - 1])
      return -20;
    v85 = 0;
    v87 = __clz(v84[v67 - 1]) - 8 * v67 + 41;
  }
  else
  {
    if (!v84[v67 - 1])
      return -1;
    v85 = v67 - 8;
    v86 = *(_QWORD *)&v84[v67 - 8];
    v87 = __clz(v84[v67 - 1]) - 23;
  }
  result = a4 - v69;
  if (a4 == v69)
    return -72;
  v202 = &v80[v66];
  v203 = (uint64_t *)((char *)a3 + v68);
  v88 = &v84[v67];
  v89 = result - 8;
  if (result < 8)
  {
    v90 = *v88;
    switch(result)
    {
      case 2uLL:
        goto LABEL_115;
      case 3uLL:
        goto LABEL_114;
      case 4uLL:
        goto LABEL_113;
      case 5uLL:
        goto LABEL_112;
      case 6uLL:
        goto LABEL_111;
      case 7uLL:
        v90 |= (unint64_t)v88[6] << 48;
LABEL_111:
        v90 += (unint64_t)v88[5] << 40;
LABEL_112:
        v90 += (unint64_t)v88[4] << 32;
LABEL_113:
        v90 += (unint64_t)v88[3] << 24;
LABEL_114:
        v90 += (unint64_t)v88[2] << 16;
LABEL_115:
        v90 += (unint64_t)v88[1] << 8;
        break;
      default:
        break;
    }
    if (!v88[result - 1])
      return -20;
    v89 = 0;
    v91 = __clz(v88[result - 1]) - 8 * result + 41;
    goto LABEL_118;
  }
  if (!v88[result - 1])
    return -1;
  if (result > 0xFFFFFFFFFFFFFF88)
    return result;
  v90 = *(_QWORD *)&v88[v89];
  v91 = __clz(v88[result - 1]) - 23;
LABEL_118:
  v92 = a5 + 4;
  v200 = v88;
  v201 = (a2 + 3) >> 2;
  v198 = *(unsigned __int16 *)(a5 + 2);
  v199 = v70 - 3;
  if (v70 - v73 < 8 || v73 >= v70 - 3)
  {
    v134 = (_BYTE *)a1;
    v135 = (unsigned __int8 *)(a1 + ((a2 + 3) >> 2));
    v136 = (unsigned __int8 *)(v71 + ((a2 + 3) >> 2));
    v137 = (unsigned __int8 *)(v72 + ((a2 + 3) >> 2));
  }
  else
  {
    v93 = -*(unsigned __int16 *)(a5 + 2) & 0x3F;
    v94 = (unsigned __int8 *)a1;
    do
    {
      v95 = v94;
      v96 = &v94[3 * v201];
      v97 = &v94[2 * v201];
      v98 = &v95[v201];
      v99 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v77 << v78) >> v93));
      v100 = v99[1];
      LODWORD(v99) = v78 + *v99;
      *v95 = v100;
      v101 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v82 << v83) >> v93));
      v102 = v83 + *v101;
      *v98 = v101[1];
      v103 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v86 << v87) >> v93));
      v104 = v87 + *v103;
      *v97 = v103[1];
      v105 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v90 << v91) >> v93));
      v106 = v91 + *v105;
      *v96 = v105[1];
      v107 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v77 << (char)v99) >> v93));
      LODWORD(v99) = (_DWORD)v99 + *v107;
      v95[1] = v107[1];
      v108 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v82 << v102) >> v93));
      v109 = v102 + *v108;
      v98[1] = v108[1];
      v110 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v86 << v104) >> v93));
      v111 = v104 + *v110;
      v97[1] = v110[1];
      v112 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v90 << v106) >> v93));
      v113 = v106 + *v112;
      v96[1] = v112[1];
      v114 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v77 << (char)v99) >> v93));
      LODWORD(v99) = (_DWORD)v99 + *v114;
      v95[2] = v114[1];
      v115 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v82 << v109) >> v93));
      v116 = v109 + *v115;
      v98[2] = v115[1];
      v117 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v86 << v111) >> v93));
      v118 = v111 + *v117;
      v97[2] = v117[1];
      v119 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v90 << v113) >> v93));
      v120 = v113 + *v119;
      v96[2] = v119[1];
      v121 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v77 << (char)v99) >> v93));
      v122 = v121[1];
      v78 = (_DWORD)v99 + *v121;
      v95[3] = v122;
      v123 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v82 << v116) >> v93));
      v124 = *v123;
      v98[3] = v123[1];
      v125 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v86 << v118) >> v93));
      LOBYTE(v98) = v125[1];
      v126 = *v125;
      v97[3] = v98;
      v127 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v90 << v120) >> v93));
      v128 = *v127;
      v96[3] = v127[1];
      if (v76 < 14)
      {
        v129 = 3;
      }
      else
      {
        v129 = 0;
        v76 -= v78 >> 3;
        v78 &= 7u;
        v77 = *(_QWORD *)((char *)a3 + v76);
      }
      v83 = v116 + v124;
      if (v81 < 8)
      {
        v130 = 3;
      }
      else
      {
        v130 = 0;
        v81 -= v83 >> 3;
        v83 &= 7u;
        v82 = *(uint64_t *)((char *)v203 + v81);
      }
      v87 = v118 + v126;
      if (v85 < 8)
      {
        v131 = 3;
      }
      else
      {
        v131 = 0;
        v85 -= v87 >> 3;
        v87 &= 7u;
        v86 = *(_QWORD *)&v202[v85];
      }
      v91 = v120 + v128;
      if (v89 < 8)
      {
        v132 = 3;
      }
      else
      {
        v132 = 0;
        v89 -= v91 >> 3;
        v91 &= 7u;
        v90 = *(_QWORD *)&v200[v89];
      }
      if ((unint64_t)(v96 + 4) >= v199)
        break;
      v133 = v130 | v129 | v131;
      v94 = v95 + 4;
    }
    while (!(v133 | v132));
    v134 = v95 + 4;
    v137 = &v95[3 * v201 + 4];
    v136 = &v134[2 * v201];
    v135 = &v134[v201];
  }
  result = -20;
  if ((unint64_t)v134 <= v71 && (unint64_t)v135 <= v72 && (unint64_t)v136 <= v73)
  {
    if ((uint64_t)(v71 - (_QWORD)v134) < 4)
    {
      if (v78 > 0x40)
        goto LABEL_165;
      if (v76 >= 14)
      {
        v76 -= v78 >> 3;
        v78 &= 7u;
      }
      else
      {
        if (v76 == 6)
          goto LABEL_165;
        v147 = v78 >> 3;
        if (v76 - v147 >= 6)
          v147 = v147;
        else
          v147 = (v76 - 6);
        v76 -= v147;
        v78 -= 8 * v147;
      }
      v77 = *(_QWORD *)((char *)a3 + v76);
    }
    else if (v78 <= 0x40)
    {
      v138 = -v198 & 0x3F;
      while (1)
      {
        if (v76 >= 14)
        {
          v140 = 0;
          LODWORD(v139) = v78 >> 3;
          v78 &= 7u;
        }
        else
        {
          if (v76 == 6)
            break;
          v139 = v78 >> 3;
          v140 = v76 - v139 < 6;
          if (v76 - v139 < 6)
            LODWORD(v139) = v76 - 6;
          v78 -= 8 * v139;
        }
        v76 -= v139;
        v77 = *(_QWORD *)((char *)a3 + v76);
        if ((unint64_t)v134 >= v71 - 3 || v140)
          break;
        v141 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v77 << v78) >> v138));
        v142 = v141[1];
        LODWORD(v141) = v78 + *v141;
        *v134 = v142;
        v143 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v77 << (char)v141) >> v138));
        LODWORD(v141) = (_DWORD)v141 + *v143;
        v134[1] = v143[1];
        v144 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v77 << (char)v141) >> v138));
        LODWORD(v141) = (_DWORD)v141 + *v144;
        v134[2] = v144[1];
        v145 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v77 << (char)v141) >> v138));
        v78 = (_DWORD)v141 + *v145;
        v146 = v134 + 4;
        v134[3] = v145[1];
        v134 += 4;
        if (v78 > 0x40)
          goto LABEL_164;
      }
      v146 = v134;
LABEL_164:
      v134 = v146;
    }
LABEL_165:
    v148 = (uint64_t *)((char *)v203 + v81);
    if ((unint64_t)v134 < v71)
    {
      v149 = v201 + a1 - (_QWORD)v134;
      do
      {
        v150 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v77 << v78) >> (-(char)v198 & 0x3F)));
        v78 += *v150;
        *v134++ = v150[1];
        --v149;
      }
      while (v149);
    }
    if ((uint64_t)(v72 - (_QWORD)v135) < 4)
    {
      if (v83 > 0x40)
        goto LABEL_191;
      if (v81 >= 8)
      {
        LODWORD(v162) = v83 >> 3;
        v83 &= 7u;
      }
      else
      {
        if (!v81)
          goto LABEL_191;
        v162 = v83 >> 3;
        if ((uint64_t *)((char *)v148 - v162) < v203)
          LODWORD(v162) = v81;
        v83 -= 8 * v162;
      }
      v148 = (uint64_t *)((char *)v148 - v162);
      v82 = *v148;
    }
    else if (v83 <= 0x40)
    {
      v151 = -v198 & 0x3F;
      v152 = v135;
      while (1)
      {
        if (v81 >= 8)
        {
          v155 = 0;
          v156 = v83 >> 3;
          v83 &= 7u;
          v154 = v203;
        }
        else
        {
          if (!v81)
            break;
          v153 = v83 >> 3;
          v154 = v203;
          v155 = (uint64_t *)((char *)v148 - v153) < v203;
          v156 = (uint64_t *)((char *)v148 - v153) >= v203 ? v83 >> 3 : v81;
          v83 -= 8 * v156;
        }
        v81 -= v156;
        v148 = (uint64_t *)((char *)v154 + v81);
        v82 = *(uint64_t *)((char *)v154 + v81);
        if ((unint64_t)v152 >= v72 - 3 || v155)
          break;
        v157 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v82 << v83) >> v151));
        v158 = v157[1];
        LODWORD(v157) = v83 + *v157;
        *v152 = v158;
        v159 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v82 << (char)v157) >> v151));
        LODWORD(v157) = (_DWORD)v157 + *v159;
        v152[1] = v159[1];
        v160 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v82 << (char)v157) >> v151));
        LODWORD(v157) = (_DWORD)v157 + *v160;
        v152[2] = v160[1];
        v161 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v82 << (char)v157) >> v151));
        v83 = (_DWORD)v157 + *v161;
        v135 = v152 + 4;
        v152[3] = v161[1];
        v152 += 4;
        if (v83 > 0x40)
          goto LABEL_191;
      }
      v135 = v152;
    }
LABEL_191:
    for (k = &v202[v85]; (unint64_t)v135 < v72; ++v135)
    {
      v164 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v82 << v83) >> (-(char)v198 & 0x3F)));
      v83 += *v164;
      *v135 = v164[1];
    }
    if ((uint64_t)(v73 - (_QWORD)v136) < 4)
    {
      if (v87 > 0x40)
        goto LABEL_215;
      if (v85 >= 8)
      {
        LODWORD(v175) = v87 >> 3;
        v87 &= 7u;
      }
      else
      {
        if (!v85)
          goto LABEL_215;
        v175 = v87 >> 3;
        if (&k[-v175] < v202)
          LODWORD(v175) = v85;
        v87 -= 8 * v175;
      }
      k -= v175;
      v86 = *(_QWORD *)k;
    }
    else if (v87 <= 0x40)
    {
      v165 = -v198 & 0x3F;
      v166 = v136;
      while (1)
      {
        if (v85 >= 8)
        {
          v169 = 0;
          LODWORD(v167) = v87 >> 3;
          v87 &= 7u;
          v168 = v202;
        }
        else
        {
          if (!v85)
            break;
          v167 = v87 >> 3;
          v168 = v202;
          v169 = &k[-v167] < v202;
          if (&k[-v167] < v202)
            LODWORD(v167) = v85;
          v87 -= 8 * v167;
        }
        v85 -= v167;
        k = &v168[v85];
        v86 = *(_QWORD *)&v168[v85];
        if ((unint64_t)v166 >= v73 - 3 || v169)
          break;
        v170 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v86 << v87) >> v165));
        v171 = v170[1];
        LODWORD(v170) = v87 + *v170;
        *v166 = v171;
        v172 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v86 << (char)v170) >> v165));
        LODWORD(v170) = (_DWORD)v170 + *v172;
        v166[1] = v172[1];
        v173 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v86 << (char)v170) >> v165));
        LODWORD(v170) = (_DWORD)v170 + *v173;
        v166[2] = v173[1];
        v174 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v86 << (char)v170) >> v165));
        v87 = (_DWORD)v170 + *v174;
        v136 = v166 + 4;
        v166[3] = v174[1];
        v166 += 4;
        if (v87 > 0x40)
          goto LABEL_215;
      }
      v136 = v166;
    }
LABEL_215:
    for (m = &v200[v89]; (unint64_t)v136 < v73; ++v136)
    {
      v177 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v86 << v87) >> (-(char)v198 & 0x3F)));
      v87 += *v177;
      *v136 = v177[1];
    }
    if ((uint64_t)(v70 - (_QWORD)v137) >= 4)
    {
      v178 = v200;
      if (v91 <= 0x40)
      {
        v179 = -v198 & 0x3F;
        while (1)
        {
          if (v89 >= 8)
          {
            v181 = 0;
            LODWORD(v180) = v91 >> 3;
            v91 &= 7u;
          }
          else
          {
            m = &v200[v89];
            if (!v89)
              goto LABEL_240;
            v180 = v91 >> 3;
            v181 = &m[-v180] < v200;
            if (&m[-v180] < v200)
              LODWORD(v180) = v89;
            v91 -= 8 * v180;
          }
          v89 -= v180;
          v90 = *(_QWORD *)&v200[v89];
          if ((unint64_t)v137 >= v199 || v181)
            break;
          v182 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v90 << v91) >> v179));
          v183 = v182[1];
          LODWORD(v182) = v91 + *v182;
          *v137 = v183;
          v184 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v90 << (char)v182) >> v179));
          LODWORD(v182) = (_DWORD)v182 + *v184;
          v137[1] = v184[1];
          v185 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v90 << (char)v182) >> v179));
          LODWORD(v182) = (_DWORD)v182 + *v185;
          v137[2] = v185[1];
          v186 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v90 << (char)v182) >> v179));
          v91 = (_DWORD)v182 + *v186;
          v187 = v137 + 4;
          v137[3] = v186[1];
          v137 += 4;
          if (v91 > 0x40)
          {
            m = &v200[v89];
            v137 = v187;
            goto LABEL_240;
          }
        }
        m = &v200[v89];
      }
      goto LABEL_240;
    }
    v178 = v200;
    if (v91 <= 0x40)
    {
      if (v89 >= 8)
      {
        m -= v91 >> 3;
        v91 &= 7u;
LABEL_238:
        v90 = *(_QWORD *)m;
        goto LABEL_240;
      }
      if (v89)
      {
        v188 = v91 >> 3;
        if (&m[-v188] >= v200)
          v188 = v188;
        else
          v188 = v89;
        m -= v188;
        v91 -= 8 * v188;
        goto LABEL_238;
      }
    }
LABEL_240:
    if ((unint64_t)v137 < v70)
    {
      v189 = a1 + a2 - (_QWORD)v137;
      do
      {
        v190 = (unsigned __int8 *)(v92 + 2 * ((unint64_t)(v90 << v91) >> (-(char)v198 & 0x3F)));
        v91 += *v190;
        *v137++ = v190[1];
        --v189;
      }
      while (v189);
    }
    if (v91 == 64 && m == v178 && v87 == 64 && k == v202 && v83 == 64 && v148 == v203 && v78 == 64 && v76 == 6)
      return a2;
    else
      return -20;
  }
  return result;
}

unint64_t sub_1D4B94DA4(int *a1, uint64_t a2, unint64_t a3, char *a4, unint64_t a5, uint64_t a6, unint64_t a7, char a8)
{
  unint64_t result;

  if (!a3)
    return -70;
  if (!a5)
    return -20;
  if (sub_1D4B91D1C(a3, a5))
  {
    result = sub_1D4B91418(a1, a4, a5, a6, a7);
    if (result > 0xFFFFFFFFFFFFFF88)
      return result;
    if (a5 > result)
      return sub_1D4B92070(a2, a3, (unsigned __int16 *)&a4[result], a5 - result, (unsigned int *)a1, a8);
  }
  else
  {
    result = sub_1D4B91044(a1, a4, a5, a6, a7);
    if (result > 0xFFFFFFFFFFFFFF88)
      return result;
    if (a5 > result)
      return sub_1D4B93CA4(a2, a3, (unsigned __int16 *)&a4[result], a5 - result, (uint64_t)a1, a8);
  }
  return -72;
}

uint64_t sub_1D4B94ED0(uint64_t result, unsigned __int8 *a2, unsigned __int8 *a3, int a4, char a5, int a6, int a7)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t *v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;

  v7 = (1 << (a5 - a4));
  switch((int)v7)
  {
    case 1:
      for (; a2 != a3; result += 4)
      {
        v9 = *a2++;
        v8 = v9;
        v10 = a6 + (v9 << 8);
        if (a7 != 1)
          v8 = v10;
        *(_DWORD *)result = (a7 << 24) + (a4 << 16) + v8;
      }
      break;
    case 2:
      for (; a2 != a3; result += 8)
      {
        v12 = *a2++;
        v11 = v12;
        v13 = a6 + (v12 << 8);
        if (a7 != 1)
          v11 = v13;
        v14 = (a7 << 24) + (a4 << 16) + v11;
        *(_DWORD *)result = v14;
        *(_DWORD *)(result + 4) = v14;
      }
      break;
    case 4:
      for (; a2 != a3; result += 16)
      {
        v19 = *a2++;
        v18 = v19;
        v20 = a6 + (v19 << 8);
        if (a7 != 1)
          v18 = v20;
        v21 = ((a7 << 24) + (a4 << 16) + v18) | ((unint64_t)((a7 << 24)
                                                                                              + (a4 << 16)
                                                                                              + v18) << 32);
        *(_QWORD *)result = v21;
        *(_QWORD *)(result + 8) = v21;
      }
      break;
    case 8:
      for (; a2 != a3; result += 32)
      {
        v23 = *a2++;
        v22 = v23;
        v24 = a6 + (v23 << 8);
        if (a7 != 1)
          v22 = v24;
        v25 = ((a7 << 24) + (a4 << 16) + v22) | ((unint64_t)((a7 << 24)
                                                                                              + (a4 << 16)
                                                                                              + v22) << 32);
        *(_QWORD *)result = v25;
        *(_QWORD *)(result + 8) = v25;
        *(_QWORD *)(result + 16) = v25;
        *(_QWORD *)(result + 24) = v25;
      }
      break;
    default:
      for (; a2 != a3; ++a2)
      {
        v15 = (unint64_t *)result;
        v16 = *a2;
        if (a7 != 1)
          v16 = a6 + (v16 << 8);
        v17 = ((a7 << 24) + (a4 << 16) + v16) | ((unint64_t)((a7 << 24)
                                                                                              + (a4 << 16)
                                                                                              + v16) << 32);
        result += 4 * v7;
        do
        {
          *v15 = v17;
          v15[1] = v17;
          v15[2] = v17;
          v15[3] = v17;
          v15 += 4;
        }
        while (v15 != (unint64_t *)result);
      }
      break;
  }
  return result;
}

uint64_t sub_1D4B95034(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, unint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  char v19;
  unsigned int v20;
  char v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  char v25;
  uint64_t v26;

  if (a5 < 0xA)
    return -20;
  if (*(unsigned __int8 *)(a6 + 2) << 16 != 720896)
    return 0;
  v6 = 0;
  v7 = *a4;
  v8 = a4[1];
  v9 = a4[2];
  v10 = (char *)a4 + v7 + 6;
  a1[15] = a4 + 3;
  a1[16] = v10;
  v11 = &v10[v8];
  v12 = &v10[v8 + v9];
  a1[17] = &v10[v8];
  a1[18] = v12;
  if (v7 < 0x10)
    return v6;
  if (v8 < 8)
    return v6;
  if (v9 < 8)
    return v6;
  v13 = v7 + v8 + v9 + 6;
  if (a5 - v13 < 8)
    return v6;
  if (a5 < v13)
    return -20;
  *a1 = v10 - 8;
  a1[1] = v11 - 8;
  v14 = (char *)a4 + a5;
  a1[2] = v12 - 8;
  a1[3] = (char *)a4 + a5 - 8;
  v15 = a2 + ((unint64_t)(a3 + 3) >> 2);
  a1[4] = a2;
  a1[5] = v15;
  v16 = v15 + ((unint64_t)(a3 + 3) >> 2);
  v17 = v16 + ((unint64_t)(a3 + 3) >> 2);
  a1[6] = v16;
  a1[7] = v17;
  if (v17 >= a2 + a3)
    return 0;
  v18 = (__clz(*(v10 - 1)) ^ 0xFFFFFFE0) + 9;
  if (*(v10 - 1))
    v19 = v18;
  else
    v19 = 0;
  a1[8] = (*((_QWORD *)v10 - 1) | 1) << v19;
  v20 = (__clz(*(v11 - 1)) ^ 0xFFFFFFE0) + 9;
  if (*(v11 - 1))
    v21 = v20;
  else
    v21 = 0;
  a1[9] = (*((_QWORD *)v11 - 1) | 1) << v21;
  v22 = (__clz(*(v12 - 1)) ^ 0xFFFFFFE0) + 9;
  if (*(v12 - 1))
    v23 = v22;
  else
    v23 = 0;
  a1[10] = (*((_QWORD *)v12 - 1) | 1) << v23;
  v24 = (__clz(*(v14 - 1)) ^ 0xFFFFFFE0) + 9;
  if (*(v14 - 1))
    v25 = v24;
  else
    v25 = 0;
  v26 = *((_QWORD *)v14 - 1) | 1;
  a1[13] = a4 + 7;
  a1[14] = a2 + a3;
  a1[11] = v26 << v25;
  a1[12] = a6 + 4;
  return 1;
}

double sub_1D4B951B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  *(_DWORD *)(a1 + 30192) = *(_DWORD *)(a2 + 27316);
  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 29896) = v2;
  *(_QWORD *)(a1 + 29904) = v2;
  v4 = v2 + v3;
  *(_QWORD *)(a1 + 29912) = v4;
  *(_QWORD *)(a1 + 29888) = v4;
  if (*(_DWORD *)(a2 + 27320))
  {
    *(_QWORD *)a1 = a2 + 24;
    *(_QWORD *)(a1 + 8) = a2 + 6184;
    *(_QWORD *)&result = 0x100000001;
    *(_QWORD *)(a1 + 30000) = 0x100000001;
    *(_QWORD *)(a1 + 16) = a2 + 4128;
    *(_QWORD *)(a1 + 24) = a2 + 10288;
    *(_DWORD *)(a1 + 26684) = *(_DWORD *)(a2 + 26676);
    *(_DWORD *)(a1 + 26688) = *(_DWORD *)(a2 + 26680);
    *(_DWORD *)(a1 + 26692) = *(_DWORD *)(a2 + 26684);
  }
  else
  {
    result = 0.0;
    *(_QWORD *)(a1 + 30000) = 0;
  }
  return result;
}

uint64_t sub_1D4B95240(void **a1)
{
  void (*v2)(void *);
  void *v3;

  if (a1)
  {
    v2 = (void (*)(void *))a1[3417];
    v3 = a1[3418];
    if (*a1)
    {
      if (v2)
      {
        v2(a1[3418]);
LABEL_6:
        ((void (*)(void *, void **))v2)(v3, a1);
        return 0;
      }
      free(*a1);
    }
    else if (v2)
    {
      goto LABEL_6;
    }
    free(a1);
  }
  return 0;
}

uint64_t sub_1D4B952B0(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 27316);
  return result;
}

char *sub_1D4B952C0(__int128 *a1)
{
  uint64_t (*v1)(_QWORD, uint64_t);
  char *result;
  __int128 v4;

  v1 = *(uint64_t (**)(_QWORD, uint64_t))a1;
  if ((*(_QWORD *)a1 == 0) != (*((_QWORD *)a1 + 1) == 0))
    return 0;
  if (v1)
  {
    result = (char *)v1(*((_QWORD *)a1 + 2), 95976);
    if (!result)
      return result;
  }
  else
  {
    result = (char *)malloc(0x176E8uLL);
    if (!result)
      return result;
  }
  v4 = *a1;
  *((_QWORD *)result + 3768) = *((_QWORD *)a1 + 2);
  *((_OWORD *)result + 1883) = v4;
  *((_QWORD *)result + 3739) = 0;
  *(_QWORD *)(result + 30196) = 0;
  *((_QWORD *)result + 3784) = 0;
  *((_DWORD *)result + 7556) = 0;
  *((_QWORD *)result + 3788) = 0;
  *((_DWORD *)result + 7578) = 0;
  *((_QWORD *)result + 11996) = 0;
  *((_QWORD *)result + 3776) = 0;
  *((_QWORD *)result + 3771) = 0;
  *(_OWORD *)(result + 30232) = 0u;
  *((_OWORD *)result + 1886) = 0u;
  *((_QWORD *)result + 3782) = 134217729;
  *(_QWORD *)(result + 30324) = 0;
  *((_QWORD *)result + 3763) = 0;
  *((_QWORD *)result + 3777) = 0;
  return result;
}

char *sub_1D4B95398()
{
  return sub_1D4B952C0(&xmmword_1D4BD7F60);
}

uint64_t sub_1D4B953A4(uint64_t result)
{
  uint64_t v1;
  _DWORD *v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void **v5;
  int v6;
  void **v7;

  if (!result)
    return result;
  v1 = result;
  if (*(_QWORD *)(result + 30168))
    return -64;
  v2 = (_DWORD *)(result + 30200);
  v3 = *(void (**)(uint64_t))(result + 30136);
  v4 = *(_QWORD *)(result + 30144);
  sub_1D4B95240(*(void ***)(result + 30176));
  *v2 = 0;
  *(_OWORD *)(v1 + 30176) = 0u;
  if (*(_QWORD *)(v1 + 30232))
  {
    if (v3)
      v3(v4);
    else
      free(*(void **)(v1 + 30232));
  }
  *(_QWORD *)(v1 + 30232) = 0;
  v5 = *(void ***)(v1 + 30304);
  if (v5)
  {
    v6 = *(_DWORD *)(v1 + 30312);
    switch(v6)
    {
      case 7:
        sub_1D4BA54F0((uint64_t)v5);
        break;
      case 6:
        sub_1D4BA24D8(v5);
        break;
      case 5:
        sub_1D4B9F11C(v5);
        break;
    }
  }
  v7 = *(void ***)(v1 + 30208);
  if (v7)
  {
    if (*v7)
    {
      if (v3)
      {
        v3(v4);
LABEL_20:
        ((void (*)(uint64_t, void **))v3)(v4, v7);
LABEL_23:
        *(_QWORD *)(v1 + 30208) = 0;
        goto LABEL_24;
      }
      free(*v7);
    }
    else if (v3)
    {
      goto LABEL_20;
    }
    free(v7);
    goto LABEL_23;
  }
LABEL_24:
  if (v3)
    ((void (*)(uint64_t, uint64_t))v3)(v4, v1);
  else
    free((void *)v1);
  return 0;
}

uint64_t sub_1D4B954C4(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v3;
  unint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  v3 = 5;
  if (a3)
    v3 = 1;
  if (v3 > a2)
    return -72;
  v5 = *(unsigned __int8 *)(v3 + a1 - 1);
  v6 = v5 < 0x40;
  v7 = qword_1D4BD81D8[v5 & 3];
  v8 = *(_QWORD *)((char *)&unk_1D4BD81F8 + ((v5 >> 3) & 0x18));
  LODWORD(v5) = v5 & 0x20;
  v9 = (_DWORD)v5 == 0;
  v10 = v6 & (v5 >> 5);
  v11 = v7 + v3 + v8;
  if (v9)
    ++v11;
  return v11 + v10;
}

size_t sub_1D4B95530(uint64_t a1, char *__src, size_t __n, int a4)
{
  size_t v7;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int __dst;

  if (a4)
    v7 = 1;
  else
    v7 = 5;
  if (!__src && __n)
    return -1;
  if (v7 <= __n)
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    if (a4 == 1 || *(_DWORD *)__src == -47205080)
    {
      v9 = sub_1D4B954C4((uint64_t)__src, __n, a4);
      if (v9 <= __n)
      {
        *(_DWORD *)(a1 + 24) = v9;
        v10 = __src[v7 - 1];
        if ((v10 & 8) != 0)
        {
          return -14;
        }
        else
        {
          if ((v10 & 0x20) != 0)
          {
            v12 = 0;
          }
          else
          {
            v11 = __src[v7];
            if (v11 > 0xAF)
              return -16;
            ++v7;
            v12 = (1 << ((v11 >> 3) + 10))
                + ((unint64_t)(1 << ((v11 >> 3) + 10)) >> 3) * (v11 & 7);
          }
          v13 = v10 & 3;
          v14 = v10 >> 6;
          switch(v13)
          {
            case 3:
              v15 = *(_DWORD *)&__src[v7];
              v7 += 4;
              break;
            case 2:
              v15 = *(unsigned __int16 *)&__src[v7];
              v7 += 2;
              break;
            case 1:
              v15 = __src[v7++];
              break;
            default:
              v15 = 0;
              break;
          }
          v16 = (v10 >> 2) & 1;
          switch(v14)
          {
            case 1u:
              v17 = *(unsigned __int16 *)&__src[v7] + 256;
              break;
            case 2u:
              v17 = *(unsigned int *)&__src[v7];
              break;
            case 3u:
              v17 = *(_QWORD *)&__src[v7];
              break;
            default:
              if ((v10 & 0x20) != 0)
                v17 = __src[v7];
              else
                v17 = -1;
              break;
          }
          v7 = 0;
          if ((v10 & 0x20) != 0)
            v18 = v17;
          else
            v18 = v12;
          *(_QWORD *)a1 = v17;
          *(_QWORD *)(a1 + 8) = v18;
          if (v18 >= 0x20000)
            LODWORD(v18) = 0x20000;
          *(_DWORD *)(a1 + 16) = v18;
          *(_DWORD *)(a1 + 20) = 0;
          *(_DWORD *)(a1 + 28) = v15;
          *(_DWORD *)(a1 + 32) = v16;
        }
      }
      else
      {
        return v9;
      }
    }
    else
    {
      if (*(_DWORD *)__src >> 4 != 25481893)
        return -10;
      if (__n >= 8)
      {
        v7 = 0;
        *(_QWORD *)a1 = *((unsigned int *)__src + 1);
        *(_DWORD *)(a1 + 20) = 1;
      }
      else
      {
        return 8;
      }
    }
  }
  else if (__n)
  {
    if (a4 != 1)
    {
      __dst = -47205080;
      memcpy(&__dst, __src, __n);
      if (__dst != -47205080)
      {
        __dst = 407710288;
        memcpy(&__dst, __src, __n);
        if (__dst >> 4 != 25481893)
          return -10;
      }
    }
  }
  return v7;
}

uint64_t sub_1D4B95788(_QWORD *a1, char *a2, uint64_t a3, unint64_t a4, size_t a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v15;
  unint64_t v16;
  char *v17;
  size_t v18;
  int v20;
  uint64_t v21;
  size_t v22;
  int v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  size_t v39;
  unsigned __int16 *v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  unsigned __int8 *v44;
  char *v45;
  char *v47;
  uint64_t v48;
  size_t v49;
  _DWORD *v50;
  unint64_t v51;
  unint64_t v52;
  unsigned __int16 *v53;
  char *v54;
  char *v55;
  _DWORD *v56;
  _DWORD *v57;
  _QWORD *v58;
  unint64_t v59;
  unsigned __int8 v60;
  int v61;
  uint64_t v62;
  size_t __len;
  uint64_t v64;

  v15 = a1 + 3745;
  if (a8)
  {
    a6 = (_DWORD *)sub_1D4B41FA0(a8);
    a7 = sub_1D4B320CC(a8);
  }
  v16 = 5;
  if (v15[36])
    v16 = 1;
  if (v16 > a5)
  {
    v17 = a2;
    goto LABEL_7;
  }
  v20 = 0;
  v59 = a7;
  v58 = a1 + 3751;
  v17 = a2;
  while (1)
  {
LABEL_12:
    while (a5 < 4)
    {
LABEL_23:
      v60 = v20;
      if (a8)
      {
        sub_1D4B96374((uint64_t)a1, a8);
      }
      else
      {
        v24 = sub_1D4B96224((uint64_t)a1, a6, v59);
        if (v24 > 0xFFFFFFFFFFFFFF88)
          return v24;
      }
      sub_1D4B9A424(a1, (uint64_t)v17, a3);
      v25 = v15[36];
      v26 = 9;
      if (v25)
        v26 = 5;
      if (a5 < v26)
        goto LABEL_38;
      if (v25)
        v27 = 1;
      else
        v27 = 5;
      v28 = sub_1D4B954C4(a4, v27, v25);
      v18 = v28;
      if (v28 > 0xFFFFFFFFFFFFFF88)
        goto LABEL_39;
      if (a5 < v28 + 3)
      {
LABEL_38:
        v18 = -72;
        goto LABEL_39;
      }
      v39 = sub_1D4B95EEC((uint64_t)a1, (char *)a4, v28);
      if (v39 > 0xFFFFFFFFFFFFFF88)
      {
        v18 = v39;
        goto LABEL_39;
      }
      v55 = a2;
      v57 = v15;
      v50 = a6;
      v40 = (unsigned __int16 *)(a4 + v18);
      LODWORD(__len) = 0;
      v62 = 0;
      v52 = a5 - v18;
      v41 = sub_1D4B96524((unsigned __int16 *)(a4 + v18), a5 - v18, &v62);
      v42 = v41;
      if (v41 > 0xFFFFFFFFFFFFFF88)
      {
        v18 = v41;
LABEL_105:
        a2 = v55;
        v15 = v57;
        a6 = v50;
        goto LABEL_39;
      }
      v51 = (unint64_t)&v17[a3];
      v43 = v17;
      while (1)
      {
        v29 = v52 - 3 >= v42;
        v52 = v52 - 3 - v42;
        if (!v29)
        {
          v18 = -72;
          goto LABEL_105;
        }
        v44 = (unsigned __int8 *)v40 + 3;
        v45 = &v17[a3];
        if ((unint64_t)v40 + 3 < v51 && v44 >= (unsigned __int8 *)v43)
          v45 = (char *)v40 + 3;
        if ((_DWORD)v62 == 2)
        {
          v47 = (char *)v40 + 3;
          v18 = sub_1D4B9705C((uint64_t)a1, v43, v45 - v43, (uint64_t)v44, v42, 1);
          if (v18 > 0xFFFFFFFFFFFFFF88)
            goto LABEL_105;
        }
        else
        {
          if ((_DWORD)v62 == 1)
          {
            v18 = __len;
            if (v45 - v43 < (unint64_t)__len)
              goto LABEL_109;
            if (v43)
            {
              v47 = (char *)v40 + 3;
              memset(v43, *v44, __len);
              goto LABEL_98;
            }
            if ((_DWORD)__len)
            {
LABEL_113:
              v18 = -74;
              goto LABEL_105;
            }
          }
          else
          {
            if ((_DWORD)v62)
              goto LABEL_108;
            if (v42 > v51 - (unint64_t)v43)
            {
LABEL_109:
              v18 = -70;
              goto LABEL_105;
            }
            if (v43)
            {
              v47 = (char *)v40 + 3;
              memmove(v43, v44, v42);
              v18 = v42;
              goto LABEL_98;
            }
            if (v42)
              goto LABEL_113;
          }
          v47 = (char *)v40 + 3;
          v18 = 0;
        }
LABEL_98:
        if (v57[38])
          sub_1D4B4DD2C((uint64_t)v58, v43, v18);
        v43 += v18;
        v40 = (unsigned __int16 *)&v47[v42];
        if (HIDWORD(v62))
          break;
        LODWORD(__len) = 0;
        v62 = 0;
        v42 = sub_1D4B96524(v40, v52, &v62);
        v18 = v42;
        if (v42 >= 0xFFFFFFFFFFFFFF89)
          goto LABEL_105;
      }
      v48 = a1[3741];
      v18 = v43 - v17;
      if (v48 != -1 && v18 != v48)
      {
LABEL_108:
        v18 = -20;
        goto LABEL_105;
      }
      a6 = v50;
      if (*v57)
      {
        v49 = v52 - 4;
        if (v52 < 4)
        {
          v18 = -22;
          goto LABEL_115;
        }
        v53 = v40;
        v15 = v57;
        if (v57[37] || *(_DWORD *)v53 == sub_1D4B4DED0(v58))
        {
          a4 = (unint64_t)(v53 + 2);
          a5 = v49;
        }
        else
        {
          v18 = -22;
        }
        a2 = v55;
      }
      else
      {
        a4 = (unint64_t)v40;
        a5 = v52;
LABEL_115:
        a2 = v55;
        v15 = v57;
      }
LABEL_39:
      if (((sub_1D4B4E088(v18) == 10) & v60) != 0)
        return -72;
      if (v18 > 0xFFFFFFFFFFFFFF88)
        return v18;
      v17 += v18;
      a3 -= v18;
      v16 = 5;
      if (v15[36])
        v16 = 1;
      v20 = 1;
      if (a5 < v16)
      {
LABEL_7:
        if (a5)
          return -72;
        else
          return v17 - a2;
      }
    }
    if ((*(_DWORD *)a4 + 47205083) > 2)
      break;
    v62 = 0;
    __len = 0;
    v64 = 0;
    v23 = *(_DWORD *)a4;
    v61 = v20;
    if (*(_DWORD *)a4 == -47205081)
    {
      sub_1D4BA532C(a4, a5, &__len, &v64);
    }
    else if (v23 == -47205082)
    {
      sub_1D4BA236C(a4, a5, &__len, &v64);
    }
    else if (v23 == -47205083)
    {
      sub_1D4B9F060((_DWORD *)a4, a5, (uint64_t *)&__len, &v64);
    }
    else
    {
      __len = -10;
    }
    v29 = __len <= a5 || __len >= 0xFFFFFFFFFFFFFF89;
    if (v29)
      v18 = __len;
    else
      v18 = -72;
    if (v18 > 0xFFFFFFFFFFFFFF88)
      return v18;
    if (a1[3771])
      return -64;
    if (v18 < 4)
      return -10;
    v30 = *(_DWORD *)a4;
    v54 = a2;
    v56 = v15;
    if (*(_DWORD *)a4 == -47205081)
    {
      v31 = (uint64_t)a6;
      sub_1D4BA4160();
      if (!v35)
        return -64;
      v36 = (uint64_t)v35;
      v34 = sub_1D4BA4DB8(v35, v17, a3, a4, v18, v31, v59);
      sub_1D4BA4198(v36);
    }
    else if (v30 == -47205082)
    {
      v31 = (uint64_t)a6;
      sub_1D4BA13E0();
      if (!v37)
        return -64;
      v38 = v37;
      v34 = sub_1D4BA209C(v37, v17, a3, a4, v18, v31, v59);
      sub_1D4B9DCFC(v38);
    }
    else
    {
      if (v30 != -47205083)
        return -10;
      v31 = (uint64_t)a6;
      sub_1D4B9DCB8();
      if (!v32)
        return -64;
      v33 = v32;
      v34 = sub_1D4B9ED80(v32, v17, a3, (_DWORD *)a4, v18, v31, v59);
      sub_1D4B9DCFC(v33);
    }
    v20 = v61;
    if (v34 > 0xFFFFFFFFFFFFFF88)
      return v34;
    v17 += v34;
    a3 -= v34;
    a4 += v18;
    a5 -= v18;
    a2 = v54;
    if (v56[36])
      v16 = 1;
    else
      v16 = 5;
    a6 = (_DWORD *)v31;
    v15 = v56;
    if (a5 < v16)
      goto LABEL_7;
  }
  if (*(_DWORD *)a4 >> 4 != 25481893)
    goto LABEL_23;
  if (a5 < 8)
    return -72;
  v21 = *(unsigned int *)(a4 + 4);
  if (v21 > 0xFFFFFFF7)
    return -14;
  v22 = v21 + 8;
  if (v22 <= a5)
    v18 = v22;
  else
    v18 = -72;
  if (v18 <= 0xFFFFFFFFFFFFFF88)
  {
    a4 += v18;
    a5 -= v18;
    if (a5 < v16)
      goto LABEL_7;
    goto LABEL_12;
  }
  return v18;
}

uint64_t sub_1D4B95E30(_QWORD *a1, char *a2, uint64_t a3, unint64_t a4, size_t a5)
{
  uint64_t v10;

  sub_1D4B95E90((uint64_t)a1);
  return sub_1D4B95788(a1, a2, a3, a4, a5, 0, 0, v10);
}

double sub_1D4B95E90(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  double result;

  v2 = (_DWORD *)(a1 + 30200);
  v3 = *(_DWORD *)(a1 + 30200);
  if (v3 != -1)
  {
    if (v3 == 1)
    {
      *v2 = 0;
    }
    else
    {
      sub_1D4B95240(*(void ***)(a1 + 30176));
      *v2 = 0;
      result = 0.0;
      *(_OWORD *)(a1 + 30176) = 0u;
    }
  }
  return result;
}

size_t sub_1D4B95EEC(uint64_t a1, char *a2, size_t a3)
{
  _DWORD *v5;
  size_t result;
  int v7;

  v5 = (_DWORD *)(a1 + 29956);
  result = sub_1D4B95530(a1 + 29928, a2, a3, *(_DWORD *)(a1 + 30104));
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (result)
    {
      return -72;
    }
    else
    {
      if (v5[65] == 1 && *(_QWORD *)(a1 + 30208))
        sub_1D4B96468(a1);
      if (*v5 && v5[59] != *v5)
      {
        return -32;
      }
      else
      {
        if (v5[1])
        {
          v7 = v5[38];
          v5[39] = v7 == 0;
          if (!v7)
            sub_1D4B4DCE4(a1 + 30008, 0);
        }
        else
        {
          v5[39] = 0;
        }
        result = 0;
        *(_QWORD *)(a1 + 29976) += a3;
      }
    }
  }
  return result;
}

uint64_t sub_1D4B95FBC(int *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v25;
  unsigned int v26;
  _BYTE v27[106];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a3 >= 9)
  {
    v6 = a2 + 8;
    v7 = sub_1D4B91418(a1 + 2566, (char *)(a2 + 8), a3 - 8, (uint64_t)a1, 0x2818uLL);
    if (v7 <= 0xFFFFFFFFFFFFFF88)
    {
      v8 = v7;
      v9 = a2 + a3;
      v10 = (_DWORD *)(v6 + v7);
      v25 = 0;
      v26 = 31;
      v11 = sub_1D4B4CD4C(v27, &v26, &v25, v10, a2 + a3 - (_QWORD)v10);
      if (v11 <= 0xFFFFFFFFFFFFFF88 && v26 <= 0x1F && v25 < 9)
      {
        v12 = v11;
        sub_1D4B96ACC(a1 + 1026, (uint64_t)v27, v26, (uint64_t)&unk_1D4BD7F78, (uint64_t)&unk_1D4BD7FF8, v25, (uint64_t)(a1 + 6666));
        v13 = (char *)v10 + v12;
        v25 = 0;
        v26 = 52;
        v14 = sub_1D4B4CD4C(v27, &v26, &v25, (_DWORD *)((char *)v10 + v12), v9 - ((_QWORD)v10 + v12));
        if (v14 <= 0xFFFFFFFFFFFFFF88 && v26 <= 0x34 && v25 < 0xA)
        {
          v15 = v14;
          sub_1D4B96ACC(a1 + 1540, (uint64_t)v27, v26, (uint64_t)&unk_1D4BD8018, (uint64_t)&unk_1D4BD80EC, v25, (uint64_t)(a1 + 6666));
          v16 = &v13[v15];
          v25 = 0;
          v26 = 35;
          v17 = sub_1D4B4CD4C(v27, &v26, &v25, &v13[v15], v9 - (_QWORD)&v13[v15]);
          if (v17 <= 0xFFFFFFFFFFFFFF88 && v26 <= 0x23 && v25 < 0xA)
          {
            v18 = v17;
            sub_1D4B96ACC(a1, (uint64_t)v27, v26, (uint64_t)&unk_1D4BD8124, (uint64_t)&unk_1D4BD81B4, v25, (uint64_t)(a1 + 6666));
            v19 = (unint64_t)&v16[v18 + 12];
            if (v19 <= v9)
            {
              v21 = 0;
              v22 = v9 - v19;
              while (1)
              {
                v23 = *(unsigned int *)&v16[v18 + v21 * 4];
                if (!(_DWORD)v23 || v22 < v23)
                  break;
                a1[v21 + 6663] = v23;
                if (++v21 == 3)
                  return v8 + v12 + v15 + v18 + 20;
              }
            }
          }
        }
      }
    }
  }
  return -30;
}

uint64_t sub_1D4B96224(uint64_t a1, _DWORD *a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v8;
  uint64_t v9;

  result = 0;
  v5 = 5;
  if (*(_DWORD *)(a1 + 30104))
    v5 = 1;
  *(_QWORD *)(a1 + 29920) = v5;
  *(_QWORD *)(a1 + 26684) = 0x400000001;
  *(_DWORD *)(a1 + 26692) = 8;
  *(_OWORD *)(a1 + 29888) = 0u;
  *(_OWORD *)(a1 + 29904) = 0u;
  *(_OWORD *)(a1 + 29976) = 0u;
  *(_DWORD *)(a1 + 10296) = 201326604;
  *(_DWORD *)(a1 + 30192) = 0;
  *(_OWORD *)(a1 + 29992) = xmmword_1D4BD7F50;
  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 6192;
  *(_QWORD *)(a1 + 16) = a1 + 4136;
  *(_QWORD *)(a1 + 24) = a1 + 10296;
  if (a2 && a3)
  {
    if (a3 > 7 && *a2 == -332356553)
    {
      *(_DWORD *)(a1 + 30192) = a2[1];
      v8 = sub_1D4B95FBC((int *)(a1 + 32), (uint64_t)a2, a3);
      if (v8 > 0xFFFFFFFFFFFFFF88)
        return -30;
      *(_QWORD *)(a1 + 30000) = 0x100000001;
      v9 = *(_QWORD *)(a1 + 29888);
      *(_QWORD *)(a1 + 29912) = v9;
      *(_QWORD *)(a1 + 29904) = (char *)a2 + v8 + *(_QWORD *)(a1 + 29896) - v9;
      *(_QWORD *)(a1 + 29896) = (char *)a2 + v8;
    }
    else
    {
      *(_QWORD *)(a1 + 29904) = a2;
      *(_QWORD *)(a1 + 29896) = a2;
    }
    result = 0;
    *(_QWORD *)(a1 + 29888) = (char *)a2 + a3;
  }
  return result;
}

uint64_t sub_1D4B96374(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + 29992;
  if (a2)
  {
    v5 = sub_1D4B41FA0(a2);
    *(_DWORD *)(v4 + 204) = *(_QWORD *)(a1 + 29912) != v5 + sub_1D4B320CC(a2);
  }
  v6 = 5;
  if (*(_DWORD *)(v4 + 112))
    v6 = 1;
  *(_QWORD *)(a1 + 29920) = v6;
  *(_OWORD *)(a1 + 29888) = 0u;
  *(_OWORD *)(a1 + 29904) = 0u;
  *(_OWORD *)(a1 + 29976) = 0u;
  *(_DWORD *)(a1 + 10296) = 201326604;
  *(_DWORD *)(v4 + 200) = 0;
  *(_OWORD *)v4 = xmmword_1D4BD7F50;
  *(_QWORD *)(a1 + 26684) = 0x400000001;
  *(_DWORD *)(a1 + 26692) = 8;
  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 6192;
  *(_QWORD *)(a1 + 16) = a1 + 4136;
  *(_QWORD *)(a1 + 24) = a1 + 10296;
  if (a2)
    sub_1D4B951B4(a1, a2);
  return 0;
}

uint64_t sub_1D4B96468(uint64_t result)
{
  uint64_t v1;
  _DWORD *v2;
  _QWORD *v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)(result + 30184))
  {
    v1 = result;
    v2 = (_DWORD *)(result + 29956);
    v3 = *(_QWORD **)(result + 30208);
    v4 = *(_DWORD *)(result + 29956);
    LODWORD(v11) = v4;
    v5 = sub_1D4B4DB8C(&v11, 4uLL, 0);
    v6 = v3[1] - 1;
    v7 = v6 & v5;
    do
    {
      v8 = v7;
      result = sub_1D4B952B0(*(_QWORD *)(*v3 + 8 * v7));
      v7 = (v8 & v6) + 1;
    }
    while ((_DWORD)result != v4 && (_DWORD)result != 0);
    v10 = *(_QWORD *)(*v3 + 8 * v8);
    if (v10)
    {
      result = sub_1D4B95240(*(void ***)(v1 + 30176));
      *(_QWORD *)(v1 + 30176) = 0;
      v2[59] = *v2;
      *(_QWORD *)(v1 + 30184) = v10;
      v2[61] = -1;
    }
  }
  return result;
}

uint64_t sub_1D4B96524(unsigned __int16 *a1, unint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;

  if (a2 < 3)
    return -72;
  v4 = *a1;
  v5 = (v4 & 0xFFF8 | (*((unsigned __int8 *)a1 + 2) << 16)) >> 3;
  result = (v4 >> 1) & 3;
  *a3 = result;
  a3[1] = v4 & 1;
  a3[2] = v5;
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result == 3)
      return -20;
    else
      return v5;
  }
  return result;
}

uint64_t sub_1D4B96578(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 2)
    __asm { BR              X9 }
  return -20;
}

void sub_1D4B965E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  unint64_t v6;
  _QWORD *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int v16;
  void *v17;
  uint64_t v18;
  int v19;
  char *v20;
  char *v21;
  size_t v22;
  char *v23;

  v10 = (v6 >> 2) & 3;
  v11 = 0x20000;
  if (a5 < 0x20000)
    v11 = a5;
  if (v10 == 1)
  {
    v12 = (unint64_t)*v8 >> 4;
    v13 = 2;
  }
  else if (v10 == 3)
  {
    if (a3 < 3)
      goto LABEL_30;
    v12 = (*v8 | ((unint64_t)*((unsigned __int8 *)v8 + 2) << 16)) >> 4;
    v13 = 3;
  }
  else
  {
    v12 = v6 >> 3;
    v13 = 1;
  }
  if (a4)
    v14 = 1;
  else
    v14 = v12 == 0;
  v15 = !v14;
  if (v11 < v12 || (v15 & 1) != 0)
LABEL_31:
    JUMPOUT(0x1D4B9659CLL);
  if (a6 || v12 + 131136 >= a5)
  {
    if (v12 <= 0x10000)
    {
      v16 = 0;
      v19 = 0;
      v17 = (char *)v7 + 30380;
      v7[3795] = (char *)v7 + 30380;
      v18 = (uint64_t)v7 + v12 + 30380;
    }
    else
    {
      v17 = (void *)(a4 + v11 - v12 + 65504);
      v18 = a4 + v11 - 32;
      v7[3795] = v17;
      v19 = 2;
      v16 = 1;
    }
  }
  else
  {
    v16 = 0;
    v17 = (void *)(a4 + 131104);
    v7[3795] = a4 + 131104;
    v18 = a4 + 131104 + v12;
    v19 = 1;
  }
  v7[3796] = v18;
  *(_DWORD *)(v9 + 376) = v19;
  if (v13 + v12 + 32 <= a3)
  {
    v23 = (char *)v8 + v13;
    v7[3765] = v23;
    v7[3769] = v12;
    v7[3796] = &v23[v12];
    *(_DWORD *)(v9 + 376) = 0;
    goto LABEL_31;
  }
  if (v13 + v12 <= a3)
  {
    v20 = (char *)v8 + v13;
    if (v16)
    {
      memcpy(v17, v20, v12 - 0x10000);
      v17 = (char *)v7 + 30380;
      v21 = &v20[v12 - 0x10000];
      v22 = 0x10000;
    }
    else
    {
      v21 = v20;
      v22 = v12;
    }
    memcpy(v17, v21, v22);
    v7[3765] = v7[3795];
    v7[3769] = v12;
    goto LABEL_31;
  }
LABEL_30:
  JUMPOUT(0x1D4B96598);
}

int *sub_1D4B96ACC(int *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  __int16 v16;
  _DWORD *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int i;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;

  v7 = result + 2;
  v8 = (1 << a6);
  v9 = (v8 - 1);
  v10 = (a3 + 1);
  if (a3 == -1)
  {
    *result = 1;
    result[1] = a6;
    v11 = (v8 >> 3) + (v8 >> 1) + 3;
LABEL_16:
    v26 = 0;
    v27 = 0;
    do
    {
      v7[2 * (v27 & v9) + 1] = *(unsigned __int8 *)(a7 + v26 + 106);
      v7[2 * (((_DWORD)v27 + v11) & v9) + 1] = *(unsigned __int8 *)(a7 + v26 + 107);
      v27 = ((_DWORD)v27 + 2 * v11) & v9;
      v26 += 2;
    }
    while (v26 < v8);
    goto LABEL_26;
  }
  v12 = 0;
  v13 = 1;
  v14 = v8 - 1;
  do
  {
    v15 = *(__int16 *)(a2 + 2 * v12);
    if (v15 == -1)
    {
      v17 = &v7[2 * v14--];
      v17[1] = v12;
      v16 = 1;
    }
    else
    {
      v16 = *(_WORD *)(a2 + 2 * v12);
      if (0x10000 << (a6 - 1) >> 16 <= v15)
        v13 = 0;
    }
    *(_WORD *)(a7 + 2 * v12++) = v16;
  }
  while (v10 != v12);
  *result = v13;
  result[1] = a6;
  v18 = v8 >> 3;
  if (v14 == (_DWORD)v9)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    do
    {
      v22 = *(__int16 *)(a2 + 2 * v19);
      v23 = *(unsigned __int16 *)(a2 + 2 * v19);
      *(_QWORD *)(a7 + 106 + v21) = v20;
      if (v22 >= 9)
      {
        v24 = 114;
        do
        {
          *(_QWORD *)(a7 + v21 + v24) = v20;
          v25 = v24 - 98;
          v24 += 8;
        }
        while (v25 < v23);
      }
      v21 += (__int16)v23;
      ++v19;
      v20 += 0x101010101010101;
    }
    while (v19 != v10);
    v11 = v18 + 3 + (v8 >> 1);
    goto LABEL_16;
  }
  v28 = 0;
  v29 = 0;
  v30 = v18 + (v8 >> 1) + 3;
  do
  {
    v31 = *(__int16 *)(a2 + 2 * v28);
    if (v31 >= 1)
    {
      for (i = 0; i != v31; ++i)
      {
        v7[2 * v29 + 1] = v28;
        do
          v29 = (v30 + v29) & v9;
        while (v29 > v14);
      }
    }
    ++v28;
  }
  while (v28 != v10);
LABEL_26:
  v33 = result + 3;
  v34 = (1 << a6);
  do
  {
    v35 = *v33;
    v36 = *(unsigned __int16 *)(a7 + 2 * v35);
    *(_WORD *)(a7 + 2 * v35) = v36 + 1;
    v37 = a6 - 31 + __clz(v36);
    *((_BYTE *)v33 - 1) = v37;
    *((_WORD *)v33 - 2) = (v36 << v37) - v8;
    *((_BYTE *)v33 - 2) = *(_BYTE *)(a5 + v35);
    *v33 = *(_DWORD *)(a4 + 4 * v35);
    v33 += 2;
    --v34;
  }
  while (v34);
  return result;
}

uint64_t sub_1D4B96CB8(uint64_t a1, int *a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int *v11;
  unsigned int v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;

  if (!a4)
    return -72;
  v5 = a3 + 1;
  v6 = *a3;
  if (*a3)
  {
    if ((v6 & 0x80) != 0)
    {
      if (v6 == 255)
      {
        if (a4 < 3)
          return -72;
        v5 = a3 + 3;
        v6 = *(unsigned __int16 *)(a3 + 1) + 32512;
      }
      else
      {
        if (a4 < 2)
          return -72;
        v5 = a3 + 2;
        v6 = (a3[1] | (v6 << 8)) - 0x8000;
      }
    }
    v8 = &a3[a4];
    *a2 = v6;
    v9 = v5 + 1;
    if (v5 + 1 > &a3[a4])
      return -72;
    v11 = (int *)(a1 + 30004);
    v12 = *v5;
    v13 = sub_1D4B96EC0(a1 + 32, (_QWORD *)a1, v12 >> 6, 0x23u, 9u, v9, v8 - v9, (uint64_t)&unk_1D4BD824C, (uint64_t)&unk_1D4BD82DC, (uint64_t)&unk_1D4BD8300, *(_DWORD *)(a1 + 30004), *(_DWORD *)(a1 + 30196), v6, a1 + 27324);
    if (v13 > 0xFFFFFFFFFFFFFF88)
      return -20;
    v14 = &v9[v13];
    v15 = sub_1D4B96EC0(a1 + 4136, (_QWORD *)(a1 + 16), (v12 >> 4) & 3, 0x1Fu, 8u, v14, v8 - v14, (uint64_t)&unk_1D4BD8508, (uint64_t)&unk_1D4BD8588, (uint64_t)&unk_1D4BD85A8, *v11, *(_DWORD *)(a1 + 30196), v6, a1 + 27324);
    if (v15 > 0xFFFFFFFFFFFFFF88)
      return -20;
    v16 = &v14[v15];
    v17 = sub_1D4B96EC0(a1 + 6192, (_QWORD *)(a1 + 8), (v12 >> 2) & 3, 0x34u, 9u, v16, v8 - v16, (uint64_t)&unk_1D4BD86B0, (uint64_t)&unk_1D4BD8784, (uint64_t)&unk_1D4BD87BC, *v11, *(_DWORD *)(a1 + 30196), v6, a1 + 27324);
    if (v17 > 0xFFFFFFFFFFFFFF88)
      return -20;
    else
      return &v16[v17] - a3;
  }
  else
  {
    *a2 = 0;
    if (a4 == 1)
      return 1;
    else
      return -72;
  }
}

uint64_t sub_1D4B96EC0(uint64_t a1, _QWORD *a2, int a3, unsigned int a4, unsigned int a5, _DWORD *a6, size_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, uint64_t a14)
{
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  unsigned int v32;
  unsigned int v33;
  _BYTE v34[106];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v33 = a4;
  switch(a3)
  {
    case 0:
      v18 = 0;
      *a2 = a10;
      break;
    case 1:
      if (a7)
      {
        v19 = *(unsigned __int8 *)a6;
        if (v19 > a4)
          goto LABEL_18;
        v20 = *(_DWORD *)(a8 + 4 * v19);
        v21 = *(_BYTE *)(a9 + v19);
        *(_QWORD *)a1 = 0;
        *(_BYTE *)(a1 + 11) = 0;
        *(_WORD *)(a1 + 8) = 0;
        *(_BYTE *)(a1 + 10) = v21;
        *(_DWORD *)(a1 + 12) = v20;
        *a2 = a1;
        v18 = 1;
      }
      else
      {
        v18 = -72;
      }
      break;
    case 2:
      v32 = 0;
      v22 = sub_1D4B4CD4C(v34, &v33, &v32, a6, a7);
      if (v22 > 0xFFFFFFFFFFFFFF88 || v32 > a5)
        goto LABEL_18;
      v18 = v22;
      sub_1D4B96ACC((int *)a1, (uint64_t)v34, v33, a8, a9, v32, a14);
      *a2 = a1;
      break;
    case 3:
      if (a11)
      {
        if (a12)
          v23 = a13 < 25;
        else
          v23 = 1;
        if (!v23)
        {
          v24 = 0;
          do
          {
            _X11 = *a2 + v24;
            __asm { PRFM            #2, [X11] }
            v24 += 64;
          }
          while (v24 < 8 * (unint64_t)((1 << a5) + 1));
        }
        v18 = 0;
      }
      else
      {
LABEL_18:
        v18 = -20;
      }
      break;
    default:
      v18 = -1;
      break;
  }
  return v18;
}

unint64_t sub_1D4B9705C(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  unsigned int *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  BOOL v24;
  BOOL v25;
  unsigned __int8 *v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  if (a5 > 0x20000)
    return -72;
  v29 = v6;
  v30 = v7;
  result = sub_1D4B96578(a1, a4, a5);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    v15 = (unsigned int *)(a1 + 29944);
    v16 = (unsigned __int8 *)(a4 + result);
    v17 = a5 - result;
    if (a6)
      v18 = *v15 >= a3 ? a3 : *v15;
    else
      v18 = a3 >= 0x20000 ? 0x20000 : a3;
    v19 = *(_QWORD *)(a1 + 29904);
    v20 = *(_DWORD *)(a1 + 30196);
    v28 = 0;
    result = sub_1D4B96CB8(a1, &v28, v16, v17);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      v21 = result;
      v22 = !a2 || a3 == 0;
      v23 = v28;
      v24 = !v22 || v28 <= 0;
      v25 = !v24;
      result = -70;
      if ((unint64_t)a2 <= 0xFFFFFFFFFFEFFFFFLL && !v25)
      {
        v26 = &v16[v21];
        v27 = v17 - v21;
        if (!v20 && (unint64_t)&a2[v18 - v19] >= 0x1000001 && v28 >= 9)
          v20 = sub_1D4B97200(*(_QWORD *)(a1 + 16), v28) > 6;
        *(_DWORD *)(a1 + 30196) = 0;
        if (v20)
        {
          return sub_1D4B9725C(a1, a2, a3, v26, v27, v23);
        }
        else if (*(_DWORD *)(a1 + 30376) == 2)
        {
          return sub_1D4B98B64((uint64_t *)a1, a2, a3, v26, v27, v23);
        }
        else
        {
          return sub_1D4B99CE8(a1, a2, a3, v26, v27, v23);
        }
      }
    }
  }
  return result;
}

unint64_t sub_1D4B97200(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  if (!a2)
    return 0;
  v2 = 0;
  LODWORD(v3) = 0;
  v4 = *(_DWORD *)(a1 + 4);
  v5 = 1;
  do
  {
    v6 = *(unsigned __int8 *)(a1 + 8 + 8 * (v5 - 1) + 2);
    if (v3 <= v6)
      v3 = *(unsigned __int8 *)(a1 + 8 + 8 * (v5 - 1) + 2);
    else
      v3 = v3;
    if (v6 > 0x16)
      ++v2;
  }
  while (!(v5++ >> v4));
  return (v2 << (8 - v4)) | (unint64_t)(v3 << 32);
}

unint64_t sub_1D4B9725C(uint64_t a1, char *__dst, uint64_t a3, unsigned __int8 *a4, unint64_t a5, int a6)
{
  char *v6;
  uint64_t v7;
  int v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  unint64_t v56;
  unsigned __int8 v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int16 *v81;
  unsigned __int16 *v82;
  unsigned __int16 *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unsigned int v102;
  unint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t *v110;
  unint64_t v111;
  char *v112;
  char *v113;
  unint64_t v114;
  unint64_t v115;
  int64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v121;
  const void *v122;
  unint64_t *v123;
  unint64_t v124;
  int64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  const void *v138;
  char *v139;
  __int128 *v140;
  __int128 v141;
  char *v142;
  unint64_t v143;
  int64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  const void *v148;
  char *v149;
  __int128 *v150;
  __int128 v151;
  char *v152;
  __int128 *v153;
  __int128 v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  char *v174;
  __int128 *v175;
  __int128 v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  __int128 *v182;
  __int128 v183;
  char *v184;
  __int128 *v185;
  __int128 v186;
  uint64_t v187;
  char *v188;
  _OWORD *v189;
  _OWORD *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  _OWORD *v195;
  char *v196;
  char *v197;
  uint64_t v198;
  char *v199;
  __int128 *v200;
  __int128 v201;
  _OWORD *v202;
  char *v203;
  char *v204;
  uint64_t v205;
  char *v206;
  __int128 *v207;
  __int128 v208;
  char *v209;
  __int128 *v210;
  __int128 v211;
  int v213;
  unint64_t *v214;
  char *v215;
  unint64_t v216;
  char *v217;
  char *v218;
  unint64_t v219;
  int64_t v220;
  unint64_t v221;
  char *v222;
  BOOL v225;
  uint64_t v226;
  const void *v227;
  char *v228;
  __int128 *v229;
  __int128 v230;
  unint64_t v231;
  uint64_t v232;
  unint64_t v233;
  char *v234;
  char *v235;
  char *v236;
  uint64_t v240;
  char *v241;
  int64_t v242;
  const void *v243;
  char *v244;
  __int128 *v245;
  __int128 v246;
  char *v247;
  uint64_t v248;
  unint64_t v249;
  char *v251;
  char *v252;
  uint64_t v253;
  char *v254;
  __int128 *v255;
  __int128 v256;
  char *v257;
  size_t v258;
  uint64_t v259;
  char *v260;
  __int128 *v261;
  __int128 v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  __int128 *v267;
  __int128 v268;
  char *v269;
  __int128 *v270;
  __int128 v271;
  uint64_t v272;
  char *v273;
  _OWORD *v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  _OWORD *v280;
  char *v281;
  char *v282;
  uint64_t v283;
  char *v284;
  __int128 *v285;
  __int128 v286;
  _OWORD *v287;
  _OWORD *v288;
  char *v289;
  uint64_t v290;
  char *v291;
  __int128 *v292;
  __int128 v293;
  char *v294;
  __int128 *v295;
  __int128 v296;
  uint64_t v297;
  char *v298;
  int v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  char *v306;
  unint64_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  char *v314;
  _DWORD *v315;
  unint64_t v316;
  __int128 v317;
  __int128 v318;
  _OWORD v319[5];
  char *v320;
  unint64_t v321;
  int64_t v322;
  unint64_t v323;
  _QWORD v324[2];
  _QWORD v325[24];

  v6 = __dst;
  v7 = a1;
  v325[22] = *MEMORY[0x1E0C80C00];
  v315 = (_DWORD *)(a1 + 30004);
  v8 = *(_DWORD *)(a1 + 30376);
  if (v8 == 1)
    v9 = *(char **)(a1 + 30360);
  else
    v9 = &__dst[a3];
  v10 = *(char **)(a1 + 30120);
  v320 = v10;
  v11 = *(_QWORD *)(a1 + 30368);
  if (!a6)
  {
    v16 = v6;
    goto LABEL_16;
  }
  v12 = 0;
  v13 = *(char **)(a1 + 29896);
  v312 = a1 + 30380;
  v311 = *(_QWORD *)(a1 + 29904);
  v316 = *(_QWORD *)(a1 + 29912);
  v318 = 0u;
  memset(v319, 0, sizeof(v319));
  *v315 = 1;
  v317 = 0u;
  do
  {
    *((_QWORD *)&v319[3] + v12 + 1) = *(unsigned int *)(a1 + 26684 + 4 * v12);
    ++v12;
  }
  while (v12 != 3);
  if (a6 >= 8)
    v14 = 8;
  else
    v14 = a6;
  if (!a5)
    return -20;
  *((_QWORD *)&v318 + 1) = a4;
  *(_QWORD *)&v319[0] = a4 + 8;
  if (a5 < 8)
  {
    v20 = *a4;
    *(_QWORD *)&v318 = a4;
    *(_QWORD *)&v317 = v20;
    switch(a5)
    {
      case 2uLL:
        goto LABEL_29;
      case 3uLL:
        goto LABEL_28;
      case 4uLL:
        goto LABEL_27;
      case 5uLL:
        goto LABEL_26;
      case 6uLL:
        goto LABEL_25;
      case 7uLL:
        v20 |= (unint64_t)a4[6] << 48;
LABEL_25:
        v20 += (unint64_t)a4[5] << 40;
LABEL_26:
        v20 += (unint64_t)a4[4] << 32;
LABEL_27:
        v20 += (unint64_t)a4[3] << 24;
LABEL_28:
        v20 += (unint64_t)a4[2] << 16;
LABEL_29:
        *(_QWORD *)&v317 = v20 + ((unint64_t)a4[1] << 8);
        break;
      default:
        break;
    }
    if (!a4[a5 - 1])
      return -20;
    DWORD2(v317) = __clz(a4[a5 - 1]) - 8 * a5 + 41;
  }
  else
  {
    v15 = *(_QWORD *)&a4[a5 - 8];
    *(_QWORD *)&v318 = &a4[a5 - 8];
    *(_QWORD *)&v317 = v15;
    if (!HIBYTE(v15))
      return -20;
    DWORD2(v317) = __clz(HIBYTE(v15)) - 23;
    if (a5 > 0xFFFFFFFFFFFFFF88)
      return -20;
  }
  v299 = v14;
  v313 = v11;
  v300 = (uint64_t)v9;
  v298 = v6;
  v21 = v6 - v13;
  sub_1D4B9A454((_QWORD *)v319 + 1, (uint64_t)&v317, *(_QWORD *)a1);
  sub_1D4B9A454((_QWORD *)&v319[1] + 1, (uint64_t)&v317, *(_QWORD *)(v7 + 16));
  v308 = v7;
  sub_1D4B9A454((_QWORD *)&v319[2] + 1, (uint64_t)&v317, *(_QWORD *)(v7 + 8));
  v22 = DWORD2(v317);
  v314 = v13;
  if (DWORD2(v317) <= 0x40)
  {
    v25 = 0;
    v26 = (unint64_t *)*((_QWORD *)&v318 + 1);
    v27 = *((_QWORD *)&v319[0] + 1);
    v28 = *(_QWORD *)&v319[0];
    v29 = *(_QWORD *)&v319[1];
    v30 = *((_QWORD *)&v319[2] + 1);
    v31 = *(_QWORD *)&v319[3];
    v32 = *((_QWORD *)&v319[1] + 1);
    v33 = *(_QWORD *)&v319[2];
    v34 = v317;
    v35 = (unint64_t *)v318;
    v23 = v299 & ~(v299 >> 31);
    v36 = v325;
    v38 = *((_QWORD *)&v319[3] + 1);
    v37 = *(_QWORD *)&v319[4];
    while ((unint64_t)v35 < v28)
    {
      if (v35 != v26)
      {
        v39 = v22 >> 3;
        if ((unint64_t *)((char *)v35 - v39) >= v26)
          v39 = v39;
        else
          v39 = ((_DWORD)v35 - (_DWORD)v26);
        v35 = (unint64_t *)((char *)v35 - v39);
        *(_QWORD *)&v318 = v35;
        v22 -= 8 * v39;
        goto LABEL_44;
      }
      v35 = v26;
LABEL_45:
      if (v23 == v25)
      {
        v77 = a6;
        goto LABEL_91;
      }
      v40 = v23;
      v41 = (unsigned __int16 *)(v29 + 8 * v27);
      v42 = (unsigned __int16 *)(v31 + 8 * v30);
      v43 = *((unsigned int *)v42 + 1);
      v44 = *((unsigned int *)v41 + 1);
      v45 = (unsigned __int16 *)(v33 + 8 * v32);
      v46 = *((unsigned int *)v45 + 1);
      v47 = *((unsigned __int8 *)v41 + 2);
      v48 = *((unsigned __int8 *)v42 + 2);
      v49 = *((unsigned __int8 *)v45 + 2);
      v50 = *v41;
      v51 = *v42;
      v52 = *v45;
      v53 = *((unsigned __int8 *)v41 + 3);
      v54 = *((unsigned __int8 *)v42 + 3);
      v55 = *((unsigned __int8 *)v45 + 3);
      if (v49 >= 2)
      {
        v56 = v34 << v22 >> -(char)v49;
        v22 += v49;
        *((_QWORD *)&v319[4] + 1) = v37;
        v37 = v38;
        v38 = v56 + v46;
LABEL_50:
        v23 = v40;
        goto LABEL_51;
      }
      if (!*((_BYTE *)v45 + 2))
      {
        v38 = *((_QWORD *)&v319[3] + ((_DWORD)v44 == 0) + 1);
        v37 = *((_QWORD *)&v319[3] + ((_DWORD)v44 != 0) + 1);
        goto LABEL_50;
      }
      if ((_DWORD)v44)
        v72 = v46;
      else
        v72 = (v46 + 1);
      v73 = v34 << v22++;
      DWORD2(v317) = v22;
      v74 = v72 + (v73 >> 63);
      if (v74 == 3)
      {
        if (v38 == 1)
          v75 = 1;
        else
          v75 = v38 - 1;
        v23 = v40;
      }
      else
      {
        v76 = v74;
        if (*((_QWORD *)&v319[3] + v74 + 1))
          v75 = *((_QWORD *)&v319[3] + v74 + 1);
        else
          v75 = 1;
        _ZF = v76 == 1;
        v23 = v40;
        if (_ZF)
          goto LABEL_85;
      }
      *((_QWORD *)&v319[4] + 1) = v37;
LABEL_85:
      v37 = v38;
      v38 = v75;
LABEL_51:
      v57 = v48 + v47 + v49;
      *((_QWORD *)&v319[3] + 1) = v38;
      *(_QWORD *)&v319[4] = v37;
      v58 = (v34 << v22 >> -(char)v48) + v43;
      if (v48)
      {
        v22 += v48;
        v43 = v58;
      }
      if (v57 >= 0x1Fu)
      {
        v13 = v314;
        if (v22 <= 0x40)
        {
          if ((unint64_t)v35 >= v28)
          {
            v35 = (unint64_t *)((char *)v35 - (v22 >> 3));
            *(_QWORD *)&v318 = v35;
            v22 &= 7u;
          }
          else
          {
            if (v35 == v26)
            {
              v35 = v26;
              goto LABEL_55;
            }
            v71 = v22 >> 3;
            if ((unint64_t *)((char *)v35 - v71) >= v26)
              v71 = v71;
            else
              v71 = ((_DWORD)v35 - (_DWORD)v26);
            v35 = (unint64_t *)((char *)v35 - v71);
            *(_QWORD *)&v318 = v35;
            v22 -= 8 * v71;
          }
          v34 = *v35;
          *(_QWORD *)&v317 = *v35;
        }
      }
      else
      {
        v13 = v314;
      }
LABEL_55:
      v59 = (v34 << v22 >> -(char)v47) + v44;
      if (v47)
        v22 += v47;
      else
        v59 = v44;
      v60 = v22 + v53;
      v27 = ((v34 >> -(char)v60) & dword_1D4BD89C4[v53]) + v50;
      v61 = v60 + v54;
      v30 = ((v34 >> -(char)v61) & dword_1D4BD89C4[v54]) + v51;
      *((_QWORD *)&v319[2] + 1) = v30;
      v22 = v61 + v55;
      v62 = (v34 >> -(char)v22) & dword_1D4BD89C4[v55];
      DWORD2(v317) = v22;
      v32 = v62 + v52;
      *((_QWORD *)&v319[0] + 1) = v27;
      *((_QWORD *)&v319[1] + 1) = v32;
      v63 = v59 + v21;
      v64 = v316;
      if (v38 <= v59 + v21)
        v64 = (unint64_t)v13;
      _X6 = v64 + v63 - v38;
      __asm
      {
        PRFM            #0, [X6]
        PRFM            #0, [X6,#0x40]
      }
      v21 = v63 + v43;
      *(v36 - 2) = v59;
      *(v36 - 1) = v43;
      *v36 = v38;
      v36 += 3;
      ++v25;
      if (v22 > 0x40)
      {
        LODWORD(v23) = v25;
        goto LABEL_90;
      }
    }
    v35 = (unint64_t *)((char *)v35 - (v22 >> 3));
    *(_QWORD *)&v318 = v35;
    v22 &= 7u;
LABEL_44:
    DWORD2(v317) = v22;
    v34 = *v35;
    *(_QWORD *)&v317 = *v35;
    goto LABEL_45;
  }
  LODWORD(v23) = 0;
LABEL_90:
  v77 = a6;
  if ((int)v23 < v299)
    return -20;
LABEL_91:
  v309 = v300 - 32;
  v301 = v308 + 95916;
  v16 = v298;
  while (v22 < 0x41)
  {
    v78 = (_QWORD *)v318;
    if ((unint64_t)v318 >= *(_QWORD *)&v319[0])
    {
      v78 = (_QWORD *)(v318 - (v22 >> 3));
      *(_QWORD *)&v318 = v78;
      v22 &= 7u;
    }
    else
    {
      if ((_QWORD)v318 == *((_QWORD *)&v318 + 1))
        goto LABEL_101;
      v79 = v22 >> 3;
      if ((unint64_t)(v318 - v79) >= *((_QWORD *)&v318 + 1))
        v80 = v79;
      else
        v80 = (v318 - DWORD2(v318));
      v78 = (_QWORD *)(v318 - v80);
      *(_QWORD *)&v318 = v318 - v80;
      v22 -= 8 * v80;
    }
    DWORD2(v317) = v22;
    *(_QWORD *)&v317 = *v78;
LABEL_101:
    if ((int)v23 >= v77)
      goto LABEL_245;
    v81 = (unsigned __int16 *)(*(_QWORD *)&v319[1] + 8 * *((_QWORD *)&v319[0] + 1));
    v82 = (unsigned __int16 *)(*(_QWORD *)&v319[3] + 8 * *((_QWORD *)&v319[2] + 1));
    v83 = (unsigned __int16 *)(*(_QWORD *)&v319[2] + 8 * *((_QWORD *)&v319[1] + 1));
    v84 = *((unsigned int *)v82 + 1);
    v85 = *((unsigned int *)v81 + 1);
    v86 = *((unsigned int *)v83 + 1);
    v87 = *((unsigned __int8 *)v81 + 2);
    v88 = *((unsigned __int8 *)v82 + 2);
    v89 = *((unsigned __int8 *)v83 + 2);
    v90 = *v81;
    v91 = *v82;
    v92 = *v83;
    v93 = *((unsigned __int8 *)v81 + 3);
    v94 = *((unsigned __int8 *)v82 + 3);
    v95 = *((unsigned __int8 *)v83 + 3);
    if (v89 >= 2)
    {
      v96 = (_QWORD)v317 << v22 >> -(char)v89;
      v22 += v89;
      v97 = v96 + v86;
      v319[4] = *(_OWORD *)((char *)&v319[3] + 8);
      goto LABEL_107;
    }
    if (*((_BYTE *)v83 + 2))
    {
      if ((_DWORD)v85)
        v86 = v86;
      else
        v86 = (v86 + 1);
      v170 = (_QWORD)v317 << v22++;
      DWORD2(v317) = v22;
      v171 = v86 + (v170 >> 63);
      if (v171 == 3)
      {
        if (*((_QWORD *)&v319[3] + 1) == 1)
          v97 = 1;
        else
          v97 = *((_QWORD *)&v319[3] + 1) - 1;
        goto LABEL_199;
      }
      if (*((_QWORD *)&v319[3] + v171 + 1))
        v97 = *((_QWORD *)&v319[3] + v171 + 1);
      else
        v97 = 1;
      if (v171 != 1)
LABEL_199:
        *((_QWORD *)&v319[4] + 1) = *(_QWORD *)&v319[4];
      v98 = *((_QWORD *)&v319[3] + 1);
      goto LABEL_106;
    }
    v97 = *((_QWORD *)&v319[3] + ((_DWORD)v85 == 0) + 1);
    v98 = *((_QWORD *)&v319[3] + ((_DWORD)v85 != 0) + 1);
LABEL_106:
    *(_QWORD *)&v319[4] = v98;
LABEL_107:
    *((_QWORD *)&v319[3] + 1) = v97;
    if (v88)
    {
      v99 = (_QWORD)v317 << v22 >> -(char)v88;
      v22 += v88;
      v84 += v99;
    }
    if ((v88 + v87 + v89) >= 0x1Fu && v22 <= 0x40)
    {
      if ((unint64_t)v78 >= *(_QWORD *)&v319[0])
      {
        v167 = (_QWORD *)((char *)v78 - (v22 >> 3));
        *(_QWORD *)&v318 = v167;
        v22 &= 7u;
      }
      else
      {
        if (v78 == *((_QWORD **)&v318 + 1))
          goto LABEL_110;
        v165 = v22 >> 3;
        if ((unint64_t)v78 - v165 >= *((_QWORD *)&v318 + 1))
          v166 = v165;
        else
          v166 = ((_DWORD)v78 - DWORD2(v318));
        v167 = (_QWORD *)((char *)v78 - v166);
        *(_QWORD *)&v318 = v167;
        v22 -= 8 * v166;
      }
      *(_QWORD *)&v317 = *v167;
    }
LABEL_110:
    v100 = ((_QWORD)v317 << v22 >> -(char)v87) + v85;
    _ZF = v87 == 0;
    if (v87)
      v102 = v22 + v87;
    else
      v102 = v22;
    if (_ZF)
      v103 = v85;
    else
      v103 = v100;
    v104 = (((unint64_t)v317 >> -(char)(v102 + v93)) & dword_1D4BD89C4[v93]) + v90;
    v105 = v102 + v93 + v94;
    *((_QWORD *)&v319[2] + 1) = (((unint64_t)v317 >> -(char)v105) & dword_1D4BD89C4[v94]) + v91;
    v106 = v105 + v95;
    v107 = (unint64_t)v317 >> -(char)(v105 + v95);
    v108 = dword_1D4BD89C4[v95];
    DWORD2(v317) = v106;
    *((_QWORD *)&v319[0] + 1) = v104;
    *((_QWORD *)&v319[1] + 1) = (v107 & v108) + v92;
    if (v315[93] != 2)
    {
      v123 = &v324[3 * (v23 & 7)];
      v124 = *v123;
      v125 = v123[1];
      v126 = v123[2];
      v127 = &v16[*v123];
      v128 = v320;
      v129 = &v320[*v123];
      _X8 = &v127[-v126];
      __asm { PRFM            #0, [X8] }
      if ((unint64_t)v129 > v313 || (v19 = v125 + v124, (unint64_t)&v16[v125 + v124] > v309))
      {
        v321 = v124;
        v322 = v125;
        v323 = v126;
        v168 = v103;
        v169 = sub_1D4B9A5A0(v16, v300, &v321, &v320, v313, v13, v311, v316);
        v77 = a6;
        v19 = v169;
        v103 = v168;
      }
      else
      {
        *(_OWORD *)v16 = *(_OWORD *)v320;
        v225 = v124 > 0x10;
        v132 = v124 - 16;
        if (v225)
        {
          *((_OWORD *)v16 + 1) = *((_OWORD *)v128 + 1);
          if (v132 >= 17)
          {
            v174 = v16 + 32;
            v175 = (__int128 *)(v128 + 48);
            do
            {
              *(_OWORD *)v174 = *(v175 - 1);
              v176 = *v175;
              v175 += 2;
              *((_OWORD *)v174 + 1) = v176;
              v174 += 32;
            }
            while (v174 < v127);
          }
        }
        v320 = v129;
        if (v126 <= v127 - v13)
        {
LABEL_138:
          if (v126 < 0x10)
          {
            if (v126 > 7)
            {
              *(_QWORD *)v127 = *(_QWORD *)_X8;
            }
            else
            {
              v179 = dword_1D4BD8A64[v126];
              *v127 = *_X8;
              v127[1] = _X8[1];
              v127[2] = _X8[2];
              v127[3] = _X8[3];
              v180 = &_X8[dword_1D4BD8A44[v126]];
              *((_DWORD *)v127 + 1) = *(_DWORD *)v180;
              _X8 = &v180[-v179];
            }
            if ((unint64_t)v125 >= 9)
            {
              v189 = _X8 + 8;
              v190 = v127 + 8;
              v191 = &v127[v125];
              if (v127 - _X8 > 15)
              {
                *v190 = *v189;
                if (v125 >= 25)
                {
                  v199 = v127 + 24;
                  v200 = (__int128 *)(_X8 + 40);
                  do
                  {
                    *(_OWORD *)v199 = *(v200 - 1);
                    v201 = *v200;
                    v200 += 2;
                    *((_OWORD *)v199 + 1) = v201;
                    v199 += 32;
                  }
                  while (v199 < v191);
                }
              }
              else
              {
                do
                {
                  v192 = *(_QWORD *)v189;
                  v189 = (_OWORD *)((char *)v189 + 8);
                  *(_QWORD *)v190 = v192;
                  v190 = (_OWORD *)((char *)v190 + 8);
                }
                while (v190 < (_OWORD *)v191);
              }
              v77 = a6;
              v13 = v314;
            }
          }
          else
          {
            *(_OWORD *)v127 = *(_OWORD *)_X8;
            if (v125 >= 17)
            {
              v139 = v127 + 16;
              v140 = (__int128 *)(_X8 + 32);
              do
              {
                *(_OWORD *)v139 = *(v140 - 1);
                v141 = *v140;
                v140 += 2;
                *((_OWORD *)v139 + 1) = v141;
                v139 += 32;
              }
              while (v139 < &v127[v125]);
            }
          }
        }
        else
        {
          if (v126 > (unint64_t)&v127[-v311])
            return -20;
          v303 = v103;
          v306 = v16;
          v133 = v19;
          v134 = v97;
          v135 = v21;
          v136 = v84;
          v137 = _X8 - v13;
          v138 = (const void *)(v316 + _X8 - v13);
          if ((unint64_t)v138 + v125 > v316)
          {
            memmove(v127, v138, v13 - _X8);
            v127 -= v137;
            v125 += v137;
            _X8 = v13;
            v77 = a6;
            v84 = v136;
            v21 = v135;
            v97 = v134;
            v19 = v133;
            v103 = v303;
            v16 = v306;
            goto LABEL_138;
          }
          memmove(v127, v138, v125);
          v77 = a6;
          v84 = v136;
          v21 = v135;
          v97 = v134;
          v19 = v133;
          v103 = v303;
          v16 = v306;
        }
      }
LABEL_160:
      if (v19 > 0xFFFFFFFFFFFFFF88)
        return v19;
      v155 = v103 + v21;
      v156 = v316;
      if (v97 <= v103 + v21)
        v156 = (unint64_t)v13;
      _X9 = v156 + v155 - v97;
      __asm
      {
        PRFM            #0, [X9]
        PRFM            #0, [X9,#0x40]
      }
      v160 = &v324[3 * (v23 & 7)];
      *v160 = v103;
      v160[1] = v84;
      v160[2] = v97;
      v16 += v19;
      goto LABEL_169;
    }
    v305 = v84;
    v109 = v320;
    v110 = &v324[3 * (v23 & 7)];
    v111 = *v110;
    v112 = &v320[*v110];
    v113 = *(char **)(v308 + 30368);
    if (v112 <= v113)
    {
      v142 = v112 - 32;
      v144 = v110[1];
      v143 = v110[2];
      if ((unint64_t)v112 > v313 || (v19 = v144 + v111, &v16[v144 + v111] > v142))
      {
        v321 = v111;
        v322 = v144;
        v323 = v143;
        v172 = v103;
        v173 = sub_1D4B9A858(v16, v300, v142, &v321, &v320, v313, v13, v311, v316);
        v77 = a6;
        v19 = v173;
        v103 = v172;
      }
      else
      {
        v145 = &v16[v111];
        *(_OWORD *)v16 = *(_OWORD *)v320;
        if (v111 > 0x10)
        {
          *((_OWORD *)v16 + 1) = *((_OWORD *)v109 + 1);
          if ((uint64_t)(v111 - 16) >= 17)
          {
            v181 = v16 + 32;
            v182 = (__int128 *)(v109 + 48);
            do
            {
              *(_OWORD *)v181 = *(v182 - 1);
              v183 = *v182;
              v182 += 2;
              *((_OWORD *)v181 + 1) = v183;
              v181 += 32;
            }
            while (v181 < v145);
          }
        }
        v146 = &v145[-v143];
        v320 = v112;
        if (v143 > v145 - v13)
        {
          if (v143 > (unint64_t)&v145[-v311])
            return -20;
          v304 = v103;
          v147 = v146 - v13;
          v148 = (const void *)(v316 + v146 - v13);
          if ((unint64_t)v148 + v144 <= v316)
          {
            memmove(v145, v148, v144);
            v77 = a6;
            v103 = v304;
            v84 = v305;
            goto LABEL_160;
          }
          memmove(v145, v148, v13 - v146);
          v145 -= v147;
          v144 += v147;
          v146 = v13;
          v77 = a6;
          v103 = v304;
        }
        if (v143 >= 0x10)
        {
          *(_OWORD *)v145 = *(_OWORD *)v146;
          v84 = v305;
          if (v144 >= 17)
          {
            v149 = v145 + 16;
            v150 = (__int128 *)(v146 + 32);
            do
            {
              *(_OWORD *)v149 = *(v150 - 1);
              v151 = *v150;
              v150 += 2;
              *((_OWORD *)v149 + 1) = v151;
              v149 += 32;
            }
            while (v149 < &v145[v144]);
          }
          goto LABEL_160;
        }
        if (v143 > 7)
        {
          *(_QWORD *)v145 = *(_QWORD *)v146;
        }
        else
        {
          v187 = dword_1D4BD8A64[v143];
          *v145 = *v146;
          v145[1] = v146[1];
          v145[2] = v146[2];
          v145[3] = v146[3];
          v188 = &v146[dword_1D4BD8A44[v143]];
          *((_DWORD *)v145 + 1) = *(_DWORD *)v188;
          v146 = &v188[-v187];
        }
        if ((unint64_t)v144 >= 9)
        {
          v195 = v146 + 8;
          v196 = v145 + 8;
          v197 = &v145[v144];
          if (v145 - v146 > 15)
          {
            *(_OWORD *)v196 = *v195;
            if (v144 >= 25)
            {
              v206 = v145 + 24;
              v207 = (__int128 *)(v146 + 40);
              do
              {
                *(_OWORD *)v206 = *(v207 - 1);
                v208 = *v207;
                v207 += 2;
                *((_OWORD *)v206 + 1) = v208;
                v206 += 32;
              }
              while (v206 < v197);
            }
          }
          else
          {
            do
            {
              v198 = *(_QWORD *)v195;
              v195 = (_OWORD *)((char *)v195 + 8);
              *(_QWORD *)v196 = v198;
              v196 += 8;
            }
            while (v196 < v197);
          }
        }
        v77 = a6;
        v13 = v314;
      }
      v84 = v305;
      goto LABEL_160;
    }
    v114 = v113 - v320;
    if (v113 != v320)
    {
      if (v114 > v300 - (uint64_t)v16)
        return -70;
      v115 = v103;
      sub_1D4B9A4F4(v16, v320, v114);
      v103 = v115;
      v77 = a6;
      v111 -= v114;
      *v110 = v111;
      v16 += v114;
    }
    v320 = (char *)v312;
    v315[93] = 0;
    v116 = v110[1];
    v117 = v110[2];
    v118 = &v16[v111];
    _X8 = &v16[v111 - v117];
    __asm { PRFM            #0, [X8] }
    if (v312 + v111 > v301 || (v19 = v116 + v111, (unint64_t)&v16[v116 + v111] > v309))
    {
      v321 = v111;
      v322 = v116;
      v323 = v117;
      v177 = v103;
      v13 = v314;
      v178 = sub_1D4B9A5A0(v16, v300, &v321, &v320, v301, v314, v311, v316);
      v77 = a6;
      v19 = v178;
      v103 = v177;
      goto LABEL_241;
    }
    *(_OWORD *)v16 = *(_OWORD *)v312;
    if (v111 > 0x10)
    {
      *((_OWORD *)v16 + 1) = *(_OWORD *)(v312 + 16);
      if ((uint64_t)(v111 - 16) >= 17)
      {
        v184 = v16 + 32;
        v185 = (__int128 *)(v312 + 48);
        do
        {
          *(_OWORD *)v184 = *(v185 - 1);
          v186 = *v185;
          v185 += 2;
          *((_OWORD *)v184 + 1) = v186;
          v184 += 32;
        }
        while (v184 < v118);
      }
    }
    v320 = (char *)(v312 + v111);
    if (v117 <= v118 - v314)
      goto LABEL_128;
    if (v117 > (unint64_t)&v118[-v311])
      return -20;
    v302 = v103;
    v121 = _X8 - v314;
    v122 = (const void *)(v316 + _X8 - v314);
    if ((unint64_t)v122 + v116 > v316)
    {
      memmove(v118, v122, v314 - _X8);
      v118 -= v121;
      v116 += v121;
      _X8 = v314;
      v77 = a6;
      v103 = v302;
LABEL_128:
      if (v117 >= 0x10)
      {
        *(_OWORD *)v118 = *(_OWORD *)_X8;
        v84 = v305;
        if (v116 >= 17)
        {
          v152 = v118 + 16;
          v153 = (__int128 *)(_X8 + 32);
          v13 = v314;
          do
          {
            *(_OWORD *)v152 = *(v153 - 1);
            v154 = *v153;
            v153 += 2;
            *((_OWORD *)v152 + 1) = v154;
            v152 += 32;
          }
          while (v152 < &v118[v116]);
        }
        else
        {
          v13 = v314;
        }
        goto LABEL_165;
      }
      if (v117 > 7)
      {
        *(_QWORD *)v118 = *(_QWORD *)_X8;
      }
      else
      {
        v193 = dword_1D4BD8A64[v117];
        *v118 = *_X8;
        v118[1] = _X8[1];
        v118[2] = _X8[2];
        v118[3] = _X8[3];
        v194 = &_X8[dword_1D4BD8A44[v117]];
        *((_DWORD *)v118 + 1) = *(_DWORD *)v194;
        _X8 = &v194[-v193];
      }
      if ((unint64_t)v116 >= 9)
      {
        v202 = _X8 + 8;
        v203 = v118 + 8;
        v204 = &v118[v116];
        if (v118 - _X8 > 15)
        {
          *(_OWORD *)v203 = *v202;
          if (v116 >= 25)
          {
            v209 = v118 + 24;
            v210 = (__int128 *)(_X8 + 40);
            do
            {
              *(_OWORD *)v209 = *(v210 - 1);
              v211 = *v210;
              v210 += 2;
              *((_OWORD *)v209 + 1) = v211;
              v209 += 32;
            }
            while (v209 < v204);
          }
        }
        else
        {
          do
          {
            v205 = *(_QWORD *)v202;
            v202 = (_OWORD *)((char *)v202 + 8);
            *(_QWORD *)v203 = v205;
            v203 += 8;
          }
          while (v203 < v204);
        }
      }
      v77 = a6;
      v13 = v314;
LABEL_241:
      v84 = v305;
      goto LABEL_165;
    }
    memmove(v118, v122, v116);
    v77 = a6;
    v13 = v314;
    v103 = v302;
    v84 = v305;
LABEL_165:
    if (v19 > 0xFFFFFFFFFFFFFF88)
      return v19;
    v155 = v103 + v21;
    v161 = v316;
    if (v97 <= v103 + v21)
      v161 = (unint64_t)v13;
    _X9 = v161 + v155 - v97;
    __asm
    {
      PRFM            #0, [X9]
      PRFM            #0, [X9,#0x40]
    }
    *v110 = v103;
    v110[1] = v84;
    v110[2] = v97;
    v16 += v19;
    v313 = v308 + 95916;
LABEL_169:
    v21 = v155 + v84;
    LODWORD(v23) = v23 + 1;
    v22 = DWORD2(v317);
  }
  if ((int)v23 < v77)
    return -20;
LABEL_245:
  v213 = v23 - v299;
  if ((int)v23 - v299 < v77)
  {
    v307 = v308 + 95916;
    do
    {
      v214 = &v324[3 * (v213 & 7)];
      if (v315[93] == 2)
      {
        v215 = v320;
        v216 = *v214;
        v217 = &v320[*v214];
        v218 = *(char **)(v308 + 30368);
        if (v217 > v218)
        {
          v219 = v218 - v320;
          if (v218 != v320)
          {
            if (v219 > v300 - (uint64_t)v16)
              return -70;
            sub_1D4B9A4F4(v16, v320, v219);
            v77 = a6;
            v216 -= v219;
            *v214 = v216;
            v16 += v219;
          }
          v320 = (char *)v312;
          v315[93] = 0;
          v220 = v214[1];
          v221 = v214[2];
          v222 = &v16[v216];
          v19 = v220 + v216;
          _X8 = &v16[v216 - v221];
          __asm { PRFM            #0, [X8] }
          v225 = v312 + v216 > v307 || (unint64_t)&v16[v220 + v216] > v309;
          if (v225)
          {
            v321 = v216;
            v322 = v220;
            v323 = v221;
            v13 = v314;
            v263 = sub_1D4B9A5A0(v16, v300, &v321, &v320, v307, v314, v311, v316);
            v77 = a6;
            v19 = v263;
          }
          else
          {
            *(_OWORD *)v16 = *(_OWORD *)v312;
            if (v216 > 0x10)
            {
              *((_OWORD *)v16 + 1) = *(_OWORD *)(v312 + 16);
              if ((uint64_t)(v216 - 16) >= 17)
              {
                v269 = v16 + 32;
                v270 = (__int128 *)(v312 + 48);
                do
                {
                  *(_OWORD *)v269 = *(v270 - 1);
                  v271 = *v270;
                  v270 += 2;
                  *((_OWORD *)v269 + 1) = v271;
                  v269 += 32;
                }
                while (v269 < v222);
              }
            }
            v320 = (char *)(v312 + v216);
            v13 = v314;
            if (v221 <= v222 - v314)
            {
LABEL_261:
              if (v221 < 0x10)
              {
                if (v221 > 7)
                {
                  *(_QWORD *)v222 = *(_QWORD *)_X8;
                }
                else
                {
                  v278 = dword_1D4BD8A64[v221];
                  *v222 = *_X8;
                  v222[1] = _X8[1];
                  v222[2] = _X8[2];
                  v222[3] = _X8[3];
                  v279 = &_X8[dword_1D4BD8A44[v221]];
                  *((_DWORD *)v222 + 1) = *(_DWORD *)v279;
                  _X8 = &v279[-v278];
                }
                if ((unint64_t)v220 >= 9)
                {
                  v287 = _X8 + 8;
                  v288 = v222 + 8;
                  v289 = &v222[v220];
                  if (v222 - _X8 > 15)
                  {
                    *v288 = *v287;
                    if (v220 >= 25)
                    {
                      v294 = v222 + 24;
                      v295 = (__int128 *)(_X8 + 40);
                      do
                      {
                        *(_OWORD *)v294 = *(v295 - 1);
                        v296 = *v295;
                        v295 += 2;
                        *((_OWORD *)v294 + 1) = v296;
                        v294 += 32;
                      }
                      while (v294 < v289);
                    }
                  }
                  else
                  {
                    do
                    {
                      v290 = *(_QWORD *)v287;
                      v287 = (_OWORD *)((char *)v287 + 8);
                      *(_QWORD *)v288 = v290;
                      v288 = (_OWORD *)((char *)v288 + 8);
                    }
                    while (v288 < (_OWORD *)v289);
                  }
                }
                v77 = a6;
                v13 = v314;
              }
              else
              {
                *(_OWORD *)v222 = *(_OWORD *)_X8;
                if (v220 >= 17)
                {
                  v228 = v222 + 16;
                  v229 = (__int128 *)(_X8 + 32);
                  do
                  {
                    *(_OWORD *)v228 = *(v229 - 1);
                    v230 = *v229;
                    v229 += 2;
                    *((_OWORD *)v228 + 1) = v230;
                    v228 += 32;
                  }
                  while (v228 < &v222[v220]);
                }
              }
            }
            else
            {
              if (v221 > (unint64_t)&v222[-v311])
                return -20;
              v226 = _X8 - v314;
              v227 = (const void *)(v316 + _X8 - v314);
              if ((unint64_t)v227 + v220 > v316)
              {
                memmove(v222, v227, v314 - _X8);
                v222 -= v226;
                v220 += v226;
                _X8 = v314;
                v77 = a6;
                v13 = v314;
                goto LABEL_261;
              }
              memmove(v222, v227, v220);
              v77 = a6;
              v13 = v314;
            }
          }
          if (v19 >= 0xFFFFFFFFFFFFFF89)
            return v19;
          v16 += v19;
          v313 = v308 + 95916;
          goto LABEL_302;
        }
        v247 = v217 - 32;
        v248 = v214[1];
        v249 = v214[2];
        v19 = v248 + v216;
        if ((unint64_t)v217 > v313 || &v16[v248 + v216] > v247)
        {
          v321 = v216;
          v322 = v248;
          v323 = v249;
          v13 = v314;
          v259 = sub_1D4B9A858(v16, v300, v247, &v321, &v320, v313, v314, v311, v316);
          goto LABEL_306;
        }
        v251 = &v16[v216];
        *(_OWORD *)v16 = *(_OWORD *)v320;
        if (v216 > 0x10)
        {
          *((_OWORD *)v16 + 1) = *((_OWORD *)v215 + 1);
          if ((uint64_t)(v216 - 16) >= 17)
          {
            v266 = v16 + 32;
            v267 = (__int128 *)(v215 + 48);
            do
            {
              *(_OWORD *)v266 = *(v267 - 1);
              v268 = *v267;
              v267 += 2;
              *((_OWORD *)v266 + 1) = v268;
              v266 += 32;
            }
            while (v266 < v251);
          }
        }
        v252 = &v251[-v249];
        v320 = v217;
        v13 = v314;
        if (v249 <= v251 - v314)
          goto LABEL_289;
        if (v249 > (unint64_t)&v251[-v311])
          return -20;
        v241 = v314;
        v253 = v252 - v314;
        v243 = (const void *)(v316 + v252 - v314);
        if ((unint64_t)v243 + v248 > v316)
        {
          memmove(v251, v243, v314 - v252);
          v251 -= v253;
          v248 += v253;
          v252 = v314;
          v77 = a6;
          v13 = v314;
LABEL_289:
          if (v249 >= 0x10)
          {
            *(_OWORD *)v251 = *(_OWORD *)v252;
            if (v248 >= 17)
            {
              v254 = v251 + 16;
              v255 = (__int128 *)(v252 + 32);
              do
              {
                *(_OWORD *)v254 = *(v255 - 1);
                v256 = *v255;
                v255 += 2;
                *((_OWORD *)v254 + 1) = v256;
                v254 += 32;
              }
              while (v254 < &v251[v248]);
            }
            goto LABEL_297;
          }
          if (v249 > 7)
          {
            *(_QWORD *)v251 = *(_QWORD *)v252;
          }
          else
          {
            v272 = dword_1D4BD8A64[v249];
            *v251 = *v252;
            v251[1] = v252[1];
            v251[2] = v252[2];
            v251[3] = v252[3];
            v273 = &v252[dword_1D4BD8A44[v249]];
            *((_DWORD *)v251 + 1) = *(_DWORD *)v273;
            v252 = &v273[-v272];
          }
          if ((unint64_t)v248 >= 9)
          {
            v280 = v252 + 8;
            v281 = v251 + 8;
            v282 = &v251[v248];
            if (v251 - v252 > 15)
            {
              *(_OWORD *)v281 = *v280;
              if (v248 >= 25)
              {
                v291 = v251 + 24;
                v292 = (__int128 *)(v252 + 40);
                do
                {
                  *(_OWORD *)v291 = *(v292 - 1);
                  v293 = *v292;
                  v292 += 2;
                  *((_OWORD *)v291 + 1) = v293;
                  v291 += 32;
                }
                while (v291 < v282);
              }
            }
            else
            {
              do
              {
                v283 = *(_QWORD *)v280;
                v280 = (_OWORD *)((char *)v280 + 8);
                *(_QWORD *)v281 = v283;
                v281 += 8;
              }
              while (v281 < v282);
            }
          }
          goto LABEL_348;
        }
        v257 = v251;
        v258 = v248;
      }
      else
      {
        v231 = *v214;
        v232 = v214[1];
        v233 = v214[2];
        v234 = &v16[v231];
        v19 = v232 + v231;
        v235 = v320;
        v236 = &v320[v231];
        _X8 = &v16[v231 - v233];
        __asm { PRFM            #0, [X8] }
        if ((unint64_t)&v320[v231] > v313 || (unint64_t)&v16[v232 + v231] > v309)
        {
          v321 = v231;
          v322 = v232;
          v323 = v233;
          v259 = sub_1D4B9A5A0(v16, v300, &v321, &v320, v313, v13, v311, v316);
LABEL_306:
          v77 = a6;
          v19 = v259;
          goto LABEL_297;
        }
        *(_OWORD *)v16 = *(_OWORD *)v320;
        v225 = v231 > 0x10;
        v240 = v231 - 16;
        if (v225)
        {
          *((_OWORD *)v16 + 1) = *((_OWORD *)v235 + 1);
          if (v240 >= 17)
          {
            v260 = v16 + 32;
            v261 = (__int128 *)(v235 + 48);
            do
            {
              *(_OWORD *)v260 = *(v261 - 1);
              v262 = *v261;
              v261 += 2;
              *((_OWORD *)v260 + 1) = v262;
              v260 += 32;
            }
            while (v260 < v234);
          }
        }
        v320 = v236;
        if (v233 <= v234 - v13)
          goto LABEL_275;
        if (v233 > (unint64_t)&v234[-v311])
          return -20;
        v241 = v13;
        v242 = _X8 - v13;
        v243 = (const void *)(v316 + v242);
        if (v316 + v242 + v232 > v316)
        {
          memmove(v234, v243, -v242);
          v234 -= v242;
          v232 += v242;
          _X8 = v241;
          v77 = a6;
          v13 = v241;
LABEL_275:
          if (v233 >= 0x10)
          {
            *(_OWORD *)v234 = *(_OWORD *)_X8;
            if (v232 >= 17)
            {
              v244 = v234 + 16;
              v245 = (__int128 *)(_X8 + 32);
              do
              {
                *(_OWORD *)v244 = *(v245 - 1);
                v246 = *v245;
                v245 += 2;
                *((_OWORD *)v244 + 1) = v246;
                v244 += 32;
              }
              while (v244 < &v234[v232]);
            }
            goto LABEL_297;
          }
          if (v233 > 7)
          {
            *(_QWORD *)v234 = *(_QWORD *)_X8;
          }
          else
          {
            v264 = dword_1D4BD8A64[v233];
            *v234 = *_X8;
            v234[1] = _X8[1];
            v234[2] = _X8[2];
            v234[3] = _X8[3];
            v265 = &_X8[dword_1D4BD8A44[v233]];
            *((_DWORD *)v234 + 1) = *(_DWORD *)v265;
            _X8 = &v265[-v264];
          }
          if ((unint64_t)v232 >= 9)
          {
            v274 = _X8 + 8;
            v275 = v234 + 8;
            v276 = &v234[v232];
            if (v234 - _X8 > 15)
            {
              *(_OWORD *)v275 = *v274;
              if (v232 >= 25)
              {
                v284 = v234 + 24;
                v285 = (__int128 *)(_X8 + 40);
                do
                {
                  *(_OWORD *)v284 = *(v285 - 1);
                  v286 = *v285;
                  v285 += 2;
                  *((_OWORD *)v284 + 1) = v286;
                  v284 += 32;
                }
                while (v284 < v276);
              }
            }
            else
            {
              do
              {
                v277 = *(_QWORD *)v274;
                v274 = (_OWORD *)((char *)v274 + 8);
                *(_QWORD *)v275 = v277;
                v275 += 8;
              }
              while (v275 < v276);
            }
          }
LABEL_348:
          v77 = a6;
          v13 = v314;
          goto LABEL_297;
        }
        v257 = v234;
        v258 = v232;
      }
      memmove(v257, v243, v258);
      v77 = a6;
      v13 = v241;
LABEL_297:
      if (v19 > 0xFFFFFFFFFFFFFF88)
        return v19;
      v16 += v19;
LABEL_302:
      ++v213;
    }
    while (v213 != v77);
  }
  v297 = 0;
  v7 = v308;
  do
  {
    *(_DWORD *)(v308 + 26684 + 4 * v297) = *((_QWORD *)&v319[3] + v297 + 1);
    ++v297;
  }
  while (v297 != 3);
  v8 = v315[93];
  v10 = v320;
  v6 = v298;
  v9 = (char *)v300;
  v11 = v313;
LABEL_16:
  if (v8 == 2)
  {
    v17 = v11 - (_QWORD)v10;
    if (v11 - (unint64_t)v10 > v9 - v16)
      return -70;
    if (v16)
    {
      memmove(v16, v10, v11 - (_QWORD)v10);
      v16 += v17;
    }
    v10 = (char *)(v7 + 30380);
    v11 = v7 + 95916;
  }
  v18 = v11 - (_QWORD)v10;
  if (v11 - (unint64_t)v10 > v9 - v16)
    return -70;
  if (v16)
  {
    memmove(v16, v10, v11 - (_QWORD)v10);
    v24 = &v16[v18];
  }
  else
  {
    v24 = 0;
  }
  return v24 - v6;
}

uint64_t sub_1D4B98B64(uint64_t *a1, char *__dst, uint64_t a3, unsigned __int8 *a4, unint64_t a5, int a6)
{
  char *v6;
  _DWORD *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  int v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  char *v49;
  char *v50;
  int v51;
  unint64_t v52;
  char *v53;
  unint64_t v59;
  uint64_t v60;
  const void *v61;
  char *v62;
  __int128 *v63;
  __int128 v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  const void *v69;
  char *v70;
  __int128 *v71;
  __int128 v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unsigned __int16 *v77;
  unsigned __int16 *v78;
  unsigned __int16 *v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  __int128 *v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  _OWORD *v113;
  unint64_t v114;
  uint64_t v115;
  _OWORD *v116;
  __int128 *v117;
  __int128 v118;
  int v119;
  unsigned int v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  unsigned __int16 *v124;
  unsigned __int16 *v125;
  unsigned __int16 *v126;
  int64_t v127;
  unint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  int v148;
  unint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v155;
  const void *v156;
  char *v157;
  __int128 *v158;
  __int128 v159;
  unint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  char *v167;
  __int128 *v168;
  __int128 v169;
  uint64_t v170;
  char *v171;
  unint64_t v172;
  uint64_t v173;
  _OWORD *v174;
  _OWORD *v175;
  unint64_t v176;
  uint64_t v177;
  _OWORD *v178;
  __int128 *v179;
  __int128 v180;
  uint64_t i;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  char *v189;
  __int128 *v190;
  __int128 v191;
  uint64_t v192;
  char *v193;
  _OWORD *v194;
  _OWORD *v195;
  char *v196;
  uint64_t v197;
  char *v198;
  __int128 *v199;
  __int128 v200;
  char *v201;
  uint64_t v202;
  char *v203;
  uint64_t *v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  __int128 v209;
  __int128 v210;
  _OWORD v211[5];
  char *v212;
  unint64_t v213;
  int64_t v214;
  unint64_t v215;

  v6 = __dst;
  v8 = (_DWORD *)a1 + 7501;
  v9 = &__dst[a3];
  v10 = (char *)a1[3765];
  v212 = v10;
  v11 = a1[3796];
  if (!a6)
  {
    v205 = a1;
    v15 = __dst;
    goto LABEL_10;
  }
  v12 = 0;
  v13 = (char *)a1[3737];
  v207 = a1[3739];
  v208 = a1[3738];
  v210 = 0u;
  memset(v211, 0, sizeof(v211));
  *v8 = 1;
  v209 = 0u;
  do
  {
    *((_QWORD *)&v211[3] + v12 + 1) = *((unsigned int *)a1 + v12 + 6671);
    ++v12;
  }
  while (v12 != 3);
  if (!a5)
    return -20;
  *((_QWORD *)&v210 + 1) = a4;
  *(_QWORD *)&v211[0] = a4 + 8;
  if (a5 < 8)
  {
    v19 = *a4;
    *(_QWORD *)&v210 = a4;
    *(_QWORD *)&v209 = v19;
    switch(a5)
    {
      case 2uLL:
        goto LABEL_23;
      case 3uLL:
        goto LABEL_22;
      case 4uLL:
        goto LABEL_21;
      case 5uLL:
        goto LABEL_20;
      case 6uLL:
        goto LABEL_19;
      case 7uLL:
        v19 |= (unint64_t)a4[6] << 48;
LABEL_19:
        v19 += (unint64_t)a4[5] << 40;
LABEL_20:
        v19 += (unint64_t)a4[4] << 32;
LABEL_21:
        v19 += (unint64_t)a4[3] << 24;
LABEL_22:
        v19 += (unint64_t)a4[2] << 16;
LABEL_23:
        *(_QWORD *)&v209 = v19 + ((unint64_t)a4[1] << 8);
        break;
      default:
        break;
    }
    if (!a4[a5 - 1])
      return -20;
    DWORD2(v209) = __clz(a4[a5 - 1]) - 8 * a5 + 41;
  }
  else
  {
    v14 = *(_QWORD *)&a4[a5 - 8];
    *(_QWORD *)&v210 = &a4[a5 - 8];
    *(_QWORD *)&v209 = v14;
    if (!HIBYTE(v14))
      return -20;
    DWORD2(v209) = __clz(HIBYTE(v14)) - 23;
    if (a5 > 0xFFFFFFFFFFFFFF88)
      return -20;
  }
  v206 = v11;
  sub_1D4B9A454((_QWORD *)v211 + 1, (uint64_t)&v209, *a1);
  sub_1D4B9A454((_QWORD *)&v211[1] + 1, (uint64_t)&v209, a1[2]);
  sub_1D4B9A454((_QWORD *)&v211[2] + 1, (uint64_t)&v209, a1[1]);
  v20 = (unsigned __int16 *)(*(_QWORD *)&v211[1] + 8 * *((_QWORD *)&v211[0] + 1));
  v21 = (unsigned __int16 *)(*(_QWORD *)&v211[3] + 8 * *((_QWORD *)&v211[2] + 1));
  v22 = (unsigned __int16 *)(*(_QWORD *)&v211[2] + 8 * *((_QWORD *)&v211[1] + 1));
  v23 = *((unsigned int *)v21 + 1);
  v24 = *((unsigned int *)v20 + 1);
  v25 = *((unsigned int *)v22 + 1);
  v26 = *((unsigned __int8 *)v20 + 2);
  v27 = *((unsigned __int8 *)v21 + 2);
  v28 = *((unsigned __int8 *)v22 + 2);
  v29 = *v20;
  v30 = *v21;
  v31 = *v22;
  v32 = *((unsigned __int8 *)v20 + 3);
  v33 = *((unsigned __int8 *)v21 + 3);
  v34 = *((unsigned __int8 *)v22 + 3);
  v201 = (char *)a1 + 30380;
  if (v28 >= 2)
  {
    v35 = (_QWORD)v209 << SBYTE8(v209) >> -(char)v28;
    DWORD2(v209) += v28;
    v36 = v35 + v25;
    v211[4] = *(_OWORD *)((char *)&v211[3] + 8);
    goto LABEL_33;
  }
  if (*((_BYTE *)v22 + 2))
  {
    if ((_DWORD)v24)
      v25 = v25;
    else
      v25 = (v25 + 1);
    v187 = (_QWORD)v209 << SBYTE8(v209);
    ++DWORD2(v209);
    v188 = v25 + (v187 >> 63);
    if (v188 == 3)
    {
      if (*((_QWORD *)&v211[3] + 1) == 1)
        v36 = 1;
      else
        v36 = *((_QWORD *)&v211[3] + 1) - 1;
    }
    else
    {
      if (*((_QWORD *)&v211[3] + v188 + 1))
        v36 = *((_QWORD *)&v211[3] + v188 + 1);
      else
        v36 = 1;
      if (v188 == 1)
        goto LABEL_257;
    }
    *((_QWORD *)&v211[4] + 1) = *(_QWORD *)&v211[4];
LABEL_257:
    v38 = *((_QWORD *)&v211[3] + 1);
    goto LABEL_32;
  }
  v36 = *((_QWORD *)&v211[3] + ((_DWORD)v24 == 0) + 1);
  v38 = *((_QWORD *)&v211[3] + ((_DWORD)v24 != 0) + 1);
LABEL_32:
  *(_QWORD *)&v211[4] = v38;
LABEL_33:
  *((_QWORD *)&v211[3] + 1) = v36;
  v11 = v206;
  v39 = v27 + v26 + v28;
  if (v27)
  {
    v40 = (_QWORD)v209 << SBYTE8(v209) >> -(char)v27;
    DWORD2(v209) += v27;
    v23 += v40;
  }
  v41 = DWORD2(v209);
  v202 = (uint64_t)v9;
  v203 = v6;
  if (v39 >= 0x1Fu && DWORD2(v209) <= 0x40)
  {
    v183 = v210;
    if ((unint64_t)v210 >= *(_QWORD *)&v211[0])
    {
      *(_QWORD *)&v210 = v210 - ((unint64_t)DWORD2(v209) >> 3);
      v41 = BYTE8(v209) & 7;
      *(_QWORD *)&v209 = *(_QWORD *)v210;
      v11 = v206;
    }
    else
    {
      v11 = v206;
      if ((_QWORD)v210 != *((_QWORD *)&v210 + 1))
      {
        v184 = (unint64_t)DWORD2(v209) >> 3;
        if ((unint64_t)v210 - v184 >= *((_QWORD *)&v210 + 1))
          v185 = v184;
        else
          v185 = (v210 - DWORD2(v210));
        *(_QWORD *)&v210 = v210 - v185;
        v41 = DWORD2(v209) - 8 * v185;
        *(_QWORD *)&v209 = *(_QWORD *)(v183 - v185);
      }
    }
  }
  v42 = ((_QWORD)v209 << v41 >> -(char)v26) + v24;
  _ZF = v26 == 0;
  if (v26)
    v44 = v41 + v26;
  else
    v44 = v41;
  if (_ZF)
    v45 = v24;
  else
    v45 = v42;
  v46 = (((unint64_t)v209 >> -(char)(v44 + v32)) & dword_1D4BD89C4[v32]) + v29;
  *((_QWORD *)&v211[2] + 1) = (((unint64_t)v209 >> -(char)(v44 + v32 + v33)) & dword_1D4BD89C4[v33]) + v30;
  v47 = v44 + v32 + v33 + v34;
  v48 = ((unint64_t)v209 >> -(char)(v44 + v32 + v33 + v34)) & dword_1D4BD89C4[v34];
  DWORD2(v209) = v47;
  *((_QWORD *)&v211[0] + 1) = v46;
  *((_QWORD *)&v211[1] + 1) = v48 + v31;
  v49 = &v10[v45];
  v205 = a1;
  v50 = (char *)a1[3796];
  if (&v10[v45] <= v50)
  {
    v15 = v6;
    v51 = a6;
    while (1)
    {
      v65 = v49 - 32;
      if ((unint64_t)v49 > v11 || (v18 = v45 + v23, &v15[v45 + v23] > v65))
      {
        v213 = v45;
        v214 = v23;
        v215 = v36;
        v101 = sub_1D4B9A858(v15, v202, v65, &v213, &v212, v206, v13, v208, v207);
        v11 = v206;
        v18 = v101;
      }
      else
      {
        v66 = &v15[v45];
        *(_OWORD *)v15 = *(_OWORD *)v10;
        if (v45 > 0x10)
        {
          *((_OWORD *)v15 + 1) = *((_OWORD *)v10 + 1);
          if ((uint64_t)(v45 - 16) >= 17)
          {
            v102 = v15 + 32;
            v103 = (__int128 *)(v10 + 48);
            do
            {
              *(_OWORD *)v102 = *(v103 - 1);
              v104 = *v103;
              v103 += 2;
              *((_OWORD *)v102 + 1) = v104;
              v102 += 32;
            }
            while (v102 < v66);
          }
        }
        v67 = &v66[-v36];
        v212 = v49;
        if (v36 > v66 - v13)
        {
          if (v36 > (unint64_t)&v66[-v208])
            return -20;
          v68 = v67 - v13;
          v69 = (const void *)(v207 + v67 - v13);
          if ((unint64_t)v69 + v23 <= v207)
          {
            memmove(&v15[v45], v69, v23);
            v11 = v206;
            goto LABEL_74;
          }
          memmove(&v15[v45], v69, v13 - v67);
          v66 -= v68;
          v23 += v68;
          v67 = v13;
          v11 = v206;
        }
        if (v36 < 0x10)
        {
          if (v36 > 7)
          {
            *(_QWORD *)v66 = *(_QWORD *)v67;
          }
          else
          {
            v108 = dword_1D4BD8A64[v36];
            *v66 = *v67;
            v66[1] = v67[1];
            v66[2] = v67[2];
            v66[3] = v67[3];
            v109 = &v67[dword_1D4BD8A44[v36]];
            *((_DWORD *)v66 + 1) = *(_DWORD *)v109;
            v67 = &v109[-v108];
          }
          if ((unint64_t)v23 >= 9)
          {
            v112 = v67 + 8;
            v113 = v66 + 8;
            v114 = (unint64_t)&v66[v23];
            if (v66 - v67 > 15)
            {
              *v113 = *v112;
              if (v23 >= 25)
              {
                v116 = v66 + 24;
                v117 = (__int128 *)(v67 + 40);
                do
                {
                  *v116 = *(v117 - 1);
                  v118 = *v117;
                  v117 += 2;
                  v116[1] = v118;
                  v116 += 2;
                }
                while ((unint64_t)v116 < v114);
              }
            }
            else
            {
              do
              {
                v115 = *(_QWORD *)v112;
                v112 = (_OWORD *)((char *)v112 + 8);
                *(_QWORD *)v113 = v115;
                v113 = (_OWORD *)((char *)v113 + 8);
              }
              while ((unint64_t)v113 < v114);
            }
          }
        }
        else
        {
          *(_OWORD *)v66 = *(_OWORD *)v67;
          if (v23 >= 17)
          {
            v70 = v66 + 16;
            v71 = (__int128 *)(v67 + 32);
            do
            {
              *(_OWORD *)v70 = *(v71 - 1);
              v72 = *v71;
              v71 += 2;
              *((_OWORD *)v70 + 1) = v72;
              v70 += 32;
            }
            while (v70 < &v66[v23]);
          }
        }
      }
LABEL_74:
      if (v18 > 0xFFFFFFFFFFFFFF88)
        return v18;
      v15 += v18;
      if (!--v51)
        goto LABEL_223;
      v73 = DWORD2(v209);
      if (DWORD2(v209) <= 0x40)
      {
        if ((unint64_t)v210 >= *(_QWORD *)&v211[0])
        {
          v76 = (_QWORD *)(v210 - ((unint64_t)DWORD2(v209) >> 3));
          *(_QWORD *)&v210 = v76;
          v73 = BYTE8(v209) & 7;
        }
        else
        {
          if ((_QWORD)v210 == *((_QWORD *)&v210 + 1))
            goto LABEL_85;
          v74 = (unint64_t)DWORD2(v209) >> 3;
          if ((unint64_t)v210 - v74 >= *((_QWORD *)&v210 + 1))
            v75 = v74;
          else
            v75 = (v210 - DWORD2(v210));
          v76 = (_QWORD *)(v210 - v75);
          *(_QWORD *)&v210 = v210 - v75;
          v73 = DWORD2(v209) - 8 * v75;
        }
        *(_QWORD *)&v209 = *v76;
      }
LABEL_85:
      v77 = (unsigned __int16 *)(*(_QWORD *)&v211[1] + 8 * *((_QWORD *)&v211[0] + 1));
      v78 = (unsigned __int16 *)(*(_QWORD *)&v211[3] + 8 * *((_QWORD *)&v211[2] + 1));
      v79 = (unsigned __int16 *)(*(_QWORD *)&v211[2] + 8 * *((_QWORD *)&v211[1] + 1));
      v23 = *((unsigned int *)v78 + 1);
      v80 = *((unsigned int *)v77 + 1);
      v81 = *((unsigned int *)v79 + 1);
      v82 = *((unsigned __int8 *)v77 + 2);
      v83 = *((unsigned __int8 *)v78 + 2);
      v84 = *((unsigned __int8 *)v79 + 2);
      v85 = *v77;
      v86 = *v78;
      v87 = *v79;
      v88 = *((unsigned __int8 *)v77 + 3);
      v89 = *((unsigned __int8 *)v78 + 3);
      v90 = *((unsigned __int8 *)v79 + 3);
      if (v84 >= 2)
      {
        v91 = (_QWORD)v209 << v73 >> -(char)v84;
        v73 += v84;
        v36 = v91 + v81;
        *((_QWORD *)&v211[4] + 1) = *(_QWORD *)&v211[4];
        goto LABEL_87;
      }
      if (*((_BYTE *)v79 + 2))
      {
        if ((_DWORD)v80)
          v81 = v81;
        else
          v81 = (v81 + 1);
        v110 = (_QWORD)v209 << v73++;
        DWORD2(v209) = v73;
        v111 = v81 + (v110 >> 63);
        if (v111 == 3)
        {
          if (*((_QWORD *)&v211[3] + 1) == 1)
            v36 = 1;
          else
            v36 = *((_QWORD *)&v211[3] + 1) - 1;
          goto LABEL_130;
        }
        if (*((_QWORD *)&v211[3] + v111 + 1))
          v36 = *((_QWORD *)&v211[3] + v111 + 1);
        else
          v36 = 1;
        if (v111 != 1)
LABEL_130:
          *((_QWORD *)&v211[4] + 1) = *(_QWORD *)&v211[4];
LABEL_87:
        v92 = (char *)&v211[3] + 8;
        goto LABEL_90;
      }
      v36 = *((_QWORD *)&v211[3] + ((_DWORD)v80 == 0) + 1);
      v92 = (char *)&v211[3] + 8 * ((_DWORD)v80 != 0) + 8;
LABEL_90:
      v93 = *(_QWORD *)v92;
      *((_QWORD *)&v211[3] + 1) = v36;
      *(_QWORD *)&v211[4] = v93;
      if (v83)
      {
        v94 = (_QWORD)v209 << v73 >> -(char)v83;
        v73 += v83;
        v23 += v94;
      }
      if ((v83 + v82 + v84) < 0x1Fu || v73 > 0x40)
        goto LABEL_93;
      if ((unint64_t)v210 >= *(_QWORD *)&v211[0])
      {
        v107 = (_QWORD *)(v210 - (v73 >> 3));
        *(_QWORD *)&v210 = v107;
        v73 &= 7u;
LABEL_125:
        *(_QWORD *)&v209 = *v107;
        goto LABEL_93;
      }
      if ((_QWORD)v210 != *((_QWORD *)&v210 + 1))
      {
        v105 = v73 >> 3;
        if ((unint64_t)(v210 - v105) >= *((_QWORD *)&v210 + 1))
          v106 = v105;
        else
          v106 = (v210 - DWORD2(v210));
        v107 = (_QWORD *)(v210 - v106);
        *(_QWORD *)&v210 = v210 - v106;
        v73 -= 8 * v106;
        goto LABEL_125;
      }
LABEL_93:
      v95 = ((_QWORD)v209 << v73 >> -(char)v82) + v80;
      if (v82)
      {
        v73 += v82;
        v45 = v95;
      }
      else
      {
        v45 = v80;
      }
      v96 = v73 + v88;
      v97 = (((unint64_t)v209 >> -(char)v96) & dword_1D4BD89C4[v88]) + v85;
      v98 = v96 + v89;
      *((_QWORD *)&v211[2] + 1) = (((unint64_t)v209 >> -(char)v98) & dword_1D4BD89C4[v89]) + v86;
      v99 = v98 + v90;
      v100 = ((unint64_t)v209 >> -(char)v99) & dword_1D4BD89C4[v90];
      DWORD2(v209) = v99;
      *((_QWORD *)&v211[0] + 1) = v97;
      *((_QWORD *)&v211[1] + 1) = v100 + v87;
      v10 = v212;
      v49 = &v212[v45];
      v50 = (char *)v205[3796];
      if (&v212[v45] > v50)
        goto LABEL_44;
    }
  }
  v15 = v6;
  v51 = a6;
LABEL_44:
  if (v51 < 1)
    return -20;
  v52 = v50 - v10;
  if (v50 != v10)
  {
    if (v52 > v202 - (uint64_t)v15)
      return -70;
    sub_1D4B9A4F4(v15, v10, v50 - v10);
    v45 -= v52;
    v15 += v52;
  }
  v212 = v201;
  v11 = (unint64_t)v205 + 95916;
  v8[93] = 0;
  v53 = &v15[v45];
  _X8 = &v15[v45 - v36];
  __asm { PRFM            #0, [X8] }
  v59 = v202 - 32;
  if (&v201[v45] > (char *)v205 + 95916 || (v18 = v45 + v23, (unint64_t)&v15[v45 + v23] > v59))
  {
    v213 = v45;
    v214 = v23;
    v215 = v36;
    v186 = sub_1D4B9A5A0(v15, v202, &v213, &v212, v11, v13, v208, v207);
    v11 = (unint64_t)v205 + 95916;
    v18 = v186;
    goto LABEL_139;
  }
  *(_OWORD *)v15 = *(_OWORD *)v201;
  if (v45 > 0x10)
  {
    *((_OWORD *)v15 + 1) = *((_OWORD *)v201 + 1);
    if ((uint64_t)(v45 - 16) >= 17)
    {
      v189 = v15 + 32;
      v190 = (__int128 *)(v201 + 48);
      do
      {
        *(_OWORD *)v189 = *(v190 - 1);
        v191 = *v190;
        v190 += 2;
        *((_OWORD *)v189 + 1) = v191;
        v189 += 32;
      }
      while (v189 < v53);
    }
  }
  v212 = &v201[v45];
  if (v36 > v53 - v13)
  {
    if (v36 > (unint64_t)&v53[-v208])
      return -20;
    v60 = _X8 - v13;
    v61 = (const void *)(v207 + _X8 - v13);
    if ((unint64_t)v61 + v23 <= v207)
    {
      memmove(v53, v61, v23);
LABEL_138:
      v11 = (unint64_t)v205 + 95916;
      goto LABEL_139;
    }
    memmove(v53, v61, v13 - _X8);
    v53 -= v60;
    v23 += v60;
    _X8 = v13;
    v11 = (unint64_t)v205 + 95916;
  }
  if (v36 < 0x10)
  {
    if (v36 > 7)
    {
      *(_QWORD *)v53 = *(_QWORD *)_X8;
    }
    else
    {
      v192 = dword_1D4BD8A64[v36];
      *v53 = *_X8;
      v53[1] = _X8[1];
      v53[2] = _X8[2];
      v53[3] = _X8[3];
      v193 = &_X8[dword_1D4BD8A44[v36]];
      *((_DWORD *)v53 + 1) = *(_DWORD *)v193;
      _X8 = &v193[-v192];
    }
    if ((unint64_t)v23 >= 9)
    {
      v194 = _X8 + 8;
      v195 = v53 + 8;
      v196 = &v53[v23];
      if (v53 - _X8 > 15)
      {
        *v195 = *v194;
        if (v23 >= 25)
        {
          v198 = v53 + 24;
          v199 = (__int128 *)(_X8 + 40);
          do
          {
            *(_OWORD *)v198 = *(v199 - 1);
            v200 = *v199;
            v199 += 2;
            *((_OWORD *)v198 + 1) = v200;
            v198 += 32;
          }
          while (v198 < v196);
        }
      }
      else
      {
        do
        {
          v197 = *(_QWORD *)v194;
          v194 = (_OWORD *)((char *)v194 + 8);
          *(_QWORD *)v195 = v197;
          v195 = (_OWORD *)((char *)v195 + 8);
        }
        while (v195 < (_OWORD *)v196);
      }
    }
    goto LABEL_138;
  }
  *(_OWORD *)v53 = *(_OWORD *)_X8;
  if (v23 >= 17)
  {
    v62 = v53 + 16;
    v63 = (__int128 *)(_X8 + 32);
    do
    {
      *(_OWORD *)v62 = *(v63 - 1);
      v64 = *v63;
      v63 += 2;
      *((_OWORD *)v62 + 1) = v64;
      v62 += 32;
    }
    while (v62 < &v53[v23]);
  }
LABEL_139:
  if (v18 > 0xFFFFFFFFFFFFFF88)
    return v18;
  v15 += v18;
  v119 = v51 - 1;
  if (v51 != 1)
  {
    v120 = DWORD2(v209);
    if (DWORD2(v209) > 0x40)
      goto LABEL_150;
    if ((unint64_t)v210 >= *(_QWORD *)&v211[0])
    {
      v123 = (_QWORD *)(v210 - ((unint64_t)DWORD2(v209) >> 3));
      *(_QWORD *)&v210 = v123;
      v120 = BYTE8(v209) & 7;
    }
    else
    {
      if ((_QWORD)v210 == *((_QWORD *)&v210 + 1))
        goto LABEL_150;
      v121 = (unint64_t)DWORD2(v209) >> 3;
      if ((unint64_t)v210 - v121 >= *((_QWORD *)&v210 + 1))
        v122 = v121;
      else
        v122 = (v210 - DWORD2(v210));
      v123 = (_QWORD *)(v210 - v122);
      *(_QWORD *)&v210 = v210 - v122;
      v120 = DWORD2(v209) - 8 * v122;
    }
    *(_QWORD *)&v209 = *v123;
LABEL_150:
    while (1)
    {
      v124 = (unsigned __int16 *)(*(_QWORD *)&v211[1] + 8 * *((_QWORD *)&v211[0] + 1));
      v125 = (unsigned __int16 *)(*(_QWORD *)&v211[3] + 8 * *((_QWORD *)&v211[2] + 1));
      v126 = (unsigned __int16 *)(*(_QWORD *)&v211[2] + 8 * *((_QWORD *)&v211[1] + 1));
      v127 = *((unsigned int *)v125 + 1);
      v128 = *((unsigned int *)v124 + 1);
      v129 = *((unsigned int *)v126 + 1);
      v130 = *((unsigned __int8 *)v124 + 2);
      v131 = *((unsigned __int8 *)v125 + 2);
      v132 = *((unsigned __int8 *)v126 + 2);
      v133 = *v124;
      v134 = *v125;
      v135 = *v126;
      v136 = *((unsigned __int8 *)v124 + 3);
      v137 = *((unsigned __int8 *)v125 + 3);
      v138 = *((unsigned __int8 *)v126 + 3);
      if (v132 >= 2)
        break;
      if (*((_BYTE *)v126 + 2))
      {
        if ((_DWORD)v128)
          v129 = v129;
        else
          v129 = (v129 + 1);
        v172 = (_QWORD)v209 << v120++;
        DWORD2(v209) = v120;
        v173 = v129 + (v172 >> 63);
        if (v173 == 3)
        {
          if (*((_QWORD *)&v211[3] + 1) == 1)
            v140 = 1;
          else
            v140 = *((_QWORD *)&v211[3] + 1) - 1;
          goto LABEL_216;
        }
        if (*((_QWORD *)&v211[3] + v173 + 1))
          v140 = *((_QWORD *)&v211[3] + v173 + 1);
        else
          v140 = 1;
        if (v173 != 1)
LABEL_216:
          *((_QWORD *)&v211[4] + 1) = *(_QWORD *)&v211[4];
LABEL_152:
        v141 = (char *)&v211[3] + 8;
        goto LABEL_155;
      }
      v140 = *((_QWORD *)&v211[3] + ((_DWORD)v128 == 0) + 1);
      v141 = (char *)&v211[3] + 8 * ((_DWORD)v128 != 0) + 8;
LABEL_155:
      v142 = *(_QWORD *)v141;
      *((_QWORD *)&v211[3] + 1) = v140;
      *(_QWORD *)&v211[4] = v142;
      if (v131)
      {
        v143 = (_QWORD)v209 << v120 >> -(char)v131;
        v120 += v131;
        v127 += v143;
      }
      if ((v131 + v130 + v132) >= 0x1Fu && v120 <= 0x40)
      {
        if ((unint64_t)v210 >= *(_QWORD *)&v211[0])
        {
          v166 = (_QWORD *)(v210 - (v120 >> 3));
          *(_QWORD *)&v210 = v166;
          v120 &= 7u;
        }
        else
        {
          if ((_QWORD)v210 == *((_QWORD *)&v210 + 1))
            goto LABEL_158;
          v164 = v120 >> 3;
          if ((unint64_t)(v210 - v164) >= *((_QWORD *)&v210 + 1))
            v165 = v164;
          else
            v165 = (v210 - DWORD2(v210));
          v166 = (_QWORD *)(v210 - v165);
          *(_QWORD *)&v210 = v210 - v165;
          v120 -= 8 * v165;
        }
        *(_QWORD *)&v209 = *v166;
      }
LABEL_158:
      v144 = ((_QWORD)v209 << v120 >> -(char)v130) + v128;
      if (v130)
      {
        v120 += v130;
        v128 = v144;
      }
      v145 = v120 + v136;
      v146 = (((unint64_t)v209 >> -(char)v145) & dword_1D4BD89C4[v136]) + v133;
      v147 = v145 + v137;
      *((_QWORD *)&v211[2] + 1) = (((unint64_t)v209 >> -(char)v147) & dword_1D4BD89C4[v137]) + v134;
      v148 = v147 + v138;
      v149 = ((unint64_t)v209 >> -(char)v148) & dword_1D4BD89C4[v138];
      DWORD2(v209) = v148;
      *((_QWORD *)&v211[0] + 1) = v146;
      *((_QWORD *)&v211[1] + 1) = v149 + v135;
      v150 = &v15[v128];
      v151 = v212;
      v152 = &v212[v128];
      _X8 = &v15[v128 - v140];
      __asm { PRFM            #0, [X8] }
      if ((unint64_t)&v212[v128] > v11 || (v18 = v128 + v127, (unint64_t)&v15[v128 + v127] > v59))
      {
        v213 = v128;
        v214 = v127;
        v215 = v140;
        v163 = sub_1D4B9A5A0(v15, v202, &v213, &v212, v11, v13, v208, v207);
        v11 = (unint64_t)v205 + 95916;
        v18 = v163;
      }
      else
      {
        *(_OWORD *)v15 = *(_OWORD *)v212;
        if (v128 > 0x10)
        {
          *((_OWORD *)v15 + 1) = *((_OWORD *)v151 + 1);
          if ((uint64_t)(v128 - 16) >= 17)
          {
            v167 = v15 + 32;
            v168 = (__int128 *)(v151 + 48);
            do
            {
              *(_OWORD *)v167 = *(v168 - 1);
              v169 = *v168;
              v168 += 2;
              *((_OWORD *)v167 + 1) = v169;
              v167 += 32;
            }
            while (v167 < v150);
          }
        }
        v212 = v152;
        if (v140 <= v150 - v13)
          goto LABEL_167;
        if (v140 > (unint64_t)&v150[-v208])
          return -20;
        v155 = _X8 - v13;
        v156 = (const void *)(v207 + _X8 - v13);
        if ((unint64_t)v156 + v127 > v207)
        {
          memmove(&v15[v128], v156, v13 - _X8);
          v150 -= v155;
          v127 += v155;
          _X8 = v13;
          v11 = (unint64_t)v205 + 95916;
LABEL_167:
          if (v140 < 0x10)
          {
            if (v140 > 7)
            {
              *(_QWORD *)v150 = *(_QWORD *)_X8;
            }
            else
            {
              v170 = dword_1D4BD8A64[v140];
              *v150 = *_X8;
              v150[1] = _X8[1];
              v150[2] = _X8[2];
              v150[3] = _X8[3];
              v171 = &_X8[dword_1D4BD8A44[v140]];
              *((_DWORD *)v150 + 1) = *(_DWORD *)v171;
              _X8 = &v171[-v170];
            }
            if ((unint64_t)v127 >= 9)
            {
              v174 = _X8 + 8;
              v175 = v150 + 8;
              v176 = (unint64_t)&v150[v127];
              if (v150 - _X8 > 15)
              {
                *v175 = *v174;
                if (v127 >= 25)
                {
                  v178 = v150 + 24;
                  v179 = (__int128 *)(_X8 + 40);
                  do
                  {
                    *v178 = *(v179 - 1);
                    v180 = *v179;
                    v179 += 2;
                    v178[1] = v180;
                    v178 += 2;
                  }
                  while ((unint64_t)v178 < v176);
                }
              }
              else
              {
                do
                {
                  v177 = *(_QWORD *)v174;
                  v174 = (_OWORD *)((char *)v174 + 8);
                  *(_QWORD *)v175 = v177;
                  v175 = (_OWORD *)((char *)v175 + 8);
                }
                while ((unint64_t)v175 < v176);
              }
            }
          }
          else
          {
            *(_OWORD *)v150 = *(_OWORD *)_X8;
            if (v127 >= 17)
            {
              v157 = v150 + 16;
              v158 = (__int128 *)(_X8 + 32);
              do
              {
                *(_OWORD *)v157 = *(v158 - 1);
                v159 = *v158;
                v158 += 2;
                *((_OWORD *)v157 + 1) = v159;
                v157 += 32;
              }
              while (v157 < &v150[v127]);
            }
          }
          goto LABEL_173;
        }
        memmove(&v15[v128], v156, v127);
        v11 = (unint64_t)v205 + 95916;
      }
LABEL_173:
      if (v18 > 0xFFFFFFFFFFFFFF88)
        return v18;
      v15 += v18;
      if (!--v119)
        goto LABEL_223;
      v120 = DWORD2(v209);
      if (DWORD2(v209) <= 0x40)
      {
        if ((unint64_t)v210 >= *(_QWORD *)&v211[0])
        {
          v162 = (_QWORD *)(v210 - ((unint64_t)DWORD2(v209) >> 3));
          *(_QWORD *)&v210 = v162;
          v120 = BYTE8(v209) & 7;
          goto LABEL_183;
        }
        if ((_QWORD)v210 != *((_QWORD *)&v210 + 1))
        {
          v160 = (unint64_t)DWORD2(v209) >> 3;
          if ((unint64_t)v210 - v160 >= *((_QWORD *)&v210 + 1))
            v161 = v160;
          else
            v161 = (v210 - DWORD2(v210));
          v162 = (_QWORD *)(v210 - v161);
          *(_QWORD *)&v210 = v210 - v161;
          v120 = DWORD2(v209) - 8 * v161;
LABEL_183:
          DWORD2(v209) = v120;
          *(_QWORD *)&v209 = *v162;
        }
      }
    }
    v139 = (_QWORD)v209 << v120 >> -(char)v132;
    v120 += v132;
    v140 = v139 + v129;
    *((_QWORD *)&v211[4] + 1) = *(_QWORD *)&v211[4];
    goto LABEL_152;
  }
LABEL_223:
  v9 = (char *)v202;
  v6 = v203;
  if (DWORD2(v209) <= 0x40)
  {
    v18 = -20;
    if (DWORD2(v209) != 64 || (unint64_t)v210 >= *(_QWORD *)&v211[0] || (_QWORD)v210 != *((_QWORD *)&v210 + 1))
      return v18;
  }
  for (i = 0; i != 3; ++i)
    *((_DWORD *)v205 + i + 6671) = *((_QWORD *)&v211[3] + i + 1);
  v10 = v212;
LABEL_10:
  if (v8[93] == 2)
  {
    v16 = v11 - (_QWORD)v10;
    if (v11 - (unint64_t)v10 > v9 - v15)
      return -70;
    if (v15)
    {
      memmove(v15, v10, v11 - (_QWORD)v10);
      v15 += v16;
    }
    v10 = (char *)v205 + 30380;
    v11 = (unint64_t)v205 + 95916;
    v8[93] = 0;
  }
  v17 = v11 - (_QWORD)v10;
  if (v11 - (unint64_t)v10 > v9 - v15)
    return -70;
  if (v15)
  {
    memcpy(v15, v10, v11 - (_QWORD)v10);
    v37 = &v15[v17];
  }
  else
  {
    v37 = 0;
  }
  return v37 - v6;
}

uint64_t sub_1D4B99CE8(uint64_t a1, char *__dst, uint64_t a3, unsigned __int8 *a4, unint64_t a5, int a6)
{
  int v6;
  char *v7;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  char *v14;
  int64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v40;
  int v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v53;
  const void *v54;
  _OWORD *v55;
  __int128 *v56;
  __int128 v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _OWORD *v66;
  __int128 *v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  _OWORD *v74;
  unint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  __int128 *v78;
  __int128 v79;
  uint64_t i;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  __int128 v88;
  __int128 v89;
  _OWORD v90[5];
  char *v91;
  unint64_t v92[4];

  v6 = a6;
  v7 = __dst;
  if (*(_DWORD *)(a1 + 30376))
    v9 = *(char **)(a1 + 30360);
  else
    v9 = &__dst[a3];
  v10 = *(char **)(a1 + 30120);
  v91 = v10;
  v87 = &v10[*(_QWORD *)(a1 + 30152)];
  if (a6)
  {
    v11 = 0;
    v12 = *(char **)(a1 + 29896);
    v85 = *(_QWORD *)(a1 + 29912);
    v86 = *(_QWORD *)(a1 + 29904);
    v89 = 0u;
    memset(v90, 0, sizeof(v90));
    *(_DWORD *)(a1 + 30004) = 1;
    v88 = 0u;
    do
    {
      *((_QWORD *)&v90[3] + v11 + 1) = *(unsigned int *)(a1 + 26684 + 4 * v11);
      ++v11;
    }
    while (v11 != 3);
    if (!a5)
      return -20;
    *((_QWORD *)&v89 + 1) = a4;
    *(_QWORD *)&v90[0] = a4 + 8;
    if (a5 < 8)
    {
      v18 = *a4;
      *(_QWORD *)&v89 = a4;
      *(_QWORD *)&v88 = v18;
      switch(a5)
      {
        case 2uLL:
          goto LABEL_23;
        case 3uLL:
          goto LABEL_22;
        case 4uLL:
          goto LABEL_21;
        case 5uLL:
          goto LABEL_20;
        case 6uLL:
          goto LABEL_19;
        case 7uLL:
          v18 |= (unint64_t)a4[6] << 48;
LABEL_19:
          v18 += (unint64_t)a4[5] << 40;
LABEL_20:
          v18 += (unint64_t)a4[4] << 32;
LABEL_21:
          v18 += (unint64_t)a4[3] << 24;
LABEL_22:
          v18 += (unint64_t)a4[2] << 16;
LABEL_23:
          *(_QWORD *)&v88 = v18 + ((unint64_t)a4[1] << 8);
          break;
        default:
          break;
      }
      if (!a4[a5 - 1])
        return -20;
      DWORD2(v88) = __clz(a4[a5 - 1]) - 8 * a5 + 41;
    }
    else
    {
      v13 = *(_QWORD *)&a4[a5 - 8];
      *(_QWORD *)&v89 = &a4[a5 - 8];
      *(_QWORD *)&v88 = v13;
      if (!HIBYTE(v13))
        return -20;
      DWORD2(v88) = __clz(HIBYTE(v13)) - 23;
      if (a5 > 0xFFFFFFFFFFFFFF88)
        return -20;
    }
    sub_1D4B9A454((_QWORD *)v90 + 1, (uint64_t)&v88, *(_QWORD *)a1);
    sub_1D4B9A454((_QWORD *)&v90[1] + 1, (uint64_t)&v88, *(_QWORD *)(a1 + 16));
    v82 = a1;
    sub_1D4B9A454((_QWORD *)&v90[2] + 1, (uint64_t)&v88, *(_QWORD *)(a1 + 8));
    v83 = v7;
    v84 = (uint64_t)v9;
    v19 = v9 - 32;
    v14 = v7;
    while (1)
    {
      v20 = (unsigned __int16 *)(*(_QWORD *)&v90[1] + 8 * *((_QWORD *)&v90[0] + 1));
      v21 = (unsigned __int16 *)(*(_QWORD *)&v90[3] + 8 * *((_QWORD *)&v90[2] + 1));
      v22 = (unsigned __int16 *)(*(_QWORD *)&v90[2] + 8 * *((_QWORD *)&v90[1] + 1));
      v23 = *((unsigned int *)v21 + 1);
      v24 = *((unsigned int *)v20 + 1);
      v25 = *((unsigned int *)v22 + 1);
      v26 = *((unsigned __int8 *)v20 + 2);
      v27 = *((unsigned __int8 *)v21 + 2);
      v28 = *((unsigned __int8 *)v22 + 2);
      v29 = *v20;
      v30 = *v21;
      v31 = *v22;
      v32 = *((unsigned __int8 *)v20 + 3);
      v33 = *((unsigned __int8 *)v21 + 3);
      v34 = *((unsigned __int8 *)v22 + 3);
      if (v28 >= 2)
      {
        v35 = DWORD2(v88) + v28;
        v36 = ((_QWORD)v88 << SBYTE8(v88) >> -(char)v28) + v25;
        v90[4] = *(_OWORD *)((char *)&v90[3] + 8);
        goto LABEL_29;
      }
      if (!*((_BYTE *)v22 + 2))
      {
        v36 = *((_QWORD *)&v90[3] + ((_DWORD)v24 == 0) + 1);
        v58 = *((_QWORD *)&v90[3] + ((_DWORD)v24 != 0) + 1);
        *((_QWORD *)&v90[3] + 1) = v36;
        *(_QWORD *)&v90[4] = v58;
        v35 = DWORD2(v88);
        if (!v27)
          goto LABEL_31;
LABEL_30:
        v37 = (_QWORD)v88 << v35 >> -(char)v27;
        v35 += v27;
        v23 += v37;
        goto LABEL_31;
      }
      if ((_DWORD)v24)
        v25 = v25;
      else
        v25 = (v25 + 1);
      v71 = (_QWORD)v88 << SBYTE8(v88);
      v35 = ++DWORD2(v88);
      v72 = v25 + (v71 >> 63);
      if (v72 == 3)
      {
        if (*((_QWORD *)&v90[3] + 1) == 1)
          v36 = 1;
        else
          v36 = *((_QWORD *)&v90[3] + 1) - 1;
      }
      else
      {
        if (*((_QWORD *)&v90[3] + v72 + 1))
          v36 = *((_QWORD *)&v90[3] + v72 + 1);
        else
          v36 = 1;
        if (v72 == 1)
          goto LABEL_97;
      }
      *((_QWORD *)&v90[4] + 1) = *(_QWORD *)&v90[4];
LABEL_97:
      *(_QWORD *)&v90[4] = *((_QWORD *)&v90[3] + 1);
LABEL_29:
      *((_QWORD *)&v90[3] + 1) = v36;
      if (v27)
        goto LABEL_30;
LABEL_31:
      if ((v27 + v26 + v28) < 0x1Fu || v35 > 0x40)
        goto LABEL_32;
      if ((unint64_t)v89 >= *(_QWORD *)&v90[0])
      {
        v65 = (_QWORD *)(v89 - (v35 >> 3));
        *(_QWORD *)&v89 = v65;
        v35 &= 7u;
      }
      else
      {
        if ((_QWORD)v89 == *((_QWORD *)&v89 + 1))
          goto LABEL_32;
        v63 = v35 >> 3;
        if ((unint64_t)(v89 - v63) >= *((_QWORD *)&v89 + 1))
          v64 = v63;
        else
          v64 = (v89 - DWORD2(v89));
        v65 = (_QWORD *)(v89 - v64);
        *(_QWORD *)&v89 = v89 - v64;
        v35 -= 8 * v64;
      }
      *(_QWORD *)&v88 = *v65;
LABEL_32:
      v38 = ((_QWORD)v88 << v35 >> -(char)v26) + v24;
      _ZF = v26 == 0;
      if (v26)
        v40 = v35 + v26;
      else
        v40 = v35;
      if (!_ZF)
        v24 = v38;
      v41 = v40 + v32;
      v42 = (((unint64_t)v88 >> -(char)v41) & dword_1D4BD89C4[v32]) + v29;
      *((_QWORD *)&v90[2] + 1) = (((unint64_t)v88 >> -(char)(v41 + v33)) & dword_1D4BD89C4[v33]) + v30;
      v43 = v41 + v33 + v34;
      v44 = ((unint64_t)v88 >> -(char)(v41 + v33 + v34)) & dword_1D4BD89C4[v34];
      DWORD2(v88) = v43;
      *((_QWORD *)&v90[0] + 1) = v42;
      *((_QWORD *)&v90[1] + 1) = v44 + v31;
      v45 = (unint64_t)&v14[v24];
      v46 = v91;
      v47 = &v91[v24];
      _X8 = &v14[v24 - v36];
      __asm { PRFM            #0, [X8] }
      if (&v91[v24] > v87 || (v16 = v24 + v23, &v14[v24 + v23] > v19))
      {
        v92[0] = v24;
        v92[1] = v23;
        v92[2] = v36;
        v16 = sub_1D4B9A5A0(v14, v84, v92, &v91, (uint64_t)v87, v12, v86, v85);
      }
      else
      {
        *(_OWORD *)v14 = *(_OWORD *)v91;
        if (v24 > 0x10)
        {
          *((_OWORD *)v14 + 1) = *((_OWORD *)v46 + 1);
          if ((uint64_t)(v24 - 16) >= 17)
          {
            v66 = v14 + 32;
            v67 = (__int128 *)(v46 + 48);
            do
            {
              *v66 = *(v67 - 1);
              v68 = *v67;
              v67 += 2;
              v66[1] = v68;
              v66 += 2;
            }
            while ((unint64_t)v66 < v45);
          }
        }
        v91 = v47;
        if (v36 <= v45 - (unint64_t)v12)
          goto LABEL_44;
        if (v36 > v45 - v86)
          return -20;
        v53 = _X8 - v12;
        v54 = (const void *)(v85 + _X8 - v12);
        if ((unint64_t)v54 + v23 > v85)
        {
          memmove(&v14[v24], v54, v12 - _X8);
          v45 -= v53;
          v23 += v53;
          _X8 = v12;
LABEL_44:
          if (v36 < 0x10)
          {
            if (v36 > 7)
            {
              *(_QWORD *)v45 = *(_QWORD *)_X8;
            }
            else
            {
              v69 = dword_1D4BD8A64[v36];
              *(_BYTE *)v45 = *_X8;
              *(_BYTE *)(v45 + 1) = _X8[1];
              *(_BYTE *)(v45 + 2) = _X8[2];
              *(_BYTE *)(v45 + 3) = _X8[3];
              v70 = &_X8[dword_1D4BD8A44[v36]];
              *(_DWORD *)(v45 + 4) = *(_DWORD *)v70;
              _X8 = &v70[-v69];
            }
            if ((unint64_t)v23 >= 9)
            {
              v73 = _X8 + 8;
              v74 = (_OWORD *)(v45 + 8);
              v75 = v45 + v23;
              if ((uint64_t)(v45 - (_QWORD)_X8) > 15)
              {
                *v74 = *v73;
                if (v23 >= 25)
                {
                  v77 = (_OWORD *)(v45 + 24);
                  v78 = (__int128 *)(_X8 + 40);
                  do
                  {
                    *v77 = *(v78 - 1);
                    v79 = *v78;
                    v78 += 2;
                    v77[1] = v79;
                    v77 += 2;
                  }
                  while ((unint64_t)v77 < v75);
                }
              }
              else
              {
                do
                {
                  v76 = *(_QWORD *)v73;
                  v73 = (_OWORD *)((char *)v73 + 8);
                  *(_QWORD *)v74 = v76;
                  v74 = (_OWORD *)((char *)v74 + 8);
                }
                while ((unint64_t)v74 < v75);
              }
            }
          }
          else
          {
            *(_OWORD *)v45 = *(_OWORD *)_X8;
            if (v23 >= 17)
            {
              v55 = (_OWORD *)(v45 + 16);
              v56 = (__int128 *)(_X8 + 32);
              do
              {
                *v55 = *(v56 - 1);
                v57 = *v56;
                v56 += 2;
                v55[1] = v57;
                v55 += 2;
              }
              while ((unint64_t)v55 < v45 + v23);
            }
          }
          goto LABEL_53;
        }
        memmove(&v14[v24], v54, v23);
      }
LABEL_53:
      if (v16 > 0xFFFFFFFFFFFFFF88)
        return v16;
      v14 += v16;
      if (!--v6)
      {
        v7 = v83;
        v9 = (char *)v84;
        if (DWORD2(v88) > 0x40
          || (v16 = -20, DWORD2(v88) == 64)
          && (unint64_t)v89 < *(_QWORD *)&v90[0]
          && (_QWORD)v89 == *((_QWORD *)&v89 + 1))
        {
          for (i = 0; i != 3; ++i)
            *(_DWORD *)(v82 + 26684 + 4 * i) = *((_QWORD *)&v90[3] + i + 1);
          v10 = v91;
          goto LABEL_13;
        }
        return v16;
      }
      if (DWORD2(v88) <= 0x40)
      {
        if ((unint64_t)v89 >= *(_QWORD *)&v90[0])
        {
          v61 = (_QWORD *)(v89 - ((unint64_t)DWORD2(v88) >> 3));
          *(_QWORD *)&v89 = v61;
          v62 = BYTE8(v88) & 7;
          goto LABEL_63;
        }
        if ((_QWORD)v89 != *((_QWORD *)&v89 + 1))
        {
          v59 = (unint64_t)DWORD2(v88) >> 3;
          if ((unint64_t)v89 - v59 >= *((_QWORD *)&v89 + 1))
            v60 = v59;
          else
            v60 = (v89 - DWORD2(v89));
          v61 = (_QWORD *)(v89 - v60);
          *(_QWORD *)&v89 = v89 - v60;
          v62 = DWORD2(v88) - 8 * v60;
LABEL_63:
          DWORD2(v88) = v62;
          *(_QWORD *)&v88 = *v61;
        }
      }
    }
  }
  v14 = v7;
LABEL_13:
  v15 = v87 - v10;
  if (v87 - v10 > (unint64_t)(v9 - v14))
    return -70;
  if (v14)
  {
    memcpy(v14, v10, v87 - v10);
    v17 = &v14[v15];
  }
  else
  {
    v17 = 0;
  }
  return v17 - v7;
}

_QWORD *sub_1D4B9A424(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    v3 = result[3736];
    if (v3 != a2)
    {
      result[3739] = v3;
      result[3738] = a2 + result[3737] - v3;
      result[3737] = a2;
      result[3736] = a2;
    }
  }
  return result;
}

_QWORD *sub_1D4B9A454(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;

  v3 = *(unsigned int *)(a3 + 4);
  v4 = *(_DWORD *)(a2 + 8) + v3;
  v5 = (*(_QWORD *)a2 >> -(char)(*(_BYTE *)(a2 + 8) + v3)) & dword_1D4BD89C4[v3];
  *(_DWORD *)(a2 + 8) = v4;
  *result = v5;
  if (v4 <= 0x40)
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 >= *(_QWORD *)(a2 + 32))
    {
      v10 = (_QWORD *)(v6 - (v4 >> 3));
      *(_QWORD *)(a2 + 16) = v10;
      v11 = v4 & 7;
LABEL_9:
      *(_DWORD *)(a2 + 8) = v11;
      *(_QWORD *)a2 = *v10;
      goto LABEL_10;
    }
    v7 = *(_QWORD *)(a2 + 24);
    if (v6 != v7)
    {
      v8 = v4 >> 3;
      if (v6 - v8 >= v7)
        v9 = v8;
      else
        v9 = (v6 - v7);
      v10 = (_QWORD *)(v6 - v9);
      *(_QWORD *)(a2 + 16) = v10;
      v11 = v4 - 8 * v9;
      goto LABEL_9;
    }
  }
LABEL_10:
  result[1] = a3 + 8;
  return result;
}

char *sub_1D4B9A4F4(char *result, char *a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  __int128 *v7;
  __int128 v8;
  char v9;
  int64_t v10;
  char v11;

  v3 = &result[a3];
  if (a3 < 8 || result - a2 >= -7)
  {
    if (a3 >= 1)
    {
      do
      {
        v9 = *a2++;
        *result++ = v9;
      }
      while (result < v3);
    }
  }
  else
  {
    if ((unint64_t)(result - a2) > 0xFFFFFFFFFFFFFFEFLL || (v4 = v3 - 32, v5 = v4 - result, v4 < result))
    {
      v4 = result;
    }
    else
    {
      *(_OWORD *)result = *(_OWORD *)a2;
      if (v5 >= 17)
      {
        v6 = result + 16;
        v7 = (__int128 *)(a2 + 32);
        do
        {
          *(_OWORD *)v6 = *(v7 - 1);
          v8 = *v7;
          v7 += 2;
          *((_OWORD *)v6 + 1) = v8;
          v6 += 32;
        }
        while (v6 < v4);
      }
      a2 += v5;
    }
    v10 = &result[a3] - v4;
    do
    {
      v11 = *a2++;
      *v4++ = v11;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_1D4B9A5A0(_BYTE *a1, uint64_t a2, unint64_t *a3, char **a4, uint64_t a5, char *a6, uint64_t a7, unint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  char *v12;
  char *v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  const void *v22;
  size_t v23;
  uint64_t v24;

  v9 = *a3;
  v10 = a3[1] + *a3;
  if (v10 <= a2 - (uint64_t)a1)
  {
    v12 = *a4;
    if (v9 > a5 - (uint64_t)*a4)
      return -20;
    v16 = &a1[v9];
    v17 = &v12[v9];
    v18 = &a1[v9 - a3[2]];
    v19 = (_BYTE *)(a2 - 32);
    sub_1D4B9A6C4(a1, (_BYTE *)(a2 - 32), v12, v9, 0);
    *a4 = v17;
    v20 = (char *)a3[2];
    if ((unint64_t)v20 <= v16 - a6)
    {
      v24 = a3[1];
      a6 = v18;
    }
    else
    {
      if (v20 > &v16[-a7])
        return -20;
      v21 = v18 - a6;
      v22 = (const void *)(a8 + v18 - a6);
      v23 = a3[1];
      if ((unint64_t)v22 + v23 <= a8)
      {
        memmove(v16, v22, v23);
        return v10;
      }
      memmove(v16, v22, a6 - v18);
      v16 -= v21;
      v24 = a3[1] + v21;
      a3[1] = v24;
    }
    sub_1D4B9A6C4(v16, v19, a6, v24, 1);
    return v10;
  }
  return -70;
}

_BYTE *sub_1D4B9A6C4(_BYTE *result, _BYTE *a2, char *a3, uint64_t a4, int a5)
{
  _BYTE *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 *v16;
  __int128 v17;
  _OWORD *v18;
  __int128 *v19;
  __int128 v20;
  char v21;

  v5 = &result[a4];
  if (a4 > 7)
  {
    if (a5 == 1)
    {
      v7 = result - a3;
      if ((unint64_t)(result - a3) > 7)
      {
        *(_QWORD *)result = *(_QWORD *)a3;
      }
      else
      {
        v8 = dword_1D4BD8A64[v7];
        *result = *a3;
        result[1] = a3[1];
        result[2] = a3[2];
        result[3] = a3[3];
        v9 = &a3[dword_1D4BD8A44[v7]];
        *((_DWORD *)result + 1) = *(_DWORD *)v9;
        a3 = &v9[-v8];
      }
      a3 += 8;
      result += 8;
      a4 -= 8;
    }
    if (v5 <= a2)
    {
      v13 = &result[a4];
      if (a5 == 1 && result - a3 <= 15)
      {
        do
        {
          v14 = *(_QWORD *)a3;
          a3 += 8;
          *(_QWORD *)result = v14;
          result += 8;
        }
        while (result < v13);
      }
      else
      {
        *(_OWORD *)result = *(_OWORD *)a3;
        if ((unint64_t)a4 >= 0x11)
        {
          v15 = result + 16;
          v16 = (__int128 *)(a3 + 32);
          do
          {
            *v15 = *(v16 - 1);
            v17 = *v16;
            v16 += 2;
            v15[1] = v17;
            v15 += 2;
          }
          while (v15 < (_OWORD *)v13);
        }
      }
    }
    else
    {
      if (result <= a2)
      {
        v10 = a2 - result;
        if (a5 == 1 && result - a3 < 16)
        {
          v11 = (uint64_t *)a3;
          do
          {
            v12 = *v11++;
            *(_QWORD *)result = v12;
            result += 8;
          }
          while (result < a2);
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)a3;
          if (v10 > 16)
          {
            v18 = result + 16;
            v19 = (__int128 *)(a3 + 32);
            do
            {
              *v18 = *(v19 - 1);
              v20 = *v19;
              v19 += 2;
              v18[1] = v20;
              v18 += 2;
            }
            while (v18 < (_OWORD *)a2);
          }
        }
        a3 += v10;
        result = a2;
      }
      while (result < v5)
      {
        v21 = *a3++;
        *result++ = v21;
      }
    }
  }
  else if (a4 >= 1)
  {
    do
    {
      v6 = *a3++;
      *result++ = v6;
    }
    while (result < v5);
  }
  return result;
}

uint64_t sub_1D4B9A858(char *a1, uint64_t a2, _BYTE *a3, unint64_t *a4, char **a5, uint64_t a6, char *a7, uint64_t a8, unint64_t a9)
{
  unint64_t v10;
  unint64_t v11;
  char *v13;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  const void *v22;
  size_t v23;
  uint64_t v24;

  v10 = *a4;
  v11 = a4[1] + *a4;
  if (v11 > a2 - (uint64_t)a1)
    return -70;
  v13 = *a5;
  if (v10 > a6 - (uint64_t)*a5)
    return -20;
  v17 = &v13[v10];
  if (v13 >= a1 || v17 <= a1)
  {
    v18 = &a1[v10];
    v19 = &a1[v10 - a4[2]];
    sub_1D4B9A4F4(a1, v13, v10);
    *a5 = v17;
    v20 = (char *)a4[2];
    if ((unint64_t)v20 <= v18 - a7)
    {
      v24 = a4[1];
      a7 = v19;
    }
    else
    {
      if (v20 > &v18[-a8])
        return -20;
      v21 = v19 - a7;
      v22 = (const void *)(a9 + v19 - a7);
      v23 = a4[1];
      if ((unint64_t)v22 + v23 <= a9)
      {
        memmove(v18, v22, v23);
        return v11;
      }
      memmove(v18, v22, a7 - v19);
      v18 -= v21;
      v24 = a4[1] + v21;
      a4[1] = v24;
    }
    sub_1D4B9A6C4(v18, a3, a7, v24, 1);
    return v11;
  }
  return -70;
}

uint64_t sub_1D4B9A984(int *a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t result;
  unsigned __int16 v5;
  _DWORD *v8;
  unsigned int v9;
  int v10;
  size_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  unsigned int v14;
  int v15;
  __int16 v16;
  _DWORD *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int i;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  _WORD v26[256];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a3 > 0xFF)
    return -46;
  v5 = a4;
  if (a4 > 0xC)
    return -44;
  v8 = a1 + 1;
  v9 = 1 << a4;
  v10 = (1 << a4) - 1;
  v11 = a3 + 1;
  bzero(a1 + 1, v11);
  v12 = 0;
  v13 = 1;
  v14 = v9 - 1;
  do
  {
    v15 = *(__int16 *)(a2 + 2 * v12);
    if (v15 == -1)
    {
      v17 = &v8[v14--];
      *((_BYTE *)v17 + 2) = v12;
      v16 = 1;
    }
    else
    {
      v16 = *(_WORD *)(a2 + 2 * v12);
      if (0x8000 << v5 >> 16 <= v15)
        v13 = 0;
    }
    v26[v12++] = v16;
  }
  while (v11 != v12);
  v18 = 0;
  v19 = 0;
  do
  {
    v20 = *(__int16 *)(a2 + 2 * v18);
    if (v20 >= 1)
    {
      for (i = 0; i != v20; ++i)
      {
        BYTE2(v8[v19]) = v18;
        do
          v19 = ((v9 >> 3) + (v9 >> 1) + 3 + v19) & v10;
        while (v19 > v14);
      }
    }
    ++v18;
  }
  while (v18 != v11);
  if (v19)
    return -1;
  v22 = (char *)a1 + 7;
  v23 = (1 << v5);
  do
  {
    v24 = *(v22 - 1);
    v25 = (unsigned __int16)v26[v24];
    v26[v24] = v25 + 1;
    LOBYTE(v24) = v5 + 1 + (__clz(v25) ^ 0xE0);
    *v22 = v24;
    *(_WORD *)(v22 - 3) = ((_WORD)v25 << v24) - v9;
    v22 += 4;
    --v23;
  }
  while (v23);
  result = 0;
  *a1 = v5 | (v13 << 16);
  return result;
}

uint64_t sub_1D4B9AB48(uint64_t a1, unsigned int *a2, _DWORD *a3, unsigned int *a4, unint64_t a5)
{
  unsigned int v6;
  unsigned int v7;
  _BOOL4 v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  _DWORD *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  _DWORD *v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  __int16 v30;
  unsigned int v31;
  __int16 v32;
  __int16 v33;
  int v34;
  uint64_t v35;
  BOOL v36;
  int v37;
  _BOOL4 v38;
  _DWORD *v39;
  _BOOL4 v40;
  int v41;
  int v42;
  unsigned int v46;
  unint64_t v47;

  if (a5 < 4)
    return -72;
  v6 = *a4;
  v7 = *a4 & 0xF;
  if (v7 > 0xA)
    return -44;
  v9 = 0;
  v10 = 0;
  *a3 = v7 + 5;
  v11 = (32 << v7);
  v12 = v11 | 1;
  v13 = v7 + 6;
  v14 = v6 >> 4;
  v15 = *a2;
  v16 = (unint64_t)a4 + a5 - 5;
  v17 = (unint64_t)a4 + a5 - 7;
  v18 = (unint64_t)a4 + a5 - 4;
  v19 = 4;
  v20 = a4;
  v47 = v17;
  v46 = v15;
  do
  {
    if (v10 > v15)
      return -1;
    if (v9)
    {
      v21 = v10;
      while ((_WORD)v14 == 0xFFFF)
      {
        if ((unint64_t)v20 >= v16)
        {
          v14 >>= 16;
          v19 += 16;
        }
        else
        {
          v22 = *(_DWORD *)((char *)v20 + 2);
          v20 = (_DWORD *)((char *)v20 + 2);
          v14 = v22 >> v19;
        }
        v21 += 24;
      }
      v23 = v14 & 3;
      while (v23 == 3)
      {
        v21 += 3;
        v23 = (v14 >> 2) & 3;
        v14 >>= 2;
        v19 += 2;
      }
      v24 = v21 + v23;
      if (v21 + v23 > v15)
        return -48;
      if (v10 >= v24)
      {
        v24 = v10;
      }
      else
      {
        bzero((void *)(a1 + 2 * v10), 2 * (~v10 + v21 + v23) + 2);
        v17 = v47;
        v15 = v46;
      }
      v19 += 2;
      v25 = (_DWORD *)((char *)v20 + (v19 >> 3));
      if ((unint64_t)v20 <= v17 || (unint64_t)v25 <= v18)
      {
        v19 &= 7u;
        v14 = *v25 >> v19;
        v20 = v25;
      }
      else
      {
        v14 >>= 2;
      }
    }
    else
    {
      v24 = v10;
    }
    v26 = 2 * v11 - 1;
    v27 = v26 - v12;
    v28 = v26 - v12;
    v29 = v14 & v26;
    v30 = v29 - v28;
    if (v29 < (int)v11)
      v30 = v29;
    v31 = v13 - 1;
    if ((v14 & ((_DWORD)v11 - 1)) < v27)
    {
      v32 = v14 & (v11 - 1);
    }
    else
    {
      v31 = v13;
      v32 = v30;
    }
    v33 = v32 - 1;
    LOWORD(v34) = v33;
    if (v33 < 0)
      v34 = -v33;
    v12 -= (__int16)v34;
    *(_WORD *)(a1 + 2 * v24) = v33;
    v9 = v33 == 0;
    if (v12 >= (int)v11)
    {
      v35 = v11;
    }
    else
    {
      do
      {
        --v13;
        v35 = ((int)v11 >> 1);
        v36 = v12 < (int)v11 >> 1;
        LODWORD(v11) = (int)v11 >> 1;
      }
      while (v36);
    }
    v37 = v31 + v19;
    v10 = v24 + 1;
    v38 = (unint64_t)v20 > v17;
    v39 = (_DWORD *)((char *)v20 + (v37 >> 3));
    v40 = (unint64_t)v39 > v18;
    v41 = v37 & 7;
    v42 = v37 + 8 * ((_DWORD)v20 - v18);
    if (v38 && v40)
      v20 = (_DWORD *)v18;
    else
      v20 = v39;
    if (v38 && v40)
      v19 = v42;
    else
      v19 = v41;
    v14 = *v20 >> v19;
    v11 = v35;
  }
  while (v12 > 1);
  if (v12 != 1)
    return -1;
  *a2 = v24;
  if ((char *)v20 + ((v19 + 7) >> 3) - (char *)a4 <= a5)
    return (char *)v20 + ((v19 + 7) >> 3) - (char *)a4;
  else
    return -72;
}

uint64_t sub_1D4B9ADEC(_BYTE *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int16 *a5)
{
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int16 *v27;
  _BYTE *v28;
  unsigned __int8 *v29;
  _BOOL4 v30;
  unsigned int v31;
  unsigned __int16 *v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  unsigned __int16 *v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unsigned __int16 *v46;
  int v47;
  unint64_t v48;
  unsigned __int8 *v49;
  BOOL v50;
  unsigned int v51;
  unsigned __int16 *v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  unsigned int v56;
  unsigned __int16 *v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  unsigned int v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int16 *v67;
  _BYTE *v68;
  unsigned __int8 *v69;
  _BOOL4 v70;
  unsigned int v71;
  unsigned __int16 *v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  unsigned __int16 *v77;
  uint64_t v78;
  char v79;
  unint64_t v80;
  uint64_t v81;
  unsigned __int16 *v82;
  uint64_t v83;
  char v84;
  unint64_t v85;
  unsigned __int16 *v86;
  int v87;
  unint64_t v88;
  unsigned __int8 *v89;
  unsigned int v91;
  uint64_t v92;
  unsigned __int16 *v93;
  uint64_t v94;
  char v95;
  unint64_t v96;
  unsigned int v97;
  unsigned __int16 *v98;
  uint64_t v99;
  char v100;
  unint64_t v101;

  v5 = &a1[a2];
  v6 = (unint64_t)&a1[a2 - 3];
  if (!a5[1])
  {
    if (!a4)
      return -72;
    v10 = a4 - 8;
    if (a4 < 8)
    {
      v11 = *a3;
      switch(a4)
      {
        case 2uLL:
          goto LABEL_35;
        case 3uLL:
          goto LABEL_34;
        case 4uLL:
          goto LABEL_33;
        case 5uLL:
          goto LABEL_32;
        case 6uLL:
          goto LABEL_31;
        case 7uLL:
          v11 |= (unint64_t)a3[6] << 48;
LABEL_31:
          v11 += (unint64_t)a3[5] << 40;
LABEL_32:
          v11 += (unint64_t)a3[4] << 32;
LABEL_33:
          v11 += (unint64_t)a3[3] << 24;
LABEL_34:
          v11 += (unint64_t)a3[2] << 16;
LABEL_35:
          v11 += (unint64_t)a3[1] << 8;
          break;
        default:
          break;
      }
      if (!a3[a4 - 1])
        return -1;
      v10 = 0;
      v12 = __clz(a3[a4 - 1]) - 8 * a4 + 41;
    }
    else
    {
      v11 = *(_QWORD *)&a3[v10];
      if (!HIBYTE(v11))
        return -1;
      if (a4 > 0xFFFFFFFFFFFFFF88)
        return a4;
      v12 = __clz(HIBYTE(v11)) - 23;
    }
    v17 = *a5;
    v18 = v11 << v12 >> 1 >> (63 - v17);
    v19 = v12 + v17;
    if (v19 <= 0x40)
    {
      if (v10 >= 8)
      {
        v20 = v19 >> 3;
        v19 &= 7u;
      }
      else
      {
        if (!v10)
          goto LABEL_107;
        if (&a3[v10 - (v19 >> 3)] >= a3)
          v20 = v19 >> 3;
        else
          v20 = v10;
        v19 -= 8 * v20;
      }
      v10 -= v20;
      v11 = *(_QWORD *)&a3[v10];
    }
LABEL_107:
    v61 = v11 << v19 >> 1 >> ((63 - v17) & 0x3F);
    v62 = v19 + v17;
    if (v19 + v17 > 0x40)
    {
LABEL_108:
      v63 = a1;
LABEL_130:
      v89 = &a3[v10];
      goto LABEL_131;
    }
    if (v10 >= 8)
    {
      v66 = v62 >> 3;
      v62 &= 7u;
      v10 -= v66;
    }
    else
    {
      if (!v10)
        goto LABEL_118;
      v64 = v62 >> 3;
      if (&a3[v10 - v64] >= a3)
        v65 = v64;
      else
        v65 = v10;
      v62 -= 8 * v65;
      v10 -= v65;
      if (v62 > 0x40)
        goto LABEL_108;
    }
    v11 = *(_QWORD *)&a3[v10];
LABEL_118:
    v67 = a5 + 2;
    v63 = a1 + 1;
    while (1)
    {
      v68 = v63 - 1;
      if (v10 >= 8)
      {
        v70 = 0;
        v71 = v62 >> 3;
        v62 &= 7u;
      }
      else
      {
        if (!v10)
          goto LABEL_143;
        v69 = &a3[v10 - (v62 >> 3)];
        v70 = v69 < a3;
        v71 = v69 >= a3 ? v62 >> 3 : v10;
        v62 -= 8 * v71;
      }
      v10 -= v71;
      v11 = *(_QWORD *)&a3[v10];
      if (v70 || (unint64_t)v68 >= v6)
        break;
      v72 = &v67[2 * v18];
      v73 = *v72;
      v74 = *((_BYTE *)v72 + 2);
      LODWORD(v72) = *((unsigned __int8 *)v72 + 3);
      v75 = v11 << v62 >> 1 >> (63 - v72);
      LODWORD(v72) = v62 + (_DWORD)v72;
      v76 = v75 + v73;
      *(v63 - 1) = v74;
      v77 = &v67[2 * v61];
      v78 = *v77;
      v79 = *((_BYTE *)v77 + 2);
      LODWORD(v77) = *((unsigned __int8 *)v77 + 3);
      v80 = v11 << (char)v72 >> 1 >> (63 - v77);
      LODWORD(v72) = (_DWORD)v72 + (_DWORD)v77;
      v81 = v80 + v78;
      *v63 = v79;
      v82 = &v67[2 * v76];
      v83 = *v82;
      v84 = *((_BYTE *)v82 + 2);
      LODWORD(v82) = *((unsigned __int8 *)v82 + 3);
      v85 = v11 << (char)v72 >> 1 >> (63 - v82);
      LODWORD(v82) = (_DWORD)v72 + (_DWORD)v82;
      v18 = v85 + v83;
      v63[1] = v84;
      v86 = &v67[2 * v81];
      v87 = *((unsigned __int8 *)v86 + 3);
      v88 = v11 << (char)v82 >> 1 >> (63 - v87);
      v62 = (_DWORD)v82 + v87;
      LOBYTE(v87) = *((_BYTE *)v86 + 2);
      v61 = v88 + *v86;
      v63[2] = v87;
      v63 += 4;
      a2 -= 4;
      if (v62 >= 0x41)
      {
        --v63;
        goto LABEL_130;
      }
    }
    if (v62 > 0x40)
    {
      v89 = &a3[v10];
      --v63;
      goto LABEL_131;
    }
LABEL_143:
    while (v10 < 8)
    {
      if (v10)
      {
        if (&a3[v10 - (v62 >> 3)] >= a3)
          v91 = v62 >> 3;
        else
          v91 = v10;
        v62 -= 8 * v91;
        goto LABEL_150;
      }
      v92 = 0;
LABEL_151:
      v89 = &a3[v92];
      if (!a2)
        goto LABEL_181;
      if (!v92 && v62 == 64 && !v18)
      {
        --v63;
LABEL_178:
        v62 = 64;
        v89 = a3;
LABEL_131:
        if (v89 == a3 && v62 == 64 && !v18 && !v61)
          return v63 - a1;
        v50 = v63 == v5;
        goto LABEL_137;
      }
      v93 = &v67[2 * v18];
      v94 = *v93;
      v95 = *((_BYTE *)v93 + 2);
      LODWORD(v93) = *((unsigned __int8 *)v93 + 3);
      v96 = v11 << v62 >> 1 >> (63 - v93);
      v62 += v93;
      v18 = v96 + v94;
      *(v63 - 1) = v95;
      if (v62 > 0x40)
      {
        v63 = v68 + 1;
        goto LABEL_131;
      }
      if (v92 >= 8)
      {
        v97 = v62 >> 3;
        v62 &= 7u;
LABEL_163:
        v10 = v92 - v97;
        v11 = *(_QWORD *)&a3[v10];
        goto LABEL_164;
      }
      if (v92)
      {
        if (&v89[-(v62 >> 3)] >= a3)
          v97 = v62 >> 3;
        else
          v97 = v92;
        v62 -= 8 * v97;
        goto LABEL_163;
      }
      v10 = 0;
LABEL_164:
      if (a2 == 1)
      {
        v89 = &a3[v10];
LABEL_181:
        v63 = v5;
        goto LABEL_131;
      }
      if (!v10 && v62 == 64 && !v61)
        goto LABEL_178;
      v98 = &v67[2 * v61];
      v99 = *v98;
      v100 = *((_BYTE *)v98 + 2);
      LODWORD(v98) = *((unsigned __int8 *)v98 + 3);
      v101 = v11 << v62 >> 1 >> (63 - v98);
      v62 += v98;
      v61 = v101 + v99;
      v68 += 2;
      *v63 = v100;
      v63 += 2;
      a2 -= 2;
      if (v62 >= 0x41)
      {
        v89 = &a3[v10];
        --v63;
        goto LABEL_131;
      }
    }
    v91 = v62 >> 3;
    v62 &= 7u;
LABEL_150:
    v92 = v10 - v91;
    v11 = *(_QWORD *)&a3[v92];
    goto LABEL_151;
  }
  if (!a4)
    return -72;
  v7 = a4 - 8;
  if (a4 < 8)
  {
    v8 = *a3;
    switch(a4)
    {
      case 2uLL:
        goto LABEL_19;
      case 3uLL:
        goto LABEL_18;
      case 4uLL:
        goto LABEL_17;
      case 5uLL:
        goto LABEL_16;
      case 6uLL:
        goto LABEL_15;
      case 7uLL:
        v8 |= (unint64_t)a3[6] << 48;
LABEL_15:
        v8 += (unint64_t)a3[5] << 40;
LABEL_16:
        v8 += (unint64_t)a3[4] << 32;
LABEL_17:
        v8 += (unint64_t)a3[3] << 24;
LABEL_18:
        v8 += (unint64_t)a3[2] << 16;
LABEL_19:
        v8 += (unint64_t)a3[1] << 8;
        break;
      default:
        break;
    }
    if (a3[a4 - 1])
    {
      v7 = 0;
      v9 = __clz(a3[a4 - 1]) - 8 * a4 + 41;
      goto LABEL_22;
    }
    return -1;
  }
  v8 = *(_QWORD *)&a3[v7];
  if (!HIBYTE(v8))
    return -1;
  if (a4 > 0xFFFFFFFFFFFFFF88)
    return a4;
  v9 = __clz(HIBYTE(v8)) - 23;
LABEL_22:
  v13 = *a5;
  v14 = v8 << v9 >> 1 >> (63 - v13);
  v15 = v9 + v13;
  if (v15 > 0x40)
    goto LABEL_48;
  if (v7 >= 8)
  {
    v16 = v15 >> 3;
    v15 &= 7u;
  }
  else
  {
    if (!v7)
      goto LABEL_48;
    if (&a3[v7 - (v15 >> 3)] >= a3)
      v16 = v15 >> 3;
    else
      v16 = v7;
    v15 -= 8 * v16;
  }
  v7 -= v16;
  v8 = *(_QWORD *)&a3[v7];
LABEL_48:
  v21 = v8 << v15 >> 1 >> ((63 - v13) & 0x3F);
  v22 = v15 + v13;
  if (v15 + v13 > 0x40)
  {
LABEL_49:
    v23 = a1;
LABEL_71:
    v49 = &a3[v7];
    goto LABEL_72;
  }
  if (v7 >= 8)
  {
    v26 = v22 >> 3;
    v22 &= 7u;
    v7 -= v26;
  }
  else
  {
    if (!v7)
      goto LABEL_59;
    v24 = v22 >> 3;
    if (&a3[v7 - v24] >= a3)
      v25 = v24;
    else
      v25 = v7;
    v22 -= 8 * v25;
    v7 -= v25;
    if (v22 > 0x40)
      goto LABEL_49;
  }
  v8 = *(_QWORD *)&a3[v7];
LABEL_59:
  v27 = a5 + 2;
  v23 = a1 + 1;
  while (1)
  {
    v28 = v23 - 1;
    if (v7 >= 8)
    {
      v30 = 0;
      v31 = v22 >> 3;
      v22 &= 7u;
    }
    else
    {
      if (!v7)
        goto LABEL_80;
      v29 = &a3[v7 - (v22 >> 3)];
      v30 = v29 < a3;
      v31 = v29 >= a3 ? v22 >> 3 : v7;
      v22 -= 8 * v31;
    }
    v7 -= v31;
    v8 = *(_QWORD *)&a3[v7];
    if (v30 || (unint64_t)v28 >= v6)
      break;
    v32 = &v27[2 * v14];
    v33 = *v32;
    v34 = *((_BYTE *)v32 + 2);
    LODWORD(v32) = *((unsigned __int8 *)v32 + 3);
    v35 = v8 << v22 >> -(char)v32;
    LODWORD(v32) = v22 + (_DWORD)v32;
    v36 = v35 + v33;
    *(v23 - 1) = v34;
    v37 = &v27[2 * v21];
    v38 = *v37;
    v39 = *((_BYTE *)v37 + 2);
    LODWORD(v37) = *((unsigned __int8 *)v37 + 3);
    v40 = v8 << (char)v32 >> -(char)v37;
    LODWORD(v32) = (_DWORD)v32 + (_DWORD)v37;
    v41 = v40 + v38;
    *v23 = v39;
    v42 = &v27[2 * v36];
    v43 = *v42;
    v44 = *((_BYTE *)v42 + 2);
    LODWORD(v42) = *((unsigned __int8 *)v42 + 3);
    v45 = v8 << (char)v32 >> -(char)v42;
    LODWORD(v42) = (_DWORD)v32 + (_DWORD)v42;
    v14 = v45 + v43;
    v23[1] = v44;
    v46 = &v27[2 * v41];
    v47 = *((unsigned __int8 *)v46 + 3);
    v48 = v8 << (char)v42 >> -(char)v47;
    v22 = (_DWORD)v42 + v47;
    LOBYTE(v47) = *((_BYTE *)v46 + 2);
    v21 = v48 + *v46;
    v23[2] = v47;
    v23 += 4;
    a2 -= 4;
    if (v22 >= 0x41)
    {
      --v23;
      goto LABEL_71;
    }
  }
  if (v22 > 0x40)
  {
    v49 = &a3[v7];
    --v23;
    goto LABEL_72;
  }
  while (1)
  {
LABEL_80:
    if (v7 >= 8)
    {
      v51 = v22 >> 3;
      v22 &= 7u;
    }
    else
    {
      if (!v7)
        goto LABEL_88;
      v51 = &a3[v7 - (v22 >> 3)] >= a3 ? v22 >> 3 : v7;
      v22 -= 8 * v51;
    }
    v7 -= v51;
    v8 = *(_QWORD *)&a3[v7];
LABEL_88:
    v49 = &a3[v7];
    if (!a2)
      goto LABEL_176;
    if (!v7 && v22 == 64)
    {
      --v23;
LABEL_173:
      v22 = 64;
      v49 = a3;
      goto LABEL_72;
    }
    v52 = &v27[2 * v14];
    v53 = *v52;
    v54 = *((_BYTE *)v52 + 2);
    LODWORD(v52) = *((unsigned __int8 *)v52 + 3);
    v55 = v8 << v22 >> -(char)v52;
    v22 += v52;
    v14 = v55 + v53;
    *(v23 - 1) = v54;
    if (v22 > 0x40)
    {
      v23 = v28 + 1;
      goto LABEL_72;
    }
    if (v7 >= 8)
    {
      v56 = v22 >> 3;
      v22 &= 7u;
    }
    else
    {
      if (!v7)
        goto LABEL_100;
      v56 = &v49[-(v22 >> 3)] >= a3 ? v22 >> 3 : v7;
      v22 -= 8 * v56;
    }
    v7 -= v56;
    v8 = *(_QWORD *)&a3[v7];
LABEL_100:
    if (a2 == 1)
      break;
    if (!v7 && v22 == 64)
      goto LABEL_173;
    v57 = &v27[2 * v21];
    v58 = *v57;
    v59 = *((_BYTE *)v57 + 2);
    LODWORD(v57) = *((unsigned __int8 *)v57 + 3);
    v60 = v8 << v22 >> -(char)v57;
    v22 += v57;
    v21 = v60 + v58;
    v28 += 2;
    *v23 = v59;
    v23 += 2;
    a2 -= 2;
    if (v22 >= 0x41)
    {
      v49 = &a3[v7];
      --v23;
      goto LABEL_72;
    }
  }
  v49 = &a3[v7];
LABEL_176:
  v23 = v5;
LABEL_72:
  if (v49 == a3 && v22 == 64 && !v14 && !v21)
    return v23 - a1;
  v50 = v23 == v5;
LABEL_137:
  if (v50)
    return -70;
  else
    return -20;
}

unint64_t sub_1D4B9B610()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int *v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t result;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _OWORD v14[1024];
  _QWORD v15[65];

  v0 = MEMORY[0x1E0C80A78]();
  v15[64] = *MEMORY[0x1E0C80C00];
  v12 = 255;
  if (v3 < 2)
    return -72;
  v4 = v3;
  v5 = v2;
  v6 = v1;
  v7 = (_BYTE *)v0;
  memset(v14, 0, 512);
  v13 = 0;
  result = sub_1D4B9AB48((uint64_t)v15, &v12, &v13, v2, v3);
  if (result > 0xFFFFFFFFFFFFFF88)
    return result;
  v9 = result;
  v10 = v4 > result;
  v11 = v4 - result;
  if (!v10)
    return -72;
  result = sub_1D4B9A984((int *)v14, (uint64_t)v15, v12, v13);
  if (result <= 0xFFFFFFFFFFFFFF88)
    return sub_1D4B9ADEC(v7, v6, (unsigned __int8 *)v5 + v9, v11, (unsigned __int16 *)v14);
  return result;
}

unint64_t sub_1D4B9B75C(_WORD *a1, char *a2, unint64_t a3)
{
  unint64_t result;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21[17];
  _OWORD v22[16];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v20 = 0;
  result = sub_1D4B9B898(v22, (uint64_t)v21, &v19, &v20, a2, a3);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    v5 = v20;
    if (v20 <= (unsigned __int16)*a1)
    {
      *a1 = v20;
      if (v5)
      {
        v6 = 0;
        v7 = 0;
        if (v5 + 1 > 2)
          v8 = v5 + 1;
        else
          v8 = 2;
        v9 = v8 - 1;
        do
        {
          v10 = v21[v6 + 1] << v6;
          v21[v6 + 1] = v7;
          v7 += v10;
          ++v6;
        }
        while (v9 != v6);
      }
      v11 = v19;
      if (v19)
      {
        v12 = 0;
        v13 = v5 + 1;
        do
        {
          v14 = *((unsigned __int8 *)v22 + v12);
          v15 = v21[v14];
          v16 = (v15 + (1 << v14 >> 1));
          if (v15 < v16)
          {
            v17 = (char *)&a1[v15 + 1] + 1;
            v18 = v16 - v15;
            do
            {
              *(v17 - 1) = v12;
              *v17 = v13 - v14;
              v17 += 2;
              --v18;
            }
            while (v18);
          }
          v21[v14] = v16;
          ++v12;
        }
        while (v12 != v11);
      }
    }
    else
    {
      return -44;
    }
  }
  return result;
}

uint64_t sub_1D4B9B898(_OWORD *a1, uint64_t a2, _DWORD *a3, _DWORD *a4, char *a5, unint64_t a6)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;

  if (a6)
  {
    v10 = *a5;
    if ((*a5 & 0x80000000) == 0)
    {
      if (v10 < a6)
      {
        v11 = sub_1D4B9B610();
        v12 = v11;
        if (v11 > 0xFFFFFFFFFFFFFF88)
          return v12;
        goto LABEL_14;
      }
      return -72;
    }
    if (v10 < 0xF2)
    {
      if ((v10 - 126) >> 1 >= a6)
        return -72;
      v11 = v10 - 127;
      if (v10 == 127)
      {
        *(_DWORD *)(a2 + 64) = 0;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)(a2 + 48) = 0u;
        *(_OWORD *)a2 = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        return -20;
      }
      v14 = 0;
      v15 = a5 + 1;
      do
      {
        v16 = (char *)a1 + v14;
        *v16 = *v15 >> 4;
        v17 = *v15++;
        v16[1] = v17 & 0xF;
        v14 += 2;
      }
      while (v11 > v14);
      v10 = (v10 - 126) >> 1;
    }
    else
    {
      v11 = dword_1D4BD8C50[v10 - 242];
      *(_QWORD *)&v13 = 0x101010101010101;
      *((_QWORD *)&v13 + 1) = 0x101010101010101;
      a1[14] = v13;
      a1[15] = v13;
      a1[12] = v13;
      a1[13] = v13;
      a1[10] = v13;
      a1[11] = v13;
      a1[8] = v13;
      a1[9] = v13;
      a1[6] = v13;
      a1[7] = v13;
      a1[4] = v13;
      a1[5] = v13;
      a1[2] = v13;
      a1[3] = v13;
      *a1 = v13;
      a1[1] = v13;
      v10 = 0;
    }
LABEL_14:
    *(_DWORD *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    if (v11)
    {
      v18 = 0;
      v19 = 0;
      v20 = 1;
      while (1)
      {
        v21 = *((unsigned __int8 *)a1 + v18);
        if (v21 > 0xF)
          break;
        ++*(_DWORD *)(a2 + 4 * v21);
        v19 += 1 << *((_BYTE *)a1 + v18) >> 1;
        v18 = v20;
        if (v11 <= v20++)
        {
          if (!v19)
            return -20;
          v23 = __clz(v19);
          if ((v23 ^ 0x1F) > 0xF)
            return -20;
          v24 = (2 << (v23 ^ 0x1F)) - v19;
          v25 = __clz(v24) ^ 0x1F;
          if (1 << v25 != v24)
            return -20;
          v26 = v25 + 1;
          *((_BYTE *)a1 + v11) = v26;
          ++*(_DWORD *)(a2 + 4 * v26);
          v27 = *(_DWORD *)(a2 + 4);
          v12 = -20;
          if (v27 >= 2 && (v27 & 1) == 0)
          {
            *a3 = v11 + 1;
            *a4 = 32 - v23;
            return v10 + 1;
          }
          return v12;
        }
      }
    }
    return -20;
  }
  return -72;
}

uint64_t sub_1D4B9BA9C(_BYTE *a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int16 *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;

  if (a2 <= a4)
    return -70;
  if (!a4)
    return -72;
  v19 = v5;
  v20 = v6;
  v10 = *a5;
  v8 = (uint64_t)(a5 + 1);
  v9 = v10;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = a3;
  if (a4 >= 8)
  {
    v11 = *(_QWORD *)&a3[a4 - 8];
    v17 = (uint64_t)&a3[a4 - 8];
    v15 = v11;
    if (HIBYTE(v11))
    {
      LODWORD(v16) = __clz(HIBYTE(v11)) - 23;
      if (a4 > 0xFFFFFFFFFFFFFF88)
        return a4;
      goto LABEL_18;
    }
    return -1;
  }
  v12 = *a3;
  v17 = (uint64_t)a3;
  v15 = v12;
  switch(a4)
  {
    case 2uLL:
      goto LABEL_15;
    case 3uLL:
      goto LABEL_14;
    case 4uLL:
      goto LABEL_13;
    case 5uLL:
      goto LABEL_12;
    case 6uLL:
      goto LABEL_11;
    case 7uLL:
      v12 |= (unint64_t)a3[6] << 48;
LABEL_11:
      v12 += (unint64_t)a3[5] << 40;
LABEL_12:
      v12 += (unint64_t)a3[4] << 32;
LABEL_13:
      v12 += (unint64_t)a3[3] << 24;
LABEL_14:
      v12 += (unint64_t)a3[2] << 16;
LABEL_15:
      v15 = v12 + ((unint64_t)a3[1] << 8);
      break;
    default:
      break;
  }
  if (!a3[a4 - 1])
    return -1;
  LODWORD(v16) = __clz(a3[a4 - 1]) - 8 * a4 + 41;
LABEL_18:
  sub_1D4B9BCC0(a1, (uint64_t)&v15, (unint64_t)&a1[a2], v8, v9);
  if ((_DWORD)v16 == 64 && v17 == (_QWORD)v18)
    return a2;
  else
    return -20;
}

uint64_t sub_1D4B9BBD8(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  if (a3)
  {
    *(_QWORD *)(a1 + 24) = a2;
    if (a3 < 8)
    {
      *(_QWORD *)(a1 + 16) = a2;
      v5 = *a2;
      *(_QWORD *)a1 = v5;
      switch(a3)
      {
        case 2uLL:
          goto LABEL_12;
        case 3uLL:
          goto LABEL_11;
        case 4uLL:
          goto LABEL_10;
        case 5uLL:
          goto LABEL_9;
        case 6uLL:
          goto LABEL_8;
        case 7uLL:
          v5 |= (unint64_t)a2[6] << 48;
          *(_QWORD *)a1 = v5;
LABEL_8:
          v5 += (unint64_t)a2[5] << 40;
          *(_QWORD *)a1 = v5;
LABEL_9:
          v5 += (unint64_t)a2[4] << 32;
          *(_QWORD *)a1 = v5;
LABEL_10:
          v5 += (unint64_t)a2[3] << 24;
          *(_QWORD *)a1 = v5;
LABEL_11:
          v5 += (unint64_t)a2[2] << 16;
          *(_QWORD *)a1 = v5;
LABEL_12:
          *(_QWORD *)a1 = v5 + ((unint64_t)a2[1] << 8);
          break;
        default:
          break;
      }
      if (a2[a3 - 1])
      {
        v4 = __clz(a2[a3 - 1]) - 8 * a3 + 41;
        goto LABEL_15;
      }
    }
    else
    {
      v3 = *(_QWORD *)&a2[a3 - 8];
      *(_QWORD *)(a1 + 16) = &a2[a3 - 8];
      *(_QWORD *)a1 = v3;
      if (a2[a3 - 1])
      {
        v4 = __clz(a2[a3 - 1]) - 23;
LABEL_15:
        *(_DWORD *)(a1 + 8) = v4;
        return a3;
      }
    }
    return -1;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return -72;
}

_BYTE *sub_1D4B9BCC0(_BYTE *result, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v5;
  unsigned int v6;
  _BYTE *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  _BOOL4 v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  char v17;
  int v18;
  char *v19;
  char v20;
  int v21;
  char *v22;
  char v23;
  int v24;
  char *v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _BOOL4 v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  char *v35;
  char v36;
  int v37;
  char *v38;
  char v39;

  v5 = -a5 & 0x3F;
  v6 = *(_DWORD *)(a2 + 8);
  if (v6 > 0x40)
  {
LABEL_2:
    v7 = result;
    goto LABEL_13;
  }
  do
  {
    v9 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    if (v9 >= v8 + 8)
    {
      v13 = 0;
      v14 = (uint64_t *)(v9 - (v6 >> 3));
      *(_QWORD *)(a2 + 16) = v14;
      v6 &= 7u;
    }
    else
    {
      if (v9 == v8)
        goto LABEL_2;
      v10 = v6 >> 3;
      v11 = v9 - v8;
      v12 = v9 - v10 >= v8;
      v13 = v9 - v10 < v8;
      if (v12)
        v10 = v10;
      else
        v10 = v11;
      v14 = (uint64_t *)(v9 - v10);
      *(_QWORD *)(a2 + 16) = v14;
      v6 -= 8 * v10;
    }
    *(_DWORD *)(a2 + 8) = v6;
    v15 = *v14;
    *(_QWORD *)a2 = v15;
    if (v13 || (unint64_t)result > a3 - 4)
      goto LABEL_2;
    v16 = (char *)(a4 + 2 * ((unint64_t)(v15 << v6) >> v5));
    v17 = *v16;
    *(_DWORD *)(a2 + 8) = v6 + v16[1];
    *result = v17;
    v18 = *(_DWORD *)(a2 + 8);
    v19 = (char *)(a4 + 2 * (*(_QWORD *)a2 << v18 >> v5));
    v20 = *v19;
    *(_DWORD *)(a2 + 8) = v18 + v19[1];
    result[1] = v20;
    v21 = *(_DWORD *)(a2 + 8);
    v22 = (char *)(a4 + 2 * (*(_QWORD *)a2 << v21 >> v5));
    v23 = *v22;
    *(_DWORD *)(a2 + 8) = v21 + v22[1];
    result[2] = v23;
    v24 = *(_DWORD *)(a2 + 8);
    v25 = (char *)(a4 + 2 * (*(_QWORD *)a2 << v24 >> v5));
    v26 = *v25;
    *(_DWORD *)(a2 + 8) = v24 + v25[1];
    v7 = result + 4;
    result[3] = v26;
    v6 = *(_DWORD *)(a2 + 8);
    result += 4;
  }
  while (v6 <= 0x40);
LABEL_13:
  while (v6 <= 0x40)
  {
    v28 = *(_QWORD *)(a2 + 16);
    v27 = *(_QWORD *)(a2 + 24);
    if (v28 >= v27 + 8)
    {
      v31 = 0;
      v32 = (uint64_t *)(v28 - (v6 >> 3));
      *(_QWORD *)(a2 + 16) = v32;
      v33 = v6 & 7;
    }
    else
    {
      if (v28 == v27)
        break;
      v29 = v6 >> 3;
      v30 = v28 - v27;
      v12 = v28 - v29 >= v27;
      v31 = v28 - v29 < v27;
      v29 = v12 ? v29 : v30;
      v32 = (uint64_t *)(v28 - v29);
      *(_QWORD *)(a2 + 16) = v32;
      v33 = v6 - 8 * v29;
    }
    *(_DWORD *)(a2 + 8) = v33;
    v34 = *v32;
    *(_QWORD *)a2 = v34;
    if (v31 || (unint64_t)v7 >= a3)
      break;
    v35 = (char *)(a4 + 2 * ((unint64_t)(v34 << v33) >> v5));
    v36 = *v35;
    *(_DWORD *)(a2 + 8) = v33 + v35[1];
    *v7++ = v36;
    v6 = *(_DWORD *)(a2 + 8);
  }
  while ((unint64_t)v7 < a3)
  {
    v37 = *(_DWORD *)(a2 + 8);
    v38 = (char *)(a4 + 2 * (*(_QWORD *)a2 << v37 >> v5));
    v39 = *v38;
    *(_DWORD *)(a2 + 8) = v37 + v38[1];
    *v7++ = v39;
  }
  return result;
}

unint64_t sub_1D4B9BEC8()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  unint64_t result;
  unsigned __int16 v9;
  _QWORD v10[1025];

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = (_BYTE *)v0;
  v10[1024] = *MEMORY[0x1E0C80C00];
  bzero(v10, 0x2000uLL);
  v9 = 12;
  result = sub_1D4B9B75C(&v9, v4, v2);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (v2 <= result)
      return -72;
    else
      return sub_1D4B9BA9C(v7, v6, (unsigned __int8 *)&v4[result], v2 - result, &v9);
  }
  return result;
}

unint64_t sub_1D4B9BFA0(_BYTE *a1, uint64_t a2, unsigned __int16 *a3, unint64_t a4, unsigned __int16 *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unsigned __int8 *v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  _BYTE *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  unsigned __int16 *v47;
  unsigned __int16 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  uint64_t *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned __int8 *v56;
  _BYTE *v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;
  _BYTE *v61;
  unsigned int v62;
  _BYTE *v63;
  unsigned int v64;
  _BYTE *v65;
  unsigned int v66;
  _BYTE *v67;
  unsigned int v68;
  _BYTE *v69;
  unsigned int v70;
  _BYTE *v71;
  unsigned int v72;
  _BYTE *v73;
  unsigned int v74;
  _BYTE *v75;
  unsigned int v76;
  _BYTE *v77;
  unsigned int v78;
  _BYTE *v79;
  unsigned int v80;
  _BYTE *v81;
  unsigned int v82;
  _BYTE *v83;
  unsigned int v84;
  _BYTE *v85;
  char *v86;
  char v87;
  int v88;
  char *v89;
  char v90;
  int v91;
  char *v92;
  char v93;
  int v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  _BYTE *v103;
  unint64_t v104;
  unint64_t v105;
  _BYTE *v106;
  _BYTE *v107;
  _BYTE *v115;
  unint64_t v116;
  _BYTE *v117;
  uint64_t *v118;
  unsigned __int8 *v119;
  unsigned __int16 *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  __int128 v125;
  __int128 v126;
  unint64_t v127;
  uint64_t v128;
  unsigned __int8 *v129;
  unsigned __int8 *v130;
  unint64_t v131;
  uint64_t v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  unint64_t v135;
  uint64_t v136;
  unsigned __int16 *v137;
  unsigned __int16 *v138;
  uint64_t v139;
  uint64_t v140;

  if (a4 < 0xA)
    return -20;
  v139 = v5;
  v140 = v6;
  v9 = (uint64_t)(a5 + 1);
  v10 = *a5;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  v131 = 0;
  v132 = 0;
  v133 = 0;
  v127 = 0;
  v128 = 0;
  v129 = 0;
  v125 = 0u;
  v126 = 0u;
  v11 = *a3;
  v12 = a3[1];
  v13 = a3[2];
  v14 = v11 + v12 + v13 + 6;
  v15 = a4 - v14;
  if (a4 < v14)
    return -20;
  if (!(_DWORD)v11)
    return -72;
  v18 = (unsigned __int8 *)(a3 + 3);
  v19 = (unsigned __int8 *)a3 + v11 + 6;
  v138 = a3 + 3;
  if (v11 < 8)
  {
    v22 = *v18;
    v137 = a3 + 3;
    v135 = v22;
    switch((int)v11)
    {
      case 2:
        goto LABEL_15;
      case 3:
        goto LABEL_14;
      case 4:
        goto LABEL_13;
      case 5:
        goto LABEL_12;
      case 6:
        goto LABEL_11;
      case 7:
        v22 |= (unint64_t)*((unsigned __int8 *)a3 + 12) << 48;
LABEL_11:
        v22 += (unint64_t)*((unsigned __int8 *)a3 + 11) << 40;
LABEL_12:
        v22 += (unint64_t)*((unsigned __int8 *)a3 + 10) << 32;
LABEL_13:
        v22 += (unint64_t)*((unsigned __int8 *)a3 + 9) << 24;
LABEL_14:
        v22 += (unint64_t)*((unsigned __int8 *)a3 + 8) << 16;
LABEL_15:
        v135 = v22 + ((unint64_t)*((unsigned __int8 *)a3 + 7) << 8);
        break;
      default:
        break;
    }
    if (!v18[v11 - 1])
      return -1;
    v21 = __clz(v18[v11 - 1]) - 8 * v11 + 41;
  }
  else
  {
    v20 = *((_QWORD *)v19 - 1);
    v137 = (unsigned __int16 *)(v19 - 8);
    v135 = v20;
    if (!HIBYTE(v20))
      return -1;
    v21 = __clz(HIBYTE(v20)) - 23;
  }
  LODWORD(v136) = v21;
  if (!(_DWORD)v12)
    return -72;
  v23 = &v19[v12];
  v134 = v19;
  if (v12 < 8)
  {
    v26 = *v19;
    v133 = v19;
    v131 = v26;
    switch((int)v12)
    {
      case 2:
        goto LABEL_28;
      case 3:
        goto LABEL_27;
      case 4:
        goto LABEL_26;
      case 5:
        goto LABEL_25;
      case 6:
        goto LABEL_24;
      case 7:
        v26 |= (unint64_t)v19[6] << 48;
LABEL_24:
        v26 += (unint64_t)v19[5] << 40;
LABEL_25:
        v26 += (unint64_t)v19[4] << 32;
LABEL_26:
        v26 += (unint64_t)v19[3] << 24;
LABEL_27:
        v26 += (unint64_t)v19[2] << 16;
LABEL_28:
        v131 = v26 + ((unint64_t)v19[1] << 8);
        break;
      default:
        break;
    }
    v27 = v19[v12 - 1];
    if (!v27)
      return -1;
    v25 = __clz(v27) - 8 * v12 + 41;
  }
  else
  {
    v24 = *((_QWORD *)v23 - 1);
    v133 = v23 - 8;
    v131 = v24;
    if (!HIBYTE(v24))
      return -1;
    v25 = __clz(HIBYTE(v24)) - 23;
  }
  LODWORD(v132) = v25;
  if (!(_DWORD)v13)
    return -72;
  v28 = &v23[v13];
  v130 = v23;
  if (v13 < 8)
  {
    v31 = *v23;
    v129 = v23;
    v127 = v31;
    switch((int)v13)
    {
      case 2:
        goto LABEL_42;
      case 3:
        goto LABEL_41;
      case 4:
        goto LABEL_40;
      case 5:
        goto LABEL_39;
      case 6:
        goto LABEL_38;
      case 7:
        v31 |= (unint64_t)v23[6] << 48;
LABEL_38:
        v31 += (unint64_t)v23[5] << 40;
LABEL_39:
        v31 += (unint64_t)v23[4] << 32;
LABEL_40:
        v31 += (unint64_t)v23[3] << 24;
LABEL_41:
        v31 += (unint64_t)v23[2] << 16;
LABEL_42:
        v127 = v31 + ((unint64_t)v23[1] << 8);
        break;
      default:
        break;
    }
    v32 = v23[v13 - 1];
    if (v32)
    {
      v30 = __clz(v32) - 8 * v13 + 41;
      goto LABEL_45;
    }
    return -1;
  }
  v29 = *((_QWORD *)v28 - 1);
  v129 = v28 - 8;
  v127 = v29;
  if (!HIBYTE(v29))
    return -1;
  v30 = __clz(HIBYTE(v29)) - 23;
LABEL_45:
  LODWORD(v128) = v30;
  result = sub_1D4B9BBD8((uint64_t)&v125, v28, v15);
  if (result > 0xFFFFFFFFFFFFFF88)
    return result;
  v33 = (unint64_t)&a1[a2];
  v117 = &a1[(unint64_t)(a2 + 3) >> 2];
  v34 = &v117[((unint64_t)(a2 + 3) >> 2) + ((unint64_t)(a2 + 3) >> 2)];
  v35 = sub_1D4B9C858((uint64_t)&v135);
  v36 = sub_1D4B9C858((uint64_t)&v131) | v35;
  v37 = sub_1D4B9C858((uint64_t)&v127);
  v38 = sub_1D4B9C858((uint64_t)&v125);
  v39 = v135;
  v40 = v131;
  v41 = v127;
  v116 = (unint64_t)v34;
  if (v36 | v37 | v38 || (v42 = v33 - 7, (unint64_t)v34 >= v33 - 7))
  {
    v104 = (unint64_t)&a1[(unint64_t)(a2 + 3) >> 2];
    v105 = (unint64_t)&v117[(unint64_t)(a2 + 3) >> 2];
    v106 = (_BYTE *)v104;
    v107 = (_BYTE *)v105;
    goto LABEL_110;
  }
  v115 = &a1[a2];
  v43 = v125;
  v44 = (unint64_t)(a2 + 3) >> 2;
  v45 = -v10 & 0x3F;
  v46 = v136;
  v48 = v137;
  v47 = v138;
  v124 = (unint64_t)(v138 + 4);
  v49 = v133;
  v119 = v134;
  v120 = v138;
  v123 = (unint64_t)(v134 + 8);
  v51 = v129;
  v50 = v130;
  v122 = (unint64_t)(v130 + 8);
  v118 = (uint64_t *)*((_QWORD *)&v126 + 1);
  v52 = (uint64_t *)v126;
  v121 = *((_QWORD *)&v126 + 1) + 8;
  v53 = v132;
  v54 = v128;
  v55 = DWORD2(v125);
  v56 = v130;
  do
  {
    v57 = a1;
    v58 = &a1[3 * v44];
    v59 = &v57[2 * v44];
    v60 = &v57[v44];
    v61 = (_BYTE *)(v9 + 2 * (v39 << v46 >> v45));
    v62 = v46 + v61[1];
    *v57 = *v61;
    v63 = (_BYTE *)(v9 + 2 * (v40 << v53 >> v45));
    v64 = v53 + v63[1];
    *v60 = *v63;
    v65 = (_BYTE *)(v9 + 2 * (v41 << v54 >> v45));
    v66 = v54 + v65[1];
    *v59 = *v65;
    v67 = (_BYTE *)(v9 + 2 * ((unint64_t)(v43 << v55) >> v45));
    v68 = v55 + v67[1];
    *v58 = *v67;
    v69 = (_BYTE *)(v9 + 2 * (v39 << v62 >> v45));
    v70 = v62 + v69[1];
    v57[1] = *v69;
    v71 = (_BYTE *)(v9 + 2 * (v40 << v64 >> v45));
    v72 = v64 + v71[1];
    v60[1] = *v71;
    v73 = (_BYTE *)(v9 + 2 * (v41 << v66 >> v45));
    v74 = v66 + v73[1];
    v59[1] = *v73;
    v75 = (_BYTE *)(v9 + 2 * ((unint64_t)(v43 << v68) >> v45));
    v76 = v68 + v75[1];
    v58[1] = *v75;
    v77 = (_BYTE *)(v9 + 2 * (v39 << v70 >> v45));
    v78 = v70 + v77[1];
    v57[2] = *v77;
    v79 = (_BYTE *)(v9 + 2 * (v40 << v72 >> v45));
    v80 = v72 + v79[1];
    v60[2] = *v79;
    v81 = (_BYTE *)(v9 + 2 * (v41 << v74 >> v45));
    v82 = v74 + v81[1];
    v59[2] = *v81;
    v83 = (_BYTE *)(v9 + 2 * ((unint64_t)(v43 << v76) >> v45));
    v84 = v76 + v83[1];
    v58[2] = *v83;
    v85 = (_BYTE *)(v9 + 2 * (v39 << v78 >> v45));
    v46 = v78 + v85[1];
    v57[3] = *v85;
    v86 = (char *)(v9 + 2 * (v40 << v80 >> v45));
    v87 = *v86;
    v88 = v86[1];
    v60[3] = v87;
    v89 = (char *)(v9 + 2 * (v41 << v82 >> v45));
    v90 = *v89;
    v91 = v89[1];
    v59[3] = v90;
    v92 = (char *)(v9 + 2 * ((unint64_t)(v43 << v84) >> v45));
    v93 = *v92;
    v94 = v92[1];
    v58[3] = v93;
    if (v46 > 0x40)
    {
      v95 = 3;
      goto LABEL_60;
    }
    if ((unint64_t)v48 >= v124)
    {
      v95 = 0;
      v48 = (unsigned __int16 *)((char *)v48 - (v46 >> 3));
      v46 &= 7u;
    }
    else
    {
      if (v48 == v47)
      {
        if (v46 < 0x40)
          v95 = 1;
        else
          v95 = 2;
        goto LABEL_59;
      }
      v96 = v46 >> 3;
      v95 = (unsigned __int16 *)((char *)v48 - v96) < v47;
      if ((unsigned __int16 *)((char *)v48 - v96) >= v47)
        v96 = v96;
      else
        v96 = ((_DWORD)v48 - (_DWORD)v47);
      v48 = (unsigned __int16 *)((char *)v48 - v96);
      v46 -= 8 * v96;
    }
    v39 = *(_QWORD *)v48;
LABEL_59:
    v50 = v56;
LABEL_60:
    v53 = v80 + v88;
    if (v53 > 0x40)
    {
      v97 = 3;
      goto LABEL_71;
    }
    if ((unint64_t)v49 >= v123)
    {
      v97 = 0;
      v49 -= v53 >> 3;
      v53 &= 7u;
    }
    else
    {
      if (v49 == v119)
      {
        if (v53 < 0x40)
          v97 = 1;
        else
          v97 = 2;
        goto LABEL_70;
      }
      v98 = v53 >> 3;
      v97 = &v49[-v98] < v119;
      if (&v49[-v98] >= v119)
        v98 = v98;
      else
        v98 = ((_DWORD)v49 - (_DWORD)v119);
      v47 = v120;
      v49 -= v98;
      v53 -= 8 * v98;
    }
    v40 = *(_QWORD *)v49;
LABEL_70:
    v50 = v56;
LABEL_71:
    v54 = v82 + v91;
    if (v54 > 0x40)
    {
      v99 = 3;
      goto LABEL_81;
    }
    if ((unint64_t)v51 >= v122)
    {
      v99 = 0;
      v51 -= v54 >> 3;
      v54 &= 7u;
LABEL_80:
      v41 = *(_QWORD *)v51;
      goto LABEL_81;
    }
    if (v51 != v50)
    {
      v100 = v54 >> 3;
      v99 = &v51[-v100] < v56;
      if (&v51[-v100] >= v56)
        v100 = v100;
      else
        v100 = ((_DWORD)v51 - (_DWORD)v56);
      v51 -= v100;
      v54 -= 8 * v100;
      goto LABEL_80;
    }
    if (v54 < 0x40)
      v99 = 1;
    else
      v99 = 2;
LABEL_81:
    v55 = v84 + v94;
    if (v55 > 0x40)
    {
      v101 = 3;
      goto LABEL_91;
    }
    if ((unint64_t)v52 >= v121)
    {
      v101 = 0;
      v52 = (uint64_t *)((char *)v52 - (v55 >> 3));
      *(_QWORD *)&v126 = v52;
      v55 &= 7u;
LABEL_90:
      v43 = *v52;
      *(_QWORD *)&v125 = *v52;
      goto LABEL_91;
    }
    if (v52 != v118)
    {
      v102 = v55 >> 3;
      v101 = (uint64_t *)((char *)v52 - v102) < v118;
      if ((uint64_t *)((char *)v52 - v102) >= v118)
        v102 = v102;
      else
        v102 = ((_DWORD)v52 - (_DWORD)v118);
      v47 = v120;
      v52 = (uint64_t *)((char *)v52 - v102);
      *(_QWORD *)&v126 = v52;
      v55 -= 8 * v102;
      goto LABEL_90;
    }
    if (v55 < 0x40)
      v101 = 1;
    else
      v101 = 2;
LABEL_91:
    if (v97 | v95 | v99 | v101)
      break;
    v50 = v56;
    v103 = v58 + 4;
    a1 = v57 + 4;
  }
  while ((unint64_t)v103 < v42);
  a1 = v57 + 4;
  LODWORD(v136) = v46;
  LODWORD(v132) = v53;
  LODWORD(v128) = v54;
  DWORD2(v125) = v55;
  v137 = v48;
  v133 = v49;
  v34 = &v57[3 * v44 + 4];
  v107 = &v57[2 * v44 + 4];
  v106 = &v57[v44 + 4];
  v129 = v51;
  v33 = (unint64_t)v115;
  v104 = (unint64_t)v117;
  v105 = (unint64_t)&v117[(unint64_t)(a2 + 3) >> 2];
LABEL_110:
  v135 = v39;
  v131 = v40;
  result = -20;
  v127 = v41;
  if ((unint64_t)a1 <= v104 && (unint64_t)v106 <= v105 && (unint64_t)v107 <= v116)
  {
    sub_1D4B9BCC0(a1, (uint64_t)&v135, v104, v9, v10);
    sub_1D4B9BCC0(v106, (uint64_t)&v131, v105, v9, v10);
    sub_1D4B9BCC0(v107, (uint64_t)&v127, v116, v9, v10);
    sub_1D4B9BCC0(v34, (uint64_t)&v125, v33, v9, v10);
    if (DWORD2(v125) == 64
      && (_QWORD)v126 == *((_QWORD *)&v126 + 1)
      && (_DWORD)v128 == 64
      && v129 == v130
      && (_DWORD)v132 == 64
      && v133 == v134
      && (_DWORD)v136 == 64
      && v137 == v138)
    {
      return a2;
    }
    else
    {
      return -20;
    }
  }
  return result;
}

uint64_t sub_1D4B9C858(uint64_t a1)
{
  unint64_t v1;
  _BOOL8 v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  BOOL v8;
  _QWORD *v9;
  int v10;

  v1 = *(unsigned int *)(a1 + 8);
  if (v1 > 0x40)
    return 3;
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  if (v4 >= v3 + 8)
  {
    v2 = 0;
    v9 = (_QWORD *)(v4 - (v1 >> 3));
    *(_QWORD *)(a1 + 16) = v9;
    v10 = v1 & 7;
LABEL_10:
    *(_DWORD *)(a1 + 8) = v10;
    *(_QWORD *)a1 = *v9;
    return v2;
  }
  if (v4 != v3)
  {
    v5 = v1 >> 3;
    v6 = v4 - (v1 >> 3);
    v7 = v4 - v3;
    v8 = v6 >= v3;
    v2 = v6 < v3;
    if (v8)
      v5 = v5;
    else
      v5 = v7;
    v9 = (_QWORD *)(v4 - v5);
    *(_QWORD *)(a1 + 16) = v9;
    v10 = v1 - 8 * v5;
    goto LABEL_10;
  }
  if (v1 < 0x40)
    return 1;
  else
    return 2;
}

unint64_t sub_1D4B9C8E0()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t result;
  unsigned __int16 v9;
  _QWORD v10[1025];

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = (_BYTE *)v0;
  v10[1024] = *MEMORY[0x1E0C80C00];
  bzero(v10, 0x2000uLL);
  v9 = 12;
  result = sub_1D4B9B75C(&v9, v4, v2);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (v2 <= result)
      return -72;
    else
      return sub_1D4B9BFA0(v7, v6, (unsigned __int16 *)&v4[result], v2 - result, &v9);
  }
  return result;
}

unint64_t sub_1D4B9C9B8(unsigned int *a1, char *a2, unint64_t a3)
{
  _DWORD *v3;
  unsigned int v4;
  unint64_t result;
  int v7;
  char v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  _DWORD *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _DWORD v89[16];
  uint64_t v90;
  _DWORD v91[148];
  _OWORD v92[16];
  _OWORD v93[4];
  int v94;
  _OWORD v95[4];
  int v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  memset(v91, 0, 68);
  v90 = 0;
  memset(v89, 0, sizeof(v89));
  v3 = a1 + 1;
  v4 = *a1;
  if (*a1 > 0x10)
    return -44;
  v56 = 0;
  result = sub_1D4B9B898(v92, (uint64_t)v91, &v56, (_DWORD *)&v56 + 1, a2, a3);
  if (result > 0xFFFFFFFFFFFFFF88)
    return result;
  v7 = HIDWORD(v56);
  v8 = v4 - BYTE4(v56);
  if (v4 < HIDWORD(v56))
    return -44;
  v9 = 0;
  do
    v10 = (HIDWORD(v56) + v9--);
  while (!v91[v10]);
  v11 = HIDWORD(v56) + v9;
  if (HIDWORD(v56) + v9 == -1)
  {
    v14 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = v91[v12 + 1] + v13;
      v89[v12++ + 2] = v13;
      v13 = v14;
    }
    while (v12 < v10);
  }
  v89[1] = v14;
  v15 = v56;
  if ((_DWORD)v56)
  {
    v16 = 0;
    do
    {
      v17 = *((unsigned __int8 *)v92 + v16);
      v18 = v89[v17 + 1];
      v89[v17 + 1] = v18 + 1;
      v19 = (char *)&v91[20] + 2 * v18;
      *v19 = v16;
      v19[1] = v17;
      ++v16;
    }
    while (v15 != v16);
  }
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v20 = -v9;
  v89[1] = 0;
  if (v11 != -1)
  {
    v21 = 0;
    v22 = 0;
    do
    {
      v23 = v91[v21 + 1] << (v8 + v21);
      *((_DWORD *)&v57 + v21 + 1) = v22;
      v22 += v23;
      ++v21;
    }
    while (v21 < v10);
  }
  if (v20 <= v4 + v9)
  {
    v24 = -v9;
    do
    {
      if (v11 != -1)
      {
        v25 = 0;
        do
        {
          *((_DWORD *)&v57 + 17 * v24 + v25 + 1) = *((_DWORD *)&v57 + v25 + 1) >> v24;
          ++v25;
        }
        while (v25 < v10);
      }
      ++v24;
    }
    while (v24 <= v4 + v9);
  }
  v93[1] = v58;
  v93[2] = v59;
  v93[3] = v60;
  v94 = v61;
  v93[0] = v57;
  if (v14)
  {
    v26 = 0;
    v27 = v7 + 1;
    v28 = v27 - v4;
    v55 = a1 + 1;
    do
    {
      v29 = (unsigned __int8 *)&v91[20] + 2 * v26;
      v30 = *v29;
      v31 = v29[1];
      v32 = v27 - v31;
      v33 = *((unsigned int *)v93 + v31);
      v34 = v4 - (v27 - v31);
      v35 = 1 << (v4 - (v27 - v31));
      if (v34 >= v20)
      {
        v39 = (char *)&v57 + 68 * v32;
        v40 = *(_OWORD *)v39;
        v95[1] = *((_OWORD *)v39 + 1);
        v41 = *((_OWORD *)v39 + 3);
        v95[2] = *((_OWORD *)v39 + 2);
        LODWORD(v42) = v28 + v32;
        if ((int)(v28 + v32) <= 1)
          v42 = 1;
        else
          v42 = v42;
        v43 = v89[v42];
        v95[3] = v41;
        v96 = *((_DWORD *)v39 + 16);
        v95[0] = v40;
        if (v42 >= 2)
        {
          v44 = *((unsigned int *)v95 + v42);
          if ((_DWORD)v44)
          {
            v45 = &v3[v33];
            do
            {
              *v45++ = v30 & 0xFF00FFFF | ((v27 - v31) << 16) | 0x1000000;
              --v44;
            }
            while (v44);
          }
        }
        if (v14 != (_DWORD)v43)
        {
          v46 = 0;
          v47 = (char *)&v91[20] + 2 * v43;
          v48 = (v14 - v43);
          do
          {
            v49 = &v47[2 * v46];
            v50 = *v49;
            v51 = v49[1];
            v52 = *((_DWORD *)v95 + v51);
            v53 = (1 << (v34 - (v27 - v51))) + v52;
            v54 = (v50 << 8) & 0xFF00FFFF | ((v27 - v51 + v32) << 16) | v30 | 0x2000000;
            do
              v3[v33 + v52++] = v54;
            while (v52 < v53);
            *((_DWORD *)v95 + v51) = v53;
            ++v46;
          }
          while (v46 != v48);
        }
        LODWORD(v36) = v35 + v33;
      }
      else
      {
        v36 = (v35 + v33);
        if (v33 < v36)
        {
          v37 = v36 - v33;
          v38 = &v55[v33];
          do
          {
            *v38++ = v30 & 0xFF00FFFF | ((v27 - v31) << 16) | 0x1000000;
            --v37;
          }
          while (v37);
        }
      }
      *((_DWORD *)v93 + v31) = v36;
      ++v26;
    }
    while (v26 != v14);
  }
  return result;
}

uint64_t sub_1D4B9CDBC(_WORD *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, int *a5)
{
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;

  if (!a4)
    return -72;
  v7 = *a5;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = a3;
  if (a4 >= 8)
  {
    v8 = *(_QWORD *)&a3[a4 - 8];
    v14 = (uint64_t)&a3[a4 - 8];
    v12 = v8;
    if (HIBYTE(v8))
    {
      LODWORD(v13) = __clz(HIBYTE(v8)) - 23;
      if (a4 > 0xFFFFFFFFFFFFFF88)
        return a4;
      goto LABEL_16;
    }
    return -1;
  }
  v9 = *a3;
  v14 = (uint64_t)a3;
  v12 = v9;
  switch(a4)
  {
    case 2uLL:
      goto LABEL_13;
    case 3uLL:
      goto LABEL_12;
    case 4uLL:
      goto LABEL_11;
    case 5uLL:
      goto LABEL_10;
    case 6uLL:
      goto LABEL_9;
    case 7uLL:
      v9 |= (unint64_t)a3[6] << 48;
LABEL_9:
      v9 += (unint64_t)a3[5] << 40;
LABEL_10:
      v9 += (unint64_t)a3[4] << 32;
LABEL_11:
      v9 += (unint64_t)a3[3] << 24;
LABEL_12:
      v9 += (unint64_t)a3[2] << 16;
LABEL_13:
      v12 = v9 + ((unint64_t)a3[1] << 8);
      break;
    default:
      break;
  }
  if (!a3[a4 - 1])
    return -1;
  LODWORD(v13) = __clz(a3[a4 - 1]) - 8 * a4 + 41;
LABEL_16:
  sub_1D4B9CEE8(a1, (uint64_t)&v12, (unint64_t)a1 + a2, (uint64_t)(a5 + 1), v7);
  if ((_DWORD)v13 == 64 && v14 == (_QWORD)v15)
    return a2;
  else
    return -20;
}

_WORD *sub_1D4B9CEE8(_WORD *result, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v5;
  unsigned int i;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  _BOOL4 v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  uint64_t v18;
  int v19;
  _WORD *v20;
  uint64_t v21;
  int v22;
  _WORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  _BOOL4 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unsigned int v37;
  unsigned int v38;

  v5 = -a5 & 0x3F;
  for (i = *(_DWORD *)(a2 + 8); i <= 0x40; result = (_WORD *)((char *)v23 + *(unsigned __int8 *)(v24 + 3)))
  {
    v8 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 24);
    if (v8 >= v7 + 8)
    {
      v12 = 0;
      v13 = (uint64_t *)(v8 - (i >> 3));
      *(_QWORD *)(a2 + 16) = v13;
      i &= 7u;
    }
    else
    {
      if (v8 == v7)
        break;
      v9 = i >> 3;
      v10 = v8 - v7;
      v11 = v8 - v9 >= v7;
      v12 = v8 - v9 < v7;
      if (v11)
        v9 = v9;
      else
        v9 = v10;
      v13 = (uint64_t *)(v8 - v9);
      *(_QWORD *)(a2 + 16) = v13;
      i -= 8 * v9;
    }
    *(_DWORD *)(a2 + 8) = i;
    v14 = *v13;
    *(_QWORD *)a2 = v14;
    if (v12)
      break;
    if ((unint64_t)result >= a3 - 7)
      break;
    v15 = a4 + 4 * ((unint64_t)(v14 << i) >> v5);
    *result = *(_WORD *)v15;
    v16 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v15 + 2);
    *(_DWORD *)(a2 + 8) = v16;
    v17 = (_WORD *)((char *)result + *(unsigned __int8 *)(v15 + 3));
    v18 = a4 + 4 * (*(_QWORD *)a2 << v16 >> v5);
    *v17 = *(_WORD *)v18;
    v19 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v18 + 2);
    *(_DWORD *)(a2 + 8) = v19;
    v20 = (_WORD *)((char *)v17 + *(unsigned __int8 *)(v18 + 3));
    v21 = a4 + 4 * (*(_QWORD *)a2 << v19 >> v5);
    *v20 = *(_WORD *)v21;
    v22 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v21 + 2);
    *(_DWORD *)(a2 + 8) = v22;
    v23 = (_WORD *)((char *)v20 + *(unsigned __int8 *)(v21 + 3));
    v24 = a4 + 4 * (*(_QWORD *)a2 << v22 >> v5);
    *v23 = *(_WORD *)v24;
    i = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v24 + 2);
    *(_DWORD *)(a2 + 8) = i;
  }
  v25 = a3 - 2;
  while (i <= 0x40)
  {
    v27 = *(_QWORD *)(a2 + 16);
    v26 = *(_QWORD *)(a2 + 24);
    if (v27 >= v26 + 8)
    {
      v30 = 0;
      v31 = (uint64_t *)(v27 - (i >> 3));
      *(_QWORD *)(a2 + 16) = v31;
      i &= 7u;
    }
    else
    {
      if (v27 == v26)
        break;
      v28 = i >> 3;
      v29 = v27 - v26;
      v11 = v27 - v28 >= v26;
      v30 = v27 - v28 < v26;
      v28 = v11 ? v28 : v29;
      v31 = (uint64_t *)(v27 - v28);
      *(_QWORD *)(a2 + 16) = v31;
      i -= 8 * v28;
    }
    *(_DWORD *)(a2 + 8) = i;
    v32 = *v31;
    *(_QWORD *)a2 = v32;
    if (v30 || (unint64_t)result > v25)
      break;
    v33 = a4 + 4 * ((unint64_t)(v32 << i) >> v5);
    *result = *(_WORD *)v33;
    i = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v33 + 2);
    *(_DWORD *)(a2 + 8) = i;
    result = (_WORD *)((char *)result + *(unsigned __int8 *)(v33 + 3));
  }
  while ((unint64_t)result <= v25)
  {
    v34 = a4 + 4 * (*(_QWORD *)a2 << i >> v5);
    *result = *(_WORD *)v34;
    i = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v34 + 2);
    *(_DWORD *)(a2 + 8) = i;
    result = (_WORD *)((char *)result + *(unsigned __int8 *)(v34 + 3));
  }
  if ((unint64_t)result < a3)
  {
    v35 = *(_QWORD *)a2 << i >> v5;
    v36 = (_BYTE *)(a4 + 4 * v35);
    *(_BYTE *)result = *v36;
    if (v36[3] == 1)
    {
      v37 = *(_DWORD *)(a2 + 8) + v36[2];
    }
    else
    {
      v38 = *(_DWORD *)(a2 + 8);
      if (v38 > 0x3F)
        return result;
      v37 = v38 + *(unsigned __int8 *)(a4 + 4 * v35 + 2);
      if (v37 >= 0x40)
        v37 = 64;
    }
    *(_DWORD *)(a2 + 8) = v37;
  }
  return result;
}

unint64_t sub_1D4B9D180(_WORD *a1, uint64_t a2, unsigned __int16 *a3, unint64_t a4, int *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unsigned __int8 *v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  _QWORD *v48;
  _QWORD *v49;
  unsigned int v50;
  char *v51;
  _WORD *v52;
  char *v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  _WORD *v57;
  uint64_t v58;
  unsigned int v59;
  _WORD *v60;
  uint64_t v61;
  unsigned int v62;
  char *v63;
  uint64_t v64;
  unsigned int v65;
  char *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  _WORD *v72;
  uint64_t v73;
  unsigned int v74;
  char *v75;
  uint64_t v76;
  unsigned int v77;
  char *v78;
  _WORD *v79;
  uint64_t v80;
  unsigned int v81;
  _WORD *v82;
  uint64_t v83;
  unsigned int v84;
  _WORD *v85;
  uint64_t v86;
  unsigned int v87;
  char *v88;
  uint64_t v89;
  unsigned int v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  unsigned __int16 *v103;
  int v104;
  uint64_t v105;
  int v106;
  unsigned __int8 *v107;
  uint64_t v108;
  int v109;
  unsigned __int8 *v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v123;
  char *v124;
  char *v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  unsigned __int16 *v128;
  unint64_t v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  unsigned __int16 *v132;
  unsigned __int16 *v133;
  unint64_t v134;
  _QWORD *v135;
  __int128 v136;
  __int128 v137;
  unint64_t v138;
  uint64_t v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  unint64_t v142;
  uint64_t v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  unint64_t v146;
  uint64_t v147;
  unsigned __int16 *v148;
  unsigned __int16 *v149;
  uint64_t v150;
  uint64_t v151;

  if (a4 < 0xA)
    return -20;
  v150 = v5;
  v151 = v6;
  v9 = (uint64_t)(a5 + 1);
  v10 = *a5;
  v146 = 0;
  v147 = 0;
  v148 = 0;
  v142 = 0;
  v143 = 0;
  v144 = 0;
  v138 = 0;
  v139 = 0;
  v140 = 0;
  v136 = 0u;
  v137 = 0u;
  v11 = *a3;
  v12 = a3[1];
  v13 = a3[2];
  v14 = v11 + v12 + v13 + 6;
  v15 = a4 - v14;
  if (a4 < v14)
    return -20;
  if (!(_DWORD)v11)
    return -72;
  v18 = (unsigned __int8 *)(a3 + 3);
  v19 = (unsigned __int8 *)a3 + v11 + 6;
  v149 = a3 + 3;
  if (v11 < 8)
  {
    v22 = *v18;
    v148 = a3 + 3;
    v146 = v22;
    switch((int)v11)
    {
      case 2:
        goto LABEL_15;
      case 3:
        goto LABEL_14;
      case 4:
        goto LABEL_13;
      case 5:
        goto LABEL_12;
      case 6:
        goto LABEL_11;
      case 7:
        v22 |= (unint64_t)*((unsigned __int8 *)a3 + 12) << 48;
LABEL_11:
        v22 += (unint64_t)*((unsigned __int8 *)a3 + 11) << 40;
LABEL_12:
        v22 += (unint64_t)*((unsigned __int8 *)a3 + 10) << 32;
LABEL_13:
        v22 += (unint64_t)*((unsigned __int8 *)a3 + 9) << 24;
LABEL_14:
        v22 += (unint64_t)*((unsigned __int8 *)a3 + 8) << 16;
LABEL_15:
        v146 = v22 + ((unint64_t)*((unsigned __int8 *)a3 + 7) << 8);
        break;
      default:
        break;
    }
    if (!v18[v11 - 1])
      return -1;
    v21 = __clz(v18[v11 - 1]) - 8 * v11 + 41;
  }
  else
  {
    v20 = *((_QWORD *)v19 - 1);
    v148 = (unsigned __int16 *)(v19 - 8);
    v146 = v20;
    if (!HIBYTE(v20))
      return -1;
    v21 = __clz(HIBYTE(v20)) - 23;
  }
  LODWORD(v147) = v21;
  if (!(_DWORD)v12)
    return -72;
  v23 = &v19[v12];
  v145 = v19;
  if (v12 < 8)
  {
    v26 = *v19;
    v144 = v19;
    v142 = v26;
    switch((int)v12)
    {
      case 2:
        goto LABEL_28;
      case 3:
        goto LABEL_27;
      case 4:
        goto LABEL_26;
      case 5:
        goto LABEL_25;
      case 6:
        goto LABEL_24;
      case 7:
        v26 |= (unint64_t)v19[6] << 48;
LABEL_24:
        v26 += (unint64_t)v19[5] << 40;
LABEL_25:
        v26 += (unint64_t)v19[4] << 32;
LABEL_26:
        v26 += (unint64_t)v19[3] << 24;
LABEL_27:
        v26 += (unint64_t)v19[2] << 16;
LABEL_28:
        v142 = v26 + ((unint64_t)v19[1] << 8);
        break;
      default:
        break;
    }
    v27 = v19[v12 - 1];
    if (!v27)
      return -1;
    v25 = __clz(v27) - 8 * v12 + 41;
  }
  else
  {
    v24 = *((_QWORD *)v23 - 1);
    v144 = v23 - 8;
    v142 = v24;
    if (!HIBYTE(v24))
      return -1;
    v25 = __clz(HIBYTE(v24)) - 23;
  }
  LODWORD(v143) = v25;
  if (!(_DWORD)v13)
    return -72;
  v28 = &v23[v13];
  v141 = v23;
  if (v13 < 8)
  {
    v31 = *v23;
    v140 = v23;
    v138 = v31;
    switch((int)v13)
    {
      case 2:
        goto LABEL_42;
      case 3:
        goto LABEL_41;
      case 4:
        goto LABEL_40;
      case 5:
        goto LABEL_39;
      case 6:
        goto LABEL_38;
      case 7:
        v31 |= (unint64_t)v23[6] << 48;
LABEL_38:
        v31 += (unint64_t)v23[5] << 40;
LABEL_39:
        v31 += (unint64_t)v23[4] << 32;
LABEL_40:
        v31 += (unint64_t)v23[3] << 24;
LABEL_41:
        v31 += (unint64_t)v23[2] << 16;
LABEL_42:
        v138 = v31 + ((unint64_t)v23[1] << 8);
        break;
      default:
        break;
    }
    v32 = v23[v13 - 1];
    if (v32)
    {
      v30 = __clz(v32) - 8 * v13 + 41;
      goto LABEL_45;
    }
    return -1;
  }
  v29 = *((_QWORD *)v28 - 1);
  v140 = v28 - 8;
  v138 = v29;
  if (!HIBYTE(v29))
    return -1;
  v30 = __clz(HIBYTE(v29)) - 23;
LABEL_45:
  LODWORD(v139) = v30;
  result = sub_1D4B9BBD8((uint64_t)&v136, v28, v15);
  if (result > 0xFFFFFFFFFFFFFF88)
    return result;
  v33 = (unint64_t)a1 + a2;
  v124 = (char *)a1 + ((unint64_t)(a2 + 3) >> 2);
  v125 = &v124[(unint64_t)(a2 + 3) >> 2];
  v34 = (unint64_t)&v125[(unint64_t)(a2 + 3) >> 2];
  v35 = sub_1D4B9C858((uint64_t)&v146);
  v36 = sub_1D4B9C858((uint64_t)&v142) | v35;
  v37 = sub_1D4B9C858((uint64_t)&v138);
  v38 = sub_1D4B9C858((uint64_t)&v136);
  v39 = v146;
  v40 = v142;
  v41 = v138;
  if (v36 | v37 | v38 || (v134 = v33 - 7, v34 >= v33 - 7))
  {
    v114 = (unint64_t)a1 + ((unint64_t)(a2 + 3) >> 2);
    v115 = (unint64_t)&v124[(unint64_t)(a2 + 3) >> 2];
    v52 = (_WORD *)v114;
    v53 = (char *)v115;
    v51 = &v125[(unint64_t)(a2 + 3) >> 2];
    goto LABEL_108;
  }
  v123 = (char *)a1 + a2;
  v42 = v136;
  v43 = -v10 & 0x3F;
  v44 = v147;
  v45 = v143;
  v133 = v148;
  v128 = v149;
  v132 = v149 + 4;
  v46 = v144;
  v127 = v145;
  v131 = v145 + 8;
  v47 = v140;
  v126 = v141;
  v130 = v141 + 8;
  v49 = (_QWORD *)*((_QWORD *)&v137 + 1);
  v48 = (_QWORD *)v137;
  v129 = *((_QWORD *)&v137 + 1) + 8;
  v50 = v139;
  v51 = &v125[(unint64_t)(a2 + 3) >> 2];
  v52 = (_WORD *)((char *)a1 + ((unint64_t)(a2 + 3) >> 2));
  v53 = &v124[(unint64_t)(a2 + 3) >> 2];
  v54 = DWORD2(v136);
  do
  {
    v135 = v48;
    v55 = v9 + 4 * (v39 << v44 >> v43);
    *a1 = *(_WORD *)v55;
    v56 = v44 + *(unsigned __int8 *)(v55 + 2);
    v57 = (_WORD *)((char *)a1 + *(unsigned __int8 *)(v55 + 3));
    v58 = v9 + 4 * (v40 << v45 >> v43);
    *v52 = *(_WORD *)v58;
    v59 = v45 + *(unsigned __int8 *)(v58 + 2);
    v60 = (_WORD *)((char *)v52 + *(unsigned __int8 *)(v58 + 3));
    v61 = v9 + 4 * (v41 << v50 >> v43);
    *(_WORD *)v53 = *(_WORD *)v61;
    v62 = v50 + *(unsigned __int8 *)(v61 + 2);
    v63 = &v53[*(unsigned __int8 *)(v61 + 3)];
    v64 = v9 + 4 * ((unint64_t)(v42 << v54) >> v43);
    *(_WORD *)v51 = *(_WORD *)v64;
    v65 = v54 + *(unsigned __int8 *)(v64 + 2);
    v66 = &v51[*(unsigned __int8 *)(v64 + 3)];
    v67 = v9 + 4 * (v39 << v56 >> v43);
    *v57 = *(_WORD *)v67;
    v68 = v56 + *(unsigned __int8 *)(v67 + 2);
    v69 = *(unsigned __int8 *)(v67 + 3);
    v70 = v9 + 4 * (v40 << v59 >> v43);
    *v60 = *(_WORD *)v70;
    v71 = v59 + *(unsigned __int8 *)(v70 + 2);
    v72 = (_WORD *)((char *)v60 + *(unsigned __int8 *)(v70 + 3));
    v73 = v9 + 4 * (v41 << v62 >> v43);
    *(_WORD *)v63 = *(_WORD *)v73;
    v74 = v62 + *(unsigned __int8 *)(v73 + 2);
    v75 = &v63[*(unsigned __int8 *)(v73 + 3)];
    v76 = v9 + 4 * ((unint64_t)(v42 << v65) >> v43);
    *(_WORD *)v66 = *(_WORD *)v76;
    v77 = v65 + *(unsigned __int8 *)(v76 + 2);
    v78 = &v66[*(unsigned __int8 *)(v76 + 3)];
    v79 = (_WORD *)((char *)v57 + v69);
    v80 = v9 + 4 * (v39 << v68 >> v43);
    *v79 = *(_WORD *)v80;
    v81 = v68 + *(unsigned __int8 *)(v80 + 2);
    v82 = (_WORD *)((char *)v79 + *(unsigned __int8 *)(v80 + 3));
    v83 = v9 + 4 * (v40 << v71 >> v43);
    *v72 = *(_WORD *)v83;
    v84 = v71 + *(unsigned __int8 *)(v83 + 2);
    v85 = (_WORD *)((char *)v72 + *(unsigned __int8 *)(v83 + 3));
    v86 = v9 + 4 * (v41 << v74 >> v43);
    *(_WORD *)v75 = *(_WORD *)v86;
    v87 = v74 + *(unsigned __int8 *)(v86 + 2);
    v88 = &v75[*(unsigned __int8 *)(v86 + 3)];
    v89 = v9 + 4 * ((unint64_t)(v42 << v77) >> v43);
    *(_WORD *)v78 = *(_WORD *)v89;
    v90 = v77 + *(unsigned __int8 *)(v89 + 2);
    v91 = &v78[*(unsigned __int8 *)(v89 + 3)];
    v92 = v9 + 4 * (v39 << v81 >> v43);
    *v82 = *(_WORD *)v92;
    v44 = v81 + *(unsigned __int8 *)(v92 + 2);
    v93 = *(unsigned __int8 *)(v92 + 3);
    v94 = v9 + 4 * (v40 << v84 >> v43);
    *v85 = *(_WORD *)v94;
    v95 = *(unsigned __int8 *)(v94 + 2);
    v96 = *(unsigned __int8 *)(v94 + 3);
    v97 = v9 + 4 * (v41 << v87 >> v43);
    *(_WORD *)v88 = *(_WORD *)v97;
    v98 = *(unsigned __int8 *)(v97 + 2);
    v99 = *(unsigned __int8 *)(v97 + 3);
    v100 = v9 + 4 * ((unint64_t)(v42 << v90) >> v43);
    *(_WORD *)v91 = *(_WORD *)v100;
    if (v44 > 0x40)
    {
      v101 = 3;
      goto LABEL_59;
    }
    if (v133 >= v132)
    {
      v101 = 0;
      v103 = (unsigned __int16 *)((char *)v133 - (v44 >> 3));
      v44 &= 7u;
LABEL_58:
      v133 = v103;
      v39 = *(_QWORD *)v103;
      goto LABEL_59;
    }
    if (v133 != v128)
    {
      v102 = v44 >> 3;
      v101 = (unsigned __int16 *)((char *)v133 - v102) < v128;
      if ((unsigned __int16 *)((char *)v133 - v102) >= v128)
        v102 = v102;
      else
        v102 = ((_DWORD)v133 - (_DWORD)v128);
      v103 = (unsigned __int16 *)((char *)v133 - v102);
      v44 -= 8 * v102;
      goto LABEL_58;
    }
    if (v44 < 0x40)
      v101 = 1;
    else
      v101 = 2;
LABEL_59:
    v45 = v84 + v95;
    v104 = *(unsigned __int8 *)(v100 + 2);
    v105 = *(unsigned __int8 *)(v100 + 3);
    if (v45 > 0x40)
    {
      v106 = 3;
      v107 = v46;
      goto LABEL_69;
    }
    v107 = v46;
    if (v46 >= v131)
    {
      v106 = 0;
      v107 = &v46[-(v45 >> 3)];
      v45 &= 7u;
LABEL_68:
      v40 = *(_QWORD *)v107;
      goto LABEL_69;
    }
    if (v46 != v127)
    {
      v108 = v45 >> 3;
      v106 = &v46[-v108] < v127;
      if (&v46[-v108] >= v127)
        v108 = v108;
      else
        v108 = ((_DWORD)v46 - (_DWORD)v127);
      v107 = &v46[-v108];
      v45 -= 8 * v108;
      goto LABEL_68;
    }
    if (v45 < 0x40)
      v106 = 1;
    else
      v106 = 2;
LABEL_69:
    v50 = v87 + v98;
    v46 = v107;
    if (v50 > 0x40)
    {
      v109 = 3;
      v110 = v47;
      goto LABEL_79;
    }
    v110 = v47;
    if (v47 >= v130)
    {
      v109 = 0;
      v110 = &v47[-(v50 >> 3)];
      v50 &= 7u;
LABEL_78:
      v41 = *(_QWORD *)v110;
      goto LABEL_79;
    }
    if (v47 != v126)
    {
      v111 = v50 >> 3;
      v109 = &v47[-v111] < v126;
      if (&v47[-v111] >= v126)
        v111 = v111;
      else
        v111 = ((_DWORD)v47 - (_DWORD)v126);
      v110 = &v47[-v111];
      v50 -= 8 * v111;
      goto LABEL_78;
    }
    if (v50 < 0x40)
      v109 = 1;
    else
      v109 = 2;
LABEL_79:
    v54 = v90 + v104;
    if (v54 > 0x40)
    {
      v47 = v110;
      v112 = 3;
      v48 = v135;
      goto LABEL_89;
    }
    v48 = v135;
    v47 = v110;
    if ((unint64_t)v135 >= v129)
    {
      v112 = 0;
      v48 = (_QWORD *)((char *)v135 - (v54 >> 3));
      *(_QWORD *)&v137 = v48;
      v54 &= 7u;
LABEL_88:
      v42 = *v48;
      *(_QWORD *)&v136 = *v48;
      goto LABEL_89;
    }
    if (v135 != v49)
    {
      v113 = v54 >> 3;
      v112 = (_QWORD *)((char *)v135 - v113) < v49;
      if ((_QWORD *)((char *)v135 - v113) >= v49)
        v113 = v113;
      else
        v113 = ((_DWORD)v135 - (_DWORD)v49);
      v48 = (_QWORD *)((char *)v135 - v113);
      *(_QWORD *)&v137 = (char *)v135 - v113;
      v54 -= 8 * v113;
      goto LABEL_88;
    }
    if (v54 < 0x40)
      v112 = 1;
    else
      v112 = 2;
LABEL_89:
    a1 = (_WORD *)((char *)v82 + v93);
    v52 = (_WORD *)((char *)v85 + v96);
    v53 = &v88[v99];
    v51 = &v91[v105];
  }
  while (!(v106 | v101 | v109 | v112) && (unint64_t)v51 < v134);
  LODWORD(v147) = v44;
  LODWORD(v143) = v45;
  LODWORD(v139) = v50;
  DWORD2(v136) = v54;
  v148 = v133;
  v144 = v46;
  v140 = v47;
  v34 = (unint64_t)&v125[(unint64_t)(a2 + 3) >> 2];
  v33 = (unint64_t)v123;
  v114 = (unint64_t)v124;
  v115 = (unint64_t)&v124[(unint64_t)(a2 + 3) >> 2];
LABEL_108:
  v146 = v39;
  v142 = v40;
  result = -20;
  v138 = v41;
  if ((unint64_t)a1 <= v114 && (unint64_t)v52 <= v115 && (unint64_t)v53 <= v34)
  {
    sub_1D4B9CEE8(a1, (uint64_t)&v146, v114, v9, v10);
    sub_1D4B9CEE8(v52, (uint64_t)&v142, v115, v9, v10);
    sub_1D4B9CEE8(v53, (uint64_t)&v138, v34, v9, v10);
    sub_1D4B9CEE8(v51, (uint64_t)&v136, v33, v9, v10);
    if (DWORD2(v136) == 64
      && (_QWORD)v137 == *((_QWORD *)&v137 + 1)
      && (_DWORD)v139 == 64
      && v140 == v141
      && (_DWORD)v143 == 64
      && v144 == v145
      && (_DWORD)v147 == 64
      && v148 == v149)
    {
      return a2;
    }
    else
    {
      return -20;
    }
  }
  return result;
}

unint64_t sub_1D4B9DAC8()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  unint64_t result;
  int v9;
  _QWORD v10[2049];

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = (_WORD *)v0;
  v10[2048] = *MEMORY[0x1E0C80C00];
  bzero(v10, 0x4000uLL);
  v9 = 12;
  result = sub_1D4B9C9B8((unsigned int *)&v9, v4, v2);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (v2 <= result)
      return -72;
    else
      return sub_1D4B9D180(v7, v6, (unsigned __int16 *)&v4[result], v2 - result, &v9);
  }
  return result;
}

size_t sub_1D4B9DBA0(void *a1, size_t __len, unsigned __int8 *a3, size_t a4)
{
  size_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!__len)
    return -70;
  v4 = __len;
  if (a4 >= __len)
    return -20;
  if (a4 == 1)
  {
    memset(a1, *a3, __len);
    return v4;
  }
  v6 = 0;
  v7 = 0;
  do
  {
    v8 = (char *)&unk_1D4BD8AD0 + 24 * (16 * a4 / __len);
    *(unsigned int *)((char *)&v9 + v6) = *(_DWORD *)&v8[8 * v7] + *(_DWORD *)&v8[8 * v7 + 4] * (__len >> 8);
    ++v7;
    v6 += 4;
  }
  while (v6 != 12);
  return ((uint64_t (*)(void *, size_t))off_1E9845D18[v10 + (v10 >> 4) < v9])(a1, __len);
}

double sub_1D4B9DCB8()
{
  _QWORD *v0;
  double result;

  v0 = malloc(0x26898uLL);
  if (v0)
  {
    v0[3334] = 5;
    result = 0.0;
    *((_OWORD *)v0 + 1665) = 0u;
    *((_OWORD *)v0 + 1666) = 0u;
    *((_DWORD *)v0 + 2563) = 12;
    *(_QWORD *)((char *)v0 + 26732) = 0;
  }
  return result;
}

uint64_t sub_1D4B9DCFC(void *a1)
{
  free(a1);
  return 0;
}

uint64_t sub_1D4B9DD14(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 < 5)
    return 5;
  if (*(_DWORD *)a2 != -47205083)
    return -10;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 8) = (*(_BYTE *)(a2 + 4) & 0xF) + 11;
  if (*(unsigned __int8 *)(a2 + 4) >= 0x10u)
    return -14;
  else
    return 0;
}

uint64_t sub_1D4B9DD70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5 >> 17)
    return -72;
  if (a5 >= 3)
    __asm { BR              X11 }
  return -20;
}

unint64_t sub_1D4B9EBF8(uint64_t a1, char *a2, uint64_t a3, _DWORD *a4, unint64_t a5)
{
  unint64_t result;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  BOOL v19;
  char *v20;

  if (a5 < 8)
    return -72;
  if (*a4 != -47205083)
    return -10;
  *(_QWORD *)(a1 + 26680) = 5;
  result = sub_1D4B9DD14(a1 + 26688, (uint64_t)a4, 5uLL);
  if (result > 0xFFFFFFFFFFFFFF88)
    return result;
  v11 = (char *)a4 + a5;
  v12 = &a2[a3];
  v13 = (char *)a4 + 5;
  v14 = a5 - 5;
  v15 = a2;
  while (1)
  {
    v16 = *v13;
    v17 = v16 >> 6;
    if (v16 >> 6 == 2)
    {
      v18 = 1;
    }
    else
    {
      if (v17 == 3)
      {
        if (v14 != 3)
          return -72;
        return v15 - a2;
      }
      v18 = v13[2] | ((v16 & 7) << 16) | (v13[1] << 8);
    }
    v19 = v14 - 3 >= v18;
    v14 = v14 - 3 - v18;
    if (!v19)
      return -72;
    v20 = v13 + 3;
    if (v17 == 1)
      break;
    if (v17)
      return -1;
    result = sub_1D4B9DD70(a1, (uint64_t)v15, v12 - v15, (uint64_t)(v13 + 3), v18);
    if (!v18)
      return v15 - a2;
LABEL_19:
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      v15 += result;
      v13 = &v20[v18];
      result = -72;
      if ((unint64_t)(v11 - &v20[v18]) >= 3)
        continue;
    }
    return result;
  }
  if (v15 && v18 <= v12 - v15)
  {
    memcpy(v15, v20, v18);
    result = v18;
    if (!v18)
      return v15 - a2;
    goto LABEL_19;
  }
  if (v18)
    return -70;
  return v15 - a2;
}

unint64_t sub_1D4B9ED80(_QWORD *a1, char *a2, uint64_t a3, _DWORD *a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v12;

  sub_1D4B9EE04((uint64_t)a1, a6, a7);
  v12 = (char *)a1[3330];
  if (v12 != a2)
  {
    a1[3333] = v12;
    a1[3332] = &a2[a1[3331] - (_QWORD)v12];
    a1[3331] = a2;
    a1[3330] = a2;
  }
  return sub_1D4B9EBF8((uint64_t)a1, a2, a3, a4, a5);
}

uint64_t sub_1D4B9EE04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  _BYTE v29[128];
  _BYTE v30[256];
  _BYTE v31[64];
  uint64_t v32;

  result = 0;
  v32 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 26672) = 5;
  *(_DWORD *)(a1 + 10252) = 12;
  *(_OWORD *)(a1 + 26640) = 0u;
  *(_OWORD *)(a1 + 26656) = 0u;
  *(_QWORD *)(a1 + 26732) = 0;
  if (a2 && a3)
  {
    if (*(_DWORD *)a2 != -332356555)
    {
      result = 0;
      *(_QWORD *)(a1 + 26656) = a2;
      *(_QWORD *)(a1 + 26648) = a2;
      goto LABEL_17;
    }
    v7 = a2 + 4;
    v28 = 31;
    v26 = 127;
    v24 = 63;
    v8 = sub_1D4B9C9B8((unsigned int *)(a1 + 10252), (char *)(a2 + 4), a3 - 4);
    if (v8 <= 0xFFFFFFFFFFFFFF88)
    {
      v9 = v8;
      v27 = 0;
      v10 = v7 + v8;
      v11 = a3 - 4 - v8;
      v12 = sub_1D4B9AB48((uint64_t)v31, &v28, &v27, (unsigned int *)(v7 + v8), v11);
      if (v12 <= 0xFFFFFFFFFFFFFF88 && v27 <= 9)
      {
        v13 = v12;
        if ((unint64_t)sub_1D4B9A984((int *)(a1 + 4100), (uint64_t)v31, v28, v27) <= 0xFFFFFFFFFFFFFF88)
        {
          v25 = 0;
          v14 = v10 + v13;
          v15 = v11 - v13;
          v16 = sub_1D4B9AB48((uint64_t)v30, &v26, &v25, (unsigned int *)(v10 + v13), v15);
          if (v16 <= 0xFFFFFFFFFFFFFF88 && v25 <= 0xA)
          {
            v17 = v16;
            if ((unint64_t)sub_1D4B9A984((int *)(a1 + 6152), (uint64_t)v30, v26, v25) <= 0xFFFFFFFFFFFFFF88)
            {
              v23 = 0;
              v18 = sub_1D4B9AB48((uint64_t)v29, &v24, &v23, (unsigned int *)(v14 + v17), v15 - v17);
              if (v23 <= 0xA)
              {
                v19 = v18;
                if (v18 <= 0xFFFFFFFFFFFFFF88
                  && (unint64_t)sub_1D4B9A984((int *)a1, (uint64_t)v29, v24, v23) < 0xFFFFFFFFFFFFFF89)
                {
                  *(_DWORD *)(a1 + 26736) = 1;
                  v20 = v13 + v9 + v17 + v19;
                  if (v20 <= 0xFFFFFFFFFFFFFF88)
                  {
                    result = 0;
                    v21 = v7 + v20;
                    v22 = *(_QWORD *)(a1 + 26640);
                    *(_QWORD *)(a1 + 26664) = v22;
                    *(_QWORD *)(a1 + 26656) = v21 + *(_QWORD *)(a1 + 26648) - v22;
                    *(_QWORD *)(a1 + 26648) = v21;
LABEL_17:
                    *(_QWORD *)(a1 + 26640) = a2 + a3;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    return -30;
  }
  return result;
}

_DWORD *sub_1D4B9F060(_DWORD *result, unint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (a2 > 4)
  {
    if (*result != -47205083)
    {
      v10 = -10;
      goto LABEL_15;
    }
    v4 = a2 - 5;
    if (a2 - 5 >= 3)
    {
      v5 = 0;
      v6 = (unsigned __int8 *)result + 5;
      do
      {
        v7 = *v6;
        if (v7 >> 6 == 2)
        {
          v9 = v4 - 3;
          if (!v9)
            break;
          v8 = 1;
        }
        else
        {
          if (v7 >> 6 == 3)
            goto LABEL_17;
          v8 = v6[2] | ((v7 & 7) << 16) | (v6[1] << 8);
          v9 = v4 - 3;
          if (v9 < v8)
            break;
          if (!(_DWORD)v8)
          {
LABEL_17:
            *a3 = v6 - (unsigned __int8 *)result + 3;
            goto LABEL_16;
          }
        }
        v6 += v8 + 3;
        v4 = v9 - v8;
        v5 += 0x20000;
      }
      while (v4 >= 3);
    }
  }
  v10 = -72;
LABEL_15:
  *a3 = v10;
  v5 = -2;
LABEL_16:
  *a4 = v5;
  return result;
}

uint64_t sub_1D4B9F11C(void **a1)
{
  if (a1)
  {
    free(*a1);
    free(a1[6]);
    free(a1[9]);
    free(a1);
  }
  return 0;
}

uint64_t sub_1D4B9F160(int *a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int16 v9;
  unsigned int v10;
  int v11;
  __int16 v12;
  _DWORD *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int i;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _WORD v22[256];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a3 > 0xFF)
    return -46;
  if (a4 > 0xC)
    return -44;
  v5 = 0;
  v6 = a1 + 1;
  v7 = a3 + 1;
  v8 = 1 << a4;
  v9 = 1;
  v10 = (1 << a4) - 1;
  do
  {
    v11 = *(__int16 *)(a2 + 2 * v5);
    if (v11 == -1)
    {
      v13 = &v6[v10--];
      *((_BYTE *)v13 + 2) = v5;
      v12 = 1;
    }
    else
    {
      v12 = *(_WORD *)(a2 + 2 * v5);
      if (0x8000 << a4 >> 16 <= v11)
        v9 = 0;
    }
    v22[v5++] = v12;
  }
  while (v7 != v5);
  v14 = 0;
  v15 = 0;
  *a1 = (unsigned __int16)a4 | (v9 << 16);
  do
  {
    v16 = *(__int16 *)(a2 + 2 * v14);
    if (v16 >= 1)
    {
      for (i = 0; i != v16; ++i)
      {
        BYTE2(v6[v15]) = v14;
        do
          v15 = ((v8 >> 3) + (v8 >> 1) + 3 + v15) & ((1 << a4) - 1);
        while (v15 > v10);
      }
    }
    ++v14;
  }
  while (v14 != v7);
  if (v15)
    return -1;
  v18 = (char *)a1 + 7;
  v19 = (1 << a4);
  do
  {
    v20 = *(v18 - 1);
    v21 = (unsigned __int16)v22[v20];
    v22[v20] = v21 + 1;
    LOBYTE(v20) = a4 + 1 + (__clz(v21) ^ 0xE0);
    *v18 = v20;
    *(_WORD *)(v18 - 3) = ((_WORD)v21 << v20) - v8;
    v18 += 4;
    --v19;
  }
  while (v19);
  return 0;
}

unint64_t sub_1D4B9F2F0(unint64_t a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int16 *a5)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  unsigned __int16 *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  unsigned __int16 *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  unsigned __int16 *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int16 *v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  _BYTE *v54;
  unsigned __int16 *v55;
  uint64_t v56;
  char v57;
  int v58;
  uint64_t v59;
  char v60;
  unsigned __int16 *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  _BYTE *v69;
  unsigned __int16 *v70;
  uint64_t v71;
  char v72;
  int v73;
  uint64_t v74;
  char v75;
  unsigned __int16 *v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;

  v7 = a1 + a2;
  v8 = a1 + a2 - 3;
  if (a5[1])
  {
    v82 = 0uLL;
    v83 = 0uLL;
    result = sub_1D4B9FCCC((uint64_t)&v82, a3, a4);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      v11 = *a5;
      v10 = a5 + 2;
      v12 = (_QWORD)v82 << SBYTE8(v82) >> 1 >> (63 - v11);
      DWORD2(v82) += v11;
      sub_1D4B9C858((uint64_t)&v82);
      v13 = (_QWORD)v82 << SBYTE8(v82) >> 1 >> (63 - v11);
      DWORD2(v82) += v11;
      sub_1D4B9C858((uint64_t)&v82);
      if (sub_1D4B9C858((uint64_t)&v82) || v8 <= a1)
      {
        v14 = (_BYTE *)a1;
      }
      else
      {
        v14 = (_BYTE *)a1;
        do
        {
          v15 = &v10[2 * v12];
          v16 = *v15;
          v17 = *((_BYTE *)v15 + 2);
          LODWORD(v15) = *((unsigned __int8 *)v15 + 3);
          v18 = v82;
          v19 = (_QWORD)v82 << SBYTE8(v82) >> -(char)v15;
          LODWORD(v15) = DWORD2(v82) + (_DWORD)v15;
          v20 = v19 + v16;
          *v14 = v17;
          v21 = &v10[2 * v13];
          v22 = *v21;
          LOBYTE(v19) = *((_BYTE *)v21 + 2);
          LODWORD(v21) = *((unsigned __int8 *)v21 + 3);
          v23 = (unint64_t)(v18 << (char)v15) >> -(char)v21;
          LODWORD(v15) = (_DWORD)v15 + (_DWORD)v21;
          v24 = v23 + v22;
          v14[1] = v19;
          v25 = &v10[2 * v20];
          v26 = *v25;
          LOBYTE(v19) = *((_BYTE *)v25 + 2);
          LODWORD(v25) = *((unsigned __int8 *)v25 + 3);
          v27 = (unint64_t)(v18 << (char)v15) >> -(char)v25;
          LODWORD(v15) = (_DWORD)v15 + (_DWORD)v25;
          v12 = v27 + v26;
          v14[2] = v19;
          v28 = &v10[2 * v24];
          v29 = *v28;
          LOBYTE(v26) = *((_BYTE *)v28 + 2);
          LODWORD(v28) = *((unsigned __int8 *)v28 + 3);
          DWORD2(v82) = (_DWORD)v15 + (_DWORD)v28;
          v13 = ((unint64_t)(v18 << (char)v15) >> -(char)v28) + v29;
          v14[3] = v26;
          v14 += 4;
        }
        while (!sub_1D4B9C858((uint64_t)&v82) && (unint64_t)v14 < v8);
      }
      v50 = v7 - 2;
      v51 = &v14[-a1];
      v52 = v14 + 1;
      v53 = 2;
      while (1)
      {
        v54 = v51;
        if ((unint64_t)(v52 - 1) > v50)
          return -70;
        v55 = &v10[2 * v12];
        v56 = *v55;
        v57 = *((_BYTE *)v55 + 2);
        v58 = *((unsigned __int8 *)v55 + 3);
        v59 = v82;
        v60 = BYTE8(v82);
        DWORD2(v82) += v58;
        *(v52 - 1) = v57;
        if (sub_1D4B9C858((uint64_t)&v82) == 3)
          goto LABEL_23;
        if ((unint64_t)v52 > v50)
          return -70;
        v12 = ((unint64_t)(v59 << v60) >> -(char)v58) + v56;
        v61 = &v10[2 * v13];
        v62 = *v61;
        v63 = *((_BYTE *)v61 + 2);
        LODWORD(v61) = *((unsigned __int8 *)v61 + 3);
        v64 = (_QWORD)v82 << SBYTE8(v82) >> -(char)v61;
        DWORD2(v82) += (_DWORD)v61;
        v13 = v64 + v62;
        *v52 = v63;
        v52 += 2;
        v65 = sub_1D4B9C858((uint64_t)&v82);
        v51 = v54 + 2;
        if (v65 == 3)
        {
          --v52;
          v53 = 3;
          v13 = v12;
LABEL_23:
          *v52 = v10[2 * v13 + 1];
          return (unint64_t)&v54[v53];
        }
      }
    }
  }
  else
  {
    v82 = 0uLL;
    v83 = 0uLL;
    result = sub_1D4B9FCCC((uint64_t)&v82, a3, a4);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      v31 = *a5;
      v30 = a5 + 2;
      v32 = (_QWORD)v82 << SBYTE8(v82) >> 1 >> (63 - v31);
      DWORD2(v82) += v31;
      sub_1D4B9C858((uint64_t)&v82);
      v33 = (_QWORD)v82 << SBYTE8(v82) >> 1 >> (63 - v31);
      DWORD2(v82) += v31;
      sub_1D4B9C858((uint64_t)&v82);
      if (sub_1D4B9C858((uint64_t)&v82) || v8 <= a1)
      {
        v34 = (_BYTE *)a1;
      }
      else
      {
        v34 = (_BYTE *)a1;
        do
        {
          v35 = &v30[2 * v32];
          v36 = *v35;
          v37 = *((_BYTE *)v35 + 2);
          LODWORD(v35) = *((unsigned __int8 *)v35 + 3);
          v38 = v82;
          v39 = (_QWORD)v82 << SBYTE8(v82) >> 1 >> (63 - v35);
          LODWORD(v35) = DWORD2(v82) + (_DWORD)v35;
          v40 = v39 + v36;
          *v34 = v37;
          v41 = &v30[2 * v33];
          v42 = *v41;
          LOBYTE(v39) = *((_BYTE *)v41 + 2);
          LODWORD(v41) = *((unsigned __int8 *)v41 + 3);
          v43 = (unint64_t)(v38 << (char)v35) >> 1 >> (63 - v41);
          LODWORD(v35) = (_DWORD)v35 + (_DWORD)v41;
          v44 = v43 + v42;
          v34[1] = v39;
          v45 = &v30[2 * v40];
          v46 = *v45;
          LOBYTE(v39) = *((_BYTE *)v45 + 2);
          LODWORD(v45) = *((unsigned __int8 *)v45 + 3);
          v47 = (unint64_t)(v38 << (char)v35) >> 1 >> (63 - v45);
          LODWORD(v35) = (_DWORD)v35 + (_DWORD)v45;
          v32 = v47 + v46;
          v34[2] = v39;
          v48 = &v30[2 * v44];
          v49 = *v48;
          LOBYTE(v46) = *((_BYTE *)v48 + 2);
          LODWORD(v48) = *((unsigned __int8 *)v48 + 3);
          DWORD2(v82) = (_DWORD)v35 + (_DWORD)v48;
          v33 = ((unint64_t)(v38 << (char)v35) >> 1 >> (63 - v48)) + v49;
          v34[3] = v46;
          v34 += 4;
        }
        while (!sub_1D4B9C858((uint64_t)&v82) && (unint64_t)v34 < v8);
      }
      v66 = v7 - 2;
      v67 = &v34[-a1];
      v68 = v34 + 1;
      while (1)
      {
        v69 = v67;
        if ((unint64_t)(v68 - 1) > v66)
          return -70;
        v70 = &v30[2 * v32];
        v71 = *v70;
        v72 = *((_BYTE *)v70 + 2);
        v73 = *((unsigned __int8 *)v70 + 3);
        v74 = v82;
        v75 = BYTE8(v82);
        DWORD2(v82) += v73;
        *(v68 - 1) = v72;
        if (sub_1D4B9C858((uint64_t)&v82) == 3)
          break;
        if ((unint64_t)v68 > v66)
          return -70;
        v32 = ((unint64_t)(v74 << v75) >> 1 >> (63 - v73)) + v71;
        v76 = &v30[2 * v33];
        v77 = *v76;
        v78 = *((_BYTE *)v76 + 2);
        LODWORD(v76) = *((unsigned __int8 *)v76 + 3);
        v79 = (_QWORD)v82 << SBYTE8(v82) >> 1 >> (63 - v76);
        DWORD2(v82) += (_DWORD)v76;
        v33 = v79 + v77;
        *v68 = v78;
        v68 += 2;
        v80 = sub_1D4B9C858((uint64_t)&v82);
        v67 = v69 + 2;
        if (v80 == 3)
        {
          --v68;
          v81 = 3;
          v33 = v32;
LABEL_33:
          *v68 = v30[2 * v33 + 1];
          return (unint64_t)&v69[v81];
        }
      }
      v81 = 2;
      goto LABEL_33;
    }
  }
  return result;
}

unint64_t sub_1D4B9F7C0()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int *v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t result;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _OWORD v14[1024];
  _QWORD v15[65];

  v0 = MEMORY[0x1E0C80A78]();
  v15[64] = *MEMORY[0x1E0C80C00];
  v12 = 255;
  if (v3 < 2)
    return -72;
  v4 = v3;
  v5 = v2;
  v6 = v1;
  v7 = v0;
  memset(v14, 0, 512);
  v13 = 0;
  result = sub_1D4B9AB48((uint64_t)v15, &v12, &v13, v2, v3);
  if (result > 0xFFFFFFFFFFFFFF88)
    return result;
  v9 = result;
  v10 = v4 > result;
  v11 = v4 - result;
  if (!v10)
    return -72;
  result = sub_1D4B9F160((int *)v14, (uint64_t)v15, v12, v13);
  if (result <= 0xFFFFFFFFFFFFFF88)
    return sub_1D4B9F2F0(v7, v6, (unsigned __int8 *)v5 + v9, v11, (unsigned __int16 *)v14);
  return result;
}

unint64_t sub_1D4B9F90C(_WORD *a1, char *a2, unint64_t a3)
{
  unint64_t result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21[17];
  _OWORD v22[16];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v20 = 0;
  result = sub_1D4B9FA40(v22, (uint64_t)v21, &v19, &v20, a2, a3);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    v5 = v20;
    if (v20 <= (unsigned __int16)*a1)
    {
      *a1 = v20;
      v6 = v5 + 1;
      if (v6 >= 2)
      {
        v7 = 0;
        v8 = 0;
        v9 = v6 - 1;
        do
        {
          v10 = v21[v7 + 1] << v7;
          v21[v7 + 1] = v8;
          v8 += v10;
          ++v7;
        }
        while (v9 != v7);
      }
      v11 = v19;
      if (v19)
      {
        v12 = 0;
        v13 = v5 + 1;
        do
        {
          v14 = *((unsigned __int8 *)v22 + v12);
          v15 = v21[v14];
          v16 = (v15 + (1 << v14 >> 1));
          if (v15 < v16)
          {
            v17 = (char *)&a1[v15 + 1] + 1;
            v18 = v16 - v15;
            do
            {
              *(v17 - 1) = v12;
              *v17 = v13 - v14;
              v17 += 2;
              --v18;
            }
            while (v18);
          }
          v21[v14] = v16;
          ++v12;
        }
        while (v12 != v11);
      }
    }
    else
    {
      return -44;
    }
  }
  return result;
}

uint64_t sub_1D4B9FA40(_OWORD *a1, uint64_t a2, _DWORD *a3, _DWORD *a4, char *a5, unint64_t a6)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;

  if (a6)
  {
    v10 = *a5;
    if ((*a5 & 0x80000000) == 0)
    {
      if (v10 < a6)
      {
        v11 = sub_1D4B9F7C0();
        v12 = v11;
        if (v11 > 0xFFFFFFFFFFFFFF88)
          return v12;
        goto LABEL_14;
      }
      return -72;
    }
    if (v10 < 0xF2)
    {
      if ((v10 - 126) >> 1 >= a6)
        return -72;
      v11 = v10 - 127;
      if (v10 == 127)
      {
        *(_DWORD *)(a2 + 64) = 0;
        *(_OWORD *)(a2 + 32) = 0u;
        *(_OWORD *)(a2 + 48) = 0u;
        *(_OWORD *)a2 = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        return -20;
      }
      v14 = 0;
      v15 = a5 + 1;
      do
      {
        v16 = (char *)a1 + v14;
        *v16 = *v15 >> 4;
        v17 = *v15++;
        v16[1] = v17 & 0xF;
        v14 += 2;
      }
      while (v11 > v14);
      v10 = (v10 - 126) >> 1;
    }
    else
    {
      v11 = dword_1D4BD8ED8[v10 - 242];
      *(_QWORD *)&v13 = 0x101010101010101;
      *((_QWORD *)&v13 + 1) = 0x101010101010101;
      a1[14] = v13;
      a1[15] = v13;
      a1[12] = v13;
      a1[13] = v13;
      a1[10] = v13;
      a1[11] = v13;
      a1[8] = v13;
      a1[9] = v13;
      a1[6] = v13;
      a1[7] = v13;
      a1[4] = v13;
      a1[5] = v13;
      a1[2] = v13;
      a1[3] = v13;
      *a1 = v13;
      a1[1] = v13;
      v10 = 0;
    }
LABEL_14:
    *(_DWORD *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    if (v11)
    {
      v18 = 0;
      v19 = 0;
      v20 = 1;
      while (1)
      {
        v21 = *((unsigned __int8 *)a1 + v18);
        if (v21 > 0xF)
          break;
        ++*(_DWORD *)(a2 + 4 * v21);
        v19 += 1 << *((_BYTE *)a1 + v18) >> 1;
        v18 = v20;
        if (v11 <= v20++)
        {
          if (!v19)
            return -20;
          v23 = __clz(v19);
          if ((v23 ^ 0x1F) > 0xF)
            return -20;
          *a4 = 32 - v23;
          v24 = (2 << (v23 ^ 0x1F)) - v19;
          v25 = __clz(v24) ^ 0x1F;
          if (1 << v25 != v24)
            return -20;
          v26 = v25 + 1;
          *((_BYTE *)a1 + v11) = v26;
          ++*(_DWORD *)(a2 + 4 * v26);
          v27 = *(_DWORD *)(a2 + 4);
          v12 = -20;
          if (v27 >= 2 && (v27 & 1) == 0)
          {
            *a3 = v11 + 1;
            return v10 + 1;
          }
          return v12;
        }
      }
    }
    return -20;
  }
  return -72;
}

unint64_t sub_1D4B9FC44(_BYTE *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int16 *a5)
{
  int v8;
  unint64_t result;
  __int128 v11;
  __int128 v12;

  v8 = *a5;
  v11 = 0u;
  v12 = 0u;
  result = sub_1D4B9FCCC((uint64_t)&v11, a3, a4);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    sub_1D4B9FDB8(a1, (uint64_t)&v11, (unint64_t)&a1[a2], (uint64_t)(a5 + 1), v8);
    if (DWORD2(v11) == 64 && (_QWORD)v12 == *((_QWORD *)&v12 + 1))
      return a2;
    else
      return -20;
  }
  return result;
}

uint64_t sub_1D4B9FCCC(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  unsigned int v3;
  uint64_t v4;

  if (a3)
  {
    *(_QWORD *)(a1 + 24) = a2;
    if (a3 < 8)
    {
      *(_QWORD *)(a1 + 16) = a2;
      v4 = *a2;
      *(_QWORD *)a1 = v4;
      switch(a3)
      {
        case 2uLL:
          goto LABEL_12;
        case 3uLL:
          goto LABEL_11;
        case 4uLL:
          goto LABEL_10;
        case 5uLL:
          goto LABEL_9;
        case 6uLL:
          goto LABEL_8;
        case 7uLL:
          v4 |= (unint64_t)a2[6] << 48;
          *(_QWORD *)a1 = v4;
LABEL_8:
          v4 += (unint64_t)a2[5] << 40;
          *(_QWORD *)a1 = v4;
LABEL_9:
          v4 += (unint64_t)a2[4] << 32;
          *(_QWORD *)a1 = v4;
LABEL_10:
          v4 += (unint64_t)a2[3] << 24;
          *(_QWORD *)a1 = v4;
LABEL_11:
          v4 += (unint64_t)a2[2] << 16;
          *(_QWORD *)a1 = v4;
LABEL_12:
          *(_QWORD *)a1 = v4 + ((unint64_t)a2[1] << 8);
          break;
        default:
          break;
      }
      if (a2[a3 - 1])
      {
        v3 = __clz(a2[a3 - 1]) - 8 * a3 + 41;
        goto LABEL_15;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 16) = &a2[a3 - 8];
      *(_QWORD *)a1 = *(_QWORD *)&a2[a3 - 8];
      if (a2[a3 - 1])
      {
        v3 = __clz(a2[a3 - 1]) - 23;
LABEL_15:
        *(_DWORD *)(a1 + 8) = v3;
        return a3;
      }
    }
    return -1;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return -72;
}

uint64_t sub_1D4B9FDB8(_BYTE *a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v10;
  int v11;
  char *v12;
  char v13;
  int v14;
  char *v15;
  char v16;
  int v17;
  char *v18;
  char v19;
  int v20;
  char *v21;
  char v22;
  uint64_t result;
  int v24;
  char *v25;
  char v26;
  unint64_t v27;
  int v28;
  char *v29;
  char v30;

  if (!sub_1D4B9C858(a2) && a3 - 4 >= (unint64_t)a1)
  {
    v10 = -a5 & 0x3F;
    do
    {
      v11 = *(_DWORD *)(a2 + 8);
      v12 = (char *)(a4 + 2 * (*(_QWORD *)a2 << v11 >> v10));
      v13 = *v12;
      *(_DWORD *)(a2 + 8) = v11 + v12[1];
      *a1 = v13;
      v14 = *(_DWORD *)(a2 + 8);
      v15 = (char *)(a4 + 2 * (*(_QWORD *)a2 << v14 >> v10));
      v16 = *v15;
      *(_DWORD *)(a2 + 8) = v14 + v15[1];
      a1[1] = v16;
      v17 = *(_DWORD *)(a2 + 8);
      v18 = (char *)(a4 + 2 * (*(_QWORD *)a2 << v17 >> v10));
      v19 = *v18;
      *(_DWORD *)(a2 + 8) = v17 + v18[1];
      a1[2] = v19;
      v20 = *(_DWORD *)(a2 + 8);
      v21 = (char *)(a4 + 2 * (*(_QWORD *)a2 << v20 >> v10));
      v22 = *v21;
      *(_DWORD *)(a2 + 8) = v20 + v21[1];
      a1[3] = v22;
      a1 += 4;
    }
    while (!sub_1D4B9C858(a2) && (unint64_t)a1 <= a3 - 4);
  }
  for (result = sub_1D4B9C858(a2); !(_DWORD)result && (unint64_t)a1 < a3; result = sub_1D4B9C858(a2))
  {
    v24 = *(_DWORD *)(a2 + 8);
    v25 = (char *)(a4 + 2 * (*(_QWORD *)a2 << v24 >> (-(char)a5 & 0x3F)));
    v26 = *v25;
    *(_DWORD *)(a2 + 8) = v24 + v25[1];
    *a1++ = v26;
  }
  if ((unint64_t)a1 < a3)
  {
    v27 = a3 - (_QWORD)a1;
    do
    {
      v28 = *(_DWORD *)(a2 + 8);
      v29 = (char *)(a4 + 2 * (*(_QWORD *)a2 << v28 >> (-(char)a5 & 0x3F)));
      v30 = *v29;
      *(_DWORD *)(a2 + 8) = v28 + v29[1];
      *a1++ = v30;
      --v27;
    }
    while (v27);
  }
  return result;
}

unint64_t sub_1D4B9FF70()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t result;
  unsigned __int16 v9;
  _QWORD v10[1025];

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = (_BYTE *)v0;
  v10[1024] = *MEMORY[0x1E0C80C00];
  bzero(v10, 0x2000uLL);
  v9 = 12;
  result = sub_1D4B9F90C(&v9, v4, v2);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (v2 <= result)
      return -72;
    else
      return sub_1D4B9FC44(v7, v6, (unsigned __int8 *)&v4[result], v2 - result, &v9);
  }
  return result;
}

unint64_t sub_1D4BA0048(_BYTE *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int16 *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int16 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  _BYTE *v33;
  int v34;
  uint64_t v35;
  _BYTE *v36;
  int v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  _BYTE *v42;
  int v43;
  _BYTE *v44;
  int v45;
  _BYTE *v46;
  int v47;
  _BYTE *v48;
  _BYTE *v49;
  int v50;
  _BYTE *v51;
  int v52;
  _BYTE *v53;
  int v54;
  _BYTE *v55;
  _BYTE *v56;
  int v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;
  _BYTE *v61;
  _BYTE *v62;
  int v63;
  int v64;
  int v65;
  _BYTE *v66;
  _BYTE *v67;
  unint64_t v68;
  unint64_t v69;
  _BYTE *v77;
  unint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;

  if (a4 < 0xA)
    return -20;
  v90 = v5;
  v91 = v6;
  v8 = (uint64_t)(a5 + 1);
  v9 = *a5;
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v10 = *(unsigned __int16 *)a3;
  v11 = *((unsigned __int16 *)a3 + 1);
  v12 = *((unsigned __int16 *)a3 + 2);
  v13 = v10 + v11 + v12 + 6;
  v14 = a4 - v13;
  if (a4 < v13)
    return -20;
  v17 = (unsigned __int16 *)(a3 + 6);
  result = sub_1D4B9FCCC((uint64_t)&v88, a3 + 6, *(unsigned __int16 *)a3);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    v18 = (unsigned __int8 *)v17 + v10;
    result = sub_1D4B9FCCC((uint64_t)&v86, v18, v11);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      v19 = &v18[v11];
      result = sub_1D4B9FCCC((uint64_t)&v84, v19, v12);
      if (result <= 0xFFFFFFFFFFFFFF88)
      {
        result = sub_1D4B9FCCC((uint64_t)&v82, &v19[v12], v14);
        if (result <= 0xFFFFFFFFFFFFFF88)
        {
          v20 = (unint64_t)&a1[a2];
          v21 = a2 + 3;
          v79 = &a1[(unint64_t)(a2 + 3) >> 2];
          v22 = &v79[((unint64_t)(a2 + 3) >> 2) + ((unint64_t)(a2 + 3) >> 2)];
          v23 = sub_1D4B9C858((uint64_t)&v88);
          v24 = sub_1D4B9C858((uint64_t)&v86) | v23;
          v25 = sub_1D4B9C858((uint64_t)&v84);
          v78 = (unint64_t)v22;
          if (v24 | v25 | sub_1D4B9C858((uint64_t)&v82)
            || (v81 = v20 - 7, (unint64_t)v22 >= v20 - 7))
          {
            v68 = (unint64_t)&a1[(unint64_t)(a2 + 3) >> 2];
            v69 = (unint64_t)&v79[(unint64_t)(a2 + 3) >> 2];
            v67 = (_BYTE *)v68;
            v66 = (_BYTE *)v69;
          }
          else
          {
            v77 = &a1[a2];
            v26 = v21 >> 2;
            v27 = -v9 & 0x3F;
            v80 = 3 * (v21 >> 2);
            v28 = 2 * (v21 >> 2);
            do
            {
              v29 = &a1[v80];
              v30 = &a1[v28];
              v31 = &a1[v26];
              v32 = v88;
              v33 = (_BYTE *)(v8 + 2 * ((_QWORD)v88 << SBYTE8(v88) >> v27));
              v34 = DWORD2(v88) + v33[1];
              *a1 = *v33;
              v35 = v86;
              v36 = (_BYTE *)(v8 + 2 * ((_QWORD)v86 << SBYTE8(v86) >> v27));
              v37 = DWORD2(v86) + v36[1];
              *v31 = *v36;
              v38 = v84;
              v39 = (char *)(v8 + 2 * ((_QWORD)v84 << SBYTE8(v84) >> v27));
              v40 = *v39;
              LODWORD(v39) = DWORD2(v84) + v39[1];
              *v30 = v40;
              v41 = v82;
              v42 = (_BYTE *)(v8 + 2 * ((_QWORD)v82 << SBYTE8(v82) >> v27));
              v43 = DWORD2(v82) + v42[1];
              *v29 = *v42;
              v44 = (_BYTE *)(v8 + 2 * ((unint64_t)(v32 << v34) >> v27));
              v45 = v34 + v44[1];
              a1[1] = *v44;
              v46 = (_BYTE *)(v8 + 2 * ((unint64_t)(v35 << v37) >> v27));
              v47 = v37 + v46[1];
              v31[1] = *v46;
              v48 = (_BYTE *)(v8 + 2 * ((unint64_t)(v38 << (char)v39) >> v27));
              LODWORD(v39) = (_DWORD)v39 + v48[1];
              v30[1] = *v48;
              v49 = (_BYTE *)(v8 + 2 * ((unint64_t)(v41 << v43) >> v27));
              v50 = v43 + v49[1];
              v29[1] = *v49;
              v51 = (_BYTE *)(v8 + 2 * ((unint64_t)(v32 << v45) >> v27));
              v52 = v45 + v51[1];
              a1[2] = *v51;
              v53 = (_BYTE *)(v8 + 2 * ((unint64_t)(v35 << v47) >> v27));
              v54 = v47 + v53[1];
              v31[2] = *v53;
              v55 = (_BYTE *)(v8 + 2 * ((unint64_t)(v38 << (char)v39) >> v27));
              LODWORD(v39) = (_DWORD)v39 + v55[1];
              v30[2] = *v55;
              v56 = (_BYTE *)(v8 + 2 * ((unint64_t)(v41 << v50) >> v27));
              v57 = v50 + v56[1];
              v29[2] = *v56;
              v58 = (_BYTE *)(v8 + 2 * ((unint64_t)(v32 << v52) >> v27));
              LOBYTE(v56) = *v58;
              DWORD2(v88) = v52 + v58[1];
              v59 = a1 + 4;
              a1[3] = (_BYTE)v56;
              v60 = (_BYTE *)(v8 + 2 * ((unint64_t)(v35 << v54) >> v27));
              LOBYTE(v35) = *v60;
              DWORD2(v86) = v54 + v60[1];
              v31[3] = v35;
              v61 = (_BYTE *)(v8 + 2 * ((unint64_t)(v38 << (char)v39) >> v27));
              LOBYTE(v60) = *v61;
              DWORD2(v84) = (_DWORD)v39 + v61[1];
              v30[3] = (_BYTE)v60;
              v62 = (_BYTE *)(v8 + 2 * ((unint64_t)(v41 << v57) >> v27));
              LOBYTE(v61) = *v62;
              DWORD2(v82) = v57 + v62[1];
              v29[3] = (_BYTE)v61;
              v63 = sub_1D4B9C858((uint64_t)&v88);
              v64 = sub_1D4B9C858((uint64_t)&v86) | v63;
              v65 = sub_1D4B9C858((uint64_t)&v84);
              if (v64 | v65 | sub_1D4B9C858((uint64_t)&v82))
                break;
              a1 = v59;
            }
            while ((unint64_t)(v29 + 4) < v81);
            v22 = &v59[3 * v26];
            v66 = &v59[2 * v26];
            v67 = &v59[v26];
            a1 = v59;
            v20 = (unint64_t)v77;
            v68 = (unint64_t)v79;
            v69 = (unint64_t)&v79[(unint64_t)(a2 + 3) >> 2];
          }
          result = -20;
          if ((unint64_t)a1 <= v68 && (unint64_t)v67 <= v69 && (unint64_t)v66 <= v78)
          {
            sub_1D4B9FDB8(a1, (uint64_t)&v88, v68, v8, v9);
            sub_1D4B9FDB8(v67, (uint64_t)&v86, v69, v8, v9);
            sub_1D4B9FDB8(v66, (uint64_t)&v84, v78, v8, v9);
            sub_1D4B9FDB8(v22, (uint64_t)&v82, v20, v8, v9);
            if (DWORD2(v82) == 64
              && (_QWORD)v83 == *((_QWORD *)&v83 + 1)
              && DWORD2(v84) == 64
              && (_QWORD)v85 == *((_QWORD *)&v85 + 1)
              && DWORD2(v86) == 64
              && (_QWORD)v87 == *((_QWORD *)&v87 + 1)
              && DWORD2(v88) == 64
              && (_QWORD)v89 == *((_QWORD *)&v89 + 1))
            {
              return a2;
            }
            else
            {
              return -20;
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_1D4BA0518()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t result;
  unsigned __int16 v9;
  _QWORD v10[1025];

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = (_BYTE *)v0;
  v10[1024] = *MEMORY[0x1E0C80C00];
  bzero(v10, 0x2000uLL);
  v9 = 12;
  result = sub_1D4B9F90C(&v9, v4, v2);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (v2 <= result)
      return -72;
    else
      return sub_1D4BA0048(v7, v6, (unsigned __int8 *)&v4[result], v2 - result, &v9);
  }
  return result;
}

unint64_t sub_1D4BA05F0(unsigned int *a1, char *a2, unint64_t a3)
{
  _DWORD *v3;
  unsigned int v4;
  unint64_t result;
  unsigned int v7;
  int v8;
  int v9;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int *v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  int *v25;
  _DWORD *v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned __int8 *v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  _DWORD *v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  _DWORD v98[16];
  uint64_t v99;
  _DWORD v100[148];
  _OWORD v101[16];
  _OWORD v102[4];
  int v103;
  _OWORD v104[4];
  int v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  memset(v100, 0, 68);
  v99 = 0;
  memset(v98, 0, sizeof(v98));
  v3 = a1 + 1;
  v4 = *a1;
  if (*a1 > 0x10)
    return -44;
  v65 = 0;
  result = sub_1D4B9FA40(v101, (uint64_t)v100, &v65, (_DWORD *)&v65 + 1, a2, a3);
  if (result > 0xFFFFFFFFFFFFFF88)
    return result;
  v7 = v4 - HIDWORD(v65);
  if (v4 < HIDWORD(v65))
    return -44;
  v8 = 0;
  v9 = HIDWORD(v65) + 1;
  while (!v100[HIDWORD(v65) + v8--])
    ;
  v11 = 0;
  v12 = HIDWORD(v65) + v8;
  v13 = (HIDWORD(v65) + v8 + 2);
  if ((HIDWORD(v65) + v8) <= 0xFFFFFFFD)
  {
    v14 = 0;
    v15 = &v100[1];
    v16 = &v98[2];
    v17 = v13 - 1;
    do
    {
      v18 = *v15++;
      v11 = v18 + v14;
      *v16++ = v14;
      v14 += v18;
      --v17;
    }
    while (v17);
  }
  v98[1] = v11;
  v19 = v65;
  if ((_DWORD)v65)
  {
    v20 = 0;
    do
    {
      v21 = *((unsigned __int8 *)v101 + v20);
      v22 = v98[v21 + 1];
      v98[v21 + 1] = v22 + 1;
      v23 = (char *)&v100[20] + 2 * v22;
      *v23 = v20;
      v23[1] = v21;
      ++v20;
    }
    while (v19 != v20);
  }
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v98[1] = 0;
  if (v12 <= 0xFFFFFFFD)
  {
    v24 = 0;
    v25 = &v100[1];
    v26 = (_DWORD *)&v66 + 1;
    v27 = v13 - 1;
    do
    {
      v28 = *v25++;
      *v26++ = v24;
      v24 += v28 << v7++;
      --v27;
    }
    while (v27);
  }
  v29 = -v8;
  if (-v8 < v4 + v8 + 1)
  {
    v30 = v4 + v8 + 1;
    v31 = -v8;
    v32 = 17 * v31;
    v33 = v13 - 1;
    do
    {
      if (v12 <= 0xFFFFFFFD)
      {
        v34 = v33;
        v35 = (_DWORD *)&v66 + 1;
        do
        {
          v35[v32] = *v35 >> v31;
          ++v35;
          --v34;
        }
        while (v34);
      }
      ++v31;
      v32 += 17;
    }
    while (v30 != v31);
  }
  v102[1] = v67;
  v102[2] = v68;
  v102[3] = v69;
  v103 = v70;
  v102[0] = v66;
  if (v11)
  {
    v36 = 0;
    v37 = v9 - v4;
    v64 = a1 + 1;
    do
    {
      v38 = (unsigned __int8 *)&v100[20] + 2 * v36;
      v39 = *v38;
      v40 = v38[1];
      v41 = v9 - v40;
      v42 = *((unsigned int *)v102 + v40);
      v43 = v4 - (v9 - v40);
      v44 = 1 << (v4 - (v9 - v40));
      if (v43 >= v29)
      {
        v48 = (char *)&v66 + 68 * v41;
        v49 = *(_OWORD *)v48;
        v104[1] = *((_OWORD *)v48 + 1);
        v50 = *((_OWORD *)v48 + 3);
        v104[2] = *((_OWORD *)v48 + 2);
        LODWORD(v51) = v37 + v41;
        if ((int)(v37 + v41) <= 1)
          v51 = 1;
        else
          v51 = v51;
        v52 = v98[v51];
        v104[3] = v50;
        v105 = *((_DWORD *)v48 + 16);
        v104[0] = v49;
        if (v51 >= 2)
        {
          v53 = *((unsigned int *)v104 + v51);
          if ((_DWORD)v53)
          {
            v54 = &v3[v42];
            do
            {
              *v54++ = v39 & 0xFF00FFFF | ((v9 - v40) << 16) | 0x1000000;
              --v53;
            }
            while (v53);
          }
        }
        if (v11 != (_DWORD)v52)
        {
          v55 = 0;
          v56 = (char *)&v100[20] + 2 * v52;
          v57 = (v11 - v52);
          do
          {
            v58 = &v56[2 * v55];
            v59 = *v58;
            v60 = v58[1];
            v61 = *((_DWORD *)v104 + v60);
            v62 = (1 << (v43 - (v9 - v60))) + v61;
            v63 = (v59 << 8) & 0xFF00FFFF | ((v9 - v60 + v41) << 16) | v39 | 0x2000000;
            do
              v3[v42 + v61++] = v63;
            while (v61 < v62);
            *((_DWORD *)v104 + v60) = v62;
            ++v55;
          }
          while (v55 != v57);
        }
        LODWORD(v45) = v44 + v42;
      }
      else
      {
        v45 = (v44 + v42);
        if (v42 < v45)
        {
          v46 = v45 - v42;
          v47 = &v64[v42];
          do
          {
            *v47++ = v39 & 0xFF00FFFF | ((v9 - v40) << 16) | 0x1000000;
            --v46;
          }
          while (v46);
        }
      }
      *((_DWORD *)v102 + v40) = v45;
      ++v36;
    }
    while (v36 != v11);
  }
  return result;
}

unint64_t sub_1D4BA0A04(_WORD *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, int *a5)
{
  int v8;
  unint64_t result;
  __int128 v11;
  __int128 v12;

  v8 = *a5;
  v11 = 0u;
  v12 = 0u;
  result = sub_1D4B9FCCC((uint64_t)&v11, a3, a4);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    sub_1D4BA0A8C(a1, (uint64_t)&v11, (unint64_t)a1 + a2, (uint64_t)(a5 + 1), v8);
    if (DWORD2(v11) == 64 && (_QWORD)v12 == *((_QWORD *)&v12 + 1))
      return a2;
    else
      return -20;
  }
  return result;
}

uint64_t sub_1D4BA0A8C(_WORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5)
{
  int v10;
  uint64_t v11;
  int v12;
  _WORD *v13;
  uint64_t v14;
  int v15;
  _WORD *v16;
  uint64_t v17;
  int v18;
  _WORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  unsigned int v28;
  unsigned int v29;

  if (!sub_1D4B9C858(a2) && a3 - 7 > (unint64_t)a1)
  {
    v10 = -a5 & 0x3F;
    do
    {
      v11 = a4 + 4 * (*(_QWORD *)a2 << *(_DWORD *)(a2 + 8) >> v10);
      *a1 = *(_WORD *)v11;
      v12 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v11 + 2);
      *(_DWORD *)(a2 + 8) = v12;
      v13 = (_WORD *)((char *)a1 + *(unsigned __int8 *)(v11 + 3));
      v14 = a4 + 4 * (*(_QWORD *)a2 << v12 >> v10);
      *v13 = *(_WORD *)v14;
      v15 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v14 + 2);
      *(_DWORD *)(a2 + 8) = v15;
      v16 = (_WORD *)((char *)v13 + *(unsigned __int8 *)(v14 + 3));
      v17 = a4 + 4 * (*(_QWORD *)a2 << v15 >> v10);
      *v16 = *(_WORD *)v17;
      v18 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v17 + 2);
      *(_DWORD *)(a2 + 8) = v18;
      v19 = (_WORD *)((char *)v16 + *(unsigned __int8 *)(v17 + 3));
      v20 = a4 + 4 * (*(_QWORD *)a2 << v18 >> v10);
      *v19 = *(_WORD *)v20;
      *(_DWORD *)(a2 + 8) += *(unsigned __int8 *)(v20 + 2);
      a1 = (_WORD *)((char *)v19 + *(unsigned __int8 *)(v20 + 3));
    }
    while (!sub_1D4B9C858(a2) && (unint64_t)a1 < a3 - 7);
  }
  v21 = a3 - 2;
  for (result = sub_1D4B9C858(a2); !(_DWORD)result && (unint64_t)a1 <= v21; result = sub_1D4B9C858(a2))
  {
    v23 = a4 + 4 * (*(_QWORD *)a2 << *(_DWORD *)(a2 + 8) >> (-(char)a5 & 0x3F));
    *a1 = *(_WORD *)v23;
    *(_DWORD *)(a2 + 8) += *(unsigned __int8 *)(v23 + 2);
    a1 = (_WORD *)((char *)a1 + *(unsigned __int8 *)(v23 + 3));
  }
  if ((unint64_t)a1 <= v21)
  {
    v24 = *(_DWORD *)(a2 + 8);
    do
    {
      v25 = a4 + 4 * (*(_QWORD *)a2 << v24 >> (-(char)a5 & 0x3F));
      *a1 = *(_WORD *)v25;
      v24 = *(_DWORD *)(a2 + 8) + *(unsigned __int8 *)(v25 + 2);
      *(_DWORD *)(a2 + 8) = v24;
      a1 = (_WORD *)((char *)a1 + *(unsigned __int8 *)(v25 + 3));
    }
    while ((unint64_t)a1 <= v21);
  }
  if ((unint64_t)a1 < a3)
  {
    v26 = *(_QWORD *)a2 << *(_DWORD *)(a2 + 8) >> -(char)a5;
    v27 = (_BYTE *)(a4 + 4 * v26);
    *(_BYTE *)a1 = *v27;
    if (v27[3] == 1)
    {
      v28 = *(_DWORD *)(a2 + 8) + v27[2];
    }
    else
    {
      v29 = *(_DWORD *)(a2 + 8);
      if (v29 > 0x3F)
        return result;
      v28 = v29 + *(unsigned __int8 *)(a4 + 4 * v26 + 2);
      if (v28 >= 0x40)
        v28 = 64;
    }
    *(_DWORD *)(a2 + 8) = v28;
  }
  return result;
}

uint64_t sub_1D4BA0CE8(_WORD *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, int *a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  char *v19;
  _WORD *v20;
  _WORD *v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  _WORD *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _WORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _WORD *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  char *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _WORD *v50;
  uint64_t v51;
  int v52;
  _WORD *v53;
  uint64_t v54;
  int v55;
  char *v56;
  _WORD *v57;
  uint64_t v58;
  int v59;
  _WORD *v60;
  uint64_t v61;
  int v62;
  _WORD *v63;
  uint64_t v64;
  int v65;
  _WORD *v66;
  uint64_t v67;
  int v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;

  if (a4 < 0xA)
    return -20;
  v5 = (uint64_t)(a5 + 1);
  v6 = *a5;
  v97 = 0u;
  v98 = 0u;
  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  v91 = 0u;
  v92 = 0u;
  v7 = *(unsigned __int16 *)a3;
  v8 = *((unsigned __int16 *)a3 + 1);
  v9 = *((unsigned __int16 *)a3 + 2);
  v10 = v7 + v8 + v9 + 6;
  v11 = a4 - v10;
  if (a4 < v10)
    return -20;
  v16 = (unsigned __int16 *)(a3 + 6);
  v12 = sub_1D4B9FCCC((uint64_t)&v97, a3 + 6, *(unsigned __int16 *)a3);
  if (v12 <= 0xFFFFFFFFFFFFFF88)
  {
    v17 = (unsigned __int8 *)v16 + v7;
    v12 = sub_1D4B9FCCC((uint64_t)&v95, v17, v8);
    if (v12 <= 0xFFFFFFFFFFFFFF88)
    {
      v18 = &v17[v8];
      v12 = sub_1D4B9FCCC((uint64_t)&v93, v18, v9);
      if (v12 <= 0xFFFFFFFFFFFFFF88)
      {
        v12 = sub_1D4B9FCCC((uint64_t)&v91, &v18[v9], v11);
        if (v12 <= 0xFFFFFFFFFFFFFF88)
        {
          v19 = (char *)a1 + a2;
          v20 = (_WORD *)((char *)a1 + ((unint64_t)(a2 + 3) >> 2));
          v21 = (_WORD *)((char *)v20 + ((unint64_t)(a2 + 3) >> 2));
          v22 = (char *)v21 + ((unint64_t)(a2 + 3) >> 2);
          v23 = sub_1D4B9C858((uint64_t)&v97);
          v24 = sub_1D4B9C858((uint64_t)&v95) | v23;
          v25 = sub_1D4B9C858((uint64_t)&v93);
          v86 = (unint64_t)a1 + a2;
          v87 = (unint64_t)v20;
          v88 = (unint64_t)v21;
          v89 = (unint64_t)v22;
          if (!(v24 | v25 | sub_1D4B9C858((uint64_t)&v91)))
          {
            v90 = (unint64_t)(v19 - 7);
            if (v22 < v19 - 7)
            {
              v26 = -v6 & 0x3F;
              do
              {
                v27 = v97;
                v28 = DWORD2(v97);
                v29 = v5 + 4 * ((_QWORD)v97 << SBYTE8(v97) >> v26);
                *a1 = *(_WORD *)v29;
                v30 = v28 + *(unsigned __int8 *)(v29 + 2);
                v31 = (_WORD *)((char *)a1 + *(unsigned __int8 *)(v29 + 3));
                v32 = v95;
                LODWORD(v29) = DWORD2(v95);
                v33 = v5 + 4 * ((_QWORD)v95 << SBYTE8(v95) >> v26);
                *v20 = *(_WORD *)v33;
                v34 = v29 + *(unsigned __int8 *)(v33 + 2);
                v35 = (_WORD *)((char *)v20 + *(unsigned __int8 *)(v33 + 3));
                v36 = v93;
                LODWORD(v33) = DWORD2(v93);
                v37 = v5 + 4 * ((_QWORD)v93 << SBYTE8(v93) >> v26);
                *v21 = *(_WORD *)v37;
                v38 = v33 + *(unsigned __int8 *)(v37 + 2);
                v39 = (_WORD *)((char *)v21 + *(unsigned __int8 *)(v37 + 3));
                v40 = v91;
                v41 = DWORD2(v91);
                v42 = v5 + 4 * ((_QWORD)v91 << SBYTE8(v91) >> v26);
                *(_WORD *)v22 = *(_WORD *)v42;
                v43 = v41 + *(unsigned __int8 *)(v42 + 2);
                v44 = &v22[*(unsigned __int8 *)(v42 + 3)];
                v45 = v5 + 4 * ((unint64_t)(v27 << v30) >> v26);
                *v31 = *(_WORD *)v45;
                v46 = v30 + *(unsigned __int8 *)(v45 + 2);
                v47 = *(unsigned __int8 *)(v45 + 3);
                v48 = v5 + 4 * ((unint64_t)(v32 << v34) >> v26);
                *v35 = *(_WORD *)v48;
                v49 = v34 + *(unsigned __int8 *)(v48 + 2);
                v50 = (_WORD *)((char *)v35 + *(unsigned __int8 *)(v48 + 3));
                v51 = v5 + 4 * ((unint64_t)(v36 << v38) >> v26);
                *v39 = *(_WORD *)v51;
                v52 = v38 + *(unsigned __int8 *)(v51 + 2);
                v53 = (_WORD *)((char *)v39 + *(unsigned __int8 *)(v51 + 3));
                v54 = v5 + 4 * ((unint64_t)(v40 << v43) >> v26);
                *(_WORD *)v44 = *(_WORD *)v54;
                v55 = v43 + *(unsigned __int8 *)(v54 + 2);
                v56 = &v44[*(unsigned __int8 *)(v54 + 3)];
                v57 = (_WORD *)((char *)v31 + v47);
                v58 = v5 + 4 * ((unint64_t)(v27 << v46) >> v26);
                *v57 = *(_WORD *)v58;
                v59 = v46 + *(unsigned __int8 *)(v58 + 2);
                v60 = (_WORD *)((char *)v57 + *(unsigned __int8 *)(v58 + 3));
                v61 = v5 + 4 * ((unint64_t)(v32 << v49) >> v26);
                *v50 = *(_WORD *)v61;
                v62 = v49 + *(unsigned __int8 *)(v61 + 2);
                v63 = (_WORD *)((char *)v50 + *(unsigned __int8 *)(v61 + 3));
                v64 = v5 + 4 * ((unint64_t)(v36 << v52) >> v26);
                *v53 = *(_WORD *)v64;
                v65 = v52 + *(unsigned __int8 *)(v64 + 2);
                v66 = (_WORD *)((char *)v53 + *(unsigned __int8 *)(v64 + 3));
                v67 = v5 + 4 * ((unint64_t)(v40 << v55) >> v26);
                *(_WORD *)v56 = *(_WORD *)v67;
                v68 = v55 + *(unsigned __int8 *)(v67 + 2);
                v69 = &v56[*(unsigned __int8 *)(v67 + 3)];
                v70 = v5 + 4 * ((unint64_t)(v27 << v59) >> v26);
                *v60 = *(_WORD *)v70;
                DWORD2(v97) = v59 + *(unsigned __int8 *)(v70 + 2);
                a1 = (_WORD *)((char *)v60 + *(unsigned __int8 *)(v70 + 3));
                v71 = v5 + 4 * ((unint64_t)(v32 << v62) >> v26);
                *v63 = *(_WORD *)v71;
                DWORD2(v95) = v62 + *(unsigned __int8 *)(v71 + 2);
                v20 = (_WORD *)((char *)v63 + *(unsigned __int8 *)(v71 + 3));
                v72 = v5 + 4 * ((unint64_t)(v36 << v65) >> v26);
                *v66 = *(_WORD *)v72;
                DWORD2(v93) = v65 + *(unsigned __int8 *)(v72 + 2);
                v21 = (_WORD *)((char *)v66 + *(unsigned __int8 *)(v72 + 3));
                v73 = v5 + 4 * ((unint64_t)(v40 << v68) >> v26);
                *(_WORD *)v69 = *(_WORD *)v73;
                DWORD2(v91) = v68 + *(unsigned __int8 *)(v73 + 2);
                v22 = &v69[*(unsigned __int8 *)(v73 + 3)];
                v74 = sub_1D4B9C858((uint64_t)&v97);
                v75 = sub_1D4B9C858((uint64_t)&v95) | v74;
                v76 = sub_1D4B9C858((uint64_t)&v93);
              }
              while (!(v75 | v76 | sub_1D4B9C858((uint64_t)&v91)) && (unint64_t)v22 < v90);
            }
          }
          v12 = -20;
          if ((unint64_t)a1 <= v87 && (unint64_t)v20 <= v88 && (unint64_t)v21 <= v89)
          {
            sub_1D4BA0A8C(a1, (uint64_t)&v97, v87, v5, v6);
            sub_1D4BA0A8C(v20, (uint64_t)&v95, v88, v5, v6);
            sub_1D4BA0A8C(v21, (uint64_t)&v93, v89, v5, v6);
            sub_1D4BA0A8C(v22, (uint64_t)&v91, v86, v5, v6);
            if (DWORD2(v91) == 64
              && (_QWORD)v92 == *((_QWORD *)&v92 + 1)
              && DWORD2(v93) == 64
              && (_QWORD)v94 == *((_QWORD *)&v94 + 1)
              && DWORD2(v95) == 64
              && (_QWORD)v96 == *((_QWORD *)&v96 + 1)
              && DWORD2(v97) == 64
              && (_QWORD)v98 == *((_QWORD *)&v98 + 1))
            {
              return a2;
            }
          }
        }
      }
    }
  }
  return v12;
}

unint64_t sub_1D4BA11DC()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  unint64_t result;
  int v9;
  _QWORD v10[2049];

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = (_WORD *)v0;
  v10[2048] = *MEMORY[0x1E0C80C00];
  bzero(v10, 0x4000uLL);
  v9 = 12;
  result = sub_1D4BA05F0((unsigned int *)&v9, v4, v2);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (v2 <= result)
      return -72;
    else
      return sub_1D4BA0CE8(v7, v6, (unsigned __int8 *)&v4[result], v2 - result, &v9);
  }
  return result;
}

uint64_t sub_1D4BA12B4(void *a1, size_t __len, unsigned __int8 *__src, size_t a4)
{
  size_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!__len)
    return -70;
  v4 = __len;
  if (a4 > __len)
    return -20;
  if (a4 == __len)
  {
    memcpy(a1, __src, __len);
    return v4;
  }
  if (a4 == 1)
  {
    memset(a1, *__src, __len);
    return v4;
  }
  v6 = 0;
  v7 = 0;
  do
  {
    v8 = (char *)&unk_1D4BD8D58 + 24 * (16 * a4 / __len);
    *(unsigned int *)((char *)&v9 + v6) = *(_DWORD *)&v8[8 * v7] + *(_DWORD *)&v8[8 * v7 + 4] * (__len >> 8);
    ++v7;
    v6 += 4;
  }
  while (v6 != 12);
  return ((uint64_t (*)(void *, size_t, unsigned __int8 *))off_1E9845D30[v10 + (v10 >> 4) < v9])(a1, __len, __src);
}

double sub_1D4BA13E0()
{
  _QWORD *v0;
  double result;

  v0 = malloc(0x25488uLL);
  if (v0)
  {
    v0[2694] = 5;
    result = 0.0;
    *((_OWORD *)v0 + 1345) = 0u;
    *((_OWORD *)v0 + 1346) = 0u;
    *((_DWORD *)v0 + 1283) = 12;
    *(_QWORD *)((char *)v0 + 21588) = 0;
  }
  return result;
}

uint64_t sub_1D4BA1424(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;

  if (a3 < 5)
    return 5;
  if (*(_DWORD *)a2 != -47205082)
    return -10;
  v3 = *(_QWORD *)((char *)&unk_1D4BD8F10 + (((unint64_t)*(unsigned __int8 *)(a2 + 4) >> 3) & 0x18)) + 5;
  if (v3 <= a3)
  {
    *a1 = 0;
    a1[1] = 0;
    v4 = *(unsigned __int8 *)(a2 + 4);
    *((_DWORD *)a1 + 2) = (v4 & 0xF) + 12;
    if ((v4 & 0x20) == 0)
      return ((uint64_t (*)(void))((char *)&loc_1D4BA14A0 + 4 * byte_1D4BD8D4E[v4 >> 6]))();
    return -14;
  }
  return v3;
}

uint64_t sub_1D4BA14D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5 >> 17)
    return -72;
  if (a5 >= 3)
    __asm { BR              X11 }
  return -20;
}

#error "1D4BA17DC: call analysis failed (funcsize=497)"

uint64_t sub_1D4BA1EE8(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  size_t v9;
  unint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  BOOL v19;
  char *v20;
  unint64_t v21;
  uint64_t v23;

  v23 = 0;
  if (a5 >= 8)
  {
    v6 = *(_QWORD *)((char *)&unk_1D4BD8F10 + (((unint64_t)*(unsigned __int8 *)(a4 + 4) >> 3) & 0x18));
    v7 = v6 + 5;
    if ((unint64_t)(v6 + 5) > 0xFFFFFFFFFFFFFF88)
      return v6 + 5;
    if (v6 + 8 <= a5)
    {
      if (sub_1D4BA1424((_QWORD *)(a1 + 21568), a4, v7))
        return -20;
      v13 = a4 + a5;
      v14 = (unsigned __int8 *)(a4 + v7);
      v9 = sub_1D4BA247C((unsigned __int8 *)(a4 + v7), a5 - v7, (int *)&v23);
      if (v9 > 0xFFFFFFFFFFFFFF88)
        return v9;
      v15 = &a2[a3];
      v16 = a5 - v7;
      v17 = a2;
      while (1)
      {
        v18 = v16 - 3;
        v19 = v16 - 3 >= v9;
        v16 = v16 - 3 - v9;
        if (!v19)
          break;
        v20 = (char *)(v14 + 3);
        if ((_DWORD)v23 == 3)
        {
          if (v18)
            return -72;
          v21 = 0;
        }
        else if ((_DWORD)v23 == 1)
        {
          if (!v17 || v9 > v15 - v17)
          {
            if (v9)
              return -70;
            return v17 - a2;
          }
          memcpy(v17, v20, v9);
          v21 = v9;
        }
        else
        {
          if ((_DWORD)v23)
            return -1;
          v21 = sub_1D4BA14D8(a1, (uint64_t)v17, v15 - v17, (uint64_t)v20, v9);
        }
        if (!v9)
          return v17 - a2;
        if (v21 > 0xFFFFFFFFFFFFFF88)
          return v21;
        v17 += v21;
        v14 = (unsigned __int8 *)&v20[v9];
        v9 = sub_1D4BA247C(v14, v13 - (_QWORD)v14, (int *)&v23);
        if (v9 >= 0xFFFFFFFFFFFFFF89)
          return v9;
      }
    }
  }
  return -72;
}

uint64_t sub_1D4BA209C(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v12;

  sub_1D4BA2120((uint64_t)a1, a6, a7);
  v12 = (char *)a1[2690];
  if (v12 != a2)
  {
    a1[2693] = v12;
    a1[2692] = &a2[a1[2691] - (_QWORD)v12];
    a1[2691] = a2;
    a1[2690] = a2;
  }
  return sub_1D4BA1EE8((uint64_t)a1, a2, a3, a4, a5);
}

uint64_t sub_1D4BA2120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  _BYTE v25[106];
  uint64_t v26;

  result = 0;
  v26 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 21552) = 5;
  *(_DWORD *)(a1 + 5132) = 12;
  *(_OWORD *)(a1 + 21520) = 0u;
  *(_OWORD *)(a1 + 21536) = 0u;
  *(_QWORD *)(a1 + 21588) = 0;
  if (a2 && a3)
  {
    if (*(_DWORD *)a2 != -332356554)
    {
      *(_QWORD *)(a1 + 21536) = a2;
      *(_QWORD *)(a1 + 21528) = a2;
      goto LABEL_17;
    }
    v7 = a2 + 4;
    v8 = sub_1D4BA05F0((unsigned int *)(a1 + 5132), (char *)(a2 + 4), a3 - 4);
    if (v8 <= 0xFFFFFFFFFFFFFF88)
    {
      v9 = v8;
      v10 = v7 + v8;
      v11 = a3 - 4 - v8;
      v23 = 0;
      v24 = 28;
      v12 = sub_1D4B9AB48((uint64_t)v25, &v24, &v23, (unsigned int *)(v7 + v8), v11);
      if (v12 <= 0xFFFFFFFFFFFFFF88 && v23 <= 8)
      {
        v13 = v12;
        if ((unint64_t)sub_1D4B9F160((int *)(a1 + 2052), (uint64_t)v25, v24, v23) < 0xFFFFFFFFFFFFFF89)
        {
          v14 = v10 + v13;
          v15 = v11 - v13;
          v23 = 0;
          v24 = 52;
          v16 = sub_1D4B9AB48((uint64_t)v25, &v24, &v23, (unsigned int *)(v10 + v13), v15);
          if (v16 <= 0xFFFFFFFFFFFFFF88 && v23 <= 9)
          {
            v17 = v16;
            if ((unint64_t)sub_1D4B9F160((int *)(a1 + 3080), (uint64_t)v25, v24, v23) < 0xFFFFFFFFFFFFFF89)
            {
              v23 = 0;
              v24 = 35;
              v18 = sub_1D4B9AB48((uint64_t)v25, &v24, &v23, (unsigned int *)(v14 + v17), v15 - v17);
              if (v18 <= 0xFFFFFFFFFFFFFF88 && v23 <= 9)
              {
                v19 = v18;
                if ((unint64_t)sub_1D4B9F160((int *)a1, (uint64_t)v25, v24, v23) < 0xFFFFFFFFFFFFFF89)
                {
                  *(_DWORD *)(a1 + 21592) = 1;
                  v20 = v13 + v9 + v17 + v19;
                  if (v20 <= 0xFFFFFFFFFFFFFF88)
                  {
                    v21 = v7 + v20;
                    v22 = *(_QWORD *)(a1 + 21520);
                    *(_QWORD *)(a1 + 21544) = v22;
                    *(_QWORD *)(a1 + 21536) = v21 + *(_QWORD *)(a1 + 21528) - v22;
                    *(_QWORD *)(a1 + 21528) = v21;
LABEL_17:
                    result = 0;
                    *(_QWORD *)(a1 + 21520) = a2 + a3;
                    return result;
                  }
                }
              }
            }
          }
        }
      }
    }
    return -30;
  }
  return result;
}

unint64_t sub_1D4BA236C(unint64_t result, unint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;

  v14 = 0;
  if (a2 < 5)
    goto LABEL_2;
  v7 = result;
  v8 = *(_QWORD *)((char *)&unk_1D4BD8F10 + (((unint64_t)*(unsigned __int8 *)(result + 4) >> 3) & 0x18));
  v6 = v8 + 5;
  if ((unint64_t)(v8 + 5) >= 0xFFFFFFFFFFFFFF89)
    goto LABEL_14;
  if (*(_DWORD *)result != -47205082)
  {
    v6 = -10;
    goto LABEL_14;
  }
  if (v8 + 8 > a2)
  {
LABEL_2:
    v6 = -72;
LABEL_14:
    *a3 = v6;
    goto LABEL_15;
  }
  v9 = result + v6;
  v10 = a2 - v6;
  result = sub_1D4BA247C((unsigned __int8 *)(result + v6), a2 - v6, (int *)&v14);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    v11 = 0;
    do
    {
      v12 = v10 - 3 >= result;
      v10 = v10 - 3 - result;
      if (!v12)
        goto LABEL_2;
      v13 = v9 + 3;
      if (!result)
      {
        *a3 = v13 - v7;
        goto LABEL_16;
      }
      v9 = v13 + result;
      result = sub_1D4BA247C((unsigned __int8 *)(v13 + result), v10, (int *)&v14);
      v11 += 0x20000;
    }
    while (result < 0xFFFFFFFFFFFFFF89);
  }
  *a3 = result;
LABEL_15:
  v11 = -2;
LABEL_16:
  *a4 = v11;
  return result;
}

uint64_t sub_1D4BA247C(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  uint64_t result;
  int v4;
  unint64_t v5;
  int v6;

  if (a2 < 3)
    return -72;
  v4 = *a1 >> 6;
  *a3 = v4;
  HIDWORD(v5) = *a1 & 7;
  LODWORD(v5) = bswap32(*(unsigned __int16 *)(a1 + 1));
  result = (v5 >> 16);
  if (v4 == 2)
    v6 = result;
  else
    v6 = 0;
  a3[1] = v6;
  if (v4 == 3)
    return 0;
  if (v4 == 2)
    return 1;
  return result;
}

uint64_t sub_1D4BA24D8(void **a1)
{
  if (a1)
  {
    free(*a1);
    free(a1[4]);
    free(a1[7]);
    free(a1);
  }
  return 0;
}

uint64_t sub_1D4BA251C(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int *a5, unint64_t a6, uint64_t a7, unsigned int a8, int a9)
{
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;
  unsigned int v15;
  unsigned int v16;
  _BYTE v17[106];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v16 = a3;
  if (!a2)
  {
    sub_1D4B9F160((int *)a1, a7, a3, a8);
    return 0;
  }
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      if (!a6)
        return -72;
      v10 = *(unsigned __int8 *)a5;
      if (v10 <= a3)
      {
        *(_DWORD *)a1 = 0;
        *(_WORD *)(a1 + 4) = 0;
        *(_BYTE *)(a1 + 6) = v10;
        v11 = 1;
        *(_BYTE *)(a1 + 7) = 0;
        return v11;
      }
    }
    else
    {
      v15 = 0;
      v13 = sub_1D4B9AB48((uint64_t)v17, &v16, &v15, a5, a6);
      if (v13 <= 0xFFFFFFFFFFFFFF88 && v15 <= a4)
      {
        v11 = v13;
        sub_1D4B9F160((int *)a1, (uint64_t)v17, v16, v15);
        return v11;
      }
    }
    return -20;
  }
  if (a9)
    return 0;
  else
    return -20;
}

unint64_t sub_1D4BA263C(char *__b, size_t __len, uint64_t a3, _DWORD *a4, _DWORD *a5, char *a6, unint64_t a7)
{
  unint64_t v11;
  unint64_t result;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;

  if (!a7)
    return -72;
  v11 = *a6;
  if (*a6 < 0)
  {
    if (v11 >= 0xF2)
    {
      v13 = dword_1D4BD93C4[v11 - 242];
      memset(__b, 1, __len);
      v11 = 0;
      goto LABEL_9;
    }
    if ((v11 - 126) >> 1 >= a7)
      return -72;
    v13 = v11 - 127;
    if (v11 - 127 < __len)
    {
      if (v11 != 127)
      {
        v24 = 0;
        v25 = a6 + 1;
        do
        {
          v26 = &__b[v24];
          *v26 = *v25 >> 4;
          v27 = *v25++;
          v26[1] = v27 & 0xF;
          v24 += 2;
        }
        while (v13 > v24);
        v11 = (v11 - 126) >> 1;
LABEL_9:
        *(_DWORD *)(a3 + 64) = 0;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)(a3 + 48) = 0u;
        *(_OWORD *)a3 = 0u;
        *(_OWORD *)(a3 + 16) = 0u;
        if (v13)
        {
          v14 = 0;
          v15 = 0;
          v16 = 1;
          while (1)
          {
            v17 = __b[v14];
            if (v17 > 0xF)
              break;
            ++*(_DWORD *)(a3 + 4 * v17);
            v15 += 1 << __b[v14] >> 1;
            v14 = v16;
            if (v13 <= v16++)
            {
              if (!v15)
                return -20;
              v19 = __clz(v15);
              if ((v19 ^ 0x1F) > 0xF)
                return -20;
              *a5 = 32 - v19;
              v20 = (2 << (v19 ^ 0x1F)) - v15;
              v21 = __clz(v20) ^ 0x1F;
              if (1 << v21 != v20)
                return -20;
              v22 = v21 + 1;
              __b[v13] = v22;
              ++*(_DWORD *)(a3 + 4 * v22);
              v23 = *(_DWORD *)(a3 + 4);
              result = -20;
              if (v23 >= 2 && (v23 & 1) == 0)
              {
                *a4 = v13 + 1;
                return v11 + 1;
              }
              return result;
            }
          }
        }
        return -20;
      }
      *(_DWORD *)(a3 + 64) = 0;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
    return -20;
  }
  if (v11 >= a7)
    return -72;
  result = sub_1D4BA2830();
  v13 = result;
  if (result <= 0xFFFFFFFFFFFFFF88)
    goto LABEL_9;
  return result;
}

unint64_t sub_1D4BA2830()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int *v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t result;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  _OWORD v14[1024];
  _QWORD v15[65];

  v0 = MEMORY[0x1E0C80A78]();
  v15[64] = *MEMORY[0x1E0C80C00];
  v12 = 255;
  if (v3 < 2)
    return -72;
  v4 = v3;
  v5 = v2;
  v6 = v1;
  v7 = v0;
  memset(v14, 0, 512);
  v13 = 0;
  result = sub_1D4B9AB48((uint64_t)v15, &v12, &v13, v2, v3);
  if (result > 0xFFFFFFFFFFFFFF88)
    return result;
  v9 = result;
  v10 = v4 > result;
  v11 = v4 - result;
  if (!v10)
    return -72;
  result = sub_1D4B9F160((int *)v14, (uint64_t)v15, v12, v13);
  if (result <= 0xFFFFFFFFFFFFFF88)
    return sub_1D4BA297C(v7, v6, (unsigned __int8 *)v5 + v9, v11, (unsigned __int16 *)v14);
  return result;
}

unint64_t sub_1D4BA297C(unint64_t a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int16 *a5)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t result;
  unsigned __int16 *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  unsigned __int16 *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  unsigned __int16 *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int16 *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  uint64_t v46;
  unint64_t v47;
  unsigned __int16 *v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  _BYTE *v54;
  unsigned __int16 *v55;
  uint64_t v56;
  char v57;
  int v58;
  uint64_t v59;
  char v60;
  unsigned __int16 *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  _BYTE *v69;
  unsigned __int16 *v70;
  uint64_t v71;
  char v72;
  int v73;
  uint64_t v74;
  char v75;
  unsigned __int16 *v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;

  v7 = a1 + a2;
  v8 = a1 + a2 - 3;
  if (a5[1])
  {
    v82 = 0uLL;
    v83 = 0uLL;
    result = sub_1D4BA5554((uint64_t)&v82, a3, a4);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      v11 = *a5;
      v10 = a5 + 2;
      v12 = (_QWORD)v82 << SBYTE8(v82) >> 1 >> (63 - v11);
      DWORD2(v82) += v11;
      sub_1D4B9C858((uint64_t)&v82);
      v13 = (_QWORD)v82 << SBYTE8(v82) >> 1 >> (63 - v11);
      DWORD2(v82) += v11;
      sub_1D4B9C858((uint64_t)&v82);
      if (sub_1D4B9C858((uint64_t)&v82) || v8 <= a1)
      {
        v14 = (_BYTE *)a1;
      }
      else
      {
        v14 = (_BYTE *)a1;
        do
        {
          v15 = &v10[2 * v12];
          v16 = *v15;
          v17 = *((_BYTE *)v15 + 2);
          LODWORD(v15) = *((unsigned __int8 *)v15 + 3);
          v18 = v82;
          v19 = (_QWORD)v82 << SBYTE8(v82) >> -(char)v15;
          LODWORD(v15) = DWORD2(v82) + (_DWORD)v15;
          v20 = v19 + v16;
          *v14 = v17;
          v21 = &v10[2 * v13];
          v22 = *v21;
          LOBYTE(v19) = *((_BYTE *)v21 + 2);
          LODWORD(v21) = *((unsigned __int8 *)v21 + 3);
          v23 = (unint64_t)(v18 << (char)v15) >> -(char)v21;
          LODWORD(v15) = (_DWORD)v15 + (_DWORD)v21;
          v24 = v23 + v22;
          v14[1] = v19;
          v25 = &v10[2 * v20];
          v26 = *v25;
          LOBYTE(v19) = *((_BYTE *)v25 + 2);
          LODWORD(v25) = *((unsigned __int8 *)v25 + 3);
          v27 = (unint64_t)(v18 << (char)v15) >> -(char)v25;
          LODWORD(v15) = (_DWORD)v15 + (_DWORD)v25;
          v12 = v27 + v26;
          v14[2] = v19;
          v28 = &v10[2 * v24];
          v29 = *v28;
          LOBYTE(v26) = *((_BYTE *)v28 + 2);
          LODWORD(v28) = *((unsigned __int8 *)v28 + 3);
          DWORD2(v82) = (_DWORD)v15 + (_DWORD)v28;
          v13 = ((unint64_t)(v18 << (char)v15) >> -(char)v28) + v29;
          v14[3] = v26;
          v14 += 4;
        }
        while (!sub_1D4B9C858((uint64_t)&v82) && (unint64_t)v14 < v8);
      }
      v50 = v7 - 2;
      v51 = &v14[-a1];
      v52 = v14 + 1;
      v53 = 2;
      while (1)
      {
        v54 = v51;
        if ((unint64_t)(v52 - 1) > v50)
          return -70;
        v55 = &v10[2 * v12];
        v56 = *v55;
        v57 = *((_BYTE *)v55 + 2);
        v58 = *((unsigned __int8 *)v55 + 3);
        v59 = v82;
        v60 = BYTE8(v82);
        DWORD2(v82) += v58;
        *(v52 - 1) = v57;
        if (sub_1D4B9C858((uint64_t)&v82) == 3)
          goto LABEL_23;
        if ((unint64_t)v52 > v50)
          return -70;
        v12 = ((unint64_t)(v59 << v60) >> -(char)v58) + v56;
        v61 = &v10[2 * v13];
        v62 = *v61;
        v63 = *((_BYTE *)v61 + 2);
        LODWORD(v61) = *((unsigned __int8 *)v61 + 3);
        v64 = (_QWORD)v82 << SBYTE8(v82) >> -(char)v61;
        DWORD2(v82) += (_DWORD)v61;
        v13 = v64 + v62;
        *v52 = v63;
        v52 += 2;
        v65 = sub_1D4B9C858((uint64_t)&v82);
        v51 = v54 + 2;
        if (v65 == 3)
        {
          --v52;
          v53 = 3;
          v13 = v12;
LABEL_23:
          *v52 = v10[2 * v13 + 1];
          return (unint64_t)&v54[v53];
        }
      }
    }
  }
  else
  {
    v82 = 0uLL;
    v83 = 0uLL;
    result = sub_1D4BA5554((uint64_t)&v82, a3, a4);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      v31 = *a5;
      v30 = a5 + 2;
      v32 = (_QWORD)v82 << SBYTE8(v82) >> 1 >> (63 - v31);
      DWORD2(v82) += v31;
      sub_1D4B9C858((uint64_t)&v82);
      v33 = (_QWORD)v82 << SBYTE8(v82) >> 1 >> (63 - v31);
      DWORD2(v82) += v31;
      sub_1D4B9C858((uint64_t)&v82);
      if (sub_1D4B9C858((uint64_t)&v82) || v8 <= a1)
      {
        v34 = (_BYTE *)a1;
      }
      else
      {
        v34 = (_BYTE *)a1;
        do
        {
          v35 = &v30[2 * v32];
          v36 = *v35;
          v37 = *((_BYTE *)v35 + 2);
          LODWORD(v35) = *((unsigned __int8 *)v35 + 3);
          v38 = v82;
          v39 = (_QWORD)v82 << SBYTE8(v82) >> 1 >> (63 - v35);
          LODWORD(v35) = DWORD2(v82) + (_DWORD)v35;
          v40 = v39 + v36;
          *v34 = v37;
          v41 = &v30[2 * v33];
          v42 = *v41;
          LOBYTE(v39) = *((_BYTE *)v41 + 2);
          LODWORD(v41) = *((unsigned __int8 *)v41 + 3);
          v43 = (unint64_t)(v38 << (char)v35) >> 1 >> (63 - v41);
          LODWORD(v35) = (_DWORD)v35 + (_DWORD)v41;
          v44 = v43 + v42;
          v34[1] = v39;
          v45 = &v30[2 * v40];
          v46 = *v45;
          LOBYTE(v39) = *((_BYTE *)v45 + 2);
          LODWORD(v45) = *((unsigned __int8 *)v45 + 3);
          v47 = (unint64_t)(v38 << (char)v35) >> 1 >> (63 - v45);
          LODWORD(v35) = (_DWORD)v35 + (_DWORD)v45;
          v32 = v47 + v46;
          v34[2] = v39;
          v48 = &v30[2 * v44];
          v49 = *v48;
          LOBYTE(v46) = *((_BYTE *)v48 + 2);
          LODWORD(v48) = *((unsigned __int8 *)v48 + 3);
          DWORD2(v82) = (_DWORD)v35 + (_DWORD)v48;
          v33 = ((unint64_t)(v38 << (char)v35) >> 1 >> (63 - v48)) + v49;
          v34[3] = v46;
          v34 += 4;
        }
        while (!sub_1D4B9C858((uint64_t)&v82) && (unint64_t)v34 < v8);
      }
      v66 = v7 - 2;
      v67 = &v34[-a1];
      v68 = v34 + 1;
      while (1)
      {
        v69 = v67;
        if ((unint64_t)(v68 - 1) > v66)
          return -70;
        v70 = &v30[2 * v32];
        v71 = *v70;
        v72 = *((_BYTE *)v70 + 2);
        v73 = *((unsigned __int8 *)v70 + 3);
        v74 = v82;
        v75 = BYTE8(v82);
        DWORD2(v82) += v73;
        *(v68 - 1) = v72;
        if (sub_1D4B9C858((uint64_t)&v82) == 3)
          break;
        if ((unint64_t)v68 > v66)
          return -70;
        v32 = ((unint64_t)(v74 << v75) >> 1 >> (63 - v73)) + v71;
        v76 = &v30[2 * v33];
        v77 = *v76;
        v78 = *((_BYTE *)v76 + 2);
        LODWORD(v76) = *((unsigned __int8 *)v76 + 3);
        v79 = (_QWORD)v82 << SBYTE8(v82) >> 1 >> (63 - v76);
        DWORD2(v82) += (_DWORD)v76;
        v33 = v79 + v77;
        *v68 = v78;
        v68 += 2;
        v80 = sub_1D4B9C858((uint64_t)&v82);
        v67 = v69 + 2;
        if (v80 == 3)
        {
          --v68;
          v81 = 3;
          v33 = v32;
LABEL_33:
          *v68 = v30[2 * v33 + 1];
          return (unint64_t)&v69[v81];
        }
      }
      v81 = 2;
      goto LABEL_33;
    }
  }
  return result;
}

unint64_t sub_1D4BA2E4C(unsigned int *a1, char *a2, unint64_t a3)
{
  unint64_t result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21[17];
  char __b[256];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v20 = 0;
  result = sub_1D4BA263C(__b, 0x100uLL, (uint64_t)v21, &v19, &v20, a2, a3);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    v5 = v20;
    if (v20 <= *a1 + 1)
    {
      *a1 = *a1 & 0xFF0000FF | (v20 << 16);
      v6 = v5 + 1;
      if (v6 >= 2)
      {
        v7 = 0;
        v8 = 0;
        v9 = v6 - 1;
        do
        {
          v10 = v21[v7 + 1] << v7;
          v21[v7 + 1] = v8;
          v8 += v10;
          ++v7;
        }
        while (v9 != v7);
      }
      v11 = v19;
      if (v19)
      {
        v12 = 0;
        v13 = v5 + 1;
        do
        {
          v14 = __b[v12];
          v15 = v21[v14];
          v16 = (v15 + (1 << v14 >> 1));
          if (v15 < v16)
          {
            v17 = (char *)a1 + 2 * v15 + 5;
            v18 = v16 - v15;
            do
            {
              *(v17 - 1) = v12;
              *v17 = v13 - v14;
              v17 += 2;
              --v18;
            }
            while (v18);
          }
          v21[v14] = v16;
          ++v12;
        }
        while (v12 != v11);
      }
    }
    else
    {
      return -44;
    }
  }
  return result;
}

unint64_t sub_1D4BA2F94(_BYTE *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, int *a5)
{
  int v8;
  unint64_t result;
  __int128 v11;
  __int128 v12;

  v11 = 0u;
  v12 = 0u;
  v8 = *a5;
  result = sub_1D4BA5554((uint64_t)&v11, a3, a4);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    sub_1D4B9FDB8(a1, (uint64_t)&v11, (unint64_t)&a1[a2], (uint64_t)(a5 + 1), BYTE2(v8));
    if (DWORD2(v11) == 64 && (_QWORD)v12 == *((_QWORD *)&v12 + 1))
      return a2;
    else
      return -20;
  }
  return result;
}

unint64_t sub_1D4BA301C(unsigned int *a1, _BYTE *a2, uint64_t a3, char *a4, unint64_t a5)
{
  unint64_t result;

  result = sub_1D4BA2E4C(a1, a4, a5);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (a5 <= result)
      return -72;
    else
      return sub_1D4BA2F94(a2, a3, (unsigned __int8 *)&a4[result], a5 - result, (int *)a1);
  }
  return result;
}

unint64_t sub_1D4BA309C(_BYTE *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned int *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int16 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE *v31;
  int v32;
  uint64_t v33;
  _BYTE *v34;
  int v35;
  uint64_t v36;
  char *v37;
  char v38;
  uint64_t v39;
  _BYTE *v40;
  int v41;
  _BYTE *v42;
  int v43;
  _BYTE *v44;
  int v45;
  _BYTE *v46;
  _BYTE *v47;
  int v48;
  _BYTE *v49;
  int v50;
  _BYTE *v51;
  int v52;
  _BYTE *v53;
  _BYTE *v54;
  int v55;
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;
  int v61;
  int v62;
  int v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  unint64_t v67;
  _BYTE *v75;
  _BYTE *v76;
  unint64_t v77;
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;

  if (a4 < 0xA)
    return -20;
  v87 = v5;
  v88 = v6;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v8 = (uint64_t)(a5 + 1);
  v9 = *a5;
  v79 = 0u;
  v80 = 0u;
  v10 = *(unsigned __int16 *)a3;
  v11 = *((unsigned __int16 *)a3 + 1);
  v12 = *((unsigned __int16 *)a3 + 2);
  v13 = v10 + v11 + v12 + 6;
  v14 = a4 - v13;
  if (a4 < v13)
    return -20;
  v17 = (unsigned __int16 *)(a3 + 6);
  result = sub_1D4BA5554((uint64_t)&v85, a3 + 6, *(unsigned __int16 *)a3);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    v18 = (unsigned __int8 *)v17 + v10;
    result = sub_1D4BA5554((uint64_t)&v83, v18, v11);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      v19 = &v18[v11];
      result = sub_1D4BA5554((uint64_t)&v81, v19, v12);
      if (result <= 0xFFFFFFFFFFFFFF88)
      {
        result = sub_1D4BA5554((uint64_t)&v79, &v19[v12], v14);
        if (result <= 0xFFFFFFFFFFFFFF88)
        {
          v20 = (unint64_t)&a1[a2];
          v76 = &a1[(unint64_t)(a2 + 3) >> 2];
          v77 = (unint64_t)&v76[(unint64_t)(a2 + 3) >> 2];
          v21 = v77 + ((unint64_t)(a2 + 3) >> 2);
          v22 = sub_1D4B9C858((uint64_t)&v85);
          v23 = sub_1D4B9C858((uint64_t)&v83) | v22;
          v24 = sub_1D4B9C858((uint64_t)&v81);
          if (v23 | v24 | sub_1D4B9C858((uint64_t)&v79) || (v78 = v20 - 7, v21 >= v20 - 7))
          {
            v67 = (unint64_t)&a1[(unint64_t)(a2 + 3) >> 2];
            v65 = &v76[(unint64_t)(a2 + 3) >> 2];
            v66 = (_BYTE *)v67;
            v64 = (_BYTE *)(v77 + ((unint64_t)(a2 + 3) >> 2));
          }
          else
          {
            v75 = &a1[a2];
            v25 = (unint64_t)(a2 + 3) >> 2;
            v26 = -HIWORD(v9) & 0x3F;
            do
            {
              v27 = &a1[3 * v25];
              v28 = &a1[2 * v25];
              v29 = &a1[v25];
              v30 = v85;
              v31 = (_BYTE *)(v8 + 2 * ((_QWORD)v85 << SBYTE8(v85) >> v26));
              v32 = DWORD2(v85) + v31[1];
              *a1 = *v31;
              v33 = v83;
              v34 = (_BYTE *)(v8 + 2 * ((_QWORD)v83 << SBYTE8(v83) >> v26));
              v35 = DWORD2(v83) + v34[1];
              *v29 = *v34;
              v36 = v81;
              v37 = (char *)(v8 + 2 * ((_QWORD)v81 << SBYTE8(v81) >> v26));
              v38 = *v37;
              LODWORD(v37) = DWORD2(v81) + v37[1];
              *v28 = v38;
              v39 = v79;
              v40 = (_BYTE *)(v8 + 2 * ((_QWORD)v79 << SBYTE8(v79) >> v26));
              v41 = DWORD2(v79) + v40[1];
              *v27 = *v40;
              v42 = (_BYTE *)(v8 + 2 * ((unint64_t)(v30 << v32) >> v26));
              v43 = v32 + v42[1];
              a1[1] = *v42;
              v44 = (_BYTE *)(v8 + 2 * ((unint64_t)(v33 << v35) >> v26));
              v45 = v35 + v44[1];
              v29[1] = *v44;
              v46 = (_BYTE *)(v8 + 2 * ((unint64_t)(v36 << (char)v37) >> v26));
              LODWORD(v37) = (_DWORD)v37 + v46[1];
              v28[1] = *v46;
              v47 = (_BYTE *)(v8 + 2 * ((unint64_t)(v39 << v41) >> v26));
              v48 = v41 + v47[1];
              v27[1] = *v47;
              v49 = (_BYTE *)(v8 + 2 * ((unint64_t)(v30 << v43) >> v26));
              v50 = v43 + v49[1];
              a1[2] = *v49;
              v51 = (_BYTE *)(v8 + 2 * ((unint64_t)(v33 << v45) >> v26));
              v52 = v45 + v51[1];
              v29[2] = *v51;
              v53 = (_BYTE *)(v8 + 2 * ((unint64_t)(v36 << (char)v37) >> v26));
              LODWORD(v37) = (_DWORD)v37 + v53[1];
              v28[2] = *v53;
              v54 = (_BYTE *)(v8 + 2 * ((unint64_t)(v39 << v48) >> v26));
              v55 = v48 + v54[1];
              v27[2] = *v54;
              v56 = (_BYTE *)(v8 + 2 * ((unint64_t)(v30 << v50) >> v26));
              LOBYTE(v54) = *v56;
              DWORD2(v85) = v50 + v56[1];
              v57 = a1 + 4;
              a1[3] = (_BYTE)v54;
              v58 = (_BYTE *)(v8 + 2 * ((unint64_t)(v33 << v52) >> v26));
              LOBYTE(v33) = *v58;
              DWORD2(v83) = v52 + v58[1];
              v29[3] = v33;
              v59 = (_BYTE *)(v8 + 2 * ((unint64_t)(v36 << (char)v37) >> v26));
              LOBYTE(v58) = *v59;
              DWORD2(v81) = (_DWORD)v37 + v59[1];
              v28[3] = (_BYTE)v58;
              v60 = (_BYTE *)(v8 + 2 * ((unint64_t)(v39 << v55) >> v26));
              LOBYTE(v59) = *v60;
              DWORD2(v79) = v55 + v60[1];
              v27[3] = (_BYTE)v59;
              v61 = sub_1D4B9C858((uint64_t)&v85);
              v62 = sub_1D4B9C858((uint64_t)&v83) | v61;
              v63 = sub_1D4B9C858((uint64_t)&v81);
              if (v62 | v63 | sub_1D4B9C858((uint64_t)&v79))
                break;
              a1 = v57;
            }
            while ((unint64_t)(v27 + 4) < v78);
            v64 = &v57[3 * v25];
            v65 = &v57[2 * v25];
            v66 = &v57[v25];
            a1 = v57;
            v21 = v77 + ((unint64_t)(a2 + 3) >> 2);
            v20 = (unint64_t)v75;
            v67 = (unint64_t)v76;
          }
          result = -20;
          if ((unint64_t)a1 <= v67 && (unint64_t)v66 <= v77 && (unint64_t)v65 <= v21)
          {
            sub_1D4B9FDB8(a1, (uint64_t)&v85, v67, v8, BYTE2(v9));
            sub_1D4B9FDB8(v66, (uint64_t)&v83, v77, v8, BYTE2(v9));
            sub_1D4B9FDB8(v65, (uint64_t)&v81, v21, v8, BYTE2(v9));
            sub_1D4B9FDB8(v64, (uint64_t)&v79, v20, v8, BYTE2(v9));
            if (DWORD2(v79) == 64
              && (_QWORD)v80 == *((_QWORD *)&v80 + 1)
              && DWORD2(v81) == 64
              && (_QWORD)v82 == *((_QWORD *)&v82 + 1)
              && DWORD2(v83) == 64
              && (_QWORD)v84 == *((_QWORD *)&v84 + 1)
              && DWORD2(v85) == 64
              && (_QWORD)v86 == *((_QWORD *)&v86 + 1))
            {
              return a2;
            }
            else
            {
              return -20;
            }
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_1D4BA3570(unsigned int *a1, _BYTE *a2, uint64_t a3, char *a4, unint64_t a5)
{
  unint64_t result;

  result = sub_1D4BA2E4C(a1, a4, a5);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (a5 <= result)
      return -72;
    else
      return sub_1D4BA309C(a2, a3, (unsigned __int8 *)&a4[result], a5 - result, a1);
  }
  return result;
}

unint64_t sub_1D4BA35F0(unsigned int *a1, char *a2, unint64_t a3)
{
  _DWORD *v3;
  unsigned int v4;
  unint64_t result;
  unsigned int v6;
  int v7;
  int v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int *v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  int *v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned __int8 *v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  _DWORD v98[16];
  uint64_t v99;
  _DWORD v100[148];
  char __b[256];
  _OWORD v102[4];
  int v103;
  _OWORD v104[4];
  int v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  memset(v100, 0, 68);
  v99 = 0;
  memset(v98, 0, sizeof(v98));
  v3 = a1 + 1;
  v4 = *a1;
  if (v4 > 0x10)
    return -44;
  v63 = *a1;
  v65 = 0;
  result = sub_1D4BA263C(__b, 0x100uLL, (uint64_t)v100, &v65, (_DWORD *)&v65 + 1, a2, a3);
  if (result > 0xFFFFFFFFFFFFFF88)
    return result;
  v6 = v4 - HIDWORD(v65);
  if (v4 < HIDWORD(v65))
    return -44;
  v7 = 0;
  v8 = HIDWORD(v65) + 1;
  while (!v100[HIDWORD(v65) + v7--])
    ;
  v10 = 0;
  v11 = HIDWORD(v65) + v7;
  v12 = (HIDWORD(v65) + v7 + 2);
  if ((HIDWORD(v65) + v7) <= 0xFFFFFFFD)
  {
    v13 = 0;
    v14 = &v100[1];
    v15 = &v98[2];
    v16 = v12 - 1;
    do
    {
      v17 = *v14++;
      v10 = v17 + v13;
      *v15++ = v13;
      v13 += v17;
      --v16;
    }
    while (v16);
  }
  v98[1] = v10;
  v18 = v65;
  if ((_DWORD)v65)
  {
    v19 = 0;
    do
    {
      v20 = __b[v19];
      v21 = v98[v20 + 1];
      v98[v20 + 1] = v21 + 1;
      v22 = (char *)&v100[20] + 2 * v21;
      *v22 = v19;
      v22[1] = v20;
      ++v19;
    }
    while (v18 != v19);
  }
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v80 = 0u;
  v81 = 0u;
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v98[1] = 0;
  if (v11 <= 0xFFFFFFFD)
  {
    v23 = 0;
    v24 = &v100[1];
    v25 = (_DWORD *)&v66 + 1;
    v26 = v12 - 1;
    do
    {
      v27 = *v24++;
      *v25++ = v23;
      v23 += v27 << v6++;
      --v26;
    }
    while (v26);
  }
  v28 = -v7;
  if (-v7 < v4 + v7 + 1)
  {
    v29 = v4 + v7 + 1;
    v30 = -v7;
    v31 = 17 * v30;
    v32 = v12 - 1;
    do
    {
      if (v11 <= 0xFFFFFFFD)
      {
        v33 = v32;
        v34 = (_DWORD *)&v66 + 1;
        do
        {
          v34[v31] = *v34 >> v30;
          ++v34;
          --v33;
        }
        while (v33);
      }
      ++v30;
      v31 += 17;
    }
    while (v29 != v30);
  }
  v102[1] = v67;
  v102[2] = v68;
  v102[3] = v69;
  v103 = v70;
  v102[0] = v66;
  if (v10)
  {
    v35 = 0;
    v36 = v8 - v4;
    do
    {
      v37 = (unsigned __int8 *)&v100[20] + 2 * v35;
      v38 = *v37;
      v39 = v37[1];
      v40 = v8 - v39;
      v41 = *((unsigned int *)v102 + v39);
      v42 = v4 - (v8 - v39);
      v43 = 1 << (v4 - (v8 - v39));
      if (v42 >= v28)
      {
        v47 = (char *)&v66 + 68 * v40;
        v48 = *(_OWORD *)v47;
        v104[1] = *((_OWORD *)v47 + 1);
        v49 = *((_OWORD *)v47 + 3);
        v104[2] = *((_OWORD *)v47 + 2);
        LODWORD(v50) = v36 + v40;
        if ((int)(v36 + v40) <= 1)
          v50 = 1;
        else
          v50 = v50;
        v51 = v98[v50];
        v104[3] = v49;
        v105 = *((_DWORD *)v47 + 16);
        v104[0] = v48;
        if (v50 >= 2)
        {
          v52 = *((unsigned int *)v104 + v50);
          if ((_DWORD)v52)
          {
            v53 = &v3[v41];
            do
            {
              *v53++ = v38 & 0xFF00FFFF | ((v8 - v39) << 16) | 0x1000000;
              --v52;
            }
            while (v52);
          }
        }
        if (v10 != (_DWORD)v51)
        {
          v54 = 0;
          v55 = (char *)&v100[20] + 2 * v51;
          v56 = (v10 - v51);
          do
          {
            v57 = &v55[2 * v54];
            v58 = *v57;
            v59 = v57[1];
            v60 = *((_DWORD *)v104 + v59);
            v61 = (1 << (v42 - (v8 - v59))) + v60;
            v62 = (v58 << 8) & 0xFF00FFFF | ((v8 - v59 + v40) << 16) | v38 | 0x2000000;
            do
              v3[v41 + v60++] = v62;
            while (v60 < v61);
            *((_DWORD *)v104 + v59) = v61;
            ++v54;
          }
          while (v54 != v56);
        }
        LODWORD(v44) = v43 + v41;
      }
      else
      {
        v44 = (v43 + v41);
        if (v41 < v44)
        {
          v45 = v44 - v41;
          v46 = &a1[v41 + 1];
          do
          {
            *v46++ = v38 & 0xFF00FFFF | ((v8 - v39) << 16) | 0x1000000;
            --v45;
          }
          while (v45);
        }
      }
      *((_DWORD *)v102 + v39) = v44;
      ++v35;
    }
    while (v35 != v10);
  }
  *a1 = v63 & 0xFF0000FF | (v63 << 16) | 0x100;
  return result;
}

unint64_t sub_1D4BA3A28(_WORD *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5)
{
  unint64_t result;
  __int128 v10;
  __int128 v11;

  v10 = 0u;
  v11 = 0u;
  result = sub_1D4BA5554((uint64_t)&v10, a3, a4);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    sub_1D4BA0A8C(a1, (uint64_t)&v10, (unint64_t)a1 + a2, a5 + 4, *(unsigned __int8 *)(a5 + 2));
    if (DWORD2(v10) == 64 && (_QWORD)v11 == *((_QWORD *)&v11 + 1))
      return a2;
    else
      return -20;
  }
  return result;
}

uint64_t sub_1D4BA3AAC(_WORD *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned int *a5)
{
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  char *v19;
  _WORD *v20;
  _WORD *v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  _WORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _WORD *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  char *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _WORD *v51;
  uint64_t v52;
  int v53;
  _WORD *v54;
  uint64_t v55;
  int v56;
  char *v57;
  _WORD *v58;
  uint64_t v59;
  int v60;
  _WORD *v61;
  uint64_t v62;
  int v63;
  _WORD *v64;
  uint64_t v65;
  int v66;
  _WORD *v67;
  uint64_t v68;
  int v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;

  if (a4 < 0xA)
    return -20;
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  v6 = (uint64_t)(a5 + 1);
  v5 = *a5;
  v92 = 0u;
  v93 = 0u;
  v7 = *(unsigned __int16 *)a3;
  v8 = *((unsigned __int16 *)a3 + 1);
  v9 = *((unsigned __int16 *)a3 + 2);
  v10 = v7 + v8 + v9 + 6;
  v11 = a4 - v10;
  if (a4 < v10)
    return -20;
  v91 = v5;
  v16 = (unsigned __int16 *)(a3 + 6);
  v12 = sub_1D4BA5554((uint64_t)&v98, a3 + 6, v7);
  if (v12 <= 0xFFFFFFFFFFFFFF88)
  {
    v17 = (unsigned __int8 *)v16 + v7;
    v12 = sub_1D4BA5554((uint64_t)&v96, v17, v8);
    if (v12 <= 0xFFFFFFFFFFFFFF88)
    {
      v18 = &v17[v8];
      v12 = sub_1D4BA5554((uint64_t)&v94, v18, v9);
      if (v12 <= 0xFFFFFFFFFFFFFF88)
      {
        v12 = sub_1D4BA5554((uint64_t)&v92, &v18[v9], v11);
        if (v12 <= 0xFFFFFFFFFFFFFF88)
        {
          v19 = (char *)a1 + a2;
          v20 = (_WORD *)((char *)a1 + ((unint64_t)(a2 + 3) >> 2));
          v21 = (_WORD *)((char *)v20 + ((unint64_t)(a2 + 3) >> 2));
          v22 = (char *)v21 + ((unint64_t)(a2 + 3) >> 2);
          v23 = sub_1D4B9C858((uint64_t)&v98);
          v24 = sub_1D4B9C858((uint64_t)&v96) | v23;
          v25 = sub_1D4B9C858((uint64_t)&v94);
          v87 = (unint64_t)a1 + a2;
          v88 = (unint64_t)v20;
          v89 = (unint64_t)v21;
          v90 = (unint64_t)v22;
          if (!(v24 | v25 | sub_1D4B9C858((uint64_t)&v92)))
          {
            v26 = (unint64_t)(v19 - 7);
            if (v22 < v19 - 7)
            {
              v27 = -HIWORD(v91) & 0x3F;
              do
              {
                v28 = v98;
                v29 = DWORD2(v98);
                v30 = v6 + 4 * ((_QWORD)v98 << SBYTE8(v98) >> v27);
                *a1 = *(_WORD *)v30;
                v31 = v29 + *(unsigned __int8 *)(v30 + 2);
                v32 = (_WORD *)((char *)a1 + *(unsigned __int8 *)(v30 + 3));
                v33 = v96;
                LODWORD(v30) = DWORD2(v96);
                v34 = v6 + 4 * ((_QWORD)v96 << SBYTE8(v96) >> v27);
                *v20 = *(_WORD *)v34;
                v35 = v30 + *(unsigned __int8 *)(v34 + 2);
                v36 = (_WORD *)((char *)v20 + *(unsigned __int8 *)(v34 + 3));
                v37 = v94;
                LODWORD(v34) = DWORD2(v94);
                v38 = v6 + 4 * ((_QWORD)v94 << SBYTE8(v94) >> v27);
                *v21 = *(_WORD *)v38;
                v39 = v34 + *(unsigned __int8 *)(v38 + 2);
                v40 = (_WORD *)((char *)v21 + *(unsigned __int8 *)(v38 + 3));
                v41 = v92;
                v42 = DWORD2(v92);
                v43 = v6 + 4 * ((_QWORD)v92 << SBYTE8(v92) >> v27);
                *(_WORD *)v22 = *(_WORD *)v43;
                v44 = v42 + *(unsigned __int8 *)(v43 + 2);
                v45 = &v22[*(unsigned __int8 *)(v43 + 3)];
                v46 = v6 + 4 * ((unint64_t)(v28 << v31) >> v27);
                *v32 = *(_WORD *)v46;
                v47 = v31 + *(unsigned __int8 *)(v46 + 2);
                v48 = *(unsigned __int8 *)(v46 + 3);
                v49 = v6 + 4 * ((unint64_t)(v33 << v35) >> v27);
                *v36 = *(_WORD *)v49;
                v50 = v35 + *(unsigned __int8 *)(v49 + 2);
                v51 = (_WORD *)((char *)v36 + *(unsigned __int8 *)(v49 + 3));
                v52 = v6 + 4 * ((unint64_t)(v37 << v39) >> v27);
                *v40 = *(_WORD *)v52;
                v53 = v39 + *(unsigned __int8 *)(v52 + 2);
                v54 = (_WORD *)((char *)v40 + *(unsigned __int8 *)(v52 + 3));
                v55 = v6 + 4 * ((unint64_t)(v41 << v44) >> v27);
                *(_WORD *)v45 = *(_WORD *)v55;
                v56 = v44 + *(unsigned __int8 *)(v55 + 2);
                v57 = &v45[*(unsigned __int8 *)(v55 + 3)];
                v58 = (_WORD *)((char *)v32 + v48);
                v59 = v6 + 4 * ((unint64_t)(v28 << v47) >> v27);
                *v58 = *(_WORD *)v59;
                v60 = v47 + *(unsigned __int8 *)(v59 + 2);
                v61 = (_WORD *)((char *)v58 + *(unsigned __int8 *)(v59 + 3));
                v62 = v6 + 4 * ((unint64_t)(v33 << v50) >> v27);
                *v51 = *(_WORD *)v62;
                v63 = v50 + *(unsigned __int8 *)(v62 + 2);
                v64 = (_WORD *)((char *)v51 + *(unsigned __int8 *)(v62 + 3));
                v65 = v6 + 4 * ((unint64_t)(v37 << v53) >> v27);
                *v54 = *(_WORD *)v65;
                v66 = v53 + *(unsigned __int8 *)(v65 + 2);
                v67 = (_WORD *)((char *)v54 + *(unsigned __int8 *)(v65 + 3));
                v68 = v6 + 4 * ((unint64_t)(v41 << v56) >> v27);
                *(_WORD *)v57 = *(_WORD *)v68;
                v69 = v56 + *(unsigned __int8 *)(v68 + 2);
                v70 = &v57[*(unsigned __int8 *)(v68 + 3)];
                v71 = v6 + 4 * ((unint64_t)(v28 << v60) >> v27);
                *v61 = *(_WORD *)v71;
                DWORD2(v98) = v60 + *(unsigned __int8 *)(v71 + 2);
                a1 = (_WORD *)((char *)v61 + *(unsigned __int8 *)(v71 + 3));
                v72 = v6 + 4 * ((unint64_t)(v33 << v63) >> v27);
                *v64 = *(_WORD *)v72;
                DWORD2(v96) = v63 + *(unsigned __int8 *)(v72 + 2);
                v20 = (_WORD *)((char *)v64 + *(unsigned __int8 *)(v72 + 3));
                v73 = v6 + 4 * ((unint64_t)(v37 << v66) >> v27);
                *v67 = *(_WORD *)v73;
                DWORD2(v94) = v66 + *(unsigned __int8 *)(v73 + 2);
                v21 = (_WORD *)((char *)v67 + *(unsigned __int8 *)(v73 + 3));
                v74 = v6 + 4 * ((unint64_t)(v41 << v69) >> v27);
                *(_WORD *)v70 = *(_WORD *)v74;
                DWORD2(v92) = v69 + *(unsigned __int8 *)(v74 + 2);
                v22 = &v70[*(unsigned __int8 *)(v74 + 3)];
                v75 = sub_1D4B9C858((uint64_t)&v98);
                v76 = sub_1D4B9C858((uint64_t)&v96) | v75;
                v77 = sub_1D4B9C858((uint64_t)&v94);
              }
              while (!(v76 | v77 | sub_1D4B9C858((uint64_t)&v92)) && (unint64_t)v22 < v26);
            }
          }
          v12 = -20;
          if ((unint64_t)a1 <= v88 && (unint64_t)v20 <= v89 && (unint64_t)v21 <= v90)
          {
            sub_1D4BA0A8C(a1, (uint64_t)&v98, v88, v6, BYTE2(v91));
            sub_1D4BA0A8C(v20, (uint64_t)&v96, v89, v6, BYTE2(v91));
            sub_1D4BA0A8C(v21, (uint64_t)&v94, v90, v6, BYTE2(v91));
            sub_1D4BA0A8C(v22, (uint64_t)&v92, v87, v6, BYTE2(v91));
            if (DWORD2(v92) == 64
              && (_QWORD)v93 == *((_QWORD *)&v93 + 1)
              && DWORD2(v94) == 64
              && (_QWORD)v95 == *((_QWORD *)&v95 + 1)
              && DWORD2(v96) == 64
              && (_QWORD)v97 == *((_QWORD *)&v97 + 1)
              && DWORD2(v98) == 64
              && (_QWORD)v99 == *((_QWORD *)&v99 + 1))
            {
              return a2;
            }
          }
        }
      }
    }
  }
  return v12;
}

unint64_t sub_1D4BA3FAC(unsigned int *a1, _WORD *a2, uint64_t a3, char *a4, unint64_t a5)
{
  unint64_t result;

  result = sub_1D4BA35F0(a1, a4, a5);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (a5 <= result)
      return -72;
    else
      return sub_1D4BA3AAC(a2, a3, (unsigned __int8 *)&a4[result], a5 - result, a1);
  }
  return result;
}

uint64_t sub_1D4BA402C(unsigned int *a1, _BYTE *a2, unint64_t a3, char *a4, unint64_t a5)
{
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;

  if (!a3)
    return -70;
  v5 = -20;
  if (a5 >= a3 || a5 < 2)
    return v5;
  v6 = (_DWORD *)((char *)&unk_1D4BD93FC + 24 * (16 * a5 / a3));
  v7 = *v6 + v6[1] * (a3 >> 8);
  LODWORD(v6) = v6[2] + v6[3] * (a3 >> 8);
  if (v6 + (v6 >> 3) >= v7)
    return sub_1D4BA3570(a1, a2, a3, a4, a5);
  else
    return sub_1D4BA3FAC(a1, a2, a3, a4, a5);
}

double sub_1D4BA4094(__int128 *a1)
{
  void *(*v2)(int, size_t);
  uint64_t v3;
  uint64_t v4;
  double result;
  __int128 v6;

  v2 = *(void *(**)(int, size_t))a1;
  v3 = *((_QWORD *)a1 + 1);
  if (*(_QWORD *)a1)
  {
    if (!v3)
      return result;
  }
  else
  {
    if (v3)
      return result;
    *a1 = xmmword_1E984B180;
    *((_QWORD *)a1 + 2) = 0;
    v2 = sub_1D4BA5644;
  }
  v4 = (uint64_t)v2(*((_QWORD *)a1 + 2), 152864);
  if (v4)
  {
    v6 = *a1;
    *(_QWORD *)(v4 + 21744) = *((_QWORD *)a1 + 2);
    *(_OWORD *)(v4 + 21728) = v6;
    *(_QWORD *)(v4 + 21552) = 5;
    result = 0.0;
    *(_OWORD *)(v4 + 21520) = 0u;
    *(_OWORD *)(v4 + 21536) = 0u;
    *(_DWORD *)(v4 + 5132) = 201326604;
    *(_DWORD *)(v4 + 21612) = 0;
    *(_QWORD *)(v4 + 21604) = 0;
    *(_DWORD *)(v4 + 21712) = 0;
    *(_QWORD *)(v4 + 21560) = 0x400000001;
    *(_DWORD *)(v4 + 21568) = 8;
  }
  return result;
}

double sub_1D4BA4160()
{
  __int128 v1;
  uint64_t v2;

  v1 = xmmword_1E984B180;
  v2 = 0;
  return sub_1D4BA4094(&v1);
}

uint64_t sub_1D4BA4198(uint64_t a1)
{
  if (a1)
    (*(void (**)(_QWORD, uint64_t))(a1 + 21736))(*(_QWORD *)(a1 + 21744), a1);
  return 0;
}

uint64_t sub_1D4BA41C0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;

  if (a3 < 5)
    return 5;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (*(_DWORD *)a2 == -47205081)
  {
    v5 = *(unsigned __int8 *)(a2 + 4);
    v6 = v5 & 3;
    v7 = v5 >> 6;
    v8 = qword_1D4BD95A0[v5 >> 6] + qword_1D4BD9580[v5 & 3] - ((v5 & 0x20) >> 5);
    if (v5 < 0x40 && (v5 & 0x20) != 0)
      ++v8;
    v3 = v8 + 6;
    if (v3 <= a3)
    {
      if ((v5 & 8) == 0)
      {
        if ((v5 & 0x20) != 0)
        {
          v10 = 0;
          v11 = 5;
          goto LABEL_21;
        }
        if (*(unsigned __int8 *)(a2 + 5) <= 0x8Fu)
        {
          v10 = (1024 << (*(_BYTE *)(a2 + 5) >> 3))
              + ((1024 << (*(_BYTE *)(a2 + 5) >> 3)) >> 3) * (*(_BYTE *)(a2 + 5) & 7);
          v11 = 6;
LABEL_21:
          switch(v6)
          {
            case 3:
              v12 = *(_DWORD *)(a2 + v11);
              v11 += 4;
              break;
            case 2:
              v12 = *(unsigned __int16 *)(a2 + v11);
              v11 += 2;
              break;
            case 1:
              v12 = *(unsigned __int8 *)(a2 + v11++);
              break;
            default:
              v12 = 0;
              break;
          }
          switch((_DWORD)v7)
          {
            case 1:
              v13 = *(unsigned __int16 *)(a2 + v11) + 256;
              break;
            case 2:
              v13 = *(unsigned int *)(a2 + v11);
              break;
            case 3:
              v13 = *(_QWORD *)(a2 + v11);
              break;
            default:
              if ((v5 & 0x20) != 0)
                v13 = *(unsigned __int8 *)(a2 + v11);
              else
                v13 = 0;
              break;
          }
          if (v10)
            v14 = v10;
          else
            v14 = v13;
          if (v14 <= 0x8000000)
          {
            v3 = 0;
            *(_QWORD *)a1 = v13;
            *(_DWORD *)(a1 + 8) = v14;
            *(_DWORD *)(a1 + 12) = v12;
            *(_DWORD *)(a1 + 16) = (v5 >> 2) & 1;
            return v3;
          }
        }
      }
      return -14;
    }
  }
  else if (*(_DWORD *)a2 >> 4 == 25481893)
  {
    if (a3 >= 8)
    {
      v3 = 0;
      *(_QWORD *)a1 = *(unsigned int *)(a2 + 4);
      *(_DWORD *)(a1 + 8) = 0;
    }
    else
    {
      return 8;
    }
  }
  else
  {
    return -10;
  }
  return v3;
}

uint64_t sub_1D4BA4368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5 >> 17)
    return -72;
  if (a5 >= 3)
    __asm { BR              X11 }
  return -20;
}

#error "1D4BA4678: call analysis failed (funcsize=509)"

uint64_t sub_1D4BA4DB8(_QWORD *a1, char *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  char *v12;

  sub_1D4BA4E3C((uint64_t)a1, a6, a7);
  v12 = (char *)a1[2690];
  if (v12 != a2)
  {
    a1[2693] = v12;
    a1[2692] = &a2[a1[2691] - (_QWORD)v12];
    a1[2691] = a2;
    a1[2690] = a2;
  }
  return sub_1D4BA50F4((uint64_t)a1, a2, a3, a4, a5);
}

double sub_1D4BA4E3C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  double result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _BYTE v29[106];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 21552) = 5;
  *(_DWORD *)(a1 + 5132) = 201326604;
  *(_QWORD *)(a1 + 21560) = 0x400000001;
  *(_DWORD *)(a1 + 21568) = 8;
  result = 0.0;
  *(_OWORD *)(a1 + 21520) = 0u;
  *(_OWORD *)(a1 + 21536) = 0u;
  *(_QWORD *)(a1 + 21608) = 0;
  *(_DWORD *)(a1 + 21604) = 0;
  *(_DWORD *)(a1 + 21712) = 0;
  if (a2 && a3)
  {
    if (a3 <= 7 || *(_DWORD *)a2 != -332356553)
    {
      *(_QWORD *)(a1 + 21536) = a2;
      *(_QWORD *)(a1 + 21528) = a2;
      v22 = a2 + a3;
LABEL_18:
      *(_QWORD *)(a1 + 21520) = v22;
      return result;
    }
    *(_DWORD *)(a1 + 21712) = *(_DWORD *)(a2 + 4);
    v7 = a2 + 8;
    v8 = a3 - 8;
    v9 = sub_1D4BA35F0((unsigned int *)(a1 + 5132), (char *)(a2 + 8), a3 - 8);
    if (v9 <= 0xFFFFFFFFFFFFFF88)
    {
      v10 = a2 + a3;
      v11 = v7 + v9;
      v27 = 0;
      v28 = 28;
      v12 = sub_1D4B9AB48((uint64_t)v29, &v28, &v27, (unsigned int *)(v7 + v9), v10 - (v7 + v9));
      if (v12 <= 0xFFFFFFFFFFFFFF88 && v27 < 9)
      {
        v13 = v12;
        if ((unint64_t)sub_1D4B9F160((int *)(a1 + 2052), (uint64_t)v29, v28, v27) <= 0xFFFFFFFFFFFFFF88)
        {
          v14 = (unsigned int *)(v11 + v13);
          v27 = 0;
          v28 = 52;
          v15 = sub_1D4B9AB48((uint64_t)v29, &v28, &v27, v14, v10 - (_QWORD)v14);
          if (v15 <= 0xFFFFFFFFFFFFFF88 && v27 < 0xA)
          {
            v16 = v15;
            if ((unint64_t)sub_1D4B9F160((int *)(a1 + 3080), (uint64_t)v29, v28, v27) <= 0xFFFFFFFFFFFFFF88)
            {
              v17 = (unsigned int *)((char *)v14 + v16);
              v27 = 0;
              v28 = 35;
              v18 = sub_1D4B9AB48((uint64_t)v29, &v28, &v27, v17, v10 - (_QWORD)v17);
              if (v18 <= 0xFFFFFFFFFFFFFF88 && v27 < 0xA)
              {
                v19 = v18;
                if ((unint64_t)sub_1D4B9F160((int *)a1, (uint64_t)v29, v28, v27) <= 0xFFFFFFFFFFFFFF88)
                {
                  v20 = (unsigned int *)((char *)v17 + v19);
                  v21 = (unint64_t)v17 + v19 + 12;
                  if (v21 <= v10)
                  {
                    v23 = *v20;
                    *(_DWORD *)(a1 + 21560) = v23;
                    if ((_DWORD)v23)
                    {
                      if (v8 > v23)
                      {
                        v24 = v20[1];
                        *(_DWORD *)(a1 + 21564) = v24;
                        if ((_DWORD)v24)
                        {
                          if (v8 > v24)
                          {
                            v25 = v20[2];
                            *(_DWORD *)(a1 + 21568) = v25;
                            if ((_DWORD)v25)
                            {
                              if (v8 > v25)
                              {
                                *(_QWORD *)&result = 0x100000001;
                                *(_QWORD *)(a1 + 21608) = 0x100000001;
                                if (v21 - v7 <= 0xFFFFFFFFFFFFFF88)
                                {
                                  v26 = *(_QWORD *)(a1 + 21520);
                                  *(_QWORD *)(a1 + 21544) = v26;
                                  *(_QWORD *)(a1 + 21536) = v21 + *(_QWORD *)(a1 + 21528) - v26;
                                  *(_QWORD *)(a1 + 21528) = v21;
                                  v22 = v8 + v7;
                                  goto LABEL_18;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1D4BA50F4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v9;
  size_t v10;
  unint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  BOOL v24;
  unsigned __int8 *v25;
  size_t __len;

  if (a5 < 8)
    return -72;
  v6 = *(unsigned __int8 *)(a4 + 4);
  v7 = *(_QWORD *)((char *)qword_1D4BD95A0 + ((v6 >> 3) & 0x18));
  if (v6 >= 0x40 || (v6 & 0x20) == 0)
    v9 = v7 + qword_1D4BD9580[v6 & 3] - ((v6 & 0x20) >> 5);
  else
    v9 = v7 + qword_1D4BD9580[v6 & 3] - ((v6 & 0x20) >> 5) + 1;
  v10 = v9 + 6;
  if (v9 + 6 <= 0xFFFFFFFFFFFFFF88)
  {
    if (v9 + 9 > a5)
      return -72;
    if (sub_1D4BA547C(a1, a4, v10))
    {
      return -20;
    }
    else
    {
      v16 = a4 + a5;
      v17 = (unsigned __int8 *)(a4 + v10);
      __len = 0;
      v18 = sub_1D4BA247C((unsigned __int8 *)(a4 + v10), a5 - v10, (int *)&__len);
      v19 = v18;
      if (v18 <= 0xFFFFFFFFFFFFFF88)
      {
        v20 = &a2[a3];
        v21 = a5 - v10;
        v22 = a2;
        while (1)
        {
          v23 = v21 - 3;
          v24 = v21 - 3 >= v19;
          v21 = v21 - 3 - v19;
          if (!v24)
            return -72;
          v25 = v17 + 3;
          switch((int)__len)
          {
            case 0:
              v10 = sub_1D4BA4368(a1, (uint64_t)v22, v20 - v22, (uint64_t)v25, v19);
              if (v10 <= 0xFFFFFFFFFFFFFF88)
                goto LABEL_28;
              return v10;
            case 1:
              if (v19 > v20 - v22)
                return -70;
              if (!v19)
                goto LABEL_27;
              memcpy(v22, v25, v19);
              v10 = v19;
              goto LABEL_28;
            case 2:
              v10 = HIDWORD(__len);
              if (v20 - v22 < (unint64_t)HIDWORD(__len))
                return -70;
              if (HIDWORD(__len))
                memset(v22, *v25, HIDWORD(__len));
              else
LABEL_27:
                v10 = 0;
LABEL_28:
              if (*(_DWORD *)(a1 + 21592))
                sub_1D4B4DD2C(a1 + 21616, v22, v10);
              v22 += v10;
              v17 = &v25[v19];
              __len = 0;
              v19 = sub_1D4BA247C(v17, v16 - (_QWORD)v17, (int *)&__len);
              v10 = v19;
              if (v19 >= 0xFFFFFFFFFFFFFF89)
                return v10;
              break;
            case 3:
              if (v23)
                return -72;
              return v22 - a2;
            default:
              return -1;
          }
        }
      }
      return v18;
    }
  }
  return v10;
}

unint64_t sub_1D4BA532C(unint64_t result, unint64_t a2, unint64_t *a3, _QWORD *a4)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (a2 <= 7)
    goto LABEL_2;
  v7 = result;
  v8 = *(unsigned __int8 *)(result + 4);
  v9 = *(_QWORD *)((char *)qword_1D4BD95A0 + ((v8 >> 3) & 0x18));
  if (v8 >= 0x40 || (v8 & 0x20) == 0)
    v11 = v9 + qword_1D4BD9580[v8 & 3] - ((v8 & 0x20) >> 5);
  else
    v11 = v9 + qword_1D4BD9580[v8 & 3] - ((v8 & 0x20) >> 5) + 1;
  v6 = v11 + 6;
  if (v6 >= 0xFFFFFFFFFFFFFF89)
    goto LABEL_20;
  if (*(_DWORD *)result != -47205081)
  {
    v6 = -10;
    goto LABEL_20;
  }
  if (v6 + 3 > a2)
  {
LABEL_2:
    v6 = -72;
LABEL_20:
    *a3 = v6;
LABEL_21:
    *a4 = -2;
    return result;
  }
  v12 = result + v6;
  v13 = a2 - v6;
  v17 = 0;
  result = sub_1D4BA247C((unsigned __int8 *)(result + v6), a2 - v6, (int *)&v17);
  if (result > 0xFFFFFFFFFFFFFF88)
  {
LABEL_24:
    *a3 = result;
    goto LABEL_21;
  }
  v14 = 0;
  while (1)
  {
    v15 = v12 + 3;
    if ((_DWORD)v17 == 3)
      break;
    v16 = v13 - 3 >= result;
    v13 = v13 - 3 - result;
    if (!v16)
    {
      result = -72;
      goto LABEL_24;
    }
    v12 = v15 + result;
    v17 = 0;
    result = sub_1D4BA247C((unsigned __int8 *)(v15 + result), v13, (int *)&v17);
    v14 += 0x20000;
    if (result >= 0xFFFFFFFFFFFFFF89)
      goto LABEL_24;
  }
  *a3 = v15 - v7;
  *a4 = v14;
  return result;
}

uint64_t sub_1D4BA547C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _DWORD *v4;
  uint64_t v5;

  v4 = (_DWORD *)(a1 + 21588);
  v5 = sub_1D4BA41C0(a1 + 21576, a2, a3);
  if (*v4 && v4[31] != *v4)
    return -32;
  if (v4[1])
    sub_1D4B4DCE4(a1 + 21616, 0);
  return v5;
}

uint64_t sub_1D4BA54F0(uint64_t a1)
{
  if (a1)
  {
    if (*(_QWORD *)a1)
      (*(void (**)(_QWORD))(*(_QWORD *)a1 + 21736))(*(_QWORD *)(*(_QWORD *)a1 + 21744));
    if (*(_QWORD *)(a1 + 40))
      (*(void (**)(_QWORD))(a1 + 144))(*(_QWORD *)(a1 + 152));
    if (*(_QWORD *)(a1 + 64))
      (*(void (**)(_QWORD))(a1 + 144))(*(_QWORD *)(a1 + 152));
    (*(void (**)(_QWORD, uint64_t))(a1 + 144))(*(_QWORD *)(a1 + 152), a1);
  }
  return 0;
}

uint64_t sub_1D4BA5554(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  unsigned int v3;
  uint64_t v4;

  if (a3)
  {
    *(_QWORD *)(a1 + 24) = a2;
    if (a3 < 8)
    {
      *(_QWORD *)(a1 + 16) = a2;
      v4 = *a2;
      *(_QWORD *)a1 = v4;
      switch(a3)
      {
        case 2uLL:
          goto LABEL_12;
        case 3uLL:
          goto LABEL_11;
        case 4uLL:
          goto LABEL_10;
        case 5uLL:
          goto LABEL_9;
        case 6uLL:
          goto LABEL_8;
        case 7uLL:
          v4 |= (unint64_t)a2[6] << 48;
          *(_QWORD *)a1 = v4;
LABEL_8:
          v4 += (unint64_t)a2[5] << 40;
          *(_QWORD *)a1 = v4;
LABEL_9:
          v4 += (unint64_t)a2[4] << 32;
          *(_QWORD *)a1 = v4;
LABEL_10:
          v4 += (unint64_t)a2[3] << 24;
          *(_QWORD *)a1 = v4;
LABEL_11:
          v4 += (unint64_t)a2[2] << 16;
          *(_QWORD *)a1 = v4;
LABEL_12:
          *(_QWORD *)a1 = v4 + ((unint64_t)a2[1] << 8);
          break;
        default:
          break;
      }
      if (a2[a3 - 1])
      {
        v3 = __clz(a2[a3 - 1]) - 8 * a3 + 41;
        goto LABEL_15;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 16) = &a2[a3 - 8];
      *(_QWORD *)a1 = *(_QWORD *)&a2[a3 - 8];
      if (a2[a3 - 1])
      {
        v3 = __clz(a2[a3 - 1]) - 23;
LABEL_15:
        *(_DWORD *)(a1 + 8) = v3;
        return a3;
      }
    }
    *(_DWORD *)(a1 + 8) = 0;
    return -1;
  }
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return -72;
}

void *sub_1D4BA5644(int a1, size_t __size)
{
  return malloc(__size);
}

void sub_1D4BA564C(int a1, void *a2)
{
  free(a2);
}

uint64_t sub_1D4BA5654(int a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v9;
  int v10;
  unsigned __int8 *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;

  v3 = HIWORD(a1);
  v4 = (unsigned __int16)a1;
  if (a3 != 1)
  {
    if (!a2)
      return 1;
    if (a3 < 0x10)
    {
      for (; a3; --a3)
      {
        v9 = *a2++;
        v4 += v9;
        v3 += v4;
      }
      if (v4 > 0xFFF0)
        v4 -= 65521;
      v3 %= 0xFFF1uLL;
      return v4 | (v3 << 16);
    }
    if (a3 >> 4 >= 0x15B)
    {
      do
      {
        a3 -= 5552;
        v10 = -347;
        v11 = a2;
        do
        {
          v12 = v4 + *v11;
          v13 = v12 + v3;
          v14 = v12 + v11[1];
          v15 = v13 + v14;
          v16 = v14 + v11[2];
          v17 = v15 + v16;
          v18 = v16 + v11[3];
          v19 = v17 + v18;
          v20 = v18 + v11[4];
          v21 = v19 + v20;
          v22 = v20 + v11[5];
          v23 = v21 + v22;
          v24 = v22 + v11[6];
          v25 = v23 + v24;
          v26 = v24 + v11[7];
          v27 = v25 + v26;
          v28 = v26 + v11[8];
          v29 = v27 + v28;
          v30 = v28 + v11[9];
          v31 = v29 + v30;
          v32 = v30 + v11[10];
          v33 = v31 + v32;
          v34 = v32 + v11[11];
          v35 = v33 + v34;
          v36 = v34 + v11[12];
          v37 = v35 + v36;
          v38 = v36 + v11[13];
          v39 = v37 + v38;
          v40 = v38 + v11[14];
          v41 = v39 + v40;
          v4 = v40 + v11[15];
          v3 = v41 + v4;
          v11 += 16;
        }
        while (!__CFADD__(v10++, 1));
        a2 += 5552;
        v4 %= 0xFFF1uLL;
        v3 %= 0xFFF1uLL;
      }
      while (a3 >> 4 > 0x15A);
      if (!a3)
        return v4 | (v3 << 16);
      if (a3 < 0x10)
        goto LABEL_30;
    }
    do
    {
      a3 -= 16;
      v43 = v4 + *a2;
      v44 = v43 + v3;
      v45 = v43 + a2[1];
      v46 = v44 + v45;
      v47 = v45 + a2[2];
      v48 = v46 + v47;
      v49 = v47 + a2[3];
      v50 = v48 + v49;
      v51 = v49 + a2[4];
      v52 = v50 + v51;
      v53 = v51 + a2[5];
      v54 = v52 + v53;
      v55 = v53 + a2[6];
      v56 = v54 + v55;
      v57 = v55 + a2[7];
      v58 = v56 + v57;
      v59 = v57 + a2[8];
      v60 = v58 + v59;
      v61 = v59 + a2[9];
      v62 = v60 + v61;
      v63 = v61 + a2[10];
      v64 = v62 + v63;
      v65 = v63 + a2[11];
      v66 = v64 + v65;
      v67 = v65 + a2[12];
      v68 = v66 + v67;
      v69 = v67 + a2[13];
      v70 = v68 + v69;
      v71 = v69 + a2[14];
      v72 = v70 + v71;
      v4 = v71 + a2[15];
      v3 = v72 + v4;
      a2 += 16;
    }
    while (a3 > 0xF);
    if (a3)
    {
LABEL_30:
      do
      {
        v73 = *a2++;
        v4 += v73;
        v3 += v4;
        --a3;
      }
      while (a3);
    }
    v4 %= 0xFFF1uLL;
    v3 %= 0xFFF1uLL;
    return v4 | (v3 << 16);
  }
  v5 = (unsigned __int16)a1 + (unint64_t)*a2;
  if (v5 > 0xFFF0)
    v5 -= 65521;
  v6 = v5 + HIWORD(a1);
  if (v6 <= 0xFFF0)
    v7 = v6 << 16;
  else
    v7 = (v6 << 16) - 4293984256u;
  return v7 | v5;
}

uint64_t sub_1D4BA5980(int a1, unsigned __int8 *a2, unsigned int a3)
{
  return sub_1D4BA5654(a1, a2, a3);
}

uint64_t sub_1D4BA5988(int a1, char *a2, unint64_t a3)
{
  unint64_t v3;
  _BYTE *v4;
  char v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  uint64_t i;
  unint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char v41;

  if (!a2)
    return 0;
  v3 = ~a1;
  if (a3 >= 0x2F)
  {
    if ((a2 & 7) != 0)
    {
      v4 = a2 + 1;
      do
      {
        v5 = *a2++;
        v3 = dword_1D4BD9A28[(v5 ^ v3)] ^ (v3 >> 8);
        if (!--a3)
          break;
      }
      while ((unint64_t)(v4++ & 7));
    }
    v7 = a3 / 0x28;
    a3 %= 0x28uLL;
    v8 = v3;
    v9 = v7 - 1;
    if (v7 == 1)
    {
      v13 = 0;
      v12 = 0;
      v11 = 0;
      v10 = 0;
    }
    else
    {
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 40 * v7 - 40;
      v15 = a2;
      do
      {
        v16 = *(_QWORD *)v15 ^ v8;
        v17 = *((_QWORD *)v15 + 1) ^ v13;
        v18 = *((_QWORD *)v15 + 2) ^ v12;
        v19 = *((_QWORD *)v15 + 3) ^ v11;
        v8 = dword_1D4BD9E28[(*v15 ^ v8)];
        v13 = dword_1D4BD9E28[(v15[8] ^ v13)];
        v12 = dword_1D4BD9E28[(v15[16] ^ v12)];
        v11 = dword_1D4BD9E28[(v15[24] ^ v11)];
        v20 = *((_QWORD *)v15 + 4) ^ v10;
        v10 = dword_1D4BD9E28[(v15[32] ^ v10)];
        v21 = &dword_1D4BD9E28[256];
        for (i = 8; i != 64; i += 8)
        {
          v8 ^= v21[(v16 >> i)];
          v13 ^= v21[(v17 >> i)];
          v12 ^= v21[(v18 >> i)];
          v11 ^= v21[(v19 >> i)];
          v10 ^= v21[(v20 >> i)];
          v21 += 256;
        }
        v15 += 40;
        --v9;
      }
      while (v9);
      a2 += v14;
    }
    v24 = *(_QWORD *)a2 ^ v8;
    v25 = 8;
    do
    {
      v24 = dword_1D4BD9A28[v24] ^ (v24 >> 8);
      --v25;
    }
    while (v25);
    v26 = v24 ^ v13 ^ *((_QWORD *)a2 + 1);
    v27 = 8;
    do
    {
      v26 = dword_1D4BD9A28[v26] ^ (v26 >> 8);
      --v27;
    }
    while (v27);
    v28 = v26 ^ v12 ^ *((_QWORD *)a2 + 2);
    v29 = 8;
    do
    {
      v28 = dword_1D4BD9A28[v28] ^ (v28 >> 8);
      --v29;
    }
    while (v29);
    v30 = v28 ^ v11 ^ *((_QWORD *)a2 + 3);
    v31 = 8;
    do
    {
      v30 = dword_1D4BD9A28[v30] ^ (v30 >> 8);
      --v31;
    }
    while (v31);
    v3 = v30 ^ v10 ^ *((_QWORD *)a2 + 4);
    v32 = 8;
    do
    {
      v3 = dword_1D4BD9A28[v3] ^ (v3 >> 8);
      --v32;
    }
    while (v32);
    a2 += 40;
    v3 = v3;
  }
  if (a3 >= 8)
  {
    do
    {
      a3 -= 8;
      v33 = dword_1D4BD9A28[(*a2 ^ v3)] ^ (v3 >> 8);
      v34 = dword_1D4BD9A28[(a2[1] ^ v33)] ^ (v33 >> 8);
      v35 = dword_1D4BD9A28[(a2[2] ^ v34)] ^ (v34 >> 8);
      v36 = dword_1D4BD9A28[(a2[3] ^ v35)] ^ (v35 >> 8);
      v37 = dword_1D4BD9A28[(a2[4] ^ v36)] ^ (v36 >> 8);
      v38 = dword_1D4BD9A28[(a2[5] ^ v37)] ^ (v37 >> 8);
      v39 = dword_1D4BD9A28[(a2[6] ^ v38)] ^ (v38 >> 8);
      v40 = a2 + 8;
      v3 = dword_1D4BD9A28[(a2[7] ^ v39)] ^ (v39 >> 8);
      a2 += 8;
    }
    while (a3 > 7);
    a2 = v40;
  }
  for (; a3; --a3)
  {
    v41 = *a2++;
    v3 = dword_1D4BD9A28[(v41 ^ v3)] ^ (v3 >> 8);
  }
  return v3 ^ 0xFFFFFFFF;
}

uint64_t sub_1D4BA5CCC(int a1, char *a2, unsigned int a3)
{
  return sub_1D4BA5988(a1, a2, a3);
}

uint64_t sub_1D4BA5CD4(_QWORD *a1, unsigned int a2, int a3, unsigned int a4, int a5, unsigned int a6, _BYTE *a7, int a8)
{
  uint64_t result;
  unsigned int v12;
  void *(*v13)(uint64_t, int, int);
  unsigned int v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  if (!a7)
    return 4294967290;
  result = 4294967290;
  if (a8 != 112 || *a7 != 49)
    return result;
  if (!a1)
    return 4294967294;
  v12 = a4;
  a1[6] = 0;
  v13 = (void *(*)(uint64_t, int, int))a1[8];
  if (!v13)
  {
    v13 = sub_1D4BAC478;
    a1[8] = sub_1D4BAC478;
    a1[10] = 0;
  }
  if (!a1[9])
    a1[9] = sub_1D4BAC480;
  if (a2 == -1)
    v14 = 6;
  else
    v14 = a2;
  if ((a4 & 0x80000000) == 0)
  {
    if (a4 < 0x10)
    {
      v16 = 0;
      v15 = 1;
    }
    else
    {
      v15 = 2;
      v16 = 1;
      v12 = a4 - 16;
    }
    goto LABEL_20;
  }
  if (a4 < 0xFFFFFFF1)
    return 4294967294;
  v15 = 0;
  v12 = -a4;
  v16 = 1;
LABEL_20:
  result = 4294967294;
  if (a6 <= 4 && v14 <= 9 && a3 == 8 && (a5 - 10) >= 0xFFFFFFF7 && v12 >= 8 && v12 <= 0xF)
  {
    if (v12 != 8)
      v16 = 0;
    if ((v16 & 1) == 0)
    {
      v17 = (uint64_t)v13(a1[10], 1, 5952);
      if (v17)
      {
        v18 = v17;
        if (v12 == 8)
          v19 = 9;
        else
          v19 = v12;
        a1[7] = v17;
        *(_QWORD *)v17 = a1;
        *(_DWORD *)(v17 + 8) = 42;
        *(_DWORD *)(v17 + 48) = v15;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 80) = 1 << v19;
        *(_DWORD *)(v17 + 84) = v19;
        *(_DWORD *)(v17 + 88) = (1 << v19) - 1;
        *(_DWORD *)(v17 + 132) = 128 << a5;
        *(_DWORD *)(v17 + 136) = a5 + 7;
        *(_DWORD *)(v17 + 140) = (128 << a5) - 1;
        *(_DWORD *)(v17 + 144) = (a5 + 9) / 3u;
        *(_QWORD *)(v17 + 96) = ((uint64_t (*)(_QWORD))a1[8])(a1[10]);
        *(_QWORD *)(v18 + 112) = ((uint64_t (*)(_QWORD, _QWORD, uint64_t))a1[8])(a1[10], *(unsigned int *)(v18 + 80), 2);
        *(_QWORD *)(v18 + 120) = ((uint64_t (*)(_QWORD, _QWORD, uint64_t))a1[8])(a1[10], *(unsigned int *)(v18 + 132), 2);
        *(_QWORD *)(v18 + 5944) = 0;
        *(_DWORD *)(v18 + 5896) = 64 << a5;
        v20 = ((uint64_t (*)(_QWORD))a1[8])(a1[10]);
        v21 = *(unsigned int *)(v18 + 5896);
        *(_QWORD *)(v18 + 16) = v20;
        *(_QWORD *)(v18 + 24) = 4 * v21;
        if (*(_QWORD *)(v18 + 96) && *(_QWORD *)(v18 + 112) && *(_QWORD *)(v18 + 120) && v20)
        {
          *(_QWORD *)(v18 + 5888) = v20 + v21;
          *(_DWORD *)(v18 + 5904) = 3 * v21 - 3;
          *(_DWORD *)(v18 + 196) = v14;
          *(_DWORD *)(v18 + 200) = a6;
          *(_BYTE *)(v18 + 72) = 8;
          return sub_1D4BA6014((uint64_t)a1);
        }
        *(_DWORD *)(v18 + 8) = 666;
        a1[6] = "insufficient memory";
        sub_1D4BA5F68((uint64_t)a1);
      }
      return 4294967292;
    }
  }
  return result;
}

uint64_t sub_1D4BA5F68(uint64_t a1)
{
  uint64_t v3;
  int v4;

  if (sub_1D4BA60B4((_QWORD *)a1))
    return 4294967294;
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_DWORD *)(v3 + 8);
  if (*(_QWORD *)(v3 + 16))
  {
    (*(void (**)(_QWORD, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 80), *(_QWORD *)(v3 + 16));
    v3 = *(_QWORD *)(a1 + 56);
  }
  if (*(_QWORD *)(v3 + 120))
  {
    (*(void (**)(_QWORD, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 80), *(_QWORD *)(v3 + 120));
    v3 = *(_QWORD *)(a1 + 56);
  }
  if (*(_QWORD *)(v3 + 112))
  {
    (*(void (**)(_QWORD, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 80), *(_QWORD *)(v3 + 112));
    v3 = *(_QWORD *)(a1 + 56);
  }
  if (*(_QWORD *)(v3 + 96))
  {
    (*(void (**)(_QWORD, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 80), *(_QWORD *)(v3 + 96));
    v3 = *(_QWORD *)(a1 + 56);
  }
  (*(void (**)(_QWORD, uint64_t))(a1 + 72))(*(_QWORD *)(a1 + 80), v3);
  *(_QWORD *)(a1 + 56) = 0;
  if (v4 == 113)
    return 4294967293;
  else
    return 0;
}

uint64_t sub_1D4BA6014(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  size_t v5;
  unsigned __int16 *v6;
  int v7;
  int v8;

  v2 = sub_1D4BA636C(a1);
  if (!(_DWORD)v2)
  {
    v3 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(v3 + 104) = 2 * *(unsigned int *)(v3 + 80);
    v4 = *(char **)(v3 + 120);
    v5 = 2 * (*(_DWORD *)(v3 + 132) - 1);
    *(_WORD *)&v4[v5] = 0;
    bzero(v4, v5);
    v6 = (unsigned __int16 *)((char *)&unk_1E984B0E0 + 16 * *(int *)(v3 + 196));
    v7 = v6[2];
    *(_DWORD *)(v3 + 204) = *v6;
    *(_DWORD *)(v3 + 208) = v7;
    v8 = v6[1];
    *(_DWORD *)(v3 + 188) = v6[3];
    *(_DWORD *)(v3 + 192) = v8;
    *(_QWORD *)(v3 + 152) = 0;
    *(_DWORD *)(v3 + 5932) = 0;
    *(_QWORD *)(v3 + 180) = 0x200000000;
    *(_DWORD *)(v3 + 160) = 2;
    *(_QWORD *)(v3 + 168) = 0;
    *(_DWORD *)(v3 + 128) = 0;
  }
  return v2;
}

BOOL sub_1D4BA60B4(_QWORD *a1)
{
  uint64_t v1;
  _BOOL8 result;
  int v3;
  BOOL v4;

  result = 1;
  if (a1)
  {
    if (a1[8])
    {
      if (a1[9])
      {
        v1 = a1[7];
        if (v1)
        {
          if (*(_QWORD **)v1 == a1)
          {
            v3 = *(_DWORD *)(v1 + 8);
            v4 = (v3 - 57) > 0x38 || ((1 << (v3 - 57)) & 0x100400400011001) == 0;
            if (!v4 || v3 == 666 || v3 == 42)
              return 0;
          }
        }
      }
    }
  }
  return result;
}

void sub_1D4BA6130(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  int32x2_t v4;
  unsigned int v5;
  unsigned int v6;
  int32x2_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  unsigned int v11;
  BOOL v12;
  __int16 v13;
  _WORD *v14;
  int v15;
  unsigned int v16;
  __int16 v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  size_t v30;
  unint64_t v31;

  v2 = *(unsigned int *)(a1 + 80);
  v3 = *(_DWORD *)(a1 + 180);
  v4 = vdup_n_s32(v2);
  do
  {
    v5 = *(_DWORD *)(a1 + 172);
    v6 = *(_DWORD *)(a1 + 104) - (v3 + v5);
    if (v5 >= (int)v2 - 262 + *(_DWORD *)(a1 + 80))
    {
      memcpy(*(void **)(a1 + 96), (const void *)(*(_QWORD *)(a1 + 96) + v2), v2 - v6);
      v7 = vsub_s32(*(int32x2_t *)(a1 + 172), v4);
      *(int32x2_t *)(a1 + 172) = v7;
      *(_QWORD *)(a1 + 152) -= v2;
      v5 = v7.i32[0];
      if (*(_DWORD *)(a1 + 5932) > v7.i32[0])
        *(_DWORD *)(a1 + 5932) = v7.i32[0];
      v8 = *(unsigned int *)(a1 + 80);
      v9 = *(unsigned int *)(a1 + 132);
      v10 = (_WORD *)(*(_QWORD *)(a1 + 120) + 2 * v9 - 2);
      do
      {
        v11 = (unsigned __int16)*v10;
        v12 = v11 >= v8;
        v13 = v11 - v8;
        if (!v12)
          v13 = 0;
        *v10-- = v13;
        LODWORD(v9) = v9 - 1;
      }
      while ((_DWORD)v9);
      v14 = (_WORD *)(*(_QWORD *)(a1 + 112) + 2 * v8 - 2);
      v15 = v8;
      do
      {
        v16 = (unsigned __int16)*v14;
        v12 = v16 >= v8;
        v17 = v16 - v8;
        if (!v12)
          v17 = 0;
        *v14-- = v17;
        --v15;
      }
      while (v15);
      v6 += v2;
    }
    if (!*(_DWORD *)(*(_QWORD *)a1 + 8))
      break;
    v3 = *(_DWORD *)(a1 + 180)
       + sub_1D4BA8534(*(_QWORD *)a1, (void *)(*(_QWORD *)(a1 + 96) + v5 + *(unsigned int *)(a1 + 180)), v6);
    *(_DWORD *)(a1 + 180) = v3;
    v18 = *(_DWORD *)(a1 + 5932);
    if (v18 + v3 >= 3)
    {
      v19 = *(_DWORD *)(a1 + 172) - v18;
      v20 = *(_QWORD *)(a1 + 96);
      v21 = *(unsigned __int8 *)(v20 + v19);
      *(_DWORD *)(a1 + 128) = v21;
      v23 = *(_DWORD *)(a1 + 140);
      v22 = *(_DWORD *)(a1 + 144);
      v24 = ((v21 << v22) ^ *(unsigned __int8 *)(v20 + v19 + 1)) & v23;
      *(_DWORD *)(a1 + 128) = v24;
      do
      {
        if (!v18)
          break;
        v24 = ((v24 << v22) ^ *(unsigned __int8 *)(v20 + v19 + 2)) & v23;
        v25 = *(_QWORD *)(a1 + 120);
        *(_WORD *)(*(_QWORD *)(a1 + 112) + 2 * (*(_DWORD *)(a1 + 88) & v19)) = *(_WORD *)(v25 + 2 * v24);
        *(_WORD *)(v25 + 2 * v24) = v19;
        *(_DWORD *)(a1 + 128) = v24;
        ++v19;
        *(_DWORD *)(a1 + 5932) = --v18;
      }
      while (v3 + v18 > 2);
    }
  }
  while (v3 <= 0x105 && *(_DWORD *)(*(_QWORD *)a1 + 8));
  v26 = *(_QWORD *)(a1 + 5944);
  v27 = *(_QWORD *)(a1 + 104);
  if (v27 > v26)
  {
    v28 = *(unsigned int *)(a1 + 180) + (unint64_t)*(unsigned int *)(a1 + 172);
    if (v26 >= v28)
    {
      if (v28 + 258 <= v26)
        return;
      if (v28 + 258 - v26 >= v27 - v26)
        v31 = v27 - v26;
      else
        v31 = v28 + 258 - v26;
      bzero((void *)(*(_QWORD *)(a1 + 96) + v26), v31);
      v30 = *(_QWORD *)(a1 + 5944) + v31;
    }
    else
    {
      if (v27 - v28 >= 0x102)
        v29 = 258;
      else
        v29 = v27 - v28;
      bzero((void *)(*(_QWORD *)(a1 + 96) + v28), v29);
      v30 = v29 + v28;
    }
    *(_QWORD *)(a1 + 5944) = v30;
  }
}

uint64_t sub_1D4BA636C(uint64_t a1)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  int v6;
  uint64_t v7;

  if (sub_1D4BA60B4((_QWORD *)a1))
    return 4294967294;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 88) = 2;
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 40) = 0;
  v4 = *(_DWORD *)(v3 + 48);
  if (v4 < 0)
  {
    v4 = -v4;
    *(_DWORD *)(v3 + 48) = v4;
  }
  v5 = v4 == 2;
  if (v4 == 2)
    v6 = 57;
  else
    v6 = 42;
  *(_DWORD *)(v3 + 8) = v6;
  if (v5)
    v7 = sub_1D4BA5CCC(0, 0, 0);
  else
    v7 = sub_1D4BA5980(0, 0, 0);
  *(_QWORD *)(a1 + 96) = v7;
  *(_DWORD *)(v3 + 76) = -2;
  sub_1D4BAAC74(v3);
  return 0;
}

uint64_t sub_1D4BA640C(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  char v67;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  size_t v91;
  size_t v92;
  int v93;
  size_t v94;
  unint64_t v95;
  BOOL v96;
  size_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  BOOL v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  char *v123;
  size_t v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;

  v4 = sub_1D4BA60B4((_QWORD *)a1);
  result = 4294967294;
  if (a2 > 5 || v4)
    return result;
  if (!*(_QWORD *)(a1 + 24)
    || (v6 = *(_QWORD *)(a1 + 56), (v7 = *(_DWORD *)(a1 + 8)) != 0) && !*(_QWORD *)a1
    || (v8 = *(_DWORD *)(v6 + 8), (_DWORD)a2 != 4) && v8 == 666)
  {
    *(_QWORD *)(a1 + 48) = "stream error";
    return result;
  }
  if (!*(_DWORD *)(a1 + 32))
    goto LABEL_30;
  v9 = *(_DWORD *)(v6 + 76);
  *(_DWORD *)(v6 + 76) = a2;
  if (*(_QWORD *)(v6 + 40))
  {
    sub_1D4BA6F94(a1);
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_160;
    v8 = *(_DWORD *)(v6 + 8);
  }
  else if (!v7)
  {
    v11 = v9 <= 4 ? 0 : -9;
    v12 = a2 <= 4 ? 0 : -9;
    if ((_DWORD)a2 != 4 && v12 + 2 * (int)a2 <= v11 + 2 * v9)
      goto LABEL_30;
  }
  switch(v8)
  {
    case 42:
      if (!*(_DWORD *)(v6 + 48))
      {
        *(_DWORD *)(v6 + 8) = 113;
        goto LABEL_133;
      }
      if (*(int *)(v6 + 200) <= 1)
      {
        v13 = *(_DWORD *)(v6 + 196);
        if (v13 == 6)
          v14 = 128;
        else
          v14 = 192;
        if (v13 >= 6)
          v15 = v14;
        else
          v15 = 64;
        if (v13 >= 2)
          v10 = v15;
        else
          v10 = 0;
      }
      else
      {
        v10 = 0;
      }
      v16 = v10 | ((*(_DWORD *)(v6 + 84) << 12) - 30720);
      if (*(_DWORD *)(v6 + 172))
        v16 |= 0x20u;
      v17 = *(_QWORD *)(v6 + 16);
      v18 = *(_QWORD *)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v18 + 1;
      *(_BYTE *)(v17 + v18) = BYTE1(v16);
      v19 = *(_QWORD *)(v6 + 16);
      v20 = *(_QWORD *)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v20 + 1;
      *(_BYTE *)(v19 + v20) = ((v16 % 0x1F) | v16) ^ 0x1F;
      if (*(_DWORD *)(v6 + 172))
      {
        v21 = *(_QWORD *)(a1 + 96);
        v22 = v21 >> 16;
        v23 = *(_QWORD *)(v6 + 16);
        v24 = *(_QWORD *)(v6 + 40);
        *(_QWORD *)(v6 + 40) = v24 + 1;
        *(_BYTE *)(v23 + v24) = BYTE3(v21);
        v25 = *(_QWORD *)(v6 + 16);
        v26 = *(_QWORD *)(v6 + 40);
        *(_QWORD *)(v6 + 40) = v26 + 1;
        *(_BYTE *)(v25 + v26) = v22;
        v27 = *(_QWORD *)(a1 + 96);
        v28 = *(_QWORD *)(v6 + 16);
        v29 = *(_QWORD *)(v6 + 40);
        *(_QWORD *)(v6 + 40) = v29 + 1;
        *(_BYTE *)(v28 + v29) = BYTE1(v27);
        v30 = *(_QWORD *)(v6 + 16);
        v31 = *(_QWORD *)(v6 + 40);
        *(_QWORD *)(v6 + 40) = v31 + 1;
        *(_BYTE *)(v30 + v31) = v27;
      }
      *(_QWORD *)(a1 + 96) = sub_1D4BA5980(0, 0, 0);
      *(_DWORD *)(v6 + 8) = 113;
      sub_1D4BA6F94(a1);
      if (*(_QWORD *)(v6 + 40))
        goto LABEL_160;
      v8 = *(_DWORD *)(v6 + 8);
      break;
    case 666:
      if (!*(_DWORD *)(a1 + 8))
        goto LABEL_134;
LABEL_30:
      *(_QWORD *)(a1 + 48) = "buffer error";
      return 4294967291;
    case 57:
      *(_QWORD *)(a1 + 96) = sub_1D4BA5CCC(0, 0, 0);
      v32 = *(_QWORD *)(v6 + 16);
      v33 = *(_QWORD *)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v33 + 1;
      *(_BYTE *)(v32 + v33) = 31;
      v34 = *(_QWORD *)(v6 + 16);
      v35 = *(_QWORD *)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v35 + 1;
      *(_BYTE *)(v34 + v35) = -117;
      v36 = *(_QWORD *)(v6 + 16);
      v37 = *(_QWORD *)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v37 + 1;
      *(_BYTE *)(v36 + v37) = 8;
      v38 = *(_QWORD *)(v6 + 56);
      if (v38)
      {
        v39 = (*(_DWORD *)v38 != 0) | (2 * (*(_DWORD *)(v38 + 68) != 0)) | (4 * (*(_QWORD *)(v38 + 24) != 0)) | (8 * (*(_QWORD *)(v38 + 40) != 0)) | (16 * (*(_QWORD *)(v38 + 56) != 0));
        v40 = *(_QWORD *)(v6 + 16);
        v41 = *(_QWORD *)(v6 + 40);
        *(_QWORD *)(v6 + 40) = v41 + 1;
        *(_BYTE *)(v40 + v41) = v39;
        v42 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8);
        v43 = *(_QWORD *)(v6 + 16);
        v44 = *(_QWORD *)(v6 + 40);
        *(_QWORD *)(v6 + 40) = v44 + 1;
        *(_BYTE *)(v43 + v44) = v42;
        v45 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8) >> 8;
        v46 = *(_QWORD *)(v6 + 16);
        v47 = *(_QWORD *)(v6 + 40);
        *(_QWORD *)(v6 + 40) = v47 + 1;
        *(_BYTE *)(v46 + v47) = v45;
        v48 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8) >> 16;
        v49 = *(_QWORD *)(v6 + 16);
        v50 = *(_QWORD *)(v6 + 40);
        *(_QWORD *)(v6 + 40) = v50 + 1;
        *(_BYTE *)(v49 + v50) = v48;
        v51 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8) >> 24;
        v52 = *(_QWORD *)(v6 + 16);
        v53 = *(_QWORD *)(v6 + 40);
        *(_QWORD *)(v6 + 40) = v53 + 1;
        *(_BYTE *)(v52 + v53) = v51;
        v54 = *(_DWORD *)(v6 + 196);
        if (v54 == 9)
        {
          v55 = 2;
        }
        else if (*(int *)(v6 + 200) > 1 || v54 < 2)
        {
          v55 = 4;
        }
        else
        {
          v55 = 0;
        }
        v69 = *(_QWORD *)(v6 + 16);
        v70 = *(_QWORD *)(v6 + 40);
        *(_QWORD *)(v6 + 40) = v70 + 1;
        *(_BYTE *)(v69 + v70) = v55;
        v71 = *(_DWORD *)(*(_QWORD *)(v6 + 56) + 20);
        v72 = *(_QWORD *)(v6 + 16);
        v73 = *(_QWORD *)(v6 + 40);
        *(_QWORD *)(v6 + 40) = v73 + 1;
        *(_BYTE *)(v72 + v73) = v71;
        v74 = *(_QWORD *)(v6 + 56);
        if (*(_QWORD *)(v74 + 24))
        {
          v75 = *(_DWORD *)(v74 + 32);
          v76 = *(_QWORD *)(v6 + 16);
          v77 = *(_QWORD *)(v6 + 40);
          *(_QWORD *)(v6 + 40) = v77 + 1;
          *(_BYTE *)(v76 + v77) = v75;
          v78 = *(_DWORD *)(*(_QWORD *)(v6 + 56) + 32) >> 8;
          v79 = *(_QWORD *)(v6 + 16);
          v80 = *(_QWORD *)(v6 + 40);
          *(_QWORD *)(v6 + 40) = v80 + 1;
          *(_BYTE *)(v79 + v80) = v78;
          v74 = *(_QWORD *)(v6 + 56);
        }
        if (*(_DWORD *)(v74 + 68))
          *(_QWORD *)(a1 + 96) = sub_1D4BA5CCC(*(_QWORD *)(a1 + 96), *(char **)(v6 + 16), *(_DWORD *)(v6 + 40));
        *(_QWORD *)(v6 + 64) = 0;
        *(_DWORD *)(v6 + 8) = 69;
        goto LABEL_76;
      }
      v56 = *(_QWORD *)(v6 + 16);
      v57 = *(_QWORD *)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v57 + 1;
      *(_BYTE *)(v56 + v57) = 0;
      v58 = *(_QWORD *)(v6 + 16);
      v59 = *(_QWORD *)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v59 + 1;
      *(_BYTE *)(v58 + v59) = 0;
      v60 = *(_QWORD *)(v6 + 16);
      v61 = *(_QWORD *)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v61 + 1;
      *(_BYTE *)(v60 + v61) = 0;
      v62 = *(_QWORD *)(v6 + 16);
      v63 = *(_QWORD *)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v63 + 1;
      *(_BYTE *)(v62 + v63) = 0;
      v64 = *(_QWORD *)(v6 + 16);
      v65 = *(_QWORD *)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v65 + 1;
      *(_BYTE *)(v64 + v65) = 0;
      v66 = *(_DWORD *)(v6 + 196);
      if (v66 == 9)
      {
        v67 = 2;
      }
      else if (*(int *)(v6 + 200) > 1 || v66 < 2)
      {
        v67 = 4;
      }
      else
      {
        v67 = 0;
      }
      v82 = *(_QWORD *)(v6 + 16);
      v83 = *(_QWORD *)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v83 + 1;
      *(_BYTE *)(v82 + v83) = v67;
      v84 = *(_QWORD *)(v6 + 16);
      v85 = *(_QWORD *)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v85 + 1;
      *(_BYTE *)(v84 + v85) = 19;
      *(_DWORD *)(v6 + 8) = 113;
      sub_1D4BA6F94(a1);
      if (*(_QWORD *)(v6 + 40))
        goto LABEL_160;
      v8 = *(_DWORD *)(v6 + 8);
      break;
  }
  if (v8 <= 90)
  {
    if (v8 != 69)
    {
      if (v8 != 73)
        goto LABEL_133;
      goto LABEL_92;
    }
LABEL_76:
    v86 = *(_QWORD *)(v6 + 56);
    v87 = *(_QWORD *)(v86 + 24);
    if (v87)
    {
      v88 = *(_QWORD *)(v6 + 40);
      v89 = *(unsigned __int16 *)(v86 + 32);
      v90 = *(_QWORD *)(v6 + 64);
      v91 = (v89 - v90);
      v92 = *(_QWORD *)(v6 + 24);
      if (v88 + v91 > v92)
      {
        while (1)
        {
          v93 = v92 - v88;
          v94 = (v92 - v88);
          memcpy((void *)(*(_QWORD *)(v6 + 16) + v88), (const void *)(*(_QWORD *)(*(_QWORD *)(v6 + 56) + 24) + *(_QWORD *)(v6 + 64)), v94);
          v95 = *(_QWORD *)(v6 + 24);
          *(_QWORD *)(v6 + 40) = v95;
          if (*(_DWORD *)(*(_QWORD *)(v6 + 56) + 68))
            v96 = v95 > v88;
          else
            v96 = 0;
          if (v96)
            *(_QWORD *)(a1 + 96) = sub_1D4BA5CCC(*(_QWORD *)(a1 + 96), (char *)(*(_QWORD *)(v6 + 16) + v88), (int)v95 - (int)v88);
          *(_QWORD *)(v6 + 64) += v94;
          sub_1D4BA6F94(a1);
          if (*(_QWORD *)(v6 + 40))
            goto LABEL_160;
          v88 = 0;
          v91 = (v91 - v93);
          v92 = *(_QWORD *)(v6 + 24);
          if (v92 >= v91)
          {
            v88 = 0;
            v90 = *(_QWORD *)(v6 + 64);
            v87 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 24);
            break;
          }
        }
      }
      memcpy((void *)(*(_QWORD *)(v6 + 16) + v88), (const void *)(v87 + v90), v91);
      v97 = *(_QWORD *)(v6 + 40) + v91;
      *(_QWORD *)(v6 + 40) = v97;
      if (*(_DWORD *)(*(_QWORD *)(v6 + 56) + 68) && v97 > v88)
        *(_QWORD *)(a1 + 96) = sub_1D4BA5CCC(*(_QWORD *)(a1 + 96), (char *)(*(_QWORD *)(v6 + 16) + v88), (int)v97 - (int)v88);
      *(_QWORD *)(v6 + 64) = 0;
    }
    *(_DWORD *)(v6 + 8) = 73;
LABEL_92:
    if (*(_QWORD *)(*(_QWORD *)(v6 + 56) + 40))
    {
      v98 = *(_QWORD *)(v6 + 40);
      do
      {
        v99 = *(_QWORD *)(v6 + 40);
        v100 = *(_QWORD *)(v6 + 56);
        if (v99 == *(_QWORD *)(v6 + 24))
        {
          if (*(_DWORD *)(v100 + 68))
            v101 = v99 > v98;
          else
            v101 = 0;
          if (v101)
            *(_QWORD *)(a1 + 96) = sub_1D4BA5CCC(*(_QWORD *)(a1 + 96), (char *)(*(_QWORD *)(v6 + 16) + v98), (int)v99 - (int)v98);
          sub_1D4BA6F94(a1);
          v98 = *(_QWORD *)(v6 + 40);
          if (v98)
            goto LABEL_160;
          v99 = 0;
          v100 = *(_QWORD *)(v6 + 56);
        }
        v102 = *(_QWORD *)(v100 + 40);
        v103 = *(_QWORD *)(v6 + 64);
        *(_QWORD *)(v6 + 64) = v103 + 1;
        LODWORD(v102) = *(unsigned __int8 *)(v102 + v103);
        v104 = *(_QWORD *)(v6 + 16);
        *(_QWORD *)(v6 + 40) = v99 + 1;
        *(_BYTE *)(v104 + v99) = v102;
      }
      while ((_DWORD)v102);
      if (*(_DWORD *)(*(_QWORD *)(v6 + 56) + 68))
      {
        v105 = *(_QWORD *)(v6 + 40);
        if (v105 > v98)
          *(_QWORD *)(a1 + 96) = sub_1D4BA5CCC(*(_QWORD *)(a1 + 96), (char *)(*(_QWORD *)(v6 + 16) + v98), (int)v105 - (int)v98);
      }
      *(_QWORD *)(v6 + 64) = 0;
    }
    *(_DWORD *)(v6 + 8) = 91;
    goto LABEL_112;
  }
  if (v8 != 91)
  {
    if (v8 != 103)
      goto LABEL_133;
    goto LABEL_128;
  }
LABEL_112:
  if (*(_QWORD *)(*(_QWORD *)(v6 + 56) + 56))
  {
    v106 = *(_QWORD *)(v6 + 40);
    do
    {
      v107 = *(_QWORD *)(v6 + 40);
      v108 = *(_QWORD *)(v6 + 56);
      if (v107 == *(_QWORD *)(v6 + 24))
      {
        if (*(_DWORD *)(v108 + 68))
          v109 = v107 > v106;
        else
          v109 = 0;
        if (v109)
          *(_QWORD *)(a1 + 96) = sub_1D4BA5CCC(*(_QWORD *)(a1 + 96), (char *)(*(_QWORD *)(v6 + 16) + v106), (int)v107 - (int)v106);
        sub_1D4BA6F94(a1);
        v106 = *(_QWORD *)(v6 + 40);
        if (v106)
          goto LABEL_160;
        v107 = 0;
        v108 = *(_QWORD *)(v6 + 56);
      }
      v110 = *(_QWORD *)(v108 + 56);
      v111 = *(_QWORD *)(v6 + 64);
      *(_QWORD *)(v6 + 64) = v111 + 1;
      LODWORD(v110) = *(unsigned __int8 *)(v110 + v111);
      v112 = *(_QWORD *)(v6 + 16);
      *(_QWORD *)(v6 + 40) = v107 + 1;
      *(_BYTE *)(v112 + v107) = v110;
    }
    while ((_DWORD)v110);
    if (*(_DWORD *)(*(_QWORD *)(v6 + 56) + 68))
    {
      v113 = *(_QWORD *)(v6 + 40);
      if (v113 > v106)
        *(_QWORD *)(a1 + 96) = sub_1D4BA5CCC(*(_QWORD *)(a1 + 96), (char *)(*(_QWORD *)(v6 + 16) + v106), (int)v113 - (int)v106);
    }
  }
  *(_DWORD *)(v6 + 8) = 103;
LABEL_128:
  if (*(_DWORD *)(*(_QWORD *)(v6 + 56) + 68))
  {
    v114 = *(_QWORD *)(v6 + 40);
    if ((unint64_t)(v114 + 2) > *(_QWORD *)(v6 + 24))
    {
      sub_1D4BA6F94(a1);
      v114 = *(_QWORD *)(v6 + 40);
      if (v114)
        goto LABEL_160;
    }
    v115 = *(_QWORD *)(a1 + 96);
    v116 = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v6 + 40) = v114 + 1;
    *(_BYTE *)(v116 + v114) = v115;
    v117 = *(_QWORD *)(a1 + 96) >> 8;
    v118 = *(_QWORD *)(v6 + 16);
    v119 = *(_QWORD *)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v119 + 1;
    *(_BYTE *)(v118 + v119) = v117;
    *(_QWORD *)(a1 + 96) = sub_1D4BA5CCC(0, 0, 0);
  }
  *(_DWORD *)(v6 + 8) = 113;
  sub_1D4BA6F94(a1);
  if (*(_QWORD *)(v6 + 40))
  {
LABEL_160:
    result = 0;
    *(_DWORD *)(v6 + 76) = -1;
    return result;
  }
LABEL_133:
  if (*(_DWORD *)(a1 + 8))
    goto LABEL_135;
LABEL_134:
  if (*(_DWORD *)(v6 + 180))
    goto LABEL_135;
  if (!(_DWORD)a2)
    return 0;
  if (*(_DWORD *)(v6 + 8) != 666)
  {
LABEL_135:
    v120 = *(int *)(v6 + 196);
    if ((_DWORD)v120)
    {
      v121 = *(_DWORD *)(v6 + 200);
      if (v121 == 3)
      {
        v122 = sub_1D4BA76B4(v6, a2);
      }
      else if (v121 == 2)
      {
        v122 = sub_1D4BA74F0(v6, a2);
      }
      else
      {
        v122 = qword_1E984B0E0[2 * v120 + 1](v6, a2);
      }
    }
    else
    {
      v122 = sub_1D4BA7028(v6, a2);
    }
    if ((v122 & 0xFFFFFFFE) == 2)
      *(_DWORD *)(v6 + 8) = 666;
    if ((v122 & 0xFFFFFFFD) != 0)
    {
      if (v122 != 1)
        goto LABEL_158;
      if ((_DWORD)a2 != 5)
      {
        if ((_DWORD)a2 == 1)
        {
          sub_1D4BAAF58(v6);
        }
        else
        {
          sub_1D4BAAD20(v6, 0, 0, 0);
          if ((_DWORD)a2 == 3)
          {
            v123 = *(char **)(v6 + 120);
            v124 = 2 * (*(_DWORD *)(v6 + 132) - 1);
            *(_WORD *)&v123[v124] = 0;
            bzero(v123, v124);
            if (!*(_DWORD *)(v6 + 180))
            {
              *(_DWORD *)(v6 + 172) = 0;
              *(_QWORD *)(v6 + 152) = 0;
              *(_DWORD *)(v6 + 5932) = 0;
            }
          }
        }
      }
      sub_1D4BA6F94(a1);
      if (*(_DWORD *)(a1 + 32))
        goto LABEL_158;
      goto LABEL_160;
    }
    if (!*(_DWORD *)(a1 + 32))
      goto LABEL_160;
    return 0;
  }
LABEL_158:
  if ((_DWORD)a2 != 4)
    return 0;
  v125 = *(_DWORD *)(v6 + 48);
  if (v125 < 1)
    return 1;
  v126 = *(_QWORD *)(a1 + 96);
  if (v125 == 2)
  {
    v127 = *(_QWORD *)(v6 + 16);
    v128 = *(_QWORD *)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v128 + 1;
    *(_BYTE *)(v127 + v128) = v126;
    v129 = *(_QWORD *)(a1 + 96) >> 8;
    v130 = *(_QWORD *)(v6 + 16);
    v131 = *(_QWORD *)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v131 + 1;
    *(_BYTE *)(v130 + v131) = v129;
    v132 = *(_QWORD *)(a1 + 96) >> 16;
    v133 = *(_QWORD *)(v6 + 16);
    v134 = *(_QWORD *)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v134 + 1;
    *(_BYTE *)(v133 + v134) = v132;
    v135 = *(_QWORD *)(a1 + 96) >> 24;
    v136 = *(_QWORD *)(v6 + 16);
    v137 = *(_QWORD *)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v137 + 1;
    *(_BYTE *)(v136 + v137) = v135;
    v138 = *(_QWORD *)(a1 + 16);
    v139 = *(_QWORD *)(v6 + 16);
    v140 = *(_QWORD *)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v140 + 1;
    *(_BYTE *)(v139 + v140) = v138;
    v141 = *(_QWORD *)(a1 + 16) >> 8;
    v142 = *(_QWORD *)(v6 + 16);
    v143 = *(_QWORD *)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v143 + 1;
    *(_BYTE *)(v142 + v143) = v141;
    v144 = *(_QWORD *)(a1 + 16) >> 16;
    v145 = *(_QWORD *)(v6 + 16);
    v146 = *(_QWORD *)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v146 + 1;
    *(_BYTE *)(v145 + v146) = v144;
    v147 = *(_QWORD *)(a1 + 16) >> 24;
  }
  else
  {
    v148 = v126 >> 16;
    v149 = *(_QWORD *)(v6 + 16);
    v150 = *(_QWORD *)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v150 + 1;
    *(_BYTE *)(v149 + v150) = BYTE3(v126);
    v151 = *(_QWORD *)(v6 + 16);
    v152 = *(_QWORD *)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v152 + 1;
    *(_BYTE *)(v151 + v152) = v148;
    v147 = *(_QWORD *)(a1 + 96);
    v153 = *(_QWORD *)(v6 + 16);
    v154 = *(_QWORD *)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v154 + 1;
    *(_BYTE *)(v153 + v154) = BYTE1(v147);
  }
  v155 = *(_QWORD *)(v6 + 16);
  v156 = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v156 + 1;
  *(_BYTE *)(v155 + v156) = v147;
  sub_1D4BA6F94(a1);
  v157 = *(_DWORD *)(v6 + 48);
  if (v157 >= 1)
    *(_DWORD *)(v6 + 48) = -v157;
  return *(_QWORD *)(v6 + 40) == 0;
}

void *sub_1D4BA6F94(uint64_t a1)
{
  uint64_t v2;
  void *result;
  unsigned int v4;
  unsigned int v5;
  size_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 56);
  result = (void *)sub_1D4BAAEC4(v2);
  v4 = *(_DWORD *)(v2 + 40);
  v5 = *(_DWORD *)(a1 + 32);
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  if ((_DWORD)v6)
  {
    result = memcpy(*(void **)(a1 + 24), *(const void **)(v2 + 32), v6);
    *(_QWORD *)(a1 + 24) += v6;
    *(_QWORD *)(a1 + 40) += v6;
    *(_DWORD *)(a1 + 32) -= v6;
    v7 = *(_QWORD *)(v2 + 40) - v6;
    *(_QWORD *)(v2 + 32) += v6;
    *(_QWORD *)(v2 + 40) = v7;
    if (!v7)
      *(_QWORD *)(v2 + 32) = *(_QWORD *)(v2 + 16);
  }
  return result;
}

uint64_t sub_1D4BA7028(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  size_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  BOOL v19;
  int v20;
  BOOL v21;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  size_t v27;
  unint64_t v28;
  unsigned int v29;
  size_t v30;
  uint64_t v31;
  size_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  size_t v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  _BOOL4 v51;
  size_t v52;
  BOOL v53;
  char v54;

  if (*(_QWORD *)(a1 + 24) - 5 >= (unint64_t)*(unsigned int *)(a1 + 80))
    LODWORD(v4) = *(_DWORD *)(a1 + 80);
  else
    v4 = *(_QWORD *)(a1 + 24) - 5;
  v5 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  while (1)
  {
    v6 = *(_DWORD *)(a1 + 5940) + 42;
    v7 = *(_QWORD *)a1;
    v8 = *(_DWORD *)(*(_QWORD *)a1 + 32);
    if (v8 < v6 >> 3)
      break;
    v9 = v8 - (v6 >> 3);
    v10 = *(_DWORD *)(a1 + 172);
    v11 = *(_DWORD *)(a1 + 152);
    v12 = (v10 - v11);
    v13 = *(unsigned int *)(v7 + 8);
    v14 = v12 + v13;
    v15 = v12 + v13;
    if (v14 >= 0xFFFF)
      v16 = 0xFFFF;
    else
      v16 = v15;
    if (v16 >= v9)
      v17 = v9;
    else
      v17 = v16;
    if (v17 < v4)
    {
      v18 = a2 != 4 && v17 == 0;
      v19 = v18;
      v20 = 1;
      v21 = v17 != v15 || a2 == 0;
      if (v21 || v19)
        goto LABEL_40;
    }
    v23 = a2 == 4 && v17 == v15;
    sub_1D4BAAD20(a1, 0, 0, v23);
    *(_WORD *)(*(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 16) - 4) = v17;
    *(_WORD *)(*(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 16) - 2) = ~(_WORD)v17;
    sub_1D4BA6F94(*(_QWORD *)a1);
    if (v10 != v11)
    {
      if (v12 >= v17)
        v12 = v17;
      else
        v12 = v12;
      memcpy(*(void **)(*(_QWORD *)a1 + 24), (const void *)(*(_QWORD *)(a1 + 96) + *(_QWORD *)(a1 + 152)), v12);
      v24 = *(_QWORD *)a1;
      *(_QWORD *)(v24 + 24) = *(_QWORD *)(*(_QWORD *)a1 + 24) + v12;
      *(_DWORD *)(v24 + 32) -= v12;
      *(_QWORD *)(v24 + 40) += v12;
      *(_QWORD *)(a1 + 152) += v12;
      v17 -= v12;
    }
    if (v17)
    {
      sub_1D4BA8534(*(_QWORD *)a1, *(void **)(*(_QWORD *)a1 + 24), v17);
      v25 = *(_QWORD *)a1;
      *(_QWORD *)(v25 + 24) = *(_QWORD *)(*(_QWORD *)a1 + 24) + v17;
      *(_DWORD *)(v25 + 32) -= v17;
      *(_QWORD *)(v25 + 40) += v17;
    }
    if (v23)
    {
      v20 = 0;
      v7 = *(_QWORD *)a1;
      goto LABEL_40;
    }
  }
  v20 = 1;
LABEL_40:
  v26 = *(_DWORD *)(v7 + 8);
  v27 = (v5 - v26);
  if (v5 == v26)
  {
    v28 = *(unsigned int *)(a1 + 172);
    v29 = *(_DWORD *)(a1 + 172);
  }
  else
  {
    v30 = *(unsigned int *)(a1 + 80);
    if (v27 >= v30)
    {
      *(_DWORD *)(a1 + 5928) = 2;
      memcpy(*(void **)(a1 + 96), (const void *)(*(_QWORD *)v7 - v30), v30);
      v29 = *(_DWORD *)(a1 + 80);
      *(_DWORD *)(a1 + 172) = v29;
      *(_DWORD *)(a1 + 5932) = v29;
    }
    else
    {
      v31 = *(unsigned int *)(a1 + 172);
      if (*(_QWORD *)(a1 + 104) - v31 <= (unint64_t)v27)
      {
        v32 = (v31 - v30);
        *(_DWORD *)(a1 + 172) = v32;
        memcpy(*(void **)(a1 + 96), (const void *)(*(_QWORD *)(a1 + 96) + v30), v32);
        v33 = *(_DWORD *)(a1 + 5928);
        if (v33 <= 1)
          *(_DWORD *)(a1 + 5928) = v33 + 1;
        LODWORD(v31) = *(_DWORD *)(a1 + 172);
        if (*(_DWORD *)(a1 + 5932) > v31)
          *(_DWORD *)(a1 + 5932) = v31;
      }
      memcpy((void *)(*(_QWORD *)(a1 + 96) + v31), (const void *)(**(_QWORD **)a1 - v27), v27);
      v29 = *(_DWORD *)(a1 + 172) + v27;
      *(_DWORD *)(a1 + 172) = v29;
      v34 = *(_DWORD *)(a1 + 5932);
      v35 = *(_DWORD *)(a1 + 80) - v34;
      if (v27 < v35)
        v35 = v27;
      *(_DWORD *)(a1 + 5932) = v35 + v34;
    }
    v28 = v29;
    *(_QWORD *)(a1 + 152) = v29;
  }
  if (*(_QWORD *)(a1 + 5944) < v28)
    *(_QWORD *)(a1 + 5944) = v28;
  if (!v20)
    return 3;
  if ((a2 | 4) != 4 && !*(_DWORD *)(*(_QWORD *)a1 + 8) && *(_QWORD *)(a1 + 152) == v28)
    return 1;
  v37 = *(_DWORD *)(a1 + 104) - v29;
  if (*(_DWORD *)(*(_QWORD *)a1 + 8) > v37)
  {
    v38 = *(_QWORD *)(a1 + 152);
    v39 = *(unsigned int *)(a1 + 80);
    v53 = v38 < v39;
    v40 = v38 - v39;
    if (!v53)
    {
      *(_QWORD *)(a1 + 152) = v40;
      v41 = v29 - v39;
      *(_DWORD *)(a1 + 172) = v41;
      memcpy(*(void **)(a1 + 96), (const void *)(*(_QWORD *)(a1 + 96) + v39), v41);
      v42 = *(_DWORD *)(a1 + 5928);
      if (v42 <= 1)
        *(_DWORD *)(a1 + 5928) = v42 + 1;
      v37 += *(_DWORD *)(a1 + 80);
      v29 = *(_DWORD *)(a1 + 172);
      if (*(_DWORD *)(a1 + 5932) > v29)
        *(_DWORD *)(a1 + 5932) = v29;
    }
  }
  if (v37 >= *(_DWORD *)(*(_QWORD *)a1 + 8))
    v37 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  if (v37)
  {
    sub_1D4BA8534(*(_QWORD *)a1, (void *)(*(_QWORD *)(a1 + 96) + v29), v37);
    v29 = *(_DWORD *)(a1 + 172) + v37;
    *(_DWORD *)(a1 + 172) = v29;
    v43 = *(_DWORD *)(a1 + 5932);
    v44 = *(_DWORD *)(a1 + 80) - v43;
    if (v37 < v44)
      v44 = v37;
    *(_DWORD *)(a1 + 5932) = v44 + v43;
  }
  v45 = v29;
  if (*(_QWORD *)(a1 + 5944) < (unint64_t)v29)
    *(_QWORD *)(a1 + 5944) = v29;
  LODWORD(v46) = 0xFFFF;
  if (*(_QWORD *)(a1 + 24) - (unint64_t)((*(_DWORD *)(a1 + 5940) + 42) >> 3) < 0xFFFF)
    v46 = *(_QWORD *)(a1 + 24) - ((*(_DWORD *)(a1 + 5940) + 42) >> 3);
  if (*(_DWORD *)(a1 + 80) >= v46)
    v47 = v46;
  else
    v47 = *(_DWORD *)(a1 + 80);
  v48 = *(_QWORD *)(a1 + 152);
  v49 = v45 - v48;
  if (v45 - v48 >= v47)
    goto LABEL_91;
  v36 = 0;
  v51 = a2 == 4 || v45 != (_DWORD)v48;
  if (a2 && v51)
  {
    if (*(_DWORD *)(*(_QWORD *)a1 + 8))
      return 0;
LABEL_91:
    if (v49 >= v46)
      v52 = v46;
    else
      v52 = v49;
    if (a2 == 4)
    {
      if (*(_DWORD *)(*(_QWORD *)a1 + 8))
        v53 = 1;
      else
        v53 = v49 > v46;
      v54 = !v53;
    }
    else
    {
      v54 = 0;
    }
    if ((v54 & 1) != 0)
      v36 = 2;
    else
      v36 = 0;
    sub_1D4BAAD20(a1, (const void *)(*(_QWORD *)(a1 + 96) + v48), v52, v54 & 1);
    *(_QWORD *)(a1 + 152) += v52;
    sub_1D4BA6F94(*(_QWORD *)a1);
  }
  return v36;
}

uint64_t sub_1D4BA74F0(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  const void *v17;

  while (1)
  {
    if (!*(_DWORD *)(a1 + 180))
    {
      sub_1D4BA6130(a1);
      if (!*(_DWORD *)(a1 + 180))
        break;
    }
    *(_DWORD *)(a1 + 160) = 0;
    v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 96) + *(unsigned int *)(a1 + 172));
    v5 = *(_QWORD *)(a1 + 5888);
    v6 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v6 + 1;
    *(_BYTE *)(v5 + v6) = 0;
    v7 = *(_QWORD *)(a1 + 5888);
    v8 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v8 + 1;
    *(_BYTE *)(v7 + v8) = 0;
    v9 = *(_QWORD *)(a1 + 5888);
    v10 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v10 + 1;
    *(_BYTE *)(v9 + v10) = v4;
    ++*(_WORD *)(a1 + 4 * v4 + 212);
    LODWORD(v9) = *(_DWORD *)(a1 + 5900);
    LODWORD(v10) = *(_DWORD *)(a1 + 5904);
    --*(_DWORD *)(a1 + 180);
    v11 = (*(_DWORD *)(a1 + 172) + 1);
    *(_DWORD *)(a1 + 172) = v11;
    if ((_DWORD)v9 == (_DWORD)v10)
    {
      v12 = *(_QWORD *)(a1 + 152);
      v13 = v12 < 0 ? 0 : (const void *)(*(_QWORD *)(a1 + 96) + v12);
      sub_1D4BAB028(a1, v13, v11 - v12, 0);
      *(_QWORD *)(a1 + 152) = *(unsigned int *)(a1 + 172);
      sub_1D4BA6F94(*(_QWORD *)a1);
      if (!*(_DWORD *)(*(_QWORD *)a1 + 32))
        return 0;
    }
  }
  if (!a2)
    return 0;
  *(_DWORD *)(a1 + 5932) = 0;
  if (a2 != 4)
  {
    if (!*(_DWORD *)(a1 + 5900))
      return 1;
    v16 = *(_QWORD *)(a1 + 152);
    v17 = v16 < 0 ? 0 : (const void *)(*(_QWORD *)(a1 + 96) + v16);
    sub_1D4BAB028(a1, v17, *(unsigned int *)(a1 + 172) - v16, 0);
    *(_QWORD *)(a1 + 152) = *(unsigned int *)(a1 + 172);
    sub_1D4BA6F94(*(_QWORD *)a1);
    return *(_DWORD *)(*(_QWORD *)a1 + 32) != 0;
  }
  v14 = *(_QWORD *)(a1 + 152);
  if (v14 < 0)
    v15 = 0;
  else
    v15 = (const void *)(*(_QWORD *)(a1 + 96) + v14);
  sub_1D4BAB028(a1, v15, *(unsigned int *)(a1 + 172) - v14, 1);
  *(_QWORD *)(a1 + 152) = *(unsigned int *)(a1 + 172);
  sub_1D4BA6F94(*(_QWORD *)a1);
  if (*(_DWORD *)(*(_QWORD *)a1 + 32))
    return 3;
  else
    return 2;
}

uint64_t sub_1D4BA76B4(uint64_t a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  const void *v27;
  unsigned int v28;
  BOOL v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  uint64_t v39;
  const void *v40;

  while (1)
  {
    v4 = *(_DWORD *)(a1 + 180);
    if (v4 >= 0x103)
    {
      *(_DWORD *)(a1 + 160) = 0;
      v5 = *(unsigned int *)(a1 + 172);
      if (!*(_DWORD *)(a1 + 172))
        goto LABEL_23;
      goto LABEL_9;
    }
    sub_1D4BA6130(a1);
    v4 = *(_DWORD *)(a1 + 180);
    if (!a2 && v4 < 0x103)
      return 0;
    if (!v4)
      break;
    *(_DWORD *)(a1 + 160) = 0;
    v5 = *(unsigned int *)(a1 + 172);
    if (v4 < 3 || !*(_DWORD *)(a1 + 172))
    {
LABEL_23:
      LODWORD(v16) = *(_DWORD *)(a1 + 5900);
LABEL_24:
      v17 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 96) + v5);
      v18 = *(_QWORD *)(a1 + 5888);
      *(_DWORD *)(a1 + 5900) = v16 + 1;
      *(_BYTE *)(v18 + v16) = 0;
      v19 = *(_QWORD *)(a1 + 5888);
      v20 = *(unsigned int *)(a1 + 5900);
      *(_DWORD *)(a1 + 5900) = v20 + 1;
      *(_BYTE *)(v19 + v20) = 0;
      v21 = *(_QWORD *)(a1 + 5888);
      v22 = *(unsigned int *)(a1 + 5900);
      *(_DWORD *)(a1 + 5900) = v22 + 1;
      *(_BYTE *)(v21 + v22) = v17;
      ++*(_WORD *)(a1 + 4 * v17 + 212);
      v23 = *(_DWORD *)(a1 + 5900);
      v24 = *(_DWORD *)(a1 + 5904);
      --*(_DWORD *)(a1 + 180);
      v25 = *(_DWORD *)(a1 + 172) + 1;
      *(_DWORD *)(a1 + 172) = v25;
      goto LABEL_25;
    }
LABEL_9:
    v6 = (unsigned __int8 *)(*(_QWORD *)(a1 + 96) + v5);
    v7 = *(v6 - 1);
    if (v7 != *v6 || v7 != v6[1] || v7 != v6[2])
      goto LABEL_23;
    v8 = 0;
    v9 = (_DWORD)v6 + 258;
    while (1)
    {
      v10 = &v6[v8];
      if (v7 != v6[v8 + 3])
      {
        v15 = (_DWORD)v10 + 3;
        goto LABEL_38;
      }
      if (v7 != v10[4])
      {
        v15 = (_DWORD)v6 + v8 + 4;
        goto LABEL_38;
      }
      v11 = &v6[v8];
      if (v7 != v6[v8 + 5])
      {
        v15 = (_DWORD)v11 + 5;
        goto LABEL_38;
      }
      if (v7 != v11[6])
      {
        v15 = (_DWORD)v6 + v8 + 6;
        goto LABEL_38;
      }
      v12 = &v6[v8];
      if (v7 != v6[v8 + 7])
      {
        v15 = (_DWORD)v12 + 7;
        goto LABEL_38;
      }
      if (v7 != v12[8])
      {
        v15 = (_DWORD)v6 + v8 + 8;
        goto LABEL_38;
      }
      v13 = &v6[v8];
      if (v7 != v6[v8 + 9])
        break;
      v14 = v8 + 2;
      v8 += 8;
      if (v14 > 0xF9 || v7 != v13[10])
      {
        v15 = (_DWORD)v6 + v8 + 2;
        goto LABEL_38;
      }
    }
    v15 = (_DWORD)v13 + 9;
LABEL_38:
    v28 = v15 - v9 + 258;
    if (v28 < v4)
      v4 = v28;
    *(_DWORD *)(a1 + 160) = v4;
    v16 = *(unsigned int *)(a1 + 5900);
    v29 = v4 >= 3;
    v30 = v4 - 3;
    if (!v29)
      goto LABEL_24;
    v31 = *(_QWORD *)(a1 + 5888);
    *(_DWORD *)(a1 + 5900) = v16 + 1;
    *(_BYTE *)(v31 + v16) = 1;
    v32 = *(_QWORD *)(a1 + 5888);
    v33 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v33 + 1;
    *(_BYTE *)(v32 + v33) = 0;
    v34 = *(_QWORD *)(a1 + 5888);
    v35 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v35 + 1;
    *(_BYTE *)(v34 + v35) = v30;
    v36 = a1 + 4 * byte_1D4BDCA30[v30];
    ++*(_WORD *)(v36 + 1240);
    ++*(_WORD *)(a1 + 2504);
    v23 = *(_DWORD *)(a1 + 5900);
    v24 = *(_DWORD *)(a1 + 5904);
    LODWORD(v36) = *(_DWORD *)(a1 + 160);
    *(_DWORD *)(a1 + 180) -= v36;
    v25 = *(_DWORD *)(a1 + 172) + v36;
    *(_DWORD *)(a1 + 172) = v25;
    *(_DWORD *)(a1 + 160) = 0;
LABEL_25:
    if (v23 == v24)
    {
      v26 = *(_QWORD *)(a1 + 152);
      v27 = v26 < 0 ? 0 : (const void *)(*(_QWORD *)(a1 + 96) + v26);
      sub_1D4BAB028(a1, v27, v25 - v26, 0);
      *(_QWORD *)(a1 + 152) = *(unsigned int *)(a1 + 172);
      sub_1D4BA6F94(*(_QWORD *)a1);
      if (!*(_DWORD *)(*(_QWORD *)a1 + 32))
        return 0;
    }
  }
  *(_DWORD *)(a1 + 5932) = 0;
  if (a2 != 4)
  {
    if (!*(_DWORD *)(a1 + 5900))
      return 1;
    v39 = *(_QWORD *)(a1 + 152);
    v40 = v39 < 0 ? 0 : (const void *)(*(_QWORD *)(a1 + 96) + v39);
    sub_1D4BAB028(a1, v40, *(unsigned int *)(a1 + 172) - v39, 0);
    *(_QWORD *)(a1 + 152) = *(unsigned int *)(a1 + 172);
    sub_1D4BA6F94(*(_QWORD *)a1);
    return *(_DWORD *)(*(_QWORD *)a1 + 32) != 0;
  }
  v37 = *(_QWORD *)(a1 + 152);
  if (v37 < 0)
    v38 = 0;
  else
    v38 = (const void *)(*(_QWORD *)(a1 + 96) + v37);
  sub_1D4BAB028(a1, v38, *(unsigned int *)(a1 + 172) - v37, 1);
  *(_QWORD *)(a1 + 152) = *(unsigned int *)(a1 + 172);
  sub_1D4BA6F94(*(_QWORD *)a1);
  if (*(_DWORD *)(*(_QWORD *)a1 + 32))
    return 3;
  else
    return 2;
}

uint64_t sub_1D4BA7A7C(uint64_t a1, int a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  unsigned __int16 v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  const void *v44;
  uint64_t v46;
  int v47;
  uint64_t v48;
  const void *v49;
  uint64_t v50;
  const void *v51;

  while (1)
  {
    if (*(_DWORD *)(a1 + 180) > 0x105u)
      goto LABEL_6;
    sub_1D4BA6130(a1);
    v4 = *(_DWORD *)(a1 + 180);
    if (!a2 && v4 < 0x106)
      return 0;
    if (!v4)
      break;
    if (v4 < 3)
      goto LABEL_8;
LABEL_6:
    v5 = *(_DWORD *)(a1 + 172);
    v6 = ((*(_DWORD *)(a1 + 128) << *(_DWORD *)(a1 + 144)) ^ *(unsigned __int8 *)(*(_QWORD *)(a1 + 96) + v5 + 2)) & *(_DWORD *)(a1 + 140);
    *(_DWORD *)(a1 + 128) = v6;
    v7 = *(_QWORD *)(a1 + 120);
    v8 = *(unsigned __int16 *)(v7 + 2 * v6);
    *(_WORD *)(*(_QWORD *)(a1 + 112) + 2 * (*(_DWORD *)(a1 + 88) & v5)) = v8;
    *(_WORD *)(v7 + 2 * v6) = v5;
    if (!v8 || v5 - v8 > *(_DWORD *)(a1 + 80) - 262)
    {
LABEL_8:
      v9 = *(_DWORD *)(a1 + 160);
      goto LABEL_10;
    }
    v9 = sub_1D4BA8338(a1, v8);
    *(_DWORD *)(a1 + 160) = v9;
LABEL_10:
    if (v9 < 3)
    {
      v34 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 96) + *(unsigned int *)(a1 + 172));
      v35 = *(_QWORD *)(a1 + 5888);
      v36 = *(unsigned int *)(a1 + 5900);
      *(_DWORD *)(a1 + 5900) = v36 + 1;
      *(_BYTE *)(v35 + v36) = 0;
      v37 = *(_QWORD *)(a1 + 5888);
      v38 = *(unsigned int *)(a1 + 5900);
      *(_DWORD *)(a1 + 5900) = v38 + 1;
      *(_BYTE *)(v37 + v38) = 0;
      v39 = *(_QWORD *)(a1 + 5888);
      v40 = *(unsigned int *)(a1 + 5900);
      *(_DWORD *)(a1 + 5900) = v40 + 1;
      *(_BYTE *)(v39 + v40) = v34;
      ++*(_WORD *)(a1 + 4 * v34 + 212);
      v21 = *(_DWORD *)(a1 + 5900);
      v22 = *(_DWORD *)(a1 + 5904);
      --*(_DWORD *)(a1 + 180);
      v33 = *(_DWORD *)(a1 + 172) + 1;
LABEL_19:
      *(_DWORD *)(a1 + 172) = v33;
      goto LABEL_21;
    }
    v10 = *(_DWORD *)(a1 + 172) - *(_DWORD *)(a1 + 176);
    v11 = *(_QWORD *)(a1 + 5888);
    v12 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v12 + 1;
    *(_BYTE *)(v11 + v12) = v10;
    v13 = *(_QWORD *)(a1 + 5888);
    v14 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v14 + 1;
    *(_BYTE *)(v13 + v14) = BYTE1(v10);
    v15 = *(_QWORD *)(a1 + 5888);
    v16 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v16 + 1;
    *(_BYTE *)(v15 + v16) = v9 - 3;
    v17 = v10 - 1;
    v18 = a1 + 4 * byte_1D4BDCA30[(v9 - 3)];
    ++*(_WORD *)(v18 + 1240);
    v19 = (v17 >> 7) + 256;
    if ((v17 & 0xFF00) == 0)
      v19 = v17;
    v20 = a1 + 4 * byte_1D4BDC830[v19];
    ++*(_WORD *)(v20 + 2504);
    v21 = *(_DWORD *)(a1 + 5900);
    v22 = *(_DWORD *)(a1 + 5904);
    v23 = *(_DWORD *)(a1 + 160);
    v24 = *(_DWORD *)(a1 + 180) - v23;
    *(_DWORD *)(a1 + 180) = v24;
    if (v23 <= *(_DWORD *)(a1 + 192) && v24 >= 3)
    {
      *(_DWORD *)(a1 + 160) = v23 - 1;
      v25 = *(_QWORD *)(a1 + 96);
      v27 = *(_DWORD *)(a1 + 140);
      v26 = *(_DWORD *)(a1 + 144);
      v29 = *(_QWORD *)(a1 + 112);
      v28 = *(_QWORD *)(a1 + 120);
      v30 = *(_DWORD *)(a1 + 88);
      v31 = *(_DWORD *)(a1 + 128);
      v32 = v23 - 2;
      v33 = *(_DWORD *)(a1 + 172) + 1;
      do
      {
        *(_DWORD *)(a1 + 172) = v33;
        v31 = ((v31 << v26) ^ *(unsigned __int8 *)(v25 + v33 + 2)) & v27;
        *(_DWORD *)(a1 + 128) = v31;
        *(_WORD *)(v29 + 2 * (v30 & v33)) = *(_WORD *)(v28 + 2 * v31);
        *(_WORD *)(v28 + 2 * v31) = v33;
        *(_DWORD *)(a1 + 160) = v32--;
        ++v33;
      }
      while (v32 != -1);
      goto LABEL_19;
    }
    v33 = *(_DWORD *)(a1 + 172) + v23;
    *(_DWORD *)(a1 + 172) = v33;
    *(_DWORD *)(a1 + 160) = 0;
    v41 = *(_QWORD *)(a1 + 96);
    v42 = *(unsigned __int8 *)(v41 + v33);
    *(_DWORD *)(a1 + 128) = v42;
    *(_DWORD *)(a1 + 128) = ((v42 << *(_DWORD *)(a1 + 144)) ^ *(unsigned __int8 *)(v41 + v33 + 1)) & *(_DWORD *)(a1 + 140);
LABEL_21:
    if (v21 == v22)
    {
      v43 = *(_QWORD *)(a1 + 152);
      v44 = v43 < 0 ? 0 : (const void *)(*(_QWORD *)(a1 + 96) + v43);
      sub_1D4BAB028(a1, v44, v33 - v43, 0);
      *(_QWORD *)(a1 + 152) = *(unsigned int *)(a1 + 172);
      sub_1D4BA6F94(*(_QWORD *)a1);
      if (!*(_DWORD *)(*(_QWORD *)a1 + 32))
        return 0;
    }
  }
  v46 = *(unsigned int *)(a1 + 172);
  if (v46 >= 2)
    v47 = 2;
  else
    v47 = *(_DWORD *)(a1 + 172);
  *(_DWORD *)(a1 + 5932) = v47;
  if (a2 == 4)
  {
    v48 = *(_QWORD *)(a1 + 152);
    if (v48 < 0)
      v49 = 0;
    else
      v49 = (const void *)(*(_QWORD *)(a1 + 96) + v48);
    sub_1D4BAB028(a1, v49, v46 - v48, 1);
    *(_QWORD *)(a1 + 152) = *(unsigned int *)(a1 + 172);
    sub_1D4BA6F94(*(_QWORD *)a1);
    if (*(_DWORD *)(*(_QWORD *)a1 + 32))
      return 3;
    else
      return 2;
  }
  else
  {
    if (*(_DWORD *)(a1 + 5900))
    {
      v50 = *(_QWORD *)(a1 + 152);
      v51 = v50 < 0 ? 0 : (const void *)(*(_QWORD *)(a1 + 96) + v50);
      sub_1D4BAB028(a1, v51, v46 - v50, 0);
      *(_QWORD *)(a1 + 152) = *(unsigned int *)(a1 + 172);
      sub_1D4BA6F94(*(_QWORD *)a1);
      if (!*(_DWORD *)(*(_QWORD *)a1 + 32))
        return 0;
    }
    return 1;
  }
}

uint64_t sub_1D4BA7E44(uint64_t a1, int a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 v12;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  uint64_t v23;
  unsigned __int16 v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  const void *v53;
  uint64_t v54;
  const void *v55;

  while (*(_DWORD *)(a1 + 180) >= 0x106u)
  {
    v5 = *(_DWORD *)(a1 + 160);
    v6 = *(_DWORD *)(a1 + 176);
LABEL_8:
    v8 = *(_DWORD *)(a1 + 172);
    v9 = ((*(_DWORD *)(a1 + 128) << *(_DWORD *)(a1 + 144)) ^ *(unsigned __int8 *)(*(_QWORD *)(a1 + 96) + v8 + 2)) & *(_DWORD *)(a1 + 140);
    *(_DWORD *)(a1 + 128) = v9;
    v10 = *(_QWORD *)(a1 + 120);
    v11 = *(unsigned __int16 *)(v10 + 2 * v9);
    *(_WORD *)(*(_QWORD *)(a1 + 112) + 2 * (*(_DWORD *)(a1 + 88) & v8)) = v11;
    *(_WORD *)(v10 + 2 * v9) = v8;
    *(_DWORD *)(a1 + 184) = v5;
    v7 = 2;
    *(_DWORD *)(a1 + 160) = 2;
    *(_DWORD *)(a1 + 164) = v6;
    if (!v11)
      goto LABEL_17;
    if (v5 < *(_DWORD *)(a1 + 192) && v8 - v11 <= *(_DWORD *)(a1 + 80) - 262)
    {
      v7 = sub_1D4BA8338(a1, v11);
      *(_DWORD *)(a1 + 160) = v7;
      if (v7 <= 5)
      {
        if (*(_DWORD *)(a1 + 200) == 1)
          goto LABEL_15;
        if (v7 == 3)
        {
          if ((*(_DWORD *)(a1 + 172) - *(_DWORD *)(a1 + 176)) <= 0x1000)
          {
            v7 = 3;
            goto LABEL_16;
          }
LABEL_15:
          v7 = 2;
          *(_DWORD *)(a1 + 160) = 2;
        }
      }
    }
LABEL_16:
    v5 = *(_DWORD *)(a1 + 184);
LABEL_17:
    v12 = v5 - 3;
    if (v5 < 3 || v7 > v5)
    {
      if (*(_DWORD *)(a1 + 168))
      {
        v33 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 96) + (*(_DWORD *)(a1 + 172) - 1));
        v34 = *(_QWORD *)(a1 + 5888);
        v35 = *(unsigned int *)(a1 + 5900);
        *(_DWORD *)(a1 + 5900) = v35 + 1;
        *(_BYTE *)(v34 + v35) = 0;
        v36 = *(_QWORD *)(a1 + 5888);
        v37 = *(unsigned int *)(a1 + 5900);
        *(_DWORD *)(a1 + 5900) = v37 + 1;
        *(_BYTE *)(v36 + v37) = 0;
        v38 = *(_QWORD *)(a1 + 5888);
        v39 = *(unsigned int *)(a1 + 5900);
        *(_DWORD *)(a1 + 5900) = v39 + 1;
        *(_BYTE *)(v38 + v39) = v33;
        ++*(_WORD *)(a1 + 4 * v33 + 212);
        if (*(_DWORD *)(a1 + 5900) == *(_DWORD *)(a1 + 5904))
        {
          v40 = *(_QWORD *)(a1 + 152);
          if (v40 < 0)
            v41 = 0;
          else
            v41 = (const void *)(*(_QWORD *)(a1 + 96) + v40);
          sub_1D4BAB028(a1, v41, *(unsigned int *)(a1 + 172) - v40, 0);
          *(_QWORD *)(a1 + 152) = *(unsigned int *)(a1 + 172);
          sub_1D4BA6F94(*(_QWORD *)a1);
        }
        ++*(_DWORD *)(a1 + 172);
        --*(_DWORD *)(a1 + 180);
        goto LABEL_38;
      }
      v42 = *(_DWORD *)(a1 + 172) + 1;
      *(_DWORD *)(a1 + 168) = 1;
      *(_DWORD *)(a1 + 172) = v42;
      --*(_DWORD *)(a1 + 180);
    }
    else
    {
      v13 = *(_DWORD *)(a1 + 172);
      v14 = v13 + *(_DWORD *)(a1 + 180) - 3;
      v15 = v13 + ~*(_DWORD *)(a1 + 164);
      v16 = *(_QWORD *)(a1 + 5888);
      v17 = *(unsigned int *)(a1 + 5900);
      *(_DWORD *)(a1 + 5900) = v17 + 1;
      *(_BYTE *)(v16 + v17) = v15;
      v18 = *(_QWORD *)(a1 + 5888);
      v19 = *(unsigned int *)(a1 + 5900);
      *(_DWORD *)(a1 + 5900) = v19 + 1;
      *(_BYTE *)(v18 + v19) = BYTE1(v15);
      v20 = *(_QWORD *)(a1 + 5888);
      v21 = *(unsigned int *)(a1 + 5900);
      *(_DWORD *)(a1 + 5900) = v21 + 1;
      *(_BYTE *)(v20 + v21) = v12;
      v22 = v15 - 1;
      v23 = a1 + 4 * byte_1D4BDCA30[v12];
      ++*(_WORD *)(v23 + 1240);
      v24 = (v22 >> 7) + 256;
      if ((v22 & 0xFF00) == 0)
        v24 = v22;
      v28 = a1 + 4 * byte_1D4BDC830[v24];
      ++*(_WORD *)(v28 + 2504);
      v25 = *(_DWORD *)(a1 + 5900);
      v26 = *(_DWORD *)(a1 + 5904);
      LODWORD(v28) = *(_DWORD *)(a1 + 184);
      *(_DWORD *)(a1 + 180) = *(_DWORD *)(a1 + 180) - v28 + 1;
      *(_DWORD *)(a1 + 184) = v28 - 2;
      v27 = v28 - 3;
      LODWORD(v28) = *(_DWORD *)(a1 + 172) + 1;
      do
      {
        *(_DWORD *)(a1 + 172) = v28;
        if (v28 <= v14)
        {
          v29 = ((*(_DWORD *)(a1 + 128) << *(_DWORD *)(a1 + 144)) ^ *(unsigned __int8 *)(*(_QWORD *)(a1 + 96)
                                                                                       + (v28 + 2))) & *(_DWORD *)(a1 + 140);
          *(_DWORD *)(a1 + 128) = v29;
          v30 = *(_QWORD *)(a1 + 120);
          *(_WORD *)(*(_QWORD *)(a1 + 112) + 2 * (*(_DWORD *)(a1 + 88) & v28)) = *(_WORD *)(v30 + 2 * v29);
          *(_WORD *)(v30 + 2 * v29) = v28;
        }
        *(_DWORD *)(a1 + 184) = v27--;
        v28 = (v28 + 1);
      }
      while (v27 != -1);
      *(_DWORD *)(a1 + 160) = 2;
      *(_DWORD *)(a1 + 168) = 0;
      *(_DWORD *)(a1 + 172) = v28;
      if (v25 == v26)
      {
        v31 = *(_QWORD *)(a1 + 152);
        if (v31 < 0)
          v32 = 0;
        else
          v32 = (const void *)(*(_QWORD *)(a1 + 96) + v31);
        sub_1D4BAB028(a1, v32, v28 - v31, 0);
        *(_QWORD *)(a1 + 152) = *(unsigned int *)(a1 + 172);
        sub_1D4BA6F94(*(_QWORD *)a1);
LABEL_38:
        if (!*(_DWORD *)(*(_QWORD *)a1 + 32))
          return 0;
      }
    }
  }
  sub_1D4BA6130(a1);
  v4 = *(_DWORD *)(a1 + 180);
  if (!a2 && v4 < 0x106)
    return 0;
  if (v4)
  {
    v5 = *(_DWORD *)(a1 + 160);
    v6 = *(_DWORD *)(a1 + 176);
    if (v4 <= 2)
    {
      *(_DWORD *)(a1 + 184) = v5;
      v7 = 2;
      *(_DWORD *)(a1 + 160) = 2;
      *(_DWORD *)(a1 + 164) = v6;
      goto LABEL_17;
    }
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 168))
  {
    v43 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 96) + (*(_DWORD *)(a1 + 172) - 1));
    v44 = *(_QWORD *)(a1 + 5888);
    v45 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v45 + 1;
    *(_BYTE *)(v44 + v45) = 0;
    v46 = *(_QWORD *)(a1 + 5888);
    v47 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v47 + 1;
    *(_BYTE *)(v46 + v47) = 0;
    v48 = *(_QWORD *)(a1 + 5888);
    v49 = *(unsigned int *)(a1 + 5900);
    *(_DWORD *)(a1 + 5900) = v49 + 1;
    *(_BYTE *)(v48 + v49) = v43;
    ++*(_WORD *)(a1 + 4 * v43 + 212);
    *(_DWORD *)(a1 + 168) = 0;
  }
  v50 = *(unsigned int *)(a1 + 172);
  if (v50 >= 2)
    v51 = 2;
  else
    v51 = *(_DWORD *)(a1 + 172);
  *(_DWORD *)(a1 + 5932) = v51;
  if (a2 != 4)
  {
    if (!*(_DWORD *)(a1 + 5900))
      return 1;
    v54 = *(_QWORD *)(a1 + 152);
    v55 = v54 < 0 ? 0 : (const void *)(*(_QWORD *)(a1 + 96) + v54);
    sub_1D4BAB028(a1, v55, v50 - v54, 0);
    *(_QWORD *)(a1 + 152) = *(unsigned int *)(a1 + 172);
    sub_1D4BA6F94(*(_QWORD *)a1);
    return *(_DWORD *)(*(_QWORD *)a1 + 32) != 0;
  }
  v52 = *(_QWORD *)(a1 + 152);
  if (v52 < 0)
    v53 = 0;
  else
    v53 = (const void *)(*(_QWORD *)(a1 + 96) + v52);
  sub_1D4BAB028(a1, v53, v50 - v52, 1);
  *(_QWORD *)(a1 + 152) = *(unsigned int *)(a1 + 172);
  sub_1D4BA6F94(*(_QWORD *)a1);
  if (*(_DWORD *)(*(_QWORD *)a1 + 32))
    return 3;
  else
    return 2;
}

uint64_t sub_1D4BA8338(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26;

  v2 = *(_DWORD *)(a1 + 188);
  v3 = *(int *)(a1 + 184);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(unsigned int *)(a1 + 172);
  v6 = (unsigned __int8 *)(v4 + v5);
  v7 = *(_DWORD *)(a1 + 80) - 262;
  v8 = v5 >= v7;
  v9 = v5 - v7;
  if (!v8)
    v9 = 0;
  v10 = *(_QWORD *)(a1 + 112);
  v11 = *(_DWORD *)(a1 + 88);
  v12 = *(_DWORD *)(a1 + 180);
  v13 = v6[v3 - 1];
  v14 = v6[v3];
  v15 = *(_DWORD *)(a1 + 208);
  if (v3 >= *(_DWORD *)(a1 + 204))
    v2 >>= 2;
  if (v15 >= v12)
    v15 = *(_DWORD *)(a1 + 180);
  while (1)
  {
    v16 = (unsigned __int8 *)(v4 + a2);
    if (v16[(int)v3] != v14 || v16[(int)v3 - 1] != v13 || *v16 != *v6 || v16[1] != v6[1])
      goto LABEL_32;
    v17 = 0;
    while (1)
    {
      v18 = &v6[v17];
      if (v6[v17 + 3] != v16[v17 + 3])
      {
        v24 = (_DWORD)v18 + 3;
        goto LABEL_29;
      }
      if (v18[4] != v16[v17 + 4])
      {
        v24 = (_DWORD)v6 + v17 + 4;
        goto LABEL_29;
      }
      v19 = &v6[v17];
      if (v6[v17 + 5] != v16[v17 + 5])
      {
        v24 = (_DWORD)v19 + 5;
        goto LABEL_29;
      }
      if (v19[6] != v16[v17 + 6])
      {
        v24 = (_DWORD)v6 + v17 + 6;
        goto LABEL_29;
      }
      v20 = &v6[v17];
      if (v6[v17 + 7] != v16[v17 + 7])
      {
        v24 = (_DWORD)v20 + 7;
        goto LABEL_29;
      }
      if (v20[8] != v16[v17 + 8])
      {
        v24 = (_DWORD)v6 + v17 + 8;
        goto LABEL_29;
      }
      v21 = &v6[v17];
      v22 = &v16[v17];
      if (v6[v17 + 9] != v16[v17 + 9])
        break;
      v23 = v17 + 2;
      v17 += 8;
      if (v23 > 0xF9 || v21[10] != v22[10])
      {
        v24 = (_DWORD)v6 + v17 + 2;
        goto LABEL_29;
      }
    }
    v24 = (_DWORD)v21 + 9;
LABEL_29:
    v25 = v24 - ((_DWORD)v6 + 258);
    v26 = v24 - (_DWORD)v6;
    if (v26 <= (int)v3)
      goto LABEL_32;
    *(_DWORD *)(a1 + 176) = a2;
    if (v26 >= (int)v15)
      break;
    v13 = v6[v25 + 257];
    v14 = v6[v26];
    LODWORD(v3) = v26;
LABEL_32:
    a2 = *(unsigned __int16 *)(v10 + 2 * (a2 & v11));
    --v2;
    if (v9 >= a2 || v2 == 0)
      goto LABEL_37;
  }
  LODWORD(v3) = v26;
LABEL_37:
  if (v3 >= v12)
    return v12;
  else
    return v3;
}

size_t sub_1D4BA8534(uint64_t a1, void *__dst, unsigned int a3)
{
  unsigned int v3;
  size_t v4;
  int v7;
  uint64_t v8;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= a3)
    v4 = a3;
  else
    v4 = v3;
  if ((_DWORD)v4)
  {
    *(_DWORD *)(a1 + 8) = v3 - v4;
    memcpy(__dst, *(const void **)a1, v4);
    v7 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 48);
    if (v7 == 2)
    {
      v8 = sub_1D4BA5CCC(*(_QWORD *)(a1 + 96), (char *)__dst, v4);
    }
    else
    {
      if (v7 != 1)
      {
LABEL_10:
        *(_QWORD *)a1 += v4;
        *(_QWORD *)(a1 + 16) += v4;
        return v4;
      }
      v8 = sub_1D4BA5980(*(_QWORD *)(a1 + 96), (unsigned __int8 *)__dst, v4);
    }
    *(_QWORD *)(a1 + 96) = v8;
    goto LABEL_10;
  }
  return v4;
}

double sub_1D4BA85E0(_QWORD *a1)
{
  double result;
  uint64_t v3;
  int v4;

  if (!sub_1D4BA8670(a1))
  {
    v3 = a1[7];
    *(_QWORD *)(v3 + 40) = 0;
    a1[2] = 0;
    a1[5] = 0;
    a1[6] = 0;
    v4 = *(_DWORD *)(v3 + 16);
    if (v4)
      a1[12] = v4 & 1;
    *(_QWORD *)(v3 + 8) = 16180;
    *(_QWORD *)(v3 + 20) = 0xFFFFFFFF00000000;
    *(_DWORD *)(v3 + 28) = 0x8000;
    *(_QWORD *)(v3 + 144) = v3 + 1368;
    *(_QWORD *)(v3 + 104) = v3 + 1368;
    *(_QWORD *)(v3 + 112) = v3 + 1368;
    result = NAN;
    *(_QWORD *)(v3 + 48) = 0;
    *(_QWORD *)(v3 + 80) = 0;
    *(_DWORD *)(v3 + 88) = 0;
    *(_QWORD *)(v3 + 7144) = 0xFFFFFFFF00000001;
  }
  return result;
}

BOOL sub_1D4BA8670(_QWORD *a1)
{
  uint64_t v1;

  return !a1
      || !a1[8]
      || !a1[9]
      || (v1 = a1[7]) == 0
      || *(_QWORD **)v1 != a1
      || (*(_DWORD *)(v1 + 8) - 16212) < 0xFFFFFFE0;
}

double sub_1D4BA86B8(_QWORD *a1)
{
  double result;
  uint64_t v3;

  if (!sub_1D4BA8670(a1))
  {
    v3 = a1[7];
    *(_QWORD *)(v3 + 64) = 0;
    *(_DWORD *)(v3 + 60) = 0;
    return sub_1D4BA85E0(a1);
  }
  return result;
}

double sub_1D4BA86FC(uint64_t a1, unsigned int a2)
{
  double result;
  uint64_t v5;
  int v6;

  if (!sub_1D4BA8670((_QWORD *)a1))
  {
    v5 = *(_QWORD *)(a1 + 56);
    if ((a2 & 0x80000000) != 0)
    {
      if (a2 < 0xFFFFFFF1)
        return result;
      v6 = 0;
      a2 = -a2;
    }
    else
    {
      v6 = (a2 >> 4) + 5;
      if (a2 < 0x30)
        a2 &= 0xFu;
    }
    if (a2 - 8 < 8 || !a2)
    {
      if (*(_QWORD *)(v5 + 72))
      {
        if (*(_DWORD *)(v5 + 56) != a2)
        {
          (*(void (**)(_QWORD))(a1 + 72))(*(_QWORD *)(a1 + 80));
          *(_QWORD *)(v5 + 72) = 0;
        }
      }
      *(_DWORD *)(v5 + 16) = v6;
      *(_DWORD *)(v5 + 56) = a2;
      return sub_1D4BA86B8((_QWORD *)a1);
    }
  }
  return result;
}

uint64_t sub_1D4BA87B0(_QWORD *a1, unsigned int a2, _BYTE *a3, int a4)
{
  uint64_t v4;
  void *(*v7)(uint64_t, int, int);
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;

  v4 = 4294967290;
  if (a3 && a4 == 112 && *a3 == 49)
  {
    if (a1)
    {
      a1[6] = 0;
      v7 = (void *(*)(uint64_t, int, int))a1[8];
      if (!v7)
      {
        v7 = sub_1D4BAC478;
        a1[8] = sub_1D4BAC478;
        a1[10] = 0;
      }
      if (!a1[9])
        a1[9] = sub_1D4BAC480;
      v8 = (uint64_t)v7(a1[10], 1, 7160);
      if (v8)
      {
        v9 = v8;
        a1[7] = v8;
        *(_QWORD *)v8 = a1;
        *(_QWORD *)(v8 + 72) = 0;
        *(_DWORD *)(v8 + 8) = 16180;
        v10 = sub_1D4BA86FC((uint64_t)a1, a2);
        v4 = v11;
        if ((_DWORD)v11)
        {
          ((void (*)(_QWORD, uint64_t, double))a1[9])(a1[10], v9, v10);
          a1[7] = 0;
        }
      }
      else
      {
        return 4294967292;
      }
    }
    else
    {
      return 4294967294;
    }
  }
  return v4;
}

uint64_t sub_1D4BA888C(uint64_t a1, int a2)
{
  uint64_t result;
  _BYTE *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  _WORD **v10;
  unsigned __int16 *v11;
  uint64_t v12;
  _WORD *v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  const char *v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _WORD *v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  unsigned __int8 *v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unsigned int v63;
  size_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unsigned __int8 *v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int v80;
  __int16 v81;
  int v82;
  unint64_t v83;
  unsigned int v84;
  unint64_t v85;
  unsigned int v86;
  uint64_t v87;
  _WORD **v88;
  _WORD *v89;
  unsigned __int16 *v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int *v95;
  uint64_t v96;
  unint64_t v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  size_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  int v143;
  unsigned __int8 *v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  unint64_t v148;
  unsigned __int8 *v149;
  unsigned int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  unsigned __int8 *v155;
  int v156;
  uint64_t v157;
  int v158;
  unint64_t v159;
  unsigned __int8 *v160;
  unsigned int v161;
  uint64_t v162;
  int v163;
  unsigned __int8 *v164;
  unint64_t v165;
  uint64_t v166;
  int v167;
  unint64_t v168;
  unsigned __int8 *v169;
  unsigned int v170;
  int v171;
  uint64_t v172;
  int v173;
  int v174;
  uint64_t v175;
  int v176;
  unint64_t v177;
  unsigned __int8 *v178;
  unsigned int v179;
  int v180;
  unsigned int v181;
  unint64_t v182;
  unsigned __int8 *v183;
  unsigned int v184;
  uint64_t v185;
  unsigned int v186;
  char *v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  char v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  int v201;
  unsigned int v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  int v208;
  int v210;
  unsigned int *v214;
  uint64_t v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v225;
  int v226;

  if (sub_1D4BA8670((_QWORD *)a1))
    return 4294967294;
  v4 = *(_BYTE **)(a1 + 24);
  if (!v4)
    return 4294967294;
  v5 = *(unsigned __int8 **)a1;
  if (!*(_QWORD *)a1)
  {
    if (*(_DWORD *)(a1 + 8))
      return 4294967294;
  }
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(v6 + 8);
  if (v7 == 16191)
  {
    v7 = 16192;
    *(_DWORD *)(v6 + 8) = 16192;
  }
  v8 = *(unsigned int *)(a1 + 32);
  v9 = *(_QWORD *)(v6 + 80);
  v10 = (_WORD **)(v6 + 144);
  v214 = (unsigned int *)(v6 + 120);
  v215 = v6 + 1368;
  v11 = (unsigned __int16 *)(v6 + 152);
  v12 = *(unsigned int *)(v6 + 88);
  v13 = (_WORD *)(v6 + 792);
  v216 = *(_DWORD *)(a1 + 8);
  v217 = 0;
  v14 = v216;
  v225 = *(_DWORD *)(a1 + 32);
  while (2)
  {
    v15 = -3;
    v16 = 1;
    switch(v7)
    {
      case 16180:
        v17 = *(_DWORD *)(v6 + 16);
        if (!v17)
        {
          v33 = 16192;
          goto LABEL_375;
        }
        if (v12 <= 0xF)
        {
          v18 = 0;
          do
          {
            if (!(_DWORD)v14)
              goto LABEL_382;
            v14 = (v14 - 1);
            v19 = *v5++;
            v9 += (unint64_t)v19 << (v12 + v18);
            v18 += 8;
          }
          while ((unint64_t)v12 + v18 - 8 < 8);
          v12 = (v12 + v18);
        }
        if ((v17 & 2) != 0 && v9 == 35615)
        {
          v20 = v8;
          if (!*(_DWORD *)(v6 + 56))
            *(_DWORD *)(v6 + 56) = 15;
          v21 = sub_1D4BA5CCC(0, 0, 0);
          *(_QWORD *)(v6 + 32) = v21;
          LOWORD(v226) = -29921;
          v9 = 0;
          v12 = 0;
          *(_QWORD *)(v6 + 32) = sub_1D4BA5CCC(v21, (char *)&v226, 2u);
          *(_DWORD *)(v6 + 8) = 16181;
          goto LABEL_299;
        }
        v93 = *(_QWORD *)(v6 + 48);
        if (v93)
          *(_DWORD *)(v93 + 72) = -1;
        if ((v17 & 1) == 0
          || 0xEF7BDEF7BDEF7BDFLL * (((unint64_t)v9 << 8) + (v9 >> 8)) >= 0x842108421084211)
        {
          v24 = "incorrect header check";
          goto LABEL_374;
        }
        if ((v9 & 0xF) != 8)
          goto LABEL_373;
        v194 = v9 >> 4;
        v195 = v194 + 8;
        v196 = *(_DWORD *)(v6 + 56);
        if (!v196)
        {
          *(_DWORD *)(v6 + 56) = v195;
          v196 = v194 + 8;
        }
        if (v194 > 7 || v195 > v196)
        {
          v9 >>= 4;
          v12 = (v12 - 4);
          v24 = "invalid window size";
          goto LABEL_374;
        }
        *(_DWORD *)(v6 + 24) = 0;
        *(_DWORD *)(v6 + 28) = 256 << v194;
        v197 = v8;
        v198 = sub_1D4BA5980(0, 0, 0);
        v8 = v197;
        v11 = (unsigned __int16 *)(v6 + 152);
        v10 = (_WORD **)(v6 + 144);
        v12 = 0;
        *(_QWORD *)(v6 + 32) = v198;
        *(_QWORD *)(a1 + 96) = v198;
        if ((v9 & 0x2000) != 0)
          v199 = 16189;
        else
          v199 = 16191;
        *(_DWORD *)(v6 + 8) = v199;
        v9 = 0;
        goto LABEL_376;
      case 16181:
        if (v12 > 0xF)
          goto LABEL_25;
        v22 = 0;
        do
        {
          if (!(_DWORD)v14)
          {
            LODWORD(v12) = v12 + v22;
            goto LABEL_391;
          }
          v14 = (v14 - 1);
          v23 = *v5++;
          v9 += (unint64_t)v23 << (v12 + v22);
          v22 += 8;
        }
        while ((unint64_t)v12 + v22 - 8 < 8);
        v12 = (v12 + v22);
LABEL_25:
        *(_DWORD *)(v6 + 24) = v9;
        if (v9 != 8)
        {
LABEL_373:
          v24 = "unknown compression method";
          goto LABEL_374;
        }
        if ((v9 & 0xE000) != 0)
        {
          v24 = "unknown header flags set";
          goto LABEL_374;
        }
        v218 = v8;
        v95 = *(unsigned int **)(v6 + 48);
        if (v95)
          *v95 = (v9 >> 8) & 1;
        v25 = v225;
        if ((v9 & 0x200) != 0 && (*(_BYTE *)(v6 + 16) & 4) != 0)
        {
          LOWORD(v226) = v9;
          v96 = sub_1D4BA5CCC(*(_QWORD *)(v6 + 32), (char *)&v226, 2u);
          v11 = (unsigned __int16 *)(v6 + 152);
          v10 = (_WORD **)(v6 + 144);
          *(_QWORD *)(v6 + 32) = v96;
        }
        LODWORD(v12) = 0;
        v9 = 0;
        *(_DWORD *)(v6 + 8) = 16182;
LABEL_168:
        v97 = v12;
        while (2)
        {
          if (!(_DWORD)v14)
          {
LABEL_383:
            LODWORD(v12) = v97;
            v16 = v217;
            LODWORD(v8) = v218;
            v225 = v25;
            goto LABEL_392;
          }
          v98 = *v5++;
          LODWORD(v14) = v14 - 1;
          v9 += (unint64_t)v98 << v97;
          v125 = v97 >= 0x18;
          v97 += 8;
          if (!v125)
            continue;
          break;
        }
LABEL_172:
        v99 = *(_QWORD *)(v6 + 48);
        if (v99)
          *(_QWORD *)(v99 + 8) = v9;
        if ((*(_BYTE *)(v6 + 25) & 2) != 0 && (*(_BYTE *)(v6 + 16) & 4) != 0)
        {
          v226 = v9;
          v100 = sub_1D4BA5CCC(*(_QWORD *)(v6 + 32), (char *)&v226, 4u);
          v11 = (unsigned __int16 *)(v6 + 152);
          v10 = (_WORD **)(v6 + 144);
          *(_QWORD *)(v6 + 32) = v100;
        }
        LODWORD(v12) = 0;
        v9 = 0;
        *(_DWORD *)(v6 + 8) = 16183;
LABEL_178:
        v97 = v12;
        do
        {
          if (!(_DWORD)v14)
            goto LABEL_383;
          v101 = *v5++;
          v14 = (v14 - 1);
          v9 += (unint64_t)v101 << v97;
          v125 = v97 >= 8;
          v97 += 8;
        }
        while (!v125);
LABEL_182:
        v102 = *(_QWORD *)(v6 + 48);
        if (v102)
        {
          *(_DWORD *)(v102 + 16) = v9;
          *(_DWORD *)(v102 + 20) = v9 >> 8;
        }
        if ((*(_BYTE *)(v6 + 25) & 2) != 0 && (*(_BYTE *)(v6 + 16) & 4) != 0)
        {
          LOWORD(v226) = v9;
          v103 = sub_1D4BA5CCC(*(_QWORD *)(v6 + 32), (char *)&v226, 2u);
          v11 = (unsigned __int16 *)(v6 + 152);
          v10 = (_WORD **)(v6 + 144);
          *(_QWORD *)(v6 + 32) = v103;
        }
        v9 = 0;
        LODWORD(v12) = 0;
        v27 = 0;
        *(_DWORD *)(v6 + 8) = 16184;
        v26 = *(_DWORD *)(v6 + 24);
        v225 = v25;
        v8 = v218;
        if ((v26 & 0x400) != 0)
        {
LABEL_190:
          v28 = v12;
          while ((_DWORD)v14)
          {
            v105 = *v5++;
            v14 = (v14 - 1);
            v9 += (unint64_t)v105 << v28;
            v125 = v28 >= 8;
            v28 += 8;
            if (v125)
              goto LABEL_194;
          }
LABEL_384:
          LODWORD(v12) = v28;
          goto LABEL_391;
        }
LABEL_188:
        v104 = *(_QWORD *)(v6 + 48);
        if (v104)
          *(_QWORD *)(v104 + 24) = 0;
LABEL_200:
        *(_DWORD *)(v6 + 8) = 16185;
        v12 = v27;
LABEL_201:
        v109 = *(_DWORD *)(v6 + 24);
        if ((v109 & 0x400) != 0)
        {
          v110 = *(_DWORD *)(v6 + 92);
          if (v110 >= v14)
            v111 = v14;
          else
            v111 = *(_DWORD *)(v6 + 92);
          if (v111)
          {
            v112 = *(_QWORD *)(v6 + 48);
            if (v112)
            {
              v113 = *(_QWORD *)(v112 + 24);
              if (v113)
              {
                v115 = *(_DWORD *)(v112 + 32);
                v114 = *(_DWORD *)(v112 + 36);
                v116 = v115 - v110;
                if (v114 > v116)
                {
                  if (v116 + v111 <= v114)
                    v117 = v111;
                  else
                    v117 = v114 - v116;
                  v221 = v8;
                  memcpy((void *)(v113 + v116), v5, v117);
                  v8 = v221;
                  v11 = (unsigned __int16 *)(v6 + 152);
                  v10 = (_WORD **)(v6 + 144);
                  v109 = *(_DWORD *)(v6 + 24);
                }
              }
            }
            if ((v109 & 0x200) != 0 && (*(_BYTE *)(v6 + 16) & 4) != 0)
            {
              v222 = v8;
              v118 = sub_1D4BA5CCC(*(_QWORD *)(v6 + 32), (char *)v5, v111);
              v8 = v222;
              v11 = (unsigned __int16 *)(v6 + 152);
              v10 = (_WORD **)(v6 + 144);
              *(_QWORD *)(v6 + 32) = v118;
            }
            v14 = v14 - v111;
            v5 += v111;
            v110 = *(_DWORD *)(v6 + 92) - v111;
            *(_DWORD *)(v6 + 92) = v110;
          }
          if (v110)
            goto LABEL_391;
        }
        *(_DWORD *)(v6 + 92) = 0;
        *(_DWORD *)(v6 + 8) = 16186;
LABEL_219:
        if ((*(_BYTE *)(v6 + 25) & 8) == 0)
        {
          v119 = *(_QWORD *)(v6 + 48);
          if (v119)
            *(_QWORD *)(v119 + 40) = 0;
          goto LABEL_238;
        }
        if (!(_DWORD)v14)
          goto LABEL_391;
        v223 = v8;
        v120 = 0;
        do
        {
          v121 = v5[v120];
          v122 = *(_QWORD *)(v6 + 48);
          if (v122)
          {
            v123 = *(_QWORD *)(v122 + 40);
            if (v123)
            {
              v124 = *(unsigned int *)(v6 + 92);
              if (v124 < *(_DWORD *)(v122 + 48))
              {
                *(_DWORD *)(v6 + 92) = v124 + 1;
                *(_BYTE *)(v123 + v124) = v121;
              }
            }
          }
          ++v120;
          if (v121)
            v125 = v120 >= v14;
          else
            v125 = 1;
        }
        while (!v125);
        if ((*(_BYTE *)(v6 + 25) & 2) != 0 && (*(_BYTE *)(v6 + 16) & 4) != 0)
        {
          v126 = sub_1D4BA5CCC(*(_QWORD *)(v6 + 32), (char *)v5, v120);
          v11 = (unsigned __int16 *)(v6 + 152);
          v10 = (_WORD **)(v6 + 144);
          *(_QWORD *)(v6 + 32) = v126;
        }
        v5 += v120;
        if (v121)
          goto LABEL_389;
        v14 = v14 - v120;
        v8 = v223;
LABEL_238:
        *(_DWORD *)(v6 + 92) = 0;
        *(_DWORD *)(v6 + 8) = 16187;
LABEL_239:
        if ((*(_BYTE *)(v6 + 25) & 0x10) == 0)
        {
          v127 = *(_QWORD *)(v6 + 48);
          if (v127)
            *(_QWORD *)(v127 + 56) = 0;
          goto LABEL_258;
        }
        if (!(_DWORD)v14)
          goto LABEL_391;
        v223 = v8;
        v120 = 0;
        do
        {
          v128 = v5[v120];
          v129 = *(_QWORD *)(v6 + 48);
          if (v129)
          {
            v130 = *(_QWORD *)(v129 + 56);
            if (v130)
            {
              v131 = *(unsigned int *)(v6 + 92);
              if (v131 < *(_DWORD *)(v129 + 64))
              {
                *(_DWORD *)(v6 + 92) = v131 + 1;
                *(_BYTE *)(v130 + v131) = v128;
              }
            }
          }
          ++v120;
          if (v128)
            v132 = v120 >= v14;
          else
            v132 = 1;
        }
        while (!v132);
        if ((*(_BYTE *)(v6 + 25) & 2) != 0 && (*(_BYTE *)(v6 + 16) & 4) != 0)
        {
          v133 = sub_1D4BA5CCC(*(_QWORD *)(v6 + 32), (char *)v5, v120);
          v11 = (unsigned __int16 *)(v6 + 152);
          v10 = (_WORD **)(v6 + 144);
          *(_QWORD *)(v6 + 32) = v133;
        }
        v5 += v120;
        if (v128)
        {
LABEL_389:
          LODWORD(v14) = v14 - v120;
          v16 = v217;
          LODWORD(v8) = v223;
          goto LABEL_392;
        }
        v14 = v14 - v120;
        v8 = v223;
LABEL_258:
        *(_DWORD *)(v6 + 8) = 16188;
LABEL_259:
        v134 = *(_DWORD *)(v6 + 24);
        if ((v134 & 0x200) == 0)
        {
LABEL_268:
          v47 = v12;
          v136 = v8;
          v137 = *(_QWORD *)(v6 + 48);
          if (v137)
          {
            *(_DWORD *)(v137 + 68) = (v134 >> 9) & 1;
            *(_DWORD *)(v137 + 72) = 1;
          }
          v138 = sub_1D4BA5CCC(0, 0, 0);
          *(_QWORD *)(v6 + 32) = v138;
          *(_QWORD *)(a1 + 96) = v138;
          *(_DWORD *)(v6 + 8) = 16191;
          v11 = (unsigned __int16 *)(v6 + 152);
          v10 = (_WORD **)(v6 + 144);
          v8 = v136;
          goto LABEL_271;
        }
        if (v12 <= 0xF)
        {
          v18 = 0;
          do
          {
            if (!(_DWORD)v14)
              goto LABEL_382;
            v14 = (v14 - 1);
            v135 = *v5++;
            v9 += (unint64_t)v135 << (v12 + v18);
            v18 += 8;
          }
          while ((unint64_t)v12 + v18 - 8 < 8);
          v12 = (v12 + v18);
        }
        if ((*(_BYTE *)(v6 + 16) & 4) == 0 || v9 == *(unsigned __int16 *)(v6 + 32))
        {
          v9 = 0;
          v12 = 0;
          goto LABEL_268;
        }
        v24 = "header crc mismatch";
LABEL_374:
        *(_QWORD *)(a1 + 48) = v24;
        v33 = 16209;
LABEL_375:
        *(_DWORD *)(v6 + 8) = v33;
LABEL_376:
        v7 = *(_DWORD *)(v6 + 8);
        continue;
      case 16182:
        v218 = v8;
        v25 = v225;
        if (v12 > 0x1F)
          goto LABEL_172;
        goto LABEL_168;
      case 16183:
        v218 = v8;
        v25 = v225;
        if (v12 > 0xF)
          goto LABEL_182;
        goto LABEL_178;
      case 16184:
        v26 = *(_DWORD *)(v6 + 24);
        if ((v26 & 0x400) == 0)
        {
          v27 = v12;
          goto LABEL_188;
        }
        if (v12 <= 0xF)
          goto LABEL_190;
LABEL_194:
        *(_DWORD *)(v6 + 92) = v9;
        v106 = *(_QWORD *)(v6 + 48);
        if (v106)
          *(_DWORD *)(v106 + 32) = v9;
        if ((v26 & 0x200) != 0 && (*(_BYTE *)(v6 + 16) & 4) != 0)
        {
          LOWORD(v226) = v9;
          v107 = v8;
          v108 = sub_1D4BA5CCC(*(_QWORD *)(v6 + 32), (char *)&v226, 2u);
          v8 = v107;
          v11 = (unsigned __int16 *)(v6 + 152);
          v10 = (_WORD **)(v6 + 144);
          v9 = 0;
          v27 = 0;
          *(_QWORD *)(v6 + 32) = v108;
        }
        else
        {
          v9 = 0;
          v27 = 0;
        }
        goto LABEL_200;
      case 16185:
        goto LABEL_201;
      case 16186:
        goto LABEL_219;
      case 16187:
        goto LABEL_239;
      case 16188:
        goto LABEL_259;
      case 16189:
        if (v12 > 0x1F)
          goto LABEL_39;
        v28 = v12;
        do
        {
          if (!(_DWORD)v14)
            goto LABEL_384;
          v29 = *v5++;
          v14 = (v14 - 1);
          v9 += (unint64_t)v29 << v28;
          v125 = v28 >= 0x18;
          v28 += 8;
        }
        while (!v125);
LABEL_39:
        LODWORD(v12) = 0;
        v30 = bswap32(v9);
        *(_QWORD *)(v6 + 32) = v30;
        *(_QWORD *)(a1 + 96) = v30;
        *(_DWORD *)(v6 + 8) = 16190;
        v9 = 0;
LABEL_40:
        if (*(_DWORD *)(v6 + 20))
        {
          v31 = v8;
          v32 = sub_1D4BA5980(0, 0, 0);
          v8 = v31;
          v11 = (unsigned __int16 *)(v6 + 152);
          v10 = (_WORD **)(v6 + 144);
          *(_QWORD *)(v6 + 32) = v32;
          *(_QWORD *)(a1 + 96) = v32;
          *(_DWORD *)(v6 + 8) = 16191;
LABEL_42:
          if ((a2 - 5) < 2)
            goto LABEL_391;
LABEL_43:
          if (*(_DWORD *)(v6 + 12))
          {
            v9 >>= v12 & 7;
            v12 = v12 & 0xFFFFFFF8;
            v33 = 16206;
            goto LABEL_375;
          }
          if (v12 < 3)
          {
            if (!(_DWORD)v14)
            {
              v15 = v217;
LABEL_430:
              v16 = v15;
              goto LABEL_392;
            }
            v9 += (unint64_t)*v5 << v12;
          }
          *(_DWORD *)(v6 + 12) = v9 & 1;
          __asm { BR              X11 }
        }
        *(_QWORD *)(a1 + 24) = v4;
        *(_DWORD *)(a1 + 32) = v225;
        *(_QWORD *)a1 = v5;
        *(_DWORD *)(a1 + 8) = v14;
        *(_QWORD *)(v6 + 80) = v9;
        result = 2;
        *(_DWORD *)(v6 + 88) = v12;
        return result;
      case 16190:
        goto LABEL_40;
      case 16191:
        goto LABEL_42;
      case 16192:
        goto LABEL_43;
      case 16193:
        v9 >>= v12 & 7;
        v34 = v12 & 0xFFFFFFF8;
        if (v34 <= 0x1F)
        {
          v35 = 0;
          while ((_DWORD)v14)
          {
            v14 = (v14 - 1);
            v36 = *v5++;
            v9 += (unint64_t)v36 << ((v12 & 0xF8u) + v35);
            v35 += 8;
            if ((unint64_t)(v34 + v35 - 8) >= 0x18)
            {
              v12 = (v34 + v35);
              goto LABEL_99;
            }
          }
          LODWORD(v12) = (v12 & 0xFFFFFFF8) + v35;
          goto LABEL_391;
        }
        v12 = v12 & 0xFFFFFFF8;
LABEL_99:
        if (((v9 >> 16) ^ 0xFFFF) != (unsigned __int16)v9)
        {
          v24 = "invalid stored block lengths";
          goto LABEL_374;
        }
        v12 = 0;
        *(_DWORD *)(v6 + 92) = (unsigned __int16)v9;
        *(_DWORD *)(v6 + 8) = 16194;
        v9 = 0;
        if (a2 == 6)
          goto LABEL_391;
LABEL_101:
        *(_DWORD *)(v6 + 8) = 16195;
LABEL_102:
        v63 = *(_DWORD *)(v6 + 92);
        if (v63)
        {
          if (v63 >= v14)
            v63 = v14;
          if (v63 >= v225)
            v64 = v225;
          else
            v64 = v63;
          if ((_DWORD)v64)
          {
            v65 = v8;
            memcpy(v4, v5, v64);
            v11 = (unsigned __int16 *)(v6 + 152);
            v8 = v65;
            v10 = (_WORD **)(v6 + 144);
            v14 = (v14 - v64);
            v5 += v64;
            v225 -= v64;
            v4 += v64;
            *(_DWORD *)(v6 + 92) -= v64;
            goto LABEL_376;
          }
          goto LABEL_391;
        }
        goto LABEL_362;
      case 16194:
        goto LABEL_101;
      case 16195:
        goto LABEL_102;
      case 16196:
        if (v12 > 0xD)
          goto LABEL_59;
        v18 = 0;
        do
        {
          if (!(_DWORD)v14)
            goto LABEL_382;
          v14 = (v14 - 1);
          v37 = *v5++;
          v9 += (unint64_t)v37 << (v12 + v18);
          v18 += 8;
        }
        while ((unint64_t)v12 + v18 - 8 < 6);
        LODWORD(v12) = v12 + v18;
LABEL_59:
        v38 = v9 & 0x1F;
        v39 = (v9 >> 5) & 0x1F;
        *(_DWORD *)(v6 + 132) = (v9 & 0x1F) + 257;
        *(_DWORD *)(v6 + 136) = v39 + 1;
        v40 = ((v9 >> 10) & 0xF) + 4;
        *(_DWORD *)(v6 + 128) = v40;
        v9 >>= 14;
        v12 = (v12 - 14);
        if (v38 > 0x1D || v39 >= 0x1E)
        {
          v24 = "too many length or distance symbols";
          goto LABEL_374;
        }
        v41 = v13;
        v219 = v8;
        v42 = v225;
        v43 = 0;
        *(_DWORD *)(v6 + 140) = 0;
        *(_DWORD *)(v6 + 8) = 16197;
LABEL_63:
        LODWORD(v44) = v12;
        do
        {
          if (v44 <= 2)
          {
            if (!(_DWORD)v14)
            {
              LODWORD(v12) = v44;
              v16 = v217;
              LODWORD(v8) = v219;
              v225 = v42;
              goto LABEL_392;
            }
            v14 = (v14 - 1);
            v45 = *v5++;
            v9 += (unint64_t)v45 << v44;
            LODWORD(v44) = v44 + 8;
          }
          v46 = word_1D4BDBE86[v43];
          *(_DWORD *)(v6 + 140) = v43 + 1;
          *(_WORD *)(v6 + 2 * v46 + 152) = v9 & 7;
          v9 >>= 3;
          v44 = (v44 - 3);
          ++v43;
        }
        while (v40 != v43);
        v12 = v44;
        v43 = v40;
LABEL_69:
        v47 = v12;
        if (v43 <= 0x12)
        {
          do
            *(_WORD *)(v6 + 2 * word_1D4BDBE86[v43++] + 152) = 0;
          while ((_DWORD)v43 != 19);
          *(_DWORD *)(v6 + 140) = 19;
        }
        *(_QWORD *)(v6 + 144) = v215;
        *(_QWORD *)(v6 + 104) = v215;
        *(_DWORD *)(v6 + 120) = 7;
        v48 = sub_1D4BAA3C8(0, v11, 0x13u, v10, v214, v41);
        v225 = v42;
        if (v48)
        {
          v217 = v48;
          *(_QWORD *)(a1 + 48) = "invalid code lengths set";
          *(_DWORD *)(v6 + 8) = 16209;
          v8 = v219;
          v11 = (unsigned __int16 *)(v6 + 152);
          v10 = (_WORD **)(v6 + 144);
          v13 = v41;
LABEL_271:
          v12 = v47;
          goto LABEL_376;
        }
        v49 = 0;
        v217 = 0;
        *(_DWORD *)(v6 + 140) = 0;
        *(_DWORD *)(v6 + 8) = 16198;
        v8 = v219;
        v11 = (unsigned __int16 *)(v6 + 152);
        v10 = (_WORD **)(v6 + 144);
        v13 = v41;
LABEL_111:
        v66 = *(_DWORD *)(v6 + 132);
        v67 = *(_DWORD *)(v6 + 136) + v66;
        if (v49 >= v67)
        {
LABEL_145:
          if (!*(_WORD *)(v6 + 664))
          {
            *(_QWORD *)(a1 + 48) = "invalid code -- missing end-of-block";
            *(_DWORD *)(v6 + 8) = 16209;
            goto LABEL_376;
          }
          v220 = v8;
          *(_QWORD *)(v6 + 144) = v215;
          *(_QWORD *)(v6 + 104) = v215;
          *(_DWORD *)(v6 + 120) = 9;
          v88 = v10;
          v89 = v13;
          v90 = v11;
          v91 = sub_1D4BAA3C8(1, v11, v66, v10, v214, v89);
          if (v91)
          {
            v217 = v91;
            *(_QWORD *)(a1 + 48) = "invalid literal/lengths set";
            *(_DWORD *)(v6 + 8) = 16209;
            v10 = v88;
            v11 = v90;
            v13 = v89;
LABEL_161:
            v8 = v220;
            goto LABEL_376;
          }
          *(_QWORD *)(v6 + 112) = *(_QWORD *)(v6 + 144);
          *(_DWORD *)(v6 + 124) = 6;
          v94 = sub_1D4BAA3C8(2, &v90[*(unsigned int *)(v6 + 132)], *(_DWORD *)(v6 + 136), v88, (unsigned int *)(v6 + 124), v89);
          v13 = v89;
          if (v94)
          {
            v217 = v94;
            *(_QWORD *)(a1 + 48) = "invalid distances set";
            *(_DWORD *)(v6 + 8) = 16209;
            v11 = (unsigned __int16 *)(v6 + 152);
            v10 = (_WORD **)(v6 + 144);
            goto LABEL_161;
          }
          v217 = 0;
          *(_DWORD *)(v6 + 8) = 16199;
          v11 = (unsigned __int16 *)(v6 + 152);
          v10 = (_WORD **)(v6 + 144);
          v8 = v220;
          if (a2 == 6)
            goto LABEL_391;
LABEL_294:
          *(_DWORD *)(v6 + 8) = 16200;
LABEL_295:
          if (v14 >= 6 && v225 >= 0x102)
          {
            *(_QWORD *)(a1 + 24) = v4;
            *(_DWORD *)(a1 + 32) = v225;
            *(_QWORD *)a1 = v5;
            *(_DWORD *)(a1 + 8) = v14;
            *(_QWORD *)(v6 + 80) = v9;
            *(_DWORD *)(v6 + 88) = v12;
            v20 = v8;
            sub_1D4BAA7F4((unsigned __int8 **)a1, v8);
            v4 = *(_BYTE **)(a1 + 24);
            v225 = *(_DWORD *)(a1 + 32);
            v5 = *(unsigned __int8 **)a1;
            v14 = *(unsigned int *)(a1 + 8);
            v9 = *(_QWORD *)(v6 + 80);
            v12 = *(unsigned int *)(v6 + 88);
            if (*(_DWORD *)(v6 + 8) == 16191)
              *(_DWORD *)(v6 + 7148) = -1;
LABEL_299:
            v11 = (unsigned __int16 *)(v6 + 152);
            v10 = (_WORD **)(v6 + 144);
            v8 = v20;
            goto LABEL_376;
          }
          *(_DWORD *)(v6 + 7148) = 0;
          v142 = *(_QWORD *)(v6 + 104);
          v143 = -1 << *(_DWORD *)(v6 + 120);
          v144 = (unsigned __int8 *)(v142 + 4 * (v9 & ~v143));
          LODWORD(v145) = v144[1];
          if (v12 < v145)
          {
            v146 = 0;
            v147 = ~v143;
            LODWORD(v148) = v14;
            v149 = v5;
            do
            {
              if (!(_DWORD)v148)
                goto LABEL_381;
              v148 = (v148 - 1);
              v150 = *v149++;
              v9 += (unint64_t)v150 << (v12 + v146);
              v144 = (unsigned __int8 *)(v142 + 4 * (v147 & v9));
              v145 = v144[1];
              v146 += 8;
            }
            while ((unint64_t)v12 + v146 < v145);
            LODWORD(v12) = v12 + v146;
            v5 = v149;
            v14 = v148;
          }
          v151 = v145;
          v152 = *((unsigned __int16 *)v144 + 1);
          v153 = *v144;
          if ((v153 - 1) > 0xE)
          {
            v151 = 0;
          }
          else
          {
            v154 = -1 << (v145 + v153);
            v155 = (unsigned __int8 *)(v142 + 4 * (((v9 & ~v154) >> v145) + v152));
            v156 = v155[1];
            if ((int)v145 + v156 > v12)
            {
              v157 = 0;
              v158 = ~v154;
              LODWORD(v159) = v14;
              v160 = v5;
              do
              {
                if (!(_DWORD)v159)
                  goto LABEL_381;
                v161 = *v160++;
                v159 = (v159 - 1);
                v9 += (unint64_t)v161 << (v12 + v157);
                v155 = (unsigned __int8 *)(v142 + 4 * (((v9 & v158) >> v145) + v152));
                v156 = v155[1];
                v157 += 8;
              }
              while ((unint64_t)v12 + v157 < (v145 + v156));
              LODWORD(v12) = v12 + v157;
              v5 = v160;
              v14 = v159;
            }
            v152 = *((unsigned __int16 *)v155 + 1);
            v153 = *v155;
            v9 >>= v145;
            LODWORD(v12) = v12 - v145;
            LODWORD(v145) = v156;
          }
          v9 >>= v145;
          v12 = (v12 - v145);
          *(_DWORD *)(v6 + 7148) = v151 + v145;
          *(_DWORD *)(v6 + 92) = v152;
          if (!v153)
          {
            v33 = 16205;
            goto LABEL_375;
          }
          if ((v153 & 0x20) != 0)
          {
            *(_DWORD *)(v6 + 7148) = -1;
LABEL_362:
            v33 = 16191;
            goto LABEL_375;
          }
          if ((v153 & 0x40) != 0)
          {
            v24 = "invalid literal/length code";
            goto LABEL_374;
          }
          v50 = v153 & 0xF;
          *(_DWORD *)(v6 + 100) = v50;
          *(_DWORD *)(v6 + 8) = 16201;
          if ((v153 & 0xF) != 0)
          {
LABEL_76:
            if (v12 < v50)
            {
              v51 = v12;
              LODWORD(v52) = v14;
              v53 = v5;
              while ((_DWORD)v52)
              {
                v52 = (v52 - 1);
                v54 = *v53++;
                v9 += (unint64_t)v54 << v51;
                v51 += 8;
                if (v51 >= v50)
                  goto LABEL_152;
              }
              goto LABEL_381;
            }
            v53 = v5;
            v52 = v14;
            v51 = v12;
LABEL_152:
            v92 = *(_DWORD *)(v6 + 92) + (v9 & ~(-1 << v50));
            *(_DWORD *)(v6 + 92) = v92;
            v9 >>= v50;
            LODWORD(v12) = v51 - v50;
            *(_DWORD *)(v6 + 7148) += v50;
            v5 = v53;
            v14 = v52;
          }
          else
          {
LABEL_317:
            v92 = *(_DWORD *)(v6 + 92);
          }
          *(_DWORD *)(v6 + 7152) = v92;
          *(_DWORD *)(v6 + 8) = 16202;
LABEL_319:
          v162 = *(_QWORD *)(v6 + 112);
          v163 = -1 << *(_DWORD *)(v6 + 124);
          v164 = (unsigned __int8 *)(v162 + 4 * (v9 & ~v163));
          LODWORD(v165) = v164[1];
          if (v12 < v165)
          {
            v166 = 0;
            v167 = ~v163;
            LODWORD(v168) = v14;
            v169 = v5;
            while ((_DWORD)v168)
            {
              v168 = (v168 - 1);
              v170 = *v169++;
              v9 += (unint64_t)v170 << (v12 + v166);
              v164 = (unsigned __int8 *)(v162 + 4 * (v167 & v9));
              v165 = v164[1];
              v166 += 8;
              if ((unint64_t)v12 + v166 >= v165)
              {
                LODWORD(v12) = v12 + v166;
                v5 = v169;
                v14 = v168;
                goto LABEL_324;
              }
            }
            goto LABEL_381;
          }
LABEL_324:
          v171 = *((unsigned __int16 *)v164 + 1);
          LODWORD(v172) = *v164;
          if (v172 >= 0x10)
          {
            v180 = *(_DWORD *)(v6 + 7148);
          }
          else
          {
            v173 = -1 << (v165 + v172);
            v172 = v162 + 4 * (((v9 & ~v173) >> v165) + v171);
            v174 = *(unsigned __int8 *)(v172 + 1);
            if ((int)v165 + v174 > v12)
            {
              v175 = 0;
              v176 = ~v173;
              LODWORD(v177) = v14;
              v178 = v5;
              while ((_DWORD)v177)
              {
                v179 = *v178++;
                v177 = (v177 - 1);
                v9 += (unint64_t)v179 << (v12 + v175);
                v172 = v162 + 4 * (((v9 & v176) >> v165) + v171);
                v174 = *(unsigned __int8 *)(v172 + 1);
                v175 += 8;
                if ((unint64_t)v12 + v175 >= (v165 + v174))
                {
                  LODWORD(v12) = v12 + v175;
                  v5 = v178;
                  v14 = v177;
                  goto LABEL_330;
                }
              }
              goto LABEL_381;
            }
LABEL_330:
            v171 = *(unsigned __int16 *)(v172 + 2);
            LOBYTE(v172) = *(_BYTE *)v172;
            v9 >>= v165;
            LODWORD(v12) = v12 - v165;
            v180 = *(_DWORD *)(v6 + 7148) + v165;
            LODWORD(v165) = v174;
          }
          v9 >>= v165;
          v12 = (v12 - v165);
          *(_DWORD *)(v6 + 7148) = v180 + v165;
          if ((v172 & 0x40) != 0)
          {
            v24 = "invalid distance code";
            goto LABEL_374;
          }
          v55 = v172 & 0xF;
          *(_DWORD *)(v6 + 96) = v171;
          *(_DWORD *)(v6 + 100) = v55;
          *(_DWORD *)(v6 + 8) = 16203;
          if ((v172 & 0xF) != 0)
          {
LABEL_334:
            if (v12 < v55)
            {
              v181 = v12;
              LODWORD(v182) = v14;
              v183 = v5;
              while ((_DWORD)v182)
              {
                v182 = (v182 - 1);
                v184 = *v183++;
                v9 += (unint64_t)v184 << v181;
                v181 += 8;
                if (v181 >= v55)
                  goto LABEL_341;
              }
LABEL_381:
              LODWORD(v12) = v12 + 8 * v14;
              v16 = v217;
              v5 += v14;
              LODWORD(v14) = 0;
              goto LABEL_392;
            }
            v183 = v5;
            v182 = v14;
            v181 = v12;
LABEL_341:
            *(_DWORD *)(v6 + 96) += v9 & ~(-1 << v55);
            v9 >>= v55;
            v12 = v181 - v55;
            *(_DWORD *)(v6 + 7148) += v55;
            v5 = v183;
            v14 = v182;
          }
LABEL_342:
          *(_DWORD *)(v6 + 8) = 16204;
LABEL_343:
          if (v225)
          {
            v185 = *(unsigned int *)(v6 + 96);
            if (v185 <= v8 - v225)
            {
              v187 = &v4[-v185];
              v188 = *(_DWORD *)(v6 + 92);
              v189 = v188;
            }
            else
            {
              v186 = v185 - (v8 - v225);
              if (v186 > *(_DWORD *)(v6 + 64) && *(_DWORD *)(v6 + 7144))
              {
                v24 = "invalid distance too far back";
                goto LABEL_374;
              }
              v190 = *(_DWORD *)(v6 + 68);
              v189 = v186 - v190;
              if (v186 <= v190)
              {
                v191 = v190 - v186;
                v189 = v186;
              }
              else
              {
                v191 = *(_DWORD *)(v6 + 60) - v189;
              }
              v187 = (char *)(*(_QWORD *)(v6 + 72) + v191);
              v188 = *(_DWORD *)(v6 + 92);
              if (v189 >= v188)
                v189 = *(_DWORD *)(v6 + 92);
            }
            if (v189 >= v225)
              v189 = v225;
            *(_DWORD *)(v6 + 92) = v188 - v189;
            v192 = v189;
            do
            {
              v193 = *v187++;
              *v4++ = v193;
              --v192;
            }
            while (v192);
            v225 -= v189;
            if (!*(_DWORD *)(v6 + 92))
            {
LABEL_359:
              v33 = 16200;
              goto LABEL_375;
            }
            goto LABEL_376;
          }
LABEL_390:
          v225 = 0;
          goto LABEL_391;
        }
        v68 = *(_QWORD *)(v6 + 104);
        v69 = ~(-1 << *(_DWORD *)(v6 + 120));
        while (1)
        {
          v70 = v69 & v9;
          LODWORD(v71) = *(unsigned __int8 *)(v68 + 4 * v70 + 1);
          if (v12 < v71)
          {
            v72 = 0;
            LODWORD(v73) = v14;
            v74 = v5;
            do
            {
              if (!(_DWORD)v73)
                goto LABEL_381;
              v73 = (v73 - 1);
              v75 = *v74++;
              v9 += (unint64_t)v75 << (v12 + v72);
              v70 = v69 & v9;
              v71 = *(unsigned __int8 *)(v68 + 4 * v70 + 1);
              v72 += 8;
            }
            while ((unint64_t)v12 + v72 < v71);
            LODWORD(v12) = v12 + v72;
            v5 = v74;
            v14 = v73;
          }
          v76 = *(unsigned __int16 *)(v68 + 4 * v70 + 2);
          if (v76 > 0xF)
            break;
          v9 >>= v71;
          v12 = (v12 - v71);
          v77 = v6 + 2 * v49++;
          *(_DWORD *)(v6 + 140) = v49;
          *(_WORD *)(v77 + 152) = v76;
LABEL_144:
          if (v49 >= v67)
            goto LABEL_145;
        }
        if (v76 != 16)
        {
          if (v76 == 17)
          {
            v78 = (v71 + 3);
            if (v12 < v78)
            {
              v79 = 0;
              do
              {
                if (!(_DWORD)v14)
                  goto LABEL_388;
                v80 = *v5++;
                v14 = (v14 - 1);
                v9 += (unint64_t)v80 << (v12 + v79);
                v79 += 8;
              }
              while ((unint64_t)v12 + v79 < v78);
              LODWORD(v12) = v12 + v79;
            }
            v81 = 0;
            v82 = ((v9 >> v71) & 7) + 3;
            v9 = v9 >> v71 >> 3;
            v12 = (v12 - v71 - 3);
          }
          else
          {
            v85 = (v71 + 7);
            if (v12 < v85)
            {
              v79 = 0;
              do
              {
                if (!(_DWORD)v14)
                  goto LABEL_388;
                v86 = *v5++;
                v14 = (v14 - 1);
                v9 += (unint64_t)v86 << (v12 + v79);
                v79 += 8;
              }
              while ((unint64_t)v12 + v79 < v85);
              LODWORD(v12) = v12 + v79;
            }
            v81 = 0;
            v82 = ((v9 >> v71) & 0x7F) + 11;
            v9 = v9 >> v71 >> 7;
            v12 = (v12 - v71 - 7);
          }
LABEL_141:
          if (v82 + v49 > v67)
            goto LABEL_377;
          do
          {
            v87 = v6 + 2 * v49++;
            *(_WORD *)(v87 + 152) = v81;
            --v82;
          }
          while (v82);
          *(_DWORD *)(v6 + 140) = v49;
          goto LABEL_144;
        }
        v83 = (v71 + 2);
        if (v12 >= v83)
          goto LABEL_133;
        v79 = 0;
        while ((_DWORD)v14)
        {
          v84 = *v5++;
          v14 = (v14 - 1);
          v9 += (unint64_t)v84 << (v12 + v79);
          v79 += 8;
          if ((unint64_t)v12 + v79 >= v83)
          {
            LODWORD(v12) = v12 + v79;
LABEL_133:
            v9 >>= v71;
            v12 = (v12 - v71);
            if (v49)
            {
              v81 = *(_WORD *)(v6 + 2 * (v49 - 1) + 152);
              v82 = (v9 & 3) + 3;
              v9 >>= 2;
              v12 = (v12 - 2);
              goto LABEL_141;
            }
LABEL_377:
            v24 = "invalid bit length repeat";
            goto LABEL_374;
          }
        }
LABEL_388:
        LODWORD(v12) = v12 + v79;
LABEL_391:
        v16 = v217;
LABEL_392:
        *(_QWORD *)(a1 + 24) = v4;
        *(_DWORD *)(a1 + 32) = v225;
        *(_QWORD *)a1 = v5;
        *(_DWORD *)(a1 + 8) = v14;
        *(_QWORD *)(v6 + 80) = v9;
        *(_DWORD *)(v6 + 88) = v12;
        if (!*(_DWORD *)(v6 + 60))
        {
          if ((_DWORD)v8 == v225 || (v202 = *(_DWORD *)(v6 + 8), v202 > 0x3F50) || a2 == 4 && v202 > 0x3F4D)
          {
LABEL_402:
            v203 = v8 - v225;
            *(_QWORD *)(a1 + 16) += v216 - v14;
            *(_QWORD *)(a1 + 40) += v203;
            *(_QWORD *)(v6 + 40) += v203;
            if ((*(_BYTE *)(v6 + 16) & 4) != 0 && (_DWORD)v8 != v225)
            {
              v204 = v8;
              v205 = *(_QWORD *)(v6 + 32);
              v206 = (char *)(*(_QWORD *)(a1 + 24) - v203);
              if (*(_DWORD *)(v6 + 24))
                v207 = sub_1D4BA5CCC(v205, v206, v203);
              else
                v207 = sub_1D4BA5980(v205, (unsigned __int8 *)v206, v203);
              *(_QWORD *)(v6 + 32) = v207;
              *(_QWORD *)(a1 + 96) = v207;
              LODWORD(v8) = v204;
            }
            v208 = *(_DWORD *)(v6 + 8);
            if (v208 == 16194 || v208 == 16199)
              v210 = 256;
            else
              v210 = 0;
            *(_DWORD *)(a1 + 88) = *(_DWORD *)(v6 + 88)
                                 + ((*(_DWORD *)(v6 + 12) != 0) << 6)
                                 + ((v208 == 16191) << 7)
                                 + v210;
            if (((_DWORD)v8 == v225 && v216 == (_DWORD)v14 || a2 == 4) && v16 == 0)
              return 4294967291;
            else
              return v16;
          }
        }
        v200 = (uint64_t)v4;
        v201 = v8;
        if (!sub_1D4BAA24C(a1, v200, v8 - v225))
        {
          LODWORD(v14) = *(_DWORD *)(a1 + 8);
          v225 = *(_DWORD *)(a1 + 32);
          LODWORD(v8) = v201;
          goto LABEL_402;
        }
        *(_DWORD *)(v6 + 8) = 16210;
        return 4294967292;
      case 16197:
        v41 = v13;
        v219 = v8;
        v42 = v225;
        v40 = *(unsigned int *)(v6 + 128);
        v43 = *(unsigned int *)(v6 + 140);
        if (v43 < v40)
          goto LABEL_63;
        goto LABEL_69;
      case 16198:
        v49 = *(_DWORD *)(v6 + 140);
        goto LABEL_111;
      case 16199:
        goto LABEL_294;
      case 16200:
        goto LABEL_295;
      case 16201:
        v50 = *(_DWORD *)(v6 + 100);
        if (v50)
          goto LABEL_76;
        goto LABEL_317;
      case 16202:
        goto LABEL_319;
      case 16203:
        v55 = *(_DWORD *)(v6 + 100);
        if (!v55)
          goto LABEL_342;
        goto LABEL_334;
      case 16204:
        goto LABEL_343;
      case 16205:
        if (!v225)
          goto LABEL_390;
        *v4++ = *(_DWORD *)(v6 + 92);
        --v225;
        goto LABEL_359;
      case 16206:
        v56 = *(_DWORD *)(v6 + 16);
        if (!v56)
          goto LABEL_281;
        if (v12 > 0x1F)
          goto LABEL_91;
        v18 = 0;
        while ((_DWORD)v14)
        {
          v14 = (v14 - 1);
          v57 = *v5++;
          v9 += (unint64_t)v57 << (v12 + v18);
          v18 += 8;
          if ((unint64_t)v12 + v18 - 8 >= 0x18)
          {
            v12 = (v12 + v18);
LABEL_91:
            v58 = v8 - v225;
            *(_QWORD *)(a1 + 40) += v58;
            *(_QWORD *)(v6 + 40) += v58;
            v59 = v56 & 4;
            if ((v56 & 4) != 0 && (_DWORD)v8 != v225)
            {
              v60 = *(_QWORD *)(v6 + 32);
              v61 = &v4[-v58];
              if (*(_DWORD *)(v6 + 24))
                v62 = sub_1D4BA5CCC(v60, v61, v58);
              else
                v62 = sub_1D4BA5980(v60, (unsigned __int8 *)v61, v58);
              *(_QWORD *)(v6 + 32) = v62;
              *(_QWORD *)(a1 + 96) = v62;
              v56 = *(_DWORD *)(v6 + 16);
              v59 = v56 & 4;
              v11 = (unsigned __int16 *)(v6 + 152);
              v10 = (_WORD **)(v6 + 144);
            }
            if (v59)
            {
              v139 = bswap32(v9);
              v140 = *(_DWORD *)(v6 + 24) ? v9 : v139;
              if (v140 != *(_QWORD *)(v6 + 32))
              {
                *(_QWORD *)(a1 + 48) = "incorrect data check";
                *(_DWORD *)(v6 + 8) = 16209;
                v8 = v225;
                goto LABEL_376;
              }
            }
            v9 = 0;
            v12 = 0;
            v8 = v225;
LABEL_281:
            *(_DWORD *)(v6 + 8) = 16207;
LABEL_282:
            if (v56 && *(_DWORD *)(v6 + 24))
            {
              if (v12 <= 0x1F)
              {
                v18 = 0;
                do
                {
                  if (!(_DWORD)v14)
                    goto LABEL_382;
                  v14 = (v14 - 1);
                  v141 = *v5++;
                  v9 += (unint64_t)v141 << (v12 + v18);
                  v18 += 8;
                }
                while ((unint64_t)v12 + v18 - 8 < 0x18);
                v12 = (v12 + v18);
              }
              if ((v56 & 4) != 0 && v9 != *(_DWORD *)(v6 + 40))
              {
                v24 = "incorrect length check";
                goto LABEL_374;
              }
              v9 = 0;
              LODWORD(v12) = 0;
            }
            *(_DWORD *)(v6 + 8) = 16208;
            v16 = 1;
            goto LABEL_392;
          }
        }
LABEL_382:
        LODWORD(v12) = v12 + v18;
        goto LABEL_391;
      case 16207:
        v56 = *(_DWORD *)(v6 + 16);
        goto LABEL_282;
      case 16208:
        goto LABEL_392;
      case 16209:
        goto LABEL_430;
      case 16210:
        return 4294967292;
      default:
        return 4294967294;
    }
  }
}

uint64_t sub_1D4BAA24C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  size_t v12;
  size_t v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(char **)(v6 + 72);
  if (v7
    || (v8 = 1,
        v7 = (char *)(*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(a1 + 64))(*(_QWORD *)(a1 + 80), (1 << *(_DWORD *)(v6 + 56)), 1), (*(_QWORD *)(v6 + 72) = v7) != 0))
  {
    v9 = *(_DWORD *)(v6 + 60);
    if (!v9)
    {
      v9 = 1 << *(_DWORD *)(v6 + 56);
      *(_QWORD *)(v6 + 64) = 0;
      *(_DWORD *)(v6 + 60) = v9;
    }
    if (v9 <= a3)
    {
      memcpy(v7, (const void *)(a2 - v9), v9);
      v8 = 0;
      v14 = *(_DWORD *)(v6 + 60);
      *(_DWORD *)(v6 + 68) = 0;
      goto LABEL_16;
    }
    v10 = *(unsigned int *)(v6 + 68);
    v11 = v9 - v10;
    if (v9 - v10 >= a3)
      v12 = a3;
    else
      v12 = v11;
    memcpy(&v7[v10], (const void *)(a2 - a3), v12);
    if (v11 < a3)
    {
      v13 = a3 - v12;
      memcpy(*(void **)(v6 + 72), (const void *)(a2 - v13), v13);
      v8 = 0;
      v14 = *(_DWORD *)(v6 + 60);
      *(_DWORD *)(v6 + 68) = v13;
LABEL_16:
      *(_DWORD *)(v6 + 64) = v14;
      return v8;
    }
    v8 = 0;
    v15 = *(_DWORD *)(v6 + 68) + v12;
    v17 = *(_DWORD *)(v6 + 60);
    v16 = *(_DWORD *)(v6 + 64);
    if (v15 == v17)
      v15 = 0;
    *(_DWORD *)(v6 + 68) = v15;
    if (v16 < v17)
    {
      v8 = 0;
      v14 = v16 + v12;
      goto LABEL_16;
    }
  }
  return v8;
}

uint64_t sub_1D4BAA370(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  if (sub_1D4BA8670((_QWORD *)a1))
    return 4294967294;
  v3 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(v3 + 72))
  {
    (*(void (**)(_QWORD, _QWORD))(a1 + 72))(*(_QWORD *)(a1 + 80), *(_QWORD *)(v3 + 72));
    v3 = *(_QWORD *)(a1 + 56);
  }
  (*(void (**)(_QWORD, uint64_t))(a1 + 72))(*(_QWORD *)(a1 + 80), v3);
  result = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_1D4BAA3C8(int a1, unsigned __int16 *a2, unsigned int a3, _WORD **a4, unsigned int *a5, _WORD *a6)
{
  uint64_t v6;
  unsigned __int16 *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _WORD *v11;
  _WORD *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t i;
  uint64_t v18;
  int v19;
  uint64_t j;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _BYTE *v24;
  char v25;
  _WORD *v26;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  _WORD *v33;
  char v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  char v39;
  int v40;
  unsigned int v41;
  _WORD *v42;
  unsigned int v43;
  unsigned int v44;
  __int16 v45;
  int v46;
  unsigned int v47;
  int v48;
  char v49;
  BOOL v50;
  _WORD *v51;
  uint64_t v52;
  _WORD *v53;
  BOOL v54;
  unsigned __int16 v55[1];
  __int16 v56;
  _BYTE v57[28];
  _OWORD v58[2];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  memset(v58, 0, sizeof(v58));
  if (a3)
  {
    v6 = a3;
    v7 = a2;
    do
    {
      v8 = *v7++;
      ++*((_WORD *)v58 + v8);
      --v6;
    }
    while (v6);
  }
  v9 = *a5;
  v10 = 15;
  while (!*((_WORD *)v58 + v10))
  {
    if (!--v10)
    {
      v11 = *a4;
      *a4 += 2;
      *v11 = 320;
      v11[1] = 0;
      v12 = *a4;
      *a4 += 2;
      *v12 = 320;
      v12[1] = 0;
      v13 = 1;
LABEL_8:
      v14 = 0;
      *a5 = v13;
      return v14;
    }
  }
  if (v9 >= v10)
    v9 = v10;
  if (v10 < 2)
  {
    LODWORD(v15) = 1;
  }
  else
  {
    v15 = 1;
    while (!*((_WORD *)v58 + v15))
    {
      if (v10 == ++v15)
      {
        LODWORD(v15) = v10;
        break;
      }
    }
  }
  if (v9 <= v15)
    v13 = v15;
  else
    v13 = v9;
  v16 = 1;
  for (i = 2; i != 32; i += 2)
  {
    v16 = 2 * v16 - *(unsigned __int16 *)((char *)v58 + i);
    if (v16 < 0)
      return 0xFFFFFFFFLL;
  }
  if (!v16 || (v14 = 0xFFFFFFFFLL, a1) && v10 == 1)
  {
    v18 = 0;
    v19 = 0;
    v56 = 0;
    do
    {
      v19 += *(unsigned __int16 *)((char *)v58 + v18 + 2);
      *(_WORD *)&v57[v18] = v19;
      v18 += 2;
    }
    while (v18 != 28);
    if (a3)
    {
      for (j = 0; j != a3; ++j)
      {
        v21 = a2[j];
        if (a2[j])
        {
          v22 = v55[v21];
          v55[v21] = v22 + 1;
          a6[v22] = j;
        }
      }
    }
    if (a1)
    {
      if (a1 == 1)
      {
        v14 = 1;
        if (v13 > 9)
          return v14;
        v54 = 0;
        v23 = 257;
        v24 = &unk_1D4BDC76A;
        v25 = 1;
        v26 = &unk_1D4BDC72C;
      }
      else
      {
        v23 = 0;
        v24 = &unk_1D4BDC7E8;
        v26 = &unk_1D4BDC7A8;
        v54 = a1 == 2;
        v25 = 0;
        if (a1 == 2 && v13 > 9)
          return 1;
      }
    }
    else
    {
      v54 = 0;
      v25 = 0;
      v23 = 20;
      v26 = a6;
      v24 = a6;
    }
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 1 << v13;
    v32 = (1 << v13) - 1;
    v33 = *a4;
    v34 = v13;
    v35 = -1;
    while (2)
    {
      v36 = 1 << v34;
      do
      {
        v37 = (unsigned __int16)a6[v28];
        if (v37 + 1 >= v23)
        {
          if (v37 >= v23)
          {
            v38 = v24[2 * (v37 - v23)];
            LOWORD(v37) = v26[v37 - v23];
          }
          else
          {
            LOWORD(v37) = 0;
            v38 = 96;
          }
        }
        else
        {
          v38 = 0;
        }
        v39 = v15 - v29;
        v40 = -1 << (v15 - v29);
        v41 = v36;
        do
        {
          v42 = &v33[2 * (v30 >> v29) + 2 * v40 + 2 * v41];
          *(_BYTE *)v42 = v38;
          *((_BYTE *)v42 + 1) = v39;
          v42[1] = v37;
          v41 += v40;
        }
        while (v41);
        v43 = 1 << (v15 - 1);
        do
        {
          v44 = v43;
          v43 >>= 1;
        }
        while ((v44 & v30) != 0);
        if (v44)
          v30 = ((v44 - 1) & v30) + v44;
        else
          v30 = 0;
        ++v28;
        v45 = *((_WORD *)v58 + v15) - 1;
        *((_WORD *)v58 + v15) = v45;
        if (!v45)
        {
          if ((_DWORD)v15 == v10)
          {
            if (v30)
            {
              v53 = &v33[2 * v30];
              *(_BYTE *)v53 = 64;
              *((_BYTE *)v53 + 1) = v39;
              v53[1] = 0;
            }
            *a4 += 2 * v31;
            goto LABEL_8;
          }
          LODWORD(v15) = a2[(unsigned __int16)a6[v28]];
        }
      }
      while (v15 <= v13 || (v30 & v32) == v35);
      if (!v29)
        v29 = v13;
      v34 = v15 - v29;
      v46 = 1 << (v15 - v29);
      if (v15 < v10)
      {
        v34 = v10 - v29;
        v47 = v15;
        while (1)
        {
          v48 = v46 - *((unsigned __int16 *)v58 + v47);
          if (v48 < 1)
            break;
          v46 = 2 * v48;
          if (++v47 >= v10)
            goto LABEL_70;
        }
        v34 = v47 - v29;
LABEL_70:
        v46 = 1 << v34;
      }
      v31 += v46;
      if (v31 > 0x354)
        v49 = v25;
      else
        v49 = 0;
      v50 = v31 > 0x250 && v54;
      v14 = 1;
      if ((v49 & 1) == 0 && !v50)
      {
        v33 += 2 * v36;
        v51 = *a4;
        v52 = (uint64_t)&(*a4)[2 * (v30 & v32)];
        *(_BYTE *)v52 = v34;
        *(_BYTE *)(v52 + 1) = v13;
        *(_WORD *)(v52 + 2) = ((_DWORD)v33 - (_DWORD)v51) >> 2;
        v35 = v30 & v32;
        continue;
      }
      break;
    }
  }
  return v14;
}

unsigned __int8 **sub_1D4BAA7F4(unsigned __int8 **result, int a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t i;
  int v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t j;
  int v31;
  char v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  unsigned int v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 *v51;
  unsigned __int8 v52;
  unsigned __int8 *v53;
  int v54;
  unsigned __int8 *v55;

  v2 = result[7];
  v3 = *result;
  v4 = (unint64_t)&(*result)[*((_DWORD *)result + 2) - 5];
  v5 = result[3];
  v6 = *((_DWORD *)result + 8);
  v7 = (_DWORD)v5 - (a2 - v6);
  v8 = &v5[v6 - 257];
  v9 = *((_DWORD *)v2 + 15);
  v10 = *((_DWORD *)v2 + 16);
  v11 = *((_DWORD *)v2 + 17);
  v12 = (unsigned __int8 *)*((_QWORD *)v2 + 9);
  v13 = *((_QWORD *)v2 + 10);
  v14 = *((_DWORD *)v2 + 22);
  v15 = *((_QWORD *)v2 + 13);
  v16 = *((_QWORD *)v2 + 14);
  v17 = ~(-1 << *((_DWORD *)v2 + 30));
  v18 = ~(-1 << *((_DWORD *)v2 + 31));
  v19 = "invalid distance too far back";
LABEL_2:
  if (v14 <= 0xE)
  {
    v20 = ((unint64_t)*v3 << v14) + v13;
    v21 = v3[1];
    v3 += 2;
    v13 = v20 + (v21 << (v14 + 8));
    v14 += 16;
  }
  for (i = v15 + 4 * (v13 & v17); ; i = v15
                                       + 4 * *(unsigned __int16 *)(i + 2)
                                       + 4 * (v13 & ~(-1 << v24)))
  {
    v23 = *(unsigned __int8 *)(i + 1);
    v13 >>= v23;
    v14 -= v23;
    v24 = *(_BYTE *)i;
    if (!*(_BYTE *)i)
    {
      *v5++ = *(_BYTE *)(i + 2);
LABEL_10:
      if ((unint64_t)v3 >= v4 || v5 >= v8)
        goto LABEL_67;
      goto LABEL_2;
    }
    if ((*(_BYTE *)i & 0x10) != 0)
    {
      v25 = *(unsigned __int16 *)(i + 2);
      v26 = v24 & 0xF;
      if (v26)
      {
        if (v14 < v26)
        {
          v27 = *v3++;
          v13 += (unint64_t)v27 << v14;
          v14 += 8;
        }
        v25 += v13 & ~(-1 << v26);
        v13 >>= v26;
        v14 -= v26;
      }
      if (v14 <= 0xE)
      {
        v28 = ((unint64_t)*v3 << v14) + v13;
        v29 = v3[1];
        v3 += 2;
        v13 = v28 + (v29 << (v14 + 8));
        v14 += 16;
      }
      for (j = v16 + 4 * (v13 & v18);
            ;
            j = v16 + 4 * *(unsigned __int16 *)(j + 2) + 4 * (v13 & ~(-1 << v32)))
      {
        v31 = *(unsigned __int8 *)(j + 1);
        v13 >>= v31;
        v14 -= v31;
        v32 = *(_BYTE *)j;
        if ((*(_BYTE *)j & 0x10) != 0)
          break;
        if ((*(_BYTE *)j & 0x40) != 0)
        {
          v19 = "invalid distance code";
          goto LABEL_65;
        }
      }
      v33 = v32 & 0xF;
      if (v14 >= v33)
      {
        v34 = v14;
      }
      else
      {
        v13 += (unint64_t)*v3 << v14;
        v34 = v14 + 8;
        if (v14 + 8 >= v33)
        {
          ++v3;
        }
        else
        {
          v35 = v3[1];
          v3 += 2;
          v13 += v35 << v34;
          v34 = v14 + 16;
        }
      }
      v36 = (v13 & ~(-1 << v33)) + *(unsigned __int16 *)(j + 2);
      v13 >>= v33;
      v14 = v34 - v33;
      v37 = v36 - ((_DWORD)v5 - v7);
      if (v36 <= (int)v5 - v7)
      {
        v42 = 0;
        v43 = -(uint64_t)v36;
        v44 = (uint64_t)&v5[-v36 + 1];
        v45 = v25;
        do
        {
          v46 = &v5[v42];
          *v46 = *(_BYTE *)(v44 + v42 - 1);
          v46[1] = *(_BYTE *)(v44 + v42);
          v46[2] = *(_BYTE *)(v44 + v42 + 1);
          v45 -= 3;
          v42 += 3;
        }
        while (v45 > 2);
        v47 = &v5[v42];
        if (v25 != (_DWORD)v42)
        {
          *v47 = v47[v43];
          if (v25 - 1 == (_DWORD)v42)
          {
            v5 = v47 + 1;
            goto LABEL_10;
          }
          v51 = &v5[v42];
          v52 = v51[v43 + 1];
          v5 = v51 + 2;
LABEL_58:
          v47[1] = v52;
          goto LABEL_10;
        }
        goto LABEL_60;
      }
      if (v37 > v10 && *((_DWORD *)v2 + 1786))
      {
LABEL_65:
        result[6] = (unsigned __int8 *)v19;
        v54 = 16209;
        goto LABEL_66;
      }
      if (v11)
      {
        if (v37 > v11)
        {
          v38 = v11 + v9 - v37;
          v39 = v25 - (v37 - v11);
          if (v25 <= v37 - v11)
          {
            v41 = &v12[v38];
          }
          else
          {
            do
            {
              *v5++ = v12[v38];
              --v37;
              ++v38;
            }
            while (v11 != v37);
            if (v39 <= v11)
            {
              v25 = v39;
              v41 = v12;
            }
            else
            {
              v40 = 0;
              do
              {
                v5[v40] = v12[v40];
                ++v40;
              }
              while (v11 != (_DWORD)v40);
              v25 = v39 - v11;
              v5 += v40;
              v41 = &v5[-v36];
            }
          }
LABEL_53:
          if (v25 < 3)
          {
            v47 = v5;
            v53 = v41;
            if (v25)
              goto LABEL_56;
          }
          else
          {
            do
            {
              *v5 = *v41;
              v5[1] = v41[1];
              v53 = v41 + 3;
              v47 = v5 + 3;
              v5[2] = v41[2];
              v25 -= 3;
              v41 += 3;
              v5 += 3;
            }
            while (v25 > 2);
            if (v25)
            {
LABEL_56:
              *v47 = *v53;
              v5 = v47 + 1;
              if (v25 == 1)
                goto LABEL_10;
              v52 = v53[1];
              v5 = v47 + 2;
              goto LABEL_58;
            }
          }
LABEL_60:
          v5 = v47;
          goto LABEL_10;
        }
        v41 = &v12[v11 - v37];
        v48 = v25 - v37;
        if (v25 <= v37)
          goto LABEL_53;
        do
        {
          v50 = *v41++;
          *v5++ = v50;
          --v37;
        }
        while (v37);
      }
      else
      {
        v41 = &v12[v9 - v37];
        v48 = v25 - v37;
        if (v25 <= v37)
          goto LABEL_53;
        do
        {
          v49 = *v41++;
          *v5++ = v49;
          --v37;
        }
        while (v37);
      }
      v41 = &v5[-v36];
      v25 = v48;
      goto LABEL_53;
    }
    if ((*(_BYTE *)i & 0x40) != 0)
      break;
  }
  if ((*(_BYTE *)i & 0x20) == 0)
  {
    v19 = "invalid literal/length code";
    goto LABEL_65;
  }
  v54 = 16191;
LABEL_66:
  *((_DWORD *)v2 + 2) = v54;
LABEL_67:
  v55 = &v3[-(v14 >> 3)];
  *result = v55;
  result[3] = v5;
  *((_DWORD *)result + 2) = v4 - (_DWORD)v55 + 5;
  *((_DWORD *)result + 8) = (_DWORD)v8 - (_DWORD)v5 + 257;
  *((_QWORD *)v2 + 10) = v13 & ~(-1 << (v14 & 7));
  *((_DWORD *)v2 + 22) = v14 & 7;
  return result;
}

double sub_1D4BAAC74(uint64_t a1)
{
  *(_QWORD *)(a1 + 2904) = a1 + 212;
  *(_QWORD *)(a1 + 2920) = &off_1E984B2B8;
  *(_QWORD *)(a1 + 2928) = a1 + 2504;
  *(_QWORD *)(a1 + 2944) = &off_1E984B2D8;
  *(_QWORD *)(a1 + 2952) = a1 + 2748;
  *(_QWORD *)(a1 + 2968) = &unk_1E984B2F8;
  *(_WORD *)(a1 + 5936) = 0;
  *(_DWORD *)(a1 + 5940) = 0;
  return sub_1D4BAACBC(a1);
}

double sub_1D4BAACBC(uint64_t a1)
{
  uint64_t i;
  uint64_t j;
  uint64_t k;
  double result;

  for (i = 212; i != 1356; i += 4)
    *(_WORD *)(a1 + i) = 0;
  for (j = 0; j != 120; j += 4)
    *(_WORD *)(a1 + 2504 + j) = 0;
  for (k = 0; k != 76; k += 4)
    *(_WORD *)(a1 + 2748 + k) = 0;
  *(_WORD *)(a1 + 1236) = 1;
  *(_DWORD *)(a1 + 5900) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 5912) = 0u;
  *(_DWORD *)(a1 + 5928) = 0;
  return result;
}

uint64_t sub_1D4BAAD20(uint64_t a1, const void *a2, size_t a3, int a4)
{
  int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v7 = *(_DWORD *)(a1 + 5940);
  if (v7 < 14)
  {
    *(_WORD *)(a1 + 5936) |= (_WORD)a4 << v7;
    v14 = v7 + 3;
  }
  else
  {
    v8 = *(_WORD *)(a1 + 5936) | (a4 << v7);
    *(_WORD *)(a1 + 5936) = v8;
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v10 + 1;
    *(_BYTE *)(v9 + v10) = v8;
    LOBYTE(v8) = *(_BYTE *)(a1 + 5937);
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v12 + 1;
    *(_BYTE *)(v11 + v12) = v8;
    v13 = *(_DWORD *)(a1 + 5940);
    *(_WORD *)(a1 + 5936) = (unsigned __int16)a4 >> (16 - v13);
    v14 = v13 - 13;
  }
  *(_DWORD *)(a1 + 5940) = v14;
  result = sub_1D4BAAE60(a1);
  v16 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v17 + 1;
  *(_BYTE *)(v16 + v17) = a3;
  v18 = *(_QWORD *)(a1 + 16);
  v19 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v19 + 1;
  *(_BYTE *)(v18 + v19) = BYTE1(a3);
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v21 + 1;
  *(_BYTE *)(v20 + v21) = ~(_BYTE)a3;
  v22 = *(_QWORD *)(a1 + 16);
  v23 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v23 + 1;
  *(_BYTE *)(v22 + v23) = (unsigned __int16)~(_WORD)a3 >> 8;
  if (a3)
    result = (uint64_t)memcpy((void *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 40)), a2, a3);
  *(_QWORD *)(a1 + 40) += a3;
  return result;
}

uint64_t sub_1D4BAAE60(uint64_t result)
{
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD *)(result + 5940);
  if (v1 >= 9)
  {
    v2 = *(_BYTE *)(result + 5936);
    v3 = *(_QWORD *)(result + 16);
    v4 = *(_QWORD *)(result + 40);
    *(_QWORD *)(result + 40) = v4 + 1;
    *(_BYTE *)(v3 + v4) = v2;
    v5 = *(_BYTE *)(result + 5937);
LABEL_5:
    v6 = *(_QWORD *)(result + 16);
    v7 = *(_QWORD *)(result + 40);
    *(_QWORD *)(result + 40) = v7 + 1;
    *(_BYTE *)(v6 + v7) = v5;
    goto LABEL_6;
  }
  if (v1 >= 1)
  {
    v5 = *(_BYTE *)(result + 5936);
    goto LABEL_5;
  }
LABEL_6:
  *(_WORD *)(result + 5936) = 0;
  *(_DWORD *)(result + 5940) = 0;
  return result;
}

uint64_t sub_1D4BAAEC8(uint64_t result)
{
  int v1;
  int v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_DWORD *)(result + 5940);
  if (v1 == 16)
  {
    v2 = 0;
    v3 = *(_BYTE *)(result + 5936);
    v4 = *(_QWORD *)(result + 40);
    *(_QWORD *)(result + 40) = v4 + 1;
    *(_BYTE *)(*(_QWORD *)(result + 16) + v4) = v3;
    v5 = *(_BYTE *)(result + 5937);
    v6 = *(_QWORD *)(result + 16);
    v7 = *(_QWORD *)(result + 40);
    *(_QWORD *)(result + 40) = v7 + 1;
    *(_BYTE *)(v6 + v7) = v5;
    *(_WORD *)(result + 5936) = 0;
  }
  else
  {
    if (v1 < 8)
      return result;
    v8 = *(_BYTE *)(result + 5936);
    v9 = *(_QWORD *)(result + 16);
    v10 = *(_QWORD *)(result + 40);
    *(_QWORD *)(result + 40) = v10 + 1;
    *(_BYTE *)(v9 + v10) = v8;
    *(_WORD *)(result + 5936) = *(unsigned __int8 *)(result + 5937);
    v2 = *(_DWORD *)(result + 5940) - 8;
  }
  *(_DWORD *)(result + 5940) = v2;
  return result;
}

uint64_t sub_1D4BAAF58(uint64_t result)
{
  int v1;
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v1 = *(_DWORD *)(result + 5940);
  v2 = *(unsigned __int16 *)(result + 5936);
  v3 = v2 | (2 << v1);
  *(_WORD *)(result + 5936) = v2 | (2 << v1);
  if (v1 < 14)
  {
    v9 = v1 + 3;
  }
  else
  {
    v4 = *(_QWORD *)(result + 16);
    v5 = *(_QWORD *)(result + 40);
    *(_QWORD *)(result + 40) = v5 + 1;
    *(_BYTE *)(v4 + v5) = v3;
    v6 = *(_BYTE *)(result + 5937);
    v7 = *(_QWORD *)(result + 16);
    v8 = *(_QWORD *)(result + 40);
    *(_QWORD *)(result + 40) = v8 + 1;
    *(_BYTE *)(v7 + v8) = v6;
    LODWORD(v7) = *(_DWORD *)(result + 5940);
    v3 = 2u >> (16 - v7);
    *(_WORD *)(result + 5936) = v3;
    v9 = v7 - 13;
  }
  *(_DWORD *)(result + 5940) = v9;
  if (v9 < 10)
  {
    v15 = v9 + 7;
  }
  else
  {
    v10 = *(_QWORD *)(result + 16);
    v11 = *(_QWORD *)(result + 40);
    *(_QWORD *)(result + 40) = v11 + 1;
    *(_BYTE *)(v10 + v11) = v3;
    v12 = *(_BYTE *)(result + 5937);
    v13 = *(_QWORD *)(result + 16);
    v14 = *(_QWORD *)(result + 40);
    *(_QWORD *)(result + 40) = v14 + 1;
    *(_BYTE *)(v13 + v14) = v12;
    *(_WORD *)(result + 5936) = 0;
    v15 = *(_DWORD *)(result + 5940) - 9;
  }
  *(_DWORD *)(result + 5940) = v15;
  return sub_1D4BAAEC8(result);
}

void sub_1D4BAB028(uint64_t a1, const void *a2, size_t a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  void *v36;
  void *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  char *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  if (*(int *)(a1 + 196) < 1)
  {
    v11 = 0;
    v12 = a3 + 5;
    goto LABEL_24;
  }
  if (*(_DWORD *)(*(_QWORD *)a1 + 88) == 2)
  {
    v8 = 0;
    v9 = 4093624447;
    do
    {
      if ((v9 & 1) != 0 && *(_WORD *)(a1 + 212 + v8))
      {
        v10 = 0;
        goto LABEL_13;
      }
      v9 >>= 1;
      v8 += 4;
    }
    while (v8 != 128);
    if (!*(_WORD *)(a1 + 248) && !*(_WORD *)(a1 + 252) && !*(_WORD *)(a1 + 264))
    {
      v73 = 0;
      v74 = a1 + 340;
      while (1)
      {
        v10 = *(unsigned __int16 *)(v74 + v73);
        if (*(_WORD *)(v74 + v73))
          break;
        v73 += 4;
        if (v73 == 896)
          goto LABEL_13;
      }
    }
    v10 = 1;
LABEL_13:
    *(_DWORD *)(*(_QWORD *)a1 + 88) = v10;
  }
  sub_1D4BAB574(a1, a1 + 2904);
  sub_1D4BAB574(a1, a1 + 2928);
  sub_1D4BABEE4((_WORD *)a1, a1 + 212, *(_DWORD *)(a1 + 2912));
  sub_1D4BABEE4((_WORD *)a1, a1 + 2504, *(_DWORD *)(a1 + 2936));
  sub_1D4BAB574(a1, a1 + 2952);
  v11 = 0x12u;
  while (!*(_WORD *)(a1 + 4 * byte_1D4BDD160[v11] + 2750))
  {
    if (v11-- <= 3)
    {
      v11 = 2;
      break;
    }
  }
  v14 = *(_QWORD *)(a1 + 5912) + 3 * (int)v11;
  *(_QWORD *)(a1 + 5912) = v14 + 17;
  v15 = v14 + 27;
  v12 = (unint64_t)(*(_QWORD *)(a1 + 5920) + 10) >> 3;
  if (v12 <= v15 >> 3)
  {
LABEL_24:
    v17 = v12;
    if (!a2)
      goto LABEL_27;
    goto LABEL_25;
  }
  v16 = v15 >> 3;
  if (*(_DWORD *)(a1 + 200) == 4)
    v17 = (unint64_t)(*(_QWORD *)(a1 + 5920) + 10) >> 3;
  else
    v17 = v16;
  if (!a2)
    goto LABEL_27;
LABEL_25:
  if (a3 + 4 <= v17)
  {
    sub_1D4BAAD20(a1, a2, a3, a4);
    goto LABEL_52;
  }
LABEL_27:
  v18 = *(_DWORD *)(a1 + 5940);
  if (v12 == v17)
  {
    v19 = a4 + 2;
    if (v18 < 14)
    {
      *(_WORD *)(a1 + 5936) |= v19 << v18;
      v26 = v18 + 3;
    }
    else
    {
      v20 = *(_WORD *)(a1 + 5936) | (v19 << v18);
      *(_WORD *)(a1 + 5936) = v20;
      v21 = *(_QWORD *)(a1 + 16);
      v22 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v22 + 1;
      *(_BYTE *)(v21 + v22) = v20;
      LOBYTE(v20) = *(_BYTE *)(a1 + 5937);
      v23 = *(_QWORD *)(a1 + 16);
      v24 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v24 + 1;
      *(_BYTE *)(v23 + v24) = v20;
      v25 = *(_DWORD *)(a1 + 5940);
      *(_WORD *)(a1 + 5936) = (unsigned __int16)(a4 + 2) >> (16 - v25);
      v26 = v25 - 13;
    }
    *(_DWORD *)(a1 + 5940) = v26;
    v36 = &unk_1D4BDCB30;
    v37 = &unk_1D4BDCFB0;
    v38 = a1;
  }
  else
  {
    v27 = a4 + 4;
    if (v18 < 14)
    {
      v34 = *(unsigned __int16 *)(a1 + 5936) | (v27 << v18);
      v35 = v18 + 3;
    }
    else
    {
      v28 = *(_WORD *)(a1 + 5936) | (v27 << v18);
      *(_WORD *)(a1 + 5936) = v28;
      v29 = *(_QWORD *)(a1 + 16);
      v30 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v30 + 1;
      *(_BYTE *)(v29 + v30) = v28;
      LOBYTE(v28) = *(_BYTE *)(a1 + 5937);
      v31 = *(_QWORD *)(a1 + 16);
      v32 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v32 + 1;
      *(_BYTE *)(v31 + v32) = v28;
      v33 = *(_DWORD *)(a1 + 5940);
      v34 = (unsigned __int16)(a4 + 4) >> (16 - v33);
      v35 = v33 - 13;
    }
    *(_DWORD *)(a1 + 5940) = v35;
    v39 = *(_DWORD *)(a1 + 2912);
    v40 = *(_DWORD *)(a1 + 2936);
    v41 = v39 + 65280;
    if (v35 < 12)
    {
      v47 = v34 | (v41 << v35);
      v48 = v35 + 5;
    }
    else
    {
      v42 = v34 | (v41 << v35);
      *(_WORD *)(a1 + 5936) = v42;
      v43 = *(_QWORD *)(a1 + 16);
      v44 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v44 + 1;
      *(_BYTE *)(v43 + v44) = v42;
      LOBYTE(v42) = *(_BYTE *)(a1 + 5937);
      v45 = *(_QWORD *)(a1 + 16);
      v46 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v46 + 1;
      *(_BYTE *)(v45 + v46) = v42;
      LODWORD(v45) = *(_DWORD *)(a1 + 5940);
      v47 = (unsigned __int16)(v39 - 256) >> (16 - v45);
      v48 = v45 - 11;
    }
    *(_DWORD *)(a1 + 5940) = v48;
    if (v48 < 12)
    {
      v54 = v47 | (v40 << v48);
      v55 = v48 + 5;
    }
    else
    {
      v49 = v47 | (v40 << v48);
      *(_WORD *)(a1 + 5936) = v49;
      v50 = *(_QWORD *)(a1 + 16);
      v51 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v51 + 1;
      *(_BYTE *)(v50 + v51) = v49;
      LOBYTE(v49) = *(_BYTE *)(a1 + 5937);
      v52 = *(_QWORD *)(a1 + 16);
      v53 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v53 + 1;
      *(_BYTE *)(v52 + v53) = v49;
      LODWORD(v52) = *(_DWORD *)(a1 + 5940);
      v54 = (unsigned __int16)v40 >> (16 - v52);
      v55 = v52 - 11;
    }
    *(_DWORD *)(a1 + 5940) = v55;
    v56 = v11 + 65533;
    if (v55 < 13)
    {
      v62 = v54 | (v56 << v55);
      *(_WORD *)(a1 + 5936) = v62;
      v63 = v55 + 4;
    }
    else
    {
      v57 = v54 | (v56 << v55);
      *(_WORD *)(a1 + 5936) = v57;
      v58 = *(_QWORD *)(a1 + 16);
      v59 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v59 + 1;
      *(_BYTE *)(v58 + v59) = v57;
      LOBYTE(v57) = *(_BYTE *)(a1 + 5937);
      v60 = *(_QWORD *)(a1 + 16);
      v61 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v61 + 1;
      *(_BYTE *)(v60 + v61) = v57;
      LODWORD(v60) = *(_DWORD *)(a1 + 5940);
      v62 = (unsigned __int16)(v11 - 3) >> (16 - v60);
      *(_WORD *)(a1 + 5936) = v62;
      v63 = v60 - 12;
    }
    *(_DWORD *)(a1 + 5940) = v63;
    if ((v11 & 0x80000000) == 0)
    {
      v64 = v11 + 1;
      v65 = byte_1D4BDD160;
      do
      {
        v66 = *v65++;
        v67 = *(unsigned __int16 *)(a1 + 4 * v66 + 2750);
        v62 |= v67 << v63;
        *(_WORD *)(a1 + 5936) = v62;
        if (v63 < 14)
        {
          v63 += 3;
        }
        else
        {
          v68 = *(_QWORD *)(a1 + 16);
          v69 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v69 + 1;
          *(_BYTE *)(v68 + v69) = v62;
          v70 = *(_BYTE *)(a1 + 5937);
          v71 = *(_QWORD *)(a1 + 16);
          v72 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v72 + 1;
          *(_BYTE *)(v71 + v72) = v70;
          LODWORD(v71) = *(_DWORD *)(a1 + 5940);
          v62 = v67 >> (16 - v71);
          *(_WORD *)(a1 + 5936) = v62;
          v63 = v71 - 13;
        }
        *(_DWORD *)(a1 + 5940) = v63;
        --v64;
      }
      while (v64);
    }
    sub_1D4BABFD8(a1, a1 + 212, v39);
    sub_1D4BABFD8(a1, a1 + 2504, v40);
    v38 = a1;
    v36 = (void *)(a1 + 212);
    v37 = (void *)(a1 + 2504);
  }
  sub_1D4BABA18(v38, (uint64_t)v36, (uint64_t)v37);
LABEL_52:
  sub_1D4BAACBC(a1);
  if (a4)
    sub_1D4BAAE60(a1);
}

uint64_t sub_1D4BAB574(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _WORD *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  _WORD *v28;
  unsigned int v29;
  uint64_t result;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  BOOL v44;
  int v45;
  int v46;
  _WORD *v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  BOOL v52;
  int v53;
  int v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _WORD *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  unsigned __int16 v71[16];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)a2;
  v5 = *(uint64_t **)(a2 + 16);
  v6 = *v5;
  v7 = *((unsigned int *)v5 + 5);
  v8 = (int *)(a1 + 5300);
  *(_QWORD *)(a1 + 5300) = 0x23D00000000;
  if ((int)v7 < 1)
  {
    v13 = 0;
    v11 = -1;
  }
  else
  {
    v9 = 0;
    v10 = (_WORD *)(v4 + 2);
    v11 = -1;
    do
    {
      if (*(v10 - 1))
      {
        v12 = *(int *)(a1 + 5300) + 1;
        *(_DWORD *)(a1 + 5300) = v12;
        *(_DWORD *)(a1 + 4 * v12 + 3008) = v9;
        *(_BYTE *)(a1 + 5308 + v9) = 0;
        v11 = v9;
      }
      else
      {
        *v10 = 0;
      }
      v10 += 2;
      ++v9;
    }
    while (v7 != v9);
    v13 = *v8;
    if (*v8 > 1)
      goto LABEL_20;
  }
  v14 = v11;
  do
  {
    if (v14 >= 2)
      v11 = v14;
    else
      v11 = v14 + 1;
    if (v14 < 2)
      v15 = v14 + 1;
    else
      v15 = 0;
    v16 = v13 + 1;
    *(_DWORD *)(a1 + 5300) = v16;
    *(_DWORD *)(a1 + 4 * v16 + 3008) = v15;
    *(_WORD *)(v4 + 4 * v15) = 1;
    *(_BYTE *)(a1 + v15 + 5308) = 0;
    --*(_QWORD *)(a1 + 5912);
    if (v6)
      *(_QWORD *)(a1 + 5920) -= *(unsigned __int16 *)(v6 + 4 * v15 + 2);
    v13 = *v8;
    v14 = v11;
  }
  while (*v8 < 2);
LABEL_20:
  *(_DWORD *)(a2 + 8) = v11;
  v17 = v13 >> 1;
  do
  {
    sub_1D4BABDDC(a1, v4, v17);
    v18 = v17-- != 0;
  }
  while (v17 != 0 && v18);
  v19 = *(_DWORD *)(a1 + 5300);
  v20 = (int)v7;
  v21 = 4 * (int)v7;
  do
  {
    v22 = *(int *)(a1 + 3012);
    *(_DWORD *)(a1 + 5300) = v19 - 1;
    v23 = a1 + 3008;
    *(_DWORD *)(a1 + 3012) = *(_DWORD *)(a1 + 3008 + 4 * v19);
    sub_1D4BABDDC(a1, v4, 1);
    v24 = *(int *)(a1 + 3012);
    v25 = *(int *)(a1 + 5304) - 1;
    *(_DWORD *)(a1 + 5304) = v25;
    *(_DWORD *)(v23 + 4 * v25) = v22;
    v26 = *(int *)(a1 + 5304) - 1;
    *(_DWORD *)(a1 + 5304) = v26;
    *(_DWORD *)(v23 + 4 * v26) = v24;
    v27 = (_WORD *)(v4 + 4 * v22);
    v28 = (_WORD *)(v4 + 4 * v24);
    *(_WORD *)(v4 + v21) = *v28 + *v27;
    v29 = *(unsigned __int8 *)(a1 + 5308 + v24);
    if (*(unsigned __int8 *)(a1 + 5308 + v22) > v29)
      LOBYTE(v29) = *(_BYTE *)(a1 + 5308 + v22);
    *(_BYTE *)(a1 + 5308 + v20) = v29 + 1;
    v28[1] = v20;
    v27[1] = v20;
    *(_DWORD *)(a1 + 3012) = v20;
    result = sub_1D4BABDDC(a1, v4, 1);
    v19 = *(_DWORD *)(a1 + 5300);
    v21 += 4;
    ++v20;
  }
  while (v19 > 1);
  v31 = *(_DWORD *)(a1 + 3012);
  v32 = *(int *)(a1 + 5304) - 1;
  *(_DWORD *)(a1 + 5304) = v32;
  *(_DWORD *)(v23 + 4 * v32) = v31;
  v33 = *(_QWORD *)a2;
  v34 = *(_DWORD *)(a2 + 8);
  v35 = *(uint64_t **)(a2 + 16);
  v36 = *v35;
  v37 = v35[1];
  v38 = *((_DWORD *)v35 + 4);
  v39 = *((int *)v35 + 6);
  *(_OWORD *)(a1 + 2992) = 0u;
  *(_OWORD *)(a1 + 2976) = 0u;
  *(_WORD *)(v33 + 4 * *(int *)(v23 + 4 * *(int *)(a1 + 5304)) + 2) = 0;
  v40 = *(int *)(a1 + 5304);
  if ((int)v40 <= 571)
  {
    v41 = 0;
    do
    {
      v42 = *(int *)(a1 + 3012 + 4 * v40);
      result = v33 + 4 * v42;
      v43 = *(unsigned __int16 *)(v33 + 4 * *(unsigned __int16 *)(result + 2) + 2);
      v44 = (int)v39 <= v43;
      if ((int)v39 > v43)
        v45 = v43 + 1;
      else
        v45 = v39;
      if (v44)
        ++v41;
      *(_WORD *)(result + 2) = v45;
      if ((int)v42 <= v34)
      {
        ++*(_WORD *)(a1 + 2 * v45 + 2976);
        v46 = (int)v42 >= v38 ? *(_DWORD *)(v37 + 4 * ((int)v42 - v38)) : 0;
        result = *(unsigned __int16 *)result;
        *(_QWORD *)(a1 + 5912) += result * (unint64_t)(v46 + v45);
        if (v36)
          *(_QWORD *)(a1 + 5920) += result
                                  * (unint64_t)(v46 + *(unsigned __int16 *)(v36 + 4 * v42 + 2));
      }
    }
    while ((_DWORD)v40++ != 571);
    if (v41)
    {
      do
      {
        v48 = (_WORD *)(a1 + 2 * v39 + 2976);
        v49 = (v39 << 32) + 0x100000000;
        do
        {
          v51 = (unsigned __int16)*--v48;
          v50 = v51;
          v49 -= 0x100000000;
        }
        while (!v51);
        *v48 = v50 - 1;
        *(_WORD *)(a1 + (v49 >> 31) + 2976) += 2;
        --*(_WORD *)(a1 + 2 * v39 + 2976);
        v52 = __OFSUB__(v41, 2);
        v41 -= 2;
      }
      while (!((v41 < 0) ^ v52 | (v41 == 0)));
      if ((_DWORD)v39)
      {
        v53 = 573;
        do
        {
          v54 = *(unsigned __int16 *)(a1 + 2 * v39 + 2976);
          if (*(_WORD *)(a1 + 2 * v39 + 2976))
          {
            do
            {
              v55 = (int *)(a1 + 3004 + 4 * v53);
              do
              {
                v57 = *v55--;
                v56 = v57;
                --v53;
              }
              while ((int)v57 > v34);
              v58 = v33 + 4 * v56;
              v61 = *(unsigned __int16 *)(v58 + 2);
              v59 = (_WORD *)(v58 + 2);
              v60 = v61;
              if ((_DWORD)v39 != v61)
              {
                *(_QWORD *)(a1 + 5912) += (v39 - v60) * *(unsigned __int16 *)(v33 + 4 * v56);
                *v59 = v39;
              }
              --v54;
            }
            while (v54);
          }
          --v39;
        }
        while ((_DWORD)v39);
      }
    }
  }
  v62 = 0;
  v63 = 0;
  do
  {
    v63 = 2 * (v63 + *(unsigned __int16 *)(a1 + 2976 + v62 * 2));
    v71[++v62] = v63;
  }
  while (v62 != 15);
  if ((v11 & 0x80000000) == 0)
  {
    v64 = 0;
    do
    {
      v65 = v4 + 4 * v64;
      v66 = *(unsigned __int16 *)(v65 + 2);
      if (*(_WORD *)(v65 + 2))
      {
        v67 = 0;
        v68 = v71[*(unsigned __int16 *)(v65 + 2)];
        v71[v66] = v68 + 1;
        v69 = v66 + 1;
        do
        {
          v70 = v67 | v68 & 1;
          v68 >>= 1;
          v67 = 2 * v70;
          --v69;
        }
        while (v69 > 1);
        *(_WORD *)(v4 + 4 * v64) = v70;
      }
      ++v64;
    }
    while (v64 != v11 + 1);
  }
  return result;
}

uint64_t sub_1D4BABA18(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int16 *v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned __int16 *v43;
  int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;

  if (*(_DWORD *)(result + 5900))
  {
    v3 = 0;
    while (1)
    {
      v4 = *(_QWORD *)(result + 5888);
      v5 = *(unsigned __int8 *)(v4 + v3) | (*(unsigned __int8 *)(v4 + v3 + 1) << 8);
      v6 = *(unsigned __int8 *)(v4 + v3 + 2);
      if (v5)
        break;
      v20 = (unsigned __int16 *)(a2 + 4 * v6);
      v21 = v20[1];
      v22 = *(_DWORD *)(result + 5940);
      v23 = *v20;
      v24 = *(unsigned __int16 *)(result + 5936);
      v25 = v24 | (v23 << v22);
      *(_WORD *)(result + 5936) = v24 | ((_WORD)v23 << v22);
      if (v22 > 16 - v21)
      {
        v26 = *(_QWORD *)(result + 16);
        v27 = *(_QWORD *)(result + 40);
        *(_QWORD *)(result + 40) = v27 + 1;
        *(_BYTE *)(v26 + v27) = v25;
        LOBYTE(v26) = *(_BYTE *)(result + 5937);
        v28 = *(_QWORD *)(result + 16);
        v29 = *(_QWORD *)(result + 40);
        *(_QWORD *)(result + 40) = v29 + 1;
        *(_BYTE *)(v28 + v29) = v26;
        LODWORD(v26) = *(_DWORD *)(result + 5940);
        *(_WORD *)(result + 5936) = v23 >> (16 - v26);
        v30 = v21 + v26;
LABEL_24:
        v39 = v30 - 16;
        goto LABEL_26;
      }
      v39 = v22 + v21;
LABEL_26:
      *(_DWORD *)(result + 5940) = v39;
LABEL_27:
      v3 += 3;
      if (v3 >= *(_DWORD *)(result + 5900))
        goto LABEL_30;
    }
    v7 = byte_1D4BDCA30[v6];
    v8 = a2 + 4 * v7;
    v9 = *(unsigned __int16 *)(v8 + 1030);
    v10 = *(_DWORD *)(result + 5940);
    v11 = *(unsigned __int16 *)(v8 + 1028);
    v12 = *(unsigned __int16 *)(result + 5936);
    v13 = v12 | (v11 << v10);
    *(_WORD *)(result + 5936) = v12 | ((_WORD)v11 << v10);
    if (v10 <= 16 - v9)
    {
      v19 = v10 + v9;
    }
    else
    {
      v14 = *(_QWORD *)(result + 16);
      v15 = *(_QWORD *)(result + 40);
      *(_QWORD *)(result + 40) = v15 + 1;
      *(_BYTE *)(v14 + v15) = v13;
      v16 = *(_BYTE *)(result + 5937);
      v17 = *(_QWORD *)(result + 16);
      v18 = *(_QWORD *)(result + 40);
      *(_QWORD *)(result + 40) = v18 + 1;
      *(_BYTE *)(v17 + v18) = v16;
      LODWORD(v17) = *(_DWORD *)(result + 5940);
      v13 = v11 >> (16 - v17);
      *(_WORD *)(result + 5936) = v13;
      v19 = v9 + v17 - 16;
    }
    *(_DWORD *)(result + 5940) = v19;
    if ((unint64_t)(v7 - 28) >= 0xFFFFFFFFFFFFFFECLL)
    {
      v31 = dword_1D4BDD028[v7];
      v32 = v6 - dword_1D4BDD174[v7];
      if (v19 <= 16 - v31)
      {
        v13 |= v32 << v19;
        *(_WORD *)(result + 5936) = v13;
        v19 += v31;
      }
      else
      {
        v33 = (unsigned __int16)v32;
        v34 = v13 | (v32 << v19);
        *(_WORD *)(result + 5936) = v34;
        v35 = *(_QWORD *)(result + 16);
        v36 = *(_QWORD *)(result + 40);
        *(_QWORD *)(result + 40) = v36 + 1;
        *(_BYTE *)(v35 + v36) = v34;
        LOBYTE(v34) = *(_BYTE *)(result + 5937);
        v37 = *(_QWORD *)(result + 16);
        v38 = *(_QWORD *)(result + 40);
        *(_QWORD *)(result + 40) = v38 + 1;
        *(_BYTE *)(v37 + v38) = v34;
        LODWORD(v37) = *(_DWORD *)(result + 5940);
        v13 = v33 >> (16 - v37);
        *(_WORD *)(result + 5936) = v13;
        v19 = v31 + v37 - 16;
      }
      *(_DWORD *)(result + 5940) = v19;
    }
    v40 = v5 - 1;
    if (v5 >= 0x101)
      v41 = ((v5 - 1) >> 7) + 256;
    else
      v41 = v5 - 1;
    v42 = byte_1D4BDC830[v41];
    v43 = (unsigned __int16 *)(a3 + 4 * v42);
    v44 = v43[1];
    v45 = *v43;
    v46 = v13 | (v45 << v19);
    *(_WORD *)(result + 5936) = v46;
    if (v19 <= 16 - v44)
    {
      v39 = v19 + v44;
    }
    else
    {
      v47 = *(_QWORD *)(result + 16);
      v48 = *(_QWORD *)(result + 40);
      *(_QWORD *)(result + 40) = v48 + 1;
      *(_BYTE *)(v47 + v48) = v46;
      v49 = *(_BYTE *)(result + 5937);
      v50 = *(_QWORD *)(result + 16);
      v51 = *(_QWORD *)(result + 40);
      *(_QWORD *)(result + 40) = v51 + 1;
      *(_BYTE *)(v50 + v51) = v49;
      LODWORD(v50) = *(_DWORD *)(result + 5940);
      v46 = v45 >> (16 - v50);
      *(_WORD *)(result + 5936) = v46;
      v39 = v44 + v50 - 16;
    }
    *(_DWORD *)(result + 5940) = v39;
    if (v42 < 4)
      goto LABEL_27;
    v52 = dword_1D4BDD09C[v42];
    v53 = v40 - dword_1D4BDD1E8[v42];
    if (v39 <= 16 - v52)
    {
      *(_WORD *)(result + 5936) = v46 | ((_WORD)v53 << v39);
      v39 += v52;
      goto LABEL_26;
    }
    v54 = (unsigned __int16)v53;
    v55 = v46 | (v53 << v39);
    *(_WORD *)(result + 5936) = v55;
    v56 = *(_QWORD *)(result + 16);
    v57 = *(_QWORD *)(result + 40);
    *(_QWORD *)(result + 40) = v57 + 1;
    *(_BYTE *)(v56 + v57) = v55;
    LOBYTE(v55) = *(_BYTE *)(result + 5937);
    v58 = *(_QWORD *)(result + 16);
    v59 = *(_QWORD *)(result + 40);
    *(_QWORD *)(result + 40) = v59 + 1;
    *(_BYTE *)(v58 + v59) = v55;
    v60 = *(_DWORD *)(result + 5940);
    *(_WORD *)(result + 5936) = v54 >> (16 - v60);
    v30 = v52 + v60;
    goto LABEL_24;
  }
  v39 = *(_DWORD *)(result + 5940);
LABEL_30:
  v61 = *(unsigned __int16 *)(a2 + 1026);
  v62 = *(unsigned __int16 *)(a2 + 1024);
  v63 = *(unsigned __int16 *)(result + 5936);
  v64 = v63 | (v62 << v39);
  *(_WORD *)(result + 5936) = v63 | ((_WORD)v62 << v39);
  if (v39 <= 16 - v61)
  {
    v71 = v39 + v61;
  }
  else
  {
    v65 = *(_QWORD *)(result + 16);
    v66 = *(_QWORD *)(result + 40);
    *(_QWORD *)(result + 40) = v66 + 1;
    *(_BYTE *)(v65 + v66) = v64;
    v67 = *(_BYTE *)(result + 5937);
    v68 = *(_QWORD *)(result + 16);
    v69 = *(_QWORD *)(result + 40);
    *(_QWORD *)(result + 40) = v69 + 1;
    *(_BYTE *)(v68 + v69) = v67;
    v70 = *(_DWORD *)(result + 5940);
    *(_WORD *)(result + 5936) = v62 >> (16 - v70);
    v71 = v61 + v70 - 16;
  }
  *(_DWORD *)(result + 5940) = v71;
  return result;
}

uint64_t sub_1D4BABDDC(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;

  v3 = *(_DWORD *)(result + 4 * a3 + 3008);
  v4 = 2 * a3;
  v5 = *(_DWORD *)(result + 5300);
  if (2 * a3 <= v5)
  {
    v7 = result + 5308;
    while (1)
    {
      if (v4 >= v5)
      {
        v6 = v4;
        v8 = v4;
      }
      else
      {
        v8 = v4;
        v9 = *(int *)(result + 3008 + 4 * (v4 | 1));
        v10 = *(unsigned __int16 *)(a2 + 4 * v9);
        v11 = *(int *)(result + 3008 + 4 * v4);
        v12 = *(unsigned __int16 *)(a2 + 4 * v11);
        if (v10 >= v12)
        {
          if (v10 != v12)
          {
            v6 = v4;
            goto LABEL_11;
          }
          v13 = *(unsigned __int8 *)(v7 + v9);
          v6 = v4;
          if (v13 > *(unsigned __int8 *)(v7 + v11))
            goto LABEL_11;
        }
        v8 = v4 | 1;
        v6 = v4 | 1;
      }
LABEL_11:
      v14 = *(unsigned __int16 *)(a2 + 4 * v3);
      v15 = *(_DWORD *)(result + 4 * v8 + 3008);
      v16 = *(unsigned __int16 *)(a2 + 4 * v15);
      if (v14 < v16
        || v14 == v16
        && *(unsigned __int8 *)(result + v3 + 5308) <= *(unsigned __int8 *)(result + v15 + 5308))
      {
        break;
      }
      *(_DWORD *)(result + 4 * a3 + 3008) = v15;
      v4 = 2 * v6;
      v5 = *(_DWORD *)(result + 5300);
      a3 = v6;
      if (2 * v6 > v5)
        goto LABEL_15;
    }
  }
  v6 = a3;
LABEL_15:
  *(_DWORD *)(result + 4 * v6 + 3008) = v3;
  return result;
}

_WORD *sub_1D4BABEE4(_WORD *result, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v14;
  int v15;

  v3 = *(unsigned __int16 *)(a2 + 2);
  v4 = (a3 + 1);
  *(_WORD *)(a2 + 4 * (int)v4 + 2) = -1;
  if ((a3 & 0x80000000) == 0)
  {
    v5 = 0;
    if (v3)
      v6 = 4;
    else
      v6 = 3;
    if (v3)
      v7 = 7;
    else
      v7 = 138;
    v8 = (unsigned __int16 *)(a2 + 6);
    v9 = -1;
    do
    {
      v11 = *v8;
      v8 += 2;
      v10 = v11;
      v12 = v5 + 1;
      if (v5 + 1 >= v7 || v3 != v10)
      {
        if (v12 >= v6)
        {
          if (v3)
          {
            if (v3 != v9)
              ++result[2 * v3 + 1374];
            ++result[1406];
          }
          else if (v5 > 9)
          {
            ++result[1410];
          }
          else
          {
            ++result[1408];
          }
        }
        else
        {
          result[2 * v3 + 1374] += v12;
        }
        if (v3 == v10)
          v14 = 6;
        else
          v14 = 7;
        if (v3 == v10)
          v15 = 3;
        else
          v15 = 4;
        v12 = 0;
        if (v10)
          v7 = v14;
        else
          v7 = 138;
        if (v10)
          v6 = v15;
        else
          v6 = 3;
        v9 = v3;
      }
      v5 = v12;
      v3 = v10;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_1D4BABFD8(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  __int16 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  __int16 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;

  if ((a3 & 0x80000000) == 0)
  {
    v3 = 0;
    v4 = 0;
    v5 = *(unsigned __int16 *)(a2 + 2);
    if (*(_WORD *)(a2 + 2))
      v6 = 7;
    else
      v6 = 138;
    if (*(_WORD *)(a2 + 2))
      v7 = 4;
    else
      v7 = 3;
    v8 = -1;
    do
    {
      ++v3;
      v9 = *(unsigned __int16 *)(a2 + 4 * v3 + 2);
      v10 = v4 + 1;
      if (v4 + 1 >= v6 || v5 != v9)
      {
        if (v10 >= v7)
        {
          v23 = *(_DWORD *)(result + 5940);
          if (v5)
          {
            if (v5 != v8)
            {
              v24 = result + 4 * v5;
              v25 = *(unsigned __int16 *)(v24 + 2750);
              v26 = *(unsigned __int16 *)(v24 + 2748);
              v27 = *(unsigned __int16 *)(result + 5936);
              v28 = v27 | (v26 << v23);
              *(_WORD *)(result + 5936) = v27 | ((_WORD)v26 << v23);
              if (v23 <= 16 - v25)
              {
                v23 += v25;
              }
              else
              {
                v29 = *(_QWORD *)(result + 16);
                v30 = *(_QWORD *)(result + 40);
                *(_QWORD *)(result + 40) = v30 + 1;
                *(_BYTE *)(v29 + v30) = v28;
                LOBYTE(v29) = *(_BYTE *)(result + 5937);
                v31 = *(_QWORD *)(result + 16);
                v32 = *(_QWORD *)(result + 40);
                *(_QWORD *)(result + 40) = v32 + 1;
                *(_BYTE *)(v31 + v32) = v29;
                LODWORD(v29) = *(_DWORD *)(result + 5940);
                *(_WORD *)(result + 5936) = v26 >> (16 - v29);
                v23 = v25 + v29 - 16;
              }
              *(_DWORD *)(result + 5940) = v23;
              v10 = v4;
            }
            v52 = *(unsigned __int16 *)(result + 2814);
            v53 = *(unsigned __int16 *)(result + 2812);
            v54 = *(unsigned __int16 *)(result + 5936) | (v53 << v23);
            if (v23 <= 16 - v52)
            {
              v60 = v23 + v52;
            }
            else
            {
              *(_WORD *)(result + 5936) = v54;
              v55 = *(_QWORD *)(result + 16);
              v56 = *(_QWORD *)(result + 40);
              *(_QWORD *)(result + 40) = v56 + 1;
              *(_BYTE *)(v55 + v56) = v54;
              v57 = *(_BYTE *)(result + 5937);
              v58 = *(_QWORD *)(result + 16);
              v59 = *(_QWORD *)(result + 40);
              *(_QWORD *)(result + 40) = v59 + 1;
              *(_BYTE *)(v58 + v59) = v57;
              LODWORD(v58) = *(_DWORD *)(result + 5940);
              v54 = v53 >> (16 - v58);
              v60 = v52 + v58 - 16;
            }
            *(_DWORD *)(result + 5940) = v60;
            v61 = v10 + 65533;
            if (v60 < 15)
            {
              *(_WORD *)(result + 5936) = v54 | (v61 << v60);
              v69 = v60 + 2;
            }
            else
            {
              v62 = v54 | (v61 << v60);
              *(_WORD *)(result + 5936) = v62;
              v63 = *(_QWORD *)(result + 16);
              v64 = *(_QWORD *)(result + 40);
              *(_QWORD *)(result + 40) = v64 + 1;
              *(_BYTE *)(v63 + v64) = v62;
              LOBYTE(v62) = *(_BYTE *)(result + 5937);
              v65 = *(_QWORD *)(result + 16);
              v66 = *(_QWORD *)(result + 40);
              *(_QWORD *)(result + 40) = v66 + 1;
              *(_BYTE *)(v65 + v66) = v62;
              v67 = (unsigned __int16)v61;
              v68 = *(_DWORD *)(result + 5940);
              *(_WORD *)(result + 5936) = v67 >> (16 - v68);
              v69 = v68 - 14;
            }
          }
          else
          {
            v33 = *(unsigned __int16 *)(result + 5936);
            if (v4 > 9)
            {
              v43 = *(unsigned __int16 *)(result + 2822);
              v44 = *(unsigned __int16 *)(result + 2820);
              v45 = v33 | (v44 << v23);
              if (v23 <= 16 - v43)
              {
                v51 = v23 + v43;
              }
              else
              {
                *(_WORD *)(result + 5936) = v45;
                v46 = *(_QWORD *)(result + 16);
                v47 = *(_QWORD *)(result + 40);
                *(_QWORD *)(result + 40) = v47 + 1;
                *(_BYTE *)(v46 + v47) = v45;
                v48 = *(_BYTE *)(result + 5937);
                v49 = *(_QWORD *)(result + 16);
                v50 = *(_QWORD *)(result + 40);
                *(_QWORD *)(result + 40) = v50 + 1;
                *(_BYTE *)(v49 + v50) = v48;
                LODWORD(v49) = *(_DWORD *)(result + 5940);
                v45 = v44 >> (16 - v49);
                v51 = v43 + v49 - 16;
              }
              *(_DWORD *)(result + 5940) = v51;
              v78 = v4 + 65526;
              v79 = v78 << v51;
              if (v51 < 10)
              {
                *(_WORD *)(result + 5936) = v45 | v79;
                v69 = v51 + 7;
              }
              else
              {
                v80 = v45 | v79;
                *(_WORD *)(result + 5936) = v80;
                v81 = *(_QWORD *)(result + 16);
                v82 = *(_QWORD *)(result + 40);
                *(_QWORD *)(result + 40) = v82 + 1;
                *(_BYTE *)(v81 + v82) = v80;
                LOBYTE(v80) = *(_BYTE *)(result + 5937);
                v83 = *(_QWORD *)(result + 16);
                v84 = *(_QWORD *)(result + 40);
                *(_QWORD *)(result + 40) = v84 + 1;
                *(_BYTE *)(v83 + v84) = v80;
                v85 = *(_DWORD *)(result + 5940);
                *(_WORD *)(result + 5936) = (unsigned __int16)v78 >> (16 - v85);
                v69 = v85 - 9;
              }
            }
            else
            {
              v34 = *(unsigned __int16 *)(result + 2818);
              v35 = *(unsigned __int16 *)(result + 2816);
              v36 = v33 | (v35 << v23);
              if (v23 <= 16 - v34)
              {
                v42 = v23 + v34;
              }
              else
              {
                *(_WORD *)(result + 5936) = v36;
                v37 = *(_QWORD *)(result + 16);
                v38 = *(_QWORD *)(result + 40);
                *(_QWORD *)(result + 40) = v38 + 1;
                *(_BYTE *)(v37 + v38) = v36;
                v39 = *(_BYTE *)(result + 5937);
                v40 = *(_QWORD *)(result + 16);
                v41 = *(_QWORD *)(result + 40);
                *(_QWORD *)(result + 40) = v41 + 1;
                *(_BYTE *)(v40 + v41) = v39;
                LODWORD(v40) = *(_DWORD *)(result + 5940);
                v36 = v35 >> (16 - v40);
                v42 = v34 + v40 - 16;
              }
              *(_DWORD *)(result + 5940) = v42;
              v70 = v4 + 65534;
              v71 = v70 << v42;
              if (v42 < 14)
              {
                *(_WORD *)(result + 5936) = v36 | v71;
                v69 = v42 + 3;
              }
              else
              {
                v72 = v36 | v71;
                *(_WORD *)(result + 5936) = v72;
                v73 = *(_QWORD *)(result + 16);
                v74 = *(_QWORD *)(result + 40);
                *(_QWORD *)(result + 40) = v74 + 1;
                *(_BYTE *)(v73 + v74) = v72;
                LOBYTE(v72) = *(_BYTE *)(result + 5937);
                v75 = *(_QWORD *)(result + 16);
                v76 = *(_QWORD *)(result + 40);
                *(_QWORD *)(result + 40) = v76 + 1;
                *(_BYTE *)(v75 + v76) = v72;
                v77 = *(_DWORD *)(result + 5940);
                *(_WORD *)(result + 5936) = (unsigned __int16)v70 >> (16 - v77);
                v69 = v77 - 13;
              }
            }
          }
          *(_DWORD *)(result + 5940) = v69;
        }
        else
        {
          v11 = result + 4 * v5;
          v12 = (unsigned __int16 *)(v11 + 2748);
          v13 = (unsigned __int16 *)(v11 + 2750);
          v14 = *(_DWORD *)(result + 5940);
          do
          {
            v15 = *v13;
            v16 = *v12;
            v17 = *(unsigned __int16 *)(result + 5936);
            v18 = v17 | (v16 << v14);
            *(_WORD *)(result + 5936) = v17 | ((_WORD)v16 << v14);
            if (v14 <= 16 - v15)
            {
              v14 += v15;
            }
            else
            {
              v19 = *(_QWORD *)(result + 16);
              v20 = *(_QWORD *)(result + 40);
              *(_QWORD *)(result + 40) = v20 + 1;
              *(_BYTE *)(v19 + v20) = v18;
              LOBYTE(v19) = *(_BYTE *)(result + 5937);
              v21 = *(_QWORD *)(result + 16);
              v22 = *(_QWORD *)(result + 40);
              *(_QWORD *)(result + 40) = v22 + 1;
              *(_BYTE *)(v21 + v22) = v19;
              LODWORD(v19) = *(_DWORD *)(result + 5940);
              *(_WORD *)(result + 5936) = v16 >> (16 - v19);
              v14 = v15 + v19 - 16;
            }
            *(_DWORD *)(result + 5940) = v14;
            --v10;
          }
          while (v10);
        }
        if (v5 == v9)
          v86 = 3;
        else
          v86 = 4;
        if (v5 == v9)
          v87 = 6;
        else
          v87 = 7;
        if (v9)
          v7 = v86;
        else
          v7 = 3;
        if (v9)
          v6 = v87;
        else
          v6 = 138;
        v10 = 0;
        v8 = v5;
      }
      v5 = v9;
      v4 = v10;
    }
    while (v3 != a3 + 1);
  }
  return result;
}

void *sub_1D4BAC478(uint64_t a1, int a2, int a3)
{
  return malloc((a3 * a2));
}

void sub_1D4BAC480(int a1, void *a2)
{
  free(a2);
}

uint64_t sub_1D4BAC490(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1D4BAC498(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v3;

  v3 = a1 + 8;
  result = *(_QWORD *)(a1 + 8);
  *a2 = *(_QWORD *)(v3 + 8);
  return result;
}

uint64_t sub_1D4BAC4A4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16) - a2;
  *(_QWORD *)(result + 8) += a2;
  *(_QWORD *)(result + 16) = v2;
  return result;
}

uint64_t sub_1D4BAC4B8(_BYTE *a1, unint64_t a2, _QWORD *a3)
{
  unsigned int v3;
  int v5;
  int v6;
  int v7;
  unsigned int v8;

  if ((uint64_t)a2 >= 1)
  {
    v3 = *a1 & 0x7F;
    if ((*a1 & 0x80) == 0)
    {
LABEL_3:
      *a3 = v3;
      return 1;
    }
    if (a2 >= 2)
    {
      v5 = (char)a1[1];
      v3 = *a1 & 0x7F | ((v5 & 0x7F) << 7);
      if ((v5 & 0x80000000) == 0)
        goto LABEL_3;
      if (a2 >= 3)
      {
        v6 = (char)a1[2];
        v3 = v3 & 0xFFE03FFF | ((v6 & 0x7F) << 14);
        if ((v6 & 0x80000000) == 0)
          goto LABEL_3;
        if (a2 >= 4)
        {
          v7 = (char)a1[3];
          v3 = v3 & 0xF01FFFFF | ((v7 & 0x7F) << 21);
          if ((v7 & 0x80000000) == 0)
            goto LABEL_3;
          if (a2 >= 5)
          {
            v8 = a1[4];
            if (v8 <= 0xF)
            {
              v3 |= v8 << 28;
              goto LABEL_3;
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1D4BAC53C(_QWORD *a1)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  char *v9;
  const void *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = (unsigned __int8 *)a1[1];
  v3 = (unsigned __int8 *)a1[2];
  if (v2 == v3)
  {
    (*(void (**)(void))(*(_QWORD *)*a1 + 32))();
    v14 = 0;
    v4 = (*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*a1 + 24))(*a1, &v14);
    v5 = v14;
    *((_DWORD *)a1 + 6) = v14;
    *((_BYTE *)a1 + 28) = v5 == 0;
    if (!v5)
      return 0;
    v2 = (unsigned __int8 *)v4;
    v3 = (unsigned __int8 *)(v4 + v5);
    a1[2] = v3;
  }
  v6 = (unint64_t)word_1D4BDD2A0[*v2] >> 11;
  v7 = v6 + 1;
  v8 = (_DWORD)v3 - (_DWORD)v2;
  if ((int)v3 - (int)v2 < (v6 + 1))
  {
    v9 = (char *)a1 + 29;
    memmove((char *)a1 + 29, v2, ((_DWORD)v3 - (_DWORD)v2));
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, *((unsigned int *)a1 + 6));
    *((_DWORD *)a1 + 6) = 0;
    while (1)
    {
      v14 = 0;
      v10 = (const void *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*a1 + 24))(*a1, &v14);
      if (!v14)
        return 0;
      if (v7 - v8 >= v14)
        v11 = v14;
      else
        v11 = v7 - v8;
      memcpy(&v9[v8], v10, v11);
      v8 += v11;
      (*(void (**)(_QWORD, size_t))(*(_QWORD *)*a1 + 32))(*a1, v11);
      if (v8 >= v7)
      {
        v12 = (uint64_t)&v9[v7];
        goto LABEL_14;
      }
    }
  }
  if (v8 > 4)
  {
    a1[1] = v2;
  }
  else
  {
    v9 = (char *)a1 + 29;
    memmove((char *)a1 + 29, v2, ((_DWORD)v3 - (_DWORD)v2));
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, *((unsigned int *)a1 + 6));
    *((_DWORD *)a1 + 6) = 0;
    v12 = (uint64_t)a1 + v8 + 29;
LABEL_14:
    a1[1] = v9;
    a1[2] = v12;
  }
  return 1;
}

uint64_t sub_1D4BAC6C8(_QWORD *a1, _DWORD *a2)
{
  unsigned int v4;
  char *v5;
  char v6;
  unsigned int v7;
  uint64_t v9;

  *a2 = 0;
  v4 = -7;
  while (1)
  {
    v9 = 0;
    v5 = (char *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*a1 + 24))(*a1, &v9);
    if (!v9)
      return 0;
    v6 = *v5;
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, 1);
    v7 = (v6 & 0x7F) << (v4 + 7);
    if (v7 >> (v4 + 7) != (v6 & 0x7F))
      return 0;
    *a2 |= v7;
    if ((v6 & 0x80000000) == 0)
      break;
    v4 += 7;
    if (v4 > 0x18)
      return 0;
  }
  return 1;
}

BOOL sub_1D4BAC784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v3;
  _QWORD v5[3];

  v5[0] = &unk_1E984AE78;
  v5[1] = a1;
  v5[2] = a2;
  v3 = sub_1D4BAC7EC((uint64_t)v5, a3);
  nullsub_8(v5);
  return v3;
}

void sub_1D4BAC7D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nullsub_8(va);
  _Unwind_Resume(a1);
}

BOOL sub_1D4BAC7EC(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD v10[5];

  v6 = a2;
  v7 = a2;
  v8 = a2;
  memset(&v10[1], 0, 21);
  v10[0] = a1;
  v9 = 0;
  v4 = (sub_1D4BAC6C8(v10, &v9) & 1) != 0
    && ((*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1),
        v8 = a2 + v9,
        sub_1D4BAC8BC(v10, (uint64_t)&v6),
        BYTE4(v10[3]))
    && v7 == v8;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v10[0] + 32))(v10[0], LODWORD(v10[3]));
  return v4;
}

void sub_1D4BAC898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned int a17)
{
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a14 + 32))(a14, a17);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4BAC8BC(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  unint64_t v5;
  _OWORD *v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  size_t v16;
  uint64_t v17;
  size_t v18;
  _OWORD *v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  __int128 v28;
  int v29;
  uint64_t v30;

  v3 = result;
  v30 = *MEMORY[0x1E0C80C00];
  v28 = xmmword_1D4BDD290;
  v29 = -1;
  v4 = (unsigned __int8 *)result[1];
  if ((uint64_t)(result[2] - (_QWORD)v4) > 4)
  {
LABEL_4:
    while (1)
    {
      v7 = *v4;
      v6 = v4 + 1;
      v5 = v7;
      if ((v7 & 3) != 0)
        break;
      v16 = (v5 >> 2) + 1;
      v17 = v3[2];
      v18 = v17 - (_QWORD)v6;
      v19 = *(_OWORD **)(a2 + 8);
      v20 = *(_QWORD *)(a2 + 16) - (_QWORD)v19;
      v21 = v5 <= 0x3F && v18 >= 0x15;
      if (v21 && v20 >= 0x10)
      {
        *v19 = *v6;
        *(_QWORD *)(a2 + 8) = (char *)v19 + v16;
        v4 = (unsigned __int8 *)v6 + v16;
      }
      else
      {
        if (v5 >= 0xF0)
        {
          v16 = ((*((_DWORD *)&v28 + (v5 >> 2) - 59) & *(_DWORD *)v6) + 1);
          v6 = (_OWORD *)((char *)v6 + (v5 >> 2) - 59);
          v18 = v17 - (_QWORD)v6;
        }
        if (v18 < v16)
        {
          while (1)
          {
            v23 = *(_QWORD *)(a2 + 8);
            if (*(_QWORD *)(a2 + 16) - v23 < v18)
              return result;
            memcpy(*(void **)(a2 + 8), v6, v18);
            *(_QWORD *)(a2 + 8) = v23 + v18;
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, *((unsigned int *)v3 + 6));
            v27 = 0;
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, size_t *))(*(_QWORD *)*v3 + 24))(*v3, &v27);
            v24 = v27;
            *((_DWORD *)v3 + 6) = v27;
            if (!v24)
              return result;
            v6 = result;
            v16 -= v18;
            v3[2] = (char *)result + v24;
            v18 = v24;
            if (v24 >= v16)
            {
              v19 = *(_OWORD **)(a2 + 8);
              v20 = *(_QWORD *)(a2 + 16) - (_QWORD)v19;
              break;
            }
          }
        }
        if (v20 < v16)
          return result;
        result = memcpy(v19, v6, v16);
        *(_QWORD *)(a2 + 8) = (char *)v19 + v16;
        v4 = (unsigned __int8 *)v6 + v16;
LABEL_11:
        if ((uint64_t)(v3[2] - (_QWORD)v4) <= 4)
        {
          v3[1] = v4;
          result = (_QWORD *)sub_1D4BAC53C(v3);
          if (!(_DWORD)result)
            return result;
          v4 = (unsigned __int8 *)v3[1];
        }
      }
    }
    v8 = word_1D4BDD2A0[v5];
    v9 = (v8 & 0x700) + (*((_DWORD *)&v28 + (v8 >> 11)) & *(_DWORD *)v6);
    v10 = *(_BYTE **)(a2 + 8);
    if ((unint64_t)&v10[-*(_QWORD *)a2] <= v9 - 1)
      return result;
    v11 = &v10[v8];
    v12 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v11 > v12)
      return result;
    v13 = &v10[-v9];
    if (v9 > 7)
      goto LABEL_8;
    if (v12 - 14 < (unint64_t)v10)
    {
      v26 = v8;
      if ((_BYTE)v8)
      {
        do
        {
          *v10 = v10[-v9];
          ++v10;
          --v26;
        }
        while (v26);
      }
    }
    else
    {
      do
      {
        *(_QWORD *)v10 = *(_QWORD *)v13;
        v10 += v9;
        v21 = v9 >= 4;
        v9 *= 2;
      }
      while (!v21);
      if (v10 < v11)
      {
LABEL_8:
        while ((unint64_t)v10 <= v12 - 16)
        {
          *(_QWORD *)v10 = *(_QWORD *)v13;
          *((_QWORD *)v10 + 1) = *((_QWORD *)v13 + 1);
          v13 += 16;
          v10 += 16;
          if (v10 >= v11)
            goto LABEL_10;
        }
        if ((unint64_t)v10 <= v12 - 8)
        {
          v25 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v10 = v25;
          v10 += 8;
        }
        if (v10 < v11)
        {
          v14 = v11 - v10;
          do
          {
            v15 = *v13++;
            *v10++ = v15;
            --v14;
          }
          while (v14);
        }
      }
    }
LABEL_10:
    v4 = (unsigned __int8 *)v6 + (v8 >> 11);
    *(_QWORD *)(a2 + 8) = v11;
    goto LABEL_11;
  }
  result = (_QWORD *)sub_1D4BAC53C(result);
  if ((_DWORD)result)
  {
    v4 = (unsigned __int8 *)v3[1];
    goto LABEL_4;
  }
  return result;
}

_QWORD *sub_1D4BACBE0()
{
  unsigned __int8 v0;
  pthread_key_t *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFEC6B60);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFEC6B60))
  {
    v2 = (pthread_key_t *)operator new(8uLL);
    pthread_key_create(v2, (void (__cdecl *)(void *))sub_1D4BAD2F0);
    qword_1EFEC6B58 = (uint64_t)v2;
    __cxa_guard_release(&qword_1EFEC6B60);
  }
  return sub_1D4BACC74((pthread_key_t *)qword_1EFEC6B58);
}

void sub_1D4BACC4C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  __cxa_guard_abort(&qword_1EFEC6B60);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4BACC74(pthread_key_t *a1)
{
  _QWORD *v2;

  v2 = pthread_getspecific(*a1);
  if (!v2)
  {
    v2 = operator new(0x10uLL);
    *v2 = -1;
    v2[1] = 0;
    pthread_setspecific(*a1, v2);
  }
  return v2;
}

void sub_1D4BACCC8(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

_QWORD *sub_1D4BACCE0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  std::string *v8;
  unint64_t v9;
  _QWORD *result;
  unint64_t *v11;
  unint64_t v12;
  char v13;
  std::string v14[2];

  if (a2)
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a1 + 48) >= (unint64_t)(2 * v6))
      v7 = 2 * v6;
    else
      v7 = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
  }
  if (a3 >= 0xFFFFFFFFFFFFFFE8)
  {
    sub_1D4BB2880((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/arena.cc", 116);
    v8 = sub_1D4BB2898(v14, "CHECK failed: (min_bytes) <= (std::numeric_limits<size_t>::max() - kBlockHeaderSize): ");
    sub_1D4BB29C8((uint64_t)&v13, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1D4BB29D0((uint64_t)v14);
  }
  if (v7 <= a3 + 24)
    v9 = a3 + 24;
  else
    v9 = v7;
  result = (_QWORD *)(*(uint64_t (**)(unint64_t))(a1 + 72))(v9);
  *result = a2;
  result[1] = 24;
  result[2] = v9;
  v11 = (unint64_t *)(a1 + 16);
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + v9, v11));
  return result;
}

void sub_1D4BACDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D4BB29D0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1D4BACDD8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  char *result;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;

  result = (char *)a1[3];
  do
  {
    if (result)
    {
      if ((unint64_t)(2 * *(_QWORD *)result) >= 0x40)
        v7 = 64;
      else
        v7 = 2 * *(_QWORD *)result;
    }
    else
    {
      v7 = 8;
    }
    v8 = (16 * (_WORD)v7 + 23) & 0xFF0;
    v9 = (char *)a1[5];
    if (a1[6] - (uint64_t)v9 < v8)
    {
      result = sub_1D4BAD258(a1, v8);
      v10 = (char *)a1[3];
    }
    else
    {
      a1[5] = (uint64_t)&v9[v8];
      v10 = result;
      result = v9;
    }
    *(_QWORD *)result = v7;
    *((_QWORD *)result + 1) = v10;
    a1[3] = (uint64_t)result;
    a1[7] = (uint64_t)(result + 16);
    a1[8] = (uint64_t)&result[16 * v7 + 16];
  }
  while (!(16 * v7));
  *((_QWORD *)result + 2) = a2;
  *((_QWORD *)result + 3) = a3;
  a1[7] = (uint64_t)(result + 32);
  return result;
}

char *sub_1D4BACEA0(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = sub_1D4BACBE0();
  v5 = v4;
  if (*v4 == *(_QWORD *)(a1 + 32))
  {
    v6 = (uint64_t *)v4[1];
  }
  else
  {
    v6 = (uint64_t *)atomic_load((unint64_t *)(a1 + 8));
    if (!v6 || (_QWORD *)v6[1] != v5)
      return sub_1D4BACF34(a1, a2);
  }
  v7 = v6[5];
  if (v6[6] - v7 < a2)
    return sub_1D4BAD258(v6, a2);
  v6[5] = v7 + a2;
  return (char *)v7;
}

char *sub_1D4BACF34(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)sub_1D4BAD0C0(a1);
  v4 = v3[5];
  if (v3[6] - v4 < a2)
    return sub_1D4BAD258(v3, a2);
  v3[5] = v4 + a2;
  return (char *)v4;
}

char *sub_1D4BACF80(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *v7;

  v6 = sub_1D4BACBE0();
  if (*v6 == *(_QWORD *)(a1 + 32))
  {
    v7 = (uint64_t *)v6[1];
    return sub_1D4BAD004(v7, a2, a3);
  }
  v7 = (uint64_t *)atomic_load((unint64_t *)(a1 + 8));
  if (v7 && (_QWORD *)v7[1] == v6)
    return sub_1D4BAD004(v7, a2, a3);
  return sub_1D4BAD080(a1, a2, a3);
}

char *sub_1D4BAD004(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  char *v5;
  char **v6;

  v5 = (char *)a1[5];
  if (a1[6] - (uint64_t)v5 < a2)
    v5 = sub_1D4BAD258(a1, a2);
  else
    a1[5] = (uint64_t)&v5[a2];
  v6 = (char **)a1[7];
  if (v6 == (char **)a1[8])
  {
    sub_1D4BACDD8(a1, (uint64_t)v5, a3);
  }
  else
  {
    *v6 = v5;
    v6[1] = (char *)a3;
    a1[7] = (uint64_t)(v6 + 2);
  }
  return v5;
}

char *sub_1D4BAD080(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v5;

  v5 = (uint64_t *)sub_1D4BAD0C0(a1);
  return sub_1D4BAD004(v5, a2, a3);
}

unint64_t sub_1D4BAD0C0(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v5;

  v2 = sub_1D4BACBE0();
  if (*v2 == *(_QWORD *)(a1 + 32))
    return v2[1];
  v3 = atomic_load((unint64_t *)(a1 + 8));
  if (v3 && *(_QWORD **)(v3 + 8) == v2)
    return v3;
  v5 = sub_1D4BACBE0();
  return sub_1D4BAD128(a1, (uint64_t)v5);
}

unint64_t sub_1D4BAD128(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;

  v4 = atomic_load((unint64_t *)a1);
  if (!v4)
  {
LABEL_4:
    if (*(_QWORD *)(a1 + 40) <= 0x60uLL)
      v5 = 96;
    else
      v5 = *(_QWORD *)(a1 + 40);
    v6 = (_QWORD *)(*(uint64_t (**)(uint64_t))(a1 + 72))(v5);
    *v6 = 0;
    v6[1] = 24;
    v6[2] = v5;
    v7 = (unint64_t *)(a1 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + v5, v7));
    v6[3] = a1;
    v4 = (unint64_t)(v6 + 3);
    v6[1] = 96;
    v6[4] = a2;
    v6[5] = v6;
    v9 = (char *)v6 + v6[2];
    v6[8] = v6 + 12;
    v6[9] = v9;
    v6[6] = 0;
    v6[10] = 0;
    v6[11] = 0;
    v10 = *(_QWORD *)a1;
    v6[7] = *(_QWORD *)a1;
    v11 = __ldxr((unint64_t *)a1);
    if (v11 == v10)
    {
      if (__stlxr(v4, (unint64_t *)a1))
        goto LABEL_13;
      goto LABEL_19;
    }
    __clrex();
LABEL_13:
    while (1)
    {
      v6[7] = v11;
      v12 = __ldxr((unint64_t *)a1);
      if (v12 != v11)
        break;
      if (__stlxr(v4, (unint64_t *)a1))
        goto LABEL_17;
      v13 = 1;
LABEL_18:
      v11 = v12;
      if ((v13 & 1) != 0)
        goto LABEL_19;
    }
    __clrex();
LABEL_17:
    v13 = 0;
    goto LABEL_18;
  }
  while (*(_QWORD *)(v4 + 8) != a2)
  {
    v4 = *(_QWORD *)(v4 + 32);
    if (!v4)
      goto LABEL_4;
  }
LABEL_19:
  sub_1D4BACBE0()[1] = v4;
  v14 = *(_QWORD *)(a1 + 32);
  *sub_1D4BACBE0() = v14;
  atomic_store(v4, (unint64_t *)(a1 + 8));
  return v4;
}

char *sub_1D4BAD258(uint64_t *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  char *result;
  char *v7;
  uint64_t *v8;

  v4 = (_QWORD *)a1[2];
  v5 = v4[2];
  v8 = a1 + 5;
  result = (char *)a1[5];
  v7 = (char *)v8[1];
  do
  {
    v4[1] = &result[v5 - (_QWORD)v7];
    v4 = sub_1D4BACCE0(*a1, (uint64_t)v4, a2);
    a1[2] = (uint64_t)v4;
    v5 = v4[2];
    result = (char *)v4 + v4[1];
    v7 = (char *)v4 + v5;
    a1[5] = (uint64_t)result;
    a1[6] = (uint64_t)v4 + v5;
  }
  while ((char *)v4 + v5 - result < a2);
  a1[5] = (uint64_t)&result[a2];
  return result;
}

uint64_t sub_1D4BAD2D0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t, uint64_t, _QWORD);

  v3 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 88);
  if (v3)
    return v3(a2, a3, *(_QWORD *)(result + 112));
  return result;
}

void sub_1D4BAD2F0(void *__p)
{
  if (__p)
    operator delete(__p);
}

uint64_t *sub_1D4BAD2FC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t sub_1D4BAD680(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void sub_1D4BAD68C(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_1D4BAD6A0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFEC6B28);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EFEC6B28))
    {
      qword_1EFEC6AB8 = 0;
      unk_1EFEC6AC0 = 0;
      qword_1EFEC6AC8 = 0;
      sub_1D4BB2D9C((uint64_t)sub_1D4BAD68C, (uint64_t)&qword_1EFEC6AB8);
      __cxa_guard_release(&qword_1EFEC6B28);
    }
  }
}

void sub_1D4BAD708(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EFEC6B28);
  _Unwind_Resume(a1);
}

_BYTE *sub_1D4BAD720(uint64_t a1, uint64_t a2, int a3, unsigned __int8 a4, _BYTE *a5)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  const void **v11;
  unint64_t v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  _BYTE *v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  _BYTE *v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  _BYTE *v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  _BYTE *v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  _BYTE *v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  unsigned int v47;
  _BYTE *v48;
  unsigned int v49;
  unsigned int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  unsigned int v56;
  _BYTE *v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  unsigned int v61;
  _BYTE *v62;
  unsigned int v63;
  unsigned int v64;
  unint64_t v65;
  unsigned int v66;
  unint64_t v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  _BYTE *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  _BYTE *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  _BYTE *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  _BYTE *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  _BYTE *v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  _BYTE *v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  _BYTE *v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int v111;
  _BYTE *v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  _BYTE *v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int v129;
  _BYTE *v130;
  unsigned int v131;
  unsigned int v132;
  uint64_t v133;
  unsigned int v134;
  _BYTE *v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  unsigned int v139;
  _BYTE *v140;
  unsigned int v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  _BYTE *v148;
  unsigned int v149;
  _BYTE *v150;
  double v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _BYTE *v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  _DWORD v172[6];
  unsigned __int8 v173;
  _BYTE v174[32];
  _BYTE *v175[2];

  v175[0] = a5;
  v175[1] = (_BYTE *)a4;
  if (a3 >= 1)
  {
    v8 = 0;
    v9 = a3;
    while (2)
    {
      v10 = (unsigned int *)(a2 + 24 * v8);
      v11 = (const void **)(a1 + *v10);
      switch(v10[3])
      {
        case 0u:
          v12 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if (((*(_DWORD *)(a1 + ((v12 >> 3) & 0x1FFFFFFC)) >> v12) & 1) != 0)
          {
            v13 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v14 = v175[0];
            if (v13 < 0x80)
              goto LABEL_228;
            do
            {
              *v14++ = v13 | 0x80;
              v15 = v13 >> 7;
              v16 = v13 >> 14;
              v13 >>= 7;
            }
            while (v16);
            goto LABEL_229;
          }
          goto LABEL_315;
        case 1u:
          v17 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if (((*(_DWORD *)(a1 + ((v17 >> 3) & 0x1FFFFFFC)) >> v17) & 1) != 0)
          {
            v18 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v19 = v175[0];
            if (v18 < 0x80)
              goto LABEL_205;
            do
            {
              *v19++ = v18 | 0x80;
              v20 = v18 >> 7;
              v21 = v18 >> 14;
              v18 >>= 7;
            }
            while (v21);
            goto LABEL_206;
          }
          goto LABEL_315;
        case 2u:
          v22 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if (((*(_DWORD *)(a1 + ((v22 >> 3) & 0x1FFFFFFC)) >> v22) & 1) != 0)
          {
            v23 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v24 = v175[0];
            if (v23 < 0x80)
            {
              v25 = *(_DWORD *)(a2 + 24 * v8 + 4);
            }
            else
            {
              do
              {
                *v24++ = v23 | 0x80;
                v25 = v23 >> 7;
                v26 = v23 >> 14;
                v23 >>= 7;
              }
              while (v26);
            }
            *v24 = v25;
            v150 = v24 + 1;
            v151 = *(double *)v11;
            if ((unint64_t)*v11 >= 0x80)
            {
              do
              {
                *v150++ = LOBYTE(v151) | 0x80;
                v152 = *(_QWORD *)&v151 >> 7;
                v153 = *(_QWORD *)&v151 >> 14;
                *(_QWORD *)&v151 >>= 7;
              }
              while (v153);
              goto LABEL_313;
            }
            goto LABEL_312;
          }
          goto LABEL_315;
        case 3u:
          v27 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if (((*(_DWORD *)(a1 + ((v27 >> 3) & 0x1FFFFFFC)) >> v27) & 1) != 0)
          {
            v28 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v29 = v175[0];
            if (v28 < 0x80)
            {
              v30 = *(_DWORD *)(a2 + 24 * v8 + 4);
            }
            else
            {
              do
              {
                *v29++ = v28 | 0x80;
                v30 = v28 >> 7;
                v31 = v28 >> 14;
                v28 >>= 7;
              }
              while (v31);
            }
            *v29 = v30;
            v150 = v29 + 1;
            v151 = *(double *)v11;
            if ((unint64_t)*v11 >= 0x80)
            {
              do
              {
                *v150++ = LOBYTE(v151) | 0x80;
                v152 = *(_QWORD *)&v151 >> 7;
                v154 = *(_QWORD *)&v151 >> 14;
                *(_QWORD *)&v151 >>= 7;
              }
              while (v154);
              goto LABEL_313;
            }
            goto LABEL_312;
          }
          goto LABEL_315;
        case 4u:
          v32 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if (((*(_DWORD *)(a1 + ((v32 >> 3) & 0x1FFFFFFC)) >> v32) & 1) != 0)
          {
            v33 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v34 = v175[0];
            if (v33 < 0x80)
            {
              v35 = *(_DWORD *)(a2 + 24 * v8 + 4);
            }
            else
            {
              do
              {
                *v34++ = v33 | 0x80;
                v35 = v33 >> 7;
                v36 = v33 >> 14;
                v33 >>= 7;
              }
              while (v36);
            }
            *v34 = v35;
            v150 = v34 + 1;
            *(_QWORD *)&v151 = *(int *)v11;
            if (LODWORD(v151) >= 0x80)
            {
              do
              {
                *v150++ = LOBYTE(v151) | 0x80;
                v152 = *(_QWORD *)&v151 >> 7;
                v155 = *(_QWORD *)&v151 >> 14;
                *(_QWORD *)&v151 >>= 7;
              }
              while (v155);
              goto LABEL_313;
            }
            goto LABEL_312;
          }
          goto LABEL_315;
        case 5u:
          v37 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if (((*(_DWORD *)(a1 + ((v37 >> 3) & 0x1FFFFFFC)) >> v37) & 1) != 0)
          {
            v13 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v14 = v175[0];
            if (v13 < 0x80)
              goto LABEL_228;
            do
            {
              *v14++ = v13 | 0x80;
              v15 = v13 >> 7;
              v38 = v13 >> 14;
              v13 >>= 7;
            }
            while (v38);
            goto LABEL_229;
          }
          goto LABEL_315;
        case 6u:
          v39 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if (((*(_DWORD *)(a1 + ((v39 >> 3) & 0x1FFFFFFC)) >> v39) & 1) != 0)
          {
            v18 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v19 = v175[0];
            if (v18 < 0x80)
              goto LABEL_205;
            do
            {
              *v19++ = v18 | 0x80;
              v20 = v18 >> 7;
              v40 = v18 >> 14;
              v18 >>= 7;
            }
            while (v40);
            goto LABEL_206;
          }
          goto LABEL_315;
        case 7u:
          v41 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if (((*(_DWORD *)(a1 + ((v41 >> 3) & 0x1FFFFFFC)) >> v41) & 1) != 0)
          {
            v42 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v43 = v175[0];
            if (v42 < 0x80)
              goto LABEL_231;
            do
            {
              *v43++ = v42 | 0x80;
              v44 = v42 >> 7;
              v45 = v42 >> 14;
              v42 >>= 7;
            }
            while (v45);
            goto LABEL_232;
          }
          goto LABEL_315;
        case 8u:
          v46 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if (((*(_DWORD *)(a1 + ((v46 >> 3) & 0x1FFFFFFC)) >> v46) & 1) != 0)
          {
            v47 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v48 = v175[0];
            if (v47 < 0x80)
              goto LABEL_241;
            do
            {
              *v48++ = v47 | 0x80;
              v49 = v47 >> 7;
              v50 = v47 >> 14;
              v47 >>= 7;
            }
            while (v50);
            goto LABEL_242;
          }
          goto LABEL_315;
        case 9u:
          v51 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if (((*(_DWORD *)(a1 + ((v51 >> 3) & 0x1FFFFFFC)) >> v51) & 1) != 0)
            goto LABEL_188;
          goto LABEL_315;
        case 0xAu:
          v52 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if (((*(_DWORD *)(a1 + ((v52 >> 3) & 0x1FFFFFFC)) >> v52) & 1) != 0)
            goto LABEL_223;
          goto LABEL_315;
        case 0xBu:
          v53 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if (((*(_DWORD *)(a1 + ((v53 >> 3) & 0x1FFFFFFC)) >> v53) & 1) != 0)
          {
            v47 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v48 = v175[0];
            if (v47 < 0x80)
              goto LABEL_241;
            do
            {
              *v48++ = v47 | 0x80;
              v49 = v47 >> 7;
              v54 = v47 >> 14;
              v47 >>= 7;
            }
            while (v54);
            goto LABEL_242;
          }
          goto LABEL_315;
        case 0xCu:
          v55 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if (((*(_DWORD *)(a1 + ((v55 >> 3) & 0x1FFFFFFC)) >> v55) & 1) != 0)
          {
            v56 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v57 = v175[0];
            if (v56 < 0x80)
            {
              v58 = *(_DWORD *)(a2 + 24 * v8 + 4);
            }
            else
            {
              do
              {
                *v57++ = v56 | 0x80;
                v58 = v56 >> 7;
                v59 = v56 >> 14;
                v56 >>= 7;
              }
              while (v59);
            }
            *v57 = v58;
            v156 = v57 + 1;
            v157 = *(_DWORD *)v11;
            if (*(_DWORD *)v11 >= 0x80u)
            {
              do
              {
                *v156++ = v157 | 0x80;
                v158 = v157 >> 7;
                v159 = v157 >> 14;
                v157 >>= 7;
              }
              while (v159);
              goto LABEL_307;
            }
            goto LABEL_306;
          }
          goto LABEL_315;
        case 0xDu:
          v60 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if (((*(_DWORD *)(a1 + ((v60 >> 3) & 0x1FFFFFFC)) >> v60) & 1) != 0)
          {
            v61 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v62 = v175[0];
            if (v61 < 0x80)
            {
              v63 = *(_DWORD *)(a2 + 24 * v8 + 4);
            }
            else
            {
              do
              {
                *v62++ = v61 | 0x80;
                v63 = v61 >> 7;
                v64 = v61 >> 14;
                v61 >>= 7;
              }
              while (v64);
            }
            *v62 = v63;
            v150 = v62 + 1;
            *(_QWORD *)&v151 = *(int *)v11;
            if (LODWORD(v151) >= 0x80)
            {
              do
              {
                *v150++ = LOBYTE(v151) | 0x80;
                v152 = *(_QWORD *)&v151 >> 7;
                v160 = *(_QWORD *)&v151 >> 14;
                *(_QWORD *)&v151 >>= 7;
              }
              while (v160);
              goto LABEL_313;
            }
            goto LABEL_312;
          }
          goto LABEL_315;
        case 0xEu:
          v65 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if (((*(_DWORD *)(a1 + ((v65 >> 3) & 0x1FFFFFFC)) >> v65) & 1) != 0)
          {
            v18 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v19 = v175[0];
            if (v18 < 0x80)
              goto LABEL_205;
            do
            {
              *v19++ = v18 | 0x80;
              v20 = v18 >> 7;
              v66 = v18 >> 14;
              v18 >>= 7;
            }
            while (v66);
            goto LABEL_206;
          }
          goto LABEL_315;
        case 0xFu:
          v67 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if (((*(_DWORD *)(a1 + ((v67 >> 3) & 0x1FFFFFFC)) >> v67) & 1) != 0)
          {
            v13 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v14 = v175[0];
            if (v13 < 0x80)
              goto LABEL_228;
            do
            {
              *v14++ = v13 | 0x80;
              v15 = v13 >> 7;
              v68 = v13 >> 14;
              v13 >>= 7;
            }
            while (v68);
            goto LABEL_229;
          }
          goto LABEL_315;
        case 0x10u:
          v69 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if (((*(_DWORD *)(a1 + ((v69 >> 3) & 0x1FFFFFFC)) >> v69) & 1) != 0)
            goto LABEL_208;
          goto LABEL_315;
        case 0x11u:
          v70 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if (((*(_DWORD *)(a1 + ((v70 >> 3) & 0x1FFFFFFC)) >> v70) & 1) != 0)
            goto LABEL_210;
          goto LABEL_315;
        case 0x14u:
          v71 = *(unsigned int *)(a2 + 24 * v8 + 8);
          if (((*(_DWORD *)(a1 + ((v71 >> 3) & 0x1FFFFFFC)) >> v71) & 1) != 0)
          {
            v72 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v73 = v175[0];
            if (v72 < 0x80)
              goto LABEL_247;
            do
            {
              *v73++ = v72 | 0x80;
              v74 = v72 >> 7;
              v75 = v72 >> 14;
              v72 >>= 7;
            }
            while (v75);
            goto LABEL_248;
          }
          goto LABEL_315;
        case 0x15u:
          if (*(double *)v11 != 0.0)
          {
            v13 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v14 = v175[0];
            if (v13 < 0x80)
              goto LABEL_228;
            do
            {
              *v14++ = v13 | 0x80;
              v15 = v13 >> 7;
              v76 = v13 >> 14;
              v13 >>= 7;
            }
            while (v76);
            goto LABEL_229;
          }
          goto LABEL_315;
        case 0x16u:
          if (*(float *)v11 != 0.0)
          {
            v18 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v19 = v175[0];
            if (v18 < 0x80)
              goto LABEL_205;
            do
            {
              *v19++ = v18 | 0x80;
              v20 = v18 >> 7;
              v77 = v18 >> 14;
              v18 >>= 7;
            }
            while (v77);
            goto LABEL_206;
          }
          goto LABEL_315;
        case 0x17u:
          if (*v11)
          {
            v78 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v79 = v175[0];
            if (v78 < 0x80)
            {
              v80 = *(_DWORD *)(a2 + 24 * v8 + 4);
            }
            else
            {
              do
              {
                *v79++ = v78 | 0x80;
                v80 = v78 >> 7;
                v81 = v78 >> 14;
                v78 >>= 7;
              }
              while (v81);
            }
            *v79 = v80;
            v150 = v79 + 1;
            v151 = *(double *)v11;
            if ((unint64_t)*v11 >= 0x80)
            {
              do
              {
                *v150++ = LOBYTE(v151) | 0x80;
                v152 = *(_QWORD *)&v151 >> 7;
                v161 = *(_QWORD *)&v151 >> 14;
                *(_QWORD *)&v151 >>= 7;
              }
              while (v161);
              goto LABEL_313;
            }
            goto LABEL_312;
          }
          goto LABEL_315;
        case 0x18u:
          if (*v11)
          {
            v82 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v83 = v175[0];
            if (v82 < 0x80)
            {
              v84 = *(_DWORD *)(a2 + 24 * v8 + 4);
            }
            else
            {
              do
              {
                *v83++ = v82 | 0x80;
                v84 = v82 >> 7;
                v85 = v82 >> 14;
                v82 >>= 7;
              }
              while (v85);
            }
            *v83 = v84;
            v150 = v83 + 1;
            v151 = *(double *)v11;
            if ((unint64_t)*v11 >= 0x80)
            {
              do
              {
                *v150++ = LOBYTE(v151) | 0x80;
                v152 = *(_QWORD *)&v151 >> 7;
                v162 = *(_QWORD *)&v151 >> 14;
                *(_QWORD *)&v151 >>= 7;
              }
              while (v162);
              goto LABEL_313;
            }
            goto LABEL_312;
          }
          goto LABEL_315;
        case 0x19u:
          if (*(_DWORD *)v11)
          {
            v86 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v87 = v175[0];
            if (v86 < 0x80)
            {
              v88 = *(_DWORD *)(a2 + 24 * v8 + 4);
            }
            else
            {
              do
              {
                *v87++ = v86 | 0x80;
                v88 = v86 >> 7;
                v89 = v86 >> 14;
                v86 >>= 7;
              }
              while (v89);
            }
            *v87 = v88;
            v150 = v87 + 1;
            *(_QWORD *)&v151 = *(int *)v11;
            if (LODWORD(v151) >= 0x80)
            {
              do
              {
                *v150++ = LOBYTE(v151) | 0x80;
                v152 = *(_QWORD *)&v151 >> 7;
                v163 = *(_QWORD *)&v151 >> 14;
                *(_QWORD *)&v151 >>= 7;
              }
              while (v163);
              goto LABEL_313;
            }
            goto LABEL_312;
          }
          goto LABEL_315;
        case 0x1Au:
          if (*v11)
          {
            v13 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v14 = v175[0];
            if (v13 < 0x80)
              goto LABEL_228;
            do
            {
              *v14++ = v13 | 0x80;
              v15 = v13 >> 7;
              v90 = v13 >> 14;
              v13 >>= 7;
            }
            while (v90);
            goto LABEL_229;
          }
          goto LABEL_315;
        case 0x1Bu:
          if (*(_DWORD *)v11)
          {
            v18 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v19 = v175[0];
            if (v18 < 0x80)
              goto LABEL_205;
            do
            {
              *v19++ = v18 | 0x80;
              v20 = v18 >> 7;
              v91 = v18 >> 14;
              v18 >>= 7;
            }
            while (v91);
            goto LABEL_206;
          }
          goto LABEL_315;
        case 0x1Cu:
          if (*(_BYTE *)v11)
          {
            v42 = *(_DWORD *)(a2 + 24 * v8 + 4);
            v43 = v175[0];
            if (v42 < 0x80)
              goto LABEL_231;
            do
            {
              *v43++ = v42 | 0x80;
              v44 = v42 >> 7;
              v92 = v42 >> 14;
              v42 >>= 7;
            }
            while (v92);
            goto LABEL_232;
          }
          goto LABEL_315;
        case 0x1Du:
          if (*((char *)*v11 + 23) < 0)
          {
            if (*((_QWORD *)*v11 + 1))
            {
LABEL_234:
              v47 = *(_DWORD *)(a2 + 24 * v8 + 4);
              v48 = v175[0];
              if (v47 < 0x80)
                goto LABEL_241;
              do
              {
                *v48++ = v47 | 0x80;
                v49 = v47 >> 7;
                v146 = v47 >> 14;
                v47 >>= 7;
              }
              while (v146);
              goto LABEL_242;
            }
          }
          else if (*((_BYTE *)*v11 + 23))
          {
            goto LABEL_234;
          }
LABEL_315:
          if (++v8 != v9)
            continue;
          a5 = v175[0];
          break;
        case 0x1Eu:
          if (!*v11)
            goto LABEL_315;
          goto LABEL_188;
        case 0x1Fu:
          if (!*v11)
            goto LABEL_315;
          goto LABEL_223;
        case 0x20u:
          if (*((char *)*v11 + 23) < 0)
          {
            if (!*((_QWORD *)*v11 + 1))
              goto LABEL_315;
          }
          else if (!*((_BYTE *)*v11 + 23))
          {
            goto LABEL_315;
          }
          v47 = *(_DWORD *)(a2 + 24 * v8 + 4);
          v48 = v175[0];
          if (v47 < 0x80)
          {
LABEL_241:
            LOBYTE(v49) = v47;
          }
          else
          {
            do
            {
              *v48++ = v47 | 0x80;
              v49 = v47 >> 7;
              v147 = v47 >> 14;
              v47 >>= 7;
            }
            while (v147);
          }
LABEL_242:
          *v48 = v49;
          v148 = v48 + 1;
          v175[0] = v148;
          v11 = (const void **)*v11;
          goto LABEL_249;
        case 0x21u:
          if (!*(_DWORD *)v11)
            goto LABEL_315;
          v93 = *(_DWORD *)(a2 + 24 * v8 + 4);
          v94 = v175[0];
          if (v93 < 0x80)
          {
            v95 = *(_DWORD *)(a2 + 24 * v8 + 4);
          }
          else
          {
            do
            {
              *v94++ = v93 | 0x80;
              v95 = v93 >> 7;
              v96 = v93 >> 14;
              v93 >>= 7;
            }
            while (v96);
          }
          *v94 = v95;
          v156 = v94 + 1;
          v157 = *(_DWORD *)v11;
          if (*(_DWORD *)v11 < 0x80u)
            goto LABEL_306;
          do
          {
            *v156++ = v157 | 0x80;
            v158 = v157 >> 7;
            v164 = v157 >> 14;
            v157 >>= 7;
          }
          while (v164);
          goto LABEL_307;
        case 0x22u:
          if (!*(_DWORD *)v11)
            goto LABEL_315;
          v97 = *(_DWORD *)(a2 + 24 * v8 + 4);
          v98 = v175[0];
          if (v97 < 0x80)
          {
            v99 = *(_DWORD *)(a2 + 24 * v8 + 4);
          }
          else
          {
            do
            {
              *v98++ = v97 | 0x80;
              v99 = v97 >> 7;
              v100 = v97 >> 14;
              v97 >>= 7;
            }
            while (v100);
          }
          *v98 = v99;
          v150 = v98 + 1;
          *(_QWORD *)&v151 = *(int *)v11;
          if (LODWORD(v151) < 0x80)
            goto LABEL_312;
          do
          {
            *v150++ = LOBYTE(v151) | 0x80;
            v152 = *(_QWORD *)&v151 >> 7;
            v165 = *(_QWORD *)&v151 >> 14;
            *(_QWORD *)&v151 >>= 7;
          }
          while (v165);
          goto LABEL_313;
        case 0x23u:
          if (!*(_DWORD *)v11)
            goto LABEL_315;
          v18 = *(_DWORD *)(a2 + 24 * v8 + 4);
          v19 = v175[0];
          if (v18 < 0x80)
            goto LABEL_205;
          do
          {
            *v19++ = v18 | 0x80;
            v20 = v18 >> 7;
            v101 = v18 >> 14;
            v18 >>= 7;
          }
          while (v101);
          goto LABEL_206;
        case 0x24u:
          if (!*v11)
            goto LABEL_315;
          v13 = *(_DWORD *)(a2 + 24 * v8 + 4);
          v14 = v175[0];
          if (v13 < 0x80)
            goto LABEL_228;
          do
          {
            *v14++ = v13 | 0x80;
            v15 = v13 >> 7;
            v102 = v13 >> 14;
            v13 >>= 7;
          }
          while (v102);
          goto LABEL_229;
        case 0x25u:
          if (!*(_DWORD *)v11)
            goto LABEL_315;
          goto LABEL_208;
        case 0x26u:
          if (!*v11)
            goto LABEL_315;
          goto LABEL_210;
        case 0x29u:
          if (*((char *)v11 + 23) < 0)
          {
            if (!v11[1])
              goto LABEL_315;
          }
          else if (!*((_BYTE *)v11 + 23))
          {
            goto LABEL_315;
          }
          v72 = *(_DWORD *)(a2 + 24 * v8 + 4);
          v73 = v175[0];
          if (v72 < 0x80)
          {
LABEL_247:
            LOBYTE(v74) = v72;
          }
          else
          {
            do
            {
              *v73++ = v72 | 0x80;
              v74 = v72 >> 7;
              v149 = v72 >> 14;
              v72 >>= 7;
            }
            while (v149);
          }
LABEL_248:
          *v73 = v74;
          v148 = v73 + 1;
          v175[0] = v148;
LABEL_249:
          v175[0] = sub_1D4BB11D4(v11, v148);
          goto LABEL_315;
        case 0x2Au:
        case 0x2Fu:
        case 0x39u:
          sub_1D4BAEC04((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x2Bu:
        case 0x30u:
        case 0x38u:
          sub_1D4BAED30((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x2Cu:
        case 0x2Du:
          sub_1D4BAEE5C((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x2Eu:
        case 0x37u:
          sub_1D4BAEFC4((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x31u:
          sub_1D4BAF12C((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x32u:
        case 0x35u:
        case 0x3Eu:
          sub_1D4BAF258((char *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x33u:
          sub_1D4BAF434((uint64_t)v11, a2 + 24 * v8, (uint64_t *)v175);
          goto LABEL_315;
        case 0x34u:
          sub_1D4BAF558((uint64_t)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x36u:
          sub_1D4BAF5FC((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x3Au:
          sub_1D4BAF7D8((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x3Bu:
          sub_1D4BAF9C4((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x3Fu:
        case 0x44u:
        case 0x4Eu:
          sub_1D4BAEC7C((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x40u:
        case 0x45u:
        case 0x4Du:
          sub_1D4BAEDA8((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x41u:
        case 0x42u:
          sub_1D4BAEEF4((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x43u:
        case 0x4Cu:
          sub_1D4BAF05C((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x46u:
          sub_1D4BAF1A4((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x47u:
        case 0x48u:
        case 0x49u:
        case 0x4Au:
        case 0x53u:
          sub_1D4BAF2FC((uint64_t)v11, a2 + 24 * v8);
          goto LABEL_315;
        case 0x4Bu:
          sub_1D4BAF694((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x4Fu:
          sub_1D4BAF878((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x50u:
          sub_1D4BAFA64((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x54u:
          v142 = a2 + 24 * v8;
          v13 = *(_DWORD *)(v142 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v142 + 8)) != v13 >> 3)
            goto LABEL_315;
          v14 = v175[0];
          if (v13 < 0x80)
            goto LABEL_228;
          do
          {
            *v14++ = v13 | 0x80;
            v15 = v13 >> 7;
            v143 = v13 >> 14;
            v13 >>= 7;
          }
          while (v143);
          goto LABEL_229;
        case 0x55u:
          v103 = a2 + 24 * v8;
          v18 = *(_DWORD *)(v103 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v103 + 8)) != v18 >> 3)
            goto LABEL_315;
          v19 = v175[0];
          if (v18 < 0x80)
            goto LABEL_205;
          do
          {
            *v19++ = v18 | 0x80;
            v20 = v18 >> 7;
            v104 = v18 >> 14;
            v18 >>= 7;
          }
          while (v104);
          goto LABEL_206;
        case 0x56u:
          v105 = a2 + 24 * v8;
          v106 = *(_DWORD *)(v105 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v105 + 8)) != v106 >> 3)
            goto LABEL_315;
          v107 = v175[0];
          if (v106 < 0x80)
          {
            LOBYTE(v108) = v106;
          }
          else
          {
            do
            {
              *v107++ = v106 | 0x80;
              v108 = v106 >> 7;
              v109 = v106 >> 14;
              v106 >>= 7;
            }
            while (v109);
          }
          *v107 = v108;
          v150 = v107 + 1;
          v151 = *(double *)v11;
          if ((unint64_t)*v11 < 0x80)
            goto LABEL_312;
          do
          {
            *v150++ = LOBYTE(v151) | 0x80;
            v152 = *(_QWORD *)&v151 >> 7;
            v166 = *(_QWORD *)&v151 >> 14;
            *(_QWORD *)&v151 >>= 7;
          }
          while (v166);
          goto LABEL_313;
        case 0x57u:
          v110 = a2 + 24 * v8;
          v111 = *(_DWORD *)(v110 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v110 + 8)) != v111 >> 3)
            goto LABEL_315;
          v112 = v175[0];
          if (v111 < 0x80)
          {
            LOBYTE(v113) = v111;
          }
          else
          {
            do
            {
              *v112++ = v111 | 0x80;
              v113 = v111 >> 7;
              v114 = v111 >> 14;
              v111 >>= 7;
            }
            while (v114);
          }
          *v112 = v113;
          v150 = v112 + 1;
          v151 = *(double *)v11;
          if ((unint64_t)*v11 < 0x80)
            goto LABEL_312;
          do
          {
            *v150++ = LOBYTE(v151) | 0x80;
            v152 = *(_QWORD *)&v151 >> 7;
            v167 = *(_QWORD *)&v151 >> 14;
            *(_QWORD *)&v151 >>= 7;
          }
          while (v167);
          goto LABEL_313;
        case 0x58u:
          v115 = a2 + 24 * v8;
          v116 = *(_DWORD *)(v115 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v115 + 8)) != v116 >> 3)
            goto LABEL_315;
          v117 = v175[0];
          if (v116 < 0x80)
          {
            LOBYTE(v118) = v116;
          }
          else
          {
            do
            {
              *v117++ = v116 | 0x80;
              v118 = v116 >> 7;
              v119 = v116 >> 14;
              v116 >>= 7;
            }
            while (v119);
          }
          *v117 = v118;
          v150 = v117 + 1;
          *(_QWORD *)&v151 = *(int *)v11;
          if (LODWORD(v151) < 0x80)
            goto LABEL_312;
          do
          {
            *v150++ = LOBYTE(v151) | 0x80;
            v152 = *(_QWORD *)&v151 >> 7;
            v168 = *(_QWORD *)&v151 >> 14;
            *(_QWORD *)&v151 >>= 7;
          }
          while (v168);
          goto LABEL_313;
        case 0x59u:
          v120 = a2 + 24 * v8;
          v13 = *(_DWORD *)(v120 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v120 + 8)) != v13 >> 3)
            goto LABEL_315;
          v14 = v175[0];
          if (v13 < 0x80)
            goto LABEL_228;
          do
          {
            *v14++ = v13 | 0x80;
            v15 = v13 >> 7;
            v121 = v13 >> 14;
            v13 >>= 7;
          }
          while (v121);
          goto LABEL_229;
        case 0x5Au:
          v122 = a2 + 24 * v8;
          v18 = *(_DWORD *)(v122 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v122 + 8)) != v18 >> 3)
            goto LABEL_315;
          v19 = v175[0];
          if (v18 < 0x80)
            goto LABEL_205;
          do
          {
            *v19++ = v18 | 0x80;
            v20 = v18 >> 7;
            v123 = v18 >> 14;
            v18 >>= 7;
          }
          while (v123);
          goto LABEL_206;
        case 0x5Bu:
          v124 = a2 + 24 * v8;
          v42 = *(_DWORD *)(v124 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v124 + 8)) != v42 >> 3)
            goto LABEL_315;
          v43 = v175[0];
          if (v42 < 0x80)
          {
LABEL_231:
            LOBYTE(v44) = v42;
          }
          else
          {
            do
            {
              *v43++ = v42 | 0x80;
              v44 = v42 >> 7;
              v125 = v42 >> 14;
              v42 >>= 7;
            }
            while (v125);
          }
LABEL_232:
          *v43 = v44;
          v43[1] = *(_BYTE *)v11;
          v140 = v43 + 2;
          goto LABEL_314;
        case 0x5Cu:
          v47 = *(_DWORD *)(a2 + 24 * v8 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) != v47 >> 3)
            goto LABEL_315;
          v48 = v175[0];
          if (v47 < 0x80)
            goto LABEL_241;
          do
          {
            *v48++ = v47 | 0x80;
            v49 = v47 >> 7;
            v126 = v47 >> 14;
            v47 >>= 7;
          }
          while (v126);
          goto LABEL_242;
        case 0x5Du:
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) == *(_DWORD *)(a2 + 24 * v8 + 4) >> 3)
LABEL_188:
            sub_1D4BAF390((uint64_t *)v11, a2 + 24 * v8, (uint64_t *)v175);
          goto LABEL_315;
        case 0x5Eu:
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) == *(_DWORD *)(a2 + 24 * v8 + 4) >> 3)
LABEL_223:
            sub_1D4BAF514((uint64_t *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x5Fu:
          v47 = *(_DWORD *)(a2 + 24 * v8 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) != v47 >> 3)
            goto LABEL_315;
          v48 = v175[0];
          if (v47 < 0x80)
            goto LABEL_241;
          do
          {
            *v48++ = v47 | 0x80;
            v49 = v47 >> 7;
            v127 = v47 >> 14;
            v47 >>= 7;
          }
          while (v127);
          goto LABEL_242;
        case 0x60u:
          v128 = a2 + 24 * v8;
          v129 = *(_DWORD *)(v128 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v128 + 8)) != v129 >> 3)
            goto LABEL_315;
          v130 = v175[0];
          if (v129 < 0x80)
          {
            LOBYTE(v131) = v129;
          }
          else
          {
            do
            {
              *v130++ = v129 | 0x80;
              v131 = v129 >> 7;
              v132 = v129 >> 14;
              v129 >>= 7;
            }
            while (v132);
          }
          *v130 = v131;
          v156 = v130 + 1;
          v157 = *(_DWORD *)v11;
          if (*(_DWORD *)v11 < 0x80u)
          {
LABEL_306:
            LOBYTE(v158) = v157;
          }
          else
          {
            do
            {
              *v156++ = v157 | 0x80;
              v158 = v157 >> 7;
              v169 = v157 >> 14;
              v157 >>= 7;
            }
            while (v169);
          }
LABEL_307:
          *v156 = v158;
          v140 = v156 + 1;
          goto LABEL_314;
        case 0x61u:
          v133 = a2 + 24 * v8;
          v134 = *(_DWORD *)(v133 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v133 + 8)) != v134 >> 3)
            goto LABEL_315;
          v135 = v175[0];
          if (v134 < 0x80)
          {
            LOBYTE(v136) = v134;
          }
          else
          {
            do
            {
              *v135++ = v134 | 0x80;
              v136 = v134 >> 7;
              v137 = v134 >> 14;
              v134 >>= 7;
            }
            while (v137);
          }
          *v135 = v136;
          v150 = v135 + 1;
          *(_QWORD *)&v151 = *(int *)v11;
          if (LODWORD(v151) < 0x80)
          {
LABEL_312:
            LOBYTE(v152) = LOBYTE(v151);
          }
          else
          {
            do
            {
              *v150++ = LOBYTE(v151) | 0x80;
              v152 = *(_QWORD *)&v151 >> 7;
              v170 = *(_QWORD *)&v151 >> 14;
              *(_QWORD *)&v151 >>= 7;
            }
            while (v170);
          }
LABEL_313:
          *v150 = v152;
          v140 = v150 + 1;
          goto LABEL_314;
        case 0x62u:
          v138 = a2 + 24 * v8;
          v18 = *(_DWORD *)(v138 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v138 + 8)) != v18 >> 3)
            goto LABEL_315;
          v19 = v175[0];
          if (v18 < 0x80)
          {
LABEL_205:
            LOBYTE(v20) = v18;
          }
          else
          {
            do
            {
              *v19++ = v18 | 0x80;
              v20 = v18 >> 7;
              v139 = v18 >> 14;
              v18 >>= 7;
            }
            while (v139);
          }
LABEL_206:
          *v19 = v20;
          *(_DWORD *)(v19 + 1) = *(_DWORD *)v11;
          v140 = v19 + 5;
          goto LABEL_314;
        case 0x63u:
          v144 = a2 + 24 * v8;
          v13 = *(_DWORD *)(v144 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(v144 + 8)) != v13 >> 3)
            goto LABEL_315;
          v14 = v175[0];
          if (v13 < 0x80)
          {
LABEL_228:
            LOBYTE(v15) = v13;
          }
          else
          {
            do
            {
              *v14++ = v13 | 0x80;
              v15 = v13 >> 7;
              v145 = v13 >> 14;
              v13 >>= 7;
            }
            while (v145);
          }
LABEL_229:
          *v14 = v15;
          *(_QWORD *)(v14 + 1) = *v11;
          v140 = v14 + 9;
LABEL_314:
          v175[0] = v140;
          goto LABEL_315;
        case 0x64u:
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) == *(_DWORD *)(a2 + 24 * v8 + 4) >> 3)
LABEL_208:
            sub_1D4BAF764((int *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x65u:
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) == *(_DWORD *)(a2 + 24 * v8 + 4) >> 3)
LABEL_210:
            sub_1D4BAF950((uint64_t *)v11, a2 + 24 * v8, v175);
          goto LABEL_315;
        case 0x68u:
          v72 = *(_DWORD *)(a2 + 24 * v8 + 4);
          if (*(_DWORD *)(a1 + *(unsigned int *)(a2 + 24 * v8 + 8)) != v72 >> 3)
            goto LABEL_315;
          v11 = (const void **)*v11;
          v73 = v175[0];
          if (v72 < 0x80)
            goto LABEL_247;
          do
          {
            *v73++ = v72 | 0x80;
            v74 = v72 >> 7;
            v141 = v72 >> 14;
            v72 >>= 7;
          }
          while (v141);
          goto LABEL_248;
        case 0x69u:
          sub_1D4BB12D0((uint64_t)v174, (uint64_t)v175[0], 0x7FFFFFFF, -1);
          sub_1D4BB0D94((uint64_t)v172, (uint64_t)v174);
          v173 = a4;
          (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _DWORD *))(a2 + 24 * v8 + 16))(a1, *v10, *(unsigned int *)(a2 + 24 * v8 + 4), *(unsigned int *)(a2 + 24 * v8 + 8), v172);
          v175[0] = &v175[0][v172[5] - v172[4]];
          sub_1D4BB0EE0((uint64_t)v172);
          goto LABEL_315;
        default:
          sub_1D4BAEB84(v10[3]);
          goto LABEL_315;
      }
      break;
    }
  }
  return a5;
}

void sub_1D4BAEB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D4BB0EE0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BAEB84(int a1)
{
  std::string *v2;
  std::string *v3;
  char v5;
  std::string v6[2];

  sub_1D4BB2880((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/generated_message_util.cc", 571);
  v2 = sub_1D4BB2898(v6, "Not implemented field number ");
  v3 = sub_1D4BB2B4C(v2, a1);
  sub_1D4BB29C8((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
  return sub_1D4BB29D0((uint64_t)v6);
}

void sub_1D4BAEBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D4BB29D0((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_1D4BAEC04(int *result, uint64_t a2, _BYTE **a3)
{
  uint64_t v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  if (*result >= 1)
  {
    v3 = 0;
    v4 = *a3;
    do
    {
      v5 = *(_DWORD *)(a2 + 4);
      if (v5 < 0x80)
      {
        v6 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v4++ = v5 | 0x80;
          v6 = v5 >> 7;
          v7 = v5 >> 14;
          v5 >>= 7;
        }
        while (v7);
      }
      *v4 = v6;
      *a3 = v4 + 1;
      *(_QWORD *)(v4 + 1) = *(_QWORD *)(*((_QWORD *)result + 1) + 8 * v3 + 8);
      v4 += 9;
      *a3 = v4;
      ++v3;
    }
    while (v3 < *result);
  }
  return result;
}

int *sub_1D4BAEC7C(int *result, uint64_t a2, _BYTE **a3)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  uint64_t v12;

  if (*result)
  {
    v3 = *(_DWORD *)(a2 + 4);
    v4 = *a3;
    if (v3 < 0x80)
    {
      v5 = *(_DWORD *)(a2 + 4);
    }
    else
    {
      do
      {
        *v4++ = v3 | 0x80;
        v5 = v3 >> 7;
        v6 = v3 >> 14;
        v3 >>= 7;
      }
      while (v6);
    }
    *v4 = v5;
    v7 = v4 + 1;
    v8 = result[4];
    if (v8 < 0x80)
    {
      v9 = result[4];
    }
    else
    {
      do
      {
        *v7++ = v8 | 0x80;
        v9 = v8 >> 7;
        v10 = v8 >> 14;
        v8 >>= 7;
      }
      while (v10);
    }
    *v7 = v9;
    *a3 = v7 + 1;
    if (*result >= 1)
    {
      v11 = v7 + 9;
      v12 = 1;
      do
      {
        *((_QWORD *)v11 - 1) = *(_QWORD *)(*((_QWORD *)result + 1) + 8 * v12);
        *a3 = v11;
        v11 += 8;
      }
      while (v12++ < *result);
    }
  }
  return result;
}

int *sub_1D4BAED30(int *result, uint64_t a2, _BYTE **a3)
{
  uint64_t v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  if (*result >= 1)
  {
    v3 = 0;
    v4 = *a3;
    do
    {
      v5 = *(_DWORD *)(a2 + 4);
      if (v5 < 0x80)
      {
        v6 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v4++ = v5 | 0x80;
          v6 = v5 >> 7;
          v7 = v5 >> 14;
          v5 >>= 7;
        }
        while (v7);
      }
      *v4 = v6;
      *a3 = v4 + 1;
      *(_DWORD *)(v4 + 1) = *(_DWORD *)(*((_QWORD *)result + 1) + 4 * v3 + 8);
      v4 += 5;
      *a3 = v4;
      ++v3;
    }
    while (v3 < *result);
  }
  return result;
}

int *sub_1D4BAEDA8(int *result, uint64_t a2, _BYTE **a3)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;

  if (*result)
  {
    v3 = *(_DWORD *)(a2 + 4);
    v4 = *a3;
    if (v3 < 0x80)
    {
      v5 = *(_DWORD *)(a2 + 4);
    }
    else
    {
      do
      {
        *v4++ = v3 | 0x80;
        v5 = v3 >> 7;
        v6 = v3 >> 14;
        v3 >>= 7;
      }
      while (v6);
    }
    *v4 = v5;
    v7 = v4 + 1;
    v8 = result[4];
    if (v8 < 0x80)
    {
      v9 = result[4];
    }
    else
    {
      do
      {
        *v7++ = v8 | 0x80;
        v9 = v8 >> 7;
        v10 = v8 >> 14;
        v8 >>= 7;
      }
      while (v10);
    }
    *v7 = v9;
    *a3 = v7 + 1;
    if (*result >= 1)
    {
      v11 = v7 + 5;
      v12 = 2;
      do
      {
        *((_DWORD *)v11 - 1) = *(_DWORD *)(*((_QWORD *)result + 1) + 4 * v12);
        *a3 = v11;
        v11 += 4;
        v13 = v12++ - 1;
      }
      while (v13 < *result);
    }
  }
  return result;
}

int *sub_1D4BAEE5C(int *result, uint64_t a2, _BYTE **a3)
{
  uint64_t v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (*result >= 1)
  {
    v3 = 0;
    v4 = *a3;
    do
    {
      v5 = *(_DWORD *)(a2 + 4);
      if (v5 < 0x80)
      {
        v6 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v4++ = v5 | 0x80;
          v6 = v5 >> 7;
          v7 = v5 >> 14;
          v5 >>= 7;
        }
        while (v7);
      }
      *v4 = v6;
      v8 = v4 + 1;
      *a3 = v8;
      v9 = *(_QWORD *)(*((_QWORD *)result + 1) + 8 * v3 + 8);
      if (v9 < 0x80)
      {
        v10 = *(_QWORD *)(*((_QWORD *)result + 1) + 8 * v3 + 8);
      }
      else
      {
        do
        {
          *v8++ = v9 | 0x80;
          v10 = v9 >> 7;
          v11 = v9 >> 14;
          v9 >>= 7;
        }
        while (v11);
      }
      *v8 = v10;
      v4 = v8 + 1;
      *a3 = v4;
      ++v3;
    }
    while (v3 < *result);
  }
  return result;
}

int *sub_1D4BAEEF4(int *result, uint64_t a2, _BYTE **a3)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  if (*result)
  {
    v3 = *(_DWORD *)(a2 + 4);
    v4 = *a3;
    if (v3 < 0x80)
    {
      v5 = *(_DWORD *)(a2 + 4);
    }
    else
    {
      do
      {
        *v4++ = v3 | 0x80;
        v5 = v3 >> 7;
        v6 = v3 >> 14;
        v3 >>= 7;
      }
      while (v6);
    }
    *v4 = v5;
    v7 = v4 + 1;
    v8 = result[4];
    if (v8 < 0x80)
    {
      v9 = result[4];
    }
    else
    {
      do
      {
        *v7++ = v8 | 0x80;
        v9 = v8 >> 7;
        v10 = v8 >> 14;
        v8 >>= 7;
      }
      while (v10);
    }
    *v7 = v9;
    v11 = v7 + 1;
    *a3 = v11;
    if (*result >= 1)
    {
      v12 = 0;
      do
      {
        v13 = *(_QWORD *)(*((_QWORD *)result + 1) + 8 * v12 + 8);
        if (v13 < 0x80)
        {
          v14 = *(_QWORD *)(*((_QWORD *)result + 1) + 8 * v12 + 8);
        }
        else
        {
          do
          {
            *v11++ = v13 | 0x80;
            v14 = v13 >> 7;
            v15 = v13 >> 14;
            v13 >>= 7;
          }
          while (v15);
        }
        *v11++ = v14;
        *a3 = v11;
        ++v12;
      }
      while (v12 < *result);
    }
  }
  return result;
}

int *sub_1D4BAEFC4(int *result, uint64_t a2, _BYTE **a3)
{
  uint64_t v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _BYTE *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (*result >= 1)
  {
    v3 = 0;
    v4 = *a3;
    do
    {
      v5 = *(_DWORD *)(a2 + 4);
      if (v5 < 0x80)
      {
        v6 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v4++ = v5 | 0x80;
          v6 = v5 >> 7;
          v7 = v5 >> 14;
          v5 >>= 7;
        }
        while (v7);
      }
      *v4 = v6;
      v8 = v4 + 1;
      *a3 = v8;
      v9 = *(int *)(*((_QWORD *)result + 1) + 4 * v3 + 8);
      if (v9 < 0x80)
      {
        LODWORD(v10) = *(_DWORD *)(*((_QWORD *)result + 1) + 4 * v3 + 8);
      }
      else
      {
        do
        {
          *v8++ = v9 | 0x80;
          v10 = v9 >> 7;
          v11 = v9 >> 14;
          v9 >>= 7;
        }
        while (v11);
      }
      *v8 = v10;
      v4 = v8 + 1;
      *a3 = v4;
      ++v3;
    }
    while (v3 < *result);
  }
  return result;
}

int *sub_1D4BAF05C(int *result, uint64_t a2, _BYTE **a3)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  if (*result)
  {
    v3 = *(_DWORD *)(a2 + 4);
    v4 = *a3;
    if (v3 < 0x80)
    {
      v5 = *(_DWORD *)(a2 + 4);
    }
    else
    {
      do
      {
        *v4++ = v3 | 0x80;
        v5 = v3 >> 7;
        v6 = v3 >> 14;
        v3 >>= 7;
      }
      while (v6);
    }
    *v4 = v5;
    v7 = v4 + 1;
    v8 = result[4];
    if (v8 < 0x80)
    {
      v9 = result[4];
    }
    else
    {
      do
      {
        *v7++ = v8 | 0x80;
        v9 = v8 >> 7;
        v10 = v8 >> 14;
        v8 >>= 7;
      }
      while (v10);
    }
    *v7 = v9;
    v11 = v7 + 1;
    *a3 = v11;
    if (*result >= 1)
    {
      v12 = 0;
      do
      {
        v13 = *(int *)(*((_QWORD *)result + 1) + 4 * v12 + 8);
        if (v13 < 0x80)
        {
          LODWORD(v14) = *(_DWORD *)(*((_QWORD *)result + 1) + 4 * v12 + 8);
        }
        else
        {
          do
          {
            *v11++ = v13 | 0x80;
            v14 = v13 >> 7;
            v15 = v13 >> 14;
            v13 >>= 7;
          }
          while (v15);
        }
        *v11++ = v14;
        *a3 = v11;
        ++v12;
      }
      while (v12 < *result);
    }
  }
  return result;
}

int *sub_1D4BAF12C(int *result, uint64_t a2, _BYTE **a3)
{
  uint64_t v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  if (*result >= 1)
  {
    v3 = 0;
    v4 = *a3;
    do
    {
      v5 = *(_DWORD *)(a2 + 4);
      if (v5 < 0x80)
      {
        v6 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v4++ = v5 | 0x80;
          v6 = v5 >> 7;
          v7 = v5 >> 14;
          v5 >>= 7;
        }
        while (v7);
      }
      *v4 = v6;
      *a3 = v4 + 1;
      v4[1] = *(_BYTE *)(*((_QWORD *)result + 1) + v3 + 8);
      v4 += 2;
      *a3 = v4;
      ++v3;
    }
    while (v3 < *result);
  }
  return result;
}

int *sub_1D4BAF1A4(int *result, uint64_t a2, _BYTE **a3)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  if (*result)
  {
    v3 = *(_DWORD *)(a2 + 4);
    v4 = *a3;
    if (v3 < 0x80)
    {
      v5 = *(_DWORD *)(a2 + 4);
    }
    else
    {
      do
      {
        *v4++ = v3 | 0x80;
        v5 = v3 >> 7;
        v6 = v3 >> 14;
        v3 >>= 7;
      }
      while (v6);
    }
    *v4 = v5;
    v7 = v4 + 1;
    v8 = result[4];
    if (v8 < 0x80)
    {
      v9 = result[4];
    }
    else
    {
      do
      {
        *v7++ = v8 | 0x80;
        v9 = v8 >> 7;
        v10 = v8 >> 14;
        v8 >>= 7;
      }
      while (v10);
    }
    *v7 = v9;
    *a3 = v7 + 1;
    if (*result >= 1)
    {
      v11 = 0;
      do
      {
        v7[v11 + 1] = *(_BYTE *)(*((_QWORD *)result + 1) + v11 + 8);
        *a3 = &v7[v11++ + 2];
      }
      while (v11 < *result);
    }
  }
  return result;
}

char *sub_1D4BAF258(char *result, uint64_t a2, char **a3)
{
  char *v5;
  uint64_t v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  if (*((int *)result + 2) >= 1)
  {
    v5 = result;
    v6 = 0;
    v7 = *a3;
    do
    {
      v8 = *(_DWORD *)(a2 + 4);
      if (v8 < 0x80)
      {
        v9 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v7++ = v8 | 0x80;
          v9 = v8 >> 7;
          v10 = v8 >> 14;
          v8 >>= 7;
        }
        while (v10);
      }
      *v7 = v9;
      v11 = v7 + 1;
      *a3 = v11;
      v12 = *((_QWORD *)v5 + 2);
      if (v12)
        v13 = v12 + 8;
      else
        v13 = 0;
      result = sub_1D4BB11D4(*(const void ***)(v13 + 8 * v6), v11);
      v7 = result;
      *a3 = result;
      ++v6;
    }
    while (v6 < *((int *)v5 + 2));
  }
  return result;
}

uint64_t sub_1D4BAF2FC(uint64_t a1, uint64_t a2)
{
  std::string *v3;
  std::string *v4;
  std::string *v5;
  std::string *v6;
  char v8;
  std::string v9[2];

  sub_1D4BB2880((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/generated_message_util.cc", 534);
  v3 = sub_1D4BB2898(v9, "Not implemented field number ");
  v4 = sub_1D4BB2BC8(v3, *(_DWORD *)(a2 + 4));
  v5 = sub_1D4BB2898(v4, " with type ");
  v6 = sub_1D4BB2BC8(v5, *(_DWORD *)(a2 + 12));
  sub_1D4BB29C8((uint64_t)&v8, (const char **)&v6->__r_.__value_.__l.__data_);
  return sub_1D4BB29D0((uint64_t)v9);
}

void sub_1D4BAF378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D4BB29D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BAF390(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v5;
  _BYTE *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v10;
  _BYTE *v11;
  int v12;
  unsigned int v13;

  v5 = *(_DWORD *)(a2 + 4);
  v6 = (_BYTE *)*a3;
  if (v5 < 0x80)
  {
    v7 = *(_DWORD *)(a2 + 4);
  }
  else
  {
    do
    {
      *v6++ = v5 | 0x80;
      v7 = v5 >> 7;
      v8 = v5 >> 14;
      v5 >>= 7;
    }
    while (v8);
  }
  *v6 = v7;
  *a3 = (uint64_t)(v6 + 1);
  result = sub_1D4BAFCF0(*a1, *(_QWORD *)(a2 + 16), a3);
  v10 = *(_DWORD *)(a2 + 4) + 1;
  v11 = (_BYTE *)*a3;
  if (v10 < 0x80)
  {
    v12 = *(_DWORD *)(a2 + 4) + 1;
  }
  else
  {
    do
    {
      *v11++ = v10 | 0x80;
      v12 = v10 >> 7;
      v13 = v10 >> 14;
      v10 >>= 7;
    }
    while (v13);
  }
  *v11 = v12;
  *a3 = (uint64_t)(v11 + 1);
  return result;
}

uint64_t sub_1D4BAF434(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _BYTE *v14;
  int v15;
  unsigned int v16;

  if (*(int *)(result + 8) >= 1)
  {
    v5 = result;
    v6 = 0;
    v7 = (_BYTE *)*a3;
    do
    {
      v8 = *(_DWORD *)(a2 + 4);
      if (v8 < 0x80)
      {
        v9 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v7++ = v8 | 0x80;
          v9 = v8 >> 7;
          v10 = v8 >> 14;
          v8 >>= 7;
        }
        while (v10);
      }
      *v7 = v9;
      *a3 = (uint64_t)(v7 + 1);
      v11 = *(_QWORD *)(v5 + 16);
      if (v11)
        v12 = v11 + 8;
      else
        v12 = 0;
      result = sub_1D4BAFCF0(*(_QWORD *)(v12 + 8 * v6), *(_QWORD *)(a2 + 16), a3);
      v13 = *(_DWORD *)(a2 + 4) + 1;
      v14 = (_BYTE *)*a3;
      if (v13 < 0x80)
      {
        v15 = *(_DWORD *)(a2 + 4) + 1;
      }
      else
      {
        do
        {
          *v14++ = v13 | 0x80;
          v15 = v13 >> 7;
          v16 = v13 >> 14;
          v13 >>= 7;
        }
        while (v16);
      }
      *v14 = v15;
      v7 = v14 + 1;
      *a3 = (uint64_t)v7;
      ++v6;
    }
    while (v6 < *(int *)(v5 + 8));
  }
  return result;
}

uint64_t sub_1D4BAF514(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *(_DWORD *)(a2 + 4);
  v4 = (_BYTE *)*a3;
  if (v3 < 0x80)
  {
    v5 = *(_DWORD *)(a2 + 4);
  }
  else
  {
    do
    {
      *v4++ = v3 | 0x80;
      v5 = v3 >> 7;
      v6 = v3 >> 14;
      v3 >>= 7;
    }
    while (v6);
  }
  *v4 = v5;
  *a3 = v4 + 1;
  return sub_1D4BAFD48(*a1, *(_QWORD *)(a2 + 16), (uint64_t)a3);
}

uint64_t sub_1D4BAF558(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (*(int *)(result + 8) >= 1)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = *(_DWORD *)(a2 + 4);
      v8 = (_BYTE *)*a3;
      if (v7 < 0x80)
      {
        v9 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v8++ = v7 | 0x80;
          v9 = v7 >> 7;
          v10 = v7 >> 14;
          v7 >>= 7;
        }
        while (v10);
      }
      *v8 = v9;
      *a3 = v8 + 1;
      v11 = *(_QWORD *)(v5 + 16);
      if (v11)
        v12 = v11 + 8;
      else
        v12 = 0;
      result = sub_1D4BAFD48(*(_QWORD *)(v12 + 8 * v6++), *(_QWORD *)(a2 + 16), (uint64_t)a3);
    }
    while (v6 < *(int *)(v5 + 8));
  }
  return result;
}

int *sub_1D4BAF5FC(int *result, uint64_t a2, _BYTE **a3)
{
  uint64_t v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _BYTE *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  if (*result >= 1)
  {
    v3 = 0;
    v4 = *a3;
    do
    {
      v5 = *(_DWORD *)(a2 + 4);
      if (v5 < 0x80)
      {
        v6 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v4++ = v5 | 0x80;
          v6 = v5 >> 7;
          v7 = v5 >> 14;
          v5 >>= 7;
        }
        while (v7);
      }
      *v4 = v6;
      v8 = v4 + 1;
      *a3 = v8;
      v9 = *(_DWORD *)(*((_QWORD *)result + 1) + 4 * v3 + 8);
      if (v9 < 0x80)
      {
        v10 = *(_DWORD *)(*((_QWORD *)result + 1) + 4 * v3 + 8);
      }
      else
      {
        do
        {
          *v8++ = v9 | 0x80;
          v10 = v9 >> 7;
          v11 = v9 >> 14;
          v9 >>= 7;
        }
        while (v11);
      }
      *v8 = v10;
      v4 = v8 + 1;
      *a3 = v4;
      ++v3;
    }
    while (v3 < *result);
  }
  return result;
}

int *sub_1D4BAF694(int *result, uint64_t a2, _BYTE **a3)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  if (*result)
  {
    v3 = *(_DWORD *)(a2 + 4);
    v4 = *a3;
    if (v3 < 0x80)
    {
      v5 = *(_DWORD *)(a2 + 4);
    }
    else
    {
      do
      {
        *v4++ = v3 | 0x80;
        v5 = v3 >> 7;
        v6 = v3 >> 14;
        v3 >>= 7;
      }
      while (v6);
    }
    *v4 = v5;
    v7 = v4 + 1;
    v8 = result[4];
    if (v8 < 0x80)
    {
      v9 = result[4];
    }
    else
    {
      do
      {
        *v7++ = v8 | 0x80;
        v9 = v8 >> 7;
        v10 = v8 >> 14;
        v8 >>= 7;
      }
      while (v10);
    }
    *v7 = v9;
    v11 = v7 + 1;
    *a3 = v11;
    if (*result >= 1)
    {
      v12 = 0;
      do
      {
        v13 = *(_DWORD *)(*((_QWORD *)result + 1) + 4 * v12 + 8);
        if (v13 < 0x80)
        {
          v14 = *(_DWORD *)(*((_QWORD *)result + 1) + 4 * v12 + 8);
        }
        else
        {
          do
          {
            *v11++ = v13 | 0x80;
            v14 = v13 >> 7;
            v15 = v13 >> 14;
            v13 >>= 7;
          }
          while (v15);
        }
        *v11++ = v14;
        *a3 = v11;
        ++v12;
      }
      while (v12 < *result);
    }
  }
  return result;
}

int *sub_1D4BAF764(int *result, uint64_t a2, _BYTE **a3)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = *(_DWORD *)(a2 + 4);
  v4 = *a3;
  if (v3 < 0x80)
  {
    v5 = *(_DWORD *)(a2 + 4);
  }
  else
  {
    do
    {
      *v4++ = v3 | 0x80;
      v5 = v3 >> 7;
      v6 = v3 >> 14;
      v3 >>= 7;
    }
    while (v6);
  }
  *v4 = v5;
  v7 = v4 + 1;
  v8 = (2 * *result) ^ (*result >> 31);
  if (v8 < 0x80)
  {
    v9 = (2 * *result) ^ (*result >> 31);
  }
  else
  {
    do
    {
      *v7++ = v8 | 0x80;
      v9 = v8 >> 7;
      v10 = v8 >> 14;
      v8 >>= 7;
    }
    while (v10);
  }
  *v7 = v9;
  *a3 = v7 + 1;
  return result;
}

int *sub_1D4BAF7D8(int *result, uint64_t a2, _BYTE **a3)
{
  uint64_t v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _BYTE *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  if (*result >= 1)
  {
    v3 = 0;
    v4 = *a3;
    do
    {
      v5 = *(_DWORD *)(a2 + 4);
      if (v5 < 0x80)
      {
        v6 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v4++ = v5 | 0x80;
          v6 = v5 >> 7;
          v7 = v5 >> 14;
          v5 >>= 7;
        }
        while (v7);
      }
      *v4 = v6;
      v8 = v4 + 1;
      *a3 = v8;
      v9 = *(_DWORD *)(*((_QWORD *)result + 1) + 4 * v3 + 8);
      v10 = (2 * v9) ^ (v9 >> 31);
      if (v10 < 0x80)
      {
        LOBYTE(v11) = v10;
      }
      else
      {
        do
        {
          *v8++ = v10 | 0x80;
          v11 = v10 >> 7;
          v12 = v10 >> 14;
          v10 >>= 7;
        }
        while (v12);
      }
      *v8 = v11;
      v4 = v8 + 1;
      *a3 = v4;
      ++v3;
    }
    while (v3 < *result);
  }
  return result;
}

int *sub_1D4BAF878(int *result, uint64_t a2, _BYTE **a3)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  if (*result)
  {
    v3 = *(_DWORD *)(a2 + 4);
    v4 = *a3;
    if (v3 < 0x80)
    {
      v5 = *(_DWORD *)(a2 + 4);
    }
    else
    {
      do
      {
        *v4++ = v3 | 0x80;
        v5 = v3 >> 7;
        v6 = v3 >> 14;
        v3 >>= 7;
      }
      while (v6);
    }
    *v4 = v5;
    v7 = v4 + 1;
    v8 = result[4];
    if (v8 < 0x80)
    {
      v9 = result[4];
    }
    else
    {
      do
      {
        *v7++ = v8 | 0x80;
        v9 = v8 >> 7;
        v10 = v8 >> 14;
        v8 >>= 7;
      }
      while (v10);
    }
    *v7 = v9;
    v11 = v7 + 1;
    *a3 = v11;
    if (*result >= 1)
    {
      v12 = 0;
      do
      {
        v13 = *(_DWORD *)(*((_QWORD *)result + 1) + 4 * v12 + 8);
        v14 = (2 * v13) ^ (v13 >> 31);
        if (v14 < 0x80)
        {
          LOBYTE(v15) = v14;
        }
        else
        {
          do
          {
            *v11++ = v14 | 0x80;
            v15 = v14 >> 7;
            v16 = v14 >> 14;
            v14 >>= 7;
          }
          while (v16);
        }
        *v11++ = v15;
        *a3 = v11;
        ++v12;
      }
      while (v12 < *result);
    }
  }
  return result;
}

uint64_t *sub_1D4BAF950(uint64_t *result, uint64_t a2, _BYTE **a3)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = *(_DWORD *)(a2 + 4);
  v4 = *a3;
  if (v3 < 0x80)
  {
    v5 = *(_DWORD *)(a2 + 4);
  }
  else
  {
    do
    {
      *v4++ = v3 | 0x80;
      v5 = v3 >> 7;
      v6 = v3 >> 14;
      v3 >>= 7;
    }
    while (v6);
  }
  *v4 = v5;
  v7 = v4 + 1;
  v8 = (2 * *result) ^ (*result >> 63);
  if (v8 < 0x80)
  {
    v9 = (2 * *result) ^ (*result >> 63);
  }
  else
  {
    do
    {
      *v7++ = v8 | 0x80;
      v9 = v8 >> 7;
      v10 = v8 >> 14;
      v8 >>= 7;
    }
    while (v10);
  }
  *v7 = v9;
  *a3 = v7 + 1;
  return result;
}

int *sub_1D4BAF9C4(int *result, uint64_t a2, _BYTE **a3)
{
  uint64_t v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (*result >= 1)
  {
    v3 = 0;
    v4 = *a3;
    do
    {
      v5 = *(_DWORD *)(a2 + 4);
      if (v5 < 0x80)
      {
        v6 = *(_DWORD *)(a2 + 4);
      }
      else
      {
        do
        {
          *v4++ = v5 | 0x80;
          v6 = v5 >> 7;
          v7 = v5 >> 14;
          v5 >>= 7;
        }
        while (v7);
      }
      *v4 = v6;
      v8 = v4 + 1;
      *a3 = v8;
      v9 = *(_QWORD *)(*((_QWORD *)result + 1) + 8 * v3 + 8);
      v10 = (2 * v9) ^ (v9 >> 63);
      if (v10 < 0x80)
      {
        LOBYTE(v11) = v10;
      }
      else
      {
        do
        {
          *v8++ = v10 | 0x80;
          v11 = v10 >> 7;
          v12 = v10 >> 14;
          v10 >>= 7;
        }
        while (v12);
      }
      *v8 = v11;
      v4 = v8 + 1;
      *a3 = v4;
      ++v3;
    }
    while (v3 < *result);
  }
  return result;
}

int *sub_1D4BAFA64(int *result, uint64_t a2, _BYTE **a3)
{
  unsigned int v3;
  _BYTE *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  if (*result)
  {
    v3 = *(_DWORD *)(a2 + 4);
    v4 = *a3;
    if (v3 < 0x80)
    {
      v5 = *(_DWORD *)(a2 + 4);
    }
    else
    {
      do
      {
        *v4++ = v3 | 0x80;
        v5 = v3 >> 7;
        v6 = v3 >> 14;
        v3 >>= 7;
      }
      while (v6);
    }
    *v4 = v5;
    v7 = v4 + 1;
    v8 = result[4];
    if (v8 < 0x80)
    {
      v9 = result[4];
    }
    else
    {
      do
      {
        *v7++ = v8 | 0x80;
        v9 = v8 >> 7;
        v10 = v8 >> 14;
        v8 >>= 7;
      }
      while (v10);
    }
    *v7 = v9;
    v11 = v7 + 1;
    *a3 = v11;
    if (*result >= 1)
    {
      v12 = 0;
      do
      {
        v13 = *(_QWORD *)(*((_QWORD *)result + 1) + 8 * v12 + 8);
        v14 = (2 * v13) ^ (v13 >> 63);
        if (v14 < 0x80)
        {
          LOBYTE(v15) = v14;
        }
        else
        {
          do
          {
            *v11++ = v14 | 0x80;
            v15 = v14 >> 7;
            v16 = v14 >> 14;
            v14 >>= 7;
          }
          while (v16);
        }
        *v11++ = v15;
        *a3 = v11;
        ++v12;
      }
      while (v12 < *result);
    }
  }
  return result;
}

void sub_1D4BAFB3C(_DWORD *a1)
{
  unsigned __int8 v2;
  pthread_t v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v2 = atomic_load((unsigned __int8 *)&qword_1EFEC6B20);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EFEC6B20))
  {
    __cxa_atexit((void (*)(void *))std::mutex::~mutex, &stru_1EFEC5AE8, &dword_1D4AFF000);
    __cxa_guard_release(&qword_1EFEC6B20);
  }
  v3 = pthread_self();
  v4 = (uint64_t)v3;
  if (qword_1EFEC6B68)
  {
    if (v3 && v3 == (pthread_t)qword_1EFEC6B68)
      goto LABEL_5;
LABEL_9:
    sub_1D4BAD6A0();
    std::mutex::lock(&stru_1EFEC5AE8);
    qword_1EFEC6B68 = v4;
    sub_1D4BAFC7C(a1);
    qword_1EFEC6B68 = 0;
    std::mutex::unlock(&stru_1EFEC5AE8);
    return;
  }
  if (v3)
    goto LABEL_9;
LABEL_5:
  if (*a1 != 1)
  {
    sub_1D4BB2880((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/generated_message_util.cc", 801);
    v5 = sub_1D4BB2898(v7, "CHECK failed: (scc->visit_status.load(std::memory_order_relaxed)) == (SCCInfoBase::kRunning): ");
    sub_1D4BB29C8((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1D4BB29D0((uint64_t)v7);
  }
}

void sub_1D4BAFC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D4BB29D0((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_1D4BAFC7C(_DWORD *result)
{
  uint64_t (**v1)(void);
  int v2;
  uint64_t i;

  if (*result == -1)
  {
    v1 = (uint64_t (**)(void))result;
    *result = 1;
    v2 = result[1];
    if (v2 >= 1)
    {
      for (i = 0; i < v2; ++i)
      {
        if (v1[i + 2])
        {
          sub_1D4BAFC7C();
          v2 = *((_DWORD *)v1 + 1);
        }
      }
    }
    result = (_DWORD *)v1[1]();
    atomic_store(0, (unsigned int *)v1);
  }
  return result;
}

uint64_t sub_1D4BAFCF0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;

  if (a2)
    result = sub_1D4BAD720(a1, *(_QWORD *)(a2 + 8) + 24, (*(_DWORD *)a2 - 1), *((unsigned __int8 *)a3 + 8), *a3);
  else
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, *((unsigned __int8 *)a3 + 8), *a3);
  *a3 = result;
  return result;
}

uint64_t sub_1D4BAFD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;
  _BYTE *v14;
  uint64_t result;

  if (a2)
  {
    v5 = *(unsigned int **)(a2 + 8);
    v6 = *(_DWORD *)(a1 + *v5);
    v7 = *(_BYTE **)a3;
    if (v6 < 0x80)
    {
      v8 = *(_DWORD *)(a1 + *v5);
    }
    else
    {
      do
      {
        *v7++ = v6 | 0x80;
        v8 = v6 >> 7;
        v9 = v6 >> 14;
        v6 >>= 7;
      }
      while (v9);
    }
    *v7 = v8;
    v14 = v7 + 1;
    *(_QWORD *)a3 = v14;
    result = sub_1D4BAD720(a1, v5 + 6, (*(_DWORD *)a2 - 1), *(unsigned __int8 *)(a3 + 8), v14);
  }
  else
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    v11 = *(_BYTE **)a3;
    if (v10 < 0x80)
    {
      LOBYTE(v12) = v10;
    }
    else
    {
      do
      {
        *v11++ = v10 | 0x80;
        v12 = v10 >> 7;
        v13 = v10 >> 14;
        v10 >>= 7;
      }
      while (v13);
    }
    *v11 = v12;
    *(_QWORD *)a3 = v11 + 1;
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 128))(a1, *(unsigned __int8 *)(a3 + 8));
  }
  *(_QWORD *)a3 = result;
  return result;
}

uint64_t sub_1D4BAFE24(uint64_t (****a1)(void))
{
  return (***a1)();
}

uint64_t sub_1D4BAFE34(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16))
    sub_1D4BAFE68(a1);
  return a1;
}

uint64_t sub_1D4BAFE68(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;

  if (*(_DWORD *)(result + 28) + *(_DWORD *)(result + 44) + *(_DWORD *)(result + 8) - *(_DWORD *)result >= 1)
  {
    v1 = result;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 16) + 24))(*(_QWORD *)(result + 16));
    v2 = *(_DWORD *)(v1 + 24) - *(_DWORD *)(v1 + 44) + *(_QWORD *)v1 - *(_DWORD *)(v1 + 8);
    *(_QWORD *)(v1 + 8) = *(_QWORD *)v1;
    *(_DWORD *)(v1 + 44) = 0;
    *(_QWORD *)(v1 + 24) = v2;
  }
  return result;
}

uint64_t sub_1D4BAFEE4(uint64_t a1, int a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  int v13;

  result = *(unsigned int *)(a1 + 40);
  if ((a2 & 0x80000000) == 0)
  {
    v4 = *(_DWORD *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(int *)(a1 + 44);
    v7 = v4 - v6 + *(_DWORD *)a1 - v5;
    if ((v7 ^ 0x7FFFFFFF) >= a2 && (int)result - v7 > a2)
    {
      v9 = v7 + a2;
      *(_DWORD *)(a1 + 40) = v9;
      v10 = v5 + v6;
      *(_QWORD *)(a1 + 8) = v10;
      v11 = *(_DWORD *)(a1 + 48);
      if (v11 >= v9)
        v11 = v9;
      v12 = __OFSUB__(v4, v11);
      v13 = v4 - v11;
      if ((v13 < 0) ^ v12 | (v13 == 0))
        v13 = 0;
      else
        *(_QWORD *)(a1 + 8) = v10 - v13;
      *(_DWORD *)(a1 + 44) = v13;
    }
  }
  return result;
}

uint64_t sub_1D4BAFF5C(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;

  *(_DWORD *)(result + 40) = a2;
  v2 = *(_DWORD *)(result + 48);
  v3 = *(_QWORD *)(result + 8) + *(int *)(result + 44);
  *(_QWORD *)(result + 8) = v3;
  if (v2 >= a2)
    v4 = a2;
  else
    v4 = v2;
  v5 = *(_DWORD *)(result + 24);
  v6 = __OFSUB__(v5, v4);
  v7 = v5 - v4;
  if ((v7 < 0) ^ v6 | (v7 == 0))
    v7 = 0;
  else
    *(_QWORD *)(result + 8) = v3 - v7;
  *(_DWORD *)(result + 44) = v7;
  *(_BYTE *)(result + 36) = 0;
  return result;
}

unint64_t sub_1D4BAFFA4(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = sub_1D4BAFEE4(a1, a2);
  v4 = (*(_DWORD *)(a1 + 52) - 1);
  *(_DWORD *)(a1 + 52) = v4;
  return v3 | (unint64_t)(v4 << 32);
}

BOOL sub_1D4BAFFD8(uint64_t a1, int a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;

  v2 = *(unsigned __int8 *)(a1 + 36);
  *(_DWORD *)(a1 + 40) = a2;
  v3 = *(_DWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 8) + *(int *)(a1 + 44);
  *(_QWORD *)(a1 + 8) = v4;
  if (v3 >= a2)
    v5 = a2;
  else
    v5 = v3;
  v6 = *(_DWORD *)(a1 + 24);
  v7 = __OFSUB__(v6, v5);
  v8 = v6 - v5;
  if ((v8 < 0) ^ v7 | (v8 == 0))
    v8 = 0;
  else
    *(_QWORD *)(a1 + 8) = v4 - v8;
  *(_DWORD *)(a1 + 44) = v8;
  *(_BYTE *)(a1 + 36) = 0;
  ++*(_DWORD *)(a1 + 52);
  return v2 != 0;
}

uint64_t sub_1D4BB003C(_DWORD *a1)
{
  int v1;

  v1 = a1[10];
  if (v1 == 0x7FFFFFFF)
    return 0xFFFFFFFFLL;
  else
    return (v1 - a1[6] + a1[11] + a1[2] - *a1);
}

uint64_t sub_1D4BB0078(_DWORD *a1)
{
  int v1;

  v1 = a1[12];
  if (v1 == 0x7FFFFFFF)
    return 0xFFFFFFFFLL;
  else
    return (v1 - a1[6] + a1[11] + a1[2] - *a1);
}

uint64_t sub_1D4BB00B4(uint64_t a1)
{
  std::string *v2;
  std::string *v3;
  std::string *v4;
  char v6;
  std::string v7[2];

  sub_1D4BB2880((uint64_t)v7, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/coded_stream.cc", 190);
  v2 = sub_1D4BB2898(v7, "A protocol message was rejected because it was too big (more than ");
  v3 = sub_1D4BB2B4C(v2, *(_DWORD *)(a1 + 48));
  v4 = sub_1D4BB2898(v3, " bytes).  To increase the limit (or to disable these warnings), see CodedInputStream::SetTotalBytesLimit() in google/protobuf/io/coded_stream.h.");
  sub_1D4BB29C8((uint64_t)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
  return sub_1D4BB29D0((uint64_t)v7);
}

void sub_1D4BB0128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D4BB29D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB0140(uint64_t a1, int a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  int v7;
  int v8;

  if (*(int *)(a1 + 44) < 1)
  {
    v5 = (a2 - a3);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v6 = *(_DWORD *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 40))
      v6 = *(_DWORD *)(a1 + 40);
    v7 = v6 - *(_DWORD *)(a1 + 24);
    if (v7 >= (int)v5)
    {
      if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v5) & 1) != 0)
      {
        *(_DWORD *)(a1 + 24) += v5;
        return 1;
      }
      else
      {
        v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
        result = 0;
        *(_DWORD *)(a1 + 24) = v8;
      }
    }
    else
    {
      if (v7 >= 1)
      {
        *(_DWORD *)(a1 + 24) = v6;
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
      }
      return 0;
    }
  }
  else
  {
    result = 0;
    *(_QWORD *)a1 += a3;
  }
  return result;
}

uint64_t sub_1D4BB0210(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  std::string *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  char v20;
  std::string v21[2];
  int v22;
  uint64_t v23;

  v2 = *(_DWORD *)(a1 + 44);
  if (v2 > 0 || *(int *)(a1 + 28) > 0 || *(_DWORD *)(a1 + 24) == *(_DWORD *)(a1 + 40))
  {
    v3 = *(_DWORD *)(a1 + 24) - v2;
    v4 = *(_DWORD *)(a1 + 48);
    if (v3 >= v4 && v4 != *(_DWORD *)(a1 + 40))
      sub_1D4BB00B4(a1);
    return 0;
  }
  else
  {
    v23 = 0;
    v22 = 0;
    v7 = *(_QWORD *)(a1 + 16);
    do
    {
      v5 = (*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)v7 + 16))(v7, &v23, &v22);
      if (!(_DWORD)v5)
      {
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        return v5;
      }
      v8 = v22;
    }
    while (!v22);
    v9 = v23 + v22;
    *(_QWORD *)a1 = v23;
    *(_QWORD *)(a1 + 8) = v9;
    if (v8 < 0)
    {
      sub_1D4BB2880((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/coded_stream.cc", 591);
      v10 = sub_1D4BB2898(v21, "CHECK failed: (buffer_size) >= (0): ");
      sub_1D4BB29C8((uint64_t)&v20, (const char **)&v10->__r_.__value_.__l.__data_);
      sub_1D4BB29D0((uint64_t)v21);
      v8 = v22;
    }
    v11 = *(_DWORD *)(a1 + 24);
    v12 = v11 - (v8 ^ 0x7FFFFFFF);
    if (v11 <= (v8 ^ 0x7FFFFFFF))
    {
      v14 = v8 + v11;
      v13 = *(_QWORD *)(a1 + 8);
    }
    else
    {
      *(_DWORD *)(a1 + 28) = v12;
      v13 = *(_QWORD *)(a1 + 8) - v12;
      *(_QWORD *)(a1 + 8) = v13;
      v14 = 0x7FFFFFFF;
    }
    *(_DWORD *)(a1 + 24) = v14;
    v15 = *(_DWORD *)(a1 + 40);
    v16 = v13 + *(int *)(a1 + 44);
    *(_QWORD *)(a1 + 8) = v16;
    v17 = *(_DWORD *)(a1 + 48);
    if (v17 >= v15)
      v17 = v15;
    v18 = __OFSUB__(v14, v17);
    v19 = v14 - v17;
    if ((v19 < 0) ^ v18 | (v19 == 0))
      v19 = 0;
    else
      *(_QWORD *)(a1 + 8) = v16 - v19;
    *(_DWORD *)(a1 + 44) = v19;
  }
  return v5;
}

void sub_1D4BB0394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D4BB29D0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1D4BB03AC(const void **a1, char *__dst, int a3)
{
  int v6;
  const void *v7;
  int64_t v8;
  BOOL v9;

  while (1)
  {
    v6 = a3;
    v7 = *a1;
    v8 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v9 = __OFSUB__(a3, (_DWORD)v8);
    a3 -= v8;
    if ((a3 < 0) ^ v9 | (a3 == 0))
      break;
    memcpy(__dst, v7, (int)v8);
    __dst += (int)v8;
    *a1 = (char *)*a1 + (int)v8;
    if ((sub_1D4BB0210((uint64_t)a1) & 1) == 0)
      return v6 <= (int)v8;
  }
  memcpy(__dst, v7, v6);
  *a1 = (char *)*a1 + v6;
  return v6 <= (int)v8;
}

BOOL sub_1D4BB0440(const void **a1, std::string *this, std::string::size_type __n)
{
  std::string *v3;
  size_t v6;

  if ((__n & 0x80000000) != 0)
    return 0;
  v3 = this;
  if (*((_DWORD *)a1 + 2) - *(_DWORD *)a1 < (int)__n)
    return sub_1D4BB04E0(a1, this, __n);
  v6 = __n;
  std::string::resize(this, __n, 0);
  if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
    v3 = (std::string *)v3->__r_.__value_.__r.__words[0];
  memcpy(v3, *a1, v6);
  *a1 = (char *)*a1 + v6;
  return 1;
}

BOOL sub_1D4BB04E0(_DWORD *a1, std::string *this, std::string::size_type __requested_capacity)
{
  int v3;
  int v6;
  int v7;
  BOOL v8;
  int v10;
  const std::string::value_type *v11;
  uint64_t v12;
  BOOL v13;

  v3 = __requested_capacity;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (this->__r_.__value_.__l.__size_)
    {
      *this->__r_.__value_.__l.__data_ = 0;
      this->__r_.__value_.__l.__size_ = 0;
    }
  }
  else if (*((_BYTE *)&this->__r_.__value_.__s + 23))
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  v6 = a1[12];
  if (v6 >= a1[10])
    v6 = a1[10];
  if (v6 != 0x7FFFFFFF)
  {
    v7 = v6 - a1[6] + a1[11] + a1[2] - *a1;
    v8 = v7 < (int)__requested_capacity || (int)__requested_capacity < 1;
    if (!v8 && v7 >= 1)
      std::string::reserve(this, __requested_capacity);
  }
  while (1)
  {
    v10 = v3;
    v11 = *(const std::string::value_type **)a1;
    v12 = *((_QWORD *)a1 + 1) - *(_QWORD *)a1;
    v13 = __OFSUB__(v3, (_DWORD)v12);
    v3 -= v12;
    if ((v3 < 0) ^ v13 | (v3 == 0))
      break;
    if ((_DWORD)v12)
    {
      std::string::append(this, v11, (int)v12);
      v11 = *(const std::string::value_type **)a1;
    }
    *(_QWORD *)a1 = &v11[(int)v12];
    if ((sub_1D4BB0210((uint64_t)a1) & 1) == 0)
      return v10 <= (int)v12;
  }
  std::string::append(this, v11, v10);
  *(_QWORD *)a1 += v10;
  return v10 <= (int)v12;
}

BOOL sub_1D4BB05FC(uint64_t a1, _DWORD *a2)
{
  char *v3;
  _BOOL8 result;
  char __dst[4];

  v3 = *(char **)a1;
  if (((*(_DWORD *)(a1 + 8) - *(_QWORD *)a1) & 0xFFFFFFFC) != 0)
  {
    *(_QWORD *)a1 = v3 + 4;
  }
  else
  {
    v3 = __dst;
    result = sub_1D4BB03AC((const void **)a1, __dst, 4);
    if (!result)
      return result;
  }
  *a2 = *(_DWORD *)v3;
  return 1;
}

BOOL sub_1D4BB0660(uint64_t a1, _QWORD *a2)
{
  char *v3;
  _BOOL8 result;
  char v5[8];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = *(char **)a1;
  if (((*(_DWORD *)(a1 + 8) - *(_QWORD *)a1) & 0xFFFFFFF8) != 0)
  {
    *(_QWORD *)a1 = v3 + 8;
  }
  else
  {
    v3 = v5;
    result = sub_1D4BB03AC((const void **)a1, v5, 8);
    if (!result)
      return result;
  }
  *a2 = *(_QWORD *)v3;
  return 1;
}

unint64_t sub_1D4BB06F0(uint64_t a1)
{
  unint64_t v1;
  char *v2;
  char *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v2 = *(char **)a1;
  v1 = *(_QWORD *)(a1 + 8);
  if ((int)(v1 - *(_QWORD *)a1) <= 9 && (v1 <= (unint64_t)v2 || *(char *)(v1 - 1) < 0))
  {
    v9 = 0;
    sub_1D4BB0CF4((char **)a1, &v9);
    return v9;
  }
  else
  {
    v3 = v2 + 1;
    v4 = *v2;
    if (*v2 < 0)
    {
      v4 = v4 + (v2[1] << 7) - 128;
      if (v2[1] < 0)
      {
        v4 = v4 + (v2[2] << 14) - 0x4000;
        if (v2[2] < 0)
        {
          v4 = v4 + (v2[3] << 21) - 0x200000;
          if (v2[3] < 0)
          {
            v4 -= 0x10000000;
            v5 = v2[4];
            if (v2[4] < 0)
            {
              v5 = v5 + (v2[5] << 7) - 128;
              if (v2[5] < 0)
              {
                v5 = v5 + (v2[6] << 14) - 0x4000;
                if (v2[6] < 0)
                {
                  v5 = v5 + (v2[7] << 21) - 0x200000;
                  if (v2[7] < 0)
                  {
                    v5 -= 0x10000000;
                    v6 = v2[8];
                    if (v2[8] < 0)
                    {
                      if (v2[9] < 0)
                        return 0;
                      v3 = v2 + 10;
                      v6 = v6 + (v2[9] << 7) - 128;
                    }
                    else
                    {
                      v3 = v2 + 9;
                    }
                  }
                  else
                  {
                    v6 = 0;
                    v3 = v2 + 8;
                  }
                }
                else
                {
                  v6 = 0;
                  v3 = v2 + 7;
                }
              }
              else
              {
                v6 = 0;
                v3 = v2 + 6;
              }
            }
            else
            {
              v6 = 0;
              v3 = v2 + 5;
            }
          }
          else
          {
            v5 = 0;
            v6 = 0;
            v3 = v2 + 4;
          }
        }
        else
        {
          v5 = 0;
          v6 = 0;
          v3 = v2 + 3;
        }
      }
      else
      {
        v5 = 0;
        v6 = 0;
        v3 = v2 + 2;
      }
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v7 = v4 | ((unint64_t)v5 << 28) | (v6 << 56);
    *(_QWORD *)a1 = v3;
  }
  return v7;
}

uint64_t sub_1D4BB08A4(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;

  v3 = *a1;
  v2 = a1[1];
  if ((int)(v2 - *a1) <= 9 && (v2 <= v3 || *(char *)(v2 - 1) < 0))
  {
    v6 = sub_1D4BB06F0((uint64_t)a1);
    if ((v7 & 1) == 0)
      return -1;
  }
  else
  {
    v4 = a2 + (*(unsigned __int8 *)(v3 + 1) << 7) - 128;
    if (*(char *)(v3 + 1) < 0)
    {
      v4 = v4 + (*(unsigned __int8 *)(v3 + 2) << 14) - 0x4000;
      if (*(char *)(v3 + 2) < 0)
      {
        v4 = v4 + (*(unsigned __int8 *)(v3 + 3) << 21) - 0x200000;
        if (*(char *)(v3 + 3) < 0)
        {
          v8 = *(char *)(v3 + 4);
          v4 = v4 + (v8 << 28) - 0x10000000;
          if (v8 < 0)
          {
            v9 = 0;
            while (*(char *)(v3 + v9 + 5) < 0)
            {
              ++v9;
              v6 = -1;
              if ((_DWORD)v9 == 5)
                return v6;
            }
            v5 = v3 + v9 + 6;
          }
          else
          {
            v5 = v3 + 5;
          }
        }
        else
        {
          v5 = v3 + 4;
        }
      }
      else
      {
        v5 = v3 + 3;
      }
    }
    else
    {
      v5 = v3 + 2;
    }
    *a1 = v5;
    return v4;
  }
  return v6;
}

uint64_t sub_1D4BB098C(unsigned __int8 **a1)
{
  unint64_t v1;
  char *v2;
  unsigned __int8 *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v10;

  v2 = (char *)*a1;
  v1 = (unint64_t)a1[1];
  if ((int)(v1 - *a1) > 9 || v1 > (unint64_t)v2 && (*(char *)(v1 - 1) & 0x80000000) == 0)
  {
    v3 = (unsigned __int8 *)(v2 + 1);
    v4 = *v2;
    if (*v2 < 0)
    {
      v4 = v4 + (v2[1] << 7) - 128;
      if (v2[1] < 0)
      {
        v4 = v4 + (v2[2] << 14) - 0x4000;
        if (v2[2] < 0)
        {
          v4 = v4 + (v2[3] << 21) - 0x200000;
          if (v2[3] < 0)
          {
            v4 -= 0x10000000;
            v5 = v2[4];
            if (v2[4] < 0)
            {
              v5 = v5 + (v2[5] << 7) - 128;
              if (v2[5] < 0)
              {
                v5 = v5 + (v2[6] << 14) - 0x4000;
                if (v2[6] < 0)
                {
                  v5 = v5 + (v2[7] << 21) - 0x200000;
                  if (v2[7] < 0)
                  {
                    v5 -= 0x10000000;
                    v6 = v2[8];
                    if (v2[8] < 0)
                    {
                      if (v2[9] < 0)
                        return 0xFFFFFFFFLL;
                      v3 = (unsigned __int8 *)(v2 + 10);
                      v6 = v6 + (v2[9] << 7) - 128;
                    }
                    else
                    {
                      v3 = (unsigned __int8 *)(v2 + 9);
                    }
                  }
                  else
                  {
                    v6 = 0;
                    v3 = (unsigned __int8 *)(v2 + 8);
                  }
                }
                else
                {
                  v6 = 0;
                  v3 = (unsigned __int8 *)(v2 + 7);
                }
              }
              else
              {
                v6 = 0;
                v3 = (unsigned __int8 *)(v2 + 6);
              }
            }
            else
            {
              v6 = 0;
              v3 = (unsigned __int8 *)(v2 + 5);
            }
          }
          else
          {
            v5 = 0;
            v6 = 0;
            v3 = (unsigned __int8 *)(v2 + 4);
          }
        }
        else
        {
          v5 = 0;
          v6 = 0;
          v3 = (unsigned __int8 *)(v2 + 3);
        }
      }
      else
      {
        v5 = 0;
        v6 = 0;
        v3 = (unsigned __int8 *)(v2 + 2);
      }
    }
    else
    {
      v5 = 0;
      v6 = 0;
    }
    v10 = v4 | ((unint64_t)v5 << 28);
    if (!((v10 | (v6 << 56)) >> 31))
    {
      *a1 = v3;
      return v10;
    }
    return 0xFFFFFFFFLL;
  }
  v7 = sub_1D4BB06F0((uint64_t)a1);
  if ((v7 & 0xFFFFFFFF80000000) != 0 || (v8 & 1) == 0)
    return 0xFFFFFFFFLL;
  else
    return v7;
}

unint64_t sub_1D4BB0B38(uint64_t a1)
{
  char *v2;
  unint64_t v3;
  unint64_t result;
  char v5;
  int v6;
  BOOL v7;

  v2 = *(char **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 != v3)
  {
LABEL_4:
    if ((unint64_t)v2 >= v3 || *v2 < 0)
    {
      result = sub_1D4BB06F0(a1);
      if ((v5 & 1) == 0)
        return 0;
    }
    else
    {
      result = *v2;
      *(_QWORD *)a1 = v2 + 1;
    }
    return result;
  }
  if (sub_1D4BB0210(a1))
  {
    v2 = *(char **)a1;
    v3 = *(_QWORD *)(a1 + 8);
    goto LABEL_4;
  }
  v6 = *(_DWORD *)(a1 + 48);
  result = 0;
  v7 = *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 44) < v6 || *(_DWORD *)(a1 + 40) == v6;
  *(_BYTE *)(a1 + 36) = v7;
  return result;
}

unint64_t sub_1D4BB0BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  int v9;
  int v10;
  uint64_t v11;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = v2 - *(_QWORD *)a1;
  if (v4 > 9)
  {
LABEL_4:
    if ((_DWORD)a2)
    {
      v5 = a2 + (*(unsigned __int8 *)(v3 + 1) << 7) - 128;
      if (*(char *)(v3 + 1) < 0)
      {
        v5 = v5 + (*(unsigned __int8 *)(v3 + 2) << 14) - 0x4000;
        if (*(char *)(v3 + 2) < 0)
        {
          v5 = v5 + (*(unsigned __int8 *)(v3 + 3) << 21) - 0x200000;
          if (*(char *)(v3 + 3) < 0)
          {
            v10 = *(char *)(v3 + 4);
            v5 = (v5 + (v10 << 28) - 0x10000000);
            if (v10 < 0)
            {
              v11 = 0;
              while (*(char *)(v3 + v11 + 5) < 0)
              {
                a2 = 0;
                if ((_DWORD)++v11 == 5)
                  return a2;
              }
              v6 = v3 + v11 + 6;
            }
            else
            {
              v6 = v3 + 5;
            }
          }
          else
          {
            v6 = v3 + 4;
          }
        }
        else
        {
          v6 = v3 + 3;
        }
      }
      else
      {
        v6 = v3 + 2;
      }
      *(_QWORD *)a1 = v6;
      return v5;
    }
    else
    {
      *(_QWORD *)a1 = v3 + 1;
    }
    return a2;
  }
  if (v4 >= 1)
  {
    if ((*(char *)(v2 - 1) & 0x80000000) == 0)
      goto LABEL_4;
    return sub_1D4BB0B38(a1);
  }
  if (v4)
    return sub_1D4BB0B38(a1);
  v8 = *(_DWORD *)(a1 + 44);
  v9 = *(_DWORD *)(a1 + 24);
  if (v8 <= 0 && v9 != *(_DWORD *)(a1 + 40))
    return sub_1D4BB0B38(a1);
  if (v9 - v8 >= *(_DWORD *)(a1 + 48))
    return sub_1D4BB0B38(a1);
  a2 = 0;
  *(_BYTE *)(a1 + 36) = 1;
  return a2;
}

BOOL sub_1D4BB0CF4(char **a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  char *v7;
  char v8;

  v4 = 0;
  v5 = 0;
  while (1)
  {
    v6 = v4 != 10;
    if (v4 == 10)
      break;
    while (1)
    {
      v7 = *a1;
      if (*a1 != a1[1])
        break;
      if ((sub_1D4BB0210((uint64_t)a1) & 1) == 0)
      {
        v5 = 0;
        v6 = 0;
        goto LABEL_7;
      }
    }
    v8 = *v7;
    v5 |= (unint64_t)(*v7 & 0x7F) << (7 * v4);
    *a1 = v7 + 1;
    ++v4;
    if ((v8 & 0x80) == 0)
      goto LABEL_7;
  }
  v5 = 0;
LABEL_7:
  *a2 = v5;
  return v6;
}

uint64_t sub_1D4BB0D94(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a2;
  *(_WORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 26) = byte_1EFEC6AD0 & 1;
  sub_1D4BB0E24((_QWORD *)a1);
  *(_BYTE *)(a1 + 24) = 0;
  return a1;
}

uint64_t sub_1D4BB0DD8(uint64_t a1, uint64_t a2, int a3)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a2;
  *(_WORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 26) = byte_1EFEC6AD0 & 1;
  if (a3)
  {
    sub_1D4BB0E24((_QWORD *)a1);
    *(_BYTE *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1D4BB0E24(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v4 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t *, _QWORD *))(*(_QWORD *)*a1 + 16))(*a1, &v4, a1 + 2);
  if ((_DWORD)result)
  {
    v3 = v4;
    *((_DWORD *)a1 + 5) += *((_DWORD *)a1 + 4);
  }
  else
  {
    v3 = 0;
    *((_DWORD *)a1 + 4) = 0;
    *((_BYTE *)a1 + 24) = 1;
  }
  a1[1] = v3;
  return result;
}

uint64_t sub_1D4BB0E90(uint64_t a1)
{
  int v2;

  if (*(int *)(a1 + 16) >= 1)
  {
    (*(void (**)(void))(**(_QWORD **)a1 + 24))();
    v2 = *(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 20) = v2;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

uint64_t sub_1D4BB0EE4(uint64_t a1, char *__src, int a3)
{
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t result;

  while (1)
  {
    v6 = *(int *)(a1 + 16);
    v7 = *(void **)(a1 + 8);
    if ((int)v6 >= a3)
      break;
    memcpy(v7, __src, v6);
    v8 = *(int *)(a1 + 16);
    a3 -= v8;
    __src += v8;
    result = sub_1D4BB0E24((_QWORD *)a1);
    if ((result & 1) == 0)
      return result;
  }
  result = (uint64_t)memcpy(v7, __src, a3);
  *(_QWORD *)(a1 + 8) += a3;
  *(_DWORD *)(a1 + 16) -= a3;
  return result;
}

uint64_t sub_1D4BB0F68(_QWORD *a1, char *__src, uint64_t a3)
{
  int v6;
  uint64_t result;
  int v8;

  v6 = *((_DWORD *)a1 + 4);
  if (v6 > (int)a3)
    return sub_1D4BB0EE4((uint64_t)a1, __src, a3);
  if (v6 <= 0)
  {
    v8 = *((_DWORD *)a1 + 5);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)*a1 + 24))();
    v8 = *((_DWORD *)a1 + 5) - *((_DWORD *)a1 + 4);
    *((_DWORD *)a1 + 4) = 0;
    a1[1] = 0;
  }
  *((_DWORD *)a1 + 5) = v8 + a3;
  result = (*(uint64_t (**)(_QWORD, char *, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, __src, a3);
  *((_BYTE *)a1 + 24) |= result ^ 1;
  return result;
}

uint64_t sub_1D4BB101C(uint64_t result, int a2)
{
  int __src;

  if (*(_DWORD *)(result + 16) < 4u)
  {
    __src = a2;
    return sub_1D4BB0EE4(result, (char *)&__src, 4);
  }
  else
  {
    **(_DWORD **)(result + 8) = a2;
    *(_QWORD *)(result + 8) += 4;
    *(_DWORD *)(result + 16) -= 4;
  }
  return result;
}

uint64_t sub_1D4BB1074(uint64_t result, uint64_t a2)
{
  _QWORD v2[2];

  v2[1] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 16) < 8u)
  {
    v2[0] = a2;
    return sub_1D4BB0EE4(result, (char *)v2, 8);
  }
  else
  {
    **(_QWORD **)(result + 8) = a2;
    *(_QWORD *)(result + 8) += 8;
    *(_DWORD *)(result + 16) -= 8;
  }
  return result;
}

uint64_t sub_1D4BB10F8(uint64_t a1, unsigned int a2)
{
  char *v2;
  unsigned int v3;
  unsigned int v4;
  char __src[5];
  uint64_t vars0;

  v2 = __src;
  if (a2 >= 0x80)
  {
    v3 = a2;
    do
    {
      *v2++ = v3 | 0x80;
      a2 = v3 >> 7;
      v4 = v3 >> 14;
      v3 >>= 7;
    }
    while (v4);
  }
  *v2 = a2;
  return sub_1D4BB0EE4(a1, __src, v2 - (&vars0 - 5) + 1);
}

uint64_t sub_1D4BB1150(uint64_t a1, unint64_t a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  char __src[10];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = __src;
  if (a2 >= 0x80)
  {
    v3 = a2;
    do
    {
      *v2++ = v3 | 0x80;
      a2 = v3 >> 7;
      v4 = v3 >> 14;
      v3 >>= 7;
    }
    while (v4);
  }
  *v2 = a2;
  return sub_1D4BB0EE4(a1, __src, v2 - __src + 1);
}

char *sub_1D4BB11D4(const void **a1, _BYTE *a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  char *v6;
  int v7;
  const void *v8;
  const void *v9;

  if (*((char *)a1 + 23) >= 0)
    v3 = *((unsigned __int8 *)a1 + 23);
  else
    v3 = *((_DWORD *)a1 + 2);
  if (v3 < 0x80)
  {
    LOBYTE(v4) = v3;
  }
  else
  {
    do
    {
      *a2++ = v3 | 0x80;
      v4 = v3 >> 7;
      v5 = v3 >> 14;
      v3 >>= 7;
    }
    while (v5);
  }
  *a2 = v4;
  v6 = a2 + 1;
  v7 = *((char *)a1 + 23);
  if (v7 >= 0)
    v8 = a1;
  else
    v8 = *a1;
  if (v7 >= 0)
    LODWORD(v9) = *((unsigned __int8 *)a1 + 23);
  else
    v9 = a1[1];
  memcpy(v6, v8, (int)v9);
  return &v6[(int)v9];
}

uint64_t sub_1D4BB1258()
{
  std::string *v0;
  char v2;
  std::string v3[2];

  sub_1D4BB2880((uint64_t)v3, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/zero_copy_stream.cc", 47);
  v0 = sub_1D4BB2898(v3, "This ZeroCopyOutputStream doesn't support aliasing. Reaching here usually means a ZeroCopyOutputStream implementation bug.");
  sub_1D4BB29C8((uint64_t)&v2, (const char **)&v0->__r_.__value_.__l.__data_);
  sub_1D4BB29D0((uint64_t)v3);
  return 0;
}

void sub_1D4BB12B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D4BB29D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB12D0(uint64_t result, uint64_t a2, int a3, int a4)
{
  int v4;

  *(_QWORD *)result = &off_1E984ADE8;
  *(_QWORD *)(result + 8) = a2;
  if (a4 <= 0)
    v4 = a3;
  else
    v4 = a4;
  *(_DWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 20) = v4;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

BOOL sub_1D4BB12F0(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = *(int *)(a1 + 24);
  v4 = *(_DWORD *)(a1 + 16);
  if ((int)v3 >= v4)
  {
    *(_DWORD *)(a1 + 28) = 0;
  }
  else
  {
    v5 = v4 - v3;
    if (v4 - (int)v3 >= *(_DWORD *)(a1 + 20))
      v5 = *(_DWORD *)(a1 + 20);
    *(_DWORD *)(a1 + 28) = v5;
    *a2 = *(_QWORD *)(a1 + 8) + v3;
    *a3 = v5;
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a1 + 28);
  }
  return (int)v3 < v4;
}

uint64_t sub_1D4BB1344(uint64_t result, int a2)
{
  uint64_t v3;
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  v4 = *(_DWORD *)(result + 28);
  if (v4 <= 0)
  {
    sub_1D4BB2880((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 132);
    v5 = sub_1D4BB2898(v10, "CHECK failed: (last_returned_size_) > (0): ");
    v6 = sub_1D4BB2898(v5, "BackUp() can only be called after a successful Next().");
    sub_1D4BB29C8((uint64_t)&v9, (const char **)&v6->__r_.__value_.__l.__data_);
    result = sub_1D4BB29D0((uint64_t)v10);
    v4 = *(_DWORD *)(v3 + 28);
  }
  if (v4 < a2)
  {
    sub_1D4BB2880((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 134);
    v7 = sub_1D4BB2898(v10, "CHECK failed: (count) <= (last_returned_size_): ");
    sub_1D4BB29C8((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
    result = sub_1D4BB29D0((uint64_t)v10);
  }
  if (a2 < 0)
  {
    sub_1D4BB2880((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 135);
    v8 = sub_1D4BB2898(v10, "CHECK failed: (count) >= (0): ");
    sub_1D4BB29C8((uint64_t)&v9, (const char **)&v8->__r_.__value_.__l.__data_);
    result = sub_1D4BB29D0((uint64_t)v10);
  }
  *(_QWORD *)(v3 + 24) = (*(_DWORD *)(v3 + 24) - a2);
  return result;
}

void sub_1D4BB1454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D4BB29D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB147C(uint64_t a1)
{
  return *(int *)(a1 + 24);
}

_QWORD *sub_1D4BB1484(_QWORD *result, uint64_t a2)
{
  *result = &off_1E984AE30;
  result[1] = a2;
  return result;
}

uint64_t sub_1D4BB1494(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  std::string::size_type v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  std::string *v13;
  int v15;
  uint64_t **v16;
  uint64_t v17;
  char v18;
  std::string v19[2];

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    sub_1D4BB2880((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 151);
    v7 = sub_1D4BB2898(v19, "CHECK failed: target_ != NULL: ");
    sub_1D4BB29C8((uint64_t)&v18, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_1D4BB29D0((uint64_t)v19);
    v6 = *(_QWORD *)(a1 + 8);
  }
  if (*(char *)(v6 + 23) < 0)
  {
    v10 = *(_QWORD *)(v6 + 8);
    v8 = (int)v10;
    v9 = (*(_QWORD *)(v6 + 16) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((int)v10 < v9)
      goto LABEL_13;
    v11 = *(_QWORD *)(v6 + 8);
    if ((int)v10 >= 0x40000000)
    {
      sub_1D4BB2880((uint64_t)v19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 164);
      v12 = sub_1D4BB2898(v19, "Cannot allocate buffer larger than kint32max for ");
      v13 = sub_1D4BB2898(v12, "StringOutputStream.");
      sub_1D4BB29C8((uint64_t)&v18, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_1D4BB29D0((uint64_t)v19);
      return 0;
    }
LABEL_10:
    v15 = 2 * v11;
    if (v15 <= 16)
      v9 = 16;
    else
      v9 = v15;
    goto LABEL_13;
  }
  v8 = *(unsigned __int8 *)(v6 + 23);
  if (*(unsigned __int8 *)(v6 + 23) >= 0x16u)
  {
    LODWORD(v11) = *(unsigned __int8 *)(v6 + 23);
    LODWORD(v10) = v11;
    goto LABEL_10;
  }
  v9 = 22;
  LODWORD(v10) = *(unsigned __int8 *)(v6 + 23);
LABEL_13:
  std::string::resize((std::string *)v6, v9, 0);
  v16 = *(uint64_t ***)(a1 + 8);
  if (*((char *)v16 + 23) < 0)
    v16 = (uint64_t **)*v16;
  *a2 = (char *)v16 + v8;
  v17 = *(_QWORD *)(a1 + 8);
  if (*(char *)(v17 + 23) < 0)
    v17 = *(_QWORD *)(v17 + 8);
  else
    LODWORD(v17) = *(unsigned __int8 *)(v17 + 23);
  *a3 = v17 - v10;
  return 1;
}

void sub_1D4BB160C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D4BB29D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D4BB162C(uint64_t a1, int a2)
{
  std::string *v4;
  uint64_t v5;
  std::string *v6;
  uint64_t v7;
  unint64_t v8;
  std::string *v9;
  char v10;
  std::string v11[2];

  if (a2 < 0)
  {
    sub_1D4BB2880((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 182);
    v4 = sub_1D4BB2898(v11, "CHECK failed: (count) >= (0): ");
    sub_1D4BB29C8((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1D4BB29D0((uint64_t)v11);
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
  {
    sub_1D4BB2880((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 183);
    v6 = sub_1D4BB2898(v11, "CHECK failed: target_ != NULL: ");
    sub_1D4BB29C8((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_1D4BB29D0((uint64_t)v11);
    v5 = *(_QWORD *)(a1 + 8);
  }
  LODWORD(v7) = *(char *)(v5 + 23);
  if ((v7 & 0x80000000) != 0)
    v8 = *(_QWORD *)(v5 + 8);
  else
    v8 = *(unsigned __int8 *)(v5 + 23);
  if (v8 < a2)
  {
    sub_1D4BB2880((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 184);
    v9 = sub_1D4BB2898(v11, "CHECK failed: (count) <= (target_->size()): ");
    sub_1D4BB29C8((uint64_t)&v10, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_1D4BB29D0((uint64_t)v11);
    v5 = *(_QWORD *)(a1 + 8);
    LOBYTE(v7) = *(_BYTE *)(v5 + 23);
  }
  if ((v7 & 0x80) != 0)
    v7 = *(_QWORD *)(v5 + 8);
  else
    v7 = v7;
  std::string::resize((std::string *)v5, v7 - a2, 0);
}

void sub_1D4BB175C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D4BB29D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB1784(uint64_t a1)
{
  uint64_t v1;
  std::string *v3;
  char v5;
  std::string v6[2];

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
  {
    sub_1D4BB2880((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/io/zero_copy_stream_impl_lite.cc", 189);
    v3 = sub_1D4BB2898(v6, "CHECK failed: target_ != NULL: ");
    sub_1D4BB29C8((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_1D4BB29D0((uint64_t)v6);
    v1 = *(_QWORD *)(a1 + 8);
  }
  if (*(char *)(v1 + 23) < 0)
    return *(_QWORD *)(v1 + 8);
  else
    return *(unsigned __int8 *)(v1 + 23);
}

void sub_1D4BB1804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D4BB29D0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4BB181C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "(cannot determine missing fields for lite message)");
}

uint64_t sub_1D4BB182C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  std::string *v5;
  char v6;
  std::string __p;
  std::string v8[2];

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
  if ((_DWORD)result)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) & 1) != 0)
    {
      return 1;
    }
    else
    {
      sub_1D4BB2880((uint64_t)v8, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/message_lite.cc", 121);
      sub_1D4BB1C84(a1, &__p);
      v5 = sub_1D4BB28C0(v8, (const std::string::value_type *)&__p);
      sub_1D4BB29C8((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      sub_1D4BB29D0((uint64_t)v8);
      return 0;
    }
  }
  return result;
}

void sub_1D4BB18EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D4BB29D0((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB191C(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  _QWORD v6[6];
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v6[0] = 0;
  v6[1] = 0;
  v6[2] = a2;
  memset(&v6[3], 0, 14);
  v6[5] = 0x7FFFFFFFLL;
  v7 = 0x7FFFFFFF;
  v8 = dword_1EFEC5EA0;
  v9 = dword_1EFEC5EA0;
  v10 = 0;
  v11 = 0;
  sub_1D4BB0210((uint64_t)v6);
  v3 = sub_1D4BB182C(a1, (uint64_t)v6);
  if (BYTE4(v6[4]))
    v4 = v3;
  else
    v4 = 0;
  sub_1D4BAFEE0(v6);
  return v4;
}

void sub_1D4BB19A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D4BAFEE0(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1D4BB19B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  _BOOL8 v5;
  std::string *v6;
  _QWORD v8[3];
  int v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  std::string __p;
  std::string v20[2];

  LODWORD(v3) = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  if ((v3 & 0x80u) != 0)
    v3 = a2[1];
  v8[0] = v4;
  v8[1] = (char *)v4 + (int)v3;
  v8[2] = 0;
  v9 = v3;
  v10 = 0;
  v11 = 0;
  v12 = v3;
  v13 = 0x7FFFFFFF00000000;
  v14 = dword_1EFEC5EA0;
  v15 = dword_1EFEC5EA0;
  v16 = 0;
  v17 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  if (!(*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, v8))
    goto LABEL_12;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) & 1) == 0)
  {
    sub_1D4BB2880((uint64_t)v20, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/message_lite.cc", 121);
    sub_1D4BB1C84(a1, &__p);
    v6 = sub_1D4BB28C0(v20, (const std::string::value_type *)&__p);
    sub_1D4BB29C8((uint64_t)&v18, (const char **)&v6->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_1D4BB29D0((uint64_t)v20);
LABEL_12:
    v5 = 0;
    goto LABEL_13;
  }
  v5 = (_BYTE)v11 != 0;
LABEL_13:
  sub_1D4BAFEE0(v8);
  return v5;
}

void sub_1D4BB1AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a25 < 0)
    operator delete(__p);
  sub_1D4BB29D0(v25 - 64);
  sub_1D4BAFEE0(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1D4BB1B18(uint64_t a1, uint64_t a2, int a3)
{
  _BOOL8 v4;
  std::string *v5;
  _QWORD v7[3];
  int v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  std::string __p;
  std::string v19[2];

  v7[0] = a2;
  v7[1] = a2 + a3;
  v7[2] = 0;
  v8 = a3;
  v9 = 0;
  v10 = 0;
  v11 = a3;
  v12 = 0x7FFFFFFF00000000;
  v13 = dword_1EFEC5EA0;
  v14 = dword_1EFEC5EA0;
  v15 = 0;
  v16 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  if (!(*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, v7))
  {
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) & 1) == 0)
  {
    sub_1D4BB2880((uint64_t)v19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/message_lite.cc", 121);
    sub_1D4BB1C84(a1, &__p);
    v5 = sub_1D4BB28C0(v19, (const std::string::value_type *)&__p);
    sub_1D4BB29C8((uint64_t)&v17, (const char **)&v5->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_1D4BB29D0((uint64_t)v19);
    goto LABEL_7;
  }
  v4 = (_BYTE)v10 != 0;
LABEL_8:
  sub_1D4BAFEE0(v7);
  return v4;
}

void sub_1D4BB1C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a25 < 0)
    operator delete(__p);
  sub_1D4BB29D0(v25 - 64);
  sub_1D4BAFEE0(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB1C64(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, byte_1EFEC6AD0 & 1, a2);
}

void sub_1D4BB1C84(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  const std::string::value_type *p_p;
  std::string::size_type v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  void *__p;
  std::string::size_type v9;
  unsigned __int8 v10;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a2, "Can't ");
  std::string::append(a2, "parse");
  std::string::append(a2, " message of type \"");
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&__p, a1);
  if ((v10 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v10 & 0x80u) == 0)
    v5 = v10;
  else
    v5 = v9;
  std::string::append(a2, p_p, v5);
  if ((char)v10 < 0)
    operator delete(__p);
  std::string::append(a2, "\" because it is missing required fields: ");
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(&__p, a1);
  if ((v10 & 0x80u) == 0)
    v6 = (const std::string::value_type *)&__p;
  else
    v6 = (const std::string::value_type *)__p;
  if ((v10 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = v9;
  std::string::append(a2, v6, v7);
  if ((char)v10 < 0)
    operator delete(__p);
}

void sub_1D4BB1D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4BB1DCC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v14;
  uint64_t v15;
  char v16;
  std::string v17[2];

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v5 = v4;
  if (v4 >> 31)
  {
    sub_1D4BB2880((uint64_t)v17, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/message_lite.cc", 239);
    v6 = sub_1D4BB2898(v17, "Exceeded maximum protobuf size of 2GB: ");
    v7 = sub_1D4BB2C44(v6, v5);
    sub_1D4BB29C8((uint64_t)&v16, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_1D4BB29D0((uint64_t)v17);
    return 0;
  }
  v8 = *(_DWORD *)(a2 + 16);
  v9 = v8 - v4;
  if (v8 >= (int)v4)
  {
    v10 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v10 + v4;
    *(_DWORD *)(a2 + 16) = v9;
    if (v10)
    {
      v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 128))(a1, *(unsigned __int8 *)(a2 + 26), v10)- v10;
      if (v11 == v5)
        return 1;
      goto LABEL_12;
    }
    v8 = v9;
  }
  v12 = *(_DWORD *)(a2 + 20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2);
  if (*(_BYTE *)(a2 + 24))
    return 0;
  v14 = v8 + *(_DWORD *)(a2 + 20) - (v12 + *(_DWORD *)(a2 + 16));
  if (v5 != v14)
  {
    v11 = v14;
LABEL_12:
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    sub_1D4BB1F34(v5, v15, v11, a1);
  }
  return 1;
}

void sub_1D4BB1F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D4BB29D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB1F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  char v16;
  void *__p[2];
  char v18;
  std::string v19[2];

  if (a1 != a2)
  {
    sub_1D4BB2880((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/message_lite.cc", 68);
    v7 = sub_1D4BB2898(v19, "CHECK failed: (byte_size_before_serialization) == (byte_size_after_serialization): ");
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a4 + 16))(__p, a4);
    v8 = sub_1D4BB28C0(v7, (const std::string::value_type *)__p);
    v9 = sub_1D4BB2898(v8, " was modified concurrently during serialization.");
    sub_1D4BB29C8((uint64_t)&v16, (const char **)&v9->__r_.__value_.__l.__data_);
    if (v18 < 0)
      operator delete(__p[0]);
    sub_1D4BB29D0((uint64_t)v19);
  }
  if (a3 != a1)
  {
    sub_1D4BB2880((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/message_lite.cc", 71);
    v10 = sub_1D4BB2898(v19, "CHECK failed: (bytes_produced_by_serialization) == (byte_size_before_serialization): ");
    v11 = sub_1D4BB2898(v10, "Byte size calculation and serialization were inconsistent.  This may indicate a bug in protocol buffers or it may be caused by concurrent modification of ");
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a4 + 16))(__p, a4);
    v12 = sub_1D4BB28C0(v11, (const std::string::value_type *)__p);
    v13 = sub_1D4BB2898(v12, ".");
    sub_1D4BB29C8((uint64_t)&v16, (const char **)&v13->__r_.__value_.__l.__data_);
    if (v18 < 0)
      operator delete(__p[0]);
    sub_1D4BB29D0((uint64_t)v19);
  }
  sub_1D4BB2880((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/message_lite.cc", 75);
  v14 = sub_1D4BB2898(v19, "This shouldn't be called if all the sizes are equal.");
  sub_1D4BB29C8((uint64_t)__p, (const char **)&v14->__r_.__value_.__l.__data_);
  return sub_1D4BB29D0((uint64_t)v19);
}

void sub_1D4BB20B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1D4BB29D0((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB2104(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _BYTE v5[32];

  sub_1D4BB0D94((uint64_t)v5, a2);
  v3 = sub_1D4BB1DCC(a1, (uint64_t)v5);
  sub_1D4BB0EE0((uint64_t)v5);
  return v3;
}

void sub_1D4BB214C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D4BB0EE0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1D4BB2160(uint64_t a1, std::string *a2)
{
  std::string *v2;
  std::string::size_type size;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  char v13;
  std::string v14[2];

  v2 = a2;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    size = a2->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v6 = v5;
  v7 = v5 >> 31;
  if (v5 >> 31)
  {
    sub_1D4BB2880((uint64_t)v14, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/message_lite.cc", 289);
    v10 = sub_1D4BB2898(v14, "Exceeded maximum protobuf size of 2GB: ");
    v11 = sub_1D4BB2C44(v10, v6);
    sub_1D4BB29C8((uint64_t)&v13, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_1D4BB29D0((uint64_t)v14);
  }
  else
  {
    std::string::resize(v2, v5 + size, 0);
    if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
      v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    v8 = (*(uint64_t (**)(uint64_t, std::string::size_type))(*(_QWORD *)a1 + 112))(a1, (std::string::size_type)v2 + size)- ((_QWORD)v2+ size);
    if (v8 != v6)
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
      sub_1D4BB1F34(v6, v9, v8, a1);
    }
  }
  return v7 == 0;
}

void sub_1D4BB227C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D4BB29D0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1D4BB2294(uint64_t a1, std::string *a2)
{
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    *a2->__r_.__value_.__l.__data_ = 0;
    a2->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = 0;
  }
  return sub_1D4BB2160(a1, a2);
}

_BYTE *sub_1D4BB22B8(uint64_t a1, unsigned __int8 a2, _BYTE *a3)
{
  uint64_t v6;
  int v8;
  std::string *v9;
  char v10;
  std::string v11[2];
  _BYTE v12[32];
  _BYTE v13[32];

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  if (v6)
    return sub_1D4BAD720(a1, *(_QWORD *)(v6 + 8) + 24, *(_DWORD *)v6 - 1, a2, a3);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  sub_1D4BB12D0((uint64_t)v13, (uint64_t)a3, v8, -1);
  sub_1D4BB0D94((uint64_t)v12, (uint64_t)v13);
  v12[26] = a2;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v12);
  if (v12[24])
  {
    sub_1D4BB2880((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/message_lite.cc", 373);
    v9 = sub_1D4BB2898(v11, "CHECK failed: !coded_out.HadError(): ");
    sub_1D4BB29C8((uint64_t)&v10, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_1D4BB29D0((uint64_t)v11);
  }
  sub_1D4BB0EE0((uint64_t)v12);
  return &a3[v8];
}

void sub_1D4BB23CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_1D4BB29D0((uint64_t)va);
  sub_1D4BB0EE0((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB23F8(uint64_t a1, int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int *v5;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  v4 = v2 + a2;
  v5 = *(unsigned int **)(a1 + 16);
  if (v3 < v2 + a2)
  {
    v7 = *(_QWORD *)a1;
    v8 = 2 * v3;
    if (2 * v3 <= v4)
      v8 = v4;
    if (v8 <= 4)
      v9 = 4;
    else
      v9 = v8;
    v10 = 8 * v9;
    if (v7)
    {
      v11 = (v10 + 15) & 0x7FFFFFFF8;
      if (*(_QWORD *)(v7 + 112))
        sub_1D4BAD2D0(*(_QWORD *)a1, MEMORY[0x1E0DE4EC8], v11);
      v12 = (unsigned int *)sub_1D4BACEA0(v7, v11);
    }
    else
    {
      v12 = (unsigned int *)operator new(v10 + 8);
    }
    *(_QWORD *)(a1 + 16) = v12;
    *(_DWORD *)(a1 + 12) = v9;
    if (v5 && (v13 = *v5, (int)v13 >= 1))
    {
      memcpy(v12 + 2, v5 + 2, 8 * v13);
      v12 = *(unsigned int **)(a1 + 16);
      *v12 = *v5;
      if (!v7)
        goto LABEL_17;
    }
    else
    {
      *v12 = 0;
      if (!v7)
      {
LABEL_17:
        operator delete(v5);
        v12 = *(unsigned int **)(a1 + 16);
      }
    }
    v2 = *(_DWORD *)(a1 + 8);
    v5 = v12;
  }
  return (uint64_t)&v5[2 * v2 + 2];
}

uint64_t sub_1D4BB24FC(uint64_t result, int a2)
{
  int v2;
  BOOL v3;
  int v4;

  v2 = *(_DWORD *)(result + 8);
  v3 = __OFSUB__(a2, v2);
  v4 = a2 - v2;
  if (!((v4 < 0) ^ v3 | (v4 == 0)))
    return sub_1D4BB23F8(result, v4);
  return result;
}

void sub_1D4BB2510(int a1, int a2, const std::string::value_type *a3)
{
  const std::string::value_type *v6;
  std::string::size_type v7;
  const std::string::value_type *p_p;
  std::string::size_type v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  void *__p;
  std::string::size_type v15;
  unsigned __int8 v16;
  void *v17;
  std::string::size_type v18;
  unsigned __int8 v19;
  const char *v20;
  const char *v21;
  int v22;
  std::string v23;
  char __str[127];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a2 > 3006001)
  {
    LODWORD(v20) = 3;
    v21 = "/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/s"
          "rc/google/protobuf/stubs/common.cc";
    v22 = 68;
    memset(&v23, 0, sizeof(v23));
    std::string::append(&v23, "This program requires version ");
    sub_1D4BB2900(a2, &v17);
    if ((v19 & 0x80u) == 0)
      v6 = (const std::string::value_type *)&v17;
    else
      v6 = (const std::string::value_type *)v17;
    if ((v19 & 0x80u) == 0)
      v7 = v19;
    else
      v7 = v18;
    std::string::append(&v23, v6, v7);
    std::string::append(&v23, " of the Protocol Buffer runtime library, but the installed version is ");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 6, 1);
    v25 = 0;
    sub_1D4BCA448(&__p, __str);
    if ((v16 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v16 & 0x80u) == 0)
      v9 = v16;
    else
      v9 = v15;
    std::string::append(&v23, p_p, v9);
    std::string::append(&v23, ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v23, a3);
    std::string::append(&v23, "\".)");
    sub_1D4BB2CC0(&v20);
    if ((char)v16 < 0)
      operator delete(__p);
    if ((char)v19 < 0)
      operator delete(v17);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (a1 < 3006001)
  {
    LODWORD(v20) = 3;
    v21 = "/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/s"
          "rc/google/protobuf/stubs/common.cc";
    v22 = 79;
    memset(&v23, 0, sizeof(v23));
    std::string::append(&v23, "This program was compiled against version ");
    sub_1D4BB2900(a1, &v17);
    if ((v19 & 0x80u) == 0)
      v10 = (const std::string::value_type *)&v17;
    else
      v10 = (const std::string::value_type *)v17;
    if ((v19 & 0x80u) == 0)
      v11 = v19;
    else
      v11 = v18;
    std::string::append(&v23, v10, v11);
    std::string::append(&v23, " of the Protocol Buffer runtime library, which is not compatible with the installed version (");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 6, 1);
    v25 = 0;
    sub_1D4BCA448(&__p, __str);
    if ((v16 & 0x80u) == 0)
      v12 = (const std::string::value_type *)&__p;
    else
      v12 = (const std::string::value_type *)__p;
    if ((v16 & 0x80u) == 0)
      v13 = v16;
    else
      v13 = v15;
    std::string::append(&v23, v12, v13);
    std::string::append(&v23, ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v23, a3);
    std::string::append(&v23, "\".)");
    sub_1D4BB2CC0(&v20);
    if ((char)v16 < 0)
      operator delete(__p);
    if ((char)v19 < 0)
      operator delete(v17);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_1D4BB2810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4BB2880(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

std::string *sub_1D4BB2898(std::string *a1, const std::string::value_type *a2)
{
  std::string::append(a1 + 1, a2);
  return a1;
}

std::string *sub_1D4BB28C0(std::string *a1, const std::string::value_type *a2)
{
  std::string *v3;
  std::string::size_type v4;
  std::string::size_type v5;

  v3 = a1 + 1;
  v4 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    v5 = v4;
  }
  std::string::append(v3, a2, v5);
  return a1;
}

_QWORD *sub_1D4BB2900@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x80uLL, "%d.%d.%d", a1 / 1000000, a1 / 1000 % 1000, a1 % 1000);
  __str[127] = 0;
  return sub_1D4BCA448(a2, __str);
}

void sub_1D4BB29C8(uint64_t a1, const char **a2)
{
  sub_1D4BB2CC0(a2);
}

uint64_t sub_1D4BB29D0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_1D4BB2A00(uint64_t result, const char *a2, int a3, uint64_t a4)
{
  FILE **v4;
  const char *v5;

  if ((result & 0x80000000) == 0)
  {
    v4 = (FILE **)MEMORY[0x1E0C80C10];
    if (*(char *)(a4 + 23) >= 0)
      v5 = (const char *)a4;
    else
      v5 = *(const char **)a4;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "[libprotobuf %s %s:%d] %s\n", off_1E984B368[result], a2, a3, v5);
    return fflush(*v4);
  }
  return result;
}

void sub_1D4BB2A6C()
{
  void *v0;

  if (qword_1EFEC6B70)
  {
    std::mutex::~mutex((std::mutex *)qword_1EFEC6B70);
    operator delete(v0);
  }
  qword_1EFEC6B70 = 0;
}

void sub_1D4BB2A9C()
{
  char *v0;

  v0 = (char *)operator new(0x40uLL);
  *(_QWORD *)v0 = 850045863;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *((_QWORD *)v0 + 7) = 0;
  qword_1EFEC6B70 = (uint64_t)v0;
  sub_1D4BB2D9C((uint64_t)sub_1D4BB2EBC, (uint64_t)sub_1D4BB2A6C);
}

void sub_1D4BB2AEC()
{
  unint64_t v0;
  void (*v1)();
  void (***v2)();
  void (**v3)();

  v1 = sub_1D4BB2A9C;
  v0 = atomic_load(&qword_1EFEC6AD8);
  if (v0 != -1)
  {
    v3 = &v1;
    v2 = &v3;
    std::__call_once(&qword_1EFEC6AD8, &v2, (void (__cdecl *)(void *))sub_1D4BAFE24);
  }
}

std::string *sub_1D4BB2B4C(std::string *a1, int a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x80uLL, "%d", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *sub_1D4BB2BC8(std::string *a1, int a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x80uLL, "%u", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *sub_1D4BB2C44(std::string *a1, uint64_t a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x80uLL, "%lu", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

void sub_1D4BB2CC0(const char **a1)
{
  uint64_t v2;
  std::mutex *v3;
  int v4;
  void *exception;

  if (*(_DWORD *)a1 == 3)
  {
    v2 = 3;
  }
  else
  {
    sub_1D4BB2AEC();
    v3 = (std::mutex *)qword_1EFEC6B70;
    std::mutex::lock((std::mutex *)qword_1EFEC6B70);
    v4 = dword_1EFEC6B78;
    std::mutex::unlock(v3);
    if (v4 > 0)
      goto LABEL_6;
    v2 = *(unsigned int *)a1;
  }
  off_1EFEC5AD0(v2, a1[1], *((_DWORD *)a1 + 4), (uint64_t)(a1 + 3));
LABEL_6:
  if (*(_DWORD *)a1 == 3)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    sub_1D4BB2D94(exception, a1[1], *((unsigned int *)a1 + 4), a1 + 3);
    __cxa_throw(exception, (struct type_info *)&unk_1E9846F80, (void (*)(void *))sub_1D4BB2D98);
  }
}

void sub_1D4BB2D80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D4BB2D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v4 = sub_1D4BB2EC0();
  std::mutex::lock((std::mutex *)(v4 + 24));
  v5 = *(_QWORD **)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  if ((unint64_t)v5 >= v6)
  {
    v8 = ((uint64_t)v5 - *(_QWORD *)v4) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      sub_1D4B182AC();
    v10 = v6 - *(_QWORD *)v4;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_1D4B35A14(v4 + 16, v11);
    else
      v12 = 0;
    v13 = &v12[16 * v8];
    v14 = &v12[16 * v11];
    *(_QWORD *)v13 = a1;
    *((_QWORD *)v13 + 1) = a2;
    v7 = v13 + 16;
    v16 = *(char **)v4;
    v15 = *(char **)(v4 + 8);
    if (v15 != *(char **)v4)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v15 - 1);
        v13 -= 16;
        v15 -= 16;
      }
      while (v15 != v16);
      v15 = *(char **)v4;
    }
    *(_QWORD *)v4 = v13;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = a1;
    v5[1] = a2;
    v7 = v5 + 2;
  }
  *(_QWORD *)(v4 + 8) = v7;
  std::mutex::unlock((std::mutex *)(v4 + 24));
}

void sub_1D4BB2EA8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB2EC0()
{
  unsigned __int8 v0;
  _QWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFEC5AE0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFEC5AE0))
  {
    v2 = operator new(0x58uLL);
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
    v2[3] = 850045863;
    *((_OWORD *)v2 + 2) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    v2[10] = 0;
    qword_1EFEC5B28 = (uint64_t)v2;
    __cxa_guard_release(&qword_1EFEC5AE0);
  }
  return qword_1EFEC5B28;
}

void sub_1D4BB2F40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EFEC5AE0);
  _Unwind_Resume(a1);
}

void sub_1D4BB2F58(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1E984ADC0;
  if (SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
  std::exception::~exception(this);
}

void sub_1D4BB2F94(std::exception *a1)
{
  void *v1;

  sub_1D4BB2F58(a1);
  operator delete(v1);
}

uint64_t sub_1D4BB2FA8(uint64_t a1)
{
  uint64_t result;

  result = a1 + 24;
  if (*(char *)(a1 + 47) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t sub_1D4BB2FC4(uint64_t a1, uint64_t a2, int a3, __int128 *a4)
{
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = &off_1E984ADC0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  v5 = a1 + 24;
  if (*((char *)a4 + 23) < 0)
  {
    sub_1D4B1655C((_BYTE *)v5, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v6 = *a4;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a4 + 2);
    *(_OWORD *)v5 = v6;
  }
  return a1;
}

void sub_1D4BB301C(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB3030(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

BOOL sub_1D4BB3060(uint64_t a1, unsigned int a2, uint64_t a3)
{
  _BOOL8 v3;
  unsigned int v4;
  char *v7;
  unint64_t v8;
  std::string::size_type *v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  std::string::size_type *v21;
  uint64_t v22;
  _BYTE *v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  _BYTE *v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  _BYTE *v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v46;
  _BYTE *v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v52;
  _BYTE *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  std::string *p_p;
  int v59;
  std::string __p;

  if (a2 < 8)
    return 0;
  v4 = a2;
  v3 = 0;
  switch(a2 & 7)
  {
    case 0u:
      v7 = *(char **)a1;
      if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8) || *v7 < 0)
      {
        v26 = sub_1D4BB06F0(a1);
        if ((v27 & 1) == 0)
          return 0;
        v8 = v26;
      }
      else
      {
        v8 = *v7;
        *(_QWORD *)a1 = v7 + 1;
      }
      if (*(int *)(a3 + 16) < 5)
      {
        sub_1D4BB10F8(a3, v4);
        v32 = *(_DWORD *)(a3 + 16);
      }
      else
      {
        v28 = *(_QWORD *)(a3 + 8);
        if (v4 < 0x80)
        {
          LOBYTE(v30) = v4;
          v29 = *(_BYTE **)(a3 + 8);
        }
        else
        {
          v29 = *(_BYTE **)(a3 + 8);
          do
          {
            *v29++ = v4 | 0x80;
            v30 = v4 >> 7;
            v31 = v4 >> 14;
            v4 >>= 7;
          }
          while (v31);
        }
        *v29 = v30;
        v39 = (_DWORD)v29 - v28 + 1;
        *(_QWORD *)(a3 + 8) += v39;
        v32 = *(_DWORD *)(a3 + 16) - v39;
        *(_DWORD *)(a3 + 16) = v32;
      }
      if (v32 < 10)
      {
        sub_1D4BB1150(a3, v8);
      }
      else
      {
        v40 = *(_QWORD *)(a3 + 8);
        if (v8 < 0x80)
        {
          LOBYTE(v42) = v8;
          v41 = *(_BYTE **)(a3 + 8);
        }
        else
        {
          v41 = *(_BYTE **)(a3 + 8);
          do
          {
            *v41++ = v8 | 0x80;
            v42 = v8 >> 7;
            v43 = v8 >> 14;
            v8 >>= 7;
          }
          while (v43);
        }
        *v41 = v42;
        v44 = (_DWORD)v41 - v40 + 1;
        *(_QWORD *)(a3 + 8) += v44;
        *(_DWORD *)(a3 + 16) -= v44;
      }
      goto LABEL_63;
    case 1u:
      __p.__r_.__value_.__r.__words[0] = 0;
      v9 = *(std::string::size_type **)a1;
      if ((int)(*(_DWORD *)(a1 + 8) - *(_QWORD *)a1) < 8)
      {
        if (!sub_1D4BB0660(a1, &__p))
          return 0;
      }
      else
      {
        __p.__r_.__value_.__r.__words[0] = *v9;
        *(_QWORD *)a1 = v9 + 1;
      }
      if (*(int *)(a3 + 16) < 5)
      {
        sub_1D4BB10F8(a3, v4);
      }
      else
      {
        v10 = *(_QWORD *)(a3 + 8);
        if (v4 < 0x80)
        {
          LOBYTE(v12) = v4;
          v11 = *(_BYTE **)(a3 + 8);
        }
        else
        {
          v11 = *(_BYTE **)(a3 + 8);
          do
          {
            *v11++ = v4 | 0x80;
            v12 = v4 >> 7;
            v13 = v4 >> 14;
            v4 >>= 7;
          }
          while (v13);
        }
        *v11 = v12;
        v37 = (_DWORD)v11 - v10 + 1;
        *(_QWORD *)(a3 + 8) += v37;
        *(_DWORD *)(a3 + 16) -= v37;
      }
      sub_1D4BB1074(a3, (uint64_t)__p.__r_.__value_.__l.__data_);
      goto LABEL_63;
    case 2u:
      v14 = *(char **)a1;
      if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8))
      {
        LODWORD(v15) = 0;
      }
      else
      {
        v15 = *v14;
        if ((*v14 & 0x80000000) == 0)
        {
          *(_QWORD *)a1 = v14 + 1;
          goto LABEL_69;
        }
      }
      v15 = sub_1D4BB08A4((uint64_t *)a1, v15);
      if (v15 < 0)
        return 0;
LABEL_69:
      if (*(int *)(a3 + 16) < 5)
      {
        sub_1D4BB10F8(a3, v4);
        v50 = *(_DWORD *)(a3 + 16);
      }
      else
      {
        v46 = *(_QWORD *)(a3 + 8);
        if (v4 < 0x80)
        {
          LOBYTE(v48) = v4;
          v47 = *(_BYTE **)(a3 + 8);
        }
        else
        {
          v47 = *(_BYTE **)(a3 + 8);
          do
          {
            *v47++ = v4 | 0x80;
            v48 = v4 >> 7;
            v49 = v4 >> 14;
            v4 >>= 7;
          }
          while (v49);
        }
        *v47 = v48;
        v51 = (_DWORD)v47 - v46 + 1;
        *(_QWORD *)(a3 + 8) += v51;
        v50 = *(_DWORD *)(a3 + 16) - v51;
        *(_DWORD *)(a3 + 16) = v50;
      }
      if (v50 < 5)
      {
        sub_1D4BB10F8(a3, v15);
      }
      else
      {
        v52 = *(_QWORD *)(a3 + 8);
        if (v15 < 0x80)
        {
          LOBYTE(v55) = v15;
          v53 = *(_BYTE **)(a3 + 8);
        }
        else
        {
          v53 = *(_BYTE **)(a3 + 8);
          v54 = v15;
          do
          {
            *v53++ = v54 | 0x80;
            v55 = v54 >> 7;
            v56 = v54 >> 14;
            v54 >>= 7;
          }
          while (v56);
        }
        *v53 = v55;
        v57 = (_DWORD)v53 - v52 + 1;
        *(_QWORD *)(a3 + 8) += v57;
        *(_DWORD *)(a3 + 16) -= v57;
      }
      memset(&__p, 0, sizeof(__p));
      v3 = sub_1D4BB0440((const void **)a1, &__p, v15);
      if (v3)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v59 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v59 = __p.__r_.__value_.__r.__words[1];
        sub_1D4BB0EE4(a3, (char *)p_p, v59);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return v3;
    case 3u:
      if (*(int *)(a3 + 16) < 5)
      {
        sub_1D4BB10F8(a3, a2);
      }
      else
      {
        v16 = *(_QWORD *)(a3 + 8);
        if (a2 < 0x80)
        {
          LOBYTE(v19) = a2;
          v17 = *(_BYTE **)(a3 + 8);
        }
        else
        {
          v17 = *(_BYTE **)(a3 + 8);
          v18 = a2;
          do
          {
            *v17++ = v18 | 0x80;
            v19 = v18 >> 7;
            v20 = v18 >> 14;
            v18 >>= 7;
          }
          while (v20);
        }
        *v17 = v19;
        v33 = (_DWORD)v17 - v16 + 1;
        *(_QWORD *)(a3 + 8) += v33;
        *(_DWORD *)(a3 + 16) -= v33;
      }
      v34 = *(_DWORD *)(a1 + 52);
      v35 = __OFSUB__(v34--, 1);
      *(_DWORD *)(a1 + 52) = v34;
      if (v34 < 0 != v35 || !sub_1D4BB35CC(a1, a3))
        return 0;
      v36 = *(_DWORD *)(a1 + 52);
      if (v36 < *(_DWORD *)(a1 + 56))
        *(_DWORD *)(a1 + 52) = v36 + 1;
      return *(_DWORD *)(a1 + 32) == (v4 & 0xFFFFFFF8 | 4);
    case 5u:
      LODWORD(__p.__r_.__value_.__l.__data_) = 0;
      v21 = *(std::string::size_type **)a1;
      if ((int)(*(_DWORD *)(a1 + 8) - *(_QWORD *)a1) < 4)
      {
        if (!sub_1D4BB05FC(a1, &__p))
          return 0;
      }
      else
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = *(_DWORD *)v21;
        *(_QWORD *)a1 = (char *)v21 + 4;
      }
      if (*(int *)(a3 + 16) < 5)
      {
        sub_1D4BB10F8(a3, v4);
      }
      else
      {
        v22 = *(_QWORD *)(a3 + 8);
        if (v4 < 0x80)
        {
          LOBYTE(v24) = v4;
          v23 = *(_BYTE **)(a3 + 8);
        }
        else
        {
          v23 = *(_BYTE **)(a3 + 8);
          do
          {
            *v23++ = v4 | 0x80;
            v24 = v4 >> 7;
            v25 = v4 >> 14;
            v4 >>= 7;
          }
          while (v25);
        }
        *v23 = v24;
        v38 = (_DWORD)v23 - v22 + 1;
        *(_QWORD *)(a3 + 8) += v38;
        *(_DWORD *)(a3 + 16) -= v38;
      }
      sub_1D4BB101C(a3, (int)__p.__r_.__value_.__l.__data_);
LABEL_63:
      v3 = 1;
      break;
    default:
      return v3;
  }
  return v3;
}

void sub_1D4BB35B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4BB35CC(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;

  while (1)
  {
    v4 = *(char **)a1;
    if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8))
    {
      v5 = 0;
    }
    else
    {
      v5 = *v4;
      if ((*v4 & 0x80000000) == 0)
      {
        *(_QWORD *)a1 = v4 + 1;
        goto LABEL_6;
      }
    }
    LODWORD(v5) = sub_1D4BB0BD8(a1, v5);
LABEL_6:
    *(_DWORD *)(a1 + 32) = v5;
    v6 = (_DWORD)v5 == 0;
    if (!(_DWORD)v5)
      return v6;
    if ((v5 & 7) == 4)
      break;
    if ((sub_1D4BB3060(a1) & 1) == 0)
      return v6;
  }
  if (*(int *)(a2 + 16) < 5)
  {
    sub_1D4BB10F8(a2, v5);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v9) = v5;
      v8 = *(_BYTE **)(a2 + 8);
    }
    else
    {
      v8 = *(_BYTE **)(a2 + 8);
      do
      {
        *v8++ = v5 | 0x80;
        v9 = v5 >> 7;
        v10 = v5 >> 14;
        LODWORD(v5) = v5 >> 7;
      }
      while (v10);
    }
    *v8 = v9;
    v11 = (_DWORD)v8 - v7 + 1;
    *(_QWORD *)(a2 + 8) += v11;
    *(_DWORD *)(a2 + 16) -= v11;
  }
  return 1;
}

uint64_t sub_1D4BB36D0(uint64_t result, signed int a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;

  v5 = 8 * result;
  if (*(int *)(a3 + 16) < 5)
  {
    result = sub_1D4BB10F8(a3, v5);
    v10 = *(_DWORD *)(a3 + 16);
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = 8 * result;
      v7 = *(_BYTE **)(a3 + 8);
    }
    else
    {
      v7 = *(_BYTE **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        v8 = v5 >> 7;
        v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *v7 = v8;
    v11 = (_DWORD)v7 - v6 + 1;
    *(_QWORD *)(a3 + 8) += v11;
    v10 = *(_DWORD *)(a3 + 16) - v11;
    *(_DWORD *)(a3 + 16) = v10;
  }
  v12 = a2;
  if (v10 < 10)
    return sub_1D4BB1150(a3, a2);
  v13 = *(_QWORD *)(a3 + 8);
  if (a2 < 0x80)
  {
    LOBYTE(v15) = a2;
    v14 = *(_BYTE **)(a3 + 8);
  }
  else
  {
    v14 = *(_BYTE **)(a3 + 8);
    do
    {
      *v14++ = v12 | 0x80;
      v15 = v12 >> 7;
      v16 = v12 >> 14;
      v12 >>= 7;
    }
    while (v16);
  }
  *v14 = v15;
  v17 = (_DWORD)v14 - v13 + 1;
  *(_QWORD *)(a3 + 8) += v17;
  *(_DWORD *)(a3 + 16) -= v17;
  return result;
}

uint64_t sub_1D4BB37DC(uint64_t result, unsigned int a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v5 = 8 * result;
  if (*(int *)(a3 + 16) < 5)
  {
    result = sub_1D4BB10F8(a3, v5);
    v10 = *(_DWORD *)(a3 + 16);
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = 8 * result;
      v7 = *(_BYTE **)(a3 + 8);
    }
    else
    {
      v7 = *(_BYTE **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        v8 = v5 >> 7;
        v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *v7 = v8;
    v11 = (_DWORD)v7 - v6 + 1;
    *(_QWORD *)(a3 + 8) += v11;
    v10 = *(_DWORD *)(a3 + 16) - v11;
    *(_DWORD *)(a3 + 16) = v10;
  }
  if (v10 < 5)
    return sub_1D4BB10F8(a3, a2);
  v12 = *(_QWORD *)(a3 + 8);
  if (a2 < 0x80)
  {
    LOBYTE(v14) = a2;
    v13 = *(_BYTE **)(a3 + 8);
  }
  else
  {
    v13 = *(_BYTE **)(a3 + 8);
    do
    {
      *v13++ = a2 | 0x80;
      v14 = a2 >> 7;
      v15 = a2 >> 14;
      a2 >>= 7;
    }
    while (v15);
  }
  *v13 = v14;
  v16 = (_DWORD)v13 - v12 + 1;
  *(_QWORD *)(a3 + 8) += v16;
  *(_DWORD *)(a3 + 16) -= v16;
  return result;
}

uint64_t sub_1D4BB38E8(uint64_t result, unint64_t a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  int v16;

  v5 = 8 * result;
  if (*(int *)(a3 + 16) < 5)
  {
    result = sub_1D4BB10F8(a3, v5);
    v10 = *(_DWORD *)(a3 + 16);
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = 8 * result;
      v7 = *(_BYTE **)(a3 + 8);
    }
    else
    {
      v7 = *(_BYTE **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        v8 = v5 >> 7;
        v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *v7 = v8;
    v11 = (_DWORD)v7 - v6 + 1;
    *(_QWORD *)(a3 + 8) += v11;
    v10 = *(_DWORD *)(a3 + 16) - v11;
    *(_DWORD *)(a3 + 16) = v10;
  }
  if (v10 < 10)
    return sub_1D4BB1150(a3, a2);
  v12 = *(_QWORD *)(a3 + 8);
  if (a2 < 0x80)
  {
    LOBYTE(v14) = a2;
    v13 = *(_BYTE **)(a3 + 8);
  }
  else
  {
    v13 = *(_BYTE **)(a3 + 8);
    do
    {
      *v13++ = a2 | 0x80;
      v14 = a2 >> 7;
      v15 = a2 >> 14;
      a2 >>= 7;
    }
    while (v15);
  }
  *v13 = v14;
  v16 = (_DWORD)v13 - v12 + 1;
  *(_QWORD *)(a3 + 8) += v16;
  *(_DWORD *)(a3 + 16) -= v16;
  return result;
}

uint64_t sub_1D4BB39F4(uint64_t result, int a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  unsigned int v16;
  int v17;

  v5 = 8 * result;
  if (*(int *)(a3 + 16) < 5)
  {
    result = sub_1D4BB10F8(a3, v5);
    v10 = *(_DWORD *)(a3 + 16);
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = 8 * result;
      v7 = *(_BYTE **)(a3 + 8);
    }
    else
    {
      v7 = *(_BYTE **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        v8 = v5 >> 7;
        v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *v7 = v8;
    v11 = (_DWORD)v7 - v6 + 1;
    *(_QWORD *)(a3 + 8) += v11;
    v10 = *(_DWORD *)(a3 + 16) - v11;
    *(_DWORD *)(a3 + 16) = v10;
  }
  v12 = (2 * a2) ^ (a2 >> 31);
  if (v10 < 5)
    return sub_1D4BB10F8(a3, v12);
  v13 = *(_QWORD *)(a3 + 8);
  if (v12 < 0x80)
  {
    v15 = (2 * a2) ^ (a2 >> 31);
    v14 = *(_BYTE **)(a3 + 8);
  }
  else
  {
    v14 = *(_BYTE **)(a3 + 8);
    do
    {
      *v14++ = v12 | 0x80;
      v15 = v12 >> 7;
      v16 = v12 >> 14;
      v12 >>= 7;
    }
    while (v16);
  }
  *v14 = v15;
  v17 = (_DWORD)v14 - v13 + 1;
  *(_QWORD *)(a3 + 8) += v17;
  *(_DWORD *)(a3 + 16) -= v17;
  return result;
}

uint64_t sub_1D4BB3B04(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;

  v5 = 8 * result;
  if (*(int *)(a3 + 16) < 5)
  {
    result = sub_1D4BB10F8(a3, v5);
    v10 = *(_DWORD *)(a3 + 16);
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = 8 * result;
      v7 = *(_BYTE **)(a3 + 8);
    }
    else
    {
      v7 = *(_BYTE **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        v8 = v5 >> 7;
        v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *v7 = v8;
    v11 = (_DWORD)v7 - v6 + 1;
    *(_QWORD *)(a3 + 8) += v11;
    v10 = *(_DWORD *)(a3 + 16) - v11;
    *(_DWORD *)(a3 + 16) = v10;
  }
  v12 = (2 * a2) ^ (a2 >> 63);
  if (v10 < 10)
    return sub_1D4BB1150(a3, v12);
  v13 = *(_QWORD *)(a3 + 8);
  if (v12 < 0x80)
  {
    v15 = (2 * a2) ^ (a2 >> 63);
    v14 = *(_BYTE **)(a3 + 8);
  }
  else
  {
    v14 = *(_BYTE **)(a3 + 8);
    do
    {
      *v14++ = v12 | 0x80;
      v15 = v12 >> 7;
      v16 = v12 >> 14;
      v12 >>= 7;
    }
    while (v16);
  }
  *v14 = v15;
  v17 = (_DWORD)v14 - v13 + 1;
  *(_QWORD *)(a3 + 8) += v17;
  *(_DWORD *)(a3 + 16) -= v17;
  return result;
}

uint64_t sub_1D4BB3C14(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = (8 * a1) | 1;
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1D4BB10F8(a3, v5);
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = (8 * a1) | 1;
      v7 = *(_BYTE **)(a3 + 8);
    }
    else
    {
      v7 = *(_BYTE **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        v8 = v5 >> 7;
        v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *v7 = v8;
    v10 = (_DWORD)v7 - v6 + 1;
    *(_QWORD *)(a3 + 8) += v10;
    *(_DWORD *)(a3 + 16) -= v10;
  }
  return sub_1D4BB1074(a3, a2);
}

uint64_t sub_1D4BB3CB4(int a1, uint64_t a2, double a3)
{
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = (8 * a1) | 1;
  if (*(int *)(a2 + 16) < 5)
  {
    sub_1D4BB10F8(a2, v5);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = (8 * a1) | 1;
      v7 = *(_BYTE **)(a2 + 8);
    }
    else
    {
      v7 = *(_BYTE **)(a2 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        v8 = v5 >> 7;
        v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *v7 = v8;
    v10 = (_DWORD)v7 - v6 + 1;
    *(_QWORD *)(a2 + 8) += v10;
    *(_DWORD *)(a2 + 16) -= v10;
  }
  return sub_1D4BB1074(a2, *(uint64_t *)&a3);
}

uint64_t sub_1D4BB3D5C(uint64_t result, unsigned int a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;

  v5 = 8 * result;
  if (*(int *)(a3 + 16) < 5)
  {
    result = sub_1D4BB10F8(a3, v5);
    v10 = *(_DWORD *)(a3 + 16);
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = 8 * result;
      v7 = *(_BYTE **)(a3 + 8);
    }
    else
    {
      v7 = *(_BYTE **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        v8 = v5 >> 7;
        v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *v7 = v8;
    v11 = (_DWORD)v7 - v6 + 1;
    *(_QWORD *)(a3 + 8) += v11;
    v10 = *(_DWORD *)(a3 + 16) - v11;
    *(_DWORD *)(a3 + 16) = v10;
  }
  if (v10 < 5)
    return sub_1D4BB10F8(a3, a2);
  *(_BYTE *)(*(_QWORD *)(a3 + 8))++ = a2;
  --*(_DWORD *)(a3 + 16);
  return result;
}

uint64_t sub_1D4BB3E30(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  std::string *v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  char *v20;
  int v21;
  char v23;
  std::string v24[2];

  v5 = (8 * a1) | 2;
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1D4BB10F8(a3, v5);
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = (8 * a1) | 2;
      v7 = *(_BYTE **)(a3 + 8);
    }
    else
    {
      v7 = *(_BYTE **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        v8 = v5 >> 7;
        v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *v7 = v8;
    v10 = (_DWORD)v7 - v6 + 1;
    *(_QWORD *)(a3 + 8) += v10;
    *(_DWORD *)(a3 + 16) -= v10;
  }
  v11 = *(char *)(a2 + 23);
  if (v11 < 0 && *(_QWORD *)(a2 + 8) >> 31)
  {
    sub_1D4BB2880((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/wire_format_lite.cc", 507);
    v12 = sub_1D4BB2898(v24, "CHECK failed: (value.size()) <= (kint32max): ");
    sub_1D4BB29C8((uint64_t)&v23, (const char **)&v12->__r_.__value_.__l.__data_);
    sub_1D4BB29D0((uint64_t)v24);
    LOBYTE(v11) = *(_BYTE *)(a2 + 23);
  }
  if ((v11 & 0x80u) == 0)
    v13 = v11;
  else
    v13 = *(_DWORD *)(a2 + 8);
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1D4BB10F8(a3, v13);
  }
  else
  {
    v14 = *(_QWORD *)(a3 + 8);
    if (v13 < 0x80)
    {
      LOBYTE(v16) = v13;
      v15 = *(_BYTE **)(a3 + 8);
    }
    else
    {
      v15 = *(_BYTE **)(a3 + 8);
      do
      {
        *v15++ = v13 | 0x80;
        v16 = v13 >> 7;
        v17 = v13 >> 14;
        v13 >>= 7;
      }
      while (v17);
    }
    *v15 = v16;
    v18 = (_DWORD)v15 - v14 + 1;
    *(_QWORD *)(a3 + 8) += v18;
    *(_DWORD *)(a3 + 16) -= v18;
  }
  v19 = *(char *)(a2 + 23);
  if (v19 >= 0)
    v20 = (char *)a2;
  else
    v20 = *(char **)a2;
  if (v19 >= 0)
    v21 = *(unsigned __int8 *)(a2 + 23);
  else
    v21 = *(_DWORD *)(a2 + 8);
  return sub_1D4BB0EE4(a3, v20, v21);
}

void sub_1D4BB3FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D4BB29D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB3FE4(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  std::string *v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  char *v20;
  uint64_t v21;
  char v23;
  std::string v24[2];

  v5 = (8 * a1) | 2;
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1D4BB10F8(a3, v5);
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = (8 * a1) | 2;
      v7 = *(_BYTE **)(a3 + 8);
    }
    else
    {
      v7 = *(_BYTE **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        v8 = v5 >> 7;
        v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *v7 = v8;
    v10 = (_DWORD)v7 - v6 + 1;
    *(_QWORD *)(a3 + 8) += v10;
    *(_DWORD *)(a3 + 16) -= v10;
  }
  v11 = *(char *)(a2 + 23);
  if (v11 < 0 && *(_QWORD *)(a2 + 8) >> 31)
  {
    sub_1D4BB2880((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/wire_format_lite.cc", 516);
    v12 = sub_1D4BB2898(v24, "CHECK failed: (value.size()) <= (kint32max): ");
    sub_1D4BB29C8((uint64_t)&v23, (const char **)&v12->__r_.__value_.__l.__data_);
    sub_1D4BB29D0((uint64_t)v24);
    LOBYTE(v11) = *(_BYTE *)(a2 + 23);
  }
  if ((v11 & 0x80u) == 0)
    v13 = v11;
  else
    v13 = *(_DWORD *)(a2 + 8);
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1D4BB10F8(a3, v13);
  }
  else
  {
    v14 = *(_QWORD *)(a3 + 8);
    if (v13 < 0x80)
    {
      LOBYTE(v16) = v13;
      v15 = *(_BYTE **)(a3 + 8);
    }
    else
    {
      v15 = *(_BYTE **)(a3 + 8);
      do
      {
        *v15++ = v13 | 0x80;
        v16 = v13 >> 7;
        v17 = v13 >> 14;
        v13 >>= 7;
      }
      while (v17);
    }
    *v15 = v16;
    v18 = (_DWORD)v15 - v14 + 1;
    *(_QWORD *)(a3 + 8) += v18;
    *(_DWORD *)(a3 + 16) -= v18;
  }
  v19 = *(char *)(a2 + 23);
  if (v19 >= 0)
    v20 = (char *)a2;
  else
    v20 = *(char **)a2;
  if (v19 >= 0)
    v21 = *(unsigned __int8 *)(a2 + 23);
  else
    v21 = *(unsigned int *)(a2 + 8);
  if (*(_BYTE *)(a3 + 25))
    return sub_1D4BB0F68((_QWORD *)a3, v20, v21);
  else
    return sub_1D4BB0EE4(a3, v20, v21);
}

void sub_1D4BB4194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D4BB29D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB41AC(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  std::string *v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  char *v20;
  int v21;
  char v23;
  std::string v24[2];

  v5 = (8 * a1) | 2;
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1D4BB10F8(a3, v5);
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = (8 * a1) | 2;
      v7 = *(_BYTE **)(a3 + 8);
    }
    else
    {
      v7 = *(_BYTE **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        v8 = v5 >> 7;
        v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *v7 = v8;
    v10 = (_DWORD)v7 - v6 + 1;
    *(_QWORD *)(a3 + 8) += v10;
    *(_DWORD *)(a3 + 16) -= v10;
  }
  v11 = *(char *)(a2 + 23);
  if (v11 < 0 && *(_QWORD *)(a2 + 8) >> 31)
  {
    sub_1D4BB2880((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/wire_format_lite.cc", 523);
    v12 = sub_1D4BB2898(v24, "CHECK failed: (value.size()) <= (kint32max): ");
    sub_1D4BB29C8((uint64_t)&v23, (const char **)&v12->__r_.__value_.__l.__data_);
    sub_1D4BB29D0((uint64_t)v24);
    LOBYTE(v11) = *(_BYTE *)(a2 + 23);
  }
  if ((v11 & 0x80u) == 0)
    v13 = v11;
  else
    v13 = *(_DWORD *)(a2 + 8);
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1D4BB10F8(a3, v13);
  }
  else
  {
    v14 = *(_QWORD *)(a3 + 8);
    if (v13 < 0x80)
    {
      LOBYTE(v16) = v13;
      v15 = *(_BYTE **)(a3 + 8);
    }
    else
    {
      v15 = *(_BYTE **)(a3 + 8);
      do
      {
        *v15++ = v13 | 0x80;
        v16 = v13 >> 7;
        v17 = v13 >> 14;
        v13 >>= 7;
      }
      while (v17);
    }
    *v15 = v16;
    v18 = (_DWORD)v15 - v14 + 1;
    *(_QWORD *)(a3 + 8) += v18;
    *(_DWORD *)(a3 + 16) -= v18;
  }
  v19 = *(char *)(a2 + 23);
  if (v19 >= 0)
    v20 = (char *)a2;
  else
    v20 = *(char **)a2;
  if (v19 >= 0)
    v21 = *(unsigned __int8 *)(a2 + 23);
  else
    v21 = *(_DWORD *)(a2 + 8);
  return sub_1D4BB0EE4(a3, v20, v21);
}

void sub_1D4BB4348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D4BB29D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB4360(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  std::string *v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  char *v20;
  uint64_t v21;
  char v23;
  std::string v24[2];

  v5 = (8 * a1) | 2;
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1D4BB10F8(a3, v5);
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = (8 * a1) | 2;
      v7 = *(_BYTE **)(a3 + 8);
    }
    else
    {
      v7 = *(_BYTE **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        v8 = v5 >> 7;
        v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *v7 = v8;
    v10 = (_DWORD)v7 - v6 + 1;
    *(_QWORD *)(a3 + 8) += v10;
    *(_DWORD *)(a3 + 16) -= v10;
  }
  v11 = *(char *)(a2 + 23);
  if (v11 < 0 && *(_QWORD *)(a2 + 8) >> 31)
  {
    sub_1D4BB2880((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CloudKit/CKDistributedSyncDependencies/orc-dependencies/protobuf-3.6.1/src/google/protobuf/wire_format_lite.cc", 531);
    v12 = sub_1D4BB2898(v24, "CHECK failed: (value.size()) <= (kint32max): ");
    sub_1D4BB29C8((uint64_t)&v23, (const char **)&v12->__r_.__value_.__l.__data_);
    sub_1D4BB29D0((uint64_t)v24);
    LOBYTE(v11) = *(_BYTE *)(a2 + 23);
  }
  if ((v11 & 0x80u) == 0)
    v13 = v11;
  else
    v13 = *(_DWORD *)(a2 + 8);
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1D4BB10F8(a3, v13);
  }
  else
  {
    v14 = *(_QWORD *)(a3 + 8);
    if (v13 < 0x80)
    {
      LOBYTE(v16) = v13;
      v15 = *(_BYTE **)(a3 + 8);
    }
    else
    {
      v15 = *(_BYTE **)(a3 + 8);
      do
      {
        *v15++ = v13 | 0x80;
        v16 = v13 >> 7;
        v17 = v13 >> 14;
        v13 >>= 7;
      }
      while (v17);
    }
    *v15 = v16;
    v18 = (_DWORD)v15 - v14 + 1;
    *(_QWORD *)(a3 + 8) += v18;
    *(_DWORD *)(a3 + 16) -= v18;
  }
  v19 = *(char *)(a2 + 23);
  if (v19 >= 0)
    v20 = (char *)a2;
  else
    v20 = *(char **)a2;
  if (v19 >= 0)
    v21 = *(unsigned __int8 *)(a2 + 23);
  else
    v21 = *(unsigned int *)(a2 + 8);
  if (*(_BYTE *)(a3 + 25))
    return sub_1D4BB0F68((_QWORD *)a3, v20, v21);
  else
    return sub_1D4BB0EE4(a3, v20, v21);
}

void sub_1D4BB4510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1D4BB29D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB4528(int a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v5 = (8 * a1) | 2;
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1D4BB10F8(a3, v5);
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 8);
    if (v5 < 0x80)
    {
      LOBYTE(v8) = (8 * a1) | 2;
      v7 = *(_BYTE **)(a3 + 8);
    }
    else
    {
      v7 = *(_BYTE **)(a3 + 8);
      do
      {
        *v7++ = v5 | 0x80;
        v8 = v5 >> 7;
        v9 = v5 >> 14;
        v5 >>= 7;
      }
      while (v9);
    }
    *v7 = v8;
    v10 = (_DWORD)v7 - v6 + 1;
    *(_QWORD *)(a3 + 8) += v10;
    *(_DWORD *)(a3 + 16) -= v10;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v12 = v11;
  if (*(int *)(a3 + 16) < 5)
  {
    sub_1D4BB10F8(a3, v11);
  }
  else
  {
    v13 = *(_QWORD *)(a3 + 8);
    if (v11 < 0x80)
    {
      LOBYTE(v15) = v11;
      v14 = *(_BYTE **)(a3 + 8);
    }
    else
    {
      v14 = *(_BYTE **)(a3 + 8);
      do
      {
        *v14++ = v12 | 0x80;
        v15 = v12 >> 7;
        v16 = v12 >> 14;
        v12 >>= 7;
      }
      while (v16);
    }
    *v14 = v15;
    v17 = (_DWORD)v14 - v13 + 1;
    *(_QWORD *)(a3 + 8) += v17;
    *(_DWORD *)(a3 + 16) -= v17;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3);
}

BOOL sub_1D4BB4654(uint64_t *a1, std::string *this)
{
  unint64_t v4;
  char *v5;
  std::string::size_type v6;
  uint64_t v7;
  size_t v9;
  uint64_t v10;

  v5 = (char *)*a1;
  v4 = a1[1];
  if (*a1 >= v4)
  {
    LODWORD(v6) = 0;
  }
  else
  {
    v6 = *v5;
    if ((*v5 & 0x80000000) == 0)
    {
      v7 = (uint64_t)(v5 + 1);
      *a1 = v7;
      goto LABEL_4;
    }
  }
  v10 = sub_1D4BB08A4(a1, v6);
  if ((v10 & 0x8000000080000000) != 0)
    return 0;
  v6 = v10;
  v7 = *a1;
  v4 = a1[1];
LABEL_4:
  if ((int)v6 > (int)v4 - (int)v7)
    return sub_1D4BB04E0(a1, this, v6);
  v9 = v6;
  std::string::resize(this, v6, 0);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this = (std::string *)this->__r_.__value_.__r.__words[0];
  memcpy(this, (const void *)*a1, v9);
  *a1 += v9;
  return 1;
}

uint64_t sub_1D4BB472C(unsigned int *a1)
{
  uint64_t v1;
  uint64_t result;
  int *v4;
  int v5;

  v1 = *a1;
  if ((int)v1 < 1)
    return 0;
  result = 0;
  v4 = (int *)(*((_QWORD *)a1 + 1) + 8);
  do
  {
    v5 = *v4++;
    result += (9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1D4BB477C(unsigned int *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;

  v1 = *a1;
  if ((int)v1 < 1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(*((_QWORD *)a1 + 1) + 8);
  do
  {
    v5 = *v4++;
    result += (9 * (__clz(v5 | 1) ^ 0x3F) + 73) >> 6;
    --v1;
  }
  while (v1);
  return result;
}

void sub_1D4BB4C14(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[8] = v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB4C78(_QWORD *a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;

  if (!a1)
    return 0;
  v4 = objc_msgSend_newIdentifier(a1, a2, a3);
  v5 = v4;
  v6 = a1[3];
  v7 = (uint64_t *)a1[2];
  if ((unint64_t)v7 >= v6)
  {
    v9 = (uint64_t *)a1[1];
    v10 = v7 - v9;
    if ((unint64_t)(v10 + 1) >> 61)
      sub_1D4B182AC();
    v11 = v6 - (_QWORD)v9;
    v12 = (uint64_t)(v6 - (_QWORD)v9) >> 2;
    if (v12 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      v14 = (char *)sub_1D4B182C0((uint64_t)(a1 + 3), v13);
      v9 = (uint64_t *)a1[1];
      v7 = (uint64_t *)a1[2];
    }
    else
    {
      v14 = 0;
    }
    v15 = (uint64_t *)&v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = v5;
    v8 = v15 + 1;
    while (v7 != v9)
    {
      v17 = *--v7;
      *--v15 = v17;
    }
    a1[1] = v15;
    a1[2] = v8;
    a1[3] = v16;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[2] = v8;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[8] - a1[7]) >> 3))
    v18 = v5 + 1;
  else
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[8] - a1[7]) >> 3);
  sub_1D4BB4DC8(a1 + 7, v18);
  v19 = a1[4];
  v20 = a1[5];
  v21 = a1 + 4;
  v22 = v20 - v19;
  if (v5 + 1 > (unint64_t)(v22 >> 1))
    v23 = v5 + 1;
  else
    v23 = v22 >> 1;
  sub_1D4BB4E5C((uint64_t)v21, v23);
  *(_BYTE *)(*v21 + 2 * v5) = 1;
  return v5;
}

void sub_1D4BB4DC8(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1D4BB6358((uint64_t)a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void sub_1D4BB4E5C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    sub_1D4BB6564((char **)a1, a2 - v2);
  }
}

uint64_t sub_1D4BB5134(_QWORD *a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v18;
  const char *v19;
  void *v20;
  const char *v21;

  if (!a1)
    return 0;
  v8 = a1[4];
  if (a2 >= (a1[5] - v8) >> 1 || !*(_BYTE *)(v8 + 2 * a2))
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], (const char *)a2, a3);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v18, v19, (uint64_t)sel_defineFieldForStruct_withEncoding_optional_, a1, CFSTR("CKXSchema.mm"), 109, CFSTR("Token not found"));

    v8 = a1[4];
  }
  if (*(_BYTE *)(v8 + 2 * a2 + 1))
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], (const char *)a2, a3);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v20, v21, (uint64_t)sel_defineFieldForStruct_withEncoding_optional_, a1, CFSTR("CKXSchema.mm"), 110, CFSTR("Can't define field for top-level container struct"));

  }
  objc_msgSend_typeForEncoding_(MEMORY[0x1E0C94F60], (const char *)a2, a3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_defineFieldForStruct_(a1, v10, a2);
  v12 = a1[10] + 56 * v11;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(a1[10] + 56 * v11 + 24) = objc_msgSend_size(v9, v13, v14);
  *(_QWORD *)(a1[10] + 56 * v11 + 32) = objc_msgSend_code(v9, v15, v16);
  *(_BYTE *)(a1[10] + 56 * v11 + 40) = a4;

  return v11;
}

void sub_1D4BB52A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB52BC(uint64_t result, const char *a2, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  const char *v9;
  void *v10;
  const char *v11;

  if (result)
  {
    v5 = (_QWORD *)result;
    v6 = *(_QWORD *)(result + 32);
    if (a3 >= (*(_QWORD *)(result + 40) - v6) >> 1 || !*(_BYTE *)(v6 + 2 * a3))
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v8, v9, (uint64_t)sel_defineStructReferenceToType_forStruct_, v5, CFSTR("CKXSchema.mm"), 122, CFSTR("Token not found"));

      v6 = v5[4];
    }
    if (*(_BYTE *)(v6 + 2 * a3 + 1))
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v10, v11, (uint64_t)sel_defineStructReferenceToType_forStruct_, v5, CFSTR("CKXSchema.mm"), 123, CFSTR("Can't define struct reference for top-level container struct"));

    }
    result = objc_msgSend_defineFieldForStruct_(v5, a2, a3);
    v7 = (_QWORD *)(v5[10] + 56 * result);
    v7[1] = 1;
    v7[2] = a3;
    v7[3] = a2;
  }
  return result;
}

void sub_1D4BB53C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB53D8(uint64_t result, const char *a2, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  const char *v9;

  if (result)
  {
    v5 = (_QWORD *)result;
    v6 = *(_QWORD *)(result + 32);
    if (a3 >= (*(_QWORD *)(result + 40) - v6) >> 1 || !*(_BYTE *)(v6 + 2 * a3))
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v8, v9, (uint64_t)sel_defineListReferenceToStructType_forStruct_, v5, CFSTR("CKXSchema.mm"), 132, CFSTR("Token not found"));

    }
    result = objc_msgSend_defineFieldForStruct_(v5, a2, a3);
    v7 = (_QWORD *)(v5[10] + 56 * result);
    v7[1] = 2;
    v7[2] = a3;
    v7[3] = 0;
    *(_QWORD *)(v5[10] + 56 * result + 32) = a2;
    *(_QWORD *)(v5[10] + 56 * result + 40) = 0;
    *(_QWORD *)(v5[10] + 56 * result + 48) = 23;
  }
  return result;
}

void sub_1D4BB54C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB54D0(_QWORD *a1, const char *a2, unint64_t a3)
{
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v17;
  const char *v18;
  void *v19;
  const char *v20;
  void *v21;
  const char *v22;
  const char *v23;

  if (!a1)
    return 0;
  if (a2)
  {
    if (a2 != (const char *)3)
      goto LABEL_4;
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], (const char *)3, a3);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v19, v23, (uint64_t)sel_defineListReferenceOfType_forStruct_, a1, CFSTR("CKXSchema.mm"), 145, CFSTR("Invalid list type"));
  }
  else
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], 0, a3);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v19, v20, (uint64_t)sel_defineListReferenceOfType_forStruct_, a1, CFSTR("CKXSchema.mm"), 144, CFSTR("Invalid list type"));
  }

LABEL_4:
  v6 = a1[4];
  if (a3 >= (a1[5] - v6) >> 1 || !*(_BYTE *)(v6 + 2 * a3))
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v17, v18, (uint64_t)sel_defineValueListReferenceWithEncoding_forStruct_, a1, CFSTR("CKXSchema.mm"), 152, CFSTR("Token not found"));

    v6 = a1[4];
  }
  if (*(_BYTE *)(v6 + 2 * a3 + 1))
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v21, v22, (uint64_t)sel_defineValueListReferenceWithEncoding_forStruct_, a1, CFSTR("CKXSchema.mm"), 153, CFSTR("Can't define non-struct list for top-level container struct"));

  }
  objc_msgSend_typeForEncoding_(MEMORY[0x1E0C94F60], a2, (uint64_t)"C");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend_defineFieldForStruct_(a1, v8, a3);
  v10 = 56 * v9;
  v11 = (_QWORD *)(a1[10] + 56 * v9);
  v11[1] = 2;
  v11[2] = a3;
  v11[3] = 3;
  *(_QWORD *)(a1[10] + 56 * v9 + 32) = -1;
  *(_QWORD *)(a1[10] + 56 * v9 + 40) = objc_msgSend_size(v7, v12, v13);
  *(_QWORD *)(a1[10] + v10 + 48) = objc_msgSend_code(v7, v14, v15);

  *(_QWORD *)(a1[10] + v10 + 24) = a2;
  return v9;
}

void sub_1D4BB56E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB5700(uint64_t result, const char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;

  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 80);
    if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(result + 88) - v5) >> 3) <= (unint64_t)a2
      || !*(_BYTE *)(v5 + 56 * (_QWORD)a2))
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v6, v7, (uint64_t)sel_fieldTypeForField_, v4, CFSTR("CKXSchema.mm"), 166, CFSTR("Token not found"));

      v5 = *(_QWORD *)(v4 + 80);
    }
    return *(_QWORD *)(v5 + 56 * (_QWORD)a2 + 8);
  }
  return result;
}

void sub_1D4BB57B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB57C8(uint64_t result, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;

  if (result)
  {
    v4 = result;
    if (sub_1D4BB5700(result, a2, a3) != 2)
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v5, v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v7, v8, (uint64_t)sel_listTypeForField_, v4, CFSTR("CKXSchema.mm"), 172, CFSTR("Invalid field type"));

    }
    return *(_QWORD *)(*(_QWORD *)(v4 + 80) + 56 * (_QWORD)a2 + 24);
  }
  return result;
}

void sub_1D4BB5854(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB5864(uint64_t result, const char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;

  if (result)
  {
    if (a2)
    {
      v4 = result;
      v5 = *(_QWORD *)(result + 80);
      if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(result + 88) - v5) >> 3) <= (unint64_t)a2
        || !*(_BYTE *)(v5 + 56 * (_QWORD)a2))
      {
        objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v9, v10, (uint64_t)sel_valueSizeForField_, v4, CFSTR("CKXSchema.mm"), 181, CFSTR("Token not found"));

      }
      v6 = sub_1D4BB5700(v4, a2, a3);
      if ((unint64_t)(v6 - 1) >= 2)
      {
        if (!v6)
        {
          v8 = *(_QWORD *)(v4 + 80) + 56 * (_QWORD)a2 + 24;
          return *(_QWORD *)v8;
        }
      }
      else if (sub_1D4BB57C8(v4, a2, v7) == 3)
      {
        v8 = *(_QWORD *)(v4 + 80) + 56 * (_QWORD)a2 + 40;
        return *(_QWORD *)v8;
      }
    }
    return 0;
  }
  return result;
}

void sub_1D4BB5970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB5980(uint64_t result, const char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;

  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 80);
    if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(result + 88) - v5) >> 3) <= (unint64_t)a2
      || !*(_BYTE *)(v5 + 56 * (_QWORD)a2))
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v6, v7, (uint64_t)sel_valueFieldIsOptional_, v4, CFSTR("CKXSchema.mm"), 245, CFSTR("Token not found"));

    }
    return !sub_1D4BB5700(v4, a2, a3) && *(_BYTE *)(*(_QWORD *)(v4 + 80) + 56 * (_QWORD)a2 + 40) != 0;
  }
  return result;
}

void sub_1D4BB5A58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB5A68(uint64_t result, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;

  if (result)
  {
    v4 = result;
    if (sub_1D4BB5700(result, a2, a3) != 1)
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v5, v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v7, v8, (uint64_t)sel_structForStructReference_, v4, CFSTR("CKXSchema.mm"), 262, CFSTR("Token not found"));

    }
    return *(_QWORD *)(*(_QWORD *)(v4 + 80) + 56 * (_QWORD)a2 + 24);
  }
  return result;
}

void sub_1D4BB5AF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB5B04(uint64_t result, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;

  if (result)
  {
    v4 = result;
    if (sub_1D4BB57C8(result, a2, a3))
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v5, v6);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v7, v8, (uint64_t)sel_structForListReference_, v4, CFSTR("CKXSchema.mm"), 269, CFSTR("Invalid list type"));

    }
    return *(_QWORD *)(*(_QWORD *)(v4 + 80) + 56 * (_QWORD)a2 + 32);
  }
  return result;
}

void sub_1D4BB5B8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB5B9C(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  if (!a1)
    return 0;
  v4 = 0;
  v5 = 0;
  v6 = 2 * a2;
  while (1)
  {
    v7 = a1[4];
    if (a2 < (a1[5] - v7) >> 1 && *(_BYTE *)(v7 + v6))
      v8 = (uint64_t)(*(_QWORD *)(a1[7] + 24 * a2 + 8) - *(_QWORD *)(a1[7] + 24 * a2)) >> 3;
    else
      v8 = -1;
    if (v4 >= v8)
      break;
    v9 = (const char *)sub_1D4BB5CBC((uint64_t)a1, v4, a2);
    v11 = sub_1D4BB5700((uint64_t)a1, v9, v10);
    if (v11 == 2)
      v13 = sub_1D4BB57C8((uint64_t)a1, v9, v12) == 0;
    else
      v13 = v11 == 1;
    if (v13)
      ++v5;
    ++v4;
  }
  return v5;
}

uint64_t sub_1D4BB5C78(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = *(_QWORD *)(result + 32);
    if (a2 < (*(_QWORD *)(result + 40) - v2) >> 1 && *(_BYTE *)(v2 + 2 * a2))
      return (uint64_t)(*(_QWORD *)(*(_QWORD *)(result + 56) + 24 * a2 + 8)
                     - *(_QWORD *)(*(_QWORD *)(result + 56) + 24 * a2)) >> 3;
    else
      return -1;
  }
  return result;
}

uint64_t sub_1D4BB5CBC(uint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = *(_QWORD *)(result + 32);
    if (a3 < (*(_QWORD *)(result + 40) - v3) >> 1
      && *(_BYTE *)(v3 + 2 * a3)
      && (v4 = *(_QWORD *)(*(_QWORD *)(result + 56) + 24 * a3),
          a2 < (*(_QWORD *)(*(_QWORD *)(result + 56) + 24 * a3 + 8) - v4) >> 3))
    {
      return *(_QWORD *)(v4 + 8 * a2);
    }
    else
    {
      return -1;
    }
  }
  return result;
}

uint64_t sub_1D4BB5D08(uint64_t result, const char *a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;

  if (result)
  {
    v5 = (_QWORD *)result;
    v6 = 0;
    v7 = 2 * a3;
    while (1)
    {
      v8 = v5[4];
      if (a3 < (v5[5] - v8) >> 1 && *(_BYTE *)(v8 + v7))
        v9 = (uint64_t)(*(_QWORD *)(v5[7] + 24 * a3 + 8) - *(_QWORD *)(v5[7] + 24 * a3)) >> 3;
      else
        v9 = -1;
      if (v6 >= v9)
      {
        objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v13, v14, (uint64_t)sel_referencedStructAtIndex_forStructToken_, v5, CFSTR("CKXSchema.mm"), 345, CFSTR("Index out of bounds"));

        return 0x7FFFFFFFFFFFFFFFLL;
      }
      v10 = (const char *)sub_1D4BB5CBC((uint64_t)v5, v6, a3);
      v12 = sub_1D4BB5700((uint64_t)v5, v10, v11);
      if (v12 == 2)
      {
        if (!sub_1D4BB57C8((uint64_t)v5, v10, a3))
          return sub_1D4BB5B04((uint64_t)v5, v10, a3);
      }
      else if (v12 == 1 && !a2)
      {
        return sub_1D4BB5A68((uint64_t)v5, v10, a3);
      }
      ++v6;
    }
  }
  return result;
}

void sub_1D4BB5E64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_1D4BB5E74(_BOOL8 result, const char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;

  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if ((unint64_t)a2 >= (*(_QWORD *)(result + 40) - v5) >> 1 || !*(_BYTE *)(v5 + 2 * (_QWORD)a2))
    {
      objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], a2, a3);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v6, v7, (uint64_t)sel_structIsTopLevelContainer_, v4, CFSTR("CKXSchema.mm"), 350, CFSTR("Token not found"));

      v5 = *(_QWORD *)(v4 + 32);
    }
    return *(unsigned __int8 *)(v5 + 2 * (_QWORD)a2 + 1) != 0;
  }
  return result;
}

void sub_1D4BB5F14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *sub_1D4BB5FC4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      sub_1D4B182AC();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1D4B29DC0(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void sub_1D4BB60CC()
{
  sub_1D4B0259C("vector");
}

void *sub_1D4BB60E0(uint64_t a1)
{
  if (a1 < 0)
    sub_1D4B18174();
  return operator new(2 * a1);
}

_QWORD *sub_1D4BB6110(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  int64_t v9;
  char *v10;
  _QWORD v12[3];
  char v13;
  _QWORD *v14;
  _QWORD *v15;

  v4 = a4;
  v14 = a4;
  v15 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      v8 = *(const void **)v6;
      v7 = *(_QWORD *)(v6 + 8);
      v9 = v7 - *(_QWORD *)v6;
      if (v7 != *(_QWORD *)v6)
      {
        sub_1D4B29DC0(v4, v9 >> 3);
        v10 = (char *)v4[1];
        memmove(v10, v8, v9);
        v4[1] = &v10[8 * (v9 >> 3)];
        v4 = v15;
      }
      v4 += 3;
      v15 = v4;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v13 = 1;
  sub_1D4BB6204((uint64_t)v12);
  return v4;
}

void sub_1D4BB61E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_1D4BB6204((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB6204(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 8);
    v3 = **(_QWORD **)(a1 + 16);
    if (v3 != v2)
    {
      v4 = **(_QWORD **)(a1 + 16);
      do
      {
        v6 = *(void **)(v4 - 24);
        v4 -= 24;
        v5 = v6;
        if (v6)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 = v4;
      }
      while (v4 != v2);
    }
  }
  return a1;
}

char *sub_1D4BB6268(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if ((char *)v5 != a3)
        sub_1D4BB5FC4(a3, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3);
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

void *sub_1D4BB62CC(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    sub_1D4B18174();
  return operator new(24 * a1);
}

void *sub_1D4BB6310(unint64_t a1)
{
  if (a1 >= 0x492492492492493)
    sub_1D4B18174();
  return operator new(56 * a1);
}

void sub_1D4BB6358(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  __int128 v19;
  int64x2_t v20;
  unint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  unint64_t v24;
  uint64_t v25;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v6 += v12;
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_1D4BB60CC();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *(_QWORD *)a1) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    v25 = v4;
    if (v10)
      v10 = (unint64_t)sub_1D4BB62CC(v10);
    else
      v11 = 0;
    v13 = (_QWORD *)(v10 + 24 * v7);
    v14 = v10 + 24 * v11;
    v24 = v14;
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = (char *)v13 + v15;
    v23.i64[1] = (uint64_t)v13 + v15;
    v18 = *(_QWORD **)a1;
    v17 = *(_QWORD **)(a1 + 8);
    if (v17 == *(_QWORD **)a1)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        *(v13 - 3) = 0;
        *(v13 - 2) = 0;
        v13 -= 3;
        v13[2] = 0;
        v19 = *(_OWORD *)(v17 - 3);
        v17 -= 3;
        *(_OWORD *)v13 = v19;
        v13[2] = v17[2];
        *v17 = 0;
        v17[1] = 0;
        v17[2] = 0;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)a1;
      v16 = (char *)v23.i64[1];
      v14 = v24;
    }
    *(_QWORD *)a1 = v13;
    *(_QWORD *)(a1 + 8) = v16;
    v23 = v20;
    v21 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v14;
    v24 = v21;
    v22 = v20.i64[0];
    sub_1D4BB6504((uint64_t)&v22);
  }
}

uint64_t sub_1D4BB6504(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1D4BB6564(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 1)
  {
    if (a2)
    {
      bzero(a1[1], 2 * a2);
      v5 += 2 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = v5 - *a1;
    if ((uint64_t)(a2 + (v6 >> 1)) < 0)
      sub_1D4BB60CC();
    v7 = v6 >> 1;
    v8 = v4 - *a1;
    if (v8 <= a2 + (v6 >> 1))
      v9 = a2 + (v6 >> 1);
    else
      v9 = v8;
    if (v8 >= 0x7FFFFFFFFFFFFFFELL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v10 = (uint64_t)sub_1D4BB60E0(v10);
    else
      v11 = 0;
    v12 = (char *)(v10 + 2 * v7);
    v13 = v10 + 2 * v11;
    bzero(v12, 2 * a2);
    v14 = &v12[2 * a2];
    v16 = *a1;
    v15 = a1[1];
    if (v15 != *a1)
    {
      do
      {
        v17 = *((_WORD *)v15 - 1);
        v15 -= 2;
        *((_WORD *)v12 - 1) = v17;
        v12 -= 2;
      }
      while (v15 != v16);
      v15 = *a1;
    }
    *a1 = v12;
    a1[1] = v14;
    a1[2] = (char *)v13;
    if (v15)
      operator delete(v15);
  }
}

void sub_1D4BB6800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB6968(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

void sub_1D4BB6B18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4BB6C14(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E9847258;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));

  return nullsub_1(a1);
}

void sub_1D4BB6C5C(uint64_t a1)
{
  sub_1D4BB6C14(a1);
  JUMPOUT(0x1D8264758);
}

uint64_t sub_1D4BB6C80(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 8), sel_appendBytes_length_, a2);
}

uint64_t sub_1D4BB6C90(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_length(*(void **)(a1 + 8), a2, a3);
}

uint64_t sub_1D4BB6C98(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1D4BB6CA0(uint64_t a1)
{
  return a1 + 24;
}

const __CFString *CKDSStringForErrorCode(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5)
    return CFSTR("Unknown Error");
  else
    return off_1E984B390[a1 - 1];
}

void sub_1D4BB6D3C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BB6F00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB7028(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BB7144(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BB71B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BB74E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB793C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

id CKXAtomBindingFormatVersionORC()
{
  if (qword_1EFEC6AE0 != -1)
    dispatch_once(&qword_1EFEC6AE0, &unk_1E984B060);
  return (id)qword_1EFEC6AE8;
}

void sub_1D4BB7A28()
{
  uint64_t v0;
  void *v1;

  v0 = objc_opt_new();
  v1 = (void *)qword_1EFEC6AE8;
  qword_1EFEC6AE8 = v0;

}

id CKXAtomBindingFormatVersionORCv2()
{
  if (qword_1EFEC6AF0 != -1)
    dispatch_once(&qword_1EFEC6AF0, &unk_1E984B3E0);
  return (id)qword_1EFEC6AF8;
}

void sub_1D4BB7A90()
{
  uint64_t v0;
  void *v1;

  v0 = objc_opt_new();
  v1 = (void *)qword_1EFEC6AF8;
  qword_1EFEC6AF8 = v0;

}

void sub_1D4BB7B98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB7C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D4BB7D18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB7DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D4BB7EF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4BB7FBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4BB8094(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB8144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D4BB8210(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB82E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB83C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB84D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB8584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D4BB8654(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB8704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D4BB87D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB8884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D4BB8968(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1D4BB8A58(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB8B04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4BB8BB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4BB8DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D4BB8DF0(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  id v5;

  v5 = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += objc_msgSend_size(v5, v3, v4);

}

void sub_1D4BB8E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D4BB8EF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB8FA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4BB9050(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4BB90FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4BB91D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB92A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB937C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB942C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D4BB94D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4BB966C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1D4BB9794(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB985C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB993C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB9A04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB9C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1D4BB9D08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4BB9DF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB9EE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BB9FA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BBA074(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BBA144(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BBA214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BBA3D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1D4BBA4FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BBA5C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BBA6F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BBA7C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BBA8F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BBA9BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BBABC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1D4BBACE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BBAD94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4BBAE80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BBAF38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4BBB024(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BBB2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1D4BBB358(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v3 = a2;
  objc_msgSend_references(*(void **)(a1 + 32), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1D4BBB414;
  v9[3] = &unk_1E984B430;
  v8 = v3;
  v10 = v8;
  objc_msgSend_appendWithProxyBlock_(v6, v7, (uint64_t)v9);

}

void sub_1D4BBB3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4BBB414(uint64_t a1, void *a2)
{
  return objc_msgSend_copyFromReadProxy_(a2, (const char *)a2, *(_QWORD *)(a1 + 32));
}

void sub_1D4BBB4C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BBB574(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4BBB620(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4BBB70C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BBB7C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4BBB890(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BBB960(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BBBA40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BBBB08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BBBCB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1D4BBBD1C(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v3 = a2;
  objc_msgSend_atoms(*(void **)(a1 + 32), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1D4BBBDD8;
  v9[3] = &unk_1E984B480;
  v8 = v3;
  v10 = v8;
  objc_msgSend_appendWithProxyBlock_(v6, v7, (uint64_t)v9);

}

void sub_1D4BBBDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4BBBDD8(uint64_t a1, void *a2)
{
  return objc_msgSend_copyFromReadProxy_(a2, (const char *)a2, *(_QWORD *)(a1 + 32));
}

void sub_1D4BBBE68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4BBBF04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BBBF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D4BBC06C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BBC15C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1D4BBC21C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4BBC2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D4BBC3A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1D4BBC4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1D4BBC56C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BBC754(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BBC8E8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 64) = 1;
}

void sub_1D4BBC8F4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 64) = 1;
}

void sub_1D4BBC900(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 64) = 1;
}

void sub_1D4BBC90C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 64) = 1;
}

void sub_1D4BBC9E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BBCAA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BBCB44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BBCC94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BBCD28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BBCEE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BBD0CC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 64) = 1;
}

void sub_1D4BBD0D8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 64) = 1;
}

void sub_1D4BBD0E4(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 64) = 1;
}

void sub_1D4BBD0F0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 64) = 1;
}

void sub_1D4BBD0FC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 64) = 1;
}

void sub_1D4BBD1E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BBD2AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BBD348(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BBD444(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BBD594(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id sub_1D4BBD9C4(void *a1)
{
  return objc_getAssociatedObject(a1, "CKAtomBatchStorage");
}

void sub_1D4BBD9D0(void *a1, uint64_t a2, void *a3)
{
  objc_setAssociatedObject(a1, "CKAtomBatchStorage", a3, (void *)3);
}

id sub_1D4BBD9E0(id a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  id v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  id v31;

  v6 = a3;
  v7 = objc_alloc(MEMORY[0x1E0C94EC0]);
  objc_msgSend_vectors(v6, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend_initWithVectors_(v7, v11, (uint64_t)v10);

  objc_msgSend_storage(v6, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fileURL(v15, v16, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  if (v18)
  {
    objc_msgSend_mergeableValueID(v6, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    a1 = (id)objc_msgSend_initWithValueID_metadata_fileURL_(a1, v22, (uint64_t)v21, v12, v18);

    objc_msgSend_storage(v6, v23, v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setAtomBatchStorage_(a1, v26, (uint64_t)v25);
  }
  else
  {
    objc_msgSend_dataWithError_(v6, v19, a4);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v25)
    {
      v31 = 0;
      goto LABEL_6;
    }
    objc_msgSend_mergeableValueID(v6, v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    a1 = (id)objc_msgSend_initWithValueID_metadata_data_(a1, v30, (uint64_t)v29, v12, v25);

  }
  v31 = a1;
LABEL_6:

  return v31;
}

void sub_1D4BBDE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BBDEC0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D4BBDED0(uint64_t a1)
{

}

void sub_1D4BBDED8(uint64_t a1, void *a2)
{
  objc_class *v3;
  id v4;
  id v5;
  uint64_t v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  id obj;

  v3 = (objc_class *)MEMORY[0x1E0C94EB8];
  v4 = a2;
  v5 = [v3 alloc];
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  obj = *(id *)(v6 + 40);
  v8 = (void *)objc_msgSend_initWithAtomBatch_error_(v5, v7, (uint64_t)v4, &obj);

  objc_storeStrong((id *)(v6 + 40), obj);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  if (*(_BYTE *)(v10 + 24))
    v11 = v8 == 0;
  else
    v11 = 1;
  v12 = !v11;
  *(_BYTE *)(v10 + 24) = v12;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    objc_msgSend_addObject_(*(void **)(a1 + 32), v9, (uint64_t)v8);

}

void sub_1D4BBE4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13)
{

  _Unwind_Resume(a1);
}

void sub_1D4BBE734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

__CFString *CKDSStringForBackingStoreFormatVersion(unsigned int a1, const char *a2)
{
  if (a1 < 4)
    return off_1E984B610[(char)a1];
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR("Unknown (%d)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void sub_1D4BBF994(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D4BBFBBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC010C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D4BC04D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1D4BC0710(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC0808(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC0B18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BC0C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D4BC0DD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BC11C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC1304(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC13D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D4BC1470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BC155C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BC15BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC1608(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC1674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D4BC1774(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC1870(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC1940(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC19AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC1AA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC1B88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC1C54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC1CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D4BC1DD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC1ECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC1FB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC20A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC2180(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC2274(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC22D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC238C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC2400(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC2474(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC2660(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC27AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BC299C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4BC29E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)objc_msgSend_length(*(void **)(a1 + 32), (const char *)a2, a3) < 3)
    return 0;
  if (*(_WORD *)a2 != 21071 || *(_BYTE *)(a2 + 2) != 67)
    return 0;
  *(_WORD *)a3 = 259;
  *(_BYTE *)(a3 + 2) = 4;
  return 1;
}

uint64_t sub_1D4BC2A48(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const char *v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  const char *v10;
  char v11;
  char v12;
  _DWORD v13[2];

  if ((unint64_t)objc_msgSend_length(*(void **)(a1 + 32), (const char *)a2, (uint64_t)a3) < 5
    || *(_DWORD *)a2 != -1421867861)
  {
    return 0;
  }
  v9 = *(unsigned __int8 *)(a2 + 4);
  if (v9 > 2 || (unint64_t)objc_msgSend_length(*(void **)(a1 + 32), v6, v7) < 7)
  {
    v12 = 0;
    v11 = 0;
  }
  else
  {
    *(_DWORD *)((char *)v13 + 3) = 0;
    v13[0] = 0;
    objc_msgSend_getBytes_range_(*(void **)(a1 + 32), v10, (uint64_t)v13, 0, 7);
    v11 = BYTE1(v13[1]);
    v12 = BYTE2(v13[1]);
  }
  *a3 = v9;
  a3[1] = v11;
  result = 1;
  a3[2] = v12;
  return result;
}

uint64_t sub_1D4BC2B04(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v6;
  uint64_t result;
  uint64_t v8;

  if ((unint64_t)objc_msgSend_length(*(void **)(a1 + 32), a2, a3) < 0xC)
    return 0;
  if (*(_DWORD *)a2 != 1836020833)
    return 0;
  v8 = 0;
  objc_msgSend_getBytes_range_(*(void **)(a1 + 32), v6, (uint64_t)&v8, 4, 8);
  if (v8 != 1)
    return 0;
  *(_WORD *)a3 = 257;
  result = 1;
  *(_BYTE *)(a3 + 2) = 1;
  return result;
}

void sub_1D4BC2CBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC2ED0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4BC2F2C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E9847218;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));

  return nullsub_1(a1);
}

void sub_1D4BC2F74(uint64_t a1)
{
  sub_1D4BC2F2C(a1);
  JUMPOUT(0x1D8264758);
}

uint64_t sub_1D4BC2F98(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_length(*(void **)(a1 + 8), a2, a3);
}

uint64_t sub_1D4BC2FA0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1D4BC2FA8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_getBytes_range_(*(void **)(a1 + 8), a2, (uint64_t)a2, a4, a3);
}

uint64_t sub_1D4BC2FB8(uint64_t a1)
{
  return a1 + 24;
}

void sub_1D4BC30C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BC3204(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D4BC3348(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D4BC3558(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  id v13;
  const char *v14;
  uint64_t v15;
  id v16;
  const char *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v32;
  void *__p[2];
  char v34;
  _QWORD *v35;

  objc_msgSend_storage(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fileURL(v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    objc_msgSend_storage(*(void **)(a1 + 32), v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_fileURL(v10, v11, v12);
    v13 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend_path(v13, v14, v15);
    v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v19 = (char *)objc_msgSend_UTF8String(v16, v17, v18);
    sub_1D4BCA448(__p, v19);
    sub_1D4B2FAEC((uint64_t)__p, &v35);
    v20 = v35;
    v35 = 0;
    if (v34 < 0)
      operator delete(__p[0]);

  }
  else
  {
    v20 = (_QWORD *)operator new();
    objc_msgSend_storage(*(void **)(a1 + 32), v21, v22);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_data(v10, v23, v24);
    v25 = (id)objc_claimAutoreleasedReturnValue();
    *v20 = &off_1E9847218;
    v13 = v25;
    v20[1] = v13;
    v20[2] = 1024;
    sub_1D4BCA448(v20 + 3, "CKXORCMemoryInputStream");

  }
  sub_1D4B30650(__p);
  v32 = v20;
  sub_1D4B3494C((uint64_t *)&v32, (uint64_t)__p, &v35);
  v26 = *(_QWORD *)(a1 + 32);
  v27 = v35;
  v35 = 0;
  v28 = *(_QWORD *)(v26 + 16);
  *(_QWORD *)(v26 + 16) = v27;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = v35;
  v35 = 0;
  if (v29)
    (*(void (**)(_QWORD *))(*v29 + 8))(v29);
  v30 = (uint64_t)v32;
  v32 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  return sub_1D4B306E8(__p);
}

void sub_1D4BC370C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  void *v17;
  void *v18;

  nullsub_1(v16);
  MEMORY[0x1D8264758](v16, 0x1093C40C045CC46);
  _Unwind_Resume(a1);
}

void sub_1D4BC393C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4BC3BA0(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char **v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  uint8_t buf[4];
  uint64_t v53;
  __int16 v54;
  void *v55;
  __int16 v56;
  uint64_t v57;
  _QWORD v58[2];

  v58[1] = *MEMORY[0x1E0C80C00];
  sub_1D4B30760(v51);
  objc_msgSend_helpers(*(void **)(a1 + 32), v2, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend_topLevelIndexForStruct_(v4, v5, *(_QWORD *)(a1 + 40));

  v58[0] = v6;
  sub_1D4BCA4F8(buf, (uint64_t)v58, 1);
  sub_1D4B30878((uint64_t)v51, (uint64_t)buf);
  sub_1D4B356D8(buf);
  (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD *))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 16) + 224))(v58, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), v51);
  v7 = v58[0];
  objc_msgSend_options(*(void **)(a1 + 32), v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend_batchSize(v10, v11, v12);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(&v50, v7, v13);

  v14 = *(_QWORD *)(a1 + 40);
  v15 = (char **)(*(_QWORD *)(a1 + 32) + 24);
  v17 = *v15;
  v16 = *(char **)(*(_QWORD *)(a1 + 32) + 32);
  v18 = v16 - *v15;
  v19 = v18 >> 4;
  if (v14 + 1 > (unint64_t)(v18 >> 4))
    v20 = v14 + 1;
  else
    v20 = v18 >> 4;
  if (v19 < v14 + 1)
  {
    v21 = v20 - v19;
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
    if (v20 - v19 <= (v22 - (uint64_t)v16) >> 4)
    {
      bzero(*(void **)(*(_QWORD *)(a1 + 32) + 32), 16 * v21);
      v15[1] = &v16[16 * v21];
    }
    else
    {
      if (v20 >> 60)
        sub_1D4B182AC();
      v23 = v22 - (_QWORD)v17;
      if (v23 >> 3 > v20)
        v20 = v23 >> 3;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
        v24 = 0xFFFFFFFFFFFFFFFLL;
      else
        v24 = v20;
      if (v24 >> 60)
        sub_1D4B18174();
      v25 = (char *)operator new(16 * v24);
      v26 = &v25[16 * v19];
      v27 = &v25[16 * v24];
      bzero(v26, 16 * v21);
      v28 = &v26[16 * v21];
      if (v16 == v17)
      {
        *v15 = v26;
        v15[1] = v28;
        v15[2] = v27;
      }
      else
      {
        do
        {
          v29 = *((_QWORD *)v16 - 2);
          v16 -= 16;
          *(_QWORD *)v16 = 0;
          *((_QWORD *)v26 - 2) = v29;
          v26 -= 16;
          v30 = *((_QWORD *)v16 + 1);
          *((_QWORD *)v16 + 1) = 0;
          *((_QWORD *)v26 + 1) = v30;
        }
        while (v16 != v17);
        v16 = *v15;
        v31 = v15[1];
        *v15 = v26;
        v15[1] = v28;
        v15[2] = v27;
        while (v31 != v16)
        {
          v32 = *((_QWORD *)v31 - 1);
          *((_QWORD *)v31 - 1) = 0;
          if (v32)
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          v33 = *((_QWORD *)v31 - 2);
          *((_QWORD *)v31 - 2) = 0;
          if (v33)
            (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
          v31 -= 16;
        }
      }
      if (v16)
        operator delete(v16);
    }
  }
  v34 = v58[0];
  v58[0] = 0;
  v35 = v50;
  v50 = 0;
  v36 = *(_QWORD *)(a1 + 40);
  v37 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v38 = *(_QWORD *)(v37 + 16 * v36);
  *(_QWORD *)(v37 + 16 * v36) = v34;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = v37 + 16 * v36;
  v40 = *(_QWORD *)(v39 + 8);
  *(_QWORD *)(v39 + 8) = v35;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v41 = (id)*MEMORY[0x1E0C952C0];
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
  {
    v47 = *(_QWORD *)(a1 + 40);
    objc_msgSend_storage(*(void **)(a1 + 32), v42, v43);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v49 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 16) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
    *(_DWORD *)buf = 134218498;
    v53 = v47;
    v54 = 2112;
    v55 = v48;
    v56 = 2048;
    v57 = v49;
    _os_log_debug_impl(&dword_1D4AFF000, v41, OS_LOG_TYPE_DEBUG, "Created ORC reader for struct %lu with storage %@, rows: %llu", buf, 0x20u);

  }
  v44 = v50;
  v50 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = v58[0];
  v58[0] = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  return sub_1D4B30810((uint64_t)v51);
}

void sub_1D4BC3F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  v18 = a17;
  a17 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  sub_1D4B30810((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1D4BC416C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

unint64_t sub_1D4BC43DC(uint64_t a1)
{
  unint64_t result;
  const char *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  char v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  uint64_t Count;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t BatchLoadsToSkip;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  id v34;
  const char *v35;
  uint64_t v36;
  char *v37;
  std::runtime_error *exception;
  void *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  std::string v43;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 16) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  if (!result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    return result;
  }
  v5 = result;
  if (*(_QWORD *)(a1 + 48) >= result)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v3, v4);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v41, v42, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 32), CFSTR("CKXORCReaderWriter.mm"), 218, CFSTR("Invalid row: %llu/%llu"), *(_QWORD *)(a1 + 48), v5);

  }
  v6 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 16 * *(_QWORD *)(a1 + 64));
  v7 = *v6;
  v8 = v6[1];
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 48))(*v6);
  v10 = *(_QWORD *)(v8 + 16);
  if (!v10 || (v11 = *(const char **)(a1 + 48), (unint64_t)v11 >= v10 + result))
  {
    while (1)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
      v12 = *(_QWORD *)(a1 + 48);
      v14 = v12 >= result;
      v13 = v12 - result;
      v14 = !v14 || v13 >= *(_QWORD *)(v8 + 16);
      if (!v14)
        break;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v8);
    }
    goto LABEL_13;
  }
  if ((unint64_t)v11 < result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v8);
LABEL_13:
    v15 = 1;
    goto LABEL_14;
  }
  v15 = 0;
LABEL_14:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v15;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    objc_msgSend_options(*(void **)(a1 + 32), v11, v9);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_testExceptionDuringLoadBatch(v16, v17, v18);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (v21)
    {
      Count = objc_msgSend_loadCount(*(void **)(a1 + 32), v19, v20);
      objc_msgSend_options(*(void **)(a1 + 32), v23, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      BatchLoadsToSkip = objc_msgSend_testExceptionDuringLoadBatchLoadsToSkip(v25, v26, v27);

      if (Count == BatchLoadsToSkip)
      {
        objc_msgSend_options(*(void **)(a1 + 32), v29, v30);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_testExceptionDuringLoadBatch(v31, v32, v33);
        v34 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v37 = (char *)objc_msgSend_UTF8String(v34, v35, v36);
        sub_1D4BCA448(&v43, v37);

        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        sub_1D4B2D1D0(exception, &v43);
        __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
      }
    }
    else
    {

    }
    v39 = *(void **)(a1 + 32);
    v40 = objc_msgSend_loadCount(v39, v29, v30) + 1;
    return MEMORY[0x1E0DE7D20](v39, sel_setLoadCount_, v40);
  }
  return result;
}

void sub_1D4BC4650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1D4BC4858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  va_list va;

  va_start(va, a12);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BC4AB8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(*(_QWORD *)(a1[4] + 24) + 16 * a1[6]);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = result;
  return result;
}

void sub_1D4BC4C50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D4BC4EB4(uint64_t a1, const char *a2, uint64_t a3)
{
  _QWORD *result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  char **v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  _QWORD v46[3];
  void *v47[2];
  void *lpsrc[2];

  lpsrc[1] = *(void **)MEMORY[0x1E0C80C00];
  v6 = a1 + 32;
  result = *(_QWORD **)(a1 + 32);
  v5 = *(_QWORD *)(v6 + 8);
  v7 = result[6];
  if (v5 >= (result[7] - v7) >> 3 || !*(_QWORD *)(v7 + 8 * v5))
  {
    objc_msgSend_helpers(result, a2, a3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (void *)objc_msgSend_topLevelIndexForStruct_(v8, v9, *(_QWORD *)(a1 + 40));

    sub_1D4B30760(v47);
    lpsrc[0] = v10;
    sub_1D4BCA4F8(v46, (uint64_t)lpsrc, 1);
    sub_1D4B30878((uint64_t)v47, (uint64_t)v46);
    sub_1D4B356D8(v46);
    (*(void (**)(_QWORD *__return_ptr, _QWORD, void **))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 16) + 224))(v46, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), v47);
    v11 = v46[0];
    objc_msgSend_options(*(void **)(a1 + 32), v12, v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend_batchSize(v14, v15, v16);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(lpsrc, v11, v17);

    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 16) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
    v18 = (void *)objc_opt_new();
    while ((*(unsigned int (**)(_QWORD, void *))(*(_QWORD *)v46[0] + 40))(v46[0], lpsrc[0]))
    {
      v19 = **((_QWORD **)__dynamic_cast(lpsrc[0], (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846490, 0)+ 10);
      if (*(_QWORD *)(v19 + 16))
      {
        v20 = 0;
        do
        {
          v21 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v46[0] + 48))(v46[0]);
          if (*(_BYTE *)(*(_QWORD *)(v19 + 40) + v20))
            objc_msgSend_addIndex_(v18, v22, v20 + v21);
          ++v20;
        }
        while (v20 < *(_QWORD *)(v19 + 16));
      }
    }
    v23 = *(_QWORD *)(a1 + 40);
    v24 = (char **)(*(_QWORD *)(a1 + 32) + 48);
    v26 = *v24;
    v25 = *(char **)(*(_QWORD *)(a1 + 32) + 56);
    v27 = v25 - *v24;
    v28 = v27 >> 3;
    if (v23 + 1 > (unint64_t)(v27 >> 3))
      v29 = v23 + 1;
    else
      v29 = v27 >> 3;
    if (v28 < v23 + 1)
    {
      v30 = v29 - v28;
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64);
      if (v29 - v28 <= (v31 - (uint64_t)v25) >> 3)
      {
        bzero(*(void **)(*(_QWORD *)(a1 + 32) + 56), 8 * v30);
        v24[1] = &v25[8 * v30];
      }
      else
      {
        if (v29 >> 61)
          sub_1D4B182AC();
        v32 = v31 - (_QWORD)v26;
        if (v32 >> 2 > v29)
          v29 = v32 >> 2;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
          v33 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v33 = v29;
        if (v33 >> 61)
          sub_1D4B18174();
        v34 = (char *)operator new(8 * v33);
        v35 = &v34[8 * v28];
        v36 = &v34[8 * v33];
        bzero(v35, 8 * v30);
        v37 = &v35[8 * v30];
        if (v25 == v26)
        {
          *v24 = v35;
          v24[1] = v37;
          v24[2] = v36;
        }
        else
        {
          do
          {
            v38 = *((_QWORD *)v25 - 1);
            v25 -= 8;
            *(_QWORD *)v25 = 0;
            *((_QWORD *)v35 - 1) = v38;
            v35 -= 8;
          }
          while (v25 != v26);
          v25 = *v24;
          v39 = v24[1];
          *v24 = v35;
          v24[1] = v37;
          v24[2] = v36;
          while (v39 != v25)
          {
            v40 = (void *)*((_QWORD *)v39 - 1);
            v39 -= 8;

          }
        }
        if (v25)
          operator delete(v25);
      }
    }
    v41 = *(_QWORD *)(a1 + 40);
    v42 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
    v43 = *(void **)(v42 + 8 * v41);
    *(_QWORD *)(v42 + 8 * v41) = v18;

    v44 = lpsrc[0];
    lpsrc[0] = 0;
    if (v44)
      (*(void (**)(void *))(*(_QWORD *)v44 + 8))(v44);
    v45 = v46[0];
    v46[0] = 0;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
    return (_QWORD *)sub_1D4B30810((uint64_t)v47);
  }
  return result;
}

void sub_1D4BC51F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15)
{
  void *v15;
  uint64_t v17;

  v17 = a15;
  a15 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  sub_1D4B30810((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1D4BC5334(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC53B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC5604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  va_list va;

  va_start(va, a8);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BC5864(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 16) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

void sub_1D4BC5960(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC5AAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC5B80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC5D40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC600C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC6090(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC61BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC6564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1D4BC6694(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC6764(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC6810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC6B20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BC6C74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1D4BC6DCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4BC6FDC(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  id v16;
  const char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  _QWORD *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  id v39;
  const char *v40;
  char *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  int v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  const char *v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  NSObject *v81;
  uint64_t result;
  void *v83;
  const char *v84;
  void *v85;
  const char *v86;
  uint8_t v87[16];
  void *__p[2];
  char v89;
  uint64_t v90;

  objc_msgSend_storage(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_fileURL(v4, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v7)
  {
    objc_msgSend_storage(*(void **)(a1 + 32), v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_fileURL(v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_path(v13, v14, v15);
    v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v19 = (char *)objc_msgSend_UTF8String(v16, v17, v18);
    sub_1D4BCA448(__p, v19);
    sub_1D4B2FC0C((uint64_t)__p, &v90);
    v20 = *(_QWORD *)(a1 + 32);
    v21 = v90;
    v90 = 0;
    v22 = *(_QWORD *)(v20 + 24);
    *(_QWORD *)(v20 + 24) = v21;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = v90;
    v90 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    if (v89 < 0)
      operator delete(__p[0]);

  }
  else
  {
    v26 = (_QWORD *)operator new();
    objc_msgSend_storage(*(void **)(a1 + 32), v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_data(v29, v30, v31);
    v32 = (id)objc_claimAutoreleasedReturnValue();
    *v26 = &off_1E9847258;
    v33 = v32;
    v26[1] = v33;
    sub_1D4BCA448(v26 + 3, "CKXORCMemoryOutputStream");

    v34 = *(_QWORD *)(a1 + 32);
    v35 = *(_QWORD *)(v34 + 24);
    *(_QWORD *)(v34 + 24) = v26;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);

  }
  objc_msgSend_helpers(*(void **)(a1 + 32), v24, v25);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_generateSchema(v36, v37, v38);
  v39 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v41 = (char *)objc_msgSend_cStringUsingEncoding_(v39, v40, 4);
  sub_1D4BCA448(__p, v41);
  sub_1D4B46C20((uint64_t)__p, &v90);
  if (v89 < 0)
    operator delete(__p[0]);

  sub_1D4B4ABAC(__p);
  objc_msgSend_options(*(void **)(a1 + 32), v42, v43);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = objc_msgSend_compressionKind(v44, v45, v46);

  if (v47)
  {
    if (v47 != 1)
      goto LABEL_19;
    v50 = 5;
  }
  else
  {
    v50 = 0;
  }
  sub_1D4B4AE38((uint64_t)__p, v50);
LABEL_19:
  objc_msgSend_options(*(void **)(a1 + 32), v48, v49);
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  v54 = objc_msgSend_compressionBlockSize(v51, v52, v53);
  sub_1D4B4AD4C((uint64_t)__p, v54);

  objc_msgSend_options(*(void **)(a1 + 32), v55, v56);
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  v60 = objc_msgSend_stripeSize(v57, v58, v59);
  sub_1D4B4AD40((uint64_t)__p, v60);

  sub_1D4B4AD64((uint64_t)__p, 1024);
  v61 = sub_1D4B2A040();
  sub_1D4B4ADB8((uint64_t)__p, v61);
  sub_1D4B4ADA0((uint64_t)__p, 1.0);
  sub_1D4B4AD7C((uint64_t)__p, 0);
  if (!sub_1D4B4AE88((uint64_t)__p))
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v62, v63);
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v83, v84, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("CKXORCReaderWriter.mm"), 720, CFSTR("Expected dictionary to be enabled"));

  }
  if (sub_1D4B4AE7C((uint64_t)__p))
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v64, v65);
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v85, v86, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), CFSTR("CKXORCReaderWriter.mm"), 721, CFSTR("Expected indexes to be disabled"));

  }
  sub_1D4B4C420(v90, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), (uint64_t)__p, v87);
  v66 = *(_QWORD *)(a1 + 32);
  v67 = *(_QWORD *)v87;
  *(_QWORD *)v87 = 0;
  v68 = *(_QWORD *)(v66 + 16);
  *(_QWORD *)(v66 + 16) = v67;
  if (v68)
    (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  v69 = *(_QWORD *)v87;
  *(_QWORD *)v87 = 0;
  if (v69)
    (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  (*(void (**)(uint8_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 16) + 16))(v87, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), 0);
  v72 = *(_QWORD *)(a1 + 32);
  v73 = *(_QWORD *)v87;
  *(_QWORD *)v87 = 0;
  v74 = *(_QWORD *)(v72 + 32);
  *(_QWORD *)(v72 + 32) = v73;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  v75 = *(_QWORD *)v87;
  *(_QWORD *)v87 = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  objc_msgSend_helpers(*(void **)(a1 + 32), v70, v71, *(_QWORD *)v87);
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  v79 = objc_msgSend_rootColumn(*(void **)(a1 + 32), v77, v78);
  objc_msgSend_configureColumnsWithRootColumn_(v76, v80, v79);

  if (*MEMORY[0x1E0C95300] != -1)
    dispatch_once(MEMORY[0x1E0C95300], (dispatch_block_t)*MEMORY[0x1E0C952F8]);
  v81 = *MEMORY[0x1E0C952C0];
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0C952C0], OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v87 = 0;
    _os_log_debug_impl(&dword_1D4AFF000, v81, OS_LOG_TYPE_DEBUG, "Created ORC writer", v87, 2u);
  }
  sub_1D4B4AC8C((uint64_t)__p);
  result = v90;
  v90 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1D4BC7490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  void *v17;
  uint64_t v19;

  sub_1D4B4AC8C((uint64_t)&__p);
  v19 = a17;
  a17 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  _Unwind_Resume(a1);
}

void sub_1D4BC7644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BC765C(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  if (*(_QWORD *)(v3 + 24) > v2)
    v2 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = v2;
  return result;
}

void sub_1D4BC7924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4BC7B3C(_QWORD *result, void *lpsrc)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (lpsrc)
  {
    v2 = result;
    result = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846280, 0);
    if (result)
    {
      v3 = result[2];
      if (v3 < *(_QWORD *)(*(_QWORD *)(v2[4] + 32) + 16))
      {
        v4 = result[12];
        v5 = *(_QWORD *)(v4 + 8 * v3);
        v6 = v4 + 8;
        do
          *(_QWORD *)(v6 + 8 * v3++) = v5;
        while (v3 < *(_QWORD *)(*(_QWORD *)(v2[4] + 32) + 16));
      }
    }
  }
  return result;
}

uint64_t sub_1D4BC7BCC(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  id v22;
  const char *v23;
  uint64_t v24;
  char *v25;
  std::runtime_error *exception;
  std::string v28;

  objc_msgSend_options(*(void **)(a1 + 32), a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_testExceptionDuringCommitBatch(v4, v5, v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v10 = objc_msgSend_commitCount(*(void **)(a1 + 32), v7, v8);
    objc_msgSend_options(*(void **)(a1 + 32), v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend_testExceptionDuringCommitBatchCommitsToSkip(v13, v14, v15);

    if (v10 == v16)
    {
      objc_msgSend_options(*(void **)(a1 + 32), v17, v18);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_testExceptionDuringCommitBatch(v19, v20, v21);
      v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v25 = (char *)objc_msgSend_UTF8String(v22, v23, v24);
      sub_1D4BCA448(&v28, v25);

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_1D4B2D1D0(exception, &v28);
      __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
    }
  }
  else
  {

  }
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 16) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32));
}

void sub_1D4BC7CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4BC7D3C(int a1, void *lpsrc)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;

  if (lpsrc)
  {
    v2 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846450, 0);
    if (v2)
    {
      v3 = v2;
      if (v2[2])
      {
        v4 = 0;
        do
        {
          free(*(void **)(v3[12] + 8 * v4));
          *(_QWORD *)(v3[12] + 8 * v4++) = 0;
        }
        while (v4 < v3[2]);
      }
    }
  }
}

void sub_1D4BC7DB0(int a1, void *lpsrc)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;

  if (lpsrc)
  {
    v2 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846280, 0);
    if (v2)
    {
      v3 = 0;
      v4 = v2[12];
      do
        *(_QWORD *)(v4 + 8 * v3++) = 0;
      while (v3 <= v2[2]);
    }
  }
}

uint64_t sub_1D4BC7E04(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_resetColumnNulls_inRange_, a2);
}

void sub_1D4BC7EC0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC8114(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4BC8150(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v5;
  const char *v6;
  void *v7;
  const char *v8;

  v5 = a2[1];
  v6 = (const char *)a1[5];
  if (v5 > (unint64_t)v6)
  {
    objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v6, a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v7, v8, a1[6], a1[4], CFSTR("CKXORCReaderWriter.mm"), 868, CFSTR("Previous column capacity %llu unexpectedly greater than batch capacity %llu"), v5, a1[5]);

  }
  (*(void (**)(_QWORD *))(*a2 + 24))(a2);
  return MEMORY[0x1E0DE7D20](a1[4], sel_resetColumnNulls_inRange_, a2);
}

void sub_1D4BC81F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC82F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC86FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BC8768(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3 <= *(_QWORD *)(a2 + 16))
    v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v2 + 24) = v3;
  return result;
}

void sub_1D4BC89B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BC8B08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC8BF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC8E80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC8FDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC9028(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC920C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1D4BC953C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1D4BC96F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC98F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BC9C10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1D4BC9E28(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 16) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                                                                                                 + 16));
  v2 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1D4BC9F04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BCA010(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BCA120(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BCA214(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D4BCA404(_QWORD *result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = result[6];
  v5 = *(_QWORD *)(result[4] + 8);
  v6 = *(_QWORD *)(v5 + 24);
  if (v4 >= v6 + a3)
  {
    *(_QWORD *)(v5 + 24) = v6 + a3;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(result[5] + 8) + 24) = v4 + a2 - v6;
    *a4 = 1;
  }
  return result;
}

_QWORD *sub_1D4BCA448(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1D4B02588();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

_QWORD *sub_1D4BCA4F8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (a3)
  {
    v5 = 0;
    v6 = 8 * a3;
    v7 = a1;
    do
    {
      v8 = operator new(0x18uLL);
      v9 = *(_QWORD *)(a2 + 8 * v5);
      v8[1] = a1;
      v8[2] = v9;
      *v8 = v7;
      v7[1] = v8;
      *a1 = v8;
      a1[2] = ++v5;
      v7 = v8;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_1D4BCA574(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1D4B356D8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4BCA588(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;

  v3 = result;
  for (i = result[1]; i != a2; i -= 16)
  {
    v5 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    result = *(_QWORD **)(i - 16);
    *(_QWORD *)(i - 16) = 0;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  v3[1] = a2;
  return result;
}

void sub_1D4BCA5FC(_QWORD *a1)
{
  if (a1)
  {
    sub_1D4BCA5FC(*a1);
    sub_1D4BCA5FC(a1[1]);
    operator delete(a1);
  }
}

uint64_t *sub_1D4BCA634(uint64_t *result, unint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t *v16;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (!v5)
  {
    v10 = (uint64_t **)(result + 1);
    goto LABEL_15;
  }
  v8 = a2[1];
  v7 = a2[2];
  v9 = *a2;
  do
  {
    while (1)
    {
      v10 = (uint64_t **)v5;
      v11 = v5[5];
      if (v8 >= v11)
      {
        if (v8 > v11)
          goto LABEL_5;
        v12 = v10[6];
        if (v7 >= (unint64_t)v12)
          break;
      }
LABEL_10:
      v5 = *v10;
      v6 = v10;
      if (!*v10)
        goto LABEL_15;
    }
    if (v7 <= (unint64_t)v12)
    {
      v13 = v10[4];
      if (v9 < (unint64_t)v13)
        goto LABEL_10;
      if ((unint64_t)v13 >= v9)
        return result;
    }
LABEL_5:
    v5 = v10[1];
  }
  while (v5);
  v6 = v10 + 1;
LABEL_15:
  v14 = operator new(0x38uLL);
  v14[2] = *(_OWORD *)a3;
  *((_QWORD *)v14 + 6) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = v10;
  *v6 = (uint64_t *)v14;
  v15 = *(_QWORD *)*v4;
  if (v15)
  {
    *v4 = v15;
    v16 = *v6;
  }
  else
  {
    v16 = (uint64_t *)v14;
  }
  result = sub_1D4B298A8((uint64_t *)v4[1], v16);
  ++v4[2];
  return result;
}

void sub_1D4BCA780(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BCA898(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BCAA70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BCACD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BCB218(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1D4BCB44C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BCB484(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  _OWORD v9[2];

  objc_msgSend_backingStore(*(void **)(a1 + 32), a2, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(void **)(a1 + 32);
  if (v7)
    objc_msgSend_listInstance(v7, v4, v5);
  else
    memset(v9, 0, sizeof(v9));
  objc_msgSend_structProxyForListInstance_atIndex_(v6, v4, (uint64_t)v9, *(_QWORD *)(a1 + 56));
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  (*(void (**)(_QWORD, void *, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v8, *(_QWORD *)(a1 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
}

void sub_1D4BCB518(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BCB5A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BCB628(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BCB740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1D4BCB768(uint64_t a1, const char *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[2];

  objc_msgSend_backingStore(*(void **)(a1 + 32), a2, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = *(void **)(a1 + 32);
  if (v7)
    objc_msgSend_listInstance(v7, v4, v5);
  else
    memset(v18, 0, sizeof(v18));
  objc_msgSend_appendedStructProxyForListInstance_(v6, v4, (uint64_t)v18);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    v11 = *(void **)(a1 + 32);
    v12 = objc_msgSend_index(v11, v9, v10);
    objc_msgSend_setIndex_(v11, v13, v12 + 1);
    v14 = *(_QWORD *)(a1 + 40);
    v17 = objc_msgSend_index(*(void **)(a1 + 32), v15, v16);
    (*(void (**)(uint64_t, void *, uint64_t))(v14 + 16))(v14, v8, v17);
  }

}

void sub_1D4BCB814(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BCB8B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1D4BCBA04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1D4BCBB18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *sub_1D4BCBBB4(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v2)
            v7 %= *(_QWORD *)&v2;
        }
        else
        {
          v7 &= *(_QWORD *)&v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void sub_1D4BCBC64(id *a1)
{
  id *v1;
  id *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (id *)*v1;

      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

_QWORD *sub_1D4BCBCA0(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = a1 + 2;
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v5;
  i[2] = *a3;
  i[3] = 0;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v15 = 1;
  if (v7 >= 3)
    v15 = (v7 & (v7 - 1)) != 0;
  v16 = v15 | (2 * v7);
  v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17)
    prime = (int8x8_t)v17;
  else
    prime = (int8x8_t)v16;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = a1[1];
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      v25 = std::__next_prime(v25);
    }
    else
    {
      v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2)
        v25 = v27;
    }
    if (*(_QWORD *)&prime <= v25)
      prime = (int8x8_t)v25;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v34 = (void *)*a1;
      *a1 = 0;
      if (v34)
        operator delete(v34);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    sub_1D4B18174();
  v19 = operator new(8 * *(_QWORD *)&prime);
  v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20)
    operator delete(v20);
  v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(_QWORD *)(*a1 + 8 * v21++) = 0;
  while (*(_QWORD *)&prime != v21);
  v22 = (_QWORD *)*v12;
  if (*v12)
  {
    v23 = v22[1];
    v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(_QWORD *)&prime)
        v23 %= *(_QWORD *)&prime;
    }
    else
    {
      v23 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*a1 + 8 * v23) = v12;
    v28 = (_QWORD *)*v22;
    if (*v22)
    {
      do
      {
        v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(_QWORD *)&prime)
            v29 %= *(_QWORD *)&prime;
        }
        else
        {
          v29 &= *(_QWORD *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(_QWORD *)(*a1 + 8 * v29))
          {
            *(_QWORD *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *v22 = *v28;
          *v28 = **(_QWORD **)(*a1 + 8 * v29);
          **(_QWORD **)(*a1 + 8 * v29) = v28;
          v28 = v22;
        }
        v29 = v23;
LABEL_56:
        v22 = v28;
        v28 = (_QWORD *)*v28;
        v23 = v29;
      }
      while (v28);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v5);
  if (v31)
  {
    *i = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *i = *v12;
  *v12 = i;
  *(_QWORD *)(v30 + 8 * v5) = v12;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_1D4BCC078(_Unwind_Exception *a1)
{
  id *v1;

  sub_1D4BCC090(1, v1);
  _Unwind_Resume(a1);
}

void sub_1D4BCC090(char a1, id *a2)
{
  if (a1)
  {

  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

void sub_1D4BCC680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D4BCC698(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  CFIndex v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  id cf;

  cf = a2;
  if (objc_msgSend_scope(cf, v5, v6) == *(_QWORD *)(a1 + 48))
  {
    objc_msgSend_commit(cf, v7, v8);
    v9 = CFGetRetainCount(cf);
    v12 = *(void **)(a1 + 32);
    if (v9 > 2)
    {
      v14 = objc_msgSend_totalProxiesRetainedOutOfScope(*(void **)(a1 + 32), v10, v11);
      objc_msgSend_setTotalProxiesRetainedOutOfScope_(v12, v15, v14 + 1);
    }
    else
    {
      objc_msgSend__putBackProxyWithoutCheckingScope_(*(void **)(a1 + 32), v10, (uint64_t)cf);
    }
    objc_msgSend_addIndex_(*(void **)(a1 + 40), v13, a3);
  }

}

uint64_t sub_1D4BCC730(uint64_t result)
{
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

uint64_t sub_1D4BCCA64(int a1, Class aClass, objc_class *a3)
{
  void *v4;
  void *v5;
  const char *v6;
  uint64_t v7;

  NSStringFromClass(aClass);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  NSStringFromClass(a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend_compare_(v4, v6, (uint64_t)v5);

  return v7;
}

void sub_1D4BCCAC4(uint64_t a1, char *a2, uint64_t a3)
{
  void *v5;
  const char *v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  id v13;

  objc_msgSend_cachedProxies(*(void **)(a1 + 32), a2, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKey_(v5, v6, (uint64_t)a2);
  v13 = (id)objc_claimAutoreleasedReturnValue();

  v7 = *(void **)(a1 + 40);
  NSStringFromClass((Class)a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_count(v13, v9, v10);
  objc_msgSend_appendFormat_(v7, v12, (uint64_t)CFSTR("  %@: %lu\n"), v8, v11);

}

void sub_1D4BCCB50(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  const char *v24;
  id v25;

  v3 = (void *)MEMORY[0x1E0CB37E8];
  v4 = *(void **)(a1 + 32);
  v5 = a2;
  v8 = objc_msgSend_scope(v5, v6, v7);
  objc_msgSend_numberWithInteger_(v3, v9, v8);
  v25 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v4, v10, (uint64_t)v25);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend_integerValue(v11, v12, v13);
  objc_msgSend_numberWithInteger_(v3, v15, v14 + 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = *(void **)(a1 + 32);
  v18 = (void *)MEMORY[0x1E0CB37E8];
  v21 = objc_msgSend_scope(v5, v19, v20);

  objc_msgSend_numberWithInteger_(v18, v22, v21);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v17, v24, (uint64_t)v16, v23);

}

void sub_1D4BCCC28(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  id v9;

  v4 = *(void **)(a1 + 32);
  v9 = a2;
  v7 = objc_msgSend_integerValue(a3, v5, v6);
  objc_msgSend_appendFormat_(v4, v8, (uint64_t)CFSTR("  %@: %ld\n"), v9, v7);

}

void sub_1D4BCDA40(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  _QWORD *v11;
  _QWORD v12[4];

  v3 = a2;
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2020000000;
  v12[3] = 0;
  objc_msgSend_atoms(v3, v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_1D4BCDB24;
  v8[3] = &unk_1E984B948;
  v9 = *(id *)(a1 + 32);
  v10 = *(id *)(a1 + 40);
  v11 = v12;
  objc_msgSend_enumerate_(v6, v7, (uint64_t)v8);

  _Block_object_dispose(v12, 8);
}

void sub_1D4BCDB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D4BCDB24(uint64_t a1, void *a2)
{
  char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  char isEqual;
  char *v41;

  v3 = a2;
  v5 = *(void **)(a1 + 32);
  v41 = v3;
  if (!v5)
    goto LABEL_4;
  objc_msgSend_atomType(v5, v3, v4);
  v6 = objc_claimAutoreleasedReturnValue();
  v3 = v41;
  if (!v6)
    goto LABEL_4;
  v7 = (void *)v6;
  v8 = objc_msgSend_atomType(v41, v41, v4);
  objc_msgSend_atomType(*(void **)(a1 + 32), v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend_unsignedIntegerValue(v11, v12, v13);

  v3 = v41;
  if (v8 == v14)
  {
LABEL_4:
    objc_msgSend_timestamp(v3, v3, v4);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_distributedSiteIdentifier(v15, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_modifier(v18, v19, v20);
    v21 = objc_claimAutoreleasedReturnValue();
    if (v21)
    {
      v24 = (void *)v21;
      objc_msgSend_siteIdentifierModifier(*(void **)(a1 + 32), v22, v23);
      v25 = objc_claimAutoreleasedReturnValue();
      if (v25)
      {
        v28 = (void *)v25;
        objc_msgSend_timestamp(v41, v26, v27);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_distributedSiteIdentifier(v29, v30, v31);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_modifier(v32, v33, v34);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_siteIdentifierModifier(*(void **)(a1 + 32), v36, v37);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        isEqual = objc_msgSend_isEqual_(v35, v39, (uint64_t)v38);

        v3 = v41;
        if ((isEqual & 1) == 0)
          goto LABEL_11;
        goto LABEL_10;
      }

    }
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v3 = v41;
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  }
LABEL_11:

}

void sub_1D4BCDDDC(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  _QWORD v9[5];
  id v10;
  id v11;

  objc_msgSend_atoms(a2, (const char *)a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1D4BCDE74;
  v9[3] = &unk_1E984B998;
  v5 = *(id *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(a1 + 40);
  v11 = v5;
  v9[4] = v6;
  v10 = v7;
  objc_msgSend_appendWithProxyBlock_(v4, v8, (uint64_t)v9);

}

void sub_1D4BCDE74(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  id v9;

  v9 = a2;
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  if (objc_msgSend_formatVersion(*(void **)(a1 + 32), v3, v4) <= 2 && *(_QWORD *)(a1 + 40))
  {
    objc_msgSend_location(v9, v5, v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_copyFromMergeableValueID_(v7, v8, *(_QWORD *)(a1 + 40));

  }
}

void sub_1D4BCE32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4BCE358(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1D4BCE368(uint64_t a1)
{

}

void sub_1D4BCE370(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  int v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  void *v34;
  void *v35;
  const char *v36;
  int v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  void *v48;
  void *v49;
  void (**v50)(_QWORD, _QWORD, _QWORD);
  const char *v51;
  const char *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  const char *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  _QWORD v63[4];
  id v64;
  id v65;
  uint64_t v66;
  char v67;
  _QWORD v68[4];
  __int128 v69;
  uint64_t v70;

  v7 = a2;
  v68[0] = MEMORY[0x1E0C809B0];
  v68[1] = 3221225472;
  v68[2] = sub_1D4BCE748;
  v68[3] = &unk_1E984B9E8;
  v69 = *(_OWORD *)(a1 + 56);
  v70 = a4;
  v8 = (void (**)(_QWORD, _QWORD, _QWORD))MEMORY[0x1D8264B0C](v68);
  objc_msgSend_timestamp(v7, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_timestamp(v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_timestamp(v7, v15, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v18, (uint64_t)CFSTR("Atom %lu is missing timestamp"), a3);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, BOOL, void *))v8)[2](v8, v17 != 0, v19);

  v22 = *(unsigned __int8 *)(a1 + 72);
  if (v22 == 3)
  {
    objc_msgSend_timestamp(v7, v20, v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_distributedSiteIdentifier(v23, v29, v30);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_identifier(v26, v31, v32);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v33, (uint64_t)CFSTR("Atom %lu is missing site identifier"), a3);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, BOOL, void *))v8)[2](v8, v28 != 0, v34);

  }
  else
  {
    if (v22 != 2)
      goto LABEL_6;
    objc_msgSend_timestamp(v7, v20, v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_siteIdentifier(v23, v24, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v27, (uint64_t)CFSTR("Atom %lu is missing site identifier"), a3);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, BOOL, void *))v8)[2](v8, v26 != 0, v28);
  }

LABEL_6:
  objc_msgSend_contents(*(void **)(a1 + 32), v20, v21);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = objc_msgSend_atomStateForTimestamp_(v35, v36, (uint64_t)v14);

  v38 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend_contents(*(void **)(a1 + 32), v39, v40);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(v38, v42, (uint64_t)CFSTR("Timestamp %@ for atom %lu not included in contents vector %@"), v14, a3, v41);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  ((void (**)(_QWORD, BOOL, void *))v8)[2](v8, v37 != 0, v43);

  if (v37 == 3)
  {
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v44, (uint64_t)CFSTR("Atom %lu with timestamp %@ is marked as missing"), a3, v14);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, _QWORD, void *))v8)[2](v8, 0, v46);
  }
  else
  {
    if (v37 != 2)
      goto LABEL_11;
    objc_msgSend_value(v7, v44, v45);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v47, (uint64_t)CFSTR("Atom %lu with timestamp %@ is marked as tombstoned, but has value"), a3, v14);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, BOOL, void *))v8)[2](v8, v46 == 0, v48);

  }
LABEL_11:
  objc_msgSend_references(v7, v44, v45);
  v49 = (void *)objc_claimAutoreleasedReturnValue();
  v63[0] = MEMORY[0x1E0C809B0];
  v63[1] = 3221225472;
  v63[2] = sub_1D4BCE858;
  v63[3] = &unk_1E984BA10;
  v50 = v8;
  v65 = v50;
  v66 = a3;
  v67 = *(_BYTE *)(a1 + 72);
  v64 = *(id *)(a1 + 40);
  objc_msgSend_enumerate_(v49, v51, (uint64_t)v63);

  if (v14)
  {
    v54 = *(void **)(a1 + 48);
    v55 = (void *)MEMORY[0x1E0CB36B8];
    v56 = objc_msgSend_clockValue(v14, v52, v53);
    objc_msgSend_indexSetWithIndex_(v55, v57, v56);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_siteIdentifierObject(v14, v59, v60);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addClockValuesInIndexSet_forSiteIdentifier_(v54, v62, (uint64_t)v58, v61);

  }
}

void sub_1D4BCE748(uint64_t a1, char a2, void *a3)
{
  void *v4;
  void *v5;
  id v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) && (a2 & 1) == 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    v4 = (void *)MEMORY[0x1E0CB35C8];
    v13 = *MEMORY[0x1E0CB2D50];
    v14[0] = a3;
    v5 = (void *)MEMORY[0x1E0C99D80];
    v6 = a3;
    objc_msgSend_dictionaryWithObjects_forKeys_count_(v5, v7, (uint64_t)v14, &v13, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_errorWithDomain_code_userInfo_(v4, v9, (uint64_t)CFSTR("CKDSErrorDomain"), 3, v8);
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;

    **(_BYTE **)(a1 + 48) = 1;
  }
}

void sub_1D4BCE858(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  void *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  void *v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  void *v49;
  id v50;

  v50 = a2;
  objc_msgSend_timestamp(v50, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_timestamp(v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = *(_QWORD *)(a1 + 40);
  objc_msgSend_timestamp(v50, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v15, (uint64_t)CFSTR("Reference %lu in atom %lu is missing timestamp"), a3, *(_QWORD *)(a1 + 48));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, BOOL, void *))(v11 + 16))(v11, v14 != 0, v16);

  if (!(*(_QWORD *)(a1 + 48) | a3))
  {
    objc_msgSend_timestamp(v50, v17, v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_siteIdentifier(v19, v20, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (v22)
    {

    }
    else
    {
      objc_msgSend_timestamp(v50, v23, v24);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = objc_msgSend_clock(v25, v26, v27);

      if (!v28)
        goto LABEL_12;
    }
  }
  v29 = *(unsigned __int8 *)(a1 + 56);
  if (v29 == 3)
  {
    v37 = *(_QWORD *)(a1 + 40);
    objc_msgSend_timestamp(v50, v17, v18);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_distributedSiteIdentifier(v31, v38, v39);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_identifier(v34, v40, v41);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v42, (uint64_t)CFSTR("Reference %lu in atom %lu is missing site identifier"), a3, *(_QWORD *)(a1 + 48));
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, BOOL, void *))(v37 + 16))(v37, v36 != 0, v43);

  }
  else
  {
    if (v29 != 2)
      goto LABEL_10;
    v30 = *(_QWORD *)(a1 + 40);
    objc_msgSend_timestamp(v50, v17, v18);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_siteIdentifier(v31, v32, v33);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v35, (uint64_t)CFSTR("Reference %lu in atom %lu is missing site identifier"), a3, *(_QWORD *)(a1 + 48));
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, BOOL, void *))(v30 + 16))(v30, v34 != 0, v36);
  }

LABEL_10:
  objc_msgSend_location(v50, v17, v18);
  v44 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v44)
  {
    v46 = *(_QWORD *)(a1 + 40);
    v47 = objc_msgSend_includesTimestamp_(*(void **)(a1 + 32), v45, (uint64_t)v10);
    objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v48, (uint64_t)CFSTR("Timestamp %@ for reference %lu in atom %lu is not present in vectors"), v10, a3, *(_QWORD *)(a1 + 48));
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, uint64_t, void *))(v46 + 16))(v46, v47, v49);

  }
LABEL_12:

}

void sub_1D4BCEFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D4BCEFEC(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v4;
  id v5;
  _QWORD v6[5];

  objc_msgSend_atoms(a2, (const char *)a2, a3);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1D4BCF060;
  v6[3] = &unk_1E984BA60;
  v6[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend_enumerate_(v5, v4, (uint64_t)v6);

}

void sub_1D4BCF060(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  objc_msgSend_location(a2, (const char *)a2, a3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_mergeableValueID(v6, v7, v8);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  *a4 = 1;
}

void sub_1D4BCF334(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1D4BCF34C(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  id v6;

  objc_msgSend_atoms(a2, (const char *)a2, a3);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend_count(v6, v4, v5);

}

void sub_1D4BCF394(uint64_t a1, void *a2, uint64_t a3)
{
  const char *v4;
  uint64_t v5;
  id v6;

  objc_msgSend_atoms(a2, (const char *)a2, a3);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_msgSend_count(v6, v4, v5);

}

void sub_1D4BCF460(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  id v28;
  const char *v29;
  void *v30;
  void *v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  void *v40;
  const char *v41;
  id v42;

  v42 = a2;
  objc_msgSend_timestamp(v42, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_distributedSiteIdentifier(v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_identifier(v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v11;
  if (v11)
  {
    v15 = v11;
  }
  else
  {
    objc_msgSend_timestamp(v42, v12, v13);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_siteIdentifier(v16, v17, v18);
    v15 = (id)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend_timestamp(v42, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_distributedSiteIdentifier(v21, v22, v23);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_modifier(v24, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  v28 = objc_alloc(MEMORY[0x1E0C94CF8]);
  v30 = (void *)objc_msgSend_initWithIdentifier_modifier_(v28, v29, (uint64_t)v15, v27);
  v31 = *(void **)(a1 + 32);
  v32 = (void *)MEMORY[0x1E0CB36B8];
  objc_msgSend_timestamp(v42, v33, v34);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = objc_msgSend_clock(v35, v36, v37);
  objc_msgSend_indexSetWithIndex_(v32, v39, v38);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addClockValuesInIndexSet_withAtomState_forSiteIdentifier_(v31, v41, (uint64_t)v40, 1, v30);

}

void sub_1D4BCF950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v15;
  va_list va;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v15 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1D4BCF980(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void **v22;
  void *v23;
  BOOL v24;
  char isEqual;
  uint64_t v26;
  id v27;
  void *v28;
  void *v29;
  void *v30;
  const char *v31;
  const char *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  void (**v51)(_QWORD, _QWORD);
  const char *v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  id v56;
  _QWORD v57[4];
  id v58;

  v5 = a2;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  v56 = v5;
  objc_msgSend_timestamp(v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_timestamp(v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (*(_BYTE *)(a1 + 72))
    objc_msgSend_descriptionWithStringSiteIdentifiers(v11, v12, v13);
  else
    objc_msgSend_description(v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_mergeableValueID(*(void **)(a1 + 32), v15, v16);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v23 = *(void **)(v20 + 40);
  v22 = (void **)(v20 + 40);
  v21 = v23;
  if (v23)
    v24 = v19 == 0;
  else
    v24 = 1;
  if (v24)
  {
    if (v21 == v19)
      goto LABEL_12;
LABEL_16:
    v27 = v19;
    v28 = *v22;
    *v22 = v19;

    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
    if (a3)
      objc_msgSend_appendFormat_(*(void **)(a1 + 40), v17, (uint64_t)CFSTR("\n  },\n"));
    goto LABEL_19;
  }
  isEqual = objc_msgSend_isEqual_(v21, v17, (uint64_t)v19);
  if ((isEqual & 1) == 0)
  {
    v22 = (void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    goto LABEL_16;
  }
LABEL_12:
  v26 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  if (!a3)
  {
    *(_QWORD *)(v26 + 24) = 0;
LABEL_19:
    v29 = *(void **)(a1 + 40);
    objc_msgSend_name(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v17, v18);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_appendFormat_(v29, v31, (uint64_t)CFSTR("  ValueID %@ {\n"), v30);

    goto LABEL_20;
  }
  if (*(_QWORD *)(v26 + 24))
    objc_msgSend_appendFormat_(*(void **)(a1 + 40), v17, (uint64_t)CFSTR(",\n"));
LABEL_20:
  objc_msgSend_appendFormat_(*(void **)(a1 + 40), v17, (uint64_t)CFSTR("    Atom {\n"));
  objc_msgSend_appendFormat_(*(void **)(a1 + 40), v32, (uint64_t)CFSTR("      Timestamp: %@\n"), v14);
  v33 = *(void **)(a1 + 40);
  v36 = objc_msgSend_atomType(v56, v34, v35);
  objc_msgSend_appendFormat_(v33, v37, (uint64_t)CFSTR("      Type: %lu\n"), v36);
  objc_msgSend_references(v56, v38, v39);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v57[0] = MEMORY[0x1E0C809B0];
  v57[1] = 3221225472;
  v57[2] = sub_1D4BCFC64;
  v57[3] = &unk_1E984BB00;
  v58 = *(id *)(a1 + 40);
  objc_msgSend_enumerate_(v40, v41, (uint64_t)v57);

  objc_msgSend_value(v56, v42, v43);
  v44 = (void *)objc_claimAutoreleasedReturnValue();

  if (v44)
  {
    objc_msgSend_atomValueDescriptionBlock(*(void **)(a1 + 32), v45, v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();

    v50 = *(void **)(a1 + 40);
    if (v47)
    {
      objc_msgSend_atomValueDescriptionBlock(*(void **)(a1 + 32), v48, v49);
      v51 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      ((void (**)(_QWORD, id))v51)[2](v51, v56);
    }
    else
    {
      objc_msgSend_value(v56, v48, v49);
      v51 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      objc_msgSend_description(v51, v52, v53);
    }
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_appendFormat_(v50, v55, (uint64_t)CFSTR("      Value: %@\n"), v54);

  }
  objc_msgSend_appendFormat_(*(void **)(a1 + 40), v45, (uint64_t)CFSTR("    }"));
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);

}

void sub_1D4BCFC64(uint64_t a1, void *a2, uint64_t a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  id v9;

  v4 = *(void **)(a1 + 32);
  objc_msgSend_timestamp(a2, (const char *)a2, a3);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_timestamp(v9, v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appendFormat_(v4, v8, (uint64_t)CFSTR("      Reference %lu: %@\n"), a3, v7);

}

void sub_1D4BD02A4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v3 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D4BD033C;
  v7[3] = &unk_1E984BB50;
  v8 = v3;
  v4 = *(void **)(a1 + 32);
  v9 = *(id *)(a1 + 40);
  v6 = v3;
  objc_msgSend_appendAtomWithBlock_(v4, v5, (uint64_t)v7);

}

void sub_1D4BD033C(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  id v9;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = a2;
  objc_msgSend_copyFromReadProxy_(v4, v5, v3);
  objc_msgSend_location(v4, v6, v7);
  v9 = (id)objc_claimAutoreleasedReturnValue();

  objc_msgSend_copyFromMergeableValueID_(v9, v8, *(_QWORD *)(a1 + 40));
}

void sub_1D4BD088C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  const char *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_1D4BD0908;
  v7[3] = &unk_1E984BBA0;
  v8 = v3;
  v6 = v3;
  objc_msgSend_appendAtomWithBlock_(v4, v5, (uint64_t)v7);

}

uint64_t sub_1D4BD0908(uint64_t a1, void *a2)
{
  return objc_msgSend_copyFromReadProxy_(a2, (const char *)a2, *(_QWORD *)(a1 + 32));
}

uint64_t sub_1D4BD09C4(uint64_t a1, const char *a2)
{
  return objc_msgSend_addObject_(*(void **)(a1 + 32), a2, (uint64_t)a2);
}

void sub_1D4BD13E0(uint64_t a1, void *a2, unint64_t a3)
{
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  const char *v9;
  id v10;
  _QWORD v11[4];
  id v12;
  id v13;

  v5 = a2;
  v6 = 40;
  if (a3 < *(_QWORD *)(a1 + 48) >> 1)
    v6 = 32;
  v7 = *(id *)(a1 + v6);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1D4BD1498;
  v11[3] = &unk_1E984BB50;
  v12 = v5;
  v13 = v7;
  v8 = v7;
  v10 = v5;
  objc_msgSend_appendAtomWithBlock_(v8, v9, (uint64_t)v11);

}

void sub_1D4BD1498(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  id v27;
  const char *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  void *v44;
  const char *v45;
  id v46;

  objc_msgSend_copyFromReadProxy_(a2, (const char *)a2, *(_QWORD *)(a1 + 32));
  objc_msgSend_timestamp(*(void **)(a1 + 32), v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_distributedSiteIdentifier(v5, v6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_identifier(v8, v9, v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v11;
  if (v11)
  {
    v46 = v11;
  }
  else
  {
    objc_msgSend_timestamp(*(void **)(a1 + 32), v12, v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_siteIdentifier(v15, v16, v17);
    v46 = (id)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend_timestamp(*(void **)(a1 + 32), v18, v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_distributedSiteIdentifier(v20, v21, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_modifier(v23, v24, v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();

  v27 = objc_alloc(MEMORY[0x1E0C94CF8]);
  v29 = (void *)objc_msgSend_initWithIdentifier_modifier_(v27, v28, (uint64_t)v46, v26);
  objc_msgSend_vectors(*(void **)(a1 + 40), v30, v31);
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_contents(v32, v33, v34);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  v36 = (void *)MEMORY[0x1E0CB36B8];
  objc_msgSend_timestamp(*(void **)(a1 + 32), v37, v38);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v42 = objc_msgSend_clock(v39, v40, v41);
  objc_msgSend_indexSetWithIndex_(v36, v43, v42);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addClockValuesInIndexSet_withAtomState_forSiteIdentifier_(v35, v45, (uint64_t)v44, 1, v29);

}

