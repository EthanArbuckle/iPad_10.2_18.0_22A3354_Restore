uint64_t sub_1D4B014C0()
{
  dword_1ECD31790 = 0;
  qword_1ECD317A0 = 0;
  unk_1ECD317A8 = 0;
  qword_1ECD31798 = 0;
  __cxa_atexit((void (*)(void *))sub_1D4BB3030, &dword_1ECD31790, &dword_1D4AFF000);
  sub_1D4B0156C((uint64_t)&unk_1ECD317D0, 1, "", 0);
  __cxa_atexit((void (*)(void *))sub_1D4BB3030, &unk_1ECD317D0, &dword_1D4AFF000);
  sub_1D4B0156C((uint64_t)&unk_1ECD317B0, 2, "", 0);
  return __cxa_atexit((void (*)(void *))sub_1D4BB3030, &unk_1ECD317B0, &dword_1D4AFF000);
}

uint64_t sub_1D4B0156C(uint64_t a1, int a2, void *__src, size_t __len)
{
  uint64_t v5;
  __int128 __dst;
  uint64_t v8;

  *(_DWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (a2)
  {
    if (__src)
    {
      sub_1D4B180CC(&__dst, __src, __len);
      if (*(char *)(a1 + 31) < 0)
        operator delete(*(void **)v5);
    }
    else
    {
      __dst = 0uLL;
      v8 = 0;
    }
    *(_OWORD *)v5 = __dst;
    *(_QWORD *)(v5 + 16) = v8;
  }
  return a1;
}

void sub_1D4B015F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4B0160C()
{
  __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &unk_1EFEC5E28, &dword_1D4AFF000);
  qword_1ECD31788 = 0;
  qword_1ECD31780 = 0;
  qword_1ECD31778 = (uint64_t)&qword_1ECD31780;
  return __cxa_atexit((void (*)(void *))sub_1D4B42890, &qword_1ECD31778, &dword_1D4AFF000);
}

uint64_t sub_1D4B01668(unsigned __int8 *a1, char *__dst, int a3, int a4)
{
  uint64_t v4;
  unsigned __int16 *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unsigned __int8 *v11;
  char *v12;
  unint64_t v13;
  _OWORD *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char *v20;
  unsigned __int16 *v21;
  uint64_t v23;
  unsigned __int8 *v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v31;
  int v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  _DWORD *v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;

  v4 = 0xFFFFFFFFLL;
  if (!a1 || a4 < 0)
    return v4;
  if (!a4)
  {
    if (a3 == 1)
    {
      if (*a1)
        return 0xFFFFFFFFLL;
      else
        return 0;
    }
    return v4;
  }
  if (!a3)
    return v4;
  v6 = (unsigned __int16 *)&a1[a3];
  v7 = &__dst[a4];
  v8 = (unint64_t)v6 - 15;
  v9 = v7 - 12;
  v10 = v7 - 7;
  v11 = a1;
  v12 = __dst;
  while (1)
  {
    while (1)
    {
      v14 = v11 + 1;
      v13 = *v11;
      v15 = v13 >> 4;
      if ((v13 >> 4) == 15)
        break;
      if (v14 >= (_OWORD *)v6 - 1 || v12 > v7 - 32)
      {
        ++v11;
        goto LABEL_13;
      }
      *(_OWORD *)v12 = *v14;
      v20 = &v12[v15];
      v28 = v13 & 0xF;
      v11 = (unsigned __int8 *)v14 + v15 + 2;
      v25 = *(unsigned __int16 *)((char *)v14 + v15);
      v27 = (unint64_t)&v20[-v25];
      if ((_DWORD)v28 == 15 || v25 < 8 || v27 < (unint64_t)__dst)
      {
        v24 = v11;
        goto LABEL_29;
      }
      *(_QWORD *)v20 = *(_QWORD *)v27;
      *((_QWORD *)v20 + 1) = *(_QWORD *)(v27 + 8);
      *((_WORD *)v20 + 8) = *(_WORD *)(v27 + 16);
      v12 = &v20[v28 + 4];
    }
    if ((unint64_t)v14 >= v8)
    {
      LODWORD(v11) = (_DWORD)v11 + 1;
      return (~(_DWORD)v11 + (_DWORD)a1);
    }
    LODWORD(v16) = 0;
    v17 = (uint64_t)(v11 + 2);
    ++v11;
    do
    {
      v19 = *v11++;
      v18 = v19;
      v16 = (v16 + v19);
      ++v17;
    }
    while ((unint64_t)v11 < v8 && v18 == 255);
    v15 = v16 + 15;
    if (__CFADD__(v12, v15) || v15 > -v17)
      return (~(_DWORD)v11 + (_DWORD)a1);
LABEL_13:
    v20 = &v12[v15];
    v21 = (unsigned __int16 *)&v11[v15];
    if (&v12[v15] > v9 || v21 > v6 - 4)
      break;
    do
    {
      v23 = *(_QWORD *)v11;
      v11 += 8;
      *(_QWORD *)v12 = v23;
      v12 += 8;
    }
    while (v12 < v20);
    v26 = *v21;
    v24 = (unsigned __int8 *)(v21 + 1);
    v25 = v26;
    v27 = (unint64_t)&v20[-v26];
    v28 = v13 & 0xF;
LABEL_29:
    if (v28 == 15)
    {
      LODWORD(v31) = 0;
      while (1)
      {
        v11 = v24 + 1;
        if (v24 + 1 >= (unsigned __int8 *)v6 - 4)
          return (~(_DWORD)v11 + (_DWORD)a1);
        v32 = *v24;
        v31 = (v31 + v32);
        ++v24;
        if (v32 != 255)
        {
          v28 = v31 + 15;
          if (__CFADD__(v20, v28))
            return (~(_DWORD)v11 + (_DWORD)a1);
          goto LABEL_37;
        }
      }
    }
    v11 = v24;
LABEL_37:
    if (v27 < (unint64_t)__dst)
      return (~(_DWORD)v11 + (_DWORD)a1);
    if (v25 <= 7)
    {
      *(_DWORD *)v20 = 0;
      *v20 = *(_BYTE *)v27;
      v20[1] = *(_BYTE *)(v27 + 1);
      v20[2] = *(_BYTE *)(v27 + 2);
      v20[3] = *(_BYTE *)(v27 + 3);
      v39 = (_DWORD *)(v27 + dword_1D4BD3EF4[v25]);
      *((_DWORD *)v20 + 1) = *v39;
      v33 = (char *)v39 - dword_1D4BD3F14[v25];
    }
    else
    {
      v34 = *(_QWORD *)v27;
      v33 = (char *)(v27 + 8);
      *(_QWORD *)v20 = v34;
    }
    v12 = &v20[v28 + 4];
    v35 = v20 + 8;
    if (v12 > v9)
    {
      if (v12 > v7 - 5)
        return (~(_DWORD)v11 + (_DWORD)a1);
      if (v35 < v10)
      {
        v40 = v20 + 8;
        v41 = (uint64_t *)v33;
        do
        {
          v42 = *v41++;
          *(_QWORD *)v40 = v42;
          v40 += 8;
        }
        while (v40 < v10);
        v33 += v10 - v35;
        v35 = v7 - 7;
      }
      while (v35 < v12)
      {
        v43 = *v33++;
        *v35++ = v43;
      }
    }
    else
    {
      *(_QWORD *)v35 = *(_QWORD *)v33;
      if (v28 >= 0xD)
      {
        v36 = v20 + 16;
        v37 = (uint64_t *)(v33 + 8);
        do
        {
          v38 = *v37++;
          *(_QWORD *)v36 = v38;
          v36 += 8;
        }
        while (v36 < v12);
      }
    }
  }
  if (v21 == v6 && v20 <= v7)
  {
    memmove(v12, v11, v15);
    return ((_DWORD)v20 - (_DWORD)__dst);
  }
  return (~(_DWORD)v11 + (_DWORD)a1);
}

_QWORD *sub_1D4B01948(_QWORD *a1, char *a2)
{
  char *v3;
  int v4;
  const std::locale::facet *v5;
  int v6;
  std::locale v8;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v8, MEMORY[0x1E0DE4A90]);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_1D4B019D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B019E8(_QWORD *result, uint64_t a2)
{
  *result = *(_QWORD *)(a2 + 8);
  return result;
}

uint64_t sub_1D4B019F4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  *(_QWORD *)a1 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  return v1;
}

_QWORD *sub_1D4B01A14(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *result = &off_1E9849240;
  result[1] = a2;
  result[2] = a3;
  result[3] = 0;
  if (a4)
    v4 = a4;
  else
    v4 = a3;
  result[4] = v4;
  return result;
}

BOOL sub_1D4B01A34(_QWORD *a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  _BOOL8 result;

  v3 = a1[3];
  v4 = a1[2] - v3;
  if (a1[4] < v4)
    v4 = a1[4];
  if (v4)
  {
    *a2 = a1[1] + v3;
    a1[3] = v4 + v3;
    v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  result = v4 != 0;
  *a3 = v5;
  return result;
}

uint64_t sub_1D4B01A7C(uint64_t result, unsigned int a2)
{
  unint64_t v2;
  std::logic_error *exception;

  if ((a2 & 0x80000000) == 0)
  {
    if (*(_QWORD *)(result + 32) < (unint64_t)a2 || (v2 = *(_QWORD *)(result + 24), v2 < a2))
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Can't backup that much!");
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    *(_QWORD *)(result + 24) = v2 - a2;
  }
  return result;
}

void sub_1D4B01AE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1D4B01AFC(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;

  if ((a2 & 0x80000000) != 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24) + a2;
  v4 = v3 >= v2;
  v5 = v3 == v2;
  if (v3 >= v2)
    v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  return v5 || !v4;
}

uint64_t sub_1D4B01B28(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_1D4B01B30(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  *(_QWORD *)a2 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  *(_QWORD *)(result + 24) = v2;
  return result;
}

uint64_t sub_1D4B01B44()
{
  _QWORD *v0;
  _QWORD v2[11];
  char v3;
  uint64_t v4;

  sub_1D4B01C34((uint64_t)v2);
  sub_1D4B02240(v2, (uint64_t)"SeekableArrayInputStream ", 25);
  v0 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v0, (uint64_t)" of ", 4);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v2[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v3 < 0)
    operator delete((void *)v2[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v4);
}

void sub_1D4B01C20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B01D20((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B01C34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1D4B01CF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1D82646E0](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B01D20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1D82646E0](a1 + 112);
  return a1;
}

_QWORD *sub_1D4B01DA4(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  *a1 = &off_1E9848FA8;
  a1[1] = a5;
  a1[2] = a2;
  a1[3] = a3;
  v8 = 0x40000;
  if (a6)
    v8 = a6;
  if (v8 >= a4)
    v8 = a4;
  a1[4] = a4;
  a1[5] = v8;
  a1[6] = 0;
  v9 = a1 + 6;
  a1[7] = 0;
  v10 = operator new(0x28uLL);
  sub_1D4B2EFDC(v10, a5, 0);
  v11 = *v9;
  *v9 = (uint64_t)v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  a1[8] = 0;
  return a1;
}

void sub_1D4B01E38(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t *v2;
  uint64_t v4;

  operator delete(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B01E74(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E9848FA8;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1D4B01EB8(_QWORD *__p)
{
  uint64_t v2;

  *__p = &off_1E9848FA8;
  v2 = __p[6];
  __p[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

BOOL sub_1D4B01EFC(uint64_t a1, unint64_t *a2, _DWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a1 + 64);
  if (v6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16) + *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) - v6;
LABEL_8:
    *a2 = v7;
    goto LABEL_9;
  }
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  if (v8 >= *(_QWORD *)(a1 + 32) - v10)
    v6 = *(_QWORD *)(a1 + 32) - v10;
  else
    v6 = *(_QWORD *)(a1 + 40);
  sub_1D4B2EF9C(v9, v6);
  if (v6)
  {
    (*(void (**)(_QWORD, _QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16), v6, *(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 24));
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
    goto LABEL_8;
  }
LABEL_9:
  *(_QWORD *)(a1 + 56) += v6;
  *(_QWORD *)(a1 + 64) = 0;
  *a3 = v6;
  return v6 != 0;
}

_QWORD *sub_1D4B01FA8(_QWORD *result, unsigned int a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  std::logic_error *exception;

  if ((a2 & 0x80000000) != 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "can't backup negative distances");
    goto LABEL_10;
  }
  if (result[8])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "can't backup unless we just called Next");
LABEL_10:
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  if (result[5] < (unint64_t)a2 || (v2 = result[7], v3 = v2 >= a2, v4 = v2 - a2, !v3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "can't backup that far");
    goto LABEL_10;
  }
  result[7] = v4;
  result[8] = a2;
  return result;
}

void sub_1D4B02054(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1D4B02070(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;

  if ((a2 & 0x80000000) != 0)
    return 0;
  v2 = a1[7] + a2;
  v3 = a1[4];
  v4 = v3 >= v2;
  v5 = v3 == v2;
  if (v3 < v2)
    v2 = a1[4];
  a1[7] = v2;
  a1[8] = 0;
  return !v5 && v4;
}

uint64_t sub_1D4B0209C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

_QWORD *sub_1D4B020A4(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  std::logic_error *exception;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  *(_QWORD *)a2 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  result[7] = v2;
  v3 = result[4];
  if (v2 > v3)
  {
    result[7] = v3;
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "seek too far");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  result[8] = 0;
  return result;
}

void sub_1D4B02110(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B02124(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  sub_1D4B01C34((uint64_t)v9);
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
  v3 = *(char *)(v2 + 23);
  if (v3 >= 0)
    v4 = v2;
  else
    v4 = *(_QWORD *)v2;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(v2 + 23);
  else
    v5 = *(_QWORD *)(v2 + 8);
  v6 = sub_1D4B02240(v9, v4, v5);
  sub_1D4B02240(v6, (uint64_t)" from ", 6);
  v7 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v7, (uint64_t)" for ", 5);
  std::ostream::operator<<();
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v11);
}

void sub_1D4B0222C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B01D20((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B02240(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1D82645CC](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_1D4B023A4(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1D82645D8](v13);
  return a1;
}

void sub_1D4B02348(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1D82645D8](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1D4B02328);
}

void sub_1D4B02390(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B023A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      sub_1D4B024E0(__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_1D4B024C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4B024E0(_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_1D4B02588();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void sub_1D4B02588()
{
  sub_1D4B0259C("basic_string");
}

void sub_1D4B0259C(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1D4B025EC(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E9845878, MEMORY[0x1E0DE42D0]);
}

void sub_1D4B025D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1D4B025EC(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

_QWORD *sub_1D4B02610(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;

  *a1 = &off_1E9848730;
  a1[1] = a3;
  a1[2] = 0;
  a1[3] = a5;
  v8 = operator new(0x28uLL);
  sub_1D4B2EFDC(v8, a2, 0);
  v9 = a1[2];
  a1[2] = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v8 = (_QWORD *)a1[2];
  }
  sub_1D4B2F048((uint64_t)v8, a4);
  return a1;
}

void sub_1D4B02690(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v4;

  operator delete(v2);
  v4 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B026C8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E9848730;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

_QWORD *sub_1D4B0270C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E9848730;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1D4B02750(_QWORD *__p)
{
  uint64_t v2;

  *__p = &off_1E9848730;
  v2 = __p[2];
  __p[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

uint64_t sub_1D4B02794(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v5 = 0;
  v8 = a1 + 16;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v8 + 8);
  *a3 = v7;
  v9 = *(_QWORD *)(v6 + 24);
  v10 = v9 + v7;
  do
    v5 += *(_QWORD *)(v6 + 32);
  while (v5 < v10);
  sub_1D4B2F048(v6, v5);
  sub_1D4B2EF9C(*(_QWORD *)(a1 + 16), v10);
  *a2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) + v9;
  return 1;
}

void sub_1D4B02800(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;
  std::logic_error *exception;

  if ((a2 & 0x80000000) == 0)
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = *(_QWORD *)(v2 + 24);
    if (v3 < a2)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Can't backup that much!");
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    sub_1D4B2EF9C(v2, v3 - a2);
  }
}

void sub_1D4B02870(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B02884(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
}

void sub_1D4B02890()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1D4B2D198(exception, "WriteAliasedRaw is not supported.");
  __cxa_throw(exception, (struct type_info *)&unk_1E9846428, (void (*)(void *))std::logic_error::~logic_error);
}

void sub_1D4B028CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B028E0()
{
  return 0;
}

uint64_t sub_1D4B028E8()
{
  _QWORD *v0;
  _QWORD v2[11];
  char v3;
  uint64_t v4;

  sub_1D4B01C34((uint64_t)v2);
  sub_1D4B02240(v2, (uint64_t)"BufferedOutputStream ", 21);
  v0 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v0, (uint64_t)" of ", 4);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v2[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v3 < 0)
    operator delete((void *)v2[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v4);
}

void sub_1D4B029CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B01D20((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B029E0(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
}

uint64_t sub_1D4B029EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), *(_QWORD *)(v2 + 16), v3);
  sub_1D4B2EF9C(*(_QWORD *)(a1 + 16), 0);
  return v3;
}

char *sub_1D4B02A30(char *result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  int *v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  size_t v12;
  std::logic_error *exception;

  if (a3)
  {
    v3 = a3;
    v5 = result;
    v6 = 0;
    v7 = (int *)(result + 20);
    v8 = result + 8;
    v9 = *((_DWORD *)result + 4);
    do
    {
      v10 = *v7;
      if (v9 == *v7)
      {
        if (((*(uint64_t (**)(_QWORD, char *, int *))(*(_QWORD *)*v5 + 16))(*v5, v8, v7) & 1) == 0)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Failed to allocate buffer.");
          __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
        v9 = 0;
        *((_DWORD *)v5 + 4) = 0;
        v10 = *((_DWORD *)v5 + 5);
      }
      v11 = v10 - v9;
      if (v3 >= v11)
        v12 = v11;
      else
        v12 = v3;
      result = (char *)memcpy((void *)(v5[1] + v9), (const void *)(a2 + v6), v12);
      v9 = *((_DWORD *)v5 + 4) + v12;
      *((_DWORD *)v5 + 4) = v9;
      v6 += v12;
      v3 -= v12;
    }
    while (v3);
  }
  return result;
}

void sub_1D4B02B20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B02B34(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 64))(*a1);
}

uint64_t sub_1D4B02B44(_QWORD *a1)
{
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 24))(*a1, (*((_DWORD *)a1 + 5) - *((_DWORD *)a1 + 4)));
  a1[1] = 0;
  a1[2] = 0;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 72))(*a1);
}

uint64_t sub_1D4B02B88(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)a1 + 64))(*(_QWORD *)a1);
  v5 = a1[4];
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)a1 + 80))(*(_QWORD *)a1))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v4);
  else
    v5 = v4 + v5 - a1[5];
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5);
}

uint64_t sub_1D4B02C10()
{
  return 0;
}

void sub_1D4B02C18()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B0367C(qword_1EFEC6868);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)qword_1EFEC6868);
}

void sub_1D4B02C68()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B03C80(qword_1EFEC6728);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)qword_1EFEC6728);
}

void sub_1D4B02CB8()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B04210(qword_1EFEC6758);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)qword_1EFEC6758);
}

void sub_1D4B02D08()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B04CA8((uint64_t)&unk_1EFEC6680);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)&unk_1EFEC6680);
}

void sub_1D4B02D58()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B05578(qword_1EFEC67F0);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)qword_1EFEC67F0);
}

void sub_1D4B02DA8()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B05DDC(qword_1EFEC6640);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)qword_1EFEC6640);
}

void sub_1D4B02DF8()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B06318((uint64_t)&unk_1EFEC68F8);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)&unk_1EFEC68F8);
}

void sub_1D4B02E48()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B06B6C(qword_1EFEC6660);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)qword_1EFEC6660);
}

void sub_1D4B02E98()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B06FB4(qword_1EFEC6938);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)qword_1EFEC6938);
}

void sub_1D4B02EE8()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B07514((uint64_t)&unk_1EFEC66B0);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)&unk_1EFEC66B0);
  qword_1EFEC66C8 = (uint64_t)qword_1EFEC6868;
  unk_1EFEC66D0 = qword_1EFEC6728;
  qword_1EFEC66D8 = (uint64_t)qword_1EFEC6758;
  unk_1EFEC66E0 = &unk_1EFEC6680;
  qword_1EFEC66E8 = (uint64_t)qword_1EFEC67F0;
  unk_1EFEC66F0 = qword_1EFEC6640;
  qword_1EFEC66F8 = (uint64_t)qword_1EFEC6660;
  unk_1EFEC6700 = &unk_1EFEC68F8;
  qword_1EFEC6708 = (uint64_t)qword_1EFEC6938;
}

void sub_1D4B02F98()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B08A28((uint64_t)&unk_1EFEC69B0);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)&unk_1EFEC69B0);
  qword_1EFEC69E0 = (uint64_t)&unk_1EFEC66B0;
}

void sub_1D4B02FF8()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B09240((uint64_t)&unk_1EFEC69E8);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)&unk_1EFEC69E8);
}

void sub_1D4B03048()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B09800((uint64_t)&unk_1EFEC6A18);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)&unk_1EFEC6A18);
}

void sub_1D4B03098()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B0A194((uint64_t)&unk_1EFEC6A50);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)&unk_1EFEC6A50);
}

void sub_1D4B030E8()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B0A71C(qword_1EFEC63F0);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)qword_1EFEC63F0);
}

void sub_1D4B03138()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B0AEC8((uint64_t)&unk_1EFEC6618);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)&unk_1EFEC6618);
}

void sub_1D4B03188()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B0B688((uint64_t)&unk_1EFEC6968);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)&unk_1EFEC6968);
}

void sub_1D4B031D8()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B0BE3C((uint64_t)&unk_1EFEC6588);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)&unk_1EFEC6588);
}

void sub_1D4B03228()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B0CB18(qword_1EFEC6560);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)qword_1EFEC6560);
}

void sub_1D4B03278()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B0D13C((uint64_t)&unk_1EFEC62D8);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)&unk_1EFEC62D8);
}

void sub_1D4B032C8()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B0E1A0((uint64_t)&unk_1EFEC6898);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)&unk_1EFEC6898);
}

void sub_1D4B03318()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B0EC88(qword_1EFEC67C8);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)qword_1EFEC67C8);
}

void sub_1D4B03368()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B0F144((uint64_t)&unk_1EFEC6798);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)&unk_1EFEC6798);
}

void sub_1D4B033B8()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B0F6C8((uint64_t)&unk_1EFEC6468);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)&unk_1EFEC6468);
}

void sub_1D4B03408()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B0FC50((uint64_t)&unk_1EFEC6418);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)&unk_1EFEC6418);
}

void sub_1D4B03458()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B10694(qword_1EFEC65F0);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)qword_1EFEC65F0);
}

void sub_1D4B034A8()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B10DB0((uint64_t)&unk_1EFEC6820);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)&unk_1EFEC6820);
}

void sub_1D4B034F8()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B117C4((uint64_t)&unk_1EFEC6498);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)&unk_1EFEC6498);
}

void sub_1D4B03548()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B12560((uint64_t)&unk_1EFEC6348);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)&unk_1EFEC6348);
  qword_1EFEC63C0 = (uint64_t)&unk_1EFEC6498;
}

void sub_1D4B035A8()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B13ACC((uint64_t)&unk_1EFEC6500);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)&unk_1EFEC6500);
}

void sub_1D4B035F8()
{
  sub_1D4BB2510(3006001, 3006001, "/Library/Caches/com.apple.xbs/Binaries/CloudKit/install/TempContent/Objects/CloudKit.build/ORC.build/DerivedSources/cmake/c++/src/orc_proto.pb.cc");
  sub_1D4B1493C((uint64_t)&unk_1EFEC6A80);
  sub_1D4BB2D9C((uint64_t)sub_1D4BAD680, (uint64_t)&unk_1EFEC6A80);
  qword_1EFEC6A98 = (uint64_t)&unk_1EFEC6500;
  unk_1EFEC6AA0 = &unk_1EFEC6348;
}

BOOL sub_1D4B03660(unsigned int a1)
{
  return a1 < 0xB || a1 - 100 < 2;
}

_QWORD *sub_1D4B0367C(_QWORD *a1)
{
  *a1 = off_1E984A5B8;
  a1[1] = 0;
  a1[2] = 0;
  if (atomic_load(dword_1EFEC5DA8))
    sub_1D4BAFB3C(dword_1EFEC5DA8);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  return a1;
}

void sub_1D4B036DC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B036F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = off_1E984A5B8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    sub_1D4B16764((unint64_t *)(a1 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  return a1;
}

void sub_1D4B0375C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B03770(_QWORD *a1)
{
  *a1 = off_1E984A5B8;
  sub_1D4B16364(a1 + 1);
  return a1;
}

void sub_1D4B037A0(uint64_t *a1)
{
  *a1 = (uint64_t)off_1E984A5B8;
  sub_1D4B16364(a1 + 1);
  operator delete(a1);
}

void sub_1D4B037D0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if ((*(_BYTE *)(a1 + 16) & 7) != 0)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  v2 = *(_BYTE *)(a1 + 8);
  v1 = a1 + 8;
  *(_DWORD *)(v1 + 8) = 0;
  if ((v2 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v1);
}

uint64_t sub_1D4B037F8(uint64_t a1, char **a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  char *v13;
  unint64_t v14;
  unint64_t *v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  _BYTE v21[32];
  _QWORD v22[2];
  uint64_t *v23;
  __int128 v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 8);
  v23 = (uint64_t *)(a1 + 8);
  v24 = 0uLL;
  v25 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v25 = *(_QWORD *)(v5 + 16);
    v24 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v22, (uint64_t)&v24);
  sub_1D4BB0DD8((uint64_t)v21, (uint64_t)v22, 0);
  do
  {
    while (1)
    {
      v7 = *a2;
      if (*a2 >= a2[1])
      {
        v8 = 0;
LABEL_9:
        v10 = sub_1D4BB0BD8((uint64_t)a2, v8);
        v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
        if ((v9 & 0x100000000) == 0)
          goto LABEL_30;
        goto LABEL_10;
      }
      v8 = *v7;
      if (*v7 < 1)
        goto LABEL_9;
      *a2 = v7 + 1;
      v9 = v8 | 0x100000000;
      if ((v9 & 0x100000000) == 0)
        goto LABEL_30;
LABEL_10:
      v11 = v9 >> 3;
      if (v9 >> 3 != 3)
        break;
      if (v9 != 24)
        goto LABEL_30;
      *(_DWORD *)(a1 + 16) |= 4u;
      v13 = *a2;
      if (*a2 < a2[1] && (*v13 & 0x80000000) == 0)
      {
        v14 = *v13;
        v15 = (unint64_t *)(a1 + 40);
        goto LABEL_28;
      }
      v14 = sub_1D4BB06F0((uint64_t)a2);
      if ((v17 & 1) == 0)
        goto LABEL_41;
      v15 = (unint64_t *)(a1 + 40);
LABEL_29:
      *v15 = -(uint64_t)(v14 & 1) ^ (v14 >> 1);
    }
    if (v11 == 2)
    {
      if (v9 != 16)
        goto LABEL_30;
      *(_DWORD *)(a1 + 16) |= 2u;
      v13 = *a2;
      if (*a2 < a2[1] && (*v13 & 0x80000000) == 0)
      {
        v14 = *v13;
        v15 = (unint64_t *)(a1 + 32);
        goto LABEL_28;
      }
      v14 = sub_1D4BB06F0((uint64_t)a2);
      if ((v18 & 1) == 0)
        break;
      v15 = (unint64_t *)(a1 + 32);
      goto LABEL_29;
    }
    if (v11 == 1 && v9 == 8)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      v13 = *a2;
      if (*a2 < a2[1] && (*v13 & 0x80000000) == 0)
      {
        v14 = *v13;
        v15 = (unint64_t *)(a1 + 24);
LABEL_28:
        *a2 = v13 + 1;
        goto LABEL_29;
      }
      v14 = sub_1D4BB06F0((uint64_t)a2);
      if ((v16 & 1) == 0)
        break;
      v15 = (unint64_t *)(a1 + 24);
      goto LABEL_29;
    }
LABEL_30:
    if (!(_DWORD)v9)
    {
      v19 = 1;
      goto LABEL_40;
    }
  }
  while (sub_1D4BB3060((uint64_t)a2, v9, (uint64_t)v21));
LABEL_41:
  v19 = 0;
LABEL_40:
  sub_1D4BB0EE0((uint64_t)v21);
  sub_1D4B16458(&v23);
  return v19;
}

void sub_1D4B03A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B03A54(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 1) != 0)
  {
    sub_1D4BB3B04(1, *(_QWORD *)(a1 + 24), a2);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  sub_1D4BB3B04(2, *(_QWORD *)(a1 + 32), a2);
  if ((v4 & 4) != 0)
LABEL_4:
    sub_1D4BB3B04(3, *(_QWORD *)(a1 + 40), a2);
LABEL_5:
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 1) != 0)
    v6 = (char *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v6 = (char *)&qword_1EFEC6AB8;
  if (v6[23] < 0)
    v6 = *(char **)v6;
  if ((v5 & 1) != 0)
    v7 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v7 = &qword_1EFEC6AB8;
  if (*((char *)v7 + 23) < 0)
    v8 = v7[1];
  else
    LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
  return sub_1D4BB0EE4(a2, v6, v8);
}

uint64_t sub_1D4B03B14(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;

  v1 = *(_QWORD *)(a1 + 8);
  if ((v1 & 1) != 0)
    v2 = (uint64_t *)(v1 & 0xFFFFFFFFFFFFFFFELL);
  else
    v2 = &qword_1EFEC6AB8;
  if (*((char *)v2 + 23) < 0)
    v3 = v2[1];
  else
    v3 = *((unsigned __int8 *)v2 + 23);
  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 7) == 0)
    goto LABEL_12;
  if ((v4 & 1) == 0)
  {
    if ((v4 & 2) == 0)
      goto LABEL_10;
LABEL_14:
    v3 += ((9 * (__clz((2 * *(_QWORD *)(a1 + 32)) ^ (*(uint64_t *)(a1 + 32) >> 63) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  v3 += ((9 * (__clz((2 * *(_QWORD *)(a1 + 24)) ^ (*(uint64_t *)(a1 + 24) >> 63) | 1) ^ 0x3F) + 73) >> 6) + 1;
  if ((v4 & 2) != 0)
    goto LABEL_14;
LABEL_10:
  if ((v4 & 4) != 0)
LABEL_11:
    v3 += ((9 * (__clz((2 * *(_QWORD *)(a1 + 40)) ^ (*(uint64_t *)(a1 + 40) >> 63) | 1) ^ 0x3F) + 73) >> 6) + 1;
LABEL_12:
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

std::string *sub_1D4B03BEC(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 7) != 0)
  {
    if ((v5 & 1) != 0)
    {
      v3[1].__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 24);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
        {
LABEL_8:
          LODWORD(v3->__r_.__value_.__r.__words[2]) |= v5;
          return result;
        }
LABEL_7:
        v3[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
        goto LABEL_8;
      }
    }
    else if ((v5 & 2) == 0)
    {
      goto LABEL_6;
    }
    v3[1].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 32);
    if ((v5 & 4) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_1D4B03C68()
{
  return 1;
}

_QWORD *sub_1D4B03C70@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.IntegerStatistics");
}

_QWORD *sub_1D4B03C80(_QWORD *a1)
{
  *a1 = off_1E984A1F8;
  a1[1] = 0;
  a1[2] = 0;
  if (atomic_load(dword_1EFEC5D18))
    sub_1D4BAFB3C(dword_1EFEC5D18);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  return a1;
}

void sub_1D4B03CE0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B03CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = off_1E984A1F8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    sub_1D4B16764((unint64_t *)(a1 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  return a1;
}

void sub_1D4B03D60(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B03D74(_QWORD *a1)
{
  *a1 = off_1E984A1F8;
  sub_1D4B16364(a1 + 1);
  return a1;
}

void sub_1D4B03DA4(uint64_t *a1)
{
  *a1 = (uint64_t)off_1E984A1F8;
  sub_1D4B16364(a1 + 1);
  operator delete(a1);
}

void sub_1D4B03DD4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if ((*(_BYTE *)(a1 + 16) & 7) != 0)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  v2 = *(_BYTE *)(a1 + 8);
  v1 = a1 + 8;
  *(_DWORD *)(v1 + 8) = 0;
  if ((v2 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v1);
}

BOOL sub_1D4B03DFC(uint64_t a1, char **a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _BOOL8 v19;
  _BYTE v21[32];
  _QWORD v22[2];
  uint64_t *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *(_QWORD *)(a1 + 8);
  v23 = (uint64_t *)(a1 + 8);
  v24 = 0uLL;
  v25 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v25 = *(_QWORD *)(v5 + 16);
    v24 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v22, (uint64_t)&v24);
  sub_1D4BB0DD8((uint64_t)v21, (uint64_t)v22, 0);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v7 = *a2;
          if (*a2 >= a2[1])
            break;
          v8 = *v7;
          if (*v7 < 1)
            goto LABEL_9;
          *a2 = v7 + 1;
          v9 = v8 | 0x100000000;
          if ((v9 & 0x100000000) != 0)
            goto LABEL_10;
LABEL_28:
          v19 = (_DWORD)v9 == 0;
          if (!(_DWORD)v9 || !sub_1D4BB3060((uint64_t)a2, v9, (uint64_t)v21))
            goto LABEL_38;
        }
        v8 = 0;
LABEL_9:
        v10 = sub_1D4BB0BD8((uint64_t)a2, v8);
        v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
        if ((v9 & 0x100000000) == 0)
          goto LABEL_28;
LABEL_10:
        v11 = v9 >> 3;
        if (v9 >> 3 != 3)
          break;
        if (v9 != 25)
          goto LABEL_28;
        *(_DWORD *)(a1 + 16) |= 4u;
        v26 = 0;
        v15 = *a2;
        if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
        {
          if (!sub_1D4BB0660((uint64_t)a2, &v26))
            goto LABEL_37;
          v16 = v26;
        }
        else
        {
          v16 = *(_QWORD *)v15;
          *a2 = v15 + 8;
        }
        *(_QWORD *)(a1 + 40) = v16;
      }
      if (v11 == 2)
        break;
      if (v11 != 1 || v9 != 9)
        goto LABEL_28;
      *(_DWORD *)(a1 + 16) |= 1u;
      v26 = 0;
      v13 = *a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
      {
        if (!sub_1D4BB0660((uint64_t)a2, &v26))
          goto LABEL_37;
        v14 = v26;
      }
      else
      {
        v14 = *(_QWORD *)v13;
        *a2 = v13 + 8;
      }
      *(_QWORD *)(a1 + 24) = v14;
    }
    if (v9 != 17)
      goto LABEL_28;
    *(_DWORD *)(a1 + 16) |= 2u;
    v26 = 0;
    v17 = *a2;
    if ((int)(*((_DWORD *)a2 + 2) - *a2) >= 8)
    {
      v18 = *(_QWORD *)v17;
      *a2 = v17 + 8;
      goto LABEL_27;
    }
    if (!sub_1D4BB0660((uint64_t)a2, &v26))
      break;
    v18 = v26;
LABEL_27:
    *(_QWORD *)(a1 + 32) = v18;
  }
LABEL_37:
  v19 = 0;
LABEL_38:
  sub_1D4BB0EE0((uint64_t)v21);
  sub_1D4B16458(&v23);
  return v19;
}

void sub_1D4B04028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B04050(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 1) != 0)
  {
    sub_1D4BB3CB4(1, a2, *(double *)(a1 + 24));
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  sub_1D4BB3CB4(2, a2, *(double *)(a1 + 32));
  if ((v4 & 4) != 0)
LABEL_4:
    sub_1D4BB3CB4(3, a2, *(double *)(a1 + 40));
LABEL_5:
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 1) != 0)
    v6 = (char *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v6 = (char *)&qword_1EFEC6AB8;
  if (v6[23] < 0)
    v6 = *(char **)v6;
  if ((v5 & 1) != 0)
    v7 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v7 = &qword_1EFEC6AB8;
  if (*((char *)v7 + 23) < 0)
    v8 = v7[1];
  else
    LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
  return sub_1D4BB0EE4(a2, v6, v8);
}

uint64_t sub_1D4B04110(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if ((v1 & 1) != 0)
    v2 = (uint64_t *)(v1 & 0xFFFFFFFFFFFFFFFELL);
  else
    v2 = &qword_1EFEC6AB8;
  if (*((char *)v2 + 23) < 0)
    v3 = v2[1];
  else
    v3 = *((unsigned __int8 *)v2 + 23);
  v4 = *(_DWORD *)(a1 + 16);
  v5 = v3 + 9;
  if ((v4 & 1) == 0)
    v5 = v3;
  if ((v4 & 2) != 0)
    v5 += 9;
  if ((v4 & 4) != 0)
    v5 += 9;
  if ((v4 & 7) != 0)
    v3 = v5;
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

std::string *sub_1D4B0417C(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 7) != 0)
  {
    if ((v5 & 1) != 0)
    {
      v3[1].__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 24);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
        {
LABEL_8:
          LODWORD(v3->__r_.__value_.__r.__words[2]) |= v5;
          return result;
        }
LABEL_7:
        v3[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
        goto LABEL_8;
      }
    }
    else if ((v5 & 2) == 0)
    {
      goto LABEL_6;
    }
    v3[1].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 32);
    if ((v5 & 4) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_1D4B041F8()
{
  return 1;
}

_QWORD *sub_1D4B04200@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.DoubleStatistics");
}

_QWORD *sub_1D4B04210(_QWORD *a1)
{
  *a1 = off_1E984A298;
  a1[1] = 0;
  a1[2] = 0;
  if (atomic_load(dword_1EFEC5D30))
    sub_1D4BAFB3C(dword_1EFEC5D30);
  a1[3] = &qword_1EFEC6AB8;
  a1[4] = &qword_1EFEC6AB8;
  a1[5] = &qword_1EFEC6AB8;
  a1[6] = &qword_1EFEC6AB8;
  a1[7] = 0;
  return a1;
}

void sub_1D4B0427C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B04290(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;

  *(_QWORD *)a1 = off_1E984A298;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    sub_1D4B16764((unint64_t *)(a1 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  *(_QWORD *)(a1 + 24) = &qword_1EFEC6AB8;
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 1) != 0)
  {
    v6 = *(uint64_t **)(a2 + 24);
    if (v6 != &qword_1EFEC6AB8)
    {
      sub_1D4B164E8((_QWORD *)(a1 + 24), (uint64_t)v6);
      v5 = *(_DWORD *)(a2 + 16);
    }
  }
  *(_QWORD *)(a1 + 32) = &qword_1EFEC6AB8;
  if ((v5 & 2) != 0)
  {
    v7 = *(uint64_t **)(a2 + 32);
    if (v7 != &qword_1EFEC6AB8)
    {
      sub_1D4B164E8((_QWORD *)(a1 + 32), (uint64_t)v7);
      v5 = *(_DWORD *)(a2 + 16);
    }
  }
  *(_QWORD *)(a1 + 40) = &qword_1EFEC6AB8;
  if ((v5 & 4) != 0)
  {
    v8 = *(uint64_t **)(a2 + 40);
    if (v8 != &qword_1EFEC6AB8)
    {
      sub_1D4B164E8((_QWORD *)(a1 + 40), (uint64_t)v8);
      v5 = *(_DWORD *)(a2 + 16);
    }
  }
  *(_QWORD *)(a1 + 48) = &qword_1EFEC6AB8;
  if ((v5 & 8) != 0)
  {
    v9 = *(uint64_t **)(a2 + 48);
    if (v9 != &qword_1EFEC6AB8)
      sub_1D4B164E8((_QWORD *)(a1 + 48), (uint64_t)v9);
  }
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

void sub_1D4B0437C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

void sub_1D4B04390(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;

  v2 = a1[3];
  if ((uint64_t *)v2 != &qword_1EFEC6AB8 && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
  }
  v4 = a1[4];
  if ((uint64_t *)v4 != &qword_1EFEC6AB8 && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    operator delete((void *)v4);
  }
  v6 = a1[5];
  if ((uint64_t *)v6 != &qword_1EFEC6AB8 && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    operator delete((void *)v6);
  }
  v8 = a1[6];
  if ((uint64_t *)v8 != &qword_1EFEC6AB8 && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    operator delete((void *)v8);
  }
}

_QWORD *sub_1D4B04468(_QWORD *a1)
{
  uint64_t *v2;

  *a1 = off_1E984A298;
  v2 = a1 + 1;
  sub_1D4B04390(a1);
  sub_1D4B16364(v2);
  return a1;
}

void sub_1D4B044A4(uint64_t *a1)
{
  uint64_t *v2;

  *a1 = (uint64_t)off_1E984A298;
  v2 = a1 + 1;
  sub_1D4B04390(a1);
  sub_1D4B16364(v2);
  operator delete(a1);
}

void sub_1D4B044E0(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 0xF) == 0)
    goto LABEL_22;
  if ((v1 & 1) == 0)
  {
    if ((v1 & 2) == 0)
      goto LABEL_4;
LABEL_11:
    v3 = *(_QWORD *)(a1 + 32);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v1 & 4) != 0)
        goto LABEL_15;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
      if ((v1 & 4) != 0)
        goto LABEL_15;
    }
LABEL_5:
    if ((v1 & 8) == 0)
      goto LABEL_22;
LABEL_19:
    v5 = *(_QWORD *)(a1 + 48);
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
    goto LABEL_22;
  }
  v2 = *(_QWORD *)(a1 + 24);
  if (*(char *)(v2 + 23) < 0)
  {
    **(_BYTE **)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    if ((v1 & 2) != 0)
      goto LABEL_11;
  }
  else
  {
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 23) = 0;
    if ((v1 & 2) != 0)
      goto LABEL_11;
  }
LABEL_4:
  if ((v1 & 4) == 0)
    goto LABEL_5;
LABEL_15:
  v4 = *(_QWORD *)(a1 + 40);
  if (*(char *)(v4 + 23) < 0)
  {
    **(_BYTE **)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    if ((v1 & 8) == 0)
      goto LABEL_22;
    goto LABEL_19;
  }
  *(_BYTE *)v4 = 0;
  *(_BYTE *)(v4 + 23) = 0;
  if ((v1 & 8) != 0)
    goto LABEL_19;
LABEL_22:
  v7 = *(_BYTE *)(a1 + 8);
  v6 = a1 + 8;
  *(_QWORD *)(v6 + 48) = 0;
  *(_DWORD *)(v6 + 8) = 0;
  if ((v7 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v6);
}

uint64_t sub_1D4B045C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  std::string *v11;
  char *v12;
  unint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  _BYTE v18[32];
  _QWORD v19[2];
  uint64_t *v20;
  __int128 v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a1 + 8);
  v20 = (uint64_t *)(a1 + 8);
  v21 = 0uLL;
  v22 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v22 = *(_QWORD *)(v5 + 16);
    v21 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v19, (uint64_t)&v21);
  sub_1D4BB0DD8((uint64_t)v18, (uint64_t)v19, 0);
  do
  {
    while (1)
    {
      v7 = (char *)*a2;
      if (*a2 < (unint64_t)a2[1])
        break;
      v8 = 0;
LABEL_9:
      v10 = sub_1D4BB0BD8((uint64_t)a2, v8);
      v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
      if ((v9 & 0x100000000) == 0)
        goto LABEL_31;
LABEL_10:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10)
            goto LABEL_31;
          *(_DWORD *)(a1 + 16) |= 1u;
          v11 = *(std::string **)(a1 + 24);
          if (v11 == (std::string *)&qword_1EFEC6AB8)
          {
            sub_1D4B164E8((_QWORD *)(a1 + 24), (uint64_t)&qword_1EFEC6AB8);
            v11 = *(std::string **)(a1 + 24);
          }
          goto LABEL_30;
        case 2u:
          if (v9 != 18)
            goto LABEL_31;
          *(_DWORD *)(a1 + 16) |= 2u;
          v11 = *(std::string **)(a1 + 32);
          if (v11 == (std::string *)&qword_1EFEC6AB8)
          {
            sub_1D4B164E8((_QWORD *)(a1 + 32), (uint64_t)&qword_1EFEC6AB8);
            v11 = *(std::string **)(a1 + 32);
          }
          goto LABEL_30;
        case 3u:
          if (v9 != 24)
            goto LABEL_31;
          *(_DWORD *)(a1 + 16) |= 0x10u;
          v12 = (char *)*a2;
          if (*a2 >= (unint64_t)a2[1] || *v12 < 0)
          {
            v13 = sub_1D4BB06F0((uint64_t)a2);
            if ((v15 & 1) == 0)
              goto LABEL_39;
          }
          else
          {
            v13 = *v12;
            *a2 = (uint64_t)(v12 + 1);
          }
          *(_QWORD *)(a1 + 56) = -(uint64_t)(v13 & 1) ^ (v13 >> 1);
          break;
        case 4u:
          if (v9 != 34)
            goto LABEL_31;
          *(_DWORD *)(a1 + 16) |= 4u;
          v11 = *(std::string **)(a1 + 40);
          if (v11 == (std::string *)&qword_1EFEC6AB8)
          {
            sub_1D4B164E8((_QWORD *)(a1 + 40), (uint64_t)&qword_1EFEC6AB8);
            v11 = *(std::string **)(a1 + 40);
          }
          goto LABEL_30;
        case 5u:
          if (v9 != 42)
            goto LABEL_31;
          *(_DWORD *)(a1 + 16) |= 8u;
          v11 = *(std::string **)(a1 + 48);
          if (v11 == (std::string *)&qword_1EFEC6AB8)
          {
            sub_1D4B164E8((_QWORD *)(a1 + 48), (uint64_t)&qword_1EFEC6AB8);
            v11 = *(std::string **)(a1 + 48);
          }
LABEL_30:
          v14 = sub_1D4BB4654(a2, v11);
          goto LABEL_33;
        default:
          goto LABEL_31;
      }
    }
    v8 = *v7;
    if (*v7 < 1)
      goto LABEL_9;
    *a2 = (uint64_t)(v7 + 1);
    v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) != 0)
      goto LABEL_10;
LABEL_31:
    if (!(_DWORD)v9)
    {
      v16 = 1;
      goto LABEL_38;
    }
    v14 = sub_1D4BB3060((uint64_t)a2, v9, (uint64_t)v18);
LABEL_33:
    ;
  }
  while (v14);
LABEL_39:
  v16 = 0;
LABEL_38:
  sub_1D4BB0EE0((uint64_t)v18);
  sub_1D4B16458(&v20);
  return v16;
}

void sub_1D4B04878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B048A0(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 1) != 0)
  {
    sub_1D4BB3FE4(1, *(_QWORD *)(a1 + 24), a2);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  sub_1D4BB3FE4(2, *(_QWORD *)(a1 + 32), a2);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  sub_1D4BB3B04(3, *(_QWORD *)(a1 + 56), a2);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_20:
  sub_1D4BB3FE4(4, *(_QWORD *)(a1 + 40), a2);
  if ((v4 & 8) != 0)
LABEL_6:
    sub_1D4BB3FE4(5, *(_QWORD *)(a1 + 48), a2);
LABEL_7:
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 1) != 0)
    v6 = (char *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v6 = (char *)&qword_1EFEC6AB8;
  if (v6[23] < 0)
    v6 = *(char **)v6;
  if ((v5 & 1) != 0)
    v7 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v7 = &qword_1EFEC6AB8;
  if (*((char *)v7 + 23) < 0)
    v8 = v7[1];
  else
    LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
  return sub_1D4BB0EE4(a2, v6, v8);
}

uint64_t sub_1D4B04990(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(a1 + 8);
  if ((v1 & 1) != 0)
    v2 = (uint64_t *)(v1 & 0xFFFFFFFFFFFFFFFELL);
  else
    v2 = &qword_1EFEC6AB8;
  if (*((char *)v2 + 23) < 0)
    v3 = v2[1];
  else
    v3 = *((unsigned __int8 *)v2 + 23);
  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 0x1F) == 0)
    goto LABEL_14;
  if ((v4 & 1) != 0)
  {
    v6 = *(_QWORD *)(a1 + 24);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v3 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v4 & 2) == 0)
    {
LABEL_10:
      if ((v4 & 4) == 0)
        goto LABEL_11;
      goto LABEL_21;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_10;
  }
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(unsigned __int8 *)(v9 + 23);
  v11 = *(_QWORD *)(v9 + 8);
  if ((v10 & 0x80u) == 0)
    v11 = v10;
  v3 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0)
      goto LABEL_12;
LABEL_24:
    v15 = *(_QWORD *)(a1 + 48);
    v16 = *(unsigned __int8 *)(v15 + 23);
    v17 = *(_QWORD *)(v15 + 8);
    if ((v16 & 0x80u) == 0)
      v17 = v16;
    v3 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v4 & 0x10) != 0)
      goto LABEL_13;
    goto LABEL_14;
  }
LABEL_21:
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(unsigned __int8 *)(v12 + 23);
  v14 = *(_QWORD *)(v12 + 8);
  if ((v13 & 0x80u) == 0)
    v14 = v13;
  v3 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v4 & 8) != 0)
    goto LABEL_24;
LABEL_12:
  if ((v4 & 0x10) != 0)
LABEL_13:
    v3 += ((9 * (__clz((2 * *(_QWORD *)(a1 + 56)) ^ (*(uint64_t *)(a1 + 56) >> 63) | 1) ^ 0x3F) + 73) >> 6) + 1;
LABEL_14:
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

std::string *sub_1D4B04B18(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;
  std::string *data;
  const std::string *v7;
  std::string *size;
  const std::string *v9;
  std::string *v10;
  const std::string *v11;
  std::string *v12;
  const std::string *v13;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 0x1F) != 0)
  {
    if ((v5 & 1) != 0)
    {
      result = v3 + 1;
      data = (std::string *)v3[1].__r_.__value_.__l.__data_;
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
      v7 = *(const std::string **)(a2 + 24);
      if (data != v7)
      {
        if (data == (std::string *)&qword_1EFEC6AB8)
        {
          result = (std::string *)sub_1D4B164E8(result, (uint64_t)v7);
          if ((v5 & 2) == 0)
            goto LABEL_15;
LABEL_9:
          result = (std::string *)((char *)v3 + 32);
          size = (std::string *)v3[1].__r_.__value_.__l.__size_;
          LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
          v9 = *(const std::string **)(a2 + 32);
          if (size != v9)
          {
            if (size == (std::string *)&qword_1EFEC6AB8)
              result = (std::string *)sub_1D4B164E8(result, (uint64_t)v9);
            else
              result = std::string::operator=(size, v9);
          }
LABEL_15:
          if ((v5 & 4) != 0)
          {
            result = (std::string *)((char *)v3 + 40);
            v10 = (std::string *)v3[1].__r_.__value_.__r.__words[2];
            LODWORD(v3->__r_.__value_.__r.__words[2]) |= 4u;
            v11 = *(const std::string **)(a2 + 40);
            if (v10 != v11)
            {
              if (v10 == (std::string *)&qword_1EFEC6AB8)
              {
                result = (std::string *)sub_1D4B164E8(result, (uint64_t)v11);
                if ((v5 & 8) != 0)
                {
LABEL_20:
                  result = v3 + 2;
                  v12 = (std::string *)v3[2].__r_.__value_.__l.__data_;
                  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 8u;
                  v13 = *(const std::string **)(a2 + 48);
                  if (v12 != v13)
                  {
                    if (v12 == (std::string *)&qword_1EFEC6AB8)
                      result = (std::string *)sub_1D4B164E8(result, (uint64_t)v13);
                    else
                      result = std::string::operator=(v12, v13);
                  }
                }
LABEL_26:
                if ((v5 & 0x10) != 0)
                  v3[2].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 56);
                LODWORD(v3->__r_.__value_.__r.__words[2]) |= v5;
                return result;
              }
              result = std::string::operator=(v10, v11);
            }
          }
          if ((v5 & 8) != 0)
            goto LABEL_20;
          goto LABEL_26;
        }
        result = std::string::operator=(data, v7);
      }
    }
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1D4B04C90()
{
  return 1;
}

_QWORD *sub_1D4B04C98@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.StringStatistics");
}

uint64_t sub_1D4B04CA8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E984A0B8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  if (atomic_load(dword_1EFEC5CA8))
    sub_1D4BAFB3C(dword_1EFEC5CA8);
  return a1;
}

void sub_1D4B04D0C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  sub_1D4B04D28(v2 + 24);
  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B04D28(uint64_t a1)
{
  _QWORD *v2;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = *(_QWORD **)(a1 + 8);
    if (v2)
    {
      if (!*v2)
        operator delete(v2);
    }
  }
  return a1;
}

uint64_t sub_1D4B04D68(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1E984A0B8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (unint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    sub_1D4B165E8((unsigned int *)(a1 + 24), v5);
    v6 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
    memcpy((void *)(v6 + 8), (const void *)(*(_QWORD *)(a2 + 32) + 8), 8 * *(int *)(a2 + 24));
  }
  v7 = *(_QWORD *)(a2 + 8);
  if ((v7 & 1) != 0)
    sub_1D4B16764(v4, v7 & 0xFFFFFFFFFFFFFFFELL);
  return a1;
}

void sub_1D4B04E10(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  sub_1D4B04D28(v2);
  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B04E34(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)a1 = off_1E984A0B8;
  if (*(int *)(a1 + 28) >= 1)
  {
    v2 = *(_QWORD **)(a1 + 32);
    if (v2)
    {
      if (!*v2)
        operator delete(v2);
    }
  }
  sub_1D4B16364((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1D4B04E8C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_1D4B04E34(a1);
  operator delete(v1);
}

void sub_1D4B04EA0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(a1 + 8);
  v1 = a1 + 8;
  *(_DWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 8) = 0;
  if ((v2 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v1);
}

uint64_t sub_1D4B04EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  char *v11;
  int v12;
  char v13;
  int v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[32];
  _QWORD v24[2];
  uint64_t *v25;
  __int128 v26;
  uint64_t v27;

  v4 = *(_QWORD *)(a1 + 8);
  v25 = (uint64_t *)(a1 + 8);
  v26 = 0uLL;
  v27 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v27 = *(_QWORD *)(v5 + 16);
    v26 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v24, (uint64_t)&v26);
  sub_1D4BB0DD8((uint64_t)v23, (uint64_t)v24, 0);
  while (1)
  {
    while (1)
    {
      v7 = *(char **)a2;
      if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
      {
        v8 = 0;
      }
      else
      {
        v8 = *v7;
        if (*v7 >= 1)
        {
          *(_QWORD *)a2 = v7 + 1;
          v9 = v8 | 0x100000000;
          if ((v9 & 0x100000000) == 0)
            goto LABEL_16;
          goto LABEL_10;
        }
      }
      v10 = sub_1D4BB0BD8(a2, v8);
      v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
      if ((v9 & 0x100000000) == 0)
        goto LABEL_16;
LABEL_10:
      if ((v9 & 0xFFFFFFF8) != 8)
      {
LABEL_16:
        if (!(_DWORD)v9)
        {
          v21 = 1;
          goto LABEL_34;
        }
        goto LABEL_17;
      }
      if (v9 == 8)
      {
        v13 = sub_1D4B050FC(1, 0xAu, (char **)a2, a1 + 24);
        goto LABEL_19;
      }
      if (v9 == 10)
        break;
LABEL_17:
      v13 = sub_1D4BB3060(a2, v9, (uint64_t)v23);
LABEL_19:
      if ((v13 & 1) == 0)
        goto LABEL_35;
    }
    v11 = *(char **)a2;
    if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v11 < 0)
      break;
    v12 = *v11;
    *(_QWORD *)a2 = v11 + 1;
LABEL_22:
    v14 = sub_1D4BAFEE4(a2, v12);
    while ((int)sub_1D4BB003C((_DWORD *)a2) >= 1)
    {
      v15 = *(char **)a2;
      if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v15 < 0)
      {
        v17 = sub_1D4BB06F0(a2);
        if ((v18 & 1) == 0)
          goto LABEL_35;
        v16 = v17;
      }
      else
      {
        v16 = *v15;
        *(_QWORD *)a2 = v15 + 1;
      }
      v19 = *(_DWORD *)(a1 + 24);
      if (v19 == *(_DWORD *)(a1 + 28))
      {
        sub_1D4B165E8((unsigned int *)(a1 + 24), v19 + 1);
        v19 = *(_DWORD *)(a1 + 24);
      }
      v20 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 24) = v19 + 1;
      *(_QWORD *)(v20 + 8 * v19 + 8) = v16;
    }
    sub_1D4BAFF5C(a2, v14);
  }
  v12 = sub_1D4BB098C((unsigned __int8 **)a2);
  if ((v12 & 0x80000000) == 0)
    goto LABEL_22;
LABEL_35:
  v21 = 0;
LABEL_34:
  sub_1D4BB0EE0((uint64_t)v23);
  sub_1D4B16458(&v25);
  return v21;
}

void sub_1D4B050D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B050FC(uint64_t a1, unsigned int a2, char **a3, uint64_t a4)
{
  char *v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  signed int v12;
  int v13;
  uint64_t v14;
  signed int v15;
  int v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char v22;
  uint64_t v23;

  v7 = *a3;
  if (*a3 >= a3[1] || *v7 < 0)
  {
    v9 = sub_1D4BB06F0((uint64_t)a3);
    if ((v10 & 1) == 0)
      return 0;
    v8 = v9;
  }
  else
  {
    v8 = *v7;
    *a3 = v7 + 1;
  }
  v12 = *(_DWORD *)a4;
  v13 = *(_DWORD *)(a4 + 4);
  if (*(_DWORD *)a4 == v13)
  {
    sub_1D4B165E8((unsigned int *)a4, v12 + 1);
    v12 = *(_DWORD *)a4;
    v13 = *(_DWORD *)(a4 + 4);
  }
  v14 = *(_QWORD *)(a4 + 8);
  v15 = v12 + 1;
  *(_DWORD *)a4 = v12 + 1;
  *(_QWORD *)(v14 + 8 * v12 + 8) = v8;
  if (v13 - (v12 + 1) >= 1)
  {
    v16 = v13 - v12;
    do
    {
      if (a2 > 0x7F)
      {
        if (a2 >> 14)
          return 1;
        v20 = *a3;
        v17 = (unint64_t)a3[1];
        if ((int)(v17 - *a3) < 2
          || (a2 & 0x7F | 0x80) != *v20
          || v20[1] != (a2 >> 7))
        {
          return 1;
        }
        v19 = v20 + 2;
      }
      else
      {
        v18 = *a3;
        v17 = (unint64_t)a3[1];
        if ((unint64_t)*a3 >= v17 || *v18 != a2)
          return 1;
        v19 = v18 + 1;
      }
      *a3 = v19;
      if ((unint64_t)v19 >= v17 || *v19 < 0)
      {
        v21 = sub_1D4BB06F0((uint64_t)a3);
        if ((v22 & 1) == 0)
          return 0;
        v15 = *(_DWORD *)a4;
      }
      else
      {
        v21 = *v19;
        *a3 = v19 + 1;
      }
      v23 = *(_QWORD *)(a4 + 8) + 8 * v15++;
      *(_DWORD *)a4 = v15;
      *(_QWORD *)(v23 + 8) = v21;
      --v16;
    }
    while (v16 > 1);
  }
  return 1;
}

uint64_t sub_1D4B0526C(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;

  if (*(int *)(a1 + 24) >= 1)
  {
    if (*(int *)(a2 + 16) < 5)
    {
      sub_1D4BB10F8(a2, 0xAu);
      v4 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(a2 + 8))++ = 10;
      v4 = *(_DWORD *)(a2 + 16) - 1;
      *(_DWORD *)(a2 + 16) = v4;
    }
    v5 = *(_DWORD *)(a1 + 40);
    if (v4 < 5)
    {
      sub_1D4BB10F8(a2, v5);
    }
    else
    {
      v6 = *(_QWORD *)(a2 + 8);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(a1 + 40);
        v7 = *(_BYTE **)(a2 + 8);
      }
      else
      {
        v7 = *(_BYTE **)(a2 + 8);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *(_QWORD *)(a2 + 8) += v10;
      *(_DWORD *)(a2 + 16) -= v10;
    }
    v11 = *(unsigned int *)(a1 + 24);
    if ((int)v11 >= 1)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * i + 8);
        if (*(int *)(a2 + 16) < 10)
        {
          sub_1D4BB1150(a2, v13);
        }
        else
        {
          v14 = *(_QWORD *)(a2 + 8);
          if (v13 < 0x80)
          {
            v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * i + 8);
            v15 = *(_BYTE **)(a2 + 8);
          }
          else
          {
            v15 = *(_BYTE **)(a2 + 8);
            do
            {
              *v15++ = v13 | 0x80;
              v16 = v13 >> 7;
              v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          *v15 = v16;
          v18 = (_DWORD)v15 - v14 + 1;
          *(_QWORD *)(a2 + 8) += v18;
          *(_DWORD *)(a2 + 16) -= v18;
        }
      }
    }
  }
  v19 = *(_QWORD *)(a1 + 8);
  if ((v19 & 1) != 0)
    v20 = (char *)(v19 & 0xFFFFFFFFFFFFFFFELL);
  else
    v20 = (char *)&qword_1EFEC6AB8;
  if (v20[23] < 0)
    v20 = *(char **)v20;
  if ((v19 & 1) != 0)
    v21 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFFFFELL);
  else
    v21 = &qword_1EFEC6AB8;
  if (*((char *)v21 + 23) < 0)
    v22 = v21[1];
  else
    LODWORD(v22) = *((unsigned __int8 *)v21 + 23);
  return sub_1D4BB0EE4(a2, v20, v22);
}

uint64_t sub_1D4B05438(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 1) != 0)
    v3 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  else
    v3 = &qword_1EFEC6AB8;
  if (*((char *)v3 + 23) < 0)
    v4 = v3[1];
  else
    v4 = *((unsigned __int8 *)v3 + 23);
  v5 = sub_1D4BB477C((unsigned int *)(a1 + 24));
  v6 = 11;
  v7 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v5 >= 0)
    v6 = v7;
  v8 = v6 + v4;
  if (v5)
    v9 = v5;
  else
    v9 = 0;
  if (!v5)
    v8 = v4;
  *(_DWORD *)(a1 + 40) = v9;
  result = v8 + v5;
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

std::string *sub_1D4B054D0(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;
  std::string *v6;
  uint64_t data_low;
  std::string::size_type size;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    data_low = SLODWORD(v3[1].__r_.__value_.__l.__data_);
    v6 = v3 + 1;
    sub_1D4B165E8((unsigned int *)v6, data_low + v5);
    size = v6->__r_.__value_.__l.__size_;
    LODWORD(v6->__r_.__value_.__l.__data_) += *(_DWORD *)(a2 + 24);
    return (std::string *)memcpy((void *)(size + 8 * data_low + 8), (const void *)(*(_QWORD *)(a2 + 32) + 8), 8 * *(int *)(a2 + 24));
  }
  return result;
}

uint64_t sub_1D4B05560()
{
  return 1;
}

_QWORD *sub_1D4B05568@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.BucketStatistics");
}

_QWORD *sub_1D4B05578(_QWORD *a1)
{
  *a1 = off_1E984A478;
  a1[1] = 0;
  a1[2] = 0;
  if (atomic_load(dword_1EFEC5D78))
    sub_1D4BAFB3C(dword_1EFEC5D78);
  a1[3] = &qword_1EFEC6AB8;
  a1[4] = &qword_1EFEC6AB8;
  a1[5] = &qword_1EFEC6AB8;
  return a1;
}

void sub_1D4B055E0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B055F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;

  *(_QWORD *)a1 = off_1E984A478;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    sub_1D4B16764((unint64_t *)(a1 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  *(_QWORD *)(a1 + 24) = &qword_1EFEC6AB8;
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 1) != 0)
  {
    v6 = *(uint64_t **)(a2 + 24);
    if (v6 != &qword_1EFEC6AB8)
    {
      sub_1D4B164E8((_QWORD *)(a1 + 24), (uint64_t)v6);
      v5 = *(_DWORD *)(a2 + 16);
    }
  }
  *(_QWORD *)(a1 + 32) = &qword_1EFEC6AB8;
  if ((v5 & 2) != 0)
  {
    v7 = *(uint64_t **)(a2 + 32);
    if (v7 != &qword_1EFEC6AB8)
    {
      sub_1D4B164E8((_QWORD *)(a1 + 32), (uint64_t)v7);
      v5 = *(_DWORD *)(a2 + 16);
    }
  }
  *(_QWORD *)(a1 + 40) = &qword_1EFEC6AB8;
  if ((v5 & 4) != 0)
  {
    v8 = *(uint64_t **)(a2 + 40);
    if (v8 != &qword_1EFEC6AB8)
      sub_1D4B164E8((_QWORD *)(a1 + 40), (uint64_t)v8);
  }
  return a1;
}

void sub_1D4B056B8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

void sub_1D4B056CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  v2 = a1[3];
  if ((uint64_t *)v2 != &qword_1EFEC6AB8 && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
  }
  v4 = a1[4];
  if ((uint64_t *)v4 != &qword_1EFEC6AB8 && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    operator delete((void *)v4);
  }
  v6 = a1[5];
  if ((uint64_t *)v6 != &qword_1EFEC6AB8 && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    operator delete((void *)v6);
  }
}

_QWORD *sub_1D4B0577C(_QWORD *a1)
{
  uint64_t *v2;

  *a1 = off_1E984A478;
  v2 = a1 + 1;
  sub_1D4B056CC(a1);
  sub_1D4B16364(v2);
  return a1;
}

void sub_1D4B057B8(uint64_t *a1)
{
  uint64_t *v2;

  *a1 = (uint64_t)off_1E984A478;
  v2 = a1 + 1;
  sub_1D4B056CC(a1);
  sub_1D4B16364(v2);
  operator delete(a1);
}

void sub_1D4B057F4(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 7) == 0)
    goto LABEL_17;
  if ((v1 & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      if ((v1 & 2) != 0)
        goto LABEL_10;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
      if ((v1 & 2) != 0)
        goto LABEL_10;
    }
LABEL_4:
    if ((v1 & 4) == 0)
      goto LABEL_17;
LABEL_14:
    v4 = *(_QWORD *)(a1 + 40);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
    goto LABEL_17;
  }
  if ((v1 & 2) == 0)
    goto LABEL_4;
LABEL_10:
  v3 = *(_QWORD *)(a1 + 32);
  if (*(char *)(v3 + 23) < 0)
  {
    **(_BYTE **)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    if ((v1 & 4) == 0)
      goto LABEL_17;
    goto LABEL_14;
  }
  *(_BYTE *)v3 = 0;
  *(_BYTE *)(v3 + 23) = 0;
  if ((v1 & 4) != 0)
    goto LABEL_14;
LABEL_17:
  v6 = *(_BYTE *)(a1 + 8);
  v5 = a1 + 8;
  *(_DWORD *)(v5 + 8) = 0;
  if ((v6 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v5);
}

uint64_t sub_1D4B058A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  std::string *v13;
  BOOL v14;
  uint64_t v15;
  _BYTE v17[32];
  _QWORD v18[2];
  uint64_t *v19;
  __int128 v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 8);
  v19 = (uint64_t *)(a1 + 8);
  v20 = 0uLL;
  v21 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v21 = *(_QWORD *)(v5 + 16);
    v20 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v18, (uint64_t)&v20);
  sub_1D4BB0DD8((uint64_t)v17, (uint64_t)v18, 0);
  while (1)
  {
    v7 = (char *)*a2;
    if (*a2 >= (unint64_t)a2[1])
    {
      v8 = 0;
    }
    else
    {
      v8 = *v7;
      if (*v7 >= 1)
      {
        *a2 = (uint64_t)(v7 + 1);
        v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0)
          goto LABEL_28;
        goto LABEL_10;
      }
    }
    v10 = sub_1D4BB0BD8((uint64_t)a2, v8);
    v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
    if ((v9 & 0x100000000) == 0)
      goto LABEL_28;
LABEL_10:
    v11 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
      if (v9 != 26)
        goto LABEL_28;
      *(_DWORD *)(a1 + 16) |= 4u;
      v13 = *(std::string **)(a1 + 40);
      if (v13 == (std::string *)&qword_1EFEC6AB8)
      {
        sub_1D4B164E8((_QWORD *)(a1 + 40), (uint64_t)&qword_1EFEC6AB8);
        v13 = *(std::string **)(a1 + 40);
      }
      goto LABEL_27;
    }
    if (v11 != 2)
      break;
    if (v9 != 18)
      goto LABEL_28;
    *(_DWORD *)(a1 + 16) |= 2u;
    v13 = *(std::string **)(a1 + 32);
    if (v13 == (std::string *)&qword_1EFEC6AB8)
    {
      sub_1D4B164E8((_QWORD *)(a1 + 32), (uint64_t)&qword_1EFEC6AB8);
      v13 = *(std::string **)(a1 + 32);
    }
LABEL_27:
    v14 = sub_1D4BB4654(a2, v13);
LABEL_30:
    if (!v14)
    {
      v15 = 0;
      goto LABEL_33;
    }
  }
  if (v11 == 1 && v9 == 10)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    v13 = *(std::string **)(a1 + 24);
    if (v13 == (std::string *)&qword_1EFEC6AB8)
    {
      sub_1D4B164E8((_QWORD *)(a1 + 24), (uint64_t)&qword_1EFEC6AB8);
      v13 = *(std::string **)(a1 + 24);
    }
    goto LABEL_27;
  }
LABEL_28:
  if ((_DWORD)v9)
  {
    v14 = sub_1D4BB3060((uint64_t)a2, v9, (uint64_t)v17);
    goto LABEL_30;
  }
  v15 = 1;
LABEL_33:
  sub_1D4BB0EE0((uint64_t)v17);
  sub_1D4B16458(&v19);
  return v15;
}

void sub_1D4B05A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B05AC4(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 1) != 0)
  {
    sub_1D4BB3FE4(1, *(_QWORD *)(a1 + 24), a2);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  sub_1D4BB3FE4(2, *(_QWORD *)(a1 + 32), a2);
  if ((v4 & 4) != 0)
LABEL_4:
    sub_1D4BB3FE4(3, *(_QWORD *)(a1 + 40), a2);
LABEL_5:
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 1) != 0)
    v6 = (char *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v6 = (char *)&qword_1EFEC6AB8;
  if (v6[23] < 0)
    v6 = *(char **)v6;
  if ((v5 & 1) != 0)
    v7 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v7 = &qword_1EFEC6AB8;
  if (*((char *)v7 + 23) < 0)
    v8 = v7[1];
  else
    LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
  return sub_1D4BB0EE4(a2, v6, v8);
}

uint64_t sub_1D4B05B84(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 8);
  if ((v1 & 1) != 0)
    v2 = (uint64_t *)(v1 & 0xFFFFFFFFFFFFFFFELL);
  else
    v2 = &qword_1EFEC6AB8;
  if (*((char *)v2 + 23) < 0)
    v3 = v2[1];
  else
    v3 = *((unsigned __int8 *)v2 + 23);
  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 7) == 0)
    goto LABEL_14;
  if ((v4 & 1) != 0)
  {
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(unsigned __int8 *)(v9 + 23);
    v11 = *(_QWORD *)(v9 + 8);
    if ((v10 & 0x80u) == 0)
      v11 = v10;
    v3 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v4 & 2) == 0)
    {
LABEL_10:
      if ((v4 & 4) == 0)
        goto LABEL_14;
      goto LABEL_11;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(unsigned __int8 *)(v12 + 23);
  v14 = *(_QWORD *)(v12 + 8);
  if ((v13 & 0x80u) == 0)
    v14 = v13;
  v3 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v4 & 4) != 0)
  {
LABEL_11:
    v5 = *(_QWORD *)(a1 + 40);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v7 = v6;
    v3 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_14:
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

std::string *sub_1D4B05C98(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;
  std::string *data;
  const std::string *v7;
  std::string *size;
  const std::string *v9;
  std::string::size_type *v10;
  std::string *v11;
  const std::string *v12;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 7) != 0)
  {
    if ((v5 & 1) != 0)
    {
      result = v3 + 1;
      data = (std::string *)v3[1].__r_.__value_.__l.__data_;
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
      v7 = *(const std::string **)(a2 + 24);
      if (data != v7)
      {
        if (data == (std::string *)&qword_1EFEC6AB8)
        {
          result = (std::string *)sub_1D4B164E8(result, (uint64_t)v7);
          if ((v5 & 2) == 0)
            goto LABEL_14;
          goto LABEL_9;
        }
        result = std::string::operator=(data, v7);
      }
    }
    if ((v5 & 2) == 0)
      goto LABEL_14;
LABEL_9:
    result = (std::string *)((char *)v3 + 32);
    size = (std::string *)v3[1].__r_.__value_.__l.__size_;
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
    v9 = *(const std::string **)(a2 + 32);
    if (size != v9)
    {
      if (size == (std::string *)&qword_1EFEC6AB8)
      {
        result = (std::string *)sub_1D4B164E8(result, (uint64_t)v9);
        if ((v5 & 4) == 0)
          return result;
      }
      else
      {
        result = std::string::operator=(size, v9);
        if ((v5 & 4) == 0)
          return result;
      }
      goto LABEL_15;
    }
LABEL_14:
    if ((v5 & 4) == 0)
      return result;
LABEL_15:
    v11 = (std::string *)v3[1].__r_.__value_.__r.__words[2];
    v10 = &v3[1].__r_.__value_.__r.__words[2];
    result = v11;
    *((_DWORD *)v10 - 6) |= 4u;
    v12 = *(const std::string **)(a2 + 40);
    if (v11 != v12)
    {
      if (result == (std::string *)&qword_1EFEC6AB8)
        return (std::string *)sub_1D4B164E8(v10, (uint64_t)v12);
      else
        return std::string::operator=(result, v12);
    }
  }
  return result;
}

uint64_t sub_1D4B05DC4()
{
  return 1;
}

_QWORD *sub_1D4B05DCC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.DecimalStatistics");
}

_QWORD *sub_1D4B05DDC(_QWORD *a1)
{
  *a1 = off_1E9849ED8;
  a1[1] = 0;
  a1[2] = 0;
  if (atomic_load(dword_1EFEC5C78))
    sub_1D4BAFB3C(dword_1EFEC5C78);
  a1[3] = 0;
  return a1;
}

void sub_1D4B05E38(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B05E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_1E9849ED8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    sub_1D4B16764((unint64_t *)(a1 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

void sub_1D4B05EB0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B05EC4(_QWORD *a1)
{
  *a1 = off_1E9849ED8;
  sub_1D4B16364(a1 + 1);
  return a1;
}

void sub_1D4B05EF4(uint64_t *a1)
{
  *a1 = (uint64_t)off_1E9849ED8;
  sub_1D4B16364(a1 + 1);
  operator delete(a1);
}

void sub_1D4B05F24(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if ((*(_BYTE *)(a1 + 16) & 3) != 0)
    *(_QWORD *)(a1 + 24) = 0;
  v2 = *(_BYTE *)(a1 + 8);
  v1 = a1 + 8;
  *(_DWORD *)(v1 + 8) = 0;
  if ((v2 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v1);
}

uint64_t sub_1D4B05F48(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  char *v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[32];
  _QWORD v20[2];
  uint64_t *v21;
  __int128 v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a1 + 8);
  v21 = (uint64_t *)(a1 + 8);
  v22 = 0uLL;
  v23 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v23 = *(_QWORD *)(v5 + 16);
    v22 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v20, (uint64_t)&v22);
  sub_1D4BB0DD8((uint64_t)v19, (uint64_t)v20, 0);
  do
  {
    while (1)
    {
      v7 = (char *)*a2;
      if (*a2 >= (unint64_t)a2[1])
      {
        v8 = 0;
LABEL_9:
        v10 = sub_1D4BB0BD8((uint64_t)a2, v8);
        v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
        if ((v9 & 0x100000000) == 0)
          goto LABEL_24;
        goto LABEL_10;
      }
      v8 = *v7;
      if (*v7 < 1)
        goto LABEL_9;
      *a2 = (uint64_t)(v7 + 1);
      v9 = v8 | 0x100000000;
      if ((v9 & 0x100000000) == 0)
        goto LABEL_24;
LABEL_10:
      if (v9 >> 3 != 2)
        break;
      if (v9 != 16)
        goto LABEL_24;
      *(_DWORD *)(a1 + 16) |= 2u;
      v12 = (char *)*a2;
      if (*a2 >= (unint64_t)a2[1])
      {
        v13 = 0;
      }
      else
      {
        v13 = *v12;
        v14 = (unsigned int *)(a1 + 28);
        if ((*v12 & 0x80000000) == 0)
        {
LABEL_23:
          *a2 = (uint64_t)(v12 + 1);
          goto LABEL_30;
        }
      }
      v16 = sub_1D4BB08A4(a2, v13);
      v13 = v16;
      v14 = (unsigned int *)(a1 + 28);
      if (v16 < 0)
        goto LABEL_33;
LABEL_30:
      *v14 = -(v13 & 1) ^ (v13 >> 1);
    }
    if (v9 >> 3 == 1 && v9 == 8)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      v12 = (char *)*a2;
      if (*a2 >= (unint64_t)a2[1])
      {
        v13 = 0;
      }
      else
      {
        v13 = *v12;
        v14 = (unsigned int *)(a1 + 24);
        if ((*v12 & 0x80000000) == 0)
          goto LABEL_23;
      }
      v15 = sub_1D4BB08A4(a2, v13);
      v13 = v15;
      v14 = (unsigned int *)(a1 + 24);
      if (v15 < 0)
        break;
      goto LABEL_30;
    }
LABEL_24:
    if (!(_DWORD)v9)
    {
      v17 = 1;
      goto LABEL_32;
    }
  }
  while (sub_1D4BB3060((uint64_t)a2, v9, (uint64_t)v19));
LABEL_33:
  v17 = 0;
LABEL_32:
  sub_1D4BB0EE0((uint64_t)v19);
  sub_1D4B16458(&v21);
  return v17;
}

void sub_1D4B0612C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B06154(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 1) != 0)
    sub_1D4BB39F4(1, *(_DWORD *)(a1 + 24), a2);
  if ((v4 & 2) != 0)
    sub_1D4BB39F4(2, *(_DWORD *)(a1 + 28), a2);
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 1) != 0)
    v6 = (char *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v6 = (char *)&qword_1EFEC6AB8;
  if (v6[23] < 0)
    v6 = *(char **)v6;
  if ((v5 & 1) != 0)
    v7 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v7 = &qword_1EFEC6AB8;
  if (*((char *)v7 + 23) < 0)
    v8 = v7[1];
  else
    LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
  return sub_1D4BB0EE4(a2, v6, v8);
}

uint64_t sub_1D4B061F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;

  v1 = *(_QWORD *)(a1 + 8);
  if ((v1 & 1) != 0)
    v2 = (uint64_t *)(v1 & 0xFFFFFFFFFFFFFFFELL);
  else
    v2 = &qword_1EFEC6AB8;
  if (*((char *)v2 + 23) < 0)
    v3 = v2[1];
  else
    v3 = *((unsigned __int8 *)v2 + 23);
  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 3) != 0)
  {
    if ((v4 & 1) != 0)
      v3 += ((9 * (__clz((2 * *(_DWORD *)(a1 + 24)) ^ (*(int *)(a1 + 24) >> 31) | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v4 & 2) != 0)
      v3 += ((9 * (__clz((2 * *(_DWORD *)(a1 + 28)) ^ (*(int *)(a1 + 28) >> 31) | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

std::string *sub_1D4B0629C(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 3) != 0)
  {
    if ((v5 & 1) != 0)
      LODWORD(v3[1].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
    if ((v5 & 2) != 0)
      HIDWORD(v3[1].__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 28);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= v5;
  }
  return result;
}

uint64_t sub_1D4B06300()
{
  return 1;
}

_QWORD *sub_1D4B06308@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.DateStatistics");
}

uint64_t sub_1D4B06318(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E984A6F8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (atomic_load(dword_1EFEC5DD8))
    sub_1D4BAFB3C(dword_1EFEC5DD8);
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return a1;
}

void sub_1D4B06380(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B06394(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a1 = off_1E984A6F8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    sub_1D4B16764((unint64_t *)(a1 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_OWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  return a1;
}

void sub_1D4B06408(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B0641C(_QWORD *a1)
{
  *a1 = off_1E984A6F8;
  sub_1D4B16364(a1 + 1);
  return a1;
}

void sub_1D4B0644C(uint64_t *a1)
{
  *a1 = (uint64_t)off_1E984A6F8;
  sub_1D4B16364(a1 + 1);
  operator delete(a1);
}

void sub_1D4B0647C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if ((*(_BYTE *)(a1 + 16) & 0x3F) != 0)
  {
    *(_QWORD *)(a1 + 56) = 0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
  }
  v2 = *(_BYTE *)(a1 + 8);
  v1 = a1 + 8;
  *(_DWORD *)(v1 + 8) = 0;
  if ((v2 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v1);
}

uint64_t sub_1D4B064AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  char *v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  int v20;
  char *v21;
  int v22;
  char v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[32];
  _QWORD v32[2];
  uint64_t *v33;
  __int128 v34;
  uint64_t v35;

  v4 = *(_QWORD *)(a1 + 8);
  v33 = (uint64_t *)(a1 + 8);
  v34 = 0uLL;
  v35 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v35 = *(_QWORD *)(v5 + 16);
    v34 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v32, (uint64_t)&v34);
  sub_1D4BB0DD8((uint64_t)v31, (uint64_t)v32, 0);
  while (1)
  {
    while (1)
    {
      v7 = (char *)*a2;
      if (*a2 < (unint64_t)a2[1])
        break;
      v8 = 0;
LABEL_9:
      v10 = sub_1D4BB0BD8((uint64_t)a2, v8);
      v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
      if ((v9 & 0x100000000) == 0)
        goto LABEL_35;
LABEL_10:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 8)
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) |= 1u;
          v11 = (char *)*a2;
          if (*a2 >= (unint64_t)a2[1] || *v11 < 0)
          {
            v12 = sub_1D4BB06F0((uint64_t)a2);
            if ((v23 & 1) == 0)
              goto LABEL_54;
          }
          else
          {
            v12 = *v11;
            *a2 = (uint64_t)(v11 + 1);
          }
          *(_QWORD *)(a1 + 24) = -(uint64_t)(v12 & 1) ^ (v12 >> 1);
          continue;
        case 2u:
          if (v9 != 16)
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) |= 2u;
          v13 = (char *)*a2;
          if (*a2 >= (unint64_t)a2[1] || *v13 < 0)
          {
            v14 = sub_1D4BB06F0((uint64_t)a2);
            if ((v24 & 1) == 0)
              goto LABEL_54;
          }
          else
          {
            v14 = *v13;
            *a2 = (uint64_t)(v13 + 1);
          }
          *(_QWORD *)(a1 + 32) = -(uint64_t)(v14 & 1) ^ (v14 >> 1);
          continue;
        case 3u:
          if (v9 != 24)
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) |= 4u;
          v15 = (char *)*a2;
          if (*a2 >= (unint64_t)a2[1] || *v15 < 0)
          {
            v16 = sub_1D4BB06F0((uint64_t)a2);
            if ((v25 & 1) == 0)
              goto LABEL_54;
          }
          else
          {
            v16 = *v15;
            *a2 = (uint64_t)(v15 + 1);
          }
          *(_QWORD *)(a1 + 40) = -(uint64_t)(v16 & 1) ^ (v16 >> 1);
          continue;
        case 4u:
          if (v9 != 32)
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) |= 8u;
          v17 = (char *)*a2;
          if (*a2 >= (unint64_t)a2[1] || *v17 < 0)
          {
            v18 = sub_1D4BB06F0((uint64_t)a2);
            if ((v26 & 1) == 0)
              goto LABEL_54;
          }
          else
          {
            v18 = *v17;
            *a2 = (uint64_t)(v17 + 1);
          }
          *(_QWORD *)(a1 + 48) = -(uint64_t)(v18 & 1) ^ (v18 >> 1);
          continue;
        case 5u:
          if (v9 != 40)
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) |= 0x10u;
          v19 = (char *)*a2;
          if (*a2 >= (unint64_t)a2[1])
          {
            v20 = 0;
          }
          else
          {
            v20 = *v19;
            if ((*v19 & 0x80000000) == 0)
            {
              *a2 = (uint64_t)(v19 + 1);
              goto LABEL_48;
            }
          }
          v27 = sub_1D4BB08A4(a2, v20);
          v20 = v27;
          if (v27 < 0)
            goto LABEL_54;
LABEL_48:
          *(_DWORD *)(a1 + 56) = v20;
          continue;
        case 6u:
          if (v9 != 48)
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) |= 0x20u;
          v21 = (char *)*a2;
          if (*a2 >= (unint64_t)a2[1])
          {
            v22 = 0;
          }
          else
          {
            v22 = *v21;
            if ((*v21 & 0x80000000) == 0)
            {
              *a2 = (uint64_t)(v21 + 1);
              goto LABEL_51;
            }
          }
          v28 = sub_1D4BB08A4(a2, v22);
          v22 = v28;
          if (v28 < 0)
          {
LABEL_54:
            v29 = 0;
            goto LABEL_53;
          }
LABEL_51:
          *(_DWORD *)(a1 + 60) = v22;
          break;
        default:
          goto LABEL_35;
      }
    }
    v8 = *v7;
    if (*v7 < 1)
      goto LABEL_9;
    *a2 = (uint64_t)(v7 + 1);
    v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) != 0)
      goto LABEL_10;
LABEL_35:
    if (!(_DWORD)v9)
      break;
    if (!sub_1D4BB3060((uint64_t)a2, v9, (uint64_t)v31))
      goto LABEL_54;
  }
  v29 = 1;
LABEL_53:
  sub_1D4BB0EE0((uint64_t)v31);
  sub_1D4B16458(&v33);
  return v29;
}

void sub_1D4B06800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B06828(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 1) != 0)
  {
    sub_1D4BB3B04(1, *(_QWORD *)(a1 + 24), a2);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  sub_1D4BB3B04(2, *(_QWORD *)(a1 + 32), a2);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  sub_1D4BB3B04(3, *(_QWORD *)(a1 + 40), a2);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  sub_1D4BB3B04(4, *(_QWORD *)(a1 + 48), a2);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_22:
  sub_1D4BB36D0(5, *(_DWORD *)(a1 + 56), a2);
  if ((v4 & 0x20) != 0)
LABEL_7:
    sub_1D4BB36D0(6, *(_DWORD *)(a1 + 60), a2);
LABEL_8:
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 1) != 0)
    v6 = (char *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v6 = (char *)&qword_1EFEC6AB8;
  if (v6[23] < 0)
    v6 = *(char **)v6;
  if ((v5 & 1) != 0)
    v7 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v7 = &qword_1EFEC6AB8;
  if (*((char *)v7 + 23) < 0)
    v8 = v7[1];
  else
    LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
  return sub_1D4BB0EE4(a2, v6, v8);
}

uint64_t sub_1D4B06930(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 8);
  if ((v1 & 1) != 0)
    v2 = (uint64_t *)(v1 & 0xFFFFFFFFFFFFFFFELL);
  else
    v2 = &qword_1EFEC6AB8;
  if (*((char *)v2 + 23) < 0)
    v3 = v2[1];
  else
    v3 = *((unsigned __int8 *)v2 + 23);
  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 0x3F) == 0)
    goto LABEL_18;
  if ((v4 & 1) != 0)
  {
    v3 += ((9 * (__clz((2 * *(_QWORD *)(a1 + 24)) ^ (*(uint64_t *)(a1 + 24) >> 63) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v4 & 2) == 0)
    {
LABEL_10:
      if ((v4 & 4) == 0)
        goto LABEL_11;
      goto LABEL_21;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_10;
  }
  v3 += ((9 * (__clz((2 * *(_QWORD *)(a1 + 32)) ^ (*(uint64_t *)(a1 + 32) >> 63) | 1) ^ 0x3F) + 73) >> 6) + 1;
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  v3 += ((9 * (__clz((2 * *(_QWORD *)(a1 + 40)) ^ (*(uint64_t *)(a1 + 40) >> 63) | 1) ^ 0x3F) + 73) >> 6) + 1;
  if ((v4 & 8) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  v3 += ((9 * (__clz((2 * *(_QWORD *)(a1 + 48)) ^ (*(uint64_t *)(a1 + 48) >> 63) | 1) ^ 0x3F) + 73) >> 6) + 1;
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_14;
  }
LABEL_23:
  v9 = *(_DWORD *)(a1 + 56);
  v10 = ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v9 >= 0)
    v11 = v10;
  else
    v11 = 11;
  v3 += v11;
  if ((v4 & 0x20) != 0)
  {
LABEL_14:
    v5 = *(_DWORD *)(a1 + 60);
    v6 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if (v5 >= 0)
      v7 = v6;
    else
      v7 = 11;
    v3 += v7;
  }
LABEL_18:
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

std::string *sub_1D4B06AA8(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 0x3F) != 0)
  {
    if ((v5 & 1) != 0)
    {
      v3[1].__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 24);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_15;
      }
    }
    else if ((v5 & 2) == 0)
    {
      goto LABEL_6;
    }
    v3[1].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_8;
      goto LABEL_16;
    }
LABEL_15:
    v3[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_17;
    }
LABEL_16:
    v3[2].__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 48);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0)
      {
LABEL_11:
        LODWORD(v3->__r_.__value_.__r.__words[2]) |= v5;
        return result;
      }
LABEL_10:
      HIDWORD(v3[2].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 60);
      goto LABEL_11;
    }
LABEL_17:
    LODWORD(v3[2].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 56);
    if ((v5 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1D4B06B54()
{
  return 1;
}

_QWORD *sub_1D4B06B5C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.TimestampStatistics");
}

_QWORD *sub_1D4B06B6C(_QWORD *a1)
{
  *a1 = off_1E9849F78;
  a1[1] = 0;
  a1[2] = 0;
  if (atomic_load(dword_1EFEC5C90))
    sub_1D4BAFB3C(dword_1EFEC5C90);
  a1[3] = 0;
  return a1;
}

void sub_1D4B06BC8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B06BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_1E9849F78;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    sub_1D4B16764((unint64_t *)(a1 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

void sub_1D4B06C40(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B06C54(_QWORD *a1)
{
  *a1 = off_1E9849F78;
  sub_1D4B16364(a1 + 1);
  return a1;
}

void sub_1D4B06C84(uint64_t *a1)
{
  *a1 = (uint64_t)off_1E9849F78;
  sub_1D4B16364(a1 + 1);
  operator delete(a1);
}

void sub_1D4B06CB4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(a1 + 8);
  v1 = a1 + 8;
  *(_QWORD *)(v1 + 16) = 0;
  *(_DWORD *)(v1 + 8) = 0;
  if ((v2 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v1);
}

uint64_t sub_1D4B06CCC(uint64_t a1, char **a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  char *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  _BYTE v17[32];
  _QWORD v18[2];
  uint64_t *v19;
  __int128 v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a1 + 8);
  v19 = (uint64_t *)(a1 + 8);
  v20 = 0uLL;
  v21 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v21 = *(_QWORD *)(v5 + 16);
    v20 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v18, (uint64_t)&v20);
  sub_1D4BB0DD8((uint64_t)v17, (uint64_t)v18, 0);
  do
  {
    while (1)
    {
      v7 = *a2;
      if (*a2 >= a2[1])
      {
        v8 = 0;
LABEL_9:
        v10 = sub_1D4BB0BD8((uint64_t)a2, v8);
        v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
        if ((v9 & 0x100000000) == 0)
          break;
        goto LABEL_10;
      }
      v8 = *v7;
      if (*v7 < 1)
        goto LABEL_9;
      *a2 = v7 + 1;
      v9 = v8 | 0x100000000;
      if ((v9 & 0x100000000) == 0)
        break;
LABEL_10:
      if (v9 != 8 || (v9 & 0xFFFFFFF8) != 8)
        break;
      *(_DWORD *)(a1 + 16) |= 1u;
      v12 = *a2;
      if (*a2 >= a2[1] || *v12 < 0)
      {
        v13 = sub_1D4BB06F0((uint64_t)a2);
        if ((v14 & 1) == 0)
          goto LABEL_24;
      }
      else
      {
        v13 = *v12;
        *a2 = v12 + 1;
      }
      *(_QWORD *)(a1 + 24) = -(uint64_t)(v13 & 1) ^ (v13 >> 1);
    }
    if (!(_DWORD)v9)
    {
      v15 = 1;
      goto LABEL_23;
    }
  }
  while (sub_1D4BB3060((uint64_t)a2, v9, (uint64_t)v17));
LABEL_24:
  v15 = 0;
LABEL_23:
  sub_1D4BB0EE0((uint64_t)v17);
  sub_1D4B16458(&v19);
  return v15;
}

void sub_1D4B06E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B06E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    sub_1D4BB3B04(1, *(_QWORD *)(a1 + 24), a2);
  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 1) != 0)
    v5 = (char *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  else
    v5 = (char *)&qword_1EFEC6AB8;
  if (v5[23] < 0)
    v5 = *(char **)v5;
  if ((v4 & 1) != 0)
    v6 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL);
  else
    v6 = &qword_1EFEC6AB8;
  if (*((char *)v6 + 23) < 0)
    v7 = v6[1];
  else
    LODWORD(v7) = *((unsigned __int8 *)v6 + 23);
  return sub_1D4BB0EE4(a2, v5, v7);
}

uint64_t sub_1D4B06EE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 8);
  if ((v1 & 1) != 0)
    v2 = (uint64_t *)(v1 & 0xFFFFFFFFFFFFFFFELL);
  else
    v2 = &qword_1EFEC6AB8;
  if (*((char *)v2 + 23) < 0)
    v3 = v2[1];
  else
    v3 = *((unsigned __int8 *)v2 + 23);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 += ((9 * (__clz((2 * *(_QWORD *)(a1 + 24)) ^ (*(uint64_t *)(a1 + 24) >> 63) | 1) ^ 0x3F) + 73) >> 6) + 1;
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

std::string *sub_1D4B06F4C(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  std::string::size_type v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v5 = *(_QWORD *)(a2 + 24);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
    v3[1].__r_.__value_.__r.__words[0] = v5;
  }
  return result;
}

uint64_t sub_1D4B06F9C()
{
  return 1;
}

_QWORD *sub_1D4B06FA4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.BinaryStatistics");
}

_QWORD *sub_1D4B06FB4(_QWORD *a1)
{
  *a1 = off_1E984A798;
  a1[1] = 0;
  a1[2] = 0;
  if (atomic_load(dword_1EFEC5DF0))
    sub_1D4BAFB3C(dword_1EFEC5DF0);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  return a1;
}

void sub_1D4B07014(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B07028(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = off_1E984A798;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    sub_1D4B16764((unint64_t *)(a1 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  return a1;
}

void sub_1D4B07094(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B070A8(_QWORD *a1)
{
  *a1 = off_1E984A798;
  sub_1D4B16364(a1 + 1);
  return a1;
}

void sub_1D4B070D8(uint64_t *a1)
{
  *a1 = (uint64_t)off_1E984A798;
  sub_1D4B16364(a1 + 1);
  operator delete(a1);
}

void sub_1D4B07108(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if ((*(_BYTE *)(a1 + 16) & 7) != 0)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
  }
  v2 = *(_BYTE *)(a1 + 8);
  v1 = a1 + 8;
  *(_DWORD *)(v1 + 8) = 0;
  if ((v2 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v1);
}

uint64_t sub_1D4B07130(uint64_t a1, char **a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  _BYTE v21[32];
  _QWORD v22[2];
  uint64_t *v23;
  __int128 v24;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 8);
  v23 = (uint64_t *)(a1 + 8);
  v24 = 0uLL;
  v25 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v25 = *(_QWORD *)(v5 + 16);
    v24 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v22, (uint64_t)&v24);
  sub_1D4BB0DD8((uint64_t)v21, (uint64_t)v22, 0);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v7 = *a2;
          if (*a2 >= a2[1])
          {
            v8 = 0;
LABEL_9:
            v10 = sub_1D4BB0BD8((uint64_t)a2, v8);
            v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
            if ((v9 & 0x100000000) == 0)
              goto LABEL_29;
            goto LABEL_10;
          }
          v8 = *v7;
          if (*v7 < 1)
            goto LABEL_9;
          *a2 = v7 + 1;
          v9 = v8 | 0x100000000;
          if ((v9 & 0x100000000) == 0)
            goto LABEL_29;
LABEL_10:
          v11 = v9 >> 3;
          if (v9 >> 3 != 3)
            break;
          if (v9 != 24)
            goto LABEL_29;
          *(_DWORD *)(a1 + 16) |= 4u;
          v13 = *a2;
          if (*a2 < a2[1] && (*v13 & 0x80000000) == 0)
          {
            v14 = *v13;
            v15 = (_QWORD *)(a1 + 40);
            goto LABEL_28;
          }
          *(_QWORD *)(a1 + 40) = sub_1D4BB06F0((uint64_t)a2);
          if ((v17 & 1) == 0)
            goto LABEL_37;
        }
        if (v11 != 2)
          break;
        if (v9 != 16)
          goto LABEL_29;
        *(_DWORD *)(a1 + 16) |= 2u;
        v13 = *a2;
        if (*a2 >= a2[1] || *v13 < 0)
        {
          *(_QWORD *)(a1 + 32) = sub_1D4BB06F0((uint64_t)a2);
          if ((v18 & 1) == 0)
          {
LABEL_37:
            v19 = 0;
            goto LABEL_39;
          }
        }
        else
        {
          v14 = *v13;
          v15 = (_QWORD *)(a1 + 32);
LABEL_28:
          *v15 = v14;
          *a2 = v13 + 1;
        }
      }
      if (v11 != 1 || v9 != 8)
        break;
      *(_DWORD *)(a1 + 16) |= 1u;
      v13 = *a2;
      if (*a2 < a2[1] && (*v13 & 0x80000000) == 0)
      {
        v14 = *v13;
        v15 = (_QWORD *)(a1 + 24);
        goto LABEL_28;
      }
      *(_QWORD *)(a1 + 24) = sub_1D4BB06F0((uint64_t)a2);
      if ((v16 & 1) == 0)
        goto LABEL_37;
    }
LABEL_29:
    if (!(_DWORD)v9)
      break;
    if (!sub_1D4BB3060((uint64_t)a2, v9, (uint64_t)v21))
      goto LABEL_37;
  }
  v19 = 1;
LABEL_39:
  sub_1D4BB0EE0((uint64_t)v21);
  sub_1D4B16458(&v23);
  return v19;
}

void sub_1D4B07354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B0737C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 1) != 0)
  {
    sub_1D4BB38E8(1, *(_QWORD *)(a1 + 24), a2);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  sub_1D4BB38E8(2, *(_QWORD *)(a1 + 32), a2);
  if ((v4 & 4) != 0)
LABEL_4:
    sub_1D4BB38E8(3, *(_QWORD *)(a1 + 40), a2);
LABEL_5:
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 1) != 0)
    v6 = (char *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v6 = (char *)&qword_1EFEC6AB8;
  if (v6[23] < 0)
    v6 = *(char **)v6;
  if ((v5 & 1) != 0)
    v7 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v7 = &qword_1EFEC6AB8;
  if (*((char *)v7 + 23) < 0)
    v8 = v7[1];
  else
    LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
  return sub_1D4BB0EE4(a2, v6, v8);
}

uint64_t sub_1D4B0743C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;

  v1 = *(_QWORD *)(a1 + 8);
  if ((v1 & 1) != 0)
    v2 = (uint64_t *)(v1 & 0xFFFFFFFFFFFFFFFELL);
  else
    v2 = &qword_1EFEC6AB8;
  if (*((char *)v2 + 23) < 0)
    v3 = v2[1];
  else
    v3 = *((unsigned __int8 *)v2 + 23);
  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 7) == 0)
    goto LABEL_12;
  if ((v4 & 1) == 0)
  {
    if ((v4 & 2) == 0)
      goto LABEL_10;
LABEL_14:
    v3 += ((9 * (__clz(*(_QWORD *)(a1 + 32) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  v3 += ((9 * (__clz(*(_QWORD *)(a1 + 24) | 1) ^ 0x3F) + 73) >> 6) + 1;
  if ((v4 & 2) != 0)
    goto LABEL_14;
LABEL_10:
  if ((v4 & 4) != 0)
LABEL_11:
    v3 += ((9 * (__clz(*(_QWORD *)(a1 + 40) | 1) ^ 0x3F) + 73) >> 6) + 1;
LABEL_12:
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

uint64_t sub_1D4B074FC()
{
  return 1;
}

_QWORD *sub_1D4B07504@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.CollectionStatistics");
}

uint64_t sub_1D4B07514(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E984A158;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (atomic_load(dword_1EFEC5CC0))
    sub_1D4BAFB3C(dword_1EFEC5CC0);
  *(_OWORD *)(a1 + 97) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return a1;
}

void sub_1D4B07588(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B075A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  __int128 v15;

  *(_QWORD *)a1 = off_1E984A158;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    sub_1D4B16764((unint64_t *)(a1 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 1) != 0)
  {
    v7 = operator new(0x30uLL);
    sub_1D4B036F0((uint64_t)v7, *(_QWORD *)(a2 + 24));
    *(_QWORD *)(a1 + 24) = v7;
    v5 = *(_DWORD *)(a2 + 16);
    if ((v5 & 2) == 0)
    {
LABEL_5:
      *(_QWORD *)(a1 + 32) = 0;
      if ((v5 & 4) == 0)
        goto LABEL_6;
      goto LABEL_15;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
    if ((v5 & 2) == 0)
      goto LABEL_5;
  }
  v8 = operator new(0x30uLL);
  sub_1D4B03CF4((uint64_t)v8, *(_QWORD *)(a2 + 32));
  *(_QWORD *)(a1 + 32) = v8;
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    *(_QWORD *)(a1 + 40) = 0;
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v9 = operator new(0x40uLL);
  sub_1D4B04290((uint64_t)v9, *(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = v9;
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    *(_QWORD *)(a1 + 48) = 0;
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  v10 = operator new(0x30uLL);
  sub_1D4B04D68((uint64_t)v10, *(_QWORD *)(a2 + 48));
  *(_QWORD *)(a1 + 48) = v10;
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    *(_QWORD *)(a1 + 56) = 0;
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  v11 = operator new(0x30uLL);
  sub_1D4B055F4((uint64_t)v11, *(_QWORD *)(a2 + 56));
  *(_QWORD *)(a1 + 56) = v11;
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    *(_QWORD *)(a1 + 64) = 0;
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_19;
  }
LABEL_18:
  v12 = operator new(0x20uLL);
  sub_1D4B05E4C((uint64_t)v12, *(_QWORD *)(a2 + 64));
  *(_QWORD *)(a1 + 64) = v12;
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    *(_QWORD *)(a1 + 72) = 0;
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
LABEL_20:
    v14 = operator new(0x40uLL);
    sub_1D4B06394((uint64_t)v14, *(_QWORD *)(a2 + 80));
    *(_QWORD *)(a1 + 80) = v14;
    if ((*(_DWORD *)(a2 + 16) & 0x100) == 0)
      goto LABEL_12;
LABEL_21:
    v6 = operator new(0x30uLL);
    sub_1D4B07028((uint64_t)v6, *(_QWORD *)(a2 + 88));
    goto LABEL_22;
  }
LABEL_19:
  v13 = operator new(0x20uLL);
  sub_1D4B06BDC((uint64_t)v13, *(_QWORD *)(a2 + 72));
  *(_QWORD *)(a1 + 72) = v13;
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 0x80) != 0)
    goto LABEL_20;
LABEL_11:
  *(_QWORD *)(a1 + 80) = 0;
  if ((v5 & 0x100) != 0)
    goto LABEL_21;
LABEL_12:
  v6 = 0;
LABEL_22:
  *(_QWORD *)(a1 + 88) = v6;
  v15 = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v15;
  return a1;
}

void sub_1D4B07774(_Unwind_Exception *a1)
{
  uint64_t *v1;
  void *v2;

  operator delete(v2);
  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B077BC(_QWORD *a1)
{
  *a1 = off_1E984A158;
  sub_1D4B077F8(a1);
  sub_1D4B16364(a1 + 1);
  return a1;
}

_QWORD *sub_1D4B077F8(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result != (_QWORD *)&unk_1EFEC66B0)
  {
    v1 = result;
    v2 = result[3];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[4];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[5];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[6];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[7];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v1[8];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v1[9];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v1[10];
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    result = (_QWORD *)v1[11];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1D4B078E4(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B077BC(a1);
  operator delete(v1);
}

void sub_1D4B078F8(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  v2 = *(_DWORD *)(a1 + 16);
  if (!(_BYTE)v2)
    goto LABEL_22;
  if ((v2 & 1) != 0)
  {
    sub_1D4B037D0(*(_QWORD *)(a1 + 24));
    if ((v2 & 2) == 0)
    {
LABEL_4:
      if ((v2 & 4) == 0)
        goto LABEL_5;
      goto LABEL_9;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_4;
  }
  sub_1D4B03DD4(*(_QWORD *)(a1 + 32));
  if ((v2 & 4) == 0)
  {
LABEL_5:
    if ((v2 & 8) == 0)
      goto LABEL_12;
    goto LABEL_10;
  }
LABEL_9:
  sub_1D4B044E0(*(_QWORD *)(a1 + 40));
  if ((v2 & 8) == 0)
    goto LABEL_12;
LABEL_10:
  v3 = *(_QWORD *)(a1 + 48);
  v5 = *(_BYTE *)(v3 + 8);
  v4 = v3 + 8;
  *(_DWORD *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 8) = 0;
  if ((v5 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v4);
LABEL_12:
  if ((v2 & 0x10) == 0)
  {
    if ((v2 & 0x20) == 0)
      goto LABEL_14;
LABEL_17:
    sub_1D4B05F24(*(_QWORD *)(a1 + 64));
    if ((v2 & 0x40) == 0)
      goto LABEL_20;
LABEL_18:
    v6 = *(_QWORD *)(a1 + 72);
    v8 = *(_BYTE *)(v6 + 8);
    v7 = v6 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_DWORD *)(v7 + 8) = 0;
    if ((v8 & 1) != 0)
      sub_1D4B167AC((unint64_t *)v7);
    goto LABEL_20;
  }
  sub_1D4B057F4(*(_QWORD *)(a1 + 56));
  if ((v2 & 0x20) != 0)
    goto LABEL_17;
LABEL_14:
  if ((v2 & 0x40) != 0)
    goto LABEL_18;
LABEL_20:
  if ((v2 & 0x80) != 0)
    sub_1D4B0647C(*(_QWORD *)(a1 + 80));
LABEL_22:
  if ((v2 & 0x100) != 0)
    sub_1D4B07108(*(_QWORD *)(a1 + 88));
  if ((v2 & 0xE00) != 0)
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_BYTE *)(a1 + 112) = 0;
  }
  v10 = *(_BYTE *)(a1 + 8);
  v9 = a1 + 8;
  *(_DWORD *)(v9 + 8) = 0;
  if ((v10 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v9);
}

uint64_t sub_1D4B079F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  BOOL v11;
  unsigned __int8 *v12;
  _QWORD *v13;
  char *v14;
  int v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  int v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  int v21;
  void *v22;
  unsigned __int8 *v23;
  int v24;
  _QWORD *v25;
  unsigned __int8 *v26;
  int v27;
  _QWORD *v28;
  unsigned __int8 *v29;
  int v30;
  _QWORD *v31;
  unsigned __int8 *v32;
  int v33;
  void *v34;
  unsigned __int8 *v35;
  int v36;
  unsigned __int8 *v37;
  unint64_t v38;
  _QWORD *v39;
  unsigned __int8 *v40;
  int v41;
  char v42;
  char v43;
  char v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _BYTE v57[32];
  _QWORD v58[2];
  uint64_t *v59;
  __int128 v60;
  uint64_t v61;

  v4 = *(_QWORD *)(a1 + 8);
  v59 = (uint64_t *)(a1 + 8);
  v60 = 0uLL;
  v61 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v61 = *(_QWORD *)(v5 + 16);
    v60 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v58, (uint64_t)&v60);
  sub_1D4BB0DD8((uint64_t)v57, (uint64_t)v58, 0);
  while (1)
  {
    v7 = *(unsigned __int8 **)a2;
    if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
      break;
    v8 = *v7;
    if ((char)*v7 < 1)
      goto LABEL_9;
    *(_QWORD *)a2 = v7 + 1;
    v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) == 0)
      goto LABEL_10;
LABEL_14:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 8)
          goto LABEL_10;
        *(_DWORD *)(a1 + 16) |= 0x200u;
        v12 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 < *(_QWORD *)(a2 + 8) && ((char)*v12 & 0x80000000) == 0)
        {
          *(_QWORD *)(a1 + 96) = *v12;
          goto LABEL_75;
        }
        *(_QWORD *)(a1 + 96) = sub_1D4BB06F0(a2);
        if ((v42 & 1) == 0)
          goto LABEL_126;
        continue;
      case 2u:
        if (v9 != 18)
          goto LABEL_10;
        *(_DWORD *)(a1 + 16) |= 1u;
        v13 = *(_QWORD **)(a1 + 24);
        if (!v13)
        {
          v13 = sub_1D4B150E0(0);
          *(_QWORD *)(a1 + 24) = v13;
        }
        v14 = *(char **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v14 < 0)
        {
          v15 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v15 < 0)
            goto LABEL_126;
        }
        else
        {
          v15 = *v14;
          *(_QWORD *)a2 = v14 + 1;
        }
        v45 = sub_1D4BAFFA4(a2, v15);
        v46 = v45;
        if ((v45 & 0x8000000000000000) == 0 && sub_1D4B037F8((uint64_t)v13, (char **)a2))
          goto LABEL_123;
        goto LABEL_126;
      case 3u:
        if (v9 != 26)
          goto LABEL_10;
        *(_DWORD *)(a1 + 16) |= 2u;
        v16 = *(_QWORD **)(a1 + 32);
        if (!v16)
        {
          v16 = sub_1D4B15168(0);
          *(_QWORD *)(a1 + 32) = v16;
        }
        v17 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v17 < 0)
        {
          v18 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v18 < 0)
            goto LABEL_126;
        }
        else
        {
          v18 = *v17;
          *(_QWORD *)a2 = v17 + 1;
        }
        v47 = sub_1D4BAFFA4(a2, v18);
        v46 = v47;
        if ((v47 & 0x8000000000000000) == 0 && sub_1D4B03DFC((uint64_t)v16, (char **)a2))
          goto LABEL_123;
        goto LABEL_126;
      case 4u:
        if (v9 != 34)
          goto LABEL_10;
        *(_DWORD *)(a1 + 16) |= 4u;
        v19 = *(_QWORD **)(a1 + 40);
        if (!v19)
        {
          v19 = sub_1D4B151F0(0);
          *(_QWORD *)(a1 + 40) = v19;
        }
        v20 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v20 < 0)
        {
          v21 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v21 < 0)
            goto LABEL_126;
        }
        else
        {
          v21 = *v20;
          *(_QWORD *)a2 = v20 + 1;
        }
        v48 = sub_1D4BAFFA4(a2, v21);
        v46 = v48;
        if ((v48 & 0x8000000000000000) == 0 && sub_1D4B045C0((uint64_t)v19, (uint64_t *)a2))
          goto LABEL_123;
        goto LABEL_126;
      case 5u:
        if (v9 != 42)
          goto LABEL_10;
        *(_DWORD *)(a1 + 16) |= 8u;
        v22 = *(void **)(a1 + 48);
        if (!v22)
        {
          v22 = sub_1D4B15278(0);
          *(_QWORD *)(a1 + 48) = v22;
        }
        v23 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v23 < 0)
        {
          v24 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v24 < 0)
            goto LABEL_126;
        }
        else
        {
          v24 = *v23;
          *(_QWORD *)a2 = v23 + 1;
        }
        v49 = sub_1D4BAFFA4(a2, v24);
        v46 = v49;
        if ((v49 & 0x8000000000000000) == 0 && sub_1D4B04EB8((uint64_t)v22, a2))
          goto LABEL_123;
        goto LABEL_126;
      case 6u:
        if (v9 != 50)
          goto LABEL_10;
        *(_DWORD *)(a1 + 16) |= 0x10u;
        v25 = *(_QWORD **)(a1 + 56);
        if (!v25)
        {
          v25 = sub_1D4B15300(0);
          *(_QWORD *)(a1 + 56) = v25;
        }
        v26 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v26 < 0)
        {
          v27 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v27 < 0)
            goto LABEL_126;
        }
        else
        {
          v27 = *v26;
          *(_QWORD *)a2 = v26 + 1;
        }
        v50 = sub_1D4BAFFA4(a2, v27);
        v46 = v50;
        if ((v50 & 0x8000000000000000) == 0 && sub_1D4B058A0((uint64_t)v25, (uint64_t *)a2))
          goto LABEL_123;
        goto LABEL_126;
      case 7u:
        if (v9 != 58)
          goto LABEL_10;
        *(_DWORD *)(a1 + 16) |= 0x20u;
        v28 = *(_QWORD **)(a1 + 64);
        if (!v28)
        {
          v28 = sub_1D4B15388(0);
          *(_QWORD *)(a1 + 64) = v28;
        }
        v29 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v29 < 0)
        {
          v30 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v30 < 0)
            goto LABEL_126;
        }
        else
        {
          v30 = *v29;
          *(_QWORD *)a2 = v29 + 1;
        }
        v51 = sub_1D4BAFFA4(a2, v30);
        v46 = v51;
        if ((v51 & 0x8000000000000000) == 0 && sub_1D4B05F48((uint64_t)v28, (uint64_t *)a2))
          goto LABEL_123;
        goto LABEL_126;
      case 8u:
        if (v9 != 66)
          goto LABEL_10;
        *(_DWORD *)(a1 + 16) |= 0x40u;
        v31 = *(_QWORD **)(a1 + 72);
        if (!v31)
        {
          v31 = sub_1D4B15498(0);
          *(_QWORD *)(a1 + 72) = v31;
        }
        v32 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v32 < 0)
        {
          v33 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v33 < 0)
            goto LABEL_126;
        }
        else
        {
          v33 = *v32;
          *(_QWORD *)a2 = v32 + 1;
        }
        v52 = sub_1D4BAFFA4(a2, v33);
        v46 = v52;
        if ((v52 & 0x8000000000000000) == 0 && sub_1D4B06CCC((uint64_t)v31, (char **)a2))
          goto LABEL_123;
        goto LABEL_126;
      case 9u:
        if (v9 != 74)
          goto LABEL_10;
        *(_DWORD *)(a1 + 16) |= 0x80u;
        v34 = *(void **)(a1 + 80);
        if (!v34)
        {
          v34 = sub_1D4B15410(0);
          *(_QWORD *)(a1 + 80) = v34;
        }
        v35 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v35 < 0)
        {
          v36 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v36 < 0)
            goto LABEL_126;
        }
        else
        {
          v36 = *v35;
          *(_QWORD *)a2 = v35 + 1;
        }
        v53 = sub_1D4BAFFA4(a2, v36);
        v46 = v53;
        if ((v53 & 0x8000000000000000) == 0 && sub_1D4B064AC((uint64_t)v34, (uint64_t *)a2))
          goto LABEL_123;
        goto LABEL_126;
      case 0xAu:
        if (v9 != 80)
          goto LABEL_10;
        *(_DWORD *)(a1 + 16) |= 0x800u;
        v37 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v37 < 0)
        {
          v38 = sub_1D4BB06F0(a2);
          if ((v43 & 1) == 0)
            goto LABEL_126;
        }
        else
        {
          v38 = *v37;
          *(_QWORD *)a2 = v37 + 1;
        }
        *(_BYTE *)(a1 + 112) = v38 != 0;
        continue;
      case 0xBu:
        if (v9 != 88)
          goto LABEL_10;
        *(_DWORD *)(a1 + 16) |= 0x400u;
        v12 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v12 < 0)
        {
          *(_QWORD *)(a1 + 104) = sub_1D4BB06F0(a2);
          if ((v44 & 1) == 0)
            goto LABEL_126;
        }
        else
        {
          *(_QWORD *)(a1 + 104) = *v12;
LABEL_75:
          *(_QWORD *)a2 = v12 + 1;
        }
        continue;
      case 0xCu:
        if (v9 != 98)
          goto LABEL_10;
        *(_DWORD *)(a1 + 16) |= 0x100u;
        v39 = *(_QWORD **)(a1 + 88);
        if (!v39)
        {
          v39 = sub_1D4B15520(0);
          *(_QWORD *)(a1 + 88) = v39;
        }
        v40 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v40 < 0)
        {
          v41 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v41 < 0)
            goto LABEL_126;
        }
        else
        {
          v41 = *v40;
          *(_QWORD *)a2 = v40 + 1;
        }
        v54 = sub_1D4BAFFA4(a2, v41);
        v46 = v54;
        if ((v54 & 0x8000000000000000) != 0 || !sub_1D4B07130((uint64_t)v39, (char **)a2))
        {
LABEL_126:
          v55 = 0;
          goto LABEL_125;
        }
LABEL_123:
        v11 = sub_1D4BAFFD8(a2, v46);
        break;
      default:
        goto LABEL_10;
    }
LABEL_12:
    if (!v11)
      goto LABEL_126;
  }
  v8 = 0;
LABEL_9:
  v10 = sub_1D4BB0BD8(a2, v8);
  v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
  if ((v9 & 0x100000000) != 0)
    goto LABEL_14;
LABEL_10:
  if ((_DWORD)v9)
  {
    v11 = sub_1D4BB3060(a2, v9, (uint64_t)v57);
    goto LABEL_12;
  }
  v55 = 1;
LABEL_125:
  sub_1D4BB0EE0((uint64_t)v57);
  sub_1D4B16458(&v59);
  return v55;
}

void sub_1D4B0815C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B08184(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 0x200) != 0)
  {
    sub_1D4BB38E8(1, *(_QWORD *)(a1 + 96), a2);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  sub_1D4BB4528(2, *(_QWORD *)(a1 + 24), a2);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  sub_1D4BB4528(3, *(_QWORD *)(a1 + 32), a2);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  sub_1D4BB4528(4, *(_QWORD *)(a1 + 40), a2);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  sub_1D4BB4528(5, *(_QWORD *)(a1 + 48), a2);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  sub_1D4BB4528(6, *(_QWORD *)(a1 + 56), a2);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  sub_1D4BB4528(7, *(_QWORD *)(a1 + 64), a2);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  sub_1D4BB4528(8, *(_QWORD *)(a1 + 72), a2);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  sub_1D4BB4528(9, *(_QWORD *)(a1 + 80), a2);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  sub_1D4BB3D5C(10, *(unsigned __int8 *)(a1 + 112), a2);
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_34:
  sub_1D4BB38E8(11, *(_QWORD *)(a1 + 104), a2);
  if ((v4 & 0x100) != 0)
LABEL_13:
    sub_1D4BB4528(12, *(_QWORD *)(a1 + 88), a2);
LABEL_14:
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 1) != 0)
    v6 = (char *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v6 = (char *)&qword_1EFEC6AB8;
  if (v6[23] < 0)
    v6 = *(char **)v6;
  if ((v5 & 1) != 0)
    v7 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v7 = &qword_1EFEC6AB8;
  if (*((char *)v7 + 23) < 0)
    v8 = v7[1];
  else
    LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
  return sub_1D4BB0EE4(a2, v6, v8);
}

uint64_t sub_1D4B0831C(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 1) != 0)
    v3 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  else
    v3 = &qword_1EFEC6AB8;
  if (*((char *)v3 + 23) < 0)
    v4 = v3[1];
  else
    v4 = *((unsigned __int8 *)v3 + 23);
  v5 = *(_DWORD *)(a1 + 16);
  if (!(_BYTE)v5)
    goto LABEL_17;
  if ((v5 & 1) != 0)
  {
    v8 = sub_1D4B03B14(*(_QWORD *)(a1 + 24));
    v4 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v5 = *(_DWORD *)(a1 + 16);
    if ((v5 & 2) == 0)
    {
LABEL_10:
      if ((v5 & 4) == 0)
        goto LABEL_11;
      goto LABEL_27;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_10;
  }
  v9 = sub_1D4B04110(*(_QWORD *)(a1 + 32));
  v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v5 = *(_DWORD *)(a1 + 16);
  if ((v5 & 4) == 0)
  {
LABEL_11:
    if ((v5 & 8) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  v10 = sub_1D4B04990(*(_QWORD *)(a1 + 40));
  v4 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v5 = *(_DWORD *)(a1 + 16);
  if ((v5 & 8) == 0)
  {
LABEL_12:
    if ((v5 & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  v11 = sub_1D4B05438(*(_QWORD *)(a1 + 48));
  v4 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v5 = *(_DWORD *)(a1 + 16);
  if ((v5 & 0x10) == 0)
  {
LABEL_13:
    if ((v5 & 0x20) == 0)
      goto LABEL_14;
LABEL_30:
    v13 = sub_1D4B061F4(*(_QWORD *)(a1 + 64));
    v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v5 = *(_DWORD *)(a1 + 16);
    if ((v5 & 0x40) == 0)
    {
LABEL_15:
      if ((v5 & 0x80) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
    goto LABEL_31;
  }
LABEL_29:
  v12 = sub_1D4B05B84(*(_QWORD *)(a1 + 56));
  v4 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v5 = *(_DWORD *)(a1 + 16);
  if ((v5 & 0x20) != 0)
    goto LABEL_30;
LABEL_14:
  if ((v5 & 0x40) == 0)
    goto LABEL_15;
LABEL_31:
  v14 = sub_1D4B06EE0(*(_QWORD *)(a1 + 72));
  v4 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v5 = *(_DWORD *)(a1 + 16);
  if ((v5 & 0x80) != 0)
  {
LABEL_16:
    v6 = sub_1D4B06930(*(_QWORD *)(a1 + 80));
    v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v5 = *(_DWORD *)(a1 + 16);
  }
LABEL_17:
  if ((v5 & 0xF00) == 0)
    goto LABEL_24;
  if ((v5 & 0x100) != 0)
  {
    v15 = sub_1D4B0743C(*(_QWORD *)(a1 + 88));
    v4 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v5 = *(_DWORD *)(a1 + 16);
    if ((v5 & 0x200) == 0)
    {
LABEL_20:
      if ((v5 & 0x400) == 0)
        goto LABEL_22;
      goto LABEL_21;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_20;
  }
  v4 += ((9 * (__clz(*(_QWORD *)(a1 + 96) | 1) ^ 0x3F) + 73) >> 6) + 1;
  if ((v5 & 0x400) != 0)
LABEL_21:
    v4 += ((9 * (__clz(*(_QWORD *)(a1 + 104) | 1) ^ 0x3F) + 73) >> 6) + 1;
LABEL_22:
  if ((v5 & 0x800) != 0)
    v4 += 2;
LABEL_24:
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

std::string *sub_1D4B085D8(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;
  std::string *data;
  _QWORD *v7;
  std::string *size;
  _QWORD *v9;
  std::string *v10;
  _QWORD *v11;
  std::string *v12;
  void *v13;
  std::string *v14;
  _QWORD *v15;
  std::string *v16;
  _QWORD *v17;
  std::string *v18;
  _QWORD *v19;
  std::string *v20;
  void *v21;
  std::string *v22;
  _QWORD *v23;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 16);
  if (!(_BYTE)v5)
    goto LABEL_61;
  if ((v5 & 1) != 0)
  {
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
    data = (std::string *)v3[1].__r_.__value_.__l.__data_;
    if (!data)
    {
      data = (std::string *)sub_1D4B150E0(0);
      v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
    }
    if (*(_QWORD *)(a2 + 24))
      v7 = *(_QWORD **)(a2 + 24);
    else
      v7 = qword_1EFEC6868;
    result = sub_1D4B03BEC(data, (uint64_t)v7);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_25;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
  size = (std::string *)v3[1].__r_.__value_.__l.__size_;
  if (!size)
  {
    size = (std::string *)sub_1D4B15168(0);
    v3[1].__r_.__value_.__l.__size_ = (std::string::size_type)size;
  }
  if (*(_QWORD *)(a2 + 32))
    v9 = *(_QWORD **)(a2 + 32);
  else
    v9 = qword_1EFEC6728;
  result = sub_1D4B0417C(size, (uint64_t)v9);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_25:
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 4u;
  v10 = (std::string *)v3[1].__r_.__value_.__r.__words[2];
  if (!v10)
  {
    v10 = (std::string *)sub_1D4B151F0(0);
    v3[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v10;
  }
  if (*(_QWORD *)(a2 + 40))
    v11 = *(_QWORD **)(a2 + 40);
  else
    v11 = qword_1EFEC6758;
  result = sub_1D4B04B18(v10, (uint64_t)v11);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_37;
  }
LABEL_31:
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 8u;
  v12 = (std::string *)v3[2].__r_.__value_.__l.__data_;
  if (!v12)
  {
    v12 = (std::string *)sub_1D4B15278(0);
    v3[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  }
  if (*(_QWORD *)(a2 + 48))
    v13 = *(void **)(a2 + 48);
  else
    v13 = &unk_1EFEC6680;
  result = sub_1D4B054D0(v12, (uint64_t)v13);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_43:
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x20u;
    v16 = (std::string *)v3[2].__r_.__value_.__r.__words[2];
    if (!v16)
    {
      v16 = (std::string *)sub_1D4B15388(0);
      v3[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v16;
    }
    if (*(_QWORD *)(a2 + 64))
      v17 = *(_QWORD **)(a2 + 64);
    else
      v17 = qword_1EFEC6640;
    result = sub_1D4B0629C(v16, (uint64_t)v17);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_61;
      goto LABEL_55;
    }
    goto LABEL_49;
  }
LABEL_37:
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x10u;
  v14 = (std::string *)v3[2].__r_.__value_.__l.__size_;
  if (!v14)
  {
    v14 = (std::string *)sub_1D4B15300(0);
    v3[2].__r_.__value_.__l.__size_ = (std::string::size_type)v14;
  }
  if (*(_QWORD *)(a2 + 56))
    v15 = *(_QWORD **)(a2 + 56);
  else
    v15 = qword_1EFEC67F0;
  result = sub_1D4B05C98(v14, (uint64_t)v15);
  if ((v5 & 0x20) != 0)
    goto LABEL_43;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_49:
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x40u;
  v18 = (std::string *)v3[3].__r_.__value_.__l.__data_;
  if (!v18)
  {
    v18 = (std::string *)sub_1D4B15498(0);
    v3[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  }
  if (*(_QWORD *)(a2 + 72))
    v19 = *(_QWORD **)(a2 + 72);
  else
    v19 = qword_1EFEC6660;
  result = sub_1D4B06F4C(v18, (uint64_t)v19);
  if ((v5 & 0x80) != 0)
  {
LABEL_55:
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x80u;
    v20 = (std::string *)v3[3].__r_.__value_.__l.__size_;
    if (!v20)
    {
      v20 = (std::string *)sub_1D4B15410(0);
      v3[3].__r_.__value_.__l.__size_ = (std::string::size_type)v20;
    }
    if (*(_QWORD *)(a2 + 80))
      v21 = *(void **)(a2 + 80);
    else
      v21 = &unk_1EFEC68F8;
    result = sub_1D4B06AA8(v20, (uint64_t)v21);
  }
LABEL_61:
  if ((v5 & 0xF00) == 0)
    return result;
  if ((v5 & 0x100) != 0)
  {
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 0x100u;
    v22 = (std::string *)v3[3].__r_.__value_.__r.__words[2];
    if (!v22)
    {
      v22 = (std::string *)sub_1D4B15520(0);
      v3[3].__r_.__value_.__r.__words[2] = (std::string::size_type)v22;
    }
    if (*(_QWORD *)(a2 + 88))
      v23 = *(_QWORD **)(a2 + 88);
    else
      v23 = qword_1EFEC6938;
    result = sub_1D4B03BEC(v22, (uint64_t)v23);
    if ((v5 & 0x200) == 0)
    {
LABEL_64:
      if ((v5 & 0x400) == 0)
        goto LABEL_65;
LABEL_76:
      v3[4].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 104);
      if ((v5 & 0x800) == 0)
        goto LABEL_67;
      goto LABEL_66;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_64;
  }
  v3[4].__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 96);
  if ((v5 & 0x400) != 0)
    goto LABEL_76;
LABEL_65:
  if ((v5 & 0x800) != 0)
LABEL_66:
    v3[4].__r_.__value_.__s.__data_[16] = *(_BYTE *)(a2 + 112);
LABEL_67:
  LODWORD(v3->__r_.__value_.__r.__words[2]) |= v5;
  return result;
}

std::string *sub_1D4B08880(std::string *result, uint64_t a2)
{
  std::string *v3;

  if ((std::string *)a2 != result)
  {
    v3 = result;
    sub_1D4B078F8((uint64_t)result);
    return sub_1D4B085D8(v3, a2);
  }
  return result;
}

uint64_t sub_1D4B088B8()
{
  return 1;
}

__n128 sub_1D4B088C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __n128 *v19;
  unint64_t v20;
  __n128 result;
  unint64_t v22;
  unint64_t v23;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v4;
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v5;
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v6;
  v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v7;
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v8;
  v9 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = v9;
  v10 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = v10;
  v11 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = v11;
  v12 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = v12;
  LOBYTE(v12) = *(_BYTE *)(a1 + 112);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a2 + 112) = v12;
  LODWORD(v12) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v12;
  v14 = (unint64_t *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 8);
  v17 = *(_QWORD *)(a2 + 8);
  v15 = (unint64_t *)(a2 + 8);
  v16 = v17;
  if ((v13 & 1) != 0)
  {
    if ((v16 & 1) == 0)
    {
      sub_1D4B163BC(v15);
      v18 = v23;
      v13 = *v14;
      if ((*v14 & 1) != 0)
        goto LABEL_6;
      goto LABEL_9;
    }
LABEL_5:
    v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
    if ((v13 & 1) != 0)
    {
LABEL_6:
      v19 = (__n128 *)(v13 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
      v20 = v19[1].n128_u64[0];
      result = *v19;
      v22 = *(_QWORD *)(v18 + 16);
      *v19 = *(__n128 *)v18;
      v19[1].n128_u64[0] = v22;
      *(__n128 *)v18 = result;
      *(_QWORD *)(v18 + 16) = v20;
      return result;
    }
LABEL_9:
    sub_1D4B163BC(v14);
    goto LABEL_7;
  }
  if ((v16 & 1) != 0)
    goto LABEL_5;
  return result;
}

_QWORD *sub_1D4B08A18@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.ColumnStatistics");
}

uint64_t sub_1D4B08A28(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E9849D98;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  if (atomic_load(dword_1EFEC5AA0))
    sub_1D4BAFB3C(dword_1EFEC5AA0);
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_1D4B08A90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_1D4B04D28(v1 + 24);
  sub_1D4B16364(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B08AB0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)a1 = off_1E9849D98;
  if ((_UNKNOWN *)a1 != &unk_1EFEC69B0)
  {
    v2 = *(_QWORD *)(a1 + 48);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  if (*(int *)(a1 + 28) >= 1)
  {
    v3 = *(_QWORD **)(a1 + 32);
    if (v3)
    {
      if (!*v3)
        operator delete(v3);
    }
  }
  sub_1D4B16364((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1D4B08B2C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_1D4B08AB0(a1);
  operator delete(v1);
}

void sub_1D4B08B40(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_DWORD *)(a1 + 24) = 0;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    sub_1D4B078F8(*(_QWORD *)(a1 + 48));
  v3 = *(_BYTE *)(a1 + 8);
  v2 = a1 + 8;
  *(_DWORD *)(v2 + 8) = 0;
  if ((v3 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v2);
}

uint64_t sub_1D4B08B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  char *v11;
  int v12;
  void *v13;
  char *v14;
  int v15;
  char v16;
  unint64_t v17;
  int v18;
  int v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[32];
  _QWORD v29[2];
  uint64_t *v30;
  __int128 v31;
  uint64_t v32;

  v4 = *(_QWORD *)(a1 + 8);
  v30 = (uint64_t *)(a1 + 8);
  v31 = 0uLL;
  v32 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v32 = *(_QWORD *)(v5 + 16);
    v31 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v29, (uint64_t)&v31);
  sub_1D4BB0DD8((uint64_t)v28, (uint64_t)v29, 0);
  while (1)
  {
    v7 = *(char **)a2;
    if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
    {
      v8 = 0;
    }
    else
    {
      v8 = *v7;
      if (*v7 >= 1)
      {
        *(_QWORD *)a2 = v7 + 1;
        v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0)
          goto LABEL_23;
        goto LABEL_10;
      }
    }
    v10 = sub_1D4BB0BD8(a2, v8);
    v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
    if ((v9 & 0x100000000) == 0)
      goto LABEL_23;
LABEL_10:
    if (v9 >> 3 == 2)
      break;
    if (v9 >> 3 != 1)
      goto LABEL_23;
    if (v9 == 8)
    {
      v16 = sub_1D4B050FC(1, 0xAu, (char **)a2, a1 + 24);
LABEL_25:
      if ((v16 & 1) == 0)
        goto LABEL_46;
    }
    else
    {
      if (v9 != 10)
        goto LABEL_23;
      v11 = *(char **)a2;
      if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v11 < 0)
      {
        v12 = sub_1D4BB098C((unsigned __int8 **)a2);
        if (v12 < 0)
          goto LABEL_46;
      }
      else
      {
        v12 = *v11;
        *(_QWORD *)a2 = v11 + 1;
      }
      v19 = sub_1D4BAFEE4(a2, v12);
      while ((int)sub_1D4BB003C((_DWORD *)a2) >= 1)
      {
        v20 = *(char **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v20 < 0)
        {
          v22 = sub_1D4BB06F0(a2);
          if ((v23 & 1) == 0)
            goto LABEL_46;
          v21 = v22;
        }
        else
        {
          v21 = *v20;
          *(_QWORD *)a2 = v20 + 1;
        }
        v24 = *(_DWORD *)(a1 + 24);
        if (v24 == *(_DWORD *)(a1 + 28))
        {
          sub_1D4B165E8((unsigned int *)(a1 + 24), v24 + 1);
          v24 = *(_DWORD *)(a1 + 24);
        }
        v25 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 24) = v24 + 1;
        *(_QWORD *)(v25 + 8 * v24 + 8) = v21;
      }
      sub_1D4BAFF5C(a2, v19);
    }
  }
  if (v9 != 18)
  {
LABEL_23:
    if (!(_DWORD)v9)
    {
      v26 = 1;
      goto LABEL_45;
    }
    v16 = sub_1D4BB3060(a2, v9, (uint64_t)v28);
    goto LABEL_25;
  }
  *(_DWORD *)(a1 + 16) |= 1u;
  v13 = *(void **)(a1 + 48);
  if (!v13)
  {
    v13 = sub_1D4B155A8(0);
    *(_QWORD *)(a1 + 48) = v13;
  }
  v14 = *(char **)a2;
  if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v14 < 0)
  {
    v15 = sub_1D4BB098C((unsigned __int8 **)a2);
    if (v15 < 0)
      goto LABEL_46;
  }
  else
  {
    v15 = *v14;
    *(_QWORD *)a2 = v14 + 1;
  }
  v17 = sub_1D4BAFFA4(a2, v15);
  v18 = v17;
  if ((v17 & 0x8000000000000000) == 0 && sub_1D4B079F4((uint64_t)v13, a2))
  {
    v16 = sub_1D4BAFFD8(a2, v18);
    goto LABEL_25;
  }
LABEL_46:
  v26 = 0;
LABEL_45:
  sub_1D4BB0EE0((uint64_t)v28);
  sub_1D4B16458(&v30);
  return v26;
}

void sub_1D4B08E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B08E6C(uint64_t a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;

  if (*(int *)(a1 + 24) >= 1)
  {
    if (*(int *)(a2 + 16) < 5)
    {
      sub_1D4BB10F8(a2, 0xAu);
      v4 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(a2 + 8))++ = 10;
      v4 = *(_DWORD *)(a2 + 16) - 1;
      *(_DWORD *)(a2 + 16) = v4;
    }
    v5 = *(_DWORD *)(a1 + 40);
    if (v4 < 5)
    {
      sub_1D4BB10F8(a2, v5);
    }
    else
    {
      v6 = *(_QWORD *)(a2 + 8);
      if (v5 < 0x80)
      {
        v8 = *(_DWORD *)(a1 + 40);
        v7 = *(_BYTE **)(a2 + 8);
      }
      else
      {
        v7 = *(_BYTE **)(a2 + 8);
        do
        {
          *v7++ = v5 | 0x80;
          v8 = v5 >> 7;
          v9 = v5 >> 14;
          v5 >>= 7;
        }
        while (v9);
      }
      *v7 = v8;
      v10 = (_DWORD)v7 - v6 + 1;
      *(_QWORD *)(a2 + 8) += v10;
      *(_DWORD *)(a2 + 16) -= v10;
    }
    v11 = *(unsigned int *)(a1 + 24);
    if ((int)v11 >= 1)
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * i + 8);
        if (*(int *)(a2 + 16) < 10)
        {
          sub_1D4BB1150(a2, v13);
        }
        else
        {
          v14 = *(_QWORD *)(a2 + 8);
          if (v13 < 0x80)
          {
            v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * i + 8);
            v15 = *(_BYTE **)(a2 + 8);
          }
          else
          {
            v15 = *(_BYTE **)(a2 + 8);
            do
            {
              *v15++ = v13 | 0x80;
              v16 = v13 >> 7;
              v17 = v13 >> 14;
              v13 >>= 7;
            }
            while (v17);
          }
          *v15 = v16;
          v18 = (_DWORD)v15 - v14 + 1;
          *(_QWORD *)(a2 + 8) += v18;
          *(_DWORD *)(a2 + 16) -= v18;
        }
      }
    }
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    sub_1D4BB4528(2, *(_QWORD *)(a1 + 48), a2);
  v19 = *(_QWORD *)(a1 + 8);
  if ((v19 & 1) != 0)
    v20 = (char *)(v19 & 0xFFFFFFFFFFFFFFFELL);
  else
    v20 = (char *)&qword_1EFEC6AB8;
  if (v20[23] < 0)
    v20 = *(char **)v20;
  if ((v19 & 1) != 0)
    v21 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFFFFELL);
  else
    v21 = &qword_1EFEC6AB8;
  if (*((char *)v21 + 23) < 0)
    v22 = v21[1];
  else
    LODWORD(v22) = *((unsigned __int8 *)v21 + 23);
  return sub_1D4BB0EE4(a2, v20, v22);
}

uint64_t sub_1D4B09050(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 1) != 0)
    v3 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  else
    v3 = &qword_1EFEC6AB8;
  if (*((char *)v3 + 23) < 0)
    v4 = v3[1];
  else
    v4 = *((unsigned __int8 *)v3 + 23);
  v5 = sub_1D4BB477C((unsigned int *)(a1 + 24));
  v6 = 11;
  v7 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v5 >= 0)
    v6 = v7;
  v8 = v6 + v4;
  if (v5)
    v9 = v5;
  else
    v9 = 0;
  if (!v5)
    v8 = v4;
  *(_DWORD *)(a1 + 40) = v9;
  v10 = v8 + v5;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v11 = sub_1D4B0831C(*(_QWORD *)(a1 + 48));
    v10 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *(_DWORD *)(a1 + 20) = v10;
  return v10;
}

std::string *sub_1D4B09120(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;
  uint64_t data_low;
  std::string::size_type size;
  std::string *data;
  void *v9;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    data_low = SLODWORD(v3[1].__r_.__value_.__l.__data_);
    sub_1D4B165E8((unsigned int *)&v3[1], data_low + v5);
    size = v3[1].__r_.__value_.__l.__size_;
    LODWORD(v3[1].__r_.__value_.__l.__data_) += *(_DWORD *)(a2 + 24);
    result = (std::string *)memcpy((void *)(size + 8 * data_low + 8), (const void *)(*(_QWORD *)(a2 + 32) + 8), 8 * *(int *)(a2 + 24));
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
    data = (std::string *)v3[2].__r_.__value_.__l.__data_;
    if (!data)
    {
      data = (std::string *)sub_1D4B155A8(0);
      v3[2].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
    }
    if (*(_QWORD *)(a2 + 48))
      v9 = *(void **)(a2 + 48);
    else
      v9 = &unk_1EFEC66B0;
    return sub_1D4B085D8(data, (uint64_t)v9);
  }
  return result;
}

std::string *sub_1D4B091F0(std::string *result, uint64_t a2)
{
  std::string *v3;

  if ((std::string *)a2 != result)
  {
    v3 = result;
    sub_1D4B08B40((uint64_t)result);
    return sub_1D4B09120(v3, a2);
  }
  return result;
}

uint64_t sub_1D4B09228()
{
  return 1;
}

_QWORD *sub_1D4B09230@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.RowIndexEntry");
}

uint64_t sub_1D4B09240(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E984AC98;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  if (atomic_load(dword_1EFEC5A70))
    sub_1D4BAFB3C(dword_1EFEC5A70);
  return a1;
}

void sub_1D4B092AC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  sub_1D4B167F0(v2);
  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B092D0(_QWORD *a1)
{
  *a1 = off_1E984AC98;
  sub_1D4B167F0(a1 + 3);
  sub_1D4B16364(a1 + 1);
  return a1;
}

void sub_1D4B09310(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B092D0(a1);
  operator delete(v1);
}

void sub_1D4B09324(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(unsigned int *)(a1 + 32);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 40) + 8);
    do
    {
      v4 = *v3++;
      sub_1D4B08B40(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(a1 + 32) = 0;
  }
  v6 = *(_BYTE *)(a1 + 8);
  v5 = a1 + 8;
  *(_DWORD *)(v5 + 8) = 0;
  if ((v6 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v5);
}

uint64_t sub_1D4B09390(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  BOOL v12;
  int *v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  _BYTE v25[32];
  _QWORD v26[2];
  uint64_t *v27;
  __int128 v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a1 + 8);
  v27 = (uint64_t *)(a1 + 8);
  v28 = 0uLL;
  v29 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v29 = *(_QWORD *)(v5 + 16);
    v28 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v26, (uint64_t)&v28);
  sub_1D4BB0DD8((uint64_t)v25, (uint64_t)v26, 0);
  while (1)
  {
    v7 = *(unsigned __int8 **)a2;
    if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
    {
      v8 = 0;
    }
    else
    {
      v8 = *v7;
      if ((char)*v7 >= 1)
      {
        *(_QWORD *)a2 = v7 + 1;
        v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0)
          break;
        goto LABEL_10;
      }
    }
    v10 = sub_1D4BB0BD8(a2, v8);
    v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
    if ((v9 & 0x100000000) == 0)
      break;
LABEL_10:
    if (v9 != 10 || (v9 & 0xFFFFFFF8) != 8)
      break;
    v13 = *(int **)(a1 + 40);
    if (!v13)
    {
      v15 = *(_DWORD *)(a1 + 36);
LABEL_21:
      sub_1D4BB24FC(a1 + 24, v15 + 1);
      v13 = *(int **)(a1 + 40);
      v15 = *v13;
      goto LABEL_22;
    }
    v14 = *(int *)(a1 + 32);
    v15 = *v13;
    if ((int)v14 < *v13)
    {
      *(_DWORD *)(a1 + 32) = v14 + 1;
      v16 = *(void **)&v13[2 * v14 + 2];
      goto LABEL_23;
    }
    if (v15 == *(_DWORD *)(a1 + 36))
      goto LABEL_21;
LABEL_22:
    *v13 = v15 + 1;
    v16 = sub_1D4B15630(*(_QWORD *)(a1 + 24));
    v17 = *(_QWORD *)(a1 + 40);
    v18 = *(int *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v18 + 1;
    *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
LABEL_23:
    v19 = *(char **)a2;
    if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v19 < 0)
    {
      v20 = sub_1D4BB098C((unsigned __int8 **)a2);
      if (v20 < 0)
        goto LABEL_31;
    }
    else
    {
      v20 = *v19;
      *(_QWORD *)a2 = v19 + 1;
    }
    v21 = sub_1D4BAFFA4(a2, v20);
    v22 = v21;
    if ((v21 & 0x8000000000000000) != 0 || !sub_1D4B08B8C((uint64_t)v16, a2))
    {
LABEL_31:
      v23 = 0;
      goto LABEL_33;
    }
    v12 = sub_1D4BAFFD8(a2, v22);
LABEL_30:
    if (!v12)
      goto LABEL_31;
  }
  if ((_DWORD)v9)
  {
    v12 = sub_1D4BB3060(a2, v9, (uint64_t)v25);
    goto LABEL_30;
  }
  v23 = 1;
LABEL_33:
  sub_1D4BB0EE0((uint64_t)v25);
  sub_1D4B16458(&v27);
  return v23;
}

void sub_1D4B0959C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B095C4(uint64_t a1, uint64_t a2)
{
  int v4;
  int i;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;

  v4 = *(_DWORD *)(a1 + 32);
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      sub_1D4BB4528(1, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i + 8), a2);
  }
  v6 = *(_QWORD *)(a1 + 8);
  if ((v6 & 1) != 0)
    v7 = (char *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  else
    v7 = (char *)&qword_1EFEC6AB8;
  if (v7[23] < 0)
    v7 = *(char **)v7;
  if ((v6 & 1) != 0)
    v8 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  else
    v8 = &qword_1EFEC6AB8;
  if (*((char *)v8 + 23) < 0)
    v9 = v8[1];
  else
    LODWORD(v9) = *((unsigned __int8 *)v8 + 23);
  return sub_1D4BB0EE4(a2, v7, v9);
}

uint64_t sub_1D4B09668(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 1) != 0)
    v3 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  else
    v3 = &qword_1EFEC6AB8;
  if (*((char *)v3 + 23) < 0)
    v4 = v3[1];
  else
    v4 = *((unsigned __int8 *)v3 + 23);
  v5 = *(unsigned int *)(a1 + 32);
  v6 = v4 + v5;
  if ((_DWORD)v5)
  {
    v7 = 0;
    do
    {
      v8 = sub_1D4B09050(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v7 + 8));
      v6 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
      ++v7;
    }
    while ((_DWORD)v5 != v7);
  }
  *(_DWORD *)(a1 + 20) = v6;
  return v6;
}

std::string *sub_1D4B09710(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  std::string **v7;
  signed int v8;
  signed int *v9;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 32);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 40) + 8);
    v7 = (std::string **)sub_1D4BB23F8((uint64_t)&v3[1], v5);
    result = sub_1D4B16860(v3 + 1, v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2] - LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    v8 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v5;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v8;
    v9 = (signed int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v9 < v8)
      *v9 = v8;
  }
  return result;
}

std::string *sub_1D4B097B0(std::string *result, uint64_t a2)
{
  std::string *v3;

  if ((std::string *)a2 != result)
  {
    v3 = result;
    sub_1D4B09324((uint64_t)result);
    return sub_1D4B09710(v3, a2);
  }
  return result;
}

uint64_t sub_1D4B097E8()
{
  return 1;
}

_QWORD *sub_1D4B097F0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.RowIndex");
}

uint64_t sub_1D4B09800(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E9849BB8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  if (atomic_load(dword_1EFEC5A88))
    sub_1D4BAFB3C(dword_1EFEC5A88);
  *(_QWORD *)(a1 + 40) = &qword_1EFEC6AB8;
  *(_DWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_1D4B09874(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_1D4B04D28(v1 + 24);
  sub_1D4B16364(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B09890(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)a1 = off_1E9849BB8;
  sub_1D4B098E8(a1);
  if (*(int *)(a1 + 28) >= 1)
  {
    v2 = *(_QWORD **)(a1 + 32);
    if (v2)
    {
      if (!*v2)
        operator delete(v2);
    }
  }
  sub_1D4B16364((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1D4B098E8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  if ((uint64_t *)v1 != &qword_1EFEC6AB8 && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete((void *)v1);
  }
}

void sub_1D4B0993C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_1D4B09890(a1);
  operator delete(v1);
}

void sub_1D4B09950(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  *(_DWORD *)(a1 + 24) = 0;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v1 = *(_QWORD *)(a1 + 40);
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v3 = *(_BYTE *)(a1 + 8);
  v2 = a1 + 8;
  *(_DWORD *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 8) = 0;
  if ((v3 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v2);
}

uint64_t sub_1D4B09998(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  char *v13;
  int v14;
  std::string *v15;
  BOOL v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  signed int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v36[32];
  _QWORD v37[2];
  uint64_t *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v4 = *(_QWORD *)(a1 + 8);
  v38 = (uint64_t *)(a1 + 8);
  v39 = 0uLL;
  v40 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v40 = *(_QWORD *)(v5 + 16);
    v39 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v37, (uint64_t)&v39);
  sub_1D4BB0DD8((uint64_t)v36, (uint64_t)v37, 0);
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_4:
        v7 = (char *)*a2;
        if (*a2 >= (unint64_t)a2[1])
        {
          v8 = 0;
LABEL_9:
          v10 = sub_1D4BB0BD8((uint64_t)a2, v8);
          v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
          if ((v9 & 0x100000000) == 0)
            goto LABEL_40;
          goto LABEL_10;
        }
        v8 = *v7;
        if (*v7 < 1)
          goto LABEL_9;
        *a2 = (uint64_t)(v7 + 1);
        v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0)
          goto LABEL_40;
LABEL_10:
        v11 = v9 >> 3;
        if (v9 >> 3 == 3)
        {
          if (v9 == 26)
          {
            *(_DWORD *)(a1 + 16) |= 1u;
            v15 = *(std::string **)(a1 + 40);
            if (v15 == (std::string *)&qword_1EFEC6AB8)
            {
              sub_1D4B164E8((_QWORD *)(a1 + 40), (uint64_t)&qword_1EFEC6AB8);
              v15 = *(std::string **)(a1 + 40);
            }
            v16 = sub_1D4BB4654(a2, v15);
            goto LABEL_42;
          }
          goto LABEL_40;
        }
        if (v11 == 2)
          break;
        if (v11 != 1 || v9 != 8)
          goto LABEL_40;
        *(_DWORD *)(a1 + 16) |= 2u;
        v13 = (char *)*a2;
        if (*a2 >= (unint64_t)a2[1])
        {
          v14 = 0;
          goto LABEL_50;
        }
        v14 = *v13;
        if (*v13 < 0)
        {
LABEL_50:
          v33 = sub_1D4BB08A4(a2, v14);
          *(_DWORD *)(a1 + 48) = v33;
          if (v33 < 0)
            goto LABEL_53;
        }
        else
        {
          *(_DWORD *)(a1 + 48) = v14;
          *a2 = (uint64_t)(v13 + 1);
        }
      }
      if (v9 == 18)
      {
        v16 = sub_1D4B09D04((uint64_t)a2, (signed int *)(a1 + 24));
        goto LABEL_42;
      }
      if (v9 != 17)
        break;
      v41 = 0;
      v17 = (uint64_t *)*a2;
      if ((int)(*((_DWORD *)a2 + 2) - *a2) < 8)
      {
        if (!sub_1D4BB0660((uint64_t)a2, &v41))
        {
LABEL_53:
          v34 = 0;
          goto LABEL_55;
        }
      }
      else
      {
        v41 = *v17;
        *a2 = (uint64_t)(v17 + 1);
      }
      v18 = *(_DWORD *)(a1 + 24);
      if (v18 == *(_DWORD *)(a1 + 28))
      {
        sub_1D4B165E8((unsigned int *)(a1 + 24), v18 + 1);
        v18 = *(_DWORD *)(a1 + 24);
      }
      v19 = v41;
      v20 = *(_QWORD *)(a1 + 32);
      v21 = v18 + 1;
      *(_DWORD *)(a1 + 24) = v18 + 1;
      *(_QWORD *)(v20 + 8 * v18 + 8) = v19;
      v22 = *a2;
      LODWORD(v20) = *((_DWORD *)a2 + 2);
      v23 = v20 - *a2;
      if ((int)(v20 - *a2) > 0)
      {
        LODWORD(v24) = *(_DWORD *)(a1 + 28) - v21;
        v25 = v23 / 9;
        if ((int)(v23 / 9) >= (int)v24)
          v25 = *(_DWORD *)(a1 + 28) - v21;
        if (v25 >= 1)
        {
          v26 = 0;
          v27 = v18 + 2;
          v28 = 8 * v21 + 8;
          if ((uint64_t)((v23 * (unsigned __int128)0x1C71C71C71C71C72uLL) >> 64) < (int)v24)
            v24 = (v23 * (unsigned __int128)0x1C71C71C71C71C72uLL) >> 64;
          v29 = *a2;
          while (*(_BYTE *)v29 == 17)
          {
            v41 = *(_QWORD *)(v29 + 1);
            v30 = v41;
            v31 = *(_QWORD *)(a1 + 32);
            *(_DWORD *)(a1 + 24) = v27 + v26;
            *(_QWORD *)(v31 + v28 + 8 * v26++) = v30;
            v29 += 9;
            if ((_DWORD)v24 == (_DWORD)v26)
              goto LABEL_46;
          }
          v25 = v26;
          if (!(_DWORD)v26)
            goto LABEL_4;
LABEL_46:
          v32 = 9 * v25;
          if (9 * v25 <= (int)v23)
            *a2 = v22 + v32;
          else
            sub_1D4BB0140((uint64_t)a2, v32, v23);
        }
      }
    }
LABEL_40:
    if (!(_DWORD)v9)
      break;
    v16 = sub_1D4BB3060((uint64_t)a2, v9, (uint64_t)v36);
LABEL_42:
    if (!v16)
      goto LABEL_53;
  }
  v34 = 1;
LABEL_55:
  sub_1D4BB0EE0((uint64_t)v36);
  sub_1D4B16458(&v38);
  return v34;
}

void sub_1D4B09CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

BOOL sub_1D4B09D04(uint64_t a1, signed int *a2)
{
  unsigned __int8 *v4;
  unsigned int v5;
  _BOOL8 result;
  signed int v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  signed int v14;
  uint64_t v15;
  uint64_t v16;
  signed int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(unsigned __int8 **)a1;
  if (*(_QWORD *)a1 >= *(_QWORD *)(a1 + 8) || (char)*v4 < 0)
  {
    v5 = sub_1D4BB098C((unsigned __int8 **)a1);
    if ((v5 & 0x80000000) != 0)
      return 0;
  }
  else
  {
    v5 = *v4;
    *(_QWORD *)a1 = v4 + 1;
  }
  if ((v5 & 7) != 0)
    return 0;
  v7 = *a2;
  v8 = v5 >> 3;
  v9 = sub_1D4BB0078((_DWORD *)a1);
  v10 = sub_1D4BB003C((_DWORD *)a1);
  if (v10 >= v9)
    v11 = v9;
  else
    v11 = v10;
  if (v9 == -1)
    v11 = v10;
  if (v11 < (uint64_t)v5)
  {
    v21 = 0;
    if (v5 >= 8)
    {
      if (v8 <= 1)
        v12 = 1;
      else
        v12 = v5 >> 3;
      do
      {
        v13 = *(unsigned __int8 **)a1;
        if ((int)(*(_DWORD *)(a1 + 8) - *(_QWORD *)a1) < 8)
        {
          result = sub_1D4BB0660(a1, &v21);
          if (!result)
            return result;
        }
        else
        {
          v21 = *(_QWORD *)v13;
          *(_QWORD *)a1 = v13 + 8;
        }
        v14 = *a2;
        if (*a2 == a2[1])
        {
          sub_1D4B165E8((unsigned int *)a2, v14 + 1);
          v14 = *a2;
        }
        v15 = v21;
        v16 = *((_QWORD *)a2 + 1);
        *a2 = v14 + 1;
        *(_QWORD *)(v16 + 8 * v14 + 8) = v15;
        --v12;
      }
      while (v12);
    }
    return 1;
  }
  v17 = v7 + v8;
  if (*a2 < (int)(v7 + v8))
  {
    sub_1D4B165E8((unsigned int *)a2, v7 + v8);
    v18 = *a2;
    v19 = 8 * v17 - 8 * v18;
    if (v19 >= 1)
      bzero((void *)(*((_QWORD *)a2 + 1) + 8 + 8 * v18), 8 * (((unint64_t)v19 >> 3) - ((unint64_t)v19 > 7)) + 8);
  }
  *a2 = v17;
  if (a2[1] < 1)
    v20 = 0;
  else
    v20 = *((_QWORD *)a2 + 1) + 8;
  if (sub_1D4BB03AC((const void **)a1, (char *)(v20 + 8 * v7), v5))
    return 1;
  if (*a2 < 1)
    return 0;
  result = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_1D4B09EEC(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;

  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 2) != 0)
    sub_1D4BB37DC(1, *(_DWORD *)(a1 + 48), a2);
  v5 = *(unsigned int *)(a1 + 24);
  if ((int)v5 >= 1)
  {
    v6 = 0;
    v7 = 8 * v5;
    do
    {
      sub_1D4BB3C14(2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + v6 + 8), a2);
      v6 += 8;
    }
    while (v7 != v6);
  }
  if ((v4 & 1) != 0)
    sub_1D4BB4360(3, *(_QWORD *)(a1 + 40), a2);
  v8 = *(_QWORD *)(a1 + 8);
  if ((v8 & 1) != 0)
    v9 = (char *)(v8 & 0xFFFFFFFFFFFFFFFELL);
  else
    v9 = (char *)&qword_1EFEC6AB8;
  if (v9[23] < 0)
    v9 = *(char **)v9;
  if ((v8 & 1) != 0)
    v10 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFELL);
  else
    v10 = &qword_1EFEC6AB8;
  if (*((char *)v10 + 23) < 0)
    v11 = v10[1];
  else
    LODWORD(v11) = *((unsigned __int8 *)v10 + 23);
  return sub_1D4BB0EE4(a2, v9, v11);
}

uint64_t sub_1D4B09FCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 8);
  if ((v1 & 1) != 0)
    v2 = (uint64_t *)(v1 & 0xFFFFFFFFFFFFFFFELL);
  else
    v2 = &qword_1EFEC6AB8;
  if (*((char *)v2 + 23) < 0)
    v3 = v2[1];
  else
    v3 = *((unsigned __int8 *)v2 + 23);
  v4 = v3 + *(unsigned int *)(a1 + 24) + 8 * *(unsigned int *)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 16);
  if ((v5 & 3) != 0)
  {
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(a1 + 40);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = *(_QWORD *)(v6 + 8);
      if ((v7 & 0x80u) == 0)
        v8 = v7;
      v4 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v5 & 2) != 0)
      v4 += ((9 * (__clz(*(_DWORD *)(a1 + 48) | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

_QWORD *sub_1D4B0A088(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  std::string *v9;
  const std::string *v10;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(result + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    v6 = *((int *)v3 + 6);
    sub_1D4B165E8((unsigned int *)v3 + 6, v6 + v5);
    v7 = v3[4];
    *((_DWORD *)v3 + 6) += *(_DWORD *)(a2 + 24);
    result = memcpy((void *)(v7 + 8 * v6 + 8), (const void *)(*(_QWORD *)(a2 + 32) + 8), 8 * *(int *)(a2 + 24));
  }
  v8 = *(_DWORD *)(a2 + 16);
  if ((v8 & 3) != 0)
  {
    if ((v8 & 1) != 0)
    {
      result = v3 + 5;
      v9 = (std::string *)v3[5];
      *((_DWORD *)v3 + 4) |= 1u;
      v10 = *(const std::string **)(a2 + 40);
      if (v9 != v10)
      {
        if (v9 == (std::string *)&qword_1EFEC6AB8)
        {
          result = sub_1D4B164E8(result, (uint64_t)v10);
          if ((v8 & 2) == 0)
            goto LABEL_12;
          goto LABEL_11;
        }
        result = std::string::operator=(v9, v10);
      }
    }
    if ((v8 & 2) == 0)
    {
LABEL_12:
      *((_DWORD *)v3 + 4) |= v8;
      return result;
    }
LABEL_11:
    *((_DWORD *)v3 + 12) = *(_DWORD *)(a2 + 48);
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1D4B0A17C()
{
  return 1;
}

_QWORD *sub_1D4B0A184@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.BloomFilter");
}

uint64_t sub_1D4B0A194(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E984A018;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  if (atomic_load(dword_1EFEC5AB8))
    sub_1D4BAFB3C(dword_1EFEC5AB8);
  return a1;
}

void sub_1D4B0A200(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  sub_1D4B167F0(v2);
  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B0A224(_QWORD *a1)
{
  *a1 = off_1E984A018;
  sub_1D4B167F0(a1 + 3);
  sub_1D4B16364(a1 + 1);
  return a1;
}

void sub_1D4B0A264(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B0A224(a1);
  operator delete(v1);
}

void sub_1D4B0A278(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(unsigned int *)(a1 + 32);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 40) + 8);
    do
    {
      v4 = *v3++;
      sub_1D4B09950(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(a1 + 32) = 0;
  }
  v6 = *(_BYTE *)(a1 + 8);
  v5 = a1 + 8;
  *(_DWORD *)(v5 + 8) = 0;
  if ((v6 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v5);
}

uint64_t sub_1D4B0A2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  BOOL v12;
  int *v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  _BYTE v25[32];
  _QWORD v26[2];
  uint64_t *v27;
  __int128 v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a1 + 8);
  v27 = (uint64_t *)(a1 + 8);
  v28 = 0uLL;
  v29 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v29 = *(_QWORD *)(v5 + 16);
    v28 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v26, (uint64_t)&v28);
  sub_1D4BB0DD8((uint64_t)v25, (uint64_t)v26, 0);
  while (1)
  {
    v7 = *(unsigned __int8 **)a2;
    if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
    {
      v8 = 0;
    }
    else
    {
      v8 = *v7;
      if ((char)*v7 >= 1)
      {
        *(_QWORD *)a2 = v7 + 1;
        v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0)
          break;
        goto LABEL_10;
      }
    }
    v10 = sub_1D4BB0BD8(a2, v8);
    v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
    if ((v9 & 0x100000000) == 0)
      break;
LABEL_10:
    if (v9 != 10 || (v9 & 0xFFFFFFF8) != 8)
      break;
    v13 = *(int **)(a1 + 40);
    if (!v13)
    {
      v15 = *(_DWORD *)(a1 + 36);
LABEL_21:
      sub_1D4BB24FC(a1 + 24, v15 + 1);
      v13 = *(int **)(a1 + 40);
      v15 = *v13;
      goto LABEL_22;
    }
    v14 = *(int *)(a1 + 32);
    v15 = *v13;
    if ((int)v14 < *v13)
    {
      *(_DWORD *)(a1 + 32) = v14 + 1;
      v16 = *(void **)&v13[2 * v14 + 2];
      goto LABEL_23;
    }
    if (v15 == *(_DWORD *)(a1 + 36))
      goto LABEL_21;
LABEL_22:
    *v13 = v15 + 1;
    v16 = sub_1D4B15740(*(_QWORD *)(a1 + 24));
    v17 = *(_QWORD *)(a1 + 40);
    v18 = *(int *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v18 + 1;
    *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
LABEL_23:
    v19 = *(char **)a2;
    if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v19 < 0)
    {
      v20 = sub_1D4BB098C((unsigned __int8 **)a2);
      if (v20 < 0)
        goto LABEL_31;
    }
    else
    {
      v20 = *v19;
      *(_QWORD *)a2 = v19 + 1;
    }
    v21 = sub_1D4BAFFA4(a2, v20);
    v22 = v21;
    if ((v21 & 0x8000000000000000) != 0 || !sub_1D4B09998((uint64_t)v16, (uint64_t *)a2))
    {
LABEL_31:
      v23 = 0;
      goto LABEL_33;
    }
    v12 = sub_1D4BAFFD8(a2, v22);
LABEL_30:
    if (!v12)
      goto LABEL_31;
  }
  if ((_DWORD)v9)
  {
    v12 = sub_1D4BB3060(a2, v9, (uint64_t)v25);
    goto LABEL_30;
  }
  v23 = 1;
LABEL_33:
  sub_1D4BB0EE0((uint64_t)v25);
  sub_1D4B16458(&v27);
  return v23;
}

void sub_1D4B0A4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B0A518(uint64_t a1, uint64_t a2)
{
  int v4;
  int i;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;

  v4 = *(_DWORD *)(a1 + 32);
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      sub_1D4BB4528(1, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i + 8), a2);
  }
  v6 = *(_QWORD *)(a1 + 8);
  if ((v6 & 1) != 0)
    v7 = (char *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  else
    v7 = (char *)&qword_1EFEC6AB8;
  if (v7[23] < 0)
    v7 = *(char **)v7;
  if ((v6 & 1) != 0)
    v8 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  else
    v8 = &qword_1EFEC6AB8;
  if (*((char *)v8 + 23) < 0)
    v9 = v8[1];
  else
    LODWORD(v9) = *((unsigned __int8 *)v8 + 23);
  return sub_1D4BB0EE4(a2, v7, v9);
}

uint64_t sub_1D4B0A5BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 1) != 0)
    v3 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  else
    v3 = &qword_1EFEC6AB8;
  if (*((char *)v3 + 23) < 0)
    v4 = v3[1];
  else
    v4 = *((unsigned __int8 *)v3 + 23);
  v5 = *(unsigned int *)(a1 + 32);
  v6 = v4 + v5;
  if ((_DWORD)v5)
  {
    v7 = 0;
    do
    {
      v8 = sub_1D4B09FCC(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v7 + 8));
      v6 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
      ++v7;
    }
    while ((_DWORD)v5 != v7);
  }
  *(_DWORD *)(a1 + 20) = v6;
  return v6;
}

std::string *sub_1D4B0A664(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  _QWORD **v7;
  signed int v8;
  signed int *v9;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 32);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 40) + 8);
    v7 = (_QWORD **)sub_1D4BB23F8((uint64_t)&v3[1], v5);
    result = (std::string *)sub_1D4B1691C((uint64_t *)&v3[1], v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2]- LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    v8 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v5;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v8;
    v9 = (signed int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v9 < v8)
      *v9 = v8;
  }
  return result;
}

uint64_t sub_1D4B0A704()
{
  return 1;
}

_QWORD *sub_1D4B0A70C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.BloomFilterIndex");
}

_QWORD *sub_1D4B0A71C(_QWORD *a1)
{
  *a1 = off_1E984AA18;
  a1[1] = 0;
  a1[2] = 0;
  if (atomic_load(dword_1EFEC5B80))
    sub_1D4BAFB3C(dword_1EFEC5B80);
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void sub_1D4B0A778(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B0A790(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_1E984AA18;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    sub_1D4B16764((unint64_t *)(a1 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

void sub_1D4B0A7F4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B0A80C(_QWORD *a1)
{
  *a1 = off_1E984AA18;
  sub_1D4B16364(a1 + 1);
  return a1;
}

void sub_1D4B0A83C(uint64_t *a1)
{
  *a1 = (uint64_t)off_1E984AA18;
  sub_1D4B16364(a1 + 1);
  operator delete(a1);
}

void sub_1D4B0A86C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if ((*(_BYTE *)(a1 + 16) & 7) != 0)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
  v2 = *(_BYTE *)(a1 + 8);
  v1 = a1 + 8;
  *(_DWORD *)(v1 + 8) = 0;
  if ((v2 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v1);
}

uint64_t sub_1D4B0A890(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  char v17;
  int v18;
  int v19;
  _BYTE *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  _QWORD v30[2];
  uint64_t *v31;
  __int128 v32;
  uint64_t v33;

  v4 = *(_QWORD *)(a1 + 8);
  v31 = (uint64_t *)(a1 + 8);
  v32 = 0uLL;
  v33 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v33 = *(_QWORD *)(v5 + 16);
    v32 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v30, (uint64_t)&v32);
  sub_1D4BB0DD8((uint64_t)&v27, (uint64_t)v30, 0);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v7 = (char *)*a2;
          if (*a2 >= (unint64_t)a2[1])
          {
            v8 = 0;
LABEL_9:
            v10 = sub_1D4BB0BD8((uint64_t)a2, v8);
            v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
            if ((v9 & 0x100000000) == 0)
              goto LABEL_29;
            goto LABEL_10;
          }
          v8 = *v7;
          if (*v7 < 1)
            goto LABEL_9;
          *a2 = (uint64_t)(v7 + 1);
          v9 = v8 | 0x100000000;
          if ((v9 & 0x100000000) == 0)
            goto LABEL_29;
LABEL_10:
          v11 = v9 >> 3;
          if (v9 >> 3 != 3)
            break;
          if (v9 != 24)
            goto LABEL_29;
          *(_DWORD *)(a1 + 16) |= 4u;
          v15 = (char *)*a2;
          if (*a2 < (unint64_t)a2[1] && (*v15 & 0x80000000) == 0)
          {
            *(_QWORD *)(a1 + 32) = *v15;
            goto LABEL_28;
          }
          *(_QWORD *)(a1 + 32) = sub_1D4BB06F0((uint64_t)a2);
          if ((v17 & 1) == 0)
            goto LABEL_51;
        }
        if (v11 != 2)
          break;
        if (v9 != 16)
          goto LABEL_29;
        *(_DWORD *)(a1 + 16) |= 2u;
        v15 = (char *)*a2;
        if (*a2 >= (unint64_t)a2[1])
        {
          v16 = 0;
          goto LABEL_50;
        }
        v16 = *v15;
        if (*v15 < 0)
        {
LABEL_50:
          v24 = sub_1D4BB08A4(a2, v16);
          *(_DWORD *)(a1 + 28) = v24;
          if (v24 < 0)
          {
LABEL_51:
            v25 = 0;
            goto LABEL_53;
          }
        }
        else
        {
          *(_DWORD *)(a1 + 28) = v16;
LABEL_28:
          *a2 = (uint64_t)(v15 + 1);
        }
      }
      if (v11 != 1 || v9 != 8)
        break;
      v13 = (char *)*a2;
      if (*a2 >= (unint64_t)a2[1])
      {
        LODWORD(v14) = 0;
      }
      else
      {
        LODWORD(v14) = *v13;
        if ((*v13 & 0x80000000) == 0)
        {
          *a2 = (uint64_t)(v13 + 1);
          goto LABEL_36;
        }
      }
      v14 = sub_1D4BB08A4(a2, v14);
      if (v14 < 0)
        goto LABEL_51;
LABEL_36:
      if (sub_1D4B03660(v14))
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 24) = v14;
      }
      else
      {
        if (v29 < 5)
        {
          sub_1D4BB10F8((uint64_t)&v27, 8u);
          v18 = v29;
        }
        else
        {
          *v28++ = 8;
          v18 = --v29;
        }
        if (v18 < 5)
        {
          sub_1D4BB10F8((uint64_t)&v27, v14);
        }
        else
        {
          v19 = (int)v28;
          if (v14 < 0x80)
          {
            LOBYTE(v21) = v14;
            v20 = v28;
          }
          else
          {
            v20 = v28;
            do
            {
              *v20++ = v14 | 0x80;
              v21 = v14 >> 7;
              v22 = v14 >> 14;
              LODWORD(v14) = v14 >> 7;
            }
            while (v22);
          }
          *v20 = v21;
          v23 = (_DWORD)v20 - v19 + 1;
          v28 += v23;
          v29 -= v23;
        }
      }
    }
LABEL_29:
    if (!(_DWORD)v9)
      break;
    if (!sub_1D4BB3060((uint64_t)a2, v9, (uint64_t)&v27))
      goto LABEL_51;
  }
  v25 = 1;
LABEL_53:
  sub_1D4BB0EE0((uint64_t)&v27);
  sub_1D4B16458(&v31);
  return v25;
}

void sub_1D4B0AB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B0ABA0(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 1) != 0)
  {
    sub_1D4BB36D0(1, *(_DWORD *)(a1 + 24), a2);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  sub_1D4BB37DC(2, *(_DWORD *)(a1 + 28), a2);
  if ((v4 & 4) != 0)
LABEL_4:
    sub_1D4BB38E8(3, *(_QWORD *)(a1 + 32), a2);
LABEL_5:
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 1) != 0)
    v6 = (char *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v6 = (char *)&qword_1EFEC6AB8;
  if (v6[23] < 0)
    v6 = *(char **)v6;
  if ((v5 & 1) != 0)
    v7 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v7 = &qword_1EFEC6AB8;
  if (*((char *)v7 + 23) < 0)
    v8 = v7[1];
  else
    LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
  return sub_1D4BB0EE4(a2, v6, v8);
}

uint64_t sub_1D4B0AC60(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 8);
  if ((v1 & 1) != 0)
    v2 = (uint64_t *)(v1 & 0xFFFFFFFFFFFFFFFELL);
  else
    v2 = &qword_1EFEC6AB8;
  if (*((char *)v2 + 23) < 0)
    v3 = v2[1];
  else
    v3 = *((unsigned __int8 *)v2 + 23);
  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 7) == 0)
    goto LABEL_12;
  if ((v4 & 1) == 0)
  {
    if ((v4 & 2) == 0)
      goto LABEL_10;
LABEL_17:
    v3 += ((9 * (__clz(*(_DWORD *)(a1 + 28) | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  v6 = *(_DWORD *)(a1 + 24);
  v7 = ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v6 >= 0)
    v8 = v7;
  else
    v8 = 11;
  v3 += v8;
  if ((v4 & 2) != 0)
    goto LABEL_17;
LABEL_10:
  if ((v4 & 4) != 0)
LABEL_11:
    v3 += ((9 * (__clz(*(_QWORD *)(a1 + 32) | 1) ^ 0x3F) + 73) >> 6) + 1;
LABEL_12:
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

std::string *sub_1D4B0AD34(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 7) != 0)
  {
    if ((v5 & 1) != 0)
    {
      LODWORD(v3[1].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
        {
LABEL_8:
          LODWORD(v3->__r_.__value_.__r.__words[2]) |= v5;
          return result;
        }
LABEL_7:
        v3[1].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 32);
        goto LABEL_8;
      }
    }
    else if ((v5 & 2) == 0)
    {
      goto LABEL_6;
    }
    HIDWORD(v3[1].__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 28);
    if ((v5 & 4) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  return result;
}

std::string *sub_1D4B0ADB0(std::string *result, uint64_t a2)
{
  std::string *v3;

  if ((std::string *)a2 != result)
  {
    v3 = result;
    sub_1D4B0A86C((uint64_t)result);
    return sub_1D4B0AD34(v3, a2);
  }
  return result;
}

uint64_t sub_1D4B0ADE8()
{
  return 1;
}

__n128 sub_1D4B0ADF0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __n128 *v11;
  unint64_t v12;
  __n128 result;
  unint64_t v14;
  unint64_t v15;

  v2 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = v2;
  v3 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = v3;
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v4;
  LODWORD(v4) = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v4;
  v6 = (unint64_t *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a2 + 8);
  v7 = (unint64_t *)(a2 + 8);
  v8 = v9;
  if ((v5 & 1) != 0)
  {
    if ((v8 & 1) == 0)
    {
      sub_1D4B163BC(v7);
      v10 = v15;
      v5 = *v6;
      if ((*v6 & 1) != 0)
        goto LABEL_6;
      goto LABEL_9;
    }
LABEL_5:
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((v5 & 1) != 0)
    {
LABEL_6:
      v11 = (__n128 *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
      v12 = v11[1].n128_u64[0];
      result = *v11;
      v14 = *(_QWORD *)(v10 + 16);
      *v11 = *(__n128 *)v10;
      v11[1].n128_u64[0] = v14;
      *(__n128 *)v10 = result;
      *(_QWORD *)(v10 + 16) = v12;
      return result;
    }
LABEL_9:
    sub_1D4B163BC(v6);
    goto LABEL_7;
  }
  if ((v8 & 1) != 0)
    goto LABEL_5;
  return result;
}

_QWORD *sub_1D4B0AEB8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.Stream");
}

uint64_t sub_1D4B0AEC8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E9849E38;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (atomic_load(dword_1EFEC5C60))
    sub_1D4BAFB3C(dword_1EFEC5C60);
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  return a1;
}

void sub_1D4B0AF28(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B0AF40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E9849E38;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    sub_1D4B16764((unint64_t *)(a1 + 8), v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  return a1;
}

void sub_1D4B0AFAC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B0AFC4(_QWORD *a1)
{
  *a1 = off_1E9849E38;
  sub_1D4B16364(a1 + 1);
  return a1;
}

void sub_1D4B0AFF4(uint64_t *a1)
{
  *a1 = (uint64_t)off_1E9849E38;
  sub_1D4B16364(a1 + 1);
  operator delete(a1);
}

void sub_1D4B0B024(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if ((*(_BYTE *)(a1 + 16) & 7) != 0)
  {
    *(_DWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  v2 = *(_BYTE *)(a1 + 8);
  v1 = a1 + 8;
  *(_DWORD *)(v1 + 8) = 0;
  if ((v2 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v1);
}

uint64_t sub_1D4B0B04C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  char *v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _BYTE *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  _QWORD v31[2];
  uint64_t *v32;
  __int128 v33;
  uint64_t v34;

  v4 = *(_QWORD *)(a1 + 8);
  v32 = (uint64_t *)(a1 + 8);
  v33 = 0uLL;
  v34 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v34 = *(_QWORD *)(v5 + 16);
    v33 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v31, (uint64_t)&v33);
  sub_1D4BB0DD8((uint64_t)&v28, (uint64_t)v31, 0);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v7 = (char *)*a2;
          if (*a2 >= (unint64_t)a2[1])
          {
            v8 = 0;
LABEL_9:
            v10 = sub_1D4BB0BD8((uint64_t)a2, v8);
            v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
            if ((v9 & 0x100000000) == 0)
              goto LABEL_29;
            goto LABEL_10;
          }
          v8 = *v7;
          if (*v7 < 1)
            goto LABEL_9;
          *a2 = (uint64_t)(v7 + 1);
          v9 = v8 | 0x100000000;
          if ((v9 & 0x100000000) == 0)
            goto LABEL_29;
LABEL_10:
          v11 = v9 >> 3;
          if (v9 >> 3 != 3)
            break;
          if (v9 != 24)
            goto LABEL_29;
          *(_DWORD *)(a1 + 16) |= 4u;
          v15 = (char *)*a2;
          if (*a2 >= (unint64_t)a2[1])
          {
            v16 = 0;
          }
          else
          {
            v16 = *v15;
            if ((*v15 & 0x80000000) == 0)
            {
              *(_DWORD *)(a1 + 32) = v16;
              goto LABEL_28;
            }
          }
          v24 = sub_1D4BB08A4(a2, v16);
          *(_DWORD *)(a1 + 32) = v24;
          if (v24 < 0)
            goto LABEL_52;
        }
        if (v11 != 2)
          break;
        if (v9 != 16)
          goto LABEL_29;
        *(_DWORD *)(a1 + 16) |= 2u;
        v15 = (char *)*a2;
        if (*a2 >= (unint64_t)a2[1])
        {
          v17 = 0;
          goto LABEL_51;
        }
        v17 = *v15;
        if (*v15 < 0)
        {
LABEL_51:
          v25 = sub_1D4BB08A4(a2, v17);
          *(_DWORD *)(a1 + 28) = v25;
          if (v25 < 0)
          {
LABEL_52:
            v26 = 0;
            goto LABEL_54;
          }
        }
        else
        {
          *(_DWORD *)(a1 + 28) = v17;
LABEL_28:
          *a2 = (uint64_t)(v15 + 1);
        }
      }
      if (v11 != 1 || v9 != 8)
        break;
      v13 = (char *)*a2;
      if (*a2 >= (unint64_t)a2[1])
      {
        LODWORD(v14) = 0;
      }
      else
      {
        LODWORD(v14) = *v13;
        if ((*v13 & 0x80000000) == 0)
        {
          *a2 = (uint64_t)(v13 + 1);
          goto LABEL_34;
        }
      }
      v14 = sub_1D4BB08A4(a2, v14);
      if (v14 < 0)
        goto LABEL_52;
LABEL_34:
      if (v14 > 3)
      {
        if (v30 < 5)
        {
          sub_1D4BB10F8((uint64_t)&v28, 8u);
          v18 = v30;
        }
        else
        {
          *v29++ = 8;
          v18 = --v30;
        }
        if (v18 < 5)
        {
          sub_1D4BB10F8((uint64_t)&v28, v14);
        }
        else
        {
          v19 = (int)v29;
          if (v14 < 0x80)
          {
            LOBYTE(v21) = v14;
            v20 = v29;
          }
          else
          {
            v20 = v29;
            do
            {
              *v20++ = v14 | 0x80;
              v21 = v14 >> 7;
              v22 = v14 >> 14;
              LODWORD(v14) = v14 >> 7;
            }
            while (v22);
          }
          *v20 = v21;
          v23 = (_DWORD)v20 - v19 + 1;
          v29 += v23;
          v30 -= v23;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        *(_DWORD *)(a1 + 24) = v14;
      }
    }
LABEL_29:
    if (!(_DWORD)v9)
      break;
    if (!sub_1D4BB3060((uint64_t)a2, v9, (uint64_t)&v28))
      goto LABEL_52;
  }
  v26 = 1;
LABEL_54:
  sub_1D4BB0EE0((uint64_t)&v28);
  sub_1D4B16458(&v32);
  return v26;
}

void sub_1D4B0B330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B0B35C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 1) != 0)
  {
    sub_1D4BB36D0(1, *(_DWORD *)(a1 + 24), a2);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  sub_1D4BB37DC(2, *(_DWORD *)(a1 + 28), a2);
  if ((v4 & 4) != 0)
LABEL_4:
    sub_1D4BB37DC(3, *(_DWORD *)(a1 + 32), a2);
LABEL_5:
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 1) != 0)
    v6 = (char *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v6 = (char *)&qword_1EFEC6AB8;
  if (v6[23] < 0)
    v6 = *(char **)v6;
  if ((v5 & 1) != 0)
    v7 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v7 = &qword_1EFEC6AB8;
  if (*((char *)v7 + 23) < 0)
    v8 = v7[1];
  else
    LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
  return sub_1D4BB0EE4(a2, v6, v8);
}

uint64_t sub_1D4B0B41C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 8);
  if ((v1 & 1) != 0)
    v2 = (uint64_t *)(v1 & 0xFFFFFFFFFFFFFFFELL);
  else
    v2 = &qword_1EFEC6AB8;
  if (*((char *)v2 + 23) < 0)
    v3 = v2[1];
  else
    v3 = *((unsigned __int8 *)v2 + 23);
  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 7) == 0)
    goto LABEL_12;
  if ((v4 & 1) == 0)
  {
    if ((v4 & 2) == 0)
      goto LABEL_10;
LABEL_17:
    v3 += ((9 * (__clz(*(_DWORD *)(a1 + 28) | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v4 & 4) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
  v6 = *(_DWORD *)(a1 + 24);
  v7 = ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v6 >= 0)
    v8 = v7;
  else
    v8 = 11;
  v3 += v8;
  if ((v4 & 2) != 0)
    goto LABEL_17;
LABEL_10:
  if ((v4 & 4) != 0)
LABEL_11:
    v3 += ((9 * (__clz(*(_DWORD *)(a1 + 32) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_12:
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

std::string *sub_1D4B0B4F4(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 7) != 0)
  {
    if ((v5 & 1) != 0)
    {
      LODWORD(v3[1].__r_.__value_.__l.__data_) = *(_DWORD *)(a2 + 24);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
        {
LABEL_8:
          LODWORD(v3->__r_.__value_.__r.__words[2]) |= v5;
          return result;
        }
LABEL_7:
        LODWORD(v3[1].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 32);
        goto LABEL_8;
      }
    }
    else if ((v5 & 2) == 0)
    {
      goto LABEL_6;
    }
    HIDWORD(v3[1].__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 28);
    if ((v5 & 4) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  return result;
}

std::string *sub_1D4B0B570(std::string *result, uint64_t a2)
{
  std::string *v3;

  if ((std::string *)a2 != result)
  {
    v3 = result;
    sub_1D4B0B024((uint64_t)result);
    return sub_1D4B0B4F4(v3, a2);
  }
  return result;
}

uint64_t sub_1D4B0B5A8()
{
  return 1;
}

__n128 sub_1D4B0B5B0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __n128 *v12;
  unint64_t v13;
  __n128 result;
  unint64_t v15;
  unint64_t v16;

  v2 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = v2;
  v3 = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = v3;
  v4 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v4;
  v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  v7 = (unint64_t *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a2 + 8);
  v8 = (unint64_t *)(a2 + 8);
  v9 = v10;
  if ((v6 & 1) != 0)
  {
    if ((v9 & 1) == 0)
    {
      sub_1D4B163BC(v8);
      v11 = v16;
      v6 = *v7;
      if ((*v7 & 1) != 0)
        goto LABEL_6;
      goto LABEL_9;
    }
LABEL_5:
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((v6 & 1) != 0)
    {
LABEL_6:
      v12 = (__n128 *)(v6 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
      v13 = v12[1].n128_u64[0];
      result = *v12;
      v15 = *(_QWORD *)(v11 + 16);
      *v12 = *(__n128 *)v11;
      v12[1].n128_u64[0] = v15;
      *(__n128 *)v11 = result;
      *(_QWORD *)(v11 + 16) = v13;
      return result;
    }
LABEL_9:
    sub_1D4B163BC(v7);
    goto LABEL_7;
  }
  if ((v9 & 1) != 0)
    goto LABEL_5;
  return result;
}

_QWORD *sub_1D4B0B678@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.ColumnEncoding");
}

uint64_t sub_1D4B0B688(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = off_1E984A838;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  if (atomic_load(dword_1EFEC5E08))
    sub_1D4BAFB3C(dword_1EFEC5E08);
  return a1;
}

void sub_1D4B0B6FC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;

  sub_1D4B167F0(v3);
  sub_1D4B167F0(v2);
  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B0B728(_QWORD *a1)
{
  *a1 = off_1E984A838;
  sub_1D4B167F0(a1 + 6);
  sub_1D4B167F0(a1 + 3);
  sub_1D4B16364(a1 + 1);
  return a1;
}

void sub_1D4B0B774(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B0B728(a1);
  operator delete(v1);
}

void sub_1D4B0B788(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(unsigned int *)(a1 + 32);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 40) + 8);
    do
    {
      v4 = *v3++;
      sub_1D4B0A86C(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(a1 + 32) = 0;
  }
  v5 = *(unsigned int *)(a1 + 56);
  if ((int)v5 >= 1)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a1 + 64) + 8);
    do
    {
      v7 = *v6++;
      sub_1D4B0B024(v7);
      --v5;
    }
    while (v5);
    *(_DWORD *)(a1 + 56) = 0;
  }
  v9 = *(_BYTE *)(a1 + 8);
  v8 = a1 + 8;
  *(_DWORD *)(v8 + 8) = 0;
  if ((v9 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v8);
}

uint64_t sub_1D4B0B81C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  int *v16;
  uint64_t v17;
  int v18;
  void *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE v34[32];
  _QWORD v35[2];
  uint64_t *v36;
  __int128 v37;
  uint64_t v38;

  v4 = *(_QWORD *)(a1 + 8);
  v36 = (uint64_t *)(a1 + 8);
  v37 = 0uLL;
  v38 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v38 = *(_QWORD *)(v5 + 16);
    v37 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v35, (uint64_t)&v37);
  sub_1D4BB0DD8((uint64_t)v34, (uint64_t)v35, 0);
  do
  {
    v7 = *(unsigned __int8 **)a2;
    if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
    {
      v8 = 0;
    }
    else
    {
      v8 = *v7;
      if ((char)*v7 >= 1)
      {
        *(_QWORD *)a2 = v7 + 1;
        v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0)
          goto LABEL_23;
        goto LABEL_10;
      }
    }
    v10 = sub_1D4BB0BD8(a2, v8);
    v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
    if ((v9 & 0x100000000) == 0)
      goto LABEL_23;
LABEL_10:
    if (v9 >> 3 != 2)
    {
      if (v9 >> 3 != 1 || v9 != 10)
      {
LABEL_23:
        if (!(_DWORD)v9)
        {
          v32 = 1;
          goto LABEL_50;
        }
        v20 = sub_1D4BB3060(a2, v9, (uint64_t)v34);
        continue;
      }
      v12 = *(int **)(a1 + 40);
      if (v12)
      {
        v13 = *(int *)(a1 + 32);
        v14 = *v12;
        if ((int)v13 < *v12)
        {
          *(_DWORD *)(a1 + 32) = v13 + 1;
          v15 = *(_QWORD **)&v12[2 * v13 + 2];
LABEL_32:
          v23 = *(char **)a2;
          if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v23 < 0)
          {
            v24 = sub_1D4BB098C((unsigned __int8 **)a2);
            if (v24 < 0)
              break;
          }
          else
          {
            v24 = *v23;
            *(_QWORD *)a2 = v23 + 1;
          }
          v25 = sub_1D4BAFFA4(a2, v24);
          v26 = v25;
          if ((v25 & 0x8000000000000000) != 0 || !sub_1D4B0A890((uint64_t)v15, (uint64_t *)a2))
            break;
          goto LABEL_38;
        }
        if (v14 != *(_DWORD *)(a1 + 36))
        {
LABEL_31:
          *v12 = v14 + 1;
          v15 = sub_1D4B15850(*(_QWORD *)(a1 + 24));
          v21 = *(_QWORD *)(a1 + 40);
          v22 = *(int *)(a1 + 32);
          *(_DWORD *)(a1 + 32) = v22 + 1;
          *(_QWORD *)(v21 + 8 * v22 + 8) = v15;
          goto LABEL_32;
        }
      }
      else
      {
        v14 = *(_DWORD *)(a1 + 36);
      }
      sub_1D4BB24FC(a1 + 24, v14 + 1);
      v12 = *(int **)(a1 + 40);
      v14 = *v12;
      goto LABEL_31;
    }
    if (v9 != 18)
      goto LABEL_23;
    v16 = *(int **)(a1 + 64);
    if (!v16)
    {
      v18 = *(_DWORD *)(a1 + 60);
      goto LABEL_40;
    }
    v17 = *(int *)(a1 + 56);
    v18 = *v16;
    if ((int)v17 >= *v16)
    {
      if (v18 != *(_DWORD *)(a1 + 60))
      {
LABEL_41:
        *v16 = v18 + 1;
        v19 = sub_1D4B158D8(*(_QWORD *)(a1 + 48));
        v27 = *(_QWORD *)(a1 + 64);
        v28 = *(int *)(a1 + 56);
        *(_DWORD *)(a1 + 56) = v28 + 1;
        *(_QWORD *)(v27 + 8 * v28 + 8) = v19;
        goto LABEL_42;
      }
LABEL_40:
      sub_1D4BB24FC(a1 + 48, v18 + 1);
      v16 = *(int **)(a1 + 64);
      v18 = *v16;
      goto LABEL_41;
    }
    *(_DWORD *)(a1 + 56) = v17 + 1;
    v19 = *(void **)&v16[2 * v17 + 2];
LABEL_42:
    v29 = *(unsigned __int8 **)a2;
    if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v29 < 0)
    {
      v30 = sub_1D4BB098C((unsigned __int8 **)a2);
      if (v30 < 0)
        break;
    }
    else
    {
      v30 = *v29;
      *(_QWORD *)a2 = v29 + 1;
    }
    v31 = sub_1D4BAFFA4(a2, v30);
    v26 = v31;
    if ((v31 & 0x8000000000000000) != 0 || !sub_1D4B0B04C((uint64_t)v19, (uint64_t *)a2))
      break;
LABEL_38:
    v20 = sub_1D4BAFFD8(a2, v26);
  }
  while (v20);
  v32 = 0;
LABEL_50:
  sub_1D4BB0EE0((uint64_t)v34);
  sub_1D4B16458(&v36);
  return v32;
}

void sub_1D4B0BB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B0BB50(uint64_t a1, uint64_t a2)
{
  int v4;
  int i;
  int v6;
  int j;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;

  v4 = *(_DWORD *)(a1 + 32);
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      sub_1D4BB4528(1, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i + 8), a2);
  }
  v6 = *(_DWORD *)(a1 + 56);
  if (v6)
  {
    for (j = 0; j != v6; ++j)
      sub_1D4BB4528(2, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * j + 8), a2);
  }
  v8 = *(_QWORD *)(a1 + 8);
  if ((v8 & 1) != 0)
    v9 = (char *)(v8 & 0xFFFFFFFFFFFFFFFELL);
  else
    v9 = (char *)&qword_1EFEC6AB8;
  if (v9[23] < 0)
    v9 = *(char **)v9;
  if ((v8 & 1) != 0)
    v10 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFELL);
  else
    v10 = &qword_1EFEC6AB8;
  if (*((char *)v10 + 23) < 0)
    v11 = v10[1];
  else
    LODWORD(v11) = *((unsigned __int8 *)v10 + 23);
  return sub_1D4BB0EE4(a2, v9, v11);
}

uint64_t sub_1D4B0BC24(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 1) != 0)
    v3 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  else
    v3 = &qword_1EFEC6AB8;
  if (*((char *)v3 + 23) < 0)
    v4 = v3[1];
  else
    v4 = *((unsigned __int8 *)v3 + 23);
  v5 = *(unsigned int *)(a1 + 32);
  v6 = v4 + v5;
  if ((_DWORD)v5)
  {
    v7 = 0;
    do
    {
      v8 = sub_1D4B0AC60(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v7 + 8));
      v6 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
      ++v7;
    }
    while ((_DWORD)v5 != v7);
  }
  v9 = *(unsigned int *)(a1 + 56);
  v10 = v6 + v9;
  if ((_DWORD)v9)
  {
    v11 = 0;
    do
    {
      v12 = sub_1D4B0B41C(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v11 + 8));
      v10 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      ++v11;
    }
    while ((_DWORD)v9 != v11);
  }
  *(_DWORD *)(a1 + 20) = v10;
  return v10;
}

std::string *sub_1D4B0BD18(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  std::string **v7;
  signed int v8;
  signed int *v9;
  unsigned int v10;
  uint64_t *v11;
  std::string **v12;
  signed int v13;
  signed int *v14;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 32);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 40) + 8);
    v7 = (std::string **)sub_1D4BB23F8((uint64_t)&v3[1], *(_DWORD *)(a2 + 32));
    result = sub_1D4B169D8(v3 + 1, v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2] - LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    v8 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v5;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v8;
    v9 = (signed int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *(_DWORD *)(a2 + 56);
  if (v10)
  {
    v11 = (uint64_t *)(*(_QWORD *)(a2 + 64) + 8);
    v12 = (std::string **)sub_1D4BB23F8((uint64_t)&v3[2], v10);
    result = sub_1D4B16A94(v3 + 2, v12, v11, v10, *(_DWORD *)v3[2].__r_.__value_.__r.__words[2] - LODWORD(v3[2].__r_.__value_.__r.__words[1]));
    v13 = LODWORD(v3[2].__r_.__value_.__r.__words[1]) + v10;
    LODWORD(v3[2].__r_.__value_.__r.__words[1]) = v13;
    v14 = (signed int *)v3[2].__r_.__value_.__r.__words[2];
    if (*v14 < v13)
      *v14 = v13;
  }
  return result;
}

uint64_t sub_1D4B0BE24()
{
  return 1;
}

_QWORD *sub_1D4B0BE2C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.StripeEncryptionVariant");
}

uint64_t sub_1D4B0BE3C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E9849C58;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  if (atomic_load(dword_1EFEC5C20))
    sub_1D4BAFB3C(dword_1EFEC5C20);
  *(_QWORD *)(a1 + 96) = &qword_1EFEC6AB8;
  return a1;
}

void sub_1D4B0BED0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  sub_1D4B167F0(v3);
  sub_1D4B167F0(v4);
  sub_1D4B167F0(v2);
  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B0BF0C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_1E9849C58;
  v2 = a1 + 9;
  sub_1D4B0BF6C((uint64_t)a1);
  sub_1D4B167F0(v2);
  sub_1D4B167F0(a1 + 6);
  sub_1D4B167F0(a1 + 3);
  sub_1D4B16364(a1 + 1);
  return a1;
}

void sub_1D4B0BF6C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 96);
  if ((uint64_t *)v1 != &qword_1EFEC6AB8 && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete((void *)v1);
  }
}

void sub_1D4B0BFC0(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B0BF0C(a1);
  operator delete(v1);
}

void sub_1D4B0BFD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v2 = *(unsigned int *)(a1 + 32);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 40) + 8);
    do
    {
      v4 = *v3++;
      sub_1D4B0A86C(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(a1 + 32) = 0;
  }
  v5 = *(unsigned int *)(a1 + 56);
  if ((int)v5 >= 1)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a1 + 64) + 8);
    do
    {
      v7 = *v6++;
      sub_1D4B0B024(v7);
      --v5;
    }
    while (v5);
    *(_DWORD *)(a1 + 56) = 0;
  }
  v8 = *(unsigned int *)(a1 + 80);
  if ((int)v8 >= 1)
  {
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 88) + 8);
    do
    {
      v10 = *v9++;
      sub_1D4B0B788(v10);
      --v8;
    }
    while (v8);
    *(_DWORD *)(a1 + 80) = 0;
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v11 = *(_QWORD *)(a1 + 96);
    if (*(char *)(v11 + 23) < 0)
    {
      **(_BYTE **)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v11 = 0;
      *(_BYTE *)(v11 + 23) = 0;
    }
  }
  v13 = *(_BYTE *)(a1 + 8);
  v12 = a1 + 8;
  *(_DWORD *)(v12 + 8) = 0;
  if ((v13 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v12);
}

uint64_t sub_1D4B0C0BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int *v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  int *v15;
  uint64_t v16;
  int v17;
  void *v18;
  std::string *v19;
  BOOL v20;
  int *v21;
  uint64_t v22;
  int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  int v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE v43[32];
  _QWORD v44[2];
  uint64_t *v45;
  __int128 v46;
  uint64_t v47;

  v4 = *(_QWORD *)(a1 + 8);
  v45 = (uint64_t *)(a1 + 8);
  v46 = 0uLL;
  v47 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v47 = *(_QWORD *)(v5 + 16);
    v46 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v44, (uint64_t)&v46);
  sub_1D4BB0DD8((uint64_t)v43, (uint64_t)v44, 0);
  while (1)
  {
    v7 = *(unsigned __int8 **)a2;
    if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
      break;
    v8 = *v7;
    if ((char)*v7 < 1)
      goto LABEL_9;
    *(_QWORD *)a2 = v7 + 1;
    v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) == 0)
      goto LABEL_27;
LABEL_10:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_27;
        v11 = *(int **)(a1 + 40);
        if (!v11)
        {
          v13 = *(_DWORD *)(a1 + 36);
LABEL_35:
          sub_1D4BB24FC(a1 + 24, v13 + 1);
          v11 = *(int **)(a1 + 40);
          v13 = *v11;
          goto LABEL_36;
        }
        v12 = *(int *)(a1 + 32);
        v13 = *v11;
        if ((int)v12 < *v11)
        {
          *(_DWORD *)(a1 + 32) = v12 + 1;
          v14 = *(_QWORD **)&v11[2 * v12 + 2];
          goto LABEL_37;
        }
        if (v13 == *(_DWORD *)(a1 + 36))
          goto LABEL_35;
LABEL_36:
        *v11 = v13 + 1;
        v14 = sub_1D4B15850(*(_QWORD *)(a1 + 24));
        v25 = *(_QWORD *)(a1 + 40);
        v26 = *(int *)(a1 + 32);
        *(_DWORD *)(a1 + 32) = v26 + 1;
        *(_QWORD *)(v25 + 8 * v26 + 8) = v14;
LABEL_37:
        v27 = *(char **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v27 < 0)
        {
          v28 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v28 < 0)
            goto LABEL_66;
        }
        else
        {
          v28 = *v27;
          *(_QWORD *)a2 = v27 + 1;
        }
        v29 = sub_1D4BAFFA4(a2, v28);
        v30 = v29;
        if ((v29 & 0x8000000000000000) == 0 && sub_1D4B0A890((uint64_t)v14, (uint64_t *)a2))
          goto LABEL_63;
        goto LABEL_66;
      case 2u:
        if (v9 != 18)
          goto LABEL_27;
        v15 = *(int **)(a1 + 64);
        if (!v15)
        {
          v17 = *(_DWORD *)(a1 + 60);
LABEL_45:
          sub_1D4BB24FC(a1 + 48, v17 + 1);
          v15 = *(int **)(a1 + 64);
          v17 = *v15;
          goto LABEL_46;
        }
        v16 = *(int *)(a1 + 56);
        v17 = *v15;
        if ((int)v16 < *v15)
        {
          *(_DWORD *)(a1 + 56) = v16 + 1;
          v18 = *(void **)&v15[2 * v16 + 2];
          goto LABEL_47;
        }
        if (v17 == *(_DWORD *)(a1 + 60))
          goto LABEL_45;
LABEL_46:
        *v15 = v17 + 1;
        v18 = sub_1D4B158D8(*(_QWORD *)(a1 + 48));
        v31 = *(_QWORD *)(a1 + 64);
        v32 = *(int *)(a1 + 56);
        *(_DWORD *)(a1 + 56) = v32 + 1;
        *(_QWORD *)(v31 + 8 * v32 + 8) = v18;
LABEL_47:
        v33 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v33 < 0)
        {
          v34 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v34 < 0)
            goto LABEL_66;
        }
        else
        {
          v34 = *v33;
          *(_QWORD *)a2 = v33 + 1;
        }
        v35 = sub_1D4BAFFA4(a2, v34);
        v30 = v35;
        if ((v35 & 0x8000000000000000) == 0 && sub_1D4B0B04C((uint64_t)v18, (uint64_t *)a2))
          goto LABEL_63;
        goto LABEL_66;
      case 3u:
        if (v9 != 26)
          goto LABEL_27;
        *(_DWORD *)(a1 + 16) |= 1u;
        v19 = *(std::string **)(a1 + 96);
        if (v19 == (std::string *)&qword_1EFEC6AB8)
        {
          sub_1D4B164E8((_QWORD *)(a1 + 96), (uint64_t)&qword_1EFEC6AB8);
          v19 = *(std::string **)(a1 + 96);
        }
        v20 = sub_1D4BB4654((uint64_t *)a2, v19);
        break;
      case 4u:
        if (v9 != 34)
          goto LABEL_27;
        v21 = *(int **)(a1 + 88);
        if (!v21)
        {
          v23 = *(_DWORD *)(a1 + 84);
LABEL_55:
          sub_1D4BB24FC(a1 + 72, v23 + 1);
          v21 = *(int **)(a1 + 88);
          v23 = *v21;
          goto LABEL_56;
        }
        v22 = *(int *)(a1 + 80);
        v23 = *v21;
        if ((int)v22 < *v21)
        {
          *(_DWORD *)(a1 + 80) = v22 + 1;
          v24 = *(void **)&v21[2 * v22 + 2];
          goto LABEL_57;
        }
        if (v23 == *(_DWORD *)(a1 + 84))
          goto LABEL_55;
LABEL_56:
        *v21 = v23 + 1;
        v24 = sub_1D4B15960(*(_QWORD *)(a1 + 72));
        v36 = *(_QWORD *)(a1 + 88);
        v37 = *(int *)(a1 + 80);
        *(_DWORD *)(a1 + 80) = v37 + 1;
        *(_QWORD *)(v36 + 8 * v37 + 8) = v24;
LABEL_57:
        v38 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v38 < 0)
        {
          v39 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v39 < 0)
            goto LABEL_66;
        }
        else
        {
          v39 = *v38;
          *(_QWORD *)a2 = v38 + 1;
        }
        v40 = sub_1D4BAFFA4(a2, v39);
        v30 = v40;
        if ((v40 & 0x8000000000000000) != 0 || !sub_1D4B0B81C((uint64_t)v24, a2))
        {
LABEL_66:
          v41 = 0;
          goto LABEL_65;
        }
LABEL_63:
        v20 = sub_1D4BAFFD8(a2, v30);
        break;
      default:
        goto LABEL_27;
    }
LABEL_29:
    if (!v20)
      goto LABEL_66;
  }
  v8 = 0;
LABEL_9:
  v10 = sub_1D4BB0BD8(a2, v8);
  v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
  if ((v9 & 0x100000000) != 0)
    goto LABEL_10;
LABEL_27:
  if ((_DWORD)v9)
  {
    v20 = sub_1D4BB3060(a2, v9, (uint64_t)v43);
    goto LABEL_29;
  }
  v41 = 1;
LABEL_65:
  sub_1D4BB0EE0((uint64_t)v43);
  sub_1D4B16458(&v45);
  return v41;
}

void sub_1D4B0C530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B0C558(uint64_t a1, uint64_t a2)
{
  int v4;
  int i;
  int v6;
  int j;
  int v8;
  int k;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a1 + 32);
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      sub_1D4BB4528(1, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i + 8), a2);
  }
  v6 = *(_DWORD *)(a1 + 56);
  if (v6)
  {
    for (j = 0; j != v6; ++j)
      sub_1D4BB4528(2, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * j + 8), a2);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    sub_1D4BB3FE4(3, *(_QWORD *)(a1 + 96), a2);
  v8 = *(_DWORD *)(a1 + 80);
  if (v8)
  {
    for (k = 0; k != v8; ++k)
      sub_1D4BB4528(4, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * k + 8), a2);
  }
  v10 = *(_QWORD *)(a1 + 8);
  if ((v10 & 1) != 0)
    v11 = (char *)(v10 & 0xFFFFFFFFFFFFFFFELL);
  else
    v11 = (char *)&qword_1EFEC6AB8;
  if (v11[23] < 0)
    v11 = *(char **)v11;
  if ((v10 & 1) != 0)
    v12 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFFELL);
  else
    v12 = &qword_1EFEC6AB8;
  if (*((char *)v12 + 23) < 0)
    v13 = v12[1];
  else
    LODWORD(v13) = *((unsigned __int8 *)v12 + 23);
  return sub_1D4BB0EE4(a2, v11, v13);
}

uint64_t sub_1D4B0C674(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 1) != 0)
    v3 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  else
    v3 = &qword_1EFEC6AB8;
  if (*((char *)v3 + 23) < 0)
    v4 = v3[1];
  else
    v4 = *((unsigned __int8 *)v3 + 23);
  v5 = *(unsigned int *)(a1 + 32);
  v6 = v4 + v5;
  if ((_DWORD)v5)
  {
    v7 = 0;
    do
    {
      v8 = sub_1D4B0AC60(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v7 + 8));
      v6 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
      ++v7;
    }
    while ((_DWORD)v5 != v7);
  }
  v9 = *(unsigned int *)(a1 + 56);
  v10 = v6 + v9;
  if ((_DWORD)v9)
  {
    v11 = 0;
    do
    {
      v12 = sub_1D4B0B41C(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v11 + 8));
      v10 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      ++v11;
    }
    while ((_DWORD)v9 != v11);
  }
  v13 = *(unsigned int *)(a1 + 80);
  v14 = v10 + v13;
  if ((_DWORD)v13)
  {
    v15 = 0;
    do
    {
      v16 = sub_1D4B0BC24(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v15 + 8));
      v14 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6);
      ++v15;
    }
    while ((_DWORD)v13 != v15);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v17 = *(_QWORD *)(a1 + 96);
    v18 = *(unsigned __int8 *)(v17 + 23);
    v19 = *(_QWORD *)(v17 + 8);
    if ((v18 & 0x80u) == 0)
      v19 = v18;
    v14 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *(_DWORD *)(a1 + 20) = v14;
  return v14;
}

std::string *sub_1D4B0C7F8(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  std::string **v7;
  signed int v8;
  signed int *v9;
  unsigned int v10;
  uint64_t *v11;
  std::string **v12;
  signed int v13;
  signed int *v14;
  unsigned int v15;
  uint64_t *v16;
  std::string **v17;
  signed int v18;
  signed int *v19;
  std::string::__raw *v20;
  std::string *data;
  const std::string *v22;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 32);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 40) + 8);
    v7 = (std::string **)sub_1D4BB23F8((uint64_t)&v3[1], *(_DWORD *)(a2 + 32));
    result = sub_1D4B169D8(v3 + 1, v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2] - LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    v8 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v5;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v8;
    v9 = (signed int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *(_DWORD *)(a2 + 56);
  if (v10)
  {
    v11 = (uint64_t *)(*(_QWORD *)(a2 + 64) + 8);
    v12 = (std::string **)sub_1D4BB23F8((uint64_t)&v3[2], *(_DWORD *)(a2 + 56));
    result = sub_1D4B16A94(v3 + 2, v12, v11, v10, *(_DWORD *)v3[2].__r_.__value_.__r.__words[2] - LODWORD(v3[2].__r_.__value_.__r.__words[1]));
    v13 = LODWORD(v3[2].__r_.__value_.__r.__words[1]) + v10;
    LODWORD(v3[2].__r_.__value_.__r.__words[1]) = v13;
    v14 = (signed int *)v3[2].__r_.__value_.__r.__words[2];
    if (*v14 < v13)
      *v14 = v13;
  }
  v15 = *(_DWORD *)(a2 + 80);
  if (v15)
  {
    v16 = (uint64_t *)(*(_QWORD *)(a2 + 88) + 8);
    v17 = (std::string **)sub_1D4BB23F8((uint64_t)&v3[3], *(_DWORD *)(a2 + 80));
    result = sub_1D4B16B50(v3 + 3, v17, v16, v15, *(_DWORD *)v3[3].__r_.__value_.__r.__words[2] - LODWORD(v3[3].__r_.__value_.__r.__words[1]));
    v18 = LODWORD(v3[3].__r_.__value_.__r.__words[1]) + v15;
    LODWORD(v3[3].__r_.__value_.__r.__words[1]) = v18;
    v19 = (signed int *)v3[3].__r_.__value_.__r.__words[2];
    if (*v19 < v18)
      *v19 = v18;
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    data = (std::string *)v3[4].__r_.__value_.__l.__data_;
    v20 = (std::string::__raw *)&v3[4];
    result = data;
    LODWORD(v20[-4].__words[2]) |= 1u;
    v22 = *(const std::string **)(a2 + 96);
    if (data != v22)
    {
      if (result == (std::string *)&qword_1EFEC6AB8)
        return (std::string *)sub_1D4B164E8(v20, (uint64_t)v22);
      else
        return std::string::operator=(result, v22);
    }
  }
  return result;
}

uint64_t sub_1D4B0C9C8()
{
  return 1;
}

__n128 sub_1D4B0C9D0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  __n128 *v19;
  unint64_t v20;
  __n128 result;
  unint64_t v22;
  unint64_t v23;

  v2 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = a2[5];
  a2[5] = v2;
  v3 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = a2[8];
  a2[8] = v3;
  v4 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = a2[11];
  a2[11] = v4;
  v5 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = a2[12];
  a2[12] = v5;
  v7 = (unint64_t *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 32);
  v11 = a2[1];
  v9 = a2 + 1;
  v10 = v11;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v9 + 6);
  *((_DWORD *)v9 + 6) = v8;
  v12 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 36) = *((_DWORD *)v9 + 7);
  *((_DWORD *)v9 + 7) = v12;
  v13 = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = *((_DWORD *)v9 + 12);
  *((_DWORD *)v9 + 12) = v13;
  v14 = *(_DWORD *)(a1 + 60);
  *(_DWORD *)(a1 + 60) = *((_DWORD *)v9 + 13);
  *((_DWORD *)v9 + 13) = v14;
  v15 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = *((_DWORD *)v9 + 18);
  *((_DWORD *)v9 + 18) = v15;
  v16 = *(_DWORD *)(a1 + 84);
  *(_DWORD *)(a1 + 84) = *((_DWORD *)v9 + 19);
  *((_DWORD *)v9 + 19) = v16;
  v17 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *((_DWORD *)v9 + 2);
  *((_DWORD *)v9 + 2) = v17;
  if ((v6 & 1) != 0)
  {
    if ((v10 & 1) == 0)
    {
      sub_1D4B163BC(v9);
      v18 = v23;
      v6 = *v7;
      if ((*v7 & 1) != 0)
        goto LABEL_6;
      goto LABEL_9;
    }
LABEL_5:
    v18 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if ((v6 & 1) != 0)
    {
LABEL_6:
      v19 = (__n128 *)(v6 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
      v20 = v19[1].n128_u64[0];
      result = *v19;
      v22 = *(_QWORD *)(v18 + 16);
      *v19 = *(__n128 *)v18;
      v19[1].n128_u64[0] = v22;
      *(__n128 *)v18 = result;
      *(_QWORD *)(v18 + 16) = v20;
      return result;
    }
LABEL_9:
    sub_1D4B163BC(v7);
    goto LABEL_7;
  }
  if ((v10 & 1) != 0)
    goto LABEL_5;
  return result;
}

_QWORD *sub_1D4B0CB08@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.StripeFooter");
}

_QWORD *sub_1D4B0CB18(_QWORD *a1)
{
  *a1 = off_1E9849B18;
  a1[1] = 0;
  a1[2] = 0;
  if (atomic_load(dword_1EFEC5C08))
    sub_1D4BAFB3C(dword_1EFEC5C08);
  a1[3] = &qword_1EFEC6AB8;
  a1[4] = &qword_1EFEC6AB8;
  return a1;
}

void sub_1D4B0CB7C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

void sub_1D4B0CB90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  if ((uint64_t *)v2 != &qword_1EFEC6AB8 && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
  }
  v4 = *(_QWORD *)(a1 + 32);
  if ((uint64_t *)v4 != &qword_1EFEC6AB8 && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    operator delete((void *)v4);
  }
}

_QWORD *sub_1D4B0CC18(_QWORD *a1)
{
  uint64_t *v2;

  *a1 = off_1E9849B18;
  v2 = a1 + 1;
  sub_1D4B0CB90((uint64_t)a1);
  sub_1D4B16364(v2);
  return a1;
}

void sub_1D4B0CC54(uint64_t *a1)
{
  uint64_t *v2;

  *a1 = (uint64_t)off_1E9849B18;
  v2 = a1 + 1;
  sub_1D4B0CB90((uint64_t)a1);
  sub_1D4B16364(v2);
  operator delete(a1);
}

void sub_1D4B0CC90(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
    goto LABEL_11;
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0)
      goto LABEL_6;
    goto LABEL_11;
  }
  v2 = *(_QWORD *)(a1 + 24);
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(_BYTE **)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    v3 = *(_QWORD *)(a1 + 32);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  v5 = *(_BYTE *)(a1 + 8);
  v4 = a1 + 8;
  *(_DWORD *)(v4 + 8) = 0;
  if ((v5 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v4);
}

uint64_t sub_1D4B0CD04(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  std::string *v12;
  BOOL v13;
  uint64_t v14;
  _BYTE v16[32];
  _QWORD v17[2];
  uint64_t *v18;
  __int128 v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 8);
  v18 = (uint64_t *)(a1 + 8);
  v19 = 0uLL;
  v20 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v20 = *(_QWORD *)(v5 + 16);
    v19 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v17, (uint64_t)&v19);
  sub_1D4BB0DD8((uint64_t)v16, (uint64_t)v17, 0);
  while (1)
  {
    v7 = (char *)*a2;
    if (*a2 >= (unint64_t)a2[1])
    {
      v8 = 0;
    }
    else
    {
      v8 = *v7;
      if (*v7 >= 1)
      {
        *a2 = (uint64_t)(v7 + 1);
        v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0)
          goto LABEL_23;
        goto LABEL_10;
      }
    }
    v10 = sub_1D4BB0BD8((uint64_t)a2, v8);
    v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
    if ((v9 & 0x100000000) == 0)
      goto LABEL_23;
LABEL_10:
    if (v9 >> 3 != 2)
      break;
    if (v9 != 18)
      goto LABEL_23;
    *(_DWORD *)(a1 + 16) |= 2u;
    v12 = *(std::string **)(a1 + 32);
    if (v12 == (std::string *)&qword_1EFEC6AB8)
    {
      sub_1D4B164E8((_QWORD *)(a1 + 32), (uint64_t)&qword_1EFEC6AB8);
      v12 = *(std::string **)(a1 + 32);
    }
LABEL_18:
    v13 = sub_1D4BB4654(a2, v12);
LABEL_25:
    if (!v13)
    {
      v14 = 0;
      goto LABEL_28;
    }
  }
  if (v9 >> 3 == 1 && v9 == 10)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    v12 = *(std::string **)(a1 + 24);
    if (v12 == (std::string *)&qword_1EFEC6AB8)
    {
      sub_1D4B164E8((_QWORD *)(a1 + 24), (uint64_t)&qword_1EFEC6AB8);
      v12 = *(std::string **)(a1 + 24);
    }
    goto LABEL_18;
  }
LABEL_23:
  if ((_DWORD)v9)
  {
    v13 = sub_1D4BB3060((uint64_t)a2, v9, (uint64_t)v16);
    goto LABEL_25;
  }
  v14 = 1;
LABEL_28:
  sub_1D4BB0EE0((uint64_t)v16);
  sub_1D4B16458(&v18);
  return v14;
}

void sub_1D4B0CEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B0CEDC(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 1) != 0)
    sub_1D4BB3FE4(1, *(_QWORD *)(a1 + 24), a2);
  if ((v4 & 2) != 0)
    sub_1D4BB3FE4(2, *(_QWORD *)(a1 + 32), a2);
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 1) != 0)
    v6 = (char *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v6 = (char *)&qword_1EFEC6AB8;
  if (v6[23] < 0)
    v6 = *(char **)v6;
  if ((v5 & 1) != 0)
    v7 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v7 = &qword_1EFEC6AB8;
  if (*((char *)v7 + 23) < 0)
    v8 = v7[1];
  else
    LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
  return sub_1D4BB0EE4(a2, v6, v8);
}

uint64_t sub_1D4B0CF7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 8);
  if ((v1 & 1) != 0)
    v2 = (uint64_t *)(v1 & 0xFFFFFFFFFFFFFFFELL);
  else
    v2 = &qword_1EFEC6AB8;
  if (*((char *)v2 + 23) < 0)
    v3 = v2[1];
  else
    v3 = *((unsigned __int8 *)v2 + 23);
  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 3) != 0)
  {
    if ((v4 & 1) != 0)
    {
      v5 = *(_QWORD *)(a1 + 24);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v7 = *(_QWORD *)(v5 + 8);
      if ((v6 & 0x80u) == 0)
        v7 = v6;
      v3 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v4 & 2) != 0)
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(unsigned __int8 *)(v8 + 23);
      v10 = *(_QWORD *)(v8 + 8);
      if ((v9 & 0x80u) == 0)
        v10 = v9;
      v3 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

std::string *sub_1D4B0D044(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;
  std::string *data;
  const std::string *v7;
  std::string::size_type *p_size;
  std::string *size;
  const std::string *v10;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 3) != 0)
  {
    if ((v5 & 1) != 0)
    {
      result = v3 + 1;
      data = (std::string *)v3[1].__r_.__value_.__l.__data_;
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
      v7 = *(const std::string **)(a2 + 24);
      if (data != v7)
      {
        if (data == (std::string *)&qword_1EFEC6AB8)
        {
          result = (std::string *)sub_1D4B164E8(result, (uint64_t)v7);
          if ((v5 & 2) == 0)
            return result;
          goto LABEL_9;
        }
        result = std::string::operator=(data, v7);
      }
    }
    if ((v5 & 2) == 0)
      return result;
LABEL_9:
    size = (std::string *)v3[1].__r_.__value_.__l.__size_;
    p_size = &v3[1].__r_.__value_.__l.__size_;
    result = size;
    *((_DWORD *)p_size - 4) |= 2u;
    v10 = *(const std::string **)(a2 + 32);
    if (size != v10)
    {
      if (result == (std::string *)&qword_1EFEC6AB8)
        return (std::string *)sub_1D4B164E8(p_size, (uint64_t)v10);
      else
        return std::string::operator=(result, v10);
    }
  }
  return result;
}

uint64_t sub_1D4B0D124()
{
  return 1;
}

_QWORD *sub_1D4B0D12C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.StringPair");
}

uint64_t sub_1D4B0D13C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E984A8D8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  if (atomic_load(dword_1EFEC5B30))
    sub_1D4BAFB3C(dword_1EFEC5B30);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  return a1;
}

void sub_1D4B0D1B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = v4;
  sub_1D4B167F0(v5);
  sub_1D4B16C0C(v3);
  sub_1D4B04D28(v1 + 24);
  sub_1D4B16364(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B0D1F0(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)a1 = off_1E984A8D8;
  sub_1D4B167F0((_QWORD *)(a1 + 72));
  sub_1D4B16C0C((_QWORD *)(a1 + 48));
  if (*(int *)(a1 + 28) >= 1)
  {
    v2 = *(_QWORD **)(a1 + 32);
    if (v2)
    {
      if (!*v2)
        operator delete(v2);
    }
  }
  sub_1D4B16364((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1D4B0D25C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_1D4B0D1F0(a1);
  operator delete(v1);
}

void sub_1D4B0D270(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  *(_DWORD *)(a1 + 24) = 0;
  sub_1D4B16718(a1 + 48);
  v2 = *(unsigned int *)(a1 + 80);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 88) + 8);
    do
    {
      v4 = *v3++;
      sub_1D4B0CC90(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(a1 + 80) = 0;
  }
  if ((*(_BYTE *)(a1 + 16) & 0xF) != 0)
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
  }
  v6 = *(_BYTE *)(a1 + 8);
  v5 = a1 + 8;
  *(_DWORD *)(v5 + 8) = 0;
  if ((v6 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v5);
}

uint64_t sub_1D4B0D2F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int v15;
  int *v16;
  uint64_t v17;
  int v18;
  std::string *v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  int *v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  _BYTE *v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  _BYTE *v56;
  int v57;
  _QWORD v58[2];
  uint64_t *v59;
  __int128 v60;
  uint64_t v61;

  v4 = *(_QWORD *)(a1 + 8);
  v59 = (uint64_t *)(a1 + 8);
  v60 = 0uLL;
  v61 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v61 = *(_QWORD *)(v5 + 16);
    v60 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v58, (uint64_t)&v60);
  sub_1D4BB0DD8((uint64_t)&v55, (uint64_t)v58, 0);
  v7 = (uint64_t *)(a1 + 48);
LABEL_4:
  while (2)
  {
    v8 = (char *)*a2;
    if (*a2 >= (unint64_t)a2[1])
    {
      v9 = 0;
LABEL_9:
      v11 = sub_1D4BB0BD8((uint64_t)a2, v9);
      v10 = v11 | ((unint64_t)(v11 - 1 < 0x7F) << 32);
      if ((v10 & 0x100000000) == 0)
        goto LABEL_41;
      goto LABEL_10;
    }
    v9 = *v8;
    if (*v8 < 1)
      goto LABEL_9;
    *a2 = (uint64_t)(v8 + 1);
    v10 = v9 | 0x100000000;
    if ((v10 & 0x100000000) == 0)
      goto LABEL_41;
LABEL_10:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 8)
          goto LABEL_41;
        v12 = (char *)*a2;
        if (*a2 >= (unint64_t)a2[1])
        {
          LODWORD(v13) = 0;
        }
        else
        {
          LODWORD(v13) = *v12;
          if ((*v12 & 0x80000000) == 0)
          {
            *a2 = (uint64_t)(v12 + 1);
            goto LABEL_81;
          }
        }
        v13 = sub_1D4BB08A4(a2, v13);
        if (v13 < 0)
          goto LABEL_105;
LABEL_81:
        if (v13 > 0x12)
        {
          if (v57 < 5)
          {
            sub_1D4BB10F8((uint64_t)&v55, 8u);
            v44 = v57;
          }
          else
          {
            *v56++ = 8;
            v44 = --v57;
          }
          if (v44 < 5)
          {
            sub_1D4BB10F8((uint64_t)&v55, v13);
          }
          else
          {
            v45 = (int)v56;
            if (v13 < 0x80)
            {
              LOBYTE(v47) = v13;
              v46 = v56;
            }
            else
            {
              v46 = v56;
              do
              {
                *v46++ = v13 | 0x80;
                v47 = v13 >> 7;
                v48 = v13 >> 14;
                LODWORD(v13) = v13 >> 7;
              }
              while (v48);
            }
            *v46 = v47;
            v49 = (_DWORD)v46 - v45 + 1;
            v56 += v49;
            v57 -= v49;
          }
        }
        else
        {
          *(_DWORD *)(a1 + 16) |= 1u;
          *(_DWORD *)(a1 + 96) = v13;
        }
        continue;
      case 2u:
        if (v10 == 16)
        {
          v28 = sub_1D4B0D968(1, 0x12u, a2, (signed int *)(a1 + 24));
          goto LABEL_43;
        }
        if (v10 == 18)
        {
          v14 = (char *)*a2;
          if (*a2 < (unint64_t)a2[1] && (*v14 & 0x80000000) == 0)
          {
            v15 = *v14;
            *a2 = (uint64_t)(v14 + 1);
LABEL_68:
            v38 = sub_1D4BAFEE4((uint64_t)a2, v15);
            while (1)
            {
              if ((int)sub_1D4BB003C(a2) < 1)
              {
                sub_1D4BAFF5C((uint64_t)a2, v38);
                goto LABEL_4;
              }
              v39 = (char *)*a2;
              if (*a2 >= (unint64_t)a2[1])
              {
                v40 = 0;
              }
              else
              {
                v40 = *v39;
                if ((*v39 & 0x80000000) == 0)
                {
                  *a2 = (uint64_t)(v39 + 1);
                  goto LABEL_75;
                }
              }
              v41 = sub_1D4BB08A4(a2, v40);
              v40 = v41;
              if (v41 < 0)
                goto LABEL_105;
LABEL_75:
              v42 = *(_DWORD *)(a1 + 24);
              if (v42 == *(_DWORD *)(a1 + 28))
              {
                sub_1D4B16C88((unsigned int *)(a1 + 24), v42 + 1);
                v42 = *(_DWORD *)(a1 + 24);
              }
              v43 = *(_QWORD *)(a1 + 32);
              *(_DWORD *)(a1 + 24) = v42 + 1;
              *(_DWORD *)(v43 + 4 * v42 + 8) = v40;
            }
          }
          v15 = sub_1D4BB098C((unsigned __int8 **)a2);
          if ((v15 & 0x80000000) == 0)
            goto LABEL_68;
          goto LABEL_105;
        }
LABEL_41:
        if ((_DWORD)v10)
        {
          v28 = sub_1D4BB3060((uint64_t)a2, v10, (uint64_t)&v55);
          goto LABEL_43;
        }
        v53 = 1;
        goto LABEL_104;
      case 3u:
        if (v10 != 26)
          goto LABEL_41;
        v16 = *(int **)(a1 + 64);
        if (!v16)
        {
          v18 = *(_DWORD *)(a1 + 60);
LABEL_49:
          sub_1D4BB24FC(a1 + 48, v18 + 1);
          v16 = *(int **)(a1 + 64);
          v18 = *v16;
          goto LABEL_50;
        }
        v17 = *(int *)(a1 + 56);
        v18 = *v16;
        if ((int)v17 < *v16)
        {
          *(_DWORD *)(a1 + 56) = v17 + 1;
          v19 = *(std::string **)&v16[2 * v17 + 2];
          goto LABEL_66;
        }
        if (v18 == *(_DWORD *)(a1 + 60))
          goto LABEL_49;
LABEL_50:
        *v16 = v18 + 1;
        v29 = *v7;
        if (*v7)
        {
          if (*(_QWORD *)(v29 + 112))
            sub_1D4BAD2D0(*v7, (uint64_t)&unk_1E9847098, 24);
          v19 = (std::string *)sub_1D4BACF80(v29, 0x18uLL, (uint64_t)sub_1D4B16704);
        }
        else
        {
          v19 = (std::string *)operator new(0x18uLL);
        }
        v19->__r_.__value_.__r.__words[0] = 0;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v36 = *(_QWORD *)(a1 + 64);
        v37 = *(int *)(a1 + 56);
        *(_DWORD *)(a1 + 56) = v37 + 1;
        *(_QWORD *)(v36 + 8 * v37 + 8) = v19;
LABEL_66:
        v28 = sub_1D4BB4654(a2, v19);
        goto LABEL_43;
      case 4u:
        if (v10 != 32)
          goto LABEL_41;
        *(_DWORD *)(a1 + 16) |= 2u;
        v20 = (char *)*a2;
        if (*a2 >= (unint64_t)a2[1])
        {
          v21 = 0;
        }
        else
        {
          v21 = *v20;
          if ((*v20 & 0x80000000) == 0)
          {
            *(_DWORD *)(a1 + 100) = v21;
LABEL_36:
            *a2 = (uint64_t)(v20 + 1);
            continue;
          }
        }
        v50 = sub_1D4BB08A4(a2, v21);
        *(_DWORD *)(a1 + 100) = v50;
        if (v50 < 0)
          goto LABEL_105;
        continue;
      case 5u:
        if (v10 != 40)
          goto LABEL_41;
        *(_DWORD *)(a1 + 16) |= 4u;
        v20 = (char *)*a2;
        if (*a2 >= (unint64_t)a2[1])
        {
          v22 = 0;
        }
        else
        {
          v22 = *v20;
          if ((*v20 & 0x80000000) == 0)
          {
            *(_DWORD *)(a1 + 104) = v22;
            goto LABEL_36;
          }
        }
        v51 = sub_1D4BB08A4(a2, v22);
        *(_DWORD *)(a1 + 104) = v51;
        if (v51 < 0)
          goto LABEL_105;
        continue;
      case 6u:
        if (v10 != 48)
          goto LABEL_41;
        *(_DWORD *)(a1 + 16) |= 8u;
        v20 = (char *)*a2;
        if (*a2 >= (unint64_t)a2[1])
        {
          v23 = 0;
        }
        else
        {
          v23 = *v20;
          if ((*v20 & 0x80000000) == 0)
          {
            *(_DWORD *)(a1 + 108) = v23;
            goto LABEL_36;
          }
        }
        v52 = sub_1D4BB08A4(a2, v23);
        *(_DWORD *)(a1 + 108) = v52;
        if (v52 < 0)
          goto LABEL_105;
        continue;
      case 7u:
        if (v10 != 58)
          goto LABEL_41;
        v24 = *(int **)(a1 + 88);
        if (!v24)
        {
          v26 = *(_DWORD *)(a1 + 84);
LABEL_55:
          sub_1D4BB24FC(a1 + 72, v26 + 1);
          v24 = *(int **)(a1 + 88);
          v26 = *v24;
          goto LABEL_56;
        }
        v25 = *(int *)(a1 + 80);
        v26 = *v24;
        if ((int)v25 < *v24)
        {
          *(_DWORD *)(a1 + 80) = v25 + 1;
          v27 = *(_QWORD **)&v24[2 * v25 + 2];
          goto LABEL_57;
        }
        if (v26 == *(_DWORD *)(a1 + 84))
          goto LABEL_55;
LABEL_56:
        *v24 = v26 + 1;
        v27 = sub_1D4B15A70(*(_QWORD *)(a1 + 72));
        v30 = *(_QWORD *)(a1 + 88);
        v31 = *(int *)(a1 + 80);
        *(_DWORD *)(a1 + 80) = v31 + 1;
        *(_QWORD *)(v30 + 8 * v31 + 8) = v27;
LABEL_57:
        v32 = (char *)*a2;
        if (*a2 >= (unint64_t)a2[1] || *v32 < 0)
        {
          v33 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v33 < 0)
            goto LABEL_105;
        }
        else
        {
          v33 = *v32;
          *a2 = (uint64_t)(v32 + 1);
        }
        v34 = sub_1D4BAFFA4((uint64_t)a2, v33);
        v35 = v34;
        if ((v34 & 0x8000000000000000) == 0 && sub_1D4B0CD04((uint64_t)v27, a2))
        {
          v28 = sub_1D4BAFFD8((uint64_t)a2, v35);
LABEL_43:
          if ((v28 & 1) != 0)
            continue;
        }
LABEL_105:
        v53 = 0;
LABEL_104:
        sub_1D4BB0EE0((uint64_t)&v55);
        sub_1D4B16458(&v59);
        return v53;
      default:
        goto LABEL_41;
    }
  }
}

void sub_1D4B0D938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15)
{
  sub_1D4BB0EE0((uint64_t)&a9);
  sub_1D4B16458(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B0D968(uint64_t a1, unsigned int a2, uint64_t *a3, signed int *a4)
{
  char *v7;
  int v8;
  uint64_t v9;
  signed int v10;
  uint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  unsigned __int8 *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v7 = (char *)*a3;
  if (*a3 >= (unint64_t)a3[1])
  {
    v8 = 0;
  }
  else
  {
    v8 = *v7;
    if ((*v7 & 0x80000000) == 0)
    {
      *a3 = (uint64_t)(v7 + 1);
      goto LABEL_6;
    }
  }
  v9 = sub_1D4BB08A4(a3, v8);
  v8 = v9;
  if (v9 < 0)
    return 0;
LABEL_6:
  v10 = *a4;
  if (*a4 == a4[1])
  {
    sub_1D4B16C88((unsigned int *)a4, v10 + 1);
    v10 = *a4;
  }
  v11 = *((_QWORD *)a4 + 1);
  *a4 = v10 + 1;
  *(_DWORD *)(v11 + 4 * v10 + 8) = v8;
  v12 = a4[1] - *a4;
  if (v12 >= 1)
  {
    v13 = v12 + 1;
    while (1)
    {
      if (a2 > 0x7F)
      {
        if (a2 >> 14)
          return 1;
        v17 = (unsigned __int8 *)*a3;
        v14 = a3[1];
        if ((int)(v14 - *a3) < 2 || (a2 & 0x7F | 0x80) != *v17 || v17[1] != (a2 >> 7))
          return 1;
        v16 = (char *)(v17 + 2);
      }
      else
      {
        v15 = (unsigned __int8 *)*a3;
        v14 = a3[1];
        if (*a3 >= v14 || *v15 != a2)
          return 1;
        v16 = (char *)(v15 + 1);
      }
      *a3 = (uint64_t)v16;
      if ((unint64_t)v16 >= v14)
        break;
      v18 = *v16;
      if (*v16 < 0)
        goto LABEL_23;
      *a3 = (uint64_t)(v16 + 1);
LABEL_24:
      v20 = *((_QWORD *)a4 + 1);
      v21 = *a4;
      *a4 = v21 + 1;
      *(_DWORD *)(v20 + 4 * v21 + 8) = v18;
      if (--v13 <= 1)
        return 1;
    }
    v18 = 0;
LABEL_23:
    v19 = sub_1D4BB08A4(a3, v18);
    v18 = v19;
    if (v19 < 0)
      return 0;
    goto LABEL_24;
  }
  return 1;
}

uint64_t sub_1D4B0DAF4(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t i;
  unsigned int v14;
  uint64_t v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int j;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;

  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 1) != 0)
    sub_1D4BB36D0(1, *(_DWORD *)(a1 + 96), a2);
  if (*(int *)(a1 + 24) >= 1)
  {
    if (*(int *)(a2 + 16) < 5)
    {
      sub_1D4BB10F8(a2, 0x12u);
      v5 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(a2 + 8))++ = 18;
      v5 = *(_DWORD *)(a2 + 16) - 1;
      *(_DWORD *)(a2 + 16) = v5;
    }
    v6 = *(_DWORD *)(a1 + 40);
    if (v5 < 5)
    {
      sub_1D4BB10F8(a2, v6);
    }
    else
    {
      v7 = *(_QWORD *)(a2 + 8);
      if (v6 < 0x80)
      {
        v9 = *(_DWORD *)(a1 + 40);
        v8 = *(_BYTE **)(a2 + 8);
      }
      else
      {
        v8 = *(_BYTE **)(a2 + 8);
        do
        {
          *v8++ = v6 | 0x80;
          v9 = v6 >> 7;
          v10 = v6 >> 14;
          v6 >>= 7;
        }
        while (v10);
      }
      *v8 = v9;
      v11 = (_DWORD)v8 - v7 + 1;
      *(_QWORD *)(a2 + 8) += v11;
      *(_DWORD *)(a2 + 16) -= v11;
    }
    v12 = *(unsigned int *)(a1 + 24);
    if ((int)v12 >= 1)
    {
      for (i = 0; i != v12; ++i)
      {
        v14 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * i + 8);
        if (*(int *)(a2 + 16) < 5)
        {
          sub_1D4BB10F8(a2, v14);
        }
        else
        {
          v15 = *(_QWORD *)(a2 + 8);
          if (v14 < 0x80)
          {
            v17 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * i + 8);
            v16 = *(_BYTE **)(a2 + 8);
          }
          else
          {
            v16 = *(_BYTE **)(a2 + 8);
            do
            {
              *v16++ = v14 | 0x80;
              v17 = v14 >> 7;
              v18 = v14 >> 14;
              v14 >>= 7;
            }
            while (v18);
          }
          *v16 = v17;
          v19 = (_DWORD)v16 - v15 + 1;
          *(_QWORD *)(a2 + 8) += v19;
          *(_DWORD *)(a2 + 16) -= v19;
        }
      }
    }
  }
  v20 = *(unsigned int *)(a1 + 56);
  if ((int)v20 >= 1)
  {
    v21 = 0;
    v22 = 8 * v20;
    do
    {
      sub_1D4BB3E30(3, *(_QWORD *)(*(_QWORD *)(a1 + 64) + v21 + 8), a2);
      v21 += 8;
    }
    while (v22 != v21);
  }
  if ((v4 & 2) != 0)
  {
    sub_1D4BB37DC(4, *(_DWORD *)(a1 + 100), a2);
    if ((v4 & 4) == 0)
    {
LABEL_31:
      if ((v4 & 8) == 0)
        goto LABEL_33;
      goto LABEL_32;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_31;
  }
  sub_1D4BB37DC(5, *(_DWORD *)(a1 + 104), a2);
  if ((v4 & 8) != 0)
LABEL_32:
    sub_1D4BB37DC(6, *(_DWORD *)(a1 + 108), a2);
LABEL_33:
  v23 = *(_DWORD *)(a1 + 80);
  if (v23)
  {
    for (j = 0; j != v23; ++j)
      sub_1D4BB4528(7, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * j + 8), a2);
  }
  v25 = *(_QWORD *)(a1 + 8);
  if ((v25 & 1) != 0)
    v26 = (char *)(v25 & 0xFFFFFFFFFFFFFFFELL);
  else
    v26 = (char *)&qword_1EFEC6AB8;
  if (v26[23] < 0)
    v26 = *(char **)v26;
  if ((v25 & 1) != 0)
    v27 = (uint64_t *)(v25 & 0xFFFFFFFFFFFFFFFELL);
  else
    v27 = &qword_1EFEC6AB8;
  if (*((char *)v27 + 23) < 0)
    v28 = v27[1];
  else
    LODWORD(v28) = *((unsigned __int8 *)v27 + 23);
  return sub_1D4BB0EE4(a2, v26, v28);
}

uint64_t sub_1D4B0DD90(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 1) != 0)
    v3 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  else
    v3 = &qword_1EFEC6AB8;
  if (*((char *)v3 + 23) < 0)
    v4 = v3[1];
  else
    v4 = *((unsigned __int8 *)v3 + 23);
  v5 = sub_1D4BB472C((unsigned int *)(a1 + 24));
  v6 = 11;
  v7 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v5 >= 0)
    v6 = v7;
  v8 = v6 + v4;
  if (v5)
    v9 = v5;
  else
    v9 = 0;
  if (!v5)
    v8 = v4;
  *(_DWORD *)(a1 + 40) = v9;
  v10 = *(unsigned int *)(a1 + 56);
  v11 = v8 + v5 + v10;
  if ((int)v10 >= 1)
  {
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 64) + 8);
    do
    {
      v13 = *v12++;
      v14 = *(unsigned __int8 *)(v13 + 23);
      v15 = *(_QWORD *)(v13 + 8);
      if ((v14 & 0x80u) == 0)
        v15 = v14;
      v11 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6);
      --v10;
    }
    while (v10);
  }
  v16 = *(unsigned int *)(a1 + 80);
  v17 = v11 + v16;
  if ((_DWORD)v16)
  {
    v18 = 0;
    do
    {
      v19 = sub_1D4B0CF7C(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v18 + 8));
      v17 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6);
      ++v18;
    }
    while ((_DWORD)v16 != v18);
  }
  v20 = *(_DWORD *)(a1 + 16);
  if ((v20 & 0xF) == 0)
    goto LABEL_28;
  if ((v20 & 1) != 0)
  {
    v22 = *(_DWORD *)(a1 + 96);
    v23 = ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if (v22 >= 0)
      v24 = v23;
    else
      v24 = 11;
    v17 += v24;
    if ((v20 & 2) == 0)
    {
LABEL_25:
      if ((v20 & 4) == 0)
        goto LABEL_26;
LABEL_34:
      v17 += ((9 * (__clz(*(_DWORD *)(a1 + 104) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v20 & 8) == 0)
        goto LABEL_28;
      goto LABEL_27;
    }
  }
  else if ((v20 & 2) == 0)
  {
    goto LABEL_25;
  }
  v17 += ((9 * (__clz(*(_DWORD *)(a1 + 100) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v20 & 4) != 0)
    goto LABEL_34;
LABEL_26:
  if ((v20 & 8) != 0)
LABEL_27:
    v17 += ((9 * (__clz(*(_DWORD *)(a1 + 108) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_28:
  *(_DWORD *)(a1 + 20) = v17;
  return v17;
}

unint64_t *sub_1D4B0DFA0(unint64_t *result, uint64_t a2)
{
  unint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  signed int v8;
  const std::string **v9;
  std::string **v10;
  int v11;
  int *v12;
  unsigned int v13;
  uint64_t *v14;
  std::string **v15;
  signed int v16;
  signed int *v17;
  int v18;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = (unint64_t *)sub_1D4B16764(result + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    v6 = *((int *)v3 + 6);
    sub_1D4B16C88((unsigned int *)v3 + 6, v6 + v5);
    v7 = v3[4];
    *((_DWORD *)v3 + 6) += *(_DWORD *)(a2 + 24);
    result = (unint64_t *)memcpy((void *)(v7 + 4 * v6 + 8), (const void *)(*(_QWORD *)(a2 + 32) + 8), 4 * *(int *)(a2 + 24));
  }
  v8 = *(_DWORD *)(a2 + 56);
  if (v8)
  {
    v9 = (const std::string **)(*(_QWORD *)(a2 + 64) + 8);
    v10 = (std::string **)sub_1D4BB23F8((uint64_t)(v3 + 6), *(_DWORD *)(a2 + 56));
    result = (unint64_t *)sub_1D4B16DA4((std::string *)v3 + 2, v10, v9, v8, *(_DWORD *)v3[8] - *((_DWORD *)v3 + 14));
    v11 = *((_DWORD *)v3 + 14) + v8;
    *((_DWORD *)v3 + 14) = v11;
    v12 = (int *)v3[8];
    if (*v12 < v11)
      *v12 = v11;
  }
  v13 = *(_DWORD *)(a2 + 80);
  if (v13)
  {
    v14 = (uint64_t *)(*(_QWORD *)(a2 + 88) + 8);
    v15 = (std::string **)sub_1D4BB23F8((uint64_t)(v3 + 9), *(_DWORD *)(a2 + 80));
    result = (unint64_t *)sub_1D4B16EA0((std::string *)v3 + 3, v15, v14, v13, *(_DWORD *)v3[11] - *((_DWORD *)v3 + 20));
    v16 = *((_DWORD *)v3 + 20) + v13;
    *((_DWORD *)v3 + 20) = v16;
    v17 = (signed int *)v3[11];
    if (*v17 < v16)
      *v17 = v16;
  }
  v18 = *(_DWORD *)(a2 + 16);
  if ((v18 & 0xF) != 0)
  {
    if ((v18 & 1) != 0)
    {
      *((_DWORD *)v3 + 24) = *(_DWORD *)(a2 + 96);
      if ((v18 & 2) == 0)
      {
LABEL_14:
        if ((v18 & 4) == 0)
          goto LABEL_15;
        goto LABEL_21;
      }
    }
    else if ((v18 & 2) == 0)
    {
      goto LABEL_14;
    }
    *((_DWORD *)v3 + 25) = *(_DWORD *)(a2 + 100);
    if ((v18 & 4) == 0)
    {
LABEL_15:
      if ((v18 & 8) == 0)
      {
LABEL_17:
        *((_DWORD *)v3 + 4) |= v18;
        return result;
      }
LABEL_16:
      *((_DWORD *)v3 + 27) = *(_DWORD *)(a2 + 108);
      goto LABEL_17;
    }
LABEL_21:
    *((_DWORD *)v3 + 26) = *(_DWORD *)(a2 + 104);
    if ((v18 & 8) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
  return result;
}

unint64_t *sub_1D4B0E150(unint64_t *result, uint64_t a2)
{
  unint64_t *v3;

  if ((unint64_t *)a2 != result)
  {
    v3 = result;
    sub_1D4B0D270((uint64_t)result);
    return sub_1D4B0DFA0(v3, a2);
  }
  return result;
}

uint64_t sub_1D4B0E188()
{
  return 1;
}

_QWORD *sub_1D4B0E190@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.Type");
}

uint64_t sub_1D4B0E1A0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E984A658;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  if (atomic_load(dword_1EFEC5DC0))
    sub_1D4BAFB3C(dword_1EFEC5DC0);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return a1;
}

void sub_1D4B0E218(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  sub_1D4B16C0C(v2);
  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B0E23C(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  std::string *v5;
  signed int v6;
  uint64_t v7;
  std::string **v8;
  int v9;
  int *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)a1 = off_1E984A658;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (unint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v5 = (std::string *)(a1 + 24);
  *(_DWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  v6 = *(_DWORD *)(a2 + 32);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 40);
    v8 = (std::string **)sub_1D4BB23F8(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_1D4B16DA4(v5, v8, (const std::string **)(v7 + 8), v6, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    v9 = *(_DWORD *)(a1 + 32) + v6;
    *(_DWORD *)(a1 + 32) = v9;
    v10 = *(int **)(a1 + 40);
    if (*v10 < v9)
      *v10 = v9;
  }
  v11 = *(_QWORD *)(a2 + 8);
  if ((v11 & 1) != 0)
    sub_1D4B16764(v4, v11 & 0xFFFFFFFFFFFFFFFELL);
  v12 = *(_OWORD *)(a2 + 48);
  v13 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v13;
  *(_OWORD *)(a1 + 48) = v12;
  return a1;
}

void sub_1D4B0E320(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  sub_1D4B16C0C(v2);
  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B0E34C(_QWORD *a1)
{
  *a1 = off_1E984A658;
  sub_1D4B16C0C(a1 + 3);
  sub_1D4B16364(a1 + 1);
  return a1;
}

void sub_1D4B0E38C(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B0E34C(a1);
  operator delete(v1);
}

void sub_1D4B0E3A0(uint64_t a1)
{
  uint64_t v2;
  char v3;

  sub_1D4B16718(a1 + 24);
  if ((*(_BYTE *)(a1 + 16) & 0x3F) != 0)
  {
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
  }
  v3 = *(_BYTE *)(a1 + 8);
  v2 = a1 + 8;
  *(_DWORD *)(v2 + 8) = 0;
  if ((v3 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v2);
}

uint64_t sub_1D4B0E3F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  int *v15;
  uint64_t v16;
  int v17;
  std::string *v18;
  BOOL v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[32];
  _QWORD v32[2];
  uint64_t *v33;
  __int128 v34;
  uint64_t v35;

  v4 = *(_QWORD *)(a1 + 8);
  v33 = (uint64_t *)(a1 + 8);
  v34 = 0uLL;
  v35 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v35 = *(_QWORD *)(v5 + 16);
    v34 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v32, (uint64_t)&v34);
  sub_1D4BB0DD8((uint64_t)v31, (uint64_t)v32, 0);
  v7 = (uint64_t *)(a1 + 24);
  while (1)
  {
    while (1)
    {
      v8 = (char *)*a2;
      if (*a2 < (unint64_t)a2[1])
        break;
      v9 = 0;
LABEL_9:
      v11 = sub_1D4BB0BD8((uint64_t)a2, v9);
      v10 = v11 | ((unint64_t)(v11 - 1 < 0x7F) << 32);
      if ((v10 & 0x100000000) == 0)
        goto LABEL_40;
LABEL_10:
      switch(v10 >> 3)
      {
        case 1u:
          if (v10 != 8)
            goto LABEL_40;
          *(_DWORD *)(a1 + 16) |= 1u;
          v12 = (char *)*a2;
          if (*a2 < (unint64_t)a2[1] && (*v12 & 0x80000000) == 0)
          {
            v13 = *v12;
            v14 = (_QWORD *)(a1 + 48);
            goto LABEL_35;
          }
          *(_QWORD *)(a1 + 48) = sub_1D4BB06F0((uint64_t)a2);
          if ((v20 & 1) == 0)
            goto LABEL_68;
          continue;
        case 2u:
          if (v10 != 16)
            goto LABEL_40;
          *(_DWORD *)(a1 + 16) |= 2u;
          v12 = (char *)*a2;
          if (*a2 < (unint64_t)a2[1] && (*v12 & 0x80000000) == 0)
          {
            v13 = *v12;
            v14 = (_QWORD *)(a1 + 56);
            goto LABEL_35;
          }
          *(_QWORD *)(a1 + 56) = sub_1D4BB06F0((uint64_t)a2);
          if ((v21 & 1) == 0)
            goto LABEL_68;
          continue;
        case 3u:
          if (v10 != 24)
            goto LABEL_40;
          *(_DWORD *)(a1 + 16) |= 4u;
          v12 = (char *)*a2;
          if (*a2 < (unint64_t)a2[1] && (*v12 & 0x80000000) == 0)
          {
            v13 = *v12;
            v14 = (_QWORD *)(a1 + 64);
            goto LABEL_35;
          }
          *(_QWORD *)(a1 + 64) = sub_1D4BB06F0((uint64_t)a2);
          if ((v22 & 1) == 0)
            goto LABEL_68;
          continue;
        case 4u:
          if (v10 != 32)
            goto LABEL_40;
          *(_DWORD *)(a1 + 16) |= 8u;
          v12 = (char *)*a2;
          if (*a2 < (unint64_t)a2[1] && (*v12 & 0x80000000) == 0)
          {
            v13 = *v12;
            v14 = (_QWORD *)(a1 + 72);
            goto LABEL_35;
          }
          *(_QWORD *)(a1 + 72) = sub_1D4BB06F0((uint64_t)a2);
          if ((v23 & 1) == 0)
            goto LABEL_68;
          continue;
        case 5u:
          if (v10 != 40)
            goto LABEL_40;
          *(_DWORD *)(a1 + 16) |= 0x10u;
          v12 = (char *)*a2;
          if (*a2 < (unint64_t)a2[1] && (*v12 & 0x80000000) == 0)
          {
            v13 = *v12;
            v14 = (_QWORD *)(a1 + 80);
            goto LABEL_35;
          }
          *(_QWORD *)(a1 + 80) = sub_1D4BB06F0((uint64_t)a2);
          if ((v24 & 1) == 0)
            goto LABEL_68;
          continue;
        case 6u:
          if (v10 != 48)
            goto LABEL_40;
          *(_DWORD *)(a1 + 16) |= 0x20u;
          v12 = (char *)*a2;
          if (*a2 >= (unint64_t)a2[1] || *v12 < 0)
          {
            *(_QWORD *)(a1 + 88) = sub_1D4BB06F0((uint64_t)a2);
            if ((v25 & 1) == 0)
            {
LABEL_68:
              v29 = 0;
              goto LABEL_67;
            }
          }
          else
          {
            v13 = *v12;
            v14 = (_QWORD *)(a1 + 88);
LABEL_35:
            *v14 = v13;
            *a2 = (uint64_t)(v12 + 1);
          }
          break;
        case 7u:
          if (v10 != 58)
            goto LABEL_40;
          v15 = *(int **)(a1 + 40);
          if (!v15)
          {
            v17 = *(_DWORD *)(a1 + 36);
LABEL_58:
            sub_1D4BB24FC(a1 + 24, v17 + 1);
            v15 = *(int **)(a1 + 40);
            v17 = *v15;
            goto LABEL_59;
          }
          v16 = *(int *)(a1 + 32);
          v17 = *v15;
          if ((int)v16 < *v15)
          {
            *(_DWORD *)(a1 + 32) = v16 + 1;
            v18 = *(std::string **)&v15[2 * v16 + 2];
            goto LABEL_65;
          }
          if (v17 == *(_DWORD *)(a1 + 36))
            goto LABEL_58;
LABEL_59:
          *v15 = v17 + 1;
          v26 = *v7;
          if (*v7)
          {
            if (*(_QWORD *)(v26 + 112))
              sub_1D4BAD2D0(*v7, (uint64_t)&unk_1E9847098, 24);
            v18 = (std::string *)sub_1D4BACF80(v26, 0x18uLL, (uint64_t)sub_1D4B16704);
          }
          else
          {
            v18 = (std::string *)operator new(0x18uLL);
          }
          v18->__r_.__value_.__r.__words[0] = 0;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v27 = *(_QWORD *)(a1 + 40);
          v28 = *(int *)(a1 + 32);
          *(_DWORD *)(a1 + 32) = v28 + 1;
          *(_QWORD *)(v27 + 8 * v28 + 8) = v18;
LABEL_65:
          v19 = sub_1D4BB4654(a2, v18);
          goto LABEL_42;
        default:
          goto LABEL_40;
      }
    }
    v9 = *v8;
    if (*v8 < 1)
      goto LABEL_9;
    *a2 = (uint64_t)(v8 + 1);
    v10 = v9 | 0x100000000;
    if ((v10 & 0x100000000) != 0)
      goto LABEL_10;
LABEL_40:
    if (!(_DWORD)v10)
      break;
    v19 = sub_1D4BB3060((uint64_t)a2, v10, (uint64_t)v31);
LABEL_42:
    if (!v19)
      goto LABEL_68;
  }
  v29 = 1;
LABEL_67:
  sub_1D4BB0EE0((uint64_t)v31);
  sub_1D4B16458(&v33);
  return v29;
}

void sub_1D4B0E820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B0E848(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;

  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 1) != 0)
  {
    sub_1D4BB38E8(1, *(_QWORD *)(a1 + 48), a2);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  sub_1D4BB38E8(2, *(_QWORD *)(a1 + 56), a2);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  sub_1D4BB38E8(3, *(_QWORD *)(a1 + 64), a2);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  sub_1D4BB38E8(4, *(_QWORD *)(a1 + 72), a2);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_25:
  sub_1D4BB38E8(5, *(_QWORD *)(a1 + 80), a2);
  if ((v4 & 0x20) != 0)
LABEL_7:
    sub_1D4BB38E8(6, *(_QWORD *)(a1 + 88), a2);
LABEL_8:
  v5 = *(unsigned int *)(a1 + 32);
  if ((int)v5 >= 1)
  {
    v6 = 0;
    v7 = 8 * v5;
    do
    {
      sub_1D4BB41AC(7, *(_QWORD *)(*(_QWORD *)(a1 + 40) + v6 + 8), a2);
      v6 += 8;
    }
    while (v7 != v6);
  }
  v8 = *(_QWORD *)(a1 + 8);
  if ((v8 & 1) != 0)
    v9 = (char *)(v8 & 0xFFFFFFFFFFFFFFFELL);
  else
    v9 = (char *)&qword_1EFEC6AB8;
  if (v9[23] < 0)
    v9 = *(char **)v9;
  if ((v8 & 1) != 0)
    v10 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFFELL);
  else
    v10 = &qword_1EFEC6AB8;
  if (*((char *)v10 + 23) < 0)
    v11 = v10[1];
  else
    LODWORD(v11) = *((unsigned __int8 *)v10 + 23);
  return sub_1D4BB0EE4(a2, v9, v11);
}

uint64_t sub_1D4B0E988(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v1 = *(_QWORD *)(a1 + 8);
  if ((v1 & 1) != 0)
    v2 = (uint64_t *)(v1 & 0xFFFFFFFFFFFFFFFELL);
  else
    v2 = &qword_1EFEC6AB8;
  if (*((char *)v2 + 23) < 0)
    v3 = v2[1];
  else
    v3 = *((unsigned __int8 *)v2 + 23);
  v4 = *(unsigned int *)(a1 + 32);
  v5 = v3 + v4;
  if ((int)v4 >= 1)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a1 + 40) + 8);
    do
    {
      v7 = *v6++;
      v8 = *(unsigned __int8 *)(v7 + 23);
      v9 = *(_QWORD *)(v7 + 8);
      if ((v8 & 0x80u) == 0)
        v9 = v8;
      v5 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      --v4;
    }
    while (v4);
  }
  v10 = *(_DWORD *)(a1 + 16);
  if ((v10 & 0x3F) == 0)
    goto LABEL_20;
  if ((v10 & 1) != 0)
  {
    v5 += ((9 * (__clz(*(_QWORD *)(a1 + 48) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v10 & 2) == 0)
    {
LABEL_15:
      if ((v10 & 4) == 0)
        goto LABEL_16;
      goto LABEL_23;
    }
  }
  else if ((v10 & 2) == 0)
  {
    goto LABEL_15;
  }
  v5 += ((9 * (__clz(*(_QWORD *)(a1 + 56) | 1) ^ 0x3F) + 73) >> 6) + 1;
  if ((v10 & 4) == 0)
  {
LABEL_16:
    if ((v10 & 8) == 0)
      goto LABEL_17;
    goto LABEL_24;
  }
LABEL_23:
  v5 += ((9 * (__clz(*(_QWORD *)(a1 + 64) | 1) ^ 0x3F) + 73) >> 6) + 1;
  if ((v10 & 8) == 0)
  {
LABEL_17:
    if ((v10 & 0x10) == 0)
      goto LABEL_18;
LABEL_25:
    v5 += ((9 * (__clz(*(_QWORD *)(a1 + 80) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v10 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_24:
  v5 += ((9 * (__clz(*(_QWORD *)(a1 + 72) | 1) ^ 0x3F) + 73) >> 6) + 1;
  if ((v10 & 0x10) != 0)
    goto LABEL_25;
LABEL_18:
  if ((v10 & 0x20) != 0)
LABEL_19:
    v5 += ((9 * (__clz(*(_QWORD *)(a1 + 88) | 1) ^ 0x3F) + 73) >> 6) + 1;
LABEL_20:
  *(_DWORD *)(a1 + 20) = v5;
  return v5;
}

std::string *sub_1D4B0EB18(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  signed int v5;
  const std::string **v6;
  std::string **v7;
  int v8;
  int *v9;
  int v10;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 32);
  if (v5)
  {
    v6 = (const std::string **)(*(_QWORD *)(a2 + 40) + 8);
    v7 = (std::string **)sub_1D4BB23F8((uint64_t)&v3[1], *(_DWORD *)(a2 + 32));
    result = sub_1D4B16DA4(v3 + 1, v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2] - LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    v8 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v5;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v8;
    v9 = (int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *(_DWORD *)(a2 + 16);
  if ((v10 & 0x3F) != 0)
  {
    if ((v10 & 1) != 0)
    {
      v3[2].__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 48);
      if ((v10 & 2) == 0)
      {
LABEL_9:
        if ((v10 & 4) == 0)
          goto LABEL_10;
        goto LABEL_18;
      }
    }
    else if ((v10 & 2) == 0)
    {
      goto LABEL_9;
    }
    v3[2].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 56);
    if ((v10 & 4) == 0)
    {
LABEL_10:
      if ((v10 & 8) == 0)
        goto LABEL_11;
      goto LABEL_19;
    }
LABEL_18:
    v3[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    if ((v10 & 8) == 0)
    {
LABEL_11:
      if ((v10 & 0x10) == 0)
        goto LABEL_12;
      goto LABEL_20;
    }
LABEL_19:
    v3[3].__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 72);
    if ((v10 & 0x10) == 0)
    {
LABEL_12:
      if ((v10 & 0x20) == 0)
      {
LABEL_14:
        LODWORD(v3->__r_.__value_.__r.__words[2]) |= v10;
        return result;
      }
LABEL_13:
      v3[3].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 88);
      goto LABEL_14;
    }
LABEL_20:
    v3[3].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 80);
    if ((v10 & 0x20) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  return result;
}

std::string *sub_1D4B0EC38(std::string *result, uint64_t a2)
{
  std::string *v3;

  if ((std::string *)a2 != result)
  {
    v3 = result;
    sub_1D4B0E3A0((uint64_t)result);
    return sub_1D4B0EB18(v3, a2);
  }
  return result;
}

uint64_t sub_1D4B0EC70()
{
  return 1;
}

_QWORD *sub_1D4B0EC78@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.StripeInformation");
}

_QWORD *sub_1D4B0EC88(_QWORD *a1)
{
  *a1 = off_1E984A3D8;
  a1[1] = 0;
  a1[2] = 0;
  if (atomic_load(dword_1EFEC5D60))
    sub_1D4BAFB3C(dword_1EFEC5D60);
  a1[3] = &qword_1EFEC6AB8;
  a1[4] = &qword_1EFEC6AB8;
  return a1;
}

void sub_1D4B0ECEC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B0ED00(_QWORD *a1)
{
  uint64_t *v2;

  *a1 = off_1E984A3D8;
  v2 = a1 + 1;
  sub_1D4B0CB90((uint64_t)a1);
  sub_1D4B16364(v2);
  return a1;
}

void sub_1D4B0ED3C(uint64_t *a1)
{
  uint64_t *v2;

  *a1 = (uint64_t)off_1E984A3D8;
  v2 = a1 + 1;
  sub_1D4B0CB90((uint64_t)a1);
  sub_1D4B16364(v2);
  operator delete(a1);
}

void sub_1D4B0ED78(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
    goto LABEL_11;
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0)
      goto LABEL_6;
    goto LABEL_11;
  }
  v2 = *(_QWORD *)(a1 + 24);
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(_BYTE **)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    v3 = *(_QWORD *)(a1 + 32);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  v5 = *(_BYTE *)(a1 + 8);
  v4 = a1 + 8;
  *(_DWORD *)(v4 + 8) = 0;
  if ((v5 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v4);
}

uint64_t sub_1D4B0EDEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  std::string *v12;
  BOOL v13;
  uint64_t v14;
  _BYTE v16[32];
  _QWORD v17[2];
  uint64_t *v18;
  __int128 v19;
  uint64_t v20;

  v4 = *(_QWORD *)(a1 + 8);
  v18 = (uint64_t *)(a1 + 8);
  v19 = 0uLL;
  v20 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v20 = *(_QWORD *)(v5 + 16);
    v19 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v17, (uint64_t)&v19);
  sub_1D4BB0DD8((uint64_t)v16, (uint64_t)v17, 0);
  while (1)
  {
    v7 = (char *)*a2;
    if (*a2 >= (unint64_t)a2[1])
    {
      v8 = 0;
    }
    else
    {
      v8 = *v7;
      if (*v7 >= 1)
      {
        *a2 = (uint64_t)(v7 + 1);
        v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0)
          goto LABEL_23;
        goto LABEL_10;
      }
    }
    v10 = sub_1D4BB0BD8((uint64_t)a2, v8);
    v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
    if ((v9 & 0x100000000) == 0)
      goto LABEL_23;
LABEL_10:
    if (v9 >> 3 != 2)
      break;
    if (v9 != 18)
      goto LABEL_23;
    *(_DWORD *)(a1 + 16) |= 2u;
    v12 = *(std::string **)(a1 + 32);
    if (v12 == (std::string *)&qword_1EFEC6AB8)
    {
      sub_1D4B164E8((_QWORD *)(a1 + 32), (uint64_t)&qword_1EFEC6AB8);
      v12 = *(std::string **)(a1 + 32);
    }
LABEL_18:
    v13 = sub_1D4BB4654(a2, v12);
LABEL_25:
    if (!v13)
    {
      v14 = 0;
      goto LABEL_28;
    }
  }
  if (v9 >> 3 == 1 && v9 == 10)
  {
    *(_DWORD *)(a1 + 16) |= 1u;
    v12 = *(std::string **)(a1 + 24);
    if (v12 == (std::string *)&qword_1EFEC6AB8)
    {
      sub_1D4B164E8((_QWORD *)(a1 + 24), (uint64_t)&qword_1EFEC6AB8);
      v12 = *(std::string **)(a1 + 24);
    }
    goto LABEL_18;
  }
LABEL_23:
  if ((_DWORD)v9)
  {
    v13 = sub_1D4BB3060((uint64_t)a2, v9, (uint64_t)v16);
    goto LABEL_25;
  }
  v14 = 1;
LABEL_28:
  sub_1D4BB0EE0((uint64_t)v16);
  sub_1D4B16458(&v18);
  return v14;
}

void sub_1D4B0EF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B0EFC4(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 1) != 0)
    sub_1D4BB3FE4(1, *(_QWORD *)(a1 + 24), a2);
  if ((v4 & 2) != 0)
    sub_1D4BB4360(2, *(_QWORD *)(a1 + 32), a2);
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 1) != 0)
    v6 = (char *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v6 = (char *)&qword_1EFEC6AB8;
  if (v6[23] < 0)
    v6 = *(char **)v6;
  if ((v5 & 1) != 0)
    v7 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v7 = &qword_1EFEC6AB8;
  if (*((char *)v7 + 23) < 0)
    v8 = v7[1];
  else
    LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
  return sub_1D4BB0EE4(a2, v6, v8);
}

uint64_t sub_1D4B0F064(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 8);
  if ((v1 & 1) != 0)
    v2 = (uint64_t *)(v1 & 0xFFFFFFFFFFFFFFFELL);
  else
    v2 = &qword_1EFEC6AB8;
  if (*((char *)v2 + 23) < 0)
    v3 = v2[1];
  else
    v3 = *((unsigned __int8 *)v2 + 23);
  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 3) != 0)
  {
    if ((v4 & 1) != 0)
    {
      v5 = *(_QWORD *)(a1 + 24);
      v6 = *(unsigned __int8 *)(v5 + 23);
      v7 = *(_QWORD *)(v5 + 8);
      if ((v6 & 0x80u) == 0)
        v7 = v6;
      v3 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v4 & 2) != 0)
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(unsigned __int8 *)(v8 + 23);
      v10 = *(_QWORD *)(v8 + 8);
      if ((v9 & 0x80u) == 0)
        v10 = v9;
      v3 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

uint64_t sub_1D4B0F12C()
{
  return 1;
}

_QWORD *sub_1D4B0F134@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.UserMetadataItem");
}

uint64_t sub_1D4B0F144(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E984A338;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  if (atomic_load(dword_1EFEC5D48))
    sub_1D4BAFB3C(dword_1EFEC5D48);
  return a1;
}

void sub_1D4B0F1B0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  sub_1D4B167F0(v2);
  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B0F1D0(_QWORD *a1)
{
  *a1 = off_1E984A338;
  sub_1D4B167F0(a1 + 3);
  sub_1D4B16364(a1 + 1);
  return a1;
}

void sub_1D4B0F210(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B0F1D0(a1);
  operator delete(v1);
}

void sub_1D4B0F224(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(unsigned int *)(a1 + 32);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 40) + 8);
    do
    {
      v4 = *v3++;
      sub_1D4B078F8(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(a1 + 32) = 0;
  }
  v6 = *(_BYTE *)(a1 + 8);
  v5 = a1 + 8;
  *(_DWORD *)(v5 + 8) = 0;
  if ((v6 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v5);
}

uint64_t sub_1D4B0F290(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  BOOL v12;
  int *v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  _BYTE v25[32];
  _QWORD v26[2];
  uint64_t *v27;
  __int128 v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a1 + 8);
  v27 = (uint64_t *)(a1 + 8);
  v28 = 0uLL;
  v29 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v29 = *(_QWORD *)(v5 + 16);
    v28 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v26, (uint64_t)&v28);
  sub_1D4BB0DD8((uint64_t)v25, (uint64_t)v26, 0);
  while (1)
  {
    v7 = *(unsigned __int8 **)a2;
    if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
    {
      v8 = 0;
    }
    else
    {
      v8 = *v7;
      if ((char)*v7 >= 1)
      {
        *(_QWORD *)a2 = v7 + 1;
        v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0)
          break;
        goto LABEL_10;
      }
    }
    v10 = sub_1D4BB0BD8(a2, v8);
    v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
    if ((v9 & 0x100000000) == 0)
      break;
LABEL_10:
    if (v9 != 10 || (v9 & 0xFFFFFFF8) != 8)
      break;
    v13 = *(int **)(a1 + 40);
    if (!v13)
    {
      v15 = *(_DWORD *)(a1 + 36);
LABEL_21:
      sub_1D4BB24FC(a1 + 24, v15 + 1);
      v13 = *(int **)(a1 + 40);
      v15 = *v13;
      goto LABEL_22;
    }
    v14 = *(int *)(a1 + 32);
    v15 = *v13;
    if ((int)v14 < *v13)
    {
      *(_DWORD *)(a1 + 32) = v14 + 1;
      v16 = *(void **)&v13[2 * v14 + 2];
      goto LABEL_23;
    }
    if (v15 == *(_DWORD *)(a1 + 36))
      goto LABEL_21;
LABEL_22:
    *v13 = v15 + 1;
    v16 = sub_1D4B155A8(*(_QWORD *)(a1 + 24));
    v17 = *(_QWORD *)(a1 + 40);
    v18 = *(int *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v18 + 1;
    *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
LABEL_23:
    v19 = *(char **)a2;
    if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v19 < 0)
    {
      v20 = sub_1D4BB098C((unsigned __int8 **)a2);
      if (v20 < 0)
        goto LABEL_31;
    }
    else
    {
      v20 = *v19;
      *(_QWORD *)a2 = v19 + 1;
    }
    v21 = sub_1D4BAFFA4(a2, v20);
    v22 = v21;
    if ((v21 & 0x8000000000000000) != 0 || !sub_1D4B079F4((uint64_t)v16, a2))
    {
LABEL_31:
      v23 = 0;
      goto LABEL_33;
    }
    v12 = sub_1D4BAFFD8(a2, v22);
LABEL_30:
    if (!v12)
      goto LABEL_31;
  }
  if ((_DWORD)v9)
  {
    v12 = sub_1D4BB3060(a2, v9, (uint64_t)v25);
    goto LABEL_30;
  }
  v23 = 1;
LABEL_33:
  sub_1D4BB0EE0((uint64_t)v25);
  sub_1D4B16458(&v27);
  return v23;
}

void sub_1D4B0F49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B0F4C4(uint64_t a1, uint64_t a2)
{
  int v4;
  int i;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;

  v4 = *(_DWORD *)(a1 + 32);
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      sub_1D4BB4528(1, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i + 8), a2);
  }
  v6 = *(_QWORD *)(a1 + 8);
  if ((v6 & 1) != 0)
    v7 = (char *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  else
    v7 = (char *)&qword_1EFEC6AB8;
  if (v7[23] < 0)
    v7 = *(char **)v7;
  if ((v6 & 1) != 0)
    v8 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  else
    v8 = &qword_1EFEC6AB8;
  if (*((char *)v8 + 23) < 0)
    v9 = v8[1];
  else
    LODWORD(v9) = *((unsigned __int8 *)v8 + 23);
  return sub_1D4BB0EE4(a2, v7, v9);
}

uint64_t sub_1D4B0F568(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 1) != 0)
    v3 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  else
    v3 = &qword_1EFEC6AB8;
  if (*((char *)v3 + 23) < 0)
    v4 = v3[1];
  else
    v4 = *((unsigned __int8 *)v3 + 23);
  v5 = *(unsigned int *)(a1 + 32);
  v6 = v4 + v5;
  if ((_DWORD)v5)
  {
    v7 = 0;
    do
    {
      v8 = sub_1D4B0831C(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v7 + 8));
      v6 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
      ++v7;
    }
    while ((_DWORD)v5 != v7);
  }
  *(_DWORD *)(a1 + 20) = v6;
  return v6;
}

std::string *sub_1D4B0F610(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  std::string **v7;
  signed int v8;
  signed int *v9;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 32);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 40) + 8);
    v7 = (std::string **)sub_1D4BB23F8((uint64_t)&v3[1], v5);
    result = sub_1D4B16F5C(v3 + 1, v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2] - LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    v8 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v5;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v8;
    v9 = (signed int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v9 < v8)
      *v9 = v8;
  }
  return result;
}

uint64_t sub_1D4B0F6B0()
{
  return 1;
}

_QWORD *sub_1D4B0F6B8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.StripeStatistics");
}

uint64_t sub_1D4B0F6C8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E984ABF8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  if (atomic_load(dword_1EFEC5BB0))
    sub_1D4BAFB3C(dword_1EFEC5BB0);
  return a1;
}

void sub_1D4B0F734(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  sub_1D4B167F0(v2);
  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B0F758(_QWORD *a1)
{
  *a1 = off_1E984ABF8;
  sub_1D4B167F0(a1 + 3);
  sub_1D4B16364(a1 + 1);
  return a1;
}

void sub_1D4B0F798(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B0F758(a1);
  operator delete(v1);
}

void sub_1D4B0F7AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *(unsigned int *)(a1 + 32);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 40) + 8);
    do
    {
      v4 = *v3++;
      sub_1D4B0F224(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(a1 + 32) = 0;
  }
  v6 = *(_BYTE *)(a1 + 8);
  v5 = a1 + 8;
  *(_DWORD *)(v5 + 8) = 0;
  if ((v6 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v5);
}

uint64_t sub_1D4B0F818(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  BOOL v12;
  int *v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  _BYTE v25[32];
  _QWORD v26[2];
  uint64_t *v27;
  __int128 v28;
  uint64_t v29;

  v4 = *(_QWORD *)(a1 + 8);
  v27 = (uint64_t *)(a1 + 8);
  v28 = 0uLL;
  v29 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v29 = *(_QWORD *)(v5 + 16);
    v28 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v26, (uint64_t)&v28);
  sub_1D4BB0DD8((uint64_t)v25, (uint64_t)v26, 0);
  while (1)
  {
    v7 = *(unsigned __int8 **)a2;
    if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
    {
      v8 = 0;
    }
    else
    {
      v8 = *v7;
      if ((char)*v7 >= 1)
      {
        *(_QWORD *)a2 = v7 + 1;
        v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0)
          break;
        goto LABEL_10;
      }
    }
    v10 = sub_1D4BB0BD8(a2, v8);
    v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
    if ((v9 & 0x100000000) == 0)
      break;
LABEL_10:
    if (v9 != 10 || (v9 & 0xFFFFFFF8) != 8)
      break;
    v13 = *(int **)(a1 + 40);
    if (!v13)
    {
      v15 = *(_DWORD *)(a1 + 36);
LABEL_21:
      sub_1D4BB24FC(a1 + 24, v15 + 1);
      v13 = *(int **)(a1 + 40);
      v15 = *v13;
      goto LABEL_22;
    }
    v14 = *(int *)(a1 + 32);
    v15 = *v13;
    if ((int)v14 < *v13)
    {
      *(_DWORD *)(a1 + 32) = v14 + 1;
      v16 = *(void **)&v13[2 * v14 + 2];
      goto LABEL_23;
    }
    if (v15 == *(_DWORD *)(a1 + 36))
      goto LABEL_21;
LABEL_22:
    *v13 = v15 + 1;
    v16 = sub_1D4B15C90(*(_QWORD *)(a1 + 24));
    v17 = *(_QWORD *)(a1 + 40);
    v18 = *(int *)(a1 + 32);
    *(_DWORD *)(a1 + 32) = v18 + 1;
    *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
LABEL_23:
    v19 = *(char **)a2;
    if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v19 < 0)
    {
      v20 = sub_1D4BB098C((unsigned __int8 **)a2);
      if (v20 < 0)
        goto LABEL_31;
    }
    else
    {
      v20 = *v19;
      *(_QWORD *)a2 = v19 + 1;
    }
    v21 = sub_1D4BAFFA4(a2, v20);
    v22 = v21;
    if ((v21 & 0x8000000000000000) != 0 || !sub_1D4B0F290((uint64_t)v16, a2))
    {
LABEL_31:
      v23 = 0;
      goto LABEL_33;
    }
    v12 = sub_1D4BAFFD8(a2, v22);
LABEL_30:
    if (!v12)
      goto LABEL_31;
  }
  if ((_DWORD)v9)
  {
    v12 = sub_1D4BB3060(a2, v9, (uint64_t)v25);
    goto LABEL_30;
  }
  v23 = 1;
LABEL_33:
  sub_1D4BB0EE0((uint64_t)v25);
  sub_1D4B16458(&v27);
  return v23;
}

void sub_1D4B0FA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B0FA4C(uint64_t a1, uint64_t a2)
{
  int v4;
  int i;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;

  v4 = *(_DWORD *)(a1 + 32);
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      sub_1D4BB4528(1, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i + 8), a2);
  }
  v6 = *(_QWORD *)(a1 + 8);
  if ((v6 & 1) != 0)
    v7 = (char *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  else
    v7 = (char *)&qword_1EFEC6AB8;
  if (v7[23] < 0)
    v7 = *(char **)v7;
  if ((v6 & 1) != 0)
    v8 = (uint64_t *)(v6 & 0xFFFFFFFFFFFFFFFELL);
  else
    v8 = &qword_1EFEC6AB8;
  if (*((char *)v8 + 23) < 0)
    v9 = v8[1];
  else
    LODWORD(v9) = *((unsigned __int8 *)v8 + 23);
  return sub_1D4BB0EE4(a2, v7, v9);
}

uint64_t sub_1D4B0FAF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 1) != 0)
    v3 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  else
    v3 = &qword_1EFEC6AB8;
  if (*((char *)v3 + 23) < 0)
    v4 = v3[1];
  else
    v4 = *((unsigned __int8 *)v3 + 23);
  v5 = *(unsigned int *)(a1 + 32);
  v6 = v4 + v5;
  if ((_DWORD)v5)
  {
    v7 = 0;
    do
    {
      v8 = sub_1D4B0F568(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v7 + 8));
      v6 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
      ++v7;
    }
    while ((_DWORD)v5 != v7);
  }
  *(_DWORD *)(a1 + 20) = v6;
  return v6;
}

std::string *sub_1D4B0FB98(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  std::string **v7;
  signed int v8;
  signed int *v9;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 32);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 40) + 8);
    v7 = (std::string **)sub_1D4BB23F8((uint64_t)&v3[1], v5);
    result = sub_1D4B17018(v3 + 1, v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2] - LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    v8 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v5;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v8;
    v9 = (signed int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v9 < v8)
      *v9 = v8;
  }
  return result;
}

uint64_t sub_1D4B0FC38()
{
  return 1;
}

_QWORD *sub_1D4B0FC40@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.Metadata");
}

uint64_t sub_1D4B0FC50(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = off_1E984AAB8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  if (atomic_load(dword_1EFEC5B98))
    sub_1D4BAFB3C(dword_1EFEC5B98);
  *(_QWORD *)(a1 + 72) = &qword_1EFEC6AB8;
  return a1;
}

void sub_1D4B0FCD0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;

  sub_1D4B04D28(v3);
  sub_1D4B16C0C(v2);
  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B0FCF8(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)a1 = off_1E984AAB8;
  sub_1D4B0FD5C(a1);
  if (*(int *)(a1 + 52) >= 1)
  {
    v2 = *(_QWORD **)(a1 + 56);
    if (v2)
    {
      if (!*v2)
        operator delete(v2);
    }
  }
  sub_1D4B16C0C((_QWORD *)(a1 + 24));
  sub_1D4B16364((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1D4B0FD5C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 72);
  if ((uint64_t *)v1 != &qword_1EFEC6AB8 && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete((void *)v1);
  }
}

void sub_1D4B0FDB0(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_1D4B0FCF8(a1);
  operator delete(v1);
}

void sub_1D4B0FDC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  sub_1D4B16718(a1 + 24);
  *(_DWORD *)(a1 + 48) = 0;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 72);
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v4 = *(_BYTE *)(a1 + 8);
  v3 = a1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if ((v4 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v3);
}

uint64_t sub_1D4B0FE34(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  std::string *v14;
  char v15;
  char *v16;
  int v17;
  int *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v32[32];
  _QWORD v33[2];
  uint64_t *v34;
  __int128 v35;
  uint64_t v36;

  v4 = *(_QWORD *)(a1 + 8);
  v34 = (uint64_t *)(a1 + 8);
  v35 = 0uLL;
  v36 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v36 = *(_QWORD *)(v5 + 16);
    v35 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v33, (uint64_t)&v35);
  sub_1D4BB0DD8((uint64_t)v32, (uint64_t)v33, 0);
  v7 = (uint64_t *)(a1 + 24);
LABEL_4:
  while (2)
  {
    v8 = (char *)*a2;
    if (*a2 >= (unint64_t)a2[1])
    {
      v9 = 0;
LABEL_9:
      v11 = sub_1D4BB0BD8((uint64_t)a2, v9);
      v10 = v11 | ((unint64_t)(v11 - 1 < 0x7F) << 32);
      if ((v10 & 0x100000000) == 0)
        goto LABEL_29;
      goto LABEL_10;
    }
    v9 = *v8;
    if (*v8 < 1)
      goto LABEL_9;
    *a2 = (uint64_t)(v8 + 1);
    v10 = v9 | 0x100000000;
    if ((v10 & 0x100000000) == 0)
      goto LABEL_29;
LABEL_10:
    v12 = v10 >> 3;
    if (v10 >> 3 != 3)
    {
      if (v12 != 2)
      {
        if (v12 != 1 || v10 != 10)
          goto LABEL_29;
        *(_DWORD *)(a1 + 16) |= 1u;
        v14 = *(std::string **)(a1 + 72);
        if (v14 == (std::string *)&qword_1EFEC6AB8)
        {
          sub_1D4B164E8((_QWORD *)(a1 + 72), (uint64_t)&qword_1EFEC6AB8);
          v14 = *(std::string **)(a1 + 72);
        }
LABEL_19:
        v15 = sub_1D4BB4654(a2, v14);
        goto LABEL_31;
      }
      if (v10 != 18)
        goto LABEL_29;
      v18 = *(int **)(a1 + 40);
      if (v18)
      {
        v19 = *(int *)(a1 + 32);
        v20 = *v18;
        if ((int)v19 < *v18)
        {
          *(_DWORD *)(a1 + 32) = v19 + 1;
          v14 = *(std::string **)&v18[2 * v19 + 2];
          goto LABEL_19;
        }
        if (v20 != *(_DWORD *)(a1 + 36))
        {
LABEL_37:
          *v18 = v20 + 1;
          v21 = *v7;
          if (*v7)
          {
            if (*(_QWORD *)(v21 + 112))
              sub_1D4BAD2D0(*v7, (uint64_t)&unk_1E9847098, 24);
            v14 = (std::string *)sub_1D4BACF80(v21, 0x18uLL, (uint64_t)sub_1D4B16704);
          }
          else
          {
            v14 = (std::string *)operator new(0x18uLL);
          }
          v14->__r_.__value_.__r.__words[0] = 0;
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v22 = *(_QWORD *)(a1 + 40);
          v23 = *(int *)(a1 + 32);
          *(_DWORD *)(a1 + 32) = v23 + 1;
          *(_QWORD *)(v22 + 8 * v23 + 8) = v14;
          goto LABEL_19;
        }
      }
      else
      {
        v20 = *(_DWORD *)(a1 + 36);
      }
      sub_1D4BB24FC(a1 + 24, v20 + 1);
      v18 = *(int **)(a1 + 40);
      v20 = *v18;
      goto LABEL_37;
    }
    if (v10 == 24)
    {
      v15 = sub_1D4B0D968(1, 0x1Au, a2, (signed int *)(a1 + 48));
LABEL_31:
      if ((v15 & 1) != 0)
        continue;
      goto LABEL_57;
    }
    break;
  }
  if (v10 == 26)
  {
    v16 = (char *)*a2;
    if (*a2 >= (unint64_t)a2[1] || *v16 < 0)
    {
      v17 = sub_1D4BB098C((unsigned __int8 **)a2);
      if (v17 < 0)
      {
LABEL_57:
        v30 = 0;
        goto LABEL_56;
      }
    }
    else
    {
      v17 = *v16;
      *a2 = (uint64_t)(v16 + 1);
    }
    v24 = sub_1D4BAFEE4((uint64_t)a2, v17);
    while (1)
    {
      if ((int)sub_1D4BB003C(a2) < 1)
      {
        sub_1D4BAFF5C((uint64_t)a2, v24);
        goto LABEL_4;
      }
      v25 = (char *)*a2;
      if (*a2 >= (unint64_t)a2[1])
      {
        v26 = 0;
      }
      else
      {
        v26 = *v25;
        if ((*v25 & 0x80000000) == 0)
        {
          *a2 = (uint64_t)(v25 + 1);
          goto LABEL_51;
        }
      }
      v27 = sub_1D4BB08A4(a2, v26);
      v26 = v27;
      if (v27 < 0)
        goto LABEL_57;
LABEL_51:
      v28 = *(_DWORD *)(a1 + 48);
      if (v28 == *(_DWORD *)(a1 + 52))
      {
        sub_1D4B16C88((unsigned int *)(a1 + 48), v28 + 1);
        v28 = *(_DWORD *)(a1 + 48);
      }
      v29 = *(_QWORD *)(a1 + 56);
      *(_DWORD *)(a1 + 48) = v28 + 1;
      *(_DWORD *)(v29 + 4 * v28 + 8) = v26;
    }
  }
LABEL_29:
  if ((_DWORD)v10)
  {
    v15 = sub_1D4BB3060((uint64_t)a2, v10, (uint64_t)v32);
    goto LABEL_31;
  }
  v30 = 1;
LABEL_56:
  sub_1D4BB0EE0((uint64_t)v32);
  sub_1D4B16458(&v34);
  return v30;
}

void sub_1D4B101AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B101D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t i;
  unsigned int v16;
  uint64_t v17;
  _BYTE *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    sub_1D4BB3FE4(1, *(_QWORD *)(a1 + 72), a2);
  v4 = *(unsigned int *)(a1 + 32);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = 8 * v4;
    do
    {
      sub_1D4BB3E30(2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + v5 + 8), a2);
      v5 += 8;
    }
    while (v6 != v5);
  }
  if (*(int *)(a1 + 48) > 0)
  {
    if (*(int *)(a2 + 16) < 5)
    {
      sub_1D4BB10F8(a2, 0x1Au);
      v7 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(a2 + 8))++ = 26;
      v7 = *(_DWORD *)(a2 + 16) - 1;
      *(_DWORD *)(a2 + 16) = v7;
    }
    v8 = *(_DWORD *)(a1 + 64);
    if (v7 < 5)
    {
      sub_1D4BB10F8(a2, v8);
    }
    else
    {
      v9 = *(_QWORD *)(a2 + 8);
      if (v8 < 0x80)
      {
        v11 = *(_DWORD *)(a1 + 64);
        v10 = *(_BYTE **)(a2 + 8);
      }
      else
      {
        v10 = *(_BYTE **)(a2 + 8);
        do
        {
          *v10++ = v8 | 0x80;
          v11 = v8 >> 7;
          v12 = v8 >> 14;
          v8 >>= 7;
        }
        while (v12);
      }
      *v10 = v11;
      v13 = (_DWORD)v10 - v9 + 1;
      *(_QWORD *)(a2 + 8) += v13;
      *(_DWORD *)(a2 + 16) -= v13;
    }
    v14 = *(unsigned int *)(a1 + 48);
    if ((int)v14 >= 1)
    {
      for (i = 0; i != v14; ++i)
      {
        v16 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * i + 8);
        if (*(int *)(a2 + 16) < 5)
        {
          sub_1D4BB10F8(a2, v16);
        }
        else
        {
          v17 = *(_QWORD *)(a2 + 8);
          if (v16 < 0x80)
          {
            v19 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 4 * i + 8);
            v18 = *(_BYTE **)(a2 + 8);
          }
          else
          {
            v18 = *(_BYTE **)(a2 + 8);
            do
            {
              *v18++ = v16 | 0x80;
              v19 = v16 >> 7;
              v20 = v16 >> 14;
              v16 >>= 7;
            }
            while (v20);
          }
          *v18 = v19;
          v21 = (_DWORD)v18 - v17 + 1;
          *(_QWORD *)(a2 + 8) += v21;
          *(_DWORD *)(a2 + 16) -= v21;
        }
      }
    }
  }
  v22 = *(_QWORD *)(a1 + 8);
  if ((v22 & 1) != 0)
    v23 = (char *)(v22 & 0xFFFFFFFFFFFFFFFELL);
  else
    v23 = (char *)&qword_1EFEC6AB8;
  if (v23[23] < 0)
    v23 = *(char **)v23;
  if ((v22 & 1) != 0)
    v24 = (uint64_t *)(v22 & 0xFFFFFFFFFFFFFFFELL);
  else
    v24 = &qword_1EFEC6AB8;
  if (*((char *)v24 + 23) < 0)
    v25 = v24[1];
  else
    LODWORD(v25) = *((unsigned __int8 *)v24 + 23);
  return sub_1D4BB0EE4(a2, v23, v25);
}

uint64_t sub_1D4B103F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 1) != 0)
    v3 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  else
    v3 = &qword_1EFEC6AB8;
  if (*((char *)v3 + 23) < 0)
    v4 = v3[1];
  else
    v4 = *((unsigned __int8 *)v3 + 23);
  v5 = *(unsigned int *)(a1 + 32);
  v6 = v4 + v5;
  if ((int)v5 >= 1)
  {
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 40) + 8);
    do
    {
      v8 = *v7++;
      v9 = *(unsigned __int8 *)(v8 + 23);
      v10 = *(_QWORD *)(v8 + 8);
      if ((v9 & 0x80u) == 0)
        v10 = v9;
      v6 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6);
      --v5;
    }
    while (v5);
  }
  v11 = sub_1D4BB472C((unsigned int *)(a1 + 48));
  v12 = 11;
  v13 = ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v11 >= 0)
    v12 = v13;
  v14 = v12 + v6;
  if (v11)
    v15 = v11;
  else
    v15 = 0;
  if (!v11)
    v14 = v6;
  *(_DWORD *)(a1 + 64) = v15;
  result = v14 + v11;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v17 = *(_QWORD *)(a1 + 72);
    v18 = *(unsigned __int8 *)(v17 + 23);
    v19 = *(_QWORD *)(v17 + 8);
    if ((v18 & 0x80u) == 0)
      v19 = v18;
    result += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

std::string *sub_1D4B10528(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  signed int v5;
  const std::string **v6;
  std::string **v7;
  int v8;
  int *v9;
  int v10;
  uint64_t data_low;
  std::string::size_type size;
  std::string::__raw *v13;
  std::string *data;
  const std::string *v15;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 32);
  if (v5)
  {
    v6 = (const std::string **)(*(_QWORD *)(a2 + 40) + 8);
    v7 = (std::string **)sub_1D4BB23F8((uint64_t)&v3[1], *(_DWORD *)(a2 + 32));
    result = sub_1D4B16DA4(v3 + 1, v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2] - LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    v8 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v5;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v8;
    v9 = (int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *(_DWORD *)(a2 + 48);
  if (v10)
  {
    data_low = SLODWORD(v3[2].__r_.__value_.__l.__data_);
    sub_1D4B16C88((unsigned int *)&v3[2], data_low + v10);
    size = v3[2].__r_.__value_.__l.__size_;
    LODWORD(v3[2].__r_.__value_.__l.__data_) += *(_DWORD *)(a2 + 48);
    result = (std::string *)memcpy((void *)(size + 4 * data_low + 8), (const void *)(*(_QWORD *)(a2 + 56) + 8), 4 * *(int *)(a2 + 48));
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    data = (std::string *)v3[3].__r_.__value_.__l.__data_;
    v13 = (std::string::__raw *)&v3[3];
    result = data;
    LODWORD(v13[-3].__words[2]) |= 1u;
    v15 = *(const std::string **)(a2 + 72);
    if (data != v15)
    {
      if (result == (std::string *)&qword_1EFEC6AB8)
        return (std::string *)sub_1D4B164E8(v13, (uint64_t)v15);
      else
        return std::string::operator=(result, v15);
    }
  }
  return result;
}

uint64_t sub_1D4B1067C()
{
  return 1;
}

_QWORD *sub_1D4B10684@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.DataMask");
}

_QWORD *sub_1D4B10694(_QWORD *a1)
{
  *a1 = off_1E9849CF8;
  a1[1] = 0;
  a1[2] = 0;
  if (atomic_load(dword_1EFEC5C48))
    sub_1D4BAFB3C(dword_1EFEC5C48);
  a1[3] = &qword_1EFEC6AB8;
  a1[4] = 0;
  return a1;
}

void sub_1D4B106F8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

void sub_1D4B1070C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if ((uint64_t *)v1 != &qword_1EFEC6AB8 && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete((void *)v1);
  }
}

_QWORD *sub_1D4B1075C(_QWORD *a1)
{
  uint64_t *v2;

  *a1 = off_1E9849CF8;
  v2 = a1 + 1;
  sub_1D4B1070C((uint64_t)a1);
  sub_1D4B16364(v2);
  return a1;
}

void sub_1D4B10798(uint64_t *a1)
{
  uint64_t *v2;

  *a1 = (uint64_t)off_1E9849CF8;
  v2 = a1 + 1;
  sub_1D4B1070C((uint64_t)a1);
  sub_1D4B16364(v2);
  operator delete(a1);
}

void sub_1D4B107D4(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  if ((v1 & 6) != 0)
    *(_QWORD *)(a1 + 32) = 0;
  v4 = *(_BYTE *)(a1 + 8);
  v3 = a1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if ((v4 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v3);
}

uint64_t sub_1D4B10820(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  std::string *v13;
  BOOL v14;
  char *v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  _QWORD v31[2];
  uint64_t *v32;
  __int128 v33;
  uint64_t v34;

  v4 = *(_QWORD *)(a1 + 8);
  v32 = (uint64_t *)(a1 + 8);
  v33 = 0uLL;
  v34 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v34 = *(_QWORD *)(v5 + 16);
    v33 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v31, (uint64_t)&v33);
  sub_1D4BB0DD8((uint64_t)&v28, (uint64_t)v31, 0);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v7 = (char *)*a2;
        if (*a2 >= (unint64_t)a2[1])
        {
          v8 = 0;
LABEL_9:
          v10 = sub_1D4BB0BD8((uint64_t)a2, v8);
          v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
          if ((v9 & 0x100000000) == 0)
            goto LABEL_28;
          goto LABEL_10;
        }
        v8 = *v7;
        if (*v7 < 1)
          goto LABEL_9;
        *a2 = (uint64_t)(v7 + 1);
        v9 = v8 | 0x100000000;
        if ((v9 & 0x100000000) == 0)
          goto LABEL_28;
LABEL_10:
        v11 = v9 >> 3;
        if (v9 >> 3 != 3)
          break;
        if (v9 != 24)
          goto LABEL_28;
        v15 = (char *)*a2;
        if (*a2 >= (unint64_t)a2[1])
        {
          LODWORD(v16) = 0;
        }
        else
        {
          LODWORD(v16) = *v15;
          if ((*v15 & 0x80000000) == 0)
          {
            *a2 = (uint64_t)(v15 + 1);
            goto LABEL_34;
          }
        }
        v16 = sub_1D4BB08A4(a2, v16);
        if (v16 < 0)
          goto LABEL_49;
LABEL_34:
        if (v16 > 2)
        {
          if (v30 < 5)
          {
            sub_1D4BB10F8((uint64_t)&v28, 0x18u);
            v19 = v30;
          }
          else
          {
            *v29++ = 24;
            v19 = --v30;
          }
          if (v19 < 5)
          {
            sub_1D4BB10F8((uint64_t)&v28, v16);
          }
          else
          {
            v20 = (int)v29;
            if (v16 < 0x80)
            {
              LOBYTE(v22) = v16;
              v21 = v29;
            }
            else
            {
              v21 = v29;
              do
              {
                *v21++ = v16 | 0x80;
                v22 = v16 >> 7;
                v23 = v16 >> 14;
                LODWORD(v16) = v16 >> 7;
              }
              while (v23);
            }
            *v21 = v22;
            v24 = (_DWORD)v21 - v20 + 1;
            v29 += v24;
            v30 -= v24;
          }
        }
        else
        {
          *(_DWORD *)(a1 + 16) |= 4u;
          *(_DWORD *)(a1 + 36) = v16;
        }
      }
      if (v11 != 2)
        break;
      if (v9 != 16)
        goto LABEL_28;
      *(_DWORD *)(a1 + 16) |= 2u;
      v17 = (char *)*a2;
      if (*a2 >= (unint64_t)a2[1])
      {
        v18 = 0;
        goto LABEL_48;
      }
      v18 = *v17;
      if (*v17 < 0)
      {
LABEL_48:
        v25 = sub_1D4BB08A4(a2, v18);
        *(_DWORD *)(a1 + 32) = v25;
        if (v25 < 0)
        {
LABEL_49:
          v26 = 0;
          goto LABEL_51;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 32) = v18;
        *a2 = (uint64_t)(v17 + 1);
      }
    }
    if (v11 == 1 && v9 == 10)
    {
      *(_DWORD *)(a1 + 16) |= 1u;
      v13 = *(std::string **)(a1 + 24);
      if (v13 == (std::string *)&qword_1EFEC6AB8)
      {
        sub_1D4B164E8((_QWORD *)(a1 + 24), (uint64_t)&qword_1EFEC6AB8);
        v13 = *(std::string **)(a1 + 24);
      }
      v14 = sub_1D4BB4654(a2, v13);
      goto LABEL_30;
    }
LABEL_28:
    if (!(_DWORD)v9)
      break;
    v14 = sub_1D4BB3060((uint64_t)a2, v9, (uint64_t)&v28);
LABEL_30:
    if (!v14)
      goto LABEL_49;
  }
  v26 = 1;
LABEL_51:
  sub_1D4BB0EE0((uint64_t)&v28);
  sub_1D4B16458(&v32);
  return v26;
}

void sub_1D4B10B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B10B34(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 1) != 0)
  {
    sub_1D4BB3FE4(1, *(_QWORD *)(a1 + 24), a2);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  sub_1D4BB37DC(2, *(_DWORD *)(a1 + 32), a2);
  if ((v4 & 4) != 0)
LABEL_4:
    sub_1D4BB36D0(3, *(_DWORD *)(a1 + 36), a2);
LABEL_5:
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 1) != 0)
    v6 = (char *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v6 = (char *)&qword_1EFEC6AB8;
  if (v6[23] < 0)
    v6 = *(char **)v6;
  if ((v5 & 1) != 0)
    v7 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v7 = &qword_1EFEC6AB8;
  if (*((char *)v7 + 23) < 0)
    v8 = v7[1];
  else
    LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
  return sub_1D4BB0EE4(a2, v6, v8);
}

uint64_t sub_1D4B10BF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 8);
  if ((v1 & 1) != 0)
    v2 = (uint64_t *)(v1 & 0xFFFFFFFFFFFFFFFELL);
  else
    v2 = &qword_1EFEC6AB8;
  if (*((char *)v2 + 23) < 0)
    v3 = v2[1];
  else
    v3 = *((unsigned __int8 *)v2 + 23);
  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 7) == 0)
    goto LABEL_15;
  if ((v4 & 1) != 0)
  {
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(unsigned __int8 *)(v9 + 23);
    v11 = *(_QWORD *)(v9 + 8);
    if ((v10 & 0x80u) == 0)
      v11 = v10;
    v3 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v4 & 2) == 0)
    {
LABEL_10:
      if ((v4 & 4) == 0)
        goto LABEL_15;
      goto LABEL_11;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_10;
  }
  v3 += ((9 * (__clz(*(_DWORD *)(a1 + 32) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v4 & 4) == 0)
    goto LABEL_15;
LABEL_11:
  v5 = *(_DWORD *)(a1 + 36);
  v6 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v5 >= 0)
    v7 = v6;
  else
    v7 = 11;
  v3 += v7;
LABEL_15:
  *(_DWORD *)(a1 + 20) = v3;
  return v3;
}

std::string *sub_1D4B10CE4(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;
  std::string *data;
  const std::string *v7;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 7) != 0)
  {
    if ((v5 & 1) != 0)
    {
      result = v3 + 1;
      data = (std::string *)v3[1].__r_.__value_.__l.__data_;
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
      v7 = *(const std::string **)(a2 + 24);
      if (data != v7)
      {
        if (data == (std::string *)&qword_1EFEC6AB8)
        {
          result = (std::string *)sub_1D4B164E8(result, (uint64_t)v7);
          if ((v5 & 2) == 0)
            goto LABEL_10;
          goto LABEL_9;
        }
        result = std::string::operator=(data, v7);
      }
    }
    if ((v5 & 2) == 0)
    {
LABEL_10:
      if ((v5 & 4) != 0)
        HIDWORD(v3[1].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 36);
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= v5;
      return result;
    }
LABEL_9:
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 32);
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1D4B10D98()
{
  return 1;
}

_QWORD *sub_1D4B10DA0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.EncryptionKey");
}

uint64_t sub_1D4B10DB0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E984A518;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  if (atomic_load(dword_1EFEC5D90))
    sub_1D4BAFB3C(dword_1EFEC5D90);
  *(_QWORD *)(a1 + 48) = &qword_1EFEC6AB8;
  *(_QWORD *)(a1 + 56) = &qword_1EFEC6AB8;
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

void sub_1D4B10E2C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  sub_1D4B167F0(v2);
  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B10E4C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_1E984A518;
  v2 = a1 + 3;
  sub_1D4B10E94((uint64_t)a1);
  sub_1D4B167F0(v2);
  sub_1D4B16364(a1 + 1);
  return a1;
}

void sub_1D4B10E94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  if ((uint64_t *)v2 != &qword_1EFEC6AB8 && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
  }
  v4 = *(_QWORD *)(a1 + 56);
  if ((uint64_t *)v4 != &qword_1EFEC6AB8 && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    operator delete((void *)v4);
  }
}

void sub_1D4B10F20(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B10E4C(a1);
  operator delete(v1);
}

void sub_1D4B10F34(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(unsigned int *)(a1 + 32);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 40) + 8);
    do
    {
      v4 = *v3++;
      sub_1D4B0A86C(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(a1 + 32) = 0;
  }
  v5 = *(_DWORD *)(a1 + 16);
  if ((v5 & 3) != 0)
  {
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)(a1 + 48);
      if (*(char *)(v6 + 23) < 0)
      {
        **(_BYTE **)v6 = 0;
        *(_QWORD *)(v6 + 8) = 0;
        if ((v5 & 2) == 0)
          goto LABEL_15;
        goto LABEL_10;
      }
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
    if ((v5 & 2) == 0)
      goto LABEL_15;
LABEL_10:
    v7 = *(_QWORD *)(a1 + 56);
    if (*(char *)(v7 + 23) < 0)
    {
      **(_BYTE **)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 23) = 0;
    }
  }
LABEL_15:
  if ((v5 & 0xC) != 0)
    *(_QWORD *)(a1 + 64) = 0;
  v9 = *(_BYTE *)(a1 + 8);
  v8 = a1 + 8;
  *(_DWORD *)(v8 + 8) = 0;
  if ((v9 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v8);
}

uint64_t sub_1D4B1100C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  char *v11;
  int v12;
  int v13;
  std::string *v14;
  BOOL v15;
  int *v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v30[32];
  _QWORD v31[2];
  uint64_t *v32;
  __int128 v33;
  uint64_t v34;

  v4 = *(_QWORD *)(a1 + 8);
  v32 = (uint64_t *)(a1 + 8);
  v33 = 0uLL;
  v34 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v34 = *(_QWORD *)(v5 + 16);
    v33 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v31, (uint64_t)&v33);
  sub_1D4BB0DD8((uint64_t)v30, (uint64_t)v31, 0);
  while (2)
  {
    while (1)
    {
      v7 = (char *)*a2;
      if (*a2 >= (unint64_t)a2[1])
        break;
      v8 = *v7;
      if (*v7 < 1)
        goto LABEL_9;
      *a2 = (uint64_t)(v7 + 1);
      v9 = v8 | 0x100000000;
      if ((v9 & 0x100000000) != 0)
        goto LABEL_10;
LABEL_32:
      if (!(_DWORD)v9)
      {
        v28 = 1;
        goto LABEL_54;
      }
      v15 = sub_1D4BB3060((uint64_t)a2, v9, (uint64_t)v30);
LABEL_34:
      if (!v15)
        goto LABEL_52;
    }
    v8 = 0;
LABEL_9:
    v10 = sub_1D4BB0BD8((uint64_t)a2, v8);
    v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
    if ((v9 & 0x100000000) == 0)
      goto LABEL_32;
LABEL_10:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 8)
          goto LABEL_32;
        *(_DWORD *)(a1 + 16) |= 4u;
        v11 = (char *)*a2;
        if (*a2 >= (unint64_t)a2[1])
        {
          v12 = 0;
        }
        else
        {
          v12 = *v11;
          if ((*v11 & 0x80000000) == 0)
          {
            *(_DWORD *)(a1 + 64) = v12;
            goto LABEL_19;
          }
        }
        v26 = sub_1D4BB08A4(a2, v12);
        *(_DWORD *)(a1 + 64) = v26;
        if (v26 < 0)
          goto LABEL_52;
        continue;
      case 2u:
        if (v9 != 16)
          goto LABEL_32;
        *(_DWORD *)(a1 + 16) |= 8u;
        v11 = (char *)*a2;
        if (*a2 >= (unint64_t)a2[1])
        {
          v13 = 0;
        }
        else
        {
          v13 = *v11;
          if ((*v11 & 0x80000000) == 0)
          {
            *(_DWORD *)(a1 + 68) = v13;
LABEL_19:
            *a2 = (uint64_t)(v11 + 1);
            continue;
          }
        }
        v27 = sub_1D4BB08A4(a2, v13);
        *(_DWORD *)(a1 + 68) = v27;
        if (v27 < 0)
          goto LABEL_52;
        continue;
      case 3u:
        if (v9 != 26)
          goto LABEL_32;
        *(_DWORD *)(a1 + 16) |= 1u;
        v14 = *(std::string **)(a1 + 48);
        if (v14 == (std::string *)&qword_1EFEC6AB8)
        {
          sub_1D4B164E8((_QWORD *)(a1 + 48), (uint64_t)&qword_1EFEC6AB8);
          v14 = *(std::string **)(a1 + 48);
        }
        goto LABEL_23;
      case 4u:
        if (v9 != 34)
          goto LABEL_32;
        v16 = *(int **)(a1 + 40);
        if (!v16)
        {
          v18 = *(_DWORD *)(a1 + 36);
LABEL_38:
          sub_1D4BB24FC(a1 + 24, v18 + 1);
          v16 = *(int **)(a1 + 40);
          v18 = *v16;
          goto LABEL_39;
        }
        v17 = *(int *)(a1 + 32);
        v18 = *v16;
        if ((int)v17 < *v16)
        {
          *(_DWORD *)(a1 + 32) = v17 + 1;
          v19 = *(_QWORD **)&v16[2 * v17 + 2];
          goto LABEL_40;
        }
        if (v18 == *(_DWORD *)(a1 + 36))
          goto LABEL_38;
LABEL_39:
        *v16 = v18 + 1;
        v19 = sub_1D4B15850(*(_QWORD *)(a1 + 24));
        v20 = *(_QWORD *)(a1 + 40);
        v21 = *(int *)(a1 + 32);
        *(_DWORD *)(a1 + 32) = v21 + 1;
        *(_QWORD *)(v20 + 8 * v21 + 8) = v19;
LABEL_40:
        v22 = (char *)*a2;
        if (*a2 >= (unint64_t)a2[1] || *v22 < 0)
        {
          v23 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v23 < 0)
            goto LABEL_52;
        }
        else
        {
          v23 = *v22;
          *a2 = (uint64_t)(v22 + 1);
        }
        v24 = sub_1D4BAFFA4((uint64_t)a2, v23);
        v25 = v24;
        if ((v24 & 0x8000000000000000) == 0 && sub_1D4B0A890((uint64_t)v19, a2))
        {
          v15 = sub_1D4BAFFD8((uint64_t)a2, v25);
          goto LABEL_34;
        }
LABEL_52:
        v28 = 0;
LABEL_54:
        sub_1D4BB0EE0((uint64_t)v30);
        sub_1D4B16458(&v32);
        return v28;
      case 5u:
        if (v9 != 42)
          goto LABEL_32;
        *(_DWORD *)(a1 + 16) |= 2u;
        v14 = *(std::string **)(a1 + 56);
        if (v14 == (std::string *)&qword_1EFEC6AB8)
        {
          sub_1D4B164E8((_QWORD *)(a1 + 56), (uint64_t)&qword_1EFEC6AB8);
          v14 = *(std::string **)(a1 + 56);
        }
LABEL_23:
        v15 = sub_1D4BB4654(a2, v14);
        goto LABEL_34;
      default:
        goto LABEL_32;
    }
  }
}

void sub_1D4B11380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B113A8(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int i;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;

  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 4) != 0)
  {
    sub_1D4BB37DC(1, *(_DWORD *)(a1 + 64), a2);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  sub_1D4BB37DC(2, *(_DWORD *)(a1 + 68), a2);
  if ((v4 & 1) != 0)
LABEL_4:
    sub_1D4BB4360(3, *(_QWORD *)(a1 + 48), a2);
LABEL_5:
  v5 = *(_DWORD *)(a1 + 32);
  if (v5)
  {
    for (i = 0; i != v5; ++i)
      sub_1D4BB4528(4, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i + 8), a2);
  }
  if ((v4 & 2) != 0)
    sub_1D4BB4360(5, *(_QWORD *)(a1 + 56), a2);
  v7 = *(_QWORD *)(a1 + 8);
  if ((v7 & 1) != 0)
    v8 = (char *)(v7 & 0xFFFFFFFFFFFFFFFELL);
  else
    v8 = (char *)&qword_1EFEC6AB8;
  if (v8[23] < 0)
    v8 = *(char **)v8;
  if ((v7 & 1) != 0)
    v9 = (uint64_t *)(v7 & 0xFFFFFFFFFFFFFFFELL);
  else
    v9 = &qword_1EFEC6AB8;
  if (*((char *)v9 + 23) < 0)
    v10 = v9[1];
  else
    LODWORD(v10) = *((unsigned __int8 *)v9 + 23);
  return sub_1D4BB0EE4(a2, v8, v10);
}

uint64_t sub_1D4B114B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 1) != 0)
    v3 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  else
    v3 = &qword_1EFEC6AB8;
  if (*((char *)v3 + 23) < 0)
    v4 = v3[1];
  else
    v4 = *((unsigned __int8 *)v3 + 23);
  v5 = *(unsigned int *)(a1 + 32);
  v6 = v4 + v5;
  if ((_DWORD)v5)
  {
    v7 = 0;
    do
    {
      v8 = sub_1D4B0AC60(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v7 + 8));
      v6 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
      ++v7;
    }
    while ((_DWORD)v5 != v7);
  }
  v9 = *(_DWORD *)(a1 + 16);
  if ((v9 & 0xF) == 0)
    goto LABEL_16;
  if ((v9 & 1) != 0)
  {
    v11 = *(_QWORD *)(a1 + 48);
    v12 = *(unsigned __int8 *)(v11 + 23);
    v13 = *(_QWORD *)(v11 + 8);
    if ((v12 & 0x80u) == 0)
      v13 = v12;
    v6 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v9 & 2) == 0)
    {
LABEL_13:
      if ((v9 & 4) == 0)
        goto LABEL_14;
LABEL_23:
      v6 += ((9 * (__clz(*(_DWORD *)(a1 + 64) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v9 & 8) == 0)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  else if ((v9 & 2) == 0)
  {
    goto LABEL_13;
  }
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(unsigned __int8 *)(v14 + 23);
  v16 = *(_QWORD *)(v14 + 8);
  if ((v15 & 0x80u) == 0)
    v16 = v15;
  v6 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v9 & 4) != 0)
    goto LABEL_23;
LABEL_14:
  if ((v9 & 8) != 0)
LABEL_15:
    v6 += ((9 * (__clz(*(_DWORD *)(a1 + 68) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_16:
  *(_DWORD *)(a1 + 20) = v6;
  return v6;
}

std::string *sub_1D4B11648(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  std::string **v7;
  signed int v8;
  signed int *v9;
  int v10;
  std::string *data;
  const std::string *v12;
  std::string *size;
  const std::string *v14;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 32);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 40) + 8);
    v7 = (std::string **)sub_1D4BB23F8((uint64_t)&v3[1], *(_DWORD *)(a2 + 32));
    result = sub_1D4B169D8(v3 + 1, v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2] - LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    v8 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v5;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v8;
    v9 = (signed int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *(_DWORD *)(a2 + 16);
  if ((v10 & 0xF) != 0)
  {
    if ((v10 & 1) != 0)
    {
      result = v3 + 2;
      data = (std::string *)v3[2].__r_.__value_.__l.__data_;
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
      v12 = *(const std::string **)(a2 + 48);
      if (data != v12)
      {
        if (data == (std::string *)&qword_1EFEC6AB8)
        {
          result = (std::string *)sub_1D4B164E8(result, (uint64_t)v12);
          if ((v10 & 2) != 0)
          {
LABEL_12:
            result = (std::string *)((char *)v3 + 56);
            size = (std::string *)v3[2].__r_.__value_.__l.__size_;
            LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
            v14 = *(const std::string **)(a2 + 56);
            if (size != v14)
            {
              if (size == (std::string *)&qword_1EFEC6AB8)
                result = (std::string *)sub_1D4B164E8(result, (uint64_t)v14);
              else
                result = std::string::operator=(size, v14);
            }
          }
LABEL_18:
          if ((v10 & 4) != 0)
            LODWORD(v3[2].__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 64);
          if ((v10 & 8) != 0)
            HIDWORD(v3[2].__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 68);
          LODWORD(v3->__r_.__value_.__r.__words[2]) |= v10;
          return result;
        }
        result = std::string::operator=(data, v12);
      }
    }
    if ((v10 & 2) != 0)
      goto LABEL_12;
    goto LABEL_18;
  }
  return result;
}

uint64_t sub_1D4B117AC()
{
  return 1;
}

_QWORD *sub_1D4B117B4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.EncryptionVariant");
}

uint64_t sub_1D4B117C4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E98499D8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  if (atomic_load(dword_1EFEC5BC8))
    sub_1D4BAFB3C(dword_1EFEC5BC8);
  *(_DWORD *)(a1 + 96) = 0;
  return a1;
}

void sub_1D4B11850(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  sub_1D4B167F0(v3);
  sub_1D4B167F0(v4);
  sub_1D4B167F0(v2);
  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B11888(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  std::string *v5;
  unsigned int v6;
  uint64_t v7;
  std::string **v8;
  signed int v9;
  signed int *v10;
  unsigned int v11;
  uint64_t v12;
  std::string **v13;
  signed int v14;
  signed int *v15;
  unsigned int v16;
  uint64_t v17;
  std::string **v18;
  signed int v19;
  signed int *v20;
  uint64_t v21;

  *(_QWORD *)a1 = off_1E98499D8;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (unint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v5 = (std::string *)(a1 + 24);
  *(_DWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  v6 = *(_DWORD *)(a2 + 32);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 40);
    v8 = (std::string **)sub_1D4BB23F8(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_1D4B170D4(v5, v8, (uint64_t *)(v7 + 8), v6, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    v9 = *(_DWORD *)(a1 + 32) + v6;
    *(_DWORD *)(a1 + 32) = v9;
    v10 = *(signed int **)(a1 + 40);
    if (*v10 < v9)
      *v10 = v9;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v11 = *(_DWORD *)(a2 + 56);
  if (v11)
  {
    v12 = *(_QWORD *)(a2 + 64);
    v13 = (std::string **)sub_1D4BB23F8(a1 + 48, *(_DWORD *)(a2 + 56));
    sub_1D4B17190((std::string *)(a1 + 48), v13, (uint64_t *)(v12 + 8), v11, **(_DWORD **)(a1 + 64) - *(_DWORD *)(a1 + 56));
    v14 = *(_DWORD *)(a1 + 56) + v11;
    *(_DWORD *)(a1 + 56) = v14;
    v15 = *(signed int **)(a1 + 64);
    if (*v15 < v14)
      *v15 = v14;
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v16 = *(_DWORD *)(a2 + 80);
  if (v16)
  {
    v17 = *(_QWORD *)(a2 + 88);
    v18 = (std::string **)sub_1D4BB23F8(a1 + 72, *(_DWORD *)(a2 + 80));
    sub_1D4B1724C((std::string *)(a1 + 72), v18, (uint64_t *)(v17 + 8), v16, **(_DWORD **)(a1 + 88) - *(_DWORD *)(a1 + 80));
    v19 = *(_DWORD *)(a1 + 80) + v16;
    *(_DWORD *)(a1 + 80) = v19;
    v20 = *(signed int **)(a1 + 88);
    if (*v20 < v19)
      *v20 = v19;
  }
  v21 = *(_QWORD *)(a2 + 8);
  if ((v21 & 1) != 0)
    sub_1D4B16764(v4, v21 & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  return a1;
}

void sub_1D4B11A3C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  sub_1D4B167F0(v4);
  sub_1D4B167F0(v3);
  sub_1D4B167F0(v2);
  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B11A8C(_QWORD *a1)
{
  *a1 = off_1E98499D8;
  sub_1D4B167F0(a1 + 9);
  sub_1D4B167F0(a1 + 6);
  sub_1D4B167F0(a1 + 3);
  sub_1D4B16364(a1 + 1);
  return a1;
}

void sub_1D4B11AE4(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B11A8C(a1);
  operator delete(v1);
}

void sub_1D4B11AF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v2 = *(unsigned int *)(a1 + 32);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 40) + 8);
    do
    {
      v4 = *v3++;
      sub_1D4B0FDC4(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(a1 + 32) = 0;
  }
  v5 = *(unsigned int *)(a1 + 56);
  if ((int)v5 >= 1)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a1 + 64) + 8);
    do
    {
      v7 = *v6++;
      sub_1D4B107D4(v7);
      --v5;
    }
    while (v5);
    *(_DWORD *)(a1 + 56) = 0;
  }
  v8 = *(unsigned int *)(a1 + 80);
  if ((int)v8 >= 1)
  {
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 88) + 8);
    do
    {
      v10 = *v9++;
      sub_1D4B10F34(v10);
      --v8;
    }
    while (v8);
    *(_DWORD *)(a1 + 80) = 0;
  }
  v12 = *(_BYTE *)(a1 + 8);
  v11 = a1 + 8;
  *(_DWORD *)(v11 + 88) = 0;
  *(_DWORD *)(v11 + 8) = 0;
  if ((v12 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v11);
}

uint64_t sub_1D4B11BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int *v11;
  uint64_t v12;
  int v13;
  void *v14;
  int *v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  int *v19;
  uint64_t v20;
  int v21;
  void *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  unint64_t v41;
  int v42;
  int v43;
  _BYTE *v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v50;
  _BYTE *v51;
  int v52;
  _QWORD v53[2];
  uint64_t *v54;
  __int128 v55;
  uint64_t v56;

  v4 = *(_QWORD *)(a1 + 8);
  v54 = (uint64_t *)(a1 + 8);
  v55 = 0uLL;
  v56 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v56 = *(_QWORD *)(v5 + 16);
    v55 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v53, (uint64_t)&v55);
  sub_1D4BB0DD8((uint64_t)&v50, (uint64_t)v53, 0);
  while (1)
  {
    v7 = *(unsigned __int8 **)a2;
    if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
      break;
    v8 = *v7;
    if ((char)*v7 < 1)
      goto LABEL_9;
    *(_QWORD *)a2 = v7 + 1;
    v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) == 0)
      goto LABEL_27;
LABEL_10:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_27;
        v11 = *(int **)(a1 + 40);
        if (!v11)
        {
          v13 = *(_DWORD *)(a1 + 36);
LABEL_35:
          sub_1D4BB24FC(a1 + 24, v13 + 1);
          v11 = *(int **)(a1 + 40);
          v13 = *v11;
          goto LABEL_36;
        }
        v12 = *(int *)(a1 + 32);
        v13 = *v11;
        if ((int)v12 < *v11)
        {
          *(_DWORD *)(a1 + 32) = v12 + 1;
          v14 = *(void **)&v11[2 * v12 + 2];
          goto LABEL_37;
        }
        if (v13 == *(_DWORD *)(a1 + 36))
          goto LABEL_35;
LABEL_36:
        *v11 = v13 + 1;
        v14 = sub_1D4B15DA0(*(_QWORD *)(a1 + 24));
        v26 = *(_QWORD *)(a1 + 40);
        v27 = *(int *)(a1 + 32);
        *(_DWORD *)(a1 + 32) = v27 + 1;
        *(_QWORD *)(v26 + 8 * v27 + 8) = v14;
LABEL_37:
        v28 = *(char **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v28 < 0)
        {
          v29 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v29 < 0)
            goto LABEL_81;
        }
        else
        {
          v29 = *v28;
          *(_QWORD *)a2 = v28 + 1;
        }
        v30 = sub_1D4BAFFA4(a2, v29);
        v31 = v30;
        if ((v30 & 0x8000000000000000) == 0 && sub_1D4B0FE34((uint64_t)v14, (uint64_t *)a2))
          goto LABEL_63;
        goto LABEL_81;
      case 2u:
        if (v9 != 18)
          goto LABEL_27;
        v15 = *(int **)(a1 + 64);
        if (!v15)
        {
          v17 = *(_DWORD *)(a1 + 60);
LABEL_45:
          sub_1D4BB24FC(a1 + 48, v17 + 1);
          v15 = *(int **)(a1 + 64);
          v17 = *v15;
          goto LABEL_46;
        }
        v16 = *(int *)(a1 + 56);
        v17 = *v15;
        if ((int)v16 < *v15)
        {
          *(_DWORD *)(a1 + 56) = v16 + 1;
          v18 = *(_QWORD **)&v15[2 * v16 + 2];
          goto LABEL_47;
        }
        if (v17 == *(_DWORD *)(a1 + 60))
          goto LABEL_45;
LABEL_46:
        *v15 = v17 + 1;
        v18 = sub_1D4B15E28(*(_QWORD *)(a1 + 48));
        v32 = *(_QWORD *)(a1 + 64);
        v33 = *(int *)(a1 + 56);
        *(_DWORD *)(a1 + 56) = v33 + 1;
        *(_QWORD *)(v32 + 8 * v33 + 8) = v18;
LABEL_47:
        v34 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v34 < 0)
        {
          v35 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v35 < 0)
            goto LABEL_81;
        }
        else
        {
          v35 = *v34;
          *(_QWORD *)a2 = v34 + 1;
        }
        v36 = sub_1D4BAFFA4(a2, v35);
        v31 = v36;
        if ((v36 & 0x8000000000000000) == 0 && sub_1D4B10820((uint64_t)v18, (uint64_t *)a2))
          goto LABEL_63;
        goto LABEL_81;
      case 3u:
        if (v9 != 26)
          goto LABEL_27;
        v19 = *(int **)(a1 + 88);
        if (!v19)
        {
          v21 = *(_DWORD *)(a1 + 84);
LABEL_55:
          sub_1D4BB24FC(a1 + 72, v21 + 1);
          v19 = *(int **)(a1 + 88);
          v21 = *v19;
          goto LABEL_56;
        }
        v20 = *(int *)(a1 + 80);
        v21 = *v19;
        if ((int)v20 < *v19)
        {
          *(_DWORD *)(a1 + 80) = v20 + 1;
          v22 = *(void **)&v19[2 * v20 + 2];
          goto LABEL_57;
        }
        if (v21 == *(_DWORD *)(a1 + 84))
          goto LABEL_55;
LABEL_56:
        *v19 = v21 + 1;
        v22 = sub_1D4B15EB0(*(_QWORD *)(a1 + 72));
        v37 = *(_QWORD *)(a1 + 88);
        v38 = *(int *)(a1 + 80);
        *(_DWORD *)(a1 + 80) = v38 + 1;
        *(_QWORD *)(v37 + 8 * v38 + 8) = v22;
LABEL_57:
        v39 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v39 < 0)
        {
          v40 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v40 < 0)
            goto LABEL_81;
        }
        else
        {
          v40 = *v39;
          *(_QWORD *)a2 = v39 + 1;
        }
        v41 = sub_1D4BAFFA4(a2, v40);
        v31 = v41;
        if ((v41 & 0x8000000000000000) != 0 || !sub_1D4B1100C((uint64_t)v22, (uint64_t *)a2))
        {
LABEL_81:
          v48 = 0;
          goto LABEL_80;
        }
LABEL_63:
        v25 = sub_1D4BAFFD8(a2, v31);
        break;
      case 4u:
        if (v9 != 32)
          goto LABEL_27;
        v23 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
        {
          LODWORD(v24) = 0;
        }
        else
        {
          LODWORD(v24) = *v23;
          if (((char)*v23 & 0x80000000) == 0)
          {
            *(_QWORD *)a2 = v23 + 1;
            goto LABEL_66;
          }
        }
        v24 = sub_1D4BB08A4((uint64_t *)a2, v24);
        if (v24 < 0)
          goto LABEL_81;
LABEL_66:
        if (v24 > 4)
        {
          if (v52 < 5)
          {
            sub_1D4BB10F8((uint64_t)&v50, 0x20u);
            v42 = v52;
          }
          else
          {
            *v51++ = 32;
            v42 = --v52;
          }
          if (v42 < 5)
          {
            sub_1D4BB10F8((uint64_t)&v50, v24);
          }
          else
          {
            v43 = (int)v51;
            if (v24 < 0x80)
            {
              LOBYTE(v45) = v24;
              v44 = v51;
            }
            else
            {
              v44 = v51;
              do
              {
                *v44++ = v24 | 0x80;
                v45 = v24 >> 7;
                v46 = v24 >> 14;
                LODWORD(v24) = v24 >> 7;
              }
              while (v46);
            }
            *v44 = v45;
            v47 = (_DWORD)v44 - v43 + 1;
            v51 += v47;
            v52 -= v47;
          }
        }
        else
        {
          *(_DWORD *)(a1 + 16) |= 1u;
          *(_DWORD *)(a1 + 96) = v24;
        }
        continue;
      default:
        goto LABEL_27;
    }
LABEL_29:
    if (!v25)
      goto LABEL_81;
  }
  v8 = 0;
LABEL_9:
  v10 = sub_1D4BB0BD8(a2, v8);
  v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
  if ((v9 & 0x100000000) != 0)
    goto LABEL_10;
LABEL_27:
  if ((_DWORD)v9)
  {
    v25 = sub_1D4BB3060(a2, v9, (uint64_t)&v50);
    goto LABEL_29;
  }
  v48 = 1;
LABEL_80:
  sub_1D4BB0EE0((uint64_t)&v50);
  sub_1D4B16458(&v54);
  return v48;
}

void sub_1D4B120FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B12128(uint64_t a1, uint64_t a2)
{
  int v4;
  int i;
  int v6;
  int j;
  int v8;
  int k;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a1 + 32);
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      sub_1D4BB4528(1, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i + 8), a2);
  }
  v6 = *(_DWORD *)(a1 + 56);
  if (v6)
  {
    for (j = 0; j != v6; ++j)
      sub_1D4BB4528(2, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * j + 8), a2);
  }
  v8 = *(_DWORD *)(a1 + 80);
  if (v8)
  {
    for (k = 0; k != v8; ++k)
      sub_1D4BB4528(3, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * k + 8), a2);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    sub_1D4BB36D0(4, *(_DWORD *)(a1 + 96), a2);
  v10 = *(_QWORD *)(a1 + 8);
  if ((v10 & 1) != 0)
    v11 = (char *)(v10 & 0xFFFFFFFFFFFFFFFELL);
  else
    v11 = (char *)&qword_1EFEC6AB8;
  if (v11[23] < 0)
    v11 = *(char **)v11;
  if ((v10 & 1) != 0)
    v12 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFFELL);
  else
    v12 = &qword_1EFEC6AB8;
  if (*((char *)v12 + 23) < 0)
    v13 = v12[1];
  else
    LODWORD(v13) = *((unsigned __int8 *)v12 + 23);
  return sub_1D4BB0EE4(a2, v11, v13);
}

uint64_t sub_1D4B12244(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 1) != 0)
    v3 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  else
    v3 = &qword_1EFEC6AB8;
  if (*((char *)v3 + 23) < 0)
    v4 = v3[1];
  else
    v4 = *((unsigned __int8 *)v3 + 23);
  v5 = *(unsigned int *)(a1 + 32);
  v6 = v4 + v5;
  if ((_DWORD)v5)
  {
    v7 = 0;
    do
    {
      v8 = sub_1D4B103F4(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v7 + 8));
      v6 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
      ++v7;
    }
    while ((_DWORD)v5 != v7);
  }
  v9 = *(unsigned int *)(a1 + 56);
  v10 = v6 + v9;
  if ((_DWORD)v9)
  {
    v11 = 0;
    do
    {
      v12 = sub_1D4B10BF4(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v11 + 8));
      v10 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      ++v11;
    }
    while ((_DWORD)v9 != v11);
  }
  v13 = *(unsigned int *)(a1 + 80);
  v14 = v10 + v13;
  if ((_DWORD)v13)
  {
    v15 = 0;
    do
    {
      v16 = sub_1D4B114B4(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v15 + 8));
      v14 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6);
      ++v15;
    }
    while ((_DWORD)v13 != v15);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v17 = *(_DWORD *)(a1 + 96);
    v18 = ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if (v17 >= 0)
      v19 = v18;
    else
      v19 = 11;
    v14 += v19;
  }
  *(_DWORD *)(a1 + 20) = v14;
  return v14;
}

std::string *sub_1D4B123BC(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  std::string **v7;
  signed int v8;
  signed int *v9;
  unsigned int v10;
  uint64_t *v11;
  std::string **v12;
  signed int v13;
  signed int *v14;
  unsigned int v15;
  uint64_t *v16;
  std::string **v17;
  signed int v18;
  signed int *v19;
  int v20;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 32);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 40) + 8);
    v7 = (std::string **)sub_1D4BB23F8((uint64_t)&v3[1], *(_DWORD *)(a2 + 32));
    result = sub_1D4B170D4(v3 + 1, v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2] - LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    v8 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v5;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v8;
    v9 = (signed int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *(_DWORD *)(a2 + 56);
  if (v10)
  {
    v11 = (uint64_t *)(*(_QWORD *)(a2 + 64) + 8);
    v12 = (std::string **)sub_1D4BB23F8((uint64_t)&v3[2], *(_DWORD *)(a2 + 56));
    result = sub_1D4B17190(v3 + 2, v12, v11, v10, *(_DWORD *)v3[2].__r_.__value_.__r.__words[2] - LODWORD(v3[2].__r_.__value_.__r.__words[1]));
    v13 = LODWORD(v3[2].__r_.__value_.__r.__words[1]) + v10;
    LODWORD(v3[2].__r_.__value_.__r.__words[1]) = v13;
    v14 = (signed int *)v3[2].__r_.__value_.__r.__words[2];
    if (*v14 < v13)
      *v14 = v13;
  }
  v15 = *(_DWORD *)(a2 + 80);
  if (v15)
  {
    v16 = (uint64_t *)(*(_QWORD *)(a2 + 88) + 8);
    v17 = (std::string **)sub_1D4BB23F8((uint64_t)&v3[3], *(_DWORD *)(a2 + 80));
    result = sub_1D4B1724C(v3 + 3, v17, v16, v15, *(_DWORD *)v3[3].__r_.__value_.__r.__words[2] - LODWORD(v3[3].__r_.__value_.__r.__words[1]));
    v18 = LODWORD(v3[3].__r_.__value_.__r.__words[1]) + v15;
    LODWORD(v3[3].__r_.__value_.__r.__words[1]) = v18;
    v19 = (signed int *)v3[3].__r_.__value_.__r.__words[2];
    if (*v19 < v18)
      *v19 = v18;
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v20 = *(_DWORD *)(a2 + 96);
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
    LODWORD(v3[4].__r_.__value_.__l.__data_) = v20;
  }
  return result;
}

uint64_t sub_1D4B12548()
{
  return 1;
}

_QWORD *sub_1D4B12550@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.Encryption");
}

uint64_t sub_1D4B12560(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E984A978;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  if (atomic_load(dword_1EFEC5B48))
    sub_1D4BAFB3C(dword_1EFEC5B48);
  *(_OWORD *)(a1 + 148) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  return a1;
}

void sub_1D4B12600(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  sub_1D4B167F0(v5);
  sub_1D4B167F0(v3);
  sub_1D4B167F0(v4);
  sub_1D4B167F0(v2);
  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B12648(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  std::string *v5;
  unsigned int v6;
  uint64_t v7;
  std::string **v8;
  signed int v9;
  signed int *v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t **v13;
  signed int v14;
  signed int *v15;
  unsigned int v16;
  uint64_t v17;
  std::string **v18;
  signed int v19;
  signed int *v20;
  unsigned int v21;
  uint64_t v22;
  std::string **v23;
  signed int v24;
  signed int *v25;
  uint64_t v26;
  void *v27;
  __int128 v28;
  __int128 v29;

  *(_QWORD *)a1 = off_1E984A978;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (unint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v5 = (std::string *)(a1 + 24);
  *(_DWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  v6 = *(_DWORD *)(a2 + 32);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 40);
    v8 = (std::string **)sub_1D4BB23F8(a1 + 24, *(_DWORD *)(a2 + 32));
    sub_1D4B17308(v5, v8, (uint64_t *)(v7 + 8), v6, **(_DWORD **)(a1 + 40) - *(_DWORD *)(a1 + 32));
    v9 = *(_DWORD *)(a1 + 32) + v6;
    *(_DWORD *)(a1 + 32) = v9;
    v10 = *(signed int **)(a1 + 40);
    if (*v10 < v9)
      *v10 = v9;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v11 = *(_DWORD *)(a2 + 56);
  if (v11)
  {
    v12 = *(_QWORD *)(a2 + 64);
    v13 = (unint64_t **)sub_1D4BB23F8(a1 + 48, *(_DWORD *)(a2 + 56));
    sub_1D4B173C4((unint64_t *)(a1 + 48), v13, (uint64_t *)(v12 + 8), v11, **(_DWORD **)(a1 + 64) - *(_DWORD *)(a1 + 56));
    v14 = *(_DWORD *)(a1 + 56) + v11;
    *(_DWORD *)(a1 + 56) = v14;
    v15 = *(signed int **)(a1 + 64);
    if (*v15 < v14)
      *v15 = v14;
  }
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v16 = *(_DWORD *)(a2 + 80);
  if (v16)
  {
    v17 = *(_QWORD *)(a2 + 88);
    v18 = (std::string **)sub_1D4BB23F8(a1 + 72, *(_DWORD *)(a2 + 80));
    sub_1D4B17480((std::string *)(a1 + 72), v18, (uint64_t *)(v17 + 8), v16, **(_DWORD **)(a1 + 88) - *(_DWORD *)(a1 + 80));
    v19 = *(_DWORD *)(a1 + 80) + v16;
    *(_DWORD *)(a1 + 80) = v19;
    v20 = *(signed int **)(a1 + 88);
    if (*v20 < v19)
      *v20 = v19;
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  v21 = *(_DWORD *)(a2 + 104);
  if (v21)
  {
    v22 = *(_QWORD *)(a2 + 112);
    v23 = (std::string **)sub_1D4BB23F8(a1 + 96, *(_DWORD *)(a2 + 104));
    sub_1D4B16F5C((std::string *)(a1 + 96), v23, (uint64_t *)(v22 + 8), v21, **(_DWORD **)(a1 + 112) - *(_DWORD *)(a1 + 104));
    v24 = *(_DWORD *)(a1 + 104) + v21;
    *(_DWORD *)(a1 + 104) = v24;
    v25 = *(signed int **)(a1 + 112);
    if (*v25 < v24)
      *v25 = v24;
  }
  v26 = *(_QWORD *)(a2 + 8);
  if ((v26 & 1) != 0)
    sub_1D4B16764(v4, v26 & 0xFFFFFFFFFFFFFFFELL);
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v27 = operator new(0x68uLL);
    sub_1D4B11888((uint64_t)v27, *(_QWORD *)(a2 + 120));
  }
  else
  {
    v27 = 0;
  }
  *(_QWORD *)(a1 + 120) = v27;
  v28 = *(_OWORD *)(a2 + 128);
  v29 = *(_OWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 128) = v28;
  *(_OWORD *)(a1 + 144) = v29;
  return a1;
}

void sub_1D4B1289C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;

  operator delete(v6);
  sub_1D4B167F0(v5);
  sub_1D4B167F0(v4);
  sub_1D4B167F0(v3);
  sub_1D4B167F0(v2);
  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B12914(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E984A978;
  if ((_UNKNOWN *)a1 != &unk_1EFEC6348)
  {
    v2 = *(_QWORD *)(a1 + 120);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  sub_1D4B167F0((_QWORD *)(a1 + 96));
  sub_1D4B167F0((_QWORD *)(a1 + 72));
  sub_1D4B167F0((_QWORD *)(a1 + 48));
  sub_1D4B167F0((_QWORD *)(a1 + 24));
  sub_1D4B16364((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1D4B129A0(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_1D4B12914(a1);
  operator delete(v1);
}

void sub_1D4B129B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;

  v2 = *(unsigned int *)(a1 + 32);
  if ((int)v2 >= 1)
  {
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 40) + 8);
    do
    {
      v4 = *v3++;
      sub_1D4B0E3A0(v4);
      --v2;
    }
    while (v2);
    *(_DWORD *)(a1 + 32) = 0;
  }
  v5 = *(unsigned int *)(a1 + 56);
  if ((int)v5 >= 1)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a1 + 64) + 8);
    do
    {
      v7 = *v6++;
      sub_1D4B0D270(v7);
      --v5;
    }
    while (v5);
    *(_DWORD *)(a1 + 56) = 0;
  }
  v8 = *(unsigned int *)(a1 + 80);
  if ((int)v8 >= 1)
  {
    v9 = (uint64_t *)(*(_QWORD *)(a1 + 88) + 8);
    do
    {
      v10 = *v9++;
      sub_1D4B0ED78(v10);
      --v8;
    }
    while (v8);
    *(_DWORD *)(a1 + 80) = 0;
  }
  v11 = *(unsigned int *)(a1 + 104);
  if ((int)v11 >= 1)
  {
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 112) + 8);
    do
    {
      v13 = *v12++;
      sub_1D4B078F8(v13);
      --v11;
    }
    while (v11);
    *(_DWORD *)(a1 + 104) = 0;
  }
  v14 = *(_DWORD *)(a1 + 16);
  if ((v14 & 1) != 0)
    sub_1D4B11AF8(*(_QWORD *)(a1 + 120));
  if ((v14 & 0x7E) != 0)
  {
    *(_DWORD *)(a1 + 160) = 0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
  }
  v16 = *(_BYTE *)(a1 + 8);
  v15 = a1 + 8;
  *(_DWORD *)(v15 + 8) = 0;
  if ((v16 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v15);
}

uint64_t sub_1D4B12ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  BOOL v11;
  unsigned __int8 *v12;
  int *v13;
  uint64_t v14;
  int v15;
  void *v16;
  int *v17;
  uint64_t v18;
  int v19;
  void *v20;
  int *v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  int v25;
  void *v26;
  unsigned __int8 *v27;
  int v28;
  int *v29;
  uint64_t v30;
  int v31;
  void *v32;
  int v33;
  unsigned __int8 *v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  _BYTE *v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  uint64_t v71;
  _BYTE *v72;
  int v73;
  _QWORD v74[2];
  uint64_t *v75;
  __int128 v76;
  uint64_t v77;

  v4 = *(_QWORD *)(a1 + 8);
  v75 = (uint64_t *)(a1 + 8);
  v76 = 0uLL;
  v77 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v77 = *(_QWORD *)(v5 + 16);
    v76 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v74, (uint64_t)&v76);
  sub_1D4BB0DD8((uint64_t)&v71, (uint64_t)v74, 0);
  while (1)
  {
    v7 = *(unsigned __int8 **)a2;
    if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
      break;
    v8 = *v7;
    if ((char)*v7 < 1)
      goto LABEL_9;
    *(_QWORD *)a2 = v7 + 1;
    v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) == 0)
      goto LABEL_10;
LABEL_14:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 8)
          goto LABEL_10;
        *(_DWORD *)(a1 + 16) |= 2u;
        v12 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 < *(_QWORD *)(a2 + 8) && ((char)*v12 & 0x80000000) == 0)
        {
          *(_QWORD *)(a1 + 128) = *v12;
          goto LABEL_57;
        }
        *(_QWORD *)(a1 + 128) = sub_1D4BB06F0(a2);
        if ((v36 & 1) == 0)
          goto LABEL_139;
        continue;
      case 2u:
        if (v9 != 16)
          goto LABEL_10;
        *(_DWORD *)(a1 + 16) |= 4u;
        v12 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 < *(_QWORD *)(a2 + 8) && ((char)*v12 & 0x80000000) == 0)
        {
          *(_QWORD *)(a1 + 136) = *v12;
          goto LABEL_57;
        }
        *(_QWORD *)(a1 + 136) = sub_1D4BB06F0(a2);
        if ((v37 & 1) == 0)
          goto LABEL_139;
        continue;
      case 3u:
        if (v9 != 26)
          goto LABEL_10;
        v13 = *(int **)(a1 + 40);
        if (!v13)
        {
          v15 = *(_DWORD *)(a1 + 36);
LABEL_77:
          sub_1D4BB24FC(a1 + 24, v15 + 1);
          v13 = *(int **)(a1 + 40);
          v15 = *v13;
          goto LABEL_78;
        }
        v14 = *(int *)(a1 + 32);
        v15 = *v13;
        if ((int)v14 < *v13)
        {
          *(_DWORD *)(a1 + 32) = v14 + 1;
          v16 = *(void **)&v13[2 * v14 + 2];
          goto LABEL_79;
        }
        if (v15 == *(_DWORD *)(a1 + 36))
          goto LABEL_77;
LABEL_78:
        *v13 = v15 + 1;
        v16 = sub_1D4B15B80(*(_QWORD *)(a1 + 24));
        v41 = *(_QWORD *)(a1 + 40);
        v42 = *(int *)(a1 + 32);
        *(_DWORD *)(a1 + 32) = v42 + 1;
        *(_QWORD *)(v41 + 8 * v42 + 8) = v16;
LABEL_79:
        v43 = *(char **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v43 < 0)
        {
          v44 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v44 < 0)
            goto LABEL_139;
        }
        else
        {
          v44 = *v43;
          *(_QWORD *)a2 = v43 + 1;
        }
        v45 = sub_1D4BAFFA4(a2, v44);
        v40 = v45;
        if ((v45 & 0x8000000000000000) == 0 && sub_1D4B0E3F8((uint64_t)v16, (uint64_t *)a2))
          goto LABEL_115;
        goto LABEL_139;
      case 4u:
        if (v9 != 34)
          goto LABEL_10;
        v17 = *(int **)(a1 + 64);
        if (!v17)
        {
          v19 = *(_DWORD *)(a1 + 60);
LABEL_87:
          sub_1D4BB24FC(a1 + 48, v19 + 1);
          v17 = *(int **)(a1 + 64);
          v19 = *v17;
          goto LABEL_88;
        }
        v18 = *(int *)(a1 + 56);
        v19 = *v17;
        if ((int)v18 < *v17)
        {
          *(_DWORD *)(a1 + 56) = v18 + 1;
          v20 = *(void **)&v17[2 * v18 + 2];
          goto LABEL_89;
        }
        if (v19 == *(_DWORD *)(a1 + 60))
          goto LABEL_87;
LABEL_88:
        *v17 = v19 + 1;
        v20 = sub_1D4B15AF8(*(_QWORD *)(a1 + 48));
        v46 = *(_QWORD *)(a1 + 64);
        v47 = *(int *)(a1 + 56);
        *(_DWORD *)(a1 + 56) = v47 + 1;
        *(_QWORD *)(v46 + 8 * v47 + 8) = v20;
LABEL_89:
        v48 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v48 < 0)
        {
          v49 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v49 < 0)
            goto LABEL_139;
        }
        else
        {
          v49 = *v48;
          *(_QWORD *)a2 = v48 + 1;
        }
        v50 = sub_1D4BAFFA4(a2, v49);
        v40 = v50;
        if ((v50 & 0x8000000000000000) == 0 && sub_1D4B0D2F8((uint64_t)v20, (uint64_t *)a2))
          goto LABEL_115;
        goto LABEL_139;
      case 5u:
        if (v9 != 42)
          goto LABEL_10;
        v21 = *(int **)(a1 + 88);
        if (!v21)
        {
          v23 = *(_DWORD *)(a1 + 84);
LABEL_97:
          sub_1D4BB24FC(a1 + 72, v23 + 1);
          v21 = *(int **)(a1 + 88);
          v23 = *v21;
          goto LABEL_98;
        }
        v22 = *(int *)(a1 + 80);
        v23 = *v21;
        if ((int)v22 < *v21)
        {
          *(_DWORD *)(a1 + 80) = v22 + 1;
          v24 = *(_QWORD **)&v21[2 * v22 + 2];
          goto LABEL_99;
        }
        if (v23 == *(_DWORD *)(a1 + 84))
          goto LABEL_97;
LABEL_98:
        *v21 = v23 + 1;
        v24 = sub_1D4B15C08(*(_QWORD *)(a1 + 72));
        v51 = *(_QWORD *)(a1 + 88);
        v52 = *(int *)(a1 + 80);
        *(_DWORD *)(a1 + 80) = v52 + 1;
        *(_QWORD *)(v51 + 8 * v52 + 8) = v24;
LABEL_99:
        v53 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v53 < 0)
        {
          v54 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v54 < 0)
            goto LABEL_139;
        }
        else
        {
          v54 = *v53;
          *(_QWORD *)a2 = v53 + 1;
        }
        v55 = sub_1D4BAFFA4(a2, v54);
        v40 = v55;
        if ((v55 & 0x8000000000000000) == 0 && sub_1D4B0EDEC((uint64_t)v24, (uint64_t *)a2))
          goto LABEL_115;
        goto LABEL_139;
      case 6u:
        if (v9 != 48)
          goto LABEL_10;
        *(_DWORD *)(a1 + 16) |= 8u;
        v12 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 < *(_QWORD *)(a2 + 8) && ((char)*v12 & 0x80000000) == 0)
        {
          *(_QWORD *)(a1 + 144) = *v12;
          goto LABEL_57;
        }
        *(_QWORD *)(a1 + 144) = sub_1D4BB06F0(a2);
        if ((v38 & 1) == 0)
          goto LABEL_139;
        continue;
      case 7u:
        if (v9 != 58)
          goto LABEL_10;
        v29 = *(int **)(a1 + 112);
        if (!v29)
        {
          v31 = *(_DWORD *)(a1 + 108);
LABEL_107:
          sub_1D4BB24FC(a1 + 96, v31 + 1);
          v29 = *(int **)(a1 + 112);
          v31 = *v29;
          goto LABEL_108;
        }
        v30 = *(int *)(a1 + 104);
        v31 = *v29;
        if ((int)v30 < *v29)
        {
          *(_DWORD *)(a1 + 104) = v30 + 1;
          v32 = *(void **)&v29[2 * v30 + 2];
          goto LABEL_109;
        }
        if (v31 == *(_DWORD *)(a1 + 108))
          goto LABEL_107;
LABEL_108:
        *v29 = v31 + 1;
        v32 = sub_1D4B155A8(*(_QWORD *)(a1 + 96));
        v56 = *(_QWORD *)(a1 + 112);
        v57 = *(int *)(a1 + 104);
        *(_DWORD *)(a1 + 104) = v57 + 1;
        *(_QWORD *)(v56 + 8 * v57 + 8) = v32;
LABEL_109:
        v58 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v58 < 0)
        {
          v59 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v59 < 0)
            goto LABEL_139;
        }
        else
        {
          v59 = *v58;
          *(_QWORD *)a2 = v58 + 1;
        }
        v60 = sub_1D4BAFFA4(a2, v59);
        v40 = v60;
        if ((v60 & 0x8000000000000000) != 0 || !sub_1D4B079F4((uint64_t)v32, a2))
        {
LABEL_139:
          v69 = 0;
          goto LABEL_138;
        }
LABEL_115:
        v11 = sub_1D4BAFFD8(a2, v40);
        break;
      case 8u:
        if (v9 != 64)
          goto LABEL_10;
        *(_DWORD *)(a1 + 16) |= 0x10u;
        v12 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
        {
          v25 = 0;
        }
        else
        {
          v25 = *v12;
          if (((char)*v12 & 0x80000000) == 0)
          {
            *(_DWORD *)(a1 + 152) = v25;
            goto LABEL_57;
          }
        }
        v61 = sub_1D4BB08A4((uint64_t *)a2, v25);
        *(_DWORD *)(a1 + 152) = v61;
        if (v61 < 0)
          goto LABEL_139;
        continue;
      case 9u:
        if (v9 != 72)
          goto LABEL_10;
        *(_DWORD *)(a1 + 16) |= 0x20u;
        v12 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
        {
          v33 = 0;
        }
        else
        {
          v33 = *v12;
          if (((char)*v12 & 0x80000000) == 0)
          {
            *(_DWORD *)(a1 + 156) = v33;
LABEL_57:
            *(_QWORD *)a2 = v12 + 1;
            continue;
          }
        }
        v62 = sub_1D4BB08A4((uint64_t *)a2, v33);
        *(_DWORD *)(a1 + 156) = v62;
        if (v62 < 0)
          goto LABEL_139;
        continue;
      case 0xAu:
        if (v9 != 82)
          goto LABEL_10;
        *(_DWORD *)(a1 + 16) |= 1u;
        v26 = *(void **)(a1 + 120);
        if (!v26)
        {
          v26 = sub_1D4B15F38(0);
          *(_QWORD *)(a1 + 120) = v26;
        }
        v27 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v27 < 0)
        {
          v28 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v28 < 0)
            goto LABEL_139;
        }
        else
        {
          v28 = *v27;
          *(_QWORD *)a2 = v27 + 1;
        }
        v39 = sub_1D4BAFFA4(a2, v28);
        v40 = v39;
        if ((v39 & 0x8000000000000000) == 0 && sub_1D4B11BB8((uint64_t)v26, a2))
          goto LABEL_115;
        goto LABEL_139;
      case 0xBu:
        if (v9 != 88)
          goto LABEL_10;
        v34 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
        {
          LODWORD(v35) = 0;
        }
        else
        {
          LODWORD(v35) = *v34;
          if (((char)*v34 & 0x80000000) == 0)
          {
            *(_QWORD *)a2 = v34 + 1;
            goto LABEL_124;
          }
        }
        v35 = sub_1D4BB08A4((uint64_t *)a2, v35);
        if (v35 < 0)
          goto LABEL_139;
LABEL_124:
        if (v35 > 2)
        {
          if (v73 < 5)
          {
            sub_1D4BB10F8((uint64_t)&v71, 0x58u);
            v63 = v73;
          }
          else
          {
            *v72++ = 88;
            v63 = --v73;
          }
          if (v63 < 5)
          {
            sub_1D4BB10F8((uint64_t)&v71, v35);
          }
          else
          {
            v64 = (int)v72;
            if (v35 < 0x80)
            {
              LOBYTE(v66) = v35;
              v65 = v72;
            }
            else
            {
              v65 = v72;
              do
              {
                *v65++ = v35 | 0x80;
                v66 = v35 >> 7;
                v67 = v35 >> 14;
                LODWORD(v35) = v35 >> 7;
              }
              while (v67);
            }
            *v65 = v66;
            v68 = (_DWORD)v65 - v64 + 1;
            v72 += v68;
            v73 -= v68;
          }
        }
        else
        {
          *(_DWORD *)(a1 + 16) |= 0x40u;
          *(_DWORD *)(a1 + 160) = v35;
        }
        continue;
      default:
        goto LABEL_10;
    }
LABEL_12:
    if (!v11)
      goto LABEL_139;
  }
  v8 = 0;
LABEL_9:
  v10 = sub_1D4BB0BD8(a2, v8);
  v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
  if ((v9 & 0x100000000) != 0)
    goto LABEL_14;
LABEL_10:
  if ((_DWORD)v9)
  {
    v11 = sub_1D4BB3060(a2, v9, (uint64_t)&v71);
    goto LABEL_12;
  }
  v69 = 1;
LABEL_138:
  sub_1D4BB0EE0((uint64_t)&v71);
  sub_1D4B16458(&v75);
  return v69;
}

void sub_1D4B13314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15)
{
  sub_1D4BB0EE0((uint64_t)&a9);
  sub_1D4B16458(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B13340(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int i;
  int v7;
  int j;
  int v9;
  int k;
  int v11;
  int m;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;

  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 2) != 0)
    sub_1D4BB38E8(1, *(_QWORD *)(a1 + 128), a2);
  if ((v4 & 4) != 0)
    sub_1D4BB38E8(2, *(_QWORD *)(a1 + 136), a2);
  v5 = *(_DWORD *)(a1 + 32);
  if (v5)
  {
    for (i = 0; i != v5; ++i)
      sub_1D4BB4528(3, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i + 8), a2);
  }
  v7 = *(_DWORD *)(a1 + 56);
  if (v7)
  {
    for (j = 0; j != v7; ++j)
      sub_1D4BB4528(4, *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * j + 8), a2);
  }
  v9 = *(_DWORD *)(a1 + 80);
  if (v9)
  {
    for (k = 0; k != v9; ++k)
      sub_1D4BB4528(5, *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * k + 8), a2);
  }
  if ((v4 & 8) != 0)
    sub_1D4BB38E8(6, *(_QWORD *)(a1 + 144), a2);
  v11 = *(_DWORD *)(a1 + 104);
  if (v11)
  {
    for (m = 0; m != v11; ++m)
      sub_1D4BB4528(7, *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * m + 8), a2);
  }
  if ((v4 & 0x10) != 0)
  {
    sub_1D4BB37DC(8, *(_DWORD *)(a1 + 152), a2);
    if ((v4 & 0x20) == 0)
    {
LABEL_21:
      if ((v4 & 1) == 0)
        goto LABEL_22;
      goto LABEL_36;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_21;
  }
  sub_1D4BB37DC(9, *(_DWORD *)(a1 + 156), a2);
  if ((v4 & 1) == 0)
  {
LABEL_22:
    if ((v4 & 0x40) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_36:
  sub_1D4BB4528(10, *(_QWORD *)(a1 + 120), a2);
  if ((v4 & 0x40) != 0)
LABEL_23:
    sub_1D4BB36D0(11, *(_DWORD *)(a1 + 160), a2);
LABEL_24:
  v13 = *(_QWORD *)(a1 + 8);
  if ((v13 & 1) != 0)
    v14 = (char *)(v13 & 0xFFFFFFFFFFFFFFFELL);
  else
    v14 = (char *)&qword_1EFEC6AB8;
  if (v14[23] < 0)
    v14 = *(char **)v14;
  if ((v13 & 1) != 0)
    v15 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFFELL);
  else
    v15 = &qword_1EFEC6AB8;
  if (*((char *)v15 + 23) < 0)
    v16 = v15[1];
  else
    LODWORD(v16) = *((unsigned __int8 *)v15 + 23);
  return sub_1D4BB0EE4(a2, v14, v16);
}

uint64_t sub_1D4B1351C(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 1) != 0)
    v3 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  else
    v3 = &qword_1EFEC6AB8;
  if (*((char *)v3 + 23) < 0)
    v4 = v3[1];
  else
    v4 = *((unsigned __int8 *)v3 + 23);
  v5 = *(unsigned int *)(a1 + 32);
  v6 = v4 + v5;
  if ((_DWORD)v5)
  {
    v7 = 0;
    do
    {
      v8 = sub_1D4B0E988(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v7 + 8));
      v6 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6);
      ++v7;
    }
    while ((_DWORD)v5 != v7);
  }
  v9 = *(unsigned int *)(a1 + 56);
  v10 = v6 + v9;
  if ((_DWORD)v9)
  {
    v11 = 0;
    do
    {
      v12 = sub_1D4B0DD90(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v11 + 8));
      v10 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      ++v11;
    }
    while ((_DWORD)v9 != v11);
  }
  v13 = *(unsigned int *)(a1 + 80);
  v14 = v10 + v13;
  if ((_DWORD)v13)
  {
    v15 = 0;
    do
    {
      v16 = sub_1D4B0F064(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v15 + 8));
      v14 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6);
      ++v15;
    }
    while ((_DWORD)v13 != v15);
  }
  v17 = *(unsigned int *)(a1 + 104);
  v18 = v14 + v17;
  if ((_DWORD)v17)
  {
    v19 = 0;
    do
    {
      v20 = sub_1D4B0831C(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v19 + 8));
      v18 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6);
      ++v19;
    }
    while ((_DWORD)v17 != v19);
  }
  v21 = *(_DWORD *)(a1 + 16);
  if ((v21 & 0x7F) != 0)
  {
    if ((v21 & 1) != 0)
    {
      v26 = sub_1D4B12244(*(_QWORD *)(a1 + 120));
      v18 += v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 1;
      v21 = *(_DWORD *)(a1 + 16);
      if ((v21 & 2) == 0)
      {
LABEL_22:
        if ((v21 & 4) == 0)
          goto LABEL_23;
        goto LABEL_34;
      }
    }
    else if ((v21 & 2) == 0)
    {
      goto LABEL_22;
    }
    v18 += ((9 * (__clz(*(_QWORD *)(a1 + 128) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v21 & 4) == 0)
    {
LABEL_23:
      if ((v21 & 8) == 0)
        goto LABEL_24;
      goto LABEL_35;
    }
LABEL_34:
    v18 += ((9 * (__clz(*(_QWORD *)(a1 + 136) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v21 & 8) == 0)
    {
LABEL_24:
      if ((v21 & 0x10) == 0)
        goto LABEL_25;
      goto LABEL_36;
    }
LABEL_35:
    v18 += ((9 * (__clz(*(_QWORD *)(a1 + 144) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v21 & 0x10) == 0)
    {
LABEL_25:
      if ((v21 & 0x20) == 0)
        goto LABEL_26;
      goto LABEL_37;
    }
LABEL_36:
    v18 += ((9 * (__clz(*(_DWORD *)(a1 + 152) | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v21 & 0x20) == 0)
    {
LABEL_26:
      if ((v21 & 0x40) == 0)
        goto LABEL_31;
      goto LABEL_27;
    }
LABEL_37:
    v18 += ((9 * (__clz(*(_DWORD *)(a1 + 156) | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v21 & 0x40) == 0)
      goto LABEL_31;
LABEL_27:
    v22 = *(_DWORD *)(a1 + 160);
    v23 = ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if (v22 >= 0)
      v24 = v23;
    else
      v24 = 11;
    v18 += v24;
  }
LABEL_31:
  *(_DWORD *)(a1 + 20) = v18;
  return v18;
}

std::string *sub_1D4B137F4(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  std::string **v7;
  signed int v8;
  signed int *v9;
  unsigned int v10;
  uint64_t *v11;
  unint64_t **v12;
  signed int v13;
  signed int *v14;
  unsigned int v15;
  uint64_t *v16;
  std::string **v17;
  signed int v18;
  signed int *v19;
  unsigned int v20;
  uint64_t *v21;
  std::string **v22;
  signed int v23;
  signed int *v24;
  int v25;
  std::string *data;
  void *v27;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 32);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 40) + 8);
    v7 = (std::string **)sub_1D4BB23F8((uint64_t)&v3[1], *(_DWORD *)(a2 + 32));
    result = sub_1D4B17308(v3 + 1, v7, v6, v5, *(_DWORD *)v3[1].__r_.__value_.__r.__words[2] - LODWORD(v3[1].__r_.__value_.__r.__words[1]));
    v8 = LODWORD(v3[1].__r_.__value_.__r.__words[1]) + v5;
    LODWORD(v3[1].__r_.__value_.__r.__words[1]) = v8;
    v9 = (signed int *)v3[1].__r_.__value_.__r.__words[2];
    if (*v9 < v8)
      *v9 = v8;
  }
  v10 = *(_DWORD *)(a2 + 56);
  if (v10)
  {
    v11 = (uint64_t *)(*(_QWORD *)(a2 + 64) + 8);
    v12 = (unint64_t **)sub_1D4BB23F8((uint64_t)&v3[2], *(_DWORD *)(a2 + 56));
    result = (std::string *)sub_1D4B173C4((unint64_t *)&v3[2], v12, v11, v10, *(_DWORD *)v3[2].__r_.__value_.__r.__words[2]- LODWORD(v3[2].__r_.__value_.__r.__words[1]));
    v13 = LODWORD(v3[2].__r_.__value_.__r.__words[1]) + v10;
    LODWORD(v3[2].__r_.__value_.__r.__words[1]) = v13;
    v14 = (signed int *)v3[2].__r_.__value_.__r.__words[2];
    if (*v14 < v13)
      *v14 = v13;
  }
  v15 = *(_DWORD *)(a2 + 80);
  if (v15)
  {
    v16 = (uint64_t *)(*(_QWORD *)(a2 + 88) + 8);
    v17 = (std::string **)sub_1D4BB23F8((uint64_t)&v3[3], *(_DWORD *)(a2 + 80));
    result = sub_1D4B17480(v3 + 3, v17, v16, v15, *(_DWORD *)v3[3].__r_.__value_.__r.__words[2] - LODWORD(v3[3].__r_.__value_.__r.__words[1]));
    v18 = LODWORD(v3[3].__r_.__value_.__r.__words[1]) + v15;
    LODWORD(v3[3].__r_.__value_.__r.__words[1]) = v18;
    v19 = (signed int *)v3[3].__r_.__value_.__r.__words[2];
    if (*v19 < v18)
      *v19 = v18;
  }
  v20 = *(_DWORD *)(a2 + 104);
  if (v20)
  {
    v21 = (uint64_t *)(*(_QWORD *)(a2 + 112) + 8);
    v22 = (std::string **)sub_1D4BB23F8((uint64_t)&v3[4], *(_DWORD *)(a2 + 104));
    result = sub_1D4B16F5C(v3 + 4, v22, v21, v20, *(_DWORD *)v3[4].__r_.__value_.__r.__words[2] - LODWORD(v3[4].__r_.__value_.__r.__words[1]));
    v23 = LODWORD(v3[4].__r_.__value_.__r.__words[1]) + v20;
    LODWORD(v3[4].__r_.__value_.__r.__words[1]) = v23;
    v24 = (signed int *)v3[4].__r_.__value_.__r.__words[2];
    if (*v24 < v23)
      *v24 = v23;
  }
  v25 = *(_DWORD *)(a2 + 16);
  if ((v25 & 0x7F) != 0)
  {
    if ((v25 & 1) != 0)
    {
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
      data = (std::string *)v3[5].__r_.__value_.__l.__data_;
      if (!data)
      {
        data = (std::string *)sub_1D4B15F38(0);
        v3[5].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      }
      if (*(_QWORD *)(a2 + 120))
        v27 = *(void **)(a2 + 120);
      else
        v27 = &unk_1EFEC6498;
      result = sub_1D4B123BC(data, (uint64_t)v27);
      if ((v25 & 2) == 0)
      {
LABEL_18:
        if ((v25 & 4) == 0)
          goto LABEL_19;
        goto LABEL_33;
      }
    }
    else if ((v25 & 2) == 0)
    {
      goto LABEL_18;
    }
    v3[5].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 128);
    if ((v25 & 4) == 0)
    {
LABEL_19:
      if ((v25 & 8) == 0)
        goto LABEL_20;
      goto LABEL_34;
    }
LABEL_33:
    v3[5].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 136);
    if ((v25 & 8) == 0)
    {
LABEL_20:
      if ((v25 & 0x10) == 0)
        goto LABEL_21;
      goto LABEL_35;
    }
LABEL_34:
    v3[6].__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 144);
    if ((v25 & 0x10) == 0)
    {
LABEL_21:
      if ((v25 & 0x20) == 0)
        goto LABEL_22;
      goto LABEL_36;
    }
LABEL_35:
    LODWORD(v3[6].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 152);
    if ((v25 & 0x20) == 0)
    {
LABEL_22:
      if ((v25 & 0x40) == 0)
      {
LABEL_24:
        LODWORD(v3->__r_.__value_.__r.__words[2]) |= v25;
        return result;
      }
LABEL_23:
      LODWORD(v3[6].__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 160);
      goto LABEL_24;
    }
LABEL_36:
    HIDWORD(v3[6].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 156);
    if ((v25 & 0x40) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
  return result;
}

std::string *sub_1D4B13A7C(std::string *result, uint64_t a2)
{
  std::string *v3;

  if ((std::string *)a2 != result)
  {
    v3 = result;
    sub_1D4B129B4((uint64_t)result);
    return sub_1D4B137F4(v3, a2);
  }
  return result;
}

uint64_t sub_1D4B13AB4()
{
  return 1;
}

_QWORD *sub_1D4B13ABC@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.Footer");
}

uint64_t sub_1D4B13ACC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E9849A78;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  if (atomic_load(dword_1EFEC5BF0))
    sub_1D4BAFB3C(dword_1EFEC5BF0);
  *(_QWORD *)(a1 + 48) = &qword_1EFEC6AB8;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  return a1;
}

void sub_1D4B13B4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_1D4B04D28(v1 + 24);
  sub_1D4B16364(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B13B6C(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = off_1E9849A78;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (unint64_t *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    sub_1D4B16C88((unsigned int *)(a1 + 24), v5);
    v6 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 24) += *(_DWORD *)(a2 + 24);
    memcpy((void *)(v6 + 8), (const void *)(*(_QWORD *)(a2 + 32) + 8), 4 * *(int *)(a2 + 24));
  }
  v7 = *(_QWORD *)(a2 + 8);
  if ((v7 & 1) != 0)
    sub_1D4B16764(v4, v7 & 0xFFFFFFFFFFFFFFFELL);
  *(_QWORD *)(a1 + 48) = &qword_1EFEC6AB8;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v8 = *(uint64_t **)(a2 + 48);
    if (v8 != &qword_1EFEC6AB8)
      sub_1D4B164E8((_QWORD *)(a1 + 48), (uint64_t)v8);
  }
  v9 = *(_OWORD *)(a2 + 56);
  v10 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v10;
  *(_OWORD *)(a1 + 56) = v9;
  return a1;
}

void sub_1D4B13C54(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B13C7C(uint64_t a1)
{
  _QWORD *v2;

  *(_QWORD *)a1 = off_1E9849A78;
  sub_1D4B13CD4(a1);
  if (*(int *)(a1 + 28) >= 1)
  {
    v2 = *(_QWORD **)(a1 + 32);
    if (v2)
    {
      if (!*v2)
        operator delete(v2);
    }
  }
  sub_1D4B16364((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1D4B13CD4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 48);
  if ((uint64_t *)v1 != &qword_1EFEC6AB8 && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete((void *)v1);
  }
}

void sub_1D4B13D28(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_1D4B13C7C(a1);
  operator delete(v1);
}

void sub_1D4B13D3C(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  *(_DWORD *)(a1 + 24) = 0;
  v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 48);
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  if ((v1 & 0x7E) != 0)
  {
    *(_QWORD *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  v4 = *(_BYTE *)(a1 + 8);
  v3 = a1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if ((v4 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v3);
}

uint64_t sub_1D4B13D98(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  unsigned __int8 *v7;
  unint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  int v11;
  char *v12;
  std::string *v14;
  char v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  char v21;
  char v22;
  char v23;
  char v24;
  int v25;
  char *v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  _BYTE *v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  _BYTE *v42;
  int v43;
  _QWORD v44[2];
  uint64_t *v45;
  __int128 v46;
  uint64_t v47;

  v4 = *(_QWORD *)(a1 + 8);
  v45 = (uint64_t *)(a1 + 8);
  v46 = 0uLL;
  v47 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v47 = *(_QWORD *)(v5 + 16);
    v46 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v44, (uint64_t)&v46);
  sub_1D4BB0DD8((uint64_t)&v41, (uint64_t)v44, 0);
  while (1)
  {
LABEL_4:
    v7 = (unsigned __int8 *)*a2;
    v8 = a2[1];
    if (*a2 >= v8)
    {
      v10 = 0;
      goto LABEL_72;
    }
    v9 = v7 + 1;
    v10 = *v7;
    if ((char)*v7 >= 1)
    {
      *a2 = (uint64_t)v9;
      v10 |= 0x100000000uLL;
      if ((v10 & 0x100000000) != 0)
        goto LABEL_11;
      goto LABEL_73;
    }
    if ((unint64_t)v9 < v8)
    {
      v11 = *v9;
      if ((v10 & ~v11) >= 0x80)
        break;
    }
LABEL_72:
    v31 = sub_1D4BB0BD8((uint64_t)a2, v10);
    v10 = v31 | ((unint64_t)(v31 - 1 < 0xFA05) << 32);
    if ((v10 & 0x100000000) != 0)
      goto LABEL_11;
LABEL_73:
    if (!(_DWORD)v10)
    {
      v39 = 1;
      goto LABEL_96;
    }
    v15 = sub_1D4BB3060((uint64_t)a2, v10, (uint64_t)&v41);
LABEL_75:
    if ((v15 & 1) == 0)
      goto LABEL_94;
  }
  *a2 = (uint64_t)(v7 + 2);
  LODWORD(v10) = v10 + (v11 << 7) - 128;
LABEL_11:
  switch(v10 >> 3)
  {
    case 1u:
      if (v10 != 8)
        goto LABEL_73;
      *(_DWORD *)(a1 + 16) |= 2u;
      v12 = (char *)*a2;
      if (*a2 < (unint64_t)a2[1] && (*v12 & 0x80000000) == 0)
      {
        *(_QWORD *)(a1 + 56) = *v12;
LABEL_49:
        *a2 = (uint64_t)(v12 + 1);
        goto LABEL_4;
      }
      *(_QWORD *)(a1 + 56) = sub_1D4BB06F0((uint64_t)a2);
      if ((v21 & 1) != 0)
        goto LABEL_4;
      goto LABEL_94;
    case 2u:
      if (v10 != 16)
        goto LABEL_73;
      v16 = (char *)*a2;
      if (*a2 >= (unint64_t)a2[1])
      {
        LODWORD(v17) = 0;
      }
      else
      {
        LODWORD(v17) = *v16;
        if ((*v16 & 0x80000000) == 0)
        {
          *a2 = (uint64_t)(v16 + 1);
          goto LABEL_79;
        }
      }
      v17 = sub_1D4BB08A4(a2, v17);
      if (v17 < 0)
        goto LABEL_94;
LABEL_79:
      if (v17 > 5)
      {
        if (v43 < 5)
        {
          sub_1D4BB10F8((uint64_t)&v41, 0x10u);
          v32 = v43;
        }
        else
        {
          *v42++ = 16;
          v32 = --v43;
        }
        if (v32 < 5)
        {
          sub_1D4BB10F8((uint64_t)&v41, v17);
        }
        else
        {
          v33 = (int)v42;
          if (v17 < 0x80)
          {
            LOBYTE(v35) = v17;
            v34 = v42;
          }
          else
          {
            v34 = v42;
            do
            {
              *v34++ = v17 | 0x80;
              v35 = v17 >> 7;
              v36 = v17 >> 14;
              LODWORD(v17) = v17 >> 7;
            }
            while (v36);
          }
          *v34 = v35;
          v37 = (_DWORD)v34 - v33 + 1;
          v42 += v37;
          v43 -= v37;
        }
      }
      else
      {
        *(_DWORD *)(a1 + 16) |= 8u;
        *(_DWORD *)(a1 + 72) = v17;
      }
      goto LABEL_4;
    case 3u:
      if (v10 != 24)
        goto LABEL_73;
      *(_DWORD *)(a1 + 16) |= 4u;
      v12 = (char *)*a2;
      if (*a2 < (unint64_t)a2[1] && (*v12 & 0x80000000) == 0)
      {
        *(_QWORD *)(a1 + 64) = *v12;
        goto LABEL_49;
      }
      *(_QWORD *)(a1 + 64) = sub_1D4BB06F0((uint64_t)a2);
      if ((v22 & 1) != 0)
        goto LABEL_4;
LABEL_94:
      v39 = 0;
LABEL_96:
      sub_1D4BB0EE0((uint64_t)&v41);
      sub_1D4B16458(&v45);
      return v39;
    case 4u:
      if (v10 == 32)
      {
        v15 = sub_1D4B0D968(1, 0x22u, a2, (signed int *)(a1 + 24));
        goto LABEL_75;
      }
      if (v10 != 34)
        goto LABEL_73;
      v18 = (char *)*a2;
      if (*a2 < (unint64_t)a2[1] && (*v18 & 0x80000000) == 0)
      {
        v19 = *v18;
        *a2 = (uint64_t)(v18 + 1);
        goto LABEL_60;
      }
      v19 = sub_1D4BB098C((unsigned __int8 **)a2);
      if (v19 < 0)
        goto LABEL_94;
LABEL_60:
      v25 = sub_1D4BAFEE4((uint64_t)a2, v19);
      break;
    case 5u:
      if (v10 != 40)
        goto LABEL_73;
      *(_DWORD *)(a1 + 16) |= 0x20u;
      v12 = (char *)*a2;
      if (*a2 < (unint64_t)a2[1] && (*v12 & 0x80000000) == 0)
      {
        *(_QWORD *)(a1 + 80) = *v12;
        goto LABEL_49;
      }
      *(_QWORD *)(a1 + 80) = sub_1D4BB06F0((uint64_t)a2);
      if ((v23 & 1) != 0)
        goto LABEL_4;
      goto LABEL_94;
    case 6u:
      if (v10 != 48)
        goto LABEL_73;
      *(_DWORD *)(a1 + 16) |= 0x10u;
      v12 = (char *)*a2;
      if (*a2 >= (unint64_t)a2[1])
      {
        v20 = 0;
      }
      else
      {
        v20 = *v12;
        if ((*v12 & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 76) = v20;
          goto LABEL_49;
        }
      }
      v38 = sub_1D4BB08A4(a2, v20);
      *(_DWORD *)(a1 + 76) = v38;
      if (v38 < 0)
        goto LABEL_94;
      goto LABEL_4;
    case 7u:
      if (v10 != 56)
        goto LABEL_73;
      *(_DWORD *)(a1 + 16) |= 0x40u;
      v12 = (char *)*a2;
      if (*a2 < (unint64_t)a2[1] && (*v12 & 0x80000000) == 0)
      {
        *(_QWORD *)(a1 + 88) = *v12;
        goto LABEL_49;
      }
      *(_QWORD *)(a1 + 88) = sub_1D4BB06F0((uint64_t)a2);
      if ((v24 & 1) != 0)
        goto LABEL_4;
      goto LABEL_94;
    default:
      if (v10 >> 3 != 8000 || v10 != 2)
        goto LABEL_73;
      *(_DWORD *)(a1 + 16) |= 1u;
      v14 = *(std::string **)(a1 + 48);
      if (v14 == (std::string *)&qword_1EFEC6AB8)
      {
        sub_1D4B164E8((_QWORD *)(a1 + 48), (uint64_t)&qword_1EFEC6AB8);
        v14 = *(std::string **)(a1 + 48);
      }
      v15 = sub_1D4BB4654(a2, v14);
      goto LABEL_75;
  }
  while (2)
  {
    if ((int)sub_1D4BB003C(a2) < 1)
    {
      sub_1D4BAFF5C((uint64_t)a2, v25);
      goto LABEL_4;
    }
    v26 = (char *)*a2;
    if (*a2 >= (unint64_t)a2[1])
    {
      v27 = 0;
    }
    else
    {
      v27 = *v26;
      if ((*v26 & 0x80000000) == 0)
      {
        *a2 = (uint64_t)(v26 + 1);
LABEL_67:
        v29 = *(_DWORD *)(a1 + 24);
        if (v29 == *(_DWORD *)(a1 + 28))
        {
          sub_1D4B16C88((unsigned int *)(a1 + 24), v29 + 1);
          v29 = *(_DWORD *)(a1 + 24);
        }
        v30 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 24) = v29 + 1;
        *(_DWORD *)(v30 + 4 * v29 + 8) = v27;
        continue;
      }
    }
    break;
  }
  v28 = sub_1D4BB08A4(a2, v27);
  v27 = v28;
  if (v28 < 0)
    goto LABEL_94;
  goto LABEL_67;
}

void sub_1D4B1430C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15)
{
  sub_1D4BB0EE0((uint64_t)&a9);
  sub_1D4B16458(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B1433C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t i;
  unsigned int v14;
  uint64_t v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;

  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 2) == 0)
  {
    if ((v4 & 8) == 0)
      goto LABEL_3;
LABEL_9:
    sub_1D4BB36D0(2, *(_DWORD *)(a1 + 72), a2);
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  sub_1D4BB38E8(1, *(_QWORD *)(a1 + 56), a2);
  if ((v4 & 8) != 0)
    goto LABEL_9;
LABEL_3:
  if ((v4 & 4) != 0)
LABEL_4:
    sub_1D4BB38E8(3, *(_QWORD *)(a1 + 64), a2);
LABEL_5:
  if (*(int *)(a1 + 24) >= 1)
  {
    if (*(int *)(a2 + 16) < 5)
    {
      sub_1D4BB10F8(a2, 0x22u);
      v5 = *(_DWORD *)(a2 + 16);
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(a2 + 8))++ = 34;
      v5 = *(_DWORD *)(a2 + 16) - 1;
      *(_DWORD *)(a2 + 16) = v5;
    }
    v6 = *(_DWORD *)(a1 + 40);
    if (v5 < 5)
    {
      sub_1D4BB10F8(a2, v6);
    }
    else
    {
      v7 = *(_QWORD *)(a2 + 8);
      if (v6 < 0x80)
      {
        v9 = *(_DWORD *)(a1 + 40);
        v8 = *(_BYTE **)(a2 + 8);
      }
      else
      {
        v8 = *(_BYTE **)(a2 + 8);
        do
        {
          *v8++ = v6 | 0x80;
          v9 = v6 >> 7;
          v10 = v6 >> 14;
          v6 >>= 7;
        }
        while (v10);
      }
      *v8 = v9;
      v11 = (_DWORD)v8 - v7 + 1;
      *(_QWORD *)(a2 + 8) += v11;
      *(_DWORD *)(a2 + 16) -= v11;
    }
    v12 = *(unsigned int *)(a1 + 24);
    if ((int)v12 >= 1)
    {
      for (i = 0; i != v12; ++i)
      {
        v14 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * i + 8);
        if (*(int *)(a2 + 16) < 5)
        {
          sub_1D4BB10F8(a2, v14);
        }
        else
        {
          v15 = *(_QWORD *)(a2 + 8);
          if (v14 < 0x80)
          {
            v17 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * i + 8);
            v16 = *(_BYTE **)(a2 + 8);
          }
          else
          {
            v16 = *(_BYTE **)(a2 + 8);
            do
            {
              *v16++ = v14 | 0x80;
              v17 = v14 >> 7;
              v18 = v14 >> 14;
              v14 >>= 7;
            }
            while (v18);
          }
          *v16 = v17;
          v19 = (_DWORD)v16 - v15 + 1;
          *(_QWORD *)(a2 + 8) += v19;
          *(_DWORD *)(a2 + 16) -= v19;
        }
      }
    }
  }
  if ((v4 & 0x20) != 0)
  {
    sub_1D4BB38E8(5, *(_QWORD *)(a1 + 80), a2);
    if ((v4 & 0x10) == 0)
    {
LABEL_33:
      if ((v4 & 0x40) == 0)
        goto LABEL_34;
      goto LABEL_48;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_33;
  }
  sub_1D4BB37DC(6, *(_DWORD *)(a1 + 76), a2);
  if ((v4 & 0x40) == 0)
  {
LABEL_34:
    if ((v4 & 1) == 0)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_48:
  sub_1D4BB38E8(7, *(_QWORD *)(a1 + 88), a2);
  if ((v4 & 1) != 0)
LABEL_35:
    sub_1D4BB3FE4(8000, *(_QWORD *)(a1 + 48), a2);
LABEL_36:
  v20 = *(_QWORD *)(a1 + 8);
  if ((v20 & 1) != 0)
    v21 = (char *)(v20 & 0xFFFFFFFFFFFFFFFELL);
  else
    v21 = (char *)&qword_1EFEC6AB8;
  if (v21[23] < 0)
    v21 = *(char **)v21;
  if ((v20 & 1) != 0)
    v22 = (uint64_t *)(v20 & 0xFFFFFFFFFFFFFFFELL);
  else
    v22 = &qword_1EFEC6AB8;
  if (*((char *)v22 + 23) < 0)
    v23 = v22[1];
  else
    LODWORD(v23) = *((unsigned __int8 *)v22 + 23);
  return sub_1D4BB0EE4(a2, v21, v23);
}

uint64_t sub_1D4B145BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 1) != 0)
    v3 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  else
    v3 = &qword_1EFEC6AB8;
  if (*((char *)v3 + 23) < 0)
    v4 = v3[1];
  else
    v4 = *((unsigned __int8 *)v3 + 23);
  v5 = sub_1D4BB472C((unsigned int *)(a1 + 24));
  v6 = 11;
  v7 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v5 >= 0)
    v6 = v7;
  v8 = v6 + v4;
  if (v5)
    v9 = v5;
  else
    v9 = 0;
  if (!v5)
    v8 = v4;
  *(_DWORD *)(a1 + 40) = v9;
  result = v8 + v5;
  v11 = *(_DWORD *)(a1 + 16);
  if ((v11 & 0x7F) == 0)
    goto LABEL_23;
  if ((v11 & 1) != 0)
  {
    v12 = *(_QWORD *)(a1 + 48);
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v14 = v13;
    result += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 3;
    if ((v11 & 2) == 0)
    {
LABEL_17:
      if ((v11 & 4) == 0)
        goto LABEL_18;
      goto LABEL_28;
    }
  }
  else if ((v11 & 2) == 0)
  {
    goto LABEL_17;
  }
  result += ((9 * (__clz(*(_QWORD *)(a1 + 56) | 1) ^ 0x3F) + 73) >> 6) + 1;
  if ((v11 & 4) == 0)
  {
LABEL_18:
    if ((v11 & 8) == 0)
      goto LABEL_19;
    goto LABEL_29;
  }
LABEL_28:
  result += ((9 * (__clz(*(_QWORD *)(a1 + 64) | 1) ^ 0x3F) + 73) >> 6) + 1;
  if ((v11 & 8) == 0)
  {
LABEL_19:
    if ((v11 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_33;
  }
LABEL_29:
  v15 = *(_DWORD *)(a1 + 72);
  v16 = ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if (v15 >= 0)
    v17 = v16;
  else
    v17 = 11;
  result += v17;
  if ((v11 & 0x10) == 0)
  {
LABEL_20:
    if ((v11 & 0x20) == 0)
      goto LABEL_21;
LABEL_34:
    result += ((9 * (__clz(*(_QWORD *)(a1 + 80) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v11 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
LABEL_33:
  result += ((9 * (__clz(*(_DWORD *)(a1 + 76) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v11 & 0x20) != 0)
    goto LABEL_34;
LABEL_21:
  if ((v11 & 0x40) != 0)
LABEL_22:
    result += ((9 * (__clz(*(_QWORD *)(a1 + 88) | 1) ^ 0x3F) + 73) >> 6) + 1;
LABEL_23:
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

_QWORD *sub_1D4B147A8(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  std::string *v9;
  const std::string *v10;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(result + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 24);
  if (v5)
  {
    v6 = *((int *)v3 + 6);
    sub_1D4B16C88((unsigned int *)v3 + 6, v6 + v5);
    v7 = v3[4];
    *((_DWORD *)v3 + 6) += *(_DWORD *)(a2 + 24);
    result = memcpy((void *)(v7 + 4 * v6 + 8), (const void *)(*(_QWORD *)(a2 + 32) + 8), 4 * *(int *)(a2 + 24));
  }
  v8 = *(_DWORD *)(a2 + 16);
  if ((v8 & 0x7F) != 0)
  {
    if ((v8 & 1) != 0)
    {
      result = v3 + 6;
      v9 = (std::string *)v3[6];
      *((_DWORD *)v3 + 4) |= 1u;
      v10 = *(const std::string **)(a2 + 48);
      if (v9 != v10)
      {
        if (v9 == (std::string *)&qword_1EFEC6AB8)
        {
          result = sub_1D4B164E8(result, (uint64_t)v10);
          if ((v8 & 2) == 0)
          {
LABEL_11:
            if ((v8 & 4) == 0)
              goto LABEL_12;
            goto LABEL_21;
          }
LABEL_20:
          v3[7] = *(_QWORD *)(a2 + 56);
          if ((v8 & 4) == 0)
          {
LABEL_12:
            if ((v8 & 8) == 0)
              goto LABEL_13;
            goto LABEL_22;
          }
LABEL_21:
          v3[8] = *(_QWORD *)(a2 + 64);
          if ((v8 & 8) == 0)
          {
LABEL_13:
            if ((v8 & 0x10) == 0)
              goto LABEL_14;
            goto LABEL_23;
          }
LABEL_22:
          *((_DWORD *)v3 + 18) = *(_DWORD *)(a2 + 72);
          if ((v8 & 0x10) == 0)
          {
LABEL_14:
            if ((v8 & 0x20) == 0)
              goto LABEL_15;
            goto LABEL_24;
          }
LABEL_23:
          *((_DWORD *)v3 + 19) = *(_DWORD *)(a2 + 76);
          if ((v8 & 0x20) == 0)
          {
LABEL_15:
            if ((v8 & 0x40) == 0)
            {
LABEL_17:
              *((_DWORD *)v3 + 4) |= v8;
              return result;
            }
LABEL_16:
            v3[11] = *(_QWORD *)(a2 + 88);
            goto LABEL_17;
          }
LABEL_24:
          v3[10] = *(_QWORD *)(a2 + 80);
          if ((v8 & 0x40) == 0)
            goto LABEL_17;
          goto LABEL_16;
        }
        result = std::string::operator=(v9, v10);
      }
    }
    if ((v8 & 2) == 0)
      goto LABEL_11;
    goto LABEL_20;
  }
  return result;
}

_QWORD *sub_1D4B148EC(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;

  if ((_QWORD *)a2 != result)
  {
    v3 = result;
    sub_1D4B13D3C((uint64_t)result);
    return sub_1D4B147A8(v3, a2);
  }
  return result;
}

uint64_t sub_1D4B14924()
{
  return 1;
}

_QWORD *sub_1D4B1492C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.PostScript");
}

uint64_t sub_1D4B1493C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E984AB58;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (atomic_load(dword_1EFEC5A50))
    sub_1D4BAFB3C(dword_1EFEC5A50);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return a1;
}

void sub_1D4B149A0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1D4B16364(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B149B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E984AB58;
  if ((_UNKNOWN *)a1 != &unk_1EFEC6A80)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  sub_1D4B16364((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1D4B14A28(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_1D4B149B8(a1);
  operator delete(v1);
}

void sub_1D4B14A3C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  char v4;

  v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & 3) != 0)
  {
    if ((v2 & 1) != 0)
      sub_1D4B13D3C(*(_QWORD *)(a1 + 24));
    if ((v2 & 2) != 0)
      sub_1D4B129B4(*(_QWORD *)(a1 + 32));
  }
  if ((v2 & 0xC) != 0)
  {
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
  }
  v4 = *(_BYTE *)(a1 + 8);
  v3 = a1 + 8;
  *(_DWORD *)(v3 + 8) = 0;
  if ((v4 & 1) != 0)
    sub_1D4B167AC((unint64_t *)v3);
}

uint64_t sub_1D4B14AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  void *v11;
  char *v12;
  int v13;
  void *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _QWORD *v19;
  BOOL v20;
  char v21;
  char v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE v28[32];
  _QWORD v29[2];
  uint64_t *v30;
  __int128 v31;
  uint64_t v32;

  v4 = *(_QWORD *)(a1 + 8);
  v30 = (uint64_t *)(a1 + 8);
  v31 = 0uLL;
  v32 = 0;
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(_OWORD *)v5;
    v32 = *(_QWORD *)(v5 + 16);
    v31 = v6;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
  }
  sub_1D4BB1484(v29, (uint64_t)&v31);
  sub_1D4BB0DD8((uint64_t)v28, (uint64_t)v29, 0);
  while (1)
  {
    v7 = *(unsigned __int8 **)a2;
    if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
      break;
    v8 = *v7;
    if ((char)*v7 < 1)
      goto LABEL_9;
    *(_QWORD *)a2 = v7 + 1;
    v9 = v8 | 0x100000000;
    if ((v9 & 0x100000000) == 0)
      goto LABEL_32;
LABEL_10:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_32;
        *(_DWORD *)(a1 + 16) |= 1u;
        v11 = *(void **)(a1 + 24);
        if (!v11)
        {
          v11 = sub_1D4B16048(0);
          *(_QWORD *)(a1 + 24) = v11;
        }
        v12 = *(char **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || *v12 < 0)
        {
          v13 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v13 < 0)
            goto LABEL_50;
        }
        else
        {
          v13 = *v12;
          *(_QWORD *)a2 = v12 + 1;
        }
        v23 = sub_1D4BAFFA4(a2, v13);
        v24 = v23;
        if ((v23 & 0x8000000000000000) == 0 && sub_1D4B13D98((uint64_t)v11, (uint64_t *)a2))
          goto LABEL_43;
        goto LABEL_50;
      case 2u:
        if (v9 != 18)
          goto LABEL_32;
        *(_DWORD *)(a1 + 16) |= 2u;
        v14 = *(void **)(a1 + 32);
        if (!v14)
        {
          v14 = sub_1D4B15FC0(0);
          *(_QWORD *)(a1 + 32) = v14;
        }
        v15 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v15 < 0)
        {
          v16 = sub_1D4BB098C((unsigned __int8 **)a2);
          if (v16 < 0)
            goto LABEL_50;
        }
        else
        {
          v16 = *v15;
          *(_QWORD *)a2 = v15 + 1;
        }
        v25 = sub_1D4BAFFA4(a2, v16);
        v24 = v25;
        if ((v25 & 0x8000000000000000) != 0 || !sub_1D4B12ABC((uint64_t)v14, a2))
        {
LABEL_50:
          v26 = 0;
          goto LABEL_49;
        }
LABEL_43:
        v20 = sub_1D4BAFFD8(a2, v24);
        break;
      case 3u:
        if (v9 != 24)
          goto LABEL_32;
        *(_DWORD *)(a1 + 16) |= 4u;
        v17 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 < *(_QWORD *)(a2 + 8) && ((char)*v17 & 0x80000000) == 0)
        {
          v18 = *v17;
          v19 = (_QWORD *)(a1 + 40);
          goto LABEL_31;
        }
        *(_QWORD *)(a1 + 40) = sub_1D4BB06F0(a2);
        if ((v21 & 1) == 0)
          goto LABEL_50;
        continue;
      case 4u:
        if (v9 != 32)
          goto LABEL_32;
        *(_DWORD *)(a1 + 16) |= 8u;
        v17 = *(unsigned __int8 **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (char)*v17 < 0)
        {
          *(_QWORD *)(a1 + 48) = sub_1D4BB06F0(a2);
          if ((v22 & 1) == 0)
            goto LABEL_50;
        }
        else
        {
          v18 = *v17;
          v19 = (_QWORD *)(a1 + 48);
LABEL_31:
          *v19 = v18;
          *(_QWORD *)a2 = v17 + 1;
        }
        continue;
      default:
        goto LABEL_32;
    }
LABEL_34:
    if (!v20)
      goto LABEL_50;
  }
  v8 = 0;
LABEL_9:
  v10 = sub_1D4BB0BD8(a2, v8);
  v9 = v10 | ((unint64_t)(v10 - 1 < 0x7F) << 32);
  if ((v9 & 0x100000000) != 0)
    goto LABEL_10;
LABEL_32:
  if ((_DWORD)v9)
  {
    v20 = sub_1D4BB3060(a2, v9, (uint64_t)v28);
    goto LABEL_34;
  }
  v26 = 1;
LABEL_49:
  sub_1D4BB0EE0((uint64_t)v28);
  sub_1D4B16458(&v30);
  return v26;
}

void sub_1D4B14DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1D4B16458((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B14DE4(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(_DWORD *)(a1 + 16);
  if ((v4 & 1) != 0)
  {
    sub_1D4BB4528(1, *(_QWORD *)(a1 + 24), a2);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  sub_1D4BB4528(2, *(_QWORD *)(a1 + 32), a2);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_18:
  sub_1D4BB38E8(3, *(_QWORD *)(a1 + 40), a2);
  if ((v4 & 8) != 0)
LABEL_5:
    sub_1D4BB38E8(4, *(_QWORD *)(a1 + 48), a2);
LABEL_6:
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 1) != 0)
    v6 = (char *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v6 = (char *)&qword_1EFEC6AB8;
  if (v6[23] < 0)
    v6 = *(char **)v6;
  if ((v5 & 1) != 0)
    v7 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFFELL);
  else
    v7 = &qword_1EFEC6AB8;
  if (*((char *)v7 + 23) < 0)
    v8 = v7[1];
  else
    LODWORD(v8) = *((unsigned __int8 *)v7 + 23);
  return sub_1D4BB0EE4(a2, v6, v8);
}

uint64_t sub_1D4B14EBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 1) != 0)
    v3 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  else
    v3 = &qword_1EFEC6AB8;
  if (*((char *)v3 + 23) < 0)
    v4 = v3[1];
  else
    v4 = *((unsigned __int8 *)v3 + 23);
  v5 = *(_DWORD *)(a1 + 16);
  if ((v5 & 0xF) == 0)
    goto LABEL_13;
  if ((v5 & 1) != 0)
  {
    v7 = sub_1D4B145BC(*(_QWORD *)(a1 + 24));
    v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v5 = *(_DWORD *)(a1 + 16);
    if ((v5 & 2) == 0)
    {
LABEL_10:
      if ((v5 & 4) == 0)
        goto LABEL_11;
LABEL_16:
      v4 += ((9 * (__clz(*(_QWORD *)(a1 + 40) | 1) ^ 0x3F) + 73) >> 6) + 1;
      if ((v5 & 8) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_10;
  }
  v8 = sub_1D4B1351C(*(_QWORD *)(a1 + 32));
  v4 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v5 = *(_DWORD *)(a1 + 16);
  if ((v5 & 4) != 0)
    goto LABEL_16;
LABEL_11:
  if ((v5 & 8) != 0)
LABEL_12:
    v4 += ((9 * (__clz(*(_QWORD *)(a1 + 48) | 1) ^ 0x3F) + 73) >> 6) + 1;
LABEL_13:
  *(_DWORD *)(a1 + 20) = v4;
  return v4;
}

std::string *sub_1D4B14FDC(std::string *result, uint64_t a2)
{
  std::string *v3;
  uint64_t v4;
  int v5;
  _QWORD *data;
  void *v7;
  std::string *size;
  void *v9;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
    result = sub_1D4B16764(&result->__r_.__value_.__l.__size_, v4 & 0xFFFFFFFFFFFFFFFELL);
  v5 = *(_DWORD *)(a2 + 16);
  if ((v5 & 0xF) != 0)
  {
    if ((v5 & 1) != 0)
    {
      LODWORD(v3->__r_.__value_.__r.__words[2]) |= 1u;
      data = v3[1].__r_.__value_.__l.__data_;
      if (!data)
      {
        data = sub_1D4B16048(0);
        v3[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      }
      if (*(_QWORD *)(a2 + 24))
        v7 = *(void **)(a2 + 24);
      else
        v7 = &unk_1EFEC6500;
      result = (std::string *)sub_1D4B147A8(data, (uint64_t)v7);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_7;
        goto LABEL_23;
      }
    }
    else if ((v5 & 2) == 0)
    {
      goto LABEL_6;
    }
    LODWORD(v3->__r_.__value_.__r.__words[2]) |= 2u;
    size = (std::string *)v3[1].__r_.__value_.__l.__size_;
    if (!size)
    {
      size = (std::string *)sub_1D4B15FC0(0);
      v3[1].__r_.__value_.__l.__size_ = (std::string::size_type)size;
    }
    if (*(_QWORD *)(a2 + 32))
      v9 = *(void **)(a2 + 32);
    else
      v9 = &unk_1EFEC6348;
    result = sub_1D4B137F4(size, (uint64_t)v9);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
      {
LABEL_9:
        LODWORD(v3->__r_.__value_.__r.__words[2]) |= v5;
        return result;
      }
LABEL_8:
      v3[2].__r_.__value_.__r.__words[0] = *(_QWORD *)(a2 + 48);
      goto LABEL_9;
    }
LABEL_23:
    v3[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
    if ((v5 & 8) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_1D4B150C8()
{
  return 1;
}

_QWORD *sub_1D4B150D0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "orc.proto.FileTail");
}

_QWORD *sub_1D4B150E0(uint64_t a1)
{
  _QWORD *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846DF8, 48);
    v2 = sub_1D4BACF80(a1, 0x30uLL, (uint64_t)sub_1D4B1752C);
    sub_1D4B0367C(v2);
  }
  else
  {
    v2 = operator new(0x30uLL);
    sub_1D4B0367C(v2);
  }
  return v2;
}

void sub_1D4B15154(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B15168(uint64_t a1)
{
  _QWORD *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846D68, 48);
    v2 = sub_1D4BACF80(a1, 0x30uLL, (uint64_t)sub_1D4B17538);
    sub_1D4B03C80(v2);
  }
  else
  {
    v2 = operator new(0x30uLL);
    sub_1D4B03C80(v2);
  }
  return v2;
}

void sub_1D4B151DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B151F0(uint64_t a1)
{
  _QWORD *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846D80, 64);
    v2 = sub_1D4BACF80(a1, 0x40uLL, (uint64_t)sub_1D4B17544);
    sub_1D4B04210(v2);
  }
  else
  {
    v2 = operator new(0x40uLL);
    sub_1D4B04210(v2);
  }
  return v2;
}

void sub_1D4B15264(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B15278(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846D38, 48);
    v2 = sub_1D4BACF80(a1, 0x30uLL, (uint64_t)sub_1D4B17550);
    sub_1D4B04CA8((uint64_t)v2);
  }
  else
  {
    v2 = operator new(0x30uLL);
    sub_1D4B04CA8((uint64_t)v2);
  }
  return v2;
}

void sub_1D4B152EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B15300(uint64_t a1)
{
  _QWORD *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846DC8, 48);
    v2 = sub_1D4BACF80(a1, 0x30uLL, (uint64_t)sub_1D4B1755C);
    sub_1D4B05578(v2);
  }
  else
  {
    v2 = operator new(0x30uLL);
    sub_1D4B05578(v2);
  }
  return v2;
}

void sub_1D4B15374(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B15388(uint64_t a1)
{
  _QWORD *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846CF0, 32);
    v2 = sub_1D4BACF80(a1, 0x20uLL, (uint64_t)sub_1D4B17568);
    sub_1D4B05DDC(v2);
  }
  else
  {
    v2 = operator new(0x20uLL);
    sub_1D4B05DDC(v2);
  }
  return v2;
}

void sub_1D4B153FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B15410(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846E28, 64);
    v2 = sub_1D4BACF80(a1, 0x40uLL, (uint64_t)sub_1D4B17574);
    sub_1D4B06318((uint64_t)v2);
  }
  else
  {
    v2 = operator new(0x40uLL);
    sub_1D4B06318((uint64_t)v2);
  }
  return v2;
}

void sub_1D4B15484(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B15498(uint64_t a1)
{
  _QWORD *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846D08, 32);
    v2 = sub_1D4BACF80(a1, 0x20uLL, (uint64_t)sub_1D4B17580);
    sub_1D4B06B6C(v2);
  }
  else
  {
    v2 = operator new(0x20uLL);
    sub_1D4B06B6C(v2);
  }
  return v2;
}

void sub_1D4B1550C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B15520(uint64_t a1)
{
  _QWORD *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846E40, 48);
    v2 = sub_1D4BACF80(a1, 0x30uLL, (uint64_t)sub_1D4B1758C);
    sub_1D4B06FB4(v2);
  }
  else
  {
    v2 = operator new(0x30uLL);
    sub_1D4B06FB4(v2);
  }
  return v2;
}

void sub_1D4B15594(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B155A8(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846D50, 120);
    v2 = sub_1D4BACF80(a1, 0x78uLL, (uint64_t)sub_1D4B17598);
    sub_1D4B07514((uint64_t)v2);
  }
  else
  {
    v2 = operator new(0x78uLL);
    sub_1D4B07514((uint64_t)v2);
  }
  return v2;
}

void sub_1D4B1561C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B15630(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846CC0, 56);
    v2 = sub_1D4BACF80(a1, 0x38uLL, (uint64_t)sub_1D4B175A4);
    sub_1D4B08A28((uint64_t)v2);
  }
  else
  {
    v2 = operator new(0x38uLL);
    sub_1D4B08A28((uint64_t)v2);
  }
  return v2;
}

void sub_1D4B156A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B156B8(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846F00, 48);
    v2 = sub_1D4BACF80(a1, 0x30uLL, (uint64_t)sub_1D4B175B0);
    sub_1D4B09240((uint64_t)v2);
  }
  else
  {
    v2 = operator new(0x30uLL);
    sub_1D4B09240((uint64_t)v2);
  }
  return v2;
}

void sub_1D4B1572C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B15740(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846C78, 56);
    v2 = sub_1D4BACF80(a1, 0x38uLL, (uint64_t)sub_1D4B175BC);
    sub_1D4B09800((uint64_t)v2);
  }
  else
  {
    v2 = operator new(0x38uLL);
    sub_1D4B09800((uint64_t)v2);
  }
  return v2;
}

void sub_1D4B157B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B157C8(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846D20, 48);
    v2 = sub_1D4BACF80(a1, 0x30uLL, (uint64_t)sub_1D4B175C8);
    sub_1D4B0A194((uint64_t)v2);
  }
  else
  {
    v2 = operator new(0x30uLL);
    sub_1D4B0A194((uint64_t)v2);
  }
  return v2;
}

void sub_1D4B1583C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B15850(uint64_t a1)
{
  _QWORD *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846EA0, 40);
    v2 = sub_1D4BACF80(a1, 0x28uLL, (uint64_t)sub_1D4B175D4);
    sub_1D4B0A71C(v2);
  }
  else
  {
    v2 = operator new(0x28uLL);
    sub_1D4B0A71C(v2);
  }
  return v2;
}

void sub_1D4B158C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B158D8(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846CD8, 40);
    v2 = sub_1D4BACF80(a1, 0x28uLL, (uint64_t)sub_1D4B175E0);
    sub_1D4B0AEC8((uint64_t)v2);
  }
  else
  {
    v2 = operator new(0x28uLL);
    sub_1D4B0AEC8((uint64_t)v2);
  }
  return v2;
}

void sub_1D4B1594C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B15960(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846E58, 72);
    v2 = sub_1D4BACF80(a1, 0x48uLL, (uint64_t)sub_1D4B175EC);
    sub_1D4B0B688((uint64_t)v2);
  }
  else
  {
    v2 = operator new(0x48uLL);
    sub_1D4B0B688((uint64_t)v2);
  }
  return v2;
}

void sub_1D4B159D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B159E8(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846C90, 104);
    v2 = sub_1D4BACF80(a1, 0x68uLL, (uint64_t)sub_1D4B175F8);
    sub_1D4B0BE3C((uint64_t)v2);
  }
  else
  {
    v2 = operator new(0x68uLL);
    sub_1D4B0BE3C((uint64_t)v2);
  }
  return v2;
}

void sub_1D4B15A5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B15A70(uint64_t a1)
{
  _QWORD *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846C60, 40);
    v2 = sub_1D4BACF80(a1, 0x28uLL, (uint64_t)sub_1D4B17604);
    sub_1D4B0CB18(v2);
  }
  else
  {
    v2 = operator new(0x28uLL);
    sub_1D4B0CB18(v2);
  }
  return v2;
}

void sub_1D4B15AE4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B15AF8(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846E70, 112);
    v2 = sub_1D4BACF80(a1, 0x70uLL, (uint64_t)sub_1D4B17610);
    sub_1D4B0D13C((uint64_t)v2);
  }
  else
  {
    v2 = operator new(0x70uLL);
    sub_1D4B0D13C((uint64_t)v2);
  }
  return v2;
}

void sub_1D4B15B6C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B15B80(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846E10, 96);
    v2 = sub_1D4BACF80(a1, 0x60uLL, (uint64_t)sub_1D4B1761C);
    sub_1D4B0E1A0((uint64_t)v2);
  }
  else
  {
    v2 = operator new(0x60uLL);
    sub_1D4B0E1A0((uint64_t)v2);
  }
  return v2;
}

void sub_1D4B15BF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B15C08(uint64_t a1)
{
  _QWORD *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846DB0, 40);
    v2 = sub_1D4BACF80(a1, 0x28uLL, (uint64_t)sub_1D4B17628);
    sub_1D4B0EC88(v2);
  }
  else
  {
    v2 = operator new(0x28uLL);
    sub_1D4B0EC88(v2);
  }
  return v2;
}

void sub_1D4B15C7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B15C90(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846D98, 48);
    v2 = sub_1D4BACF80(a1, 0x30uLL, (uint64_t)sub_1D4B17634);
    sub_1D4B0F144((uint64_t)v2);
  }
  else
  {
    v2 = operator new(0x30uLL);
    sub_1D4B0F144((uint64_t)v2);
  }
  return v2;
}

void sub_1D4B15D04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B15D18(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846EE8, 48);
    v2 = sub_1D4BACF80(a1, 0x30uLL, (uint64_t)sub_1D4B17640);
    sub_1D4B0F6C8((uint64_t)v2);
  }
  else
  {
    v2 = operator new(0x30uLL);
    sub_1D4B0F6C8((uint64_t)v2);
  }
  return v2;
}

void sub_1D4B15D8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B15DA0(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846EB8, 80);
    v2 = sub_1D4BACF80(a1, 0x50uLL, (uint64_t)sub_1D4B1764C);
    sub_1D4B0FC50((uint64_t)v2);
  }
  else
  {
    v2 = operator new(0x50uLL);
    sub_1D4B0FC50((uint64_t)v2);
  }
  return v2;
}

void sub_1D4B15E14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B15E28(uint64_t a1)
{
  _QWORD *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846CA8, 40);
    v2 = sub_1D4BACF80(a1, 0x28uLL, (uint64_t)sub_1D4B17658);
    sub_1D4B10694(v2);
  }
  else
  {
    v2 = operator new(0x28uLL);
    sub_1D4B10694(v2);
  }
  return v2;
}

void sub_1D4B15E9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B15EB0(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846DE0, 72);
    v2 = sub_1D4BACF80(a1, 0x48uLL, (uint64_t)sub_1D4B17664);
    sub_1D4B10DB0((uint64_t)v2);
  }
  else
  {
    v2 = operator new(0x48uLL);
    sub_1D4B10DB0((uint64_t)v2);
  }
  return v2;
}

void sub_1D4B15F24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B15F38(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846C30, 104);
    v2 = sub_1D4BACF80(a1, 0x68uLL, (uint64_t)sub_1D4B17670);
    sub_1D4B117C4((uint64_t)v2);
  }
  else
  {
    v2 = operator new(0x68uLL);
    sub_1D4B117C4((uint64_t)v2);
  }
  return v2;
}

void sub_1D4B15FAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B15FC0(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846E88, 168);
    v2 = sub_1D4BACF80(a1, 0xA8uLL, (uint64_t)sub_1D4B1767C);
    sub_1D4B12560((uint64_t)v2);
  }
  else
  {
    v2 = operator new(0xA8uLL);
    sub_1D4B12560((uint64_t)v2);
  }
  return v2;
}

void sub_1D4B16034(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B16048(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846C48, 96);
    v2 = sub_1D4BACF80(a1, 0x60uLL, (uint64_t)sub_1D4B17688);
    sub_1D4B13ACC((uint64_t)v2);
  }
  else
  {
    v2 = operator new(0x60uLL);
    sub_1D4B13ACC((uint64_t)v2);
  }
  return v2;
}

void sub_1D4B160BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B160D0(uint64_t a1)
{
  void *v2;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 112))
      sub_1D4BAD2D0(a1, (uint64_t)&unk_1E9846ED0, 56);
    v2 = sub_1D4BACF80(a1, 0x38uLL, (uint64_t)sub_1D4B17694);
    sub_1D4B1493C((uint64_t)v2);
  }
  else
  {
    v2 = operator new(0x38uLL);
    sub_1D4B1493C((uint64_t)v2);
  }
  return v2;
}

void sub_1D4B16144(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B16158()
{
  return sub_1D4B150E0(0);
}

_QWORD *sub_1D4B16160(uint64_t a1, uint64_t a2)
{
  return sub_1D4B150E0(a2);
}

uint64_t sub_1D4B16168()
{
  return 0;
}

uint64_t sub_1D4B16170(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
}

uint64_t sub_1D4B1617C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

_QWORD *sub_1D4B16184()
{
  return sub_1D4B15168(0);
}

_QWORD *sub_1D4B1618C(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15168(a2);
}

_QWORD *sub_1D4B16194()
{
  return sub_1D4B151F0(0);
}

_QWORD *sub_1D4B1619C(uint64_t a1, uint64_t a2)
{
  return sub_1D4B151F0(a2);
}

void *sub_1D4B161A4()
{
  return sub_1D4B15278(0);
}

void *sub_1D4B161AC(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15278(a2);
}

_QWORD *sub_1D4B161B4()
{
  return sub_1D4B15300(0);
}

_QWORD *sub_1D4B161BC(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15300(a2);
}

_QWORD *sub_1D4B161C4()
{
  return sub_1D4B15388(0);
}

_QWORD *sub_1D4B161CC(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15388(a2);
}

void *sub_1D4B161D4()
{
  return sub_1D4B15410(0);
}

void *sub_1D4B161DC(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15410(a2);
}

_QWORD *sub_1D4B161E4()
{
  return sub_1D4B15498(0);
}

_QWORD *sub_1D4B161EC(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15498(a2);
}

_QWORD *sub_1D4B161F4()
{
  return sub_1D4B15520(0);
}

_QWORD *sub_1D4B161FC(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15520(a2);
}

void *sub_1D4B16204()
{
  return sub_1D4B155A8(0);
}

void *sub_1D4B1620C(uint64_t a1, uint64_t a2)
{
  return sub_1D4B155A8(a2);
}

void *sub_1D4B16214()
{
  return sub_1D4B15630(0);
}

void *sub_1D4B1621C(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15630(a2);
}

void *sub_1D4B16224()
{
  return sub_1D4B156B8(0);
}

void *sub_1D4B1622C(uint64_t a1, uint64_t a2)
{
  return sub_1D4B156B8(a2);
}

void *sub_1D4B16234()
{
  return sub_1D4B15740(0);
}

void *sub_1D4B1623C(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15740(a2);
}

void *sub_1D4B16244()
{
  return sub_1D4B157C8(0);
}

void *sub_1D4B1624C(uint64_t a1, uint64_t a2)
{
  return sub_1D4B157C8(a2);
}

_QWORD *sub_1D4B16254()
{
  return sub_1D4B15850(0);
}

_QWORD *sub_1D4B1625C(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15850(a2);
}

void *sub_1D4B16264()
{
  return sub_1D4B158D8(0);
}

void *sub_1D4B1626C(uint64_t a1, uint64_t a2)
{
  return sub_1D4B158D8(a2);
}

void *sub_1D4B16274()
{
  return sub_1D4B15960(0);
}

void *sub_1D4B1627C(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15960(a2);
}

void *sub_1D4B16284()
{
  return sub_1D4B159E8(0);
}

void *sub_1D4B1628C(uint64_t a1, uint64_t a2)
{
  return sub_1D4B159E8(a2);
}

_QWORD *sub_1D4B16294()
{
  return sub_1D4B15A70(0);
}

_QWORD *sub_1D4B1629C(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15A70(a2);
}

void *sub_1D4B162A4()
{
  return sub_1D4B15AF8(0);
}

void *sub_1D4B162AC(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15AF8(a2);
}

void *sub_1D4B162B4()
{
  return sub_1D4B15B80(0);
}

void *sub_1D4B162BC(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15B80(a2);
}

_QWORD *sub_1D4B162C4()
{
  return sub_1D4B15C08(0);
}

_QWORD *sub_1D4B162CC(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15C08(a2);
}

void *sub_1D4B162D4()
{
  return sub_1D4B15C90(0);
}

void *sub_1D4B162DC(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15C90(a2);
}

void *sub_1D4B162E4()
{
  return sub_1D4B15D18(0);
}

void *sub_1D4B162EC(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15D18(a2);
}

void *sub_1D4B162F4()
{
  return sub_1D4B15DA0(0);
}

void *sub_1D4B162FC(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15DA0(a2);
}

_QWORD *sub_1D4B16304()
{
  return sub_1D4B15E28(0);
}

_QWORD *sub_1D4B1630C(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15E28(a2);
}

void *sub_1D4B16314()
{
  return sub_1D4B15EB0(0);
}

void *sub_1D4B1631C(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15EB0(a2);
}

void *sub_1D4B16324()
{
  return sub_1D4B15F38(0);
}

void *sub_1D4B1632C(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15F38(a2);
}

void *sub_1D4B16334()
{
  return sub_1D4B15FC0(0);
}

void *sub_1D4B1633C(uint64_t a1, uint64_t a2)
{
  return sub_1D4B15FC0(a2);
}

void *sub_1D4B16344()
{
  return sub_1D4B16048(0);
}

void *sub_1D4B1634C(uint64_t a1, uint64_t a2)
{
  return sub_1D4B16048(a2);
}

void *sub_1D4B16354()
{
  return sub_1D4B160D0(0);
}

void *sub_1D4B1635C(uint64_t a1, uint64_t a2)
{
  return sub_1D4B160D0(a2);
}

uint64_t *sub_1D4B16364(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFFFFELL) + 24) && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      operator delete((void *)v3);
    }
  }
  *a1 = 0;
  return a1;
}

double sub_1D4B163BC(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  double result;

  v2 = *a1 & 0xFFFFFFFFFFFFFFFELL;
  if ((*a1 & 1) != 0)
  {
    v2 = *(_QWORD *)(v2 + 24);
    if (v2)
      goto LABEL_3;
LABEL_7:
    v3 = (unint64_t)operator new(0x20uLL);
    goto LABEL_8;
  }
  if (!v2)
    goto LABEL_7;
LABEL_3:
  if (*(_QWORD *)(v2 + 112))
    sub_1D4BAD2D0(v2, (uint64_t)&unk_1E9846FE8, 32);
  v3 = (unint64_t)sub_1D4BACF80(v2, 0x20uLL, (uint64_t)sub_1D4B16444);
LABEL_8:
  result = 0.0;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *a1 = v3 | 1;
  *(_QWORD *)(v3 + 24) = v2;
  return result;
}

void sub_1D4B16444(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t **sub_1D4B16458(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  void **v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t *v9;

  LODWORD(v2) = *((char *)a1 + 31);
  if ((v2 & 0x80000000) != 0)
    v3 = a1[2];
  else
    v3 = (uint64_t *)*((unsigned __int8 *)a1 + 31);
  v4 = (void **)(a1 + 1);
  if (v3)
  {
    v5 = (unint64_t *)*a1;
    v6 = **a1;
    if ((v6 & 1) != 0)
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    else
      sub_1D4B163BC(v5);
    v2 = *(uint64_t **)(v7 + 16);
    v8 = *(_OWORD *)v7;
    v9 = a1[3];
    *(_OWORD *)v7 = *(_OWORD *)v4;
    *(_QWORD *)(v7 + 16) = v9;
    *(_OWORD *)v4 = v8;
    a1[3] = v2;
    LOBYTE(v2) = *((_BYTE *)a1 + 31);
  }
  if ((v2 & 0x80) != 0)
    operator delete(*v4);
  return a1;
}

_QWORD *sub_1D4B164E8(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v5;

  result = operator new(0x18uLL);
  v5 = result;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_1D4B1655C(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    result[2] = *(_QWORD *)(a2 + 16);
  }
  *a1 = v5;
  return result;
}

void sub_1D4B16548(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B1655C(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_1D4B02588();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_1D4B165E8(unsigned int *a1, int a2)
{
  int v2;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1[1];
  if (v2 < a2)
  {
    if (v2 < 1)
    {
      v5 = (uint64_t **)(a1 + 2);
      v4 = 0;
      if (v2)
        v6 = *v5;
      else
        v6 = (uint64_t *)(a1 + 2);
    }
    else
    {
      v5 = (uint64_t **)(a1 + 2);
      v4 = (uint64_t *)*((_QWORD *)a1 + 1);
      v6 = v4;
    }
    v7 = *v6;
    v8 = 2 * v2;
    if (v8 <= a2)
      v8 = a2;
    if (v8 <= 4)
      v9 = 4;
    else
      v9 = v8;
    v10 = 8 * v9;
    if (v7)
    {
      v11 = (v10 + 15) & 0x7FFFFFFF8;
      if (*(_QWORD *)(v7 + 112))
        sub_1D4BAD2D0(v7, MEMORY[0x1E0DE4EC8], v11);
      v12 = sub_1D4BACEA0(v7, v11);
    }
    else
    {
      v12 = operator new(v10 + 8);
    }
    *((_QWORD *)a1 + 1) = v12;
    *v12 = v7;
    a1[1] = v9;
    v13 = *a1;
    if ((int)v13 >= 1)
      memcpy(*v5 + 1, v4 + 1, 8 * v13);
    if (v4)
    {
      if (!*v4)
        operator delete(v4);
    }
  }
}

void sub_1D4B16704(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_1D4B16718(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    v2 = *(_QWORD *)(result + 16) + 8;
    do
    {
      v3 = *(_QWORD *)v2;
      if (*(char *)(*(_QWORD *)v2 + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v3 = 0;
        *(_BYTE *)(v3 + 23) = 0;
      }
      v2 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

std::string *sub_1D4B16764(unint64_t *a1, uint64_t a2)
{
  std::string *v3;
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;

  if ((*a1 & 1) != 0)
    v3 = (std::string *)(*a1 & 0xFFFFFFFFFFFFFFFELL);
  else
    sub_1D4B163BC(a1);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (const std::string::value_type *)a2;
  else
    v5 = *(const std::string::value_type **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  return std::string::append(v3, v5, v6);
}

void sub_1D4B167AC(unint64_t *a1)
{
  unint64_t v1;

  if ((*a1 & 1) != 0)
    v1 = *a1 & 0xFFFFFFFFFFFFFFFELL;
  else
    sub_1D4B163BC(a1);
  if (*(char *)(v1 + 23) < 0)
  {
    **(_BYTE **)v1 = 0;
    *(_QWORD *)(v1 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v1 = 0;
    *(_BYTE *)(v1 + 23) = 0;
  }
}

void sub_1D4B167F0(_QWORD *a1)
{
  unsigned int *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 2;
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
          (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

std::string *sub_1D4B16860(std::string *result, std::string **a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  std::string **v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  std::string **v20;
  uint64_t v21;
  std::string *v22;

  v9 = (uint64_t *)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = sub_1D4B1690C(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (std::string *)sub_1D4B15630(v18);
      result = sub_1D4B1690C(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
  return result;
}

std::string *sub_1D4B1690C(uint64_t a1, std::string *a2)
{
  return sub_1D4B09120(a2, a1);
}

uint64_t *sub_1D4B1691C(uint64_t *result, _QWORD **a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v9 = result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = sub_1D4B169C8(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = sub_1D4B15740(v18);
      result = sub_1D4B169C8(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
  return result;
}

_QWORD *sub_1D4B169C8(uint64_t a1, _QWORD *a2)
{
  return sub_1D4B0A088(a2, a1);
}

std::string *sub_1D4B169D8(std::string *result, std::string **a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  std::string **v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  std::string **v20;
  uint64_t v21;
  std::string *v22;

  v9 = (uint64_t *)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = sub_1D4B16A84(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (std::string *)sub_1D4B15850(v18);
      result = sub_1D4B16A84(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
  return result;
}

std::string *sub_1D4B16A84(uint64_t a1, std::string *a2)
{
  return sub_1D4B0AD34(a2, a1);
}

std::string *sub_1D4B16A94(std::string *result, std::string **a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  std::string **v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  std::string **v20;
  uint64_t v21;
  std::string *v22;

  v9 = (uint64_t *)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = sub_1D4B16B40(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (std::string *)sub_1D4B158D8(v18);
      result = sub_1D4B16B40(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
  return result;
}

std::string *sub_1D4B16B40(uint64_t a1, std::string *a2)
{
  return sub_1D4B0B4F4(a2, a1);
}

std::string *sub_1D4B16B50(std::string *result, std::string **a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  std::string **v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  std::string **v20;
  uint64_t v21;
  std::string *v22;

  v9 = (uint64_t *)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = sub_1D4B16BFC(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (std::string *)sub_1D4B15960(v18);
      result = sub_1D4B16BFC(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
  return result;
}

std::string *sub_1D4B16BFC(uint64_t a1, std::string *a2)
{
  return sub_1D4B0BD18(a2, a1);
}

void sub_1D4B16C0C(_QWORD *a1)
{
  unsigned int *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = (uint64_t *)(v2 + 2);
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        v5 = *v3;
        if (*v3)
        {
          if (*(char *)(v5 + 23) < 0)
            operator delete(*(void **)v5);
          operator delete((void *)v5);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_1D4B16C88(unsigned int *a1, int a2)
{
  int v2;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1[1];
  if (v2 < a2)
  {
    if (v2 < 1)
    {
      v5 = (uint64_t **)(a1 + 2);
      v4 = 0;
      if (v2)
        v6 = *v5;
      else
        v6 = (uint64_t *)(a1 + 2);
    }
    else
    {
      v5 = (uint64_t **)(a1 + 2);
      v4 = (uint64_t *)*((_QWORD *)a1 + 1);
      v6 = v4;
    }
    v7 = *v6;
    v8 = 2 * v2;
    if (v8 <= a2)
      v8 = a2;
    if (v8 <= 4)
      v9 = 4;
    else
      v9 = v8;
    v10 = 4 * v9;
    if (v7)
    {
      v11 = (v10 + 15) & 0x3FFFFFFF8;
      if (*(_QWORD *)(v7 + 112))
        sub_1D4BAD2D0(v7, MEMORY[0x1E0DE4EC8], v11);
      v12 = sub_1D4BACEA0(v7, v11);
    }
    else
    {
      v12 = operator new(v10 + 8);
    }
    *((_QWORD *)a1 + 1) = v12;
    *v12 = v7;
    a1[1] = v9;
    v13 = *a1;
    if ((int)v13 >= 1)
      memcpy(*v5 + 1, v4 + 1, 4 * v13);
    if (v4)
    {
      if (!*v4)
        operator delete(v4);
    }
  }
}

std::string *sub_1D4B16DA4(std::string *result, std::string **a2, const std::string **a3, signed int a4, signed int a5)
{
  uint64_t *v9;
  uint64_t v10;
  const std::string **v11;
  std::string **v12;
  const std::string *v13;
  const std::string *v14;
  std::string *v15;
  int v16;
  uint64_t v17;
  const std::string **v18;
  std::string **v19;
  const std::string *v20;
  std::string *v21;
  std::string *v22;

  v9 = (uint64_t *)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = std::string::operator=(v15, v13);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = *v9;
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        if (*(_QWORD *)(v17 + 112))
          sub_1D4BAD2D0(v17, (uint64_t)&unk_1E9847098, 24);
        v21 = (std::string *)sub_1D4BACF80(v17, 0x18uLL, (uint64_t)sub_1D4B16704);
      }
      else
      {
        v21 = (std::string *)operator new(0x18uLL);
      }
      v22 = v21;
      v21->__r_.__value_.__r.__words[0] = 0;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      result = std::string::operator=(v21, v20);
      *v19++ = v22;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

std::string *sub_1D4B16EA0(std::string *result, std::string **a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  std::string **v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  std::string **v20;
  uint64_t v21;
  std::string *v22;

  v9 = (uint64_t *)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = sub_1D4B16F4C(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (std::string *)sub_1D4B15A70(v18);
      result = sub_1D4B16F4C(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
  return result;
}

std::string *sub_1D4B16F4C(uint64_t a1, std::string *a2)
{
  return sub_1D4B0D044(a2, a1);
}

std::string *sub_1D4B16F5C(std::string *result, std::string **a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  std::string **v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  std::string **v20;
  uint64_t v21;
  std::string *v22;

  v9 = (uint64_t *)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = sub_1D4B17008(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (std::string *)sub_1D4B155A8(v18);
      result = sub_1D4B17008(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
  return result;
}

std::string *sub_1D4B17008(uint64_t a1, std::string *a2)
{
  return sub_1D4B085D8(a2, a1);
}

std::string *sub_1D4B17018(std::string *result, std::string **a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  std::string **v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  std::string **v20;
  uint64_t v21;
  std::string *v22;

  v9 = (uint64_t *)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = sub_1D4B170C4(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (std::string *)sub_1D4B15C90(v18);
      result = sub_1D4B170C4(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
  return result;
}

std::string *sub_1D4B170C4(uint64_t a1, std::string *a2)
{
  return sub_1D4B0F610(a2, a1);
}

std::string *sub_1D4B170D4(std::string *result, std::string **a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  std::string **v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  std::string **v20;
  uint64_t v21;
  std::string *v22;

  v9 = (uint64_t *)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = sub_1D4B17180(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (std::string *)sub_1D4B15DA0(v18);
      result = sub_1D4B17180(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
  return result;
}

std::string *sub_1D4B17180(uint64_t a1, std::string *a2)
{
  return sub_1D4B10528(a2, a1);
}

std::string *sub_1D4B17190(std::string *result, std::string **a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  std::string **v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  std::string **v20;
  uint64_t v21;
  std::string *v22;

  v9 = (uint64_t *)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = sub_1D4B1723C(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (std::string *)sub_1D4B15E28(v18);
      result = sub_1D4B1723C(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
  return result;
}

std::string *sub_1D4B1723C(uint64_t a1, std::string *a2)
{
  return sub_1D4B10CE4(a2, a1);
}

std::string *sub_1D4B1724C(std::string *result, std::string **a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  std::string **v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  std::string **v20;
  uint64_t v21;
  std::string *v22;

  v9 = (uint64_t *)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = sub_1D4B172F8(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (std::string *)sub_1D4B15EB0(v18);
      result = sub_1D4B172F8(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
  return result;
}

std::string *sub_1D4B172F8(uint64_t a1, std::string *a2)
{
  return sub_1D4B11648(a2, a1);
}

std::string *sub_1D4B17308(std::string *result, std::string **a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  std::string **v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  std::string **v20;
  uint64_t v21;
  std::string *v22;

  v9 = (uint64_t *)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = sub_1D4B173B4(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (std::string *)sub_1D4B15B80(v18);
      result = sub_1D4B173B4(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
  return result;
}

std::string *sub_1D4B173B4(uint64_t a1, std::string *a2)
{
  return sub_1D4B0EB18(a2, a1);
}

unint64_t *sub_1D4B173C4(unint64_t *result, unint64_t **a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t **v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t **v20;
  uint64_t v21;
  unint64_t *v22;

  v9 = (uint64_t *)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = sub_1D4B17470(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (unint64_t *)sub_1D4B15AF8(v18);
      result = sub_1D4B17470(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
  return result;
}

unint64_t *sub_1D4B17470(uint64_t a1, unint64_t *a2)
{
  return sub_1D4B0DFA0(a2, a1);
}

std::string *sub_1D4B17480(std::string *result, std::string **a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  std::string **v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  std::string **v20;
  uint64_t v21;
  std::string *v22;

  v9 = (uint64_t *)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = sub_1D4B16F4C(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (std::string *)sub_1D4B15C08(v18);
      result = sub_1D4B16F4C(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
  return result;
}

uint64_t sub_1D4B1752C(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B17538(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B17544(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B17550(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B1755C(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B17568(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B17574(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B17580(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B1758C(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B17598(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B175A4(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B175B0(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B175BC(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B175C8(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B175D4(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B175E0(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B175EC(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B175F8(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B17604(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B17610(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B1761C(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B17628(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B17634(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B17640(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B1764C(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B17658(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B17664(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B17670(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B1767C(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B17688(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t sub_1D4B17694(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

_QWORD *sub_1D4B176A8(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = 0;
  sub_1D4B17714((uint64_t)a1, vcvtpd_u64_f64((double)a2 * 0.015625), &v4);
  return a1;
}

void sub_1D4B176F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D4B17714(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_1D4B1819C((void **)a1, a2 - v3, a3);
  }
}

uint64_t sub_1D4B17744(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v7;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v7 = 0;
  sub_1D4B17714(a1, a3 >> 6, &v7);
  memcpy(*(void **)a1, a2, a3 >> 3);
  return a1;
}

void sub_1D4B177A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4B177C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1D4B178C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1D82646E0](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B178EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1D82646E0](a1 + 128);
  return a1;
}

uint64_t sub_1D4B17974(uint64_t result, const std::string *a2)
{
  std::logic_error *exception;

  if ((result & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, a2);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  return result;
}

void sub_1D4B179C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B179D4(uint64_t a1, unint64_t a2, long double a3)
{
  void ***v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  int v10;
  void **v11;
  void **v12;
  std::string __p;

  *(_QWORD *)a1 = &off_1E98479B8;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = (void ***)(a1 + 24);
  sub_1D4BCA448(&__p, "expectedEntries should be > 0");
  sub_1D4B17974(a2 != 0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_1D4BCA448(&__p, "False positive probability should be > 0.0 & < 1.0");
  v7 = a3 < 1.0 && a3 > 0.0;
  sub_1D4B17974(v7, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8 = (double)a2;
  v9 = (int)((int)(log(a3) * (double)a2 / -0.480453014) & 0xFFFFFFC0) + 64;
  *(_QWORD *)(a1 + 8) = v9;
  v10 = llround((double)v9 / v8 * 0.693147181);
  if (v10 <= 1)
    v10 = 1;
  *(_DWORD *)(a1 + 16) = v10;
  v11 = (void **)operator new(0x18uLL);
  sub_1D4B176A8(v11, v9);
  v12 = *v6;
  *v6 = v11;
  if (v12)
    sub_1D4B182F4((int)v6, v12);
  return a1;
}

void sub_1D4B17B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void ***v15;
  void *v16;
  void **v18;

  operator delete(v16);
  v18 = *v15;
  *v15 = 0;
  if (v18)
    sub_1D4B182F4((int)v15, v18);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B17B64(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  unint64_t v4;

  if (a2)
    v4 = sub_1D4B2F884(a2, a3);
  else
    v4 = 0x27BB2EE687B0B0FDLL;
  return sub_1D4B17BAC(a1, v4);
}

uint64_t sub_1D4B17BAC(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  int v4;
  unint64_t v5;

  v2 = *(_DWORD *)(result + 16);
  if (v2 >= 1)
  {
    v3 = **(_QWORD **)(result + 24);
    v4 = a2 + HIDWORD(a2);
    do
    {
      v5 = (unint64_t)(v4 ^ (v4 >> 31)) % *(_QWORD *)(result + 8);
      *(_QWORD *)(v3 + ((v5 >> 3) & 0x1FFFFFF8)) |= 1 << v5;
      v4 += HIDWORD(a2);
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1D4B17C04(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = 265 * ((~a2 + (a2 << 21)) ^ ((unint64_t)(~a2 + (a2 << 21)) >> 24));
  return sub_1D4B17BAC(a1, 2147483649u * ((21 * (v2 ^ (v2 >> 14))) ^ ((21 * (v2 ^ (v2 >> 14))) >> 28)));
}

BOOL sub_1D4B17C30(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  unint64_t v4;

  if (a2)
    v4 = sub_1D4B2F884(a2, a3);
  else
    v4 = 0x27BB2EE687B0B0FDLL;
  return sub_1D4B17C78(a1, v4);
}

BOOL sub_1D4B17C78(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;

  v2 = *(_DWORD *)(a1 + 16);
  if (v2 < 1)
    return 1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = **(_QWORD **)(a1 + 24);
  v5 = ((HIDWORD(a2) + (_DWORD)a2) ^ ((HIDWORD(a2) + (int)a2) >> 31)) % v3;
  if (((*(_QWORD *)(v4 + ((v5 >> 3) & 0x1FFFFFF8)) >> v5) & 1) == 0)
    return 0;
  v6 = a2 + 2 * HIDWORD(a2);
  v7 = 1;
  do
  {
    v8 = v7;
    if (v2 == v7)
      break;
    ++v7;
    v9 = (v6 ^ (v6 >> 31)) % v3;
    v6 += HIDWORD(a2);
  }
  while (((*(_QWORD *)(v4 + ((v9 >> 3) & 0x1FFFFFF8)) >> v9) & 1) != 0);
  return v8 >= v2;
}

BOOL sub_1D4B17D10(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = 265 * ((~a2 + (a2 << 21)) ^ ((unint64_t)(~a2 + (a2 << 21)) >> 24));
  return sub_1D4B17C78(a1, 2147483649u * ((21 * (v2 ^ (v2 >> 14))) ^ ((21 * (v2 ^ (v2 >> 14))) >> 28)));
}

uint64_t sub_1D4B17D3C(uint64_t a1, uint64_t a2)
{
  void ***v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void **v7;
  std::string __p;

  *(_QWORD *)a1 = &off_1E98479B8;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = (void ***)(a1 + 24);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 48);
  v4 = *(_QWORD **)(a2 + 40);
  if (*((char *)v4 + 23) < 0)
    v5 = v4[1];
  else
    v5 = *((unsigned __int8 *)v4 + 23);
  *(_QWORD *)(a1 + 8) = 8 * v5;
  sub_1D4BCA448(&__p, "numBits should be multiple of 64!");
  sub_1D4B17974((v5 & 7) == 0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((char *)v4 + 23) < 0)
    v4 = (_QWORD *)*v4;
  v6 = (void **)operator new(0x18uLL);
  sub_1D4B17744((uint64_t)v6, v4, *(_QWORD *)(a1 + 8));
  v7 = *v3;
  *v3 = v6;
  if (v7)
    sub_1D4B182F4((int)v3, v7);
  return a1;
}

void sub_1D4B17E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void ***v15;
  void *v16;
  void **v18;

  operator delete(v16);
  v18 = *v15;
  *v15 = 0;
  if (v18)
    sub_1D4B182F4((int)v15, v18);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B17E58(uint64_t a1, double a2)
{
  unint64_t v2;

  v2 = 265 * ((~*(_QWORD *)&a2 + (*(_QWORD *)&a2 << 21)) ^ ((~*(_QWORD *)&a2 + (*(_QWORD *)&a2 << 21)) >> 24));
  return sub_1D4B17BAC(a1, 2147483649u * ((21 * (v2 ^ (v2 >> 14))) ^ ((21 * (v2 ^ (v2 >> 14))) >> 28)));
}

uint64_t sub_1D4B17E88(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, *(_QWORD *)&a2);
}

void sub_1D4B17E98(uint64_t a1)
{
  bzero(**(void ***)(a1 + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) - **(_QWORD **)(a1 + 24));
}

void sub_1D4B17EA8(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  void *v4;
  size_t v5;
  __n128 **v6;
  __n128 __p;
  char v8;

  v2 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(void **)v3;
  v5 = (*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) & 0x1FFFFFFFFFFFFFFFLL;
  *(_DWORD *)(a2 + 16) = v2 | 3;
  v6 = (__n128 **)(a2 + 40);
  sub_1D4B180CC(&__p, v4, v5);
  sub_1D4B18048(v6, (__n128 *)&qword_1EFEC6AB8, &__p);
  if (v8 < 0)
    operator delete((void *)__p.n128_u64[0]);
}

void sub_1D4B17F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_1D4B17F3C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *v6;

  *a4 = 0;
  if (*result == 8 && (*(_BYTE *)(a2 + 16) & 4) != 0 && *(_DWORD *)(a2 + 32) == 1 && (~*(_DWORD *)(a3 + 16) & 3) == 0)
  {
    v6 = operator new(0x20uLL);
    result = (_DWORD *)sub_1D4B17D3C((uint64_t)v6, a3);
    *a4 = v6;
  }
  return result;
}

void sub_1D4B17FB0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  operator delete(v2);
  *v1 = 0;
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B17FD0(_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;

  *a1 = &off_1E98479B8;
  v4 = (void **)a1[3];
  v2 = a1 + 3;
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_1D4B182F4((int)v2, v3);
  return a1;
}

void sub_1D4B1800C(_QWORD *__p)
{
  _QWORD *v2;
  void **v3;
  void **v4;

  *__p = &off_1E98479B8;
  v4 = (void **)__p[3];
  v2 = __p + 3;
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_1D4B182F4((int)v2, v3);
  operator delete(__p);
}

__n128 sub_1D4B18048(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  __n128 result;
  __n128 *v7;

  v4 = *a1;
  if (*a1 == a2)
  {
    v7 = (__n128 *)operator new(0x18uLL);
    result = *a3;
    *v7 = *a3;
    v7[1].n128_u64[0] = a3[1].n128_u64[0];
    a3->n128_u64[0] = 0;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    *a1 = v7;
  }
  else
  {
    if (v4[1].n128_i8[7] < 0)
      operator delete((void *)v4->n128_u64[0]);
    result = *a3;
    v4[1].n128_u64[0] = a3[1].n128_u64[0];
    *v4 = result;
    a3[1].n128_u8[7] = 0;
    a3->n128_u8[0] = 0;
  }
  return result;
}

_QWORD *sub_1D4B180CC(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_1D4B02588();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void sub_1D4B18174()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void sub_1D4B1819C(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      sub_1D4B182AC();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)sub_1D4B182C0(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 8)
    {
      v25 = *((_QWORD *)i - 1);
      *((_QWORD *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void sub_1D4B182AC()
{
  sub_1D4B0259C("vector");
}

void *sub_1D4B182C0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_1D4B18174();
  return operator new(8 * a2);
}

void sub_1D4B182F4(int a1, void **__p)
{
  void *v3;

  if (__p)
  {
    v3 = *__p;
    if (*__p)
    {
      __p[1] = v3;
      operator delete(v3);
    }
    operator delete(__p);
  }
}

uint64_t sub_1D4B1832C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = off_1E9848268;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = operator new[](0x80uLL);
  *(_DWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return a1;
}

void sub_1D4B18388(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4B183AC(_QWORD *a1)
{
  void *v2;
  uint64_t v3;

  *a1 = off_1E9848268;
  v2 = (void *)a1[2];
  if (v2)
    operator delete[](v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_1D4B18400(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B183AC(a1);
  operator delete(v1);
}

uint64_t sub_1D4B18414(uint64_t result, char a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  std::bad_alloc *exception;
  std::bad_alloc *v7;
  int v8;

  v3 = result;
  v4 = *(_DWORD *)(result + 36);
  if (v4 == *(_DWORD *)(result + 40))
  {
    v8 = 0;
    result = (*(uint64_t (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(result + 8) + 16))(*(_QWORD *)(result + 8), result + 48, &v8);
    if ((result & 1) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v7 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v7, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
    }
    v4 = 0;
    *(_DWORD *)(v3 + 40) = v8;
  }
  v5 = *(_QWORD *)(v3 + 48);
  *(_DWORD *)(v3 + 36) = v4 + 1;
  *(_BYTE *)(v5 + v4) = a2;
  return result;
}

uint64_t sub_1D4B184A4(uint64_t result, unsigned __int8 *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v5;
  uint64_t v7;
  _BYTE *v8;

  if (a3)
  {
    v5 = a3;
    v7 = result;
    v8 = a4;
    do
    {
      if (!a4 || *v8)
        result = sub_1D4B1850C(v7, *a2);
      ++a2;
      ++v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1D4B1850C(uint64_t result, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result;
  v4 = *(int *)(result + 24);
  if (!(_DWORD)v4)
  {
    v7 = *(unsigned __int8 **)(result + 16);
    *(_DWORD *)(result + 24) = 1;
    *v7 = a2;
    *(_DWORD *)(result + 32) = 1;
    return result;
  }
  v5 = *(unsigned __int8 **)(result + 16);
  if (!*(_BYTE *)(result + 28))
  {
    if (v5[v4 - 1] == a2)
    {
      v8 = *(_DWORD *)(result + 32) + 1;
      *(_DWORD *)(result + 32) = v8;
      if (v8 == 3)
      {
        if ((_DWORD)v4 != 2)
        {
          *(_DWORD *)(result + 24) = v4 - 2;
          result = sub_1D4B18628(result);
          **(_BYTE **)(v2 + 16) = a2;
        }
        *(_BYTE *)(v2 + 28) = 1;
        *(_DWORD *)(v2 + 24) = 3;
        return result;
      }
    }
    else
    {
      *(_DWORD *)(result + 32) = 1;
    }
    *(_DWORD *)(result + 24) = v4 + 1;
    v5[v4] = a2;
    if (*(_DWORD *)(result + 24) != 128)
      return result;
    return sub_1D4B18628(result);
  }
  if (*v5 != a2)
  {
    result = sub_1D4B18628(result);
    v9 = *(_QWORD *)(v2 + 16);
    v10 = *(int *)(v2 + 24);
    *(_DWORD *)(v2 + 24) = v10 + 1;
    *(_BYTE *)(v9 + v10) = a2;
    *(_DWORD *)(v2 + 32) = 1;
    return result;
  }
  v6 = v4 + 1;
  *(_DWORD *)(result + 24) = v6;
  if (v6 == 130)
    return sub_1D4B18628(result);
  return result;
}

uint64_t sub_1D4B18628(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_DWORD *)(result + 24);
  if (v1)
  {
    v2 = result;
    if (*(_BYTE *)(result + 28))
    {
      sub_1D4B18414(result, v1 - 3);
      result = sub_1D4B18414(v2, **(_BYTE **)(v2 + 16));
    }
    else
    {
      result = sub_1D4B18414(result, -(char)v1);
      if (*(int *)(v2 + 24) >= 1)
      {
        v3 = 0;
        do
          result = sub_1D4B18414(v2, *(_BYTE *)(*(_QWORD *)(v2 + 16) + v3++));
        while (v3 < *(int *)(v2 + 24));
      }
    }
    *(_BYTE *)(v2 + 28) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    *(_DWORD *)(v2 + 24) = 0;
  }
  return result;
}

uint64_t sub_1D4B186C4(uint64_t a1)
{
  uint64_t result;

  sub_1D4B18628(a1);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), (*(_DWORD *)(a1 + 40) - *(_DWORD *)(a1 + 36)));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_1D4B18710(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1D4B18720(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
  v5 = *(int *)(a1 + 36);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8)))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v4);
  else
    v5 = v4 + v5 - *(int *)(a1 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(int *)(a1 + 24));
}

uint64_t sub_1D4B187BC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = operator new(0x38uLL);
  v5 = *a1;
  *a1 = 0;
  v7 = v5;
  sub_1D4B1832C((uint64_t)v4, &v7);
  *a2 = v4;
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

void sub_1D4B18834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B1885C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a2;
  *a2 = 0;
  v5 = v3;
  sub_1D4B1832C(a1, &v5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)a1 = &off_1E9848958;
  *(_DWORD *)(a1 + 56) = 8;
  *(_BYTE *)(a1 + 60) = 0;
  return a1;
}

void sub_1D4B188C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1D4B188E8(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B183AC(a1);
  operator delete(v1);
}

uint64_t sub_1D4B188FC(uint64_t result, _BYTE *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v6;
  int v8;
  _BYTE *v9;
  _BYTE *v10;

  v4 = result;
  if (a3)
  {
    v6 = a3;
    v8 = *(_DWORD *)(result + 56);
    v9 = a4;
    v10 = a2;
    while (1)
    {
      if (v8)
      {
        if (!a4)
          goto LABEL_8;
      }
      else
      {
        result = sub_1D4B1850C(v4, *(_BYTE *)(v4 + 60));
        *(_BYTE *)(v4 + 60) = 0;
        v8 = 8;
        *(_DWORD *)(v4 + 56) = 8;
        if (!a4)
          goto LABEL_8;
      }
      if (*v9)
      {
LABEL_8:
        if (!a2 || *v10)
          *(_BYTE *)(v4 + 60) |= 0x80u >> (8 - v8);
        *(_DWORD *)(v4 + 56) = --v8;
      }
      ++v10;
      ++v9;
      if (!--v6)
      {
        if (v8)
          return result;
LABEL_16:
        result = sub_1D4B1850C(v4, *(_BYTE *)(v4 + 60));
        *(_BYTE *)(v4 + 60) = 0;
        *(_DWORD *)(v4 + 56) = 8;
        return result;
      }
    }
  }
  if (!*(_DWORD *)(result + 56))
    goto LABEL_16;
  return result;
}

uint64_t sub_1D4B189E4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 56) != 8)
    sub_1D4B1850C(a1, *(_BYTE *)(a1 + 60));
  *(_DWORD *)(a1 + 56) = 8;
  *(_BYTE *)(a1 + 60) = 0;
  return sub_1D4B186C4(a1);
}

uint64_t sub_1D4B18A28(uint64_t a1, uint64_t a2)
{
  sub_1D4B18720(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, 8 - *(int *)(a1 + 56));
}

uint64_t sub_1D4B18A64@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = operator new(0x40uLL);
  v5 = *a1;
  *a1 = 0;
  v7 = v5;
  sub_1D4B1885C((uint64_t)v4, &v7);
  result = v7;
  if (v7)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *a2 = v4;
  return result;
}

void sub_1D4B18ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  operator delete(v10);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B18AF4(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E9848230;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1D4B18B34(_QWORD *__p)
{
  uint64_t v2;

  v2 = __p[1];
  *__p = &off_1E9848230;
  __p[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

uint64_t sub_1D4B18B74(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  sub_1D4B18BC4(a1);
  v4 = sub_1D4B019F4(a2);
  return sub_1D4B18D0C(a1, v4);
}

uint64_t sub_1D4B18BC4(uint64_t result)
{
  uint64_t v1;
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  std::runtime_error *exception;
  char *v8;
  int v9;

  v1 = result;
  v3 = *(char **)(result + 32);
  v2 = *(char **)(result + 40);
  if (v3 == v2)
  {
    v9 = 0;
    v8 = 0;
    result = (*(uint64_t (**)(_QWORD, char **, int *))(**(_QWORD **)(result + 8) + 16))(*(_QWORD *)(result + 8), &v8, &v9);
    if ((result & 1) == 0)
      goto LABEL_10;
    v3 = v8;
    v2 = &v8[v9];
    *(_QWORD *)(v1 + 32) = v8;
    *(_QWORD *)(v1 + 40) = v2;
  }
  v4 = v3 + 1;
  *(_QWORD *)(v1 + 32) = v3 + 1;
  v5 = *v3;
  if ((v5 & 0x8000000000000000) == 0)
  {
    *(_QWORD *)(v1 + 16) = v5 + 3;
    *(_BYTE *)(v1 + 48) = 1;
    if (v4 != v2)
    {
LABEL_8:
      *(_QWORD *)(v1 + 32) = v4 + 1;
      *(_BYTE *)(v1 + 24) = *v4;
      return result;
    }
    v9 = 0;
    v8 = 0;
    result = (*(uint64_t (**)(_QWORD, char **, int *))(**(_QWORD **)(v1 + 8) + 16))(*(_QWORD *)(v1 + 8), &v8, &v9);
    if ((result & 1) != 0)
    {
      v4 = v8;
      v6 = &v8[v9];
      *(_QWORD *)(v1 + 32) = v8;
      *(_QWORD *)(v1 + 40) = v6;
      goto LABEL_8;
    }
LABEL_10:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "bad read in nextBuffer");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  *(_QWORD *)(v1 + 16) = -v5;
  *(_BYTE *)(v1 + 48) = 0;
  return result;
}

void sub_1D4B18CF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B18D0C(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  std::runtime_error *exception;
  uint64_t v12;
  int v13;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 16);
      if (!v4)
      {
        result = sub_1D4B18BC4(v3);
        v4 = *(_QWORD *)(v3 + 16);
      }
      if (v4 >= v2)
        v5 = v2;
      else
        v5 = v4;
      *(_QWORD *)(v3 + 16) = v4 - v5;
      if (*(_BYTE *)(v3 + 48))
        v6 = 1;
      else
        v6 = v5 == 0;
      if (!v6)
      {
        v7 = *(_QWORD *)(v3 + 32);
        v8 = *(_QWORD *)(v3 + 40);
        v9 = v5;
        do
        {
          if (v7 == v8)
          {
            v13 = 0;
            v12 = 0;
            result = (*(uint64_t (**)(_QWORD, uint64_t *, int *))(**(_QWORD **)(v3 + 8) + 16))(*(_QWORD *)(v3 + 8), &v12, &v13);
            if ((result & 1) == 0)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              sub_1D4B2D1F0(exception, "bad read in nextBuffer");
              __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
            }
            v7 = v12;
            v8 = v12 + v13;
            *(_QWORD *)(v3 + 32) = v12;
            *(_QWORD *)(v3 + 40) = v8;
          }
          v10 = v8 - v7;
          if (v8 - v7 >= v9)
            v10 = v9;
          v7 += v10;
          *(_QWORD *)(v3 + 32) = v7;
          v9 -= v10;
        }
        while (v9);
      }
      v2 -= v5;
    }
    while (v2);
  }
  return result;
}

void sub_1D4B18E0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B18E20(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t i;
  size_t v9;
  size_t v10;
  size_t v11;
  _BYTE *v12;
  unsigned __int8 *v13;
  size_t v14;
  _BYTE *v16;
  unsigned __int8 *v17;
  size_t v18;
  _BYTE *v20;
  char *v21;
  size_t v22;
  size_t v23;
  char *v24;
  char *v25;
  size_t v26;
  size_t v27;
  std::runtime_error *exception;
  void *__src;
  int v30;

  v7 = result;
  i = 0;
  if (a4 && a3)
  {
    for (i = 0; i < a3; ++i)
    {
      if (*(_BYTE *)(a4 + i))
        break;
    }
  }
  if (i < a3)
  {
    v9 = *(_QWORD *)(result + 16);
    do
    {
      if (!v9)
      {
        result = sub_1D4B18BC4(v7);
        v9 = *(_QWORD *)(v7 + 16);
      }
      if (v9 >= a3 - i)
        v10 = a3 - i;
      else
        v10 = v9;
      if (*(_BYTE *)(v7 + 48))
      {
        if (a4)
        {
          if (!v10)
            goto LABEL_33;
          v11 = 0;
          v12 = (_BYTE *)(a2 + i);
          v13 = (unsigned __int8 *)(a4 + i);
          v14 = v10;
          do
          {
            if (*v13++)
            {
              *v12 = *(_BYTE *)(v7 + 24);
              ++v11;
            }
            ++v12;
            --v14;
          }
          while (v14);
          goto LABEL_44;
        }
        result = (uint64_t)memset((void *)(a2 + i), *(unsigned __int8 *)(v7 + 24), v10);
        v22 = v10;
      }
      else
      {
        if (a4)
        {
          if (v10)
          {
            v11 = 0;
            v16 = (_BYTE *)(a2 + i);
            v17 = (unsigned __int8 *)(a4 + i);
            v18 = v10;
            do
            {
              if (*v17++)
              {
                v20 = *(_BYTE **)(v7 + 32);
                if (v20 == *(_BYTE **)(v7 + 40))
                {
                  v30 = 0;
                  __src = 0;
                  result = (*(uint64_t (**)(_QWORD, void **, int *))(**(_QWORD **)(v7 + 8) + 16))(*(_QWORD *)(v7 + 8), &__src, &v30);
                  if ((result & 1) == 0)
                    goto LABEL_52;
                  v20 = __src;
                  v21 = (char *)__src + v30;
                  *(_QWORD *)(v7 + 32) = __src;
                  *(_QWORD *)(v7 + 40) = v21;
                }
                *(_QWORD *)(v7 + 32) = v20 + 1;
                *v16 = *v20;
                ++v11;
              }
              ++v16;
              --v18;
            }
            while (v18);
            goto LABEL_44;
          }
LABEL_33:
          v11 = 0;
LABEL_44:
          v9 = *(_QWORD *)(v7 + 16) - v11;
          *(_QWORD *)(v7 + 16) = v9;
          i += v10;
          if (a4)
          {
            while (i < a3 && !*(_BYTE *)(a4 + i))
              ++i;
          }
          continue;
        }
        if (v10)
        {
          v23 = 0;
          v24 = *(char **)(v7 + 32);
          do
          {
            v25 = *(char **)(v7 + 40);
            if (v24 == v25)
            {
              v30 = 0;
              __src = 0;
              if (((*(uint64_t (**)(_QWORD, void **, int *))(**(_QWORD **)(v7 + 8) + 16))(*(_QWORD *)(v7 + 8), &__src, &v30) & 1) == 0)
              {
LABEL_52:
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                sub_1D4B2D1F0(exception, "bad read in nextBuffer");
                __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
              }
              v24 = (char *)__src;
              v25 = (char *)__src + v30;
              *(_QWORD *)(v7 + 32) = __src;
              *(_QWORD *)(v7 + 40) = v25;
            }
            v26 = v25 - v24;
            if (v26 >= v10 - v23)
              v27 = v10 - v23;
            else
              v27 = v26;
            result = (uint64_t)memcpy((void *)(a2 + i + v23), v24, v27);
            v24 = (char *)(*(_QWORD *)(v7 + 32) + v27);
            *(_QWORD *)(v7 + 32) = v24;
            v23 += v27;
          }
          while (v23 < v10);
          v11 = v10;
          goto LABEL_44;
        }
        v22 = 0;
      }
      v9 = *(_QWORD *)(v7 + 16) - v22;
      *(_QWORD *)(v7 + 16) = v9;
      i += v10;
    }
    while (i < a3);
  }
  return result;
}

void sub_1D4B190C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B190E0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = operator new(0x38uLL);
  v5 = *a1;
  *a1 = 0;
  *result = &off_1E9848230;
  result[1] = v5;
  result[2] = 0;
  *((_BYTE *)result + 24) = 0;
  result[4] = 0;
  result[5] = 0;
  *((_BYTE *)result + 48) = 0;
  *a2 = result;
  return result;
}

_QWORD *sub_1D4B19130(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E9848230;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1D4B19170(_QWORD *__p)
{
  uint64_t v2;

  v2 = __p[1];
  *__p = &off_1E9848230;
  __p[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

unint64_t sub_1D4B191B0(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  std::runtime_error *exception;

  sub_1D4B18B74(a1, a2);
  result = sub_1D4B019F4(a2);
  *(_QWORD *)(a1 + 56) = 0;
  if (result >= 9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "bad position");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (result)
  {
    *(_QWORD *)(a1 + 56) = 8 - result;
    return sub_1D4B18E20(a1, a1 + 64, 1uLL, 0);
  }
  return result;
}

void sub_1D4B19244(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B19258(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;

  v2 = result;
  v3 = *(_QWORD *)(result + 56);
  v4 = v3 - a2;
  if (v3 < a2)
  {
    v5 = a2 - v3;
    result = sub_1D4B18D0C(result, (a2 - v3) >> 3);
    v6 = v5 & 7;
    if (v6)
    {
      result = sub_1D4B18E20(v2, v2 + 64, 1uLL, 0);
      v4 = 8 - v6;
    }
    else
    {
      v4 = 0;
    }
  }
  *(_QWORD *)(v2 + 56) = v4;
  return result;
}

void sub_1D4B192C0(uint64_t a1, uint64_t a2, size_t a3, uint64_t a4)
{
  int64_t v5;
  uint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  size_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  size_t v17;
  uint64_t v18;
  size_t v19;
  size_t v20;
  unsigned int v21;
  int v22;
  size_t v23;
  int v24;

  v5 = a3;
  v8 = *(_QWORD *)(a1 + 56);
  v9 = v8 != 0;
  v10 = a3 != 0;
  if (!a3)
    v9 = 0;
  if (a4)
  {
    v11 = 0;
    if (v9)
    {
      do
      {
        LOBYTE(v12) = *(_BYTE *)(a4 + v11);
        if ((_BYTE)v12)
        {
          *(_QWORD *)(a1 + 56) = v8 - 1;
          v12 = (*(unsigned __int8 *)(a1 + 64) >> (v8 - 1)) & 1;
        }
        *(_BYTE *)(a2 + v11++) = v12;
        v8 = *(_QWORD *)(a1 + 56);
        if (v8)
          v13 = v11 >= a3;
        else
          v13 = 1;
      }
      while (!v13);
    }
  }
  else
  {
    if (!v9)
    {
      v11 = 0;
      v17 = a3;
      v20 = a3;
      if (a3)
        goto LABEL_27;
      goto LABEL_35;
    }
    v14 = 0;
    do
    {
      v15 = v8 - 1;
      *(_QWORD *)(a1 + 56) = v15;
      v11 = v14 + 1;
      *(_BYTE *)(a2 + v14) = (*(unsigned __int8 *)(a1 + 64) >> v15) & 1;
      v8 = *(_QWORD *)(a1 + 56);
      if (v8)
        v16 = v11 >= a3;
      else
        v16 = 1;
      ++v14;
    }
    while (!v16);
  }
  v17 = a3 - v11;
  v10 = a3 > v11;
  if (a4 && a3 > v11)
  {
    v18 = a4;
    v19 = a3;
    v20 = a3 - v11;
    do
    {
      v20 -= *(_BYTE *)(v18 + v11) == 0;
      --v19;
      ++v18;
    }
    while (v11 != v19);
  }
  else
  {
    v20 = a3 - v11;
  }
  if (v20)
  {
LABEL_27:
    if (v10)
    {
      sub_1D4B18E20(a1, a2 + v11, (v20 + 7) >> 3, 0);
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(v11 + ((v20 + 7) >> 3) + a2 - 1);
      *(_QWORD *)(a1 + 56) = ((v20 + 7) & 0xFFFFFFFFFFFFFFF8) - v20;
      if (a4)
      {
        for (; v5 > (uint64_t)v11; --v5)
        {
          LOBYTE(v21) = *(_BYTE *)(a4 - 1 + v5);
          if ((_BYTE)v21)
          {
            v22 = -(int)v20--;
            v21 = (*(char *)(a2 + v11 + (v20 >> 3)) >> (v22 & 7)) & 1;
          }
          *(_BYTE *)(a2 - 1 + v5) = v21;
        }
      }
      else if ((uint64_t)v11 < v5)
      {
        v23 = v20 - 1;
        v24 = -(int)v20;
        do
          *(_BYTE *)(a2 - 1 + v5--) = (*(char *)(a2 + v11 + (v23-- >> 3)) >> (v24++ & 7)) & 1;
        while (v5 > (uint64_t)v11);
      }
    }
    return;
  }
LABEL_35:
  if (v10)
    bzero((void *)(a2 + v11), v17);
}

_QWORD *sub_1D4B194D8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = operator new(0x48uLL);
  v5 = *a1;
  *a1 = 0;
  result[1] = v5;
  result[2] = 0;
  *((_BYTE *)result + 24) = 0;
  result[4] = 0;
  result[5] = 0;
  *((_BYTE *)result + 48) = 0;
  *result = &off_1E9848920;
  result[7] = 0;
  *((_BYTE *)result + 64) = 0;
  *a2 = result;
  return result;
}

_QWORD *sub_1D4B19530(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = &off_1E9847568;
  a1[1] = 0;
  a1[2] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  a1[3] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a3 + 32))(&v14, a3, a1[2], 0, 1);
  v5 = v14;
  if (v14)
  {
    v14 = 0;
    v12 = v5;
    sub_1D4B194D8(&v12, &v13);
    v6 = v13;
    v13 = 0;
    v7 = a1[1];
    a1[1] = v6;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v8 = v13;
      v13 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    v9 = v12;
    v12 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v14;
    v14 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return a1;
}

void sub_1D4B19634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  v14 = *(_QWORD *)(v12 + 8);
  *(_QWORD *)(v12 + 8) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4B19694(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E9847568;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1D4B196D4(_QWORD *__p)
{
  uint64_t v2;

  v2 = __p[1];
  *__p = &off_1E9847568;
  __p[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

unint64_t sub_1D4B19714()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE v12[32768];
  uint64_t v13;

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v13 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(v0 + 8);
  if (v3)
  {
    if (!v1)
      return 0;
    v4 = v1;
    v5 = v1;
    do
    {
      if (v2 >= v5)
        v6 = v5;
      else
        v6 = v2;
      if (v6 >= 0x8000)
        v7 = 0x8000;
      else
        v7 = v6;
      (*(void (**)(uint64_t, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)v3 + 32))(v3, v12, v7, 0);
      if (v7)
      {
        v8 = v12;
        v9 = v7;
        do
        {
          v10 = *v8++;
          v4 -= v10 == 0;
          --v9;
        }
        while (v9);
      }
      v5 -= v7;
    }
    while (v5);
    return v4;
  }
  return v2;
}

void *sub_1D4B19814(uint64_t a1, uint64_t a2, size_t __n, void *__src)
{
  size_t v5;
  void *result;
  unsigned __int8 *v9;

  v5 = __n;
  if (*(_QWORD *)(a2 + 8) < __n)
    (*(void (**)(uint64_t, size_t))(*(_QWORD *)a2 + 24))(a2, __n);
  *(_QWORD *)(a2 + 16) = v5;
  result = *(void **)(a1 + 8);
  if (!result)
  {
    if (__src)
    {
      *(_BYTE *)(a2 + 64) = 1;
      return memcpy(*(void **)(a2 + 40), __src, v5);
    }
    goto LABEL_10;
  }
  v9 = *(unsigned __int8 **)(a2 + 40);
  result = (void *)(*(uint64_t (**)(void *, unsigned __int8 *, size_t, void *))(*(_QWORD *)result + 32))(result, v9, v5, __src);
  if (!v5)
  {
LABEL_10:
    *(_BYTE *)(a2 + 64) = 0;
    return result;
  }
  while (*v9++)
  {
    if (!--v5)
      goto LABEL_10;
  }
  *(_BYTE *)(a2 + 64) = 1;
  return result;
}

uint64_t sub_1D4B198DC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v3 = sub_1D4B1F168(a2, (unint64_t *)(result + 16));
    if (!v3)
      sub_1D4B1F118("unordered_map::at: key not found");
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v3 + 3);
  }
  return result;
}

_QWORD *sub_1D4B19938(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::runtime_error *exception;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_1D4B19530(a1, a2, a3);
  *v5 = off_1E9848500;
  v5[4] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(&v16, a3, v5[2], 1, 1);
  v6 = v16;
  if (!v16)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "DATA stream not found in Boolean column");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v16 = 0;
  v14 = v6;
  sub_1D4B194D8(&v14, &v15);
  v7 = v15;
  v15 = 0;
  v8 = a1[4];
  a1[4] = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v15;
    v15 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v10 = v14;
  v14 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v16;
  v16 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void sub_1D4B19A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  v14 = v12[4];
  v12[4] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v12[1];
  *v12 = &off_1E9847568;
  v12[1] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4B19AEC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1E9848500;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  *a1 = &off_1E9847568;
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_1D4B19B54(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B19AEC(a1);
  operator delete(v1);
}

unint64_t sub_1D4B19B68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D4B19714();
  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), v2);
  return v2;
}

uint64_t sub_1D4B19BA4(uint64_t a1, uint64_t a2, size_t a3, void *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  size_t v11;

  sub_1D4B19814(a1, a2, a3, a4);
  v7 = __dynamic_cast((const void *)a2, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846298, 0);
  if (!v7)
    __cxa_bad_cast();
  v8 = v7[12];
  if (*(_BYTE *)(a2 + 64))
    v9 = *(_QWORD *)(a2 + 40);
  else
    v9 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t, size_t, uint64_t))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32), v8, a3, v9);
  if (a3)
  {
    v11 = a3 - 1;
    do
    {
      *(_QWORD *)(v8 + 8 * v11) = *(char *)(v8 + v11);
      --v11;
    }
    while (v11 < a3);
  }
  return result;
}

uint64_t sub_1D4B19C40(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;

  sub_1D4B198DC(a1, a2);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = sub_1D4B1F168(a2, (unint64_t *)(a1 + 16));
  if (!v5)
    sub_1D4B1F118("unordered_map::at: key not found");
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v5 + 3);
}

_QWORD *sub_1D4B19C9C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::runtime_error *exception;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_1D4B19530(a1, a2, a3);
  *v5 = off_1E9847BB8;
  v5[4] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(&v16, a3, v5[2], 1, 1);
  v6 = v16;
  if (!v16)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "DATA stream not found in Byte column");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v16 = 0;
  v14 = v6;
  sub_1D4B190E0(&v14, &v15);
  v7 = v15;
  v15 = 0;
  v8 = a1[4];
  a1[4] = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v15;
    v15 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v10 = v14;
  v14 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v16;
  v16 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void sub_1D4B19DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  v14 = v12[4];
  v12[4] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v12[1];
  *v12 = &off_1E9847568;
  v12[1] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4B19E50(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1E9847BB8;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  *a1 = &off_1E9847568;
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_1D4B19EB8(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B19E50(a1);
  operator delete(v1);
}

unint64_t sub_1D4B19ECC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D4B19714();
  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), v2);
  return v2;
}

uint64_t sub_1D4B19F08(uint64_t a1, uint64_t a2, size_t a3, void *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  size_t v11;

  sub_1D4B19814(a1, a2, a3, a4);
  v7 = __dynamic_cast((const void *)a2, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846298, 0);
  if (!v7)
    __cxa_bad_cast();
  v8 = v7[12];
  if (*(_BYTE *)(a2 + 64))
    v9 = *(_QWORD *)(a2 + 40);
  else
    v9 = 0;
  result = (*(uint64_t (**)(_QWORD, uint64_t, size_t, uint64_t))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32), v8, a3, v9);
  if (a3)
  {
    v11 = a3 - 1;
    do
    {
      *(_QWORD *)(v8 + 8 * v11) = *(char *)(v8 + v11);
      --v11;
    }
    while (v11 < a3);
  }
  return result;
}

uint64_t sub_1D4B19FA4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;

  sub_1D4B198DC(a1, a2);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = sub_1D4B1F168(a2, (unint64_t *)(a1 + 16));
  if (!v5)
    sub_1D4B1F118("unordered_map::at: key not found");
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v5 + 3);
}

_QWORD *sub_1D4B1A000(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::runtime_error *exception;
  std::runtime_error *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  unsigned int v19;

  v5 = sub_1D4B19530(a1, a2, a3);
  *v5 = off_1E98485D0;
  v5[4] = 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(v18, a3, v5[2]);
  if (v19 >= 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Unknown encoding in convertRleVersion");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = dword_1D4BD4910[v19];
  sub_1D4B0AFC4(v18);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(v18, a3, a1[2], 1, 1);
  v7 = v18[0];
  if (!v18[0])
  {
    v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(v15, "DATA stream not found in Integer column");
    __cxa_throw(v15, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v18[0] = 0;
  v16 = v7;
  sub_1D4B3AE10(&v16, 1, v6, a1[3], &v17);
  v8 = v17;
  v17 = 0;
  v9 = a1[4];
  a1[4] = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v17;
    v17 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v16;
  v16 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = v18[0];
  v18[0] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return a1;
}

void sub_1D4B1A198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  v14 = v12[4];
  v12[4] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v12[1];
  *v12 = &off_1E9847568;
  v12[1] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4B1A250(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1E98485D0;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  *a1 = &off_1E9847568;
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_1D4B1A2B8(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B1A250(a1);
  operator delete(v1);
}

unint64_t sub_1D4B1A2CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D4B19714();
  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), v2);
  return v2;
}

uint64_t sub_1D4B1A308(uint64_t a1, uint64_t a2, size_t a3, void *a4)
{
  _QWORD *v7;
  uint64_t v8;

  sub_1D4B19814(a1, a2, a3, a4);
  v7 = __dynamic_cast((const void *)a2, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846298, 0);
  if (!v7)
    __cxa_bad_cast();
  if (*(_BYTE *)(a2 + 64))
    v8 = *(_QWORD *)(a2 + 40);
  else
    v8 = 0;
  return (*(uint64_t (**)(_QWORD, _QWORD, size_t, uint64_t))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32), v7[12], a3, v8);
}

uint64_t sub_1D4B1A384(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;

  sub_1D4B198DC(a1, a2);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = sub_1D4B1F168(a2, (unint64_t *)(a1 + 16));
  if (!v5)
    sub_1D4B1F118("unordered_map::at: key not found");
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v5 + 3);
}

_QWORD *sub_1D4B1A3E0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::runtime_error *exception;
  std::runtime_error *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  unsigned int v29;

  v5 = sub_1D4B19530(a1, a2, a3);
  *v5 = off_1E9848BD0;
  v5[4] = 0;
  v6 = v5 + 4;
  v5[5] = 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
  a1[6] = v7;
  a1[7] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(v28, a3, a1[2]);
  if (v29 >= 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Unknown encoding in convertRleVersion");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v8 = dword_1D4BD4910[v29];
  sub_1D4B0AFC4(v28);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(v28, a3, a1[2], 1, 1);
  v9 = v28[0];
  if (!v28[0])
  {
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(v24, "DATA stream not found in Timestamp column");
    goto LABEL_24;
  }
  v28[0] = 0;
  v26 = v9;
  sub_1D4B3AE10(&v26, 1, v8, a1[3], &v27);
  v10 = v27;
  v27 = 0;
  v11 = *v6;
  *v6 = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v27;
    v27 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v26;
  v26 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(&v27, a3, a1[2], 5, 1);
  v15 = v27;
  v14 = v28[0];
  v27 = 0;
  v28[0] = v15;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v16 = v27;
    v27 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v15 = v28[0];
  }
  if (!v15)
  {
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(v24, "SECONDARY stream not found in Timestamp column");
LABEL_24:
    __cxa_throw(v24, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v28[0] = 0;
  v25 = v15;
  sub_1D4B3AE10(&v25, 0, v8, a1[3], &v27);
  v17 = v27;
  v27 = 0;
  v18 = a1[5];
  a1[5] = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v27;
    v27 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v25;
  v25 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = v28[0];
  v28[0] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  return a1;
}

void sub_1D4B1A688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  void *v13;
  uint64_t *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  __cxa_free_exception(v13);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  v16 = v12[5];
  v12[5] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *v14;
  *v14 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = v12[1];
  *v12 = &off_1E9847568;
  v12[1] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B1A778(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1E9848BD0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  *a1 = &off_1E9847568;
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

void sub_1D4B1A7F8(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B1A778(a1);
  operator delete(v1);
}

unint64_t sub_1D4B1A80C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D4B19714();
  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), v2);
  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40), v2);
  return v2;
}

uint64_t sub_1D4B1A85C(uint64_t a1, uint64_t a2, size_t a3, void *a4)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_1D4B19814(a1, a2, a3, a4);
  if (*(_BYTE *)(a2 + 64))
    v7 = *(_QWORD *)(a2 + 40);
  else
    v7 = 0;
  v8 = __dynamic_cast((const void *)a2, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E98466D8, 0);
  if (!v8)
    __cxa_bad_cast();
  v9 = v8;
  v10 = v8[12];
  (*(void (**)(_QWORD, uint64_t, size_t, uint64_t))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32), v10, a3, v7);
  v11 = v9[17];
  result = (*(uint64_t (**)(_QWORD, uint64_t, size_t, uint64_t))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), v11, a3, v7);
  if (a3)
  {
    v13 = 0;
    do
    {
      if (!v7 || *(_BYTE *)(v7 + v13))
      {
        v14 = *(_QWORD *)(v11 + 8 * v13);
        v15 = v14 >> 3;
        *(_QWORD *)(v11 + 8 * v13) = v14 >> 3;
        v16 = v14 & 7;
        if (v16)
        {
          v17 = v16 + 1;
          do
          {
            v15 *= 10;
            --v17;
          }
          while (v17);
          *(_QWORD *)(v11 + 8 * v13) = v15;
        }
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 48) + 48))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56) + *(_QWORD *)(v10 + 8 * v13));
        *(_QWORD *)(v10 + 8 * v13) = result;
        if (result < 0)
        {
          if (*(_QWORD *)(v11 + 8 * v13))
            *(_QWORD *)(v10 + 8 * v13) = result - 1;
        }
      }
      ++v13;
    }
    while (v13 != a3);
  }
  return result;
}

uint64_t sub_1D4B1A988(unint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;

  sub_1D4B198DC((uint64_t)a1, a2);
  v4 = a1[4];
  v5 = a1 + 2;
  v6 = sub_1D4B1F168(a2, a1 + 2);
  if (!v6
    || ((*(void (**)(unint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v6 + 3),
        v7 = a1[5],
        (v8 = sub_1D4B1F168(a2, v5)) == 0))
  {
    sub_1D4B1F118("unordered_map::at: key not found");
  }
  return (*(uint64_t (**)(unint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v8 + 3);
}

uint64_t sub_1D4B1AA10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::runtime_error *exception;
  uint64_t v14;

  v6 = sub_1D4B19530((_QWORD *)a1, a2, a3);
  *v6 = off_1E98482A8;
  v6[4] = 0;
  *(_DWORD *)(a1 + 40) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v8 = 8;
  if (v7 == 5)
    v8 = 4;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = v8;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(&v14, a3, *(_QWORD *)(a1 + 16), 1, 1);
  v9 = v14;
  v14 = 0;
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v14;
    v14 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v9 = *(_QWORD *)(a1 + 32);
  }
  if (!v9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "DATA stream not found in Double column");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return a1;
}

void sub_1D4B1AB2C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;

  __cxa_free_exception(v2);
  v4 = v1[4];
  v1[4] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = v1[1];
  *v1 = &off_1E9847568;
  v1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B1AB84(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1E98482A8;
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  *a1 = &off_1E9847568;
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_1D4B1ABEC(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B1AB84(a1);
  operator delete(v1);
}

unint64_t sub_1D4B1AC00(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = sub_1D4B19714();
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64) - v3;
  v5 = *(_QWORD *)(a1 + 48) * v2;
  v6 = v5 - v4;
  if (v5 <= v4)
  {
    v8 = v3 + v5;
  }
  else
  {
    do
    {
      if (v6 >= 0x7FFFFFFF)
        v7 = 0x7FFFFFFFLL;
      else
        v7 = v6;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32), v7);
      v6 -= v7;
    }
    while (v6);
    v8 = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_QWORD *)(a1 + 56) = v8;
  return v2;
}

uint64_t sub_1D4B1AC90(uint64_t a1, uint64_t a2, size_t a3, void *a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_1D4B19814(a1, a2, a3, a4);
  if (*(_BYTE *)(a2 + 64))
    v7 = *(_QWORD *)(a2 + 40);
  else
    v7 = 0;
  result = (uint64_t)__dynamic_cast((const void *)a2, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846410, 0);
  if (!result)
    __cxa_bad_cast();
  v9 = *(_QWORD *)(result + 96);
  if (*(_DWORD *)(a1 + 40) == 5)
  {
    if (v7)
    {
      if (a3)
      {
        v10 = 0;
        do
        {
          if (*(_BYTE *)(v7 + v10))
          {
            v11 = 0;
            v12 = 0.0;
            do
            {
              result = sub_1D4B1F064(a1);
              LODWORD(v12) |= (_DWORD)result << v11;
              v11 += 8;
            }
            while (v11 != 32);
            *(double *)(v9 + 8 * v10) = v12;
          }
          ++v10;
        }
        while (v10 != a3);
      }
    }
    else if (a3)
    {
      v16 = 0;
      do
      {
        v17 = 0;
        v18 = 0.0;
        do
        {
          result = sub_1D4B1F064(a1);
          LODWORD(v18) |= (_DWORD)result << v17;
          v17 += 8;
        }
        while (v17 != 32);
        *(double *)(v9 + 8 * v16++) = v18;
      }
      while (v16 != a3);
    }
  }
  else if (v7)
  {
    if (a3)
    {
      v13 = 0;
      do
      {
        if (*(_BYTE *)(v7 + v13))
        {
          v14 = 0;
          v15 = 0;
          do
          {
            result = sub_1D4B1F064(a1);
            v15 |= (unint64_t)result << v14;
            v14 += 8;
          }
          while (v14 != 64);
          *(_QWORD *)(v9 + 8 * v13) = v15;
        }
        ++v13;
      }
      while (v13 != a3);
    }
  }
  else if (a3)
  {
    v19 = 0;
    do
    {
      v20 = 0;
      v21 = 0;
      do
      {
        result = sub_1D4B1F064(a1);
        v21 |= (unint64_t)result << v20;
        v20 += 8;
      }
      while (v20 != 64);
      *(_QWORD *)(v9 + 8 * v19++) = v21;
    }
    while (v19 != a3);
  }
  return result;
}

char *sub_1D4B1AE40(char *result, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  std::runtime_error *exception;
  _DWORD __n[3];

  if (a2 >= 1)
  {
    v5 = result;
    v6 = 0;
    while (1)
    {
      memset(__n, 0, sizeof(__n));
      if (((*(uint64_t (**)(uint64_t, _DWORD *, _DWORD *))(*(_QWORD *)a3 + 16))(a3, &__n[1], __n) & 1) == 0)
        break;
      v7 = v6 + __n[0];
      if (v7 > a2)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        sub_1D4B2D1F0(exception, "Corrupt dictionary blob in StringDictionaryColumn");
LABEL_9:
        __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
      }
      result = (char *)memcpy(&v5[v6], *(const void **)&__n[1], __n[0]);
      v6 = v7;
      if (v7 >= a2)
        return result;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "bad read in readFully");
    goto LABEL_9;
  }
  return result;
}

void sub_1D4B1AF20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B1AF38(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;

  sub_1D4B198DC(a1, a2);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = sub_1D4B1F168(a2, (unint64_t *)(a1 + 16));
  if (!v5)
    sub_1D4B1F118("unordered_map::at: key not found");
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 48))(v4, v5 + 3);
}

_QWORD *sub_1D4B1AF94(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t *v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::runtime_error *exception;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  unsigned int v29;
  unsigned int v30;

  v5 = sub_1D4B19530(a1, a2, a3);
  *v5 = off_1E98498A0;
  v6 = v5 + 4;
  v7 = operator new(0x50uLL);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
  sub_1D4B48CA0(v7, v8);
  sub_1D4B1F240(v6, (uint64_t)v7);
  a1[6] = 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(v28, a3, a1[2]);
  if (v29 >= 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Unknown encoding in convertRleVersion");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v9 = dword_1D4BD4910[v29];
  sub_1D4B0AFC4(v28);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(v28, a3, a1[2]);
  v10 = v30;
  sub_1D4B0AFC4(v28);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(&v27, a3, a1[2], 1, 1);
  sub_1D4B3AE10(&v27, 0, v9, a1[3], v28);
  v11 = v28[0];
  v28[0] = 0;
  v12 = a1[6];
  a1[6] = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v28[0];
    v28[0] = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v14 = v27;
  v27 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(&v26, a3, a1[2], 2, 0);
  sub_1D4B3AE10(&v26, 0, v9, a1[3], v28);
  v15 = v26;
  v26 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (v10 + 1);
  sub_1D4B2F150(*v6 + 40, v16);
  v17 = *(_QWORD **)(*v6 + 56);
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(*(_QWORD *)v28[0] + 32))(v28[0], v17 + 1, v10, 0);
  *v17 = 0;
  if (v16 >= 2)
  {
    v18 = 0;
    v19 = v17 + 1;
    v20 = v16 - 1;
    do
    {
      v18 += *v19;
      *v19++ = v18;
      --v20;
    }
    while (v20);
  }
  sub_1D4B2EF9C(*v6, v17[v10]);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a3 + 32))(&v25, a3, a1[2], 3, 0);
  sub_1D4B1AE40(*(char **)(*v6 + 16), v17[v10], v25);
  v21 = v25;
  v25 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = v28[0];
  v28[0] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  return a1;
}

void sub_1D4B1B258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a4);
  sub_1D4B0AFC4((uint64_t *)va);
  v7 = v4[6];
  v4[6] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_1D4B1F3DC(v5);
  v8 = v4[1];
  *v4 = &off_1E9847568;
  v4[1] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  _Unwind_Resume(a1);
}

void sub_1D4B1B340()
{
  JUMPOUT(0x1D4B1B318);
}

void sub_1D4B1B348()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x1D4B1B318);
}

_QWORD *sub_1D4B1B358(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1E98498A0;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1D4B1F3DC((uint64_t)(a1 + 4));
  v3 = a1[1];
  *a1 = &off_1E9847568;
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_1D4B1B3C8(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B1B358(a1);
  operator delete(v1);
}

unint64_t sub_1D4B1B3DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1D4B19714();
  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), v2);
  return v2;
}

uint64_t sub_1D4B1B418(uint64_t a1, uint64_t a2, size_t a3, void *a4)
{
  size_t v4;
  unsigned __int8 *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  uint64_t result;
  unint64_t v15;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  std::runtime_error *exception;

  v4 = a3;
  sub_1D4B19814(a1, a2, a3, a4);
  if (*(_BYTE *)(a2 + 64))
    v7 = *(unsigned __int8 **)(a2 + 40);
  else
    v7 = 0;
  v8 = __dynamic_cast((const void *)a2, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846450, 0);
  if (!v8)
    __cxa_bad_cast();
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v9 + 56);
  v12 = (_QWORD *)v8[12];
  v13 = (unint64_t *)v8[17];
  result = (*(uint64_t (**)(_QWORD, unint64_t *, size_t, unsigned __int8 *))(**(_QWORD **)(a1 + 48)
                                                                                            + 32))(*(_QWORD *)(a1 + 48), v13, v4, v7);
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) - 1;
  if (v7)
  {
    for (; v4; --v4)
    {
      if (*v7++)
      {
        v17 = *v13;
        if ((*v13 & 0x8000000000000000) != 0 || v17 >= v15)
          goto LABEL_18;
        v18 = (uint64_t *)(v11 + 8 * v17);
        v20 = *v18;
        v19 = v18[1];
        *v12 = v10 + v20;
        *v13 = v19 - v20;
      }
      ++v12;
      ++v13;
    }
  }
  else
  {
    for (; v4; --v4)
    {
      v21 = *v13;
      if ((*v13 & 0x8000000000000000) != 0 || v21 >= v15)
      {
LABEL_18:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        sub_1D4B2D1F0(exception, "Entry index out of range in StringDictionaryColumn");
        __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
      }
      v22 = (uint64_t *)(v11 + 8 * v21);
      v24 = *v22;
      v23 = v22[1];
      *v12++ = v10 + v24;
      *v13++ = v23 - v24;
    }
  }
  return result;
}

void sub_1D4B1B594(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B1B5AC(uint64_t a1, uint64_t a2, size_t a3, void *a4)
{
  int v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  sub_1D4B19814(a1, a2, a3, a4);
  v7 = *(unsigned __int8 *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a2 + 65) = 1;
  v9 = __dynamic_cast((const void *)a2, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E98469D8, 0);
  if (!v9)
    __cxa_bad_cast();
  v10 = v9;
  if (!v7)
    v8 = 0;
  sub_1D4B1B648(v9 + 25, (uint64_t *)(a1 + 32));
  return (*(uint64_t (**)(_QWORD, _QWORD, size_t, uint64_t))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v10[29], a3, v8);
}

_QWORD *sub_1D4B1B648(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t sub_1D4B1B6C0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;

  sub_1D4B198DC(a1, a2);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = sub_1D4B1F168(a2, (unint64_t *)(a1 + 16));
  if (!v5)
    sub_1D4B1F118("unordered_map::at: key not found");
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v5 + 3);
}

_QWORD *sub_1D4B1B71C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::runtime_error *exception;
  std::runtime_error *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  unsigned int v23;

  v5 = sub_1D4B19530(a1, a2, a3);
  *v5 = off_1E9849290;
  v5[4] = 0;
  v6 = v5 + 4;
  v5[5] = 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(v22, a3, v5[2]);
  if (v23 >= 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Unknown encoding in convertRleVersion");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v7 = dword_1D4BD4910[v23];
  sub_1D4B0AFC4(v22);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(v22, a3, a1[2], 2, 1);
  v8 = v22[0];
  if (!v22[0])
  {
    v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(v19, "LENGTH stream not found in StringDirectColumn");
    goto LABEL_19;
  }
  v22[0] = 0;
  v20 = v8;
  sub_1D4B3AE10(&v20, 0, v7, a1[3], &v21);
  v9 = v21;
  v21 = 0;
  v10 = *v6;
  *v6 = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v21;
    v21 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v20;
  v20 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(&v21, a3, a1[2], 1, 1);
  v13 = v21;
  v21 = 0;
  v14 = a1[5];
  a1[5] = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v21;
    v21 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v13 = a1[5];
  }
  if (!v13)
  {
    v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(v19, "DATA stream not found in StringDirectColumn");
LABEL_19:
    __cxa_throw(v19, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  a1[6] = 0;
  a1[7] = 0;
  v16 = v22[0];
  v22[0] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return a1;
}

void sub_1D4B1B93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  void *v13;
  uint64_t *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  __cxa_free_exception(v13);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  v16 = v12[5];
  v12[5] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *v14;
  *v14 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = v12[1];
  *v12 = &off_1E9847568;
  v12[1] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B1BA14(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1E9849290;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  *a1 = &off_1E9847568;
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

void sub_1D4B1BA94(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B1BA14(a1);
  operator delete(v1);
}

unint64_t sub_1D4B1BAA8()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE v13[8192];
  uint64_t v14;

  v0 = MEMORY[0x1E0C80A78]();
  v14 = *MEMORY[0x1E0C80C00];
  v1 = sub_1D4B19714();
  if (!v1)
  {
    v3 = 0;
    v9 = *(_QWORD *)(v0 + 56);
LABEL_17:
    *(_QWORD *)(v0 + 48) += v3;
    *(_QWORD *)(v0 + 56) = v9 - v3;
    return v1;
  }
  v2 = 0;
  v3 = 0;
  do
  {
    if (v1 - v2 >= 0x400)
      v4 = 1024;
    else
      v4 = v1 - v2;
    (*(void (**)(_QWORD, _BYTE *, uint64_t, _QWORD))(**(_QWORD **)(v0 + 32) + 32))(*(_QWORD *)(v0 + 32), v13, v4, 0);
    v5 = 0;
    if (v4)
    {
      v6 = (uint64_t *)v13;
      v7 = v4;
      do
      {
        v8 = *v6++;
        v5 += v8;
        --v7;
      }
      while (v7);
    }
    v3 += v5;
    v2 += v4;
  }
  while (v2 < v1);
  v9 = *(_QWORD *)(v0 + 56);
  v10 = v3 - v9;
  if (v3 <= v9)
    goto LABEL_17;
  do
  {
    if (v10 >= 0x7FFFFFFF)
      v11 = 0x7FFFFFFFLL;
    else
      v11 = v10;
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v0 + 40) + 32))(*(_QWORD *)(v0 + 40), v11);
    v10 -= v11;
  }
  while (v10);
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  return v1;
}

void sub_1D4B1BBF4(uint64_t a1, uint64_t a2, size_t a3, void *a4)
{
  size_t v4;
  unsigned __int8 *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t *v14;
  size_t v15;
  uint64_t *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  const void *v23;
  uint64_t v24;
  BOOL v25;
  size_t v26;
  size_t v27;
  uint64_t v28;
  uint64_t v30;
  std::runtime_error *exception;
  int v32;
  const void *v33;

  v4 = a3;
  sub_1D4B19814(a1, a2, a3, a4);
  if (*(_BYTE *)(a2 + 64))
    v7 = *(unsigned __int8 **)(a2 + 40);
  else
    v7 = 0;
  v8 = __dynamic_cast((const void *)a2, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846450, 0);
  if (!v8)
    __cxa_bad_cast();
  v9 = v8;
  v10 = (_QWORD *)v8[12];
  v11 = (uint64_t *)v8[17];
  (*(void (**)(_QWORD, uint64_t *, size_t, unsigned __int8 *))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32), v11, v4, v7);
  if (!v7)
  {
    if (v4)
    {
      v12 = 0;
      v17 = v11;
      v18 = v4;
      do
      {
        v19 = *v17++;
        v12 += v19;
        --v18;
      }
      while (v18);
      goto LABEL_17;
    }
LABEL_16:
    v12 = 0;
    goto LABEL_17;
  }
  if (!v4)
    goto LABEL_16;
  v12 = 0;
  v13 = v7;
  v14 = v11;
  v15 = v4;
  do
  {
    if (*v13++)
      v12 += *v14;
    ++v14;
    --v15;
  }
  while (v15);
LABEL_17:
  sub_1D4B2EF9C((uint64_t)(v9 + 20), v12);
  v20 = v9[22];
  v21 = *(_QWORD *)(a1 + 56);
  if (v21 >= v12)
  {
    v22 = 0;
  }
  else
  {
    v22 = 0;
    v23 = *(const void **)(a1 + 48);
    do
    {
      memcpy((void *)(v20 + v22), v23, v21);
      v24 = *(_QWORD *)(a1 + 56);
      v33 = 0;
      v32 = 0;
      if (((*(uint64_t (**)(_QWORD, const void **, int *))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v33, &v32) & 1) == 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        sub_1D4B2D1F0(exception, "failed to read in StringDirectColumnReader.next");
        __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
      }
      v22 += v24;
      v23 = v33;
      v21 = v32;
      *(_QWORD *)(a1 + 48) = v33;
      *(_QWORD *)(a1 + 56) = v21;
    }
    while (v22 + v21 < v12);
  }
  v25 = v12 > v22;
  v26 = v12 - v22;
  if (v25)
  {
    memcpy((void *)(v20 + v22), *(const void **)(a1 + 48), v26);
    v27 = *(_QWORD *)(a1 + 56) - v26;
    *(_QWORD *)(a1 + 48) += v26;
    *(_QWORD *)(a1 + 56) = v27;
  }
  v28 = v9[22];
  if (v7)
  {
    for (; v4; --v4)
    {
      if (*v7++)
      {
        *v10 = v28;
        v28 += *v11;
      }
      ++v11;
      ++v10;
    }
  }
  else
  {
    for (; v4; --v4)
    {
      *v10++ = v28;
      v30 = *v11++;
      v28 += v30;
    }
  }
}

void sub_1D4B1BE1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B1BE30(unint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;

  sub_1D4B198DC((uint64_t)a1, a2);
  v4 = a1[5];
  v5 = a1 + 2;
  v6 = sub_1D4B1F168(a2, a1 + 2);
  if (!v6
    || ((*(void (**)(unint64_t, _QWORD *))(*(_QWORD *)v4 + 48))(v4, v6 + 3),
        v7 = a1[4],
        (v8 = sub_1D4B1F168(a2, v5)) == 0))
  {
    sub_1D4B1F118("unordered_map::at: key not found");
  }
  return (*(uint64_t (**)(unint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v8 + 3);
}

_QWORD *sub_1D4B1BEB8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  char **v7;
  int v8;
  unsigned int i;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  std::runtime_error *exception;
  _QWORD v27[3];
  int v28;
  void *__p;

  v6 = sub_1D4B19530(a1, a2, a3);
  *v6 = off_1E9848430;
  v6[4] = 0;
  v7 = (char **)(v6 + 4);
  v6[5] = 0;
  v6[6] = 0;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a3 + 16))(&__p, a3);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(v27, a3, a1[2]);
  v8 = v28;
  sub_1D4B0AFC4(v27);
  if (v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Unknown encoding for StructColumnReader");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  for (i = 0; (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) > (unint64_t)i; ++i)
  {
    v10 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 48))(a2, i);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    if (((*(_QWORD *)((char *)__p + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
    {
      sub_1D4B1C164(v27, v10, a3);
      v12 = v27[0];
      v27[0] = 0;
      v14 = (_QWORD *)a1[5];
      v13 = a1[6];
      if ((unint64_t)v14 >= v13)
      {
        v16 = ((char *)v14 - *v7) >> 3;
        if ((unint64_t)(v16 + 1) >> 61)
          sub_1D4B182AC();
        v17 = v13 - (_QWORD)*v7;
        v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1))
          v18 = v16 + 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v20 = (char *)sub_1D4B182C0((uint64_t)(a1 + 6), v19);
        else
          v20 = 0;
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = v12;
        v15 = v21 + 8;
        v23 = (char *)a1[4];
        v22 = (char *)a1[5];
        if (v22 != v23)
        {
          do
          {
            v24 = *((_QWORD *)v22 - 1);
            v22 -= 8;
            *((_QWORD *)v21 - 1) = v24;
            v21 -= 8;
          }
          while (v22 != v23);
          v22 = *v7;
        }
        a1[4] = v21;
        a1[5] = v15;
        a1[6] = &v20[8 * v19];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v14 = v12;
        v15 = v14 + 1;
      }
      a1[5] = v15;
      if (v27[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v27[0] + 8))(v27[0]);
    }
  }
  if (__p)
    operator delete(__p);
  return a1;
}

void sub_1D4B1C0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  _QWORD *v14;
  void **v15;
  void *v17;
  uint64_t v18;

  if (__p)
    operator delete(__p);
  v17 = *v15;
  if (*v15)
  {
    v14[5] = v17;
    operator delete(v17);
  }
  v18 = v14[1];
  *v14 = &off_1E9847568;
  v14[1] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4B1C164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  unint64_t v10;
  std::logic_error *exception;
  _QWORD v12[3];
  int v13;

  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
  {
    case 0u:
      v6 = operator new(0x28uLL);
      result = (uint64_t)sub_1D4B19938(v6, a1, a2);
      break;
    case 1u:
      v6 = operator new(0x28uLL);
      result = (uint64_t)sub_1D4B19C9C(v6, a1, a2);
      break;
    case 2u:
    case 3u:
    case 4u:
    case 0xFu:
      v6 = operator new(0x28uLL);
      result = (uint64_t)sub_1D4B1A000(v6, a1, a2);
      break;
    case 5u:
    case 6u:
      v6 = operator new(0x48uLL);
      result = sub_1D4B1AA10((uint64_t)v6, a1, a2);
      break;
    case 7u:
    case 8u:
    case 0x10u:
    case 0x11u:
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(v12, a2, v8);
      v9 = v13;
      sub_1D4B0AFC4(v12);
      switch(v9)
      {
        case 0:
        case 2:
          v6 = operator new(0x40uLL);
          result = (uint64_t)sub_1D4B1B71C(v6, a1, a2);
          goto LABEL_19;
        case 1:
        case 3:
          v6 = operator new(0x38uLL);
          result = (uint64_t)sub_1D4B1AF94(v6, a1, a2);
          goto LABEL_19;
        default:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_1D4B2D198(exception, "buildReader unhandled string encoding");
          goto LABEL_22;
      }
    case 9u:
      v6 = operator new(0x40uLL);
      result = (uint64_t)sub_1D4B1A3E0(v6, a1, a2);
      break;
    case 0xAu:
      v6 = operator new(0x30uLL);
      result = (uint64_t)sub_1D4B1C780(v6, a1, a2);
      break;
    case 0xBu:
      v6 = operator new(0x38uLL);
      result = (uint64_t)sub_1D4B1CF4C(v6, a1, a2);
      break;
    case 0xCu:
      v6 = operator new(0x38uLL);
      result = (uint64_t)sub_1D4B1BEB8(v6, a1, a2);
      break;
    case 0xDu:
      v6 = operator new(0x60uLL);
      result = (uint64_t)sub_1D4B1D848(v6, a1, a2);
      break;
    case 0xEu:
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
      {
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
        v6 = operator new(0x48uLL);
        result = sub_1D4B1E0CC((uint64_t)v6, a1, a2);
        if (v10 > 0x12)
          *v6 = &off_1E9848E00;
      }
      else
      {
        v6 = operator new(0x58uLL);
        result = sub_1D4B1EBA8((uint64_t)v6, a1, a2);
      }
      break;
    default:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_1D4B2D198(exception, "buildReader unhandled type");
LABEL_22:
      __cxa_throw(exception, (struct type_info *)&unk_1E9846428, (void (*)(void *))std::logic_error::~logic_error);
  }
LABEL_19:
  *a3 = v6;
  return result;
}

void sub_1D4B1C430(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B1C48C(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = off_1E9848430;
  v4 = a1 + 4;
  v2 = (void *)a1[4];
  v3 = (void *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (v3)
    {
LABEL_7:
      a1[5] = v2;
      operator delete(v2);
    }
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = *((_QWORD *)v2 + v5);
      if (v6)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v6 + 8))(*((_QWORD *)v2 + v5));
        v2 = (void *)a1[4];
        v3 = (void *)a1[5];
      }
      ++v5;
    }
    while (v5 < ((_BYTE *)v3 - (_BYTE *)v2) >> 3);
    if (v2)
      goto LABEL_7;
  }
  v7 = a1[1];
  *a1 = &off_1E9847568;
  a1[1] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

void sub_1D4B1C530(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B1C48C(a1);
  operator delete(v1);
}

unint64_t sub_1D4B1C544(uint64_t a1)
{
  unint64_t v2;
  uint64_t *i;
  uint64_t v4;

  v2 = sub_1D4B19714();
  for (i = *(uint64_t **)(a1 + 32); i != *(uint64_t **)(a1 + 40); ++i)
  {
    v4 = *i;
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v4 + 16))(v4, v2);
  }
  return v2;
}

void *sub_1D4B1C5A0(uint64_t a1, uint64_t a2, size_t a3, void *a4)
{
  void *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  result = sub_1D4B19814(a1, a2, a3, a4);
  if (*(_BYTE *)(a2 + 64))
    v8 = *(_QWORD *)(a2 + 40);
  else
    v8 = 0;
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 != *(_QWORD *)(a1 + 40))
  {
    v10 = 0;
    do
    {
      v11 = __dynamic_cast((const void *)a2, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846490, 0);
      if (!v11)
        __cxa_bad_cast();
      result = (void *)(*(uint64_t (**)(_QWORD, _QWORD, size_t, uint64_t))(**(_QWORD **)(v9 + v10) + 24))(*(_QWORD *)(v9 + v10), *(_QWORD *)(v11[10] + v10), a3, v8);
      v10 += 8;
    }
    while (v9 + v10 != *(_QWORD *)(a1 + 40));
  }
  return result;
}

void *sub_1D4B1C668(uint64_t a1, uint64_t a2, size_t a3, void *a4)
{
  void *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  result = sub_1D4B19814(a1, a2, a3, a4);
  if (*(_BYTE *)(a2 + 64))
    v8 = *(_QWORD *)(a2 + 40);
  else
    v8 = 0;
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 != *(_QWORD *)(a1 + 40))
  {
    v10 = 0;
    do
    {
      v11 = __dynamic_cast((const void *)a2, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846490, 0);
      if (!v11)
        __cxa_bad_cast();
      result = (void *)(*(uint64_t (**)(_QWORD, _QWORD, size_t, uint64_t))(**(_QWORD **)(v9 + v10) + 32))(*(_QWORD *)(v9 + v10), *(_QWORD *)(v11[10] + v10), a3, v8);
      v10 += 8;
    }
    while (v9 + v10 != *(_QWORD *)(a1 + 40));
  }
  return result;
}

uint64_t sub_1D4B1C72C(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t *i;
  uint64_t v6;

  result = sub_1D4B198DC(a1, a2);
  for (i = *(uint64_t **)(a1 + 32); i != *(uint64_t **)(a1 + 40); ++i)
  {
    v6 = *i;
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 40))(v6, a2);
  }
  return result;
}

_QWORD *sub_1D4B1C780(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::runtime_error *exception;
  std::runtime_error *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  unsigned int v24;
  void *__p;

  v6 = sub_1D4B19530(a1, a2, a3);
  *v6 = off_1E9847DF0;
  v6[4] = 0;
  v7 = v6 + 4;
  v6[5] = 0;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a3 + 16))(&__p, a3);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(v23, a3, a1[2]);
  if (v24 >= 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Unknown encoding in convertRleVersion");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v8 = dword_1D4BD4910[v24];
  sub_1D4B0AFC4(v23);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(v23, a3, a1[2], 2, 1);
  v9 = v23[0];
  if (!v23[0])
  {
    v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(v20, "LENGTH stream not found in List column");
    __cxa_throw(v20, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v23[0] = 0;
  v21 = v9;
  sub_1D4B3AE10(&v21, 0, v8, a1[3], &v22);
  v10 = v22;
  v22 = 0;
  v11 = a1[5];
  a1[5] = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v22;
    v22 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v21;
  v21 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  if (((*(_QWORD *)((char *)__p + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    sub_1D4B1C164(&v22, v14, a3);
    v16 = *v7;
    *v7 = v22;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  v17 = v23[0];
  v23[0] = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (__p)
    operator delete(__p);
  return a1;
}

void sub_1D4B1C9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (__p)
    operator delete(__p);
  v19 = v16[5];
  v16[5] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *v17;
  *v17 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = v16[1];
  *v16 = &off_1E9847568;
  v16[1] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4B1CAA4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1E9847DF0;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  *a1 = &off_1E9847568;
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

void sub_1D4B1CB24(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B1CAA4(a1);
  operator delete(v1);
}

unint64_t sub_1D4B1CB38()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[8192];
  uint64_t v12;

  v0 = MEMORY[0x1E0C80A78]();
  v12 = *MEMORY[0x1E0C80C00];
  v1 = sub_1D4B19714();
  v2 = v1;
  v3 = *(_QWORD *)(v0 + 32);
  if (v3)
  {
    if (v1)
    {
      v4 = 0;
      v5 = 0;
      do
      {
        if (v2 - v4 >= 0x400)
          v6 = 1024;
        else
          v6 = v2 - v4;
        (*(void (**)(_QWORD, _BYTE *, uint64_t, _QWORD))(**(_QWORD **)(v0 + 40) + 32))(*(_QWORD *)(v0 + 40), v11, v6, 0);
        if (v6)
        {
          v7 = (uint64_t *)v11;
          v8 = v6;
          do
          {
            v9 = *v7++;
            v5 += v9;
            --v8;
          }
          while (v8);
        }
        v4 += v6;
      }
      while (v4 < v2);
    }
    else
    {
      v5 = 0;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v5);
  }
  else
  {
    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v0 + 40) + 24))(*(_QWORD *)(v0 + 40), v1);
  }
  return v2;
}

uint64_t sub_1D4B1CC64(uint64_t a1, const void *a2, size_t a3, void *a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  size_t v12;
  uint64_t *v13;
  uint64_t v15;
  uint64_t *v16;
  size_t v17;
  uint64_t v18;
  uint64_t result;

  sub_1D4B19814(a1, (uint64_t)a2, a3, a4);
  v7 = __dynamic_cast(a2, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846280, 0);
  if (!v7)
    __cxa_bad_cast();
  v8 = v7;
  v9 = (uint64_t *)v7[12];
  if (*((_BYTE *)v7 + 64))
    v10 = (unsigned __int8 *)v7[5];
  else
    v10 = 0;
  (*(void (**)(_QWORD, uint64_t *, size_t, unsigned __int8 *))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), v9, a3, v10);
  if (!v10)
  {
    if (a3)
    {
      v11 = 0;
      v16 = v9;
      v17 = a3;
      do
      {
        v18 = *v16;
        *v16++ = v11;
        v11 += v18;
        --v17;
      }
      while (v17);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (!a3)
  {
LABEL_17:
    v11 = 0;
    goto LABEL_18;
  }
  v11 = 0;
  v12 = a3;
  v13 = v9;
  do
  {
    if (*v10++)
    {
      v15 = *v13;
      *v13 = v11;
      v11 += v15;
    }
    else
    {
      *v13 = v11;
    }
    ++v13;
    --v12;
  }
  while (v12);
LABEL_18:
  v9[a3] = v11;
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 24))(result, v8[15]);
  return result;
}

uint64_t sub_1D4B1CD98(uint64_t a1, const void *a2, size_t a3, void *a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  size_t v12;
  uint64_t *v13;
  uint64_t v15;
  uint64_t *v16;
  size_t v17;
  uint64_t v18;
  uint64_t result;

  sub_1D4B19814(a1, (uint64_t)a2, a3, a4);
  v7 = __dynamic_cast(a2, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846280, 0);
  if (!v7)
    __cxa_bad_cast();
  v8 = v7;
  v9 = (uint64_t *)v7[12];
  if (*((_BYTE *)v7 + 64))
    v10 = (unsigned __int8 *)v7[5];
  else
    v10 = 0;
  (*(void (**)(_QWORD, uint64_t *, size_t, unsigned __int8 *))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), v9, a3, v10);
  if (!v10)
  {
    if (a3)
    {
      v11 = 0;
      v16 = v9;
      v17 = a3;
      do
      {
        v18 = *v16;
        *v16++ = v11;
        v11 += v18;
        --v17;
      }
      while (v17);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (!a3)
  {
LABEL_17:
    v11 = 0;
    goto LABEL_18;
  }
  v11 = 0;
  v12 = a3;
  v13 = v9;
  do
  {
    if (*v10++)
    {
      v15 = *v13;
      *v13 = v11;
      v11 += v15;
    }
    else
    {
      *v13 = v11;
    }
    ++v13;
    --v12;
  }
  while (v12);
LABEL_18:
  v9[a3] = v11;
  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 32))(result, v8[15]);
  return result;
}

uint64_t sub_1D4B1CEC8(unint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t result;

  sub_1D4B198DC((uint64_t)a1, a2);
  v4 = a1[5];
  v5 = sub_1D4B1F168(a2, a1 + 2);
  if (!v5)
    sub_1D4B1F118("unordered_map::at: key not found");
  (*(void (**)(unint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v5 + 3);
  result = a1[4];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 40))(result, a2);
  return result;
}

_QWORD *sub_1D4B1CF4C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::runtime_error *exception;
  std::runtime_error *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  unsigned int v27;
  void *__p;

  v6 = sub_1D4B19530(a1, a2, a3);
  *v6 = off_1E9847AE8;
  v6[4] = 0;
  v7 = v6 + 4;
  v6[5] = 0;
  v6[6] = 0;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a3 + 16))(&__p, a3);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(v26, a3, a1[2]);
  if (v27 >= 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Unknown encoding in convertRleVersion");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v8 = dword_1D4BD4910[v27];
  sub_1D4B0AFC4(v26);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(v26, a3, a1[2], 2, 1);
  v9 = v26[0];
  if (!v26[0])
  {
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(v23, "LENGTH stream not found in Map column");
    __cxa_throw(v23, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v26[0] = 0;
  v24 = v9;
  sub_1D4B3AE10(&v24, 0, v8, a1[3], &v25);
  v10 = v25;
  v25 = 0;
  v11 = a1[6];
  a1[6] = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v25;
    v25 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v24;
  v24 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  if (((*(_QWORD *)((char *)__p + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
  {
    sub_1D4B1C164(&v25, v14, a3);
    v16 = *v7;
    *v7 = v25;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, 1);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  if (((*(_QWORD *)((char *)__p + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
  {
    sub_1D4B1C164(&v25, v17, a3);
    v19 = a1[5];
    a1[5] = v25;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26[0];
  v26[0] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  if (__p)
    operator delete(__p);
  return a1;
}

void sub_1D4B1D1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (__p)
    operator delete(__p);
  v19 = v16[6];
  v16[6] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = v16[5];
  v16[5] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *v17;
  *v17 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = v16[1];
  *v16 = &off_1E9847568;
  v16[1] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  _Unwind_Resume(exception_object);
}

void sub_1D4B1D2F4()
{
  JUMPOUT(0x1D4B1D284);
}

_QWORD *sub_1D4B1D2FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_1E9847AE8;
  v2 = a1[6];
  a1[6] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[4];
  a1[4] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[1];
  *a1 = &off_1E9847568;
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void sub_1D4B1D394(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B1D2FC(a1);
  operator delete(v1);
}

unint64_t sub_1D4B1D3A8()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[8192];
  uint64_t v13;

  v0 = MEMORY[0x1E0C80A78]();
  v13 = *MEMORY[0x1E0C80C00];
  v1 = sub_1D4B19714();
  v2 = v1;
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  if (*(_OWORD *)(v0 + 32) == 0)
  {
    (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(v0 + 48) + 24))(*(_QWORD *)(v0 + 48), v1);
    return v2;
  }
  if (v1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (v2 - v5 >= 0x400)
        v7 = 1024;
      else
        v7 = v2 - v5;
      (*(void (**)(_QWORD, _BYTE *, uint64_t, _QWORD))(**(_QWORD **)(v0 + 48) + 32))(*(_QWORD *)(v0 + 48), v12, v7, 0);
      if (v7)
      {
        v8 = (uint64_t *)v12;
        v9 = v7;
        do
        {
          v10 = *v8++;
          v6 += v10;
          --v9;
        }
        while (v9);
      }
      v5 += v7;
    }
    while (v5 < v2);
    if (!v4)
      goto LABEL_13;
    goto LABEL_12;
  }
  v6 = 0;
  if (v4)
LABEL_12:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v6);
LABEL_13:
  if (v3)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v6);
  return v2;
}

uint64_t sub_1D4B1D500(uint64_t a1, const void *a2, size_t a3, void *a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  size_t v12;
  uint64_t *v13;
  uint64_t v15;
  uint64_t *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  sub_1D4B19814(a1, (uint64_t)a2, a3, a4);
  v7 = __dynamic_cast(a2, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E98461B0, 0);
  if (!v7)
    __cxa_bad_cast();
  v8 = v7;
  v9 = (uint64_t *)v7[12];
  if (*((_BYTE *)v7 + 64))
    v10 = (unsigned __int8 *)v7[5];
  else
    v10 = 0;
  (*(void (**)(_QWORD, uint64_t *, size_t, unsigned __int8 *))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v9, a3, v10);
  if (v10)
  {
    if (a3)
    {
      v11 = 0;
      v12 = a3;
      v13 = v9;
      do
      {
        if (*v10++)
        {
          v15 = *v13;
          *v13 = v11;
          v11 += v15;
        }
        else
        {
          *v13 = v11;
        }
        ++v13;
        --v12;
      }
      while (v12);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (!a3)
  {
LABEL_17:
    v11 = 0;
    goto LABEL_18;
  }
  v11 = 0;
  v16 = v9;
  v17 = a3;
  do
  {
    v18 = *v16;
    *v16++ = v11;
    v11 += v18;
    --v17;
  }
  while (v17);
LABEL_18:
  v9[a3] = v11;
  v19 = *(_QWORD *)(a1 + 32);
  if (v19)
    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v19 + 24))(v19, v8[15], v11, 0);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)result + 24))(result, v8[16], v11, 0);
  return result;
}

uint64_t sub_1D4B1D658(uint64_t a1, const void *a2, size_t a3, void *a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  size_t v12;
  uint64_t *v13;
  uint64_t v15;
  uint64_t *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  sub_1D4B19814(a1, (uint64_t)a2, a3, a4);
  v7 = __dynamic_cast(a2, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E98461B0, 0);
  if (!v7)
    __cxa_bad_cast();
  v8 = v7;
  v9 = (uint64_t *)v7[12];
  if (*((_BYTE *)v7 + 64))
    v10 = (unsigned __int8 *)v7[5];
  else
    v10 = 0;
  (*(void (**)(_QWORD, uint64_t *, size_t, unsigned __int8 *))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v9, a3, v10);
  if (v10)
  {
    if (a3)
    {
      v11 = 0;
      v12 = a3;
      v13 = v9;
      do
      {
        if (*v10++)
        {
          v15 = *v13;
          *v13 = v11;
          v11 += v15;
        }
        else
        {
          *v13 = v11;
        }
        ++v13;
        --v12;
      }
      while (v12);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (!a3)
  {
LABEL_17:
    v11 = 0;
    goto LABEL_18;
  }
  v11 = 0;
  v16 = v9;
  v17 = a3;
  do
  {
    v18 = *v16;
    *v16++ = v11;
    v11 += v18;
    --v17;
  }
  while (v17);
LABEL_18:
  v9[a3] = v11;
  v19 = *(_QWORD *)(a1 + 32);
  if (v19)
    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v19 + 32))(v19, v8[15], v11, 0);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)result + 32))(result, v8[16], v11, 0);
  return result;
}

uint64_t sub_1D4B1D7AC(unint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t result;

  sub_1D4B198DC((uint64_t)a1, a2);
  v4 = a1[6];
  v5 = sub_1D4B1F168(a2, a1 + 2);
  if (!v5)
    sub_1D4B1F118("unordered_map::at: key not found");
  (*(void (**)(unint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v5 + 3);
  v6 = a1[4];
  if (v6)
    (*(void (**)(unint64_t, _QWORD *))(*(_QWORD *)v6 + 40))(v6, a2);
  result = a1[5];
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 40))(result, a2);
  return result;
}

_QWORD *sub_1D4B1D848(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  std::runtime_error *exception;
  uint64_t v23;
  void *__p[3];
  uint64_t v25;
  uint64_t v26;

  v6 = sub_1D4B19530(a1, a2, a3);
  *v6 = off_1E98480D0;
  *((_OWORD *)v6 + 2) = 0u;
  v7 = v6 + 4;
  v8 = v6 + 5;
  *((_OWORD *)v6 + 4) = 0u;
  v9 = (uint64_t)(v6 + 8);
  *((_OWORD *)v6 + 3) = 0u;
  v6[10] = 0;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  a1[11] = v10;
  sub_1D4B1DB3C((uint64_t)v8, v10);
  sub_1D4B1DB6C(v9, a1[11]);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(&v26, a3, a1[2], 1, 1);
  if (!v26)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "LENGTH stream not found in Union column");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v25 = v26;
  v26 = 0;
  sub_1D4B190E0(&v25, __p);
  v11 = __p[0];
  __p[0] = 0;
  v12 = *v7;
  *v7 = (uint64_t)v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = __p[0];
    __p[0] = 0;
    if (v13)
      (*(void (**)(void *))(*(_QWORD *)v13 + 8))(v13);
  }
  v14 = v25;
  v25 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a3 + 16))(__p, a3);
  if (a1[11])
  {
    v15 = 0;
    v16 = 1;
    do
    {
      v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, v15);
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      if (((*(_QWORD *)((char *)__p[0] + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
      {
        sub_1D4B1C164(&v23, v17, a3);
        *(_QWORD *)(*v8 + 8 * v15) = v23;
      }
      v15 = v16;
    }
    while (a1[11] > (unint64_t)v16++);
  }
  if (__p[0])
    operator delete(__p[0]);
  v20 = v26;
  v26 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  return a1;
}

void sub_1D4B1DA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  void **v15;
  void **v16;
  uint64_t *v17;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  v19 = *v16;
  if (*v16)
  {
    v14[9] = v19;
    operator delete(v19);
  }
  v20 = *v15;
  if (*v15)
  {
    v14[6] = v20;
    operator delete(v20);
  }
  v21 = *v17;
  *v17 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = v14[1];
  *v14 = &off_1E9847568;
  v14[1] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  _Unwind_Resume(exception_object);
}

void sub_1D4B1DB3C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_1D4B1F434((void **)a1, a2 - v2);
  }
}

void sub_1D4B1DB6C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_1D4B1F534((char **)a1, a2 - v2);
  }
}

_QWORD *sub_1D4B1DB9C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = off_1E98480D0;
  v3 = (_QWORD *)a1[5];
  v2 = (_QWORD *)a1[6];
  while (v3 != v2)
  {
    if (*v3)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      v2 = (_QWORD *)a1[6];
    }
    ++v3;
  }
  v4 = (void *)a1[8];
  if (v4)
  {
    a1[9] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[5];
  if (v5)
  {
    a1[6] = v5;
    operator delete(v5);
  }
  v6 = a1[4];
  a1[4] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[1];
  *a1 = &off_1E9847568;
  a1[1] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

void sub_1D4B1DC50(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B1DB9C(a1);
  operator delete(v1);
}

unint64_t sub_1D4B1DC64(uint64_t a1)
{
  unint64_t v2;
  void *v3;
  unint64_t i;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t j;
  uint64_t v11;
  _BYTE v13[1024];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = sub_1D4B19714();
  v3 = *(void **)(a1 + 64);
  bzero(v3, 8 * *(_QWORD *)(a1 + 88));
  if (v2)
  {
    for (i = 0; i < v2; i += v5)
    {
      if (v2 - i >= 0x400)
        v5 = 1024;
      else
        v5 = v2 - i;
      (*(void (**)(_QWORD, _BYTE *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32), v13, v5, 0);
      if (v5)
      {
        v6 = v13;
        v7 = v5;
        do
        {
          v8 = *v6++;
          ++*((_QWORD *)v3 + v8);
          --v7;
        }
        while (v7);
      }
    }
  }
  v9 = *(_QWORD *)(a1 + 88);
  if (v9)
  {
    for (j = 0; j < v9; ++j)
    {
      if (*((_QWORD *)v3 + j))
      {
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * j);
        if (v11)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
          v9 = *(_QWORD *)(a1 + 88);
        }
      }
    }
  }
  return v2;
}

uint64_t sub_1D4B1DD90(uint64_t a1, const void *a2, size_t a3, void *a4)
{
  size_t v4;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t i;

  v4 = a3;
  sub_1D4B19814(a1, (uint64_t)a2, a3, a4);
  v7 = __dynamic_cast(a2, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E98463D0, 0);
  if (!v7)
    __cxa_bad_cast();
  v8 = v7;
  v9 = (_QWORD *)v7[17];
  v10 = *(void **)(a1 + 64);
  bzero(v10, 8 * *(_QWORD *)(a1 + 88));
  v11 = (unsigned __int8 *)v8[12];
  if (*((_BYTE *)v8 + 64))
    v12 = (unsigned __int8 *)v8[5];
  else
    v12 = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, size_t, unsigned __int8 *))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32), v8[12], v4, v12);
  if (v12)
  {
    for (; v4; --v4)
    {
      if (*v12++)
      {
        v15 = *v11;
        v16 = *((_QWORD *)v10 + v15);
        *((_QWORD *)v10 + v15) = v16 + 1;
        *v9 = v16;
      }
      ++v9;
      ++v11;
    }
  }
  else
  {
    for (; v4; --v4)
    {
      v17 = *v11++;
      v18 = *((_QWORD *)v10 + v17);
      *((_QWORD *)v10 + v17) = v18 + 1;
      *v9++ = v18;
    }
  }
  v19 = *(_QWORD *)(a1 + 88);
  if (v19)
  {
    for (i = 0; i < v19; ++i)
    {
      result = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)result + 24))(result, *(_QWORD *)(v8[20] + 8 * i), *((_QWORD *)v10 + i), 0);
        v19 = *(_QWORD *)(a1 + 88);
      }
    }
  }
  return result;
}

uint64_t sub_1D4B1DEE4(uint64_t a1, const void *a2, size_t a3, void *a4)
{
  size_t v4;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t i;

  v4 = a3;
  sub_1D4B19814(a1, (uint64_t)a2, a3, a4);
  v7 = __dynamic_cast(a2, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E98463D0, 0);
  if (!v7)
    __cxa_bad_cast();
  v8 = v7;
  v9 = (_QWORD *)v7[17];
  v10 = *(void **)(a1 + 64);
  bzero(v10, 8 * *(_QWORD *)(a1 + 88));
  v11 = (unsigned __int8 *)v8[12];
  if (*((_BYTE *)v8 + 64))
    v12 = (unsigned __int8 *)v8[5];
  else
    v12 = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, size_t, unsigned __int8 *))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32), v8[12], v4, v12);
  if (v12)
  {
    for (; v4; --v4)
    {
      if (*v12++)
      {
        v15 = *v11;
        v16 = *((_QWORD *)v10 + v15);
        *((_QWORD *)v10 + v15) = v16 + 1;
        *v9 = v16;
      }
      ++v9;
      ++v11;
    }
  }
  else
  {
    for (; v4; --v4)
    {
      v17 = *v11++;
      v18 = *((_QWORD *)v10 + v17);
      *((_QWORD *)v10 + v17) = v18 + 1;
      *v9++ = v18;
    }
  }
  v19 = *(_QWORD *)(a1 + 88);
  if (v19)
  {
    for (i = 0; i < v19; ++i)
    {
      result = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * i);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)result + 32))(result, *(_QWORD *)(v8[20] + 8 * i), *((_QWORD *)v10 + i), 0);
        v19 = *(_QWORD *)(a1 + 88);
      }
    }
  }
  return result;
}

uint64_t sub_1D4B1E034(unint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t i;

  sub_1D4B198DC((uint64_t)a1, a2);
  v4 = a1[4];
  v5 = sub_1D4B1F168(a2, a1 + 2);
  if (!v5)
    sub_1D4B1F118("unordered_map::at: key not found");
  result = (*(uint64_t (**)(unint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v5 + 3);
  v7 = a1[11];
  if (v7)
  {
    for (i = 0; i < v7; ++i)
    {
      result = *(_QWORD *)(a1[5] + 8 * i);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 40))(result, a2);
        v7 = a1[11];
      }
    }
  }
  return result;
}

uint64_t sub_1D4B1E0CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::runtime_error *exception;
  std::runtime_error *v19;
  std::runtime_error *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  unsigned int v24;

  v6 = sub_1D4B19530((_QWORD *)a1, a2, a3);
  *v6 = off_1E9848A48;
  v6[4] = 0;
  v6[8] = 0;
  *(_DWORD *)(a1 + 44) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
  *(_DWORD *)(a1 + 40) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(v23, a3, *(_QWORD *)(a1 + 16), 1, 1);
  v7 = v23[0];
  v23[0] = 0;
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v23[0];
    v23[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v7 = *(_QWORD *)(a1 + 32);
  }
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "DATA stream not found in Decimal64Column");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a3 + 24))(v23, a3, *(_QWORD *)(a1 + 16));
  if (v24 >= 4)
  {
    v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(v19, "Unknown encoding in convertRleVersion");
    __cxa_throw(v19, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v10 = dword_1D4BD4910[v24];
  sub_1D4B0AFC4(v23);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(v23, a3, *(_QWORD *)(a1 + 16), 5, 1);
  v11 = v23[0];
  if (!v23[0])
  {
    v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(v20, "SECONDARY stream not found in Decimal64Column");
    __cxa_throw(v20, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v23[0] = 0;
  v21 = v11;
  sub_1D4B3AE10(&v21, 1, v10, *(_QWORD *)(a1 + 24), &v22);
  v12 = v22;
  v22 = 0;
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = v22;
    v22 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v15 = v21;
  v21 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v23[0];
  v23[0] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  return a1;
}

void sub_1D4B1E32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  v14 = v12[8];
  v12[8] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v12[4];
  v12[4] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v12[1];
  *v12 = &off_1E9847568;
  v12[1] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4B1E414(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1E9848A48;
  v2 = a1[8];
  a1[8] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  *a1 = &off_1E9847568;
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

void sub_1D4B1E494(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B1E414(a1);
  operator delete(v1);
}

unint64_t sub_1D4B1E4A8(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;

  v2 = sub_1D4B19714();
  if (v2)
  {
    v3 = 0;
    do
    {
      sub_1D4B1E520(a1);
      v4 = *(unsigned __int8 **)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v4 + 1;
      v3 += (*v4 >> 7) ^ 1u;
    }
    while (v3 < v2);
  }
  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64), v2);
  return v2;
}

uint64_t sub_1D4B1E520(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  std::runtime_error *exception;
  std::string *v5;
  __int128 v6;
  std::string v7;
  std::string v8;
  int v9;

  v1 = result + 48;
  if (*(_QWORD *)(result + 48) == *(_QWORD *)(result + 56))
  {
    v2 = result;
    do
    {
      v9 = 0;
      result = (*(uint64_t (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(v2 + 32) + 16))(*(_QWORD *)(v2 + 32), v1, &v9);
      if ((result & 1) == 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(v2 + 32) + 56))(&v7);
        v5 = std::string::insert(&v7, 0, "Read past end of stream in Decimal64ColumnReader ");
        v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v8.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        sub_1D4B2D1D0(exception, &v8);
        __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
      }
      v3 = v9;
      *(_QWORD *)(v2 + 56) = *(_QWORD *)(v2 + 48) + v9;
    }
    while (!v3);
  }
  return result;
}

void sub_1D4B1E60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_1D4B1E66C(uint64_t a1, uint64_t a2, size_t a3, void *a4)
{
  size_t v4;
  unsigned __int8 *v7;
  int **v8;
  int **v9;
  int *v10;
  int *v11;
  uint64_t result;
  int v14;

  v4 = a3;
  sub_1D4B19814(a1, a2, a3, a4);
  if (*(_BYTE *)(a2 + 64))
    v7 = *(unsigned __int8 **)(a2 + 40);
  else
    v7 = 0;
  v8 = (int **)__dynamic_cast((const void *)a2, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E98466A8, 0);
  if (!v8)
    __cxa_bad_cast();
  v9 = v8;
  v10 = v8[13];
  v11 = v8[18];
  result = (*(uint64_t (**)(_QWORD, int *, size_t, unsigned __int8 *))(**(_QWORD **)(a1 + 64) + 32))(*(_QWORD *)(a1 + 64), v11, v4, v7);
  v9[10] = *(int **)(a1 + 40);
  if (v7)
  {
    for (; v4; --v4)
    {
      if (*v7++)
        result = sub_1D4B1E75C(a1, v10, *v11);
      v11 += 2;
      v10 += 2;
    }
  }
  else
  {
    for (; v4; --v4)
    {
      v14 = *v11;
      v11 += 2;
      result = sub_1D4B1E75C(a1, v10, v14);
      v10 += 2;
    }
  }
  return result;
}

uint64_t sub_1D4B1E75C(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t result;
  char *v8;
  char v9;
  unint64_t v10;
  int64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  std::runtime_error *exception;

  v6 = 0;
  *a2 = 0;
  do
  {
    result = sub_1D4B1E520(a1);
    v8 = *(char **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v8 + 1;
    v9 = *v8;
    v10 = ((unint64_t)(*v8 & 0x7F) << v6) | *a2;
    *a2 = v10;
    v6 += 7;
  }
  while (v9 < 0);
  v11 = -(uint64_t)(v10 & 1) ^ (v10 >> 1);
  *a2 = v11;
  v12 = *(_DWORD *)(a1 + 44);
  v13 = v12 - a3;
  if (v12 > a3 && v13 <= 0x12)
  {
    v14 = qword_1D4BD4588[v13] * v11;
LABEL_9:
    *a2 = v14;
    return result;
  }
  if (v12 < a3 && (a3 - v12) <= 0x12)
  {
    v14 = v11 / qword_1D4BD4588[a3 - v12];
    goto LABEL_9;
  }
  if (v12 != a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Decimal scale out of range");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return result;
}

void sub_1D4B1E860(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B1E874(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unint64_t *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11[2];
  uint64_t v12;
  uint64_t v13;

  v3 = a3;
  v5 = (unint64_t *)result;
  if (a2 <= a3)
  {
    if (a2 < a3)
    {
      v12 = 0;
      v13 = 0;
      do
      {
        if (v3 - a2 >= 0x12)
          v8 = 18;
        else
          v8 = v3 - a2;
        v9 = qword_1D4BD4588[v8];
        v11[0] = v9 >> 63;
        v11[1] = v9;
        result = sub_1D4B2D788(v5, v11, &v12);
        *v5 = result;
        v5[1] = v10;
        v3 -= v8;
      }
      while (v3 > a2);
    }
  }
  else
  {
    do
    {
      if (a2 - v3 >= 0x12)
        v6 = 18;
      else
        v6 = a2 - v3;
      v7 = qword_1D4BD4588[v6];
      v12 = v7 >> 63;
      v13 = v7;
      result = (uint64_t)sub_1D4B2D3EC(v5, &v12);
      v3 += v6;
    }
    while (v3 < a2);
  }
  return result;
}

uint64_t sub_1D4B1E944(unint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;

  sub_1D4B198DC((uint64_t)a1, a2);
  v4 = a1[4];
  v5 = a1 + 2;
  v6 = sub_1D4B1F168(a2, a1 + 2);
  if (!v6
    || ((*(void (**)(unint64_t, _QWORD *))(*(_QWORD *)v4 + 48))(v4, v6 + 3),
        v7 = a1[8],
        (v8 = sub_1D4B1F168(a2, v5)) == 0))
  {
    sub_1D4B1F118("unordered_map::at: key not found");
  }
  return (*(uint64_t (**)(unint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v8 + 3);
}

void sub_1D4B1E9D0(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B1E414(a1);
  operator delete(v1);
}

uint64_t sub_1D4B1E9E4(uint64_t a1, uint64_t a2, size_t a3, void *a4)
{
  size_t v4;
  unsigned __int8 *v7;
  void *v8;
  _QWORD *v9;
  uint64_t *v10;
  unsigned int *v11;
  uint64_t result;
  unsigned int v14;

  v4 = a3;
  sub_1D4B19814(a1, a2, a3, a4);
  if (*(_BYTE *)(a2 + 64))
    v7 = *(unsigned __int8 **)(a2 + 40);
  else
    v7 = 0;
  v8 = __dynamic_cast((const void *)a2, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846738, 0);
  if (!v8)
    __cxa_bad_cast();
  v9 = v8;
  v10 = (uint64_t *)*((_QWORD *)v8 + 13);
  v11 = (unsigned int *)*((_QWORD *)v8 + 18);
  result = (*(uint64_t (**)(_QWORD, unsigned int *, size_t, unsigned __int8 *))(**(_QWORD **)(a1 + 64) + 32))(*(_QWORD *)(a1 + 64), v11, v4, v7);
  v9[10] = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    for (; v4; --v4)
    {
      if (*v7++)
        result = sub_1D4B1EAD4(a1, v10, *v11);
      v11 += 2;
      v10 += 2;
    }
  }
  else
  {
    for (; v4; --v4)
    {
      v14 = *v11;
      v11 += 2;
      result = sub_1D4B1EAD4(a1, v10, v14);
      v10 += 2;
    }
  }
  return result;
}

uint64_t sub_1D4B1EAD4(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  unsigned int v6;
  char v7;
  _BYTE *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;

  v6 = 0;
  *a2 = 0;
  a2[1] = 0;
  v7 = 64;
  do
  {
    sub_1D4B1E520(a1);
    v8 = *(_BYTE **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v8 + 1;
    LOBYTE(v8) = *v8;
    v9 = (char)v8;
    v10 = v8 & 0x7F;
    v11 = v10 << v6;
    v12 = 0;
    if (v6 > 0x7F)
      v11 = 0;
    if (v6 <= 0x3F)
    {
      v12 = v10 << v6;
      v11 = v10 >> v7;
    }
    if (v6)
      v10 = v12;
    else
      v11 = 0;
    v13 = a2[1] | v10;
    v14 = *a2 | v11;
    *a2 = v14;
    a2[1] = v13;
    v6 += 7;
    v7 -= 7;
  }
  while (v9 < 0);
  *((_QWORD *)&v16 + 1) = v14;
  *(_QWORD *)&v16 = v13;
  v15 = v16 >> 1;
  v17 = v14 >> 1;
  *a2 = v17;
  a2[1] = v15;
  if ((v13 & 1) != 0)
  {
    *a2 = ~v17;
    a2[1] = ~v15;
  }
  return sub_1D4B1E874((uint64_t)a2, *(_DWORD *)(a1 + 44), a3);
}

uint64_t sub_1D4B1EBA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)sub_1D4B1E0CC(a1, a2, a3) = &off_1E98492D0;
  *(_DWORD *)(a1 + 44) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 72))(a3);
  *(_BYTE *)(a1 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
  *(_QWORD *)(a1 + 80) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 56))(a3);
  return a1;
}

void sub_1D4B1EC18(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1D4B1E414(v1);
  _Unwind_Resume(a1);
}

void sub_1D4B1EC30(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B1E414(a1);
  operator delete(v1);
}

uint64_t sub_1D4B1EC44(uint64_t a1, uint64_t a2, size_t a3, void *a4)
{
  size_t v4;
  _BYTE *v7;
  void *v8;
  _QWORD *v9;
  uint64_t *v10;
  unsigned int *v11;
  uint64_t result;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t i;
  _QWORD *v16;
  _QWORD *v17;
  std::runtime_error *exception;

  v4 = a3;
  sub_1D4B19814(a1, a2, a3, a4);
  if (*(_BYTE *)(a2 + 64))
    v7 = *(_BYTE **)(a2 + 40);
  else
    v7 = 0;
  v8 = __dynamic_cast((const void *)a2, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846738, 0);
  if (!v8)
    __cxa_bad_cast();
  v9 = v8;
  v10 = (uint64_t *)*((_QWORD *)v8 + 13);
  v11 = (unsigned int *)*((_QWORD *)v8 + 18);
  result = (*(uint64_t (**)(_QWORD, unsigned int *, size_t, _BYTE *))(**(_QWORD **)(a1 + 64) + 32))(*(_QWORD *)(a1 + 64), v11, v4, v7);
  v9[10] = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    for (; v4; --v4)
    {
      if (*v7)
      {
        result = sub_1D4B1EE60(a1, v10, *v11);
        if ((result & 1) == 0)
        {
          if (*(_BYTE *)(a1 + 72))
            goto LABEL_20;
          v13 = sub_1D4B02240(*(_QWORD **)(a1 + 80), (uint64_t)"Warning: ", 9);
          v14 = sub_1D4B02240(v13, (uint64_t)"Hive 0.11 decimal with more than 38 digits ", 43);
          result = (uint64_t)sub_1D4B02240(v14, (uint64_t)"replaced by NULL.\n", 18);
          *v7 = 0;
        }
      }
      v11 += 2;
      v10 += 2;
      ++v7;
    }
  }
  else if (v4)
  {
    for (i = 0; i != v4; ++i)
    {
      result = sub_1D4B1EE60(a1, v10, *(_QWORD *)&v11[2 * i]);
      if ((result & 1) == 0)
      {
        if (*(_BYTE *)(a1 + 72))
        {
LABEL_20:
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          sub_1D4B2D1F0(exception, "Hive 0.11 decimal was more than 38 digits.");
          __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
        }
        v16 = sub_1D4B02240(*(_QWORD **)(a1 + 80), (uint64_t)"Warning: ", 9);
        v17 = sub_1D4B02240(v16, (uint64_t)"Hive 0.11 decimal with more than 38 digits ", 43);
        result = (uint64_t)sub_1D4B02240(v17, (uint64_t)"replaced by NULL.\n", 18);
        *((_BYTE *)v9 + 64) = 1;
        *(_BYTE *)(v9[5] + i) = 0;
      }
      v10 += 2;
    }
  }
  return result;
}

void sub_1D4B1EE48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1D4B1EE60(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  char v9;
  char v10;
  char *v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v6 = atomic_load((unsigned __int8 *)&qword_1EFEC5E78);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1EFEC5E78))
  {
    xmmword_1EFEC5E68 = xmmword_1D4BD48F0;
    __cxa_guard_release(&qword_1EFEC5E78);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_1EFEC5E90);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1EFEC5E90))
  {
    xmmword_1EFEC5E80 = xmmword_1D4BD4900;
    __cxa_guard_release(&qword_1EFEC5E90);
  }
  v8 = 0;
  *a2 = 0;
  a2[1] = 0;
  v9 = 1;
  v10 = 64;
  do
  {
    sub_1D4B1E520(a1);
    v11 = *(char **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v11 + 1;
    v12 = *v11;
    if (v8 > 0x80)
    {
      v9 = 0;
LABEL_6:
      v13 = 0;
      v14 = 0;
      goto LABEL_15;
    }
    v13 = v12 & 0x7F;
    if (!v8)
    {
      v14 = 0;
      goto LABEL_15;
    }
    if (v8 == 126)
    {
      v9 &= v13 < 4;
    }
    else
    {
      if (v8 <= 0x3F)
      {
        v14 = v13 >> v10;
        v13 <<= v8;
        goto LABEL_15;
      }
      if (v8 > 0x7F)
        goto LABEL_6;
    }
    v14 = v13 << v8;
    v13 = 0;
LABEL_15:
    v15 = a2[1] | v13;
    v16 = *a2 | v14;
    *a2 = v16;
    a2[1] = v15;
    v8 += 7;
    v10 -= 7;
  }
  while (v12 < 0);
  if ((v9 & 1) == 0)
    return 0;
  *((_QWORD *)&v18 + 1) = v16;
  *(_QWORD *)&v18 = v15;
  v17 = v18 >> 1;
  v19 = v16 >> 1;
  *a2 = v19;
  a2[1] = v17;
  if ((v15 & 1) != 0)
  {
    *a2 = ~v19;
    a2[1] = ~v17;
  }
  sub_1D4B1E874((uint64_t)a2, *(_DWORD *)(a1 + 44), a3);
  v20 = *a2;
  if (*a2 == (_QWORD)xmmword_1EFEC5E68)
  {
    if ((unint64_t)a2[1] < *((_QWORD *)&xmmword_1EFEC5E68 + 1))
      return 0;
LABEL_23:
    if (v20 == (_QWORD)xmmword_1EFEC5E80)
      return (unint64_t)a2[1] <= *((_QWORD *)&xmmword_1EFEC5E80 + 1);
    else
      return v20 <= (uint64_t)xmmword_1EFEC5E80;
  }
  else
  {
    if (*a2 >= (uint64_t)xmmword_1EFEC5E68)
      goto LABEL_23;
    return 0;
  }
}

uint64_t sub_1D4B1F054(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 65) = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t sub_1D4B1F064(uint64_t a1)
{
  unsigned __int8 *v1;
  _QWORD *v2;
  std::runtime_error *exception;
  int v6;

  v1 = *(unsigned __int8 **)(a1 + 56);
  v2 = (_QWORD *)(a1 + 56);
  if (v1 == *(unsigned __int8 **)(a1 + 64))
  {
    v6 = 0;
    if (((*(uint64_t (**)(_QWORD, _QWORD *, int *))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v2, &v6) & 1) == 0)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_1D4B2D1F0(exception, "bad read in DoubleColumnReader::next()");
      __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v1 = *(unsigned __int8 **)(a1 + 56);
    *(_QWORD *)(a1 + 64) = &v1[v6];
  }
  *v2 = v1 + 1;
  return *v1;
}

void sub_1D4B1F104(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D4B1F118(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1D4B1F21C(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E9845880, MEMORY[0x1E0DE42E0]);
}

void sub_1D4B1F154(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B1F168(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

std::logic_error *sub_1D4B1F21C(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

_QWORD *sub_1D4B1F240(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v6;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_1E984B038;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  v6 = 0;
  sub_1D4B1F39C(&v6, 0);
  return a1;
}

void sub_1D4B1F2A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B1F39C((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_1D4B1F2C0(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_1D4B1F2D4(uint64_t a1)
{
  sub_1D4B1F31C(a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t sub_1D4B1F2DC(uint64_t a1, uint64_t a2)
{
  if (sub_1D4B1F350(a2, (uint64_t)&unk_1E9847068))
    return a1 + 24;
  else
    return 0;
}

void sub_1D4B1F31C(uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
  {
    sub_1D4B2F75C(a2 + 40);
    v3 = (void *)sub_1D4B2F630(a2);
    operator delete(v3);
  }
}

BOOL sub_1D4B1F350(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void sub_1D4B1F39C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_1D4B2F75C(v2 + 40);
    v3 = (void *)sub_1D4B2F630(v2);
    operator delete(v3);
  }
}

uint64_t sub_1D4B1F3DC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void sub_1D4B1F434(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      sub_1D4B182AC();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_1D4B182C0(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void sub_1D4B1F534(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      sub_1D4B182AC();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_1D4B182C0(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t sub_1D4B1F63C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = sub_1D4B4AE44(*(_QWORD *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 16);
  v6 = sub_1D4B4AE50(*(_QWORD *)(a1 + 8));
  v7 = sub_1D4B4AD70(*(_QWORD *)(a1 + 8));
  v8 = sub_1D4B4AD58(*(_QWORD *)(a1 + 8));
  v9 = sub_1D4B4AE70(*(_QWORD *)(a1 + 8));
  return sub_1D4B2BF4C(v4, v5, v6, v7, v8, v9, a2);
}

_QWORD *sub_1D4B1F6C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;

  result = operator new(0x18uLL);
  *result = &off_1E9848378;
  result[1] = a1;
  result[2] = a2;
  *a3 = result;
  return result;
}

void sub_1D4B1F714(uint64_t a1)
{
  void *v1;

  v1 = (void *)nullsub_1(a1);
  operator delete(v1);
}

uint64_t sub_1D4B1F728(uint64_t result)
{
  std::runtime_error *exception;

  if ((_DWORD)result)
  {
    if ((_DWORD)result != 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_1D4B2D24C(exception, "Invalid param");
      __cxa_throw(exception, (struct type_info *)&unk_1E9846268, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    return 2;
  }
  return result;
}

void sub_1D4B1F780(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B1F794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  double v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  *(_QWORD *)a1 = off_1E98475A8;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  *(_QWORD *)(a1 + 24) = 0;
  v9 = (uint64_t *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = sub_1D4B4AE7C(a4);
  *(_QWORD *)(a1 + 56) = 0;
  v11 = (uint64_t *)(a1 + 56);
  *(_BYTE *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 88) = 0;
  v12 = (uint64_t *)(a1 + 88);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v13 = sub_1D4B4AE70(a4);
  *(_QWORD *)(a1 + 112) = 0;
  v14 = (uint64_t *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 120) = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(&v52, a3, 0);
  v15 = v52;
  v52 = 0;
  v50 = v15;
  sub_1D4B18A64(&v50, &v51);
  v16 = v51;
  v51 = 0;
  v17 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v51;
    v51 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v50;
  v50 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_1D4B3C3FC(a2, &v51);
  v20 = v51;
  v51 = 0;
  v21 = *v9;
  *v9 = v20;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v22 = v51;
    v51 = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  sub_1D4B3C3FC(a2, &v51);
  v23 = v51;
  v51 = 0;
  v24 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v23;
  if (v24)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v25 = v51;
    v51 = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
  sub_1D4B3C3FC(a2, &v51);
  v26 = v51;
  v51 = 0;
  v27 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v26;
  if (v27)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v28 = v51;
    v51 = 0;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  if (*(_BYTE *)(a1 + 48))
  {
    v29 = operator new(0x30uLL);
    sub_1D4B092CC((uint64_t)v29);
    v30 = *v11;
    *v11 = (uint64_t)v29;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = operator new(0x38uLL);
    sub_1D4B08AAC((uint64_t)v31);
    v32 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v31;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = operator new(0x10uLL);
    v35 = *(_QWORD *)(a1 + 64);
    v34 = *(_QWORD *)(a1 + 72);
    *v33 = &off_1E9849218;
    v33[1] = v35;
    *(_QWORD *)(a1 + 72) = v33;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(&v51, a3, 6);
    v36 = v51;
    v51 = 0;
    v37 = *v14;
    *v14 = v36;
    if (v37)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      v38 = v51;
      v51 = 0;
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    }
    if (sub_1D4B4AE9C(a4, *(_QWORD *)(a1 + 16)) && sub_1D4B4AEF8(a4) == 1)
    {
      *(_BYTE *)(a1 + 80) = 1;
      v39 = operator new(0x20uLL);
      v40 = sub_1D4B4AD94(a4);
      v41 = sub_1D4B4AEEC(a4);
      sub_1D4B17B60((uint64_t)v39, v40, v41);
      v42 = *v12;
      *v12 = (uint64_t)v39;
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      v43 = operator new(0x30uLL);
      sub_1D4B0A220((uint64_t)v43);
      v44 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 96) = v43;
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(&v51, a3, 8);
      v45 = v51;
      v51 = 0;
      v46 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v45;
      if (v46)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
        v47 = v51;
        v51 = 0;
        if (v47)
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
      }
    }
  }
  v48 = v52;
  v52 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  return a1;
}

void sub_1D4B1FB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  v18 = v12[15];
  v12[15] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *v16;
  *v16 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = v12[12];
  v12[12] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *v15;
  *v15 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = v12[9];
  v12[9] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = v12[8];
  v12[8] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *v14;
  *v14 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = v12[5];
  v12[5] = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = v12[4];
  v12[4] = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = *v13;
  *v13 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = v12[1];
  v12[1] = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4B1FD24(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = off_1E98475A8;
  v2 = a1[15];
  a1[15] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[14];
  a1[14] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[12];
  a1[12] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[11];
  a1[11] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = a1[9];
  a1[9] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[8];
  a1[8] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = a1[7];
  a1[7] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = a1[5];
  a1[5] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = a1[4];
  a1[4] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = a1[3];
  a1[3] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = a1[1];
  a1[1] = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return a1;
}

uint64_t sub_1D4B1FE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 40) + a3, a4, a5);
}

_QWORD *sub_1D4B1FE80(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;
  int v12;
  int v13;
  uint64_t v14;

  sub_1D4B0A78C(v10);
  v11 |= 3u;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v12 = 0;
  v13 = v5;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  v11 |= 4u;
  v14 = v6;
  v7 = a2[1];
  if (v7 >= a2[2])
  {
    v8 = sub_1D4B292C8(a2, (uint64_t)v10);
  }
  else
  {
    sub_1D4B0A808(a2[1], (uint64_t)v10);
    v8 = v7 + 40;
    a2[1] = v7 + 40;
  }
  a2[1] = v8;
  return sub_1D4B0A80C(v10);
}

void sub_1D4B1FF24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  sub_1D4B0A80C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B1FF44(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

_QWORD *sub_1D4B1FF54(uint64_t a1, uint64_t *a2)
{
  return sub_1D4B1FF5C(a1, a2, *(_QWORD *)(a1 + 32));
}

_QWORD *sub_1D4B1FF5C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[15];

  sub_1D4B0759C((uint64_t)v8);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a3 + 56))(a3, v8);
  v5 = a2[1];
  if (v5 >= a2[2])
  {
    v6 = sub_1D4B288B8(a2, (uint64_t)v8);
  }
  else
  {
    sub_1D4B077B8(a2[1], (uint64_t)v8);
    v6 = v5 + 120;
    a2[1] = v5 + 120;
  }
  a2[1] = v6;
  return sub_1D4B078E0(v8);
}

void sub_1D4B1FFE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  sub_1D4B078E0((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B20004(uint64_t a1)
{
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 48))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1D4B20040(uint64_t a1)
{
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
}

_QWORD *sub_1D4B2007C(uint64_t a1, uint64_t *a2)
{
  return sub_1D4B1FF5C(a1, a2, *(_QWORD *)(a1 + 40));
}

uint64_t sub_1D4B20084(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 64);
  *(_DWORD *)(v2 + 16) |= 1u;
  v3 = *(void **)(v2 + 48);
  if (!v3)
  {
    v3 = sub_1D4B155A8(0);
    *(_QWORD *)(v2 + 48) = v3;
  }
  (*(void (**)(_QWORD, void *))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24), v3);
  v5 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 64);
  v6 = *(int **)(v5 + 40);
  if (!v6)
  {
    v8 = *(_DWORD *)(v5 + 36);
LABEL_8:
    sub_1D4BB24FC(v5 + 24, v8 + 1);
    v6 = *(int **)(v5 + 40);
    v8 = *v6;
    goto LABEL_9;
  }
  v7 = *(int *)(v5 + 32);
  v8 = *v6;
  if ((int)v7 < *v6)
  {
    *(_DWORD *)(v5 + 32) = v7 + 1;
    v9 = *(std::string **)&v6[2 * v7 + 2];
    goto LABEL_10;
  }
  if (v8 == *(_DWORD *)(v5 + 36))
    goto LABEL_8;
LABEL_9:
  *v6 = v8 + 1;
  v9 = (std::string *)sub_1D4B15630(*(_QWORD *)(v5 + 24));
  v10 = *(_QWORD *)(v5 + 40);
  v11 = *(int *)(v5 + 32);
  *(_DWORD *)(v5 + 32) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 8) = v9;
LABEL_10:
  sub_1D4B091F0(v9, v4);
  v12 = *(_QWORD *)(a1 + 64);
  *(_DWORD *)(v12 + 24) = 0;
  v13 = *(_QWORD *)(v12 + 48);
  if (v13)
    sub_1D4B078F8(v13);
  *(_DWORD *)(v12 + 16) &= ~1u;
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
}

void sub_1D4B201C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 80))
  {
    v2 = *(_QWORD *)(a1 + 88);
    v3 = *(_QWORD *)(a1 + 96);
    v4 = *(int **)(v3 + 40);
    if (v4)
    {
      v5 = *(int *)(v3 + 32);
      v6 = *v4;
      if ((int)v5 < *v4)
      {
        *(_DWORD *)(v3 + 32) = v5 + 1;
        v7 = *(void **)&v4[2 * v5 + 2];
LABEL_10:
        sub_1D4B17EA8(v2, (uint64_t)v7);
        sub_1D4B17E98(*(_QWORD *)(a1 + 88));
        return;
      }
      if (v6 != *(_DWORD *)(v3 + 36))
      {
LABEL_9:
        *v4 = v6 + 1;
        v7 = sub_1D4B15740(*(_QWORD *)(v3 + 24));
        v8 = *(_QWORD *)(v3 + 40);
        v9 = *(int *)(v3 + 32);
        *(_DWORD *)(v3 + 32) = v9 + 1;
        *(_QWORD *)(v8 + 8 * v9 + 8) = v7;
        goto LABEL_10;
      }
    }
    else
    {
      v6 = *(_DWORD *)(v3 + 36);
    }
    sub_1D4BB24FC(v3 + 24, v6 + 1);
    v4 = *(int **)(v3 + 40);
    v6 = *v4;
    goto LABEL_9;
  }
}

_QWORD *sub_1D4B20290(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  _QWORD v14[2];
  int v15;
  int v16;
  int v17;
  uint64_t v18;

  sub_1D4BB2104(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 112));
  sub_1D4B0A78C(v14);
  v4 = *(_QWORD *)(a1 + 16);
  v16 = 6;
  v17 = v4;
  v15 |= 3u;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 112) + 72))(*(_QWORD *)(a1 + 112));
  v15 |= 4u;
  v18 = v5;
  v6 = a2[1];
  if (v6 >= a2[2])
  {
    v7 = sub_1D4B292C8(a2, (uint64_t)v14);
  }
  else
  {
    sub_1D4B0A808(a2[1], (uint64_t)v14);
    v7 = v6 + 40;
    a2[1] = v6 + 40;
  }
  a2[1] = v7;
  if (*(_BYTE *)(a1 + 80))
  {
    if ((sub_1D4BB2104(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 120)) & 1) == 0)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Failed to write bloom filter stream.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
    }
    v8 = *(_QWORD *)(a1 + 16);
    v16 = 8;
    v17 = v8;
    v15 |= 3u;
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 72))(*(_QWORD *)(a1 + 120));
    v15 |= 4u;
    v18 = v9;
    v10 = a2[1];
    if (v10 >= a2[2])
    {
      v11 = sub_1D4B292C8(a2, (uint64_t)v14);
    }
    else
    {
      sub_1D4B0A808(a2[1], (uint64_t)v14);
      v11 = v10 + 40;
      a2[1] = v10 + 40;
    }
    a2[1] = v11;
  }
  return sub_1D4B0A80C(v14);
}

void sub_1D4B20400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  sub_1D4B0A80C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B20434(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 72));
}

void sub_1D4B2044C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(_QWORD *)(a1 + 56);
    v3 = *(unsigned int *)(v2 + 32);
    if ((int)v3 >= 1)
    {
      v4 = (uint64_t *)(*(_QWORD *)(v2 + 40) + 8);
      do
      {
        v5 = *v4++;
        sub_1D4B08B40(v5);
        --v3;
      }
      while (v3);
      *(_DWORD *)(v2 + 32) = 0;
    }
    v6 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)(v6 + 24) = 0;
    v7 = *(_QWORD *)(v6 + 48);
    if (v7)
      sub_1D4B078F8(v7);
    *(_DWORD *)(v6 + 16) &= ~1u;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  }
  if (*(_BYTE *)(a1 + 80))
  {
    sub_1D4B17E98(*(_QWORD *)(a1 + 88));
    v8 = *(_QWORD *)(a1 + 96);
    v9 = *(unsigned int *)(v8 + 32);
    if ((int)v9 >= 1)
    {
      v10 = (uint64_t *)(*(_QWORD *)(v8 + 40) + 8);
      do
      {
        v11 = *v10++;
        sub_1D4B09950(v11);
        --v9;
      }
      while (v9);
      *(_DWORD *)(v8 + 32) = 0;
    }
  }
}

uint64_t sub_1D4B20514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  unsigned int v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;

  v8 = (_QWORD *)sub_1D4B1F794(a1, a2, a3, a4);
  v9 = 0;
  *v8 = off_1E9848470;
  v8[16] = 0;
  v10 = (char **)(v8 + 16);
  v8[17] = 0;
  v8[18] = 0;
  v11 = (uint64_t)(v8 + 18);
  while ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) > (unint64_t)v9)
  {
    v12 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 48))(a2, v9);
    sub_1D4B206F8(&v27, v12, a3, a4);
    v13 = v27;
    v27 = 0;
    v15 = *(_QWORD **)(a1 + 136);
    v14 = *(_QWORD *)(a1 + 144);
    if ((unint64_t)v15 >= v14)
    {
      v17 = ((char *)v15 - *v10) >> 3;
      if ((unint64_t)(v17 + 1) >> 61)
        sub_1D4B182AC();
      v18 = v14 - (_QWORD)*v10;
      v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v17 + 1))
        v19 = v17 + 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
        v21 = (char *)sub_1D4B182C0(v11, v20);
      else
        v21 = 0;
      v22 = &v21[8 * v17];
      *(_QWORD *)v22 = v13;
      v16 = v22 + 8;
      v24 = *(char **)(a1 + 128);
      v23 = *(char **)(a1 + 136);
      if (v23 != v24)
      {
        do
        {
          v25 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          *((_QWORD *)v22 - 1) = v25;
          v22 -= 8;
        }
        while (v23 != v24);
        v23 = *v10;
      }
      *(_QWORD *)(a1 + 128) = v22;
      *(_QWORD *)(a1 + 136) = v16;
      *(_QWORD *)(a1 + 144) = &v21[8 * v20];
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v15 = v13;
      v16 = v15 + 1;
    }
    *(_QWORD *)(a1 + 136) = v16;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    ++v9;
  }
  if (*(_BYTE *)(a1 + 48))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  return a1;
}

void sub_1D4B206C0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    v1[17] = v4;
    operator delete(v4);
  }
  sub_1D4B1FD24(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B206F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t result;
  uint64_t (**v10)();
  std::logic_error *exception;

  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
  {
    case 0u:
      v8 = operator new(0x88uLL);
      result = sub_1D4B21D28((uint64_t)v8, a1, a2, a3);
      goto LABEL_22;
    case 1u:
      v8 = operator new(0x88uLL);
      result = sub_1D4B2179C((uint64_t)v8, a1, a2, a3);
      goto LABEL_22;
    case 2u:
    case 3u:
    case 4u:
      v8 = operator new(0x90uLL);
      result = sub_1D4B21200((uint64_t)v8, a1, a2, a3);
      goto LABEL_22;
    case 5u:
      v8 = operator new(0xB8uLL);
      result = sub_1D4B222B8((uint64_t)v8, a1, a2, a3, 1);
      goto LABEL_22;
    case 6u:
      v8 = operator new(0xB8uLL);
      result = sub_1D4B222B8((uint64_t)v8, a1, a2, a3, 0);
      goto LABEL_22;
    case 7u:
      v8 = operator new(0x138uLL);
      result = sub_1D4B22D24((uint64_t)v8, a1, a2, a3);
      goto LABEL_22;
    case 8u:
      v8 = operator new(0x138uLL);
      result = sub_1D4B22D24((uint64_t)v8, a1, a2, a3);
      v10 = (uint64_t (**)())&off_1E98481A0;
      goto LABEL_21;
    case 9u:
      v8 = operator new(0xA0uLL);
      result = sub_1D4B24C70((uint64_t)v8, a1, a2, a3);
      goto LABEL_22;
    case 0xAu:
      v8 = operator new(0x98uLL);
      result = sub_1D4B26374((uint64_t)v8, a1, a2, a3);
      goto LABEL_22;
    case 0xBu:
      v8 = operator new(0xA0uLL);
      result = sub_1D4B26C9C((uint64_t)v8, a1, a2, a3);
      goto LABEL_22;
    case 0xCu:
      v8 = operator new(0x98uLL);
      result = sub_1D4B20514((uint64_t)v8, a1, a2, a3);
      goto LABEL_22;
    case 0xDu:
      v8 = operator new(0xA0uLL);
      result = sub_1D4B27794((uint64_t)v8, a1, a2, a3);
      goto LABEL_22;
    case 0xEu:
      if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) > 0x12)
      {
        if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) > 0x26)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_1D4B2D198(exception, "Decimal precision more than 38 is not supported");
LABEL_25:
          __cxa_throw(exception, (struct type_info *)&unk_1E9846428, (void (*)(void *))std::logic_error::~logic_error);
        }
        v8 = operator new(0xC8uLL);
        result = sub_1D4B257CC((uint64_t)v8, a1, a2, a3);
        v10 = off_1E9848E40;
LABEL_21:
        *v8 = v10;
      }
      else
      {
        v8 = operator new(0xB8uLL);
        result = sub_1D4B257CC((uint64_t)v8, a1, a2, a3);
      }
LABEL_22:
      *a4 = v8;
      return result;
    case 0xFu:
      v8 = operator new(0x90uLL);
      result = sub_1D4B21200((uint64_t)v8, a1, a2, a3);
      v10 = off_1E9847D18;
      goto LABEL_21;
    case 0x10u:
      v8 = operator new(0x140uLL);
      result = sub_1D4B2926C((uint64_t)v8, a1, a2, a3);
      goto LABEL_22;
    case 0x11u:
      v8 = operator new(0x168uLL);
      result = sub_1D4B290EC((uint64_t)v8, a1, a2, a3);
      goto LABEL_22;
    default:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_1D4B2D198(exception, "Type is not supported yet for creating ColumnWriter.");
      goto LABEL_25;
  }
}

void sub_1D4B20A20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B20A88(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;

  *a1 = off_1E9848470;
  v4 = a1 + 16;
  v2 = (_QWORD *)a1[16];
  v3 = (_QWORD *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      return sub_1D4B1FD24(a1);
    goto LABEL_7;
  }
  v5 = 0;
  v6 = 1;
  do
  {
    v7 = v2[v5];
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      v2 = (_QWORD *)a1[16];
      v3 = (_QWORD *)a1[17];
    }
    v5 = v6++;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[17] = v2;
    operator delete(v2);
  }
  return sub_1D4B1FD24(a1);
}

void sub_1D4B20B14(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B20A88(a1);
  operator delete(v1);
}

uint64_t sub_1D4B20B28(uint64_t a1, void *lpsrc, uint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;
  std::runtime_error *exception;

  v10 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846490, 0);
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to StructVectorBatch");
    __cxa_throw(exception, (struct type_info *)&unk_1E9846268, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v11 = v10;
  (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *((_QWORD *)lpsrc + 5) + a3, a4, a5);
  if (*((_BYTE *)v11 + 64))
    v12 = (unsigned __int8 *)(v11[5] + a3);
  else
    v12 = 0;
  v13 = *(_QWORD *)(a1 + 128);
  if (*(_QWORD *)(a1 + 136) != v13)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      (*(void (**)(_QWORD, _QWORD, uint64_t, unint64_t, unsigned __int8 *))(**(_QWORD **)(v13 + 8 * v14)
                                                                                           + 16))(*(_QWORD *)(v13 + 8 * v14), *(_QWORD *)(v11[10] + 8 * v14), a3, a4, v12);
      v14 = v15;
      v13 = *(_QWORD *)(a1 + 128);
      ++v15;
    }
    while (v14 < (*(_QWORD *)(a1 + 136) - v13) >> 3);
  }
  if (!v12)
    return (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a4);
  v16 = 0;
  if (a4)
  {
    v17 = a4;
    do
    {
      if (*v12++)
        ++v16;
      --v17;
    }
    while (v17);
  }
  result = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), v16);
  if (v16 < a4)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), 1);
  return result;
}

void sub_1D4B20CC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B20CDC(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;

  result = sub_1D4B1FE80(a1, a2);
  v5 = *(_QWORD *)(a1 + 128);
  if (*(_QWORD *)(a1 + 136) != v5)
  {
    v6 = 0;
    v7 = 1;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v5 + 8 * v6) + 24))(*(_QWORD *)(v5 + 8 * v6), a2);
      v6 = v7;
      v5 = *(_QWORD *)(a1 + 128);
      ++v7;
    }
    while (v6 < (*(_QWORD *)(a1 + 136) - v5) >> 3);
  }
  return result;
}

_QWORD *sub_1D4B20D48(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;

  result = sub_1D4B20290(a1, a2);
  v5 = *(_QWORD *)(a1 + 128);
  if (*(_QWORD *)(a1 + 136) != v5)
  {
    v6 = 0;
    v7 = 1;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v5 + 8 * v6) + 96))(*(_QWORD *)(v5 + 8 * v6), a2);
      v6 = v7;
      v5 = *(_QWORD *)(a1 + 128);
      ++v7;
    }
    while (v6 < (*(_QWORD *)(a1 + 136) - v5) >> 3);
  }
  return result;
}

uint64_t sub_1D4B20DB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  v3 = *(_QWORD *)(a1 + 128);
  if (*(_QWORD *)(a1 + 136) != v3)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      v2 += (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8 * v4) + 32))(*(_QWORD *)(v3 + 8 * v4));
      v4 = v5;
      v3 = *(_QWORD *)(a1 + 128);
      ++v5;
    }
    while (v4 < (*(_QWORD *)(a1 + 136) - v3) >> 3);
  }
  return v2;
}

_QWORD *sub_1D4B20E30(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  _QWORD v10[2];
  int v11;
  uint64_t v12;

  sub_1D4B0AF3C((uint64_t)v10);
  v12 = 0;
  v11 |= 3u;
  v4 = a2[1];
  if (v4 >= a2[2])
  {
    v5 = sub_1D4B29528(a2, (uint64_t)v10);
  }
  else
  {
    sub_1D4B0AFC0(a2[1], v10);
    v5 = v4 + 40;
    a2[1] = v4 + 40;
  }
  a2[1] = v5;
  v6 = *(_QWORD *)(a1 + 128);
  if (*(_QWORD *)(a1 + 136) != v6)
  {
    v7 = 0;
    v8 = 1;
    do
    {
      (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v6 + 8 * v7) + 40))(*(_QWORD *)(v6 + 8 * v7), a2);
      v7 = v8;
      v6 = *(_QWORD *)(a1 + 128);
      ++v8;
    }
    while (v7 < (*(_QWORD *)(a1 + 136) - v6) >> 3);
  }
  return sub_1D4B0AFC4(v10);
}

void sub_1D4B20EF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B0AFC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B20F18(uint64_t *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;

  result = sub_1D4B1FF5C((uint64_t)a1, a2, a1[4]);
  v5 = a1[16];
  if (a1[17] != v5)
  {
    v6 = 0;
    v7 = 1;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v5 + 8 * v6) + 48))(*(_QWORD *)(v5 + 8 * v6), a2);
      v6 = v7;
      v5 = a1[16];
      ++v7;
    }
    while (v6 < (a1[17] - v5) >> 3);
  }
  return result;
}

uint64_t sub_1D4B20F88(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 48))(*(_QWORD *)(a1 + 32));
  v3 = *(_QWORD *)(a1 + 128);
  if (*(_QWORD *)(a1 + 136) != v3)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8 * v4) + 72))(*(_QWORD *)(v3 + 8 * v4));
      v4 = v5;
      v3 = *(_QWORD *)(a1 + 128);
      ++v5;
    }
    while (v4 < (*(_QWORD *)(a1 + 136) - v3) >> 3);
  }
  return result;
}

_QWORD *sub_1D4B21004(uint64_t *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;

  result = sub_1D4B1FF5C((uint64_t)a1, a2, a1[5]);
  v5 = a1[16];
  if (a1[17] != v5)
  {
    v6 = 0;
    v7 = 1;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v5 + 8 * v6) + 56))(*(_QWORD *)(v5 + 8 * v6), a2);
      v6 = v7;
      v5 = a1[16];
      ++v7;
    }
    while (v6 < (a1[17] - v5) >> 3);
  }
  return result;
}

uint64_t sub_1D4B21074(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
  v3 = *(_QWORD *)(a1 + 128);
  if (*(_QWORD *)(a1 + 136) != v3)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8 * v4) + 64))(*(_QWORD *)(v3 + 8 * v4));
      v4 = v5;
      v3 = *(_QWORD *)(a1 + 128);
      ++v5;
    }
    while (v4 < (*(_QWORD *)(a1 + 136) - v3) >> 3);
  }
  return result;
}

uint64_t sub_1D4B210F0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;

  result = sub_1D4B20084(a1);
  v3 = *(_QWORD *)(a1 + 128);
  if (*(_QWORD *)(a1 + 136) != v3)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8 * v4) + 80))(*(_QWORD *)(v3 + 8 * v4));
      v4 = v5;
      v3 = *(_QWORD *)(a1 + 128);
      ++v5;
    }
    while (v4 < (*(_QWORD *)(a1 + 136) - v3) >> 3);
  }
  return result;
}

void sub_1D4B2114C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;

  sub_1D4B2044C(a1);
  v2 = *(_QWORD *)(a1 + 128);
  if (*(_QWORD *)(a1 + 136) != v2)
  {
    v3 = 0;
    v4 = 1;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v3) + 112))(*(_QWORD *)(v2 + 8 * v3));
      v3 = v4;
      v2 = *(_QWORD *)(a1 + 128);
      ++v4;
    }
    while (v3 < (*(_QWORD *)(a1 + 136) - v2) >> 3);
  }
}

uint64_t sub_1D4B211A8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;

  v1 = *(_QWORD *)(result + 128);
  if (*(_QWORD *)(result + 136) != v1)
  {
    v2 = result;
    v3 = 0;
    v4 = 1;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 120))(*(_QWORD *)(v1 + 8 * v3));
      v3 = v4;
      v1 = *(_QWORD *)(v2 + 128);
      ++v4;
    }
    while (v3 < (*(_QWORD *)(v2 + 136) - v1) >> 3);
  }
  return result;
}

uint64_t sub_1D4B21200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = a3;
  v7 = (_QWORD *)sub_1D4B1F794(a1, a2, a3, a4);
  *v7 = off_1E9848610;
  v7[16] = 0;
  *(_DWORD *)(a1 + 136) = sub_1D4B4ACF4(a4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(&v18, v5, 1);
  v8 = v18;
  v18 = 0;
  v16 = v8;
  LODWORD(v5) = *(_DWORD *)(a1 + 136);
  v9 = sub_1D4B4AE5C(a4);
  sub_1D4B3ACC8(&v16, 1, v5, v9, &v17);
  v10 = v17;
  v17 = 0;
  v11 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v16;
  v16 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  if (*(_BYTE *)(a1 + 48))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v14 = v18;
  v18 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return a1;
}

void sub_1D4B21328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v14;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  v14 = v12[16];
  v12[16] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  sub_1D4B1FD24(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B21398(uint64_t a1, void *lpsrc, uint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  uint64_t *v15;
  _BYTE *v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t result;
  std::runtime_error *exception;

  v10 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846298, 0);
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to LongVectorBatch");
LABEL_20:
    __cxa_throw(exception, (struct type_info *)&unk_1E9846268, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v11 = v10;
  v12 = *(const void **)(a1 + 24);
  if (!v12
    || (v13 = __dynamic_cast(v12, (const struct __class_type_info *)&unk_1E9846930, (const struct __class_type_info *)&unk_1E9846B98, 8)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to IntegerColumnStatisticsImpl");
    goto LABEL_20;
  }
  v14 = (uint64_t)v13;
  (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *((_QWORD *)lpsrc + 5) + a3, a4, a5);
  v15 = (uint64_t *)(v11[12] + 8 * a3);
  if (*((_BYTE *)v11 + 64))
    v16 = (_BYTE *)(v11[5] + a3);
  else
    v16 = 0;
  (*(void (**)(_QWORD, uint64_t *, unint64_t, _BYTE *))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128), v15, a4, v16);
  v17 = 0;
  if (a4)
  {
    v18 = a4;
    v19 = v16;
    do
    {
      if (!v16 || *v19)
      {
        if (*(_BYTE *)(a1 + 80))
          sub_1D4B17C04(*(_QWORD *)(a1 + 88), *v15);
        ++v17;
        sub_1D4B3BBD8(v14, *v15, 1);
      }
      ++v19;
      ++v15;
      --v18;
    }
    while (v18);
  }
  result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v14 + 88))(v14, v17);
  if (v17 < a4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 104))(v14, 1);
  return result;
}

void sub_1D4B21568(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B21580(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  int v11;
  int v12;
  uint64_t v13;

  sub_1D4B1FE80(a1, a2);
  sub_1D4B0A78C(v9);
  v4 = *(_QWORD *)(a1 + 16);
  v11 = 1;
  v12 = v4;
  v10 |= 3u;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 24))(*(_QWORD *)(a1 + 128));
  v10 |= 4u;
  v13 = v5;
  v6 = a2[1];
  if (v6 >= a2[2])
  {
    v7 = sub_1D4B292C8(a2, (uint64_t)v9);
  }
  else
  {
    sub_1D4B0A808(a2[1], (uint64_t)v9);
    v7 = v6 + 40;
    a2[1] = v6 + 40;
  }
  a2[1] = v7;
  return sub_1D4B0A80C(v9);
}

void sub_1D4B21630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  sub_1D4B0A80C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B21650(uint64_t a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 128) + 8) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8))
       + v2;
}

_QWORD *sub_1D4B21698(uint64_t a1, uint64_t *a2)
{
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  int v11;
  int v12;
  int v13;

  sub_1D4B0AF3C((uint64_t)v9);
  v4 = sub_1D4B1F728(*(unsigned int *)(a1 + 136));
  v5 = v10;
  v11 = v4;
  v12 = 0;
  v10 |= 3u;
  if (*(_BYTE *)(a1 + 80))
  {
    v10 = v5 | 7;
    v13 = 1;
  }
  v6 = a2[1];
  if (v6 >= a2[2])
  {
    v7 = sub_1D4B29528(a2, (uint64_t)v9);
  }
  else
  {
    sub_1D4B0AFC0(a2[1], v9);
    v7 = v6 + 40;
    a2[1] = v6 + 40;
  }
  a2[1] = v7;
  return sub_1D4B0AFC4(v9);
}

void sub_1D4B2173C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  sub_1D4B0AFC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2175C(uint64_t a1)
{
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 72));
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 72));
}

uint64_t sub_1D4B2179C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = (_QWORD *)sub_1D4B1F794(a1, a2, a3, a4);
  *v6 = off_1E9847BF8;
  v6[16] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(&v16, a3, 1);
  v7 = v16;
  v16 = 0;
  v14 = v7;
  sub_1D4B187BC(&v14, &v15);
  v8 = v15;
  v15 = 0;
  v9 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v14;
  v14 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (*(_BYTE *)(a1 + 48))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v12 = v16;
  v16 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return a1;
}

void sub_1D4B2188C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v14;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  v14 = v12[16];
  v12[16] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  sub_1D4B1FD24(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B218F8(uint64_t a1, void *lpsrc, uint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  std::runtime_error *exception;

  v10 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846298, 0);
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to LongVectorBatch");
LABEL_23:
    __cxa_throw(exception, (struct type_info *)&unk_1E9846268, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v11 = v10;
  v12 = *(const void **)(a1 + 24);
  if (!v12
    || (v13 = __dynamic_cast(v12, (const struct __class_type_info *)&unk_1E9846930, (const struct __class_type_info *)&unk_1E9846B98, 8)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to IntegerColumnStatisticsImpl");
    goto LABEL_23;
  }
  v14 = (uint64_t)v13;
  (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *((_QWORD *)lpsrc + 5) + a3, a4, a5);
  v15 = v11[12] + 8 * a3;
  if (!*((_BYTE *)v11 + 64))
  {
    v16 = 0;
    if (a4)
      goto LABEL_6;
LABEL_17:
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128), v15, a4, v16);
    v19 = 0;
    goto LABEL_18;
  }
  v16 = v11[5] + a3;
  if (!a4)
    goto LABEL_17;
LABEL_6:
  v17 = 0;
  do
  {
    *(_BYTE *)(v15 + v17) = *(_QWORD *)(v15 + 8 * v17);
    ++v17;
  }
  while (a4 != v17);
  (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128), v15, a4, v16);
  v18 = 0;
  v19 = 0;
  do
  {
    if (!v16 || *(_BYTE *)(v16 + v18))
    {
      if (*(_BYTE *)(a1 + 80))
        sub_1D4B17C04(*(_QWORD *)(a1 + 88), *(_QWORD *)(v15 + 8 * v18));
      ++v19;
      sub_1D4B3BBD8(v14, *(char *)(v15 + v18), 1);
    }
    ++v18;
  }
  while (a4 != v18);
LABEL_18:
  result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v14 + 88))(v14, v19);
  if (v19 < a4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 104))(v14, 1);
  return result;
}

void sub_1D4B21B00(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B21B18(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  int v11;
  int v12;
  uint64_t v13;

  sub_1D4B1FE80(a1, a2);
  sub_1D4B0A78C(v9);
  v4 = *(_QWORD *)(a1 + 16);
  v11 = 1;
  v12 = v4;
  v10 |= 3u;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128));
  v10 |= 4u;
  v13 = v5;
  v6 = a2[1];
  if (v6 >= a2[2])
  {
    v7 = sub_1D4B292C8(a2, (uint64_t)v9);
  }
  else
  {
    sub_1D4B0A808(a2[1], (uint64_t)v9);
    v7 = v6 + 40;
    a2[1] = v6 + 40;
  }
  a2[1] = v7;
  return sub_1D4B0A80C(v9);
}

void sub_1D4B21BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  sub_1D4B0A80C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B21BE8(uint64_t a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 24))(*(_QWORD *)(a1 + 128)) + v2;
}

_QWORD *sub_1D4B21C2C(uint64_t a1, uint64_t *a2)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  int v9;
  uint64_t v10;
  int v11;

  sub_1D4B0AF3C((uint64_t)v8);
  v4 = v9;
  v10 = 0;
  v9 |= 3u;
  if (*(_BYTE *)(a1 + 80))
  {
    v9 = v4 | 7;
    v11 = 1;
  }
  v5 = a2[1];
  if (v5 >= a2[2])
  {
    v6 = sub_1D4B29528(a2, (uint64_t)v8);
  }
  else
  {
    sub_1D4B0AFC0(a2[1], v8);
    v6 = v5 + 40;
    a2[1] = v5 + 40;
  }
  a2[1] = v6;
  return sub_1D4B0AFC4(v8);
}

void sub_1D4B21CC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B0AFC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B21CE8(uint64_t a1)
{
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 72));
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 128) + 40))(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 72));
}

uint64_t sub_1D4B21D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = (_QWORD *)sub_1D4B1F794(a1, a2, a3, a4);
  *v6 = off_1E9848540;
  v6[16] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(&v16, a3, 1);
  v7 = v16;
  v16 = 0;
  v14 = v7;
  sub_1D4B18A64(&v14, &v15);
  v8 = v15;
  v15 = 0;
  v9 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v14;
  v14 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (*(_BYTE *)(a1 + 48))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v12 = v16;
  v16 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return a1;
}

void sub_1D4B21E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v14;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  v14 = v12[16];
  v12[16] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  sub_1D4B1FD24(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B21E84(uint64_t a1, void *lpsrc, uint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  const void *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  std::runtime_error *exception;

  v10 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846298, 0);
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to LongVectorBatch");
LABEL_24:
    __cxa_throw(exception, (struct type_info *)&unk_1E9846268, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v11 = v10;
  v12 = *(const void **)(a1 + 24);
  if (!v12
    || (v13 = __dynamic_cast(v12, (const struct __class_type_info *)&unk_1E9846930, (const struct __class_type_info *)&unk_1E9846B28, 8)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to BooleanColumnStatisticsImpl");
    goto LABEL_24;
  }
  v14 = v13;
  (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *((_QWORD *)lpsrc + 5) + a3, a4, a5);
  v15 = v11[12] + 8 * a3;
  if (!*((_BYTE *)v11 + 64))
  {
    v16 = 0;
    if (a4)
      goto LABEL_6;
LABEL_18:
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128), v15, a4, v16);
    v19 = 0;
    goto LABEL_19;
  }
  v16 = v11[5] + a3;
  if (!a4)
    goto LABEL_18;
LABEL_6:
  v17 = 0;
  do
  {
    *(_BYTE *)(v15 + v17) = *(_QWORD *)(v15 + 8 * v17);
    ++v17;
  }
  while (a4 != v17);
  (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128), v15, a4, v16);
  v18 = 0;
  v19 = 0;
  do
  {
    if (!v16 || *(_BYTE *)(v16 + v18))
    {
      if (*(_BYTE *)(a1 + 80))
        sub_1D4B17C04(*(_QWORD *)(a1 + 88), *(_QWORD *)(v15 + 8 * v18));
      ++v19;
      if (*(_BYTE *)(v15 + v18))
        ++v14[7];
    }
    ++v18;
  }
  while (a4 != v18);
LABEL_19:
  result = (*(uint64_t (**)(_QWORD *, unint64_t))(*v14 + 64))(v14, v19);
  if (v19 < a4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*v14 + 80))(v14, 1);
  return result;
}

void sub_1D4B22090(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B220A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  int v11;
  int v12;
  uint64_t v13;

  sub_1D4B1FE80(a1, a2);
  sub_1D4B0A78C(v9);
  v4 = *(_QWORD *)(a1 + 16);
  v11 = 1;
  v12 = v4;
  v10 |= 3u;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128));
  v10 |= 4u;
  v13 = v5;
  v6 = a2[1];
  if (v6 >= a2[2])
  {
    v7 = sub_1D4B292C8(a2, (uint64_t)v9);
  }
  else
  {
    sub_1D4B0A808(a2[1], (uint64_t)v9);
    v7 = v6 + 40;
    a2[1] = v6 + 40;
  }
  a2[1] = v7;
  return sub_1D4B0A80C(v9);
}

void sub_1D4B22158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  sub_1D4B0A80C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B22178(uint64_t a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 24))(*(_QWORD *)(a1 + 128)) + v2;
}

_QWORD *sub_1D4B221BC(uint64_t a1, uint64_t *a2)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  int v9;
  uint64_t v10;
  int v11;

  sub_1D4B0AF3C((uint64_t)v8);
  v4 = v9;
  v10 = 0;
  v9 |= 3u;
  if (*(_BYTE *)(a1 + 80))
  {
    v9 = v4 | 7;
    v11 = 1;
  }
  v5 = a2[1];
  if (v5 >= a2[2])
  {
    v6 = sub_1D4B29528(a2, (uint64_t)v8);
  }
  else
  {
    sub_1D4B0AFC0(a2[1], v8);
    v6 = v5 + 40;
    a2[1] = v5 + 40;
  }
  a2[1] = v6;
  return sub_1D4B0AFC4(v8);
}

void sub_1D4B22258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B0AFC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B22278(uint64_t a1)
{
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 72));
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 128) + 40))(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 72));
}

uint64_t sub_1D4B222B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;

  v9 = sub_1D4B1F794(a1, a2, a3, a4);
  *(_QWORD *)v9 = off_1E98482E8;
  *(_BYTE *)(v9 + 128) = a5;
  *(_QWORD *)(v9 + 136) = 0;
  v10 = (uint64_t **)(v9 + 136);
  v11 = sub_1D4B4AE70(a4);
  sub_1D4B2EFDC((_QWORD *)(a1 + 144), v11, 0);
  v12 = (uint64_t *)operator new(0x18uLL);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(&v17, a3, 1);
  v13 = v17;
  v17 = 0;
  v12[1] = 0;
  v12[2] = 0;
  *v12 = v13;
  sub_1D4B22400(v10, v12);
  v14 = v17;
  v17 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (*(_BYTE *)(a1 + 128))
    v15 = 4;
  else
    v15 = 8;
  sub_1D4B2EF9C(a1 + 144, v15);
  if (*(_BYTE *)(a1 + 48))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  return a1;
}

void sub_1D4B223C0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t **v2;
  uint64_t v3;
  void *v4;

  operator delete(v4);
  sub_1D4B2F630(v3);
  sub_1D4B22400(v2, 0);
  sub_1D4B1FD24(v1);
  _Unwind_Resume(a1);
}

void sub_1D4B22400(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    operator delete(v2);
  }
}

uint64_t sub_1D4B2244C(uint64_t a1, void *lpsrc, uint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  const void *v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  const double *v18;
  int8x8_t *v19;
  _BYTE *v20;
  double v21;
  int16x8_t v22;
  int64x2_t v23;
  double v24;
  double *v25;
  uint64_t result;
  std::runtime_error *exception;
  unint64_t v28;

  v10 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846410, 0);
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to DoubleVectorBatch");
LABEL_32:
    __cxa_throw(exception, (struct type_info *)&unk_1E9846268, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v11 = v10;
  v12 = *(const void **)(a1 + 24);
  if (!v12
    || (v13 = (char *)__dynamic_cast(v12, (const struct __class_type_info *)&unk_1E9846930, (const struct __class_type_info *)&unk_1E9846AB8, 8)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to DoubleColumnStatisticsImpl");
    goto LABEL_32;
  }
  v14 = v13;
  (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *((_QWORD *)lpsrc + 5) + a3, a4, a5);
  if (*((_BYTE *)v11 + 64))
    v15 = (_BYTE *)(v11[5] + a3);
  else
    v15 = 0;
  if (*(_BYTE *)(a1 + 128))
    v16 = 4;
  else
    v16 = 8;
  v28 = a4;
  v17 = 0;
  if (a4)
  {
    v18 = (const double *)(v11[12] + 8 * a3);
    v19 = *(int8x8_t **)(a1 + 160);
    v20 = v15;
    do
    {
      if (v15 && !*v20)
        goto LABEL_26;
      if (*(_BYTE *)(a1 + 128))
      {
        v21 = *v18;
        *(float *)&v21 = *v18;
        v22 = (int16x8_t)vshlq_s32(vdupq_lane_s32(*(int32x2_t *)&v21, 0), (int32x4_t)xmmword_1D4BD4B50);
        *(int16x4_t *)v22.i8 = vmovn_s32((int32x4_t)v22);
        v19->i32[0] = vmovn_s16(v22).u32[0];
      }
      else
      {
        v23 = (int64x2_t)vld1q_dup_f64(v18);
        *v19 = vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_s64(v23, (int64x2_t)xmmword_1D4BD4B70), (int32x4_t)vshlq_s64(v23, (int64x2_t)xmmword_1D4BD4B60)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_s64(v23, (int64x2_t)xmmword_1D4BD4B90), (int32x4_t)vshlq_s64(v23, (int64x2_t)xmmword_1D4BD4B80))));
      }
      sub_1D4B02A30(*(char **)(a1 + 136), (uint64_t)v19, v16);
      if (*(_BYTE *)(a1 + 80))
        sub_1D4B17E58(*(_QWORD *)(a1 + 88), *v18);
      v24 = *v18;
      if (v14[17])
      {
        v25 = (double *)(v14 + 40);
        if (*((double *)v14 + 5) <= v24)
        {
          v25 = (double *)(v14 + 48);
          if (*((double *)v14 + 6) >= v24)
            goto LABEL_25;
        }
      }
      else
      {
        *(_WORD *)(v14 + 17) = 257;
        *((double *)v14 + 6) = v24;
        v25 = (double *)(v14 + 40);
      }
      *v25 = v24;
LABEL_25:
      ++v17;
      *((double *)v14 + 7) = v24 + *((double *)v14 + 7);
LABEL_26:
      ++v18;
      ++v20;
      --a4;
    }
    while (a4);
  }
  result = (*(uint64_t (**)(char *, unint64_t))(*(_QWORD *)v14 + 88))(v14, v17);
  if (v17 < v28)
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v14 + 104))(v14, 1);
  return result;
}

void sub_1D4B22728(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B22740(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  int v11;
  int v12;
  uint64_t v13;

  sub_1D4B1FE80(a1, a2);
  sub_1D4B0A78C(v9);
  v4 = *(_QWORD *)(a1 + 16);
  v11 = 1;
  v12 = v4;
  v10 |= 3u;
  v5 = sub_1D4B02B44(*(_QWORD **)(a1 + 136));
  v10 |= 4u;
  v13 = v5;
  v6 = a2[1];
  if (v6 >= a2[2])
  {
    v7 = sub_1D4B292C8(a2, (uint64_t)v9);
  }
  else
  {
    sub_1D4B0A808(a2[1], (uint64_t)v9);
    v7 = v6 + 40;
    a2[1] = v6 + 40;
  }
  a2[1] = v7;
  return sub_1D4B0A80C(v9);
}

void sub_1D4B227E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  sub_1D4B0A80C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B22808(uint64_t a1)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  return sub_1D4B02B34(*(_QWORD **)(a1 + 136)) + v2;
}

_QWORD *sub_1D4B22844(uint64_t a1, uint64_t *a2)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  int v9;
  uint64_t v10;
  int v11;

  sub_1D4B0AF3C((uint64_t)v8);
  v4 = v9;
  v10 = 0;
  v9 |= 3u;
  if (*(_BYTE *)(a1 + 80))
  {
    v9 = v4 | 7;
    v11 = 1;
  }
  v5 = a2[1];
  if (v5 >= a2[2])
  {
    v6 = sub_1D4B29528(a2, (uint64_t)v8);
  }
  else
  {
    sub_1D4B0AFC0(a2[1], v8);
    v6 = v5 + 40;
    a2[1] = v5 + 40;
  }
  a2[1] = v6;
  return sub_1D4B0AFC4(v8);
}

void sub_1D4B228E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B0AFC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B22900(uint64_t a1)
{
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 72));
  return sub_1D4B02B88(*(int **)(a1 + 136), *(_QWORD *)(a1 + 72));
}

uint64_t sub_1D4B22938(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v6;
  _OWORD *v7;
  char v8;
  void *__p;
  size_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(a1 + 16);
  __p = a2;
  v11 = a3;
  v12 = v6;
  v7 = sub_1D4B296F4((uint64_t **)a1, (uint64_t)&__p, (uint64_t)&__p);
  if (v8)
  {
    sub_1D4B29A40(&__p, a3);
    sub_1D4B22A10((uint64_t *)(a1 + 24), (uint64_t)&__p);
    if (__p)
    {
      v11 = (size_t)__p;
      operator delete(__p);
    }
    memcpy(*(void **)(*(_QWORD *)(a1 + 32) - 24), a2, a3);
    *((_QWORD *)v7 + 4) = *(_QWORD *)(*(_QWORD *)(a1 + 32) - 24);
    *(_QWORD *)(a1 + 48) += a3;
  }
  return *((_QWORD *)v7 + 6);
}

void sub_1D4B229F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4B22A10(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_1D4B182AC();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)sub_1D4B29B64(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    sub_1D4B29AF0(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = sub_1D4B29CC0((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1D4B22B38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B29CC0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B22B4C(_QWORD *result, char *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  v3 = result + 1;
  v4 = (_QWORD *)*result;
  if ((_QWORD *)*result != result + 1)
  {
    do
    {
      sub_1D4B02A30(a2, v4[4], v4[5]);
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 40))(a3, v4[5]);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != v3);
  }
  return result;
}

void sub_1D4B22BDC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[3];

  sub_1D4B29D4C(__p, a1[2]);
  v4 = (_QWORD *)*a1;
  v5 = __p[0];
  if ((_QWORD *)*a1 != a1 + 1)
  {
    v6 = 0;
    do
    {
      v5[v4[6]] = v6;
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      ++v6;
      v4 = v8;
    }
    while (v8 != a1 + 1);
  }
  v10 = *(_QWORD **)a2;
  v11 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v11)
  {
    v12 = v11 >> 3;
    do
    {
      *v10 = v5[*v10];
      ++v10;
      --v12;
    }
    while (v12);
  }
  else if (!v5)
  {
    return;
  }
  __p[1] = v5;
  operator delete(v5);
}

void sub_1D4B22CA0(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  sub_1D4B1DB3C((uint64_t)a2, a1[2]);
  v4 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      *(_QWORD *)(*a2 + 8 * v4[6]) = v4 + 4;
      v5 = (_QWORD *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != a1 + 1);
  }
}

uint64_t sub_1D4B22D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8;

  *(_QWORD *)sub_1D4B1F794(a1, a2, a3, a4) = off_1E98483A0;
  *(_DWORD *)(a1 + 128) = sub_1D4B4ACF4(a4);
  *(_BYTE *)(a1 + 132) = sub_1D4B4AE44(a4) != 0;
  *(_QWORD *)(a1 + 136) = a3;
  v8 = sub_1D4B4AE5C(a4);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 144) = v8;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 257) = 0u;
  *(_BYTE *)(a1 + 273) = sub_1D4B4AE88(a4);
  *(double *)(a1 + 280) = sub_1D4B4ADAC(a4);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) == 8)
  {
    *(_WORD *)(a1 + 272) = 1;
  }
  else if (*(_BYTE *)(a1 + 273))
  {
    sub_1D4B22EFC(a1);
    goto LABEL_6;
  }
  *(_BYTE *)(a1 + 272) = 1;
  sub_1D4B23150(a1);
LABEL_6:
  if (*(_BYTE *)(a1 + 48))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  return a1;
}

void sub_1D4B22E5C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t **v2;
  uint64_t v3;
  uint64_t **v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  sub_1D4B232C8(v3);
  sub_1D4B22400(v2, 0);
  v6 = v1[22];
  v1[22] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = v1[21];
  v1[21] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_1D4B22400(v4 + 1, 0);
  v8 = *v4;
  *v4 = 0;
  if (v8)
    (*(void (**)(uint64_t *))(*v8 + 8))(v8);
  sub_1D4B1FD24(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B22EFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 136) + 16))(&v22, *(_QWORD *)(a1 + 136), 1);
  v2 = v22;
  v22 = 0;
  v20 = v2;
  sub_1D4B3ACC8(&v20, 0, *(_DWORD *)(a1 + 128), *(unsigned __int8 *)(a1 + 144), &v21);
  v3 = v21;
  v21 = 0;
  v4 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v3;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v21;
    v21 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  v6 = v20;
  v20 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 136) + 16))(&v21, *(_QWORD *)(a1 + 136), 2);
  v7 = v21;
  v21 = 0;
  v18 = v7;
  sub_1D4B3ACC8(&v18, 0, *(_DWORD *)(a1 + 128), *(unsigned __int8 *)(a1 + 144), &v19);
  v8 = v19;
  v19 = 0;
  v9 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v19;
    v19 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v18;
  v18 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (uint64_t *)operator new(0x18uLL);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 136) + 16))(&v17, *(_QWORD *)(a1 + 136), 3);
  v13 = v17;
  v17 = 0;
  v12[1] = 0;
  v12[2] = 0;
  *v12 = v13;
  sub_1D4B22400((uint64_t **)(a1 + 184), v12);
  v14 = v17;
  v17 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v21;
  v21 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  result = v22;
  v22 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1D4B230C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  void *v13;
  uint64_t v14;
  uint64_t v16;

  operator delete(v13);
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  v16 = *(_QWORD *)(v14 - 24);
  *(_QWORD *)(v14 - 24) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B23150(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 136) + 16))(&v14, *(_QWORD *)(a1 + 136), 2);
  v2 = v14;
  v14 = 0;
  v12 = v2;
  sub_1D4B3ACC8(&v12, 0, *(_DWORD *)(a1 + 128), *(unsigned __int8 *)(a1 + 144), &v13);
  v3 = v13;
  v13 = 0;
  v4 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v3;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v13;
    v13 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  v6 = v12;
  v12 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (uint64_t *)operator new(0x18uLL);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 136) + 16))(&v11, *(_QWORD *)(a1 + 136), 1);
  v8 = v11;
  v11 = 0;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = v8;
  sub_1D4B22400((uint64_t **)(a1 + 160), v7);
  v9 = v11;
  v11 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  result = v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1D4B23274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B232C8(uint64_t a1)
{
  void *v2;
  void **v4;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 24);
  sub_1D4B28B18(&v4);
  sub_1D4B28BAC(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_1D4B2331C(uint64_t a1, void *lpsrc, uint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t result;
  std::runtime_error *exception;
  void **v36;
  uint64_t v37;

  v10 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846450, 0);
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to StringVectorBatch");
LABEL_44:
    __cxa_throw(exception, (struct type_info *)&unk_1E9846268, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v11 = v10;
  v12 = *(const void **)(a1 + 24);
  if (!v12
    || (v13 = __dynamic_cast(v12, (const struct __class_type_info *)&unk_1E9846930, (const struct __class_type_info *)&unk_1E9846AF0, 8)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to StringColumnStatisticsImpl");
    goto LABEL_44;
  }
  v14 = (uint64_t)v13;
  (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *((_QWORD *)lpsrc + 5) + a3, a4, a5);
  v37 = v11[17] + 8 * a3;
  if (*((_BYTE *)v11 + 64))
    v15 = v11[5] + a3;
  else
    v15 = 0;
  v16 = v11[12];
  if (*(_BYTE *)(a1 + 273))
  {
    if (a4)
      goto LABEL_9;
LABEL_37:
    v18 = 0;
    goto LABEL_38;
  }
  (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 152) + 16))(*(_QWORD *)(a1 + 152), v37, a4, v15);
  if (!a4)
    goto LABEL_37;
LABEL_9:
  v17 = 0;
  v18 = 0;
  v36 = (void **)(a1 + 248);
  v19 = v16 + 8 * a3;
  do
  {
    if (!v15 || *(_BYTE *)(v15 + v17))
    {
      v20 = *(_QWORD *)(v37 + 8 * v17);
      if (*(_BYTE *)(a1 + 273))
      {
        v21 = sub_1D4B22938(a1 + 192, *(void **)(v19 + 8 * v17), *(_QWORD *)(v37 + 8 * v17));
        v22 = v21;
        v24 = *(uint64_t **)(a1 + 256);
        v23 = *(_QWORD *)(a1 + 264);
        if ((unint64_t)v24 >= v23)
        {
          v26 = (uint64_t *)*v36;
          v27 = ((char *)v24 - (_BYTE *)*v36) >> 3;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61)
            sub_1D4B182AC();
          v29 = v23 - (_QWORD)v26;
          if (v29 >> 2 > v28)
            v28 = v29 >> 2;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          if (v30)
          {
            v31 = (char *)sub_1D4B182C0(a1 + 264, v30);
            v26 = *(uint64_t **)(a1 + 248);
            v24 = *(uint64_t **)(a1 + 256);
          }
          else
          {
            v31 = 0;
          }
          v32 = (uint64_t *)&v31[8 * v27];
          *v32 = v22;
          v25 = v32 + 1;
          while (v24 != v26)
          {
            v33 = *--v24;
            *--v32 = v33;
          }
          *(_QWORD *)(a1 + 248) = v32;
          *(_QWORD *)(a1 + 256) = v25;
          *(_QWORD *)(a1 + 264) = &v31[8 * v30];
          if (v26)
            operator delete(v26);
        }
        else
        {
          *v24 = v21;
          v25 = v24 + 1;
        }
        *(_QWORD *)(a1 + 256) = v25;
      }
      else
      {
        sub_1D4B02A30(*(char **)(a1 + 160), *(_QWORD *)(v19 + 8 * v17), *(_QWORD *)(v37 + 8 * v17));
      }
      if (*(_BYTE *)(a1 + 80))
        sub_1D4B17B64(*(_QWORD *)(a1 + 88), *(uint64_t **)(v19 + 8 * v17), v20);
      sub_1D4B23634(v14, *(char **)(v19 + 8 * v17), v20);
      ++v18;
    }
    ++v17;
  }
  while (v17 != a4);
LABEL_38:
  result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v14 + 88))(v14, v18);
  if (v18 < a4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 104))(v14, 1);
  return result;
}

void sub_1D4B2361C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D4B23634(uint64_t a1, char *__s2, size_t a3)
{
  unint64_t v3;
  unint64_t v6;
  const char *v7;
  size_t v8;
  int v9;
  unint64_t v10;
  const char *v11;
  size_t v12;
  size_t v13;
  int v14;
  void *v15;
  _QWORD v16[2];
  char v17;
  void *__p[2];
  char v19;
  void *v20[2];
  uint64_t v21;
  void *__dst[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v3 = a3;
  if (__s2)
  {
    if (*(_BYTE *)(a1 + 17))
    {
      v6 = *(unsigned __int8 *)(a1 + 63);
      if (*(char *)(a1 + 63) < 0)
      {
        v7 = *(const char **)(a1 + 40);
        v8 = *(_QWORD *)(a1 + 48);
      }
      else
      {
        v7 = (const char *)(a1 + 40);
        v8 = *(unsigned __int8 *)(a1 + 63);
      }
      if (v8 < a3)
        a3 = v8;
      v9 = strncmp(v7, __s2, a3);
      if (v9 > 0)
        goto LABEL_11;
      if (!v9)
      {
        if ((v6 & 0x80) != 0)
          v6 = *(_QWORD *)(a1 + 48);
        if (v6 > v3)
        {
LABEL_11:
          sub_1D4B28D0C(__p, __s2, &__s2[v3], v3);
          sub_1D4B28BEC(a1, (uint64_t)__p);
          if (v19 < 0)
            operator delete(__p[0]);
        }
      }
      v10 = *(unsigned __int8 *)(a1 + 87);
      if (*(char *)(a1 + 87) < 0)
      {
        v11 = *(const char **)(a1 + 64);
        v12 = *(_QWORD *)(a1 + 72);
      }
      else
      {
        v11 = (const char *)(a1 + 64);
        v12 = *(unsigned __int8 *)(a1 + 87);
      }
      if (v12 >= v3)
        v13 = v3;
      else
        v13 = v12;
      v14 = strncmp(v11, __s2, v13);
      if (v14 < 0)
        goto LABEL_45;
      if (!v14)
      {
        if ((v10 & 0x80) != 0)
          v10 = *(_QWORD *)(a1 + 72);
        if (v10 < v3)
        {
LABEL_45:
          sub_1D4B28D0C(v16, __s2, &__s2[v3], v3);
          sub_1D4B28C7C(a1, (uint64_t)v16);
          if (v17 < 0)
          {
            v15 = (void *)v16[0];
LABEL_41:
            operator delete(v15);
          }
        }
      }
    }
    else
    {
      sub_1D4B28D0C(&v24, __s2, &__s2[a3], a3);
      if (SHIBYTE(v25) < 0)
      {
        sub_1D4B1655C(__dst, (void *)v24, *((unint64_t *)&v24 + 1));
      }
      else
      {
        *(_OWORD *)__dst = v24;
        v23 = v25;
      }
      sub_1D4B28BEC(a1, (uint64_t)__dst);
      if (SHIBYTE(v23) < 0)
        operator delete(__dst[0]);
      if (SHIBYTE(v25) < 0)
      {
        sub_1D4B1655C(v20, (void *)v24, *((unint64_t *)&v24 + 1));
      }
      else
      {
        *(_OWORD *)v20 = v24;
        v21 = v25;
      }
      sub_1D4B28C7C(a1, (uint64_t)v20);
      if (SHIBYTE(v21) < 0)
        operator delete(v20[0]);
      if (SHIBYTE(v25) < 0)
      {
        v15 = (void *)v24;
        goto LABEL_41;
      }
    }
  }
  *(_QWORD *)(a1 + 24) += v3;
}

void sub_1D4B23820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(char *)(v33 - 33) < 0)
    operator delete(*(void **)(v33 - 56));
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4B23890(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  _QWORD v30[2];
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  _QWORD v35[2];
  int v36;
  int v37;
  int v38;
  uint64_t v39;

  sub_1D4B1FE80(a1, a2);
  if (*(_BYTE *)(a1 + 273))
  {
    sub_1D4B0A78C(v35);
    v4 = *(_QWORD *)(a1 + 16);
    v37 = 1;
    v38 = v4;
    v36 |= 3u;
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 168) + 24))(*(_QWORD *)(a1 + 168));
    v36 |= 4u;
    v39 = v5;
    v6 = a2[1];
    if (v6 >= a2[2])
    {
      v7 = sub_1D4B292C8(a2, (uint64_t)v35);
    }
    else
    {
      sub_1D4B0A808(a2[1], (uint64_t)v35);
      v7 = v6 + 40;
      a2[1] = v6 + 40;
    }
    a2[1] = v7;
    sub_1D4B0A78C(v30);
    v12 = *(_QWORD *)(a1 + 16);
    v32 = 3;
    v33 = v12;
    v31 |= 3u;
    v13 = sub_1D4B02B44(*(_QWORD **)(a1 + 184));
    v31 |= 4u;
    v34 = v13;
    v14 = a2[1];
    if (v14 >= a2[2])
    {
      v15 = sub_1D4B292C8(a2, (uint64_t)v30);
    }
    else
    {
      sub_1D4B0A808(a2[1], (uint64_t)v30);
      v15 = v14 + 40;
      a2[1] = v14 + 40;
    }
    a2[1] = v15;
    sub_1D4B0A78C(v25);
    v16 = *(_QWORD *)(a1 + 16);
    v27 = 2;
    v28 = v16;
    v26 |= 3u;
    v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 24))(*(_QWORD *)(a1 + 176));
    v26 |= 4u;
    v29 = v17;
    v18 = a2[1];
    if (v18 >= a2[2])
    {
      v19 = sub_1D4B292C8(a2, (uint64_t)v25);
    }
    else
    {
      sub_1D4B0A808(a2[1], (uint64_t)v25);
      v19 = v18 + 40;
      a2[1] = v18 + 40;
    }
    a2[1] = v19;
    sub_1D4B0A80C(v25);
  }
  else
  {
    sub_1D4B0A78C(v35);
    v8 = *(_QWORD *)(a1 + 16);
    v37 = 2;
    v38 = v8;
    v36 |= 3u;
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 24))(*(_QWORD *)(a1 + 152));
    v36 |= 4u;
    v39 = v9;
    v10 = a2[1];
    if (v10 >= a2[2])
    {
      v11 = sub_1D4B292C8(a2, (uint64_t)v35);
    }
    else
    {
      sub_1D4B0A808(a2[1], (uint64_t)v35);
      v11 = v10 + 40;
      a2[1] = v10 + 40;
    }
    a2[1] = v11;
    sub_1D4B0A78C(v30);
    v20 = *(_QWORD *)(a1 + 16);
    v32 = 1;
    v33 = v20;
    v31 |= 3u;
    v21 = sub_1D4B02B44(*(_QWORD **)(a1 + 160));
    v31 |= 4u;
    v34 = v21;
    v22 = a2[1];
    if (v22 >= a2[2])
    {
      v23 = sub_1D4B292C8(a2, (uint64_t)v30);
    }
    else
    {
      sub_1D4B0A808(a2[1], (uint64_t)v30);
      v23 = v22 + 40;
      a2[1] = v22 + 40;
    }
    a2[1] = v23;
  }
  sub_1D4B0A80C(v30);
  return sub_1D4B0A80C(v35);
}

void sub_1D4B23B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a7);
  *(_QWORD *)(v7 + 8) = v8;
  sub_1D4B0A80C((uint64_t *)va);
  sub_1D4B0A80C((_QWORD *)(v9 - 72));
  _Unwind_Resume(a1);
}

unint64_t sub_1D4B23B90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  v3 = v2;
  if (*(_BYTE *)(a1 + 273))
  {
    if (*(_BYTE *)(a1 + 132))
      return (*(_QWORD *)(a1 + 240)
            + v2
            + 4 * *(_QWORD *)(a1 + 208)
            + ((uint64_t)(*(_QWORD *)(a1 + 256) - *(_QWORD *)(a1 + 248)) >> 1))
           / 3uLL;
    else
      return *(_QWORD *)(a1 + 240)
           + v2
           + 4 * *(_QWORD *)(a1 + 208)
           + ((uint64_t)(*(_QWORD *)(a1 + 256) - *(_QWORD *)(a1 + 248)) >> 1);
  }
  else
  {
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 152) + 8) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8));
    return v5 + v3 + sub_1D4B02B34(*(_QWORD **)(a1 + 160));
  }
}

_QWORD *sub_1D4B23C34(uint64_t a1, uint64_t *a2)
{
  int v4;
  BOOL v5;
  _BOOL4 v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  int v16;
  int v17;
  int v18;
  int v19;

  sub_1D4B0AF3C((uint64_t)v15);
  v4 = *(_DWORD *)(a1 + 128);
  v5 = v4 == 0;
  v6 = v4 != 0;
  v7 = v16;
  v8 = 2 * v6;
  if (v5)
    v9 = 1;
  else
    v9 = 3;
  if (*(_BYTE *)(a1 + 273))
    v10 = v9;
  else
    v10 = v8;
  v11 = *(_QWORD *)(a1 + 208);
  v17 = v10;
  v18 = v11;
  v16 |= 3u;
  if (*(_BYTE *)(a1 + 80))
  {
    v16 = v7 | 7;
    v19 = 1;
  }
  v12 = a2[1];
  if (v12 >= a2[2])
  {
    v13 = sub_1D4B29528(a2, (uint64_t)v15);
  }
  else
  {
    sub_1D4B0AFC0(a2[1], v15);
    v13 = v12 + 40;
    a2[1] = v12 + 40;
  }
  a2[1] = v13;
  return sub_1D4B0AFC4(v15);
}

void sub_1D4B23CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B0AFC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1D4B23D18(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 72));
  if (*(_BYTE *)(a1 + 273))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v2 = (uint64_t)(*(_QWORD *)(a1 + 256) - *(_QWORD *)(a1 + 248)) >> 3;
      v3 = *(uint64_t **)(a1 + 296);
      v4 = *(_QWORD *)(a1 + 304);
      if ((unint64_t)v3 >= v4)
      {
        v6 = *(uint64_t **)(a1 + 288);
        v7 = v3 - v6;
        if ((unint64_t)(v7 + 1) >> 61)
          sub_1D4B182AC();
        v8 = v4 - (_QWORD)v6;
        v9 = (uint64_t)(v4 - (_QWORD)v6) >> 2;
        if (v9 <= v7 + 1)
          v9 = v7 + 1;
        if (v8 >= 0x7FFFFFFFFFFFFFF8)
          v10 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
        {
          v11 = (char *)sub_1D4B182C0(a1 + 304, v10);
          v6 = *(uint64_t **)(a1 + 288);
          v3 = *(uint64_t **)(a1 + 296);
        }
        else
        {
          v11 = 0;
        }
        v12 = (uint64_t *)&v11[8 * v7];
        v13 = &v11[8 * v10];
        *v12 = v2;
        v5 = v12 + 1;
        while (v3 != v6)
        {
          v14 = *--v3;
          *--v12 = v14;
        }
        *(_QWORD *)(a1 + 288) = v12;
        *(_QWORD *)(a1 + 296) = v5;
        *(_QWORD *)(a1 + 304) = v13;
        if (v6)
          operator delete(v6);
      }
      else
      {
        *v3 = v2;
        v5 = v3 + 1;
      }
      *(_QWORD *)(a1 + 296) = v5;
    }
  }
  else
  {
    sub_1D4B02B88(*(int **)(a1 + 160), *(_QWORD *)(a1 + 72));
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 152) + 32))(*(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 72));
  }
}

BOOL sub_1D4B23E48(uint64_t a1)
{
  _BOOL8 v1;

  if (*(_BYTE *)(a1 + 272))
    return *(_BYTE *)(a1 + 273) != 0;
  v1 = *(_QWORD *)(a1 + 208) <= (unint64_t)(*(double *)(a1 + 280)
                                                 * (double)(unint64_t)((uint64_t)(*(_QWORD *)(a1 + 256)
                                                                                      - *(_QWORD *)(a1 + 248)) >> 3));
  *(_BYTE *)(a1 + 273) = v1;
  *(_BYTE *)(a1 + 272) = 1;
  return v1;
}

uint64_t sub_1D4B23E9C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 273) && !*(_BYTE *)(a1 + 272) && !sub_1D4B23E48(a1))
    sub_1D4B23EE0(a1);
  return sub_1D4B20084(a1);
}

void sub_1D4B23EE0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *__p;
  void *v7;
  uint64_t v8;

  sub_1D4B23150(a1);
  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(void **)(a1 + 64);
    __p = &off_1E9849218;
    v7 = v2;
    sub_1D4B02B88(*(int **)(a1 + 160), (uint64_t)&__p);
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 152) + 32))(*(_QWORD *)(a1 + 152), &__p);
    nullsub_1(&__p);
  }
  __p = 0;
  v7 = 0;
  v8 = 0;
  sub_1D4B22CA0((_QWORD *)(a1 + 192), &__p);
  v3 = *(_QWORD *)(a1 + 248);
  if (*(_QWORD *)(a1 + 256) != v3)
  {
    v4 = 0;
    do
    {
      v5 = *((_QWORD *)__p + *(_QWORD *)(v3 + 8 * v4));
      sub_1D4B02A30(*(char **)(a1 + 160), *(_QWORD *)v5, *(_QWORD *)(v5 + 8));
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 152) + 40))(*(_QWORD *)(a1 + 152), *(_QWORD *)(v5 + 8));
      ++v4;
      v3 = *(_QWORD *)(a1 + 248);
    }
    while (v4 != (*(_QWORD *)(a1 + 256) - v3) >> 3);
  }
  sub_1D4B240D4(a1);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_1D4B23FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4B23FFC(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  sub_1D4B2044C(a1);
  *(_QWORD *)(a1 + 240) = 0;
  sub_1D4B28B58((uint64_t *)(a1 + 216));
  sub_1D4B28BAC(a1 + 192, *(_QWORD **)(a1 + 200));
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  sub_1D4B1DB6C(a1 + 248, 0);
  v2 = *(_QWORD **)(a1 + 288);
  *(_QWORD *)(a1 + 296) = v2;
  v3 = *(_QWORD *)(a1 + 304);
  if ((unint64_t)v2 >= v3)
  {
    v5 = v3 - (_QWORD)v2;
    v6 = v5 >> 2;
    if ((unint64_t)(v5 >> 2) <= 1)
      v6 = 1;
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFF8)
      v7 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v7 = v6;
    v8 = sub_1D4B182C0(a1 + 304, v7);
    v9 = *(char **)(a1 + 288);
    v10 = *(char **)(a1 + 296);
    v12 = &v8[v11];
    *v8 = 0;
    v4 = v8 + 1;
    while (v10 != v9)
    {
      v13 = *((_QWORD *)v10 - 1);
      v10 -= 8;
      *--v8 = v13;
    }
    *(_QWORD *)(a1 + 288) = v8;
    *(_QWORD *)(a1 + 296) = v4;
    *(_QWORD *)(a1 + 304) = v12;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v2 = 0;
    v4 = v2 + 1;
  }
  *(_QWORD *)(a1 + 296) = v4;
}

void sub_1D4B240D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1D4B22400((uint64_t **)(a1 + 184), 0);
  *(_QWORD *)(a1 + 240) = 0;
  sub_1D4B28B58((uint64_t *)(a1 + 216));
  v5 = *(_QWORD **)(a1 + 200);
  v4 = (_QWORD *)(a1 + 200);
  sub_1D4B28BAC((uint64_t)(v4 - 1), v5);
  *(v4 - 1) = v4;
  *v4 = 0;
  v4[1] = 0;
  v4[7] = v4[6];
  v4[12] = v4[11];
}

void sub_1D4B2415C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  if (*(_BYTE *)(a1 + 273))
  {
    if (*(_BYTE *)(a1 + 272))
      goto LABEL_3;
    if (!sub_1D4B23E48(a1))
    {
      sub_1D4B23EE0(a1);
      return;
    }
    if (*(_BYTE *)(a1 + 273))
    {
LABEL_3:
      sub_1D4B22B4C((_QWORD *)(a1 + 192), *(char **)(a1 + 184), *(_QWORD *)(a1 + 176));
      sub_1D4B22BDC((_QWORD *)(a1 + 192), a1 + 248);
      v2 = *(_QWORD *)(a1 + 248);
      if (*(_BYTE *)(a1 + 48))
      {
        v3 = *(_QWORD *)(a1 + 288);
        if (*(_QWORD *)(a1 + 296) == v3)
        {
          v5 = 0;
          v11 = *(_QWORD *)(a1 + 248);
        }
        else
        {
          v4 = 0;
          v5 = 0;
          v6 = 0;
          do
          {
            v7 = v5;
            v5 = *(_QWORD *)(v3 + 8 * v6);
            (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168), v2 + 8 * v7, v5 - v7, 0);
            v8 = *(_QWORD *)(a1 + 56);
            v9 = (uint64_t *)(a1 + 64);
            if (*(_DWORD *)(v8 + 32) > (int)v6)
              v9 = (uint64_t *)(*(_QWORD *)(v8 + 40) + (v4 >> 29) + 8);
            v10 = *v9;
            v12[0] = &off_1E9849218;
            v12[1] = v10;
            (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 168) + 32))(*(_QWORD *)(a1 + 168), v12);
            nullsub_1(v12);
            ++v6;
            v3 = *(_QWORD *)(a1 + 288);
            v4 += 0x100000000;
          }
          while (v6 < (*(_QWORD *)(a1 + 296) - v3) >> 3);
          v11 = *(_QWORD *)(a1 + 248);
        }
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168), v2 + 8 * v5, ((*(_QWORD *)(a1 + 256) - v11) >> 3) - v5, 0);
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 16))(*(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 248), (*(_QWORD *)(a1 + 256) - v2) >> 3, 0);
      }
    }
  }
}

void sub_1D4B24338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nullsub_1(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2434C(uint64_t a1, void *lpsrc, uint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v10;
  const void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  size_t v19;
  _BYTE *v20;
  size_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  size_t v25;
  void *v26;
  size_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t result;
  std::runtime_error *exception;
  void **v44;

  v9 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846450, 0);
  if (!v9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to StringVectorBatch");
LABEL_61:
    __cxa_throw(exception, (struct type_info *)&unk_1E9846268, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v10 = v9;
  v11 = *(const void **)(a1 + 24);
  if (!v11
    || (v12 = __dynamic_cast(v11, (const struct __class_type_info *)&unk_1E9846930, (const struct __class_type_info *)&unk_1E9846AF0, 8)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to StringColumnStatisticsImpl");
    goto LABEL_61;
  }
  v13 = (uint64_t)v12;
  (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *((_QWORD *)lpsrc + 5) + a3, a4, a5);
  v14 = v10[17] + 8 * a3;
  if (*((_BYTE *)v10 + 64))
    v15 = v10[5] + a3;
  else
    v15 = 0;
  if (a4)
  {
    v16 = 0;
    v17 = 0;
    v18 = v10[12] + 8 * a3;
    v44 = (void **)(a1 + 248);
    do
    {
      if (!v15 || *(_BYTE *)(v15 + v16))
      {
        v19 = *(_QWORD *)(v14 + 8 * v16);
        v20 = *(_BYTE **)(v18 + 8 * v16);
        v21 = 0;
        if (v19)
        {
          v22 = *(char **)(v18 + 8 * v16);
          v23 = *(_QWORD *)(v14 + 8 * v16);
          do
          {
            v24 = *v22++;
            if ((v24 & 0xC0) != 0x80)
              ++v21;
            --v23;
          }
          while (v23);
        }
        v25 = *(_QWORD *)(a1 + 312);
        if (v21 >= v25)
        {
          if (v19 > v25)
          {
            v27 = 0;
            v28 = 0;
            while (1)
            {
              if ((v20[v27] & 0xC0) != 0x80)
                ++v28;
              if (v28 > v25)
                break;
              if (v19 == ++v27)
              {
                v27 = *(_QWORD *)(v14 + 8 * v16);
                break;
              }
            }
            if (v27 < v19)
              v19 = v27;
          }
          *(_QWORD *)(v14 + 8 * v16) = v19;
        }
        else
        {
          v26 = *(void **)(a1 + 336);
          *(_QWORD *)(v14 + 8 * v16) = v19 - v21 + v25;
          memcpy(v26, v20, v19);
          memset((void *)(*(_QWORD *)(a1 + 336) + v19), 32, *(_QWORD *)(v14 + 8 * v16) - v19);
          v20 = v26;
        }
        if (*(_BYTE *)(a1 + 273))
        {
          v29 = sub_1D4B22938(a1 + 192, v20, *(_QWORD *)(v14 + 8 * v16));
          v30 = v29;
          v32 = *(uint64_t **)(a1 + 256);
          v31 = *(_QWORD *)(a1 + 264);
          if ((unint64_t)v32 >= v31)
          {
            v34 = (uint64_t *)*v44;
            v35 = ((char *)v32 - (_BYTE *)*v44) >> 3;
            v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 61)
              sub_1D4B182AC();
            v37 = v31 - (_QWORD)v34;
            if (v37 >> 2 > v36)
              v36 = v37 >> 2;
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
              v38 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v38 = v36;
            if (v38)
            {
              v39 = (char *)sub_1D4B182C0(a1 + 264, v38);
              v34 = *(uint64_t **)(a1 + 248);
              v32 = *(uint64_t **)(a1 + 256);
            }
            else
            {
              v39 = 0;
            }
            v40 = (uint64_t *)&v39[8 * v35];
            *v40 = v30;
            v33 = v40 + 1;
            while (v32 != v34)
            {
              v41 = *--v32;
              *--v40 = v41;
            }
            *(_QWORD *)(a1 + 248) = v40;
            *(_QWORD *)(a1 + 256) = v33;
            *(_QWORD *)(a1 + 264) = &v39[8 * v38];
            if (v34)
              operator delete(v34);
          }
          else
          {
            *v32 = v29;
            v33 = v32 + 1;
          }
          *(_QWORD *)(a1 + 256) = v33;
        }
        else
        {
          sub_1D4B02A30(*(char **)(a1 + 160), (uint64_t)v20, *(_QWORD *)(v14 + 8 * v16));
        }
        if (*(_BYTE *)(a1 + 80))
          sub_1D4B17B64(*(_QWORD *)(a1 + 88), *(uint64_t **)(v18 + 8 * v16), *(_QWORD *)(v14 + 8 * v16));
        sub_1D4B23634(v13, v20, *(_QWORD *)(v14 + 8 * v16));
        ++v17;
      }
      ++v16;
    }
    while (v16 != a4);
  }
  else
  {
    v17 = 0;
  }
  if (!*(_BYTE *)(a1 + 273))
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 152) + 16))(*(_QWORD *)(a1 + 152), v14, a4, v15);
  result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v13 + 88))(v13, v17);
  if (v17 < a4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 104))(v13, 1);
  return result;
}

void sub_1D4B24708(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B24720(uint64_t a1, void *lpsrc, uint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  size_t v20;
  _BYTE *v21;
  size_t v22;
  size_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t result;
  std::runtime_error *exception;
  void **v40;

  v10 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846450, 0);
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to StringVectorBatch");
LABEL_52:
    __cxa_throw(exception, (struct type_info *)&unk_1E9846268, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v11 = v10;
  v12 = *(const void **)(a1 + 24);
  if (!v12
    || (v13 = __dynamic_cast(v12, (const struct __class_type_info *)&unk_1E9846930, (const struct __class_type_info *)&unk_1E9846AF0, 8)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to StringColumnStatisticsImpl");
    goto LABEL_52;
  }
  v14 = (uint64_t)v13;
  (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *((_QWORD *)lpsrc + 5) + a3, a4, a5);
  v15 = v11[17] + 8 * a3;
  if (*((_BYTE *)v11 + 64))
  {
    v16 = v11[5] + a3;
    if (a4)
      goto LABEL_6;
LABEL_43:
    v18 = 0;
    goto LABEL_44;
  }
  v16 = 0;
  if (!a4)
    goto LABEL_43;
LABEL_6:
  v17 = 0;
  v18 = 0;
  v19 = v11[12] + 8 * a3;
  v40 = (void **)(a1 + 248);
  do
  {
    if (!v16 || *(_BYTE *)(v16 + v17))
    {
      v20 = *(_QWORD *)(a1 + 312);
      v21 = *(_BYTE **)(v19 + 8 * v17);
      v22 = *(_QWORD *)(v15 + 8 * v17);
      if (v22 > v20)
      {
        v23 = 0;
        v24 = 0;
        while (1)
        {
          if ((v21[v23] & 0xC0) != 0x80)
            ++v24;
          if (v24 > v20)
            break;
          if (v22 == ++v23)
          {
            v23 = *(_QWORD *)(v15 + 8 * v17);
            break;
          }
        }
        if (v23 < v22)
          v22 = v23;
      }
      *(_QWORD *)(v15 + 8 * v17) = v22;
      if (*(_BYTE *)(a1 + 273))
      {
        v25 = sub_1D4B22938(a1 + 192, v21, v22);
        v26 = v25;
        v28 = *(uint64_t **)(a1 + 256);
        v27 = *(_QWORD *)(a1 + 264);
        if ((unint64_t)v28 >= v27)
        {
          v30 = (uint64_t *)*v40;
          v31 = ((char *)v28 - (_BYTE *)*v40) >> 3;
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 61)
            sub_1D4B182AC();
          v33 = v27 - (_QWORD)v30;
          if (v33 >> 2 > v32)
            v32 = v33 >> 2;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
            v34 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v34 = v32;
          if (v34)
          {
            v35 = (char *)sub_1D4B182C0(a1 + 264, v34);
            v30 = *(uint64_t **)(a1 + 248);
            v28 = *(uint64_t **)(a1 + 256);
          }
          else
          {
            v35 = 0;
          }
          v36 = (uint64_t *)&v35[8 * v31];
          *v36 = v26;
          v29 = v36 + 1;
          while (v28 != v30)
          {
            v37 = *--v28;
            *--v36 = v37;
          }
          *(_QWORD *)(a1 + 248) = v36;
          *(_QWORD *)(a1 + 256) = v29;
          *(_QWORD *)(a1 + 264) = &v35[8 * v34];
          if (v30)
            operator delete(v30);
        }
        else
        {
          *v28 = v25;
          v29 = v28 + 1;
        }
        *(_QWORD *)(a1 + 256) = v29;
      }
      else
      {
        sub_1D4B02A30(*(char **)(a1 + 160), (uint64_t)v21, v22);
      }
      if (*(_BYTE *)(a1 + 80))
        sub_1D4B17B64(*(_QWORD *)(a1 + 88), *(uint64_t **)(v19 + 8 * v17), *(_QWORD *)(v15 + 8 * v17));
      sub_1D4B23634(v14, *(char **)(v19 + 8 * v17), *(_QWORD *)(v15 + 8 * v17));
      ++v18;
    }
    ++v17;
  }
  while (v17 != a4);
LABEL_44:
  if (!*(_BYTE *)(a1 + 273))
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 152) + 16))(*(_QWORD *)(a1 + 152), v15, a4, v16);
  result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v14 + 88))(v14, v18);
  if (v18 < a4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 104))(v14, 1);
  return result;
}

void sub_1D4B24A50(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B24A68(uint64_t a1, void *lpsrc, uint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  const void *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t *v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t *v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;
  std::runtime_error *exception;
  uint64_t v25;

  v10 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846450, 0);
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to StringVectorBatch");
LABEL_18:
    __cxa_throw(exception, (struct type_info *)&unk_1E9846268, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v11 = v10;
  v12 = *(const void **)(a1 + 24);
  if (!v12
    || (v13 = __dynamic_cast(v12, (const struct __class_type_info *)&unk_1E9846930, (const struct __class_type_info *)&unk_1E9846A80, 8)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to BinaryColumnStatisticsImpl");
    goto LABEL_18;
  }
  v14 = v13;
  (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *((_QWORD *)lpsrc + 5) + a3, a4, a5);
  v15 = (unint64_t *)(v11[17] + 8 * a3);
  if (*((_BYTE *)v11 + 64))
    v16 = (_BYTE *)(v11[5] + a3);
  else
    v16 = 0;
  v25 = v11[17] + 8 * a3;
  v17 = 0;
  if (a4)
  {
    v18 = (uint64_t *)(v11[12] + 8 * a3);
    v19 = v16;
    v20 = a4;
    do
    {
      v22 = *v15++;
      v21 = v22;
      if (!v16 || *v19)
      {
        sub_1D4B02A30(*(char **)(a1 + 160), *v18, v21);
        v14[3] += v21;
        ++v17;
      }
      ++v18;
      ++v19;
      --v20;
    }
    while (v20);
  }
  (*(void (**)(_QWORD, uint64_t, unint64_t, _BYTE *))(**(_QWORD **)(a1 + 152) + 16))(*(_QWORD *)(a1 + 152), v25, a4, v16);
  result = (*(uint64_t (**)(_QWORD *, unint64_t))(*v14 + 64))(v14, v17);
  if (v17 < a4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*v14 + 72))(v14, 1);
  return result;
}

void sub_1D4B24C58(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B24C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  int v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *__p[2];
  char v32;

  v7 = (_QWORD *)sub_1D4B1F794(a1, a2, a3, a4);
  *v7 = off_1E9848C10;
  v7[16] = 0;
  v8 = v7 + 16;
  v7[17] = 0;
  *(_DWORD *)(a1 + 144) = sub_1D4B4ACF4(a4);
  sub_1D4BCA448(__p, "GMT");
  v9 = sub_1D4B43380((uint64_t)__p);
  if (v32 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 152) = v9;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(__p, a3, 1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(&v30, a3, 5);
  v10 = __p[0];
  __p[0] = 0;
  v28 = (uint64_t)v10;
  v11 = *(_DWORD *)(a1 + 144);
  v12 = sub_1D4B4AE5C(a4);
  sub_1D4B3ACC8(&v28, 1, v11, v12, &v29);
  v13 = v29;
  v29 = 0;
  v14 = *v8;
  *v8 = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v29;
    v29 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  v16 = v28;
  v28 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v30;
  v30 = 0;
  v27 = v17;
  v18 = *(_DWORD *)(a1 + 144);
  v19 = sub_1D4B4AE5C(a4);
  sub_1D4B3ACC8(&v27, 0, v18, v19, &v29);
  v20 = v29;
  v29 = 0;
  v21 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v20;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v22 = v29;
    v29 = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  v23 = v27;
  v27 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  if (*(_BYTE *)(a1 + 48))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v24 = v30;
  v30 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = __p[0];
  __p[0] = 0;
  if (v25)
    (*(void (**)(void *))(*(_QWORD *)v25 + 8))(v25);
  return a1;
}

void sub_1D4B24E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v22;
  uint64_t v23;

  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (__p)
    (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
  v22 = v19[17];
  v19[17] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *v20;
  *v20 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  sub_1D4B1FD24(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B24F68(uint64_t a1, void *lpsrc, uint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v10;
  const void *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  std::runtime_error *exception;

  v9 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E98466D8, 0);
  if (!v9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to TimestampVectorBatch");
LABEL_44:
    __cxa_throw(exception, (struct type_info *)&unk_1E9846268, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v10 = v9;
  v11 = *(const void **)(a1 + 24);
  if (!v11
    || (v12 = (char *)__dynamic_cast(v11, (const struct __class_type_info *)&unk_1E9846930, (const struct __class_type_info *)&unk_1E9846BE8, 8)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to TimestampColumnStatisticsImpl");
    goto LABEL_44;
  }
  v13 = v12;
  (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *((_QWORD *)lpsrc + 5) + a3, a4, a5);
  if (*((_BYTE *)v10 + 64))
    v14 = v10[5] + a3;
  else
    v14 = 0;
  v15 = v10[12] + 8 * a3;
  v16 = v10[17] + 8 * a3;
  if (a4)
  {
    v17 = 0;
    v18 = 0;
    while (v14 && !*(_BYTE *)(v14 + v17))
    {
LABEL_36:
      if (++v17 == a4)
        goto LABEL_39;
    }
    v19 = *(_QWORD *)(v16 + 8 * v17) / 1000000;
    v20 = v19 + 1000 * *(_QWORD *)(v15 + 8 * v17);
    if (*(_BYTE *)(a1 + 80))
      sub_1D4B17C04(*(_QWORD *)(a1 + 88), v19 + 1000 * *(_QWORD *)(v15 + 8 * v17));
    if (v13[17])
    {
      v21 = (uint64_t *)(v13 + 40);
      if (*((_QWORD *)v13 + 5) <= v20)
      {
        v21 = (uint64_t *)(v13 + 48);
        if (*((_QWORD *)v13 + 6) >= v20)
          goto LABEL_19;
      }
    }
    else
    {
      *(_WORD *)(v13 + 17) = 257;
      *((_QWORD *)v13 + 6) = v20;
      v21 = (uint64_t *)(v13 + 40);
    }
    *v21 = v20;
LABEL_19:
    v22 = *(_QWORD *)(v15 + 8 * v17);
    if (v22 < 0 && *(_QWORD *)(v16 + 8 * v17))
      *(_QWORD *)(v15 + 8 * v17) = v22 + 1;
    *(_QWORD *)(v15 + 8 * v17) -= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 152) + 24))(*(_QWORD *)(a1 + 152));
    v23 = *(_QWORD *)(v16 + 8 * v17);
    if (v23)
    {
      v24 = v23 / 100;
      if (v23 % 100)
      {
        v25 = 8 * v23;
      }
      else
      {
        if (__ROR8__(0x1999999999999998 - 0x3333333333333333 * v24, 1) <= 0x1999999999999998uLL)
        {
          v27 = 1;
          do
          {
            v24 /= 10;
            v26 = v27 + 1;
          }
          while (__ROR8__(0x1999999999999998 - 0x3333333333333333 * v24, 1) <= 0x1999999999999998uLL && v27++ < 6);
        }
        else
        {
          v26 = 1;
        }
        v25 = v26 | (8 * v24);
      }
    }
    else
    {
      v25 = 0;
    }
    ++v18;
    *(_QWORD *)(v16 + 8 * v17) = v25;
    goto LABEL_36;
  }
  v18 = 0;
LABEL_39:
  (*(void (**)(char *, unint64_t))(*(_QWORD *)v13 + 112))(v13, v18);
  if (v18 < a4)
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v13 + 120))(v13, 1);
  (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128), v15, a4, v14);
  return (*(uint64_t (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 136) + 16))(*(_QWORD *)(a1 + 136), v16, a4, v14);
}

void sub_1D4B252B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B252CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD v18[2];
  int v19;
  int v20;
  int v21;
  uint64_t v22;

  sub_1D4B1FE80(a1, a2);
  sub_1D4B0A78C(v18);
  v4 = *(_QWORD *)(a1 + 16);
  v20 = 1;
  v21 = v4;
  v19 |= 3u;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 24))(*(_QWORD *)(a1 + 128));
  v19 |= 4u;
  v22 = v5;
  v6 = a2[1];
  if (v6 >= a2[2])
  {
    v7 = sub_1D4B292C8(a2, (uint64_t)v18);
  }
  else
  {
    sub_1D4B0A808(a2[1], (uint64_t)v18);
    v7 = v6 + 40;
    a2[1] = v6 + 40;
  }
  a2[1] = v7;
  sub_1D4B0A78C(v13);
  v8 = *(_QWORD *)(a1 + 16);
  v15 = 5;
  v16 = v8;
  v14 |= 3u;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  v14 |= 4u;
  v17 = v9;
  v10 = a2[1];
  if (v10 >= a2[2])
  {
    v11 = sub_1D4B292C8(a2, (uint64_t)v13);
  }
  else
  {
    sub_1D4B0A808(a2[1], (uint64_t)v13);
    v11 = v10 + 40;
    a2[1] = v10 + 40;
  }
  a2[1] = v11;
  sub_1D4B0A80C(v13);
  return sub_1D4B0A80C(v18);
}

void sub_1D4B253F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v14 + 8) = v15;
  sub_1D4B0A80C(&a9);
  sub_1D4B0A80C(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B25438(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 128) + 8) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8))
     + v2;
  return v3
       + (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 136) + 8) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8));
}

_QWORD *sub_1D4B25498(uint64_t a1, uint64_t *a2)
{
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  int v11;
  int v12;
  int v13;

  sub_1D4B0AF3C((uint64_t)v9);
  v4 = sub_1D4B1F728(*(unsigned int *)(a1 + 144));
  v5 = v10;
  v11 = v4;
  v12 = 0;
  v10 |= 3u;
  if (*(_BYTE *)(a1 + 80))
  {
    v10 = v5 | 7;
    v13 = 1;
  }
  v6 = a2[1];
  if (v6 >= a2[2])
  {
    v7 = sub_1D4B29528(a2, (uint64_t)v9);
  }
  else
  {
    sub_1D4B0AFC0(a2[1], v9);
    v7 = v6 + 40;
    a2[1] = v6 + 40;
  }
  a2[1] = v7;
  return sub_1D4B0AFC4(v9);
}

void sub_1D4B2553C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  sub_1D4B0AFC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2555C(uint64_t a1)
{
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 72));
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 72));
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 136) + 32))(*(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 72));
}

uint64_t sub_1D4B255B0(uint64_t a1, void *lpsrc, uint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  const void *v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  _BYTE *v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  std::runtime_error *exception;

  v10 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846298, 0);
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to LongVectorBatch");
LABEL_25:
    __cxa_throw(exception, (struct type_info *)&unk_1E9846268, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v11 = v10;
  v12 = *(const void **)(a1 + 24);
  if (!v12
    || (v13 = (char *)__dynamic_cast(v12, (const struct __class_type_info *)&unk_1E9846930, (const struct __class_type_info *)&unk_1E98469A0, 8)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to DateColumnStatisticsImpl");
    goto LABEL_25;
  }
  v14 = v13;
  (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *((_QWORD *)lpsrc + 5) + a3, a4, a5);
  v15 = (uint64_t *)(v11[12] + 8 * a3);
  if (*((_BYTE *)v11 + 64))
    v16 = (_BYTE *)(v11[5] + a3);
  else
    v16 = 0;
  (*(void (**)(_QWORD, uint64_t *, unint64_t, _BYTE *))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128), v15, a4, v16);
  v17 = 0;
  if (a4)
  {
    v18 = v16;
    v19 = a4;
    while (v16 && !*v18)
    {
LABEL_19:
      ++v15;
      ++v18;
      if (!--v19)
        goto LABEL_20;
    }
    v20 = *v15;
    if (v14[17])
    {
      if (*((_DWORD *)v14 + 10) <= (int)v20)
      {
        if (*((_DWORD *)v14 + 11) < (int)v20)
          *((_DWORD *)v14 + 11) = v20;
        goto LABEL_17;
      }
    }
    else
    {
      *(_WORD *)(v14 + 17) = 257;
      *((_DWORD *)v14 + 11) = v20;
    }
    *((_DWORD *)v14 + 10) = v20;
LABEL_17:
    ++v17;
    if (*(_BYTE *)(a1 + 80))
      sub_1D4B17C04(*(_QWORD *)(a1 + 88), v20);
    goto LABEL_19;
  }
LABEL_20:
  result = (*(uint64_t (**)(char *, unint64_t))(*(_QWORD *)v14 + 72))(v14, v17);
  if (v17 < a4)
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v14 + 88))(v14, 1);
  return result;
}

void sub_1D4B257B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B257CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)sub_1D4B1F794(a1, a2, a3, a4) = off_1E9848A88;
  *(_DWORD *)(a1 + 128) = sub_1D4B4ACF4(a4);
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = v8;
  *(_QWORD *)(a1 + 160) = 0;
  v9 = (uint64_t *)operator new(0x18uLL);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(&v24, a3, 1);
  v10 = v24;
  v24 = 0;
  v9[1] = 0;
  v9[2] = 0;
  *v9 = v10;
  sub_1D4B22400((uint64_t **)(a1 + 152), v9);
  v11 = v24;
  v24 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(&v23, a3, 5);
  v12 = v23;
  v23 = 0;
  v21 = v12;
  v13 = *(_DWORD *)(a1 + 128);
  v14 = sub_1D4B4AE5C(a4);
  sub_1D4B3ACC8(&v21, 1, v13, v14, &v22);
  v15 = v22;
  v22 = 0;
  v16 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v22;
    v22 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v21;
  v21 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (*(_BYTE *)(a1 + 48))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v19 = v23;
  v23 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  return a1;
}

void sub_1D4B25988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t **v12;
  uint64_t v14;

  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  v14 = v11[20];
  v11[20] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  sub_1D4B22400(v12, 0);
  sub_1D4B1FD24(v11);
  _Unwind_Resume(a1);
}

void sub_1D4B25A24(uint64_t a1, void *lpsrc, uint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  BOOL v21;
  uint64_t v22;
  std::string *v23;
  unsigned int v24;
  uint64_t v25;
  std::runtime_error *exception;
  __n128 v27;
  __n128 v28;
  std::string __p;

  v10 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E98466A8, 0);
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to Decimal64VectorBatch");
LABEL_32:
    __cxa_throw(exception, (struct type_info *)&unk_1E9846268, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v11 = v10;
  v12 = *(const void **)(a1 + 24);
  if (!v12
    || (v13 = __dynamic_cast(v12, (const struct __class_type_info *)&unk_1E9846930, (const struct __class_type_info *)&unk_1E9846B60, 8)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to DecimalColumnStatisticsImpl");
    goto LABEL_32;
  }
  v14 = (uint64_t)v13;
  (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *((_QWORD *)lpsrc + 5) + a3, a4, a5);
  if (*((_BYTE *)v11 + 64))
  {
    v15 = v11[5] + a3;
    if (a4)
      goto LABEL_6;
LABEL_24:
    v17 = 0;
    goto LABEL_25;
  }
  v15 = 0;
  if (!a4)
    goto LABEL_24;
LABEL_6:
  v16 = 0;
  v17 = 0;
  v18 = v11[13] + 8 * a3;
  do
  {
    if (!v15 || *(_BYTE *)(v15 + v16))
    {
      v19 = (2 * *(_QWORD *)(v18 + 8 * v16)) ^ (*(uint64_t *)(v18 + 8 * v16) >> 63);
      v20 = (_BYTE *)(a1 + 168);
      if (v19 >= 0x80)
      {
        do
        {
          *v20++ = v19 | 0x80;
          v21 = v19 >= 0x4000;
          v19 >>= 7;
        }
        while (v21);
      }
      *v20 = v19;
      sub_1D4B02A30(*(char **)(a1 + 152), a1 + 168, (unint64_t)&v20[-a1 - 167]);
      if (*(_BYTE *)(a1 + 80))
      {
        v22 = *(_QWORD *)(v18 + 8 * v16);
        v27.n128_u64[0] = v22 >> 63;
        v27.n128_u64[1] = v22;
        sub_1D4B4A710(&v28, &v27, *(_DWORD *)(a1 + 144));
        sub_1D4B4A89C((uint64_t)&v28, &__p);
        v23 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        v24 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : LODWORD(__p.__r_.__value_.__r.__words[1]);
        sub_1D4B17B64(*(_QWORD *)(a1 + 88), (uint64_t *)v23, v24);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v17;
      v25 = *(_QWORD *)(v18 + 8 * v16);
      v28.n128_u64[0] = v25 >> 63;
      v28.n128_u64[1] = v25;
      sub_1D4B4A710((__n128 *)&__p, &v28, *(_DWORD *)(a1 + 144));
      sub_1D4B25D10(v14, (__n128 *)&__p);
    }
    ++v16;
  }
  while (v16 != a4);
LABEL_25:
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v14 + 88))(v14, v17);
  if (v17 < a4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 104))(v14, 1);
  v28.n128_u64[0] = *(_QWORD *)(a1 + 144);
  sub_1D4B29E00(&__p, a4, &v28);
  (*(void (**)(_QWORD, std::string::size_type, unint64_t, uint64_t))(**(_QWORD **)(a1 + 160) + 16))(*(_QWORD *)(a1 + 160), __p.__r_.__value_.__r.__words[0], a4, v15);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1D4B25CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

void sub_1D4B25D10(uint64_t a1, __n128 *a2)
{
  __n128 v4;
  unint64_t v5;
  __n128 v6;
  unint64_t v7;

  v6 = *a2;
  v7 = a2[1].n128_u64[0];
  sub_1D4B28DB0(a1 + 16, &v6);
  if (*(_BYTE *)(a1 + 19))
  {
    v4 = *a2;
    v5 = a2[1].n128_u64[0];
    sub_1D4B28E88(a1, (uint64_t *)&v4);
  }
}

_QWORD *sub_1D4B25D78(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD v18[2];
  int v19;
  int v20;
  int v21;
  uint64_t v22;

  sub_1D4B1FE80(a1, a2);
  sub_1D4B0A78C(v18);
  v4 = *(_QWORD *)(a1 + 16);
  v20 = 1;
  v21 = v4;
  v19 |= 3u;
  v5 = sub_1D4B02B44(*(_QWORD **)(a1 + 152));
  v19 |= 4u;
  v22 = v5;
  v6 = a2[1];
  if (v6 >= a2[2])
  {
    v7 = sub_1D4B292C8(a2, (uint64_t)v18);
  }
  else
  {
    sub_1D4B0A808(a2[1], (uint64_t)v18);
    v7 = v6 + 40;
    a2[1] = v6 + 40;
  }
  a2[1] = v7;
  sub_1D4B0A78C(v13);
  v8 = *(_QWORD *)(a1 + 16);
  v15 = 5;
  v16 = v8;
  v14 |= 3u;
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 24))(*(_QWORD *)(a1 + 160));
  v14 |= 4u;
  v17 = v9;
  v10 = a2[1];
  if (v10 >= a2[2])
  {
    v11 = sub_1D4B292C8(a2, (uint64_t)v13);
  }
  else
  {
    sub_1D4B0A808(a2[1], (uint64_t)v13);
    v11 = v10 + 40;
    a2[1] = v10 + 40;
  }
  a2[1] = v11;
  sub_1D4B0A80C(v13);
  return sub_1D4B0A80C(v18);
}

void sub_1D4B25E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v14 + 8) = v15;
  sub_1D4B0A80C(&a9);
  sub_1D4B0A80C(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B25EDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  v3 = sub_1D4B02B34(*(_QWORD **)(a1 + 152)) + v2;
  return v3
       + (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 160) + 8) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8));
}

_QWORD *sub_1D4B25F30(uint64_t a1, uint64_t *a2)
{
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  int v11;
  int v12;
  int v13;

  sub_1D4B0AF3C((uint64_t)v9);
  v4 = sub_1D4B1F728(*(unsigned int *)(a1 + 128));
  v5 = v10;
  v11 = v4;
  v12 = 0;
  v10 |= 3u;
  if (*(_BYTE *)(a1 + 80))
  {
    v10 = v5 | 7;
    v13 = 1;
  }
  v6 = a2[1];
  if (v6 >= a2[2])
  {
    v7 = sub_1D4B29528(a2, (uint64_t)v9);
  }
  else
  {
    sub_1D4B0AFC0(a2[1], v9);
    v7 = v6 + 40;
    a2[1] = v6 + 40;
  }
  a2[1] = v7;
  return sub_1D4B0AFC4(v9);
}

void sub_1D4B25FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  sub_1D4B0AFC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B25FF4(uint64_t a1)
{
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 72));
  sub_1D4B02B88(*(int **)(a1 + 152), *(_QWORD *)(a1 + 72));
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 160) + 32))(*(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 72));
}

unint64_t sub_1D4B26040(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v8;

  v1 = *a1;
  v2 = a1[1];
  *((_QWORD *)&v4 + 1) = *a1;
  *(_QWORD *)&v4 = v2;
  v3 = v4 >> 63;
  v5 = -*a1;
  if (v2)
    v5 = ~v1;
  *((_QWORD *)&v7 + 1) = v5;
  *(_QWORD *)&v7 = -(uint64_t)v2;
  v6 = v7 >> 63;
  if (v1 < 0)
    v3 = (__PAIR128__(v6, -2 * v2) - 1) >> 64;
  v8 = v2 >> 63;
  if (v1)
    return v3;
  else
    return v8;
}

void sub_1D4B26098(uint64_t a1, void *lpsrc, uint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  __int128 v23;
  std::string *v24;
  unsigned int v25;
  std::runtime_error *exception;
  __n128 v27;
  std::string __p;

  v10 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846738, 0);
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to Decimal128VectorBatch");
LABEL_33:
    __cxa_throw(exception, (struct type_info *)&unk_1E9846268, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v11 = v10;
  v12 = *(const void **)(a1 + 24);
  if (!v12
    || (v13 = __dynamic_cast(v12, (const struct __class_type_info *)&unk_1E9846930, (const struct __class_type_info *)&unk_1E9846B60, 8)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to DecimalColumnStatisticsImpl");
    goto LABEL_33;
  }
  v14 = (uint64_t)v13;
  (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *((_QWORD *)lpsrc + 5) + a3, a4, a5);
  if (*((_BYTE *)v11 + 64))
  {
    v15 = v11[5] + a3;
    if (a4)
    {
LABEL_6:
      v16 = 0;
      v17 = 0;
      v18 = v11[13] + 16 * a3;
      while (v15 && !*(_BYTE *)(v15 + v16))
      {
LABEL_22:
        if (++v16 == a4)
          goto LABEL_26;
      }
      v19 = sub_1D4B26040((uint64_t *)(v18 + 16 * v16));
      v21 = (_BYTE *)(a1 + 178);
      if (!v19)
        goto LABEL_11;
      while (1)
      {
        do
        {
          v22 = v19;
          *v21++ = v20 | 0x80;
          *((_QWORD *)&v23 + 1) = v19;
          *(_QWORD *)&v23 = v20;
          v20 = v23 >> 7;
          v19 >>= 7;
        }
        while (v22 > 0x7F);
LABEL_11:
        if (v20 < 0x80)
        {
          *v21 = v20;
          sub_1D4B02A30(*(char **)(a1 + 152), a1 + 178, (unint64_t)&v21[-a1 - 177]);
          if (*(_BYTE *)(a1 + 80))
          {
            sub_1D4B4A710(&v27, (__n128 *)(v18 + 16 * v16), *(_DWORD *)(a1 + 144));
            sub_1D4B4A89C((uint64_t)&v27, &__p);
            v24 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__p
                : (std::string *)__p.__r_.__value_.__r.__words[0];
            v25 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? HIBYTE(__p.__r_.__value_.__r.__words[2])
                : LODWORD(__p.__r_.__value_.__r.__words[1]);
            sub_1D4B17B64(*(_QWORD *)(a1 + 88), (uint64_t *)v24, v25);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          ++v17;
          sub_1D4B4A710((__n128 *)&__p, (__n128 *)(v18 + 16 * v16), *(_DWORD *)(a1 + 144));
          sub_1D4B25D10(v14, (__n128 *)&__p);
          goto LABEL_22;
        }
      }
    }
  }
  else
  {
    v15 = 0;
    if (a4)
      goto LABEL_6;
  }
  v17 = 0;
LABEL_26:
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v14 + 88))(v14, v17);
  if (v17 < a4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 104))(v14, 1);
  v27.n128_u64[0] = *(_QWORD *)(a1 + 144);
  sub_1D4B29E00(&__p, a4, &v27);
  (*(void (**)(_QWORD, std::string::size_type, unint64_t, uint64_t))(**(_QWORD **)(a1 + 160) + 16))(*(_QWORD *)(a1 + 160), __p.__r_.__value_.__r.__words[0], a4, v15);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1D4B26330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B26374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  int v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = (_QWORD *)sub_1D4B1F794(a1, a2, a3, a4);
  *v8 = off_1E9847E30;
  v8[16] = 0;
  *(_DWORD *)(a1 + 136) = sub_1D4B4ACF4(a4);
  *(_QWORD *)(a1 + 144) = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(&v22, a3, 2);
  v9 = v22;
  v22 = 0;
  v20 = v9;
  v10 = *(_DWORD *)(a1 + 136);
  v11 = sub_1D4B4AE5C(a4);
  sub_1D4B3ACC8(&v20, 0, v10, v11, &v21);
  v12 = v21;
  v21 = 0;
  v13 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = v21;
    v21 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v15 = v20;
  v20 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) == 1)
  {
    v16 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0);
    sub_1D4B206F8(&v21, v16, a3, a4);
    v17 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v21;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  if (*(_BYTE *)(a1 + 48))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v18 = v22;
  v22 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  return a1;
}

void sub_1D4B26504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  v14 = v12[18];
  v12[18] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v12[16];
  v12[16] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  sub_1D4B1FD24(v12);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B26594(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1E9847E30;
  v2 = a1[18];
  a1[18] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[16];
  a1[16] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_1D4B1FD24(a1);
}

void sub_1D4B265F4(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B26594(a1);
  operator delete(v1);
}

uint64_t sub_1D4B26608(uint64_t a1, void *lpsrc, uint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  std::runtime_error *exception;

  v10 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E9846280, 0);
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to ListVectorBatch");
    __cxa_throw(exception, (struct type_info *)&unk_1E9846268, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v11 = v10;
  (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *((_QWORD *)lpsrc + 5) + a3, a4, a5);
  v12 = v11[12];
  v13 = (uint64_t *)(v12 + 8 * a3);
  if (*((_BYTE *)v11 + 64))
    v14 = (unsigned __int8 *)(v11[5] + a3);
  else
    v14 = 0;
  v15 = *v13;
  v16 = v13[a4];
  if (a4)
  {
    v17 = (uint64_t *)(v12 + 8 * a3 + 8);
    v18 = a4;
    v19 = *v13;
    do
    {
      v20 = *v17;
      *(v17 - 1) = *v17 - v19;
      ++v17;
      v19 = v20;
      --v18;
    }
    while (v18);
  }
  v21 = *(_QWORD *)(a1 + 144);
  if (v21)
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v21 + 16))(v21, v11[15], v15, v16 - v15, 0);
  result = (*(uint64_t (**)(_QWORD, uint64_t *, unint64_t, unsigned __int8 *))(**(_QWORD **)(a1 + 128)
                                                                                             + 16))(*(_QWORD *)(a1 + 128), v13, a4, v14);
  if (*(_BYTE *)(a1 + 48))
  {
    if (v14)
    {
      v23 = 0;
      if (a4)
      {
        v24 = a4;
        do
        {
          if (*v14++)
          {
            ++v23;
            if (*(_BYTE *)(a1 + 80))
              sub_1D4B17C04(*(_QWORD *)(a1 + 88), *v13);
          }
          ++v13;
          --v24;
        }
        while (v24);
      }
      result = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), v23);
      if (v23 < a4)
        return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), 1);
    }
    else
    {
      return (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a4);
    }
  }
  return result;
}

void sub_1D4B267F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B26808(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;
  int v12;
  int v13;
  uint64_t v14;

  sub_1D4B1FE80(a1, a2);
  sub_1D4B0A78C(v10);
  v4 = *(_QWORD *)(a1 + 16);
  v12 = 2;
  v13 = v4;
  v11 |= 3u;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 24))(*(_QWORD *)(a1 + 128));
  v11 |= 4u;
  v14 = v5;
  v6 = a2[1];
  if (v6 >= a2[2])
  {
    v7 = sub_1D4B292C8(a2, (uint64_t)v10);
  }
  else
  {
    sub_1D4B0A808(a2[1], (uint64_t)v10);
    v7 = v6 + 40;
    a2[1] = v6 + 40;
  }
  a2[1] = v7;
  v8 = *(_QWORD *)(a1 + 144);
  if (v8)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 24))(v8, a2);
  return sub_1D4B0A80C(v10);
}

void sub_1D4B268D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  sub_1D4B0A80C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B268F0(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  sub_1D4B20290(a1, a2);
  result = *(_QWORD *)(a1 + 144);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)result + 96))(result, a2);
  return result;
}

uint64_t sub_1D4B26934(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  if (*(_QWORD *)(a1 + 144))
  {
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 128) + 8) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8));
    v2 += v3 + (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 32))(*(_QWORD *)(a1 + 144));
  }
  return v2;
}

_QWORD *sub_1D4B269A8(uint64_t a1, uint64_t *a2)
{
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;
  int v12;
  int v13;
  int v14;

  sub_1D4B0AF3C((uint64_t)v10);
  v4 = sub_1D4B1F728(*(unsigned int *)(a1 + 136));
  v5 = v11;
  v12 = v4;
  v13 = 0;
  v11 |= 3u;
  if (*(_BYTE *)(a1 + 80))
  {
    v11 = v5 | 7;
    v14 = 1;
  }
  v6 = a2[1];
  if (v6 >= a2[2])
  {
    v7 = sub_1D4B29528(a2, (uint64_t)v10);
  }
  else
  {
    sub_1D4B0AFC0(a2[1], v10);
    v7 = v6 + 40;
    a2[1] = v6 + 40;
  }
  a2[1] = v7;
  v8 = *(_QWORD *)(a1 + 144);
  if (v8)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 40))(v8, a2);
  return sub_1D4B0AFC4(v10);
}

void sub_1D4B26A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  sub_1D4B0AFC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B26A84(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  sub_1D4B1FF5C(a1, a2, *(_QWORD *)(a1 + 32));
  result = *(_QWORD *)(a1 + 144);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)result + 48))(result, a2);
  return result;
}

uint64_t sub_1D4B26ACC(uint64_t a1)
{
  uint64_t result;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 48))(*(_QWORD *)(a1 + 32));
  result = *(_QWORD *)(a1 + 144);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  return result;
}

uint64_t sub_1D4B26B28(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  sub_1D4B1FF5C(a1, a2, *(_QWORD *)(a1 + 40));
  result = *(_QWORD *)(a1 + 144);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)result + 56))(result, a2);
  return result;
}

uint64_t sub_1D4B26B70(uint64_t a1)
{
  uint64_t result;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
  result = *(_QWORD *)(a1 + 144);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

uint64_t sub_1D4B26BCC(uint64_t a1)
{
  uint64_t result;

  sub_1D4B20084(a1);
  result = *(_QWORD *)(a1 + 144);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  return result;
}

uint64_t sub_1D4B26C08(uint64_t a1)
{
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 72));
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 72));
}

uint64_t sub_1D4B26C48(uint64_t a1)
{
  uint64_t result;

  sub_1D4B2044C(a1);
  result = *(_QWORD *)(a1 + 144);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
  return result;
}

uint64_t sub_1D4B26C84(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 144);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 120))(result);
  return result;
}

uint64_t sub_1D4B26C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = (_QWORD *)sub_1D4B1F794(a1, a2, a3, a4);
  *v8 = off_1E9847B28;
  v8[16] = 0;
  v9 = v8 + 16;
  v8[17] = 0;
  v8[18] = 0;
  *(_DWORD *)(a1 + 152) = sub_1D4B4ACF4(a4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(&v25, a3, 2);
  v10 = v25;
  v25 = 0;
  v23 = v10;
  v11 = *(_DWORD *)(a1 + 152);
  v12 = sub_1D4B4AE5C(a4);
  sub_1D4B3ACC8(&v23, 0, v11, v12, &v24);
  v13 = v24;
  v24 = 0;
  v14 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v24;
    v24 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  v16 = v23;
  v23 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2))
  {
    v17 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0);
    sub_1D4B206F8(&v24, v17, a3, a4);
    v18 = *v9;
    *v9 = v24;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) >= 2)
  {
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, 1);
    sub_1D4B206F8(&v24, v19, a3, a4);
    v20 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v24;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if (*(_BYTE *)(a1 + 48))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v21 = v25;
  v25 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  return a1;
}

void sub_1D4B26E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  v15 = v12[18];
  v12[18] = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v12[17];
  v12[17] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *v13;
  *v13 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  sub_1D4B1FD24(v12);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B26F34(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = off_1E9847B28;
  v2 = a1[18];
  a1[18] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[17];
  a1[17] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[16];
  a1[16] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return sub_1D4B1FD24(a1);
}

void sub_1D4B26FAC(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B26F34(a1);
  operator delete(v1);
}

uint64_t sub_1D4B26FC0(uint64_t a1, void *lpsrc, uint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  std::runtime_error *exception;

  v10 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E98461B0, 0);
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to MapVectorBatch");
    __cxa_throw(exception, (struct type_info *)&unk_1E9846268, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v11 = v10;
  (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *((_QWORD *)lpsrc + 5) + a3, a4, a5);
  v12 = v11[12];
  v13 = (uint64_t *)(v12 + 8 * a3);
  if (*((_BYTE *)v11 + 64))
    v14 = (unsigned __int8 *)(v11[5] + a3);
  else
    v14 = 0;
  v15 = *v13;
  v16 = v13[a4] - *v13;
  if (a4)
  {
    v17 = (uint64_t *)(v12 + 8 * a3 + 8);
    v18 = a4;
    v19 = *v13;
    do
    {
      v20 = *v17;
      *(v17 - 1) = *v17 - v19;
      ++v17;
      v19 = v20;
      --v18;
    }
    while (v18);
  }
  (*(void (**)(_QWORD, uint64_t *, unint64_t, unsigned __int8 *))(**(_QWORD **)(a1 + 144) + 16))(*(_QWORD *)(a1 + 144), v13, a4, v14);
  v21 = *(_QWORD *)(a1 + 128);
  if (v21)
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v21 + 16))(v21, v11[15], v15, v16, 0);
  result = *(_QWORD *)(a1 + 136);
  if (result)
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, v11[16], v15, v16, 0);
  if (*(_BYTE *)(a1 + 48))
  {
    if (v14)
    {
      v23 = 0;
      if (a4)
      {
        v24 = a4;
        do
        {
          if (*v14++)
          {
            ++v23;
            if (*(_BYTE *)(a1 + 80))
              sub_1D4B17C04(*(_QWORD *)(a1 + 88), *v13);
          }
          ++v13;
          --v24;
        }
        while (v24);
      }
      result = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), v23);
      if (v23 < a4)
        return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), 1);
    }
    else
    {
      return (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a4);
    }
  }
  return result;
}

void sub_1D4B271E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B271FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  int v12;
  int v13;
  int v14;
  uint64_t v15;

  sub_1D4B1FE80(a1, a2);
  sub_1D4B0A78C(v11);
  v4 = *(_QWORD *)(a1 + 16);
  v13 = 2;
  v14 = v4;
  v12 |= 3u;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 24))(*(_QWORD *)(a1 + 144));
  v12 |= 4u;
  v15 = v5;
  v6 = a2[1];
  if (v6 >= a2[2])
  {
    v7 = sub_1D4B292C8(a2, (uint64_t)v11);
  }
  else
  {
    sub_1D4B0A808(a2[1], (uint64_t)v11);
    v7 = v6 + 40;
    a2[1] = v6 + 40;
  }
  a2[1] = v7;
  v8 = *(_QWORD *)(a1 + 128);
  if (v8)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 24))(v8, a2);
  v9 = *(_QWORD *)(a1 + 136);
  if (v9)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 24))(v9, a2);
  return sub_1D4B0A80C(v11);
}

void sub_1D4B272DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  sub_1D4B0A80C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B272FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  sub_1D4B20290(a1, a2);
  v4 = *(_QWORD *)(a1 + 128);
  if (v4)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 96))(v4, a2);
  result = *(_QWORD *)(a1 + 136);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)result + 96))(result, a2);
  return result;
}

uint64_t sub_1D4B27358(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 144) + 8) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8))
     + v2;
  v4 = *(_QWORD *)(a1 + 128);
  if (v4)
    v3 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  v5 = *(_QWORD *)(a1 + 136);
  if (v5)
    v3 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  return v3;
}

_QWORD *sub_1D4B273D4(uint64_t a1, uint64_t *a2)
{
  int v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  int v12;
  int v13;
  int v14;
  int v15;

  sub_1D4B0AF3C((uint64_t)v11);
  v4 = sub_1D4B1F728(*(unsigned int *)(a1 + 152));
  v5 = v12;
  v13 = v4;
  v14 = 0;
  v12 |= 3u;
  if (*(_BYTE *)(a1 + 80))
  {
    v12 = v5 | 7;
    v15 = 1;
  }
  v6 = a2[1];
  if (v6 >= a2[2])
  {
    v7 = sub_1D4B29528(a2, (uint64_t)v11);
  }
  else
  {
    sub_1D4B0AFC0(a2[1], v11);
    v7 = v6 + 40;
    a2[1] = v6 + 40;
  }
  a2[1] = v7;
  v8 = *(_QWORD *)(a1 + 128);
  if (v8)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 40))(v8, a2);
  v9 = *(_QWORD *)(a1 + 136);
  if (v9)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 40))(v9, a2);
  return sub_1D4B0AFC4(v11);
}

void sub_1D4B274A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  sub_1D4B0AFC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B274C8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  sub_1D4B1FF5C((uint64_t)a1, a2, a1[4]);
  v4 = a1[16];
  if (v4)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(v4, a2);
  result = a1[17];
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)result + 48))(result, a2);
  return result;
}

uint64_t sub_1D4B27528(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 48))(*(_QWORD *)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  result = *(_QWORD *)(a1 + 136);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  return result;
}

uint64_t sub_1D4B27598(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;

  sub_1D4B1FF5C((uint64_t)a1, a2, a1[5]);
  v4 = a1[16];
  if (v4)
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 56))(v4, a2);
  result = a1[17];
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)result + 56))(result, a2);
  return result;
}

uint64_t sub_1D4B275F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  result = *(_QWORD *)(a1 + 136);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

uint64_t sub_1D4B27668(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  sub_1D4B20084(a1);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
  result = *(_QWORD *)(a1 + 136);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  return result;
}

uint64_t sub_1D4B276B8(uint64_t a1)
{
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 72));
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 144) + 32))(*(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 72));
}

uint64_t sub_1D4B276F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  sub_1D4B2044C(a1);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 112))(v2);
  result = *(_QWORD *)(a1 + 136);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
  return result;
}

uint64_t sub_1D4B27748(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 120))(v2);
  result = *(_QWORD *)(a1 + 136);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 120))(result);
  return result;
}

uint64_t sub_1D4B27794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t *v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v8 = sub_1D4B1F794(a1, a2, a3, a4);
  *(_QWORD *)v8 = off_1E9848110;
  *(_OWORD *)(v8 + 128) = 0u;
  v9 = (uint64_t *)(v8 + 128);
  v10 = (char **)(v8 + 136);
  *(_OWORD *)(v8 + 144) = 0u;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(&v35, a3, 1);
  v11 = v35;
  v35 = 0;
  v33 = v11;
  sub_1D4B187BC(&v33, &v34);
  v12 = v34;
  v34 = 0;
  v13 = *v9;
  *v9 = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = v34;
    v34 = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  v15 = v33;
  v33 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  for (i = 0; i != (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2); ++i)
  {
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, i);
    sub_1D4B206F8(&v34, v17, a3, a4);
    v18 = v34;
    v34 = 0;
    v20 = *(_QWORD **)(a1 + 144);
    v19 = *(_QWORD *)(a1 + 152);
    if ((unint64_t)v20 >= v19)
    {
      v22 = ((char *)v20 - *v10) >> 3;
      if ((unint64_t)(v22 + 1) >> 61)
        sub_1D4B182AC();
      v23 = v19 - (_QWORD)*v10;
      v24 = v23 >> 2;
      if (v23 >> 2 <= (unint64_t)(v22 + 1))
        v24 = v22 + 1;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
        v25 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
        v26 = (char *)sub_1D4B182C0(a1 + 152, v25);
      else
        v26 = 0;
      v27 = &v26[8 * v22];
      *(_QWORD *)v27 = v18;
      v21 = v27 + 8;
      v29 = *(char **)(a1 + 136);
      v28 = *(char **)(a1 + 144);
      if (v28 != v29)
      {
        do
        {
          v30 = *((_QWORD *)v28 - 1);
          v28 -= 8;
          *((_QWORD *)v27 - 1) = v30;
          v27 -= 8;
        }
        while (v28 != v29);
        v28 = *v10;
      }
      *(_QWORD *)(a1 + 136) = v27;
      *(_QWORD *)(a1 + 144) = v21;
      *(_QWORD *)(a1 + 152) = &v26[8 * v25];
      if (v28)
        operator delete(v28);
    }
    else
    {
      *v20 = v18;
      v21 = v20 + 1;
    }
    *(_QWORD *)(a1 + 144) = v21;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  if (*(_BYTE *)(a1 + 48))
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  v31 = v35;
  v35 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  return a1;
}

void sub_1D4B279DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  void **v13;
  void *v15;
  uint64_t v16;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  v15 = *v13;
  if (*v13)
  {
    v12[18] = v15;
    operator delete(v15);
  }
  v16 = *a9;
  *a9 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  sub_1D4B1FD24(v12);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B27A6C(_QWORD *a1)
{
  void *v2;
  void *v3;
  _QWORD *v4;
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = off_1E9848110;
  v4 = a1 + 17;
  v2 = (void *)a1[17];
  v3 = (void *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (v3)
    {
LABEL_7:
      a1[18] = v2;
      operator delete(v2);
    }
  }
  else
  {
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = *((_QWORD *)v2 + v5);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v2 = (void *)a1[17];
        v3 = (void *)a1[18];
      }
      v5 = v6++;
    }
    while (v5 < ((_BYTE *)v3 - (_BYTE *)v2) >> 3);
    if (v2)
      goto LABEL_7;
  }
  v8 = a1[16];
  a1[16] = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return sub_1D4B1FD24(a1);
}

void sub_1D4B27B10(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B27A6C(a1);
  operator delete(v1);
}

void sub_1D4B27B24(uint64_t a1, void *lpsrc, uint64_t a3, unint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  std::runtime_error *exception;
  uint64_t v33;
  void *__p[3];
  void *v35[3];

  v10 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E98463E8, (const struct __class_type_info *)&unk_1E98463D0, 0);
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D24C(exception, "Failed to cast to UnionVectorBatch");
    __cxa_throw(exception, (struct type_info *)&unk_1E9846268, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v11 = v10;
  (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), *((_QWORD *)lpsrc + 5) + a3, a4, a5);
  if (*((_BYTE *)v11 + 64))
    v12 = (unsigned __int8 *)(v11[5] + a3);
  else
    v12 = 0;
  v13 = v11[12];
  v14 = v11[17];
  v15 = (uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 3;
  __p[0] = (void *)-1;
  sub_1D4B29E00(v35, v15, __p);
  v16 = (uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 3;
  v33 = 0;
  sub_1D4B29E80(__p, v16, &v33);
  v17 = (unsigned __int8 *)(v13 + a3);
  if (a4)
  {
    v18 = (_QWORD *)(v14 + 8 * a3);
    v19 = v35[0];
    v20 = __p[0];
    v21 = v17;
    v22 = a4;
    do
    {
      v23 = *v21;
      if (v19[v23] == -1)
      {
        v19[v23] = *v18;
        v23 = *v21;
      }
      ++v20[v23];
      ++v18;
      ++v21;
      --v22;
    }
    while (v22);
  }
  (*(void (**)(_QWORD, unsigned __int8 *, unint64_t, unsigned __int8 *))(**(_QWORD **)(a1 + 128) + 16))(*(_QWORD *)(a1 + 128), v17, a4, v12);
  v25 = *(_QWORD *)(a1 + 136);
  v24 = *(_QWORD *)(a1 + 144);
  if (v24 != v25)
  {
    v26 = 0;
    v27 = 1;
    do
    {
      v28 = *((_QWORD *)__p[0] + v26);
      if (v28)
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v25 + 8 * v26) + 16))(*(_QWORD *)(v25 + 8 * v26), *(_QWORD *)(v11[20] + 8 * v26), *((_QWORD *)v35[0] + v26), v28, 0);
        v25 = *(_QWORD *)(a1 + 136);
        v24 = *(_QWORD *)(a1 + 144);
      }
      v26 = v27++;
    }
    while (v26 < (v24 - v25) >> 3);
  }
  if (*(_BYTE *)(a1 + 48))
  {
    if (v12)
    {
      v29 = 0;
      if (a4)
      {
        v30 = a4;
        do
        {
          if (*v12++)
          {
            ++v29;
            if (*(_BYTE *)(a1 + 80))
              sub_1D4B17C04(*(_QWORD *)(a1 + 88), *v17);
          }
          ++v17;
          --v30;
        }
        while (v30);
      }
      (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), v29);
      if (v29 < a4)
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), 1);
    }
    else
    {
      (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a4);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }
}

void sub_1D4B27DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  void *v15;

  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B27E08(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  _QWORD v12[2];
  int v13;
  int v14;
  int v15;
  uint64_t v16;

  sub_1D4B1FE80(a1, a2);
  sub_1D4B0A78C(v12);
  v4 = *(_QWORD *)(a1 + 16);
  v14 = 1;
  v15 = v4;
  v13 |= 3u;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128));
  v13 |= 4u;
  v16 = v5;
  v6 = a2[1];
  if (v6 >= a2[2])
  {
    v7 = sub_1D4B292C8(a2, (uint64_t)v12);
  }
  else
  {
    sub_1D4B0A808(a2[1], (uint64_t)v12);
    v7 = v6 + 40;
    a2[1] = v6 + 40;
  }
  a2[1] = v7;
  v8 = *(_QWORD *)(a1 + 136);
  if (*(_QWORD *)(a1 + 144) != v8)
  {
    v9 = 0;
    v10 = 1;
    do
    {
      (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v8 + 8 * v9) + 24))(*(_QWORD *)(v8 + 8 * v9), a2);
      v9 = v10;
      v8 = *(_QWORD *)(a1 + 136);
      ++v10;
    }
    while (v9 < (*(_QWORD *)(a1 + 144) - v8) >> 3);
  }
  return sub_1D4B0A80C(v12);
}

void sub_1D4B27EF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  sub_1D4B0A80C((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B27F1C(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;

  result = sub_1D4B20290(a1, a2);
  v5 = *(_QWORD *)(a1 + 136);
  if (*(_QWORD *)(a1 + 144) != v5)
  {
    v6 = 0;
    v7 = 1;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v5 + 8 * v6) + 96))(*(_QWORD *)(v5 + 8 * v6), a2);
      v6 = v7;
      v5 = *(_QWORD *)(a1 + 136);
      ++v7;
    }
    while (v6 < (*(_QWORD *)(a1 + 144) - v5) >> 3);
  }
  return result;
}

uint64_t sub_1D4B27F88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 24))(*(_QWORD *)(a1 + 128)) + v2;
  v4 = *(_QWORD *)(a1 + 136);
  if (*(_QWORD *)(a1 + 144) != v4)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      v3 += (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 8 * v5) + 32))(*(_QWORD *)(v4 + 8 * v5));
      v5 = v6;
      v4 = *(_QWORD *)(a1 + 136);
      ++v6;
    }
    while (v5 < (*(_QWORD *)(a1 + 144) - v4) >> 3);
  }
  return v3;
}

_QWORD *sub_1D4B28018(uint64_t a1, uint64_t *a2)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  _QWORD v11[2];
  int v12;
  uint64_t v13;
  int v14;

  sub_1D4B0AF3C((uint64_t)v11);
  v4 = v12;
  v13 = 0;
  v12 |= 3u;
  if (*(_BYTE *)(a1 + 80))
  {
    v12 = v4 | 7;
    v14 = 1;
  }
  v5 = a2[1];
  if (v5 >= a2[2])
  {
    v6 = sub_1D4B29528(a2, (uint64_t)v11);
  }
  else
  {
    sub_1D4B0AFC0(a2[1], v11);
    v6 = v5 + 40;
    a2[1] = v5 + 40;
  }
  a2[1] = v6;
  v7 = *(_QWORD *)(a1 + 136);
  if (*(_QWORD *)(a1 + 144) != v7)
  {
    v8 = 0;
    v9 = 1;
    do
    {
      (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v7 + 8 * v8) + 40))(*(_QWORD *)(v7 + 8 * v8), a2);
      v8 = v9;
      v7 = *(_QWORD *)(a1 + 136);
      ++v9;
    }
    while (v8 < (*(_QWORD *)(a1 + 144) - v7) >> 3);
  }
  return sub_1D4B0AFC4(v11);
}

void sub_1D4B280F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B0AFC4((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B28118(uint64_t *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;

  result = sub_1D4B1FF5C((uint64_t)a1, a2, a1[4]);
  v5 = a1[17];
  if (a1[18] != v5)
  {
    v6 = 0;
    v7 = 1;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v5 + 8 * v6) + 48))(*(_QWORD *)(v5 + 8 * v6), a2);
      v6 = v7;
      v5 = a1[17];
      ++v7;
    }
    while (v6 < (a1[18] - v5) >> 3);
  }
  return result;
}

uint64_t sub_1D4B28188(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 40))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 48))(*(_QWORD *)(a1 + 32));
  v3 = *(_QWORD *)(a1 + 136);
  if (*(_QWORD *)(a1 + 144) != v3)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8 * v4) + 72))(*(_QWORD *)(v3 + 8 * v4));
      v4 = v5;
      v3 = *(_QWORD *)(a1 + 136);
      ++v5;
    }
    while (v4 < (*(_QWORD *)(a1 + 144) - v3) >> 3);
  }
  return result;
}

_QWORD *sub_1D4B28204(uint64_t *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;

  result = sub_1D4B1FF5C((uint64_t)a1, a2, a1[5]);
  v5 = a1[17];
  if (a1[18] != v5)
  {
    v6 = 0;
    v7 = 1;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v5 + 8 * v6) + 56))(*(_QWORD *)(v5 + 8 * v6), a2);
      v6 = v7;
      v5 = a1[17];
      ++v7;
    }
    while (v6 < (a1[18] - v5) >> 3);
  }
  return result;
}

uint64_t sub_1D4B28274(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;

  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
  v3 = *(_QWORD *)(a1 + 136);
  if (*(_QWORD *)(a1 + 144) != v3)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8 * v4) + 64))(*(_QWORD *)(v3 + 8 * v4));
      v4 = v5;
      v3 = *(_QWORD *)(a1 + 136);
      ++v5;
    }
    while (v4 < (*(_QWORD *)(a1 + 144) - v3) >> 3);
  }
  return result;
}

uint64_t sub_1D4B282F0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;

  result = sub_1D4B20084(a1);
  v3 = *(_QWORD *)(a1 + 136);
  if (*(_QWORD *)(a1 + 144) != v3)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 8 * v4) + 80))(*(_QWORD *)(v3 + 8 * v4));
      v4 = v5;
      v3 = *(_QWORD *)(a1 + 136);
      ++v5;
    }
    while (v4 < (*(_QWORD *)(a1 + 144) - v3) >> 3);
  }
  return result;
}

uint64_t sub_1D4B2834C(uint64_t a1)
{
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 72));
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 128) + 40))(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 72));
}

void sub_1D4B2838C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;

  sub_1D4B2044C(a1);
  v2 = *(_QWORD *)(a1 + 136);
  if (*(_QWORD *)(a1 + 144) != v2)
  {
    v3 = 0;
    v4 = 1;
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v3) + 112))(*(_QWORD *)(v2 + 8 * v3));
      v3 = v4;
      v2 = *(_QWORD *)(a1 + 136);
      ++v4;
    }
    while (v3 < (*(_QWORD *)(a1 + 144) - v2) >> 3);
  }
}

uint64_t sub_1D4B283E8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;

  v1 = *(_QWORD *)(result + 136);
  if (*(_QWORD *)(result + 144) != v1)
  {
    v2 = result;
    v3 = 0;
    v4 = 1;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 120))(*(_QWORD *)(v1 + 8 * v3));
      v3 = v4;
      v1 = *(_QWORD *)(v2 + 136);
      ++v4;
    }
    while (v3 < (*(_QWORD *)(v2 + 144) - v1) >> 3);
  }
  return result;
}

void sub_1D4B28440(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  signed int v4;
  unsigned int *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  v5 = (unsigned int *)(v3 + 24);
  v4 = *(_DWORD *)(v3 + 24);
  if (v4 == *(_DWORD *)(v3 + 28))
  {
    sub_1D4B165E8(v5, v4 + 1);
    v4 = *v5;
  }
  v6 = *(_QWORD *)(v3 + 32);
  *(_DWORD *)(v3 + 24) = v4 + 1;
  *(_QWORD *)(v6 + 8 * v4 + 8) = a2;
}

_QWORD *sub_1D4B284A4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E9848610;
  v2 = a1[16];
  a1[16] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_1D4B1FD24(a1);
}

void sub_1D4B284E8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;

  *a1 = off_1E9848610;
  v2 = a1[16];
  a1[16] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = sub_1D4B1FD24(a1);
  operator delete(v3);
}

_QWORD *sub_1D4B28530(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E9847BF8;
  v2 = a1[16];
  a1[16] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_1D4B1FD24(a1);
}

void sub_1D4B28574(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;

  *a1 = off_1E9847BF8;
  v2 = a1[16];
  a1[16] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = sub_1D4B1FD24(a1);
  operator delete(v3);
}

_QWORD *sub_1D4B285BC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E9848540;
  v2 = a1[16];
  a1[16] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return sub_1D4B1FD24(a1);
}

void sub_1D4B28600(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;

  *a1 = off_1E9848540;
  v2 = a1[16];
  a1[16] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = sub_1D4B1FD24(a1);
  operator delete(v3);
}

_QWORD *sub_1D4B28648(_QWORD *a1)
{
  uint64_t **v2;

  *a1 = off_1E98482E8;
  v2 = (uint64_t **)(a1 + 17);
  sub_1D4B2F630(a1 + 18);
  sub_1D4B22400(v2, 0);
  return sub_1D4B1FD24(a1);
}

void sub_1D4B2868C(_QWORD *a1)
{
  uint64_t **v2;
  _QWORD *v3;

  *a1 = off_1E98482E8;
  v2 = (uint64_t **)(a1 + 17);
  sub_1D4B2F630(a1 + 18);
  sub_1D4B22400(v2, 0);
  v3 = sub_1D4B1FD24(a1);
  operator delete(v3);
}

void sub_1D4B286D8(uint64_t a1)
{
  _QWORD *v1;

  v1 = sub_1D4B29194(a1);
  operator delete(v1);
}

_QWORD *sub_1D4B286EC(_QWORD *a1)
{
  *a1 = off_1E9847C88;
  sub_1D4B2F630(a1 + 40);
  return sub_1D4B29194((uint64_t)a1);
}

void sub_1D4B28720(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_1E9847C88;
  sub_1D4B2F630(a1 + 40);
  v2 = sub_1D4B29194((uint64_t)a1);
  operator delete(v2);
}

_QWORD *sub_1D4B28758(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1E9848C10;
  v2 = a1[17];
  a1[17] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[16];
  a1[16] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_1D4B1FD24(a1);
}

void sub_1D4B287B4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  *a1 = off_1E9848C10;
  v2 = a1[17];
  a1[17] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[16];
  a1[16] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = sub_1D4B1FD24(a1);
  operator delete(v4);
}

_QWORD *sub_1D4B28814(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_1E9848A88;
  v2 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1D4B22400((uint64_t **)(a1 + 152), 0);
  return sub_1D4B1FD24((_QWORD *)a1);
}

void sub_1D4B28864(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)a1 = off_1E9848A88;
  v2 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1D4B22400((uint64_t **)(a1 + 152), 0);
  v3 = sub_1D4B1FD24((_QWORD *)a1);
  operator delete(v3);
}

uint64_t sub_1D4B288B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x222222222222222)
    sub_1D4B182AC();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x111111111111111)
    v9 = 0x222222222222222;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1D4B28A40(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[120 * v4];
  v16 = &v10[120 * v9];
  sub_1D4B077B8((uint64_t)v14, a2);
  v15 = v14 + 120;
  sub_1D4B289BC(a1, &v13);
  v11 = a1[1];
  sub_1D4B28AC8((uint64_t)&v13);
  return v11;
}

void sub_1D4B289A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B28AC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B289BC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 120;
    result = sub_1D4B28A84(result - 120, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *sub_1D4B28A40(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223)
    sub_1D4B18174();
  return operator new(120 * a2);
}

uint64_t sub_1D4B28A84(uint64_t a1, uint64_t a2)
{
  sub_1D4B0759C(a1);
  if (a1 != a2)
    sub_1D4B088C0(a1, a2);
  return a1;
}

uint64_t sub_1D4B28AC8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 120);
    *(_QWORD *)(a1 + 16) = i - 120;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1D4B28B18(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1D4B28B58((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1D4B28B58(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_1D4B28BAC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1D4B28BAC(a1, *a2);
    sub_1D4B28BAC(a1, a2[1]);
    operator delete(a2);
  }
}

void sub_1D4B28BEC(uint64_t a1, uint64_t a2)
{
  std::string __p;

  *(_BYTE *)(a1 + 17) = 1;
  if (*(char *)(a2 + 23) < 0)
    sub_1D4B1655C(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  std::string::operator=((std::string *)(a1 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1D4B28C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4B28C7C(uint64_t a1, uint64_t a2)
{
  std::string __p;

  *(_BYTE *)(a1 + 18) = 1;
  if (*(char *)(a2 + 23) < 0)
    sub_1D4B1655C(&__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  std::string::operator=((std::string *)(a1 + 64), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1D4B28CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4B28D0C(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1D4B02588();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

__n128 sub_1D4B28DB0(uint64_t a1, __n128 *a2)
{
  __n128 *v4;
  __n128 v5;
  __n128 result;
  __n128 v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __n128 v13;
  unint64_t v14;

  if (!*(_BYTE *)(a1 + 1))
  {
    *(_WORD *)(a1 + 1) = 257;
    v5 = *a2;
    *(_DWORD *)(a1 + 64) = a2[1].n128_u32[0];
    *(__n128 *)(a1 + 48) = v5;
    result = *a2;
    *(_DWORD *)(a1 + 40) = a2[1].n128_u32[0];
    *(__n128 *)(a1 + 24) = result;
    return result;
  }
  v13 = *a2;
  v14 = a2[1].n128_u64[0];
  v11 = *(_OWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 40);
  if (sub_1D4B28F6C((uint64_t)&v13, (uint64_t)&v11))
  {
    v4 = (__n128 *)(a1 + 24);
  }
  else
  {
    v9 = *(_OWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 64);
    v7 = *a2;
    v8 = a2[1].n128_u64[0];
    if (!sub_1D4B28F6C((uint64_t)&v9, (uint64_t)&v7))
      return result;
    v4 = (__n128 *)(a1 + 48);
  }
  result = *a2;
  v4[1].n128_u32[0] = a2[1].n128_u32[0];
  *v4 = result;
  return result;
}

uint64_t sub_1D4B28E88(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int128 v10;
  char v11;

  if (*(_BYTE *)(result + 19))
  {
    v3 = result;
    v11 = 0;
    v4 = *(_QWORD *)(result + 88);
    v5 = *(_QWORD *)(result + 96);
    v6 = *(_DWORD *)(result + 104);
    v7 = *((_DWORD *)a2 + 4);
    if (v6 <= v7)
    {
      if (v6 < v7)
      {
        result = sub_1D4B2E228(*(_QWORD *)(result + 88), v5, v7 - v6, &v11);
        v4 = result;
        v5 = v9;
        v6 = *((_DWORD *)a2 + 4);
      }
    }
    else
    {
      result = sub_1D4B2E228(*a2, a2[1], v6 - v7, &v11);
      *a2 = result;
      a2[1] = v8;
    }
    if (v11)
    {
      *(_BYTE *)(v3 + 19) = 0;
      return result;
    }
    v10 = __PAIR128__(*a2, a2[1]) + __PAIR128__(v4, v5);
    if (*a2)
    {
      if (((*a2 ^ v4) & 0x8000000000000000) == 0)
        goto LABEL_10;
    }
    else if ((v4 & 0x8000000000000000) == 0)
    {
LABEL_10:
      *(_BYTE *)(v3 + 19) = (*((_QWORD *)&v10 + 1) ^ v4) >= 0;
      if ((*((_QWORD *)&v10 + 1) ^ v4) < 0)
        return result;
      goto LABEL_11;
    }
    if (!*(_BYTE *)(v3 + 19))
      return result;
LABEL_11:
    *(_QWORD *)(v3 + 88) = *((_QWORD *)&v10 + 1);
    *(_QWORD *)(v3 + 96) = v10;
    *(_DWORD *)(v3 + 104) = v6;
  }
  return result;
}

uint64_t sub_1D4B28F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v4 = sub_1D4B2E3A8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 16));
  v6 = v5;
  v7 = sub_1D4B2E3A8(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16));
  v9 = v7;
  v10 = v8;
  if (v4 != v7)
  {
    if (v4 >= v7)
    {
      if (v4 > v7)
        return 0;
      goto LABEL_9;
    }
    return 1;
  }
  if (v6 < v8)
    return 1;
  if (v6 > v8)
    return 0;
LABEL_9:
  v31 = 0;
  v11 = *(_QWORD *)a1 >> 63;
  v13 = sub_1D4B2E228(v4, v6, *(_DWORD *)(a1 + 16), &v31);
  v14 = *(_QWORD *)(a1 + 8);
  v16 = v14 >= v15;
  v17 = v14 - v15;
  v18 = !v16;
  *(_QWORD *)a1 = *(_QWORD *)a1 - v13 - v18;
  *(_QWORD *)(a1 + 8) = v17;
  v19 = sub_1D4B2E228(v9, v10, *(_DWORD *)(a2 + 16), &v31);
  v20 = *(_QWORD *)(a2 + 8);
  v21 = *(_QWORD *)a2 - v19;
  v16 = v20 >= v22;
  v23 = v20 - v22;
  v24 = !v16;
  *(_QWORD *)a2 = v21 - v24;
  *(_QWORD *)(a2 + 8) = v23;
  v25 = *(_DWORD *)(a1 + 16) - *(_DWORD *)(a2 + 16);
  if (v25 < 1)
  {
    v28 = sub_1D4B2E228(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_DWORD *)(a2 + 16) - *(_DWORD *)(a1 + 16), &v31);
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = v29;
    if (v31)
      return v11;
    v30 = *(_QWORD *)a2;
  }
  else
  {
    v26 = sub_1D4B2E228(v21 - v24, v23, v25, &v31);
    *(_QWORD *)a2 = v26;
    *(_QWORD *)(a2 + 8) = v27;
    if (v31)
      return v11 ^ 1;
    v30 = v26;
    v28 = *(_QWORD *)a1;
  }
  if (v28 == v30)
    return *(_QWORD *)(a1 + 8) < *(_QWORD *)(a2 + 8);
  else
    return v28 < v30;
}

uint64_t sub_1D4B290EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  *(_QWORD *)sub_1D4B22D24(a1, a2, a3, a4) = off_1E9847C88;
  *(_QWORD *)(a1 + 312) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  v7 = sub_1D4B4AE70(a4);
  sub_1D4B2EFDC((_QWORD *)(a1 + 320), v7, 0);
  sub_1D4B2EF9C(a1 + 320, 6 * *(_QWORD *)(a1 + 312));
  return a1;
}

void sub_1D4B29170(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1D4B2F630(v2);
  sub_1D4B29194(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B29194(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v8;

  *(_QWORD *)a1 = off_1E98483A0;
  v2 = *(void **)(a1 + 288);
  if (v2)
  {
    *(_QWORD *)(a1 + 296) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 248);
  if (v3)
  {
    *(_QWORD *)(a1 + 256) = v3;
    operator delete(v3);
  }
  v8 = (void **)(a1 + 216);
  sub_1D4B28B18(&v8);
  sub_1D4B28BAC(a1 + 192, *(_QWORD **)(a1 + 200));
  sub_1D4B22400((uint64_t **)(a1 + 184), 0);
  v4 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_1D4B22400((uint64_t **)(a1 + 160), 0);
  v6 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return sub_1D4B1FD24((_QWORD *)a1);
}

uint64_t sub_1D4B2926C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)sub_1D4B22D24(a1, a2, a3, a4) = &off_1E98486A0;
  *(_QWORD *)(a1 + 312) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  return a1;
}

void sub_1D4B292B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D4B29194(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B292C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    sub_1D4B182AC();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1D4B29450(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[40 * v4];
  v16 = &v10[40 * v9];
  sub_1D4B0A808((uint64_t)v14, a2);
  v15 = v14 + 40;
  sub_1D4B293CC(a1, &v13);
  v11 = a1[1];
  sub_1D4B294D8((uint64_t)&v13);
  return v11;
}

void sub_1D4B293B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B294D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B293CC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  result = (_QWORD *)a2[1];
  while (v4 != v5)
  {
    v4 -= 40;
    result = sub_1D4B29494(result - 5, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = (uint64_t)result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *sub_1D4B29450(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    sub_1D4B18174();
  return operator new(40 * a2);
}

_QWORD *sub_1D4B29494(_QWORD *a1, uint64_t a2)
{
  sub_1D4B0A78C(a1);
  if (a1 != (_QWORD *)a2)
    sub_1D4B0ADF0((uint64_t)a1, a2);
  return a1;
}

uint64_t sub_1D4B294D8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 40);
    *(_QWORD *)(a1 + 16) = i - 40;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1D4B29528(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    sub_1D4B182AC();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1D4B29450(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[40 * v4];
  v16 = &v10[40 * v9];
  sub_1D4B0AFC0(v14, a2);
  v15 = v14 + 40;
  sub_1D4B2962C(a1, &v13);
  v11 = a1[1];
  sub_1D4B294D8((uint64_t)&v13);
  return v11;
}

void sub_1D4B29618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B294D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2962C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 40;
    result = sub_1D4B296B0(result - 40, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1D4B296B0(uint64_t a1, uint64_t a2)
{
  sub_1D4B0AF3C(a1);
  if (a1 != a2)
    sub_1D4B0B5B0(a1, a2);
  return a1;
}

_OWORD *sub_1D4B296F4(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_1D4B2977C((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    sub_1D4B29854(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *sub_1D4B2977C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  const void *v6;
  size_t v7;
  _QWORD *v8;
  const void *v9;
  size_t v10;
  size_t v11;
  int v12;
  _BOOL4 v13;
  int v14;
  _BOOL4 v15;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v6 = *(const void **)a3;
    v7 = *(_QWORD *)(a3 + 8);
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = *(const void **)(v4 + 32);
        v10 = *(_QWORD *)(v4 + 40);
        if (v10 >= v7)
          v11 = v7;
        else
          v11 = *(_QWORD *)(v4 + 40);
        v12 = memcmp(v6, *(const void **)(v4 + 32), v11);
        v13 = v7 < v10;
        if (v12)
          v13 = v12 < 0;
        if (!v13)
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_17;
      }
      v14 = memcmp(v9, v6, v11);
      v15 = v10 < v7;
      if (v14)
        v15 = v14 < 0;
      if (!v15)
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_17:
  *a2 = v8;
  return v5;
}

uint64_t *sub_1D4B29854(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_1D4B298A8(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_1D4B298A8(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

_QWORD *sub_1D4B29A40(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4B29AB0(a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1D4B29A94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1D4B29AB0(_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    sub_1D4B182AC();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t sub_1D4B29AF0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1D4B29BA8((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1D4B29B64(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_1D4B18174();
  return operator new(24 * a2);
}

uint64_t sub_1D4B29BA8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_1D4B29C48((uint64_t)v11);
  return v9;
}

uint64_t sub_1D4B29C48(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1D4B29C7C(a1);
  return a1;
}

void sub_1D4B29C7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_1D4B29CC0(uint64_t a1)
{
  sub_1D4B29CF4(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1D4B29CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

_QWORD *sub_1D4B29D4C(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4B29DC0(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1D4B29DA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1D4B29DC0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_1D4B182AC();
  result = (char *)sub_1D4B182C0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

_QWORD *sub_1D4B29E00(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4B29DC0(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1D4B29E64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4B29E80(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4B29DC0(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1D4B29EE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4B29F00()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD v3[13];
  char v4;
  uint64_t v5;
  char v6;

  sub_1D4B177C0((uint64_t)v3);
  v0 = (_QWORD *)std::ostream::operator<<();
  v6 = 46;
  sub_1D4B02240(v0, (uint64_t)&v6, 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F50];
  v1 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v3[2] = v1;
  v3[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1D82646E0](&v5);
}

void sub_1D4B29FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1D4B178EC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1D4B29FE8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFEC6B08);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFEC6B08))
  {
    qword_1EFEC6B38 = 0xB00000000;
    __cxa_guard_release(&qword_1EFEC6B08);
  }
  return &qword_1EFEC6B38;
}

uint64_t *sub_1D4B2A040()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFEC6B10);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFEC6B10))
  {
    qword_1EFEC6B40 = 0xC00000000;
    __cxa_guard_release(&qword_1EFEC6B10);
  }
  return &qword_1EFEC6B40;
}

uint64_t sub_1D4B2A098(uint64_t a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  _QWORD *v10;

  v10 = sub_1D4B02610((_QWORD *)a1, a6, a2, a4, a5);
  *v10 = off_1E9848998;
  sub_1D4B2F560(v10 + 4, a6, a5);
  *(_DWORD *)(a1 + 72) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  return a1;
}

void sub_1D4B2A0FC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1D4B026C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2A110(uint64_t result, int a2)
{
  int v2;
  BOOL v3;
  int v4;
  std::logic_error *exception;

  v2 = *(_DWORD *)(result + 88);
  v3 = __OFSUB__(v2, a2);
  v4 = v2 - a2;
  if (v4 < 0 != v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Can't backup that much!");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  *(_DWORD *)(result + 88) = v4;
  return result;
}

void sub_1D4B2A168(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2A17C(uint64_t a1)
{
  std::runtime_error *exception;
  int v4;
  uint64_t v5;

  v5 = 0;
  v4 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t *, int *))(*(_QWORD *)a1 + 16))(a1, &v5, &v4) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to flush compression buffer.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  sub_1D4B02800(a1, *(_DWORD *)(a1 + 96) - *(_DWORD *)(a1 + 92));
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  return sub_1D4B029EC(a1);
}

void sub_1D4B2A210(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2A224(uint64_t a1)
{
  return sub_1D4B029E0(a1) - *(int *)(a1 + 96) + *(int *)(a1 + 92);
}

uint64_t sub_1D4B2A250(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  std::runtime_error *exception;

  v1 = result;
  v2 = *(_DWORD *)(result + 96);
  v3 = *(_DWORD *)(result + 92) + 3;
  v4 = v3 - v2;
  if (v3 >= v2)
  {
    result = sub_1D4B02794(result, (_QWORD *)(result + 80), (_DWORD *)(result + 96));
    if ((result & 1) == 0)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Failed to get next output buffer from output stream.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
    v3 = v4;
  }
  *(_DWORD *)(v1 + 92) = v3;
  return result;
}

void sub_1D4B2A2CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2A2E0(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unsigned int v9;
  int v10;

  if (*(_DWORD *)(a1 + 88))
  {
    sub_1D4B2A250(a1);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    v7 = *(int *)(a1 + 88);
    v8 = (char *)(*(_QWORD *)(a1 + 80) + *(int *)(a1 + 92) - v6);
    if (v6 >= v7)
    {
      *(v8 - 3) = (2 * v7) | 1;
      *(v8 - 2) = v7 >> 7;
      *(v8 - 1) = v7 >> 15;
      memcpy(v8, *(const void **)(a1 + 48), *(int *)(a1 + 88));
      v9 = v6 - *(_DWORD *)(a1 + 88);
      sub_1D4B02800(a1, v9);
      *(int32x2_t *)(a1 + 92) = vsub_s32(*(int32x2_t *)(a1 + 92), vdup_n_s32(v9));
    }
    else
    {
      *(_WORD *)(v8 - 3) = __PAIR16__((2 * v6) >> 56, 2 * v6);
      *(v8 - 1) = v6 >> 15;
    }
  }
  *a2 = *(_QWORD *)(a1 + 48);
  v10 = *(_DWORD *)(a1 + 56);
  *a3 = v10;
  *(_DWORD *)(a1 + 88) = v10;
  return 1;
}

uint64_t sub_1D4B2A3C8(uint64_t a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  _QWORD *v7;

  v7 = (_QWORD *)sub_1D4B2A098(a1, a2, a3, a4, a5, a6);
  *v7 = off_1E9848D18;
  sub_1D4B2A424((uint64_t)v7);
  return a1;
}

void sub_1D4B2A3FC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_1E9848998;
  sub_1D4B2F824((uint64_t)(v1 + 4));
  sub_1D4B026C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2A424(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;
  std::runtime_error *exception;

  *(_QWORD *)(a1 + 104) = 0;
  v1 = (_QWORD *)(a1 + 104);
  v1[9] = 0;
  v1[10] = 0;
  v1[8] = 0;
  result = sub_1D4BA5CD4(v1, *((_DWORD *)v1 - 8), 8, 0xFFFFFFF1, 8, 0, "1.2.13", 112);
  if ((_DWORD)result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error while calling deflateInit2() for zlib.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1D4B2A4A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2A4B4(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  std::runtime_error *exception;

  v2 = a1 + 104;
  if (sub_1D4BA6014(a1 + 104))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to reset inflate.");
LABEL_13:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v3 = *(_DWORD *)(a1 + 96);
  v4 = *(_DWORD *)(a1 + 92);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 48);
  while (1)
  {
    if (v4 < v3)
      goto LABEL_6;
    if ((sub_1D4B02794(a1, (_QWORD *)(a1 + 80), (_DWORD *)(a1 + 96)) & 1) == 0)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Failed to get next output buffer from output stream.");
      goto LABEL_13;
    }
    v4 = 0;
    *(_DWORD *)(a1 + 92) = 0;
    v3 = *(_DWORD *)(a1 + 96);
LABEL_6:
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 80) + v4;
    *(_DWORD *)(a1 + 136) = v3 - v4;
    v5 = sub_1D4BA640C(v2, 4);
    v3 = *(_DWORD *)(a1 + 96);
    v6 = *(_DWORD *)(a1 + 136);
    v4 = v3 - v6;
    *(_DWORD *)(a1 + 92) = v3 - v6;
    if (v5)
      break;
    if (v6)
      return *(_QWORD *)(a1 + 144);
  }
  if (v5 != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to deflate input data.");
    goto LABEL_13;
  }
  return *(_QWORD *)(a1 + 144);
}

void sub_1D4B2A5DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B2A5F8@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "ZlibCompressionStream");
}

uint64_t sub_1D4B2A608(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  std::logic_error *exception;

  *(_QWORD *)a1 = off_1E9849050;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  sub_1D4B2EFDC((_QWORD *)(a1 + 144), a4, a3);
  v6 = *a2;
  *a2 = 0;
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 160);
  *(_DWORD *)(a1 + 64) = *(_QWORD *)(a1 + 16);
  v8 = sub_1D4BA87B0((_QWORD *)(a1 + 32), 0xFFFFFFF1, "1.2.13", 112);
  if (v8)
  {
    switch(v8)
    {
      case -6:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Version error from inflateInit2");
        break;
      case -4:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Memory error from inflateInit2");
        break;
      case -2:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Stream error from inflateInit2");
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Unknown error from inflateInit2");
        break;
    }
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  return a1;
}

void sub_1D4B2A758(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;

  __cxa_free_exception(v3);
  sub_1D4B2F630(v2);
  v5 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2A7B0(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  *a1 = off_1E9849050;
  if (sub_1D4BAA370((uint64_t)(a1 + 4)))
  {
    sub_1D4B02240(MEMORY[0x1E0DE4A60], (uint64_t)"Error in ~ZlibDecompressionStream() ", 36);
    v2 = (_QWORD *)std::ostream::operator<<();
    sub_1D4B02240(v2, (uint64_t)"\n", 1);
  }
  sub_1D4B2F630(a1 + 18);
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return nullsub_1(a1);
}

void sub_1D4B2A840(_QWORD *a1)
{
  void *v1;

  v1 = (void *)sub_1D4B2A7B0(a1);
  operator delete(v1);
}

uint64_t sub_1D4B2A854(uint64_t a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  std::logic_error *exception;

  v6 = *(_QWORD *)(a1 + 200);
  if (!v6)
  {
    v7 = *(_DWORD *)(a1 + 184);
    if (!v7 || !*(_QWORD *)(a1 + 208))
    {
      sub_1D4B2AB28(a1);
      v7 = *(_DWORD *)(a1 + 184);
    }
    if (v7 == 4)
      return 0;
    v9 = *(_QWORD *)(a1 + 216);
    v10 = *(_QWORD *)(a1 + 224);
    if (v9 == v10)
    {
      sub_1D4B2ABA8(a1, 1);
      v9 = *(_QWORD *)(a1 + 216);
      v10 = *(_QWORD *)(a1 + 224);
      v7 = *(_DWORD *)(a1 + 184);
    }
    v11 = v10 - v9;
    if (*(_QWORD *)(a1 + 208) >= v11)
      v12 = v11;
    else
      v12 = *(_QWORD *)(a1 + 208);
    if (v7 == 1)
    {
      *(_QWORD *)(a1 + 32) = v9;
      *(_DWORD *)(a1 + 40) = v12;
      v15 = *(_QWORD *)(a1 + 160);
      *(_QWORD *)(a1 + 192) = v15;
      *(_QWORD *)(a1 + 56) = v15;
      *(_DWORD *)(a1 + 64) = *(_QWORD *)(a1 + 16);
      sub_1D4BA86B8((_QWORD *)(a1 + 32));
      if (!v16)
      {
        while (2)
        {
          if (v12 == *(_QWORD *)(a1 + 208))
            v17 = 4;
          else
            v17 = 2;
          v18 = sub_1D4BA888C(a1 + 32, v17);
          switch(v18)
          {
            case -5:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Buffer error in ZlibDecompressionStream::Next");
              goto LABEL_33;
            case -3:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Data error in ZlibDecompressionStream::Next");
              goto LABEL_33;
            case -2:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Stream error in ZlibDecompressionStream::Next");
              goto LABEL_33;
            case 0:
              v19 = *(_QWORD *)(a1 + 216) + v12;
              *(_QWORD *)(a1 + 208) -= v12;
              *(_QWORD *)(a1 + 216) = v19;
              sub_1D4B2ABA8(a1, 1);
              v20 = *(_QWORD *)(a1 + 216);
              if (*(_QWORD *)(a1 + 208) >= (unint64_t)(*(_QWORD *)(a1 + 224) - v20))
                v12 = *(_QWORD *)(a1 + 224) - v20;
              else
                v12 = *(_QWORD *)(a1 + 208);
              *(_QWORD *)(a1 + 32) = v20;
              *(_DWORD *)(a1 + 40) = v12;
              goto LABEL_25;
            case 1:
LABEL_25:
              if (v18 != 1)
                continue;
              v21 = *(_DWORD *)(a1 + 16) - *(_DWORD *)(a1 + 64);
              *a3 = v21;
              *a2 = *(_QWORD *)(a1 + 192);
              v14 = v21;
              *(_QWORD *)(a1 + 192) += v21;
              *(_QWORD *)(a1 + 200) = 0;
              v13 = *(_QWORD *)(a1 + 216);
              break;
            default:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Unknown error in ZlibDecompressionStream::Next");
              goto LABEL_33;
          }
          goto LABEL_27;
        }
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Bad inflateReset in ZlibDecompressionStream::Next");
    }
    else
    {
      if (v7 == 3)
      {
        *a2 = v9;
        *a3 = v12;
        v13 = *(_QWORD *)(a1 + 216);
        *(_QWORD *)(a1 + 192) = v13 + v12;
        *(_QWORD *)(a1 + 200) = 0;
        v14 = (int)v12;
LABEL_27:
        *(_QWORD *)(a1 + 208) -= v12;
        *(_QWORD *)(a1 + 216) = v13 + v12;
        *(_QWORD *)(a1 + 232) += v14;
        return 1;
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Unknown compression state in ZlibDecompressionStream::Next");
    }
LABEL_33:
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  *a2 = *(_QWORD *)(a1 + 192);
  *a3 = v6;
  *(_QWORD *)(a1 + 192) += v6;
  *(_QWORD *)(a1 + 200) = 0;
  return 1;
}

void sub_1D4B2AB00(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2AB28(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;

  result = sub_1D4B2C968(a1, 0);
  if (*(_DWORD *)(a1 + 184) == 4)
  {
    v3 = 0;
  }
  else
  {
    v4 = result;
    v5 = sub_1D4B2C968(a1, 1) << 8;
    result = sub_1D4B2C968(a1, 1);
    if ((v4 & 1) != 0)
      v6 = 3;
    else
      v6 = 1;
    *(_DWORD *)(a1 + 184) = v6;
    v3 = (v5 | ((_DWORD)result << 16) | v4) >> 1;
  }
  *(_QWORD *)(a1 + 208) = v3;
  return result;
}

uint64_t sub_1D4B2ABA8(uint64_t a1, int a2)
{
  _QWORD *v4;
  uint64_t result;
  std::runtime_error *exception;
  int v7;

  v7 = 0;
  v4 = (_QWORD *)(a1 + 216);
  result = (*(uint64_t (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), a1 + 216, &v7);
  if ((result & 1) != 0)
  {
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a1 + 216) + v7;
  }
  else
  {
    if (a2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_1D4B2D1F0(exception, "Read past EOF in ZlibDecompressionStream::readBuffer");
      __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    *(_DWORD *)(a1 + 184) = 4;
    *v4 = 0;
    *(_QWORD *)(a1 + 224) = 0;
  }
  return result;
}

void sub_1D4B2AC50(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B2AC64(_QWORD *result, int a2)
{
  uint64_t v2;
  std::logic_error *exception;

  v2 = result[24];
  if (!v2 || result[25])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Backup without previous Next in ZlibDecompressionStream");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  result[24] = v2 - a2;
  result[25] = a2;
  result[29] -= a2;
  return result;
}

void sub_1D4B2ACD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2ACE8(_QWORD *a1, int a2)
{
  int v2;
  BOOL v4;
  int v6;
  uint64_t v7;

  a1[29] += a2;
  if (a2 >= 1)
  {
    v2 = a2;
    while (1)
    {
      v7 = 0;
      v6 = 0;
      if (((*(uint64_t (**)(_QWORD *, uint64_t *, int *))(*a1 + 16))(a1, &v7, &v6) & 1) == 0)
        return 0;
      if (v6 > v2)
        break;
      v4 = __OFSUB__(v2, v6);
      v2 -= v6;
      if ((v2 < 0) ^ v4 | (v2 == 0))
        return 1;
    }
    (*(void (**)(_QWORD *, _QWORD))(*a1 + 24))(a1, (v6 - v2));
  }
  return 1;
}

uint64_t sub_1D4B2AD7C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 232);
}

uint64_t sub_1D4B2AD84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  std::runtime_error *exception;

  *(_DWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 232) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
  v4 = sub_1D4B019F4(a2);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v4);
  if ((result & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Bad skip in ZlibDecompressionStream::seek");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return result;
}

void sub_1D4B2AE28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2AE3C(uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  sub_1D4B01C34((uint64_t)v9);
  v2 = sub_1D4B02240(v9, (uint64_t)"zlib(", 5);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 24) + 56))(__p);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  v5 = sub_1D4B02240(v2, (uint64_t)v3, v4);
  sub_1D4B02240(v5, (uint64_t)")", 1);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v11);
}

void sub_1D4B2AF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1D4B01D20((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2AF84(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1E98490A0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a4;
  sub_1D4B2EFDC((_QWORD *)(a1 + 24), a4, a3);
  sub_1D4B2EFDC((_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 16), a3);
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  v7 = *a2;
  *a2 = 0;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

void sub_1D4B2B014(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  sub_1D4B2F630(v2);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2B050(uint64_t a1, char **a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v10;
  char *v11;
  size_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  const void *v18;
  size_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a1 + 120);
  if (v6)
  {
    *a2 = *(char **)(a1 + 112);
    *a3 = v6;
    v7 = *(_QWORD *)(a1 + 112) + v6;
    *(_QWORD *)(a1 + 152) += v6;
    *(_QWORD *)(a1 + 112) = v7;
    *(_QWORD *)(a1 + 120) = 0;
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 104);
    if (!v8 || !*(_QWORD *)(a1 + 128))
    {
      sub_1D4B2B234(a1);
      v8 = *(_DWORD *)(a1 + 104);
    }
    if (v8 == 4)
      return 0;
    v11 = *(char **)(a1 + 136);
    v10 = *(char **)(a1 + 144);
    if (v11 == v10)
    {
      sub_1D4B2B2B4(a1, 1);
      v11 = *(char **)(a1 + 136);
      v10 = *(char **)(a1 + 144);
      v8 = *(_DWORD *)(a1 + 104);
    }
    v12 = v10 - v11;
    v13 = *(_QWORD *)(a1 + 128);
    if (v13 >= v12)
      v14 = v12;
    else
      v14 = *(_QWORD *)(a1 + 128);
    if (v8 == 1)
    {
      if (v13 <= v12)
      {
        *(_QWORD *)(a1 + 136) = &v11[v14];
      }
      else
      {
        if (*(_QWORD *)(a1 + 56) < v13)
        {
          sub_1D4B2EF9C(a1 + 24, *(_QWORD *)(a1 + 128));
          v11 = *(char **)(a1 + 136);
        }
        memcpy(*(void **)(a1 + 40), v11, v14);
        v17 = *(_QWORD *)(a1 + 128);
        *(_QWORD *)(a1 + 136) += v14;
        v11 = *(char **)(a1 + 40);
        while (v14 < v17)
        {
          sub_1D4B2B2B4(a1, 1);
          v18 = *(const void **)(a1 + 136);
          if (*(_QWORD *)(a1 + 128) - v14 >= *(_QWORD *)(a1 + 144) - (_QWORD)v18)
            v19 = *(_QWORD *)(a1 + 144) - (_QWORD)v18;
          else
            v19 = *(_QWORD *)(a1 + 128) - v14;
          memcpy((void *)(*(_QWORD *)(a1 + 40) + v14), v18, v19);
          v14 += v19;
          v17 = *(_QWORD *)(a1 + 128);
          *(_QWORD *)(a1 + 136) += v19;
        }
      }
      v16 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a1 + 64))(a1, v11);
      *(_DWORD *)(a1 + 104) = 0;
      *a2 = *(char **)(a1 + 80);
      *a3 = v16;
      v20 = *(_QWORD *)(a1 + 80) + v16;
      *(_QWORD *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 128) = 0;
      *(_QWORD *)(a1 + 112) = v20;
    }
    else if (v8 == 3)
    {
      *a2 = v11;
      *a3 = v14;
      v15 = *(_QWORD *)(a1 + 136) + v14;
      *(_QWORD *)(a1 + 112) = v15;
      *(_QWORD *)(a1 + 120) = 0;
      *(_QWORD *)(a1 + 128) = v13 - v14;
      *(_QWORD *)(a1 + 136) = v15;
      LODWORD(v16) = v14;
    }
    else
    {
      LODWORD(v16) = *a3;
    }
    *(_QWORD *)(a1 + 152) += (int)v16;
  }
  return 1;
}

uint64_t sub_1D4B2B234(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  unsigned int v5;
  int v6;

  result = sub_1D4B2C9BC(a1, 0);
  if (*(_DWORD *)(a1 + 104) == 4)
  {
    v3 = 0;
  }
  else
  {
    v4 = result;
    v5 = sub_1D4B2C9BC(a1, 1) << 8;
    result = sub_1D4B2C9BC(a1, 1);
    if ((v4 & 1) != 0)
      v6 = 3;
    else
      v6 = 1;
    *(_DWORD *)(a1 + 104) = v6;
    v3 = (v5 | ((_DWORD)result << 16) | v4) >> 1;
  }
  *(_QWORD *)(a1 + 128) = v3;
  return result;
}

uint64_t sub_1D4B2B2B4(uint64_t a1, int a2)
{
  _QWORD *v4;
  uint64_t result;
  std::runtime_error *exception;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;
  int v11;

  v11 = 0;
  v4 = (_QWORD *)(a1 + 136);
  result = (*(uint64_t (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a1 + 136, &v11);
  if ((result & 1) != 0)
  {
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a1 + 136) + v11;
  }
  else
  {
    if (a2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 56))(&v9, a1);
      v7 = std::string::append(&v9, "read past EOF");
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      sub_1D4B2D1D0(exception, &v10);
      __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    *(_DWORD *)(a1 + 104) = 4;
    *v4 = 0;
    *(_QWORD *)(a1 + 144) = 0;
  }
  return result;
}

void sub_1D4B2B3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

_QWORD *sub_1D4B2B404(_QWORD *result, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  std::logic_error *exception;
  std::string *v5;
  __int128 v6;
  std::string v7;
  std::string v8;

  v2 = result;
  v3 = result[14];
  if (!v3 || result[15])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(std::string *__return_ptr, _QWORD *))(*v2 + 56))(&v7, v2);
    v5 = std::string::insert(&v7, 0, "Backup without previous Next in ");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v8.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v8);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  result[14] = v3 - a2;
  result[15] = a2;
  result[19] -= a2;
  return result;
}

void sub_1D4B2B4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_1D4B2B534(_QWORD *a1, int a2)
{
  int v2;
  BOOL v4;
  int v6;
  uint64_t v7;

  a1[19] += a2;
  if (a2 >= 1)
  {
    v2 = a2;
    while (1)
    {
      v7 = 0;
      v6 = 0;
      if (((*(uint64_t (**)(_QWORD *, uint64_t *, int *))(*a1 + 16))(a1, &v7, &v6) & 1) == 0)
        return 0;
      if (v6 > v2)
        break;
      v4 = __OFSUB__(v2, v6);
      v2 -= v6;
      if ((v2 < 0) ^ v4 | (v2 == 0))
        return 1;
    }
    (*(void (**)(_QWORD *, _QWORD))(*a1 + 24))(a1, (v6 - v2));
  }
  return 1;
}

uint64_t sub_1D4B2B5C8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 152);
}

uint64_t sub_1D4B2B5D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  std::runtime_error *exception;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;

  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v4 = sub_1D4B019F4(a2);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v4);
  if ((result & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 56))(&v9, a1);
    v7 = std::string::insert(&v9, 0, "Bad skip in ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_1D4B2D1D0(exception, &v10);
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return result;
}

void sub_1D4B2B6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

unint64_t sub_1D4B2B71C(uint64_t a1, _BYTE *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  std::logic_error *exception;
  struct type_info *v11;
  void (__cdecl *v12)(std::runtime_error *__hidden);
  unint64_t v13;

  v13 = 0;
  if ((sub_1D4BAC4B8(a2, a3, &v13) & 1) == 0)
    goto LABEL_7;
  if (v13 > a5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Snappy length exceeds block size");
    v11 = (struct type_info *)MEMORY[0x1E0DE4E70];
    v12 = (void (__cdecl *)(std::runtime_error *__hidden))MEMORY[0x1E0DE42A0];
    goto LABEL_8;
  }
  if (!sub_1D4BAC784((uint64_t)a2, a3, a4))
  {
LABEL_7:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0((std::runtime_error *)exception, "SnappyDecompressionStream choked on corrupt input");
    v11 = (struct type_info *)&unk_1E9845FC8;
    v12 = std::runtime_error::~runtime_error;
LABEL_8:
    __cxa_throw(exception, v11, (void (*)(void *))v12);
  }
  return v13;
}

void sub_1D4B2B808(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_1D4B2B824(uint64_t a1, unint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  return sub_1D4B2E4BC(a2, a2 + a3, a4, (unint64_t)&a4[a5]);
}

uint64_t sub_1D4B2B83C(uint64_t a1, unsigned __int8 *a2, int a3, char *__dst, int a5)
{
  uint64_t result;
  std::runtime_error *exception;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;

  LODWORD(result) = sub_1D4B01668(a2, __dst, a3, a5);
  if ((result & 0x80000000) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 56))(&v10, a1);
    v8 = std::string::append(&v10, " - failed to decompress");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    sub_1D4B2D1D0(exception, &v11);
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return result;
}

void sub_1D4B2B8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_1D4B2B958(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  char *v8;
  int v9;
  const void **v10;
  char *v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  unint64_t v19;
  std::logic_error *exception;

  if (*(_DWORD *)(a1 + 88))
  {
    sub_1D4B2A250(a1);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    v7 = *(int *)(a1 + 88);
    v8 = (char *)(*(_QWORD *)(a1 + 80) + *(int *)(a1 + 92));
    if (v6 >= v7)
    {
      *(v8 - 3) = (2 * v7) | 1;
      *(v8 - 2) = v7 >> 7;
      *(v8 - 1) = v7 >> 15;
      v10 = (const void **)(a1 + 48);
      v9 = *(_DWORD *)(a1 + 88);
    }
    else
    {
      v9 = v6;
      *(_WORD *)(v8 - 3) = __PAIR16__((2 * v6) >> 56, 2 * v6);
      *(v8 - 1) = v6 >> 15;
      v10 = (const void **)(a1 + 120);
    }
    if (v9 >= 1)
    {
      v11 = (char *)*v10;
      v12 = (int *)(a1 + 96);
      v13 = *(_DWORD *)(a1 + 92);
      do
      {
        v14 = *v12;
        if (v13 == *v12)
        {
          if ((sub_1D4B02794(a1, (_QWORD *)(a1 + 80), (_DWORD *)(a1 + 96)) & 1) == 0)
          {
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Failed to get next output buffer from output stream.");
LABEL_19:
            __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
          }
          v13 = 0;
          *(_DWORD *)(a1 + 92) = 0;
          v8 = *(char **)(a1 + 80);
          v14 = *(_DWORD *)(a1 + 96);
        }
        else if (v13 > v14)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Write to an out-of-bound place!");
          goto LABEL_19;
        }
        v15 = v14 - v13;
        if (v15 >= v9)
          v16 = v9;
        else
          v16 = v15;
        memcpy(v8, v11, v16);
        v13 = *(_DWORD *)(a1 + 92) + v16;
        *(_DWORD *)(a1 + 92) = v13;
        v11 += v16;
        v8 += v16;
        v17 = __OFSUB__(v9, v16);
        v9 -= v16;
      }
      while (!((v9 < 0) ^ v17 | (v9 == 0)));
    }
  }
  *a2 = *(_QWORD *)(a1 + 48);
  v18 = *(_DWORD *)(a1 + 56);
  *a3 = v18;
  *(_DWORD *)(a1 + 88) = v18;
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  sub_1D4B2EF9C(a1 + 104, v19);
  return 1;
}

void sub_1D4B2BB24(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2BB3C(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

unint64_t sub_1D4B2BB68(uint64_t a1)
{
  return sub_1D4B533D8(*(_QWORD *)(a1 + 144), *(char **)(a1 + 120), *(_QWORD *)(a1 + 128), *(char **)(a1 + 48), *(int *)(a1 + 88), *(_DWORD *)(a1 + 72));
}

void sub_1D4B2BB84(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error *exception;
  __int128 v17;

  sub_1D4B2CFE8();
  v2 = (_QWORD *)off_1EFEC6268();
  v17 = 0uLL;
  v3 = (std::__shared_weak_count *)v2[1];
  if (v3)
  {
    *((_QWORD *)&v17 + 1) = std::__shared_weak_count::lock(v3);
    if (*((_QWORD *)&v17 + 1))
      *(_QWORD *)&v17 = *v2;
  }
  v4 = (_QWORD *)(a1 + 144);
  sub_1D4B2BD10((uint64_t)v4, &v17);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (!*v4)
  {
    v8 = sub_1D4B514D8();
    sub_1D4B2CE30(&v17, v8, (uint64_t)sub_1D4B515C4);
    sub_1D4B2CFE8();
    v9 = v17;
    if (*((_QWORD *)&v17 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 16);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = (std::__shared_weak_count *)v2[1];
    *(_OWORD *)v2 = v9;
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
    sub_1D4B1B648(v4, (uint64_t *)&v17);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (!*v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Error while calling ZSTD_createCCtx() for zstd.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
  }
}

void sub_1D4B2BCFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2BD10(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t sub_1D4B2BD74(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t sub_1D4B2BDA0(uint64_t a1, unint64_t a2, size_t a3, char *a4, uint64_t a5)
{
  return sub_1D4B95E30(*(_QWORD **)(a1 + 160), a4, a5, a2, a3);
}

void sub_1D4B2BDC0(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  char *v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::runtime_error *exception;
  __int128 v17;

  sub_1D4B2CFE8();
  v2 = (_QWORD *)off_1EFEC6280();
  v17 = 0uLL;
  v3 = (std::__shared_weak_count *)v2[1];
  if (v3)
  {
    *((_QWORD *)&v17 + 1) = std::__shared_weak_count::lock(v3);
    if (*((_QWORD *)&v17 + 1))
      *(_QWORD *)&v17 = *v2;
  }
  v4 = (_QWORD *)(a1 + 160);
  sub_1D4B2BD10((uint64_t)v4, &v17);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (!*v4)
  {
    v8 = sub_1D4B95398();
    sub_1D4B2CF0C(&v17, (uint64_t)v8, (uint64_t)sub_1D4B953A4);
    sub_1D4B2CFE8();
    v9 = v17;
    if (*((_QWORD *)&v17 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 16);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = (std::__shared_weak_count *)v2[1];
    *(_OWORD *)v2 = v9;
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
    sub_1D4B1B648(v4, (uint64_t *)&v17);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (!*v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Error while calling ZSTD_createDCtx() for zstd.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
    }
  }
}

void sub_1D4B2BF38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2BF4C@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  _QWORD *v12;
  uint64_t result;
  int v14;
  int v15;
  std::logic_error *exception;

  if (a1 == 5)
  {
    if (a3)
      v14 = 3;
    else
      v14 = 1;
    v12 = operator new(0xA0uLL);
    result = sub_1D4B2CA10((uint64_t)v12, a2, v14, a4, a5, a6);
  }
  else if (a1 == 1)
  {
    if (a3)
      v15 = -1;
    else
      v15 = 2;
    v12 = operator new(0xD8uLL);
    result = sub_1D4B2A3C8((uint64_t)v12, a2, v15, a4, a5, a6);
  }
  else
  {
    if (a1)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_1D4B2D198(exception, "compression codec");
      __cxa_throw(exception, (struct type_info *)&unk_1E9846428, (void (*)(void *))std::logic_error::~logic_error);
    }
    v12 = operator new(0x20uLL);
    result = (uint64_t)sub_1D4B026C4(v12, a6, a2, a4, a5);
  }
  *a7 = v12;
  return result;
}

void sub_1D4B2C060(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2C08C@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::logic_error *exception;
  std::string v21;
  _QWORD v22[33];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  switch((int)result)
  {
    case 0:
      v9 = *a2;
      *a2 = 0;
      *a5 = v9;
      return result;
    case 1:
      v16 = operator new(0xF0uLL);
      v17 = *a2;
      *a2 = 0;
      v27 = v17;
      sub_1D4B2A608((uint64_t)v16, &v27, a3, a4);
      *a5 = (uint64_t)v16;
      result = v27;
      if (v27)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      return result;
    case 2:
      v12 = operator new(0xA0uLL);
      v13 = *a2;
      *a2 = 0;
      v26 = v13;
      sub_1D4B2CB20(v12, &v26, a3, a4);
      *a5 = (uint64_t)v12;
      result = v26;
      v26 = 0;
      if (!result)
        return result;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    case 3:
      v14 = operator new(0xA0uLL);
      v15 = *a2;
      *a2 = 0;
      v25 = v15;
      sub_1D4B2CB9C(v14, &v25, a3, a4);
      *a5 = (uint64_t)v14;
      result = v25;
      v25 = 0;
      if (!result)
        return result;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    case 4:
      v10 = operator new(0xA0uLL);
      v11 = *a2;
      *a2 = 0;
      v24 = v11;
      sub_1D4B2CC18(v10, &v24, a3, a4);
      *a5 = (uint64_t)v10;
      result = v24;
      v24 = 0;
      if (!result)
        return result;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    case 5:
      v18 = operator new(0xB0uLL);
      v19 = *a2;
      *a2 = 0;
      v23 = v19;
      sub_1D4B2CC94(v18, &v23, a3, a4);
      *a5 = (uint64_t)v18;
      result = v23;
      v23 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return result;
    default:
      sub_1D4B01C34((uint64_t)v22);
      sub_1D4B02240(v22, (uint64_t)"Unknown compression codec ", 26);
      std::ostream::operator<<();
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      sub_1D4B2D178(exception, &v21);
      __cxa_throw(exception, (struct type_info *)&unk_1E9846428, (void (*)(void *))std::logic_error::~logic_error);
  }
}

void sub_1D4B2C2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_1D4B01D20((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t sub_1D4B2C37C()
{
  return 1;
}

void sub_1D4B2C388(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B2CD90(a1);
  operator delete(v1);
}

void sub_1D4B2C3A0(_QWORD *a1)
{
  void *v1;

  v1 = (void *)sub_1D4B2CD40(a1);
  operator delete(v1);
}

uint64_t sub_1D4B2C3B4(uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  sub_1D4B01C34((uint64_t)v9);
  v2 = sub_1D4B02240(v9, (uint64_t)"snappy(", 7);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 8) + 56))(__p);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  v5 = sub_1D4B02240(v2, (uint64_t)v3, v4);
  sub_1D4B02240(v5, (uint64_t)")", 1);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v11);
}

void sub_1D4B2C4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1D4B01D20((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2C4FC(uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  sub_1D4B01C34((uint64_t)v9);
  v2 = sub_1D4B02240(v9, (uint64_t)"lzo(", 4);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 8) + 56))(__p);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  v5 = sub_1D4B02240(v2, (uint64_t)v3, v4);
  sub_1D4B02240(v5, (uint64_t)")", 1);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v11);
}

void sub_1D4B2C614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1D4B01D20((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2C644(uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  sub_1D4B01C34((uint64_t)v9);
  v2 = sub_1D4B02240(v9, (uint64_t)"lz4(", 4);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 8) + 56))(__p);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  v5 = sub_1D4B02240(v2, (uint64_t)v3, v4);
  sub_1D4B02240(v5, (uint64_t)")", 1);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v11);
}

void sub_1D4B2C75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1D4B01D20((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1D4B2C790(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B2CDD8(a1);
  operator delete(v1);
}

_QWORD *sub_1D4B2C7A4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "ZstdCompressionStream");
}

uint64_t sub_1D4B2C7B4(uint64_t a1)
{
  return sub_1D4B5149C(*(int *)(a1 + 88));
}

uint64_t sub_1D4B2C7BC(_QWORD *a1)
{
  *a1 = off_1E9848FF8;
  sub_1D4B1F3DC((uint64_t)(a1 + 20));
  return sub_1D4B2CD40(a1);
}

void sub_1D4B2C7EC(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E9848FF8;
  sub_1D4B1F3DC((uint64_t)(a1 + 20));
  v2 = (void *)sub_1D4B2CD40(a1);
  operator delete(v2);
}

uint64_t sub_1D4B2C820(uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  sub_1D4B01C34((uint64_t)v9);
  v2 = sub_1D4B02240(v9, (uint64_t)"zstd(", 5);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 8) + 56))(__p);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  v5 = sub_1D4B02240(v2, (uint64_t)v3, v4);
  sub_1D4B02240(v5, (uint64_t)")", 1);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v11);
}

void sub_1D4B2C938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1D4B01D20((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2C968(uint64_t a1, int a2)
{
  unsigned __int8 *v3;

  v3 = *(unsigned __int8 **)(a1 + 216);
  if (v3 == *(unsigned __int8 **)(a1 + 224))
  {
    sub_1D4B2ABA8(a1, a2);
    if (*(_DWORD *)(a1 + 184) == 4)
      return 0;
    v3 = *(unsigned __int8 **)(a1 + 216);
  }
  *(_QWORD *)(a1 + 216) = v3 + 1;
  return *v3;
}

uint64_t sub_1D4B2C9BC(uint64_t a1, int a2)
{
  unsigned __int8 *v3;

  v3 = *(unsigned __int8 **)(a1 + 136);
  if (v3 == *(unsigned __int8 **)(a1 + 144))
  {
    sub_1D4B2B2B4(a1, a2);
    if (*(_DWORD *)(a1 + 104) == 4)
      return 0;
    v3 = *(unsigned __int8 **)(a1 + 136);
  }
  *(_QWORD *)(a1 + 136) = v3 + 1;
  return *v3;
}

uint64_t sub_1D4B2CA10(uint64_t a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  _QWORD *v7;

  v7 = (_QWORD *)sub_1D4B2CA74(a1, a2, a3, a4, a5, a6);
  *v7 = off_1E9848CA0;
  v7[18] = 0;
  v7[19] = 0;
  sub_1D4B2BB84((uint64_t)v7);
  return a1;
}

void sub_1D4B2CA58(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_1D4B1F3DC(v2);
  sub_1D4B2CADC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2CA74(uint64_t a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  _QWORD *v8;

  v8 = (_QWORD *)sub_1D4B2A098(a1, a2, a3, a4, a5, a6);
  *v8 = off_1E9848D88;
  sub_1D4B2F560(v8 + 13, a6, 0);
  return a1;
}

void sub_1D4B2CAB4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_1E9848998;
  sub_1D4B2F824((uint64_t)(v1 + 4));
  sub_1D4B026C8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B2CADC(_QWORD *a1)
{
  *a1 = off_1E9848D88;
  sub_1D4B2F824((uint64_t)(a1 + 13));
  *a1 = off_1E9848998;
  sub_1D4B2F824((uint64_t)(a1 + 4));
  return sub_1D4B026C8(a1);
}

_QWORD *sub_1D4B2CB20(_QWORD *a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = *a2;
  *a2 = 0;
  v7 = v5;
  sub_1D4B2AF84((uint64_t)a1, &v7, a3, a4);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *a1 = &off_1E9849310;
  return a1;
}

void sub_1D4B2CB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4B2CB9C(_QWORD *a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = *a2;
  *a2 = 0;
  v7 = v5;
  sub_1D4B2AF84((uint64_t)a1, &v7, a3, a4);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *a1 = &off_1E9848F28;
  return a1;
}

void sub_1D4B2CBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4B2CC18(_QWORD *a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = *a2;
  *a2 = 0;
  v7 = v5;
  sub_1D4B2AF84((uint64_t)a1, &v7, a3, a4);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *a1 = &off_1E9848ED0;
  return a1;
}

void sub_1D4B2CC74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4B2CC94(_QWORD *a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = *a2;
  *a2 = 0;
  v7 = v5;
  sub_1D4B2AF84((uint64_t)a1, &v7, a3, a4);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *a1 = off_1E9848FF8;
  a1[20] = 0;
  a1[21] = 0;
  sub_1D4B2BDC0((uint64_t)a1);
  return a1;
}

void sub_1D4B2CD04(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  sub_1D4B1F3DC(v3);
  sub_1D4B2CD40(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2CD40(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E98490A0;
  sub_1D4B2F630(a1 + 8);
  sub_1D4B2F630(a1 + 3);
  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return nullsub_1(a1);
}

_QWORD *sub_1D4B2CD90(_QWORD *a1)
{
  *a1 = off_1E9848D18;
  sub_1D4BA5F68((uint64_t)(a1 + 13));
  *a1 = off_1E9848998;
  sub_1D4B2F824((uint64_t)(a1 + 4));
  return sub_1D4B026C8(a1);
}

_QWORD *sub_1D4B2CDD8(_QWORD *a1)
{
  *a1 = off_1E9848CA0;
  sub_1D4B1F3DC((uint64_t)(a1 + 18));
  *a1 = off_1E9848D88;
  sub_1D4B2F824((uint64_t)(a1 + 13));
  *a1 = off_1E9848998;
  sub_1D4B2F824((uint64_t)(a1 + 4));
  return sub_1D4B026C8(a1);
}

_QWORD *sub_1D4B2CE30(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  *a1 = a2;
  v6 = operator new(0x28uLL);
  *v6 = &unk_1E984AEB0;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = a2;
  v6[4] = a3;
  a1[1] = v6;
  return a1;
}

void sub_1D4B2CE88(void *a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  __cxa_begin_catch(a1);
  v1(v2);
  __cxa_rethrow();
}

void sub_1D4B2CE9C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2CEB0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1D4B2CECC(uint64_t a1, uint64_t a2)
{
  if (sub_1D4B1F350(a2, (uint64_t)&unk_1E98471C8))
    return a1 + 32;
  else
    return 0;
}

_QWORD *sub_1D4B2CF0C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  *a1 = a2;
  v6 = operator new(0x28uLL);
  *v6 = &unk_1E984AEE8;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = a2;
  v6[4] = a3;
  a1[1] = v6;
  return a1;
}

void sub_1D4B2CF64(void *a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  __cxa_begin_catch(a1);
  v1(v2);
  __cxa_rethrow();
}

void sub_1D4B2CF78(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2CF8C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1D4B2CFA8(uint64_t a1, uint64_t a2)
{
  if (sub_1D4B1F350(a2, (uint64_t)&unk_1E98471E8))
    return a1 + 32;
  else
    return 0;
}

void sub_1D4B2CFE8()
{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  void *v2;
  void *v3;

  if (!*(_BYTE *)off_1EFEC6298(&off_1EFEC6298))
  {
    *(_BYTE *)v0(v1) = 1;
    v2 = (void *)off_1EFEC6268();
    _tlv_atexit((void (__cdecl *)(void *))sub_1D4B2BB3C, v2);
    v3 = (void *)off_1EFEC6280();
    _tlv_atexit((void (__cdecl *)(void *))sub_1D4B2BD74, v3);
  }
}

std::logic_error *sub_1D4B2D178(std::logic_error *a1, const std::string *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)&off_1E9847FB8;
  return result;
}

std::logic_error *sub_1D4B2D198(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)&off_1E9847FB8;
  return result;
}

void sub_1D4B2D1BC(std::logic_error *a1)
{
  void *v1;

  std::logic_error::~logic_error(a1);
  operator delete(v1);
}

std::runtime_error *sub_1D4B2D1D0(std::runtime_error *a1, const std::string *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&off_1E9847380;
  return result;
}

std::runtime_error *sub_1D4B2D1F0(std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&off_1E9847380;
  return result;
}

void sub_1D4B2D218(std::runtime_error *a1)
{
  void *v1;

  std::runtime_error::~runtime_error(a1);
  operator delete(v1);
}

std::runtime_error *sub_1D4B2D22C(std::runtime_error *a1, const std::string *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&off_1E9847A30;
  return result;
}

std::runtime_error *sub_1D4B2D24C(std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&off_1E9847A30;
  return result;
}

void sub_1D4B2D270(std::runtime_error *a1)
{
  void *v1;

  std::runtime_error::~runtime_error(a1);
  operator delete(v1);
}

uint64_t *sub_1D4B2D284(uint64_t *a1, std::string *__str)
{
  std::string *v4;
  std::string::size_type size;
  int v6;
  std::string::size_type v7;
  std::string::size_type v8;
  uint64_t v9;
  std::string::size_type v10;
  std::string::size_type v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string __p;
  char v19;

  *a1 = 0;
  a1[1] = 0;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (!size)
      return a1;
    v4 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    v4 = __str;
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (!*((_BYTE *)&__str->__r_.__value_.__s + 23))
      return a1;
  }
  v6 = v4->__r_.__value_.__s.__data_[0];
  v7 = v6 == 45;
  if (size > v7)
  {
    while (1)
    {
      if (size - v7 >= 0x12)
        v8 = 18;
      else
        v8 = size - v7;
      std::string::basic_string(&__p, __str, v7, v8, (std::allocator<char> *)&v19);
      v9 = std::stoll(&__p, 0, 10);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v8)
        {
LABEL_12:
          v10 = v8;
          v11 = 1;
          do
          {
            v11 *= 10;
            --v10;
          }
          while (v10);
          goto LABEL_17;
        }
      }
      else if (v8)
      {
        goto LABEL_12;
      }
      v11 = 1;
LABEL_17:
      __p.__r_.__value_.__r.__words[0] = 0;
      __p.__r_.__value_.__l.__size_ = v11;
      sub_1D4B2D3EC(a1, (uint64_t *)&__p);
      v12 = a1[1];
      v13 = __CFADD__(v12, v9);
      v14 = v12 + v9;
      v15 = (v9 >> 63) + v13 + *a1;
      *a1 = v15;
      a1[1] = v14;
      v7 += v8;
      if (v7 >= size)
        goto LABEL_20;
    }
  }
  v15 = 0;
  v14 = 0;
LABEL_20:
  if (v6 == 45)
  {
    if (v14)
      v16 = ~v15;
    else
      v16 = -v15;
    *a1 = v16;
    a1[1] = -v14;
  }
  return a1;
}

void sub_1D4B2D3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4B2D3EC(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = result[1];
  v3 = *a2;
  v4 = a2[1];
  v5 = HIDWORD(v4) * (unint64_t)v2;
  v6 = v4 * (unint64_t)HIDWORD(v2)
     + v5
     + ((v4 * (unint64_t)v2) >> 32);
  *result = v3 * (unint64_t)v2
          + HIDWORD(v4) * (unint64_t)HIDWORD(v2)
          + v4 * (unint64_t)*result
          + HIDWORD(v6)
          + ((unint64_t)(HIDWORD(v2) * v3
                                            + v4 * HIDWORD(*result)
                                            + HIDWORD(v3) * v2
                                            + HIDWORD(v4) * *result) << 32)
          + ((unint64_t)(v6 < v5) << 32);
  result[1] = (v4 * v2) | ((unint64_t)v6 << 32);
  return result;
}

uint64_t sub_1D4B2D464(unint64_t *a1, _DWORD *a2, char *a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;

  v4 = *a1;
  v3 = a1[1];
  if ((*a1 & 0x8000000000000000) != 0)
  {
    v5 = 1;
    if (!v3)
    {
      v4 = -(uint64_t)v4;
      *a3 = 1;
      goto LABEL_11;
    }
    v3 = -(uint64_t)v3;
    v4 = ~v4;
  }
  else
  {
    v5 = 0;
  }
  *a3 = v5;
  if (!v4)
  {
    if (v3 < 0xFFFFFFFF)
    {
      if (v3)
      {
        *a2 = v3;
        return 1;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      *(_QWORD *)a2 = __ROR8__(v3, 32);
      return 2;
    }
  }
LABEL_11:
  if (HIDWORD(v4))
  {
    *a2 = HIDWORD(v4);
    a2[1] = v4;
    a2[2] = HIDWORD(v3);
    a2[3] = v3;
    return 4;
  }
  else
  {
    *a2 = v4;
    a2[1] = HIDWORD(v3);
    a2[2] = v3;
    return 3;
  }
}

int *sub_1D4B2D4F8(int *result, uint64_t a2, uint64_t a3)
{
  int *v3;
  int v4;
  uint64_t v5;
  int v6;

  if (a2 >= 1 && a3)
  {
    if ((unint64_t)a2 >= 2)
    {
      v3 = result + 1;
      v4 = *result;
      v5 = a2 - 1;
      do
      {
        v6 = v4 << a3;
        v4 = *v3;
        *(v3 - 1) = (*v3 >> (32 - a3)) | v6;
        ++v3;
        --v5;
      }
      while (v5);
    }
    result[a2 - 1] <<= a3;
  }
  return result;
}

_DWORD *sub_1D4B2D550(_DWORD *result, uint64_t a2, uint64_t a3)
{
  if (a2 >= 1 && a3)
  {
    if ((unint64_t)a2 >= 2)
    {
      do
        result[a2 - 1] = (result[a2 - 2] << (32 - a3)) | (result[a2 - 1] >> a3);
      while ((unint64_t)a2-- > 2);
    }
    *result >>= a3;
  }
  return result;
}

unint64_t *sub_1D4B2D5A4(unint64_t *result, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::logic_error *exception;

  switch(a3)
  {
    case 0:
      *result = 0;
      result[1] = 0;
      return result;
    case 1:
      v3 = *a2;
      goto LABEL_5;
    case 2:
      v3 = a2[1] | ((unint64_t)*a2 << 32);
LABEL_5:
      *result = 0;
      result[1] = v3;
      return result;
    case 3:
      v4 = *a2;
      v5 = a2[1];
      v6 = a2[2];
      goto LABEL_10;
    case 4:
      v4 = a2[1] | ((unint64_t)*a2 << 32);
      v5 = a2[2];
      v6 = a2[3];
      goto LABEL_10;
    case 5:
      if (*a2)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Can't build Int128 with 5 ints.");
LABEL_14:
        __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
      }
      v4 = a2[2] | ((unint64_t)a2[1] << 32);
      v5 = a2[3];
      v6 = a2[4];
LABEL_10:
      *result = v4;
      result[1] = v6 | (v5 << 32);
      return result;
    default:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Unsupported length for building Int128");
      goto LABEL_14;
  }
}

void sub_1D4B2D680(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2D698(unsigned int *a1, uint64_t a2, unsigned int a3, uint64_t *a4, int a5, int a6)
{
  unint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19[5];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a2 < 1)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v10 = v19;
    v11 = a2;
    do
    {
      v12 = *a1++;
      v13 = v12 | (v9 << 32);
      *v10++ = v13 / a3;
      v9 = v13 % a3;
      --v11;
    }
    while (v11);
  }
  v17 = 0;
  v18 = 0;
  sub_1D4B2D5A4((unint64_t *)&v17, v19, a2);
  *a4 = 0;
  a4[1] = v9;
  if (a5 != a6)
  {
    if (v18)
      v14 = ~v17;
    else
      v14 = -v17;
    v17 = v14;
    v18 = -v18;
  }
  if (a5)
  {
    if (v9)
      v15 = -1;
    else
      v15 = 0;
    *a4 = v15;
    a4[1] = -(uint64_t)v9;
  }
  return v17;
}

uint64_t sub_1D4B2D788(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::runtime_error *exception;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41[4];
  int v42[4];
  int v43;
  _DWORD v44[4];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v38 = 0;
  v43 = 0;
  v6 = sub_1D4B2D464(a1, v44, (char *)&v38 + 1);
  v7 = sub_1D4B2D464(a2, v42, (char *)&v38);
  if (v6 >= v7)
  {
    v9 = v7;
    v10 = v6 + 1;
    if (v7 == 1)
    {
      return sub_1D4B2D698((unsigned int *)&v43, v6 + 1, v42[0], a3, HIBYTE(v38), v38);
    }
    else
    {
      if (!v7)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        sub_1D4B2DA9C(exception, "Division by 0 in Int128");
        __cxa_throw(exception, (struct type_info *)off_1E9845870, MEMORY[0x1E0DE42B0]);
      }
      v11 = v10 - v7;
      v12 = v42[0];
      if (v42[0])
      {
        v13 = 32;
        do
        {
          --v13;
          v14 = v12 > 1;
          v12 >>= 1;
        }
        while (v14);
      }
      else
      {
        v13 = 32;
      }
      sub_1D4B2D4F8(v42, v7, v13);
      sub_1D4B2D4F8(&v43, v10, v13);
      if (v11 >= 1)
      {
        v15 = 0;
        v16 = v42[0];
        v17 = v42[1];
        v18 = &v43;
        do
        {
          v19 = v15;
          v20 = v44[v15++ - 1];
          v21 = v44[v15 - 1];
          if ((_DWORD)v20 == (_DWORD)v16)
            LODWORD(v22) = -1;
          else
            v22 = (v21 | (unint64_t)(v20 << 32)) / v16;
          v23 = (v21 - v22 * v16);
          do
          {
            if (v17 * (unint64_t)v22 <= (v44[v19 + 1] | (unint64_t)(v23 << 32)))
              break;
            LODWORD(v22) = v22 - 1;
            v23 = (v23 + v16);
          }
          while (v23 >= v16);
          if (v9)
          {
            v24 = 0;
            v25 = v9;
            do
            {
              v26 = v24 + v41[v25 + 3] * (unint64_t)v22;
              v27 = v18[v25];
              v28 = v27 >= v26;
              v18[v25] = v27 - v26;
              v24 = HIDWORD(v26);
              if (!v28)
                ++v24;
              v14 = v25-- <= 1;
            }
            while (!v14);
            v29 = v44[v19 - 1];
            v44[v19 - 1] = v29 - v24;
            if (v29 < v24)
            {
              v30 = 0;
              LODWORD(v22) = v22 - 1;
              v31 = v9;
              do
              {
                v32 = v30 + v41[v31 + 3] + v18[v31];
                v18[v31] = v32;
                v30 = HIDWORD(v32);
                v14 = v31-- <= 1;
              }
              while (!v14);
              v44[v19 - 1] += v30;
            }
          }
          v41[v19] = v22;
          ++v18;
        }
        while (v15 != v11);
      }
      sub_1D4B2D550(&v43, v10, v13);
      v39 = 0;
      v40 = 0;
      sub_1D4B2D5A4((unint64_t *)&v39, v41, v10 - v9);
      sub_1D4B2D5A4((unint64_t *)a3, (unsigned int *)&v43, v10);
      if ((HIBYTE(v38) != 0) != ((_BYTE)v38 != 0))
      {
        if (v40)
          v33 = ~v39;
        else
          v33 = -v39;
        v39 = v33;
        v40 = -v40;
      }
      if (HIBYTE(v38))
      {
        v34 = a3[1];
        v35 = -v34;
        if (v34)
          v36 = ~*a3;
        else
          v36 = -*a3;
        *a3 = v36;
        a3[1] = v35;
      }
      return v39;
    }
  }
  else
  {
    result = 0;
    *(_OWORD *)a3 = *(_OWORD *)a1;
  }
  return result;
}

void sub_1D4B2DA80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_1D4B2DA9C(std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
  return result;
}

uint64_t sub_1D4B2DAC0(unint64_t *a1)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD v16[11];
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  v21 = xmmword_1D4BD4EF0;
  v22 = xmmword_1D4BD4EE0;
  v19 = 0;
  v20 = 0;
  sub_1D4B177C0((uint64_t)v15);
  v13 = sub_1D4B2D788(a1, (unint64_t *)&v21, &v19);
  v14 = v2;
  v3 = (v13 | v2) != 0;
  if (v13 | v2)
  {
    sub_1D4B2DCD0(&v13);
    std::ostream::operator<<();
    if (v19 < 0)
    {
      if (v20)
        v4 = ~v19;
      else
        v4 = -v19;
      v19 = v4;
      v20 = -v20;
    }
  }
  v11 = 0;
  v12 = 0;
  v5 = sub_1D4B2D788((unint64_t *)&v19, (unint64_t *)&v22, &v11);
  v13 = v5;
  v14 = v6;
  if (v3)
  {
    *(_QWORD *)((char *)&v16[3] + *(_QWORD *)(v16[0] - 24)) = 18;
    v10 = 48;
    sub_1D4B01948(v16, &v10);
  }
  else
  {
    if (!(v5 | v6))
      goto LABEL_16;
    if (v11 < 0)
    {
      if (v12)
        v7 = ~v11;
      else
        v7 = -v11;
      v11 = v7;
      v12 = -v12;
    }
  }
  sub_1D4B2DCD0(&v13);
  std::ostream::operator<<();
  *(_QWORD *)((char *)&v16[3] + *(_QWORD *)(v16[0] - 24)) = 18;
  v10 = 48;
  sub_1D4B01948(v16, &v10);
LABEL_16:
  sub_1D4B2DCD0(&v11);
  std::ostream::operator<<();
  std::stringbuf::str();
  v15[0] = *MEMORY[0x1E0DE4F50];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v16[0] = v8;
  v16[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1D82646E0](&v18);
}

void sub_1D4B2DCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1D4B178EC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2DCD0(_QWORD *a1)
{
  uint64_t result;
  std::runtime_error *exception;

  if (!*a1)
  {
    result = a1[1];
    if ((result & 0x8000000000000000) == 0)
      return result;
LABEL_6:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2DA9C(exception, "Int128 too large to convert to long");
    __cxa_throw(exception, (struct type_info *)off_1E9845870, MEMORY[0x1E0DE42B0]);
  }
  if (*a1 != -1)
    goto LABEL_6;
  result = a1[1];
  if ((result & 0x8000000000000000) == 0)
    goto LABEL_6;
  return result;
}

void sub_1D4B2DD38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D4B2DD4C(unint64_t *a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  unint64_t v6;
  int v7;
  int v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *p_p;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  void *v18;
  std::string *v19;
  __int128 v20;
  int v21;
  int v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string __p;
  std::string v28;
  std::string v29;
  std::string __str;
  char v31;

  sub_1D4B2DAC0(a1);
  if (!a2)
  {
    *a3 = __str;
    memset(&__str, 0, sizeof(__str));
    goto LABEL_50;
  }
  v6 = *a1;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v7 = __str.__r_.__value_.__r.__words[1];
  if ((v6 & 0x8000000000000000) == 0)
  {
    v8 = v7 - a2;
    if (v7 > a2)
    {
      v9 = v8;
      std::string::basic_string(&v28, &__str, 0, v8, (std::allocator<char> *)&__p);
      v10 = std::string::append(&v28, ".");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string(&__p, &__str, v9, a2, (std::allocator<char> *)&v31);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      goto LABEL_21;
    }
    if (v7 == a2)
    {
      std::operator+<char>();
      goto LABEL_50;
    }
    sub_1D4BCA448(&v29, "0.");
    v21 = a2 - v7;
    if (v21 >= 1)
    {
      do
      {
        std::string::append(&v29, "0");
        --v21;
      }
      while (v21);
    }
    sub_1D4B2E160((const void **)&v29.__r_.__value_.__l.__data_, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)a3);
LABEL_47:
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_50;
    v18 = (void *)v29.__r_.__value_.__r.__words[0];
    goto LABEL_49;
  }
  if (v7 - 1 <= a2)
  {
    if (v7 - 1 == a2)
    {
      std::string::basic_string(&v29, &__str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v28);
      v19 = std::string::insert(&v29, 0, "-0.");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      a3->__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
    }
    else
    {
      sub_1D4BCA448(&v29, "-0.");
      if (v7 <= a2)
      {
        v22 = a2 - v7 + 1;
        do
        {
          std::string::append(&v29, "0");
          --v22;
        }
        while (v22);
      }
      std::string::basic_string(&v28, &__str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &v29;
      else
        v23 = (std::string *)v29.__r_.__value_.__r.__words[0];
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      else
        v24 = v29.__r_.__value_.__l.__size_;
      v25 = std::string::insert(&v28, 0, (const std::string::value_type *)v23, v24);
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      a3->__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
    }
    goto LABEL_47;
  }
  std::string::basic_string(&v28, &__str, 0, v7 - a2, (std::allocator<char> *)&__p);
  v14 = std::string::append(&v28, ".");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string(&__p, &__str, v7 - a2, a2, (std::allocator<char> *)&v31);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
LABEL_21:
  v16 = std::string::append(&v29, (const std::string::value_type *)p_p, size);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  a3->__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    v18 = (void *)v28.__r_.__value_.__r.__words[0];
LABEL_49:
    operator delete(v18);
  }
LABEL_50:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1D4B2E0A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4B2E160@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  result = sub_1D4B2E420(a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

uint64_t sub_1D4B2E228(uint64_t result, unint64_t a2, int a3, _BYTE *a4)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19[2];
  uint64_t v20;
  unint64_t v21;

  v20 = result;
  v21 = a2;
  *a4 = 0;
  v19[0] = 0;
  v19[1] = 0;
  if (a3 >= 1)
  {
    v5 = a3;
    while (1)
    {
      if (v5 >= 0x12)
        v6 = 18;
      else
        v6 = v5;
      v7 = v20;
      if (v20)
      {
        if (v20 < 1)
          goto LABEL_14;
      }
      else if (!v21)
      {
        goto LABEL_14;
      }
      v18 = xmmword_1D4BD4F00;
      v8 = qword_1D4BD4E40[v6];
      v16 = v8 >> 63;
      v17 = v8;
      v7 = sub_1D4B2D788((unint64_t *)&v18, (unint64_t *)&v16, v19);
      v10 = v7 < v20;
      if (v7 == v20)
      {
        if (v9 < v21)
          goto LABEL_25;
      }
      else
      {
        v7 = v20;
        if (v10)
        {
LABEL_25:
          *a4 = 1;
          return 0x7FFFFFFFFFFFFFFFLL;
        }
      }
LABEL_14:
      if (v7 && v7 < 0)
      {
        v18 = xmmword_1D4BD4F10;
        v11 = qword_1D4BD4E40[v6];
        v12 = v11 >> 63;
        v16 = v11 >> 63;
        v17 = v11;
        v14 = sub_1D4B2D788((unint64_t *)&v18, (unint64_t *)&v16, v19);
        if (v14 == v20)
        {
          if (v15 > v21)
            goto LABEL_24;
        }
        else if (v14 > v20)
        {
LABEL_24:
          *a4 = 1;
          return 0x8000000000000000;
        }
      }
      else
      {
        v11 = qword_1D4BD4E40[v6];
        v12 = v11 >> 63;
      }
      *(_QWORD *)&v18 = v12;
      *((_QWORD *)&v18 + 1) = v11;
      sub_1D4B2D3EC(&v20, (uint64_t *)&v18);
      v13 = __OFSUB__(v5, v6);
      v5 -= v6;
      if ((v5 < 0) ^ v13 | (v5 == 0))
        return v20;
    }
  }
  return result;
}

uint64_t sub_1D4B2E3A8(uint64_t result, uint64_t a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8[2];
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;

  v10 = result;
  v11 = a2;
  v9[0] = 0;
  v9[1] = 0;
  if (a3 >= 1)
  {
    v3 = a3;
    do
    {
      if (v3 >= 0x12)
        v4 = 18;
      else
        v4 = v3;
      v5 = qword_1D4BD4E40[v4];
      v8[0] = v5 >> 63;
      v8[1] = v5;
      result = sub_1D4B2D788((unint64_t *)&v10, v8, v9);
      v10 = result;
      v11 = v6;
      v7 = __OFSUB__(v3, v4);
      v3 -= v4;
    }
    while (!((v3 < 0) ^ v7 | (v3 == 0)));
  }
  return result;
}

uint64_t sub_1D4B2E420(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_1D4B02588();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void sub_1D4B2E4A8(std::runtime_error *a1)
{
  void *v1;

  std::runtime_error::~runtime_error(a1);
  operator delete(v1);
}

char *sub_1D4B2E4BC(unint64_t a1, unint64_t a2, char *a3, unint64_t a4)
{
  char *v4;
  unint64_t v6;
  char *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  char v12;
  int *v13;
  uint64_t v14;
  int v15;
  unsigned __int16 *v16;
  unint64_t i;
  uint64_t v18;
  unsigned int v19;
  unsigned __int16 *v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned __int16 *v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  char v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  int *v58;
  unint64_t v59;
  void *v60;
  unsigned __int16 *v62;
  std::runtime_error *exception;
  std::string *v64;
  __int128 v65;
  unint64_t v66;
  char *v67;
  std::string v68;
  __int128 v69;
  std::string::size_type v70;

  if (a1 == a2)
    return 0;
  v4 = a3;
  v6 = a1;
  v7 = a3;
  if (v6 < a2)
  {
    v8 = 0;
    v9 = a4 - 8;
    v10 = a2 - 8;
    v11 = 255 * a2 - 248;
    v12 = 1;
    v13 = (int *)&unk_1D4BD4F40;
    v66 = v6;
    v7 = a3;
    while (1)
    {
      v14 = 0;
      v15 = v11 - 255 * v6;
      v16 = (unsigned __int16 *)(v6 + 2);
      for (i = a2 - 1 - v6; ; i -= 3)
      {
        v18 = v6 + v14;
        v19 = *(unsigned __int8 *)(v6 + v14);
        if (v19 != 17)
          break;
        if (v18 + 3 > a2 && *(_WORD *)(v18 + 1))
          goto LABEL_91;
        v8 = 0;
        v14 += 3;
        v15 -= 765;
        v16 = (unsigned __int16 *)((char *)v16 + 3);
        v12 = 1;
        if (v6 + v14 >= a2)
          return (char *)(v7 - v4);
      }
      v20 = (unsigned __int16 *)(v18 + 1);
      if ((v19 & 0xF0) != 0)
      {
        if ((v12 & 1) != 0)
        {
          v8 = v19 - 17;
        }
        else
        {
          if ((v19 & 0xF0) == 0x10)
          {
            v24 = v19 & 7;
            if ((v19 & 7) == 0)
            {
              if ((unint64_t)v20 >= a2)
              {
                v27 = 0;
                v15 = 7;
              }
              else
              {
                v25 = 0;
                v26 = 7;
                while (1)
                {
                  v27 = *((unsigned __int8 *)v16 - 1);
                  if (*((_BYTE *)v16 - 1))
                    break;
                  v16 = (unsigned __int16 *)((char *)v16 + 1);
                  v26 += 255;
                  if (i == ++v25)
                  {
                    v27 = 0;
                    v20 = (unsigned __int16 *)a2;
                    goto LABEL_45;
                  }
                }
                v15 = v26;
                v20 = v16;
              }
LABEL_45:
              v24 = v27 + v15;
            }
            v38 = v20 + 1;
            if ((unint64_t)(v20 + 1) > a2)
              goto LABEL_93;
            v39 = *v20;
            if ((v19 & 8) != 0)
              v40 = 0x7FFF;
            else
              v40 = 0x3FFF;
            v22 = v40 + (v39 >> 2);
          }
          else
          {
            if ((v19 & 0xE0) != 0x20)
            {
              if (v19 < 0x40)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                sub_1D4B2EB9C();
                v64 = std::string::insert(&v68, 0, "Invalid LZO command ");
                v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
                v70 = v64->__r_.__value_.__r.__words[2];
                v69 = v65;
                v64->__r_.__value_.__l.__size_ = 0;
                v64->__r_.__value_.__r.__words[2] = 0;
                v64->__r_.__value_.__r.__words[0] = 0;
                sub_1D4B2EE28(exception);
                __cxa_throw(exception, (struct type_info *)&unk_1E9846918, (void (*)(void *))j_std::runtime_error::~runtime_error);
              }
              if ((unint64_t)v20 >= a2)
              {
LABEL_91:
                v60 = __cxa_allocate_exception(0x10uLL);
                sub_1D4B2EB98(v60, v6 - v66 + v14 + 1);
                goto LABEL_92;
              }
              v23 = (v19 >> 5) + 1;
              v37 = *(unsigned __int8 *)v20;
              v20 = (unsigned __int16 *)(v6 + v14 + 2);
              v22 = (v19 >> 2) & 7 | (8 * v37);
              v8 = v19 & 3;
              goto LABEL_60;
            }
            v24 = v19 & 0x1F;
            if ((v19 & 0x1F) == 0)
            {
              if ((unint64_t)v20 >= a2)
              {
                v30 = 0;
                v28 = 31;
              }
              else
              {
                v28 = v15 + 24;
                v29 = 31;
                while (1)
                {
                  v30 = *((unsigned __int8 *)v16 - 1);
                  if (*((_BYTE *)v16 - 1))
                    break;
                  v16 = (unsigned __int16 *)((char *)v16 + 1);
                  v29 += 255;
                  if (!--i)
                  {
                    v30 = 0;
                    v20 = (unsigned __int16 *)a2;
                    goto LABEL_56;
                  }
                }
                v28 = v29;
                v20 = v16;
              }
LABEL_56:
              v24 = v30 + v28;
            }
            v38 = v20 + 1;
            if ((unint64_t)(v20 + 1) > a2)
            {
LABEL_93:
              v62 = v20;
              v60 = __cxa_allocate_exception(0x10uLL);
              sub_1D4B2EB98(v60, (char *)v62 - v66);
LABEL_92:
              __cxa_throw(v60, (struct type_info *)&unk_1E9846918, (void (*)(void *))j_std::runtime_error::~runtime_error);
            }
            v39 = *v20;
            v22 = v39 >> 2;
          }
          v20 = v38;
          v8 = v39 & 3;
          v23 = v24 + 2;
          if (v24 != -2)
            goto LABEL_60;
        }
      }
      else
      {
        if (v8)
        {
          if (v8 > 3)
          {
            if ((unint64_t)v20 >= a2)
              goto LABEL_91;
            v36 = *(unsigned __int8 *)v20;
            v20 = (unsigned __int16 *)(v6 + v14 + 2);
            v22 = (v19 >> 2) & 3 | (4 * v36);
            v8 = v19 & 3;
            v23 = 2;
          }
          else
          {
            if ((unint64_t)v20 >= a2)
              goto LABEL_91;
            v21 = (v19 >> 2) & 3 | (4 * *(unsigned __int8 *)v20);
            v20 = (unsigned __int16 *)(v6 + v14 + 2);
            v22 = v21 | 0x800;
            v8 = v19 & 3;
            v23 = 3;
          }
LABEL_60:
          v41 = v22 + 1;
          v42 = &v7[-v41];
          v43 = &v7[v23];
          if (&v7[-v41] < v4 || (unint64_t)v43 > a4)
            goto LABEL_93;
          if ((unint64_t)v7 <= v9)
          {
            if (v22 > 6)
            {
              v49 = *(_QWORD *)v42;
              v48 = v42 + 8;
              *(_QWORD *)v7 = v49;
            }
            else
            {
              v45 = v13[v41];
              v46 = dword_1D4BD4F60[v41];
              *v7 = *v42;
              v7[1] = v42[1];
              v7[2] = v42[2];
              v7[3] = v42[3];
              v47 = &v42[v45];
              *((_DWORD *)v7 + 1) = *(_DWORD *)v47;
              v48 = &v47[-v46];
            }
            v50 = v7 + 8;
            if ((unint64_t)v43 >= v9)
            {
              while ((unint64_t)v50 < v9)
              {
                v52 = *(_QWORD *)v48;
                v48 += 8;
                *v50++ = v52;
              }
              if (v50 < (_QWORD *)v43)
              {
                v53 = &v7[v23] - (char *)v50;
                do
                {
                  v54 = *v48++;
                  *(_BYTE *)v50 = v54;
                  v50 = (_QWORD *)((char *)v50 + 1);
                  --v53;
                }
                while (v53);
              }
            }
            else if (v23 >= 9)
            {
              do
              {
                v51 = *(_QWORD *)v48;
                v48 += 8;
                *v50++ = v51;
              }
              while (v50 < (_QWORD *)v43);
            }
          }
          else if (v23 >= 1)
          {
            do
            {
              *v7 = v7[-v41];
              ++v7;
            }
            while (v7 < v43);
          }
          v7 = v43;
          goto LABEL_81;
        }
        v31 = v19 & 0xF;
        if (!v31)
        {
          if ((unint64_t)v20 >= a2)
          {
            v35 = 0;
            v33 = 15;
          }
          else
          {
            v32 = 0;
            v33 = v15 + 8;
            v34 = 15;
            while (1)
            {
              v35 = *((unsigned __int8 *)v16 - 1);
              if (*((_BYTE *)v16 - 1))
                break;
              v16 = (unsigned __int16 *)((char *)v16 + 1);
              v34 += 255;
              if (i == ++v32)
              {
                v35 = 0;
                v20 = (unsigned __int16 *)a2;
                goto LABEL_53;
              }
            }
            v33 = v34;
            v20 = v16;
          }
LABEL_53:
          v31 = v35 + v33;
        }
        v8 = v31 + 3;
      }
LABEL_81:
      v55 = v8;
      v56 = &v7[v8];
      v6 = (unint64_t)v20 + v8;
      if ((unint64_t)v56 > v9 || v6 > v10)
      {
        v67 = v4;
        if ((unint64_t)v56 > a4)
          goto LABEL_93;
        v58 = v13;
        v59 = a4;
        memcpy(v7, v20, v8);
        a4 = v59;
        v13 = v58;
        v4 = v67;
      }
      else
      {
        do
        {
          v57 = *(_QWORD *)v20;
          v20 += 4;
          *(_QWORD *)v7 = v57;
          v7 += 8;
          v55 -= 8;
        }
        while (v7 < v56);
        v6 = (unint64_t)v20 + v55;
      }
      v12 = 0;
      v7 = v56;
      if (v6 >= a2)
      {
        v60 = __cxa_allocate_exception(0x10uLL);
        sub_1D4B2EB98(v60, v6 - v66);
        goto LABEL_92;
      }
    }
  }
  return (char *)(v7 - v4);
}

void sub_1D4B2EB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v24 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

uint64_t sub_1D4B2EB9C()
{
  _QWORD *v0;
  _QWORD v2[11];
  char v3;
  uint64_t v4;

  sub_1D4B01C34((uint64_t)v2);
  v0 = sub_1D4B02240(v2, (uint64_t)"0x", 2);
  *(_DWORD *)((char *)v0 + *(_QWORD *)(*v0 - 24) + 8) = *(_DWORD *)((_BYTE *)v0 + *(_QWORD *)(*v0 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v2[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v3 < 0)
    operator delete((void *)v2[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v4);
}

void sub_1D4B2EC80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B01D20((uint64_t)va);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_1D4B2EC94(std::runtime_error *a1)
{
  std::string *v2;
  __int128 v3;
  std::string v5;
  std::string __p;

  sub_1D4B2ED60();
  v2 = std::string::insert(&v5, 0, "MalformedInputException at ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_1D4B2D1D0(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  a1->__vftable = (std::runtime_error_vtbl *)&off_1E9848F80;
  return a1;
}

void sub_1D4B2ED2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4B2ED60()
{
  _QWORD v1[11];
  char v2;
  uint64_t v3;

  sub_1D4B01C34((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v1[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v2 < 0)
    operator delete((void *)v1[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v3);
}

void sub_1D4B2EE14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B01D20((uint64_t)va);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_1D4B2EE28(std::runtime_error *a1)
{
  std::string *v2;
  __int128 v3;
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void *__p[2];
  unsigned __int8 v10;
  std::string v11;
  std::string v12;
  std::string v13;

  std::operator+<char>();
  v2 = std::string::append(&v11, " at ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_1D4B2ED60();
  if ((v10 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v5 = v10;
  else
    v5 = (std::string::size_type)__p[1];
  v6 = std::string::append(&v12, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_1D4B2D1D0(a1, &v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if ((char)v10 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  a1->__vftable = (std::runtime_error_vtbl *)&off_1E9848F80;
  return a1;
}

void sub_1D4B2EF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1D4B2EF9C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;

  sub_1D4B2F048(a1, a2);
  v4 = *(_QWORD *)(a1 + 24);
  if (a2 > v4)
    bzero((void *)(*(_QWORD *)(a1 + 16) + v4), a2 - v4);
  *(_QWORD *)(a1 + 24) = a2;
}

_QWORD *sub_1D4B2EFDC(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;

  *a1 = &unk_1E98472E0;
  a1[1] = a2;
  a1[2] = 0;
  v5 = a1 + 2;
  a1[3] = 0;
  a1[4] = 0;
  sub_1D4B2F048((uint64_t)a1, a3);
  v6 = a1[3];
  if (a3 > v6)
    bzero((void *)(*v5 + v6), a3 - v6);
  a1[3] = a3;
  return a1;
}

uint64_t sub_1D4B2F048(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  const void *v4;
  void *v5;

  v3 = result;
  v4 = *(const void **)(result + 16);
  if (*(_QWORD *)(result + 32) >= a2)
  {
    if (v4)
      return result;
    goto LABEL_5;
  }
  if (!v4)
  {
LABEL_5:
    result = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(result + 8) + 16))(*(_QWORD *)(result + 8), a2);
    *(_QWORD *)(v3 + 16) = result;
    goto LABEL_6;
  }
  v5 = (void *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(result + 8) + 16))(*(_QWORD *)(result + 8), a2);
  *(_QWORD *)(v3 + 16) = v5;
  memcpy(v5, v4, *(_QWORD *)(v3 + 24));
  result = (*(uint64_t (**)(_QWORD, const void *))(**(_QWORD **)(v3 + 8) + 24))(*(_QWORD *)(v3 + 8), v4);
LABEL_6:
  *(_QWORD *)(v3 + 32) = a2;
  return result;
}

_QWORD *sub_1D4B2F0E0(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;

  *a1 = &unk_1E98472C0;
  a1[1] = a2;
  a1[2] = 0;
  v5 = a1 + 2;
  a1[3] = 0;
  a1[4] = 0;
  sub_1D4B2F198((uint64_t)a1, a3);
  v6 = a1[3];
  if (a3 > v6)
    bzero((void *)(*v5 + 8 * v6), 8 * (a3 - v6));
  a1[3] = a3;
  return a1;
}

void sub_1D4B2F150(uint64_t a1, unint64_t a2)
{
  unint64_t v4;

  sub_1D4B2F198(a1, a2);
  v4 = *(_QWORD *)(a1 + 24);
  if (a2 > v4)
    bzero((void *)(*(_QWORD *)(a1 + 16) + 8 * v4), 8 * (a2 - v4));
  *(_QWORD *)(a1 + 24) = a2;
}

uint64_t sub_1D4B2F198(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  const void *v4;
  void *v5;

  v3 = result;
  v4 = *(const void **)(result + 16);
  if (*(_QWORD *)(result + 32) >= a2)
  {
    if (v4)
      return result;
    goto LABEL_5;
  }
  if (!v4)
  {
LABEL_5:
    result = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(result + 8) + 16))(*(_QWORD *)(result + 8), 8 * a2);
    *(_QWORD *)(v3 + 16) = result;
    goto LABEL_6;
  }
  v5 = (void *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(result + 8) + 16))(*(_QWORD *)(result + 8), 8 * a2);
  *(_QWORD *)(v3 + 16) = v5;
  memcpy(v5, v4, 8 * *(_QWORD *)(v3 + 24));
  result = (*(uint64_t (**)(_QWORD, const void *))(**(_QWORD **)(v3 + 8) + 24))(*(_QWORD *)(v3 + 8), v4);
LABEL_6:
  *(_QWORD *)(v3 + 32) = a2;
  return result;
}

_QWORD *sub_1D4B2F234(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;

  *a1 = &unk_1E9847300;
  a1[1] = a2;
  a1[2] = 0;
  v5 = a1 + 2;
  a1[3] = 0;
  a1[4] = 0;
  sub_1D4B2F198((uint64_t)a1, a3);
  v6 = a1[3];
  if (a3 > v6)
    bzero((void *)(*v5 + 8 * v6), 8 * (a3 - v6));
  a1[3] = a3;
  return a1;
}

_QWORD *sub_1D4B2F2A8(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  *a1 = &unk_1E98472A0;
  a1[1] = a2;
  a1[2] = 0;
  v5 = a1 + 2;
  a1[3] = 0;
  a1[4] = 0;
  sub_1D4B2F3DC((uint64_t)a1, a3);
  v6 = a1[3];
  v7 = a3 - v6;
  if (a3 > v6)
  {
    v8 = 16 * v6;
    do
    {
      v9 = (_QWORD *)(*v5 + v8);
      *v9 = 0;
      v9[1] = 0;
      v8 += 16;
      --v7;
    }
    while (v7);
  }
  a1[3] = a3;
  return a1;
}

uint64_t sub_1D4B2F324(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  result = sub_1D4B2F3DC(a1, a2);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = a2 - v5;
  if (a2 > v5)
  {
    v7 = 16 * v5;
    do
    {
      v8 = (_QWORD *)(*(_QWORD *)(a1 + 16) + v7);
      *v8 = 0;
      v8[1] = 0;
      v7 += 16;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)(a1 + 24) = a2;
  return result;
}

uint64_t sub_1D4B2F378(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E98472A0;
  if (*(_QWORD *)(a1 + 16))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  return a1;
}

void sub_1D4B2F3C8(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_1D4B2F378(a1);
  operator delete(v1);
}

uint64_t sub_1D4B2F3DC(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  const void *v4;
  void *v5;

  v3 = result;
  v4 = *(const void **)(result + 16);
  if (*(_QWORD *)(result + 32) >= a2)
  {
    if (v4)
      return result;
    goto LABEL_5;
  }
  if (!v4)
  {
LABEL_5:
    result = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(result + 8) + 16))(*(_QWORD *)(result + 8), 16 * a2);
    *(_QWORD *)(v3 + 16) = result;
    goto LABEL_6;
  }
  v5 = (void *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(result + 8) + 16))(*(_QWORD *)(result + 8), 16 * a2);
  *(_QWORD *)(v3 + 16) = v5;
  memcpy(v5, v4, 16 * *(_QWORD *)(v3 + 24));
  result = (*(uint64_t (**)(_QWORD, const void *))(**(_QWORD **)(v3 + 8) + 24))(*(_QWORD *)(v3 + 8), v4);
LABEL_6:
  *(_QWORD *)(v3 + 32) = a2;
  return result;
}

_QWORD *sub_1D4B2F478(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;

  *a1 = &unk_1E9847340;
  a1[1] = a2;
  a1[2] = 0;
  v5 = a1 + 2;
  a1[3] = 0;
  a1[4] = 0;
  sub_1D4B2F198((uint64_t)a1, a3);
  v6 = a1[3];
  if (a3 > v6)
    bzero((void *)(*v5 + 8 * v6), 8 * (a3 - v6));
  a1[3] = a3;
  return a1;
}

_QWORD *sub_1D4B2F4EC(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;

  *a1 = &unk_1E9847360;
  a1[1] = a2;
  a1[2] = 0;
  v5 = a1 + 2;
  a1[3] = 0;
  a1[4] = 0;
  sub_1D4B2F198((uint64_t)a1, a3);
  v6 = a1[3];
  if (a3 > v6)
    bzero((void *)(*v5 + 8 * v6), 8 * (a3 - v6));
  a1[3] = a3;
  return a1;
}

_QWORD *sub_1D4B2F560(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;

  *a1 = &unk_1E9847320;
  a1[1] = a2;
  a1[2] = 0;
  v5 = a1 + 2;
  a1[3] = 0;
  a1[4] = 0;
  sub_1D4B2F048((uint64_t)a1, a3);
  v6 = a1[3];
  if (a3 > v6)
    bzero((void *)(*v5 + v6), a3 - v6);
  a1[3] = a3;
  return a1;
}

void *sub_1D4B2F5CC(int a1, size_t __size)
{
  return malloc(__size);
}

void sub_1D4B2F5D4(int a1, void *a2)
{
  free(a2);
}

uint64_t sub_1D4B2F5E4(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E98472E0;
  if (*(_QWORD *)(a1 + 16))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  return a1;
}

void sub_1D4B2F634(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_1D4B2F5E4(a1);
  operator delete(v1);
}

uint64_t sub_1D4B2F648(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E98472C0;
  if (*(_QWORD *)(a1 + 16))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  return a1;
}

void sub_1D4B2F698(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_1D4B2F648(a1);
  operator delete(v1);
}

uint64_t sub_1D4B2F6AC(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E9847300;
  if (*(_QWORD *)(a1 + 16))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  return a1;
}

void sub_1D4B2F6FC(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_1D4B2F6AC(a1);
  operator delete(v1);
}

uint64_t sub_1D4B2F710(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E9847340;
  if (*(_QWORD *)(a1 + 16))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  return a1;
}

void sub_1D4B2F760(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_1D4B2F710(a1);
  operator delete(v1);
}

uint64_t sub_1D4B2F774(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E9847360;
  if (*(_QWORD *)(a1 + 16))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  return a1;
}

void sub_1D4B2F7C4(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_1D4B2F774(a1);
  operator delete(v1);
}

uint64_t sub_1D4B2F7D8(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E9847320;
  if (*(_QWORD *)(a1 + 16))
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  return a1;
}

void sub_1D4B2F828(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_1D4B2F7D8(a1);
  operator delete(v1);
}

uint64_t (***sub_1D4B2F83C())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFEC6B18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFEC6B18))
    __cxa_guard_release(&qword_1EFEC6B18);
  return &off_1EFEC5AD8;
}

unint64_t sub_1D4B2F884(uint64_t *a1, unsigned int a2)
{
  return sub_1D4B2F890(a1, a2, 0x19919u);
}

unint64_t sub_1D4B2F890(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v3 = a3;
  if (a2 >= 8)
  {
    v4 = a2 >> 3;
    v5 = a1;
    do
    {
      v6 = *v5++;
      v3 = 5
         * __ROR8__((0x4CF5AD432745937FLL * ((0x88A129EA80000000 * v6) | ((0x87C37B91114253D5 * v6) >> 33))) ^ v3, 37)+ 1390208809;
      --v4;
    }
    while (v4);
  }
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = a2 & 0xFFFFFFF8;
  switch(a2 & 7)
  {
    case 1u:
      goto LABEL_11;
    case 2u:
      goto LABEL_10;
    case 3u:
      goto LABEL_9;
    case 4u:
      goto LABEL_8;
    case 5u:
      goto LABEL_7;
    case 6u:
      goto LABEL_6;
    case 7u:
      v7 = (unint64_t)*((unsigned __int8 *)a1 + (v13 | 6)) << 48;
LABEL_6:
      v8 = v7 | ((unint64_t)*((unsigned __int8 *)a1 + (v13 | 5)) << 40);
LABEL_7:
      v9 = v8 ^ ((unint64_t)*((unsigned __int8 *)a1 + (v13 | 4)) << 32);
LABEL_8:
      v10 = v9 ^ ((unint64_t)*((unsigned __int8 *)a1 + (v13 | 3)) << 24);
LABEL_9:
      v11 = v10 ^ ((unint64_t)*((unsigned __int8 *)a1 + (v13 | 2)) << 16);
LABEL_10:
      v12 = v11 ^ ((unint64_t)*((unsigned __int8 *)a1 + (v13 | 1)) << 8);
LABEL_11:
      v3 ^= 0x4CF5AD432745937FLL
          * ((0x88A129EA80000000 * (v12 ^ *((unsigned __int8 *)a1 + v13))) | ((0x87C37B91114253D5
                                                                               * (v12 ^ *((unsigned __int8 *)a1 + v13))) >> 33));
      break;
    default:
      break;
  }
  v14 = 0xFF51AFD7ED558CCDLL * (a2 ^ (v3 >> 33) ^ v3);
  return (0xC4CEB9FE1A85EC53 * (v14 ^ (v14 >> 33))) ^ ((0xC4CEB9FE1A85EC53 * (v14 ^ (v14 >> 33))) >> 33);
}

uint64_t sub_1D4B2FA08(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E98479F0;
  close(*(_DWORD *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return nullsub_1(a1);
}

void sub_1D4B2FA54(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_1D4B2FA08(a1);
  operator delete(v1);
}

void sub_1D4B2FA68(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *__p[2];
  uint64_t v4;

  if (*(char *)(a1 + 23) < 0)
  {
    sub_1D4B1655C(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v4 = *(_QWORD *)(a1 + 16);
  }
  sub_1D4B2FAEC((uint64_t)__p, a2);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
}

void sub_1D4B2FAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4B2FAEC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  std::string __p;

  v4 = operator new(0x30uLL);
  if (*(char *)(a1 + 23) < 0)
    sub_1D4B1655C(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_1D4B2FFD8((uint64_t)v4, &__p);
  *a2 = v4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1D4B2FB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2FB9C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E9847DA8;
  if (!*(_BYTE *)(a1 + 48))
  {
    close(*(_DWORD *)(a1 + 32));
    *(_BYTE *)(a1 + 48) = 1;
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1D4B2FBF8(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_1D4B2FB9C(a1);
  operator delete(v1);
}

void sub_1D4B2FC0C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  std::string __p;

  v4 = operator new(0x38uLL);
  if (*(char *)(a1 + 23) < 0)
    sub_1D4B1655C(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  sub_1D4B30328((uint64_t)v4, &__p);
  *a2 = v4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1D4B2FC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  operator delete(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B2FCBC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_1D4B2FCC4()
{
  return 0x20000;
}

ssize_t sub_1D4B2FCCC(uint64_t a1, void *a2, size_t a3, off_t a4)
{
  ssize_t result;
  std::runtime_error *exception;
  std::runtime_error *v7;
  std::runtime_error *v8;
  std::string v9;

  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Buffer is null");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  result = pread(*(_DWORD *)(a1 + 32), a2, a3, a4);
  if (result == -1)
  {
    v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_1D4B2D1D0(v7, &v9);
    __cxa_throw(v7, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (result != a3)
  {
    v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_1D4B2D1D0(v8, &v9);
    __cxa_throw(v8, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return result;
}

void sub_1D4B2FDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_1D4B2FE2C(uint64_t a1)
{
  return a1 + 8;
}

ssize_t sub_1D4B2FE34(uint64_t a1, const void *a2, size_t a3)
{
  ssize_t result;
  std::logic_error *exception;
  std::runtime_error *v7;
  std::runtime_error *v8;
  std::string v9;

  if (*(_BYTE *)(a1 + 48))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Cannot write to closed stream.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  result = write(*(_DWORD *)(a1 + 32), a2, a3);
  if (result == -1)
  {
    v7 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_1D4B2D1D0(v7, &v9);
    __cxa_throw(v7, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (result != a3)
  {
    v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_1D4B2D1D0(v8, &v9);
    __cxa_throw(v8, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  *(_QWORD *)(a1 + 40) += a3;
  return result;
}

void sub_1D4B2FF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_1D4B2FFA4(uint64_t result)
{
  uint64_t v1;

  if (!*(_BYTE *)(result + 48))
  {
    v1 = result;
    result = close(*(_DWORD *)(result + 32));
    *(_BYTE *)(v1 + 48) = 1;
  }
  return result;
}

uint64_t sub_1D4B2FFD8(uint64_t a1, const std::string *a2)
{
  const char **v3;
  const char *v4;
  int v5;
  std::runtime_error *exception;
  std::string *v8;
  __int128 v9;
  int *v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  int *v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::runtime_error *v23;
  stat v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;

  *(_QWORD *)a1 = off_1E98479F0;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (const char **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::string::operator=((std::string *)(a1 + 8), a2);
  v4 = (const char *)v3;
  if (*(char *)(a1 + 31) < 0)
    v4 = *v3;
  v5 = open(v4, 0);
  *(_DWORD *)(a1 + 32) = v5;
  if (v5 == -1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v8 = std::string::append(&v26, ": ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = __error();
    v11 = strerror(*v10);
    v12 = std::string::append(&v27, v11);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v28, " (");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = __error();
    std::to_string(&v25, *v16);
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v25;
    else
      v17 = (std::string *)v25.__r_.__value_.__r.__words[0];
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    else
      size = v25.__r_.__value_.__l.__size_;
    v19 = std::string::append(&v29, (const std::string::value_type *)v17, size);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v30, ")");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    *(_QWORD *)&v24.st_uid = *((_QWORD *)&v21->__r_.__value_.__l + 2);
    *(_OWORD *)&v24.st_dev = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    sub_1D4B2D1D0(exception, (const std::string *)&v24);
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (fstat(v5, &v24) == -1)
  {
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_1D4B2D1D0(v23, &v30);
    __cxa_throw(v23, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  *(_QWORD *)(a1 + 40) = v24.st_size;
  return a1;
}

void sub_1D4B30200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  void **v42;
  void *v43;
  int v44;
  uint64_t v45;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v45 - 57) < 0)
    operator delete(*(void **)(v45 - 80));
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v45 - 89) < 0)
    operator delete(*(void **)(v45 - 112));
  if (*(char *)(v45 - 121) < 0)
    operator delete(*(void **)(v45 - 144));
  if (*(char *)(v45 - 153) < 0)
    operator delete(*(void **)(v45 - 176));
  if (a41 < 0)
  {
    operator delete(a36);
    if ((v44 & 1) == 0)
    {
LABEL_18:
      if (*(char *)(v41 + 31) < 0)
        operator delete(*v42);
      nullsub_1(v41);
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_18;
  }
  __cxa_free_exception(v43);
  goto LABEL_18;
}

uint64_t sub_1D4B30328(uint64_t a1, const std::string *a2)
{
  const char **v3;
  const char *v4;
  int v5;
  std::runtime_error *exception;
  std::string *v8;
  __int128 v9;
  int *v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  int *v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;

  *(_QWORD *)a1 = off_1E9847DA8;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (const char **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::string::operator=((std::string *)(a1 + 8), a2);
  *(_BYTE *)(a1 + 48) = 0;
  v4 = (const char *)v3;
  if (*(char *)(a1 + 31) < 0)
    v4 = *v3;
  v5 = open(v4, 1537, 384);
  *(_DWORD *)(a1 + 32) = v5;
  if (v5 == -1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v8 = std::string::append(&v24, ": ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = __error();
    v11 = strerror(*v10);
    v12 = std::string::append(&v25, v11);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v26, " (");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = __error();
    std::to_string(&v23, *v16);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v23;
    else
      v17 = (std::string *)v23.__r_.__value_.__r.__words[0];
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    else
      size = v23.__r_.__value_.__l.__size_;
    v19 = std::string::append(&v27, (const std::string::value_type *)v17, size);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v28, ")");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    sub_1D4B2D1D0(exception, &v29);
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return a1;
}

void sub_1D4B304F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  void **v43;
  void *v44;
  int v45;
  uint64_t v46;

  if (*(char *)(v46 - 57) < 0)
    operator delete(*(void **)(v46 - 80));
  if (*(char *)(v46 - 89) < 0)
    operator delete(*(void **)(v46 - 112));
  if (a16 < 0)
    operator delete(__p);
  if (a42 < 0)
    operator delete(a37);
  if (a35 < 0)
    operator delete(a30);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v45 & 1) == 0)
    {
LABEL_18:
      if (*(char *)(v42 + 31) < 0)
        operator delete(*v43);
      _Unwind_Resume(a1);
    }
  }
  else if (!v45)
  {
    goto LABEL_18;
  }
  __cxa_free_exception(v44);
  goto LABEL_18;
}

_QWORD *sub_1D4B305FC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E98477A0;
  v2 = operator new(0x30uLL);
  sub_1D4B35670(v2);
  a1[1] = v2;
  return a1;
}

void sub_1D4B3063C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B30654(_QWORD *a1, uint64_t a2)
{
  char *v4;
  __int128 *v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;

  *a1 = &off_1E98477A0;
  v4 = (char *)operator new(0x30uLL);
  v5 = *(__int128 **)(a2 + 8);
  v6 = *v5;
  *((_QWORD *)v4 + 2) = *((_QWORD *)v5 + 2);
  *(_OWORD *)v4 = v6;
  v7 = v4 + 24;
  if (*((char *)v5 + 47) < 0)
  {
    sub_1D4B1655C(v7, *((void **)v5 + 3), *((_QWORD *)v5 + 4));
  }
  else
  {
    v8 = *(__int128 *)((char *)v5 + 24);
    *((_QWORD *)v4 + 5) = *((_QWORD *)v5 + 5);
    *(_OWORD *)v7 = v8;
  }
  a1[1] = v4;
  return a1;
}

void sub_1D4B306D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B306E8(_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;

  *a1 = &off_1E98477A0;
  v4 = (void **)a1[1];
  v2 = a1 + 1;
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_1D4B35AB8((int)v2, v3);
  return a1;
}

void sub_1D4B30724(_QWORD *__p)
{
  _QWORD *v2;
  void **v3;
  void **v4;

  *__p = &off_1E98477A0;
  v4 = (void **)__p[1];
  v2 = __p + 1;
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_1D4B35AB8((int)v2, v3);
  operator delete(__p);
}

_QWORD *sub_1D4B30760(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_1E9847EC0;
  v2 = operator new(0x58uLL);
  v2[1] = v2 + 1;
  v2[2] = v2 + 1;
  v2[3] = 0;
  v2[4] = v2 + 4;
  *(_DWORD *)v2 = 0;
  v2[5] = v2 + 4;
  v2[6] = 0;
  v2[7] = 0;
  v2[8] = -1;
  *((_BYTE *)v2 + 72) = 1;
  *((_DWORD *)v2 + 19) = 6;
  *((_BYTE *)v2 + 80) = 0;
  a1[1] = v2;
  return a1;
}

void sub_1D4B307CC(_QWORD **a1, _QWORD *a2)
{
  _QWORD *v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_1D4B35738(v2 + 4);
    sub_1D4B356D8(v2 + 1);
    operator delete(v2);
  }
}

uint64_t sub_1D4B30810(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E9847EC0;
  sub_1D4B307CC((_QWORD **)(a1 + 8), 0);
  return a1;
}

void sub_1D4B30844(_QWORD **a1)
{
  *a1 = off_1E9847EC0;
  sub_1D4B307CC(a1 + 1, 0);
  operator delete(a1);
}

uint64_t sub_1D4B30878(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v3 = 2;
  sub_1D4B35AF0((uint64_t *)(v3 + 8), *(_QWORD *)(a2 + 8), a2);
  sub_1D4B35738((_QWORD *)(*(_QWORD *)(a1 + 8) + 32));
  return a1;
}

int *sub_1D4B308BC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EFEC6B50);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EFEC6B50))
  {
    dword_1EFEC6B48 = 1;
    __cxa_guard_release(&qword_1EFEC6B50);
  }
  return &dword_1EFEC6B48;
}

uint64_t sub_1D4B30910(uint64_t a1)
{
  std::runtime_error *exception;

  if ((*(_BYTE *)(a1 + 16) & 8) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Unknown compression type");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return *(unsigned int *)(a1 + 72);
}

void sub_1D4B30964(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B30978@<X0>(uint64_t result@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  std::string::size_type size;
  _QWORD v5[11];
  char v6;
  uint64_t v7;
  std::string __str;
  char v9;

  if (*(_QWORD *)(result + 56) == *(_QWORD *)(result + 64))
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    v3 = result;
    sub_1D4B01C34((uint64_t)v5);
    sub_1D4B35D28(*(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), (uint64_t)v5, (uint64_t)".", (uint64_t *)&__str);
    std::stringbuf::str();
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    std::string::basic_string(a2, &__str, 0, size - 1, (std::allocator<char> *)&v9);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v5[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v5[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v6 < 0)
      operator delete((void *)v5[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x1D82646E0](&v7);
  }
  return result;
}

void sub_1D4B30A8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 - 41) < 0)
    operator delete(*(void **)(v2 - 64));
  sub_1D4B01D20((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1D4B30ABC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t result;
  uint64_t v6;
  unint64_t v7;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v6 = *(_QWORD *)(*a2 + 8 * (result >> 6));
  if (((1 << result) & v6) == 0)
  {
    v7 = result;
    *(_QWORD *)(*a2 + 8 * (result >> 6)) = v6 | (1 << result);
    for (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
          v7 <= result;
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3))
    {
      *(_QWORD *)(*a2 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
      ++v7;
    }
  }
  return result;
}

uint64_t sub_1D4B30B70(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v7 = v6 >> 6;
  v8 = 1 << v6;
  v9 = ((1 << v6) & *(_QWORD *)(*a2 + 8 * (v6 >> 6))) != 0;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3))
  {
    v10 = 0;
    do
    {
      v11 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a3 + 48))(a3, v10);
      v9 |= sub_1D4B30B70(a1, a2, v11);
      ++v10;
    }
    while (v10 < (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3));
  }
  v12 = *a2;
  if ((v9 & 1) != 0)
    v13 = *(_QWORD *)(v12 + 8 * v7) | v8;
  else
    v13 = *(_QWORD *)(v12 + 8 * v7) & ~v8;
  *(_QWORD *)(v12 + 8 * v7) = v13;
  return v9 & 1;
}

unint64_t sub_1D4B30C58(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  unint64_t result;
  unint64_t i;
  __int128 *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  unint64_t j;
  uint64_t v17;
  std::string __p;
  std::string *p_p;

  v4 = (uint64_t **)(a1 + 24);
  p_p = (std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
  sub_1D4B35DFC(v4, (unint64_t *)&p_p, (uint64_t)&unk_1D4BD512B, (uint64_t **)&__p)[5] = a2;
  LODWORD(v4) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  if ((_DWORD)v4 == 12)
  {
    if (result)
    {
      for (i = 0; i < result; ++i)
      {
        v7 = (__int128 *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 56))(a2, i);
        v8 = *(_QWORD *)(a1 + 64);
        v9 = (uint64_t *)(a1 + 56);
        if (v8 >= *(_QWORD *)(a1 + 72))
        {
          v10 = sub_1D4B35F14(v9, v7);
        }
        else
        {
          sub_1D4B35EB8(v9, v7);
          v10 = v8 + 24;
        }
        *(_QWORD *)(a1 + 64) = v10;
        v11 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 48))(a2, i);
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
        sub_1D4B30978(a1, &__p);
        p_p = &__p;
        *((_QWORD *)sub_1D4B36244((uint64_t **)a1, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1D4BD512B, (_OWORD **)&p_p)+ 7) = v12;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v13 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 48))(a2, i);
        sub_1D4B30C58(a1, v13);
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (void **)(v14 - 24);
        if (*(char *)(v14 - 1) < 0)
          operator delete(*v15);
        *(_QWORD *)(a1 + 64) = v15;
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
      }
    }
  }
  else if (result)
  {
    for (j = 0; j < result; ++j)
    {
      v17 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 48))(a2, j);
      sub_1D4B30C58(a1, v17);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    }
  }
  return result;
}

void sub_1D4B30E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4B30E74(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int *v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  int v18;

  v6 = *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16) + 56);
  LOBYTE(v17) = 0;
  sub_1D4B31008((uint64_t)a2, v6, &v17);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 48) + 24) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24)) == 12
    && (v7 = *(_QWORD *)(a3 + 8), *(_DWORD *)v7 == 2))
  {
    v8 = *(_QWORD *)(v7 + 16);
    if (v8 != v7 + 8)
    {
      do
      {
        sub_1D4B31118(a1, a2, *(_QWORD *)(v8 + 16));
        v8 = *(_QWORD *)(v8 + 8);
      }
      while (v8 != *(_QWORD *)(a3 + 8) + 8);
    }
  }
  else
  {
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 48) + 24) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24));
    v10 = *(int **)(a3 + 8);
    v11 = *v10;
    if (v9 == 12 && v11 == 1)
    {
      v14 = *((_QWORD *)v10 + 5);
      if ((int *)v14 != v10 + 8)
      {
        do
        {
          sub_1D4B31278(a1, a2, (const void **)(v14 + 16));
          v14 = *(_QWORD *)(v14 + 8);
        }
        while (v14 != *(_QWORD *)(a3 + 8) + 32);
      }
    }
    else if (v11 == 3)
    {
      v13 = *((_QWORD *)v10 + 2);
      if ((int *)v13 != v10 + 2)
      {
        do
        {
          sub_1D4B31354(a1, a2, *(_QWORD *)(v13 + 16));
          v13 = *(_QWORD *)(v13 + 8);
        }
        while (v13 != *(_QWORD *)(a3 + 8) + 8);
      }
    }
    else
    {
      v15 = a2[1];
      if (v15)
      {
        v17 = *a2;
        v18 = 0;
        sub_1D4B366DC(&v17, v15);
      }
    }
  }
  result = sub_1D4B30B70(a1, a2, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24));
  *(_QWORD *)*a2 |= 1uLL;
  return result;
}

void sub_1D4B31008(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  char *v14;
  __int128 v15;

  *(_QWORD *)(a1 + 8) = 0;
  if (a2)
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = v6 << 6;
    if (v6 << 6 >= a2)
    {
      *(_QWORD *)(a1 + 8) = a2;
    }
    else
    {
      v14 = 0;
      v15 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0)
        sub_1D4B182AC();
      v8 = v6 << 7;
      if (v8 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0))
        v8 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v7 <= 0x3FFFFFFFFFFFFFFELL)
        v9 = v8;
      else
        v9 = 0x7FFFFFFFFFFFFFFFLL;
      sub_1D4B363E0(&v14, v9);
      v11 = v14;
      v12 = *((_QWORD *)&v15 + 1);
      v14 = *(char **)a1;
      v10 = v14;
      v13 = *(_OWORD *)(a1 + 8);
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = a2;
      *(_QWORD *)(a1 + 16) = v12;
      v15 = v13;
      if (v10)
        operator delete(v10);
    }
    if (*a3)
    {
      v14 = *(char **)a1;
      LODWORD(v15) = 0;
      sub_1D4B366DC(&v14, a2);
    }
    else
    {
      v14 = *(char **)a1;
      LODWORD(v15) = 0;
      sub_1D4B3678C((uint64_t)&v14, a2);
    }
  }
}

void sub_1D4B31100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1D4B31118(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v6;
  _QWORD *v8;
  std::runtime_error *exception;
  std::string v10;
  _BYTE v11[16];
  _QWORD v12[33];

  if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 48) + 24) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24)) <= a3)
  {
    sub_1D4B177C0((uint64_t)v11);
    sub_1D4B02240(v12, (uint64_t)"Invalid column selected ", 24);
    v8 = (_QWORD *)std::ostream::operator<<();
    sub_1D4B02240(v8, (uint64_t)" out of ", 8);
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 48) + 24) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24));
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    sub_1D4B2D1D0(exception, &v10);
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v6 = (*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 48) + 24) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24), a3);
  return sub_1D4B30ABC(v6, a2, v6);
}

void sub_1D4B31230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_1D4B178EC((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

unint64_t sub_1D4B31278(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v5;
  std::runtime_error *exception;
  std::string v8;

  v5 = sub_1D4B36838(a1, a3);
  if (a1 + 8 == v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    sub_1D4B2D1D0(exception, &v8);
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return sub_1D4B31354(a1, a2, *(_QWORD *)(v5 + 56));
}

void sub_1D4B3131C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

unint64_t sub_1D4B31354(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  uint64_t *v4;
  _QWORD *v6;
  std::runtime_error *exception;
  std::string v8;
  uint64_t *v9[2];
  _QWORD v10[33];
  unint64_t v11;

  v11 = a3;
  if (a2[1] <= a3)
  {
    sub_1D4B177C0((uint64_t)v9);
    sub_1D4B02240(v10, (uint64_t)"Invalid type id selected ", 25);
    v6 = (_QWORD *)std::ostream::operator<<();
    sub_1D4B02240(v6, (uint64_t)" out of ", 8);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    sub_1D4B2D1D0(exception, &v8);
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v9[0] = (uint64_t *)&v11;
  v4 = sub_1D4B35DFC((uint64_t **)(a1 + 24), &v11, (uint64_t)&unk_1D4BD512B, v9);
  return sub_1D4B30ABC((uint64_t)v4, a2, v4[5]);
}

void sub_1D4B31450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_1D4B178EC((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

_QWORD *sub_1D4B31498(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  a1[4] = 0;
  *a1 = a1 + 1;
  a1[3] = a1 + 4;
  a1[5] = 0;
  a1[6] = a2;
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  sub_1D4B30C58((uint64_t)a1, *(_QWORD *)(a2 + 24));
  return a1;
}

void sub_1D4B31500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void **v13;

  v13 = v12;
  a10 = v13;
  sub_1D4B36914(&a10);
  sub_1D4B28BAC(v11, *(_QWORD **)(v10 + 32));
  sub_1D4B368C4(v10, *(char **)(v10 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B31534(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[3];
  _QWORD *v24[3];
  unint64_t v25;
  _QWORD v26[5];
  void **v27;

  *(_QWORD *)a1 = off_1E98477C0;
  *(_QWORD *)(a1 + 8) = sub_1D4B43314();
  v6 = *a2;
  *(_QWORD *)(a1 + 16) = *a2;
  v7 = a2[1];
  *(_QWORD *)(a1 + 24) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v6 = *(_QWORD *)(a1 + 16);
  }
  v10 = *(_QWORD *)(a3 + 8);
  v11 = *(_BYTE *)(v10 + 72);
  LODWORD(v10) = *(_DWORD *)(v10 + 76);
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 32) = v11;
  *(_DWORD *)(a1 + 36) = v10;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(v6 + 16);
  sub_1D4B2F55C((_QWORD *)(a1 + 72), *(_QWORD *)(v6 + 48), 0);
  *(_QWORD *)(a1 + 112) = 0;
  sub_1D4B0E238(a1 + 168);
  sub_1D4B0BF08(a1 + 264);
  *(_QWORD *)(a1 + 368) = 0;
  v12 = *(_BYTE *)(*(_QWORD *)(a3 + 8) + 80);
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  v13 = *(int *)(*(_QWORD *)(a1 + 64) + 32);
  *(_QWORD *)(a1 + 144) = 0;
  v14 = (unint64_t *)(a1 + 144);
  *(_BYTE *)(a1 + 376) = v12;
  *(_DWORD *)(a1 + 416) = 1065353216;
  *(_QWORD *)(a1 + 136) = v13;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  sub_1D4B2F150(a1 + 72, v13);
  if ((_DWORD)v13)
  {
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v16) = v17;
      sub_1D4B0E348((uint64_t)v23, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 40) + (v15 >> 29) + 8));
      v18 = *(_QWORD *)(a3 + 8);
      v19 = *(_QWORD *)(v18 + 56);
      if (v25 >= v19 && v25 < *(_QWORD *)(v18 + 64) + v19)
      {
        if (v16 < *(_QWORD *)(a1 + 136))
          *(_QWORD *)(a1 + 136) = v16;
        if (v16 >= *v14)
          *v14 = v16 + 1;
      }
      v17 += v26[3];
      sub_1D4B0E388(v23);
      ++v16;
      v15 += 0x100000000;
    }
    while (v13 != v16);
  }
  v20 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = v20;
  if (v20)
  {
    if (v20 == v13)
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 144);
    else
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v20) - 1;
  }
  else
  {
    v21 = -1;
  }
  *(_QWORD *)(a1 + 120) = v21;
  sub_1D4B31498(v23, *(_QWORD *)(a1 + 16));
  sub_1D4B30E74((uint64_t)v23, (uint64_t *)(a1 + 40), a3);
  v27 = (void **)v26;
  sub_1D4B36914(&v27);
  sub_1D4B28BAC((uint64_t)v24, v24[1]);
  sub_1D4B368C4((uint64_t)v23, (char *)v23[1]);
  return a1;
}

void sub_1D4B31788(_Unwind_Exception *a1, _QWORD *a2, _QWORD *a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a4);
  sub_1D4B31828((uint64_t)va);
  sub_1D4B369A0(v5 + 384);
  v8 = *(_QWORD *)(v5 + 368);
  *(_QWORD *)(v5 + 368) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  sub_1D4B0BFBC(a2);
  sub_1D4B0E388(a3);
  v9 = *(_QWORD *)(v5 + 112);
  *(_QWORD *)(v5 + 112) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_1D4B2F7C0(a4);
  if (*v6)
    operator delete(*v6);
  sub_1D4B1F3DC(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B31828(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 56);
  sub_1D4B36914(&v3);
  sub_1D4B28BAC(a1 + 24, *(_QWORD **)(a1 + 32));
  sub_1D4B368C4(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_1D4B31878(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 16) + 40);
}

uint64_t sub_1D4B31884(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32);
}

_QWORD *sub_1D4B31890@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1D4B36A14(a2, a1 + 40);
}

uint64_t sub_1D4B3189C(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = a1[14];
  if (!result)
  {
    sub_1D4B46624(*(_QWORD *)(a1[2] + 24), a1 + 5, &v6);
    v3 = v6;
    v6 = 0;
    v4 = a1[14];
    a1[14] = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v5 = v6;
      v6 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    return a1[14];
  }
  return result;
}

uint64_t sub_1D4B31918(uint64_t a1)
{
  return *(_QWORD *)(a1 + 120);
}

_QWORD *sub_1D4B31920(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v2 = result[18];
  if (!v2)
    return result;
  v3 = (uint64_t)result;
  v4 = result[8];
  v5 = *(int *)(v4 + 32);
  if (v2 == v5)
  {
    v6 = *(_QWORD *)(v4 + 144);
    if (v6 <= a2)
    {
LABEL_18:
      result[17] = v5;
      result[15] = v6;
      return result;
    }
  }
  if (v2 < v5 && *(_QWORD *)(result[11] + 8 * v2) <= a2)
  {
    v6 = *(_QWORD *)(v4 + 144);
    goto LABEL_18;
  }
  v7 = v2 - 1;
  v8 = 1;
  while (v2 != v8)
  {
    v9 = *(_QWORD *)(result[11] + 8 * v8++);
    if (v9 > a2)
    {
      v7 = v8 - 2;
      break;
    }
  }
  if (v7 >= result[16])
  {
    result[17] = v7;
    result[19] = a2 - *(_QWORD *)(result[11] + 8 * v7);
    result[15] = a2;
    sub_1D4B31A34((uint64_t)result);
    v10 = *(_QWORD *)(v3 + 152);
    v11 = *(unsigned int *)(*(_QWORD *)(v3 + 64) + 152);
    if ((_DWORD)v11 && *(_QWORD *)(v3 + 224))
    {
      v12 = v10 / v11;
      v10 -= v11 * (v10 / v11);
      if ((_DWORD)v12)
        sub_1D4B31D00(v3, v12);
    }
    return (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(v3 + 368) + 16))(*(_QWORD *)(v3 + 368), v10);
  }
  else
  {
    result[17] = v5;
    result[15] = *(_QWORD *)(v4 + 144);
  }
  return result;
}

uint64_t sub_1D4B31A34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::string::size_type v4;
  uint64_t v5;
  std::string::size_type v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  std::runtime_error *exception;
  std::string v15;
  _QWORD v16[2];
  _QWORD v17[33];

  v2 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1D4B0EC38((std::string *)(a1 + 168), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 40) + ((uint64_t)(*(_QWORD *)(a1 + 136) << 32) >> 29) + 8));
  if (vaddvq_s64(vaddq_s64(*(int64x2_t *)(a1 + 216), *(int64x2_t *)(a1 + 232))) >= (unint64_t)(*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 16) + 16))(**(_QWORD **)(a1 + 16)))
  {
    sub_1D4B177C0((uint64_t)v16);
    sub_1D4B02240(v17, (uint64_t)"Malformed StripeInformation at stripe index ", 44);
    v8 = (_QWORD *)std::ostream::operator<<();
    sub_1D4B02240(v8, (uint64_t)": fileLength=", 13);
    v9 = (_QWORD *)std::ostream::operator<<();
    sub_1D4B02240(v9, (uint64_t)", StripeInfo=(offset=", 21);
    v10 = (_QWORD *)std::ostream::operator<<();
    sub_1D4B02240(v10, (uint64_t)", indexLength=", 14);
    v11 = (_QWORD *)std::ostream::operator<<();
    sub_1D4B02240(v11, (uint64_t)", dataLength=", 13);
    v12 = (_QWORD *)std::ostream::operator<<();
    sub_1D4B02240(v12, (uint64_t)", footerLength=", 15);
    v13 = (_QWORD *)std::ostream::operator<<();
    sub_1D4B02240(v13, (uint64_t)")", 1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    sub_1D4B2D1D0(exception, &v15);
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  sub_1D4B320E4((_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 16), (uint64_t)v16);
  if ((_QWORD *)(a1 + 264) != v16)
    sub_1D4B0C9D0(a1 + 264, v16);
  sub_1D4B0BFBC(v16);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 248);
  if ((*(_BYTE *)(a1 + 280) & 1) != 0)
    v3 = sub_1D4B43380(*(_QWORD *)(a1 + 360));
  else
    v3 = *(_QWORD *)(a1 + 8);
  sub_1D4B41934(v16, a1, *(_QWORD *)(a1 + 136), a1 + 168, a1 + 264, *(_QWORD *)(a1 + 216), **(_QWORD **)(a1 + 16), v3);
  sub_1D4B1C164(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), (uint64_t)v16, &v15);
  v4 = v15.__r_.__value_.__r.__words[0];
  v15.__r_.__value_.__r.__words[0] = 0;
  v5 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v15.__r_.__value_.__r.__words[0];
    v15.__r_.__value_.__r.__words[0] = 0;
    if (v6)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v6 + 8))(v6);
  }
  return j_nullsub_1_0(v16);
}

void sub_1D4B31CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_1D4B178EC((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_1D4B31D00(uint64_t a1, int a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::string *v12;
  uint64_t v13;
  _QWORD *i;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  std::runtime_error *exception;
  __int128 v31;
  uint64_t v32;
  __int128 *v33;
  uint64_t *v34;
  unint64_t v35;
  _OWORD v36[2];
  int v37;
  _QWORD *v38;
  uint64_t v39;

  v3 = a1 + 384;
  sub_1D4B36B90(a1 + 384);
  v4 = *(_DWORD *)(a1 + 296);
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = *(_QWORD *)(a1 + 216);
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 304) + 8 * v5 + 8);
      *(_QWORD *)&v31 = *(unsigned int *)(v7 + 28);
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 40) + (((unint64_t)v31 >> 3) & 0x1FFFFFF8)) >> v31) & 1) != 0
        && (*(_BYTE *)(v7 + 16) & 1) != 0
        && *(_DWORD *)(v7 + 24) == 6)
      {
        v8 = *(_QWORD *)(a1 + 16);
        v9 = *(unsigned int *)(v8 + 40);
        v10 = operator new(0x48uLL);
        sub_1D4B01E70(v10, *(_QWORD *)v8, v6, *(_QWORD *)(v7 + 32), *(_QWORD *)(v8 + 48), 0);
        v38 = v10;
        sub_1D4B2C08C(v9, (uint64_t *)&v38, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), &v39);
        v11 = (uint64_t)v38;
        v38 = 0;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        sub_1D4B092CC((uint64_t)v36);
        if ((sub_1D4BB191C((uint64_t)v36, v39) & 1) == 0)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          sub_1D4B2D1F0(exception, "Failed to parse the row index");
          __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
        }
        v33 = &v31;
        v12 = (std::string *)sub_1D4B36BE4(v3, (uint64_t *)&v31, (uint64_t)&unk_1D4BD512B, (_QWORD **)&v33);
        sub_1D4B097B0(v12 + 1, (uint64_t)v36);
        sub_1D4B0930C(v36);
        v13 = v39;
        v39 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v4 = *(_DWORD *)(a1 + 296);
      }
      v6 += *(_QWORD *)(v7 + 32);
      ++v5;
    }
    while (v5 < v4);
  }
  v33 = 0;
  v34 = 0;
  v35 = 0;
  memset(v36, 0, sizeof(v36));
  v37 = 1065353216;
  for (i = *(_QWORD **)(a1 + 400); i; i = (_QWORD *)*i)
  {
    v15 = i[2];
    v16 = *(_QWORD *)(i[8] + 8 * a2 + 8);
    *(_QWORD *)&v31 = &v31;
    *((_QWORD *)&v31 + 1) = &v31;
    v32 = 0;
    v17 = v34;
    if ((unint64_t)v34 >= v35)
    {
      v22 = sub_1D4B371D0((uint64_t *)&v33, &v31);
    }
    else
    {
      *v34 = (uint64_t)v34;
      v17[1] = (uint64_t)v17;
      v17[2] = 0;
      v18 = v32;
      if (v32)
      {
        v19 = v31;
        v20 = **((_QWORD **)&v31 + 1);
        *(_QWORD *)(v20 + 8) = *(_QWORD *)(v31 + 8);
        **(_QWORD **)(v19 + 8) = v20;
        v21 = *v17;
        *(_QWORD *)(v21 + 8) = *((_QWORD *)&v19 + 1);
        **((_QWORD **)&v19 + 1) = v21;
        *v17 = v19;
        *(_QWORD *)(v19 + 8) = v17;
        v17[2] = v18;
        v32 = 0;
      }
      v22 = (uint64_t)(v17 + 3);
    }
    v34 = (uint64_t *)v22;
    sub_1D4B356D8(&v31);
    v23 = v34;
    v24 = (uint64_t)(v34 - 3);
    if (*(_DWORD *)(v16 + 24))
    {
      v25 = 0;
      do
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v16 + 32) + 8 * v25 + 8);
        v27 = operator new(0x18uLL);
        v27[1] = v24;
        v27[2] = v26;
        v28 = *(v23 - 3);
        *v27 = v28;
        *(_QWORD *)(v28 + 8) = v27;
        *(v23 - 3) = (uint64_t)v27;
        ++*(v23 - 1);
        ++v25;
      }
      while (v25 != *(_DWORD *)(v16 + 24));
    }
    sub_1D4B019E8(&v39, v24);
    *(_QWORD *)&v31 = v15;
    *((_QWORD *)&v31 + 1) = v39;
    sub_1D4B37420((uint64_t)v36, (unint64_t *)&v31, &v31);
  }
  (*(void (**)(_QWORD, _OWORD *))(**(_QWORD **)(a1 + 368) + 40))(*(_QWORD *)(a1 + 368), v36);
  sub_1D4B37188((uint64_t)v36);
  *(_QWORD *)&v36[0] = &v33;
  sub_1D4B37118((void ***)v36);
}

void sub_1D4B32028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void **a17)
{
  sub_1D4B37188((uint64_t)&a17);
  a17 = (void **)&a14;
  sub_1D4B37118(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B320CC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1D4B320D4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_1D4B320DC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_1D4B320E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  std::runtime_error *exception;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  _QWORD v16[2];
  unsigned __int8 v17;
  std::string v18;
  std::string v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = a1[9];
  v6 = a1[7] + a1[6] + a1[8];
  v7 = *(unsigned int *)(a2 + 40);
  v8 = operator new(0x48uLL);
  sub_1D4B01E70(v8, *(_QWORD *)a2, v6, v5, *(_QWORD *)(a2 + 48), 0);
  v20 = v8;
  sub_1D4B2C08C(v7, (uint64_t *)&v20, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 48), &v21);
  v9 = (uint64_t)v20;
  v20 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_1D4B0BF08(a3);
  if ((sub_1D4BB191C(a3, v21) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4BCA448(&v18, "bad StripeFooter from ");
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v21 + 56))(v16);
    if ((v17 & 0x80u) == 0)
      v12 = (const std::string::value_type *)v16;
    else
      v12 = (const std::string::value_type *)v16[0];
    if ((v17 & 0x80u) == 0)
      v13 = v17;
    else
      v13 = v16[1];
    v14 = std::string::append(&v18, v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_1D4B2D1D0(exception, &v19);
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  result = v21;
  v21 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1D4B32254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _QWORD *v26;
  void *v27;
  int v28;
  uint64_t v29;
  uint64_t v31;

  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v28 & 1) == 0)
    {
LABEL_10:
      sub_1D4B0BFBC(v26);
      v31 = *(_QWORD *)(v29 - 56);
      *(_QWORD *)(v29 - 56) = 0;
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v27);
  goto LABEL_10;
}

uint64_t sub_1D4B32324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v17;

  *(_QWORD *)a1 = off_1E98473A8;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  v8 = a1 + 8;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  sub_1D4B30654((_QWORD *)(a1 + 24), a3);
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 48) = a5;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  sub_1D4B32478(a1);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 64) = *(int *)(v9 + 32);
  sub_1D4B4622C(*(_QWORD *)(*(_QWORD *)(v9 + 64) + 8), v9, &v17);
  v10 = *(_QWORD *)v8;
  v11 = v17;
  v17 = 0;
  v12 = *(_QWORD *)(v10 + 24);
  *(_QWORD *)(v10 + 24) = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v17;
    v17 = 0;
    if (v13)
      (*(void (**)(char *))(*(_QWORD *)v13 + 8))(v13);
  }
  v14 = *(_QWORD *)(*(_QWORD *)v8 + 8);
  v15 = 0x40000;
  if ((*(_DWORD *)(v14 + 16) & 4) != 0)
    v15 = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(*(_QWORD *)v8 + 32) = v15;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 40) = sub_1D4B30910(v14);
  return a1;
}

void sub_1D4B32424(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void **v5;
  _QWORD *v6;
  void **v7;

  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(v2 + 72) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v7 = *(void ***)(v2 + 32);
  v6 = (_QWORD *)(v2 + 32);
  v5 = v7;
  *(v6 - 1) = &off_1E98477A0;
  *v6 = 0;
  if (v7)
    sub_1D4B35AB8((int)v6, v5);
  sub_1D4B1F3DC(v1);
  _Unwind_Resume(a1);
}

void sub_1D4B32478(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v15 = v2;
  if ((_DWORD)v2 || (HIDWORD(v2) - 13) <= 0xFFFFFFFD)
  {
    v3 = sub_1D4B02240(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), (uint64_t)"Warning: ORC file ", 18);
    v4 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 40))(**(_QWORD **)(a1 + 8));
    v5 = *(char *)(v4 + 23);
    if (v5 >= 0)
      v6 = v4;
    else
      v6 = *(_QWORD *)v4;
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(v4 + 23);
    else
      v7 = *(_QWORD *)(v4 + 8);
    v8 = sub_1D4B02240(v3, v6, v7);
    v9 = sub_1D4B02240(v8, (uint64_t)" was written in an unknown format version ", 42);
    sub_1D4B29F00();
    if ((v14 & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v11 = v14;
    else
      v11 = (uint64_t)__p[1];
    v12 = sub_1D4B02240(v9, (uint64_t)v10, v11);
    sub_1D4B02240(v12, (uint64_t)"\n", 1);
    if ((char)v14 < 0)
      operator delete(__p[0]);
  }
}

void sub_1D4B32574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4B32590@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  _QWORD *v4;
  std::string *v5;
  std::runtime_error *exception;
  _BYTE v8[16];
  int v9;
  _QWORD *v10;
  std::string *v11;
  __int128 v12;

  sub_1D4B149B4((uint64_t)v8);
  v9 |= 1u;
  v4 = v10;
  if (!v10)
  {
    v4 = sub_1D4B16048(0);
    v10 = v4;
  }
  sub_1D4B148EC(v4, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  v9 |= 2u;
  v5 = v11;
  if (!v11)
  {
    v5 = (std::string *)sub_1D4B15FC0(0);
    v11 = v5;
  }
  sub_1D4B13A7C(v5, *(_QWORD *)(a1 + 56));
  v9 |= 0xCu;
  v12 = *(_OWORD *)(a1 + 40);
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  if (!sub_1D4BB2294((uint64_t)v8, a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Failed to serialize file tail");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return sub_1D4B14A24((uint64_t)v8);
}

void sub_1D4B3267C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void *v11;

  __cxa_free_exception(v11);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  sub_1D4B14A24((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B326BC(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t sub_1D4B326C8(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
}

uint64_t sub_1D4B326D4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t sub_1D4B326DC(uint64_t a1)
{
  uint64_t v2;

  if (!*(_BYTE *)(a1 + 80))
    sub_1D4B3271C((_QWORD *)a1);
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
    return *(int *)(v2 + 32);
  else
    return 0;
}

_QWORD *sub_1D4B3271C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  std::runtime_error *exception;
  std::runtime_error *v18;
  _QWORD *v19;
  std::string v20;
  uint64_t v21[2];
  _QWORD v22[33];

  v1 = result;
  v2 = result[1];
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 56);
  v6 = result[5];
  v7 = v5 + v4 + result[6];
  if (v6 < v7 + 1)
  {
    sub_1D4B177C0((uint64_t)v21);
    sub_1D4B02240(v22, (uint64_t)"Invalid Metadata length: fileLength=", 36);
    v14 = (_QWORD *)std::ostream::operator<<();
    sub_1D4B02240(v14, (uint64_t)", metadataLength=", 17);
    v15 = (_QWORD *)std::ostream::operator<<();
    sub_1D4B02240(v15, (uint64_t)", footerLength=", 15);
    v16 = (_QWORD *)std::ostream::operator<<();
    sub_1D4B02240(v16, (uint64_t)", postscriptLength=", 19);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    sub_1D4B2D1D0(exception, &v20);
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (v4)
  {
    v8 = v6 + ~v7;
    v9 = *(unsigned int *)(v2 + 40);
    v10 = operator new(0x48uLL);
    sub_1D4B01E70(v10, *(_QWORD *)v2, v8, v4, *(_QWORD *)(v2 + 48), 0);
    v19 = v10;
    sub_1D4B2C08C(v9, (uint64_t *)&v19, *(_QWORD *)(v1[1] + 32), *(_QWORD *)(v1[1] + 48), v21);
    v11 = (uint64_t)v19;
    v19 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = operator new(0x30uLL);
    sub_1D4B0F754((uint64_t)v12);
    v13 = v1[9];
    v1[9] = v12;
    if (v13)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v12 = (void *)v1[9];
    }
    if ((sub_1D4BB191C((uint64_t)v12, v21[0]) & 1) == 0)
    {
      v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_1D4B2D1F0(v18, "Failed to parse the metadata");
      __cxa_throw(v18, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    result = (_QWORD *)v21[0];
    v21[0] = 0;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  *((_BYTE *)v1 + 80) = 1;
  return result;
}

void sub_1D4B3293C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  void *v17;
  int v18;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      sub_1D4B178EC((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

_QWORD *sub_1D4B329E8@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  std::logic_error *exception;
  _QWORD v16[6];
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v3 = a2;
  if ((*(uint64_t (**)(_QWORD *))(*a1 + 104))(a1) < a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "stripe index out of range");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  sub_1D4B0E348((uint64_t)v16, *(_QWORD *)(*(_QWORD *)(a1[7] + 40) + 8 * v3 + 8));
  v6 = (char *)operator new(0x58uLL);
  v7 = (uint64_t *)a1[1];
  v8 = *v7;
  v9 = v7[6];
  v10 = *((_DWORD *)v7 + 10);
  v11 = v7[4];
  v12 = v18;
  *(_OWORD *)(v6 + 8) = v17;
  v13 = v19;
  *(_QWORD *)v6 = &off_1E9848B58;
  *(_OWORD *)(v6 + 24) = v12;
  *((_QWORD *)v6 + 5) = v13;
  *((_QWORD *)v6 + 6) = v8;
  *((_QWORD *)v6 + 7) = v9;
  *((_DWORD *)v6 + 16) = v10;
  *((_QWORD *)v6 + 9) = v11;
  *((_QWORD *)v6 + 10) = 0;
  *a3 = v6;
  return sub_1D4B0E388(v16);
}

void sub_1D4B32AD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_1D4B32AF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t *v5;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    v2 = *(_QWORD *)(v1 + 32);
    v3 = *(_DWORD *)(v2 + 8);
    v4 = *(unsigned int *)(v2 + 12);
  }
  else
  {
    v5 = sub_1D4B29FE8();
    v3 = *(_DWORD *)v5;
    v4 = *((unsigned int *)v5 + 1);
  }
  return v3 | (unint64_t)(v4 << 32);
}

uint64_t sub_1D4B32B38(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 144);
}

uint64_t sub_1D4B32B44(uint64_t a1)
{
  uint64_t v1;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 56);
  if ((*(_BYTE *)(v1 + 16) & 0x20) == 0)
    return 0;
  v3 = *(_DWORD *)(v1 + 156);
  if (v3 <= 2)
    return v3;
  else
    return 0x7FFFFFFFLL;
}

uint64_t sub_1D4B32B6C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if ((*(_BYTE *)(v1 + 16) & 0x20) != 0)
    return *(unsigned int *)(v1 + 156);
  else
    return 0;
}

uint64_t sub_1D4B32B88(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if ((*(_BYTE *)(v1 + 16) & 0x10) != 0)
    return *(unsigned int *)(v1 + 76);
  else
    return 0;
}

uint64_t sub_1D4B32BA8(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 56) + 136);
}

uint64_t sub_1D4B32BB4(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80);
}

uint64_t sub_1D4B32BC4(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 56);
}

uint64_t sub_1D4B32BD4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t sub_1D4B32BDC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_1D4B32BE4(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 56) + 152);
}

uint64_t sub_1D4B32BF0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 40))(**(_QWORD **)(a1 + 8));
}

_QWORD *sub_1D4B32C04@<X0>(_QWORD *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  v3 = result[7];
  if (*(int *)(v3 + 80) >= 1)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = sub_1D4B35CB0((uint64_t)a2, 0, 0, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 88) + 8 * v5 + 8) + 24));
      v6 = *a2;
      *result = *a2;
      result[1] = a2;
      *(_QWORD *)(v6 + 8) = result;
      *a2 = (uint64_t)result;
      ++a2[2];
      ++v5;
      v3 = v4[7];
    }
    while (v5 < *(int *)(v3 + 80));
  }
  return result;
}

void sub_1D4B32C98(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1D4B35738(v1);
  _Unwind_Resume(a1);
}

void *sub_1D4B32CAC@<X0>(void *result@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  std::runtime_error *exception;
  __int128 *v17;
  __int128 v18;

  v4 = *((_QWORD *)result + 7);
  v5 = *(unsigned int *)(v4 + 80);
  if ((int)v5 < 1)
  {
LABEL_20:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2DA9C(exception, "key not found");
    __cxa_throw(exception, (struct type_info *)off_1E9845870, MEMORY[0x1E0DE42B0]);
  }
  v6 = 0;
  v7 = *(_QWORD *)(v4 + 88);
  v8 = *((_BYTE *)a2 + 23);
  if (v8 >= 0)
    v9 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
  else
    v9 = a2[1];
  if (v8 >= 0)
    v10 = (unsigned __int8 *)a2;
  else
    v10 = *a2;
  while (1)
  {
    v11 = *(_QWORD *)(v7 + 8 * v6 + 8);
    v12 = *(unsigned __int8 **)(v11 + 24);
    v13 = v12[23];
    v14 = (v13 & 0x80u) == 0 ? (unsigned __int8 *)v12[23] : (unsigned __int8 *)*((_QWORD *)v12 + 1);
    if (v14 == v9)
    {
      if ((v13 & 0x80) == 0)
      {
        if (!v12[23])
          break;
        v15 = v10;
        while (*v12 == *v15)
        {
          ++v12;
          ++v15;
          if (!--v13)
            goto LABEL_21;
        }
        goto LABEL_19;
      }
      result = (void *)memcmp(*(const void **)v12, v10, *((_QWORD *)v12 + 1));
      if (!(_DWORD)result)
        break;
    }
LABEL_19:
    if (++v6 == v5)
      goto LABEL_20;
  }
LABEL_21:
  v17 = *(__int128 **)(v11 + 32);
  if (*((char *)v17 + 23) < 0)
    return sub_1D4B1655C((_BYTE *)a3, *(void **)v17, *((_QWORD *)v17 + 1));
  v18 = *v17;
  *(_QWORD *)(a3 + 16) = *((_QWORD *)v17 + 2);
  *(_OWORD *)a3 = v18;
  return result;
}

void sub_1D4B32DF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B32E04(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  std::runtime_error *exception;
  std::runtime_error *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  std::string v40;
  _QWORD v41[2];
  uint64_t v42;
  int v43;
  uint64_t v44;

  v5 = *(unsigned int *)(a4 + 32);
  if ((int)v5 >= 1)
  {
    v7 = result;
    v8 = 0;
    v9 = *(_QWORD *)(a2 + 48);
    v36 = *(_QWORD *)(a2 + 56) + v9;
    v34 = *(unsigned int *)(a4 + 32);
    v35 = a4;
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a4 + 40) + 8 * v8 + 8);
      v11 = *(_QWORD *)(v10 + 32);
      v12 = v11 + v9;
      if (*(_DWORD *)(v10 + 24) == 6)
      {
        v37 = v11 + v9;
        v38 = *(_QWORD *)(v10 + 32);
        if (v12 > v36)
        {
          sub_1D4B177C0((uint64_t)v41);
          sub_1D4B02240(&v42, (uint64_t)"Malformed RowIndex stream meta in stripe ", 41);
          v28 = (_QWORD *)std::ostream::operator<<();
          sub_1D4B02240(v28, (uint64_t)": streamOffset=", 15);
          v29 = (_QWORD *)std::ostream::operator<<();
          sub_1D4B02240(v29, (uint64_t)", streamLength=", 15);
          v30 = (_QWORD *)std::ostream::operator<<();
          sub_1D4B02240(v30, (uint64_t)", stripeOffset=", 15);
          v31 = (_QWORD *)std::ostream::operator<<();
          sub_1D4B02240(v31, (uint64_t)", stripeIndexLength=", 20);
          std::ostream::operator<<();
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          sub_1D4B2D1D0(exception, &v40);
          __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
        }
        v13 = v7;
        v14 = *(_QWORD *)(v7 + 8);
        v15 = *(unsigned int *)(v14 + 40);
        v16 = operator new(0x48uLL);
        sub_1D4B01E70(v16, *(_QWORD *)v14, v9, v38, *(_QWORD *)(v14 + 48), 0);
        v39 = v16;
        sub_1D4B2C08C(v15, (uint64_t *)&v39, *(_QWORD *)(*(_QWORD *)(v13 + 8) + 32), *(_QWORD *)(*(_QWORD *)(v13 + 8) + 48), (uint64_t *)&v40);
        v7 = v13;
        v17 = (uint64_t)v39;
        v39 = 0;
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        sub_1D4B092CC((uint64_t)v41);
        if ((sub_1D4BB191C((uint64_t)v41, (uint64_t)v40.__r_.__value_.__l.__data_) & 1) == 0)
        {
          v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          sub_1D4B2D1F0(v33, "Failed to parse RowIndex from stripe footer");
          __cxa_throw(v33, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
        }
        if (v43 >= 1)
        {
          v18 = 0;
          v19 = *(_DWORD *)(v10 + 28);
          v20 = 8 * v43;
          do
          {
            v21 = *a5;
            if (*(_QWORD *)(*(_QWORD *)(v44 + v18 + 8) + 48))
              v22 = *(void **)(*(_QWORD *)(v44 + v18 + 8) + 48);
            else
              v22 = &unk_1EFEC66B0;
            v23 = v21 + 24 * v19;
            v25 = *(_QWORD *)(v23 + 8);
            v24 = *(_QWORD *)(v23 + 16);
            v26 = (uint64_t *)(v23 + 8);
            if (v25 >= v24)
            {
              v27 = sub_1D4B288B8((uint64_t *)(v21 + 24 * v19), (uint64_t)v22);
            }
            else
            {
              sub_1D4B077B8(v25, (uint64_t)v22);
              v27 = v25 + 120;
              *v26 = v25 + 120;
            }
            *v26 = v27;
            v18 += 8;
          }
          while (v20 != v18);
        }
        sub_1D4B0930C(v41);
        result = v40.__r_.__value_.__r.__words[0];
        v40.__r_.__value_.__r.__words[0] = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v5 = v34;
        a4 = v35;
        v12 = v37;
      }
      ++v8;
      v9 = v12;
    }
    while (v8 != v5);
  }
  return result;
}

void sub_1D4B330EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  void *v24;
  int v25;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
    {
LABEL_6:
      sub_1D4B178EC((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

BOOL sub_1D4B331AC(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *i;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(unsigned int *)(v2 + 80);
  if ((int)v3 < 1)
  {
    return 0;
  }
  else
  {
    v4 = 0;
    v5 = *(_QWORD *)(v2 + 88);
    v6 = *((_BYTE *)a2 + 23);
    if (v6 >= 0)
      v7 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    else
      v7 = a2[1];
    if (v6 >= 0)
      v8 = (unsigned __int8 *)a2;
    else
      v8 = *a2;
    v9 = 1;
    do
    {
      v10 = *(unsigned __int8 **)(*(_QWORD *)(v5 + 8 * v4 + 8) + 24);
      v11 = v10[23];
      if ((v11 & 0x80u) == 0)
        v12 = (unsigned __int8 *)v10[23];
      else
        v12 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
      if (v12 == v7)
      {
        if ((v11 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v10, v8, *((_QWORD *)v10 + 1)))
            return v9;
        }
        else
        {
          if (!v10[23])
            return v9;
          for (i = v8; *v10 == *i; ++i)
          {
            ++v10;
            if (!--v11)
              return v9;
          }
        }
      }
      v9 = ++v4 < v3;
    }
    while (v4 != v3);
  }
  return v9;
}

uint64_t sub_1D4B3328C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
}

void sub_1D4B33298(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  std::logic_error *exception;
  char v11[8];
  uint64_t v12;
  void **v13[2];
  char v14;
  uint64_t v15;
  _QWORD v16[12];
  uint64_t v17[3];

  if (!*(_BYTE *)(a1 + 80))
    sub_1D4B3271C((_QWORD *)a1);
  v6 = *(_QWORD *)(a1 + 72);
  if (!v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "No stripe statistics in file");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  sub_1D4B37638(v17, *(int *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8 * (int)a2 + 8) + 32));
  sub_1D4B0E348((uint64_t)v16, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 40) + 8 * (int)a2 + 8));
  sub_1D4B320E4(v16, *(_QWORD *)(a1 + 8), (uint64_t)v13);
  sub_1D4B32E04(a1, (uint64_t)v16, a2, (uint64_t)v13, v17);
  if ((v14 & 1) != 0)
    v7 = sub_1D4B43380(v15);
  else
    v7 = sub_1D4B43314();
  v8 = v7;
  v11[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  v12 = v8;
  v9 = operator new(0x28uLL);
  sub_1D4B3BA4C(v9, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 40) + 8 * (int)a2 + 8), v17, v11);
  *a3 = v9;
  sub_1D4B0BFBC(v13);
  sub_1D4B0E388(v16);
  v13[0] = (void **)v17;
  sub_1D4B37728(v13);
}

void sub_1D4B333FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;

  __cxa_free_exception(v24);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B33460@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t result;
  _BYTE v6[8];
  uint64_t v7;

  v6[0] = (*(uint64_t (**)(_QWORD *))(*a1 + 192))(a1);
  v7 = 0;
  v4 = operator new(0x20uLL);
  result = sub_1D4B3B5B8(v4, a1[7], v6);
  *a2 = v4;
  return result;
}

void sub_1D4B334C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B334D4@<X0>(_QWORD *a1@<X0>, unsigned int a2@<W1>, void **a3@<X8>)
{
  uint64_t v4;
  std::logic_error *exception;
  _BYTE v8[8];
  uint64_t v9;
  _QWORD v10[15];

  v4 = a1[7];
  if (a2 >= (unint64_t)*(int *)(v4 + 104))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "column index out of range");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  sub_1D4B077B8((uint64_t)v10, *(_QWORD *)(*(_QWORD *)(v4 + 112) + 8 * (int)a2 + 8));
  v8[0] = (*(uint64_t (**)(_QWORD *))(*a1 + 192))(a1);
  v9 = 0;
  *a3 = sub_1D4B3B168((uint64_t)v10, v8);
  return sub_1D4B078E0(v10);
}

void sub_1D4B33584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  void *v12;

  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

BOOL sub_1D4B335A8(uint64_t a1)
{
  sub_1D4B308BC();
  return dword_1EFEC6B48 <= (*(int (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
}

void sub_1D4B335E8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t (**v3)();
  _QWORD *v4;

  v3 = off_1E9847EC0;
  v2 = operator new(0x58uLL);
  v2[1] = v2 + 1;
  v2[2] = v2 + 1;
  v2[3] = 0;
  v2[4] = v2 + 4;
  *(_DWORD *)v2 = 0;
  v2[5] = v2 + 4;
  v2[6] = 0;
  v2[7] = 0;
  v2[8] = -1;
  *((_BYTE *)v2 + 72) = 1;
  *((_DWORD *)v2 + 19) = 6;
  *((_BYTE *)v2 + 80) = 0;
  v4 = v2;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)a1 + 224))(a1, &v3);
  v3 = off_1E9847EC0;
  sub_1D4B307CC(&v4, 0);
}

void sub_1D4B33694(_Unwind_Exception *a1)
{
  _QWORD **v1;

  sub_1D4B307CC(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1D4B336B0(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14[2];

  v6 = operator new(0x1A8uLL);
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  v14[0] = v8;
  v14[1] = (uint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  sub_1D4B31534((uint64_t)v6, v14, a2);
  *a3 = v7;
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1D4B33768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_1D4B1F3DC((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B33784(uint64_t a1)
{
  uint64_t v1;

  v1 = *(int *)(a1 + 96);
  if (v1 > 0x11)
    return 0;
  else
    return qword_1D4BD52C0[v1];
}

unint64_t sub_1D4B337A8(uint64_t a1, int a2)
{
  unint64_t v4;
  unint64_t v5;
  char v7;
  void *__p[3];

  memset(__p, 0, sizeof(__p));
  v4 = *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 56);
  v7 = 1;
  sub_1D4B31008((uint64_t)__p, v4, &v7);
  v5 = sub_1D4B33838(a1, a2, (uint64_t *)__p);
  if (__p[0])
    operator delete(__p[0]);
  return v5;
}

void sub_1D4B3381C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1D4B33838(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;

  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(unsigned int *)(v4 + 32);
  if (a2 < 0 || (int)v5 <= a2)
  {
    if ((int)v5 < 1)
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      v7 = (uint64_t *)(*(_QWORD *)(v4 + 40) + 8);
      do
      {
        v8 = *v7++;
        v9 = *(_QWORD *)(v8 + 64);
        if (v6 <= v9)
          v6 = v9;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8 * a2 + 8) + 64);
  }
  v10 = *(_DWORD *)(v4 + 56);
  v11 = 0;
  if (v10 >= 1)
  {
    v12 = 0;
    v13 = *a3;
    v14 = v10 & ~(v10 >> 31);
    do
    {
      if (((*(_QWORD *)(v13 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 8 * v12 + 8);
        v16 = sub_1D4B33784(v15);
        v17 = *(_DWORD *)(v15 + 96);
        v18 = v17 > 0x11;
        v19 = (1 << v17) & 0x30180;
        if (!v18 && v19 != 0)
        {
          v22 = 2 * v6;
          goto LABEL_25;
        }
        v11 += v16;
      }
      ++v12;
    }
    while (v14 != v12);
  }
  v21 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 24))(**(_QWORD **)(a1 + 8));
  if (v21 * v11 >= v6)
    v22 = v6;
  else
    v22 = v21 * v11;
  v4 = *(_QWORD *)(a1 + 56);
LABEL_25:
  v23 = *(_QWORD *)(a1 + 8);
  v24 = *(_QWORD *)(v23 + 8);
  v25 = *(_QWORD *)(v24 + 56);
  v26 = *(_QWORD *)(v24 + 80);
  v27 = *(int *)(v4 + 32);
  v28 = *(_DWORD *)(v23 + 40);
  if (v28)
  {
    v29 = *(unsigned int *)(v4 + 56);
    v36 = *(int *)(v4 + 32);
    if ((int)v29 < 1)
    {
      v31 = 0;
    }
    else
    {
      v30 = 0;
      v31 = 0;
      v32 = *a3;
      do
      {
        if (((*(_QWORD *)(v32 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v30) & 1) != 0)
          v31 += *(_QWORD *)(v23 + 32) * sub_1D4B33784(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 8 * v30 + 8));
        ++v30;
      }
      while (v29 != v30);
    }
    v33 = v31 << (v28 == 2);
    v27 = v36;
  }
  else
  {
    v33 = 0;
  }
  v34 = v25 + 0x4000;
  if (v22 > v25 + 0x4000)
    v34 = v22;
  if (v34 <= v26)
    v34 = v26;
  return v34 + 8 * v27 + v33;
}

unint64_t sub_1D4B33A30(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v10;
  _QWORD v12[3];
  _QWORD *v13[4];
  uint64_t v14;
  void **v15;
  unint64_t v16;
  uint64_t v17;
  void **v18;
  int v19;

  v16 = 0;
  v17 = 0;
  v15 = 0;
  v6 = *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 56);
  LOBYTE(v12[0]) = 0;
  sub_1D4B31008((uint64_t)&v15, v6, v12);
  sub_1D4B31498(v12, *(_QWORD *)(a1 + 8));
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 24) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24));
  v8 = *(_QWORD *)(a2 + 8);
  if (v7 != 12 || v8 == a2)
  {
    if (v16)
    {
      v18 = v15;
      v19 = 0;
      sub_1D4B366DC(&v18, v16);
    }
  }
  else
  {
    do
    {
      sub_1D4B31118((uint64_t)v12, &v15, *(_QWORD *)(v8 + 16));
      v8 = *(_QWORD *)(v8 + 8);
    }
    while (v8 != a2);
  }
  sub_1D4B30B70((uint64_t)v12, (uint64_t *)&v15, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24));
  *v15 = (void *)((unint64_t)*v15 | 1);
  v10 = sub_1D4B33838(a1, a3, (uint64_t *)&v15);
  v18 = (void **)&v14;
  sub_1D4B36914(&v18);
  sub_1D4B28BAC((uint64_t)v13, v13[1]);
  sub_1D4B368C4((uint64_t)v12, (char *)v12[1]);
  if (v15)
    operator delete(v15);
  return v10;
}

void sub_1D4B33B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)(v10 - 72);
  if (v12)
    operator delete(v12);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1D4B33B98(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v10;
  _QWORD v12[3];
  _QWORD *v13[4];
  uint64_t v14;
  void **v15;
  unint64_t v16;
  uint64_t v17;
  void **v18;
  int v19;

  v16 = 0;
  v17 = 0;
  v15 = 0;
  v6 = *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 56);
  LOBYTE(v12[0]) = 0;
  sub_1D4B31008((uint64_t)&v15, v6, v12);
  sub_1D4B31498(v12, *(_QWORD *)(a1 + 8));
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 24) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24));
  v8 = *(_QWORD *)(a2 + 8);
  if (v7 != 12 || v8 == a2)
  {
    if (v16)
    {
      v18 = v15;
      v19 = 0;
      sub_1D4B366DC(&v18, v16);
    }
  }
  else
  {
    do
    {
      sub_1D4B31278((uint64_t)v12, &v15, (const void **)(v8 + 16));
      v8 = *(_QWORD *)(v8 + 8);
    }
    while (v8 != a2);
  }
  sub_1D4B30B70((uint64_t)v12, (uint64_t *)&v15, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24));
  *v15 = (void *)((unint64_t)*v15 | 1);
  v10 = sub_1D4B33838(a1, a3, (uint64_t *)&v15);
  v18 = (void **)&v14;
  sub_1D4B36914(&v18);
  sub_1D4B28BAC((uint64_t)v13, v13[1]);
  sub_1D4B368C4((uint64_t)v12, (char *)v12[1]);
  if (v15)
    operator delete(v15);
  return v10;
}

void sub_1D4B33CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)(v10 - 72);
  if (v12)
    operator delete(v12);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1D4B33D00(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v10[3];
  _QWORD *v11[4];
  uint64_t v12;
  void **v13;
  unint64_t v14;
  uint64_t v15;
  void **v16;
  int v17;

  v14 = 0;
  v15 = 0;
  v13 = 0;
  v6 = *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 56);
  LOBYTE(v10[0]) = 0;
  sub_1D4B31008((uint64_t)&v13, v6, v10);
  sub_1D4B31498(v10, *(_QWORD *)(a1 + 8));
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 == a2)
  {
    if (v14)
    {
      v16 = v13;
      v17 = 0;
      sub_1D4B366DC(&v16, v14);
    }
  }
  else
  {
    do
    {
      sub_1D4B31354((uint64_t)v10, &v13, *(_QWORD *)(v7 + 16));
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != a2);
  }
  sub_1D4B30B70((uint64_t)v10, (uint64_t *)&v13, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24));
  *v13 = (void *)((unint64_t)*v13 | 1);
  v8 = sub_1D4B33838(a1, a3, (uint64_t *)&v13);
  v16 = (void **)&v12;
  sub_1D4B36914(&v16);
  sub_1D4B28BAC((uint64_t)v11, v11[1]);
  sub_1D4B368C4((uint64_t)v10, (char *)v10[1]);
  if (v13)
    operator delete(v13);
  return v8;
}

void sub_1D4B33E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)(v10 - 72);
  if (v12)
    operator delete(v12);
  _Unwind_Resume(exception_object);
}

BOOL sub_1D4B33E50(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BOOL8 result;

  v4 = *(_QWORD *)(a1 + 144);
  if (*(_QWORD *)(a1 + 136) >= v4)
  {
    *(_QWORD *)(a2 + 16) = 0;
    result = 0;
    if (v4)
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 40)
                                                    + ((uint64_t)((v4 << 32) - 0x100000000) >> 29)
                                                    + 8)
                                        + 80)
                            + *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v4 - 8);
    else
      *(_QWORD *)(a1 + 120) = 0;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 152);
    if (!v5)
    {
      sub_1D4B31A34(a1);
      v5 = *(_QWORD *)(a1 + 152);
    }
    v6 = *(_QWORD *)(a1 + 160) - v5;
    if (v6 >= *(_QWORD *)(a2 + 8))
      v7 = *(_QWORD *)(a2 + 8);
    else
      v7 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    v8 = 32;
    if (!*(_BYTE *)(a1 + 376))
      v8 = 24;
    (*(void (**)(void))(**(_QWORD **)(a1 + 368) + v8))();
    v9 = *(_QWORD *)(a1 + 136);
    v10 = *(_QWORD *)(a1 + 152);
    v11 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 120) = v10 + *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v9);
    *(_QWORD *)(a1 + 152) = v10 + v7;
    if (v10 + v7 >= v11)
    {
      *(_QWORD *)(a1 + 136) = v9 + 1;
      *(_QWORD *)(a1 + 152) = 0;
    }
    return v7 != 0;
  }
  return result;
}

uint64_t sub_1D4B33F64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 96))(v4, a2, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48), *(unsigned __int8 *)(a1 + 376));
}

void sub_1D4B33FB8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unsigned __int8 v6;
  size_t v7;
  unint64_t v8;
  const void *v10;
  const void *p_s2;
  size_t v12;
  void *v14;
  const void *v15;
  std::runtime_error *exception;
  std::runtime_error *v17;
  void *__s2;
  size_t v19;
  unsigned __int8 v20;

  sub_1D4BCA448(&__s2, "ORC");
  v6 = v20;
  if ((char)v20 < 0)
  {
    v7 = v19;
    v12 = *(_QWORD *)(a2 + 24);
    if (v19 > a3 || v12 < v19)
    {
LABEL_23:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_1D4B2D1F0(exception, "Invalid ORC postscript length");
      __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v10 = (const void *)(~v19 + *(_QWORD *)(a2 + 16) + v12);
    p_s2 = __s2;
  }
  else
  {
    v7 = v20;
    v8 = *(_QWORD *)(a2 + 24);
    if (v20 > a3 || v8 < v20)
      goto LABEL_23;
    v10 = (const void *)(~(unint64_t)v20 + *(_QWORD *)(a2 + 16) + v8);
    p_s2 = &__s2;
  }
  if (memcmp(v10, p_s2, v7))
  {
    v14 = operator new[](v7);
    (*(void (**)(uint64_t, void *, size_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, v14, v7, 0);
    if ((v20 & 0x80u) == 0)
      v15 = &__s2;
    else
      v15 = __s2;
    if (memcmp(v14, v15, v7))
    {
      v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_1D4B2D1F0(v17, "Not an ORC file");
      __cxa_throw(v17, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    operator delete[](v14);
    v6 = v20;
  }
  if ((v6 & 0x80) != 0)
    operator delete(__s2);
}

void sub_1D4B34138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete[](v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_1D4B3418C@<W0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  void *v9;
  _BOOL8 result;
  _QWORD *v11;
  std::runtime_error *exception;
  std::runtime_error *v13;
  std::string v14;
  std::string v15;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  sub_1D4B33FB8(a1, a2, a3);
  v9 = operator new(0x60uLL);
  sub_1D4B13B68((uint64_t)v9);
  if (v8 < a3 + 1)
  {
    sub_1D4B177C0((uint64_t)&v15);
    sub_1D4B02240(&v15.__r_.__value_.__r.__words[2], (uint64_t)"Invalid ORC postscript length: ", 31);
    v11 = (_QWORD *)std::ostream::operator<<();
    sub_1D4B02240(v11, (uint64_t)", file length = ", 16);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    sub_1D4B2D1D0(exception, &v14);
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  result = sub_1D4BB1B18((uint64_t)v9, ~a3 + v7 + v8, a3);
  if (!result)
  {
    v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    std::operator+<char>();
    sub_1D4B2D1D0(v13, &v15);
    __cxa_throw(v13, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  *a4 = v9;
  return result;
}

void sub_1D4B34318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void *v21;
  int v22;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
    {
LABEL_6:
      sub_1D4B178EC((uint64_t)&a15);
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

uint64_t sub_1D4B343C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  std::runtime_error *v13;
  _QWORD *v14;
  std::runtime_error *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  std::runtime_error *v21;
  std::runtime_error *exception;
  std::string v23;
  _QWORD v24[2];
  _QWORD v25[11];
  char v26;
  uint64_t v27;

  sub_1D4B177C0((uint64_t)v24);
  v2 = *(unsigned int *)(a1 + 56);
  if ((int)v2 < 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Footer is corrupt: no types found");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v3 = 0;
  v4 = *(_QWORD *)(a1 + 64);
  do
  {
    v5 = *(_QWORD *)(v4 + 8 * v3 + 8);
    v6 = *(unsigned int *)(v5 + 24);
    if ((int)v6 >= 1)
    {
      v7 = 0;
      v8 = *(_QWORD *)(v5 + 32);
      do
      {
        v9 = *(int *)(v8 + 4 * v7 + 8);
        if (v3 >= v9)
        {
          sub_1D4B02240(v25, (uint64_t)"Footer is corrupt: malformed link from type ", 44);
          v14 = (_QWORD *)std::ostream::operator<<();
          sub_1D4B02240(v14, (uint64_t)" to ", 4);
          std::ostream::operator<<();
          v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          sub_1D4B2D1D0(v15, &v23);
          __cxa_throw(v15, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
        }
        if ((int)v9 >= (int)v2)
        {
          sub_1D4B02240(v25, (uint64_t)"Footer is corrupt: types(", 25);
          v12 = (_QWORD *)std::ostream::operator<<();
          sub_1D4B02240(v12, (uint64_t)") not exists", 12);
          v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          sub_1D4B2D1D0(v13, &v23);
          __cxa_throw(v13, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
        }
        if (v7 && *(_DWORD *)(v8 + 4 * v7 + 4) >= (int)v9)
        {
          sub_1D4B02240(v25, (uint64_t)"Footer is corrupt: subType(", 27);
          v16 = (_QWORD *)std::ostream::operator<<();
          sub_1D4B02240(v16, (uint64_t)") >= subType(", 13);
          v17 = (_QWORD *)std::ostream::operator<<();
          sub_1D4B02240(v17, (uint64_t)") in types(", 11);
          v18 = (_QWORD *)std::ostream::operator<<();
          sub_1D4B02240(v18, (uint64_t)"). (", 4);
          v19 = (_QWORD *)std::ostream::operator<<();
          sub_1D4B02240(v19, (uint64_t)" >= ", 4);
          v20 = (_QWORD *)std::ostream::operator<<();
          sub_1D4B02240(v20, (uint64_t)")", 1);
          v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::stringbuf::str();
          sub_1D4B2D1D0(v21, &v23);
          __cxa_throw(v21, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
        }
        ++v7;
      }
      while (v6 != v7);
    }
    ++v3;
  }
  while (v3 != v2);
  v24[0] = *MEMORY[0x1E0DE4F50];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v25[0] = v10;
  v25[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v26 < 0)
    operator delete((void *)v25[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1D82646E0](&v27);
}

void sub_1D4B346E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_1D4B178EC((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_1D4B34748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t result;
  std::runtime_error *exception;
  std::string v18;
  _QWORD *v19;
  uint64_t v20;

  v10 = *(_QWORD *)(a2 + 16) + a3;
  v11 = sub_1D4B30910(a4);
  v12 = operator new(0x28uLL);
  sub_1D4B01A14(v12, v10, *(_QWORD *)(a4 + 56), 0);
  v19 = v12;
  if ((*(_DWORD *)(a4 + 16) & 4) != 0)
    v13 = *(_QWORD *)(a4 + 64);
  else
    v13 = 0x40000;
  sub_1D4B2C08C(v11, (uint64_t *)&v19, v13, a5, &v20);
  v14 = (uint64_t)v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = operator new(0xA8uLL);
  sub_1D4B12644((uint64_t)v15);
  if ((sub_1D4BB191C((uint64_t)v15, v20) & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    std::operator+<char>();
    sub_1D4B2D1D0(exception, &v18);
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  sub_1D4B343C0((uint64_t)v15);
  *a6 = v15;
  result = v20;
  v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1D4B348A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  void *v18;
  int v19;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      if (a17)
        (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void sub_1D4B3494C(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::runtime_error *exception;
  std::runtime_error *v44;
  _QWORD *v45;
  std::runtime_error *v46;
  __int128 v47;
  std::string v48;
  _QWORD v49[2];
  uint64_t v50;
  void *v51;
  void *v52;
  unint64_t v53;
  unint64_t v54;
  __int128 __dst;
  uint64_t v56;
  __int128 v57;

  v6 = operator new(0x40uLL);
  *v6 = 0u;
  v6[1] = 0u;
  v6[2] = 0u;
  v6[3] = 0u;
  sub_1D4B37824(&v57, (uint64_t)v6);
  v7 = v57;
  *(_QWORD *)(v57 + 48) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
  *(_QWORD *)(v7 + 56) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8);
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(v8 + 47) < 0)
  {
    sub_1D4B1655C(&__dst, *(void **)(v8 + 24), *(_QWORD *)(v8 + 32));
  }
  else
  {
    __dst = *(_OWORD *)(v8 + 24);
    v56 = *(_QWORD *)(v8 + 40);
  }
  v9 = HIBYTE(v56);
  if (v56 < 0)
    v9 = *((_QWORD *)&__dst + 1);
  if (v9)
  {
    sub_1D4B149B4((uint64_t)v49);
    if (!sub_1D4BB19B4((uint64_t)v49, (uint64_t *)&__dst))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_1D4B2D1F0(exception, "Failed to parse the file tail from string");
      __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v10 = v57;
    v11 = operator new(0x60uLL);
    v12 = v11;
    if (v51)
      v13 = v51;
    else
      v13 = &unk_1EFEC6500;
    sub_1D4B13C78((uint64_t)v11, (uint64_t)v13);
    v14 = *(_QWORD *)(v10 + 8);
    *(_QWORD *)(v10 + 8) = v12;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v57;
    v16 = operator new(0xA8uLL);
    v17 = v16;
    if (v52)
      v18 = v52;
    else
      v18 = &unk_1EFEC6348;
    sub_1D4B12910((uint64_t)v16, (uint64_t)v18);
    v19 = *(_QWORD *)(v15 + 16);
    *(_QWORD *)(v15 + 16) = v17;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = v53;
    v21 = v54;
    sub_1D4B14A24((uint64_t)v49);
  }
  else
  {
    v22 = **(_QWORD **)(a2 + 8);
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 16))(*a1);
    if (v23 >= v22)
      v20 = v22;
    else
      v20 = v23;
    if (v20 >= 0x4000)
      v24 = 0x4000;
    else
      v24 = v20;
    if (v24 <= 3)
    {
      v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_1D4B2D1F0(v44, "File size too small");
      __cxa_throw(v44, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v25 = operator new(0x28uLL);
    sub_1D4B2EFDC(v25, *(_QWORD *)(v57 + 48), v24);
    (*(void (**)(uint64_t, _QWORD, unint64_t, unint64_t))(*(_QWORD *)*a1 + 32))(*a1, v25[2], v24, v20 - v24);
    v21 = *(unsigned __int8 *)(v24 + v25[2] - 1);
    sub_1D4B3418C(*a1, (uint64_t)v25, v21, v49);
    v26 = v57;
    v27 = v49[0];
    v28 = *(_QWORD *)(v57 + 8);
    *(_QWORD *)(v57 + 8) = v49[0];
    if (v28)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
      v26 = v57;
      v27 = *(_QWORD *)(v57 + 8);
    }
    v29 = *(_QWORD *)(v27 + 56);
    v30 = v21 + v29 + 1;
    if (v20 <= v30)
    {
      sub_1D4B177C0((uint64_t)v49);
      sub_1D4B02240(&v50, (uint64_t)"Invalid ORC tailSize=", 21);
      v45 = (_QWORD *)std::ostream::operator<<();
      sub_1D4B02240(v45, (uint64_t)", fileLength=", 13);
      std::ostream::operator<<();
      v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      sub_1D4B2D1D0(v46, &v48);
      __cxa_throw(v46, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v31 = v24 - v30;
    if (v24 < v30)
    {
      sub_1D4B2EF9C((uint64_t)v25, *(_QWORD *)(v27 + 56));
      (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t))(*(_QWORD *)*a1 + 32))(*a1, v25[2], v29, v20 - v30);
      v31 = 0;
      v26 = v57;
      v27 = *(_QWORD *)(v57 + 8);
    }
    sub_1D4B34748(*a1, (uint64_t)v25, v31, v27, *(_QWORD *)(v26 + 48), v49);
    v32 = *(_QWORD *)(v57 + 16);
    *(_QWORD *)(v57 + 16) = v49[0];
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    (*(void (**)(_QWORD *))(*v25 + 8))(v25);
  }
  v33 = (uint64_t *)v57;
  v34 = *a1;
  *a1 = 0;
  v35 = *v33;
  *v33 = v34;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = operator new(0x58uLL);
  v47 = v57;
  v57 = 0uLL;
  sub_1D4B32324((uint64_t)v36, (uint64_t)&v47, a2, v20, v21);
  *a3 = v36;
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (SHIBYTE(v56) < 0)
    operator delete((void *)__dst);
  v40 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_1D4B34DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  void *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      sub_1D4B178EC((uint64_t)&a17);
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      if (*(char *)(v20 - 121) < 0)
        operator delete(*(void **)(v20 - 144));
      sub_1D4B1F3DC(v20 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

_QWORD *sub_1D4B34EE0@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  _QWORD *v40;
  char *v41;
  __int128 v42;
  int64x2_t v43;
  char *v44;
  uint64_t v45;
  uint64_t **v46;
  uint64_t v47;
  std::runtime_error *v49;
  std::logic_error *exception;
  std::string *v51;
  __int128 v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v57;
  int64x2_t v58;
  char *v59;
  _QWORD v60[4];
  int v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unsigned int v65;
  std::string v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  std::string v70;
  uint64_t v71;
  unsigned int *v72;
  int64x2_t v73;
  char *v74;
  char **v75;

  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)a4 = a4 + 8;
  v5 = *(_QWORD *)(a1 + 56);
  if (*(_DWORD *)(v5 + 32) <= a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v70, a2);
    v51 = std::string::insert(&v70, 0, "Illegal stripe index: ");
    v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v66);
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v7 = (_QWORD *)sub_1D4B0E348((uint64_t)&v70, *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8 * (int)a2 + 8));
  sub_1D4B320E4(v7, *(_QWORD *)(a1 + 8), (uint64_t)&v66);
  v8 = v67;
  if (v67 >= 1)
  {
    v9 = 0;
    v10 = v71;
    v11 = (_QWORD *)(a3 + 8);
    v53 = (_QWORD *)(a3 + 8);
    v54 = a3;
    do
    {
      v12 = *(_QWORD *)(v68 + 8 * v9 + 8);
      v14 = *(_DWORD *)(v12 + 24);
      v13 = *(_DWORD *)(v12 + 28);
      v65 = v13;
      v15 = *(_QWORD *)(v12 + 32);
      if (v14 == 8)
      {
        if (!*(_QWORD *)(a3 + 16))
          goto LABEL_17;
        v16 = *v11;
        if (*v11)
        {
          v17 = v11;
          do
          {
            v18 = *(_DWORD *)(v16 + 28);
            v19 = v18 >= v13;
            if (v18 >= v13)
              v20 = (uint64_t *)v16;
            else
              v20 = (uint64_t *)(v16 + 8);
            if (v19)
              v17 = (_QWORD *)v16;
            v16 = *v20;
          }
          while (*v20);
          if (v17 != v11 && v13 >= *((_DWORD *)v17 + 7))
          {
LABEL_17:
            v21 = *(_QWORD *)(a1 + 8);
            v22 = *(unsigned int *)(v21 + 40);
            v23 = operator new(0x48uLL);
            sub_1D4B01E70(v23, *(_QWORD *)v21, v10, v15, *(_QWORD *)(v21 + 48), 0);
            v63 = v23;
            sub_1D4B2C08C(v22, (uint64_t *)&v63, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48), &v64);
            v24 = (uint64_t)v63;
            v63 = 0;
            if (v24)
              (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
            sub_1D4B0A220((uint64_t)v60);
            if ((sub_1D4BB191C((uint64_t)v60, v64) & 1) == 0)
            {
              v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              sub_1D4B2D1F0(v49, "Failed to parse BloomFilterIndex");
              __cxa_throw(v49, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
            }
            v58 = 0uLL;
            v59 = 0;
            if (v61 >= 1)
            {
              for (i = 0; i < v61; ++i)
              {
                v26 = *(int *)(v12 + 28);
                LODWORD(v72) = *(_DWORD *)(v12 + 24);
                sub_1D4B17F3C(&v72, *(_QWORD *)(v69 + 8 * v26 + 8), *(_QWORD *)(v62 + 8 * i + 8), &v57);
                v27 = v57;
                v28 = operator new(0x20uLL);
                v29 = v28;
                *v28 = &unk_1E984AF20;
                v28[1] = 0;
                v28[2] = 0;
                v28[3] = v27;
                v57 = 0;
                v30 = v58.i64[1];
                if (v58.i64[1] >= (unint64_t)v59)
                {
                  v32 = (v58.i64[1] - v58.i64[0]) >> 4;
                  v33 = v32 + 1;
                  if ((unint64_t)(v32 + 1) >> 60)
                    sub_1D4B182AC();
                  v34 = (uint64_t)&v59[-v58.i64[0]];
                  if ((uint64_t)&v59[-v58.i64[0]] >> 3 > v33)
                    v33 = v34 >> 3;
                  if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
                    v35 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v35 = v33;
                  v75 = &v59;
                  v36 = (char *)sub_1D4B35A14((uint64_t)&v59, v35);
                  v38 = &v36[16 * v32];
                  *(_QWORD *)v38 = v27;
                  *((_QWORD *)v38 + 1) = v29;
                  v39 = (_QWORD *)v58.i64[1];
                  v40 = (_QWORD *)v58.i64[0];
                  if (v58.i64[1] == v58.i64[0])
                  {
                    v43 = vdupq_n_s64(v58.u64[1]);
                    v41 = &v36[16 * v32];
                  }
                  else
                  {
                    v41 = &v36[16 * v32];
                    do
                    {
                      v42 = *((_OWORD *)v39 - 1);
                      v39 -= 2;
                      *((_OWORD *)v41 - 1) = v42;
                      v41 -= 16;
                      *v39 = 0;
                      v39[1] = 0;
                    }
                    while (v39 != v40);
                    v43 = v58;
                  }
                  v31 = v38 + 16;
                  v58.i64[0] = (uint64_t)v41;
                  v58.i64[1] = (uint64_t)(v38 + 16);
                  v73 = v43;
                  v44 = v59;
                  v59 = &v36[16 * v37];
                  v74 = v44;
                  v72 = (unsigned int *)v43.i64[0];
                  sub_1D4B37A14((uint64_t)&v72);
                }
                else
                {
                  *(_QWORD *)v58.i64[1] = v27;
                  *(_QWORD *)(v30 + 8) = v28;
                  v31 = (_QWORD *)(v30 + 16);
                }
                v58.i64[1] = (uint64_t)v31;
                v45 = v57;
                v57 = 0;
                if (v45)
                  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
              }
            }
            v72 = &v65;
            v46 = sub_1D4B37A60((uint64_t **)a4, &v65, (uint64_t)&unk_1D4BD512B, &v72) + 5;
            if (v46 != (uint64_t **)&v58)
              sub_1D4B357C8((uint64_t)v46, (uint64_t *)v58.i64[0], (uint64_t *)v58.i64[1], (v58.i64[1] - v58.i64[0]) >> 4);
            v72 = (unsigned int *)&v58;
            sub_1D4B35A48((void ***)&v72);
            sub_1D4B0A260(v60);
            v47 = v64;
            v64 = 0;
            a3 = v54;
            if (v47)
              (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
            v8 = v67;
            v11 = v53;
          }
        }
      }
      v10 += v15;
      ++v9;
    }
    while (v9 < v8);
  }
  sub_1D4B0BFBC(&v66);
  return sub_1D4B0E388(&v70);
}

void sub_1D4B35330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  int v34;
  void *v35;
  uint64_t v36;

  if (a34 < 0)
    operator delete(__p);
  if (*(char *)(v36 - 201) < 0)
  {
    operator delete(*(void **)(v36 - 224));
    if ((v34 & 1) == 0)
    {
LABEL_8:
      sub_1D4B37964(a12, *(char **)(a12 + 8));
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v35);
  goto LABEL_8;
}

_QWORD *sub_1D4B35480(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = off_1E98477C0;
  sub_1D4B369A0((uint64_t)(a1 + 48));
  v2 = a1[46];
  a1[46] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1D4B0BFBC(a1 + 33);
  sub_1D4B0E388(a1 + 21);
  v3 = a1[14];
  a1[14] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1D4B2F7C0((uint64_t)(a1 + 9));
  v4 = (void *)a1[5];
  if (v4)
    operator delete(v4);
  sub_1D4B1F3DC((uint64_t)(a1 + 2));
  return a1;
}

void sub_1D4B35510(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = off_1E98477C0;
  sub_1D4B369A0((uint64_t)(a1 + 48));
  v2 = a1[46];
  a1[46] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1D4B0BFBC(a1 + 33);
  sub_1D4B0E388(a1 + 21);
  v3 = a1[14];
  a1[14] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1D4B2F7C0((uint64_t)(a1 + 9));
  v4 = (void *)a1[5];
  if (v4)
    operator delete(v4);
  sub_1D4B1F3DC((uint64_t)(a1 + 2));
  operator delete(a1);
}

_QWORD *sub_1D4B355A0(_QWORD *a1)
{
  uint64_t v2;
  void **v3;

  *a1 = off_1E98473A8;
  v2 = a1[9];
  a1[9] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)a1[4];
  a1[3] = &off_1E98477A0;
  a1[4] = 0;
  if (v3)
    sub_1D4B35AB8((_DWORD)a1 + 32, v3);
  sub_1D4B1F3DC((uint64_t)(a1 + 1));
  return a1;
}

void sub_1D4B35608(_QWORD *a1)
{
  uint64_t v2;
  void **v3;

  *a1 = off_1E98473A8;
  v2 = a1[9];
  a1[9] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)a1[4];
  a1[3] = &off_1E98477A0;
  a1[4] = 0;
  if (v3)
    sub_1D4B35AB8((_DWORD)a1 + 32, v3);
  sub_1D4B1F3DC((uint64_t)(a1 + 1));
  operator delete(a1);
}

_QWORD *sub_1D4B35670(_QWORD *a1)
{
  uint64_t v2;

  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  v2 = MEMORY[0x1E0DE4A50];
  *a1 = -1;
  a1[1] = v2;
  a1[2] = sub_1D4B2F83C();
  return a1;
}

void sub_1D4B356BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4B356D8(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void sub_1D4B35738(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = a1[1];
    v4 = *(_QWORD **)v2;
    v4[1] = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    while ((_QWORD *)v2 != a1)
    {
      v5 = *(_QWORD *)(v2 + 8);
      sub_1D4B35798((int)a1, (void **)v2);
      v2 = v5;
    }
  }
}

void sub_1D4B35798(int a1, void **__p)
{
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

uint64_t sub_1D4B357C8(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;

  v6 = a2;
  v8 = *(uint64_t **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    sub_1D4B35978((void **)a1);
    if (a4 >> 60)
      sub_1D4B182AC();
    v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v10 = v9 >> 3;
    if (v9 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = (uint64_t)sub_1D4B359D4((_QWORD *)a1, v11);
    v13 = *(uint64_t **)(a1 + 8);
    while (v6 != a3)
    {
      v14 = v6[1];
      *v13 = *v6;
      v13[1] = v14;
      if (v14)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v6 += 2;
      v13 += 2;
    }
LABEL_25:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  result = *(_QWORD *)(a1 + 8);
  v17 = (result - (uint64_t)v8) >> 4;
  if (v17 < a4)
  {
    v18 = &a2[2 * v17];
    if ((uint64_t *)result != v8)
    {
      v19 = 16 * v17;
      do
      {
        result = (uint64_t)sub_1D4B1B648(v8, v6);
        v6 += 2;
        v8 += 2;
        v19 -= 16;
      }
      while (v19);
      v8 = *(uint64_t **)(a1 + 8);
    }
    v13 = v8;
    if (v18 != a3)
    {
      v13 = v8;
      do
      {
        v20 = v18[1];
        *v13 = *v18;
        v13[1] = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v18 += 2;
        v13 += 2;
      }
      while (v18 != a3);
    }
    goto LABEL_25;
  }
  if (a2 == a3)
  {
    v23 = v8;
  }
  else
  {
    v23 = v8;
    do
    {
      sub_1D4B1B648(v8, v6);
      v6 += 2;
      v8 += 2;
      v23 += 2;
    }
    while (v6 != a3);
    result = *(_QWORD *)(a1 + 8);
  }
  while ((uint64_t *)result != v23)
    result = sub_1D4B1F3DC(result - 16);
  *(_QWORD *)(a1 + 8) = v23;
  return result;
}

void sub_1D4B35978(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = sub_1D4B1F3DC(v3 - 16);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_1D4B359D4(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    sub_1D4B182AC();
  result = (char *)sub_1D4B35A14((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *sub_1D4B35A14(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_1D4B18174();
  return operator new(16 * a2);
}

void sub_1D4B35A48(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_1D4B1F3DC(v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1D4B35AB8(int a1, void **__p)
{
  if (__p)
  {
    if (*((char *)__p + 47) < 0)
      operator delete(__p[3]);
    operator delete(__p);
  }
}

uint64_t *sub_1D4B35AF0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *i;

  for (i = (uint64_t *)a1[1]; a2 != a3 && i != a1; i = (uint64_t *)i[1])
  {
    i[2] = *(_QWORD *)(a2 + 16);
    a2 = *(_QWORD *)(a2 + 8);
  }
  if (i == a1)
    return sub_1D4B35B40((uint64_t)a1, a1, a2, a3);
  else
    return sub_1D4B35C40((uint64_t)a1, i, a1);
}

uint64_t *sub_1D4B35B40(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  if (a3 != a4)
  {
    v8 = operator new(0x18uLL);
    v9 = v8;
    *v8 = 0;
    v8[1] = 0;
    v10 = *(_QWORD *)(a3 + 8);
    v8[2] = *(_QWORD *)(a3 + 16);
    v11 = 1;
    if (v10 != a4)
    {
      v12 = v8;
      do
      {
        v8 = operator new(0x18uLL);
        *v8 = v12;
        v8[1] = 0;
        v8[2] = *(_QWORD *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        v10 = *(_QWORD *)(v10 + 8);
        v12 = v8;
      }
      while (v10 != a4);
    }
    v13 = *a2;
    *(_QWORD *)(v13 + 8) = v9;
    *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(_QWORD *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_1D4B35C0C(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1D4B35C2C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *sub_1D4B35C40(uint64_t a1, uint64_t *__p, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (__p != a3)
  {
    v5 = *a3;
    v6 = *__p;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    do
    {
      v7 = (uint64_t *)__p[1];
      --*(_QWORD *)(a1 + 16);
      operator delete(__p);
      __p = v7;
    }
    while (v7 != a3);
  }
  return a3;
}

_QWORD *sub_1D4B35CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _BYTE *v8;

  v7 = operator new(0x28uLL);
  *v7 = a2;
  v7[1] = a3;
  v8 = v7 + 2;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_1D4B1655C(v8, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a4;
    v7[4] = *(_QWORD *)(a4 + 16);
  }
  return v7;
}

void sub_1D4B35D14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B35D28@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;

  v5 = result;
  v8 = a3;
  v9 = a4;
  if (result != a2)
  {
    do
    {
      result = sub_1D4B35D90((uint64_t)&v8, v5);
      v5 += 24;
    }
    while (v5 != a2);
    a3 = v8;
    a4 = v9;
    v5 = a2;
  }
  *a5 = v5;
  a5[1] = a3;
  a5[2] = a4;
  return result;
}

uint64_t sub_1D4B35D90(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  sub_1D4B02240(v3, a2, v5);
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = strlen(*(const char **)(a1 + 8));
    sub_1D4B02240(*(_QWORD **)a1, v6, v7);
  }
  return a1;
}

uint64_t *sub_1D4B35DFC(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    sub_1D4B29854(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

_QWORD *sub_1D4B35EB8(_QWORD *result, __int128 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  v2 = result;
  v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    result = sub_1D4B1655C((_BYTE *)result[1], *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_1D4B35F0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B35F14(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1D4B182AC();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1D4B29B64(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_1D4B1655C(v11, *(void **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
  }
  v16 = v11 + 24;
  sub_1D4B36034(a1, v15);
  v13 = a1[1];
  sub_1D4B361BC((uint64_t)v15);
  return v13;
}

void sub_1D4B36020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B361BC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B36034(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1D4B360A8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1D4B360A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  sub_1D4B36144((uint64_t)v12);
  return a6;
}

uint64_t sub_1D4B36144(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1D4B36178(a1);
  return a1;
}

void sub_1D4B36178(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

uint64_t sub_1D4B361BC(uint64_t a1)
{
  sub_1D4B361F0(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1D4B361F0(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

_OWORD *sub_1D4B36244(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)sub_1D4B362DC((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    sub_1D4B29854(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *sub_1D4B362DC(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!sub_1D4B36378(v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!sub_1D4B36378(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL sub_1D4B36378(uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

void sub_1D4B363E0(char **a1, unint64_t a2)
{
  unint64_t v3;
  char *v4;
  __int128 v5;
  char *v6;
  int v7;
  char *v8;
  int v9;
  char *v10;
  __int128 v11;

  if (a2 > (_QWORD)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_1D4B182AC();
    v10 = 0;
    v11 = 0uLL;
    sub_1D4B3649C(&v10, a2);
    v3 = (unint64_t)a1[1];
    v8 = *a1;
    v9 = 0;
    v6 = &v8[8 * (v3 >> 6)];
    v7 = v3 & 0x3F;
    sub_1D4B364E0(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    v4 = *a1;
    *a1 = v10;
    v10 = v4;
    v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    v11 = v5;
    if (v4)
      operator delete(v4);
  }
}

void sub_1D4B36484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_1D4B3649C(_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    sub_1D4B182AC();
  result = sub_1D4B182C0((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void sub_1D4B364E0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;

  v4 = a1[1];
  v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41)
      v6 = (v5 - 1) >> 6;
    else
      v6 = 0;
    *(_QWORD *)(*a1 + 8 * v6) = 0;
  }
  v7 = *(_DWORD *)(a2 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_DWORD *)(a3 + 8);
  v10 = *a1 + 8 * (v4 >> 6);
  v16 = *(_QWORD *)a2;
  v17 = v7;
  v14 = v8;
  v15 = v9;
  v12 = v10;
  v13 = v4 & 0x3F;
  sub_1D4B36580(&v16, &v14, &v12, (uint64_t)&v11);
}

void sub_1D4B36580(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  v5 = *((_DWORD *)a1 + 2);
  v6 = *a2;
  v7 = *((_DWORD *)a2 + 2);
  v16 = *a1;
  v17 = v5;
  v14 = v6;
  v15 = v7;
  v8 = *((_DWORD *)a3 + 2);
  v12 = *a3;
  v13 = v8;
  sub_1D4B3660C((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  v9 = v19;
  v10 = v20;
  v11 = v21;
  *(_QWORD *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void sub_1D4B3660C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

_QWORD *sub_1D4B366DC(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void sub_1D4B3678C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t sub_1D4B36838(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = sub_1D4B36378(v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || sub_1D4B36378(v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

void sub_1D4B368C4(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1D4B368C4(a1, *(_QWORD *)a2);
    sub_1D4B368C4(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void sub_1D4B36914(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1D4B36954((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1D4B36954(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

uint64_t sub_1D4B369A0(uint64_t a1)
{
  void *v2;

  sub_1D4B369D8(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1D4B369D8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_1D4B0930C(v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *sub_1D4B36A14(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    sub_1D4B3649C(a1, v4);
    sub_1D4B36A6C(a1, *(_QWORD **)a2, 0, (_QWORD *)(*(_QWORD *)a2 + 8 * (*(_QWORD *)(a2 + 8) >> 6)), *(_QWORD *)(a2 + 8) & 0x3F, *(_QWORD *)(a2 + 8));
  }
  return a1;
}

void sub_1D4B36A6C(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4, int a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  _BYTE v11[32];

  v6 = a1[1];
  v7 = v6 + a6;
  a1[1] = v6 + a6;
  if (!v6 || ((v7 - 1) ^ (v6 - 1)) >= 0x40)
  {
    if (v7 >= 0x41)
      v8 = (v7 - 1) >> 6;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
  }
  v9 = *a1 + 8 * (v6 >> 6);
  v10 = v6 & 0x3F;
  sub_1D4B36AE8(a2, a3, a4, a5, (uint64_t)&v9, (uint64_t)v11);
}

void sub_1D4B36AE8(_QWORD *a1@<X1>, unint64_t a2@<X2>, _QWORD *a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;

  LODWORD(v6) = a2;
  v7 = *(uint64_t **)a5;
  v8 = *(_DWORD *)(a5 + 8);
  if (a1 != a3 || (_DWORD)a2 != a4)
  {
    do
    {
      v9 = 1 << v8;
      if (((*a1 >> a2) & 1) != 0)
        v10 = *v7 | v9;
      else
        v10 = *v7 & ~v9;
      *v7 = v10;
      v11 = (_DWORD)v6 == 63;
      v12 = v6 == 63;
      v6 = (a2 + 1);
      if (v11)
        v6 = 0;
      if (v8 == 63)
      {
        v8 = 0;
        *(_QWORD *)a5 = ++v7;
      }
      else
      {
        ++v8;
      }
      a1 += v12;
      a2 = v6 | a2 & 0xFFFFFFFF00000000;
      *(_DWORD *)(a5 + 8) = v8;
    }
    while (a1 != a3 || (_DWORD)v6 != a4);
    a1 = a3;
  }
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = v7;
  *(_DWORD *)(a6 + 24) = v8;
}

void sub_1D4B36B90(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_1D4B369D8(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

_QWORD *sub_1D4B36BE4(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v21[3];

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_1D4B36E28(a1, *a2, a4, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_1D4B36EA0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  v10 = (_QWORD *)v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_1D4B370D4((uint64_t)v21, 0);
  return v10;
}

void sub_1D4B36E10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B370D4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B36E28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v8[2] = **a3;
  result = sub_1D4B092CC((uint64_t)(v8 + 3));
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1D4B36E88(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D4B370D4(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1D4B36EA0(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_1D4B36F7C(a1, prime);
  }
}

void sub_1D4B36F7C(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      sub_1D4B18174();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_1D4B370D4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1D4B0930C(v2 + 3);
    operator delete(v2);
  }
}

void sub_1D4B37118(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        sub_1D4B356D8(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1D4B37188(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_1D4B371D0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD v14[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1D4B182AC();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v14[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_1D4B29B64(v7, v9);
  else
    v10 = 0;
  v11 = (uint64_t *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[24 * v9];
  *v11 = (uint64_t)v11;
  v11[1] = (uint64_t)v11;
  v11[2] = 0;
  sub_1D4B372DC((uint64_t)v11, v11, a2);
  v14[2] = v11 + 3;
  sub_1D4B37324(a1, v14);
  v12 = a1[1];
  sub_1D4B373D4((uint64_t)v14);
  return v12;
}

void sub_1D4B372C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B373D4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B372DC(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a3[2];
  if (v3)
  {
    v5 = *a3;
    v4 = (uint64_t *)a3[1];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v7 = *a2;
    *(_QWORD *)(v7 + 8) = v4;
    *v4 = v7;
    *a2 = v5;
    *(_QWORD *)(v5 + 8) = a2;
    *(_QWORD *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

uint64_t *sub_1D4B37324(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v5 = (_QWORD *)*result;
  v4 = (_QWORD *)result[1];
  v6 = (_QWORD *)a2[1];
  if (v4 != (_QWORD *)*result)
  {
    v7 = v6 - 3;
    v8 = v6 - 3;
    do
    {
      v4 -= 3;
      *v8 = v8;
      v8[1] = v8;
      v8[2] = 0;
      result = (uint64_t *)sub_1D4B372DC((uint64_t)v8, v7, v4);
      v8 -= 3;
      v7 -= 3;
    }
    while (v4 != v5);
    v6 = v8 + 3;
  }
  a2[1] = v6;
  v9 = *v3;
  *v3 = (uint64_t)v6;
  a2[1] = v9;
  v10 = v3[1];
  v3[1] = a2[2];
  a2[2] = v10;
  v11 = v3[2];
  v3[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1D4B373D4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    sub_1D4B356D8((_QWORD *)(i - 24));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_1D4B37420(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_1D4B36EA0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1D4B37624(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B37638(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4B376D8(a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1D4B376C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1D4B37728(&a9);
  _Unwind_Resume(a1);
}

char *sub_1D4B376D8(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_1D4B182AC();
  result = (char *)sub_1D4B29B64((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void sub_1D4B37728(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_1D4B37798(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1D4B37798(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 120;
      v7 = v4 - 120;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 120;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_1D4B37824(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_1E984AF58;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1D4B37874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t *v10;

  a10 = 0;
  if (v10)
    sub_1D4B378DC((int)&a10, v10);
  _Unwind_Resume(exception_object);
}

void sub_1D4B37894(uint64_t a1)
{
  sub_1D4B378DC(a1 + 24, *(uint64_t **)(a1 + 24));
}

uint64_t sub_1D4B3789C(uint64_t a1, uint64_t a2)
{
  if (sub_1D4B1F350(a2, (uint64_t)&unk_1E9847050))
    return a1 + 24;
  else
    return 0;
}

void sub_1D4B378DC(int a1, uint64_t *__p)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (__p)
  {
    v3 = __p[3];
    __p[3] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = __p[2];
    __p[2] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = __p[1];
    __p[1] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *__p;
    *__p = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    operator delete(__p);
  }
}

void sub_1D4B37964(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    sub_1D4B37964(a1, *(_QWORD *)a2);
    sub_1D4B37964(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 40);
    sub_1D4B35A48(&v4);
    operator delete(a2);
  }
}

uint64_t sub_1D4B379BC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1D4B379D4(uint64_t a1, uint64_t a2)
{
  if (sub_1D4B1F350(a2, (uint64_t)&unk_1E98470A8))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_1D4B37A14(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    sub_1D4B1F3DC(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t **sub_1D4B37A60(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 5) = 0;
    sub_1D4B29854(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_1D4B37B24(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v4;

  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E98476A8;
  *(_QWORD *)(a1 + 40) = operator new[](0x400uLL);
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  return a1;
}

void sub_1D4B37B80(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1D4B3AC80(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B37B98(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E98476A8;
  v2 = (void *)a1[5];
  if (v2)
    operator delete[](v2);
  return sub_1D4B3AC80(a1);
}

void sub_1D4B37BD4(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B37B98(a1);
  operator delete(v1);
}

uint64_t sub_1D4B37BE8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD);
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = result;
    v3 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)result + 48);
    if (*(_BYTE *)(result + 72))
    {
      v3(result, (char)(v1 - 3));
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 48))(v2, *(char *)(v2 + 64));
      v4 = 64;
      if (!*(_BYTE *)(v2 + 48))
        v4 = 56;
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + v4))(v2, **(_QWORD **)(v2 + 40));
    }
    else
    {
      result = ((uint64_t (*)(uint64_t, _QWORD))v3)(result, (char)-*(_BYTE *)(result + 32));
      if (*(_QWORD *)(v2 + 32))
      {
        v5 = 0;
        do
        {
          if (*(_BYTE *)(v2 + 48))
            v6 = 64;
          else
            v6 = 56;
          result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + v6))(v2, *(_QWORD *)(*(_QWORD *)(v2 + 40) + 8 * v5++));
        }
        while (v5 < *(_QWORD *)(v2 + 32));
      }
    }
    *(_BYTE *)(v2 + 72) = 0;
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 80) = 0;
  }
  return result;
}

uint64_t sub_1D4B37CDC(uint64_t a1)
{
  uint64_t result;

  sub_1D4B37BE8(a1);
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), (*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_1D4B37D2C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  v4 = *(_QWORD *)(result + 32);
  if (!v4)
  {
    v6 = *(_QWORD **)(result + 40);
    *(_QWORD *)(result + 32) = 1;
    *v6 = a2;
    *(_QWORD *)(result + 80) = 1;
    return result;
  }
  if (!*(_BYTE *)(result + 72))
  {
    v7 = *(_QWORD *)(result + 80);
    v8 = *(_QWORD *)(result + 40);
    v9 = *(_QWORD *)(v8 + 8 * v4 - 8);
    if (v7 == 1 || *(_QWORD *)(result + 64) + v9 != a2)
    {
      *(_QWORD *)(result + 64) = a2 - v9;
      v15 = 1;
      if (a2 - v9 == (char)(a2 - v9))
        v15 = 2;
      *(_QWORD *)(result + 80) = v15;
    }
    else
    {
      v10 = v7 + 1;
      *(_QWORD *)(result + 80) = v10;
      if (v10 == 3)
      {
        v11 = v4 - 2;
        if (v11)
        {
          *(_QWORD *)(result + 32) = v11;
          v12 = *(_QWORD *)(v8 + 8 * v11);
          result = sub_1D4B37BE8(result);
          **(_QWORD **)(v3 + 40) = v12;
        }
        *(_BYTE *)(v3 + 72) = 1;
        *(_QWORD *)(v3 + 32) = 3;
        return result;
      }
    }
    *(_QWORD *)(result + 32) = v4 + 1;
    *(_QWORD *)(v8 + 8 * v4) = a2;
    if (v4 != 127)
      return result;
    return sub_1D4B37BE8(result);
  }
  if (**(_QWORD **)(result + 40) + *(_QWORD *)(result + 64) * v4 != a2)
  {
    result = sub_1D4B37BE8(result);
    v14 = *(_QWORD *)(v3 + 32);
    v13 = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(v3 + 32) = v14 + 1;
    *(_QWORD *)(v13 + 8 * v14) = a2;
    *(_QWORD *)(v3 + 80) = 1;
    return result;
  }
  v5 = v4 + 1;
  *(_QWORD *)(result + 32) = v5;
  if (v5 == 130)
    return sub_1D4B37BE8(result);
  return result;
}

double sub_1D4B37E6C(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v3;
  double result;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = off_1E9847638;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = a3;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 49) = 0u;
  return result;
}

uint64_t sub_1D4B37E98(unint64_t a1, uint64_t a2)
{
  uint64_t v4;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40);
  sub_1D4B37EF0(a1);
  v4 = sub_1D4B019F4(a2);
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v4);
}

unint64_t sub_1D4B37EF0(unint64_t result)
{
  uint64_t v1;
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  int v7;
  unint64_t v8;
  std::runtime_error *exception;
  char *v10;
  int v11;

  v1 = result;
  v3 = *(char **)(result + 40);
  v2 = *(char **)(result + 48);
  if (v3 == v2)
  {
    v11 = 0;
    v10 = 0;
    result = (*(uint64_t (**)(_QWORD, char **, int *))(**(_QWORD **)(result + 8) + 16))(*(_QWORD *)(result + 8), &v10, &v11);
    if ((result & 1) == 0)
      goto LABEL_12;
    v3 = v10;
    v2 = &v10[v11];
    *(_QWORD *)(v1 + 40) = v10;
    *(_QWORD *)(v1 + 48) = v2;
  }
  v4 = v3 + 1;
  *(_QWORD *)(v1 + 40) = v3 + 1;
  v5 = *v3;
  if (v5 < 0)
  {
    *(_QWORD *)(v1 + 24) = -v5;
    *(_BYTE *)(v1 + 64) = 0;
    return result;
  }
  *(_QWORD *)(v1 + 24) = v5 + 3;
  *(_BYTE *)(v1 + 64) = 1;
  if (v4 == v2)
  {
    v11 = 0;
    v10 = 0;
    if (((*(uint64_t (**)(_QWORD, char **, int *))(**(_QWORD **)(v1 + 8) + 16))(*(_QWORD *)(v1 + 8), &v10, &v11) & 1) != 0)
    {
      v4 = v10;
      v6 = &v10[v11];
      *(_QWORD *)(v1 + 40) = v10;
      *(_QWORD *)(v1 + 48) = v6;
      goto LABEL_8;
    }
LABEL_12:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "bad read in readByte");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
LABEL_8:
  *(_QWORD *)(v1 + 40) = v4 + 1;
  *(_QWORD *)(v1 + 56) = *v4;
  v7 = *(unsigned __int8 *)(v1 + 16);
  result = sub_1D4B383C4(v1);
  v8 = -(uint64_t)(result & 1) ^ (result >> 1);
  if (!v7)
    v8 = result;
  *(_QWORD *)(v1 + 32) = v8;
  return result;
}

void sub_1D4B38044(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_1D4B3805C(unint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v9;
  std::runtime_error *exception;
  unsigned __int8 *v11;
  int v12;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (!v4)
      {
        result = sub_1D4B37EF0(v3);
        v4 = *(_QWORD *)(v3 + 24);
      }
      if (v4 >= v2)
        v5 = v2;
      else
        v5 = v4;
      *(_QWORD *)(v3 + 24) = v4 - v5;
      if (*(_BYTE *)(v3 + 64))
      {
        *(_QWORD *)(v3 + 32) += *(_QWORD *)(v3 + 56) * v5;
      }
      else if (v5)
      {
        v7 = *(unsigned __int8 **)(v3 + 40);
        v6 = *(unsigned __int8 **)(v3 + 48);
        v8 = v5;
        do
        {
          if (v7 == v6)
          {
            v12 = 0;
            v11 = 0;
            result = (*(uint64_t (**)(_QWORD, unsigned __int8 **, int *))(**(_QWORD **)(v3 + 8) + 16))(*(_QWORD *)(v3 + 8), &v11, &v12);
            if ((result & 1) == 0)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              sub_1D4B2D1F0(exception, "bad read in readByte");
              __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
            }
            v7 = v11;
            v6 = &v11[v12];
            *(_QWORD *)(v3 + 40) = v11;
            *(_QWORD *)(v3 + 48) = v6;
          }
          *(_QWORD *)(v3 + 40) = v7 + 1;
          v9 = (*v7++ >> 7) ^ 1u;
          v8 -= v9;
        }
        while (v8);
      }
      v2 -= v5;
    }
    while (v2);
  }
  return result;
}

void sub_1D4B38170(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_1D4B38184(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t *v17;
  int v19;
  unint64_t v20;
  uint64_t i;
  unint64_t *v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;

  v6 = result;
  v7 = 0;
  if (a4 && a3)
  {
    v7 = 0;
    while (!*(_BYTE *)(a4 + v7))
    {
      if (a3 == ++v7)
        return result;
    }
  }
  if (v7 < a3)
  {
    v8 = *(_QWORD *)(result + 24);
    while (1)
    {
      if (!v8)
      {
        result = sub_1D4B37EF0(v6);
        v8 = *(_QWORD *)(v6 + 24);
      }
      v9 = v8 >= a3 - v7 ? a3 - v7 : v8;
      if (*(_BYTE *)(v6 + 64))
        break;
      if (a4)
      {
        v10 = 0;
        if (v9)
        {
          v15 = (unsigned __int8 *)(a4 + v7);
          v16 = v9;
          v17 = (unint64_t *)(a2 + 8 * v7);
          do
          {
            if (*v15++)
            {
              v19 = *(unsigned __int8 *)(v6 + 16);
              result = sub_1D4B383C4(v6);
              v20 = -(uint64_t)(result & 1) ^ (result >> 1);
              if (!v19)
                v20 = result;
              *v17 = v20;
              ++v10;
            }
            ++v17;
            --v16;
          }
          while (v16);
        }
        goto LABEL_37;
      }
      if (*(_BYTE *)(v6 + 16))
      {
        if (v9)
        {
          v22 = (unint64_t *)(a2 + 8 * v7);
          v23 = v9;
          do
          {
            result = sub_1D4B383C4(v6);
            *v22++ = -(uint64_t)(result & 1) ^ (result >> 1);
            --v23;
          }
          while (v23);
          goto LABEL_50;
        }
      }
      else if (v9)
      {
        v24 = (unint64_t *)(a2 + 8 * v7);
        v25 = v9;
        do
        {
          result = sub_1D4B383C4(v6);
          *v24++ = result;
          --v25;
        }
        while (v25);
LABEL_50:
        v10 = v9;
LABEL_37:
        v8 = *(_QWORD *)(v6 + 24) - v10;
        *(_QWORD *)(v6 + 24) = v8;
        v7 += v9;
        if (a4 && v7 < a3)
        {
          while (!*(_BYTE *)(a4 + v7))
          {
            if (++v7 >= a3)
              return result;
          }
        }
        goto LABEL_52;
      }
      v8 = *(_QWORD *)(v6 + 24);
      v7 += v9;
LABEL_52:
      if (v7 >= a3)
        return result;
    }
    if (a4)
    {
      if (v9)
      {
        v10 = 0;
        v11 = (unsigned __int8 *)(a4 + v7);
        v12 = v9;
        v13 = (_QWORD *)(a2 + 8 * v7);
        do
        {
          if (*v11++)
            *v13 = *(_QWORD *)(v6 + 32) + *(_QWORD *)(v6 + 56) * v10++;
          ++v13;
          --v12;
        }
        while (v12);
        goto LABEL_36;
      }
    }
    else if (v9)
    {
      for (i = 0; i != v9; ++i)
        *(_QWORD *)(a2 + 8 * v7 + 8 * i) = *(_QWORD *)(v6 + 32) + *(_QWORD *)(v6 + 56) * i;
      v10 = v9;
      goto LABEL_36;
    }
    v10 = 0;
LABEL_36:
    *(_QWORD *)(v6 + 32) += *(_QWORD *)(v6 + 56) * v10;
    goto LABEL_37;
  }
  return result;
}

uint64_t sub_1D4B383C4(uint64_t a1)
{
  char *v2;
  char *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  char i;
  char *v9;
  int v10;
  uint64_t v11;
  std::runtime_error *exception;
  char *v13;
  int v14;

  v3 = *(char **)(a1 + 40);
  v2 = *(char **)(a1 + 48);
  if (v3 == v2)
  {
    v14 = 0;
    v13 = 0;
    if (((*(uint64_t (**)(_QWORD, char **, int *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &v13, &v14) & 1) == 0)
    {
LABEL_13:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_1D4B2D1F0(exception, "bad read in readByte");
      __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v3 = v13;
    v2 = &v13[v14];
    *(_QWORD *)(a1 + 40) = v13;
    *(_QWORD *)(a1 + 48) = v2;
  }
  v4 = (unsigned __int8 *)(v3 + 1);
  *(_QWORD *)(a1 + 40) = v3 + 1;
  v5 = *v3;
  result = v5;
  if (v5 < 0)
  {
    v7 = v5 & 0x7F;
    for (i = 7; ; i += 7)
    {
      if (v4 == (unsigned __int8 *)v2)
      {
        v14 = 0;
        v13 = 0;
        if (((*(uint64_t (**)(_QWORD, char **, int *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &v13, &v14) & 1) == 0)goto LABEL_13;
        v4 = (unsigned __int8 *)v13;
        v2 = &v13[v14];
        *(_QWORD *)(a1 + 40) = v13;
        *(_QWORD *)(a1 + 48) = v2;
      }
      v9 = (char *)(v4 + 1);
      *(_QWORD *)(a1 + 40) = v4 + 1;
      v10 = (char)*v4;
      v11 = *v4;
      if ((v10 & 0x80000000) == 0)
        break;
      v7 |= (unint64_t)(v11 & 0x7F) << i;
      v4 = (unsigned __int8 *)v9;
    }
    return (v11 << i) | v7;
  }
  return result;
}

void sub_1D4B38508(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B38520(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_1E9847638;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return nullsub_1(a1);
}

void sub_1D4B38560(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  v2 = a1[1];
  *a1 = off_1E9847638;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)nullsub_1(a1);
  operator delete(v3);
}

uint64_t sub_1D4B385A4(uint64_t a1)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  std::runtime_error *exception;
  unsigned __int8 *v6;
  int v7;

  v2 = *(unsigned __int8 **)(a1 + 40);
  if (v2 == *(unsigned __int8 **)(a1 + 48))
  {
    v7 = 0;
    v6 = 0;
    if (((*(uint64_t (**)(_QWORD, unsigned __int8 **, int *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &v6, &v7) & 1) == 0)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_1D4B2D1F0(exception, "bad read in RleDecoderV2::readByte");
      __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v2 = v6;
    v3 = &v6[v7];
    *(_QWORD *)(a1 + 40) = v6;
    *(_QWORD *)(a1 + 48) = v3;
  }
  *(_QWORD *)(a1 + 40) = v2 + 1;
  return *v2;
}

void sub_1D4B38644(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B38658(uint64_t a1, uint64_t *a2, char a3, uint64_t a4)
{
  uint64_t v6;

  v6 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = off_1E9847670;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 17) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_QWORD *)(a1 + 152) = 0;
  sub_1D4B2F4E8(a1 + 160, a4, 0);
  sub_1D4B2F4E8(a1 + 200, a4, 0);
  return a1;
}

void sub_1D4B386EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  sub_1D4B2F75C(v2);
  v4 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  nullsub_1(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B3872C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v4 = sub_1D4B019F4(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v4);
}

uint64_t sub_1D4B38780(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[512];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      if (v2 >= 0x40)
        v4 = 64;
      else
        v4 = v2;
      result = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t, _QWORD))(*(_QWORD *)v3 + 32))(v3, v5, v4, 0);
      v2 -= v4;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1D4B38818(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t i;
  int v6;

  if (a3)
  {
    v4 = result;
    for (i = 0; i != a3; ++i)
    {
      if (!a4 || *(_BYTE *)(a4 + i))
      {
        if (*(_QWORD *)(result + 32) == *(_QWORD *)(result + 24))
        {
          *(_DWORD *)(result + 96) = 0;
          *(_QWORD *)(result + 88) = 0;
          v6 = sub_1D4B385A4(result);
          *(_BYTE *)(v4 + 17) = v6;
        }
        else
        {
          v6 = *(unsigned __int8 *)(result + 17);
        }
        __asm { BR              X9 }
      }
    }
  }
  return result;
}

unint64_t sub_1D4B3892C(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  _QWORD *v16;
  unsigned __int8 *v17;
  unint64_t v18;
  _QWORD *v20;
  unint64_t v21;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a1 + 24))
  {
    v10 = 0;
    v11 = *(unsigned __int8 *)(a1 + 17);
    v12 = (v11 >> 3) & 7;
    *(_QWORD *)(a1 + 64) = v12 + 1;
    *(_QWORD *)(a1 + 24) = (v11 & 7) + 3;
    *(_QWORD *)(a1 + 32) = 0;
    v13 = 8 * v12;
    do
    {
      v10 |= (unint64_t)sub_1D4B385A4(a1) << v13;
      v13 -= 8;
    }
    while (v13 != -8);
    *(_QWORD *)(a1 + 72) = v10;
    if (*(_BYTE *)(a1 + 16))
      *(_QWORD *)(a1 + 72) = -(uint64_t)(v10 & 1) ^ (v10 >> 1);
  }
  v14 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 24) - v14 >= a4)
    result = a4;
  else
    result = *(_QWORD *)(a1 + 24) - v14;
  if (a5)
  {
    if (result + a3 > a3)
    {
      v16 = (_QWORD *)(a2 + 8 * a3);
      v17 = (unsigned __int8 *)(a5 + a3);
      v18 = result;
      do
      {
        if (*v17++)
        {
          *v16 = *(_QWORD *)(a1 + 72);
          ++*(_QWORD *)(a1 + 32);
        }
        ++v16;
        --v18;
      }
      while (v18);
    }
  }
  else if (result + a3 > a3)
  {
    v20 = (_QWORD *)(a2 + 8 * a3);
    v21 = result;
    do
    {
      *v20++ = *(_QWORD *)(a1 + 72);
      ++*(_QWORD *)(a1 + 32);
      --v21;
    }
    while (v21);
  }
  return result;
}

unint64_t sub_1D4B38A5C(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t *v15;
  unsigned __int8 *v16;
  unint64_t v17;
  uint64_t *v19;
  unint64_t v20;

  v11 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  if (v10 == v11)
  {
    v12 = *(unsigned __int8 *)(a1 + 17);
    *(_DWORD *)(a1 + 88) = byte_1D4BD537A[(v12 >> 1) & 0x1F];
    *(_QWORD *)(a1 + 24) = (v12 & 1) << 8;
    v13 = sub_1D4B385A4(a1);
    v10 = 0;
    v11 = (*(_QWORD *)(a1 + 24) | v13) + 1;
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = 0;
  }
  v14 = v11 - v10;
  if (v14 < a4)
    a4 = v14;
  *(_QWORD *)(a1 + 32) += sub_1D4B391BC(a1, a2, a3, a4, *(unsigned int *)(a1 + 88), a5);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a5)
    {
      if (a4 + a3 > a3)
      {
        v15 = (uint64_t *)(a2 + 8 * a3);
        v16 = (unsigned __int8 *)(a5 + a3);
        v17 = a4;
        do
        {
          if (*v16++)
            *v15 = -(*v15 & 1) ^ ((unint64_t)*v15 >> 1);
          ++v15;
          --v17;
        }
        while (v17);
      }
    }
    else if (a4 + a3 > a3)
    {
      v19 = (uint64_t *)(a2 + 8 * a3);
      v20 = a4;
      do
      {
        *v19 = -(*v19 & 1) ^ ((unint64_t)*v19 >> 1);
        ++v19;
        --v20;
      }
      while (v20);
    }
  }
  return a4;
}

unint64_t sub_1D4B38B98(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  _QWORD *v25;
  _BYTE *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  std::runtime_error *exception;

  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  if (v11 == v10)
  {
    v12 = *(unsigned __int8 *)(a1 + 17);
    *(_DWORD *)(a1 + 88) = byte_1D4BD537A[(v12 >> 1) & 0x1F];
    *(_QWORD *)(a1 + 24) = (v12 & 1) << 8;
    *(_QWORD *)(a1 + 24) = (*(_QWORD *)(a1 + 24) | sub_1D4B385A4(a1)) + 1;
    *(_QWORD *)(a1 + 32) = 0;
    v13 = sub_1D4B385A4(a1);
    *(_QWORD *)(a1 + 64) = (v13 >> 5) + 1;
    *(_DWORD *)(a1 + 100) = byte_1D4BD537A[v13 & 0x1F];
    v14 = sub_1D4B385A4(a1);
    v15 = v14 & 0x1F;
    if (v15)
    {
      v16 = (v14 >> 5) + 1;
      v17 = *(_QWORD *)(a1 + 64);
      if (v17)
      {
        v18 = 0;
        v19 = 8 * v17 - 8;
        do
        {
          --v17;
          v18 |= (unint64_t)sub_1D4B385A4(a1) << v19;
          v19 -= 8;
        }
        while (v17);
        v20 = 8 * *(_QWORD *)(a1 + 64) - 1;
      }
      else
      {
        v18 = 0;
        LOBYTE(v20) = -1;
      }
      v21 = 1 << v20;
      if ((v21 & v18) != 0)
        v22 = -(v18 & ~v21);
      else
        v22 = v18;
      *(_QWORD *)(a1 + 120) = v22;
      sub_1D4B2F150(a1 + 160, *(_QWORD *)(a1 + 24));
      *(_QWORD *)(a1 + 104) = 0;
      sub_1D4B391BC(a1, *(_QWORD *)(a1 + 176), 0, *(_QWORD *)(a1 + 24), *(unsigned int *)(a1 + 88), 0);
      *(_DWORD *)(a1 + 92) = 0;
      *(_DWORD *)(a1 + 96) = 0;
      sub_1D4B2F150(a1 + 200, v15);
      *(_QWORD *)(a1 + 112) = 0;
      v23 = v16 + *(_DWORD *)(a1 + 100);
      if (v23 < 0x41)
      {
        sub_1D4B391BC(a1, *(_QWORD *)(a1 + 216), 0, v15, byte_1D4BD539A[v23], 0);
        *(_DWORD *)(a1 + 92) = 0;
        *(_DWORD *)(a1 + 96) = 0;
        *(_QWORD *)(a1 + 144) = ~(-1 << *(_DWORD *)(a1 + 100));
        sub_1D4B392CC(a1);
        v10 = *(_QWORD *)(a1 + 24);
        v11 = *(_QWORD *)(a1 + 32);
        goto LABEL_13;
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_1D4B2D1F0(exception, "Corrupt PATCHED_BASE encoded data (patchBitSize + pgw > 64)!");
    }
    else
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_1D4B2D1F0(exception, "Corrupt PATCHED_BASE encoded data (pl==0)!");
    }
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
LABEL_13:
  v24 = v10 - v11;
  if (v24 < a4)
    a4 = v24;
  if (a4 + a3 > a3)
  {
    v25 = (_QWORD *)(a2 + 8 * a3);
    v26 = (_BYTE *)(a5 + a3);
    v27 = a4;
    do
    {
      if (!a5 || *v26)
      {
        v28 = *(_QWORD *)(a1 + 104);
        if (v28 == *(_QWORD *)(a1 + 152))
        {
          *v25 = ((*(_QWORD *)(a1 + 136) << *(_DWORD *)(a1 + 88)) | *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v28))
               + *(_QWORD *)(a1 + 120);
          v29 = *(_QWORD *)(a1 + 112) + 1;
          *(_QWORD *)(a1 + 112) = v29;
          if (v29 < *(_QWORD *)(a1 + 224))
          {
            sub_1D4B392CC(a1);
            *(_QWORD *)(a1 + 152) += *(_QWORD *)(a1 + 104);
          }
        }
        else
        {
          *v25 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v28) + *(_QWORD *)(a1 + 120);
        }
        ++*(_QWORD *)(a1 + 32);
        ++*(_QWORD *)(a1 + 104);
      }
      ++v25;
      ++v26;
      --v27;
    }
    while (v27);
  }
  return a4;
}

void sub_1D4B38E8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_1D4B38EA4(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  _BOOL4 v27;
  unint64_t v28;
  unint64_t v29;
  _BOOL4 v30;
  unint64_t v31;
  _QWORD *v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _BYTE *v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  _BYTE *v42;
  uint64_t v43;

  v11 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  if (v10 == v11)
  {
    v12 = *(unsigned __int8 *)(a1 + 17);
    v13 = (v12 >> 1) & 0x1F;
    if ((_DWORD)v13)
      LODWORD(v13) = byte_1D4BD537A[v13];
    *(_DWORD *)(a1 + 88) = v13;
    *(_QWORD *)(a1 + 24) = (v12 & 1) << 8;
    v14 = sub_1D4B385A4(a1);
    v15 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 24) = (v15 | v14) + 1;
    *(_QWORD *)(a1 + 32) = 0;
    if (*(_BYTE *)(a1 + 16))
    {
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = sub_1D4B385A4(a1);
        v16 |= (unint64_t)(v18 & 0x7F) << v17;
        v17 += 7;
      }
      while (v18 < 0);
      v19 = -(uint64_t)(v16 & 1) ^ (v16 >> 1);
    }
    else
    {
      v19 = 0;
      v20 = 0;
      do
      {
        v21 = sub_1D4B385A4(a1);
        v19 |= (unint64_t)(v21 & 0x7F) << v20;
        v20 += 7;
      }
      while (v21 < 0);
    }
    v22 = 0;
    v23 = 0;
    *(_QWORD *)(a1 + 72) = v19;
    *(_QWORD *)(a1 + 80) = v19;
    do
    {
      v24 = sub_1D4B385A4(a1);
      v22 |= (unint64_t)(v24 & 0x7F) << v23;
      v23 += 7;
    }
    while (v24 < 0);
    *(_QWORD *)(a1 + 56) = -(uint64_t)(v22 & 1) ^ (v22 >> 1);
    v11 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(a1 + 32);
  }
  v25 = v11 - v10;
  if (v25 < a4)
    a4 = v25;
  v26 = a4 + a3;
  v27 = a4 + a3 > a3;
  v28 = a3;
  if (a5 && a4 + a3 > a3)
  {
    v28 = a3;
    while (!*(_BYTE *)(a5 + v28))
    {
      if (++v28 >= v26)
        goto LABEL_25;
    }
    v27 = 1;
  }
  if (!v10 && v27)
  {
    *(_QWORD *)(a2 + 8 * v28++) = *(_QWORD *)(a1 + 72);
    v10 = *(_QWORD *)(a1 + 32) + 1;
    *(_QWORD *)(a1 + 32) = v10;
  }
LABEL_25:
  v29 = *(unsigned int *)(a1 + 88);
  v30 = v28 < v26;
  if ((_DWORD)v29)
  {
    if (a5 && v28 < v26)
    {
      while (!*(_BYTE *)(a5 + v28))
      {
        if (++v28 >= v26)
          goto LABEL_42;
      }
      v30 = 1;
    }
    if (v30 && v10 <= 1)
    {
      v35 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a2 + 8 * v28++) = v35;
      *(_QWORD *)(a1 + 80) = v35;
      ++*(_QWORD *)(a1 + 32);
    }
LABEL_42:
    *(_QWORD *)(a1 + 32) += sub_1D4B391BC(a1, a2, v28, v26 - v28, v29, a5);
    if ((*(_QWORD *)(a1 + 56) & 0x8000000000000000) != 0)
    {
      if (v26 > v28)
      {
        v40 = a3 + a4 - v28;
        v41 = (_QWORD *)(a2 + 8 * v28);
        v42 = (_BYTE *)(a5 + v28);
        do
        {
          if (!a5 || *v42)
          {
            v43 = *(_QWORD *)(a1 + 80) - *v41;
            *v41 = v43;
            *(_QWORD *)(a1 + 80) = v43;
          }
          ++v41;
          ++v42;
          --v40;
        }
        while (v40);
      }
    }
    else if (v26 > v28)
    {
      v36 = a3 + a4 - v28;
      v37 = (_QWORD *)(a2 + 8 * v28);
      v38 = (_BYTE *)(a5 + v28);
      do
      {
        if (!a5 || *v38)
        {
          v39 = *v37 + *(_QWORD *)(a1 + 80);
          *v37 = v39;
          *(_QWORD *)(a1 + 80) = v39;
        }
        ++v37;
        ++v38;
        --v36;
      }
      while (v36);
    }
  }
  else if (v28 < v26)
  {
    v31 = a3 + a4 - v28;
    v32 = (_QWORD *)(a2 + 8 * v28);
    v33 = (_BYTE *)(a5 + v28);
    do
    {
      if (!a5 || *v33)
      {
        v34 = *(_QWORD *)(a1 + 56) + *(_QWORD *)(a1 + 80);
        *v32 = v34;
        *(_QWORD *)(a1 + 80) = v34;
        ++*(_QWORD *)(a1 + 32);
      }
      ++v32;
      ++v33;
      --v31;
    }
    while (v31);
  }
  return a4;
}

uint64_t sub_1D4B391BC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v9;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;

  v6 = a4 + a3;
  if (a4 + a3 > a3)
  {
    v9 = a3;
    v12 = 0;
    while (1)
    {
      if (a6 && !*(_BYTE *)(a6 + v9))
        goto LABEL_11;
      v13 = *(unsigned int *)(a1 + 92);
      v14 = *(_DWORD *)(a1 + 92);
      if (v13 >= a5)
      {
        v15 = 0;
        LODWORD(v17) = a5;
        if (!a5)
          goto LABEL_10;
      }
      else
      {
        v15 = 0;
        v16 = *(_DWORD *)(a1 + 96);
        v17 = a5;
        do
        {
          v15 = (v15 << v13) | v16 & ~(-1 << v14);
          v17 -= v13;
          v16 = sub_1D4B385A4(a1);
          v13 = 8;
          *(_DWORD *)(a1 + 92) = 8;
          *(_DWORD *)(a1 + 96) = v16;
          v14 = 8;
        }
        while (v17 > 8);
        if (!v17)
          goto LABEL_10;
      }
      v18 = v13 - v17;
      *(_DWORD *)(a1 + 92) = v18;
      v15 = (v15 << v17) | (*(_DWORD *)(a1 + 96) >> v18) & ~(-1 << v17);
LABEL_10:
      *(_QWORD *)(a2 + 8 * v9) = v15;
      ++v12;
LABEL_11:
      if (++v9 == v6)
        return v12;
    }
  }
  return 0;
}

uint64_t sub_1D4B392CC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(result + 112);
  v2 = *(_QWORD *)(result + 216);
  v3 = *(_DWORD *)(result + 100);
  v4 = *(_QWORD *)(v2 + 8 * v1) >> v3;
  *(_QWORD *)(result + 128) = v4;
  v5 = *(_QWORD *)(result + 144);
  v6 = v5 & *(_QWORD *)(v2 + 8 * v1);
  *(_QWORD *)(result + 136) = v6;
  if (v4 == 255)
  {
    v7 = 0;
    v8 = v1 + 1;
    while (!v6)
    {
      v7 += 255;
      *(_QWORD *)(result + 152) = v7;
      *(_QWORD *)(result + 112) = v8;
      v9 = *(_QWORD *)(v2 + 8 * v8) >> v3;
      *(_QWORD *)(result + 128) = v9;
      v6 = *(_QWORD *)(v2 + 8 * v8) & v5;
      *(_QWORD *)(result + 136) = v6;
      ++v8;
      if (v9 != 255)
      {
        v4 = v9;
        break;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)(result + 152) = v7 + v4;
  return result;
}

uint64_t sub_1D4B39350(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E9847670;
  sub_1D4B2F75C((uint64_t)(a1 + 25));
  sub_1D4B2F75C((uint64_t)(a1 + 20));
  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return nullsub_1(a1);
}

void sub_1D4B393A0(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = off_1E9847670;
  sub_1D4B2F75C((uint64_t)(a1 + 25));
  sub_1D4B2F75C((uint64_t)(a1 + 20));
  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)nullsub_1(a1);
  operator delete(v3);
}

uint64_t sub_1D4B393F4(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, char a5, double a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int i;
  unsigned int v15;
  std::runtime_error *exception;
  std::string *v19;
  __int128 v20;
  std::string v21;
  std::string v22;

  if (a6 > 1.0 || a6 <= 0.0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v21, a6);
    v19 = std::string::insert(&v21, 0, "Invalid p value: ");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    sub_1D4B2D22C(exception, &v22);
    __cxa_throw(exception, (struct type_info *)&unk_1E9846268, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if ((a5 & 1) == 0)
  {
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    v6 = a4 + a3;
    *(_OWORD *)(a1 + 88) = 0u;
    if (a4 + a3 > a3)
    {
      do
      {
        v7 = *(_QWORD *)(a2 + 8 * a3);
        if ((v7 & 0x8000000000000000) != 0)
        {
          v10 = &byte_1D4BD53DA;
        }
        else
        {
          v8 = 0;
          if (v7)
          {
            do
            {
              ++v8;
              v9 = v7 > 1;
              v7 >>= 1;
            }
            while (v9);
          }
          v10 = &byte_1D4BD539A[v8];
        }
        v11 = *v10;
        if (v11 > 0x40)
          v12 = 31;
        else
          v12 = byte_1D4BD541C[v11];
        ++*(_DWORD *)(a1 + 4 * v12 + 88);
        ++a3;
      }
      while (a3 != v6);
    }
  }
  v13 = (int)((1.0 - a6) * (double)a4);
  for (i = 0x1Fu; ; --i)
  {
    v15 = i;
    v13 -= *(_DWORD *)(a1 + 4 * i + 88);
    if (v13 < 0)
      break;
    if (!v15)
      return 0;
  }
  return byte_1D4BD537A[i];
}

void sub_1D4B395A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_1D4B39604(uint64_t a1, uint64_t *a2, char a3, char a4)
{
  uint64_t v5;

  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E9847700;
  *(_BYTE *)(a1 + 64) = a4;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 40) = operator new[](0x1000uLL);
  *(_QWORD *)(a1 + 216) = operator new[](0x1000uLL);
  *(_QWORD *)(a1 + 224) = operator new[](0x1000uLL);
  *(_QWORD *)(a1 + 232) = operator new[](0x1000uLL);
  *(_QWORD *)(a1 + 240) = operator new[](0x1000uLL);
  return a1;
}

void sub_1D4B3968C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1D4B3AC80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B396A4(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  int v12;
  unsigned int v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  _OWORD v17[5];
  __int128 v18;

  v3 = result;
  v4 = *(_QWORD *)(result + 32);
  if (v4 == 1)
  {
    v7 = *(_QWORD **)(result + 40);
    *(_QWORD *)(result + 80) = a2 - *v7;
    *(_QWORD *)(result + 32) = 2;
    v7[1] = a2;
    if (*v7 == a2)
      v6 = 2;
    else
      v6 = 0x200000000;
    goto LABEL_12;
  }
  if (!v4)
  {
    v5 = *(_QWORD **)(result + 40);
    *(_QWORD *)(result + 32) = 1;
    *v5 = a2;
LABEL_4:
    v6 = 0x100000001;
LABEL_12:
    *(_QWORD *)(v3 + 68) = v6;
    return result;
  }
  v8 = *(_QWORD *)(result + 40);
  v9 = *(_QWORD *)(v8 + 8 * v4 - 8);
  v18 = 0u;
  memset(v17, 0, sizeof(v17));
  if (*(_QWORD *)(result + 80) || v9 != a2)
  {
    v13 = *(_DWORD *)(result + 68);
    if (v13 >= 3)
    {
      if (v13 >= 0xB)
      {
        BYTE8(v18) = 1;
        v14 = 3;
      }
      else
      {
        v14 = 0;
      }
      LODWORD(v17[0]) = v14;
      result = sub_1D4B39E4C(result, v17);
      v13 = *(_DWORD *)(v3 + 68);
      v4 = *(_QWORD *)(v3 + 32);
    }
    if (v13 - 1 <= 1 && *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8 * v4 - 8) != a2)
    {
      *(_DWORD *)(v3 + 68) = 0;
      *(_DWORD *)(v3 + 72) = v13;
    }
    v15 = *(_QWORD **)(v3 + 40);
    if (!v4)
    {
      *(_QWORD *)(v3 + 32) = 1;
      *v15 = a2;
      goto LABEL_4;
    }
    v16 = &v15[v4];
    *(_QWORD *)(v3 + 80) = a2 - *(v16 - 1);
    *(_QWORD *)(v3 + 32) = v4 + 1;
    *v16 = a2;
    v12 = *(_DWORD *)(v3 + 72) + 1;
    *(_DWORD *)(v3 + 72) = v12;
  }
  else
  {
    *(_QWORD *)(result + 32) = v4 + 1;
    *(_QWORD *)(v8 + 8 * v4) = a2;
    v10 = *(_DWORD *)(result + 72);
    if (v10)
    {
      *(_QWORD *)(result + 32) = v4 - 2;
      *(_DWORD *)(result + 68) = 3;
      *(_DWORD *)(result + 72) = v10 - 2;
      sub_1D4B39898((_QWORD *)result, (uint64_t)v17);
      result = sub_1D4B39E4C(v3, v17);
      v11 = *(_QWORD **)(v3 + 40);
      *v11 = a2;
      v11[1] = a2;
      v11[2] = a2;
      *(_QWORD *)(v3 + 32) = 3;
      v12 = *(_DWORD *)(v3 + 68);
    }
    else
    {
      v12 = *(_DWORD *)(result + 68) + 1;
      *(_DWORD *)(result + 68) = v12;
    }
  }
  if (v12 == 512)
  {
    sub_1D4B39898((_QWORD *)v3, (uint64_t)v17);
    return sub_1D4B39E4C(v3, v17);
  }
  return result;
}

void sub_1D4B39898(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  BOOL v27;
  int v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  std::runtime_error *exception;
  uint64_t v47;
  std::runtime_error *v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  std::string::size_type size;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  uint64_t v57;
  std::runtime_error *v58;
  uint64_t v59;
  std::runtime_error *v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;

  v4 = a1[4];
  if (v4 <= 3)
    goto LABEL_15;
  v5 = 0;
  v6 = 0;
  LOBYTE(v7) = 1;
  *(_BYTE *)(a2 + 88) = 1;
  v8 = (uint64_t *)a1[5];
  *(_QWORD *)(a2 + 80) = *v8;
  v9 = *v8;
  v10 = v8[1];
  v11 = v10 - *v8;
  v12 = a1[30];
  v13 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v13 + 1;
  *(_QWORD *)(v12 + 8 * v13) = v11;
  v14 = v4 - 1;
  LOBYTE(v4) = 1;
  v15 = v9;
  LOBYTE(v16) = 1;
  do
  {
    v17 = v5 + 1;
    v19 = v8[v5];
    v18 = v8[v5 + 1];
    v20 = *(_QWORD *)(a2 + 80);
    if (v18 < v20)
      v20 = v8[v5 + 1];
    if (v15 <= v18)
      v15 = v8[v5 + 1];
    v21 = v18 - v19;
    *(_QWORD *)(a2 + 80) = v20;
    if (v17 >= 2)
    {
      if (v21 < 0)
        v21 = v19 - v18;
      v22 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 40) = v22 + 1;
      *(_QWORD *)(v12 + 8 * v22) = v21;
      v23 = *(_QWORD *)(v12 + 8 * v5);
      if ((uint64_t)v6 <= v23)
        v6 = v23;
    }
    v7 = v7 & (v18 >= v19);
    LODWORD(v4) = v4 & (v18 <= v19);
    v16 = (v18 - v19 == v11) & v16;
    v5 = v17;
  }
  while (v14 != v17);
  *(_BYTE *)(a2 + 88) = v16;
  v24 = *(_QWORD *)(a2 + 80);
  if ((v24 ^ v15) < 0 && ((v15 - v24) ^ v15) < 0)
  {
LABEL_15:
    sub_1D4B39F0C((uint64_t)a1, a2);
    *(_DWORD *)(a2 + 52) = sub_1D4B393F4((uint64_t)a1, a1[28], 0, a1[4], 0, 1.0);
LABEL_16:
    v25 = 1;
LABEL_17:
    *(_DWORD *)a2 = v25;
    return;
  }
  if (v15 == v24)
  {
    if ((v16 & 1) == 0)
    {
      v45 = v15;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v47 = a2;
      v48 = exception;
      std::to_string(&v70, *(_QWORD *)(v47 + 80));
      v49 = std::string::append(&v70, "==");
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v69, v45);
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &v69;
      else
        v51 = (std::string *)v69.__r_.__value_.__r.__words[0];
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
      else
        size = v69.__r_.__value_.__l.__size_;
      v53 = std::string::append(&v71, (const std::string::value_type *)v51, size);
      v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v72.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      v55 = std::string::append(&v72, ", isFixedDelta cannot be false");
      v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
      v73.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v56;
      v55->__r_.__value_.__l.__size_ = 0;
      v55->__r_.__value_.__r.__words[2] = 0;
      v55->__r_.__value_.__r.__words[0] = 0;
      sub_1D4B2D22C(v48, &v73);
      __cxa_throw(v48, (struct type_info *)&unk_1E9846268, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    if (v18 != v19)
    {
      v57 = v15;
      v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v59 = a2;
      v60 = v58;
      std::to_string(&v70, *(_QWORD *)(v59 + 80));
      v61 = std::string::append(&v70, "==");
      v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v69, v57);
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = &v69;
      else
        v63 = (std::string *)v69.__r_.__value_.__r.__words[0];
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
      else
        v64 = v69.__r_.__value_.__l.__size_;
      v65 = std::string::append(&v71, (const std::string::value_type *)v63, v64);
      v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
      v72.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v66;
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      v67 = std::string::append(&v72, ", currDelta should be zero");
      v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
      v73.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v68;
      v67->__r_.__value_.__l.__size_ = 0;
      v67->__r_.__value_.__r.__words[2] = 0;
      v67->__r_.__value_.__r.__words[0] = 0;
      sub_1D4B2D22C(v60, &v73);
      __cxa_throw(v60, (struct type_info *)&unk_1E9846268, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    *(_QWORD *)(a2 + 8) = 0;
LABEL_22:
    v25 = 3;
    goto LABEL_17;
  }
  if (v16)
  {
    *(_DWORD *)a2 = 3;
    *(_QWORD *)(a2 + 8) = v11;
  }
  else
  {
    if (v10 != v9)
    {
      v26 = 0;
      if (v6)
      {
        do
        {
          ++v26;
          v27 = v6 > 1;
          v6 >>= 1;
        }
        while (v27);
      }
      *(_DWORD *)(a2 + 64) = byte_1D4BD539A[v26];
      if ((v7 | v4) == 1)
        goto LABEL_22;
    }
    sub_1D4B39F0C((uint64_t)a1, a2);
    v28 = sub_1D4B393F4((uint64_t)a1, a1[28], 0, a1[4], 0, 1.0);
    *(_DWORD *)(a2 + 52) = v28;
    v29 = a1[4];
    v30 = (int)((double)v29 * 0.1);
    v31 = 0x1Fu;
    while (1)
    {
      v32 = v31;
      v30 -= *((_DWORD *)a1 + v31 + 22);
      if (v30 < 0)
        break;
      --v31;
      if (!v32)
      {
        v33 = 0;
        goto LABEL_34;
      }
    }
    v33 = byte_1D4BD537A[v31];
LABEL_34:
    *(_DWORD *)(a2 + 48) = v33;
    if ((v28 - v33) < 2)
      goto LABEL_16;
    if (v29)
    {
      v34 = (uint64_t *)a1[5];
      v35 = a1[29];
      v36 = v29;
      do
      {
        v37 = *v34++;
        v38 = v37 - *(_QWORD *)(a2 + 80);
        v39 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a2 + 32) = v39 + 1;
        *(_QWORD *)(v35 + 8 * v39) = v38;
        --v36;
      }
      while (v36);
    }
    else
    {
      v35 = a1[29];
    }
    v40 = sub_1D4B393F4((uint64_t)a1, v35, 0, v29, 0, 0.95);
    v41 = 0;
    *(_DWORD *)(a2 + 56) = v40;
    v42 = 0x1Fu;
    while (1)
    {
      v43 = v42;
      v41 -= *((_DWORD *)a1 + v42 + 22);
      if (v41 < 0)
        break;
      --v42;
      if (!v43)
      {
        v44 = 0;
        goto LABEL_45;
      }
    }
    v44 = byte_1D4BD537A[v42];
LABEL_45:
    *(_DWORD *)(a2 + 60) = v44;
    if (v44 == v40)
      goto LABEL_16;
    *(_DWORD *)a2 = 2;
    sub_1D4B39F50(a1, a2);
  }
}

void sub_1D4B39D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  char v34;
  uint64_t v35;

  if (*(char *)(v35 - 57) < 0)
    operator delete(*(void **)(v35 - 80));
  if (a33 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if ((v34 & 1) != 0)
    __cxa_free_exception(v33);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4B39E4C(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  std::logic_error *exception;

  if (*(_QWORD *)(result + 32))
  {
    v2 = result;
    switch(*a2)
    {
      case 0:
        result = sub_1D4B3A424(result);
        break;
      case 1:
        result = sub_1D4B3A520(result, (uint64_t)a2);
        break;
      case 2:
        result = sub_1D4B3A5E4(result, (uint64_t)a2);
        break;
      case 3:
        result = sub_1D4B3A7EC(result, (uint64_t)a2);
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_1D4B2D198(exception, "Not implemented yet");
        __cxa_throw(exception, (struct type_info *)&unk_1E9846428, (void (*)(void *))std::logic_error::~logic_error);
    }
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 80) = 0;
  }
  return result;
}

void sub_1D4B39EF8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B39F0C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(result + 32);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(result + 48);
    v4 = *(_QWORD *)(result + 224);
    v5 = *(uint64_t **)(result + 40);
    do
    {
      v7 = *v5++;
      v6 = v7;
      v8 = (2 * v7) ^ (v7 >> 63);
      if (v3)
        v6 = v8;
      v9 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = v9 + 1;
      *(_QWORD *)(v4 + 8 * v9) = v6;
      --v2;
    }
    while (v2);
  }
  return result;
}

void sub_1D4B39F50(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  BOOL v38;
  char *v39;
  unsigned int v40;
  int v41;
  unint64_t v42;
  int v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  void *__p;
  char *v56;
  char *v57;

  v4 = a1[4];
  *(_DWORD *)(a2 + 76) = v4 / 0x14;
  v5 = *(_DWORD *)(a2 + 56);
  v6 = *(_DWORD *)(a2 + 60) - v5;
  *(_DWORD *)(a2 + 68) = v6;
  if (v6 >= 0x41)
  {
    *(_DWORD *)(a2 + 68) = 64;
  }
  else
  {
    v7 = byte_1D4BD539A[v6];
    *(_DWORD *)(a2 + 68) = v7;
    if (v7 != 64)
    {
      v8 = ~(-1 << v5);
      goto LABEL_6;
    }
  }
  *(_DWORD *)(a2 + 68) = 56;
  *(_DWORD *)(a2 + 56) = 8;
  v8 = 255;
LABEL_6:
  __p = 0;
  v56 = 0;
  v57 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  if (!v4)
  {
    v10 = 0;
    v12 = 0;
    *(_DWORD *)(a2 + 76) = 0;
LABEL_53:
    v39 = &byte_1D4BD539A[v4];
    goto LABEL_54;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = a1[29];
  do
  {
    if (*(_QWORD *)(v13 + 8 * v9) > v8)
    {
      v14 = v9 - v11;
      if (v9 - v11 > v10)
        v10 = v9 - v11;
      v15 = v56;
      if (v56 >= v57)
      {
        v17 = (char *)__p;
        v18 = (v56 - (_BYTE *)__p) >> 3;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61)
          sub_1D4B182AC();
        v20 = v57 - (_BYTE *)__p;
        if ((v57 - (_BYTE *)__p) >> 2 > v19)
          v19 = v20 >> 2;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v22 = (char *)sub_1D4B182C0((uint64_t)&v57, v21);
          v17 = (char *)__p;
          v15 = v56;
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[8 * v18];
        *(_QWORD *)v23 = v14;
        v16 = v23 + 8;
        while (v15 != v17)
        {
          v24 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *((_QWORD *)v23 - 1) = v24;
          v23 -= 8;
        }
        __p = v23;
        v56 = v16;
        v57 = &v22[8 * v21];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_QWORD *)v56 = v14;
        v16 = v15 + 8;
      }
      v56 = v16;
      v25 = *(uint64_t *)(a1[29] + 8 * v9) >> *(_DWORD *)(a2 + 56);
      v26 = v53;
      if (v53 >= v54)
      {
        v28 = v52;
        v29 = v53 - v52;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 61)
          sub_1D4B182AC();
        v31 = (char *)v54 - (char *)v52;
        if (((char *)v54 - (char *)v52) >> 2 > v30)
          v30 = v31 >> 2;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          v33 = (char *)sub_1D4B182C0((uint64_t)&v54, v32);
          v28 = v52;
          v26 = v53;
        }
        else
        {
          v33 = 0;
        }
        v34 = (uint64_t *)&v33[8 * v29];
        *v34 = v25;
        v27 = v34 + 1;
        while (v26 != v28)
        {
          v35 = *--v26;
          *--v34 = v35;
        }
        v52 = v34;
        v54 = (uint64_t *)&v33[8 * v32];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *v53 = v25;
        v27 = v53 + 1;
      }
      v53 = v27;
      v13 = a1[29];
      ++v12;
      *(_QWORD *)(v13 + 8 * v9) &= v8;
      v4 = a1[4];
      v11 = v9;
    }
    ++v9;
  }
  while (v9 < v4);
  *(_DWORD *)(a2 + 76) = v12;
  if (!v10 && v12)
  {
    *(_DWORD *)(a2 + 72) = 1;
    v36 = v52;
LABEL_60:
    v42 = 0;
    v43 = 0;
    v44 = __p;
    v45 = *(_DWORD *)(a2 + 68);
    v46 = a1[27];
    do
    {
      v47 = v44[v43];
      v48 = v36[v43];
      if (v47 < 256)
      {
        v50 = v44[v43];
      }
      else
      {
        do
        {
          v49 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a2 + 16) = v49 + 1;
          *(_QWORD *)(v46 + 8 * v49) = 255 << v45;
          ++v42;
          v50 = v47 - 255;
          v38 = (unint64_t)v47 > 0x1FE;
          v47 -= 255;
        }
        while (v38);
      }
      ++v43;
      v51 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v51 + 1;
      *(_QWORD *)(v46 + 8 * v51) = (v50 << v45) | v48;
      ++v42;
    }
    while (v42 < v12);
    v36 = v52;
    goto LABEL_67;
  }
  if ((v10 & 0x8000000000000000) == 0)
  {
    v4 = 0;
    if (v10)
    {
      v37 = v10;
      do
      {
        ++v4;
        v38 = v37 > 1;
        v37 >>= 1;
      }
      while (v38);
    }
    goto LABEL_53;
  }
  v39 = &byte_1D4BD53DA;
LABEL_54:
  v40 = *v39;
  *(_DWORD *)(a2 + 72) = v40;
  if (v40 > 8)
  {
    if (v10 == 511)
      v41 = 2;
    else
      v41 = 1;
    v12 += v41;
    *(_DWORD *)(a2 + 72) = 8;
    *(_DWORD *)(a2 + 76) = v12;
  }
  v36 = v52;
  if (v12)
    goto LABEL_60;
LABEL_67:
  if (v36)
    operator delete(v36);
  if (__p)
  {
    v56 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1D4B3A32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4B3A364(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  _OWORD v4[5];
  __int128 v5;

  if (*(_QWORD *)(a1 + 32))
  {
    v5 = 0u;
    memset(v4, 0, sizeof(v4));
    if (!*(_DWORD *)(a1 + 72))
    {
      v3 = *(_DWORD *)(a1 + 68);
      if (!v3)
        goto LABEL_5;
      if (v3 > 2)
      {
        if (v3 >= 0xB)
        {
          LODWORD(v4[0]) = 3;
          BYTE8(v5) = 1;
        }
        goto LABEL_4;
      }
      *(_DWORD *)(a1 + 68) = 0;
      *(_DWORD *)(a1 + 72) = v3;
    }
    sub_1D4B39898((_QWORD *)a1, (uint64_t)v4);
LABEL_4:
    sub_1D4B39E4C(a1, v4);
  }
LABEL_5:
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), (*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_1D4B3A424(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  char *v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  uint64_t result;
  int v14;
  int v15;

  if (*(_BYTE *)(a1 + 48))
    v2 = (2 * **(_QWORD **)(a1 + 40)) ^ (**(uint64_t **)(a1 + 40) >> 63);
  else
    v2 = **(_QWORD **)(a1 + 40);
  if (v2 < 0)
  {
    v6 = &byte_1D4BD53DA;
  }
  else
  {
    v3 = 0;
    if (v2)
    {
      v4 = v2;
      do
      {
        ++v3;
        v5 = v4 > 1;
        v4 >>= 1;
      }
      while (v5);
    }
    v6 = &byte_1D4BD539A[v3];
  }
  v7 = *v6;
  v8 = (v7 & 7) == 0;
  v9 = v7 >> 3;
  if ((v7 & 7) != 0)
    v10 = 0;
  else
    v10 = -1;
  v11 = (__PAIR64__(v9, v7 & 7) - 1) >> 32;
  v12 = *(_DWORD *)(a1 + 68) - 3;
  *(_DWORD *)(a1 + 68) = v12;
  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, (char)(v12 | (8 * (v9 - v8))));
  if ((v11 & 0x80000000) == 0)
  {
    v14 = 8 * v11;
    v15 = v9 + v10 + 1;
    do
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, (char)(v2 >> (v14 & 0xF8)));
      v14 -= 8;
      --v15;
    }
    while (v15 > 0);
  }
  *(_DWORD *)(a1 + 68) = 0;
  return result;
}

uint64_t sub_1D4B3A520(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  int v5;
  uint64_t result;

  v3 = *(unsigned int *)(a2 + 52);
  if (*(_BYTE *)(a1 + 64))
  {
    if (v3 > 0x40)
    {
      LODWORD(v3) = 0x40u;
      goto LABEL_7;
    }
    LODWORD(v3) = byte_1D4BD53DB[v3];
  }
  if (v3 <= 0x40)
  {
LABEL_7:
    v4 = (2 * byte_1D4BD541C[v3]) | 0x40;
    goto LABEL_8;
  }
  v4 = 126;
LABEL_8:
  v5 = *(_DWORD *)(a1 + 72) - 1;
  *(_DWORD *)(a1 + 72) = v5;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, (BYTE1(v5) & 1 | v4));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, (char)v5);
  result = sub_1D4B3A958(a1, *(_QWORD *)(a1 + 224), 0, *(_QWORD *)(a1 + 32), v3);
  *(_DWORD *)(a1 + 72) = 0;
  return result;
}

uint64_t sub_1D4B3A5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  int v15;
  int v16;
  char v17;
  uint64_t v18;
  unsigned __int8 v19;
  char v20;
  int v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t result;

  v4 = *(unsigned int *)(a2 + 56);
  if (v4 > 0x40)
    v5 = -66;
  else
    v5 = (2 * byte_1D4BD541C[v4]) | 0x80;
  v6 = *(_DWORD *)(a1 + 72) - 1;
  *(_DWORD *)(a1 + 72) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  if (v7 < 0)
  {
    v8 = -v7;
    *(_QWORD *)(a2 + 80) = -v7;
LABEL_8:
    v9 = 0;
    v10 = v8;
    do
    {
      ++v9;
      v11 = v10 > 1;
      v10 >>= 1;
    }
    while (v11);
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(a2 + 80);
  if (v7)
    goto LABEL_8;
  v9 = 0;
LABEL_10:
  v12 = byte_1D4BD539A[v9] + 1;
  v13 = (v12 & 7) == 0;
  v14 = v12 >> 3;
  if (v13)
    v15 = v14;
  else
    v15 = v14 + 1;
  v16 = v15 - 1;
  if (v7 < 0)
    *(_QWORD *)(a2 + 80) = (1 << (8 * v15 - 1)) | v8;
  v17 = BYTE1(v6) & 1 | v5;
  v18 = *(unsigned int *)(a2 + 68);
  if (v18 > 0x40)
    v19 = 31;
  else
    v19 = byte_1D4BD541C[v18];
  v20 = v19 | (32 * v16);
  v21 = (32 * *(_DWORD *)(a2 + 72) + 224) | *(_DWORD *)(a2 + 76);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, v17);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, (char)v6);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, v20);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, (char)v21);
  if (v15)
  {
    v22 = 8 * v16;
    do
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, (char)(*(uint64_t *)(a2 + 80) >> (v22 & 0xF8)));
      v22 -= 8;
      v23 = __OFSUB__(v15--, 1);
    }
    while (!((v15 < 0) ^ v23 | (v15 == 0)));
  }
  v24 = *(unsigned int *)(a2 + 56);
  if (v24 > 0x40)
    v25 = 64;
  else
    v25 = byte_1D4BD539A[v24];
  sub_1D4B3A958(a1, *(_QWORD *)(a1 + 232), 0, *(_QWORD *)(a1 + 32), v25);
  v26 = *(_DWORD *)(a2 + 68) + *(_DWORD *)(a2 + 72);
  if (v26 > 0x40)
    v27 = 64;
  else
    v27 = byte_1D4BD539A[v26];
  result = sub_1D4B3A958(a1, *(_QWORD *)(a1 + 216), 0, *(unsigned int *)(a2 + 76), v27);
  *(_DWORD *)(a1 + 72) = 0;
  return result;
}

uint64_t sub_1D4B3A7EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  char v6;
  char v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 64);
  if (*(_BYTE *)(a1 + 64))
  {
    if (v4 > 0x40)
      LODWORD(v4) = 64;
    else
      LODWORD(v4) = byte_1D4BD53DB[v4];
  }
  if (*(_BYTE *)(a2 + 88))
  {
    v5 = *(_DWORD *)(a1 + 68);
    if (v5 < 4)
    {
      v5 = *(_DWORD *)(a1 + 72);
      *(_DWORD *)(a1 + 72) = 0;
    }
    else
    {
      *(_DWORD *)(a1 + 68) = 0;
    }
    v6 = -64;
  }
  else
  {
    if ((_DWORD)v4 == 1)
      LODWORD(v4) = 2;
    if (v4 > 0x40)
      v6 = -2;
    else
      v6 = (2 * byte_1D4BD541C[v4]) | 0xC0;
    v5 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = 0;
  }
  v7 = v5 - 1;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, (((unsigned __int16)(v5 - 1) >> 8) & 1 | v6));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, v7);
  v8 = 64;
  if (!*(_BYTE *)(a1 + 48))
    v8 = 56;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + v8))(a1, **(_QWORD **)(a1 + 40));
  if (*(_BYTE *)(a2 + 88))
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, *(_QWORD *)(a2 + 8));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, **(_QWORD **)(a1 + 240));
  return sub_1D4B3A958(a1, *(_QWORD *)(a1 + 240), 1u, *(_QWORD *)(a1 + 32) - 2, v4);
}

uint64_t sub_1D4B3A958(uint64_t result, uint64_t a2, unsigned int a3, unint64_t a4, unsigned int a5)
{
  unsigned int v6;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  char v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;

  if (a2 && a4 && a5)
  {
    v6 = a3;
    v8 = result;
    if (a5 > 0x40)
      v9 = 64;
    else
      v9 = byte_1D4BD53DB[a5];
    if (v9 == a5)
    {
      v10 = a4 + a3;
      if (a5 > 7)
      {
        if (v10 > a3)
        {
          v28 = a3;
          v29 = 8 * (a5 >> 3);
          do
          {
            v30 = v29;
            do
            {
              v30 -= 8;
              result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 48))(v8, (char)(*(uint64_t *)(a2 + 8 * v28) >> v30));
            }
            while (v30);
            ++v28;
          }
          while (v28 != v10);
        }
      }
      else
      {
        v32 = ~(-1 << a5);
        v11 = 8u / a5;
        v33 = a4 % v11;
        v12 = v10 - v33;
        if (v12 > a3)
        {
          if (v11 <= 1)
            v13 = 1;
          else
            v13 = v11;
          v14 = 8 - a5;
          do
          {
            v15 = 0;
            v16 = 0;
            v17 = v13;
            v18 = v14;
            do
            {
              v19 = *(_QWORD *)(a2 + 8 * (v6 + v15++)) & v32;
              v16 |= v19 << v18;
              v18 -= a5;
              --v17;
            }
            while (v17);
            result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 48))(v8, v16);
            v6 += v11;
          }
          while (v6 < v12);
        }
        if (v33)
        {
          if (v10 >= v33)
          {
            LOBYTE(v20) = 0;
            v31 = 8 - a5;
            do
            {
              LOBYTE(v20) = v20 | ((unint64_t)(*(_QWORD *)(a2 + 8 * v12++) & v32) << v31);
              v31 -= a5;
            }
            while (v12 < v10);
          }
          else
          {
            LOBYTE(v20) = 0;
          }
          return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 48))(v8, (char)v20);
        }
      }
    }
    else
    {
      v21 = a4 + a3;
      if (v21 > a3)
      {
        v20 = 0;
        v22 = 8;
        v23 = a3;
        do
        {
          v24 = *(_QWORD *)(a2 + 8 * v23);
          if (v22 >= a5)
          {
            v27 = v20;
            v25 = a5;
          }
          else
          {
            v25 = a5;
            do
            {
              v25 -= v22;
              v26 = v20 | (v24 >> v25);
              v24 &= ~(-1 << v25);
              result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 48))(v8, v26);
              LOBYTE(v20) = 0;
              v27 = 0;
              v22 = 8;
            }
            while (v25 > 8);
          }
          v22 -= v25;
          v20 = v27 | (v24 << v22);
          if (!v22)
          {
            result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 48))(v8, (char)v20);
            v20 = 0;
            v22 = 8;
          }
          v23 = ++v6;
        }
        while (v21 > v6);
        if (v22 != 8)
          return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 48))(v8, (char)v20);
      }
    }
  }
  return result;
}

void sub_1D4B3AC04(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B3AC18(a1);
  operator delete(v1);
}

_QWORD *sub_1D4B3AC18(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *a1 = off_1E9847700;
  v2 = (void *)a1[5];
  if (v2)
    operator delete[](v2);
  v3 = (void *)a1[27];
  if (v3)
    operator delete[](v3);
  v4 = (void *)a1[28];
  if (v4)
    operator delete[](v4);
  v5 = (void *)a1[29];
  if (v5)
    operator delete[](v5);
  v6 = (void *)a1[30];
  if (v6)
    operator delete[](v6);
  return sub_1D4B3AC80(a1);
}

_QWORD *sub_1D4B3AC80(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = off_1E98474D0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t sub_1D4B3ACC8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  void *v8;
  uint64_t v9;
  uint64_t result;
  void *v12;
  uint64_t v13;
  std::logic_error *exception;
  uint64_t v15;
  uint64_t v16;

  if (a3 == 1)
  {
    v12 = operator new(0xF8uLL);
    v13 = *a1;
    *a1 = 0;
    v15 = v13;
    sub_1D4B396A0(v12, &v15, a2, a4);
    *a5 = v12;
    result = v15;
    v15 = 0;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  if (a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D198(exception, "Not implemented yet");
    __cxa_throw(exception, (struct type_info *)&unk_1E9846428, (void (*)(void *))std::logic_error::~logic_error);
  }
  v8 = operator new(0x58uLL);
  v9 = *a1;
  *a1 = 0;
  v16 = v9;
  sub_1D4B37B94(v8, &v16, a2);
  *a5 = v8;
  result = v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1D4B3ADC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B3AE10@<X0>(uint64_t *a1@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  void *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t result;
  void *v13;
  uint64_t v14;
  std::logic_error *exception;
  uint64_t v16;
  uint64_t v17;

  if (a3 == 1)
  {
    v13 = operator new(0xF0uLL);
    v14 = *a1;
    *a1 = 0;
    v16 = v14;
    sub_1D4B38728((uint64_t)v13, &v16, a2, a4);
    *a5 = v13;
    result = v16;
    v16 = 0;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, v10);
  }
  if (a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D198(exception, "Not implemented yet");
    __cxa_throw(exception, (struct type_info *)&unk_1E9846428, (void (*)(void *))std::logic_error::~logic_error);
  }
  v8 = operator new(0x48uLL);
  v9 = *a1;
  *a1 = 0;
  v17 = v9;
  v10.n128_f64[0] = sub_1D4B37E6C((uint64_t)v8, &v17, a2);
  *a5 = v8;
  result = v17;
  v17 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)result + 8))(result, v10);
  return result;
}

void sub_1D4B3AF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B3AF58(uint64_t result, _QWORD *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v5;
  uint64_t v7;
  _BYTE *v8;

  if (a3)
  {
    v5 = a3;
    v7 = result;
    v8 = a4;
    do
    {
      if (!a4 || *v8)
        result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *a2);
      ++a2;
      ++v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1D4B3AFC8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, (2 * a2) ^ (a2 >> 63));
}

uint64_t sub_1D4B3AFDC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  BOOL v5;

  v2 = a2;
  if (a2 >= 0x80)
  {
    do
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, v2 | 0xFFFFFF80);
      v4 = v2 >> 7;
      v5 = v2 >= 0x4000;
      v2 >>= 7;
    }
    while (v5);
  }
  else
  {
    LOBYTE(v4) = a2;
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, (char)v4);
}

uint64_t sub_1D4B3B040(uint64_t result, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  std::bad_alloc *exception;
  std::bad_alloc *v7;
  int v8;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(result + 16);
  if (v4 == *(_QWORD *)(result + 24))
  {
    v8 = 0;
    result = (*(uint64_t (**)(_QWORD, uint64_t, int *))(**(_QWORD **)(result + 8) + 16))(*(_QWORD *)(result + 8), result + 56, &v8);
    if ((result & 1) == 0)
    {
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v7 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v7, MEMORY[0x1E0DE4EA8], MEMORY[0x1E0DE4DC0]);
    }
    v4 = 0;
    v3[3] = v8;
  }
  v5 = v3[7];
  v3[2] = v4 + 1;
  *(_BYTE *)(v5 + v4) = a2;
  return result;
}

uint64_t sub_1D4B3B0D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 16);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8)))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v4);
  else
    v5 = v5 + v4 - *(_QWORD *)(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *(_QWORD *)(a1 + 32));
}

void *sub_1D4B3B168(uint64_t a1, _BYTE *a2)
{
  int v3;
  _QWORD *v5;
  void *v6;
  uint64_t v7;

  v3 = *(_DWORD *)(a1 + 16);
  if ((v3 & 1) != 0)
  {
    v6 = operator new(0x40uLL);
    sub_1D4B3C000((uint64_t)v6, a1);
  }
  else if ((v3 & 2) != 0)
  {
    v6 = operator new(0x40uLL);
    sub_1D4B3BF7C((uint64_t)v6, a1);
  }
  else if ((v3 & 4) != 0)
  {
    v6 = operator new(0x70uLL);
    sub_1D4B3C084((uint64_t)v6, a1, a2);
  }
  else if ((v3 & 8) != 0)
  {
    v6 = operator new(0x40uLL);
    sub_1D4B3BDA4((uint64_t)v6, a1, a2);
  }
  else if ((v3 & 0x10) != 0)
  {
    v6 = operator new(0x70uLL);
    sub_1D4B3BE8C((uint64_t)v6, a1, a2);
  }
  else if ((v3 & 0x80) != 0)
  {
    v6 = operator new(0x58uLL);
    sub_1D4B3C218((uint64_t)v6, a1, (uint64_t)a2);
  }
  else if ((v3 & 0x20) != 0)
  {
    v6 = operator new(0x38uLL);
    sub_1D4B3BE18((uint64_t)v6, a1, a2);
  }
  else
  {
    v5 = operator new(0x30uLL);
    v6 = v5;
    if ((v3 & 0x40) != 0)
    {
      sub_1D4B3BD3C((uint64_t)v5, a1, a2);
    }
    else
    {
      *v5 = &off_1E9848798;
      v5[1] = &unk_1E9848800;
      *((_DWORD *)v5 + 4) = 0;
      *((_BYTE *)v5 + 20) = 0;
      v7 = *(_QWORD *)(a1 + 96);
      v5[3] = 0;
      v5[4] = v7;
      *((_BYTE *)v5 + 16) = *(_BYTE *)(a1 + 112);
    }
  }
  return v6;
}

void sub_1D4B3B2BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B3B2D8(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  char **v4;
  uint64_t v7;
  void *v8;
  void *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  *a1 = off_1E9847908;
  a1[1] = 0;
  v4 = (char **)(a1 + 1);
  a1[2] = 0;
  a1[3] = 0;
  if (*(int *)(a2 + 32) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = sub_1D4B3B168(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v7 + 8), a3);
      v9 = v8;
      v11 = (_QWORD *)a1[2];
      v10 = a1[3];
      if ((unint64_t)v11 >= v10)
      {
        v13 = ((char *)v11 - *v4) >> 3;
        if ((unint64_t)(v13 + 1) >> 61)
          sub_1D4B182AC();
        v14 = v10 - (_QWORD)*v4;
        v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1))
          v15 = v13 + 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)sub_1D4B182C0((uint64_t)(a1 + 3), v16);
        else
          v17 = 0;
        v18 = &v17[8 * v13];
        *(_QWORD *)v18 = v9;
        v12 = v18 + 8;
        v20 = (char *)a1[1];
        v19 = (char *)a1[2];
        if (v19 != v20)
        {
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v18 - 1) = v21;
            v18 -= 8;
          }
          while (v19 != v20);
          v19 = *v4;
        }
        a1[1] = v18;
        a1[2] = v12;
        a1[3] = &v17[8 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      a1[2] = v12;
      ++v7;
    }
    while (v7 < *(int *)(a2 + 32));
  }
  return a1;
}

void sub_1D4B3B428(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4B3B448(_QWORD *a1, uint64_t a2, _BYTE *a3)
{
  char **v4;
  uint64_t v7;
  void *v8;
  void *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  *a1 = off_1E9847908;
  a1[1] = 0;
  v4 = (char **)(a1 + 1);
  a1[2] = 0;
  a1[3] = 0;
  if (*(int *)(a2 + 104) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = sub_1D4B3B168(*(_QWORD *)(*(_QWORD *)(a2 + 112) + 8 * v7 + 8), a3);
      v9 = v8;
      v11 = (_QWORD *)a1[2];
      v10 = a1[3];
      if ((unint64_t)v11 >= v10)
      {
        v13 = ((char *)v11 - *v4) >> 3;
        if ((unint64_t)(v13 + 1) >> 61)
          sub_1D4B182AC();
        v14 = v10 - (_QWORD)*v4;
        v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1))
          v15 = v13 + 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)sub_1D4B182C0((uint64_t)(a1 + 3), v16);
        else
          v17 = 0;
        v18 = &v17[8 * v13];
        *(_QWORD *)v18 = v9;
        v12 = v18 + 8;
        v20 = (char *)a1[1];
        v19 = (char *)a1[2];
        if (v19 != v20)
        {
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v18 - 1) = v21;
            v18 -= 8;
          }
          while (v19 != v20);
          v19 = *v4;
        }
        a1[1] = v18;
        a1[2] = v12;
        a1[3] = &v17[8 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v11 = v8;
        v12 = v11 + 1;
      }
      a1[2] = v12;
      ++v7;
    }
    while (v7 < *(int *)(a2 + 104));
  }
  return a1;
}

void sub_1D4B3B598(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4B3B5BC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = off_1E9847908;
  v3 = (_QWORD *)a1[1];
  v2 = (_QWORD *)a1[2];
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        v2 = (_QWORD *)a1[2];
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = (_QWORD *)a1[1];
  }
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1D4B3B630(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B3B5BC(a1);
  operator delete(v1);
}

uint64_t sub_1D4B3B644(uint64_t a1)
{
  uint64_t v2;
  void **v4;

  *(_QWORD *)a1 = off_1E9848898;
  v4 = (void **)(a1 + 16);
  sub_1D4B41490(&v4);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1D4B3B6A4(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_1D4B3B644(a1);
  operator delete(v1);
}

uint64_t sub_1D4B3B6B8(uint64_t a1, uint64_t a2, uint64_t *a3, _BYTE *a4)
{
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t *v23;
  char **v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  char *v36;
  _OWORD *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v44;
  __int128 v46;
  _QWORD v47[5];

  *(_QWORD *)a1 = off_1E9848898;
  *(_OWORD *)(a1 + 8) = 0u;
  v44 = (uint64_t *)(a1 + 8);
  v7 = (uint64_t *)(a1 + 16);
  *(_OWORD *)(a1 + 24) = 0u;
  v8 = operator new(0x20uLL);
  sub_1D4B3B2D8(v8, a2, a4);
  v9 = *v44;
  *v44 = (uint64_t)v8;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_1D4B3B9B8(v7, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  v11 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  if (v10 != v11)
  {
    v12 = 0;
    v13 = *a3;
    do
    {
      v14 = *(_QWORD *)(v13 + 24 * v12);
      if (*(_QWORD *)(v13 + 24 * v12 + 8) != v14)
      {
        v15 = 0;
        do
        {
          v16 = *v7;
          v17 = sub_1D4B3B168(v14 + 120 * v15, a4);
          sub_1D4B41874(&v46, (uint64_t)v17);
          v18 = v16 + 24 * v12;
          v21 = *(char **)(v18 + 8);
          v20 = v18 + 8;
          v19 = v21;
          v23 = (uint64_t *)(v20 + 8);
          v22 = *(_QWORD *)(v20 + 8);
          if ((unint64_t)v21 >= v22)
          {
            v24 = (char **)(v16 + 24 * v12);
            v25 = (v19 - *v24) >> 4;
            v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 60)
              sub_1D4B182AC();
            v27 = v22 - (_QWORD)*v24;
            if (v27 >> 3 > v26)
              v26 = v27 >> 3;
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
              v28 = 0xFFFFFFFFFFFFFFFLL;
            else
              v28 = v26;
            v47[4] = v20 + 8;
            v29 = (char *)sub_1D4B35A14(v20 + 8, v28);
            v31 = &v29[16 * v25];
            *(_OWORD *)v31 = v46;
            v46 = 0uLL;
            v32 = *(char **)v20;
            v33 = *v24;
            if (*(char **)v20 == *v24)
            {
              v36 = *(char **)v20;
              v34 = &v29[16 * v25];
            }
            else
            {
              v34 = &v29[16 * v25];
              do
              {
                v35 = *((_OWORD *)v32 - 1);
                v32 -= 16;
                *((_OWORD *)v34 - 1) = v35;
                v34 -= 16;
                *(_QWORD *)v32 = 0;
                *((_QWORD *)v32 + 1) = 0;
              }
              while (v32 != v33);
              v36 = *v24;
              v32 = *(char **)v20;
            }
            v37 = v31 + 16;
            *v24 = v34;
            v47[1] = v36;
            *(_QWORD *)v20 = v31 + 16;
            v47[2] = v32;
            v38 = *v23;
            *v23 = (uint64_t)&v29[16 * v30];
            v47[3] = v38;
            v47[0] = v36;
            sub_1D4B37A14((uint64_t)v47);
            v39 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
            *(_QWORD *)v20 = v37;
            if (v39)
            {
              p_shared_owners = (unint64_t *)&v39->__shared_owners_;
              do
                v41 = __ldaxr(p_shared_owners);
              while (__stlxr(v41 - 1, p_shared_owners));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
          }
          else
          {
            *(_OWORD *)v19 = v46;
            *(_QWORD *)v20 = v19 + 16;
          }
          ++v15;
          v13 = *a3;
          v42 = (uint64_t *)(*a3 + 24 * v12);
          v14 = *v42;
        }
        while (v15 < 0xEEEEEEEEEEEEEEEFLL * ((v42[1] - *v42) >> 3));
        v11 = *(_QWORD *)(a1 + 16);
        v10 = *(_QWORD *)(a1 + 24);
      }
      ++v12;
    }
    while (v12 < 0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 3));
  }
  return a1;
}

void sub_1D4B3B95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  uint64_t v13;

  operator delete(v11);
  sub_1D4B41490((void ***)&a11);
  v13 = *a9;
  *a9 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void sub_1D4B3B9B8(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1D4B41500(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      sub_1D4B35A48(&v8);
    }
    a1[1] = v7;
  }
}

_QWORD *sub_1D4B3BA50(_QWORD *result)
{
  *result = &off_1E9848798;
  result[1] = &unk_1E9848800;
  return result;
}

_QWORD *sub_1D4B3BA64(_QWORD *result)
{
  *(result - 1) = &off_1E9848798;
  *result = &unk_1E9848800;
  return result;
}

void sub_1D4B3BA80(uint64_t a1)
{
  operator delete((void *)(a1 - 8));
}

_QWORD *sub_1D4B3BA88(_QWORD *result)
{
  *result = &off_1E9849368;
  result[1] = &unk_1E98493E0;
  return result;
}

_QWORD *sub_1D4B3BA9C(_QWORD *result)
{
  *(result - 1) = &off_1E9849368;
  *result = &unk_1E98493E0;
  return result;
}

void sub_1D4B3BAB8(uint64_t a1)
{
  operator delete((void *)(a1 - 8));
}

_QWORD *sub_1D4B3BAC0(_QWORD *result)
{
  *result = &off_1E9849600;
  result[1] = &unk_1E9849680;
  return result;
}

_QWORD *sub_1D4B3BAD4(_QWORD *result)
{
  *(result - 1) = &off_1E9849600;
  *result = &unk_1E9849680;
  return result;
}

void sub_1D4B3BAF0(uint64_t a1)
{
  operator delete((void *)(a1 - 8));
}

_QWORD *sub_1D4B3BAF8(_QWORD *result)
{
  *result = &off_1E98490F8;
  result[1] = &unk_1E9849180;
  return result;
}

_QWORD *sub_1D4B3BB0C(_QWORD *result)
{
  *(result - 1) = &off_1E98490F8;
  *result = &unk_1E9849180;
  return result;
}

void sub_1D4B3BB28(uint64_t a1)
{
  operator delete((void *)(a1 - 8));
}

_QWORD *sub_1D4B3BB30(_QWORD *result)
{
  *result = &off_1E98496D0;
  result[1] = &unk_1E9849768;
  return result;
}

_QWORD *sub_1D4B3BB44(_QWORD *result)
{
  *(result - 1) = &off_1E98496D0;
  *result = &unk_1E9849768;
  return result;
}

void sub_1D4B3BB60(uint64_t a1)
{
  operator delete((void *)(a1 - 8));
}

_QWORD *sub_1D4B3BB68(_QWORD *result)
{
  *result = &off_1E9849430;
  result[1] = &unk_1E98494C8;
  return result;
}

_QWORD *sub_1D4B3BB7C(_QWORD *result)
{
  *(result - 1) = &off_1E9849430;
  *result = &unk_1E98494C8;
  return result;
}

void sub_1D4B3BB98(uint64_t a1)
{
  operator delete((void *)(a1 - 8));
}

_QWORD *sub_1D4B3BBA0(_QWORD *result)
{
  *result = &off_1E98497B8;
  result[1] = &unk_1E9849850;
  return result;
}

_QWORD *sub_1D4B3BBB4(_QWORD *result)
{
  *(result - 1) = &off_1E98497B8;
  *result = &unk_1E9849850;
  return result;
}

void sub_1D4B3BBD0(uint64_t a1)
{
  operator delete((void *)(a1 - 8));
}

uint64_t sub_1D4B3BBD8(uint64_t result, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_BYTE *)(result + 17))
  {
    *(_WORD *)(result + 17) = 257;
    *(_QWORD *)(result + 48) = a2;
    v3 = (_QWORD *)(result + 40);
LABEL_6:
    *v3 = a2;
    goto LABEL_7;
  }
  v3 = (_QWORD *)(result + 40);
  if (*(_QWORD *)(result + 40) > a2)
    goto LABEL_6;
  v3 = (_QWORD *)(result + 48);
  if (*(_QWORD *)(result + 48) < a2)
    goto LABEL_6;
LABEL_7:
  if (*(_BYTE *)(result + 19))
  {
    v4 = *(_QWORD *)(result + 56);
    v5 = v4 + a3 * a2;
    *(_QWORD *)(result + 56) = v5;
    if (((v4 ^ a2) & 0x8000000000000000) == 0)
      *(_BYTE *)(result + 19) = (v5 ^ v4) >= 0;
  }
  return result;
}

_QWORD *sub_1D4B3BC4C(_QWORD *a1)
{
  *a1 = off_1E9849518;
  a1[1] = &unk_1E98495B0;
  sub_1D4B41440((uint64_t)(a1 + 2));
  return a1;
}

uint64_t sub_1D4B3BC80(_QWORD *a1)
{
  *(a1 - 1) = off_1E9849518;
  *a1 = &unk_1E98495B0;
  return sub_1D4B41440((uint64_t)(a1 + 1));
}

void sub_1D4B3BC98(_QWORD *a1)
{
  *a1 = off_1E9849518;
  a1[1] = &unk_1E98495B0;
  sub_1D4B41440((uint64_t)(a1 + 2));
  operator delete(a1);
}

void sub_1D4B3BCCC(_QWORD *a1)
{
  _QWORD *v1;

  *(a1 - 1) = off_1E9849518;
  v1 = a1 - 1;
  *a1 = &unk_1E98495B0;
  sub_1D4B41440((uint64_t)(a1 + 1));
  operator delete(v1);
}

_QWORD *sub_1D4B3BD04(_QWORD *result)
{
  *result = &off_1E98498E0;
  result[1] = &unk_1E9849988;
  return result;
}

_QWORD *sub_1D4B3BD18(_QWORD *result)
{
  *(result - 1) = &off_1E98498E0;
  *result = &unk_1E9849988;
  return result;
}

void sub_1D4B3BD34(uint64_t a1)
{
  operator delete((void *)(a1 - 8));
}

uint64_t sub_1D4B3BD3C(uint64_t result, uint64_t a2, _BYTE *a3)
{
  _BYTE *v3;

  *(_QWORD *)result = &off_1E9849368;
  *(_QWORD *)(result + 8) = &unk_1E98493E0;
  *(_BYTE *)(result + 20) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 112);
  if ((*(_BYTE *)(a2 + 16) & 0x40) != 0 && *a3)
  {
    v3 = *(_BYTE **)(a2 + 72);
    if (!v3)
      v3 = &unk_1EFEC6660;
    *(_BYTE *)(result + 20) = v3[16] & 1;
    *(_QWORD *)(result + 24) = *((_QWORD *)v3 + 3);
  }
  return result;
}

uint64_t sub_1D4B3BDA4(uint64_t result, uint64_t a2, _BYTE *a3)
{
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)result = &off_1E9849600;
  *(_QWORD *)(result + 8) = &unk_1E9849680;
  *(_BYTE *)(result + 20) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 112);
  if ((*(_BYTE *)(a2 + 16) & 8) != 0 && *a3)
  {
    *(_BYTE *)(result + 48) = 1;
    v3 = *(_QWORD **)(a2 + 48);
    if (!v3)
      v3 = &unk_1EFEC6680;
    v4 = *(_QWORD *)(v3[4] + 8);
  }
  else
  {
    v4 = 0;
    *(_BYTE *)(result + 48) = 0;
  }
  *(_QWORD *)(result + 56) = v4;
  return result;
}

uint64_t sub_1D4B3BE18(uint64_t result, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  _BYTE *v4;
  char v5;

  *(_QWORD *)result = &off_1E98490F8;
  *(_QWORD *)(result + 8) = &unk_1E9849180;
  *(_BYTE *)(result + 20) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 112);
  v3 = 0;
  if ((*(_BYTE *)(a2 + 16) & 0x20) != 0 && *a3)
  {
    v4 = *(_BYTE **)(a2 + 64);
    if (!v4)
      v4 = &unk_1EFEC6640;
    v5 = v4[16];
    *(_BYTE *)(result + 17) = v5 & 1;
    *(_BYTE *)(result + 18) = (v5 & 2) != 0;
    v3 = *((_QWORD *)v4 + 3);
  }
  *(_QWORD *)(result + 40) = v3;
  return result;
}

uint64_t sub_1D4B3BE8C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  _QWORD *v6;
  char v7;
  __int128 v9;
  int v10;
  __int128 v11;
  int v12;
  __int128 v13;
  int v14;

  *(_QWORD *)a1 = &off_1E98496D0;
  *(_QWORD *)(a1 + 8) = &unk_1E9849768;
  sub_1D4B413FC(a1 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 112);
  if ((*(_BYTE *)(a2 + 16) & 0x10) != 0 && *a3)
  {
    if (*(_QWORD *)(a2 + 56))
      v6 = *(_QWORD **)(a2 + 56);
    else
      v6 = qword_1EFEC67F0;
    v7 = *((_BYTE *)v6 + 16);
    *(_BYTE *)(a1 + 17) = v7 & 1;
    *(_BYTE *)(a1 + 18) = (v7 & 2) != 0;
    *(_BYTE *)(a1 + 19) = (v7 & 4) != 0;
    sub_1D4B4A88C((int)&v13, (std::string *)v6[3]);
    *(_OWORD *)(a1 + 40) = v13;
    *(_DWORD *)(a1 + 56) = v14;
    sub_1D4B4A88C((int)&v11, (std::string *)v6[4]);
    *(_OWORD *)(a1 + 64) = v11;
    *(_DWORD *)(a1 + 80) = v12;
    sub_1D4B4A88C((int)&v9, (std::string *)v6[5]);
    *(_OWORD *)(a1 + 88) = v9;
    *(_DWORD *)(a1 + 104) = v10;
  }
  return a1;
}

uint64_t sub_1D4B3BF7C(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  char *v4;
  char v5;

  *(_QWORD *)result = &off_1E9849430;
  *(_QWORD *)(result + 8) = &unk_1E98494C8;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 112);
  if ((*(_BYTE *)(a2 + 16) & 2) != 0)
  {
    v4 = (char *)&unk_1EFEC6728;
    if (*(_QWORD *)(a2 + 32))
      v4 = *(char **)(a2 + 32);
    v5 = v4[16];
    *(_BYTE *)(result + 17) = v5 & 1;
    *(_BYTE *)(result + 18) = (v5 & 2) != 0;
    *(_BYTE *)(result + 19) = (v5 & 4) != 0;
    v2 = *(_OWORD *)(v4 + 24);
    v3 = *((_QWORD *)v4 + 5);
  }
  else
  {
    v2 = 0uLL;
    v3 = 0;
  }
  *(_OWORD *)(result + 40) = v2;
  *(_QWORD *)(result + 56) = v3;
  return result;
}

uint64_t sub_1D4B3C000(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  char *v4;
  char v5;

  *(_QWORD *)result = &off_1E98497B8;
  *(_QWORD *)(result + 8) = &unk_1E9849850;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 0;
  v2 = 0uLL;
  *(_OWORD *)(result + 24) = 0u;
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 112);
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    v4 = (char *)&unk_1EFEC6868;
    if (*(_QWORD *)(a2 + 24))
      v4 = *(char **)(a2 + 24);
    v5 = v4[16];
    *(_BYTE *)(result + 17) = v5 & 1;
    *(_BYTE *)(result + 18) = (v5 & 2) != 0;
    *(_BYTE *)(result + 19) = (v5 & 4) != 0;
    v2 = *(_OWORD *)(v4 + 24);
    v3 = *((_QWORD *)v4 + 5);
  }
  else
  {
    v3 = 0;
  }
  *(_OWORD *)(result + 40) = v2;
  *(_QWORD *)(result + 56) = v3;
  return result;
}

uint64_t sub_1D4B3C084(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v4;
  _QWORD *v5;
  char v6;
  __int128 *v7;
  __int128 v8;
  __int128 *v9;
  __int128 v10;
  std::string __p;
  std::string __str;

  v4 = 0;
  *(_QWORD *)a1 = off_1E9849518;
  *(_QWORD *)(a1 + 8) = &unk_1E98495B0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 112);
  if ((*(_BYTE *)(a2 + 16) & 4) != 0 && *a3)
  {
    if (*(_QWORD *)(a2 + 40))
      v5 = *(_QWORD **)(a2 + 40);
    else
      v5 = qword_1EFEC6758;
    v6 = *((_BYTE *)v5 + 16);
    *(_BYTE *)(a1 + 17) = v6 & 1;
    *(_BYTE *)(a1 + 18) = (v6 & 2) != 0;
    *(_BYTE *)(a1 + 20) = (v6 & 0x10) != 0;
    v7 = (__int128 *)v5[3];
    if (*((char *)v7 + 23) < 0)
    {
      sub_1D4B1655C(&__str, *(void **)v7, *((_QWORD *)v7 + 1));
    }
    else
    {
      v8 = *v7;
      __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v8;
    }
    std::string::operator=((std::string *)(a1 + 40), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v9 = (__int128 *)v5[4];
    if (*((char *)v9 + 23) < 0)
    {
      sub_1D4B1655C(&__p, *(void **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
    }
    std::string::operator=((std::string *)(a1 + 64), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v4 = v5[7];
  }
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

void sub_1D4B3C1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  sub_1D4B41440(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B3C218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  int v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = &off_1E98498E0;
  *(_QWORD *)(a1 + 8) = &unk_1E9849988;
  *(_BYTE *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 112);
  if ((*(_BYTE *)(a2 + 16) & 0x80) != 0 && *(_BYTE *)a3)
  {
    if (*(_QWORD *)(a2 + 80))
      v5 = *(void **)(a2 + 80);
    else
      v5 = &unk_1EFEC68F8;
    v6 = *((_DWORD *)v5 + 4);
    v7 = (v6 & 4) != 0 || (v6 & 1) != 0 && *(_QWORD *)(a3 + 8) != 0;
    *(_BYTE *)(a1 + 17) = v7;
    v8 = (v6 & 8) != 0 || (v6 & 2) != 0 && *(_QWORD *)(a3 + 8) != 0;
    *(_BYTE *)(a1 + 18) = v8;
    *(_BYTE *)(a1 + 64) = (v6 & 5) != 0;
    *(_BYTE *)(a1 + 65) = (v6 & 0xA) != 0;
    if ((v6 & 4) != 0)
    {
      v13 = *((_QWORD *)v5 + 5);
      *(_QWORD *)(a1 + 40) = v13;
    }
    else
    {
      v9 = *(_QWORD *)(a3 + 8);
      if (v9)
      {
        v10 = *((_QWORD *)v5 + 3);
        v11 = v10
            + 1000 * *(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v10 / 1000);
        *(_QWORD *)(a1 + 40) = v11;
        *(_QWORD *)(a1 + 72) = v11;
        if ((*((_DWORD *)v5 + 4) & 8) != 0)
        {
LABEL_20:
          v12 = *((_QWORD *)v5 + 6);
          goto LABEL_26;
        }
LABEL_24:
        v14 = *(_QWORD *)(a3 + 8);
        if (!v14)
        {
          *(_QWORD *)(a1 + 48) = 0;
          v12 = *((_QWORD *)v5 + 4) + 90000000;
          goto LABEL_28;
        }
        v15 = *((_QWORD *)v5 + 4);
        v12 = v15
            + 1000 * *(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v15 / 1000);
LABEL_26:
        *(_QWORD *)(a1 + 48) = v12;
LABEL_28:
        *(_QWORD *)(a1 + 80) = v12 + 1;
        return a1;
      }
      *(_QWORD *)(a1 + 40) = 0;
      v13 = *((_QWORD *)v5 + 3) - 90000000;
    }
    *(_QWORD *)(a1 + 72) = v13;
    if ((v6 & 8) != 0)
      goto LABEL_20;
    goto LABEL_24;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  return a1;
}

_DWORD *sub_1D4B3C3FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *result;
  uint64_t (**v5)();
  uint64_t (**v6)();
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::logic_error *exception;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;

  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
  {
    case 0u:
      result = operator new(0x40uLL);
      v7 = &unk_1E9849680;
      *(_QWORD *)result = &off_1E9849600;
      result[4] = 0;
      *((_BYTE *)result + 20) = 0;
      *((_QWORD *)result + 3) = 0;
      *((_QWORD *)result + 4) = 0;
      *((_BYTE *)result + 48) = 1;
      goto LABEL_7;
    case 1u:
    case 2u:
    case 3u:
    case 4u:
      result = operator new(0x40uLL);
      v5 = &off_1E98497B8;
      goto LABEL_6;
    case 5u:
    case 6u:
      result = operator new(0x40uLL);
      v5 = &off_1E9849430;
LABEL_6:
      v7 = v5 + 19;
      *(_QWORD *)result = v5;
      result[4] = 0;
      *((_BYTE *)result + 20) = 0;
      *((_QWORD *)result + 3) = 0;
      *((_QWORD *)result + 4) = 0;
      *((_BYTE *)result + 19) = 1;
LABEL_7:
      *((_QWORD *)result + 7) = 0;
      goto LABEL_15;
    case 7u:
    case 0x10u:
    case 0x11u:
      result = operator new(0x70uLL);
      v7 = &unk_1E98495B0;
      *(_QWORD *)result = off_1E9849518;
      result[4] = 0;
      *((_OWORD *)result + 2) = 0u;
      *((_OWORD *)result + 3) = 0u;
      *((_OWORD *)result + 4) = 0u;
      *((_OWORD *)result + 5) = 0u;
      *((_OWORD *)result + 6) = 0u;
      *((_BYTE *)result + 20) = 1;
      goto LABEL_14;
    case 8u:
      result = operator new(0x30uLL);
      v7 = &unk_1E98493E0;
      *(_QWORD *)result = &off_1E9849368;
      result[4] = 0;
      *((_BYTE *)result + 20) = 1;
      goto LABEL_13;
    case 9u:
      result = operator new(0x58uLL);
      v6 = &off_1E98498E0;
      v7 = &unk_1E9849988;
      goto LABEL_12;
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
      result = operator new(0x30uLL);
      v6 = &off_1E9848798;
      v7 = &unk_1E9848800;
      goto LABEL_12;
    case 0xEu:
      v8 = operator new(0x70uLL);
      v8[1] = &unk_1E9849768;
      v9 = v8 + 1;
      *v8 = &off_1E98496D0;
      sub_1D4B413FC((uint64_t)(v8 + 2));
      result = (_DWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 120))(v8);
      goto LABEL_16;
    case 0xFu:
      result = operator new(0x38uLL);
      v6 = &off_1E98490F8;
      v7 = &unk_1E9849180;
LABEL_12:
      *(_QWORD *)result = v6;
      result[4] = 0;
      *((_BYTE *)result + 20) = 0;
LABEL_13:
      *((_QWORD *)result + 4) = 0;
LABEL_14:
      *((_QWORD *)result + 3) = 0;
LABEL_15:
      *((_QWORD *)result + 1) = v7;
      v9 = result + 2;
LABEL_16:
      *a2 = v9;
      return result;
    default:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 88))(&v13, a1);
      v11 = std::string::insert(&v13, 0, "Not supported type: ");
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v14.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      sub_1D4B2D178(exception, &v14);
      __cxa_throw(exception, (struct type_info *)&unk_1E9846428, (void (*)(void *))std::logic_error::~logic_error);
  }
}

void sub_1D4B3C650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_1D4B3C6C4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_1D4B3C6CC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1D4B3C6D4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  const char *v6;
  uint64_t v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  _QWORD v11[11];
  char v12;
  uint64_t v13;
  std::locale v14;

  sub_1D4B01C34((uint64_t)v11);
  sub_1D4B02240(v11, (uint64_t)"Column has ", 11);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = sub_1D4B02240(v2, (uint64_t)" values", 7);
  v4 = sub_1D4B02240(v3, (uint64_t)" and has null value: ", 21);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v5)
    v6 = "yes";
  else
    v6 = "no";
  if (v5)
    v7 = 3;
  else
    v7 = 2;
  v8 = sub_1D4B02240(v4, (uint64_t)v6, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
  v9 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v14);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v11[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v13);
}

void sub_1D4B3C864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::locale::~locale((std::locale *)(v9 - 40));
  sub_1D4B01D20((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B3C888(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

uint64_t sub_1D4B3C890(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) += a2;
  return result;
}

uint64_t sub_1D4B3C8A0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

BOOL *sub_1D4B3C8A8(uint64_t a1, void *lpsrc)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9846930, (const struct __class_type_info *)&unk_1E9846658, 8);
  if (!v3)
    __cxa_bad_cast();
  return sub_1D4B40D6C((BOOL *)(a1 + 16), v3 + 16);
}

uint64_t sub_1D4B3C8F8(uint64_t result)
{
  *(_BYTE *)(result + 20) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_1D4B3C908(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a2 + 112) = *(_BYTE *)(result + 16);
  v3 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 16) = v2 | 0xA00;
  *(_QWORD *)(a2 + 96) = v3;
  return result;
}

uint64_t sub_1D4B3C92C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) += a2;
  return result;
}

uint64_t sub_1D4B3C93C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_1D4B3C944(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

BOOL *sub_1D4B3C94C(uint64_t a1, void *a2)
{
  return sub_1D4B3C8A8(a1 - 8, a2);
}

uint64_t sub_1D4B3C954(uint64_t result)
{
  *(_BYTE *)(result + 12) = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1D4B3C964(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a2 + 112) = *(_BYTE *)(result + 8);
  v3 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 16) = v2 | 0xA00;
  *(_QWORD *)(a2 + 96) = v3;
  return result;
}

uint64_t sub_1D4B3C988(uint64_t a1)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  _QWORD *v6;
  int v7;
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  _QWORD v15[11];
  char v16;
  uint64_t v17;
  std::locale v18;

  sub_1D4B01C34((uint64_t)v15);
  v2 = sub_1D4B02240(v15, (uint64_t)"Data type: Binary", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet(&v18, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  std::ostream::flush();
  sub_1D4B02240(v2, (uint64_t)"Values: ", 8);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v18, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  std::ostream::flush();
  v6 = sub_1D4B02240(v4, (uint64_t)"Has null: ", 10);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v7)
    v8 = "yes";
  else
    v8 = "no";
  if (v7)
    v9 = 3;
  else
    v9 = 2;
  v10 = sub_1D4B02240(v6, (uint64_t)v8, v9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
  v11 = std::locale::use_facet(&v18, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  std::ostream::flush();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
  {
    sub_1D4B02240(v15, (uint64_t)"Total length: ", 14);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    v12 = (_QWORD *)std::ostream::operator<<();
  }
  else
  {
    v12 = sub_1D4B02240(v15, (uint64_t)"Total length: not defined", 25);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  v13 = std::locale::use_facet(&v18, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v15[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v17);
}

void sub_1D4B3CCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::locale::~locale((std::locale *)(v9 - 56));
  sub_1D4B01D20((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B3CD14(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 20);
}

uint64_t sub_1D4B3CD1C(_QWORD *a1)
{
  std::runtime_error *exception;

  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 40))(a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Total length is not defined.");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return a1[3];
}

void sub_1D4B3CD7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL *sub_1D4B3CD90(uint64_t a1, void *lpsrc)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9846930, (const struct __class_type_info *)&unk_1E9846A80, 8);
  if (!v3)
    __cxa_bad_cast();
  return sub_1D4B40D6C((BOOL *)(a1 + 16), v3 + 16);
}

uint64_t sub_1D4B3CDE0(uint64_t result)
{
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 1;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

_QWORD *sub_1D4B3CDF4(uint64_t a1, uint64_t a2)
{
  int v3;
  _QWORD *result;
  uint64_t v6;

  v3 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a2 + 112) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(a2 + 16) = v3 | 0xA40;
  result = *(_QWORD **)(a2 + 72);
  if (!result)
  {
    result = sub_1D4B15498(0);
    *(_QWORD *)(a2 + 72) = result;
  }
  v6 = *(_QWORD *)(a1 + 24);
  *((_DWORD *)result + 4) |= 1u;
  result[3] = v6;
  return result;
}

BOOL *sub_1D4B3CE58(uint64_t a1, void *a2)
{
  return sub_1D4B3CD90(a1 - 8, a2);
}

uint64_t sub_1D4B3CE60(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = 1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

_QWORD *sub_1D4B3CE74(uint64_t a1, uint64_t a2)
{
  return sub_1D4B3CDF4(a1 - 8, a2);
}

uint64_t sub_1D4B3CE7C(uint64_t a1)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  _QWORD *v6;
  int v7;
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  _QWORD v19[11];
  char v20;
  uint64_t v21;
  std::locale v22;

  sub_1D4B01C34((uint64_t)v19);
  v2 = sub_1D4B02240(v19, (uint64_t)"Data type: Boolean", 18);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  sub_1D4B02240(v2, (uint64_t)"Values: ", 8);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  v6 = sub_1D4B02240(v4, (uint64_t)"Has null: ", 10);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v7)
    v8 = "yes";
  else
    v8 = "no";
  if (v7)
    v9 = 3;
  else
    v9 = 2;
  v10 = sub_1D4B02240(v6, (uint64_t)v8, v9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
  v11 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
  {
    sub_1D4B02240(v19, (uint64_t)"(true: ", 7);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v12 = (_QWORD *)std::ostream::operator<<();
    sub_1D4B02240(v12, (uint64_t)"; false: ", 9);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    v13 = (_QWORD *)std::ostream::operator<<();
    v14 = sub_1D4B02240(v13, (uint64_t)")", 1);
  }
  else
  {
    v16 = sub_1D4B02240(v19, (uint64_t)"(true: not defined; false: not defined)", 39);
    std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
    v17 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v22);
    std::ostream::put();
    std::ostream::flush();
    v14 = sub_1D4B02240(v19, (uint64_t)"True and false counts are not defined", 37);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
  v15 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v19[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v19[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v21);
}

void sub_1D4B3D280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::locale::~locale((std::locale *)(v9 - 56));
  sub_1D4B01D20((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B3D2B8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t sub_1D4B3D2C0(_QWORD *a1)
{
  std::runtime_error *exception;

  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 40))(a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "False count is not defined.");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1) - a1[7];
}

void sub_1D4B3D334(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B3D348(_QWORD *a1)
{
  std::runtime_error *exception;

  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 40))(a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "True count is not defined.");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return a1[7];
}

void sub_1D4B3D3A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B3D3BC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) += a2;
  *(_BYTE *)(result + 48) = 1;
  return result;
}

BOOL *sub_1D4B3D3D4(uint64_t a1, void *lpsrc)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  BOOL *result;
  char v6;

  v3 = (unsigned __int8 *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9846930, (const struct __class_type_info *)&unk_1E9846B28, 8);
  if (!v3)
    __cxa_bad_cast();
  v4 = v3;
  result = sub_1D4B40D6C((BOOL *)(a1 + 16), v3 + 16);
  v6 = *(_BYTE *)(a1 + 48);
  if (v6)
    v6 = v4[48] != 0;
  *(_BYTE *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) += *((_QWORD *)v4 + 7);
  return result;
}

uint64_t sub_1D4B3D450(uint64_t result)
{
  *(_BYTE *)(result + 20) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 48) = 1;
  *(_QWORD *)(result + 56) = 0;
  return result;
}

void sub_1D4B3D46C(uint64_t a1, uint64_t a2)
{
  int v3;
  _DWORD *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;

  v3 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a2 + 112) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(a2 + 16) = v3 | 0xA08;
  v4 = *(_DWORD **)(a2 + 48);
  if (!v4)
  {
    v4 = sub_1D4B15278(0);
    *(_QWORD *)(a2 + 48) = v4;
  }
  if (*(_BYTE *)(a1 + 48))
  {
    v6 = *(_QWORD *)(a1 + 56);
    v7 = v4[6];
    if (v7 == v4[7])
    {
      sub_1D4B165E8(v4 + 6, v7 + 1);
      v7 = v4[6];
    }
    v8 = *((_QWORD *)v4 + 4);
    v4[6] = v7 + 1;
    *(_QWORD *)(v8 + 8 * v7 + 8) = v6;
  }
  else
  {
    v4[6] = 0;
  }
}

uint64_t sub_1D4B3D514(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) += a2;
  *(_BYTE *)(result + 40) = 1;
  return result;
}

BOOL *sub_1D4B3D52C(uint64_t a1, void *a2)
{
  return sub_1D4B3D3D4(a1 - 8, a2);
}

uint64_t sub_1D4B3D534(uint64_t result)
{
  *(_BYTE *)(result + 12) = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 40) = 1;
  *(_QWORD *)(result + 48) = 0;
  return result;
}

void sub_1D4B3D550(uint64_t a1, uint64_t a2)
{
  sub_1D4B3D46C(a1 - 8, a2);
}

uint64_t sub_1D4B3D558(uint64_t a1)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  _QWORD *v6;
  int v7;
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  _QWORD v17[11];
  char v18;
  uint64_t v19;
  std::locale v20;

  sub_1D4B01C34((uint64_t)v17);
  v2 = sub_1D4B02240(v17, (uint64_t)"Data type: Date", 15);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet(&v20, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v20);
  std::ostream::put();
  std::ostream::flush();
  sub_1D4B02240(v2, (uint64_t)"Values: ", 8);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v20, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v20);
  std::ostream::put();
  std::ostream::flush();
  v6 = sub_1D4B02240(v4, (uint64_t)"Has null: ", 10);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v7)
    v8 = "yes";
  else
    v8 = "no";
  if (v7)
    v9 = 3;
  else
    v9 = 2;
  v10 = sub_1D4B02240(v6, (uint64_t)v8, v9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
  v11 = std::locale::use_facet(&v20, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v20);
  std::ostream::put();
  std::ostream::flush();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
  {
    sub_1D4B02240(v17, (uint64_t)"Minimum: ", 9);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v12 = (_QWORD *)std::ostream::operator<<();
  }
  else
  {
    v12 = sub_1D4B02240(v17, (uint64_t)"Minimum: not defined", 20);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  v13 = std::locale::use_facet(&v20, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&v20);
  std::ostream::put();
  std::ostream::flush();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
  {
    sub_1D4B02240(v17, (uint64_t)"Maximum: ", 9);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    v14 = (_QWORD *)std::ostream::operator<<();
  }
  else
  {
    v14 = sub_1D4B02240(v17, (uint64_t)"Maximum: not defined", 20);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
  v15 = std::locale::use_facet(&v20, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale(&v20);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v19);
}

void sub_1D4B3D9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::locale::~locale((std::locale *)(v9 - 56));
  sub_1D4B01D20((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B3D9F4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 17);
}

uint64_t sub_1D4B3D9FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 18);
}

uint64_t sub_1D4B3DA04(unsigned int *a1)
{
  std::runtime_error *exception;

  if (!(*(unsigned int (**)(unsigned int *))(*(_QWORD *)a1 + 40))(a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Minimum is not defined.");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return a1[10];
}

void sub_1D4B3DA64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B3DA78(unsigned int *a1)
{
  std::runtime_error *exception;

  if (!(*(unsigned int (**)(unsigned int *))(*(_QWORD *)a1 + 48))(a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Maximum is not defined.");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return a1[11];
}

void sub_1D4B3DAD8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL *sub_1D4B3DAEC(uint64_t a1, void *lpsrc)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9846930, (const struct __class_type_info *)&unk_1E98469A0, 8);
  if (!v3)
    __cxa_bad_cast();
  return sub_1D4B40E0C((BOOL *)(a1 + 16), v3 + 16);
}

_DWORD *sub_1D4B3DB3C(uint64_t a1, uint64_t a2)
{
  int v3;
  _DWORD *result;
  int v6;
  int v7;
  int v8;
  int v9;

  v3 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a2 + 112) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(a2 + 16) = v3 | 0xA20;
  result = *(_DWORD **)(a2 + 64);
  if (!result)
  {
    result = sub_1D4B15388(0);
    *(_QWORD *)(a2 + 64) = result;
  }
  if (*(_BYTE *)(a1 + 17))
  {
    v6 = *(_DWORD *)(a1 + 44);
    v7 = result[4];
    result[4] = v7 | 2;
    result[7] = v6;
    v8 = *(_DWORD *)(a1 + 40);
    result[4] = v7 | 3;
    result[6] = v8;
  }
  else
  {
    v9 = result[4];
    *((_QWORD *)result + 3) = 0;
    result[4] = v9 & 0xFFFFFFFC;
  }
  return result;
}

BOOL *sub_1D4B3DBCC(uint64_t a1, void *a2)
{
  return sub_1D4B3DAEC(a1 - 8, a2);
}

_DWORD *sub_1D4B3DBD4(uint64_t a1, uint64_t a2)
{
  return sub_1D4B3DB3C(a1 - 8, a2);
}

uint64_t sub_1D4B3DBDC(uint64_t a1)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  _QWORD *v6;
  int v7;
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  _QWORD *v12;
  std::string *v13;
  std::string::size_type size;
  _QWORD *v15;
  const std::locale::facet *v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  _QWORD *v19;
  std::string *v20;
  std::string::size_type v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  _QWORD *v26;
  std::string *v27;
  std::string::size_type v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  _QWORD *v31;
  const std::locale::facet *v32;
  _QWORD v34[3];
  std::string v35;
  _QWORD v36[11];
  char v37;
  uint64_t v38;
  std::locale v39;

  sub_1D4B01C34((uint64_t)v36);
  v2 = sub_1D4B02240(v36, (uint64_t)"Data type: Decimal", 18);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet((const std::locale *)&v35, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale((std::locale *)&v35);
  std::ostream::put();
  std::ostream::flush();
  sub_1D4B02240(v2, (uint64_t)"Values: ", 8);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet((const std::locale *)&v35, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale((std::locale *)&v35);
  std::ostream::put();
  std::ostream::flush();
  v6 = sub_1D4B02240(v4, (uint64_t)"Has null: ", 10);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v7)
    v8 = "yes";
  else
    v8 = "no";
  if (v7)
    v9 = 3;
  else
    v9 = 2;
  v10 = sub_1D4B02240(v6, (uint64_t)v8, v9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
  v11 = std::locale::use_facet((const std::locale *)&v35, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale((std::locale *)&v35);
  std::ostream::put();
  std::ostream::flush();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
  {
    v12 = sub_1D4B02240(v36, (uint64_t)"Minimum: ", 9);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 64))(v34, a1);
    sub_1D4B4A89C((uint64_t)v34, &v35);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v35;
    else
      v13 = (std::string *)v35.__r_.__value_.__r.__words[0];
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    else
      size = v35.__r_.__value_.__l.__size_;
    v15 = sub_1D4B02240(v12, (uint64_t)v13, size);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
    v16 = std::locale::use_facet(&v39, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = sub_1D4B02240(v36, (uint64_t)"Minimum: not defined", 20);
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
    v18 = std::locale::use_facet((const std::locale *)&v35, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale((std::locale *)&v35);
    std::ostream::put();
    std::ostream::flush();
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
  {
    v19 = sub_1D4B02240(v36, (uint64_t)"Maximum: ", 9);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 72))(v34, a1);
    sub_1D4B4A89C((uint64_t)v34, &v35);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v35;
    else
      v20 = (std::string *)v35.__r_.__value_.__r.__words[0];
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    else
      v21 = v35.__r_.__value_.__l.__size_;
    v22 = sub_1D4B02240(v19, (uint64_t)v20, v21);
    std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
    v23 = std::locale::use_facet(&v39, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
  }
  else
  {
    v24 = sub_1D4B02240(v36, (uint64_t)"Maximum: not defined", 20);
    std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
    v25 = std::locale::use_facet((const std::locale *)&v35, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale((std::locale *)&v35);
    std::ostream::put();
    std::ostream::flush();
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1))
  {
    v26 = sub_1D4B02240(v36, (uint64_t)"Sum: ", 5);
    (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(v34, a1);
    sub_1D4B4A89C((uint64_t)v34, &v35);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v35;
    else
      v27 = (std::string *)v35.__r_.__value_.__r.__words[0];
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    else
      v28 = v35.__r_.__value_.__l.__size_;
    v29 = sub_1D4B02240(v26, (uint64_t)v27, v28);
    std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
    v30 = std::locale::use_facet(&v39, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
  }
  else
  {
    v31 = sub_1D4B02240(v36, (uint64_t)"Sum: not defined", 16);
    std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(_QWORD *)(*v31 - 24)));
    v32 = std::locale::use_facet((const std::locale *)&v35, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
    std::locale::~locale((std::locale *)&v35);
    std::ostream::put();
    std::ostream::flush();
  }
  std::stringbuf::str();
  v36[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v36 + *(_QWORD *)(v36[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v36[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v37 < 0)
    operator delete((void *)v36[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v38);
}

void sub_1D4B3E204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  std::locale::~locale((std::locale *)(v18 - 56));
  if (a17 < 0)
    operator delete(__p);
  sub_1D4B01D20((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B3E280(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 19);
}

__n128 sub_1D4B3E288@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  std::runtime_error *exception;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Minimum is not defined.");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  result = *(__n128 *)(a1 + 40);
  *a2 = result;
  a2[1].n128_u64[0] = *(_QWORD *)(a1 + 56);
  return result;
}

void sub_1D4B3E2F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1D4B3E30C@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  std::runtime_error *exception;

  if (!(*(unsigned int (**)(__n128 *))(a1->n128_u64[0] + 48))(a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Maximum is not defined.");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  result = a1[4];
  *a2 = result;
  a2[1].n128_u64[0] = a1[5].n128_u64[0];
  return result;
}

void sub_1D4B3E37C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1D4B3E390@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  std::runtime_error *exception;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Sum is not defined.");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  result = *(__n128 *)(a1 + 88);
  *a2 = result;
  a2[1].n128_u64[0] = *(_QWORD *)(a1 + 104);
  return result;
}

void sub_1D4B3E400(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1D4B3E414(uint64_t a1, void *lpsrc)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *result;
  uint64_t v6[3];

  v3 = (unsigned __int8 *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9846930, (const struct __class_type_info *)&unk_1E9846B60, 8);
  if (!v3)
    __cxa_bad_cast();
  v4 = v3;
  result = sub_1D4B40EAC((unsigned __int8 *)(a1 + 16), v3 + 16);
  if (*(_BYTE *)(a1 + 19))
  {
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v4 + 56))(v4);
    *(_BYTE *)(a1 + 19) = (_BYTE)result;
    if ((_DWORD)result)
    {
      (*(void (**)(uint64_t *__return_ptr, unsigned __int8 *))(*(_QWORD *)v4 + 80))(v6, v4);
      return (unsigned __int8 *)sub_1D4B28E88(a1, v6);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 19) = 0;
  }
  return result;
}

double sub_1D4B3E4B8(uint64_t a1)
{
  double result;
  __int128 v3;
  int v4;

  *(_BYTE *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_1D4B4A890((uint64_t)&v3);
  *(_BYTE *)(a1 + 19) = 1;
  result = *(double *)&v3;
  *(_OWORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 104) = v4;
  return result;
}

void sub_1D4B3E508(uint64_t a1, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  std::string __p;

  v3 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a2 + 112) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(a2 + 16) = v3 | 0xA10;
  v4 = *(_QWORD **)(a2 + 56);
  if (!v4)
  {
    v4 = sub_1D4B15300(0);
    *(_QWORD *)(a2 + 56) = v4;
  }
  if (*(_BYTE *)(a1 + 17))
  {
    sub_1D4B4A89C(a1 + 40, &__p);
    *((_DWORD *)v4 + 4) |= 1u;
    sub_1D4B18048((__n128 **)v4 + 3, (__n128 *)&qword_1EFEC6AB8, (__n128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_1D4B4A89C(a1 + 64, &__p);
    *((_DWORD *)v4 + 4) |= 2u;
    sub_1D4B18048((__n128 **)v4 + 4, (__n128 *)&qword_1EFEC6AB8, (__n128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v6 = v4[3];
    if ((uint64_t *)v6 != &qword_1EFEC6AB8)
    {
      if (*(char *)(v6 + 23) < 0)
      {
        **(_BYTE **)v6 = 0;
        *(_QWORD *)(v6 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v6 = 0;
        *(_BYTE *)(v6 + 23) = 0;
      }
    }
    *((_DWORD *)v4 + 4) &= ~1u;
    v7 = v4[4];
    if ((uint64_t *)v7 != &qword_1EFEC6AB8)
    {
      if (*(char *)(v7 + 23) < 0)
      {
        **(_BYTE **)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v7 = 0;
        *(_BYTE *)(v7 + 23) = 0;
      }
    }
    *((_DWORD *)v4 + 4) &= ~2u;
  }
  if (*(_BYTE *)(a1 + 19))
  {
    v9 = *(_OWORD *)(a1 + 88);
    v10 = *(_QWORD *)(a1 + 104);
    sub_1D4B4A89C((uint64_t)&v9, &__p);
    *((_DWORD *)v4 + 4) |= 4u;
    sub_1D4B18048((__n128 **)v4 + 5, (__n128 *)&qword_1EFEC6AB8, (__n128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = v4[5];
    if ((uint64_t *)v8 != &qword_1EFEC6AB8)
    {
      if (*(char *)(v8 + 23) < 0)
      {
        **(_BYTE **)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v8 = 0;
        *(_BYTE *)(v8 + 23) = 0;
      }
    }
    *((_DWORD *)v4 + 4) &= ~4u;
  }
}

void sub_1D4B3E704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_1D4B3E728(uint64_t a1, void *a2)
{
  return sub_1D4B3E414(a1 - 8, a2);
}

double sub_1D4B3E730(uint64_t a1)
{
  double result;
  __int128 v3;
  int v4;

  *(_BYTE *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_1D4B4A890((uint64_t)&v3);
  *(_BYTE *)(a1 + 11) = 1;
  result = *(double *)&v3;
  *(_OWORD *)(a1 + 80) = v3;
  *(_DWORD *)(a1 + 96) = v4;
  return result;
}

void sub_1D4B3E780(uint64_t a1, uint64_t a2)
{
  sub_1D4B3E508(a1 - 8, a2);
}

uint64_t sub_1D4B3E788(uint64_t a1)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  _QWORD *v6;
  int v7;
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  _QWORD v19[11];
  char v20;
  uint64_t v21;
  std::locale v22;

  sub_1D4B01C34((uint64_t)v19);
  v2 = sub_1D4B02240(v19, (uint64_t)"Data type: Double", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  sub_1D4B02240(v2, (uint64_t)"Values: ", 8);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  v6 = sub_1D4B02240(v4, (uint64_t)"Has null: ", 10);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v7)
    v8 = "yes";
  else
    v8 = "no";
  if (v7)
    v9 = 3;
  else
    v9 = 2;
  v10 = sub_1D4B02240(v6, (uint64_t)v8, v9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
  v11 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
  {
    sub_1D4B02240(v19, (uint64_t)"Minimum: ", 9);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    v12 = (_QWORD *)std::ostream::operator<<();
  }
  else
  {
    v12 = sub_1D4B02240(v19, (uint64_t)"Minimum: not defined", 20);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  v13 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
  {
    sub_1D4B02240(v19, (uint64_t)"Maximum: ", 9);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
    v14 = (_QWORD *)std::ostream::operator<<();
  }
  else
  {
    v14 = sub_1D4B02240(v19, (uint64_t)"Maximum: not defined", 20);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
  v15 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1))
  {
    sub_1D4B02240(v19, (uint64_t)"Sum: ", 5);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    v16 = (_QWORD *)std::ostream::operator<<();
  }
  else
  {
    v16 = sub_1D4B02240(v19, (uint64_t)"Sum: not defined", 16);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v19[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v19[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v21);
}

void sub_1D4B3ECE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::locale::~locale((std::locale *)(v9 - 56));
  sub_1D4B01D20((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double sub_1D4B3ED28(double *a1)
{
  std::runtime_error *exception;

  if (!(*(unsigned int (**)(double *))(*(_QWORD *)a1 + 40))(a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Minimum is not defined.");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return a1[5];
}

void sub_1D4B3ED88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1D4B3ED9C(double *a1)
{
  std::runtime_error *exception;

  if (!(*(unsigned int (**)(double *))(*(_QWORD *)a1 + 48))(a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Maximum is not defined.");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return a1[6];
}

void sub_1D4B3EDFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1D4B3EE10(double *a1)
{
  std::runtime_error *exception;

  if (!(*(unsigned int (**)(double *))(*(_QWORD *)a1 + 56))(a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Sum is not defined.");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return a1[7];
}

void sub_1D4B3EE70(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D4B3EE84(uint64_t a1, void *lpsrc)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  double v6;

  v3 = (unsigned __int8 *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9846930, (const struct __class_type_info *)&unk_1E9846AB8, 8);
  if (!v3)
    __cxa_bad_cast();
  v4 = v3;
  sub_1D4B40FF0((BOOL *)(a1 + 16), v3 + 16);
  if (*(_BYTE *)(a1 + 19))
  {
    v5 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v4 + 56))(v4);
    *(_BYTE *)(a1 + 19) = v5;
    if (v5)
    {
      v6 = *(double *)(a1 + 56);
      *(double *)(a1 + 56) = v6 + (*(double (**)(unsigned __int8 *))(*(_QWORD *)v4 + 80))(v4);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 19) = 0;
  }
}

uint64_t sub_1D4B3EF24(uint64_t result)
{
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 19) = 1;
  *(_QWORD *)(result + 56) = 0;
  return result;
}

_QWORD *sub_1D4B3EF40(uint64_t a1, uint64_t a2)
{
  int v3;
  _QWORD *result;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v3 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a2 + 112) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(a2 + 16) = v3 | 0xA02;
  result = *(_QWORD **)(a2 + 32);
  if (!result)
  {
    result = sub_1D4B15168(0);
    *(_QWORD *)(a2 + 32) = result;
  }
  v6 = *((_DWORD *)result + 4);
  if (*(_BYTE *)(a1 + 17))
  {
    result[3] = *(_QWORD *)(a1 + 40);
    v7 = v6 | 3;
    result[4] = *(_QWORD *)(a1 + 48);
  }
  else
  {
    result[3] = 0;
    result[4] = 0;
    v7 = v6 & 0xFFFFFFFC;
  }
  if (*(_BYTE *)(a1 + 19))
  {
    v8 = *(_QWORD *)(a1 + 56);
    *((_DWORD *)result + 4) = v7 | 4;
    result[5] = v8;
  }
  else
  {
    result[5] = 0;
    *((_DWORD *)result + 4) = v7 & 0xFFFFFFFB;
  }
  return result;
}

void sub_1D4B3EFE8(uint64_t a1, void *a2)
{
  sub_1D4B3EE84(a1 - 8, a2);
}

uint64_t sub_1D4B3EFF0(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 11) = 1;
  *(_QWORD *)(result + 48) = 0;
  return result;
}

_QWORD *sub_1D4B3F00C(uint64_t a1, uint64_t a2)
{
  return sub_1D4B3EF40(a1 - 8, a2);
}

uint64_t sub_1D4B3F014(uint64_t a1)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  _QWORD *v6;
  int v7;
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  _QWORD v19[11];
  char v20;
  uint64_t v21;
  std::locale v22;

  sub_1D4B01C34((uint64_t)v19);
  v2 = sub_1D4B02240(v19, (uint64_t)"Data type: Integer", 18);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  sub_1D4B02240(v2, (uint64_t)"Values: ", 8);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  v6 = sub_1D4B02240(v4, (uint64_t)"Has null: ", 10);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v7)
    v8 = "yes";
  else
    v8 = "no";
  if (v7)
    v9 = 3;
  else
    v9 = 2;
  v10 = sub_1D4B02240(v6, (uint64_t)v8, v9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
  v11 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
  {
    sub_1D4B02240(v19, (uint64_t)"Minimum: ", 9);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    v12 = (_QWORD *)std::ostream::operator<<();
  }
  else
  {
    v12 = sub_1D4B02240(v19, (uint64_t)"Minimum: not defined", 20);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  v13 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
  {
    sub_1D4B02240(v19, (uint64_t)"Maximum: ", 9);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
    v14 = (_QWORD *)std::ostream::operator<<();
  }
  else
  {
    v14 = sub_1D4B02240(v19, (uint64_t)"Maximum: not defined", 20);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
  v15 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1))
  {
    sub_1D4B02240(v19, (uint64_t)"Sum: ", 5);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    v16 = (_QWORD *)std::ostream::operator<<();
  }
  else
  {
    v16 = sub_1D4B02240(v19, (uint64_t)"Sum: not defined", 16);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v22);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v19[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v19[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v21);
}

void sub_1D4B3F57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::locale::~locale((std::locale *)(v9 - 56));
  sub_1D4B01D20((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B3F5C0(_QWORD *a1)
{
  std::runtime_error *exception;

  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 40))(a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Minimum is not defined.");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return a1[5];
}

void sub_1D4B3F620(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B3F634(_QWORD *a1)
{
  std::runtime_error *exception;

  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 48))(a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Maximum is not defined.");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return a1[6];
}

void sub_1D4B3F694(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B3F6A8(_QWORD *a1)
{
  std::runtime_error *exception;

  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 56))(a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Sum is not defined.");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return a1[7];
}

void sub_1D4B3F708(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B3F71C(uint64_t a1, void *lpsrc)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t result;
  char v6;
  uint64_t v7;

  v3 = (unsigned __int8 *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9846930, (const struct __class_type_info *)&unk_1E9846B98, 8);
  if (!v3)
    __cxa_bad_cast();
  v4 = v3;
  result = (uint64_t)sub_1D4B41090((BOOL *)(a1 + 16), v3 + 16);
  v6 = *(_BYTE *)(a1 + 19);
  if (!v6)
    goto LABEL_6;
  result = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v4 + 56))(v4);
  *(_BYTE *)(a1 + 19) = result;
  if ((_DWORD)result)
  {
    v7 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v4 + 80))(v4) + v7;
    result = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v4 + 80))(v4);
    if (((result ^ v7) & 0x8000000000000000) == 0)
    {
      v6 = (*(_QWORD *)(a1 + 56) ^ v7) >= 0;
LABEL_6:
      *(_BYTE *)(a1 + 19) = v6;
    }
  }
  return result;
}

_QWORD *sub_1D4B3F7E0(uint64_t a1, uint64_t a2)
{
  int v3;
  _QWORD *result;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;

  v3 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a2 + 112) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(a2 + 16) = v3 | 0xA01;
  result = *(_QWORD **)(a2 + 24);
  if (!result)
  {
    result = sub_1D4B150E0(0);
    *(_QWORD *)(a2 + 24) = result;
  }
  if (*(_BYTE *)(a1 + 17))
  {
    v6 = *((_DWORD *)result + 4);
    result[3] = *(_QWORD *)(a1 + 40);
    v7 = v6 | 3;
    result[4] = *(_QWORD *)(a1 + 48);
  }
  else
  {
    v8 = *((_DWORD *)result + 4);
    result[3] = 0;
    result[4] = 0;
    v7 = v8 & 0xFFFFFFFC;
  }
  if (*(_BYTE *)(a1 + 19))
  {
    v9 = *(_QWORD *)(a1 + 56);
    *((_DWORD *)result + 4) = v7 | 4;
    result[5] = v9;
  }
  else
  {
    result[5] = 0;
    *((_DWORD *)result + 4) = v7 & 0xFFFFFFFB;
  }
  return result;
}

uint64_t sub_1D4B3F888(uint64_t a1, void *a2)
{
  return sub_1D4B3F71C(a1 - 8, a2);
}

_QWORD *sub_1D4B3F890(uint64_t a1, uint64_t a2)
{
  return sub_1D4B3F7E0(a1 - 8, a2);
}

uint64_t sub_1D4B3F898(uint64_t a1)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  _QWORD *v6;
  int v7;
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  _QWORD v33[11];
  char v34;
  uint64_t v35;
  std::locale v36;

  sub_1D4B01C34((uint64_t)v33);
  v2 = sub_1D4B02240(v33, (uint64_t)"Data type: String", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet(&v36, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v36);
  std::ostream::put();
  std::ostream::flush();
  sub_1D4B02240(v2, (uint64_t)"Values: ", 8);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v36, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v36);
  std::ostream::put();
  std::ostream::flush();
  v6 = sub_1D4B02240(v4, (uint64_t)"Has null: ", 10);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v7)
    v8 = "yes";
  else
    v8 = "no";
  if (v7)
    v9 = 3;
  else
    v9 = 2;
  v10 = sub_1D4B02240(v6, (uint64_t)v8, v9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
  v11 = std::locale::use_facet(&v36, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v36);
  std::ostream::put();
  std::ostream::flush();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
  {
    v12 = sub_1D4B02240(v33, (uint64_t)"Minimum: ", 9);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    v14 = *(char *)(v13 + 23);
    if (v14 >= 0)
      v15 = v13;
    else
      v15 = *(_QWORD *)v13;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(v13 + 23);
    else
      v16 = *(_QWORD *)(v13 + 8);
    v17 = sub_1D4B02240(v12, v15, v16);
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
    v18 = std::locale::use_facet(&v36, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(&v36);
    std::ostream::put();
  }
  else
  {
    v19 = sub_1D4B02240(v33, (uint64_t)"Minimum is not defined", 22);
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
    v20 = std::locale::use_facet(&v36, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale(&v36);
    std::ostream::put();
  }
  std::ostream::flush();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
  {
    v21 = sub_1D4B02240(v33, (uint64_t)"Maximum: ", 9);
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
    v23 = *(char *)(v22 + 23);
    if (v23 >= 0)
      v24 = v22;
    else
      v24 = *(_QWORD *)v22;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(v22 + 23);
    else
      v25 = *(_QWORD *)(v22 + 8);
    v26 = sub_1D4B02240(v21, v24, v25);
    std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
    v27 = std::locale::use_facet(&v36, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
    std::locale::~locale(&v36);
    std::ostream::put();
  }
  else
  {
    v28 = sub_1D4B02240(v33, (uint64_t)"Maximum is not defined", 22);
    std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(*v28 - 24)));
    v29 = std::locale::use_facet(&v36, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
    std::locale::~locale(&v36);
    std::ostream::put();
  }
  std::ostream::flush();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1))
  {
    sub_1D4B02240(v33, (uint64_t)"Total length: ", 14);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    v30 = (_QWORD *)std::ostream::operator<<();
  }
  else
  {
    v30 = sub_1D4B02240(v33, (uint64_t)"Total length is not defined", 27);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(*v30 - 24)));
  v31 = std::locale::use_facet(&v36, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
  std::locale::~locale(&v36);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v33[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v33 + *(_QWORD *)(v33[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v33[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v34 < 0)
    operator delete((void *)v33[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v35);
}

void sub_1D4B3FE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::locale::~locale((std::locale *)(v9 - 56));
  sub_1D4B01D20((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B3FE6C(uint64_t a1)
{
  std::runtime_error *exception;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Minimum is not defined.");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return a1 + 40;
}

void sub_1D4B3FECC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B3FEE0(uint64_t a1)
{
  std::runtime_error *exception;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Maximum is not defined.");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return a1 + 64;
}

void sub_1D4B3FF40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B3FF54(_QWORD *a1)
{
  std::runtime_error *exception;

  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 56))(a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "Total length is not defined.");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return a1[3];
}

void sub_1D4B3FFB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D4B3FFC8(uint64_t a1, void *lpsrc)
{
  char *v3;

  v3 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9846930, (const struct __class_type_info *)&unk_1E9846AF0, 8);
  if (!v3)
    __cxa_bad_cast();
  sub_1D4B41130((BOOL *)(a1 + 16), (const std::string *)(v3 + 16));
}

std::string *sub_1D4B40018(std::string *result, uint64_t a2)
{
  std::string *v2;
  int v3;
  std::string *v4;
  const std::string *v6;
  std::string *data;
  std::string::pointer v8;
  const std::string *v9;
  std::string *size;
  std::string::size_type v11;
  std::string::pointer v12;

  v2 = result;
  v3 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a2 + 112) = result->__r_.__value_.__s.__data_[16];
  *(_QWORD *)(a2 + 96) = result[1].__r_.__value_.__l.__size_;
  *(_DWORD *)(a2 + 16) = v3 | 0xA04;
  v4 = *(std::string **)(a2 + 40);
  if (!v4)
  {
    result = (std::string *)sub_1D4B151F0(0);
    v4 = result;
    *(_QWORD *)(a2 + 40) = result;
  }
  if (v2->__r_.__value_.__s.__data_[17])
  {
    v6 = (std::string *)((char *)v2 + 40);
    data = (std::string *)v4[1].__r_.__value_.__l.__data_;
    LODWORD(v4->__r_.__value_.__r.__words[2]) |= 1u;
    if (data == (std::string *)&qword_1EFEC6AB8)
      sub_1D4B164E8(v4[1].__r_.__value_.__r.__words, (uint64_t)v6);
    else
      std::string::operator=(data, v6);
    v9 = (std::string *)((char *)v2 + 64);
    size = (std::string *)v4[1].__r_.__value_.__l.__size_;
    LODWORD(v4->__r_.__value_.__r.__words[2]) |= 2u;
    if (size == (std::string *)&qword_1EFEC6AB8)
      result = (std::string *)sub_1D4B164E8(&v4[1].__r_.__value_.__l.__size_, (uint64_t)v9);
    else
      result = std::string::operator=(size, v9);
  }
  else
  {
    v8 = v4[1].__r_.__value_.__l.__data_;
    if (v8 != (std::string::pointer)&qword_1EFEC6AB8)
    {
      if (v8[23] < 0)
      {
        **(_BYTE **)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
      }
      else
      {
        *v8 = 0;
        v8[23] = 0;
      }
    }
    LODWORD(v4->__r_.__value_.__r.__words[2]) &= ~1u;
    v11 = v4[1].__r_.__value_.__l.__size_;
    if ((uint64_t *)v11 != &qword_1EFEC6AB8)
    {
      if (*(char *)(v11 + 23) < 0)
      {
        **(_BYTE **)v11 = 0;
        *(_QWORD *)(v11 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v11 = 0;
        *(_BYTE *)(v11 + 23) = 0;
      }
    }
    LODWORD(v4->__r_.__value_.__r.__words[2]) &= ~2u;
  }
  if (v2->__r_.__value_.__s.__data_[20])
  {
    v12 = v2[1].__r_.__value_.__l.__data_;
    LODWORD(v4->__r_.__value_.__r.__words[2]) |= 0x10u;
    v4[2].__r_.__value_.__l.__size_ = (std::string::size_type)v12;
  }
  else
  {
    v4[2].__r_.__value_.__l.__size_ = 0;
    LODWORD(v4->__r_.__value_.__r.__words[2]) &= ~0x10u;
  }
  return result;
}

void sub_1D4B40194(uint64_t a1, void *a2)
{
  sub_1D4B3FFC8(a1 - 8, a2);
}

std::string *sub_1D4B4019C(uint64_t a1, uint64_t a2)
{
  return sub_1D4B40018((std::string *)(a1 - 8), a2);
}

uint64_t sub_1D4B401A4(uint64_t a1)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  _QWORD *v6;
  int v7;
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  _QWORD *v19;
  size_t v20;
  _QWORD *v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  _QWORD *v27;
  const std::locale::facet *v28;
  _QWORD *v29;
  size_t v30;
  _QWORD *v31;
  _QWORD *v32;
  const std::locale::facet *v33;
  time_t v35;
  tm v36;
  _QWORD v37[11];
  char v38;
  uint64_t v39;
  std::locale v40;
  char __s[20];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  sub_1D4B01C34((uint64_t)v37);
  v35 = 0;
  v2 = sub_1D4B02240(v37, (uint64_t)"Data type: Timestamp", 20);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet(&v40, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v40);
  std::ostream::put();
  std::ostream::flush();
  sub_1D4B02240(v2, (uint64_t)"Values: ", 8);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v40, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v40);
  std::ostream::put();
  std::ostream::flush();
  v6 = sub_1D4B02240(v4, (uint64_t)"Has null: ", 10);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v7)
    v8 = "yes";
  else
    v8 = "no";
  if (v7)
    v9 = 3;
  else
    v9 = 2;
  v10 = sub_1D4B02240(v6, (uint64_t)v8, v9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
  v11 = std::locale::use_facet(&v40, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v40);
  std::ostream::put();
  std::ostream::flush();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1))
  {
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) / 1000;
    gmtime_r(&v35, &v36);
    strftime(__s, 0x14uLL, "%Y-%m-%d %H:%M:%S", &v36);
    v12 = sub_1D4B02240(v37, (uint64_t)"Minimum: ", 9);
    v13 = strlen(__s);
    v14 = sub_1D4B02240(v12, (uint64_t)__s, v13);
    sub_1D4B02240(v14, (uint64_t)".", 1);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
    v16 = std::locale::use_facet(&v40, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v40);
    std::ostream::put();
  }
  else
  {
    v17 = sub_1D4B02240(v37, (uint64_t)"Minimum is not defined", 22);
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
    v18 = std::locale::use_facet(&v40, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(&v40);
    std::ostream::put();
  }
  std::ostream::flush();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1))
  {
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) / 1000;
    gmtime_r(&v35, &v36);
    strftime(__s, 0x14uLL, "%Y-%m-%d %H:%M:%S", &v36);
    v19 = sub_1D4B02240(v37, (uint64_t)"LowerBound: ", 12);
    v20 = strlen(__s);
    v21 = sub_1D4B02240(v19, (uint64_t)__s, v20);
    sub_1D4B02240(v21, (uint64_t)".", 1);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
    v22 = (_QWORD *)std::ostream::operator<<();
  }
  else
  {
    v22 = sub_1D4B02240(v37, (uint64_t)"LowerBound is not defined", 25);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
  v23 = std::locale::use_facet(&v40, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
  std::locale::~locale(&v40);
  std::ostream::put();
  std::ostream::flush();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1))
  {
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) / 1000;
    gmtime_r(&v35, &v36);
    strftime(__s, 0x14uLL, "%Y-%m-%d %H:%M:%S", &v36);
    v24 = sub_1D4B02240(v37, (uint64_t)"Maximum: ", 9);
    v25 = strlen(__s);
    v26 = sub_1D4B02240(v24, (uint64_t)__s, v25);
    sub_1D4B02240(v26, (uint64_t)".", 1);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    v27 = (_QWORD *)std::ostream::operator<<();
  }
  else
  {
    v27 = sub_1D4B02240(v37, (uint64_t)"Maximum is not defined", 22);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(_QWORD *)(*v27 - 24)));
  v28 = std::locale::use_facet(&v40, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
  std::locale::~locale(&v40);
  std::ostream::put();
  std::ostream::flush();
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1))
  {
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) / 1000;
    gmtime_r(&v35, &v36);
    strftime(__s, 0x14uLL, "%Y-%m-%d %H:%M:%S", &v36);
    v29 = sub_1D4B02240(v37, (uint64_t)"UpperBound: ", 12);
    v30 = strlen(__s);
    v31 = sub_1D4B02240(v29, (uint64_t)__s, v30);
    sub_1D4B02240(v31, (uint64_t)".", 1);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
    v32 = (_QWORD *)std::ostream::operator<<();
  }
  else
  {
    v32 = sub_1D4B02240(v37, (uint64_t)"UpperBound is not defined", 25);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(_QWORD *)(*v32 - 24)));
  v33 = std::locale::use_facet(&v40, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
  std::locale::~locale(&v40);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v37[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v37 + *(_QWORD *)(v37[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v37[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v38 < 0)
    operator delete((void *)v37[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v39);
}

void sub_1D4B40AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  std::locale::~locale((std::locale *)(v9 - 88));
  sub_1D4B01D20((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B40B18(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t sub_1D4B40B20(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 65);
}

uint64_t sub_1D4B40B28(_QWORD *a1)
{
  std::runtime_error *exception;

  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 72))(a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "LowerBound is not defined.");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return a1[9];
}

void sub_1D4B40B88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B40B9C(_QWORD *a1)
{
  std::runtime_error *exception;

  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 80))(a1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1D4B2D1F0(exception, "UpperBound is not defined.");
    __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return a1[10];
}

void sub_1D4B40BFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL *sub_1D4B40C10(uint64_t a1, void *lpsrc)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1E9846930, (const struct __class_type_info *)&unk_1E9846BE8, 8);
  if (!v3)
    __cxa_bad_cast();
  return sub_1D4B41090((BOOL *)(a1 + 16), v3 + 16);
}

_DWORD *sub_1D4B40C60(uint64_t a1, uint64_t a2)
{
  int v3;
  _DWORD *result;
  int v6;
  uint64_t v7;
  int v8;

  v3 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a2 + 112) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(a2 + 16) = v3 | 0xA80;
  result = *(_DWORD **)(a2 + 80);
  if (!result)
  {
    result = sub_1D4B15410(0);
    *(_QWORD *)(a2 + 80) = result;
  }
  if (*(_BYTE *)(a1 + 17))
  {
    v6 = result[4];
    *((_QWORD *)result + 5) = *(_QWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 48);
    result[4] = v6 | 0xC;
    *((_QWORD *)result + 6) = v7;
  }
  else
  {
    v8 = result[4];
    *((_QWORD *)result + 5) = 0;
    *((_QWORD *)result + 6) = 0;
    result[4] = v8 & 0xFFFFFFF3;
  }
  return result;
}

BOOL *sub_1D4B40CE8(uint64_t a1, void *a2)
{
  return sub_1D4B40C10(a1 - 8, a2);
}

_DWORD *sub_1D4B40CF0(uint64_t a1, uint64_t a2)
{
  return sub_1D4B40C60(a1 - 8, a2);
}

uint64_t sub_1D4B40CF8(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * a2);
}

uint64_t sub_1D4B40D04(uint64_t a1)
{
  return (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
}

uint64_t sub_1D4B40D14(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1D4B40D24(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1D4B40D34(uint64_t a1, unsigned int a2, unsigned int a3)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * a2) + 16 * a3);
}

uint64_t sub_1D4B40D50(uint64_t a1, unsigned int a2)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * a2 + 8) - *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * a2)) >> 4;
}

BOOL *sub_1D4B40D6C(BOOL *result, unsigned __int8 *a2)
{
  int v2;
  int v3;
  char v5;

  *result = (*result | *a2) != 0;
  *((_QWORD *)result + 2) += *((_QWORD *)a2 + 2);
  if (a2[1])
  {
    if (result[1])
    {
      v2 = (char)a2[25];
      if (result[25] < v2)
        result[25] = v2;
      v3 = (char)a2[24];
      if (v3 < result[24])
        result[24] = v3;
    }
    else
    {
      *(_WORD *)(result + 1) = 257;
      *((_WORD *)result + 12) = *((_WORD *)a2 + 12);
    }
  }
  v5 = result[4] && a2[4] != 0;
  result[4] = v5;
  *((_QWORD *)result + 1) += *((_QWORD *)a2 + 1);
  return result;
}

BOOL *sub_1D4B40E0C(BOOL *result, unsigned __int8 *a2)
{
  int v2;
  int v3;
  char v5;

  *result = (*result | *a2) != 0;
  *((_QWORD *)result + 2) += *((_QWORD *)a2 + 2);
  if (a2[1])
  {
    if (result[1])
    {
      v2 = *((_DWORD *)a2 + 7);
      if (*((_DWORD *)result + 7) < v2)
        *((_DWORD *)result + 7) = v2;
      v3 = *((_DWORD *)a2 + 6);
      if (v3 < *((_DWORD *)result + 6))
        *((_DWORD *)result + 6) = v3;
    }
    else
    {
      *(_WORD *)(result + 1) = 257;
      *((_QWORD *)result + 3) = *((_QWORD *)a2 + 3);
    }
  }
  v5 = result[4] && a2[4] != 0;
  result[4] = v5;
  *((_QWORD *)result + 1) += *((_QWORD *)a2 + 1);
  return result;
}

unsigned __int8 *sub_1D4B40EAC(unsigned __int8 *result, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  BOOL v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v3 = result;
  *result = (*result | *a2) != 0;
  *((_QWORD *)result + 2) += *((_QWORD *)a2 + 2);
  if (a2[1])
  {
    if (result[1])
    {
      v16 = *((_OWORD *)result + 3);
      v17 = *((_QWORD *)result + 8);
      v14 = *((_OWORD *)a2 + 3);
      v15 = *((_QWORD *)a2 + 8);
      if (sub_1D4B28F6C((uint64_t)&v16, (uint64_t)&v14))
      {
        v4 = *((_OWORD *)a2 + 3);
        *((_DWORD *)v3 + 16) = *((_DWORD *)a2 + 16);
        *((_OWORD *)v3 + 3) = v4;
      }
      v12 = *(_OWORD *)(a2 + 24);
      v13 = *((_QWORD *)a2 + 5);
      v10 = *(_OWORD *)(v3 + 24);
      v11 = *((_QWORD *)v3 + 5);
      result = (unsigned __int8 *)sub_1D4B28F6C((uint64_t)&v12, (uint64_t)&v10);
      if ((_DWORD)result)
      {
        v5 = *(_OWORD *)(a2 + 24);
        *((_DWORD *)v3 + 10) = *((_DWORD *)a2 + 10);
        *(_OWORD *)(v3 + 24) = v5;
      }
    }
    else
    {
      *(_WORD *)(result + 1) = 257;
      v6 = *(_OWORD *)(a2 + 24);
      *((_DWORD *)result + 10) = *((_DWORD *)a2 + 10);
      *(_OWORD *)(result + 24) = v6;
      v7 = *((_OWORD *)a2 + 3);
      *((_DWORD *)result + 16) = *((_DWORD *)a2 + 16);
      *((_OWORD *)result + 3) = v7;
    }
  }
  if (v3[4])
    v8 = a2[4] == 0;
  else
    v8 = 1;
  v9 = !v8;
  v3[4] = v9;
  *((_QWORD *)v3 + 1) += *((_QWORD *)a2 + 1);
  return result;
}

BOOL *sub_1D4B40FF0(BOOL *result, unsigned __int8 *a2)
{
  double v2;
  double v3;
  char v5;

  *result = (*result | *a2) != 0;
  *((_QWORD *)result + 2) += *((_QWORD *)a2 + 2);
  if (a2[1])
  {
    if (result[1])
    {
      v2 = *((double *)a2 + 4);
      if (*((double *)result + 4) < v2)
        *((double *)result + 4) = v2;
      v3 = *((double *)a2 + 3);
      if (v3 < *((double *)result + 3))
        *((double *)result + 3) = v3;
    }
    else
    {
      *(_WORD *)(result + 1) = 257;
      *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
    }
  }
  v5 = result[4] && a2[4] != 0;
  result[4] = v5;
  *((_QWORD *)result + 1) += *((_QWORD *)a2 + 1);
  return result;
}

BOOL *sub_1D4B41090(BOOL *result, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *result = (*result | *a2) != 0;
  *((_QWORD *)result + 2) += *((_QWORD *)a2 + 2);
  if (a2[1])
  {
    if (result[1])
    {
      v2 = *((_QWORD *)a2 + 4);
      if (*((_QWORD *)result + 4) < v2)
        *((_QWORD *)result + 4) = v2;
      v3 = *((_QWORD *)a2 + 3);
      if (v3 < *((_QWORD *)result + 3))
        *((_QWORD *)result + 3) = v3;
    }
    else
    {
      *(_WORD *)(result + 1) = 257;
      *(_OWORD *)(result + 24) = *(_OWORD *)(a2 + 24);
    }
  }
  v5 = result[4] && a2[4] != 0;
  result[4] = v5;
  *((_QWORD *)result + 1) += *((_QWORD *)a2 + 1);
  return result;
}

void sub_1D4B41130(BOOL *a1, const std::string *a2)
{
  const std::string *v4;
  std::string *v5;
  int v6;
  void *v7;
  char v8;
  void *v9;
  void **v10;
  size_t v11;
  __int128 *p_dst;
  size_t v13;
  int v14;
  _BOOL4 v15;
  int v16;
  void *v17;
  char v18;
  void *v19;
  void **v20;
  size_t v21;
  __int128 *v22;
  size_t v23;
  int v24;
  _BOOL4 v25;
  char v27;
  __int128 v28;
  uint64_t v29;
  void *v30[2];
  int64_t v31;
  __int128 __dst;
  int64_t v33;
  void *__p[2];
  uint64_t v35;

  *a1 = (*a1 | a2->__r_.__value_.__s.__data_[0]) != 0;
  *((_QWORD *)a1 + 2) += *((_QWORD *)&a2->__r_.__value_.__l + 2);
  if (!a2->__r_.__value_.__s.__data_[1])
    goto LABEL_67;
  if (!a1[1])
  {
    *(_WORD *)(a1 + 1) = 257;
    std::string::operator=((std::string *)a1 + 1, a2 + 1);
    v4 = a2 + 2;
    v5 = (std::string *)(a1 + 48);
LABEL_66:
    std::string::operator=(v5, v4);
    goto LABEL_67;
  }
  if (a1[71] < 0)
  {
    sub_1D4B1655C(__p, *((void **)a1 + 6), *((_QWORD *)a1 + 7));
  }
  else
  {
    *(_OWORD *)__p = *((_OWORD *)a1 + 3);
    v35 = *((_QWORD *)a1 + 8);
  }
  if (SHIBYTE(a2[2].__r_.__value_.__r.__words[2]) < 0)
  {
    sub_1D4B1655C(&__dst, a2[2].__r_.__value_.__l.__data_, a2[2].__r_.__value_.__l.__size_);
  }
  else
  {
    __dst = *(_OWORD *)&a2[2].__r_.__value_.__l.__data_;
    v33 = a2[2].__r_.__value_.__r.__words[2];
  }
  v6 = SHIBYTE(v33);
  v7 = (void *)__dst;
  v8 = HIBYTE(v35);
  if (v35 >= 0)
    v9 = (void *)HIBYTE(v35);
  else
    v9 = __p[1];
  if (v35 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if (v33 >= 0)
    v11 = HIBYTE(v33);
  else
    v11 = *((_QWORD *)&__dst + 1);
  if (v33 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
  if (v11 >= (unint64_t)v9)
    v13 = (size_t)v9;
  else
    v13 = v11;
  v14 = memcmp(v10, p_dst, v13);
  if (v14)
    v15 = v14 < 0;
  else
    v15 = (unint64_t)v9 < v11;
  if (v6 < 0)
  {
    operator delete(v7);
    if ((v35 & 0x8000000000000000) == 0)
    {
LABEL_30:
      if (!v15)
        goto LABEL_32;
      goto LABEL_31;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_30;
  }
  operator delete(__p[0]);
  if (v15)
LABEL_31:
    std::string::operator=((std::string *)a1 + 2, a2 + 2);
LABEL_32:
  if (SHIBYTE(a2[1].__r_.__value_.__r.__words[2]) < 0)
  {
    sub_1D4B1655C(v30, a2[1].__r_.__value_.__l.__data_, a2[1].__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)v30 = *(_OWORD *)&a2[1].__r_.__value_.__l.__data_;
    v31 = a2[1].__r_.__value_.__r.__words[2];
  }
  if (a1[47] < 0)
  {
    sub_1D4B1655C(&v28, *((void **)a1 + 3), *((_QWORD *)a1 + 4));
  }
  else
  {
    v28 = *(_OWORD *)(a1 + 24);
    v29 = *((_QWORD *)a1 + 5);
  }
  v16 = SHIBYTE(v29);
  v17 = (void *)v28;
  v18 = HIBYTE(v31);
  if (v31 >= 0)
    v19 = (void *)HIBYTE(v31);
  else
    v19 = v30[1];
  if (v31 >= 0)
    v20 = v30;
  else
    v20 = (void **)v30[0];
  if (v29 >= 0)
    v21 = HIBYTE(v29);
  else
    v21 = *((_QWORD *)&v28 + 1);
  if (v29 >= 0)
    v22 = &v28;
  else
    v22 = (__int128 *)v28;
  if (v21 >= (unint64_t)v19)
    v23 = (size_t)v19;
  else
    v23 = v21;
  v24 = memcmp(v20, v22, v23);
  if (v24)
    v25 = v24 < 0;
  else
    v25 = (unint64_t)v19 < v21;
  if ((v16 & 0x80000000) == 0)
  {
    if ((v18 & 0x80) == 0)
      goto LABEL_61;
LABEL_64:
    operator delete(v30[0]);
    if (!v25)
      goto LABEL_67;
    goto LABEL_65;
  }
  operator delete(v17);
  if (v31 < 0)
    goto LABEL_64;
LABEL_61:
  if (v25)
  {
LABEL_65:
    v5 = (std::string *)(a1 + 24);
    v4 = a2 + 1;
    goto LABEL_66;
  }
LABEL_67:
  v27 = a1[4] && a2->__r_.__value_.__s.__data_[4] != 0;
  a1[4] = v27;
  *((_QWORD *)a1 + 1) += a2->__r_.__value_.__l.__size_;
}

void sub_1D4B413C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4B413FC(uint64_t a1)
{
  sub_1D4B4A890(a1 + 24);
  sub_1D4B4A890(a1 + 48);
  sub_1D4B4A890(a1 + 72);
  *(_BYTE *)(a1 + 4) = 0;
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

uint64_t sub_1D4B41440(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_1D4B41490(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_1D4B35A48(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1D4B41500(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_1D4B182AC();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)sub_1D4B29B64(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    sub_1D4B41664(a1, &v15);
    sub_1D4B417F4(&v15);
  }
}

void sub_1D4B41650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B417F4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B41664(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1D4B416D8((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1D4B416D8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_1D4B41778((uint64_t)v11);
  return v9;
}

uint64_t sub_1D4B41778(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1D4B417AC(a1);
  return a1;
}

void sub_1D4B417AC(uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    sub_1D4B35A48(&v3);
    v1 += 3;
  }
}

void **sub_1D4B417F4(void **a1)
{
  sub_1D4B41824((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_1D4B41824(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    sub_1D4B35A48(&v5);
  }
}

_QWORD *sub_1D4B41874(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_1E984B000;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1D4B418BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4B418DC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1D4B418F4(uint64_t a1, uint64_t a2)
{
  if (sub_1D4B1F350(a2, (uint64_t)&unk_1E9847020))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_1D4B41934(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *result = &off_1E9848028;
  result[1] = a2;
  result[2] = a4;
  result[3] = a5;
  result[4] = a3;
  result[5] = a6;
  result[6] = a7;
  result[7] = a8;
  return result;
}

void sub_1D4B41954(uint64_t a1)
{
  void *v1;

  v1 = (void *)nullsub_1(a1);
  operator delete(v1);
}

uint64_t sub_1D4B41970(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1D4B41980@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return sub_1D4B0AFC0(a3, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 64) + 8 * a2 + 8));
}

uint64_t sub_1D4B4199C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t sub_1D4B419A4(uint64_t a1)
{
  return *(_QWORD *)(sub_1D4B320CC(*(_QWORD *)(a1 + 8)) + 56);
}

_QWORD *sub_1D4B419C0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  std::runtime_error *exception;
  _QWORD *v35;
  std::string v36;
  _BYTE v37[16];
  _QWORD v38[34];

  v10 = a1[5];
  v11 = (_QWORD *)a1[2];
  v12 = v11[6];
  v13 = v11[7];
  v14 = v11[8];
  result = (_QWORD *)sub_1D4B320CC(a1[1]);
  v16 = a1[3];
  v17 = *(unsigned int *)(v16 + 32);
  if ((int)v17 < 1)
  {
LABEL_7:
    *a5 = 0;
  }
  else
  {
    v18 = 0;
    v19 = v13 + v12 + v14;
    v20 = result[6];
    v21 = *(_QWORD *)(v16 + 40) + 8;
    while (1)
    {
      v22 = *(_QWORD *)(v21 + 8 * v18);
      if ((*(_BYTE *)(v22 + 16) & 1) != 0 && *(_DWORD *)(v22 + 24) == a3 && *(_DWORD *)(v22 + 28) == a2)
        break;
      v10 += *(_QWORD *)(v22 + 32);
      if (v17 == ++v18)
        goto LABEL_7;
    }
    v23 = *(_QWORD *)(v22 + 32);
    v24 = v23;
    if (a4)
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[6] + 24))(a1[6]);
    if (v23 + v10 > v19)
    {
      sub_1D4B177C0((uint64_t)v37);
      sub_1D4B02240(v38, (uint64_t)"Malformed stream meta at stream index ", 38);
      v28 = (_QWORD *)std::ostream::operator<<();
      sub_1D4B02240(v28, (uint64_t)" in stripe ", 11);
      v29 = (_QWORD *)std::ostream::operator<<();
      sub_1D4B02240(v29, (uint64_t)": streamOffset=", 15);
      v30 = (_QWORD *)std::ostream::operator<<();
      sub_1D4B02240(v30, (uint64_t)", streamLength=", 15);
      v31 = (_QWORD *)std::ostream::operator<<();
      sub_1D4B02240(v31, (uint64_t)", stripeOffset=", 15);
      v32 = (_QWORD *)std::ostream::operator<<();
      sub_1D4B02240(v32, (uint64_t)", stripeIndexLength=", 20);
      v33 = (_QWORD *)std::ostream::operator<<();
      sub_1D4B02240(v33, (uint64_t)", stripeDataLength=", 19);
      std::ostream::operator<<();
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::stringbuf::str();
      sub_1D4B2D1D0(exception, &v36);
      __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    v25 = sub_1D4B31878(a1[1]);
    v26 = operator new(0x48uLL);
    sub_1D4B01E70(v26, a1[6], v10, *(_QWORD *)(v22 + 32), v20, v24);
    v35 = v26;
    v27 = sub_1D4B31884(a1[1]);
    sub_1D4B2C08C(v25, (uint64_t *)&v35, v27, v20, a5);
    result = v35;
    v35 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1D4B41C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_1D4B178EC((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

uint64_t sub_1D4B41CB0(uint64_t a1)
{
  return *(_QWORD *)(sub_1D4B320CC(*(_QWORD *)(a1 + 8)) + 48);
}

uint64_t sub_1D4B41CCC(uint64_t a1)
{
  return sub_1D4B320D4(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1D4B41CD4(uint64_t a1)
{
  return sub_1D4B320DC(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1D4B41CDC(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  std::runtime_error *exception;
  _QWORD *v8;
  uint64_t v9;

  if (!*(_QWORD *)(result + 80))
  {
    v1 = (_QWORD *)result;
    v2 = *(unsigned int *)(result + 64);
    v3 = operator new(0x48uLL);
    sub_1D4B01E70(v3, v1[6], v1[2] + v1[1] + v1[3], v1[4], v1[7], 0);
    v8 = v3;
    sub_1D4B2C08C(v2, (uint64_t *)&v8, v1[9], v1[7], &v9);
    v4 = (uint64_t)v8;
    v8 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = operator new(0x68uLL);
    sub_1D4B0BF08((uint64_t)v5);
    v6 = v1[10];
    v1[10] = v5;
    if (v6)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v5 = (void *)v1[10];
    }
    if ((sub_1D4BB191C((uint64_t)v5, v9) & 1) == 0)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_1D4B2D1F0(exception, "Failed to parse the stripe footer");
      __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
    }
    result = v9;
    v9 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1D4B41DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  __cxa_free_exception(v10);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(a1);
}

_DWORD *sub_1D4B41E60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  sub_1D4B41CDC(a1);
  v6 = *(_QWORD *)(a1 + 8);
  if (a2)
  {
    v7 = 0;
    v8 = a2;
    do
    {
      v6 += *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 40) + (v7 >> 29) + 8) + 32);
      v7 += 0x100000000;
      --v8;
    }
    while (v8);
  }
  result = operator new(0x28uLL);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 40) + 8 * (int)a2 + 8);
  *(_QWORD *)result = &off_1E9848B18;
  v11 = *(unsigned int *)(v10 + 28);
  result[2] = *(_DWORD *)(v10 + 24);
  *((_QWORD *)result + 2) = v11;
  *((_QWORD *)result + 3) = v6;
  *((_QWORD *)result + 4) = *(_QWORD *)(v10 + 32);
  *a3 = result;
  return result;
}

uint64_t sub_1D4B41F08(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_1D4B41F10(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

_QWORD *sub_1D4B41F18(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E9848B58;
  v2 = a1[10];
  a1[10] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1D4B41F5C(_QWORD *__p)
{
  uint64_t v2;

  *__p = &off_1E9848B58;
  v2 = __p[10];
  __p[10] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

uint64_t sub_1D4B41FA0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_1D4B41FA8(_QWORD *a1)
{
  return a1[3] + a1[2] + a1[4];
}

uint64_t sub_1D4B41FBC(uint64_t a1)
{
  sub_1D4B41CDC(a1);
  return *(int *)(*(_QWORD *)(a1 + 80) + 32);
}

uint64_t sub_1D4B41FE4(uint64_t a1, int a2)
{
  sub_1D4B41CDC(a1);
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 64) + 8 * a2 + 8) + 24);
}

uint64_t sub_1D4B42020(uint64_t a1, int a2)
{
  sub_1D4B41CDC(a1);
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 64) + 8 * a2 + 8) + 28);
}

uint64_t sub_1D4B4205C(uint64_t a1)
{
  sub_1D4B41CDC(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 80) + 96);
}

uint64_t sub_1D4B42084(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = *a1;
  v3 = a1[1] - *a1;
  if (!v3)
    return -1;
  v4 = (v3 >> 3) - 1;
  v5 = v4 >> 1;
  v6 = *(_QWORD *)(v2 + 8 * (v4 >> 1));
  if (v6 != a2 && v4 != 0)
  {
    v8 = 0;
    v9 = v4;
    do
    {
      if (v4 >= 2)
        v10 = v5 - 1;
      else
        v10 = 0;
      if (v6 >= a2)
        v9 = v10;
      else
        v8 = v5 + 1;
      v4 = v9 + v8;
      v5 = (v9 + v8) >> 1;
      v6 = *(_QWORD *)(v2 + 8 * v5);
    }
    while (v6 != a2 && v8 < v9);
  }
  return v5 - (v6 > a2);
}

uint64_t sub_1D4B420FC(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E9847858;
  v2 = *(void **)(a1 + 200);
  if (v2)
  {
    *(_QWORD *)(a1 + 208) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1D4B4216C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_1D4B420FC(a1);
  operator delete(v1);
}

BOOL sub_1D4B42180(uint64_t a1)
{
  uint64_t v1;

  if (*(char *)(a1 + 31) < 0)
    v1 = *(_QWORD *)(a1 + 16);
  else
    v1 = *(unsigned __int8 *)(a1 + 31);
  return v1 != 0;
}

uint64_t sub_1D4B421A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (!*(_BYTE *)(a1 + 72))
    return a1 + 32;
  if (a2 % 0x2F0605980 >= 0)
    v3 = a2 % 0x2F0605980;
  else
    v3 = a2 % 0x2F0605980 + 0x2F0605980;
  if (*(_BYTE *)(a1 + 224) == ((sub_1D4B42084((uint64_t *)(a1 + 200), v3) & 1) == 0))
    return a1 + 32;
  else
    return a1 + 80;
}

void sub_1D4B4222C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *p_p;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  void *__p;
  uint64_t v26;
  unsigned __int8 v27;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
  {
    v4 = sub_1D4B02240(a2, (uint64_t)"  Future rule: ", 15);
    v5 = *(char *)(a1 + 31);
    if (v5 >= 0)
      v6 = a1 + 8;
    else
      v6 = *(_QWORD *)(a1 + 8);
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(a1 + 31);
    else
      v7 = *(_QWORD *)(a1 + 16);
    v8 = sub_1D4B02240(v4, v6, v7);
    sub_1D4B02240(v8, (uint64_t)"\n", 1);
    v9 = sub_1D4B02240(a2, (uint64_t)"  standard ", 11);
    sub_1D4B42484(a1 + 32);
    if ((v27 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v27 & 0x80u) == 0)
      v11 = v27;
    else
      v11 = v26;
    v12 = sub_1D4B02240(v9, (uint64_t)p_p, v11);
    sub_1D4B02240(v12, (uint64_t)"\n", 1);
    if ((char)v27 < 0)
      operator delete(__p);
    if (*(_BYTE *)(a1 + 72))
    {
      v13 = sub_1D4B02240(a2, (uint64_t)"  dst ", 6);
      sub_1D4B42484(a1 + 80);
      if ((v27 & 0x80u) == 0)
        v14 = &__p;
      else
        v14 = __p;
      if ((v27 & 0x80u) == 0)
        v15 = v27;
      else
        v15 = v26;
      v16 = sub_1D4B02240(v13, (uint64_t)v14, v15);
      sub_1D4B02240(v16, (uint64_t)"\n", 1);
      if ((char)v27 < 0)
        operator delete(__p);
      v17 = sub_1D4B02240(a2, (uint64_t)"  start ", 8);
      sub_1D4B425A4((int *)(a1 + 120));
      if ((v27 & 0x80u) == 0)
        v18 = &__p;
      else
        v18 = __p;
      if ((v27 & 0x80u) == 0)
        v19 = v27;
      else
        v19 = v26;
      v20 = sub_1D4B02240(v17, (uint64_t)v18, v19);
      sub_1D4B02240(v20, (uint64_t)"\n", 1);
      if ((char)v27 < 0)
        operator delete(__p);
      v21 = sub_1D4B02240(a2, (uint64_t)"  end ", 6);
      sub_1D4B425A4((int *)(a1 + 160));
      if ((v27 & 0x80u) == 0)
        v22 = &__p;
      else
        v22 = __p;
      if ((v27 & 0x80u) == 0)
        v23 = v27;
      else
        v23 = v26;
      v24 = sub_1D4B02240(v21, (uint64_t)v22, v23);
      sub_1D4B02240(v24, (uint64_t)"\n", 1);
      if ((char)v27 < 0)
        operator delete(__p);
    }
  }
}

void sub_1D4B4245C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4B42484(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[2];
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  sub_1D4B177C0((uint64_t)v8);
  v2 = *(char *)(a1 + 39);
  if (v2 >= 0)
    v3 = a1 + 16;
  else
    v3 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 39);
  else
    v4 = *(_QWORD *)(a1 + 24);
  v5 = sub_1D4B02240(v9, v3, v4);
  sub_1D4B02240(v5, (uint64_t)" ", 1);
  std::ostream::operator<<();
  if (*(_BYTE *)(a1 + 8))
    sub_1D4B02240(v9, (uint64_t)" (dst)", 6);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v9[0] = v6;
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1D82646E0](&v11);
}

void sub_1D4B42590(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B178EC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B425A4(int *a1)
{
  int v2;
  _QWORD *v3;
  const char *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  sub_1D4B177C0((uint64_t)v11);
  v2 = *a1;
  if (*a1 == 2)
  {
    sub_1D4B02240(v12, (uint64_t)"month ", 6);
    v6 = (_QWORD *)std::ostream::operator<<();
    sub_1D4B02240(v6, (uint64_t)" week ", 6);
    v3 = (_QWORD *)std::ostream::operator<<();
    v4 = " day ";
    v5 = 5;
  }
  else if (v2 == 1)
  {
    v3 = v12;
    v4 = "day ";
    v5 = 4;
  }
  else
  {
    if (v2)
      goto LABEL_8;
    v3 = v12;
    v4 = "julian ";
    v5 = 7;
  }
  sub_1D4B02240(v3, (uint64_t)v4, v5);
  std::ostream::operator<<();
LABEL_8:
  sub_1D4B02240(v12, (uint64_t)" at ", 4);
  v7 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v7, (uint64_t)":", 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v8, (uint64_t)":", 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v12[0] = v9;
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1D82646E0](&v14);
}

void sub_1D4B427A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B178EC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_1D4B427B4@<X0>(uint64_t a1@<X0>, const void **a2@<X8>)
{
  _OWORD *v4;
  void *v5;
  uint64_t *v7;

  v4 = operator new(0xE8uLL);
  v4[2] = 0u;
  v4[3] = 0u;
  v4[4] = 0u;
  v4[5] = 0u;
  v4[6] = 0u;
  v4[7] = 0u;
  v4[8] = 0u;
  v4[9] = 0u;
  v4[10] = 0u;
  v4[11] = 0u;
  v4[12] = 0u;
  v4[13] = 0u;
  *(_QWORD *)v4 = off_1E9847858;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = 0;
  *((_QWORD *)v4 + 6) = 0;
  *((_QWORD *)v4 + 7) = 0;
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 12) = 0;
  *((_QWORD *)v4 + 13) = 0;
  *((_QWORD *)v4 + 14) = 0;
  *((_QWORD *)v4 + 27) = 0;
  *((_QWORD *)v4 + 28) = 0;
  *((_QWORD *)v4 + 25) = 0;
  *((_QWORD *)v4 + 26) = 0;
  sub_1D4B44780(a2, (uint64_t)v4);
  if (*a2)
    v5 = __dynamic_cast(*a2, (const struct __class_type_info *)&unk_1E9845FA8, (const struct __class_type_info *)&unk_1E9846198, 0);
  else
    v5 = 0;
  return sub_1D4B43B84(&v7, a1, (uint64_t)v5);
}

void sub_1D4B4286C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D4B1F3DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B42890(uint64_t a1)
{
  sub_1D4B44840(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t sub_1D4B428B8(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  time_t v8;
  tm v10;

  *(_QWORD *)a1 = off_1E9847758;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1D4B1655C((_BYTE *)(a1 + 8), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  v6 = *a3;
  v7 = a3[1] - *a3;
  *(_QWORD *)&v10.tm_sec = &off_1E9847938;
  sub_1D4B42A18(a1, v6, 0, v7, (uint64_t)&v10);
  *(_OWORD *)&v10.tm_sec = xmmword_1D4BD5960;
  *(_QWORD *)&v10.tm_mon = 0x7300000000;
  v10.tm_isdst = 0;
  v8 = timegm(&v10);
  *(_QWORD *)(a1 + 144) = v8 - *(_QWORD *)(*(uint64_t (**)(uint64_t, time_t))(*(_QWORD *)a1 + 16))(a1, v8);
  return a1;
}

void sub_1D4B429C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void *v13;
  void *v14;

  sub_1D4B1F3DC(v11);
  v13 = *(void **)(v9 + 88);
  if (v13)
  {
    *(_QWORD *)(v9 + 96) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(v9 + 64);
  if (v14)
  {
    *(_QWORD *)(v9 + 72) = v14;
    operator delete(v14);
  }
  sub_1D4B448C4(&a9);
  if (*(char *)(v9 + 31) < 0)
    operator delete(*v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B42A18(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __n128 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  uint64_t result;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  std::runtime_error *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  std::runtime_error *exception;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  std::runtime_error *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v53;
  unint64_t v55;
  std::string v56;
  void *__p[2];
  _QWORD v58[34];

  v5 = a3 + 44;
  if (a3 + 44 > a4 || strncmp((const char *)(a2 + a3), "TZif", 4uLL))
  {
    sub_1D4B177C0((uint64_t)__p);
    v37 = sub_1D4B02240(v58, (uint64_t)"non-tzfile ", 11);
    v38 = *(char *)(a1 + 31);
    if (v38 >= 0)
      v39 = a1 + 8;
    else
      v39 = *(_QWORD *)(a1 + 8);
    if (v38 >= 0)
      v40 = *(unsigned __int8 *)(a1 + 31);
    else
      v40 = *(_QWORD *)(a1 + 16);
    sub_1D4B02240(v37, v39, v40);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v56);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E9847810;
    __cxa_throw(exception, (struct type_info *)&unk_1E9846140, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  v9 = (unsigned int *)(a2 + a3 + 20);
  v51 = bswap32(*v9);
  v10 = bswap32(v9[1]);
  v11 = bswap32(v9[2]);
  v12 = bswap32(v9[3]);
  v13 = bswap32(v9[4]);
  v14 = bswap32(v9[5]);
  v49 = v5;
  v15 = v5 + (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 24))(a5) * v12;
  v55 = v13;
  v16 = v15 + v12 + 6 * v13;
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 24))(a5);
  v18 = v10 + v51 + v14 + v16 + (v17 + 4) * v11;
  if (a4 < v18)
  {
    sub_1D4B177C0((uint64_t)__p);
    v42 = sub_1D4B02240(v58, (uint64_t)"tzfile too short ", 17);
    v43 = *(char *)(a1 + 31);
    if (v43 >= 0)
      v44 = a1 + 8;
    else
      v44 = *(_QWORD *)(a1 + 8);
    if (v43 >= 0)
      v45 = *(unsigned __int8 *)(a1 + 31);
    else
      v45 = *(_QWORD *)(a1 + 16);
    v46 = sub_1D4B02240(v42, v44, v45);
    sub_1D4B02240(v46, (uint64_t)" needs ", 7);
    v47 = (_QWORD *)std::ostream::operator<<();
    sub_1D4B02240(v47, (uint64_t)" and has ", 9);
    std::ostream::operator<<();
    v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(v48, &v56);
    v48->__vftable = (std::runtime_error_vtbl *)&off_1E9847810;
    __cxa_throw(v48, (struct type_info *)&unk_1E9846140, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (!a3 && *(_BYTE *)(a2 + 4))
  {
    __p[0] = &off_1E9847978;
    return sub_1D4B42A18(a1, a2);
  }
  v50 = a4 - v18;
  v53 = v10 + v51 + v14 + v16 + (v17 + 4) * v11;
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 16))(a5);
  sub_1D4B436BC((uint64_t *)(a1 + 40), v13);
  sub_1D4B1DB6C(a1 + 64, v12);
  sub_1D4B1DB6C(a1 + 88, v12);
  v19 = sub_1D4B434C4(a1, a2, v15 + v12, v13, v16, v14);
  if ((_DWORD)v12)
  {
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a5 + 24))(a5, v19);
      *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v20) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 32))(a5, a2 + v49 + v22 * v20);
      v23 = *(unsigned __int8 *)(a2 + v20 + v15);
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v20) = v23;
      if (v55 <= v23)
      {
        sub_1D4B177C0((uint64_t)__p);
        v30 = sub_1D4B02240(v58, (uint64_t)"tzfile rule out of range ", 25);
        v31 = *(char *)(a1 + 31);
        if (v31 >= 0)
          v32 = a1 + 8;
        else
          v32 = *(_QWORD *)(a1 + 8);
        if (v31 >= 0)
          v33 = *(unsigned __int8 *)(a1 + 31);
        else
          v33 = *(_QWORD *)(a1 + 16);
        v34 = sub_1D4B02240(v30, v32, v33);
        sub_1D4B02240(v34, (uint64_t)" references rule ", 17);
        v35 = (_QWORD *)std::ostream::operator<<();
        sub_1D4B02240(v35, (uint64_t)" of ", 4);
        std::ostream::operator<<();
        v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(v36, &v56);
        v36->__vftable = (std::runtime_error_vtbl *)&off_1E9847810;
        __cxa_throw(v36, (struct type_info *)&unk_1E9846140, (void (*)(void *))std::runtime_error::~runtime_error);
      }
      if ((v21 & 1) != 0)
        goto LABEL_13;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 40 * v23 + 8))
      {
        v21 = 0;
        if (++v20 == v12)
          break;
      }
      else
      {
        *(_QWORD *)(a1 + 112) = v23;
LABEL_13:
        ++v20;
        v21 = 1;
        if (v20 == v12)
          goto LABEL_16;
      }
    }
  }
  *(_QWORD *)(a1 + 112) = 0;
LABEL_16:
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, unint64_t))(*(_QWORD *)a5 + 40))(__p, a5, a2, v53, v50);
  sub_1D4B427B4((uint64_t)__p, (const void **)&v56.__r_.__value_.__l.__data_);
  sub_1D4B2BD10(a1 + 120, (__int128 *)&v56);
  size = (std::__shared_weak_count *)v56.__r_.__value_.__l.__size_;
  if (v56.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v56.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (SHIBYTE(v58[0]) < 0)
    operator delete(__p[0]);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 16))(*(_QWORD *)(a1 + 120));
  if (!(_DWORD)result)
  {
    v29 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_30:
    v28 = a1;
    goto LABEL_31;
  }
  if (!(_DWORD)v12)
  {
    v29 = 0x8000000000000000;
    goto LABEL_30;
  }
  v28 = a1;
  v29 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v12 - 8);
LABEL_31:
  *(_QWORD *)(v28 + 136) = v29;
  return result;
}

void sub_1D4B42F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      sub_1D4B178EC((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

uint64_t sub_1D4B42FD8(const void **a1)
{
  uint64_t *v2;
  size_t v3;
  void *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p;
  void *v13;
  uint64_t v14;
  __int128 v15;
  void *v16;
  _BYTE *v17;
  uint64_t v18;
  const void **v19;

  std::mutex::lock(&stru_1EFEC5E28);
  v2 = (uint64_t *)sub_1D4B36838((uint64_t)&qword_1ECD31778, a1);
  if (v2 == &qword_1ECD31780)
  {
    sub_1D4B2FA68((uint64_t)a1, &v18);
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    sub_1D4B44950(&v16, v3);
    (*(void (**)(uint64_t, void *, size_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, v16, v3, 0);
    v4 = operator new(0x98uLL);
    __p = 0;
    v13 = 0;
    v14 = 0;
    sub_1D4B44B3C(&__p, v16, (uint64_t)v17, v17 - (_BYTE *)v16);
    sub_1D4B428B8((uint64_t)v4, (__int128 *)a1, (uint64_t *)&__p);
    sub_1D4B44BB4(&v15, (uint64_t)v4);
    v19 = a1;
    v5 = sub_1D4B449C0((uint64_t **)&qword_1ECD31778, a1, (uint64_t)&unk_1D4BD5C1C, (__int128 **)&v19);
    sub_1D4B2BD10((uint64_t)(v5 + 7), &v15);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (__p)
    {
      v13 = __p;
      operator delete(__p);
    }
    if (v16)
    {
      v17 = v16;
      operator delete(v16);
    }
    v9 = v18;
    v18 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v16 = a1;
    v2 = sub_1D4B449C0((uint64_t **)&qword_1ECD31778, a1, (uint64_t)&unk_1D4BD5C1C, (__int128 **)&v16);
  }
  v10 = v2[7];
  std::mutex::unlock(&stru_1EFEC5E28);
  return v10;
}

void sub_1D4B43198(_Unwind_Exception *a1, void *__p, uint64_t a3, uint64_t a4, char a5, uint64_t a6, std::string *a7, uint64_t a8, uint64_t a9, void *__pa, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, void *a16)
{
  uint64_t v16;
  int v17;
  uint64_t v19;
  void *v20;
  std::runtime_error *exception;
  char *v22;

  v17 = (int)__p;
  sub_1D4B1F3DC((uint64_t)&a13);
  if (__pa)
    operator delete(__pa);
  if (a15)
  {
    a16 = a15;
    operator delete(a15);
  }
  v19 = *(_QWORD *)(v16 - 56);
  *(_QWORD *)(v16 - 56) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  if (v17 == 1)
  {
    v20 = __cxa_begin_catch(a1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v22 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
    sub_1D4BCA448(&a15, v22);
    std::runtime_error::runtime_error(exception, (const std::string *)&a15);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E9847810;
    __cxa_throw(exception, (struct type_info *)&unk_1E9846140, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  std::mutex::unlock(&stru_1EFEC5E28);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B43314()
{
  uint64_t v0;
  void *__p[2];
  char v3;

  sub_1D4BCA448(__p, "UTC");
  v0 = sub_1D4B43380((uint64_t)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  return v0;
}

void sub_1D4B43364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4B43380(uint64_t a1)
{
  char *v2;
  char *v3;
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  uint64_t v7;
  std::string v9;

  v2 = getenv("TZDIR");
  if (v2)
    v3 = v2;
  else
    v3 = "/usr/share/zoneinfo";
  sub_1D4BCA448(&v9, v3);
  std::string::append(&v9, "/");
  v4 = *(char *)(a1 + 23);
  if (v4 >= 0)
    v5 = (const std::string::value_type *)a1;
  else
    v5 = *(const std::string::value_type **)a1;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  std::string::append(&v9, v5, v6);
  v7 = sub_1D4B42FD8((const void **)&v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1D4B43418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4B43434(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  *(_QWORD *)a1 = off_1E9847758;
  sub_1D4B1F3DC(a1 + 120);
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(_QWORD *)(a1 + 72) = v3;
    operator delete(v3);
  }
  v5 = (void **)(a1 + 40);
  sub_1D4B448C4(&v5);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1D4B434B0(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_1D4B43434(a1);
  operator delete(v1);
}

__n128 sub_1D4B434C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 result;
  _QWORD *v18;
  _QWORD *v19;
  std::runtime_error *exception;
  std::string v21;
  __n128 v22;
  _QWORD v23[33];

  if (a4)
  {
    v9 = 0;
    v10 = 0;
    v11 = a2 + a5;
    v12 = (unsigned __int8 *)(a3 + a2 + 2);
    do
    {
      v13 = *(_QWORD *)(a1 + 40) + v9;
      *(_QWORD *)v13 = (*(v12 - 2) << 24) | ((unint64_t)*(v12 - 1) << 16) | ((unint64_t)*v12 << 8) | v12[1];
      *(_BYTE *)(v13 + 8) = v12[2] != 0;
      v14 = v12[3];
      if (v14 >= a6)
      {
        sub_1D4B177C0((uint64_t)&v22);
        sub_1D4B02240(v23, (uint64_t)"name out of range in variant ", 29);
        v18 = (_QWORD *)std::ostream::operator<<();
        sub_1D4B02240(v18, (uint64_t)" - ", 3);
        v19 = (_QWORD *)std::ostream::operator<<();
        sub_1D4B02240(v19, (uint64_t)" >= ", 4);
        std::ostream::operator<<();
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::stringbuf::str();
        std::runtime_error::runtime_error(exception, &v21);
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E9847810;
        __cxa_throw(exception, (struct type_info *)&unk_1E9846140, (void (*)(void *))std::runtime_error::~runtime_error);
      }
      sub_1D4BCA448(&v22, (char *)(v11 + v14));
      v15 = *(_QWORD *)(a1 + 40) + v9;
      v16 = v15 + 16;
      if (*(char *)(v15 + 39) < 0)
        operator delete(*(void **)v16);
      v12 += 6;
      result = v22;
      *(_QWORD *)(v16 + 16) = v23[0];
      *(__n128 *)v16 = result;
      ++v10;
      v9 += 40;
    }
    while (a4 != v10);
  }
  return result;
}

void sub_1D4B43674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      sub_1D4B178EC((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_1D4B436BC(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1D4B44C74(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 40 * a2;
    while (v3 != v7)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 40;
    }
    a1[1] = v7;
  }
}

uint64_t sub_1D4B43748(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;

  if (*(_QWORD *)(a1 + 136) < a2)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 24))(*(_QWORD *)(a1 + 120));
  v4 = sub_1D4B42084((uint64_t *)(a1 + 64), a2);
  if (v4 < 0)
    v5 = (_QWORD *)(a1 + 112);
  else
    v5 = (_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v4);
  return *(_QWORD *)(a1 + 40) + 40 * *v5;
}

void sub_1D4B437B4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  tm *p_p;
  uint64_t tm_year_high;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  size_t v22;
  _QWORD *v23;
  uint64_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  time_t v35;
  tm __p;
  char v37[25];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = sub_1D4B02240(a2, (uint64_t)"Timezone file: ", 15);
  v5 = *(char *)(a1 + 31);
  if (v5 >= 0)
    v6 = a1 + 8;
  else
    v6 = *(_QWORD *)(a1 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 31);
  else
    v7 = *(_QWORD *)(a1 + 16);
  v8 = sub_1D4B02240(v4, v6, v7);
  sub_1D4B02240(v8, (uint64_t)"\n", 1);
  sub_1D4B02240(a2, (uint64_t)"  Version: ", 11);
  v9 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v9, (uint64_t)"\n", 1);
  (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 120) + 32))(*(_QWORD *)(a1 + 120), a2);
  if (*(_QWORD *)(a1 + 48) != *(_QWORD *)(a1 + 40))
  {
    v10 = 0;
    v11 = 0;
    do
    {
      sub_1D4B02240(a2, (uint64_t)"  Variant ", 10);
      v12 = (_QWORD *)std::ostream::operator<<();
      v13 = sub_1D4B02240(v12, (uint64_t)": ", 2);
      sub_1D4B42484(*(_QWORD *)(a1 + 40) + v10);
      if (__p.tm_year >= 0)
        p_p = &__p;
      else
        p_p = *(tm **)&__p.tm_sec;
      if (__p.tm_year >= 0)
        tm_year_high = HIBYTE(__p.tm_year);
      else
        tm_year_high = *(_QWORD *)&__p.tm_hour;
      v16 = sub_1D4B02240(v13, (uint64_t)p_p, tm_year_high);
      sub_1D4B02240(v16, (uint64_t)"\n", 1);
      if (SHIBYTE(__p.tm_year) < 0)
        operator delete(*(void **)&__p.tm_sec);
      ++v11;
      v10 += 40;
    }
    while (v11 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3));
  }
  v17 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) != v17)
  {
    v18 = 0;
    v19 = (_QWORD *)MEMORY[0x1E0DE4A60];
    do
    {
      v35 = 0;
      v35 = *(_QWORD *)(v17 + 8 * v18);
      if (gmtime_r(&v35, &__p))
      {
        strftime(v37, 0x19uLL, "%F %H:%M:%S", &__p);
        v20 = v37;
      }
      else
      {
        v20 = "null";
      }
      v21 = sub_1D4B02240(v19, (uint64_t)"  Transition: ", 14);
      v22 = strlen(v20);
      v23 = sub_1D4B02240(v21, (uint64_t)v20, v22);
      sub_1D4B02240(v23, (uint64_t)" (", 2);
      v24 = (uint64_t *)(a1 + 64);
      v25 = (_QWORD *)std::ostream::operator<<();
      v26 = sub_1D4B02240(v25, (uint64_t)") -> ", 5);
      v27 = *(_QWORD *)(a1 + 40) + 40 * *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v18);
      v30 = *(_QWORD *)(v27 + 16);
      v28 = v27 + 16;
      v29 = v30;
      v31 = *(char *)(v28 + 23);
      if (v31 >= 0)
        v32 = v28;
      else
        v32 = v29;
      if (v31 >= 0)
        v33 = *(unsigned __int8 *)(v28 + 23);
      else
        v33 = *(_QWORD *)(v28 + 8);
      v34 = sub_1D4B02240(v26, v32, v33);
      sub_1D4B02240(v34, (uint64_t)"\n", 1);
      ++v18;
      v17 = *v24;
    }
    while (v18 < (*(_QWORD *)(a1 + 72) - *v24) >> 3);
  }
}

void sub_1D4B43AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1D4B43AC8(std::runtime_error *a1)
{
  void *v1;

  std::runtime_error::~runtime_error(a1);
  operator delete(v1);
}

uint64_t sub_1D4B43ADC()
{
  return 4;
}

unint64_t sub_1D4B43AE4(uint64_t a1, unsigned __int8 *a2)
{
  return (*a2 << 24) | ((unint64_t)a2[1] << 16) | ((unint64_t)a2[2] << 8) | a2[3];
}

_QWORD *sub_1D4B43B0C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1D4BCA448(a1, "");
}

uint64_t sub_1D4B43B1C()
{
  return 2;
}

uint64_t sub_1D4B43B24()
{
  return 8;
}

unint64_t sub_1D4B43B2C(uint64_t a1, unint64_t *a2)
{
  return bswap64(*a2);
}

_QWORD *sub_1D4B43B38@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  return sub_1D4B180CC(a4, (void *)(a1 + a2 + 1), a3 - 2);
}

uint64_t sub_1D4B43B4C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144);
}

uint64_t sub_1D4B43B54(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) + a2;
}

uint64_t **sub_1D4B43B84(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;

  *a1 = (uint64_t *)a2;
  v4 = (uint64_t *)*(unsigned __int8 *)(a2 + 23);
  if ((char)v4 < 0)
    v4 = *(uint64_t **)(a2 + 8);
  a1[1] = v4;
  a1[2] = 0;
  a1[3] = (uint64_t *)a3;
  std::string::operator=((std::string *)(a3 + 8), (const std::string *)a2);
  if (a1[2] != a1[1])
  {
    sub_1D4B43CA8((uint64_t)a1, (uint64_t)(a1[3] + 6));
    v5 = sub_1D4B43E44(a1);
    v6 = a1[3];
    v6[4] = -v5;
    *((_BYTE *)v6 + 40) = 0;
    v8 = a1[1];
    v7 = a1[2];
    *((_BYTE *)v6 + 72) = v7 < v8;
    if (v7 < v8)
    {
      sub_1D4B43CA8((uint64_t)a1, (uint64_t)(v6 + 12));
      v10 = a1[2];
      v9 = a1[3];
      *((_BYTE *)v9 + 88) = 1;
      v11 = *a1;
      if (*((char *)*a1 + 23) < 0)
        v11 = (uint64_t *)*v11;
      if (*((_BYTE *)v10 + (_QWORD)v11) == 44)
      {
        v12 = v9[4] + 3600;
      }
      else
      {
        v12 = -sub_1D4B43E44(a1);
        v9 = a1[3];
      }
      v9[10] = v12;
      sub_1D4B43F34(a1, (uint64_t)(v9 + 15));
      sub_1D4B43F34(a1, (uint64_t)(a1[3] + 20));
      v8 = a1[1];
      v7 = a1[2];
    }
    if (v7 != v8)
      sub_1D4B440DC(a1, "Extra text");
    sub_1D4B44274((uint64_t)a1[3]);
  }
  return a1;
}

double sub_1D4B43CA8(uint64_t a1, uint64_t a2)
{
  std::string::size_type v3;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  double result;
  std::string v17;
  char v18;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 == *(_QWORD *)(a1 + 8))
    sub_1D4B440DC((uint64_t **)a1, "name required");
  v4 = *(uint64_t **)a1;
  v5 = *(uint64_t **)a1;
  if (*(char *)(*(_QWORD *)a1 + 23) < 0)
    v5 = (uint64_t *)*v4;
  v6 = *((unsigned __int8 *)v5 + v3);
  v7 = *(_QWORD *)(a1 + 8);
  if (v6 == 60)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v3 < v7)
    {
      v8 = *(_QWORD *)(a1 + 16);
      while (1)
      {
        v9 = (uint64_t)v4;
        if (*((char *)v4 + 23) < 0)
          v9 = *v4;
        if (*(_BYTE *)(v9 + v8) == 62)
          break;
        *(_QWORD *)(a1 + 16) = ++v8;
        if (v7 == v8)
          goto LABEL_28;
      }
    }
    if (v8 == v7)
LABEL_28:
      sub_1D4B440DC((uint64_t **)a1, "missing close '>'");
    v11 = v8 + 1;
    *(_QWORD *)(a1 + 16) = v11;
  }
  else
  {
    if (v3 >= v7)
      goto LABEL_31;
    v10 = MEMORY[0x1E0C80978];
    v11 = *(_QWORD *)(a1 + 16);
    while (1)
    {
      v12 = (uint64_t)v4;
      if (*((char *)v4 + 23) < 0)
        v12 = *v4;
      v13 = *(char *)(v12 + v11);
      v14 = (v13 & 0x80000000) == 0 && (*(_DWORD *)(v10 + 4 * v13 + 60) >> 10) & 1;
      if (v13 - 43 < 3 || v14)
        break;
      *(_QWORD *)(a1 + 16) = ++v11;
      if (v7 == v11)
      {
        v11 = v7;
        break;
      }
    }
  }
  if (v11 == v3)
LABEL_31:
    sub_1D4B440DC((uint64_t **)a1, "empty string not allowed");
  std::string::basic_string(&v17, *(const std::string **)a1, v3, v11 - v3, (std::allocator<char> *)&v18);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v17.__r_.__value_.__l.__data_;
  *(std::string *)a2 = v17;
  return result;
}

uint64_t sub_1D4B43E44(_QWORD *a1)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _BOOL4 v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  BOOL v10;

  v2 = a1[2];
  if (v2 >= a1[1])
  {
    v5 = 0;
  }
  else
  {
    v3 = (_QWORD *)*a1;
    if (*(char *)(*a1 + 23) < 0)
      v3 = (_QWORD *)*v3;
    v4 = *((unsigned __int8 *)v3 + v2);
    v5 = v4 == 45;
    if (v4 == 45 || v4 == 43)
      a1[2] = v2 + 1;
  }
  v6 = 3600 * sub_1D4B44404((uint64_t)a1);
  v7 = a1[2];
  if (v7 < a1[1])
  {
    v8 = 3600;
    do
    {
      v9 = (_QWORD *)*a1;
      if (*(char *)(*a1 + 23) < 0)
        v9 = (_QWORD *)*v9;
      if (*((_BYTE *)v9 + v7) != 58)
        break;
      a1[2] = v7 + 1;
      v6 += sub_1D4B44404((uint64_t)a1) * (v8 / 0x3C);
      v7 = a1[2];
      if (v7 >= a1[1])
        break;
      v10 = v8 > 0x77;
      v8 /= 0x3CuLL;
    }
    while (v10);
  }
  if (v5)
    return -v6;
  else
    return v6;
}

uint64_t sub_1D4B43F34(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t result;

  v4 = a1[2];
  if ((unint64_t)((char *)a1[1] - (char *)v4) < 2)
    goto LABEL_5;
  v5 = *a1;
  v6 = *a1;
  if (*((char *)*a1 + 23) < 0)
    v6 = (uint64_t *)*v5;
  if (*((_BYTE *)v4 + (_QWORD)v6) != 44)
LABEL_5:
    sub_1D4B440DC(a1, "missing transition");
  a1[2] = (uint64_t *)((char *)v4 + 1);
  if (*((char *)v5 + 23) < 0)
    v5 = (uint64_t *)*v5;
  v7 = *((unsigned __int8 *)v4 + (_QWORD)v5 + 1);
  if (v7 == 77)
  {
    *(_DWORD *)a2 = 2;
    a1[2] = (uint64_t *)((char *)v4 + 2);
    *(_QWORD *)(a2 + 24) = sub_1D4B44404((uint64_t)a1);
    v9 = a1[2];
    if (v9 == a1[1])
      goto LABEL_15;
    v10 = *a1;
    if (*((char *)*a1 + 23) < 0)
      v10 = (uint64_t *)*v10;
    if (*((_BYTE *)v9 + (_QWORD)v10) != 46)
LABEL_15:
      sub_1D4B440DC(a1, "missing first .");
    a1[2] = (uint64_t *)((char *)v9 + 1);
    *(_QWORD *)(a2 + 16) = sub_1D4B44404((uint64_t)a1);
    v11 = a1[2];
    if (v11 == a1[1])
      goto LABEL_20;
    v12 = *a1;
    if (*((char *)*a1 + 23) < 0)
      v12 = (uint64_t *)*v12;
    if (*((_BYTE *)v11 + (_QWORD)v12) != 46)
LABEL_20:
      sub_1D4B440DC(a1, "missing second .");
    v8 = (uint64_t *)((char *)v11 + 1);
  }
  else
  {
    if (v7 != 74)
    {
      *(_DWORD *)a2 = 1;
      goto LABEL_24;
    }
    *(_DWORD *)a2 = 0;
    v8 = (uint64_t *)((char *)v4 + 2);
  }
  a1[2] = v8;
LABEL_24:
  *(_QWORD *)(a2 + 8) = sub_1D4B44404((uint64_t)a1);
  v13 = a1[2];
  if (v13 >= a1[1])
    goto LABEL_29;
  v14 = *a1;
  if (*((char *)*a1 + 23) < 0)
    v14 = (uint64_t *)*v14;
  if (*((_BYTE *)v13 + (_QWORD)v14) == 47)
  {
    a1[2] = (uint64_t *)((char *)v13 + 1);
    result = sub_1D4B43E44(a1);
  }
  else
  {
LABEL_29:
    result = 7200;
  }
  *(_QWORD *)(a2 + 32) = result;
  return result;
}

void sub_1D4B440DC(uint64_t **a1, const char *a2)
{
  size_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  std::runtime_error *exception;
  std::string v13;
  _BYTE v14[16];
  _QWORD v15[33];

  sub_1D4B177C0((uint64_t)v14);
  v4 = strlen(a2);
  v5 = sub_1D4B02240(v15, (uint64_t)a2, v4);
  sub_1D4B02240(v5, (uint64_t)" at ", 4);
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = sub_1D4B02240(v6, (uint64_t)" in '", 5);
  v8 = *((char *)*a1 + 23);
  if (v8 >= 0)
    v9 = (uint64_t)*a1;
  else
    v9 = **a1;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)*a1 + 23);
  else
    v10 = (*a1)[1];
  v11 = sub_1D4B02240(v7, v9, v10);
  sub_1D4B02240(v11, (uint64_t)"'", 1);
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::stringbuf::str();
  std::runtime_error::runtime_error(exception, &v13);
  exception->__vftable = (std::runtime_error_vtbl *)&off_1E9847810;
  __cxa_throw(exception, (struct type_info *)&unk_1E9846140, (void (*)(void *))std::runtime_error::~runtime_error);
}

void sub_1D4B441D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  void *v34;
  int v35;
  uint64_t v37;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v35 & 1) == 0)
    {
LABEL_6:
      a15 = *MEMORY[0x1E0DE4F50];
      v37 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(uint64_t *)((char *)&a15 + *(_QWORD *)(a15 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      a17 = v37;
      a18 = MEMORY[0x1E0DE4FB8] + 16;
      if (a31 < 0)
        operator delete(a26);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1D82646E0](&a34);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v34);
  goto LABEL_6;
}

void sub_1D4B44274(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;
  int *v11;
  _QWORD *v12;
  int *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;

  if (*(_BYTE *)(a1 + 72))
  {
    v22 = (_QWORD *)(a1 + 200);
    sub_1D4B1DB6C(a1 + 200, 0x321uLL);
    v2 = (int *)(a1 + 120);
    v3 = 1970;
    v4 = sub_1D4B444A4((int *)(a1 + 120), 1970);
    v5 = (int *)(a1 + 160);
    v6 = 0;
    v7 = 0;
    v8 = v4 < sub_1D4B444A4((int *)(a1 + 160), 1970);
    *(_BYTE *)(a1 + 224) = v8;
    v9 = (_QWORD *)(a1 + 32);
    v21 = a1;
    v10 = (_QWORD *)(a1 + 80);
    while (1)
    {
      if (v8)
        v11 = v2;
      else
        v11 = v5;
      if (v8)
        v12 = v9;
      else
        v12 = v10;
      if (v8)
        v13 = v5;
      else
        v13 = v2;
      if (v8)
        v14 = v10;
      else
        v14 = v9;
      *(_QWORD *)(*v22 + v6 + 8) = sub_1D4B444A4(v11, v3) + v7 - *v12;
      v15 = sub_1D4B444A4(v13, v3);
      v16 = (_QWORD *)*v22;
      *(_QWORD *)(*v22 + v6 + 16) = v15 + v7 - *v14;
      v17 = 31536000;
      if ((v3 & 3) == 0)
      {
        HIDWORD(v19) = -1030792151 * (unsigned __int16)v3;
        LODWORD(v19) = HIDWORD(v19);
        v18 = v19 >> 2;
        LODWORD(v19) = HIDWORD(v19);
        v20 = (v19 >> 4) < 0xA3D70B || v18 > 0x28F5C28;
        v17 = 31536000;
        if (v20)
          v17 = 31622400;
      }
      if (v3 == 2369)
        break;
      v7 += v17;
      v8 = *(_BYTE *)(v21 + 224);
      v6 += 16;
      ++v3;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 224) = 1;
    sub_1D4B1DB6C(a1 + 200, 1uLL);
    v16 = *(_QWORD **)(a1 + 200);
  }
  *v16 = 0;
}

uint64_t sub_1D4B44404(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= v2)
    sub_1D4B440DC((uint64_t **)a1, "missing number");
  result = 0;
  v5 = *(uint64_t **)a1;
  v6 = MEMORY[0x1E0C80978];
  do
  {
    v7 = (uint64_t)v5;
    if (*((char *)v5 + 23) < 0)
      v7 = *v5;
    v8 = *(char *)(v7 + v3);
    if ((v8 & 0x80000000) != 0)
      break;
    if ((*(_DWORD *)(v6 + 4 * v8 + 60) & 0x400) == 0)
      break;
    result = (int)v8 + 10 * result - 48;
    *(_QWORD *)(a1 + 16) = ++v3;
  }
  while (v2 != v3);
  return result;
}

uint64_t sub_1D4B444A4(int *a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  result = *((_QWORD *)a1 + 4);
  v4 = *a1;
  if (*a1 == 2)
  {
    if ((a2 & 3) != 0)
      v9 = 0;
    else
      v9 = __ROR8__(0x8F5C28F5C28F5C29 * a2 + 0x51EB851EB851EB8, 2) > 0x28F5C28F5C28F5CuLL
        || __ROR8__(0x8F5C28F5C28F5C29 * a2 + 0x51EB851EB851EB0, 4) < 0xA3D70A3D70A3D7uLL;
    v10 = *((_QWORD *)a1 + 3);
    v11 = a2 - (v10 < 3);
    v12 = ((unsigned __int128)(v11 * (__int128)0x5C28F5C28F5C28F5) >> 64) - v11;
    v13 = (uint64_t)(v11 / 400
                  + v11 % 100
                  + 2 * ((v12 >> 6) + ((unint64_t)v12 >> 63))
                  + ((int)(((v11 % 100) + (((v11 % 100) >> 13) & 3)) << 24) >> 26)
                  + (int)(((26215 * (__int16)(26 * (((int)v10 + 9) % 12) + 24)) >> 18)
                        + ((26215 * (__int16)(26 * (((int)v10 + 9) % 12) + 24)) >> 31)
                        + 1))
        % 7;
    v14 = v13 + (v13 < 0 ? 7uLL : 0);
    v15 = *((_QWORD *)a1 + 1);
    v16 = *((_QWORD *)a1 + 2);
    v17 = v15 - v14;
    v7 = v15 < v14;
    v18 = v15 - v14 + 7;
    if (v7)
      v19 = v18;
    else
      v19 = v17;
    v20 = v10 - 1;
    if (v16 >= 2)
    {
      v21 = v19 - v16 + 8 * v16 - 7;
      v22 = v16 - 1;
      while (v19 + 7 < qword_1D4BD5A38[12 * v9 + v20])
      {
        v19 += 7;
        if (!--v22)
        {
          v19 = v21;
          break;
        }
      }
    }
    result += 86400 * v19;
    if (v10 >= 2)
    {
      v23 = &qword_1D4BD5A38[12 * v9];
      do
      {
        v24 = *v23++;
        result += 86400 * v24;
        --v20;
      }
      while (v20);
    }
  }
  else if (v4 == 1)
  {
    result += 86400 * *((_QWORD *)a1 + 1);
  }
  else if (!v4)
  {
    v5 = *((_QWORD *)a1 + 1);
    result += 86400 * v5;
    if ((a2 & 3) == 0)
    {
      v6 = __ROR8__(0x8F5C28F5C28F5C29 * a2 + 0x51EB851EB851EB8, 2);
      v7 = __ROR8__(0x8F5C28F5C28F5C29 * a2 + 0x51EB851EB851EB0, 4) < 0xA3D70A3D70A3D7uLL
        || v6 > 0x28F5C28F5C28F5CLL;
      v8 = result + 86400;
      if (!v7)
        v8 = result;
      if (v5 >= 61)
        return v8;
    }
  }
  return result;
}

_QWORD *sub_1D4B44780(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_1E984AFC8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1D4B447C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4B447E8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1D4B44800(uint64_t a1, uint64_t a2)
{
  if (sub_1D4B1F350(a2, (uint64_t)&unk_1E9847038))
    return a1 + 24;
  else
    return 0;
}

void sub_1D4B44840(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1D4B44840(a1, *a2);
    sub_1D4B44840(a1, a2[1]);
    sub_1D4B44888((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1D4B44888(uint64_t a1)
{
  sub_1D4B1F3DC(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_1D4B448C4(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1D4B44904((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1D4B44904(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

_QWORD *sub_1D4B44950(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1D4B29AB0(a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1D4B449A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1D4B449C0(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_1D4B362DC((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_1D4B44A68((uint64_t)a1, a4, (uint64_t)v10);
    sub_1D4B29854(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1D4B44AF8((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_1D4B44A68@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_1D4B1655C(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1D4B44AE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D4B44AF8(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1D4B44AF8(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1D4B44888((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_QWORD *sub_1D4B44B3C(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = sub_1D4B29AB0(result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1D4B44B98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4B44BB4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_1E984AF90;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1D4B44BFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4B44C1C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1D4B44C34(uint64_t a1, uint64_t a2)
{
  if (sub_1D4B1F350(a2, (uint64_t)&unk_1E9847080))
    return a1 + 24;
  else
    return 0;
}

void sub_1D4B44C74(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      sub_1D4B182AC();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)sub_1D4B29450(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[40 * v8];
    v18 = &v12[40 * v11];
    v14 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v16, v14);
    v17 = &v16[v14];
    sub_1D4B44DD8(a1, &v15);
    sub_1D4B44F6C((uint64_t)&v15);
  }
}

void sub_1D4B44DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B44F6C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B44DD8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1D4B44E4C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1D4B44E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 40);
      a3 -= 40;
      *(_BYTE *)(v7 - 32) = *(_BYTE *)(a3 + 8);
      *(_QWORD *)(v7 - 40) = v8;
      v9 = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 32);
      *(_OWORD *)(v7 - 24) = v9;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 40;
      *((_QWORD *)&v15 + 1) -= 40;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_1D4B44EF4((uint64_t)v12);
  return v10;
}

uint64_t sub_1D4B44EF4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1D4B44F28(a1);
  return a1;
}

void sub_1D4B44F28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 39) < 0)
      operator delete(*(void **)(v1 + 16));
    v1 += 40;
  }
}

uint64_t sub_1D4B44F6C(uint64_t a1)
{
  sub_1D4B44FA0(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1D4B44FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 40;
      *(_QWORD *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_1D4B44FF4(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  void *v5;

  a1[2] = a2;
  v3 = a2 + 1;
  if (a1[11])
  {
    v4 = 0;
    do
    {
      v5 = *(void **)(a1[5] + 8 * v4);
      if (v5)
        v5 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_1E9846C20, (const struct __class_type_info *)&unk_1E9846F48, 0);
      v3 = sub_1D4B44FF4(v5, v3);
      ++v4;
    }
    while (v4 < a1[11]);
  }
  a1[3] = v3 - 1;
  return v3;
}

uint64_t sub_1D4B45088(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void **v6;

  *(_QWORD *)a1 = off_1E984AD38;
  v3 = *(_QWORD **)(a1 + 40);
  v2 = *(_QWORD **)(a1 + 48);
  while (v3 != v2)
  {
    if (*v3)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      v2 = *(_QWORD **)(a1 + 48);
    }
    ++v3;
  }
  v6 = (void **)(a1 + 64);
  sub_1D4B36914(&v6);
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    *(_QWORD *)(a1 + 48) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_1D4B4510C(uint64_t a1)
{
  void *v1;

  v1 = (void *)sub_1D4B45088(a1);
  operator delete(v1);
}

uint64_t sub_1D4B45120(_QWORD *a1)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;

  result = a1[2];
  if (result == -1)
  {
    v3 = a1;
    do
    {
      v4 = v3;
      v3 = (_QWORD *)v3[1];
    }
    while (v3);
    sub_1D4B44FF4(v4, 0);
    return a1[2];
  }
  return result;
}

uint64_t sub_1D4B45164(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a1[2] == -1)
  {
    v2 = a1;
    do
    {
      v3 = v2;
      v2 = (_QWORD *)v2[1];
    }
    while (v2);
    sub_1D4B44FF4(v3, 0);
  }
  return a1[3];
}

uint64_t sub_1D4B451A8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_1D4B451B0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

uint64_t sub_1D4B451B8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * a2);
}

uint64_t sub_1D4B451C4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 64) + 24 * a2;
}

uint64_t sub_1D4B451D4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t sub_1D4B451DC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 104);
}

uint64_t sub_1D4B451E4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

void sub_1D4B451EC(_QWORD *a1, const void **a2)
{
  const void *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v3 = *a2;
  *a2 = 0;
  if (v3)
    v4 = __dynamic_cast(v3, (const struct __class_type_info *)&unk_1E9846C20, (const struct __class_type_info *)&unk_1E9846F48, 0);
  else
    v4 = 0;
  v5 = a1[7];
  v6 = (_QWORD *)a1[6];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[5];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_1D4B182AC();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)sub_1D4B182C0((uint64_t)(a1 + 7), v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v4;
    v7 = v14 + 8;
    v17 = (char *)a1[5];
    v16 = (char *)a1[6];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)a1[5];
    }
    a1[5] = v14;
    a1[6] = v7;
    a1[7] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[6] = v7;
  if (v4)
    v4[1] = a1;
  ++a1[11];
}

_QWORD *sub_1D4B45308(_QWORD *a1, __int128 *a2, const void **a3)
{
  const void *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  const void *v10;

  v5 = *a3;
  *a3 = 0;
  v10 = v5;
  sub_1D4B451EC(a1, &v10);
  if (v10)
    (*(void (**)(const void *))(*(_QWORD *)v10 + 8))(v10);
  v6 = a1 + 8;
  v7 = a1[9];
  if (v7 >= a1[10])
  {
    v8 = sub_1D4B35F14(v6, a2);
  }
  else
  {
    sub_1D4B35EB8(v6, a2);
    v8 = v7 + 24;
  }
  a1[9] = v8;
  return a1;
}

void sub_1D4B4538C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1D4B453AC(_QWORD *a1, const void **a2)
{
  const void *v3;
  const void *v5;

  v3 = *a2;
  *a2 = 0;
  v5 = v3;
  sub_1D4B451EC(a1, &v5);
  if (v5)
    (*(void (**)(const void *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void sub_1D4B453FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1D4B4541C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v15;
  unint64_t v16;
  std::string *v17;
  std::string::size_type v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  void *v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  uint64_t v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::logic_error *exception;
  std::string __p;
  uint64_t v42;
  void *v43;
  char v44;
  uint64_t v45;
  void *v46[2];
  unsigned __int8 v47;
  std::string v48;
  std::string v49;
  std::string v50;

  switch(*(_DWORD *)(a1 + 32))
  {
    case 0:
      v4 = "BOOLean";
      goto LABEL_52;
    case 1:
      v4 = "tinyint";
      goto LABEL_52;
    case 2:
      v4 = "smallint";
      goto LABEL_52;
    case 3:
      v4 = "int";
      goto LABEL_52;
    case 4:
      v4 = "bigint";
      goto LABEL_52;
    case 5:
      v4 = "float";
      goto LABEL_52;
    case 6:
      v4 = "double";
      goto LABEL_52;
    case 7:
      v4 = "string";
      goto LABEL_52;
    case 8:
      v4 = "binary";
      goto LABEL_52;
    case 9:
      v4 = "timestamp";
      goto LABEL_52;
    case 0xA:
      v5 = **(_QWORD **)(a1 + 40);
      if (v5)
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v5 + 88))(&v50);
      else
        sub_1D4BCA448(&v50, "void");
      v24 = std::string::insert(&v50, 0, "array<");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      v26 = std::string::append(&__p, ">");
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      a2->__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v28 = (void *)v50.__r_.__value_.__r.__words[0];
      goto LABEL_83;
    case 0xB:
      v6 = **(_QWORD **)(a1 + 40);
      if (v6)
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v6 + 88))(&v48);
      else
        sub_1D4BCA448(&v48, "void");
      v29 = std::string::insert(&v48, 0, "map<");
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      v31 = std::string::append(&v49, ",");
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      v33 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      if (v33)
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v33 + 88))(v46);
      else
        sub_1D4BCA448(v46, "void");
      if ((v47 & 0x80u) == 0)
        v34 = (const std::string::value_type *)v46;
      else
        v34 = (const std::string::value_type *)v46[0];
      if ((v47 & 0x80u) == 0)
        v35 = v47;
      else
        v35 = (std::string::size_type)v46[1];
      v36 = std::string::append(&v50, v34, v35);
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      v38 = std::string::append(&__p, ">");
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      a2->__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((char)v47 < 0)
        operator delete(v46[0]);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      v28 = (void *)v48.__r_.__value_.__r.__words[0];
LABEL_83:
      operator delete(v28);
      return;
    case 0xC:
      sub_1D4BCA448(a2, "struct<");
      if (*(_QWORD *)(a1 + 48) != *(_QWORD *)(a1 + 40))
      {
        v7 = 0;
        v8 = 0;
        do
        {
          if (v8)
            std::string::append(a2, ",");
          v9 = *(_QWORD *)(a1 + 64) + v7;
          v10 = *(char *)(v9 + 23);
          if (v10 >= 0)
            v11 = (const std::string::value_type *)(*(_QWORD *)(a1 + 64) + v7);
          else
            v11 = *(const std::string::value_type **)v9;
          if (v10 >= 0)
            v12 = *(unsigned __int8 *)(v9 + 23);
          else
            v12 = *(_QWORD *)(v9 + 8);
          std::string::append(a2, v11, v12);
          std::string::append(a2, ":");
          (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8 * v8) + 88))(&__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          std::string::append(a2, (const std::string::value_type *)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          ++v8;
          v7 += 24;
        }
        while (v8 < (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3);
      }
      goto LABEL_35;
    case 0xD:
      sub_1D4BCA448(a2, "uniontype<");
      v15 = *(_QWORD *)(a1 + 40);
      if (*(_QWORD *)(a1 + 48) != v15)
      {
        v16 = 0;
        do
        {
          if (v16)
          {
            std::string::append(a2, ",");
            v15 = *(_QWORD *)(a1 + 40);
          }
          (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(v15 + 8 * v16) + 88))(&__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v17 = &__p;
          else
            v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v18 = __p.__r_.__value_.__l.__size_;
          std::string::append(a2, (const std::string::value_type *)v17, v18);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          ++v16;
          v15 = *(_QWORD *)(a1 + 40);
        }
        while (v16 < (*(_QWORD *)(a1 + 48) - v15) >> 3);
      }
LABEL_35:
      std::string::append(a2, ">");
      return;
    case 0xE:
      sub_1D4B177C0((uint64_t)&__p);
      sub_1D4B02240(&__p.__r_.__value_.__r.__words[2], (uint64_t)"decimal(", 8);
      v19 = (_QWORD *)std::ostream::operator<<();
      sub_1D4B02240(v19, (uint64_t)",", 1);
      v20 = (_QWORD *)std::ostream::operator<<();
      sub_1D4B02240(v20, (uint64_t)")", 1);
      std::stringbuf::str();
      goto LABEL_55;
    case 0xF:
      v4 = "date";
LABEL_52:
      sub_1D4BCA448(a2, v4);
      return;
    case 0x10:
      sub_1D4B177C0((uint64_t)&__p);
      sub_1D4B02240(&__p.__r_.__value_.__r.__words[2], (uint64_t)"varchar(", 8);
      v21 = (_QWORD *)std::ostream::operator<<();
      sub_1D4B02240(v21, (uint64_t)")", 1);
      std::stringbuf::str();
      goto LABEL_55;
    case 0x11:
      sub_1D4B177C0((uint64_t)&__p);
      sub_1D4B02240(&__p.__r_.__value_.__r.__words[2], (uint64_t)"char(", 5);
      v22 = (_QWORD *)std::ostream::operator<<();
      sub_1D4B02240(v22, (uint64_t)")", 1);
      std::stringbuf::str();
LABEL_55:
      __p.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
      v23 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words
                                + *(_QWORD *)(__p.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50]
                                                                                                  + 64);
      __p.__r_.__value_.__r.__words[2] = v23;
      v42 = MEMORY[0x1E0DE4FB8] + 16;
      if (v44 < 0)
        operator delete(v43);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1D82646E0](&v45);
      return;
    default:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_1D4B2D198(exception, "Unknown type");
      __cxa_throw(exception, (struct type_info *)&unk_1E9846428, (void (*)(void *))std::logic_error::~logic_error);
  }
}

void sub_1D4B45A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

unint64_t sub_1D4B45B70@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  void *v10;
  unint64_t result;
  _QWORD *v12;
  unint64_t v13;
  char **v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  char **v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  std::logic_error *exception;
  unint64_t v59;

  switch(a1[8])
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 0xF:
      v10 = operator new(0x78uLL);
      result = sub_1D4B487C8(v10, a2, a3);
      goto LABEL_65;
    case 5:
    case 6:
      v10 = operator new(0x78uLL);
      result = sub_1D4B48A60(v10, a2, a3);
      goto LABEL_65;
    case 7:
    case 8:
    case 0x10:
    case 0x11:
      if ((_DWORD)a4)
      {
        v10 = operator new(0x100uLL);
        result = sub_1D4B48E70(v10, a2, a3);
      }
      else
      {
        v10 = operator new(0xC8uLL);
        result = sub_1D4B48FCC(v10, a2, a3);
      }
      goto LABEL_65;
    case 9:
      v10 = operator new(0xA0uLL);
      result = sub_1D4B4A970(v10, a2, a3);
      goto LABEL_65;
    case 0xA:
      v30 = operator new(0x80uLL);
      sub_1D4B49618(v30, a2, a3);
      *a5 = v30;
      result = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 48))(a1, 0);
      if (!result)
        return result;
      v31 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 48))(a1, 0);
      (*(void (**)(unint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v31 + 96))(&v59, v31, a2, a3, a4);
      v32 = v59;
      v59 = 0;
      result = v30[15];
      v30[15] = v32;
      if (!result)
        return result;
      goto LABEL_41;
    case 0xB:
      v33 = operator new(0x88uLL);
      sub_1D4B4995C(v33, a2, a3);
      *a5 = v33;
      if ((*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 48))(a1, 0))
      {
        v34 = (*(uint64_t (**)(_DWORD *, _QWORD))(*(_QWORD *)a1 + 48))(a1, 0);
        (*(void (**)(unint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 96))(&v59, v34, a2, a3, a4);
        v35 = v59;
        v59 = 0;
        v36 = v33[15];
        v33[15] = v35;
        if (v36)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
          v37 = v59;
          v59 = 0;
          if (v37)
            (*(void (**)(unint64_t))(*(_QWORD *)v37 + 8))(v37);
        }
      }
      result = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 48))(a1, 1);
      if (result)
      {
        v38 = (*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)a1 + 48))(a1, 1);
        (*(void (**)(unint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 96))(&v59, v38, a2, a3, a4);
        v39 = v59;
        v59 = 0;
        result = v33[16];
        v33[16] = v39;
        if (result)
        {
LABEL_41:
          (*(void (**)(unint64_t))(*(_QWORD *)result + 8))(result);
          result = v59;
          v59 = 0;
          if (result)
            result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
        }
      }
      break;
    case 0xC:
      v12 = operator new(0x68uLL);
      sub_1D4B49160((uint64_t)v12, a2, a3);
      v13 = 0;
      *a5 = v12;
      v14 = (char **)(v12 + 10);
      while (1)
      {
        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 40))(a1);
        if (v13 >= result)
          break;
        v15 = (*(uint64_t (**)(_DWORD *, unint64_t))(*(_QWORD *)a1 + 48))(a1, v13);
        (*(void (**)(unint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 96))(&v59, v15, a2, a3, a4);
        v16 = v59;
        v59 = 0;
        v18 = (unint64_t *)v12[11];
        v17 = v12[12];
        if ((unint64_t)v18 >= v17)
        {
          v20 = ((char *)v18 - *v14) >> 3;
          if ((unint64_t)(v20 + 1) >> 61)
            sub_1D4B182AC();
          v21 = v17 - (_QWORD)*v14;
          v22 = v21 >> 2;
          if (v21 >> 2 <= (unint64_t)(v20 + 1))
            v22 = v20 + 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
            v23 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          if (v23)
            v24 = (char *)sub_1D4B182C0((uint64_t)(v12 + 12), v23);
          else
            v24 = 0;
          v25 = &v24[8 * v20];
          *(_QWORD *)v25 = v16;
          v19 = v25 + 8;
          v27 = (char *)v12[10];
          v26 = (char *)v12[11];
          if (v26 != v27)
          {
            do
            {
              v28 = *((_QWORD *)v26 - 1);
              v26 -= 8;
              *((_QWORD *)v25 - 1) = v28;
              v25 -= 8;
            }
            while (v26 != v27);
            v26 = *v14;
          }
          v12[10] = v25;
          v12[11] = v19;
          v12[12] = &v24[8 * v23];
          if (v26)
            operator delete(v26);
        }
        else
        {
          *v18 = v16;
          v19 = v18 + 1;
        }
        v12[11] = v19;
        v29 = v59;
        v59 = 0;
        if (v29)
          (*(void (**)(unint64_t))(*(_QWORD *)v29 + 8))(v29);
        ++v13;
      }
      break;
    case 0xD:
      v40 = operator new(0xB8uLL);
      sub_1D4B49D9C(v40, a2, a3);
      v41 = 0;
      *a5 = v40;
      v42 = (char **)(v40 + 20);
      while (1)
      {
        result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 40))(a1);
        if (v41 >= result)
          break;
        v43 = (*(uint64_t (**)(_DWORD *, unint64_t))(*(_QWORD *)a1 + 48))(a1, v41);
        (*(void (**)(unint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(*(_QWORD *)v43 + 96))(&v59, v43, a2, a3, a4);
        v44 = v59;
        v59 = 0;
        v46 = (unint64_t *)v40[21];
        v45 = v40[22];
        if ((unint64_t)v46 >= v45)
        {
          v48 = ((char *)v46 - *v42) >> 3;
          if ((unint64_t)(v48 + 1) >> 61)
            sub_1D4B182AC();
          v49 = v45 - (_QWORD)*v42;
          v50 = v49 >> 2;
          if (v49 >> 2 <= (unint64_t)(v48 + 1))
            v50 = v48 + 1;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
            v51 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v51 = v50;
          if (v51)
            v52 = (char *)sub_1D4B182C0((uint64_t)(v40 + 22), v51);
          else
            v52 = 0;
          v53 = &v52[8 * v48];
          *(_QWORD *)v53 = v44;
          v47 = v53 + 8;
          v55 = (char *)v40[20];
          v54 = (char *)v40[21];
          if (v54 != v55)
          {
            do
            {
              v56 = *((_QWORD *)v54 - 1);
              v54 -= 8;
              *((_QWORD *)v53 - 1) = v56;
              v53 -= 8;
            }
            while (v54 != v55);
            v54 = *v42;
          }
          v40[20] = v53;
          v40[21] = v47;
          v40[22] = &v52[8 * v51];
          if (v54)
            operator delete(v54);
        }
        else
        {
          *v46 = v44;
          v47 = v46 + 1;
        }
        v40[21] = v47;
        v57 = v59;
        v59 = 0;
        if (v57)
          (*(void (**)(unint64_t))(*(_QWORD *)v57 + 8))(v57);
        ++v41;
      }
      break;
    case 0xE:
      if ((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 72))(a1)
        && (unint64_t)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 72))(a1) < 0x13)
      {
        v10 = operator new(0xA8uLL);
        result = sub_1D4B4A270(v10, a2, a3);
      }
      else
      {
        v10 = operator new(0xA8uLL);
        result = sub_1D4B4A528(v10, a2, a3);
      }
LABEL_65:
      *a5 = v10;
      break;
    default:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_1D4B2D198(exception, "not supported yet");
      __cxa_throw(exception, (struct type_info *)&unk_1E9846428, (void (*)(void *))std::logic_error::~logic_error);
  }
  return result;
}

void sub_1D4B4614C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  operator delete(v10);
  _Unwind_Resume(a1);
}

char *sub_1D4B4622C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  int v3;
  char *result;
  char *v8;
  int v9;
  std::runtime_error *exception;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::logic_error *v18;
  char *v19;
  char *v20;

  v3 = *(_DWORD *)(a1 + 96);
  switch(v3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 15:
      result = (char *)operator new(0x78uLL);
      *(_QWORD *)result = off_1E984AD38;
      *((_QWORD *)result + 1) = 0;
      *(_OWORD *)(result + 40) = 0u;
      *(_OWORD *)(result + 56) = 0u;
      *(_OWORD *)(result + 72) = 0u;
      *((_QWORD *)result + 2) = -1;
      *((_QWORD *)result + 3) = -1;
      *((_DWORD *)result + 8) = v3;
      *(_OWORD *)(result + 88) = 0u;
      *(_OWORD *)(result + 104) = 0u;
      goto LABEL_3;
    case 10:
    case 11:
    case 13:
      result = (char *)operator new(0x78uLL);
      v8 = result;
      *(_QWORD *)result = off_1E984AD38;
      *((_QWORD *)result + 1) = 0;
      *(_OWORD *)(result + 40) = 0u;
      *(_OWORD *)(result + 56) = 0u;
      *(_OWORD *)(result + 72) = 0u;
      *((_QWORD *)result + 2) = -1;
      *((_QWORD *)result + 3) = -1;
      *((_DWORD *)result + 8) = v3;
      *(_OWORD *)(result + 88) = 0u;
      *(_OWORD *)(result + 104) = 0u;
      *a3 = result;
      switch(v3)
      {
        case 10:
          if (*(_DWORD *)(a1 + 24) != 1)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            sub_1D4B2D1F0(exception, "Illegal LIST type that doesn't contain one subtype");
LABEL_22:
            __cxa_throw(exception, (struct type_info *)&unk_1E9845FC8, (void (*)(void *))std::runtime_error::~runtime_error);
          }
LABEL_25:
          v17 = 0;
          do
          {
            sub_1D4B4622C(&v20, *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * *(int *)(*(_QWORD *)(a1 + 32) + 4 * v17 + 8) + 8), a2);
            (*(void (**)(char *, char **))(*(_QWORD *)v8 + 112))(v8, &v20);
            result = v20;
            v20 = 0;
            if (result)
              result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
            ++v17;
          }
          while (v17 < *(int *)(a1 + 24));
          return result;
        case 11:
          if (*(_DWORD *)(a1 + 24) != 2)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            sub_1D4B2D1F0(exception, "Illegal MAP type that doesn't contain two subtypes");
            goto LABEL_22;
          }
          goto LABEL_25;
        case 13:
          v9 = *(_DWORD *)(a1 + 24);
          if (!v9)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            sub_1D4B2D1F0(exception, "Illegal UNION type that doesn't contain any subtypes");
            goto LABEL_22;
          }
          break;
        default:
          v9 = *(_DWORD *)(a1 + 24);
          break;
      }
      if (v9 >= 1)
        goto LABEL_25;
      return result;
    case 12:
      result = (char *)operator new(0x78uLL);
      *(_QWORD *)result = off_1E984AD38;
      *((_QWORD *)result + 1) = 0;
      *(_OWORD *)(result + 40) = 0u;
      *(_OWORD *)(result + 56) = 0u;
      *(_OWORD *)(result + 72) = 0u;
      *((_QWORD *)result + 2) = -1;
      *((_QWORD *)result + 3) = -1;
      *((_DWORD *)result + 8) = 12;
      *(_OWORD *)(result + 88) = 0u;
      *(_OWORD *)(result + 104) = 0u;
      *a3 = result;
      if (*(int *)(a1 + 24) >= 1)
      {
        v14 = result;
        v15 = 0;
        do
        {
          v16 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v15 + 8);
          sub_1D4B4622C(&v19, *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * *(int *)(*(_QWORD *)(a1 + 32) + 4 * v15 + 8) + 8), a2);
          (*(void (**)(char *, uint64_t, char **))(*(_QWORD *)v14 + 104))(v14, v16, &v19);
          result = v19;
          v19 = 0;
          if (result)
            result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
          ++v15;
        }
        while (v15 < *(int *)(a1 + 24));
      }
      return result;
    case 14:
      result = (char *)operator new(0x78uLL);
      *(_QWORD *)result = off_1E984AD38;
      *((_QWORD *)result + 1) = 0;
      *(_OWORD *)(result + 40) = 0u;
      *(_OWORD *)(result + 56) = 0u;
      *(_OWORD *)(result + 72) = 0u;
      *((_QWORD *)result + 2) = -1;
      *((_QWORD *)result + 3) = -1;
      *((_DWORD *)result + 8) = 14;
      v12 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)&v13 = v12;
      *((_QWORD *)&v13 + 1) = HIDWORD(v12);
      *(_OWORD *)(result + 104) = v13;
      *((_QWORD *)result + 11) = 0;
      *((_QWORD *)result + 12) = 0;
      goto LABEL_3;
    case 16:
    case 17:
      result = (char *)operator new(0x78uLL);
      v11 = *(unsigned int *)(a1 + 100);
      *(_QWORD *)result = off_1E984AD38;
      *((_QWORD *)result + 1) = 0;
      *(_OWORD *)(result + 40) = 0u;
      *(_OWORD *)(result + 56) = 0u;
      *(_OWORD *)(result + 72) = 0u;
      *((_QWORD *)result + 2) = -1;
      *((_QWORD *)result + 3) = -1;
      *((_DWORD *)result + 8) = v3;
      *((_QWORD *)result + 11) = 0;
      *((_QWORD *)result + 12) = v11;
      *((_QWORD *)result + 13) = 0;
      *((_QWORD *)result + 14) = 0;
LABEL_3:
      *a3 = result;
      return result;
    default:
      v18 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_1D4B2D198(v18, "Unknown type kind");
      __cxa_throw(v18, (struct type_info *)&unk_1E9846428, (void (*)(void *))std::logic_error::~logic_error);
  }
}

void sub_1D4B465A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;
  void *v12;

  __cxa_free_exception(v12);
  *v10 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(a1);
}

unint64_t sub_1D4B46624@<X0>(unint64_t result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  std::logic_error *exception;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  const void *v35;
  const void *v36;

  if (result
    && (v5 = result,
        result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 16))(result),
        ((*(_QWORD *)(*a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> result) & 1) != 0))
  {
    switch((*(unsigned int (**)(unint64_t))(*(_QWORD *)v5 + 32))(v5))
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xFu:
        v6 = operator new(0x78uLL);
        v7 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 32))(v5);
        *v6 = off_1E984AD38;
        v6[1] = 0;
        *(_OWORD *)(v6 + 5) = 0u;
        *(_OWORD *)(v6 + 7) = 0u;
        *(_OWORD *)(v6 + 9) = 0u;
        v6[2] = -1;
        v6[3] = -1;
        *((_DWORD *)v6 + 8) = v7;
        *(_OWORD *)(v6 + 11) = 0u;
        *(_OWORD *)(v6 + 13) = 0u;
        break;
      case 0xAu:
        v6 = operator new(0x78uLL);
        v11 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 32))(v5);
        *v6 = off_1E984AD38;
        v6[1] = 0;
        *(_OWORD *)(v6 + 5) = 0u;
        *(_OWORD *)(v6 + 7) = 0u;
        *(_OWORD *)(v6 + 9) = 0u;
        v6[2] = -1;
        v6[3] = -1;
        *((_DWORD *)v6 + 8) = v11;
        *(_OWORD *)(v6 + 11) = 0u;
        *(_OWORD *)(v6 + 13) = 0u;
        v12 = (*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)v5 + 48))(v5, 0);
        sub_1D4B46624(&v36, v12, a2);
        sub_1D4B451EC(v6, &v36);
        v13 = v36;
        if (!v36)
          break;
        goto LABEL_14;
      case 0xBu:
        v6 = operator new(0x78uLL);
        v14 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 32))(v5);
        *v6 = off_1E984AD38;
        v6[1] = 0;
        *(_OWORD *)(v6 + 5) = 0u;
        *(_OWORD *)(v6 + 7) = 0u;
        *(_OWORD *)(v6 + 9) = 0u;
        v6[2] = -1;
        v6[3] = -1;
        *((_DWORD *)v6 + 8) = v14;
        *(_OWORD *)(v6 + 11) = 0u;
        *(_OWORD *)(v6 + 13) = 0u;
        v15 = (*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)v5 + 48))(v5, 0);
        sub_1D4B46624(&v35, v15, a2);
        sub_1D4B451EC(v6, &v35);
        if (v35)
          (*(void (**)(const void *))(*(_QWORD *)v35 + 8))(v35);
        v16 = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, 1);
        sub_1D4B46624(&v34, v16, a2);
        sub_1D4B451EC(v6, &v34);
        v13 = v34;
        if (v34)
LABEL_14:
          (*(void (**)(const void *))(*(_QWORD *)v13 + 8))(v13);
        break;
      case 0xCu:
        v6 = operator new(0x78uLL);
        v17 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 32))(v5);
        *v6 = off_1E984AD38;
        v6[1] = 0;
        *(_OWORD *)(v6 + 5) = 0u;
        *(_OWORD *)(v6 + 7) = 0u;
        *(_OWORD *)(v6 + 9) = 0u;
        v6[2] = -1;
        v6[3] = -1;
        *((_DWORD *)v6 + 8) = v17;
        *(_OWORD *)(v6 + 11) = 0u;
        *(_OWORD *)(v6 + 13) = 0u;
        if ((*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 40))(v5))
        {
          v18 = 0;
          do
          {
            v19 = (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)v5 + 48))(v5, v18);
            sub_1D4B46624(&v33, v19, a2);
            v20 = v33;
            if (v33)
            {
              v21 = (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)v5 + 56))(v5, v18);
              v32 = v20;
              (*(void (**)(_QWORD *, uint64_t, uint64_t *))(*v6 + 104))(v6, v21, &v32);
              v22 = v32;
              v32 = 0;
              if (v22)
                (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
            }
            ++v18;
          }
          while (v18 < (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 40))(v5));
        }
        break;
      case 0xDu:
        v6 = operator new(0x78uLL);
        v23 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 32))(v5);
        *v6 = off_1E984AD38;
        v6[1] = 0;
        *(_OWORD *)(v6 + 5) = 0u;
        *(_OWORD *)(v6 + 7) = 0u;
        *(_OWORD *)(v6 + 9) = 0u;
        v6[2] = -1;
        v6[3] = -1;
        *((_DWORD *)v6 + 8) = v23;
        *(_OWORD *)(v6 + 11) = 0u;
        *(_OWORD *)(v6 + 13) = 0u;
        if ((*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 40))(v5))
        {
          v24 = 0;
          do
          {
            v25 = (*(uint64_t (**)(unint64_t, unint64_t))(*(_QWORD *)v5 + 48))(v5, v24);
            sub_1D4B46624(&v33, v25, a2);
            if (v33)
            {
              v31 = v33;
              (*(void (**)(_QWORD *, uint64_t *))(*v6 + 112))(v6, &v31);
              v26 = v31;
              v31 = 0;
              if (v26)
                (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
            }
            ++v24;
          }
          while (v24 < (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 40))(v5));
        }
        break;
      case 0xEu:
        v6 = operator new(0x78uLL);
        v27 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 32))(v5);
        v28 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 72))(v5);
        v29 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 80))(v5);
        *v6 = off_1E984AD38;
        v6[1] = 0;
        *(_OWORD *)(v6 + 5) = 0u;
        *(_OWORD *)(v6 + 7) = 0u;
        *(_OWORD *)(v6 + 9) = 0u;
        v6[2] = -1;
        v6[3] = -1;
        *((_DWORD *)v6 + 8) = v27;
        v6[13] = v28;
        v6[14] = v29;
        v6[11] = 0;
        v6[12] = 0;
        break;
      case 0x10u:
      case 0x11u:
        v6 = operator new(0x78uLL);
        v9 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 32))(v5);
        v10 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 64))(v5);
        *v6 = off_1E984AD38;
        v6[1] = 0;
        *(_OWORD *)(v6 + 5) = 0u;
        *(_OWORD *)(v6 + 7) = 0u;
        *(_OWORD *)(v6 + 9) = 0u;
        v6[2] = -1;
        v6[3] = -1;
        *((_DWORD *)v6 + 8) = v9;
        v6[11] = 0;
        v6[12] = v10;
        v6[13] = 0;
        v6[14] = 0;
        break;
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_1D4B2D198(exception, "Unknown type kind");
        __cxa_throw(exception, (struct type_info *)&unk_1E9846428, (void (*)(void *))std::logic_error::~logic_error);
    }
    v8 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 16))(v5);
    result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v5 + 24))(v5);
    v6[2] = v8;
    v6[3] = result;
  }
  else
  {
    v6 = 0;
  }
  *a3 = v6;
  return result;
}

void sub_1D4B46B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void sub_1D4B46C20(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::string::size_type v3;
  uint64_t v4;
  std::logic_error *exception;
  uint64_t v6[3];
  void **v7;

  if (*(char *)(a1 + 23) >= 0)
    v3 = *(unsigned __int8 *)(a1 + 23);
  else
    v3 = *(_QWORD *)(a1 + 8);
  sub_1D4B46CF0(v6, (std::string *)a1, 0, v3);
  if (v6[1] - v6[0] != 32)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid type string.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v4 = *(_QWORD *)(v6[0] + 24);
  *(_QWORD *)(v6[0] + 24) = 0;
  *a2 = v4;
  v7 = (void **)v6;
  sub_1D4B483B4(&v7);
}

void sub_1D4B46CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_1D4B483B4(&a12);
  _Unwind_Resume(a1);
}

void sub_1D4B46CF0(uint64_t *__return_ptr a1@<X8>, std::string *__str@<X0>, std::string::size_type __pos@<X1>, std::string::size_type a4@<X2>)
{
  std::string::size_type v5;
  uint64_t v8;
  std::string::size_type v9;
  std::string *v10;
  unsigned int v11;
  int v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  void *size;
  std::string *v18;
  unsigned int v19;
  std::string::size_type v21;
  std::string *v22;
  int v23;
  std::string::size_type v24;
  int v25;
  int v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  std::string::size_type v38;
  uint64_t v39;
  __int128 v40;
  char *v41;
  char *v42;
  char *v43;
  std::string *v44;
  int v45;
  std::logic_error *v46;
  std::logic_error *exception;
  uint64_t *v48;
  void *__src;
  char v50;
  std::string __dst;
  char *v52;
  void *__p[2];
  uint64_t v54;
  char *v55;
  std::string v56;
  _DWORD v57[2];
  std::string v58;
  char *v59;
  uint64_t *v60;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (__pos < a4)
  {
    v5 = __pos;
    v48 = a1 + 2;
    v8 = MEMORY[0x1E0C80978];
    do
    {
      v9 = v5;
      while (1)
      {
        v10 = (__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? __str
            : (std::string *)__str->__r_.__value_.__r.__words[0];
        v11 = v10->__r_.__value_.__s.__data_[v9];
        if (!((v11 & 0x80000000) != 0 ? __maskrune(v11, 0x500uLL) : *(_DWORD *)(v8 + 4 * v11 + 60) & 0x500))
        {
          v13 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
          v14 = __str->__r_.__value_.__r.__words[0];
          v15 = v13 >= 0 ? __str : (std::string *)__str->__r_.__value_.__r.__words[0];
          if (v15->__r_.__value_.__s.__data_[v9] != 95)
            break;
        }
        if (++v9 >= a4)
        {
          LOBYTE(v13) = *((_BYTE *)&__str->__r_.__value_.__s + 23);
          v14 = __str->__r_.__value_.__r.__words[0];
          break;
        }
      }
      memset(v57, 0, 7);
      if ((v13 & 0x80u) == 0)
        v16 = __str;
      else
        v16 = (std::string *)v14;
      if (v16->__r_.__value_.__s.__data_[v9] == 58)
      {
        std::string::basic_string(&v58, __str, v5, v9 - v5, (std::allocator<char> *)&v56);
        size = (void *)v58.__r_.__value_.__l.__size_;
        __src = (void *)v58.__r_.__value_.__r.__words[0];
        v57[0] = v58.__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v57 + 3) = *(_DWORD *)((char *)&v58.__r_.__value_.__r.__words[2] + 3);
        v50 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
        v5 = v9 + 1;
        v9 = v5;
        if (v5 < a4)
        {
          while (1)
          {
            v18 = (__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? __str
                : (std::string *)__str->__r_.__value_.__r.__words[0];
            v19 = v18->__r_.__value_.__s.__data_[v9];
            if (!((v19 & 0x80000000) != 0 ? __maskrune(v19, 0x100uLL) : *(_DWORD *)(v8 + 4 * v19 + 60) & 0x100))
              break;
            if (a4 == ++v9)
            {
              v9 = a4;
              break;
            }
          }
        }
      }
      else
      {
        __src = 0;
        size = 0;
        v50 = 0;
      }
      v21 = v9 + 1;
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = __str;
      else
        v22 = (std::string *)__str->__r_.__value_.__r.__words[0];
      v23 = v22->__r_.__value_.__s.__data_[v9];
      v24 = v9 + 1;
      if (v23 == 40)
      {
        if (v21 < a4)
        {
          v24 = v9 + 1;
          while (v22->__r_.__value_.__s.__data_[v24] != 41)
          {
            if (a4 == ++v24)
              goto LABEL_96;
          }
        }
        if (v24 == a4)
        {
LABEL_96:
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Invalid type string. Cannot find closing)");
LABEL_97:
          __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
      }
      else if (v23 == 60)
      {
        if (v21 < a4)
        {
          v25 = 1;
          v24 = v9 + 1;
          while (1)
          {
            v26 = v22->__r_.__value_.__s.__data_[v24];
            if (v26 == 60)
            {
              if (!++v25)
                break;
            }
            else if (v26 == 62 && !--v25)
            {
              break;
            }
            if (a4 == ++v24)
              goto LABEL_95;
          }
        }
        if (v24 == a4)
        {
LABEL_95:
          v46 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v46, "Invalid type string. Cannot find closing >");
          __cxa_throw(v46, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
        }
      }
      else if (v9 != a4)
      {
        v24 = v9 + 1;
        if (v23 != 44)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Unrecognized character.");
          goto LABEL_97;
        }
      }
      std::string::basic_string(&v56, __str, v5, v9 - v5, (std::allocator<char> *)&v58);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        sub_1D4B1655C(&__dst, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
      else
        __dst = v56;
      sub_1D4B47B14(&__dst, __str, v21, v24, &v52);
      if (v50 < 0)
      {
        sub_1D4B1655C(__p, __src, (unint64_t)size);
      }
      else
      {
        __p[0] = __src;
        __p[1] = size;
        LODWORD(v54) = v57[0];
        *(_DWORD *)((char *)&v54 + 3) = *(_DWORD *)((char *)v57 + 3);
        HIBYTE(v54) = v50;
      }
      v27 = v52;
      v52 = 0;
      v55 = v27;
      v28 = a1[1];
      v29 = a1[2];
      if (v28 >= v29)
      {
        v33 = (uint64_t)(v28 - *a1) >> 5;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 59)
          sub_1D4B182AC();
        v35 = v29 - *a1;
        if (v35 >> 4 > v34)
          v34 = v35 >> 4;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFE0)
          v36 = 0x7FFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        v60 = v48;
        v37 = (char *)sub_1D4B4850C((uint64_t)v48, v36);
        v38 = (std::string::size_type)&v37[32 * v33];
        v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
        v58.__r_.__value_.__l.__size_ = v38;
        v59 = &v37[32 * v39];
        v40 = *(_OWORD *)__p;
        *(_QWORD *)(v38 + 16) = v54;
        *(_OWORD *)v38 = v40;
        __p[0] = 0;
        __p[1] = 0;
        v41 = v55;
        v54 = 0;
        v55 = 0;
        *(_QWORD *)(v38 + 24) = v41;
        v58.__r_.__value_.__r.__words[2] = v38 + 32;
        sub_1D4B48498(a1, &v58);
        v32 = a1[1];
        sub_1D4B48670((void **)&v58.__r_.__value_.__l.__data_);
      }
      else
      {
        v30 = *(_OWORD *)__p;
        *(_QWORD *)(v28 + 16) = v54;
        *(_OWORD *)v28 = v30;
        __p[0] = 0;
        __p[1] = 0;
        v31 = v55;
        v54 = 0;
        v55 = 0;
        *(_QWORD *)(v28 + 24) = v31;
        v32 = v28 + 32;
        a1[1] = v28 + 32;
      }
      a1[1] = v32;
      v42 = v55;
      v55 = 0;
      if (v42)
        (*(void (**)(char *))(*(_QWORD *)v42 + 8))(v42);
      if (SHIBYTE(v54) < 0)
        operator delete(__p[0]);
      v43 = v52;
      v52 = 0;
      if (v43)
        (*(void (**)(char *))(*(_QWORD *)v43 + 8))(v43);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (v24 < a4
        && ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (v44 = __str)
          : (v44 = (std::string *)__str->__r_.__value_.__r.__words[0]),
            (v45 = v44->__r_.__value_.__s.__data_[v24], v45 == 62) || v45 == 41))
      {
        v5 = v24 + 2;
      }
      else
      {
        v5 = v24;
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v56.__r_.__value_.__l.__data_);
        if (v50 < 0)
LABEL_93:
          operator delete(__src);
      }
      else if (v50 < 0)
      {
        goto LABEL_93;
      }
    }
    while (v5 < a4);
  }
}

void sub_1D4B47220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, int a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;

  __cxa_free_exception(v35);
  if (a15 < 0)
    operator delete(__p);
  sub_1D4B483B4((void ***)&a23);
  _Unwind_Resume(a1);
}

void sub_1D4B4730C(std::string *a1@<X0>, std::string::size_type a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  const void *v7;
  std::logic_error *exception;
  const void *v9;
  uint64_t v10[3];
  void **v11;

  v6 = (char *)operator new(0x78uLL);
  *(_QWORD *)v6 = off_1E984AD38;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *((_QWORD *)v6 + 2) = -1;
  *((_QWORD *)v6 + 3) = -1;
  *((_DWORD *)v6 + 8) = 10;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *a3 = v6;
  sub_1D4B46CF0(v10, a1, a2);
  if (v10[1] - v10[0] != 32)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Array type must contain exactly one sub type.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v7 = *(const void **)(v10[0] + 24);
  *(_QWORD *)(v10[0] + 24) = 0;
  v9 = v7;
  sub_1D4B451EC(v6, &v9);
  if (v9)
    (*(void (**)(const void *))(*(_QWORD *)v9 + 8))(v9);
  v11 = (void **)v10;
  sub_1D4B483B4(&v11);
}

void sub_1D4B47424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  _QWORD *v14;
  uint64_t v15;

  a14 = (void **)&a11;
  sub_1D4B483B4(&a14);
  *v14 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void sub_1D4B47488(std::string *a1@<X0>, std::string::size_type a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  const void *v7;
  const void *v8;
  std::logic_error *exception;
  const void *v10;
  const void *v11;
  uint64_t v12[3];
  void **v13;

  v6 = operator new(0x78uLL);
  *v6 = off_1E984AD38;
  v6[1] = 0;
  *(_OWORD *)(v6 + 5) = 0u;
  *(_OWORD *)(v6 + 7) = 0u;
  *(_OWORD *)(v6 + 9) = 0u;
  v6[2] = -1;
  v6[3] = -1;
  *((_DWORD *)v6 + 8) = 11;
  *(_OWORD *)(v6 + 11) = 0u;
  *(_OWORD *)(v6 + 13) = 0u;
  *a3 = v6;
  sub_1D4B46CF0(v12, a1, a2);
  if (v12[1] - v12[0] != 64)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Map type must contain exactly two sub types.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v7 = *(const void **)(v12[0] + 24);
  *(_QWORD *)(v12[0] + 24) = 0;
  v11 = v7;
  sub_1D4B451EC(v6, &v11);
  if (v11)
    (*(void (**)(const void *))(*(_QWORD *)v11 + 8))(v11);
  v8 = *(const void **)(v12[0] + 56);
  *(_QWORD *)(v12[0] + 56) = 0;
  v10 = v8;
  sub_1D4B451EC(v6, &v10);
  if (v10)
    (*(void (**)(const void *))(*(_QWORD *)v10 + 8))(v10);
  v13 = (void **)v12;
  sub_1D4B483B4(&v13);
}

void sub_1D4B475D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  _QWORD *v14;
  uint64_t v15;

  a14 = (void **)&a11;
  sub_1D4B483B4(&a14);
  *v14 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void sub_1D4B47644(std::string *a1@<X0>, std::string::size_type a2@<X1>, char **a3@<X8>)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  v6 = (char *)operator new(0x78uLL);
  *(_QWORD *)v6 = off_1E984AD38;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *((_QWORD *)v6 + 2) = -1;
  *((_QWORD *)v6 + 3) = -1;
  *((_DWORD *)v6 + 8) = 12;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *a3 = v6;
  sub_1D4B46CF0(&v14, a1, a2);
  v7 = v14;
  if (v15 == v14)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Struct type must contain at least one sub type.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = v7 + v8;
    v11 = *(_QWORD *)(v7 + v8 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v13 = v11;
    (*(void (**)(char *))(*(_QWORD *)v6 + 104))(v6);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    ++v9;
    v7 = v14;
    v8 += 32;
  }
  while (v9 < (v15 - v14) >> 5);
  v16 = (void **)&v14;
  sub_1D4B483B4(&v16);
}

void sub_1D4B47788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  _QWORD *v14;
  uint64_t v15;

  a14 = (void **)&a11;
  sub_1D4B483B4(&a14);
  *v14 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

void sub_1D4B477F0(std::string *a1@<X0>, std::string::size_type a2@<X1>, _QWORD *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  const void *v10;
  const void *v11;
  std::logic_error *exception;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  v6 = (char *)operator new(0x78uLL);
  *(_QWORD *)v6 = off_1E984AD38;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *((_QWORD *)v6 + 2) = -1;
  *((_QWORD *)v6 + 3) = -1;
  *((_DWORD *)v6 + 8) = 13;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *a3 = v6;
  sub_1D4B46CF0(&v14, a1, a2);
  v7 = v14;
  if (v15 == v14)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Union type must contain at least one sub type.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v8 = 0;
  v9 = 24;
  do
  {
    v10 = *(const void **)(v7 + v9);
    *(_QWORD *)(v7 + v9) = 0;
    v13 = v10;
    sub_1D4B451EC(v6, &v13);
    v11 = v13;
    v13 = 0;
    if (v11)
      (*(void (**)(const void *))(*(_QWORD *)v11 + 8))(v11);
    ++v8;
    v7 = v14;
    v9 += 32;
  }
  while (v8 < (v15 - v14) >> 5);
  v16 = (void **)&v14;
  sub_1D4B483B4(&v16);
}

void sub_1D4B47928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  _QWORD *v14;
  uint64_t v15;

  a14 = (void **)&a11;
  sub_1D4B483B4(&a14);
  *v14 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

double sub_1D4B4798C@<D0>(std::string::size_type __pos@<X1>, const std::string *a2@<X0>, std::string::size_type a3@<X2>, _QWORD *a4@<X8>)
{
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type v10;
  int v11;
  void *v12;
  int v13;
  void *v14;
  char *v15;
  double result;
  std::logic_error *exception;
  std::string v18;
  char v19;

  v8 = std::string::find(a2, 44, __pos);
  v9 = v8 + 1;
  if (v8 == -1 || v9 >= a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Decimal type must specify precision and scale.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v10 = v8;
  std::string::basic_string(&v18, a2, __pos, v8 - __pos, (std::allocator<char> *)&v19);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = (void *)v18.__r_.__value_.__r.__words[0];
    v11 = atoi(v18.__r_.__value_.__l.__data_);
    operator delete(v12);
  }
  else
  {
    v11 = atoi((const char *)&v18);
  }
  std::string::basic_string(&v18, a2, v9, ~v10 + a3, (std::allocator<char> *)&v19);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    v14 = (void *)v18.__r_.__value_.__r.__words[0];
    v13 = atoi(v18.__r_.__value_.__l.__data_);
    operator delete(v14);
  }
  else
  {
    v13 = atoi((const char *)&v18);
  }
  v15 = (char *)operator new(0x78uLL);
  *(_QWORD *)v15 = off_1E984AD38;
  *((_QWORD *)v15 + 1) = 0;
  result = 0.0;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *((_QWORD *)v15 + 2) = -1;
  *((_QWORD *)v15 + 3) = -1;
  *((_DWORD *)v15 + 8) = 14;
  *((_QWORD *)v15 + 13) = v11;
  *((_QWORD *)v15 + 14) = v13;
  *((_QWORD *)v15 + 11) = 0;
  *((_QWORD *)v15 + 12) = 0;
  *a4 = v15;
  return result;
}

void sub_1D4B47B00(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1D4B47B14@<D0>(_QWORD *a1@<X0>, std::string *a2@<X1>, std::string::size_type a3@<X2>, std::string::size_type a4@<X3>, char **a5@<X8>)
{
  int v10;
  _QWORD *v11;
  uint64_t v13;
  int *v14;
  int v16;
  int v17;
  char *v23;
  __int128 v24;
  int v26;
  int v27;
  int v29;
  uint64_t v30;
  void *v31;
  int v32;
  void *v33;
  std::logic_error *exception;
  std::string v36;
  char v37;

  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v10 = *((unsigned __int8 *)a1 + 23);
    v11 = a1;
    switch(*((_BYTE *)a1 + 23))
    {
      case 3:
        goto LABEL_3;
      case 5:
        goto LABEL_59;
      case 6:
        goto LABEL_54;
      case 7:
        if (*(_DWORD *)a1 == 1819242338 && *(_DWORD *)((char *)a1 + 3) == 1851876716)
          goto LABEL_48;
        if (*(_DWORD *)a1 == 2037279092 && *(_DWORD *)((char *)a1 + 3) == 1953393017)
          goto LABEL_73;
        if (v10 == 3)
          goto LABEL_3;
        v11 = a1;
        if (v10 == 5)
          goto LABEL_59;
        if (v10 != 6)
          goto LABEL_63;
LABEL_54:
        if (*(_DWORD *)a1 == 1768384866 && *((_WORD *)a1 + 2) == 29806)
          goto LABEL_72;
        v11 = a1;
        if (v10 == 5)
          goto LABEL_59;
        goto LABEL_63;
      case 8:
        if (*a1 == 0x746E696C6C616D73)
          goto LABEL_71;
        if (v10 == 6)
          goto LABEL_54;
        v11 = a1;
        if (v10 == 5)
          goto LABEL_59;
        if (v10 != 3)
          goto LABEL_63;
LABEL_3:
        if (*(_WORD *)a1 != 28265 || *((_BYTE *)a1 + 2) != 116)
          goto LABEL_63;
        goto LABEL_70;
      default:
        goto LABEL_63;
    }
  }
  v13 = a1[1];
  if (v13 != 7)
    goto LABEL_19;
  v14 = (int *)*a1;
  if (*(_DWORD *)*a1 != 1819242338 || *(_DWORD *)(*a1 + 3) != 1851876716)
  {
    v16 = *v14;
    v17 = *(int *)((char *)v14 + 3);
    if (v16 == 2037279092 && v17 == 1953393017)
    {
LABEL_73:
      v23 = (char *)operator new(0x78uLL);
      *(_QWORD *)v23 = off_1E984AD38;
      *((_QWORD *)v23 + 1) = 0;
      v24 = 0uLL;
      *(_OWORD *)(v23 + 40) = 0u;
      *(_OWORD *)(v23 + 56) = 0u;
      *(_OWORD *)(v23 + 72) = 0u;
      *((_QWORD *)v23 + 2) = -1;
      *((_QWORD *)v23 + 3) = -1;
      v29 = 1;
      goto LABEL_76;
    }
    v13 = a1[1];
LABEL_19:
    if (v13 == 8)
    {
      if (*(_QWORD *)*a1 == 0x746E696C6C616D73)
      {
LABEL_71:
        v23 = (char *)operator new(0x78uLL);
        *(_QWORD *)v23 = off_1E984AD38;
        *((_QWORD *)v23 + 1) = 0;
        v24 = 0uLL;
        *(_OWORD *)(v23 + 40) = 0u;
        *(_OWORD *)(v23 + 56) = 0u;
        *(_OWORD *)(v23 + 72) = 0u;
        *((_QWORD *)v23 + 2) = -1;
        *((_QWORD *)v23 + 3) = -1;
        v29 = 2;
        goto LABEL_76;
      }
      v13 = a1[1];
    }
    if (v13 == 3)
    {
      if (*(_WORD *)*a1 == 28265 && *(_BYTE *)(*a1 + 2) == 116)
      {
LABEL_70:
        v23 = (char *)operator new(0x78uLL);
        *(_QWORD *)v23 = off_1E984AD38;
        *((_QWORD *)v23 + 1) = 0;
        v24 = 0uLL;
        *(_OWORD *)(v23 + 40) = 0u;
        *(_OWORD *)(v23 + 56) = 0u;
        *(_OWORD *)(v23 + 72) = 0u;
        *((_QWORD *)v23 + 2) = -1;
        *((_QWORD *)v23 + 3) = -1;
        v29 = 3;
        goto LABEL_76;
      }
      v13 = a1[1];
    }
    if (v13 != 6)
    {
      if (v13 != 5)
        goto LABEL_63;
LABEL_34:
      v11 = (_QWORD *)*a1;
LABEL_59:
      v26 = *(_DWORD *)v11;
      v27 = *((unsigned __int8 *)v11 + 4);
      if (v26 == 1634692198 && v27 == 116)
      {
        v23 = (char *)operator new(0x78uLL);
        *(_QWORD *)v23 = off_1E984AD38;
        *((_QWORD *)v23 + 1) = 0;
        v24 = 0uLL;
        *(_OWORD *)(v23 + 40) = 0u;
        *(_OWORD *)(v23 + 56) = 0u;
        *(_OWORD *)(v23 + 72) = 0u;
        *((_QWORD *)v23 + 2) = -1;
        *((_QWORD *)v23 + 3) = -1;
        v29 = 5;
      }
      else
      {
LABEL_63:
        if (sub_1D4B48324(a1, "double"))
        {
          v23 = (char *)operator new(0x78uLL);
          *(_QWORD *)v23 = off_1E984AD38;
          *((_QWORD *)v23 + 1) = 0;
          v24 = 0uLL;
          *(_OWORD *)(v23 + 40) = 0u;
          *(_OWORD *)(v23 + 56) = 0u;
          *(_OWORD *)(v23 + 72) = 0u;
          *((_QWORD *)v23 + 2) = -1;
          *((_QWORD *)v23 + 3) = -1;
          v29 = 6;
        }
        else if (sub_1D4B48324(a1, "string"))
        {
          v23 = (char *)operator new(0x78uLL);
          *(_QWORD *)v23 = off_1E984AD38;
          *((_QWORD *)v23 + 1) = 0;
          v24 = 0uLL;
          *(_OWORD *)(v23 + 40) = 0u;
          *(_OWORD *)(v23 + 56) = 0u;
          *(_OWORD *)(v23 + 72) = 0u;
          *((_QWORD *)v23 + 2) = -1;
          *((_QWORD *)v23 + 3) = -1;
          v29 = 7;
        }
        else if (sub_1D4B48324(a1, "binary"))
        {
          v23 = (char *)operator new(0x78uLL);
          *(_QWORD *)v23 = off_1E984AD38;
          *((_QWORD *)v23 + 1) = 0;
          v24 = 0uLL;
          *(_OWORD *)(v23 + 40) = 0u;
          *(_OWORD *)(v23 + 56) = 0u;
          *(_OWORD *)(v23 + 72) = 0u;
          *((_QWORD *)v23 + 2) = -1;
          *((_QWORD *)v23 + 3) = -1;
          v29 = 8;
        }
        else if (sub_1D4B48324(a1, "timestamp"))
        {
          v23 = (char *)operator new(0x78uLL);
          *(_QWORD *)v23 = off_1E984AD38;
          *((_QWORD *)v23 + 1) = 0;
          v24 = 0uLL;
          *(_OWORD *)(v23 + 40) = 0u;
          *(_OWORD *)(v23 + 56) = 0u;
          *(_OWORD *)(v23 + 72) = 0u;
          *((_QWORD *)v23 + 2) = -1;
          *((_QWORD *)v23 + 3) = -1;
          v29 = 9;
        }
        else
        {
          if (sub_1D4B48324(a1, "array"))
          {
            sub_1D4B4730C(a2, a3, a5);
            return *(double *)&v24;
          }
          if (sub_1D4B48324(a1, "map"))
          {
            sub_1D4B47488(a2, a3, a5);
            return *(double *)&v24;
          }
          if (sub_1D4B48324(a1, "struct"))
          {
            sub_1D4B47644(a2, a3, a5);
            return *(double *)&v24;
          }
          if (sub_1D4B48324(a1, "uniontype"))
          {
            sub_1D4B477F0(a2, a3, a5);
            return *(double *)&v24;
          }
          if (sub_1D4B48324(a1, "decimal"))
          {
            *(double *)&v24 = sub_1D4B4798C(a3, a2, a4, a5);
            return *(double *)&v24;
          }
          if (!sub_1D4B48324(a1, "date"))
          {
            if (sub_1D4B48324(a1, "varchar"))
            {
              std::string::basic_string(&v36, a2, a3, a4 - a3, (std::allocator<char> *)&v37);
              if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
              {
                v31 = (void *)v36.__r_.__value_.__r.__words[0];
                LODWORD(v30) = atoi(v36.__r_.__value_.__l.__data_);
                operator delete(v31);
              }
              else
              {
                LODWORD(v30) = atoi((const char *)&v36);
              }
              v30 = (int)v30;
              v23 = (char *)operator new(0x78uLL);
              *(_QWORD *)v23 = off_1E984AD38;
              *((_QWORD *)v23 + 1) = 0;
              *(_QWORD *)&v24 = 0;
              *(_OWORD *)(v23 + 40) = 0u;
              *(_OWORD *)(v23 + 56) = 0u;
              *(_OWORD *)(v23 + 72) = 0u;
              *((_QWORD *)v23 + 2) = -1;
              *((_QWORD *)v23 + 3) = -1;
              v32 = 16;
            }
            else
            {
              if (!sub_1D4B48324(a1, "char"))
              {
                exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::operator+<char>();
                std::logic_error::logic_error(exception, &v36);
                __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
              }
              std::string::basic_string(&v36, a2, a3, a4 - a3, (std::allocator<char> *)&v37);
              if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
              {
                v33 = (void *)v36.__r_.__value_.__r.__words[0];
                LODWORD(v30) = atoi(v36.__r_.__value_.__l.__data_);
                operator delete(v33);
              }
              else
              {
                LODWORD(v30) = atoi((const char *)&v36);
              }
              v30 = (int)v30;
              v23 = (char *)operator new(0x78uLL);
              *(_QWORD *)v23 = off_1E984AD38;
              *((_QWORD *)v23 + 1) = 0;
              *(_QWORD *)&v24 = 0;
              *(_OWORD *)(v23 + 40) = 0u;
              *(_OWORD *)(v23 + 56) = 0u;
              *(_OWORD *)(v23 + 72) = 0u;
              *((_QWORD *)v23 + 2) = -1;
              *((_QWORD *)v23 + 3) = -1;
              v32 = 17;
            }
            *((_DWORD *)v23 + 8) = v32;
            *((_QWORD *)v23 + 11) = 0;
            *((_QWORD *)v23 + 12) = v30;
            *((_QWORD *)v23 + 13) = 0;
            *((_QWORD *)v23 + 14) = 0;
            goto LABEL_78;
          }
          v23 = (char *)operator new(0x78uLL);
          *(_QWORD *)v23 = off_1E984AD38;
          *((_QWORD *)v23 + 1) = 0;
          v24 = 0uLL;
          *(_OWORD *)(v23 + 40) = 0u;
          *(_OWORD *)(v23 + 56) = 0u;
          *(_OWORD *)(v23 + 72) = 0u;
          *((_QWORD *)v23 + 2) = -1;
          *((_QWORD *)v23 + 3) = -1;
          v29 = 15;
        }
      }
      goto LABEL_76;
    }
    if (*(_DWORD *)*a1 != 1768384866 || *(_WORD *)(*a1 + 4) != 29806)
    {
      v13 = a1[1];
      goto LABEL_34;
    }
LABEL_72:
    v23 = (char *)operator new(0x78uLL);
    *(_QWORD *)v23 = off_1E984AD38;
    *((_QWORD *)v23 + 1) = 0;
    v24 = 0uLL;
    *(_OWORD *)(v23 + 40) = 0u;
    *(_OWORD *)(v23 + 56) = 0u;
    *(_OWORD *)(v23 + 72) = 0u;
    *((_QWORD *)v23 + 2) = -1;
    *((_QWORD *)v23 + 3) = -1;
    v29 = 4;
LABEL_76:
    *((_DWORD *)v23 + 8) = v29;
    goto LABEL_77;
  }
LABEL_48:
  v23 = (char *)operator new(0x78uLL);
  *(_QWORD *)v23 = off_1E984AD38;
  *((_QWORD *)v23 + 1) = 0;
  v24 = 0uLL;
  *(_OWORD *)(v23 + 40) = 0u;
  *(_OWORD *)(v23 + 56) = 0u;
  *(_OWORD *)(v23 + 72) = 0u;
  *((_QWORD *)v23 + 2) = -1;
  *((_QWORD *)v23 + 3) = -1;
  *((_DWORD *)v23 + 8) = 0;
LABEL_77:
  *(_OWORD *)(v23 + 88) = v24;
  *(_OWORD *)(v23 + 104) = v24;
LABEL_78:
  *a5 = v23;
  return *(double *)&v24;
}

void sub_1D4B482EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

BOOL sub_1D4B48324(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      sub_1D4B48484();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void sub_1D4B483B4(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_1D4B48438((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1D4B48438(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void sub_1D4B48484()
{
  sub_1D4B1F118("basic_string");
}

uint64_t sub_1D4B48498(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1D4B48540((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1D4B4850C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    sub_1D4B18174();
  return operator new(32 * a2);
}

uint64_t sub_1D4B48540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7 - 32;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)v8 = v9;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v10 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(v8 + 24) = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 32;
      v8 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_1D4B485EC((uint64_t)v13);
  return v11;
}

uint64_t sub_1D4B485EC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1D4B48620((uint64_t *)a1);
  return a1;
}

void sub_1D4B48620(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_1D4B48438(v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
}

void **sub_1D4B48670(void **a1)
{
  sub_1D4B486A0(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_1D4B486A0(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 32;
    sub_1D4B48438(v4, i - 32);
  }
}

void sub_1D4B486EC(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) < a2)
  {
    *(_QWORD *)(a1 + 8) = a2;
    sub_1D4B2EF9C(a1 + 24, a2);
  }
}

uint64_t sub_1D4B48708(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1D4B48710(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t sub_1D4B48718()
{
  return 0;
}

uint64_t sub_1D4B48720(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_1E9847F28;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1D4B2EFDC((_QWORD *)(a1 + 24), a3, a2);
  *(_WORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a3;
  memset(*(void **)(a1 + 40), 1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = off_1E9847AA0;
  sub_1D4B2F4E8(a1 + 80, a3, a2);
  return a1;
}

void sub_1D4B487B0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_1D4B2F630(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B487CC(_QWORD *a1)
{
  *a1 = off_1E9847AA0;
  sub_1D4B2F75C((uint64_t)(a1 + 10));
  *a1 = off_1E9847F28;
  sub_1D4B2F630(a1 + 3);
  return a1;
}

void sub_1D4B48810(_QWORD *a1)
{
  *a1 = off_1E9847AA0;
  sub_1D4B2F75C((uint64_t)(a1 + 10));
  *a1 = off_1E9847F28;
  sub_1D4B2F630(a1 + 3);
  operator delete(a1);
}

uint64_t sub_1D4B48854()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_1D4B01C34((uint64_t)v3);
  sub_1D4B02240(v3, (uint64_t)"Long vector <", 13);
  v0 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v0, (uint64_t)" of ", 4);
  v1 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v1, (uint64_t)">", 1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v3[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v5);
}

void sub_1D4B48940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B01D20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D4B48954(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) < a2)
  {
    *(_QWORD *)(a1 + 8) = a2;
    sub_1D4B2EF9C(a1 + 24, a2);
    sub_1D4B2F150(a1 + 80, a2);
  }
}

uint64_t sub_1D4B489A0(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1D4B489A8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) + 8 * *(_QWORD *)(a1 + 112);
}

uint64_t sub_1D4B489B8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_1E9847F28;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1D4B2EFDC((_QWORD *)(a1 + 24), a3, a2);
  *(_WORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a3;
  memset(*(void **)(a1 + 40), 1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = off_1E9847F70;
  sub_1D4B2F2A4((_QWORD *)(a1 + 80), a3, a2);
  return a1;
}

void sub_1D4B48A48(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_1D4B2F630(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B48A64(_QWORD *a1)
{
  *a1 = off_1E9847F70;
  sub_1D4B2F6F8((uint64_t)(a1 + 10));
  *a1 = off_1E9847F28;
  sub_1D4B2F630(a1 + 3);
  return a1;
}

void sub_1D4B48AA8(_QWORD *a1)
{
  *a1 = off_1E9847F70;
  sub_1D4B2F6F8((uint64_t)(a1 + 10));
  *a1 = off_1E9847F28;
  sub_1D4B2F630(a1 + 3);
  operator delete(a1);
}

uint64_t sub_1D4B48AEC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_1D4B01C34((uint64_t)v3);
  sub_1D4B02240(v3, (uint64_t)"Double vector <", 15);
  v0 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v0, (uint64_t)" of ", 4);
  v1 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v1, (uint64_t)">", 1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v3[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v5);
}

void sub_1D4B48BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B01D20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D4B48BEC(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) < a2)
  {
    *(_QWORD *)(a1 + 8) = a2;
    sub_1D4B2EF9C(a1 + 24, a2);
    sub_1D4B2F150(a1 + 80, a2);
  }
}

uint64_t sub_1D4B48C38(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1D4B48C40(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) + 8 * *(_QWORD *)(a1 + 112);
}

_QWORD *sub_1D4B48C50(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = sub_1D4B2EFDC(a1, a2, 0);
  sub_1D4B2F4E8(v4 + 5, a2, 0);
  return a1;
}

void sub_1D4B48C8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D4B2F630(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B48CA4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = (_QWORD *)sub_1D4B48D1C(a1, a2, a3);
  *v6 = off_1E98491D0;
  v6[25] = 0;
  v6[26] = 0;
  sub_1D4B2F4E8(v6 + 27, a3, a2);
  return a1;
}

void sub_1D4B48D00(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_1D4B1F3DC(v2);
  sub_1D4B48E14(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B48D1C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_1E9847F28;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1D4B2EFDC((_QWORD *)(a1 + 24), a3, a2);
  *(_WORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a3;
  memset(*(void **)(a1 + 40), 1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = off_1E9847FE0;
  sub_1D4B2F194((_QWORD *)(a1 + 80), a3, a2);
  sub_1D4B2F4E8(a1 + 120, a3, a2);
  sub_1D4B2EFDC((_QWORD *)(a1 + 160), a3, 0);
  return a1;
}

void sub_1D4B48DDC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1D4B2F75C(v4);
  sub_1D4B2F694(v3);
  *v1 = v5;
  sub_1D4B2F630(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B48E14(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E9847FE0;
  v2 = (uint64_t)(a1 + 10);
  sub_1D4B2F630(a1 + 20);
  sub_1D4B2F75C((uint64_t)(a1 + 15));
  sub_1D4B2F694(v2);
  *a1 = off_1E9847F28;
  sub_1D4B2F630(a1 + 3);
  return a1;
}

_QWORD *sub_1D4B48E74(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E98491D0;
  v2 = (uint64_t)(a1 + 25);
  sub_1D4B2F75C((uint64_t)(a1 + 27));
  sub_1D4B1F3DC(v2);
  return sub_1D4B48E14(a1);
}

void sub_1D4B48EB8(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B48E74(a1);
  operator delete(v1);
}

uint64_t sub_1D4B48ECC()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_1D4B01C34((uint64_t)v3);
  sub_1D4B02240(v3, (uint64_t)"Encoded string vector <", 23);
  v0 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v0, (uint64_t)" of ", 4);
  v1 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v1, (uint64_t)">", 1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v3[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v5);
}

void sub_1D4B48FB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B01D20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D4B48FD4(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B48E14(a1);
  operator delete(v1);
}

uint64_t sub_1D4B48FE8()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_1D4B01C34((uint64_t)v3);
  sub_1D4B02240(v3, (uint64_t)"Byte vector <", 13);
  v0 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v0, (uint64_t)" of ", 4);
  v1 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v1, (uint64_t)">", 1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v3[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v5);
}

void sub_1D4B490D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B01D20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D4B490E8(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) < a2)
  {
    *(_QWORD *)(a1 + 8) = a2;
    sub_1D4B2EF9C(a1 + 24, a2);
    sub_1D4B2F150(a1 + 80, a2);
    sub_1D4B2F150(a1 + 120, a2);
  }
}

uint64_t sub_1D4B49140(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1D4B49148(_QWORD *a1)
{
  return a1[7] + 8 * (a1[19] + a1[14]);
}

uint64_t sub_1D4B49160(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_1E9847F28;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1D4B2EFDC((_QWORD *)(a1 + 24), a3, a2);
  *(_WORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a3;
  memset(*(void **)(a1 + 40), 1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = off_1E9848088;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  return a1;
}

_QWORD *sub_1D4B491D0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;

  *a1 = off_1E9848088;
  v4 = a1 + 10;
  v2 = (_QWORD *)a1[10];
  v3 = (_QWORD *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      goto LABEL_8;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    v6 = v2[v5];
    if (v6)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v6 + 8))(v2[v5]);
      v2 = (_QWORD *)a1[10];
      v3 = (_QWORD *)a1[11];
    }
    ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[11] = v2;
    operator delete(v2);
  }
LABEL_8:
  *a1 = off_1E9847F28;
  sub_1D4B2F630(a1 + 3);
  return a1;
}

void sub_1D4B49268(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B491D0(a1);
  operator delete(v1);
}

uint64_t sub_1D4B4927C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t i;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  void *__p[2];
  unsigned __int8 v10;
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  sub_1D4B01C34((uint64_t)v11);
  sub_1D4B02240(v11, (uint64_t)"Struct vector <", 15);
  v2 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v2, (uint64_t)" of ", 4);
  v3 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v3, (uint64_t)"; ", 2);
  for (i = *(_QWORD *)(a1 + 80); i != *(_QWORD *)(a1 + 88); i += 8)
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)i + 16))(__p);
    if ((v10 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v10 & 0x80u) == 0)
      v6 = v10;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_1D4B02240(v11, (uint64_t)v5, v6);
    sub_1D4B02240(v7, (uint64_t)"; ", 2);
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  sub_1D4B02240(v11, (uint64_t)">", 1);
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v11[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v13);
}

void sub_1D4B493FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1D4B01D20((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1D4B4942C(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) < a2)
  {
    *(_QWORD *)(a1 + 8) = a2;
    sub_1D4B2EF9C(a1 + 24, a2);
  }
}

uint64_t sub_1D4B49448(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 80);
  if (*(_QWORD *)(result + 88) != v2)
  {
    v3 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v3) + 32))(*(_QWORD *)(v2 + 8 * v3));
      ++v3;
      v2 = v1[10];
    }
    while (v3 < (v1[11] - v2) >> 3);
  }
  v1[2] = 0;
  return result;
}

uint64_t sub_1D4B4949C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  unsigned int v5;

  v1 = a1[7];
  v2 = a1[10];
  if (a1[11] != v2)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      v1 += (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v4) + 40))(*(_QWORD *)(v2 + 8 * v4));
      v4 = v5;
      v2 = a1[10];
      ++v5;
    }
    while (v4 < (a1[11] - v2) >> 3);
  }
  return v1;
}

uint64_t sub_1D4B49508(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  unsigned int v4;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 88) == v1)
    return 0;
  v3 = 0;
  v4 = 1;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 48))(*(_QWORD *)(v1 + 8 * v3));
    if ((_DWORD)result)
      break;
    v3 = v4;
    v1 = *(_QWORD *)(a1 + 80);
    ++v4;
  }
  while (v3 < (*(_QWORD *)(a1 + 88) - v1) >> 3);
  return result;
}

uint64_t sub_1D4B4956C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_1E9847F28;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1D4B2EFDC((_QWORD *)(a1 + 24), a3, a2);
  *(_WORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a3;
  memset(*(void **)(a1 + 40), 1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = off_1E9847A58;
  sub_1D4B2F4E8(a1 + 80, a3, a2 + 1);
  *(_QWORD *)(a1 + 120) = 0;
  return a1;
}

void sub_1D4B49600(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_1D4B2F630(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B4961C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E9847A58;
  v2 = a1[15];
  a1[15] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1D4B2F75C((uint64_t)(a1 + 10));
  *a1 = off_1E9847F28;
  sub_1D4B2F630(a1 + 3);
  return a1;
}

void sub_1D4B49680(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B4961C(a1);
  operator delete(v1);
}

uint64_t sub_1D4B49694(uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *__p[2];
  unsigned __int8 v10;
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  sub_1D4B01C34((uint64_t)v11);
  v2 = sub_1D4B02240(v11, (uint64_t)"List vector <", 13);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 120) + 16))(__p);
  if ((v10 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v4 = v10;
  else
    v4 = (uint64_t)__p[1];
  v5 = sub_1D4B02240(v2, (uint64_t)v3, v4);
  sub_1D4B02240(v5, (uint64_t)" with ", 6);
  v6 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v6, (uint64_t)" of ", 4);
  v7 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v7, (uint64_t)">", 1);
  if ((char)v10 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v11[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v13);
}

void sub_1D4B497E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1D4B01D20((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1D4B49814(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) < a2)
  {
    *(_QWORD *)(a1 + 8) = a2;
    sub_1D4B2EF9C(a1 + 24, a2);
    sub_1D4B2F150(a1 + 80, a2 + 1);
  }
}

uint64_t sub_1D4B49860(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = 0;
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 32))(*(_QWORD *)(a1 + 120));
}

uint64_t sub_1D4B49874(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56) + 8 * *(_QWORD *)(a1 + 112);
  return v1 + (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 40))(*(_QWORD *)(a1 + 120));
}

uint64_t sub_1D4B498A8()
{
  return 1;
}

uint64_t sub_1D4B498B0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_1E9847F28;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1D4B2EFDC((_QWORD *)(a1 + 24), a3, a2);
  *(_WORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a3;
  memset(*(void **)(a1 + 40), 1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = off_1E9847890;
  sub_1D4B2F4E8(a1 + 80, a3, a2 + 1);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  return a1;
}

void sub_1D4B49944(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_1D4B2F630(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B49960(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_1E9847890;
  v2 = a1[16];
  a1[16] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[15];
  a1[15] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1D4B2F75C((uint64_t)(a1 + 10));
  *a1 = off_1E9847F28;
  sub_1D4B2F630(a1 + 3);
  return a1;
}

void sub_1D4B499DC(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B49960(a1);
  operator delete(v1);
}

uint64_t sub_1D4B499F0(uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  unsigned __int8 v16;
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  sub_1D4B01C34((uint64_t)v17);
  v2 = sub_1D4B02240(v17, (uint64_t)"Map vector <", 12);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 120) + 16))(v15);
  if ((v16 & 0x80u) == 0)
    v3 = v15;
  else
    v3 = (void **)v15[0];
  if ((v16 & 0x80u) == 0)
    v4 = v16;
  else
    v4 = (uint64_t)v15[1];
  v5 = sub_1D4B02240(v2, (uint64_t)v3, v4);
  v6 = sub_1D4B02240(v5, (uint64_t)", ", 2);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 128) + 16))(__p);
  if ((v14 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v8 = v14;
  else
    v8 = (uint64_t)__p[1];
  v9 = sub_1D4B02240(v6, (uint64_t)v7, v8);
  sub_1D4B02240(v9, (uint64_t)" with ", 6);
  v10 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v10, (uint64_t)" of ", 4);
  v11 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v11, (uint64_t)">", 1);
  if ((char)v14 < 0)
    operator delete(__p[0]);
  if ((char)v16 < 0)
    operator delete(v15[0]);
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v19);
}

void sub_1D4B49B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  sub_1D4B01D20((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_1D4B49BE8(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) < a2)
  {
    *(_QWORD *)(a1 + 8) = a2;
    sub_1D4B2EF9C(a1 + 24, a2);
    sub_1D4B2F150(a1 + 80, a2 + 1);
  }
}

uint64_t sub_1D4B49C34(uint64_t a1)
{
  uint64_t result;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 32))(*(_QWORD *)(a1 + 120));
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 32))(*(_QWORD *)(a1 + 128));
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_1D4B49C74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 56) + 8 * *(_QWORD *)(a1 + 112);
  v3 = v2 + (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 40))(*(_QWORD *)(a1 + 120));
  return v3 + (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 128) + 40))(*(_QWORD *)(a1 + 128));
}

uint64_t sub_1D4B49CC0()
{
  return 1;
}

uint64_t sub_1D4B49CC8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_1E9847F28;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1D4B2EFDC((_QWORD *)(a1 + 24), a3, a2);
  *(_WORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a3;
  memset(*(void **)(a1 + 40), 1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = off_1E9847EE0;
  sub_1D4B2F560((_QWORD *)(a1 + 80), a3, a2);
  sub_1D4B2F55C((_QWORD *)(a1 + 120), a3, a2);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  return a1;
}

void sub_1D4B49D74(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1D4B2F824(v3);
  *v1 = v4;
  sub_1D4B2F630(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B49DA0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;

  *a1 = off_1E9847EE0;
  v4 = a1 + 20;
  v2 = (_QWORD *)a1[20];
  v3 = (_QWORD *)v4[1];
  if (v3 == v2)
  {
    v2 = v3;
    if (!v3)
      goto LABEL_8;
    goto LABEL_7;
  }
  v5 = 0;
  do
  {
    v6 = v2[v5];
    if (v6)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v6 + 8))(v2[v5]);
      v2 = (_QWORD *)a1[20];
      v3 = (_QWORD *)a1[21];
    }
    ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    a1[21] = v2;
    operator delete(v2);
  }
LABEL_8:
  sub_1D4B2F7C0((uint64_t)(a1 + 15));
  sub_1D4B2F824((uint64_t)(a1 + 10));
  *a1 = off_1E9847F28;
  sub_1D4B2F630(a1 + 3);
  return a1;
}

void sub_1D4B49E48(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B49DA0(a1);
  operator delete(v1);
}

uint64_t sub_1D4B49E5C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *__p[2];
  unsigned __int8 v10;
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  sub_1D4B01C34((uint64_t)v11);
  sub_1D4B02240(v11, (uint64_t)"Union vector <", 14);
  v2 = *(_QWORD *)(a1 + 160);
  if (*(_QWORD *)(a1 + 168) != v2)
  {
    v3 = 0;
    do
    {
      if (v3)
      {
        sub_1D4B02240(v11, (uint64_t)", ", 2);
        v2 = *(_QWORD *)(a1 + 160);
      }
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(v2 + 8 * v3) + 16))(__p);
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      sub_1D4B02240(v11, (uint64_t)v4, v5);
      if ((char)v10 < 0)
        operator delete(__p[0]);
      ++v3;
      v2 = *(_QWORD *)(a1 + 160);
    }
    while (v3 < (*(_QWORD *)(a1 + 168) - v2) >> 3);
  }
  sub_1D4B02240(v11, (uint64_t)"; with ", 7);
  v6 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v6, (uint64_t)" of ", 4);
  v7 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v7, (uint64_t)">", 1);
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v11[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v13);
}

void sub_1D4B49FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1D4B01D20((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1D4B4A024(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) < a2)
  {
    *(_QWORD *)(a1 + 8) = a2;
    sub_1D4B2EF9C(a1 + 24, a2);
    sub_1D4B2EF9C(a1 + 80, a2);
    sub_1D4B2F150(a1 + 120, a2);
  }
}

uint64_t sub_1D4B4A07C(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 160);
  if (*(_QWORD *)(result + 168) != v2)
  {
    v3 = 0;
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 8 * v3) + 32))(*(_QWORD *)(v2 + 8 * v3));
      ++v3;
      v2 = v1[20];
    }
    while (v3 < (v1[21] - v2) >> 3);
  }
  v1[2] = 0;
  return result;
}

uint64_t sub_1D4B4A0D0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;

  v1 = a1[20];
  v2 = a1[14] + a1[7] + 8 * a1[19];
  if (a1[21] != v1)
  {
    v4 = 0;
    do
    {
      v2 += (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v4) + 40))(*(_QWORD *)(v1 + 8 * v4));
      ++v4;
      v1 = a1[20];
    }
    while (v4 < (a1[21] - v1) >> 3);
  }
  return v2;
}

uint64_t sub_1D4B4A144(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 160);
  if (*(_QWORD *)(a1 + 168) == v1)
    return 0;
  v3 = 0;
  do
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 48))(*(_QWORD *)(v1 + 8 * v3));
    if ((_DWORD)result)
      break;
    ++v3;
    v1 = *(_QWORD *)(a1 + 160);
  }
  while (v3 < (*(_QWORD *)(a1 + 168) - v1) >> 3);
  return result;
}

uint64_t sub_1D4B4A1A0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_1E9847F28;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1D4B2EFDC((_QWORD *)(a1 + 24), a3, a2);
  *(_WORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a3;
  memset(*(void **)(a1 + 40), 1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = off_1E9848850;
  *(_QWORD *)(a1 + 80) = 0;
  sub_1D4B2F4E8(a1 + 88, a3, a2);
  sub_1D4B2F4E8(a1 + 128, a3, a2);
  return a1;
}

void sub_1D4B4A248(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1D4B2F75C(v3);
  *v1 = v4;
  sub_1D4B2F630(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B4A274(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E9848850;
  v2 = (uint64_t)(a1 + 11);
  sub_1D4B2F75C((uint64_t)(a1 + 16));
  sub_1D4B2F75C(v2);
  *a1 = off_1E9847F28;
  sub_1D4B2F630(a1 + 3);
  return a1;
}

void sub_1D4B4A2CC(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B4A274(a1);
  operator delete(v1);
}

uint64_t sub_1D4B4A2E0()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_1D4B01C34((uint64_t)v3);
  sub_1D4B02240(v3, (uint64_t)"Decimal64 vector  with ", 23);
  v0 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v0, (uint64_t)" of ", 4);
  v1 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v1, (uint64_t)">", 1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v3[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v5);
}

void sub_1D4B4A3CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B01D20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D4B4A3E0(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) < a2)
  {
    *(_QWORD *)(a1 + 8) = a2;
    sub_1D4B2EF9C(a1 + 24, a2);
    sub_1D4B2F150(a1 + 88, a2);
    sub_1D4B2F150(a1 + 128, a2);
  }
}

uint64_t sub_1D4B4A438(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1D4B4A440(_QWORD *a1)
{
  return a1[7] + 8 * (a1[20] + a1[15]);
}

uint64_t sub_1D4B4A458(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_1E9847F28;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1D4B2EFDC((_QWORD *)(a1 + 24), a3, a2);
  *(_WORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a3;
  memset(*(void **)(a1 + 40), 1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = off_1E9848A00;
  *(_QWORD *)(a1 + 80) = 0;
  sub_1D4B2F374((_QWORD *)(a1 + 88), a3, a2);
  sub_1D4B2F4E8(a1 + 128, a3, a2);
  return a1;
}

void sub_1D4B4A500(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1D4B2F3C4(v3);
  *v1 = v4;
  sub_1D4B2F630(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B4A52C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E9848A00;
  v2 = (uint64_t)(a1 + 11);
  sub_1D4B2F75C((uint64_t)(a1 + 16));
  sub_1D4B2F3C4(v2);
  *a1 = off_1E9847F28;
  sub_1D4B2F630(a1 + 3);
  return a1;
}

void sub_1D4B4A584(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B4A52C(a1);
  operator delete(v1);
}

uint64_t sub_1D4B4A598()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_1D4B01C34((uint64_t)v3);
  sub_1D4B02240(v3, (uint64_t)"Decimal128 vector  with ", 24);
  v0 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v0, (uint64_t)" of ", 4);
  v1 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v1, (uint64_t)">", 1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v3[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v5);
}

void sub_1D4B4A684(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B01D20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D4B4A698(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) < a2)
  {
    *(_QWORD *)(a1 + 8) = a2;
    sub_1D4B2EF9C(a1 + 24, a2);
    sub_1D4B2F324(a1 + 88, a2);
    sub_1D4B2F150(a1 + 128, a2);
  }
}

uint64_t sub_1D4B4A6F0(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1D4B4A6F8(_QWORD *a1)
{
  return a1[7] + 16 * a1[15] + 8 * a1[20];
}

__n128 sub_1D4B4A710(__n128 *a1, __n128 *a2, unsigned __int32 a3)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u32[0] = a3;
  return result;
}

uint64_t sub_1D4B4A720(uint64_t a1, std::string *__str)
{
  std::string::size_type v4;
  std::string::size_type size;
  void *v6;
  int64_t v7;
  std::string *v8;
  _BYTE *v9;
  std::string *v10;
  _BYTE *v11;
  std::string::size_type v12;
  std::string *v14;
  __int128 v15;
  std::string __dst;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  LODWORD(v4) = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v6 = (void *)__str->__r_.__value_.__r.__words[0];
  size = __str->__r_.__value_.__l.__size_;
  if ((v4 & 0x80u) == 0)
    v7 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    v7 = __str->__r_.__value_.__l.__size_;
  if ((v4 & 0x80u) == 0)
    v8 = __str;
  else
    v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
  if (v7 >= 1)
  {
    v9 = (char *)v8 + v7;
    v10 = v8;
    do
    {
      v11 = memchr(v10, 46, v7);
      if (!v11)
        break;
      if (*v11 == 46)
      {
        if (v11 == v9)
          break;
        v12 = v11 - (_BYTE *)v8;
        if (v12 == -1)
          break;
        if ((v4 & 0x80) != 0)
        {
          sub_1D4B1655C(&__dst, v6, size);
          if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            LODWORD(v4) = HIBYTE(__str->__r_.__value_.__r.__words[2]);
          else
            v4 = __str->__r_.__value_.__l.__size_;
        }
        else
        {
          __dst = *__str;
        }
        *(_DWORD *)(a1 + 16) = v4 + ~(_DWORD)v12;
        v14 = std::string::replace(&__dst, v12, 1uLL, "");
        sub_1D4B2D460((int)&v15, v14);
        *(_OWORD *)a1 = v15;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        return a1;
      }
      v10 = (std::string *)(v11 + 1);
      v7 = v9 - (_BYTE *)v10;
    }
    while (v9 - (_BYTE *)v10 >= 1);
  }
  sub_1D4B2D460((int)&__dst, __str);
  *(_OWORD *)a1 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  *(_DWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_1D4B4A870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4B4A890(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_1D4B4A89C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_1D4B2DD4C((unint64_t *)a1, *(_DWORD *)(a1 + 16), a2);
}

uint64_t sub_1D4B4A8A4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_1E9847F28;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1D4B2EFDC((_QWORD *)(a1 + 24), a3, a2);
  *(_WORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a3;
  memset(*(void **)(a1 + 40), 1, *(_QWORD *)(a1 + 8));
  *(_QWORD *)a1 = off_1E98488D8;
  sub_1D4B2F4E8(a1 + 80, a3, a2);
  sub_1D4B2F4E8(a1 + 120, a3, a2);
  return a1;
}

void sub_1D4B4A948(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1D4B2F75C(v3);
  *v1 = v4;
  sub_1D4B2F630(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B4A974(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E98488D8;
  v2 = (uint64_t)(a1 + 10);
  sub_1D4B2F75C((uint64_t)(a1 + 15));
  sub_1D4B2F75C(v2);
  *a1 = off_1E9847F28;
  sub_1D4B2F630(a1 + 3);
  return a1;
}

void sub_1D4B4A9CC(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_1D4B4A974(a1);
  operator delete(v1);
}

uint64_t sub_1D4B4A9E0()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_1D4B01C34((uint64_t)v3);
  sub_1D4B02240(v3, (uint64_t)"Timestamp vector <", 18);
  v0 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v0, (uint64_t)" of ", 4);
  v1 = (_QWORD *)std::ostream::operator<<();
  sub_1D4B02240(v1, (uint64_t)">", 1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v3[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1D82646E0](&v5);
}

void sub_1D4B4AACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1D4B01D20((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1D4B4AAE0(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) < a2)
  {
    *(_QWORD *)(a1 + 8) = a2;
    sub_1D4B2EF9C(a1 + 24, a2);
    sub_1D4B2F150(a1 + 80, a2);
    sub_1D4B2F150(a1 + 120, a2);
  }
}

uint64_t sub_1D4B4AB38(uint64_t result)
{
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1D4B4AB40(_QWORD *a1)
{
  return a1[7] + 8 * (a1[19] + a1[14]);
}

_QWORD *sub_1D4B4AB58(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E9847838;
  v2 = operator new(0x80uLL);
  sub_1D4B4C614((uint64_t)v2);
  a1[1] = v2;
  return a1;
}

void sub_1D4B4AB98(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1D4B4ABB0(_QWORD *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  *a1 = off_1E9847838;
  v4 = operator new(0x80uLL);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)v4 = *(_OWORD *)v5;
  *((_OWORD *)v4 + 1) = v6;
  v8 = *(_OWORD *)(v5 + 48);
  v7 = *(_OWORD *)(v5 + 64);
  v9 = *(_OWORD *)(v5 + 32);
  *((_BYTE *)v4 + 80) = *(_BYTE *)(v5 + 80);
  *((_OWORD *)v4 + 3) = v8;
  *((_OWORD *)v4 + 4) = v7;
  *((_OWORD *)v4 + 2) = v9;
  sub_1D4B4C6C8((uint64_t *)v4 + 11, v5 + 88);
  v10 = *(_QWORD *)(v5 + 112);
  *((_DWORD *)v4 + 30) = *(_DWORD *)(v5 + 120);
  *((_QWORD *)v4 + 14) = v10;
  a1[1] = v4;
  return a1;
}

void sub_1D4B4AC38(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1D4B4AC4C(_QWORD ***a1, _QWORD **a2)
{
  _QWORD **v2;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_1D4B28BAC((uint64_t)(v2 + 11), v2[12]);
    operator delete(v2);
  }
}

uint64_t sub_1D4B4AC8C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E9847838;
  sub_1D4B4AC4C((_QWORD ***)(a1 + 8), 0);
  return a1;
}

void sub_1D4B4ACC0(_QWORD ***a1)
{
  *a1 = (_QWORD **)off_1E9847838;
  sub_1D4B4AC4C(a1 + 1, 0);
  operator delete(a1);
}

BOOL sub_1D4B4ACF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  _BOOL8 result;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = sub_1D4B29FE8();
  result = 1;
  if (*(_DWORD *)(v1 + 64) == *(_DWORD *)v2)
    return *(_DWORD *)(v1 + 68) != *((_DWORD *)v2 + 1);
  return result;
}

uint64_t sub_1D4B4AD40(uint64_t result, uint64_t a2)
{
  **(_QWORD **)(result + 8) = a2;
  return result;
}

uint64_t sub_1D4B4AD4C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(result + 8) + 8) = a2;
  return result;
}

uint64_t sub_1D4B4AD58(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
}

uint64_t sub_1D4B4AD64(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(result + 8) + 16) = a2;
  return result;
}

uint64_t sub_1D4B4AD70(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
}

uint64_t sub_1D4B4AD7C(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)(v2 + 24) = a2;
  *(_BYTE *)(v2 + 80) = a2 != 0;
  return result;
}

uint64_t sub_1D4B4AD94(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
}

uint64_t sub_1D4B4ADA0(uint64_t result, double a2)
{
  *(double *)(*(_QWORD *)(result + 8) + 72) = a2;
  return result;
}

double sub_1D4B4ADAC(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 8) + 72);
}

uint64_t sub_1D4B4ADB8(uint64_t result, _DWORD *a2)
{
  std::logic_error *exception;

  if (*a2 || (a2[1] - 11) > 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported file version specified.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  *(_QWORD *)(*(_QWORD *)(result + 8) + 64) = *(_QWORD *)a2;
  return result;
}

void sub_1D4B4AE24(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B4AE38(uint64_t result, int a2)
{
  *(_DWORD *)(*(_QWORD *)(result + 8) + 32) = a2;
  return result;
}

uint64_t sub_1D4B4AE44(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 32);
}

uint64_t sub_1D4B4AE50(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 36);
}

BOOL sub_1D4B4AE5C(uint64_t a1)
{
  return *(_DWORD *)(*(_QWORD *)(a1 + 8) + 36) == 0;
}

uint64_t sub_1D4B4AE70(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t sub_1D4B4AE7C(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 80);
}

BOOL sub_1D4B4AE88(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 8) + 72) > 0.0;
}

BOOL sub_1D4B4AE9C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)(v2 + 96);
  v3 = (_QWORD *)(v2 + 96);
  v4 = v5;
  if (!v5)
    goto LABEL_12;
  v6 = v3;
  do
  {
    v7 = v4[4];
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = v4;
    else
      v9 = v4 + 1;
    if (v8)
      v6 = v4;
    v4 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 == v3 || v6[4] > a2)
LABEL_12:
    v6 = v3;
  return v6 != v3;
}

double sub_1D4B4AEEC(uint64_t a1)
{
  return *(double *)(*(_QWORD *)(a1 + 8) + 112);
}

uint64_t sub_1D4B4AEF8(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 120);
}

uint64_t sub_1D4B4AF04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;

  *(_QWORD *)a1 = off_1E9847528;
  *(_OWORD *)(a1 + 8) = 0u;
  v6 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = a3;
  v7 = a1 + 48;
  sub_1D4B4ABB0((_QWORD *)(a1 + 48), a4);
  *(_QWORD *)(a1 + 64) = a2;
  sub_1D4B12644(a1 + 104);
  sub_1D4B13B68(a1 + 272);
  sub_1D4B0E238(a1 + 368);
  sub_1D4B0F754(a1 + 464);
  sub_1D4B1F6C8(v7, *(_QWORD *)(a1 + 40), &v20);
  v8 = v20;
  v20 = 0;
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v20;
    v20 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  sub_1D4B206F8(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 32), v7, &v20);
  v11 = v20;
  v20 = 0;
  v12 = *v6;
  *v6 = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = v20;
    v20 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  sub_1D4B2BF4C(*(_DWORD *)(*(_QWORD *)(a1 + 56) + 32), *(_QWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(a1 + 56) + 36), *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40), &v20);
  v14 = v20;
  v20 = 0;
  v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  if (v15)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v16 = v20;
    v20 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  v17 = operator new(0x20uLL);
  sub_1D4B026C4(v17, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40), *(_QWORD *)(a1 + 40), 0x400uLL, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8));
  v18 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v17;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  sub_1D4B4B1D0(a1);
  return a1;
}

void sub_1D4B4B0E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  uint64_t *v7;
  void *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = v6;
  operator delete(v8);
  sub_1D4B0F794(v5);
  sub_1D4B0E388(v4);
  sub_1D4B13D24(v3);
  sub_1D4B1299C(v2);
  *(_QWORD *)(v1 + 48) = off_1E9847838;
  sub_1D4B4AC4C((_QWORD ***)(v1 + 56), 0);
  v10 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *v7;
  *v7 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  _Unwind_Resume(a1);
}

void sub_1D4B4B1D0(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  __n128 __p;
  char v18;

  v2 = atomic_load((unsigned __int8 *)&qword_1EFEC6B00);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EFEC6B00))
  {
    qword_1EFEC6B30 = strlen((const char *)qword_1EFEC5E98);
    __cxa_guard_release(&qword_1EFEC6B00);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), qword_1EFEC5E98, qword_1EFEC6B30);
  v3 = *(_QWORD *)(a1 + 96) + qword_1EFEC6B30;
  *(_QWORD *)(a1 + 96) = v3;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = v3;
  v4 = *(_QWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 256) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 24);
  *(_DWORD *)(a1 + 120) |= 0x3Eu;
  *(_DWORD *)(a1 + 260) = 1;
  v16 = 0;
  sub_1D4B4C078(a1, v4, a1 + 104, &v16);
  v5 = *(_DWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 328) = 0;
  v6 = *(_QWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 344) = *(_DWORD *)(v6 + 32);
  v7 = *(_QWORD *)(v6 + 8);
  *(_DWORD *)(a1 + 288) = v5 | 0xE;
  *(_QWORD *)(a1 + 336) = v7;
  v8 = *(_DWORD *)(v6 + 64);
  v9 = *(_DWORD *)(a1 + 296);
  if (v9 == *(_DWORD *)(a1 + 300))
  {
    sub_1D4B16C88((unsigned int *)(a1 + 296), v9 + 1);
    v9 = *(_DWORD *)(a1 + 296);
    v6 = *(_QWORD *)(a1 + 56);
  }
  v10 = *(_QWORD *)(a1 + 304);
  *(_DWORD *)(a1 + 296) = v9 + 1;
  *(_DWORD *)(v10 + 4 * v9 + 8) = v8;
  v11 = *(_DWORD *)(v6 + 68);
  v12 = *(_DWORD *)(a1 + 296);
  if (v12 == *(_DWORD *)(a1 + 300))
  {
    sub_1D4B16C88((unsigned int *)(a1 + 296), v12 + 1);
    v12 = *(_DWORD *)(a1 + 296);
  }
  v13 = *(_QWORD *)(a1 + 304);
  *(_DWORD *)(a1 + 296) = v12 + 1;
  *(_DWORD *)(v13 + 4 * v12 + 8) = v11;
  v14 = *(_DWORD *)(a1 + 288);
  *(_DWORD *)(a1 + 348) = 6;
  *(_DWORD *)(a1 + 288) = v14 | 0x11;
  sub_1D4BCA448(&__p, "ORC");
  sub_1D4B18048((__n128 **)(a1 + 320), (__n128 *)&qword_1EFEC6AB8, &__p);
  if (v18 < 0)
    operator delete((void *)__p.n128_u64[0]);
  v15 = *(_DWORD *)(a1 + 384) | 0x1F;
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 384) = v15;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
}

void sub_1D4B4B3B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D4B4B3D0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(a1 + 64) + 96))(*(_QWORD *)(a1 + 64), a2, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 40), 0);
}

void sub_1D4B4B3EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(v4 + 80))
  {
    v5 = *(_QWORD *)(a2 + 16);
    if (v5)
    {
      v6 = 0;
      v7 = *(_QWORD *)(v4 + 24);
      v8 = *(_QWORD *)(a1 + 88);
      do
      {
        v9 = v5 - v6;
        v10 = v7 - v8;
        if (v10 >= v9)
          v11 = v9;
        else
          v11 = v10;
        (*(void (**)(_QWORD, uint64_t, unint64_t, unint64_t, _QWORD))(**(_QWORD **)(a1 + 8)
                                                                                            + 16))(*(_QWORD *)(a1 + 8), a2, v6, v11, 0);
        v8 = *(_QWORD *)(a1 + 88) + v11;
        *(_QWORD *)(a1 + 88) = v8;
        *(_QWORD *)(a1 + 72) += v11;
        if (v8 >= v7)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
          v8 = 0;
          *(_QWORD *)(a1 + 88) = 0;
        }
        v6 += v11;
        v5 = *(_QWORD *)(a2 + 16);
      }
      while (v6 < v5);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 72) += *(_QWORD *)(a2 + 16);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a2, 0);
  }
  if ((unint64_t)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8)) >= **(_QWORD **)(a1 + 56))
    sub_1D4B4B51C(a1);
}

void sub_1D4B4B51C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  std::string *v17;
  uint64_t v18;
  __n128 v19;
  int *v20;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int *v29;
  uint64_t v30;
  int v31;
  std::string *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned int v40;
  int v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  int v47;
  std::string *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  std::logic_error *exception;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void **v56[2];
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  _DWORD *v61;
  uint64_t v62;
  int v63;
  int v64;
  _DWORD *v65;
  __n128 *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  __n128 *v72;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 80) && *(_QWORD *)(a1 + 88))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8));
    *(_QWORD *)(a1 + 88) = 0;
  }
  else
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8));
  v67 = 0;
  v68 = 0;
  v69 = 0;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 80))
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), &v67);
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), &v67);
  sub_1D4B0BF08((uint64_t)v56);
  v2 = v67;
  if (v68 != v67)
  {
    v3 = 0;
    v4 = 1;
    while (1)
    {
      v5 = v61;
      if (!v61)
        break;
      v6 = v59;
      v7 = *v61;
      if (v59 >= *v61)
      {
        if (v7 == v60)
        {
LABEL_14:
          sub_1D4BB24FC((uint64_t)&v58, v7 + 1);
          v5 = v61;
          v7 = *v61;
        }
        *v5 = v7 + 1;
        v8 = (std::string *)sub_1D4B15850(v58);
        v9 = v59++;
        *(_QWORD *)&v61[2 * v9 + 2] = v8;
        goto LABEL_16;
      }
      ++v59;
      v8 = *(std::string **)&v61[2 * v6 + 2];
LABEL_16:
      sub_1D4B0ADB0(v8, v2 + 40 * v3);
      v3 = v4;
      v2 = v67;
      v10 = 0xCCCCCCCCCCCCCCCDLL * ((v68 - v67) >> 3) > v4++;
      if (!v10)
        goto LABEL_17;
    }
    v7 = v60;
    goto LABEL_14;
  }
LABEL_17:
  v53 = 0;
  v54 = 0;
  v55 = 0;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), &v53);
  v11 = v53;
  if (v54 != v53)
  {
    v12 = 0;
    v13 = 1;
    while (1)
    {
      v14 = v65;
      if (!v65)
        break;
      v15 = v63;
      v16 = *v65;
      if (v63 >= *v65)
      {
        if (v16 == v64)
        {
LABEL_24:
          sub_1D4BB24FC((uint64_t)&v62, v16 + 1);
          v14 = v65;
          v16 = *v65;
        }
        *v14 = v16 + 1;
        v17 = (std::string *)sub_1D4B158D8(v62);
        v18 = v63++;
        *(_QWORD *)&v65[2 * v18 + 2] = v17;
        goto LABEL_26;
      }
      ++v63;
      v17 = *(std::string **)&v65[2 * v15 + 2];
LABEL_26:
      sub_1D4B0B570(v17, v11 + 40 * v12);
      v12 = v13;
      v11 = v53;
      v10 = 0xCCCCCCCCCCCCCCCDLL * ((v54 - v53) >> 3) > v13++;
      if (!v10)
        goto LABEL_27;
    }
    v16 = v64;
    goto LABEL_24;
  }
LABEL_27:
  v57 |= 1u;
  sub_1D4BCA448(&v70, "GMT");
  v19 = sub_1D4B18048(&v66, (__n128 *)&qword_1EFEC6AB8, &v70);
  if (SHIBYTE(v71) < 0)
    operator delete((void *)v70.n128_u64[0]);
  v20 = *(int **)(a1 + 504);
  if (!v20)
  {
    v22 = *(_DWORD *)(a1 + 500);
LABEL_34:
    sub_1D4BB24FC(a1 + 488, v22 + 1);
    v20 = *(int **)(a1 + 504);
    v22 = *v20;
    goto LABEL_35;
  }
  v21 = *(int *)(a1 + 496);
  v22 = *v20;
  if ((int)v21 < *v20)
  {
    *(_DWORD *)(a1 + 496) = v21 + 1;
    v23 = *(_QWORD **)&v20[2 * v21 + 2];
    goto LABEL_36;
  }
  if (v22 == *(_DWORD *)(a1 + 500))
    goto LABEL_34;
LABEL_35:
  *v20 = v22 + 1;
  v23 = sub_1D4B15C90(*(_QWORD *)(a1 + 488));
  v24 = *(_QWORD *)(a1 + 504);
  v25 = *(int *)(a1 + 496);
  *(_DWORD *)(a1 + 496) = v25 + 1;
  *(_QWORD *)(v24 + 8 * v25 + 8) = v23;
LABEL_36:
  v70 = 0uLL;
  v71 = 0;
  (*(void (**)(_QWORD, __n128 *, __n128))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), &v70, v19);
  v26 = v70.n128_u64[0];
  if (v70.n128_u64[1] != v70.n128_u64[0])
  {
    v27 = 0;
    v28 = 1;
    while (1)
    {
      v29 = (int *)v23[5];
      if (!v29)
        break;
      v30 = *((int *)v23 + 8);
      v31 = *v29;
      if ((int)v30 >= *v29)
      {
        if (v31 == *((_DWORD *)v23 + 9))
        {
LABEL_43:
          sub_1D4BB24FC((uint64_t)(v23 + 3), v31 + 1);
          v29 = (int *)v23[5];
          v31 = *v29;
        }
        *v29 = v31 + 1;
        v32 = (std::string *)sub_1D4B155A8(v23[3]);
        v33 = v23[5];
        v34 = *((int *)v23 + 8);
        *((_DWORD *)v23 + 8) = v34 + 1;
        *(_QWORD *)(v33 + 8 * v34 + 8) = v32;
        goto LABEL_45;
      }
      *((_DWORD *)v23 + 8) = v30 + 1;
      v32 = *(std::string **)&v29[2 * v30 + 2];
LABEL_45:
      sub_1D4B08880(v32, v26 + 120 * v27);
      v27 = v28;
      v26 = v70.n128_u64[0];
      v42 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v70.n128_u64[1] - v70.n128_u64[0]) >> 3) == v28++;
      if (v42)
        goto LABEL_47;
    }
    v31 = *((_DWORD *)v23 + 9);
    goto LABEL_43;
  }
LABEL_47:
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
  if ((sub_1D4BB2104((uint64_t)v56, *(_QWORD *)(a1 + 16)) & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Failed to write stripe footer.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v35 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  v36 = v35;
  if (v68 == v67)
  {
    v38 = 0;
    v37 = 0;
  }
  else
  {
    v37 = 0;
    v38 = 0;
    v39 = (_QWORD *)(v67 + 32);
    v40 = 1;
    do
    {
      v41 = *((_DWORD *)v39 - 2);
      v42 = v41 == 8 || v41 == 6;
      if (v42)
        v37 += *v39;
      else
        v38 += *v39;
      v39 += 5;
      v10 = 0xCCCCCCCCCCCCCCCDLL * ((v68 - v67) >> 3) > v40++;
    }
    while (v10);
  }
  v43 = *(_DWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 424) = v37;
  *(_QWORD *)(a1 + 432) = v38;
  v44 = *(_QWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 384) = v43 | 0x1E;
  *(_QWORD *)(a1 + 440) = v35;
  *(_QWORD *)(a1 + 448) = v44;
  v45 = *(int **)(a1 + 144);
  if (!v45)
  {
    v47 = *(_DWORD *)(a1 + 140);
    goto LABEL_64;
  }
  v46 = *(int *)(a1 + 136);
  v47 = *v45;
  if ((int)v46 >= *v45)
  {
    if (v47 != *(_DWORD *)(a1 + 140))
    {
LABEL_65:
      *v45 = v47 + 1;
      v48 = (std::string *)sub_1D4B15B80(*(_QWORD *)(a1 + 128));
      v49 = *(_QWORD *)(a1 + 144);
      v50 = *(int *)(a1 + 136);
      *(_DWORD *)(a1 + 136) = v50 + 1;
      *(_QWORD *)(v49 + 8 * v50 + 8) = v48;
      goto LABEL_66;
    }
LABEL_64:
    sub_1D4BB24FC(a1 + 128, v47 + 1);
    v45 = *(int **)(a1 + 144);
    v47 = *v45;
    goto LABEL_65;
  }
  *(_DWORD *)(a1 + 136) = v46 + 1;
  v48 = *(std::string **)&v45[2 * v46 + 2];
LABEL_66:
  sub_1D4B0EC38(v48, a1 + 368);
  *(_QWORD *)(a1 + 96) += v38 + v36 + v37;
  *(_QWORD *)(a1 + 80) += *(_QWORD *)(a1 + 72);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8));
  v51 = *(_DWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_DWORD *)(a1 + 384) = v51 | 0x1F;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v72 = &v70;
  sub_1D4B37798((void ***)&v72);
  v70.n128_u64[0] = (unint64_t)&v53;
  sub_1D4B4C9CC((void ***)&v70);
  sub_1D4B0BFBC(v56);
  v56[0] = (void **)&v67;
  sub_1D4B4C9CC(v56);
}

void sub_1D4B4BB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  void *v26;
  uint64_t v27;

  __cxa_free_exception(v26);
  *(_QWORD *)(v27 - 88) = v27 - 112;
  sub_1D4B37798((void ***)(v27 - 88));
  *(_QWORD *)(v27 - 88) = &a10;
  sub_1D4B4C9CC((void ***)(v27 - 88));
  sub_1D4B0BFBC(&a13);
  a13 = &a26;
  sub_1D4B4C9CC((void ***)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B4BBF4(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 72))
    sub_1D4B4B51C(a1);
  sub_1D4B4BC44(a1);
  sub_1D4B4BCD4(a1);
  sub_1D4B4BEB8(a1);
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 48))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1D4B4BC44(uint64_t a1)
{
  uint64_t result;
  std::logic_error *exception;

  if ((sub_1D4BB2104(a1 + 464, *(_QWORD *)(a1 + 16)) & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Failed to write metadata.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 288) |= 0x20u;
  *(_QWORD *)(a1 + 352) = result;
  return result;
}

void sub_1D4B4BCC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D4B4BCD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int *v7;
  uint64_t v8;
  int v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  std::logic_error *exception;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  v2 = *(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 232);
  *(_DWORD *)(a1 + 120) |= 0xCu;
  v3 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 240) = v2;
  *(_QWORD *)(a1 + 248) = v3;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), &v16);
  v4 = v16;
  if (v17 != v16)
  {
    v5 = 0;
    v6 = 1;
    while (1)
    {
      v7 = *(int **)(a1 + 216);
      if (!v7)
        break;
      v8 = *(int *)(a1 + 208);
      v9 = *v7;
      if ((int)v8 >= *v7)
      {
        if (v9 == *(_DWORD *)(a1 + 212))
        {
LABEL_8:
          sub_1D4BB24FC(a1 + 200, v9 + 1);
          v7 = *(int **)(a1 + 216);
          v9 = *v7;
        }
        *v7 = v9 + 1;
        v10 = (std::string *)sub_1D4B155A8(*(_QWORD *)(a1 + 200));
        v11 = *(_QWORD *)(a1 + 216);
        v12 = *(int *)(a1 + 208);
        *(_DWORD *)(a1 + 208) = v12 + 1;
        *(_QWORD *)(v11 + 8 * v12 + 8) = v10;
        goto LABEL_10;
      }
      *(_DWORD *)(a1 + 208) = v8 + 1;
      v10 = *(std::string **)&v7[2 * v8 + 2];
LABEL_10:
      sub_1D4B08880(v10, v4 + 120 * v5);
      v5 = v6;
      v4 = v16;
      if (0xEEEEEEEEEEEEEEEFLL * ((v17 - v16) >> 3) == v6++)
        goto LABEL_12;
    }
    v9 = *(_DWORD *)(a1 + 212);
    goto LABEL_8;
  }
LABEL_12:
  if ((sub_1D4BB2104(a1 + 104, *(_QWORD *)(a1 + 16)) & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Failed to write file footer.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16));
  *(_DWORD *)(a1 + 288) |= 2u;
  *(_QWORD *)(a1 + 328) = v14;
  v19 = (void **)&v16;
  sub_1D4B37798(&v19);
}

void sub_1D4B4BE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  void *v12;

  __cxa_free_exception(v12);
  a12 = &a9;
  sub_1D4B37798((void ***)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B4BEB8(uint64_t a1)
{
  std::logic_error *exception;
  char v4;

  if ((sub_1D4BB2104(a1 + 272, *(_QWORD *)(a1 + 24)) & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Failed to write post script.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24));
  return (*(uint64_t (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), &v4, 1);
}

void sub_1D4B4BF48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *sub_1D4B4BF5C(uint64_t a1, std::string *__str, const std::string *a3)
{
  int *v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  std::string *v13;
  _QWORD *v14;
  uint64_t *v15;

  v6 = *(int **)(a1 + 192);
  if (!v6)
  {
    v8 = *(_DWORD *)(a1 + 188);
LABEL_6:
    sub_1D4BB24FC(a1 + 176, v8 + 1);
    v6 = *(int **)(a1 + 192);
    v8 = *v6;
    goto LABEL_7;
  }
  v7 = *(int *)(a1 + 184);
  v8 = *v6;
  if ((int)v7 < *v6)
  {
    *(_DWORD *)(a1 + 184) = v7 + 1;
    v9 = *(_QWORD **)&v6[2 * v7 + 2];
    goto LABEL_8;
  }
  if (v8 == *(_DWORD *)(a1 + 188))
    goto LABEL_6;
LABEL_7:
  *v6 = v8 + 1;
  v9 = sub_1D4B15C08(*(_QWORD *)(a1 + 176));
  v10 = *(_QWORD *)(a1 + 192);
  v11 = *(int *)(a1 + 184);
  *(_DWORD *)(a1 + 184) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 8) = v9;
LABEL_8:
  v12 = (std::string *)v9[3];
  *((_DWORD *)v9 + 4) |= 1u;
  if (v12 == (std::string *)&qword_1EFEC6AB8)
    sub_1D4B164E8(v9 + 3, (uint64_t)__str);
  else
    std::string::operator=(v12, __str);
  v15 = (uint64_t *)v9[4];
  v14 = v9 + 4;
  v13 = (std::string *)v15;
  *((_DWORD *)v14 - 4) |= 2u;
  if (v15 == &qword_1EFEC6AB8)
    return (std::string *)sub_1D4B164E8(v14, (uint64_t)a3);
  else
    return std::string::operator=(v13, a3);
}

uint64_t sub_1D4B4C078(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t i;
  uint64_t v20;
  std::string *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  std::logic_error *exception;
  _BYTE v29[16];
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;

  sub_1D4B0D1EC((uint64_t)v29);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
  v30 |= 2u;
  v32 = v8;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 72))(a2);
  v30 |= 4u;
  v33 = v9;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
  v30 |= 8u;
  v34 = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  if (v11 >= 0x12)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unknown type.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E70], MEMORY[0x1E0DE42A0]);
  }
  v30 |= 1u;
  v31 = v11;
  v12 = *a4;
  v13 = *(int **)(a3 + 64);
  if (!v13)
  {
    v15 = *(_DWORD *)(a3 + 60);
    goto LABEL_7;
  }
  v14 = *(int *)(a3 + 56);
  v15 = *v13;
  if ((int)v14 >= *v13)
  {
    if (v15 != *(_DWORD *)(a3 + 60))
    {
LABEL_8:
      *v13 = v15 + 1;
      v16 = (unint64_t *)sub_1D4B15AF8(*(_QWORD *)(a3 + 48));
      v17 = *(_QWORD *)(a3 + 64);
      v18 = *(int *)(a3 + 56);
      *(_DWORD *)(a3 + 56) = v18 + 1;
      *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
      goto LABEL_9;
    }
LABEL_7:
    sub_1D4BB24FC(a3 + 48, v15 + 1);
    v13 = *(int **)(a3 + 64);
    v15 = *v13;
    goto LABEL_8;
  }
  *(_DWORD *)(a3 + 56) = v14 + 1;
  v16 = *(unint64_t **)&v13[2 * v14 + 2];
LABEL_9:
  sub_1D4B0E150(v16, (uint64_t)v29);
  for (i = 0; i < (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2); ++i)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2) == 12)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(a3 + 64) + 8 * v12 + 8);
      v21 = (std::string *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 56))(a2, i);
      sub_1D4B4C32C(v20, v21);
    }
    v22 = *(_QWORD *)(*(_QWORD *)(a3 + 64) + 8 * v12 + 8);
    v23 = *a4 + 1;
    *a4 = v23;
    v24 = *(_DWORD *)(v22 + 24);
    if (v24 == *(_DWORD *)(v22 + 28))
    {
      sub_1D4B16C88((unsigned int *)(v22 + 24), v24 + 1);
      v24 = *(_DWORD *)(v22 + 24);
    }
    v25 = *(_QWORD *)(v22 + 32);
    *(_DWORD *)(v22 + 24) = v24 + 1;
    *(_DWORD *)(v25 + 4 * v24 + 8) = v23;
    v26 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 48))(a2, i);
    sub_1D4B4C078(a1, v26, a3, a4);
  }
  return sub_1D4B0D258((uint64_t)v29);
}

void sub_1D4B4C300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_1D4B0D258((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *sub_1D4B4C32C(uint64_t a1, std::string *__str)
{
  uint64_t *v4;
  int *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (uint64_t *)(a1 + 48);
  v5 = *(int **)(a1 + 64);
  if (!v5)
  {
    v7 = *(_DWORD *)(a1 + 60);
LABEL_6:
    sub_1D4BB24FC(a1 + 48, v7 + 1);
    v5 = *(int **)(a1 + 64);
    v7 = *v5;
    goto LABEL_7;
  }
  v6 = *(int *)(a1 + 56);
  v7 = *v5;
  if ((int)v6 < *v5)
  {
    *(_DWORD *)(a1 + 56) = v6 + 1;
    v8 = *(std::string **)&v5[2 * v6 + 2];
    return std::string::operator=(v8, __str);
  }
  if (v7 == *(_DWORD *)(a1 + 60))
    goto LABEL_6;
LABEL_7:
  *v5 = v7 + 1;
  v9 = *v4;
  if (v9)
  {
    if (*(_QWORD *)(v9 + 112))
      sub_1D4BAD2D0(v9, (uint64_t)&unk_1E9847098, 24);
    v8 = (std::string *)sub_1D4BACF80(v9, 0x18uLL, (uint64_t)sub_1D4B16704);
  }
  else
  {
    v8 = (std::string *)operator new(0x18uLL);
  }
  v8->__r_.__value_.__r.__words[0] = 0;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(int *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = v11 + 1;
  *(_QWORD *)(v10 + 8 * v11 + 8) = v8;
  return std::string::operator=(v8, __str);
}

uint64_t sub_1D4B4C420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  uint64_t result;

  v8 = operator new(0x200uLL);
  result = sub_1D4B4AF04((uint64_t)v8, a1, a2, a3);
  *a4 = v8;
  return result;
}

void sub_1D4B4C478(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B4C48C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_1E9847528;
  sub_1D4B0F794((_QWORD *)(a1 + 464));
  sub_1D4B0E388((_QWORD *)(a1 + 368));
  sub_1D4B13D24(a1 + 272);
  sub_1D4B1299C(a1 + 104);
  *(_QWORD *)(a1 + 48) = off_1E9847838;
  sub_1D4B4AC4C((_QWORD ***)(a1 + 56), 0);
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void sub_1D4B4C550(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_1E9847528;
  sub_1D4B0F794(a1 + 58);
  sub_1D4B0E388(a1 + 46);
  sub_1D4B13D24((uint64_t)(a1 + 34));
  sub_1D4B1299C((uint64_t)(a1 + 13));
  a1[6] = off_1E9847838;
  sub_1D4B4AC4C((_QWORD ***)a1 + 7, 0);
  v2 = a1[4];
  a1[4] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  operator delete(a1);
}

uint64_t sub_1D4B4C614(uint64_t a1)
{
  *(_QWORD *)(a1 + 64) = *sub_1D4B2A040();
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)a1 = xmmword_1D4BD5F00;
  *(_OWORD *)(a1 + 16) = xmmword_1D4BD5F10;
  *(_QWORD *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = sub_1D4B2F83C();
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = MEMORY[0x1E0DE4A50];
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 112) = 0x3FA999999999999ALL;
  *(_DWORD *)(a1 + 120) = 1;
  return a1;
}

void sub_1D4B4C6B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  sub_1D4B28BAC(v1, *v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1D4B4C6C8(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1D4B4C71C(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1D4B4C704(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1D4B28BAC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1D4B4C71C(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_1D4B4C7A0(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1D4B4C7A0(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t **)sub_1D4B4C824(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    sub_1D4B29854(a1, v11, v8, v7);
  }
  return v7;
}

_QWORD *sub_1D4B4C824(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[4];
          if (v15 >= v18)
            break;
          v16 = (_QWORD *)*v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = (_QWORD *)v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (_QWORD *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v20 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = v20;
          v22 = v20[4];
          if (v6 >= v22)
            break;
          v20 = (_QWORD *)*v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = (_QWORD *)v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_1D4B4C9CC(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 40;
      v7 = v4 - 40;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 40;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t sub_1D4B4CA58(void *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, size_t a5)
{
  unint64_t result;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  signed int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  _DWORD *v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD v42[2];

  v42[1] = *MEMORY[0x1E0C80C00];
  if (a5 > 7)
  {
    v12 = (*a2 + 1);
    bzero(a1, 2 * v12);
    v13 = *a4 & 0xF;
    if (v13 > 0xA)
      return -44;
    v14 = 0;
    v15 = *a4 >> 4;
    *a3 = v13 + 5;
    v16 = 32 << v13;
    v17 = (32 << v13) | 1;
    v18 = v13 + 6;
    v19 = (unint64_t)a4 + a5 - 7;
    v20 = (unint64_t)a4 + a5 - 4;
    v21 = 4;
    v22 = a4;
    while (1)
    {
      v30 = 2 * v16 - 1;
      v31 = v30 - v17;
      v32 = v15 & (v16 - 1);
      v33 = v15 & v30;
      if (v33 >= v16)
        v34 = v30 - v17;
      else
        v34 = 0;
      v35 = v33 - v34;
      v36 = v18 - 1;
      if (v32 < v31)
        v35 = v32;
      else
        v36 = v18;
      v28 = v36 + v21;
      v37 = v35 - 1;
      if (v35 <= 0)
        v38 = v35 - 1;
      else
        v38 = 1 - v35;
      v17 += v38;
      *((_WORD *)a1 + v14++) = v37;
      v39 = v37 != 0;
      if (v17 < v16)
      {
        if (v17 < 2)
          goto LABEL_43;
        v40 = __clz(v17);
        v18 = 32 - v40;
        v16 = 1 << (v40 ^ 0x1F);
      }
      if (v14 >= v12)
        break;
      v41 = (uint64_t)v28 >> 3;
      if ((unint64_t)v22 <= v19 || (unint64_t)v22 + v41 <= v20)
      {
        v22 = (_DWORD *)((char *)v22 + v41);
        v21 = v28 & 7;
      }
      else
      {
        v21 = ((_BYTE)v28 + 8 * ((_BYTE)v22 - (_BYTE)v20)) & 0x1F;
        v22 = (_DWORD *)((char *)a4 + a5 - 4);
      }
      v15 = *v22 >> v21;
      if (!v39)
      {
        v23 = __clz(__rbit32(~v15 | 0x80000000));
        if (v23 >= 0x18)
        {
          do
          {
            v24 = ((_BYTE)v21 + 8 * ((_BYTE)v22 - (_BYTE)v19)) & 0x1F;
            v25 = (unint64_t)v22 > v19;
            if ((unint64_t)v22 <= v19)
              v22 = (_DWORD *)((char *)v22 + 3);
            else
              v22 = (_DWORD *)((char *)a4 + a5 - 4);
            if (v25)
              v21 = v24;
            v15 = *v22 >> v21;
            v23 = __clz(__rbit32(~v15 | 0x80000000));
            v14 += 36;
          }
          while (v23 > 0x17);
        }
        v26 = 3 * (v23 >> 1);
        v27 = v23 & 0x1E;
        v14 += v26 + ((v15 >> v27) & 3);
        v28 = v21 + v27 + 2;
        if (v14 >= v12)
          goto LABEL_43;
        v29 = v28 >> 3;
        if ((unint64_t)v22 <= v19 || (unint64_t)v22 + v29 <= v20)
        {
          v22 = (_DWORD *)((char *)v22 + v29);
          v21 = v28 & 7;
        }
        else
        {
          v21 = ((_BYTE)v28 + 8 * ((_BYTE)v22 - (_BYTE)v20)) & 0x1F;
          v22 = (_DWORD *)((char *)a4 + a5 - 4);
        }
        v15 = *v22 >> v21;
      }
    }
    if (v17 != 1)
      return -20;
LABEL_43:
    if (v14 > v12)
      return -48;
    if (v28 <= 32)
    {
      *a2 = v14 - 1;
      return (char *)v22 + ((v28 + 7) >> 3) - (char *)a4;
    }
    else
    {
      return -20;
    }
  }
  else
  {
    v42[0] = 0;
    memcpy(v42, a4, a5);
    result = sub_1D4B4CA58(a1, a2, a3, v42, 8);
    if (result > a5 && result < 0xFFFFFFFFFFFFFF89)
      return -20;
  }
  return result;
}

uint64_t sub_1D4B4CD50(_BYTE *a1, unint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, char *a6, unint64_t a7)
{
  unsigned __int16 v8[438];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  return sub_1D4B4CDAC(a1, a2, a3, a4, a5, a6, a7, v8, 0x36CuLL);
}

uint64_t sub_1D4B4CDAC(_BYTE *a1, unint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, char *a6, unint64_t a7, unsigned __int16 *a8, unint64_t a9)
{
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  _BYTE *v19;
  char v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;

  if (!a7)
    return -72;
  v13 = *a6;
  if (*a6 < 0)
  {
    v15 = (v13 - 126) >> 1;
    if (v15 < a7)
    {
      v14 = v13 - 127;
      if (v13 - 127 < a2)
      {
        if (v13 != 127)
        {
          v17 = 0;
          v18 = a6 + 1;
          do
          {
            v19 = &a1[v17];
            *v19 = *v18 >> 4;
            v20 = *v18++;
            v19[1] = v20 & 0xF;
            v17 += 2;
          }
          while (v17 < (v13 - 127));
LABEL_12:
          *(_DWORD *)(a3 + 48) = 0;
          *(_OWORD *)(a3 + 16) = 0u;
          *(_OWORD *)(a3 + 32) = 0u;
          *(_OWORD *)a3 = 0u;
          if (v14)
          {
            v21 = 0;
            v22 = 0;
            v23 = 1;
            while (1)
            {
              v24 = a1[v21];
              if (v24 > 0xC)
                break;
              ++*(_DWORD *)(a3 + 4 * v24);
              v22 += 1 << a1[v21] >> 1;
              v21 = v23;
              if (v14 <= v23++)
              {
                if (v22 - 4096 < 0xFFFFF001)
                  return -20;
                v26 = __clz(v22);
                *a5 = 32 - v26;
                v27 = (1 << -(char)v26) - v22;
                v28 = __clz(v27);
                if (0x80000000 >> v28 != v27)
                  return -20;
                v29 = 32 - v28;
                a1[v14] = v29;
                ++*(_DWORD *)(a3 + 4 * v29);
                v30 = *(_DWORD *)(a3 + 4);
                v16 = -20;
                if (v30 >= 2 && (v30 & 1) == 0)
                {
                  *a4 = v14 + 1;
                  return v15 + 1;
                }
                return v16;
              }
            }
          }
          return -20;
        }
        *(_DWORD *)(a3 + 48) = 0;
        *(_OWORD *)(a3 + 16) = 0u;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)a3 = 0u;
      }
      return -20;
    }
  }
  else if (v13 < a7)
  {
    v14 = sub_1D4B4D194(a1, a2 - 1, a6 + 1, *a6, 6u, a8, a9);
    v15 = v13;
    v16 = v14;
    if (v14 > 0xFFFFFFFFFFFFFF88)
      return v16;
    goto LABEL_12;
  }
  return -72;
}

uint64_t sub_1D4B4CF80(_WORD *a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int16 v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  _WORD *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  int i;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;

  v6 = -46;
  if (a3 <= 0xFF)
  {
    v7 = a3 + 1;
    if ((1 << a4) + 2 * (unint64_t)v7 + 8 <= a6)
    {
      if (a4 <= 0xC)
      {
        v8 = 0;
        v9 = a1 + 2;
        v10 = a5 + 2 * a3;
        v11 = (1 << a4);
        v12 = (v11 - 1);
        v13 = 1;
        v14 = v11 - 1;
        v15 = a3;
        do
        {
          v16 = *(__int16 *)(a2 + 2 * v8);
          if (v16 == -1)
          {
            v18 = &v9[2 * v14--];
            *((_BYTE *)v18 + 2) = v8;
            v17 = 1;
          }
          else
          {
            v17 = *(_WORD *)(a2 + 2 * v8);
            if (0x8000 << a4 >> 16 <= v16)
              v13 = 0;
          }
          *(_WORD *)(a5 + 2 * v8++) = v17;
        }
        while (v7 != v8);
        *a1 = a4;
        a1[1] = v13;
        v19 = v11 >> 1;
        if (v14 == (_DWORD)v12)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          v23 = v19 + (v11 >> 3) + 3;
          v24 = a5 + 2 * v15;
          do
          {
            v25 = *(__int16 *)(a2 + 2 * v20);
            v26 = *(unsigned __int16 *)(a2 + 2 * v20);
            *(_QWORD *)(v10 + 2 + v22) = v21;
            if (v25 >= 9)
            {
              v27 = 10;
              do
              {
                *(_QWORD *)(v24 + v22 + v27) = v21;
                v28 = v27 + 6;
                v27 += 8;
              }
              while (v28 < v26);
            }
            v22 += (__int16)v26;
            ++v20;
            v21 += 0x101010101010101;
          }
          while (v20 != v7);
          v29 = 0;
          v30 = 0;
          do
          {
            LOBYTE(v9[2 * (v30 & v12) + 1]) = *(_BYTE *)(v10 + v29 + 2);
            LOBYTE(v9[2 * (((_DWORD)v30 + v23) & v12) + 1]) = *(_BYTE *)(v10 + v29 + 3);
            v30 = ((_DWORD)v30 + 2 * v23) & v12;
            v29 += 2;
          }
          while (v29 < v11);
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(__int16 *)(a2 + 2 * v31);
            if (v33 >= 1)
            {
              for (i = 0; i != v33; ++i)
              {
                LOBYTE(v9[2 * v32 + 1]) = v31;
                do
                  v32 = (v19 + (v11 >> 3) + 3 + v32) & v12;
                while (v32 > v14);
              }
            }
            ++v31;
          }
          while (v31 != v7);
          if (v32)
            return -1;
        }
        v35 = (char *)a1 + 7;
        v36 = (1 << a4);
        do
        {
          v37 = *(v35 - 1);
          v38 = *(unsigned __int16 *)(a5 + 2 * v37);
          *(_WORD *)(a5 + 2 * v37) = v38 + 1;
          LOBYTE(v37) = a4 - 31 + __clz(v38);
          *v35 = v37;
          *(_WORD *)(v35 - 3) = ((_WORD)v38 << v37) - v11;
          v35 += 4;
          --v36;
        }
        while (v36);
        return 0;
      }
      else
      {
        return -44;
      }
    }
  }
  return v6;
}

unint64_t sub_1D4B4D194(_BYTE *a1, uint64_t a2, _DWORD *a3, size_t a4, unsigned int a5, unsigned __int16 *a6, unint64_t a7)
{
  unint64_t result;
  unint64_t v15;
  int v16;
  _WORD *v17;
  unint64_t v18;
  unsigned __int16 *v19;
  unsigned __int8 *v20;
  _BYTE *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  _BOOL4 v52;
  unsigned int v53;
  unsigned __int16 *v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unsigned __int16 *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unsigned __int16 *v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  int v70;
  unsigned __int16 *v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  unsigned __int16 *v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int v85;
  int v86;
  unint64_t v87;
  unsigned __int16 *v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int v94;
  _BYTE *v95;
  uint64_t v96;
  _BOOL4 v97;
  unsigned __int16 *v98;
  uint64_t v99;
  char v100;
  unint64_t v101;
  uint64_t v102;
  unsigned __int16 *v103;
  uint64_t v104;
  char v105;
  unint64_t v106;
  uint64_t v107;
  unsigned __int16 *v108;
  uint64_t v109;
  char v110;
  unint64_t v111;
  unsigned __int16 *v112;
  uint64_t v113;
  char v114;
  unint64_t v115;
  unint64_t v116;
  unsigned __int16 *v117;
  uint64_t v118;
  char v119;
  int v120;
  unsigned int v121;
  uint64_t v122;
  unsigned __int8 *v123;
  unint64_t v124;
  unsigned __int16 *v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  _BYTE *v129;
  unsigned int v130;
  unsigned int v131;

  v130 = 255;
  if (a7 < 0x204)
    return -1;
  v131 = 0;
  result = sub_1D4B4CA58(a6, &v130, &v131, a3, a4);
  if (result > 0xFFFFFFFFFFFFFF88)
    return result;
  if (v131 > a5
    || (((1 << v131) + 4 * ((1 << v131) + 2) + 2 * (v130 + 1) + 11) & 0xFFFFFFFFFFFFFFFCLL) + 516 > a7)
  {
    return -44;
  }
  v15 = result;
  v16 = (1 << v131) + 1;
  v17 = a6 + 258;
  v18 = a7 - 4 * v16 - 516;
  v19 = a6 + 256;
  result = sub_1D4B4CF80(a6 + 256, (uint64_t)a6, v130, v131, (uint64_t)&a6[2 * v16 + 258], v18);
  if (result > 0xFFFFFFFFFFFFFF88)
    return result;
  v20 = (unsigned __int8 *)a3 + v15;
  result = a4 - v15;
  v21 = &a1[a2];
  v22 = (unint64_t)&a1[a2 - 3];
  if (!a6[257])
  {
    if (!result)
      return -72;
    v26 = result - 8;
    if (result < 8)
    {
      v27 = *v20;
      switch(result)
      {
        case 2uLL:
          goto LABEL_38;
        case 3uLL:
          goto LABEL_37;
        case 4uLL:
          goto LABEL_36;
        case 5uLL:
          goto LABEL_35;
        case 6uLL:
          goto LABEL_34;
        case 7uLL:
          v27 |= (unint64_t)v20[6] << 48;
LABEL_34:
          v27 += (unint64_t)v20[5] << 40;
LABEL_35:
          v27 += (unint64_t)v20[4] << 32;
LABEL_36:
          v27 += (unint64_t)v20[3] << 24;
LABEL_37:
          v27 += (unint64_t)v20[2] << 16;
LABEL_38:
          v27 += (unint64_t)v20[1] << 8;
          break;
        default:
          break;
      }
      if (!v20[result - 1])
        return -20;
      v26 = 0;
      v28 = __clz(v20[result - 1]) - 8 * result + 41;
    }
    else
    {
      if (!v20[result - 1])
        return -1;
      if (result > 0xFFFFFFFFFFFFFF88)
        return result;
      v27 = *(_QWORD *)&v20[v26];
      v28 = __clz(v20[result - 1]) - 23;
    }
    v35 = *v19;
    v36 = v28 + v35;
    v37 = dword_1D4BD5F6C[v35];
    v38 = (v27 >> -(char)(v28 + v35)) & v37;
    if (v28 + v35 <= 0x40)
    {
      if (v26 >= 8)
      {
        v39 = v36 >> 3;
        v36 &= 7u;
      }
      else
      {
        if (!v26)
          goto LABEL_68;
        if (&v20[v26 - (v36 >> 3)] >= v20)
          v39 = v36 >> 3;
        else
          v39 = v26;
        v36 -= 8 * v39;
      }
      v26 -= v39;
      v27 = *(_QWORD *)&v20[v26];
    }
LABEL_68:
    v46 = v36 + v35;
    v42 = (v27 >> -(char)v46) & v37;
    if (v46 > 0x40)
    {
LABEL_69:
      v47 = a1;
LABEL_89:
      v75 = (unint64_t)(v21 - 2);
      if (v47 > v21 - 2)
        return -70;
      v76 = (_BYTE *)(v47 - a1);
      v77 = v47 + 1;
      v78 = 2;
      while (1)
      {
        v79 = &v17[2 * v38];
        v80 = *v79;
        v81 = *((_BYTE *)v79 + 2);
        v82 = *((unsigned __int8 *)v79 + 3);
        v83 = v46 + v82;
        v84 = dword_1D4BD5F6C[v82];
        *(v77 - 1) = v81;
        if (v83 > 0x40)
        {
LABEL_154:
          *v77 = v17[2 * v42 + 1];
          return (unint64_t)&v76[v78];
        }
        if (v26 >= 8)
          break;
        if (v26)
        {
          if (&v20[v26 - (v83 >> 3)] >= v20)
            v85 = v83 >> 3;
          else
            v85 = v26;
          v86 = v83 - 8 * v85;
          goto LABEL_99;
        }
        v86 = v83;
        v87 = v27;
LABEL_100:
        if ((unint64_t)v77 > v75)
          return -70;
        v38 = ((v27 >> -(char)v83) & v84) + v80;
        v88 = &v17[2 * v42];
        v89 = *v88;
        v90 = *((_BYTE *)v88 + 2);
        v91 = *((unsigned __int8 *)v88 + 3);
        v92 = v86 + v91;
        v93 = dword_1D4BD5F6C[v91];
        *v77 = v90;
        if (v92 > 0x40)
        {
          ++v77;
          v78 = 3;
          v42 = v38;
          goto LABEL_154;
        }
        if (v26 >= 8)
        {
          v94 = v92 >> 3;
          v46 = v92 & 7;
        }
        else
        {
          if (!v26)
          {
            v46 = v92;
            v27 = v87;
            goto LABEL_110;
          }
          if (&v20[v26 - (v92 >> 3)] >= v20)
            v94 = v92 >> 3;
          else
            v94 = v26;
          v46 = v92 - 8 * v94;
        }
        v26 -= v94;
        v27 = *(_QWORD *)&v20[v26];
LABEL_110:
        v42 = ((v87 >> -(char)v92) & v93) + v89;
        v76 += 2;
        v95 = v77 + 1;
        v77 += 2;
        result = -70;
        if ((unint64_t)v95 > v75)
          return result;
      }
      v85 = v83 >> 3;
      v86 = v83 & 7;
LABEL_99:
      v26 -= v85;
      v87 = *(_QWORD *)&v20[v26];
      goto LABEL_100;
    }
    if (v26 >= 8)
    {
      v50 = v46 >> 3;
      v46 &= 7u;
      v26 -= v50;
      v27 = *(_QWORD *)&v20[v26];
    }
    else if (v26)
    {
      v48 = v46 >> 3;
      v49 = &v20[v26 - v48] >= v20 ? v48 : v26;
      v46 -= 8 * v49;
      v26 -= v49;
      v27 = *(_QWORD *)&v20[v26];
      if (v46 > 0x40)
        goto LABEL_69;
    }
    v47 = a1;
    do
    {
      if (v26 >= 8)
      {
        v52 = 0;
        v53 = v46 >> 3;
        v46 &= 7u;
      }
      else
      {
        if (!v26)
          goto LABEL_89;
        v51 = &v20[v26 - (v46 >> 3)];
        v52 = v51 < v20;
        if (v51 >= v20)
          v53 = v46 >> 3;
        else
          v53 = v26;
        v46 -= 8 * v53;
      }
      v26 -= v53;
      v27 = *(_QWORD *)&v20[v26];
      if ((unint64_t)v47 >= v22)
        break;
      if (v52)
        break;
      v54 = &v17[2 * v38];
      v55 = *v54;
      v56 = *((_BYTE *)v54 + 2);
      v57 = *((unsigned __int8 *)v54 + 3);
      v58 = v46 + v57;
      v59 = ((v27 >> -(char)v58) & dword_1D4BD5F6C[v57]) + v55;
      *v47 = v56;
      v60 = &v17[2 * v42];
      v61 = *v60;
      v62 = *((_BYTE *)v60 + 2);
      v63 = *((unsigned __int8 *)v60 + 3);
      v64 = v58 + v63;
      v65 = ((v27 >> -(char)v64) & dword_1D4BD5F6C[v63]) + v61;
      v47[1] = v62;
      v66 = &v17[2 * v59];
      v67 = *v66;
      v68 = *((_BYTE *)v66 + 2);
      v69 = *((unsigned __int8 *)v66 + 3);
      v70 = v64 + v69;
      v38 = ((v27 >> -(char)v70) & dword_1D4BD5F6C[v69]) + v67;
      v47[2] = v68;
      v71 = &v17[2 * v65];
      v72 = *v71;
      v73 = *((_BYTE *)v71 + 2);
      v74 = *((unsigned __int8 *)v71 + 3);
      v46 = v70 + v74;
      v42 = ((v27 >> -(char)v46) & dword_1D4BD5F6C[v74]) + v72;
      v47[3] = v73;
      v47 += 4;
    }
    while (v46 <= 0x40);
    goto LABEL_89;
  }
  if (!result)
    return -72;
  if (result < 8)
  {
    v23 = *v20;
    switch(result)
    {
      case 2uLL:
        goto LABEL_27;
      case 3uLL:
        goto LABEL_26;
      case 4uLL:
        goto LABEL_25;
      case 5uLL:
        goto LABEL_24;
      case 6uLL:
        goto LABEL_23;
      case 7uLL:
        v23 |= (unint64_t)v20[6] << 48;
LABEL_23:
        v23 += (unint64_t)v20[5] << 40;
LABEL_24:
        v23 += (unint64_t)v20[4] << 32;
LABEL_25:
        v23 += (unint64_t)v20[3] << 24;
LABEL_26:
        v23 += (unint64_t)v20[2] << 16;
LABEL_27:
        v23 += (unint64_t)v20[1] << 8;
        break;
      default:
        break;
    }
    if (v20[result - 1])
    {
      v25 = __clz(v20[result - 1]) - 8 * result + 41;
      v24 = (unsigned __int8 *)a3 + v15;
LABEL_30:
      v29 = v20 + 8;
      v30 = *v19;
      v31 = v25 + v30;
      v32 = dword_1D4BD5F6C[v30];
      v33 = (v23 >> -(char)(v25 + v30)) & v32;
      if (v31 > 0x40)
      {
        v34 = v24;
        goto LABEL_56;
      }
      if (v24 >= v29)
      {
        LODWORD(v40) = v31 >> 3;
        v31 &= 7u;
      }
      else
      {
        v34 = (unsigned __int8 *)a3 + v15;
        if (v24 == v20)
          goto LABEL_56;
        v40 = v31 >> 3;
        if (&v24[-v40] < v20)
          LODWORD(v40) = (_DWORD)v24 - (_DWORD)v20;
        v31 -= 8 * v40;
      }
      v34 = &v24[-v40];
      v23 = *(_QWORD *)v34;
LABEL_56:
      v41 = v31 + v30;
      v42 = (v23 >> -(char)v41) & v32;
      if (v41 >= 0x41)
      {
LABEL_57:
        v43 = a1;
        goto LABEL_128;
      }
      if (v34 >= v29)
      {
        v45 = v41 >> 3;
        v41 &= 7u;
        v34 -= v45;
        v23 = *(_QWORD *)v34;
      }
      else if (v34 == v20)
      {
        v34 = (unsigned __int8 *)a3 + v15;
      }
      else
      {
        v44 = v41 >> 3;
        if (&v34[-v44] >= v20)
          v44 = v44;
        else
          v44 = ((_DWORD)v34 - (_DWORD)v20);
        v41 -= 8 * v44;
        v34 -= v44;
        v23 = *(_QWORD *)v34;
        if (v41 > 0x40)
          goto LABEL_57;
      }
      v43 = a1;
      while (1)
      {
        if (v34 >= v29)
        {
          v97 = 0;
          LODWORD(v96) = v41 >> 3;
          v41 &= 7u;
        }
        else
        {
          if (v34 == v20)
          {
            v34 = (unsigned __int8 *)a3 + v15;
LABEL_128:
            v116 = (unint64_t)(v21 - 2);
            if (v43 > v21 - 2)
              return -70;
            v76 = (_BYTE *)(v43 - a1);
            v77 = v43 + 1;
            v78 = 2;
            while (2)
            {
              v117 = &v17[2 * v33];
              v118 = *v117;
              v119 = *((_BYTE *)v117 + 2);
              v120 = *((unsigned __int8 *)v117 + 3);
              v121 = v41 + v120;
              *(v77 - 1) = v119;
              if (v41 + v120 > 0x40)
                goto LABEL_154;
              if (v34 >= v29)
              {
                LODWORD(v122) = v121 >> 3;
                v121 &= 7u;
                goto LABEL_138;
              }
              if (v34 == v20)
              {
                v123 = (unsigned __int8 *)a3 + v15;
                v124 = v23;
              }
              else
              {
                v122 = v121 >> 3;
                if (&v34[-v122] < v20)
                  LODWORD(v122) = (_DWORD)v34 - (_DWORD)v20;
                v121 -= 8 * v122;
LABEL_138:
                v123 = &v34[-v122];
                v124 = *(_QWORD *)v123;
              }
              if ((unint64_t)v77 > v116)
                return -70;
              v33 = (v23 << v41 >> -(char)v120) + v118;
              v125 = &v17[2 * v42];
              v126 = *v125;
              v127 = *((unsigned __int8 *)v125 + 3);
              v41 = v121 + v127;
              *v77 = *((_BYTE *)v125 + 2);
              if (v121 + v127 > 0x40)
              {
                ++v77;
                v78 = 3;
                v42 = v33;
                goto LABEL_154;
              }
              if (v123 < v29)
              {
                if (v123 == v20)
                {
                  v34 = (unsigned __int8 *)a3 + v15;
                  v23 = v124;
                }
                else
                {
                  v128 = v41 >> 3;
                  if (&v123[-v128] < v20)
                    LODWORD(v128) = (_DWORD)v123 - (_DWORD)v20;
                  v41 -= 8 * v128;
LABEL_147:
                  v34 = &v123[-v128];
                  v23 = *(_QWORD *)v34;
                }
                v42 = (v124 << v121 >> -(char)v127) + v126;
                v76 += 2;
                v129 = v77 + 1;
                v77 += 2;
                result = -70;
                if ((unint64_t)v129 > v116)
                  return result;
                continue;
              }
              break;
            }
            LODWORD(v128) = v41 >> 3;
            v41 &= 7u;
            goto LABEL_147;
          }
          v96 = v41 >> 3;
          v97 = &v34[-v96] < v20;
          if (&v34[-v96] < v20)
            LODWORD(v96) = (_DWORD)v34 - (_DWORD)v20;
          v41 -= 8 * v96;
        }
        v34 -= v96;
        v23 = *(_QWORD *)v34;
        if ((unint64_t)v43 < v22 && !v97)
        {
          v98 = &v17[2 * v33];
          v99 = *v98;
          v100 = *((_BYTE *)v98 + 2);
          LODWORD(v98) = *((unsigned __int8 *)v98 + 3);
          v101 = v23 << v41 >> -(char)v98;
          LODWORD(v98) = v41 + (_DWORD)v98;
          v102 = v101 + v99;
          *v43 = v100;
          v103 = &v17[2 * v42];
          v104 = *v103;
          v105 = *((_BYTE *)v103 + 2);
          LODWORD(v103) = *((unsigned __int8 *)v103 + 3);
          v106 = v23 << (char)v98 >> -(char)v103;
          LODWORD(v98) = (_DWORD)v98 + (_DWORD)v103;
          v107 = v106 + v104;
          v43[1] = v105;
          v108 = &v17[2 * v102];
          v109 = *v108;
          v110 = *((_BYTE *)v108 + 2);
          LODWORD(v108) = *((unsigned __int8 *)v108 + 3);
          v111 = v23 << (char)v98 >> -(char)v108;
          LODWORD(v108) = (_DWORD)v98 + (_DWORD)v108;
          v33 = v111 + v109;
          v43[2] = v110;
          v112 = &v17[2 * v107];
          v113 = *v112;
          v114 = *((_BYTE *)v112 + 2);
          LODWORD(v112) = *((unsigned __int8 *)v112 + 3);
          v115 = v23 << (char)v108 >> -(char)v112;
          v41 = (_DWORD)v108 + (_DWORD)v112;
          v42 = v115 + v113;
          v43[3] = v114;
          v43 += 4;
          if (v41 <= 0x40)
            continue;
        }
        goto LABEL_128;
      }
    }
    return -20;
  }
  if (!v20[result - 1])
    return -1;
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    v24 = (unsigned __int8 *)a3 + a4 - 8;
    v23 = *(_QWORD *)v24;
    v25 = __clz(v20[result - 1]) - 23;
    goto LABEL_30;
  }
  return result;
}

void sub_1D4B4DA68(uint64_t a1)
{
  pthread_mutex_t *v2;
  unint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  void (*v6)(_QWORD, uint64_t);

  if (a1)
  {
    v2 = (pthread_mutex_t *)(a1 + 96);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
    *(_DWORD *)(a1 + 256) = 1;
    pthread_mutex_unlock(v2);
    pthread_cond_broadcast((pthread_cond_t *)(a1 + 160));
    pthread_cond_broadcast((pthread_cond_t *)(a1 + 208));
    if (*(_QWORD *)(a1 + 32))
    {
      v3 = 0;
      do
        pthread_join(*(pthread_t *)(*(_QWORD *)(a1 + 24) + 8 * v3++), 0);
      while (v3 < *(_QWORD *)(a1 + 32));
    }
    pthread_mutex_destroy(v2);
    pthread_cond_destroy((pthread_cond_t *)(a1 + 160));
    pthread_cond_destroy((pthread_cond_t *)(a1 + 208));
    v5 = *(void (**)(uint64_t))(a1 + 8);
    v4 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(a1 + 48))
    {
      if (v5)
        v5(v4);
      else
        free(*(void **)(a1 + 48));
      v5 = *(void (**)(uint64_t))(a1 + 8);
      v4 = *(_QWORD *)(a1 + 16);
    }
    if (*(_QWORD *)(a1 + 24))
    {
      if (v5)
        v5(v4);
      else
        free(*(void **)(a1 + 24));
    }
    v6 = *(void (**)(_QWORD, uint64_t))(a1 + 8);
    if (v6)
      v6(*(_QWORD *)(a1 + 16), a1);
    else
      free((void *)a1);
  }
}

unint64_t sub_1D4B4DB8C(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = a1;
  if (a2 < 0x20)
  {
    v13 = a3 + 0x27D4EB2F165667C5;
  }
  else
  {
    v5 = (unint64_t)a1 + a2 - 31;
    v6 = a3 + 0x60EA27EEADC0B5D6;
    v7 = a3 - 0x3D4D51C2D82B14B1;
    v8 = a3 + 0x61C8864E7A143579;
    do
    {
      v9 = __ROR8__(v6 - 0x3D4D51C2D82B14B1 * *v4, 33);
      v6 = 0x9E3779B185EBCA87 * v9;
      v10 = __ROR8__(v7 - 0x3D4D51C2D82B14B1 * v4[1], 33);
      v7 = 0x9E3779B185EBCA87 * v10;
      v11 = __ROR8__(a3 - 0x3D4D51C2D82B14B1 * v4[2], 33);
      a3 = 0x9E3779B185EBCA87 * v11;
      v12 = __ROR8__(v8 - 0x3D4D51C2D82B14B1 * v4[3], 33);
      v8 = 0x9E3779B185EBCA87 * v12;
      v4 += 4;
    }
    while ((unint64_t)v4 < v5);
    v13 = 0x9E3779B185EBCA87
        * ((0x9E3779B185EBCA87
          * ((0x9E3779B185EBCA87
            * ((0x9E3779B185EBCA87
              * ((__ROR8__(v7, 57) + __ROR8__(v6, 63) + __ROR8__(a3, 52) + __ROR8__(v8, 46)) ^ (0x9E3779B185EBCA87
                                                                                              * __ROR8__(0xDEF35B010F796CA9* v9, 33)))- 0x7A1435883D4D519DLL) ^ (0x9E3779B185EBCA87 * __ROR8__(0xDEF35B010F796CA9 * v10, 33)))- 0x7A1435883D4D519DLL) ^ (0x9E3779B185EBCA87 * __ROR8__(0xDEF35B010F796CA9 * v11, 33)))- 0x7A1435883D4D519DLL) ^ (0x9E3779B185EBCA87 * __ROR8__(0xDEF35B010F796CA9 * v12, 33)))- 0x7A1435883D4D519DLL;
  }
  return sub_1D4B4DFAC(v13 + a2, v4, a2);
}

uint64_t sub_1D4B4DCE4(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(int64x2_t *)(a1 + 8) = vaddq_s64(vdupq_n_s64(a2), (int64x2_t)xmmword_1D4BD5FF0);
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a2 + 0x61C8864E7A143579;
  return 0;
}

uint64_t sub_1D4B4DD2C(uint64_t a1, char *__src, size_t __n)
{
  int v3;
  char *v4;
  uint64_t v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (__src)
  {
    v3 = __n;
    v4 = __src;
    *(_QWORD *)a1 += __n;
    v6 = *(unsigned int *)(a1 + 72);
    if (v6 + __n <= 0x1F)
    {
      memcpy((void *)(a1 + v6 + 40), __src, __n);
      LODWORD(v7) = *(_DWORD *)(a1 + 72) + v3;
LABEL_11:
      *(_DWORD *)(a1 + 72) = v7;
      return 0;
    }
    v8 = &__src[__n];
    if ((_DWORD)v6)
    {
      memcpy((void *)(a1 + 40 + v6), __src, (32 - v6));
      v9 = __ROR8__(*(_QWORD *)(a1 + 16) - 0x3D4D51C2D82B14B1 * *(_QWORD *)(a1 + 48), 33);
      *(_QWORD *)(a1 + 8) = 0x9E3779B185EBCA87
                          * __ROR8__(*(_QWORD *)(a1 + 8) - 0x3D4D51C2D82B14B1 * *(_QWORD *)(a1 + 40), 33);
      *(_QWORD *)(a1 + 16) = 0x9E3779B185EBCA87 * v9;
      v10 = 0x9E3779B185EBCA87 * __ROR8__(*(_QWORD *)(a1 + 32) - 0x3D4D51C2D82B14B1 * *(_QWORD *)(a1 + 64), 33);
      *(_QWORD *)(a1 + 24) = 0x9E3779B185EBCA87
                           * __ROR8__(*(_QWORD *)(a1 + 24) - 0x3D4D51C2D82B14B1 * *(_QWORD *)(a1 + 56), 33);
      *(_QWORD *)(a1 + 32) = v10;
      v4 += (32 - *(_DWORD *)(a1 + 72));
      *(_DWORD *)(a1 + 72) = 0;
    }
    if (v4 + 32 <= v8)
    {
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(_QWORD *)(a1 + 24);
      v14 = *(_QWORD *)(a1 + 32);
      do
      {
        v11 = 0x9E3779B185EBCA87 * __ROR8__(v11 - 0x3D4D51C2D82B14B1 * *(_QWORD *)v4, 33);
        *(_QWORD *)(a1 + 8) = v11;
        v12 = 0x9E3779B185EBCA87 * __ROR8__(v12 - 0x3D4D51C2D82B14B1 * *((_QWORD *)v4 + 1), 33);
        *(_QWORD *)(a1 + 16) = v12;
        v13 = 0x9E3779B185EBCA87 * __ROR8__(v13 - 0x3D4D51C2D82B14B1 * *((_QWORD *)v4 + 2), 33);
        *(_QWORD *)(a1 + 24) = v13;
        v14 = 0x9E3779B185EBCA87 * __ROR8__(v14 - 0x3D4D51C2D82B14B1 * *((_QWORD *)v4 + 3), 33);
        *(_QWORD *)(a1 + 32) = v14;
        v4 += 32;
      }
      while (v4 <= v8 - 32);
    }
    if (v4 < v8)
    {
      v7 = v8 - v4;
      memcpy((void *)(a1 + 40), v4, v7);
      goto LABEL_11;
    }
  }
  return 0;
}

unint64_t sub_1D4B4DED0(_QWORD *a1)
{
  uint64_t v1;

  if (*a1 < 0x20uLL)
    v1 = a1[3] + 0x27D4EB2F165667C5;
  else
    v1 = 0x9E3779B185EBCA87
       * ((0x9E3779B185EBCA87
         * ((0x9E3779B185EBCA87
           * ((0x9E3779B185EBCA87
             * ((__ROR8__(a1[2], 57) + __ROR8__(a1[1], 63) + __ROR8__(a1[3], 52) + __ROR8__(a1[4], 46)) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[1], 33)))
             - 0x7A1435883D4D519DLL) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[2], 33)))
           - 0x7A1435883D4D519DLL) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[3], 33)))
         - 0x7A1435883D4D519DLL) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[4], 33)))
       - 0x7A1435883D4D519DLL;
  return sub_1D4B4DFAC(v1 + *a1, a1 + 5, *a1);
}

unint64_t sub_1D4B4DFAC(unint64_t a1, uint64_t *a2, char a3)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;

  v3 = a3 & 0x1F;
  if (v3 >= 8)
  {
    do
    {
      v4 = *a2++;
      a1 = 0x85EBCA77C2B2AE63
         - 0x61C8864E7A143579 * __ROR8__((0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * v4, 33)) ^ a1, 37);
      v3 -= 8;
    }
    while (v3 > 7);
  }
  if (v3 >= 4)
  {
    v5 = *(_DWORD *)a2;
    a2 = (uint64_t *)((char *)a2 + 4);
    a1 = 0x165667B19E3779F9 - 0x3D4D51C2D82B14B1 * __ROR8__((0x9E3779B185EBCA87 * v5) ^ a1, 41);
    v3 -= 4;
  }
  for (; v3; --v3)
  {
    v6 = *(unsigned __int8 *)a2;
    a2 = (uint64_t *)((char *)a2 + 1);
    a1 = 0x9E3779B185EBCA87 * __ROR8__((0x27D4EB2F165667C5 * v6) ^ a1, 53);
  }
  v7 = 0x165667B19E3779F9
     * ((0xC2B2AE3D27D4EB4FLL * (a1 ^ (a1 >> 33))) ^ ((0xC2B2AE3D27D4EB4FLL * (a1 ^ (a1 >> 33))) >> 29));
  return v7 ^ HIDWORD(v7);
}

uint64_t sub_1D4B4E088(unint64_t a1)
{
  if (a1 >= 0xFFFFFFFFFFFFFF89)
    return -(int)a1;
  else
    return 0;
}

uint64_t sub_1D4B4E094(_WORD *a1, __int16 *a2, int a3, int a4, _WORD *a5, unint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  __int16 *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int i;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  _DWORD *v41;
  int v42;
  int v43;
  unsigned int v45;

  v6 = (1 << a4);
  LODWORD(v7) = v6 >> 1;
  if (a4)
    v7 = v7;
  else
    v7 = 1;
  v8 = (a3 + 2);
  if (((2 * ((1 << a4) + v8)) & 0xFFFFFFFFFFFFFFFCLL) + 8 > a6)
    return -44;
  v10 = (v6 - 1);
  v11 = (v6 >> 3) + (v6 >> 1) + 3;
  *a1 = a4;
  v12 = &a5[v8];
  a1[1] = a3;
  *a5 = 0;
  v13 = (a3 + 1);
  if (a3 == -1)
  {
    a5[v13] = v6 + 1;
    v24 = (char *)v12 + v6;
  }
  else
  {
    v14 = 0;
    if (v8 <= 2)
      v15 = 2;
    else
      v15 = v8;
    v16 = v15 - 1;
    v17 = v6 - 1;
    do
    {
      v18 = (unsigned __int16)a2[v14];
      v19 = &a5[v14];
      v20 = *v19;
      if (v18 == 0xFFFF)
      {
        v19[1] = v20 + 1;
        *((_BYTE *)v12 + v17--) = v14;
      }
      else
      {
        v19[1] = v20 + v18;
      }
      ++v14;
    }
    while (v16 != v14);
    a5[v13] = v6 + 1;
    if (v17 != (_DWORD)v10)
    {
      v32 = 0;
      v33 = 0;
      do
      {
        v34 = a2[v32];
        if (v34 >= 1)
        {
          for (i = 0; i != v34; ++i)
          {
            *((_BYTE *)v12 + v33) = v32;
            do
              v33 = (v33 + v11) & v10;
            while (v33 > v17);
          }
        }
        ++v32;
      }
      while (v32 != v13);
      goto LABEL_33;
    }
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = (char *)v12 + v6;
    v25 = (uint64_t)&a5[v8 + 4] + v6;
    do
    {
      v26 = a2[v21];
      v27 = (unsigned __int16)a2[v21];
      *(_QWORD *)&v24[v23] = v22;
      if (v26 >= 9)
      {
        v28 = 0;
        do
        {
          *(_QWORD *)(v25 + v23 + v28) = v22;
          v29 = v28 + 16;
          v28 += 8;
        }
        while (v29 < v27);
      }
      v23 += (__int16)v27;
      ++v21;
      v22 += 0x101010101010101;
    }
    while (v21 != v13);
  }
  v30 = 0;
  v31 = 0;
  do
  {
    *((_BYTE *)v12 + (v31 & v10)) = v24[v30];
    *((_BYTE *)v12 + (((_DWORD)v31 + v11) & v10)) = v24[v30 + 1];
    v31 = ((_DWORD)v31 + 2 * v11) & v10;
    v30 += 2;
  }
  while (v30 < v6);
LABEL_33:
  v36 = 0;
  do
  {
    v37 = *((unsigned __int8 *)v12 + v36);
    v38 = (unsigned __int16)a5[v37];
    a5[v37] = v38 + 1;
    a1[v38 + 2] = v6 + v36++;
  }
  while (v6 != v36);
  v39 = 0;
  v40 = (a4 << 16) - v6;
  if (v13 <= 1)
    v13 = 1;
  else
    v13 = v13;
  v41 = &a1[2 * v7 + 4];
  do
  {
    v43 = *a2++;
    v42 = v43;
    if (v43 == -1 || v42 == 1)
    {
      *(v41 - 1) = v39 - 1;
      *v41 = v40;
      ++v39;
    }
    else if (v42)
    {
      v45 = a4 - 31 + __clz(v42 - 1);
      *v41 = (v45 << 16) - (v42 << v45);
      *(v41 - 1) = v39 - v42;
      v39 += v42;
    }
    else
    {
      *v41 = v40 + 0x10000;
    }
    v41 += 2;
    --v13;
  }
  while (v13);
  return 0;
}

uint64_t sub_1D4B4E320(_WORD *a1, unint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  unint64_t v6;

  if (a5 > 0xC)
    return -44;
  if (a5 < 5)
    return -1;
  LODWORD(v6) = ((a5 + a5 * a4 + 6) >> 3) + 3;
  if (a4)
    v6 = v6;
  else
    v6 = 512;
  return sub_1D4B4E368(a1, a2, a3, a4, a5, v6 <= a2);
}

uint64_t sub_1D4B4E368(_WORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6;
  _BOOL4 v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  _WORD *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _BOOL4 v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  int v33;

  v6 = (a4 + 1);
  if (a4 == -1)
    return -1;
  v8 = 0;
  v9 = 0;
  v10 = 1 << a5;
  v11 = (1 << a5) + 1;
  v12 = a5 - 5;
  v13 = (a5 + 1);
  v14 = (unint64_t)a1 + a2 - 2;
  v15 = 4;
  v16 = a1;
  while (1)
  {
    if (!v8)
    {
      LODWORD(v17) = v9;
      goto LABEL_25;
    }
    LODWORD(v17) = v9;
    if (v9 < v6)
    {
      v17 = v9;
      while (!*(_WORD *)(a3 + 2 * v17))
      {
        if (v6 == ++v17)
          goto LABEL_43;
      }
    }
    if ((_DWORD)v17 == (_DWORD)v6)
      break;
    if (v17 >= v9 + 24)
    {
      while (a6 || (unint64_t)v16 <= v14)
      {
        v19 = v12 + (0xFFFF << v15);
        *v16++ = v19;
        v12 = HIWORD(v19);
        v18 = v9 + 24;
        v20 = v9 + 48;
        v9 += 24;
        if (v17 < v20)
          goto LABEL_17;
      }
      return -70;
    }
    v18 = v9;
LABEL_17:
    v21 = v18 + 3;
    while (v17 >= v21)
    {
      v12 += 3 << v15;
      v15 += 2;
      v21 = v18 + 6;
      v18 += 3;
    }
    v12 += ((_DWORD)v17 - v18) << v15;
    if (v15 < 15)
    {
      v15 += 2;
    }
    else
    {
      if (!a6 && (unint64_t)v16 > v14)
        return -70;
      *v16++ = v12;
      v12 >>= 16;
      v15 -= 14;
    }
LABEL_25:
    v22 = *(__int16 *)(a3 + 2 * v17);
    v23 = ~v11 + 2 * v10;
    if (v22 >= 0)
      v24 = *(__int16 *)(a3 + 2 * v17);
    else
      v24 = -v22;
    v11 -= v24;
    v25 = v22 + 1;
    if (v25 >= v10)
      v26 = v23;
    else
      v26 = 0;
    v27 = v26 + v25;
    v28 = v26 + v25 < v23;
    v8 = v27 == 1;
    if (v11 < 1)
      return -1;
    if (v11 >= v10)
    {
      v30 = v13;
    }
    else
    {
      v29 = v10;
      LODWORD(v30) = v13;
      do
      {
        v30 = (v30 - 1);
        v10 = v29 >> 1;
        v31 = v11 < v29 >> 1;
        v29 >>= 1;
      }
      while (v31);
    }
    v12 += v27 << v15;
    v15 = v15 + v13 - v28;
    if (v15 >= 17)
    {
      if (!a6 && (unint64_t)v16 > v14)
        return -70;
      *v16++ = v12;
      v12 >>= 16;
      v15 -= 16;
    }
    v9 = v17 + 1;
    if ((int)v17 + 1 < v6)
    {
      v13 = v30;
      if (v11 > 1)
        continue;
    }
    break;
  }
LABEL_43:
  if (v11 != 1)
    return -1;
  if (!a6 && (unint64_t)v16 > v14)
    return -70;
  *v16 = v12;
  v32 = v15 + 7;
  v31 = v15 < -7;
  v33 = v15 + 14;
  if (v31)
    v32 = v33;
  return (char *)v16 + (v32 >> 3) - (char *)a1;
}

uint64_t sub_1D4B4E584(unsigned int a1, unsigned int a2, unsigned int a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v4 = 31 - a4 - __clz(a2 - 1);
  v5 = 32 - __clz(a2);
  v6 = 33 - __clz(a3);
  if (v5 >= v6)
    v5 = v6;
  if (a1)
    v7 = a1;
  else
    v7 = 11;
  if (v4 >= v7)
    v4 = v7;
  if (v5 > v4)
    v4 = v5;
  if (v4 <= 5)
    v4 = 5;
  if (v4 >= 0xC)
    return 12;
  else
    return v4;
}

uint64_t sub_1D4B4E5F0(unsigned int a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;

  v3 = 29 - __clz(a2 - 1);
  v4 = 32 - __clz(a2);
  v5 = 33 - __clz(a3);
  if (v4 >= v5)
    v4 = v5;
  if (a1)
    v6 = a1;
  else
    v6 = 11;
  if (v3 >= v6)
    v3 = v6;
  if (v4 > v3)
    v3 = v4;
  if (v3 <= 5)
    v3 = 5;
  if (v3 >= 0xC)
    return 12;
  else
    return v3;
}

uint64_t sub_1D4B4E658(__int16 *a1, unsigned int a2, unsigned int *a3, unint64_t a4, unsigned int a5, int a6)
{
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  unsigned __int16 v10;
  int v11;
  unsigned int v12;
  __int16 v13;
  char v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int16 *v22;
  __int16 v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  __int16 *v29;
  uint64_t v30;
  unsigned int v31;
  __int16 *v32;
  uint64_t v33;
  unsigned int *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;

  if (a2)
    result = a2;
  else
    result = 11;
  if (result < 5)
    return -1;
  if (result > 0xC)
    return -44;
  v8 = 32 - __clz(a4);
  v9 = 33 - __clz(a5);
  if (v8 >= v9)
    v8 = v9;
  if (result < v8)
    return -1;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  if (a6)
    v13 = -1;
  else
    v13 = 1;
  v14 = 62 - result;
  v15 = 1 << result;
  v16 = a4 >> result;
  LODWORD(v17) = 1 << result;
  do
  {
    v18 = a3[v12];
    if (v18 == a4)
      return 0;
    v19 = v12;
    if ((_DWORD)v18)
    {
      if (v18 <= v16)
      {
        a1[v12] = v13;
        LODWORD(v17) = v17 - 1;
      }
      else
      {
        v20 = 0x4000000000000000uLL / a4 * v18;
        v21 = v20 >> v14;
        if (((v20 >> v14) & 0xFFF8) == 0
          && v20 - ((unint64_t)(unsigned __int16)(v20 >> v14) << v14) > (unint64_t)dword_1D4BD6000[(unsigned __int16)(v20 >> v14)] << (42 - result))
        {
          LOWORD(v21) = v21 + 1;
        }
        if ((unsigned __int16)v21 > v10)
        {
          v11 = v19;
          v10 = v21;
        }
        a1[v19] = v21;
        LODWORD(v17) = v17 - (unsigned __int16)v21;
      }
    }
    else
    {
      a1[v12] = 0;
    }
    v12 = v19 + 1;
  }
  while ((int)v19 + 1 <= a5);
  v22 = &a1[v11];
  v23 = *v22;
  if (-(int)v17 < *v22 >> 1)
  {
LABEL_52:
    *v22 = v23 + v17;
    return result;
  }
  v24 = 0;
  v25 = (3 * a4) >> (result + 1);
  v26 = a5 + 1;
  v27 = a3;
  v28 = v26;
  v29 = a1;
  do
  {
    v31 = *v27++;
    v30 = v31;
    if (v31)
    {
      if (v30 <= v16)
      {
        *v29 = v13;
      }
      else
      {
        if (v30 > v25)
        {
          *v29 = -2;
          goto LABEL_37;
        }
        *v29 = 1;
      }
      ++v24;
      a4 -= v30;
    }
    else
    {
      *v29 = 0;
    }
LABEL_37:
    ++v29;
    --v28;
  }
  while (v28);
  v17 = (v15 - v24);
  if (v15 != v24)
  {
    if (a4 / v17 > v25)
    {
      v32 = a1;
      v33 = a5 + 1;
      v34 = a3;
      v35 = 3 * a4 / (2 * v17);
      do
      {
        if (*v32 == -2)
        {
          v36 = *v34;
          if (v36 <= v35)
          {
            *v32 = 1;
            ++v24;
            a4 -= v36;
          }
        }
        ++v34;
        ++v32;
        --v33;
      }
      while (v33);
      LODWORD(v17) = v15 - v24;
    }
    if (v24 == (_DWORD)v26)
    {
      v37 = 0;
      v38 = 0;
      v39 = 0;
      do
      {
        if (a3[v37] > v38)
        {
          v39 = v37;
          v38 = a3[v37];
        }
        ++v37;
      }
      while (v26 != v37);
      v22 = &a1[v39];
      v23 = *v22;
      goto LABEL_52;
    }
    if (a4)
    {
      v40 = 0;
      v41 = ~(-1 << (61 - result));
      v42 = (((unint64_t)v17 << v14) + v41) / a4;
      while (1)
      {
        v43 = v40;
        if (a1[v40] == -2)
        {
          v44 = v41 + v42 * a3[v40];
          v45 = (v44 >> v14) - (v41 >> v14);
          if (!v45)
            return -1;
          a1[v43] = v45;
          v41 = v44;
        }
        v40 = v43 + 1;
        if ((int)v43 + 1 > a5)
          return result;
      }
    }
    if ((_DWORD)v17)
    {
      v46 = 0;
      do
      {
        v47 = v46;
        v48 = a1[v46];
        if (v48 >= 1)
        {
          LODWORD(v17) = v17 - 1;
          a1[v47] = v48 + 1;
        }
        if ((_DWORD)v47 == a5)
          v46 = 0;
        else
          v46 = v47 + 1;
      }
      while ((_DWORD)v17);
    }
  }
  return result;
}

uint64_t sub_1D4B4E968(uint64_t a1, unsigned int a2)
{
  *(_WORD *)a1 = 0;
  *(_WORD *)(a1 + 2) = a2;
  *(_DWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 8 * a2 + 8) = 0;
  return 0;
}

uint64_t sub_1D4B4E984(unint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4, unsigned __int16 *a5)
{
  return sub_1D4B4E998(a1, a2, a3, a4, a5, a4 + (a4 >> 7) + 12 <= a2);
}

uint64_t sub_1D4B4E998(unint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4, unsigned __int16 *a5, int a6)
{
  unint64_t v6;
  unint64_t v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int16 *v19;
  unsigned int v20;
  _QWORD *v21;
  unint64_t v22;
  int v23;
  unsigned __int16 *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int v31;
  unsigned __int16 *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unsigned __int16 *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  unsigned __int16 *v43;
  int v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  unsigned __int16 *v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  int v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  _QWORD *v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  char *v73;

  if (a4 < 3 || a2 < 9)
    return 0;
  v6 = a3 + a4;
  v7 = (unint64_t)a1 + a2 - 8;
  v10 = *a5;
  v8 = a5 + 2;
  v9 = v10;
  v11 = 1 << (v10 - 1);
  if (!v10)
    v11 = 1;
  v12 = &v8[2 * v11];
  v13 = &v12[4 * *(unsigned __int8 *)(a3 + a4 - 1)];
  v14 = v8[((unint64_t)(((*((_DWORD *)v13 + 1) + 0x8000) & 0xFFFF0000) - *((_DWORD *)v13 + 1)) >> ((*((_DWORD *)v13 + 1) + 0x8000) >> 16))
         + *(int *)v13];
  if ((a4 & 1) != 0)
  {
    v23 = *(unsigned __int8 *)(v6 - 3);
    v17 = (unsigned __int8 *)(v6 - 3);
    v24 = &v12[4 * v17[1]];
    LODWORD(v22) = v8[((unint64_t)(((*((_DWORD *)v24 + 1) + 0x8000) & 0xFFFF0000) - *((_DWORD *)v24 + 1)) >> ((*((_DWORD *)v24 + 1) + 0x8000) >> 16))
                    + *(int *)v24];
    v25 = *(unsigned int *)&v12[4 * v23 + 2] + v14;
    v26 = v25 >> 16;
    v27 = dword_1D4BD6020[v25 >> 16] & v14;
    v20 = v8[(v14 >> SBYTE2(v25)) + *(int *)&v12[4 * v23]];
    v28 = v25 >> 19;
    *a1 = v27;
    v29 = (unint64_t *)((char *)a1 + (v25 >> 19));
    if ((unint64_t)v29 <= v7)
      v21 = (unint64_t *)((char *)a1 + (v25 >> 19));
    else
      v21 = (_QWORD *)v7;
    v15 = v26 & 7;
    v16 = v27 >> (8 * v28);
    if (a6)
      v21 = v29;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v18 = *(unsigned __int8 *)(v6 - 2);
    v17 = (unsigned __int8 *)(v6 - 2);
    v19 = &v12[4 * v18];
    v20 = v8[((unint64_t)(((*((_DWORD *)v19 + 1) + 0x8000) & 0xFFFF0000) - *((_DWORD *)v19 + 1)) >> ((*((_DWORD *)v19 + 1) + 0x8000) >> 16))
           + *(int *)v19];
    v21 = a1;
    LODWORD(v22) = v8[((unint64_t)(((*((_DWORD *)v13 + 1) + 0x8000) & 0xFFFF0000) - *((_DWORD *)v13 + 1)) >> ((*((_DWORD *)v13 + 1) + 0x8000) >> 16))
                    + *(int *)v13];
  }
  v22 = v22;
  v30 = v20;
  if ((a4 & 2) == 0)
  {
    v31 = *(v17 - 2);
    v17 -= 2;
    v32 = &v12[4 * v17[1]];
    v33 = *(_DWORD *)v32;
    v34 = (*((unsigned int *)v32 + 1) + (unint64_t)v22) >> 16;
    v35 = (unint64_t)(dword_1D4BD6020[v34] & v22) << v15;
    v36 = v15 + v34;
    v22 = v8[(v22 >> v34) + (uint64_t)v33];
    v37 = &v12[4 * v31];
    LODWORD(v34) = *(_DWORD *)v37;
    v38 = (*((unsigned int *)v37 + 1) + v30) >> 16;
    v39 = v35 | ((unint64_t)(dword_1D4BD6020[v38] & v30) << v36) | v16;
    v40 = v36 + v38;
    v30 = v8[(v30 >> v38) + (int)v34];
    v41 = v40 >> 3;
    *v21 = v39;
    v21 = (_QWORD *)((char *)v21 + v41);
    if (!a6 && (unint64_t)v21 > v7)
      v21 = (_QWORD *)v7;
    v15 = v40 & 7;
    v16 = v39 >> (8 * v41);
  }
  if ((unint64_t)v17 <= a3)
  {
    v60 = v21;
  }
  else
  {
    do
    {
      v42 = *(v17 - 4);
      v17 -= 4;
      v43 = &v12[4 * v17[3]];
      v44 = *(_DWORD *)v43;
      v45 = (v22 + *((unsigned int *)v43 + 1)) >> 16;
      v46 = v15 + ((v22 + *((_DWORD *)v43 + 1)) >> 16);
      v47 = v8[(v22 >> v45) + v44];
      v48 = &v12[4 * v17[2]];
      v49 = (v30 + *((unsigned int *)v48 + 1)) >> 16;
      v50 = v15 + v45 + v49;
      v51 = v8[(v30 >> ((v30 + *((_DWORD *)v48 + 1)) >> 16)) + *(int *)v48];
      v52 = (*(unsigned int *)&v12[4 * v17[1] + 2] + v47) >> 16;
      v53 = *(int *)&v12[4 * v42];
      v54 = (*(unsigned int *)&v12[4 * v42 + 2] + v51) >> 16;
      v55 = v50 + v52 + v54;
      v56 = v55 >> 3;
      v57 = (unint64_t)v21 + v56 > v7 && a6 == 0;
      v58 = (unint64_t)(v22 & dword_1D4BD6020[v45]) << v15;
      v22 = v8[(v47 >> ((*(_DWORD *)&v12[4 * v17[1] + 2] + v47) >> 16)) + *(int *)&v12[4 * v17[1]]];
      v59 = v58 | v16 | ((unint64_t)(v30 & dword_1D4BD6020[v49]) << v46) | ((unint64_t)(dword_1D4BD6020[v52] & v47) << v50) | ((unint64_t)(dword_1D4BD6020[v54] & v51) << (v50 + ((*(_DWORD *)&v12[4 * v17[1] + 2] + v47) >> 16)));
      v30 = v8[(v51 >> v54) + v53];
      if (v57)
        v60 = (_QWORD *)v7;
      else
        v60 = (_QWORD *)((char *)v21 + v56);
      *v21 = v59;
      v16 = v59 >> (8 * v56);
      v15 = v55 & 7;
      v21 = v60;
    }
    while ((unint64_t)v17 > a3);
  }
  v61 = dword_1D4BD6020[v9];
  v62 = ((v22 & v61) << v15) | v16;
  v63 = (v15 + v9) >> 3;
  *v60 = v62;
  v64 = (_QWORD *)((char *)v60 + v63);
  if ((unint64_t)v60 + v63 > v7)
    v64 = (_QWORD *)v7;
  v65 = ((_BYTE)v15 + (_BYTE)v9) & 7;
  v66 = ((v30 & v61) << v65) | (v62 >> (8 * v63));
  v67 = v65 + v9;
  v68 = v67 >> 3;
  *v64 = v66;
  v69 = (_QWORD *)((char *)v64 + v68);
  if ((unint64_t)v64 + v68 > v7)
    v69 = (_QWORD *)v7;
  v70 = v67 & 7;
  v71 = (v66 >> (8 * v68)) | (1 << v70);
  v72 = v70 + 1;
  *v69 = v71;
  v73 = (char *)v69 + (v72 >> 3);
  if (v7 <= (unint64_t)v73)
    return 0;
  if ((v72 & 7) != 0)
    return v73 - (char *)a1 + 1;
  return v73 - (char *)a1;
}

uint64_t sub_1D4B4ED60(void *a1, unsigned int *a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;
  uint64_t result;
  unsigned int v15;

  v8 = *a2;
  bzero(a1, 4 * (*a2 + 1));
  if (a4)
  {
    if (a4 >= 1)
    {
      v9 = &a3[a4];
      do
      {
        v10 = *a3++;
        ++*((_DWORD *)a1 + v10);
      }
      while (a3 < v9);
    }
    do
      v11 = v8;
    while (!*((_DWORD *)a1 + v8--));
    v13 = 0;
    LODWORD(result) = 0;
    *a2 = v8 + 1;
    do
    {
      v15 = *((_DWORD *)a1 + v13);
      if (v15 <= result)
        result = result;
      else
        result = v15;
    }
    while (v13++ < v11);
  }
  else
  {
    result = 0;
    *a2 = 0;
  }
  return result;
}

uint64_t sub_1D4B4EE1C(void *a1, unsigned int *a2, unsigned __int8 *a3, unint64_t a4, char *a5, unint64_t a6)
{
  if (a4 <= 0x5DB)
    return sub_1D4B4ED60(a1, a2, a3, a4);
  if ((a5 & 3) != 0)
    return -1;
  if (a6 >= 0x1000)
    return sub_1D4B4EE6C(a1, a2, (unsigned int *)a3, a4, 0, a5);
  return -66;
}

uint64_t sub_1D4B4EE6C(void *a1, unsigned int *a2, unsigned int *a3, uint64_t a4, int a5, char *a6)
{
  uint64_t v6;
  size_t v9;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  char *v16;
  char *v17;
  char *v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint32x4_t v27;
  uint32x4_t v28;
  unsigned int v29;

  v6 = a4;
  v9 = 4 * (*a2 + 1);
  if (a4)
  {
    v13 = (unsigned int *)((char *)a3 + a4);
    bzero(a6, 0x1000uLL);
    v14 = a3;
    v15 = a3;
    if (v6 >= 20)
    {
      v16 = a6 + 1024;
      v17 = a6 + 2048;
      v18 = a6 + 3072;
      v19 = *a3;
      v14 = a3;
      v15 = a3;
      do
      {
        v20 = v15[1];
        ++*(_DWORD *)&a6[4 * v19];
        ++*(_DWORD *)&v16[4 * BYTE1(v19)];
        ++*(_DWORD *)&v17[4 * BYTE2(v19)];
        ++*(_DWORD *)&v18[4 * HIBYTE(v19)];
        v21 = v15[2];
        ++*(_DWORD *)&a6[4 * v20];
        ++*(_DWORD *)&v16[4 * BYTE1(v20)];
        ++*(_DWORD *)&v17[4 * BYTE2(v20)];
        ++*(_DWORD *)&v18[(v20 >> 22) & 0x3FC];
        v22 = v15[3];
        ++*(_DWORD *)&a6[4 * v21];
        ++*(_DWORD *)&v16[4 * BYTE1(v21)];
        ++*(_DWORD *)&v17[4 * BYTE2(v21)];
        ++*(_DWORD *)&v18[(v21 >> 22) & 0x3FC];
        v23 = v15[4];
        v15 += 4;
        v19 = v23;
        ++*(_DWORD *)&a6[4 * v22];
        ++*(_DWORD *)&v16[4 * BYTE1(v22)];
        ++*(_DWORD *)&v17[4 * BYTE2(v22)];
        ++*(_DWORD *)&v18[(v22 >> 22) & 0x3FC];
        v14 += 4;
      }
      while (v15 + 1 < (unsigned int *)((char *)a3 + v6 - 15));
    }
    if (v15 < v13)
    {
      v24 = (char *)((char *)a3 + v6 - (char *)v14);
      do
      {
        v25 = *(unsigned __int8 *)v15;
        v15 = (unsigned int *)((char *)v15 + 1);
        ++*(_DWORD *)&a6[4 * v25];
        --v24;
      }
      while (v24);
    }
    v26 = 0;
    v27 = 0uLL;
    do
    {
      v28 = (uint32x4_t)vaddq_s32(vaddq_s32(*(int32x4_t *)&a6[v26 + 2048], *(int32x4_t *)&a6[v26 + 1024]), vaddq_s32(*(int32x4_t *)&a6[v26 + 3072], *(int32x4_t *)&a6[v26]));
      *(uint32x4_t *)&a6[v26] = v28;
      v27 = vmaxq_u32(v28, v27);
      v26 += 16;
    }
    while (v26 != 1024);
    v6 = vmaxvq_u32(v27);
    v29 = 256;
    do
      --v29;
    while (!*(_DWORD *)&a6[4 * v29]);
    if (a5 && v29 > *a2)
    {
      return -48;
    }
    else
    {
      *a2 = v29;
      memmove(a1, a6, v9);
    }
  }
  else
  {
    bzero(a1, 4 * (*a2 + 1));
    *a2 = 0;
  }
  return v6;
}

uint64_t sub_1D4B4F0F0(void *a1, unsigned int *a2, unsigned int *a3, unint64_t a4, char *a5, unint64_t a6)
{
  if ((a5 & 3) != 0)
    return -1;
  if (a6 < 0x1000)
    return -66;
  if (*a2 <= 0xFE)
    return sub_1D4B4EE6C(a1, a2, a3, a4, 1, a5);
  *a2 = 255;
  return sub_1D4B4EE1C(a1, a2, (unsigned __int8 *)a3, a4, a5, a6);
}

unint64_t sub_1D4B4F13C(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, unint64_t a7)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t result;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  unsigned int v26;

  v7 = -(int)a6 & 3;
  v8 = a7 - v7;
  if (a7 >= v7)
  {
    v9 = a6 + v7;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  if (v8 < 0x2EC)
    return -1;
  if (a4 > 0xFF)
    return -46;
  *(_BYTE *)(v9 + 480) = 0;
  v14 = (a5 + 1);
  if (v14 >= 2)
  {
    v15 = (_BYTE *)(v9 + 481);
    v16 = v14 - 1;
    do
      *v15++ = v16--;
    while (v16);
  }
  if (a4)
  {
    v17 = (unsigned __int8 *)(a3 + 8);
    v18 = a4;
    v19 = (_BYTE *)(v9 + 493);
    do
    {
      v20 = *v17;
      v17 += 8;
      *v19++ = *(_BYTE *)(v9 + v20 + 480);
      --v18;
    }
    while (v18);
  }
  if (!a2)
    return -70;
  v26 = 12;
  if ((-(int)v9 & 3) != 0)
    return -1;
  if (a4 >= 2)
  {
    v21 = sub_1D4B4ED60((void *)(v9 + 400), &v26, (unsigned __int8 *)(v9 + 493), a4);
    if (v21 != 1 && v21 != a4)
    {
      v22 = sub_1D4B4E5F0(6u, a4, v26);
      result = sub_1D4B4E658((__int16 *)(v9 + 452), v22, (unsigned int *)(v9 + 400), a4, v26, 0);
      if (result > 0xFFFFFFFFFFFFFF88)
        return result;
      result = sub_1D4B4E320((_WORD *)(a1 + 1), a2 - 1, v9 + 452, v26, v22);
      if (result > 0xFFFFFFFFFFFFFF88)
        return result;
      v23 = result;
      result = sub_1D4B4E094((_WORD *)v9, (__int16 *)(v9 + 452), v26, v22, (_WORD *)(v9 + 236), 0xA4uLL);
      if (result > 0xFFFFFFFFFFFFFF88)
        return result;
      result = sub_1D4B4E984((unint64_t *)(a1 + 1 + v23), a2 - (v23 + 1), v9 + 493, a4, (unsigned __int16 *)v9);
      if (result > 0xFFFFFFFFFFFFFF88)
        return result;
      if (result)
      {
        result += v23;
        if (result > 0xFFFFFFFFFFFFFF88)
          return result;
        if (result >= 2 && result < a4 >> 1)
        {
          *(_BYTE *)a1 = result++;
          return result;
        }
      }
    }
  }
  if (a4 > 0x80)
    return -1;
  result = ((a4 + 1) >> 1) + 1;
  if (result > a2)
    return -70;
  *(_BYTE *)a1 = a4 + 127;
  *(_BYTE *)(v9 + a4 + 493) = 0;
  if (a4)
  {
    v24 = 0;
    v25 = (_BYTE *)(a1 + 1);
    do
    {
      *v25++ = *(_BYTE *)(v9 + v24 + 494) + 16 * *(_BYTE *)(v9 + v24 + 493);
      v24 += 2;
    }
    while (v24 < a4);
  }
  return result;
}

unint64_t sub_1D4B4F3B0(_QWORD *a1, _DWORD *a2, char *a3, unint64_t a4, _DWORD *a5)
{
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  __int16 v24;
  _WORD *v25;
  __int16 *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _DWORD v41[13];
  _BYTE v42[256];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  result = sub_1D4B4CD50(v42, 0x100uLL, (uint64_t)v41, &v32, (_DWORD *)&v32 + 1, a3, a4);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    *a5 = v41[0] != 0;
    v9 = HIDWORD(v32);
    if (HIDWORD(v32) <= 0xC)
    {
      v10 = v32;
      if (v32 <= *a2 + 1)
      {
        v11 = a1 + 1;
        *a1 = HIDWORD(v32);
        if ((_DWORD)v9)
        {
          v12 = 0;
          v13 = 0;
          do
          {
            v14 = v41[v12 + 1] << v12;
            v41[v12 + 1] = v13;
            v13 += v14;
            ++v12;
          }
          while (v9 != v12);
        }
        if ((_DWORD)v10)
        {
          v15 = v42;
          v16 = v10;
          v17 = a1 + 1;
          do
          {
            v18 = *v15++;
            v19 = v9 + 1 - v18;
            if (v18)
              v20 = v19;
            else
              v20 = 0;
            *v17++ = v20;
            --v16;
          }
          while (v16);
          v37 = 0;
          v38 = 0;
          v40 = 0;
          v39 = 0;
          v33 = 0;
          v34 = 0;
          v36 = 0;
          v21 = v10;
          v22 = (unsigned __int8 *)(a1 + 1);
          v35 = 0;
          do
          {
            v23 = *v22;
            v22 += 8;
            ++*((_WORD *)&v37 + v23);
            --v21;
          }
          while (v21);
        }
        else
        {
          v37 = 0;
          v38 = 0;
          v40 = 0;
          v39 = 0;
          v33 = 0;
          v34 = 0;
          v36 = 0;
          v35 = 0;
        }
        *((_WORD *)&v33 + (v9 + 1)) = 0;
        if ((_DWORD)v9)
        {
          v24 = 0;
          v25 = (_WORD *)&v33 + v9;
          v26 = (__int16 *)&v37 + v9;
          do
          {
            *v25-- = v24;
            v27 = *v26--;
            v24 = (unsigned __int16)(v27 + v24) >> 1;
            LODWORD(v9) = v9 - 1;
          }
          while ((_DWORD)v9);
        }
        if ((_DWORD)v10)
        {
          v28 = v10;
          do
          {
            v29 = *v11;
            v30 = *v11;
            v31 = *((unsigned __int16 *)&v33 + v30);
            *((_WORD *)&v33 + v30) = v31 + 1;
            if (v30)
              *v11 = (v31 << -(char)v30) | v29;
            ++v11;
            --v28;
          }
          while (v28);
        }
        *a2 = v10 - 1;
      }
      else
      {
        return -48;
      }
    }
    else
    {
      return -44;
    }
  }
  return result;
}

uint64_t sub_1D4B4F5C0(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(a1 + 8 * a2 + 8);
}

uint64_t sub_1D4B4F5CC(uint64_t *a1, unsigned int *a2, uint64_t a3, unsigned int a4, uint64_t a5, unint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t result;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  _WORD *v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  unint64_t v43;
  char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  BOOL v55;
  _BOOL4 v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  BOOL v61;
  int v62;
  _DWORD *v63;
  _DWORD *v64;
  int v65;
  _BYTE *v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  int v82;
  unsigned __int8 *v83;
  int v84;
  signed int v85;
  __int128 v86;
  unsigned __int8 *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  unsigned int v103;
  unsigned __int8 *v104;
  unsigned int v105;
  __int16 v106;
  uint64_t *v108;
  unsigned __int8 *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  int v119;
  unsigned __int8 *v120;
  int v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  unint64_t v125;
  _QWORD v126[3];
  __int16 v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v6 = -(int)a5 & 3;
  v7 = a6 - v6;
  if (a6 >= v6)
  {
    v8 = (_DWORD *)(a5 + v6);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  if (v7 >> 8 < 0x13)
    return -66;
  if (a3 > 0xFF)
    return -46;
  v14 = v8 + 2;
  v15 = v8 + 1024;
  v16 = (a3 + 1);
  bzero(v8, 0x1300uLL);
  v17 = a2;
  v18 = (a3 + 1);
  do
  {
    v20 = *v17++;
    v19 = v20;
    v21 = 189 - __clz(v20);
    if (v20 >= 0xA5)
      v19 = v21;
    ++LOWORD(v15[v19]);
    --v18;
  }
  while (v18);
  v22 = 0;
  v23 = *((unsigned __int16 *)v8 + 2430);
  do
  {
    v24 = &v8[v22];
    v23 += LOWORD(v8[v22 + 1214]);
    *((_WORD *)v24 + 2428) = v23;
    *((_WORD *)v24 + 2429) = v23;
    --v22;
  }
  while (v22 != -191);
  v25 = 0;
  do
  {
    v26 = a2[v25];
    v27 = 189 - __clz(v26);
    if (v26 < 0xA5)
      v27 = a2[v25];
    v28 = &v15[v27 + 1];
    v29 = *((unsigned __int16 *)v28 + 1);
    *((_WORD *)v28 + 1) = v29 + 1;
    v30 = &v14[2 * v29];
    *v30 = v26;
    *((_BYTE *)v30 + 6) = v25++;
  }
  while (v16 != v25);
  v31 = 0x3FFFFFFFFFFFFFE6;
  do
  {
    v32 = LOWORD(v8[v31 + 1215]);
    v33 = HIWORD(v8[v31 + 1215]) - (_DWORD)v32;
    if (v33 >= 2)
      sub_1D4B512E4((uint64_t)&v14[2 * v32], 0, (v33 - 1));
    ++v31;
  }
  while (v31 * 4);
  v34 = 0;
  v35 = a3 << 32;
  v36 = a3 + 1;
  v37 = &v8[2 * (int)a3 + 5];
  v38 = -1;
  do
  {
    --v34;
    v39 = *((_DWORD *)v37 - 3);
    v35 -= 0x100000000;
    --v36;
    v37 -= 4;
    --v38;
  }
  while (!v39);
  if (a4)
    v40 = a4;
  else
    v40 = 11;
  v41 = a3 + v34;
  v42 = a3 + v34 + 1;
  v43 = (a3 + v34 + 256);
  v44 = (char *)v14 + (v35 >> 29);
  v8[514] = *(_DWORD *)v44 + v39;
  *((_WORD *)v44 + 2) = 256;
  *v37 = 256;
  if (v42 >= 2)
  {
    v45 = a3 + v38;
    v46 = 257;
    if (v43 > 0x101)
      v46 = (v41 + 256);
    v47 = 8 * v46;
    v48 = 2048;
    do
    {
      v8[(unint64_t)v48 / 4 + 4] = 0x40000000;
      v48 += 8;
    }
    while (v47 != v48);
    *v8 = 0x80000000;
    if ((int)v43 <= 257)
      v49 = 257;
    else
      v49 = v43;
    v50 = v8 + 516;
    v51 = 256;
    v52 = 256;
    do
    {
      v53 = v14[2 * v45];
      ++v51;
      v54 = v14[2 * v52];
      v55 = v53 >= v54;
      v56 = v53 < v54;
      if (v55)
        v57 = v52 + 1;
      else
        v57 = v52;
      if (!v55)
        v52 = v45;
      v58 = v45 - v56;
      v59 = v14[2 * v58];
      v60 = v14[2 * v57];
      v61 = v59 >= v60;
      if (v59 >= v60)
        v62 = v57;
      else
        v62 = v58;
      v63 = &v14[2 * v52];
      v64 = &v14[2 * v62];
      *v50 = *v64 + *v63;
      v50 += 2;
      v65 = !v61;
      if (v61)
        v52 = v57 + 1;
      else
        v52 = v57;
      v45 = v58 - v65;
      *((_WORD *)v64 + 2) = v51;
      *((_WORD *)v63 + 2) = v51;
    }
    while (v49 != v51);
    HIBYTE(v14[2 * (int)v43 + 1]) = 0;
    v66 = (char *)&v8[2 * (v41 + 255) + 3] + 3;
    do
    {
      *v66 = HIBYTE(v14[2 * *(unsigned __int16 *)(v66 - 3) + 1]) + 1;
      v66 -= 8;
      LODWORD(v43) = v43 - 1;
    }
    while ((int)v43 > 256);
  }
  else
  {
    *v8 = 0x80000000;
    HIBYTE(v14[2 * (int)v43 + 1]) = 0;
  }
  v67 = (v41 + 2);
  if ((v42 & 0x80000000) == 0)
  {
    v68 = (char *)v8 + 15;
    v69 = v67;
    do
    {
      *v68 = HIBYTE(v14[2 * *(unsigned __int16 *)(v68 - 3) + 1]) + 1;
      v68 += 8;
      --v69;
    }
    while (v69);
  }
  v70 = HIBYTE(v14[2 * v36 + 1]);
  LODWORD(v71) = v70;
  v72 = v70 - v40;
  if (v70 > v40)
  {
    LODWORD(v71) = v40;
    v73 = v35 + 0x100000000;
    v74 = *((unsigned __int8 *)v14 + ((v35 + 0x100000000) >> 29) + 7);
    if (v40 >= v74)
    {
      v75 = 0;
      v80 = v73 >> 32;
      LODWORD(v76) = a3 + v34 + 1;
    }
    else
    {
      v75 = 0;
      v76 = (a3 + v34 + 1);
      v77 = (char *)&v8[2 * (int)v76 + 3] + 3;
      v78 = v76 << 32;
      do
      {
        v75 += (1 << v72) + (-1 << (v70 - v74));
        *v77 = v40;
        v79 = *(v77 - 8);
        v77 -= 8;
        LOBYTE(v74) = v79;
        v78 -= 0x100000000;
        LODWORD(v76) = v76 - 1;
      }
      while (v40 < v79);
      v80 = v78 >> 32;
    }
    v81 = v76 + 1;
    v82 = v80 + 1;
    v83 = (unsigned __int8 *)&v8[2 * v80 + 3] + 3;
    do
    {
      v84 = *v83;
      v83 -= 8;
      --v81;
      --v82;
    }
    while (v40 == v84);
    v85 = v75 >> v72;
    v125 = 0xF0F0F0F0F0F0F0F0;
    *(_QWORD *)&v86 = 0xF0F0F0F0F0F0F0F0;
    *((_QWORD *)&v86 + 1) = 0xF0F0F0F0F0F0F0F0;
    v123 = v86;
    v124 = v86;
    v122 = v86;
    if ((v82 & 0x80000000) == 0)
    {
      v87 = (unsigned __int8 *)&v8[2 * v81 + 3] + 3;
      v88 = v40;
      do
      {
        v90 = *v87;
        v87 -= 8;
        v89 = v90;
        if (v88 <= v90)
        {
          v91 = v81;
        }
        else
        {
          *((_DWORD *)&v122 + v40 - v89) = v81;
          v91 = v81;
          v88 = v89;
        }
        --v81;
      }
      while (v91 > 0);
    }
    if (v85 >= 1)
    {
      do
      {
        v92 = __clz(v85);
        if (v92 == 31)
        {
LABEL_78:
          LODWORD(v93) = 1;
        }
        else
        {
          v93 = 32 - v92;
          while (1)
          {
            v94 = *((unsigned int *)&v122 + v93);
            v95 = v93 - 1;
            if ((_DWORD)v94 != -252645136)
            {
              v96 = *((unsigned int *)&v122 + v95);
              if ((_DWORD)v96 == -252645136 || v14[2 * v94] <= (2 * v14[2 * v96]))
                break;
            }
            --v93;
            if ((v95 & 0xFFFFFFFE) == 0)
              goto LABEL_78;
          }
          if (v93 > 0xC)
            goto LABEL_84;
        }
        v97 = 4 * v93;
        while (*(_DWORD *)((char *)&v122 + v97) == -252645136)
        {
          LODWORD(v93) = v93 + 1;
          v97 += 4;
          if (v97 == 52)
          {
            LODWORD(v93) = 13;
            break;
          }
        }
LABEL_84:
        v98 = v93 - 1;
        v99 = *((unsigned int *)&v122 + v93);
        v100 = *((_DWORD *)&v122 + (v93 - 1));
        ++HIBYTE(v14[2 * v99 + 1]);
        if (v100 == -252645136)
          v101 = v99;
        else
          v101 = v100;
        *((_DWORD *)&v122 + v98) = v101;
        v102 = -252645136;
        if ((_DWORD)v99)
        {
          v103 = v99 - 1;
          if (v40 - (_DWORD)v93 == HIBYTE(v14[2 * v103 + 1]))
            v102 = v103;
          else
            v102 = -252645136;
        }
        v85 += -1 << v98;
        *((_DWORD *)&v122 + v93) = v102;
      }
      while (v85 > 0);
    }
    if (v85 < 0)
    {
      v116 = DWORD1(v122);
      do
      {
        if (v85 < 0)
          v117 = -1;
        else
          v117 = v85;
        v118 = v117 + 1;
        v119 = v85;
        while (v116 != -252645136)
        {
          --HIBYTE(v14[2 * ++v116 + 1]);
          if (v118 == ++v119)
            goto LABEL_93;
        }
        v116 = v82 + 2;
        v120 = (unsigned __int8 *)&v8[2 * v82++ + 3] + 3;
        do
        {
          v121 = *v120;
          v120 -= 8;
          --v82;
          --v116;
        }
        while (v40 == v121);
        --HIBYTE(v14[2 * v116 + 1]);
        v85 = v119 + 1;
      }
      while (v119 <= -2);
    }
  }
LABEL_93:
  if (v71 > 0xC)
    return -1;
  v122 = 0uLL;
  WORD4(v123) = 0;
  *(_QWORD *)&v123 = 0;
  memset(v126, 0, sizeof(v126));
  v127 = 0;
  if ((v42 & 0x80000000) == 0)
  {
    v104 = (unsigned __int8 *)v8 + 15;
    do
    {
      v105 = *v104;
      v104 += 8;
      ++*((_WORD *)&v122 + v105);
      --v67;
    }
    while (v67);
  }
  result = v71;
  if ((int)v71 >= 1)
  {
    v106 = 0;
    v71 = v71;
    do
    {
      *((_WORD *)v126 + v71) = v106;
      v106 = (unsigned __int16)(*((_WORD *)&v122 + v71) + v106) >> 1;
    }
    while (v71-- > 1);
  }
  if ((a3 & 0x80000000) == 0)
  {
    v108 = a1 + 1;
    v109 = (unsigned __int8 *)v8 + 15;
    v110 = (a3 + 1);
    do
    {
      v111 = *(v109 - 1);
      v112 = *v109;
      v109 += 8;
      v108[v111] = v112;
      --v110;
    }
    while (v110);
    do
    {
      v113 = *v108;
      v114 = *v108;
      v115 = *((unsigned __int16 *)v126 + v114);
      *((_WORD *)v126 + v114) = v115 + 1;
      if (v114)
        *v108 = (v115 << -(char)v114) | v113;
      ++v108;
      --v16;
    }
    while (v16);
  }
  *a1 = result;
  return result;
}

unint64_t sub_1D4B4FCA8(uint64_t a1, unsigned int *a2, int a3)
{
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  if (a3 < 0)
    return 0;
  v3 = 0;
  v4 = (unsigned __int8 *)(a1 + 8);
  v5 = (a3 + 1);
  do
  {
    v7 = *v4;
    v4 += 8;
    v6 = v7;
    v8 = *a2++;
    v3 += v6 * (unint64_t)v8;
    --v5;
  }
  while (v5);
  return v3 >> 3;
}

BOOL sub_1D4B4FCDC(uint64_t a1, int *a2, int a3)
{
  int v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;

  if (a3 < 0)
    return 1;
  v3 = 0;
  v4 = (unsigned __int8 *)(a1 + 8);
  v5 = (a3 + 1);
  do
  {
    v6 = *a2++;
    v9 = v6 == 0;
    v8 = *v4;
    v4 += 8;
    v7 = v8;
    v9 = !v9 && v7 == 0;
    v10 = v9;
    v3 |= v10;
    --v5;
  }
  while (v5);
  return v3 == 0;
}

uint64_t sub_1D4B4FD24(unint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  int v12;
  int v13;
  unsigned __int8 v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  int v24;
  unsigned __int8 v25;
  unsigned __int8 *v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t j;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 v45;
  _QWORD *v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  char v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  BOOL v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  char *v58;
  unsigned __int8 v59;
  unsigned __int8 *v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  unsigned __int8 v64;
  unsigned __int8 *v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  unsigned __int8 v69;
  unsigned __int8 *v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  unsigned __int8 v74;
  unsigned __int8 *v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  unsigned __int8 v79;
  unsigned __int8 *v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  uint64_t k;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t m;
  uint64_t v92;
  uint64_t v93;
  char v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unsigned __int8 v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t v101;
  char v102;
  unsigned __int8 v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t i7;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t i8;
  uint64_t v114;
  char v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unsigned __int8 v119;
  uint64_t i9;
  uint64_t v121;
  unint64_t *v122;
  uint64_t v123;
  char v124;
  unsigned __int8 v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t n;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t ii;
  uint64_t v136;
  char v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unsigned __int8 v141;
  uint64_t jj;
  uint64_t v143;
  unint64_t *v144;
  uint64_t v145;
  char v146;
  unsigned __int8 v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t kk;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t mm;
  uint64_t v158;
  char v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unsigned __int8 v163;
  uint64_t nn;
  uint64_t v165;
  unint64_t *v166;
  uint64_t v167;
  char v168;
  unsigned __int8 v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t i1;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t i2;
  uint64_t v180;
  char v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unsigned __int8 v185;
  uint64_t i3;
  uint64_t v187;
  unint64_t *v188;
  uint64_t v189;
  char v190;
  unsigned __int8 v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t i4;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t i5;
  uint64_t v202;
  char v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unsigned __int8 v207;
  uint64_t i6;
  uint64_t v209;
  unint64_t *v210;
  uint64_t v211;
  char v212;
  unsigned __int8 v213;
  unint64_t v214;
  unint64_t v215;

  if (a2 <= 8)
    return 0;
  v9 = *a5;
  v7 = a5 + 1;
  v8 = v9;
  v10 = (unint64_t)a1 + a2 - 8;
  if ((((unint64_t)v9 * a4) >> 3) + 8 > a2 || v8 >= 0xC)
  {
    if ((int)a4 <= 0)
      v12 = -(-(int)a4 & 3);
    else
      v12 = a4 & 3;
    v13 = v12 - 1;
    if (v12 < 1)
    {
      v15 = 0;
      v20 = 0;
      v22 = a1;
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v16 = (unsigned __int8 *)(a3 + (int)a4 - 1);
      v17 = v12 + 1;
      do
      {
        v18 = *v16--;
        v19 = v7[v18];
        v15 = (v15 >> v19) | v19 & 0xFFFFFFFFFFFFFF00;
        v14 += v19;
        --v17;
      }
      while (v17 > 1);
      LODWORD(a4) = ~v13 + a4;
      v20 = v14 & 7;
      *a1 = v15 >> -v14;
      v21 = (unint64_t *)((char *)a1 + ((unint64_t)v14 >> 3));
      if ((unint64_t)v21 <= v10)
        v22 = v21;
      else
        v22 = (unint64_t *)((char *)a1 + a2 - 8);
    }
    if ((a4 & 7) != 0)
    {
      for (i = 0; i != -3; --i)
      {
        v31 = v7[*(unsigned __int8 *)(a3 + (int)a4 - 1 + i)];
        v15 = (v15 >> v31) | v31;
        LOBYTE(v20) = v31 + v20;
      }
      a4 = (int)a4 - 4;
      v32 = v7[*(unsigned __int8 *)(a3 + a4)];
      v15 = (v15 >> v32) | v32 & 0xFFFFFFFFFFFFFF00;
      LOBYTE(v32) = v32 + v20;
      v20 = v32 & 7;
      *v22 = v15 >> -(char)v32;
      v33 = (_QWORD *)((char *)v22 + ((unint64_t)v32 >> 3));
      if ((unint64_t)v33 <= v10)
        v22 = v33;
      else
        v22 = (unint64_t *)((char *)a1 + a2 - 8);
    }
    if ((int)a4 >= 1)
    {
      v34 = a4;
      v35 = a3 + a4;
      v36 = v35 - 1;
      v37 = v35 - 5;
      do
      {
        for (j = 0; j != -3; --j)
        {
          v39 = v7[*(unsigned __int8 *)(v36 + j)];
          v15 = (v15 >> v39) | v39;
          LOBYTE(v20) = v39 + v20;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v43 = v7[*(unsigned __int8 *)(v34 + a3 - 4)];
        v44 = (v15 >> v43) | v43 & 0xFFFFFFFFFFFFFF00;
        v45 = v43 + v20;
        *v22 = v44 >> -v45;
        v46 = (_QWORD *)((char *)v22 + ((unint64_t)v45 >> 3));
        do
        {
          v47 = v7[*(unsigned __int8 *)(v37 + v40)];
          v42 = (v42 >> v47) | v47;
          v41 += v47;
          --v40;
        }
        while (v40 != -3);
        v48 = v45 & 7;
        if ((unint64_t)v46 <= v10)
          v49 = v46;
        else
          v49 = (_QWORD *)v10;
        v50 = v7[*(unsigned __int8 *)(a3 + v34 - 8)];
        v51 = v50 + v41;
        v52 = v51 + v48;
        v53 = v52;
        v22 = (_QWORD *)((char *)v49 + ((unint64_t)v52 >> 3));
        if ((unint64_t)v22 > v10)
          v22 = (_QWORD *)v10;
        v36 -= 8;
        v37 -= 8;
        v15 = (v42 >> v50) | v50 & 0xFFFFFFFFFFFFFF00 | (v44 >> v51);
        v20 = v52 & 7;
        *v49 = v15 >> -v53;
        v54 = v34 <= 8;
        v34 -= 8;
      }
      while (!v54);
    }
  }
  else
  {
    switch(v8)
    {
      case 7u:
        if ((int)a4 <= 0)
          v23 = -(-(int)a4 & 7);
        else
          v23 = a4 & 7;
        v24 = v23 - 1;
        if (v23 < 1)
        {
          v15 = 0;
          v20 = 0;
          v22 = a1;
        }
        else
        {
          v25 = 0;
          v15 = 0;
          v26 = (unsigned __int8 *)(a3 + (int)a4 - 1);
          v27 = v23 + 1;
          do
          {
            v28 = *v26--;
            v29 = v7[v28];
            v15 = (v15 >> v29) | v29 & 0xFFFFFFFFFFFFFF00;
            v25 += v29;
            --v27;
          }
          while (v27 > 1);
          LODWORD(a4) = ~v24 + a4;
          v20 = v25 & 7;
          *a1 = v15 >> -v25;
          v22 = (unint64_t *)((char *)a1 + ((unint64_t)v25 >> 3));
        }
        if ((a4 & 0xF) != 0)
        {
          for (k = 0; k != -7; --k)
          {
            v85 = v7[*(unsigned __int8 *)(a3 + (int)a4 - 1 + k)];
            v15 = (v15 >> v85) | v85;
            LOBYTE(v20) = v85 + v20;
          }
          a4 = (int)a4 - 8;
          v86 = v7[*(unsigned __int8 *)(a3 + a4)];
          v15 = (v15 >> v86) | v86 & 0xFFFFFFFFFFFFFF00;
          LOBYTE(v86) = v86 + v20;
          v20 = v86 & 7;
          *v22 = v15 >> -(char)v86;
          v22 = (_QWORD *)((char *)v22 + ((unint64_t)v86 >> 3));
        }
        if ((int)a4 >= 1)
        {
          v87 = a4;
          v88 = a3 + a4;
          v89 = v88 - 1;
          v90 = v88 - 9;
          do
          {
            for (m = 0; m != -7; --m)
            {
              v92 = v7[*(unsigned __int8 *)(v89 + m)];
              v15 = (v15 >> v92) | v92;
              LOBYTE(v20) = v92 + v20;
            }
            v93 = 0;
            v94 = 0;
            v95 = 0;
            v96 = v7[*(unsigned __int8 *)(v87 + a3 - 8)];
            v97 = (v15 >> v96) | v96 & 0xFFFFFFFFFFFFFF00;
            v98 = v96 + v20;
            *v22 = v97 >> -v98;
            do
            {
              v99 = v7[*(unsigned __int8 *)(v90 + v93)];
              v95 = (v95 >> v99) | v99;
              v94 += v99;
              --v93;
            }
            while (v93 != -7);
            v100 = (_QWORD *)((char *)v22 + ((unint64_t)v98 >> 3));
            v89 -= 16;
            v90 -= 16;
            v54 = v87 <= 16;
            v87 -= 16;
            v101 = v7[*(unsigned __int8 *)(a3 + v87)];
            v102 = v101 + v94;
            v15 = (v95 >> v101) | v101 & 0xFFFFFFFFFFFFFF00 | (v97 >> v102);
            v103 = v102 + (v98 & 7);
            v104 = v103;
            v105 = v15 >> -v103;
            v20 = v103 & 7;
            *v100 = v105;
            v22 = (unint64_t *)((char *)v100 + (v104 >> 3));
          }
          while (!v54);
        }
        break;
      case 8u:
        if ((int)a4 % 7 < 1)
        {
          v15 = 0;
          v20 = 0;
          v22 = a1;
        }
        else
        {
          v64 = 0;
          v15 = 0;
          v65 = (unsigned __int8 *)(a3 + (int)a4 - 1);
          v66 = (int)a4 % 7 + 1;
          do
          {
            v67 = *v65--;
            v68 = v7[v67];
            v15 = (v15 >> v68) | v68 & 0xFFFFFFFFFFFFFF00;
            v64 += v68;
            --v66;
          }
          while (v66 > 1);
          LODWORD(a4) = a4 - (int)a4 % 7;
          v20 = v64 & 7;
          *a1 = v15 >> -v64;
          v22 = (unint64_t *)((char *)a1 + ((unint64_t)v64 >> 3));
        }
        HIDWORD(v128) = -1227133513 * a4 + 306783378;
        LODWORD(v128) = HIDWORD(v128);
        if ((v128 >> 1) >= 0x12492493)
        {
          v129 = (int)a4;
          for (n = -1; n != -7; --n)
          {
            v131 = v7[*(unsigned __int8 *)(a3 + (int)a4 + n)];
            v15 = (v15 >> v131) | v131;
            LOBYTE(v20) = v131 + v20;
          }
          LODWORD(a4) = a4 - 7;
          v132 = v7[*(unsigned __int8 *)(a3 + v129 - 7)];
          v15 = (v15 >> v132) | v132 & 0xFFFFFFFFFFFFFF00;
          LOBYTE(v132) = v132 + v20;
          v20 = v132 & 7;
          *v22 = v15 >> -(char)v132;
          v22 = (_QWORD *)((char *)v22 + ((unint64_t)v132 >> 3));
        }
        if ((int)a4 >= 1)
        {
          v133 = a4;
          v134 = a3 + a4;
          do
          {
            for (ii = -1; ii != -7; --ii)
            {
              v136 = v7[*(unsigned __int8 *)(v134 + ii)];
              v15 = (v15 >> v136) | v136;
              LOBYTE(v20) = v136 + v20;
            }
            v137 = 0;
            v138 = 0;
            v139 = v7[*(unsigned __int8 *)(v133 + a3 - 7)];
            v140 = (v15 >> v139) | v139 & 0xFFFFFFFFFFFFFF00;
            v141 = v139 + v20;
            *v22 = v140 >> -v141;
            for (jj = -8; jj != -14; --jj)
            {
              v143 = v7[*(unsigned __int8 *)(v134 + jj)];
              v138 = (v138 >> v143) | v143;
              v137 += v143;
            }
            v144 = (_QWORD *)((char *)v22 + ((unint64_t)v141 >> 3));
            v134 -= 14;
            v54 = v133 <= 14;
            v133 -= 14;
            v145 = v7[*(unsigned __int8 *)(a3 + v133)];
            v146 = v145 + v137;
            v15 = (v138 >> v145) | v145 & 0xFFFFFFFFFFFFFF00 | (v140 >> v146);
            v147 = v146 + (v141 & 7);
            v148 = v147;
            v149 = v15 >> -v147;
            v20 = v147 & 7;
            *v144 = v149;
            v22 = (unint64_t *)((char *)v144 + (v148 >> 3));
          }
          while (!v54);
        }
        break;
      case 9u:
        if ((int)a4 % 6 < 1)
        {
          v15 = 0;
          v20 = 0;
          v22 = a1;
        }
        else
        {
          v69 = 0;
          v15 = 0;
          v70 = (unsigned __int8 *)(a3 + (int)a4 - 1);
          v71 = (int)a4 % 6 + 1;
          do
          {
            v72 = *v70--;
            v73 = v7[v72];
            v15 = (v15 >> v73) | v73 & 0xFFFFFFFFFFFFFF00;
            v69 += v73;
            --v71;
          }
          while (v71 > 1);
          LODWORD(a4) = a4 - (int)a4 % 6;
          v20 = v69 & 7;
          *a1 = v15 >> -v69;
          v22 = (unint64_t *)((char *)a1 + ((unint64_t)v69 >> 3));
        }
        HIDWORD(v150) = -1431655765 * a4 + 715827880;
        LODWORD(v150) = HIDWORD(v150);
        if ((v150 >> 2) >= 0x15555555)
        {
          v151 = (int)a4;
          for (kk = -1; kk != -6; --kk)
          {
            v153 = v7[*(unsigned __int8 *)(a3 + (int)a4 + kk)];
            v15 = (v15 >> v153) | v153;
            LOBYTE(v20) = v153 + v20;
          }
          LODWORD(a4) = a4 - 6;
          v154 = v7[*(unsigned __int8 *)(a3 + v151 - 6)];
          v15 = (v15 >> v154) | v154 & 0xFFFFFFFFFFFFFF00;
          LOBYTE(v154) = v154 + v20;
          v20 = v154 & 7;
          *v22 = v15 >> -(char)v154;
          v22 = (_QWORD *)((char *)v22 + ((unint64_t)v154 >> 3));
        }
        if ((int)a4 >= 1)
        {
          v155 = a4;
          v156 = a3 + a4;
          do
          {
            for (mm = -1; mm != -6; --mm)
            {
              v158 = v7[*(unsigned __int8 *)(v156 + mm)];
              v15 = (v15 >> v158) | v158;
              LOBYTE(v20) = v158 + v20;
            }
            v159 = 0;
            v160 = 0;
            v161 = v7[*(unsigned __int8 *)(v155 + a3 - 6)];
            v162 = (v15 >> v161) | v161 & 0xFFFFFFFFFFFFFF00;
            v163 = v161 + v20;
            *v22 = v162 >> -v163;
            for (nn = -7; nn != -12; --nn)
            {
              v165 = v7[*(unsigned __int8 *)(v156 + nn)];
              v160 = (v160 >> v165) | v165;
              v159 += v165;
            }
            v166 = (_QWORD *)((char *)v22 + ((unint64_t)v163 >> 3));
            v156 -= 12;
            v54 = v155 <= 12;
            v155 -= 12;
            v167 = v7[*(unsigned __int8 *)(a3 + v155)];
            v168 = v167 + v159;
            v15 = (v160 >> v167) | v167 & 0xFFFFFFFFFFFFFF00 | (v162 >> v168);
            v169 = v168 + (v163 & 7);
            v170 = v169;
            v171 = v15 >> -v169;
            v20 = v169 & 7;
            *v166 = v171;
            v22 = (unint64_t *)((char *)v166 + (v170 >> 3));
          }
          while (!v54);
        }
        break;
      case 0xAu:
        if ((int)a4 % 5 < 1)
        {
          v15 = 0;
          v20 = 0;
          v22 = a1;
        }
        else
        {
          v74 = 0;
          v15 = 0;
          v75 = (unsigned __int8 *)(a3 + (int)a4 - 1);
          v76 = (int)a4 % 5 + 1;
          do
          {
            v77 = *v75--;
            v78 = v7[v77];
            v15 = (v15 >> v78) | v78 & 0xFFFFFFFFFFFFFF00;
            v74 += v78;
            --v76;
          }
          while (v76 > 1);
          LODWORD(a4) = a4 - (int)a4 % 5;
          v20 = v74 & 7;
          *a1 = v15 >> -v74;
          v22 = (unint64_t *)((char *)a1 + ((unint64_t)v74 >> 3));
        }
        HIDWORD(v172) = -858993459 * a4 + 429496728;
        LODWORD(v172) = HIDWORD(v172);
        if ((v172 >> 1) >= 0x19999999)
        {
          v173 = (int)a4;
          for (i1 = -1; i1 != -5; --i1)
          {
            v175 = v7[*(unsigned __int8 *)(a3 + (int)a4 + i1)];
            v15 = (v15 >> v175) | v175;
            LOBYTE(v20) = v175 + v20;
          }
          LODWORD(a4) = a4 - 5;
          v176 = v7[*(unsigned __int8 *)(a3 + v173 - 5)];
          v15 = (v15 >> v176) | v176;
          LOBYTE(v176) = v176 + v20;
          v20 = v176 & 7;
          *v22 = v15 >> -(char)v176;
          v22 = (_QWORD *)((char *)v22 + ((unint64_t)v176 >> 3));
        }
        if ((int)a4 >= 1)
        {
          v177 = a4;
          v178 = a3 + a4;
          do
          {
            for (i2 = -1; i2 != -5; --i2)
            {
              v180 = v7[*(unsigned __int8 *)(v178 + i2)];
              v15 = (v15 >> v180) | v180;
              LOBYTE(v20) = v180 + v20;
            }
            v181 = 0;
            v182 = 0;
            v183 = v7[*(unsigned __int8 *)(v177 + a3 - 5)];
            v184 = (v15 >> v183) | v183;
            v185 = v183 + v20;
            *v22 = v184 >> -v185;
            for (i3 = -6; i3 != -10; --i3)
            {
              v187 = v7[*(unsigned __int8 *)(v178 + i3)];
              v182 = (v182 >> v187) | v187;
              v181 += v187;
            }
            v188 = (_QWORD *)((char *)v22 + ((unint64_t)v185 >> 3));
            v178 -= 10;
            v54 = v177 <= 10;
            v177 -= 10;
            v189 = v7[*(unsigned __int8 *)(a3 + v177)];
            v190 = v189 + v181;
            v15 = (v182 >> v189) | (v184 >> v190) | v189;
            v191 = v190 + (v185 & 7);
            v192 = v191;
            v193 = v15 >> -v191;
            v20 = v191 & 7;
            *v188 = v193;
            v22 = (unint64_t *)((char *)v188 + (v192 >> 3));
          }
          while (!v54);
        }
        break;
      case 0xBu:
        if ((int)a4 % 5 < 1)
        {
          v15 = 0;
          v20 = 0;
          v22 = a1;
        }
        else
        {
          v79 = 0;
          v15 = 0;
          v80 = (unsigned __int8 *)(a3 + (int)a4 - 1);
          v81 = (int)a4 % 5 + 1;
          do
          {
            v82 = *v80--;
            v83 = v7[v82];
            v15 = (v15 >> v83) | v83 & 0xFFFFFFFFFFFFFF00;
            v79 += v83;
            --v81;
          }
          while (v81 > 1);
          LODWORD(a4) = a4 - (int)a4 % 5;
          v20 = v79 & 7;
          *a1 = v15 >> -v79;
          v22 = (unint64_t *)((char *)a1 + ((unint64_t)v79 >> 3));
        }
        HIDWORD(v194) = -858993459 * a4 + 429496728;
        LODWORD(v194) = HIDWORD(v194);
        if ((v194 >> 1) >= 0x19999999)
        {
          v195 = (int)a4;
          for (i4 = -1; i4 != -5; --i4)
          {
            v197 = v7[*(unsigned __int8 *)(a3 + (int)a4 + i4)];
            v15 = (v15 >> v197) | v197;
            LOBYTE(v20) = v197 + v20;
          }
          LODWORD(a4) = a4 - 5;
          v198 = v7[*(unsigned __int8 *)(a3 + v195 - 5)];
          v15 = (v15 >> v198) | v198 & 0xFFFFFFFFFFFFFF00;
          LOBYTE(v198) = v198 + v20;
          v20 = v198 & 7;
          *v22 = v15 >> -(char)v198;
          v22 = (_QWORD *)((char *)v22 + ((unint64_t)v198 >> 3));
        }
        if ((int)a4 >= 1)
        {
          v199 = a4;
          v200 = a3 + a4;
          do
          {
            for (i5 = -1; i5 != -5; --i5)
            {
              v202 = v7[*(unsigned __int8 *)(v200 + i5)];
              v15 = (v15 >> v202) | v202;
              LOBYTE(v20) = v202 + v20;
            }
            v203 = 0;
            v204 = 0;
            v205 = v7[*(unsigned __int8 *)(v199 + a3 - 5)];
            v206 = (v15 >> v205) | v205 & 0xFFFFFFFFFFFFFF00;
            v207 = v205 + v20;
            *v22 = v206 >> -v207;
            for (i6 = -6; i6 != -10; --i6)
            {
              v209 = v7[*(unsigned __int8 *)(v200 + i6)];
              v204 = (v204 >> v209) | v209;
              v203 += v209;
            }
            v210 = (_QWORD *)((char *)v22 + ((unint64_t)v207 >> 3));
            v200 -= 10;
            v54 = v199 <= 10;
            v199 -= 10;
            v211 = v7[*(unsigned __int8 *)(a3 + v199)];
            v212 = v211 + v203;
            v15 = (v204 >> v211) | v211 & 0xFFFFFFFFFFFFFF00 | (v206 >> v212);
            v213 = v212 + (v207 & 7);
            v214 = v213;
            v215 = v15 >> -v213;
            v20 = v213 & 7;
            *v210 = v215;
            v22 = (unint64_t *)((char *)v210 + (v214 >> 3));
          }
          while (!v54);
        }
        break;
      default:
        if ((int)a4 % 9 < 1)
        {
          v15 = 0;
          v20 = 0;
          v22 = a1;
        }
        else
        {
          v59 = 0;
          v15 = 0;
          v60 = (unsigned __int8 *)(a3 + (int)a4 - 1);
          v61 = (int)a4 % 9 + 1;
          do
          {
            v62 = *v60--;
            v63 = v7[v62];
            v15 = (v15 >> v63) | v63 & 0xFFFFFFFFFFFFFF00;
            v59 += v63;
            --v61;
          }
          while (v61 > 1);
          LODWORD(a4) = a4 - (int)a4 % 9;
          v20 = v59 & 7;
          *a1 = v15 >> -v59;
          v22 = (unint64_t *)((char *)a1 + ((unint64_t)v59 >> 3));
        }
        HIDWORD(v106) = 954437177 * a4 + 238609294;
        LODWORD(v106) = HIDWORD(v106);
        if ((v106 >> 1) >= 0xE38E38F)
        {
          v107 = (int)a4;
          for (i7 = -1; i7 != -9; --i7)
          {
            v109 = v7[*(unsigned __int8 *)(a3 + (int)a4 + i7)];
            v15 = (v15 >> v109) | v109;
            LOBYTE(v20) = v109 + v20;
          }
          LODWORD(a4) = a4 - 9;
          v110 = v7[*(unsigned __int8 *)(a3 + v107 - 9)];
          v15 = (v15 >> v110) | v110;
          LOBYTE(v110) = v110 + v20;
          v20 = v110 & 7;
          *v22 = v15 >> -(char)v110;
          v22 = (_QWORD *)((char *)v22 + ((unint64_t)v110 >> 3));
        }
        if ((int)a4 >= 1)
        {
          v111 = a4;
          v112 = a3 + a4;
          do
          {
            for (i8 = -1; i8 != -9; --i8)
            {
              v114 = v7[*(unsigned __int8 *)(v112 + i8)];
              v15 = (v15 >> v114) | v114;
              LOBYTE(v20) = v114 + v20;
            }
            v115 = 0;
            v116 = 0;
            v117 = v7[*(unsigned __int8 *)(v111 + a3 - 9)];
            v118 = (v15 >> v117) | v117;
            v119 = v117 + v20;
            *v22 = v118 >> -v119;
            for (i9 = -10; i9 != -18; --i9)
            {
              v121 = v7[*(unsigned __int8 *)(v112 + i9)];
              v116 = (v116 >> v121) | v121;
              v115 += v121;
            }
            v122 = (_QWORD *)((char *)v22 + ((unint64_t)v119 >> 3));
            v112 -= 18;
            v54 = v111 <= 18;
            v111 -= 18;
            v123 = v7[*(unsigned __int8 *)(a3 + v111)];
            v124 = v123 + v115;
            v15 = (v116 >> v123) | (v118 >> v124) | v123;
            v125 = v124 + (v119 & 7);
            v126 = v125;
            v127 = v15 >> -v125;
            v20 = v125 & 7;
            *v122 = v127;
            v22 = (unint64_t *)((char *)v122 + (v126 >> 3));
          }
          while (!v54);
        }
        break;
    }
  }
  v5 = 0;
  v55 = (v15 >> 1) | 0x8000000000000000;
  v56 = v20 + 1;
  v57 = (v20 - 0x7FFFFFFFFFFFFFFFLL) & 0xF;
  *v22 = v55 >> -(char)v57;
  v58 = (char *)v22 + (v57 >> 3);
  if (v10 > (unint64_t)v58)
  {
    v5 = v58 - (char *)a1;
    if ((v56 & 7) != 0)
      ++v5;
  }
  return v5;
}

unint64_t sub_1D4B50B70(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  unint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;

  result = 0;
  if (a2 >= 0x11 && a4 >= 0xC)
  {
    v11 = (a4 + 3) >> 2;
    v12 = a1 + 6;
    result = sub_1D4B4FD24((unint64_t *)(a1 + 6), a2 - 6, a3, v11, a5);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      if (result - 0x10000 >= 0xFFFFFFFFFFFF0001)
      {
        v13 = a1 + a2;
        *(_WORD *)a1 = result;
        v14 = v12 + result;
        result = sub_1D4B4FD24((unint64_t *)(v12 + result), v13 - (v12 + result), a3 + v11, (a4 + 3) >> 2, a5);
        if (result > 0xFFFFFFFFFFFFFF88)
          return result;
        if (result - 0x10000 >= 0xFFFFFFFFFFFF0001)
        {
          *(_WORD *)(a1 + 2) = result;
          v15 = (unint64_t *)(v14 + result);
          result = sub_1D4B4FD24(v15, v13 - (_QWORD)v15, a3 + v11 + v11, (a4 + 3) >> 2, a5);
          if (result > 0xFFFFFFFFFFFFFF88)
            return result;
          if (result - 0x10000 >= 0xFFFFFFFFFFFF0001)
          {
            v16 = a3 + a4;
            *(_WORD *)(a1 + 4) = result;
            v17 = (char *)v15 + result;
            result = sub_1D4B4FD24((unint64_t *)((char *)v15 + result), v13 - ((_QWORD)v15 + result), a3 + v11 + v11 + v11, v16 - (a3 + v11 + v11 + v11), a5);
            if (result > 0xFFFFFFFFFFFFFF88)
              return result;
            if (result - 0x10000 >= 0xFFFFFFFFFFFF0001)
              return (unint64_t)&v17[result - a1];
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1D4B50CC4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6, unsigned int *a7, char a8)
{
  unsigned int v9;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;

  v9 = a1;
  if ((a8 & 2) == 0)
    return sub_1D4B4E584(a1, a2, a3, 1);
  v15 = 0;
  if ((_DWORD)a3 != -1)
  {
    v16 = a7;
    v17 = (a3 + 1);
    do
    {
      if (*v16++)
        ++v15;
      --v17;
    }
    while (v17);
  }
  v19 = 32 - __clz(v15);
  if (v19 <= a1)
  {
    v35 = a4 + 748;
    v32 = a6 + 1;
    v33 = (a3 + 1);
    v21 = -2;
    v34 = v19;
    v20 = a1;
    while (1)
    {
      v22 = sub_1D4B4F5CC(a6, a7, a3, v19, a4, a5);
      if (v22 <= 0xFFFFFFFFFFFFFF88)
      {
        if (v22 < v19 && v19 > v34)
          return v20;
        v23 = sub_1D4B4F13C(v35, a5 - 748, (uint64_t)a6, a3, v22, a4, a5);
        if (v23 <= 0xFFFFFFFFFFFFFF88)
        {
          v24 = 0;
          if ((a3 & 0x80000000) == 0)
          {
            v25 = v32;
            v26 = v33;
            v27 = a7;
            do
            {
              v29 = *(unsigned __int8 *)v25++;
              v28 = v29;
              v30 = *v27++;
              v24 += v28 * (unint64_t)v30;
              --v26;
            }
            while (v26);
            v24 >>= 3;
          }
          v31 = v24 + v23;
          if (v31 > v21 + 1)
            return v20;
          if (v31 >= v21)
          {
            v20 = v20;
          }
          else
          {
            v21 = v31;
            v20 = v19;
          }
        }
      }
      if (++v19 > v9)
        return v20;
    }
  }
  return a1;
}

uint64_t sub_1D4B50E64(unint64_t *a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unint64_t a8, uint64_t *a9, int *a10, char a11)
{
  return sub_1D4B50EA0(a1, a2, a3, a4, a5, a6, 0, a7, a8, a9, a10, a11);
}

uint64_t sub_1D4B50EA0(unint64_t *a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned int a5, unsigned int a6, int a7, uint64_t a8, unint64_t a9, uint64_t *a10, int *a11, char a12)
{
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v21;
  BOOL v22;
  char v23;
  unsigned int v25;
  unint64_t v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  int *v31;
  int v32;
  int v33;
  int v34;
  int v36;
  char v37;
  unsigned int v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unsigned int *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t *v56;
  uint64_t v57;
  char *v58;
  char v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;

  v64 = a5;
  v12 = -(int)a8 & 7;
  v13 = a9 - v12;
  if (a9 >= v12)
  {
    v14 = a8 + v12;
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  if (v13 >> 3 >= 0x3E1)
  {
    v15 = 0;
    if (!a2 || !a4)
      return v15;
    if (a4 > 0x20000)
      return -72;
    if (a6 > 0xC)
      return -44;
    if (a5 > 0xFF)
      return -46;
    if (!a5)
    {
      a5 = 255;
      v64 = 255;
    }
    if (a6)
      v21 = a6;
    else
      v21 = 11;
    v22 = (a12 & 4) == 0 || a11 == 0;
    v23 = v22;
    if (!v22 && *a11 == 2)
      return sub_1D4B51428((uint64_t)a1, a1, (uint64_t)a1 + a2, (uint64_t)a3, a4, a7, a10);
    v59 = v23;
    v60 = v21;
    v58 = (char *)a1 + a2;
    if (a4 >= 0xA000 && (a12 & 8) != 0)
    {
      v63 = a5;
      v25 = sub_1D4B4ED60((void *)v14, &v63, a3, 4096);
      v62 = v64;
      if (sub_1D4B4ED60((void *)v14, &v62, &a3[a4 - 4096], 4096) + (unint64_t)v25 < 0x45)
        return 0;
    }
    v57 = v14 + 3080;
    v26 = sub_1D4B4F0F0((void *)v14, &v64, (unsigned int *)a3, a4, (char *)(v14 + 3080), 0x1000uLL);
    v15 = v26;
    if (v26 > 0xFFFFFFFFFFFFFF88)
      return v15;
    if (v26 == a4)
    {
      *(_BYTE *)a1 = *a3;
      return 1;
    }
    if (v26 <= (a4 >> 7) + 4)
      return 0;
    if (a11)
    {
      v27 = *a11;
      if (*a11 == 1)
      {
        if ((v64 & 0x80000000) == 0)
        {
          v28 = 0;
          v29 = (unsigned __int8 *)(a10 + 1);
          v30 = v64 + 1;
          v31 = (int *)v14;
          do
          {
            v32 = *v31++;
            v22 = v32 == 0;
            v34 = *v29;
            v29 += 8;
            v33 = v34;
            v36 = !v22 && v33 == 0;
            v28 |= v36;
            --v30;
          }
          while (v30);
          if (v28)
          {
            *a11 = 0;
            goto LABEL_53;
          }
        }
        v27 = 1;
      }
      v22 = v27 == 0;
      v37 = v59;
      if (v22)
        v37 = 1;
      if ((v37 & 1) == 0)
        goto LABEL_64;
    }
LABEL_53:
    v38 = sub_1D4B50CC4(v60, a4, v64, v57, 0x1300uLL, (uint64_t *)(v14 + 1024), (unsigned int *)v14, a12);
    v39 = (char *)(v14 + 1024);
    v15 = sub_1D4B4F5CC((uint64_t *)(v14 + 1024), (unsigned int *)v14, v64, v38, v57, 0x1300uLL);
    if (v15 > 0xFFFFFFFFFFFFFF88)
      return v15;
    v61 = v64;
    bzero(&v39[8 * v64 + 16], 2056 - 8 * (v64 + 2));
    v40 = sub_1D4B4F13C((uint64_t)a1, a2, v14 + 1024, v61, v15, v57, 0x2ECuLL);
    v15 = v40;
    if (v40 > 0xFFFFFFFFFFFFFF88)
      return v15;
    if (a11)
    {
      if (*a11)
      {
        if ((v64 & 0x80000000) != 0)
          goto LABEL_64;
        v41 = 0;
        v42 = (unsigned __int8 *)(a10 + 1);
        v43 = (unsigned int *)v14;
        v44 = v64 + 1;
        do
        {
          v46 = *v42;
          v42 += 8;
          v45 = v46;
          v47 = *v43++;
          v41 += v45 * (unint64_t)v47;
          --v44;
        }
        while (v44);
        v48 = 0;
        v49 = 0;
        do
        {
          v49 += *(unsigned __int8 *)(v14 + 8 * v48 + 1032) * (unint64_t)*(unsigned int *)(v14 + 4 * v48);
          ++v48;
        }
        while (v64 + 1 != v48);
        if (v40 + 12 >= a4 || v41 >> 3 <= v40 + (v49 >> 3))
        {
LABEL_64:
          v50 = (uint64_t)a1;
          v51 = a1;
          v52 = (uint64_t)v58;
          v53 = (uint64_t)a3;
          v54 = a4;
          v55 = a7;
          v56 = a10;
          return sub_1D4B51428(v50, v51, v52, v53, v54, v55, v56);
        }
        goto LABEL_68;
      }
      if (v40 + 12 < a4)
      {
LABEL_68:
        *a11 = 0;
        goto LABEL_69;
      }
    }
    else if (v40 + 12 < a4)
    {
LABEL_69:
      if (a10)
        memcpy(a10, v39, 0x808uLL);
      v50 = (uint64_t)a1;
      v51 = (unint64_t *)((char *)a1 + v15);
      v52 = (uint64_t)v58;
      v53 = (uint64_t)a3;
      v54 = a4;
      v55 = a7;
      v56 = (uint64_t *)(v14 + 1024);
      return sub_1D4B51428(v50, v51, v52, v53, v54, v55, v56);
    }
    return 0;
  }
  return -66;
}

uint64_t sub_1D4B512A8(unint64_t *a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unint64_t a8, uint64_t *a9, int *a10, char a11)
{
  return sub_1D4B50EA0(a1, a2, a3, a4, a5, a6, 1, a7, a8, a9, a10, a11);
}

uint64_t sub_1D4B512E4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = a2;
  v4 = result;
  v5 = a3 - a2;
  if ((int)a3 - (int)a2 >= 8)
  {
    v13 = a3;
    if ((int)a3 > (int)a2)
    {
      do
      {
        v14 = (unsigned int *)(v4 + 8 * (int)v13);
        v15 = *v14;
        v16 = (v3 - 1);
        v17 = (int)v13 - (uint64_t)(int)v3;
        v18 = 8 * (int)v3;
        do
        {
          if (*(_DWORD *)(v4 + v18) > v15)
          {
            v16 = (v16 + 1);
            v19 = *(_QWORD *)(v4 + 8 * (int)v16);
            *(_QWORD *)(v4 + 8 * (int)v16) = *(_QWORD *)(v4 + v18);
            *(_QWORD *)(v4 + v18) = v19;
          }
          v18 += 8;
          --v17;
        }
        while (v17);
        v20 = *(_QWORD *)(v4 + 8 * ((int)v16 + 1));
        *(_QWORD *)(v4 + 8 * ((int)v16 + 1)) = *(_QWORD *)v14;
        *(_QWORD *)v14 = v20;
        if ((int)v16 + 1 - (int)v3 >= (int)v13 - ((int)v16 + 1))
        {
          result = sub_1D4B512E4(v4, (v16 + 2), v13);
          v13 = v16;
        }
        else
        {
          result = sub_1D4B512E4(v4, v3, v16);
          v3 = (v16 + 2);
        }
      }
      while ((int)v3 < (int)v13);
    }
  }
  else if (v5 >= 1)
  {
    v6 = result + 8 * (int)a2;
    v7 = (v5 + 1);
    v8 = 1;
    do
    {
      v9 = *(_QWORD *)(v6 + 8 * v8);
      v10 = v8;
      while (1)
      {
        v11 = v10 - 1;
        v12 = (_DWORD *)(v6 + 8 * (v10 - 1));
        if (*v12 >= v9)
          break;
        *(_QWORD *)(v6 + 8 * v10--) = *(_QWORD *)v12;
        if (v11 + 1 <= 1)
        {
          LODWORD(v10) = 0;
          break;
        }
      }
      *(_QWORD *)(v6 + 8 * (int)v10) = v9;
      ++v8;
    }
    while (v8 != v7);
  }
  return result;
}

unint64_t sub_1D4B51428(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6, uint64_t *a7)
{
  unint64_t v10;
  unint64_t result;
  unint64_t v12;

  v10 = a3 - (_QWORD)a2;
  if (a6)
    result = sub_1D4B50B70((uint64_t)a2, v10, a4, a5, a7);
  else
    result = sub_1D4B4FD24(a2, v10, a4, a5, a7);
  v12 = (unint64_t)a2 + result - a1;
  if (v12 >= a5 - 1)
    v12 = 0;
  if (!result)
    v12 = 0;
  if (result <= 0xFFFFFFFFFFFFFF88)
    return v12;
  return result;
}

uint64_t sub_1D4B5149C(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t result;

  if (a1 > 0xFF00FF00FF00FEFFLL)
    return -72;
  v1 = a1 + (a1 >> 8);
  v2 = (0x20000 - a1) >> 11;
  if (a1 >= 0x20000)
    v2 = 0;
  result = v1 + v2;
  if (!(v1 + v2))
    return -72;
  return result;
}

uint64_t sub_1D4B514D8()
{
  return sub_1D4B514E4(&xmmword_1D4BD60B8);
}

uint64_t sub_1D4B514E4(__int128 *a1)
{
  uint64_t (*v1)(_QWORD, uint64_t);
  uint64_t v2;
  void *v4;
  __int128 v6;
  uint64_t v7;

  v1 = *(uint64_t (**)(_QWORD, uint64_t))a1;
  if ((*(_QWORD *)a1 == 0) != (*((_QWORD *)a1 + 1) == 0))
    return 0;
  if (v1)
    v4 = (void *)v1(*((_QWORD *)a1 + 2), 5240);
  else
    v4 = malloc(0x1478uLL);
  v2 = (uint64_t)v4;
  if (v4)
  {
    v6 = *a1;
    v7 = *((_QWORD *)a1 + 2);
    bzero(v4, 0x1478uLL);
    *(_OWORD *)(v2 + 848) = v6;
    *(_QWORD *)(v2 + 864) = v7;
    sub_1D4B51788(v2);
    *(_OWORD *)(v2 + 5208) = 0u;
    *(_OWORD *)(v2 + 5224) = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_DWORD *)(v2 + 60) = 3;
    *(_DWORD *)(v2 + 48) = 1;
  }
  return v2;
}

unint64_t sub_1D4B515C4(unint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  void (*v3)(_QWORD, _QWORD *);

  if (result)
  {
    v1 = (_QWORD *)result;
    if (*(_QWORD *)(result + 880))
      return -64;
    if (*(_QWORD *)(result + 656) <= result)
    {
      v2 = *(_QWORD *)(result + 664);
      sub_1D4B51644(result);
      if (v2 > (unint64_t)v1)
        return 0;
    }
    else
    {
      sub_1D4B51644(result);
    }
    v3 = (void (*)(_QWORD, _QWORD *))v1[107];
    if (v3)
      v3(v1[108], v1);
    else
      free(v1);
    return 0;
  }
  return result;
}

void sub_1D4B51644(uint64_t a1)
{
  void (*v2)(uint64_t);
  uint64_t v3;
  void *v4;

  sub_1D4B51788(a1);
  sub_1D4B90B8C(*(_QWORD *)(a1 + 3704));
  *(_QWORD *)(a1 + 3704) = 0;
  v2 = *(void (**)(uint64_t))(a1 + 856);
  v3 = *(_QWORD *)(a1 + 864);
  v4 = *(void **)(a1 + 656);
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_QWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  if (v4)
  {
    if (v2)
      v2(v3);
    else
      free(v4);
  }
}

uint64_t sub_1D4B516B0(uint64_t result, __int128 *a2, int a3)
{
  __int128 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;

  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)result = 0u;
  v3 = *a2;
  *(_OWORD *)(result + 16) = *(__int128 *)((char *)a2 + 12);
  *(_OWORD *)(result + 4) = v3;
  v4 = *((_DWORD *)a2 + 9);
  *(_QWORD *)(result + 32) = *(_QWORD *)((char *)a2 + 28);
  *(_DWORD *)(result + 40) = v4;
  *(_DWORD *)(result + 44) = a3;
  if ((*((_DWORD *)a2 + 6) - 6) >= 0xFFFFFFFD)
  {
    if (*(_DWORD *)a2 > 0xEu)
      v5 = 1;
    else
      v5 = 2;
  }
  else
  {
    v5 = 2;
  }
  *(_DWORD *)(result + 144) = v5;
  if (*((_DWORD *)a2 + 6) < 7u)
  {
    v6 = 2;
  }
  else if (*(_DWORD *)a2 > 0x10u)
  {
    v6 = 1;
  }
  else
  {
    v6 = 2;
  }
  *(_DWORD *)(result + 140) = v6;
  if (*((_DWORD *)a2 + 6) < 7u)
  {
    v7 = 2;
  }
  else if (*(_DWORD *)a2 > 0x1Au)
  {
    v7 = 1;
  }
  else
  {
    v7 = 2;
  }
  *(_DWORD *)(result + 96) = v7;
  *(_QWORD *)(result + 192) = 0x20000;
  if (a3 >= 10)
    v8 = 1;
  else
    v8 = 2;
  *(_DWORD *)(result + 200) = v8;
  return result;
}

double sub_1D4B51788(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD);
  double result;

  v2 = a1 + 3632;
  if (*(_QWORD *)(a1 + 3632))
  {
    v3 = *(void (**)(_QWORD))(a1 + 856);
    if (v3)
      v3(*(_QWORD *)(a1 + 864));
    else
      free(*(void **)(a1 + 3632));
  }
  sub_1D4B534AC(*(_QWORD **)(a1 + 3664));
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_QWORD *)(v2 + 64) = 0;
  return result;
}

__n128 sub_1D4B517E4@<Q0>(unsigned int *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  __n128 result;

  if (a3)
    v6 = a2 == -1;
  else
    v6 = 0;
  v7 = 513;
  if (!v6)
    v7 = a2;
  if (a4 != 2)
    v7 = a2;
  if (a4 == 1)
    v8 = 0;
  else
    v8 = a3;
  if (a4 == 1)
    v9 = a2;
  else
    v9 = v7;
  if (v8 >= 0x40000001 || v9 >= 0x40000001)
  {
    v11 = *a1;
    if (v9 == -1)
      goto LABEL_33;
  }
  else
  {
    v10 = 32 - __clz(v9 + v8 - 1);
    if ((v9 + v8) < 0x40)
      v10 = 6;
    v11 = *a1;
    if (*a1 > v10)
    {
      *a1 = v10;
      v11 = v10;
    }
  }
  v12 = (1 << v11) + v8;
  v13 = v9 + v8;
  v14 = v12 >> 31;
  v15 = 32 - __clz(v12 - 1);
  if (v14)
    v15 = 31;
  if (1 << v11 < v13)
    v16 = v15;
  else
    v16 = v11;
  if (v8)
    v17 = v16;
  else
    v17 = v11;
  v18 = a1[1];
  v19 = v18 - (a1[6] > 5);
  if (a1[2] > v17 + 1)
    a1[2] = v17 + 1;
  if (v19 > v17)
    a1[1] = v18 + v17 - v19;
LABEL_33:
  if (v11 <= 9)
    *a1 = 10;
  v20 = a1[6];
  if (a4 == 2 && v20 - 3 >= 0xFFFFFFFE)
  {
    if (a1[2] >= 0x19)
      a1[2] = 24;
    if (a1[1] >= 0x19)
      a1[1] = 24;
  }
  if (a5 <= 1 && v20 - 6 >= 0xFFFFFFFD)
  {
    v21 = a1[3];
    v22 = v21 + 24;
    if (v21 >= 6)
      v22 = 30;
    if (v21 >= 4)
      v23 = v22;
    else
      v23 = 28;
    if (a1[2] > v23)
      a1[2] = v23;
  }
  *(_OWORD *)a6 = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 3);
  *(__n128 *)(a6 + 12) = result;
  return result;
}

double sub_1D4B51984@<D0>(int a1@<W0>, unint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  double result;
  __int128 v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  if (a4 == 1)
    v7 = 0;
  else
    v7 = a3;
  v8 = -1;
  if (a2 != -1 || v7)
  {
    if (v7)
      v9 = a2 == -1;
    else
      v9 = 0;
    v10 = 500;
    if (!v9)
      v10 = 0;
    v8 = v7 + a2 + v10;
  }
  v25 = v5;
  v26 = v6;
  v11 = 3;
  if (a1 >= 0x16)
    v12 = 22;
  else
    v12 = a1;
  if (a1 < 0)
    v12 = 0;
  if (a1)
    v11 = v12;
  v13 = v8 < 0x40001;
  if (v8 <= 0x20000)
    ++v13;
  if (v8 > 0x4000)
    v14 = v13;
  else
    v14 = v13 + 1;
  v15 = (char *)&unk_1D4BD6328 + 644 * v14 + 28 * v11;
  v21 = *(_OWORD *)v15;
  v16 = *((_DWORD *)v15 + 4);
  v17 = *((_DWORD *)v15 + 5);
  v18 = *((_DWORD *)v15 + 6);
  if (a1 <= 0xFFFE0000)
    v19 = -131072;
  else
    v19 = a1;
  if (a1 < 0)
    v17 = -v19;
  v22 = v16;
  v23 = v17;
  v24 = v18;
  *(_QWORD *)&result = sub_1D4B517E4((unsigned int *)&v21, a2, a3, a4, 0, a5).n128_u64[0];
  return result;
}

uint64_t sub_1D4B51A60(int *a1, __int128 *a2, int a3, int a4, uint64_t a5, uint64_t a6, unint64_t a7, int a8, unint64_t a9)
{
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  uint64_t v29;

  v14 = a9;
  v15 = 1 << *a1;
  if (v15 >= a7)
    v15 = a7;
  if (!a7)
    v15 = 1;
  if (!a9)
    v14 = 0x20000;
  if (v14 >= v15)
    v16 = v15;
  else
    v16 = v14;
  v17 = a1[4] != 3 && a8 == 0;
  v18 = 3;
  if (v17)
    v18 = 4;
  v19 = v16 / v18;
  v20 = (8 * (v16 / v18) + 63) & 0xFFFFFFFFFFFFFFC0;
  v21 = sub_1D4B533E8(a1, a4, 0, 1);
  v28 = *a2;
  v29 = *((_QWORD *)a2 + 2);
  v22 = sub_1D4B87C70(&v28);
  v28 = *a2;
  v29 = *((_QWORD *)a2 + 2);
  v23 = sub_1D4B87CA4(&v28, v16);
  if (*(_DWORD *)a2 == 1)
    v24 = (12 * v23 + 63) & 0xFFFFFFFFFFFFFFC0;
  else
    v24 = 0;
  v25 = (((8 * ((v16 * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFF0) + 79) & 0xFFFFFFFFFFFFFFC0;
  if (!a8)
    v25 = 0;
  v26 = 25424;
  if (!a3)
    v26 = 20184;
  return a5 + a6 + v26 + v21 + v16 + 3 * v19 + v20 + v22 + v25 + v24 + 32;
}

uint64_t sub_1D4B51BD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  unsigned int v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if ((v3 & 0x7FFFFFFF8) != 0)
  {
    v4 = (v3 >> 3);
    v5 = (unsigned __int16 *)(*(_QWORD *)a1 + 6);
    v6 = *(_BYTE **)(a1 + 48);
    v7 = *(_BYTE **)(a1 + 40);
    v8 = *(_BYTE **)(a1 + 32);
    do
    {
      v9 = *(v5 - 1);
      if (v9 < 0x40)
        LOBYTE(v10) = byte_1D4BD60D0[*(v5 - 1)];
      else
        v10 = 50 - __clz(v9);
      v11 = __clz(*(_DWORD *)(v5 - 3));
      v12 = *v5;
      *v8 = v10;
      *v6 = 31 - v11;
      if (v12 < 0x80)
        LOBYTE(v13) = byte_1D4BD6110[v12];
      else
        v13 = 67 - __clz(v12);
      v5 += 4;
      *v7++ = v13;
      ++v8;
      ++v6;
      --v4;
    }
    while (v4);
  }
  v14 = *(_DWORD *)(a1 + 72);
  if (v14 == 1)
  {
    *(_BYTE *)(v2 + *(unsigned int *)(a1 + 76)) = 35;
    v14 = *(_DWORD *)(a1 + 72);
  }
  if (v14 == 2)
    *(_BYTE *)(v1 + *(unsigned int *)(a1 + 76)) = 52;
  return 0;
}

uint64_t (*sub_1D4B51CB4(int a1, int a2, int a3))()
{
  unsigned int v3;
  BOOL v4;
  uint64_t (**v5)();

  v3 = a1 - 3;
  v4 = a2 != 1 || v3 > 2;
  v5 = &off_1E9845E88[3 * a3] + v3;
  if (v4)
    v5 = &off_1E9845D48[10 * a3] + a1;
  return *v5;
}

uint64_t sub_1D4B51CF4(uint64_t result)
{
  *(_QWORD *)(result + 24) = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)result;
  *(_DWORD *)(result + 72) = 0;
  return result;
}

uint64_t sub_1D4B51D0C(_QWORD *a1, char *__src, void *__dst, _DWORD *a4, uint64_t a5, void *a6, unint64_t a7)
{
  unint64_t v7;
  void *v8;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  int v17;
  int v18;
  void *v19;
  unint64_t v20;
  int v21;
  _DWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v32;
  _BOOL4 v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  char v40;
  int v41;
  _BOOL4 v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;

  v7 = a7;
  v8 = a6;
  v15 = (unsigned int *)a1[2];
  v14 = a1[3];
  v16 = a4[7];
  v17 = a4[18];
  if (v17 == 1)
    goto LABEL_8;
  if (v17 == 2)
  {
    LODWORD(v43) = 255;
LABEL_4:
    memcpy(__dst, __src, 0x810uLL);
    v18 = 0;
LABEL_17:
    *(_DWORD *)a5 = v18;
    *(_QWORD *)(a5 + 136) = 0;
    goto LABEL_18;
  }
  if (v16 != 1)
  {
LABEL_8:
    v39 = v16 > 7;
    v19 = a6;
    v20 = a7;
    v22 = __src + 2056;
    v41 = *((_DWORD *)__src + 514);
    LODWORD(v43) = 255;
    memcpy(__dst, __src, 0x810uLL);
  }
  else
  {
    v39 = 0;
    v19 = a6;
    v20 = a7;
    v21 = a4[6];
    v41 = *((_DWORD *)__src + 514);
    LODWORD(v43) = 255;
    memcpy(__dst, __src, 0x810uLL);
    if (v21)
    {
LABEL_15:
      v18 = 0;
      v7 = v20;
      goto LABEL_16;
    }
    v22 = __src + 2056;
  }
  v23 = v14 - (_QWORD)v15;
  v24 = 63;
  if (*v22 == 2)
    v24 = 6;
  if (v24 >= v23)
    goto LABEL_15;
  v7 = v20;
  v25 = sub_1D4B4F0F0(v19, (unsigned int *)&v43, v15, v23, (char *)v19, v20);
  v26 = v25;
  if (v25 > 0xFFFFFFFFFFFFFF88)
    goto LABEL_38;
  if (v25 == v23)
  {
    v18 = 1;
LABEL_16:
    v8 = v19;
    goto LABEL_17;
  }
  if (v25 <= (v23 >> 7) + 4)
  {
    v18 = 0;
    goto LABEL_16;
  }
  v40 = 2 * v39;
  v8 = v19;
  v32 = (uint64_t)v19 + 1024;
  v33 = v41;
  if (v41 == 1)
    v33 = sub_1D4B4FCDC((uint64_t)__src, (int *)v8, v43);
  v42 = v33;
  bzero(__dst, 0x808uLL);
  v34 = sub_1D4B50CC4(11, v23, v43, v32, v7 - 1024, (uint64_t *)__dst, (unsigned int *)v8, v40);
  v26 = sub_1D4B4F5CC((uint64_t *)__dst, (unsigned int *)v8, v43, v34, v32, v7 - 1024);
  if (v26 > 0xFFFFFFFFFFFFFF88)
  {
LABEL_38:
    *(_QWORD *)(a5 + 136) = v26;
    return v26;
  }
  v35 = sub_1D4B4FCA8((uint64_t)__dst, (unsigned int *)v8, v43);
  v36 = v32;
  v37 = v35;
  v26 = sub_1D4B4F13C(a5 + 4, 0x80uLL, (uint64_t)__dst, v43, v26, v36, v7 - 1024);
  if (v42)
  {
    v38 = sub_1D4B4FCA8((uint64_t)__src, (unsigned int *)v8, v43);
    if (v38 < v23 && (v26 + 12 >= v23 || v38 <= v26 + v37))
    {
      memcpy(__dst, __src, 0x810uLL);
      v18 = 3;
      goto LABEL_17;
    }
  }
  if (v26 + v37 >= v23)
    goto LABEL_4;
  *(_DWORD *)a5 = 2;
  *((_DWORD *)__dst + 514) = 1;
  *(_QWORD *)(a5 + 136) = v26;
  if (v26 > 0xFFFFFFFFFFFFFF88)
    return v26;
LABEL_18:
  v27 = a1[1] - *a1;
  if (v27)
  {
    sub_1D4B54F40(a1, v27 >> 3, (uint64_t)(__src + 2064), (uint64_t)__dst + 2064, (char *)(a5 + 156), a5 + 289, a4[7], v8, (uint64_t)&v43, (char *)v8 + 212, v7 - 212);
    v27 = v45;
    if (v45 > 0xFFFFFFFFFFFFFF88)
      goto LABEL_23;
    v28 = v43;
    v29 = v44;
    v30 = v46;
  }
  else
  {
    v30 = 0;
    v29 = 0;
    *((_DWORD *)__dst + 1401) = 0;
    v28 = 0;
    *((_QWORD *)__dst + 701) = 0;
  }
  *(_QWORD *)(a5 + 144) = v28;
  *(_DWORD *)(a5 + 152) = v29;
  *(_QWORD *)(a5 + 304) = v30;
LABEL_23:
  *(_QWORD *)(a5 + 296) = v27;
  if ((unint64_t)v27 >= 0xFFFFFFFFFFFFFF89)
    return v27;
  else
    return 0;
}

uint64_t sub_1D4B52088(uint64_t a1, char *a2, unint64_t a3, char *__src, size_t __n, int a6, int a7)
{
  unint64_t v11;
  char *v12;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  char *v20;
  unsigned int v21;
  unint64_t v22;
  char *v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  size_t v34;
  char *v35;
  _DWORD *v36;
  _BOOL4 v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  unsigned int v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unsigned __int16 *v67;
  unsigned int v68;
  size_t v69;
  int v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  char v75;
  int v76;
  __int16 v77;
  int v78;
  size_t v79;
  unint64_t v80;
  int v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  size_t v86;
  int v87;
  uint64_t *v88;
  unsigned int *v89;
  int8x16_t *v90;
  size_t v91;
  _OWORD *v92;
  int v93;
  char *v94;
  uint32x2_t *v95;
  _OWORD *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;

  if (!*(_DWORD *)a1)
    return -60;
  v11 = a3;
  v12 = a2;
  v14 = 0;
  if (a6 && *(_DWORD *)a1 == 1)
  {
    v15 = sub_1D4B53980(a2, a3, (_DWORD *)(a1 + 224), *(_QWORD *)(a1 + 736) - 1, *(_DWORD *)(a1 + 640));
    v14 = v15;
    if (v15 > 0xFFFFFFFFFFFFFF88)
      return v14;
    v11 -= v15;
    v12 += v15;
    *(_DWORD *)a1 = 2;
  }
  if (!__n)
    return v14;
  v95 = (uint32x2_t *)(a1 + 3192);
  v16 = *(char **)(a1 + 3192);
  if (*(_DWORD *)(a1 + 3328))
    v17 = 0;
  else
    v17 = v16 == __src;
  v18 = !v17;
  if (v17)
  {
    v19 = *(_QWORD *)(a1 + 3208);
    v21 = *(_DWORD *)(a1 + 3220);
    LODWORD(v20) = *(_DWORD *)(a1 + 3216);
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 3200);
    v20 = &v16[-v19];
    v21 = *(_DWORD *)(a1 + 3216);
    *(_DWORD *)(a1 + 3220) = v21;
    *(_DWORD *)(a1 + 3216) = (_DWORD)v20;
    *(_QWORD *)(a1 + 3208) = v19;
    *(_QWORD *)(a1 + 3200) = __src - v20;
    if (v20 - v21 <= 7)
    {
      *(_DWORD *)(a1 + 3220) = (_DWORD)v20;
      v21 = v20;
    }
  }
  v24 = &__src[__n];
  *v95 = (uint32x2_t)&__src[__n];
  if ((unint64_t)&__src[__n] > v19 + (unint64_t)v21
    && v19 + (unint64_t)v20 > (unint64_t)__src)
  {
    v26 = (uint64_t)&v24[-v19];
    if (v26 > v20)
      LODWORD(v26) = (_DWORD)v20;
    *(_DWORD *)(a1 + 3220) = v26;
  }
  if (v18)
  {
    *(_DWORD *)(a1 + 3328) = 0;
    *(_DWORD *)(a1 + 3236) = (_DWORD)v20;
  }
  if (*(_DWORD *)(a1 + 320) == 1)
  {
    v27 = *(char **)(a1 + 1008);
    if (v27 == __src)
    {
      v28 = *(_QWORD *)(a1 + 1024);
      v30 = *(_DWORD *)(a1 + 1036);
      LODWORD(v29) = *(_DWORD *)(a1 + 1032);
    }
    else
    {
      v28 = *(_QWORD *)(a1 + 1016);
      v29 = &v27[-v28];
      v30 = *(_DWORD *)(a1 + 1032);
      *(_DWORD *)(a1 + 1036) = v30;
      *(_DWORD *)(a1 + 1032) = (_DWORD)v29;
      *(_QWORD *)(a1 + 1024) = v28;
      *(_QWORD *)(a1 + 1016) = __src - v29;
      if (v29 - v30 <= 7)
      {
        *(_DWORD *)(a1 + 1036) = (_DWORD)v29;
        v30 = v29;
      }
    }
    *(_QWORD *)(a1 + 1008) = v24;
    if ((unint64_t)v24 > v28 + (unint64_t)v30
      && v28 + (unint64_t)v29 > (unint64_t)__src)
    {
      v31 = (uint64_t)&v24[-v28];
      if (v31 > v29)
        LODWORD(v31) = (_DWORD)v29;
      *(_DWORD *)(a1 + 1036) = v31;
    }
  }
  if (!a6)
  {
    sub_1D4B552AC(v95, (_QWORD *)(a1 + 656), (_DWORD *)(a1 + 224), (int)__src, (int)v24);
    v22 = sub_1D4B5556C(a1, v12, v11, __src, __n, 0);
    goto LABEL_126;
  }
  v85 = v14;
  v32 = *(_QWORD *)(a1 + 728);
  v33 = *(_DWORD *)(a1 + 228);
  if (*(_DWORD *)(a1 + 260))
    sub_1D4B4DD2C(a1 + 760, __src, __n);
  v90 = (int8x16_t *)(a1 + 3176);
  v88 = (uint64_t *)(a1 + 928);
  v89 = (unsigned int *)(a1 + 4112);
  v96 = (_OWORD *)(a1 + 4032);
  v92 = (_OWORD *)(a1 + 3952);
  v84 = v12;
  v86 = __n;
  v34 = __n;
  v35 = v12;
  v36 = (_DWORD *)(a1 + 224);
  v93 = 1 << v33;
  do
  {
    v37 = v32 >= v34;
    if (v11 < 6)
      return -70;
    if (v34 < v32)
      v32 = v34;
    sub_1D4B552AC(v95, (_QWORD *)(a1 + 656), v36, (int)__src, (_DWORD)__src + v32);
    v38 = *(_QWORD *)(a1 + 3200);
    v98 = &__src[v32];
    v39 = *(_DWORD *)(a1 + 3232);
    if (v39 + v93 < ((_DWORD)__src + v32 - v38) || v39 != *(_DWORD *)(a1 + 3216))
    {
      v39 = 0;
      *(_DWORD *)(a1 + 3232) = 0;
      *(_QWORD *)(a1 + 3440) = 0;
    }
    v40 = (_DWORD)__src - v38;
    v41 = *(_DWORD *)(a1 + 3220);
    if (v39 + v93 < v40)
    {
      if (v41 < v40 - v93)
      {
        *(_DWORD *)(a1 + 3220) = v40 - v93;
        v41 = v40 - v93;
      }
      if (*(_DWORD *)(a1 + 3216) < v41)
        *(_DWORD *)(a1 + 3216) = v41;
      *(_DWORD *)(a1 + 3232) = 0;
      *(_QWORD *)(a1 + 3440) = 0;
    }
    if (*(_DWORD *)(a1 + 3236) < v41)
      *(_DWORD *)(a1 + 3236) = v41;
    v42 = v37 & a7;
    if (*(_QWORD *)(a1 + 280))
    {
      v43 = sub_1D4B556B4(a1, __src, v32);
      v22 = v43;
      if (v43 > 0xFFFFFFFFFFFFFF88)
        return v22;
      if (!v43)
      {
        if (!*(_DWORD *)(a1 + 920)
          && *(_QWORD *)(a1 + 936) - *(_QWORD *)(a1 + 928) <= 0x1FuLL
          && *(_QWORD *)(a1 + 952) - *(_QWORD *)(a1 + 944) <= 9uLL
          && sub_1D4B55AA4(__src, v32))
        {
          v75 = *__src;
          *(_WORD *)v35 = v42 | (8 * v32) | 2;
          v35[2] = v32 >> 13;
          v35[3] = v75;
          v22 = 4;
LABEL_65:
          if (*(_DWORD *)(v90->i64[0] + 5604) == 2)
            *(_DWORD *)(v90->i64[0] + 5604) = 1;
          goto LABEL_116;
        }
        v44 = sub_1D4B57CB4(a1, v35, v11, __src, v32, v42);
        if (v44 != -70)
        {
          v22 = v44;
          if (v44 > 0xFFFFFFFFFFFFFF88)
            return v22;
          v49 = *(_DWORD *)(a1 + 252);
          v50 = v49 <= 7 ? 6 : v49 - 1;
          if (v44 && v44 < v32 - (v32 >> v50) + 1)
          {
            *v90 = vextq_s8(*v90, *v90, 8uLL);
            goto LABEL_65;
          }
        }
      }
      v22 = v32 + 3;
      if (v32 + 3 > v11)
        return -70;
      *(_WORD *)v35 = v42 | (8 * v32);
      v35[2] = v32 >> 13;
      memcpy(v35 + 3, __src, v32);
      if (v22 > 0xFFFFFFFFFFFFFF88)
        return v22;
      goto LABEL_65;
    }
    v94 = v35;
    if (*(_DWORD *)(a1 + 364) != 1)
    {
      v47 = v35 + 3;
      v48 = sub_1D4B5556C(a1, v47, v11 - 3, __src, v32, 1);
      v22 = v48;
      if (v48 > 0xFFFFFFFFFFFFFF88)
        return v22;
      if (v48 == 1)
      {
        v76 = 8 * v32;
        v77 = 2;
LABEL_115:
        v35 = v94;
        v78 = v42 | v76;
        *(_WORD *)v94 = v78 | v77;
        v94[2] = BYTE2(v78);
        v22 = v48 + 3;
        goto LABEL_116;
      }
      if (v48)
      {
        v76 = v42;
        v42 = 8 * v48;
        v77 = 4;
        goto LABEL_115;
      }
      v22 = v32 + 3;
      if (v32 + 3 > v11)
        return -70;
      *(_WORD *)v94 = v42 | (8 * v32);
      v94[2] = v32 >> 13;
      v46 = v47;
      v35 = v94;
      goto LABEL_79;
    }
    v45 = sub_1D4B556B4(a1, __src, v32);
    v22 = v45;
    if (v45 > 0xFFFFFFFFFFFFFF88)
      return v22;
    if (v45 == 1)
    {
      if (*(_DWORD *)(v90->i64[0] + 5604) == 2)
        *(_DWORD *)(v90->i64[0] + 5604) = 1;
      v22 = v32 + 3;
      if (v32 + 3 > v11)
        return -70;
      *(_WORD *)v35 = v42 | (8 * v32);
      v35[2] = v32 >> 13;
      v46 = v35 + 3;
LABEL_79:
      memcpy(v46, __src, v32);
      goto LABEL_80;
    }
    v51 = 0;
    v52 = *(_QWORD *)(a1 + 936) - *(_QWORD *)(a1 + 928);
    v53 = v52 >> 3;
    v101 = a1 + 4112;
    v102 = 0;
    if ((v52 >> 3) >= 5)
    {
      sub_1D4B560BC((unint64_t)&v101, 0, (v52 >> 3), a1, v88);
      v51 = v102;
      *(_DWORD *)(v101 + 4 * v102) = v53;
    }
    v54 = v90->i64[0];
    v101 = *(_QWORD *)(v90->i64[0] + 5616);
    LODWORD(v102) = *(_DWORD *)(v54 + 5624);
    v99 = v101;
    v100 = v102;
    *v96 = 0u;
    *(_OWORD *)(a1 + 4048) = 0u;
    *(_OWORD *)(a1 + 4064) = 0u;
    *(_OWORD *)(a1 + 4080) = 0u;
    *(_OWORD *)(a1 + 4096) = 0u;
    if (v51)
    {
      v97 = v51;
      v87 = v42;
      v82 = a7;
      sub_1D4B55F6C((uint64_t)v92, v88, 0, *v89);
      v55 = a1 + 3952;
      v56 = v11;
      v57 = 0;
      v58 = 0;
      v22 = 0;
      v59 = (uint64_t)v35;
      v83 = v56;
      v91 = v34;
      while (1)
      {
        v60 = sub_1D4B56060(v55);
        v61 = *(_QWORD *)(a1 + 3960);
        v62 = *(_QWORD *)(a1 + 3952);
        v63 = v61 - v62;
        if (v61 == v62)
        {
          v64 = 0;
        }
        else
        {
          v64 = 0;
          v65 = v63 >> 3;
          v66 = *(unsigned int *)(a1 + 4028);
          if (v65 <= 1)
            v65 = 1;
          v67 = (unsigned __int16 *)(v62 + 6);
          do
          {
            v68 = *v67;
            v67 += 4;
            v64 += v68 + 3;
            if (!v66 && *(_DWORD *)(a1 + 4024) == 2)
              v64 += 0x10000;
            --v66;
            --v65;
          }
          while (v65);
        }
        v69 = v64 + v60;
        v57 += v64 + v60;
        if (v58 == v97)
        {
          v69 = v69 + v32 - v57;
          v70 = v87;
        }
        else
        {
          sub_1D4B55F6C((uint64_t)v96, v88, v89[v58], v89[v58 + 1]);
          v70 = 0;
        }
        v71 = sub_1D4B55C08(a1, (uint64_t)v92, &v101, (int *)&v99, v59, v56, __src, v69, v70, 1);
        if (v71 > 0xFFFFFFFFFFFFFF88)
          break;
        __src += v69;
        v59 += v71;
        v56 -= v71;
        v22 += v71;
        v72 = *(_OWORD *)(a1 + 4080);
        *(_OWORD *)(a1 + 3984) = *(_OWORD *)(a1 + 4064);
        *(_OWORD *)(a1 + 4000) = v72;
        *(_OWORD *)(a1 + 4016) = *(_OWORD *)(a1 + 4096);
        v73 = *(_OWORD *)(a1 + 4048);
        *v92 = *v96;
        *(_OWORD *)(a1 + 3968) = v73;
        ++v58;
        v35 = v94;
        v55 = a1 + 3952;
        v34 = v91;
        if (v58 > v97)
        {
          v74 = v90->i64[0];
          *(_QWORD *)(v74 + 5616) = v101;
          *(_DWORD *)(v74 + 5624) = v102;
          v11 = v83;
          a7 = v82;
          v36 = (_DWORD *)(a1 + 224);
          goto LABEL_80;
        }
      }
      v22 = v71;
      v11 = v83;
      a7 = v82;
      v36 = (_DWORD *)(a1 + 224);
      v35 = v94;
      v34 = v91;
    }
    else
    {
      v22 = sub_1D4B55C08(a1, (uint64_t)v88, &v101, (int *)&v99, (uint64_t)v35, v11, __src, v32, v42, 0);
    }
LABEL_80:
    if (v22 >= 0xFFFFFFFFFFFFFF89)
      return v22;
LABEL_116:
    v35 += v22;
    v11 -= v22;
    *(_DWORD *)(a1 + 920) = 0;
    __src = v98;
    v34 -= v32;
  }
  while (v34);
  if (a7 && v35 > v84)
    *(_DWORD *)a1 = 3;
  v22 = v35 - v84;
  v14 = v85;
  __n = v86;
LABEL_126:
  if (v22 <= 0xFFFFFFFFFFFFFF88)
  {
    v79 = *(_QWORD *)(a1 + 744) + __n;
    *(_QWORD *)(a1 + 744) = v79;
    *(_QWORD *)(a1 + 752) += v22 + v14;
    v80 = *(_QWORD *)(a1 + 736);
    if (v79 + 1 <= v80 || v80 == 0)
      v22 += v14;
    else
      return -72;
  }
  return v22;
}

uint64_t sub_1D4B5293C(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  unsigned int v30;
  int v31;
  unsigned int v32;
  unsigned __int16 *v33;
  uint64_t v35;
  unint64_t v36;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  int v41[27];
  __int16 v42[32];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v8 = a3 + 8;
  *(_DWORD *)(a1 + 2056) = 1;
  v40 = 31;
  v41[0] = 255;
  *(_DWORD *)v42 = 1;
  v9 = sub_1D4B4F3B0((_QWORD *)a1, v41, (char *)(a3 + 8), a4 - 8, v42);
  if (!*(_DWORD *)v42)
    *(_DWORD *)(a1 + 2056) = 2;
  if (v9 < 0xFFFFFFFFFFFFFF89 && v41[0] > 0xFEu)
    v10 = v9;
  else
    v10 = 0;
  if (v9 < 0xFFFFFFFFFFFFFF89 && v41[0] > 0xFEu)
  {
    v11 = a3 + a4;
    v12 = v8 + v10;
    v41[0] = 0;
    v13 = sub_1D4B4CD4C(v42, &v40, v41, (_DWORD *)(v8 + v10), v11 - (v8 + v10));
    if (v13 <= 0xFFFFFFFFFFFFFF88 && v41[0] < 9u)
    {
      v14 = v13;
      v15 = sub_1D4B4E094((_WORD *)(a1 + 2064), v42, 31, v41[0], a2, 0x2200uLL);
      v16 = (_DWORD *)(v12 + v14);
      v17 = v15 >= 0xFFFFFFFFFFFFFF89 ? v12 : v12 + v14;
      if (v15 <= 0xFFFFFFFFFFFFFF88)
      {
        v38 = 0;
        v39 = 52;
        v18 = sub_1D4B4CD4C(v41, &v39, &v38, v16, v11 - (_QWORD)v16);
        if (v18 <= 0xFFFFFFFFFFFFFF88 && v38 <= 9)
        {
          v19 = v18;
          if ((unint64_t)sub_1D4B4E094((_WORD *)(a1 + 2836), (__int16 *)v41, v39, v38, a2, 0x2200uLL) <= 0xFFFFFFFFFFFFFF88)
          {
            if (v39 >= 0x34)
            {
              v21 = 0;
              while (*(_WORD *)((char *)v41 + v21))
              {
                v21 += 2;
                if ((_DWORD)v21 == 106)
                {
                  v20 = 2;
                  goto LABEL_22;
                }
              }
            }
            v20 = 1;
LABEL_22:
            *(_DWORD *)(a1 + 5608) = v20;
            v22 = (_DWORD *)(v17 + v19);
            v38 = 0;
            v39 = 35;
            v23 = sub_1D4B4CD4C(v41, &v39, &v38, v22, v11 - (_QWORD)v22);
            if (v23 <= 0xFFFFFFFFFFFFFF88 && v38 <= 9)
            {
              v24 = v23;
              if ((unint64_t)sub_1D4B4E094((_WORD *)(a1 + 4288), (__int16 *)v41, v39, v38, a2, 0x2200uLL) <= 0xFFFFFFFFFFFFFF88)
              {
                if (v39 >= 0x23)
                {
                  v26 = 0;
                  while (*(_WORD *)((char *)v41 + v26))
                  {
                    v26 += 2;
                    if ((_DWORD)v26 == 72)
                    {
                      v25 = 2;
                      goto LABEL_31;
                    }
                  }
                }
                v25 = 1;
LABEL_31:
                *(_DWORD *)(a1 + 5612) = v25;
                v27 = (_DWORD *)((char *)v22 + v24);
                v28 = (unint64_t)v22 + v24 + 12;
                if (v28 <= v11)
                {
                  *(_DWORD *)(a1 + 5616) = *v27;
                  *(_DWORD *)(a1 + 5620) = v27[1];
                  *(_DWORD *)(a1 + 5624) = v27[2];
                  v30 = __clz(v11 - v28 + 0x20000) ^ 0x1F;
                  if (v11 - v28 >= 0xFFFE0000)
                    v30 = 31;
                  if (v40 >= v30)
                  {
                    v32 = v30 + 1;
                    v33 = (unsigned __int16 *)v42;
                    while (*v33++)
                    {
                      if (!--v32)
                      {
                        v31 = 2;
                        goto LABEL_41;
                      }
                    }
                  }
                  v31 = 1;
LABEL_41:
                  v35 = 0;
                  *(_DWORD *)(a1 + 5604) = v31;
                  while (1)
                  {
                    v36 = *(unsigned int *)(a1 + 5616 + v35);
                    if (!(_DWORD)v36 || v11 - v28 < v36)
                      break;
                    v35 += 4;
                    if (v35 == 12)
                      return v28 - a3;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return -30;
}

unint64_t sub_1D4B52C50(uint64_t a1, _DWORD *a2, unint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, unint64_t a8, int a9)
{
  unint64_t v13;
  int v14;
  unint64_t result;
  int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unsigned int v26;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  int v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  _DWORD *v47;
  _DWORD *v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  int v52;
  unsigned int *v54;
  unsigned int *v55;
  unsigned int v56;
  int v58;
  size_t v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[32];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  int v78;
  int v79;

  if (!a6)
  {
    v13 = a3;
    result = sub_1D4B53AE0(a1, (_OWORD *)a7, a8, a3, 0, a9);
    if (result >= 0xFFFFFFFFFFFFFF89)
      return result;
    result = sub_1D4B569C8(*(_QWORD *)(a1 + 3176), a1 + 3192, a1 + 1008, (_QWORD *)(a1 + 656), (_DWORD *)(a1 + 224), a2, v13, a4, a5, 0, *(_WORD **)(a1 + 3496));
    goto LABEL_12;
  }
  v13 = *(_QWORD *)(a6 + 8);
  if (!v13
    || a8 >= 0x20000 && a8 != -1 && 6 * v13 <= a8 && *(_DWORD *)(a6 + 6068)
    || (v14 = *(_DWORD *)(a7 + 68), v14 == 3))
  {
    result = sub_1D4B53AE0(a1, (_OWORD *)a7, a8, *(_QWORD *)(a6 + 8), 0, a9);
    if (result >= 0xFFFFFFFFFFFFFF89)
      return result;
    result = sub_1D4B569C8(*(_QWORD *)(a1 + 3176), a1 + 3192, a1 + 1008, (_QWORD *)(a1 + 656), (_DWORD *)(a1 + 224), *(_DWORD **)a6, *(_QWORD *)(a6 + 8), *(_DWORD *)(a6 + 16), a5, 0, *(_WORD **)(a1 + 3496));
LABEL_12:
    if (result > 0xFFFFFFFFFFFFFF88)
      return result;
    *(_DWORD *)(a1 + 640) = result;
    *(_QWORD *)(a1 + 648) = v13;
    return 0;
  }
  v18 = *(_DWORD *)(a6 + 244);
  v19 = *(unsigned int *)(a6 + 384);
  if (!v18)
  {
    if (a8 == -1 || qword_1D4BD62D8[v19] >= a8)
    {
      if (v14 == 2)
        goto LABEL_34;
    }
    else if (v14 != 1)
    {
      goto LABEL_34;
    }
    if (!*(_DWORD *)(a7 + 48))
      goto LABEL_15;
LABEL_34:
    v33 = *(_OWORD *)(a7 + 160);
    v34 = *(_OWORD *)(a7 + 176);
    v35 = *(_OWORD *)(a7 + 128);
    v71 = *(_OWORD *)(a7 + 144);
    v72 = v33;
    v36 = *(_OWORD *)(a7 + 192);
    v73 = v34;
    v74 = v36;
    v37 = *(_OWORD *)(a7 + 96);
    v38 = *(_OWORD *)(a7 + 112);
    v39 = *(_OWORD *)(a7 + 64);
    v67 = *(_OWORD *)(a7 + 80);
    v68 = v37;
    v69 = v38;
    v70 = v35;
    v40 = *(_OWORD *)(a7 + 32);
    v65 = *(_OWORD *)(a7 + 48);
    v66 = v39;
    v41 = *(_OWORD *)(a7 + 16);
    *(_OWORD *)v63 = *(_OWORD *)a7;
    *(_OWORD *)&v63[16] = v41;
    v42 = *(_DWORD *)&v63[4];
    *(_OWORD *)&v63[4] = *(_OWORD *)(a6 + 360);
    *(_OWORD *)&v63[16] = *(_OWORD *)(a6 + 372);
    v64 = v40;
    *(_DWORD *)&v63[4] = v42;
    LODWORD(v71) = *(_DWORD *)(a6 + 6072);
    result = sub_1D4B53AE0(a1, v63, a8, 0, 1, a9);
    if (result > 0xFFFFFFFFFFFFFF88)
      return result;
    *(_QWORD *)(a1 + 688) = *(_QWORD *)(a1 + 672);
    v43 = *(_DWORD *)(a6 + 384);
    if (v43 == 1)
    {
      v44 = 0;
      v45 = 1 << *(_DWORD *)(a6 + 368);
      v46 = a1 + 3192;
      v47 = *(_DWORD **)(a1 + 3304);
      v48 = *(_DWORD **)(a6 + 216);
      goto LABEL_42;
    }
    v49 = v43 - 3;
    if ((v43 - 3) <= 2 && *(_DWORD *)(a6 + 6072) == 1)
    {
      v44 = 0;
      v50 = *(_DWORD *)(a6 + 368);
      v45 = 1 << v50;
      v46 = a1 + 3192;
      v47 = *(_DWORD **)(a1 + 3304);
      v48 = *(_DWORD **)(a6 + 216);
    }
    else
    {
      v44 = 1 << *(_DWORD *)(a6 + 364);
      v50 = *(_DWORD *)(a6 + 368);
      v45 = 1 << v50;
      v46 = a1 + 3192;
      v47 = *(_DWORD **)(a1 + 3304);
      v48 = *(_DWORD **)(a6 + 216);
      if (v49 >= 0xFFFFFFFE)
      {
LABEL_42:
        v51 = 0;
        do
        {
          v47[v51] = v48[v51] >> 8;
          ++v51;
        }
        while (v45 != v51);
LABEL_44:
        v52 = *(_DWORD *)(a1 + 252);
        if (v52 != 1 && ((v52 - 3) > 2 || *(_DWORD *)(a1 + 368) != 1))
        {
          v54 = *(unsigned int **)(a1 + 3320);
          v55 = *(unsigned int **)(a6 + 232);
          if ((*(_DWORD *)(a6 + 384) - 3) >= 0xFFFFFFFE)
          {
            for (; v44; --v44)
            {
              v56 = *v55++;
              *v54++ = v56 >> 8;
            }
          }
          else
          {
            memcpy(v54, v55, 4 * v44);
          }
        }
        if ((*(_DWORD *)(a6 + 384) - 6) >= 0xFFFFFFFD && *(_DWORD *)(a6 + 6072) == 1)
        {
          memcpy(*(void **)(a1 + 3248), *(const void **)(a6 + 160), v45);
          *(_QWORD *)(a1 + 3288) = *(_QWORD *)(a6 + 200);
        }
        v58 = *(_DWORD *)(a1 + 3240);
        if (v58)
          v59 = 4 << v58;
        else
          v59 = 0;
        bzero(*(void **)(a1 + 3312), v59);
        v60 = *(_QWORD *)(a1 + 680);
        if (*(_QWORD *)(a1 + 688) < v60)
          *(_QWORD *)(a1 + 688) = v60;
        v61 = *(_OWORD *)(a6 + 104);
        v62 = *(_OWORD *)(a6 + 120);
        *(_QWORD *)(v46 + 32) = *(_QWORD *)(a6 + 136);
        *(_OWORD *)v46 = v61;
        *(_OWORD *)(v46 + 16) = v62;
        *(_QWORD *)(a1 + 3232) = *(_QWORD *)(a6 + 144);
        goto LABEL_65;
      }
    }
    memcpy(v47, v48, 4 << v50);
    goto LABEL_44;
  }
LABEL_15:
  v20 = *(_OWORD *)(a7 + 176);
  v72 = *(_OWORD *)(a7 + 160);
  v73 = v20;
  v74 = *(_OWORD *)(a7 + 192);
  v21 = *(_OWORD *)(a7 + 112);
  v68 = *(_OWORD *)(a7 + 96);
  v69 = v21;
  v22 = *(_OWORD *)(a7 + 144);
  v70 = *(_OWORD *)(a7 + 128);
  v71 = v22;
  v23 = *(_OWORD *)(a7 + 48);
  v64 = *(_OWORD *)(a7 + 32);
  v65 = v23;
  v24 = *(_OWORD *)(a7 + 80);
  v66 = *(_OWORD *)(a7 + 64);
  v67 = v24;
  v25 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)v63 = *(_OWORD *)a7;
  *(_OWORD *)&v63[16] = v25;
  v26 = *(_DWORD *)(a6 + 368) - 2;
  if (v26 <= 6)
    v26 = 6;
  if ((v19 - 3) >= 3 || v18 == 0)
    v28 = *(_DWORD *)(a6 + 368);
  else
    v28 = v26;
  v29 = *(_DWORD *)&v63[4];
  v75 = *(_QWORD *)(a6 + 360);
  v76 = v28;
  v77 = *(_QWORD *)(a6 + 372);
  v78 = *(_DWORD *)(a6 + 380);
  v79 = v19;
  sub_1D4B517E4((unsigned int *)&v75, a8, v13, 1, v71, (uint64_t)&v63[4]);
  v30 = *(_DWORD *)(a6 + 6072);
  *(_DWORD *)&v63[4] = v29;
  LODWORD(v71) = v30;
  result = sub_1D4B53AE0(a1, v63, a8, 0, 0, a9);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    v31 = *(_QWORD *)(a6 + 104) - *(_QWORD *)(a6 + 112);
    if (*(_DWORD *)(a6 + 128) != (_DWORD)v31)
    {
      *(_QWORD *)(a1 + 3440) = a6 + 104;
      v32 = *(_DWORD *)(a1 + 3216);
      if (v32 < v31)
      {
        *(_QWORD *)(a1 + 3192) = *(_QWORD *)(a1 + 3200) + v31;
        *(_DWORD *)(a1 + 3220) = v31;
        *(_DWORD *)(a1 + 3216) = v31;
        v32 = v31;
      }
      *(_DWORD *)(a1 + 3232) = v32;
    }
LABEL_65:
    *(_DWORD *)(a1 + 640) = *(_DWORD *)(a6 + 6064);
    *(_QWORD *)(a1 + 648) = *(_QWORD *)(a6 + 8);
    memcpy(*(void **)(a1 + 3176), (const void *)(a6 + 408), 0x1600uLL);
    return 0;
  }
  return result;
}

unint64_t sub_1D4B5313C(uint64_t a1, char *a2, unint64_t a3, char *a4, size_t a5)
{
  unint64_t result;
  int v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  uint64_t v16;

  result = sub_1D4B52088(a1, a2, a3, a4, a5, 1, 1);
  if (result > 0xFFFFFFFFFFFFFF88)
    return result;
  v9 = *(_DWORD *)a1;
  if (!*(_DWORD *)a1)
    return -60;
  v10 = result;
  v11 = &a2[result];
  v12 = a3 - result;
  if (v9 == 3)
  {
    v14 = v11;
  }
  else
  {
    if (v9 == 1)
    {
      result = sub_1D4B53980(v11, v12, (_DWORD *)(a1 + 224), 0, 0);
      if (result > 0xFFFFFFFFFFFFFF88)
        return result;
      v12 -= result;
      v13 = &v11[result];
      *(_DWORD *)a1 = 2;
    }
    else
    {
      v13 = v11;
    }
    if (v12 < 4)
      return -70;
    *(_DWORD *)v13 = 1;
    v14 = v13 + 3;
    v12 -= 3;
  }
  if (!*(_DWORD *)(a1 + 260))
    goto LABEL_15;
  v15 = sub_1D4B4DED0((_QWORD *)(a1 + 760));
  if (v12 < 4)
    return -70;
  *(_DWORD *)v14 = v15;
  v14 += 4;
LABEL_15:
  *(_DWORD *)a1 = 0;
  result = v14 - v11;
  if ((unint64_t)(v14 - v11) <= 0xFFFFFFFFFFFFFF88)
  {
    v16 = *(_QWORD *)(a1 + 736);
    if (v16 && v16 != *(_QWORD *)(a1 + 744) + 1)
      return -72;
    else
      result += v10;
  }
  return result;
}

unint64_t sub_1D4B5325C(uint64_t a1, char *a2, unint64_t a3, char *a4, unint64_t a5, _DWORD *a6, unint64_t a7, uint64_t a8)
{
  unint64_t result;

  result = sub_1D4B52C50(a1, a6, a7, 0, 0, 0, a8, a5, 0);
  if (result <= 0xFFFFFFFFFFFFFF88)
    return sub_1D4B5313C(a1, a2, a3, a4, a5);
  return result;
}

unint64_t sub_1D4B532F8(uint64_t a1, char *a2, unint64_t a3, char *a4, unint64_t a5, _DWORD *a6, unint64_t a7, int a8)
{
  unint64_t v16;
  int v17;
  _BYTE v19[28];
  int v20;
  uint64_t v21;
  _BYTE v22[28];

  *(_OWORD *)v22 = 0uLL;
  if (a6)
    v16 = a7;
  else
    v16 = 0;
  *(_DWORD *)&v22[24] = 0;
  *(_QWORD *)&v22[16] = 0;
  sub_1D4B51984(a8, a5, v16, 0, (uint64_t)v22);
  v21 = 0;
  *(_OWORD *)v19 = *(_OWORD *)v22;
  *(_OWORD *)&v19[12] = *(_OWORD *)&v22[12];
  v20 = 1;
  if (a8)
    v17 = a8;
  else
    v17 = 3;
  sub_1D4B516B0(a1 + 432, (__int128 *)v19, v17);
  return sub_1D4B5325C(a1, a2, a3, a4, a5, a6, a7, a1 + 432);
}

unint64_t sub_1D4B533D8(uint64_t a1, char *a2, unint64_t a3, char *a4, unint64_t a5, int a6)
{
  return sub_1D4B532F8(a1, a2, a3, a4, a5, 0, 0, a6);
}

unint64_t sub_1D4B533E8(int *a1, int a2, int a3, int a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1[6];
  if ((!a3 || a4) && (v4 == 1 || a2 == 1 && v4 - 3 < 3))
    v5 = 0;
  else
    v5 = 4 << a1[1];
  v6 = a1[2];
  if (a4 && a1[4] == 3)
  {
    v7 = *a1;
    if (*a1 >= 0x11)
      v7 = 17;
  }
  else
  {
    v7 = 0;
  }
  v8 = v4 >= 6;
  v9 = v4 - 6;
  v10 = v9 == 0 || !v8 || a4 == 0;
  v11 = 128;
  if (!v10)
    v11 = 149312;
  v12 = v9 >= 0xFFFFFFFD && a2 == 1;
  v13 = ((1 << v6) + 63) & 0xFFFFFFFFFFFFFFC0;
  v14 = 4 << v6;
  if (!v12)
    v13 = 0;
  if (v7)
    v15 = 4 << v7;
  else
    v15 = 0;
  return v11 + v5 + v14 + v13 + v15;
}

uint64_t sub_1D4B534AC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _BOOL4 v4;
  void (*v5)(uint64_t);

  if (a1)
  {
    v2 = a1[757];
    v3 = (_QWORD *)a1[4];
    v4 = v3 <= a1 && a1[5] > (unint64_t)a1;
    v5 = (void (*)(uint64_t))a1[756];
    a1[12] = 0;
    *((_OWORD *)a1 + 4) = 0u;
    *((_OWORD *)a1 + 5) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    if (v3)
    {
      if (!v5)
      {
        free(v3);
        if (v4)
          return 0;
        goto LABEL_12;
      }
      v5(v2);
    }
    if (!v4)
    {
      if (v5)
      {
        ((void (*)(uint64_t, _QWORD *))v5)(v2, a1);
        return 0;
      }
LABEL_12:
      free(a1);
    }
  }
  return 0;
}

uint64_t sub_1D4B53550(uint64_t a1, unsigned int *a2, uint64_t a3, unint64_t a4, char *__src, uint64_t a6, int a7)
{
  char *v8;
  unsigned int *v10;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  unsigned int *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  _OWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unint64_t v40;
  _OWORD *v41;
  __int128 *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t result;
  int v51;
  int v52;
  char *v53;
  char *v54;
  uint64_t v56;
  unsigned int v57;
  int v58;
  _BYTE v59[12];

  v8 = __src;
  v10 = a2;
  v12 = *a2;
  v13 = *(_QWORD *)(a1 + 3672);
  if (v13)
  {
    v14 = (unsigned int *)(v13 + 8);
  }
  else
  {
    if (!*(_QWORD *)(a1 + 3680))
    {
      v56 = 0;
      goto LABEL_6;
    }
    v14 = (unsigned int *)(a1 + 3688);
  }
  v56 = *v14;
LABEL_6:
  v15 = &__src[a6];
  v16 = *(_QWORD *)(a1 + 3176);
  *(_QWORD *)v59 = *(_QWORD *)(v16 + 5616);
  *(_DWORD *)&v59[8] = *(_DWORD *)(v16 + 5624);
  if (v12 >= a4)
  {
    v20 = v12;
    v39 = v12;
    goto LABEL_66;
  }
  v52 = v12;
  v53 = &__src[a6];
  v17 = v15 - 32;
  v19 = *(_DWORD *)v59;
  v18 = *(_DWORD *)&v59[4];
  v57 = *(_DWORD *)&v59[8];
  v20 = v12;
  v21 = v12;
  v54 = v15 - 32;
  while (1)
  {
    v22 = (unsigned int *)(a3 + 16 * v20);
    v23 = v22[2];
    if (!(_DWORD)v23 && !*v22)
      break;
    v24 = v22[1];
    if (a7 == 2)
    {
      v25 = *v22 + 3;
      goto LABEL_28;
    }
    v26 = *v22;
    if ((_DWORD)v24)
      v27 = v19 == v26;
    else
      v27 = 0;
    if (v27)
    {
      v25 = 1;
    }
    else if (v18 == v26)
    {
      if ((_DWORD)v24)
        v25 = 2;
      else
        v25 = 1;
    }
    else if (v57 == v26)
    {
      if ((_DWORD)v24)
        v25 = 3;
      else
        v25 = 2;
    }
    else if ((_DWORD)v24 || v19 - 1 != v26)
    {
      v25 = v26 + 3;
      if (v26 != 0 && v26 < 0xFFFFFFFD)
        goto LABEL_27;
    }
    else
    {
      v25 = 3;
    }
    v28 = v24 != 0;
    v29 = v25 - v28;
    if (v25 == v28)
      goto LABEL_28;
    if (v29 == 3)
      v26 = v19 - 1;
    else
      v26 = *(_DWORD *)&v59[4 * v29];
    if (v29 <= 1)
      v18 = v57;
LABEL_27:
    *(_DWORD *)&v59[4] = v19;
    *(_DWORD *)&v59[8] = v18;
    v57 = v18;
    v18 = v19;
    v19 = v26;
    *(_DWORD *)v59 = v26;
LABEL_28:
    if (*(_DWORD *)(a1 + 360))
    {
      v30 = *((_QWORD *)v10 + 1) + (v24 + v23);
      *((_QWORD *)v10 + 1) = v30;
      v31 = v30 <= 1 << *(_DWORD *)(a1 + 228) ? v30 + v56 : 1 << *(_DWORD *)(a1 + 228);
      if (v31 + 3 < v25)
        return -107;
      v32 = *(_DWORD *)(a1 + 244) != 3 && *(_DWORD *)(a1 + 408) == 0;
      v33 = 3;
      if (v32)
        v33 = 4;
      if (v33 > v23)
        return -107;
    }
    if (*(_QWORD *)(a1 + 984) <= (unint64_t)(v21 - *v10))
      return -107;
    v34 = *(_OWORD **)(a1 + 952);
    if (&v8[v24] > v17)
    {
      v58 = v21;
      v35 = a4;
      v36 = a3;
      sub_1D4B56E1C(v34, v8, (unint64_t)&v8[v24], v17);
      a4 = v35;
      a3 = v36;
LABEL_42:
      *(_QWORD *)(a1 + 952) += v24;
      v37 = *(_QWORD *)(a1 + 936);
      if (v24 >= 0x10000)
      {
        *(_DWORD *)(a1 + 1000) = 1;
        *(_DWORD *)(a1 + 1004) = (unint64_t)(v37 - *(_QWORD *)(a1 + 928)) >> 3;
      }
      v17 = v54;
      v10 = a2;
      v21 = v58;
      goto LABEL_48;
    }
    *v34 = *(_OWORD *)v8;
    if (v24 >= 0x11)
    {
      v38 = *(_QWORD *)(a1 + 952);
      *(_OWORD *)(v38 + 16) = *((_OWORD *)v8 + 1);
      if ((unint64_t)(v24 - 16) >= 0x11)
      {
        v58 = v21;
        v40 = v38 + v24;
        v41 = (_OWORD *)(v38 + 32);
        v42 = (__int128 *)(v8 + 48);
        do
        {
          *v41 = *(v42 - 1);
          v43 = *v42;
          v42 += 2;
          v41[1] = v43;
          v41 += 2;
        }
        while ((unint64_t)v41 < v40);
        goto LABEL_42;
      }
    }
    *(_QWORD *)(a1 + 952) += v24;
    v37 = *(_QWORD *)(a1 + 936);
LABEL_48:
    *(_WORD *)(v37 + 4) = v24;
    *(_DWORD *)v37 = v25;
    if (v23 - 3 >= 0x10000)
    {
      *(_DWORD *)(a1 + 1000) = 2;
      *(_DWORD *)(a1 + 1004) = (unint64_t)(v37 - *(_QWORD *)(a1 + 928)) >> 3;
    }
    *(_WORD *)(v37 + 6) = v23 - 3;
    *(_QWORD *)(a1 + 936) = v37 + 8;
    v8 += (v24 + v23);
    v20 = (v21 + 1);
    v21 = v20;
    v39 = v20;
    if (v20 >= a4)
      goto LABEL_73;
  }
  v39 = v21;
LABEL_73:
  if (a7 == 2)
  {
    v15 = v53;
    if (v39 != v52)
    {
      if (v39 - 1 >= (v52 + 2))
      {
        v51 = *(_DWORD *)(a3 + 16 * (v39 - 3));
LABEL_80:
        *(_DWORD *)&v59[4] = *(_DWORD *)(a3 + 16 * (v39 - 2));
        *(_DWORD *)&v59[8] = v51;
      }
      else
      {
        if (v39 == v52 + 2)
        {
          v51 = *(_DWORD *)v59;
          goto LABEL_80;
        }
        *(_QWORD *)&v59[4] = *(_QWORD *)v59;
      }
      *(_DWORD *)v59 = *(_DWORD *)(a3 + 16 * (v39 - 1));
    }
  }
  else
  {
    v15 = v53;
  }
LABEL_66:
  v44 = *(_QWORD *)(a1 + 3184);
  *(_QWORD *)(v44 + 5616) = *(_QWORD *)v59;
  *(_DWORD *)(v44 + 5624) = *(_DWORD *)&v59[8];
  v45 = a3 + 16 * v20;
  v48 = *(_DWORD *)(v45 + 4);
  v47 = (unsigned int *)(v45 + 4);
  v46 = v48;
  if (v48)
  {
    memcpy(*(void **)(a1 + 952), v8, v46);
    *(_QWORD *)(a1 + 952) += v46;
    v49 = *v47;
    v8 += v49;
    *((_QWORD *)v10 + 1) += v49;
  }
  if (v8 != v15)
    return -107;
  result = 0;
  *v10 = v39 + 1;
  return result;
}

uint64_t sub_1D4B53980(_DWORD *a1, unint64_t a2, _DWORD *a3, unint64_t a4, unsigned int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v5 = a5 > 0xFF;
  if (a5)
    ++v5;
  if ((a5 & 0xFFFF0000) != 0)
    ++v5;
  if (a3[10])
    v6 = 0;
  else
    v6 = v5;
  v7 = a3[1];
  v8 = a3[8];
  if (v8)
    v9 = 1 << v7 >= a4;
  else
    v9 = 0;
  v10 = v9;
  v11 = a4 >> 8 > 0x100;
  if (a4 > 0xFF)
    ++v11;
  if (a4 > 0xFFFFFFFE)
    ++v11;
  if (v8)
    v12 = v11;
  else
    v12 = 0;
  if (v10)
    v13 = 32;
  else
    v13 = 0;
  if (a2 < 0x12)
    return -70;
  v15 = v13 | (v6 + 4 * (a3[9] > 0)) | ((_BYTE)v12 << 6);
  if (*a3)
  {
    v16 = 0;
  }
  else
  {
    *a1 = -47205080;
    v16 = 1;
  }
  v14 = (v16 * 4) | 1;
  LOBYTE(a1[v16]) = v15;
  if ((v10 & 1) == 0)
  {
    *((_BYTE *)a1 + v14) = 8 * v7 - 80;
    v14 = (v16 * 4) | 2;
  }
  switch(v6)
  {
    case 3:
      *(_DWORD *)((char *)a1 + v14) = a5;
      v14 += 4;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v14) = a5;
      v14 += 2;
      break;
    case 1:
      *((_BYTE *)a1 + v14++) = a5;
      break;
  }
  switch(v12)
  {
    case 1:
      *(_WORD *)((char *)a1 + v14) = a4 - 256;
      v14 += 2;
      break;
    case 2:
      *(_DWORD *)((char *)a1 + v14) = a4;
      v14 += 4;
      break;
    case 3:
      *(_QWORD *)((char *)a1 + v14) = a4;
      v14 += 8;
      break;
    default:
      if (v10)
        *((_BYTE *)a1 + v14++) = a4;
      break;
  }
  return v14;
}

uint64_t sub_1D4B53AE0(uint64_t a1, _OWORD *a2, unint64_t a3, unint64_t a4, int a5, int a6)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  unint64_t v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _BOOL4 v36;
  unsigned int v37;
  _BYTE *v38;
  unsigned int *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  size_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void *v61;
  uint64_t (*v62)(_QWORD, size_t);
  char *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  size_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  unsigned int v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  unint64_t v120;
  __int128 v121;
  uint64_t v122;

  *(_DWORD *)(a1 + 920) = 1;
  *(_OWORD *)(a1 + 224) = *a2;
  v11 = a2[1];
  v12 = a2[2];
  v13 = a2[4];
  *(_OWORD *)(a1 + 272) = a2[3];
  *(_OWORD *)(a1 + 288) = v13;
  *(_OWORD *)(a1 + 240) = v11;
  *(_OWORD *)(a1 + 256) = v12;
  v14 = a2[5];
  v15 = a2[6];
  v16 = a2[8];
  *(_OWORD *)(a1 + 336) = a2[7];
  *(_OWORD *)(a1 + 352) = v16;
  *(_OWORD *)(a1 + 304) = v14;
  *(_OWORD *)(a1 + 320) = v15;
  v17 = a2[9];
  v18 = a2[10];
  v19 = a2[12];
  *(_OWORD *)(a1 + 400) = a2[11];
  *(_OWORD *)(a1 + 416) = v19;
  *(_OWORD *)(a1 + 368) = v17;
  *(_OWORD *)(a1 + 384) = v18;
  v20 = a1 + 320;
  if (*(_DWORD *)(a1 + 320) == 1)
    sub_1D4B87C08((_DWORD *)(a1 + 320), (unsigned int *)(a1 + 228));
  v21 = 1 << *(_DWORD *)(a1 + 228);
  if (v21 >= a3)
    v21 = a3;
  if (!a3)
    v21 = 1;
  if (*(_QWORD *)(a1 + 416) >= v21)
    v22 = v21;
  else
    v22 = *(_QWORD *)(a1 + 416);
  if (*(_DWORD *)(a1 + 408))
    v23 = 1;
  else
    v23 = *(_DWORD *)(a1 + 244) == 3;
  if (v23)
    v24 = 3;
  else
    v24 = 4;
  v119 = a5;
  if (a6 == 1)
  {
    if (*(_DWORD *)(a1 + 352))
    {
      v25 = 0;
    }
    else
    {
      if (v22 > 0xFF00FF00FF00FEFFLL)
        goto LABEL_24;
      v27 = (0x20000 - v22) >> 11;
      if (v22 >= 0x20000)
        v27 = 0;
      v28 = v22 + (v22 >> 8) + v27;
      if (!v28)
LABEL_24:
        v28 = -72;
      v25 = v28 + 1;
    }
    v29 = v22 + v21;
    if (*(_DWORD *)(a1 + 348))
      v26 = 0;
    else
      v26 = v29;
  }
  else
  {
    v25 = 0;
    v26 = 0;
  }
  v121 = *(_OWORD *)v20;
  v122 = *(_QWORD *)(v20 + 16);
  v120 = v22;
  v30 = 1;
  v118 = sub_1D4B87CA4(&v121, v22);
  if (!(a4 >> 29) && *(_QWORD *)(a1 + 3192) - *(_QWORD *)(a1 + 3200) <= 0xDF000000uLL)
    v30 = *(_DWORD *)(a1 + 924) == 0;
  v31 = sub_1D4B51A60((int *)(a1 + 228), (__int128 *)v20, *(_QWORD *)(a1 + 880) != 0, *(_DWORD *)(a1 + 368), v26, v25, a3, *(_DWORD *)(a1 + 408), *(_QWORD *)(a1 + 416));
  v32 = v31;
  if (v31 > 0xFFFFFFFFFFFFFF88)
    return v32;
  v33 = *(_QWORD *)(a1 + 880);
  if (!v33)
    ++*(_DWORD *)(a1 + 716);
  v34 = *(_QWORD *)(a1 + 664);
  v35 = *(void **)(a1 + 656);
  v117 = v24;
  v36 = *(_QWORD *)(a1 + 696) - *(_QWORD *)(a1 + 680) >= 3 * v31 && *(_DWORD *)(a1 + 716) > 128;
  if (v34 - (uint64_t)v35 < v31 || v36)
  {
    if (!v33)
    {
      v48 = *(void (**)(uint64_t))(a1 + 856);
      v49 = *(_QWORD *)(a1 + 864);
      *(_OWORD *)(a1 + 656) = 0u;
      *(_OWORD *)(a1 + 672) = 0u;
      *(_OWORD *)(a1 + 688) = 0u;
      *(_OWORD *)(a1 + 704) = 0u;
      *(_QWORD *)(a1 + 720) = 0;
      if (v35)
      {
        if (v48)
          v48(v49);
        else
          free(v35);
      }
      v62 = *(uint64_t (**)(_QWORD, size_t))(a1 + 848);
      v63 = v62 ? (char *)v62(*(_QWORD *)(a1 + 864), v32) : (char *)malloc(v32);
      v40 = v120;
      if (v63)
      {
        *(_QWORD *)(a1 + 656) = v63;
        *(_QWORD *)(a1 + 664) = &v63[v32];
        *(_QWORD *)(a1 + 672) = v63;
        *(_QWORD *)(a1 + 688) = v63;
        v64 = (unint64_t)&v63[v32] & 0xFFFFFFFFFFFFFFC0;
        *(_QWORD *)(a1 + 704) = v64;
        *(_QWORD *)(a1 + 720) = 0;
        *(_QWORD *)(a1 + 680) = v63;
        *(_QWORD *)(a1 + 696) = v64;
        *(_BYTE *)(a1 + 712) = 0;
        *(_DWORD *)(a1 + 716) = 0;
        if ((uint64_t)v32 > 5631)
        {
          *(_QWORD *)(a1 + 672) = v63 + 5632;
          *(_QWORD *)(a1 + 680) = v63 + 5632;
          *(_QWORD *)(a1 + 688) = v63 + 5632;
          *(_QWORD *)(a1 + 3176) = v63;
          if (v32 >> 10 > 0xA)
          {
            *(_QWORD *)(a1 + 672) = v63 + 11264;
            *(_QWORD *)(a1 + 680) = v63 + 11264;
            *(_QWORD *)(a1 + 688) = v63 + 11264;
            *(_QWORD *)(a1 + 3184) = v63 + 5632;
            if (v32 >> 3 > 0x9DA)
            {
              v115 = a6;
              v116 = v25;
              *(_QWORD *)(a1 + 672) = v63 + 20184;
              v39 = (unsigned int *)(a1 + 720);
              *(_QWORD *)(a1 + 688) = v63 + 20184;
              v38 = (_BYTE *)(a1 + 712);
              *(_QWORD *)(a1 + 3496) = v63 + 11264;
              *(_QWORD *)(a1 + 680) = v63 + 20184;
              *(_BYTE *)(a1 + 712) = 0;
              v30 = 1;
              goto LABEL_45;
            }
            *(_BYTE *)(a1 + 712) = 1;
            *(_QWORD *)(a1 + 3496) = 0;
          }
          else
          {
            *(_BYTE *)(a1 + 712) = 1;
            *(_QWORD *)(a1 + 3184) = 0;
          }
        }
        else
        {
          *(_BYTE *)(a1 + 712) = 1;
          *(_QWORD *)(a1 + 3176) = 0;
        }
      }
    }
    return -64;
  }
  v116 = v25;
  v37 = *(_DWORD *)(a1 + 720);
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a1 + 672);
  *(_QWORD *)(a1 + 696) = v34 & 0xFFFFFFFFFFFFFFC0;
  v38 = (_BYTE *)(a1 + 712);
  *(_BYTE *)(a1 + 712) = 0;
  v115 = a6;
  v39 = (unsigned int *)(a1 + 720);
  if (v37 >= 2)
    *(_DWORD *)(a1 + 720) = 1;
  v40 = v120;
LABEL_45:
  *(_OWORD *)(a1 + 3448) = *(_OWORD *)(a1 + 228);
  *(_OWORD *)(a1 + 3460) = *(_OWORD *)(a1 + 240);
  *(_DWORD *)(a1 + 3488) = *(_DWORD *)(a1 + 400) == 1;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_QWORD *)(a1 + 736) = a3 + 1;
  if (a3 == -1)
    *(_DWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 728) = v40;
  v41 = v40;
  sub_1D4B4DCE4(a1 + 760, 0);
  *(_DWORD *)a1 = 1;
  *(_DWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  v42 = *(_QWORD *)(a1 + 3176);
  *(_DWORD *)(v42 + 5624) = 8;
  *(_QWORD *)(v42 + 5616) = 0x400000001;
  *(_DWORD *)(v42 + 2056) = 0;
  *(_DWORD *)(v42 + 5604) = 0;
  *(_QWORD *)(v42 + 5608) = 0;
  v32 = sub_1D4B5475C(a1 + 3192, a1 + 656, (_DWORD *)(a1 + 228), *(_DWORD *)(a1 + 368), v119, v30, 1);
  if (v32 <= 0xFFFFFFFFFFFFFF88)
  {
    v43 = *v39;
    v44 = v41 / v24;
    v45 = v41;
    v46 = v38;
    if (*v39 > 1)
    {
      v47 = v116;
    }
    else
    {
      v47 = v116;
      if (!v43)
      {
        v51 = *(_QWORD *)(a1 + 672);
        *(_QWORD *)(a1 + 688) = v51;
        v52 = *(_QWORD *)(a1 + 664);
        *(_QWORD *)(a1 + 704) = v52 & 0xFFFFFFFFFFFFFFC0;
        v53 = -(int)v51 & 0x3FLL;
        v54 = v51 + v53;
        if (v54 > v52)
        {
          v43 = 0;
          v50 = 0;
          goto LABEL_63;
        }
        *(_QWORD *)(a1 + 672) = v54;
        *(_QWORD *)(a1 + 680) = v54;
        if (v53)
          *(_QWORD *)(a1 + 688) = v54;
      }
      v43 = 2;
      *v39 = 2;
    }
    v50 = (8 * v44 + 63) & 0xFFFFFFFFFFFFFFC0;
    if (v50)
    {
      v50 = *(_QWORD *)(a1 + 696) - v50;
      if (v50 >= *(_QWORD *)(a1 + 680))
      {
        if (v50 < *(_QWORD *)(a1 + 688))
          *(_QWORD *)(a1 + 688) = v50;
        *(_QWORD *)(a1 + 696) = v50;
      }
      else
      {
        v50 = 0;
        *v46 = 1;
      }
    }
LABEL_63:
    *(_QWORD *)(a1 + 928) = v50;
    if (*(_DWORD *)(a1 + 320) != 1)
      goto LABEL_102;
    v55 = 8 << *(_DWORD *)(a1 + 324);
    if (v43 <= 1)
    {
      v56 = *(_QWORD *)(a1 + 672);
      *(_QWORD *)(a1 + 688) = v56;
      v57 = *(_QWORD *)(a1 + 664);
      *(_QWORD *)(a1 + 704) = v57 & 0xFFFFFFFFFFFFFFC0;
      v58 = -(int)v56 & 0x3FLL;
      v59 = v56 + v58;
      if (v59 > v57)
        goto LABEL_72;
      *(_QWORD *)(a1 + 672) = v59;
      *(_QWORD *)(a1 + 680) = v59;
      if (v58)
        *(_QWORD *)(a1 + 688) = v59;
      *v39 = 2;
    }
    v60 = (v55 + 63) & 0xFFFFFFFFFFFFFFC0;
    if (v60)
    {
      v61 = (void *)(*(_QWORD *)(a1 + 696) - v60);
      if ((unint64_t)v61 >= *(_QWORD *)(a1 + 680))
      {
        if ((unint64_t)v61 < *(_QWORD *)(a1 + 688))
          *(_QWORD *)(a1 + 688) = v61;
        *(_QWORD *)(a1 + 696) = v61;
      }
      else
      {
        v61 = 0;
        *v46 = 1;
      }
LABEL_85:
      *(_QWORD *)(a1 + 1048) = v61;
      bzero(v61, v55);
      v43 = *(_DWORD *)(a1 + 720);
      if (v43 > 1)
      {
        v45 = v120;
        v65 = v118;
      }
      else
      {
        v45 = v120;
        v65 = v118;
        if (!v43)
        {
          v67 = *(_QWORD *)(a1 + 672);
          *(_QWORD *)(a1 + 688) = v67;
          v68 = *(_QWORD *)(a1 + 664);
          *(_QWORD *)(a1 + 704) = v68 & 0xFFFFFFFFFFFFFFC0;
          v69 = -(int)v67 & 0x3FLL;
          v70 = v67 + v69;
          if (v70 > v68)
          {
            v43 = 0;
            v66 = 0;
LABEL_101:
            *(_QWORD *)(a1 + 3120) = v66;
            *(_QWORD *)(a1 + 3128) = v65;
            *(_QWORD *)(a1 + 1040) = 0;
            *(_QWORD *)(a1 + 1016) = " ";
            *(_QWORD *)(a1 + 1024) = " ";
            *(_QWORD *)(a1 + 1032) = 0x200000002;
            *(_QWORD *)(a1 + 1008) = "\n";
            *(_DWORD *)(a1 + 1056) = 0;
LABEL_102:
            if (!*(_DWORD *)(a1 + 408))
              goto LABEL_116;
            v71 = v45 / 3 + 1;
            *(_QWORD *)(a1 + 5232) = v71;
            if (v43 <= 1)
            {
              v72 = *(_QWORD *)(a1 + 672);
              *(_QWORD *)(a1 + 688) = v72;
              v73 = *(_QWORD *)(a1 + 664);
              *(_QWORD *)(a1 + 704) = v73 & 0xFFFFFFFFFFFFFFC0;
              v74 = -(int)v72 & 0x3FLL;
              v75 = v72 + v74;
              if (v75 > v73)
              {
                v43 = 0;
                v76 = 0;
LABEL_115:
                *(_QWORD *)(a1 + 5224) = v76;
LABEL_116:
                if (v43 <= 2)
                {
                  if (!v43)
                  {
                    v79 = *(_QWORD *)(a1 + 672);
                    *(_QWORD *)(a1 + 688) = v79;
                    v80 = *(_QWORD *)(a1 + 664);
                    *(_QWORD *)(a1 + 704) = v80 & 0xFFFFFFFFFFFFFFC0;
                    v81 = -(int)v79 & 0x3FLL;
                    v82 = v79 + v81;
                    if (v82 > v80)
                    {
                      *(_QWORD *)(a1 + 944) = 0;
                      *(_QWORD *)(a1 + 992) = v45;
                      *(_DWORD *)(a1 + 3504) = v115;
                      *(_QWORD *)(a1 + 3520) = v26;
                      v83 = *(_QWORD *)(a1 + 672);
                      *(_QWORD *)(a1 + 688) = v83;
                      v84 = *(_QWORD *)(a1 + 664);
                      *(_QWORD *)(a1 + 704) = v84 & 0xFFFFFFFFFFFFFFC0;
                      v85 = -(int)v83 & 0x3FLL;
                      v86 = v83 + v85;
                      if (v86 > v84)
                      {
                        *(_QWORD *)(a1 + 3512) = 0;
                        *(_QWORD *)(a1 + 3560) = v47;
                        v87 = *(_QWORD *)(a1 + 672);
                        *(_QWORD *)(a1 + 688) = v87;
                        v88 = *(_QWORD *)(a1 + 664);
                        *(_QWORD *)(a1 + 704) = v88 & 0xFFFFFFFFFFFFFFC0;
                        v89 = -(int)v87 & 0x3FLL;
                        v90 = v87 + v89;
                        if (v90 <= v88)
                        {
                          *(_QWORD *)(a1 + 672) = v90;
                          *(_QWORD *)(a1 + 680) = v90;
                          if (v89)
                            *(_QWORD *)(a1 + 688) = v90;
                          v43 = 3;
                          *v39 = 3;
                          if (v47)
                            goto LABEL_146;
                        }
                        else
                        {
                          v43 = 0;
                        }
                        goto LABEL_154;
                      }
                      *(_QWORD *)(a1 + 672) = v86;
                      *(_QWORD *)(a1 + 680) = v86;
                      if (v85)
                        *(_QWORD *)(a1 + 688) = v86;
                      v43 = 3;
                      *v39 = 3;
                      if (v26)
                        goto LABEL_127;
                      goto LABEL_144;
                    }
                    *(_QWORD *)(a1 + 672) = v82;
                    *(_QWORD *)(a1 + 680) = v82;
                    if (v81)
                      *(_QWORD *)(a1 + 688) = v82;
                  }
                  v43 = 3;
                  *v39 = 3;
                }
                if (v45 == -32)
                {
                  v77 = 0;
                }
                else
                {
                  v77 = *(_QWORD *)(a1 + 696) - v45 - 32;
                  if (v77 >= *(_QWORD *)(a1 + 680))
                  {
                    if (v77 < *(_QWORD *)(a1 + 688))
                      *(_QWORD *)(a1 + 688) = v77;
                    *(_QWORD *)(a1 + 696) = v77;
                  }
                  else
                  {
                    v77 = 0;
                    *v46 = 1;
                  }
                }
                *(_QWORD *)(a1 + 944) = v77;
                *(_QWORD *)(a1 + 992) = v45;
                *(_DWORD *)(a1 + 3504) = v115;
                *(_QWORD *)(a1 + 3520) = v26;
                if (v26)
                {
LABEL_127:
                  v78 = *(_QWORD *)(a1 + 696) - v26;
                  if (v78 >= *(_QWORD *)(a1 + 680))
                  {
                    if (v78 < *(_QWORD *)(a1 + 688))
                      *(_QWORD *)(a1 + 688) = v78;
                    *(_QWORD *)(a1 + 696) = v78;
                  }
                  else
                  {
                    v78 = 0;
                    *v46 = 1;
                  }
LABEL_145:
                  *(_QWORD *)(a1 + 3512) = v78;
                  *(_QWORD *)(a1 + 3560) = v47;
                  if (v47)
                  {
LABEL_146:
                    v91 = *(_QWORD *)(a1 + 696) - v47;
                    if (v91 >= *(_QWORD *)(a1 + 680))
                    {
                      if (v91 < *(_QWORD *)(a1 + 688))
                        *(_QWORD *)(a1 + 688) = v91;
                      *(_QWORD *)(a1 + 696) = v91;
                    }
                    else
                    {
                      v91 = 0;
                      *v46 = 1;
                    }
LABEL_155:
                    *(_QWORD *)(a1 + 3552) = v91;
                    if (*(_DWORD *)(a1 + 320) != 1)
                    {
LABEL_168:
                      if (*(_DWORD *)a1 == 1 && *(_DWORD *)v20 != 1)
                      {
                        *(_QWORD *)(a1 + 3168) = 0;
                        *(_OWORD *)(a1 + 3152) = 0u;
                        *(_OWORD *)(a1 + 3136) = 0u;
                      }
                      *(_QWORD *)(a1 + 984) = v44;
                      v98 = *(_DWORD *)(a1 + 720);
                      if (v98 <= 2)
                      {
                        if (!v98)
                        {
                          v103 = *(_QWORD *)(a1 + 672);
                          *(_QWORD *)(a1 + 688) = v103;
                          v104 = *(_QWORD *)(a1 + 664);
                          *(_QWORD *)(a1 + 704) = v104 & 0xFFFFFFFFFFFFFFC0;
                          v105 = -(int)v103 & 0x3FLL;
                          v106 = v103 + v105;
                          if (v106 > v104)
                          {
                            *(_QWORD *)(a1 + 960) = 0;
                            v107 = *(_QWORD *)(a1 + 672);
                            *(_QWORD *)(a1 + 688) = v107;
                            v108 = *(_QWORD *)(a1 + 664);
                            *(_QWORD *)(a1 + 704) = v108 & 0xFFFFFFFFFFFFFFC0;
                            v109 = -(int)v107 & 0x3FLL;
                            v110 = v107 + v109;
                            if (v110 > v108)
                            {
                              v101 = 0;
                              *(_QWORD *)(a1 + 968) = 0;
                              v111 = *(_QWORD *)(a1 + 672);
                              *(_QWORD *)(a1 + 688) = v111;
                              v112 = *(_QWORD *)(a1 + 664);
                              *(_QWORD *)(a1 + 704) = v112 & 0xFFFFFFFFFFFFFFC0;
                              v113 = -(int)v111 & 0x3FLL;
                              v114 = v111 + v113;
                              if (v114 > v112)
                              {
LABEL_197:
                                v32 = 0;
                                *(_QWORD *)(a1 + 976) = v101;
                                *(_DWORD *)(a1 + 924) = 1;
                                return v32;
                              }
                              *(_QWORD *)(a1 + 672) = v114;
                              *(_QWORD *)(a1 + 680) = v114;
                              if (v113)
                                *(_QWORD *)(a1 + 688) = v114;
                              *v39 = 3;
LABEL_190:
                              if (v117 <= v45)
                              {
                                v101 = *(_QWORD *)(a1 + 696) - v44;
                                if (v101 >= *(_QWORD *)(a1 + 680))
                                {
                                  if (v101 < *(_QWORD *)(a1 + 688))
                                    *(_QWORD *)(a1 + 688) = v101;
                                  *(_QWORD *)(a1 + 696) = v101;
                                }
                                else
                                {
                                  v101 = 0;
                                  *v46 = 1;
                                }
                              }
                              else
                              {
                                v101 = 0;
                              }
                              goto LABEL_197;
                            }
                            *(_QWORD *)(a1 + 672) = v110;
                            *(_QWORD *)(a1 + 680) = v110;
                            if (v109)
                              *(_QWORD *)(a1 + 688) = v110;
                            *v39 = 3;
LABEL_182:
                            if (v117 <= v45)
                            {
                              v100 = *(_QWORD *)(a1 + 696) - v44;
                              if (v100 >= *(_QWORD *)(a1 + 680))
                              {
                                if (v100 < *(_QWORD *)(a1 + 688))
                                  *(_QWORD *)(a1 + 688) = v100;
                                *(_QWORD *)(a1 + 696) = v100;
                              }
                              else
                              {
                                v100 = 0;
                                *v46 = 1;
                              }
                            }
                            else
                            {
                              v100 = 0;
                            }
                            *(_QWORD *)(a1 + 968) = v100;
                            goto LABEL_190;
                          }
                          *(_QWORD *)(a1 + 672) = v106;
                          *(_QWORD *)(a1 + 680) = v106;
                          if (v105)
                            *(_QWORD *)(a1 + 688) = v106;
                        }
                        *v39 = 3;
                      }
                      if (v117 <= v45)
                      {
                        v99 = *(_QWORD *)(a1 + 696) - v44;
                        if (v99 >= *(_QWORD *)(a1 + 680))
                        {
                          if (v99 < *(_QWORD *)(a1 + 688))
                            *(_QWORD *)(a1 + 688) = v99;
                          *(_QWORD *)(a1 + 696) = v99;
                        }
                        else
                        {
                          v99 = 0;
                          *v46 = 1;
                        }
                      }
                      else
                      {
                        v99 = 0;
                      }
                      *(_QWORD *)(a1 + 960) = v99;
                      goto LABEL_182;
                    }
                    v92 = 1 << (*(_BYTE *)(a1 + 324) - *(_BYTE *)(a1 + 328));
                    if (v43 <= 2)
                    {
                      v93 = *(_QWORD *)(a1 + 672);
                      *(_QWORD *)(a1 + 688) = v93;
                      v94 = *(_QWORD *)(a1 + 664);
                      *(_QWORD *)(a1 + 704) = v94 & 0xFFFFFFFFFFFFFFC0;
                      v95 = -(int)v93 & 0x3FLL;
                      v96 = v93 + v95;
                      if (v96 > v94)
                      {
                        v97 = 0;
LABEL_167:
                        *(_QWORD *)(a1 + 1064) = v97;
                        bzero(v97, v92);
                        v45 = v120;
                        goto LABEL_168;
                      }
                      *(_QWORD *)(a1 + 672) = v96;
                      *(_QWORD *)(a1 + 680) = v96;
                      if (v95)
                        *(_QWORD *)(a1 + 688) = v96;
                      *v39 = 3;
                    }
                    v97 = (void *)(*(_QWORD *)(a1 + 696) - v92);
                    if ((unint64_t)v97 >= *(_QWORD *)(a1 + 680))
                    {
                      if ((unint64_t)v97 < *(_QWORD *)(a1 + 688))
                        *(_QWORD *)(a1 + 688) = v97;
                      *(_QWORD *)(a1 + 696) = v97;
                    }
                    else
                    {
                      v97 = 0;
                      *v46 = 1;
                    }
                    goto LABEL_167;
                  }
LABEL_154:
                  v91 = 0;
                  goto LABEL_155;
                }
LABEL_144:
                v78 = 0;
                goto LABEL_145;
              }
              *(_QWORD *)(a1 + 672) = v75;
              *(_QWORD *)(a1 + 680) = v75;
              if (v74)
                *(_QWORD *)(a1 + 688) = v75;
              v43 = 2;
              *v39 = 2;
            }
            v76 = (16 * v71 + 63) & 0xFFFFFFFFFFFFFFC0;
            if (v76)
            {
              v76 = *(_QWORD *)(a1 + 696) - v76;
              if (v76 >= *(_QWORD *)(a1 + 680))
              {
                if (v76 < *(_QWORD *)(a1 + 688))
                  *(_QWORD *)(a1 + 688) = v76;
                *(_QWORD *)(a1 + 696) = v76;
              }
              else
              {
                v76 = 0;
                *v46 = 1;
              }
            }
            goto LABEL_115;
          }
          *(_QWORD *)(a1 + 672) = v70;
          *(_QWORD *)(a1 + 680) = v70;
          if (v69)
            *(_QWORD *)(a1 + 688) = v70;
        }
        v43 = 2;
        *v39 = 2;
      }
      v66 = (12 * v65 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v66)
      {
        v66 = *(_QWORD *)(a1 + 696) - v66;
        if (v66 >= *(_QWORD *)(a1 + 680))
        {
          if (v66 < *(_QWORD *)(a1 + 688))
            *(_QWORD *)(a1 + 688) = v66;
          *(_QWORD *)(a1 + 696) = v66;
        }
        else
        {
          v66 = 0;
          *v46 = 1;
        }
      }
      goto LABEL_101;
    }
LABEL_72:
    v61 = 0;
    goto LABEL_85;
  }
  return v32;
}

uint64_t sub_1D4B5475C(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, int a5, int a6, int a7)
{
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  const char *v16;
  const char *v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  unint64_t v42;
  size_t v43;
  size_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;

  v12 = a3[6];
  if ((a7 || !*(_DWORD *)(a1 + 140)) && (v12 == 1 || a4 == 1 && (v12 - 3) < 3))
    v13 = 0;
  else
    v13 = 4 << a3[1];
  if (a7 == 1 && a3[4] == 3)
  {
    if (*a3 >= 0x11u)
      v14 = 17;
    else
      v14 = *a3;
  }
  else
  {
    v14 = 0;
  }
  v15 = a3[2];
  if (a6 == 1)
  {
    *(_QWORD *)(a1 + 32) = 0;
    v16 = " ";
    *(_QWORD *)(a1 + 8) = " ";
    *(_QWORD *)(a1 + 16) = " ";
    v17 = "\n";
    *(_QWORD *)a1 = "\n";
    v18 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 32) = v18;
  }
  else
  {
    v17 = *(const char **)a1;
    v16 = *(const char **)(a1 + 8);
    v18 = *(_QWORD *)(a2 + 16);
  }
  *(_DWORD *)(a1 + 300) = 0;
  v19 = (_DWORD)v17 - (_DWORD)v16;
  *(_DWORD *)(a1 + 24) = v19;
  *(_DWORD *)(a1 + 28) = v19;
  *(_DWORD *)(a1 + 44) = v19;
  *(_DWORD *)(a1 + 48) = v14;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a2 + 24) = v18;
  if (*(_DWORD *)(a2 + 64))
  {
    v20 = v18;
LABEL_31:
    v26 = v20 + (4 << v15);
    if (v26 <= *(_QWORD *)(a2 + 40))
    {
      *(_QWORD *)(a2 + 24) = v26;
    }
    else
    {
      *(_BYTE *)(a2 + 56) = 1;
      v26 = v20;
      v20 = 0;
    }
    *(_QWORD *)(a1 + 112) = v20;
LABEL_35:
    v32 = v26 + v13;
    if (v32 <= *(_QWORD *)(a2 + 40))
    {
      *(_QWORD *)(a2 + 24) = v32;
    }
    else
    {
      *(_BYTE *)(a2 + 56) = 1;
      v32 = v26;
      v26 = 0;
    }
    *(_QWORD *)(a1 + 128) = v26;
    if (v14)
      v28 = 4 << v14;
    else
      v28 = 0;
LABEL_41:
    v18 = v32 + v28;
    if (v32 + v28 <= *(_QWORD *)(a2 + 40))
    {
      *(_QWORD *)(a2 + 24) = v18;
      v27 = v32;
    }
    else
    {
      v27 = 0;
      *(_BYTE *)(a2 + 56) = 1;
      v18 = v32;
    }
    goto LABEL_44;
  }
  *(_QWORD *)(a2 + 32) = v18;
  v21 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 48) = v21 & 0xFFFFFFFFFFFFFFC0;
  v22 = -(int)v18 & 0x3FLL;
  v20 = v18 + v22;
  if (v18 + v22 <= v21)
  {
    *(_QWORD *)(a2 + 16) = v20;
    *(_QWORD *)(a2 + 24) = v20;
    if (v22)
      *(_QWORD *)(a2 + 32) = v20;
    *(_DWORD *)(a2 + 64) = 1;
    goto LABEL_31;
  }
  *(_QWORD *)(a1 + 112) = 0;
  v24 = *(_QWORD *)(a2 + 8);
  v23 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 32) = v23;
  *(_QWORD *)(a2 + 48) = v24 & 0xFFFFFFFFFFFFFFC0;
  v25 = -(int)v23 & 0x3FLL;
  v26 = v23 + v25;
  if (v26 <= v24)
  {
    *(_QWORD *)(a2 + 16) = v26;
    *(_QWORD *)(a2 + 24) = v26;
    if (v25)
      *(_QWORD *)(a2 + 32) = v26;
    *(_DWORD *)(a2 + 64) = 1;
    goto LABEL_35;
  }
  v27 = 0;
  *(_QWORD *)(a1 + 128) = 0;
  if (v14)
    v28 = 4 << v14;
  else
    v28 = 0;
  v30 = *(_QWORD *)(a2 + 8);
  v29 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 32) = v29;
  *(_QWORD *)(a2 + 48) = v30 & 0xFFFFFFFFFFFFFFC0;
  v31 = -(int)v29 & 0x3FLL;
  v32 = v29 + v31;
  if (v32 <= v30)
  {
    *(_QWORD *)(a2 + 16) = v32;
    *(_QWORD *)(a2 + 24) = v32;
    if (v31)
      *(_QWORD *)(a2 + 32) = v32;
    *(_DWORD *)(a2 + 64) = 1;
    goto LABEL_41;
  }
LABEL_44:
  *(_QWORD *)(a1 + 120) = v27;
  if (*(_BYTE *)(a2 + 56))
    return -64;
  if (a5 != 1)
  {
    v34 = *(void **)(a2 + 32);
    if ((unint64_t)v34 < v18)
    {
      bzero(v34, v18 - (_QWORD)v34);
      v18 = *(_QWORD *)(a2 + 24);
      v34 = *(void **)(a2 + 32);
    }
    if ((unint64_t)v34 < v18)
      *(_QWORD *)(a2 + 32) = v18;
  }
  if (a4 == 1 && (a3[6] - 6) >= 0xFFFFFFFD)
  {
    v35 = ((1 << v15) + 63) & 0xFFFFFFFFFFFFFFC0;
    v36 = *(_DWORD *)(a2 + 64);
    if (a7 == 1)
    {
      if (!v36)
      {
        v38 = *(_QWORD *)(a2 + 8);
        v37 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 32) = v37;
        *(_QWORD *)(a2 + 48) = v38 & 0xFFFFFFFFFFFFFFC0;
        v39 = -(int)v37 & 0x3FLL;
        v18 = v37 + v39;
        if (v18 > v38)
          goto LABEL_71;
        *(_QWORD *)(a2 + 16) = v18;
        *(_QWORD *)(a2 + 24) = v18;
        if (v39)
          *(_QWORD *)(a2 + 32) = v18;
        *(_DWORD *)(a2 + 64) = 1;
      }
      if (v35)
      {
        v40 = (void *)(*(_QWORD *)(a2 + 40) - v35);
        if ((unint64_t)v40 >= v18)
        {
          if ((unint64_t)v40 < *(_QWORD *)(a2 + 32))
            *(_QWORD *)(a2 + 32) = v40;
          *(_QWORD *)(a2 + 40) = v40;
          v42 = *(_QWORD *)(a2 + 48);
          if ((unint64_t)v40 < v42)
          {
            v43 = v42 - (_QWORD)v40;
            if (v43 >= v35)
              v44 = ((1 << v15) + 63) & 0xFFFFFFFFFFFFFFC0;
            else
              v44 = v43;
            bzero(v40, v44);
            *(_QWORD *)(a2 + 48) = v40;
          }
        }
        else
        {
          v40 = 0;
          *(_BYTE *)(a2 + 56) = 1;
        }
        goto LABEL_82;
      }
LABEL_71:
      v40 = 0;
LABEL_82:
      *(_QWORD *)(a1 + 56) = v40;
      v45 = __ROR8__(*(_QWORD *)(a1 + 96), 24) ^ __ROR8__(*(_QWORD *)(a1 + 96), 49) ^ *(_QWORD *)(a1 + 96);
      v46 = 0x9FB21C651E98DF25 * ((((0x9FB21C651E98DF25 * v45) >> 35) + 8) ^ (0x9FB21C651E98DF25 * v45));
      v47 = 0x9FB21C651E98DF25
          * (__ROR8__(*(unsigned int *)(a1 + 104), 24) ^ ((unint64_t)*(unsigned int *)(a1 + 104) << 15) ^ *(unsigned int *)(a1 + 104));
      *(_QWORD *)(a1 + 96) = v46 ^ (((0x9FB21C651E98DF25 * (((v47 >> 35) + 4) ^ v47)) ^ v46) >> 28) ^ (0x9FB21C651E98DF25 * (((v47 >> 35) + 4) ^ v47));
LABEL_86:
      v51 = a3[3];
      if (v51 >= 6)
        v51 = 6;
      if (v51 <= 4)
        v51 = 4;
      *(_DWORD *)(a1 + 52) = a3[2] - v51;
      goto LABEL_91;
    }
    if (v36 <= 1)
    {
      if (!v36)
      {
        v49 = *(_QWORD *)(a2 + 8);
        v48 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 32) = v48;
        *(_QWORD *)(a2 + 48) = v49 & 0xFFFFFFFFFFFFFFC0;
        v50 = -(int)v48 & 0x3FLL;
        v18 = v48 + v50;
        if (v18 > v49)
          goto LABEL_84;
        *(_QWORD *)(a2 + 16) = v18;
        *(_QWORD *)(a2 + 24) = v18;
        if (v50)
          *(_QWORD *)(a2 + 32) = v18;
      }
      *(_DWORD *)(a2 + 64) = 2;
    }
    if (v35)
    {
      v41 = (void *)(*(_QWORD *)(a2 + 40) - v35);
      if ((unint64_t)v41 >= v18)
      {
        if ((unint64_t)v41 < *(_QWORD *)(a2 + 32))
          *(_QWORD *)(a2 + 32) = v41;
        *(_QWORD *)(a2 + 40) = v41;
      }
      else
      {
        v41 = 0;
        *(_BYTE *)(a2 + 56) = 1;
      }
      goto LABEL_85;
    }
LABEL_84:
    v41 = 0;
LABEL_85:
    *(_QWORD *)(a1 + 56) = v41;
    bzero(v41, 1 << v15);
    *(_QWORD *)(a1 + 96) = 0;
    goto LABEL_86;
  }
LABEL_91:
  if (a7 != 1 || a3[6] < 7u)
    goto LABEL_132;
  v52 = *(_DWORD *)(a2 + 64);
  if (v52 > 1)
    goto LABEL_96;
  if (v52)
  {
LABEL_95:
    *(_DWORD *)(a2 + 64) = 2;
LABEL_96:
    v53 = *(_QWORD *)(a2 + 40) - 1024;
    if (v53 >= *(_QWORD *)(a2 + 24))
    {
      if (v53 < *(_QWORD *)(a2 + 32))
        *(_QWORD *)(a2 + 32) = v53;
      *(_QWORD *)(a2 + 40) = v53;
    }
    else
    {
      v53 = 0;
      *(_BYTE *)(a2 + 56) = 1;
    }
    *(_QWORD *)(a1 + 144) = v53;
LABEL_102:
    v54 = *(_QWORD *)(a2 + 40) - 192;
    if (v54 >= *(_QWORD *)(a2 + 24))
    {
      if (v54 < *(_QWORD *)(a2 + 32))
        *(_QWORD *)(a2 + 32) = v54;
      *(_QWORD *)(a2 + 40) = v54;
    }
    else
    {
      v54 = 0;
      *(_BYTE *)(a2 + 56) = 1;
    }
    *(_QWORD *)(a1 + 152) = v54;
LABEL_108:
    v55 = *(_QWORD *)(a2 + 40) - 256;
    if (v55 >= *(_QWORD *)(a2 + 24))
    {
      if (v55 < *(_QWORD *)(a2 + 32))
        *(_QWORD *)(a2 + 32) = v55;
      *(_QWORD *)(a2 + 40) = v55;
    }
    else
    {
      v55 = 0;
      *(_BYTE *)(a2 + 56) = 1;
    }
    *(_QWORD *)(a1 + 160) = v55;
LABEL_114:
    v56 = *(_QWORD *)(a2 + 40) - 128;
    if (v56 >= *(_QWORD *)(a2 + 24))
    {
      if (v56 < *(_QWORD *)(a2 + 32))
        *(_QWORD *)(a2 + 32) = v56;
      *(_QWORD *)(a2 + 40) = v56;
    }
    else
    {
      v56 = 0;
      *(_BYTE *)(a2 + 56) = 1;
    }
    *(_QWORD *)(a1 + 168) = v56;
LABEL_120:
    v57 = *(_QWORD *)(a2 + 40) - 32832;
    if (v57 >= *(_QWORD *)(a2 + 24))
    {
      if (v57 < *(_QWORD *)(a2 + 32))
        *(_QWORD *)(a2 + 32) = v57;
      *(_QWORD *)(a2 + 40) = v57;
    }
    else
    {
      v57 = 0;
      *(_BYTE *)(a2 + 56) = 1;
    }
    *(_QWORD *)(a1 + 176) = v57;
LABEL_126:
    v58 = *(_QWORD *)(a2 + 40) - 114752;
    if (v58 >= *(_QWORD *)(a2 + 24))
    {
      if (v58 < *(_QWORD *)(a2 + 32))
        *(_QWORD *)(a2 + 32) = v58;
      *(_QWORD *)(a2 + 40) = v58;
    }
    else
    {
      v58 = 0;
      *(_BYTE *)(a2 + 56) = 1;
    }
    goto LABEL_131;
  }
  v61 = *(_QWORD *)(a2 + 8);
  v60 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 32) = v60;
  *(_QWORD *)(a2 + 48) = v61 & 0xFFFFFFFFFFFFFFC0;
  v62 = -(int)v60 & 0x3FLL;
  v63 = v60 + v62;
  if (v63 <= v61)
  {
    *(_QWORD *)(a2 + 16) = v63;
    *(_QWORD *)(a2 + 24) = v63;
    if (v62)
      *(_QWORD *)(a2 + 32) = v63;
    goto LABEL_95;
  }
  *(_QWORD *)(a1 + 144) = 0;
  v65 = *(_QWORD *)(a2 + 8);
  v64 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 32) = v64;
  *(_QWORD *)(a2 + 48) = v65 & 0xFFFFFFFFFFFFFFC0;
  v66 = -(int)v64 & 0x3FLL;
  v67 = v64 + v66;
  if (v67 <= v65)
  {
    *(_QWORD *)(a2 + 16) = v67;
    *(_QWORD *)(a2 + 24) = v67;
    if (v66)
      *(_QWORD *)(a2 + 32) = v67;
    *(_DWORD *)(a2 + 64) = 2;
    goto LABEL_102;
  }
  *(_QWORD *)(a1 + 152) = 0;
  v69 = *(_QWORD *)(a2 + 8);
  v68 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 32) = v68;
  *(_QWORD *)(a2 + 48) = v69 & 0xFFFFFFFFFFFFFFC0;
  v70 = -(int)v68 & 0x3FLL;
  v71 = v68 + v70;
  if (v71 <= v69)
  {
    *(_QWORD *)(a2 + 16) = v71;
    *(_QWORD *)(a2 + 24) = v71;
    if (v70)
      *(_QWORD *)(a2 + 32) = v71;
    *(_DWORD *)(a2 + 64) = 2;
    goto LABEL_108;
  }
  *(_QWORD *)(a1 + 160) = 0;
  v73 = *(_QWORD *)(a2 + 8);
  v72 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 32) = v72;
  *(_QWORD *)(a2 + 48) = v73 & 0xFFFFFFFFFFFFFFC0;
  v74 = -(int)v72 & 0x3FLL;
  v75 = v72 + v74;
  if (v75 <= v73)
  {
    *(_QWORD *)(a2 + 16) = v75;
    *(_QWORD *)(a2 + 24) = v75;
    if (v74)
      *(_QWORD *)(a2 + 32) = v75;
    *(_DWORD *)(a2 + 64) = 2;
    goto LABEL_114;
  }
  *(_QWORD *)(a1 + 168) = 0;
  v77 = *(_QWORD *)(a2 + 8);
  v76 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 32) = v76;
  *(_QWORD *)(a2 + 48) = v77 & 0xFFFFFFFFFFFFFFC0;
  v78 = -(int)v76 & 0x3FLL;
  v79 = v76 + v78;
  if (v79 <= v77)
  {
    *(_QWORD *)(a2 + 16) = v79;
    *(_QWORD *)(a2 + 24) = v79;
    if (v78)
      *(_QWORD *)(a2 + 32) = v79;
    *(_DWORD *)(a2 + 64) = 2;
    goto LABEL_120;
  }
  v58 = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v81 = *(_QWORD *)(a2 + 8);
  v80 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 32) = v80;
  *(_QWORD *)(a2 + 48) = v81 & 0xFFFFFFFFFFFFFFC0;
  v82 = -(int)v80 & 0x3FLL;
  v83 = v80 + v82;
  if (v83 <= v81)
  {
    *(_QWORD *)(a2 + 16) = v83;
    *(_QWORD *)(a2 + 24) = v83;
    if (v82)
      *(_QWORD *)(a2 + 32) = v83;
    *(_DWORD *)(a2 + 64) = 2;
    goto LABEL_126;
  }
LABEL_131:
  *(_QWORD *)(a1 + 184) = v58;
LABEL_132:
  v59 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 268) = *(_OWORD *)(a3 + 3);
  *(_OWORD *)(a1 + 256) = v59;
  if (*(_BYTE *)(a2 + 56))
    return -64;
  else
    return 0;
}

unint64_t sub_1D4B54F40@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, unsigned int a7@<W6>, void *a8@<X7>, uint64_t a9@<X8>, char *a10, unint64_t a11)
{
  unsigned __int8 *v18;
  unint64_t v19;
  int v20;
  unint64_t result;
  char *v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  _WORD *v33;
  uint64_t v34;
  unsigned int v35;
  _WORD *__dst;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;

  __dst = (_WORD *)(a4 + 2224);
  v18 = (unsigned __int8 *)a1[4];
  v31 = (unsigned __int8 *)a1[5];
  v32 = (unsigned __int8 *)a1[6];
  *(_OWORD *)a9 = 0u;
  *(_OWORD *)(a9 + 16) = 0u;
  *(_QWORD *)(a9 + 32) = 0;
  sub_1D4B51BD4((uint64_t)a1);
  *(_DWORD *)(a9 + 32) = 0;
  v40 = 35;
  v19 = sub_1D4B4EE1C(a8, &v40, v18, a2, a10, a11);
  *(_DWORD *)(a4 + 3548) = *(_DWORD *)(a3 + 3548);
  v34 = a3;
  a3 += 2224;
  v35 = a7;
  v20 = sub_1D4B57384((_DWORD *)(a4 + 3548), (unsigned int *)a8, v40, v19, a2, 9u, (unsigned __int16 *)a3, word_1D4BD6190, 6, 1, a7);
  *(_DWORD *)a9 = v20;
  result = sub_1D4B575D0(a5, a6 - (_QWORD)a5, __dst, 9u, v20, (unsigned int *)a8, v40, v18, a2, (__int16 *)word_1D4BD6190, 6, 35, (const void *)a3, 0x524uLL, (__int16 *)a10, a11);
  if (result > 0xFFFFFFFFFFFFFF88)
    goto LABEL_11;
  v30 = a2;
  if (v20 == 2)
    *(_QWORD *)(a9 + 24) = result;
  v22 = &a5[result];
  v39 = 31;
  v23 = sub_1D4B4EE1C(a8, &v39, v32, a2, a10, a11);
  v24 = v39;
  *(_DWORD *)(a4 + 3540) = *(_DWORD *)(v34 + 3540);
  v25 = sub_1D4B57384((_DWORD *)(a4 + 3540), (unsigned int *)a8, v24, v23, a2, 8u, (unsigned __int16 *)v34, word_1D4BD61D8, 5, v24 < 0x1D, v35);
  *(_DWORD *)(a9 + 4) = v25;
  v26 = a4;
  result = sub_1D4B575D0(v22, a6 - (_QWORD)v22, (_WORD *)a4, 8u, v25, (unsigned int *)a8, v39, v32, v30, (__int16 *)word_1D4BD61D8, 5, 28, (const void *)v34, 0x304uLL, (__int16 *)a10, a11);
  if (result > 0xFFFFFFFFFFFFFF88)
  {
LABEL_11:
    *(_QWORD *)(a9 + 16) = result;
  }
  else
  {
    v33 = (_WORD *)(a4 + 772);
    if (v25 == 2)
      *(_QWORD *)(a9 + 24) = result;
    v27 = &v22[result];
    v38 = 52;
    v28 = sub_1D4B4EE1C(a8, &v38, v31, v30, a10, a11);
    *(_DWORD *)(v26 + 3544) = *(_DWORD *)(v34 + 3544);
    v29 = sub_1D4B57384((_DWORD *)(v26 + 3544), (unsigned int *)a8, v38, v28, v30, 9u, (unsigned __int16 *)(v34 + 772), word_1D4BD6212, 6, 1, v35);
    *(_DWORD *)(a9 + 8) = v29;
    result = sub_1D4B575D0(v27, a6 - (_QWORD)v27, v33, 9u, v29, (unsigned int *)a8, v38, v31, v30, (__int16 *)word_1D4BD6212, 6, 52, (const void *)(v34 + 772), 0x5ACuLL, (__int16 *)a10, a11);
    if (result > 0xFFFFFFFFFFFFFF88)
    {
      *(_QWORD *)(a9 + 16) = result;
    }
    else
    {
      if (v29 == 2)
        *(_QWORD *)(a9 + 24) = result;
      *(_QWORD *)(a9 + 16) = &v27[result] - a5;
    }
  }
  return result;
}

uint32x2_t *sub_1D4B552AC(uint32x2_t *result, _QWORD *a2, _DWORD *a3, int a4, int a5)
{
  uint32x2_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint32x2_t v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint32x2_t v19;
  int v20;
  uint32x4_t v21;
  int32x4_t v22;
  uint64_t i;
  int v24;
  uint32x2_t v25;
  int v26;
  int v27;
  int v28;
  uint32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int v36;
  int v37;
  uint32x4_t v38;
  int32x4_t v39;
  uint64_t j;
  __int32 v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint32x2_t v46;
  int v47;
  uint32x4_t v48;
  int32x4_t v49;
  uint64_t k;
  unint64_t v51;
  unsigned int v52;
  BOOL v53;
  __int32 v54;

  v5 = result[1];
  if ((a5 - v5.i32[0]) >= 0xE0000001)
  {
    v6 = a3[7];
    v7 = 1 << a3[1];
    v8 = 1 << (a3[2] - (v6 > 5));
    v9 = (v8 - 1) & (a4 - v5.i32[0]);
    if (v8 <= 2)
      v10 = 2;
    else
      v10 = 1 << (a3[2] - (v6 > 5));
    if (v9 >= 2)
      v10 = 0;
    if (v8 > v7)
      v7 = 1 << (a3[2] - (v6 > 5));
    v11 = a4 - v5.i32[0] - (v7 + v9) - v10;
    v12 = (uint32x2_t)(*(_QWORD *)&result[2] + v11);
    result[1] = (uint32x2_t)(*(_QWORD *)&v5 + v11);
    result[2] = v12;
    v13 = v11 + 2;
    result[3] = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)vdup_n_s32((int)v11 + 2), result[3]), (int8x8_t)0x200000002, (int8x8_t)vsub_s32((int32x2_t)result[3], vdup_n_s32(v11)));
    ++result[4].i32[0];
    v14 = a2[2];
    a2[4] = v14;
    v15 = 1 << a3[3];
    if (v15 >= 0)
      v16 = 1 << a3[3];
    else
      v16 = v15 + 15;
    if (v15 >= 16)
    {
      v17 = 0;
      v18 = 0;
      v19 = result[14];
      v20 = v16 >> 4;
      v21 = (uint32x4_t)vdupq_n_s32(v13);
      v22 = vdupq_n_s32(v11);
      do
      {
        for (i = 0; i != 64; i += 16)
          *(int8x16_t *)(*(_QWORD *)&v19 + 4 * v18 + i) = vbicq_s8((int8x16_t)vsubq_s32(*(int32x4_t *)(*(_QWORD *)&v19 + 4 * v18 + i), v22), (int8x16_t)vcgtq_u32(v21, *(uint32x4_t *)(*(_QWORD *)&v19+ 4 * v18+ i)));
        v18 += 16;
        ++v17;
      }
      while (v17 != v20);
    }
    if (result[17].i32[1] || v6 != 1 && (v6 - 3 > 2 || a3[36] != 1))
    {
      v24 = 1 << a3[2];
      v25 = result[16];
      v26 = v24 / 16;
      if (v6 == 6)
      {
        if (v24 >= 16)
        {
          v27 = 0;
          v28 = 0;
          v29 = (uint32x4_t)vdupq_n_s32(v13);
          v30 = vdupq_n_s32(v11);
          v31.i64[0] = 0x100000001;
          v31.i64[1] = 0x100000001;
          do
          {
            v32 = 0;
            v33 = *(_QWORD *)&v25 + 4 * v28;
            do
            {
              v34 = *(int32x4_t *)(v33 + v32);
              v35 = vceqq_s32(v34, v31);
              *(int32x4_t *)(v33 + v32) = vsubq_s32((int32x4_t)vbicq_s8(vbicq_s8((int8x16_t)vsubq_s32(v34, v30), (int8x16_t)vcgtq_u32(v29, (uint32x4_t)v34)), (int8x16_t)v35), v35);
              v32 += 16;
            }
            while (v32 != 64);
            v28 += 16;
            ++v27;
          }
          while (v27 != v26);
        }
      }
      else if (v24 >= 16)
      {
        v36 = 0;
        v37 = 0;
        v38 = (uint32x4_t)vdupq_n_s32(v13);
        v39 = vdupq_n_s32(v11);
        do
        {
          for (j = 0; j != 64; j += 16)
            *(int8x16_t *)(*(_QWORD *)&v25 + 4 * v37 + j) = vbicq_s8((int8x16_t)vsubq_s32(*(int32x4_t *)(*(_QWORD *)&v25+ 4 * v37+ j), v39), (int8x16_t)vcgtq_u32(v38, *(uint32x4_t *)(*(_QWORD *)&v25+ 4 * v37+ j)));
          v37 += 16;
          ++v36;
        }
        while (v36 != v26);
      }
    }
    v41 = result[6].i32[0];
    if (v41)
    {
      v42 = 1 << v41;
      v43 = v42 >= 0 ? v42 : v42 + 15;
      if (v42 >= 16)
      {
        v44 = 0;
        v45 = 0;
        v46 = result[15];
        v47 = v43 >> 4;
        v48 = (uint32x4_t)vdupq_n_s32(v13);
        v49 = vdupq_n_s32(v11);
        do
        {
          for (k = 0; k != 64; k += 16)
            *(int8x16_t *)(*(_QWORD *)&v46 + 4 * v45 + k) = vbicq_s8((int8x16_t)vsubq_s32(*(int32x4_t *)(*(_QWORD *)&v46+ 4 * v45+ k), v49), (int8x16_t)vcgtq_u32(v48, *(uint32x4_t *)(*(_QWORD *)&v46+ 4 * v45+ k)));
          v45 += 16;
          ++v44;
        }
        while (v44 != v47);
      }
    }
    v51 = a2[3];
    if (v14 < v51)
      a2[4] = v51;
    v52 = result[5].u32[1];
    v53 = v52 >= v11;
    v54 = v52 - v11;
    if (!v53)
      v54 = 0;
    result[5].i32[0] = 0;
    result[5].i32[1] = v54;
    result[31] = 0;
  }
  return result;
}

uint64_t sub_1D4B5556C(uint64_t a1, char *a2, size_t a3, char *a4, unint64_t a5, int a6)
{
  unint64_t v12;
  int v13;
  uint64_t v14;
  int8x16_t *v15;
  uint64_t v16;
  unint64_t v18;

  v12 = sub_1D4B556B4(a1, a4, a5);
  v13 = 4 * (v12 == 1);
  if (v12 >= 0xFFFFFFFFFFFFFF89)
    v13 = 1;
  if (v13 == 4)
  {
    v14 = 0;
  }
  else
  {
    v14 = v12;
    if (v13)
      return v14;
    v15 = (int8x16_t *)(a1 + 3176);
    if (*(_DWORD *)(a1 + 888))
    {
      sub_1D4B56830(a1);
      v14 = 0;
      *v15 = vextq_s8(*v15, *v15, 8uLL);
      return v14;
    }
    v18 = sub_1D4B56510((uint64_t *)(a1 + 928), *(char **)(a1 + 3176), *(char **)(a1 + 3184), (_DWORD *)(a1 + 224), (uint64_t)a2, a3, a5, *(char **)(a1 + 3496), *(_DWORD *)(a1 + 8));
    v14 = v18;
    if (a6 && !*(_DWORD *)(a1 + 920) && v18 <= 0x18 && sub_1D4B55AA4(a4, a5))
    {
      *a2 = *a4;
      v14 = 1;
    }
    else if ((unint64_t)(v14 - 2) <= 0xFFFFFFFFFFFFFF86)
    {
      *v15 = vextq_s8(*v15, *v15, 8uLL);
    }
  }
  v16 = *(_QWORD *)(a1 + 3176);
  if (*(_DWORD *)(v16 + 5604) == 2)
    *(_DWORD *)(v16 + 5604) = 1;
  return v14;
}

uint64_t sub_1D4B556B4(uint64_t a1, char *a2, unint64_t a3)
{
  unsigned int v5;
  uint64_t *v6;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  int v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t (**v29)();
  uint64_t (*v30)();
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  uint64_t (**v41)();
  uint64_t (*v42)();
  size_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (a3 <= 6)
  {
    v5 = *(_DWORD *)(a1 + 252);
    v6 = (uint64_t *)(a1 + 3136);
    if (v5 < 7)
      sub_1D4B88A2C(v6, a3, *(_DWORD *)(a1 + 244));
    else
      sub_1D4B88AD0((uint64_t)v6, a3);
    return 1;
  }
  *(_QWORD *)(a1 + 952) = *(_QWORD *)(a1 + 944);
  *(_QWORD *)(a1 + 936) = *(_QWORD *)(a1 + 928);
  *(_DWORD *)(a1 + 1000) = 0;
  v8 = *(_QWORD *)(a1 + 3176);
  *(_QWORD *)(a1 + 3424) = v8;
  *(_DWORD *)(a1 + 3432) = *(_DWORD *)(a1 + 296);
  v9 = (_DWORD)a2 - *(_DWORD *)(a1 + 3200);
  v10 = *(_DWORD *)(a1 + 3236);
  if (v10 + 384 < v9)
  {
    v11 = v9 - v10 - 384;
    if (v11 >= 0xC0)
      v11 = 192;
    *(_DWORD *)(a1 + 3236) = v9 - v11;
  }
  if (*(_DWORD *)(a1 + 3220) >= *(_DWORD *)(a1 + 3216))
  {
    v14 = *(_QWORD *)(a1 + 3440);
    if (v14)
    {
      if (*(_DWORD *)(v14 + 140))
        v12 = 3;
      else
        v12 = 2;
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 1;
  }
  v15 = 0;
  v16 = *(_QWORD *)(a1 + 3184);
  v17 = v8 + 5616;
  do
  {
    *(_DWORD *)(v16 + 5616 + v15) = *(_DWORD *)(v17 + v15);
    v15 += 4;
  }
  while (v15 != 12);
  if (*(_QWORD *)(a1 + 3144) < *(_QWORD *)(a1 + 3160))
  {
    if (!*(_DWORD *)(a1 + 408))
    {
      v18 = (uint64_t *)(a1 + 3136);
      v19 = (_QWORD *)(v16 + 5616);
      v20 = *(_DWORD *)(a1 + 368);
LABEL_22:
      v21 = sub_1D4B88B44(v18, a1 + 3192, a1 + 928, v19, v20, (unint64_t)a2, a3);
      goto LABEL_53;
    }
    return -41;
  }
  if (*(_DWORD *)(a1 + 320) == 1)
  {
    v46 = 0;
    v47 = 0;
    v48 = 0;
    if (!*(_DWORD *)(a1 + 408))
    {
      v25 = *(_QWORD *)(a1 + 3128);
      v45 = *(_QWORD *)(a1 + 3120);
      v49 = v25;
      v13 = sub_1D4B87FC0((uint32x2_t *)(a1 + 1008), &v45, (_DWORD *)(a1 + 320), (uint64_t)a2, a3);
      if (v13 >= 0xFFFFFFFFFFFFFF89)
        return v13;
      v19 = (_QWORD *)(*(_QWORD *)(a1 + 3184) + 5616);
      v20 = *(_DWORD *)(a1 + 368);
      v18 = &v45;
      goto LABEL_22;
    }
    return -41;
  }
  if (!*(_DWORD *)(a1 + 408))
  {
    v26 = *(int *)(a1 + 252);
    v27 = v26 - 3;
    v28 = *(_DWORD *)(a1 + 368) != 1 || v27 > 2;
    v29 = &off_1E9845D48[10 * v12] + v26;
    if (!v28)
      v29 = &off_1E9845E88[3 * v12] + v27;
    v30 = *v29;
    *(_QWORD *)(a1 + 3480) = 0;
    v21 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, char *, unint64_t))v30)(a1 + 3192, a1 + 928, v16 + 5616, a2, a3);
    goto LABEL_53;
  }
  v22 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, char *, unint64_t, _QWORD, _QWORD, _QWORD, uint64_t))(a1 + 5216))(*(_QWORD *)(a1 + 5208), *(_QWORD *)(a1 + 5224), *(_QWORD *)(a1 + 5232), a2, a3, 0, 0, *(unsigned int *)(a1 + 268), 1 << *(_DWORD *)(a1 + 228));
  v23 = *(_QWORD *)(a1 + 5232);
  if (v22 - 1 >= v23)
    goto LABEL_30;
  v13 = v22;
  v24 = *(_QWORD *)(a1 + 5224);
  if (*(_DWORD *)(v24 + 16 * (v22 - 1)) | *(_DWORD *)(v24 + 16 * (v22 - 1) + 8))
  {
    if (v22 == v23)
    {
LABEL_30:
      v13 = -106;
LABEL_46:
      if (!*(_DWORD *)(a1 + 404))
        return v13;
      v38 = *(int *)(a1 + 252);
      v39 = v38 - 3;
      v40 = *(_DWORD *)(a1 + 368) != 1 || v39 > 2;
      v41 = &off_1E9845D48[10 * v12] + v38;
      if (!v40)
        v41 = &off_1E9845E88[3 * v12] + v39;
      v42 = *v41;
      *(_QWORD *)(a1 + 3480) = 0;
      v21 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, char *, unint64_t))v42)(a1 + 3192, a1 + 928, *(_QWORD *)(a1 + 3184) + 5616, a2, a3);
LABEL_53:
      v43 = v21;
      memcpy(*(void **)(a1 + 952), &a2[a3 - v21], v21);
      v13 = 0;
      *(_QWORD *)(a1 + 952) += v43;
      return v13;
    }
    v31 = (_QWORD *)(v24 + 16 * v22);
    *v31 = 0;
    v31[1] = 0;
    v13 = v22 + 1;
  }
  if (v13 > 0xFFFFFFFFFFFFFF88)
    goto LABEL_46;
  v45 = 0;
  v46 = 0;
  v32 = *(_QWORD *)(a1 + 5224);
  if (!v13)
    goto LABEL_55;
  v33 = 0;
  v34 = 0;
  v35 = (unsigned int *)(v32 + 8);
  v36 = v13;
  do
  {
    v33 += *(v35 - 1);
    v37 = *v35;
    v35 += 4;
    v34 += v37;
    --v36;
  }
  while (v36);
  if (v34 + v33 > a3)
    return -107;
LABEL_55:
  v13 = sub_1D4B53550(a1, (unsigned int *)&v45, v32, v13, a2, a3, *(_DWORD *)(a1 + 424));
  if (v13 <= 0xFFFFFFFFFFFFFF88)
  {
    v13 = 0;
    *(_QWORD *)(a1 + 3480) = 0;
  }
  return v13;
}

uint64_t sub_1D4B55AA4(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  char *v3;
  char *v4;
  _DWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  BOOL v15;

  if (a2 == 1)
    return 1;
  v2 = a2 & 0x1F;
  if ((a2 & 0x1F) != 0)
  {
    v3 = (char *)a1 + v2;
    v4 = (char *)a1 + 1;
    v5 = a1;
    if (v2 >= 9)
    {
      v6 = *(_QWORD *)((char *)a1 + 1) ^ *a1;
      if (v6)
      {
        v7 = __clz(__rbit64(v6)) >> 3;
        goto LABEL_21;
      }
      v8 = 0;
      while (1)
      {
        v9 = &a1[v8];
        v4 = (char *)&a1[v8 + 1] + 1;
        if (v4 >= v3 - 7)
          break;
        ++v8;
        v10 = *(_QWORD *)v4 ^ v9[1];
        if (v10)
        {
          v7 = v8 * 8 + (__clz(__rbit64(v10)) >> 3);
          goto LABEL_21;
        }
      }
      v5 = v9 + 1;
    }
    if (v4 < v3 - 3 && *v5 == *(_DWORD *)v4)
    {
      v4 += 4;
      ++v5;
    }
    if (v4 < v3 - 1 && *(unsigned __int16 *)v5 == *(unsigned __int16 *)v4)
    {
      v4 += 2;
      v5 = (_DWORD *)((char *)v5 + 2);
    }
    if (v4 < v3 && *(unsigned __int8 *)v5 == *v4)
      ++v4;
    v7 = v4 - ((char *)a1 + 1);
LABEL_21:
    if (v7 != v2 - 1)
      return 0;
  }
  if (a2 < 0x20)
    return 1;
  v12 = 0x101010101010101 * *(unsigned __int8 *)a1;
  v13 = (char *)a1 + v2;
  result = 1;
LABEL_25:
  v14 = 0;
  while (*(_QWORD *)&v13[v14] == v12)
  {
    v15 = v14 > 0x17;
    v14 += 8;
    if (v15)
    {
      v2 += 32;
      v13 += 32;
      if (v2 != a2)
        goto LABEL_25;
      return result;
    }
  }
  return 0;
}

uint64_t sub_1D4B55C08(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4, uint64_t a5, unint64_t a6, _QWORD *a7, size_t a8, int a9, int a10)
{
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  _BOOL4 v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  _DWORD *v33;
  int v34;
  unsigned int v35;
  int v36;
  int *v37;
  size_t v38;
  unint64_t v39;
  unint64_t v40;
  int8x16_t *v41;
  int v43;
  char v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;

  v47 = *a3;
  v48 = *((_DWORD *)a3 + 2);
  if (a10)
  {
    v16 = *(_QWORD *)a2;
    v17 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    v18 = v17 >> 3;
    if (*(_DWORD *)(a2 + 72) == 1)
      LODWORD(v18) = *(_DWORD *)(a2 + 76);
    if ((v17 >> 3))
    {
      v19 = (_DWORD *)a3 + 1;
      v20 = a3 + 1;
      v21 = (v17 >> 3);
      v18 = v18;
      do
      {
        v23 = v18-- != 0 && *(_WORD *)(v16 + 4) == 0;
        v24 = *(_DWORD *)v16;
        v25 = *(_DWORD *)v16 - 1;
        if (v25 > 2)
        {
          v29 = *(_DWORD *)v16;
        }
        else
        {
          v26 = v25 + v23;
          if (v25 + v23 == 3)
          {
            v27 = *(_DWORD *)a3 - 1;
            v28 = *a4 - 1;
          }
          else
          {
            v27 = *((_DWORD *)a3 + v26);
            v28 = a4[v26];
          }
          v29 = *(_DWORD *)v16;
          if (v27 == v28)
            goto LABEL_18;
          v29 = v28 + 3;
          *(_DWORD *)v16 = v28 + 3;
        }
        if (v29 >= 4)
        {
          *(uint64_t *)((char *)a3 + 4) = *a3;
          v30 = v29 - 3;
          goto LABEL_26;
        }
LABEL_18:
        v31 = v29 - !v23;
        if (!v31)
          goto LABEL_27;
        if (v31 == 3)
        {
          v32 = *(_DWORD *)a3;
          v30 = *(_DWORD *)a3 - 1;
        }
        else
        {
          v30 = *((_DWORD *)a3 + v31);
          v32 = *(_DWORD *)a3;
        }
        if (v31 <= 1)
          v33 = a3 + 1;
        else
          v33 = (_DWORD *)a3 + 1;
        *v20 = *v33;
        *v19 = v32;
LABEL_26:
        *(_DWORD *)a3 = v30;
LABEL_27:
        if (v24 >= 4)
        {
          *(_QWORD *)(a4 + 1) = *(_QWORD *)a4;
          v34 = v24 - 3;
LABEL_37:
          *a4 = v34;
          goto LABEL_38;
        }
        v35 = v25 + v23;
        if (v25 + v23)
        {
          if (v35 == 3)
          {
            v36 = *a4;
            v34 = *a4 - 1;
          }
          else
          {
            v34 = a4[v35];
            v36 = *a4;
          }
          if (v35 <= 1)
            v37 = a4 + 2;
          else
            v37 = a4 + 1;
          a4[2] = *v37;
          a4[1] = v36;
          goto LABEL_37;
        }
LABEL_38:
        v16 += 8;
        --v21;
      }
      while (v21);
    }
  }
  v38 = a6 - 3;
  if (a6 < 3)
    return -70;
  v40 = sub_1D4B56510((uint64_t *)a2, *(char **)(a1 + 3176), *(char **)(a1 + 3184), (_DWORD *)(a1 + 224), a5 + 3, v38, a8, *(char **)(a1 + 3496), *(_DWORD *)(a1 + 8));
  v39 = v40;
  if (v40 > 0xFFFFFFFFFFFFFF88)
    return v39;
  if (v40 <= 0x18 && !*(_DWORD *)(a1 + 920) && sub_1D4B55AA4(a7, a8))
    v39 = 1;
  v41 = (int8x16_t *)(a1 + 3176);
  if (*(_DWORD *)(a1 + 888))
  {
    sub_1D4B56830(a1);
    v39 = 0;
    *v41 = vextq_s8(*v41, *v41, 8uLL);
    return v39;
  }
  if (v39 == 1)
  {
    if (a6 < 4)
      return -70;
    v44 = *(_BYTE *)a7;
    v45 = a9 + 8 * a8 + 2;
    *(_WORD *)a5 = v45;
    *(_BYTE *)(a5 + 2) = BYTE2(v45);
    *(_BYTE *)(a5 + 3) = v44;
    *a3 = v47;
    *((_DWORD *)a3 + 2) = v48;
    v39 = 4;
  }
  else
  {
    if (!v39)
    {
      v39 = a8 + 3;
      if (a8 + 3 <= a6)
      {
        v43 = a9 + 8 * a8;
        *(_WORD *)a5 = v43;
        *(_BYTE *)(a5 + 2) = BYTE2(v43);
        memcpy((void *)(a5 + 3), a7, a8);
        if (v39 > 0xFFFFFFFFFFFFFF88)
          return v39;
        *a3 = v47;
        *((_DWORD *)a3 + 2) = v48;
        goto LABEL_57;
      }
      return -70;
    }
    *v41 = vextq_s8(*v41, *v41, 8uLL);
    v46 = a9 + 8 * v39 + 4;
    *(_WORD *)a5 = v46;
    *(_BYTE *)(a5 + 2) = BYTE2(v46);
    v39 += 3;
  }
LABEL_57:
  if (*(_DWORD *)(v41->i64[0] + 5604) == 2)
    *(_DWORD *)(v41->i64[0] + 5604) = 1;
  return v39;
}

uint64_t sub_1D4B55F6C(uint64_t result, uint64_t *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v7 = result;
  *(_OWORD *)result = *(_OWORD *)a2;
  v8 = *((_OWORD *)a2 + 1);
  v9 = *((_OWORD *)a2 + 2);
  v10 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(result + 48) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(result + 64) = v10;
  *(_OWORD *)(result + 16) = v8;
  *(_OWORD *)(result + 32) = v9;
  if (a3)
  {
    *(_QWORD *)(result + 8) = *a2 + 8 * a3;
    result = sub_1D4B56060(result);
    *(_QWORD *)(v7 + 16) += result;
  }
  if (*((_DWORD *)a2 + 18))
  {
    v11 = *((unsigned int *)a2 + 19);
    if (v11 < a3 || v11 > a4)
      *(_DWORD *)(v7 + 72) = 0;
    else
      *(_DWORD *)(v7 + 76) -= a3;
  }
  *(_QWORD *)v7 = *a2 + 8 * a3;
  v12 = *a2;
  *(_QWORD *)(v7 + 8) = *a2 + 8 * a4;
  if (a4 != (a2[1] - v12) >> 3)
  {
    result = sub_1D4B56060(v7);
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(v7 + 16) + result;
  }
  v13 = *(_QWORD *)(v7 + 40) + a3;
  *(_QWORD *)(v7 + 32) += a3;
  *(_QWORD *)(v7 + 40) = v13;
  *(_QWORD *)(v7 + 48) += a3;
  return result;
}

uint64_t sub_1D4B56060(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned int v7;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = v1 - *(_QWORD *)a1;
  if (v1 == *(_QWORD *)a1)
    return 0;
  v3 = 0;
  v4 = v2 >> 3;
  v5 = *(unsigned int *)(a1 + 76);
  if (v4 <= 1)
    v4 = 1;
  v6 = (unsigned __int16 *)(*(_QWORD *)a1 + 4);
  do
  {
    v7 = *v6;
    v6 += 4;
    v3 += v7;
    if (!v5 && *(_DWORD *)(a1 + 72) == 1)
      v3 += 0x10000;
    --v5;
    --v4;
  }
  while (v4);
  return v3;
}

unint64_t sub_1D4B560BC(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  if (a3 - a2 >= 0x12C)
  {
    v8 = a2;
    v9 = (_QWORD *)result;
    v17 = (_QWORD *)(a4 + 3712);
    v10 = (_QWORD *)(a4 + 3792);
    v11 = (_QWORD *)(a4 + 3872);
    v12 = *(_QWORD *)(result + 8);
    do
    {
      if (v12 > 0xC3)
        break;
      v13 = (v8 + a3) >> 1;
      sub_1D4B55F6C((uint64_t)v17, a5, v8, a3);
      sub_1D4B55F6C((uint64_t)v10, a5, v8, v13);
      sub_1D4B55F6C((uint64_t)v11, a5, v13, a3);
      v14 = sub_1D4B56208(v17, a4);
      v15 = sub_1D4B56208(v10, a4);
      result = sub_1D4B56208(v11, a4);
      if (v14 > 0xFFFFFFFFFFFFFF88)
        break;
      if (v15 > 0xFFFFFFFFFFFFFF88)
        break;
      if (result > 0xFFFFFFFFFFFFFF88)
        break;
      if (result + v15 >= v14)
        break;
      result = sub_1D4B560BC(v9, v8, (v8 + a3) >> 1, a4, a5);
      v16 = v9[1];
      *(_DWORD *)(*v9 + 4 * v16) = v13;
      v12 = v16 + 1;
      v9[1] = v16 + 1;
      v8 = (v8 + a3) >> 1;
    }
    while (a3 - v13 > 0x12B);
  }
  return result;
}

unint64_t sub_1D4B56208(_QWORD *a1, uint64_t a2)
{
  unint64_t result;
  unsigned int *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;

  result = sub_1D4B51D0C(a1, *(char **)(a2 + 3176), *(void **)(a2 + 3184), (_DWORD *)(a2 + 224), a2 + 4896, *(void **)(a2 + 3496), 0x22D8uLL);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    v5 = (unsigned int *)a1[2];
    v6 = a1[3] - (_QWORD)v5;
    v7 = (unsigned __int8 *)a1[5];
    v8 = (unsigned __int8 *)a1[6];
    v9 = (unsigned __int8 *)a1[4];
    v10 = a1[1] - *a1;
    v11 = *(unsigned __int16 **)(a2 + 3184);
    v12 = *(unsigned int **)(a2 + 3496);
    v13 = *(_DWORD *)(a2 + 4896);
    v24 = 255;
    v14 = 3;
    if (v6 > 0x3FF)
      v14 = 4;
    if ((v6 & 0xFFFFFFFFFFFFC000) != 0)
      v15 = v14 + 1;
    else
      v15 = v14;
    v23 = v7;
    if ((v13 - 2) < 2)
    {
      if ((unint64_t)sub_1D4B4F0F0(v12, (unsigned int *)&v24, v5, v6, (char *)v12, 0x22D8uLL) <= 0xFFFFFFFFFFFFFF88)
      {
        v16 = sub_1D4B4FCA8((uint64_t)v11, v12, v24);
        if (v13 == 2)
          v16 += *(_QWORD *)(a2 + 5032);
        v17 = v16 + 6;
        if (v6 < 0x100)
          v17 = v16;
        v6 = v15 + v17;
      }
    }
    else if (v13)
    {
      v6 = v13 == 1;
    }
    v18 = sub_1D4B5640C(*(_DWORD *)(a2 + 5044), v8, v10 >> 3, 0x1Fu, v11 + 1032, 0, word_1D4BD61D8, 5, v12);
    v19 = sub_1D4B5640C(*(_DWORD *)(a2 + 5040), v9, v10 >> 3, 0x23u, v11 + 2144, (uint64_t)&unk_1D4BD627C, word_1D4BD6190, 6, v12);
    v20 = sub_1D4B5640C(*(_DWORD *)(a2 + 5048), v23, v10 >> 3, 0x34u, v11 + 1418, (uint64_t)&unk_1D4BD62A0, word_1D4BD6212, 6, v12);
    v21 = 2;
    if ((unint64_t)v10 > 0x3F8)
      v21 = 3;
    v22 = 3;
    if ((unint64_t)v10 > 0x3F7F8)
      v22 = 4;
    return v22 + v21 + v6 + v18 + v19 + v20 + *(_QWORD *)(a2 + 5192);
  }
  return result;
}

unint64_t sub_1D4B5640C(int a1, unsigned __int8 *a2, int64_t a3, unsigned int a4, unsigned __int16 *a5, uint64_t a6, unsigned __int16 *a7, char a8, void *a9)
{
  unsigned __int8 *v14;
  unint64_t v16;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned int v20;

  v14 = a2;
  v20 = a4;
  sub_1D4B4EE1C(a9, &v20, a2, a3, (char *)a9, 0x22D8uLL);
  if (a1 == 1)
    goto LABEL_8;
  if (!a1)
  {
    v16 = sub_1D4B57328(a7, a8, (int *)a9, v20);
    goto LABEL_6;
  }
  if ((a1 & 0xFFFFFFFE) != 2)
  {
LABEL_8:
    v16 = 0;
    goto LABEL_9;
  }
  v16 = sub_1D4B57294(a5, (unsigned int *)a9, v20);
LABEL_6:
  if (v16 > 0xFFFFFFFFFFFFFF88)
    return 10 * a3;
LABEL_9:
  if (a3 >= 1)
  {
    v18 = &v14[a3];
    do
    {
      v19 = v14;
      if (a6)
        v19 = (unsigned __int8 *)(a6 + *v14);
      v16 += *v19;
      ++v14;
    }
    while (v14 < v18);
  }
  return v16 >> 3;
}

unint64_t sub_1D4B56510(uint64_t *a1, char *__src, char *__dst, _DWORD *a4, uint64_t a5, size_t a6, size_t a7, char *a8, int a9)
{
  size_t v9;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  size_t v19;
  char *v20;
  unint64_t v21;
  int v22;
  int v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t result;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  _BYTE *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  uint64_t v42;
  unsigned __int16 *v43;
  _BYTE *v44;
  unsigned int v45;
  char v46;
  char *v47;
  size_t v48;
  _DWORD *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v9 = a6;
  v15 = a4[7];
  v16 = *a1;
  v17 = a1[1];
  v18 = (unsigned __int8 *)a1[2];
  v19 = a1[3] - (_QWORD)v18;
  v20 = a8 + 212;
  v54 = v16;
  v21 = v17 - *a1;
  v51 = (v17 - v16) >> 3;
  v22 = v17 == v16 || v19 / ((v17 - v16) >> 3) > 0x13;
  v23 = a4[18];
  v50 = a4;
  v52 = v17;
  v53 = v21;
  if (v23 == 1)
    goto LABEL_9;
  if (v23 == 2)
  {
    v24 = 1;
    goto LABEL_10;
  }
  if (v15 != 1)
LABEL_9:
    v24 = 0;
  else
    v24 = a4[6] != 0;
LABEL_10:
  v25 = a1[5];
  v55 = a1[6];
  v26 = a1[4];
  result = sub_1D4B56F84(a5, a6, v18, v19, (int)a8 + 212, 8708, __src, __dst, v15, v24, v22, a9);
  v28 = a7;
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    v29 = v26;
    v30 = a5 + v9;
    v31 = (_BYTE *)(a5 + result);
    if ((uint64_t)(v9 - result) < 4)
    {
      if (a7 <= v9)
        return 0;
      else
        return -70;
    }
    v48 = v9;
    v32 = __dst;
    v33 = __dst + 2064;
    if (v53 > 0x3FF)
    {
      v35 = __src;
      if (v53 >> 11 > 0x7E)
      {
        *v31 = -1;
        *(_WORD *)(v31 + 1) = (v53 >> 3) - 32512;
        v34 = v31 + 3;
      }
      else
      {
        *v31 = BYTE1(v51) ^ 0x80;
        v31[1] = v53 >> 3;
        v34 = v31 + 2;
      }
    }
    else
    {
      *v31 = v53 >> 3;
      v34 = v31 + 1;
      v35 = __src;
    }
    v36 = v29;
    v37 = v55;
    if (v52 == v54)
    {
      memcpy(v33, v35 + 2064, 0xDE0uLL);
LABEL_27:
      result = (unint64_t)&v34[-a5];
      if (v34 == (_BYTE *)a5)
        return result;
      goto LABEL_28;
    }
    v56 = v25;
    v60 = 0;
    v58 = 0u;
    v59 = 0u;
    v47 = v20;
    v38 = v34 + 1;
    v39 = v30;
    sub_1D4B54F40(a1, v51, (uint64_t)(v35 + 2064), (uint64_t)v33, v34 + 1, v30, v15, a8, (uint64_t)&v58, v47, 0x2204uLL);
    result = v59;
    if ((unint64_t)v59 >= 0xFFFFFFFFFFFFFF89)
    {
LABEL_28:
      v28 = a7;
      v9 = v48;
      goto LABEL_29;
    }
    v40 = (unsigned __int16 *)(v32 + 4288);
    v41 = (unsigned __int16 *)(v32 + 2836);
    *v34 = ((_BYTE)v58 << 6) + 16 * BYTE4(v58) + 4 * BYTE8(v58);
    v42 = *((_QWORD *)&v59 + 1);
    v43 = (unsigned __int16 *)v33;
    v44 = &v38[result];
    result = sub_1D4B5776C((unint64_t *)&v38[result], v39 - (_QWORD)&v38[result], v41, v56, v43, v37, v40, v36, v54, v51, v60);
    v28 = a7;
    v9 = v48;
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      if (v42 && result + v42 < 4)
        return 0;
      v34 = &v44[result];
      goto LABEL_27;
    }
  }
LABEL_29:
  if (v28 <= v9 && result == -70)
    return 0;
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    v45 = v50[7];
    if (v45 <= 7)
      v46 = 6;
    else
      v46 = v45 - 1;
    if (result >= v28 - (v28 >> v46) - 2)
      return 0;
  }
  return result;
}

uint64_t sub_1D4B56830(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  v1 = *(_QWORD *)(result + 928);
  v2 = *(_QWORD *)(result + 936);
  v3 = *(_QWORD *)(result + 952);
  v4 = *(_QWORD *)(result + 944);
  v5 = *(_QWORD *)(result + 904);
  v6 = *(_QWORD *)(result + 896) + 16 * v5;
  v7 = *(_QWORD *)(result + 3176);
  v30 = *(_QWORD *)(v7 + 5616);
  v31 = *(_DWORD *)(v7 + 5624);
  v9 = v2 - v1;
  v8 = v9 == 0;
  v10 = v9 >> 3;
  v11 = 0;
  if (!v8)
  {
    v12 = *(unsigned int *)(result + 1004);
    v13 = v30;
    v14 = HIDWORD(v30);
    if (v10 <= 1)
      v15 = 1;
    else
      v15 = v10;
    v16 = v6 + 8;
    v17 = v31;
    v18 = (unsigned __int16 *)(v1 + 6);
    v19 = v15;
    while (1)
    {
      v20 = *(unsigned int *)(v18 - 3);
      v21 = *(v18 - 1);
      *(_DWORD *)(v16 - 4) = v21;
      v22 = *v18;
      *(_QWORD *)v16 = (v22 + 3);
      if (v12)
        goto LABEL_7;
      v26 = *(_DWORD *)(result + 1000);
      if (v26 == 2)
        break;
      v23 = v21;
      if (v26 == 1)
      {
        v23 = v21 | 0x10000;
        *(_DWORD *)(v16 - 4) = v21 | 0x10000;
      }
LABEL_8:
      if (v20 > 3)
      {
        v25 = v20 - 3;
        *(_DWORD *)(v16 - 8) = v25;
      }
      else
      {
        *(_DWORD *)(v16 + 4) = v20;
        if (v23)
        {
          v24 = *((_DWORD *)&v30 + (v20 - 1));
        }
        else if ((_DWORD)v20 == 3)
        {
          v24 = v13 - 1;
        }
        else
        {
          v24 = *((_DWORD *)&v30 + v20);
        }
        *(_DWORD *)(v16 - 8) = v24;
        if (!v21)
          LODWORD(v20) = v20 + 1;
        v27 = v20 - 1;
        if ((_DWORD)v20 == 1)
          goto LABEL_28;
        if ((_DWORD)v20 == 4)
          v25 = v13 - 1;
        else
          v25 = *((_DWORD *)&v30 + v27);
        if (v27 <= 1)
          v14 = v17;
      }
      HIDWORD(v30) = v13;
      v31 = v14;
      v17 = v14;
      v14 = v13;
      v13 = v25;
      LODWORD(v30) = v25;
LABEL_28:
      v18 += 4;
      v11 += v23;
      --v12;
      v16 += 16;
      if (!--v19)
        goto LABEL_31;
    }
    *(_DWORD *)v16 = v22 + 65539;
LABEL_7:
    v23 = v21;
    goto LABEL_8;
  }
  v15 = 0;
LABEL_31:
  v28 = v3 - (v11 + v4);
  v29 = v6 + 16 * v15;
  *(_DWORD *)v29 = 0;
  *(_DWORD *)(v29 + 4) = v28;
  *(_QWORD *)(v29 + 8) = 0;
  *(_QWORD *)(result + 904) = v10 + v5 + 1;
  return result;
}

unint64_t sub_1D4B569C8(uint64_t a1, unint64_t a2, unint64_t a3, _QWORD *a4, _DWORD *a5, _DWORD *a6, unint64_t a7, int a8, int a9, int a10, _WORD *a11)
{
  unint64_t result;
  uint64_t v17;

  if (a6 && a7 > 7)
  {
    *(_DWORD *)(a1 + 5624) = 8;
    *(_QWORD *)(a1 + 5616) = 0x400000001;
    *(_DWORD *)(a1 + 2056) = 0;
    *(_DWORD *)(a1 + 5604) = 0;
    *(_QWORD *)(a1 + 5608) = 0;
    if (a8 == 1)
    {
LABEL_4:
      sub_1D4B56B04(a2, a3, a4, a5, (unint64_t)a6, a7, a9, a10);
      return 0;
    }
    if (*a6 != -332356553)
    {
      if (a8 == 2)
        return -32;
      if (!a8)
        goto LABEL_4;
    }
    if (a5[10])
      v17 = 0;
    else
      v17 = a6[1];
    result = sub_1D4B5293C(a1, a11, (uint64_t)a6, a7);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      sub_1D4B56B04(a2, 0, a4, a5, (unint64_t)a6 + result, a7 - result, a9, a10);
      return v17;
    }
  }
  else if (a8 == 2)
  {
    return -32;
  }
  else
  {
    return 0;
  }
  return result;
}

unint64_t sub_1D4B56B04(unint64_t result, unint64_t a2, _QWORD *a3, _DWORD *a4, unint64_t a5, unint64_t a6, int a7, int a8)
{
  uint32x2_t *v12;
  unint64_t v13;
  _DWORD *v14;
  int v15;
  int v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unint64_t v38;
  __int32 v39;
  __int32 v40;
  __int32 v41;

  v12 = (uint32x2_t *)result;
  v13 = a5 + a6;
  v16 = a4[24];
  v14 = a4 + 24;
  v15 = v16;
  if (a2)
    v17 = v15 == 1;
  else
    v17 = 0;
  v18 = v17;
  v19 = *(v14 - 17);
  v20 = -3758096382;
  if (a8 == 1 && v19 - 1 < 2)
    v20 = -16777214;
  v21 = 3758096382;
  if (a8 == 1 && v19 - 1 < 2)
    v21 = 16777214;
  v22 = v13 + v20;
  if (v21 >= a6)
    v23 = a6;
  else
    v23 = v21;
  if (v21 >= a6)
    v24 = a5;
  else
    v24 = v22;
  if (!v23)
  {
    if ((v18 & 1) == 0)
      goto LABEL_46;
    goto LABEL_42;
  }
  v25 = *(_QWORD *)result;
  if (*(_QWORD *)result == v24)
  {
    v26 = *(_QWORD *)(result + 16);
    v27 = *(_DWORD *)(result + 24);
    v28 = *(_DWORD *)(result + 28);
  }
  else
  {
    v26 = *(_QWORD *)(result + 8);
    v27 = v25 - v26;
    v28 = *(_DWORD *)(result + 24);
    *(_DWORD *)(result + 24) = v25 - v26;
    *(_DWORD *)(result + 28) = v28;
    *(_QWORD *)(result + 8) = v24 - (v25 - v26);
    *(_QWORD *)(result + 16) = v26;
    if ((_DWORD)v25 - (_DWORD)v26 - v28 <= 7)
    {
      *(_DWORD *)(result + 28) = v27;
      v28 = v25 - v26;
    }
  }
  v29 = v24 + v23;
  *(_QWORD *)result = v24 + v23;
  if (v24 + v23 > v26 + (unint64_t)v28 && v26 + (unint64_t)v27 > v24)
  {
    v31 = v29 - v26;
    if (v31 > v27)
      LODWORD(v31) = v27;
    *(_DWORD *)(result + 28) = v31;
  }
  if ((v18 & 1) != 0)
  {
    if (*(_QWORD *)a2 == v24)
    {
      v32 = *(_QWORD *)(a2 + 16);
      LODWORD(v33) = *(_DWORD *)(a2 + 24);
      v34 = *(_DWORD *)(a2 + 28);
    }
    else
    {
      v32 = *(_QWORD *)(a2 + 8);
      v33 = *(_QWORD *)a2 - v32;
      v34 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = v33;
      *(_DWORD *)(a2 + 28) = v34;
      *(_QWORD *)(a2 + 8) = v24 - v33;
      *(_QWORD *)(a2 + 16) = v32;
      if (v33 - v34 <= 7)
      {
        *(_DWORD *)(a2 + 28) = v33;
        v34 = v33;
      }
    }
    *(_QWORD *)a2 = v29;
    if (v29 > v32 + (unint64_t)v34 && v32 + (unint64_t)v33 > v24)
    {
      v35 = v29 - v32;
      if (v35 > v33)
        LODWORD(v35) = v33;
      *(_DWORD *)(a2 + 28) = v35;
    }
LABEL_42:
    if (a4[12])
      v36 = 0;
    else
      v36 = v13 - *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 48) = v36;
    result = sub_1D4B87CC4(a2, v24, a5 + a6, v14);
    v19 = a4[7];
  }
LABEL_46:
  if (v19 <= 7)
  {
    v37 = a4[3];
    if (v37 <= a4[2])
      v37 = a4[2];
    if (v37 >= 0x1C)
      LOBYTE(v37) = 28;
    v38 = (8 << v37);
    if (v23 > v38)
      LODWORD(v24) = v13 - v38;
    if (v23 >= v38)
      v23 = v38;
  }
  v39 = v12[1].i32[0];
  v40 = v24 - v39;
  v41 = v13 - v39;
  if (a4[12])
    v41 = 0;
  v12[5].i32[0] = v41;
  v12[5].i32[1] = v40;
  v12[17].i32[0] = a4[37];
  if (v23 >= 9)
  {
    result = (unint64_t)sub_1D4B552AC(v12, a3, a4, v24, v13);
    switch(a4[7])
    {
      case 1:
        result = sub_1D4B5FEC8((uint64_t)v12, v13, a7, a8);
        break;
      case 2:
        result = sub_1D4B5880C((uint64_t)v12, v13, a7, a8);
        break;
      case 3:
      case 4:
      case 5:
        if (v12[17].i32[1])
        {
          result = sub_1D4B66CF0((uint64_t)v12, (int)v13 - 8);
        }
        else if (a4[36] == 1)
        {
          bzero(*(void **)&v12[7], 1 << a4[3]);
          result = sub_1D4B671FC((uint64_t)v12, (int)v13 - 8);
        }
        else
        {
          result = sub_1D4B67044((uint64_t)v12, (uint64_t *)(v13 - 8));
        }
        break;
      case 6:
      case 7:
      case 8:
      case 9:
        result = sub_1D4B88F2C((uint64_t)v12, (int)v13 - 8, v13);
        break;
      default:
        break;
    }
    v12[5].i32[1] = v13 - v12[1].i32[0];
  }
  return result;
}

_OWORD *sub_1D4B56E1C(_OWORD *result, char *a2, unint64_t a3, char *a4)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 *v6;
  __int128 v7;
  unint64_t v8;
  char v9;

  if (a2 <= a4)
  {
    v4 = (_OWORD *)((char *)result + a4 - a2);
    *result = *(_OWORD *)a2;
    if (a4 - a2 >= 17)
    {
      v5 = result + 1;
      v6 = (__int128 *)(a2 + 32);
      do
      {
        *v5 = *(v6 - 1);
        v7 = *v6;
        v6 += 2;
        v5[1] = v7;
        v5 += 2;
      }
      while (v5 < v4);
    }
    a2 = a4;
    result = v4;
  }
  if ((unint64_t)a2 < a3)
  {
    v8 = a3 - (_QWORD)a2;
    do
    {
      v9 = *a2++;
      *(_BYTE *)result = v9;
      result = (_OWORD *)((char *)result + 1);
      --v8;
    }
    while (v8);
  }
  return result;
}

size_t sub_1D4B56E88(_DWORD *a1, size_t a2, void *__src, size_t __n)
{
  uint64_t v4;
  size_t v5;

  if (__n <= 0x1F)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = 2;
  if (__n <= 0xFFF)
    v4 = v4;
  else
    v4 = (v4 + 1);
  v5 = v4 + __n;
  if (v4 + __n > a2)
    return -70;
  switch((_DWORD)v4)
  {
    case 3:
      *a1 = (16 * __n) | 0xC;
      break;
    case 2:
      *(_WORD *)a1 = (16 * __n) | 4;
      break;
    case 1:
      *(_BYTE *)a1 = 8 * __n;
      break;
  }
  memcpy((char *)a1 + v4, __src, __n);
  return v5;
}

uint64_t sub_1D4B56F1C(_DWORD *a1, uint64_t a2, _BYTE *a3, unint64_t a4)
{
  uint64_t v4;

  if (a4 <= 0x1F)
    v4 = 1;
  else
    v4 = 2;
  if (a4 > 0xFFF)
    ++v4;
  switch((_DWORD)v4)
  {
    case 3:
      *a1 = (16 * a4) | 0xD;
      break;
    case 2:
      *(_WORD *)a1 = (16 * a4) | 5;
      break;
    case 1:
      *(_BYTE *)a1 = (8 * a4) | 1;
      break;
  }
  *((_BYTE *)a1 + v4) = *a3;
  return (v4 + 1);
}

uint64_t sub_1D4B56F84(uint64_t a1, size_t a2, unsigned __int8 *a3, size_t a4, int a5, int a6, void *__src, void *__dst, unsigned int a9, int a10, int a11, int a12)
{
  uint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  size_t v21;
  unsigned __int8 *v22;
  int v23;
  char v24;
  unint64_t v25;
  size_t v27;
  const void *v28;
  size_t v29;
  BOOL v31;
  uint64_t (*v32)(unint64_t *, unint64_t, unsigned __int8 *, unint64_t, unsigned int, unsigned int, uint64_t, unint64_t, uint64_t *, int *, char);
  int v33;
  char v34;
  unint64_t v35;
  int v36;
  size_t v37;
  unsigned __int8 *v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;

  v18 = 3;
  if (a4 > 0x3FF)
    v18 = 4;
  if ((a4 & 0xFFFFFFFFFFFFC000) != 0)
    v19 = v18 + 1;
  else
    v19 = v18;
  memcpy(__dst, __src, 0x810uLL);
  if (a10)
  {
    v20 = (_DWORD *)a1;
    v21 = a2;
    v22 = a3;
    return sub_1D4B56E88(v20, v21, v22, a4);
  }
  v22 = a3;
  v20 = (_DWORD *)a1;
  v23 = *((_DWORD *)__src + 514);
  v24 = 9 - a9;
  if ((int)(9 - a9) >= 3)
    v24 = 3;
  v25 = 8 << v24;
  if (v23 == 2)
    v25 = 6;
  if (v25 > a4)
  {
    v21 = a2;
    return sub_1D4B56E88(v20, v21, v22, a4);
  }
  v27 = a2 - v19;
  if (a2 <= v19)
    return -70;
  v28 = __src;
  v29 = a2;
  v44 = v23;
  v31 = (v23 != 2 || v19 != 3) && a4 >= 0x100;
  v32 = sub_1D4B512A8;
  v33 = !v31;
  v43 = v33;
  if (v33)
    v32 = sub_1D4B50E64;
  if (a9 <= 7)
    v34 = 6;
  else
    v34 = a9 - 1;
  v35 = ((uint64_t (*)(unint64_t, size_t))v32)(a1 + v19, v27);
  if (v44)
    v36 = 3;
  else
    v36 = 2;
  if (v35 - 1 > 0xFFFFFFFFFFFFFF87 || v35 >= a4 - (a4 >> v34) - 2)
  {
    memcpy(__dst, v28, 0x810uLL);
    return sub_1D4B56E88((_DWORD *)a1, v29, a3, a4);
  }
  else
  {
    if (v35 == 1)
    {
      if (a4 > 7 || a4 < 2)
      {
LABEL_41:
        memcpy(__dst, v28, 0x810uLL);
        return sub_1D4B56F1C((_DWORD *)a1, v40, a3, a4);
      }
      v37 = a4 - 1;
      v38 = a3 + 1;
      while (1)
      {
        v39 = *v38++;
        if (v39 != *a3)
          break;
        if (!--v37)
          goto LABEL_41;
      }
    }
    if (!v44)
      *((_DWORD *)__dst + 514) = 1;
    switch(v19)
    {
      case 5uLL:
        *(_DWORD *)a1 = (((_DWORD)v35 << 22) + 16 * a4) | v36 | 0xC;
        *(_BYTE *)(a1 + 4) = v35 >> 10;
        break;
      case 4uLL:
        *(_DWORD *)a1 = (((_DWORD)v35 << 18) + 16 * a4) | v36 | 8;
        break;
      case 3uLL:
        if (v43)
          v41 = 4;
        else
          v41 = 0;
        v42 = ((v36 | v41 | (16 * a4)) ^ 4) + ((_DWORD)v35 << 14);
        *(_WORD *)a1 = v42;
        *(_BYTE *)(a1 + 2) = BYTE2(v42);
        break;
    }
    return v35 + v19;
  }
}

uint64_t sub_1D4B57294(unsigned __int16 *a1, unsigned int *a2, unsigned int a3)
{
  int v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v3 = *a1;
  if (*a1)
    v4 = 1 << (v3 - 1);
  else
    v4 = 1;
  if (a1[1] < a3)
    return -1;
  v6 = 0;
  v7 = a3 + 1;
  v8 = &a1[2 * v4 + 4];
  do
  {
    v10 = *(_DWORD *)v8;
    v8 += 4;
    v9 = v10;
    v12 = *a2++;
    v11 = v12;
    if (v12)
    {
      v13 = ((HIWORD(v9) + 1) << 8) - ((((HIWORD(v9) + 1) << 24) - ((v9 + (1 << v3)) << 8)) >> v3);
      if (v13 >= (v3 << 8) + 256)
        return -1;
      v6 += v11 * (unint64_t)v13;
    }
    --v7;
  }
  while (v7);
  return v6 >> 8;
}

unint64_t sub_1D4B57328(unsigned __int16 *a1, char a2, int *a3, int a4)
{
  unint64_t v4;
  uint64_t v5;
  __int16 v6;
  int v7;
  int v8;

  v4 = 0;
  if ((a4 + 1) > 1)
    v5 = (a4 + 1);
  else
    v5 = 1;
  do
  {
    v7 = *a1++;
    v6 = v7;
    if (v7 == 0xFFFF)
      v6 = 1;
    v8 = *a3++;
    v4 += (dword_1D4BD6D3C[v6 << (8 - a2)] * v8);
    --v5;
  }
  while (v5);
  return v4 >> 8;
}

uint64_t sub_1D4B57384(_DWORD *a1, unsigned int *a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6, unsigned __int16 *a7, unsigned __int16 *a8, char a9, int a10, unsigned int a11)
{
  uint64_t result;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  __int16 v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v34;
  unint64_t v35;
  __int16 v36[53];
  _WORD v37[256];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a4 != a5)
  {
    if (a11 > 3)
    {
      v17 = a2;
      if (a10)
      {
        v18 = 0;
        if (a3 + 1 > 1)
          v19 = a3 + 1;
        else
          v19 = 1;
        v20 = a2;
        do
        {
          v22 = *a8++;
          v21 = v22;
          if (v22 == 0xFFFF)
            v21 = 1;
          v23 = *v20++;
          v18 += (dword_1D4BD6D3C[v21 << (8 - a9)] * v23);
          --v19;
        }
        while (v19);
        v24 = v18 >> 8;
      }
      else
      {
        v24 = -1;
      }
      if (*a1)
        v25 = sub_1D4B57294(a7, a2, a3);
      else
        v25 = -1;
      v26 = sub_1D4B4E5F0(a6, a5, a3);
      v27 = sub_1D4B4E658(v36, v26, v17, a5, a3, a5 > 0x7FF);
      if (v27 <= 0xFFFFFFFFFFFFFF88)
        v27 = sub_1D4B4E320(v37, 0x200uLL, (uint64_t)v36, a3, v26);
      v28 = 0;
      if (a3 + 1 > 1)
        v29 = a3 + 1;
      else
        v29 = 1;
      do
      {
        v31 = *v17++;
        v30 = v31;
        v32 = v31 << 8;
        if (v32 >= a5 || v30 == 0)
          v34 = v32 / a5;
        else
          v34 = 1;
        v28 += dword_1D4BD6D3C[v34] * v30;
        --v29;
      }
      while (v29);
      v35 = (v28 >> 8) + 8 * v27;
      if (v24 <= v25 && v24 <= v35)
        goto LABEL_42;
      if (v25 <= v35)
        return 3;
    }
    else if (a10)
    {
      if (a5 > 0x3E7 || *a1 != 2)
      {
        if (a5 >= (unint64_t)(10 - a11) << a9 >> 3 && a5 >> (a9 - 1) <= a4)
          goto LABEL_44;
LABEL_42:
        result = 0;
        *a1 = 0;
        return result;
      }
      return 3;
    }
LABEL_44:
    *a1 = 1;
    return 2;
  }
  *a1 = 0;
  return a4 > 2 || a10 == 0;
}

unint64_t sub_1D4B575D0(_WORD *a1, unint64_t a2, _WORD *__dst, unsigned int a4, int a5, unsigned int *a6, unsigned int a7, _BYTE *a8, uint64_t a9, __int16 *a10, int a11, int a12, const void *a13, size_t a14, __int16 *a15, unint64_t a16)
{
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;

  switch(a5)
  {
    case 0:
      v21 = sub_1D4B4E094(__dst, a10, a12, a11, a15, a16);
      if (v21 >= 0xFFFFFFFFFFFFFF89)
        v22 = v21;
      else
        v22 = 0;
      break;
    case 1:
      v22 = sub_1D4B4E968((uint64_t)__dst, a7);
      if (v22 <= 0xFFFFFFFFFFFFFF88)
      {
        if (a2)
        {
          *(_BYTE *)a1 = *a8;
          v22 = 1;
        }
        else
        {
          v22 = -70;
        }
      }
      break;
    case 2:
      v24 = a9;
      v25 = sub_1D4B4E5F0(a4, a9, a7);
      v26 = a8[a9 - 1];
      v27 = a6[v26];
      if (v27 >= 2)
      {
        a6[v26] = v27 - 1;
        v24 = a9 - 1;
      }
      v22 = sub_1D4B4E658(a15, v25, a6, v24, a7, v24 > 0x7FF);
      if (v22 <= 0xFFFFFFFFFFFFFF88)
      {
        v22 = sub_1D4B4E320(a1, a2, (uint64_t)a15, a7, v25);
        if (v22 <= 0xFFFFFFFFFFFFFF88)
        {
          v28 = sub_1D4B4E094(__dst, a15, a7, v25, a15 + 54, 0x474uLL);
          if (v28 >= 0xFFFFFFFFFFFFFF89)
            v22 = v28;
        }
      }
      break;
    case 3:
      memcpy(__dst, a13, a14);
      v22 = 0;
      break;
    default:
      v22 = -1;
      break;
  }
  return v22;
}

uint64_t sub_1D4B5776C(unint64_t *a1, unint64_t a2, unsigned __int16 *a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6, unsigned __int16 *a7, uint64_t a8, uint64_t a9, unint64_t a10, int a11)
{
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int16 *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unsigned __int16 *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t result;
  unint64_t v42;
  unsigned int v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  unsigned __int16 *v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  unsigned __int16 *v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t *v86;
  int v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t *v91;
  int v92;
  unint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t *v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  unint64_t *v100;
  uint64_t v101;
  unint64_t *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned __int16 *v106;

  if (a2 < 9)
    return -70;
  v12 = a10 - 1;
  v13 = *(unsigned __int8 *)(a4 + a10 - 1);
  v15 = *a3;
  v14 = a3 + 2;
  v16 = 1 << (v15 - 1);
  v105 = v15;
  if (!v15)
    v16 = 1;
  v106 = &v14[2 * v16];
  v17 = v14[((unint64_t)(((*(_DWORD *)&v106[4 * v13 + 2] + 0x8000) & 0xFFFF0000) - *(_DWORD *)&v106[4 * v13 + 2]) >> ((*(_DWORD *)&v106[4 * v13 + 2] + 0x8000) >> 16))
          + *(int *)&v106[4 * v13]];
  v18 = (char *)a1 + a2;
  v19 = *(unsigned __int8 *)(a6 + v12);
  v22 = *a5;
  v20 = a5 + 2;
  v21 = v22;
  v23 = 1 << (v22 - 1);
  if (!v22)
    v23 = 1;
  v24 = &v20[2 * v23];
  v25 = v20[((unint64_t)(((*(_DWORD *)&v24[4 * v19 + 2] + 0x8000) & 0xFFFF0000)
                              - *(_DWORD *)&v24[4 * v19 + 2]) >> ((*(_DWORD *)&v24[4 * v19 + 2]
                                                                                             + 0x8000) >> 16))
          + *(int *)&v24[4 * v19]];
  v26 = *(unsigned __int8 *)(a8 + v12);
  v27 = (unint64_t *)(v18 - 8);
  v30 = *a7;
  v28 = a7 + 2;
  v29 = v30;
  v31 = 1 << (v30 - 1);
  if (!v30)
    v31 = 1;
  v32 = &v28[2 * v31];
  v33 = v28[((unint64_t)(((*(_DWORD *)&v32[4 * v26 + 2] + 0x8000) & 0xFFFF0000) - *(_DWORD *)&v32[4 * v26 + 2]) >> ((*(_DWORD *)&v32[4 * v26 + 2] + 0x8000) >> 16))
          + *(int *)&v32[4 * v26]];
  v34 = (unsigned int *)(a9 + 8 * v12);
  v35 = byte_1D4BD713C[v26];
  v36 = byte_1D4BD7160[v13];
  v37 = ((unint64_t)(dword_1D4BD7198[v36] & *((unsigned __int16 *)v34 + 3)) << v35) | dword_1D4BD7198[v35] & *((unsigned __int16 *)v34 + 2);
  v38 = v36 + v35;
  if (a11)
  {
    if (v19 > 0x37)
    {
      v40 = *v34;
      v39 = v19 - 56;
      if ((_DWORD)v19 != 56)
      {
        v45 = ((unint64_t)(dword_1D4BD7198[v39] & v40) << v38) | v37;
        v19 = (v38 + v39) >> 3;
        *a1 = v45;
        if ((unint64_t *)((char *)a1 + v19) <= v27)
          v44 = (unint64_t *)((char *)a1 + v19);
        else
          v44 = v27;
        v38 = ((_BYTE)v38 + (_BYTE)v39) & 7;
        v37 = v45 >> (8 * v19);
        LODWORD(v19) = 56;
        goto LABEL_20;
      }
      LODWORD(v19) = 56;
    }
    else
    {
      LOBYTE(v39) = 0;
      v40 = *v34;
    }
    v44 = a1;
LABEL_20:
    v42 = ((unint64_t)(dword_1D4BD7198[v19] & (v40 >> v39)) << v38) | v37;
    v43 = v38 + v19;
    goto LABEL_21;
  }
  v42 = ((unint64_t)(dword_1D4BD7198[v19] & *v34) << v38) | v37;
  v43 = v38 + v19;
  v44 = a1;
LABEL_21:
  v46 = v43 >> 3;
  *v44 = v42;
  v47 = (unint64_t *)((char *)v44 + v46);
  if ((unint64_t *)((char *)v44 + v46) > v27)
    v47 = v27;
  v48 = v42 >> (8 * v46);
  v49 = v43 & 7;
  v50 = a10 - 2;
  v102 = a1;
  v103 = v29;
  v104 = v21;
  if (a10 >= 2)
  {
    v51 = a9 + 8 * a10 - 16;
    do
    {
      v52 = *(unsigned __int8 *)(a8 + v50);
      v53 = *(unsigned __int8 *)(a6 + v50);
      v54 = *(unsigned __int8 *)(a4 + v50);
      v55 = byte_1D4BD713C[v52];
      v56 = byte_1D4BD7160[v54];
      v57 = (v25 + *(unsigned int *)&v24[4 * v53 + 2]) >> 16;
      v58 = (unint64_t)(v25 & dword_1D4BD7198[v57]) << v49;
      v59 = v49 + v57;
      v25 = v20[(v25 >> ((v25 + *(_DWORD *)&v24[4 * v53 + 2]) >> 16)) + *(int *)&v24[4 * v53]];
      v60 = &v106[4 * v54];
      v61 = *(_DWORD *)v60;
      v62 = (v17 + *((unsigned int *)v60 + 1)) >> 16;
      v63 = (unint64_t)(v17 & dword_1D4BD7198[v62]) << v59;
      v64 = v59 + v62;
      v17 = v14[(v17 >> v62) + v61];
      v65 = &v32[4 * v52];
      LODWORD(v62) = *(_DWORD *)v65;
      v66 = (v33 + *((unsigned int *)v65 + 1)) >> 16;
      v67 = v58 | v48 | v63 | ((unint64_t)(v33 & dword_1D4BD7198[v66]) << v64);
      v68 = v64 + v66;
      v33 = v28[(v33 >> v66) + (int)v62];
      v69 = v55 + v53 + v56;
      if (v69 >= 0x1F)
      {
        v70 = v68 >> 3;
        *v47 = v67;
        if ((unint64_t *)((char *)v47 + v70) <= v27)
          v47 = (unint64_t *)((char *)v47 + v70);
        else
          v47 = v27;
        v68 &= 7u;
        v67 >>= 8 * v70;
      }
      v71 = v68 + v55;
      v72 = ((unint64_t)(dword_1D4BD7198[v55] & *(unsigned __int16 *)(v51 + 4)) << v68) | v67 | ((unint64_t)(dword_1D4BD7198[v56] & *(unsigned __int16 *)(v51 + 6)) << (v68 + v55));
      v73 = v71 + v56;
      if (v69 >= 0x39)
      {
        v74 = v73 >> 3;
        *v47 = v72;
        if ((unint64_t *)((char *)v47 + v74) <= v27)
          v47 = (unint64_t *)((char *)v47 + v74);
        else
          v47 = v27;
        v73 &= 7u;
        v72 >>= 8 * v74;
      }
      if (a11)
      {
        if (v53 > 0x37)
        {
          v76 = *(_DWORD *)v51;
          v75 = v53 - 56;
          if ((_DWORD)v53 != 56)
          {
            v79 = ((unint64_t)(dword_1D4BD7198[v75] & v76) << v73) | v72;
            v80 = (v73 + v75) >> 3;
            *v47 = v79;
            if ((unint64_t *)((char *)v47 + v80) <= v27)
              v47 = (unint64_t *)((char *)v47 + v80);
            else
              v47 = v27;
            v73 = ((_BYTE)v73 + (_BYTE)v75) & 7;
            v72 = v79 >> (8 * v80);
          }
          LODWORD(v53) = 56;
        }
        else
        {
          LOBYTE(v75) = 0;
          v76 = *(_DWORD *)v51;
        }
        v77 = v76 >> v75;
        v78 = dword_1D4BD7198[v53];
      }
      else
      {
        v77 = *(_DWORD *)v51;
        v78 = dword_1D4BD7198[v53];
      }
      v81 = ((unint64_t)(v78 & v77) << v73) | v72;
      v82 = (v73 + v53) >> 3;
      *v47 = v81;
      if ((unint64_t *)((char *)v47 + v82) <= v27)
        v47 = (unint64_t *)((char *)v47 + v82);
      else
        v47 = v27;
      v48 = v81 >> (8 * v82);
      --v50;
      v49 = ((_BYTE)v73 + (_BYTE)v53) & 7;
      v51 -= 8;
    }
    while (v50 < a10);
  }
  v83 = ((unint64_t)(v17 & dword_1D4BD7198[v105]) << v49) | v48;
  v84 = v49 + v105;
  v85 = v84 >> 3;
  *v47 = v83;
  v86 = (unint64_t *)((char *)v47 + v85);
  if ((unint64_t *)((char *)v47 + v85) > v27)
    v86 = v27;
  v87 = v84 & 7;
  v88 = ((unint64_t)(v25 & dword_1D4BD7198[v104]) << v87) | (v83 >> (8 * v85));
  v89 = v87 + v104;
  v90 = v89 >> 3;
  *v86 = v88;
  v91 = (unint64_t *)((char *)v86 + v90);
  if (v91 > v27)
    v91 = v27;
  v92 = v89 & 7;
  v93 = ((unint64_t)(v33 & dword_1D4BD7198[v103]) << v92) | (v88 >> (8 * v90));
  v94 = v92 + v103;
  v95 = v94 >> 3;
  *v91 = v93;
  v96 = (uint64_t *)((char *)v91 + v95);
  if (v96 > (uint64_t *)v27)
    v96 = (uint64_t *)v27;
  v97 = v94 & 7;
  v98 = (v93 >> (8 * v95)) | (1 << v97);
  v99 = v97 + 1;
  *v96 = v98;
  v100 = (unint64_t *)((char *)v96 + (v99 >> 3));
  if (v27 <= v100)
    return -70;
  v101 = (v99 & 7) != 0 ? (uint64_t)v100 + 1 : (uint64_t)v96 + (v99 >> 3);
  result = v101 - (_QWORD)v102;
  if ((unint64_t *)v101 == v102)
    return -70;
  return result;
}

uint64_t sub_1D4B57CB4(uint64_t a1, char *a2, uint64_t a3, char *a4, uint64_t a5, int a6)
{
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unsigned __int16 *v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  int v40;
  char *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  size_t v46;
  int v47;
  char *v48;
  _BOOL4 v49;
  _BYTE *v50;
  int v51;
  size_t v52;
  char *v53;
  uint64_t v54;
  _BYTE *v55;
  unint64_t *v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  char *v60;
  int v61;
  int v62;
  _BOOL4 v63;
  BOOL v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  size_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  unint64_t v75;
  int v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  unint64_t v82;
  char *v83;
  void *v84;
  char *v85;
  unsigned int *v86;
  int v87;
  char *v88;
  unsigned __int16 *__dst;
  unint64_t v90;
  unint64_t v91;
  int v92;
  char *v94;
  uint64_t v95;
  unsigned __int16 *v96;
  unsigned __int16 *v97;
  unsigned __int16 *v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  int v102;
  _BOOL4 v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  unsigned int *v108;
  uint64_t v109;
  int v110;
  _OWORD v111[8];
  size_t __n[2];
  int v113[4];
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  size_t v122[2];
  uint64_t v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v123 = 0;
  v121 = 0u;
  *(_OWORD *)v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  *(_OWORD *)v113 = 0u;
  v114 = 0u;
  *(_OWORD *)__n = 0u;
  memset(v111, 0, sizeof(v111));
  v11 = sub_1D4B51D0C((_QWORD *)(a1 + 928), *(char **)(a1 + 3176), *(void **)(a1 + 3184), (_DWORD *)(a1 + 224), (uint64_t)v111, *(void **)(a1 + 3496), 0x22D8uLL);
  if (v11 <= 0xFFFFFFFFFFFFFF88)
  {
    v12 = 0;
    v13 = 0;
    v14 = *(unsigned __int16 **)(a1 + 3184);
    v85 = a4;
    v82 = (unint64_t)&a4[a5];
    v107 = &a2[a3];
    v103 = LODWORD(v111[0]) == 2;
    v105 = *(_QWORD *)(a1 + 936);
    v97 = v14 + 2144;
    v98 = v14 + 1032;
    __dst = v14;
    v84 = *(void **)(a1 + 3176);
    v15 = *(unsigned int **)(a1 + 3496);
    v16 = *(_QWORD *)(a1 + 928);
    v108 = *(unsigned int **)(a1 + 944);
    v95 = *(_QWORD *)(a1 + 952);
    v96 = v14 + 1418;
    v100 = *(unsigned __int8 **)(a1 + 968);
    v101 = *(unsigned __int8 **)(a1 + 960);
    v99 = *(unsigned __int8 **)(a1 + 976);
    v104 = *(_QWORD *)(a1 + 280);
    v83 = a2;
    v94 = a2;
    v102 = 1;
    v17 = v16;
    v86 = v15;
    v90 = v16;
    while (1)
    {
      if (v16 == v105)
        goto LABEL_8;
      v18 = v17 + 8 * v13;
      v19 = *(unsigned __int16 *)(v18 + 4);
      if (*(_DWORD *)(a1 + 1004) == ((v18 - *(_QWORD *)(a1 + 928)) >> 3) && *(_DWORD *)(a1 + 1000) == 1)
        v19 |= 0x10000uLL;
      ++v13;
      if (v18 == v105 - 8)
      {
LABEL_8:
        v12 = v95 - (_QWORD)v108;
        v20 = 1;
      }
      else
      {
        v20 = 0;
        v12 += v19;
      }
      LODWORD(v109) = 255;
      if ((LODWORD(v111[0]) - 2) < 2)
      {
        v21 = v12;
        if ((unint64_t)sub_1D4B4F0F0(v15, (unsigned int *)&v109, v108, v12, (char *)v15, 0x22D8uLL) <= 0xFFFFFFFFFFFFFF88)
        {
          v22 = sub_1D4B4FCA8((uint64_t)__dst, v15, v109);
          v23 = __n[1];
          if (!v103)
            v23 = 0;
          v21 = v22 + v23 + 3;
        }
      }
      else if (LODWORD(v111[0]))
      {
        v21 = LODWORD(v111[0]) == 1;
      }
      else
      {
        v21 = v12;
      }
      if (v13)
      {
        v24 = v17;
        v25 = sub_1D4B58700(v113[1], v99, 0x1Fu, v13, v98, 0, word_1D4BD7218, 5, 0x1Cu, v15);
        v26 = sub_1D4B58700(v113[0], v101, 0x23u, v13, v97, (uint64_t)&unk_1D4BD7252, word_1D4BD7276, 6, 0x23u, v15);
        v27 = sub_1D4B58700(v113[2], v100, 0x34u, v13, v96, (uint64_t)&unk_1D4BD72BE, word_1D4BD72F4, 6, 0x34u, v15);
        v28 = v122[1];
        if (!v102)
          v28 = 0;
        if (v21 + v25 + v26 + v27 + v28 + 6 > v104)
          v29 = 1;
        else
          v29 = v20;
        if ((v29 & 1) != 0)
        {
          v17 = v24;
          v30 = v24 + 8 * v13;
          v31 = 0;
          if (v13 >= 1)
          {
            v32 = v17 - *(_QWORD *)(a1 + 928);
            v33 = 8 * v13;
            v34 = (unsigned __int16 *)(v17 + 6);
            do
            {
              v36 = *v34;
              v34 += 4;
              v35 = v36;
              v37 = v36 + 3;
              if (*(_DWORD *)(a1 + 1004) == (v32 >> 3))
              {
                v38 = v35 + 65539;
                if (*(_DWORD *)(a1 + 1000) == 2)
                  v37 = v38;
              }
              v31 += v37;
              v32 += 8;
              v33 -= 8;
            }
            while (v33 > 0);
          }
LABEL_36:
          v91 = v30;
          v106 = v17;
          if (a6)
            v40 = v20;
          else
            v40 = 0;
          v92 = v40;
          v41 = v94 + 3;
          if (v103)
            v42 = 200;
          else
            v42 = 0;
          if (v103)
            v43 = v111[0];
          else
            v43 = 3;
          if (1024 - v42 > v12)
            v44 = 3;
          else
            v44 = 4;
          if (0x4000 - v42 > v12)
            v45 = v44;
          else
            v45 = v44 + 1;
          if (!v12)
          {
LABEL_54:
            v46 = sub_1D4B56E88(v94 + 3, v107 - v94 - 3, v108, v12);
LABEL_60:
            v11 = v46;
            v47 = 1;
            goto LABEL_61;
          }
          if (LODWORD(v111[0]) == 1)
          {
            v46 = sub_1D4B56F1C(v94 + 3, v107 - v94 - 3, v108, v12);
            goto LABEL_60;
          }
          if (!LODWORD(v111[0]))
            goto LABEL_54;
          v52 = 0;
          v53 = &v41[v45];
          if (v103 && LODWORD(v111[0]) == 2)
          {
            memcpy(v53, (char *)v111 + 4, __n[1]);
            v52 = __n[1];
            v53 = &v41[v45 + __n[1]];
          }
          v88 = v53;
          if (v45 == 3)
            v54 = sub_1D4B4FD20();
          else
            v54 = sub_1D4B50B6C();
          if ((unint64_t)(v54 - 1) > 0xFFFFFFFFFFFFFF87)
          {
            v16 = v90;
            v15 = v86;
            if (v20)
              goto LABEL_122;
          }
          else
          {
            v66 = v54 + v52;
            if (!v103 && v66 >= v12)
              goto LABEL_111;
            v67 = 3;
            if (v66 > 0x3FF)
              v67 = 4;
            if ((v66 & 0xFFFFFFFFFFFFC000) != 0)
              ++v67;
            if (v45 >= v67)
            {
              switch(v45)
              {
                case 5uLL:
                  *(_DWORD *)(v94 + 3) = v43 + 16 * v12 + ((_DWORD)v66 << 22) + 12;
                  v94[7] = v66 >> 10;
                  break;
                case 4uLL:
                  *(_DWORD *)v41 = v43 + 16 * v12 + ((_DWORD)v66 << 18) + 8;
                  break;
                case 3uLL:
                  v68 = 16 * v12 + v43 + ((_DWORD)v66 << 14);
                  *(_WORD *)(v94 + 3) = v68;
                  v94[5] = BYTE2(v68);
                  break;
              }
              v47 = 0;
              v11 = &v88[v54] - v41;
            }
            else
            {
LABEL_111:
              v11 = sub_1D4B56E88(v41, v107 - v94 - 3, v108, v12);
              v47 = 1;
            }
            v15 = v86;
LABEL_61:
            if (v11 > 0xFFFFFFFFFFFFFF88)
              return v11;
            if (!v11)
              goto LABEL_99;
            v48 = &v41[v11];
            v49 = *(_DWORD *)(a1 + 228) > 0x39u;
            if (v107 - v48 < 4)
              return -70;
            v87 = v47;
            if ((unint64_t)v13 >= 0x7F)
            {
              if ((unint64_t)v13 >> 8 > 0x7E)
              {
                *v48 = -1;
                *(_WORD *)(v48 + 1) = v13 - 32512;
                v50 = v48 + 3;
              }
              else
              {
                *v48 = BYTE1(v13) ^ 0x80;
                v48[1] = v13;
                v50 = v48 + 2;
              }
            }
            else
            {
              *v48 = v13;
              v50 = v48 + 1;
              if (!v13)
              {
                v51 = 1;
                v11 = 1;
                goto LABEL_86;
              }
            }
            v55 = v50 + 1;
            if (v102)
            {
              *v50 = (LOBYTE(v113[0]) << 6) + 16 * LOBYTE(v113[1]) + 4 * LOBYTE(v113[2]);
              memcpy(v50 + 1, &v113[3], v122[1]);
              v56 = (unint64_t *)&v55[v122[1]];
              v57 = sub_1D4B5776C(v56, v107 - (char *)v56, v96, (uint64_t)v100, v98, (uint64_t)v99, v97, (uint64_t)v101, v106, v13, v49);
              v11 = v57;
              if (v57 >= 0xFFFFFFFFFFFFFF89)
                return v11;
              v58 = (char *)v56 + v57;
              if (v123 && v123 + v57 < 4)
                goto LABEL_99;
            }
            else
            {
              *v50 = -4;
              v59 = sub_1D4B5776C((unint64_t *)(v50 + 1), v107 - v55, v96, (uint64_t)v100, v98, (uint64_t)v99, v97, (uint64_t)v101, v106, v13, v49);
              v11 = v59;
              if (v59 >= 0xFFFFFFFFFFFFFF89)
                return v11;
              v58 = &v55[v59];
            }
            if (v58 - v50 < 4)
              goto LABEL_99;
            v11 = v58 - v48;
            if ((unint64_t)(v58 - v48) > 0xFFFFFFFFFFFFFF88)
              return v11;
            if (!v11)
            {
LABEL_99:
              v16 = v90;
              goto LABEL_100;
            }
            v51 = 0;
LABEL_86:
            v60 = &v48[v11];
            v11 = &v48[v11] - v94;
            if (v92)
              v61 = -19;
            else
              v61 = -20;
            v62 = v61 + 8 * v11;
            *(_WORD *)v94 = v62;
            v94[2] = BYTE2(v62);
            if (v11 > 0xFFFFFFFFFFFFFF88)
              return v11;
            if (!v11)
              goto LABEL_99;
            v16 = v90;
            if (v11 >= v31 + v12)
            {
LABEL_100:
              v17 = v106;
              if (v20)
                goto LABEL_122;
            }
            else
            {
              v85 += v31 + v12;
              v108 = (unsigned int *)((char *)v108 + v12);
              v101 += v13;
              v100 += v13;
              v99 += v13;
              v63 = v103;
              if (!v87)
                v63 = 0;
              v64 = v51 == 0;
              v65 = v102;
              if (v64)
                v65 = 0;
              v102 = v65;
              v103 = v63;
              v94 = v60;
              v17 = v91;
              v12 = 0;
              v13 = 0;
              if (v20)
              {
LABEL_122:
                if (v103)
                  memcpy(__dst, v84, 0x810uLL);
                if (v102
                  && ((v113[0] - 1) < 2
                   || (v113[2] - 1) < 2
                   || (v113[1] - 3) > 0xFFFFFFFD))
                {
                  return 0;
                }
                if ((unint64_t)v85 < v82)
                {
                  v69 = v82 - (_QWORD)v85;
                  v11 = v82 - (_QWORD)v85 + 3;
                  if (v11 > v107 - v94)
                    return -70;
                  v70 = a6 + 8 * v69;
                  *(_WORD *)v94 = v70;
                  v94[2] = BYTE2(v70);
                  memcpy(v94 + 3, v85, v69);
                  if (v11 > 0xFFFFFFFFFFFFFF88)
                    return v11;
                  v94 += v11;
                  if (v17 < v105)
                  {
                    v109 = *((_QWORD *)v84 + 702);
                    v110 = *((_DWORD *)v84 + 1406);
                    if (v16 < v17)
                    {
                      v71 = *(_DWORD *)(a1 + 1004);
                      v72 = v109;
                      v73 = HIDWORD(v109);
                      v74 = v110;
                      v75 = v16 - *(_QWORD *)(a1 + 928);
                      do
                      {
                        v76 = *(unsigned __int16 *)(v16 + 4);
                        if (v71 == (v75 >> 3) && *(_DWORD *)(a1 + 1000) == 1)
                          v76 |= 0x10000u;
                        v77 = *(_DWORD *)v16;
                        if (*(_DWORD *)v16 < 4u)
                        {
                          if (v76)
                            v79 = *(_DWORD *)v16;
                          else
                            v79 = v77 + 1;
                          v80 = v79 - 1;
                          if (v79 == 1)
                            goto LABEL_152;
                          if (v79 == 4)
                            v78 = v72 - 1;
                          else
                            v78 = *((_DWORD *)&v109 + v80);
                          if (v80 <= 1)
                            v73 = v74;
                          v110 = v73;
                          HIDWORD(v109) = v72;
                        }
                        else
                        {
                          v110 = v73;
                          HIDWORD(v109) = v72;
                          v78 = v77 - 3;
                        }
                        LODWORD(v109) = v78;
                        v74 = v73;
                        v73 = v72;
                        v72 = v78;
LABEL_152:
                        v75 += 8;
                        v16 += 8;
                      }
                      while (v16 < v17);
                    }
                    *((_QWORD *)__dst + 702) = v109;
                    *((_DWORD *)__dst + 1406) = v110;
                  }
                }
                return v94 - v83;
              }
            }
          }
        }
        else
        {
          v17 = v24;
          if (v20)
            goto LABEL_122;
        }
      }
      else
      {
        v31 = 0;
        if (v21 + 6 > v104)
          v39 = 1;
        else
          v39 = v20;
        v30 = v17;
        if ((v39 & 1) != 0)
          goto LABEL_36;
        v13 = 0;
        if (v20)
          goto LABEL_122;
      }
    }
  }
  return v11;
}

unint64_t sub_1D4B58700(int a1, unsigned __int8 *a2, unsigned int a3, int64_t a4, unsigned __int16 *a5, uint64_t a6, unsigned __int16 *a7, char a8, unsigned int a9, void *a10)
{
  unsigned __int8 *v15;
  unint64_t v17;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int v21;

  v15 = a2;
  v21 = a3;
  sub_1D4B4EE1C(a10, &v21, a2, a4, (char *)a10, 0x22D8uLL);
  if (a1 == 1)
    goto LABEL_9;
  if (!a1)
  {
    if (v21 > a9)
      return 10 * a4;
    v17 = sub_1D4B57328(a7, a8, (int *)a10, v21);
    goto LABEL_7;
  }
  if ((a1 & 0xFFFFFFFE) != 2)
  {
LABEL_9:
    v17 = 0;
    goto LABEL_10;
  }
  v17 = sub_1D4B57294(a5, (unsigned int *)a10, v21);
LABEL_7:
  if (v17 > 0xFFFFFFFFFFFFFF88)
    return 10 * a4;
LABEL_10:
  if (a4 >= 1)
  {
    v19 = &v15[a4];
    do
    {
      v20 = v15;
      if (a6)
        v20 = (unsigned __int8 *)(a6 + *v15);
      v17 += *v20;
      ++v15;
    }
    while (v15 < v19);
  }
  return v17 >> 3;
}

uint64_t sub_1D4B5880C(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  char v14;
  char v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  int v27;
  int v28;
  char v29;
  char v30;
  int v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;

  v4 = *(_QWORD *)(result + 112);
  v5 = *(_DWORD *)(result + 272);
  v6 = *(_QWORD *)(result + 128);
  v7 = *(_QWORD *)(result + 8);
  v8 = *(unsigned int *)(result + 44);
  v9 = v7 + v8;
  v10 = a2 - 8;
  v11 = v7 + v8 + 2;
  if (a4 != 1)
  {
    if (v11 > v10)
      return result;
    v27 = *(_DWORD *)(result + 260);
    v28 = *(_DWORD *)(result + 264);
    result = (64 - v27);
    v29 = 32 - v27;
    v30 = 64 - v28;
    v31 = v5 - 5;
    while (1)
    {
      v32 = 0;
      v33 = v8;
      do
      {
        switch(v31)
        {
          case 0:
            v34 = *(_QWORD *)(v9 + v32);
            v35 = 0xCF1BBCDCBB000000 * v34;
            goto LABEL_31;
          case 1:
            v34 = *(_QWORD *)(v9 + v32);
            v35 = 0xCF1BBCDCBF9B0000 * v34;
            goto LABEL_31;
          case 2:
            v34 = *(_QWORD *)(v9 + v32);
            v35 = 0xCF1BBCDCBFA56300 * v34;
            goto LABEL_31;
          case 3:
            v34 = *(_QWORD *)(v9 + v32);
            v35 = 0xCF1BBCDCB7A56463 * v34;
LABEL_31:
            v36 = v35 >> result;
            break;
          default:
            v36 = (-1640531535 * *(_DWORD *)(v9 + v32)) >> v29;
            v34 = *(_QWORD *)(v9 + v32);
            break;
        }
        v37 = (0xCF1BBCDCB7A56463 * v34) >> v30;
        if (v32)
        {
          if (*(_DWORD *)(v4 + 4 * v37))
          {
            if (!a3)
              break;
            goto LABEL_38;
          }
        }
        else
        {
          *(_DWORD *)(v6 + 4 * v36) = v9 - v7;
        }
        *(_DWORD *)(v4 + 4 * v37) = v33;
        if (!a3)
          break;
LABEL_38:
        ++v33;
        v25 = v32++ >= 2;
      }
      while (!v25);
      v38 = v9 + 5;
      v9 += 3;
      LODWORD(v8) = v8 + 3;
      if (v38 > v10)
        return result;
    }
  }
  if (v11 > v10)
    return result;
  v12 = *(_DWORD *)(result + 260);
  v13 = *(_DWORD *)(result + 264);
  result = (56 - v12);
  v14 = 24 - v12;
  v15 = 56 - v13;
  v16 = (_DWORD)v8 << 8;
  v17 = v5 - 5;
  do
  {
    v18 = 0;
    v19 = v16;
    do
    {
      switch(v17)
      {
        case 0:
          v20 = *(_QWORD *)(v9 + v18);
          v21 = 0xCF1BBCDCBB000000 * v20;
          goto LABEL_11;
        case 1:
          v20 = *(_QWORD *)(v9 + v18);
          v21 = 0xCF1BBCDCBF9B0000 * v20;
          goto LABEL_11;
        case 2:
          v20 = *(_QWORD *)(v9 + v18);
          v21 = 0xCF1BBCDCBFA56300 * v20;
          goto LABEL_11;
        case 3:
          v20 = *(_QWORD *)(v9 + v18);
          v21 = 0xCF1BBCDCB7A56463 * v20;
LABEL_11:
          v22 = v21 >> result;
          break;
        default:
          v22 = (-1640531535 * *(_DWORD *)(v9 + v18)) >> v14;
          v20 = *(_QWORD *)(v9 + v18);
          break;
      }
      v23 = (0xCF1BBCDCB7A56463 * v20) >> v15;
      v24 = v23 >> 8;
      if (v18)
      {
        if (*(_DWORD *)(v4 + 4 * v24))
        {
          if (!a3)
            break;
          goto LABEL_18;
        }
      }
      else
      {
        *(_DWORD *)(v6 + ((v22 >> 6) & 0x3FFFFFFFFFFFFFCLL)) = v22 | (((_DWORD)v9 - (_DWORD)v7) << 8);
      }
      *(_DWORD *)(v4 + 4 * v24) = v19 + v23;
      if (!a3)
        break;
LABEL_18:
      v19 += 256;
      v25 = v18++ >= 2;
    }
    while (!v25);
    v26 = v9 + 5;
    v9 += 3;
    v16 += 768;
  }
  while (v26 <= v10);
  return result;
}

unint64_t sub_1D4B58AC4(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _BOOL4 v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  _BOOL4 v18;
  int v19;
  unsigned int v20;
  int64_t v21;
  int64_t v22;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  _DWORD *v48;
  uint64_t v49;
  _OWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _OWORD *v55;
  __int128 *v56;
  __int128 v57;
  char *v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  __int16 v72;
  unint64_t v73;
  int64_t v74;
  int64_t v75;
  unint64_t v76;
  int64_t v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  _OWORD *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  _DWORD *v92;
  unsigned __int8 *v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  BOOL v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  _DWORD *v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  _DWORD *v115;
  unsigned __int8 *v116;
  uint64_t v117;
  _OWORD *v118;
  int64_t v119;
  uint64_t v120;
  unint64_t v121;
  _OWORD *v122;
  __int128 *v123;
  __int128 v124;
  unint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  _BOOL4 v134;
  uint64_t v135;
  unint64_t v136;
  int v137;
  _BOOL4 v138;
  int v139;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  int v150;
  unint64_t v151;
  uint64_t v152;
  char *v156;
  _QWORD *v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  char *v161;
  _DWORD *v162;
  uint64_t v163;
  _OWORD *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  _OWORD *v169;
  __int128 *v170;
  __int128 v171;
  char *v172;
  _QWORD *v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  char *v177;
  _QWORD *v178;
  unint64_t v179;
  unint64_t v180;
  char *v181;
  _QWORD *v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  __int16 v186;
  unint64_t v187;
  int64_t v188;
  int64_t v189;
  unint64_t v190;
  uint64_t v191;
  char *v192;
  _QWORD *v193;
  unint64_t v194;
  unint64_t v195;
  _DWORD *v196;
  uint64_t v197;
  _OWORD *v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  _QWORD *v202;
  uint64_t v203;
  unint64_t v204;
  _DWORD *v205;
  unsigned __int8 *v206;
  unsigned __int8 *v207;
  unsigned __int8 *v208;
  unint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  unint64_t v212;
  _DWORD *v213;
  unsigned __int8 *v214;
  unsigned __int8 *v215;
  unsigned __int8 *v216;
  unint64_t v217;
  unint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  unint64_t v226;
  _DWORD *v227;
  unsigned __int8 *v228;
  uint64_t v229;
  _OWORD *v230;
  int64_t v231;
  uint64_t v232;
  unint64_t v233;
  _OWORD *v234;
  __int128 *v235;
  __int128 v236;
  unint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  _QWORD *v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unsigned int v244;
  unsigned int v245;
  _BOOL4 v246;
  uint64_t v247;
  unint64_t v248;
  int v249;
  _BOOL4 v250;
  int v251;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  uint64_t v257;
  unsigned int v258;
  unsigned int v259;
  _BOOL4 v260;
  uint64_t v261;
  unint64_t v262;
  unsigned int v263;
  unsigned int v264;
  int v265;
  _BOOL4 v266;
  int v267;
  unsigned int v268;
  int64_t v269;
  int64_t v270;
  int64_t v272;
  unsigned int v273;
  BOOL v274;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  _QWORD *v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  int v285;
  unint64_t v286;
  uint64_t v287;
  char *v291;
  _QWORD *v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  char *v296;
  _DWORD *v297;
  uint64_t v298;
  _OWORD *v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  unint64_t v303;
  _OWORD *v304;
  __int128 *v305;
  __int128 v306;
  char *v307;
  _QWORD *v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  char *v312;
  _QWORD *v313;
  unint64_t v314;
  unint64_t v315;
  char *v316;
  _QWORD *v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  __int16 v321;
  unint64_t v322;
  int64_t v323;
  int64_t v324;
  unint64_t v325;
  uint64_t v326;
  char *v327;
  _QWORD *v328;
  unint64_t v329;
  unint64_t v330;
  _DWORD *v331;
  uint64_t v332;
  _OWORD *v333;
  uint64_t v334;
  unint64_t v335;
  unint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  unint64_t v339;
  _DWORD *v340;
  unsigned __int8 *v341;
  unsigned __int8 *v342;
  unsigned __int8 *v343;
  unint64_t v344;
  _QWORD *v345;
  uint64_t v346;
  unint64_t v347;
  _DWORD *v348;
  unsigned __int8 *v349;
  unsigned __int8 *v350;
  unsigned __int8 *v351;
  unint64_t v352;
  unint64_t v353;
  _QWORD *v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  unint64_t v358;
  _QWORD *v359;
  uint64_t v360;
  unint64_t v361;
  _DWORD *v362;
  unsigned __int8 *v363;
  uint64_t v364;
  _OWORD *v365;
  int64_t v366;
  uint64_t v367;
  unint64_t v368;
  _OWORD *v369;
  __int128 *v370;
  __int128 v371;
  unint64_t v372;
  uint64_t v373;
  _QWORD *v374;
  _QWORD *v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  unint64_t v381;
  uint64_t v382;
  _QWORD *v383;
  unint64_t v384;
  unsigned int v385;
  uint64_t v386;
  int v387;
  unint64_t v388;
  uint64_t v389;
  char *v393;
  _QWORD *v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t v397;
  char *v398;
  _DWORD *v399;
  uint64_t v400;
  _OWORD *v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  unint64_t v405;
  _OWORD *v406;
  __int128 *v407;
  __int128 v408;
  char *v409;
  _QWORD *v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  char *v414;
  _QWORD *v415;
  unint64_t v416;
  unint64_t v417;
  char *v418;
  _QWORD *v419;
  unint64_t v420;
  unint64_t v421;
  unint64_t v422;
  __int16 v423;
  unint64_t v424;
  int64_t v425;
  int64_t v426;
  unint64_t v427;
  char *v428;
  _QWORD *v429;
  unint64_t v430;
  unint64_t v431;
  _DWORD *v432;
  _OWORD *v433;
  uint64_t v434;
  unint64_t v435;
  unint64_t v436;
  _QWORD *v437;
  uint64_t v438;
  unint64_t v439;
  _DWORD *v440;
  unsigned __int8 *v441;
  unsigned __int8 *v442;
  unsigned __int8 *v443;
  unint64_t v444;
  _QWORD *v445;
  uint64_t v446;
  unint64_t v447;
  _DWORD *v448;
  unsigned __int8 *v449;
  unint64_t v450;
  unint64_t v451;
  _QWORD *v452;
  uint64_t v453;
  unint64_t v454;
  uint64_t v455;
  unint64_t v456;
  _QWORD *v457;
  uint64_t v458;
  unint64_t v459;
  _DWORD *v460;
  unsigned __int8 *v461;
  uint64_t v462;
  _OWORD *v463;
  int64_t v464;
  uint64_t v465;
  unint64_t v466;
  _OWORD *v467;
  __int128 *v468;
  __int128 v469;
  unint64_t v470;
  uint64_t v471;
  _QWORD *v472;
  _QWORD *v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  unint64_t v488;
  unint64_t v489;
  unint64_t v490;
  unint64_t v491;
  unsigned int v492;
  unsigned int v493;
  unsigned int v494;
  int v495;
  unsigned int v496;
  unsigned int v497;
  unsigned int v498;
  unsigned int v499;
  unsigned int v500;
  unsigned int v501;
  unsigned int v502;
  unsigned int v503;
  unsigned int v504;
  unsigned int v505;
  unsigned int v506;
  unsigned int v507;
  unint64_t v508;
  unint64_t v509;
  unint64_t v510;
  unint64_t v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  unsigned int *v516;
  unsigned int *v517;
  unsigned int *v518;
  unsigned int *v519;
  unint64_t v520;
  unint64_t v521;
  unint64_t v522;
  unint64_t v523;
  char *v524;
  char *v525;
  char *v526;
  char *v527;
  unint64_t v528;
  unint64_t v529;
  unint64_t v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  int v536;
  int v537;
  int v538;
  int v539;
  int v540;
  int v541;
  int v542;
  int v543;

  v6 = *(_DWORD *)(a1 + 272);
  switch(v6)
  {
    case 5:
      v131 = *(_QWORD *)(a1 + 8);
      v8 = a4 + a5;
      v132 = 1 << *(_DWORD *)(a1 + 256);
      v133 = *(_DWORD *)(a1 + 24);
      v134 = *(_DWORD *)(a1 + 40) == 0;
      if (v134 && (_DWORD)v8 - (_DWORD)v131 - v133 > v132)
        v135 = (_DWORD)v8 - (_DWORD)v131 - v132;
      else
        v135 = v133;
      v136 = v8 - 8;
      v15 = *a3;
      v14 = a3[1];
      v489 = v131 + v135;
      if (v131 + v135 == a4)
        v16 = a4 + 1;
      else
        v16 = a4;
      v137 = v16 - v131;
      v138 = (_DWORD)v16 - (_DWORD)v131 - v133 > v132;
      v139 = v16 - v131 - v132;
      if (!v134 || !v138)
        v139 = *(_DWORD *)(a1 + 24);
      v20 = v137 - v139;
      if (v14 <= v137 - v139)
        v21 = v14;
      else
        v21 = 0;
      if (v15 <= v20)
        v22 = v15;
      else
        v22 = 0;
      _X8 = (_QWORD *)(v16 + 1);
      if (v16 + 1 <= v136)
      {
        v505 = v135;
        v141 = *(_QWORD *)(a1 + 112);
        v537 = 64 - *(_DWORD *)(a1 + 260);
        v541 = 64 - *(_DWORD *)(a1 + 264);
        v509 = v8 - 1;
        v513 = v8 - 3;
        v529 = v8;
        v533 = *(_QWORD *)(a1 + 128);
        v521 = v8 - 7;
        v525 = (char *)(v8 - 32);
        v481 = v131 + 12;
        v485 = v131 - 1;
        v477 = v131 + 16;
        v497 = *a3;
        v501 = a3[1];
        v493 = v20;
        v517 = a3;
        while (1)
        {
          v142 = v16 + 256;
          v143 = *(_QWORD *)v16;
          v144 = (0xCF1BBCDCB7A56463 * *(_QWORD *)v16) >> v541;
          v145 = *(unsigned int *)(v141 + 4 * v144);
          v146 = (_QWORD *)(v131 + v145);
          v147 = 1;
          while (1)
          {
            v148 = (0xCF1BBCDCBB000000 * v143) >> v537;
            v149 = *(unsigned int *)(v533 + 4 * v148);
            v150 = v16 - v131;
            *(_DWORD *)(v533 + 4 * v148) = v16 - v131;
            *(_DWORD *)(v141 + 4 * v144) = v16 - v131;
            if ((_DWORD)v22)
            {
              v151 = v16 + 1;
              if (*(_DWORD *)(v16 + 1 - v22) == *(_DWORD *)(v16 + 1))
              {
                v156 = (char *)(v16 + 5);
                v157 = (_QWORD *)(v16 + 5 - v22);
                v158 = v521;
                if (v521 <= v16 + 5)
                {
                  v162 = (_DWORD *)(v16 + 5);
                  v161 = v525;
                }
                else
                {
                  v159 = *(_QWORD *)v156 ^ *v157;
                  if (v159)
                  {
                    v160 = __clz(__rbit64(v159)) >> 3;
                    v161 = v525;
                    goto LABEL_234;
                  }
                  v209 = v16 + 13;
                  v161 = v525;
                  while (1)
                  {
                    v210 = (_QWORD *)(v209 + v159);
                    if (v209 + v159 >= v521)
                      break;
                    v211 = *(_QWORD *)(v16 + 13 - v22 + v159);
                    v159 += 8;
                    v212 = *v210 ^ v211;
                    if (v212)
                    {
                      v160 = v159 + (__clz(__rbit64(v212)) >> 3);
                      goto LABEL_234;
                    }
                  }
                  v162 = (_DWORD *)(v16 + v159 + 13);
                  v157 = (_QWORD *)((char *)v162 - v22);
                }
                if ((unint64_t)v162 < v513 && *(_DWORD *)v157 == *v162)
                {
                  ++v162;
                  v157 = (_QWORD *)((char *)v157 + 4);
                }
                if ((unint64_t)v162 < v509 && *(unsigned __int16 *)v157 == *(unsigned __int16 *)v162)
                {
                  v162 = (_DWORD *)((char *)v162 + 2);
                  v157 = (_QWORD *)((char *)v157 + 2);
                }
                if ((unint64_t)v162 < v8 && *(unsigned __int8 *)v157 == *(unsigned __int8 *)v162)
                  v162 = (_DWORD *)((char *)v162 + 1);
                v160 = (char *)v162 - v156;
LABEL_234:
                v163 = v151 - a4;
                v164 = *(_OWORD **)(a2 + 24);
                if (v151 > (unint64_t)v161)
                {
                  sub_1D4B56E1C(v164, (char *)a4, v151, v161);
                  goto LABEL_236;
                }
                *v164 = *(_OWORD *)a4;
                v167 = *(_QWORD *)(a2 + 24);
                if ((unint64_t)v163 <= 0x10)
                {
                  *(_QWORD *)(a2 + 24) = v167 + v163;
                  v165 = *(_QWORD *)(a2 + 8);
                }
                else
                {
                  *(_OWORD *)(v167 + 16) = *(_OWORD *)(a4 + 16);
                  if (v163 >= 33)
                  {
                    v168 = v167 + v163;
                    v169 = (_OWORD *)(v167 + 32);
                    v170 = (__int128 *)(a4 + 48);
                    do
                    {
                      *v169 = *(v170 - 1);
                      v171 = *v170;
                      v170 += 2;
                      v169[1] = v171;
                      v169 += 2;
                    }
                    while ((unint64_t)v169 < v168);
                  }
LABEL_236:
                  *(_QWORD *)(a2 + 24) += v163;
                  v165 = *(_QWORD *)(a2 + 8);
                  if ((unint64_t)v163 >= 0x10000)
                  {
                    v166 = (unint64_t)(v165 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 1;
                    *(_DWORD *)(a2 + 76) = v166;
                  }
                  v161 = v525;
                  v8 = v529;
                  v158 = v521;
                }
                v185 = v160 + 4;
                *(_WORD *)(v165 + 4) = v163;
                *(_DWORD *)v165 = 1;
                v186 = v160 + 1;
                v187 = (v160 + 1) >> 16;
                v188 = v22;
                v189 = v22;
                if (!v187)
                  goto LABEL_258;
LABEL_257:
                v190 = (unint64_t)(v165 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v190;
                v189 = v188;
                goto LABEL_258;
              }
            }
            v144 = (0xCF1BBCDCB7A56463 * *_X8) >> v541;
            if (v145 > v505 && *v146 == v143)
              break;
            v145 = *(unsigned int *)(v141 + 4 * v144);
            v146 = (_QWORD *)(v131 + v145);
            if (v149 > v505)
            {
              v152 = v131 + v149;
              if (*(_DWORD *)(v131 + v149) == *(_DWORD *)v16)
              {
                if (v145 > v505 && *v146 == *_X8)
                {
                  v177 = (char *)(_X8 + 1);
                  v178 = v146 + 1;
                  v158 = v521;
                  v161 = v525;
                  if (v521 <= (unint64_t)(_X8 + 1))
                  {
                    v227 = _X8 + 1;
                  }
                  else
                  {
                    v179 = *(_QWORD *)v177 ^ *v178;
                    if (v179)
                    {
                      v180 = __clz(__rbit64(v179)) >> 3;
                      goto LABEL_354;
                    }
                    v238 = 0;
                    v239 = _X8 + 2;
                    while (1)
                    {
                      v240 = &v239[v238];
                      if ((unint64_t)&v239[v238] >= v521)
                        break;
                      v241 = *(_QWORD *)(v477 + v145 + v238 * 8);
                      ++v238;
                      v242 = *v240 ^ v241;
                      if (v242)
                      {
                        v180 = v238 * 8 + (__clz(__rbit64(v242)) >> 3);
                        goto LABEL_354;
                      }
                    }
                    v227 = &_X8[v238 + 2];
                    v178 = (_QWORD *)(v477 + v145 + v238 * 8);
                  }
                  if ((unint64_t)v227 < v513 && *(_DWORD *)v178 == *v227)
                  {
                    ++v227;
                    v178 = (_QWORD *)((char *)v178 + 4);
                  }
                  if ((unint64_t)v227 < v509 && *(unsigned __int16 *)v178 == *(unsigned __int16 *)v227)
                  {
                    v227 = (_DWORD *)((char *)v227 + 2);
                    v178 = (_QWORD *)((char *)v178 + 2);
                  }
                  if ((unint64_t)v227 < v8 && *(unsigned __int8 *)v178 == *(unsigned __int8 *)v227)
                    v227 = (_DWORD *)((char *)v227 + 1);
                  v180 = (char *)v227 - v177;
LABEL_354:
                  v185 = v180 + 8;
                  v188 = (char *)_X8 - (char *)v146;
                  if ((unint64_t)_X8 <= a4)
                  {
                    v151 = (unint64_t)_X8;
                  }
                  else
                  {
                    v216 = (unsigned __int8 *)_X8 - 1;
                    v228 = (unsigned __int8 *)(v485 + v145);
                    while (*v216 == *v228)
                    {
                      ++v185;
                      v214 = v216 - 1;
                      if ((unint64_t)v216 > a4)
                      {
                        --v216;
                        v96 = (unint64_t)v228-- > v489;
                        if (v96)
                          continue;
                      }
                      goto LABEL_359;
                    }
LABEL_331:
                    v151 = (unint64_t)(v216 + 1);
                  }
                  goto LABEL_361;
                }
                v181 = (char *)(v16 + 4);
                v182 = (_QWORD *)(v152 + 4);
                v158 = v521;
                v161 = v525;
                if (v521 <= v16 + 4)
                {
                  v213 = (_DWORD *)(v16 + 4);
                }
                else
                {
                  v183 = *(_QWORD *)v181 ^ *v182;
                  if (v183)
                  {
                    v184 = __clz(__rbit64(v183)) >> 3;
LABEL_326:
                    v185 = v184 + 4;
                    v188 = v16 - v152;
                    if (v16 <= a4)
                    {
                      v151 = v16;
                    }
                    else
                    {
                      v214 = (unsigned __int8 *)(v16 - 1);
                      v215 = (unsigned __int8 *)(v485 + v149);
                      while (*v214 == *v215)
                      {
                        ++v185;
                        v216 = v214 - 1;
                        if ((unint64_t)v214 > a4)
                        {
                          --v214;
                          v96 = (unint64_t)v215-- > v489;
                          if (v96)
                            continue;
                        }
                        goto LABEL_331;
                      }
LABEL_359:
                      v151 = (unint64_t)(v214 + 1);
                    }
                    goto LABEL_361;
                  }
                  v222 = 0;
                  v223 = v16 + 12;
                  while (1)
                  {
                    v224 = (_QWORD *)(v223 + v222);
                    if (v223 + v222 >= v521)
                      break;
                    v225 = *(_QWORD *)(v481 + v149 + v222);
                    v222 += 8;
                    v226 = *v224 ^ v225;
                    if (v226)
                    {
                      v184 = v222 + (__clz(__rbit64(v226)) >> 3);
                      goto LABEL_326;
                    }
                  }
                  v213 = (_DWORD *)(v16 + v222 + 12);
                  v182 = (_QWORD *)(v481 + v149 + v222);
                }
                if ((unint64_t)v213 < v513 && *(_DWORD *)v182 == *v213)
                {
                  ++v213;
                  v182 = (_QWORD *)((char *)v182 + 4);
                }
                if ((unint64_t)v213 < v509 && *(unsigned __int16 *)v182 == *(unsigned __int16 *)v213)
                {
                  v213 = (_DWORD *)((char *)v213 + 2);
                  v182 = (_QWORD *)((char *)v182 + 2);
                }
                if ((unint64_t)v213 < v8 && *(unsigned __int8 *)v182 == *(unsigned __int8 *)v213)
                  v213 = (_DWORD *)((char *)v213 + 1);
                v184 = (char *)v213 - v181;
                goto LABEL_326;
              }
            }
            if ((unint64_t)_X8 >= v142)
            {
              __asm
              {
                PRFM            #0, [X8,#0x40]
                PRFM            #0, [X8,#0x80]
              }
              ++v147;
              v142 += 256;
            }
            __asm { PRFM            #0, [X8,#0x100] }
            v16 = (unint64_t)_X8;
            v143 = *_X8;
            _X8 = (_QWORD *)((char *)_X8 + v147);
            if ((unint64_t)_X8 > v136)
              goto LABEL_397;
          }
          v172 = (char *)(v16 + 8);
          v173 = v146 + 1;
          v158 = v521;
          if (v521 <= v16 + 8)
          {
            v205 = (_DWORD *)(v16 + 8);
            v175 = v489;
            v161 = v525;
            goto LABEL_293;
          }
          v174 = *(_QWORD *)v172 ^ *v173;
          v175 = v489;
          v161 = v525;
          if (v174)
          {
            v176 = __clz(__rbit64(v174)) >> 3;
            goto LABEL_303;
          }
          v217 = 0;
          v218 = v16 + 16;
          while (2)
          {
            v219 = (_QWORD *)(v218 + v217);
            if (v218 + v217 >= v521)
            {
              v205 = (_DWORD *)(v16 + v217 + 16);
              v173 = &v146[v217 / 8 + 2];
LABEL_293:
              if ((unint64_t)v205 < v513 && *(_DWORD *)v173 == *v205)
              {
                ++v205;
                v173 = (_QWORD *)((char *)v173 + 4);
              }
              if ((unint64_t)v205 < v509 && *(unsigned __int16 *)v173 == *(unsigned __int16 *)v205)
              {
                v205 = (_DWORD *)((char *)v205 + 2);
                v173 = (_QWORD *)((char *)v173 + 2);
              }
              if ((unint64_t)v205 < v8 && *(unsigned __int8 *)v173 == *(unsigned __int8 *)v205)
                v205 = (_DWORD *)((char *)v205 + 1);
              v176 = (char *)v205 - v172;
              goto LABEL_303;
            }
            v220 = v146[v217 / 8 + 2];
            v217 += 8;
            v221 = *v219 ^ v220;
            if (!v221)
              continue;
            break;
          }
          v176 = v217 + (__clz(__rbit64(v221)) >> 3);
LABEL_303:
          v185 = v176 + 8;
          v188 = v16 - (_QWORD)v146;
          if ((unint64_t)v146 <= v175 || v16 <= a4)
          {
            v151 = v16;
          }
          else
          {
            v206 = (unsigned __int8 *)(v16 - 1);
            v207 = (unsigned __int8 *)v146 - 1;
            while (*v206 == *v207)
            {
              ++v185;
              v208 = v206 - 1;
              if ((unint64_t)v206 > a4)
              {
                --v206;
                v96 = (unint64_t)v207-- > v175;
                if (v96)
                  continue;
              }
              v151 = (unint64_t)(v208 + 1);
              goto LABEL_361;
            }
            v151 = (unint64_t)(v206 + 1);
          }
LABEL_361:
          if (v147 <= 3)
            *(_DWORD *)(v141 + 4 * v144) = (_DWORD)_X8 - v131;
          v229 = v151 - a4;
          v230 = *(_OWORD **)(a2 + 24);
          if (v151 > (unint64_t)v161)
          {
            v231 = v188;
            sub_1D4B56E1C(v230, (char *)a4, v151, v161);
            v188 = v231;
            v158 = v521;
            v8 = v529;
            goto LABEL_369;
          }
          *v230 = *(_OWORD *)a4;
          v232 = *(_QWORD *)(a2 + 24);
          if ((unint64_t)v229 <= 0x10)
          {
            *(_QWORD *)(a2 + 24) = v232 + v229;
            v165 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            *(_OWORD *)(v232 + 16) = *(_OWORD *)(a4 + 16);
            if (v229 >= 33)
            {
              v233 = v232 + v229;
              v234 = (_OWORD *)(v232 + 32);
              v235 = (__int128 *)(a4 + 48);
              do
              {
                *v234 = *(v235 - 1);
                v236 = *v235;
                v235 += 2;
                v234[1] = v236;
                v234 += 2;
              }
              while ((unint64_t)v234 < v233);
            }
LABEL_369:
            *(_QWORD *)(a2 + 24) += v229;
            v165 = *(_QWORD *)(a2 + 8);
            if ((unint64_t)v229 >= 0x10000)
            {
              v237 = (unint64_t)(v165 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v237;
            }
            v161 = v525;
          }
          *(_WORD *)(v165 + 4) = v229;
          *(_DWORD *)v165 = v188 + 3;
          v186 = v185 - 3;
          v21 = v22;
          v189 = v188;
          if (v185 - 3 >= 0x10000)
            goto LABEL_257;
LABEL_258:
          *(_WORD *)(v165 + 6) = v186;
          *(_QWORD *)(a2 + 8) = v165 + 8;
          v16 = v151 + v185;
          if (v151 + v185 <= v136)
          {
            v191 = *(_QWORD *)(v131 + (v150 + 2));
            *(_DWORD *)(v141 + 4 * ((0xCF1BBCDCB7A56463 * v191) >> v541)) = v150 + 2;
            *(_DWORD *)(v141 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v16 - 2)) >> v541)) = v16 - 2 - v131;
            *(_DWORD *)(v533 + 4 * ((0xCF1BBCDCBB000000 * v191) >> v537)) = v150 + 2;
            *(_DWORD *)(v533 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v16 - 1)) >> v537)) = v16 - 1 - v131;
            while (1)
            {
              v77 = v189;
              v189 = v21;
              if (!(_DWORD)v21 || *(_DWORD *)v16 != *(_DWORD *)(v16 - v21))
                break;
              v192 = (char *)(v16 + 4);
              v193 = (_QWORD *)(v16 + 4 - v21);
              if (v158 <= v16 + 4)
              {
                v196 = (_DWORD *)(v16 + 4);
              }
              else
              {
                v194 = *(_QWORD *)v192 ^ *v193;
                if (v194)
                {
                  v195 = __clz(__rbit64(v194)) >> 3;
                  goto LABEL_277;
                }
                v201 = v16 + 12;
                while (1)
                {
                  v202 = (_QWORD *)(v201 + v194);
                  if (v201 + v194 >= v158)
                    break;
                  v203 = *(_QWORD *)(v16 + 12 - v21 + v194);
                  v194 += 8;
                  v204 = *v202 ^ v203;
                  if (v204)
                  {
                    v195 = v194 + (__clz(__rbit64(v204)) >> 3);
                    goto LABEL_277;
                  }
                }
                v196 = (_DWORD *)(v16 + v194 + 12);
                v193 = (_QWORD *)((char *)v196 - v21);
              }
              if ((unint64_t)v196 < v513 && *(_DWORD *)v193 == *v196)
              {
                ++v196;
                v193 = (_QWORD *)((char *)v193 + 4);
              }
              if ((unint64_t)v196 < v509 && *(unsigned __int16 *)v193 == *(unsigned __int16 *)v196)
              {
                v196 = (_DWORD *)((char *)v196 + 2);
                v193 = (_QWORD *)((char *)v193 + 2);
              }
              if ((unint64_t)v196 < v8 && *(unsigned __int8 *)v193 == *(unsigned __int8 *)v196)
                v196 = (_DWORD *)((char *)v196 + 1);
              v195 = (char *)v196 - v192;
LABEL_277:
              v197 = *(_QWORD *)v16;
              *(_DWORD *)(v533 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v16) >> v537)) = v16 - v131;
              *(_DWORD *)(v141 + 4 * ((0xCF1BBCDCB7A56463 * v197) >> v541)) = v16 - v131;
              v198 = *(_OWORD **)(a2 + 24);
              if (v16 <= (unint64_t)v161)
              {
                *v198 = *(_OWORD *)v16;
              }
              else
              {
                sub_1D4B56E1C(v198, (char *)v16, v16, v161);
                v158 = v521;
                v161 = v525;
                v8 = v529;
              }
              v199 = *(_QWORD *)(a2 + 8);
              *(_WORD *)(v199 + 4) = 0;
              *(_DWORD *)v199 = 1;
              if (v195 + 1 >= 0x10000)
              {
                v200 = (unint64_t)(v199 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v200;
              }
              *(_WORD *)(v199 + 6) = v195 + 1;
              *(_QWORD *)(a2 + 8) = v199 + 8;
              v16 += v195 + 4;
              v21 = v77;
              v22 = v189;
              if (v16 > v136)
                goto LABEL_290;
            }
            v22 = v77;
            v77 = v21;
          }
          else
          {
            v22 = v189;
            v77 = v21;
          }
LABEL_290:
          _X8 = (_QWORD *)(v16 + 1);
          a4 = v16;
          v21 = v77;
          a3 = v517;
          v15 = v497;
          v14 = v501;
          v20 = v493;
          if (v16 + 1 > v136)
            goto LABEL_398;
        }
      }
LABEL_397:
      LODWORD(v77) = v21;
      v16 = a4;
      goto LABEL_398;
    case 6:
      v243 = *(_QWORD *)(a1 + 8);
      v8 = a4 + a5;
      v244 = 1 << *(_DWORD *)(a1 + 256);
      v245 = *(_DWORD *)(a1 + 24);
      v246 = *(_DWORD *)(a1 + 40) == 0;
      if (v246 && (_DWORD)v8 - (_DWORD)v243 - v245 > v244)
        v247 = (_DWORD)v8 - (_DWORD)v243 - v244;
      else
        v247 = v245;
      v248 = v8 - 8;
      v15 = *a3;
      v14 = a3[1];
      v490 = v243 + v247;
      if (v243 + v247 == a4)
        v16 = a4 + 1;
      else
        v16 = a4;
      v249 = v16 - v243;
      v250 = (_DWORD)v16 - (_DWORD)v243 - v245 > v244;
      v251 = v16 - v243 - v244;
      if (!v246 || !v250)
        v251 = *(_DWORD *)(a1 + 24);
      v20 = v249 - v251;
      if (v14 <= v249 - v251)
        v21 = v14;
      else
        v21 = 0;
      if (v15 <= v20)
        v22 = v15;
      else
        v22 = 0;
      _X8 = (_QWORD *)(v16 + 1);
      if (v16 + 1 <= v248)
      {
        v506 = v247;
        v276 = *(_QWORD *)(a1 + 112);
        v538 = 64 - *(_DWORD *)(a1 + 260);
        v542 = 64 - *(_DWORD *)(a1 + 264);
        v510 = v8 - 1;
        v514 = v8 - 3;
        v530 = v8;
        v534 = *(_QWORD *)(a1 + 128);
        v522 = v8 - 7;
        v526 = (char *)(v8 - 32);
        v482 = v243 + 12;
        v486 = v243 - 1;
        v478 = v243 + 16;
        v498 = *a3;
        v502 = a3[1];
        v494 = v20;
        v518 = a3;
        while (1)
        {
          v277 = v16 + 256;
          v278 = *(_QWORD *)v16;
          v279 = (0xCF1BBCDCB7A56463 * *(_QWORD *)v16) >> v542;
          v280 = *(unsigned int *)(v276 + 4 * v279);
          v281 = (_QWORD *)(v243 + v280);
          v282 = 1;
          while (1)
          {
            v283 = (0xCF1BBCDCBF9B0000 * v278) >> v538;
            v284 = *(unsigned int *)(v534 + 4 * v283);
            v285 = v16 - v243;
            *(_DWORD *)(v534 + 4 * v283) = v16 - v243;
            *(_DWORD *)(v276 + 4 * v279) = v16 - v243;
            if ((_DWORD)v22)
            {
              v286 = v16 + 1;
              if (*(_DWORD *)(v16 + 1 - v22) == *(_DWORD *)(v16 + 1))
              {
                v291 = (char *)(v16 + 5);
                v292 = (_QWORD *)(v16 + 5 - v22);
                v293 = v522;
                if (v522 <= v16 + 5)
                {
                  v297 = (_DWORD *)(v16 + 5);
                  v296 = v526;
                }
                else
                {
                  v294 = *(_QWORD *)v291 ^ *v292;
                  if (v294)
                  {
                    v295 = __clz(__rbit64(v294)) >> 3;
                    v296 = v526;
                    goto LABEL_475;
                  }
                  v344 = v16 + 13;
                  v296 = v526;
                  while (1)
                  {
                    v345 = (_QWORD *)(v344 + v294);
                    if (v344 + v294 >= v522)
                      break;
                    v346 = *(_QWORD *)(v16 + 13 - v22 + v294);
                    v294 += 8;
                    v347 = *v345 ^ v346;
                    if (v347)
                    {
                      v295 = v294 + (__clz(__rbit64(v347)) >> 3);
                      goto LABEL_475;
                    }
                  }
                  v297 = (_DWORD *)(v16 + v294 + 13);
                  v292 = (_QWORD *)((char *)v297 - v22);
                }
                if ((unint64_t)v297 < v514 && *(_DWORD *)v292 == *v297)
                {
                  ++v297;
                  v292 = (_QWORD *)((char *)v292 + 4);
                }
                if ((unint64_t)v297 < v510 && *(unsigned __int16 *)v292 == *(unsigned __int16 *)v297)
                {
                  v297 = (_DWORD *)((char *)v297 + 2);
                  v292 = (_QWORD *)((char *)v292 + 2);
                }
                if ((unint64_t)v297 < v8 && *(unsigned __int8 *)v292 == *(unsigned __int8 *)v297)
                  v297 = (_DWORD *)((char *)v297 + 1);
                v295 = (char *)v297 - v291;
LABEL_475:
                v298 = v286 - a4;
                v299 = *(_OWORD **)(a2 + 24);
                if (v286 > (unint64_t)v296)
                {
                  sub_1D4B56E1C(v299, (char *)a4, v286, v296);
                  goto LABEL_477;
                }
                *v299 = *(_OWORD *)a4;
                v302 = *(_QWORD *)(a2 + 24);
                if ((unint64_t)v298 <= 0x10)
                {
                  *(_QWORD *)(a2 + 24) = v302 + v298;
                  v300 = *(_QWORD *)(a2 + 8);
                }
                else
                {
                  *(_OWORD *)(v302 + 16) = *(_OWORD *)(a4 + 16);
                  if (v298 >= 33)
                  {
                    v303 = v302 + v298;
                    v304 = (_OWORD *)(v302 + 32);
                    v305 = (__int128 *)(a4 + 48);
                    do
                    {
                      *v304 = *(v305 - 1);
                      v306 = *v305;
                      v305 += 2;
                      v304[1] = v306;
                      v304 += 2;
                    }
                    while ((unint64_t)v304 < v303);
                  }
LABEL_477:
                  *(_QWORD *)(a2 + 24) += v298;
                  v300 = *(_QWORD *)(a2 + 8);
                  if ((unint64_t)v298 >= 0x10000)
                  {
                    v301 = (unint64_t)(v300 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 1;
                    *(_DWORD *)(a2 + 76) = v301;
                  }
                  v296 = v526;
                  v8 = v530;
                  v293 = v522;
                }
                v320 = v295 + 4;
                *(_WORD *)(v300 + 4) = v298;
                *(_DWORD *)v300 = 1;
                v321 = v295 + 1;
                v322 = (v295 + 1) >> 16;
                v323 = v22;
                v324 = v22;
                if (!v322)
                  goto LABEL_499;
LABEL_498:
                v325 = (unint64_t)(v300 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v325;
                v324 = v323;
                goto LABEL_499;
              }
            }
            v279 = (0xCF1BBCDCB7A56463 * *_X8) >> v542;
            if (v280 > v506 && *v281 == v278)
              break;
            v280 = *(unsigned int *)(v276 + 4 * v279);
            v281 = (_QWORD *)(v243 + v280);
            if (v284 > v506)
            {
              v287 = v243 + v284;
              if (*(_DWORD *)(v243 + v284) == *(_DWORD *)v16)
              {
                if (v280 > v506 && *v281 == *_X8)
                {
                  v312 = (char *)(_X8 + 1);
                  v313 = v281 + 1;
                  v293 = v522;
                  v296 = v526;
                  if (v522 <= (unint64_t)(_X8 + 1))
                  {
                    v362 = _X8 + 1;
                  }
                  else
                  {
                    v314 = *(_QWORD *)v312 ^ *v313;
                    if (v314)
                    {
                      v315 = __clz(__rbit64(v314)) >> 3;
                      goto LABEL_595;
                    }
                    v373 = 0;
                    v374 = _X8 + 2;
                    while (1)
                    {
                      v375 = &v374[v373];
                      if ((unint64_t)&v374[v373] >= v522)
                        break;
                      v376 = *(_QWORD *)(v478 + v280 + v373 * 8);
                      ++v373;
                      v377 = *v375 ^ v376;
                      if (v377)
                      {
                        v315 = v373 * 8 + (__clz(__rbit64(v377)) >> 3);
                        goto LABEL_595;
                      }
                    }
                    v362 = &_X8[v373 + 2];
                    v313 = (_QWORD *)(v478 + v280 + v373 * 8);
                  }
                  if ((unint64_t)v362 < v514 && *(_DWORD *)v313 == *v362)
                  {
                    ++v362;
                    v313 = (_QWORD *)((char *)v313 + 4);
                  }
                  if ((unint64_t)v362 < v510 && *(unsigned __int16 *)v313 == *(unsigned __int16 *)v362)
                  {
                    v362 = (_DWORD *)((char *)v362 + 2);
                    v313 = (_QWORD *)((char *)v313 + 2);
                  }
                  if ((unint64_t)v362 < v8 && *(unsigned __int8 *)v313 == *(unsigned __int8 *)v362)
                    v362 = (_DWORD *)((char *)v362 + 1);
                  v315 = (char *)v362 - v312;
LABEL_595:
                  v320 = v315 + 8;
                  v323 = (char *)_X8 - (char *)v281;
                  if ((unint64_t)_X8 <= a4)
                  {
                    v286 = (unint64_t)_X8;
                  }
                  else
                  {
                    v351 = (unsigned __int8 *)_X8 - 1;
                    v363 = (unsigned __int8 *)(v486 + v280);
                    while (*v351 == *v363)
                    {
                      ++v320;
                      v349 = v351 - 1;
                      if ((unint64_t)v351 > a4)
                      {
                        --v351;
                        v96 = (unint64_t)v363-- > v490;
                        if (v96)
                          continue;
                      }
                      goto LABEL_600;
                    }
LABEL_572:
                    v286 = (unint64_t)(v351 + 1);
                  }
                  goto LABEL_602;
                }
                v316 = (char *)(v16 + 4);
                v317 = (_QWORD *)(v287 + 4);
                v293 = v522;
                v296 = v526;
                if (v522 <= v16 + 4)
                {
                  v348 = (_DWORD *)(v16 + 4);
                }
                else
                {
                  v318 = *(_QWORD *)v316 ^ *v317;
                  if (v318)
                  {
                    v319 = __clz(__rbit64(v318)) >> 3;
LABEL_567:
                    v320 = v319 + 4;
                    v323 = v16 - v287;
                    if (v16 <= a4)
                    {
                      v286 = v16;
                    }
                    else
                    {
                      v349 = (unsigned __int8 *)(v16 - 1);
                      v350 = (unsigned __int8 *)(v486 + v284);
                      while (*v349 == *v350)
                      {
                        ++v320;
                        v351 = v349 - 1;
                        if ((unint64_t)v349 > a4)
                        {
                          --v349;
                          v96 = (unint64_t)v350-- > v490;
                          if (v96)
                            continue;
                        }
                        goto LABEL_572;
                      }
LABEL_600:
                      v286 = (unint64_t)(v349 + 1);
                    }
                    goto LABEL_602;
                  }
                  v357 = 0;
                  v358 = v16 + 12;
                  while (1)
                  {
                    v359 = (_QWORD *)(v358 + v357);
                    if (v358 + v357 >= v522)
                      break;
                    v360 = *(_QWORD *)(v482 + v284 + v357);
                    v357 += 8;
                    v361 = *v359 ^ v360;
                    if (v361)
                    {
                      v319 = v357 + (__clz(__rbit64(v361)) >> 3);
                      goto LABEL_567;
                    }
                  }
                  v348 = (_DWORD *)(v16 + v357 + 12);
                  v317 = (_QWORD *)(v482 + v284 + v357);
                }
                if ((unint64_t)v348 < v514 && *(_DWORD *)v317 == *v348)
                {
                  ++v348;
                  v317 = (_QWORD *)((char *)v317 + 4);
                }
                if ((unint64_t)v348 < v510 && *(unsigned __int16 *)v317 == *(unsigned __int16 *)v348)
                {
                  v348 = (_DWORD *)((char *)v348 + 2);
                  v317 = (_QWORD *)((char *)v317 + 2);
                }
                if ((unint64_t)v348 < v8 && *(unsigned __int8 *)v317 == *(unsigned __int8 *)v348)
                  v348 = (_DWORD *)((char *)v348 + 1);
                v319 = (char *)v348 - v316;
                goto LABEL_567;
              }
            }
            if ((unint64_t)_X8 >= v277)
            {
              __asm
              {
                PRFM            #0, [X8,#0x40]
                PRFM            #0, [X8,#0x80]
              }
              ++v282;
              v277 += 256;
            }
            __asm { PRFM            #0, [X8,#0x100] }
            v16 = (unint64_t)_X8;
            v278 = *_X8;
            _X8 = (_QWORD *)((char *)_X8 + v282);
            if ((unint64_t)_X8 > v248)
              goto LABEL_397;
          }
          v307 = (char *)(v16 + 8);
          v308 = v281 + 1;
          v293 = v522;
          if (v522 <= v16 + 8)
          {
            v340 = (_DWORD *)(v16 + 8);
            v310 = v490;
            v296 = v526;
            goto LABEL_534;
          }
          v309 = *(_QWORD *)v307 ^ *v308;
          v310 = v490;
          v296 = v526;
          if (v309)
          {
            v311 = __clz(__rbit64(v309)) >> 3;
            goto LABEL_544;
          }
          v352 = 0;
          v353 = v16 + 16;
          while (2)
          {
            v354 = (_QWORD *)(v353 + v352);
            if (v353 + v352 >= v522)
            {
              v340 = (_DWORD *)(v16 + v352 + 16);
              v308 = &v281[v352 / 8 + 2];
LABEL_534:
              if ((unint64_t)v340 < v514 && *(_DWORD *)v308 == *v340)
              {
                ++v340;
                v308 = (_QWORD *)((char *)v308 + 4);
              }
              if ((unint64_t)v340 < v510 && *(unsigned __int16 *)v308 == *(unsigned __int16 *)v340)
              {
                v340 = (_DWORD *)((char *)v340 + 2);
                v308 = (_QWORD *)((char *)v308 + 2);
              }
              if ((unint64_t)v340 < v8 && *(unsigned __int8 *)v308 == *(unsigned __int8 *)v340)
                v340 = (_DWORD *)((char *)v340 + 1);
              v311 = (char *)v340 - v307;
              goto LABEL_544;
            }
            v355 = v281[v352 / 8 + 2];
            v352 += 8;
            v356 = *v354 ^ v355;
            if (!v356)
              continue;
            break;
          }
          v311 = v352 + (__clz(__rbit64(v356)) >> 3);
LABEL_544:
          v320 = v311 + 8;
          v323 = v16 - (_QWORD)v281;
          if ((unint64_t)v281 <= v310 || v16 <= a4)
          {
            v286 = v16;
          }
          else
          {
            v341 = (unsigned __int8 *)(v16 - 1);
            v342 = (unsigned __int8 *)v281 - 1;
            while (*v341 == *v342)
            {
              ++v320;
              v343 = v341 - 1;
              if ((unint64_t)v341 > a4)
              {
                --v341;
                v96 = (unint64_t)v342-- > v310;
                if (v96)
                  continue;
              }
              v286 = (unint64_t)(v343 + 1);
              goto LABEL_602;
            }
            v286 = (unint64_t)(v341 + 1);
          }
LABEL_602:
          if (v282 <= 3)
            *(_DWORD *)(v276 + 4 * v279) = (_DWORD)_X8 - v243;
          v364 = v286 - a4;
          v365 = *(_OWORD **)(a2 + 24);
          if (v286 > (unint64_t)v296)
          {
            v366 = v323;
            sub_1D4B56E1C(v365, (char *)a4, v286, v296);
            v323 = v366;
            v293 = v522;
            v8 = v530;
            goto LABEL_610;
          }
          *v365 = *(_OWORD *)a4;
          v367 = *(_QWORD *)(a2 + 24);
          if ((unint64_t)v364 <= 0x10)
          {
            *(_QWORD *)(a2 + 24) = v367 + v364;
            v300 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            *(_OWORD *)(v367 + 16) = *(_OWORD *)(a4 + 16);
            if (v364 >= 33)
            {
              v368 = v367 + v364;
              v369 = (_OWORD *)(v367 + 32);
              v370 = (__int128 *)(a4 + 48);
              do
              {
                *v369 = *(v370 - 1);
                v371 = *v370;
                v370 += 2;
                v369[1] = v371;
                v369 += 2;
              }
              while ((unint64_t)v369 < v368);
            }
LABEL_610:
            *(_QWORD *)(a2 + 24) += v364;
            v300 = *(_QWORD *)(a2 + 8);
            if ((unint64_t)v364 >= 0x10000)
            {
              v372 = (unint64_t)(v300 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v372;
            }
            v296 = v526;
          }
          *(_WORD *)(v300 + 4) = v364;
          *(_DWORD *)v300 = v323 + 3;
          v321 = v320 - 3;
          v21 = v22;
          v324 = v323;
          if (v320 - 3 >= 0x10000)
            goto LABEL_498;
LABEL_499:
          *(_WORD *)(v300 + 6) = v321;
          *(_QWORD *)(a2 + 8) = v300 + 8;
          v16 = v286 + v320;
          if (v286 + v320 <= v248)
          {
            v326 = *(_QWORD *)(v243 + (v285 + 2));
            *(_DWORD *)(v276 + 4 * ((0xCF1BBCDCB7A56463 * v326) >> v542)) = v285 + 2;
            *(_DWORD *)(v276 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v16 - 2)) >> v542)) = v16 - 2 - v243;
            *(_DWORD *)(v534 + 4 * ((0xCF1BBCDCBF9B0000 * v326) >> v538)) = v285 + 2;
            *(_DWORD *)(v534 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v16 - 1)) >> v538)) = v16 - 1 - v243;
            while (1)
            {
              v77 = v324;
              v324 = v21;
              if (!(_DWORD)v21 || *(_DWORD *)v16 != *(_DWORD *)(v16 - v21))
                break;
              v327 = (char *)(v16 + 4);
              v328 = (_QWORD *)(v16 + 4 - v21);
              if (v293 <= v16 + 4)
              {
                v331 = (_DWORD *)(v16 + 4);
              }
              else
              {
                v329 = *(_QWORD *)v327 ^ *v328;
                if (v329)
                {
                  v330 = __clz(__rbit64(v329)) >> 3;
                  goto LABEL_518;
                }
                v336 = v16 + 12;
                while (1)
                {
                  v337 = (_QWORD *)(v336 + v329);
                  if (v336 + v329 >= v293)
                    break;
                  v338 = *(_QWORD *)(v16 + 12 - v21 + v329);
                  v329 += 8;
                  v339 = *v337 ^ v338;
                  if (v339)
                  {
                    v330 = v329 + (__clz(__rbit64(v339)) >> 3);
                    goto LABEL_518;
                  }
                }
                v331 = (_DWORD *)(v16 + v329 + 12);
                v328 = (_QWORD *)((char *)v331 - v21);
              }
              if ((unint64_t)v331 < v514 && *(_DWORD *)v328 == *v331)
              {
                ++v331;
                v328 = (_QWORD *)((char *)v328 + 4);
              }
              if ((unint64_t)v331 < v510 && *(unsigned __int16 *)v328 == *(unsigned __int16 *)v331)
              {
                v331 = (_DWORD *)((char *)v331 + 2);
                v328 = (_QWORD *)((char *)v328 + 2);
              }
              if ((unint64_t)v331 < v8 && *(unsigned __int8 *)v328 == *(unsigned __int8 *)v331)
                v331 = (_DWORD *)((char *)v331 + 1);
              v330 = (char *)v331 - v327;
LABEL_518:
              v332 = *(_QWORD *)v16;
              *(_DWORD *)(v534 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v16) >> v538)) = v16 - v243;
              *(_DWORD *)(v276 + 4 * ((0xCF1BBCDCB7A56463 * v332) >> v542)) = v16 - v243;
              v333 = *(_OWORD **)(a2 + 24);
              if (v16 <= (unint64_t)v296)
              {
                *v333 = *(_OWORD *)v16;
              }
              else
              {
                sub_1D4B56E1C(v333, (char *)v16, v16, v296);
                v293 = v522;
                v296 = v526;
                v8 = v530;
              }
              v334 = *(_QWORD *)(a2 + 8);
              *(_WORD *)(v334 + 4) = 0;
              *(_DWORD *)v334 = 1;
              if (v330 + 1 >= 0x10000)
              {
                v335 = (unint64_t)(v334 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v335;
              }
              *(_WORD *)(v334 + 6) = v330 + 1;
              *(_QWORD *)(a2 + 8) = v334 + 8;
              v16 += v330 + 4;
              v21 = v77;
              v22 = v324;
              if (v16 > v248)
                goto LABEL_531;
            }
            v22 = v77;
            v77 = v21;
          }
          else
          {
            v22 = v324;
            v77 = v21;
          }
LABEL_531:
          _X8 = (_QWORD *)(v16 + 1);
          a4 = v16;
          v21 = v77;
          a3 = v518;
          v15 = v498;
          v14 = v502;
          v20 = v494;
          if (v16 + 1 > v248)
            goto LABEL_398;
        }
      }
      goto LABEL_397;
    case 7:
      v7 = *(_QWORD *)(a1 + 8);
      v8 = a4 + a5;
      v9 = 1 << *(_DWORD *)(a1 + 256);
      v10 = *(_DWORD *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 40) == 0;
      if (v11 && (_DWORD)v8 - (_DWORD)v7 - v10 > v9)
        v12 = (_DWORD)v8 - (_DWORD)v7 - v9;
      else
        v12 = v10;
      v13 = v8 - 8;
      v15 = *a3;
      v14 = a3[1];
      v488 = v7 + v12;
      if (v7 + v12 == a4)
        v16 = a4 + 1;
      else
        v16 = a4;
      v17 = v16 - v7;
      v18 = (_DWORD)v16 - (_DWORD)v7 - v10 > v9;
      v19 = v16 - v7 - v9;
      if (!v11 || !v18)
        v19 = *(_DWORD *)(a1 + 24);
      v20 = v17 - v19;
      if (v14 <= v17 - v19)
        v21 = v14;
      else
        v21 = 0;
      if (v15 <= v20)
        v22 = v15;
      else
        v22 = 0;
      _X8 = (_QWORD *)(v16 + 1);
      if (v16 + 1 <= v13)
      {
        v504 = v12;
        v24 = *(_QWORD *)(a1 + 112);
        v536 = 64 - *(_DWORD *)(a1 + 260);
        v540 = 64 - *(_DWORD *)(a1 + 264);
        v508 = v8 - 1;
        v512 = v8 - 3;
        v528 = v8;
        v532 = *(_QWORD *)(a1 + 128);
        v520 = v8 - 7;
        v524 = (char *)(v8 - 32);
        v480 = v7 + 12;
        v484 = v7 - 1;
        v476 = v7 + 16;
        v496 = *a3;
        v500 = a3[1];
        v492 = v20;
        v516 = a3;
        while (1)
        {
          v25 = v16 + 256;
          v26 = *(_QWORD *)v16;
          v27 = (0xCF1BBCDCB7A56463 * *(_QWORD *)v16) >> v540;
          v28 = *(unsigned int *)(v24 + 4 * v27);
          v29 = (_QWORD *)(v7 + v28);
          v30 = 1;
          while (1)
          {
            v31 = (0xCF1BBCDCBFA56300 * v26) >> v536;
            v32 = *(unsigned int *)(v532 + 4 * v31);
            v33 = v16 - v7;
            *(_DWORD *)(v532 + 4 * v31) = v16 - v7;
            *(_DWORD *)(v24 + 4 * v27) = v16 - v7;
            if ((_DWORD)v22)
            {
              v34 = v16 + 1;
              if (*(_DWORD *)(v16 + 1 - v22) == *(_DWORD *)(v16 + 1))
              {
                v42 = (char *)(v16 + 5);
                v43 = (_QWORD *)(v16 + 5 - v22);
                v44 = v520;
                if (v520 <= v16 + 5)
                {
                  v48 = (_DWORD *)(v16 + 5);
                  v47 = v524;
                }
                else
                {
                  v45 = *(_QWORD *)v42 ^ *v43;
                  if (v45)
                  {
                    v46 = __clz(__rbit64(v45)) >> 3;
                    v47 = v524;
                    goto LABEL_45;
                  }
                  v97 = v16 + 13;
                  v47 = v524;
                  while (1)
                  {
                    v98 = (_QWORD *)(v97 + v45);
                    if (v97 + v45 >= v520)
                      break;
                    v99 = *(_QWORD *)(v16 + 13 - v22 + v45);
                    v45 += 8;
                    v100 = *v98 ^ v99;
                    if (v100)
                    {
                      v46 = v45 + (__clz(__rbit64(v100)) >> 3);
                      goto LABEL_45;
                    }
                  }
                  v48 = (_DWORD *)(v16 + v45 + 13);
                  v43 = (_QWORD *)((char *)v48 - v22);
                }
                if ((unint64_t)v48 < v512 && *(_DWORD *)v43 == *v48)
                {
                  ++v48;
                  v43 = (_QWORD *)((char *)v43 + 4);
                }
                if ((unint64_t)v48 < v508 && *(unsigned __int16 *)v43 == *(unsigned __int16 *)v48)
                {
                  v48 = (_DWORD *)((char *)v48 + 2);
                  v43 = (_QWORD *)((char *)v43 + 2);
                }
                if ((unint64_t)v48 < v8 && *(unsigned __int8 *)v43 == *(unsigned __int8 *)v48)
                  v48 = (_DWORD *)((char *)v48 + 1);
                v46 = (char *)v48 - v42;
LABEL_45:
                v49 = v34 - a4;
                v50 = *(_OWORD **)(a2 + 24);
                if (v34 > (unint64_t)v47)
                {
                  sub_1D4B56E1C(v50, (char *)a4, v34, v47);
                  goto LABEL_47;
                }
                *v50 = *(_OWORD *)a4;
                v53 = *(_QWORD *)(a2 + 24);
                if ((unint64_t)v49 <= 0x10)
                {
                  *(_QWORD *)(a2 + 24) = v53 + v49;
                  v51 = *(_QWORD *)(a2 + 8);
                }
                else
                {
                  *(_OWORD *)(v53 + 16) = *(_OWORD *)(a4 + 16);
                  if (v49 >= 33)
                  {
                    v54 = v53 + v49;
                    v55 = (_OWORD *)(v53 + 32);
                    v56 = (__int128 *)(a4 + 48);
                    do
                    {
                      *v55 = *(v56 - 1);
                      v57 = *v56;
                      v56 += 2;
                      v55[1] = v57;
                      v55 += 2;
                    }
                    while ((unint64_t)v55 < v54);
                  }
LABEL_47:
                  *(_QWORD *)(a2 + 24) += v49;
                  v51 = *(_QWORD *)(a2 + 8);
                  if ((unint64_t)v49 >= 0x10000)
                  {
                    v52 = (unint64_t)(v51 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 1;
                    *(_DWORD *)(a2 + 76) = v52;
                  }
                  v47 = v524;
                  v8 = v528;
                  v44 = v520;
                }
                v71 = v46 + 4;
                *(_WORD *)(v51 + 4) = v49;
                *(_DWORD *)v51 = 1;
                v72 = v46 + 1;
                v73 = (v46 + 1) >> 16;
                v74 = v22;
                v75 = v22;
                if (!v73)
                  goto LABEL_69;
LABEL_68:
                v76 = (unint64_t)(v51 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v76;
                v75 = v74;
                goto LABEL_69;
              }
            }
            v27 = (0xCF1BBCDCB7A56463 * *_X8) >> v540;
            if (v28 > v504 && *v29 == v26)
              break;
            v28 = *(unsigned int *)(v24 + 4 * v27);
            v29 = (_QWORD *)(v7 + v28);
            if (v32 > v504)
            {
              v35 = v7 + v32;
              if (*(_DWORD *)(v7 + v32) == *(_DWORD *)v16)
              {
                if (v28 > v504 && *v29 == *_X8)
                {
                  v63 = (char *)(_X8 + 1);
                  v64 = v29 + 1;
                  v44 = v520;
                  v47 = v524;
                  if (v520 <= (unint64_t)(_X8 + 1))
                  {
                    v115 = _X8 + 1;
                  }
                  else
                  {
                    v65 = *(_QWORD *)v63 ^ *v64;
                    if (v65)
                    {
                      v66 = __clz(__rbit64(v65)) >> 3;
                      goto LABEL_165;
                    }
                    v126 = 0;
                    v127 = _X8 + 2;
                    while (1)
                    {
                      v128 = &v127[v126];
                      if ((unint64_t)&v127[v126] >= v520)
                        break;
                      v129 = *(_QWORD *)(v476 + v28 + v126 * 8);
                      ++v126;
                      v130 = *v128 ^ v129;
                      if (v130)
                      {
                        v66 = v126 * 8 + (__clz(__rbit64(v130)) >> 3);
                        goto LABEL_165;
                      }
                    }
                    v115 = &_X8[v126 + 2];
                    v64 = (_QWORD *)(v476 + v28 + v126 * 8);
                  }
                  if ((unint64_t)v115 < v512 && *(_DWORD *)v64 == *v115)
                  {
                    ++v115;
                    v64 = (_QWORD *)((char *)v64 + 4);
                  }
                  if ((unint64_t)v115 < v508 && *(unsigned __int16 *)v64 == *(unsigned __int16 *)v115)
                  {
                    v115 = (_DWORD *)((char *)v115 + 2);
                    v64 = (_QWORD *)((char *)v64 + 2);
                  }
                  if ((unint64_t)v115 < v8 && *(unsigned __int8 *)v64 == *(unsigned __int8 *)v115)
                    v115 = (_DWORD *)((char *)v115 + 1);
                  v66 = (char *)v115 - v63;
LABEL_165:
                  v71 = v66 + 8;
                  v74 = (char *)_X8 - (char *)v29;
                  if ((unint64_t)_X8 <= a4)
                  {
                    v34 = (unint64_t)_X8;
                  }
                  else
                  {
                    v104 = (unsigned __int8 *)_X8 - 1;
                    v116 = (unsigned __int8 *)(v484 + v28);
                    while (*v104 == *v116)
                    {
                      ++v71;
                      v102 = v104 - 1;
                      if ((unint64_t)v104 > a4)
                      {
                        --v104;
                        v96 = (unint64_t)v116-- > v488;
                        if (v96)
                          continue;
                      }
                      goto LABEL_170;
                    }
LABEL_142:
                    v34 = (unint64_t)(v104 + 1);
                  }
                  goto LABEL_172;
                }
                v67 = (char *)(v16 + 4);
                v68 = (_QWORD *)(v35 + 4);
                v44 = v520;
                v47 = v524;
                if (v520 <= v16 + 4)
                {
                  v101 = (_DWORD *)(v16 + 4);
                }
                else
                {
                  v69 = *(_QWORD *)v67 ^ *v68;
                  if (v69)
                  {
                    v70 = __clz(__rbit64(v69)) >> 3;
LABEL_137:
                    v71 = v70 + 4;
                    v74 = v16 - v35;
                    if (v16 <= a4)
                    {
                      v34 = v16;
                    }
                    else
                    {
                      v102 = (unsigned __int8 *)(v16 - 1);
                      v103 = (unsigned __int8 *)(v484 + v32);
                      while (*v102 == *v103)
                      {
                        ++v71;
                        v104 = v102 - 1;
                        if ((unint64_t)v102 > a4)
                        {
                          --v102;
                          v96 = (unint64_t)v103-- > v488;
                          if (v96)
                            continue;
                        }
                        goto LABEL_142;
                      }
LABEL_170:
                      v34 = (unint64_t)(v102 + 1);
                    }
                    goto LABEL_172;
                  }
                  v110 = 0;
                  v111 = v16 + 12;
                  while (1)
                  {
                    v112 = (_QWORD *)(v111 + v110);
                    if (v111 + v110 >= v520)
                      break;
                    v113 = *(_QWORD *)(v480 + v32 + v110);
                    v110 += 8;
                    v114 = *v112 ^ v113;
                    if (v114)
                    {
                      v70 = v110 + (__clz(__rbit64(v114)) >> 3);
                      goto LABEL_137;
                    }
                  }
                  v101 = (_DWORD *)(v16 + v110 + 12);
                  v68 = (_QWORD *)(v480 + v32 + v110);
                }
                if ((unint64_t)v101 < v512 && *(_DWORD *)v68 == *v101)
                {
                  ++v101;
                  v68 = (_QWORD *)((char *)v68 + 4);
                }
                if ((unint64_t)v101 < v508 && *(unsigned __int16 *)v68 == *(unsigned __int16 *)v101)
                {
                  v101 = (_DWORD *)((char *)v101 + 2);
                  v68 = (_QWORD *)((char *)v68 + 2);
                }
                if ((unint64_t)v101 < v8 && *(unsigned __int8 *)v68 == *(unsigned __int8 *)v101)
                  v101 = (_DWORD *)((char *)v101 + 1);
                v70 = (char *)v101 - v67;
                goto LABEL_137;
              }
            }
            if ((unint64_t)_X8 >= v25)
            {
              __asm
              {
                PRFM            #0, [X8,#0x40]
                PRFM            #0, [X8,#0x80]
              }
              ++v30;
              v25 += 256;
            }
            __asm { PRFM            #0, [X8,#0x100] }
            v16 = (unint64_t)_X8;
            v26 = *_X8;
            _X8 = (_QWORD *)((char *)_X8 + v30);
            if ((unint64_t)_X8 > v13)
              goto LABEL_397;
          }
          v58 = (char *)(v16 + 8);
          v59 = v29 + 1;
          v44 = v520;
          if (v520 <= v16 + 8)
          {
            v92 = (_DWORD *)(v16 + 8);
            v61 = v488;
            v47 = v524;
            goto LABEL_104;
          }
          v60 = *(_QWORD *)v58 ^ *v59;
          v61 = v488;
          v47 = v524;
          if (v60)
          {
            v62 = __clz(__rbit64(v60)) >> 3;
            goto LABEL_114;
          }
          v105 = 0;
          v106 = v16 + 16;
          while (2)
          {
            v107 = (_QWORD *)(v106 + v105);
            if (v106 + v105 >= v520)
            {
              v92 = (_DWORD *)(v16 + v105 + 16);
              v59 = &v29[v105 / 8 + 2];
LABEL_104:
              if ((unint64_t)v92 < v512 && *(_DWORD *)v59 == *v92)
              {
                ++v92;
                v59 = (_QWORD *)((char *)v59 + 4);
              }
              if ((unint64_t)v92 < v508 && *(unsigned __int16 *)v59 == *(unsigned __int16 *)v92)
              {
                v92 = (_DWORD *)((char *)v92 + 2);
                v59 = (_QWORD *)((char *)v59 + 2);
              }
              if ((unint64_t)v92 < v8 && *(unsigned __int8 *)v59 == *(unsigned __int8 *)v92)
                v92 = (_DWORD *)((char *)v92 + 1);
              v62 = (char *)v92 - v58;
              goto LABEL_114;
            }
            v108 = v29[v105 / 8 + 2];
            v105 += 8;
            v109 = *v107 ^ v108;
            if (!v109)
              continue;
            break;
          }
          v62 = v105 + (__clz(__rbit64(v109)) >> 3);
LABEL_114:
          v71 = v62 + 8;
          v74 = v16 - (_QWORD)v29;
          if ((unint64_t)v29 <= v61 || v16 <= a4)
          {
            v34 = v16;
          }
          else
          {
            v93 = (unsigned __int8 *)(v16 - 1);
            v94 = (unsigned __int8 *)v29 - 1;
            while (*v93 == *v94)
            {
              ++v71;
              v95 = v93 - 1;
              if ((unint64_t)v93 > a4)
              {
                --v93;
                v96 = (unint64_t)v94-- > v61;
                if (v96)
                  continue;
              }
              v34 = (unint64_t)(v95 + 1);
              goto LABEL_172;
            }
            v34 = (unint64_t)(v93 + 1);
          }
LABEL_172:
          if (v30 <= 3)
            *(_DWORD *)(v24 + 4 * v27) = (_DWORD)_X8 - v7;
          v117 = v34 - a4;
          v118 = *(_OWORD **)(a2 + 24);
          if (v34 > (unint64_t)v47)
          {
            v119 = v74;
            sub_1D4B56E1C(v118, (char *)a4, v34, v47);
            v74 = v119;
            v44 = v520;
            v8 = v528;
            goto LABEL_180;
          }
          *v118 = *(_OWORD *)a4;
          v120 = *(_QWORD *)(a2 + 24);
          if ((unint64_t)v117 <= 0x10)
          {
            *(_QWORD *)(a2 + 24) = v120 + v117;
            v51 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            *(_OWORD *)(v120 + 16) = *(_OWORD *)(a4 + 16);
            if (v117 >= 33)
            {
              v121 = v120 + v117;
              v122 = (_OWORD *)(v120 + 32);
              v123 = (__int128 *)(a4 + 48);
              do
              {
                *v122 = *(v123 - 1);
                v124 = *v123;
                v123 += 2;
                v122[1] = v124;
                v122 += 2;
              }
              while ((unint64_t)v122 < v121);
            }
LABEL_180:
            *(_QWORD *)(a2 + 24) += v117;
            v51 = *(_QWORD *)(a2 + 8);
            if ((unint64_t)v117 >= 0x10000)
            {
              v125 = (unint64_t)(v51 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v125;
            }
            v47 = v524;
          }
          *(_WORD *)(v51 + 4) = v117;
          *(_DWORD *)v51 = v74 + 3;
          v72 = v71 - 3;
          v21 = v22;
          v75 = v74;
          if (v71 - 3 >= 0x10000)
            goto LABEL_68;
LABEL_69:
          *(_WORD *)(v51 + 6) = v72;
          *(_QWORD *)(a2 + 8) = v51 + 8;
          v16 = v34 + v71;
          if (v34 + v71 > v13)
          {
            v22 = v75;
            v77 = v21;
            goto LABEL_101;
          }
          v78 = *(_QWORD *)(v7 + (v33 + 2));
          *(_DWORD *)(v24 + 4 * ((0xCF1BBCDCB7A56463 * v78) >> v540)) = v33 + 2;
          *(_DWORD *)(v24 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v16 - 2)) >> v540)) = v16 - 2 - v7;
          *(_DWORD *)(v532 + 4 * ((0xCF1BBCDCBFA56300 * v78) >> v536)) = v33 + 2;
          *(_DWORD *)(v532 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(v16 - 1)) >> v536)) = v16 - 1 - v7;
          while (2)
          {
            v77 = v75;
            v75 = v21;
            if ((_DWORD)v21 && *(_DWORD *)v16 == *(_DWORD *)(v16 - v21))
            {
              v79 = (char *)(v16 + 4);
              v80 = (_QWORD *)(v16 + 4 - v21);
              if (v44 <= v16 + 4)
              {
                v83 = (_DWORD *)(v16 + 4);
              }
              else
              {
                v81 = *(_QWORD *)v79 ^ *v80;
                if (v81)
                {
                  v82 = __clz(__rbit64(v81)) >> 3;
                  goto LABEL_88;
                }
                v88 = v16 + 12;
                while (1)
                {
                  v89 = (_QWORD *)(v88 + v81);
                  if (v88 + v81 >= v44)
                    break;
                  v90 = *(_QWORD *)(v16 + 12 - v21 + v81);
                  v81 += 8;
                  v91 = *v89 ^ v90;
                  if (v91)
                  {
                    v82 = v81 + (__clz(__rbit64(v91)) >> 3);
                    goto LABEL_88;
                  }
                }
                v83 = (_DWORD *)(v16 + v81 + 12);
                v80 = (_QWORD *)((char *)v83 - v21);
              }
              if ((unint64_t)v83 < v512 && *(_DWORD *)v80 == *v83)
              {
                ++v83;
                v80 = (_QWORD *)((char *)v80 + 4);
              }
              if ((unint64_t)v83 < v508 && *(unsigned __int16 *)v80 == *(unsigned __int16 *)v83)
              {
                v83 = (_DWORD *)((char *)v83 + 2);
                v80 = (_QWORD *)((char *)v80 + 2);
              }
              if ((unint64_t)v83 < v8 && *(unsigned __int8 *)v80 == *(unsigned __int8 *)v83)
                v83 = (_DWORD *)((char *)v83 + 1);
              v82 = (char *)v83 - v79;
LABEL_88:
              v84 = *(_QWORD *)v16;
              *(_DWORD *)(v532 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)v16) >> v536)) = v16 - v7;
              *(_DWORD *)(v24 + 4 * ((0xCF1BBCDCB7A56463 * v84) >> v540)) = v16 - v7;
              v85 = *(_OWORD **)(a2 + 24);
              if (v16 <= (unint64_t)v47)
              {
                *v85 = *(_OWORD *)v16;
              }
              else
              {
                sub_1D4B56E1C(v85, (char *)v16, v16, v47);
                v44 = v520;
                v47 = v524;
                v8 = v528;
              }
              v86 = *(_QWORD *)(a2 + 8);
              *(_WORD *)(v86 + 4) = 0;
              *(_DWORD *)v86 = 1;
              if (v82 + 1 >= 0x10000)
              {
                v87 = (unint64_t)(v86 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v87;
              }
              *(_WORD *)(v86 + 6) = v82 + 1;
              *(_QWORD *)(a2 + 8) = v86 + 8;
              v16 += v82 + 4;
              v21 = v77;
              v22 = v75;
              if (v16 > v13)
                goto LABEL_101;
              continue;
            }
            break;
          }
          v22 = v77;
          v77 = v21;
LABEL_101:
          _X8 = (_QWORD *)(v16 + 1);
          a4 = v16;
          v21 = v77;
          a3 = v516;
          v15 = v496;
          v14 = v500;
          v20 = v492;
          if (v16 + 1 > v13)
          {
LABEL_398:
            if (v15 <= v20)
              v253 = 0;
            else
              v253 = v15;
            if (v14 <= v20)
              v254 = 0;
            else
              v254 = v14;
            if ((_DWORD)v22)
              v255 = v22;
            else
              v255 = v253;
            if ((_DWORD)v22)
              _ZF = v253 == 0;
            else
              _ZF = 1;
            if (_ZF)
              v253 = v254;
            if ((_DWORD)v77)
              v253 = v77;
            goto LABEL_448;
          }
        }
      }
      goto LABEL_397;
  }
  v257 = *(_QWORD *)(a1 + 8);
  v8 = a4 + a5;
  v258 = 1 << *(_DWORD *)(a1 + 256);
  v259 = *(_DWORD *)(a1 + 24);
  v260 = *(_DWORD *)(a1 + 40) == 0;
  if (v260 && (_DWORD)v8 - (_DWORD)v257 - v259 > v258)
    v261 = (_DWORD)v8 - (_DWORD)v257 - v258;
  else
    v261 = v259;
  v262 = v8 - 8;
  v263 = *a3;
  v264 = a3[1];
  if (v257 + v261 == a4)
    v16 = a4 + 1;
  else
    v16 = a4;
  v265 = v16 - v257;
  v266 = (_DWORD)v16 - (_DWORD)v257 - v259 > v258;
  v267 = v16 - v257 - v258;
  if (!v260 || !v266)
    v267 = *(_DWORD *)(a1 + 24);
  v268 = v265 - v267;
  if (v264 <= v265 - v267)
    v269 = v264;
  else
    v269 = 0;
  if (v263 <= v268)
    v270 = v263;
  else
    v270 = 0;
  _X8 = (_QWORD *)(v16 + 1);
  if (v16 + 1 > v262)
  {
LABEL_430:
    LODWORD(v272) = v269;
    v16 = a4;
    goto LABEL_431;
  }
  v491 = v257 + v261;
  v378 = *(_QWORD *)(a1 + 112);
  v543 = 64 - *(_DWORD *)(a1 + 264);
  v539 = 32 - *(_DWORD *)(a1 + 260);
  v531 = v8;
  v535 = *(_QWORD *)(a1 + 128);
  v511 = v8 - 1;
  v515 = v8 - 3;
  v523 = v8 - 7;
  v527 = (char *)(v8 - 32);
  v483 = v257 + 12;
  v487 = v257 - 1;
  v479 = v257 + 16;
  v503 = *a3;
  v507 = a3[1];
  v499 = v268;
  v495 = v261;
  v519 = a3;
  do
  {
    v379 = v16 + 256;
    v380 = *(_QWORD *)v16;
    v381 = (0xCF1BBCDCB7A56463 * *(_QWORD *)v16) >> v543;
    v382 = *(unsigned int *)(v378 + 4 * v381);
    v383 = (_QWORD *)(v257 + v382);
    v384 = 1;
    while (1)
    {
      v385 = (-1640531535 * v380) >> v539;
      v386 = *(unsigned int *)(v535 + 4 * v385);
      v387 = v16 - v257;
      *(_DWORD *)(v535 + 4 * v385) = v16 - v257;
      *(_DWORD *)(v378 + 4 * v381) = v16 - v257;
      if ((_DWORD)v270)
      {
        v388 = v16 + 1;
        if (*(_DWORD *)(v16 + 1 - v270) == *(_DWORD *)(v16 + 1))
        {
          v393 = (char *)(v16 + 5);
          v394 = (_QWORD *)(v16 + 5 - v270);
          v395 = v523;
          if (v523 <= v16 + 5)
          {
            v399 = (_DWORD *)(v16 + 5);
            v398 = v527;
          }
          else
          {
            v396 = *(_QWORD *)v393 ^ *v394;
            if (v396)
            {
              v397 = __clz(__rbit64(v396)) >> 3;
              v398 = v527;
              goto LABEL_649;
            }
            v444 = v16 + 13;
            v398 = v527;
            while (1)
            {
              v445 = (_QWORD *)(v444 + v396);
              if (v444 + v396 >= v523)
                break;
              v446 = *(_QWORD *)(v16 + 13 - v270 + v396);
              v396 += 8;
              v447 = *v445 ^ v446;
              if (v447)
              {
                v397 = v396 + (__clz(__rbit64(v447)) >> 3);
                goto LABEL_649;
              }
            }
            v399 = (_DWORD *)(v16 + v396 + 13);
            v394 = (_QWORD *)((char *)v399 - v270);
          }
          if ((unint64_t)v399 < v515 && *(_DWORD *)v394 == *v399)
          {
            ++v399;
            v394 = (_QWORD *)((char *)v394 + 4);
          }
          if ((unint64_t)v399 < v511 && *(unsigned __int16 *)v394 == *(unsigned __int16 *)v399)
          {
            v399 = (_DWORD *)((char *)v399 + 2);
            v394 = (_QWORD *)((char *)v394 + 2);
          }
          if ((unint64_t)v399 < v8 && *(unsigned __int8 *)v394 == *(unsigned __int8 *)v399)
            v399 = (_DWORD *)((char *)v399 + 1);
          v397 = (char *)v399 - v393;
LABEL_649:
          v400 = v388 - a4;
          v401 = *(_OWORD **)(a2 + 24);
          if (v388 <= (unint64_t)v398)
          {
            *v401 = *(_OWORD *)a4;
            v404 = *(_QWORD *)(a2 + 24);
            if ((unint64_t)v400 <= 0x10)
            {
              *(_QWORD *)(a2 + 24) = v404 + v400;
              v402 = *(_QWORD *)(a2 + 8);
              goto LABEL_671;
            }
            *(_OWORD *)(v404 + 16) = *(_OWORD *)(a4 + 16);
            if (v400 >= 33)
            {
              v405 = v404 + v400;
              v406 = (_OWORD *)(v404 + 32);
              v407 = (__int128 *)(a4 + 48);
              do
              {
                *v406 = *(v407 - 1);
                v408 = *v407;
                v407 += 2;
                v406[1] = v408;
                v406 += 2;
              }
              while ((unint64_t)v406 < v405);
            }
          }
          else
          {
            sub_1D4B56E1C(v401, (char *)a4, v388, v398);
          }
          *(_QWORD *)(a2 + 24) += v400;
          v402 = *(_QWORD *)(a2 + 8);
          if ((unint64_t)v400 >= 0x10000)
          {
            v403 = (unint64_t)(v402 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v403;
          }
          v398 = v527;
          v8 = v531;
          v395 = v523;
LABEL_671:
          v422 = v397 + 4;
          *(_WORD *)(v402 + 4) = v400;
          *(_DWORD *)v402 = 1;
          v423 = v397 + 1;
          v424 = (v397 + 1) >> 16;
          v425 = v270;
          v426 = v270;
          if (!v424)
            goto LABEL_673;
LABEL_672:
          v427 = (unint64_t)(v402 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v427;
          v426 = v425;
          goto LABEL_673;
        }
      }
      v380 = *_X8;
      v381 = (0xCF1BBCDCB7A56463 * *_X8) >> v543;
      if (v382 > v261 && *v383 == *(_QWORD *)v16)
        break;
      v382 = *(unsigned int *)(v378 + 4 * v381);
      v383 = (_QWORD *)(v257 + v382);
      if (v386 > v261)
      {
        v389 = v257 + v386;
        if (*(_DWORD *)(v257 + v386) == *(_DWORD *)v16)
        {
          if (v382 > v261 && *v383 == v380)
          {
            v414 = (char *)(_X8 + 1);
            v415 = v383 + 1;
            v395 = v523;
            v398 = v527;
            if (v523 <= (unint64_t)(_X8 + 1))
            {
              v460 = _X8 + 1;
            }
            else
            {
              v416 = *(_QWORD *)v414 ^ *v415;
              if (v416)
              {
                v417 = __clz(__rbit64(v416)) >> 3;
                goto LABEL_767;
              }
              v471 = 0;
              v472 = _X8 + 2;
              while (1)
              {
                v473 = &v472[v471];
                if ((unint64_t)&v472[v471] >= v523)
                  break;
                v474 = *(_QWORD *)(v479 + v382 + v471 * 8);
                ++v471;
                v475 = *v473 ^ v474;
                if (v475)
                {
                  v417 = v471 * 8 + (__clz(__rbit64(v475)) >> 3);
                  goto LABEL_767;
                }
              }
              v460 = &_X8[v471 + 2];
              v415 = (_QWORD *)(v479 + v382 + v471 * 8);
            }
            if ((unint64_t)v460 < v515 && *(_DWORD *)v415 == *v460)
            {
              ++v460;
              v415 = (_QWORD *)((char *)v415 + 4);
            }
            if ((unint64_t)v460 < v511 && *(unsigned __int16 *)v415 == *(unsigned __int16 *)v460)
            {
              v460 = (_DWORD *)((char *)v460 + 2);
              v415 = (_QWORD *)((char *)v415 + 2);
            }
            if ((unint64_t)v460 < v8 && *(unsigned __int8 *)v415 == *(unsigned __int8 *)v460)
              v460 = (_DWORD *)((char *)v460 + 1);
            v417 = (char *)v460 - v414;
LABEL_767:
            v422 = v417 + 8;
            v425 = (char *)_X8 - (char *)v383;
            if ((unint64_t)_X8 <= a4)
            {
              v388 = (unint64_t)_X8;
            }
            else
            {
              v443 = (unsigned __int8 *)_X8 - 1;
              v461 = (unsigned __int8 *)(v487 + v382);
              while (*v443 == *v461)
              {
                ++v422;
                v441 = v443 - 1;
                if ((unint64_t)v443 > a4)
                {
                  --v443;
                  v96 = (unint64_t)v461-- > v491;
                  if (v96)
                    continue;
                }
                goto LABEL_772;
              }
LABEL_745:
              v388 = (unint64_t)(v443 + 1);
            }
            goto LABEL_773;
          }
          v418 = (char *)(v16 + 4);
          v419 = (_QWORD *)(v389 + 4);
          v395 = v523;
          v398 = v527;
          if (v523 <= v16 + 4)
          {
            v448 = (_DWORD *)(v16 + 4);
          }
          else
          {
            v420 = *(_QWORD *)v418 ^ *v419;
            if (v420)
            {
              v421 = __clz(__rbit64(v420)) >> 3;
              goto LABEL_740;
            }
            v455 = 0;
            v456 = v16 + 12;
            while (1)
            {
              v457 = (_QWORD *)(v456 + v455);
              if (v456 + v455 >= v523)
                break;
              v458 = *(_QWORD *)(v483 + v386 + v455);
              v455 += 8;
              v459 = *v457 ^ v458;
              if (v459)
              {
                v421 = v455 + (__clz(__rbit64(v459)) >> 3);
                goto LABEL_740;
              }
            }
            v448 = (_DWORD *)(v16 + v455 + 12);
            v419 = (_QWORD *)(v483 + v386 + v455);
          }
          if ((unint64_t)v448 < v515 && *(_DWORD *)v419 == *v448)
          {
            ++v448;
            v419 = (_QWORD *)((char *)v419 + 4);
          }
          if ((unint64_t)v448 < v511 && *(unsigned __int16 *)v419 == *(unsigned __int16 *)v448)
          {
            v448 = (_DWORD *)((char *)v448 + 2);
            v419 = (_QWORD *)((char *)v419 + 2);
          }
          if ((unint64_t)v448 < v8 && *(unsigned __int8 *)v419 == *(unsigned __int8 *)v448)
            v448 = (_DWORD *)((char *)v448 + 1);
          v421 = (char *)v448 - v418;
LABEL_740:
          v422 = v421 + 4;
          v425 = v16 - v389;
          if (v16 > a4)
          {
            v441 = (unsigned __int8 *)(v16 - 1);
            v449 = (unsigned __int8 *)(v487 + v386);
            while (*v441 == *v449)
            {
              ++v422;
              v443 = v441 - 1;
              if ((unint64_t)v441 > a4)
              {
                --v441;
                v96 = (unint64_t)v449-- > v491;
                if (v96)
                  continue;
              }
              goto LABEL_745;
            }
            goto LABEL_772;
          }
LABEL_746:
          v388 = v16;
          goto LABEL_773;
        }
      }
      if ((unint64_t)_X8 >= v379)
      {
        __asm
        {
          PRFM            #0, [X8,#0x40]
          PRFM            #0, [X8,#0x80]
        }
        ++v384;
        v379 += 256;
      }
      __asm { PRFM            #0, [X8,#0x100] }
      v16 = (unint64_t)_X8;
      _X8 = (_QWORD *)((char *)_X8 + v384);
      if ((unint64_t)_X8 > v262)
        goto LABEL_430;
    }
    v409 = (char *)(v16 + 8);
    v410 = v383 + 1;
    v395 = v523;
    if (v523 <= v16 + 8)
    {
      v440 = (_DWORD *)(v16 + 8);
      v412 = v491;
      v398 = v527;
    }
    else
    {
      v411 = *(_QWORD *)v409 ^ *v410;
      v412 = v491;
      v398 = v527;
      if (v411)
      {
        v413 = __clz(__rbit64(v411)) >> 3;
        goto LABEL_718;
      }
      v450 = 0;
      v451 = v16 + 16;
      while (1)
      {
        v452 = (_QWORD *)(v451 + v450);
        if (v451 + v450 >= v523)
          break;
        v453 = v383[v450 / 8 + 2];
        v450 += 8;
        v454 = *v452 ^ v453;
        if (v454)
        {
          v413 = v450 + (__clz(__rbit64(v454)) >> 3);
          goto LABEL_718;
        }
      }
      v440 = (_DWORD *)(v16 + v450 + 16);
      v410 = &v383[v450 / 8 + 2];
    }
    if ((unint64_t)v440 < v515 && *(_DWORD *)v410 == *v440)
    {
      ++v440;
      v410 = (_QWORD *)((char *)v410 + 4);
    }
    if ((unint64_t)v440 < v511 && *(unsigned __int16 *)v410 == *(unsigned __int16 *)v440)
    {
      v440 = (_DWORD *)((char *)v440 + 2);
      v410 = (_QWORD *)((char *)v410 + 2);
    }
    if ((unint64_t)v440 < v8 && *(unsigned __int8 *)v410 == *(unsigned __int8 *)v440)
      v440 = (_DWORD *)((char *)v440 + 1);
    v413 = (char *)v440 - v409;
LABEL_718:
    v422 = v413 + 8;
    v425 = v16 - (_QWORD)v383;
    if ((unint64_t)v383 <= v412 || v16 <= a4)
      goto LABEL_746;
    v441 = (unsigned __int8 *)(v16 - 1);
    v442 = (unsigned __int8 *)v383 - 1;
    while (*v441 == *v442)
    {
      ++v422;
      v443 = v441 - 1;
      if ((unint64_t)v441 > a4)
      {
        --v441;
        v96 = (unint64_t)v442-- > v412;
        if (v96)
          continue;
      }
      goto LABEL_745;
    }
LABEL_772:
    v388 = (unint64_t)(v441 + 1);
LABEL_773:
    if (v384 <= 3)
      *(_DWORD *)(v378 + 4 * v381) = (_DWORD)_X8 - v257;
    v462 = v388 - a4;
    v463 = *(_OWORD **)(a2 + 24);
    if (v388 > (unint64_t)v398)
    {
      v464 = v425;
      sub_1D4B56E1C(v463, (char *)a4, v388, v398);
      v425 = v464;
      v395 = v523;
      v8 = v531;
      goto LABEL_781;
    }
    *v463 = *(_OWORD *)a4;
    v465 = *(_QWORD *)(a2 + 24);
    if ((unint64_t)v462 <= 0x10)
    {
      *(_QWORD *)(a2 + 24) = v465 + v462;
      v402 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      *(_OWORD *)(v465 + 16) = *(_OWORD *)(a4 + 16);
      if (v462 >= 33)
      {
        v466 = v465 + v462;
        v467 = (_OWORD *)(v465 + 32);
        v468 = (__int128 *)(a4 + 48);
        do
        {
          *v467 = *(v468 - 1);
          v469 = *v468;
          v468 += 2;
          v467[1] = v469;
          v467 += 2;
        }
        while ((unint64_t)v467 < v466);
      }
LABEL_781:
      *(_QWORD *)(a2 + 24) += v462;
      v402 = *(_QWORD *)(a2 + 8);
      if ((unint64_t)v462 >= 0x10000)
      {
        v470 = (unint64_t)(v402 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v470;
      }
      v398 = v527;
    }
    *(_WORD *)(v402 + 4) = v462;
    *(_DWORD *)v402 = v425 + 3;
    v423 = v422 - 3;
    v269 = v270;
    v426 = v425;
    if (v422 - 3 >= 0x10000)
      goto LABEL_672;
LABEL_673:
    *(_WORD *)(v402 + 6) = v423;
    *(_QWORD *)(a2 + 8) = v402 + 8;
    v16 = v388 + v422;
    if (v388 + v422 > v262)
    {
      v270 = v426;
      v272 = v269;
      v264 = v507;
      goto LABEL_705;
    }
    *(_DWORD *)(v378 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v257 + (v387 + 2))) >> v543)) = v387 + 2;
    *(_DWORD *)(v378 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v16 - 2)) >> v543)) = v16 - 2 - v257;
    *(_DWORD *)(v535 + 4 * ((-1640531535 * *(_DWORD *)(v257 + (v387 + 2))) >> v539)) = v387 + 2;
    *(_DWORD *)(v535 + 4 * ((-1640531535 * *(_DWORD *)(v16 - 1)) >> v539)) = v16 - 1 - v257;
    v264 = v507;
    while (2)
    {
      v272 = v426;
      v426 = v269;
      if ((_DWORD)v269 && *(_DWORD *)v16 == *(_DWORD *)(v16 - v269))
      {
        v428 = (char *)(v16 + 4);
        v429 = (_QWORD *)(v16 + 4 - v269);
        if (v395 <= v16 + 4)
        {
          v432 = (_DWORD *)(v16 + 4);
        }
        else
        {
          v430 = *(_QWORD *)v428 ^ *v429;
          if (v430)
          {
            v431 = __clz(__rbit64(v430)) >> 3;
            goto LABEL_692;
          }
          v436 = v16 + 12;
          while (1)
          {
            v437 = (_QWORD *)(v436 + v430);
            if (v436 + v430 >= v395)
              break;
            v438 = *(_QWORD *)(v16 + 12 - v269 + v430);
            v430 += 8;
            v439 = *v437 ^ v438;
            if (v439)
            {
              v431 = v430 + (__clz(__rbit64(v439)) >> 3);
              goto LABEL_692;
            }
          }
          v432 = (_DWORD *)(v16 + v430 + 12);
          v429 = (_QWORD *)((char *)v432 - v269);
        }
        if ((unint64_t)v432 < v515 && *(_DWORD *)v429 == *v432)
        {
          ++v432;
          v429 = (_QWORD *)((char *)v429 + 4);
        }
        if ((unint64_t)v432 < v511 && *(unsigned __int16 *)v429 == *(unsigned __int16 *)v432)
        {
          v432 = (_DWORD *)((char *)v432 + 2);
          v429 = (_QWORD *)((char *)v429 + 2);
        }
        if ((unint64_t)v432 < v8 && *(unsigned __int8 *)v429 == *(unsigned __int8 *)v432)
          v432 = (_DWORD *)((char *)v432 + 1);
        v431 = (char *)v432 - v428;
LABEL_692:
        *(_DWORD *)(v535 + 4 * ((-1640531535 * *(_DWORD *)v16) >> v539)) = v16 - v257;
        *(_DWORD *)(v378 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)v16) >> v543)) = v16 - v257;
        v433 = *(_OWORD **)(a2 + 24);
        if (v16 <= (unint64_t)v398)
        {
          *v433 = *(_OWORD *)v16;
        }
        else
        {
          sub_1D4B56E1C(v433, (char *)v16, v16, v398);
          v395 = v523;
          v398 = v527;
          v8 = v531;
        }
        v434 = *(_QWORD *)(a2 + 8);
        *(_WORD *)(v434 + 4) = 0;
        *(_DWORD *)v434 = 1;
        if (v431 + 1 >= 0x10000)
        {
          v435 = (unint64_t)(v434 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v435;
        }
        *(_WORD *)(v434 + 6) = v431 + 1;
        *(_QWORD *)(a2 + 8) = v434 + 8;
        v16 += v431 + 4;
        v269 = v272;
        v270 = v426;
        if (v16 > v262)
          goto LABEL_705;
        continue;
      }
      break;
    }
    v270 = v272;
    v272 = v269;
LABEL_705:
    _X8 = (_QWORD *)(v16 + 1);
    a4 = v16;
    v269 = v272;
    a3 = v519;
    v268 = v499;
    v263 = v503;
    LODWORD(v261) = v495;
  }
  while (v16 + 1 <= v262);
LABEL_431:
  if (v263 <= v268)
    v253 = 0;
  else
    v253 = v263;
  if (v264 <= v268)
    v273 = 0;
  else
    v273 = v264;
  if ((_DWORD)v270)
    v255 = v270;
  else
    v255 = v253;
  if ((_DWORD)v270)
    v274 = v253 == 0;
  else
    v274 = 1;
  if (v274)
    v253 = v273;
  if ((_DWORD)v272)
    v253 = v272;
LABEL_448:
  *a3 = v255;
  a3[1] = v253;
  return v8 - v16;
}

unint64_t sub_1D4B5BBC0(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  unint64_t v5;
  int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  unint64_t v32;
  unsigned __int8 *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  BOOL v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  char *v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v79;
  unint64_t v80;
  _OWORD *v81;
  __int128 *v82;
  __int128 v83;
  uint64_t v84;
  unint64_t v85;
  unsigned __int8 *v86;
  unint64_t v87;
  uint64_t v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unsigned int v92;
  char *v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  unsigned __int8 *v98;
  uint64_t v99;
  unint64_t v100;
  unsigned __int8 *v101;
  __int16 v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  uint64_t v108;
  unint64_t v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  char *v114;
  uint64_t v115;
  _OWORD *v116;
  int v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _OWORD *v123;
  __int128 *v124;
  __int128 v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  unint64_t v135;
  _OWORD *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned __int8 *v142;
  uint64_t v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unsigned __int8 *v149;
  unsigned __int8 *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  unint64_t v168;
  unint64_t v171;
  unsigned __int8 *v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  int v191;
  char *v192;
  unint64_t v193;
  uint64_t v194;
  _OWORD *v195;
  uint64_t v196;
  char *v197;
  _QWORD *v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unsigned int v208;
  uint64_t v209;
  char *v210;
  _QWORD *v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v218;
  unint64_t v219;
  _OWORD *v220;
  __int128 *v221;
  __int128 v222;
  uint64_t v223;
  unint64_t v224;
  unsigned __int8 *v225;
  unint64_t v226;
  uint64_t v227;
  unsigned __int8 *v228;
  unsigned __int8 *v229;
  unsigned __int8 *v230;
  unsigned int v231;
  char *v233;
  char *v234;
  unint64_t v235;
  unint64_t v236;
  unsigned __int8 *v237;
  uint64_t v238;
  unint64_t v239;
  unsigned __int8 *v240;
  __int16 v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  unsigned __int8 *v245;
  unsigned __int8 *v246;
  uint64_t v247;
  unint64_t v248;
  unsigned __int8 *v249;
  unsigned __int8 *v250;
  unsigned __int8 *v251;
  unsigned __int8 *v252;
  char *v253;
  uint64_t v254;
  _OWORD *v255;
  int v256;
  char *v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  _OWORD *v262;
  __int128 *v263;
  __int128 v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  unint64_t v274;
  _OWORD *v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unsigned __int8 *v281;
  uint64_t v282;
  unsigned __int8 *v283;
  unsigned __int8 *v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unsigned __int8 *v288;
  unsigned __int8 *v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  unsigned int v304;
  unsigned int v305;
  int v306;
  unint64_t v307;
  unint64_t v310;
  unsigned __int8 *v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  unint64_t v329;
  int v330;
  char *v331;
  unint64_t v332;
  uint64_t v333;
  _OWORD *v334;
  uint64_t v335;
  char *v336;
  _QWORD *v337;
  unint64_t v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v342;
  uint64_t v343;
  unint64_t v344;
  unint64_t v345;
  uint64_t v346;
  unsigned int v347;
  uint64_t v348;
  char *v349;
  _QWORD *v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v357;
  unint64_t v358;
  _OWORD *v359;
  __int128 *v360;
  __int128 v361;
  uint64_t v362;
  unint64_t v363;
  unsigned __int8 *v364;
  unint64_t v365;
  uint64_t v366;
  unsigned __int8 *v367;
  unsigned __int8 *v368;
  unsigned __int8 *v369;
  unsigned int v370;
  char *v372;
  char *v373;
  unint64_t v374;
  unint64_t v375;
  unsigned __int8 *v376;
  uint64_t v377;
  unint64_t v378;
  unsigned __int8 *v379;
  __int16 v380;
  unint64_t v381;
  unint64_t v382;
  uint64_t v383;
  unsigned __int8 *v384;
  unsigned __int8 *v385;
  uint64_t v386;
  unint64_t v387;
  unsigned __int8 *v388;
  unsigned __int8 *v389;
  unsigned __int8 *v390;
  unsigned __int8 *v391;
  char *v392;
  uint64_t v393;
  _OWORD *v394;
  int v395;
  char *v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  unint64_t v400;
  _OWORD *v401;
  __int128 *v402;
  __int128 v403;
  unint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  int v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  char *v412;
  unint64_t v413;
  _OWORD *v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unsigned __int8 *v420;
  uint64_t v421;
  unsigned __int8 *v422;
  unsigned __int8 *v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  unsigned __int8 *v427;
  unsigned __int8 *v428;
  uint64_t v429;
  unint64_t v430;
  uint64_t v431;
  int v432;
  unsigned int v433;
  unsigned int v434;
  unsigned int v435;
  unsigned int v436;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  char *v442;
  unsigned int v443;
  unsigned int v444;
  int v445;
  unint64_t v446;
  unint64_t v449;
  unsigned __int8 *v452;
  uint64_t v453;
  unint64_t v454;
  unint64_t v455;
  unsigned int v456;
  unsigned int v457;
  unint64_t v458;
  unsigned int v459;
  unint64_t v460;
  unint64_t v461;
  int v462;
  uint64_t v463;
  uint64_t v464;
  int v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  int v469;
  char *v470;
  unint64_t v471;
  uint64_t v472;
  _OWORD *v473;
  uint64_t v474;
  char *v475;
  _QWORD *v476;
  unint64_t v477;
  unint64_t v478;
  unint64_t v479;
  unint64_t v481;
  uint64_t v482;
  unint64_t v483;
  unint64_t v484;
  uint64_t v485;
  unsigned int v486;
  uint64_t v487;
  char *v488;
  _QWORD *v489;
  unint64_t v490;
  unint64_t v491;
  unint64_t v492;
  uint64_t v496;
  unint64_t v497;
  _OWORD *v498;
  __int128 *v499;
  __int128 v500;
  uint64_t v501;
  unint64_t v502;
  unsigned __int8 *v503;
  unint64_t v504;
  uint64_t v505;
  unsigned __int8 *v506;
  unsigned __int8 *v507;
  unsigned __int8 *v508;
  unsigned int v509;
  char *v511;
  char *v512;
  unint64_t v513;
  unint64_t v514;
  unsigned __int8 *v515;
  uint64_t v516;
  unint64_t v517;
  unsigned __int8 *v518;
  __int16 v519;
  unint64_t v520;
  unint64_t v521;
  uint64_t v522;
  unsigned __int8 *v523;
  unsigned __int8 *v524;
  uint64_t v525;
  unint64_t v526;
  unsigned __int8 *v527;
  unsigned __int8 *v528;
  unsigned __int8 *v529;
  unsigned __int8 *v530;
  char *v531;
  uint64_t v532;
  _OWORD *v533;
  int v534;
  char *v535;
  uint64_t v536;
  unint64_t v537;
  uint64_t v538;
  unint64_t v539;
  _OWORD *v540;
  __int128 *v541;
  __int128 v542;
  unint64_t v543;
  uint64_t v544;
  uint64_t v545;
  int v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  char *v550;
  unint64_t v551;
  _OWORD *v552;
  uint64_t v553;
  unint64_t v554;
  uint64_t v555;
  uint64_t v556;
  unsigned __int8 *v557;
  uint64_t v558;
  unsigned __int8 *v559;
  unsigned __int8 *v560;
  uint64_t v561;
  unint64_t v562;
  uint64_t v563;
  unsigned __int8 *v564;
  unsigned __int8 *v565;
  uint64_t v566;
  unint64_t v567;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  unint64_t v573;
  unint64_t v574;
  unint64_t v575;
  unint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  unint64_t v585;
  unint64_t v586;
  unint64_t v587;
  unint64_t v588;
  unint64_t v589;
  unint64_t v590;
  unint64_t v591;
  unint64_t v592;
  unsigned int *v593;
  unint64_t v594;
  unint64_t v595;
  unint64_t v596;
  unint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  char v602;
  char v603;
  char v604;
  char v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  unsigned int v610;
  unsigned int v611;
  unsigned int v612;
  unsigned int v613;
  char v614;
  char v615;
  char v616;
  char v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  unint64_t v626;
  unint64_t v627;
  unint64_t v628;
  unint64_t v629;
  char *v630;
  char *v631;
  char *v632;
  char *v633;
  int v634;
  int v635;
  int v636;
  int v637;
  char *v638;
  char *v639;
  char *v640;
  char *v641;
  int v642;
  int v643;
  int v644;
  int v645;
  char v646;
  char v647;
  char v648;
  char v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  char v654;
  char v655;
  char v656;
  char v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  unint64_t v662;
  unint64_t v663;
  unint64_t v664;
  unint64_t v665;
  unsigned __int8 *v666;
  unsigned __int8 *v667;
  unsigned __int8 *v668;
  unsigned __int8 *v669;

  v5 = (unint64_t)a4;
  v7 = *(_DWORD *)(a1 + 272);
  if (v7 == 5)
  {
    v659 = *(_QWORD *)(a1 + 112);
    v651 = *(_QWORD *)(a1 + 128);
    v153 = *(_QWORD *)(a1 + 8);
    v9 = (unint64_t)&a4[a5];
    v154 = (_DWORD)a4 + a5 - v153;
    v155 = 1 << *(_DWORD *)(a1 + 256);
    v156 = *(_DWORD *)(a1 + 24);
    v157 = v154 - v156;
    v158 = v154 - v155;
    if (v157 > v155 && *(_DWORD *)(a1 + 40) == 0)
      v160 = v158;
    else
      v160 = v156;
    v663 = v9 - 8;
    v18 = *a3;
    v17 = a3[1];
    v161 = *(_QWORD *)(a1 + 248);
    v162 = *(_QWORD *)(v161 + 112);
    v163 = *(_QWORD *)(v161 + 128);
    v164 = *(char **)v161;
    v599 = *(unsigned int *)(v161 + 24);
    v623 = *(_QWORD *)(v161 + 8);
    v165 = *(_DWORD *)(v161 + 264);
    v166 = *(_DWORD *)(v161 + 260);
    v667 = (unsigned __int8 *)(v153 + v160);
    v631 = v164;
    v167 = (_DWORD)a4 - (v623 + v599) - (v153 + v160) + (_DWORD)v164;
    if (*(_DWORD *)(a1 + 296))
    {
      if (v165 <= 0x3D)
      {
        v168 = 0;
        do
        {
          _X16 = v162 + v168;
          __asm { PRFM            #2, [X16] }
          v168 += 64;
        }
        while (v168 < 4 << v165);
      }
      if (v166 <= 0x3D)
      {
        v171 = 0;
        do
        {
          _X15 = v163 + v171;
          __asm { PRFM            #2, [X15] }
          v171 += 64;
        }
        while (v171 < 4 << v166);
      }
    }
    if (v167)
      v174 = a4;
    else
      v174 = a4 + 1;
    if ((unint64_t)v174 >= v663)
      goto LABEL_781;
    v574 = v623 + v599;
    v593 = a3;
    v655 = 64 - *(_DWORD *)(a1 + 264);
    v647 = 64 - *(_DWORD *)(a1 + 260);
    v615 = 56 - v165;
    v603 = 56 - v166;
    v643 = v160 - 1;
    v595 = v9 - 7;
    v586 = v9 - 1;
    v590 = v9 - 3;
    v635 = v160;
    v639 = (char *)(v9 - 32);
    v570 = v623 - 1;
    v578 = v153 + 16;
    v582 = v153 - 1;
    v611 = v160 + v623 - (_DWORD)v631;
    v627 = v9;
    v619 = v162;
    v607 = v163;
    while (1)
    {
      v175 = *(_QWORD *)v174;
      v176 = 0xCF1BBCDCB7A56463 * *(_QWORD *)v174;
      v177 = v176 >> v655;
      v178 = 0xCF1BBCDCBB000000 * *(_QWORD *)v174;
      v179 = v178 >> v647;
      v180 = v176 >> v615;
      v181 = v178 >> v603;
      v182 = *(unsigned int *)(v162 + ((v176 >> v615 >> 6) & 0x3FFFFFFFFFFFFFCLL));
      v183 = *(unsigned int *)(v163 + ((v181 >> 6) & 0x3FFFFFFFFFFFFFCLL));
      v184 = (_DWORD)v174 - v153;
      v185 = *(unsigned int *)(v659 + 4 * (v176 >> v655));
      v186 = *(unsigned int *)(v651 + 4 * v179);
      v187 = (_DWORD)v174 - v153 + 1;
      v188 = (v187 - v18);
      v189 = v623 + v188 - v611;
      if (v188 >= v160)
        v189 = v153 + v188;
      *(_DWORD *)(v651 + 4 * v179) = v184;
      *(_DWORD *)(v659 + 4 * v177) = v184;
      if ((v643 - v188) >= 3)
      {
        v190 = (unint64_t)(v174 + 1);
        if (*(_DWORD *)v189 == *(_DWORD *)(v174 + 1))
          break;
      }
      if (v185 <= v160)
      {
        v201 = v182 >> 8;
        if (v180 == v182 && v201 > v599)
        {
          v238 = v623 + (v182 >> 8);
          if (*(_QWORD *)v238 == v175)
          {
            v239 = sub_1D4B5F19C((_QWORD *)v174 + 1, (char *)(v238 + 8), v9, v631, v667);
            v184 = (_DWORD)v174 - v153;
            v226 = v239 + 8;
            v227 = (_DWORD)v174 - (_DWORD)v153 - v611 - v201;
            if ((unint64_t)v174 > v5)
            {
              v228 = v174 - 1;
              v240 = (unsigned __int8 *)(v570 + v201);
              LODWORD(v160) = v635;
              while (*v228 == *v240)
              {
                ++v226;
                v230 = v228 - 1;
                if ((unint64_t)v228 > v5)
                {
                  --v228;
                  v63 = (unint64_t)v240-- > v574;
                  if (v63)
                    continue;
                }
LABEL_319:
                v190 = (unint64_t)(v230 + 1);
                goto LABEL_338;
              }
LABEL_337:
              v190 = (unint64_t)(v228 + 1);
LABEL_338:
              v253 = v639;
LABEL_339:
              v254 = v190 - v5;
              v255 = *(_OWORD **)(a2 + 24);
              if (v190 > (unint64_t)v253)
              {
                v256 = v184;
                v257 = (char *)v5;
                v258 = v227;
                sub_1D4B56E1C(v255, v257, v190, v253);
                v227 = v258;
                LODWORD(v160) = v635;
                goto LABEL_341;
              }
              *v255 = *(_OWORD *)v5;
              v260 = *(_QWORD *)(a2 + 24);
              if ((unint64_t)v254 <= 0x10)
              {
                *(_QWORD *)(a2 + 24) = v260 + v254;
                v223 = *(_QWORD *)(a2 + 8);
              }
              else
              {
                v256 = v184;
                *(_OWORD *)(v260 + 16) = *(_OWORD *)(v5 + 16);
                if (v254 >= 33)
                {
                  v261 = v260 + v254;
                  v262 = (_OWORD *)(v260 + 32);
                  v263 = (__int128 *)(v5 + 48);
                  do
                  {
                    *v262 = *(v263 - 1);
                    v264 = *v263;
                    v263 += 2;
                    v262[1] = v264;
                    v262 += 2;
                  }
                  while ((unint64_t)v262 < v261);
                }
LABEL_341:
                *(_QWORD *)(a2 + 24) += v254;
                v223 = *(_QWORD *)(a2 + 8);
                if ((unint64_t)v254 >= 0x10000)
                {
                  v259 = (unint64_t)(v223 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 1;
                  *(_DWORD *)(a2 + 76) = v259;
                }
                v184 = v256;
              }
              *(_WORD *)(v223 + 4) = v254;
              *(_DWORD *)v223 = v227 + 3;
              v241 = v226 - 3;
              v17 = v18;
              v18 = v227;
              if (v226 - 3 >= 0x10000)
              {
LABEL_351:
                v265 = (unint64_t)(v223 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v265;
                v18 = v227;
              }
LABEL_352:
              *(_WORD *)(v223 + 6) = v241;
              *(_QWORD *)(a2 + 8) = v223 + 8;
              v5 = v190 + v226;
              if (v190 + v226 <= v663)
              {
                v266 = *(_QWORD *)(v153 + (v184 + 2));
                *(_DWORD *)(v659 + 4 * ((0xCF1BBCDCB7A56463 * v266) >> v655)) = v184 + 2;
                *(_DWORD *)(v659 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v5 - 2)) >> v655)) = v5 - 2 - v153;
                *(_DWORD *)(v651 + 4 * ((0xCF1BBCDCBB000000 * v266) >> v647)) = v184 + 2;
                *(_DWORD *)(v651 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v5 - 1)) >> v647)) = v5 - 1 - v153;
                v267 = v18;
                v268 = v17;
                v9 = v627;
                while (1)
                {
                  v18 = v268;
                  v268 = v267;
                  v269 = v5 - v153;
                  v270 = (v5 - v153 - v18);
                  v271 = v623 - v611;
                  if (v270 >= v160)
                    v271 = v153;
                  if ((v643 - v270) < 3)
                    break;
                  v272 = v271 + v270;
                  if (*(_DWORD *)v272 != *(_DWORD *)v5)
                    break;
                  if (v270 >= v160)
                    v273 = (char *)v627;
                  else
                    v273 = v631;
                  v274 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v272 + 4), v627, v273, v667);
                  v275 = *(_OWORD **)(a2 + 24);
                  if (v5 <= (unint64_t)v639)
                    *v275 = *(_OWORD *)v5;
                  else
                    sub_1D4B56E1C(v275, (char *)v5, v5, v639);
                  LODWORD(v160) = v635;
                  v276 = *(_QWORD *)(a2 + 8);
                  *(_WORD *)(v276 + 4) = 0;
                  *(_DWORD *)v276 = 1;
                  if (v274 + 1 >= 0x10000)
                  {
                    v277 = (unint64_t)(v276 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 2;
                    *(_DWORD *)(a2 + 76) = v277;
                  }
                  *(_WORD *)(v276 + 6) = v274 + 1;
                  v278 = *(_QWORD *)v5;
                  *(_DWORD *)(v651 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v5) >> v647)) = v269;
                  *(_DWORD *)(v659 + 4 * ((0xCF1BBCDCB7A56463 * v278) >> v655)) = v269;
                  v5 += v274 + 4;
                  *(_QWORD *)(a2 + 8) = v276 + 8;
                  v267 = v18;
                  v17 = v268;
                  v174 = (unsigned __int8 *)v5;
                  if (v5 > v663)
                    goto LABEL_370;
                }
                v17 = v18;
                v18 = v267;
                v174 = (unsigned __int8 *)v5;
              }
              else
              {
                v174 = (unsigned __int8 *)(v190 + v226);
                v9 = v627;
              }
              goto LABEL_370;
            }
LABEL_297:
            v190 = (unint64_t)v174;
            LODWORD(v160) = v635;
            goto LABEL_338;
          }
        }
      }
      else
      {
        v196 = v153 + v185;
        if (*(_QWORD *)(v153 + v185) == v175)
        {
          v197 = (char *)(v174 + 8);
          v198 = (_QWORD *)(v196 + 8);
          if (v595 <= (unint64_t)(v174 + 8))
          {
            v225 = v174 + 8;
          }
          else
          {
            v199 = *(_QWORD *)v197 ^ *v198;
            if (v199)
            {
              v200 = __clz(__rbit64(v199)) >> 3;
              goto LABEL_263;
            }
            v244 = 0;
            v245 = v174 + 16;
            while (1)
            {
              v246 = &v245[v244];
              if ((unint64_t)&v245[v244] >= v595)
                break;
              v247 = *(_QWORD *)(v578 + v185 + v244);
              v244 += 8;
              v248 = *(_QWORD *)v246 ^ v247;
              if (v248)
              {
                v200 = v244 + (__clz(__rbit64(v248)) >> 3);
                goto LABEL_263;
              }
            }
            v225 = &v174[v244 + 16];
            v198 = (_QWORD *)(v578 + v185 + v244);
          }
          if ((unint64_t)v225 < v590 && *(_DWORD *)v198 == *(_DWORD *)v225)
          {
            v225 += 4;
            v198 = (_QWORD *)((char *)v198 + 4);
          }
          if ((unint64_t)v225 < v586 && *(unsigned __int16 *)v198 == *(unsigned __int16 *)v225)
          {
            v225 += 2;
            v198 = (_QWORD *)((char *)v198 + 2);
          }
          if ((unint64_t)v225 < v9 && *(unsigned __int8 *)v198 == *v225)
            ++v225;
          v200 = v225 - (unsigned __int8 *)v197;
LABEL_263:
          v226 = v200 + 8;
          v227 = ((_DWORD)v174 - v196);
          if ((unint64_t)v174 > v5)
          {
            v228 = v174 - 1;
            v229 = (unsigned __int8 *)(v582 + v185);
            while (*v228 == *v229)
            {
              ++v226;
              v230 = v228 - 1;
              if ((unint64_t)v228 > v5)
              {
                --v228;
                v63 = v229-- > v667;
                if (v63)
                  continue;
              }
              goto LABEL_319;
            }
            goto LABEL_337;
          }
          goto LABEL_320;
        }
      }
      if (v186 <= v160)
      {
        v214 = v183 >> 8;
        if (v181 == v183 && v214 > v599)
        {
          v203 = v623 + v214;
          if (*(_DWORD *)(v623 + v214) == *(_DWORD *)v174)
          {
            LODWORD(v186) = v214 + v611;
LABEL_236:
            v190 = (unint64_t)(v174 + 1);
            v204 = *(_QWORD *)(v174 + 1);
            v205 = (0xCF1BBCDCB7A56463 * v204) >> v655;
            v206 = (0xCF1BBCDCB7A56463 * v204) >> v615;
            v207 = *(unsigned int *)(v659 + 4 * v205);
            v208 = *(_DWORD *)(v619 + ((v206 >> 6) & 0x3FFFFFFFFFFFFFCLL));
            *(_DWORD *)(v659 + 4 * v205) = v187;
            if (v207 <= v160)
            {
              v231 = v208 >> 8;
              if (v206 == v208 && v231 > v599)
              {
                v279 = v231;
                v280 = v623 + v231;
                if (*(_QWORD *)v280 == v204)
                {
                  v226 = sub_1D4B5F19C(v174 + 9, (char *)(v280 + 8), v9, v631, v667) + 8;
                  v227 = v187 - v611 - v279;
                  if (v190 <= v5)
                  {
                    LODWORD(v160) = v635;
                    v253 = v639;
                    v184 = (_DWORD)v174 - v153;
                    goto LABEL_339;
                  }
                  v281 = (unsigned __int8 *)(v570 + v279);
                  LODWORD(v160) = v635;
                  v184 = (_DWORD)v174 - v153;
                  while (*v174 == *v281)
                  {
                    ++v226;
                    v228 = v174 - 1;
                    if ((unint64_t)v281 > v574)
                    {
                      --v281;
                      v63 = (unint64_t)v174-- > v5;
                      if (v63)
                        continue;
                    }
                    goto LABEL_337;
                  }
                  goto LABEL_380;
                }
              }
            }
            else
            {
              v209 = v153 + v207;
              if (*(_QWORD *)(v153 + v207) == v204)
              {
                v210 = (char *)(v174 + 9);
                v211 = (_QWORD *)(v209 + 8);
                if (v595 <= (unint64_t)(v174 + 9))
                {
                  v251 = v174 + 9;
                }
                else
                {
                  v212 = *(_QWORD *)v210 ^ *v211;
                  if (v212)
                  {
                    v213 = __clz(__rbit64(v212)) >> 3;
                    goto LABEL_332;
                  }
                  v287 = 0;
                  v288 = v174 + 17;
                  while (1)
                  {
                    v289 = &v288[v287];
                    if ((unint64_t)&v288[v287] >= v595)
                      break;
                    v290 = *(_QWORD *)(v578 + v207 + v287);
                    v287 += 8;
                    v291 = *(_QWORD *)v289 ^ v290;
                    if (v291)
                    {
                      v213 = v287 + (__clz(__rbit64(v291)) >> 3);
                      goto LABEL_332;
                    }
                  }
                  v251 = &v174[v287 + 17];
                  v211 = (_QWORD *)(v578 + v207 + v287);
                }
                if ((unint64_t)v251 < v590 && *(_DWORD *)v211 == *(_DWORD *)v251)
                {
                  v251 += 4;
                  v211 = (_QWORD *)((char *)v211 + 4);
                }
                if ((unint64_t)v251 < v586 && *(unsigned __int16 *)v211 == *(unsigned __int16 *)v251)
                {
                  v251 += 2;
                  v211 = (_QWORD *)((char *)v211 + 2);
                }
                if ((unint64_t)v251 < v9 && *(unsigned __int8 *)v211 == *v251)
                  ++v251;
                v213 = v251 - (unsigned __int8 *)v210;
LABEL_332:
                v226 = v213 + 8;
                v227 = (v190 - v209);
                if (v190 <= v5)
                  goto LABEL_338;
                v252 = (unsigned __int8 *)(v582 + v207);
                while (*v174 == *v252)
                {
                  ++v226;
                  v228 = v174 - 1;
                  if (v252 > v667)
                  {
                    --v252;
                    v63 = (unint64_t)v174-- > v5;
                    if (v63)
                      continue;
                  }
                  goto LABEL_337;
                }
LABEL_380:
                v190 = (unint64_t)(v174 + 1);
                goto LABEL_338;
              }
            }
            v233 = (char *)(v174 + 4);
            v234 = (char *)(v203 + 4);
            if (v186 < v160)
            {
              v235 = v203;
              v236 = sub_1D4B5F19C(v233, v234, v9, v631, v667);
              v184 = (_DWORD)v174 - v153;
              v226 = v236 + 4;
              v227 = ((_DWORD)v174 - v153 - v186);
              if ((unint64_t)v174 > v5 && v235 > v574)
              {
                v228 = v174 - 1;
                v237 = (unsigned __int8 *)(v235 - 1);
                LODWORD(v160) = v635;
                while (*v228 == *v237)
                {
                  ++v226;
                  v230 = v228 - 1;
                  if ((unint64_t)v228 > v5)
                  {
                    --v228;
                    v63 = (unint64_t)v237-- > v574;
                    if (v63)
                      continue;
                  }
                  goto LABEL_319;
                }
                goto LABEL_337;
              }
              goto LABEL_297;
            }
            if (v595 <= (unint64_t)v233)
            {
              v249 = v174 + 4;
            }
            else
            {
              v242 = *(_QWORD *)v233 ^ *(_QWORD *)v234;
              if (v242)
              {
                v243 = __clz(__rbit64(v242)) >> 3;
LABEL_313:
                v226 = v243 + 4;
                v227 = ((_DWORD)v174 - v203);
                if ((unint64_t)v174 > v5 && v203 > (unint64_t)v667)
                {
                  v228 = v174 - 1;
                  v250 = (unsigned __int8 *)(v203 - 1);
                  while (*v228 == *v250)
                  {
                    ++v226;
                    v230 = v228 - 1;
                    if ((unint64_t)v228 > v5)
                    {
                      --v228;
                      v63 = v250-- > v667;
                      if (v63)
                        continue;
                    }
                    goto LABEL_319;
                  }
                  goto LABEL_337;
                }
LABEL_320:
                v190 = (unint64_t)v174;
                goto LABEL_338;
              }
              v282 = 0;
              v283 = v174 + 12;
              while (1)
              {
                v284 = &v283[v282];
                if ((unint64_t)&v283[v282] >= v595)
                  break;
                v285 = *(_QWORD *)(v203 + 12 + v282);
                v282 += 8;
                v286 = *(_QWORD *)v284 ^ v285;
                if (v286)
                {
                  v243 = v282 + (__clz(__rbit64(v286)) >> 3);
                  goto LABEL_313;
                }
              }
              v249 = &v174[v282 + 12];
              v234 = (char *)(v203 + v282 + 12);
            }
            if ((unint64_t)v249 < v590 && *(_DWORD *)v234 == *(_DWORD *)v249)
            {
              v249 += 4;
              v234 += 4;
            }
            if ((unint64_t)v249 < v586 && *(unsigned __int16 *)v234 == *(unsigned __int16 *)v249)
            {
              v249 += 2;
              v234 += 2;
            }
            if ((unint64_t)v249 < v9 && *v234 == *v249)
              ++v249;
            v243 = v249 - (unsigned __int8 *)v233;
            goto LABEL_313;
          }
        }
      }
      else
      {
        v203 = v153 + v186;
        if (*(_DWORD *)(v153 + v186) == *(_DWORD *)v174)
          goto LABEL_236;
      }
      _X8 = &v174[(uint64_t)&v174[-v5] >> 8];
      v174 = _X8 + 1;
      _X8 += 257;
      __asm { PRFM            #0, [X8] }
LABEL_370:
      v162 = v619;
      v163 = v607;
      if ((unint64_t)v174 >= v663)
      {
LABEL_780:
        a3 = v593;
        goto LABEL_781;
      }
    }
    v191 = (_DWORD)v174 - v153;
    if (v188 >= v160)
      v192 = (char *)v9;
    else
      v192 = v631;
    v193 = sub_1D4B5F19C(v174 + 5, (char *)(v189 + 4), v9, v192, v667);
    v194 = v190 - v5;
    v195 = *(_OWORD **)(a2 + 24);
    if (v190 <= (unint64_t)v639)
    {
      *v195 = *(_OWORD *)v5;
      v218 = *(_QWORD *)(a2 + 24);
      if ((unint64_t)v194 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v218 + v194;
        v223 = *(_QWORD *)(a2 + 8);
        LODWORD(v160) = v635;
        v184 = v191;
        goto LABEL_290;
      }
      *(_OWORD *)(v218 + 16) = *(_OWORD *)(v5 + 16);
      LODWORD(v160) = v635;
      v184 = v191;
      if (v194 >= 33)
      {
        v219 = v218 + v194;
        v220 = (_OWORD *)(v218 + 32);
        v221 = (__int128 *)(v5 + 48);
        do
        {
          *v220 = *(v221 - 1);
          v222 = *v221;
          v221 += 2;
          v220[1] = v222;
          v220 += 2;
        }
        while ((unint64_t)v220 < v219);
      }
    }
    else
    {
      sub_1D4B56E1C(v195, (char *)v5, v190, v639);
      LODWORD(v160) = v635;
      v184 = v191;
    }
    *(_QWORD *)(a2 + 24) += v194;
    v223 = *(_QWORD *)(a2 + 8);
    if ((unint64_t)v194 >= 0x10000)
    {
      v224 = (unint64_t)(v223 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v224;
    }
LABEL_290:
    v226 = v193 + 4;
    *(_WORD *)(v223 + 4) = v194;
    *(_DWORD *)v223 = 1;
    v241 = v193 + 1;
    v227 = v18;
    if ((v193 + 1) >> 16)
      goto LABEL_351;
    goto LABEL_352;
  }
  if (v7 == 6)
  {
    v660 = *(_QWORD *)(a1 + 112);
    v652 = *(_QWORD *)(a1 + 128);
    v292 = *(_QWORD *)(a1 + 8);
    v9 = (unint64_t)&a4[a5];
    v293 = (_DWORD)a4 + a5 - v292;
    v294 = 1 << *(_DWORD *)(a1 + 256);
    v295 = *(_DWORD *)(a1 + 24);
    v296 = v293 - v295;
    v297 = v293 - v294;
    if (v296 > v294 && *(_DWORD *)(a1 + 40) == 0)
      v299 = v297;
    else
      v299 = v295;
    v664 = v9 - 8;
    v18 = *a3;
    v17 = a3[1];
    v300 = *(_QWORD *)(a1 + 248);
    v301 = *(_QWORD *)(v300 + 112);
    v302 = *(_QWORD *)(v300 + 128);
    v303 = *(char **)v300;
    v600 = *(unsigned int *)(v300 + 24);
    v624 = *(_QWORD *)(v300 + 8);
    v304 = *(_DWORD *)(v300 + 264);
    v305 = *(_DWORD *)(v300 + 260);
    v668 = (unsigned __int8 *)(v292 + v299);
    v632 = v303;
    v306 = (_DWORD)a4 - (v624 + v600) - (v292 + v299) + (_DWORD)v303;
    if (*(_DWORD *)(a1 + 296))
    {
      if (v304 <= 0x3D)
      {
        v307 = 0;
        do
        {
          _X16 = v301 + v307;
          __asm { PRFM            #2, [X16] }
          v307 += 64;
        }
        while (v307 < 4 << v304);
      }
      if (v305 <= 0x3D)
      {
        v310 = 0;
        do
        {
          _X15 = v302 + v310;
          __asm { PRFM            #2, [X15] }
          v310 += 64;
        }
        while (v310 < 4 << v305);
      }
    }
    if (v306)
      v313 = a4;
    else
      v313 = a4 + 1;
    if ((unint64_t)v313 >= v664)
      goto LABEL_781;
    v575 = v624 + v600;
    v593 = a3;
    v656 = 64 - *(_DWORD *)(a1 + 264);
    v648 = 64 - *(_DWORD *)(a1 + 260);
    v616 = 56 - v304;
    v604 = 56 - v305;
    v644 = v299 - 1;
    v596 = v9 - 7;
    v587 = v9 - 1;
    v591 = v9 - 3;
    v636 = v299;
    v640 = (char *)(v9 - 32);
    v571 = v624 - 1;
    v579 = v292 + 16;
    v583 = v292 - 1;
    v612 = v299 + v624 - (_DWORD)v632;
    v628 = v9;
    v620 = v301;
    v608 = v302;
    while (1)
    {
      v314 = *(_QWORD *)v313;
      v315 = 0xCF1BBCDCB7A56463 * *(_QWORD *)v313;
      v316 = v315 >> v656;
      v317 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)v313;
      v318 = v317 >> v648;
      v319 = v315 >> v616;
      v320 = v317 >> v604;
      v321 = *(unsigned int *)(v301 + ((v315 >> v616 >> 6) & 0x3FFFFFFFFFFFFFCLL));
      v322 = *(unsigned int *)(v302 + ((v320 >> 6) & 0x3FFFFFFFFFFFFFCLL));
      v323 = (_DWORD)v313 - v292;
      v324 = *(unsigned int *)(v660 + 4 * (v315 >> v656));
      v325 = *(unsigned int *)(v652 + 4 * v318);
      v326 = (_DWORD)v313 - v292 + 1;
      v327 = (v326 - v18);
      v328 = v624 + v327 - v612;
      if (v327 >= v299)
        v328 = v292 + v327;
      *(_DWORD *)(v652 + 4 * v318) = v323;
      *(_DWORD *)(v660 + 4 * v316) = v323;
      if ((v644 - v327) >= 3)
      {
        v329 = (unint64_t)(v313 + 1);
        if (*(_DWORD *)v328 == *(_DWORD *)(v313 + 1))
          break;
      }
      if (v324 <= v299)
      {
        v340 = v321 >> 8;
        if (v319 == v321 && v340 > v600)
        {
          v377 = v624 + (v321 >> 8);
          if (*(_QWORD *)v377 == v314)
          {
            v378 = sub_1D4B5F19C((_QWORD *)v313 + 1, (char *)(v377 + 8), v9, v632, v668);
            v323 = (_DWORD)v313 - v292;
            v365 = v378 + 8;
            v366 = (_DWORD)v313 - (_DWORD)v292 - v612 - v340;
            if ((unint64_t)v313 > v5)
            {
              v367 = v313 - 1;
              v379 = (unsigned __int8 *)(v571 + v340);
              LODWORD(v299) = v636;
              while (*v367 == *v379)
              {
                ++v365;
                v369 = v367 - 1;
                if ((unint64_t)v367 > v5)
                {
                  --v367;
                  v63 = (unint64_t)v379-- > v575;
                  if (v63)
                    continue;
                }
LABEL_513:
                v329 = (unint64_t)(v369 + 1);
                goto LABEL_532;
              }
LABEL_531:
              v329 = (unint64_t)(v367 + 1);
LABEL_532:
              v392 = v640;
LABEL_533:
              v393 = v329 - v5;
              v394 = *(_OWORD **)(a2 + 24);
              if (v329 > (unint64_t)v392)
              {
                v395 = v323;
                v396 = (char *)v5;
                v397 = v366;
                sub_1D4B56E1C(v394, v396, v329, v392);
                v366 = v397;
                LODWORD(v299) = v636;
                goto LABEL_535;
              }
              *v394 = *(_OWORD *)v5;
              v399 = *(_QWORD *)(a2 + 24);
              if ((unint64_t)v393 <= 0x10)
              {
                *(_QWORD *)(a2 + 24) = v399 + v393;
                v362 = *(_QWORD *)(a2 + 8);
              }
              else
              {
                v395 = v323;
                *(_OWORD *)(v399 + 16) = *(_OWORD *)(v5 + 16);
                if (v393 >= 33)
                {
                  v400 = v399 + v393;
                  v401 = (_OWORD *)(v399 + 32);
                  v402 = (__int128 *)(v5 + 48);
                  do
                  {
                    *v401 = *(v402 - 1);
                    v403 = *v402;
                    v402 += 2;
                    v401[1] = v403;
                    v401 += 2;
                  }
                  while ((unint64_t)v401 < v400);
                }
LABEL_535:
                *(_QWORD *)(a2 + 24) += v393;
                v362 = *(_QWORD *)(a2 + 8);
                if ((unint64_t)v393 >= 0x10000)
                {
                  v398 = (unint64_t)(v362 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 1;
                  *(_DWORD *)(a2 + 76) = v398;
                }
                v323 = v395;
              }
              *(_WORD *)(v362 + 4) = v393;
              *(_DWORD *)v362 = v366 + 3;
              v380 = v365 - 3;
              v17 = v18;
              v18 = v366;
              if (v365 - 3 >= 0x10000)
              {
LABEL_545:
                v404 = (unint64_t)(v362 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v404;
                v18 = v366;
              }
LABEL_546:
              *(_WORD *)(v362 + 6) = v380;
              *(_QWORD *)(a2 + 8) = v362 + 8;
              v5 = v329 + v365;
              if (v329 + v365 <= v664)
              {
                v405 = *(_QWORD *)(v292 + (v323 + 2));
                *(_DWORD *)(v660 + 4 * ((0xCF1BBCDCB7A56463 * v405) >> v656)) = v323 + 2;
                *(_DWORD *)(v660 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v5 - 2)) >> v656)) = v5 - 2 - v292;
                *(_DWORD *)(v652 + 4 * ((0xCF1BBCDCBF9B0000 * v405) >> v648)) = v323 + 2;
                *(_DWORD *)(v652 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v5 - 1)) >> v648)) = v5 - 1 - v292;
                v406 = v18;
                v407 = v17;
                v9 = v628;
                while (1)
                {
                  v18 = v407;
                  v407 = v406;
                  v408 = v5 - v292;
                  v409 = (v5 - v292 - v18);
                  v410 = v624 - v612;
                  if (v409 >= v299)
                    v410 = v292;
                  if ((v644 - v409) < 3)
                    break;
                  v411 = v410 + v409;
                  if (*(_DWORD *)v411 != *(_DWORD *)v5)
                    break;
                  if (v409 >= v299)
                    v412 = (char *)v628;
                  else
                    v412 = v632;
                  v413 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v411 + 4), v628, v412, v668);
                  v414 = *(_OWORD **)(a2 + 24);
                  if (v5 <= (unint64_t)v640)
                    *v414 = *(_OWORD *)v5;
                  else
                    sub_1D4B56E1C(v414, (char *)v5, v5, v640);
                  LODWORD(v299) = v636;
                  v415 = *(_QWORD *)(a2 + 8);
                  *(_WORD *)(v415 + 4) = 0;
                  *(_DWORD *)v415 = 1;
                  if (v413 + 1 >= 0x10000)
                  {
                    v416 = (unint64_t)(v415 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 2;
                    *(_DWORD *)(a2 + 76) = v416;
                  }
                  *(_WORD *)(v415 + 6) = v413 + 1;
                  v417 = *(_QWORD *)v5;
                  *(_DWORD *)(v652 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v5) >> v648)) = v408;
                  *(_DWORD *)(v660 + 4 * ((0xCF1BBCDCB7A56463 * v417) >> v656)) = v408;
                  v5 += v413 + 4;
                  *(_QWORD *)(a2 + 8) = v415 + 8;
                  v406 = v18;
                  v17 = v407;
                  v313 = (unsigned __int8 *)v5;
                  if (v5 > v664)
                    goto LABEL_564;
                }
                v17 = v18;
                v18 = v406;
                v313 = (unsigned __int8 *)v5;
              }
              else
              {
                v313 = (unsigned __int8 *)(v329 + v365);
                v9 = v628;
              }
              goto LABEL_564;
            }
LABEL_491:
            v329 = (unint64_t)v313;
            LODWORD(v299) = v636;
            goto LABEL_532;
          }
        }
      }
      else
      {
        v335 = v292 + v324;
        if (*(_QWORD *)(v292 + v324) == v314)
        {
          v336 = (char *)(v313 + 8);
          v337 = (_QWORD *)(v335 + 8);
          if (v596 <= (unint64_t)(v313 + 8))
          {
            v364 = v313 + 8;
          }
          else
          {
            v338 = *(_QWORD *)v336 ^ *v337;
            if (v338)
            {
              v339 = __clz(__rbit64(v338)) >> 3;
              goto LABEL_457;
            }
            v383 = 0;
            v384 = v313 + 16;
            while (1)
            {
              v385 = &v384[v383];
              if ((unint64_t)&v384[v383] >= v596)
                break;
              v386 = *(_QWORD *)(v579 + v324 + v383);
              v383 += 8;
              v387 = *(_QWORD *)v385 ^ v386;
              if (v387)
              {
                v339 = v383 + (__clz(__rbit64(v387)) >> 3);
                goto LABEL_457;
              }
            }
            v364 = &v313[v383 + 16];
            v337 = (_QWORD *)(v579 + v324 + v383);
          }
          if ((unint64_t)v364 < v591 && *(_DWORD *)v337 == *(_DWORD *)v364)
          {
            v364 += 4;
            v337 = (_QWORD *)((char *)v337 + 4);
          }
          if ((unint64_t)v364 < v587 && *(unsigned __int16 *)v337 == *(unsigned __int16 *)v364)
          {
            v364 += 2;
            v337 = (_QWORD *)((char *)v337 + 2);
          }
          if ((unint64_t)v364 < v9 && *(unsigned __int8 *)v337 == *v364)
            ++v364;
          v339 = v364 - (unsigned __int8 *)v336;
LABEL_457:
          v365 = v339 + 8;
          v366 = ((_DWORD)v313 - v335);
          if ((unint64_t)v313 > v5)
          {
            v367 = v313 - 1;
            v368 = (unsigned __int8 *)(v583 + v324);
            while (*v367 == *v368)
            {
              ++v365;
              v369 = v367 - 1;
              if ((unint64_t)v367 > v5)
              {
                --v367;
                v63 = v368-- > v668;
                if (v63)
                  continue;
              }
              goto LABEL_513;
            }
            goto LABEL_531;
          }
          goto LABEL_514;
        }
      }
      if (v325 <= v299)
      {
        v353 = v322 >> 8;
        if (v320 == v322 && v353 > v600)
        {
          v342 = v624 + v353;
          if (*(_DWORD *)(v624 + v353) == *(_DWORD *)v313)
          {
            LODWORD(v325) = v353 + v612;
LABEL_430:
            v329 = (unint64_t)(v313 + 1);
            v343 = *(_QWORD *)(v313 + 1);
            v344 = (0xCF1BBCDCB7A56463 * v343) >> v656;
            v345 = (0xCF1BBCDCB7A56463 * v343) >> v616;
            v346 = *(unsigned int *)(v660 + 4 * v344);
            v347 = *(_DWORD *)(v620 + ((v345 >> 6) & 0x3FFFFFFFFFFFFFCLL));
            *(_DWORD *)(v660 + 4 * v344) = v326;
            if (v346 <= v299)
            {
              v370 = v347 >> 8;
              if (v345 == v347 && v370 > v600)
              {
                v418 = v370;
                v419 = v624 + v370;
                if (*(_QWORD *)v419 == v343)
                {
                  v365 = sub_1D4B5F19C(v313 + 9, (char *)(v419 + 8), v9, v632, v668) + 8;
                  v366 = v326 - v612 - v418;
                  if (v329 <= v5)
                  {
                    LODWORD(v299) = v636;
                    v392 = v640;
                    v323 = (_DWORD)v313 - v292;
                    goto LABEL_533;
                  }
                  v420 = (unsigned __int8 *)(v571 + v418);
                  LODWORD(v299) = v636;
                  v323 = (_DWORD)v313 - v292;
                  while (*v313 == *v420)
                  {
                    ++v365;
                    v367 = v313 - 1;
                    if ((unint64_t)v420 > v575)
                    {
                      --v420;
                      v63 = (unint64_t)v313-- > v5;
                      if (v63)
                        continue;
                    }
                    goto LABEL_531;
                  }
                  goto LABEL_574;
                }
              }
            }
            else
            {
              v348 = v292 + v346;
              if (*(_QWORD *)(v292 + v346) == v343)
              {
                v349 = (char *)(v313 + 9);
                v350 = (_QWORD *)(v348 + 8);
                if (v596 <= (unint64_t)(v313 + 9))
                {
                  v390 = v313 + 9;
                }
                else
                {
                  v351 = *(_QWORD *)v349 ^ *v350;
                  if (v351)
                  {
                    v352 = __clz(__rbit64(v351)) >> 3;
                    goto LABEL_526;
                  }
                  v426 = 0;
                  v427 = v313 + 17;
                  while (1)
                  {
                    v428 = &v427[v426];
                    if ((unint64_t)&v427[v426] >= v596)
                      break;
                    v429 = *(_QWORD *)(v579 + v346 + v426);
                    v426 += 8;
                    v430 = *(_QWORD *)v428 ^ v429;
                    if (v430)
                    {
                      v352 = v426 + (__clz(__rbit64(v430)) >> 3);
                      goto LABEL_526;
                    }
                  }
                  v390 = &v313[v426 + 17];
                  v350 = (_QWORD *)(v579 + v346 + v426);
                }
                if ((unint64_t)v390 < v591 && *(_DWORD *)v350 == *(_DWORD *)v390)
                {
                  v390 += 4;
                  v350 = (_QWORD *)((char *)v350 + 4);
                }
                if ((unint64_t)v390 < v587 && *(unsigned __int16 *)v350 == *(unsigned __int16 *)v390)
                {
                  v390 += 2;
                  v350 = (_QWORD *)((char *)v350 + 2);
                }
                if ((unint64_t)v390 < v9 && *(unsigned __int8 *)v350 == *v390)
                  ++v390;
                v352 = v390 - (unsigned __int8 *)v349;
LABEL_526:
                v365 = v352 + 8;
                v366 = (v329 - v348);
                if (v329 <= v5)
                  goto LABEL_532;
                v391 = (unsigned __int8 *)(v583 + v346);
                while (*v313 == *v391)
                {
                  ++v365;
                  v367 = v313 - 1;
                  if (v391 > v668)
                  {
                    --v391;
                    v63 = (unint64_t)v313-- > v5;
                    if (v63)
                      continue;
                  }
                  goto LABEL_531;
                }
LABEL_574:
                v329 = (unint64_t)(v313 + 1);
                goto LABEL_532;
              }
            }
            v372 = (char *)(v313 + 4);
            v373 = (char *)(v342 + 4);
            if (v325 < v299)
            {
              v374 = v342;
              v375 = sub_1D4B5F19C(v372, v373, v9, v632, v668);
              v323 = (_DWORD)v313 - v292;
              v365 = v375 + 4;
              v366 = ((_DWORD)v313 - v292 - v325);
              if ((unint64_t)v313 > v5 && v374 > v575)
              {
                v367 = v313 - 1;
                v376 = (unsigned __int8 *)(v374 - 1);
                LODWORD(v299) = v636;
                while (*v367 == *v376)
                {
                  ++v365;
                  v369 = v367 - 1;
                  if ((unint64_t)v367 > v5)
                  {
                    --v367;
                    v63 = (unint64_t)v376-- > v575;
                    if (v63)
                      continue;
                  }
                  goto LABEL_513;
                }
                goto LABEL_531;
              }
              goto LABEL_491;
            }
            if (v596 <= (unint64_t)v372)
            {
              v388 = v313 + 4;
            }
            else
            {
              v381 = *(_QWORD *)v372 ^ *(_QWORD *)v373;
              if (v381)
              {
                v382 = __clz(__rbit64(v381)) >> 3;
LABEL_507:
                v365 = v382 + 4;
                v366 = ((_DWORD)v313 - v342);
                if ((unint64_t)v313 > v5 && v342 > (unint64_t)v668)
                {
                  v367 = v313 - 1;
                  v389 = (unsigned __int8 *)(v342 - 1);
                  while (*v367 == *v389)
                  {
                    ++v365;
                    v369 = v367 - 1;
                    if ((unint64_t)v367 > v5)
                    {
                      --v367;
                      v63 = v389-- > v668;
                      if (v63)
                        continue;
                    }
                    goto LABEL_513;
                  }
                  goto LABEL_531;
                }
LABEL_514:
                v329 = (unint64_t)v313;
                goto LABEL_532;
              }
              v421 = 0;
              v422 = v313 + 12;
              while (1)
              {
                v423 = &v422[v421];
                if ((unint64_t)&v422[v421] >= v596)
                  break;
                v424 = *(_QWORD *)(v342 + 12 + v421);
                v421 += 8;
                v425 = *(_QWORD *)v423 ^ v424;
                if (v425)
                {
                  v382 = v421 + (__clz(__rbit64(v425)) >> 3);
                  goto LABEL_507;
                }
              }
              v388 = &v313[v421 + 12];
              v373 = (char *)(v342 + v421 + 12);
            }
            if ((unint64_t)v388 < v591 && *(_DWORD *)v373 == *(_DWORD *)v388)
            {
              v388 += 4;
              v373 += 4;
            }
            if ((unint64_t)v388 < v587 && *(unsigned __int16 *)v373 == *(unsigned __int16 *)v388)
            {
              v388 += 2;
              v373 += 2;
            }
            if ((unint64_t)v388 < v9 && *v373 == *v388)
              ++v388;
            v382 = v388 - (unsigned __int8 *)v372;
            goto LABEL_507;
          }
        }
      }
      else
      {
        v342 = v292 + v325;
        if (*(_DWORD *)(v292 + v325) == *(_DWORD *)v313)
          goto LABEL_430;
      }
      _X8 = &v313[(uint64_t)&v313[-v5] >> 8];
      v313 = _X8 + 1;
      _X8 += 257;
      __asm { PRFM            #0, [X8] }
LABEL_564:
      v301 = v620;
      v302 = v608;
      if ((unint64_t)v313 >= v664)
        goto LABEL_780;
    }
    v330 = (_DWORD)v313 - v292;
    if (v327 >= v299)
      v331 = (char *)v9;
    else
      v331 = v632;
    v332 = sub_1D4B5F19C(v313 + 5, (char *)(v328 + 4), v9, v331, v668);
    v333 = v329 - v5;
    v334 = *(_OWORD **)(a2 + 24);
    if (v329 <= (unint64_t)v640)
    {
      *v334 = *(_OWORD *)v5;
      v357 = *(_QWORD *)(a2 + 24);
      if ((unint64_t)v333 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v357 + v333;
        v362 = *(_QWORD *)(a2 + 8);
        LODWORD(v299) = v636;
        v323 = v330;
        goto LABEL_484;
      }
      *(_OWORD *)(v357 + 16) = *(_OWORD *)(v5 + 16);
      LODWORD(v299) = v636;
      v323 = v330;
      if (v333 >= 33)
      {
        v358 = v357 + v333;
        v359 = (_OWORD *)(v357 + 32);
        v360 = (__int128 *)(v5 + 48);
        do
        {
          *v359 = *(v360 - 1);
          v361 = *v360;
          v360 += 2;
          v359[1] = v361;
          v359 += 2;
        }
        while ((unint64_t)v359 < v358);
      }
    }
    else
    {
      sub_1D4B56E1C(v334, (char *)v5, v329, v640);
      LODWORD(v299) = v636;
      v323 = v330;
    }
    *(_QWORD *)(a2 + 24) += v333;
    v362 = *(_QWORD *)(a2 + 8);
    if ((unint64_t)v333 >= 0x10000)
    {
      v363 = (unint64_t)(v362 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v363;
    }
LABEL_484:
    v365 = v332 + 4;
    *(_WORD *)(v362 + 4) = v333;
    *(_DWORD *)v362 = 1;
    v380 = v332 + 1;
    v366 = v18;
    if ((v332 + 1) >> 16)
      goto LABEL_545;
    goto LABEL_546;
  }
  if (v7 != 7)
  {
    v661 = *(_QWORD *)(a1 + 112);
    v653 = *(_QWORD *)(a1 + 128);
    v431 = *(_QWORD *)(a1 + 8);
    v9 = (unint64_t)&a4[a5];
    v432 = (_DWORD)a4 + a5 - v431;
    v433 = 1 << *(_DWORD *)(a1 + 256);
    v434 = *(_DWORD *)(a1 + 24);
    v435 = v432 - v434;
    v436 = v432 - v433;
    if (v435 > v433 && *(_DWORD *)(a1 + 40) == 0)
      v438 = v436;
    else
      v438 = v434;
    v665 = v9 - 8;
    v18 = *a3;
    v17 = a3[1];
    v439 = *(_QWORD *)(a1 + 248);
    v440 = *(_QWORD *)(v439 + 112);
    v441 = *(_QWORD *)(v439 + 128);
    v442 = *(char **)v439;
    v601 = *(unsigned int *)(v439 + 24);
    v625 = *(_QWORD *)(v439 + 8);
    v443 = *(_DWORD *)(v439 + 264);
    v444 = *(_DWORD *)(v439 + 260);
    v669 = (unsigned __int8 *)(v431 + v438);
    v633 = v442;
    v445 = (_DWORD)a4 - (v625 + v601) - (v431 + v438) + (_DWORD)v442;
    if (*(_DWORD *)(a1 + 296))
    {
      if (v443 <= 0x3D)
      {
        v446 = 0;
        do
        {
          _X16 = v440 + v446;
          __asm { PRFM            #2, [X16] }
          v446 += 64;
        }
        while (v446 < 4 << v443);
      }
      if (v444 <= 0x3D)
      {
        v449 = 0;
        do
        {
          _X15 = v441 + v449;
          __asm { PRFM            #2, [X15] }
          v449 += 64;
        }
        while (v449 < 4 << v444);
      }
    }
    if (v445)
      v452 = a4;
    else
      v452 = a4 + 1;
    if ((unint64_t)v452 >= v665)
      goto LABEL_781;
    v576 = v625 + v601;
    v593 = a3;
    v657 = 64 - *(_DWORD *)(a1 + 264);
    v649 = 32 - *(_DWORD *)(a1 + 260);
    v617 = 56 - v443;
    v605 = 24 - v444;
    v645 = v438 - 1;
    v597 = v9 - 7;
    v588 = v9 - 1;
    v592 = v9 - 3;
    v637 = v438;
    v641 = (char *)(v9 - 32);
    v572 = v625 - 1;
    v580 = v431 + 16;
    v584 = v431 - 1;
    v613 = v438 + v625 - (_DWORD)v633;
    v629 = v9;
    v621 = v440;
    v609 = v441;
    while (1)
    {
      v453 = *(_QWORD *)v452;
      v454 = 0xCF1BBCDCB7A56463 * *(_QWORD *)v452;
      v455 = v454 >> v657;
      v456 = -1640531535 * *(_QWORD *)v452;
      v457 = v456 >> v649;
      v458 = v454 >> v617;
      v459 = v456 >> v605;
      v460 = *(unsigned int *)(v440 + ((v454 >> v617 >> 6) & 0x3FFFFFFFFFFFFFCLL));
      v461 = *(unsigned int *)(v441 + 4 * (v459 >> 8));
      v462 = (_DWORD)v452 - v431;
      v463 = *(unsigned int *)(v661 + 4 * (v454 >> v657));
      v464 = *(unsigned int *)(v653 + 4 * v457);
      v465 = (_DWORD)v452 - v431 + 1;
      v466 = (v465 - v18);
      v467 = v625 + v466 - v613;
      if (v466 >= v438)
        v467 = v431 + v466;
      *(_DWORD *)(v653 + 4 * v457) = v462;
      *(_DWORD *)(v661 + 4 * v455) = v462;
      if ((v645 - v466) >= 3)
      {
        v468 = (unint64_t)(v452 + 1);
        if (*(_DWORD *)v467 == *(_DWORD *)(v452 + 1))
          break;
      }
      if (v463 <= v438)
      {
        v479 = v460 >> 8;
        if (v458 == v460 && v479 > v601)
        {
          v516 = v625 + (v460 >> 8);
          if (*(_QWORD *)v516 == v453)
          {
            v517 = sub_1D4B5F19C((_QWORD *)v452 + 1, (char *)(v516 + 8), v9, v633, v669);
            v462 = (_DWORD)v452 - v431;
            v504 = v517 + 8;
            v505 = (_DWORD)v452 - (_DWORD)v431 - v613 - v479;
            if ((unint64_t)v452 > v5)
            {
              v506 = v452 - 1;
              v518 = (unsigned __int8 *)(v572 + v479);
              LODWORD(v438) = v637;
              while (*v506 == *v518)
              {
                ++v504;
                v508 = v506 - 1;
                if ((unint64_t)v506 > v5)
                {
                  --v506;
                  v63 = (unint64_t)v518-- > v576;
                  if (v63)
                    continue;
                }
LABEL_707:
                v468 = (unint64_t)(v508 + 1);
                goto LABEL_726;
              }
LABEL_725:
              v468 = (unint64_t)(v506 + 1);
LABEL_726:
              v531 = v641;
LABEL_727:
              v532 = v468 - v5;
              v533 = *(_OWORD **)(a2 + 24);
              if (v468 > (unint64_t)v531)
              {
                v534 = v462;
                v535 = (char *)v5;
                v536 = v505;
                sub_1D4B56E1C(v533, v535, v468, v531);
                v505 = v536;
                LODWORD(v438) = v637;
                goto LABEL_729;
              }
              *v533 = *(_OWORD *)v5;
              v538 = *(_QWORD *)(a2 + 24);
              if ((unint64_t)v532 <= 0x10)
              {
                *(_QWORD *)(a2 + 24) = v538 + v532;
                v501 = *(_QWORD *)(a2 + 8);
              }
              else
              {
                v534 = v462;
                *(_OWORD *)(v538 + 16) = *(_OWORD *)(v5 + 16);
                if (v532 >= 33)
                {
                  v539 = v538 + v532;
                  v540 = (_OWORD *)(v538 + 32);
                  v541 = (__int128 *)(v5 + 48);
                  do
                  {
                    *v540 = *(v541 - 1);
                    v542 = *v541;
                    v541 += 2;
                    v540[1] = v542;
                    v540 += 2;
                  }
                  while ((unint64_t)v540 < v539);
                }
LABEL_729:
                *(_QWORD *)(a2 + 24) += v532;
                v501 = *(_QWORD *)(a2 + 8);
                if ((unint64_t)v532 >= 0x10000)
                {
                  v537 = (unint64_t)(v501 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 1;
                  *(_DWORD *)(a2 + 76) = v537;
                }
                v462 = v534;
              }
              *(_WORD *)(v501 + 4) = v532;
              *(_DWORD *)v501 = v505 + 3;
              v519 = v504 - 3;
              v17 = v18;
              v18 = v505;
              if (v504 - 3 >= 0x10000)
              {
LABEL_739:
                v543 = (unint64_t)(v501 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v543;
                v18 = v505;
              }
LABEL_740:
              *(_WORD *)(v501 + 6) = v519;
              *(_QWORD *)(a2 + 8) = v501 + 8;
              v5 = v468 + v504;
              if (v468 + v504 <= v665)
              {
                *(_DWORD *)(v661 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v431 + (v462 + 2))) >> v657)) = v462 + 2;
                *(_DWORD *)(v661 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v5 - 2)) >> v657)) = v5 - 2 - v431;
                *(_DWORD *)(v653
                          + 4 * ((-1640531535 * *(_DWORD *)(v431 + (v462 + 2))) >> v649)) = v462 + 2;
                *(_DWORD *)(v653 + 4 * ((-1640531535 * *(_DWORD *)(v5 - 1)) >> v649)) = v5 - 1 - v431;
                v544 = v18;
                v545 = v17;
                v9 = v629;
                while (1)
                {
                  v18 = v545;
                  v545 = v544;
                  v546 = v5 - v431;
                  v547 = (v5 - v431 - v18);
                  v548 = v625 - v613;
                  if (v547 >= v438)
                    v548 = v431;
                  if ((v645 - v547) < 3)
                    break;
                  v549 = v548 + v547;
                  if (*(_DWORD *)v549 != *(_DWORD *)v5)
                    break;
                  if (v547 >= v438)
                    v550 = (char *)v629;
                  else
                    v550 = v633;
                  v551 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v549 + 4), v629, v550, v669);
                  v552 = *(_OWORD **)(a2 + 24);
                  if (v5 <= (unint64_t)v641)
                    *v552 = *(_OWORD *)v5;
                  else
                    sub_1D4B56E1C(v552, (char *)v5, v5, v641);
                  LODWORD(v438) = v637;
                  v553 = *(_QWORD *)(a2 + 8);
                  *(_WORD *)(v553 + 4) = 0;
                  *(_DWORD *)v553 = 1;
                  if (v551 + 1 >= 0x10000)
                  {
                    v554 = (unint64_t)(v553 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 2;
                    *(_DWORD *)(a2 + 76) = v554;
                  }
                  *(_DWORD *)(v653 + 4 * ((-1640531535 * *(_DWORD *)v5) >> v649)) = v546;
                  *(_DWORD *)(v661 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)v5) >> v657)) = v546;
                  v5 += v551 + 4;
                  *(_WORD *)(v553 + 6) = v551 + 1;
                  *(_QWORD *)(a2 + 8) = v553 + 8;
                  v544 = v18;
                  v17 = v545;
                  v452 = (unsigned __int8 *)v5;
                  if (v5 > v665)
                    goto LABEL_758;
                }
                v17 = v18;
                v18 = v544;
                v452 = (unsigned __int8 *)v5;
              }
              else
              {
                v452 = (unsigned __int8 *)(v468 + v504);
                v9 = v629;
              }
              goto LABEL_758;
            }
LABEL_685:
            v468 = (unint64_t)v452;
            LODWORD(v438) = v637;
            goto LABEL_726;
          }
        }
      }
      else
      {
        v474 = v431 + v463;
        if (*(_QWORD *)(v431 + v463) == v453)
        {
          v475 = (char *)(v452 + 8);
          v476 = (_QWORD *)(v474 + 8);
          if (v597 <= (unint64_t)(v452 + 8))
          {
            v503 = v452 + 8;
          }
          else
          {
            v477 = *(_QWORD *)v475 ^ *v476;
            if (v477)
            {
              v478 = __clz(__rbit64(v477)) >> 3;
              goto LABEL_651;
            }
            v522 = 0;
            v523 = v452 + 16;
            while (1)
            {
              v524 = &v523[v522];
              if ((unint64_t)&v523[v522] >= v597)
                break;
              v525 = *(_QWORD *)(v580 + v463 + v522);
              v522 += 8;
              v526 = *(_QWORD *)v524 ^ v525;
              if (v526)
              {
                v478 = v522 + (__clz(__rbit64(v526)) >> 3);
                goto LABEL_651;
              }
            }
            v503 = &v452[v522 + 16];
            v476 = (_QWORD *)(v580 + v463 + v522);
          }
          if ((unint64_t)v503 < v592 && *(_DWORD *)v476 == *(_DWORD *)v503)
          {
            v503 += 4;
            v476 = (_QWORD *)((char *)v476 + 4);
          }
          if ((unint64_t)v503 < v588 && *(unsigned __int16 *)v476 == *(unsigned __int16 *)v503)
          {
            v503 += 2;
            v476 = (_QWORD *)((char *)v476 + 2);
          }
          if ((unint64_t)v503 < v9 && *(unsigned __int8 *)v476 == *v503)
            ++v503;
          v478 = v503 - (unsigned __int8 *)v475;
LABEL_651:
          v504 = v478 + 8;
          v505 = ((_DWORD)v452 - v474);
          if ((unint64_t)v452 > v5)
          {
            v506 = v452 - 1;
            v507 = (unsigned __int8 *)(v584 + v463);
            while (*v506 == *v507)
            {
              ++v504;
              v508 = v506 - 1;
              if ((unint64_t)v506 > v5)
              {
                --v506;
                v63 = v507-- > v669;
                if (v63)
                  continue;
              }
              goto LABEL_707;
            }
            goto LABEL_725;
          }
          goto LABEL_708;
        }
      }
      if (v464 <= v438)
      {
        v492 = v461 >> 8;
        if (v459 == v461 && v492 > v601)
        {
          v481 = v625 + v492;
          if (*(_DWORD *)(v625 + v492) == *(_DWORD *)v452)
          {
            LODWORD(v464) = v492 + v613;
LABEL_624:
            v468 = (unint64_t)(v452 + 1);
            v482 = *(_QWORD *)(v452 + 1);
            v483 = (0xCF1BBCDCB7A56463 * v482) >> v657;
            v484 = (0xCF1BBCDCB7A56463 * v482) >> v617;
            v485 = *(unsigned int *)(v661 + 4 * v483);
            v486 = *(_DWORD *)(v621 + ((v484 >> 6) & 0x3FFFFFFFFFFFFFCLL));
            *(_DWORD *)(v661 + 4 * v483) = v465;
            if (v485 <= v438)
            {
              v509 = v486 >> 8;
              if (v484 == v486 && v509 > v601)
              {
                v555 = v509;
                v556 = v625 + v509;
                if (*(_QWORD *)v556 == v482)
                {
                  v504 = sub_1D4B5F19C(v452 + 9, (char *)(v556 + 8), v9, v633, v669) + 8;
                  v505 = v465 - v613 - v555;
                  if (v468 <= v5)
                  {
                    LODWORD(v438) = v637;
                    v531 = v641;
                    v462 = (_DWORD)v452 - v431;
                    goto LABEL_727;
                  }
                  v557 = (unsigned __int8 *)(v572 + v555);
                  LODWORD(v438) = v637;
                  v462 = (_DWORD)v452 - v431;
                  while (*v452 == *v557)
                  {
                    ++v504;
                    v506 = v452 - 1;
                    if ((unint64_t)v557 > v576)
                    {
                      --v557;
                      v63 = (unint64_t)v452-- > v5;
                      if (v63)
                        continue;
                    }
                    goto LABEL_725;
                  }
                  goto LABEL_768;
                }
              }
            }
            else
            {
              v487 = v431 + v485;
              if (*(_QWORD *)(v431 + v485) == v482)
              {
                v488 = (char *)(v452 + 9);
                v489 = (_QWORD *)(v487 + 8);
                if (v597 <= (unint64_t)(v452 + 9))
                {
                  v529 = v452 + 9;
                }
                else
                {
                  v490 = *(_QWORD *)v488 ^ *v489;
                  if (v490)
                  {
                    v491 = __clz(__rbit64(v490)) >> 3;
                    goto LABEL_720;
                  }
                  v563 = 0;
                  v564 = v452 + 17;
                  while (1)
                  {
                    v565 = &v564[v563];
                    if ((unint64_t)&v564[v563] >= v597)
                      break;
                    v566 = *(_QWORD *)(v580 + v485 + v563);
                    v563 += 8;
                    v567 = *(_QWORD *)v565 ^ v566;
                    if (v567)
                    {
                      v491 = v563 + (__clz(__rbit64(v567)) >> 3);
                      goto LABEL_720;
                    }
                  }
                  v529 = &v452[v563 + 17];
                  v489 = (_QWORD *)(v580 + v485 + v563);
                }
                if ((unint64_t)v529 < v592 && *(_DWORD *)v489 == *(_DWORD *)v529)
                {
                  v529 += 4;
                  v489 = (_QWORD *)((char *)v489 + 4);
                }
                if ((unint64_t)v529 < v588 && *(unsigned __int16 *)v489 == *(unsigned __int16 *)v529)
                {
                  v529 += 2;
                  v489 = (_QWORD *)((char *)v489 + 2);
                }
                if ((unint64_t)v529 < v9 && *(unsigned __int8 *)v489 == *v529)
                  ++v529;
                v491 = v529 - (unsigned __int8 *)v488;
LABEL_720:
                v504 = v491 + 8;
                v505 = (v468 - v487);
                if (v468 <= v5)
                  goto LABEL_726;
                v530 = (unsigned __int8 *)(v584 + v485);
                while (*v452 == *v530)
                {
                  ++v504;
                  v506 = v452 - 1;
                  if (v530 > v669)
                  {
                    --v530;
                    v63 = (unint64_t)v452-- > v5;
                    if (v63)
                      continue;
                  }
                  goto LABEL_725;
                }
LABEL_768:
                v468 = (unint64_t)(v452 + 1);
                goto LABEL_726;
              }
            }
            v511 = (char *)(v452 + 4);
            v512 = (char *)(v481 + 4);
            if (v464 < v438)
            {
              v513 = v481;
              v514 = sub_1D4B5F19C(v511, v512, v9, v633, v669);
              v462 = (_DWORD)v452 - v431;
              v504 = v514 + 4;
              v505 = ((_DWORD)v452 - v431 - v464);
              if ((unint64_t)v452 > v5 && v513 > v576)
              {
                v506 = v452 - 1;
                v515 = (unsigned __int8 *)(v513 - 1);
                LODWORD(v438) = v637;
                while (*v506 == *v515)
                {
                  ++v504;
                  v508 = v506 - 1;
                  if ((unint64_t)v506 > v5)
                  {
                    --v506;
                    v63 = (unint64_t)v515-- > v576;
                    if (v63)
                      continue;
                  }
                  goto LABEL_707;
                }
                goto LABEL_725;
              }
              goto LABEL_685;
            }
            if (v597 <= (unint64_t)v511)
            {
              v527 = v452 + 4;
            }
            else
            {
              v520 = *(_QWORD *)v511 ^ *(_QWORD *)v512;
              if (v520)
              {
                v521 = __clz(__rbit64(v520)) >> 3;
LABEL_701:
                v504 = v521 + 4;
                v505 = ((_DWORD)v452 - v481);
                if ((unint64_t)v452 > v5 && v481 > (unint64_t)v669)
                {
                  v506 = v452 - 1;
                  v528 = (unsigned __int8 *)(v481 - 1);
                  while (*v506 == *v528)
                  {
                    ++v504;
                    v508 = v506 - 1;
                    if ((unint64_t)v506 > v5)
                    {
                      --v506;
                      v63 = v528-- > v669;
                      if (v63)
                        continue;
                    }
                    goto LABEL_707;
                  }
                  goto LABEL_725;
                }
LABEL_708:
                v468 = (unint64_t)v452;
                goto LABEL_726;
              }
              v558 = 0;
              v559 = v452 + 12;
              while (1)
              {
                v560 = &v559[v558];
                if ((unint64_t)&v559[v558] >= v597)
                  break;
                v561 = *(_QWORD *)(v481 + 12 + v558);
                v558 += 8;
                v562 = *(_QWORD *)v560 ^ v561;
                if (v562)
                {
                  v521 = v558 + (__clz(__rbit64(v562)) >> 3);
                  goto LABEL_701;
                }
              }
              v527 = &v452[v558 + 12];
              v512 = (char *)(v481 + v558 + 12);
            }
            if ((unint64_t)v527 < v592 && *(_DWORD *)v512 == *(_DWORD *)v527)
            {
              v527 += 4;
              v512 += 4;
            }
            if ((unint64_t)v527 < v588 && *(unsigned __int16 *)v512 == *(unsigned __int16 *)v527)
            {
              v527 += 2;
              v512 += 2;
            }
            if ((unint64_t)v527 < v9 && *v512 == *v527)
              ++v527;
            v521 = v527 - (unsigned __int8 *)v511;
            goto LABEL_701;
          }
        }
      }
      else
      {
        v481 = v431 + v464;
        if (*(_DWORD *)(v431 + v464) == *(_DWORD *)v452)
          goto LABEL_624;
      }
      _X8 = &v452[(uint64_t)&v452[-v5] >> 8];
      v452 = _X8 + 1;
      _X8 += 257;
      __asm { PRFM            #0, [X8] }
LABEL_758:
      v440 = v621;
      v441 = v609;
      if ((unint64_t)v452 >= v665)
        goto LABEL_780;
    }
    v469 = (_DWORD)v452 - v431;
    if (v466 >= v438)
      v470 = (char *)v9;
    else
      v470 = v633;
    v471 = sub_1D4B5F19C(v452 + 5, (char *)(v467 + 4), v9, v470, v669);
    v472 = v468 - v5;
    v473 = *(_OWORD **)(a2 + 24);
    if (v468 <= (unint64_t)v641)
    {
      *v473 = *(_OWORD *)v5;
      v496 = *(_QWORD *)(a2 + 24);
      if ((unint64_t)v472 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v496 + v472;
        v501 = *(_QWORD *)(a2 + 8);
        LODWORD(v438) = v637;
        v462 = v469;
        goto LABEL_678;
      }
      *(_OWORD *)(v496 + 16) = *(_OWORD *)(v5 + 16);
      LODWORD(v438) = v637;
      v462 = v469;
      if (v472 >= 33)
      {
        v497 = v496 + v472;
        v498 = (_OWORD *)(v496 + 32);
        v499 = (__int128 *)(v5 + 48);
        do
        {
          *v498 = *(v499 - 1);
          v500 = *v499;
          v499 += 2;
          v498[1] = v500;
          v498 += 2;
        }
        while ((unint64_t)v498 < v497);
      }
    }
    else
    {
      sub_1D4B56E1C(v473, (char *)v5, v468, v641);
      LODWORD(v438) = v637;
      v462 = v469;
    }
    *(_QWORD *)(a2 + 24) += v472;
    v501 = *(_QWORD *)(a2 + 8);
    if ((unint64_t)v472 >= 0x10000)
    {
      v502 = (unint64_t)(v501 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v502;
    }
LABEL_678:
    v504 = v471 + 4;
    *(_WORD *)(v501 + 4) = v472;
    *(_DWORD *)v501 = 1;
    v519 = v471 + 1;
    v505 = v18;
    if ((v471 + 1) >> 16)
      goto LABEL_739;
    goto LABEL_740;
  }
  v658 = *(_QWORD *)(a1 + 112);
  v650 = *(_QWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (unint64_t)&a4[a5];
  v10 = (_DWORD)a4 + a5 - v8;
  v11 = 1 << *(_DWORD *)(a1 + 256);
  v12 = *(_DWORD *)(a1 + 24);
  v13 = v10 - v12;
  v14 = v10 - v11;
  if (v13 > v11 && *(_DWORD *)(a1 + 40) == 0)
    v16 = v14;
  else
    v16 = v12;
  v662 = v9 - 8;
  v18 = *a3;
  v17 = a3[1];
  v19 = *(_QWORD *)(a1 + 248);
  v20 = *(_QWORD *)(v19 + 112);
  v21 = *(_QWORD *)(v19 + 128);
  v22 = *(char **)v19;
  v598 = *(unsigned int *)(v19 + 24);
  v622 = *(_QWORD *)(v19 + 8);
  v23 = *(_DWORD *)(v19 + 264);
  v24 = *(_DWORD *)(v19 + 260);
  v666 = (unsigned __int8 *)(v8 + v16);
  v630 = v22;
  v25 = (_DWORD)a4 - (v622 + v598) - (v8 + v16) + (_DWORD)v22;
  if (*(_DWORD *)(a1 + 296))
  {
    if (v23 <= 0x3D)
    {
      v26 = 0;
      do
      {
        _X16 = v20 + v26;
        __asm { PRFM            #2, [X16] }
        v26 += 64;
      }
      while (v26 < 4 << v23);
    }
    if (v24 <= 0x3D)
    {
      v32 = 0;
      do
      {
        _X15 = v21 + v32;
        __asm { PRFM            #2, [X15] }
        v32 += 64;
      }
      while (v32 < 4 << v24);
    }
  }
  if (v25)
    v35 = a4;
  else
    v35 = a4 + 1;
  if ((unint64_t)v35 < v662)
  {
    v573 = v622 + v598;
    v593 = a3;
    v654 = 64 - *(_DWORD *)(a1 + 264);
    v646 = 64 - *(_DWORD *)(a1 + 260);
    v614 = 56 - v23;
    v602 = 56 - v24;
    v642 = v16 - 1;
    v594 = v9 - 7;
    v585 = v9 - 1;
    v589 = v9 - 3;
    v634 = v16;
    v638 = (char *)(v9 - 32);
    v569 = v622 - 1;
    v577 = v8 + 16;
    v581 = v8 - 1;
    v610 = v16 + v622 - (_DWORD)v630;
    v626 = v9;
    v618 = v20;
    v606 = v21;
    while (1)
    {
      v36 = *(_QWORD *)v35;
      v37 = 0xCF1BBCDCB7A56463 * *(_QWORD *)v35;
      v38 = v37 >> v654;
      v39 = 0xCF1BBCDCBFA56300 * *(_QWORD *)v35;
      v40 = v39 >> v646;
      v41 = v37 >> v614;
      v42 = v39 >> v602;
      v43 = *(unsigned int *)(v20 + ((v37 >> v614 >> 6) & 0x3FFFFFFFFFFFFFCLL));
      v44 = *(unsigned int *)(v21 + ((v42 >> 6) & 0x3FFFFFFFFFFFFFCLL));
      v45 = (_DWORD)v35 - v8;
      v46 = *(unsigned int *)(v658 + 4 * (v37 >> v654));
      v47 = *(unsigned int *)(v650 + 4 * v40);
      v48 = (_DWORD)v35 - v8 + 1;
      v49 = (v48 - v18);
      v50 = v622 + v49 - v610;
      if (v49 >= v16)
        v50 = v8 + v49;
      *(_DWORD *)(v650 + 4 * v40) = v45;
      *(_DWORD *)(v658 + 4 * v38) = v45;
      if ((v642 - v49) >= 3)
      {
        v51 = (unint64_t)(v35 + 1);
        if (*(_DWORD *)v50 == *(_DWORD *)(v35 + 1))
          break;
      }
      if (v46 <= v16)
      {
        v62 = v43 >> 8;
        v63 = v41 == v43 && v62 > v598;
        if (v63)
        {
          v99 = v622 + (v43 >> 8);
          if (*(_QWORD *)v99 == v36)
          {
            v100 = sub_1D4B5F19C((_QWORD *)v35 + 1, (char *)(v99 + 8), v9, v630, v666);
            v45 = (_DWORD)v35 - v8;
            v87 = v100 + 8;
            v88 = (_DWORD)v35 - (_DWORD)v8 - v610 - v62;
            if ((unint64_t)v35 > v5)
            {
              v89 = v35 - 1;
              v101 = (unsigned __int8 *)(v569 + v62);
              LODWORD(v16) = v634;
              while (*v89 == *v101)
              {
                ++v87;
                v91 = v89 - 1;
                if ((unint64_t)v89 > v5)
                {
                  --v89;
                  v63 = (unint64_t)v101-- > v573;
                  if (v63)
                    continue;
                }
LABEL_125:
                v51 = (unint64_t)(v91 + 1);
                goto LABEL_144;
              }
LABEL_143:
              v51 = (unint64_t)(v89 + 1);
LABEL_144:
              v114 = v638;
LABEL_145:
              v115 = v51 - v5;
              v116 = *(_OWORD **)(a2 + 24);
              if (v51 > (unint64_t)v114)
              {
                v117 = v45;
                v118 = (char *)v5;
                v119 = v88;
                sub_1D4B56E1C(v116, v118, v51, v114);
                v88 = v119;
                LODWORD(v16) = v634;
                goto LABEL_147;
              }
              *v116 = *(_OWORD *)v5;
              v121 = *(_QWORD *)(a2 + 24);
              if ((unint64_t)v115 <= 0x10)
              {
                *(_QWORD *)(a2 + 24) = v121 + v115;
                v84 = *(_QWORD *)(a2 + 8);
              }
              else
              {
                v117 = v45;
                *(_OWORD *)(v121 + 16) = *(_OWORD *)(v5 + 16);
                if (v115 >= 33)
                {
                  v122 = v121 + v115;
                  v123 = (_OWORD *)(v121 + 32);
                  v124 = (__int128 *)(v5 + 48);
                  do
                  {
                    *v123 = *(v124 - 1);
                    v125 = *v124;
                    v124 += 2;
                    v123[1] = v125;
                    v123 += 2;
                  }
                  while ((unint64_t)v123 < v122);
                }
LABEL_147:
                *(_QWORD *)(a2 + 24) += v115;
                v84 = *(_QWORD *)(a2 + 8);
                if ((unint64_t)v115 >= 0x10000)
                {
                  v120 = (unint64_t)(v84 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 1;
                  *(_DWORD *)(a2 + 76) = v120;
                }
                v45 = v117;
              }
              *(_WORD *)(v84 + 4) = v115;
              *(_DWORD *)v84 = v88 + 3;
              v102 = v87 - 3;
              v17 = v18;
              v18 = v88;
              if (v87 - 3 >= 0x10000)
              {
LABEL_157:
                v126 = (unint64_t)(v84 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v126;
                v18 = v88;
              }
LABEL_158:
              *(_WORD *)(v84 + 6) = v102;
              *(_QWORD *)(a2 + 8) = v84 + 8;
              v5 = v51 + v87;
              if (v51 + v87 <= v662)
              {
                v127 = *(_QWORD *)(v8 + (v45 + 2));
                *(_DWORD *)(v658 + 4 * ((0xCF1BBCDCB7A56463 * v127) >> v654)) = v45 + 2;
                *(_DWORD *)(v658 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v5 - 2)) >> v654)) = v5 - 2 - v8;
                *(_DWORD *)(v650 + 4 * ((0xCF1BBCDCBFA56300 * v127) >> v646)) = v45 + 2;
                *(_DWORD *)(v650 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(v5 - 1)) >> v646)) = v5 - 1 - v8;
                v128 = v18;
                v129 = v17;
                v9 = v626;
                while (1)
                {
                  v18 = v129;
                  v129 = v128;
                  v130 = v5 - v8;
                  v131 = (v5 - v8 - v18);
                  v132 = v622 - v610;
                  if (v131 >= v16)
                    v132 = v8;
                  if ((v642 - v131) < 3)
                    break;
                  v133 = v132 + v131;
                  if (*(_DWORD *)v133 != *(_DWORD *)v5)
                    break;
                  if (v131 >= v16)
                    v134 = (char *)v626;
                  else
                    v134 = v630;
                  v135 = sub_1D4B5F19C((_QWORD *)(v5 + 4), (char *)(v133 + 4), v626, v134, v666);
                  v136 = *(_OWORD **)(a2 + 24);
                  if (v5 <= (unint64_t)v638)
                    *v136 = *(_OWORD *)v5;
                  else
                    sub_1D4B56E1C(v136, (char *)v5, v5, v638);
                  LODWORD(v16) = v634;
                  v137 = *(_QWORD *)(a2 + 8);
                  *(_WORD *)(v137 + 4) = 0;
                  *(_DWORD *)v137 = 1;
                  if (v135 + 1 >= 0x10000)
                  {
                    v138 = (unint64_t)(v137 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 2;
                    *(_DWORD *)(a2 + 76) = v138;
                  }
                  *(_WORD *)(v137 + 6) = v135 + 1;
                  v139 = *(_QWORD *)v5;
                  *(_DWORD *)(v650 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)v5) >> v646)) = v130;
                  *(_DWORD *)(v658 + 4 * ((0xCF1BBCDCB7A56463 * v139) >> v654)) = v130;
                  v5 += v135 + 4;
                  *(_QWORD *)(a2 + 8) = v137 + 8;
                  v128 = v18;
                  v17 = v129;
                  v35 = (unsigned __int8 *)v5;
                  if (v5 > v662)
                    goto LABEL_176;
                }
                v17 = v18;
                v18 = v128;
                v35 = (unsigned __int8 *)v5;
              }
              else
              {
                v35 = (unsigned __int8 *)(v51 + v87);
                v9 = v626;
              }
              goto LABEL_176;
            }
LABEL_103:
            v51 = (unint64_t)v35;
            LODWORD(v16) = v634;
            goto LABEL_144;
          }
        }
      }
      else
      {
        v57 = v8 + v46;
        if (*(_QWORD *)(v8 + v46) == v36)
        {
          v58 = (char *)(v35 + 8);
          v59 = (_QWORD *)(v57 + 8);
          if (v594 <= (unint64_t)(v35 + 8))
          {
            v86 = v35 + 8;
          }
          else
          {
            v60 = *(_QWORD *)v58 ^ *v59;
            if (v60)
            {
              v61 = __clz(__rbit64(v60)) >> 3;
              goto LABEL_69;
            }
            v105 = 0;
            v106 = v35 + 16;
            while (1)
            {
              v107 = &v106[v105];
              if ((unint64_t)&v106[v105] >= v594)
                break;
              v108 = *(_QWORD *)(v577 + v46 + v105);
              v105 += 8;
              v109 = *(_QWORD *)v107 ^ v108;
              if (v109)
              {
                v61 = v105 + (__clz(__rbit64(v109)) >> 3);
                goto LABEL_69;
              }
            }
            v86 = &v35[v105 + 16];
            v59 = (_QWORD *)(v577 + v46 + v105);
          }
          if ((unint64_t)v86 < v589 && *(_DWORD *)v59 == *(_DWORD *)v86)
          {
            v86 += 4;
            v59 = (_QWORD *)((char *)v59 + 4);
          }
          if ((unint64_t)v86 < v585 && *(unsigned __int16 *)v59 == *(unsigned __int16 *)v86)
          {
            v86 += 2;
            v59 = (_QWORD *)((char *)v59 + 2);
          }
          if ((unint64_t)v86 < v9 && *(unsigned __int8 *)v59 == *v86)
            ++v86;
          v61 = v86 - (unsigned __int8 *)v58;
LABEL_69:
          v87 = v61 + 8;
          v88 = ((_DWORD)v35 - v57);
          if ((unint64_t)v35 > v5)
          {
            v89 = v35 - 1;
            v90 = (unsigned __int8 *)(v581 + v46);
            while (*v89 == *v90)
            {
              ++v87;
              v91 = v89 - 1;
              if ((unint64_t)v89 > v5)
              {
                --v89;
                v63 = v90-- > v666;
                if (v63)
                  continue;
              }
              goto LABEL_125;
            }
            goto LABEL_143;
          }
          goto LABEL_126;
        }
      }
      if (v47 <= v16)
      {
        v75 = v44 >> 8;
        if (v42 == v44 && v75 > v598)
        {
          v64 = v622 + v75;
          if (*(_DWORD *)(v622 + v75) == *(_DWORD *)v35)
          {
            LODWORD(v47) = v75 + v610;
LABEL_42:
            v51 = (unint64_t)(v35 + 1);
            v65 = *(_QWORD *)(v35 + 1);
            v66 = (0xCF1BBCDCB7A56463 * v65) >> v654;
            v67 = (0xCF1BBCDCB7A56463 * v65) >> v614;
            v68 = *(unsigned int *)(v658 + 4 * v66);
            v69 = *(_DWORD *)(v618 + ((v67 >> 6) & 0x3FFFFFFFFFFFFFCLL));
            *(_DWORD *)(v658 + 4 * v66) = v48;
            if (v68 <= v16)
            {
              v92 = v69 >> 8;
              if (v67 == v69 && v92 > v598)
              {
                v140 = v92;
                v141 = v622 + v92;
                if (*(_QWORD *)v141 == v65)
                {
                  v87 = sub_1D4B5F19C(v35 + 9, (char *)(v141 + 8), v9, v630, v666) + 8;
                  v88 = v48 - v610 - v140;
                  if (v51 <= v5)
                  {
                    LODWORD(v16) = v634;
                    v114 = v638;
                    v45 = (_DWORD)v35 - v8;
                    goto LABEL_145;
                  }
                  v142 = (unsigned __int8 *)(v569 + v140);
                  LODWORD(v16) = v634;
                  v45 = (_DWORD)v35 - v8;
                  while (*v35 == *v142)
                  {
                    ++v87;
                    v89 = v35 - 1;
                    if ((unint64_t)v142 > v573)
                    {
                      --v142;
                      v63 = (unint64_t)v35-- > v5;
                      if (v63)
                        continue;
                    }
                    goto LABEL_143;
                  }
                  goto LABEL_186;
                }
              }
            }
            else
            {
              v70 = v8 + v68;
              if (*(_QWORD *)(v8 + v68) == v65)
              {
                v71 = (char *)(v35 + 9);
                v72 = (_QWORD *)(v70 + 8);
                if (v594 <= (unint64_t)(v35 + 9))
                {
                  v112 = v35 + 9;
                }
                else
                {
                  v73 = *(_QWORD *)v71 ^ *v72;
                  if (v73)
                  {
                    v74 = __clz(__rbit64(v73)) >> 3;
                    goto LABEL_138;
                  }
                  v148 = 0;
                  v149 = v35 + 17;
                  while (1)
                  {
                    v150 = &v149[v148];
                    if ((unint64_t)&v149[v148] >= v594)
                      break;
                    v151 = *(_QWORD *)(v577 + v68 + v148);
                    v148 += 8;
                    v152 = *(_QWORD *)v150 ^ v151;
                    if (v152)
                    {
                      v74 = v148 + (__clz(__rbit64(v152)) >> 3);
                      goto LABEL_138;
                    }
                  }
                  v112 = &v35[v148 + 17];
                  v72 = (_QWORD *)(v577 + v68 + v148);
                }
                if ((unint64_t)v112 < v589 && *(_DWORD *)v72 == *(_DWORD *)v112)
                {
                  v112 += 4;
                  v72 = (_QWORD *)((char *)v72 + 4);
                }
                if ((unint64_t)v112 < v585 && *(unsigned __int16 *)v72 == *(unsigned __int16 *)v112)
                {
                  v112 += 2;
                  v72 = (_QWORD *)((char *)v72 + 2);
                }
                if ((unint64_t)v112 < v9 && *(unsigned __int8 *)v72 == *v112)
                  ++v112;
                v74 = v112 - (unsigned __int8 *)v71;
LABEL_138:
                v87 = v74 + 8;
                v88 = (v51 - v70);
                if (v51 <= v5)
                  goto LABEL_144;
                v113 = (unsigned __int8 *)(v581 + v68);
                while (*v35 == *v113)
                {
                  ++v87;
                  v89 = v35 - 1;
                  if (v113 > v666)
                  {
                    --v113;
                    v63 = (unint64_t)v35-- > v5;
                    if (v63)
                      continue;
                  }
                  goto LABEL_143;
                }
LABEL_186:
                v51 = (unint64_t)(v35 + 1);
                goto LABEL_144;
              }
            }
            v94 = (char *)(v35 + 4);
            v95 = (char *)(v64 + 4);
            if (v47 < v16)
            {
              v96 = v64;
              v97 = sub_1D4B5F19C(v94, v95, v9, v630, v666);
              v45 = (_DWORD)v35 - v8;
              v87 = v97 + 4;
              v88 = ((_DWORD)v35 - v8 - v47);
              if ((unint64_t)v35 > v5 && v96 > v573)
              {
                v89 = v35 - 1;
                v98 = (unsigned __int8 *)(v96 - 1);
                LODWORD(v16) = v634;
                while (*v89 == *v98)
                {
                  ++v87;
                  v91 = v89 - 1;
                  if ((unint64_t)v89 > v5)
                  {
                    --v89;
                    v63 = (unint64_t)v98-- > v573;
                    if (v63)
                      continue;
                  }
                  goto LABEL_125;
                }
                goto LABEL_143;
              }
              goto LABEL_103;
            }
            if (v594 <= (unint64_t)v94)
            {
              v110 = v35 + 4;
            }
            else
            {
              v103 = *(_QWORD *)v94 ^ *(_QWORD *)v95;
              if (v103)
              {
                v104 = __clz(__rbit64(v103)) >> 3;
LABEL_119:
                v87 = v104 + 4;
                v88 = ((_DWORD)v35 - v64);
                if ((unint64_t)v35 > v5 && v64 > (unint64_t)v666)
                {
                  v89 = v35 - 1;
                  v111 = (unsigned __int8 *)(v64 - 1);
                  while (*v89 == *v111)
                  {
                    ++v87;
                    v91 = v89 - 1;
                    if ((unint64_t)v89 > v5)
                    {
                      --v89;
                      v63 = v111-- > v666;
                      if (v63)
                        continue;
                    }
                    goto LABEL_125;
                  }
                  goto LABEL_143;
                }
LABEL_126:
                v51 = (unint64_t)v35;
                goto LABEL_144;
              }
              v143 = 0;
              v144 = v35 + 12;
              while (1)
              {
                v145 = &v144[v143];
                if ((unint64_t)&v144[v143] >= v594)
                  break;
                v146 = *(_QWORD *)(v64 + 12 + v143);
                v143 += 8;
                v147 = *(_QWORD *)v145 ^ v146;
                if (v147)
                {
                  v104 = v143 + (__clz(__rbit64(v147)) >> 3);
                  goto LABEL_119;
                }
              }
              v110 = &v35[v143 + 12];
              v95 = (char *)(v64 + v143 + 12);
            }
            if ((unint64_t)v110 < v589 && *(_DWORD *)v95 == *(_DWORD *)v110)
            {
              v110 += 4;
              v95 += 4;
            }
            if ((unint64_t)v110 < v585 && *(unsigned __int16 *)v95 == *(unsigned __int16 *)v110)
            {
              v110 += 2;
              v95 += 2;
            }
            if ((unint64_t)v110 < v9 && *v95 == *v110)
              ++v110;
            v104 = v110 - (unsigned __int8 *)v94;
            goto LABEL_119;
          }
        }
      }
      else
      {
        v64 = v8 + v47;
        if (*(_DWORD *)(v8 + v47) == *(_DWORD *)v35)
          goto LABEL_42;
      }
      _X8 = &v35[(uint64_t)&v35[-v5] >> 8];
      v35 = _X8 + 1;
      _X8 += 257;
      __asm { PRFM            #0, [X8] }
LABEL_176:
      v20 = v618;
      v21 = v606;
      if ((unint64_t)v35 >= v662)
        goto LABEL_780;
    }
    v52 = (_DWORD)v35 - v8;
    if (v49 >= v16)
      v53 = (char *)v9;
    else
      v53 = v630;
    v54 = sub_1D4B5F19C(v35 + 5, (char *)(v50 + 4), v9, v53, v666);
    v55 = v51 - v5;
    v56 = *(_OWORD **)(a2 + 24);
    if (v51 <= (unint64_t)v638)
    {
      *v56 = *(_OWORD *)v5;
      v79 = *(_QWORD *)(a2 + 24);
      if ((unint64_t)v55 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v79 + v55;
        v84 = *(_QWORD *)(a2 + 8);
        LODWORD(v16) = v634;
        v45 = v52;
        goto LABEL_96;
      }
      *(_OWORD *)(v79 + 16) = *(_OWORD *)(v5 + 16);
      LODWORD(v16) = v634;
      v45 = v52;
      if (v55 >= 33)
      {
        v80 = v79 + v55;
        v81 = (_OWORD *)(v79 + 32);
        v82 = (__int128 *)(v5 + 48);
        do
        {
          *v81 = *(v82 - 1);
          v83 = *v82;
          v82 += 2;
          v81[1] = v83;
          v81 += 2;
        }
        while ((unint64_t)v81 < v80);
      }
    }
    else
    {
      sub_1D4B56E1C(v56, (char *)v5, v51, v638);
      LODWORD(v16) = v634;
      v45 = v52;
    }
    *(_QWORD *)(a2 + 24) += v55;
    v84 = *(_QWORD *)(a2 + 8);
    if ((unint64_t)v55 >= 0x10000)
    {
      v85 = (unint64_t)(v84 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v85;
    }
LABEL_96:
    v87 = v54 + 4;
    *(_WORD *)(v84 + 4) = v55;
    *(_DWORD *)v84 = 1;
    v102 = v54 + 1;
    v88 = v18;
    if ((v54 + 1) >> 16)
      goto LABEL_157;
    goto LABEL_158;
  }
LABEL_781:
  *a3 = v18;
  a3[1] = v17;
  return v9 - v5;
}

unint64_t sub_1D4B5F184(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  int v5;

  if ((*(_DWORD *)(a1 + 272) - 5) >= 3)
    v5 = 4;
  else
    v5 = *(_DWORD *)(a1 + 272);
  return sub_1D4B5F3AC(a1, a2, a3, a4, a5, v5);
}

unint64_t sub_1D4B5F19C(_QWORD *a1, char *a2, unint64_t a3, char *a4, _QWORD *a5)
{
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;

  v5 = (char *)a1 + a4 - a2;
  if ((unint64_t)v5 >= a3)
    v5 = (char *)a3;
  v6 = (char *)a1;
  v7 = a2;
  if (v5 - 7 > (char *)a1)
  {
    v8 = *a1 ^ *(_QWORD *)a2;
    if (v8)
    {
      v9 = __clz(__rbit64(v8)) >> 3;
      goto LABEL_21;
    }
    v10 = 0;
    v11 = a1 + 1;
    while (1)
    {
      v12 = &v11[v10];
      if (&v11[v10] >= (_QWORD *)(v5 - 7))
        break;
      v13 = *(_QWORD *)&a2[v10 * 8 + 8];
      ++v10;
      v14 = *v12 ^ v13;
      if (v14)
      {
        v9 = v10 * 8 + (__clz(__rbit64(v14)) >> 3);
        goto LABEL_21;
      }
    }
    v6 = (char *)&a1[v10 + 1];
    v7 = &a2[v10 * 8 + 8];
  }
  if (v6 < v5 - 3 && *(_DWORD *)v7 == *(_DWORD *)v6)
  {
    v6 += 4;
    v7 += 4;
  }
  if (v6 < v5 - 1 && *(unsigned __int16 *)v7 == *(unsigned __int16 *)v6)
  {
    v6 += 2;
    v7 += 2;
  }
  if (v6 < v5 && *v7 == *v6)
    ++v6;
  v9 = v6 - (char *)a1;
LABEL_21:
  if (&a2[v9] == a4)
  {
    v15 = (char *)a1 + v9;
    if (a3 - 7 <= (unint64_t)a1 + v9)
    {
      v18 = (_DWORD *)((char *)a1 + v9);
    }
    else
    {
      v16 = *(_QWORD *)v15 ^ *a5;
      if (v16)
      {
        v17 = __clz(__rbit64(v16)) >> 3;
LABEL_36:
        v9 += v17;
        return v9;
      }
      v20 = (uint64_t)a1 + v9 + 8;
      while (1)
      {
        v21 = (_QWORD *)(v20 + v16);
        if (v20 + v16 >= a3 - 7)
          break;
        v22 = *(_QWORD *)((char *)a5 + v16 + 8);
        v16 += 8;
        v23 = *v21 ^ v22;
        if (v23)
        {
          v17 = v16 + (__clz(__rbit64(v23)) >> 3);
          goto LABEL_36;
        }
      }
      v18 = (_DWORD *)((char *)a1 + v9 + v16 + 8);
      a5 = (_QWORD *)((char *)a5 + v16 + 8);
    }
    if ((unint64_t)v18 < a3 - 3 && *(_DWORD *)a5 == *v18)
    {
      ++v18;
      a5 = (_QWORD *)((char *)a5 + 4);
    }
    if ((unint64_t)v18 < a3 - 1 && *(unsigned __int16 *)a5 == *(unsigned __int16 *)v18)
    {
      v18 = (_DWORD *)((char *)v18 + 2);
      a5 = (_QWORD *)((char *)a5 + 2);
    }
    if ((unint64_t)v18 < a3 && *(unsigned __int8 *)a5 == *(unsigned __int8 *)v18)
      v18 = (_DWORD *)((char *)v18 + 1);
    v17 = (char *)v18 - v15;
    goto LABEL_36;
  }
  return v9;
}

unint64_t sub_1D4B5F3AC(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5, int a6)
{
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unint64_t v54;
  BOOL v55;
  _QWORD *v56;
  char *v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  unsigned __int8 *v65;
  unint64_t v66;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  _OWORD *v71;
  __int128 *v72;
  __int128 v73;
  uint64_t v74;
  char *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unint64_t v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  unsigned __int8 *v84;
  uint64_t v85;
  _OWORD *v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _OWORD *v91;
  __int128 *v92;
  __int128 v93;
  unsigned __int8 *v94;
  char *v95;
  _OWORD *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _OWORD *v101;
  __int128 *v102;
  __int128 v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  char v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  _OWORD *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unsigned int v123;
  unint64_t v124;
  unsigned int *v126;
  unsigned __int8 *v127;
  unint64_t v128;
  uint64_t v129;
  unsigned int v131;
  unsigned int v132;
  int v133;
  int v134;
  char v135;
  uint64_t v136;
  unsigned int v137;
  char v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  int v142;
  char *v143;
  char *v144;
  unsigned __int8 *v145;
  int v146;
  uint64_t v147;
  int v148;
  uint64_t v149;

  v6 = (_QWORD *)a4;
  v7 = a4 + a5;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = a4 + a5 - v8;
  v10 = 1 << *(_DWORD *)(a1 + 256);
  v12 = *(_DWORD *)(a1 + 24);
  v11 = *(_DWORD *)(a1 + 28);
  v55 = v9 - v11 > v10;
  v13 = v9 - v10;
  if (v55 && *(_DWORD *)(a1 + 40) == 0)
    v15 = v13;
  else
    v15 = v11;
  if (v12 <= v15)
    v16 = v15;
  else
    v16 = v12;
  if (v15 >= v12)
    return sub_1D4B58AC4(a1, a2, a3, a4, a5);
  v17 = v7 - 8;
  v18 = *a3;
  v19 = a3[1];
  if (v7 - 8 <= (unint64_t)v6)
    goto LABEL_169;
  v145 = (unsigned __int8 *)(v8 + v16);
  v20 = *(_QWORD *)(a1 + 16);
  v126 = a3;
  v127 = (unsigned __int8 *)(v20 + v15);
  v147 = v20;
  v144 = (char *)(v20 + v16);
  v149 = *(_QWORD *)(a1 + 112);
  v21 = *(_DWORD *)(a1 + 260);
  v138 = 64 - v21;
  v22 = *(_QWORD *)(a1 + 128);
  v135 = 32 - v21;
  v148 = 64 - *(_DWORD *)(a1 + 264);
  v146 = v16 - 1;
  v142 = v16;
  v143 = (char *)(v7 - 32);
  v23 = a6 - 5;
  v24 = (unint64_t)v6;
  v136 = *(_QWORD *)(a1 + 8);
  v137 = v15;
  v140 = v22;
  v141 = v7 - 8;
  v139 = a6 - 5;
  do
  {
    v25 = v19;
    switch(v23)
    {
      case 0:
        v26 = *v6;
        v27 = -1157627904;
        goto LABEL_19;
      case 1:
        v26 = *v6;
        v27 = -1080360960;
        goto LABEL_19;
      case 2:
        v26 = *v6;
        v27 = -1079680256;
        goto LABEL_19;
      case 3:
        v26 = *v6;
        v27 = -1213897629;
LABEL_19:
        v28 = (v26 * (v27 | 0xCF1BBCDC00000000)) >> v138;
        break;
      default:
        v28 = (-1640531535 * *(_DWORD *)v6) >> v135;
        v26 = *v6;
        break;
    }
    v29 = *(unsigned int *)(v22 + 4 * v28);
    if (v29 >= v16)
      v30 = v8;
    else
      v30 = v147;
    v31 = (0xCF1BBCDCB7A56463 * v26) >> v148;
    v32 = *(unsigned int *)(v149 + 4 * v31);
    v33 = v8;
    if (v32 < v16)
      v8 = v147;
    v34 = (_DWORD)v6 - v33;
    v35 = (_DWORD)v6 - v33 + 1;
    v36 = (v35 - v18);
    if (v36 < v16)
      v33 = v147;
    *(_DWORD *)(v149 + 4 * v31) = v34;
    *(_DWORD *)(v22 + 4 * v28) = v34;
    if (v18 > v35 - v137
      || (v146 - v36) < 3
      || (v37 = (unint64_t)v6 + 1, *(_DWORD *)(v33 + v36) != *(_DWORD *)((char *)v6 + 1)))
    {
      v49 = v7;
      if (v32 > v137)
      {
        v50 = v8 + v32;
        if (*(_QWORD *)(v8 + v32) == v26)
        {
          v131 = v18;
          v133 = v34;
          if (v32 >= v16)
            v51 = (char *)v49;
          else
            v51 = v144;
          if (v32 >= v16)
            v52 = v145;
          else
            v52 = v127;
          v53 = v32;
          v54 = sub_1D4B5F19C(v6 + 1, (char *)(v50 + 8), v49, v51, v145) + 8;
          v55 = v50 > (unint64_t)v52 && (unint64_t)v6 > v24;
          v46 = a2;
          if (v55)
          {
            v78 = (unsigned __int8 *)v6 - 1;
            v79 = (unsigned __int8 *)(v8 + v53 - 1);
            v7 = v49;
            v58 = v53;
            while (*v78 == *v79)
            {
              ++v54;
              v80 = v78 - 1;
              if (v79 > v52)
              {
                --v79;
                v55 = (unint64_t)v78-- > v24;
                if (v55)
                  continue;
              }
              v6 = v80 + 1;
              goto LABEL_99;
            }
            v6 = v78 + 1;
LABEL_99:
            v56 = v6;
            v8 = v136;
            v57 = v143;
          }
          else
          {
            v56 = v6;
            v7 = v49;
            v8 = v136;
            v57 = v143;
            v58 = v53;
          }
          v85 = (uint64_t)v6 - v24;
          v86 = *(_OWORD **)(a2 + 24);
          if (v6 <= (_QWORD *)v57)
          {
            *v86 = *(_OWORD *)v24;
            v89 = *(_QWORD *)(a2 + 24);
            v17 = v141;
            LODWORD(v16) = v142;
            if ((unint64_t)v85 <= 0x10)
            {
              *(_QWORD *)(a2 + 24) = v89 + v85;
              v47 = *(_QWORD *)(a2 + 8);
              v23 = v139;
              v22 = v140;
              v25 = v131;
              v45 = v133;
              v44 = (unint64_t)v56;
LABEL_110:
              v39 = (v45 - v58);
LABEL_129:
              *(_WORD *)(v47 + 4) = v85;
              *(_DWORD *)v47 = v39 + 3;
              v81 = v54 - 3;
              goto LABEL_130;
            }
            *(_OWORD *)(v89 + 16) = *(_OWORD *)(v24 + 16);
            v23 = v139;
            v22 = v140;
            v25 = v131;
            v45 = v133;
            v44 = (unint64_t)v56;
            if (v85 >= 33)
            {
              v90 = v89 + v85;
              v91 = (_OWORD *)(v89 + 32);
              v92 = (__int128 *)(v24 + 48);
              do
              {
                *v91 = *(v92 - 1);
                v93 = *v92;
                v92 += 2;
                v91[1] = v93;
                v91 += 2;
              }
              while ((unint64_t)v91 < v90);
            }
          }
          else
          {
            v87 = v58;
            sub_1D4B56E1C(v86, (char *)v24, (unint64_t)v6, v57);
            v58 = v87;
            v17 = v141;
            LODWORD(v16) = v142;
            v23 = v139;
            v22 = v140;
            v25 = v131;
            v45 = v133;
            v44 = (unint64_t)v56;
          }
          *(_QWORD *)(a2 + 24) += v85;
          v47 = *(_QWORD *)(a2 + 8);
          if ((unint64_t)v85 >= 0x10000)
          {
            v88 = (unint64_t)(v47 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v88;
          }
          goto LABEL_110;
        }
      }
      if (v29 <= v137 || (v59 = v30 + v29, *(_DWORD *)(v30 + v29) != *(_DWORD *)v6))
      {
        v6 = (_QWORD *)((char *)v6 + ((uint64_t)((uint64_t)v6 - v24) >> 8) + 1);
        v7 = v49;
        v8 = v136;
        continue;
      }
      v60 = *(_QWORD *)((char *)v6 + 1);
      v61 = (0xCF1BBCDCB7A56463 * v60) >> v148;
      v62 = *(unsigned int *)(v149 + 4 * v61);
      v63 = v136;
      if (v62 < v16)
        v63 = v147;
      *(_DWORD *)(v149 + 4 * v61) = v35;
      v7 = v49;
      v132 = v18;
      v134 = v34;
      if (v62 > v137 && *(_QWORD *)(v63 + v62) == v60)
      {
        v129 = v63;
        if (v62 >= v16)
          v64 = (char *)v49;
        else
          v64 = v144;
        if (v62 >= v16)
          v65 = v145;
        else
          v65 = v127;
        v66 = v63 + v62;
        v54 = sub_1D4B5F19C((_QWORD *)((char *)v6 + 9), (char *)(v63 + v62 + 8), v49, v64, v145) + 8;
        v39 = (v35 - v62);
        if (v66 <= (unint64_t)v65 || (unint64_t)v6 + 1 <= v24)
        {
          v8 = v136;
          v68 = v143;
          v44 = (unint64_t)v6 + 1;
LABEL_84:
          v46 = a2;
          goto LABEL_118;
        }
        v46 = a2;
        v94 = (unsigned __int8 *)(v129 + v62 - 1);
        v8 = v136;
        v68 = v143;
        while (*(unsigned __int8 *)v6 == *v94)
        {
          ++v54;
          v95 = (char *)v6 - 1;
          if (v94 > v65)
          {
            --v94;
            v55 = (unint64_t)v6 > v24;
            v6 = (_QWORD *)((char *)v6 - 1);
            if (v55)
              continue;
          }
          v44 = (unint64_t)(v95 + 1);
          goto LABEL_118;
        }
        v44 = (unint64_t)v6 + 1;
      }
      else
      {
        v74 = v30;
        if (v29 >= v16)
          v75 = (char *)v49;
        else
          v75 = v144;
        if (v29 >= v16)
          v76 = v145;
        else
          v76 = v127;
        v54 = sub_1D4B5F19C((_QWORD *)((char *)v6 + 4), (char *)(v59 + 4), v49, v75, v145) + 4;
        v39 = (v134 - v29);
        if (v59 <= (unint64_t)v76 || (unint64_t)v6 <= v24)
        {
          v44 = (unint64_t)v6;
          v8 = v136;
          v68 = v143;
          goto LABEL_84;
        }
        v82 = (unsigned __int8 *)v6 - 1;
        v83 = (unsigned __int8 *)(v74 + v29 - 1);
        v8 = v136;
        v68 = v143;
        v46 = a2;
        while (*v82 == *v83)
        {
          ++v54;
          v84 = v82 - 1;
          if (v83 > v76)
          {
            --v83;
            v55 = (unint64_t)v82-- > v24;
            if (v55)
              continue;
          }
          v44 = (unint64_t)(v84 + 1);
          goto LABEL_118;
        }
        v44 = (unint64_t)(v82 + 1);
      }
LABEL_118:
      v85 = v44 - v24;
      v96 = *(_OWORD **)(v46 + 24);
      if (v44 <= (unint64_t)v68)
      {
        *v96 = *(_OWORD *)v24;
        v99 = *(_QWORD *)(v46 + 24);
        v17 = v141;
        LODWORD(v16) = v142;
        if ((unint64_t)v85 <= 0x10)
        {
          *(_QWORD *)(v46 + 24) = v99 + v85;
          v47 = *(_QWORD *)(v46 + 8);
          v23 = v139;
          v22 = v140;
          v25 = v132;
          v45 = v134;
          goto LABEL_129;
        }
        v97 = v44;
        *(_OWORD *)(v99 + 16) = *(_OWORD *)(v24 + 16);
        if (v85 >= 33)
        {
          v100 = v99 + v85;
          v101 = (_OWORD *)(v99 + 32);
          v102 = (__int128 *)(v24 + 48);
          do
          {
            *v101 = *(v102 - 1);
            v103 = *v102;
            v102 += 2;
            v101[1] = v103;
            v101 += 2;
          }
          while ((unint64_t)v101 < v100);
        }
      }
      else
      {
        v97 = v44;
        sub_1D4B56E1C(v96, (char *)v24, v44, v68);
        v17 = v141;
        LODWORD(v16) = v142;
      }
      *(_QWORD *)(v46 + 24) += v85;
      v47 = *(_QWORD *)(v46 + 8);
      v23 = v139;
      v22 = v140;
      v25 = v132;
      v45 = v134;
      if ((unint64_t)v85 >= 0x10000)
      {
        v98 = (unint64_t)(v47 - *(_QWORD *)v46) >> 3;
        *(_DWORD *)(v46 + 72) = 1;
        *(_DWORD *)(v46 + 76) = v98;
      }
      v44 = v97;
      goto LABEL_129;
    }
    v38 = v34;
    v39 = v18;
    if (v36 >= v16)
      v40 = (char *)v7;
    else
      v40 = v144;
    v41 = sub_1D4B5F19C((_QWORD *)((char *)v6 + 5), (char *)(v33 + v36 + 4), v7, v40, v145);
    v42 = v37 - v24;
    v43 = *(_OWORD **)(a2 + 24);
    v44 = v37;
    if (v37 > (unint64_t)v143)
    {
      v128 = v37;
      sub_1D4B56E1C(v43, (char *)v24, v37, v143);
      v8 = v136;
      v17 = v141;
      LODWORD(v16) = v142;
      v23 = v139;
      v22 = v140;
      v45 = v38;
      v46 = a2;
LABEL_35:
      *(_QWORD *)(v46 + 24) += v42;
      v47 = *(_QWORD *)(v46 + 8);
      if ((unint64_t)v42 >= 0x10000)
      {
        v48 = (unint64_t)(v47 - *(_QWORD *)v46) >> 3;
        *(_DWORD *)(v46 + 72) = 1;
        *(_DWORD *)(v46 + 76) = v48;
      }
      v44 = v128;
      goto LABEL_92;
    }
    *v43 = *(_OWORD *)v24;
    v69 = *(_QWORD *)(a2 + 24);
    v46 = a2;
    if ((unint64_t)v42 > 0x10)
    {
      v128 = v44;
      *(_OWORD *)(v69 + 16) = *(_OWORD *)(v24 + 16);
      v8 = v136;
      v17 = v141;
      LODWORD(v16) = v142;
      v23 = v139;
      v22 = v140;
      v45 = v38;
      if (v42 >= 33)
      {
        v70 = v69 + v42;
        v71 = (_OWORD *)(v69 + 32);
        v72 = (__int128 *)(v24 + 48);
        do
        {
          *v71 = *(v72 - 1);
          v73 = *v72;
          v72 += 2;
          v71[1] = v73;
          v71 += 2;
        }
        while ((unint64_t)v71 < v70);
      }
      goto LABEL_35;
    }
    *(_QWORD *)(a2 + 24) = v69 + v42;
    v47 = *(_QWORD *)(a2 + 8);
    v8 = v136;
    v17 = v141;
    LODWORD(v16) = v142;
    v23 = v139;
    v22 = v140;
    v45 = v38;
LABEL_92:
    v54 = v41 + 4;
    *(_WORD *)(v47 + 4) = v42;
    *(_DWORD *)v47 = 1;
    v81 = v41 + 1;
LABEL_130:
    if (v81 >> 16)
    {
      v104 = (unint64_t)(v47 - *(_QWORD *)v46) >> 3;
      *(_DWORD *)(v46 + 72) = 2;
      *(_DWORD *)(v46 + 76) = v104;
    }
    *(_WORD *)(v47 + 6) = v81;
    *(_QWORD *)(v46 + 8) = v47 + 8;
    v24 = v44 + v54;
    if (v44 + v54 <= v17)
    {
      v105 = (v45 + 2);
      v106 = *(_QWORD *)(v8 + v105);
      *(_DWORD *)(v149 + 4 * ((0xCF1BBCDCB7A56463 * v106) >> v148)) = v105;
      *(_DWORD *)(v149 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v24 - 2)) >> v148)) = v24 - 2 - v8;
      switch(v23)
      {
        case 0:
          v107 = -1157627904;
          goto LABEL_139;
        case 1:
          v107 = -1080360960;
          goto LABEL_139;
        case 2:
          v107 = -1079680256;
LABEL_139:
          v110 = v107 | 0xCF1BBCDC00000000;
          v111 = v138;
          *(_DWORD *)(v22 + 4 * ((v106 * v110) >> v138)) = v105;
          v108 = v24 - 1;
          v112 = *(_QWORD *)(v24 - 1);
          goto LABEL_141;
        case 3:
          v111 = v138;
          *(_DWORD *)(v22 + 4 * ((0xCF1BBCDCB7A56463 * v106) >> v138)) = v105;
          v108 = v24 - 1;
          v112 = *(_QWORD *)(v24 - 1);
          v110 = 0xCF1BBCDCB7A56463;
LABEL_141:
          v109 = (v112 * v110) >> v111;
          break;
        default:
          *(_DWORD *)(v22 + 4 * ((-1640531535 * *(_DWORD *)(v8 + v105)) >> v135)) = v105;
          v108 = v24 - 1;
          v109 = (-1640531535 * *(_DWORD *)(v24 - 1)) >> v135;
          break;
      }
      *(_DWORD *)(v22 + 4 * v109) = v108 - v8;
      while (1)
      {
        v19 = v39;
        v39 = v25;
        v113 = v24 - v8;
        v114 = (v24 - v8 - v39);
        v115 = v147;
        if (v114 >= v16)
          v115 = v8;
        if (v39 > v113 - v137)
          break;
        if ((v146 - v114) < 3)
          break;
        v116 = v115 + v114;
        if (*(_DWORD *)v116 != *(_DWORD *)v24)
          break;
        if (v114 >= v16)
          v117 = (char *)v7;
        else
          v117 = v144;
        v118 = sub_1D4B5F19C((_QWORD *)(v24 + 4), (char *)(v116 + 4), v7, v117, v145);
        v119 = *(_OWORD **)(v46 + 24);
        if (v24 <= (unint64_t)v143)
          *v119 = *(_OWORD *)v24;
        else
          sub_1D4B56E1C(v119, (char *)v24, v24, v143);
        v17 = v141;
        LODWORD(v16) = v142;
        v23 = v139;
        v22 = v140;
        v120 = *(_QWORD *)(v46 + 8);
        *(_WORD *)(v120 + 4) = 0;
        *(_DWORD *)v120 = 1;
        if (v118 + 1 >= 0x10000)
        {
          v121 = (unint64_t)(v120 - *(_QWORD *)v46) >> 3;
          *(_DWORD *)(v46 + 72) = 2;
          *(_DWORD *)(v46 + 76) = v121;
        }
        *(_WORD *)(v120 + 6) = v118 + 1;
        *(_QWORD *)(v46 + 8) = v120 + 8;
        switch(v139)
        {
          case 0:
            v122 = *(_QWORD *)v24;
            v123 = -1157627904;
            goto LABEL_162;
          case 1:
            v122 = *(_QWORD *)v24;
            v123 = -1080360960;
            goto LABEL_162;
          case 2:
            v122 = *(_QWORD *)v24;
            v123 = -1079680256;
            goto LABEL_162;
          case 3:
            v122 = *(_QWORD *)v24;
            v123 = -1213897629;
LABEL_162:
            v124 = (v122 * (v123 | 0xCF1BBCDC00000000)) >> v138;
            break;
          default:
            v124 = (-1640531535 * *(_DWORD *)v24) >> v135;
            v122 = *(_QWORD *)v24;
            break;
        }
        *(_DWORD *)(v140 + 4 * v124) = v113;
        *(_DWORD *)(v149 + 4 * ((0xCF1BBCDCB7A56463 * v122) >> v148)) = v113;
        v24 += v118 + 4;
        v25 = v19;
        v18 = v39;
        v6 = (_QWORD *)v24;
        if (v24 > v141)
          goto LABEL_167;
      }
      v18 = v19;
      v19 = v39;
    }
    else
    {
      v18 = v39;
      v19 = v25;
    }
    v6 = (_QWORD *)v24;
LABEL_167:
    ;
  }
  while ((unint64_t)v6 < v17);
  v6 = (_QWORD *)v24;
  a3 = v126;
LABEL_169:
  *a3 = v18;
  a3[1] = v19;
  return v7 - (_QWORD)v6;
}

uint64_t sub_1D4B5FEC8(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  char v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t i;
  unint64_t v19;
  unint64_t v20;
  int v21;
  char v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t j;
  char *v28;
  unint64_t v29;
  unint64_t v30;

  v4 = *(_QWORD *)(result + 112);
  v5 = *(_DWORD *)(result + 272);
  v6 = *(_QWORD *)(result + 8);
  v7 = *(unsigned int *)(result + 44);
  v8 = (_QWORD *)(v6 + v7);
  v9 = a2 - 6;
  v10 = v6 + v7 + 3;
  if (a4 == 1)
  {
    if (v10 < v9)
    {
      v11 = *(_DWORD *)(result + 264);
      result = (56 - v11);
      v12 = 24 - v11;
      v13 = ((_DWORD)v7 << 8) + 256;
      v14 = v5 - 5;
      do
      {
        switch(v14)
        {
          case 0:
            v15 = 0xCF1BBCDCBB000000 * *v8;
            goto LABEL_10;
          case 1:
            v15 = 0xCF1BBCDCBF9B0000 * *v8;
            goto LABEL_10;
          case 2:
            v15 = 0xCF1BBCDCBFA56300 * *v8;
            goto LABEL_10;
          case 3:
            v15 = 0xCF1BBCDCB7A56463 * *v8;
LABEL_10:
            v16 = v15 >> result;
            break;
          default:
            v16 = (-1640531535 * *(_DWORD *)v8) >> v12;
            break;
        }
        *(_DWORD *)(v4 + ((v16 >> 6) & 0x3FFFFFFFFFFFFFCLL)) = v16 | (((_DWORD)v8 - (_DWORD)v6) << 8);
        if (a3)
        {
          v17 = v13;
          for (i = 1; i != 3; ++i)
          {
            switch(v14)
            {
              case 0:
                v19 = 0xCF1BBCDCBB000000 * *(_QWORD *)((char *)v8 + i);
                goto LABEL_18;
              case 1:
                v19 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)((char *)v8 + i);
                goto LABEL_18;
              case 2:
                v19 = 0xCF1BBCDCBFA56300 * *(_QWORD *)((char *)v8 + i);
                goto LABEL_18;
              case 3:
                v19 = 0xCF1BBCDCB7A56463 * *(_QWORD *)((char *)v8 + i);
LABEL_18:
                v20 = v19 >> result;
                break;
              default:
                v20 = (-1640531535 * *(_DWORD *)((char *)v8 + i)) >> v12;
                break;
            }
            if (!*(_DWORD *)(v4 + 4 * (v20 >> 8)))
              *(_DWORD *)(v4 + 4 * (v20 >> 8)) = v17 + v20;
            v17 += 256;
          }
        }
        v10 += 3;
        v13 += 768;
        v8 = (_QWORD *)((char *)v8 + 3);
      }
      while (v10 < v9);
    }
  }
  else if (v10 < v9)
  {
    v21 = *(_DWORD *)(result + 264);
    result = (64 - v21);
    v22 = 32 - v21;
    v23 = v7 + 1;
    v24 = v5 - 5;
    do
    {
      switch(v24)
      {
        case 0:
          v25 = 0xCF1BBCDCBB000000 * *v8;
          goto LABEL_34;
        case 1:
          v25 = 0xCF1BBCDCBF9B0000 * *v8;
          goto LABEL_34;
        case 2:
          v25 = 0xCF1BBCDCBFA56300 * *v8;
          goto LABEL_34;
        case 3:
          v25 = 0xCF1BBCDCB7A56463 * *v8;
LABEL_34:
          v26 = v25 >> result;
          break;
        default:
          v26 = (-1640531535 * *(_DWORD *)v8) >> v22;
          break;
      }
      *(_DWORD *)(v4 + 4 * v26) = (_DWORD)v8 - v6;
      if (a3)
      {
        for (j = 0; j != 2; ++j)
        {
          v28 = (char *)v8 + j;
          switch(v24)
          {
            case 0:
              v29 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v28 + 1);
              goto LABEL_42;
            case 1:
              v29 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v28 + 1);
              goto LABEL_42;
            case 2:
              v29 = 0xCF1BBCDCBFA56300 * *(_QWORD *)(v28 + 1);
              goto LABEL_42;
            case 3:
              v29 = 0xCF1BBCDCB7A56463 * *(_QWORD *)(v28 + 1);
LABEL_42:
              v30 = v29 >> result;
              break;
            default:
              v30 = (-1640531535 * *(_DWORD *)(v28 + 1)) >> v22;
              break;
          }
          if (!*(_DWORD *)(v4 + 4 * v30))
            *(_DWORD *)(v4 + 4 * v30) = v23 + j;
        }
      }
      v10 += 3;
      v23 += 3;
      v8 = (_QWORD *)((char *)v8 + 3);
    }
    while (v10 < v9);
  }
  return result;
}

unint64_t sub_1D4B601F8(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  int v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  _BOOL4 v13;
  unsigned int v14;
  _BOOL4 v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  int v21;
  _BOOL4 v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  int *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  unint64_t v46;
  _BOOL8 v52;
  uint64_t v53;
  int v54;
  unsigned __int8 *v55;
  int v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  BOOL v62;
  char *v63;
  unsigned __int8 *v64;
  unint64_t v65;
  unint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  _OWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _OWORD *v74;
  __int128 *v75;
  __int128 v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  _DWORD *v85;
  _OWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  _BOOL4 v103;
  unsigned int v104;
  _BOOL4 v105;
  uint64_t v106;
  unint64_t v107;
  unsigned int v108;
  unsigned int v109;
  _BOOL4 v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  _DWORD *v120;
  uint64_t v121;
  int *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  int v128;
  unsigned int v129;
  int v130;
  int v131;
  uint64_t v132;
  int v133;
  int v134;
  unint64_t v135;
  _BOOL8 v138;
  uint64_t v139;
  int v140;
  unsigned __int8 *v141;
  int v142;
  uint64_t v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  unsigned __int8 *v146;
  unsigned __int8 *v147;
  char *v148;
  unsigned __int8 *v149;
  unint64_t v150;
  unint64_t v151;
  _DWORD *v152;
  uint64_t v153;
  _OWORD *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  _OWORD *v159;
  __int128 *v160;
  __int128 v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  char *v166;
  _DWORD *v167;
  unint64_t v168;
  unint64_t v169;
  _DWORD *v170;
  _OWORD *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  int v184;
  unsigned int v185;
  unsigned int v186;
  _BOOL4 v187;
  unsigned int v188;
  _BOOL4 v189;
  uint64_t v190;
  unint64_t v191;
  unsigned int v192;
  unsigned int v193;
  int v194;
  _BOOL4 v195;
  int v196;
  unsigned int v197;
  _DWORD *v198;
  uint64_t v200;
  int v201;
  unint64_t v202;
  char *v203;
  uint64_t v204;
  int *v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t v209;
  int v210;
  unsigned int v211;
  int v212;
  int v213;
  uint64_t v214;
  int v215;
  int v216;
  unint64_t v217;
  _BOOL8 v220;
  uint64_t v221;
  int v222;
  unsigned __int8 *v223;
  int v224;
  unsigned __int8 *v225;
  unsigned __int8 *v226;
  unsigned __int8 *v227;
  unsigned __int8 *v228;
  char *v229;
  unsigned __int8 *v230;
  unint64_t v231;
  unint64_t v232;
  _DWORD *v233;
  uint64_t v234;
  _OWORD *v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  _OWORD *v240;
  __int128 *v241;
  __int128 v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  char *v247;
  _QWORD *v248;
  unint64_t v249;
  unint64_t v250;
  _DWORD *v251;
  _OWORD *v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  int v265;
  unsigned int v266;
  unsigned int v267;
  _BOOL4 v268;
  unsigned int v269;
  _BOOL4 v270;
  uint64_t v271;
  unint64_t v272;
  unsigned int v273;
  unsigned int v274;
  int v275;
  _BOOL4 v276;
  int v277;
  unsigned int v278;
  _DWORD *v279;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  char *v284;
  uint64_t v285;
  int *v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  int v291;
  unsigned int v292;
  int v293;
  int v294;
  uint64_t v295;
  int v296;
  int v297;
  unint64_t v298;
  _BOOL8 v301;
  uint64_t v302;
  int v303;
  unsigned __int8 *v304;
  int v305;
  unsigned __int8 *v306;
  unsigned __int8 *v307;
  unsigned __int8 *v308;
  unsigned __int8 *v309;
  char *v310;
  unsigned __int8 *v311;
  unint64_t v312;
  unint64_t v313;
  _DWORD *v314;
  uint64_t v315;
  _OWORD *v316;
  uint64_t v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t v320;
  _OWORD *v321;
  __int128 *v322;
  __int128 v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  uint64_t v327;
  char *v328;
  _QWORD *v329;
  unint64_t v330;
  unint64_t v331;
  _DWORD *v332;
  _OWORD *v333;
  uint64_t v334;
  unint64_t v335;
  unint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  int v346;
  unsigned int v347;
  unsigned int v348;
  _BOOL4 v349;
  unsigned int v350;
  _BOOL4 v351;
  uint64_t v352;
  unint64_t v353;
  unsigned int v354;
  unsigned int v355;
  int v356;
  _BOOL4 v357;
  int v358;
  unsigned int v359;
  int *v360;
  uint64_t v362;
  int v363;
  unint64_t v364;
  char *v365;
  int v366;
  int *v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  int v372;
  unsigned int v373;
  int v374;
  int v375;
  int v376;
  int v377;
  int v378;
  unint64_t v379;
  _BOOL8 v382;
  uint64_t v383;
  int v384;
  unsigned __int8 *v385;
  int v386;
  unsigned __int8 *v387;
  unsigned __int8 *v388;
  unsigned __int8 *v389;
  unsigned __int8 *v390;
  char *v391;
  unsigned __int8 *v392;
  unint64_t v393;
  unint64_t v394;
  _DWORD *v395;
  uint64_t v396;
  _OWORD *v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  unint64_t v401;
  _OWORD *v402;
  __int128 *v403;
  __int128 v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  uint64_t v408;
  char *v409;
  _QWORD *v410;
  unint64_t v411;
  unint64_t v412;
  _DWORD *v413;
  _OWORD *v414;
  uint64_t v415;
  unint64_t v416;
  unint64_t v417;
  _QWORD *v418;
  uint64_t v419;
  unint64_t v420;
  uint64_t v421;
  uint64_t v422;
  _QWORD *v423;
  uint64_t v424;
  unint64_t v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int v428;
  uint64_t v430;
  unint64_t v431;
  int v432;
  unsigned int v433;
  unsigned int v434;
  _BOOL4 v435;
  unsigned int v436;
  _BOOL4 v437;
  uint64_t v438;
  unint64_t v439;
  unsigned int v440;
  unsigned int v441;
  _BOOL4 v442;
  int v443;
  unsigned int v444;
  uint64_t v446;
  unint64_t v447;
  unint64_t v448;
  char *v449;
  _DWORD *v450;
  uint64_t v451;
  int *v452;
  unint64_t v453;
  unint64_t v454;
  uint64_t v455;
  unint64_t v456;
  unint64_t v457;
  int v458;
  unsigned int v459;
  int v460;
  int v461;
  uint64_t v462;
  int v463;
  int v464;
  unint64_t v465;
  _BOOL8 v468;
  uint64_t v469;
  int v470;
  unsigned __int8 *v471;
  int v472;
  unsigned __int8 *v473;
  unsigned __int8 *v474;
  unsigned __int8 *v475;
  unsigned __int8 *v476;
  char *v477;
  unsigned __int8 *v478;
  unint64_t v479;
  unint64_t v480;
  _DWORD *v481;
  uint64_t v482;
  _OWORD *v483;
  uint64_t v484;
  unint64_t v485;
  uint64_t v486;
  unint64_t v487;
  _OWORD *v488;
  __int128 *v489;
  __int128 v490;
  unint64_t v491;
  unint64_t v492;
  unint64_t v493;
  uint64_t v494;
  char *v495;
  _QWORD *v496;
  unint64_t v497;
  unint64_t v498;
  _DWORD *v499;
  _OWORD *v500;
  uint64_t v501;
  unint64_t v502;
  unint64_t v503;
  _QWORD *v504;
  uint64_t v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  _QWORD *v509;
  uint64_t v510;
  unint64_t v511;
  uint64_t v512;
  unint64_t v513;
  int v514;
  unsigned int v515;
  unsigned int v516;
  _BOOL4 v517;
  unsigned int v518;
  _BOOL4 v519;
  uint64_t v520;
  unint64_t v521;
  unsigned int v522;
  unsigned int v523;
  _BOOL4 v524;
  int v525;
  unsigned int v526;
  uint64_t v528;
  unint64_t v529;
  unint64_t v530;
  char *v531;
  _DWORD *v532;
  uint64_t v533;
  int *v534;
  unint64_t v535;
  unint64_t v536;
  uint64_t v537;
  unint64_t v538;
  unint64_t v539;
  int v540;
  unsigned int v541;
  int v542;
  int v543;
  uint64_t v544;
  int v545;
  int v546;
  unint64_t v547;
  _BOOL8 v550;
  uint64_t v551;
  int v552;
  unsigned __int8 *v553;
  int v554;
  unsigned __int8 *v555;
  unsigned __int8 *v556;
  unsigned __int8 *v557;
  unsigned __int8 *v558;
  char *v559;
  unsigned __int8 *v560;
  unint64_t v561;
  unint64_t v562;
  _DWORD *v563;
  uint64_t v564;
  _OWORD *v565;
  uint64_t v566;
  unint64_t v567;
  uint64_t v568;
  unint64_t v569;
  _OWORD *v570;
  __int128 *v571;
  __int128 v572;
  unint64_t v573;
  unint64_t v574;
  unint64_t v575;
  uint64_t v576;
  char *v577;
  _QWORD *v578;
  unint64_t v579;
  unint64_t v580;
  _DWORD *v581;
  _OWORD *v582;
  uint64_t v583;
  unint64_t v584;
  unint64_t v585;
  _QWORD *v586;
  uint64_t v587;
  unint64_t v588;
  uint64_t v589;
  uint64_t v590;
  _QWORD *v591;
  uint64_t v592;
  unint64_t v593;
  uint64_t v594;
  unint64_t v595;
  int v596;
  unsigned int v597;
  unsigned int v598;
  _BOOL4 v599;
  unsigned int v600;
  _BOOL4 v601;
  uint64_t v602;
  unint64_t v603;
  unsigned int v604;
  unsigned int v605;
  _BOOL4 v606;
  int v607;
  unsigned int v608;
  uint64_t v609;
  uint64_t v611;
  unint64_t v612;
  unint64_t v613;
  char *v614;
  int *v615;
  int v616;
  int *v617;
  unint64_t v618;
  uint64_t v619;
  uint64_t v620;
  unint64_t v621;
  uint64_t v622;
  int v623;
  unsigned int v624;
  int v625;
  int v626;
  int v627;
  int v628;
  int v629;
  unint64_t v630;
  _BOOL8 v633;
  uint64_t v634;
  int v635;
  unsigned __int8 *v636;
  int v637;
  unsigned __int8 *v638;
  unsigned __int8 *v639;
  unsigned __int8 *v640;
  unsigned __int8 *v641;
  char *v642;
  unsigned __int8 *v643;
  unint64_t v644;
  unint64_t v645;
  _DWORD *v646;
  uint64_t v647;
  _OWORD *v648;
  uint64_t v649;
  unint64_t v650;
  uint64_t v651;
  unint64_t v652;
  _OWORD *v653;
  __int128 *v654;
  __int128 v655;
  unint64_t v656;
  unint64_t v657;
  unint64_t v658;
  uint64_t v659;
  char *v660;
  _QWORD *v661;
  unint64_t v662;
  unint64_t v663;
  _DWORD *v664;
  _OWORD *v665;
  uint64_t v666;
  unint64_t v667;
  unint64_t v668;
  _QWORD *v669;
  uint64_t v670;
  unint64_t v671;
  uint64_t v672;
  uint64_t v673;
  _QWORD *v674;
  uint64_t v675;
  unint64_t v676;
  unsigned int v677;
  unsigned int v678;
  unsigned int v679;
  BOOL v680;
  unint64_t v682;
  unint64_t v683;
  unint64_t v684;
  unint64_t v685;
  char v686;
  unint64_t v687;
  char v688;
  char v689;
  char v690;
  unint64_t v691;
  unint64_t v692;
  unint64_t v693;
  char v694;
  char v695;
  char v696;
  char v697;
  unint64_t v698;
  unint64_t v699;
  unint64_t v700;
  unint64_t v701;
  unsigned int v702;
  unsigned int v703;
  unsigned int v704;
  unsigned int v705;
  unsigned int v706;
  unsigned int v707;
  unsigned int v708;
  unsigned int v709;
  unsigned int v710;
  unsigned int v711;
  unsigned int v712;
  unsigned int v713;
  unsigned int v714;
  unsigned int v715;
  unint64_t v716;
  unint64_t v717;
  unint64_t v718;
  unint64_t v719;
  unint64_t v720;
  unint64_t v721;
  unint64_t v722;
  unint64_t v723;
  char *v724;
  char *v725;
  char *v726;
  char *v727;
  char *v728;
  char *v729;
  char *v730;
  char *v731;
  unint64_t v732;
  unint64_t v733;
  unint64_t v734;
  unint64_t v735;
  unint64_t v736;
  unint64_t v737;
  unint64_t v738;
  unint64_t v739;
  unint64_t v740;
  unint64_t v741;
  unint64_t v742;
  unint64_t v743;
  unint64_t v744;
  unint64_t v745;
  unint64_t v746;
  unint64_t v747;
  unint64_t v748;
  unint64_t v749;
  unint64_t v750;
  unint64_t v751;
  unint64_t v752;
  unint64_t v753;
  unint64_t v754;
  unint64_t v755;
  unint64_t v757;
  unint64_t v758;

  v5 = *(_DWORD *)(a1 + 272);
  v6 = *(_DWORD *)(a1 + 276);
  if (v6 >= 2)
  {
    v7 = v6 + 1;
    if (v5 != 5)
    {
      if (v5 != 6)
      {
        if (v5 == 7)
        {
          v8 = *(_QWORD *)(a1 + 8);
          v9 = a4 + a5;
          v10 = a4 + a5 - v8;
          v11 = 1 << *(_DWORD *)(a1 + 256);
          v12 = *(_DWORD *)(a1 + 24);
          v13 = v10 - v12 > v11;
          v14 = v10 - v11;
          v15 = *(_DWORD *)(a1 + 40) == 0;
          if (v15 && v13)
            v16 = v14;
          else
            v16 = v12;
          v17 = v9 - 8;
          v19 = *a3;
          v18 = a3[1];
          if (v8 + v16 == a4)
            v20 = a4 + 1;
          else
            v20 = a4;
          v21 = v20 - v8;
          v22 = (_DWORD)v20 - (_DWORD)v8 - v12 > v11;
          v23 = v20 - v8 - v11;
          if (!v15 || !v22)
            v23 = *(_DWORD *)(a1 + 24);
          v24 = v21 - v23;
          if (v18 <= v21 - v23)
            v25 = v18;
          else
            v25 = 0;
          if (v19 <= v24)
            v26 = v19;
          else
            v26 = 0;
          v27 = (_DWORD *)(v20 + v7);
          _X9 = (int *)(v20 + v7 + 1);
          v704 = *a3;
          v706 = a3[1];
          v702 = v24;
          if ((unint64_t)_X9 < v17)
          {
            v708 = v16;
            v716 = v9 - 8;
            v29 = *(_QWORD *)(a1 + 112);
            v698 = v7;
            LODWORD(v30) = 64 - *(_DWORD *)(a1 + 264);
            v31 = v9 - 7;
            v740 = v9 - 1;
            v748 = v9 - 3;
            v32 = (char *)(v9 - 32);
            v682 = v8 + v16;
            v724 = (char *)(v9 - 32);
            v732 = v9 - 7;
            v757 = v9;
            v686 = v30;
LABEL_21:
            v34 = (int *)(v20 + 1);
            v33 = *(_QWORD *)(v20 + 1);
            v35 = v20 + 128;
            v36 = (0xCF1BBCDCBFA56300 * *(_QWORD *)v20) >> v30;
            LODWORD(v37) = *(_DWORD *)(v29 + 4 * v36);
            while (1)
            {
              v38 = (0xCF1BBCDCBFA56300 * v33) >> v30;
              v39 = *(_DWORD *)((char *)v27 - v26);
              v40 = v20 - v8;
              *(_DWORD *)(v29 + 4 * v36) = v20 - v8;
              if ((_DWORD)v26 && *v27 == v39)
              {
                v52 = *((unsigned __int8 *)v27 - 1) == *((unsigned __int8 *)v27 - v26 - 1);
                if (*((unsigned __int8 *)v27 - 1) == *((unsigned __int8 *)v27 - v26 - 1))
                  v53 = 5;
                else
                  v53 = 4;
                v54 = (_DWORD)v34 - v8;
                v34 = (_DWORD *)((char *)v27 - v52);
                v55 = (unsigned __int8 *)((char *)v27 - v26 - v52);
                *(_DWORD *)(v29 + 4 * v38) = v54;
                v56 = 1;
                v57 = v26;
                v26 = v25;
                goto LABEL_53;
              }
              if (v37 >= v708)
              {
                v42 = *(_DWORD *)(v8 + v37);
                v41 = *(_DWORD *)v20;
              }
              else
              {
                v41 = *(_DWORD *)v20;
                v42 = *(_DWORD *)v20 ^ 1;
              }
              if (v41 == v42)
              {
                LODWORD(v27) = (_DWORD)v34;
                v36 = v38;
                v34 = (int *)v20;
                goto LABEL_43;
              }
              v37 = *(unsigned int *)(v29 + 4 * v38);
              v43 = *(_QWORD *)v27;
              v40 = (_DWORD)v34 - v8;
              *(_DWORD *)(v29 + 4 * v38) = (_DWORD)v34 - v8;
              if (v37 >= v708)
              {
                v45 = *(_DWORD *)(v8 + v37);
                v44 = *v34;
              }
              else
              {
                v44 = *v34;
                v45 = *v34 ^ 1;
              }
              v36 = (0xCF1BBCDCBFA56300 * v43) >> v30;
              if (v44 == v45)
                break;
              LODWORD(v37) = *(_DWORD *)(v29 + 4 * v36);
              v33 = *(_QWORD *)_X9;
              if ((unint64_t)v27 + v7 >= v35)
              {
                v46 = v7 + 1;
                __asm
                {
                  PRFM            #0, [X9,#0x40]
                  PRFM            #0, [X9,#0x80]
                }
                v35 += 128;
              }
              else
              {
                v46 = v7;
              }
              v34 = _X9;
              v20 = (unint64_t)v27;
              v27 = (_DWORD *)((char *)v27 + v7);
              _X9 = (int *)((char *)_X9 + v7);
              v7 = v46;
              if ((unint64_t)_X9 >= v17)
                goto LABEL_584;
            }
            if (v7 < 5)
LABEL_43:
              *(_DWORD *)(v29 + 4 * v36) = (_DWORD)v27 - v8;
            v55 = (unsigned __int8 *)(v8 + v37);
            v57 = ((_DWORD)v34 - (_DWORD)v55);
            v56 = v57 + 3;
            if ((unint64_t)v34 <= a4 || v37 <= v708)
            {
              v53 = 4;
            }
            else
            {
              v58 = (unsigned __int8 *)(v8 - 1 + v37);
              v59 = (unsigned __int8 *)v34 - 1;
              v53 = 4;
              while (*v59 == *v58)
              {
                ++v53;
                v60 = v58 - 1;
                v61 = v59 - 1;
                if ((unint64_t)v58 > v682)
                {
                  --v58;
                  v62 = (unint64_t)v59-- > a4;
                  if (v62)
                    continue;
                }
                v55 = v60 + 1;
                v34 = (int *)(v61 + 1);
                goto LABEL_53;
              }
              v55 = v58 + 1;
              v34 = (int *)(v59 + 1);
            }
LABEL_53:
            v63 = (char *)v34 + v53;
            v64 = &v55[v53];
            if (v31 <= (unint64_t)v34 + v53)
            {
              v67 = (int *)((char *)v34 + v53);
            }
            else
            {
              v65 = *(_QWORD *)v63 ^ *(_QWORD *)v64;
              if (v65)
              {
                v66 = __clz(__rbit64(v65)) >> 3;
                goto LABEL_67;
              }
              v93 = 0;
              v94 = (uint64_t)v34 + v53 + 8;
              while (1)
              {
                v95 = (_QWORD *)(v94 + v93);
                if (v94 + v93 >= v31)
                  break;
                v96 = *(_QWORD *)&v55[v53 + 8 + v93];
                v93 += 8;
                v97 = *v95 ^ v96;
                if (v97)
                {
                  v66 = v93 + (__clz(__rbit64(v97)) >> 3);
                  goto LABEL_67;
                }
              }
              v67 = (int *)((char *)v34 + v53 + v93 + 8);
              v64 = &v55[v53 + 8 + v93];
            }
            if ((unint64_t)v67 < v748 && *(_DWORD *)v64 == *v67)
            {
              ++v67;
              v64 += 4;
            }
            if ((unint64_t)v67 < v740 && *(unsigned __int16 *)v64 == *(unsigned __int16 *)v67)
            {
              v67 = (_DWORD *)((char *)v67 + 2);
              v64 += 2;
            }
            if ((unint64_t)v67 < v757 && *v64 == *(unsigned __int8 *)v67)
              v67 = (_DWORD *)((char *)v67 + 1);
            v66 = (char *)v67 - v63;
LABEL_67:
            v68 = (uint64_t)v34 - a4;
            v69 = *(_OWORD **)(a2 + 24);
            if (v34 <= (int *)v32)
            {
              *v69 = *(_OWORD *)a4;
              v72 = *(_QWORD *)(a2 + 24);
              if ((unint64_t)v68 <= 0x10)
              {
                *(_QWORD *)(a2 + 24) = v72 + v68;
                v70 = *(_QWORD *)(a2 + 8);
LABEL_78:
                v77 = v66 + v53;
                *(_WORD *)(v70 + 4) = v68;
                *(_DWORD *)v70 = v56;
                v78 = v66 + v53 - 3;
                if (v78 >= 0x10000)
                {
                  v79 = (unint64_t)(v70 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v79;
                }
                *(_WORD *)(v70 + 6) = v78;
                *(_QWORD *)(a2 + 8) = v70 + 8;
                v20 = (unint64_t)v34 + v77;
                if ((unint64_t)v34 + v77 > v17)
                {
                  v25 = v26;
                  v9 = v757;
                  goto LABEL_117;
                }
                *(_DWORD *)(v29 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(v8 + 2 + v40)) >> v30)) = v40 + 2;
                *(_DWORD *)(v29 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(v20 - 2)) >> v30)) = v20 - 2 - v8;
                v9 = v757;
                if (!(_DWORD)v26)
                {
                  v25 = 0;
                  goto LABEL_117;
                }
                v80 = v57;
                while (1)
                {
                  v25 = v80;
                  v80 = v26;
                  if (*(_DWORD *)v20 != *(_DWORD *)(v20 - v26))
                  {
                    v57 = v25;
                    v25 = v26;
LABEL_117:
                    v7 = v698;
                    v27 = (_DWORD *)(v20 + v698);
                    _X9 = (int *)(v20 + v698 + 1);
                    v26 = v57;
                    a4 = v20;
                    if ((unint64_t)_X9 >= v17)
                    {
LABEL_585:
                      v426 = v704;
                      if (v704 <= v702)
                        v426 = 0;
                      v427 = v706;
                      if (v706 <= v702)
                        v427 = 0;
                      if ((_DWORD)v57)
                        v428 = v57;
                      else
                        v428 = v426;
                      if ((_DWORD)v57)
                        _ZF = v426 == 0;
                      else
                        _ZF = 1;
                      if (_ZF)
                        v426 = v427;
                      if ((_DWORD)v25)
                        v426 = v25;
                      *a3 = v428;
                      a3[1] = v426;
                      return v9 - v20;
                    }
                    goto LABEL_21;
                  }
                  v81 = (char *)(v20 + 4);
                  v82 = (_QWORD *)(v20 + 4 - v26);
                  if (v31 <= v20 + 4)
                    break;
                  v83 = *(_QWORD *)v81 ^ *v82;
                  if (!v83)
                  {
                    v89 = v20 + 12;
                    while (1)
                    {
                      v90 = (_QWORD *)(v89 + v83);
                      if (v89 + v83 >= v31)
                        break;
                      v91 = *(_QWORD *)(v20 + 12 - v26 + v83);
                      v83 += 8;
                      v92 = *v90 ^ v91;
                      if (v92)
                      {
                        v84 = v83 + (__clz(__rbit64(v92)) >> 3);
                        goto LABEL_99;
                      }
                    }
                    v85 = (_DWORD *)(v20 + v83 + 12);
                    v82 = (_QWORD *)((char *)v85 - v26);
                    goto LABEL_89;
                  }
                  v84 = __clz(__rbit64(v83)) >> 3;
LABEL_99:
                  *(_DWORD *)(v29 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)v20) >> v30)) = v20 - v8;
                  v86 = *(_OWORD **)(a2 + 24);
                  if (v20 <= (unint64_t)v32)
                  {
                    *v86 = *(_OWORD *)v20;
                  }
                  else
                  {
                    sub_1D4B56E1C(v86, (char *)v20, v20, v32);
                    v32 = v724;
                    v31 = v732;
                    v17 = v716;
                  }
                  v87 = *(_QWORD *)(a2 + 8);
                  *(_WORD *)(v87 + 4) = 0;
                  *(_DWORD *)v87 = 1;
                  if (v84 + 1 >= 0x10000)
                  {
                    v88 = (unint64_t)(v87 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 2;
                    *(_DWORD *)(a2 + 76) = v88;
                  }
                  v20 += v84 + 4;
                  *(_WORD *)(v87 + 6) = v84 + 1;
                  *(_QWORD *)(a2 + 8) = v87 + 8;
                  v26 = v25;
                  v57 = v80;
                  if (v20 > v17)
                    goto LABEL_117;
                }
                v85 = (_DWORD *)(v20 + 4);
LABEL_89:
                if ((unint64_t)v85 < v748 && *(_DWORD *)v82 == *v85)
                {
                  ++v85;
                  v82 = (_QWORD *)((char *)v82 + 4);
                }
                if ((unint64_t)v85 < v740 && *(unsigned __int16 *)v82 == *(unsigned __int16 *)v85)
                {
                  v85 = (_DWORD *)((char *)v85 + 2);
                  v82 = (_QWORD *)((char *)v82 + 2);
                }
                if ((unint64_t)v85 < v757 && *(unsigned __int8 *)v82 == *(unsigned __int8 *)v85)
                  v85 = (_DWORD *)((char *)v85 + 1);
                v84 = (char *)v85 - v81;
                goto LABEL_99;
              }
              *(_OWORD *)(v72 + 16) = *(_OWORD *)(a4 + 16);
              if (v68 >= 33)
              {
                v73 = v72 + v68;
                v74 = (_OWORD *)(v72 + 32);
                v75 = (__int128 *)(a4 + 48);
                do
                {
                  *v74 = *(v75 - 1);
                  v76 = *v75;
                  v75 += 2;
                  v74[1] = v76;
                  v74 += 2;
                }
                while ((unint64_t)v74 < v73);
              }
            }
            else
            {
              v30 = v66;
              sub_1D4B56E1C(v69, (char *)a4, (unint64_t)v34, v32);
              v66 = v30;
              LOBYTE(v30) = v686;
              v17 = v716;
            }
            *(_QWORD *)(a2 + 24) += v68;
            v70 = *(_QWORD *)(a2 + 8);
            if ((unint64_t)v68 >= 0x10000)
            {
              v71 = (unint64_t)(v70 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v71;
            }
            v32 = v724;
            v31 = v732;
            goto LABEL_78;
          }
LABEL_583:
          v20 = a4;
          LODWORD(v57) = v26;
          goto LABEL_585;
        }
        v345 = *(_QWORD *)(a1 + 8);
        v9 = a4 + a5;
        v346 = a4 + a5 - v345;
        v347 = 1 << *(_DWORD *)(a1 + 256);
        v348 = *(_DWORD *)(a1 + 24);
        v349 = v346 - v348 > v347;
        v350 = v346 - v347;
        v351 = *(_DWORD *)(a1 + 40) == 0;
        if (v351 && v349)
          v352 = v350;
        else
          v352 = v348;
        v353 = v9 - 8;
        v355 = *a3;
        v354 = a3[1];
        if (v345 + v352 == a4)
          v20 = a4 + 1;
        else
          v20 = a4;
        v356 = v20 - v345;
        v357 = (_DWORD)v20 - (_DWORD)v345 - v348 > v347;
        v358 = v20 - v345 - v347;
        if (!v351 || !v357)
          v358 = *(_DWORD *)(a1 + 24);
        v359 = v356 - v358;
        if (v354 <= v356 - v358)
          v25 = v354;
        else
          v25 = 0;
        if (v355 <= v359)
          v26 = v355;
        else
          v26 = 0;
        v360 = (int *)(v20 + v7);
        _X9 = (int *)(v20 + v7 + 1);
        v704 = *a3;
        v706 = a3[1];
        v702 = v359;
        if ((unint64_t)_X9 >= v353)
          goto LABEL_583;
        v712 = v352;
        v720 = v9 - 8;
        v362 = *(_QWORD *)(a1 + 112);
        v701 = v7;
        v363 = 32 - *(_DWORD *)(a1 + 264);
        v364 = v9 - 7;
        v744 = v9 - 1;
        v752 = v9 - 3;
        v365 = (char *)(v9 - 32);
        v685 = v345 + v352;
        v728 = (char *)(v9 - 32);
        v736 = v9 - 7;
        v757 = v9;
        v690 = v363;
        while (1)
        {
          v367 = (int *)(v20 + 1);
          v366 = *(_DWORD *)(v20 + 1);
          v368 = v20 + 128;
          v369 = (-1640531535 * *(_DWORD *)v20) >> v363;
          LODWORD(v370) = *(_DWORD *)(v362 + 4 * v369);
          while (1)
          {
            v371 = (-1640531535 * v366) >> v363;
            v372 = *(int *)((char *)v360 - v26);
            v373 = v20 - v345;
            *(_DWORD *)(v362 + 4 * v369) = v20 - v345;
            v374 = *v360;
            if ((_DWORD)v26 && v374 == v372)
            {
              v382 = *((unsigned __int8 *)v360 - 1) == *((unsigned __int8 *)v360 - v26 - 1);
              if (*((unsigned __int8 *)v360 - 1) == *((unsigned __int8 *)v360 - v26 - 1))
                v383 = 5;
              else
                v383 = 4;
              v384 = (_DWORD)v367 - v345;
              v367 = (int *)((char *)v360 - v382);
              v385 = (unsigned __int8 *)((char *)v360 - v26 - v382);
              *(_DWORD *)(v362 + 4 * v371) = v384;
              v386 = 1;
              v57 = v26;
              v26 = v25;
              goto LABEL_516;
            }
            if (v370 >= v712)
            {
              v376 = *(_DWORD *)(v345 + v370);
              v375 = *(_DWORD *)v20;
            }
            else
            {
              v375 = *(_DWORD *)v20;
              v376 = *(_DWORD *)v20 ^ 1;
            }
            if (v375 == v376)
            {
              LODWORD(v360) = (_DWORD)v367;
              v369 = v371;
              v367 = (int *)v20;
              goto LABEL_506;
            }
            v370 = *(unsigned int *)(v362 + 4 * v371);
            v373 = (_DWORD)v367 - v345;
            *(_DWORD *)(v362 + 4 * v371) = (_DWORD)v367 - v345;
            if (v370 >= v712)
            {
              v378 = *(_DWORD *)(v345 + v370);
              v377 = *v367;
            }
            else
            {
              v377 = *v367;
              v378 = *v367 ^ 1;
            }
            v369 = (-1640531535 * v374) >> v363;
            if (v377 == v378)
              break;
            LODWORD(v370) = *(_DWORD *)(v362 + 4 * v369);
            v366 = *_X9;
            if ((unint64_t)v360 + v7 >= v368)
            {
              v379 = v7 + 1;
              __asm
              {
                PRFM            #0, [X9,#0x40]
                PRFM            #0, [X9,#0x80]
              }
              v368 += 128;
            }
            else
            {
              v379 = v7;
            }
            v367 = _X9;
            v20 = (unint64_t)v360;
            v360 = (int *)((char *)v360 + v7);
            _X9 = (int *)((char *)_X9 + v7);
            v7 = v379;
            if ((unint64_t)_X9 >= v353)
              goto LABEL_584;
          }
          if (v7 < 5)
LABEL_506:
            *(_DWORD *)(v362 + 4 * v369) = (_DWORD)v360 - v345;
          v385 = (unsigned __int8 *)(v345 + v370);
          v57 = ((_DWORD)v367 - (_DWORD)v385);
          v386 = v57 + 3;
          if ((unint64_t)v367 <= a4 || v370 <= v712)
          {
            v383 = 4;
          }
          else
          {
            v387 = (unsigned __int8 *)(v345 - 1 + v370);
            v388 = (unsigned __int8 *)v367 - 1;
            v383 = 4;
            while (*v388 == *v387)
            {
              ++v383;
              v389 = v387 - 1;
              v390 = v388 - 1;
              if ((unint64_t)v387 > v685)
              {
                --v387;
                v62 = (unint64_t)v388-- > a4;
                if (v62)
                  continue;
              }
              v385 = v389 + 1;
              v367 = (int *)(v390 + 1);
              goto LABEL_516;
            }
            v385 = v387 + 1;
            v367 = (int *)(v388 + 1);
          }
LABEL_516:
          v391 = (char *)v367 + v383;
          v392 = &v385[v383];
          if (v364 <= (unint64_t)v367 + v383)
          {
            v395 = (int *)((char *)v367 + v383);
          }
          else
          {
            v393 = *(_QWORD *)v391 ^ *(_QWORD *)v392;
            if (v393)
            {
              v394 = __clz(__rbit64(v393)) >> 3;
              goto LABEL_530;
            }
            v421 = 0;
            v422 = (uint64_t)v367 + v383 + 8;
            while (1)
            {
              v423 = (_QWORD *)(v422 + v421);
              if (v422 + v421 >= v364)
                break;
              v424 = *(_QWORD *)&v385[v383 + 8 + v421];
              v421 += 8;
              v425 = *v423 ^ v424;
              if (v425)
              {
                v394 = v421 + (__clz(__rbit64(v425)) >> 3);
                goto LABEL_530;
              }
            }
            v395 = (int *)((char *)v367 + v383 + v421 + 8);
            v392 = &v385[v383 + 8 + v421];
          }
          if ((unint64_t)v395 < v752 && *(_DWORD *)v392 == *v395)
          {
            ++v395;
            v392 += 4;
          }
          if ((unint64_t)v395 < v744 && *(unsigned __int16 *)v392 == *(unsigned __int16 *)v395)
          {
            v395 = (_DWORD *)((char *)v395 + 2);
            v392 += 2;
          }
          if ((unint64_t)v395 < v757 && *v392 == *(unsigned __int8 *)v395)
            v395 = (_DWORD *)((char *)v395 + 1);
          v394 = (char *)v395 - v391;
LABEL_530:
          v396 = (uint64_t)v367 - a4;
          v397 = *(_OWORD **)(a2 + 24);
          if (v367 <= (int *)v365)
          {
            *v397 = *(_OWORD *)a4;
            v400 = *(_QWORD *)(a2 + 24);
            if ((unint64_t)v396 <= 0x10)
            {
              *(_QWORD *)(a2 + 24) = v400 + v396;
              v398 = *(_QWORD *)(a2 + 8);
              goto LABEL_541;
            }
            *(_OWORD *)(v400 + 16) = *(_OWORD *)(a4 + 16);
            if (v396 >= 33)
            {
              v401 = v400 + v396;
              v402 = (_OWORD *)(v400 + 32);
              v403 = (__int128 *)(a4 + 48);
              do
              {
                *v402 = *(v403 - 1);
                v404 = *v403;
                v403 += 2;
                v402[1] = v404;
                v402 += 2;
              }
              while ((unint64_t)v402 < v401);
            }
          }
          else
          {
            v363 = v386;
            sub_1D4B56E1C(v397, (char *)a4, (unint64_t)v367, v365);
            v386 = v363;
            LOBYTE(v363) = v690;
            v353 = v720;
          }
          *(_QWORD *)(a2 + 24) += v396;
          v398 = *(_QWORD *)(a2 + 8);
          if ((unint64_t)v396 >= 0x10000)
          {
            v399 = (unint64_t)(v398 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v399;
          }
          v365 = v728;
          v364 = v736;
LABEL_541:
          v405 = v394 + v383;
          *(_WORD *)(v398 + 4) = v396;
          *(_DWORD *)v398 = v386;
          v406 = v394 + v383 - 3;
          if (v406 >= 0x10000)
          {
            v407 = (unint64_t)(v398 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v407;
          }
          *(_WORD *)(v398 + 6) = v406;
          *(_QWORD *)(a2 + 8) = v398 + 8;
          v20 = (unint64_t)v367 + v405;
          if ((unint64_t)v367 + v405 <= v353)
          {
            *(_DWORD *)(v362 + 4 * ((-1640531535 * *(_DWORD *)(v345 + 2 + v373)) >> v363)) = v373 + 2;
            *(_DWORD *)(v362 + 4 * ((-1640531535 * *(_DWORD *)(v20 - 2)) >> v363)) = v20 - 2 - v345;
            v9 = v757;
            if ((_DWORD)v26)
            {
              v408 = v57;
              while (1)
              {
                v25 = v408;
                v408 = v26;
                if (*(_DWORD *)v20 != *(_DWORD *)(v20 - v26))
                  break;
                v409 = (char *)(v20 + 4);
                v410 = (_QWORD *)(v20 + 4 - v26);
                if (v364 <= v20 + 4)
                {
                  v413 = (_DWORD *)(v20 + 4);
                }
                else
                {
                  v411 = *(_QWORD *)v409 ^ *v410;
                  if (v411)
                  {
                    v412 = __clz(__rbit64(v411)) >> 3;
                    goto LABEL_562;
                  }
                  v417 = v20 + 12;
                  while (1)
                  {
                    v418 = (_QWORD *)(v417 + v411);
                    if (v417 + v411 >= v364)
                      break;
                    v419 = *(_QWORD *)(v20 + 12 - v26 + v411);
                    v411 += 8;
                    v420 = *v418 ^ v419;
                    if (v420)
                    {
                      v412 = v411 + (__clz(__rbit64(v420)) >> 3);
                      goto LABEL_562;
                    }
                  }
                  v413 = (_DWORD *)(v20 + v411 + 12);
                  v410 = (_QWORD *)((char *)v413 - v26);
                }
                if ((unint64_t)v413 < v752 && *(_DWORD *)v410 == *v413)
                {
                  ++v413;
                  v410 = (_QWORD *)((char *)v410 + 4);
                }
                if ((unint64_t)v413 < v744 && *(unsigned __int16 *)v410 == *(unsigned __int16 *)v413)
                {
                  v413 = (_DWORD *)((char *)v413 + 2);
                  v410 = (_QWORD *)((char *)v410 + 2);
                }
                if ((unint64_t)v413 < v757 && *(unsigned __int8 *)v410 == *(unsigned __int8 *)v413)
                  v413 = (_DWORD *)((char *)v413 + 1);
                v412 = (char *)v413 - v409;
LABEL_562:
                *(_DWORD *)(v362 + 4 * ((-1640531535 * *(_DWORD *)v20) >> v363)) = v20 - v345;
                v414 = *(_OWORD **)(a2 + 24);
                if (v20 <= (unint64_t)v365)
                {
                  *v414 = *(_OWORD *)v20;
                }
                else
                {
                  sub_1D4B56E1C(v414, (char *)v20, v20, v365);
                  v365 = v728;
                  v364 = v736;
                  v353 = v720;
                }
                v415 = *(_QWORD *)(a2 + 8);
                *(_WORD *)(v415 + 4) = 0;
                *(_DWORD *)v415 = 1;
                if (v412 + 1 >= 0x10000)
                {
                  v416 = (unint64_t)(v415 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v416;
                }
                v20 += v412 + 4;
                *(_WORD *)(v415 + 6) = v412 + 1;
                *(_QWORD *)(a2 + 8) = v415 + 8;
                v26 = v25;
                v57 = v408;
                if (v20 > v353)
                  goto LABEL_580;
              }
              v57 = v25;
              v25 = v26;
            }
            else
            {
              v25 = 0;
            }
          }
          else
          {
            v25 = v26;
            v9 = v757;
          }
LABEL_580:
          v7 = v701;
          v360 = (int *)(v20 + v701);
          _X9 = (int *)(v20 + v701 + 1);
          v26 = v57;
          a4 = v20;
          if ((unint64_t)_X9 >= v353)
            goto LABEL_585;
        }
      }
      v264 = *(_QWORD *)(a1 + 8);
      v9 = a4 + a5;
      v265 = a4 + a5 - v264;
      v266 = 1 << *(_DWORD *)(a1 + 256);
      v267 = *(_DWORD *)(a1 + 24);
      v268 = v265 - v267 > v266;
      v269 = v265 - v266;
      v270 = *(_DWORD *)(a1 + 40) == 0;
      if (v270 && v268)
        v271 = v269;
      else
        v271 = v267;
      v272 = v9 - 8;
      v274 = *a3;
      v273 = a3[1];
      if (v264 + v271 == a4)
        v20 = a4 + 1;
      else
        v20 = a4;
      v275 = v20 - v264;
      v276 = (_DWORD)v20 - (_DWORD)v264 - v267 > v266;
      v277 = v20 - v264 - v266;
      if (!v270 || !v276)
        v277 = *(_DWORD *)(a1 + 24);
      v278 = v275 - v277;
      if (v273 <= v275 - v277)
        v25 = v273;
      else
        v25 = 0;
      if (v274 <= v278)
        v26 = v274;
      else
        v26 = 0;
      v279 = (_DWORD *)(v20 + v7);
      _X9 = (int *)(v20 + v7 + 1);
      v704 = *a3;
      v706 = a3[1];
      v702 = v278;
      if ((unint64_t)_X9 >= v272)
        goto LABEL_583;
      v711 = v271;
      v719 = v9 - 8;
      v281 = *(_QWORD *)(a1 + 112);
      v700 = v7;
      LODWORD(v282) = 64 - *(_DWORD *)(a1 + 264);
      v283 = v9 - 7;
      v743 = v9 - 1;
      v751 = v9 - 3;
      v284 = (char *)(v9 - 32);
      v684 = v264 + v271;
      v727 = (char *)(v9 - 32);
      v735 = v9 - 7;
      v757 = v9;
      v689 = v282;
      while (1)
      {
        v286 = (int *)(v20 + 1);
        v285 = *(_QWORD *)(v20 + 1);
        v287 = v20 + 128;
        v288 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)v20) >> v282;
        LODWORD(v289) = *(_DWORD *)(v281 + 4 * v288);
        while (1)
        {
          v290 = (0xCF1BBCDCBF9B0000 * v285) >> v282;
          v291 = *(_DWORD *)((char *)v279 - v26);
          v292 = v20 - v264;
          *(_DWORD *)(v281 + 4 * v288) = v20 - v264;
          if ((_DWORD)v26 && *v279 == v291)
          {
            v301 = *((unsigned __int8 *)v279 - 1) == *((unsigned __int8 *)v279 - v26 - 1);
            if (*((unsigned __int8 *)v279 - 1) == *((unsigned __int8 *)v279 - v26 - 1))
              v302 = 5;
            else
              v302 = 4;
            v303 = (_DWORD)v286 - v264;
            v286 = (_DWORD *)((char *)v279 - v301);
            v304 = (unsigned __int8 *)((char *)v279 - v26 - v301);
            *(_DWORD *)(v281 + 4 * v290) = v303;
            v305 = 1;
            v57 = v26;
            v26 = v25;
            goto LABEL_401;
          }
          if (v289 >= v711)
          {
            v294 = *(_DWORD *)(v264 + v289);
            v293 = *(_DWORD *)v20;
          }
          else
          {
            v293 = *(_DWORD *)v20;
            v294 = *(_DWORD *)v20 ^ 1;
          }
          if (v293 == v294)
          {
            LODWORD(v279) = (_DWORD)v286;
            v288 = v290;
            v286 = (int *)v20;
            goto LABEL_391;
          }
          v289 = *(unsigned int *)(v281 + 4 * v290);
          v295 = *(_QWORD *)v279;
          v292 = (_DWORD)v286 - v264;
          *(_DWORD *)(v281 + 4 * v290) = (_DWORD)v286 - v264;
          if (v289 >= v711)
          {
            v297 = *(_DWORD *)(v264 + v289);
            v296 = *v286;
          }
          else
          {
            v296 = *v286;
            v297 = *v286 ^ 1;
          }
          v288 = (0xCF1BBCDCBF9B0000 * v295) >> v282;
          if (v296 == v297)
            break;
          LODWORD(v289) = *(_DWORD *)(v281 + 4 * v288);
          v285 = *(_QWORD *)_X9;
          if ((unint64_t)v279 + v7 >= v287)
          {
            v298 = v7 + 1;
            __asm
            {
              PRFM            #0, [X9,#0x40]
              PRFM            #0, [X9,#0x80]
            }
            v287 += 128;
          }
          else
          {
            v298 = v7;
          }
          v286 = _X9;
          v20 = (unint64_t)v279;
          v279 = (_DWORD *)((char *)v279 + v7);
          _X9 = (int *)((char *)_X9 + v7);
          v7 = v298;
          if ((unint64_t)_X9 >= v272)
            goto LABEL_584;
        }
        if (v7 < 5)
LABEL_391:
          *(_DWORD *)(v281 + 4 * v288) = (_DWORD)v279 - v264;
        v304 = (unsigned __int8 *)(v264 + v289);
        v57 = ((_DWORD)v286 - (_DWORD)v304);
        v305 = v57 + 3;
        if ((unint64_t)v286 <= a4 || v289 <= v711)
        {
          v302 = 4;
        }
        else
        {
          v306 = (unsigned __int8 *)(v264 - 1 + v289);
          v307 = (unsigned __int8 *)v286 - 1;
          v302 = 4;
          while (*v307 == *v306)
          {
            ++v302;
            v308 = v306 - 1;
            v309 = v307 - 1;
            if ((unint64_t)v306 > v684)
            {
              --v306;
              v62 = (unint64_t)v307-- > a4;
              if (v62)
                continue;
            }
            v304 = v308 + 1;
            v286 = (int *)(v309 + 1);
            goto LABEL_401;
          }
          v304 = v306 + 1;
          v286 = (int *)(v307 + 1);
        }
LABEL_401:
        v310 = (char *)v286 + v302;
        v311 = &v304[v302];
        if (v283 <= (unint64_t)v286 + v302)
        {
          v314 = (int *)((char *)v286 + v302);
        }
        else
        {
          v312 = *(_QWORD *)v310 ^ *(_QWORD *)v311;
          if (v312)
          {
            v313 = __clz(__rbit64(v312)) >> 3;
            goto LABEL_415;
          }
          v340 = 0;
          v341 = (uint64_t)v286 + v302 + 8;
          while (1)
          {
            v342 = (_QWORD *)(v341 + v340);
            if (v341 + v340 >= v283)
              break;
            v343 = *(_QWORD *)&v304[v302 + 8 + v340];
            v340 += 8;
            v344 = *v342 ^ v343;
            if (v344)
            {
              v313 = v340 + (__clz(__rbit64(v344)) >> 3);
              goto LABEL_415;
            }
          }
          v314 = (int *)((char *)v286 + v302 + v340 + 8);
          v311 = &v304[v302 + 8 + v340];
        }
        if ((unint64_t)v314 < v751 && *(_DWORD *)v311 == *v314)
        {
          ++v314;
          v311 += 4;
        }
        if ((unint64_t)v314 < v743 && *(unsigned __int16 *)v311 == *(unsigned __int16 *)v314)
        {
          v314 = (_DWORD *)((char *)v314 + 2);
          v311 += 2;
        }
        if ((unint64_t)v314 < v757 && *v311 == *(unsigned __int8 *)v314)
          v314 = (_DWORD *)((char *)v314 + 1);
        v313 = (char *)v314 - v310;
LABEL_415:
        v315 = (uint64_t)v286 - a4;
        v316 = *(_OWORD **)(a2 + 24);
        if (v286 <= (int *)v284)
        {
          *v316 = *(_OWORD *)a4;
          v319 = *(_QWORD *)(a2 + 24);
          if ((unint64_t)v315 <= 0x10)
          {
            *(_QWORD *)(a2 + 24) = v319 + v315;
            v317 = *(_QWORD *)(a2 + 8);
            goto LABEL_426;
          }
          *(_OWORD *)(v319 + 16) = *(_OWORD *)(a4 + 16);
          if (v315 >= 33)
          {
            v320 = v319 + v315;
            v321 = (_OWORD *)(v319 + 32);
            v322 = (__int128 *)(a4 + 48);
            do
            {
              *v321 = *(v322 - 1);
              v323 = *v322;
              v322 += 2;
              v321[1] = v323;
              v321 += 2;
            }
            while ((unint64_t)v321 < v320);
          }
        }
        else
        {
          v282 = v313;
          sub_1D4B56E1C(v316, (char *)a4, (unint64_t)v286, v284);
          v313 = v282;
          LOBYTE(v282) = v689;
          v272 = v719;
        }
        *(_QWORD *)(a2 + 24) += v315;
        v317 = *(_QWORD *)(a2 + 8);
        if ((unint64_t)v315 >= 0x10000)
        {
          v318 = (unint64_t)(v317 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 1;
          *(_DWORD *)(a2 + 76) = v318;
        }
        v284 = v727;
        v283 = v735;
LABEL_426:
        v324 = v313 + v302;
        *(_WORD *)(v317 + 4) = v315;
        *(_DWORD *)v317 = v305;
        v325 = v313 + v302 - 3;
        if (v325 >= 0x10000)
        {
          v326 = (unint64_t)(v317 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v326;
        }
        *(_WORD *)(v317 + 6) = v325;
        *(_QWORD *)(a2 + 8) = v317 + 8;
        v20 = (unint64_t)v286 + v324;
        if ((unint64_t)v286 + v324 <= v272)
        {
          *(_DWORD *)(v281 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v264 + 2 + v292)) >> v282)) = v292 + 2;
          *(_DWORD *)(v281 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v20 - 2)) >> v282)) = v20 - 2 - v264;
          v9 = v757;
          if ((_DWORD)v26)
          {
            v327 = v57;
            while (1)
            {
              v25 = v327;
              v327 = v26;
              if (*(_DWORD *)v20 != *(_DWORD *)(v20 - v26))
                break;
              v328 = (char *)(v20 + 4);
              v329 = (_QWORD *)(v20 + 4 - v26);
              if (v283 <= v20 + 4)
              {
                v332 = (_DWORD *)(v20 + 4);
              }
              else
              {
                v330 = *(_QWORD *)v328 ^ *v329;
                if (v330)
                {
                  v331 = __clz(__rbit64(v330)) >> 3;
                  goto LABEL_447;
                }
                v336 = v20 + 12;
                while (1)
                {
                  v337 = (_QWORD *)(v336 + v330);
                  if (v336 + v330 >= v283)
                    break;
                  v338 = *(_QWORD *)(v20 + 12 - v26 + v330);
                  v330 += 8;
                  v339 = *v337 ^ v338;
                  if (v339)
                  {
                    v331 = v330 + (__clz(__rbit64(v339)) >> 3);
                    goto LABEL_447;
                  }
                }
                v332 = (_DWORD *)(v20 + v330 + 12);
                v329 = (_QWORD *)((char *)v332 - v26);
              }
              if ((unint64_t)v332 < v751 && *(_DWORD *)v329 == *v332)
              {
                ++v332;
                v329 = (_QWORD *)((char *)v329 + 4);
              }
              if ((unint64_t)v332 < v743 && *(unsigned __int16 *)v329 == *(unsigned __int16 *)v332)
              {
                v332 = (_DWORD *)((char *)v332 + 2);
                v329 = (_QWORD *)((char *)v329 + 2);
              }
              if ((unint64_t)v332 < v757 && *(unsigned __int8 *)v329 == *(unsigned __int8 *)v332)
                v332 = (_DWORD *)((char *)v332 + 1);
              v331 = (char *)v332 - v328;
LABEL_447:
              *(_DWORD *)(v281 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v20) >> v282)) = v20 - v264;
              v333 = *(_OWORD **)(a2 + 24);
              if (v20 <= (unint64_t)v284)
              {
                *v333 = *(_OWORD *)v20;
              }
              else
              {
                sub_1D4B56E1C(v333, (char *)v20, v20, v284);
                v284 = v727;
                v283 = v735;
                v272 = v719;
              }
              v334 = *(_QWORD *)(a2 + 8);
              *(_WORD *)(v334 + 4) = 0;
              *(_DWORD *)v334 = 1;
              if (v331 + 1 >= 0x10000)
              {
                v335 = (unint64_t)(v334 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v335;
              }
              v20 += v331 + 4;
              *(_WORD *)(v334 + 6) = v331 + 1;
              *(_QWORD *)(a2 + 8) = v334 + 8;
              v26 = v25;
              v57 = v327;
              if (v20 > v272)
                goto LABEL_465;
            }
            v57 = v25;
            v25 = v26;
          }
          else
          {
            v25 = 0;
          }
        }
        else
        {
          v25 = v26;
          v9 = v757;
        }
LABEL_465:
        v7 = v700;
        v279 = (_DWORD *)(v20 + v700);
        _X9 = (int *)(v20 + v700 + 1);
        v26 = v57;
        a4 = v20;
        if ((unint64_t)_X9 >= v272)
          goto LABEL_585;
      }
    }
    v183 = *(_QWORD *)(a1 + 8);
    v9 = a4 + a5;
    v184 = a4 + a5 - v183;
    v185 = 1 << *(_DWORD *)(a1 + 256);
    v186 = *(_DWORD *)(a1 + 24);
    v187 = v184 - v186 > v185;
    v188 = v184 - v185;
    v189 = *(_DWORD *)(a1 + 40) == 0;
    if (v189 && v187)
      v190 = v188;
    else
      v190 = v186;
    v191 = v9 - 8;
    v193 = *a3;
    v192 = a3[1];
    if (v183 + v190 == a4)
      v20 = a4 + 1;
    else
      v20 = a4;
    v194 = v20 - v183;
    v195 = (_DWORD)v20 - (_DWORD)v183 - v186 > v185;
    v196 = v20 - v183 - v185;
    if (!v189 || !v195)
      v196 = *(_DWORD *)(a1 + 24);
    v197 = v194 - v196;
    if (v192 <= v194 - v196)
      v25 = v192;
    else
      v25 = 0;
    if (v193 <= v197)
      v26 = v193;
    else
      v26 = 0;
    v198 = (_DWORD *)(v20 + v7);
    _X9 = (int *)(v20 + v7 + 1);
    v704 = *a3;
    v706 = a3[1];
    v702 = v197;
    if ((unint64_t)_X9 >= v191)
      goto LABEL_583;
    v710 = v190;
    v718 = v9 - 8;
    v200 = *(_QWORD *)(a1 + 112);
    v699 = v7;
    v201 = 64 - *(_DWORD *)(a1 + 264);
    v202 = v9 - 7;
    v742 = v9 - 1;
    v750 = v9 - 3;
    v203 = (char *)(v9 - 32);
    v683 = v183 + v190;
    v726 = (char *)(v9 - 32);
    v734 = v9 - 7;
    v757 = v9;
    v688 = v201;
    while (1)
    {
      v205 = (int *)(v20 + 1);
      v204 = *(_QWORD *)(v20 + 1);
      v206 = v20 + 128;
      v207 = (0xCF1BBCDCBB000000 * *(_QWORD *)v20) >> v201;
      LODWORD(v208) = *(_DWORD *)(v200 + 4 * v207);
      while (1)
      {
        v209 = (0xCF1BBCDCBB000000 * v204) >> v201;
        v210 = *(_DWORD *)((char *)v198 - v26);
        v211 = v20 - v183;
        *(_DWORD *)(v200 + 4 * v207) = v20 - v183;
        if ((_DWORD)v26 && *v198 == v210)
        {
          v220 = *((unsigned __int8 *)v198 - 1) == *((unsigned __int8 *)v198 - v26 - 1);
          if (*((unsigned __int8 *)v198 - 1) == *((unsigned __int8 *)v198 - v26 - 1))
            v221 = 5;
          else
            v221 = 4;
          v222 = (_DWORD)v205 - v183;
          v205 = (_DWORD *)((char *)v198 - v220);
          v223 = (unsigned __int8 *)((char *)v198 - v26 - v220);
          *(_DWORD *)(v200 + 4 * v209) = v222;
          v224 = 1;
          v57 = v26;
          v26 = v25;
          goto LABEL_286;
        }
        if (v208 >= v710)
        {
          v213 = *(_DWORD *)(v183 + v208);
          v212 = *(_DWORD *)v20;
        }
        else
        {
          v212 = *(_DWORD *)v20;
          v213 = *(_DWORD *)v20 ^ 1;
        }
        if (v212 == v213)
        {
          LODWORD(v198) = (_DWORD)v205;
          v207 = v209;
          v205 = (int *)v20;
          goto LABEL_276;
        }
        v208 = *(unsigned int *)(v200 + 4 * v209);
        v214 = *(_QWORD *)v198;
        v211 = (_DWORD)v205 - v183;
        *(_DWORD *)(v200 + 4 * v209) = (_DWORD)v205 - v183;
        if (v208 >= v710)
        {
          v216 = *(_DWORD *)(v183 + v208);
          v215 = *v205;
        }
        else
        {
          v215 = *v205;
          v216 = *v205 ^ 1;
        }
        v207 = (0xCF1BBCDCBB000000 * v214) >> v201;
        if (v215 == v216)
          break;
        LODWORD(v208) = *(_DWORD *)(v200 + 4 * v207);
        v204 = *(_QWORD *)_X9;
        if ((unint64_t)v198 + v7 >= v206)
        {
          v217 = v7 + 1;
          __asm
          {
            PRFM            #0, [X9,#0x40]
            PRFM            #0, [X9,#0x80]
          }
          v206 += 128;
        }
        else
        {
          v217 = v7;
        }
        v205 = _X9;
        v20 = (unint64_t)v198;
        v198 = (_DWORD *)((char *)v198 + v7);
        _X9 = (int *)((char *)_X9 + v7);
        v7 = v217;
        if ((unint64_t)_X9 >= v191)
        {
LABEL_584:
          v20 = a4;
          LODWORD(v57) = v26;
          v9 = v757;
          goto LABEL_585;
        }
      }
      if (v7 < 5)
LABEL_276:
        *(_DWORD *)(v200 + 4 * v207) = (_DWORD)v198 - v183;
      v223 = (unsigned __int8 *)(v183 + v208);
      v57 = ((_DWORD)v205 - (_DWORD)v223);
      v224 = v57 + 3;
      if ((unint64_t)v205 <= a4 || v208 <= v710)
      {
        v221 = 4;
      }
      else
      {
        v225 = (unsigned __int8 *)(v183 - 1 + v208);
        v226 = (unsigned __int8 *)v205 - 1;
        v221 = 4;
        while (*v226 == *v225)
        {
          ++v221;
          v227 = v225 - 1;
          v228 = v226 - 1;
          if ((unint64_t)v225 > v683)
          {
            --v225;
            v62 = (unint64_t)v226-- > a4;
            if (v62)
              continue;
          }
          v223 = v227 + 1;
          v205 = (int *)(v228 + 1);
          goto LABEL_286;
        }
        v223 = v225 + 1;
        v205 = (int *)(v226 + 1);
      }
LABEL_286:
      v229 = (char *)v205 + v221;
      v230 = &v223[v221];
      if (v202 <= (unint64_t)v205 + v221)
      {
        v233 = (int *)((char *)v205 + v221);
      }
      else
      {
        v231 = *(_QWORD *)v229 ^ *(_QWORD *)v230;
        if (v231)
        {
          v232 = __clz(__rbit64(v231)) >> 3;
          goto LABEL_300;
        }
        v259 = 0;
        v260 = (uint64_t)v205 + v221 + 8;
        while (1)
        {
          v261 = (_QWORD *)(v260 + v259);
          if (v260 + v259 >= v202)
            break;
          v262 = *(_QWORD *)&v223[v221 + 8 + v259];
          v259 += 8;
          v263 = *v261 ^ v262;
          if (v263)
          {
            v232 = v259 + (__clz(__rbit64(v263)) >> 3);
            goto LABEL_300;
          }
        }
        v233 = (int *)((char *)v205 + v221 + v259 + 8);
        v230 = &v223[v221 + 8 + v259];
      }
      if ((unint64_t)v233 < v750 && *(_DWORD *)v230 == *v233)
      {
        ++v233;
        v230 += 4;
      }
      if ((unint64_t)v233 < v742 && *(unsigned __int16 *)v230 == *(unsigned __int16 *)v233)
      {
        v233 = (_DWORD *)((char *)v233 + 2);
        v230 += 2;
      }
      if ((unint64_t)v233 < v757 && *v230 == *(unsigned __int8 *)v233)
        v233 = (_DWORD *)((char *)v233 + 1);
      v232 = (char *)v233 - v229;
LABEL_300:
      v234 = (uint64_t)v205 - a4;
      v235 = *(_OWORD **)(a2 + 24);
      if (v205 <= (int *)v203)
      {
        *v235 = *(_OWORD *)a4;
        v238 = *(_QWORD *)(a2 + 24);
        if ((unint64_t)v234 <= 0x10)
        {
          *(_QWORD *)(a2 + 24) = v238 + v234;
          v236 = *(_QWORD *)(a2 + 8);
          goto LABEL_311;
        }
        *(_OWORD *)(v238 + 16) = *(_OWORD *)(a4 + 16);
        if (v234 >= 33)
        {
          v239 = v238 + v234;
          v240 = (_OWORD *)(v238 + 32);
          v241 = (__int128 *)(a4 + 48);
          do
          {
            *v240 = *(v241 - 1);
            v242 = *v241;
            v241 += 2;
            v240[1] = v242;
            v240 += 2;
          }
          while ((unint64_t)v240 < v239);
        }
      }
      else
      {
        v201 = v224;
        sub_1D4B56E1C(v235, (char *)a4, (unint64_t)v205, v203);
        v224 = v201;
        LOBYTE(v201) = v688;
        v191 = v718;
      }
      *(_QWORD *)(a2 + 24) += v234;
      v236 = *(_QWORD *)(a2 + 8);
      if ((unint64_t)v234 >= 0x10000)
      {
        v237 = (unint64_t)(v236 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v237;
      }
      v203 = v726;
      v202 = v734;
LABEL_311:
      v243 = v232 + v221;
      *(_WORD *)(v236 + 4) = v234;
      *(_DWORD *)v236 = v224;
      v244 = v232 + v221 - 3;
      if (v244 >= 0x10000)
      {
        v245 = (unint64_t)(v236 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v245;
      }
      *(_WORD *)(v236 + 6) = v244;
      *(_QWORD *)(a2 + 8) = v236 + 8;
      v20 = (unint64_t)v205 + v243;
      if ((unint64_t)v205 + v243 <= v191)
      {
        *(_DWORD *)(v200 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v183 + 2 + v211)) >> v201)) = v211 + 2;
        *(_DWORD *)(v200 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v20 - 2)) >> v201)) = v20 - 2 - v183;
        v9 = v757;
        if ((_DWORD)v26)
        {
          v246 = v57;
          while (1)
          {
            v25 = v246;
            v246 = v26;
            if (*(_DWORD *)v20 != *(_DWORD *)(v20 - v26))
              break;
            v247 = (char *)(v20 + 4);
            v248 = (_QWORD *)(v20 + 4 - v26);
            if (v202 <= v20 + 4)
            {
              v251 = (_DWORD *)(v20 + 4);
            }
            else
            {
              v249 = *(_QWORD *)v247 ^ *v248;
              if (v249)
              {
                v250 = __clz(__rbit64(v249)) >> 3;
                goto LABEL_332;
              }
              v255 = v20 + 12;
              while (1)
              {
                v256 = (_QWORD *)(v255 + v249);
                if (v255 + v249 >= v202)
                  break;
                v257 = *(_QWORD *)(v20 + 12 - v26 + v249);
                v249 += 8;
                v258 = *v256 ^ v257;
                if (v258)
                {
                  v250 = v249 + (__clz(__rbit64(v258)) >> 3);
                  goto LABEL_332;
                }
              }
              v251 = (_DWORD *)(v20 + v249 + 12);
              v248 = (_QWORD *)((char *)v251 - v26);
            }
            if ((unint64_t)v251 < v750 && *(_DWORD *)v248 == *v251)
            {
              ++v251;
              v248 = (_QWORD *)((char *)v248 + 4);
            }
            if ((unint64_t)v251 < v742 && *(unsigned __int16 *)v248 == *(unsigned __int16 *)v251)
            {
              v251 = (_DWORD *)((char *)v251 + 2);
              v248 = (_QWORD *)((char *)v248 + 2);
            }
            if ((unint64_t)v251 < v757 && *(unsigned __int8 *)v248 == *(unsigned __int8 *)v251)
              v251 = (_DWORD *)((char *)v251 + 1);
            v250 = (char *)v251 - v247;
LABEL_332:
            *(_DWORD *)(v200 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v20) >> v201)) = v20 - v183;
            v252 = *(_OWORD **)(a2 + 24);
            if (v20 <= (unint64_t)v203)
            {
              *v252 = *(_OWORD *)v20;
            }
            else
            {
              sub_1D4B56E1C(v252, (char *)v20, v20, v203);
              v203 = v726;
              v202 = v734;
              v191 = v718;
            }
            v253 = *(_QWORD *)(a2 + 8);
            *(_WORD *)(v253 + 4) = 0;
            *(_DWORD *)v253 = 1;
            if (v250 + 1 >= 0x10000)
            {
              v254 = (unint64_t)(v253 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v254;
            }
            v20 += v250 + 4;
            *(_WORD *)(v253 + 6) = v250 + 1;
            *(_QWORD *)(a2 + 8) = v253 + 8;
            v26 = v25;
            v57 = v246;
            if (v20 > v191)
              goto LABEL_350;
          }
          v57 = v25;
          v25 = v26;
        }
        else
        {
          v25 = 0;
        }
      }
      else
      {
        v25 = v26;
        v9 = v757;
      }
LABEL_350:
      v7 = v699;
      v198 = (_DWORD *)(v20 + v699);
      _X9 = (int *)(v20 + v699 + 1);
      v26 = v57;
      a4 = v20;
      if ((unint64_t)_X9 >= v191)
        goto LABEL_585;
    }
  }
  if (v5 == 5)
  {
    v430 = *(_QWORD *)(a1 + 8);
    v431 = a4 + a5;
    v432 = a4 + a5 - v430;
    v433 = 1 << *(_DWORD *)(a1 + 256);
    v434 = *(_DWORD *)(a1 + 24);
    v435 = v432 - v434 > v433;
    v436 = v432 - v433;
    v437 = *(_DWORD *)(a1 + 40) == 0;
    if (v437 && v435)
      v438 = v436;
    else
      v438 = v434;
    v439 = v431 - 8;
    v441 = *a3;
    v440 = a3[1];
    if (v430 + v438 == a4)
      v20 = a4 + 1;
    else
      v20 = a4;
    v442 = (_DWORD)v20 - (_DWORD)v430 - v434 > v433;
    v443 = v20 - v430 - v433;
    if (!v437 || !v442)
      v443 = *(_DWORD *)(a1 + 24);
    v444 = v20 - v430 - v443;
    if (v440 <= v444)
      v113 = v440;
    else
      v113 = 0;
    if (v441 <= v444)
      v114 = v441;
    else
      v114 = 0;
    _X10 = (int *)(v20 + 3);
    v758 = v431;
    v705 = *a3;
    v707 = a3[1];
    v703 = v20 - v430 - v443;
    if (v20 + 3 >= v439)
      goto LABEL_831;
    v713 = v438;
    v721 = v431 - 8;
    v446 = *(_QWORD *)(a1 + 112);
    LODWORD(v447) = 64 - *(_DWORD *)(a1 + 264);
    v448 = v431 - 7;
    v745 = v431 - 1;
    v753 = v431 - 3;
    v449 = (char *)(v431 - 32);
    v691 = v430 + v438;
    v729 = (char *)(v431 - 32);
    v737 = v431 - 7;
    v695 = v447;
    while (1)
    {
      v450 = (_DWORD *)(v20 + 2);
      v452 = (int *)(v20 + 1);
      v451 = *(_QWORD *)(v20 + 1);
      v453 = v20 + 128;
      v454 = (0xCF1BBCDCBB000000 * *(_QWORD *)v20) >> v447;
      LODWORD(v455) = *(_DWORD *)(v446 + 4 * v454);
      v456 = 2;
      while (1)
      {
        v457 = (0xCF1BBCDCBB000000 * v451) >> v447;
        v458 = *(_DWORD *)((char *)v450 - v114);
        v459 = v20 - v430;
        *(_DWORD *)(v446 + 4 * v454) = v20 - v430;
        if ((_DWORD)v114 && *v450 == v458)
        {
          v468 = *((unsigned __int8 *)v450 - 1) == *((unsigned __int8 *)v450 - v114 - 1);
          if (*((unsigned __int8 *)v450 - 1) == *((unsigned __int8 *)v450 - v114 - 1))
            v469 = 5;
          else
            v469 = 4;
          v470 = (_DWORD)v452 - v430;
          v452 = (_DWORD *)((char *)v450 - v468);
          v471 = (unsigned __int8 *)((char *)v450 - v114 - v468);
          *(_DWORD *)(v446 + 4 * v457) = v470;
          v472 = 1;
          v143 = v114;
          v114 = v113;
          goto LABEL_649;
        }
        if (v455 >= v713)
        {
          v461 = *(_DWORD *)(v430 + v455);
          v460 = *(_DWORD *)v20;
        }
        else
        {
          v460 = *(_DWORD *)v20;
          v461 = *(_DWORD *)v20 ^ 1;
        }
        if (v460 == v461)
        {
          LODWORD(v450) = (_DWORD)v452;
          v454 = v457;
          v452 = (int *)v20;
          goto LABEL_639;
        }
        v455 = *(unsigned int *)(v446 + 4 * v457);
        v462 = *(_QWORD *)v450;
        v459 = (_DWORD)v452 - v430;
        *(_DWORD *)(v446 + 4 * v457) = (_DWORD)v452 - v430;
        if (v455 >= v713)
        {
          v464 = *(_DWORD *)(v430 + v455);
          v463 = *v452;
        }
        else
        {
          v463 = *v452;
          v464 = *v452 ^ 1;
        }
        v454 = (0xCF1BBCDCBB000000 * v462) >> v447;
        if (v463 == v464)
          break;
        LODWORD(v455) = *(_DWORD *)(v446 + 4 * v454);
        v451 = *(_QWORD *)_X10;
        if ((unint64_t)v450 + v456 >= v453)
        {
          v465 = v456 + 1;
          __asm
          {
            PRFM            #0, [X10,#0x40]
            PRFM            #0, [X10,#0x80]
          }
          v453 += 128;
        }
        else
        {
          v465 = v456;
        }
        v452 = _X10;
        v20 = (unint64_t)v450;
        v450 = (_DWORD *)((char *)v450 + v456);
        _X10 = (int *)((char *)_X10 + v456);
        v456 = v465;
        if ((unint64_t)_X10 >= v439)
          goto LABEL_831;
      }
      if (v456 < 5)
LABEL_639:
        *(_DWORD *)(v446 + 4 * v454) = (_DWORD)v450 - v430;
      v471 = (unsigned __int8 *)(v430 + v455);
      v143 = ((_DWORD)v452 - (_DWORD)v471);
      v472 = v143 + 3;
      if ((unint64_t)v452 <= a4 || v455 <= v713)
      {
        v469 = 4;
      }
      else
      {
        v473 = (unsigned __int8 *)(v430 - 1 + v455);
        v474 = (unsigned __int8 *)v452 - 1;
        v469 = 4;
        while (*v474 == *v473)
        {
          ++v469;
          v475 = v473 - 1;
          v476 = v474 - 1;
          if ((unint64_t)v473 > v691)
          {
            --v473;
            v62 = (unint64_t)v474-- > a4;
            if (v62)
              continue;
          }
          v471 = v475 + 1;
          v452 = (int *)(v476 + 1);
          goto LABEL_649;
        }
        v471 = v473 + 1;
        v452 = (int *)(v474 + 1);
      }
LABEL_649:
      v477 = (char *)v452 + v469;
      v478 = &v471[v469];
      if (v448 <= (unint64_t)v452 + v469)
      {
        v481 = (int *)((char *)v452 + v469);
      }
      else
      {
        v479 = *(_QWORD *)v477 ^ *(_QWORD *)v478;
        if (v479)
        {
          v480 = __clz(__rbit64(v479)) >> 3;
          goto LABEL_663;
        }
        v507 = 0;
        v508 = (uint64_t)v452 + v469 + 8;
        while (1)
        {
          v509 = (_QWORD *)(v508 + v507);
          if (v508 + v507 >= v448)
            break;
          v510 = *(_QWORD *)&v471[v469 + 8 + v507];
          v507 += 8;
          v511 = *v509 ^ v510;
          if (v511)
          {
            v480 = v507 + (__clz(__rbit64(v511)) >> 3);
            goto LABEL_663;
          }
        }
        v481 = (int *)((char *)v452 + v469 + v507 + 8);
        v478 = &v471[v469 + 8 + v507];
      }
      if ((unint64_t)v481 < v753 && *(_DWORD *)v478 == *v481)
      {
        ++v481;
        v478 += 4;
      }
      if ((unint64_t)v481 < v745 && *(unsigned __int16 *)v478 == *(unsigned __int16 *)v481)
      {
        v481 = (_DWORD *)((char *)v481 + 2);
        v478 += 2;
      }
      if ((unint64_t)v481 < v758 && *v478 == *(unsigned __int8 *)v481)
        v481 = (_DWORD *)((char *)v481 + 1);
      v480 = (char *)v481 - v477;
LABEL_663:
      v482 = (uint64_t)v452 - a4;
      v483 = *(_OWORD **)(a2 + 24);
      if (v452 <= (int *)v449)
      {
        *v483 = *(_OWORD *)a4;
        v486 = *(_QWORD *)(a2 + 24);
        if ((unint64_t)v482 <= 0x10)
        {
          *(_QWORD *)(a2 + 24) = v486 + v482;
          v484 = *(_QWORD *)(a2 + 8);
          goto LABEL_674;
        }
        *(_OWORD *)(v486 + 16) = *(_OWORD *)(a4 + 16);
        if (v482 >= 33)
        {
          v487 = v486 + v482;
          v488 = (_OWORD *)(v486 + 32);
          v489 = (__int128 *)(a4 + 48);
          do
          {
            *v488 = *(v489 - 1);
            v490 = *v489;
            v489 += 2;
            v488[1] = v490;
            v488 += 2;
          }
          while ((unint64_t)v488 < v487);
        }
      }
      else
      {
        v447 = v480;
        sub_1D4B56E1C(v483, (char *)a4, (unint64_t)v452, v449);
        v480 = v447;
        LOBYTE(v447) = v695;
        v439 = v721;
      }
      *(_QWORD *)(a2 + 24) += v482;
      v484 = *(_QWORD *)(a2 + 8);
      if ((unint64_t)v482 >= 0x10000)
      {
        v485 = (unint64_t)(v484 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v485;
      }
      v449 = v729;
      v448 = v737;
LABEL_674:
      v491 = v480 + v469;
      *(_WORD *)(v484 + 4) = v482;
      *(_DWORD *)v484 = v472;
      v492 = v480 + v469 - 3;
      if (v492 >= 0x10000)
      {
        v493 = (unint64_t)(v484 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v493;
      }
      *(_WORD *)(v484 + 6) = v492;
      *(_QWORD *)(a2 + 8) = v484 + 8;
      v20 = (unint64_t)v452 + v491;
      if ((unint64_t)v452 + v491 <= v439)
      {
        *(_DWORD *)(v446 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v430 + 2 + v459)) >> v447)) = v459 + 2;
        *(_DWORD *)(v446 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v20 - 2)) >> v447)) = v20 - 2 - v430;
        if ((_DWORD)v114)
        {
          v494 = v143;
          while (1)
          {
            v113 = v494;
            v494 = v114;
            if (*(_DWORD *)v20 != *(_DWORD *)(v20 - v114))
              break;
            v495 = (char *)(v20 + 4);
            v496 = (_QWORD *)(v20 + 4 - v114);
            if (v448 <= v20 + 4)
            {
              v499 = (_DWORD *)(v20 + 4);
            }
            else
            {
              v497 = *(_QWORD *)v495 ^ *v496;
              if (v497)
              {
                v498 = __clz(__rbit64(v497)) >> 3;
                goto LABEL_695;
              }
              v503 = v20 + 12;
              while (1)
              {
                v504 = (_QWORD *)(v503 + v497);
                if (v503 + v497 >= v448)
                  break;
                v505 = *(_QWORD *)(v20 + 12 - v114 + v497);
                v497 += 8;
                v506 = *v504 ^ v505;
                if (v506)
                {
                  v498 = v497 + (__clz(__rbit64(v506)) >> 3);
                  goto LABEL_695;
                }
              }
              v499 = (_DWORD *)(v20 + v497 + 12);
              v496 = (_QWORD *)((char *)v499 - v114);
            }
            if ((unint64_t)v499 < v753 && *(_DWORD *)v496 == *v499)
            {
              ++v499;
              v496 = (_QWORD *)((char *)v496 + 4);
            }
            if ((unint64_t)v499 < v745 && *(unsigned __int16 *)v496 == *(unsigned __int16 *)v499)
            {
              v499 = (_DWORD *)((char *)v499 + 2);
              v496 = (_QWORD *)((char *)v496 + 2);
            }
            if ((unint64_t)v499 < v758 && *(unsigned __int8 *)v496 == *(unsigned __int8 *)v499)
              v499 = (_DWORD *)((char *)v499 + 1);
            v498 = (char *)v499 - v495;
LABEL_695:
            *(_DWORD *)(v446 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v20) >> v447)) = v20 - v430;
            v500 = *(_OWORD **)(a2 + 24);
            if (v20 <= (unint64_t)v449)
            {
              *v500 = *(_OWORD *)v20;
            }
            else
            {
              sub_1D4B56E1C(v500, (char *)v20, v20, v449);
              v449 = v729;
              v448 = v737;
              v439 = v721;
            }
            v501 = *(_QWORD *)(a2 + 8);
            *(_WORD *)(v501 + 4) = 0;
            *(_DWORD *)v501 = 1;
            if (v498 + 1 >= 0x10000)
            {
              v502 = (unint64_t)(v501 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v502;
            }
            v20 += v498 + 4;
            *(_WORD *)(v501 + 6) = v498 + 1;
            *(_QWORD *)(a2 + 8) = v501 + 8;
            v114 = v113;
            v143 = v494;
            if (v20 > v439)
              goto LABEL_713;
          }
          v143 = v113;
          v113 = v114;
        }
        else
        {
          v113 = 0;
        }
      }
      else
      {
        v113 = v114;
      }
LABEL_713:
      _X10 = (int *)(v20 + 3);
      v114 = v143;
      a4 = v20;
      if (v20 + 3 >= v439)
        goto LABEL_948;
    }
  }
  if (v5 == 6)
  {
    v512 = *(_QWORD *)(a1 + 8);
    v513 = a4 + a5;
    v514 = a4 + a5 - v512;
    v515 = 1 << *(_DWORD *)(a1 + 256);
    v516 = *(_DWORD *)(a1 + 24);
    v517 = v514 - v516 > v515;
    v518 = v514 - v515;
    v519 = *(_DWORD *)(a1 + 40) == 0;
    if (v519 && v517)
      v520 = v518;
    else
      v520 = v516;
    v521 = v513 - 8;
    v523 = *a3;
    v522 = a3[1];
    if (v512 + v520 == a4)
      v20 = a4 + 1;
    else
      v20 = a4;
    v524 = (_DWORD)v20 - (_DWORD)v512 - v516 > v515;
    v525 = v20 - v512 - v515;
    if (!v519 || !v524)
      v525 = *(_DWORD *)(a1 + 24);
    v526 = v20 - v512 - v525;
    if (v522 <= v526)
      v113 = v522;
    else
      v113 = 0;
    if (v523 <= v526)
      v114 = v523;
    else
      v114 = 0;
    _X10 = (int *)(v20 + 3);
    v758 = v513;
    v705 = *a3;
    v707 = a3[1];
    v703 = v20 - v512 - v525;
    if (v20 + 3 >= v521)
      goto LABEL_831;
    v714 = v520;
    v722 = v513 - 8;
    v528 = *(_QWORD *)(a1 + 112);
    LODWORD(v529) = 64 - *(_DWORD *)(a1 + 264);
    v530 = v513 - 7;
    v746 = v513 - 1;
    v754 = v513 - 3;
    v531 = (char *)(v513 - 32);
    v692 = v512 + v520;
    v730 = (char *)(v513 - 32);
    v738 = v513 - 7;
    v696 = v529;
    while (1)
    {
      v532 = (_DWORD *)(v20 + 2);
      v534 = (int *)(v20 + 1);
      v533 = *(_QWORD *)(v20 + 1);
      v535 = v20 + 128;
      v536 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)v20) >> v529;
      LODWORD(v537) = *(_DWORD *)(v528 + 4 * v536);
      v538 = 2;
      while (1)
      {
        v539 = (0xCF1BBCDCBF9B0000 * v533) >> v529;
        v540 = *(_DWORD *)((char *)v532 - v114);
        v541 = v20 - v512;
        *(_DWORD *)(v528 + 4 * v536) = v20 - v512;
        if ((_DWORD)v114 && *v532 == v540)
        {
          v550 = *((unsigned __int8 *)v532 - 1) == *((unsigned __int8 *)v532 - v114 - 1);
          if (*((unsigned __int8 *)v532 - 1) == *((unsigned __int8 *)v532 - v114 - 1))
            v551 = 5;
          else
            v551 = 4;
          v552 = (_DWORD)v534 - v512;
          v534 = (_DWORD *)((char *)v532 - v550);
          v553 = (unsigned __int8 *)((char *)v532 - v114 - v550);
          *(_DWORD *)(v528 + 4 * v539) = v552;
          v554 = 1;
          v143 = v114;
          v114 = v113;
          goto LABEL_764;
        }
        if (v537 >= v714)
        {
          v543 = *(_DWORD *)(v512 + v537);
          v542 = *(_DWORD *)v20;
        }
        else
        {
          v542 = *(_DWORD *)v20;
          v543 = *(_DWORD *)v20 ^ 1;
        }
        if (v542 == v543)
        {
          LODWORD(v532) = (_DWORD)v534;
          v536 = v539;
          v534 = (int *)v20;
          goto LABEL_754;
        }
        v537 = *(unsigned int *)(v528 + 4 * v539);
        v544 = *(_QWORD *)v532;
        v541 = (_DWORD)v534 - v512;
        *(_DWORD *)(v528 + 4 * v539) = (_DWORD)v534 - v512;
        if (v537 >= v714)
        {
          v546 = *(_DWORD *)(v512 + v537);
          v545 = *v534;
        }
        else
        {
          v545 = *v534;
          v546 = *v534 ^ 1;
        }
        v536 = (0xCF1BBCDCBF9B0000 * v544) >> v529;
        if (v545 == v546)
          break;
        LODWORD(v537) = *(_DWORD *)(v528 + 4 * v536);
        v533 = *(_QWORD *)_X10;
        if ((unint64_t)v532 + v538 >= v535)
        {
          v547 = v538 + 1;
          __asm
          {
            PRFM            #0, [X10,#0x40]
            PRFM            #0, [X10,#0x80]
          }
          v535 += 128;
        }
        else
        {
          v547 = v538;
        }
        v534 = _X10;
        v20 = (unint64_t)v532;
        v532 = (_DWORD *)((char *)v532 + v538);
        _X10 = (int *)((char *)_X10 + v538);
        v538 = v547;
        if ((unint64_t)_X10 >= v521)
          goto LABEL_831;
      }
      if (v538 < 5)
LABEL_754:
        *(_DWORD *)(v528 + 4 * v536) = (_DWORD)v532 - v512;
      v553 = (unsigned __int8 *)(v512 + v537);
      v143 = ((_DWORD)v534 - (_DWORD)v553);
      v554 = v143 + 3;
      if ((unint64_t)v534 <= a4 || v537 <= v714)
      {
        v551 = 4;
      }
      else
      {
        v555 = (unsigned __int8 *)(v512 - 1 + v537);
        v556 = (unsigned __int8 *)v534 - 1;
        v551 = 4;
        while (*v556 == *v555)
        {
          ++v551;
          v557 = v555 - 1;
          v558 = v556 - 1;
          if ((unint64_t)v555 > v692)
          {
            --v555;
            v62 = (unint64_t)v556-- > a4;
            if (v62)
              continue;
          }
          v553 = v557 + 1;
          v534 = (int *)(v558 + 1);
          goto LABEL_764;
        }
        v553 = v555 + 1;
        v534 = (int *)(v556 + 1);
      }
LABEL_764:
      v559 = (char *)v534 + v551;
      v560 = &v553[v551];
      if (v530 <= (unint64_t)v534 + v551)
      {
        v563 = (int *)((char *)v534 + v551);
      }
      else
      {
        v561 = *(_QWORD *)v559 ^ *(_QWORD *)v560;
        if (v561)
        {
          v562 = __clz(__rbit64(v561)) >> 3;
          goto LABEL_778;
        }
        v589 = 0;
        v590 = (uint64_t)v534 + v551 + 8;
        while (1)
        {
          v591 = (_QWORD *)(v590 + v589);
          if (v590 + v589 >= v530)
            break;
          v592 = *(_QWORD *)&v553[v551 + 8 + v589];
          v589 += 8;
          v593 = *v591 ^ v592;
          if (v593)
          {
            v562 = v589 + (__clz(__rbit64(v593)) >> 3);
            goto LABEL_778;
          }
        }
        v563 = (int *)((char *)v534 + v551 + v589 + 8);
        v560 = &v553[v551 + 8 + v589];
      }
      if ((unint64_t)v563 < v754 && *(_DWORD *)v560 == *v563)
      {
        ++v563;
        v560 += 4;
      }
      if ((unint64_t)v563 < v746 && *(unsigned __int16 *)v560 == *(unsigned __int16 *)v563)
      {
        v563 = (_DWORD *)((char *)v563 + 2);
        v560 += 2;
      }
      if ((unint64_t)v563 < v758 && *v560 == *(unsigned __int8 *)v563)
        v563 = (_DWORD *)((char *)v563 + 1);
      v562 = (char *)v563 - v559;
LABEL_778:
      v564 = (uint64_t)v534 - a4;
      v565 = *(_OWORD **)(a2 + 24);
      if (v534 <= (int *)v531)
      {
        *v565 = *(_OWORD *)a4;
        v568 = *(_QWORD *)(a2 + 24);
        if ((unint64_t)v564 <= 0x10)
        {
          *(_QWORD *)(a2 + 24) = v568 + v564;
          v566 = *(_QWORD *)(a2 + 8);
          goto LABEL_789;
        }
        *(_OWORD *)(v568 + 16) = *(_OWORD *)(a4 + 16);
        if (v564 >= 33)
        {
          v569 = v568 + v564;
          v570 = (_OWORD *)(v568 + 32);
          v571 = (__int128 *)(a4 + 48);
          do
          {
            *v570 = *(v571 - 1);
            v572 = *v571;
            v571 += 2;
            v570[1] = v572;
            v570 += 2;
          }
          while ((unint64_t)v570 < v569);
        }
      }
      else
      {
        v529 = v562;
        sub_1D4B56E1C(v565, (char *)a4, (unint64_t)v534, v531);
        v562 = v529;
        LOBYTE(v529) = v696;
        v521 = v722;
      }
      *(_QWORD *)(a2 + 24) += v564;
      v566 = *(_QWORD *)(a2 + 8);
      if ((unint64_t)v564 >= 0x10000)
      {
        v567 = (unint64_t)(v566 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v567;
      }
      v531 = v730;
      v530 = v738;
LABEL_789:
      v573 = v562 + v551;
      *(_WORD *)(v566 + 4) = v564;
      *(_DWORD *)v566 = v554;
      v574 = v562 + v551 - 3;
      if (v574 >= 0x10000)
      {
        v575 = (unint64_t)(v566 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v575;
      }
      *(_WORD *)(v566 + 6) = v574;
      *(_QWORD *)(a2 + 8) = v566 + 8;
      v20 = (unint64_t)v534 + v573;
      if ((unint64_t)v534 + v573 <= v521)
      {
        *(_DWORD *)(v528 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v512 + 2 + v541)) >> v529)) = v541 + 2;
        *(_DWORD *)(v528 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v20 - 2)) >> v529)) = v20 - 2 - v512;
        if ((_DWORD)v114)
        {
          v576 = v143;
          while (1)
          {
            v113 = v576;
            v576 = v114;
            if (*(_DWORD *)v20 != *(_DWORD *)(v20 - v114))
              break;
            v577 = (char *)(v20 + 4);
            v578 = (_QWORD *)(v20 + 4 - v114);
            if (v530 <= v20 + 4)
            {
              v581 = (_DWORD *)(v20 + 4);
            }
            else
            {
              v579 = *(_QWORD *)v577 ^ *v578;
              if (v579)
              {
                v580 = __clz(__rbit64(v579)) >> 3;
                goto LABEL_810;
              }
              v585 = v20 + 12;
              while (1)
              {
                v586 = (_QWORD *)(v585 + v579);
                if (v585 + v579 >= v530)
                  break;
                v587 = *(_QWORD *)(v20 + 12 - v114 + v579);
                v579 += 8;
                v588 = *v586 ^ v587;
                if (v588)
                {
                  v580 = v579 + (__clz(__rbit64(v588)) >> 3);
                  goto LABEL_810;
                }
              }
              v581 = (_DWORD *)(v20 + v579 + 12);
              v578 = (_QWORD *)((char *)v581 - v114);
            }
            if ((unint64_t)v581 < v754 && *(_DWORD *)v578 == *v581)
            {
              ++v581;
              v578 = (_QWORD *)((char *)v578 + 4);
            }
            if ((unint64_t)v581 < v746 && *(unsigned __int16 *)v578 == *(unsigned __int16 *)v581)
            {
              v581 = (_DWORD *)((char *)v581 + 2);
              v578 = (_QWORD *)((char *)v578 + 2);
            }
            if ((unint64_t)v581 < v758 && *(unsigned __int8 *)v578 == *(unsigned __int8 *)v581)
              v581 = (_DWORD *)((char *)v581 + 1);
            v580 = (char *)v581 - v577;
LABEL_810:
            *(_DWORD *)(v528 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v20) >> v529)) = v20 - v512;
            v582 = *(_OWORD **)(a2 + 24);
            if (v20 <= (unint64_t)v531)
            {
              *v582 = *(_OWORD *)v20;
            }
            else
            {
              sub_1D4B56E1C(v582, (char *)v20, v20, v531);
              v531 = v730;
              v530 = v738;
              v521 = v722;
            }
            v583 = *(_QWORD *)(a2 + 8);
            *(_WORD *)(v583 + 4) = 0;
            *(_DWORD *)v583 = 1;
            if (v580 + 1 >= 0x10000)
            {
              v584 = (unint64_t)(v583 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v584;
            }
            v20 += v580 + 4;
            *(_WORD *)(v583 + 6) = v580 + 1;
            *(_QWORD *)(a2 + 8) = v583 + 8;
            v114 = v113;
            v143 = v576;
            if (v20 > v521)
              goto LABEL_828;
          }
          v143 = v113;
          v113 = v114;
        }
        else
        {
          v113 = 0;
        }
      }
      else
      {
        v113 = v114;
      }
LABEL_828:
      _X10 = (int *)(v20 + 3);
      v114 = v143;
      a4 = v20;
      if (v20 + 3 >= v521)
        goto LABEL_948;
    }
  }
  if (v5 != 7)
  {
    v594 = *(_QWORD *)(a1 + 8);
    v595 = a4 + a5;
    v596 = a4 + a5 - v594;
    v597 = 1 << *(_DWORD *)(a1 + 256);
    v598 = *(_DWORD *)(a1 + 24);
    v599 = v596 - v598 > v597;
    v600 = v596 - v597;
    v601 = *(_DWORD *)(a1 + 40) == 0;
    if (v601 && v599)
      v602 = v600;
    else
      v602 = v598;
    v603 = v595 - 8;
    v605 = *a3;
    v604 = a3[1];
    if (v594 + v602 == a4)
      v20 = a4 + 1;
    else
      v20 = a4;
    v606 = (_DWORD)v20 - (_DWORD)v594 - v598 > v597;
    v607 = v20 - v594 - v597;
    if (!v601 || !v606)
      v607 = *(_DWORD *)(a1 + 24);
    v608 = v20 - v594 - v607;
    if (v604 <= v608)
      v113 = v604;
    else
      v113 = 0;
    if (v605 <= v608)
      v609 = v605;
    else
      v609 = 0;
    _X10 = (int *)(v20 + 3);
    v758 = v595;
    v705 = *a3;
    v707 = a3[1];
    v703 = v20 - v594 - v607;
    if (v20 + 3 >= v603)
    {
LABEL_947:
      v20 = a4;
      LODWORD(v143) = v609;
      goto LABEL_948;
    }
    v715 = v602;
    v723 = v595 - 8;
    v611 = *(_QWORD *)(a1 + 112);
    LODWORD(v612) = 32 - *(_DWORD *)(a1 + 264);
    v613 = v595 - 7;
    v747 = v595 - 1;
    v755 = v595 - 3;
    v614 = (char *)(v595 - 32);
    v693 = v594 + v602;
    v731 = (char *)(v595 - 32);
    v739 = v595 - 7;
    v697 = v612;
    while (1)
    {
      v615 = (int *)(v20 + 2);
      v617 = (int *)(v20 + 1);
      v616 = *(_DWORD *)(v20 + 1);
      v618 = v20 + 128;
      v619 = (-1640531535 * *(_DWORD *)v20) >> v612;
      LODWORD(v620) = *(_DWORD *)(v611 + 4 * v619);
      v621 = 2;
      while (1)
      {
        v622 = (-1640531535 * v616) >> v612;
        v623 = *(int *)((char *)v615 - v609);
        v624 = v20 - v594;
        *(_DWORD *)(v611 + 4 * v619) = v20 - v594;
        v625 = *v615;
        if ((_DWORD)v609 && v625 == v623)
        {
          v633 = *((unsigned __int8 *)v615 - 1) == *((unsigned __int8 *)v615 - v609 - 1);
          if (*((unsigned __int8 *)v615 - 1) == *((unsigned __int8 *)v615 - v609 - 1))
            v634 = 5;
          else
            v634 = 4;
          v635 = (_DWORD)v617 - v594;
          v617 = (int *)((char *)v615 - v633);
          v636 = (unsigned __int8 *)((char *)v615 - v609 - v633);
          *(_DWORD *)(v611 + 4 * v622) = v635;
          v637 = 1;
          v143 = v609;
          v609 = v113;
          goto LABEL_880;
        }
        if (v620 >= v715)
        {
          v627 = *(_DWORD *)(v594 + v620);
          v626 = *(_DWORD *)v20;
        }
        else
        {
          v626 = *(_DWORD *)v20;
          v627 = *(_DWORD *)v20 ^ 1;
        }
        if (v626 == v627)
        {
          LODWORD(v615) = (_DWORD)v617;
          v619 = v622;
          v617 = (int *)v20;
          goto LABEL_870;
        }
        v620 = *(unsigned int *)(v611 + 4 * v622);
        v624 = (_DWORD)v617 - v594;
        *(_DWORD *)(v611 + 4 * v622) = (_DWORD)v617 - v594;
        if (v620 >= v715)
        {
          v629 = *(_DWORD *)(v594 + v620);
          v628 = *v617;
        }
        else
        {
          v628 = *v617;
          v629 = *v617 ^ 1;
        }
        v619 = (-1640531535 * v625) >> v612;
        if (v628 == v629)
          break;
        LODWORD(v620) = *(_DWORD *)(v611 + 4 * v619);
        v616 = *_X10;
        if ((unint64_t)v615 + v621 >= v618)
        {
          v630 = v621 + 1;
          __asm
          {
            PRFM            #0, [X10,#0x40]
            PRFM            #0, [X10,#0x80]
          }
          v618 += 128;
        }
        else
        {
          v630 = v621;
        }
        v617 = _X10;
        v20 = (unint64_t)v615;
        v615 = (int *)((char *)v615 + v621);
        _X10 = (int *)((char *)_X10 + v621);
        v621 = v630;
        if ((unint64_t)_X10 >= v603)
          goto LABEL_947;
      }
      if (v621 < 5)
LABEL_870:
        *(_DWORD *)(v611 + 4 * v619) = (_DWORD)v615 - v594;
      v636 = (unsigned __int8 *)(v594 + v620);
      v143 = ((_DWORD)v617 - (_DWORD)v636);
      v637 = v143 + 3;
      if ((unint64_t)v617 <= a4 || v620 <= v715)
      {
        v634 = 4;
      }
      else
      {
        v638 = (unsigned __int8 *)(v594 - 1 + v620);
        v639 = (unsigned __int8 *)v617 - 1;
        v634 = 4;
        while (*v639 == *v638)
        {
          ++v634;
          v640 = v638 - 1;
          v641 = v639 - 1;
          if ((unint64_t)v638 > v693)
          {
            --v638;
            v62 = (unint64_t)v639-- > a4;
            if (v62)
              continue;
          }
          v636 = v640 + 1;
          v617 = (int *)(v641 + 1);
          goto LABEL_880;
        }
        v636 = v638 + 1;
        v617 = (int *)(v639 + 1);
      }
LABEL_880:
      v642 = (char *)v617 + v634;
      v643 = &v636[v634];
      if (v613 <= (unint64_t)v617 + v634)
      {
        v646 = (int *)((char *)v617 + v634);
      }
      else
      {
        v644 = *(_QWORD *)v642 ^ *(_QWORD *)v643;
        if (v644)
        {
          v645 = __clz(__rbit64(v644)) >> 3;
          goto LABEL_894;
        }
        v672 = 0;
        v673 = (uint64_t)v617 + v634 + 8;
        while (1)
        {
          v674 = (_QWORD *)(v673 + v672);
          if (v673 + v672 >= v613)
            break;
          v675 = *(_QWORD *)&v636[v634 + 8 + v672];
          v672 += 8;
          v676 = *v674 ^ v675;
          if (v676)
          {
            v645 = v672 + (__clz(__rbit64(v676)) >> 3);
            goto LABEL_894;
          }
        }
        v646 = (int *)((char *)v617 + v634 + v672 + 8);
        v643 = &v636[v634 + 8 + v672];
      }
      if ((unint64_t)v646 < v755 && *(_DWORD *)v643 == *v646)
      {
        ++v646;
        v643 += 4;
      }
      if ((unint64_t)v646 < v747 && *(unsigned __int16 *)v643 == *(unsigned __int16 *)v646)
      {
        v646 = (_DWORD *)((char *)v646 + 2);
        v643 += 2;
      }
      if ((unint64_t)v646 < v758 && *v643 == *(unsigned __int8 *)v646)
        v646 = (_DWORD *)((char *)v646 + 1);
      v645 = (char *)v646 - v642;
LABEL_894:
      v647 = (uint64_t)v617 - a4;
      v648 = *(_OWORD **)(a2 + 24);
      if (v617 <= (int *)v614)
      {
        *v648 = *(_OWORD *)a4;
        v651 = *(_QWORD *)(a2 + 24);
        if ((unint64_t)v647 <= 0x10)
        {
          *(_QWORD *)(a2 + 24) = v651 + v647;
          v649 = *(_QWORD *)(a2 + 8);
          goto LABEL_905;
        }
        *(_OWORD *)(v651 + 16) = *(_OWORD *)(a4 + 16);
        if (v647 >= 33)
        {
          v652 = v651 + v647;
          v653 = (_OWORD *)(v651 + 32);
          v654 = (__int128 *)(a4 + 48);
          do
          {
            *v653 = *(v654 - 1);
            v655 = *v654;
            v654 += 2;
            v653[1] = v655;
            v653 += 2;
          }
          while ((unint64_t)v653 < v652);
        }
      }
      else
      {
        v612 = v645;
        sub_1D4B56E1C(v648, (char *)a4, (unint64_t)v617, v614);
        v645 = v612;
        LOBYTE(v612) = v697;
        v603 = v723;
      }
      *(_QWORD *)(a2 + 24) += v647;
      v649 = *(_QWORD *)(a2 + 8);
      if ((unint64_t)v647 >= 0x10000)
      {
        v650 = (unint64_t)(v649 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v650;
      }
      v614 = v731;
      v613 = v739;
LABEL_905:
      v656 = v645 + v634;
      *(_WORD *)(v649 + 4) = v647;
      *(_DWORD *)v649 = v637;
      v657 = v645 + v634 - 3;
      if (v657 >= 0x10000)
      {
        v658 = (unint64_t)(v649 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v658;
      }
      *(_WORD *)(v649 + 6) = v657;
      *(_QWORD *)(a2 + 8) = v649 + 8;
      v20 = (unint64_t)v617 + v656;
      if ((unint64_t)v617 + v656 <= v603)
      {
        *(_DWORD *)(v611 + 4 * ((-1640531535 * *(_DWORD *)(v594 + 2 + v624)) >> v612)) = v624 + 2;
        *(_DWORD *)(v611 + 4 * ((-1640531535 * *(_DWORD *)(v20 - 2)) >> v612)) = v20 - 2 - v594;
        if ((_DWORD)v609)
        {
          v659 = v143;
          while (1)
          {
            v113 = v659;
            v659 = v609;
            if (*(_DWORD *)v20 != *(_DWORD *)(v20 - v609))
              break;
            v660 = (char *)(v20 + 4);
            v661 = (_QWORD *)(v20 + 4 - v609);
            if (v613 <= v20 + 4)
            {
              v664 = (_DWORD *)(v20 + 4);
            }
            else
            {
              v662 = *(_QWORD *)v660 ^ *v661;
              if (v662)
              {
                v663 = __clz(__rbit64(v662)) >> 3;
                goto LABEL_926;
              }
              v668 = v20 + 12;
              while (1)
              {
                v669 = (_QWORD *)(v668 + v662);
                if (v668 + v662 >= v613)
                  break;
                v670 = *(_QWORD *)(v20 + 12 - v609 + v662);
                v662 += 8;
                v671 = *v669 ^ v670;
                if (v671)
                {
                  v663 = v662 + (__clz(__rbit64(v671)) >> 3);
                  goto LABEL_926;
                }
              }
              v664 = (_DWORD *)(v20 + v662 + 12);
              v661 = (_QWORD *)((char *)v664 - v609);
            }
            if ((unint64_t)v664 < v755 && *(_DWORD *)v661 == *v664)
            {
              ++v664;
              v661 = (_QWORD *)((char *)v661 + 4);
            }
            if ((unint64_t)v664 < v747 && *(unsigned __int16 *)v661 == *(unsigned __int16 *)v664)
            {
              v664 = (_DWORD *)((char *)v664 + 2);
              v661 = (_QWORD *)((char *)v661 + 2);
            }
            if ((unint64_t)v664 < v758 && *(unsigned __int8 *)v661 == *(unsigned __int8 *)v664)
              v664 = (_DWORD *)((char *)v664 + 1);
            v663 = (char *)v664 - v660;
LABEL_926:
            *(_DWORD *)(v611 + 4 * ((-1640531535 * *(_DWORD *)v20) >> v612)) = v20 - v594;
            v665 = *(_OWORD **)(a2 + 24);
            if (v20 <= (unint64_t)v614)
            {
              *v665 = *(_OWORD *)v20;
            }
            else
            {
              sub_1D4B56E1C(v665, (char *)v20, v20, v614);
              v614 = v731;
              v613 = v739;
              v603 = v723;
            }
            v666 = *(_QWORD *)(a2 + 8);
            *(_WORD *)(v666 + 4) = 0;
            *(_DWORD *)v666 = 1;
            if (v663 + 1 >= 0x10000)
            {
              v667 = (unint64_t)(v666 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v667;
            }
            v20 += v663 + 4;
            *(_WORD *)(v666 + 6) = v663 + 1;
            *(_QWORD *)(a2 + 8) = v666 + 8;
            v609 = v113;
            v143 = v659;
            if (v20 > v603)
              goto LABEL_944;
          }
          v143 = v113;
          v113 = v609;
        }
        else
        {
          v113 = 0;
        }
      }
      else
      {
        v113 = v609;
      }
LABEL_944:
      _X10 = (int *)(v20 + 3);
      v609 = v143;
      a4 = v20;
      if (v20 + 3 >= v603)
        goto LABEL_948;
    }
  }
  v98 = *(_QWORD *)(a1 + 8);
  v99 = a4 + a5;
  v100 = a4 + a5 - v98;
  v101 = 1 << *(_DWORD *)(a1 + 256);
  v102 = *(_DWORD *)(a1 + 24);
  v103 = v100 - v102 > v101;
  v104 = v100 - v101;
  v105 = *(_DWORD *)(a1 + 40) == 0;
  if (v105 && v103)
    v106 = v104;
  else
    v106 = v102;
  v107 = v99 - 8;
  v109 = *a3;
  v108 = a3[1];
  if (v98 + v106 == a4)
    v20 = a4 + 1;
  else
    v20 = a4;
  v110 = (_DWORD)v20 - (_DWORD)v98 - v102 > v101;
  v111 = v20 - v98 - v101;
  if (!v105 || !v110)
    v111 = *(_DWORD *)(a1 + 24);
  v112 = v20 - v98 - v111;
  if (v108 <= v112)
    v113 = v108;
  else
    v113 = 0;
  if (v109 <= v112)
    v114 = v109;
  else
    v114 = 0;
  _X10 = (int *)(v20 + 3);
  v758 = v99;
  v705 = *a3;
  v707 = a3[1];
  v703 = v20 - v98 - v111;
  if (v20 + 3 >= v107)
  {
LABEL_831:
    v20 = a4;
    LODWORD(v143) = v114;
    goto LABEL_948;
  }
  v709 = v106;
  v717 = v99 - 8;
  v116 = *(_QWORD *)(a1 + 112);
  LODWORD(v117) = 64 - *(_DWORD *)(a1 + 264);
  v118 = v99 - 7;
  v741 = v99 - 1;
  v749 = v99 - 3;
  v119 = (char *)(v99 - 32);
  v687 = v98 + v106;
  v725 = (char *)(v99 - 32);
  v733 = v99 - 7;
  v694 = v117;
  do
  {
    v120 = (_DWORD *)(v20 + 2);
    v122 = (int *)(v20 + 1);
    v121 = *(_QWORD *)(v20 + 1);
    v123 = v20 + 128;
    v124 = (0xCF1BBCDCBFA56300 * *(_QWORD *)v20) >> v117;
    LODWORD(v125) = *(_DWORD *)(v116 + 4 * v124);
    v126 = 2;
    while (1)
    {
      v127 = (0xCF1BBCDCBFA56300 * v121) >> v117;
      v128 = *(_DWORD *)((char *)v120 - v114);
      v129 = v20 - v98;
      *(_DWORD *)(v116 + 4 * v124) = v20 - v98;
      if ((_DWORD)v114 && *v120 == v128)
      {
        v138 = *((unsigned __int8 *)v120 - 1) == *((unsigned __int8 *)v120 - v114 - 1);
        if (*((unsigned __int8 *)v120 - 1) == *((unsigned __int8 *)v120 - v114 - 1))
          v139 = 5;
        else
          v139 = 4;
        v140 = (_DWORD)v122 - v98;
        v122 = (_DWORD *)((char *)v120 - v138);
        v141 = (unsigned __int8 *)((char *)v120 - v114 - v138);
        *(_DWORD *)(v116 + 4 * v127) = v140;
        v142 = 1;
        v143 = v114;
        v114 = v113;
        goto LABEL_171;
      }
      if (v125 >= v709)
      {
        v131 = *(_DWORD *)(v98 + v125);
        v130 = *(_DWORD *)v20;
      }
      else
      {
        v130 = *(_DWORD *)v20;
        v131 = *(_DWORD *)v20 ^ 1;
      }
      if (v130 == v131)
      {
        LODWORD(v120) = (_DWORD)v122;
        v124 = v127;
        v122 = (int *)v20;
        goto LABEL_161;
      }
      v125 = *(unsigned int *)(v116 + 4 * v127);
      v132 = *(_QWORD *)v120;
      v129 = (_DWORD)v122 - v98;
      *(_DWORD *)(v116 + 4 * v127) = (_DWORD)v122 - v98;
      if (v125 >= v709)
      {
        v134 = *(_DWORD *)(v98 + v125);
        v133 = *v122;
      }
      else
      {
        v133 = *v122;
        v134 = *v122 ^ 1;
      }
      v124 = (0xCF1BBCDCBFA56300 * v132) >> v117;
      if (v133 == v134)
        break;
      LODWORD(v125) = *(_DWORD *)(v116 + 4 * v124);
      v121 = *(_QWORD *)_X10;
      if ((unint64_t)v120 + v126 >= v123)
      {
        v135 = v126 + 1;
        __asm
        {
          PRFM            #0, [X10,#0x40]
          PRFM            #0, [X10,#0x80]
        }
        v123 += 128;
      }
      else
      {
        v135 = v126;
      }
      v122 = _X10;
      v20 = (unint64_t)v120;
      v120 = (_DWORD *)((char *)v120 + v126);
      _X10 = (int *)((char *)_X10 + v126);
      v126 = v135;
      if ((unint64_t)_X10 >= v107)
        goto LABEL_831;
    }
    if (v126 >= 5)
      goto LABEL_162;
LABEL_161:
    *(_DWORD *)(v116 + 4 * v124) = (_DWORD)v120 - v98;
LABEL_162:
    v141 = (unsigned __int8 *)(v98 + v125);
    v143 = ((_DWORD)v122 - (_DWORD)v141);
    v142 = v143 + 3;
    if ((unint64_t)v122 <= a4 || v125 <= v709)
    {
      v139 = 4;
    }
    else
    {
      v144 = (unsigned __int8 *)(v98 - 1 + v125);
      v145 = (unsigned __int8 *)v122 - 1;
      v139 = 4;
      while (*v145 == *v144)
      {
        ++v139;
        v146 = v144 - 1;
        v147 = v145 - 1;
        if ((unint64_t)v144 > v687)
        {
          --v144;
          v62 = (unint64_t)v145-- > a4;
          if (v62)
            continue;
        }
        v141 = v146 + 1;
        v122 = (int *)(v147 + 1);
        goto LABEL_171;
      }
      v141 = v144 + 1;
      v122 = (int *)(v145 + 1);
    }
LABEL_171:
    v148 = (char *)v122 + v139;
    v149 = &v141[v139];
    if (v118 <= (unint64_t)v122 + v139)
    {
      v152 = (int *)((char *)v122 + v139);
    }
    else
    {
      v150 = *(_QWORD *)v148 ^ *(_QWORD *)v149;
      if (v150)
      {
        v151 = __clz(__rbit64(v150)) >> 3;
        goto LABEL_185;
      }
      v178 = 0;
      v179 = (uint64_t)v122 + v139 + 8;
      while (1)
      {
        v180 = (_QWORD *)(v179 + v178);
        if (v179 + v178 >= v118)
          break;
        v181 = *(_QWORD *)&v141[v139 + 8 + v178];
        v178 += 8;
        v182 = *v180 ^ v181;
        if (v182)
        {
          v151 = v178 + (__clz(__rbit64(v182)) >> 3);
          goto LABEL_185;
        }
      }
      v152 = (int *)((char *)v122 + v139 + v178 + 8);
      v149 = &v141[v139 + 8 + v178];
    }
    if ((unint64_t)v152 < v749 && *(_DWORD *)v149 == *v152)
    {
      ++v152;
      v149 += 4;
    }
    if ((unint64_t)v152 < v741 && *(unsigned __int16 *)v149 == *(unsigned __int16 *)v152)
    {
      v152 = (_DWORD *)((char *)v152 + 2);
      v149 += 2;
    }
    if ((unint64_t)v152 < v758 && *v149 == *(unsigned __int8 *)v152)
      v152 = (_DWORD *)((char *)v152 + 1);
    v151 = (char *)v152 - v148;
LABEL_185:
    v153 = (uint64_t)v122 - a4;
    v154 = *(_OWORD **)(a2 + 24);
    if (v122 > (int *)v119)
    {
      v117 = v151;
      sub_1D4B56E1C(v154, (char *)a4, (unint64_t)v122, v119);
      v151 = v117;
      LOBYTE(v117) = v694;
      v107 = v717;
LABEL_187:
      *(_QWORD *)(a2 + 24) += v153;
      v155 = *(_QWORD *)(a2 + 8);
      if ((unint64_t)v153 >= 0x10000)
      {
        v156 = (unint64_t)(v155 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v156;
      }
      v119 = v725;
      v118 = v733;
      goto LABEL_196;
    }
    *v154 = *(_OWORD *)a4;
    v157 = *(_QWORD *)(a2 + 24);
    if ((unint64_t)v153 > 0x10)
    {
      *(_OWORD *)(v157 + 16) = *(_OWORD *)(a4 + 16);
      if (v153 >= 33)
      {
        v158 = v157 + v153;
        v159 = (_OWORD *)(v157 + 32);
        v160 = (__int128 *)(a4 + 48);
        do
        {
          *v159 = *(v160 - 1);
          v161 = *v160;
          v160 += 2;
          v159[1] = v161;
          v159 += 2;
        }
        while ((unint64_t)v159 < v158);
      }
      goto LABEL_187;
    }
    *(_QWORD *)(a2 + 24) = v157 + v153;
    v155 = *(_QWORD *)(a2 + 8);
LABEL_196:
    v162 = v151 + v139;
    *(_WORD *)(v155 + 4) = v153;
    *(_DWORD *)v155 = v142;
    v163 = v151 + v139 - 3;
    if (v163 >= 0x10000)
    {
      v164 = (unint64_t)(v155 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v164;
    }
    *(_WORD *)(v155 + 6) = v163;
    *(_QWORD *)(a2 + 8) = v155 + 8;
    v20 = (unint64_t)v122 + v162;
    if ((unint64_t)v122 + v162 > v107)
    {
      v113 = v114;
      goto LABEL_235;
    }
    *(_DWORD *)(v116 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(v98 + 2 + v129)) >> v117)) = v129 + 2;
    *(_DWORD *)(v116 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(v20 - 2)) >> v117)) = v20 - 2 - v98;
    if (!(_DWORD)v114)
    {
      v113 = 0;
      goto LABEL_235;
    }
    v165 = v143;
    while (1)
    {
      v113 = v165;
      v165 = v114;
      if (*(_DWORD *)v20 != *(_DWORD *)(v20 - v114))
        break;
      v166 = (char *)(v20 + 4);
      v167 = (_DWORD *)(v20 + 4 - v114);
      if (v118 <= v20 + 4)
      {
        v170 = (_DWORD *)(v20 + 4);
LABEL_207:
        if ((unint64_t)v170 < v749 && *v167 == *v170)
        {
          ++v170;
          ++v167;
        }
        if ((unint64_t)v170 < v741 && *(unsigned __int16 *)v167 == *(unsigned __int16 *)v170)
        {
          v170 = (_DWORD *)((char *)v170 + 2);
          v167 = (_DWORD *)((char *)v167 + 2);
        }
        if ((unint64_t)v170 < v758 && *(unsigned __int8 *)v167 == *(unsigned __int8 *)v170)
          v170 = (_DWORD *)((char *)v170 + 1);
        v169 = (char *)v170 - v166;
        goto LABEL_217;
      }
      v168 = *(_QWORD *)v166 ^ *(_QWORD *)v167;
      if (!v168)
      {
        v174 = v20 + 12;
        while (1)
        {
          v175 = (_QWORD *)(v174 + v168);
          if (v174 + v168 >= v118)
            break;
          v176 = *(_QWORD *)(v20 + 12 - v114 + v168);
          v168 += 8;
          v177 = *v175 ^ v176;
          if (v177)
          {
            v169 = v168 + (__clz(__rbit64(v177)) >> 3);
            goto LABEL_217;
          }
        }
        v170 = (_DWORD *)(v20 + v168 + 12);
        v167 = (_DWORD *)((char *)v170 - v114);
        goto LABEL_207;
      }
      v169 = __clz(__rbit64(v168)) >> 3;
LABEL_217:
      *(_DWORD *)(v116 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)v20) >> v117)) = v20 - v98;
      v171 = *(_OWORD **)(a2 + 24);
      if (v20 <= (unint64_t)v119)
      {
        *v171 = *(_OWORD *)v20;
      }
      else
      {
        sub_1D4B56E1C(v171, (char *)v20, v20, v119);
        v119 = v725;
        v118 = v733;
        v107 = v717;
      }
      v172 = *(_QWORD *)(a2 + 8);
      *(_WORD *)(v172 + 4) = 0;
      *(_DWORD *)v172 = 1;
      if (v169 + 1 >= 0x10000)
      {
        v173 = (unint64_t)(v172 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v173;
      }
      v20 += v169 + 4;
      *(_WORD *)(v172 + 6) = v169 + 1;
      *(_QWORD *)(a2 + 8) = v172 + 8;
      v114 = v113;
      v143 = v165;
      if (v20 > v107)
        goto LABEL_235;
    }
    v143 = v113;
    v113 = v114;
LABEL_235:
    _X10 = (int *)(v20 + 3);
    v114 = v143;
    a4 = v20;
  }
  while (v20 + 3 < v107);
LABEL_948:
  v677 = v705;
  if (v705 <= v703)
    v677 = 0;
  v678 = v707;
  if (v707 <= v703)
    v678 = 0;
  if ((_DWORD)v143)
    v679 = v143;
  else
    v679 = v677;
  if ((_DWORD)v143)
    v680 = v677 == 0;
  else
    v680 = 1;
  if (v680)
    v677 = v678;
  if ((_DWORD)v113)
    v677 = v113;
  *a3 = v679;
  a3[1] = v677;
  v9 = v758;
  return v9 - v20;
}

