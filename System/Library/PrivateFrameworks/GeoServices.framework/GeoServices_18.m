void sub_189A0F850(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateMapsFeaturesReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateMapsFeaturesReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A0F8B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateMapsPlaceIdsReadAllFrom(void *a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  GEOPlaceIdDetails *v18;
  _BOOL8 v19;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_27;
          v18 = objc_alloc_init(GEOPlaceIdDetails);
          if (!GEOPlaceIdDetailsReadAllFrom((uint64_t)v18, v3))
          {

            goto LABEL_27;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "addPlaceIdDetails:", v18, 0, 0);

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_27;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v19 = v3[*v6] == 0;
  }
  else
  {
LABEL_27:
    v19 = 0;
  }
  objc_sync_exit(v3);

  return v19;
}

void sub_189A10E08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateMapsPlaceIdsReadFrom(void *a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateMapsPlaceIdsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A10E68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPlaceIdDetailsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  _BOOL8 v37;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            v19 = v18 + 1;
            if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
              goto LABEL_53;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_54;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
              goto LABEL_53;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v21 = v22++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_54;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
              goto LABEL_53;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v21 = v27++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_54;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v32 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_57:
          v37 = 0;
          goto LABEL_56;
      }
      while (1)
      {
        v33 = *v2;
        v34 = *(_QWORD *)&a1[v33];
        v35 = v34 + 1;
        if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
          break;
        v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
        *(_QWORD *)&a1[v33] = v35;
        if (v36 < 0)
        {
          v21 = v32++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_54;
      }
LABEL_53:
      a1[*v4] = 1;
LABEL_54:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v37 = a1[*v4] == 0;
LABEL_56:
  PBReaderRecallMark();
  return v37;
}

BOOL GEOLogMsgStateMapsServerReadAllFrom(uint64_t a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v18;
  GEOMapsServerMetadata *v20;
  void *v21;
  _BOOL8 v22;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          if (v11++ >= 9)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        if ((v12 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_27;
          v20 = objc_alloc_init(GEOMapsServerMetadata);
          if (!GEOMapsServerMetadataReadAllFrom((uint64_t)v20, v5, a3))
          {

            goto LABEL_27;
          }
          PBReaderRecallMark();
          v21 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v20;

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_27;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v22 = v5[*v8] == 0;
  }
  else
  {
LABEL_27:
    v22 = 0;
  }
  objc_sync_exit(v5);

  return v22;
}

void sub_189A11AA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateMapsServerReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateMapsServerReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A11B00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateMapsUserSettingsReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  _BOOL8 v76;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 2u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
                break;
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                goto LABEL_79;
              v18 += 7;
              v15 = v19++ >= 9;
              if (v15)
              {
                LODWORD(v20) = 0;
                goto LABEL_81;
              }
            }
            v3[*v6] = 1;
LABEL_79:
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_81:
            v73 = 12;
            goto LABEL_86;
          case 2u:
            v25 = 0;
            v26 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (2)
            {
              v27 = *v4;
              v28 = *(_QWORD *)&v3[v27];
              v29 = v28 + 1;
              if (v28 == -1 || v29 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v30 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v28);
                *(_QWORD *)&v3[v27] = v29;
                v20 |= (unint64_t)(v30 & 0x7F) << v25;
                if (v30 < 0)
                {
                  v25 += 7;
                  v15 = v26++ >= 9;
                  if (v15)
                  {
                    LODWORD(v20) = 0;
                    goto LABEL_85;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_85:
            v73 = 8;
LABEL_86:
            *(_DWORD *)(a1 + v73) = v20;
            continue;
          case 3u:
            v31 = 0;
            v32 = 0;
            v33 = 0;
            *(_BYTE *)(a1 + 24) |= 0x20u;
            while (2)
            {
              v34 = *v4;
              v35 = *(_QWORD *)&v3[v34];
              v36 = v35 + 1;
              if (v35 == -1 || v36 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v37 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v35);
                *(_QWORD *)&v3[v34] = v36;
                v33 |= (unint64_t)(v37 & 0x7F) << v31;
                if (v37 < 0)
                {
                  v31 += 7;
                  v15 = v32++ >= 9;
                  if (v15)
                  {
                    v33 = 0;
                    goto LABEL_90;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v33 = 0;
LABEL_90:
            v74 = v33 != 0;
            v75 = 19;
            goto LABEL_111;
          case 4u:
            v38 = 0;
            v39 = 0;
            v40 = 0;
            *(_BYTE *)(a1 + 24) |= 0x40u;
            while (2)
            {
              v41 = *v4;
              v42 = *(_QWORD *)&v3[v41];
              v43 = v42 + 1;
              if (v42 == -1 || v43 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v44 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v42);
                *(_QWORD *)&v3[v41] = v43;
                v40 |= (unint64_t)(v44 & 0x7F) << v38;
                if (v44 < 0)
                {
                  v38 += 7;
                  v15 = v39++ >= 9;
                  if (v15)
                  {
                    v40 = 0;
                    goto LABEL_94;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v40 = 0;
LABEL_94:
            v74 = v40 != 0;
            v75 = 20;
            goto LABEL_111;
          case 5u:
            v45 = 0;
            v46 = 0;
            v47 = 0;
            *(_BYTE *)(a1 + 24) |= 0x10u;
            while (2)
            {
              v48 = *v4;
              v49 = *(_QWORD *)&v3[v48];
              v50 = v49 + 1;
              if (v49 == -1 || v50 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v51 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v49);
                *(_QWORD *)&v3[v48] = v50;
                v47 |= (unint64_t)(v51 & 0x7F) << v45;
                if (v51 < 0)
                {
                  v45 += 7;
                  v15 = v46++ >= 9;
                  if (v15)
                  {
                    v47 = 0;
                    goto LABEL_98;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v47 = 0;
LABEL_98:
            v74 = v47 != 0;
            v75 = 18;
            goto LABEL_111;
          case 6u:
            v52 = 0;
            v53 = 0;
            v54 = 0;
            *(_BYTE *)(a1 + 24) |= 4u;
            while (2)
            {
              v55 = *v4;
              v56 = *(_QWORD *)&v3[v55];
              v57 = v56 + 1;
              if (v56 == -1 || v57 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v58 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v56);
                *(_QWORD *)&v3[v55] = v57;
                v54 |= (unint64_t)(v58 & 0x7F) << v52;
                if (v58 < 0)
                {
                  v52 += 7;
                  v15 = v53++ >= 9;
                  if (v15)
                  {
                    v54 = 0;
                    goto LABEL_102;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v54 = 0;
LABEL_102:
            v74 = v54 != 0;
            v75 = 16;
            goto LABEL_111;
          case 7u:
            v59 = 0;
            v60 = 0;
            v61 = 0;
            *(_BYTE *)(a1 + 24) |= 0x80u;
            while (2)
            {
              v62 = *v4;
              v63 = *(_QWORD *)&v3[v62];
              v64 = v63 + 1;
              if (v63 == -1 || v64 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v65 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v63);
                *(_QWORD *)&v3[v62] = v64;
                v61 |= (unint64_t)(v65 & 0x7F) << v59;
                if (v65 < 0)
                {
                  v59 += 7;
                  v15 = v60++ >= 9;
                  if (v15)
                  {
                    v61 = 0;
                    goto LABEL_106;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v61 = 0;
LABEL_106:
            v74 = v61 != 0;
            v75 = 21;
            goto LABEL_111;
          case 8u:
            v66 = 0;
            v67 = 0;
            v68 = 0;
            *(_BYTE *)(a1 + 24) |= 8u;
            break;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_114;
            continue;
        }
        while (1)
        {
          v69 = *v4;
          v70 = *(_QWORD *)&v3[v69];
          v71 = v70 + 1;
          if (v70 == -1 || v71 > *(_QWORD *)&v3[*v5])
            break;
          v72 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v70);
          *(_QWORD *)&v3[v69] = v71;
          v68 |= (unint64_t)(v72 & 0x7F) << v66;
          if ((v72 & 0x80) == 0)
            goto LABEL_108;
          v66 += 7;
          v15 = v67++ >= 9;
          if (v15)
          {
            v68 = 0;
            goto LABEL_110;
          }
        }
        v3[*v6] = 1;
LABEL_108:
        if (v3[*v6])
          v68 = 0;
LABEL_110:
        v74 = v68 != 0;
        v75 = 17;
LABEL_111:
        *(_BYTE *)(a1 + v75) = v74;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v76 = v3[*v6] == 0;
  }
  else
  {
LABEL_114:
    v76 = 0;
  }
  objc_sync_exit(v3);

  return v76;
}

void sub_189A131F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateMapsUserSettingsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateMapsUserSettingsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A13250(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateMarketReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  void *v19;
  _BOOL8 v20;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v18;

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_24;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v20 = v3[*v6] == 0;
  }
  else
  {
LABEL_24:
    v20 = 0;
  }
  objc_sync_exit(v3);

  return v20;
}

void sub_189A13F10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateMarketReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateMarketReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A13F70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateMuninResourceReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  void *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v23 = *v4;
            v24 = *(_QWORD *)&v3[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&v3[*v5])
              break;
            v26 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v24);
            *(_QWORD *)&v3[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0)
              goto LABEL_32;
            v20 += 7;
            v15 = v21++ >= 9;
            if (v15)
            {
              LODWORD(v22) = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            LODWORD(v22) = 0;
LABEL_34:
          *(_DWORD *)(a1 + 16) = v22;
        }
        else if ((v10 >> 3) == 1)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v18;

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_189A14754(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateMuninResourceReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateMuninResourceReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A147B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateNavigationReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  GEONavCameraState *v34;
  void *v35;
  uint64_t v36;
  _BOOL8 v37;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (!v3[*v6])
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 2u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
                break;
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                goto LABEL_43;
              v18 += 7;
              v15 = v19++ >= 9;
              if (v15)
              {
                LODWORD(v20) = 0;
                goto LABEL_45;
              }
            }
            v3[*v6] = 1;
LABEL_43:
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_45:
            v36 = 24;
            goto LABEL_50;
          case 2u:
            v25 = 0;
            v26 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 4u;
            while (2)
            {
              v27 = *v4;
              v28 = *(_QWORD *)&v3[v27];
              v29 = v28 + 1;
              if (v28 == -1 || v29 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v30 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v28);
                *(_QWORD *)&v3[v27] = v29;
                v20 |= (unint64_t)(v30 & 0x7F) << v25;
                if (v30 < 0)
                {
                  v25 += 7;
                  v15 = v26++ >= 9;
                  if (v15)
                  {
                    LODWORD(v20) = 0;
                    goto LABEL_49;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_49:
            v36 = 28;
LABEL_50:
            *(_DWORD *)(a1 + v36) = v20;
            goto LABEL_53;
          case 3u:
            *(_BYTE *)(a1 + 32) |= 1u;
            v31 = *v4;
            v32 = *(_QWORD *)&v3[v31];
            if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v33 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v32);
              *(_QWORD *)&v3[v31] = v32 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v33 = 0;
            }
            *(_QWORD *)(a1 + 8) = v33;
            goto LABEL_53;
          case 4u:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_56;
            v34 = objc_alloc_init(GEONavCameraState);
            if (!GEONavCameraStateReadAllFrom((uint64_t)v34, v3))
            {

              goto LABEL_56;
            }
            PBReaderRecallMark();
            v35 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v34;

LABEL_53:
            if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
              goto LABEL_54;
            break;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_56;
            goto LABEL_53;
        }
      }
    }
LABEL_54:
    v37 = v3[*v6] == 0;
  }
  else
  {
LABEL_56:
    v37 = 0;
  }
  objc_sync_exit(v3);

  return v37;
}

void sub_189A15E60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateNavigationReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateNavigationReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A15EC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONavCameraStateIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  _BOOL8 v37;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            v19 = v18 + 1;
            if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
              goto LABEL_53;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_54;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
              goto LABEL_53;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v21 = v22++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_54;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
              goto LABEL_53;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v21 = v27++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_54;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v32 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_57:
          v37 = 0;
          goto LABEL_56;
      }
      while (1)
      {
        v33 = *v2;
        v34 = *(_QWORD *)&a1[v33];
        v35 = v34 + 1;
        if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
          break;
        v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
        *(_QWORD *)&a1[v33] = v35;
        if (v36 < 0)
        {
          v21 = v32++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_54;
      }
LABEL_53:
      a1[*v4] = 1;
LABEL_54:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v37 = a1[*v4] == 0;
LABEL_56:
  PBReaderRecallMark();
  return v37;
}

BOOL GEOLogMsgStateNearbyTransitReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  GEONearbyTransitGroup *v25;
  _BOOL8 v26;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_40;
          v25 = objc_alloc_init(GEONearbyTransitGroup);
          if (!GEONearbyTransitGroupReadAllFrom((uint64_t)v25, v3))
          {

            goto LABEL_40;
          }
          PBReaderRecallMark();
          objc_msgSend((id)a1, "addGroups:", v25, 0, 0);

        }
        else if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_34;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_36;
            }
          }
          v3[*v6] = 1;
LABEL_34:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_36:
          *(_DWORD *)(a1 + 16) = v20;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_40;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v26 = v3[*v6] == 0;
  }
  else
  {
LABEL_40:
    v26 = 0;
  }
  objc_sync_exit(v3);

  return v26;
}

void sub_189A1700C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateNearbyTransitReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateNearbyTransitReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A1706C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONearbyTransitGroupIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  _BOOL8 v27;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_39;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        goto LABEL_39;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_41;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0)
          {
            v21 = v16++ > 8;
            if (!v21)
              continue;
          }
          goto LABEL_38;
        }
LABEL_36:
        a1[*v4] = 1;
        goto LABEL_38;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_41:
        v27 = 0;
        goto LABEL_40;
      }
LABEL_38:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_39;
    }
    if ((v8 & 7) != 0)
      goto LABEL_41;
    v22 = 0;
    while (1)
    {
      v23 = *v2;
      v24 = *(_QWORD *)&a1[v23];
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
        goto LABEL_36;
      v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
      *(_QWORD *)&a1[v23] = v25;
      if (v26 < 0)
      {
        v21 = v22++ > 8;
        if (!v21)
          continue;
      }
      goto LABEL_38;
    }
  }
LABEL_39:
  v27 = a1[*v4] == 0;
LABEL_40:
  PBReaderRecallMark();
  return v27;
}

BOOL GEOLogMsgStateOfflineReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL8 v62;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 8u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
                break;
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                goto LABEL_65;
              v18 += 7;
              v15 = v19++ >= 9;
              if (v15)
              {
                v20 = 0;
                goto LABEL_67;
              }
            }
            v3[*v6] = 1;
LABEL_65:
            if (v3[*v6])
              v20 = 0;
LABEL_67:
            v59 = v20 != 0;
            v60 = 28;
            goto LABEL_76;
          case 2u:
            v25 = 0;
            v26 = 0;
            v27 = 0;
            *(_BYTE *)(a1 + 32) |= 0x10u;
            while (2)
            {
              v28 = *v4;
              v29 = *(_QWORD *)&v3[v28];
              v30 = v29 + 1;
              if (v29 == -1 || v30 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v31 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v29);
                *(_QWORD *)&v3[v28] = v30;
                v27 |= (unint64_t)(v31 & 0x7F) << v25;
                if (v31 < 0)
                {
                  v25 += 7;
                  v15 = v26++ >= 9;
                  if (v15)
                  {
                    v27 = 0;
                    goto LABEL_71;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v27 = 0;
LABEL_71:
            v59 = v27 != 0;
            v60 = 29;
            goto LABEL_76;
          case 3u:
            v32 = 0;
            v33 = 0;
            v34 = 0;
            *(_BYTE *)(a1 + 32) |= 0x20u;
            while (2)
            {
              v35 = *v4;
              v36 = *(_QWORD *)&v3[v35];
              v37 = v36 + 1;
              if (v36 == -1 || v37 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v38 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v36);
                *(_QWORD *)&v3[v35] = v37;
                v34 |= (unint64_t)(v38 & 0x7F) << v32;
                if (v38 < 0)
                {
                  v32 += 7;
                  v15 = v33++ >= 9;
                  if (v15)
                  {
                    v34 = 0;
                    goto LABEL_75;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v34 = 0;
LABEL_75:
            v59 = v34 != 0;
            v60 = 30;
LABEL_76:
            *(_BYTE *)(a1 + v60) = v59;
            continue;
          case 4u:
            v39 = 0;
            v40 = 0;
            v41 = 0;
            *(_BYTE *)(a1 + 32) |= 4u;
            while (2)
            {
              v42 = *v4;
              v43 = *(_QWORD *)&v3[v42];
              v44 = v43 + 1;
              if (v43 == -1 || v44 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v45 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v43);
                *(_QWORD *)&v3[v42] = v44;
                v41 |= (unint64_t)(v45 & 0x7F) << v39;
                if (v45 < 0)
                {
                  v39 += 7;
                  v15 = v40++ >= 9;
                  if (v15)
                  {
                    LODWORD(v41) = 0;
                    goto LABEL_80;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v41) = 0;
LABEL_80:
            *(_DWORD *)(a1 + 24) = v41;
            continue;
          case 5u:
            v46 = 0;
            v47 = 0;
            v48 = 0;
            *(_BYTE *)(a1 + 32) |= 2u;
            while (2)
            {
              v49 = *v4;
              v50 = *(_QWORD *)&v3[v49];
              v51 = v50 + 1;
              if (v50 == -1 || v51 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v52 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v50);
                *(_QWORD *)&v3[v49] = v51;
                v48 |= (unint64_t)(v52 & 0x7F) << v46;
                if (v52 < 0)
                {
                  v46 += 7;
                  v15 = v47++ >= 9;
                  if (v15)
                  {
                    v48 = 0;
                    goto LABEL_84;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v48 = 0;
LABEL_84:
            v61 = 16;
            goto LABEL_89;
          case 6u:
            v53 = 0;
            v54 = 0;
            v48 = 0;
            *(_BYTE *)(a1 + 32) |= 1u;
            break;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_92;
            continue;
        }
        while (1)
        {
          v55 = *v4;
          v56 = *(_QWORD *)&v3[v55];
          v57 = v56 + 1;
          if (v56 == -1 || v57 > *(_QWORD *)&v3[*v5])
            break;
          v58 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v56);
          *(_QWORD *)&v3[v55] = v57;
          v48 |= (unint64_t)(v58 & 0x7F) << v53;
          if ((v58 & 0x80) == 0)
            goto LABEL_86;
          v53 += 7;
          v15 = v54++ >= 9;
          if (v15)
          {
            v48 = 0;
            goto LABEL_88;
          }
        }
        v3[*v6] = 1;
LABEL_86:
        if (v3[*v6])
          v48 = 0;
LABEL_88:
        v61 = 8;
LABEL_89:
        *(_QWORD *)(a1 + v61) = v48;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v62 = v3[*v6] == 0;
  }
  else
  {
LABEL_92:
    v62 = 0;
  }
  objc_sync_exit(v3);

  return v62;
}

void sub_189A18624(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateOfflineReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateOfflineReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A18684(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateOfflineDownloadReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  void *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL8 v77;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            PBReaderReadString();
            v18 = objc_claimAutoreleasedReturnValue();
            v19 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v18;

            continue;
          case 2u:
            v20 = 0;
            v21 = 0;
            v22 = 0;
            *(_BYTE *)(a1 + 36) |= 0x20u;
            while (1)
            {
              v23 = *v4;
              v24 = *(_QWORD *)&v3[v23];
              v25 = v24 + 1;
              if (v24 == -1 || v25 > *(_QWORD *)&v3[*v5])
                break;
              v26 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v24);
              *(_QWORD *)&v3[v23] = v25;
              v22 |= (unint64_t)(v26 & 0x7F) << v20;
              if ((v26 & 0x80) == 0)
                goto LABEL_80;
              v20 += 7;
              v15 = v21++ >= 9;
              if (v15)
              {
                v22 = 0;
                goto LABEL_82;
              }
            }
            v3[*v6] = 1;
LABEL_80:
            if (v3[*v6])
              v22 = 0;
LABEL_82:
            v74 = v22 != 0;
            v75 = 30;
            goto LABEL_112;
          case 3u:
            v27 = 0;
            v28 = 0;
            v29 = 0;
            *(_BYTE *)(a1 + 36) |= 0x80u;
            while (2)
            {
              v30 = *v4;
              v31 = *(_QWORD *)&v3[v30];
              v32 = v31 + 1;
              if (v31 == -1 || v32 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
                *(_QWORD *)&v3[v30] = v32;
                v29 |= (unint64_t)(v33 & 0x7F) << v27;
                if (v33 < 0)
                {
                  v27 += 7;
                  v15 = v28++ >= 9;
                  if (v15)
                  {
                    v29 = 0;
                    goto LABEL_86;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v29 = 0;
LABEL_86:
            v74 = v29 != 0;
            v75 = 32;
            goto LABEL_112;
          case 4u:
            v34 = 0;
            v35 = 0;
            v36 = 0;
            *(_BYTE *)(a1 + 36) |= 2u;
            while (2)
            {
              v37 = *v4;
              v38 = *(_QWORD *)&v3[v37];
              v39 = v38 + 1;
              if (v38 == -1 || v39 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v40 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v38);
                *(_QWORD *)&v3[v37] = v39;
                v36 |= (unint64_t)(v40 & 0x7F) << v34;
                if (v40 < 0)
                {
                  v34 += 7;
                  v15 = v35++ >= 9;
                  if (v15)
                  {
                    LODWORD(v36) = 0;
                    goto LABEL_90;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v36) = 0;
LABEL_90:
            v76 = 20;
            goto LABEL_99;
          case 5u:
            v41 = 0;
            v42 = 0;
            v36 = 0;
            *(_BYTE *)(a1 + 36) |= 1u;
            while (2)
            {
              v43 = *v4;
              v44 = *(_QWORD *)&v3[v43];
              v45 = v44 + 1;
              if (v44 == -1 || v45 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v46 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v44);
                *(_QWORD *)&v3[v43] = v45;
                v36 |= (unint64_t)(v46 & 0x7F) << v41;
                if (v46 < 0)
                {
                  v41 += 7;
                  v15 = v42++ >= 9;
                  if (v15)
                  {
                    LODWORD(v36) = 0;
                    goto LABEL_94;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v36) = 0;
LABEL_94:
            v76 = 16;
            goto LABEL_99;
          case 6u:
            v47 = 0;
            v48 = 0;
            v36 = 0;
            *(_BYTE *)(a1 + 36) |= 4u;
            while (2)
            {
              v49 = *v4;
              v50 = *(_QWORD *)&v3[v49];
              v51 = v50 + 1;
              if (v50 == -1 || v51 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v52 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v50);
                *(_QWORD *)&v3[v49] = v51;
                v36 |= (unint64_t)(v52 & 0x7F) << v47;
                if (v52 < 0)
                {
                  v47 += 7;
                  v15 = v48++ >= 9;
                  if (v15)
                  {
                    LODWORD(v36) = 0;
                    goto LABEL_98;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v36) = 0;
LABEL_98:
            v76 = 24;
LABEL_99:
            *(_DWORD *)(a1 + v76) = v36;
            continue;
          case 7u:
            v53 = 0;
            v54 = 0;
            v55 = 0;
            *(_BYTE *)(a1 + 36) |= 0x10u;
            while (2)
            {
              v56 = *v4;
              v57 = *(_QWORD *)&v3[v56];
              v58 = v57 + 1;
              if (v57 == -1 || v58 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v59 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v57);
                *(_QWORD *)&v3[v56] = v58;
                v55 |= (unint64_t)(v59 & 0x7F) << v53;
                if (v59 < 0)
                {
                  v53 += 7;
                  v15 = v54++ >= 9;
                  if (v15)
                  {
                    v55 = 0;
                    goto LABEL_103;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v55 = 0;
LABEL_103:
            v74 = v55 != 0;
            v75 = 29;
            goto LABEL_112;
          case 8u:
            v60 = 0;
            v61 = 0;
            v62 = 0;
            *(_BYTE *)(a1 + 36) |= 0x40u;
            while (2)
            {
              v63 = *v4;
              v64 = *(_QWORD *)&v3[v63];
              v65 = v64 + 1;
              if (v64 == -1 || v65 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v66 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v64);
                *(_QWORD *)&v3[v63] = v65;
                v62 |= (unint64_t)(v66 & 0x7F) << v60;
                if (v66 < 0)
                {
                  v60 += 7;
                  v15 = v61++ >= 9;
                  if (v15)
                  {
                    v62 = 0;
                    goto LABEL_107;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v62 = 0;
LABEL_107:
            v74 = v62 != 0;
            v75 = 31;
            goto LABEL_112;
          case 9u:
            v67 = 0;
            v68 = 0;
            v69 = 0;
            *(_BYTE *)(a1 + 36) |= 8u;
            break;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_115;
            continue;
        }
        while (1)
        {
          v70 = *v4;
          v71 = *(_QWORD *)&v3[v70];
          v72 = v71 + 1;
          if (v71 == -1 || v72 > *(_QWORD *)&v3[*v5])
            break;
          v73 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v71);
          *(_QWORD *)&v3[v70] = v72;
          v69 |= (unint64_t)(v73 & 0x7F) << v67;
          if ((v73 & 0x80) == 0)
            goto LABEL_109;
          v67 += 7;
          v15 = v68++ >= 9;
          if (v15)
          {
            v69 = 0;
            goto LABEL_111;
          }
        }
        v3[*v6] = 1;
LABEL_109:
        if (v3[*v6])
          v69 = 0;
LABEL_111:
        v74 = v69 != 0;
        v75 = 28;
LABEL_112:
        *(_BYTE *)(a1 + v75) = v74;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v77 = v3[*v6] == 0;
  }
  else
  {
LABEL_115:
    v77 = 0;
  }
  objc_sync_exit(v3);

  return v77;
}

void sub_189A24244(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateOfflineDownloadReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateOfflineDownloadReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A242A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStatePairedDeviceReadAllFrom(uint64_t a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  GEOLogMsgStateDeviceIdentifier *v34;
  void *v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  BOOL v43;
  uint64_t v44;
  _BOOL8 v45;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      while (!v5[*v8])
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          v17 = v11++ >= 9;
          if (v17)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        switch((v12 >> 3))
        {
          case 1u:
            v20 = 0;
            v21 = 0;
            v22 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (1)
            {
              v23 = *v6;
              v24 = *(_QWORD *)&v5[v23];
              v25 = v24 + 1;
              if (v24 == -1 || v25 > *(_QWORD *)&v5[*v7])
                break;
              v26 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v24);
              *(_QWORD *)&v5[v23] = v25;
              v22 |= (unint64_t)(v26 & 0x7F) << v20;
              if ((v26 & 0x80) == 0)
                goto LABEL_47;
              v20 += 7;
              v17 = v21++ >= 9;
              if (v17)
              {
                LODWORD(v22) = 0;
                goto LABEL_49;
              }
            }
            v5[*v8] = 1;
LABEL_47:
            if (v5[*v8])
              LODWORD(v22) = 0;
LABEL_49:
            *(_DWORD *)(a1 + 16) = v22;
            goto LABEL_59;
          case 2u:
            v27 = 0;
            v28 = 0;
            v29 = 0;
            *(_BYTE *)(a1 + 24) |= 4u;
            while (2)
            {
              v30 = *v6;
              v31 = *(_QWORD *)&v5[v30];
              v32 = v31 + 1;
              if (v31 == -1 || v32 > *(_QWORD *)&v5[*v7])
              {
                v5[*v8] = 1;
              }
              else
              {
                v33 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v31);
                *(_QWORD *)&v5[v30] = v32;
                v29 |= (unint64_t)(v33 & 0x7F) << v27;
                if (v33 < 0)
                {
                  v27 += 7;
                  v17 = v28++ >= 9;
                  if (v17)
                  {
                    v29 = 0;
                    goto LABEL_53;
                  }
                  continue;
                }
              }
              break;
            }
            if (v5[*v8])
              v29 = 0;
LABEL_53:
            v43 = v29 != 0;
            v44 = 21;
            goto LABEL_58;
          case 3u:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_62;
            v34 = objc_alloc_init(GEOLogMsgStateDeviceIdentifier);
            if (!GEOLogMsgStateDeviceIdentifierReadAllFrom((uint64_t)v34, v5, a3))
            {

              goto LABEL_62;
            }
            PBReaderRecallMark();
            v35 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v34;

LABEL_59:
            if (*(_QWORD *)&v5[*v6] >= *(_QWORD *)&v5[*v7])
              goto LABEL_60;
            break;
          case 4u:
            v36 = 0;
            v37 = 0;
            v38 = 0;
            *(_BYTE *)(a1 + 24) |= 2u;
            while (2)
            {
              v39 = *v6;
              v40 = *(_QWORD *)&v5[v39];
              v41 = v40 + 1;
              if (v40 == -1 || v41 > *(_QWORD *)&v5[*v7])
              {
                v5[*v8] = 1;
              }
              else
              {
                v42 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v40);
                *(_QWORD *)&v5[v39] = v41;
                v38 |= (unint64_t)(v42 & 0x7F) << v36;
                if (v42 < 0)
                {
                  v36 += 7;
                  v17 = v37++ >= 9;
                  if (v17)
                  {
                    v38 = 0;
                    goto LABEL_57;
                  }
                  continue;
                }
              }
              break;
            }
            if (v5[*v8])
              v38 = 0;
LABEL_57:
            v43 = v38 != 0;
            v44 = 20;
LABEL_58:
            *(_BYTE *)(a1 + v44) = v43;
            goto LABEL_59;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_62;
            goto LABEL_59;
        }
      }
    }
LABEL_60:
    v45 = v5[*v8] == 0;
  }
  else
  {
LABEL_62:
    v45 = 0;
  }
  objc_sync_exit(v5);

  return v45;
}

void sub_189A25808(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStatePairedDeviceReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStatePairedDeviceReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A25868(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A25F94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgStatePlaceCardReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  void *v37;
  int v38;
  int *v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  int *v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  int *v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  GEOPlaceActionDetails *v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  char v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  char v100;
  char v101;
  BOOL v102;
  uint64_t v103;
  __int16 v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  char v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  char v126;
  int v127;
  __int16 v128;
  void *v129;
  GEOPlaceActionDetails *v131;
  char v132;
  char v133;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 136));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 132);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 128));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (HIBYTE(*(unsigned __int16 *)(a1 + 148)) & 1)
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 148)), (uint16x4_t)0xFFF5FFF9FFF6FFFALL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 148) >> 5) & 1)+ ((*(_WORD *)(a1 + 148) >> 9) & 1)+ ((*(_WORD *)(a1 + 148) >> 12) & 1));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 5;
        v15 = v10 | v14;
        if ((((v10 | v14) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_211;
        v133 = (v16 == 0) | v15;
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v132 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v18))
      goto LABEL_211;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    v29 = v22 & 7;
    if (v28 || v29 == 4)
    {
LABEL_211:
      if ((v15 & 1) != 0)
      {
        v126 = 1;
        goto LABEL_213;
      }
      if (v16)
      {
        while (1)
        {
          v127 = *v16++;
          v128 = 1024;
          switch(v127)
          {
            case 0:
              goto LABEL_226;
            case 1:
              goto LABEL_225;
            case 2:
              v128 = 64;
              goto LABEL_225;
            case 3:
              v128 = 128;
              goto LABEL_225;
            case 4:
              v128 = 2048;
              goto LABEL_225;
            case 7:
              v128 = 32;
              goto LABEL_225;
            case 8:
              v128 = 512;
              goto LABEL_225;
            case 9:
              v128 = 4096;
              goto LABEL_225;
            case 10:
              v128 = 256;
LABEL_225:
              *(_WORD *)(a1 + 148) |= v128;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_226;
    }
    v31 = v22 >> 3;
    v32 = v15;
    if ((v133 & 1) == 0)
    {
      v33 = v16;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32)
          goto LABEL_154;
        if ((*(_WORD *)(a1 + 148) & 0x400) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_231;
          v131 = objc_alloc_init(GEOPlaceActionDetails);
          if (GEOPlaceActionDetailsReadAllFrom((uint64_t)v131, (void *)v3, v9 & 1))
          {
            PBReaderRecallMark();
            v37 = *(void **)(a1 + 104);
            *(_QWORD *)(a1 + 104) = v131;
            goto LABEL_77;
          }
          goto LABEL_230;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_231;
        v104 = 32 * *(_WORD *)(a1 + 148);
        goto LABEL_182;
      case 2:
        if (!v32 || (*(_WORD *)(a1 + 148) & 0x40) != 0)
          goto LABEL_154;
        if (v29 != 2)
        {
          v105 = 0;
          v106 = 0;
          v107 = 0;
          while (1)
          {
            v108 = *v17;
            v109 = *(_QWORD *)(v3 + v108);
            v110 = v109 + 1;
            if (v109 == -1 || v110 > *(_QWORD *)(v3 + *v6))
              goto LABEL_197;
            v111 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v109);
            *(_QWORD *)(v3 + v108) = v110;
            v107 |= (unint64_t)(v111 & 0x7F) << v105;
            if (v111 < 0)
            {
              v105 += 7;
              v27 = v106++ >= 9;
              if (!v27)
                continue;
            }
            goto LABEL_198;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_231;
        while (1)
        {
          v39 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            goto LABEL_156;
          v40 = 0;
          v41 = 0;
          v42 = 0;
          while (1)
          {
            v43 = *v17;
            v44 = *(_QWORD *)(v3 + v43);
            v45 = v44 + 1;
            if (v44 == -1 || v45 > *(_QWORD *)(v3 + *v6))
              break;
            v46 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v44);
            *(_QWORD *)(v3 + v43) = v45;
            v42 |= (unint64_t)(v46 & 0x7F) << v40;
            if (v46 < 0)
            {
              v40 += 7;
              v27 = v41++ >= 9;
              if (!v27)
                continue;
            }
            goto LABEL_58;
          }
          *(_BYTE *)(v3 + *v39) = 1;
LABEL_58:
          PBRepeatedInt32Add();
        }
      case 3:
        if (!v32 || (*(_WORD *)(a1 + 148) & 0x80) != 0)
          goto LABEL_154;
        if (v29 != 2)
        {
          v112 = 0;
          v113 = 0;
          v114 = 0;
          while (1)
          {
            v115 = *v17;
            v116 = *(_QWORD *)(v3 + v115);
            v117 = v116 + 1;
            if (v116 == -1 || v117 > *(_QWORD *)(v3 + *v6))
              break;
            v118 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v116);
            *(_QWORD *)(v3 + v115) = v117;
            v114 |= (unint64_t)(v118 & 0x7F) << v112;
            if (v118 < 0)
            {
              v112 += 7;
              v27 = v113++ >= 9;
              if (!v27)
                continue;
            }
            goto LABEL_198;
          }
LABEL_197:
          *(_BYTE *)(v3 + *v18) = 1;
LABEL_198:
          PBRepeatedInt32Add();
          goto LABEL_208;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_231;
        while (1)
        {
          v47 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            goto LABEL_156;
          v48 = 0;
          v49 = 0;
          v50 = 0;
          while (1)
          {
            v51 = *v17;
            v52 = *(_QWORD *)(v3 + v51);
            v53 = v52 + 1;
            if (v52 == -1 || v53 > *(_QWORD *)(v3 + *v6))
              break;
            v54 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v52);
            *(_QWORD *)(v3 + v51) = v53;
            v50 |= (unint64_t)(v54 & 0x7F) << v48;
            if (v54 < 0)
            {
              v48 += 7;
              v27 = v49++ >= 9;
              if (!v27)
                continue;
            }
            goto LABEL_73;
          }
          *(_BYTE *)(v3 + *v47) = 1;
LABEL_73:
          PBRepeatedInt32Add();
        }
      case 4:
        if (!v32)
          goto LABEL_154;
        if ((*(_WORD *)(a1 + 148) & 0x800) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_231;
          v104 = 16 * *(_WORD *)(a1 + 148);
LABEL_182:
          v7 += v104 >> 15;
        }
        else
        {
          PBReaderReadString();
          v55 = objc_claimAutoreleasedReturnValue();
          v37 = *(void **)(a1 + 112);
          *(_QWORD *)(a1 + 112) = v55;
LABEL_77:

          --v7;
        }
        goto LABEL_208;
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_154;
        v56 = 0;
        v57 = 0;
        v58 = 0;
        *(_WORD *)(a1 + 148) |= 1u;
        while (2)
        {
          v59 = *v17;
          v60 = *(_QWORD *)(v3 + v59);
          v61 = v60 + 1;
          if (v60 == -1 || v61 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v62 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v60);
            *(_QWORD *)(v3 + v59) = v61;
            v58 |= (unint64_t)(v62 & 0x7F) << v56;
            if (v62 < 0)
            {
              v56 += 7;
              v27 = v57++ >= 9;
              if (v27)
              {
                LODWORD(v58) = 0;
                goto LABEL_160;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v58) = 0;
LABEL_160:
        *(_DWORD *)(a1 + 140) = v58;
        goto LABEL_209;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_154;
        v63 = 0;
        v64 = 0;
        v65 = 0;
        *(_WORD *)(a1 + 148) |= 0x10u;
        while (2)
        {
          v66 = *v17;
          v67 = *(_QWORD *)(v3 + v66);
          v68 = v67 + 1;
          if (v67 == -1 || v68 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v69 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v67);
            *(_QWORD *)(v3 + v66) = v68;
            v65 |= (unint64_t)(v69 & 0x7F) << v63;
            if (v69 < 0)
            {
              v63 += 7;
              v27 = v64++ >= 9;
              if (v27)
              {
                v65 = 0;
                goto LABEL_164;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v65 = 0;
LABEL_164:
        v102 = v65 != 0;
        v103 = 147;
        goto LABEL_177;
      case 7:
        if (!v32 || (*(_WORD *)(a1 + 148) & 0x20) != 0)
          goto LABEL_154;
        if (v29 != 2)
        {
          v119 = 0;
          v120 = 0;
          v121 = 0;
          while (1)
          {
            v122 = *v17;
            v123 = *(_QWORD *)(v3 + v122);
            v124 = v123 + 1;
            if (v123 == -1 || v124 > *(_QWORD *)(v3 + *v6))
              break;
            v125 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v123);
            *(_QWORD *)(v3 + v122) = v124;
            v121 |= (unint64_t)(v125 & 0x7F) << v119;
            if (v125 < 0)
            {
              v119 += 7;
              v27 = v120++ >= 9;
              if (!v27)
                continue;
            }
            goto LABEL_207;
          }
          *(_BYTE *)(v3 + *v18) = 1;
LABEL_207:
          PBRepeatedUInt64Add();
          goto LABEL_208;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_231;
        while (1)
        {
          v70 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            break;
          v71 = 0;
          v72 = 0;
          v73 = 0;
          while (1)
          {
            v74 = *v17;
            v75 = *(_QWORD *)(v3 + v74);
            v76 = v75 + 1;
            if (v75 == -1 || v76 > *(_QWORD *)(v3 + *v6))
              break;
            v77 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v75);
            *(_QWORD *)(v3 + v74) = v76;
            v73 |= (unint64_t)(v77 & 0x7F) << v71;
            if (v77 < 0)
            {
              v71 += 7;
              v27 = v72++ >= 9;
              if (!v27)
                continue;
            }
            goto LABEL_108;
          }
          *(_BYTE *)(v3 + *v70) = 1;
LABEL_108:
          PBRepeatedUInt64Add();
        }
LABEL_156:
        PBReaderRecallMark();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v132;
        goto LABEL_209;
      case 8:
        if (!v32 || (*(_WORD *)(a1 + 148) & 0x200) != 0)
          goto LABEL_152;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_231;
        v131 = objc_alloc_init(GEOPlaceCardModule);
        if (!GEOPlaceCardModuleReadAllFrom((uint64_t)v131, (void *)v3, v9 & 1))
          goto LABEL_230;
        PBReaderRecallMark();
        -[GEOLogMsgStatePlaceCard _addNoFlagsModules:](a1, v131);
        goto LABEL_123;
      case 9:
        if (!v32 || (*(_WORD *)(a1 + 148) & 0x1000) != 0)
          goto LABEL_152;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_231;
        v131 = objc_alloc_init(GEORevealedPlaceCardModule);
        if (GEORevealedPlaceCardModuleReadAllFrom((uint64_t)v131, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          -[GEOLogMsgStatePlaceCard _addNoFlagsRevealedModules:](a1, v131);
LABEL_123:
          v78 = v131;
LABEL_124:

LABEL_208:
          v15 = v132;
          v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_209:
          if (!(v15 & 1 | (v7 != 0)) || *(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_211;
          continue;
        }
LABEL_230:

LABEL_231:
        v126 = 0;
        v15 = v132;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_213:
        *(_WORD *)(a1 + 148) |= 0x400u;
        *(_WORD *)(a1 + 148) |= 0x40u;
        *(_WORD *)(a1 + 148) |= 0x80u;
        *(_WORD *)(a1 + 148) |= 0x800u;
        *(_WORD *)(a1 + 148) |= 0x20u;
        *(_WORD *)(a1 + 148) |= 0x200u;
        *(_WORD *)(a1 + 148) |= 0x1000u;
        *(_WORD *)(a1 + 148) |= 0x100u;
        if ((v126 & 1) != 0)
        {
LABEL_226:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) != 0)
            goto LABEL_227;
          return v3;
        }
        v3 = 0;
        if ((v15 & 1) == 0)
          return v3;
LABEL_227:
        v129 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

        return v3;
      case 10:
        if (!v32 || (*(_WORD *)(a1 + 148) & 0x100) != 0)
        {
LABEL_152:
          v100 = PBReaderSkipValueWithTag();
          v15 = v132;
          v18 = (int *)MEMORY[0x1E0D82BC8];
          if ((v100 & 1) == 0)
            goto LABEL_229;
          goto LABEL_209;
        }
        PBReaderReadString();
        v78 = (GEOPlaceActionDetails *)objc_claimAutoreleasedReturnValue();
        if (!v78)
          goto LABEL_124;
        v131 = v78;
        -[GEOLogMsgStatePlaceCard _addNoFlagsCommingledRichProviderIds:](a1, v78);
        goto LABEL_123;
      case 11:
        if ((v8 & 1) == 0)
          goto LABEL_154;
        v79 = 0;
        v80 = 0;
        v81 = 0;
        *(_WORD *)(a1 + 148) |= 8u;
        while (2)
        {
          v82 = *v17;
          v83 = *(_QWORD *)(v3 + v82);
          v84 = v83 + 1;
          if (v83 == -1 || v84 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v85 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v83);
            *(_QWORD *)(v3 + v82) = v84;
            v81 |= (unint64_t)(v85 & 0x7F) << v79;
            if (v85 < 0)
            {
              v79 += 7;
              v27 = v80++ >= 9;
              if (v27)
              {
                v81 = 0;
                goto LABEL_168;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v81 = 0;
LABEL_168:
        v102 = v81 != 0;
        v103 = 146;
        goto LABEL_177;
      case 12:
        if ((v8 & 1) == 0)
          goto LABEL_154;
        v86 = 0;
        v87 = 0;
        v88 = 0;
        *(_WORD *)(a1 + 148) |= 2u;
        while (2)
        {
          v89 = *v17;
          v90 = *(_QWORD *)(v3 + v89);
          v91 = v90 + 1;
          if (v90 == -1 || v91 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v92 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v90);
            *(_QWORD *)(v3 + v89) = v91;
            v88 |= (unint64_t)(v92 & 0x7F) << v86;
            if (v92 < 0)
            {
              v86 += 7;
              v27 = v87++ >= 9;
              if (v27)
              {
                v88 = 0;
                goto LABEL_172;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v88 = 0;
LABEL_172:
        v102 = v88 != 0;
        v103 = 144;
        goto LABEL_177;
      case 13:
        if ((v8 & 1) != 0)
        {
          v93 = 0;
          v94 = 0;
          v95 = 0;
          *(_WORD *)(a1 + 148) |= 4u;
          while (1)
          {
            v96 = *v17;
            v97 = *(_QWORD *)(v3 + v96);
            v98 = v97 + 1;
            if (v97 == -1 || v98 > *(_QWORD *)(v3 + *v6))
              break;
            v99 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v97);
            *(_QWORD *)(v3 + v96) = v98;
            v95 |= (unint64_t)(v99 & 0x7F) << v93;
            if ((v99 & 0x80) == 0)
              goto LABEL_174;
            v93 += 7;
            v27 = v94++ >= 9;
            if (v27)
            {
              v95 = 0;
              goto LABEL_176;
            }
          }
          *(_BYTE *)(v3 + *v18) = 1;
LABEL_174:
          if (*(_BYTE *)(v3 + *v18))
            v95 = 0;
LABEL_176:
          v102 = v95 != 0;
          v103 = 145;
LABEL_177:
          *(_BYTE *)(a1 + v103) = v102;
        }
        else
        {
LABEL_154:
          v101 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v15 = v132;
          if ((v101 & 1) == 0)
          {
LABEL_229:
            v126 = 0;
            goto LABEL_213;
          }
        }
        goto LABEL_209;
      default:
        v38 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v132;
        if (!v38)
          goto LABEL_229;
        goto LABEL_209;
    }
  }
}

void sub_189A26FA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

#error "189A2B220: too complex function (funcsize=7799)"

void sub_189A340E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A34584(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A34A60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A34DA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A350DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A35414(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

#error "189A39FBC: too complex function (funcsize=8571)"

void sub_189A43B68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOLogMsgStatePlaceCardCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1[13], "readAll:", 1);
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v2 = a1[12];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v17;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
    }
    while (v4);
  }

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v7 = a1[15];
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v13;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v11++), "readAll:", 1, (_QWORD)v12);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
    }
    while (v9);
  }

}

unint64_t GEOLogMsgStatePlaceCardReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 132))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLogMsgStatePlaceCardReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 128) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 132) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLogMsgStatePlaceCardReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLogMsgStatePlaceCardReadAllFrom_initialTag;
  Specified = GEOLogMsgStatePlaceCardReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOLogMsgStatePlaceCardCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 136));
  return Specified;
}

void sub_189A43EA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgStatePlaceCardReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStatePlaceCardReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A43F00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPlaceCardModuleIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  _BOOL8 v34;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_53;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_53;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v17 != 2)
      {
        if ((_DWORD)v17 == 1)
        {
          if ((v8 & 7) != 0)
            goto LABEL_55;
          v18 = 0;
          while (1)
          {
            v19 = *v2;
            v20 = *(_QWORD *)&a1[v19];
            v21 = v20 + 1;
            if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
              break;
            v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
            *(_QWORD *)&a1[v19] = v21;
            if (v22 < 0 && v18++ <= 8)
              continue;
            goto LABEL_52;
          }
LABEL_40:
          a1[*v4] = 1;
          goto LABEL_52;
        }
        goto LABEL_38;
      }
      if (v15 != 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_55;
        while (1)
        {
          v24 = *v2;
          v25 = *(_QWORD *)&a1[v24];
          v26 = v25 + 1;
          if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
            goto LABEL_40;
          v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
          *(_QWORD *)&a1[v24] = v26;
          if (v27 < 0)
          {
            v28 = v15++;
            if (v28 <= 8)
              continue;
          }
          goto LABEL_52;
        }
      }
      if (!PBReaderPlaceMark())
      {
LABEL_55:
        PBReaderRecallMark();
        return 0;
      }
LABEL_42:
      while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
      {
        v29 = a1[*v4];
        if (a1[*v4])
          break;
        while (1)
        {
          v30 = *v2;
          v31 = *(_QWORD *)&a1[v30];
          v32 = v31 + 1;
          if (v31 == -1 || v32 > *(_QWORD *)&a1[*v3])
            break;
          v33 = *(char *)(*(_QWORD *)&a1[*v5] + v31);
          *(_QWORD *)&a1[v30] = v32;
          if (v33 < 0)
          {
            v13 = v29++ >= 9;
            if (!v13)
              continue;
          }
          goto LABEL_42;
        }
        a1[*v4] = 1;
      }
      PBReaderRecallMark();
LABEL_52:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_53;
    }
    if (v15 != 2)
      goto LABEL_55;
LABEL_38:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_55;
    goto LABEL_52;
  }
LABEL_53:
  v34 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v34;
}

BOOL GEORevealedPlaceCardModuleIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _BOOL8 v23;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v17 = 0;
          do
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
              goto LABEL_53;
            }
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if ((v21 & 0x80000000) == 0)
              break;
          }
          while (v17++ <= 8);
          goto LABEL_53;
        case 2u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORevealedPlaceCardModuleTypeTitleIsValid(a1))
            goto LABEL_57;
          goto LABEL_52;
        case 3u:
          if (v15 != 2
            || !PBReaderPlaceMark()
            || !GEORevealedPlaceCardModuleTypeUnifiedActionRowIsValid(a1))
          {
            goto LABEL_57;
          }
          goto LABEL_52;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORevealedPlaceCardModuleTypePhotosIsValid(a1))
            goto LABEL_57;
          goto LABEL_52;
        case 5u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORevealedPlaceCardModuleTypeShowcaseIsValid(a1))
            goto LABEL_57;
          goto LABEL_52;
        case 6u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORevealedPlaceCardModuleTypeHoursIsValid(a1))
            goto LABEL_57;
          goto LABEL_52;
        case 7u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEORevealedPlaceCardModuleTypeInfosIsValid(a1))
            goto LABEL_57;
LABEL_52:
          PBReaderRecallMark();
          goto LABEL_53;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_57:
            PBReaderRecallMark();
            return 0;
          }
LABEL_53:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_56;
          break;
      }
    }
  }
LABEL_56:
  v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

void sub_189A449F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOLogMsgStatePlaceCardIsDirty(uint64_t a1)
{
  __int16 v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 136));
  v2 = *(_WORD *)(a1 + 148);
  if ((v2 & 0x2000) != 0)
    return 1;
  if ((*(_WORD *)(a1 + 148) & 0x400) == 0)
  {
LABEL_5:
    if ((v2 & 0x1BE0) != 0)
      return 1;
    if ((v2 & 0x200) != 0)
    {
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v5 = *(id *)(a1 + 96);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v17;
LABEL_11:
        v9 = 0;
        while (1)
        {
          if (*(_QWORD *)v17 != v8)
            objc_enumerationMutation(v5);
          if (GEOPlaceCardModuleIsDirty(*(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v9)))
            goto LABEL_29;
          if (v7 == ++v9)
          {
            v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
            if (v7)
              goto LABEL_11;
            break;
          }
        }
      }

      v2 = *(_WORD *)(a1 + 148);
    }
    if ((v2 & 0x1000) == 0)
      return 0;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v5 = *(id *)(a1 + 120);
    v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
    if (!v3)
    {
LABEL_30:

      return v3;
    }
    v10 = *(_QWORD *)v13;
LABEL_22:
    v11 = 0;
    while (1)
    {
      if (*(_QWORD *)v13 != v10)
        objc_enumerationMutation(v5);
      if ((GEORevealedPlaceCardModuleIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v12 + 1) + 8 * v11)) & 1) != 0)
        break;
      if (v3 == ++v11)
      {
        v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
        if (v3)
          goto LABEL_22;
        goto LABEL_30;
      }
    }
LABEL_29:
    v3 = 1;
    goto LABEL_30;
  }
  if ((GEOPlaceActionDetailsIsDirty(*(os_unfair_lock_s **)(a1 + 104)) & 1) == 0)
  {
    v2 = *(_WORD *)(a1 + 148);
    goto LABEL_5;
  }
  return 1;
}

os_unfair_lock_s *GEOLogMsgStatePlaceCardIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOLogMsgStatePlaceCardIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 34);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189A45490(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStatePlaceCardRapReadAllFrom(uint64_t a1, void *a2)
{
  unsigned __int8 *v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v16;
  _BOOL8 v17;

  v2 = a2;
  objc_sync_enter(v2);
  if (v2)
  {
    v3 = (int *)MEMORY[0x1E0D82BF0];
    v4 = (int *)MEMORY[0x1E0D82BD8];
    v5 = (int *)MEMORY[0x1E0D82BC8];
    v6 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v7 = v2[*v5];
      if (*(_QWORD *)&v2[*v3] >= *(_QWORD *)&v2[*v4])
        break;
      if (v2[*v5])
      {
        v7 = 1;
        break;
      }
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)&v2[v11];
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)&v2[*v4])
          break;
        v14 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v12);
        *(_QWORD *)&v2[v11] = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_13;
        v8 += 7;
        if (v9++ >= 9)
        {
          LOBYTE(v10) = 0;
          v7 = v2[*v5];
          goto LABEL_15;
        }
      }
      v2[*v5] = 1;
LABEL_13:
      v7 = v2[*v5];
      if (v2[*v5])
        LOBYTE(v10) = 0;
LABEL_15:
      if (v7)
        v16 = 1;
      else
        v16 = (v10 & 7) == 4;
      if (v16)
        break;
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_20;
    }
    v17 = v7 == 0;
  }
  else
  {
LABEL_20:
    v17 = 0;
  }
  objc_sync_exit(v2);

  return v17;
}

void sub_189A45F38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStatePlaceCardRapReadFrom(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  _BOOL8 AllFrom;

  v2 = a2;
  v3 = objc_sync_enter(v2);
  AllFrom = GEOLogMsgStatePlaceCardRapReadAllFrom(v3, v2);
  objc_sync_exit(v2);

  return AllFrom;
}

void sub_189A45F90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStatePlaceRequestReadAllFrom(uint64_t a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  GEOPDPlaceRequest *v27;
  void *v28;
  _BOOL8 v29;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          v17 = v11++ >= 9;
          if (v17)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        if ((v12 >> 3) == 2)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_40;
          v27 = objc_alloc_init(GEOPDPlaceRequest);
          if (!GEOPDPlaceRequestReadAllFrom((uint64_t)v27, v5, a3))
          {

            goto LABEL_40;
          }
          PBReaderRecallMark();
          v28 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v27;

        }
        else if ((v12 >> 3) == 1)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v23 = *v6;
            v24 = *(_QWORD *)&v5[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&v5[*v7])
              break;
            v26 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v24);
            *(_QWORD *)&v5[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0)
              goto LABEL_34;
            v20 += 7;
            v17 = v21++ >= 9;
            if (v17)
            {
              LODWORD(v22) = 0;
              goto LABEL_36;
            }
          }
          v5[*v8] = 1;
LABEL_34:
          if (v5[*v8])
            LODWORD(v22) = 0;
LABEL_36:
          *(_DWORD *)(a1 + 16) = v22;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_40;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v29 = v5[*v8] == 0;
  }
  else
  {
LABEL_40:
    v29 = 0;
  }
  objc_sync_exit(v5);

  return v29;
}

void sub_189A47530(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStatePlaceRequestReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStatePlaceRequestReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A47590(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A47A58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgStatePlaceSummaryLayoutReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  _BOOL4 v12;
  int v13;
  int *v14;
  int *v15;
  int *v16;
  uint64_t v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  GEODynamicContextHyperlinkDetails *v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  int v53;
  char v54;
  void *v55;
  char v57;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 68) >> 2) & 1)
      + (*(_BYTE *)(a1 + 68) & 1)
      + ((*(unsigned __int8 *)(a1 + 68) >> 1) & 1);
  while (1)
  {
    v11 = a3[v7];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v7;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v10 > 1;
  v13 = v9 | v12;
  if ((((v9 | v12) | v8) & 1) != 0)
    v14 = 0;
  else
    v14 = a3;
  v15 = (int *)MEMORY[0x1E0D82BF0];
  v16 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(v3 + *v6))
  {
    v17 = (v14 == 0) | v13;
    v57 = (v7 != 0) | v13;
    v18 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(v3 + *v16))
        break;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      while (1)
      {
        v22 = *v15;
        v23 = *(_QWORD *)(v3 + v22);
        v24 = v23 + 1;
        if (v23 == -1 || v24 > *(_QWORD *)(v3 + *v6))
          break;
        v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
        *(_QWORD *)(v3 + v22) = v24;
        v21 |= (unint64_t)(v25 & 0x7F) << v19;
        if ((v25 & 0x80) == 0)
          goto LABEL_24;
        v19 += 7;
        v26 = v20++ >= 9;
        if (v26)
        {
          v21 = 0;
          v27 = *(unsigned __int8 *)(v3 + *v16);
          goto LABEL_26;
        }
      }
      *(_BYTE *)(v3 + *v16) = 1;
LABEL_24:
      v27 = *(unsigned __int8 *)(v3 + *v16);
      if (*(_BYTE *)(v3 + *v16))
        v21 = 0;
LABEL_26:
      v28 = v21 & 7;
      if (v27 || v28 == 4)
        break;
      v30 = v21 >> 3;
      v31 = v13;
      if ((v17 & 1) == 0)
      {
        v32 = v14;
        do
        {
          v34 = *v32++;
          v33 = v34;
          v31 = v34 != 0;
          if (v34)
            v35 = v33 == (_DWORD)v30;
          else
            v35 = 1;
        }
        while (!v35);
      }
      switch((_DWORD)v30)
      {
        case 3:
          if (v31 && (*(_BYTE *)(a1 + 68) & 2) == 0)
          {
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_95;
            v43 = v17;
            v44 = objc_alloc_init(GEODynamicContextHyperlinkDetails);
            if (!GEODynamicContextHyperlinkDetailsReadAllFrom((uint64_t)v44, (void *)v3))
              goto LABEL_96;
            PBReaderRecallMark();
            -[GEOLogMsgStatePlaceSummaryLayout _addNoFlagsDynamicContextHyperlinkDetails:](a1, v44);
LABEL_65:

            v17 = v43;
            v16 = (int *)MEMORY[0x1E0D82BC8];
            continue;
          }
          break;
        case 2:
          if (v31 && (*(_BYTE *)(a1 + 68) & 4) == 0)
          {
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_95;
            v43 = v17;
            v44 = objc_alloc_init(GEOTrailingEntityActionDetails);
            if (!GEOTrailingEntityActionDetailsReadAllFrom((uint64_t)v44, (void *)v3))
            {
LABEL_96:

              v52 = 0;
              v16 = (int *)MEMORY[0x1E0D82BC8];
              goto LABEL_84;
            }
            PBReaderRecallMark();
            -[GEOLogMsgStatePlaceSummaryLayout _addNoFlagsTrailingEntityActionDetails:](a1, v44);
            goto LABEL_65;
          }
          break;
        case 1:
          if (v31 && (*(_BYTE *)(a1 + 68) & 1) == 0)
          {
            if (v28 == 2)
            {
              if (!PBReaderPlaceMark())
                goto LABEL_95;
              while (*(_QWORD *)(v3 + *v15) < *(_QWORD *)(v3 + *v6) && !*(_BYTE *)(v3 + *v16))
              {
                v36 = 0;
                v37 = 0;
                v38 = 0;
                while (1)
                {
                  v39 = *v15;
                  v40 = *(_QWORD *)(v3 + v39);
                  v41 = v40 + 1;
                  if (v40 == -1 || v41 > *(_QWORD *)(v3 + *v6))
                    break;
                  v42 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v40);
                  *(_QWORD *)(v3 + v39) = v41;
                  v38 |= (unint64_t)(v42 & 0x7F) << v36;
                  if (v42 < 0)
                  {
                    v36 += 7;
                    v26 = v37++ >= 9;
                    if (!v26)
                      continue;
                  }
                  goto LABEL_54;
                }
                *(_BYTE *)(v3 + *v16) = 1;
LABEL_54:
                PBRepeatedUInt64Add();
              }
              PBReaderRecallMark();
            }
            else
            {
              v45 = 0;
              v46 = 0;
              v47 = 0;
              while (1)
              {
                v48 = *v15;
                v49 = *(_QWORD *)(v3 + v48);
                v50 = v49 + 1;
                if (v49 == -1 || v50 > *(_QWORD *)(v3 + *v6))
                  break;
                v51 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v49);
                *(_QWORD *)(v3 + v48) = v50;
                v47 |= (unint64_t)(v51 & 0x7F) << v45;
                if (v51 < 0)
                {
                  v45 += 7;
                  v26 = v46++ >= 9;
                  if (!v26)
                    continue;
                }
                goto LABEL_81;
              }
              *(_BYTE *)(v3 + *v16) = 1;
LABEL_81:
              PBRepeatedUInt64Add();
            }
            continue;
          }
          break;
        default:
          if (!PBReaderSkipValueWithTag())
            goto LABEL_95;
          continue;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_95:
        v52 = 0;
        goto LABEL_84;
      }
    }
    while ((v57 & 1) != 0 && *(_QWORD *)(v3 + *v15) < *(_QWORD *)(v3 + *v6));
  }
  if ((v13 & 1) == 0)
  {
    if (v14)
    {
      while (1)
      {
        v53 = *v14++;
        v54 = 1;
        switch(v53)
        {
          case 0:
            goto LABEL_92;
          case 1:
            goto LABEL_91;
          case 2:
            v54 = 4;
            goto LABEL_91;
          case 3:
            v54 = 2;
LABEL_91:
            *(_BYTE *)(a1 + 68) |= v54;
            break;
          default:
            continue;
        }
      }
    }
    goto LABEL_92;
  }
  v52 = 1;
LABEL_84:
  *(_BYTE *)(a1 + 68) |= 1u;
  *(_BYTE *)(a1 + 68) |= 4u;
  *(_BYTE *)(a1 + 68) |= 2u;
  if ((v52 & 1) != 0)
  {
LABEL_92:
    v3 = *(_BYTE *)(v3 + *v16) == 0;
    if ((v13 & 1) != 0)
      goto LABEL_93;
    return v3;
  }
  v3 = 0;
  if ((v13 & 1) == 0)
    return v3;
LABEL_93:
  v55 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

  return v3;
}

void sub_189A48370(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A486A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A49168(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOLogMsgStatePlaceSummaryLayoutCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v2 = *(id *)(a1 + 48);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v17;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
    }
    while (v4);
  }

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v7 = *(id *)(a1 + 40);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v13;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v11++), "readAll:", 1, (_QWORD)v12);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
    }
    while (v9);
  }

}

unint64_t GEOLogMsgStatePlaceSummaryLayoutReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLogMsgStatePlaceSummaryLayoutReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLogMsgStatePlaceSummaryLayoutReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLogMsgStatePlaceSummaryLayoutReadAllFrom_initialTag;
  Specified = GEOLogMsgStatePlaceSummaryLayoutReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOLogMsgStatePlaceSummaryLayoutCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_189A49490(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgStatePlaceSummaryLayoutReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStatePlaceSummaryLayoutReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A494F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTrailingEntityActionDetailsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _BOOL8 v23;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if (v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_37:
          v23 = 0;
          goto LABEL_36;
        }
      }
      else if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_37;
        v17 = 0;
        while (1)
        {
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          v20 = v19 + 1;
          if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
            break;
          v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
          *(_QWORD *)&a1[v18] = v20;
          if (v21 < 0 && v17++ <= 8)
            continue;
          goto LABEL_34;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_37;
      }
LABEL_34:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v23 = a1[*v4] == 0;
LABEL_36:
  PBReaderRecallMark();
  return v23;
}

void sub_189A499DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStatePlaceSummaryLayoutIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = (*(_BYTE *)(a1 + 68) & 0xF) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_189A49EB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A4F828(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgStateRAPReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  int v25;
  unint64_t v27;
  BOOL v28;
  int *v29;
  int v30;
  int v31;
  BOOL v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  int v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  char v54;
  uint64_t v55;
  char v56;
  char v57;
  int v58;
  char v59;
  void *v60;
  void *v62;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 76)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFBFFFDFFFALL) & 0xFF01FF01FF01FF01));
  while (1)
  {
    v11 = a3[v8];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v7 = 1;
LABEL_9:
    ++v8;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v9 | (v10 > 2);
  if (v9 & 1 | (v10 > 2) | v7 & 1)
    v13 = 0;
  else
    v13 = a3;
  v14 = (int *)MEMORY[0x1E0D82BF0];
  v15 = (int *)MEMORY[0x1E0D82BC8];
  v16 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v14) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v15))
      goto LABEL_97;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    while (1)
    {
      v20 = *v14;
      v21 = *(_QWORD *)(v3 + v20);
      v22 = v21 + 1;
      if (v21 == -1 || v22 > *(_QWORD *)(v3 + *v6))
        break;
      v23 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v21);
      *(_QWORD *)(v3 + v20) = v22;
      v19 |= (unint64_t)(v23 & 0x7F) << v17;
      if ((v23 & 0x80) == 0)
        goto LABEL_24;
      v17 += 7;
      v24 = v18++ >= 9;
      if (v24)
      {
        v19 = 0;
        v25 = *(unsigned __int8 *)(v3 + *v15);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v15) = 1;
LABEL_24:
    v25 = *(unsigned __int8 *)(v3 + *v15);
    if (*(_BYTE *)(v3 + *v15))
      v19 = 0;
LABEL_26:
    if (v25 || (v19 & 7) == 4)
    {
LABEL_97:
      if ((v12 & 1) != 0)
      {
        v57 = 1;
        goto LABEL_106;
      }
      if (v13)
      {
        while (1)
        {
          v58 = *v13++;
          v59 = 8;
          switch(v58)
          {
            case 0:
              goto LABEL_107;
            case 3:
              goto LABEL_104;
            case 4:
              v59 = 64;
              goto LABEL_104;
            case 6:
              v59 = 32;
              goto LABEL_104;
            case 7:
              v59 = 16;
LABEL_104:
              *(_BYTE *)(a1 + 76) |= v59;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_107;
    }
    v27 = v19 >> 3;
    v28 = v12;
    if (!((v13 == 0) | v12 & 1))
    {
      v29 = v13;
      do
      {
        v31 = *v29++;
        v30 = v31;
        v28 = v31 != 0;
        if (v31)
          v32 = v30 == (_DWORD)v27;
        else
          v32 = 1;
      }
      while (!v32);
    }
    switch((int)v27)
    {
      case 1:
        if ((v7 & 1) == 0)
          goto LABEL_75;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        *(_BYTE *)(a1 + 76) |= 2u;
        while (1)
        {
          v36 = *v14;
          v37 = *(_QWORD *)(v3 + v36);
          v38 = v37 + 1;
          if (v37 == -1 || v38 > *(_QWORD *)(v3 + *v6))
            break;
          v39 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v37);
          *(_QWORD *)(v3 + v36) = v38;
          v35 |= (unint64_t)(v39 & 0x7F) << v33;
          if ((v39 & 0x80) == 0)
            goto LABEL_78;
          v33 += 7;
          v24 = v34++ >= 9;
          if (v24)
          {
            LODWORD(v35) = 0;
            goto LABEL_80;
          }
        }
        *(_BYTE *)(v3 + *v15) = 1;
LABEL_78:
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v35) = 0;
LABEL_80:
        v55 = 68;
        goto LABEL_85;
      case 2:
        if ((v7 & 1) == 0)
          goto LABEL_75;
        v41 = 0;
        v42 = 0;
        v35 = 0;
        *(_BYTE *)(a1 + 76) |= 4u;
        while (2)
        {
          v43 = *v14;
          v44 = *(_QWORD *)(v3 + v43);
          v45 = v44 + 1;
          if (v44 == -1 || v45 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v15) = 1;
          }
          else
          {
            v46 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v44);
            *(_QWORD *)(v3 + v43) = v45;
            v35 |= (unint64_t)(v46 & 0x7F) << v41;
            if (v46 < 0)
            {
              v41 += 7;
              v24 = v42++ >= 9;
              if (v24)
              {
                LODWORD(v35) = 0;
                goto LABEL_84;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v35) = 0;
LABEL_84:
        v55 = 72;
LABEL_85:
        *(_DWORD *)(a1 + v55) = v35;
        goto LABEL_96;
      case 3:
        if (!v28 || (*(_BYTE *)(a1 + 76) & 8) != 0)
          goto LABEL_75;
        PBReaderReadString();
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        if (v47)
        {
          v62 = v47;
          -[GEOLogMsgStateRAP _addNoFlagsFeedbackFieldOptionKey:](a1, v47);
          v47 = v62;
        }

        goto LABEL_93;
      case 4:
        if (!v28)
          goto LABEL_75;
        if ((*(_BYTE *)(a1 + 76) & 0x40) == 0)
        {
          PBReaderReadString();
          v48 = objc_claimAutoreleasedReturnValue();
          v49 = 48;
          goto LABEL_74;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_112;
        v56 = 2 * *(_BYTE *)(a1 + 76);
        goto LABEL_92;
      case 5:
        if ((v7 & 1) == 0)
          goto LABEL_75;
        *(_BYTE *)(a1 + 76) |= 1u;
        v50 = *v14;
        v51 = *(_QWORD *)(v3 + v50);
        if (v51 <= 0xFFFFFFFFFFFFFFF7 && v51 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v52 = *(_QWORD *)(*(_QWORD *)(v3 + *v16) + v51);
          *(_QWORD *)(v3 + v50) = v51 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v15) = 1;
          v52 = 0;
        }
        *(_QWORD *)(a1 + 16) = v52;
        goto LABEL_96;
      case 6:
        if (!v28)
          goto LABEL_75;
        if ((*(_BYTE *)(a1 + 76) & 0x20) == 0)
        {
          PBReaderReadString();
          v48 = objc_claimAutoreleasedReturnValue();
          v49 = 40;
          goto LABEL_74;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_112;
        v56 = 4 * *(_BYTE *)(a1 + 76);
        goto LABEL_92;
      case 7:
        if (!v28)
        {
LABEL_75:
          v54 = PBReaderSkipValueWithTag();
          v15 = (int *)MEMORY[0x1E0D82BC8];
          if ((v54 & 1) == 0)
          {
LABEL_105:
            v57 = 0;
            goto LABEL_106;
          }
          goto LABEL_96;
        }
        if ((*(_BYTE *)(a1 + 76) & 0x10) == 0)
        {
          PBReaderReadString();
          v48 = objc_claimAutoreleasedReturnValue();
          v49 = 32;
LABEL_74:
          v53 = *(void **)(a1 + v49);
          *(_QWORD *)(a1 + v49) = v48;

          --v8;
LABEL_93:
          v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_96:
          if (!(v12 & 1 | (v8 != 0)))
            goto LABEL_97;
          continue;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v56 = 8 * *(_BYTE *)(a1 + 76);
LABEL_92:
          v8 += v56 >> 7;
          goto LABEL_93;
        }
LABEL_112:
        v57 = 0;
        v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_106:
        *(_BYTE *)(a1 + 76) |= 8u;
        *(_BYTE *)(a1 + 76) |= 0x40u;
        *(_BYTE *)(a1 + 76) |= 0x20u;
        *(_BYTE *)(a1 + 76) |= 0x10u;
        if ((v57 & 1) != 0)
        {
LABEL_107:
          v3 = *(_BYTE *)(v3 + *v15) == 0;
          if ((v12 & 1) != 0)
            goto LABEL_108;
        }
        else
        {
          v3 = 0;
          if ((v12 & 1) != 0)
          {
LABEL_108:
            v60 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v40 = PBReaderSkipValueWithTag();
        v15 = (int *)MEMORY[0x1E0D82BC8];
        if (!v40)
          goto LABEL_105;
        goto LABEL_96;
    }
  }
}

void sub_189A50210(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A503B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A504FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A55F9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgStateRAPReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t v6;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLogMsgStateRAPReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLogMsgStateRAPReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLogMsgStateRAPReadAllFrom_initialTag;
  v6 = GEOLogMsgStateRAPReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v6;
}

void sub_189A56128(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgStateRAPReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t v4;

  v3 = a2;
  objc_sync_enter(v3);
  v4 = GEOLogMsgStateRAPReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return v4;
}

void sub_189A56188(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A56454(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateRAPIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = *(unsigned __int8 *)(a1 + 76) > 7u;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_189A56968(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateRouteReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  GEORouteDetails *v18;
  void *v19;
  _BOOL8 v20;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_27;
          v18 = objc_alloc_init(GEORouteDetails);
          if (!GEORouteDetailsReadAllFrom((uint64_t)v18, v3))
          {

            goto LABEL_27;
          }
          PBReaderRecallMark();
          v19 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v18;

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_27;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v20 = v3[*v6] == 0;
  }
  else
  {
LABEL_27:
    v20 = 0;
  }
  objc_sync_exit(v3);

  return v20;
}

void sub_189A57314(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateRouteReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateRouteReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A57374(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A5772C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgStateRoutingSettingsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  int v25;
  unint64_t v27;
  BOOL v28;
  int *v29;
  int v30;
  int v31;
  BOOL v32;
  GEORoutingSettingsDrivingPrefs *v33;
  uint64_t v34;
  void *v35;
  char v36;
  char v37;
  int v38;
  char v39;
  void *v40;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (1)
  {
    v11 = a3[v7];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v7;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v9 | (v10 > 1);
  if (v9 & 1 | (v10 > 1) | v8 & 1)
    v13 = 0;
  else
    v13 = a3;
  v14 = (int *)MEMORY[0x1E0D82BF0];
  v15 = (int *)MEMORY[0x1E0D82BC8];
  v16 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v14) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v15))
      goto LABEL_68;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    while (1)
    {
      v20 = *v14;
      v21 = *(_QWORD *)(v3 + v20);
      v22 = v21 + 1;
      if (v21 == -1 || v22 > *(_QWORD *)(v3 + *v6))
        break;
      v23 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v21);
      *(_QWORD *)(v3 + v20) = v22;
      v19 |= (unint64_t)(v23 & 0x7F) << v17;
      if ((v23 & 0x80) == 0)
        goto LABEL_24;
      v17 += 7;
      if (v18++ >= 9)
      {
        v19 = 0;
        v25 = *(unsigned __int8 *)(v3 + *v15);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v15) = 1;
LABEL_24:
    v25 = *(unsigned __int8 *)(v3 + *v15);
    if (*(_BYTE *)(v3 + *v15))
      v19 = 0;
LABEL_26:
    if (v25 || (v19 & 7) == 4)
    {
LABEL_68:
      if ((v12 & 1) != 0)
      {
        v37 = 1;
        goto LABEL_76;
      }
      if (v13)
      {
        while (1)
        {
          v38 = *v13++;
          v39 = 4;
          switch(v38)
          {
            case 0:
              goto LABEL_77;
            case 1:
              goto LABEL_74;
            case 2:
              v39 = 1;
              goto LABEL_74;
            case 3:
              v39 = 2;
LABEL_74:
              *(_BYTE *)(a1 + 52) |= v39;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_77;
    }
    v27 = v19 >> 3;
    v28 = v12;
    if (!((v13 == 0) | v12 & 1))
    {
      v29 = v13;
      do
      {
        v31 = *v29++;
        v30 = v31;
        v28 = v31 != 0;
        if (v31)
          v32 = v30 == (_DWORD)v27;
        else
          v32 = 1;
      }
      while (!v32);
    }
    if ((_DWORD)v27 == 3)
    {
      if (v28)
      {
        if ((*(_BYTE *)(a1 + 52) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_75;
          v36 = *(_BYTE *)(a1 + 52) << 6;
          goto LABEL_64;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_75;
        v33 = objc_alloc_init(GEORoutingSettingsDrivingPrefs);
        if (!GEORoutingSettingsDrivingPrefsReadAllFrom((uint64_t)v33, (void *)v3))
          goto LABEL_82;
        PBReaderRecallMark();
        v34 = 24;
LABEL_55:
        v35 = *(void **)(a1 + v34);
        *(_QWORD *)(a1 + v34) = v33;

        --v7;
        v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_67:
        if (!(v12 & 1 | (v7 != 0)))
          goto LABEL_68;
        continue;
      }
LABEL_58:
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_75;
      goto LABEL_67;
    }
    break;
  }
  if ((_DWORD)v27 != 2)
  {
    if ((_DWORD)v27 != 1)
    {
      if (!PBReaderSkipValueWithTag())
        goto LABEL_75;
      goto LABEL_67;
    }
    if (v28)
    {
      if ((*(_BYTE *)(a1 + 52) & 4) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_75;
        v33 = objc_alloc_init(GEORoutingSettingsVirtualGarageSetttings);
        if (!GEORoutingSettingsVirtualGarageSetttingsReadAllFrom((uint64_t)v33, (void *)v3))
          goto LABEL_82;
        PBReaderRecallMark();
        v34 = 32;
        goto LABEL_55;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_75;
      v36 = 32 * *(_BYTE *)(a1 + 52);
LABEL_64:
      v7 += v36 >> 7;
      goto LABEL_67;
    }
    goto LABEL_58;
  }
  if (!v28)
    goto LABEL_58;
  if ((*(_BYTE *)(a1 + 52) & 1) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
LABEL_75:
      v37 = 0;
      goto LABEL_76;
    }
    v7 -= *(_BYTE *)(a1 + 52) & 1;
    goto LABEL_67;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_75;
  v33 = objc_alloc_init(GEORoutingSettingsCyclingPrefs);
  if (GEORoutingSettingsCyclingPrefsReadAllFrom((uint64_t)v33, (void *)v3))
  {
    PBReaderRecallMark();
    v34 = 16;
    goto LABEL_55;
  }
LABEL_82:

  v37 = 0;
  v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_76:
  *(_BYTE *)(a1 + 52) |= 4u;
  *(_BYTE *)(a1 + 52) |= 1u;
  *(_BYTE *)(a1 + 52) |= 2u;
  if ((v37 & 1) != 0)
  {
LABEL_77:
    v3 = *(_BYTE *)(v3 + *v15) == 0;
    if ((v12 & 1) == 0)
      return v3;
    goto LABEL_78;
  }
  v3 = 0;
  if ((v12 & 1) != 0)
  {
LABEL_78:
    v40 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_189A57D58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A57E9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A583F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgStateRoutingSettingsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLogMsgStateRoutingSettingsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLogMsgStateRoutingSettingsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLogMsgStateRoutingSettingsReadAllFrom_initialTag;
  Specified = GEOLogMsgStateRoutingSettingsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 16), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189A585BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgStateRoutingSettingsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateRoutingSettingsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A5861C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORoutingSettingsVirtualGarageSetttingsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  _BOOL8 v27;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_39;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        goto LABEL_39;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_41;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0)
          {
            v21 = v16++ > 8;
            if (!v21)
              continue;
          }
          goto LABEL_38;
        }
LABEL_36:
        a1[*v4] = 1;
        goto LABEL_38;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_41:
        v27 = 0;
        goto LABEL_40;
      }
LABEL_38:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_39;
    }
    if ((v8 & 7) != 0)
      goto LABEL_41;
    v22 = 0;
    while (1)
    {
      v23 = *v2;
      v24 = *(_QWORD *)&a1[v23];
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
        goto LABEL_36;
      v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
      *(_QWORD *)&a1[v23] = v25;
      if (v26 < 0)
      {
        v21 = v22++ > 8;
        if (!v21)
          continue;
      }
      goto LABEL_38;
    }
  }
LABEL_39:
  v27 = a1[*v4] == 0;
LABEL_40:
  PBReaderRecallMark();
  return v27;
}

BOOL GEORoutingSettingsCyclingPrefsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  _BOOL8 v42;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            v19 = v18 + 1;
            if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
              goto LABEL_61;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_62;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
              goto LABEL_61;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v21 = v22++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_62;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
              goto LABEL_61;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v21 = v27++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_62;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v32 = 0;
          while (1)
          {
            v33 = *v2;
            v34 = *(_QWORD *)&a1[v33];
            v35 = v34 + 1;
            if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
              goto LABEL_61;
            v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
            *(_QWORD *)&a1[v33] = v35;
            if (v36 < 0)
            {
              v21 = v32++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_62;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v37 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_65:
          v42 = 0;
          goto LABEL_64;
      }
      while (1)
      {
        v38 = *v2;
        v39 = *(_QWORD *)&a1[v38];
        v40 = v39 + 1;
        if (v39 == -1 || v40 > *(_QWORD *)&a1[*v3])
          break;
        v41 = *(char *)(*(_QWORD *)&a1[*v5] + v39);
        *(_QWORD *)&a1[v38] = v40;
        if (v41 < 0)
        {
          v21 = v37++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_62;
      }
LABEL_61:
      a1[*v4] = 1;
LABEL_62:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v42 = a1[*v4] == 0;
LABEL_64:
  PBReaderRecallMark();
  return v42;
}

BOOL GEORoutingSettingsDrivingPrefsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  _BOOL8 v42;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            v19 = v18 + 1;
            if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
              goto LABEL_61;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_62;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
              goto LABEL_61;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v21 = v22++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_62;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
              goto LABEL_61;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v21 = v27++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_62;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v32 = 0;
          while (1)
          {
            v33 = *v2;
            v34 = *(_QWORD *)&a1[v33];
            v35 = v34 + 1;
            if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
              goto LABEL_61;
            v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
            *(_QWORD *)&a1[v33] = v35;
            if (v36 < 0)
            {
              v21 = v32++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_62;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v37 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_65:
          v42 = 0;
          goto LABEL_64;
      }
      while (1)
      {
        v38 = *v2;
        v39 = *(_QWORD *)&a1[v38];
        v40 = v39 + 1;
        if (v39 == -1 || v40 > *(_QWORD *)&a1[*v3])
          break;
        v41 = *(char *)(*(_QWORD *)&a1[*v5] + v39);
        *(_QWORD *)&a1[v38] = v40;
        if (v41 < 0)
        {
          v21 = v37++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_62;
      }
LABEL_61:
      a1[*v4] = 1;
LABEL_62:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v42 = a1[*v4] == 0;
LABEL_64:
  PBReaderRecallMark();
  return v42;
}

void sub_189A59068(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateRoutingSettingsIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = (*(_BYTE *)(a1 + 52) & 0xF) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_189A59324(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateRoutingWaypointsReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  _BOOL8 v40;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          v28 = 0;
          v29 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v30 = *v4;
            v31 = *(_QWORD *)&v3[v30];
            v32 = v31 + 1;
            if (v31 == -1 || v32 > *(_QWORD *)&v3[*v5])
              break;
            v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
            *(_QWORD *)&v3[v30] = v32;
            v21 |= (unint64_t)(v33 & 0x7F) << v28;
            if ((v33 & 0x80) == 0)
            {
              v27 = &OBJC_IVAR___GEOLogMsgStateRoutingWaypoints__finalWaypointId;
              goto LABEL_49;
            }
            v28 += 7;
            v26 = v29++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEOLogMsgStateRoutingWaypoints__finalWaypointId;
              goto LABEL_51;
            }
          }
          v27 = &OBJC_IVAR___GEOLogMsgStateRoutingWaypoints__finalWaypointId;
LABEL_48:
          v3[*v6] = 1;
        }
        else if ((_DWORD)v18 == 2)
        {
          v34 = 0;
          v35 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 4u;
          while (1)
          {
            v36 = *v4;
            v37 = *(_QWORD *)&v3[v36];
            v38 = v37 + 1;
            if (v37 == -1 || v38 > *(_QWORD *)&v3[*v5])
            {
              v27 = &OBJC_IVAR___GEOLogMsgStateRoutingWaypoints__originalWaypointId;
              goto LABEL_48;
            }
            v39 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v37);
            *(_QWORD *)&v3[v36] = v38;
            v21 |= (unint64_t)(v39 & 0x7F) << v34;
            if ((v39 & 0x80) == 0)
              break;
            v34 += 7;
            v26 = v35++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEOLogMsgStateRoutingWaypoints__originalWaypointId;
              goto LABEL_51;
            }
          }
          v27 = &OBJC_IVAR___GEOLogMsgStateRoutingWaypoints__originalWaypointId;
        }
        else
        {
          if ((_DWORD)v18 != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_58;
            continue;
          }
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 2u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
            {
              v27 = &OBJC_IVAR___GEOLogMsgStateRoutingWaypoints__originalNumberOfStops;
              goto LABEL_48;
            }
            v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              break;
            v19 += 7;
            v26 = v20++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEOLogMsgStateRoutingWaypoints__originalNumberOfStops;
              goto LABEL_51;
            }
          }
          v27 = &OBJC_IVAR___GEOLogMsgStateRoutingWaypoints__originalNumberOfStops;
        }
LABEL_49:
        if (v3[*v6])
          LODWORD(v21) = 0;
LABEL_51:
        *(_DWORD *)(a1 + *v27) = v21;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v40 = v3[*v6] == 0;
  }
  else
  {
LABEL_58:
    v40 = 0;
  }
  objc_sync_exit(v3);

  return v40;
}

void sub_189A59DDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateRoutingWaypointsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateRoutingWaypointsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A59E3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A5A420(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgStateSearchResultsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  BOOL v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  unint64_t v30;
  _BOOL4 v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  GEOSearchResult *v36;
  uint64_t v37;
  void *v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  int v46;
  char v47;
  char v48;
  char v49;
  char v50;
  int v51;
  int v52;
  void *v53;
  BOOL v55;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 48) >> 2) & 1) + ((*(unsigned __int8 *)(a1 + 48) >> 1) & 1);
  while (1)
  {
    v11 = a3[v8];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v7 = 1;
LABEL_9:
    ++v8;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v9 & 1 | v10;
  v13 = v12 != 0;
  if ((v12 != 0) | v7 & 1)
    v14 = 0;
  else
    v14 = a3;
  if (v12)
    v15 = 1;
  else
    v15 = v14 == 0;
  v55 = v15;
  v16 = (int *)MEMORY[0x1E0D82BF0];
  v17 = (int *)MEMORY[0x1E0D82BC8];
  v18 = (int *)MEMORY[0x1E0D82BB8];
  v19 = &OBJC_IVAR___GEOTextItemContainer__textItems;
  while (2)
  {
    if (*(_QWORD *)(v3 + *v16) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v17))
      goto LABEL_74;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v16;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_27;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_29;
      }
    }
    *(_BYTE *)(v3 + *v17) = 1;
LABEL_27:
    v28 = *(unsigned __int8 *)(v3 + *v17);
    if (*(_BYTE *)(v3 + *v17))
      v22 = 0;
LABEL_29:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_74:
      if (v13)
      {
        v49 = 1;
        goto LABEL_89;
      }
      if (!v14)
        goto LABEL_90;
      while (1)
      {
        v52 = *v14++;
        v51 = v52;
        if (v52 == 1)
          break;
        if (v51 == 3)
        {
          v50 = 2;
LABEL_80:
          *(_BYTE *)(a1 + v19[418]) |= v50;
        }
        else if (!v51)
        {
          goto LABEL_90;
        }
      }
      v50 = 4;
      goto LABEL_80;
    }
    v30 = v22 >> 3;
    v31 = v13;
    if (!v55)
    {
      v32 = v14;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    if ((_DWORD)v30 == 3)
    {
      if (!v31)
        goto LABEL_61;
      if ((*(_BYTE *)(a1 + v19[418]) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_86:
          v49 = 0;
          goto LABEL_88;
        }
        v8 += *(unsigned __int8 *)(a1 + v19[418]) << 30 >> 31;
      }
      else
      {
        PBReaderReadString();
        v37 = objc_claimAutoreleasedReturnValue();
        v38 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v37;

        --v8;
      }
LABEL_69:
      v17 = (int *)MEMORY[0x1E0D82BC8];
      goto LABEL_70;
    }
    if ((_DWORD)v30 == 2)
    {
      if ((v7 & 1) == 0)
        goto LABEL_61;
      v39 = 0;
      v40 = 0;
      v41 = 0;
      *(_BYTE *)(a1 + v19[418]) |= 1u;
      while (1)
      {
        v42 = *v16;
        v43 = *(_QWORD *)(v3 + v42);
        v44 = v43 + 1;
        if (v43 == -1 || v44 > *(_QWORD *)(v3 + *v6))
          break;
        v45 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v43);
        *(_QWORD *)(v3 + v42) = v44;
        v41 |= (unint64_t)(v45 & 0x7F) << v39;
        if ((v45 & 0x80) == 0)
          goto LABEL_64;
        v39 += 7;
        v27 = v40++ >= 9;
        if (v27)
        {
          v41 = 0;
          goto LABEL_66;
        }
      }
      *(_BYTE *)(v3 + *v17) = 1;
LABEL_64:
      if (*(_BYTE *)(v3 + *v17))
        v41 = 0;
LABEL_66:
      *(_BYTE *)(a1 + 44) = v41 != 0;
LABEL_70:
      if (v8)
        v48 = 1;
      else
        v48 = v13;
      if ((v48 & 1) == 0)
        goto LABEL_74;
      continue;
    }
    break;
  }
  if ((_DWORD)v30 != 1)
  {
    v46 = PBReaderSkipValueWithTag();
    v17 = (int *)MEMORY[0x1E0D82BC8];
    if (!v46)
      goto LABEL_85;
    goto LABEL_70;
  }
  if (!v31 || (*(_BYTE *)(a1 + v19[418]) & 4) != 0)
  {
LABEL_61:
    v47 = PBReaderSkipValueWithTag();
    v17 = (int *)MEMORY[0x1E0D82BC8];
    if ((v47 & 1) == 0)
    {
LABEL_85:
      v49 = 0;
      goto LABEL_89;
    }
    goto LABEL_70;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_86;
  v36 = objc_alloc_init(GEOSearchResult);
  if (GEOSearchResultReadAllFrom((uint64_t)v36, (void *)v3))
  {
    PBReaderRecallMark();
    -[GEOLogMsgStateSearchResults _addNoFlagsSearchResults:](a1, v36);

    v19 = &OBJC_IVAR___GEOTextItemContainer__textItems;
    goto LABEL_69;
  }

  v49 = 0;
  v19 = &OBJC_IVAR___GEOTextItemContainer__textItems;
LABEL_88:
  v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_89:
  *(_BYTE *)(a1 + v19[418]) |= 4u;
  *(_BYTE *)(a1 + v19[418]) |= 2u;
  if ((v49 & 1) != 0)
  {
LABEL_90:
    v3 = *(_BYTE *)(v3 + *v17) == 0;
    if (v13)
      goto LABEL_91;
  }
  else
  {
    v3 = 0;
    if (v13)
    {
LABEL_91:
      v53 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;

    }
  }
  return v3;
}

void sub_189A5AC94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A5B35C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOLogMsgStateSearchResultsCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 24);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "readAll:", 1, (_QWORD)v6);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEOLogMsgStateSearchResultsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLogMsgStateSearchResultsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLogMsgStateSearchResultsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLogMsgStateSearchResultsReadAllFrom_initialTag;
  Specified = GEOLogMsgStateSearchResultsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOLogMsgStateSearchResultsCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_189A5B5E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgStateSearchResultsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateSearchResultsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A5B644(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSearchResultIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  _BOOL8 v42;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            v19 = v18 + 1;
            if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
              goto LABEL_61;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_62;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
              goto LABEL_61;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v21 = v22++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_62;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
              goto LABEL_61;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v21 = v27++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_62;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v32 = 0;
          while (1)
          {
            v33 = *v2;
            v34 = *(_QWORD *)&a1[v33];
            v35 = v34 + 1;
            if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
              goto LABEL_61;
            v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
            *(_QWORD *)&a1[v33] = v35;
            if (v36 < 0)
            {
              v21 = v32++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_62;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_65;
          v37 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_65:
          v42 = 0;
          goto LABEL_64;
      }
      while (1)
      {
        v38 = *v2;
        v39 = *(_QWORD *)&a1[v38];
        v40 = v39 + 1;
        if (v39 == -1 || v40 > *(_QWORD *)&a1[*v3])
          break;
        v41 = *(char *)(*(_QWORD *)&a1[*v5] + v39);
        *(_QWORD *)&a1[v38] = v40;
        if (v41 < 0)
        {
          v21 = v37++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_62;
      }
LABEL_61:
      a1[*v4] = 1;
LABEL_62:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v42 = a1[*v4] == 0;
LABEL_64:
  PBReaderRecallMark();
  return v42;
}

void sub_189A5BBD8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateSearchResultsIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v2 = (*(_BYTE *)(a1 + 48) & 0xE) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v2;
}

void sub_189A5BFEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A5C47C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgStateSuggestionsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  int *v15;
  int *v16;
  BOOL v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int v27;
  unint64_t v29;
  _BOOL4 v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  void *v36;
  GEOAutoCompleteResultInfo *v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  int v60;
  int v61;
  char v62;
  void *v63;
  BOOL v65;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 56) >> 4) & 1) + ((*(unsigned __int8 *)(a1 + 56) >> 3) & 1);
  while (1)
  {
    v11 = a3[v8];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v7 = 1;
LABEL_9:
    ++v8;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v9 & 1 | v10;
  v13 = v12 != 0;
  if ((v12 != 0) | v7 & 1)
    v14 = 0;
  else
    v14 = a3;
  v15 = (int *)MEMORY[0x1E0D82BF0];
  v16 = (int *)MEMORY[0x1E0D82BC8];
  if (v12)
    v17 = 1;
  else
    v17 = v14 == 0;
  v65 = v17;
  v18 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v15) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v16))
      goto LABEL_97;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v15;
      v23 = *(_QWORD *)(v3 + v22);
      v24 = v23 + 1;
      if (v23 == -1 || v24 > *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v24;
      v21 |= (unint64_t)(v25 & 0x7F) << v19;
      if ((v25 & 0x80) == 0)
        goto LABEL_27;
      v19 += 7;
      v26 = v20++ >= 9;
      if (v26)
      {
        v21 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v16);
        goto LABEL_29;
      }
    }
    *(_BYTE *)(v3 + *v16) = 1;
LABEL_27:
    v27 = *(unsigned __int8 *)(v3 + *v16);
    if (*(_BYTE *)(v3 + *v16))
      v21 = 0;
LABEL_29:
    if (v27 || (v21 & 7) == 4)
    {
LABEL_97:
      if (v13)
      {
        v59 = 1;
        goto LABEL_108;
      }
      if (!v14)
        goto LABEL_109;
      while (1)
      {
        v61 = *v14++;
        v60 = v61;
        if (v61 == 1)
          break;
        if (v60 == 2)
        {
          v62 = 8;
LABEL_106:
          *(_BYTE *)(a1 + 56) |= v62;
        }
        else if (!v60)
        {
          goto LABEL_109;
        }
      }
      v62 = 16;
      goto LABEL_106;
    }
    v29 = v21 >> 3;
    v30 = v13;
    if (!v65)
    {
      v31 = v14;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    switch((int)v29)
    {
      case 1:
        if (!v30)
          goto LABEL_75;
        if ((*(_BYTE *)(a1 + 56) & 0x10) == 0)
        {
          PBReaderReadString();
          v35 = objc_claimAutoreleasedReturnValue();
          v36 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v35;

          --v8;
          goto LABEL_90;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_107;
        v8 += *(unsigned __int8 *)(a1 + 56) << 27 >> 31;
        goto LABEL_90;
      case 2:
        if (!v30 || (*(_BYTE *)(a1 + 56) & 8) != 0)
          goto LABEL_75;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_107;
        v37 = objc_alloc_init(GEOAutoCompleteResultInfo);
        if (GEOAutoCompleteResultInfoReadAllFrom((uint64_t)v37, (void *)v3))
        {
          PBReaderRecallMark();
          -[GEOLogMsgStateSuggestions _addNoFlagsDisplayedResult:](a1, v37);

          v16 = (int *)MEMORY[0x1E0D82BC8];
LABEL_90:
          if (v8)
            v58 = 1;
          else
            v58 = v13;
          if ((v58 & 1) == 0)
            goto LABEL_97;
          continue;
        }

        v59 = 0;
        v16 = (int *)MEMORY[0x1E0D82BC8];
LABEL_108:
        *(_BYTE *)(a1 + 56) |= 0x10u;
        *(_BYTE *)(a1 + 56) |= 8u;
        if ((v59 & 1) != 0)
        {
LABEL_109:
          v3 = *(_BYTE *)(v3 + *v16) == 0;
          if (v13)
            goto LABEL_110;
        }
        else
        {
          v3 = 0;
          if (v13)
          {
LABEL_110:
            v63 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      case 3:
        if ((v7 & 1) == 0)
          goto LABEL_75;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        *(_BYTE *)(a1 + 56) |= 4u;
        while (2)
        {
          v41 = *v15;
          v42 = *(_QWORD *)(v3 + v41);
          v43 = v42 + 1;
          if (v42 == -1 || v43 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v16) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v42);
            *(_QWORD *)(v3 + v41) = v43;
            v40 |= (unint64_t)(v44 & 0x7F) << v38;
            if (v44 < 0)
            {
              v38 += 7;
              v26 = v39++ >= 9;
              if (v26)
              {
                LODWORD(v40) = 0;
                goto LABEL_80;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v16))
          LODWORD(v40) = 0;
LABEL_80:
        v57 = 52;
        goto LABEL_89;
      case 4:
        if ((v7 & 1) == 0)
          goto LABEL_75;
        v45 = 0;
        v46 = 0;
        v40 = 0;
        *(_BYTE *)(a1 + 56) |= 2u;
        while (2)
        {
          v47 = *v15;
          v48 = *(_QWORD *)(v3 + v47);
          v49 = v48 + 1;
          if (v48 == -1 || v49 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v16) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v48);
            *(_QWORD *)(v3 + v47) = v49;
            v40 |= (unint64_t)(v50 & 0x7F) << v45;
            if (v50 < 0)
            {
              v45 += 7;
              v26 = v46++ >= 9;
              if (v26)
              {
                LODWORD(v40) = 0;
                goto LABEL_84;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v16))
          LODWORD(v40) = 0;
LABEL_84:
        v57 = 48;
        goto LABEL_89;
      case 5:
        if ((v7 & 1) != 0)
        {
          v51 = 0;
          v52 = 0;
          v40 = 0;
          *(_BYTE *)(a1 + 56) |= 1u;
          while (1)
          {
            v53 = *v15;
            v54 = *(_QWORD *)(v3 + v53);
            v55 = v54 + 1;
            if (v54 == -1 || v55 > *(_QWORD *)(v3 + *v6))
              break;
            v56 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v54);
            *(_QWORD *)(v3 + v53) = v55;
            v40 |= (unint64_t)(v56 & 0x7F) << v51;
            if ((v56 & 0x80) == 0)
              goto LABEL_86;
            v51 += 7;
            v26 = v52++ >= 9;
            if (v26)
            {
              LODWORD(v40) = 0;
              goto LABEL_88;
            }
          }
          *(_BYTE *)(v3 + *v16) = 1;
LABEL_86:
          if (*(_BYTE *)(v3 + *v16))
            LODWORD(v40) = 0;
LABEL_88:
          v57 = 44;
LABEL_89:
          *(_DWORD *)(a1 + v57) = v40;
        }
        else
        {
LABEL_75:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_107:
            v59 = 0;
            goto LABEL_108;
          }
        }
        goto LABEL_90;
      default:
        if (!PBReaderSkipValueWithTag())
          goto LABEL_107;
        goto LABEL_90;
    }
  }
}

void sub_189A5CBF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A5D964(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOLogMsgStateSuggestionsCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 16);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "readAll:", 1, (_QWORD)v6);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEOLogMsgStateSuggestionsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLogMsgStateSuggestionsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLogMsgStateSuggestionsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLogMsgStateSuggestionsReadAllFrom_initialTag;
  Specified = GEOLogMsgStateSuggestionsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOLogMsgStateSuggestionsCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_189A5DBF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgStateSuggestionsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateSuggestionsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A5DC50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A5DEE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateSuggestionsIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v2 = (*(_BYTE *)(a1 + 56) & 0x38) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v2;
}

void sub_189A5E38C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateSummaryLookAroundLogReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  BOOL v60;
  uint64_t v61;
  _BOOL8 v62;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 20) |= 1u;
            while (2)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
                *(_QWORD *)&v3[v21] = v23;
                v20 |= (unint64_t)(v24 & 0x7F) << v18;
                if (v24 < 0)
                {
                  v18 += 7;
                  v15 = v19++ >= 9;
                  if (v15)
                  {
                    LODWORD(v20) = 0;
                    goto LABEL_67;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_67:
            *(_DWORD *)(a1 + 8) = v20;
            continue;
          case 2u:
            v25 = 0;
            v26 = 0;
            v27 = 0;
            *(_BYTE *)(a1 + 20) |= 4u;
            while (1)
            {
              v28 = *v4;
              v29 = *(_QWORD *)&v3[v28];
              v30 = v29 + 1;
              if (v29 == -1 || v30 > *(_QWORD *)&v3[*v5])
                break;
              v31 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v29);
              *(_QWORD *)&v3[v28] = v30;
              v27 |= (unint64_t)(v31 & 0x7F) << v25;
              if ((v31 & 0x80) == 0)
                goto LABEL_69;
              v25 += 7;
              v15 = v26++ >= 9;
              if (v15)
              {
                v27 = 0;
                goto LABEL_71;
              }
            }
            v3[*v6] = 1;
LABEL_69:
            if (v3[*v6])
              v27 = 0;
LABEL_71:
            v60 = v27 != 0;
            v61 = 13;
            goto LABEL_88;
          case 3u:
            v32 = 0;
            v33 = 0;
            v34 = 0;
            *(_BYTE *)(a1 + 20) |= 0x20u;
            while (2)
            {
              v35 = *v4;
              v36 = *(_QWORD *)&v3[v35];
              v37 = v36 + 1;
              if (v36 == -1 || v37 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v38 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v36);
                *(_QWORD *)&v3[v35] = v37;
                v34 |= (unint64_t)(v38 & 0x7F) << v32;
                if (v38 < 0)
                {
                  v32 += 7;
                  v15 = v33++ >= 9;
                  if (v15)
                  {
                    v34 = 0;
                    goto LABEL_75;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v34 = 0;
LABEL_75:
            v60 = v34 != 0;
            v61 = 16;
            goto LABEL_88;
          case 4u:
            v39 = 0;
            v40 = 0;
            v41 = 0;
            *(_BYTE *)(a1 + 20) |= 2u;
            while (2)
            {
              v42 = *v4;
              v43 = *(_QWORD *)&v3[v42];
              v44 = v43 + 1;
              if (v43 == -1 || v44 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v45 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v43);
                *(_QWORD *)&v3[v42] = v44;
                v41 |= (unint64_t)(v45 & 0x7F) << v39;
                if (v45 < 0)
                {
                  v39 += 7;
                  v15 = v40++ >= 9;
                  if (v15)
                  {
                    v41 = 0;
                    goto LABEL_79;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v41 = 0;
LABEL_79:
            v60 = v41 != 0;
            v61 = 12;
            goto LABEL_88;
          case 5u:
            v46 = 0;
            v47 = 0;
            v48 = 0;
            *(_BYTE *)(a1 + 20) |= 8u;
            while (2)
            {
              v49 = *v4;
              v50 = *(_QWORD *)&v3[v49];
              v51 = v50 + 1;
              if (v50 == -1 || v51 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v52 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v50);
                *(_QWORD *)&v3[v49] = v51;
                v48 |= (unint64_t)(v52 & 0x7F) << v46;
                if (v52 < 0)
                {
                  v46 += 7;
                  v15 = v47++ >= 9;
                  if (v15)
                  {
                    v48 = 0;
                    goto LABEL_83;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v48 = 0;
LABEL_83:
            v60 = v48 != 0;
            v61 = 14;
            goto LABEL_88;
          case 6u:
            v53 = 0;
            v54 = 0;
            v55 = 0;
            *(_BYTE *)(a1 + 20) |= 0x10u;
            break;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_91;
            continue;
        }
        while (1)
        {
          v56 = *v4;
          v57 = *(_QWORD *)&v3[v56];
          v58 = v57 + 1;
          if (v57 == -1 || v58 > *(_QWORD *)&v3[*v5])
            break;
          v59 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v57);
          *(_QWORD *)&v3[v56] = v58;
          v55 |= (unint64_t)(v59 & 0x7F) << v53;
          if ((v59 & 0x80) == 0)
            goto LABEL_85;
          v53 += 7;
          v15 = v54++ >= 9;
          if (v15)
          {
            v55 = 0;
            goto LABEL_87;
          }
        }
        v3[*v6] = 1;
LABEL_85:
        if (v3[*v6])
          v55 = 0;
LABEL_87:
        v60 = v55 != 0;
        v61 = 15;
LABEL_88:
        *(_BYTE *)(a1 + v61) = v60;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v62 = v3[*v6] == 0;
  }
  else
  {
LABEL_91:
    v62 = 0;
  }
  objc_sync_exit(v3);

  return v62;
}

void sub_189A5F530(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateSummaryLookAroundLogReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateSummaryLookAroundLogReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A5F590(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateTapEventReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  GEOSearchResult *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  _BOOL8 v26;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
              break;
            v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              goto LABEL_34;
            v19 += 7;
            v15 = v20++ >= 9;
            if (v15)
            {
              LODWORD(v21) = 0;
              goto LABEL_36;
            }
          }
          v3[*v6] = 1;
LABEL_34:
          if (v3[*v6])
            LODWORD(v21) = 0;
LABEL_36:
          *(_DWORD *)(a1 + 16) = v21;
        }
        else if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_40;
          v18 = objc_alloc_init(GEOSearchResult);
          if (!GEOSearchResultReadAllFrom((uint64_t)v18, v3))
          {

            goto LABEL_40;
          }
          PBReaderRecallMark();
          objc_msgSend((id)a1, "addSearchResults:", v18, 0, 0);

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_40;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v26 = v3[*v6] == 0;
  }
  else
  {
LABEL_40:
    v26 = 0;
  }
  objc_sync_exit(v3);

  return v26;
}

void sub_189A60754(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateTapEventReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateTapEventReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A607B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateTileSetReadAllFrom(void *a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  GEOTileSetInfo *v18;
  _BOOL8 v19;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_27;
          v18 = objc_alloc_init(GEOTileSetInfo);
          if (!GEOTileSetInfoReadAllFrom((uint64_t)v18, v3))
          {

            goto LABEL_27;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "addTileSetInfo:", v18, 0, 0);

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_27;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v19 = v3[*v6] == 0;
  }
  else
  {
LABEL_27:
    v19 = 0;
  }
  objc_sync_exit(v3);

  return v19;
}

void sub_189A61494(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateTileSetReadFrom(void *a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateTileSetReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A614F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTileSetInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  _BOOL8 v37;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            v19 = v18 + 1;
            if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
              goto LABEL_53;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_54;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
              goto LABEL_53;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v21 = v22++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_54;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
              goto LABEL_53;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v21 = v27++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_54;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v32 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_57:
          v37 = 0;
          goto LABEL_56;
      }
      while (1)
      {
        v33 = *v2;
        v34 = *(_QWORD *)&a1[v33];
        v35 = v34 + 1;
        if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
          break;
        v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
        *(_QWORD *)&a1[v33] = v35;
        if (v36 < 0)
        {
          v21 = v32++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_54;
      }
LABEL_53:
      a1[*v4] = 1;
LABEL_54:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v37 = a1[*v4] == 0;
LABEL_56:
  PBReaderRecallMark();
  return v37;
}

BOOL GEOLogMsgStateTransitReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  _BOOL8 v25;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 12) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_30;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_32;
            }
          }
          v3[*v6] = 1;
LABEL_30:
          if (v3[*v6])
            v20 = 0;
LABEL_32:
          *(_BYTE *)(a1 + 8) = v20 != 0;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_35;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v25 = v3[*v6] == 0;
  }
  else
  {
LABEL_35:
    v25 = 0;
  }
  objc_sync_exit(v3);

  return v25;
}

void sub_189A62174(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateTransitReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateTransitReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A621D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateTransitStepReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  _BOOL8 v25;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 12) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_30;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_32;
            }
          }
          v3[*v6] = 1;
LABEL_30:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_32:
          *(_DWORD *)(a1 + 8) = v20;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_35;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v25 = v3[*v6] == 0;
  }
  else
  {
LABEL_35:
    v25 = 0;
  }
  objc_sync_exit(v3);

  return v25;
}

void sub_189A628F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateTransitStepReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateTransitStepReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A62958(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateUGCPhotoReadAllFrom(uint64_t a1, void *a2)
{
  char *v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  _BOOL8 v32;

  v2 = a2;
  objc_sync_enter(v2);
  if (v2)
  {
    v3 = (int *)MEMORY[0x1E0D82BF0];
    v4 = (int *)MEMORY[0x1E0D82BD8];
    v5 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v2[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v2[*MEMORY[0x1E0D82BD8]])
    {
      v6 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v2[*v5])
          break;
        v7 = 0;
        v8 = 0;
        v9 = 0;
        while (1)
        {
          v10 = *v3;
          v11 = *(_QWORD *)&v2[v10];
          v12 = v11 + 1;
          if (v11 == -1 || v12 > *(_QWORD *)&v2[*v4])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v11);
          *(_QWORD *)&v2[v10] = v12;
          v9 |= (unint64_t)(v13 & 0x7F) << v7;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v7 += 7;
          v14 = v8++ >= 9;
          if (v14)
          {
            v9 = 0;
            v15 = v2[*v5];
            goto LABEL_15;
          }
        }
        v2[*v5] = 1;
LABEL_13:
        v15 = v2[*v5];
        if (v2[*v5])
          v9 = 0;
LABEL_15:
        v16 = v9 & 7;
        if (v15 || v16 == 4)
          break;
        if ((v9 >> 3) == 1)
        {
          if (v16 == 2)
          {
            if (!PBReaderPlaceMark())
              goto LABEL_47;
            while (*(_QWORD *)&v2[*v3] < *(_QWORD *)&v2[*v4] && !v2[*v5])
            {
              v18 = 0;
              v19 = 0;
              v20 = 0;
              while (1)
              {
                v21 = *v3;
                v22 = *(_QWORD *)&v2[v21];
                v23 = v22 + 1;
                if (v22 == -1 || v23 > *(_QWORD *)&v2[*v4])
                  break;
                v24 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v22);
                *(_QWORD *)&v2[v21] = v23;
                v20 |= (unint64_t)(v24 & 0x7F) << v18;
                if (v24 < 0)
                {
                  v18 += 7;
                  v14 = v19++ >= 9;
                  if (!v14)
                    continue;
                }
                goto LABEL_32;
              }
              v2[*v5] = 1;
LABEL_32:
              PBRepeatedInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            while (1)
            {
              v28 = *v3;
              v29 = *(_QWORD *)&v2[v28];
              v30 = v29 + 1;
              if (v29 == -1 || v30 > *(_QWORD *)&v2[*v4])
                break;
              v31 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v29);
              *(_QWORD *)&v2[v28] = v30;
              v27 |= (unint64_t)(v31 & 0x7F) << v25;
              if (v31 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_44;
            }
            v2[*v5] = 1;
LABEL_44:
            PBRepeatedInt32Add();
          }
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_47;
        }
      }
      while (*(_QWORD *)&v2[*v3] < *(_QWORD *)&v2[*v4]);
    }
    v32 = v2[*v5] == 0;
  }
  else
  {
LABEL_47:
    v32 = 0;
  }
  objc_sync_exit(v2);

  return v32;
}

void sub_189A6351C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateUGCPhotoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateUGCPhotoReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A63580(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A63B40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOLogMsgStateUserReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  int *v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  _BOOL4 v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  BOOL v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  char v71;
  char v72;
  __int16 v73;
  int v74;
  int v75;
  void *v76;
  BOOL v78;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 96));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 92);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 88));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (HIBYTE(*(unsigned __int16 *)(a1 + 104)) & 1) + ((*(unsigned __int16 *)(a1 + 104) >> 9) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v8])
    {
      case -3:
        v7 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 & 1 | v11;
        v15 = v14 != 0;
        if ((v14 != 0) | v7 & 1)
          v16 = 0;
        else
          v16 = a3;
        if (v14)
          v17 = 1;
        else
          v17 = v16 == 0;
        v78 = v17;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v8;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_121;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_26;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_28;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_26:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_28:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_121:
      if (v15)
      {
        v72 = 1;
        goto LABEL_123;
      }
      if (!v16)
        goto LABEL_134;
      while (1)
      {
        v75 = *v16++;
        v74 = v75;
        if (v75 == 5)
          break;
        if (v74 == 6)
        {
          v73 = 512;
LABEL_130:
          *(_WORD *)(a1 + 104) |= v73;
        }
        else if (!v74)
        {
          goto LABEL_134;
        }
      }
      v73 = 256;
      goto LABEL_130;
    }
    v31 = v23 >> 3;
    v32 = v15;
    if (!v78)
    {
      v33 = v16;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v7 & 1) == 0)
          goto LABEL_89;
        *(_WORD *)(a1 + 104) |= 0x10u;
        v37 = *v18;
        v38 = *(_QWORD *)(v3 + v37);
        if (v38 <= 0xFFFFFFFFFFFFFFF7 && v38 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v39 = *(_QWORD *)(*(_QWORD *)(v3 + *v20) + v38);
          *(_QWORD *)(v3 + v37) = v38 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v19) = 1;
          v39 = 0;
        }
        v70 = 72;
        goto LABEL_116;
      case 2:
        if ((v7 & 1) == 0)
          goto LABEL_89;
        *(_WORD *)(a1 + 104) |= 0x20u;
        v41 = *v18;
        v42 = *(_QWORD *)(v3 + v41);
        if (v42 <= 0xFFFFFFFFFFFFFFF7 && v42 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v39 = *(_QWORD *)(*(_QWORD *)(v3 + *v20) + v42);
          *(_QWORD *)(v3 + v41) = v42 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v19) = 1;
          v39 = 0;
        }
        v70 = 80;
        goto LABEL_116;
      case 3:
        if ((v7 & 1) == 0)
          goto LABEL_89;
        *(_WORD *)(a1 + 104) |= 8u;
        v43 = *v18;
        v44 = *(_QWORD *)(v3 + v43);
        if (v44 <= 0xFFFFFFFFFFFFFFF7 && v44 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v39 = *(_QWORD *)(*(_QWORD *)(v3 + *v20) + v44);
          *(_QWORD *)(v3 + v43) = v44 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v19) = 1;
          v39 = 0;
        }
        v70 = 64;
        goto LABEL_116;
      case 4:
        if ((v7 & 1) == 0)
          goto LABEL_89;
        *(_WORD *)(a1 + 104) |= 4u;
        v45 = *v18;
        v46 = *(_QWORD *)(v3 + v45);
        if (v46 <= 0xFFFFFFFFFFFFFFF7 && v46 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v39 = *(_QWORD *)(*(_QWORD *)(v3 + *v20) + v46);
          *(_QWORD *)(v3 + v45) = v46 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v19) = 1;
          v39 = 0;
        }
        v70 = 56;
        goto LABEL_116;
      case 5:
        if (!v32)
          goto LABEL_89;
        if ((*(_WORD *)(a1 + 104) & 0x100) == 0)
        {
          PBReaderReadString();
          v47 = objc_claimAutoreleasedReturnValue();
          v48 = 40;
          goto LABEL_64;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_138;
        v69 = *(_WORD *)(a1 + 104) << 7;
        goto LABEL_104;
      case 6:
        if (!v32)
          goto LABEL_89;
        if ((*(_WORD *)(a1 + 104) & 0x200) == 0)
        {
          PBReaderReadString();
          v47 = objc_claimAutoreleasedReturnValue();
          v48 = 48;
LABEL_64:
          v49 = *(void **)(a1 + v48);
          *(_QWORD *)(a1 + v48) = v47;

          v19 = (int *)MEMORY[0x1E0D82BC8];
          --v8;
LABEL_117:
          if (v8)
            v71 = 1;
          else
            v71 = v15;
          if ((v71 & 1) == 0)
            goto LABEL_121;
          continue;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v69 = *(_WORD *)(a1 + 104) << 6;
LABEL_104:
          v8 += v69 >> 15;
LABEL_105:
          v19 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_117;
        }
LABEL_138:
        v72 = 0;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_123:
        *(_WORD *)(a1 + 104) |= 0x100u;
        *(_WORD *)(a1 + 104) |= 0x200u;
        if ((v72 & 1) != 0)
        {
LABEL_134:
          v3 = *(_BYTE *)(v3 + *v19) == 0;
          if (v15)
            goto LABEL_135;
          return v3;
        }
        v3 = 0;
        if (!v15)
          return v3;
LABEL_135:
        v76 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

        return v3;
      case 7:
        if ((v7 & 1) == 0)
          goto LABEL_89;
        v50 = 0;
        v51 = 0;
        v52 = 0;
        *(_WORD *)(a1 + 104) |= 0x80u;
        while (2)
        {
          v53 = *v18;
          v54 = *(_QWORD *)(v3 + v53);
          v55 = v54 + 1;
          if (v54 == -1 || v55 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v54);
            *(_QWORD *)(v3 + v53) = v55;
            v52 |= (unint64_t)(v56 & 0x7F) << v50;
            if (v56 < 0)
            {
              v50 += 7;
              v28 = v51++ >= 9;
              if (v28)
              {
                v52 = 0;
                goto LABEL_94;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          v52 = 0;
LABEL_94:
        v67 = v52 != 0;
        v68 = 101;
        goto LABEL_99;
      case 8:
        if ((v7 & 1) == 0)
          goto LABEL_89;
        if (!PBReaderPlaceMark() || (GEOSessionIDReadAllFrom((_QWORD *)(a1 + 16), v3) & 1) == 0)
          goto LABEL_138;
        PBReaderRecallMark();
        *(_WORD *)(a1 + 104) |= 1u;
        goto LABEL_105;
      case 9:
        if ((v7 & 1) == 0)
          goto LABEL_89;
        v57 = 0;
        v58 = 0;
        v59 = 0;
        *(_WORD *)(a1 + 104) |= 0x40u;
        while (2)
        {
          v60 = *v18;
          v61 = *(_QWORD *)(v3 + v60);
          v62 = v61 + 1;
          if (v61 == -1 || v62 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v63 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v61);
            *(_QWORD *)(v3 + v60) = v62;
            v59 |= (unint64_t)(v63 & 0x7F) << v57;
            if (v63 < 0)
            {
              v57 += 7;
              v28 = v58++ >= 9;
              if (v28)
              {
                v59 = 0;
                goto LABEL_98;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          v59 = 0;
LABEL_98:
        v67 = v59 != 0;
        v68 = 100;
LABEL_99:
        *(_BYTE *)(a1 + v68) = v67;
        goto LABEL_117;
      case 10:
        if ((v7 & 1) != 0)
        {
          *(_WORD *)(a1 + 104) |= 2u;
          v64 = *v18;
          v65 = *(_QWORD *)(v3 + v64);
          if (v65 <= 0xFFFFFFFFFFFFFFF7 && v65 + 8 <= *(_QWORD *)(v3 + *v6))
          {
            v39 = *(_QWORD *)(*(_QWORD *)(v3 + *v20) + v65);
            *(_QWORD *)(v3 + v64) = v65 + 8;
          }
          else
          {
            *(_BYTE *)(v3 + *v19) = 1;
            v39 = 0;
          }
          v70 = 32;
LABEL_116:
          *(_QWORD *)(a1 + v70) = v39;
        }
        else
        {
LABEL_89:
          v66 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v66 & 1) == 0)
          {
LABEL_137:
            v72 = 0;
            goto LABEL_123;
          }
        }
        goto LABEL_117;
      default:
        v40 = PBReaderSkipValueWithTag();
        v19 = (int *)MEMORY[0x1E0D82BC8];
        if (!v40)
          goto LABEL_137;
        goto LABEL_117;
    }
  }
}

void sub_189A644F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A6500C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOLogMsgStateUserReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 92))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLogMsgStateUserReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 96));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 88) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 92) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLogMsgStateUserReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLogMsgStateUserReadAllFrom_initialTag;
  Specified = GEOLogMsgStateUserReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  return Specified;
}

void sub_189A65198(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOLogMsgStateUserReadFrom(uint64_t a1, void *a2)
{
  id v3;
  uint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateUserReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A651F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A654D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateUserIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 96));
  v2 = (*(_WORD *)(a1 + 104) & 0x700) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 96));
  return v2;
}

void sub_189A65A10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateUserSessionReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  __int16 v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  GEOLocalTime *v31;
  void *v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  _BOOL8 v59;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (!v3[*v6])
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            if (!PBReaderPlaceMark()
              || (GEOSessionIDReadAllFrom((_QWORD *)(a1 + 72), (uint64_t)v3) & 1) == 0)
            {
              goto LABEL_110;
            }
            PBReaderRecallMark();
            v18 = *(_WORD *)(a1 + 148) | 0x10;
            goto LABEL_73;
          case 2u:
            v19 = 0;
            v20 = 0;
            v21 = 0;
            *(_WORD *)(a1 + 148) |= 0x400u;
            while (2)
            {
              v22 = *v4;
              v23 = *(_QWORD *)&v3[v22];
              v24 = v23 + 1;
              if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
                *(_QWORD *)&v3[v22] = v24;
                v21 |= (unint64_t)(v25 & 0x7F) << v19;
                if (v25 < 0)
                {
                  v19 += 7;
                  v15 = v20++ >= 9;
                  if (v15)
                  {
                    LODWORD(v21) = 0;
                    goto LABEL_84;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v21) = 0;
LABEL_84:
            v57 = 136;
            goto LABEL_97;
          case 3u:
            *(_WORD *)(a1 + 148) |= 0x100u;
            v26 = *v4;
            v27 = *(_QWORD *)&v3[v26];
            if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v28 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v27);
              *(_QWORD *)&v3[v26] = v27 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v28 = 0;
            }
            v58 = 120;
            goto LABEL_106;
          case 4u:
            if (!PBReaderPlaceMark()
              || (GEOSessionIDReadAllFrom((_QWORD *)(a1 + 40), (uint64_t)v3) & 1) == 0)
            {
              goto LABEL_110;
            }
            PBReaderRecallMark();
            v18 = *(_WORD *)(a1 + 148) | 4;
            goto LABEL_73;
          case 5u:
            *(_WORD *)(a1 + 148) |= 0x80u;
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v28 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v30);
              *(_QWORD *)&v3[v29] = v30 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v28 = 0;
            }
            v58 = 112;
            goto LABEL_106;
          case 6u:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_110;
            v31 = objc_alloc_init(GEOLocalTime);
            if (!GEOLocalTimeReadAllFrom((uint64_t)v31, v3))
            {

              goto LABEL_110;
            }
            PBReaderRecallMark();
            v32 = *(void **)(a1 + 96);
            *(_QWORD *)(a1 + 96) = v31;

LABEL_107:
            if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
              goto LABEL_108;
            break;
          case 7u:
            v33 = 0;
            v34 = 0;
            v35 = 0;
            *(_WORD *)(a1 + 148) |= 0x200u;
            while (2)
            {
              v36 = *v4;
              v37 = *(_QWORD *)&v3[v36];
              v38 = v37 + 1;
              if (v37 == -1 || v38 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v39 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v37);
                *(_QWORD *)&v3[v36] = v38;
                v35 |= (unint64_t)(v39 & 0x7F) << v33;
                if (v39 < 0)
                {
                  v33 += 7;
                  v15 = v34++ >= 9;
                  if (v15)
                  {
                    v35 = 0;
                    goto LABEL_88;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v35 = 0;
LABEL_88:
            *(_QWORD *)(a1 + 128) = v35;
            goto LABEL_107;
          case 8u:
            *(_WORD *)(a1 + 148) |= 0x20u;
            v40 = *v4;
            v41 = *(_QWORD *)&v3[v40];
            if (v41 <= 0xFFFFFFFFFFFFFFF7 && v41 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v28 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v41);
              *(_QWORD *)&v3[v40] = v41 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v28 = 0;
            }
            v58 = 88;
            goto LABEL_106;
          case 9u:
            if (!PBReaderPlaceMark()
              || (GEOSessionIDReadAllFrom((_QWORD *)(a1 + 56), (uint64_t)v3) & 1) == 0)
            {
              goto LABEL_110;
            }
            PBReaderRecallMark();
            v18 = *(_WORD *)(a1 + 148) | 8;
            goto LABEL_73;
          case 0xAu:
            if (!PBReaderPlaceMark()
              || (GEOSessionIDReadAllFrom((_QWORD *)(a1 + 24), (uint64_t)v3) & 1) == 0)
            {
              goto LABEL_110;
            }
            PBReaderRecallMark();
            v18 = *(_WORD *)(a1 + 148) | 2;
            goto LABEL_73;
          case 0xBu:
            *(_WORD *)(a1 + 148) |= 0x40u;
            v42 = *v4;
            v43 = *(_QWORD *)&v3[v42];
            if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v28 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v43);
              *(_QWORD *)&v3[v42] = v43 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v28 = 0;
            }
            v58 = 104;
LABEL_106:
            *(_QWORD *)(a1 + v58) = v28;
            goto LABEL_107;
          case 0xCu:
            v44 = 0;
            v45 = 0;
            v46 = 0;
            *(_WORD *)(a1 + 148) |= 0x1000u;
            while (2)
            {
              v47 = *v4;
              v48 = *(_QWORD *)&v3[v47];
              v49 = v48 + 1;
              if (v48 == -1 || v49 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v50 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v48);
                *(_QWORD *)&v3[v47] = v49;
                v46 |= (unint64_t)(v50 & 0x7F) << v44;
                if (v50 < 0)
                {
                  v44 += 7;
                  v15 = v45++ >= 9;
                  if (v15)
                  {
                    v46 = 0;
                    goto LABEL_92;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v46 = 0;
LABEL_92:
            *(_BYTE *)(a1 + 144) = v46 != 0;
            goto LABEL_107;
          case 0xDu:
            if (!PBReaderPlaceMark()
              || (GEOSessionIDReadAllFrom((_QWORD *)(a1 + 8), (uint64_t)v3) & 1) == 0)
            {
              goto LABEL_110;
            }
            PBReaderRecallMark();
            v18 = *(_WORD *)(a1 + 148) | 1;
LABEL_73:
            *(_WORD *)(a1 + 148) = v18;
            goto LABEL_107;
          case 0xEu:
            v51 = 0;
            v52 = 0;
            v21 = 0;
            *(_WORD *)(a1 + 148) |= 0x800u;
            while (2)
            {
              v53 = *v4;
              v54 = *(_QWORD *)&v3[v53];
              v55 = v54 + 1;
              if (v54 == -1 || v55 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v56 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v54);
                *(_QWORD *)&v3[v53] = v55;
                v21 |= (unint64_t)(v56 & 0x7F) << v51;
                if (v56 < 0)
                {
                  v51 += 7;
                  v15 = v52++ >= 9;
                  if (v15)
                  {
                    LODWORD(v21) = 0;
                    goto LABEL_96;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v21) = 0;
LABEL_96:
            v57 = 140;
LABEL_97:
            *(_DWORD *)(a1 + v57) = v21;
            goto LABEL_107;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_110;
            goto LABEL_107;
        }
      }
    }
LABEL_108:
    v59 = v3[*v6] == 0;
  }
  else
  {
LABEL_110:
    v59 = 0;
  }
  objc_sync_exit(v3);

  return v59;
}

void sub_189A67AE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgStateUserSessionReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgStateUserSessionReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A67B40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapKitCountReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  _BOOL8 v45;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 4u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEOMapKitCount__countType;
                goto LABEL_54;
              }
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                break;
              v18 += 7;
              v25 = v19++ > 8;
              if (v25)
              {
                LODWORD(v20) = 0;
                v26 = &OBJC_IVAR___GEOMapKitCount__countType;
                goto LABEL_57;
              }
            }
            v26 = &OBJC_IVAR___GEOMapKitCount__countType;
            goto LABEL_55;
          case 2u:
            v27 = 0;
            v28 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 2u;
            while (2)
            {
              v29 = *v4;
              v30 = *(_QWORD *)&v3[v29];
              v31 = v30 + 1;
              if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEOMapKitCount__appType;
                goto LABEL_54;
              }
              v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
              *(_QWORD *)&v3[v29] = v31;
              v20 |= (unint64_t)(v32 & 0x7F) << v27;
              if (v32 < 0)
              {
                v27 += 7;
                v25 = v28++ > 8;
                if (v25)
                {
                  LODWORD(v20) = 0;
                  v26 = &OBJC_IVAR___GEOMapKitCount__appType;
                  goto LABEL_57;
                }
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEOMapKitCount__appType;
            goto LABEL_55;
          case 3u:
            v33 = 0;
            v34 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 8u;
            while (2)
            {
              v35 = *v4;
              v36 = *(_QWORD *)&v3[v35];
              v37 = v36 + 1;
              if (v36 == -1 || v37 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEOMapKitCount__useCount;
                goto LABEL_54;
              }
              v38 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v36);
              *(_QWORD *)&v3[v35] = v37;
              v20 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                v25 = v34++ > 8;
                if (v25)
                {
                  LODWORD(v20) = 0;
                  v26 = &OBJC_IVAR___GEOMapKitCount__useCount;
                  goto LABEL_57;
                }
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEOMapKitCount__useCount;
            goto LABEL_55;
          case 4u:
            v39 = 0;
            v40 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            break;
          default:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_65;
            continue;
        }
        while (1)
        {
          v41 = *v4;
          v42 = *(_QWORD *)&v3[v41];
          v43 = v42 + 1;
          if (v42 == -1 || v43 > *(_QWORD *)&v3[*v5])
            break;
          v44 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v42);
          *(_QWORD *)&v3[v41] = v43;
          v20 |= (unint64_t)(v44 & 0x7F) << v39;
          if ((v44 & 0x80) == 0)
          {
            v26 = &OBJC_IVAR___GEOMapKitCount__appCount;
            goto LABEL_55;
          }
          v39 += 7;
          v25 = v40++ > 8;
          if (v25)
          {
            LODWORD(v20) = 0;
            v26 = &OBJC_IVAR___GEOMapKitCount__appCount;
            goto LABEL_57;
          }
        }
        v26 = &OBJC_IVAR___GEOMapKitCount__appCount;
LABEL_54:
        v3[*v6] = 1;
LABEL_55:
        if (v3[*v6])
          LODWORD(v20) = 0;
LABEL_57:
        *(_DWORD *)(a1 + *v26) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v45 = v3[*v6] == 0;
  }
  else
  {
LABEL_65:
    v45 = 0;
  }
  objc_sync_exit(v3);

  return v45;
}

void sub_189A69A74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapKitCountReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOMapKitCountReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A69AD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMarcoLiteUsageStateReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  _BOOL8 v45;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 4u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEOMarcoLiteUsageState__stateType;
                goto LABEL_54;
              }
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                break;
              v18 += 7;
              v25 = v19++ > 8;
              if (v25)
              {
                LODWORD(v20) = 0;
                v26 = &OBJC_IVAR___GEOMarcoLiteUsageState__stateType;
                goto LABEL_57;
              }
            }
            v26 = &OBJC_IVAR___GEOMarcoLiteUsageState__stateType;
            goto LABEL_55;
          case 2u:
            v27 = 0;
            v28 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 8u;
            while (2)
            {
              v29 = *v4;
              v30 = *(_QWORD *)&v3[v29];
              v31 = v30 + 1;
              if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEOMarcoLiteUsageState__stateValue;
                goto LABEL_54;
              }
              v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
              *(_QWORD *)&v3[v29] = v31;
              v20 |= (unint64_t)(v32 & 0x7F) << v27;
              if (v32 < 0)
              {
                v27 += 7;
                v25 = v28++ > 8;
                if (v25)
                {
                  LODWORD(v20) = 0;
                  v26 = &OBJC_IVAR___GEOMarcoLiteUsageState__stateValue;
                  goto LABEL_57;
                }
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEOMarcoLiteUsageState__stateValue;
            goto LABEL_55;
          case 3u:
            v33 = 0;
            v34 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 2u;
            while (2)
            {
              v35 = *v4;
              v36 = *(_QWORD *)&v3[v35];
              v37 = v36 + 1;
              if (v36 == -1 || v37 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEOMarcoLiteUsageState__stateTime;
                goto LABEL_54;
              }
              v38 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v36);
              *(_QWORD *)&v3[v35] = v37;
              v20 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                v25 = v34++ > 8;
                if (v25)
                {
                  LODWORD(v20) = 0;
                  v26 = &OBJC_IVAR___GEOMarcoLiteUsageState__stateTime;
                  goto LABEL_57;
                }
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEOMarcoLiteUsageState__stateTime;
            goto LABEL_55;
          case 4u:
            v39 = 0;
            v40 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            break;
          default:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_65;
            continue;
        }
        while (1)
        {
          v41 = *v4;
          v42 = *(_QWORD *)&v3[v41];
          v43 = v42 + 1;
          if (v42 == -1 || v43 > *(_QWORD *)&v3[*v5])
            break;
          v44 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v42);
          *(_QWORD *)&v3[v41] = v43;
          v20 |= (unint64_t)(v44 & 0x7F) << v39;
          if ((v44 & 0x80) == 0)
          {
            v26 = &OBJC_IVAR___GEOMarcoLiteUsageState__stateExitReason;
            goto LABEL_55;
          }
          v39 += 7;
          v25 = v40++ > 8;
          if (v25)
          {
            LODWORD(v20) = 0;
            v26 = &OBJC_IVAR___GEOMarcoLiteUsageState__stateExitReason;
            goto LABEL_57;
          }
        }
        v26 = &OBJC_IVAR___GEOMarcoLiteUsageState__stateExitReason;
LABEL_54:
        v3[*v6] = 1;
LABEL_55:
        if (v3[*v6])
          LODWORD(v20) = 0;
LABEL_57:
        *(_DWORD *)(a1 + *v26) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v45 = v3[*v6] == 0;
  }
  else
  {
LABEL_65:
    v45 = 0;
  }
  objc_sync_exit(v3);

  return v45;
}

void sub_189A6B76C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMarcoLiteUsageStateReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOMarcoLiteUsageStateReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A6B7CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMultiTabsStateReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  _BOOL8 v33;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v27 = 0;
          v28 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 16) |= 1u;
          while (1)
          {
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              break;
            v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
            *(_QWORD *)&v3[v29] = v31;
            v20 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0)
            {
              v26 = &OBJC_IVAR___GEOMultiTabsState__currentTabIndex;
              goto LABEL_40;
            }
            v27 += 7;
            v25 = v28++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              v26 = &OBJC_IVAR___GEOMultiTabsState__currentTabIndex;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEOMultiTabsState__currentTabIndex;
LABEL_39:
          v3[*v6] = 1;
        }
        else
        {
          if ((v10 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_48;
            continue;
          }
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 16) |= 2u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
            {
              v26 = &OBJC_IVAR___GEOMultiTabsState__numberOfTabsOpen;
              goto LABEL_39;
            }
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              break;
            v18 += 7;
            v25 = v19++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              v26 = &OBJC_IVAR___GEOMultiTabsState__numberOfTabsOpen;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEOMultiTabsState__numberOfTabsOpen;
        }
LABEL_40:
        if (v3[*v6])
          LODWORD(v20) = 0;
LABEL_42:
        *(_DWORD *)(a1 + *v26) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v33 = v3[*v6] == 0;
  }
  else
  {
LABEL_48:
    v33 = 0;
  }
  objc_sync_exit(v3);

  return v33;
}

void sub_189A6C3B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMultiTabsStateReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOMultiTabsStateReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A6C410(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONavCameraStateReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  _BOOL8 v45;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 4u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
                break;
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                goto LABEL_51;
              v18 += 7;
              v15 = v19++ >= 9;
              if (v15)
              {
                LODWORD(v20) = 0;
                goto LABEL_53;
              }
            }
            v3[*v6] = 1;
LABEL_51:
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_53:
            v44 = 16;
            goto LABEL_66;
          case 2u:
            v25 = 0;
            v26 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (2)
            {
              v27 = *v4;
              v28 = *(_QWORD *)&v3[v27];
              v29 = v28 + 1;
              if (v28 == -1 || v29 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v30 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v28);
                *(_QWORD *)&v3[v27] = v29;
                v20 |= (unint64_t)(v30 & 0x7F) << v25;
                if (v30 < 0)
                {
                  v25 += 7;
                  v15 = v26++ >= 9;
                  if (v15)
                  {
                    LODWORD(v20) = 0;
                    goto LABEL_57;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_57:
            v44 = 8;
            goto LABEL_66;
          case 3u:
            v31 = 0;
            v32 = 0;
            v33 = 0;
            *(_BYTE *)(a1 + 24) |= 8u;
            while (2)
            {
              v34 = *v4;
              v35 = *(_QWORD *)&v3[v34];
              v36 = v35 + 1;
              if (v35 == -1 || v36 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v37 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v35);
                *(_QWORD *)&v3[v34] = v36;
                v33 |= (unint64_t)(v37 & 0x7F) << v31;
                if (v37 < 0)
                {
                  v31 += 7;
                  v15 = v32++ >= 9;
                  if (v15)
                  {
                    v33 = 0;
                    goto LABEL_61;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v33 = 0;
LABEL_61:
            *(_BYTE *)(a1 + 20) = v33 != 0;
            continue;
          case 4u:
            v38 = 0;
            v39 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 2u;
            break;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_69;
            continue;
        }
        while (1)
        {
          v40 = *v4;
          v41 = *(_QWORD *)&v3[v40];
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)&v3[*v5])
            break;
          v43 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v41);
          *(_QWORD *)&v3[v40] = v42;
          v20 |= (unint64_t)(v43 & 0x7F) << v38;
          if ((v43 & 0x80) == 0)
            goto LABEL_63;
          v38 += 7;
          v15 = v39++ >= 9;
          if (v15)
          {
            LODWORD(v20) = 0;
            goto LABEL_65;
          }
        }
        v3[*v6] = 1;
LABEL_63:
        if (v3[*v6])
          LODWORD(v20) = 0;
LABEL_65:
        v44 = 12;
LABEL_66:
        *(_DWORD *)(a1 + v44) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v45 = v3[*v6] == 0;
  }
  else
  {
LABEL_69:
    v45 = 0;
  }
  objc_sync_exit(v3);

  return v45;
}

void sub_189A6EAE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONavCameraStateReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEONavCameraStateReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A6EB40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONavVoiceGuidanceSettingsReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  _BOOL8 v33;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v27 = 0;
          v28 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 16) |= 2u;
          while (1)
          {
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              break;
            v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
            *(_QWORD *)&v3[v29] = v31;
            v20 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0)
            {
              v26 = &OBJC_IVAR___GEONavVoiceGuidanceSettings__transportMode;
              goto LABEL_40;
            }
            v27 += 7;
            v25 = v28++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              v26 = &OBJC_IVAR___GEONavVoiceGuidanceSettings__transportMode;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEONavVoiceGuidanceSettings__transportMode;
LABEL_39:
          v3[*v6] = 1;
        }
        else
        {
          if ((v10 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_48;
            continue;
          }
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 16) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
            {
              v26 = &OBJC_IVAR___GEONavVoiceGuidanceSettings__navVoiceGuidanceLevel;
              goto LABEL_39;
            }
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              break;
            v18 += 7;
            v25 = v19++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              v26 = &OBJC_IVAR___GEONavVoiceGuidanceSettings__navVoiceGuidanceLevel;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEONavVoiceGuidanceSettings__navVoiceGuidanceLevel;
        }
LABEL_40:
        if (v3[*v6])
          LODWORD(v20) = 0;
LABEL_42:
        *(_DWORD *)(a1 + *v26) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v33 = v3[*v6] == 0;
  }
  else
  {
LABEL_48:
    v33 = 0;
  }
  objc_sync_exit(v3);

  return v33;
}

void sub_189A6FB2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONavVoiceGuidanceSettingsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEONavVoiceGuidanceSettingsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A6FB8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONearbyTransitGroupReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  _BOOL8 v33;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v27 = 0;
          v28 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 16) |= 1u;
          while (1)
          {
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              break;
            v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
            *(_QWORD *)&v3[v29] = v31;
            v20 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0)
            {
              v26 = &OBJC_IVAR___GEONearbyTransitGroup__linesShown;
              goto LABEL_40;
            }
            v27 += 7;
            v25 = v28++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              v26 = &OBJC_IVAR___GEONearbyTransitGroup__linesShown;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEONearbyTransitGroup__linesShown;
LABEL_39:
          v3[*v6] = 1;
        }
        else
        {
          if ((v10 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_48;
            continue;
          }
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 16) |= 2u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
            {
              v26 = &OBJC_IVAR___GEONearbyTransitGroup__lines;
              goto LABEL_39;
            }
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              break;
            v18 += 7;
            v25 = v19++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              v26 = &OBJC_IVAR___GEONearbyTransitGroup__lines;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEONearbyTransitGroup__lines;
        }
LABEL_40:
        if (v3[*v6])
          LODWORD(v20) = 0;
LABEL_42:
        *(_DWORD *)(a1 + *v26) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v33 = v3[*v6] == 0;
  }
  else
  {
LABEL_48:
    v33 = 0;
  }
  objc_sync_exit(v3);

  return v33;
}

void sub_189A7056C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONearbyTransitGroupReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEONearbyTransitGroupReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A705CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONetEventAggregateStatsReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  int *v26;
  BOOL v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  _BOOL8 v76;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_WORD *)(a1 + 80) |= 4u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEONetEventAggregateStats__min;
                goto LABEL_94;
              }
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                break;
              v25 = 0;
              v18 += 7;
              v26 = &OBJC_IVAR___GEONetEventAggregateStats__min;
              v27 = v19++ > 8;
              if (v27)
                goto LABEL_98;
            }
            v26 = &OBJC_IVAR___GEONetEventAggregateStats__min;
            goto LABEL_95;
          case 2u:
            v28 = 0;
            v29 = 0;
            v20 = 0;
            *(_WORD *)(a1 + 80) |= 2u;
            while (2)
            {
              v30 = *v4;
              v31 = *(_QWORD *)&v3[v30];
              v32 = v31 + 1;
              if (v31 == -1 || v32 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEONetEventAggregateStats__max;
                goto LABEL_94;
              }
              v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
              *(_QWORD *)&v3[v30] = v32;
              v20 |= (unint64_t)(v33 & 0x7F) << v28;
              if (v33 < 0)
              {
                v25 = 0;
                v28 += 7;
                v26 = &OBJC_IVAR___GEONetEventAggregateStats__max;
                v27 = v29++ > 8;
                if (v27)
                  goto LABEL_98;
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEONetEventAggregateStats__max;
            goto LABEL_95;
          case 3u:
            v34 = 0;
            v35 = 0;
            v20 = 0;
            *(_WORD *)(a1 + 80) |= 8u;
            while (2)
            {
              v36 = *v4;
              v37 = *(_QWORD *)&v3[v36];
              v38 = v37 + 1;
              if (v37 == -1 || v38 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEONetEventAggregateStats__p10;
                goto LABEL_94;
              }
              v39 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v37);
              *(_QWORD *)&v3[v36] = v38;
              v20 |= (unint64_t)(v39 & 0x7F) << v34;
              if (v39 < 0)
              {
                v25 = 0;
                v34 += 7;
                v26 = &OBJC_IVAR___GEONetEventAggregateStats__p10;
                v27 = v35++ > 8;
                if (v27)
                  goto LABEL_98;
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEONetEventAggregateStats__p10;
            goto LABEL_95;
          case 4u:
            v40 = 0;
            v41 = 0;
            v20 = 0;
            *(_WORD *)(a1 + 80) |= 0x10u;
            while (2)
            {
              v42 = *v4;
              v43 = *(_QWORD *)&v3[v42];
              v44 = v43 + 1;
              if (v43 == -1 || v44 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEONetEventAggregateStats__p25;
                goto LABEL_94;
              }
              v45 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v43);
              *(_QWORD *)&v3[v42] = v44;
              v20 |= (unint64_t)(v45 & 0x7F) << v40;
              if (v45 < 0)
              {
                v25 = 0;
                v40 += 7;
                v26 = &OBJC_IVAR___GEONetEventAggregateStats__p25;
                v27 = v41++ > 8;
                if (v27)
                  goto LABEL_98;
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEONetEventAggregateStats__p25;
            goto LABEL_95;
          case 5u:
            v46 = 0;
            v47 = 0;
            v20 = 0;
            *(_WORD *)(a1 + 80) |= 0x20u;
            while (2)
            {
              v48 = *v4;
              v49 = *(_QWORD *)&v3[v48];
              v50 = v49 + 1;
              if (v49 == -1 || v50 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEONetEventAggregateStats__p50;
                goto LABEL_94;
              }
              v51 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v49);
              *(_QWORD *)&v3[v48] = v50;
              v20 |= (unint64_t)(v51 & 0x7F) << v46;
              if (v51 < 0)
              {
                v25 = 0;
                v46 += 7;
                v26 = &OBJC_IVAR___GEONetEventAggregateStats__p50;
                v27 = v47++ > 8;
                if (v27)
                  goto LABEL_98;
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEONetEventAggregateStats__p50;
            goto LABEL_95;
          case 6u:
            v52 = 0;
            v53 = 0;
            v20 = 0;
            *(_WORD *)(a1 + 80) |= 0x40u;
            while (2)
            {
              v54 = *v4;
              v55 = *(_QWORD *)&v3[v54];
              v56 = v55 + 1;
              if (v55 == -1 || v56 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEONetEventAggregateStats__p75;
                goto LABEL_94;
              }
              v57 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v55);
              *(_QWORD *)&v3[v54] = v56;
              v20 |= (unint64_t)(v57 & 0x7F) << v52;
              if (v57 < 0)
              {
                v25 = 0;
                v52 += 7;
                v26 = &OBJC_IVAR___GEONetEventAggregateStats__p75;
                v27 = v53++ > 8;
                if (v27)
                  goto LABEL_98;
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEONetEventAggregateStats__p75;
            goto LABEL_95;
          case 7u:
            v58 = 0;
            v59 = 0;
            v20 = 0;
            *(_WORD *)(a1 + 80) |= 0x80u;
            while (2)
            {
              v60 = *v4;
              v61 = *(_QWORD *)&v3[v60];
              v62 = v61 + 1;
              if (v61 == -1 || v62 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEONetEventAggregateStats__p90;
                goto LABEL_94;
              }
              v63 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v61);
              *(_QWORD *)&v3[v60] = v62;
              v20 |= (unint64_t)(v63 & 0x7F) << v58;
              if (v63 < 0)
              {
                v25 = 0;
                v58 += 7;
                v26 = &OBJC_IVAR___GEONetEventAggregateStats__p90;
                v27 = v59++ > 8;
                if (v27)
                  goto LABEL_98;
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEONetEventAggregateStats__p90;
            goto LABEL_95;
          case 8u:
            v64 = 0;
            v65 = 0;
            v20 = 0;
            *(_WORD *)(a1 + 80) |= 0x100u;
            while (2)
            {
              v66 = *v4;
              v67 = *(_QWORD *)&v3[v66];
              v68 = v67 + 1;
              if (v67 == -1 || v68 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEONetEventAggregateStats__p99;
                goto LABEL_94;
              }
              v69 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v67);
              *(_QWORD *)&v3[v66] = v68;
              v20 |= (unint64_t)(v69 & 0x7F) << v64;
              if (v69 < 0)
              {
                v25 = 0;
                v64 += 7;
                v26 = &OBJC_IVAR___GEONetEventAggregateStats__p99;
                v27 = v65++ > 8;
                if (v27)
                  goto LABEL_98;
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEONetEventAggregateStats__p99;
            goto LABEL_95;
          case 9u:
            v70 = 0;
            v71 = 0;
            v20 = 0;
            *(_WORD *)(a1 + 80) |= 1u;
            break;
          default:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_111;
            continue;
        }
        while (1)
        {
          v72 = *v4;
          v73 = *(_QWORD *)&v3[v72];
          v74 = v73 + 1;
          if (v73 == -1 || v74 > *(_QWORD *)&v3[*v5])
            break;
          v75 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v73);
          *(_QWORD *)&v3[v72] = v74;
          v20 |= (unint64_t)(v75 & 0x7F) << v70;
          if ((v75 & 0x80) == 0)
          {
            v26 = &OBJC_IVAR___GEONetEventAggregateStats__algMean;
            goto LABEL_95;
          }
          v25 = 0;
          v70 += 7;
          v26 = &OBJC_IVAR___GEONetEventAggregateStats__algMean;
          v27 = v71++ > 8;
          if (v27)
            goto LABEL_98;
        }
        v26 = &OBJC_IVAR___GEONetEventAggregateStats__algMean;
LABEL_94:
        v3[*v6] = 1;
LABEL_95:
        v25 = v3[*v6] ? 0 : v20;
LABEL_98:
        *(_QWORD *)(a1 + *v26) = v25;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v76 = v3[*v6] == 0;
  }
  else
  {
LABEL_111:
    v76 = 0;
  }
  objc_sync_exit(v3);

  return v76;
}

void sub_189A71AC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONetEventAggregateStatsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEONetEventAggregateStatsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A71B20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONetEventAggregateStatsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  _BOOL8 v62;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_97;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            v19 = v18 + 1;
            if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
              goto LABEL_93;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_94;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_97;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
              goto LABEL_93;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v21 = v22++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_94;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_97;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
              goto LABEL_93;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v21 = v27++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_94;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_97;
          v32 = 0;
          while (1)
          {
            v33 = *v2;
            v34 = *(_QWORD *)&a1[v33];
            v35 = v34 + 1;
            if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
              goto LABEL_93;
            v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
            *(_QWORD *)&a1[v33] = v35;
            if (v36 < 0)
            {
              v21 = v32++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_94;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_97;
          v37 = 0;
          while (1)
          {
            v38 = *v2;
            v39 = *(_QWORD *)&a1[v38];
            v40 = v39 + 1;
            if (v39 == -1 || v40 > *(_QWORD *)&a1[*v3])
              goto LABEL_93;
            v41 = *(char *)(*(_QWORD *)&a1[*v5] + v39);
            *(_QWORD *)&a1[v38] = v40;
            if (v41 < 0)
            {
              v21 = v37++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_94;
          }
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_97;
          v42 = 0;
          while (1)
          {
            v43 = *v2;
            v44 = *(_QWORD *)&a1[v43];
            v45 = v44 + 1;
            if (v44 == -1 || v45 > *(_QWORD *)&a1[*v3])
              goto LABEL_93;
            v46 = *(char *)(*(_QWORD *)&a1[*v5] + v44);
            *(_QWORD *)&a1[v43] = v45;
            if (v46 < 0)
            {
              v21 = v42++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_94;
          }
        case 7u:
          if ((v8 & 7) != 0)
            goto LABEL_97;
          v47 = 0;
          while (1)
          {
            v48 = *v2;
            v49 = *(_QWORD *)&a1[v48];
            v50 = v49 + 1;
            if (v49 == -1 || v50 > *(_QWORD *)&a1[*v3])
              goto LABEL_93;
            v51 = *(char *)(*(_QWORD *)&a1[*v5] + v49);
            *(_QWORD *)&a1[v48] = v50;
            if (v51 < 0)
            {
              v21 = v47++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_94;
          }
        case 8u:
          if ((v8 & 7) != 0)
            goto LABEL_97;
          v52 = 0;
          while (1)
          {
            v53 = *v2;
            v54 = *(_QWORD *)&a1[v53];
            v55 = v54 + 1;
            if (v54 == -1 || v55 > *(_QWORD *)&a1[*v3])
              goto LABEL_93;
            v56 = *(char *)(*(_QWORD *)&a1[*v5] + v54);
            *(_QWORD *)&a1[v53] = v55;
            if (v56 < 0)
            {
              v21 = v52++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_94;
          }
        case 9u:
          if ((v8 & 7) != 0)
            goto LABEL_97;
          v57 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_97:
          v62 = 0;
          goto LABEL_96;
      }
      while (1)
      {
        v58 = *v2;
        v59 = *(_QWORD *)&a1[v58];
        v60 = v59 + 1;
        if (v59 == -1 || v60 > *(_QWORD *)&a1[*v3])
          break;
        v61 = *(char *)(*(_QWORD *)&a1[*v5] + v59);
        *(_QWORD *)&a1[v58] = v60;
        if (v61 < 0)
        {
          v21 = v57++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_94;
      }
LABEL_93:
      a1[*v4] = 1;
LABEL_94:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v62 = a1[*v4] == 0;
LABEL_96:
  PBReaderRecallMark();
  return v62;
}

void sub_189A72CE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEONetEventDimensionalGroupingReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  char v9;
  unsigned int v10;
  uint32x4_t v11;
  int8x16_t v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  int v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  void *v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  uint64_t v123;
  char v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  char v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  char v136;
  int v137;
  int v138;
  void *v139;
  GEONetEventAggregateStats *v141;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 112));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 108);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 104));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = *(_DWORD *)(a1 + 156);
  v11 = (uint32x4_t)vdupq_n_s32(v10);
  v12.i64[0] = 0x100000001;
  v12.i64[1] = 0x100000001;
  v13 = vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v11, (uint32x4_t)xmmword_189CFAD00), v12), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v11, (uint32x4_t)xmmword_189CFAD10), v12)))+ ((v10 >> 20) & 1);
  while (1)
  {
    v14 = a3[v7];
    if (v14 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v14 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v7;
  }
  if (v14)
  {
    ++v13;
    goto LABEL_9;
  }
  v15 = v9 | (v13 > 6);
  if (v9 & 1 | (v13 > 6) | v8 & 1)
    v16 = 0;
  else
    v16 = a3;
  v17 = (int *)MEMORY[0x1E0D82BF0];
  v18 = (int *)MEMORY[0x1E0D82BC8];
  v19 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_270;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_24;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_24:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_26:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_270:
      if ((v15 & 1) != 0)
      {
        v136 = 1;
        goto LABEL_272;
      }
      if (v16)
      {
        while (1)
        {
          v137 = *v16++;
          v138 = 0x4000;
          switch(v137)
          {
            case 0:
              goto LABEL_286;
            case 5:
              goto LABEL_285;
            case 6:
              v138 = 0x80000;
              goto LABEL_285;
            case 7:
              v138 = 0x8000;
              goto LABEL_285;
            case 13:
              v138 = 0x200000;
              goto LABEL_285;
            case 14:
              v138 = 0x10000;
              goto LABEL_285;
            case 16:
              v138 = 0x40000;
              goto LABEL_285;
            case 20:
              v138 = 0x20000;
              goto LABEL_285;
            case 21:
              v138 = 0x400000;
              goto LABEL_285;
            case 22:
              v138 = 0x100000;
LABEL_285:
              *(_DWORD *)(a1 + 156) |= v138;
              break;
            default:
              continue;
          }
        }
      }
LABEL_286:
      v3 = *(_BYTE *)(v3 + *v18) == 0;
      if ((v15 & 1) != 0)
        goto LABEL_287;
      return v3;
    }
    v30 = v22 >> 3;
    v31 = v15;
    if (!((v16 == 0) | v15 & 1))
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_188;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        *(_DWORD *)(a1 + 156) |= 0x400u;
        while (1)
        {
          v39 = *v17;
          v40 = *(_QWORD *)(v3 + v39);
          v41 = v40 + 1;
          if (v40 == -1 || v41 > *(_QWORD *)(v3 + *v6))
            break;
          v42 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v40);
          *(_QWORD *)(v3 + v39) = v41;
          v38 |= (unint64_t)(v42 & 0x7F) << v36;
          if ((v42 & 0x80) == 0)
            goto LABEL_191;
          v36 += 7;
          v27 = v37++ >= 9;
          if (v27)
          {
            LODWORD(v38) = 0;
            goto LABEL_193;
          }
        }
        *(_BYTE *)(v3 + *v18) = 1;
LABEL_191:
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v38) = 0;
LABEL_193:
        v131 = 148;
        goto LABEL_234;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_188;
        v44 = 0;
        v45 = 0;
        v38 = 0;
        *(_DWORD *)(a1 + 156) |= 0x20u;
        while (2)
        {
          v46 = *v17;
          v47 = *(_QWORD *)(v3 + v46);
          v48 = v47 + 1;
          if (v47 == -1 || v48 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v47);
            *(_QWORD *)(v3 + v46) = v48;
            v38 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              v27 = v45++ >= 9;
              if (v27)
              {
                LODWORD(v38) = 0;
                goto LABEL_197;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v38) = 0;
LABEL_197:
        v131 = 128;
        goto LABEL_234;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_188;
        v50 = 0;
        v51 = 0;
        v38 = 0;
        *(_DWORD *)(a1 + 156) |= 8u;
        while (2)
        {
          v52 = *v17;
          v53 = *(_QWORD *)(v3 + v52);
          v54 = v53 + 1;
          if (v53 == -1 || v54 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v55 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v53);
            *(_QWORD *)(v3 + v52) = v54;
            v38 |= (unint64_t)(v55 & 0x7F) << v50;
            if (v55 < 0)
            {
              v50 += 7;
              v27 = v51++ >= 9;
              if (v27)
              {
                LODWORD(v38) = 0;
                goto LABEL_201;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v38) = 0;
LABEL_201:
        v131 = 120;
        goto LABEL_234;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_188;
        v56 = 0;
        v57 = 0;
        v58 = 0;
        *(_DWORD *)(a1 + 156) |= 0x2000u;
        while (2)
        {
          v59 = *v17;
          v60 = *(_QWORD *)(v3 + v59);
          v61 = v60 + 1;
          if (v60 == -1 || v61 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v62 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v60);
            *(_QWORD *)(v3 + v59) = v61;
            v58 |= (unint64_t)(v62 & 0x7F) << v56;
            if (v62 < 0)
            {
              v56 += 7;
              v27 = v57++ >= 9;
              if (v27)
              {
                v58 = 0;
                goto LABEL_205;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v58 = 0;
LABEL_205:
        v132 = v58 != 0;
        v133 = 154;
        goto LABEL_243;
      case 5:
        if (!v31)
          goto LABEL_188;
        if ((*(_BYTE *)(a1 + 157) & 0x40) == 0)
        {
          PBReaderReadString();
          v63 = objc_claimAutoreleasedReturnValue();
          v64 = 16;
          goto LABEL_138;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_291;
        v135 = (int)(*(_DWORD *)(a1 + 156) << 17) >> 31;
        goto LABEL_267;
      case 6:
        if (!v31)
          goto LABEL_188;
        if ((*(_BYTE *)(a1 + 158) & 8) == 0)
        {
          PBReaderReadString();
          v63 = objc_claimAutoreleasedReturnValue();
          v64 = 72;
          goto LABEL_138;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_291;
        v135 = (int)(*(_DWORD *)(a1 + 156) << 12) >> 31;
        goto LABEL_267;
      case 7:
        if (!v31)
          goto LABEL_188;
        if ((*(_BYTE *)(a1 + 157) & 0x80) == 0)
        {
          PBReaderReadString();
          v63 = objc_claimAutoreleasedReturnValue();
          v64 = 24;
          goto LABEL_138;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_291;
        v135 = (int)(*(_DWORD *)(a1 + 156) << 16) >> 31;
        goto LABEL_267;
      case 8:
        if ((v8 & 1) == 0)
          goto LABEL_188;
        v65 = 0;
        v66 = 0;
        v38 = 0;
        *(_DWORD *)(a1 + 156) |= 0x40u;
        while (2)
        {
          v67 = *v17;
          v68 = *(_QWORD *)(v3 + v67);
          v69 = v68 + 1;
          if (v68 == -1 || v69 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v70 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v68);
            *(_QWORD *)(v3 + v67) = v69;
            v38 |= (unint64_t)(v70 & 0x7F) << v65;
            if (v70 < 0)
            {
              v65 += 7;
              v27 = v66++ >= 9;
              if (v27)
              {
                LODWORD(v38) = 0;
                goto LABEL_209;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v38) = 0;
LABEL_209:
        v131 = 132;
        goto LABEL_234;
      case 9:
        if ((v8 & 1) == 0)
          goto LABEL_188;
        v71 = 0;
        v72 = 0;
        v38 = 0;
        *(_DWORD *)(a1 + 156) |= 0x80u;
        while (2)
        {
          v73 = *v17;
          v74 = *(_QWORD *)(v3 + v73);
          v75 = v74 + 1;
          if (v74 == -1 || v75 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v76 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v74);
            *(_QWORD *)(v3 + v73) = v75;
            v38 |= (unint64_t)(v76 & 0x7F) << v71;
            if (v76 < 0)
            {
              v71 += 7;
              v27 = v72++ >= 9;
              if (v27)
              {
                LODWORD(v38) = 0;
                goto LABEL_213;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v38) = 0;
LABEL_213:
        v131 = 136;
        goto LABEL_234;
      case 10:
        if ((v8 & 1) == 0)
          goto LABEL_188;
        v77 = 0;
        v78 = 0;
        v38 = 0;
        *(_DWORD *)(a1 + 156) |= 0x100u;
        while (2)
        {
          v79 = *v17;
          v80 = *(_QWORD *)(v3 + v79);
          v81 = v80 + 1;
          if (v80 == -1 || v81 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v82 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v80);
            *(_QWORD *)(v3 + v79) = v81;
            v38 |= (unint64_t)(v82 & 0x7F) << v77;
            if (v82 < 0)
            {
              v77 += 7;
              v27 = v78++ >= 9;
              if (v27)
              {
                LODWORD(v38) = 0;
                goto LABEL_217;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v38) = 0;
LABEL_217:
        v131 = 140;
        goto LABEL_234;
      case 11:
        if ((v8 & 1) == 0)
          goto LABEL_188;
        v83 = 0;
        v84 = 0;
        v38 = 0;
        *(_DWORD *)(a1 + 156) |= 4u;
        while (2)
        {
          v85 = *v17;
          v86 = *(_QWORD *)(v3 + v85);
          v87 = v86 + 1;
          if (v86 == -1 || v87 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v88 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v86);
            *(_QWORD *)(v3 + v85) = v87;
            v38 |= (unint64_t)(v88 & 0x7F) << v83;
            if (v88 < 0)
            {
              v83 += 7;
              v27 = v84++ >= 9;
              if (v27)
              {
                LODWORD(v38) = 0;
                goto LABEL_221;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v38) = 0;
LABEL_221:
        v131 = 116;
        goto LABEL_234;
      case 12:
        if ((v8 & 1) == 0)
          goto LABEL_188;
        v89 = 0;
        v90 = 0;
        v38 = 0;
        *(_DWORD *)(a1 + 156) |= 0x200u;
        while (2)
        {
          v91 = *v17;
          v92 = *(_QWORD *)(v3 + v91);
          v93 = v92 + 1;
          if (v92 == -1 || v93 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v94 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v92);
            *(_QWORD *)(v3 + v91) = v93;
            v38 |= (unint64_t)(v94 & 0x7F) << v89;
            if (v94 < 0)
            {
              v89 += 7;
              v27 = v90++ >= 9;
              if (v27)
              {
                LODWORD(v38) = 0;
                goto LABEL_225;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v38) = 0;
LABEL_225:
        v131 = 144;
        goto LABEL_234;
      case 13:
        if (!v31)
          goto LABEL_188;
        if ((*(_BYTE *)(a1 + 158) & 0x20) == 0)
        {
          PBReaderReadString();
          v63 = objc_claimAutoreleasedReturnValue();
          v64 = 88;
          goto LABEL_138;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_291;
        v135 = (int)(*(_DWORD *)(a1 + 156) << 10) >> 31;
        goto LABEL_267;
      case 14:
        if (!v31)
          goto LABEL_188;
        if ((*(_BYTE *)(a1 + 158) & 1) == 0)
        {
          PBReaderReadString();
          v63 = objc_claimAutoreleasedReturnValue();
          v64 = 40;
          goto LABEL_138;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_291;
        v135 = (int)(*(_DWORD *)(a1 + 156) << 15) >> 31;
        goto LABEL_267;
      case 15:
        if ((v8 & 1) == 0)
          goto LABEL_188;
        v95 = 0;
        v96 = 0;
        v97 = 0;
        *(_DWORD *)(a1 + 156) |= 1u;
        while (2)
        {
          v98 = *v17;
          v99 = *(_QWORD *)(v3 + v98);
          v100 = v99 + 1;
          if (v99 == -1 || v100 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v101 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v99);
            *(_QWORD *)(v3 + v98) = v100;
            v97 |= (unint64_t)(v101 & 0x7F) << v95;
            if (v101 < 0)
            {
              v95 += 7;
              v27 = v96++ >= 9;
              if (v27)
              {
                v97 = 0;
                goto LABEL_229;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v97 = 0;
LABEL_229:
        v134 = 32;
        goto LABEL_248;
      case 16:
        if (!v31)
          goto LABEL_188;
        if ((*(_BYTE *)(a1 + 158) & 4) == 0)
        {
          PBReaderReadString();
          v63 = objc_claimAutoreleasedReturnValue();
          v64 = 64;
LABEL_138:
          v102 = *(void **)(a1 + v64);
          *(_QWORD *)(a1 + v64) = v63;
          goto LABEL_179;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_291;
        v135 = (int)(*(_DWORD *)(a1 + 156) << 13) >> 31;
        goto LABEL_267;
      case 17:
        if ((v8 & 1) == 0)
          goto LABEL_188;
        v103 = 0;
        v104 = 0;
        v38 = 0;
        *(_DWORD *)(a1 + 156) |= 0x10u;
        while (2)
        {
          v105 = *v17;
          v106 = *(_QWORD *)(v3 + v105);
          v107 = v106 + 1;
          if (v106 == -1 || v107 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v108 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v106);
            *(_QWORD *)(v3 + v105) = v107;
            v38 |= (unint64_t)(v108 & 0x7F) << v103;
            if (v108 < 0)
            {
              v103 += 7;
              v27 = v104++ >= 9;
              if (v27)
              {
                LODWORD(v38) = 0;
                goto LABEL_233;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v38) = 0;
LABEL_233:
        v131 = 124;
LABEL_234:
        *(_DWORD *)(a1 + v131) = v38;
        goto LABEL_269;
      case 18:
        if ((v8 & 1) == 0)
          goto LABEL_188;
        v109 = 0;
        v110 = 0;
        v111 = 0;
        *(_DWORD *)(a1 + 156) |= 0x1000u;
        while (2)
        {
          v112 = *v17;
          v113 = *(_QWORD *)(v3 + v112);
          v114 = v113 + 1;
          if (v113 == -1 || v114 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v115 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v113);
            *(_QWORD *)(v3 + v112) = v114;
            v111 |= (unint64_t)(v115 & 0x7F) << v109;
            if (v115 < 0)
            {
              v109 += 7;
              v27 = v110++ >= 9;
              if (v27)
              {
                v111 = 0;
                goto LABEL_238;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v111 = 0;
LABEL_238:
        v132 = v111 != 0;
        v133 = 153;
        goto LABEL_243;
      case 19:
        if ((v8 & 1) == 0)
          goto LABEL_188;
        v116 = 0;
        v117 = 0;
        v118 = 0;
        *(_DWORD *)(a1 + 156) |= 0x800u;
        while (2)
        {
          v119 = *v17;
          v120 = *(_QWORD *)(v3 + v119);
          v121 = v120 + 1;
          if (v120 == -1 || v121 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v122 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v120);
            *(_QWORD *)(v3 + v119) = v121;
            v118 |= (unint64_t)(v122 & 0x7F) << v116;
            if (v122 < 0)
            {
              v116 += 7;
              v27 = v117++ >= 9;
              if (v27)
              {
                v118 = 0;
                goto LABEL_242;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v118 = 0;
LABEL_242:
        v132 = v118 != 0;
        v133 = 152;
LABEL_243:
        *(_BYTE *)(a1 + v133) = v132;
        goto LABEL_269;
      case 20:
        if (!v31)
          goto LABEL_188;
        if ((*(_BYTE *)(a1 + 158) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_291;
          v135 = (int)(*(_DWORD *)(a1 + 156) << 14) >> 31;
          goto LABEL_267;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_291;
        v141 = objc_alloc_init(GEONetEventAggregateStats);
        if (!GEONetEventAggregateStatsReadAllFrom((uint64_t)v141, (void *)v3))
          goto LABEL_290;
        PBReaderRecallMark();
        v123 = 56;
        goto LABEL_178;
      case 21:
        if (!v31)
          goto LABEL_188;
        if ((*(_BYTE *)(a1 + 158) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_291;
          v135 = (int)(*(_DWORD *)(a1 + 156) << 9) >> 31;
          goto LABEL_267;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_291;
        v141 = objc_alloc_init(GEONetEventAggregateStats);
        if (!GEONetEventAggregateStatsReadAllFrom((uint64_t)v141, (void *)v3))
          goto LABEL_290;
        PBReaderRecallMark();
        v123 = 96;
        goto LABEL_178;
      case 22:
        if (!v31)
          goto LABEL_188;
        if ((*(_BYTE *)(a1 + 158) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_291;
          v135 = (int)(*(_DWORD *)(a1 + 156) << 11) >> 31;
LABEL_267:
          v7 += v135;
          goto LABEL_268;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_291;
        v141 = objc_alloc_init(GEONetEventAggregateStats);
        if (GEONetEventAggregateStatsReadAllFrom((uint64_t)v141, (void *)v3))
        {
          PBReaderRecallMark();
          v123 = 80;
LABEL_178:
          v102 = *(void **)(a1 + v123);
          *(_QWORD *)(a1 + v123) = v141;
LABEL_179:

          --v7;
LABEL_268:
          v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_269:
          if (!(v15 & 1 | (v7 != 0)))
            goto LABEL_270;
          continue;
        }
LABEL_290:

LABEL_291:
        v136 = 0;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_272:
        *(_DWORD *)(a1 + 156) |= 0x4000u;
        *(_DWORD *)(a1 + 156) |= 0x80000u;
        *(_DWORD *)(a1 + 156) |= 0x8000u;
        *(_DWORD *)(a1 + 156) |= 0x200000u;
        *(_DWORD *)(a1 + 156) |= 0x10000u;
        *(_DWORD *)(a1 + 156) |= 0x40000u;
        *(_DWORD *)(a1 + 156) |= 0x20000u;
        *(_DWORD *)(a1 + 156) |= 0x400000u;
        *(_DWORD *)(a1 + 156) |= 0x100000u;
        if ((v136 & 1) != 0)
          goto LABEL_286;
        v3 = 0;
        if ((v15 & 1) == 0)
          return v3;
LABEL_287:
        v139 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

        return v3;
      case 23:
        if ((v8 & 1) != 0)
        {
          v124 = 0;
          v125 = 0;
          v97 = 0;
          *(_DWORD *)(a1 + 156) |= 2u;
          while (1)
          {
            v126 = *v17;
            v127 = *(_QWORD *)(v3 + v126);
            v128 = v127 + 1;
            if (v127 == -1 || v128 > *(_QWORD *)(v3 + *v6))
              break;
            v129 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v127);
            *(_QWORD *)(v3 + v126) = v128;
            v97 |= (unint64_t)(v129 & 0x7F) << v124;
            if ((v129 & 0x80) == 0)
              goto LABEL_245;
            v124 += 7;
            v27 = v125++ >= 9;
            if (v27)
            {
              v97 = 0;
              goto LABEL_247;
            }
          }
          *(_BYTE *)(v3 + *v18) = 1;
LABEL_245:
          if (*(_BYTE *)(v3 + *v18))
            v97 = 0;
LABEL_247:
          v134 = 48;
LABEL_248:
          *(_QWORD *)(a1 + v134) = v97;
        }
        else
        {
LABEL_188:
          v130 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          if ((v130 & 1) == 0)
          {
LABEL_289:
            v136 = 0;
            goto LABEL_272;
          }
        }
        goto LABEL_269;
      default:
        v43 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (!v43)
          goto LABEL_289;
        goto LABEL_269;
    }
  }
}

void sub_189A73FE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A74128(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A76364(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A764AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A76664(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A76934(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A76A7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A76BC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A79B80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEONetEventDimensionalGroupingReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 108))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEONetEventDimensionalGroupingReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 112));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 104) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 108) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEONetEventDimensionalGroupingReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEONetEventDimensionalGroupingReadAllFrom_initialTag;
  Specified = GEONetEventDimensionalGroupingReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 56), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 96), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 80), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 112));
  return Specified;
}

void sub_189A79D4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEONetEventDimensionalGroupingReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEONetEventDimensionalGroupingReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A79DAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A7A1E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONetEventDimensionalGroupingIsDirty(os_unfair_lock_s *a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner(a1 + 28);
  v2 = (a1[39]._os_unfair_lock_opaque & 0xFFC000) != 0;
  os_unfair_lock_unlock(a1 + 28);
  return v2;
}

void sub_189A7AA98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONetworkSessionTaskTransactionMetricsReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  _BOOL8 v72;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            *(_WORD *)(a1 + 108) |= 0x10u;
            v18 = *v4;
            v19 = *(_QWORD *)&v3[v18];
            if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v19);
              *(_QWORD *)&v3[v18] = v19 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v71 = 40;
            goto LABEL_123;
          case 2u:
            *(_WORD *)(a1 + 108) |= 8u;
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v22 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v71 = 32;
            goto LABEL_123;
          case 3u:
            *(_WORD *)(a1 + 108) |= 4u;
            v23 = *v4;
            v24 = *(_QWORD *)&v3[v23];
            if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v24);
              *(_QWORD *)&v3[v23] = v24 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v71 = 24;
            goto LABEL_123;
          case 4u:
            *(_WORD *)(a1 + 108) |= 2u;
            v25 = *v4;
            v26 = *(_QWORD *)&v3[v25];
            if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v26);
              *(_QWORD *)&v3[v25] = v26 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v71 = 16;
            goto LABEL_123;
          case 5u:
            *(_WORD *)(a1 + 108) |= 0x400u;
            v27 = *v4;
            v28 = *(_QWORD *)&v3[v27];
            if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v28);
              *(_QWORD *)&v3[v27] = v28 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v71 = 88;
            goto LABEL_123;
          case 6u:
            *(_WORD *)(a1 + 108) |= 0x200u;
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v30);
              *(_QWORD *)&v3[v29] = v30 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v71 = 80;
            goto LABEL_123;
          case 7u:
            *(_WORD *)(a1 + 108) |= 1u;
            v31 = *v4;
            v32 = *(_QWORD *)&v3[v31];
            if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v32);
              *(_QWORD *)&v3[v31] = v32 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v71 = 8;
            goto LABEL_123;
          case 8u:
            *(_WORD *)(a1 + 108) |= 0x40u;
            v33 = *v4;
            v34 = *(_QWORD *)&v3[v33];
            if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v34);
              *(_QWORD *)&v3[v33] = v34 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v71 = 56;
            goto LABEL_123;
          case 9u:
            *(_WORD *)(a1 + 108) |= 0x20u;
            v35 = *v4;
            v36 = *(_QWORD *)&v3[v35];
            if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v36);
              *(_QWORD *)&v3[v35] = v36 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v71 = 48;
            goto LABEL_123;
          case 0xAu:
            *(_WORD *)(a1 + 108) |= 0x100u;
            v37 = *v4;
            v38 = *(_QWORD *)&v3[v37];
            if (v38 <= 0xFFFFFFFFFFFFFFF7 && v38 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v38);
              *(_QWORD *)&v3[v37] = v38 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v71 = 72;
            goto LABEL_123;
          case 0xBu:
            *(_WORD *)(a1 + 108) |= 0x80u;
            v39 = *v4;
            v40 = *(_QWORD *)&v3[v39];
            if (v40 <= 0xFFFFFFFFFFFFFFF7 && v40 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v40);
              *(_QWORD *)&v3[v39] = v40 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v71 = 64;
LABEL_123:
            *(_QWORD *)(a1 + v71) = v20;
            continue;
          case 0xCu:
            v41 = 0;
            v42 = 0;
            v43 = 0;
            *(_WORD *)(a1 + 108) |= 0x800u;
            while (2)
            {
              v44 = *v4;
              v45 = *(_QWORD *)&v3[v44];
              v46 = v45 + 1;
              if (v45 == -1 || v46 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v47 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v45);
                *(_QWORD *)&v3[v44] = v46;
                v43 |= (unint64_t)(v47 & 0x7F) << v41;
                if (v47 < 0)
                {
                  v41 += 7;
                  v15 = v42++ >= 9;
                  if (v15)
                  {
                    LODWORD(v43) = 0;
                    goto LABEL_86;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v43) = 0;
LABEL_86:
            v68 = 96;
            goto LABEL_100;
          case 0xDu:
            v48 = 0;
            v49 = 0;
            v50 = 0;
            *(_WORD *)(a1 + 108) |= 0x2000u;
            while (2)
            {
              v51 = *v4;
              v52 = *(_QWORD *)&v3[v51];
              v53 = v52 + 1;
              if (v52 == -1 || v53 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v54 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v52);
                *(_QWORD *)&v3[v51] = v53;
                v50 |= (unint64_t)(v54 & 0x7F) << v48;
                if (v54 < 0)
                {
                  v48 += 7;
                  v15 = v49++ >= 9;
                  if (v15)
                  {
                    v50 = 0;
                    goto LABEL_90;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v50 = 0;
LABEL_90:
            v69 = v50 != 0;
            v70 = 104;
            goto LABEL_95;
          case 0xEu:
            v55 = 0;
            v56 = 0;
            v57 = 0;
            *(_WORD *)(a1 + 108) |= 0x4000u;
            while (2)
            {
              v58 = *v4;
              v59 = *(_QWORD *)&v3[v58];
              v60 = v59 + 1;
              if (v59 == -1 || v60 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v61 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v59);
                *(_QWORD *)&v3[v58] = v60;
                v57 |= (unint64_t)(v61 & 0x7F) << v55;
                if (v61 < 0)
                {
                  v55 += 7;
                  v15 = v56++ >= 9;
                  if (v15)
                  {
                    v57 = 0;
                    goto LABEL_94;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v57 = 0;
LABEL_94:
            v69 = v57 != 0;
            v70 = 105;
LABEL_95:
            *(_BYTE *)(a1 + v70) = v69;
            continue;
          case 0xFu:
            v62 = 0;
            v63 = 0;
            v43 = 0;
            *(_WORD *)(a1 + 108) |= 0x1000u;
            break;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_126;
            continue;
        }
        while (1)
        {
          v64 = *v4;
          v65 = *(_QWORD *)&v3[v64];
          v66 = v65 + 1;
          if (v65 == -1 || v66 > *(_QWORD *)&v3[*v5])
            break;
          v67 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v65);
          *(_QWORD *)&v3[v64] = v66;
          v43 |= (unint64_t)(v67 & 0x7F) << v62;
          if ((v67 & 0x80) == 0)
            goto LABEL_97;
          v62 += 7;
          v15 = v63++ >= 9;
          if (v15)
          {
            LODWORD(v43) = 0;
            goto LABEL_99;
          }
        }
        v3[*v6] = 1;
LABEL_97:
        if (v3[*v6])
          LODWORD(v43) = 0;
LABEL_99:
        v68 = 100;
LABEL_100:
        *(_DWORD *)(a1 + v68) = v43;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v72 = v3[*v6] == 0;
  }
  else
  {
LABEL_126:
    v72 = 0;
  }
  objc_sync_exit(v3);

  return v72;
}

void sub_189A7D4EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONetworkSessionTaskTransactionMetricsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEONetworkSessionTaskTransactionMetricsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A7D54C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A7F088(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPlaceCardModuleReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  _BOOL4 v12;
  int *v13;
  int *v14;
  int *v15;
  BOOL v16;
  int *v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int v26;
  int v27;
  unint64_t v29;
  _BOOL4 v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  void *v43;
  int *v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  int v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  int v61;
  char v62;
  int v63;
  int v64;
  void *v65;
  BOOL v67;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 64) >> 1) & 1) + ((*(unsigned __int8 *)(a1 + 64) >> 2) & 1);
  while (1)
  {
    v11 = a3[v9];
    if (v11 >= 0xFFFFFFFE)
    {
      v7 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v9;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = (v7 & 1 | v10) != 0;
  if (((v7 & 1 | v10) != 0) | v8 & 1)
    v13 = 0;
  else
    v13 = a3;
  v14 = (int *)MEMORY[0x1E0D82BF0];
  v15 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
  {
LABEL_95:
    if (v12)
    {
      v62 = 1;
      goto LABEL_97;
    }
    if (!v13)
      goto LABEL_107;
    while (1)
    {
      v64 = *v13++;
      v63 = v64;
      if (v64 == 2)
        goto LABEL_106;
      if (v63 == 3)
      {
        LOBYTE(v63) = 4;
LABEL_106:
        *(_BYTE *)(a1 + 64) |= v63;
      }
      else if (!v63)
      {
        goto LABEL_107;
      }
    }
  }
  if (v13)
    v16 = (v7 & 1 | v10) != 0;
  else
    v16 = 1;
  v67 = v16;
  v17 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    if (*(_BYTE *)(v3 + *v15))
      goto LABEL_95;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    while (1)
    {
      v21 = *v14;
      v22 = *(_QWORD *)(v3 + v21);
      v23 = v22 + 1;
      if (v22 == -1 || v23 > *(_QWORD *)(v3 + *v6))
        break;
      v24 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v22);
      *(_QWORD *)(v3 + v21) = v23;
      v20 |= (unint64_t)(v24 & 0x7F) << v18;
      if ((v24 & 0x80) == 0)
        goto LABEL_27;
      v18 += 7;
      v25 = v19++ >= 9;
      if (v25)
      {
        v20 = 0;
        v26 = *(unsigned __int8 *)(v3 + *v15);
        goto LABEL_29;
      }
    }
    *(_BYTE *)(v3 + *v15) = 1;
LABEL_27:
    v26 = *(unsigned __int8 *)(v3 + *v15);
    if (*(_BYTE *)(v3 + *v15))
      v20 = 0;
LABEL_29:
    v27 = v20 & 7;
    if (v26 || v27 == 4)
      goto LABEL_95;
    v29 = v20 >> 3;
    v30 = v12;
    if (!v67)
    {
      v31 = v13;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    if ((_DWORD)v29 != 3)
    {
      if ((_DWORD)v29 == 2)
      {
        if (v30 && (*(_BYTE *)(a1 + 64) & 2) == 0)
        {
          if (v27 == 2)
          {
            if (!PBReaderPlaceMark())
              goto LABEL_111;
            while (1)
            {
              v44 = (int *)MEMORY[0x1E0D82BC8];
              if (*(_QWORD *)(v3 + *v14) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
                break;
              v45 = 0;
              v46 = 0;
              v47 = 0;
              while (1)
              {
                v48 = *v14;
                v49 = *(_QWORD *)(v3 + v48);
                v50 = v49 + 1;
                if (v49 == -1 || v50 > *(_QWORD *)(v3 + *v6))
                  break;
                v51 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v49);
                *(_QWORD *)(v3 + v48) = v50;
                v47 |= (unint64_t)(v51 & 0x7F) << v45;
                if (v51 < 0)
                {
                  v45 += 7;
                  v25 = v46++ >= 9;
                  if (!v25)
                    continue;
                }
                goto LABEL_68;
              }
              *(_BYTE *)(v3 + *v44) = 1;
LABEL_68:
              PBRepeatedInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            v54 = 0;
            v55 = 0;
            v56 = 0;
            while (1)
            {
              v57 = *v14;
              v58 = *(_QWORD *)(v3 + v57);
              v59 = v58 + 1;
              if (v58 == -1 || v59 > *(_QWORD *)(v3 + *v6))
                break;
              v60 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v58);
              *(_QWORD *)(v3 + v57) = v59;
              v56 |= (unint64_t)(v60 & 0x7F) << v54;
              if (v60 < 0)
              {
                v54 += 7;
                v25 = v55++ >= 9;
                if (!v25)
                  continue;
              }
              goto LABEL_88;
            }
            *(_BYTE *)(v3 + *v15) = 1;
LABEL_88:
            PBRepeatedInt32Add();
          }
          goto LABEL_89;
        }
      }
      else
      {
        if ((_DWORD)v29 != 1)
        {
          v52 = PBReaderSkipValueWithTag();
          v15 = (int *)MEMORY[0x1E0D82BC8];
          if (!v52)
            goto LABEL_110;
          goto LABEL_90;
        }
        if ((v8 & 1) != 0)
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          *(_BYTE *)(a1 + 64) |= 1u;
          while (1)
          {
            v38 = *v14;
            v39 = *(_QWORD *)(v3 + v38);
            v40 = v39 + 1;
            if (v39 == -1 || v40 > *(_QWORD *)(v3 + *v6))
              break;
            v41 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v39);
            *(_QWORD *)(v3 + v38) = v40;
            v37 |= (unint64_t)(v41 & 0x7F) << v35;
            if ((v41 & 0x80) == 0)
              goto LABEL_74;
            v35 += 7;
            v25 = v36++ >= 9;
            if (v25)
            {
              LODWORD(v37) = 0;
              goto LABEL_76;
            }
          }
          *(_BYTE *)(v3 + *v15) = 1;
LABEL_74:
          if (*(_BYTE *)(v3 + *v15))
            LODWORD(v37) = 0;
LABEL_76:
          *(_DWORD *)(a1 + 60) = v37;
          goto LABEL_90;
        }
      }
      goto LABEL_71;
    }
    if (v30)
      break;
LABEL_71:
    v53 = PBReaderSkipValueWithTag();
    v15 = (int *)MEMORY[0x1E0D82BC8];
    if ((v53 & 1) == 0)
    {
LABEL_110:
      v62 = 0;
      goto LABEL_97;
    }
LABEL_90:
    if (v9)
      v61 = 1;
    else
      v61 = v12;
    if (v61 != 1 || *(_QWORD *)(v3 + *v14) >= *(_QWORD *)(v3 + *v6))
      goto LABEL_95;
  }
  if ((*(_BYTE *)(a1 + 64) & 4) == 0)
  {
    PBReaderReadString();
    v42 = objc_claimAutoreleasedReturnValue();
    v43 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v42;

    v15 = (int *)MEMORY[0x1E0D82BC8];
    --v9;
    goto LABEL_90;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v9 += *(unsigned __int8 *)(a1 + 64) << 29 >> 31;
LABEL_89:
    v15 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_90;
  }
LABEL_111:
  v62 = 0;
  v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_97:
  *(_BYTE *)(a1 + 64) |= 2u;
  *(_BYTE *)(a1 + 64) |= 4u;
  if ((v62 & 1) != 0)
  {
LABEL_107:
    v3 = *(_BYTE *)(v3 + *v15) == 0;
    if (v12)
      goto LABEL_108;
    return v3;
  }
  v3 = 0;
  if (!v12)
    return v3;
LABEL_108:
  v65 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

  return v3;
}

void sub_189A7FBFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A7FFAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPlaceCardModuleReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPlaceCardModuleReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPlaceCardModuleReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPlaceCardModuleReadAllFrom_initialTag;
  Specified = GEOPlaceCardModuleReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189A80138(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPlaceCardModuleReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPlaceCardModuleReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A80198(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A80360(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPlaceCardModuleIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = (*(_BYTE *)(a1 + 64) & 0xE) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return v2;
}

void sub_189A80684(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPlaceIdDetailsReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL8 v46;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 2u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
                break;
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                goto LABEL_51;
              v18 += 7;
              v15 = v19++ >= 9;
              if (v15)
              {
                v20 = 0;
                goto LABEL_53;
              }
            }
            v3[*v6] = 1;
LABEL_51:
            if (v3[*v6])
              v20 = 0;
LABEL_53:
            v44 = 16;
            goto LABEL_58;
          case 2u:
            v25 = 0;
            v26 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 1u;
            while (2)
            {
              v27 = *v4;
              v28 = *(_QWORD *)&v3[v27];
              v29 = v28 + 1;
              if (v28 == -1 || v29 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v30 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v28);
                *(_QWORD *)&v3[v27] = v29;
                v20 |= (unint64_t)(v30 & 0x7F) << v25;
                if (v30 < 0)
                {
                  v25 += 7;
                  v15 = v26++ >= 9;
                  if (v15)
                  {
                    v20 = 0;
                    goto LABEL_57;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v20 = 0;
LABEL_57:
            v44 = 8;
LABEL_58:
            *(_QWORD *)(a1 + v44) = v20;
            continue;
          case 3u:
            v31 = 0;
            v32 = 0;
            v33 = 0;
            *(_BYTE *)(a1 + 32) |= 4u;
            while (2)
            {
              v34 = *v4;
              v35 = *(_QWORD *)&v3[v34];
              v36 = v35 + 1;
              if (v35 == -1 || v36 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v37 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v35);
                *(_QWORD *)&v3[v34] = v36;
                v33 |= (unint64_t)(v37 & 0x7F) << v31;
                if (v37 < 0)
                {
                  v31 += 7;
                  v15 = v32++ >= 9;
                  if (v15)
                  {
                    LODWORD(v33) = 0;
                    goto LABEL_62;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v33) = 0;
LABEL_62:
            v45 = 24;
            goto LABEL_67;
          case 4u:
            v38 = 0;
            v39 = 0;
            v33 = 0;
            *(_BYTE *)(a1 + 32) |= 8u;
            break;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_70;
            continue;
        }
        while (1)
        {
          v40 = *v4;
          v41 = *(_QWORD *)&v3[v40];
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)&v3[*v5])
            break;
          v43 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v41);
          *(_QWORD *)&v3[v40] = v42;
          v33 |= (unint64_t)(v43 & 0x7F) << v38;
          if ((v43 & 0x80) == 0)
            goto LABEL_64;
          v38 += 7;
          v15 = v39++ >= 9;
          if (v15)
          {
            LODWORD(v33) = 0;
            goto LABEL_66;
          }
        }
        v3[*v6] = 1;
LABEL_64:
        if (v3[*v6])
          LODWORD(v33) = 0;
LABEL_66:
        v45 = 28;
LABEL_67:
        *(_DWORD *)(a1 + v45) = v33;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v46 = v3[*v6] == 0;
  }
  else
  {
LABEL_70:
    v46 = 0;
  }
  objc_sync_exit(v3);

  return v46;
}

void sub_189A812F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPlaceIdDetailsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPlaceIdDetailsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A81358(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPredictedCommuteDestinationReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 24) |= 4u;
          while (1)
          {
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              break;
            v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
            *(_QWORD *)&v3[v29] = v31;
            v28 |= (unint64_t)(v32 & 0x7F) << v26;
            if ((v32 & 0x80) == 0)
              goto LABEL_46;
            v26 += 7;
            v15 = v27++ >= 9;
            if (v15)
            {
              v28 = 0;
              goto LABEL_48;
            }
          }
          v3[*v6] = 1;
LABEL_46:
          if (v3[*v6])
            v28 = 0;
LABEL_48:
          *(_BYTE *)(a1 + 20) = v28 != 0;
        }
        else if ((_DWORD)v18 == 2)
        {
          *(_BYTE *)(a1 + 24) |= 1u;
          v33 = *v4;
          v34 = *(_QWORD *)&v3[v33];
          if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(_QWORD *)&v3[*v5])
          {
            v35 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v34);
            *(_QWORD *)&v3[v33] = v34 + 8;
          }
          else
          {
            v3[*v6] = 1;
            v35 = 0;
          }
          *(_QWORD *)(a1 + 8) = v35;
        }
        else if ((_DWORD)v18 == 1)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 24) |= 2u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
              break;
            v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              goto LABEL_42;
            v19 += 7;
            v15 = v20++ >= 9;
            if (v15)
            {
              LODWORD(v21) = 0;
              goto LABEL_44;
            }
          }
          v3[*v6] = 1;
LABEL_42:
          if (v3[*v6])
            LODWORD(v21) = 0;
LABEL_44:
          *(_DWORD *)(a1 + 16) = v21;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_53;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v36 = v3[*v6] == 0;
  }
  else
  {
LABEL_53:
    v36 = 0;
  }
  objc_sync_exit(v3);

  return v36;
}

void sub_189A822A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPredictedCommuteDestinationReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPredictedCommuteDestinationReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A82304(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPublisherDetailsReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  _BOOL8 v40;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        v17 = v10 & 7;
        if (v16 || v17 == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (1)
          {
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              break;
            v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
            *(_QWORD *)&v3[v29] = v31;
            v28 |= (unint64_t)(v32 & 0x7F) << v26;
            if ((v32 & 0x80) == 0)
              goto LABEL_44;
            v26 += 7;
            v15 = v27++ >= 9;
            if (v15)
            {
              v28 = 0;
              goto LABEL_46;
            }
          }
          v3[*v6] = 1;
LABEL_44:
          if (v3[*v6])
            v28 = 0;
LABEL_46:
          *(_BYTE *)(a1 + 32) = v28 != 0;
        }
        else if ((v10 >> 3) == 1)
        {
          if (v17 == 2)
          {
            if (!PBReaderPlaceMark())
              goto LABEL_59;
            while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5] && !v3[*v6])
            {
              v19 = 0;
              v20 = 0;
              v21 = 0;
              while (1)
              {
                v22 = *v4;
                v23 = *(_QWORD *)&v3[v22];
                v24 = v23 + 1;
                if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
                  break;
                v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
                *(_QWORD *)&v3[v22] = v24;
                v21 |= (unint64_t)(v25 & 0x7F) << v19;
                if (v25 < 0)
                {
                  v19 += 7;
                  v15 = v20++ >= 9;
                  if (!v15)
                    continue;
                }
                goto LABEL_33;
              }
              v3[*v6] = 1;
LABEL_33:
              PBRepeatedUInt64Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            v33 = 0;
            v34 = 0;
            v35 = 0;
            while (1)
            {
              v36 = *v4;
              v37 = *(_QWORD *)&v3[v36];
              v38 = v37 + 1;
              if (v37 == -1 || v38 > *(_QWORD *)&v3[*v5])
                break;
              v39 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v37);
              *(_QWORD *)&v3[v36] = v38;
              v35 |= (unint64_t)(v39 & 0x7F) << v33;
              if (v39 < 0)
              {
                v33 += 7;
                v15 = v34++ >= 9;
                if (!v15)
                  continue;
              }
              goto LABEL_56;
            }
            v3[*v6] = 1;
LABEL_56:
            PBRepeatedUInt64Add();
          }
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_59;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v40 = v3[*v6] == 0;
  }
  else
  {
LABEL_59:
    v40 = 0;
  }
  objc_sync_exit(v3);

  return v40;
}

void sub_189A83110(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPublisherDetailsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPublisherDetailsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A83174(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A83CFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORevealedPlaceCardModuleReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  int v43;
  uint64_t v44;
  void *v45;
  char v46;
  char v47;
  char v48;
  int v49;
  char v50;
  void *v51;
  GEORevealedPlaceCardModuleTypeTitle *v53;
  char v54;
  char v55;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 68);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 64));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 80)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFBFFFALL) & 0xFF01FF01FF01FF01))+ ((*(_BYTE *)(a1 + 80) & 2) != 0)+ ((*(_BYTE *)(a1 + 80) & 4) != 0));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 3;
        v15 = v10 | v14;
        if ((((v10 | v14) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v55 = (v16 == 0) | v15;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v54 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_99;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_99:
      if ((v15 & 1) != 0)
      {
        v48 = 1;
        goto LABEL_112;
      }
      if (v16)
      {
        while (1)
        {
          v49 = *v16++;
          v50 = 32;
          switch(v49)
          {
            case 0:
              goto LABEL_113;
            case 2:
              goto LABEL_108;
            case 3:
              v50 = 64;
              goto LABEL_108;
            case 4:
              v50 = 8;
              goto LABEL_108;
            case 5:
              v50 = 16;
              goto LABEL_108;
            case 6:
              v50 = 2;
              goto LABEL_108;
            case 7:
              v50 = 4;
LABEL_108:
              *(_BYTE *)(a1 + 80) |= v50;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_113;
    }
    v30 = v22 >> 3;
    v31 = v15;
    if ((v55 & 1) == 0)
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_78;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        *(_BYTE *)(a1 + 80) |= 1u;
        while (1)
        {
          v39 = *v17;
          v40 = *(_QWORD *)(v3 + v39);
          v41 = v40 + 1;
          if (v40 == -1 || v41 > *(_QWORD *)(v3 + *v6))
            break;
          v42 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v40);
          *(_QWORD *)(v3 + v39) = v41;
          v38 |= (unint64_t)(v42 & 0x7F) << v36;
          if ((v42 & 0x80) == 0)
            goto LABEL_81;
          v36 += 7;
          v27 = v37++ >= 9;
          if (v27)
          {
            LODWORD(v38) = 0;
            goto LABEL_83;
          }
        }
        *(_BYTE *)(v3 + *v18) = 1;
LABEL_81:
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v38) = 0;
LABEL_83:
        *(_DWORD *)(a1 + 76) = v38;
        goto LABEL_98;
      case 2:
        if (!v31)
          goto LABEL_78;
        if ((*(_BYTE *)(a1 + 80) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_111;
          v47 = 4 * *(_BYTE *)(a1 + 80);
          goto LABEL_96;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_111;
        v53 = objc_alloc_init(GEORevealedPlaceCardModuleTypeTitle);
        if (!GEORevealedPlaceCardModuleTypeTitleReadAllFrom((uint64_t)v53, (void *)v3))
          goto LABEL_110;
        PBReaderRecallMark();
        v44 = 48;
        goto LABEL_77;
      case 3:
        if (!v31)
          goto LABEL_78;
        if ((*(_BYTE *)(a1 + 80) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_111;
          v47 = 2 * *(_BYTE *)(a1 + 80);
          goto LABEL_96;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_111;
        v53 = objc_alloc_init(GEORevealedPlaceCardModuleTypeUnifiedActionRow);
        if (!GEORevealedPlaceCardModuleTypeUnifiedActionRowReadAllFrom(v53, (void *)v3, v9 & 1))
          goto LABEL_110;
        PBReaderRecallMark();
        v44 = 56;
        goto LABEL_77;
      case 4:
        if (!v31)
          goto LABEL_78;
        if ((*(_BYTE *)(a1 + 80) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_111;
          v47 = 16 * *(_BYTE *)(a1 + 80);
          goto LABEL_96;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_111;
        v53 = objc_alloc_init(GEORevealedPlaceCardModuleTypePhotos);
        if (!GEORevealedPlaceCardModuleTypePhotosReadAllFrom((uint64_t)v53, (void *)v3))
          goto LABEL_110;
        PBReaderRecallMark();
        v44 = 32;
        goto LABEL_77;
      case 5:
        if (!v31)
          goto LABEL_78;
        if ((*(_BYTE *)(a1 + 80) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_111;
          v47 = 8 * *(_BYTE *)(a1 + 80);
          goto LABEL_96;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_111;
        v53 = objc_alloc_init(GEORevealedPlaceCardModuleTypeShowcase);
        if (!GEORevealedPlaceCardModuleTypeShowcaseReadAllFrom((uint64_t)v53, (void *)v3, v9 & 1))
          goto LABEL_110;
        PBReaderRecallMark();
        v44 = 40;
        goto LABEL_77;
      case 6:
        if (!v31)
          goto LABEL_78;
        if ((*(_BYTE *)(a1 + 80) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_111;
          v47 = *(_BYTE *)(a1 + 80) << 6;
          goto LABEL_96;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_111;
        v53 = objc_alloc_init(GEORevealedPlaceCardModuleTypeHours);
        if (!GEORevealedPlaceCardModuleTypeHoursReadAllFrom(v53, (void *)v3, v9 & 1))
          goto LABEL_110;
        PBReaderRecallMark();
        v44 = 16;
        goto LABEL_77;
      case 7:
        if (!v31)
        {
LABEL_78:
          v46 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v15 = v54;
          if ((v46 & 1) == 0)
          {
LABEL_109:
            v48 = 0;
            goto LABEL_112;
          }
LABEL_98:
          if (!(v15 & 1 | (v7 != 0)))
            goto LABEL_99;
          continue;
        }
        if ((*(_BYTE *)(a1 + 80) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_111;
          v47 = 32 * *(_BYTE *)(a1 + 80);
LABEL_96:
          v7 += v47 >> 7;
LABEL_97:
          v15 = v54;
          v18 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_98;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_111;
        v53 = objc_alloc_init(GEORevealedPlaceCardModuleTypeInfos);
        if (GEORevealedPlaceCardModuleTypeInfosReadAllFrom(v53, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          v44 = 24;
LABEL_77:
          v45 = *(void **)(a1 + v44);
          *(_QWORD *)(a1 + v44) = v53;

          --v7;
          goto LABEL_97;
        }
LABEL_110:

LABEL_111:
        v48 = 0;
        v15 = v54;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_112:
        *(_BYTE *)(a1 + 80) |= 0x20u;
        *(_BYTE *)(a1 + 80) |= 0x40u;
        *(_BYTE *)(a1 + 80) |= 8u;
        *(_BYTE *)(a1 + 80) |= 0x10u;
        *(_BYTE *)(a1 + 80) |= 2u;
        *(_BYTE *)(a1 + 80) |= 4u;
        if ((v48 & 1) != 0)
        {
LABEL_113:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) != 0)
            goto LABEL_114;
        }
        else
        {
          v3 = 0;
          if ((v15 & 1) != 0)
          {
LABEL_114:
            v51 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v43 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v54;
        if (!v43)
          goto LABEL_109;
        goto LABEL_98;
    }
  }
}

void sub_189A8463C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A84778(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A848B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A849F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A84B34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A85850(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORevealedPlaceCardModuleCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  objc_msgSend(a1[6], "readAll:", 1);
  objc_msgSend(a1[7], "readAll:", 1);
  objc_msgSend(a1[4], "readAll:", 1);
  objc_msgSend(a1[5], "readAll:", 1);
  objc_msgSend(a1[2], "readAll:", 1);
  return objc_msgSend(a1[3], "readAll:", 1);
}

unint64_t GEORevealedPlaceCardModuleReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 68))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORevealedPlaceCardModuleReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 68) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORevealedPlaceCardModuleReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORevealedPlaceCardModuleReadAllFrom_initialTag;
  Specified = GEORevealedPlaceCardModuleReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEORevealedPlaceCardModuleCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_189A85A68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORevealedPlaceCardModuleReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORevealedPlaceCardModuleReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A85AC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORevealedPlaceCardModuleTypeTitleIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  _BOOL8 v27;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 == 2)
        {
          if (!PBReaderPlaceMark())
          {
LABEL_43:
            PBReaderRecallMark();
            return 0;
          }
LABEL_29:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v22 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v23 = *v2;
              v24 = *(_QWORD *)&a1[v23];
              v25 = v24 + 1;
              if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
                break;
              v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
              *(_QWORD *)&a1[v23] = v25;
              if (v26 < 0)
              {
                v13 = v22++ >= 9;
                if (!v13)
                  continue;
              }
              goto LABEL_29;
            }
            a1[*v4] = 1;
          }
          PBReaderRecallMark();
        }
        else
        {
          if ((v8 & 7) != 0)
            goto LABEL_43;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            v19 = v18 + 1;
            if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
              break;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v15++;
              if (v21 <= 8)
                continue;
            }
            goto LABEL_40;
          }
          a1[*v4] = 1;
        }
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_43;
      }
LABEL_40:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v27 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v27;
}

BOOL GEORevealedPlaceCardModuleTypeUnifiedActionRowIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEORevealedPlaceCardModuleButtonIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEORevealedPlaceCardModuleTypePhotosIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  _BOOL8 v22;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_33;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0 && v16++ <= 8)
            continue;
          goto LABEL_30;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_33:
        v22 = 0;
        goto LABEL_32;
      }
LABEL_30:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v22 = a1[*v4] == 0;
LABEL_32:
  PBReaderRecallMark();
  return v22;
}

BOOL GEORevealedPlaceCardModuleTypeShowcaseIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEORevealedPlaceCardModuleButtonIsValid(a1))
          goto LABEL_29;
        PBReaderRecallMark();
      }
      else if ((v8 >> 3) == 1 && v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_29:
        PBReaderRecallMark();
        return 0;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEORevealedPlaceCardModuleTypeHoursIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEORevealedPlaceCardModuleButtonIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEORevealedPlaceCardModuleTypeInfosIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEORevealedPlaceCardModuleButtonIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_189A8685C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORevealedPlaceCardModuleIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v2 = *(unsigned __int8 *)(a1 + 80);
  if ((v2 & 0xE8) != 0)
    return 1;
  if ((v2 & 0x10) != 0)
  {
    if ((GEORevealedPlaceCardModuleTypeShowcaseIsDirty(*(os_unfair_lock_s **)(a1 + 40)) & 1) != 0)
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 80);
  }
  if ((v2 & 2) != 0)
    return 1;
  return (v2 >> 2) & 1;
}

os_unfair_lock_s *GEORevealedPlaceCardModuleIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORevealedPlaceCardModuleIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 18);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189A86CA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A8776C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORevealedPlaceCardModuleButtonReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  int *v15;
  int *v16;
  BOOL v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int v27;
  unint64_t v29;
  _BOOL4 v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  int v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  int v64;
  int v65;
  char v66;
  void *v67;
  BOOL v69;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 56) >> 3) & 1) + ((*(unsigned __int8 *)(a1 + 56) >> 4) & 1);
  while (1)
  {
    v11 = a3[v9];
    if (v11 >= 0xFFFFFFFE)
    {
      v7 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v9;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v7 & 1 | v10;
  v13 = v12 != 0;
  if ((v12 != 0) | v8 & 1)
    v14 = 0;
  else
    v14 = a3;
  v15 = (int *)MEMORY[0x1E0D82BF0];
  v16 = (int *)MEMORY[0x1E0D82BC8];
  if (v12)
    v17 = 1;
  else
    v17 = v14 == 0;
  v69 = v17;
  v18 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v15) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v16))
      goto LABEL_99;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v15;
      v23 = *(_QWORD *)(v3 + v22);
      v24 = v23 + 1;
      if (v23 == -1 || v24 > *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v24;
      v21 |= (unint64_t)(v25 & 0x7F) << v19;
      if ((v25 & 0x80) == 0)
        goto LABEL_27;
      v19 += 7;
      v26 = v20++ >= 9;
      if (v26)
      {
        v21 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v16);
        goto LABEL_29;
      }
    }
    *(_BYTE *)(v3 + *v16) = 1;
LABEL_27:
    v27 = *(unsigned __int8 *)(v3 + *v16);
    if (*(_BYTE *)(v3 + *v16))
      v21 = 0;
LABEL_29:
    if (v27 || (v21 & 7) == 4)
    {
LABEL_99:
      if (v13)
      {
        v63 = 1;
        goto LABEL_110;
      }
      if (!v14)
        goto LABEL_111;
      while (1)
      {
        v65 = *v14++;
        v64 = v65;
        if (v65 == 3)
          break;
        if (v64 == 4)
        {
          v66 = 16;
LABEL_108:
          *(_BYTE *)(a1 + 56) |= v66;
        }
        else if (!v64)
        {
          goto LABEL_111;
        }
      }
      v66 = 8;
      goto LABEL_108;
    }
    v29 = v21 >> 3;
    v30 = v13;
    if (!v69)
    {
      v31 = v14;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    switch((int)v29)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_74;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        *(_BYTE *)(a1 + 56) |= 2u;
        while (1)
        {
          v38 = *v15;
          v39 = *(_QWORD *)(v3 + v38);
          v40 = v39 + 1;
          if (v39 == -1 || v40 > *(_QWORD *)(v3 + *v6))
            break;
          v41 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v39);
          *(_QWORD *)(v3 + v38) = v40;
          v37 |= (unint64_t)(v41 & 0x7F) << v35;
          if ((v41 & 0x80) == 0)
            goto LABEL_77;
          v35 += 7;
          v26 = v36++ >= 9;
          if (v26)
          {
            LODWORD(v37) = 0;
            goto LABEL_79;
          }
        }
        *(_BYTE *)(v3 + *v16) = 1;
LABEL_77:
        if (*(_BYTE *)(v3 + *v16))
          LODWORD(v37) = 0;
LABEL_79:
        v60 = 48;
        goto LABEL_88;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_74;
        v43 = 0;
        v44 = 0;
        v45 = 0;
        *(_BYTE *)(a1 + 56) |= 4u;
        while (2)
        {
          v46 = *v15;
          v47 = *(_QWORD *)(v3 + v46);
          v48 = v47 + 1;
          if (v47 == -1 || v48 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v16) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v47);
            *(_QWORD *)(v3 + v46) = v48;
            v45 |= (unint64_t)(v49 & 0x7F) << v43;
            if (v49 < 0)
            {
              v43 += 7;
              v26 = v44++ >= 9;
              if (v26)
              {
                v45 = 0;
                goto LABEL_83;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v16))
          v45 = 0;
LABEL_83:
        *(_BYTE *)(a1 + 52) = v45 != 0;
        goto LABEL_95;
      case 3:
        if (!v30)
          goto LABEL_74;
        if ((*(_BYTE *)(a1 + 56) & 8) == 0)
        {
          PBReaderReadString();
          v50 = objc_claimAutoreleasedReturnValue();
          v51 = 16;
          goto LABEL_65;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_116;
        v61 = 16 * *(_BYTE *)(a1 + 56);
        goto LABEL_93;
      case 4:
        if (!v30)
          goto LABEL_74;
        if ((*(_BYTE *)(a1 + 56) & 0x10) == 0)
        {
          PBReaderReadString();
          v50 = objc_claimAutoreleasedReturnValue();
          v51 = 24;
LABEL_65:
          v52 = *(void **)(a1 + v51);
          *(_QWORD *)(a1 + v51) = v50;

          --v9;
          goto LABEL_94;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v61 = 8 * *(_BYTE *)(a1 + 56);
LABEL_93:
          v9 += v61 >> 7;
LABEL_94:
          v16 = (int *)MEMORY[0x1E0D82BC8];
LABEL_95:
          if (v9)
            v62 = 1;
          else
            v62 = v13;
          if ((v62 & 1) == 0)
            goto LABEL_99;
          continue;
        }
LABEL_116:
        v63 = 0;
        v16 = (int *)MEMORY[0x1E0D82BC8];
LABEL_110:
        *(_BYTE *)(a1 + 56) |= 8u;
        *(_BYTE *)(a1 + 56) |= 0x10u;
        if ((v63 & 1) != 0)
        {
LABEL_111:
          v3 = *(_BYTE *)(v3 + *v16) == 0;
          if (v13)
            goto LABEL_112;
        }
        else
        {
          v3 = 0;
          if (v13)
          {
LABEL_112:
            v67 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      case 5:
        if ((v8 & 1) != 0)
        {
          v53 = 0;
          v54 = 0;
          v37 = 0;
          *(_BYTE *)(a1 + 56) |= 1u;
          while (1)
          {
            v55 = *v15;
            v56 = *(_QWORD *)(v3 + v55);
            v57 = v56 + 1;
            if (v56 == -1 || v57 > *(_QWORD *)(v3 + *v6))
              break;
            v58 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v56);
            *(_QWORD *)(v3 + v55) = v57;
            v37 |= (unint64_t)(v58 & 0x7F) << v53;
            if ((v58 & 0x80) == 0)
              goto LABEL_85;
            v53 += 7;
            v26 = v54++ >= 9;
            if (v26)
            {
              LODWORD(v37) = 0;
              goto LABEL_87;
            }
          }
          *(_BYTE *)(v3 + *v16) = 1;
LABEL_85:
          if (*(_BYTE *)(v3 + *v16))
            LODWORD(v37) = 0;
LABEL_87:
          v60 = 44;
LABEL_88:
          *(_DWORD *)(a1 + v60) = v37;
        }
        else
        {
LABEL_74:
          v59 = PBReaderSkipValueWithTag();
          v16 = (int *)MEMORY[0x1E0D82BC8];
          if ((v59 & 1) == 0)
          {
LABEL_109:
            v63 = 0;
            goto LABEL_110;
          }
        }
        goto LABEL_95;
      default:
        v42 = PBReaderSkipValueWithTag();
        v16 = (int *)MEMORY[0x1E0D82BC8];
        if (!v42)
          goto LABEL_109;
        goto LABEL_95;
    }
  }
}

void sub_189A87EC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A88A4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORevealedPlaceCardModuleButtonReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORevealedPlaceCardModuleButtonReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORevealedPlaceCardModuleButtonReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORevealedPlaceCardModuleButtonReadAllFrom_initialTag;
  Specified = GEORevealedPlaceCardModuleButtonReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_189A88BD8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORevealedPlaceCardModuleButtonReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORevealedPlaceCardModuleButtonReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A88C38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORevealedPlaceCardModuleButtonIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  _BOOL8 v33;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_52;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_48;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_49;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_52;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_48;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_49;
          }
        case 3u:
          if (v15 == 2)
            goto LABEL_38;
          goto LABEL_52;
        case 4u:
          if (v15 == 2)
            goto LABEL_38;
          goto LABEL_52;
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_52;
          v28 = 0;
          break;
        default:
LABEL_38:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_52:
          v33 = 0;
          goto LABEL_51;
      }
      while (1)
      {
        v29 = *v2;
        v30 = *(_QWORD *)&a1[v29];
        v31 = v30 + 1;
        if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
          break;
        v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
        *(_QWORD *)&a1[v29] = v31;
        if (v32 < 0)
        {
          v22 = v28++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_49;
      }
LABEL_48:
      a1[*v4] = 1;
LABEL_49:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v33 = a1[*v4] == 0;
LABEL_51:
  PBReaderRecallMark();
  return v33;
}

void sub_189A890E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORevealedPlaceCardModuleButtonIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v2 = (*(_BYTE *)(a1 + 56) & 0x38) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v2;
}

void sub_189A89468(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORevealedPlaceCardModuleTypeHoursReadAllFrom(void *a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v18;
  GEORevealedPlaceCardModuleButton *v20;
  _BOOL8 v21;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          if (v11++ >= 9)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        if ((v12 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_27;
          v20 = objc_alloc_init(GEORevealedPlaceCardModuleButton);
          if (!GEORevealedPlaceCardModuleButtonReadAllFrom((uint64_t)v20, v5, a3))
          {

            goto LABEL_27;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "addButtons:", v20, 0, 0);

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_27;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v21 = v5[*v8] == 0;
  }
  else
  {
LABEL_27:
    v21 = 0;
  }
  objc_sync_exit(v5);

  return v21;
}

void sub_189A89EA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORevealedPlaceCardModuleTypeHoursReadFrom(void *a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORevealedPlaceCardModuleTypeHoursReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A89F08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORevealedPlaceCardModuleTypeInfosReadAllFrom(void *a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v18;
  GEORevealedPlaceCardModuleButton *v20;
  _BOOL8 v21;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          if (v11++ >= 9)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        if ((v12 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_27;
          v20 = objc_alloc_init(GEORevealedPlaceCardModuleButton);
          if (!GEORevealedPlaceCardModuleButtonReadAllFrom((uint64_t)v20, v5, a3))
          {

            goto LABEL_27;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "addButtons:", v20, 0, 0);

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_27;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v21 = v5[*v8] == 0;
  }
  else
  {
LABEL_27:
    v21 = 0;
  }
  objc_sync_exit(v5);

  return v21;
}

void sub_189A8A914(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORevealedPlaceCardModuleTypeInfosReadFrom(void *a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORevealedPlaceCardModuleTypeInfosReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A8A974(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORevealedPlaceCardModuleTypePhotosReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  _BOOL8 v25;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 12) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_30;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_32;
            }
          }
          v3[*v6] = 1;
LABEL_30:
          if (v3[*v6])
            v20 = 0;
LABEL_32:
          *(_BYTE *)(a1 + 8) = v20 != 0;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_35;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v25 = v3[*v6] == 0;
  }
  else
  {
LABEL_35:
    v25 = 0;
  }
  objc_sync_exit(v3);

  return v25;
}

void sub_189A8B304(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORevealedPlaceCardModuleTypePhotosReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORevealedPlaceCardModuleTypePhotosReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A8B364(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A8B744(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORevealedPlaceCardModuleTypeShowcaseReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  int *v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  _BOOL4 v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  void *v38;
  GEORevealedPlaceCardModuleButton *v39;
  char v40;
  char v41;
  char v42;
  int v43;
  int v44;
  void *v45;
  BOOL v47;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(_BYTE *)(a1 + 44) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v7;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 & 1 | v11;
        v15 = v14 != 0;
        if ((v14 != 0) | v8 & 1)
          v16 = 0;
        else
          v16 = a3;
        v17 = v16 == 0;
        if (v14)
          v17 = 1;
        v47 = v17;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v7;
        v13 = v10;
LABEL_8:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_58;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_25;
      v21 += 7;
      if (v22++ >= 9)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_25:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_27:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_58:
      if (v15)
      {
        v41 = 1;
        goto LABEL_70;
      }
      if (!v16)
        goto LABEL_71;
      while (1)
      {
        v44 = *v16++;
        v43 = v44;
        if (v44 == 1)
          break;
        if (v43 == 2)
        {
          v42 = 1;
LABEL_64:
          *(_BYTE *)(a1 + 44) |= v42;
        }
        else if (!v43)
        {
          goto LABEL_71;
        }
      }
      v42 = 2;
      goto LABEL_64;
    }
    v31 = v23 >> 3;
    v32 = v15;
    if (!v47)
    {
      v33 = v16;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    if ((_DWORD)v31 == 2)
      break;
    if ((_DWORD)v31 == 1)
    {
      if (!v32)
        goto LABEL_50;
      if ((*(_BYTE *)(a1 + 44) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_69:
          v41 = 0;
          goto LABEL_70;
        }
        v9 += *(unsigned __int8 *)(a1 + 44) << 30 >> 31;
      }
      else
      {
        PBReaderReadString();
        v37 = objc_claimAutoreleasedReturnValue();
        v38 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v37;

        --v9;
      }
    }
    else if (!PBReaderSkipValueWithTag())
    {
      goto LABEL_69;
    }
LABEL_51:
    if (v9)
      v40 = 1;
    else
      v40 = v15;
    if ((v40 & 1) == 0)
      goto LABEL_58;
  }
  if (!v32 || (*(_BYTE *)(a1 + 44) & 1) != 0)
  {
LABEL_50:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_69;
    goto LABEL_51;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_69;
  v39 = objc_alloc_init(GEORevealedPlaceCardModuleButton);
  if (GEORevealedPlaceCardModuleButtonReadAllFrom((uint64_t)v39, (void *)v3, v7 & 1))
  {
    PBReaderRecallMark();
    -[GEORevealedPlaceCardModuleTypeShowcase _addNoFlagsButtons:](a1, v39);

    v19 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_51;
  }

  v41 = 0;
  v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_70:
  *(_BYTE *)(a1 + 44) |= 2u;
  *(_BYTE *)(a1 + 44) |= 1u;
  if ((v41 & 1) != 0)
  {
LABEL_71:
    v3 = *(_BYTE *)(v3 + *v19) == 0;
    if (v15)
      goto LABEL_72;
  }
  else
  {
    v3 = 0;
    if (v15)
    {
LABEL_72:
      v45 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;

    }
  }
  return v3;
}

void sub_189A8BCAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A8C498(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEORevealedPlaceCardModuleTypeShowcaseCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 16);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "readAll:", 1, (_QWORD)v6);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEORevealedPlaceCardModuleTypeShowcaseReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORevealedPlaceCardModuleTypeShowcaseReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORevealedPlaceCardModuleTypeShowcaseReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORevealedPlaceCardModuleTypeShowcaseReadAllFrom_initialTag;
  Specified = GEORevealedPlaceCardModuleTypeShowcaseReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEORevealedPlaceCardModuleTypeShowcaseCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_189A8C720(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORevealedPlaceCardModuleTypeShowcaseReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORevealedPlaceCardModuleTypeShowcaseReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A8C780(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189A8C9A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEORevealedPlaceCardModuleTypeShowcaseIsDirty(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  if ((*(_BYTE *)(a1 + 44) & 7) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 44) & 1) == 0)
    return 0;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v3 = *(id *)(a1 + 16);
  v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v4 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v3);
        if (GEORevealedPlaceCardModuleButtonIsDirty(*(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * i)))
        {
          v2 = 1;
          goto LABEL_15;
        }
      }
      v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_15:

  return v2;
}

os_unfair_lock_s *GEORevealedPlaceCardModuleTypeShowcaseIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORevealedPlaceCardModuleTypeShowcaseIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 10);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189A8CE68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORevealedPlaceCardModuleTypeTitleReadAllFrom(uint64_t a1, void *a2)
{
  char *v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  _BOOL8 v32;

  v2 = a2;
  objc_sync_enter(v2);
  if (v2)
  {
    v3 = (int *)MEMORY[0x1E0D82BF0];
    v4 = (int *)MEMORY[0x1E0D82BD8];
    v5 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v2[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v2[*MEMORY[0x1E0D82BD8]])
    {
      v6 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v2[*v5])
          break;
        v7 = 0;
        v8 = 0;
        v9 = 0;
        while (1)
        {
          v10 = *v3;
          v11 = *(_QWORD *)&v2[v10];
          v12 = v11 + 1;
          if (v11 == -1 || v12 > *(_QWORD *)&v2[*v4])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v11);
          *(_QWORD *)&v2[v10] = v12;
          v9 |= (unint64_t)(v13 & 0x7F) << v7;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v7 += 7;
          v14 = v8++ >= 9;
          if (v14)
          {
            v9 = 0;
            v15 = v2[*v5];
            goto LABEL_15;
          }
        }
        v2[*v5] = 1;
LABEL_13:
        v15 = v2[*v5];
        if (v2[*v5])
          v9 = 0;
LABEL_15:
        v16 = v9 & 7;
        if (v15 || v16 == 4)
          break;
        if ((v9 >> 3) == 1)
        {
          if (v16 == 2)
          {
            if (!PBReaderPlaceMark())
              goto LABEL_47;
            while (*(_QWORD *)&v2[*v3] < *(_QWORD *)&v2[*v4] && !v2[*v5])
            {
              v18 = 0;
              v19 = 0;
              v20 = 0;
              while (1)
              {
                v21 = *v3;
                v22 = *(_QWORD *)&v2[v21];
                v23 = v22 + 1;
                if (v22 == -1 || v23 > *(_QWORD *)&v2[*v4])
                  break;
                v24 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v22);
                *(_QWORD *)&v2[v21] = v23;
                v20 |= (unint64_t)(v24 & 0x7F) << v18;
                if (v24 < 0)
                {
                  v18 += 7;
                  v14 = v19++ >= 9;
                  if (!v14)
                    continue;
                }
                goto LABEL_32;
              }
              v2[*v5] = 1;
LABEL_32:
              PBRepeatedInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            while (1)
            {
              v28 = *v3;
              v29 = *(_QWORD *)&v2[v28];
              v30 = v29 + 1;
              if (v29 == -1 || v30 > *(_QWORD *)&v2[*v4])
                break;
              v31 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v29);
              *(_QWORD *)&v2[v28] = v30;
              v27 |= (unint64_t)(v31 & 0x7F) << v25;
              if (v31 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_44;
            }
            v2[*v5] = 1;
LABEL_44:
            PBRepeatedInt32Add();
          }
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_47;
        }
      }
      while (*(_QWORD *)&v2[*v3] < *(_QWORD *)&v2[*v4]);
    }
    v32 = v2[*v5] == 0;
  }
  else
  {
LABEL_47:
    v32 = 0;
  }
  objc_sync_exit(v2);

  return v32;
}

void sub_189A8DA84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORevealedPlaceCardModuleTypeTitleReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORevealedPlaceCardModuleTypeTitleReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A8DAE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORevealedPlaceCardModuleTypeUnifiedActionRowReadAllFrom(void *a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v18;
  GEORevealedPlaceCardModuleButton *v20;
  _BOOL8 v21;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          if (v11++ >= 9)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        if ((v12 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_27;
          v20 = objc_alloc_init(GEORevealedPlaceCardModuleButton);
          if (!GEORevealedPlaceCardModuleButtonReadAllFrom((uint64_t)v20, v5, a3))
          {

            goto LABEL_27;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "addButtons:", v20, 0, 0);

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_27;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v21 = v5[*v8] == 0;
  }
  else
  {
LABEL_27:
    v21 = 0;
  }
  objc_sync_exit(v5);

  return v21;
}

void sub_189A8E290(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORevealedPlaceCardModuleTypeUnifiedActionRowReadFrom(void *a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORevealedPlaceCardModuleTypeUnifiedActionRowReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A8E2F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORoutingSettingsCyclingPrefsReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  _BOOL8 v51;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 16) |= 8u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEORoutingSettingsCyclingPrefs__avoidStairs;
                goto LABEL_62;
              }
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                break;
              v18 += 7;
              v25 = v19++ > 8;
              if (v25)
              {
                v20 = 0;
                v26 = &OBJC_IVAR___GEORoutingSettingsCyclingPrefs__avoidStairs;
                goto LABEL_65;
              }
            }
            v26 = &OBJC_IVAR___GEORoutingSettingsCyclingPrefs__avoidStairs;
            goto LABEL_63;
          case 2u:
            v27 = 0;
            v28 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 16) |= 4u;
            while (2)
            {
              v29 = *v4;
              v30 = *(_QWORD *)&v3[v29];
              v31 = v30 + 1;
              if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEORoutingSettingsCyclingPrefs__avoidHills;
                goto LABEL_62;
              }
              v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
              *(_QWORD *)&v3[v29] = v31;
              v20 |= (unint64_t)(v32 & 0x7F) << v27;
              if (v32 < 0)
              {
                v27 += 7;
                v25 = v28++ > 8;
                if (v25)
                {
                  v20 = 0;
                  v26 = &OBJC_IVAR___GEORoutingSettingsCyclingPrefs__avoidHills;
                  goto LABEL_65;
                }
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEORoutingSettingsCyclingPrefs__avoidHills;
            goto LABEL_63;
          case 3u:
            v33 = 0;
            v34 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 16) |= 2u;
            while (2)
            {
              v35 = *v4;
              v36 = *(_QWORD *)&v3[v35];
              v37 = v36 + 1;
              if (v36 == -1 || v37 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEORoutingSettingsCyclingPrefs__avoidBusyRoads;
                goto LABEL_62;
              }
              v38 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v36);
              *(_QWORD *)&v3[v35] = v37;
              v20 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                v25 = v34++ > 8;
                if (v25)
                {
                  v20 = 0;
                  v26 = &OBJC_IVAR___GEORoutingSettingsCyclingPrefs__avoidBusyRoads;
                  goto LABEL_65;
                }
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEORoutingSettingsCyclingPrefs__avoidBusyRoads;
            goto LABEL_63;
          case 4u:
            v39 = 0;
            v40 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 16) |= 0x10u;
            while (2)
            {
              v41 = *v4;
              v42 = *(_QWORD *)&v3[v41];
              v43 = v42 + 1;
              if (v42 == -1 || v43 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEORoutingSettingsCyclingPrefs__eBike;
                goto LABEL_62;
              }
              v44 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v42);
              *(_QWORD *)&v3[v41] = v43;
              v20 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                v25 = v40++ > 8;
                if (v25)
                {
                  v20 = 0;
                  v26 = &OBJC_IVAR___GEORoutingSettingsCyclingPrefs__eBike;
                  goto LABEL_65;
                }
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEORoutingSettingsCyclingPrefs__eBike;
            goto LABEL_63;
          case 5u:
            v45 = 0;
            v46 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 16) |= 1u;
            break;
          default:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_74;
            continue;
        }
        while (1)
        {
          v47 = *v4;
          v48 = *(_QWORD *)&v3[v47];
          v49 = v48 + 1;
          if (v48 == -1 || v49 > *(_QWORD *)&v3[*v5])
            break;
          v50 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v48);
          *(_QWORD *)&v3[v47] = v49;
          v20 |= (unint64_t)(v50 & 0x7F) << v45;
          if ((v50 & 0x80) == 0)
          {
            v26 = &OBJC_IVAR___GEORoutingSettingsCyclingPrefs__autoRecordWorkout;
            goto LABEL_63;
          }
          v45 += 7;
          v25 = v46++ > 8;
          if (v25)
          {
            v20 = 0;
            v26 = &OBJC_IVAR___GEORoutingSettingsCyclingPrefs__autoRecordWorkout;
            goto LABEL_65;
          }
        }
        v26 = &OBJC_IVAR___GEORoutingSettingsCyclingPrefs__autoRecordWorkout;
LABEL_62:
        v3[*v6] = 1;
LABEL_63:
        if (v3[*v6])
          v20 = 0;
LABEL_65:
        *(_BYTE *)(a1 + *v26) = v20 != 0;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v51 = v3[*v6] == 0;
  }
  else
  {
LABEL_74:
    v51 = 0;
  }
  objc_sync_exit(v3);

  return v51;
}

void sub_189A8F394(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORoutingSettingsCyclingPrefsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORoutingSettingsCyclingPrefsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A8F3F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORoutingSettingsDrivingPrefsReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  _BOOL8 v51;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 16) |= 1u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEORoutingSettingsDrivingPrefs__avoidHighways;
                goto LABEL_62;
              }
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                break;
              v18 += 7;
              v25 = v19++ > 8;
              if (v25)
              {
                v20 = 0;
                v26 = &OBJC_IVAR___GEORoutingSettingsDrivingPrefs__avoidHighways;
                goto LABEL_65;
              }
            }
            v26 = &OBJC_IVAR___GEORoutingSettingsDrivingPrefs__avoidHighways;
            goto LABEL_63;
          case 2u:
            v27 = 0;
            v28 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 16) |= 2u;
            while (2)
            {
              v29 = *v4;
              v30 = *(_QWORD *)&v3[v29];
              v31 = v30 + 1;
              if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEORoutingSettingsDrivingPrefs__avoidTolls;
                goto LABEL_62;
              }
              v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
              *(_QWORD *)&v3[v29] = v31;
              v20 |= (unint64_t)(v32 & 0x7F) << v27;
              if (v32 < 0)
              {
                v27 += 7;
                v25 = v28++ > 8;
                if (v25)
                {
                  v20 = 0;
                  v26 = &OBJC_IVAR___GEORoutingSettingsDrivingPrefs__avoidTolls;
                  goto LABEL_65;
                }
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEORoutingSettingsDrivingPrefs__avoidTolls;
            goto LABEL_63;
          case 3u:
            v33 = 0;
            v34 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 16) |= 4u;
            while (2)
            {
              v35 = *v4;
              v36 = *(_QWORD *)&v3[v35];
              v37 = v36 + 1;
              if (v36 == -1 || v37 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEORoutingSettingsDrivingPrefs__speedLimitEnabled;
                goto LABEL_62;
              }
              v38 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v36);
              *(_QWORD *)&v3[v35] = v37;
              v20 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                v25 = v34++ > 8;
                if (v25)
                {
                  v20 = 0;
                  v26 = &OBJC_IVAR___GEORoutingSettingsDrivingPrefs__speedLimitEnabled;
                  goto LABEL_65;
                }
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEORoutingSettingsDrivingPrefs__speedLimitEnabled;
            goto LABEL_63;
          case 4u:
            v39 = 0;
            v40 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 16) |= 8u;
            while (2)
            {
              v41 = *v4;
              v42 = *(_QWORD *)&v3[v41];
              v43 = v42 + 1;
              if (v42 == -1 || v43 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEORoutingSettingsDrivingPrefs__trafficEnabled;
                goto LABEL_62;
              }
              v44 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v42);
              *(_QWORD *)&v3[v41] = v43;
              v20 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                v25 = v40++ > 8;
                if (v25)
                {
                  v20 = 0;
                  v26 = &OBJC_IVAR___GEORoutingSettingsDrivingPrefs__trafficEnabled;
                  goto LABEL_65;
                }
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEORoutingSettingsDrivingPrefs__trafficEnabled;
            goto LABEL_63;
          case 5u:
            v45 = 0;
            v46 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 16) |= 0x10u;
            break;
          default:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_74;
            continue;
        }
        while (1)
        {
          v47 = *v4;
          v48 = *(_QWORD *)&v3[v47];
          v49 = v48 + 1;
          if (v48 == -1 || v49 > *(_QWORD *)&v3[*v5])
            break;
          v50 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v48);
          *(_QWORD *)&v3[v47] = v49;
          v20 |= (unint64_t)(v50 & 0x7F) << v45;
          if ((v50 & 0x80) == 0)
          {
            v26 = &OBJC_IVAR___GEORoutingSettingsDrivingPrefs__voiceNavEnabled;
            goto LABEL_63;
          }
          v45 += 7;
          v25 = v46++ > 8;
          if (v25)
          {
            v20 = 0;
            v26 = &OBJC_IVAR___GEORoutingSettingsDrivingPrefs__voiceNavEnabled;
            goto LABEL_65;
          }
        }
        v26 = &OBJC_IVAR___GEORoutingSettingsDrivingPrefs__voiceNavEnabled;
LABEL_62:
        v3[*v6] = 1;
LABEL_63:
        if (v3[*v6])
          v20 = 0;
LABEL_65:
        *(_BYTE *)(a1 + *v26) = v20 != 0;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v51 = v3[*v6] == 0;
  }
  else
  {
LABEL_74:
    v51 = 0;
  }
  objc_sync_exit(v3);

  return v51;
}

void sub_189A90620(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORoutingSettingsDrivingPrefsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORoutingSettingsDrivingPrefsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A90680(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORoutingSettingsVirtualGarageSetttingsReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  _BOOL8 v33;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v27 = 0;
          v28 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 16) |= 2u;
          while (1)
          {
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              break;
            v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
            *(_QWORD *)&v3[v29] = v31;
            v20 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0)
            {
              v26 = &OBJC_IVAR___GEORoutingSettingsVirtualGarageSetttings__licensePlateCount;
              goto LABEL_40;
            }
            v27 += 7;
            v25 = v28++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              v26 = &OBJC_IVAR___GEORoutingSettingsVirtualGarageSetttings__licensePlateCount;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEORoutingSettingsVirtualGarageSetttings__licensePlateCount;
LABEL_39:
          v3[*v6] = 1;
        }
        else
        {
          if ((v10 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_48;
            continue;
          }
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 16) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
            {
              v26 = &OBJC_IVAR___GEORoutingSettingsVirtualGarageSetttings__electronicVehicleCount;
              goto LABEL_39;
            }
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              break;
            v18 += 7;
            v25 = v19++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              v26 = &OBJC_IVAR___GEORoutingSettingsVirtualGarageSetttings__electronicVehicleCount;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEORoutingSettingsVirtualGarageSetttings__electronicVehicleCount;
        }
LABEL_40:
        if (v3[*v6])
          LODWORD(v20) = 0;
LABEL_42:
        *(_DWORD *)(a1 + *v26) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v33 = v3[*v6] == 0;
  }
  else
  {
LABEL_48:
    v33 = 0;
  }
  objc_sync_exit(v3);

  return v33;
}

void sub_189A91370(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORoutingSettingsVirtualGarageSetttingsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORoutingSettingsVirtualGarageSetttingsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A913D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSearchResultReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  _BOOL8 v52;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 8u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
                break;
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                goto LABEL_58;
              v18 += 7;
              v15 = v19++ >= 9;
              if (v15)
              {
                LODWORD(v20) = 0;
                goto LABEL_60;
              }
            }
            v3[*v6] = 1;
LABEL_58:
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_60:
            v51 = 24;
            goto LABEL_73;
          case 2u:
            v25 = 0;
            v26 = 0;
            v27 = 0;
            *(_BYTE *)(a1 + 32) |= 1u;
            while (2)
            {
              v28 = *v4;
              v29 = *(_QWORD *)&v3[v28];
              v30 = v29 + 1;
              if (v29 == -1 || v30 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v31 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v29);
                *(_QWORD *)&v3[v28] = v30;
                v27 |= (unint64_t)(v31 & 0x7F) << v25;
                if (v31 < 0)
                {
                  v25 += 7;
                  v15 = v26++ >= 9;
                  if (v15)
                  {
                    v27 = 0;
                    goto LABEL_64;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v27 = 0;
LABEL_64:
            *(_QWORD *)(a1 + 8) = v27;
            continue;
          case 3u:
            v32 = 0;
            v33 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 2u;
            while (2)
            {
              v34 = *v4;
              v35 = *(_QWORD *)&v3[v34];
              v36 = v35 + 1;
              if (v35 == -1 || v36 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v37 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v35);
                *(_QWORD *)&v3[v34] = v36;
                v20 |= (unint64_t)(v37 & 0x7F) << v32;
                if (v37 < 0)
                {
                  v32 += 7;
                  v15 = v33++ >= 9;
                  if (v15)
                  {
                    LODWORD(v20) = 0;
                    goto LABEL_68;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_68:
            v51 = 16;
            goto LABEL_73;
          case 4u:
            v38 = 0;
            v39 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 4u;
            while (2)
            {
              v40 = *v4;
              v41 = *(_QWORD *)&v3[v40];
              v42 = v41 + 1;
              if (v41 == -1 || v42 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v43 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v41);
                *(_QWORD *)&v3[v40] = v42;
                v20 |= (unint64_t)(v43 & 0x7F) << v38;
                if (v43 < 0)
                {
                  v38 += 7;
                  v15 = v39++ >= 9;
                  if (v15)
                  {
                    LODWORD(v20) = 0;
                    goto LABEL_72;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_72:
            v51 = 20;
LABEL_73:
            *(_DWORD *)(a1 + v51) = v20;
            continue;
          case 5u:
            v44 = 0;
            v45 = 0;
            v46 = 0;
            *(_BYTE *)(a1 + 32) |= 0x10u;
            break;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_80;
            continue;
        }
        while (1)
        {
          v47 = *v4;
          v48 = *(_QWORD *)&v3[v47];
          v49 = v48 + 1;
          if (v48 == -1 || v49 > *(_QWORD *)&v3[*v5])
            break;
          v50 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v48);
          *(_QWORD *)&v3[v47] = v49;
          v46 |= (unint64_t)(v50 & 0x7F) << v44;
          if ((v50 & 0x80) == 0)
            goto LABEL_75;
          v44 += 7;
          v15 = v45++ >= 9;
          if (v15)
          {
            v46 = 0;
            goto LABEL_77;
          }
        }
        v3[*v6] = 1;
LABEL_75:
        if (v3[*v6])
          v46 = 0;
LABEL_77:
        *(_BYTE *)(a1 + 28) = v46 != 0;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v52 = v3[*v6] == 0;
  }
  else
  {
LABEL_80:
    v52 = 0;
  }
  objc_sync_exit(v3);

  return v52;
}

void sub_189A924DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSearchResultReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOSearchResultReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A9253C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOStopAddedDetailsReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  _BOOL8 v25;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 12) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_30;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_32;
            }
          }
          v3[*v6] = 1;
LABEL_30:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_32:
          *(_DWORD *)(a1 + 8) = v20;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_35;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v25 = v3[*v6] == 0;
  }
  else
  {
LABEL_35:
    v25 = 0;
  }
  objc_sync_exit(v3);

  return v25;
}

void sub_189A931C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOStopAddedDetailsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOStopAddedDetailsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A93224(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTargetLayoutReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  _BOOL8 v40;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          v28 = 0;
          v29 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 2u;
          while (1)
          {
            v30 = *v4;
            v31 = *(_QWORD *)&v3[v30];
            v32 = v31 + 1;
            if (v31 == -1 || v32 > *(_QWORD *)&v3[*v5])
              break;
            v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
            *(_QWORD *)&v3[v30] = v32;
            v21 |= (unint64_t)(v33 & 0x7F) << v28;
            if ((v33 & 0x80) == 0)
            {
              v27 = &OBJC_IVAR___GEOTargetLayout__layoutStyle;
              goto LABEL_49;
            }
            v28 += 7;
            v26 = v29++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEOTargetLayout__layoutStyle;
              goto LABEL_51;
            }
          }
          v27 = &OBJC_IVAR___GEOTargetLayout__layoutStyle;
LABEL_48:
          v3[*v6] = 1;
        }
        else if ((_DWORD)v18 == 2)
        {
          v34 = 0;
          v35 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v36 = *v4;
            v37 = *(_QWORD *)&v3[v36];
            v38 = v37 + 1;
            if (v37 == -1 || v38 > *(_QWORD *)&v3[*v5])
            {
              v27 = &OBJC_IVAR___GEOTargetLayout__layoutInfo;
              goto LABEL_48;
            }
            v39 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v37);
            *(_QWORD *)&v3[v36] = v38;
            v21 |= (unint64_t)(v39 & 0x7F) << v34;
            if ((v39 & 0x80) == 0)
              break;
            v34 += 7;
            v26 = v35++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEOTargetLayout__layoutInfo;
              goto LABEL_51;
            }
          }
          v27 = &OBJC_IVAR___GEOTargetLayout__layoutInfo;
        }
        else
        {
          if ((_DWORD)v18 != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_58;
            continue;
          }
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 4u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
            {
              v27 = &OBJC_IVAR___GEOTargetLayout__uiTarget;
              goto LABEL_48;
            }
            v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              break;
            v19 += 7;
            v26 = v20++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEOTargetLayout__uiTarget;
              goto LABEL_51;
            }
          }
          v27 = &OBJC_IVAR___GEOTargetLayout__uiTarget;
        }
LABEL_49:
        if (v3[*v6])
          LODWORD(v21) = 0;
LABEL_51:
        *(_DWORD *)(a1 + *v27) = v21;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v40 = v3[*v6] == 0;
  }
  else
  {
LABEL_58:
    v40 = 0;
  }
  objc_sync_exit(v3);

  return v40;
}

void sub_189A9E0F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTargetLayoutReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTargetLayoutReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189A9E154(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTelemetricEntityReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  _BOOL8 v35;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          PBReaderReadString();
          v26 = objc_claimAutoreleasedReturnValue();
          v27 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v26;

        }
        else if ((_DWORD)v18 == 2)
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v31 = *v4;
            v32 = *(_QWORD *)&v3[v31];
            v33 = v32 + 1;
            if (v32 == -1 || v33 > *(_QWORD *)&v3[*v5])
              break;
            v34 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v32);
            *(_QWORD *)&v3[v31] = v33;
            v30 |= (unint64_t)(v34 & 0x7F) << v28;
            if ((v34 & 0x80) == 0)
              goto LABEL_44;
            v28 += 7;
            v15 = v29++ >= 9;
            if (v15)
            {
              v30 = 0;
              goto LABEL_46;
            }
          }
          v3[*v6] = 1;
LABEL_44:
          if (v3[*v6])
            v30 = 0;
LABEL_46:
          *(_QWORD *)(a1 + 16) = v30;
        }
        else if ((_DWORD)v18 == 1)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
              break;
            v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              goto LABEL_40;
            v19 += 7;
            v15 = v20++ >= 9;
            if (v15)
            {
              LODWORD(v21) = 0;
              goto LABEL_42;
            }
          }
          v3[*v6] = 1;
LABEL_40:
          if (v3[*v6])
            LODWORD(v21) = 0;
LABEL_42:
          *(_DWORD *)(a1 + 24) = v21;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_49;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v35 = v3[*v6] == 0;
  }
  else
  {
LABEL_49:
    v35 = 0;
  }
  objc_sync_exit(v3);

  return v35;
}

void sub_189AA2F94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTelemetricEntityReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTelemetricEntityReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189AA2FF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTileSetInfoReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  _BOOL8 v45;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 2u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEOTileSetInfo__style;
                goto LABEL_54;
              }
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                break;
              v18 += 7;
              v25 = v19++ > 8;
              if (v25)
              {
                LODWORD(v20) = 0;
                v26 = &OBJC_IVAR___GEOTileSetInfo__style;
                goto LABEL_57;
              }
            }
            v26 = &OBJC_IVAR___GEOTileSetInfo__style;
            goto LABEL_55;
          case 2u:
            v27 = 0;
            v28 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (2)
            {
              v29 = *v4;
              v30 = *(_QWORD *)&v3[v29];
              v31 = v30 + 1;
              if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEOTileSetInfo__count;
                goto LABEL_54;
              }
              v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
              *(_QWORD *)&v3[v29] = v31;
              v20 |= (unint64_t)(v32 & 0x7F) << v27;
              if (v32 < 0)
              {
                v27 += 7;
                v25 = v28++ > 8;
                if (v25)
                {
                  LODWORD(v20) = 0;
                  v26 = &OBJC_IVAR___GEOTileSetInfo__count;
                  goto LABEL_57;
                }
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEOTileSetInfo__count;
            goto LABEL_55;
          case 3u:
            v33 = 0;
            v34 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 8u;
            while (2)
            {
              v35 = *v4;
              v36 = *(_QWORD *)&v3[v35];
              v37 = v36 + 1;
              if (v36 == -1 || v37 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEOTileSetInfo__zoom;
                goto LABEL_54;
              }
              v38 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v36);
              *(_QWORD *)&v3[v35] = v37;
              v20 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                v25 = v34++ > 8;
                if (v25)
                {
                  LODWORD(v20) = 0;
                  v26 = &OBJC_IVAR___GEOTileSetInfo__zoom;
                  goto LABEL_57;
                }
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEOTileSetInfo__zoom;
            goto LABEL_55;
          case 4u:
            v39 = 0;
            v40 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 24) |= 4u;
            break;
          default:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_65;
            continue;
        }
        while (1)
        {
          v41 = *v4;
          v42 = *(_QWORD *)&v3[v41];
          v43 = v42 + 1;
          if (v42 == -1 || v43 > *(_QWORD *)&v3[*v5])
            break;
          v44 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v42);
          *(_QWORD *)&v3[v41] = v43;
          v20 |= (unint64_t)(v44 & 0x7F) << v39;
          if ((v44 & 0x80) == 0)
          {
            v26 = &OBJC_IVAR___GEOTileSetInfo__uncertainty;
            goto LABEL_55;
          }
          v39 += 7;
          v25 = v40++ > 8;
          if (v25)
          {
            LODWORD(v20) = 0;
            v26 = &OBJC_IVAR___GEOTileSetInfo__uncertainty;
            goto LABEL_57;
          }
        }
        v26 = &OBJC_IVAR___GEOTileSetInfo__uncertainty;
LABEL_54:
        v3[*v6] = 1;
LABEL_55:
        if (v3[*v6])
          LODWORD(v20) = 0;
LABEL_57:
        *(_DWORD *)(a1 + *v26) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v45 = v3[*v6] == 0;
  }
  else
  {
LABEL_65:
    v45 = 0;
  }
  objc_sync_exit(v3);

  return v45;
}

void sub_189AA6290(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTileSetInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTileSetInfoReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189AA62F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTimeToLeaveMapLaunchReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          *(_BYTE *)(a1 + 16) |= 1u;
          v18 = *v4;
          v19 = *(_QWORD *)&v3[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)&v3[*v5])
          {
            v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v19);
            *(_QWORD *)&v3[v18] = v19 + 8;
          }
          else
          {
            v3[*v6] = 1;
            v20 = 0;
          }
          *(_QWORD *)(a1 + 8) = v20;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_29;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v21 = v3[*v6] == 0;
  }
  else
  {
LABEL_29:
    v21 = 0;
  }
  objc_sync_exit(v3);

  return v21;
}

void sub_189AA6CB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTimeToLeaveMapLaunchReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTimeToLeaveMapLaunchReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189AA6D14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTouristInfoReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          *(_BYTE *)(a1 + 20) |= 1u;
          v25 = *v4;
          v26 = *(_QWORD *)&v3[v25];
          if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)&v3[*v5])
          {
            v27 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v26);
            *(_QWORD *)&v3[v25] = v26 + 8;
          }
          else
          {
            v3[*v6] = 1;
            v27 = 0;
          }
          *(_QWORD *)(a1 + 8) = v27;
        }
        else if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 2u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_34;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              v20 = 0;
              goto LABEL_36;
            }
          }
          v3[*v6] = 1;
LABEL_34:
          if (v3[*v6])
            v20 = 0;
LABEL_36:
          *(_BYTE *)(a1 + 16) = v20 != 0;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_41;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v28 = v3[*v6] == 0;
  }
  else
  {
LABEL_41:
    v28 = 0;
  }
  objc_sync_exit(v3);

  return v28;
}

void sub_189AA7628(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTouristInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTouristInfoReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189AA7688(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTrailingEntityActionDetailsReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  void *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          PBReaderReadString();
          v25 = objc_claimAutoreleasedReturnValue();
          v26 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v25;

        }
        else if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_32;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_34:
          *(_DWORD *)(a1 + 16) = v20;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_189AA83B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTrailingEntityActionDetailsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTrailingEntityActionDetailsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189AA8410(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFARFailureTypesReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  _BOOL8 v33;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v27 = 0;
          v28 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 12) |= 2u;
          while (1)
          {
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              break;
            v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
            *(_QWORD *)&v3[v29] = v31;
            v20 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0)
            {
              v26 = &OBJC_IVAR___GEOVLFARFailureTypes__arWalkingUndulationFailure;
              goto LABEL_40;
            }
            v27 += 7;
            v25 = v28++ > 8;
            if (v25)
            {
              v20 = 0;
              v26 = &OBJC_IVAR___GEOVLFARFailureTypes__arWalkingUndulationFailure;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEOVLFARFailureTypes__arWalkingUndulationFailure;
LABEL_39:
          v3[*v6] = 1;
        }
        else
        {
          if ((v10 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_48;
            continue;
          }
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 12) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
            {
              v26 = &OBJC_IVAR___GEOVLFARFailureTypes__arWalkingNoLabels;
              goto LABEL_39;
            }
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              break;
            v18 += 7;
            v25 = v19++ > 8;
            if (v25)
            {
              v20 = 0;
              v26 = &OBJC_IVAR___GEOVLFARFailureTypes__arWalkingNoLabels;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEOVLFARFailureTypes__arWalkingNoLabels;
        }
LABEL_40:
        if (v3[*v6])
          v20 = 0;
LABEL_42:
        *(_BYTE *)(a1 + *v26) = v20 != 0;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v33 = v3[*v6] == 0;
  }
  else
  {
LABEL_48:
    v33 = 0;
  }
  objc_sync_exit(v3);

  return v33;
}

void sub_189AA8E0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFARFailureTypesReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOVLFARFailureTypesReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189AA8E6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFARStateReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  _BOOL8 v40;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          v28 = 0;
          v29 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v30 = *v4;
            v31 = *(_QWORD *)&v3[v30];
            v32 = v31 + 1;
            if (v31 == -1 || v32 > *(_QWORD *)&v3[*v5])
              break;
            v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
            *(_QWORD *)&v3[v30] = v32;
            v21 |= (unint64_t)(v33 & 0x7F) << v28;
            if ((v33 & 0x80) == 0)
            {
              v27 = &OBJC_IVAR___GEOVLFARState__geoTrackingStateReason;
              goto LABEL_49;
            }
            v28 += 7;
            v26 = v29++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEOVLFARState__geoTrackingStateReason;
              goto LABEL_51;
            }
          }
          v27 = &OBJC_IVAR___GEOVLFARState__geoTrackingStateReason;
LABEL_48:
          v3[*v6] = 1;
        }
        else if ((_DWORD)v18 == 2)
        {
          v34 = 0;
          v35 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 2u;
          while (1)
          {
            v36 = *v4;
            v37 = *(_QWORD *)&v3[v36];
            v38 = v37 + 1;
            if (v37 == -1 || v38 > *(_QWORD *)&v3[*v5])
            {
              v27 = &OBJC_IVAR___GEOVLFARState__geoTrackingState;
              goto LABEL_48;
            }
            v39 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v37);
            *(_QWORD *)&v3[v36] = v38;
            v21 |= (unint64_t)(v39 & 0x7F) << v34;
            if ((v39 & 0x80) == 0)
              break;
            v34 += 7;
            v26 = v35++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEOVLFARState__geoTrackingState;
              goto LABEL_51;
            }
          }
          v27 = &OBJC_IVAR___GEOVLFARState__geoTrackingState;
        }
        else
        {
          if ((_DWORD)v18 != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_58;
            continue;
          }
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 4u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
            {
              v27 = &OBJC_IVAR___GEOVLFARState__relativeTimestampMs;
              goto LABEL_48;
            }
            v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              break;
            v19 += 7;
            v26 = v20++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEOVLFARState__relativeTimestampMs;
              goto LABEL_51;
            }
          }
          v27 = &OBJC_IVAR___GEOVLFARState__relativeTimestampMs;
        }
LABEL_49:
        if (v3[*v6])
          LODWORD(v21) = 0;
LABEL_51:
        *(_DWORD *)(a1 + *v27) = v21;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v40 = v3[*v6] == 0;
  }
  else
  {
LABEL_58:
    v40 = 0;
  }
  objc_sync_exit(v3);

  return v40;
}

void sub_189AA9F5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFARStateReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOVLFARStateReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189AA9FBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFCorrectionReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  _BOOL8 v40;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          v28 = 0;
          v29 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v30 = *v4;
            v31 = *(_QWORD *)&v3[v30];
            v32 = v31 + 1;
            if (v31 == -1 || v32 > *(_QWORD *)&v3[*v5])
              break;
            v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
            *(_QWORD *)&v3[v30] = v32;
            v21 |= (unint64_t)(v33 & 0x7F) << v28;
            if ((v33 & 0x80) == 0)
            {
              v27 = &OBJC_IVAR___GEOVLFCorrection__altitudeCorrectionMagnitude;
              goto LABEL_49;
            }
            v28 += 7;
            v26 = v29++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEOVLFCorrection__altitudeCorrectionMagnitude;
              goto LABEL_51;
            }
          }
          v27 = &OBJC_IVAR___GEOVLFCorrection__altitudeCorrectionMagnitude;
LABEL_48:
          v3[*v6] = 1;
        }
        else if ((_DWORD)v18 == 2)
        {
          v34 = 0;
          v35 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 2u;
          while (1)
          {
            v36 = *v4;
            v37 = *(_QWORD *)&v3[v36];
            v38 = v37 + 1;
            if (v37 == -1 || v38 > *(_QWORD *)&v3[*v5])
            {
              v27 = &OBJC_IVAR___GEOVLFCorrection__headingCorrectionMagnitude;
              goto LABEL_48;
            }
            v39 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v37);
            *(_QWORD *)&v3[v36] = v38;
            v21 |= (unint64_t)(v39 & 0x7F) << v34;
            if ((v39 & 0x80) == 0)
              break;
            v34 += 7;
            v26 = v35++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEOVLFCorrection__headingCorrectionMagnitude;
              goto LABEL_51;
            }
          }
          v27 = &OBJC_IVAR___GEOVLFCorrection__headingCorrectionMagnitude;
        }
        else
        {
          if ((_DWORD)v18 != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_58;
            continue;
          }
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 4u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
            {
              v27 = &OBJC_IVAR___GEOVLFCorrection__locationCorrectionMagnitude;
              goto LABEL_48;
            }
            v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              break;
            v19 += 7;
            v26 = v20++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEOVLFCorrection__locationCorrectionMagnitude;
              goto LABEL_51;
            }
          }
          v27 = &OBJC_IVAR___GEOVLFCorrection__locationCorrectionMagnitude;
        }
LABEL_49:
        if (v3[*v6])
          LODWORD(v21) = 0;
LABEL_51:
        *(_DWORD *)(a1 + *v27) = v21;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v40 = v3[*v6] == 0;
  }
  else
  {
LABEL_58:
    v40 = 0;
  }
  objc_sync_exit(v3);

  return v40;
}

void sub_189AAAC8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFCorrectionReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOVLFCorrectionReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189AAACEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AAB364(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOVLFCrowdsourcingDetailsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  GEOVLFFrameDetails *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int *v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  char v94;
  int v95;
  __int16 v96;
  void *v97;
  int v99;
  char v100;
  char v101;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 208));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 204);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 200));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (HIBYTE(*(unsigned __int16 *)(a1 + 216)) & 1)
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 216)), (uint16x4_t)0xFFF6FFF5FFF7FFF9), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 216) >> 6) & 1)+ ((*(_WORD *)(a1 + 216) >> 5) & 1)+ ((*(_WORD *)(a1 + 216) >> 4) & 1));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 | (v11 > 5);
        if (((v14 | v8) & 1) != 0)
          v15 = 0;
        else
          v15 = a3;
        LODWORD(v16) = v14;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_187;
        v100 = (v7 != 0) | v14;
        v101 = (v15 == 0) | v14;
        v19 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v18))
      goto LABEL_187;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *v18;
        v29 = *(unsigned __int8 *)(v3 + v28);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *v18;
    v29 = *(unsigned __int8 *)(v3 + v28);
    if (*(_BYTE *)(v3 + v28))
      v22 = 0;
LABEL_25:
    v30 = v22 & 7;
    if (v29 || v30 == 4)
    {
LABEL_187:
      if ((v16 & 1) != 0)
      {
        v94 = 1;
        goto LABEL_189;
      }
      if (v15)
      {
        while (1)
        {
          v95 = *v15++;
          v96 = 512;
          switch(v95)
          {
            case 0:
              goto LABEL_202;
            case 1:
              goto LABEL_201;
            case 2:
              v96 = 128;
              goto LABEL_201;
            case 3:
              v96 = 2048;
              goto LABEL_201;
            case 4:
              v96 = 1024;
              goto LABEL_201;
            case 5:
              v96 = 64;
              goto LABEL_201;
            case 9:
              v96 = 32;
              goto LABEL_201;
            case 10:
              v96 = 16;
              goto LABEL_201;
            case 11:
              v96 = 256;
LABEL_201:
              *(_WORD *)(a1 + 216) |= v96;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_202;
    }
    v32 = v22 >> 3;
    v33 = (char)v16;
    if ((v101 & 1) == 0)
    {
      v34 = v15;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    switch((int)v32)
    {
      case 1:
        if (!v33 || (*(_WORD *)(a1 + 216) & 0x200) != 0)
          goto LABEL_149;
        if (v30 != 2)
          goto LABEL_165;
        if (!PBReaderPlaceMark())
          goto LABEL_206;
        while (1)
        {
          v38 = (unint64_t *)(v3 + *v17);
          v39 = *v38;
          v40 = *(_QWORD *)(v3 + *v6);
          if (*v38 >= v40)
            break;
          v41 = (int)*MEMORY[0x1E0D82BC8];
          if (*(_BYTE *)(v3 + v41))
            break;
          if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > v40)
            *(_BYTE *)(v3 + v41) = 1;
          else
            *v38 = v39 + 8;
          PBRepeatedDoubleAdd();
        }
        goto LABEL_148;
      case 2:
        if (!v33 || (*(_WORD *)(a1 + 216) & 0x80) != 0)
          goto LABEL_149;
        if (v30 != 2)
          goto LABEL_165;
        if (!PBReaderPlaceMark())
          goto LABEL_206;
        while (1)
        {
          v43 = (unint64_t *)(v3 + *v17);
          v44 = *v43;
          v45 = *(_QWORD *)(v3 + *v6);
          if (*v43 >= v45)
            break;
          v46 = (int)*MEMORY[0x1E0D82BC8];
          if (*(_BYTE *)(v3 + v46))
            break;
          if (v44 > 0xFFFFFFFFFFFFFFF7 || v44 + 8 > v45)
            *(_BYTE *)(v3 + v46) = 1;
          else
            *v43 = v44 + 8;
          PBRepeatedDoubleAdd();
        }
        goto LABEL_148;
      case 3:
        if (!v33 || (*(_WORD *)(a1 + 216) & 0x800) != 0)
          goto LABEL_149;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_206;
        v99 = (int)v16;
        v16 = objc_alloc_init(GEOVLFSLAMTrack);
        if (!GEOVLFSLAMTrackReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1))
          goto LABEL_207;
        PBReaderRecallMark();
        -[GEOVLFCrowdsourcingDetails _addNoFlagsSlamTracks:](a1, v16);
        goto LABEL_71;
      case 4:
        if (!v33 || (*(_WORD *)(a1 + 216) & 0x400) != 0)
          goto LABEL_149;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_206;
        v99 = (int)v16;
        v16 = objc_alloc_init(GEOVLFFrameDetails);
        if (GEOVLFFrameDetailsReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          -[GEOVLFCrowdsourcingDetails _addNoFlagsFrameDetails:](a1, v16);
LABEL_71:

          LODWORD(v16) = v99;
LABEL_184:
          v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_185:
          if ((v100 & 1) == 0 || *(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_187;
          continue;
        }
LABEL_207:

        v94 = 0;
        LOBYTE(v16) = v99;
LABEL_208:
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_189:
        *(_WORD *)(a1 + 216) |= 0x200u;
        *(_WORD *)(a1 + 216) |= 0x80u;
        *(_WORD *)(a1 + 216) |= 0x800u;
        *(_WORD *)(a1 + 216) |= 0x400u;
        *(_WORD *)(a1 + 216) |= 0x40u;
        *(_WORD *)(a1 + 216) |= 0x20u;
        *(_WORD *)(a1 + 216) |= 0x10u;
        *(_WORD *)(a1 + 216) |= 0x100u;
        if ((v94 & 1) != 0)
        {
LABEL_202:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v16 & 1) != 0)
            goto LABEL_203;
          return v3;
        }
        v3 = 0;
        if ((v16 & 1) == 0)
          return v3;
LABEL_203:
        v97 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

        return v3;
      case 5:
        if (!v33 || (*(_WORD *)(a1 + 216) & 0x40) != 0)
          goto LABEL_149;
        if (v30 != 2)
          goto LABEL_165;
        if (!PBReaderPlaceMark())
          goto LABEL_206;
        while (1)
        {
          v47 = (unint64_t *)(v3 + *v17);
          v48 = *v47;
          v49 = *(_QWORD *)(v3 + *v6);
          if (*v47 >= v49)
            break;
          v50 = (int)*MEMORY[0x1E0D82BC8];
          if (*(_BYTE *)(v3 + v50))
            break;
          if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > v49)
            *(_BYTE *)(v3 + v50) = 1;
          else
            *v47 = v48 + 8;
          PBRepeatedDoubleAdd();
        }
        goto LABEL_148;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_149;
        *(_WORD *)(a1 + 216) |= 1u;
        v51 = *v17;
        v52 = *(_QWORD *)(v3 + v51);
        if (v52 <= 0xFFFFFFFFFFFFFFF7 && v52 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v53 = *(_QWORD *)(*(_QWORD *)(v3 + *v19) + v52);
          *(_QWORD *)(v3 + v51) = v52 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v18) = 1;
          v53 = 0;
        }
        v82 = 168;
        goto LABEL_164;
      case 7:
        if ((v8 & 1) == 0)
          goto LABEL_149;
        *(_WORD *)(a1 + 216) |= 2u;
        v54 = *v17;
        v55 = *(_QWORD *)(v3 + v54);
        if (v55 <= 0xFFFFFFFFFFFFFFF7 && v55 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v53 = *(_QWORD *)(*(_QWORD *)(v3 + *v19) + v55);
          *(_QWORD *)(v3 + v54) = v55 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v18) = 1;
          v53 = 0;
        }
        v82 = 176;
        goto LABEL_164;
      case 8:
        if ((v8 & 1) == 0)
          goto LABEL_149;
        *(_WORD *)(a1 + 216) |= 4u;
        v56 = *v17;
        v57 = *(_QWORD *)(v3 + v56);
        if (v57 <= 0xFFFFFFFFFFFFFFF7 && v57 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v53 = *(_QWORD *)(*(_QWORD *)(v3 + *v19) + v57);
          *(_QWORD *)(v3 + v56) = v57 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v18) = 1;
          v53 = 0;
        }
        v82 = 184;
LABEL_164:
        *(_QWORD *)(a1 + v82) = v53;
        goto LABEL_185;
      case 9:
        if (!v33 || (*(_WORD *)(a1 + 216) & 0x20) != 0)
          goto LABEL_149;
        if (v30 != 2)
        {
LABEL_165:
          v83 = *v17;
          v84 = *(_QWORD *)(v3 + v83);
          if (v84 <= 0xFFFFFFFFFFFFFFF7 && v84 + 8 <= *(_QWORD *)(v3 + *v6))
            *(_QWORD *)(v3 + v83) = v84 + 8;
          else
            *(_BYTE *)(v3 + v28) = 1;
          PBRepeatedDoubleAdd();
          goto LABEL_184;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_206;
        while (1)
        {
          v58 = (unint64_t *)(v3 + *v17);
          v59 = *v58;
          v60 = *(_QWORD *)(v3 + *v6);
          if (*v58 >= v60)
            break;
          v61 = (int)*MEMORY[0x1E0D82BC8];
          if (*(_BYTE *)(v3 + v61))
            break;
          if (v59 > 0xFFFFFFFFFFFFFFF7 || v59 + 8 > v60)
            *(_BYTE *)(v3 + v61) = 1;
          else
            *v58 = v59 + 8;
          PBRepeatedDoubleAdd();
        }
        goto LABEL_148;
      case 10:
        if (!v33 || (*(_WORD *)(a1 + 216) & 0x10) != 0)
          goto LABEL_149;
        if (v30 != 2)
        {
          v85 = *v17;
          v86 = *(_QWORD *)(v3 + v85);
          if (v86 <= 0xFFFFFFFFFFFFFFFBLL && v86 + 4 <= *(_QWORD *)(v3 + *v6))
            *(_QWORD *)(v3 + v85) = v86 + 4;
          else
            *(_BYTE *)(v3 + v28) = 1;
          PBRepeatedFloatAdd();
          goto LABEL_184;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_206;
        while (1)
        {
          v62 = (unint64_t *)(v3 + *v17);
          v63 = *v62;
          v64 = *(_QWORD *)(v3 + *v6);
          if (*v62 >= v64)
            break;
          v65 = (int)*MEMORY[0x1E0D82BC8];
          if (*(_BYTE *)(v3 + v65))
            break;
          if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > v64)
            *(_BYTE *)(v3 + v65) = 1;
          else
            *v62 = v63 + 4;
          PBRepeatedFloatAdd();
        }
        goto LABEL_148;
      case 11:
        if (!v33 || (*(_WORD *)(a1 + 216) & 0x100) != 0)
          goto LABEL_149;
        if (v30 == 2)
        {
          if (!PBReaderPlaceMark())
          {
LABEL_206:
            v94 = 0;
            goto LABEL_208;
          }
          while (1)
          {
            v66 = (int *)MEMORY[0x1E0D82BC8];
            if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
              break;
            v67 = 0;
            v68 = 0;
            v69 = 0;
            while (1)
            {
              v70 = *v17;
              v71 = *(_QWORD *)(v3 + v70);
              v72 = v71 + 1;
              if (v71 == -1 || v72 > *(_QWORD *)(v3 + *v6))
                break;
              v73 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v71);
              *(_QWORD *)(v3 + v70) = v72;
              v69 |= (unint64_t)(v73 & 0x7F) << v67;
              if (v73 < 0)
              {
                v67 += 7;
                v27 = v68++ >= 9;
                if (!v27)
                  continue;
              }
              goto LABEL_131;
            }
            *(_BYTE *)(v3 + *v66) = 1;
LABEL_131:
            PBRepeatedUInt32Add();
          }
LABEL_148:
          PBReaderRecallMark();
        }
        else
        {
          v87 = 0;
          v88 = 0;
          v89 = 0;
          while (1)
          {
            v90 = *v17;
            v91 = *(_QWORD *)(v3 + v90);
            v92 = v91 + 1;
            if (v91 == -1 || v92 > *(_QWORD *)(v3 + *v6))
              break;
            v93 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v91);
            *(_QWORD *)(v3 + v90) = v92;
            v89 |= (unint64_t)(v93 & 0x7F) << v87;
            if (v93 < 0)
            {
              v87 += 7;
              v27 = v88++ >= 9;
              if (!v27)
                continue;
            }
            goto LABEL_181;
          }
          *(_BYTE *)(v3 + *v18) = 1;
LABEL_181:
          PBRepeatedUInt32Add();
        }
        goto LABEL_184;
      case 12:
        if ((v8 & 1) != 0)
        {
          v74 = 0;
          v75 = 0;
          v76 = 0;
          *(_WORD *)(a1 + 216) |= 8u;
          while (1)
          {
            v77 = *v17;
            v78 = *(_QWORD *)(v3 + v77);
            v79 = v78 + 1;
            if (v78 == -1 || v79 > *(_QWORD *)(v3 + *v6))
              break;
            v80 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v78);
            *(_QWORD *)(v3 + v77) = v79;
            v76 |= (unint64_t)(v80 & 0x7F) << v74;
            if ((v80 & 0x80) == 0)
              goto LABEL_152;
            v74 += 7;
            v27 = v75++ >= 9;
            if (v27)
            {
              LODWORD(v76) = 0;
              goto LABEL_154;
            }
          }
          *(_BYTE *)(v3 + *v18) = 1;
LABEL_152:
          if (*(_BYTE *)(v3 + *v18))
            LODWORD(v76) = 0;
LABEL_154:
          *(_DWORD *)(a1 + 212) = v76;
        }
        else
        {
LABEL_149:
          v81 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          if ((v81 & 1) == 0)
          {
LABEL_205:
            v94 = 0;
            goto LABEL_189;
          }
        }
        goto LABEL_185;
      default:
        v42 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (!v42)
          goto LABEL_205;
        goto LABEL_185;
    }
  }
}

void sub_189AAC3DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AAC724(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AACA58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AACD8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AAD230(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AAD578(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AAD8C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AAED04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOVLFCrowdsourcingDetailsCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v2 = *(id *)(a1 + 192);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v17;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
    }
    while (v4);
  }

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v7 = *(id *)(a1 + 160);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v13;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v11++), "readAll:", 1, (_QWORD)v12);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
    }
    while (v9);
  }

}

unint64_t GEOVLFCrowdsourcingDetailsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 204))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOVLFCrowdsourcingDetailsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 208));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 200) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 204) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOVLFCrowdsourcingDetailsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOVLFCrowdsourcingDetailsReadAllFrom_initialTag;
  Specified = GEOVLFCrowdsourcingDetailsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOVLFCrowdsourcingDetailsCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 208));
  return Specified;
}

void sub_189AAF02C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOVLFCrowdsourcingDetailsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOVLFCrowdsourcingDetailsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189AAF08C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFSLAMTrackIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  _BOOL8 v37;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOVLFPoint3DIsValid(a1))
            goto LABEL_42;
          goto LABEL_68;
        case 2u:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_68;
            while (1)
            {
              v17 = *v2;
              v18 = *(_QWORD *)&a1[v17];
              v19 = v18 + 1;
              if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
                goto LABEL_45;
              v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
              *(_QWORD *)&a1[v17] = v19;
              if (v20 < 0)
              {
                v21 = v15++;
                if (v21 <= 8)
                  continue;
              }
              goto LABEL_43;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_68;
LABEL_47:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v27 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v28 = *v2;
              v29 = *(_QWORD *)&a1[v28];
              v30 = v29 + 1;
              if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
                break;
              v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
              *(_QWORD *)&a1[v28] = v30;
              if (v31 < 0)
              {
                v13 = v27++ >= 9;
                if (!v13)
                  continue;
              }
              goto LABEL_47;
            }
            a1[*v4] = 1;
          }
          goto LABEL_42;
        case 3u:
          if (v15 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_68:
              PBReaderRecallMark();
              return 0;
            }
LABEL_57:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
            {
              v32 = a1[*v4];
              if (a1[*v4])
                break;
              while (1)
              {
                v33 = *v2;
                v34 = *(_QWORD *)&a1[v33];
                v35 = v34 + 1;
                if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
                  break;
                v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
                *(_QWORD *)&a1[v33] = v35;
                if (v36 < 0)
                {
                  v13 = v32++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_57;
              }
              a1[*v4] = 1;
            }
LABEL_42:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0)
              goto LABEL_68;
            while (1)
            {
              v22 = *v2;
              v23 = *(_QWORD *)&a1[v22];
              v24 = v23 + 1;
              if (v23 == -1 || v24 > *(_QWORD *)&a1[*v3])
                break;
              v25 = *(char *)(*(_QWORD *)&a1[*v5] + v23);
              *(_QWORD *)&a1[v22] = v24;
              if (v25 < 0)
              {
                v26 = v15++;
                if (v26 <= 8)
                  continue;
              }
              goto LABEL_43;
            }
LABEL_45:
            a1[*v4] = 1;
          }
LABEL_43:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_66;
          break;
        case 4u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOVLFImagePositionIsValid(a1))
            goto LABEL_42;
          goto LABEL_68;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_68;
          goto LABEL_43;
      }
    }
  }
LABEL_66:
  v37 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v37;
}

BOOL GEOVLFFrameDetailsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  BOOL v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  _BOOL8 v53;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_90;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
              goto LABEL_85;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v27 = v22++ > 8;
              if (!v27)
                continue;
            }
            goto LABEL_87;
          }
        case 2u:
          if (v16 == 5)
            goto LABEL_23;
          if (v16 != 2 || !PBReaderPlaceMark())
            goto LABEL_90;
          while (1)
          {
            v28 = (unint64_t *)&a1[*v2];
            v29 = *v28;
            v30 = *(_QWORD *)&a1[*v3];
            if (*v28 >= v30)
              break;
            v31 = *v4;
            if (a1[v31])
              break;
            if (v29 > 0xFFFFFFFFFFFFFFFBLL || (v32 = v29 + 4, v32 > v30))
              a1[v31] = 1;
            else
              *v28 = v32;
          }
          goto LABEL_67;
        case 3u:
          if (v16 == 5)
            goto LABEL_23;
          if (v16 != 2 || !PBReaderPlaceMark())
            goto LABEL_90;
          while (1)
          {
            v33 = (unint64_t *)&a1[*v2];
            v34 = *v33;
            v35 = *(_QWORD *)&a1[*v3];
            if (*v33 >= v35)
              break;
            v36 = *v4;
            if (a1[v36])
              break;
            if (v34 > 0xFFFFFFFFFFFFFFFBLL || (v37 = v34 + 4, v37 > v35))
              a1[v36] = 1;
            else
              *v33 = v37;
          }
          goto LABEL_67;
        case 4u:
        case 5u:
          if (v16 == 5)
            goto LABEL_23;
          goto LABEL_90;
        case 6u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
          if (v16 == 1)
            goto LABEL_20;
          goto LABEL_90;
        case 7u:
          if (v16 != 5)
          {
            if (v16 != 2 || !PBReaderPlaceMark())
              goto LABEL_90;
            while (1)
            {
              v38 = (unint64_t *)&a1[*v2];
              v39 = *v38;
              v40 = *(_QWORD *)&a1[*v3];
              if (*v38 >= v40)
                break;
              v41 = *v4;
              if (a1[v41])
                break;
              if (v39 > 0xFFFFFFFFFFFFFFFBLL || (v42 = v39 + 4, v42 > v40))
                a1[v41] = 1;
              else
                *v38 = v42;
            }
            goto LABEL_67;
          }
LABEL_23:
          v18 = *v2;
          v21 = *(_QWORD *)&a1[v18];
          if (v21 > 0xFFFFFFFFFFFFFFFBLL)
            goto LABEL_86;
          v20 = v21 + 4;
          goto LABEL_25;
        case 8u:
          if (v16 == 2 && PBReaderPlaceMark() && GEOVLFUsageTileIDIsValid(a1))
            goto LABEL_67;
          goto LABEL_90;
        case 9u:
          if (v16 == 1)
          {
LABEL_20:
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            if (v19 > 0xFFFFFFFFFFFFFFF7)
              goto LABEL_86;
            v20 = v19 + 8;
LABEL_25:
            if (v20 > *(_QWORD *)&a1[*v3])
LABEL_86:
              a1[v14] = 1;
            else
              *(_QWORD *)&a1[v18] = v20;
          }
          else
          {
            if (v16 != 2 || !PBReaderPlaceMark())
            {
LABEL_90:
              PBReaderRecallMark();
              return 0;
            }
            while (1)
            {
              v43 = (unint64_t *)&a1[*v2];
              v44 = *v43;
              v45 = *(_QWORD *)&a1[*v3];
              if (*v43 >= v45)
                break;
              v46 = *v4;
              if (a1[v46])
                break;
              if (v44 > 0xFFFFFFFFFFFFFFF7 || (v47 = v44 + 8, v47 > v45))
                a1[v46] = 1;
              else
                *v43 = v47;
            }
LABEL_67:
            PBReaderRecallMark();
          }
LABEL_87:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_88;
          break;
        case 0xDu:
          if ((v8 & 7) != 0)
            goto LABEL_90;
          v48 = 0;
          while (1)
          {
            v49 = *v2;
            v50 = *(_QWORD *)&a1[v49];
            v51 = v50 + 1;
            if (v50 == -1 || v51 > *(_QWORD *)&a1[*v3])
              break;
            v52 = *(char *)(*(_QWORD *)&a1[*v5] + v50);
            *(_QWORD *)&a1[v49] = v51;
            if (v52 < 0)
            {
              v27 = v48++ > 8;
              if (!v27)
                continue;
            }
            goto LABEL_87;
          }
LABEL_85:
          v14 = *v4;
          goto LABEL_86;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_90;
          goto LABEL_87;
      }
    }
  }
LABEL_88:
  v53 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v53;
}

void sub_189AAFDA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOVLFCrowdsourcingDetailsIsDirty(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 208));
  if ((*(_WORD *)(a1 + 216) & 0x1FF0) != 0)
    return 1;
  if ((*(_WORD *)(a1 + 216) & 0x400) == 0)
    return 0;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v3 = *(id *)(a1 + 160);
  v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v4 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v3);
        if (GEOVLFFrameDetailsIsDirty(*(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * i)))
        {
          v2 = 1;
          goto LABEL_15;
        }
      }
      v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_15:

  return v2;
}

os_unfair_lock_s *GEOVLFCrowdsourcingDetailsIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOVLFCrowdsourcingDetailsIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 52);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189AB06C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFDeviceOrientationReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  _BOOL8 v33;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v27 = 0;
          v28 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 16) |= 1u;
          while (1)
          {
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              break;
            v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
            *(_QWORD *)&v3[v29] = v31;
            v20 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0)
            {
              v26 = &OBJC_IVAR___GEOVLFDeviceOrientation__orientation;
              goto LABEL_40;
            }
            v27 += 7;
            v25 = v28++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              v26 = &OBJC_IVAR___GEOVLFDeviceOrientation__orientation;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEOVLFDeviceOrientation__orientation;
LABEL_39:
          v3[*v6] = 1;
        }
        else
        {
          if ((v10 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_48;
            continue;
          }
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 16) |= 2u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
            {
              v26 = &OBJC_IVAR___GEOVLFDeviceOrientation__relativeTimestampMs;
              goto LABEL_39;
            }
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              break;
            v18 += 7;
            v25 = v19++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              v26 = &OBJC_IVAR___GEOVLFDeviceOrientation__relativeTimestampMs;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEOVLFDeviceOrientation__relativeTimestampMs;
        }
LABEL_40:
        if (v3[*v6])
          LODWORD(v20) = 0;
LABEL_42:
        *(_DWORD *)(a1 + *v26) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v33 = v3[*v6] == 0;
  }
  else
  {
LABEL_48:
    v33 = 0;
  }
  objc_sync_exit(v3);

  return v33;
}

void sub_189AB17C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFDeviceOrientationReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOVLFDeviceOrientationReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189AB1828(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFEntryPointReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  _BOOL8 v25;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 12) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_30;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_32;
            }
          }
          v3[*v6] = 1;
LABEL_30:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_32:
          *(_DWORD *)(a1 + 8) = v20;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_35;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v25 = v3[*v6] == 0;
  }
  else
  {
LABEL_35:
    v25 = 0;
  }
  objc_sync_exit(v3);

  return v25;
}

void sub_189AB2250(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFEntryPointReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOVLFEntryPointReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189AB22B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFFailureDetailsReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  _BOOL8 v25;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 12) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_30;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_32;
            }
          }
          v3[*v6] = 1;
LABEL_30:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_32:
          *(_DWORD *)(a1 + 8) = v20;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_35;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v25 = v3[*v6] == 0;
  }
  else
  {
LABEL_35:
    v25 = 0;
  }
  objc_sync_exit(v3);

  return v25;
}

void sub_189AB2EAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFFailureDetailsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOVLFFailureDetailsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189AB2F0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFFailureDetailsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  _BOOL8 v22;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_33;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0 && v16++ <= 8)
            continue;
          goto LABEL_30;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_33:
        v22 = 0;
        goto LABEL_32;
      }
LABEL_30:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v22 = a1[*v4] == 0;
LABEL_32:
  PBReaderRecallMark();
  return v22;
}

void sub_189AB35B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOVLFFrameDetailsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t v29;
  BOOL v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  int v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  int v89;
  __int16 v90;
  void *v91;
  GEOVLFUsageTileID *v93;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 160));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 156);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 152));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = (unsigned __int16)(vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 180)), (uint16x4_t)0xFFF4FFF6FFF5FFF8) & 0xFF01FF01FF01FF01))+ ((*(_WORD *)(a1 + 180) >> 9) & 1));
  while (1)
  {
    v11 = a3[v7];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v7;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v9 | (v10 > 3);
  if (v9 & 1 | (v10 > 3) | v8 & 1)
    v13 = 0;
  else
    v13 = a3;
  v14 = (int *)MEMORY[0x1E0D82BF0];
  v15 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
  {
LABEL_172:
    if ((v12 & 1) != 0)
    {
      v88 = 1;
      goto LABEL_174;
    }
    if (v13)
    {
      while (1)
      {
        v89 = *v13++;
        v90 = 2048;
        switch(v89)
        {
          case 0:
            goto LABEL_184;
          case 2:
            goto LABEL_183;
          case 3:
            v90 = 256;
            goto LABEL_183;
          case 7:
            v90 = 1024;
            goto LABEL_183;
          case 8:
            v90 = 4096;
            goto LABEL_183;
          case 9:
            v90 = 512;
LABEL_183:
            *(_WORD *)(a1 + 180) |= v90;
            break;
          default:
            continue;
        }
      }
    }
    goto LABEL_184;
  }
  v16 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(v3 + *v15))
      goto LABEL_172;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    while (1)
    {
      v20 = *v14;
      v21 = *(_QWORD *)(v3 + v20);
      v22 = v21 + 1;
      if (v21 == -1 || v22 > *(_QWORD *)(v3 + *v6))
        break;
      v23 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v21);
      *(_QWORD *)(v3 + v20) = v22;
      v19 |= (unint64_t)(v23 & 0x7F) << v17;
      if ((v23 & 0x80) == 0)
        goto LABEL_24;
      v17 += 7;
      v24 = v18++ >= 9;
      if (v24)
      {
        v19 = 0;
        v25 = *v15;
        v26 = *(unsigned __int8 *)(v3 + v25);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v15) = 1;
LABEL_24:
    v25 = *v15;
    v26 = *(unsigned __int8 *)(v3 + v25);
    if (*(_BYTE *)(v3 + v25))
      v19 = 0;
LABEL_26:
    v27 = v19 & 7;
    if (v26 || v27 == 4)
      goto LABEL_172;
    v29 = v19 >> 3;
    v30 = v12;
    if (!((v13 == 0) | v12 & 1))
    {
      v31 = v13;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    switch((int)v29)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_129;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        *(_WORD *)(a1 + 180) |= 0x80u;
        while (1)
        {
          v38 = *v14;
          v39 = *(_QWORD *)(v3 + v38);
          v40 = v39 + 1;
          if (v39 == -1 || v40 > *(_QWORD *)(v3 + *v6))
            break;
          v41 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v39);
          *(_QWORD *)(v3 + v38) = v40;
          v37 |= (unint64_t)(v41 & 0x7F) << v35;
          if ((v41 & 0x80) == 0)
            goto LABEL_133;
          v35 += 7;
          v24 = v36++ >= 9;
          if (v24)
          {
            LODWORD(v37) = 0;
            goto LABEL_135;
          }
        }
        *(_BYTE *)(v3 + *v15) = 1;
LABEL_133:
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v37) = 0;
LABEL_135:
        v81 = 176;
        goto LABEL_140;
      case 2:
        if (!v30 || (*(_WORD *)(a1 + 180) & 0x800) != 0)
          goto LABEL_129;
        if (v27 != 2)
          goto LABEL_152;
        if (!PBReaderPlaceMark())
          goto LABEL_189;
        while (1)
        {
          v43 = (unint64_t *)(v3 + *v14);
          v44 = *v43;
          v45 = *(_QWORD *)(v3 + *v6);
          if (*v43 >= v45)
            break;
          v46 = (int)*MEMORY[0x1E0D82BC8];
          if (*(_BYTE *)(v3 + v46))
            break;
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > v45)
            *(_BYTE *)(v3 + v46) = 1;
          else
            *v43 = v44 + 4;
          PBRepeatedFloatAdd();
        }
        goto LABEL_131;
      case 3:
        if (!v30 || (*(_WORD *)(a1 + 180) & 0x100) != 0)
          goto LABEL_129;
        if (v27 != 2)
          goto LABEL_152;
        if (!PBReaderPlaceMark())
          goto LABEL_189;
        while (1)
        {
          v47 = (unint64_t *)(v3 + *v14);
          v48 = *v47;
          v49 = *(_QWORD *)(v3 + *v6);
          if (*v47 >= v49)
            break;
          v50 = (int)*MEMORY[0x1E0D82BC8];
          if (*(_BYTE *)(v3 + v50))
            break;
          if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > v49)
            *(_BYTE *)(v3 + v50) = 1;
          else
            *v47 = v48 + 4;
          PBRepeatedFloatAdd();
        }
        goto LABEL_131;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_129;
        *(_WORD *)(a1 + 180) |= 0x10u;
        v51 = *v14;
        v52 = *(_QWORD *)(v3 + v51);
        if (v52 <= 0xFFFFFFFFFFFFFFFBLL && v52 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v53 = *(_DWORD *)(*(_QWORD *)(v3 + *v16) + v52);
          *(_QWORD *)(v3 + v51) = v52 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v15) = 1;
          v53 = 0;
        }
        v82 = 164;
        goto LABEL_149;
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_129;
        *(_WORD *)(a1 + 180) |= 0x20u;
        v54 = *v14;
        v55 = *(_QWORD *)(v3 + v54);
        if (v55 <= 0xFFFFFFFFFFFFFFFBLL && v55 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v53 = *(_DWORD *)(*(_QWORD *)(v3 + *v16) + v55);
          *(_QWORD *)(v3 + v54) = v55 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v15) = 1;
          v53 = 0;
        }
        v82 = 168;
LABEL_149:
        *(_DWORD *)(a1 + v82) = v53;
        goto LABEL_170;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_129;
        *(_WORD *)(a1 + 180) |= 8u;
        v56 = *v14;
        v57 = *(_QWORD *)(v3 + v56);
        if (v57 <= 0xFFFFFFFFFFFFFFF7 && v57 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v58 = *(_QWORD *)(*(_QWORD *)(v3 + *v16) + v57);
          *(_QWORD *)(v3 + v56) = v57 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v15) = 1;
          v58 = 0;
        }
        v83 = 144;
        goto LABEL_164;
      case 7:
        if (!v30 || (*(_WORD *)(a1 + 180) & 0x400) != 0)
          goto LABEL_129;
        if (v27 != 2)
        {
LABEL_152:
          v84 = *v14;
          v85 = *(_QWORD *)(v3 + v84);
          if (v85 <= 0xFFFFFFFFFFFFFFFBLL && v85 + 4 <= *(_QWORD *)(v3 + *v6))
            *(_QWORD *)(v3 + v84) = v85 + 4;
          else
            *(_BYTE *)(v3 + v25) = 1;
          PBRepeatedFloatAdd();
          goto LABEL_169;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_189;
        while (1)
        {
          v59 = (unint64_t *)(v3 + *v14);
          v60 = *v59;
          v61 = *(_QWORD *)(v3 + *v6);
          if (*v59 >= v61)
            break;
          v62 = (int)*MEMORY[0x1E0D82BC8];
          if (*(_BYTE *)(v3 + v62))
            break;
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > v61)
            *(_BYTE *)(v3 + v62) = 1;
          else
            *v59 = v60 + 4;
          PBRepeatedFloatAdd();
        }
        goto LABEL_131;
      case 8:
        if (!v30)
          goto LABEL_129;
        if ((*(_WORD *)(a1 + 180) & 0x1000) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_189;
          v7 += *(unsigned __int16 *)(a1 + 180) << 19 >> 31;
          goto LABEL_169;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_189;
        v93 = objc_alloc_init(GEOVLFUsageTileID);
        if (GEOVLFUsageTileIDReadAllFrom((uint64_t)v93, (void *)v3))
        {
          PBReaderRecallMark();
          v63 = *(void **)(a1 + 136);
          *(_QWORD *)(a1 + 136) = v93;

          --v7;
LABEL_169:
          v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_170:
          if (!(v12 & 1 | (v7 != 0)) || *(_QWORD *)(v3 + *v14) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_172;
          continue;
        }

LABEL_189:
        v88 = 0;
        v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_174:
        *(_WORD *)(a1 + 180) |= 0x800u;
        *(_WORD *)(a1 + 180) |= 0x100u;
        *(_WORD *)(a1 + 180) |= 0x400u;
        *(_WORD *)(a1 + 180) |= 0x1000u;
        *(_WORD *)(a1 + 180) |= 0x200u;
        if ((v88 & 1) != 0)
        {
LABEL_184:
          v3 = *(_BYTE *)(v3 + *v15) == 0;
          if ((v12 & 1) != 0)
            goto LABEL_185;
          return v3;
        }
        v3 = 0;
        if ((v12 & 1) == 0)
          return v3;
LABEL_185:
        v91 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

        return v3;
      case 9:
        if (!v30 || (*(_WORD *)(a1 + 180) & 0x200) != 0)
          goto LABEL_129;
        if (v27 == 2)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_189;
          while (1)
          {
            v64 = (unint64_t *)(v3 + *v14);
            v65 = *v64;
            v66 = *(_QWORD *)(v3 + *v6);
            if (*v64 >= v66)
              break;
            v67 = (int)*MEMORY[0x1E0D82BC8];
            if (*(_BYTE *)(v3 + v67))
              break;
            if (v65 > 0xFFFFFFFFFFFFFFF7 || v65 + 8 > v66)
              *(_BYTE *)(v3 + v67) = 1;
            else
              *v64 = v65 + 8;
            PBRepeatedDoubleAdd();
          }
LABEL_131:
          PBReaderRecallMark();
        }
        else
        {
          v86 = *v14;
          v87 = *(_QWORD *)(v3 + v86);
          if (v87 <= 0xFFFFFFFFFFFFFFF7 && v87 + 8 <= *(_QWORD *)(v3 + *v6))
            *(_QWORD *)(v3 + v86) = v87 + 8;
          else
            *(_BYTE *)(v3 + v25) = 1;
          PBRepeatedDoubleAdd();
        }
        goto LABEL_169;
      case 10:
        if ((v8 & 1) == 0)
          goto LABEL_129;
        *(_WORD *)(a1 + 180) |= 1u;
        v68 = *v14;
        v69 = *(_QWORD *)(v3 + v68);
        if (v69 <= 0xFFFFFFFFFFFFFFF7 && v69 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v58 = *(_QWORD *)(*(_QWORD *)(v3 + *v16) + v69);
          *(_QWORD *)(v3 + v68) = v69 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v15) = 1;
          v58 = 0;
        }
        v83 = 112;
        goto LABEL_164;
      case 11:
        if ((v8 & 1) == 0)
          goto LABEL_129;
        *(_WORD *)(a1 + 180) |= 2u;
        v70 = *v14;
        v71 = *(_QWORD *)(v3 + v70);
        if (v71 <= 0xFFFFFFFFFFFFFFF7 && v71 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v58 = *(_QWORD *)(*(_QWORD *)(v3 + *v16) + v71);
          *(_QWORD *)(v3 + v70) = v71 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v15) = 1;
          v58 = 0;
        }
        v83 = 120;
        goto LABEL_164;
      case 12:
        if ((v8 & 1) == 0)
          goto LABEL_129;
        *(_WORD *)(a1 + 180) |= 4u;
        v72 = *v14;
        v73 = *(_QWORD *)(v3 + v72);
        if (v73 <= 0xFFFFFFFFFFFFFFF7 && v73 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v58 = *(_QWORD *)(*(_QWORD *)(v3 + *v16) + v73);
          *(_QWORD *)(v3 + v72) = v73 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v15) = 1;
          v58 = 0;
        }
        v83 = 128;
LABEL_164:
        *(_QWORD *)(a1 + v83) = v58;
        goto LABEL_170;
      case 13:
        if ((v8 & 1) != 0)
        {
          v74 = 0;
          v75 = 0;
          v37 = 0;
          *(_WORD *)(a1 + 180) |= 0x40u;
          while (1)
          {
            v76 = *v14;
            v77 = *(_QWORD *)(v3 + v76);
            v78 = v77 + 1;
            if (v77 == -1 || v78 > *(_QWORD *)(v3 + *v6))
              break;
            v79 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v77);
            *(_QWORD *)(v3 + v76) = v78;
            v37 |= (unint64_t)(v79 & 0x7F) << v74;
            if ((v79 & 0x80) == 0)
              goto LABEL_137;
            v74 += 7;
            v24 = v75++ >= 9;
            if (v24)
            {
              LODWORD(v37) = 0;
              goto LABEL_139;
            }
          }
          *(_BYTE *)(v3 + *v15) = 1;
LABEL_137:
          if (*(_BYTE *)(v3 + *v15))
            LODWORD(v37) = 0;
LABEL_139:
          v81 = 172;
LABEL_140:
          *(_DWORD *)(a1 + v81) = v37;
        }
        else
        {
LABEL_129:
          v80 = PBReaderSkipValueWithTag();
          v15 = (int *)MEMORY[0x1E0D82BC8];
          if ((v80 & 1) == 0)
          {
LABEL_187:
            v88 = 0;
            goto LABEL_174;
          }
        }
        goto LABEL_170;
      default:
        v42 = PBReaderSkipValueWithTag();
        v15 = (int *)MEMORY[0x1E0D82BC8];
        if (!v42)
          goto LABEL_187;
        goto LABEL_170;
    }
  }
}

void sub_189AB4510(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AB49BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AB4D04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AB4E44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AB603C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOVLFFrameDetailsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 156))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOVLFFrameDetailsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 160));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 152) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 156) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOVLFFrameDetailsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOVLFFrameDetailsReadAllFrom_initialTag;
  Specified = GEOVLFFrameDetailsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 136), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  return Specified;
}

void sub_189AB61E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOVLFFrameDetailsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOVLFFrameDetailsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189AB6240(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFUsageTileIDIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL8 v21;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 == 2 && (PBReaderSkipValueWithTag() & 1) != 0)
            goto LABEL_29;
          goto LABEL_32;
        case 2u:
        case 3u:
        case 4u:
          if (v16 != 1)
            goto LABEL_32;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && (v20 = v19 + 8, v20 <= *(_QWORD *)&a1[*v3]))
            *(_QWORD *)&a1[v18] = v20;
          else
            a1[v14] = 1;
          goto LABEL_29;
        default:
          if (!PBReaderSkipValueWithTag())
          {
LABEL_32:
            v21 = 0;
            goto LABEL_31;
          }
LABEL_29:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_30;
          break;
      }
    }
  }
LABEL_30:
  v21 = a1[*v4] == 0;
LABEL_31:
  PBReaderRecallMark();
  return v21;
}

void sub_189AB67DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFFrameDetailsIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 160));
  v2 = (*(_WORD *)(a1 + 180) & 0x3F00) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 160));
  return v2;
}

void sub_189AB6E44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFGravityVectorReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          *(_BYTE *)(a1 + 32) |= 4u;
          v22 = *v4;
          v23 = *(_QWORD *)&v3[v22];
          if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)&v3[*v5])
          {
            v21 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v23 + 8;
          }
          else
          {
            v3[*v6] = 1;
            v21 = 0;
          }
          v26 = &OBJC_IVAR___GEOVLFGravityVector__z;
        }
        else if ((_DWORD)v18 == 2)
        {
          *(_BYTE *)(a1 + 32) |= 2u;
          v24 = *v4;
          v25 = *(_QWORD *)&v3[v24];
          if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(_QWORD *)&v3[*v5])
          {
            v21 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v25);
            *(_QWORD *)&v3[v24] = v25 + 8;
          }
          else
          {
            v3[*v6] = 1;
            v21 = 0;
          }
          v26 = &OBJC_IVAR___GEOVLFGravityVector__y;
        }
        else
        {
          if ((_DWORD)v18 != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_42;
            continue;
          }
          *(_BYTE *)(a1 + 32) |= 1u;
          v19 = *v4;
          v20 = *(_QWORD *)&v3[v19];
          if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)&v3[*v5])
          {
            v21 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v20);
            *(_QWORD *)&v3[v19] = v20 + 8;
          }
          else
          {
            v3[*v6] = 1;
            v21 = 0;
          }
          v26 = &OBJC_IVAR___GEOVLFGravityVector__x;
        }
        *(_QWORD *)(a1 + *v26) = v21;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_42:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_189AB7E8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFGravityVectorReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOVLFGravityVectorReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189AB7EEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFGravityVectorIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL8 v22;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      v18 = v8 >> 3;
      if ((v8 >> 3) == 3 || (_DWORD)v18 == 2 || (_DWORD)v18 == 1)
      {
        if (v16 != 1)
          goto LABEL_31;
        v19 = *v2;
        v20 = *(_QWORD *)&a1[v19];
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && (v21 = v20 + 8, v21 <= *(_QWORD *)&a1[*v3]))
          *(_QWORD *)&a1[v19] = v21;
        else
          a1[v14] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_31:
        v22 = 0;
        goto LABEL_30;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v22 = a1[*v4] == 0;
LABEL_30:
  PBReaderRecallMark();
  return v22;
}

BOOL GEOVLFImagePositionReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  _BOOL8 v24;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          *(_BYTE *)(a1 + 16) |= 2u;
          v21 = *v4;
          v22 = *(_QWORD *)&v3[v21];
          if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(_QWORD *)&v3[*v5])
          {
            v20 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v22 + 4;
          }
          else
          {
            v3[*v6] = 1;
            v20 = 0;
          }
          v23 = &OBJC_IVAR___GEOVLFImagePosition__y;
        }
        else
        {
          if ((v10 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_36;
            continue;
          }
          *(_BYTE *)(a1 + 16) |= 1u;
          v18 = *v4;
          v19 = *(_QWORD *)&v3[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFFBLL && v19 + 4 <= *(_QWORD *)&v3[*v5])
          {
            v20 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v19);
            *(_QWORD *)&v3[v18] = v19 + 4;
          }
          else
          {
            v3[*v6] = 1;
            v20 = 0;
          }
          v23 = &OBJC_IVAR___GEOVLFImagePosition__x;
        }
        *(_DWORD *)(a1 + *v23) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v24 = v3[*v6] == 0;
  }
  else
  {
LABEL_36:
    v24 = 0;
  }
  objc_sync_exit(v3);

  return v24;
}

void sub_189AB8BF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFImagePositionReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOVLFImagePositionReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189AB8C50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFImagePositionIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL8 v21;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      if ((v8 >> 3) == 2 || (v8 >> 3) == 1)
      {
        if (v16 != 5)
          goto LABEL_30;
        v18 = *v2;
        v19 = *(_QWORD *)&a1[v18];
        if (v19 <= 0xFFFFFFFFFFFFFFFBLL && (v20 = v19 + 4, v20 <= *(_QWORD *)&a1[*v3]))
          *(_QWORD *)&a1[v18] = v20;
        else
          a1[v14] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_30:
        v21 = 0;
        goto LABEL_29;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v21 = a1[*v4] == 0;
LABEL_29:
  PBReaderRecallMark();
  return v21;
}

BOOL GEOVLFInitializationFailureDetailsReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          PBReaderReadString();
          v26 = objc_claimAutoreleasedReturnValue();
          v27 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v26;

        }
        else
        {
          if ((_DWORD)v18 == 2)
          {
            v28 = 0;
            v29 = 0;
            v21 = 0;
            *(_BYTE *)(a1 + 24) |= 2u;
            while (1)
            {
              v30 = *v4;
              v31 = *(_QWORD *)&v3[v30];
              v32 = v31 + 1;
              if (v31 == -1 || v32 > *(_QWORD *)&v3[*v5])
                break;
              v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
              *(_QWORD *)&v3[v30] = v32;
              v21 |= (unint64_t)(v33 & 0x7F) << v28;
              if ((v33 & 0x80) == 0)
                goto LABEL_44;
              v28 += 7;
              v15 = v29++ >= 9;
              if (v15)
              {
                LODWORD(v21) = 0;
                goto LABEL_46;
              }
            }
            v3[*v6] = 1;
LABEL_44:
            if (v3[*v6])
              LODWORD(v21) = 0;
LABEL_46:
            v34 = 20;
          }
          else
          {
            if ((_DWORD)v18 != 1)
            {
              if (!PBReaderSkipValueWithTag())
                goto LABEL_50;
              continue;
            }
            v19 = 0;
            v20 = 0;
            v21 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (1)
            {
              v22 = *v4;
              v23 = *(_QWORD *)&v3[v22];
              v24 = v23 + 1;
              if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
                break;
              v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
              *(_QWORD *)&v3[v22] = v24;
              v21 |= (unint64_t)(v25 & 0x7F) << v19;
              if ((v25 & 0x80) == 0)
                goto LABEL_40;
              v19 += 7;
              v15 = v20++ >= 9;
              if (v15)
              {
                LODWORD(v21) = 0;
                goto LABEL_42;
              }
            }
            v3[*v6] = 1;
LABEL_40:
            if (v3[*v6])
              LODWORD(v21) = 0;
LABEL_42:
            v34 = 16;
          }
          *(_DWORD *)(a1 + v34) = v21;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v35 = v3[*v6] == 0;
  }
  else
  {
LABEL_50:
    v35 = 0;
  }
  objc_sync_exit(v3);

  return v35;
}

void sub_189AB99CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFInitializationFailureDetailsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOVLFInitializationFailureDetailsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189AB9A2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189ABA190(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOVLFLocalizationAlgorithmDetailsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  _BOOL4 v12;
  int *v13;
  int *v14;
  int *v15;
  BOOL v16;
  int v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v31;
  _BOOL4 v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  int v86;
  int v87;
  __int16 v88;
  void *v89;
  int v91;
  BOOL v92;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 68);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 64));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int16 *)(a1 + 100) >> 7) & 1) + ((*(unsigned __int16 *)(a1 + 100) >> 6) & 1);
  while (1)
  {
    v11 = a3[v8];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v7 = 1;
LABEL_9:
    ++v8;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = (v9 & 1 | v10) != 0;
  if (((v9 & 1 | v10) != 0) | v7 & 1)
    v13 = 0;
  else
    v13 = a3;
  v14 = (int *)MEMORY[0x1E0D82BF0];
  v15 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
  {
LABEL_153:
    if (v12)
    {
      v85 = 1;
      goto LABEL_155;
    }
    if (!v13)
      goto LABEL_166;
    while (1)
    {
      v87 = *v13++;
      v86 = v87;
      if (v87 == 4)
        break;
      if (v86 == 5)
      {
        v88 = 64;
LABEL_165:
        *(_WORD *)(a1 + 100) |= v88;
      }
      else if (!v86)
      {
        goto LABEL_166;
      }
    }
    v88 = 128;
    goto LABEL_165;
  }
  if (v13)
    v16 = (v9 & 1 | v10) != 0;
  else
    v16 = 1;
  if (v8)
    v17 = 1;
  else
    v17 = v12;
  v91 = v17;
  v92 = v16;
  v18 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(v3 + *v15))
      goto LABEL_153;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v14;
      v23 = *(_QWORD *)(v3 + v22);
      v24 = v23 + 1;
      if (v23 == -1 || v24 > *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v24;
      v21 |= (unint64_t)(v25 & 0x7F) << v19;
      if ((v25 & 0x80) == 0)
        goto LABEL_30;
      v19 += 7;
      v26 = v20++ >= 9;
      if (v26)
      {
        v21 = 0;
        v27 = *v15;
        v28 = *(unsigned __int8 *)(v3 + v27);
        goto LABEL_32;
      }
    }
    *(_BYTE *)(v3 + *v15) = 1;
LABEL_30:
    v27 = *v15;
    v28 = *(unsigned __int8 *)(v3 + v27);
    if (*(_BYTE *)(v3 + v27))
      v21 = 0;
LABEL_32:
    v29 = v21 & 7;
    if (v28 || v29 == 4)
      goto LABEL_153;
    v31 = v21 >> 3;
    v32 = v12;
    if (!v92)
    {
      v33 = v13;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v7 & 1) == 0)
          goto LABEL_116;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 100) |= 2u;
        while (1)
        {
          v40 = *v14;
          v41 = *(_QWORD *)(v3 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(v3 + *v6))
            break;
          v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v41);
          *(_QWORD *)(v3 + v40) = v42;
          v39 |= (unint64_t)(v43 & 0x7F) << v37;
          if ((v43 & 0x80) == 0)
            goto LABEL_119;
          v37 += 7;
          v26 = v38++ >= 9;
          if (v26)
          {
            LODWORD(v39) = 0;
            goto LABEL_121;
          }
        }
        *(_BYTE *)(v3 + *v15) = 1;
LABEL_119:
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v39) = 0;
LABEL_121:
        v82 = 80;
        goto LABEL_142;
      case 2:
        if ((v7 & 1) == 0)
          goto LABEL_116;
        v48 = 0;
        v49 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 100) |= 4u;
        while (2)
        {
          v50 = *v14;
          v51 = *(_QWORD *)(v3 + v50);
          v52 = v51 + 1;
          if (v51 == -1 || v52 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v15) = 1;
          }
          else
          {
            v53 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v51);
            *(_QWORD *)(v3 + v50) = v52;
            v39 |= (unint64_t)(v53 & 0x7F) << v48;
            if (v53 < 0)
            {
              v48 += 7;
              v26 = v49++ >= 9;
              if (v26)
              {
                LODWORD(v39) = 0;
                goto LABEL_125;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v39) = 0;
LABEL_125:
        v82 = 84;
        goto LABEL_142;
      case 3:
        if ((v7 & 1) == 0)
          goto LABEL_116;
        v54 = 0;
        v55 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 100) |= 1u;
        while (2)
        {
          v56 = *v14;
          v57 = *(_QWORD *)(v3 + v56);
          v58 = v57 + 1;
          if (v57 == -1 || v58 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v15) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v57);
            *(_QWORD *)(v3 + v56) = v58;
            v39 |= (unint64_t)(v59 & 0x7F) << v54;
            if (v59 < 0)
            {
              v54 += 7;
              v26 = v55++ >= 9;
              if (v26)
              {
                LODWORD(v39) = 0;
                goto LABEL_129;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v39) = 0;
LABEL_129:
        v82 = 76;
        goto LABEL_142;
      case 4:
        if (!v32 || (*(_WORD *)(a1 + 100) & 0x80) != 0)
          goto LABEL_116;
        if (v29 != 2)
          goto LABEL_148;
        if (!PBReaderPlaceMark())
          goto LABEL_169;
        while (1)
        {
          v60 = (unint64_t *)(v3 + *v14);
          v61 = *v60;
          v62 = *(_QWORD *)(v3 + *v6);
          if (*v60 >= v62)
            break;
          v63 = *v15;
          if (*(_BYTE *)(v3 + v63))
            break;
          if (v61 > 0xFFFFFFFFFFFFFFF7 || v61 + 8 > v62)
            *(_BYTE *)(v3 + v63) = 1;
          else
            *v60 = v61 + 8;
          PBRepeatedDoubleAdd();
        }
        goto LABEL_146;
      case 5:
        if (!v32 || (*(_WORD *)(a1 + 100) & 0x40) != 0)
          goto LABEL_116;
        if (v29 != 2)
        {
LABEL_148:
          v83 = *v14;
          v84 = *(_QWORD *)(v3 + v83);
          if (v84 <= 0xFFFFFFFFFFFFFFF7 && v84 + 8 <= *(_QWORD *)(v3 + *v6))
            *(_QWORD *)(v3 + v83) = v84 + 8;
          else
            *(_BYTE *)(v3 + v27) = 1;
          PBRepeatedDoubleAdd();
          goto LABEL_143;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_169;
        while (1)
        {
          v44 = (unint64_t *)(v3 + *v14);
          v45 = *v44;
          v46 = *(_QWORD *)(v3 + *v6);
          if (*v44 >= v46)
            break;
          v47 = *v15;
          if (*(_BYTE *)(v3 + v47))
            break;
          if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > v46)
            *(_BYTE *)(v3 + v47) = 1;
          else
            *v44 = v45 + 8;
          PBRepeatedDoubleAdd();
        }
LABEL_146:
        PBReaderRecallMark();
        if ((v91 & 1) == 0)
          goto LABEL_153;
        goto LABEL_144;
      case 6:
        if ((v7 & 1) == 0)
          goto LABEL_116;
        v64 = 0;
        v65 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 100) |= 8u;
        while (2)
        {
          v66 = *v14;
          v67 = *(_QWORD *)(v3 + v66);
          v68 = v67 + 1;
          if (v67 == -1 || v68 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v15) = 1;
          }
          else
          {
            v69 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v67);
            *(_QWORD *)(v3 + v66) = v68;
            v39 |= (unint64_t)(v69 & 0x7F) << v64;
            if (v69 < 0)
            {
              v64 += 7;
              v26 = v65++ >= 9;
              if (v26)
              {
                LODWORD(v39) = 0;
                goto LABEL_133;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v39) = 0;
LABEL_133:
        v82 = 88;
        goto LABEL_142;
      case 7:
        if ((v7 & 1) == 0)
          goto LABEL_116;
        v70 = 0;
        v71 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 100) |= 0x10u;
        while (2)
        {
          v72 = *v14;
          v73 = *(_QWORD *)(v3 + v72);
          v74 = v73 + 1;
          if (v73 == -1 || v74 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v15) = 1;
          }
          else
          {
            v75 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v73);
            *(_QWORD *)(v3 + v72) = v74;
            v39 |= (unint64_t)(v75 & 0x7F) << v70;
            if (v75 < 0)
            {
              v70 += 7;
              v26 = v71++ >= 9;
              if (v26)
              {
                LODWORD(v39) = 0;
                goto LABEL_137;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v39) = 0;
LABEL_137:
        v82 = 92;
        goto LABEL_142;
      case 8:
        if ((v7 & 1) != 0)
        {
          v76 = 0;
          v77 = 0;
          v39 = 0;
          *(_WORD *)(a1 + 100) |= 0x20u;
          while (1)
          {
            v78 = *v14;
            v79 = *(_QWORD *)(v3 + v78);
            v80 = v79 + 1;
            if (v79 == -1 || v80 > *(_QWORD *)(v3 + *v6))
              break;
            v81 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v79);
            *(_QWORD *)(v3 + v78) = v80;
            v39 |= (unint64_t)(v81 & 0x7F) << v76;
            if ((v81 & 0x80) == 0)
              goto LABEL_139;
            v76 += 7;
            v26 = v77++ >= 9;
            if (v26)
            {
              LODWORD(v39) = 0;
              goto LABEL_141;
            }
          }
          *(_BYTE *)(v3 + *v15) = 1;
LABEL_139:
          if (*(_BYTE *)(v3 + *v15))
            LODWORD(v39) = 0;
LABEL_141:
          v82 = 96;
LABEL_142:
          *(_DWORD *)(a1 + v82) = v39;
LABEL_143:
          if (!v91)
            goto LABEL_153;
LABEL_144:
          if (*(_QWORD *)(v3 + *v14) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_153;
          continue;
        }
LABEL_116:
        if ((PBReaderSkipValueWithTag() & 1) != 0)
          goto LABEL_143;
LABEL_169:
        v85 = 0;
LABEL_155:
        *(_WORD *)(a1 + 100) |= 0x80u;
        *(_WORD *)(a1 + 100) |= 0x40u;
        if ((v85 & 1) != 0)
        {
LABEL_166:
          v3 = *(_BYTE *)(v3 + *v15) == 0;
          if (v12)
            goto LABEL_167;
          return v3;
        }
        v3 = 0;
        if (!v12)
          return v3;
LABEL_167:
        v89 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

        return v3;
      default:
        if (!PBReaderSkipValueWithTag())
          goto LABEL_169;
        goto LABEL_143;
    }
  }
}

void sub_189ABADE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189ABBABC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOVLFLocalizationAlgorithmDetailsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 68))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOVLFLocalizationAlgorithmDetailsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 68) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOVLFLocalizationAlgorithmDetailsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOVLFLocalizationAlgorithmDetailsReadAllFrom_initialTag;
  Specified = GEOVLFLocalizationAlgorithmDetailsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_189ABBC48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOVLFLocalizationAlgorithmDetailsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOVLFLocalizationAlgorithmDetailsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189ABBCA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFLocalizationAlgorithmDetailsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _BOOL8 v62;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_97;
          v18 = 0;
          while (1)
          {
            v19 = *v2;
            v20 = *(_QWORD *)&a1[v19];
            v21 = v20 + 1;
            if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
              goto LABEL_87;
            v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
            *(_QWORD *)&a1[v19] = v21;
            if (v22 < 0)
            {
              v23 = v18++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_89;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_97;
          v24 = 0;
          while (1)
          {
            v25 = *v2;
            v26 = *(_QWORD *)&a1[v25];
            v27 = v26 + 1;
            if (v26 == -1 || v27 > *(_QWORD *)&a1[*v3])
              goto LABEL_87;
            v28 = *(char *)(*(_QWORD *)&a1[*v5] + v26);
            *(_QWORD *)&a1[v25] = v27;
            if (v28 < 0)
            {
              v23 = v24++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_89;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_97;
          v29 = 0;
          while (1)
          {
            v30 = *v2;
            v31 = *(_QWORD *)&a1[v30];
            v32 = v31 + 1;
            if (v31 == -1 || v32 > *(_QWORD *)&a1[*v3])
              goto LABEL_87;
            v33 = *(char *)(*(_QWORD *)&a1[*v5] + v31);
            *(_QWORD *)&a1[v30] = v32;
            if (v33 < 0)
            {
              v23 = v29++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_89;
          }
        case 4u:
          if (v16 == 1)
            goto LABEL_91;
          if (v16 != 2 || !PBReaderPlaceMark())
            goto LABEL_97;
          while (1)
          {
            v34 = (unint64_t *)&a1[*v2];
            v35 = *v34;
            v36 = *(_QWORD *)&a1[*v3];
            if (*v34 >= v36)
              break;
            v37 = *v4;
            if (a1[v37])
              break;
            if (v35 > 0xFFFFFFFFFFFFFFF7 || (v38 = v35 + 8, v38 > v36))
              a1[v37] = 1;
            else
              *v34 = v38;
          }
          goto LABEL_94;
        case 5u:
          if (v16 == 1)
          {
LABEL_91:
            v59 = *v2;
            v60 = *(_QWORD *)&a1[v59];
            if (v60 > 0xFFFFFFFFFFFFFFF7 || (v61 = v60 + 8, v61 > *(_QWORD *)&a1[*v3]))
LABEL_88:
              a1[v14] = 1;
            else
              *(_QWORD *)&a1[v59] = v61;
          }
          else
          {
            if (v16 != 2 || !PBReaderPlaceMark())
            {
LABEL_97:
              PBReaderRecallMark();
              return 0;
            }
            while (1)
            {
              v39 = (unint64_t *)&a1[*v2];
              v40 = *v39;
              v41 = *(_QWORD *)&a1[*v3];
              if (*v39 >= v41)
                break;
              v42 = *v4;
              if (a1[v42])
                break;
              if (v40 > 0xFFFFFFFFFFFFFFF7 || (v43 = v40 + 8, v43 > v41))
                a1[v42] = 1;
              else
                *v39 = v43;
            }
LABEL_94:
            PBReaderRecallMark();
          }
LABEL_89:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_95;
          break;
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_97;
          v44 = 0;
          while (1)
          {
            v45 = *v2;
            v46 = *(_QWORD *)&a1[v45];
            v47 = v46 + 1;
            if (v46 == -1 || v47 > *(_QWORD *)&a1[*v3])
              goto LABEL_87;
            v48 = *(char *)(*(_QWORD *)&a1[*v5] + v46);
            *(_QWORD *)&a1[v45] = v47;
            if (v48 < 0)
            {
              v23 = v44++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_89;
          }
        case 7u:
          if ((v8 & 7) != 0)
            goto LABEL_97;
          v49 = 0;
          while (1)
          {
            v50 = *v2;
            v51 = *(_QWORD *)&a1[v50];
            v52 = v51 + 1;
            if (v51 == -1 || v52 > *(_QWORD *)&a1[*v3])
              goto LABEL_87;
            v53 = *(char *)(*(_QWORD *)&a1[*v5] + v51);
            *(_QWORD *)&a1[v50] = v52;
            if (v53 < 0)
            {
              v23 = v49++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_89;
          }
        case 8u:
          if ((v8 & 7) != 0)
            goto LABEL_97;
          v54 = 0;
          while (1)
          {
            v55 = *v2;
            v56 = *(_QWORD *)&a1[v55];
            v57 = v56 + 1;
            if (v56 == -1 || v57 > *(_QWORD *)&a1[*v3])
              break;
            v58 = *(char *)(*(_QWORD *)&a1[*v5] + v56);
            *(_QWORD *)&a1[v55] = v57;
            if (v58 < 0)
            {
              v23 = v54++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_89;
          }
LABEL_87:
          v14 = *v4;
          goto LABEL_88;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_97;
          goto LABEL_89;
      }
    }
  }
LABEL_95:
  v62 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v62;
}

void sub_189ABC40C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFLocalizationAlgorithmDetailsIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v2 = (*(_WORD *)(a1 + 100) & 0x1C0) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return v2;
}

void sub_189ABC8E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189ABCEF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOVLFLocalizationDetailsReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  __int16 v57;
  char v58;
  int v59;
  __int16 v60;
  void *v61;
  GEOVLFTileDetails *v63;
  char v64;
  char v65;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 104));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 100);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 96));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 116)), (uint16x4_t)0xFFFBFFF8FFF7FFFCLL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 116) >> 6) & 1)+ ((*(_WORD *)(a1 + 116) >> 7) & 1));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 3;
        v15 = v10 | v14;
        if ((((v10 | v14) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v65 = (v16 == 0) | v15;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v64 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_123;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_123:
      if ((v15 & 1) != 0)
      {
        v58 = 1;
        goto LABEL_136;
      }
      if (v16)
      {
        while (1)
        {
          v59 = *v16++;
          v60 = 512;
          switch(v59)
          {
            case 0:
              goto LABEL_137;
            case 1:
              goto LABEL_132;
            case 4:
              v60 = 16;
              goto LABEL_132;
            case 5:
              v60 = 256;
              goto LABEL_132;
            case 6:
              v60 = 32;
              goto LABEL_132;
            case 7:
              v60 = 64;
              goto LABEL_132;
            case 8:
              v60 = 128;
LABEL_132:
              *(_WORD *)(a1 + 116) |= v60;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_137;
    }
    v30 = v22 >> 3;
    v31 = v15;
    if ((v65 & 1) == 0)
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (!v31)
          goto LABEL_94;
        if ((*(_WORD *)(a1 + 116) & 0x200) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_135;
          v63 = objc_alloc_init(GEOVLFTileDetails);
          if (GEOVLFTileDetailsReadAllFrom((uint64_t)v63, (void *)v3))
          {
            PBReaderRecallMark();
            v36 = 88;
            goto LABEL_85;
          }
          goto LABEL_134;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_135;
        v57 = *(_WORD *)(a1 + 116) << 6;
        goto LABEL_117;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_94;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        *(_WORD *)(a1 + 116) |= 4u;
        while (2)
        {
          v41 = *v17;
          v42 = *(_QWORD *)(v3 + v41);
          v43 = v42 + 1;
          if (v42 == -1 || v43 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v44 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v42);
            *(_QWORD *)(v3 + v41) = v43;
            v40 |= (unint64_t)(v44 & 0x7F) << v38;
            if (v44 < 0)
            {
              v38 += 7;
              v27 = v39++ >= 9;
              if (v27)
              {
                LODWORD(v40) = 0;
                goto LABEL_99;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v40) = 0;
LABEL_99:
        v56 = 108;
        goto LABEL_104;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_94;
        v45 = 0;
        v46 = 0;
        v40 = 0;
        *(_WORD *)(a1 + 116) |= 8u;
        while (2)
        {
          v47 = *v17;
          v48 = *(_QWORD *)(v3 + v47);
          v49 = v48 + 1;
          if (v48 == -1 || v49 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v48);
            *(_QWORD *)(v3 + v47) = v49;
            v40 |= (unint64_t)(v50 & 0x7F) << v45;
            if (v50 < 0)
            {
              v45 += 7;
              v27 = v46++ >= 9;
              if (v27)
              {
                LODWORD(v40) = 0;
                goto LABEL_103;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v40) = 0;
LABEL_103:
        v56 = 112;
LABEL_104:
        *(_DWORD *)(a1 + v56) = v40;
        goto LABEL_119;
      case 4:
        if (!v31)
          goto LABEL_94;
        if ((*(_WORD *)(a1 + 116) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_135;
          v57 = *(_WORD *)(a1 + 116) << 11;
          goto LABEL_117;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_135;
        v63 = objc_alloc_init(GEOVLFLocalizationAlgorithmDetails);
        if (!GEOVLFLocalizationAlgorithmDetailsReadAllFrom((uint64_t)v63, (void *)v3, v9 & 1))
          goto LABEL_134;
        PBReaderRecallMark();
        v36 = 40;
        goto LABEL_85;
      case 5:
        if (!v31)
          goto LABEL_94;
        if ((*(_WORD *)(a1 + 116) & 0x100) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_135;
          v57 = *(_WORD *)(a1 + 116) << 7;
          goto LABEL_117;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_135;
        v63 = objc_alloc_init(GEOVLFSuccessDetails);
        if (!GEOVLFSuccessDetailsReadAllFrom((uint64_t)v63, (void *)v3, v9 & 1))
          goto LABEL_134;
        PBReaderRecallMark();
        v36 = 80;
        goto LABEL_85;
      case 6:
        if (!v31)
          goto LABEL_94;
        if ((*(_WORD *)(a1 + 116) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_135;
          v57 = *(_WORD *)(a1 + 116) << 10;
          goto LABEL_117;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_135;
        v63 = objc_alloc_init(GEOVLFFailureDetails);
        if (!GEOVLFFailureDetailsReadAllFrom((uint64_t)v63, (void *)v3))
          goto LABEL_134;
        PBReaderRecallMark();
        v36 = 56;
        goto LABEL_85;
      case 7:
        if (!v31)
          goto LABEL_94;
        if ((*(_WORD *)(a1 + 116) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_135;
          v57 = *(_WORD *)(a1 + 116) << 9;
          goto LABEL_117;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_135;
        v63 = objc_alloc_init(GEOVLFGravityVector);
        if (!GEOVLFGravityVectorReadAllFrom((uint64_t)v63, (void *)v3))
          goto LABEL_134;
        PBReaderRecallMark();
        v36 = 64;
        goto LABEL_85;
      case 8:
        if (!v31)
          goto LABEL_94;
        if ((*(_WORD *)(a1 + 116) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_135;
          v57 = *(_WORD *)(a1 + 116) << 8;
LABEL_117:
          v7 += v57 >> 15;
LABEL_118:
          v15 = v64;
          v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_119:
          if (!(v15 & 1 | (v7 != 0)))
            goto LABEL_123;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_135;
        v63 = objc_alloc_init(GEOVLFLocation);
        if (GEOVLFLocationReadAllFrom((uint64_t)v63, (void *)v3))
        {
          PBReaderRecallMark();
          v36 = 72;
LABEL_85:
          v51 = *(void **)(a1 + v36);
          *(_QWORD *)(a1 + v36) = v63;

          --v7;
          goto LABEL_118;
        }
LABEL_134:

LABEL_135:
        v58 = 0;
        v15 = v64;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_136:
        *(_WORD *)(a1 + 116) |= 0x200u;
        *(_WORD *)(a1 + 116) |= 0x10u;
        *(_WORD *)(a1 + 116) |= 0x100u;
        *(_WORD *)(a1 + 116) |= 0x20u;
        *(_WORD *)(a1 + 116) |= 0x40u;
        *(_WORD *)(a1 + 116) |= 0x80u;
        if ((v58 & 1) != 0)
        {
LABEL_137:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) != 0)
            goto LABEL_138;
        }
        else
        {
          v3 = 0;
          if ((v15 & 1) != 0)
          {
LABEL_138:
            v61 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      case 9:
        if ((v8 & 1) == 0)
          goto LABEL_94;
        *(_WORD *)(a1 + 116) |= 2u;
        v52 = *v17;
        v53 = *(_QWORD *)(v3 + v52);
        if (v53 <= 0xFFFFFFFFFFFFFFF7 && v53 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v54 = *(_QWORD *)(*(_QWORD *)(v3 + *v19) + v53);
          *(_QWORD *)(v3 + v52) = v53 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v18) = 1;
          v54 = 0;
        }
        *(_QWORD *)(a1 + 48) = v54;
        goto LABEL_119;
      case 10:
        if ((v8 & 1) != 0)
        {
          if (!PBReaderPlaceMark()
            || (GEOVLFPositionContextClassificationReadAllFrom(a1 + 16, v3) & 1) == 0)
          {
            goto LABEL_135;
          }
          PBReaderRecallMark();
          *(_WORD *)(a1 + 116) |= 1u;
          goto LABEL_118;
        }
LABEL_94:
        v55 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v64;
        if ((v55 & 1) == 0)
        {
LABEL_133:
          v58 = 0;
          goto LABEL_136;
        }
        goto LABEL_119;
      default:
        v37 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v64;
        if (!v37)
          goto LABEL_133;
        goto LABEL_119;
    }
  }
}

void sub_189ABDAA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189ABDBEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189ABDD30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189ABDE74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189ABDFB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189ABEAE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOVLFLocalizationDetailsCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  objc_msgSend(a1[11], "readAll:", 1);
  objc_msgSend(a1[5], "readAll:", 1);
  objc_msgSend(a1[10], "readAll:", 1);
  objc_msgSend(a1[7], "readAll:", 1);
  objc_msgSend(a1[8], "readAll:", 1);
  return objc_msgSend(a1[9], "readAll:", 1);
}

uint64_t GEOVLFLocalizationDetailsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 100))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOVLFLocalizationDetailsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 96) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 100) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOVLFLocalizationDetailsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOVLFLocalizationDetailsReadAllFrom_initialTag;
  Specified = GEOVLFLocalizationDetailsReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOVLFLocalizationDetailsCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
  return Specified;
}

void sub_189ABECFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOVLFLocalizationDetailsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  uint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOVLFLocalizationDetailsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189ABED5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFTileDetailsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _BOOL8 v23;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_38;
        v17 = 0;
        while (1)
        {
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          v20 = v19 + 1;
          if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
            break;
          v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
          *(_QWORD *)&a1[v18] = v20;
          if (v21 < 0 && v17++ <= 8)
            continue;
          goto LABEL_35;
        }
        a1[*v4] = 1;
      }
      else if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOVLFUsageTileIDIsValid(a1))
        {
LABEL_38:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_38;
      }
LABEL_35:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

BOOL GEOVLFSuccessDetailsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  _BOOL8 v32;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_51;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        goto LABEL_51;
      v18 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v18 == 2)
      {
        if (v16 != 1)
          goto LABEL_53;
        v24 = *v2;
        v25 = *(_QWORD *)&a1[v24];
        if (v25 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_49;
        v26 = v25 + 8;
        if (v26 > *(_QWORD *)&a1[*v3])
          goto LABEL_49;
        *(_QWORD *)&a1[v24] = v26;
      }
      else
      {
        if ((_DWORD)v18 == 1)
        {
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOVLFCorrectionIsValid(a1))
          {
LABEL_53:
            PBReaderRecallMark();
            return 0;
          }
LABEL_24:
          PBReaderRecallMark();
          goto LABEL_50;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_53;
      }
LABEL_50:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_51;
    }
    if (v16 != 2)
    {
      if ((v8 & 7) != 0)
        goto LABEL_53;
      while (1)
      {
        v19 = *v2;
        v20 = *(_QWORD *)&a1[v19];
        v21 = v20 + 1;
        if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
          break;
        v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
        *(_QWORD *)&a1[v19] = v21;
        if (v22 < 0)
        {
          v23 = v16++;
          if (v23 <= 8)
            continue;
        }
        goto LABEL_50;
      }
      v14 = *v4;
LABEL_49:
      a1[v14] = 1;
      goto LABEL_50;
    }
    if (!PBReaderPlaceMark())
      goto LABEL_53;
LABEL_39:
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
    {
      v27 = a1[*v4];
      if (a1[*v4])
        break;
      while (1)
      {
        v28 = *v2;
        v29 = *(_QWORD *)&a1[v28];
        v30 = v29 + 1;
        if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
          break;
        v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
        *(_QWORD *)&a1[v28] = v30;
        if (v31 < 0)
        {
          v13 = v27++ >= 9;
          if (!v13)
            continue;
        }
        goto LABEL_39;
      }
      a1[*v4] = 1;
    }
    goto LABEL_24;
  }
LABEL_51:
  v32 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v32;
}

void sub_189ABF500(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOVLFLocalizationDetailsIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 104));
  v2 = *(unsigned __int16 *)(a1 + 116);
  if ((v2 & 0x600) != 0)
    return 1;
  if ((v2 & 0x10) != 0)
  {
    if (GEOVLFLocalizationAlgorithmDetailsIsDirty(*(_QWORD *)(a1 + 40)))
      return 1;
    v2 = *(unsigned __int16 *)(a1 + 116);
  }
  if ((v2 & 0x100) == 0)
    goto LABEL_9;
  if (GEOVLFSuccessDetailsIsDirty(*(_QWORD *)(a1 + 80)))
    return 1;
  v2 = *(unsigned __int16 *)(a1 + 116);
LABEL_9:
  if ((v2 & 0x60) != 0)
    return 1;
  return (v2 >> 7) & 1;
}

os_unfair_lock_s *GEOVLFLocalizationDetailsIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOVLFLocalizationDetailsIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 26);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189ABFA8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AC0270(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOVLFLocalizationResultsReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  _BOOL4 v16;
  int *v17;
  int *v18;
  BOOL v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  _BOOL4 v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  GEOVLFCorrection *v37;
  void *v38;
  int v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  int v51;
  int v52;
  void *v53;
  _BOOL4 v55;
  BOOL v56;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 72) >> 3) & 1) + ((*(unsigned __int8 *)(a1 + 72) >> 2) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 & 1 | v11;
        if ((v14 != 0) | v8 & 1)
          v15 = 0;
        else
          v15 = a3;
        v16 = v14 != 0;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (v14)
          v19 = 1;
        else
          v19 = v15 == 0;
        v56 = v19;
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_78;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v17;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_26;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_28;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_26:
    v29 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v23 = 0;
LABEL_28:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_78:
      if (v16)
      {
        v49 = 1;
        goto LABEL_93;
      }
      if (!v15)
        goto LABEL_94;
      while (1)
      {
        v52 = *v15++;
        v51 = v52;
        if (v52 == 1)
          break;
        if (v51 == 3)
        {
          v50 = 4;
LABEL_84:
          *(_BYTE *)(a1 + 72) |= v50;
        }
        else if (!v51)
        {
          goto LABEL_94;
        }
      }
      v50 = 8;
      goto LABEL_84;
    }
    v31 = v23 >> 3;
    v32 = v16;
    if (!v56)
    {
      v33 = v15;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32)
          goto LABEL_65;
        if ((*(_BYTE *)(a1 + 72) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_90;
          v55 = v16;
          v37 = objc_alloc_init(GEOVLFCorrection);
          if (GEOVLFCorrectionReadAllFrom((uint64_t)v37, (void *)v3))
          {
            PBReaderRecallMark();
            v38 = *(void **)(a1 + 48);
            *(_QWORD *)(a1 + 48) = v37;

            --v7;
            goto LABEL_60;
          }
          goto LABEL_91;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_90;
        v7 += *(unsigned __int8 *)(a1 + 72) << 28 >> 31;
        goto LABEL_73;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_65;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        *(_BYTE *)(a1 + 72) |= 2u;
        while (2)
        {
          v43 = *v17;
          v44 = *(_QWORD *)(v3 + v43);
          v45 = v44 + 1;
          if (v44 == -1 || v45 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v46 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v44);
            *(_QWORD *)(v3 + v43) = v45;
            v42 |= (unint64_t)(v46 & 0x7F) << v40;
            if (v46 < 0)
            {
              v40 += 7;
              v28 = v41++ >= 9;
              if (v28)
              {
                LODWORD(v42) = 0;
                goto LABEL_70;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v42) = 0;
LABEL_70:
        *(_DWORD *)(a1 + 68) = v42;
        goto LABEL_74;
      case 3:
        if (!v32 || (*(_BYTE *)(a1 + 72) & 4) != 0)
          goto LABEL_65;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_90;
        v55 = v16;
        v37 = objc_alloc_init(GEOVLFLocalizationDetails);
        if (GEOVLFLocalizationDetailsReadAllFrom((uint64_t)v37, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          -[GEOVLFLocalizationResults _addNoFlagsLocalizationDetails:](a1, v37);

LABEL_60:
          v16 = v55;
LABEL_73:
          v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_74:
          if (v7)
            v48 = 1;
          else
            v48 = v16;
          if ((v48 & 1) == 0)
            goto LABEL_78;
          continue;
        }
LABEL_91:

        v49 = 0;
        v16 = v55;
LABEL_92:
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_93:
        *(_BYTE *)(a1 + 72) |= 8u;
        *(_BYTE *)(a1 + 72) |= 4u;
        if ((v49 & 1) != 0)
        {
LABEL_94:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if (v16)
            goto LABEL_95;
        }
        else
        {
          v3 = 0;
          if (v16)
          {
LABEL_95:
            v53 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      case 4:
        if ((v8 & 1) != 0)
        {
          if (!PBReaderPlaceMark()
            || (GEOVLFPositionContextClassificationReadAllFrom(a1 + 16, v3) & 1) == 0)
          {
LABEL_90:
            v49 = 0;
            goto LABEL_92;
          }
          PBReaderRecallMark();
          *(_BYTE *)(a1 + 72) |= 1u;
          goto LABEL_73;
        }
LABEL_65:
        v47 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if ((v47 & 1) == 0)
        {
LABEL_89:
          v49 = 0;
          goto LABEL_93;
        }
        goto LABEL_74;
      default:
        v39 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (!v39)
          goto LABEL_89;
        goto LABEL_74;
    }
  }
}

void sub_189AC0B38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AC1648(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOVLFLocalizationResultsCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 48), "readAll:", 1);
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v2 = *(id *)(a1 + 40);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "readAll:", 1, (_QWORD)v7);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

uint64_t GEOVLFLocalizationResultsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOVLFLocalizationResultsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOVLFLocalizationResultsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOVLFLocalizationResultsReadAllFrom_initialTag;
  Specified = GEOVLFLocalizationResultsReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOVLFLocalizationResultsCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_189AC18EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOVLFLocalizationResultsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  uint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOVLFLocalizationResultsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189AC194C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AC1BD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOVLFLocalizationResultsIsDirty(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  if ((*(_BYTE *)(a1 + 72) & 0x1C) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 72) & 4) == 0)
    return 0;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v3 = *(id *)(a1 + 40);
  v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v4 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v3);
        if ((GEOVLFLocalizationDetailsIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v7 + 1) + 8 * i)) & 1) != 0)
        {
          v2 = 1;
          goto LABEL_15;
        }
      }
      v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_15:

  return v2;
}

os_unfair_lock_s *GEOVLFLocalizationResultsIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOVLFLocalizationResultsIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 16);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189AC2288(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFLocationReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  GEOLatLng *v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  _BOOL8 v42;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_69;
            v18 = objc_alloc_init(GEOLatLng);
            if (GEOLatLngReadAllFrom((uint64_t)v18, v3))
            {
              PBReaderRecallMark();
              v19 = *(void **)(a1 + 56);
              *(_QWORD *)(a1 + 56) = v18;

              continue;
            }

            goto LABEL_69;
          case 2u:
            if (!PBReaderPlaceMark() || (GEOECEFCoordinateReadAllFrom(a1 + 8, (uint64_t)v3) & 1) == 0)
              goto LABEL_69;
            PBReaderRecallMark();
            *(_BYTE *)(a1 + 80) |= 1u;
            continue;
          case 3u:
            *(_BYTE *)(a1 + 80) |= 4u;
            v20 = *v4;
            v21 = *(_QWORD *)&v3[v20];
            if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v22 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v21);
              *(_QWORD *)&v3[v20] = v21 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v22 = 0;
            }
            v41 = 48;
            goto LABEL_65;
          case 4u:
            *(_BYTE *)(a1 + 80) |= 8u;
            v23 = *v4;
            v24 = *(_QWORD *)&v3[v23];
            if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v22 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v24);
              *(_QWORD *)&v3[v23] = v24 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v22 = 0;
            }
            v41 = 64;
            goto LABEL_65;
          case 5u:
            *(_BYTE *)(a1 + 80) |= 2u;
            v25 = *v4;
            v26 = *(_QWORD *)&v3[v25];
            if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v22 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v26);
              *(_QWORD *)&v3[v25] = v26 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v22 = 0;
            }
            v41 = 40;
LABEL_65:
            *(_QWORD *)(a1 + v41) = v22;
            continue;
          case 6u:
            v27 = 0;
            v28 = 0;
            v29 = 0;
            *(_BYTE *)(a1 + 80) |= 0x10u;
            while (2)
            {
              v30 = *v4;
              v31 = *(_QWORD *)&v3[v30];
              v32 = v31 + 1;
              if (v31 == -1 || v32 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
                *(_QWORD *)&v3[v30] = v32;
                v29 |= (unint64_t)(v33 & 0x7F) << v27;
                if (v33 < 0)
                {
                  v27 += 7;
                  v15 = v28++ >= 9;
                  if (v15)
                  {
                    LODWORD(v29) = 0;
                    goto LABEL_54;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v29) = 0;
LABEL_54:
            *(_DWORD *)(a1 + 72) = v29;
            continue;
          case 7u:
            v34 = 0;
            v35 = 0;
            v36 = 0;
            *(_BYTE *)(a1 + 80) |= 0x20u;
            break;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_69;
            continue;
        }
        while (1)
        {
          v37 = *v4;
          v38 = *(_QWORD *)&v3[v37];
          v39 = v38 + 1;
          if (v38 == -1 || v39 > *(_QWORD *)&v3[*v5])
            break;
          v40 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v38);
          *(_QWORD *)&v3[v37] = v39;
          v36 |= (unint64_t)(v40 & 0x7F) << v34;
          if ((v40 & 0x80) == 0)
            goto LABEL_56;
          v34 += 7;
          v15 = v35++ >= 9;
          if (v15)
          {
            v36 = 0;
            goto LABEL_58;
          }
        }
        v3[*v6] = 1;
LABEL_56:
        if (v3[*v6])
          v36 = 0;
LABEL_58:
        *(_BYTE *)(a1 + 76) = v36 != 0;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v42 = v3[*v6] == 0;
  }
  else
  {
LABEL_69:
    v42 = 0;
  }
  objc_sync_exit(v3);

  return v42;
}

void sub_189AC35CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFLocationReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOVLFLocationReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189AC362C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFPoint3DReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          *(_BYTE *)(a1 + 20) |= 4u;
          v22 = *v4;
          v23 = *(_QWORD *)&v3[v22];
          if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *(_QWORD *)&v3[*v5])
          {
            v21 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v23 + 4;
          }
          else
          {
            v3[*v6] = 1;
            v21 = 0;
          }
          v26 = &OBJC_IVAR___GEOVLFPoint3D__z;
        }
        else if ((_DWORD)v18 == 2)
        {
          *(_BYTE *)(a1 + 20) |= 2u;
          v24 = *v4;
          v25 = *(_QWORD *)&v3[v24];
          if (v25 <= 0xFFFFFFFFFFFFFFFBLL && v25 + 4 <= *(_QWORD *)&v3[*v5])
          {
            v21 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v25);
            *(_QWORD *)&v3[v24] = v25 + 4;
          }
          else
          {
            v3[*v6] = 1;
            v21 = 0;
          }
          v26 = &OBJC_IVAR___GEOVLFPoint3D__y;
        }
        else
        {
          if ((_DWORD)v18 != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_42;
            continue;
          }
          *(_BYTE *)(a1 + 20) |= 1u;
          v19 = *v4;
          v20 = *(_QWORD *)&v3[v19];
          if (v20 <= 0xFFFFFFFFFFFFFFFBLL && v20 + 4 <= *(_QWORD *)&v3[*v5])
          {
            v21 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v20);
            *(_QWORD *)&v3[v19] = v20 + 4;
          }
          else
          {
            v3[*v6] = 1;
            v21 = 0;
          }
          v26 = &OBJC_IVAR___GEOVLFPoint3D__x;
        }
        *(_DWORD *)(a1 + *v26) = v21;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_42:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_189AC46E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFPoint3DReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 v4;

  v3 = a2;
  objc_sync_enter(v3);
  v4 = GEOVLFPoint3DReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return v4;
}

void sub_189AC4740(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFPoint3DIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL8 v22;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      v18 = v8 >> 3;
      if ((v8 >> 3) == 3 || (_DWORD)v18 == 2 || (_DWORD)v18 == 1)
      {
        if (v16 != 5)
          goto LABEL_31;
        v19 = *v2;
        v20 = *(_QWORD *)&a1[v19];
        if (v20 <= 0xFFFFFFFFFFFFFFFBLL && (v21 = v20 + 4, v21 <= *(_QWORD *)&a1[*v3]))
          *(_QWORD *)&a1[v19] = v21;
        else
          a1[v14] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_31:
        v22 = 0;
        goto LABEL_30;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v22 = a1[*v4] == 0;
LABEL_30:
  PBReaderRecallMark();
  return v22;
}

id GEOVLFPositionContextClassificationDescription(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0CB3940];
  _GEOVLFPositionContextClassificationDictionaryRepresentation(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("GEOVLFPositionContextClassification<%p> %@"), a1, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id _GEOVLFPositionContextClassificationDictionaryRepresentation(uint64_t a1)
{
  void *v2;
  char v3;
  void *v4;
  void *v5;
  uint64_t v6;
  __CFString *v7;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(_BYTE *)(a1 + 20);
  if ((v3 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 20) & 2) == 0)
      goto LABEL_3;
LABEL_6:
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 8));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v5, CFSTR("outdoorProbability"));

    if ((*(_BYTE *)(a1 + 20) & 4) == 0)
      return v2;
    goto LABEL_7;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v4, CFSTR("indoorProbability"));

  v3 = *(_BYTE *)(a1 + 20);
  if ((v3 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v3 & 4) == 0)
    return v2;
LABEL_7:
  v6 = *(int *)(a1 + 16);
  if (v6 >= 3)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), *(int *)(a1 + 16));
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v7 = off_1E1C23AB8[v6];
  }
  objc_msgSend(v2, "setObject:forKey:", v7, CFSTR("type"));

  return v2;
}

void _GEOVLFPositionContextClassificationFromDictionaryRepresentation(void *a1, uint64_t a2)
{
  void *v3;
  id v4;
  int v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;

  v10 = a1;
  objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("type"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_BYTE *)(a2 + 20) |= 4u;
    v4 = v3;
    if ((objc_msgSend(v4, "isEqualToString:", CFSTR("VLFPositionContextType_UNKNOWN")) & 1) != 0)
    {
      v5 = 0;
    }
    else if ((objc_msgSend(v4, "isEqualToString:", CFSTR("VLFPositionContextType_OUTDOOR")) & 1) != 0)
    {
      v5 = 1;
    }
    else if (objc_msgSend(v4, "isEqualToString:", CFSTR("VLFPositionContextType_INDOOR")))
    {
      v5 = 2;
    }
    else
    {
      v5 = 0;
    }

  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      goto LABEL_13;
    v5 = objc_msgSend(v3, "intValue");
  }
  *(_DWORD *)(a2 + 16) = v5;
LABEL_13:

  objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("indoorProbability"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_BYTE *)(a2 + 20) |= 1u;
    objc_msgSend(v6, "doubleValue");
    *(_QWORD *)a2 = v7;
  }

  objc_msgSend(v10, "objectForKeyedSubscript:", CFSTR("outdoorProbability"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_BYTE *)(a2 + 20) |= 2u;
    objc_msgSend(v8, "doubleValue");
    *(_QWORD *)(a2 + 8) = v9;
  }

}

uint64_t GEOVLFPositionContextClassificationReadFrom(uint64_t a1, uint64_t a2)
{
  return GEOVLFPositionContextClassificationReadAllFrom(a1, a2);
}

uint64_t GEOVLFPositionContextClassificationReadAllFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v27 = *v3;
        v28 = *(_QWORD *)(a2 + v27);
        if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v29 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v29 = 0;
        }
        *(_QWORD *)(a1 + 8) = v29;
      }
      else if ((_DWORD)v19 == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v30 = *v3;
        v31 = *(_QWORD *)(a2 + v30);
        if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v32 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v31);
          *(_QWORD *)(a2 + v30) = v31 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v32 = 0;
        }
        *(_QWORD *)a1 = v32;
      }
      else if ((_DWORD)v19 == 1)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 20) |= 4u;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v4))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0)
            goto LABEL_37;
          v20 += 7;
          v15 = v21++ >= 9;
          if (v15)
          {
            LODWORD(v22) = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_39:
        *(_DWORD *)(a1 + 16) = v22;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t GEOVLFPositionContextClassificationHash()
{
  return PBHashBytes();
}

void sub_189AC5648(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOVLFSLAMTrackReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  int v25;
  int v26;
  unint64_t v28;
  BOOL v29;
  int *v30;
  int v31;
  int v32;
  BOOL v33;
  GEOVLFPoint3D *v34;
  void *v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  int v65;
  char v66;
  void *v67;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 84);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 80));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 92) >> 3) & 1)
      + (*(_BYTE *)(a1 + 92) & 1)
      + ((*(unsigned __int8 *)(a1 + 92) >> 1) & 1)
      + ((*(unsigned __int8 *)(a1 + 92) >> 2) & 1);
  while (1)
  {
    v11 = a3[v7];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v7;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v9 | (v10 > 2);
  if (v9 & 1 | (v10 > 2) | v8 & 1)
    v13 = 0;
  else
    v13 = a3;
  v14 = (int *)MEMORY[0x1E0D82BF0];
  v15 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
  {
LABEL_104:
    if ((v12 & 1) != 0)
    {
      v64 = 1;
      goto LABEL_106;
    }
    if (v13)
    {
      while (1)
      {
        v65 = *v13++;
        v66 = 8;
        switch(v65)
        {
          case 0:
            goto LABEL_115;
          case 1:
            goto LABEL_114;
          case 2:
            v66 = 1;
            goto LABEL_114;
          case 3:
            v66 = 2;
            goto LABEL_114;
          case 4:
            v66 = 4;
LABEL_114:
            *(_BYTE *)(a1 + 92) |= v66;
            break;
          default:
            continue;
        }
      }
    }
    goto LABEL_115;
  }
  v16 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(v3 + *v15))
      goto LABEL_104;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    while (1)
    {
      v20 = *v14;
      v21 = *(_QWORD *)(v3 + v20);
      v22 = v21 + 1;
      if (v21 == -1 || v22 > *(_QWORD *)(v3 + *v6))
        break;
      v23 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v21);
      *(_QWORD *)(v3 + v20) = v22;
      v19 |= (unint64_t)(v23 & 0x7F) << v17;
      if ((v23 & 0x80) == 0)
        goto LABEL_24;
      v17 += 7;
      v24 = v18++ >= 9;
      if (v24)
      {
        v19 = 0;
        v25 = *(unsigned __int8 *)(v3 + *v15);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v15) = 1;
LABEL_24:
    v25 = *(unsigned __int8 *)(v3 + *v15);
    if (*(_BYTE *)(v3 + *v15))
      v19 = 0;
LABEL_26:
    v26 = v19 & 7;
    if (v25 || v26 == 4)
      goto LABEL_104;
    v28 = v19 >> 3;
    v29 = v12;
    if (!((v13 == 0) | v12 & 1))
    {
      v30 = v13;
      do
      {
        v32 = *v30++;
        v31 = v32;
        v29 = v32 != 0;
        if (v32)
          v33 = v31 == (_DWORD)v28;
        else
          v33 = 1;
      }
      while (!v33);
    }
    switch((int)v28)
    {
      case 1:
        if (!v29)
          goto LABEL_81;
        if ((*(_BYTE *)(a1 + 92) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_118;
          v34 = objc_alloc_init(GEOVLFPoint3D);
          if (GEOVLFPoint3DReadAllFrom((uint64_t)v34, (void *)v3))
          {
            PBReaderRecallMark();
            v35 = *(void **)(a1 + 72);
            *(_QWORD *)(a1 + 72) = v34;

            --v7;
            goto LABEL_80;
          }
          goto LABEL_119;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_118;
        v7 += *(unsigned __int8 *)(a1 + 92) << 28 >> 31;
        goto LABEL_82;
      case 2:
        if (!v29 || (*(_BYTE *)(a1 + 92) & 1) != 0)
          goto LABEL_81;
        if (v26 != 2)
        {
          v50 = 0;
          v51 = 0;
          v52 = 0;
          while (1)
          {
            v53 = *v14;
            v54 = *(_QWORD *)(v3 + v53);
            v55 = v54 + 1;
            if (v54 == -1 || v55 > *(_QWORD *)(v3 + *v6))
              goto LABEL_102;
            v56 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v54);
            *(_QWORD *)(v3 + v53) = v55;
            v52 |= (unint64_t)(v56 & 0x7F) << v50;
            if (v56 < 0)
            {
              v50 += 7;
              v24 = v51++ >= 9;
              if (!v24)
                continue;
            }
            goto LABEL_103;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_118;
        while (*(_QWORD *)(v3 + *v14) < *(_QWORD *)(v3 + *v6) && !*(_BYTE *)(v3 + *v15))
        {
          v36 = 0;
          v37 = 0;
          v38 = 0;
          while (1)
          {
            v39 = *v14;
            v40 = *(_QWORD *)(v3 + v39);
            v41 = v40 + 1;
            if (v40 == -1 || v41 > *(_QWORD *)(v3 + *v6))
              break;
            v42 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v40);
            *(_QWORD *)(v3 + v39) = v41;
            v38 |= (unint64_t)(v42 & 0x7F) << v36;
            if (v42 < 0)
            {
              v36 += 7;
              v24 = v37++ >= 9;
              if (!v24)
                continue;
            }
            goto LABEL_59;
          }
          *(_BYTE *)(v3 + *v15) = 1;
LABEL_59:
          PBRepeatedUInt32Add();
        }
        goto LABEL_87;
      case 3:
        if (!v29 || (*(_BYTE *)(a1 + 92) & 2) != 0)
          goto LABEL_81;
        if (v26 == 2)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_118;
          while (*(_QWORD *)(v3 + *v14) < *(_QWORD *)(v3 + *v6) && !*(_BYTE *)(v3 + *v15))
          {
            v43 = 0;
            v44 = 0;
            v45 = 0;
            while (1)
            {
              v46 = *v14;
              v47 = *(_QWORD *)(v3 + v46);
              v48 = v47 + 1;
              if (v47 == -1 || v48 > *(_QWORD *)(v3 + *v6))
                break;
              v49 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v47);
              *(_QWORD *)(v3 + v46) = v48;
              v45 |= (unint64_t)(v49 & 0x7F) << v43;
              if (v49 < 0)
              {
                v43 += 7;
                v24 = v44++ >= 9;
                if (!v24)
                  continue;
              }
              goto LABEL_74;
            }
            *(_BYTE *)(v3 + *v15) = 1;
LABEL_74:
            PBRepeatedUInt32Add();
          }
LABEL_87:
          PBReaderRecallMark();
        }
        else
        {
          v57 = 0;
          v58 = 0;
          v59 = 0;
          while (1)
          {
            v60 = *v14;
            v61 = *(_QWORD *)(v3 + v60);
            v62 = v61 + 1;
            if (v61 == -1 || v62 > *(_QWORD *)(v3 + *v6))
              break;
            v63 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v61);
            *(_QWORD *)(v3 + v60) = v62;
            v59 |= (unint64_t)(v63 & 0x7F) << v57;
            if (v63 < 0)
            {
              v57 += 7;
              v24 = v58++ >= 9;
              if (!v24)
                continue;
            }
            goto LABEL_103;
          }
LABEL_102:
          *(_BYTE *)(v3 + *v15) = 1;
LABEL_103:
          PBRepeatedUInt32Add();
        }
        goto LABEL_82;
      case 4:
        if (!v29 || (*(_BYTE *)(a1 + 92) & 4) != 0)
        {
LABEL_81:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_118:
            v64 = 0;
            goto LABEL_106;
          }
LABEL_82:
          if (!(v12 & 1 | (v7 != 0)) || *(_QWORD *)(v3 + *v14) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_104;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_118;
        v34 = objc_alloc_init(GEOVLFImagePosition);
        if (GEOVLFImagePositionReadAllFrom((uint64_t)v34, (void *)v3))
        {
          PBReaderRecallMark();
          -[GEOVLFSLAMTrack _addNoFlagsImagePositions:](a1, v34);

LABEL_80:
          v15 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_82;
        }
LABEL_119:

        v64 = 0;
        v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_106:
        *(_BYTE *)(a1 + 92) |= 8u;
        *(_BYTE *)(a1 + 92) |= 1u;
        *(_BYTE *)(a1 + 92) |= 2u;
        *(_BYTE *)(a1 + 92) |= 4u;
        if ((v64 & 1) != 0)
        {
LABEL_115:
          v3 = *(_BYTE *)(v3 + *v15) == 0;
          if ((v12 & 1) != 0)
            goto LABEL_116;
          return v3;
        }
        v3 = 0;
        if ((v12 & 1) == 0)
          return v3;
LABEL_116:
        v67 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

        return v3;
      default:
        if (!PBReaderSkipValueWithTag())
          goto LABEL_118;
        goto LABEL_82;
    }
  }
}

void sub_189AC5F18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AC6258(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AC6598(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AC7024(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOVLFSLAMTrackCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 72), "readAll:", 1);
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v2 = *(id *)(a1 + 64);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "readAll:", 1, (_QWORD)v7);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

unint64_t GEOVLFSLAMTrackReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 84))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOVLFSLAMTrackReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 80) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 84) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOVLFSLAMTrackReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOVLFSLAMTrackReadAllFrom_initialTag;
  Specified = GEOVLFSLAMTrackReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOVLFSLAMTrackCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
  return Specified;
}

void sub_189AC72C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOVLFSLAMTrackReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOVLFSLAMTrackReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189AC7328(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AC75D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFSLAMTrackIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  v2 = (*(_BYTE *)(a1 + 92) & 0x1F) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
  return v2;
}

void sub_189AC7A2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AC7F50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOVLFSuccessDetailsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  _BOOL4 v12;
  int *v13;
  _BOOL4 v14;
  int *v15;
  int *v16;
  char v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int v27;
  int v28;
  unint64_t v30;
  _BOOL4 v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  GEOVLFCorrection *v36;
  void *v37;
  int *v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  int v58;
  char v59;
  int v60;
  int v61;
  char v62;
  void *v63;
  _BOOL4 v65;
  char v66;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 68) >> 2) & 1) + ((*(unsigned __int8 *)(a1 + 68) >> 1) & 1);
  while (1)
  {
    v11 = a3[v8];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v7 = 1;
LABEL_9:
    ++v8;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = (v9 & 1 | v10) != 0;
  if (((v12 | v7) & 1) != 0)
    v13 = 0;
  else
    v13 = a3;
  v14 = v12;
  v15 = (int *)MEMORY[0x1E0D82BF0];
  v16 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
  {
LABEL_91:
    if (v14)
    {
      v59 = 1;
      goto LABEL_93;
    }
    if (!v13)
      goto LABEL_104;
    while (1)
    {
      v61 = *v13++;
      v60 = v61;
      if (v61 == 1)
        break;
      if (v60 == 3)
      {
        v62 = 2;
LABEL_103:
        *(_BYTE *)(a1 + 68) |= v62;
      }
      else if (!v60)
      {
        goto LABEL_104;
      }
    }
    v62 = 4;
    goto LABEL_103;
  }
  if (v13)
    v17 = v12;
  else
    v17 = 1;
  v66 = v17;
  v18 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    if (*(_BYTE *)(v3 + *v16))
      goto LABEL_91;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v15;
      v23 = *(_QWORD *)(v3 + v22);
      v24 = v23 + 1;
      if (v23 == -1 || v24 > *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v24;
      v21 |= (unint64_t)(v25 & 0x7F) << v19;
      if ((v25 & 0x80) == 0)
        goto LABEL_27;
      v19 += 7;
      v26 = v20++ >= 9;
      if (v26)
      {
        v21 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v16);
        goto LABEL_29;
      }
    }
    *(_BYTE *)(v3 + *v16) = 1;
LABEL_27:
    v27 = *(unsigned __int8 *)(v3 + *v16);
    if (*(_BYTE *)(v3 + *v16))
      v21 = 0;
LABEL_29:
    v28 = v21 & 7;
    if (v27 || v28 == 4)
      goto LABEL_91;
    v30 = v21 >> 3;
    v31 = v14;
    if ((v66 & 1) == 0)
    {
      v32 = v13;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    if ((_DWORD)v30 == 3)
    {
      if (v31 && (*(_BYTE *)(a1 + 68) & 2) == 0)
      {
        if (v28 == 2)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_108;
          while (1)
          {
            v38 = (int *)MEMORY[0x1E0D82BC8];
            if (*(_QWORD *)(v3 + *v15) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
              break;
            v39 = 0;
            v40 = 0;
            v41 = 0;
            while (1)
            {
              v42 = *v15;
              v43 = *(_QWORD *)(v3 + v42);
              v44 = v43 + 1;
              if (v43 == -1 || v44 > *(_QWORD *)(v3 + *v6))
                break;
              v45 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v43);
              *(_QWORD *)(v3 + v42) = v44;
              v41 |= (unint64_t)(v45 & 0x7F) << v39;
              if (v45 < 0)
              {
                v39 += 7;
                v26 = v40++ >= 9;
                if (!v26)
                  continue;
              }
              goto LABEL_62;
            }
            *(_BYTE *)(v3 + *v38) = 1;
LABEL_62:
            PBRepeatedUInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v51 = 0;
          v52 = 0;
          v53 = 0;
          while (1)
          {
            v54 = *v15;
            v55 = *(_QWORD *)(v3 + v54);
            v56 = v55 + 1;
            if (v55 == -1 || v56 > *(_QWORD *)(v3 + *v6))
              break;
            v57 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v55);
            *(_QWORD *)(v3 + v54) = v56;
            v53 |= (unint64_t)(v57 & 0x7F) << v51;
            if (v57 < 0)
            {
              v51 += 7;
              v26 = v52++ >= 9;
              if (!v26)
                continue;
            }
            goto LABEL_84;
          }
          *(_BYTE *)(v3 + *v16) = 1;
LABEL_84:
          PBRepeatedUInt32Add();
        }
        goto LABEL_85;
      }
      goto LABEL_69;
    }
    if ((_DWORD)v30 == 2)
    {
      if ((v7 & 1) != 0)
      {
        *(_BYTE *)(a1 + 68) |= 1u;
        v46 = *v15;
        v47 = *(_QWORD *)(v3 + v46);
        if (v47 <= 0xFFFFFFFFFFFFFFF7 && v47 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v48 = *(_QWORD *)(*(_QWORD *)(v3 + *v18) + v47);
          *(_QWORD *)(v3 + v46) = v47 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v16) = 1;
          v48 = 0;
        }
        *(_QWORD *)(a1 + 48) = v48;
        goto LABEL_86;
      }
      goto LABEL_69;
    }
    if ((_DWORD)v30 != 1)
    {
      v49 = PBReaderSkipValueWithTag();
      v16 = (int *)MEMORY[0x1E0D82BC8];
      if (!v49)
        goto LABEL_107;
      goto LABEL_86;
    }
    if (v31)
      break;
LABEL_69:
    v50 = PBReaderSkipValueWithTag();
    v16 = (int *)MEMORY[0x1E0D82BC8];
    if ((v50 & 1) == 0)
    {
LABEL_107:
      v59 = 0;
      goto LABEL_93;
    }
LABEL_86:
    if (v8)
      v58 = 1;
    else
      v58 = v14;
    if (v58 != 1 || *(_QWORD *)(v3 + *v15) >= *(_QWORD *)(v3 + *v6))
      goto LABEL_91;
  }
  if ((*(_BYTE *)(a1 + 68) & 4) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
LABEL_108:
      v59 = 0;
      goto LABEL_110;
    }
    v8 += *(unsigned __int8 *)(a1 + 68) << 29 >> 31;
    goto LABEL_85;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_108;
  v65 = v14;
  v36 = objc_alloc_init(GEOVLFCorrection);
  if (GEOVLFCorrectionReadAllFrom((uint64_t)v36, (void *)v3))
  {
    PBReaderRecallMark();
    v37 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v36;

    --v8;
    v14 = v65;
LABEL_85:
    v16 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_86;
  }

  v59 = 0;
  v14 = v65;
LABEL_110:
  v16 = (int *)MEMORY[0x1E0D82BC8];
LABEL_93:
  *(_BYTE *)(a1 + 68) |= 4u;
  *(_BYTE *)(a1 + 68) |= 2u;
  if ((v59 & 1) != 0)
  {
LABEL_104:
    v3 = *(_BYTE *)(v3 + *v16) == 0;
    if (v14)
      goto LABEL_105;
    return v3;
  }
  v3 = 0;
  if (!v14)
    return v3;
LABEL_105:
  v63 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

  return v3;
}

void sub_189AC870C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AC8EAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOVLFSuccessDetailsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOVLFSuccessDetailsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOVLFSuccessDetailsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOVLFSuccessDetailsReadAllFrom_initialTag;
  Specified = GEOVLFSuccessDetailsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 40), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_189AC9050(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOVLFSuccessDetailsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOVLFSuccessDetailsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189AC90B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189AC927C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFSuccessDetailsIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = (*(_BYTE *)(a1 + 68) & 0xE) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_189AC95A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFTileDetailsReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  GEOVLFUsageTileID *v18;
  void *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v23 = *v4;
            v24 = *(_QWORD *)&v3[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&v3[*v5])
              break;
            v26 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v24);
            *(_QWORD *)&v3[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0)
              goto LABEL_34;
            v20 += 7;
            v15 = v21++ >= 9;
            if (v15)
            {
              LODWORD(v22) = 0;
              goto LABEL_36;
            }
          }
          v3[*v6] = 1;
LABEL_34:
          if (v3[*v6])
            LODWORD(v22) = 0;
LABEL_36:
          *(_DWORD *)(a1 + 16) = v22;
        }
        else if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_40;
          v18 = objc_alloc_init(GEOVLFUsageTileID);
          if (!GEOVLFUsageTileIDReadAllFrom((uint64_t)v18, v3))
          {

            goto LABEL_40;
          }
          PBReaderRecallMark();
          v19 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v18;

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_40;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_40:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_189AC9EB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFTileDetailsReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOVLFTileDetailsReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189AC9F14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFUsageTileIDReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            PBReaderReadString();
            v18 = objc_claimAutoreleasedReturnValue();
            v19 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v18;

            break;
          case 2u:
            *(_BYTE *)(a1 + 40) |= 2u;
            v20 = *v4;
            v21 = *(_QWORD *)&v3[v20];
            if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v22 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v21);
              *(_QWORD *)&v3[v20] = v21 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v22 = 0;
            }
            v27 = 24;
            goto LABEL_38;
          case 3u:
            *(_BYTE *)(a1 + 40) |= 4u;
            v23 = *v4;
            v24 = *(_QWORD *)&v3[v23];
            if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v22 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v24);
              *(_QWORD *)&v3[v23] = v24 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v22 = 0;
            }
            v27 = 32;
            goto LABEL_38;
          case 4u:
            *(_BYTE *)(a1 + 40) |= 1u;
            v25 = *v4;
            v26 = *(_QWORD *)&v3[v25];
            if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v22 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v26);
              *(_QWORD *)&v3[v25] = v26 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v22 = 0;
            }
            v27 = 16;
LABEL_38:
            *(_QWORD *)(a1 + v27) = v22;
            break;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_41;
            break;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v28 = v3[*v6] == 0;
  }
  else
  {
LABEL_41:
    v28 = 0;
  }
  objc_sync_exit(v3);

  return v28;
}

void sub_189ACAB0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOVLFUsageTileIDReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 v4;

  v3 = a2;
  objc_sync_enter(v3);
  v4 = GEOVLFUsageTileIDReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return v4;
}

void sub_189ACAB6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMakeGEOAPBatchID(unsigned __int16 a1, uint64_t a2, unsigned int a3)
{
  return a3 | ((unint64_t)a1 << 32) | (a2 << 48);
}

uint64_t GEOBatchAnalyticsSessionType(uint64_t a1)
{
  return WORD2(a1);
}

unint64_t GEOBatchUploadPolicyType(unint64_t a1)
{
  return HIWORD(a1);
}

uint64_t GEOBatchLogMessageType(uint64_t a1)
{
  if ((unsigned __int16)(WORD2(a1) - 1) > 0x12u)
    return 0;
  else
    return dword_189CFADB0[(__int16)(WORD2(a1) - 1)];
}

uint64_t GEOBatchIDIsTelemetryData(uint64_t a1)
{
  return (WORD2(a1) < 0x14u) & (0x83C00u >> SBYTE4(a1));
}

unint64_t GEOMakeGEOAPBatchIDForReqRespMetadata(unsigned int a1)
{
  return a1 | ((unint64_t)(unsigned __int16)geo_userActionAndMetadataSessionType << 32) | ((unint64_t)geo_userActionAndMetadataUploadType << 48);
}

BOOL GEOMightHaveCorrespondingReqRespMetadata(unint64_t a1)
{
  return geo_userActionAndMetadataSessionType == WORD2(a1) && geo_userActionAndMetadataUploadType == HIWORD(a1);
}

void sub_189ACB66C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

Class __getPNRPhoneNumberResolverClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ECDBCD78)
  {
    qword_1ECDBCD78 = _sl_dlopen();
    if (!qword_1ECDBCD78)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("PNRPhoneNumberResolver");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1ECDBCD70 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_189ACE174(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

const __CFString *GEOTransitPaymentMethodTypeAsString(unsigned int a1)
{
  if (a1 > 4)
    return CFSTR("PAYMENT_METHOD_TYPE_UNKNOWN");
  else
    return off_1E1C23B68[a1];
}

unint64_t gcl::ArithmeticEncoder::stop(gcl::ArithmeticEncoder *this)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  int v5;
  unsigned int v6;
  char v7;
  unsigned int v8;
  int v9;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v1 = *((_QWORD *)this + 2);
  v2 = *((int *)this + 11);
  if (v1 + v2 + 3 <= (unint64_t)*((unsigned int *)this + 1))
  {
    v4 = *((_DWORD *)this + 10);
    v5 = *((_DWORD *)this + 6);
    v6 = *((_DWORD *)this + 7) - 1;
    if ((v5 | 1u) <= v6)
    {
      if ((v5 | 3u) <= v6)
      {
        if ((v5 | 7u) <= v6)
        {
          if ((v5 | 0xFu) <= v6)
          {
            if ((v5 | 0x1Fu) <= v6)
            {
              if ((v5 | 0x3Fu) <= v6)
              {
                if ((v5 | 0x7Fu) <= v6)
                {
                  if ((v5 | 0xFFu) <= v6)
                  {
                    if ((v5 | 0x1FFu) <= v6)
                    {
                      if ((v5 | 0x3FFu) <= v6)
                      {
                        if ((v5 | 0x7FFu) <= v6)
                        {
                          if ((v5 | 0xFFFu) <= v6)
                          {
                            if ((v5 | 0x1FFFu) <= v6)
                            {
                              if ((v5 | 0x3FFFu) <= v6)
                              {
                                if ((v5 | 0x7FFFu) <= v6)
                                {
                                  if ((v5 | 0xFFFFu) > v6)
                                    v7 = 15;
                                  else
                                    v7 = 16;
                                }
                                else
                                {
                                  v7 = 14;
                                }
                              }
                              else
                              {
                                v7 = 13;
                              }
                            }
                            else
                            {
                              v7 = 12;
                            }
                          }
                          else
                          {
                            v7 = 11;
                          }
                        }
                        else
                        {
                          v7 = 10;
                        }
                      }
                      else
                      {
                        v7 = 9;
                      }
                    }
                    else
                    {
                      v7 = 8;
                    }
                  }
                  else
                  {
                    v7 = 7;
                  }
                }
                else
                {
                  v7 = 6;
                }
              }
              else
              {
                v7 = 5;
              }
            }
            else
            {
              v7 = 4;
            }
          }
          else
          {
            v7 = 3;
          }
        }
        else
        {
          v7 = 2;
        }
      }
      else
      {
        v7 = 1;
      }
    }
    else
    {
      v7 = 0;
    }
    v8 = v5 | ~(-1 << v7);
    *((_DWORD *)this + 6) = v8;
    if (v4 <= 7)
    {
      v9 = v4 - 8;
      do
        v8 = (2 * v8) | 1;
      while (!__CFADD__(v9++, 1));
      *((_DWORD *)this + 6) = v8;
      *((_DWORD *)this + 10) = 8;
    }
    if (HIBYTE(v8))
    {
      ++*(_BYTE *)(v1 + *((_QWORD *)this + 1) - 1);
      v1 = *((_QWORD *)this + 2);
      if (*((_DWORD *)this + 11))
      {
        do
        {
          *(_BYTE *)(*((_QWORD *)this + 1) + v1) = 0;
          v11 = *((_DWORD *)this + 11);
          v1 = *((_QWORD *)this + 2) + 1;
          *((_QWORD *)this + 2) = v1;
          *((_DWORD *)this + 11) = --v11;
        }
        while (v11);
      }
    }
    else if ((_DWORD)v2)
    {
      do
      {
        *(_BYTE *)(*((_QWORD *)this + 1) + v1) = -1;
        v12 = *((_DWORD *)this + 11);
        v1 = *((_QWORD *)this + 2) + 1;
        *((_QWORD *)this + 2) = v1;
        *((_DWORD *)this + 11) = --v12;
      }
      while (v12);
    }
    *(_BYTE *)(*((_QWORD *)this + 1) + v1) = *((_WORD *)this + 13);
    v13 = *((_QWORD *)this + 1);
    v14 = *((_QWORD *)this + 2) + 1;
    *((_QWORD *)this + 2) = v14;
    *(_BYTE *)(v13 + v14) = BYTE1(*((_DWORD *)this + 6));
    v15 = *((_QWORD *)this + 2) + 1;
    *((_QWORD *)this + 2) = v15;
    if (v4 >= 1)
    {
      *(_BYTE *)(*((_QWORD *)this + 1) + v15) = *((_DWORD *)this + 6);
      v15 = *((_QWORD *)this + 2) + 1;
      *((_QWORD *)this + 2) = v15;
    }
    if (v15 >= 2)
    {
      v16 = *((_QWORD *)this + 1) - 1;
      while (*(unsigned __int8 *)(v16 + v15) == 255)
      {
        *((_QWORD *)this + 2) = --v15;
        if (v15 <= 1)
          return 1;
      }
    }
    return v15;
  }
  else
  {
    *(_DWORD *)this = 1;
    return 0;
  }
}

void gcl::polyline::ACContext::~ACContext(gcl::polyline::ACContext *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)*((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 9);
  if (v3)
  {
    *((_QWORD *)this + 10) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 6);
  if (v4)
  {
    *((_QWORD *)this + 7) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 4) = v5;
    operator delete(v5);
  }
  v6 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v6;
    operator delete(v6);
  }
}

uint64_t gcl::polyline::EncoderImpl::estimateBitsAccurate(int *a1, int a2, int a3, unsigned __int16 **a4)
{
  uint64_t v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned __int16 *v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;

  if (a3 != 1)
  {
    if (a3 == 2)
    {
      if (a2 >= 1)
      {
        LODWORD(v4) = 0;
        v5 = a4[3];
        v6 = a4[12];
        v7 = a2;
        while (1)
        {
          v12 = *a1++;
          v11 = v12;
          if (v12 >= 1)
          {
            v8 = 67584 - *v5;
          }
          else
          {
            if ((v11 & 0x80000000) == 0)
              goto LABEL_7;
            v8 = *v5 + 2048;
          }
          LODWORD(v4) = *(_DWORD *)((char *)&unk_189CFADFC + ((v8 >> 10) & 0x3FFFFFFFFFFFFCLL)) + v4;
LABEL_7:
          v10 = *(_DWORD *)v6;
          v6 += 2;
          v9 = v10;
          if (v11 < 0)
            v11 = -v11;
          v4 = (_DWORD)v4 + 66560 + (v9 << 10) - (__clz((v11 >> v9) + 1) << 11);
          ++v5;
          if (!--v7)
            return v4;
        }
      }
      return 0;
    }
    return 0;
  }
  if (a2 >= 1)
  {
    v13 = 0;
    LODWORD(v4) = 0;
    v14 = *a4;
    v15 = a4[3];
    v16 = a4[6];
    v17 = a4[12];
    do
    {
      v19 = *a1++;
      v18 = v19;
      v21 = *v14++;
      v20 = v21;
      if (v18)
      {
        v22 = *(_DWORD *)((char *)&unk_189CFADFC + (((unint64_t)(67584 - v20) >> 10) & 0x3FFFFFFFFFFFFCLL)) + v4;
        if (v18 >= 0)
          v23 = v18;
        else
          v23 = -v18;
        if (v18 >= 0)
          v24 = 0x10000 - *v15;
        else
          v24 = *v15;
        v25 = v22 + *(_DWORD *)((char *)&unk_189CFADFC + (((v24 + 2048) >> 10) & 0xFCLL));
        v26 = &v16[(int)v13];
        if (v23 > 0x3F)
        {
          v39 = *(_DWORD *)v17;
          v4 = v25
             + 66560
             + *(_DWORD *)((char *)&unk_189CFADFC + (((67584 - (unint64_t)*v26) >> 10) & 0x3FFFFFFFFFFFFCLL))
             + *(_DWORD *)((char *)&unk_189CFADFC + (((67584 - (unint64_t)v26[2]) >> 10) & 0x3FFFFFFFFFFFFCLL))
             + *(_DWORD *)((char *)&unk_189CFADFC + (((67584 - (unint64_t)v26[6]) >> 10) & 0x3FFFFFFFFFFFFCLL))
             + *(_DWORD *)((char *)&unk_189CFADFC + (((67584 - (unint64_t)v26[14]) >> 10) & 0x3FFFFFFFFFFFFCLL))
             + *(_DWORD *)((char *)&unk_189CFADFC + (((67584 - (unint64_t)v26[30]) >> 10) & 0x3FFFFFFFFFFFFCLL))
             + *(_DWORD *)((char *)&unk_189CFADFC + (((67584 - (unint64_t)v26[62]) >> 10) & 0x3FFFFFFFFFFFFCLL))
             + (v39 << 10)
             - (__clz(((v23 - 64) >> v39) + 1) << 11);
        }
        else
        {
          v27 = v23 - 1;
          v28 = *v26;
          if ((v27 & 0x20) != 0)
            v28 = 0x10000 - v28;
          v29 = *(_DWORD *)((char *)&unk_189CFADFC + (((v28 + 2048) >> 10) & 0xFCLL));
          v30 = v26[(v27 >> 5) + 1];
          if ((v27 & 0x10) != 0)
            v30 = 0x10000 - v30;
          v31 = *(_DWORD *)((char *)&unk_189CFADFC + (((v30 + 2048) >> 10) & 0xFCLL));
          v32 = v26[(v27 >> 4) + 3];
          if ((v27 & 8) != 0)
            v32 = 0x10000 - v32;
          v33 = *(_DWORD *)((char *)&unk_189CFADFC + (((v32 + 2048) >> 10) & 0xFCLL));
          v34 = v26[(v27 >> 3) + 7];
          if ((v27 & 4) != 0)
            v34 = 0x10000 - v34;
          v35 = *(_DWORD *)((char *)&unk_189CFADFC + (((v34 + 2048) >> 10) & 0xFCLL));
          v36 = v26[(v27 >> 2) + 15];
          if ((v27 & 2) != 0)
            v36 = 0x10000 - v36;
          v37 = *(_DWORD *)((char *)&unk_189CFADFC + (((v36 + 2048) >> 10) & 0xFCLL));
          v38 = v26[(v27 >> 1) + 31];
          if ((v27 & 1) != 0)
            v38 = 0x10000 - v38;
          v4 = (v29
                            + v25
                            + v31
                            + v33
                            + v35
                            + v37
                            + *(_DWORD *)((char *)&unk_189CFADFC + (((v38 + 2048) >> 10) & 0xFCLL)));
        }
      }
      else
      {
        v4 = (*(_DWORD *)((char *)&unk_189CFADFC + (((v20 + 2048) >> 10) & 0x7CLL)) + v4);
      }
      v13 += 64;
      v17 += 2;
      ++v15;
    }
    while ((unint64_t)a2 << 6 != v13);
    return v4;
  }
  return 0;
}

uint64_t gcl::ArithmeticEncoder::encode(uint64_t result, int a2, _WORD *a3)
{
  unint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  __int16 v7;
  __int16 v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;

  v3 = (unsigned __int16)*a3;
  v4 = *(_DWORD *)(result + 28);
  v5 = (v4 * v3) >> 16;
  if (!a2)
  {
    v8 = *(_WORD *)(result + (~(*a3 >> 7) & 0x1FE) + 48) + *a3;
    *(_DWORD *)(result + 28) = v5;
    *a3 = v8;
    if (v5 > 0x4000)
      return result;
    goto LABEL_5;
  }
  v6 = *(_DWORD *)(result + 24) + v5;
  v5 = v4 - v5;
  v7 = v3 - *(_WORD *)(result + ((v3 >> 7) & 0x1FE) + 48);
  *(_DWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 28) = v5;
  *a3 = v7;
  if (v5 <= 0x4000)
  {
LABEL_5:
    v9 = *(_DWORD *)(result + 24);
    v10 = *(_DWORD *)(result + 40);
    do
    {
      v9 *= 2;
      v5 *= 2;
      *(_DWORD *)(result + 24) = v9;
      *(_DWORD *)(result + 28) = v5;
      *(_DWORD *)(result + 40) = ++v10;
      if (v10 != 8)
        continue;
      v11 = *(_QWORD *)(result + 16);
      v12 = *(int *)(result + 44);
      if (v11 + v12 + 1 > (unint64_t)*(unsigned int *)(result + 4))
        return result;
      if (HIBYTE(v9))
      {
        ++*(_BYTE *)(v11 + *(_QWORD *)(result + 8) - 1);
        v11 = *(_QWORD *)(result + 16);
        if (*(_DWORD *)(result + 44))
        {
          do
          {
            *(_BYTE *)(*(_QWORD *)(result + 8) + v11) = 0;
            v13 = *(_DWORD *)(result + 44);
            v11 = *(_QWORD *)(result + 16) + 1;
            *(_QWORD *)(result + 16) = v11;
            *(_DWORD *)(result + 44) = --v13;
          }
          while (v13);
        }
      }
      else
      {
        if ((v5 + v9) >> 24)
        {
          *(_DWORD *)(result + 44) = v12 + 1;
          goto LABEL_7;
        }
        if ((_DWORD)v12)
        {
          do
          {
            *(_BYTE *)(*(_QWORD *)(result + 8) + v11) = -1;
            v14 = *(_DWORD *)(result + 44);
            v11 = *(_QWORD *)(result + 16) + 1;
            *(_QWORD *)(result + 16) = v11;
            *(_DWORD *)(result + 44) = --v14;
          }
          while (v14);
        }
      }
      *(_BYTE *)(*(_QWORD *)(result + 8) + v11) = *(_WORD *)(result + 26);
      ++*(_QWORD *)(result + 16);
      LOWORD(v9) = *(_WORD *)(result + 24);
      v5 = *(_DWORD *)(result + 28);
LABEL_7:
      v10 = 0;
      v9 = (unsigned __int16)v9;
      *(_DWORD *)(result + 24) = (unsigned __int16)v9;
      *(_DWORD *)(result + 40) = 0;
    }
    while (v5 <= 0x4000);
  }
  return result;
}

unint64_t gcl::polyline::EncoderImpl::encodeResidual(unint64_t result, uint64_t a2, uint64_t a3, int a4, char a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned __int16 *v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned __int16 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  _WORD *v51;
  unsigned int v52;
  _WORD *v53;
  unsigned int v54;
  _WORD *v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  _WORD *v59;
  int i;
  int v61;
  int v62;
  int v63;
  BOOL v64;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  __int16 v72;

  v6 = a3;
  v7 = result;
  if (a5 == 2)
  {
    if (a4 < 1)
      return result;
    v20 = 0;
    v66 = a4;
    while (1)
    {
      v22 = *(_DWORD *)(v6 + 4 * v20);
      v68 = *(_DWORD *)(a2 + 4 * v20);
      v23 = a6[12];
      v24 = *(_DWORD *)(v23 + 4 * v20);
      v67 = a6[3];
      v25 = (unsigned __int16 *)(a6[9] + 2 * v20);
      if (v68 - v22 >= 0)
        v26 = v68 - v22;
      else
        v26 = v22 - v68;
      v27 = 1 << v24;
      if (1 << v24 <= v26)
      {
        v40 = *(_DWORD *)(v7 + 24);
        v39 = *(_DWORD *)(v7 + 28);
        v28 = v26;
        while (1)
        {
          v41 = (v39 * *v25) >> 16;
          v40 += v41;
          v39 -= v41;
          v42 = *v25 - *(_WORD *)(v7 + (((unint64_t)*v25 >> 7) & 0x1FE) + 48);
          *(_DWORD *)(v7 + 24) = v40;
          *(_DWORD *)(v7 + 28) = v39;
          *v25 = v42;
          if (v39 <= 0x4000)
            break;
LABEL_68:
          ++v24;
          v28 -= v27;
          v27 = 1 << v24;
          if (v28 < 1 << v24)
            goto LABEL_39;
        }
        v43 = *(_DWORD *)(v7 + 40);
        while (2)
        {
          v40 *= 2;
          v39 *= 2;
          *(_DWORD *)(v7 + 24) = v40;
          *(_DWORD *)(v7 + 28) = v39;
          *(_DWORD *)(v7 + 40) = ++v43;
          if (v43 != 8)
            goto LABEL_73;
          v44 = *(_QWORD *)(v7 + 16);
          v45 = *(int *)(v7 + 44);
          if (v44 + v45 + 1 > (unint64_t)*(unsigned int *)(v7 + 4))
            goto LABEL_68;
          if (HIBYTE(v40))
          {
            ++*(_BYTE *)(v44 + *(_QWORD *)(v7 + 8) - 1);
            v44 = *(_QWORD *)(v7 + 16);
            if (*(_DWORD *)(v7 + 44))
            {
              do
              {
                *(_BYTE *)(*(_QWORD *)(v7 + 8) + v44) = 0;
                v46 = *(_DWORD *)(v7 + 44);
                v44 = *(_QWORD *)(v7 + 16) + 1;
                *(_QWORD *)(v7 + 16) = v44;
                *(_DWORD *)(v7 + 44) = --v46;
              }
              while (v46);
            }
          }
          else
          {
            if ((v39 + v40) >> 24)
            {
              *(_DWORD *)(v7 + 44) = v45 + 1;
LABEL_72:
              v43 = 0;
              v40 = (unsigned __int16)v40;
              *(_DWORD *)(v7 + 24) = (unsigned __int16)v40;
              *(_DWORD *)(v7 + 40) = 0;
LABEL_73:
              if (v39 > 0x4000)
                goto LABEL_68;
              continue;
            }
            if ((_DWORD)v45)
            {
              do
              {
                *(_BYTE *)(*(_QWORD *)(v7 + 8) + v44) = -1;
                v47 = *(_DWORD *)(v7 + 44);
                v44 = *(_QWORD *)(v7 + 16) + 1;
                *(_QWORD *)(v7 + 16) = v44;
                *(_DWORD *)(v7 + 44) = --v47;
              }
              while (v47);
            }
          }
          break;
        }
        *(_BYTE *)(*(_QWORD *)(v7 + 8) + v44) = *(_WORD *)(v7 + 26);
        ++*(_QWORD *)(v7 + 16);
        LOWORD(v40) = *(_WORD *)(v7 + 24);
        v39 = *(_DWORD *)(v7 + 28);
        goto LABEL_72;
      }
      v28 = v26;
LABEL_39:
      result = gcl::ArithmeticEncoder::encode(v7, 0, v25);
      if (v24)
      {
        v29 = *(_DWORD *)(v7 + 28);
        while (1)
        {
          --v24;
          v30 = (unsigned __int16)(v29 >> 1);
          if (((v28 >> v24) & 1) == 0)
            break;
          v29 -= v30;
          *(_DWORD *)(v7 + 24) += v30;
          *(_DWORD *)(v7 + 28) = v29;
          if (v29 <= 0x4000)
            goto LABEL_46;
LABEL_41:
          if (!v24)
            goto LABEL_61;
        }
        v29 = (unsigned __int16)(v29 >> 1);
        *(_DWORD *)(v7 + 28) = v30;
        if (v30 > 0x4000)
          goto LABEL_41;
LABEL_46:
        v31 = *(_DWORD *)(v7 + 24);
        v32 = *(_DWORD *)(v7 + 40);
        while (2)
        {
          v31 *= 2;
          v29 *= 2;
          *(_DWORD *)(v7 + 24) = v31;
          *(_DWORD *)(v7 + 28) = v29;
          *(_DWORD *)(v7 + 40) = ++v32;
          if (v32 != 8)
            goto LABEL_49;
          v33 = *(_QWORD *)(v7 + 16);
          v34 = *(int *)(v7 + 44);
          if (v33 + v34 + 1 > (unint64_t)*(unsigned int *)(v7 + 4))
            goto LABEL_41;
          if (HIBYTE(v31))
          {
            ++*(_BYTE *)(v33 + *(_QWORD *)(v7 + 8) - 1);
            v33 = *(_QWORD *)(v7 + 16);
            if (*(_DWORD *)(v7 + 44))
            {
              do
              {
                *(_BYTE *)(*(_QWORD *)(v7 + 8) + v33) = 0;
                v35 = *(_DWORD *)(v7 + 44);
                v33 = *(_QWORD *)(v7 + 16) + 1;
                *(_QWORD *)(v7 + 16) = v33;
                *(_DWORD *)(v7 + 44) = --v35;
              }
              while (v35);
            }
          }
          else
          {
            if ((v29 + v31) >> 24)
            {
              *(_DWORD *)(v7 + 44) = v34 + 1;
LABEL_48:
              v32 = 0;
              v31 = (unsigned __int16)v31;
              *(_DWORD *)(v7 + 24) = (unsigned __int16)v31;
              *(_DWORD *)(v7 + 40) = 0;
LABEL_49:
              if (v29 > 0x4000)
                goto LABEL_41;
              continue;
            }
            if ((_DWORD)v34)
            {
              do
              {
                *(_BYTE *)(*(_QWORD *)(v7 + 8) + v33) = -1;
                v36 = *(_DWORD *)(v7 + 44);
                v33 = *(_QWORD *)(v7 + 16) + 1;
                *(_QWORD *)(v7 + 16) = v33;
                *(_DWORD *)(v7 + 44) = --v36;
              }
              while (v36);
            }
          }
          break;
        }
        *(_BYTE *)(*(_QWORD *)(v7 + 8) + v33) = *(_WORD *)(v7 + 26);
        ++*(_QWORD *)(v7 + 16);
        LOWORD(v31) = *(_WORD *)(v7 + 24);
        v29 = *(_DWORD *)(v7 + 28);
        goto LABEL_48;
      }
LABEL_61:
      if (v68 != v22)
        result = gcl::ArithmeticEncoder::encode(v7, v68 - v22 >= 0, (_WORD *)(v67 + 2 * v20));
      v37 = *(_DWORD *)(v23 + 4 * v20);
      v38 = v26 >> v37;
      if (v37 && !v38)
      {
        v21 = -1;
      }
      else
      {
        if (v38 < 2)
          goto LABEL_33;
        v21 = 1;
      }
      *(_DWORD *)(v23 + 4 * v20) = v21 + v37;
LABEL_33:
      if (++v20 == v66)
        return result;
    }
  }
  if (a5 == 1)
  {
    if (a4 < 1)
      return result;
    v48 = 0;
    v69 = a4;
    while (1)
    {
      v49 = *(_DWORD *)(a2 + 4 * v48);
      v50 = *(_DWORD *)(v6 + 4 * v48);
      v51 = (_WORD *)(*a6 + 2 * v48);
      v52 = v49 - v50;
      if (v49 == v50)
      {
        result = gcl::ArithmeticEncoder::encode(v7, 0, v51);
      }
      else
      {
        gcl::ArithmeticEncoder::encode(v7, 1, v51);
        v53 = (_WORD *)(a6[3] + 2 * v48);
        if ((v52 & 0x80000000) != 0)
        {
          gcl::ArithmeticEncoder::encode(v7, 0, v53);
          v52 = -v52;
          v54 = v52 - 1;
          v55 = (_WORD *)(a6[6] + 2 * (int)((_DWORD)v48 << 6));
          if (v52 > 0x3F)
          {
LABEL_94:
            gcl::ArithmeticEncoder::encode(v7, 1, v55);
            gcl::ArithmeticEncoder::encode(v7, 1, v55 + 2);
            gcl::ArithmeticEncoder::encode(v7, 1, v55 + 6);
            gcl::ArithmeticEncoder::encode(v7, 1, v55 + 14);
            gcl::ArithmeticEncoder::encode(v7, 1, v55 + 30);
            gcl::ArithmeticEncoder::encode(v7, 1, v55 + 62);
            v56 = a6[12];
            v57 = v52 - 64;
            v58 = *(_DWORD *)(v56 + 4 * v48);
            v59 = (_WORD *)(a6[9] + 2 * v48);
            for (i = 1 << v58; v57 >= 1 << v58; i = 1 << v58)
            {
              gcl::ArithmeticEncoder::encode(v7, 1, v59);
              ++v58;
              v57 -= i;
            }
            result = gcl::ArithmeticEncoder::encode(v7, 0, v59);
            if (v58)
            {
              v61 = v58 - 1;
              do
              {
                v72 = 0x8000;
                result = gcl::ArithmeticEncoder::encode(v7, (v57 >> v61--) & 1, &v72);
              }
              while (v61 != -1);
            }
            v62 = *(_DWORD *)(v56 + 4 * v48);
            v63 = v54 >> v62;
            if (v62)
              v64 = v63 == 0;
            else
              v64 = 0;
            if (v64)
            {
              *(_DWORD *)(v56 + 4 * v48) = v62 - 1;
              v6 = a3;
            }
            else
            {
              v6 = a3;
              if (v63 >= 2)
                *(_DWORD *)(v56 + 4 * v48) = v62 + 1;
            }
            goto LABEL_88;
          }
        }
        else
        {
          gcl::ArithmeticEncoder::encode(v7, 1, v53);
          v54 = v52 - 1;
          v55 = (_WORD *)(a6[6] + 2 * (int)((_DWORD)v48 << 6));
          if (v52 > 0x3F)
            goto LABEL_94;
        }
        gcl::ArithmeticEncoder::encode(v7, (v54 >> 5) & 1, v55);
        gcl::ArithmeticEncoder::encode(v7, (v54 >> 4) & 1, &v55[(v54 >> 5) + 1]);
        gcl::ArithmeticEncoder::encode(v7, (v54 >> 3) & 1, &v55[(v54 >> 4) + 3]);
        gcl::ArithmeticEncoder::encode(v7, (v54 >> 2) & 1, &v55[(v54 >> 3) + 7]);
        gcl::ArithmeticEncoder::encode(v7, (v54 >> 1) & 1, &v55[(v54 >> 2) + 15]);
        result = gcl::ArithmeticEncoder::encode(v7, v54 & 1, &v55[(v54 >> 1) + 31]);
        v6 = a3;
      }
LABEL_88:
      if (++v48 == v69)
        return result;
    }
  }
  if (!a5 && a4 >= 1)
  {
    v8 = 0;
    while (1)
    {
      v9 = *(_DWORD *)(*(_QWORD *)(v7 + 1072) + 4 * v8);
      if (v9 >= 1)
        break;
LABEL_6:
      if (++v8 == a4)
        return result;
    }
    v10 = 0;
    v11 = *(_DWORD *)(a2 + 4 * v8) - *(_DWORD *)(a3 + 4 * v8);
    v12 = *(_DWORD *)(v7 + 28);
    while (1)
    {
      v13 = (unsigned __int16)(v12 >> 1);
      if (((v11 >> v10) & 1) == 0)
        break;
      v12 -= v13;
      *(_DWORD *)(v7 + 24) += v13;
      *(_DWORD *)(v7 + 28) = v12;
      if (v12 <= 0x4000)
        goto LABEL_14;
LABEL_9:
      if (++v10 == v9)
        goto LABEL_6;
    }
    v12 = (unsigned __int16)(v12 >> 1);
    *(_DWORD *)(v7 + 28) = v13;
    if (v13 > 0x4000)
      goto LABEL_9;
LABEL_14:
    v14 = *(_DWORD *)(v7 + 24);
    v15 = *(_DWORD *)(v7 + 40);
    while (1)
    {
      v14 *= 2;
      v12 *= 2;
      *(_DWORD *)(v7 + 24) = v14;
      *(_DWORD *)(v7 + 28) = v12;
      *(_DWORD *)(v7 + 40) = ++v15;
      if (v15 != 8)
        goto LABEL_17;
      v16 = *(_QWORD *)(v7 + 16);
      v17 = *(int *)(v7 + 44);
      result = v16 + v17 + 1;
      if (result > *(unsigned int *)(v7 + 4))
        goto LABEL_9;
      result = HIBYTE(v14);
      if ((_DWORD)result)
      {
        ++*(_BYTE *)(v16 + *(_QWORD *)(v7 + 8) - 1);
        v16 = *(_QWORD *)(v7 + 16);
        if (*(_DWORD *)(v7 + 44))
        {
          do
          {
            *(_BYTE *)(*(_QWORD *)(v7 + 8) + v16) = 0;
            v18 = *(_DWORD *)(v7 + 44);
            v16 = *(_QWORD *)(v7 + 16) + 1;
            *(_QWORD *)(v7 + 16) = v16;
            *(_DWORD *)(v7 + 44) = --v18;
          }
          while (v18);
        }
      }
      else
      {
        result = (v12 + v14) >> 24;
        if ((_DWORD)result)
        {
          *(_DWORD *)(v7 + 44) = v17 + 1;
          goto LABEL_16;
        }
        if ((_DWORD)v17)
        {
          do
          {
            *(_BYTE *)(*(_QWORD *)(v7 + 8) + v16) = -1;
            v19 = *(_DWORD *)(v7 + 44);
            v16 = *(_QWORD *)(v7 + 16) + 1;
            *(_QWORD *)(v7 + 16) = v16;
            *(_DWORD *)(v7 + 44) = --v19;
          }
          while (v19);
        }
      }
      *(_BYTE *)(*(_QWORD *)(v7 + 8) + v16) = *(_WORD *)(v7 + 26);
      ++*(_QWORD *)(v7 + 16);
      LOWORD(v14) = *(_WORD *)(v7 + 24);
      v12 = *(_DWORD *)(v7 + 28);
LABEL_16:
      v15 = 0;
      v14 = (unsigned __int16)v14;
      *(_DWORD *)(v7 + 24) = (unsigned __int16)v14;
      *(_DWORD *)(v7 + 40) = 0;
LABEL_17:
      if (v12 > 0x4000)
        goto LABEL_9;
    }
  }
  return result;
}

uint64_t gcl::polyline::EncoderImpl::compressAttributes(gcl::ArithmeticEncoder *this, uint64_t a2, unsigned __int8 *a3, char a4, unint64_t a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t *a10, unsigned __int8 *a11, char a12)
{
  uint64_t result;
  int v15;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  _BOOL8 v47;
  int v48;
  int v49;
  unsigned __int16 v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  __int16 v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  unsigned __int16 *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  unint64_t v83;
  unsigned int v84;
  unsigned __int16 v85;
  unsigned __int16 v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  _WORD *v94;
  int i;
  int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  BOOL v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  _WORD v112[2];
  __int16 v113;
  _QWORD __b[4];

  __b[3] = *MEMORY[0x1E0C80C00];
  result = 5;
  if (a5 > 0xFF)
    return result;
  if (!a2)
    return result;
  v15 = a7;
  if ((unint64_t)(a7 - 256) < 0xFFFFFFFFFFFFFF01
    || a11[5] - 1 < 4
    || (a11[4] | 2) == 2
    || !a3 && a11[6])
  {
    return result;
  }
  v19 = a9;
  v20 = a8;
  if (a12)
  {
    if ((uint64_t)a9 < 4)
      goto LABEL_23;
    *(_DWORD *)a8 = -1214009963;
    if (a9 < 9)
      goto LABEL_23;
    *(_BYTE *)(a8 + 8) = 0;
    if (a9 == 9)
      goto LABEL_23;
    *(_BYTE *)(a8 + 9) = 2;
    if (((a9 - 8) & 0xFFFFFFFFFFFFFFFELL) == 2)
      goto LABEL_23;
    *(_WORD *)(a8 + 10) = 0;
    if (a9 < 0x14)
      goto LABEL_23;
    *(_DWORD *)(a8 + 16) = a6;
    if (a9 == 20
      || (*(_BYTE *)(a8 + 20) = a4, a9 == 21)
      || (*(_BYTE *)(a8 + 21) = a5, a9 == 22)
      || (*(_BYTE *)(a8 + 22) = a7, a9 == 23)
      || (*(_BYTE *)(a8 + 23) = a11[4], a9 == 24)
      || (*(_BYTE *)(a8 + 24) = a11[5], a9 == 25)
      || (*(_BYTE *)(a8 + 25) = a11[6], a9 == 26)
      || (*(_BYTE *)(a8 + 26) = 1, a9 == 27))
    {
LABEL_23:
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v19 = a9 - 28;
      v20 = a8 + 28;
      *(_BYTE *)(a8 + 27) = 0;
    }
  }
  v21 = 0;
  v110 = v19;
  v111 = v20;
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 1) = v19 & ~(v19 >> 63);
  *(_QWORD *)&v22 = 0xFFFF00000000;
  *((_QWORD *)&v22 + 1) = 0xFFFF00000000;
  *(_OWORD *)((char *)this + 24) = v22;
  *((_QWORD *)this + 1) = v20;
  *((_QWORD *)this + 2) = 0;
  v23 = 0x217u;
  *((_QWORD *)this + 5) = 0;
  do
  {
    *(_WORD *)((char *)this + v21 * 2 + 48) = gcl::ArithmeticEncoder::probUpdateLut[v21];
    *(_WORD *)((char *)this + v23 * 2) = gcl::ArithmeticEncoder::probUpdateLut[v23 - 280];
    ++v21;
    --v23;
  }
  while (v21 != 256);
  if (a11[6] == 1)
  {
    memset_pattern16(__b, &unk_189CFAE50, 4uLL);
    if (a6 >= 1)
    {
      gcl::ArithmeticEncoder::encode((uint64_t)this, *a3, __b);
      if (a6 != 1)
      {
        v24 = a6 - 1;
        v25 = a3 + 1;
        do
        {
          v26 = *(v25 - 1);
          v27 = *v25++;
          gcl::ArithmeticEncoder::encode((uint64_t)this, v27, (_WORD *)__b + v26);
          --v24;
        }
        while (v24);
      }
    }
  }
  if (a11[5])
    return 5;
  v28 = a11[4];
  v29 = a11[6];
  if (v28 == 1)
  {
    memset(__b, 0, 24);
    if (!v15)
      goto LABEL_164;
    if (v15 < 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v79 = (unsigned __int16 *)operator new(2 * v15);
    memset_pattern16(v79, &unk_189CFAE50, 2 * v15);
    if (a6 < 1)
    {
LABEL_157:
      operator delete(v79);
      goto LABEL_164;
    }
    v80 = 0;
    while (v29 && !a3[v80])
    {
LABEL_133:
      if (++v80 == a6)
        goto LABEL_157;
    }
    v81 = 0;
    v82 = *((_DWORD *)this + 7);
    while (1)
    {
      v83 = v79[v81];
      v84 = (v82 * v83) >> 16;
      if (!*(_BYTE *)(a2 + v80 * v15 + v81))
        break;
      v82 -= v84;
      v85 = v83 - *(_WORD *)((char *)this + ((v83 >> 7) & 0x1FE) + 48);
      *((_DWORD *)this + 6) += v84;
      *((_DWORD *)this + 7) = v82;
      v79[v81] = v85;
      if (v82 <= 0x4000)
        goto LABEL_142;
LABEL_137:
      if (++v81 == v15)
        goto LABEL_133;
    }
    v86 = *(_WORD *)((char *)this + (~(v79[v81] >> 7) & 0x1FE) + 48) + v79[v81];
    v82 = v84;
    *((_DWORD *)this + 7) = v84;
    v79[v81] = v86;
    if (v84 > 0x4000)
      goto LABEL_137;
LABEL_142:
    v87 = *((_DWORD *)this + 6);
    v88 = *((_DWORD *)this + 10);
    while (1)
    {
      v87 *= 2;
      v82 *= 2;
      *((_DWORD *)this + 6) = v87;
      *((_DWORD *)this + 7) = v82;
      *((_DWORD *)this + 10) = ++v88;
      if (v88 != 8)
        goto LABEL_145;
      v89 = *((_QWORD *)this + 2);
      v90 = *((int *)this + 11);
      if (v89 + v90 + 1 > (unint64_t)*((unsigned int *)this + 1))
        goto LABEL_137;
      if (HIBYTE(v87))
      {
        ++*(_BYTE *)(v89 + *((_QWORD *)this + 1) - 1);
        v89 = *((_QWORD *)this + 2);
        if (*((_DWORD *)this + 11))
        {
          do
          {
            *(_BYTE *)(*((_QWORD *)this + 1) + v89) = 0;
            v91 = *((_DWORD *)this + 11);
            v89 = *((_QWORD *)this + 2) + 1;
            *((_QWORD *)this + 2) = v89;
            *((_DWORD *)this + 11) = --v91;
          }
          while (v91);
        }
      }
      else
      {
        if ((v82 + v87) >> 24)
        {
          *((_DWORD *)this + 11) = v90 + 1;
          goto LABEL_144;
        }
        if ((_DWORD)v90)
        {
          do
          {
            *(_BYTE *)(*((_QWORD *)this + 1) + v89) = -1;
            v92 = *((_DWORD *)this + 11);
            v89 = *((_QWORD *)this + 2) + 1;
            *((_QWORD *)this + 2) = v89;
            *((_DWORD *)this + 11) = --v92;
          }
          while (v92);
        }
      }
      *(_BYTE *)(*((_QWORD *)this + 1) + v89) = *((_WORD *)this + 13);
      ++*((_QWORD *)this + 2);
      LOWORD(v87) = *((_WORD *)this + 12);
      v82 = *((_DWORD *)this + 7);
LABEL_144:
      v88 = 0;
      v87 = (unsigned __int16)v87;
      *((_DWORD *)this + 6) = (unsigned __int16)v87;
      *((_DWORD *)this + 10) = 0;
LABEL_145:
      if (v82 > 0x4000)
        goto LABEL_137;
    }
  }
  if (v28 != 3)
    goto LABEL_164;
  memset_pattern16(v112, &unk_189CFAE50, 4uLL);
  __b[0] = 0;
  if (a6 < 1 || v15 < 1)
    goto LABEL_164;
  v30 = 0;
  v31 = 0;
  v32 = v15;
  v33 = a6;
  v34 = 1;
  v35 = 1;
  while (2)
  {
    v36 = 0;
    v37 = a2 + v30;
    do
    {
      if (v29 && !a3[v36])
        goto LABEL_41;
      v38 = *(unsigned __int8 *)(v37 + v36 * v32);
      if ((v35 & 1) == 0)
      {
        if (v38 == v34)
        {
          v35 = 0;
          ++v31;
          goto LABEL_41;
        }
        v47 = v34;
        v48 = *(_DWORD *)((unint64_t)__b & 0xFFFFFFFFFFFFFFFBLL | (4 * v47));
        v49 = 1 << v48;
        v50 = v112[v47];
        v51 = *((_DWORD *)this + 7);
        if (1 << v48 > v31)
        {
          v52 = *(_DWORD *)((unint64_t)__b & 0xFFFFFFFFFFFFFFFBLL | (4 * v47));
          v53 = v31;
LABEL_67:
          v54 = v51 * v50;
          v55 = HIWORD(v54);
          v56 = *((_WORD *)this + (HIBYTE(v50) ^ 0xFFu) + 24) + v50;
          *((_DWORD *)this + 7) = HIWORD(v54);
          v112[v47] = v56;
          if (v54 <= 0x4000FFFF)
          {
            v57 = *((_DWORD *)this + 6);
            v58 = *((_DWORD *)this + 10);
            do
            {
              v57 *= 2;
              v55 *= 2;
              *((_DWORD *)this + 6) = v57;
              *((_DWORD *)this + 7) = v55;
              *((_DWORD *)this + 10) = ++v58;
              if (v58 != 8)
                continue;
              v59 = *((_QWORD *)this + 2);
              v60 = *((int *)this + 11);
              if (v59 + v60 + 1 > (unint64_t)*((unsigned int *)this + 1))
                break;
              if (HIBYTE(v57))
              {
                ++*(_BYTE *)(v59 + *((_QWORD *)this + 1) - 1);
                v59 = *((_QWORD *)this + 2);
                if (*((_DWORD *)this + 11))
                {
                  do
                  {
                    *(_BYTE *)(*((_QWORD *)this + 1) + v59) = 0;
                    v61 = *((_DWORD *)this + 11);
                    v59 = *((_QWORD *)this + 2) + 1;
                    *((_QWORD *)this + 2) = v59;
                    *((_DWORD *)this + 11) = --v61;
                  }
                  while (v61);
                }
              }
              else
              {
                if ((v55 + v57) >> 24)
                {
                  *((_DWORD *)this + 11) = v60 + 1;
                  goto LABEL_70;
                }
                if ((_DWORD)v60)
                {
                  do
                  {
                    *(_BYTE *)(*((_QWORD *)this + 1) + v59) = -1;
                    v62 = *((_DWORD *)this + 11);
                    v59 = *((_QWORD *)this + 2) + 1;
                    *((_QWORD *)this + 2) = v59;
                    *((_DWORD *)this + 11) = --v62;
                  }
                  while (v62);
                }
              }
              *(_BYTE *)(*((_QWORD *)this + 1) + v59) = *((_WORD *)this + 13);
              ++*((_QWORD *)this + 2);
              LOWORD(v57) = *((_WORD *)this + 12);
              v55 = *((_DWORD *)this + 7);
LABEL_70:
              v58 = 0;
              v57 = (unsigned __int16)v57;
              *((_DWORD *)this + 6) = (unsigned __int16)v57;
              *((_DWORD *)this + 10) = 0;
            }
            while (v55 <= 0x4000);
          }
          if (!v52)
          {
LABEL_84:
            v63 = (int)v31 >> v48;
            if (!v48 || v63)
            {
              if (v63 < 2)
              {
LABEL_110:
                v31 = 0;
                v35 = 0;
                v34 = *(_BYTE *)(v37 + v36 * v32) != 0;
                goto LABEL_41;
              }
              v64 = 1;
            }
            else
            {
              v64 = -1;
            }
            *(_DWORD *)((unint64_t)__b | (4 * v47)) = v64 + v48;
            goto LABEL_110;
          }
          while (1)
          {
            --v52;
            v65 = (unsigned __int16)(v55 >> 1);
            if (((v53 >> v52) & 1) == 0)
              break;
            v55 -= v65;
            *((_DWORD *)this + 6) += v65;
            *((_DWORD *)this + 7) = v55;
            if (v55 <= 0x4000)
              goto LABEL_92;
LABEL_87:
            if (!v52)
              goto LABEL_84;
          }
          v55 = (unsigned __int16)(v55 >> 1);
          *((_DWORD *)this + 7) = v65;
          if (v65 > 0x4000)
            goto LABEL_87;
LABEL_92:
          v66 = *((_DWORD *)this + 6);
          v67 = *((_DWORD *)this + 10);
          while (1)
          {
            v66 *= 2;
            v55 *= 2;
            *((_DWORD *)this + 6) = v66;
            *((_DWORD *)this + 7) = v55;
            *((_DWORD *)this + 10) = ++v67;
            if (v67 != 8)
              goto LABEL_95;
            v68 = *((_QWORD *)this + 2);
            v69 = *((int *)this + 11);
            if (v68 + v69 + 1 > (unint64_t)*((unsigned int *)this + 1))
              goto LABEL_87;
            if (HIBYTE(v66))
            {
              ++*(_BYTE *)(v68 + *((_QWORD *)this + 1) - 1);
              v68 = *((_QWORD *)this + 2);
              if (*((_DWORD *)this + 11))
              {
                do
                {
                  *(_BYTE *)(*((_QWORD *)this + 1) + v68) = 0;
                  v70 = *((_DWORD *)this + 11);
                  v68 = *((_QWORD *)this + 2) + 1;
                  *((_QWORD *)this + 2) = v68;
                  *((_DWORD *)this + 11) = --v70;
                }
                while (v70);
              }
            }
            else
            {
              if ((v55 + v66) >> 24)
              {
                *((_DWORD *)this + 11) = v69 + 1;
                goto LABEL_94;
              }
              if ((_DWORD)v69)
              {
                do
                {
                  *(_BYTE *)(*((_QWORD *)this + 1) + v68) = -1;
                  v71 = *((_DWORD *)this + 11);
                  v68 = *((_QWORD *)this + 2) + 1;
                  *((_QWORD *)this + 2) = v68;
                  *((_DWORD *)this + 11) = --v71;
                }
                while (v71);
              }
            }
            *(_BYTE *)(*((_QWORD *)this + 1) + v68) = *((_WORD *)this + 13);
            ++*((_QWORD *)this + 2);
            LOWORD(v66) = *((_WORD *)this + 12);
            v55 = *((_DWORD *)this + 7);
LABEL_94:
            v67 = 0;
            v66 = (unsigned __int16)v66;
            *((_DWORD *)this + 6) = (unsigned __int16)v66;
            *((_DWORD *)this + 10) = 0;
LABEL_95:
            if (v55 > 0x4000)
              goto LABEL_87;
          }
        }
        v72 = *((_DWORD *)this + 6);
        v53 = v31;
        v52 = *(_DWORD *)((unint64_t)__b & 0xFFFFFFFFFFFFFFFBLL | (4 * v47));
        while (1)
        {
          v73 = (v51 * v50) >> 16;
          v72 += v73;
          v51 -= v73;
          v50 -= *((_WORD *)this + HIBYTE(v50) + 24);
          *((_DWORD *)this + 6) = v72;
          *((_DWORD *)this + 7) = v51;
          v112[v47] = v50;
          if (v51 <= 0x4000)
            break;
LABEL_112:
          ++v52;
          v53 -= v49;
          v49 = 1 << v52;
          if (v53 < 1 << v52)
            goto LABEL_67;
        }
        v74 = *((_DWORD *)this + 10);
        while (1)
        {
          v72 *= 2;
          v51 *= 2;
          *((_DWORD *)this + 6) = v72;
          *((_DWORD *)this + 7) = v51;
          *((_DWORD *)this + 10) = ++v74;
          if (v74 != 8)
            goto LABEL_117;
          v75 = *((_QWORD *)this + 2);
          v76 = *((int *)this + 11);
          if (v75 + v76 + 1 > (unint64_t)*((unsigned int *)this + 1))
            goto LABEL_112;
          if (HIBYTE(v72))
          {
            ++*(_BYTE *)(v75 + *((_QWORD *)this + 1) - 1);
            v75 = *((_QWORD *)this + 2);
            if (*((_DWORD *)this + 11))
            {
              do
              {
                *(_BYTE *)(*((_QWORD *)this + 1) + v75) = 0;
                v77 = *((_DWORD *)this + 11);
                v75 = *((_QWORD *)this + 2) + 1;
                *((_QWORD *)this + 2) = v75;
                *((_DWORD *)this + 11) = --v77;
              }
              while (v77);
            }
          }
          else
          {
            if ((v51 + v72) >> 24)
            {
              *((_DWORD *)this + 11) = v76 + 1;
              goto LABEL_116;
            }
            if ((_DWORD)v76)
            {
              do
              {
                *(_BYTE *)(*((_QWORD *)this + 1) + v75) = -1;
                v78 = *((_DWORD *)this + 11);
                v75 = *((_QWORD *)this + 2) + 1;
                *((_QWORD *)this + 2) = v75;
                *((_DWORD *)this + 11) = --v78;
              }
              while (v78);
            }
          }
          *(_BYTE *)(*((_QWORD *)this + 1) + v75) = *((_WORD *)this + 13);
          ++*((_QWORD *)this + 2);
          LOWORD(v72) = *((_WORD *)this + 12);
          v51 = *((_DWORD *)this + 7);
LABEL_116:
          v74 = 0;
          v72 = (unsigned __int16)v72;
          *((_DWORD *)this + 6) = (unsigned __int16)v72;
          *((_DWORD *)this + 10) = 0;
LABEL_117:
          if (v51 > 0x4000)
            goto LABEL_112;
        }
      }
      v34 = v38 != 0;
      v39 = *((_DWORD *)this + 7);
      v40 = (unsigned __int16)(v39 >> 1);
      if (*(_BYTE *)(v37 + v36 * v32))
      {
        *((_DWORD *)this + 6) += v40;
        v40 = v39 - v40;
      }
      *((_DWORD *)this + 7) = v40;
      if (v40 <= 0x4000)
      {
        v41 = *((_DWORD *)this + 6);
        v42 = *((_DWORD *)this + 10);
        do
        {
          v41 *= 2;
          v40 *= 2;
          *((_DWORD *)this + 6) = v41;
          *((_DWORD *)this + 7) = v40;
          *((_DWORD *)this + 10) = ++v42;
          if (v42 != 8)
            continue;
          v43 = *((_QWORD *)this + 2);
          v44 = *((int *)this + 11);
          if (v43 + v44 + 1 > (unint64_t)*((unsigned int *)this + 1))
            break;
          if (HIBYTE(v41))
          {
            ++*(_BYTE *)(v43 + *((_QWORD *)this + 1) - 1);
            v43 = *((_QWORD *)this + 2);
            if (*((_DWORD *)this + 11))
            {
              do
              {
                *(_BYTE *)(*((_QWORD *)this + 1) + v43) = 0;
                v45 = *((_DWORD *)this + 11);
                v43 = *((_QWORD *)this + 2) + 1;
                *((_QWORD *)this + 2) = v43;
                *((_DWORD *)this + 11) = --v45;
              }
              while (v45);
            }
          }
          else
          {
            if ((v40 + v41) >> 24)
            {
              *((_DWORD *)this + 11) = v44 + 1;
              goto LABEL_50;
            }
            if ((_DWORD)v44)
            {
              do
              {
                *(_BYTE *)(*((_QWORD *)this + 1) + v43) = -1;
                v46 = *((_DWORD *)this + 11);
                v43 = *((_QWORD *)this + 2) + 1;
                *((_QWORD *)this + 2) = v43;
                *((_DWORD *)this + 11) = --v46;
              }
              while (v46);
            }
          }
          *(_BYTE *)(*((_QWORD *)this + 1) + v43) = *((_WORD *)this + 13);
          ++*((_QWORD *)this + 2);
          LOWORD(v41) = *((_WORD *)this + 12);
          v40 = *((_DWORD *)this + 7);
LABEL_50:
          v42 = 0;
          v41 = (unsigned __int16)v41;
          *((_DWORD *)this + 6) = (unsigned __int16)v41;
          *((_DWORD *)this + 10) = 0;
        }
        while (v40 <= 0x4000);
      }
      v31 = 0;
      v35 = 0;
LABEL_41:
      ++v36;
    }
    while (v36 != v33);
    if (++v30 != v32)
      continue;
    break;
  }
  if ((v35 & 1) == 0)
  {
    v93 = *(_DWORD *)((unint64_t)__b & 0xFFFFFFFFFFFFFFFBLL | (4 * v34));
    v94 = &v112[v34];
    for (i = 1 << v93; v31 >= 1 << v93; i = 1 << v93)
    {
      gcl::ArithmeticEncoder::encode((uint64_t)this, 1, v94);
      ++v93;
      v31 -= i;
    }
    gcl::ArithmeticEncoder::encode((uint64_t)this, 0, v94);
    if (v93)
    {
      v96 = v93 - 1;
      do
      {
        v113 = 0x8000;
        gcl::ArithmeticEncoder::encode((uint64_t)this, (v31 >> v96--) & 1, &v113);
      }
      while (v96 != -1);
    }
  }
LABEL_164:
  v97 = gcl::ArithmeticEncoder::stop(this);
  result = *(unsigned int *)this;
  if (!(_DWORD)result)
  {
    v98 = v111 + v97;
    if (!v111)
      v98 = v97;
    result = 1;
    if (v98)
    {
      v99 = v110 - v97;
      if ((v99 & 0x8000000000000000) == 0)
      {
        v100 = (a9 & ~((uint64_t)a9 >> 63)) - v99;
        v101 = a9 - v100;
        if ((uint64_t)(a9 - v100) < 0)
          v100 = 0;
        v102 = v100 & ~(v100 >> 63);
        *a10 = v102;
        if (a12)
        {
          if (v101 >= 0)
            v103 = a8;
          else
            v103 = 0;
          if (v100 >= 16)
          {
            *(_DWORD *)(v103 + 12) = v102;
            v106 = v100 - 8;
            goto LABEL_181;
          }
          v104 = v100 == 8;
          v105 = v100 < 8;
          v106 = v100 - 8;
          if (!v105)
          {
            if (v104)
            {
              v108 = -1;
LABEL_183:
              result = 0;
              *(_DWORD *)(v103 + 4) = v108;
              return result;
            }
LABEL_181:
            v107 = (unsigned __int8 *)(v103 + 8);
            v108 = -1;
            do
            {
              v109 = *v107++;
              v108 = __const__ZN3gcl12computeCRC32EPKhm_table[v109 ^ HIBYTE(v108)] ^ (v108 << 8);
              --v106;
            }
            while (v106);
            goto LABEL_183;
          }
        }
        return 0;
      }
    }
  }
  return result;
}

void sub_189AD01D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t gcl::polyline::EncoderImpl::writeAttributesHeader(uint64_t a1, uint64_t a2, char a3, char a4, int a5, char a6, _BYTE *a7)
{
  if (a2 < 4)
    return 0;
  *(_DWORD *)a1 = -1214009963;
  if ((unint64_t)a2 < 9)
    return 0;
  *(_BYTE *)(a1 + 8) = 0;
  if (a2 == 9)
    return 0;
  *(_BYTE *)(a1 + 9) = 2;
  if (((a2 - 8) & 0xFFFFFFFFFFFFFFFELL) == 2)
    return 0;
  *(_WORD *)(a1 + 10) = 0;
  if ((unint64_t)a2 < 0x14)
    return 0;
  *(_DWORD *)(a1 + 16) = a5;
  if (a2 == 20)
    return 0;
  *(_BYTE *)(a1 + 20) = a3;
  if (a2 == 21)
    return 0;
  *(_BYTE *)(a1 + 21) = a4;
  if (a2 == 22)
    return 0;
  *(_BYTE *)(a1 + 22) = a6;
  if (a2 == 23)
    return 0;
  *(_BYTE *)(a1 + 23) = a7[4];
  if (a2 == 24)
    return 0;
  *(_BYTE *)(a1 + 24) = a7[5];
  if (a2 == 25)
    return 0;
  *(_BYTE *)(a1 + 25) = a7[6];
  if (a2 == 26)
    return 0;
  *(_BYTE *)(a1 + 26) = 0;
  if (a2 == 27)
    return 0;
  *(_BYTE *)(a1 + 27) = 0;
  return a1 + 28;
}

uint64_t gcl::polyline::EncoderImpl::compressAttributes(unsigned int *a1, char *a2, unsigned __int8 *a3, char a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10, _BYTE *a11, char a12)
{
  uint64_t v12;
  BOOL v15;
  _BOOL4 v16;
  char v20;
  int32x4_t *v23;
  int32x4_t *v24;
  int32x4_t **v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int32x4_t *v34;
  int32x4_t *v35;
  int32x4_t *v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  unint64_t v41;
  uint64_t v42;
  __int32 *v43;
  __int32 *v44;
  __int32 v45;
  __int32 v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  BOOL v56;
  uint64_t v57;
  int32x4_t *v58;
  unint64_t v59;
  _BYTE *v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  __int32 *v67;
  int v68;
  __int8 *v69;
  uint64_t v70;
  int32x4_t *v71;
  int32x4_t *v72;
  unint64_t v73;
  int32x4_t *v74;
  int32x4_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  unsigned int v87;
  int v88;
  int v89;
  int v90;
  char v91;
  uint64_t v92;
  __int8 *v93;
  unsigned int v94;
  int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  BOOL v114;
  int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  size_t v132;
  void *v133;
  unsigned __int8 *v134;
  uint64_t v135;
  uint64_t v136;
  unsigned __int8 *v138;
  int32x4_t *v139;
  unint64_t v140;
  int v141;
  unsigned __int8 *v142;
  void *v143;
  int32x4_t *v144;
  int32x4_t v145;
  unint64_t v146;
  int32x4_t v147;
  unint64_t v148;
  __int32 *v149;
  int v150;
  unsigned __int8 *v151;
  uint64_t v152;
  int v153;
  int v154;
  int v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  int v161;
  int v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  int *v167;
  int v168;
  int v169;
  int v170;
  _BOOL4 v171;
  _BOOL4 v173;
  BOOL v174;
  int v175;
  int v176;
  int32x4_t *v177;
  unint64_t v178;
  int32x4_t *v179;
  int32x4_t v180;
  unint64_t v181;
  uint64_t v182;
  int *v183;
  __int32 *v184;
  __int32 v185;
  int v186;
  int v187;
  int v188;
  int v189;
  uint64_t v190;
  unint64_t v191;
  int32x4_t *v192;
  unint64_t v193;
  int32x4_t *v194;
  int32x4_t v195;
  unint64_t v196;
  uint64_t v197;
  int *v198;
  __int32 *v199;
  __int32 v200;
  int v201;
  int v202;
  int v203;
  int v204;
  uint64_t v205;
  unint64_t v206;
  int32x4_t *v207;
  unint64_t v208;
  int32x4_t *v209;
  int32x4_t v210;
  unint64_t v211;
  uint64_t v212;
  int *v213;
  __int32 *v214;
  __int32 v215;
  int v216;
  int v217;
  int v218;
  int v219;
  uint64_t v220;
  unint64_t v221;
  int32x4_t *v222;
  unint64_t v223;
  int32x4_t *v224;
  int32x4_t v225;
  unint64_t v226;
  uint64_t v227;
  int *v228;
  __int32 *v229;
  __int32 v230;
  int v231;
  int v232;
  int32x4_t *v233;
  unint64_t v234;
  int32x4_t *v235;
  int32x4_t v236;
  unint64_t v237;
  uint64_t v238;
  int *v239;
  __int32 *v240;
  __int32 v241;
  int v242;
  int v243;
  int v244;
  int v245;
  int v246;
  int v247;
  uint64_t v248;
  unint64_t v249;
  int32x4_t *v250;
  unint64_t v251;
  int32x4_t *v252;
  int32x4_t v253;
  unint64_t v254;
  uint64_t v255;
  int *v256;
  __int32 *v257;
  __int32 v258;
  int v259;
  int v260;
  int v261;
  int v262;
  int v263;
  int v264;
  uint64_t v265;
  unint64_t v266;
  int32x4_t *v267;
  unint64_t v268;
  int32x4_t *v269;
  int32x4_t v270;
  unint64_t v271;
  uint64_t v272;
  int *v273;
  __int32 *v274;
  __int32 v275;
  int v276;
  int v277;
  int v278;
  int v279;
  int v280;
  int v281;
  uint64_t v282;
  unint64_t v283;
  int32x4_t *v284;
  unint64_t v285;
  int32x4_t *v286;
  int32x4_t v287;
  unint64_t v288;
  uint64_t v289;
  int *v290;
  __int32 *v291;
  __int32 v292;
  int v293;
  int v294;
  uint64_t v295;
  void *v296;
  void *v297;
  int i;
  int j;
  int v300;
  unsigned int v301;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unsigned __int8 *v311;
  unsigned int v312;
  int v313;
  unsigned __int8 *v315;
  uint64_t v316;
  void *__p;
  uint64_t v318;
  int32x4_t *v319;
  int v320;
  _DWORD *v321;
  uint64_t v322;
  int v323;
  char v324;
  int v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  int v330;
  uint64_t __n;
  size_t __na;
  uint64_t __nb;
  int *__nc;
  int32x4_t *v335;
  char *v336;
  char *v337;
  char *v338;
  unsigned __int16 v339;
  unsigned __int16 v340;
  unsigned __int16 v341;
  unsigned __int16 v342;
  __int128 __b;
  void *v344[2];
  __int128 v345;
  void *v346[2];
  void *v347[2];
  __int128 v348;
  void *v349[2];
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;

  v353 = *MEMORY[0x1E0C80C00];
  v12 = 5;
  if (a5 <= 0xFF && a2 && a7 - 256 >= 0xFFFFFFFFFFFFFF01 && (a11[5] & 0xFE) != 2)
  {
    v15 = !a11[4] || a11[4] == 3;
    v16 = !v15;
    if (!a11[5] || v16)
    {
      v20 = a5;
      if (a3 || !a11[6])
      {
        v23 = (int32x4_t *)operator new(4 * a7);
        bzero(v23, 4 * a7);
        v335 = v23;
        v24 = (int32x4_t *)operator new(4 * a7);
        __n = 4 * a7;
        bzero(v24, 4 * a7);
        v25 = (int32x4_t **)(a1 + 268);
        v26 = *((_QWORD *)a1 + 134);
        v27 = (*((_QWORD *)a1 + 135) - v26) >> 2;
        if (a7 <= v27)
        {
          if (a7 < v27)
            *((_QWORD *)a1 + 135) = v26 + 4 * a7;
        }
        else
        {
          std::vector<int>::__append((std::vector<int> *)(a1 + 268), a7 - v27);
        }
        memcpy(v335, a2, __n);
        memcpy(v24, a2, __n);
        if ((int)a6 > 1)
        {
          v28 = a7 & 0xFFFFFFFFFFFFFFF8;
          v29 = 1;
          LODWORD(v30) = a7;
          while (1)
          {
            v31 = (int)v30;
            if (a7 < 8)
              break;
            v30 = (int)v30 + v28;
            v33 = a7 & 0xFFFFFFFFFFFFFFF8;
            v34 = v24 + 1;
            v35 = v335 + 1;
            v36 = (int32x4_t *)&a2[4 * v31 + 16];
            do
            {
              v37 = v36[-1];
              v38 = *v36;
              v39 = vminq_s32(*v36, *v35);
              v35[-1] = vminq_s32(v37, v35[-1]);
              *v35 = v39;
              v40 = vmaxq_s32(*v34, v38);
              v34[-1] = vmaxq_s32(v34[-1], v37);
              *v34 = v40;
              v35 += 2;
              v34 += 2;
              v36 += 2;
              v33 -= 8;
            }
            while (v33);
            v32 = a7 & 0xFFFFFFFFFFFFFFF8;
            if (v28 != a7)
              goto LABEL_29;
LABEL_23:
            if (++v29 == (_DWORD)a6)
              goto LABEL_36;
          }
          v32 = 0;
          v30 = (int)v30;
LABEL_29:
          v41 = a7 - v32;
          v42 = v32;
          v43 = &v24->i32[v32];
          v44 = &v335->i32[v42];
          do
          {
            v45 = *(_DWORD *)&a2[4 * v30];
            v46 = *v44;
            if (v45 < *v44)
              v46 = *(_DWORD *)&a2[4 * v30];
            *v44++ = v46;
            if (*v43 > v45)
              v45 = *v43;
            *v43++ = v45;
            ++v30;
            --v41;
          }
          while (v41);
          goto LABEL_23;
        }
LABEL_36:
        v47 = 0;
        do
        {
          v48 = v24->i32[v47] - (uint64_t)v335->i32[v47];
          if (v48 > 0xFFFFFFF)
          {
            v12 = 5;
            goto LABEL_389;
          }
          (*v25)->i32[v47++] = v48;
        }
        while (a7 != v47);
        if (a12)
        {
          v49 = (_DWORD *)gcl::polyline::EncoderImpl::writeAttributesHeader(a8, a9, a4, v20, a6, a7, a11);
          v51 = v50;
        }
        else
        {
          v51 = a9;
          v49 = (_DWORD *)a8;
        }
        v52 = 0;
        do
        {
          v56 = v51 < 4;
          v51 -= 4;
          if (v56)
          {
            v51 = 0;
            v49 = 0;
          }
          else
          {
            *v49++ = v335->i32[v52];
          }
          v53 = (*v25)->u32[v52];
          v54 = 32 - __clz(v53);
          if (v53)
            v55 = v54;
          else
            v55 = 0;
          (*v25)->i32[v52++] = v55;
        }
        while (a7 != v52);
        v57 = 0;
        do
        {
          while (!v51)
          {
            v49 = 0;
            if (a7 == ++v57)
              goto LABEL_55;
          }
          --v51;
          *(_BYTE *)v49 = (*v25)->i32[v57];
          v49 = (_DWORD *)((char *)v49 + 1);
          ++v57;
        }
        while (a7 != v57);
LABEL_55:
        v318 = a8;
        v319 = v24;
        v58 = (int32x4_t *)*((_QWORD *)a1 + 137);
        v59 = (uint64_t)(*((_QWORD *)a1 + 138) - (_QWORD)v58) >> 2;
        if (a7 * a6 <= v59)
        {
          v60 = a11;
          if (a7 * a6 < v59)
            *((_QWORD *)a1 + 138) = (char *)v58 + 4 * a7 * a6;
        }
        else
        {
          std::vector<int>::__append((std::vector<int> *)(a1 + 274), a7 * a6 - v59);
          v60 = a11;
          v58 = (int32x4_t *)*((_QWORD *)a1 + 137);
        }
        if ((int)a6 >= 1)
        {
          v61 = 0;
          LODWORD(v62) = 0;
          v63 = a7 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v64 = (int)v62;
            if (a7 >= 8)
            {
              v65 = 0;
              v69 = &v58->i8[4 * (int)v62];
              if ((unint64_t)((char *)v58 - a2) >= 0x20 && (unint64_t)(v69 - (__int8 *)v335) >= 0x20)
              {
                v62 = v64 + v63;
                v70 = 4 * v64;
                v71 = (int32x4_t *)((char *)v58 + 4 * v64 + 16);
                v72 = (int32x4_t *)&a2[v70 + 16];
                v73 = a7 & 0xFFFFFFFFFFFFFFF8;
                v74 = v335 + 1;
                do
                {
                  v75 = vsubq_s32(*v72, *v74);
                  v71[-1] = vsubq_s32(v72[-1], v74[-1]);
                  *v71 = v75;
                  v71 += 2;
                  v74 += 2;
                  v72 += 2;
                  v73 -= 8;
                }
                while (v73);
                v64 = v62;
                v65 = a7 & 0xFFFFFFFFFFFFFFF8;
                if (v63 == a7)
                  goto LABEL_61;
              }
            }
            else
            {
              v65 = 0;
            }
            v66 = a7 - v65;
            v67 = &v335->i32[v65];
            v62 = v64;
            do
            {
              v68 = *v67++;
              v58->i32[v62] = *(_DWORD *)&a2[4 * v62] - v68;
              ++v62;
              --v66;
            }
            while (v66);
LABEL_61:
            ++v61;
          }
          while (v61 != (_DWORD)a6);
        }
        v76 = 0;
        *a1 = 0;
        a1[1] = v51 & ~(v51 >> 63);
        *(_QWORD *)&v77 = 0xFFFF00000000;
        *((_QWORD *)&v77 + 1) = 0xFFFF00000000;
        *(_OWORD *)(a1 + 6) = v77;
        *((_QWORD *)a1 + 1) = v49;
        *((_QWORD *)a1 + 2) = 0;
        v78 = 0x217u;
        *((_QWORD *)a1 + 5) = 0;
        do
        {
          *(_WORD *)((char *)a1 + v76 * 2 + 48) = gcl::ArithmeticEncoder::probUpdateLut[v76];
          *(_WORD *)((char *)a1 + v78 * 2) = gcl::ArithmeticEncoder::probUpdateLut[v78 - 280];
          ++v76;
          --v78;
        }
        while (v76 != 256);
        v321 = v49;
        if (v60[6] == 1)
        {
          memset_pattern16(&__b, &unk_189CFAE50, 4uLL);
          if ((int)a6 >= 1)
          {
            gcl::ArithmeticEncoder::encode((uint64_t)a1, *a3, &__b);
            if ((_DWORD)a6 != 1)
            {
              v79 = a6 - 1;
              v80 = a3 + 1;
              do
              {
                v81 = *(v80 - 1);
                v82 = *v80++;
                gcl::ArithmeticEncoder::encode((uint64_t)a1, v82, (_WORD *)&v344[-2] + v81);
                --v79;
              }
              while (v79);
            }
          }
          v49 = v321;
          v60 = a11;
        }
        v83 = v60[5];
        if (v83 != 4)
        {
          if (v83 == 1)
          {
            v350 = 0;
            v348 = 0u;
            *(_OWORD *)v349 = 0u;
            *(_OWORD *)v346 = 0u;
            *(_OWORD *)v347 = 0u;
            *(_OWORD *)v344 = 0u;
            v345 = 0u;
            __b = 0u;
            gcl::polyline::ACContext::init((std::vector<int> *)&__b, a7);
            v131 = v60[6];
            v336 = 0;
            v337 = 0;
            v338 = 0;
            if ((_DWORD)a7)
            {
              if ((a7 & 0x80000000) != 0)
                std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
              v132 = 4 * (int)a7;
              v133 = operator new(v132);
              bzero(v133, v132);
              v134 = a3;
              if ((int)a6 >= 1)
              {
                v135 = a6;
                __nb = (4 * a7) & 0x3FFFFFFFCLL;
                if (v131)
                {
                  v136 = (uint64_t)v58;
                  do
                  {
                    if (*v134++)
                    {
                      v138 = v134;
                      gcl::polyline::EncoderImpl::encodeResidual((unint64_t)a1, v136, (uint64_t)v133, a7, a11[4], &__b);
                      memcpy(v133, v58, __nb);
                      v134 = v138;
                    }
                    v136 += 4 * (int)a7;
                    v58 = (int32x4_t *)((char *)v58 + v132);
                    --v135;
                  }
                  while (v135);
                }
                else
                {
                  v316 = (uint64_t)v58;
                  do
                  {
                    gcl::polyline::EncoderImpl::encodeResidual((unint64_t)a1, v316, (uint64_t)v133, a7, a11[4], &__b);
                    memcpy(v133, v58, __nb);
                    v316 += 4 * (int)a7;
                    v58 = (int32x4_t *)((char *)v58 + v132);
                    --v135;
                  }
                  while (v135);
                }
              }
              operator delete(v133);
            }
            if (v349[0])
            {
              v349[1] = v349[0];
              operator delete(v349[0]);
            }
            v297 = v347[1];
            v295 = v318;
            v24 = v319;
            v49 = v321;
            if (v347[1])
            {
LABEL_371:
              *(_QWORD *)&v348 = v297;
              operator delete(v297);
            }
LABEL_372:
            if (v346[0])
            {
              v346[1] = v346[0];
              operator delete(v346[0]);
            }
            if (v344[1])
            {
              *(void **)&v345 = v344[1];
              operator delete(v344[1]);
            }
            if ((_QWORD)__b)
            {
              *((_QWORD *)&__b + 1) = __b;
              operator delete((void *)__b);
            }
            goto LABEL_388;
          }
          if (!v60[5])
          {
            v84 = v60[6];
            if (v60[4] == 3)
            {
              __na = v51;
              LOWORD(v336) = 0x8000;
              if ((int)a6 < 1 || (int)a7 < 1)
              {
LABEL_387:
                v295 = v318;
                v24 = v319;
                v51 = __na;
                v49 = v321;
LABEL_388:
                v301 = gcl::ArithmeticEncoder::stop((gcl::ArithmeticEncoder *)a1);
                v12 = *a1;
                if (!(_DWORD)v12)
                {
                  v303 = (unint64_t)v49 + v301;
                  if (!v49)
                    v303 = v301;
                  v12 = 1;
                  if (v303)
                  {
                    v304 = v51 - v301;
                    if ((v304 & 0x8000000000000000) == 0)
                    {
                      v305 = (a9 & ~(a9 >> 63)) - v304;
                      v306 = a9 - v305;
                      if (a9 - v305 < 0)
                        v305 = 0;
                      v307 = v305 & ~(v305 >> 63);
                      *a10 = v307;
                      if (!a12)
                        goto LABEL_430;
                      if (v306 >= 0)
                        v308 = v295;
                      else
                        v308 = 0;
                      if (v305 >= 16)
                        *(_DWORD *)(v308 + 12) = v307;
                      v309 = 8;
                      if (v305 > 8)
                        v309 = v305;
                      v310 = v309 - 8;
                      if (v309 == 8)
                      {
                        v312 = -1;
                      }
                      else
                      {
                        v311 = (unsigned __int8 *)(v308 + 8);
                        v312 = -1;
                        do
                        {
                          v313 = *v311++;
                          v312 = __const__ZN3gcl12computeCRC32EPKhm_table[v313 ^ HIBYTE(v312)] ^ (v312 << 8);
                          --v310;
                        }
                        while (v310);
                      }
                      if (v305 >= 8)
                      {
                        v12 = 0;
                        *(_DWORD *)(v308 + 4) = v312;
                      }
                      else
                      {
LABEL_430:
                        v12 = 0;
                      }
                    }
                  }
                }
                goto LABEL_389;
              }
              v85 = 0;
              v86 = 0;
              v87 = 0;
              v88 = 0;
              v89 = 0;
              v90 = 0x8000;
              v91 = 1;
              while (2)
              {
                v92 = 0;
                v93 = &v58->i8[4 * v85];
LABEL_92:
                if (v84 && !a3[v92])
                {
LABEL_91:
                  if (++v92 == a6)
                  {
                    if (++v85 == a7)
                    {
                      if ((v91 & 1) == 0)
                      {
                        if (v86 >= 1)
                        {
                          for (i = 0; i != v86; ++i)
                          {
                            LOWORD(__b) = 0x8000;
                            gcl::ArithmeticEncoder::encode((uint64_t)a1, (v87 >> i) & 1, &__b);
                          }
                        }
                        for (j = 1 << v89; v88 >= (1 << v89); j = 1 << v89)
                        {
                          gcl::ArithmeticEncoder::encode((uint64_t)a1, 1, &v336);
                          ++v89;
                          v88 -= j;
                        }
                        gcl::ArithmeticEncoder::encode((uint64_t)a1, 0, &v336);
                        if (v89)
                        {
                          v300 = v89 - 1;
                          do
                          {
                            LOWORD(__b) = 0x8000;
                            gcl::ArithmeticEncoder::encode((uint64_t)a1, (v88 >> v300--) & 1, &__b);
                          }
                          while (v300 != -1);
                        }
                      }
                      goto LABEL_387;
                    }
                    continue;
                  }
                  goto LABEL_92;
                }
                break;
              }
              if ((v91 & 1) != 0)
              {
                v88 = 0;
                v91 = 0;
                v86 = (*v25)->i32[v85];
                v87 = *(_DWORD *)&v93[4 * v92 * a7];
                goto LABEL_91;
              }
              if (*(_DWORD *)&v93[4 * v92 * a7] == v87)
              {
                v91 = 0;
                ++v88;
                goto LABEL_91;
              }
              v94 = a1[7];
              if (v86 >= 1)
              {
                v95 = 0;
                while (1)
                {
                  v96 = (unsigned __int16)(v94 >> 1);
                  if (((v87 >> v95) & 1) == 0)
                    break;
                  v94 -= v96;
                  a1[6] += v96;
                  a1[7] = v94;
                  if (v94 <= 0x4000)
                    goto LABEL_104;
LABEL_99:
                  if (++v95 == v86)
                    goto LABEL_119;
                }
                v94 = (unsigned __int16)(v94 >> 1);
                a1[7] = v96;
                if (v96 > 0x4000)
                  goto LABEL_99;
LABEL_104:
                v97 = a1[6];
                v98 = a1[10];
                while (2)
                {
                  v97 *= 2;
                  v94 *= 2;
                  a1[6] = v97;
                  a1[7] = v94;
                  a1[10] = ++v98;
                  if (v98 != 8)
                    goto LABEL_107;
                  v99 = *((_QWORD *)a1 + 2);
                  v100 = (int)a1[11];
                  if (v99 + v100 + 1 > (unint64_t)a1[1])
                    goto LABEL_99;
                  if (HIBYTE(v97))
                  {
                    ++*(_BYTE *)(v99 + *((_QWORD *)a1 + 1) - 1);
                    v99 = *((_QWORD *)a1 + 2);
                    if (a1[11])
                    {
                      do
                      {
                        *(_BYTE *)(*((_QWORD *)a1 + 1) + v99) = 0;
                        v101 = a1[11];
                        v99 = *((_QWORD *)a1 + 2) + 1;
                        *((_QWORD *)a1 + 2) = v99;
                        a1[11] = --v101;
                      }
                      while (v101);
                    }
                  }
                  else
                  {
                    if ((v94 + v97) >> 24)
                    {
                      a1[11] = v100 + 1;
LABEL_106:
                      v98 = 0;
                      v97 = (unsigned __int16)v97;
                      a1[6] = (unsigned __int16)v97;
                      a1[10] = 0;
LABEL_107:
                      if (v94 > 0x4000)
                        goto LABEL_99;
                      continue;
                    }
                    if ((_DWORD)v100)
                    {
                      do
                      {
                        *(_BYTE *)(*((_QWORD *)a1 + 1) + v99) = -1;
                        v102 = a1[11];
                        v99 = *((_QWORD *)a1 + 2) + 1;
                        *((_QWORD *)a1 + 2) = v99;
                        a1[11] = --v102;
                      }
                      while (v102);
                    }
                  }
                  break;
                }
                *(_BYTE *)(*((_QWORD *)a1 + 1) + v99) = *((_WORD *)a1 + 13);
                ++*((_QWORD *)a1 + 2);
                LOWORD(v97) = *((_WORD *)a1 + 12);
                v94 = a1[7];
                goto LABEL_106;
              }
LABEL_119:
              v103 = 1 << v89;
              if (1 << v89 > v88)
              {
                v104 = v89;
                v105 = v88;
LABEL_121:
                v106 = v94 * (unsigned __int16)v90;
                v107 = HIWORD(v106);
                v90 += *((unsigned __int16 *)a1 + (BYTE1(v90) ^ 0xFFu) + 24);
                a1[7] = HIWORD(v106);
                LOWORD(v336) = v90;
                if (v106 <= 0x4000FFFF)
                {
                  v108 = a1[6];
                  v109 = a1[10];
                  while (2)
                  {
                    v108 *= 2;
                    v107 *= 2;
                    a1[6] = v108;
                    a1[7] = v107;
                    a1[10] = ++v109;
                    if (v109 != 8)
                      goto LABEL_125;
                    v110 = *((_QWORD *)a1 + 2);
                    v111 = (int)a1[11];
                    if (v110 + v111 + 1 > (unint64_t)a1[1])
                      goto LABEL_137;
                    if (HIBYTE(v108))
                    {
                      ++*(_BYTE *)(v110 + *((_QWORD *)a1 + 1) - 1);
                      v110 = *((_QWORD *)a1 + 2);
                      if (a1[11])
                      {
                        do
                        {
                          *(_BYTE *)(*((_QWORD *)a1 + 1) + v110) = 0;
                          v112 = a1[11];
                          v110 = *((_QWORD *)a1 + 2) + 1;
                          *((_QWORD *)a1 + 2) = v110;
                          a1[11] = --v112;
                        }
                        while (v112);
                      }
                    }
                    else
                    {
                      if ((v107 + v108) >> 24)
                      {
                        a1[11] = v111 + 1;
LABEL_124:
                        v109 = 0;
                        v108 = (unsigned __int16)v108;
                        a1[6] = (unsigned __int16)v108;
                        a1[10] = 0;
LABEL_125:
                        if (v107 > 0x4000)
                          goto LABEL_137;
                        continue;
                      }
                      if ((_DWORD)v111)
                      {
                        do
                        {
                          *(_BYTE *)(*((_QWORD *)a1 + 1) + v110) = -1;
                          v113 = a1[11];
                          v110 = *((_QWORD *)a1 + 2) + 1;
                          *((_QWORD *)a1 + 2) = v110;
                          a1[11] = --v113;
                        }
                        while (v113);
                      }
                    }
                    break;
                  }
                  *(_BYTE *)(*((_QWORD *)a1 + 1) + v110) = *((_WORD *)a1 + 13);
                  ++*((_QWORD *)a1 + 2);
                  LOWORD(v108) = *((_WORD *)a1 + 12);
                  v107 = a1[7];
                  goto LABEL_124;
                }
LABEL_137:
                if (!v104)
                {
LABEL_138:
                  v91 = 0;
                  if (v88 >> v89)
                    v114 = 1;
                  else
                    v114 = v89 == 0;
                  if (v114)
                    v115 = v88 >> v89 > 1;
                  else
                    v115 = -1;
                  v89 += v115;
                  v87 = *(_DWORD *)&v93[4 * v92 * a7];
                  v86 = (*v25)->i32[v85];
                  v88 = 0;
                  goto LABEL_91;
                }
                while (2)
                {
                  --v104;
                  v116 = (unsigned __int16)(v107 >> 1);
                  if (((v105 >> v104) & 1) != 0)
                  {
                    v107 -= v116;
                    a1[6] += v116;
                    a1[7] = v107;
                    if (v107 <= 0x4000)
                      break;
                    goto LABEL_145;
                  }
                  v107 = (unsigned __int16)(v107 >> 1);
                  a1[7] = v116;
                  if (v116 > 0x4000)
                  {
LABEL_145:
                    if (!v104)
                      goto LABEL_138;
                    continue;
                  }
                  break;
                }
                v117 = a1[6];
                v118 = a1[10];
                while (2)
                {
                  v117 *= 2;
                  v107 *= 2;
                  a1[6] = v117;
                  a1[7] = v107;
                  a1[10] = ++v118;
                  if (v118 != 8)
                    goto LABEL_153;
                  v119 = *((_QWORD *)a1 + 2);
                  v120 = (int)a1[11];
                  if (v119 + v120 + 1 > (unint64_t)a1[1])
                    goto LABEL_145;
                  if (HIBYTE(v117))
                  {
                    ++*(_BYTE *)(v119 + *((_QWORD *)a1 + 1) - 1);
                    v119 = *((_QWORD *)a1 + 2);
                    if (a1[11])
                    {
                      do
                      {
                        *(_BYTE *)(*((_QWORD *)a1 + 1) + v119) = 0;
                        v121 = a1[11];
                        v119 = *((_QWORD *)a1 + 2) + 1;
                        *((_QWORD *)a1 + 2) = v119;
                        a1[11] = --v121;
                      }
                      while (v121);
                    }
                  }
                  else
                  {
                    if ((v107 + v117) >> 24)
                    {
                      a1[11] = v120 + 1;
LABEL_152:
                      v118 = 0;
                      v117 = (unsigned __int16)v117;
                      a1[6] = (unsigned __int16)v117;
                      a1[10] = 0;
LABEL_153:
                      if (v107 > 0x4000)
                        goto LABEL_145;
                      continue;
                    }
                    if ((_DWORD)v120)
                    {
                      do
                      {
                        *(_BYTE *)(*((_QWORD *)a1 + 1) + v119) = -1;
                        v122 = a1[11];
                        v119 = *((_QWORD *)a1 + 2) + 1;
                        *((_QWORD *)a1 + 2) = v119;
                        a1[11] = --v122;
                      }
                      while (v122);
                    }
                  }
                  break;
                }
                *(_BYTE *)(*((_QWORD *)a1 + 1) + v119) = *((_WORD *)a1 + 13);
                ++*((_QWORD *)a1 + 2);
                LOWORD(v117) = *((_WORD *)a1 + 12);
                v107 = a1[7];
                goto LABEL_152;
              }
              v123 = a1[6];
              v105 = v88;
              v104 = v89;
              while (1)
              {
                v124 = (v94 * (unsigned __int16)v90) >> 16;
                v123 += v124;
                v125 = *((unsigned __int16 *)a1 + BYTE1(v90) + 24);
                v94 -= v124;
                a1[6] = v123;
                a1[7] = v94;
                if (v94 <= 0x4000)
                  break;
LABEL_166:
                v90 -= v125;
                ++v104;
                v105 -= v103;
                v103 = 1 << v104;
                if (v105 < 1 << v104)
                  goto LABEL_121;
              }
              v126 = a1[10];
              while (2)
              {
                v123 *= 2;
                v94 *= 2;
                a1[6] = v123;
                a1[7] = v94;
                a1[10] = ++v126;
                if (v126 != 8)
                  goto LABEL_171;
                v127 = *((_QWORD *)a1 + 2);
                v128 = (int)a1[11];
                if (v127 + v128 + 1 > (unint64_t)a1[1])
                  goto LABEL_166;
                if (HIBYTE(v123))
                {
                  ++*(_BYTE *)(v127 + *((_QWORD *)a1 + 1) - 1);
                  v127 = *((_QWORD *)a1 + 2);
                  if (a1[11])
                  {
                    do
                    {
                      *(_BYTE *)(*((_QWORD *)a1 + 1) + v127) = 0;
                      v129 = a1[11];
                      v127 = *((_QWORD *)a1 + 2) + 1;
                      *((_QWORD *)a1 + 2) = v127;
                      a1[11] = --v129;
                    }
                    while (v129);
                  }
                }
                else
                {
                  if ((v94 + v123) >> 24)
                  {
                    a1[11] = v128 + 1;
LABEL_170:
                    v126 = 0;
                    v123 = (unsigned __int16)v123;
                    a1[6] = (unsigned __int16)v123;
                    a1[10] = 0;
LABEL_171:
                    if (v94 > 0x4000)
                      goto LABEL_166;
                    continue;
                  }
                  if ((_DWORD)v128)
                  {
                    do
                    {
                      *(_BYTE *)(*((_QWORD *)a1 + 1) + v127) = -1;
                      v130 = a1[11];
                      v127 = *((_QWORD *)a1 + 2) + 1;
                      *((_QWORD *)a1 + 2) = v127;
                      a1[11] = --v130;
                    }
                    while (v130);
                  }
                }
                break;
              }
              *(_BYTE *)(*((_QWORD *)a1 + 1) + v127) = *((_WORD *)a1 + 13);
              ++*((_QWORD *)a1 + 2);
              LOWORD(v123) = *((_WORD *)a1 + 12);
              v94 = a1[7];
              goto LABEL_170;
            }
            v350 = 0;
            v348 = 0u;
            *(_OWORD *)v349 = 0u;
            *(_OWORD *)v346 = 0u;
            *(_OWORD *)v347 = 0u;
            *(_OWORD *)v344 = 0u;
            v345 = 0u;
            __b = 0u;
            gcl::polyline::ACContext::init((std::vector<int> *)&__b, a7);
            v336 = 0;
            v337 = 0;
            v338 = 0;
            v142 = a3;
            if ((_DWORD)a7)
            {
              if ((a7 & 0x80000000) != 0)
                std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
              v143 = operator new(4 * (int)a7);
              bzero(v143, 4 * (int)a7);
              v142 = a3;
            }
            else
            {
              v143 = 0;
            }
            if ((int)a6 >= 1)
            {
              a6 = a6;
              if (v84)
              {
                do
                {
                  if (*v142++)
                  {
                    v315 = v142;
                    gcl::polyline::EncoderImpl::encodeResidual((unint64_t)a1, (uint64_t)v58, (uint64_t)v143, a7, a11[4], &__b);
                    v142 = v315;
                  }
                  v58 = (int32x4_t *)((char *)v58 + 4 * (int)a7);
                  --a6;
                }
                while (a6);
              }
              else
              {
                do
                {
                  gcl::polyline::EncoderImpl::encodeResidual((unint64_t)a1, (uint64_t)v58, (uint64_t)v143, a7, a11[4], &__b);
                  v58 = (int32x4_t *)((char *)v58 + 4 * (int)a7);
                  --a6;
                }
                while (a6);
              }
            }
            if (v143)
              operator delete(v143);
            v296 = v349[0];
            v295 = v318;
            v24 = v319;
            if (!v349[0])
            {
LABEL_370:
              v297 = v347[1];
              if (v347[1])
                goto LABEL_371;
              goto LABEL_372;
            }
LABEL_369:
            v349[1] = v296;
            operator delete(v296);
            goto LABEL_370;
          }
          v12 = 5;
LABEL_389:
          operator delete(v24);
          operator delete(v335);
          return v12;
        }
        v350 = 0;
        v348 = 0u;
        *(_OWORD *)v349 = 0u;
        *(_OWORD *)v346 = 0u;
        *(_OWORD *)v347 = 0u;
        *(_OWORD *)v344 = 0u;
        v345 = 0u;
        __b = 0u;
        gcl::polyline::ACContext::init((std::vector<int> *)&__b, a7);
        v342 = 0x8000;
        memset_pattern16(&v339, &unk_189CFAE50, 6uLL);
        v323 = v60[6];
        v336 = 0;
        v337 = 0;
        v338 = 0;
        if (!(_DWORD)a7)
        {
          v320 = 0;
          __nc = 0;
          __p = 0;
          v351 = -1;
          v352 = -1;
LABEL_206:
          v151 = a3;
          if ((int)a6 < 1)
          {
LABEL_364:
            if (__p)
              operator delete(__p);
            v295 = v318;
            v24 = v319;
            if (__nc)
              operator delete(__nc);
            v296 = v349[0];
            if (!v349[0])
              goto LABEL_370;
            goto LABEL_369;
          }
          v152 = 0;
          v153 = 0;
          v322 = a6;
          while (1)
          {
            if (v323 && !v151[v152])
              goto LABEL_211;
            v327 = (uint64_t)v58->i64 + 4 * v152 * (int)a7;
            v161 = *(_DWORD *)((char *)dword_189CFADFC + (((67584 - (unint64_t)v342) >> 10) & 0x3FFFFFFFFFFFFCLL))
                 + v320;
            v324 = v153 + 3;
            v162 = *((_DWORD *)&v351 + ((v153 + 3) & 3));
            v326 = v153;
            if (v60[7])
            {
              v330 = v60[4];
              v328 = ((unint64_t)v342 + 2048) >> 12;
              v329 = v339;
              if (v162 == -1)
              {
                v154 = -1;
              }
              else
              {
                if ((_DWORD)a7)
                {
                  v163 = v162 * (int)a7;
                  if (a7 < 8uLL)
                  {
                    v164 = 0;
                    goto LABEL_250;
                  }
                  v164 = 0;
                  if ((unint64_t)((char *)__nc - (char *)v58 - 4 * v163) < 0x20)
                    goto LABEL_250;
                  if ((unint64_t)((char *)__nc - (char *)v58) < 0x20)
                    goto LABEL_250;
                  v177 = (int32x4_t *)(__nc + 4);
                  v178 = a7 - (a7 & 7);
                  v179 = v58;
                  do
                  {
                    v180 = vsubq_s32(v179[1], *(int32x4_t *)((char *)v179 + 4 * v163 + 16));
                    v177[-1] = vsubq_s32(*v179, *(int32x4_t *)((char *)v179 + 4 * v163));
                    *v177 = v180;
                    v179 += 2;
                    v177 += 2;
                    v178 -= 8;
                  }
                  while (v178);
                  v164 = a7 - (a7 & 7);
                  if ((a7 & 7) != 0)
                  {
LABEL_250:
                    v181 = a7 - v164;
                    v182 = v164;
                    v183 = &__nc[v164];
                    v184 = &v58->i32[v182];
                    do
                    {
                      v185 = v184[v163];
                      v186 = *v184++;
                      *v183++ = v186 - v185;
                      --v181;
                    }
                    while (v181);
                  }
                }
                v187 = gcl::polyline::EncoderImpl::estimateBitsAccurate(__nc, a7, v330, (unsigned __int16 **)&__b);
                if (dword_189CFADFC[v328]
                   + v187
                   + *(_DWORD *)((char *)dword_189CFADFC + (((v329 + 2048) >> 10) & 0x7CLL))
                   + *(_DWORD *)((char *)dword_189CFADFC + (((v340 + 2048) >> 10) & 0x7CLL)) >= v161)
                {
                  v154 = -1;
                }
                else
                {
                  v161 = dword_189CFADFC[v328]
                       + v187
                       + *(_DWORD *)((char *)dword_189CFADFC + (((v329 + 2048) >> 10) & 0x7CLL))
                       + *(_DWORD *)((char *)dword_189CFADFC + (((v340 + 2048) >> 10) & 0x7CLL));
                  v154 = 0;
                }
              }
              v188 = *((_DWORD *)&v351 + (v153 & 3));
              if (v188 != -1)
              {
                v189 = v154;
                if ((_DWORD)a7)
                {
                  v190 = v188 * (int)a7;
                  if (a7 < 8uLL)
                  {
                    v191 = 0;
                    goto LABEL_264;
                  }
                  v191 = 0;
                  if ((unint64_t)((char *)__nc - (char *)v58 - 4 * v190) < 0x20)
                    goto LABEL_264;
                  if ((unint64_t)((char *)__nc - (char *)v58) < 0x20)
                    goto LABEL_264;
                  v192 = (int32x4_t *)(__nc + 4);
                  v193 = a7 - (a7 & 7);
                  v194 = v58;
                  do
                  {
                    v195 = vsubq_s32(v194[1], *(int32x4_t *)((char *)v194 + 4 * v190 + 16));
                    v192[-1] = vsubq_s32(*v194, *(int32x4_t *)((char *)v194 + 4 * v190));
                    *v192 = v195;
                    v194 += 2;
                    v192 += 2;
                    v193 -= 8;
                  }
                  while (v193);
                  v191 = a7 - (a7 & 7);
                  if ((a7 & 7) != 0)
                  {
LABEL_264:
                    v196 = a7 - v191;
                    v197 = v191;
                    v198 = &__nc[v191];
                    v199 = &v58->i32[v197];
                    do
                    {
                      v200 = v199[v190];
                      v201 = *v199++;
                      *v198++ = v201 - v200;
                      --v196;
                    }
                    while (v196);
                  }
                }
                v202 = gcl::polyline::EncoderImpl::estimateBitsAccurate(__nc, a7, v330, (unsigned __int16 **)&__b);
                if (dword_189CFADFC[v328]
                   + v202
                   + *(_DWORD *)((char *)dword_189CFADFC + (((v329 + 2048) >> 10) & 0x7CLL))
                   + *(_DWORD *)((char *)dword_189CFADFC
                               + (((67584 - (unint64_t)v340) >> 10) & 0x3FFFFFFFFFFFFCLL)) >= v161)
                {
                  v154 = v189;
                }
                else
                {
                  v161 = dword_189CFADFC[v328]
                       + v202
                       + *(_DWORD *)((char *)dword_189CFADFC + (((v329 + 2048) >> 10) & 0x7CLL))
                       + *(_DWORD *)((char *)dword_189CFADFC
                                   + (((67584 - (unint64_t)v340) >> 10) & 0x3FFFFFFFFFFFFCLL));
                  v154 = 1;
                }
              }
              v203 = *((_DWORD *)&v351 + (((_BYTE)v153 + 1) & 3));
              if (v203 != -1)
              {
                v204 = v154;
                if ((_DWORD)a7)
                {
                  v205 = v203 * (int)a7;
                  if (a7 < 8uLL)
                  {
                    v206 = 0;
                    goto LABEL_278;
                  }
                  v206 = 0;
                  if ((unint64_t)((char *)__nc - (char *)v58 - 4 * v205) < 0x20)
                    goto LABEL_278;
                  if ((unint64_t)((char *)__nc - (char *)v58) < 0x20)
                    goto LABEL_278;
                  v207 = (int32x4_t *)(__nc + 4);
                  v208 = a7 - (a7 & 7);
                  v209 = v58;
                  do
                  {
                    v210 = vsubq_s32(v209[1], *(int32x4_t *)((char *)v209 + 4 * v205 + 16));
                    v207[-1] = vsubq_s32(*v209, *(int32x4_t *)((char *)v209 + 4 * v205));
                    *v207 = v210;
                    v209 += 2;
                    v207 += 2;
                    v208 -= 8;
                  }
                  while (v208);
                  v206 = a7 - (a7 & 7);
                  if ((a7 & 7) != 0)
                  {
LABEL_278:
                    v211 = a7 - v206;
                    v212 = v206;
                    v213 = &__nc[v206];
                    v214 = &v58->i32[v212];
                    do
                    {
                      v215 = v214[v205];
                      v216 = *v214++;
                      *v213++ = v216 - v215;
                      --v211;
                    }
                    while (v211);
                  }
                }
                v217 = gcl::polyline::EncoderImpl::estimateBitsAccurate(__nc, a7, v330, (unsigned __int16 **)&__b);
                if (dword_189CFADFC[v328]
                   + v217
                   + *(_DWORD *)((char *)dword_189CFADFC
                               + (((unint64_t)(67584 - v329) >> 10) & 0x3FFFFFFFFFFFFCLL))
                   + *(_DWORD *)((char *)dword_189CFADFC + (((v341 + 2048) >> 10) & 0x7CLL)) >= v161)
                {
                  v154 = v204;
                }
                else
                {
                  v161 = dword_189CFADFC[v328]
                       + v217
                       + *(_DWORD *)((char *)dword_189CFADFC
                                   + (((unint64_t)(67584 - v329) >> 10) & 0x3FFFFFFFFFFFFCLL))
                       + *(_DWORD *)((char *)dword_189CFADFC + (((v341 + 2048) >> 10) & 0x7CLL));
                  v154 = 2;
                }
              }
              v218 = *((_DWORD *)&v351 + (((_BYTE)v153 + 2) & 3));
              if (v218 == -1)
                goto LABEL_362;
              v219 = v154;
              if ((_DWORD)a7)
              {
                v220 = v218 * (int)a7;
                if (a7 < 8uLL)
                {
                  v221 = 0;
                  goto LABEL_292;
                }
                v221 = 0;
                if ((unint64_t)((char *)__nc - (char *)v58 - 4 * v220) < 0x20)
                  goto LABEL_292;
                if ((unint64_t)((char *)__nc - (char *)v58) < 0x20)
                  goto LABEL_292;
                v222 = (int32x4_t *)(__nc + 4);
                v223 = a7 - (a7 & 7);
                v224 = v58;
                do
                {
                  v225 = vsubq_s32(v224[1], *(int32x4_t *)((char *)v224 + 4 * v220 + 16));
                  v222[-1] = vsubq_s32(*v224, *(int32x4_t *)((char *)v224 + 4 * v220));
                  *v222 = v225;
                  v224 += 2;
                  v222 += 2;
                  v223 -= 8;
                }
                while (v223);
                v221 = a7 - (a7 & 7);
                if ((a7 & 7) != 0)
                {
LABEL_292:
                  v226 = a7 - v221;
                  v227 = v221;
                  v228 = &__nc[v221];
                  v229 = &v58->i32[v227];
                  do
                  {
                    v230 = v229[v220];
                    v231 = *v229++;
                    *v228++ = v231 - v230;
                    --v226;
                  }
                  while (v226);
                }
              }
              v232 = gcl::polyline::EncoderImpl::estimateBitsAccurate(__nc, a7, v330, (unsigned __int16 **)&__b);
              v154 = v219;
              if (dword_189CFADFC[v328]
                 + v232
                 + *(_DWORD *)((char *)dword_189CFADFC + (((unint64_t)(67584 - v329) >> 10) & 0x3FFFFFFFFFFFFCLL))
                 + *(_DWORD *)((char *)dword_189CFADFC + (((67584 - (unint64_t)v341) >> 10) & 0x3FFFFFFFFFFFFCLL)) < v161)
                goto LABEL_208;
              goto LABEL_362;
            }
            if (!(_DWORD)a7)
            {
              v15 = v162 == -1;
              v168 = v162 == -1;
              v169 = v161 & (v161 >> 31);
              if (v15)
                v169 = *(_DWORD *)((char *)dword_189CFADFC
                                 + (((67584 - (unint64_t)v342) >> 10) & 0x3FFFFFFFFFFFFCLL))
                     + v320;
              if (v161 < 1)
                v168 = 1;
              v170 = v168 << 31 >> 31;
              v171 = *((_DWORD *)&v351 + (v153 & 3)) == -1;
              if (v169 >= 1 && *((_DWORD *)&v351 + (v153 & 3)) != -1)
                v170 = 1;
              v173 = v169 > 0;
              v174 = !v171 || !v173;
              if (v171 && v173)
                v175 = 2;
              else
                v175 = v170;
              if (v174)
                v176 = v170;
              else
                v176 = 3;
              if (*((_DWORD *)&v351 + (((_BYTE)v153 + 1) & 3)) == -1)
                v175 = v176;
              else
                v170 = v175;
              if (*((_DWORD *)&v351 + (((_BYTE)v153 + 2) & 3)) == -1)
                v154 = v170;
              else
                v154 = v175;
              goto LABEL_362;
            }
            if (v162 == -1)
            {
              v154 = -1;
              goto LABEL_313;
            }
            v165 = v162 * (int)a7;
            if (a7 >= 8uLL)
            {
              v166 = 0;
              v167 = __nc;
              if ((unint64_t)((char *)__nc - (char *)v58 - 4 * v165) >= 0x20
                && (unint64_t)((char *)__nc - (char *)v58) >= 0x20)
              {
                v233 = (int32x4_t *)(__nc + 4);
                v234 = a7 - (a7 & 7);
                v235 = v58;
                do
                {
                  v236 = vsubq_s32(v235[1], *(int32x4_t *)((char *)v235 + 4 * v165 + 16));
                  v233[-1] = vsubq_s32(*v235, *(int32x4_t *)((char *)v235 + 4 * v165));
                  *v233 = v236;
                  v235 += 2;
                  v233 += 2;
                  v234 -= 8;
                }
                while (v234);
                v166 = a7 - (a7 & 7);
                if ((a7 & 7) == 0)
                  goto LABEL_304;
              }
            }
            else
            {
              v166 = 0;
              v167 = __nc;
            }
            v237 = a7 - v166;
            v238 = v166;
            v239 = &v167[v166];
            v240 = &v58->i32[v238];
            do
            {
              v241 = v240[v165];
              v242 = *v240++;
              *v239++ = v242 - v241;
              --v237;
            }
            while (v237);
LABEL_304:
            v243 = *v167;
            if (*v167 < 0)
              v243 = -v243;
            v244 = __clz(v243 + 1) * a7;
            v245 = -v244;
            if (-v244 < v161)
              v246 = -v244;
            else
              v246 = v161;
            if (v161 > v245)
              v154 = 0;
            else
              v154 = -1;
            v161 = v246;
LABEL_313:
            v247 = *((_DWORD *)&v351 + (v153 & 3));
            if (v247 == -1)
              goto LABEL_331;
            v248 = v247 * (int)a7;
            if (a7 >= 8uLL)
            {
              v249 = 0;
              if ((unint64_t)((char *)__nc - (char *)v58 - 4 * v248) >= 0x20
                && (unint64_t)((char *)__nc - (char *)v58) >= 0x20)
              {
                v250 = (int32x4_t *)(__nc + 4);
                v251 = a7 - (a7 & 7);
                v252 = v58;
                do
                {
                  v253 = vsubq_s32(v252[1], *(int32x4_t *)((char *)v252 + 4 * v248 + 16));
                  v250[-1] = vsubq_s32(*v252, *(int32x4_t *)((char *)v252 + 4 * v248));
                  *v250 = v253;
                  v252 += 2;
                  v250 += 2;
                  v251 -= 8;
                }
                while (v251);
                v249 = a7 - (a7 & 7);
                if ((a7 & 7) == 0)
                  goto LABEL_323;
              }
            }
            else
            {
              v249 = 0;
            }
            v254 = a7 - v249;
            v255 = v249;
            v256 = &__nc[v249];
            v257 = &v58->i32[v255];
            do
            {
              v258 = v257[v248];
              v259 = *v257++;
              *v256++ = v259 - v258;
              --v254;
            }
            while (v254);
LABEL_323:
            v260 = *__nc;
            if (*__nc < 0)
              v260 = -v260;
            v261 = __clz(v260 + 1) * a7;
            v262 = -v261;
            if (-v261 < v161)
              v263 = -v261;
            else
              v263 = v161;
            if (v161 > v262)
              v154 = 1;
            v161 = v263;
LABEL_331:
            v264 = *((_DWORD *)&v351 + (((_BYTE)v153 + 1) & 3));
            if (v264 == -1)
              goto LABEL_349;
            v265 = v264 * (int)a7;
            if (a7 >= 8uLL)
            {
              v266 = 0;
              if ((unint64_t)((char *)__nc - (char *)v58 - 4 * v265) >= 0x20
                && (unint64_t)((char *)__nc - (char *)v58) >= 0x20)
              {
                v267 = (int32x4_t *)(__nc + 4);
                v268 = a7 - (a7 & 7);
                v269 = v58;
                do
                {
                  v270 = vsubq_s32(v269[1], *(int32x4_t *)((char *)v269 + 4 * v265 + 16));
                  v267[-1] = vsubq_s32(*v269, *(int32x4_t *)((char *)v269 + 4 * v265));
                  *v267 = v270;
                  v269 += 2;
                  v267 += 2;
                  v268 -= 8;
                }
                while (v268);
                v266 = a7 - (a7 & 7);
                if ((a7 & 7) == 0)
                  goto LABEL_341;
              }
            }
            else
            {
              v266 = 0;
            }
            v271 = a7 - v266;
            v272 = v266;
            v273 = &__nc[v266];
            v274 = &v58->i32[v272];
            do
            {
              v275 = v274[v265];
              v276 = *v274++;
              *v273++ = v276 - v275;
              --v271;
            }
            while (v271);
LABEL_341:
            v277 = *__nc;
            if (*__nc < 0)
              v277 = -v277;
            v278 = __clz(v277 + 1) * a7;
            v279 = -v278;
            if (-v278 < v161)
              v280 = -v278;
            else
              v280 = v161;
            if (v161 > v279)
              v154 = 2;
            v161 = v280;
LABEL_349:
            v281 = *((_DWORD *)&v351 + (((_BYTE)v153 + 2) & 3));
            if (v281 == -1)
              goto LABEL_362;
            v282 = v281 * (int)a7;
            if (a7 < 8uLL)
            {
              v283 = 0;
LABEL_357:
              v288 = a7 - v283;
              v289 = v283;
              v290 = &__nc[v283];
              v291 = &v58->i32[v289];
              do
              {
                v292 = v291[v282];
                v293 = *v291++;
                *v290++ = v293 - v292;
                --v288;
              }
              while (v288);
              goto LABEL_359;
            }
            v283 = 0;
            if ((unint64_t)((char *)__nc - (char *)v58 - 4 * v282) < 0x20)
              goto LABEL_357;
            if ((unint64_t)((char *)__nc - (char *)v58) < 0x20)
              goto LABEL_357;
            v284 = (int32x4_t *)(__nc + 4);
            v285 = a7 - (a7 & 7);
            v286 = v58;
            do
            {
              v287 = vsubq_s32(v286[1], *(int32x4_t *)((char *)v286 + 4 * v282 + 16));
              v284[-1] = vsubq_s32(*v286, *(int32x4_t *)((char *)v286 + 4 * v282));
              *v284 = v287;
              v286 += 2;
              v284 += 2;
              v285 -= 8;
            }
            while (v285);
            v283 = a7 - (a7 & 7);
            if ((a7 & 7) != 0)
              goto LABEL_357;
LABEL_359:
            v294 = *__nc;
            if (*__nc < 0)
              v294 = -v294;
            if (v161 > (signed int)-(__clz(v294 + 1) * a7))
            {
LABEL_208:
              v154 = 3;
              goto LABEL_209;
            }
LABEL_362:
            if (v154 == -1)
            {
              gcl::ArithmeticEncoder::encode((uint64_t)a1, 1, &v342);
              gcl::polyline::EncoderImpl::encodeResidual((unint64_t)a1, v327, (uint64_t)__p, a7, 0, 0);
              v60 = a11;
              goto LABEL_210;
            }
LABEL_209:
            v155 = *((_DWORD *)&v351 + (((_BYTE)v154 + v324) & 3));
            v156 = v152;
            v157 = v154;
            gcl::ArithmeticEncoder::encode((uint64_t)a1, 0, &v342);
            v158 = v157 >> 1;
            gcl::ArithmeticEncoder::encode((uint64_t)a1, (v157 >> 1) & 1, &v339);
            v159 = v157 & 1;
            v152 = v156;
            v160 = v158 + 1;
            v49 = v321;
            gcl::ArithmeticEncoder::encode((uint64_t)a1, v159, &v339 + v160);
            v60 = a11;
            gcl::polyline::EncoderImpl::encodeResidual((unint64_t)a1, v327, (uint64_t)v58->i64 + 4 * v155 * (int)a7, a7, a11[4], &__b);
LABEL_210:
            *((_DWORD *)&v351 + (v326 & 3)) = v152;
            v153 = v326 + 1;
            v151 = a3;
LABEL_211:
            if (++v152 == v322)
              goto LABEL_364;
          }
        }
        if ((a7 & 0x80000000) != 0)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v336 = (char *)operator new(4 * (int)a7);
        v338 = &v336[4 * (int)a7];
        bzero(v336, 4 * (int)a7);
        __nc = (int *)v336;
        v337 = v338;
        v351 = -1;
        v352 = -1;
        v139 = *v25;
        if (a7 >= 8uLL)
        {
          v140 = a7 - (a7 & 7);
          v144 = v139 + 1;
          v145 = 0uLL;
          v146 = v140;
          v147 = 0uLL;
          do
          {
            v145 = vaddq_s32(vshlq_n_s32(v144[-1], 0xAuLL), v145);
            v147 = vaddq_s32(vshlq_n_s32(*v144, 0xAuLL), v147);
            v144 += 2;
            v146 -= 8;
          }
          while (v146);
          v141 = vaddvq_s32(vaddq_s32(v147, v145));
          if ((a7 & 7) == 0)
            goto LABEL_205;
        }
        else
        {
          v140 = 0;
          v141 = 0;
        }
        v148 = a7 - v140;
        v149 = &v139->i32[v140];
        do
        {
          v150 = *v149++;
          v141 += v150 << 10;
          --v148;
        }
        while (v148);
LABEL_205:
        v320 = v141;
        __p = operator new(4 * (int)a7);
        bzero(__p, 4 * (int)a7);
        goto LABEL_206;
      }
    }
  }
  return v12;
}

void sub_189AD1FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50)
{
  void *v51;
  void *v52;
  void *v53;
  void *v54;

  if (__p)
  {
    operator delete(__p);
    v51 = a46;
    if (!a46)
    {
LABEL_3:
      v52 = a43;
      if (!a43)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v51 = a46;
    if (!a46)
      goto LABEL_3;
  }
  operator delete(v51);
  v52 = a43;
  if (!a43)
  {
LABEL_4:
    v53 = a40;
    if (!a40)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v52);
  v53 = a40;
  if (!a40)
  {
LABEL_5:
    v54 = a37;
    if (!a37)
    {
LABEL_12:
      operator delete(a14);
      operator delete(a32);
      _Unwind_Resume(a1);
    }
LABEL_11:
    operator delete(v54);
    operator delete(a14);
    operator delete(a32);
    _Unwind_Resume(a1);
  }
LABEL_10:
  operator delete(v53);
  v54 = a37;
  if (!a37)
    goto LABEL_12;
  goto LABEL_11;
}

void sub_189AD20C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

void gcl::tmesh::DecoderImpl::decompress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int *v15;
  int v16;
  int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unsigned int v28;
  _WORD *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int v45;
  int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  _BOOL4 v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;

  v60 = 0;
  if (*(int *)(a1 + 3788) >= 1)
  {
    v6 = 0;
    v7 = 0;
    LODWORD(v8) = 0;
    LODWORD(v9) = -1;
    while (1)
    {
      while (v7 != v6)
      {
        if (++v7 >= *(int *)(a1 + 3788))
          return;
      }
      v10 = v6 + 1;
      v61 = v6 + 1;
      v11 = *(_BYTE *)(a1 + 3820) ? -1 : v9;
      *(_DWORD *)(*(_QWORD *)(a1 + 176) + 12 * v7) = v11;
      gcl::tmesh::DecoderImpl::decompressGeometry(a1, v7, a2);
      if ((int)v8 <= v6)
        break;
LABEL_73:
      ++v7;
      v6 = v10;
      if (v7 >= *(int *)(a1 + 3788))
        return;
    }
    v8 = (int)v8;
    v12 = *(_QWORD *)(a1 + 152);
    v13 = *(_DWORD *)(a1 + 2732);
    v14 = *(_DWORD *)(a1 + 2736);
    while (1)
    {
LABEL_9:
      v9 = v8;
      v15 = (int *)(v12 + 16 * v8);
      v17 = *v15;
      v16 = v15[1];
      v18 = v16 != -1;
      v19 = v17 != -1;
      v20 = v16 == v17 && v17 != -1;
      if (v13 < 0x40000001)
      {
        v21 = *(_DWORD *)(a1 + 2744);
        while (1)
        {
          v14 *= 2;
          *(_DWORD *)(a1 + 2744) = --v21;
          if (v21)
            goto LABEL_16;
          v24 = *(_QWORD *)(a1 + 2720);
          *(_QWORD *)(a1 + 2720) = v24 + 1;
          v25 = *(unsigned int *)(a1 + 2704);
          if (v24 + 1 >= v25)
          {
            v26 = 65280;
            v27 = v24 + 2;
            *(_QWORD *)(a1 + 2720) = v27;
            if (v27 >= v25)
            {
LABEL_22:
              v22 = 255;
              goto LABEL_15;
            }
          }
          else
          {
            v26 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v24 + 1) << 8;
            v27 = v24 + 2;
            *(_QWORD *)(a1 + 2720) = v27;
            if (v27 >= v25)
              goto LABEL_22;
          }
          v22 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v27);
LABEL_15:
          v14 |= v26 | v22;
          v21 = 16;
          *(_DWORD *)(a1 + 2744) = 16;
LABEL_16:
          v23 = 2 * v13;
          v33 = v13 >= 0x20000001;
          v13 *= 2;
          if (v33)
            goto LABEL_24;
        }
      }
      v23 = v13;
LABEL_24:
      v28 = (v19 | (2 * v18)) + v20;
      v29 = (_WORD *)(a1 + 2 * v28 + 2048);
      v30 = (unsigned __int16)*v29;
      v13 = (HIWORD(v23) * v30) & 0xFFFF0000;
      v31 = v14 < v13 ? 0 : (HIWORD(v23) * v30) & 0xFFFF0000;
      v32 = v14 - v31;
      *(_DWORD *)(a1 + 2736) = v32;
      v33 = v14 >= v13;
      *v29 = *(_WORD *)(a1 + 2 * ((v30 >> 7) & 0x1FE | (v14 >= v13)) + 2752) + v30;
      v34 = v14 < v13 ? (HIWORD(v23) * v30) & 0xFFFF0000 : v23 - v13;
      *(_DWORD *)(a1 + 2732) = v34;
      if (v33)
        break;
      v14 = v32;
      ++v8;
      if (v9 + 1 >= v10)
        goto LABEL_73;
    }
    while (1)
    {
      v59 = 0;
      v38 = gcl::tmesh::DecoderImpl::decompressTFanConnectivity((gcl::tmesh::DecoderImpl *)a1, v8, v28, a3, &v59, &v61, &v60);
      if ((v38 & 0x80000000) != 0 || (int)v38 > *(_DWORD *)(a1 + 3792) + 1)
        break;
      if (v59 == 3 || v59 == 5)
      {
        if (v38)
        {
          v40 = v38 + 1;
          do
          {
            v41 = (v40 - 2);
            if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + v41))
              gcl::tmesh::DecoderImpl::decompressGeometry(a1, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v41), a2);
            --v40;
          }
          while (v40 > 1);
        }
      }
      else if (v38)
      {
        v42 = 0;
        v43 = v38;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + v42))
            gcl::tmesh::DecoderImpl::decompressGeometry(a1, *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v42), a2);
          ++v42;
        }
        while (v43 != v42);
      }
      v12 = *(_QWORD *)(a1 + 152);
      v44 = (int *)(v12 + 16 * v8);
      v46 = *v44;
      v45 = v44[1];
      v47 = v45 != -1;
      v48 = v46 != -1;
      v49 = v45 == v46 && v46 != -1;
      v50 = *(unsigned __int16 *)(a1 + 2058);
      v51 = *(_DWORD *)(a1 + 2732);
      v52 = *(_DWORD *)(a1 + 2736);
      if (v51 < 0x40000001)
      {
        v53 = *(_DWORD *)(a1 + 2744);
        while (2)
        {
          v52 *= 2;
          *(_DWORD *)(a1 + 2744) = --v53;
          if (v53)
            goto LABEL_65;
          v55 = *(_QWORD *)(a1 + 2720);
          *(_QWORD *)(a1 + 2720) = v55 + 1;
          v56 = *(unsigned int *)(a1 + 2704);
          if (v55 + 1 >= v56)
          {
            v57 = 65280;
            v58 = v55 + 2;
            *(_QWORD *)(a1 + 2720) = v58;
            if (v58 >= v56)
              goto LABEL_71;
          }
          else
          {
            v57 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v55 + 1) << 8;
            v58 = v55 + 2;
            *(_QWORD *)(a1 + 2720) = v58;
            if (v58 >= v56)
            {
LABEL_71:
              v54 = 255;
LABEL_64:
              v52 |= v57 | v54;
              v53 = 16;
              *(_DWORD *)(a1 + 2744) = 16;
LABEL_65:
              v35 = 2 * v51;
              v33 = v51 >= 0x20000001;
              v51 *= 2;
              if (v33)
                goto LABEL_34;
              continue;
            }
          }
          break;
        }
        v54 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v58);
        goto LABEL_64;
      }
      v35 = *(_DWORD *)(a1 + 2732);
LABEL_34:
      v28 = (v48 | (2 * v47)) + v49;
      v13 = (HIWORD(v35) * v50) & 0xFFFF0000;
      if (v52 < v13)
        v36 = 0;
      else
        v36 = (HIWORD(v35) * v50) & 0xFFFF0000;
      v14 = v52 - v36;
      *(_DWORD *)(a1 + 2736) = v14;
      *(_WORD *)(a1 + 2058) = *(_WORD *)(a1 + 2 * ((v50 >> 7) & 0x1FE | (v52 >= v13)) + 2752) + v50;
      if (v52 < v13)
        v37 = (HIWORD(v35) * v50) & 0xFFFF0000;
      else
        v37 = v35 - v13;
      *(_DWORD *)(a1 + 2732) = v37;
      if (v52 < v13)
      {
        v10 = v61;
        ++v8;
        if (v9 + 1 >= v61)
          goto LABEL_73;
        goto LABEL_9;
      }
    }
    *(_DWORD *)(a1 + 3872) = 3;
  }
}

void gcl::tmesh::EstimateQuantizedNormals(uint64_t *a1, _QWORD *a2, uint64_t a3, signed int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  int *v21;
  float *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  float *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  float *v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  float *v94;
  unint64_t v95;
  int8x8_t v96;
  unint64_t v97;
  float *v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int8x8_t v105;
  uint64_t v106;
  unint64_t v107;
  signed int *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  float32x2x3_t v118;
  float32x2x3_t v119;

  v7 = (a1[1] - *a1) / 12;
  v8 = *a2;
  v9 = a2[1];
  v10 = *(float **)a3;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v11 = v7 << 32;
  if (!(v7 << 32))
  {
    v18 = 0;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 2);
    if ((int)v19 < 1)
      goto LABEL_81;
    goto LABEL_16;
  }
  v12 = (int)v7;
  v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v10) >> 2);
  v116 = v7;
  if (v13 >= (int)v7)
  {
    bzero(v10, 12 * ((12 * (int)v7 - 12) / 0xCuLL) + 12);
    *(_QWORD *)(a3 + 8) = &v10[3 * (int)v7];
    if (v11 < 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  else
  {
    if (v11 < 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v14 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v10) >> 2);
    if (v14 <= (int)v7)
      v14 = (int)v7;
    if (v13 >= 0xAAAAAAAAAAAAAAALL)
      v15 = 0x1555555555555555;
    else
      v15 = v14;
    if (v15 > 0x1555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = 12 * v15;
    v17 = (char *)operator new(12 * v15);
    bzero(v17, 12 * ((12 * v12 - 12) / 0xC) + 12);
    *(_QWORD *)a3 = v17;
    *(_QWORD *)(a3 + 8) = &v17[12 * v12];
    *(_QWORD *)(a3 + 16) = &v17[v16];
    if (v10)
      operator delete(v10);
  }
  v18 = operator new(v12);
  bzero(v18, v12);
  LODWORD(v7) = v116;
  v19 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 2);
  if ((int)v19 >= 1)
  {
LABEL_16:
    v19 = v19;
    v20 = *a1;
    v21 = (int *)(*a2 + 8);
    v22 = *(float **)a3;
    do
    {
      v24 = *(v21 - 2);
      v25 = (int *)(v20 + 12 * v24);
      v26 = (int *)(v20 + 12 * *(v21 - 1));
      v27 = (int *)(v20 + 12 * *v21);
      v28 = *v25;
      v29 = v25[1];
      v30 = *v26 - v28;
      v31 = *v27 - v28;
      v32 = v26[1] - v29;
      v33 = v25[2];
      v34 = v26[2] - v33;
      v35 = v27[1] - v29;
      v36 = v27[2] - v33;
      v37 = v36 * v32 - v35 * v34;
      v38 = v31 * v34 - v36 * v30;
      v39 = v35 * v30 - v31 * v32;
      v40 = &v22[3 * v24];
      v41 = *((_BYTE *)v18 + v24);
      if (v41)
      {
        v42 = 1 << (v41 - 1);
        v43 = (v42 + v37) >> v41;
        if (v37 < 0)
          v43 = -((v42 - v37) >> v41);
        if (v38 < 0)
          v44 = -((v42 - v38) >> v41);
        else
          v44 = (v42 + v38) >> v41;
        v45 = v44 + *((int *)v40 + 1);
        v46 = (v42 - v39) >> v41;
        v47 = (v42 + v39) >> v41;
        if (v39 < 0)
          v47 = -v46;
        v48 = v47 + *((int *)v40 + 2);
      }
      else
      {
        v45 = v38 + *((int *)v40 + 1);
        v48 = v39 + *((int *)v40 + 2);
        v43 = v37;
      }
      v49 = v43 + *(int *)v40;
      v50 = (uint64_t)fmax(fmax(fabs((double)v49), fabs((double)v45)), fabs((double)v48)) + 1;
      if (v50 >> 30)
      {
        v51 = __clz(v50);
        v52 = 34 - v51;
        *((_BYTE *)v18 + v24) = v41 + 34 - v51;
        v53 = 1 << (33 - v51);
        v54 = (unint64_t)(v53 - v49) >> (34 - v51);
        v55 = (unint64_t)(v53 + v49) >> (34 - v51);
        if (v49 < 0)
          v49 = -(uint64_t)v54;
        else
          LODWORD(v49) = v55;
        if (v45 < 0)
          v45 = -(uint64_t)((unint64_t)(v53 - v45) >> v52);
        else
          v45 = (unint64_t)(v53 + v45) >> v52;
        v56 = (unint64_t)(v53 - v48) >> v52;
        v57 = (unint64_t)(v53 + v48) >> v52;
        if (v48 < 0)
          v48 = -(uint64_t)v56;
        else
          LODWORD(v48) = v57;
      }
      *(_DWORD *)v40 = v49;
      *((_DWORD *)v40 + 1) = v45;
      *((_DWORD *)v40 + 2) = v48;
      v58 = *(v21 - 1);
      v59 = &v22[3 * (int)v58];
      v60 = *((_BYTE *)v18 + v58);
      if (v60)
      {
        v61 = 1 << (v60 - 1);
        if (v37 < 0)
          v62 = -((v61 - v37) >> v60);
        else
          v62 = (v61 + v37) >> v60;
        v63 = (v61 + v38) >> v60;
        if (v38 < 0)
          v63 = -((v61 - v38) >> v60);
        v64 = v63 + *((int *)v59 + 1);
        v65 = (v61 + v39) >> v60;
        v66 = (v61 - v39) >> v60;
        if (v39 < 0)
          v67 = -v66;
        else
          v67 = v65;
        v68 = v67 + *((int *)v59 + 2);
      }
      else
      {
        v64 = v38 + *((int *)v59 + 1);
        v68 = v39 + *((int *)v59 + 2);
        v62 = v37;
      }
      v69 = v62 + *(int *)v59;
      v70 = (uint64_t)fmax(fmax(fabs((double)v69), fabs((double)v64)), fabs((double)v68)) + 1;
      if (v70 >> 30)
      {
        v71 = __clz(v70);
        v72 = 34 - v71;
        *((_BYTE *)v18 + v58) = v60 + 34 - v71;
        v73 = 1 << (33 - v71);
        v74 = (unint64_t)(v73 + v69) >> (34 - v71);
        v75 = (unint64_t)(v73 - v69) >> (34 - v71);
        if (v69 < 0)
          v69 = -(uint64_t)v75;
        else
          LODWORD(v69) = v74;
        if (v64 < 0)
          v64 = -(uint64_t)((unint64_t)(v73 - v64) >> v72);
        else
          v64 = (unint64_t)(v73 + v64) >> v72;
        v76 = (unint64_t)(v73 + v68) >> v72;
        v77 = (unint64_t)(v73 - v68) >> v72;
        if (v68 < 0)
          v68 = -(uint64_t)v77;
        else
          LODWORD(v68) = v76;
      }
      *(_DWORD *)v59 = v69;
      *((_DWORD *)v59 + 1) = v64;
      *((_DWORD *)v59 + 2) = v68;
      v78 = *v21;
      v79 = &v22[3 * (int)v78];
      v80 = *((_BYTE *)v18 + v78);
      if (v80)
      {
        v81 = 1 << (v80 - 1);
        if (v37 < 0)
          v37 = -((v81 - v37) >> v80);
        else
          v37 = (v81 + v37) >> v80;
        if (v38 < 0)
          v82 = -((v81 - v38) >> v80);
        else
          v82 = (v81 + v38) >> v80;
        v83 = v82 + *((int *)v79 + 1);
        v84 = (v81 + v39) >> v80;
        v85 = (v81 - v39) >> v80;
        if (v39 < 0)
          v86 = -v85;
        else
          v86 = v84;
        v23 = v86 + *((int *)v79 + 2);
      }
      else
      {
        v83 = v38 + *((int *)v79 + 1);
        v23 = v39 + *((int *)v79 + 2);
      }
      v87 = v37 + *(int *)v79;
      v88 = (uint64_t)fmax(fmax(fabs((double)v87), fabs((double)v83)), fabs((double)v23)) + 1;
      if (v88 >> 30)
      {
        v89 = __clz(v88);
        v90 = 34 - v89;
        *((_BYTE *)v18 + v78) = v80 + 34 - v89;
        v91 = 1 << (33 - v89);
        v92 = (unint64_t)(v91 + v87) >> (34 - v89);
        v93 = (unint64_t)(v91 - v87) >> (34 - v89);
        if (v87 < 0)
          v87 = -(uint64_t)v93;
        else
          LODWORD(v87) = v92;
        if (v83 < 0)
          v83 = -(uint64_t)((unint64_t)(v91 - v83) >> v90);
        else
          v83 = (unint64_t)(v91 + v83) >> v90;
        if (v23 < 0)
          v23 = -(uint64_t)((unint64_t)(v91 - v23) >> v90);
        else
          v23 = (unint64_t)(v91 + v23) >> v90;
      }
      *(_DWORD *)v79 = v87;
      *((_DWORD *)v79 + 1) = v83;
      v21 += 3;
      *((_DWORD *)v79 + 2) = v23;
      --v19;
    }
    while (v19);
  }
LABEL_81:
  if ((int)v7 < 1)
    goto LABEL_113;
  v94 = *(float **)a3;
  if (v7 >= 2uLL)
  {
    v95 = v7 - (unint64_t)(v7 & 1);
    v96 = (int8x8_t)vdup_n_s32(a4);
    v97 = v95;
    v98 = *(float **)a3;
    while (1)
    {
      v118 = vld3_f32(v98);
      v99.i64[0] = v118.val[0].i32[0];
      v99.i64[1] = v118.val[0].i32[1];
      v100 = v99;
      v99.i64[0] = v118.val[1].i32[0];
      v99.i64[1] = v118.val[1].i32[1];
      v101 = v99;
      v99.i64[0] = v118.val[2].i32[0];
      v99.i64[1] = v118.val[2].i32[1];
      v102 = v99;
      v103 = vabsq_s64(v99);
      v104 = vaddq_s64(vaddq_s64(vabsq_s64(v101), vabsq_s64(v100)), v103);
      v105 = (int8x8_t)vmovn_s64(vtstq_s64(v104, v104));
      if ((v105.i8[0] & 1) != 0)
      {
        v103.i64[0] = v100.i32[0] * (uint64_t)a4 / v104.i64[0];
        v106 = v104.i64[1];
        if ((v105.i8[4] & 1) == 0)
        {
LABEL_88:
          if ((v105.i8[0] & 1) == 0)
            goto LABEL_89;
          goto LABEL_95;
        }
      }
      else
      {
        v106 = v104.i64[1];
        if ((v105.i8[4] & 1) == 0)
          goto LABEL_88;
      }
      v103.i64[1] = v100.i32[2] * (uint64_t)a4 / v106;
      if ((v105.i8[0] & 1) == 0)
      {
LABEL_89:
        if ((v105.i8[4] & 1) == 0)
          goto LABEL_90;
        goto LABEL_96;
      }
LABEL_95:
      v100.i64[0] = v101.i32[0] * (uint64_t)a4 / v104.i64[0];
      if ((v105.i8[4] & 1) == 0)
      {
LABEL_90:
        if ((v105.i8[0] & 1) == 0)
          goto LABEL_91;
        goto LABEL_97;
      }
LABEL_96:
      v100.i64[1] = v101.i32[2] * (uint64_t)a4 / v106;
      if ((v105.i8[0] & 1) == 0)
      {
LABEL_91:
        if ((v105.i8[4] & 1) != 0)
          goto LABEL_98;
        goto LABEL_85;
      }
LABEL_97:
      v101.i64[0] = v102.i32[0] * (uint64_t)a4 / v104.i64[0];
      if ((v105.i8[4] & 1) != 0)
LABEL_98:
        v101.i64[1] = v102.i32[2] * (uint64_t)a4 / v106;
LABEL_85:
      v119.val[0] = (float32x2_t)vand_s8((int8x8_t)vmovn_s64(v103), v105);
      v119.val[1] = (float32x2_t)vand_s8((int8x8_t)vmovn_s64(v100), v105);
      v119.val[2] = (float32x2_t)vorr_s8((int8x8_t)vmovn_s64((int64x2_t)vbicq_s8((int8x16_t)v101, (int8x16_t)vceqzq_s64(v104))), vbic_s8(v96, v105));
      vst3_f32(v98, v119);
      v98 += 6;
      v97 -= 2;
      if (!v97)
      {
        if ((v7 & 1) != 0)
          goto LABEL_100;
        goto LABEL_113;
      }
    }
  }
  v95 = 0;
LABEL_100:
  v107 = v7 - v95;
  v108 = (signed int *)&v94[3 * v95 + 2];
  do
  {
    while (1)
    {
      v110 = *(v108 - 2);
      v109 = *(v108 - 1);
      v111 = *v108;
      v112 = v110 >= 0 ? *(v108 - 2) : -v110;
      v113 = v109 >= 0 ? *(v108 - 1) : -v109;
      v114 = v111 >= 0 ? *v108 : -v111;
      v115 = v113 + v112 + v114;
      if (!v115)
        break;
      *(v108 - 2) = (int)v110 * (uint64_t)a4 / v115;
      *(v108 - 1) = (int)v109 * (uint64_t)a4 / v115;
      *v108 = (int)v111 * (uint64_t)a4 / v115;
      v108 += 3;
      if (!--v107)
        goto LABEL_113;
    }
    *(v108 - 2) = 0;
    *(v108 - 1) = 0;
    *v108 = a4;
    v108 += 3;
    --v107;
  }
  while (v107);
LABEL_113:
  if (v18)
    operator delete(v18);
}

uint64_t gcl::polyline::DecoderImpl::decompressPositions(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 *a6)
{
  int *v6;
  uint64_t result;
  unint64_t v10;
  __int128 v11;
  unsigned int v12;
  unint64_t v13;
  int *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  BOOL v21;
  int v22;
  char v23;
  char v24;
  __int16 v25;
  int v26;
  int v27;
  int v28;
  char v29;
  char v30;
  unsigned __int8 *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  int v51;
  int v52;
  _DWORD *v53;

  v6 = (int *)*a2;
  if (!*a2)
    return 5;
  result = 5;
  if (!a3)
    return result;
  v10 = a2[1];
  if ((v10 & 0x8000000000000000) != 0)
    return result;
  if (a6)
  {
    v11 = *a6;
    *(_OWORD *)(a1 + 26) = *(__int128 *)((char *)a6 + 14);
    *(_OWORD *)(a1 + 12) = v11;
    v12 = *(_DWORD *)(a1 + 20);
  }
  else
  {
    if (v10 < 4)
      return 3;
    v20 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    if ((v10 & 0xFFFFFFFFFFFFFFFCLL) == 4 || v10 == 8 || v10 == 9)
      return 3;
    result = 3;
    if ((v10 & 0xFFFFFFFFFFFFFFFELL) == 0xA)
      return result;
    switch(v20)
    {
      case 0xCuLL:
        return result;
      case 0x10uLL:
        return result;
      case 0x14uLL:
        return result;
      case 0x18uLL:
        return result;
    }
    if (v10 == 28)
      return result;
    if (v10 == 29)
      return result;
    v21 = v10 >= 0x20;
    v10 -= 32;
    if (!v21 || *v6 != -294009975)
      return result;
    v22 = v6[1];
    v23 = *((_BYTE *)v6 + 8);
    v24 = *((_BYTE *)v6 + 9);
    v25 = *((_WORD *)v6 + 5);
    v12 = v6[3];
    v26 = v6[4] & 0x7FFFFFFF;
    v27 = v6[5] & 0x7FFFFFFF;
    v28 = v6[6] & 0x7FFFFFFF;
    v29 = *((_BYTE *)v6 + 28);
    v30 = *((_BYTE *)v6 + 29);
    *(_DWORD *)(a1 + 12) = 0;
    *(_BYTE *)(a1 + 16) = v23;
    *(_BYTE *)(a1 + 17) = v24;
    *(_WORD *)(a1 + 18) = v25;
    *(_DWORD *)(a1 + 20) = v12;
    *(_DWORD *)(a1 + 24) = v26;
    *(_DWORD *)(a1 + 28) = v27;
    *(_DWORD *)(a1 + 32) = v28;
    *(_DWORD *)(a1 + 36) = v22;
    *(_BYTE *)(a1 + 40) = v29;
    *(_BYTE *)(a1 + 41) = v30;
    v6 += 8;
    if (!v6)
      return 3;
  }
  v13 = v12;
  v14 = (int *)*a2;
  v15 = *a2 + v12;
  if (*a2)
    v16 = v15;
  else
    v16 = v13;
  result = 3;
  v17 = a2[1] - v13;
  *a2 = v16;
  a2[1] = v17;
  if (v17 < 0)
    return result;
  if (!v14)
    return result;
  if ((int *)((char *)v6 + v10) < v14)
    return result;
  if ((unint64_t)v6 > v15)
    return result;
  v18 = v15 - (_QWORD)v6;
  if ((uint64_t)(v15 - (_QWORD)v6) < 0)
    return result;
  if (*(_BYTE *)(a1 + 16) || *(unsigned __int8 *)(a1 + 17) - 1 > 1)
    return 4;
  result = *(unsigned __int8 *)(a1 + 40);
  if (!*(_BYTE *)(a1 + 40))
  {
    v19 = *(_BYTE *)(a1 + 41);
    if (!v19)
      goto LABEL_40;
    return 3;
  }
  if ((_DWORD)result == 3)
    return result;
  v19 = *(_BYTE *)(a1 + 41) == 4;
LABEL_40:
  result = 3;
  if (v18 >= 4
    && (v19 & 1) == 0
    && (v18 & 0xFFFFFFFFFFFFFFFCLL) != 4
    && (v18 & 0xFFFFFFFFFFFFFFFCLL) != 8
    && v18 != 12
    && v18 != 13
    && v18 != 14)
  {
    v31 = (unsigned __int8 *)v6 + 15;
    if (v6 != (int *)-15)
    {
      v32 = *((unsigned __int8 *)v6 + 12);
      v33 = *((unsigned __int8 *)v6 + 13);
      v34 = *((unsigned __int8 *)v6 + 14);
      v35 = (int)v32 <= (int)v33 ? *((unsigned __int8 *)v6 + 13) : *((unsigned __int8 *)v6 + 12);
      v36 = v32 <= v33 ? *((unsigned __int8 *)v6 + 13) : *((unsigned __int8 *)v6 + 12);
      v37 = v35 >= v34 ? v36 : *((unsigned __int8 *)v6 + 14);
      if (v37 <= 0x1C)
      {
        v38 = *v6;
        v39 = v6[1];
        v40 = v6[2];
        v41 = v18 - 15;
        *(_DWORD *)a1 = v32;
        *(_DWORD *)(a1 + 4) = v33;
        *(_DWORD *)(a1 + 8) = v34;
        std::vector<gcl::Vector3<int>>::resize(a1 + 80, *(int *)(a1 + 24));
        result = gcl::polyline::DecoderImpl::decompressPositions(a1, v31, v41, *(int32x2_t **)(a1 + 80), a4, a5);
        if (!(_DWORD)result)
        {
          v42 = *(_DWORD *)(a1 + 24);
          if (!v38 && !v39 && !v40)
          {
            if (v42 >= 1)
            {
              v43 = 0;
              v44 = 0;
              do
              {
                result = 0;
                v45 = (uint64_t *)(*(_QWORD *)(a1 + 80) + v43);
                v46 = a3 + v43;
                v47 = *v45;
                *(_DWORD *)(v46 + 8) = *((_DWORD *)v45 + 2);
                *(_QWORD *)v46 = v47;
                ++v44;
                v43 += 12;
              }
              while (v44 < *(int *)(a1 + 24));
              return result;
            }
            return 0;
          }
          if (v42 < 1)
            return 0;
          v48 = 0;
          v49 = 0;
          do
          {
            result = 0;
            v50 = (_DWORD *)(*(_QWORD *)(a1 + 80) + v48);
            v51 = *v50 + v38;
            v52 = v50[1] + v39;
            LODWORD(v50) = v50[2] + v40;
            v53 = (_DWORD *)(a3 + v48);
            *v53 = v51;
            v53[1] = v52;
            v53[2] = (_DWORD)v50;
            ++v49;
            v48 += 12;
          }
          while (v49 < *(int *)(a1 + 24));
        }
      }
    }
  }
  return result;
}

void std::vector<gcl::Vector3<int>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<gcl::Vector3<int>>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 12 * a2;
  }
}

uint64_t gcl::polyline::DecoderImpl::decompressPositions(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int32x2_t *a4, uint64_t a5, uint64_t a6)
{
  BOOL v10;
  unint64_t v11;
  unsigned __int8 *v12;
  __int128 v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  signed int v35;
  int v36;
  unsigned int v37;
  int32x2_t *v38;
  __int32 v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  BOOL v53;
  unsigned int v54;
  int32x2_t *v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  signed int v60;
  int v61;
  int v62;
  int v63;
  char *v64;
  char *v65;
  int v66;
  _DWORD *v67;
  int32x2_t *v68;
  __int32 v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  unint64_t v78;
  unsigned int v79;
  unsigned int v80;
  _BOOL4 v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  unint64_t v92;
  int v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  _BOOL4 v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int v103;
  int v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  unint64_t v110;
  unsigned int v111;
  _BOOL4 v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  int v119;
  int v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  int v124;
  unint64_t v125;
  unsigned int v126;
  _BOOL4 v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  unsigned int v133;
  int v134;
  int v135;
  unsigned int v136;
  uint64_t v137;
  unint64_t v138;
  int v139;
  unint64_t v140;
  unsigned int v141;
  unsigned int v142;
  _BOOL4 v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  unint64_t v150;
  int v151;
  unint64_t v152;
  int v153;
  unint64_t v154;
  int v155;
  int v156;
  int v157;
  _DWORD *v158;
  void *v159;
  uint64_t v160;
  unsigned int v161;
  int v162;
  __int32 v163;
  __int128 v164;
  int32x2_t *v165;
  __int128 v166;
  int v167;
  int v168;
  char *v170;
  unsigned int v171;
  __int128 v172;
  int32x2_t __b;
  __int32 v174;
  void *v175[2];
  void *v176[2];
  __int128 v177;
  void *v178[2];
  void *v179[2];
  __int128 v180;
  void *__p[2];
  void *v182[2];
  __int128 v183;
  void *v184[2];
  void *v185[2];
  __int128 v186;
  void *v187[2];
  void *v188[2];
  __int128 v189;
  int32x2_t v190;
  __int32 v191;
  uint64_t v192;

  v192 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 16) || *(_BYTE *)(a1 + 17) != 1)
  {
    LODWORD(v11) = a3 & ~(a3 >> 63);
  }
  else
  {
    v10 = a3 < 4;
    a3 -= 4;
    if (v10)
      return 3;
    if (a2 == (unsigned __int8 *)-4)
      return 3;
    v11 = *(unsigned int *)a2;
    if (a3 < v11)
      return 3;
    a2 += 4;
  }
  if (a3 >= v11)
    v12 = a2;
  else
    v12 = 0;
  if (a3 < v11)
    LODWORD(v11) = 0;
  *(_DWORD *)(a1 + 128) = v11;
  *(_QWORD *)(a1 + 136) = v12;
  *(_QWORD *)&v13 = 0xFFFF000000000000;
  *((_QWORD *)&v13 + 1) = 0xFFFF000000000000;
  *(_OWORD *)(a1 + 152) = v13;
  *(_QWORD *)(a1 + 168) = 16;
  if (!(_DWORD)v11)
  {
    v14 = -16777216;
    goto LABEL_19;
  }
  v14 = *v12 << 24;
  *(_DWORD *)(a1 + 160) = v14;
  if ((_DWORD)v11 == 1)
  {
LABEL_19:
    v15 = v14 | 0xFF0000;
    goto LABEL_20;
  }
  v15 = v14 | (v12[1] << 16);
  *(_DWORD *)(a1 + 160) = v15;
  if (v11 <= 2)
  {
LABEL_20:
    v16 = v15 | 0xFF00;
    goto LABEL_21;
  }
  v16 = v15 | (v12[2] << 8);
  *(_DWORD *)(a1 + 160) = v16;
  if ((_DWORD)v11 != 3)
  {
    v17 = v12[3];
    goto LABEL_22;
  }
LABEL_21:
  v17 = 255;
LABEL_22:
  *(_DWORD *)(a1 + 160) = v17 | v16;
  *(_QWORD *)(a1 + 144) = 3;
  memcpy((void *)(a1 + 176), &gcl::ArithmeticDecoder::probUpdateLutInterleaved, 0x400uLL);
  LOWORD(v175[0]) = 0x8000;
  if (*(int *)(a1 + 32) >= 1)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)(a1 + 128), v19, v175);
      *(_DWORD *)(a6 + 4 * v18) = v20 + 1;
      if (v20 >= 0)
        v21 = v20;
      else
        v21 = -v20;
      v22 = v21 >> v19;
      if (v22)
        v23 = 1;
      else
        v23 = v19 == 0;
      if (v23)
        v24 = v22 > 1;
      else
        v24 = -1;
      v19 += v24;
      ++v18;
    }
    while (v18 < *(int *)(a1 + 32));
  }
  LOWORD(v175[0]) = 0x8000;
  if (*(int *)(a1 + 28) >= 1)
  {
    v25 = 0;
    v26 = 6;
    do
    {
      v27 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)(a1 + 128), v26, v175);
      *(_DWORD *)(a5 + 4 * v25) = v27 + 1;
      if (v27 >= 0)
        v28 = v27;
      else
        v28 = -v27;
      v29 = v28 >> v26;
      if (v29)
        v30 = 1;
      else
        v30 = v26 == 0;
      if (v30)
        v31 = v29 > 1;
      else
        v31 = -1;
      v26 += v31;
      ++v25;
    }
    while (v25 < *(int *)(a1 + 28));
  }
  switch(*(_BYTE *)(a1 + 41))
  {
    case 0:
      v182[0] = 0;
      v180 = 0u;
      *(_OWORD *)__p = 0u;
      *(_OWORD *)v178 = 0u;
      *(_OWORD *)v179 = 0u;
      *(_OWORD *)v176 = 0u;
      v177 = 0u;
      *(_OWORD *)v175 = 0u;
      gcl::polyline::ACContext::init((std::vector<int> *)v175, 3);
      if (*(int *)(a1 + 24) >= 1)
      {
        v32 = 0;
        do
        {
          gcl::polyline::DecoderImpl::decodeResidual((uint64_t)&v190, a1, *(_BYTE *)(a1 + 40), (uint64_t *)v175);
          *a4 = v190;
          a4[1].i32[0] = v191;
          ++v32;
          a4 = (int32x2_t *)((char *)a4 + 12);
        }
        while (v32 < *(int *)(a1 + 24));
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v179[1])
      {
        *(void **)&v180 = v179[1];
        operator delete(v179[1]);
      }
      if (v178[0])
      {
        v178[1] = v178[0];
        operator delete(v178[0]);
      }
      if (v176[1])
      {
        *(void **)&v177 = v176[1];
        operator delete(v176[1]);
      }
      if (v175[0])
      {
        v175[1] = v175[0];
        operator delete(v175[0]);
      }
      return 0;
    case 1:
      *(_OWORD *)v188 = 0u;
      v189 = 0u;
      v186 = 0u;
      *(_OWORD *)v187 = 0u;
      *(_OWORD *)v184 = 0u;
      *(_OWORD *)v185 = 0u;
      *(_OWORD *)v182 = 0u;
      v183 = 0u;
      v180 = 0u;
      *(_OWORD *)__p = 0u;
      *(_OWORD *)v178 = 0u;
      *(_OWORD *)v179 = 0u;
      *(_OWORD *)v176 = 0u;
      v177 = 0u;
      *(_OWORD *)v175 = 0u;
      gcl::polyline::ACContext::init((std::vector<int> *)v175, 3);
      gcl::polyline::ACContext::init((std::vector<int> *)&v182[1], 3);
      if (*(int *)(a1 + 24) <= 0)
        goto LABEL_229;
      v160 = 0;
      v161 = 0;
      v162 = 0;
      v163 = 0;
      v164 = 0uLL;
      v165 = a4 + 1;
      while (1)
      {
        v172 = v164;
        gcl::polyline::DecoderImpl::decodeResidual((uint64_t)&v190, a1, *(_BYTE *)(a1 + 40), (uint64_t *)&v175[15 * (v162 == 0)]);
        v163 += v191;
        *((_QWORD *)&v166 + 1) = *((_QWORD *)&v172 + 1);
        *(int32x2_t *)&v166 = vadd_s32(v190, *(int32x2_t *)&v172);
        v164 = v166;
        v165[-1] = (int32x2_t)v166;
        v165->i32[0] = v163;
        if ((signed int)v161 >= *(_DWORD *)(a1 + 28))
          goto LABEL_218;
        v167 = v162 + 1;
        v168 = *(_DWORD *)(a5 + 4 * v161);
        if (v162 + 1 == v168)
          v162 = 0;
        else
          ++v162;
        if (v167 == v168)
          ++v161;
        ++v160;
        v165 = (int32x2_t *)((char *)v165 + 12);
        if (v160 >= *(int *)(a1 + 24))
          goto LABEL_229;
      }
    case 2:
      *(_OWORD *)v188 = 0u;
      v189 = 0u;
      v186 = 0u;
      *(_OWORD *)v187 = 0u;
      *(_OWORD *)v184 = 0u;
      *(_OWORD *)v185 = 0u;
      *(_OWORD *)v182 = 0u;
      v183 = 0u;
      v180 = 0u;
      *(_OWORD *)__p = 0u;
      *(_OWORD *)v178 = 0u;
      *(_OWORD *)v179 = 0u;
      *(_OWORD *)v176 = 0u;
      v177 = 0u;
      *(_OWORD *)v175 = 0u;
      gcl::polyline::ACContext::init((std::vector<int> *)v175, 3);
      gcl::polyline::ACContext::init((std::vector<int> *)&v182[1], 3);
      memset_pattern16(&__b, &unk_189CFAE50, 4uLL);
      if (*(int *)(a1 + 24) <= 0)
        goto LABEL_229;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = __b.u16[0];
      while (1)
      {
        if (v34)
        {
          if (v34 == 1 || !v36)
          {
            gcl::polyline::DecoderImpl::decodeResidual((uint64_t)&v190, a1, *(_BYTE *)(a1 + 40), (uint64_t *)&v175[15 * (v36 == 0)]);
          }
          else
          {
            v41 = *(_DWORD *)(a1 + 156);
            v40 = *(_DWORD *)(a1 + 160);
            if (v41 < 0x40000001)
            {
              v42 = *(_DWORD *)(a1 + 168);
              while (2)
              {
                v40 *= 2;
                *(_DWORD *)(a1 + 168) = --v42;
                if (v42)
                  goto LABEL_74;
                v45 = *(_QWORD *)(a1 + 144);
                *(_QWORD *)(a1 + 144) = v45 + 1;
                v46 = *(unsigned int *)(a1 + 128);
                if (v45 + 1 >= v46)
                {
                  v47 = 65280;
                  v48 = v45 + 2;
                  *(_QWORD *)(a1 + 144) = v48;
                  if (v48 >= v46)
                    goto LABEL_80;
                }
                else
                {
                  v47 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v45 + 1) << 8;
                  v48 = v45 + 2;
                  *(_QWORD *)(a1 + 144) = v48;
                  if (v48 >= v46)
                  {
LABEL_80:
                    v43 = 255;
LABEL_73:
                    v40 |= v47 | v43;
                    v42 = 16;
                    *(_DWORD *)(a1 + 168) = 16;
LABEL_74:
                    v44 = 2 * v41;
                    v53 = v41 >= 0x20000001;
                    v41 *= 2;
                    if (v53)
                      goto LABEL_84;
                    continue;
                  }
                }
                break;
              }
              v43 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v48);
              goto LABEL_73;
            }
            v44 = *(_DWORD *)(a1 + 156);
LABEL_84:
            v49 = (HIWORD(v44) * (unsigned __int16)v37) & 0xFFFF0000;
            v50 = v44 - v49;
            if (v40 < v49)
              v51 = 0;
            else
              v51 = (HIWORD(v44) * (unsigned __int16)v37) & 0xFFFF0000;
            v52 = v40 - v51;
            v53 = v40 >= v49;
            v37 += *(unsigned __int16 *)(a1 + 2 * ((v37 >> 7) & 0x1FE | (v40 >= v49)) + 176);
            if (v40 < v49)
              v54 = v49;
            else
              v54 = v50;
            *(_DWORD *)(a1 + 156) = v54;
            *(_DWORD *)(a1 + 160) = v52;
            if (v53)
            {
              gcl::polyline::DecoderImpl::decodeResidual((uint64_t)&v190, a1, *(_BYTE *)(a1 + 40), (uint64_t *)v175);
              v55 = (int32x2_t *)((char *)a4 + 12 * v34);
              v56 = v191 - v55[-2].i32[0] + 2 * v55[-1].i32[1];
              *v55 = vadd_s32(vsub_s32(vadd_s32(*(int32x2_t *)((char *)v55 - 12), *(int32x2_t *)((char *)v55 - 12)), v55[-3]), v190);
              v55[1].i32[0] = v56;
              if (v35 >= *(_DWORD *)(a1 + 28))
                goto LABEL_218;
              goto LABEL_93;
            }
            gcl::polyline::DecoderImpl::decodeResidual((uint64_t)&v190, a1, *(_BYTE *)(a1 + 40), (uint64_t *)v175);
          }
          v38 = (int32x2_t *)((char *)a4 + 12 * v34);
          v39 = v191 + v38[-1].i32[1];
          *v38 = vadd_s32(v190, *(int32x2_t *)((char *)v38 - 12));
          v38[1].i32[0] = v39;
          if (v35 >= *(_DWORD *)(a1 + 28))
            goto LABEL_218;
        }
        else
        {
          gcl::polyline::DecoderImpl::decodeResidual((uint64_t)&v190, a1, *(_BYTE *)(a1 + 40), (uint64_t *)&v175[15 * (v36 == 0)]);
          *a4 = v190;
          a4[1].i32[0] = v191;
          if (v35 >= *(_DWORD *)(a1 + 28))
            goto LABEL_218;
        }
LABEL_93:
        v57 = v36 + 1;
        v58 = *(_DWORD *)(a5 + 4 * v35);
        if (v36 + 1 == v58)
          v36 = 0;
        else
          ++v36;
        if (v57 == v58)
          ++v35;
        if (++v34 >= *(int *)(a1 + 24))
          goto LABEL_229;
      }
    case 3:
      memset_pattern16(&v190, &unk_189CFAE50, 0x3EuLL);
      *(_OWORD *)v188 = 0u;
      v189 = 0u;
      v186 = 0u;
      *(_OWORD *)v187 = 0u;
      *(_OWORD *)v184 = 0u;
      *(_OWORD *)v185 = 0u;
      *(_OWORD *)v182 = 0u;
      v183 = 0u;
      v180 = 0u;
      *(_OWORD *)__p = 0u;
      *(_OWORD *)v178 = 0u;
      *(_OWORD *)v179 = 0u;
      *(_OWORD *)v176 = 0u;
      v177 = 0u;
      *(_OWORD *)v175 = 0u;
      gcl::polyline::ACContext::init((std::vector<int> *)v175, 3);
      gcl::polyline::ACContext::init((std::vector<int> *)&v182[1], 3);
      if (*(int *)(a1 + 24) <= 0)
        goto LABEL_229;
      v59 = 0;
      v60 = 0;
      v61 = 0;
      v171 = v190.u16[0];
      break;
    default:
      return 3;
  }
  do
  {
    if (v59)
    {
      if (v59 == 1
        || !v61
        || (v64 = (char *)a4 + 12 * v59,
            v66 = *((_DWORD *)v64 - 6),
            v65 = v64 - 24,
            v67 = v65 + 12,
            *((_DWORD *)v65 + 3) == v66)
        && *((_DWORD *)v65 + 4) == *((_DWORD *)v65 + 1)
        && *((_DWORD *)v65 + 5) == *((_DWORD *)v65 + 2))
      {
        gcl::polyline::DecoderImpl::decodeResidual((uint64_t)&__b, a1, *(_BYTE *)(a1 + 40), (uint64_t *)&v175[15 * (v61 == 0)]);
        v68 = (int32x2_t *)((char *)a4 + 12 * v59);
        v69 = v174 + v68[-1].i32[1];
        *v68 = vadd_s32(__b, *(int32x2_t *)((char *)v68 - 12));
        v68[1].i32[0] = v69;
        if (v60 >= *(_DWORD *)(a1 + 28))
          goto LABEL_218;
        goto LABEL_102;
      }
      v71 = *(_DWORD *)(a1 + 156);
      v70 = *(_DWORD *)(a1 + 160);
      if (v71 < 0x40000001)
      {
        v72 = *(_DWORD *)(a1 + 168);
        while (2)
        {
          v70 *= 2;
          *(_DWORD *)(a1 + 168) = --v72;
          if (v72)
            goto LABEL_122;
          v75 = *(_QWORD *)(a1 + 144);
          *(_QWORD *)(a1 + 144) = v75 + 1;
          v76 = *(unsigned int *)(a1 + 128);
          if (v75 + 1 >= v76)
          {
            v77 = 65280;
            v78 = v75 + 2;
            *(_QWORD *)(a1 + 144) = v78;
            if (v78 >= v76)
              goto LABEL_128;
          }
          else
          {
            v77 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v75 + 1) << 8;
            v78 = v75 + 2;
            *(_QWORD *)(a1 + 144) = v78;
            if (v78 >= v76)
            {
LABEL_128:
              v73 = 255;
LABEL_121:
              v70 |= v77 | v73;
              v72 = 16;
              *(_DWORD *)(a1 + 168) = 16;
LABEL_122:
              v74 = 2 * v71;
              v53 = v71 >= 0x20000001;
              v71 *= 2;
              if (v53)
                goto LABEL_130;
              continue;
            }
          }
          break;
        }
        v73 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v78);
        goto LABEL_121;
      }
      v74 = *(_DWORD *)(a1 + 156);
LABEL_130:
      v79 = (HIWORD(v74) * (unsigned __int16)v171) & 0xFFFF0000;
      v80 = v74 - v79;
      v81 = v70 >= v79;
      v82 = *(unsigned __int16 *)(a1 + 2 * ((v171 >> 7) & 0x1FE | v81) + 176);
      if (v70 < v79)
        v83 = v79;
      else
        v83 = v80;
      if (v70 < v79)
        v84 = 0;
      else
        v84 = v79;
      v85 = v70 - v84;
      *(_DWORD *)(a1 + 156) = v83;
      *(_DWORD *)(a1 + 160) = v85;
      if (v83 < 0x40000001)
      {
        v86 = *(_DWORD *)(a1 + 168);
        while (2)
        {
          v85 *= 2;
          *(_DWORD *)(a1 + 168) = --v86;
          if (v86)
            goto LABEL_140;
          v89 = *(_QWORD *)(a1 + 144);
          *(_QWORD *)(a1 + 144) = v89 + 1;
          v90 = *(unsigned int *)(a1 + 128);
          if (v89 + 1 >= v90)
          {
            v91 = 65280;
            v92 = v89 + 2;
            *(_QWORD *)(a1 + 144) = v92;
            if (v92 >= v90)
              goto LABEL_146;
          }
          else
          {
            v91 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v89 + 1) << 8;
            v92 = v89 + 2;
            *(_QWORD *)(a1 + 144) = v92;
            if (v92 >= v90)
            {
LABEL_146:
              v87 = 255;
LABEL_139:
              v85 |= v91 | v87;
              v86 = 16;
              *(_DWORD *)(a1 + 168) = 16;
LABEL_140:
              v88 = 2 * v83;
              v53 = v83 >= 0x20000001;
              v83 *= 2;
              if (v53)
                goto LABEL_148;
              continue;
            }
          }
          break;
        }
        v87 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v92);
        goto LABEL_139;
      }
      v88 = v83;
LABEL_148:
      v93 = 16 * v81;
      v94 = (v81 & 0xFFFFFFFu) + 1;
      v95 = v190.u16[v94];
      v96 = (HIWORD(v88) * v95) & 0xFFFF0000;
      v97 = v85 >= v96;
      v190.i16[v94] = *(_WORD *)(a1 + 2 * ((v95 >> 7) & 0x1FE | v97) + 176) + v95;
      if (v85 < v96)
        v98 = (HIWORD(v88) * v95) & 0xFFFF0000;
      else
        v98 = v88 - v96;
      if (v85 < v96)
        v99 = 0;
      else
        v99 = v96;
      v100 = v85 - v99;
      *(_DWORD *)(a1 + 156) = v98;
      *(_DWORD *)(a1 + 160) = v100;
      v101 = v93 | (8 * v97);
      v102 = (v101 >> 3) + 3;
      v103 = v190.u16[v102];
      if (v98 < 0x40000001)
      {
        v104 = *(_DWORD *)(a1 + 168);
        while (2)
        {
          v100 *= 2;
          *(_DWORD *)(a1 + 168) = --v104;
          if (v104)
            goto LABEL_158;
          v107 = *(_QWORD *)(a1 + 144);
          *(_QWORD *)(a1 + 144) = v107 + 1;
          v108 = *(unsigned int *)(a1 + 128);
          if (v107 + 1 >= v108)
          {
            v109 = 65280;
            v110 = v107 + 2;
            *(_QWORD *)(a1 + 144) = v110;
            if (v110 >= v108)
              goto LABEL_164;
          }
          else
          {
            v109 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v107 + 1) << 8;
            v110 = v107 + 2;
            *(_QWORD *)(a1 + 144) = v110;
            if (v110 >= v108)
            {
LABEL_164:
              v105 = 255;
LABEL_157:
              v100 |= v109 | v105;
              v104 = 16;
              *(_DWORD *)(a1 + 168) = 16;
LABEL_158:
              v106 = 2 * v98;
              v53 = v98 >= 0x20000001;
              v98 *= 2;
              if (v53)
                goto LABEL_166;
              continue;
            }
          }
          break;
        }
        v105 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v110);
        goto LABEL_157;
      }
      v106 = v98;
LABEL_166:
      v111 = (HIWORD(v106) * v103) & 0xFFFF0000;
      v112 = v100 >= v111;
      v190.i16[v102] = *(_WORD *)(a1 + 2 * ((v103 >> 7) & 0x1FE | v112) + 176) + v103;
      if (v100 < v111)
        v113 = (HIWORD(v106) * v103) & 0xFFFF0000;
      else
        v113 = v106 - v111;
      if (v100 < v111)
        v114 = 0;
      else
        v114 = (HIWORD(v106) * v103) & 0xFFFF0000;
      v115 = v100 - v114;
      *(_DWORD *)(a1 + 156) = v113;
      *(_DWORD *)(a1 + 160) = v115;
      v116 = v101 | (4 * v112);
      v117 = (v116 >> 2) + 7;
      v118 = v190.u16[v117];
      if (v113 < 0x40000001)
      {
        v119 = *(_DWORD *)(a1 + 168);
        while (2)
        {
          v115 *= 2;
          *(_DWORD *)(a1 + 168) = --v119;
          if (v119)
            goto LABEL_176;
          v122 = *(_QWORD *)(a1 + 144);
          *(_QWORD *)(a1 + 144) = v122 + 1;
          v123 = *(unsigned int *)(a1 + 128);
          if (v122 + 1 >= v123)
          {
            v124 = 65280;
            v125 = v122 + 2;
            *(_QWORD *)(a1 + 144) = v125;
            if (v125 >= v123)
              goto LABEL_182;
          }
          else
          {
            v124 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v122 + 1) << 8;
            v125 = v122 + 2;
            *(_QWORD *)(a1 + 144) = v125;
            if (v125 >= v123)
            {
LABEL_182:
              v120 = 255;
LABEL_175:
              v115 |= v124 | v120;
              v119 = 16;
              *(_DWORD *)(a1 + 168) = 16;
LABEL_176:
              v121 = 2 * v113;
              v53 = v113 >= 0x20000001;
              v113 *= 2;
              if (v53)
                goto LABEL_184;
              continue;
            }
          }
          break;
        }
        v120 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v125);
        goto LABEL_175;
      }
      v121 = v113;
LABEL_184:
      v126 = (HIWORD(v121) * v118) & 0xFFFF0000;
      v127 = v115 >= v126;
      v190.i16[v117] = *(_WORD *)(a1 + 2 * ((v118 >> 7) & 0x1FE | v127) + 176) + v118;
      if (v115 < v126)
        v128 = (HIWORD(v121) * v118) & 0xFFFF0000;
      else
        v128 = v121 - v126;
      if (v115 < v126)
        v129 = 0;
      else
        v129 = (HIWORD(v121) * v118) & 0xFFFF0000;
      v130 = v115 - v129;
      *(_DWORD *)(a1 + 156) = v128;
      *(_DWORD *)(a1 + 160) = v130;
      v131 = v116 | (2 * v127);
      v132 = (v131 >> 1) + 15;
      v133 = v190.u16[v132];
      v170 = v65;
      if (v128 < 0x40000001)
      {
        v134 = *(_DWORD *)(a1 + 168);
        while (2)
        {
          v130 *= 2;
          *(_DWORD *)(a1 + 168) = --v134;
          if (v134)
            goto LABEL_194;
          v137 = *(_QWORD *)(a1 + 144);
          *(_QWORD *)(a1 + 144) = v137 + 1;
          v138 = *(unsigned int *)(a1 + 128);
          if (v137 + 1 >= v138)
          {
            v139 = 65280;
            v140 = v137 + 2;
            *(_QWORD *)(a1 + 144) = v140;
            if (v140 >= v138)
              goto LABEL_200;
          }
          else
          {
            v139 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v137 + 1) << 8;
            v140 = v137 + 2;
            *(_QWORD *)(a1 + 144) = v140;
            if (v140 >= v138)
            {
LABEL_200:
              v135 = 255;
LABEL_193:
              v130 |= v139 | v135;
              v134 = 16;
              *(_DWORD *)(a1 + 168) = 16;
LABEL_194:
              v136 = 2 * v128;
              v53 = v128 >= 0x20000001;
              v128 *= 2;
              if (v53)
                goto LABEL_202;
              continue;
            }
          }
          break;
        }
        v135 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v140);
        goto LABEL_193;
      }
      v136 = v128;
LABEL_202:
      v141 = (HIWORD(v136) * v133) & 0xFFFF0000;
      v142 = v136 - v141;
      v143 = v130 >= v141;
      v190.i16[v132] = *(_WORD *)(a1 + 2 * ((v133 >> 7) & 0x1FE | v143) + 176) + v133;
      if (v130 < v141)
        v144 = v141;
      else
        v144 = v142;
      if (v130 < v141)
        v145 = 0;
      else
        v145 = v141;
      *(_DWORD *)(a1 + 156) = v144;
      *(_DWORD *)(a1 + 160) = v130 - v145;
      v146 = gcl::polyline::Scales[v131 | v143];
      gcl::polyline::DecoderImpl::decodeResidual((uint64_t)&__b, a1, *(_BYTE *)(a1 + 40), (uint64_t *)v175);
      v171 += v82;
      v147 = v67[1];
      v148 = v67[2];
      v149 = (*v67 - *(_DWORD *)v170) * v146;
      if (v149 >= 0)
        v150 = (unint64_t)(v149 + 4) >> 3;
      else
        v150 = -(uint64_t)((unint64_t)(4 - v149) >> 3);
      v151 = (v147 - *((_DWORD *)v170 + 1)) * v146;
      if (v151 >= 0)
        v152 = (unint64_t)(v151 + 4) >> 3;
      else
        v152 = -(uint64_t)((unint64_t)(4 - v151) >> 3);
      v153 = (v148 - *((_DWORD *)v170 + 2)) * v146;
      if (v153 >= 0)
        v154 = (unint64_t)(v153 + 4) >> 3;
      else
        v154 = -(uint64_t)((unint64_t)(4 - v153) >> 3);
      v155 = *v67 + v150 + __b.i32[0];
      v156 = v147 + v152 + __b.i32[1];
      v157 = v148 + v174 + v154;
      v158 = (_DWORD *)a4 + 3 * v59;
      *v158 = v155;
      v158[1] = v156;
      v158[2] = v157;
      if (v60 >= *(_DWORD *)(a1 + 28))
      {
LABEL_218:
        v33 = 3;
        v159 = v188[1];
        if (!v188[1])
          goto LABEL_231;
        goto LABEL_230;
      }
    }
    else
    {
      gcl::polyline::DecoderImpl::decodeResidual((uint64_t)&__b, a1, *(_BYTE *)(a1 + 40), (uint64_t *)&v175[15 * (v61 == 0)]);
      *a4 = __b;
      a4[1].i32[0] = v174;
      if (v60 >= *(_DWORD *)(a1 + 28))
        goto LABEL_218;
    }
LABEL_102:
    v62 = v61 + 1;
    v63 = *(_DWORD *)(a5 + 4 * v60);
    if (v61 + 1 == v63)
      v61 = 0;
    else
      ++v61;
    if (v62 == v63)
      ++v60;
    ++v59;
  }
  while (v59 < *(int *)(a1 + 24));
LABEL_229:
  v33 = 0;
  v159 = v188[1];
  if (v188[1])
  {
LABEL_230:
    *(_QWORD *)&v189 = v159;
    operator delete(v159);
  }
LABEL_231:
  if (v187[0])
  {
    v187[1] = v187[0];
    operator delete(v187[0]);
  }
  if (v185[1])
  {
    *(void **)&v186 = v185[1];
    operator delete(v185[1]);
  }
  if (v184[0])
  {
    v184[1] = v184[0];
    operator delete(v184[0]);
  }
  if (v182[1])
  {
    *(void **)&v183 = v182[1];
    operator delete(v182[1]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v179[1])
  {
    *(void **)&v180 = v179[1];
    operator delete(v179[1]);
  }
  if (v178[0])
  {
    v178[1] = v178[0];
    operator delete(v178[0]);
  }
  if (v176[1])
  {
    *(void **)&v177 = v176[1];
    operator delete(v176[1]);
  }
  if (v175[0])
  {
    v175[1] = v175[0];
    operator delete(v175[0]);
  }
  return v33;
}

void sub_189AD3F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  gcl::polyline::ACContext::~ACContext((gcl::polyline::ACContext *)va);
  _Unwind_Resume(a1);
}

void sub_189AD3F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  gcl::polyline::ACContext::~ACContext((gcl::polyline::ACContext *)&a30);
  gcl::polyline::ACContext::~ACContext((gcl::polyline::ACContext *)&a15);
  _Unwind_Resume(a1);
}

void sub_189AD3FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  gcl::polyline::ACContext::~ACContext((gcl::polyline::ACContext *)va);
  _Unwind_Resume(a1);
}

uint64_t gcl::polyline::DecoderImpl::decodeResidual(uint64_t result, uint64_t a2, char a3, uint64_t *a4)
{
  _DWORD *v5;
  unsigned int *v7;
  int *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  _BOOL4 v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  _WORD *v62;
  unsigned int v63;
  int v64;
  int v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  unint64_t v70;
  unsigned int v71;
  unsigned int v72;
  _BOOL4 v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  int v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  unint64_t v84;
  int v85;
  unsigned int v86;
  _BOOL4 v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  int v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  unint64_t v99;
  unsigned int v100;
  _BOOL4 v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int v107;
  int v108;
  int v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  int v113;
  unint64_t v114;
  unsigned int v115;
  _BOOL4 v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int v122;
  int v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  int v128;
  unint64_t v129;
  unsigned int v130;
  _BOOL4 v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  int v138;
  int v139;
  unsigned int v140;
  uint64_t v141;
  unint64_t v142;
  int v143;
  unint64_t v144;
  unsigned int v145;
  unsigned int v146;
  _BOOL4 v147;
  unsigned int v148;
  unsigned int v149;
  int v150;
  uint64_t v151;
  int v152;
  int v153;
  uint64_t v154;
  int v155;
  unsigned int v156;
  int v157;
  unsigned int v158;
  BOOL v159;
  int v160;
  uint64_t v161;
  unsigned int v162;
  int v163;
  unsigned int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  unsigned int v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  int v173;
  int v174;
  int v175;
  uint64_t v176;
  unint64_t v177;
  int v178;
  unint64_t v179;
  int v180;
  int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  int v186;
  int v187;
  int v188;
  uint64_t v189;
  unint64_t v190;
  int v191;
  unint64_t v192;
  unsigned int *v193;

  v5 = (_DWORD *)result;
  if (!a3)
  {
    v14 = *(_DWORD *)a2;
    if (*(int *)a2 > 0)
    {
      v15 = 0;
      v16 = 0;
      v18 = *(_DWORD *)(a2 + 156);
      v17 = *(_DWORD *)(a2 + 160);
      while (v18 >= 0x40000001)
      {
        v19 = v18;
LABEL_15:
        v20 = (v19 >> 1) & 0x7FFF0000;
        v18 = v19 - v20;
        v21 = v17 >= v20;
        if (v17 < v20)
        {
          v18 = v20;
          v20 = 0;
        }
        v17 -= v20;
        *(_DWORD *)(a2 + 156) = v18;
        *(_DWORD *)(a2 + 160) = v17;
        v16 += v21 << v15++;
        if (v15 == v14)
          goto LABEL_206;
      }
      v22 = *(_DWORD *)(a2 + 168);
      while (1)
      {
        v17 *= 2;
        *(_DWORD *)(a2 + 168) = --v22;
        if (v22)
          goto LABEL_22;
        v24 = *(_QWORD *)(a2 + 144);
        *(_QWORD *)(a2 + 144) = v24 + 1;
        v25 = *(unsigned int *)(a2 + 128);
        if (v24 + 1 >= v25)
        {
          v26 = 65280;
          v27 = v24 + 2;
          *(_QWORD *)(a2 + 144) = v27;
          if (v27 >= v25)
          {
LABEL_28:
            v23 = 255;
            goto LABEL_21;
          }
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v24 + 1) << 8;
          v27 = v24 + 2;
          *(_QWORD *)(a2 + 144) = v27;
          if (v27 >= v25)
            goto LABEL_28;
        }
        v23 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v27);
LABEL_21:
        v17 |= v26 | v23;
        v22 = 16;
        *(_DWORD *)(a2 + 168) = 16;
LABEL_22:
        v19 = 2 * v18;
        v45 = v18 >= 0x20000001;
        v18 *= 2;
        if (v45)
          goto LABEL_15;
      }
    }
    v16 = 0;
LABEL_206:
    *(_DWORD *)result = v16;
    v166 = *(_DWORD *)(a2 + 4);
    if (v166 >= 1)
    {
      v167 = 0;
      v168 = 0;
      v170 = *(_DWORD *)(a2 + 156);
      v169 = *(_DWORD *)(a2 + 160);
      while (v170 >= 0x40000001)
      {
        v171 = v170;
LABEL_209:
        v172 = (v171 >> 1) & 0x7FFF0000;
        v170 = v171 - v172;
        v173 = v169 >= v172;
        if (v169 < v172)
        {
          v170 = v172;
          v172 = 0;
        }
        v169 -= v172;
        *(_DWORD *)(a2 + 156) = v170;
        *(_DWORD *)(a2 + 160) = v169;
        v168 += v173 << v167++;
        if (v167 == v166)
          goto LABEL_224;
      }
      v174 = *(_DWORD *)(a2 + 168);
      while (1)
      {
        v169 *= 2;
        *(_DWORD *)(a2 + 168) = --v174;
        if (v174)
          goto LABEL_216;
        v176 = *(_QWORD *)(a2 + 144);
        *(_QWORD *)(a2 + 144) = v176 + 1;
        v177 = *(unsigned int *)(a2 + 128);
        if (v176 + 1 >= v177)
        {
          v178 = 65280;
          v179 = v176 + 2;
          *(_QWORD *)(a2 + 144) = v179;
          if (v179 >= v177)
          {
LABEL_222:
            v175 = 255;
            goto LABEL_215;
          }
        }
        else
        {
          v178 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v176 + 1) << 8;
          v179 = v176 + 2;
          *(_QWORD *)(a2 + 144) = v179;
          if (v179 >= v177)
            goto LABEL_222;
        }
        v175 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v179);
LABEL_215:
        v169 |= v178 | v175;
        v174 = 16;
        *(_DWORD *)(a2 + 168) = 16;
LABEL_216:
        v171 = 2 * v170;
        v45 = v170 >= 0x20000001;
        v170 *= 2;
        if (v45)
          goto LABEL_209;
      }
    }
    v168 = 0;
LABEL_224:
    *(_DWORD *)(result + 4) = v168;
    v180 = *(_DWORD *)(a2 + 8);
    if (v180 < 1)
    {
      result = 0;
      goto LABEL_242;
    }
    v181 = 0;
    LODWORD(result) = 0;
    v183 = *(_DWORD *)(a2 + 156);
    v182 = *(_DWORD *)(a2 + 160);
    while (v183 >= 0x40000001)
    {
      v184 = v183;
LABEL_227:
      v185 = (v184 >> 1) & 0x7FFF0000;
      v183 = v184 - v185;
      v186 = v182 >= v185;
      if (v182 < v185)
      {
        v183 = v185;
        v185 = 0;
      }
      v182 -= v185;
      *(_DWORD *)(a2 + 156) = v183;
      *(_DWORD *)(a2 + 160) = v182;
      result = ((v186 << v181++) + result);
      if (v181 == v180)
        goto LABEL_242;
    }
    v187 = *(_DWORD *)(a2 + 168);
    while (1)
    {
      v182 *= 2;
      *(_DWORD *)(a2 + 168) = --v187;
      if (v187)
        goto LABEL_234;
      v189 = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a2 + 144) = v189 + 1;
      v190 = *(unsigned int *)(a2 + 128);
      if (v189 + 1 >= v190)
      {
        v191 = 65280;
        v192 = v189 + 2;
        *(_QWORD *)(a2 + 144) = v192;
        if (v192 >= v190)
        {
LABEL_240:
          v188 = 255;
          goto LABEL_233;
        }
      }
      else
      {
        v191 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v189 + 1) << 8;
        v192 = v189 + 2;
        *(_QWORD *)(a2 + 144) = v192;
        if (v192 >= v190)
          goto LABEL_240;
      }
      v188 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v192);
LABEL_233:
      v182 |= v191 | v188;
      v187 = 16;
      *(_DWORD *)(a2 + 168) = 16;
LABEL_234:
      v184 = 2 * v183;
      v45 = v183 >= 0x20000001;
      v183 *= 2;
      if (v45)
        goto LABEL_227;
    }
  }
  if (a3 != 2)
  {
    v28 = 0;
    v193 = (unsigned int *)(a2 + 128);
    while (1)
    {
      v31 = *a4;
      v32 = *(unsigned __int16 *)(*a4 + 2 * v28);
      v34 = *(_DWORD *)(a2 + 156);
      v33 = *(_DWORD *)(a2 + 160);
      if (v34 < 0x40000001)
      {
        v35 = *(_DWORD *)(a2 + 168);
        while (1)
        {
          v33 *= 2;
          *(_DWORD *)(a2 + 168) = --v35;
          if (v35)
            goto LABEL_40;
          v38 = *(_QWORD *)(a2 + 144);
          *(_QWORD *)(a2 + 144) = v38 + 1;
          v39 = *(unsigned int *)(a2 + 128);
          if (v38 + 1 >= v39)
          {
            v40 = 65280;
            v41 = v38 + 2;
            *(_QWORD *)(a2 + 144) = v41;
            if (v41 >= v39)
            {
LABEL_46:
              v36 = 255;
              goto LABEL_39;
            }
          }
          else
          {
            v40 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v38 + 1) << 8;
            v41 = v38 + 2;
            *(_QWORD *)(a2 + 144) = v41;
            if (v41 >= v39)
              goto LABEL_46;
          }
          v36 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v41);
LABEL_39:
          v33 |= v40 | v36;
          v35 = 16;
          *(_DWORD *)(a2 + 168) = 16;
LABEL_40:
          v37 = 2 * v34;
          v45 = v34 >= 0x20000001;
          v34 *= 2;
          if (v45)
            goto LABEL_48;
        }
      }
      v37 = *(_DWORD *)(a2 + 156);
LABEL_48:
      v30 = 0;
      v42 = (HIWORD(v37) * v32) & 0xFFFF0000;
      v43 = v33 < v42 ? 0 : (HIWORD(v37) * v32) & 0xFFFF0000;
      v44 = v33 - v43;
      v45 = v33 >= v42;
      v46 = v33 >= v42;
      v47 = v37 - v42;
      *(_WORD *)(v31 + 2 * v28) = *(_WORD *)(a2 + 2 * ((v32 >> 7) & 0x1FE | v46) + 176) + v32;
      v48 = v45 ? v37 - v42 : (HIWORD(v37) * v32) & 0xFFFF0000;
      *(_DWORD *)(a2 + 156) = v48;
      *(_DWORD *)(a2 + 160) = v44;
      if (v45)
        break;
LABEL_35:
      v5[v28++] = v30;
      if (v28 == 3)
        return result;
    }
    v49 = a4[3];
    v50 = *(unsigned __int16 *)(v49 + 2 * v28);
    if (v47 < 0x40000001)
    {
      v51 = *(_DWORD *)(a2 + 168);
      while (1)
      {
        v44 *= 2;
        *(_DWORD *)(a2 + 168) = --v51;
        if (v51)
          goto LABEL_60;
        v54 = *(_QWORD *)(a2 + 144);
        *(_QWORD *)(a2 + 144) = v54 + 1;
        v55 = *(unsigned int *)(a2 + 128);
        if (v54 + 1 >= v55)
        {
          v56 = 65280;
          v57 = v54 + 2;
          *(_QWORD *)(a2 + 144) = v57;
          if (v57 >= v55)
          {
LABEL_66:
            v52 = 255;
            goto LABEL_59;
          }
        }
        else
        {
          v56 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v54 + 1) << 8;
          v57 = v54 + 2;
          *(_QWORD *)(a2 + 144) = v57;
          if (v57 >= v55)
            goto LABEL_66;
        }
        v52 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v57);
LABEL_59:
        v44 |= v56 | v52;
        v51 = 16;
        *(_DWORD *)(a2 + 168) = 16;
LABEL_60:
        v53 = 2 * v47;
        v45 = v47 >= 0x20000001;
        v47 *= 2;
        if (v45)
          goto LABEL_68;
      }
    }
    v53 = v37 - v42;
LABEL_68:
    v58 = (HIWORD(v53) * v50) & 0xFFFF0000;
    *(_WORD *)(v49 + 2 * v28) = *(_WORD *)(a2 + 2 * ((v50 >> 7) & 0x1FE | (v44 >= v58)) + 176) + v50;
    if (v44 < v58)
      v59 = (HIWORD(v53) * v50) & 0xFFFF0000;
    else
      v59 = v53 - v58;
    if (v44 < v58)
      v60 = 0;
    else
      v60 = (HIWORD(v53) * v50) & 0xFFFF0000;
    v61 = v44 - v60;
    *(_DWORD *)(a2 + 156) = v59;
    *(_DWORD *)(a2 + 160) = v44 - v60;
    v62 = (_WORD *)(a4[6] + (v28 << 7));
    v63 = (unsigned __int16)*v62;
    if (v59 < 0x40000001)
    {
      v64 = *(_DWORD *)(a2 + 168);
      while (1)
      {
        v61 *= 2;
        *(_DWORD *)(a2 + 168) = --v64;
        if (v64)
          goto LABEL_78;
        v67 = *(_QWORD *)(a2 + 144);
        *(_QWORD *)(a2 + 144) = v67 + 1;
        v68 = *(unsigned int *)(a2 + 128);
        if (v67 + 1 >= v68)
        {
          v69 = 65280;
          v70 = v67 + 2;
          *(_QWORD *)(a2 + 144) = v70;
          if (v70 >= v68)
          {
LABEL_84:
            v65 = 255;
            goto LABEL_77;
          }
        }
        else
        {
          v69 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v67 + 1) << 8;
          v70 = v67 + 2;
          *(_QWORD *)(a2 + 144) = v70;
          if (v70 >= v68)
            goto LABEL_84;
        }
        v65 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v70);
LABEL_77:
        v61 |= v69 | v65;
        v64 = 16;
        *(_DWORD *)(a2 + 168) = 16;
LABEL_78:
        v66 = 2 * v59;
        v45 = v59 >= 0x20000001;
        v59 *= 2;
        if (v45)
          goto LABEL_86;
      }
    }
    v66 = v59;
LABEL_86:
    v71 = (HIWORD(v66) * v63) & 0xFFFF0000;
    v72 = v66 - v71;
    v73 = v61 >= v71;
    *v62 = *(_WORD *)(a2 + 2 * ((v63 >> 7) & 0x1FE | v73) + 176) + v63;
    if (v61 >= v71)
    {
      v74 = v71;
    }
    else
    {
      v72 = v71;
      v74 = 0;
    }
    v75 = v61 - v74;
    *(_DWORD *)(a2 + 156) = v72;
    *(_DWORD *)(a2 + 160) = v75;
    v76 = (v73 & 0x7FFFFFFu) + 1;
    v77 = (unsigned __int16)v62[v76];
    if (v72 < 0x40000001)
    {
      v78 = *(_DWORD *)(a2 + 168);
      while (1)
      {
        v75 *= 2;
        *(_DWORD *)(a2 + 168) = --v78;
        if (v78)
          goto LABEL_93;
        v81 = *(_QWORD *)(a2 + 144);
        *(_QWORD *)(a2 + 144) = v81 + 1;
        v82 = *(unsigned int *)(a2 + 128);
        if (v81 + 1 >= v82)
        {
          v83 = 65280;
          v84 = v81 + 2;
          *(_QWORD *)(a2 + 144) = v84;
          if (v84 >= v82)
          {
LABEL_99:
            v79 = 255;
            goto LABEL_92;
          }
        }
        else
        {
          v83 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v81 + 1) << 8;
          v84 = v81 + 2;
          *(_QWORD *)(a2 + 144) = v84;
          if (v84 >= v82)
            goto LABEL_99;
        }
        v79 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v84);
LABEL_92:
        v75 |= v83 | v79;
        v78 = 16;
        *(_DWORD *)(a2 + 168) = 16;
LABEL_93:
        v80 = 2 * v72;
        v45 = v72 >= 0x20000001;
        v72 *= 2;
        if (v45)
          goto LABEL_101;
      }
    }
    v80 = v72;
LABEL_101:
    v85 = 32 * v73;
    v86 = (HIWORD(v80) * v77) & 0xFFFF0000;
    v87 = v75 >= v86;
    v62[v76] = *(_WORD *)(a2 + 2 * ((v77 >> 7) & 0x1FE | v87) + 176) + v77;
    if (v75 < v86)
      v88 = (HIWORD(v80) * v77) & 0xFFFF0000;
    else
      v88 = v80 - v86;
    if (v75 < v86)
      v86 = 0;
    v89 = v75 - v86;
    *(_DWORD *)(a2 + 156) = v88;
    *(_DWORD *)(a2 + 160) = v89;
    v90 = v85 | (16 * v87);
    v91 = (v90 >> 4) + 3;
    v92 = (unsigned __int16)v62[v91];
    if (v88 < 0x40000001)
    {
      v93 = *(_DWORD *)(a2 + 168);
      while (1)
      {
        v89 *= 2;
        *(_DWORD *)(a2 + 168) = --v93;
        if (v93)
          goto LABEL_110;
        v96 = *(_QWORD *)(a2 + 144);
        *(_QWORD *)(a2 + 144) = v96 + 1;
        v97 = *(unsigned int *)(a2 + 128);
        if (v96 + 1 >= v97)
        {
          v98 = 65280;
          v99 = v96 + 2;
          *(_QWORD *)(a2 + 144) = v99;
          if (v99 >= v97)
          {
LABEL_116:
            v94 = 255;
            goto LABEL_109;
          }
        }
        else
        {
          v98 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v96 + 1) << 8;
          v99 = v96 + 2;
          *(_QWORD *)(a2 + 144) = v99;
          if (v99 >= v97)
            goto LABEL_116;
        }
        v94 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v99);
LABEL_109:
        v89 |= v98 | v94;
        v93 = 16;
        *(_DWORD *)(a2 + 168) = 16;
LABEL_110:
        v95 = 2 * v88;
        v45 = v88 >= 0x20000001;
        v88 *= 2;
        if (v45)
          goto LABEL_118;
      }
    }
    v95 = v88;
LABEL_118:
    v100 = (HIWORD(v95) * v92) & 0xFFFF0000;
    v101 = v89 >= v100;
    v62[v91] = *(_WORD *)(a2 + 2 * ((v92 >> 7) & 0x1FE | v101) + 176) + v92;
    if (v89 < v100)
      v102 = (HIWORD(v95) * v92) & 0xFFFF0000;
    else
      v102 = v95 - v100;
    if (v89 < v100)
      v103 = 0;
    else
      v103 = (HIWORD(v95) * v92) & 0xFFFF0000;
    v104 = v89 - v103;
    *(_DWORD *)(a2 + 156) = v102;
    *(_DWORD *)(a2 + 160) = v104;
    v105 = v90 | (8 * v101);
    v106 = (v105 >> 3) + 7;
    v107 = (unsigned __int16)v62[v106];
    if (v102 < 0x40000001)
    {
      v108 = *(_DWORD *)(a2 + 168);
      while (1)
      {
        v104 *= 2;
        *(_DWORD *)(a2 + 168) = --v108;
        if (v108)
          goto LABEL_128;
        v111 = *(_QWORD *)(a2 + 144);
        *(_QWORD *)(a2 + 144) = v111 + 1;
        v112 = *(unsigned int *)(a2 + 128);
        if (v111 + 1 >= v112)
        {
          v113 = 65280;
          v114 = v111 + 2;
          *(_QWORD *)(a2 + 144) = v114;
          if (v114 >= v112)
          {
LABEL_134:
            v109 = 255;
            goto LABEL_127;
          }
        }
        else
        {
          v113 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v111 + 1) << 8;
          v114 = v111 + 2;
          *(_QWORD *)(a2 + 144) = v114;
          if (v114 >= v112)
            goto LABEL_134;
        }
        v109 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v114);
LABEL_127:
        v104 |= v113 | v109;
        v108 = 16;
        *(_DWORD *)(a2 + 168) = 16;
LABEL_128:
        v110 = 2 * v102;
        v45 = v102 >= 0x20000001;
        v102 *= 2;
        if (v45)
          goto LABEL_136;
      }
    }
    v110 = v102;
LABEL_136:
    v115 = (HIWORD(v110) * v107) & 0xFFFF0000;
    v116 = v104 >= v115;
    v62[v106] = *(_WORD *)(a2 + 2 * ((v107 >> 7) & 0x1FE | v116) + 176) + v107;
    if (v104 < v115)
      v117 = (HIWORD(v110) * v107) & 0xFFFF0000;
    else
      v117 = v110 - v115;
    if (v104 < v115)
      v118 = 0;
    else
      v118 = (HIWORD(v110) * v107) & 0xFFFF0000;
    v119 = v104 - v118;
    *(_DWORD *)(a2 + 156) = v117;
    *(_DWORD *)(a2 + 160) = v119;
    v120 = v105 | (4 * v116);
    v121 = (v120 >> 2) + 15;
    v122 = (unsigned __int16)v62[v121];
    if (v117 < 0x40000001)
    {
      v123 = *(_DWORD *)(a2 + 168);
      while (1)
      {
        v119 *= 2;
        *(_DWORD *)(a2 + 168) = --v123;
        if (v123)
          goto LABEL_146;
        v126 = *(_QWORD *)(a2 + 144);
        *(_QWORD *)(a2 + 144) = v126 + 1;
        v127 = *(unsigned int *)(a2 + 128);
        if (v126 + 1 >= v127)
        {
          v128 = 65280;
          v129 = v126 + 2;
          *(_QWORD *)(a2 + 144) = v129;
          if (v129 >= v127)
          {
LABEL_152:
            v124 = 255;
            goto LABEL_145;
          }
        }
        else
        {
          v128 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v126 + 1) << 8;
          v129 = v126 + 2;
          *(_QWORD *)(a2 + 144) = v129;
          if (v129 >= v127)
            goto LABEL_152;
        }
        v124 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v129);
LABEL_145:
        v119 |= v128 | v124;
        v123 = 16;
        *(_DWORD *)(a2 + 168) = 16;
LABEL_146:
        v125 = 2 * v117;
        v45 = v117 >= 0x20000001;
        v117 *= 2;
        if (v45)
          goto LABEL_154;
      }
    }
    v125 = v117;
LABEL_154:
    v130 = (HIWORD(v125) * v122) & 0xFFFF0000;
    v131 = v119 >= v130;
    v62[v121] = *(_WORD *)(a2 + 2 * ((v122 >> 7) & 0x1FE | v131) + 176) + v122;
    if (v119 < v130)
      v132 = (HIWORD(v125) * v122) & 0xFFFF0000;
    else
      v132 = v125 - v130;
    if (v119 < v130)
      v133 = 0;
    else
      v133 = (HIWORD(v125) * v122) & 0xFFFF0000;
    v134 = v119 - v133;
    *(_DWORD *)(a2 + 156) = v132;
    *(_DWORD *)(a2 + 160) = v134;
    v135 = v120 | (2 * v131);
    v136 = (v135 >> 1) + 31;
    v137 = (unsigned __int16)v62[v136];
    if (v132 < 0x40000001)
    {
      v138 = *(_DWORD *)(a2 + 168);
      while (1)
      {
        v134 *= 2;
        *(_DWORD *)(a2 + 168) = --v138;
        if (v138)
          goto LABEL_164;
        v141 = *(_QWORD *)(a2 + 144);
        *(_QWORD *)(a2 + 144) = v141 + 1;
        v142 = *(unsigned int *)(a2 + 128);
        if (v141 + 1 >= v142)
        {
          v143 = 65280;
          v144 = v141 + 2;
          *(_QWORD *)(a2 + 144) = v144;
          if (v144 >= v142)
          {
LABEL_170:
            v139 = 255;
            goto LABEL_163;
          }
        }
        else
        {
          v143 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v141 + 1) << 8;
          v144 = v141 + 2;
          *(_QWORD *)(a2 + 144) = v144;
          if (v144 >= v142)
            goto LABEL_170;
        }
        v139 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 136) + v144);
LABEL_163:
        v134 |= v143 | v139;
        v138 = 16;
        *(_DWORD *)(a2 + 168) = 16;
LABEL_164:
        v140 = 2 * v132;
        v45 = v132 >= 0x20000001;
        v132 *= 2;
        if (v45)
          goto LABEL_172;
      }
    }
    v140 = v132;
LABEL_172:
    v145 = (HIWORD(v140) * v137) & 0xFFFF0000;
    v146 = v140 - v145;
    v147 = v134 >= v145;
    v62[v136] = *(_WORD *)(a2 + 2 * ((v137 >> 7) & 0x1FE | v147) + 176) + v137;
    if (v134 < v145)
      v148 = v145;
    else
      v148 = v146;
    if (v134 < v145)
      v149 = 0;
    else
      v149 = v145;
    *(_DWORD *)(a2 + 156) = v148;
    *(_DWORD *)(a2 + 160) = v134 - v149;
    v150 = v135 | v147;
    if ((v135 | v147) == 0x3F)
    {
      v151 = a4[12];
      result = gcl::ArithmeticDecoder::decodeExpGolomb(v193, *(_DWORD *)(v151 + 4 * v28), (_WORD *)(a4[9] + 2 * v28));
      v150 = result + 63;
      v152 = *(_DWORD *)(v151 + 4 * v28);
      v153 = ((int)result + 63) >> v152;
      if (v152 && !v153)
      {
        v29 = -1;
LABEL_31:
        *(_DWORD *)(v151 + 4 * v28) = v29 + v152;
        goto LABEL_32;
      }
      if (v153 >= 2)
      {
        v29 = 1;
        goto LABEL_31;
      }
    }
LABEL_32:
    if (v44 >= v58)
      v30 = v150 + 1;
    else
      v30 = ~v150;
    goto LABEL_35;
  }
  v7 = (unsigned int *)(a2 + 128);
  v8 = (int *)a4[12];
  v9 = gcl::ArithmeticDecoder::decodeSignedExpGolomb((unsigned int *)(a2 + 128), *v8, (_WORD *)a4[3], (_WORD *)a4[9]);
  if (v9 >= 0)
    v10 = v9;
  else
    v10 = -v9;
  v11 = v10 >> *v8;
  if (*v8)
    v12 = v11 == 0;
  else
    v12 = 0;
  if (v12)
  {
    v13 = -1;
  }
  else
  {
    if (v11 < 2)
      goto LABEL_185;
    v13 = 1;
  }
  *v8 += v13;
LABEL_185:
  *v5 = v9;
  v154 = a4[12];
  v155 = gcl::ArithmeticDecoder::decodeSignedExpGolomb(v7, *(_DWORD *)(v154 + 4), (_WORD *)(a4[3] + 2), (_WORD *)(a4[9] + 2));
  if (v155 >= 0)
    v156 = v155;
  else
    v156 = -v155;
  v157 = *(_DWORD *)(v154 + 4);
  v158 = v156 >> v157;
  if (v157)
    v159 = v158 == 0;
  else
    v159 = 0;
  if (v159)
  {
    v160 = -1;
  }
  else
  {
    if (v158 < 2)
      goto LABEL_196;
    v160 = 1;
  }
  *(_DWORD *)(v154 + 4) = v160 + v157;
LABEL_196:
  v5[1] = v155;
  v161 = a4[12];
  result = gcl::ArithmeticDecoder::decodeSignedExpGolomb(v7, *(_DWORD *)(v161 + 8), (_WORD *)(a4[3] + 4), (_WORD *)(a4[9] + 4));
  if ((int)result >= 0)
    v162 = result;
  else
    v162 = -(int)result;
  v163 = *(_DWORD *)(v161 + 8);
  v164 = v162 >> v163;
  if (v163 && !v164)
  {
    v165 = -1;
LABEL_204:
    *(_DWORD *)(v161 + 8) = v165 + v163;
    goto LABEL_242;
  }
  if (v164 >= 2)
  {
    v165 = 1;
    goto LABEL_204;
  }
LABEL_242:
  v5[2] = result;
  return result;
}

uint64_t gcl::polyline::Decoder::getAttributeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  __int16 v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char v9;
  char v10;
  char v11;
  char v12;
  uint64_t result;
  uint64_t v15;

  if (a2 >= 4)
  {
    v3 = 0;
    result = 3;
    if (a2 == 8)
      goto LABEL_20;
    v15 = a2 & 0x7FFFFFFFFFFFFFFCLL;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == 4)
      goto LABEL_21;
    if (a2 == 9
      || (a2 & 0xFFFFFFFFFFFFFFFELL) == 0xA
      || v15 == 12
      || v15 == 16
      || a2 == 20
      || a2 == 21
      || a2 == 22
      || (unint64_t)(a2 - 23) < 3
      || a2 == 26)
    {
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      goto LABEL_21;
    }
    v3 = 0;
    if ((unint64_t)a2 < 0x1C)
    {
LABEL_20:
      v4 = 0;
      v5 = 0;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      goto LABEL_21;
    }
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    if (*(_DWORD *)a1 == -1214009963)
    {
      v11 = *(_BYTE *)(a1 + 8);
      v3 = *(_BYTE *)(a1 + 9);
      v4 = *(_WORD *)(a1 + 10);
      v5 = *(_DWORD *)(a1 + 12);
      v6 = *(_DWORD *)(a1 + 16) & 0x7FFFFFFF;
      v9 = *(_BYTE *)(a1 + 20);
      v8 = *(unsigned __int8 *)(a1 + 21);
      v7 = *(unsigned __int8 *)(a1 + 22);
      v10 = *(_BYTE *)(a1 + 25);
      v12 = *(_BYTE *)(a1 + 26);
      if (a1 == -28)
        result = 3;
      else
        result = 0;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    result = 3;
  }
LABEL_21:
  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 4) = v11;
  *(_BYTE *)(a3 + 5) = v3;
  *(_WORD *)(a3 + 6) = v4;
  *(_DWORD *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 12) = v6;
  *(_DWORD *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 20) = v8;
  *(_BYTE *)(a3 + 24) = v9;
  *(_BYTE *)(a3 + 25) = v10;
  *(_BYTE *)(a3 + 26) = v12;
  return result;
}

void std::default_delete<gcl::gpcc::Decoder::Impl>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  if (a2)
  {
    v3 = (void *)a2[19];
    if (v3)
    {
      a2[20] = v3;
      operator delete(v3);
    }
    v4 = a2[16];
    if (v4)
    {
      v5 = a2[17];
      v6 = (void *)a2[16];
      if (v5 != v4)
      {
        do
        {
          v7 = *(void **)(v5 - 40);
          if (v7)
          {
            *(_QWORD *)(v5 - 32) = v7;
            operator delete(v7);
          }
          v5 -= 80;
        }
        while (v5 != v4);
        v6 = (void *)a2[16];
      }
      a2[17] = v4;
      operator delete(v6);
    }
    v8 = (void *)a2[13];
    if (v8)
    {
      a2[14] = v8;
      operator delete(v8);
    }
    v9 = (void *)a2[10];
    if (v9)
    {
      a2[11] = v9;
      operator delete(v9);
    }
    v10 = (void *)a2[1];
    if (v10)
      operator delete(v10);
    JUMPOUT(0x18D76437CLL);
  }
}

uint64_t std::__split_buffer<gcl::gpcc::AttributeParameterSet>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 80;
        *(_QWORD *)(a1 + 16) = v2 - 80;
        v5 = *(void **)(v2 - 40);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 32) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 80;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<long long>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_29:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void sub_189AD52F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  void *v20;

  if (__p)
  {
    operator delete(__p);
    v20 = a15;
    if (!a15)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v20 = a15;
    if (!a15)
      goto LABEL_3;
  }
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

int32x4_t *gcl::tmesh::ComputeGeneralizedParallelogramPrediction(int32x4_t *result, int32x4_t *a2, int32x4_t *a3, int a4, int *a5, int *a6, int *a7, int *a8, int32x4_t *a9)
{
  int32x4_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int32 *v29;
  int *v30;
  int *v31;
  int *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int32x4_t *v45;
  int32x4_t *v46;
  int32x4_t *v47;
  int32x4_t *v48;
  uint64_t v49;
  int32x4_t v50;
  int32x4_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int32x4_t *v69;
  int32x4_t *v70;
  int32x4_t *v71;
  int32x4_t *v72;
  uint64_t v73;
  int32x4_t v74;
  int32x4_t v75;
  uint64_t v76;
  uint64_t v77;
  __int32 *v78;
  int *v79;
  int *v80;
  int *v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;

  v9 = a9;
  v10 = *a7;
  v11 = a7[1];
  v12 = *a5 - v10;
  v13 = a5[1] - v11;
  v14 = a7[2];
  v15 = a5[2] - v14;
  v16 = *a6 - v10;
  v17 = a6[1] - v11;
  v18 = a6[2] - v14;
  v19 = *a8 - v10;
  v20 = a8[1] - v11;
  v21 = a8[2] - v14;
  v22 = v12 * v12 + v13 * v13 + v15 * v15;
  v23 = v16 * v16 + v17 * v17 + v18 * v18;
  if (v22 >> 30)
    v24 = 0;
  else
    v24 = v23 >> 30 == 0;
  if (v24 && (unint64_t)(v19 * v19 + v20 * v20 + v21 * v21) >> 30 == 0)
  {
    v38 = v16 * v12 + v17 * v13 + v18 * v15;
    v39 = v23 * v22 - v38 * v38;
    if (!v39)
    {
      if (a4 < 1)
        return result;
      if (a4 >= 8)
      {
        v44 = 0;
        if ((unint64_t)((char *)a9 - (char *)result) >= 0x20
          && (unint64_t)((char *)a9 - (char *)a2) >= 0x20
          && (unint64_t)((char *)a9 - (char *)a3) >= 0x20)
        {
          v44 = a4 & 0x7FFFFFF8;
          v69 = result + 1;
          v70 = a9 + 1;
          v71 = a2 + 1;
          v72 = a3 + 1;
          v73 = a4 & 0xFFFFFFF8;
          do
          {
            v74 = vsubq_s32(vaddq_s32(v71[-1], v69[-1]), v72[-1]);
            v75 = vsubq_s32(vaddq_s32(*v71, *v69), *v72);
            v69 += 2;
            v70[-1] = v74;
            *v70 = v75;
            v70 += 2;
            v71 += 2;
            v72 += 2;
            v73 -= 8;
          }
          while (v73);
          if (v44 == a4)
            return result;
        }
      }
      else
      {
        v44 = 0;
      }
      v76 = a4 - v44;
      v77 = v44;
      v78 = &a9->i32[v44];
      v79 = &a3->i32[v44];
      v80 = &a2->i32[v77];
      v81 = &result->i32[v77];
      do
      {
        v83 = *v81++;
        v82 = v83;
        v85 = *v80++;
        v84 = v85;
        v86 = *v79++;
        *v78++ = v84 + v82 - v86;
        --v76;
      }
      while (v76);
      return result;
    }
    v40 = v19 * v12 + v20 * v13 + v21 * v15;
    v41 = v19 * v16 + v20 * v17 + v21 * v18;
    if (v39 >= 0x80)
    {
      v52 = __clz(v39);
      v53 = 57 - v52;
      v54 = 1 << (56 - v52);
      v39 = (uint64_t)(v54 + v39) >> v53;
      v55 = v40 * v23 - v41 * v38;
      if (v55 < 0)
        v42 = -(uint64_t)((unint64_t)(v54 - v55) >> v53);
      else
        v42 = (unint64_t)(v54 + v55) >> v53;
      if (v42 >= 0x3FFFFFFFFFFFLL)
        v42 = 0x3FFFFFFFFFFFLL;
      if (v42 <= (uint64_t)0xFFFFC00000000001)
        v42 = 0xFFFFC00000000001;
      v56 = v41 * v22 - v40 * v38;
      if (v56 < 0)
        v43 = -(uint64_t)((unint64_t)(v54 - v56) >> v53);
      else
        v43 = (unint64_t)(v54 + v56) >> v53;
    }
    else
    {
      v42 = v40 * v23 - v41 * v38;
      if (v42 >= 0x3FFFFFFFFFFFLL)
        v42 = 0x3FFFFFFFFFFFLL;
      if (v42 <= (uint64_t)0xFFFFC00000000001)
        v42 = 0xFFFFC00000000001;
      v43 = v41 * v22 - v40 * v38;
    }
    if (v43 >= 0x3FFFFFFFFFFFLL)
      v43 = 0x3FFFFFFFFFFFLL;
    v57 = 0xFFFFC00000000001;
    if (v43 > (uint64_t)0xFFFFC00000000001)
      v57 = v43;
    v58 = gcl::tmesh::approximateInverseLut[v39 - 1];
    if (v42 * v58 >= 0x3FFFFFFF)
      v59 = 0x3FFFFFFFLL;
    else
      v59 = v42 * v58;
    if (v59 <= -1073741823)
      v59 = -1073741823;
    v60 = v57 * v58;
    if (v60 >= 0x3FFFFFFF)
      v60 = 0x3FFFFFFFLL;
    if (v60 <= -1073741823)
      v60 = -1073741823;
    if (a4 >= 1)
    {
      v61 = a4;
      do
      {
        v63 = result->i32[0];
        result = (int32x4_t *)((char *)result + 4);
        v64 = v59 * v63;
        v65 = a2->i32[0];
        a2 = (int32x4_t *)((char *)a2 + 4);
        v66 = v60 * v65 + v64;
        v67 = a3->i32[0];
        a3 = (int32x4_t *)((char *)a3 + 4);
        v68 = v66 + (0x10000 - (v59 + v60)) * v67;
        if (v68 < 0)
          v62 = -(uint64_t)((unint64_t)(0x8000 - v68) >> 16);
        else
          v62 = (unint64_t)(v68 + 0x8000) >> 16;
        if (v62 >= 0x3FFFFFFF)
          v62 = 0x3FFFFFFFLL;
        if (v62 <= -1073741823)
          LODWORD(v62) = -1073741823;
        v9->i32[0] = v62;
        v9 = (int32x4_t *)((char *)v9 + 4);
        --v61;
      }
      while (v61);
    }
  }
  else
  {
    if (a4 < 1)
      return result;
    if (a4 < 8)
    {
      v26 = 0;
LABEL_11:
      v27 = a4 - v26;
      v28 = v26;
      v29 = &a9->i32[v26];
      v30 = &a3->i32[v26];
      v31 = &a2->i32[v28];
      v32 = &result->i32[v28];
      do
      {
        v34 = *v32++;
        v33 = v34;
        v36 = *v31++;
        v35 = v36;
        v37 = *v30++;
        *v29++ = v35 + v33 - v37;
        --v27;
      }
      while (v27);
      return result;
    }
    v26 = 0;
    if ((unint64_t)((char *)a9 - (char *)result) < 0x20)
      goto LABEL_11;
    if ((unint64_t)((char *)a9 - (char *)a2) < 0x20)
      goto LABEL_11;
    if ((unint64_t)((char *)a9 - (char *)a3) < 0x20)
      goto LABEL_11;
    v26 = a4 & 0xFFFFFFF8;
    v45 = result + 1;
    v46 = a9 + 1;
    v47 = a2 + 1;
    v48 = a3 + 1;
    v49 = v26;
    do
    {
      v50 = vsubq_s32(vaddq_s32(v47[-1], v45[-1]), v48[-1]);
      v51 = vsubq_s32(vaddq_s32(*v47, *v45), *v48);
      v45 += 2;
      v46[-1] = v50;
      *v46 = v51;
      v46 += 2;
      v47 += 2;
      v48 += 2;
      v49 -= 8;
    }
    while (v49);
    if (v26 != a4)
      goto LABEL_11;
  }
  return result;
}

int *gcl::tmesh::ComputeTexCoordinatesPrediction(int *result, int *a2, _DWORD *a3, _DWORD *a4, int *a5, int a6, int *a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  char v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v7 = a4[1];
  v8 = a3[1];
  v9 = a4[2];
  v10 = a3[2];
  v11 = (v7 - v8) * (uint64_t)(v7 - v8) + (*a4 - *a3) * (uint64_t)(*a4 - *a3) + (v9 - v10) * (uint64_t)(v9 - v10);
  v12 = *a5;
  v13 = a5[1];
  v14 = a5[2];
  v15 = (v13 - v8) * (uint64_t)(v13 - v8) + (v12 - *a3) * (uint64_t)(v12 - *a3) + (v14 - v10) * (uint64_t)(v14 - v10);
  v16 = (v13 - v7) * (uint64_t)(v13 - v7) + (v12 - *a4) * (uint64_t)(v12 - *a4) + (v14 - v9) * (uint64_t)(v14 - v9);
  if (v11 >> 28)
    v17 = 0;
  else
    v17 = v15 >> 28 == 0;
  if (!v17 || v16 >> 28 != 0 || v11 == 0)
  {
    v20 = *a2 + *result;
    if (v20 < 0 != __OFADD__(*a2, *result))
      ++v20;
    *a7 = v20 >> 1;
    v21 = result[1];
    v22 = a2[1];
    v23 = __OFADD__(v22, v21);
    v24 = v22 + v21;
    if (v24 < 0 != v23)
      ++v24;
    a7[1] = v24 >> 1;
  }
  else
  {
    v25 = __clz(v11);
    v26 = 57 - v25;
    v27 = 1 << (56 - v25);
    v28 = (v27 + v11) >> v26;
    v29 = (v27 + v15) >> v26;
    v30 = (v27 + v16) >> v26;
    if (v11 >= 0x80)
    {
      v16 = v30;
      v15 = v29;
      v11 = v28;
    }
    v31 = gcl::tmesh::approximateInverseLut[v11 - 1];
    v32 = (v15 - v16) * v31;
    v33 = 1073676288;
    if (v32 < 1073676288)
      v33 = v32;
    v34 = v33 + 0x10000;
    v35 = v32 < -1073807360;
    v36 = -1073741824;
    if (!v35)
      v36 = v34;
    v37 = ((v15 * v31) << 18) - v36 * v36;
    if (v37 >= 0xFFFFFFFFLL)
      v37 = 0xFFFFFFFFLL;
    LODWORD(v37) = v37 & ~(v37 >> 63);
    v38 = *result;
    v39 = result[1];
    v40 = *a2 - v38;
    v41 = a2[1] - v39;
    v42 = __clz(v37);
    if (v37 >= 2)
      v37 = ((v37 >> ((32 - v42) >> 1)) + (1 << ((32 - v42) >> 1))) >> 1;
    else
      v37 = v37;
    v43 = v37 * *((int *)&qword_189CBDE58 + a6);
    v44 = v36 * v40 + v43 * v41;
    if (v44 >= 0)
      v45 = (unint64_t)(v44 + 0x10000) >> 17;
    else
      v45 = -(uint64_t)((unint64_t)(0x10000 - v44) >> 17);
    v46 = v45 + v38;
    v47 = v36 * v41 - v43 * v40;
    if (v47 >= 0)
      v48 = (unint64_t)(v47 + 0x10000) >> 17;
    else
      v48 = -(uint64_t)((unint64_t)(0x10000 - v47) >> 17);
    v49 = v48 + v39;
    if (v46 >= 0x3FFFFFFF)
      v50 = 0x3FFFFFFFLL;
    else
      v50 = v46;
    if (v50 <= -1073741823)
      LODWORD(v50) = -1073741823;
    if (v49 >= 0x3FFFFFFF)
      v49 = 0x3FFFFFFFLL;
    if (v49 <= -1073741823)
      LODWORD(v49) = -1073741823;
    *a7 = v50;
    a7[1] = v49;
  }
  return result;
}

unint64_t gcl::tmesh::ComputeTexCoordinatesPrediction(unint64_t result, int *a2, int *a3, _DWORD *a4, _DWORD *a5, int *a6, int *a7)
{
  int v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  char v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v7 = a5[1];
  v8 = a4[1];
  v9 = a5[2];
  v10 = a4[2];
  v11 = (v7 - v8) * (uint64_t)(v7 - v8) + (*a5 - *a4) * (uint64_t)(*a5 - *a4) + (v9 - v10) * (uint64_t)(v9 - v10);
  v12 = *a6;
  v13 = a6[1];
  v14 = a6[2];
  v15 = (v13 - v8) * (uint64_t)(v13 - v8) + (v12 - *a4) * (uint64_t)(v12 - *a4) + (v14 - v10) * (uint64_t)(v14 - v10);
  v16 = (v13 - v7) * (uint64_t)(v13 - v7) + (v12 - *a5) * (uint64_t)(v12 - *a5) + (v14 - v9) * (uint64_t)(v14 - v9);
  if (v11 >> 28)
    v17 = 0;
  else
    v17 = v15 >> 28 == 0;
  if (!v17 || v16 >> 28 != 0 || v11 == 0)
  {
    v20 = *a2 + *(_DWORD *)result;
    if (v20 < 0 != __OFADD__(*a2, *(_DWORD *)result))
      ++v20;
    *a7 = v20 >> 1;
    v21 = *(_DWORD *)(result + 4);
    v22 = a2[1];
    v23 = __OFADD__(v22, v21);
    v24 = v22 + v21;
    if (v24 < 0 != v23)
      ++v24;
    a7[1] = v24 >> 1;
  }
  else
  {
    v25 = __clz(v11);
    v26 = 57 - v25;
    v27 = 1 << (56 - v25);
    v28 = (v27 + v11) >> v26;
    v29 = (v27 + v15) >> v26;
    v30 = (v27 + v16) >> v26;
    if (v11 >= 0x80)
    {
      v16 = v30;
      v15 = v29;
      v11 = v28;
    }
    v31 = gcl::tmesh::approximateInverseLut[v11 - 1];
    v32 = (v15 - v16) * v31;
    v33 = 1073676288;
    if (v32 < 1073676288)
      v33 = v32;
    v34 = v33 + 0x10000;
    v35 = v32 < -1073807360;
    v36 = -1073741824;
    if (!v35)
      v36 = v34;
    v37 = ((v15 * v31) << 18) - v36 * v36;
    if (v37 >= 0xFFFFFFFFLL)
      v37 = 0xFFFFFFFFLL;
    LODWORD(v37) = v37 & ~(v37 >> 63);
    v38 = *(int *)result;
    v39 = *(int *)(result + 4);
    v40 = *a2 - v38;
    v41 = a2[1] - v39;
    v42 = (32 - __clz(v37)) >> 1;
    result = v37 >> v42;
    if (v37 >= 2)
      v37 = (result + (1 << v42)) >> 1;
    else
      v37 = v37;
    if ((v39 - a3[1]) * v40 < (v38 - *a3) * v41)
      v37 = -v37;
    v43 = v36 * v40 - v37 * v41;
    if (v43 >= 0)
      v44 = (unint64_t)(v43 + 0x10000) >> 17;
    else
      v44 = -(uint64_t)((unint64_t)(0x10000 - v43) >> 17);
    v45 = v44 + v38;
    v46 = v36 * v41 + v37 * v40;
    if (v46 >= 0)
      v47 = (unint64_t)(v46 + 0x10000) >> 17;
    else
      v47 = -(uint64_t)((unint64_t)(0x10000 - v46) >> 17);
    v48 = v47 + v39;
    if (v45 >= 0x3FFFFFFF)
      v49 = 0x3FFFFFFFLL;
    else
      v49 = v45;
    if (v49 <= -1073741823)
      LODWORD(v49) = -1073741823;
    if (v48 >= 0x3FFFFFFF)
      v48 = 0x3FFFFFFFLL;
    if (v48 <= -1073741823)
      LODWORD(v48) = -1073741823;
    *a7 = v49;
    a7[1] = v48;
  }
  return result;
}

uint64_t mgcl::ints::IntCompressor<unsigned char>::estimateMaxCompressedSize(uint64_t a1, uint64_t a2)
{
  return 16 * a2 + 1024;
}

uint64_t mgcl::ints::IntCompressor<unsigned char>::compress(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  _QWORD v28[9];
  char v29;
  void *__p;
  void *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int __b[16];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v38 = a3;
  v39 = a2;
  v36 = a5;
  v37 = a4;
  v34 = a7;
  v35 = a6;
  v33 = 0;
  *a6 = -1;
  a6[3] = a6[2];
  if (!a3)
  {
    v9 = 0;
    *a6 = 0;
    return v9;
  }
  if (a3 == 1)
  {
    v7 = a2;
    v8 = a2;
  }
  else
  {
    v8 = a2 + 1;
    v10 = a2[1];
    v11 = *a2;
    if (v10 >= v11)
      v7 = a2;
    else
      v7 = a2 + 1;
    if (v10 < v11)
      v8 = a2;
    if (a3 != 2)
    {
      v12 = a2 + 2;
      if (v10 <= v11)
        LOBYTE(v13) = *a2;
      else
        LOBYTE(v13) = a2[1];
      if (v10 < v11)
        LOBYTE(v11) = a2[1];
      v14 = a3 - 3;
      while (v14)
      {
        v16 = v12[1];
        v17 = *v12;
        if (v16 >= v17)
        {
          if (v17 < v11)
          {
            LOBYTE(v11) = *v12;
            v7 = v12;
          }
          v15 = v16 >= v13;
          if (v16 > v13)
            LOBYTE(v13) = v12[1];
          if (v15)
            v8 = v12 + 1;
          v12 += 2;
          v14 -= 2;
          if (v14 == -1)
            goto LABEL_39;
        }
        else
        {
          v11 = *v7;
          if (v16 < v11)
          {
            LOBYTE(v11) = v12[1];
            v7 = v12 + 1;
          }
          v13 = *v8;
          v18 = v17 >= v13;
          if (v17 > v13)
            LOBYTE(v13) = *v12;
          if (v18)
            v8 = v12;
          v12 += 2;
          v14 -= 2;
          if (v14 == -1)
            goto LABEL_39;
        }
      }
      v19 = *v12;
      if (v19 < *v7)
        goto LABEL_40;
      if (v19 >= *v8)
        v8 = v12;
    }
  }
LABEL_39:
  v19 = *v7;
LABEL_40:
  if (v19 >= 2)
  {
    v21 = v19;
    v20 = 1;
    do
    {
      ++v20;
      v22 = v21 > 3;
      v21 >>= 1;
    }
    while (v22);
  }
  else
  {
    v20 = 1;
  }
  v23 = *v8;
  v24 = 1;
  if (v23 >= 2)
  {
    do
    {
      ++v24;
      v22 = v23 > 3;
      v23 >>= 1;
    }
    while (v22);
  }
  if (v20 <= v24)
    v25 = v24;
  else
    v25 = v20;
  __p = 0;
  v31 = 0;
  v32 = 0;
  v28[0] = &v33;
  v28[1] = &v39;
  v28[2] = &v38;
  v28[3] = &v34;
  v28[4] = a1;
  v28[5] = &v29;
  v28[6] = &v35;
  v28[7] = &v36;
  v28[8] = &v37;
  if ((a7 & 0x100) != 0)
  {
    __b[0] = v25;
    mgcl::ints::IntCompressor<unsigned char>::compress(unsigned char const*,unsigned long,int const*,unsigned long,unsigned char *,unsigned long,mgcl::ints::BlobInfo *,unsigned long long)::{lambda(int const*,unsigned long,mgcl::ints::Tabulation)#1}::operator()((uint64_t)v28, __b, 1uLL, 0);
    LOWORD(a7) = v34;
  }
  if ((a7 & 0x400) != 0 && v25 <= 0xF)
  {
    memset_pattern16(__b, &unk_189CFB2A0, 4 * v25);
    mgcl::ints::IntCompressor<unsigned char>::compress(unsigned char const*,unsigned long,int const*,unsigned long,unsigned char *,unsigned long,mgcl::ints::BlobInfo *,unsigned long long)::{lambda(int const*,unsigned long,mgcl::ints::Tabulation)#1}::operator()((uint64_t)v28, __b, v25, 2);
  }
  v26 = v33;
  if (!v33)
    v26 = 6;
  if (*v35 == -1)
    v9 = v26;
  else
    v9 = 0;
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  return v9;
}

void sub_189AD5DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mgcl::ints::IntCompressor<unsigned char>::compress(unsigned char const*,unsigned long,int const*,unsigned long,unsigned char *,unsigned long,mgcl::ints::BlobInfo *,unsigned long long)::{lambda(int const*,unsigned long,mgcl::ints::Tabulation)#1}::operator()(uint64_t a1, int *a2, unint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void **v11;
  char *v12;
  unint64_t v13;
  unsigned int *v14;
  unint64_t v15;
  int *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  BOOL v39;
  mgcl::muid *v40;
  mgcl::muid *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  size_t v47;
  mgcl::muid *v48;
  mgcl::muid *v49;
  uint64_t v50;
  mgcl::muid *v51;
  mgcl::muid *v52;
  unint64_t v53;
  BOOL v54;
  size_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  size_t v59;
  mgcl::muid *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _OWORD *v68;
  char *v69;
  unint64_t v70;
  __int128 v71;
  _QWORD *v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  __int128 v79;
  char *v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  unsigned __int8 *v88;
  int8x16_t v89;
  unint64_t v90;
  int64x2_t v91;
  int64x2_t v92;
  uint16x8_t v93;
  uint32x4_t v94;
  uint64x2_t v95;
  uint64x2_t v96;
  uint64x2_t v97;
  uint32x4_t v98;
  uint64x2_t v99;
  uint64x2_t v100;
  int v101;
  uint64_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int8x16_t v105;
  uint8x16_t v106;
  uint16x8_t v107;
  uint32x4_t v108;
  uint64x2_t v109;
  uint64x2_t v110;
  uint64x2_t v111;
  uint32x4_t v112;
  uint64x2_t v113;
  uint64x2_t v114;
  uint16x8_t v115;
  uint32x4_t v116;
  uint64x2_t v117;
  uint64x2_t v118;
  uint32x4_t v119;
  uint64x2_t v120;
  uint64x2_t v121;
  char *v122;
  char v123;
  char *v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  unsigned __int8 *v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char *v133;
  unsigned __int8 *v134;
  unsigned int v135;
  __int128 v136;
  uint64_t v137;
  mgcl::muid *v138;
  mgcl::muid *v139;
  unint64_t v140;
  BOOL v141;
  size_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  size_t v146;
  mgcl::muid *v147;
  char *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  int64x2_t v152;
  uint8x8_t *v153;
  int32x4_t *v154;
  unint64_t v155;
  uint8x8_t v156;
  uint16x8_t v157;
  uint32x4_t v158;
  int64x2_t v159;
  int64x2_t v160;
  int64x2_t v161;
  uint32x4_t v162;
  int64x2_t v163;
  int64x2_t v164;
  int8x16_t v165;
  int64x2_t v166;
  unint64_t v167;
  uint8x8_t *v168;
  int32x4_t *v169;
  unint64_t v170;
  uint8x8_t v171;
  uint16x8_t v172;
  uint32x4_t v173;
  uint64x2_t v174;
  uint64x2_t v175;
  uint64x2_t v176;
  uint32x4_t v177;
  uint64x2_t v178;
  uint64x2_t v179;
  char *v180;
  char *v181;
  unint64_t v182;
  __int128 v183;
  char *v184;
  char *v185;
  unint64_t v186;
  uint64_t v187;
  int64x2_t v188;
  unint64_t v189;
  int32x4_t *v190;
  uint8x16_t *v191;
  uint8x16_t v192;
  uint16x8_t v193;
  uint32x4_t v194;
  int64x2_t v195;
  int64x2_t v196;
  int64x2_t v197;
  uint16x8_t v198;
  uint32x4_t v199;
  int64x2_t v200;
  int64x2_t v201;
  uint32x4_t v202;
  int64x2_t v203;
  int64x2_t v204;
  uint32x4_t v205;
  int64x2_t v206;
  unint64_t v207;
  int32x4_t *v208;
  uint8x16_t *v209;
  uint8x16_t v210;
  uint16x8_t v211;
  uint32x4_t v212;
  uint64x2_t v213;
  uint64x2_t v214;
  uint64x2_t v215;
  uint16x8_t v216;
  uint32x4_t v217;
  uint64x2_t v218;
  uint64x2_t v219;
  uint32x4_t v220;
  uint64x2_t v221;
  uint64x2_t v222;
  uint32x4_t v223;
  uint64x2_t v224;
  uint64x2_t v225;
  char *v226;
  char v227;
  mgcl::muid *v228;
  unint64_t v229;
  unint64_t v230;
  _QWORD *v231;
  unsigned __int8 *v232;
  unsigned int v233;
  unint64_t v234;
  unint64_t v235;
  int64x2_t v236;
  int64x2_t *v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t *v240;
  unint64_t v241;
  unint64_t v242;
  unint64_t v243;
  _QWORD *v244;
  unsigned __int8 *v245;
  unsigned int v246;
  _BYTE *v247;
  char *v248;
  unint64_t v249;
  size_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  size_t v254;
  char *v255;
  char *v256;
  unint64_t v257;
  unint64_t v258;
  int64x2_t v259;
  uint8x8_t *v260;
  int64x2_t *v261;
  unint64_t v262;
  uint8x8_t v263;
  uint16x8_t v264;
  uint32x4_t v265;
  int64x2_t v266;
  int64x2_t v267;
  int64x2_t v268;
  uint32x4_t v269;
  int64x2_t v270;
  int8x16_t v271;
  unint64_t v272;
  int64x2_t v273;
  int64x2_t v274;
  uint8x8_t *v275;
  int64x2_t *v276;
  unint64_t v277;
  uint8x8_t v278;
  uint16x8_t v279;
  uint32x4_t v280;
  uint64x2_t v281;
  uint64x2_t v282;
  uint64x2_t v283;
  uint32x4_t v284;
  uint64x2_t v285;
  uint64x2_t v286;
  int64x2_t v287;
  unint64_t v288;
  int64x2_t *v289;
  uint8x16_t *v290;
  uint8x16_t v291;
  uint16x8_t v292;
  uint32x4_t v293;
  int64x2_t v294;
  int64x2_t v295;
  uint16x8_t v296;
  uint32x4_t v297;
  int64x2_t v298;
  uint32x4_t v299;
  int64x2_t v300;
  int64x2_t v301;
  int64x2_t v302;
  uint32x4_t v303;
  int64x2_t v304;
  int64x2_t v305;
  int64x2_t v306;
  int64x2_t v307;
  unint64_t v308;
  int64x2_t *v309;
  uint8x16_t *v310;
  uint8x16_t v311;
  uint16x8_t v312;
  uint32x4_t v313;
  uint64x2_t v314;
  uint64x2_t v315;
  uint16x8_t v316;
  uint32x4_t v317;
  uint64x2_t v318;
  uint64x2_t v319;
  uint64x2_t v320;
  uint32x4_t v321;
  uint64x2_t v322;
  uint32x4_t v323;
  uint64x2_t v324;
  uint64x2_t v325;
  uint64x2_t v326;
  char *v327;
  char *v328;
  unint64_t v329;
  __int128 v330;
  char *v331;
  char *v332;
  unint64_t v333;
  uint64_t v334;
  char *v335;
  char v336;
  int v337;
  unint64_t v338;
  _BYTE *v339;
  _BYTE *v340;
  __int128 v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  BOOL v345;
  unint64_t v346;
  uint64_t v347;
  size_t v348;
  char *v349;
  char *v350;
  unint64_t v351;
  char *v352;
  __int128 *v353;
  unint64_t v354;
  __int128 v355;
  char *v356;
  uint64_t *v357;
  unint64_t v358;
  uint64_t v359;
  char *v360;
  char v361;
  uint64_t v362;
  mgcl::muid *v363;
  mgcl::muid *v364;
  uint64_t v365;
  unint64_t v366;
  int64_t v367;
  __int128 v368;
  uint64_t v369;
  mgcl::muid *v370;
  mgcl::muid *v371;
  unint64_t v372;
  BOOL v373;
  size_t v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  size_t v378;
  mgcl::muid *v379;
  char *v380;
  unint64_t v381;
  char *v382;
  char *v383;
  unint64_t v384;
  __int128 v385;
  char *v386;
  char *v387;
  unint64_t v388;
  uint64_t v389;
  char *v390;
  char v391;
  char *v392;
  char *v393;
  geo *v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t v397;
  _DWORD *v398;
  unsigned __int8 *v399;
  unsigned int v400;
  unsigned int v401;
  unint64_t v402;
  int32x4_t v403;
  int32x4_t *v404;
  unint64_t v405;
  unint64_t v406;
  unsigned int *v407;
  uint64_t v408;
  uint64_t v409;
  _WORD *v410;
  uint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  unsigned int v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  unint64_t v421;
  uint64_t v422;
  uint64_t v423;
  unint64_t v424;
  unint64_t v425;
  char *v426;
  char *v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unint64_t v431;
  size_t v432;
  uint64_t v433;
  unint64_t v434;
  uint64_t v435;
  size_t v436;
  size_t v437;
  uint64_t v438;
  char *v439;
  char *v440;
  unint64_t v441;
  char *v442;
  char *v443;
  unint64_t v444;
  __int128 v445;
  char *v446;
  char *v447;
  unint64_t v448;
  uint64_t v449;
  char *v450;
  char v451;
  uint64_t v452;
  unint64_t v453;
  unint64_t v454;
  unint64_t v455;
  char *v456;
  char *v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  size_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  size_t v465;
  size_t v466;
  _BYTE *v467;
  char *v468;
  int8x16_t v469;
  unint64_t v470;
  int64x2_t v471;
  int64x2_t v472;
  uint8x8_t *v473;
  int32x4_t *v474;
  unint64_t v475;
  uint8x8_t v476;
  uint16x8_t v477;
  uint32x4_t v478;
  uint64x2_t v479;
  uint64x2_t v480;
  uint64x2_t v481;
  uint32x4_t v482;
  uint64x2_t v483;
  uint64x2_t v484;
  int64x2_t v485;
  int64x2_t v486;
  unint64_t v487;
  int32x4_t *v488;
  uint8x16_t *v489;
  uint8x16_t v490;
  uint16x8_t v491;
  uint32x4_t v492;
  uint64x2_t v493;
  uint64x2_t v494;
  uint64x2_t v495;
  uint16x8_t v496;
  uint32x4_t v497;
  uint64x2_t v498;
  uint64x2_t v499;
  uint32x4_t v500;
  uint64x2_t v501;
  uint64x2_t v502;
  uint32x4_t v503;
  uint64x2_t v504;
  uint64x2_t v505;
  unint64_t v506;
  _OWORD *v507;
  char *v508;
  unint64_t v509;
  __int128 v510;
  _QWORD *v511;
  char *v512;
  unint64_t v513;
  uint64_t v514;
  char *v515;
  char v516;
  unsigned int v517;
  char *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  __int128 v522;
  uint64_t v523;
  uint64_t v524;
  void *v525;
  uint64_t v526;
  void *v527;
  int v528;
  int v529;
  unsigned int v530;
  unsigned int v531;
  unint64_t v532;
  int v533;
  unsigned int v534;
  int v535;
  uint64_t v536;
  uint64_t v537;
  _WORD *v538;
  uint64_t v539;
  uint64_t v540;
  unint64_t v541;
  char *v542;
  char *v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  uint64_t v547;
  unint64_t v548;
  uint64_t v549;
  size_t v550;
  char *v551;
  char *v552;
  unint64_t v553;
  char *v554;
  char *v555;
  unint64_t v556;
  __int128 v557;
  char *v558;
  char *v559;
  unint64_t v560;
  uint64_t v561;
  char *v562;
  char v563;
  unsigned int v564;
  unint64_t v565;
  unint64_t v566;
  unint64_t v567;
  unint64_t v568;
  unsigned int v569;
  uint64_t v570;
  unint64_t v571;
  unsigned int v572;
  unsigned int v573;
  int v574;
  char *v575;
  unint64_t v576;
  unint64_t v577;
  char *v578;
  unint64_t v579;
  unint64_t v580;
  unint64_t v581;
  uint64_t v582;
  unint64_t v583;
  uint64_t v584;
  size_t v585;
  char *v586;
  char *v587;
  unint64_t v588;
  char *v589;
  char *v590;
  unint64_t v591;
  __int128 v592;
  char *v593;
  char *v594;
  unint64_t v595;
  uint64_t v596;
  char *v597;
  char v598;
  unint64_t v599;
  unint64_t v600;
  char *v601;
  char *v602;
  unint64_t v603;
  unint64_t v604;
  unint64_t v605;
  uint64_t v606;
  unint64_t v607;
  uint64_t v608;
  size_t v609;
  char *v610;
  char *v611;
  unint64_t v612;
  char *v613;
  char *v614;
  unint64_t v615;
  __int128 v616;
  char *v617;
  char *v618;
  unint64_t v619;
  uint64_t v620;
  char *v621;
  char v622;
  uint64_t v623;
  unint64_t v624;
  unint64_t v625;
  unint64_t v626;
  unint64_t v627;
  uint64_t v628;
  unint64_t v629;
  uint64_t v630;
  size_t v631;
  char *v632;
  char *v633;
  unint64_t v634;
  char *v635;
  char *v636;
  char v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  unsigned int v641;
  unint64_t v642;
  unsigned int v643;
  uint64_t v644;
  unint64_t v645;
  char *v646;
  char *v647;
  unint64_t v648;
  __int128 v649;
  char *v650;
  char *v651;
  unint64_t v652;
  uint64_t v653;
  unint64_t v654;
  unint64_t v655;
  unint64_t v656;
  char *v657;
  char *v658;
  unint64_t v659;
  unint64_t v660;
  unint64_t v661;
  size_t v662;
  uint64_t v663;
  unint64_t v664;
  uint64_t v665;
  size_t v666;
  size_t v667;
  _BYTE *v668;
  char *v669;
  unint64_t v670;
  _OWORD *v671;
  char *v672;
  unint64_t v673;
  __int128 v674;
  _QWORD *v675;
  char *v676;
  unint64_t v677;
  uint64_t v678;
  char *v679;
  char v680;
  unsigned int v681;
  char *v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  __int128 v686;
  uint64_t v687;
  uint64_t v688;
  void *v689;
  uint64_t v690;
  void *v691;
  unsigned int v692;
  uint64_t v693;
  uint64_t v694;
  _WORD *v695;
  uint64_t v696;
  uint64_t v697;
  unint64_t v698;
  unint64_t v699;
  char *v700;
  char *v701;
  unint64_t v702;
  unint64_t v703;
  unint64_t v704;
  uint64_t v705;
  unint64_t v706;
  uint64_t v707;
  size_t v708;
  _BYTE *v709;
  char *v710;
  unint64_t v711;
  _OWORD *v712;
  char *v713;
  unint64_t v714;
  __int128 v715;
  _QWORD *v716;
  char *v717;
  unint64_t v718;
  uint64_t v719;
  char *v720;
  char v721;
  unint64_t v722;
  unint64_t v723;
  unint64_t v724;
  unint64_t v725;
  uint64_t v726;
  unint64_t v727;
  unint64_t v728;
  char *v729;
  char *v730;
  unint64_t v731;
  unint64_t v732;
  unint64_t v733;
  uint64_t v734;
  unint64_t v735;
  uint64_t v736;
  size_t v737;
  char *v738;
  char *v739;
  uint64_t v740;
  unsigned int *v741;
  unint64_t v742;
  char *v743;
  char *v744;
  unint64_t v745;
  __int128 v746;
  char *v747;
  char *v748;
  unint64_t v749;
  uint64_t v750;
  char *v751;
  char v752;
  unint64_t v753;
  unint64_t v754;
  unint64_t v755;
  unint64_t v756;
  uint64_t v757;
  unint64_t v758;
  unint64_t v759;
  char *v760;
  char *v761;
  unint64_t v762;
  unint64_t v763;
  unint64_t v764;
  uint64_t v765;
  unint64_t v766;
  uint64_t v767;
  size_t v768;
  char *v769;
  char *v770;
  uint64_t v771;
  unint64_t v772;
  char *v773;
  char *v774;
  unint64_t v775;
  __int128 v776;
  char *v777;
  char *v778;
  unint64_t v779;
  uint64_t v780;
  char *v781;
  char v782;
  unint64_t v783;
  unint64_t v784;
  unint64_t v785;
  unint64_t v786;
  unsigned int v787;
  uint64_t v788;
  unsigned int v789;
  unint64_t v790;
  unint64_t v791;
  unint64_t v792;
  char *v793;
  char *v794;
  unint64_t v795;
  unint64_t v796;
  unint64_t v797;
  size_t v798;
  uint64_t v799;
  unint64_t v800;
  uint64_t v801;
  size_t v802;
  _BYTE *v803;
  char *v804;
  unint64_t v805;
  _OWORD *v806;
  char *v807;
  unint64_t v808;
  __int128 v809;
  _QWORD *v810;
  char *v811;
  unint64_t v812;
  uint64_t v813;
  char *v814;
  char v815;
  unsigned int v816;
  char *v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  __int128 v821;
  uint64_t v822;
  uint64_t v823;
  void *v824;
  uint64_t v825;
  uint64_t v826;
  int v827;
  uint64_t v828;
  void *v829;
  uint64_t v830;
  void *v831;
  uint64_t *v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  unint64_t *v836;
  uint64_t v837;
  uint64_t v838;
  unint64_t v839;
  _QWORD *v840;
  unint64_t v841;
  unint64_t v842;
  unsigned __int8 *v843;
  uint64_t *v844;
  unsigned int ****v845;
  unint64_t v846;
  const void **v847;
  unint64_t v848;
  unint64_t v849;
  char **v850;
  unint64_t v852;
  int v853;
  uint64_t *v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  int v858[2];
  unint64_t v859;
  unsigned __int8 *v860;
  uint64_t v861;
  char *v862;
  char *v863;
  unsigned int v864;
  unint64_t v865;
  unsigned int v866;
  unint64_t v867;
  uint64_t v868;
  geo *v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  char *v874;
  unsigned int v875;
  char *v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  unint64_t v880;
  unsigned int v881;
  __int128 __src;
  _OWORD v883[2];

  v860 = **(unsigned __int8 ***)(a1 + 8);
  v7 = **(_QWORD **)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = **(_QWORD **)(a1 + 24);
  v11 = (const void **)(v8 + 96);
  v10 = *(char **)(v8 + 96);
  v840 = *(_QWORD **)(a1 + 40);
  v12 = *(char **)(v8 + 104);
  if (v12 != v10)
  {
    *(_QWORD *)(v8 + 104) = v10;
    v12 = v10;
  }
  v877 = 0;
  v878 = 0;
  v879 = v8 + 96;
  LOBYTE(__src) = a3;
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((uint64_t)v11, v12, (char *)&__src, (char *)&__src + 1, 1);
  *(_QWORD *)v858 = v9;
  v870 = v7;
  HIDWORD(v836) = a4;
  v838 = a1;
  v15 = 0;
  if (a3)
  {
    v16 = a2;
    v17 = a3;
    do
    {
      v18 = *v16++;
      LOBYTE(__src) = v18;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((uint64_t)v11, *(char **)(v8 + 104), (char *)&__src, (char *)&__src + 1, 1);
      v15 += v18;
      --v17;
    }
    while (v17);
  }
  v19 = v840[2];
  v20 = v840 + 2;
  v21 = 0xAAAAAAAAAAAAAAABLL * ((v840[3] - v19) >> 4);
  if (a3 <= v21)
  {
    v22 = v860;
    v23 = v870;
    if (a3 < v21)
      v840[3] = v19 + 48 * a3;
    if (!a3)
    {
LABEL_872:
      v827 = 0;
      *v840 = *(_QWORD *)(v8 + 104) - *(_QWORD *)(v8 + 96);
      v828 = v878;
      if (v878)
        goto LABEL_878;
      goto LABEL_881;
    }
  }
  else
  {
    std::vector<mgcl::ints::ColumnInfo>::__append((char **)v840 + 2, a3 - v21);
    v22 = v860;
    v23 = v870;
  }
  v24 = 0;
  v854 = (uint64_t *)(v8 + 24);
  v844 = (uint64_t *)(v8 + 48);
  v845 = (unsigned int ****)(v8 + 120);
  v852 = 4 * v23;
  v850 = (char **)(v8 + 72);
  v848 = 8 * v23;
  v846 = 8 * v23 + 128;
  v843 = &v22[v23];
  v839 = v23 & 0xFFFFFFFFFFFFFFFCLL;
  v841 = v23 & 0xFFFFFFFFFFFFFFF8;
  v842 = v23 & 0xFFFFFFFFFFFFFFF0;
  v837 = -(uint64_t)(v23 & 0xFFFFFFFFFFFFFFF8);
  v847 = (const void **)(v8 + 96);
  v857 = v8;
  v849 = a3;
  while (2)
  {
    v25 = LOBYTE(a2[v24]);
    v855 = *v20;
    v856 = v24;
    v26 = *v20 + 48 * v24;
    v15 -= v25;
    *(_BYTE *)v26 = 0;
    *(_QWORD *)(v26 + 8) = -1;
    *(_QWORD *)(v26 + 16) = 0;
    *(_QWORD *)(v26 + 24) = 0;
    *(_QWORD *)(v26 + 32) = 0;
    *(_DWORD *)(v26 + 40) = 0;
    if (v23)
    {
      v27 = 0;
      v28 = -1;
      v29 = ~(-1 << v25);
      do
      {
        while ((_DWORD)v25)
        {
          v30 = v22[v27];
          if (v25 <= 0x3F)
            v30 = (v30 >> v15) & v29;
          if (v30 < v28)
            v28 = v30;
          if (v23 == ++v27)
            goto LABEL_23;
        }
        if (v28)
          v28 = 0;
        ++v27;
      }
      while (v23 != v27);
LABEL_23:
      v31 = 0;
      v32 = v22;
      v33 = v23;
      do
      {
        while (!(_DWORD)v25)
        {
          if (v31 <= -(uint64_t)v28)
            v31 = -(uint64_t)v28;
          ++v32;
          if (!--v33)
            goto LABEL_33;
        }
        v35 = *v32++;
        v34 = v35;
        v36 = (v35 >> v15) & (unint64_t)v29;
        if (v25 <= 0x3F)
          v34 = v36;
        v37 = v34 - v28;
        if (v31 <= v37)
          v31 = v37;
        --v33;
      }
      while (v33);
LABEL_33:
      v38 = 1;
      if (v31 >= 2)
      {
        do
        {
          ++v38;
          v39 = v31 > 3;
          v31 >>= 1;
        }
        while (v39);
      }
      v871 = v28;
      v865 = v15;
      v861 = v26;
      v872 = v25;
      if ((v9 & 1) == 0)
      {
LABEL_62:
        v853 = 0;
        if ((v9 & 2) == 0)
          goto LABEL_63;
LABEL_147:
        v138 = *(mgcl::muid **)v8;
        v139 = *(mgcl::muid **)(v8 + 8);
        v140 = (unint64_t)v139 - *(_QWORD *)v8;
        v141 = v848 >= v140;
        v142 = v848 - v140;
        if (v848 <= v140)
        {
          v149 = v870;
          if (!v141)
            *(_QWORD *)(v8 + 8) = (char *)v138 + v848;
LABEL_201:
          v228 = *(mgcl::muid **)v8;
          if (!v149)
            goto LABEL_224;
          if (!(_DWORD)v872)
          {
            v234 = 0;
            v235 = -v871;
            if (v149 < 4)
              goto LABEL_215;
            v236 = vdupq_n_s64(v235);
            v237 = (int64x2_t *)((char *)v228 + 16);
            v238 = v839;
            do
            {
              v237[-1] = v236;
              *v237 = v236;
              v237 += 2;
              v238 -= 4;
            }
            while (v238);
            v234 = v839;
            if (v149 != v839)
            {
LABEL_215:
              v239 = v149 - v234;
              v240 = (unint64_t *)((char *)v228 + 8 * v234);
              do
              {
                *v240++ = v235;
                --v239;
              }
              while (v239);
            }
            goto LABEL_224;
          }
          if (v872 > 0x3F)
          {
            if (v149 < 8 || v228 < (mgcl::muid *)v843 && v22 < (unsigned __int8 *)v228 + v848)
            {
              v229 = 0;
              goto LABEL_208;
            }
            if (v149 >= 0x10)
            {
              v287 = vdupq_n_s64(v871);
              v288 = v842;
              v289 = *(int64x2_t **)v8;
              v290 = (uint8x16_t *)v22;
              do
              {
                v291 = *v290++;
                v292 = vmovl_high_u8(v291);
                v293 = vmovl_u16(*(uint16x4_t *)v292.i8);
                v294.i64[0] = v293.u32[2];
                v294.i64[1] = v293.u32[3];
                v295 = v294;
                v296 = vmovl_u8(*(uint8x8_t *)v291.i8);
                v297 = vmovl_high_u16(v296);
                v294.i64[0] = v297.u32[2];
                v294.i64[1] = v297.u32[3];
                v298 = v294;
                v299 = vmovl_high_u16(v292);
                v294.i64[0] = v299.u32[0];
                v294.i64[1] = v299.u32[1];
                v300 = v294;
                v294.i64[0] = v293.u32[0];
                v294.i64[1] = v293.u32[1];
                v301 = v294;
                v294.i64[0] = v297.u32[0];
                v294.i64[1] = v297.u32[1];
                v302 = v294;
                v303 = vmovl_u16(*(uint16x4_t *)v296.i8);
                v294.i64[0] = v303.u32[2];
                v294.i64[1] = v303.u32[3];
                v304 = v294;
                v294.i64[0] = v299.u32[2];
                v294.i64[1] = v299.u32[3];
                v305 = v294;
                v289[4] = vsubq_s64(v301, v287);
                v289[5] = vsubq_s64(v295, v287);
                v294.i64[0] = v303.u32[0];
                v294.i64[1] = v303.u32[1];
                v289[2] = vsubq_s64(v302, v287);
                v289[3] = vsubq_s64(v298, v287);
                v289[6] = vsubq_s64(v300, v287);
                v289[7] = vsubq_s64(v305, v287);
                *v289 = vsubq_s64(v294, v287);
                v289[1] = vsubq_s64(v304, v287);
                v289 += 8;
                v288 -= 16;
              }
              while (v288);
              if (v149 == v842)
                goto LABEL_224;
              v229 = v842;
              v258 = v842;
              if ((v149 & 8) == 0)
              {
LABEL_208:
                v230 = v149 - v229;
                v231 = (_QWORD *)((char *)v228 + 8 * v229);
                v232 = &v22[v229];
                do
                {
                  v233 = *v232++;
                  *v231++ = v233 - v871;
                  --v230;
                }
                while (v230);
                goto LABEL_224;
              }
            }
            else
            {
              v258 = 0;
            }
            v259 = vdupq_n_s64(v871);
            v260 = (uint8x8_t *)&v22[v258];
            v261 = (int64x2_t *)((char *)v228 + 8 * v258);
            v262 = v837 + v258;
            do
            {
              v263 = *v260++;
              v264 = vmovl_u8(v263);
              v265 = vmovl_high_u16(v264);
              v266.i64[0] = v265.u32[2];
              v266.i64[1] = v265.u32[3];
              v267 = v266;
              v266.i64[0] = v265.u32[0];
              v266.i64[1] = v265.u32[1];
              v268 = v266;
              v269 = vmovl_u16(*(uint16x4_t *)v264.i8);
              v266.i64[0] = v269.u32[2];
              v266.i64[1] = v269.u32[3];
              v270 = v266;
              v266.i64[0] = v269.u32[0];
              v266.i64[1] = v269.u32[1];
              v261[2] = vsubq_s64(v268, v259);
              v261[3] = vsubq_s64(v267, v259);
              *v261 = vsubq_s64(v266, v259);
              v261[1] = vsubq_s64(v270, v259);
              v261 += 4;
              v262 += 8;
            }
            while (v262);
            v229 = v841;
            if (v149 != v841)
              goto LABEL_208;
LABEL_224:
            v247 = *(_BYTE **)(v8 + 24);
            v248 = *(char **)(v8 + 32);
            v249 = v248 - v247;
            v250 = v846 - (v248 - v247);
            if (v846 <= v248 - v247)
            {
              if (v846 < v248 - v247)
              {
                v248 = &v247[v846];
                *(_QWORD *)(v8 + 32) = &v247[v846];
              }
LABEL_277:
              *(_QWORD *)&__src = 0;
              v337 = mgcl::muid::compress(v228, (const unint64_t *)8, v870, 0, 0, 0, (_BYTE *)*v854, &v248[-*v854], &__src, v836);
              v8 = v857;
              v26 = v861;
              v853 = v337;
              if (v337 || (v338 = __src, (unint64_t)__src >= *(_QWORD *)(v861 + 8)))
              {
LABEL_310:
                v22 = v860;
                v23 = v870;
                LOBYTE(v9) = v858[0];
                v15 = v865;
                v63 = v872;
                if ((v858[0] & 4) == 0)
                  goto LABEL_324;
                goto LABEL_311;
              }
              v339 = *(_BYTE **)(v857 + 24);
              v340 = *(_BYTE **)(v857 + 32);
              v341 = *(_OWORD *)(v857 + 72);
              *(_QWORD *)(v857 + 72) = v339;
              *(_QWORD *)(v857 + 80) = v340;
              *(_OWORD *)(v857 + 24) = v341;
              v342 = *(_QWORD *)(v857 + 88);
              v343 = *(_QWORD *)(v857 + 40);
              *(_QWORD *)(v857 + 88) = v343;
              *(_QWORD *)(v857 + 40) = v342;
              v344 = v340 - v339;
              v345 = v338 >= v340 - v339;
              if (v338 <= v340 - v339)
              {
                v8 = v857;
                if (!v345)
                  *(_QWORD *)(v857 + 80) = &v339[v338];
                goto LABEL_309;
              }
              if (v343 - (uint64_t)v340 >= v338 - (v340 - v339))
              {
                bzero(v340, v338 - (v340 - v339));
                v8 = v857;
                *(_QWORD *)(v857 + 80) = &v339[v338];
LABEL_309:
                v362 = __src;
                *(_BYTE *)v26 = 2;
                *(_QWORD *)(v26 + 8) = v362;
                *(_QWORD *)(v26 + 16) = v872;
                *(_QWORD *)(v26 + 24) = v871;
                *(_QWORD *)(v26 + 32) = 0;
                *(_DWORD *)(v26 + 40) = 0;
                goto LABEL_310;
              }
              if ((v338 & 0x8000000000000000) != 0)
                goto LABEL_893;
              v346 = v343 - (_QWORD)v339;
              v347 = 2 * v346;
              if (2 * v346 <= v338)
                v347 = v338;
              if (v346 >= 0x3FFFFFFFFFFFFFFFLL)
                v348 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v348 = v347;
              v349 = (char *)operator new(v348);
              v350 = &v349[v344];
              bzero(&v349[v344], v338 - (v340 - v339));
              if (v340 == v339)
              {
LABEL_307:
                v8 = v857;
                *(_QWORD *)(v857 + 72) = v350;
                *(_QWORD *)(v857 + 80) = &v349[v338];
                *(_QWORD *)(v857 + 88) = &v349[v348];
                v26 = v861;
                if (v339)
                  operator delete(v339);
                goto LABEL_309;
              }
              if (v344 >= 8 && (unint64_t)(v339 - v349) >= 0x20)
              {
                if (v344 < 0x20)
                {
                  v351 = 0;
                  goto LABEL_299;
                }
                v351 = v344 & 0xFFFFFFFFFFFFFFE0;
                v352 = &v349[v344 - 16];
                v353 = (__int128 *)(v340 - 16);
                v354 = v344 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v355 = *v353;
                  *((_OWORD *)v352 - 1) = *(v353 - 1);
                  *(_OWORD *)v352 = v355;
                  v352 -= 32;
                  v353 -= 2;
                  v354 -= 32;
                }
                while (v354);
                if (v344 == v351)
                  goto LABEL_306;
                if ((v344 & 0x18) != 0)
                {
LABEL_299:
                  v350 -= v344 & 0xFFFFFFFFFFFFFFF8;
                  v356 = &v349[&v340[-v351] - v339 - 8];
                  v357 = (uint64_t *)&v340[-v351 - 8];
                  v358 = v351 - (v344 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v359 = *v357--;
                    *(_QWORD *)v356 = v359;
                    v356 -= 8;
                    v358 += 8;
                  }
                  while (v358);
                  v340 -= v344 & 0xFFFFFFFFFFFFFFF8;
                  if (v344 == (v344 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_306;
                  goto LABEL_304;
                }
                v350 -= v351;
                v340 -= v351;
              }
LABEL_304:
              v360 = v350 - 1;
              do
              {
                v361 = *--v340;
                *v360-- = v361;
              }
              while (v340 != v339);
LABEL_306:
              v350 = v349;
              goto LABEL_307;
            }
            v251 = *(_QWORD *)(v8 + 40);
            if (v251 - (uint64_t)v248 >= v250)
            {
              bzero(*(void **)(v8 + 32), v846 - (v248 - v247));
              *(_QWORD *)(v8 + 32) = &v247[v846];
              v248 = &v247[v846];
              goto LABEL_277;
            }
            if ((v846 & 0x8000000000000000) != 0)
              goto LABEL_893;
            v252 = v251 - (_QWORD)v247;
            v253 = 2 * v252;
            if (2 * v252 <= v846)
              v253 = v846;
            if (v252 >= 0x3FFFFFFFFFFFFFFFLL)
              v254 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v254 = v253;
            v255 = (char *)operator new(v254);
            v256 = &v255[v249];
            bzero(&v255[v249], v250);
            if (v248 == v247)
            {
              v247 = v248;
              goto LABEL_275;
            }
            if (v249 >= 8 && (unint64_t)(v247 - v255) >= 0x20)
            {
              if (v249 < 0x20)
              {
                v257 = 0;
                goto LABEL_267;
              }
              v257 = v249 & 0xFFFFFFFFFFFFFFE0;
              v327 = &v255[v249 - 16];
              v328 = v248 - 16;
              v329 = v249 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v330 = *(_OWORD *)v328;
                *((_OWORD *)v327 - 1) = *((_OWORD *)v328 - 1);
                *(_OWORD *)v327 = v330;
                v327 -= 32;
                v328 -= 32;
                v329 -= 32;
              }
              while (v329);
              if (v249 == v257)
                goto LABEL_274;
              if ((v249 & 0x18) != 0)
              {
LABEL_267:
                v256 -= v249 & 0xFFFFFFFFFFFFFFF8;
                v331 = &v255[&v248[-v257] - v247 - 8];
                v332 = &v248[-v257 - 8];
                v333 = v257 - (v249 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v334 = *(_QWORD *)v332;
                  v332 -= 8;
                  *(_QWORD *)v331 = v334;
                  v331 -= 8;
                  v333 += 8;
                }
                while (v333);
                v248 -= v249 & 0xFFFFFFFFFFFFFFF8;
                if (v249 == (v249 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_274;
                goto LABEL_272;
              }
              v256 -= v257;
              v248 -= v257;
            }
LABEL_272:
            v335 = v256 - 1;
            do
            {
              v336 = *--v248;
              *v335-- = v336;
            }
            while (v248 != v247);
LABEL_274:
            v256 = v255;
LABEL_275:
            v248 = &v255[v846];
            *(_QWORD *)(v857 + 24) = v256;
            *(_QWORD *)(v857 + 32) = &v255[v846];
            *(_QWORD *)(v857 + 40) = &v255[v254];
            if (v247)
            {
              operator delete(v247);
              v248 = *(char **)(v857 + 32);
            }
            goto LABEL_277;
          }
          v241 = ~(-1 << v872);
          if (v149 < 8 || v228 < (mgcl::muid *)v843 && v22 < (unsigned __int8 *)v228 + v848)
          {
            v242 = 0;
            goto LABEL_222;
          }
          v271 = (int8x16_t)vdupq_n_s64(v241);
          if (v149 >= 0x10)
          {
            v306 = vdupq_n_s64(v15);
            v307 = vdupq_n_s64(v871);
            v308 = v842;
            v309 = *(int64x2_t **)v8;
            v310 = (uint8x16_t *)v22;
            do
            {
              v311 = *v310++;
              v312 = vmovl_u8(*(uint8x8_t *)v311.i8);
              v313 = vmovl_high_u16(v312);
              v314.i64[0] = v313.u32[2];
              v314.i64[1] = v313.u32[3];
              v315 = v314;
              v316 = vmovl_high_u8(v311);
              v317 = vmovl_u16(*(uint16x4_t *)v316.i8);
              v314.i64[0] = v317.u32[2];
              v314.i64[1] = v317.u32[3];
              v318 = v314;
              v314.i64[0] = v317.u32[0];
              v314.i64[1] = v317.u32[1];
              v319 = v314;
              v314.i64[0] = v313.u32[0];
              v314.i64[1] = v313.u32[1];
              v320 = v314;
              v321 = vmovl_u16(*(uint16x4_t *)v312.i8);
              v314.i64[0] = v321.u32[2];
              v314.i64[1] = v321.u32[3];
              v322 = v314;
              v323 = vmovl_high_u16(v316);
              v314.i64[0] = v323.u32[0];
              v314.i64[1] = v323.u32[1];
              v324 = v314;
              v314.i64[0] = v321.u32[0];
              v314.i64[1] = v321.u32[1];
              v325 = v314;
              v314.i64[0] = v323.u32[2];
              v314.i64[1] = v323.u32[3];
              v326 = (uint64x2_t)vnegq_s64(v306);
              v309[4] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v319, v326), v271), v307);
              v309[5] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v318, v326), v271), v307);
              v309[2] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v320, v326), v271), v307);
              v309[3] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v315, v326), v271), v307);
              *v309 = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v325, v326), v271), v307);
              v309[1] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v322, v326), v271), v307);
              v309[6] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v324, v326), v271), v307);
              v309[7] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v314, v326), v271), v307);
              v309 += 8;
              v308 -= 16;
            }
            while (v308);
            if (v149 == v842)
              goto LABEL_224;
            v242 = v842;
            v272 = v842;
            if ((v149 & 8) == 0)
            {
LABEL_222:
              v243 = v149 - v242;
              v244 = (_QWORD *)((char *)v228 + 8 * v242);
              v245 = &v22[v242];
              do
              {
                v246 = *v245++;
                *v244++ = ((v246 >> v15) & v241) - v871;
                --v243;
              }
              while (v243);
              goto LABEL_224;
            }
          }
          else
          {
            v272 = 0;
          }
          v273 = vdupq_n_s64(v15);
          v274 = vdupq_n_s64(v871);
          v275 = (uint8x8_t *)&v22[v272];
          v276 = (int64x2_t *)((char *)v228 + 8 * v272);
          v277 = v837 + v272;
          do
          {
            v278 = *v275++;
            v279 = vmovl_u8(v278);
            v280 = vmovl_high_u16(v279);
            v281.i64[0] = v280.u32[2];
            v281.i64[1] = v280.u32[3];
            v282 = v281;
            v281.i64[0] = v280.u32[0];
            v281.i64[1] = v280.u32[1];
            v283 = v281;
            v284 = vmovl_u16(*(uint16x4_t *)v279.i8);
            v281.i64[0] = v284.u32[2];
            v281.i64[1] = v284.u32[3];
            v285 = v281;
            v281.i64[0] = v284.u32[0];
            v281.i64[1] = v284.u32[1];
            v286 = (uint64x2_t)vnegq_s64(v273);
            v276[2] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v283, v286), v271), v274);
            v276[3] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v282, v286), v271), v274);
            *v276 = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v281, v286), v271), v274);
            v276[1] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v285, v286), v271), v274);
            v276 += 4;
            v277 += 8;
          }
          while (v277);
          v242 = v841;
          if (v149 == v841)
            goto LABEL_224;
          goto LABEL_222;
        }
        v143 = *(_QWORD *)(v8 + 16);
        if (v143 - (uint64_t)v139 >= v142)
        {
          bzero(*(void **)(v8 + 8), v848 - v140);
          *(_QWORD *)(v8 + 8) = (char *)v139 + v142;
          v149 = v870;
          goto LABEL_201;
        }
        if ((v848 & 0x8000000000000000) != 0)
          goto LABEL_893;
        v144 = v143 - (_QWORD)v138;
        v145 = 2 * v144;
        if (2 * v144 <= v848)
          v145 = v848;
        if (v144 >= 0x3FFFFFFFFFFFFFFFLL)
          v146 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v146 = v145;
        v147 = (mgcl::muid *)operator new(v146);
        v148 = (char *)v147 + v140;
        bzero((char *)v147 + v140, v142);
        if (v139 == v138)
        {
          v149 = v870;
          v15 = v865;
          goto LABEL_199;
        }
        if (v140 < 8)
        {
          v15 = v865;
          goto LABEL_196;
        }
        v15 = v865;
        if ((unint64_t)(v138 - v147) >= 0x20)
        {
          if (v140 < 0x20)
          {
            v150 = 0;
            goto LABEL_181;
          }
          v150 = v140 & 0xFFFFFFFFFFFFFFE0;
          v180 = (char *)v147 + v140 - 16;
          v181 = (char *)v139 - 16;
          v182 = v140 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v183 = *(_OWORD *)v181;
            *((_OWORD *)v180 - 1) = *((_OWORD *)v181 - 1);
            *(_OWORD *)v180 = v183;
            v180 -= 32;
            v181 -= 32;
            v182 -= 32;
          }
          while (v182);
          if (v140 == v150)
            goto LABEL_198;
          if ((v140 & 0x18) != 0)
          {
LABEL_181:
            v148 -= v140 & 0xFFFFFFFFFFFFFFF8;
            v184 = (char *)v147 + (mgcl::muid *)((char *)v139 - v150) - v138 - 8;
            v185 = (char *)v139 - v150 - 8;
            v186 = v150 - (v140 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v187 = *(_QWORD *)v185;
              v185 -= 8;
              *(_QWORD *)v184 = v187;
              v184 -= 8;
              v186 += 8;
            }
            while (v186);
            v139 = (mgcl::muid *)((char *)v139 - (v140 & 0xFFFFFFFFFFFFFFF8));
            if (v140 == (v140 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_198;
            goto LABEL_196;
          }
          v148 -= v150;
          v139 = (mgcl::muid *)((char *)v139 - v150);
        }
LABEL_196:
        v226 = v148 - 1;
        do
        {
          v227 = *((_BYTE *)v139 - 1);
          v139 = (mgcl::muid *)((char *)v139 - 1);
          *v226-- = v227;
        }
        while (v139 != v138);
LABEL_198:
        v139 = v138;
        v148 = (char *)v147;
        v149 = v870;
LABEL_199:
        *(_QWORD *)v857 = v148;
        *(_QWORD *)(v857 + 8) = (char *)v147 + v848;
        v8 = v857;
        *(_QWORD *)(v857 + 16) = (char *)v147 + v146;
        v22 = v860;
        if (v139)
          operator delete(v139);
        goto LABEL_201;
      }
    }
    else
    {
      v38 = 1;
      v871 = -1;
      v865 = v15;
      v861 = v26;
      v872 = v25;
      if ((v9 & 1) == 0)
        goto LABEL_62;
    }
    if (v25 > 1)
    {
      if (v38 > 0x1F)
        goto LABEL_62;
      v51 = *(mgcl::muid **)v8;
      v52 = *(mgcl::muid **)(v8 + 8);
      v53 = (unint64_t)v52 - *(_QWORD *)v8;
      v54 = v852 >= v53;
      v55 = v852 - v53;
      if (v852 <= v53)
      {
        v65 = v870;
        v62 = *(_QWORD *)v858;
        if (!v54)
          *(_QWORD *)(v8 + 8) = (char *)v51 + v852;
LABEL_127:
        v124 = *(char **)v8;
        if (!v65)
        {
LABEL_142:
          memset(v883, 0, sizeof(v883));
          __src = 0u;
          goto LABEL_143;
        }
        if (v872 > 0x3F)
        {
          if (v65 < 8 || v124 < (char *)v843 && v22 < (unsigned __int8 *)&v124[v852])
          {
            v125 = 0;
LABEL_133:
            v126 = v65 - v125;
            v127 = &v124[4 * v125];
            v128 = &v22[v125];
            do
            {
              v129 = *v128++;
              *(_DWORD *)v127 = v129 - v871;
              v127 += 4;
              --v126;
            }
            while (v126);
            goto LABEL_142;
          }
          if (v65 >= 0x10)
          {
            v188 = vdupq_n_s64(v871);
            v189 = v842;
            v190 = *(int32x4_t **)v8;
            v191 = (uint8x16_t *)v22;
            do
            {
              v192 = *v191++;
              v193 = vmovl_u8(*(uint8x8_t *)v192.i8);
              v194 = vmovl_u16(*(uint16x4_t *)v193.i8);
              v195.i64[0] = v194.u32[0];
              v195.i64[1] = v194.u32[1];
              v196 = v195;
              v195.i64[0] = v194.u32[2];
              v195.i64[1] = v194.u32[3];
              v197 = v195;
              v198 = vmovl_high_u8(v192);
              v199 = vmovl_high_u16(v198);
              v195.i64[0] = v199.u32[2];
              v195.i64[1] = v199.u32[3];
              v200 = v195;
              v195.i64[0] = v199.u32[0];
              v195.i64[1] = v199.u32[1];
              v201 = v195;
              v202 = vmovl_high_u16(v193);
              v195.i64[0] = v202.u32[0];
              v195.i64[1] = v202.u32[1];
              v203 = v195;
              v195.i64[0] = v202.u32[2];
              v195.i64[1] = v202.u32[3];
              v204 = v195;
              v205 = vmovl_u16(*(uint16x4_t *)v198.i8);
              v195.i64[0] = v205.u32[0];
              v195.i64[1] = v205.u32[1];
              v206 = v195;
              v195.i64[0] = v205.u32[2];
              v195.i64[1] = v205.u32[3];
              v190[2] = vuzp1q_s32((int32x4_t)vsubq_s64(v206, v188), (int32x4_t)vsubq_s64(v195, v188));
              v190[3] = vuzp1q_s32((int32x4_t)vsubq_s64(v201, v188), (int32x4_t)vsubq_s64(v200, v188));
              *v190 = vuzp1q_s32((int32x4_t)vsubq_s64(v196, v188), (int32x4_t)vsubq_s64(v197, v188));
              v190[1] = vuzp1q_s32((int32x4_t)vsubq_s64(v203, v188), (int32x4_t)vsubq_s64(v204, v188));
              v190 += 4;
              v189 -= 16;
            }
            while (v189);
            if (v65 == v842)
              goto LABEL_142;
            v125 = v842;
            v151 = v842;
            if ((v65 & 8) == 0)
              goto LABEL_133;
          }
          else
          {
            v151 = 0;
          }
          v152 = vdupq_n_s64(v871);
          v153 = (uint8x8_t *)&v22[v151];
          v154 = (int32x4_t *)&v124[4 * v151];
          v155 = v837 + v151;
          do
          {
            v156 = *v153++;
            v157 = vmovl_u8(v156);
            v158 = vmovl_u16(*(uint16x4_t *)v157.i8);
            v159.i64[0] = v158.u32[0];
            v159.i64[1] = v158.u32[1];
            v160 = v159;
            v159.i64[0] = v158.u32[2];
            v159.i64[1] = v158.u32[3];
            v161 = v159;
            v162 = vmovl_high_u16(v157);
            v159.i64[0] = v162.u32[0];
            v159.i64[1] = v162.u32[1];
            v163 = v159;
            v159.i64[0] = v162.u32[2];
            v159.i64[1] = v162.u32[3];
            *v154 = vuzp1q_s32((int32x4_t)vsubq_s64(v160, v152), (int32x4_t)vsubq_s64(v161, v152));
            v154[1] = vuzp1q_s32((int32x4_t)vsubq_s64(v163, v152), (int32x4_t)vsubq_s64(v159, v152));
            v154 += 2;
            v155 += 8;
          }
          while (v155);
          v125 = v841;
          if (v65 == v841)
            goto LABEL_142;
          goto LABEL_133;
        }
        v130 = ~(-1 << v872);
        if (v65 < 8 || v124 < (char *)v843 && v22 < (unsigned __int8 *)&v124[v852])
        {
          v131 = 0;
LABEL_140:
          v132 = v65 - v131;
          v133 = &v124[4 * v131];
          v134 = &v22[v131];
          do
          {
            v135 = *v134++;
            *(_DWORD *)v133 = ((v135 >> v15) & v130) - v871;
            v133 += 4;
            --v132;
          }
          while (v132);
          goto LABEL_142;
        }
        v164 = vdupq_n_s64(v15);
        v165 = (int8x16_t)vdupq_n_s64(v130);
        v166 = vdupq_n_s64(v871);
        if (v65 >= 0x10)
        {
          v207 = v842;
          v208 = *(int32x4_t **)v8;
          v209 = (uint8x16_t *)v22;
          do
          {
            v210 = *v209++;
            v211 = vmovl_high_u8(v210);
            v212 = vmovl_high_u16(v211);
            v213.i64[0] = v212.u32[2];
            v213.i64[1] = v212.u32[3];
            v214 = v213;
            v213.i64[0] = v212.u32[0];
            v213.i64[1] = v212.u32[1];
            v215 = v213;
            v216 = vmovl_u8(*(uint8x8_t *)v210.i8);
            v217 = vmovl_u16(*(uint16x4_t *)v216.i8);
            v213.i64[0] = v217.u32[0];
            v213.i64[1] = v217.u32[1];
            v218 = v213;
            v213.i64[0] = v217.u32[2];
            v213.i64[1] = v217.u32[3];
            v219 = v213;
            v220 = vmovl_high_u16(v216);
            v213.i64[0] = v220.u32[0];
            v213.i64[1] = v220.u32[1];
            v221 = v213;
            v213.i64[0] = v220.u32[2];
            v213.i64[1] = v220.u32[3];
            v222 = v213;
            v223 = vmovl_u16(*(uint16x4_t *)v211.i8);
            v213.i64[0] = v223.u32[0];
            v213.i64[1] = v223.u32[1];
            v224 = v213;
            v213.i64[0] = v223.u32[2];
            v213.i64[1] = v223.u32[3];
            v225 = (uint64x2_t)vnegq_s64(v164);
            *v208 = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v218, v225), v165), v166), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v219, v225), v165), v166));
            v208[1] = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v221, v225), v165), v166), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v222, v225), v165), v166));
            v208[2] = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v224, v225), v165), v166), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v213, v225), v165), v166));
            v208[3] = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v215, v225), v165), v166), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v214, v225), v165), v166));
            v208 += 4;
            v207 -= 16;
          }
          while (v207);
          if (v65 == v842)
            goto LABEL_142;
          v131 = v842;
          v167 = v842;
          if ((v65 & 8) == 0)
            goto LABEL_140;
        }
        else
        {
          v167 = 0;
        }
        v168 = (uint8x8_t *)&v22[v167];
        v169 = (int32x4_t *)&v124[4 * v167];
        v170 = v837 + v167;
        do
        {
          v171 = *v168++;
          v172 = vmovl_u8(v171);
          v173 = vmovl_u16(*(uint16x4_t *)v172.i8);
          v174.i64[0] = v173.u32[0];
          v174.i64[1] = v173.u32[1];
          v175 = v174;
          v174.i64[0] = v173.u32[2];
          v174.i64[1] = v173.u32[3];
          v176 = v174;
          v177 = vmovl_high_u16(v172);
          v174.i64[0] = v177.u32[0];
          v174.i64[1] = v177.u32[1];
          v178 = v174;
          v174.i64[0] = v177.u32[2];
          v174.i64[1] = v177.u32[3];
          v179 = (uint64x2_t)vnegq_s64(v164);
          *v169 = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v175, v179), v165), v166), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v176, v179), v165), v166));
          v169[1] = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v178, v179), v165), v166), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v174, v179), v165), v166));
          v169 += 2;
          v170 += 8;
        }
        while (v170);
        v131 = v841;
        if (v65 == v841)
          goto LABEL_142;
        goto LABEL_140;
      }
      v56 = *(_QWORD *)(v8 + 16);
      if (v56 - (uint64_t)v52 >= v55)
      {
        bzero(*(void **)(v8 + 8), v852 - v53);
        *(_QWORD *)(v8 + 8) = (char *)v52 + v55;
        v65 = v870;
        v62 = *(_QWORD *)v858;
        goto LABEL_127;
      }
      if ((v852 & 0x8000000000000000) != 0)
        goto LABEL_893;
      v57 = v56 - (_QWORD)v51;
      v58 = 2 * v57;
      if (2 * v57 <= v852)
        v58 = v852;
      if (v57 >= 0x3FFFFFFFFFFFFFFFLL)
        v59 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v59 = v58;
      v60 = (mgcl::muid *)operator new(v59);
      v61 = (char *)v60 + v53;
      bzero((char *)v60 + v53, v55);
      if (v52 == v51)
      {
        v65 = v870;
        v62 = *(_QWORD *)v858;
        v15 = v865;
        goto LABEL_125;
      }
      if (v53 < 8)
      {
        v62 = *(_QWORD *)v858;
        v15 = v865;
        goto LABEL_122;
      }
      v62 = *(_QWORD *)v858;
      v15 = v865;
      if ((unint64_t)(v51 - v60) >= 0x20)
      {
        if (v53 < 0x20)
        {
          v67 = 0;
          goto LABEL_92;
        }
        v67 = v53 & 0xFFFFFFFFFFFFFFE0;
        v76 = (char *)v60 + v53 - 16;
        v77 = (char *)v52 - 16;
        v78 = v53 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v79 = *(_OWORD *)v77;
          *((_OWORD *)v76 - 1) = *((_OWORD *)v77 - 1);
          *(_OWORD *)v76 = v79;
          v76 -= 32;
          v77 -= 32;
          v78 -= 32;
        }
        while (v78);
        if (v53 == v67)
          goto LABEL_124;
        if ((v53 & 0x18) != 0)
        {
LABEL_92:
          v61 -= v53 & 0xFFFFFFFFFFFFFFF8;
          v80 = (char *)v60 + (mgcl::muid *)((char *)v52 - v67) - v51 - 8;
          v81 = (char *)v52 - v67 - 8;
          v82 = v67 - (v53 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v83 = *(_QWORD *)v81;
            v81 -= 8;
            *(_QWORD *)v80 = v83;
            v80 -= 8;
            v82 += 8;
          }
          while (v82);
          v52 = (mgcl::muid *)((char *)v52 - (v53 & 0xFFFFFFFFFFFFFFF8));
          if (v53 == (v53 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_124;
          goto LABEL_122;
        }
        v61 -= v67;
        v52 = (mgcl::muid *)((char *)v52 - v67);
      }
LABEL_122:
      v122 = v61 - 1;
      do
      {
        v123 = *((_BYTE *)v52 - 1);
        v52 = (mgcl::muid *)((char *)v52 - 1);
        *v122-- = v123;
      }
      while (v52 != v51);
LABEL_124:
      v52 = v51;
      v61 = (char *)v60;
      v65 = v870;
LABEL_125:
      *(_QWORD *)v857 = v61;
      *(_QWORD *)(v857 + 8) = (char *)v60 + v852;
      v8 = v857;
      *(_QWORD *)(v857 + 16) = (char *)v60 + v59;
      v22 = v860;
      if (v52)
        operator delete(v52);
      goto LABEL_127;
    }
    v41 = *(mgcl::muid **)v8;
    v40 = *(mgcl::muid **)(v8 + 8);
    v42 = (unint64_t)v40 - *(_QWORD *)v8;
    v43 = v23 - v42;
    if (v23 <= v42)
    {
      if (v23 < v42)
        *(_QWORD *)(v8 + 8) = (char *)v41 + v23;
      v50 = *(_QWORD *)v858;
LABEL_102:
      v64 = v872;
      if (!v23)
        goto LABEL_115;
      goto LABEL_103;
    }
    v44 = *(_QWORD *)(v8 + 16);
    if (v44 - (uint64_t)v40 < v43)
    {
      if ((v23 & 0x8000000000000000) != 0)
        goto LABEL_893;
      v45 = v44 - (_QWORD)v41;
      v46 = 2 * v45;
      if (2 * v45 <= v23)
        v46 = v23;
      if (v45 >= 0x3FFFFFFFFFFFFFFFLL)
        v47 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v47 = v46;
      v48 = (mgcl::muid *)operator new(v47);
      v49 = (mgcl::muid *)((char *)v48 + v42);
      bzero((char *)v48 + v42, v23 - v42);
      if (v40 == v41)
      {
        v23 = v870;
        v50 = *(_QWORD *)v858;
        goto LABEL_100;
      }
      if (v42 < 8)
      {
        v23 = v870;
        v50 = *(_QWORD *)v858;
        goto LABEL_97;
      }
      v23 = v870;
      v50 = *(_QWORD *)v858;
      if ((unint64_t)(v41 - v48) >= 0x20)
      {
        if (v42 < 0x20)
        {
          v66 = 0;
          goto LABEL_84;
        }
        v66 = v42 & 0xFFFFFFFFFFFFFFE0;
        v68 = (_OWORD *)((char *)v48 + v42 - 16);
        v69 = (char *)v40 - 16;
        v70 = v42 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v71 = *(_OWORD *)v69;
          *(v68 - 1) = *((_OWORD *)v69 - 1);
          *v68 = v71;
          v68 -= 2;
          v69 -= 32;
          v70 -= 32;
        }
        while (v70);
        if (v42 == v66)
          goto LABEL_99;
        if ((v42 & 0x18) != 0)
        {
LABEL_84:
          v49 = (mgcl::muid *)((char *)v49 - (v42 & 0xFFFFFFFFFFFFFFF8));
          v72 = (_QWORD *)((char *)v48 + (mgcl::muid *)((char *)v40 - v66) - v41 - 8);
          v73 = (char *)v40 - v66 - 8;
          v74 = v66 - (v42 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v75 = *(_QWORD *)v73;
            v73 -= 8;
            *v72-- = v75;
            v74 += 8;
          }
          while (v74);
          v40 = (mgcl::muid *)((char *)v40 - (v42 & 0xFFFFFFFFFFFFFFF8));
          if (v42 == (v42 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_99;
          goto LABEL_97;
        }
        v49 = (mgcl::muid *)((char *)v49 - v66);
        v40 = (mgcl::muid *)((char *)v40 - v66);
      }
LABEL_97:
      v84 = (char *)v49 - 1;
      do
      {
        v85 = *((_BYTE *)v40 - 1);
        v40 = (mgcl::muid *)((char *)v40 - 1);
        *v84-- = v85;
      }
      while (v40 != v41);
LABEL_99:
      v40 = v41;
      v49 = v48;
LABEL_100:
      *(_QWORD *)v857 = v49;
      *(_QWORD *)(v857 + 8) = (char *)v48 + v23;
      *(_QWORD *)(v857 + 16) = (char *)v48 + v47;
      v41 = v49;
      v15 = v865;
      if (v40)
      {
        operator delete(v40);
        v41 = *(mgcl::muid **)v857;
      }
      goto LABEL_102;
    }
    bzero(*(void **)(v8 + 8), v23 - v42);
    *(_QWORD *)(v8 + 8) = (char *)v40 + v43;
    v41 = *(mgcl::muid **)v8;
    v50 = *(_QWORD *)v858;
    v64 = v872;
LABEL_103:
    if ((_DWORD)v64)
    {
      v86 = 0;
      v87 = ~(-1 << v64);
      if (v23 < 8)
      {
        v88 = v860;
      }
      else
      {
        v88 = v860;
        if ((unint64_t)(v41 - (mgcl::muid *)v860) >= 0x10)
        {
          v89 = (int8x16_t)vdupq_n_s64(v87);
          if (v23 < 0x10)
          {
            v90 = 0;
            goto LABEL_108;
          }
          v102 = 0;
          v103 = vdupq_n_s64(v15);
          v104 = vdupq_n_s64(v871);
          v105.i64[0] = 0x101010101010101;
          v105.i64[1] = 0x101010101010101;
          do
          {
            v106 = *(uint8x16_t *)&v860[v102];
            v107 = vmovl_high_u8(v106);
            v108 = vmovl_high_u16(v107);
            v109.i64[0] = v108.u32[2];
            v109.i64[1] = v108.u32[3];
            v110 = v109;
            v109.i64[0] = v108.u32[0];
            v109.i64[1] = v108.u32[1];
            v111 = v109;
            v112 = vmovl_u16(*(uint16x4_t *)v107.i8);
            v109.i64[0] = v112.u32[0];
            v109.i64[1] = v112.u32[1];
            v113 = v109;
            v109.i64[0] = v112.u32[2];
            v109.i64[1] = v112.u32[3];
            v114 = v109;
            v115 = vmovl_u8(*(uint8x8_t *)v106.i8);
            v116 = vmovl_u16(*(uint16x4_t *)v115.i8);
            v109.i64[0] = v116.u32[0];
            v109.i64[1] = v116.u32[1];
            v117 = v109;
            v109.i64[0] = v116.u32[2];
            v109.i64[1] = v116.u32[3];
            v118 = v109;
            v119 = vmovl_high_u16(v115);
            v109.i64[0] = v119.u32[0];
            v109.i64[1] = v119.u32[1];
            v120 = v109;
            v109.i64[0] = v119.u32[2];
            v109.i64[1] = v119.u32[3];
            v121 = (uint64x2_t)vnegq_s64(v103);
            *(int8x16_t *)((char *)v41 + v102) = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v117, v121), v89), v104), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v118, v121), v89), v104)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v120, v121), v89), v104), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v109, v121), v89), v104)))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(
                                                                                                     (int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v113, v121), v89),
                                                                                                     v104),
                                                                                        (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v114, v121), v89), v104)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v111, v121), v89), v104), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v110, v121), v89), v104))))), v105);
            v102 += 16;
          }
          while (v842 != v102);
          if (v23 == v842)
            goto LABEL_115;
          v90 = v842;
          v86 = v842;
          if ((v23 & 8) != 0)
          {
LABEL_108:
            v91 = vdupq_n_s64(v15);
            v92 = vdupq_n_s64(v871);
            do
            {
              v93 = vmovl_u8(*(uint8x8_t *)&v860[v90]);
              v94 = vmovl_u16(*(uint16x4_t *)v93.i8);
              v95.i64[0] = v94.u32[0];
              v95.i64[1] = v94.u32[1];
              v96 = v95;
              v95.i64[0] = v94.u32[2];
              v95.i64[1] = v94.u32[3];
              v97 = v95;
              v98 = vmovl_high_u16(v93);
              v95.i64[0] = v98.u32[0];
              v95.i64[1] = v98.u32[1];
              v99 = v95;
              v95.i64[0] = v98.u32[2];
              v95.i64[1] = v98.u32[3];
              v100 = (uint64x2_t)vnegq_s64(v91);
              *(int8x8_t *)((char *)v41 + v90) = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v96, v100), v89), v92), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v97, v100), v89), v92)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v99, v100), v89), v92), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v95, v100), v89), v92))))), (int8x8_t)0x101010101010101);
              v90 += 8;
            }
            while (v841 != v90);
            v86 = v841;
            if (v23 == v841)
              goto LABEL_115;
            goto LABEL_114;
          }
        }
      }
      do
      {
LABEL_114:
        *((_BYTE *)v41 + v86) = ((v88[v86] >> v15) & v87) != v871;
        ++v86;
      }
      while (v23 != v86);
      goto LABEL_115;
    }
    memset(v41, v871 != 0, v23);
LABEL_115:
    memset(v883, 0, sizeof(v883));
    __src = 0u;
LABEL_143:
    v8 = v857;
    v26 = v861;
    v853 = v101;
    if (!v101 && *((_QWORD *)&__src + 1) < *(_QWORD *)(v861 + 8))
    {
      *(_OWORD *)v861 = __src;
      *(_OWORD *)(v861 + 16) = v883[0];
      *(_OWORD *)(v861 + 28) = *(_OWORD *)((char *)v883 + 12);
      v136 = *(_OWORD *)(v857 + 72);
      *(_OWORD *)(v857 + 72) = *(_OWORD *)(v857 + 48);
      *(_OWORD *)(v857 + 48) = v136;
      v137 = *(_QWORD *)(v857 + 88);
      *(_QWORD *)(v857 + 88) = *(_QWORD *)(v857 + 64);
      *(_QWORD *)(v857 + 64) = v137;
    }
    v22 = v860;
    v23 = v870;
    LOBYTE(v9) = v858[0];
    v15 = v865;
    if ((v858[0] & 2) != 0)
      goto LABEL_147;
LABEL_63:
    v63 = v872;
    if ((v9 & 4) == 0)
      goto LABEL_324;
LABEL_311:
    v364 = *(mgcl::muid **)v8;
    v363 = *(mgcl::muid **)(v8 + 8);
    if (v363 != *(mgcl::muid **)v8)
    {
      *(_QWORD *)(v8 + 8) = v364;
      v363 = v364;
    }
    __src = 0uLL;
    *(_QWORD *)&v883[0] = v8;
    if (v23)
    {
      v365 = ~(-1 << v63);
      do
      {
        if ((_DWORD)v872)
        {
          v366 = *v22;
          if (v872 <= 0x3F)
            v366 = (v366 >> v15) & v365;
        }
        else
        {
          v366 = 0;
        }
        geo::WriteBitstream::writeVariableInt((geo::WriteBitstream *)&__src, v366 - v871);
        ++v22;
        --v23;
      }
      while (v23);
      v364 = *(mgcl::muid **)v8;
      v363 = *(mgcl::muid **)(v8 + 8);
      v22 = v860;
      v23 = v870;
      v63 = v872;
    }
    v367 = v363 - v364;
    if ((unint64_t)(v363 - v364) < *(_QWORD *)(v26 + 8))
    {
      v368 = *(_OWORD *)(v8 + 72);
      *(_QWORD *)(v8 + 72) = v364;
      *(_QWORD *)(v8 + 80) = v363;
      *(_OWORD *)v8 = v368;
      v369 = *(_QWORD *)(v8 + 88);
      *(_QWORD *)(v8 + 88) = *(_QWORD *)(v8 + 16);
      *(_QWORD *)(v8 + 16) = v369;
      *(_BYTE *)v26 = 3;
      *(_QWORD *)(v26 + 8) = v367;
      *(_QWORD *)(v26 + 16) = v63;
      *(_QWORD *)(v26 + 24) = v871;
      *(_QWORD *)(v26 + 32) = 0;
      *(_DWORD *)(v26 + 40) = 0;
    }
LABEL_324:
    if ((v9 & 8) == 0 || v63 > 0x20)
      goto LABEL_870;
    v370 = *(mgcl::muid **)v8;
    v371 = *(mgcl::muid **)(v8 + 8);
    v372 = (unint64_t)v371 - *(_QWORD *)v8;
    v373 = v852 >= v372;
    v374 = v852 - v372;
    if (v852 > v372)
    {
      v375 = *(_QWORD *)(v8 + 16);
      if (v375 - (uint64_t)v371 >= v374)
      {
        bzero(*(void **)(v8 + 8), v852 - v372);
        *(_QWORD *)(v8 + 8) = (char *)v371 + v374;
        v23 = v870;
        v9 = *(_QWORD *)v858;
        goto LABEL_358;
      }
      if ((v852 & 0x8000000000000000) != 0)
LABEL_893:
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v376 = v375 - (_QWORD)v370;
      v377 = 2 * v376;
      if (2 * v376 <= v852)
        v377 = v852;
      if (v376 >= 0x3FFFFFFFFFFFFFFFLL)
        v378 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v378 = v377;
      v379 = (mgcl::muid *)operator new(v378);
      v380 = (char *)v379 + v372;
      bzero((char *)v379 + v372, v374);
      if (v371 == v370)
      {
        v23 = v870;
        v9 = *(_QWORD *)v858;
        v15 = v865;
        goto LABEL_356;
      }
      if (v372 < 8)
      {
        v9 = *(_QWORD *)v858;
        v15 = v865;
        goto LABEL_353;
      }
      v9 = *(_QWORD *)v858;
      v15 = v865;
      if ((unint64_t)(v370 - v379) >= 0x20)
      {
        if (v372 < 0x20)
        {
          v381 = 0;
          goto LABEL_348;
        }
        v381 = v372 & 0xFFFFFFFFFFFFFFE0;
        v382 = (char *)v379 + v372 - 16;
        v383 = (char *)v371 - 16;
        v384 = v372 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v385 = *(_OWORD *)v383;
          *((_OWORD *)v382 - 1) = *((_OWORD *)v383 - 1);
          *(_OWORD *)v382 = v385;
          v382 -= 32;
          v383 -= 32;
          v384 -= 32;
        }
        while (v384);
        if (v372 == v381)
          goto LABEL_355;
        if ((v372 & 0x18) != 0)
        {
LABEL_348:
          v380 -= v372 & 0xFFFFFFFFFFFFFFF8;
          v386 = (char *)v379 + (mgcl::muid *)((char *)v371 - v381) - v370 - 8;
          v387 = (char *)v371 - v381 - 8;
          v388 = v381 - (v372 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v389 = *(_QWORD *)v387;
            v387 -= 8;
            *(_QWORD *)v386 = v389;
            v386 -= 8;
            v388 += 8;
          }
          while (v388);
          v371 = (mgcl::muid *)((char *)v371 - (v372 & 0xFFFFFFFFFFFFFFF8));
          if (v372 == (v372 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_355;
          goto LABEL_353;
        }
        v380 -= v381;
        v371 = (mgcl::muid *)((char *)v371 - v381);
      }
LABEL_353:
      v390 = v380 - 1;
      do
      {
        v391 = *((_BYTE *)v371 - 1);
        v371 = (mgcl::muid *)((char *)v371 - 1);
        *v390-- = v391;
      }
      while (v371 != v370);
LABEL_355:
      v371 = v370;
      v380 = (char *)v379;
      v23 = v870;
LABEL_356:
      v392 = (char *)v379 + v378;
      v393 = (char *)v379 + v852;
      v8 = v857;
      *(_QWORD *)v857 = v380;
      *(_QWORD *)(v857 + 8) = v393;
      *(_QWORD *)(v857 + 16) = v392;
      v22 = v860;
      if (v371)
        operator delete(v371);
      goto LABEL_358;
    }
    v23 = v870;
    v9 = *(_QWORD *)v858;
    if (!v373)
      *(_QWORD *)(v8 + 8) = (char *)v370 + v852;
LABEL_358:
    v394 = *(geo **)v8;
    v26 = v861;
    if (!v23)
      goto LABEL_374;
    if (!(_DWORD)v872)
    {
      v401 = -(int)v871;
      if (v23 >= 8)
      {
        v403 = vdupq_n_s32(v401);
        v404 = (int32x4_t *)((char *)v394 + 16);
        v405 = v841;
        do
        {
          v404[-1] = v403;
          *v404 = v403;
          v404 += 2;
          v405 -= 8;
        }
        while (v405);
        v402 = v841;
        if (v23 == v841)
          goto LABEL_374;
      }
      else
      {
        v402 = 0;
      }
      v406 = v23 - v402;
      v407 = (unsigned int *)((char *)v394 + 4 * v402);
      do
      {
        *v407++ = v401;
        --v406;
      }
      while (v406);
      goto LABEL_374;
    }
    v395 = ~(-1 << v872);
    if (v23 < 8 || v394 < (geo *)v843 && v22 < (unsigned __int8 *)v394 + v852)
    {
      v396 = 0;
      goto LABEL_364;
    }
    v469 = (int8x16_t)vdupq_n_s64(v395);
    if (v23 >= 0x10)
    {
      v485 = vdupq_n_s64(v15);
      v486 = vdupq_n_s64(v871);
      v487 = v842;
      v488 = *(int32x4_t **)v8;
      v489 = (uint8x16_t *)v22;
      do
      {
        v490 = *v489++;
        v491 = vmovl_high_u8(v490);
        v492 = vmovl_high_u16(v491);
        v493.i64[0] = v492.u32[2];
        v493.i64[1] = v492.u32[3];
        v494 = v493;
        v493.i64[0] = v492.u32[0];
        v493.i64[1] = v492.u32[1];
        v495 = v493;
        v496 = vmovl_u8(*(uint8x8_t *)v490.i8);
        v497 = vmovl_u16(*(uint16x4_t *)v496.i8);
        v493.i64[0] = v497.u32[0];
        v493.i64[1] = v497.u32[1];
        v498 = v493;
        v493.i64[0] = v497.u32[2];
        v493.i64[1] = v497.u32[3];
        v499 = v493;
        v500 = vmovl_high_u16(v496);
        v493.i64[0] = v500.u32[0];
        v493.i64[1] = v500.u32[1];
        v501 = v493;
        v493.i64[0] = v500.u32[2];
        v493.i64[1] = v500.u32[3];
        v502 = v493;
        v503 = vmovl_u16(*(uint16x4_t *)v491.i8);
        v493.i64[0] = v503.u32[0];
        v493.i64[1] = v503.u32[1];
        v504 = v493;
        v493.i64[0] = v503.u32[2];
        v493.i64[1] = v503.u32[3];
        v505 = (uint64x2_t)vnegq_s64(v485);
        *v488 = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v498, v505), v469), v486), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v499, v505), v469), v486));
        v488[1] = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v501, v505), v469), v486), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v502, v505), v469), v486));
        v488[2] = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v504, v505), v469), v486), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v493, v505), v469), v486));
        v488[3] = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v495, v505), v469), v486), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v494, v505), v469), v486));
        v488 += 4;
        v487 -= 16;
      }
      while (v487);
      if (v23 == v842)
        goto LABEL_374;
      v396 = v842;
      v470 = v842;
      if ((v23 & 8) == 0)
      {
LABEL_364:
        v397 = v23 - v396;
        v398 = (_DWORD *)((char *)v394 + 4 * v396);
        v399 = &v22[v396];
        do
        {
          v400 = *v399++;
          *v398++ = ((v400 >> v15) & v395) - v871;
          --v397;
        }
        while (v397);
        goto LABEL_374;
      }
    }
    else
    {
      v470 = 0;
    }
    v471 = vdupq_n_s64(v15);
    v472 = vdupq_n_s64(v871);
    v473 = (uint8x8_t *)&v22[v470];
    v474 = (int32x4_t *)((char *)v394 + 4 * v470);
    v475 = v837 + v470;
    do
    {
      v476 = *v473++;
      v477 = vmovl_u8(v476);
      v478 = vmovl_u16(*(uint16x4_t *)v477.i8);
      v479.i64[0] = v478.u32[0];
      v479.i64[1] = v478.u32[1];
      v480 = v479;
      v479.i64[0] = v478.u32[2];
      v479.i64[1] = v478.u32[3];
      v481 = v479;
      v482 = vmovl_high_u16(v477);
      v479.i64[0] = v482.u32[0];
      v479.i64[1] = v482.u32[1];
      v483 = v479;
      v479.i64[0] = v482.u32[2];
      v479.i64[1] = v482.u32[3];
      v484 = (uint64x2_t)vnegq_s64(v471);
      *v474 = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v480, v484), v469), v472), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v481, v484), v469), v472));
      v474[1] = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v483, v484), v469), v472), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v479, v484), v469), v472));
      v474 += 2;
      v475 += 8;
    }
    while (v475);
    v396 = v841;
    if (v23 != v841)
      goto LABEL_364;
LABEL_374:
    v869 = v394;
    if ((v9 & 0x400000000) == 0)
      goto LABEL_485;
    v408 = *(_QWORD *)(v8 + 24);
    if (*(_QWORD *)(v8 + 32) != v408)
      *(_QWORD *)(v8 + 32) = v408;
    __src = 0uLL;
    *(_QWORD *)&v883[0] = v854;
    v409 = operator new();
    *(_QWORD *)v409 = 0;
    *(_QWORD *)(v409 + 8) = 0;
    *(_DWORD *)(v409 + 24) = 0;
    *(_QWORD *)(v409 + 16) = 0;
    *(_QWORD *)&__src = v409;
    v410 = operator new(2uLL);
    *(_QWORD *)v409 = v410;
    *v410 = 0;
    *(_BYTE *)v410++ = (v38 + 31) & 0x10;
    *(_QWORD *)(v409 + 8) = v410;
    *(_QWORD *)(v409 + 16) = v410;
    *(_DWORD *)(v409 + 24) = 3;
    v411 = __src;
    v412 = (*(_DWORD *)(__src + 24) + 1);
    *(_DWORD *)(__src + 24) = v412;
    *(_BYTE *)(*(_QWORD *)v411 + (v412 >> 3)) |= (((v38 + 31) >> 3) & 1) << (~(_BYTE)v412 & 7);
    v413 = (*(_DWORD *)(v411 + 24) + 1);
    *(_DWORD *)(v411 + 24) = v413;
    *(_BYTE *)(*(_QWORD *)v411 + (v413 >> 3)) |= (((v38 + 31) >> 2) & 1) << (~(_BYTE)v413 & 7);
    v414 = (*(_DWORD *)(v411 + 24) + 1);
    *(_DWORD *)(v411 + 24) = v414;
    *(_BYTE *)(*(_QWORD *)v411 + (v414 >> 3)) |= (((v38 + 31) >> 1) & 1) << (~(_BYTE)v414 & 7);
    v415 = (*(_DWORD *)(v411 + 24) + 1);
    *(_DWORD *)(v411 + 24) = v415;
    *(_BYTE *)(*(_QWORD *)v411 + (v415 >> 3)) |= ((v38 + 31) & 1) << (~(_BYTE)v415 & 7);
    v416 = *(_DWORD *)(v411 + 24) + 1;
    *(_DWORD *)(v411 + 24) = v416;
    v417 = v870;
    if (v870)
    {
      v418 = 0;
      v419 = v38;
      v420 = 64 - v38;
      v421 = (unint64_t)v38 >> 3;
      if ((v38 & 7) != 0)
        ++v421;
      v867 = v421;
      v422 = -(uint64_t)v38;
      do
      {
        v423 = *((unsigned int *)v394 + v418);
        v424 = v419 + v416;
        if ((v424 & 7) != 0)
          v425 = (v424 >> 3) + 1;
        else
          v425 = v424 >> 3;
        v427 = *(char **)v411;
        v426 = *(char **)(v411 + 8);
        v428 = (unint64_t)&v426[-*(_QWORD *)v411];
        if (v428 >= v425)
          goto LABEL_417;
        v873 = v423;
        v429 = v420;
        v430 = v419;
        v431 = 2 * (v867 + v428);
        v432 = v431 - v428;
        if (v431 <= v428)
        {
          v419 = v430;
          v420 = v429;
          v423 = v873;
          if (v431 < v428)
            *(_QWORD *)(v411 + 8) = &v427[v431];
          goto LABEL_416;
        }
        v433 = *(_QWORD *)(v411 + 16);
        if (v433 - (uint64_t)v426 >= v432)
        {
          bzero(v426, v431 - v428);
          *(_QWORD *)(v411 + 8) = &v426[v432];
          v419 = v430;
          v420 = v429;
          v423 = v873;
          goto LABEL_416;
        }
        v434 = v433 - (_QWORD)v427;
        v435 = 2 * v434;
        if (2 * v434 <= v431)
          v435 = 2 * (v867 + v428);
        if (v434 >= 0x3FFFFFFFFFFFFFFFLL)
          v436 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v436 = v435;
        v437 = v436;
        v863 = (char *)operator new(v436);
        v862 = &v863[v428];
        bzero(&v863[v428], v432);
        if (v426 == v427)
        {
          v419 = v430;
          v420 = v429;
          v423 = v873;
          *(_QWORD *)v411 = v862;
          *(_QWORD *)(v411 + 8) = &v863[2 * v867 + 2 * v428];
          *(_QWORD *)(v411 + 16) = &v863[v437];
          if (!v426)
            goto LABEL_416;
LABEL_415:
          operator delete(v426);
          goto LABEL_416;
        }
        if (v428 < 8)
        {
          v419 = v430;
          v420 = v429;
          v423 = v873;
          v438 = 2 * (v867 + v428);
          v440 = &v863[v428];
          v439 = v863;
          goto LABEL_412;
        }
        v440 = &v863[v428];
        v439 = v863;
        v419 = v430;
        v420 = v429;
        v423 = v873;
        v438 = 2 * (v867 + v428);
        if ((unint64_t)(v427 - v863) < 0x20)
          goto LABEL_412;
        if (v428 >= 0x20)
        {
          v441 = v428 & 0xFFFFFFFFFFFFFFE0;
          v442 = &v863[v428 - 16];
          v443 = v426 - 16;
          v444 = v428 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v445 = *(_OWORD *)v443;
            *((_OWORD *)v442 - 1) = *((_OWORD *)v443 - 1);
            *(_OWORD *)v442 = v445;
            v442 -= 32;
            v443 -= 32;
            v444 -= 32;
          }
          while (v444);
          if (v428 == v441)
            goto LABEL_414;
          if ((v428 & 0x18) == 0)
          {
            v440 = &v862[-v441];
            v426 -= v441;
LABEL_412:
            v450 = v440 - 1;
            do
            {
              v451 = *--v426;
              *v450-- = v451;
            }
            while (v426 != v427);
            goto LABEL_414;
          }
        }
        else
        {
          v441 = 0;
        }
        v440 = &v862[-(v428 & 0xFFFFFFFFFFFFFFF8)];
        v446 = &v863[&v426[-v441] - v427 - 8];
        v447 = &v426[-v441 - 8];
        v448 = v441 - (v428 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v449 = *(_QWORD *)v447;
          v447 -= 8;
          *(_QWORD *)v446 = v449;
          v446 -= 8;
          v448 += 8;
        }
        while (v448);
        v426 -= v428 & 0xFFFFFFFFFFFFFFF8;
        if (v428 != (v428 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_412;
LABEL_414:
        v426 = v427;
        *(_QWORD *)v411 = v439;
        *(_QWORD *)(v411 + 8) = &v439[v438];
        *(_QWORD *)(v411 + 16) = &v439[v437];
        if (v427)
          goto LABEL_415;
LABEL_416:
        v411 = __src;
        bzero((void *)(v428 + *(_QWORD *)__src), *(_QWORD *)(__src + 8) - (v428 + *(_QWORD *)__src));
        v416 = *(_DWORD *)(v411 + 24);
        v417 = v870;
LABEL_417:
        v452 = 0;
        v394 = v869;
        do
        {
          *(_BYTE *)(*(_QWORD *)v411 + ((unint64_t)v416 >> 3)) |= (((unint64_t)(v423 << v420) >> (v452 + 63)) & 1) << (~(_BYTE)v416 & 7);
          v416 = *(_DWORD *)(v411 + 24) + 1;
          *(_DWORD *)(v411 + 24) = v416;
          --v452;
        }
        while (v422 != v452);
        ++v418;
      }
      while (v418 != v417);
    }
    if ((v416 & 7) != 0)
      v453 = 8 - (v416 & 7);
    else
      v453 = 0;
    v454 = v453 + v416;
    if ((v454 & 7) != 0)
      v455 = (v454 >> 3) + 1;
    else
      v455 = v454 >> 3;
    v456 = *(char **)v411;
    v457 = *(char **)(v411 + 8);
    v458 = (unint64_t)&v457[-*(_QWORD *)v411];
    if (v458 < v455)
    {
      v459 = v458 + (v453 >> 3);
      if ((v453 & 7) != 0)
        ++v459;
      v460 = 2 * v459;
      v461 = 2 * v459 - v458;
      v15 = v865;
      if (2 * v459 <= v458)
      {
        if (2 * v459 < v458)
          *(_QWORD *)(v411 + 8) = &v456[v460];
        goto LABEL_472;
      }
      v462 = *(_QWORD *)(v411 + 16);
      if (v462 - (uint64_t)v457 >= v461)
      {
        bzero(*(void **)(v411 + 8), v461);
        *(_QWORD *)(v411 + 8) = &v457[v461];
        goto LABEL_472;
      }
      v463 = v462 - (_QWORD)v456;
      v464 = 2 * v463;
      if (2 * v463 <= v460)
        v464 = v460;
      if (v463 >= 0x3FFFFFFFFFFFFFFFLL)
        v465 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v465 = v464;
      v466 = v465;
      v467 = operator new(v465);
      v874 = &v467[v458];
      bzero(&v467[v458], v461);
      if (v457 == v456)
      {
        *(_QWORD *)v411 = v874;
        *(_QWORD *)(v411 + 8) = &v467[v460];
        *(_QWORD *)(v411 + 16) = &v467[v466];
        v394 = v869;
        if (!v457)
          goto LABEL_472;
        goto LABEL_471;
      }
      if (v458 < 8)
      {
        v468 = &v467[v458];
        goto LABEL_468;
      }
      v468 = &v467[v458];
      if ((unint64_t)(v456 - v467) >= 0x20)
      {
        if (v458 < 0x20)
        {
          v506 = 0;
          goto LABEL_463;
        }
        v506 = v458 & 0xFFFFFFFFFFFFFFE0;
        v507 = &v467[v458 - 16];
        v508 = v457 - 16;
        v509 = v458 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v510 = *(_OWORD *)v508;
          *(v507 - 1) = *((_OWORD *)v508 - 1);
          *v507 = v510;
          v507 -= 2;
          v508 -= 32;
          v509 -= 32;
        }
        while (v509);
        if (v458 == v506)
          goto LABEL_470;
        if ((v458 & 0x18) != 0)
        {
LABEL_463:
          v468 = &v874[-(v458 & 0xFFFFFFFFFFFFFFF8)];
          v511 = &v467[&v457[-v506] - v456 - 8];
          v512 = &v457[-v506 - 8];
          v513 = v506 - (v458 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v514 = *(_QWORD *)v512;
            v512 -= 8;
            *v511-- = v514;
            v513 += 8;
          }
          while (v513);
          v457 -= v458 & 0xFFFFFFFFFFFFFFF8;
          if (v458 != (v458 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_468;
LABEL_470:
          v457 = v456;
          *(_QWORD *)v411 = v467;
          *(_QWORD *)(v411 + 8) = &v467[v460];
          *(_QWORD *)(v411 + 16) = &v467[v466];
          v394 = v869;
          if (v456)
LABEL_471:
            operator delete(v457);
LABEL_472:
          v411 = __src;
          bzero((void *)(v458 + *(_QWORD *)__src), *(_QWORD *)(__src + 8) - (v458 + *(_QWORD *)__src));
          v416 = *(_DWORD *)(v411 + 24);
          v456 = *(char **)v411;
          goto LABEL_473;
        }
        v468 = &v874[-v506];
        v457 -= v506;
      }
LABEL_468:
      v515 = v468 - 1;
      do
      {
        v516 = *--v457;
        *v515-- = v516;
      }
      while (v457 != v456);
      goto LABEL_470;
    }
    v15 = v865;
LABEL_473:
    v517 = v416 + v453;
    *(_DWORD *)(v411 + 24) = v517;
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(*(uint64_t *)&v883[0], *(char **)(*(_QWORD *)&v883[0] + 8), v456, &v456[v517 >> 3], v517 >> 3);
    *(_QWORD *)&__src = 0;
    v518 = *(char **)v411;
    if (*(_QWORD *)v411)
    {
      *(_QWORD *)(v411 + 8) = v518;
      operator delete(v518);
    }
    MEMORY[0x18D76437C](v411, 0x1010C40A6F07D10);
    v8 = v857;
    v520 = *(_QWORD *)(v857 + 24);
    v519 = *(_QWORD *)(v857 + 32);
    v521 = v519 - v520;
    v26 = v861;
    if ((unint64_t)(v519 - v520) < *(_QWORD *)(v861 + 8))
    {
      v522 = *(_OWORD *)(v857 + 72);
      *(_QWORD *)(v857 + 72) = v520;
      *(_QWORD *)(v857 + 80) = v519;
      *(_OWORD *)(v857 + 24) = v522;
      v523 = *(_QWORD *)(v857 + 88);
      *(_QWORD *)(v857 + 88) = *(_QWORD *)(v857 + 40);
      *(_QWORD *)(v857 + 40) = v523;
      *(_BYTE *)v861 = 4;
      *(_QWORD *)(v861 + 8) = v521;
      *(_QWORD *)(v861 + 16) = v872;
      *(_QWORD *)(v861 + 24) = v871;
      *(_DWORD *)(v861 + 40) = 0;
      *(_QWORD *)(v861 + 32) = 0;
    }
    v524 = *((_QWORD *)&__src + 1);
    v11 = v847;
    v23 = v870;
    v9 = *(_QWORD *)v858;
    if (*((_QWORD *)&__src + 1))
    {
      v525 = (void *)**((_QWORD **)&__src + 1);
      if (**((_QWORD **)&__src + 1))
      {
        *(_QWORD *)(*((_QWORD *)&__src + 1) + 8) = v525;
        operator delete(v525);
      }
      MEMORY[0x18D76437C](v524, 0x10C402FEFCB83);
    }
    v526 = __src;
    if ((_QWORD)__src)
    {
      v527 = *(void **)__src;
      if (*(_QWORD *)__src)
      {
        *(_QWORD *)(__src + 8) = v527;
        operator delete(v527);
      }
      MEMORY[0x18D76437C](v526, 0x1010C40A6F07D10);
    }
LABEL_485:
    if ((v9 & 0x800000000) == 0)
      goto LABEL_706;
    if (v23)
    {
      v528 = 0;
      v529 = -1;
      v530 = -1;
      do
      {
        v532 = 0;
        v531 = 0;
        v533 = v528++;
        v534 = 1;
        while (1)
        {
          v535 = (*((_DWORD *)v394 + v532) >> v533) + v528;
          if (__CFADD__(v531, v535))
            break;
          v531 += v535;
          v532 = v534++;
          if (v23 <= v532)
            goto LABEL_489;
        }
        v531 = -1;
LABEL_489:
        if (v531 < v530)
        {
          v530 = v531;
          v529 = v533;
        }
      }
      while (v528 != 32);
    }
    else
    {
      v529 = 0;
    }
    v864 = v529;
    v536 = *(_QWORD *)(v8 + 24);
    if (*(_QWORD *)(v8 + 32) != v536)
      *(_QWORD *)(v8 + 32) = v536;
    __src = 0uLL;
    *(_QWORD *)&v883[0] = v854;
    v537 = operator new();
    *(_QWORD *)v537 = 0;
    *(_QWORD *)(v537 + 8) = 0;
    *(_DWORD *)(v537 + 24) = 0;
    *(_QWORD *)(v537 + 16) = 0;
    *(_QWORD *)&__src = v537;
    v538 = operator new(2uLL);
    *(_QWORD *)v537 = v538;
    *v538 = 0;
    *(_BYTE *)v538++ = 32;
    *(_QWORD *)(v537 + 8) = v538;
    *(_QWORD *)(v537 + 16) = v538;
    *(_DWORD *)(v537 + 24) = 2;
    v539 = __src;
    v540 = (*(_DWORD *)(__src + 24) + 1);
    *(_DWORD *)(__src + 24) = v540;
    if (((v540 + 5) & 7) != 0)
      v541 = ((unint64_t)(v540 + 5) >> 3) + 1;
    else
      v541 = (unint64_t)(v540 + 5) >> 3;
    v542 = *(char **)v539;
    v543 = *(char **)(v539 + 8);
    v544 = (unint64_t)&v543[-*(_QWORD *)v539];
    if (v544 >= v541)
      goto LABEL_535;
    v545 = 2 * v544 + 2;
    v546 = v545 - v544;
    if (v545 <= v544)
    {
      if (v545 < v544)
      {
        v543 = &v542[v545];
        *(_QWORD *)(v539 + 8) = &v542[v545];
      }
      goto LABEL_534;
    }
    v547 = *(_QWORD *)(v539 + 16);
    if (v547 - (uint64_t)v543 < v546)
    {
      v548 = v547 - (_QWORD)v542;
      v549 = 2 * v548;
      if (2 * v548 <= v545)
        v549 = 2 * v544 + 2;
      if (v548 >= 0x3FFFFFFFFFFFFFFFLL)
        v550 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v550 = v549;
      v551 = (char *)operator new(v550);
      v552 = &v551[v544];
      bzero(&v551[v544], v545 - v544);
      if (v543 == v542)
      {
        v542 = v543;
        goto LABEL_532;
      }
      if (v544 >= 8 && (unint64_t)(v542 - v551) >= 0x20)
      {
        if (v544 < 0x20)
        {
          v553 = 0;
          goto LABEL_524;
        }
        v553 = v544 & 0xFFFFFFFFFFFFFFE0;
        v554 = &v551[v544 - 16];
        v555 = v543 - 16;
        v556 = v544 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v557 = *(_OWORD *)v555;
          *((_OWORD *)v554 - 1) = *((_OWORD *)v555 - 1);
          *(_OWORD *)v554 = v557;
          v554 -= 32;
          v555 -= 32;
          v556 -= 32;
        }
        while (v556);
        if (v544 == v553)
          goto LABEL_531;
        if ((v544 & 0x18) != 0)
        {
LABEL_524:
          v552 -= v544 & 0xFFFFFFFFFFFFFFF8;
          v558 = &v551[&v543[-v553] - v542 - 8];
          v559 = &v543[-v553 - 8];
          v560 = v553 - (v544 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v561 = *(_QWORD *)v559;
            v559 -= 8;
            *(_QWORD *)v558 = v561;
            v558 -= 8;
            v560 += 8;
          }
          while (v560);
          v543 -= v544 & 0xFFFFFFFFFFFFFFF8;
          if (v544 == (v544 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_531;
          goto LABEL_529;
        }
        v552 -= v553;
        v543 -= v553;
      }
LABEL_529:
      v562 = v552 - 1;
      do
      {
        v563 = *--v543;
        *v562-- = v563;
      }
      while (v543 != v542);
LABEL_531:
      v552 = v551;
LABEL_532:
      v543 = &v551[v545];
      *(_QWORD *)v539 = v552;
      *(_QWORD *)(v539 + 8) = &v551[v545];
      *(_QWORD *)(v539 + 16) = &v551[v550];
      if (v542)
      {
        operator delete(v542);
        v543 = *(char **)(v539 + 8);
      }
      goto LABEL_534;
    }
    bzero(*(void **)(v539 + 8), v545 - v544);
    *(_QWORD *)(v539 + 8) = &v543[v546];
    v543 += v546;
LABEL_534:
    bzero((void *)(v544 + *(_QWORD *)v539), (size_t)&v543[-v544 - *(_QWORD *)v539]);
    LODWORD(v540) = *(_DWORD *)(v539 + 24);
    v542 = *(char **)v539;
LABEL_535:
    LOBYTE(v564) = v864;
    v542[(unint64_t)v540 >> 3] |= ((v864 >> 4) & 1) << (~(_BYTE)v540 & 7);
    v565 = (*(_DWORD *)(v539 + 24) + 1);
    *(_DWORD *)(v539 + 24) = v565;
    *(_BYTE *)(*(_QWORD *)v539 + (v565 >> 3)) |= ((v864 >> 3) & 1) << (~(_BYTE)v565 & 7);
    v566 = (*(_DWORD *)(v539 + 24) + 1);
    *(_DWORD *)(v539 + 24) = v566;
    *(_BYTE *)(*(_QWORD *)v539 + (v566 >> 3)) |= ((v864 >> 2) & 1) << (~(_BYTE)v566 & 7);
    v567 = (*(_DWORD *)(v539 + 24) + 1);
    *(_DWORD *)(v539 + 24) = v567;
    *(_BYTE *)(*(_QWORD *)v539 + (v567 >> 3)) |= ((v864 >> 1) & 1) << (~(_BYTE)v567 & 7);
    v568 = (*(_DWORD *)(v539 + 24) + 1);
    *(_DWORD *)(v539 + 24) = v568;
    *(_BYTE *)(*(_QWORD *)v539 + (v568 >> 3)) |= (v864 & 1) << (~(_BYTE)v568 & 7);
    v569 = *(_DWORD *)(v539 + 24) + 1;
    *(_DWORD *)(v539 + 24) = v569;
    if (!v870)
      goto LABEL_653;
    v570 = 0;
    v571 = (unint64_t)v864 >> 3;
    if ((v864 & 7) != 0)
      ++v571;
    v859 = v571;
    do
    {
      v868 = v570;
      v866 = *((_DWORD *)v869 + v570);
      v572 = v866 >> v564;
      v573 = *(_DWORD *)(v539 + 24);
      v875 = v866 >> v564;
      if (v866 >> v564)
      {
        v574 = 0;
        while (1)
        {
          v576 = v573 + 1;
          if ((v576 & 7) != 0)
            v577 = (v576 >> 3) + 1;
          else
            v577 = v576 >> 3;
          v575 = *(char **)v539;
          v578 = *(char **)(v539 + 8);
          v579 = (unint64_t)&v578[-*(_QWORD *)v539];
          if (v579 >= v577)
            goto LABEL_544;
          v580 = 2 * v579 + 2;
          v581 = v580 - v579;
          if (v580 <= v579)
          {
            if (v580 < v579)
              *(_QWORD *)(v539 + 8) = &v575[v580];
            goto LABEL_543;
          }
          v582 = *(_QWORD *)(v539 + 16);
          if (v582 - (uint64_t)v578 < v581)
            break;
          bzero(*(void **)(v539 + 8), v580 - v579);
          *(_QWORD *)(v539 + 8) = &v578[v581];
          v572 = v875;
LABEL_543:
          v539 = __src;
          bzero((void *)(v579 + *(_QWORD *)__src), *(_QWORD *)(__src + 8) - (v579 + *(_QWORD *)__src));
          v573 = *(_DWORD *)(v539 + 24);
          v575 = *(char **)v539;
LABEL_544:
          v575[(unint64_t)v573 >> 3] |= 1 << (~(_BYTE)v573 & 7);
          v573 = *(_DWORD *)(v539 + 24) + 1;
          *(_DWORD *)(v539 + 24) = v573;
          if (++v574 == v572)
            goto LABEL_577;
        }
        v583 = v582 - (_QWORD)v575;
        v584 = 2 * v583;
        if (2 * v583 <= v580)
          v584 = 2 * v579 + 2;
        if (v583 >= 0x3FFFFFFFFFFFFFFFLL)
          v585 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v585 = v584;
        v586 = (char *)operator new(v585);
        v587 = &v586[v579];
        bzero(&v586[v579], v580 - v579);
        if (v578 == v575)
        {
LABEL_575:
          *(_QWORD *)v539 = v587;
          *(_QWORD *)(v539 + 8) = &v586[v580];
          *(_QWORD *)(v539 + 16) = &v586[v585];
          v572 = v875;
          if (v578)
            operator delete(v578);
          goto LABEL_543;
        }
        if (v579 >= 8 && (unint64_t)(v575 - v586) >= 0x20)
        {
          if (v579 < 0x20)
          {
            v588 = 0;
            goto LABEL_567;
          }
          v588 = v579 & 0xFFFFFFFFFFFFFFE0;
          v589 = &v586[v579 - 16];
          v590 = v578 - 16;
          v591 = v579 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v592 = *(_OWORD *)v590;
            *((_OWORD *)v589 - 1) = *((_OWORD *)v590 - 1);
            *(_OWORD *)v589 = v592;
            v589 -= 32;
            v590 -= 32;
            v591 -= 32;
          }
          while (v591);
          if (v579 == v588)
            goto LABEL_574;
          if ((v579 & 0x18) != 0)
          {
LABEL_567:
            v587 -= v579 & 0xFFFFFFFFFFFFFFF8;
            v593 = &v586[&v578[-v588] - v575 - 8];
            v594 = &v578[-v588 - 8];
            v595 = v588 - (v579 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v596 = *(_QWORD *)v594;
              v594 -= 8;
              *(_QWORD *)v593 = v596;
              v593 -= 8;
              v595 += 8;
            }
            while (v595);
            v578 -= v579 & 0xFFFFFFFFFFFFFFF8;
            if (v579 == (v579 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_574;
            goto LABEL_572;
          }
          v587 -= v588;
          v578 -= v588;
        }
LABEL_572:
        v597 = v587 - 1;
        do
        {
          v598 = *--v578;
          *v597-- = v598;
        }
        while (v578 != v575);
LABEL_574:
        v578 = v575;
        v587 = v586;
        goto LABEL_575;
      }
LABEL_577:
      v599 = v573 + 1;
      if ((v599 & 7) != 0)
        v600 = (v599 >> 3) + 1;
      else
        v600 = v599 >> 3;
      v601 = *(char **)v539;
      v602 = *(char **)(v539 + 8);
      v603 = (unint64_t)&v602[-*(_QWORD *)v539];
      if (v603 < v600)
      {
        v604 = 2 * v603 + 2;
        v605 = v604 - v603;
        if (v604 <= v603)
        {
          if (v604 < v603)
            *(_QWORD *)(v539 + 8) = &v601[v604];
          goto LABEL_610;
        }
        v606 = *(_QWORD *)(v539 + 16);
        if (v606 - (uint64_t)v602 >= v605)
        {
          bzero(*(void **)(v539 + 8), v604 - v603);
          *(_QWORD *)(v539 + 8) = &v602[v605];
LABEL_610:
          v539 = __src;
          bzero((void *)(v603 + *(_QWORD *)__src), *(_QWORD *)(__src + 8) - (v603 + *(_QWORD *)__src));
          v573 = *(_DWORD *)(v539 + 24);
          v601 = *(char **)v539;
          v602 = *(char **)(v539 + 8);
          v603 = (unint64_t)&v602[-*(_QWORD *)v539];
          goto LABEL_611;
        }
        v607 = v606 - (_QWORD)v601;
        v608 = 2 * v607;
        if (2 * v607 <= v604)
          v608 = 2 * v603 + 2;
        if (v607 >= 0x3FFFFFFFFFFFFFFFLL)
          v609 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v609 = v608;
        v610 = (char *)operator new(v609);
        v611 = &v610[v603];
        bzero(&v610[v603], v604 - v603);
        if (v602 == v601)
        {
LABEL_608:
          *(_QWORD *)v539 = v611;
          *(_QWORD *)(v539 + 8) = &v610[v604];
          *(_QWORD *)(v539 + 16) = &v610[v609];
          if (v602)
            operator delete(v602);
          goto LABEL_610;
        }
        if (v603 >= 8 && (unint64_t)(v601 - v610) >= 0x20)
        {
          if (v603 < 0x20)
          {
            v612 = 0;
            goto LABEL_600;
          }
          v612 = v603 & 0xFFFFFFFFFFFFFFE0;
          v613 = &v610[v603 - 16];
          v614 = v602 - 16;
          v615 = v603 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v616 = *(_OWORD *)v614;
            *((_OWORD *)v613 - 1) = *((_OWORD *)v614 - 1);
            *(_OWORD *)v613 = v616;
            v613 -= 32;
            v614 -= 32;
            v615 -= 32;
          }
          while (v615);
          if (v603 == v612)
            goto LABEL_607;
          if ((v603 & 0x18) != 0)
          {
LABEL_600:
            v611 -= v603 & 0xFFFFFFFFFFFFFFF8;
            v617 = &v610[&v602[-v612] - v601 - 8];
            v618 = &v602[-v612 - 8];
            v619 = v612 - (v603 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v620 = *(_QWORD *)v618;
              v618 -= 8;
              *(_QWORD *)v617 = v620;
              v617 -= 8;
              v619 += 8;
            }
            while (v619);
            v602 -= v603 & 0xFFFFFFFFFFFFFFF8;
            if (v603 == (v603 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_607;
            goto LABEL_605;
          }
          v611 -= v612;
          v602 -= v612;
        }
LABEL_605:
        v621 = v611 - 1;
        do
        {
          v622 = *--v602;
          *v621-- = v622;
        }
        while (v602 != v601);
LABEL_607:
        v602 = v601;
        v611 = v610;
        goto LABEL_608;
      }
LABEL_611:
      v623 = v573 + 1;
      *(_DWORD *)(v539 + 24) = v623;
      v624 = v623 + v864;
      if ((v624 & 7) != 0)
        v625 = (v624 >> 3) + 1;
      else
        v625 = v624 >> 3;
      if (v603 >= v625)
      {
        v638 = v870;
        v15 = v865;
        v639 = v868;
        v640 = -(uint64_t)v864;
        v564 = v864;
        v641 = v875;
        if (!v864)
          goto LABEL_539;
        goto LABEL_637;
      }
      v626 = 2 * (v859 + v603);
      v627 = v626 - v603;
      v15 = v865;
      if (v626 > v603)
      {
        v628 = *(_QWORD *)(v539 + 16);
        if (v628 - (uint64_t)v602 >= v627)
        {
          bzero(v602, v626 - v603);
          *(_QWORD *)(v539 + 8) = &v602[v627];
          goto LABEL_636;
        }
        v629 = v628 - (_QWORD)v601;
        v630 = 2 * v629;
        if (2 * v629 <= v626)
          v630 = 2 * (v859 + v603);
        if (v629 >= 0x3FFFFFFFFFFFFFFFLL)
          v631 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v631 = v630;
        v632 = (char *)operator new(v631);
        v633 = &v632[v603];
        bzero(&v632[v603], v626 - v603);
        v634 = v602 - v601;
        if (v602 == v601)
          goto LABEL_629;
        if (v634 < 8 || (unint64_t)(&v602[-v603] - v632) < 0x20)
        {
          v635 = v602;
          goto LABEL_626;
        }
        if (v634 >= 0x20)
        {
          v645 = v634 & 0xFFFFFFFFFFFFFFE0;
          v646 = &v632[v603 - 16];
          v647 = v602 - 16;
          v648 = v634 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v649 = *(_OWORD *)v647;
            *((_OWORD *)v646 - 1) = *((_OWORD *)v647 - 1);
            *(_OWORD *)v646 = v649;
            v646 -= 32;
            v647 -= 32;
            v648 -= 32;
          }
          while (v648);
          if (v634 == v645)
            goto LABEL_628;
          if ((v634 & 0x18) == 0)
          {
            v633 -= v645;
            v635 = &v602[-v645];
LABEL_626:
            v636 = v633 - 1;
            do
            {
              v637 = *--v635;
              *v636-- = v637;
            }
            while (v635 != v601);
LABEL_628:
            v633 = v632;
LABEL_629:
            *(_QWORD *)v539 = v633;
            *(_QWORD *)(v539 + 8) = &v632[v626];
            *(_QWORD *)(v539 + 16) = &v632[v631];
            if (v601)
              operator delete(v601);
            goto LABEL_636;
          }
        }
        else
        {
          v645 = 0;
        }
        v635 = &v602[-(v634 & 0xFFFFFFFFFFFFFFF8)];
        v633 -= v634 & 0xFFFFFFFFFFFFFFF8;
        v650 = &v632[v603 - v645 - 8];
        v651 = &v602[-v645 - 8];
        v652 = v645 - (v634 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v653 = *(_QWORD *)v651;
          v651 -= 8;
          *(_QWORD *)v650 = v653;
          v650 -= 8;
          v652 += 8;
        }
        while (v652);
        if (v634 == (v634 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_628;
        goto LABEL_626;
      }
      if (v626 < v603)
        *(_QWORD *)(v539 + 8) = &v601[v626];
LABEL_636:
      v539 = __src;
      bzero((void *)(v603 + *(_QWORD *)__src), *(_QWORD *)(__src + 8) - (v603 + *(_QWORD *)__src));
      v638 = v870;
      v639 = v868;
      v640 = -(uint64_t)v864;
      v564 = v864;
      v641 = v875;
      if (!v864)
        goto LABEL_539;
LABEL_637:
      v642 = (unint64_t)(v866 - (v641 << v564)) << (64 - v864);
      *(_BYTE *)(*(_QWORD *)v539 + ((unint64_t)*(unsigned int *)(v539 + 24) >> 3)) |= v642 >> 63 << (~*(_DWORD *)(v539 + 24) & 7);
      v643 = *(_DWORD *)(v539 + 24) + 1;
      *(_DWORD *)(v539 + 24) = v643;
      if (v564 != 1)
      {
        v644 = -1;
        do
        {
          *(_BYTE *)(*(_QWORD *)v539 + ((unint64_t)v643 >> 3)) |= ((v642 >> (v644 + 63)) & 1) << (~(_BYTE)v643 & 7);
          v643 = *(_DWORD *)(v539 + 24) + 1;
          *(_DWORD *)(v539 + 24) = v643;
          --v644;
        }
        while (v640 != v644);
      }
LABEL_539:
      v570 = v639 + 1;
    }
    while (v570 != v638);
    v569 = *(_DWORD *)(v539 + 24);
LABEL_653:
    if ((v569 & 7) != 0)
      v654 = 8 - (v569 & 7);
    else
      v654 = 0;
    v655 = v654 + v569;
    if ((v655 & 7) != 0)
      v656 = (v655 >> 3) + 1;
    else
      v656 = v655 >> 3;
    v657 = *(char **)v539;
    v658 = *(char **)(v539 + 8);
    v659 = (unint64_t)&v658[-*(_QWORD *)v539];
    v394 = v869;
    if (v659 < v656)
    {
      v660 = v659 + (v654 >> 3);
      if ((v654 & 7) != 0)
        ++v660;
      v661 = 2 * v660;
      v662 = 2 * v660 - v659;
      if (2 * v660 <= v659)
      {
        if (2 * v660 < v659)
          *(_QWORD *)(v539 + 8) = &v657[v661];
      }
      else
      {
        v663 = *(_QWORD *)(v539 + 16);
        if (v663 - (uint64_t)v658 >= v662)
        {
          bzero(*(void **)(v539 + 8), v662);
          *(_QWORD *)(v539 + 8) = &v658[v662];
        }
        else
        {
          v664 = v663 - (_QWORD)v657;
          v665 = 2 * v664;
          if (2 * v664 <= v661)
            v665 = v661;
          if (v664 >= 0x3FFFFFFFFFFFFFFFLL)
            v666 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v666 = v665;
          v667 = v666;
          v668 = operator new(v666);
          v876 = &v668[v659];
          bzero(&v668[v659], v662);
          if (v658 == v657)
          {
            *(_QWORD *)v539 = v876;
            *(_QWORD *)(v539 + 8) = &v668[v661];
            *(_QWORD *)(v539 + 16) = &v668[v667];
            v394 = v869;
            if (v658)
              goto LABEL_692;
          }
          else
          {
            if (v659 < 8)
            {
              v669 = &v668[v659];
              goto LABEL_689;
            }
            v669 = &v668[v659];
            if ((unint64_t)(v657 - v668) < 0x20)
              goto LABEL_689;
            if (v659 >= 0x20)
            {
              v670 = v659 & 0xFFFFFFFFFFFFFFE0;
              v671 = &v668[v659 - 16];
              v672 = v658 - 16;
              v673 = v659 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v674 = *(_OWORD *)v672;
                *(v671 - 1) = *((_OWORD *)v672 - 1);
                *v671 = v674;
                v671 -= 2;
                v672 -= 32;
                v673 -= 32;
              }
              while (v673);
              if (v659 != v670)
              {
                if ((v659 & 0x18) == 0)
                {
                  v669 = &v876[-v670];
                  v658 -= v670;
                  goto LABEL_689;
                }
                goto LABEL_684;
              }
            }
            else
            {
              v670 = 0;
LABEL_684:
              v669 = &v876[-(v659 & 0xFFFFFFFFFFFFFFF8)];
              v675 = &v668[&v658[-v670] - v657 - 8];
              v676 = &v658[-v670 - 8];
              v677 = v670 - (v659 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v678 = *(_QWORD *)v676;
                v676 -= 8;
                *v675-- = v678;
                v677 += 8;
              }
              while (v677);
              v658 -= v659 & 0xFFFFFFFFFFFFFFF8;
              if (v659 != (v659 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_689:
                v679 = v669 - 1;
                do
                {
                  v680 = *--v658;
                  *v679-- = v680;
                }
                while (v658 != v657);
              }
            }
            v658 = v657;
            *(_QWORD *)v539 = v668;
            *(_QWORD *)(v539 + 8) = &v668[v661];
            *(_QWORD *)(v539 + 16) = &v668[v667];
            v394 = v869;
            if (v657)
LABEL_692:
              operator delete(v658);
          }
        }
      }
      v539 = __src;
      bzero((void *)(v659 + *(_QWORD *)__src), *(_QWORD *)(__src + 8) - (v659 + *(_QWORD *)__src));
      v569 = *(_DWORD *)(v539 + 24);
      v657 = *(char **)v539;
    }
    v681 = v569 + v654;
    *(_DWORD *)(v539 + 24) = v681;
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(*(uint64_t *)&v883[0], *(char **)(*(_QWORD *)&v883[0] + 8), v657, &v657[v681 >> 3], v681 >> 3);
    *(_QWORD *)&__src = 0;
    v682 = *(char **)v539;
    if (*(_QWORD *)v539)
    {
      *(_QWORD *)(v539 + 8) = v682;
      operator delete(v682);
    }
    MEMORY[0x18D76437C](v539, 0x1010C40A6F07D10);
    v8 = v857;
    v9 = *(_QWORD *)v858;
    v684 = *(_QWORD *)(v857 + 24);
    v683 = *(_QWORD *)(v857 + 32);
    v685 = v683 - v684;
    v26 = v861;
    v11 = v847;
    if ((unint64_t)(v683 - v684) < *(_QWORD *)(v861 + 8))
    {
      v686 = *(_OWORD *)(v857 + 72);
      *(_QWORD *)(v857 + 72) = v684;
      *(_QWORD *)(v857 + 80) = v683;
      *(_OWORD *)(v857 + 24) = v686;
      v687 = *(_QWORD *)(v857 + 88);
      *(_QWORD *)(v857 + 88) = *(_QWORD *)(v857 + 40);
      *(_QWORD *)(v857 + 40) = v687;
      *(_BYTE *)v861 = 4;
      *(_QWORD *)(v861 + 8) = v685;
      *(_QWORD *)(v861 + 16) = v872;
      *(_QWORD *)(v861 + 24) = v871;
      *(_DWORD *)(v861 + 40) = 0;
      *(_QWORD *)(v861 + 32) = 1;
    }
    v688 = *((_QWORD *)&__src + 1);
    v23 = v870;
    if (*((_QWORD *)&__src + 1))
    {
      v689 = (void *)**((_QWORD **)&__src + 1);
      if (**((_QWORD **)&__src + 1))
      {
        *(_QWORD *)(*((_QWORD *)&__src + 1) + 8) = v689;
        operator delete(v689);
      }
      MEMORY[0x18D76437C](v688, 0x10C402FEFCB83);
    }
    v690 = __src;
    if ((_QWORD)__src)
    {
      v691 = *(void **)__src;
      if (*(_QWORD *)__src)
      {
        *(_QWORD *)(__src + 8) = v691;
        operator delete(v691);
      }
      MEMORY[0x18D76437C](v690, 0x1010C40A6F07D10);
    }
LABEL_706:
    if ((v9 & 0x1000000000) == 0)
      goto LABEL_870;
    v880 = geo::computeRiceParam2(v394, v23, v13, v14);
    v881 = v692;
    v693 = *(_QWORD *)(v857 + 24);
    if (*(_QWORD *)(v857 + 32) != v693)
      *(_QWORD *)(v857 + 32) = v693;
    __src = 0uLL;
    *(_QWORD *)&v883[0] = v854;
    v694 = operator new();
    *(_QWORD *)v694 = 0;
    *(_QWORD *)(v694 + 8) = 0;
    *(_DWORD *)(v694 + 24) = 0;
    *(_QWORD *)(v694 + 16) = 0;
    *(_QWORD *)&__src = v694;
    v695 = operator new(2uLL);
    *(_QWORD *)v694 = v695;
    *v695 = 0;
    *(_BYTE *)v695++ = 64;
    *(_QWORD *)(v694 + 8) = v695;
    *(_QWORD *)(v694 + 16) = v695;
    *(_DWORD *)(v694 + 24) = 1;
    v696 = __src;
    v697 = (*(_DWORD *)(__src + 24) + 2);
    *(_DWORD *)(__src + 24) = v697;
    v698 = v880;
    if (((v697 + 5) & 7) != 0)
      v699 = ((unint64_t)(v697 + 5) >> 3) + 1;
    else
      v699 = (unint64_t)(v697 + 5) >> 3;
    v700 = *(char **)v696;
    v701 = *(char **)(v696 + 8);
    v702 = (unint64_t)&v701[-*(_QWORD *)v696];
    if (v702 >= v699)
      goto LABEL_745;
    v703 = 2 * v702 + 2;
    v704 = v703 - v702;
    if (v703 <= v702)
    {
      if (v703 < v702)
      {
        v701 = &v700[v703];
        *(_QWORD *)(v696 + 8) = &v700[v703];
      }
      goto LABEL_744;
    }
    v705 = *(_QWORD *)(v696 + 16);
    if (v705 - (uint64_t)v701 >= v704)
    {
      bzero(*(void **)(v696 + 8), v703 - v702);
      *(_QWORD *)(v696 + 8) = &v701[v704];
      v701 += v704;
      goto LABEL_744;
    }
    v706 = v705 - (_QWORD)v700;
    v707 = 2 * v706;
    if (2 * v706 <= v703)
      v707 = 2 * v702 + 2;
    if (v706 >= 0x3FFFFFFFFFFFFFFFLL)
      v708 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v708 = v707;
    v709 = operator new(v708);
    v710 = &v709[v702];
    bzero(&v709[v702], v703 - v702);
    if (v701 == v700)
    {
      v700 = v701;
      v701 = &v709[v703];
      *(_QWORD *)v696 = v710;
      *(_QWORD *)(v696 + 8) = &v709[v703];
      *(_QWORD *)(v696 + 16) = &v709[v708];
      if (v700)
        goto LABEL_743;
      goto LABEL_744;
    }
    if (v702 < 8 || (unint64_t)(v700 - v709) < 0x20)
      goto LABEL_740;
    if (v702 >= 0x20)
    {
      v711 = v702 & 0xFFFFFFFFFFFFFFE0;
      v712 = &v709[v702 - 16];
      v713 = v701 - 16;
      v714 = v702 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v715 = *(_OWORD *)v713;
        *(v712 - 1) = *((_OWORD *)v713 - 1);
        *v712 = v715;
        v712 -= 2;
        v713 -= 32;
        v714 -= 32;
      }
      while (v714);
      if (v702 == v711)
        goto LABEL_742;
      if ((v702 & 0x18) != 0)
        goto LABEL_735;
      v710 -= v711;
      v701 -= v711;
LABEL_740:
      v720 = v710 - 1;
      do
      {
        v721 = *--v701;
        *v720-- = v721;
      }
      while (v701 != v700);
      goto LABEL_742;
    }
    v711 = 0;
LABEL_735:
    v710 -= v702 & 0xFFFFFFFFFFFFFFF8;
    v716 = &v709[&v701[-v711] - v700 - 8];
    v717 = &v701[-v711 - 8];
    v718 = v711 - (v702 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v719 = *(_QWORD *)v717;
      v717 -= 8;
      *v716-- = v719;
      v718 += 8;
    }
    while (v718);
    v701 -= v702 & 0xFFFFFFFFFFFFFFF8;
    if (v702 != (v702 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_740;
LABEL_742:
    v701 = &v709[v703];
    *(_QWORD *)v696 = v709;
    *(_QWORD *)(v696 + 8) = &v709[v703];
    *(_QWORD *)(v696 + 16) = &v709[v708];
    if (v700)
    {
LABEL_743:
      operator delete(v700);
      v701 = *(char **)(v696 + 8);
    }
LABEL_744:
    bzero((void *)(v702 + *(_QWORD *)v696), (size_t)&v701[-v702 - *(_QWORD *)v696]);
    LODWORD(v697) = *(_DWORD *)(v696 + 24);
    v700 = *(char **)v696;
LABEL_745:
    v700[(unint64_t)v697 >> 3] |= ((v698 >> 4) & 1) << (~(_BYTE)v697 & 7);
    v722 = (*(_DWORD *)(v696 + 24) + 1);
    *(_DWORD *)(v696 + 24) = v722;
    *(_BYTE *)(*(_QWORD *)v696 + (v722 >> 3)) |= ((v698 >> 3) & 1) << (~(_BYTE)v722 & 7);
    v723 = (*(_DWORD *)(v696 + 24) + 1);
    *(_DWORD *)(v696 + 24) = v723;
    *(_BYTE *)(*(_QWORD *)v696 + (v723 >> 3)) |= ((v698 >> 2) & 1) << (~(_BYTE)v723 & 7);
    v724 = (*(_DWORD *)(v696 + 24) + 1);
    *(_DWORD *)(v696 + 24) = v724;
    *(_BYTE *)(*(_QWORD *)v696 + (v724 >> 3)) |= ((v698 >> 1) & 1) << (~(_BYTE)v724 & 7);
    v725 = (*(_DWORD *)(v696 + 24) + 1);
    *(_DWORD *)(v696 + 24) = v725;
    *(_BYTE *)(*(_QWORD *)v696 + (v725 >> 3)) |= (v698 & 1) << (~(_BYTE)v725 & 7);
    v726 = (*(_DWORD *)(v696 + 24) + 1);
    *(_DWORD *)(v696 + 24) = v726;
    v727 = HIDWORD(v880);
    if (((v726 + 5) & 7) != 0)
      v728 = ((unint64_t)(v726 + 5) >> 3) + 1;
    else
      v728 = (unint64_t)(v726 + 5) >> 3;
    v730 = *(char **)v696;
    v729 = *(char **)(v696 + 8);
    v731 = (unint64_t)&v729[-*(_QWORD *)v696];
    if (v731 >= v728)
    {
      v740 = __src;
      v741 = (unsigned int *)v869;
      goto LABEL_782;
    }
    v732 = 2 * v731 + 2;
    v733 = v732 - v731;
    if (v732 <= v731)
    {
      v741 = (unsigned int *)v869;
      if (v732 < v731)
        *(_QWORD *)(v696 + 8) = &v730[v732];
      goto LABEL_781;
    }
    v734 = *(_QWORD *)(v696 + 16);
    if (v734 - (uint64_t)v729 >= v733)
    {
      bzero(*(void **)(v696 + 8), v732 - v731);
      *(_QWORD *)(v696 + 8) = &v729[v733];
      v741 = (unsigned int *)v869;
      goto LABEL_781;
    }
    v735 = v734 - (_QWORD)v730;
    v736 = 2 * v735;
    if (2 * v735 <= v732)
      v736 = 2 * v731 + 2;
    if (v735 >= 0x3FFFFFFFFFFFFFFFLL)
      v737 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v737 = v736;
    v738 = (char *)operator new(v737);
    v739 = &v738[v731];
    bzero(&v738[v731], v732 - v731);
    if (v729 == v730)
    {
      *(_QWORD *)v696 = v739;
      *(_QWORD *)(v696 + 8) = &v738[v732];
      *(_QWORD *)(v696 + 16) = &v738[v737];
      v741 = (unsigned int *)v869;
      if (v729)
        goto LABEL_780;
      goto LABEL_781;
    }
    if (v731 < 8 || (unint64_t)(v730 - v738) < 0x20)
      goto LABEL_777;
    if (v731 >= 0x20)
    {
      v742 = v731 & 0xFFFFFFFFFFFFFFE0;
      v743 = &v738[v731 - 16];
      v744 = v729 - 16;
      v745 = v731 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v746 = *(_OWORD *)v744;
        *((_OWORD *)v743 - 1) = *((_OWORD *)v744 - 1);
        *(_OWORD *)v743 = v746;
        v743 -= 32;
        v744 -= 32;
        v745 -= 32;
      }
      while (v745);
      if (v731 == v742)
        goto LABEL_779;
      if ((v731 & 0x18) != 0)
        goto LABEL_772;
      v739 -= v742;
      v729 -= v742;
LABEL_777:
      v751 = v739 - 1;
      do
      {
        v752 = *--v729;
        *v751-- = v752;
      }
      while (v729 != v730);
      goto LABEL_779;
    }
    v742 = 0;
LABEL_772:
    v739 -= v731 & 0xFFFFFFFFFFFFFFF8;
    v747 = &v738[&v729[-v742] - v730 - 8];
    v748 = &v729[-v742 - 8];
    v749 = v742 - (v731 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v750 = *(_QWORD *)v748;
      v748 -= 8;
      *(_QWORD *)v747 = v750;
      v747 -= 8;
      v749 += 8;
    }
    while (v749);
    v729 -= v731 & 0xFFFFFFFFFFFFFFF8;
    if (v731 != (v731 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_777;
LABEL_779:
    v729 = v730;
    *(_QWORD *)v696 = v738;
    *(_QWORD *)(v696 + 8) = &v738[v732];
    *(_QWORD *)(v696 + 16) = &v738[v737];
    v741 = (unsigned int *)v869;
    if (v730)
LABEL_780:
      operator delete(v729);
LABEL_781:
    v740 = __src;
    bzero((void *)(v731 + *(_QWORD *)__src), *(_QWORD *)(__src + 8) - (v731 + *(_QWORD *)__src));
    LODWORD(v726) = *(_DWORD *)(v740 + 24);
    v730 = *(char **)v740;
LABEL_782:
    v730[(unint64_t)v726 >> 3] |= ((v727 >> 4) & 1) << (~(_BYTE)v726 & 7);
    v753 = (*(_DWORD *)(v740 + 24) + 1);
    *(_DWORD *)(v740 + 24) = v753;
    *(_BYTE *)(*(_QWORD *)v740 + (v753 >> 3)) |= ((v727 >> 3) & 1) << (~(_BYTE)v753 & 7);
    v754 = (*(_DWORD *)(v740 + 24) + 1);
    *(_DWORD *)(v740 + 24) = v754;
    *(_BYTE *)(*(_QWORD *)v740 + (v754 >> 3)) |= ((v727 >> 2) & 1) << (~(_BYTE)v754 & 7);
    v755 = (*(_DWORD *)(v740 + 24) + 1);
    *(_DWORD *)(v740 + 24) = v755;
    *(_BYTE *)(*(_QWORD *)v740 + (v755 >> 3)) |= ((v727 >> 1) & 1) << (~(_BYTE)v755 & 7);
    v756 = (*(_DWORD *)(v740 + 24) + 1);
    *(_DWORD *)(v740 + 24) = v756;
    *(_BYTE *)(*(_QWORD *)v740 + (v756 >> 3)) |= (v727 & 1) << (~(_BYTE)v756 & 7);
    v757 = (*(_DWORD *)(v740 + 24) + 1);
    *(_DWORD *)(v740 + 24) = v757;
    v758 = v881;
    if (((v757 + 5) & 7) != 0)
      v759 = ((unint64_t)(v757 + 5) >> 3) + 1;
    else
      v759 = (unint64_t)(v757 + 5) >> 3;
    v761 = *(char **)v740;
    v760 = *(char **)(v740 + 8);
    v762 = (unint64_t)&v760[-*(_QWORD *)v740];
    if (v762 >= v759)
    {
      v771 = __src;
      goto LABEL_819;
    }
    v763 = 2 * v762 + 2;
    v764 = v763 - v762;
    if (v763 <= v762)
    {
      if (v763 < v762)
        *(_QWORD *)(v740 + 8) = &v761[v763];
      goto LABEL_818;
    }
    v765 = *(_QWORD *)(v740 + 16);
    if (v765 - (uint64_t)v760 >= v764)
    {
      bzero(*(void **)(v740 + 8), v763 - v762);
      *(_QWORD *)(v740 + 8) = &v760[v764];
      goto LABEL_818;
    }
    v766 = v765 - (_QWORD)v761;
    v767 = 2 * v766;
    if (2 * v766 <= v763)
      v767 = 2 * v762 + 2;
    if (v766 >= 0x3FFFFFFFFFFFFFFFLL)
      v768 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v768 = v767;
    v769 = (char *)operator new(v768);
    v770 = &v769[v762];
    bzero(&v769[v762], v763 - v762);
    if (v760 == v761)
    {
      *(_QWORD *)v740 = v770;
      *(_QWORD *)(v740 + 8) = &v769[v763];
      *(_QWORD *)(v740 + 16) = &v769[v768];
      v741 = (unsigned int *)v869;
      if (v760)
        goto LABEL_817;
      goto LABEL_818;
    }
    if (v762 < 8 || (unint64_t)(v761 - v769) < 0x20)
      goto LABEL_814;
    if (v762 >= 0x20)
    {
      v772 = v762 & 0xFFFFFFFFFFFFFFE0;
      v773 = &v769[v762 - 16];
      v774 = v760 - 16;
      v775 = v762 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v776 = *(_OWORD *)v774;
        *((_OWORD *)v773 - 1) = *((_OWORD *)v774 - 1);
        *(_OWORD *)v773 = v776;
        v773 -= 32;
        v774 -= 32;
        v775 -= 32;
      }
      while (v775);
      if (v762 == v772)
        goto LABEL_816;
      if ((v762 & 0x18) != 0)
        goto LABEL_809;
      v770 -= v772;
      v760 -= v772;
LABEL_814:
      v781 = v770 - 1;
      do
      {
        v782 = *--v760;
        *v781-- = v782;
      }
      while (v760 != v761);
      goto LABEL_816;
    }
    v772 = 0;
LABEL_809:
    v770 -= v762 & 0xFFFFFFFFFFFFFFF8;
    v777 = &v769[&v760[-v772] - v761 - 8];
    v778 = &v760[-v772 - 8];
    v779 = v772 - (v762 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v780 = *(_QWORD *)v778;
      v778 -= 8;
      *(_QWORD *)v777 = v780;
      v777 -= 8;
      v779 += 8;
    }
    while (v779);
    v760 -= v762 & 0xFFFFFFFFFFFFFFF8;
    if (v762 != (v762 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_814;
LABEL_816:
    v760 = v761;
    *(_QWORD *)v740 = v769;
    *(_QWORD *)(v740 + 8) = &v769[v763];
    *(_QWORD *)(v740 + 16) = &v769[v768];
    v741 = (unsigned int *)v869;
    if (v761)
LABEL_817:
      operator delete(v760);
LABEL_818:
    v771 = __src;
    bzero((void *)(v762 + *(_QWORD *)__src), *(_QWORD *)(__src + 8) - (v762 + *(_QWORD *)__src));
    LODWORD(v757) = *(_DWORD *)(v771 + 24);
    v761 = *(char **)v771;
LABEL_819:
    v761[(unint64_t)v757 >> 3] |= ((v758 >> 4) & 1) << (~(_BYTE)v757 & 7);
    v783 = (*(_DWORD *)(v771 + 24) + 1);
    *(_DWORD *)(v771 + 24) = v783;
    *(_BYTE *)(*(_QWORD *)v771 + (v783 >> 3)) |= ((v758 >> 3) & 1) << (~(_BYTE)v783 & 7);
    v784 = (*(_DWORD *)(v771 + 24) + 1);
    *(_DWORD *)(v771 + 24) = v784;
    *(_BYTE *)(*(_QWORD *)v771 + (v784 >> 3)) |= ((v758 >> 2) & 1) << (~(_BYTE)v784 & 7);
    v785 = (*(_DWORD *)(v771 + 24) + 1);
    *(_DWORD *)(v771 + 24) = v785;
    *(_BYTE *)(*(_QWORD *)v771 + (v785 >> 3)) |= ((v758 >> 1) & 1) << (~(_BYTE)v785 & 7);
    v786 = (*(_DWORD *)(v771 + 24) + 1);
    *(_DWORD *)(v771 + 24) = v786;
    *(_BYTE *)(*(_QWORD *)v771 + (v786 >> 3)) |= (v758 & 1) << (~(_BYTE)v786 & 7);
    v787 = *(_DWORD *)(v771 + 24) + 1;
    *(_DWORD *)(v771 + 24) = v787;
    v788 = v870;
    if (v870)
    {
      do
      {
        v789 = *v741++;
        geo::WriteBitstream::packRice2((void ***)&__src, v789, &v880);
        --v788;
      }
      while (v788);
      v787 = *(_DWORD *)(v771 + 24);
    }
    if ((v787 & 7) != 0)
      v790 = 8 - (v787 & 7);
    else
      v790 = 0;
    v791 = v790 + v787;
    if ((v791 & 7) != 0)
      v792 = (v791 >> 3) + 1;
    else
      v792 = v791 >> 3;
    v793 = *(char **)v771;
    v794 = *(char **)(v771 + 8);
    v795 = (unint64_t)&v794[-*(_QWORD *)v771];
    if (v795 >= v792)
      goto LABEL_862;
    v796 = v795 + (v790 >> 3);
    if ((v790 & 7) != 0)
      ++v796;
    v797 = 2 * v796;
    v798 = 2 * v796 - v795;
    if (2 * v796 <= v795)
    {
      if (2 * v796 < v795)
      {
        v794 = &v793[v797];
        *(_QWORD *)(v771 + 8) = &v793[v797];
      }
      goto LABEL_861;
    }
    v799 = *(_QWORD *)(v771 + 16);
    if (v799 - (uint64_t)v794 >= v798)
    {
      bzero(*(void **)(v771 + 8), v798);
      *(_QWORD *)(v771 + 8) = &v794[v798];
      v794 += v798;
      goto LABEL_861;
    }
    v800 = v799 - (_QWORD)v793;
    v801 = 2 * v800;
    if (2 * v800 <= v797)
      v801 = v797;
    if (v800 >= 0x3FFFFFFFFFFFFFFFLL)
      v802 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v802 = v801;
    v803 = operator new(v802);
    v804 = &v803[v795];
    bzero(&v803[v795], v798);
    if (v794 == v793)
    {
      v793 = v794;
      v794 = &v803[v797];
      *(_QWORD *)v771 = v804;
      *(_QWORD *)(v771 + 8) = &v803[v797];
      *(_QWORD *)(v771 + 16) = &v803[v802];
      if (v793)
        goto LABEL_860;
      goto LABEL_861;
    }
    if (v795 < 8 || (unint64_t)(v793 - v803) < 0x20)
      goto LABEL_857;
    if (v795 >= 0x20)
    {
      v805 = v795 & 0xFFFFFFFFFFFFFFE0;
      v806 = &v803[v795 - 16];
      v807 = v794 - 16;
      v808 = v795 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v809 = *(_OWORD *)v807;
        *(v806 - 1) = *((_OWORD *)v807 - 1);
        *v806 = v809;
        v806 -= 2;
        v807 -= 32;
        v808 -= 32;
      }
      while (v808);
      if (v795 == v805)
        goto LABEL_859;
      if ((v795 & 0x18) != 0)
        goto LABEL_852;
      v804 -= v805;
      v794 -= v805;
LABEL_857:
      v814 = v804 - 1;
      do
      {
        v815 = *--v794;
        *v814-- = v815;
      }
      while (v794 != v793);
      goto LABEL_859;
    }
    v805 = 0;
LABEL_852:
    v804 -= v795 & 0xFFFFFFFFFFFFFFF8;
    v810 = &v803[&v794[-v805] - v793 - 8];
    v811 = &v794[-v805 - 8];
    v812 = v805 - (v795 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v813 = *(_QWORD *)v811;
      v811 -= 8;
      *v810-- = v813;
      v812 += 8;
    }
    while (v812);
    v794 -= v795 & 0xFFFFFFFFFFFFFFF8;
    if (v795 != (v795 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_857;
LABEL_859:
    v794 = &v803[v797];
    *(_QWORD *)v771 = v803;
    *(_QWORD *)(v771 + 8) = &v803[v797];
    *(_QWORD *)(v771 + 16) = &v803[v802];
    if (v793)
    {
LABEL_860:
      operator delete(v793);
      v794 = *(char **)(v771 + 8);
    }
LABEL_861:
    bzero((void *)(v795 + *(_QWORD *)v771), (size_t)&v794[-v795 - *(_QWORD *)v771]);
    v787 = *(_DWORD *)(v771 + 24);
    v793 = *(char **)v771;
LABEL_862:
    v816 = v787 + v790;
    *(_DWORD *)(v771 + 24) = v816;
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(*(uint64_t *)&v883[0], *(char **)(*(_QWORD *)&v883[0] + 8), v793, &v793[v816 >> 3], v816 >> 3);
    *(_QWORD *)&__src = 0;
    v817 = *(char **)v771;
    if (*(_QWORD *)v771)
    {
      *(_QWORD *)(v771 + 8) = v817;
      operator delete(v817);
    }
    MEMORY[0x18D76437C](v771, 0x1010C40A6F07D10);
    v8 = v857;
    LOBYTE(v9) = v858[0];
    v819 = *(_QWORD *)(v857 + 24);
    v818 = *(_QWORD *)(v857 + 32);
    v820 = v818 - v819;
    v26 = v861;
    v11 = v847;
    v23 = v870;
    v15 = v865;
    if ((unint64_t)(v818 - v819) < *(_QWORD *)(v861 + 8))
    {
      v821 = *(_OWORD *)(v857 + 72);
      *(_QWORD *)(v857 + 72) = v819;
      *(_QWORD *)(v857 + 80) = v818;
      *(_OWORD *)(v857 + 24) = v821;
      v822 = *(_QWORD *)(v857 + 88);
      *(_QWORD *)(v857 + 88) = *(_QWORD *)(v857 + 40);
      *(_QWORD *)(v857 + 40) = v822;
      *(_BYTE *)v861 = 4;
      *(_QWORD *)(v861 + 8) = v820;
      *(_QWORD *)(v861 + 16) = v872;
      *(_QWORD *)(v861 + 24) = v871;
      *(_DWORD *)(v861 + 40) = 0;
      *(_QWORD *)(v861 + 32) = 2;
    }
    v823 = *((_QWORD *)&__src + 1);
    if (*((_QWORD *)&__src + 1))
    {
      v824 = (void *)**((_QWORD **)&__src + 1);
      if (**((_QWORD **)&__src + 1))
      {
        *(_QWORD *)(*((_QWORD *)&__src + 1) + 8) = v824;
        operator delete(v824);
      }
      MEMORY[0x18D76437C](v823, 0x10C402FEFCB83);
    }
LABEL_870:
    if (*(_BYTE *)v26)
    {
      LOBYTE(__src) = *(_BYTE *)v26;
      v825 = v879;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v879, *(char **)(v879 + 8), (char *)&__src, (char *)&__src + 1, 1);
      geo::WriteBitstream::writeVariableInt((geo::WriteBitstream *)&v877, *(_QWORD *)(v855 + 48 * v856 + 24));
      v826 = v855 + 48 * v856;
      geo::WriteBitstream::writeVariableInt((geo::WriteBitstream *)&v877, *(_QWORD *)(v826 + 8));
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v825, *(char **)(v825 + 8), *v850, &(*v850)[*(_QWORD *)(v826 + 8)], *(_QWORD *)(v826 + 8));
      v24 = v856 + 1;
      v20 = v840 + 2;
      v22 = v860;
      if (v856 + 1 == v849)
        goto LABEL_872;
      continue;
    }
    break;
  }
  if (v853)
    v827 = v853;
  else
    v827 = 6;
  v828 = v878;
  if (v878)
  {
LABEL_878:
    v829 = *(void **)v828;
    if (*(_QWORD *)v828)
    {
      *(_QWORD *)(v828 + 8) = v829;
      operator delete(v829);
    }
    MEMORY[0x18D76437C](v828, 0x10C402FEFCB83);
  }
LABEL_881:
  v830 = v877;
  if (v877)
  {
    v831 = *(void **)v877;
    if (*(_QWORD *)v877)
    {
      *(_QWORD *)(v877 + 8) = v831;
      operator delete(v831);
    }
    MEMORY[0x18D76437C](v830, 0x1010C40A6F07D10);
  }
  **(_DWORD **)v838 = v827;
  if (!v827)
  {
    v832 = *(uint64_t **)(v838 + 40);
    v833 = **(_QWORD **)(v838 + 48);
    if ((unint64_t)*v832 < *(_QWORD *)v833)
    {
      v834 = *v832;
      *(_BYTE *)(v833 + 8) = *((_BYTE *)v832 + 8);
      *(_QWORD *)v833 = v834;
      if ((uint64_t *)v833 != v832)
        std::vector<mgcl::ints::ColumnInfo>::__assign_with_size[abi:ne180100]<mgcl::ints::ColumnInfo*,mgcl::ints::ColumnInfo*>((_QWORD *)(v833 + 16), (char *)v832[2], (char *)v832[3], 0xAAAAAAAAAAAAAAABLL * ((v832[3] - v832[2]) >> 4));
      v835 = **(_QWORD **)(v838 + 48);
      *(_BYTE *)(v835 + 8) = BYTE4(v836);
      if (*(_QWORD *)v835 > **(_QWORD **)(v838 + 56))
        **(_DWORD **)v838 = 1;
      memcpy(**(void ***)(v838 + 64), *v11, **(_QWORD **)(v838 + 40));
    }
  }
}

void sub_189AD9C38(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::WriteBitstream::~WriteBitstream((geo::WriteBitstream *)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_189AD9C4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::WriteBitstream::~WriteBitstream((geo::WriteBitstream *)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_189AD9C60(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::WriteBitstream::~WriteBitstream((geo::WriteBitstream *)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_189AD9C74(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::WriteBitstream::~WriteBitstream((geo::WriteBitstream *)(v1 - 176));
  geo::WriteBitstream::~WriteBitstream((geo::WriteBitstream *)(v1 - 216));
  _Unwind_Resume(a1);
}

uint64_t mgcl::ints::IntCompressor<unsigned char>::gclVersionMajor()
{
  return 0;
}

uint64_t mgcl::ints::IntCompressor<unsigned char>::gclVersionMinor()
{
  return 2;
}

uint64_t mgcl::ints::IntCompressor<int>::compress(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  int *v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  int *v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  _QWORD v27[9];
  char v28;
  void *__p;
  void *v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  _DWORD __b[16];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v37 = a3;
  v38 = a2;
  v35 = a5;
  v36 = a4;
  v33 = a7;
  v34 = a6;
  v32 = 0;
  *a6 = -1;
  a6[3] = a6[2];
  if (a3)
  {
    if (a3 == 1)
    {
      v7 = a2;
      v8 = a2;
    }
    else
    {
      v8 = a2 + 1;
      v10 = a2[1];
      v11 = *a2;
      if (v10 >= *a2)
        v7 = a2;
      else
        v7 = a2 + 1;
      if (v10 < v11)
        v8 = a2;
      if (a3 != 2)
      {
        v12 = a2 + 2;
        if (v10 <= v11)
          v13 = *a2;
        else
          v13 = a2[1];
        if (v10 < v11)
          v11 = a2[1];
        v14 = 4 * a3 - 12;
        while (v14)
        {
          v17 = *v12;
          v16 = v12[1];
          if (v16 >= *v12)
          {
            if (v17 < v11)
            {
              v11 = *v12;
              v7 = v12;
            }
            v15 = v16 < v13;
            if (v16 > v13)
              v13 = v12[1];
            if (!v15)
              v8 = v12 + 1;
            v12 += 2;
            v14 -= 8;
            if (v14 == -4)
              goto LABEL_38;
          }
          else
          {
            v11 = *v7;
            if (v16 < *v7)
            {
              v11 = v12[1];
              v7 = v12 + 1;
            }
            v13 = *v8;
            if (v17 > *v8)
              v13 = *v12;
            if (v17 >= *v8)
              v8 = v12;
            v12 += 2;
            v14 -= 8;
            if (v14 == -4)
              goto LABEL_38;
          }
        }
        if (*v12 >= *v7)
        {
          if (*v12 >= *v8)
            v8 = v12;
        }
        else
        {
          v7 = v12;
        }
      }
    }
LABEL_38:
    v18 = *v7;
    if (v18 >= 0)
      v19 = v18;
    else
      v19 = -v18;
    v20 = 1;
    if (v19 >= 2)
    {
      do
      {
        ++v20;
        v15 = v19 > 3;
        v19 >>= 1;
      }
      while (v15);
    }
    v21 = *v8;
    if (v21 >= 0)
      v22 = v21;
    else
      v22 = -v21;
    v23 = 1;
    if (v22 >= 2)
    {
      do
      {
        ++v23;
        v15 = v22 > 3;
        v22 >>= 1;
      }
      while (v15);
    }
    if (v20 <= v23)
      v24 = v23;
    else
      v24 = v20;
    __p = 0;
    v30 = 0;
    v31 = 0;
    v27[0] = &v32;
    v27[1] = &v38;
    v27[2] = &v37;
    v27[3] = &v33;
    v27[4] = a1;
    v27[5] = &v28;
    v27[6] = &v34;
    v27[7] = &v35;
    v27[8] = &v36;
    if ((a7 & 0x100) != 0)
    {
      __b[0] = v24;
      mgcl::ints::IntCompressor<int>::compress(int const*,unsigned long,int const*,unsigned long,unsigned char *,unsigned long,mgcl::ints::BlobInfo *,unsigned long long)::{lambda(int const*,unsigned long,mgcl::ints::Tabulation)#1}::operator()((uint64_t)v27, (uint64_t)__b, 1uLL, 0);
      LOWORD(a7) = v33;
    }
    if ((a7 & 0x400) != 0 && v24 <= 0xF)
    {
      memset_pattern16(__b, &unk_189CFB2A0, 4 * v24);
      mgcl::ints::IntCompressor<int>::compress(int const*,unsigned long,int const*,unsigned long,unsigned char *,unsigned long,mgcl::ints::BlobInfo *,unsigned long long)::{lambda(int const*,unsigned long,mgcl::ints::Tabulation)#1}::operator()((uint64_t)v27, (uint64_t)__b, v24, 2);
    }
    v25 = v32;
    if (!v32)
      v25 = 6;
    if (*v34 == -1)
      v9 = v25;
    else
      v9 = 0;
    if (__p)
    {
      v30 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v9 = 0;
    *a6 = 0;
  }
  return v9;
}

void sub_189AD9F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void mgcl::ints::IntCompressor<int>::compress(int const*,unsigned long,int const*,unsigned long,unsigned char *,unsigned long,mgcl::ints::BlobInfo *,unsigned long long)::{lambda(int const*,unsigned long,mgcl::ints::Tabulation)#1}::operator()(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  int32x4_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unsigned int *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int32x4_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  size_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  size_t v52;
  char *v53;
  char *v54;
  mgcl::muid *v55;
  mgcl::muid *v56;
  unint64_t v57;
  size_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  size_t v62;
  mgcl::muid *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  unint64_t v73;
  __int128 v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  __int128 v82;
  char *v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  char v91;
  unint64_t v92;
  int8x16_t v93;
  unint64_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int32x4_t *v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  uint64x2_t v102;
  uint64x2_t v103;
  uint64x2_t v104;
  uint64x2_t v105;
  uint64x2_t v106;
  unint64_t v107;
  int64x2_t v108;
  uint32x4_t *v109;
  uint32x4_t v110;
  uint32x4_t v111;
  uint32x4_t v112;
  uint32x4_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int32x4_t *v120;
  int8x16_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  uint64x2_t v130;
  uint64x2_t v131;
  uint64x2_t v132;
  uint64x2_t v133;
  uint64x2_t v134;
  uint64x2_t v135;
  uint64x2_t v136;
  uint64x2_t v137;
  uint64x2_t v138;
  unint64_t v139;
  uint64_t v140;
  int64x2_t v141;
  uint32x4_t *v142;
  int8x16_t v143;
  uint32x4_t v144;
  uint32x4_t v145;
  uint32x4_t v146;
  uint32x4_t v147;
  uint32x4_t v148;
  uint32x4_t v149;
  uint32x4_t v150;
  uint32x4_t v151;
  int64x2_t v152;
  int64x2_t v153;
  int64x2_t v154;
  int64x2_t v155;
  int64x2_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int v160;
  char *v161;
  char v162;
  char *v163;
  unint64_t v164;
  int32x4_t v165;
  int32x4_t *v166;
  unint64_t v167;
  int32x4_t *v168;
  int32x4_t v169;
  unint64_t v170;
  uint64_t v171;
  char *v172;
  int *v173;
  int v174;
  int v175;
  unint64_t v176;
  unint64_t v177;
  int64x2_t v178;
  int8x16_t v179;
  int32x4_t *v180;
  unint64_t v181;
  int64x2_t v182;
  int32x4_t *v183;
  int32x4_t v184;
  int32x4_t v185;
  uint64x2_t v186;
  uint64x2_t v187;
  uint64x2_t v188;
  uint64x2_t v189;
  uint64x2_t v190;
  unint64_t v191;
  uint64_t v192;
  char *v193;
  int *v194;
  unint64_t v195;
  int v196;
  __int128 v197;
  uint64_t v198;
  mgcl::muid *v199;
  mgcl::muid *v200;
  unint64_t v201;
  BOOL v202;
  size_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  size_t v207;
  mgcl::muid *v208;
  char *v209;
  unint64_t v210;
  unint64_t v211;
  char *v212;
  char *v213;
  unint64_t v214;
  __int128 v215;
  char *v216;
  char *v217;
  unint64_t v218;
  uint64_t v219;
  char *v220;
  char v221;
  mgcl::muid *v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  int64x2_t v227;
  int64x2_t *v228;
  unint64_t v229;
  uint32x4_t *v230;
  uint32x4_t v231;
  uint32x4_t v232;
  int64x2_t v233;
  int64x2_t v234;
  int64x2_t v235;
  int64x2_t v236;
  unint64_t v237;
  _QWORD *v238;
  __int32 *v239;
  unsigned int v240;
  int64x2_t v241;
  int64x2_t *v242;
  unint64_t v243;
  int32x4_t *v244;
  int32x4_t v245;
  int32x4_t v246;
  int64x2_t v247;
  int64x2_t v248;
  int64x2_t v249;
  int64x2_t v250;
  unint64_t v251;
  _QWORD *v252;
  int *v253;
  uint64_t v254;
  int v255;
  int64x2_t v256;
  int8x16_t v257;
  int64x2_t *v258;
  unint64_t v259;
  int64x2_t v260;
  int32x4_t *v261;
  int32x4_t v262;
  int32x4_t v263;
  uint64x2_t v264;
  uint64x2_t v265;
  uint64x2_t v266;
  uint64x2_t v267;
  uint64x2_t v268;
  unint64_t v269;
  _QWORD *v270;
  int *v271;
  unint64_t v272;
  int v273;
  _BYTE *v274;
  char *v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  size_t v280;
  char *v281;
  char *v282;
  uint64_t v283;
  unint64_t v284;
  char *v285;
  char *v286;
  unint64_t v287;
  __int128 v288;
  char *v289;
  char *v290;
  unint64_t v291;
  uint64_t v292;
  char *v293;
  char v294;
  unint64_t v295;
  unint64_t v296;
  _BYTE *v297;
  _BYTE *v298;
  __int128 v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  size_t v305;
  char *v306;
  char *v307;
  unint64_t v308;
  char *v309;
  __int128 *v310;
  unint64_t v311;
  __int128 v312;
  char *v313;
  uint64_t *v314;
  unint64_t v315;
  uint64_t v316;
  char *v317;
  char v318;
  uint64_t v319;
  mgcl::muid *v320;
  mgcl::muid *v321;
  uint64_t v322;
  int32x4_t *v323;
  unint64_t v324;
  unint64_t v325;
  unsigned int v326;
  int64_t v327;
  __int128 v328;
  uint64_t v329;
  mgcl::muid *v330;
  mgcl::muid *v331;
  unint64_t v332;
  BOOL v333;
  size_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  size_t v338;
  mgcl::muid *v339;
  char *v340;
  unint64_t v341;
  char *v342;
  char *v343;
  unint64_t v344;
  __int128 v345;
  char *v346;
  char *v347;
  unint64_t v348;
  uint64_t v349;
  char *v350;
  char v351;
  geo *v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  int64x2_t v356;
  int8x16_t v357;
  int32x4_t *v358;
  unint64_t v359;
  int64x2_t v360;
  int32x4_t *v361;
  int32x4_t v362;
  int32x4_t v363;
  uint64x2_t v364;
  uint64x2_t v365;
  uint64x2_t v366;
  uint64x2_t v367;
  uint64x2_t v368;
  unint64_t v369;
  uint64_t v370;
  _DWORD *v371;
  int *v372;
  unint64_t v373;
  int v374;
  int32x4_t v375;
  int32x4_t *v376;
  unint64_t v377;
  uint32x4_t *v378;
  int32x4_t v379;
  unint64_t v380;
  uint64_t v381;
  _DWORD *v382;
  __int32 *v383;
  unsigned int v384;
  uint64_t v385;
  uint64_t v386;
  _WORD *v387;
  uint64_t v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v392;
  unsigned int v393;
  uint64_t v394;
  uint64_t v395;
  char v396;
  unint64_t v397;
  uint64_t v398;
  geo *v399;
  uint64_t v400;
  unint64_t v401;
  unint64_t v402;
  char *v403;
  char *v404;
  unint64_t v405;
  unint64_t v406;
  size_t v407;
  uint64_t v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  size_t v412;
  size_t v413;
  size_t v414;
  char *v415;
  char *v416;
  size_t v417;
  unint64_t v418;
  char *v419;
  char *v420;
  unint64_t v421;
  __int128 v422;
  char *v423;
  char *v424;
  unint64_t v425;
  uint64_t v426;
  char *v427;
  char v428;
  uint64_t v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t v432;
  char *v433;
  char *v434;
  unint64_t v435;
  unint64_t v436;
  unint64_t v437;
  size_t v438;
  uint64_t v439;
  unint64_t v440;
  uint64_t v441;
  size_t v442;
  size_t v443;
  _BYTE *v444;
  char *v445;
  unint64_t v446;
  _OWORD *v447;
  char *v448;
  unint64_t v449;
  __int128 v450;
  _QWORD *v451;
  char *v452;
  unint64_t v453;
  uint64_t v454;
  char *v455;
  char v456;
  unsigned int v457;
  char *v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  __int128 v462;
  uint64_t v463;
  uint64_t v464;
  void *v465;
  uint64_t v466;
  void *v467;
  int v468;
  int v469;
  unsigned int v470;
  unsigned int v471;
  unint64_t v472;
  int v473;
  unsigned int v474;
  int v475;
  uint64_t v476;
  uint64_t v477;
  _WORD *v478;
  uint64_t v479;
  uint64_t v480;
  unint64_t v481;
  char *v482;
  char *v483;
  unint64_t v484;
  unint64_t v485;
  unint64_t v486;
  uint64_t v487;
  unint64_t v488;
  uint64_t v489;
  size_t v490;
  _BYTE *v491;
  char *v492;
  unint64_t v493;
  _OWORD *v494;
  char *v495;
  unint64_t v496;
  __int128 v497;
  _QWORD *v498;
  char *v499;
  unint64_t v500;
  uint64_t v501;
  char *v502;
  char v503;
  unsigned int v504;
  unint64_t v505;
  unint64_t v506;
  unint64_t v507;
  unint64_t v508;
  unsigned int v509;
  uint64_t v510;
  unint64_t v511;
  geo *v512;
  unsigned int v513;
  unsigned int v514;
  int v515;
  char *v516;
  unint64_t v517;
  unint64_t v518;
  char *v519;
  unint64_t v520;
  unint64_t v521;
  unint64_t v522;
  uint64_t v523;
  unint64_t v524;
  uint64_t v525;
  size_t v526;
  char *v527;
  char *v528;
  unint64_t v529;
  char *v530;
  char *v531;
  unint64_t v532;
  __int128 v533;
  char *v534;
  char *v535;
  unint64_t v536;
  uint64_t v537;
  char *v538;
  char v539;
  unint64_t v540;
  unint64_t v541;
  char *v542;
  char *v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  uint64_t v547;
  unint64_t v548;
  uint64_t v549;
  size_t v550;
  _BYTE *v551;
  char *v552;
  uint64_t v553;
  unint64_t v554;
  _OWORD *v555;
  char *v556;
  unint64_t v557;
  __int128 v558;
  _QWORD *v559;
  char *v560;
  unint64_t v561;
  uint64_t v562;
  char *v563;
  char v564;
  uint64_t v565;
  unint64_t v566;
  unint64_t v567;
  unint64_t v568;
  unint64_t v569;
  uint64_t v570;
  unint64_t v571;
  uint64_t v572;
  size_t v573;
  _BYTE *v574;
  char *v575;
  unint64_t v576;
  char *v577;
  char *v578;
  char v579;
  uint64_t v580;
  uint64_t v581;
  unsigned int v582;
  unint64_t v583;
  unsigned int v584;
  uint64_t v585;
  unint64_t v586;
  _OWORD *v587;
  char *v588;
  unint64_t v589;
  __int128 v590;
  _QWORD *v591;
  char *v592;
  unint64_t v593;
  uint64_t v594;
  unint64_t v595;
  unint64_t v596;
  unint64_t v597;
  char *v598;
  char *v599;
  unint64_t v600;
  unint64_t v601;
  unint64_t v602;
  size_t v603;
  uint64_t v604;
  unint64_t v605;
  uint64_t v606;
  size_t v607;
  size_t v608;
  _BYTE *v609;
  char *v610;
  unint64_t v611;
  _OWORD *v612;
  char *v613;
  unint64_t v614;
  __int128 v615;
  _QWORD *v616;
  char *v617;
  unint64_t v618;
  uint64_t v619;
  char *v620;
  char v621;
  unsigned int v622;
  char *v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  __int128 v627;
  uint64_t v628;
  uint64_t v629;
  void *v630;
  uint64_t v631;
  void *v632;
  unsigned int v633;
  uint64_t v634;
  uint64_t v635;
  _WORD *v636;
  uint64_t v637;
  uint64_t v638;
  unint64_t v639;
  unint64_t v640;
  char *v641;
  char *v642;
  unint64_t v643;
  unint64_t v644;
  unint64_t v645;
  uint64_t v646;
  unint64_t v647;
  uint64_t v648;
  size_t v649;
  _BYTE *v650;
  char *v651;
  unint64_t v652;
  _OWORD *v653;
  char *v654;
  unint64_t v655;
  __int128 v656;
  _QWORD *v657;
  char *v658;
  unint64_t v659;
  uint64_t v660;
  char *v661;
  char v662;
  unint64_t v663;
  unint64_t v664;
  unint64_t v665;
  unint64_t v666;
  uint64_t v667;
  unint64_t v668;
  unint64_t v669;
  char *v670;
  char *v671;
  unint64_t v672;
  unsigned int *v673;
  unint64_t v674;
  unint64_t v675;
  uint64_t v676;
  unint64_t v677;
  uint64_t v678;
  size_t v679;
  char *v680;
  char *v681;
  unint64_t v682;
  uint64_t v683;
  char *v684;
  char *v685;
  unint64_t v686;
  __int128 v687;
  char *v688;
  char *v689;
  unint64_t v690;
  uint64_t v691;
  char *v692;
  char v693;
  unint64_t v694;
  unint64_t v695;
  unint64_t v696;
  unint64_t v697;
  uint64_t v698;
  unint64_t v699;
  unint64_t v700;
  char *v701;
  char *v702;
  unint64_t v703;
  unint64_t v704;
  unint64_t v705;
  uint64_t v706;
  unint64_t v707;
  uint64_t v708;
  size_t v709;
  char *v710;
  char *v711;
  unint64_t v712;
  uint64_t v713;
  char *v714;
  char *v715;
  unint64_t v716;
  __int128 v717;
  char *v718;
  char *v719;
  unint64_t v720;
  uint64_t v721;
  char *v722;
  char v723;
  unint64_t v724;
  unint64_t v725;
  unint64_t v726;
  unint64_t v727;
  unsigned int v728;
  unint64_t v729;
  unsigned int v730;
  unint64_t v731;
  unint64_t v732;
  unint64_t v733;
  char *v734;
  char *v735;
  unint64_t v736;
  unint64_t v737;
  unint64_t v738;
  size_t v739;
  uint64_t v740;
  unint64_t v741;
  uint64_t v742;
  size_t v743;
  _BYTE *v744;
  char *v745;
  unint64_t v746;
  _OWORD *v747;
  char *v748;
  unint64_t v749;
  __int128 v750;
  _QWORD *v751;
  char *v752;
  unint64_t v753;
  uint64_t v754;
  char *v755;
  char v756;
  unsigned int v757;
  char *v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  __int128 v762;
  uint64_t v763;
  uint64_t v764;
  void *v765;
  uint64_t v766;
  uint64_t v767;
  int v768;
  uint64_t v769;
  void *v770;
  uint64_t v771;
  void *v772;
  uint64_t *v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  unint64_t *v777;
  char v778;
  uint64_t v779;
  _QWORD *v780;
  unint64_t v781;
  int32x4_t *v782;
  uint64_t *v783;
  gcl::ArithmeticEncoder ****v784;
  uint64_t v785;
  unint64_t v786;
  uint64_t v787;
  char **v788;
  unint64_t v789;
  unint64_t v790;
  int v792;
  const void **v793;
  uint64_t *v794;
  uint64_t v795;
  unint64_t v796;
  int32x4_t *v797;
  unint64_t v798;
  unint64_t v799;
  uint64_t v801;
  unint64_t v802;
  uint64_t v803;
  uint64_t v804;
  char *v805;
  unsigned int v806;
  char *v807;
  unsigned int v808;
  uint64_t v809;
  uint64_t v810;
  geo *v811;
  unint64_t v812;
  unint64_t v813;
  unint64_t v814;
  unint64_t v815;
  char *v816;
  unsigned int v817;
  char *v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  unint64_t v822;
  unsigned int v823;
  __int128 __src;
  _OWORD v825[2];

  v6 = **(int32x4_t ***)(a1 + 8);
  v7 = **(_QWORD **)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 32);
  v793 = (const void **)(v8 + 96);
  v9 = 4 * v7;
  v790 = 4 * v7;
  if (v7)
  {
    v10 = 1;
    v11 = **(_DWORD ***)(a1 + 8);
    while ((*v11 & 0x80000000) == 0)
    {
      ++v11;
      v9 -= 4;
      if (!v9)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v10 = 0;
  }
  v780 = *(_QWORD **)(a1 + 40);
  v12 = **(_QWORD **)(a1 + 24);
  v13 = v10 + a3;
  v15 = *(char **)(v8 + 96);
  v14 = *(char **)(v8 + 104);
  if (v14 != v15)
  {
    *(_QWORD *)(v8 + 104) = v15;
    v14 = v15;
  }
  v819 = 0;
  v820 = 0;
  v821 = v8 + 96;
  LOBYTE(__src) = v10 + a3;
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((uint64_t)v793, v14, (char *)&__src, (char *)&__src + 1, 1);
  v778 = a4;
  v779 = a1;
  if (v13)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      if (v18 >= a3)
        v20 = 0;
      else
        v20 = *(unsigned __int8 *)(a2 + 4 * v18);
      LOBYTE(__src) = v20;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((uint64_t)v793, *(char **)(v8 + 104), (char *)&__src, (char *)&__src + 1, 1);
      v19 += v20;
      ++v18;
    }
    while (v13 != v18);
  }
  else
  {
    v19 = 0;
  }
  v21 = v780[2];
  v22 = v780 + 2;
  v23 = 0xAAAAAAAAAAAAAAABLL * ((v780[3] - v21) >> 4);
  if (v13 <= v23)
  {
    if (v13 < v23)
      v780[3] = v21 + 48 * v13;
    if (!v13)
    {
LABEL_877:
      v768 = 0;
      *v780 = *(_QWORD *)(v8 + 104) - *(_QWORD *)(v8 + 96);
      v769 = v820;
      if (v820)
        goto LABEL_883;
      goto LABEL_886;
    }
  }
  else
  {
    std::vector<mgcl::ints::ColumnInfo>::__append((char **)v780 + 2, v13 - v23);
  }
  v24 = 0;
  v794 = (uint64_t *)(v8 + 24);
  v783 = (uint64_t *)(v8 + 48);
  v784 = (gcl::ArithmeticEncoder ****)(v8 + 120);
  v788 = (char **)(v8 + 72);
  v786 = 8 * v7;
  v785 = 8 * v7 + 128;
  v789 = v7 & 0xFFFFFFFFFFFFFFF8;
  v781 = v7 & 0xFFFFFFFFFFFFFFF0;
  v782 = v6 + 1;
  v787 = v8;
  v797 = v6;
  v812 = v7;
  v795 = v12;
  v798 = v13;
  while (2)
  {
    if (v24 >= a3)
      LOBYTE(v25) = 0;
    else
      v25 = *(_DWORD *)(a2 + 4 * v24);
    v26 = *v22;
    v27 = *v22 + 48 * v24;
    *(_BYTE *)v27 = 0;
    v28 = v25;
    v29 = v19 - v25;
    v30 = -1;
    *(_QWORD *)(v27 + 8) = -1;
    *(_QWORD *)(v27 + 16) = 0;
    *(_QWORD *)(v27 + 24) = 0;
    *(_QWORD *)(v27 + 32) = 0;
    v803 = v27;
    *(_DWORD *)(v27 + 40) = 0;
    v796 = v24;
    if (v7)
    {
      v31 = 0;
      v32 = ~(-1 << v25);
      do
      {
        while (1)
        {
          v34 = v6->u32[v31];
          if (!v28)
            break;
          if ((v34 & 0x80000000) == 0)
            v34 = v34;
          else
            v34 = -(int)v34;
          if (v28 <= 0x3F)
            v34 = (v34 >> v29) & v32;
          if (v34 < v30)
            v30 = v34;
          if (v7 == ++v31)
            goto LABEL_39;
        }
        v33 = v34 >> 31;
        if (v33 < v30)
          v30 = v33;
        ++v31;
      }
      while (v7 != v31);
LABEL_39:
      v35 = 0;
      v36 = v6;
      v37 = v7;
      do
      {
        while (1)
        {
          v40 = v36->i32[0];
          v36 = (int32x4_t *)((char *)v36 + 4);
          v39 = v40;
          if (!v28)
            break;
          if ((v39 & 0x80000000) == 0)
            v39 = v39;
          else
            v39 = -(int)v39;
          if (v28 <= 0x3F)
            v39 = (v39 >> v29) & v32;
          v41 = v39 - v30;
          if (v35 <= v41)
            v35 = v41;
          if (!--v37)
            goto LABEL_52;
        }
        v38 = (v39 >> 31) - v30;
        if (v35 <= v38)
          v35 = v38;
        --v37;
      }
      while (v37);
LABEL_52:
      v42 = 1;
      if (v35 >= 2)
      {
        do
        {
          ++v42;
          v43 = v35 > 3;
          v35 >>= 1;
        }
        while (v43);
      }
      v813 = v30;
      v802 = v29;
      v801 = v26;
      v814 = v28;
      if ((v12 & 1) == 0)
      {
LABEL_81:
        v792 = 0;
        if ((v12 & 2) == 0)
          goto LABEL_82;
LABEL_186:
        v199 = *(mgcl::muid **)v8;
        v200 = *(mgcl::muid **)(v8 + 8);
        v201 = (unint64_t)v200 - *(_QWORD *)v8;
        v202 = v786 >= v201;
        v203 = v786 - v201;
        if (v786 <= v201)
        {
          v210 = v785;
          if (!v202)
            *(_QWORD *)(v8 + 8) = (char *)v199 + v786;
LABEL_218:
          v222 = *(mgcl::muid **)v8;
          if (!v7)
            goto LABEL_250;
          if (v814)
          {
            if (v814 <= 0x3F)
            {
              v225 = ~(-1 << v814);
              if (v7 >= 8)
              {
                v256 = vdupq_n_s64(v802);
                v257 = (int8x16_t)vdupq_n_s64(v225);
                v258 = (int64x2_t *)((char *)v222 + 32);
                v259 = v789;
                v260 = vdupq_n_s64(v813);
                v261 = v782;
                do
                {
                  v262 = vabsq_s32(v261[-1]);
                  v263 = vabsq_s32(*v261);
                  v264.i64[0] = v262.u32[2];
                  v264.i64[1] = v262.u32[3];
                  v265 = v264;
                  v264.i64[0] = v262.u32[0];
                  v264.i64[1] = v262.u32[1];
                  v266 = v264;
                  v264.i64[0] = v263.u32[2];
                  v264.i64[1] = v263.u32[3];
                  v267 = v264;
                  v264.i64[0] = v263.u32[0];
                  v264.i64[1] = v263.u32[1];
                  v268 = (uint64x2_t)vnegq_s64(v256);
                  v258[-2] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v266, v268), v257), v260);
                  v258[-1] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v265, v268), v257), v260);
                  *v258 = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v264, v268), v257), v260);
                  v258[1] = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v267, v268), v257), v260);
                  v258 += 4;
                  v261 += 2;
                  v259 -= 8;
                }
                while (v259);
                v226 = v789;
                if (v7 == v789)
                  goto LABEL_250;
              }
              else
              {
                v226 = 0;
              }
              v269 = v7 - v226;
              v270 = (_QWORD *)((char *)v222 + 8 * v226);
              v271 = &v6->i32[v226];
              do
              {
                v273 = *v271++;
                LODWORD(v272) = v273;
                if (v273 >= 0)
                  v272 = v272;
                else
                  v272 = -(int)v272;
                *v270++ = ((v272 >> v802) & v225) - v813;
                --v269;
              }
              while (v269);
            }
            else
            {
              if (v7 >= 8)
              {
                v241 = vdupq_n_s64(v813);
                v242 = (int64x2_t *)((char *)v222 + 32);
                v243 = v789;
                v244 = v782;
                do
                {
                  v245 = vabsq_s32(v244[-1]);
                  v246 = vabsq_s32(*v244);
                  v247.i64[0] = v245.u32[2];
                  v247.i64[1] = v245.u32[3];
                  v248 = v247;
                  v247.i64[0] = v245.u32[0];
                  v247.i64[1] = v245.u32[1];
                  v249 = v247;
                  v247.i64[0] = v246.u32[2];
                  v247.i64[1] = v246.u32[3];
                  v250 = v247;
                  v247.i64[0] = v246.u32[0];
                  v247.i64[1] = v246.u32[1];
                  v242[-2] = vsubq_s64(v249, v241);
                  v242[-1] = vsubq_s64(v248, v241);
                  *v242 = vsubq_s64(v247, v241);
                  v242[1] = vsubq_s64(v250, v241);
                  v242 += 4;
                  v244 += 2;
                  v243 -= 8;
                }
                while (v243);
                v223 = v789;
                if (v7 == v789)
                  goto LABEL_250;
              }
              else
              {
                v223 = 0;
              }
              v251 = v7 - v223;
              v252 = (_QWORD *)((char *)v222 + 8 * v223);
              v253 = &v6->i32[v223];
              do
              {
                v255 = *v253++;
                LODWORD(v254) = v255;
                if (v255 >= 0)
                  v254 = v254;
                else
                  v254 = -(int)v254;
                *v252++ = v254 - v813;
                --v251;
              }
              while (v251);
            }
LABEL_250:
            v274 = *(_BYTE **)(v8 + 24);
            v275 = *(char **)(v8 + 32);
            v276 = v275 - v274;
            if (v210 <= v275 - v274)
            {
              if (v210 < v275 - v274)
              {
                v275 = &v274[v210];
                *(_QWORD *)(v8 + 32) = &v274[v210];
              }
LABEL_282:
              *(_QWORD *)&__src = 0;
              v295 = v813;
              v792 = mgcl::muid::compress(v222, (const unint64_t *)8, v7, 0, 0, 0, (_BYTE *)*v794, &v275[-*v794], &__src, v777);
              if (v792 || (v296 = __src, (unint64_t)__src >= *(_QWORD *)(v803 + 8)))
              {
LABEL_315:
                v6 = v797;
                v13 = v798;
                v7 = v812;
                v12 = v795;
                v26 = v801;
                v65 = v814;
                if ((v795 & 4) == 0)
                  goto LABEL_332;
                goto LABEL_316;
              }
              v297 = *(_BYTE **)(v8 + 24);
              v298 = *(_BYTE **)(v8 + 32);
              v299 = *(_OWORD *)(v8 + 72);
              *(_QWORD *)(v8 + 72) = v297;
              *(_QWORD *)(v8 + 80) = v298;
              *(_OWORD *)(v8 + 24) = v299;
              v300 = *(_QWORD *)(v8 + 88);
              v301 = *(_QWORD *)(v8 + 40);
              *(_QWORD *)(v8 + 88) = v301;
              *(_QWORD *)(v8 + 40) = v300;
              v302 = v298 - v297;
              if (v296 <= v298 - v297)
              {
                if (v296 < v298 - v297)
                  *(_QWORD *)(v8 + 80) = &v297[v296];
                goto LABEL_314;
              }
              if (v301 - (uint64_t)v298 >= v296 - (v298 - v297))
              {
                bzero(v298, v296 - (v298 - v297));
                *(_QWORD *)(v8 + 80) = &v297[v296];
LABEL_314:
                v319 = __src;
                *(_BYTE *)v803 = 2;
                *(_QWORD *)(v803 + 8) = v319;
                *(_QWORD *)(v803 + 16) = v814;
                *(_QWORD *)(v803 + 24) = v295;
                *(_QWORD *)(v803 + 32) = 0;
                *(_DWORD *)(v803 + 40) = 0;
                goto LABEL_315;
              }
              if ((v296 & 0x8000000000000000) != 0)
                goto LABEL_898;
              v303 = v301 - (_QWORD)v297;
              v304 = 2 * v303;
              if (2 * v303 <= v296)
                v304 = v296;
              if (v303 >= 0x3FFFFFFFFFFFFFFFLL)
                v305 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v305 = v304;
              v306 = (char *)operator new(v305);
              v307 = &v306[v302];
              bzero(&v306[v302], v296 - (v298 - v297));
              if (v298 == v297)
              {
LABEL_312:
                *(_QWORD *)(v8 + 72) = v307;
                *(_QWORD *)(v8 + 80) = &v306[v296];
                *(_QWORD *)(v8 + 88) = &v306[v305];
                v295 = v813;
                if (v297)
                  operator delete(v297);
                goto LABEL_314;
              }
              if (v302 >= 8 && (unint64_t)(v297 - v306) >= 0x20)
              {
                if (v302 < 0x20)
                {
                  v308 = 0;
                  goto LABEL_304;
                }
                v308 = v302 & 0xFFFFFFFFFFFFFFE0;
                v309 = &v306[v302 - 16];
                v310 = (__int128 *)(v298 - 16);
                v311 = v302 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v312 = *v310;
                  *((_OWORD *)v309 - 1) = *(v310 - 1);
                  *(_OWORD *)v309 = v312;
                  v309 -= 32;
                  v310 -= 2;
                  v311 -= 32;
                }
                while (v311);
                if (v302 == v308)
                  goto LABEL_311;
                if ((v302 & 0x18) != 0)
                {
LABEL_304:
                  v307 -= v302 & 0xFFFFFFFFFFFFFFF8;
                  v313 = &v306[&v298[-v308] - v297 - 8];
                  v314 = (uint64_t *)&v298[-v308 - 8];
                  v315 = v308 - (v302 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v316 = *v314--;
                    *(_QWORD *)v313 = v316;
                    v313 -= 8;
                    v315 += 8;
                  }
                  while (v315);
                  v298 -= v302 & 0xFFFFFFFFFFFFFFF8;
                  if (v302 == (v302 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_311;
                  goto LABEL_309;
                }
                v307 -= v308;
                v298 -= v308;
              }
LABEL_309:
              v317 = v307 - 1;
              do
              {
                v318 = *--v298;
                *v317-- = v318;
              }
              while (v298 != v297);
LABEL_311:
              v307 = v306;
              goto LABEL_312;
            }
            v277 = *(_QWORD *)(v8 + 40);
            if (v277 - (uint64_t)v275 >= v210 - (v275 - v274))
            {
              bzero(*(void **)(v8 + 32), v210 - (v275 - v274));
              *(_QWORD *)(v8 + 32) = &v274[v210];
              v275 = &v274[v210];
              goto LABEL_282;
            }
            if ((v210 & 0x8000000000000000) != 0)
              goto LABEL_898;
            v278 = v277 - (_QWORD)v274;
            v279 = 2 * v278;
            if (2 * v278 <= v210)
              v279 = v210;
            if (v278 >= 0x3FFFFFFFFFFFFFFFLL)
              v280 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v280 = v279;
            v281 = (char *)operator new(v280);
            v282 = &v281[v276];
            bzero(&v281[v276], v210 - (v275 - v274));
            if (v275 == v274)
            {
              v274 = v275;
              v283 = v785;
              goto LABEL_280;
            }
            if (v276 < 8)
            {
              v283 = v785;
              goto LABEL_277;
            }
            v283 = v785;
            if ((unint64_t)(v274 - v281) >= 0x20)
            {
              if (v276 < 0x20)
              {
                v284 = 0;
                goto LABEL_272;
              }
              v284 = v276 & 0xFFFFFFFFFFFFFFE0;
              v285 = &v281[v276 - 16];
              v286 = v275 - 16;
              v287 = v276 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v288 = *(_OWORD *)v286;
                *((_OWORD *)v285 - 1) = *((_OWORD *)v286 - 1);
                *(_OWORD *)v285 = v288;
                v285 -= 32;
                v286 -= 32;
                v287 -= 32;
              }
              while (v287);
              if (v276 == v284)
                goto LABEL_279;
              if ((v276 & 0x18) != 0)
              {
LABEL_272:
                v282 -= v276 & 0xFFFFFFFFFFFFFFF8;
                v289 = &v281[&v275[-v284] - v274 - 8];
                v290 = &v275[-v284 - 8];
                v291 = v284 - (v276 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v292 = *(_QWORD *)v290;
                  v290 -= 8;
                  *(_QWORD *)v289 = v292;
                  v289 -= 8;
                  v291 += 8;
                }
                while (v291);
                v275 -= v276 & 0xFFFFFFFFFFFFFFF8;
                if (v276 == (v276 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_279;
                goto LABEL_277;
              }
              v282 -= v284;
              v275 -= v284;
            }
LABEL_277:
            v293 = v282 - 1;
            do
            {
              v294 = *--v275;
              *v293-- = v294;
            }
            while (v275 != v274);
LABEL_279:
            v282 = v281;
LABEL_280:
            v275 = &v281[v283];
            *(_QWORD *)(v787 + 24) = v282;
            *(_QWORD *)(v787 + 32) = &v281[v283];
            v8 = v787;
            *(_QWORD *)(v787 + 40) = &v281[v280];
            v7 = v812;
            if (v274)
            {
              operator delete(v274);
              v275 = *(char **)(v787 + 32);
            }
            goto LABEL_282;
          }
          if (v7 >= 8)
          {
            v227 = vdupq_n_s64(v813);
            v228 = (int64x2_t *)((char *)v222 + 32);
            v229 = v789;
            v230 = (uint32x4_t *)v782;
            do
            {
              v231 = vshrq_n_u32(v230[-1], 0x1FuLL);
              v232 = vshrq_n_u32(*v230, 0x1FuLL);
              v233.i64[0] = v231.u32[2];
              v233.i64[1] = v231.u32[3];
              v234 = v233;
              v233.i64[0] = v231.u32[0];
              v233.i64[1] = v231.u32[1];
              v235 = v233;
              v233.i64[0] = v232.u32[2];
              v233.i64[1] = v232.u32[3];
              v236 = v233;
              v233.i64[0] = v232.u32[0];
              v233.i64[1] = v232.u32[1];
              v228[-2] = vsubq_s64(v235, v227);
              v228[-1] = vsubq_s64(v234, v227);
              *v228 = vsubq_s64(v233, v227);
              v228[1] = vsubq_s64(v236, v227);
              v228 += 4;
              v230 += 2;
              v229 -= 8;
            }
            while (v229);
            v224 = v789;
            if (v7 == v789)
              goto LABEL_250;
          }
          else
          {
            v224 = 0;
          }
          v237 = v7 - v224;
          v238 = (_QWORD *)((char *)v222 + 8 * v224);
          v239 = &v6->i32[v224];
          do
          {
            v240 = *v239++;
            *v238++ = ((unint64_t)v240 >> 31) - v813;
            --v237;
          }
          while (v237);
          goto LABEL_250;
        }
        v204 = *(_QWORD *)(v8 + 16);
        if (v204 - (uint64_t)v200 >= v203)
        {
          bzero(*(void **)(v8 + 8), v786 - v201);
          *(_QWORD *)(v8 + 8) = (char *)v200 + v203;
          v210 = v785;
          goto LABEL_218;
        }
        if ((v786 & 0x8000000000000000) != 0)
          goto LABEL_898;
        v205 = v204 - (_QWORD)v199;
        v206 = 2 * v205;
        if (2 * v205 <= v786)
          v206 = v786;
        if (v205 >= 0x3FFFFFFFFFFFFFFFLL)
          v207 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v207 = v206;
        v208 = (mgcl::muid *)operator new(v207);
        v209 = (char *)v208 + v201;
        bzero((char *)v208 + v201, v203);
        if (v200 == v199)
        {
          v7 = v812;
          goto LABEL_216;
        }
        if (v201 < 8)
        {
          v7 = v812;
          goto LABEL_213;
        }
        v7 = v812;
        if ((unint64_t)(v199 - v208) >= 0x20)
        {
          if (v201 < 0x20)
          {
            v211 = 0;
            goto LABEL_208;
          }
          v211 = v201 & 0xFFFFFFFFFFFFFFE0;
          v212 = (char *)v208 + v201 - 16;
          v213 = (char *)v200 - 16;
          v214 = v201 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v215 = *(_OWORD *)v213;
            *((_OWORD *)v212 - 1) = *((_OWORD *)v213 - 1);
            *(_OWORD *)v212 = v215;
            v212 -= 32;
            v213 -= 32;
            v214 -= 32;
          }
          while (v214);
          if (v201 == v211)
            goto LABEL_215;
          if ((v201 & 0x18) != 0)
          {
LABEL_208:
            v209 -= v201 & 0xFFFFFFFFFFFFFFF8;
            v216 = (char *)v208 + (mgcl::muid *)((char *)v200 - v211) - v199 - 8;
            v217 = (char *)v200 - v211 - 8;
            v218 = v211 - (v201 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v219 = *(_QWORD *)v217;
              v217 -= 8;
              *(_QWORD *)v216 = v219;
              v216 -= 8;
              v218 += 8;
            }
            while (v218);
            v200 = (mgcl::muid *)((char *)v200 - (v201 & 0xFFFFFFFFFFFFFFF8));
            if (v201 == (v201 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_215;
            goto LABEL_213;
          }
          v209 -= v211;
          v200 = (mgcl::muid *)((char *)v200 - v211);
        }
LABEL_213:
        v220 = v209 - 1;
        do
        {
          v221 = *((_BYTE *)v200 - 1);
          v200 = (mgcl::muid *)((char *)v200 - 1);
          *v220-- = v221;
        }
        while (v200 != v199);
LABEL_215:
        v200 = v199;
        v209 = (char *)v208;
LABEL_216:
        v210 = v785;
        *(_QWORD *)v8 = v209;
        *(_QWORD *)(v8 + 8) = (char *)v208 + v786;
        *(_QWORD *)(v8 + 16) = (char *)v208 + v207;
        v6 = v797;
        if (v200)
          operator delete(v200);
        goto LABEL_218;
      }
    }
    else
    {
      v42 = 1;
      v813 = -1;
      v802 = v29;
      v801 = v26;
      v814 = v25;
      if ((v12 & 1) == 0)
        goto LABEL_81;
    }
    if (v28 <= 1)
    {
      v44 = *(_QWORD *)v8;
      v45 = *(char **)(v8 + 8);
      v46 = (unint64_t)&v45[-*(_QWORD *)v8];
      v47 = v7 - v46;
      if (v7 <= v46)
      {
        v49 = v789;
        if (v7 < v46)
          *(_QWORD *)(v8 + 8) = v44 + v7;
        v66 = v781;
LABEL_121:
        v67 = v813;
        if (!v7)
          goto LABEL_152;
LABEL_122:
        if (v814)
        {
          v89 = ~(-1 << v814);
          if (v7 < 8)
          {
            v90 = 0;
            v91 = v802;
            goto LABEL_142;
          }
          v93 = (int8x16_t)vdupq_n_s64(v89);
          v91 = v802;
          v94 = 0;
          if (v7 >= 0x10)
          {
            v118 = vdupq_n_s64(v802);
            v119 = vdupq_n_s64(v67);
            v120 = v6;
            v121.i64[0] = 0x101010101010101;
            v121.i64[1] = 0x101010101010101;
            do
            {
              v123 = v120[2];
              v122 = v120[3];
              v124 = *v120;
              v125 = v120[1];
              v120 += 4;
              v126 = vabsq_s32(v125);
              v127 = vabsq_s32(v124);
              v128 = vabsq_s32(v123);
              v129 = vabsq_s32(v122);
              v130.i64[0] = v129.u32[2];
              v130.i64[1] = v129.u32[3];
              v131 = v130;
              v130.i64[0] = v129.u32[0];
              v130.i64[1] = v129.u32[1];
              v132 = v130;
              v130.i64[0] = v128.u32[2];
              v130.i64[1] = v128.u32[3];
              v133 = v130;
              v130.i64[0] = v128.u32[0];
              v130.i64[1] = v128.u32[1];
              v134 = v130;
              v130.i64[0] = v127.u32[0];
              v130.i64[1] = v127.u32[1];
              v135 = v130;
              v130.i64[0] = v127.u32[2];
              v130.i64[1] = v127.u32[3];
              v136 = v130;
              v130.i64[0] = v126.u32[0];
              v130.i64[1] = v126.u32[1];
              v137 = v130;
              v130.i64[0] = v126.u32[2];
              v130.i64[1] = v126.u32[3];
              v138 = (uint64x2_t)vnegq_s64(v118);
              *(int8x16_t *)(v44 + v94) = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v135, v138), v93), v119), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v136, v138), v93), v119)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v137, v138), v93), v119), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v130, v138), v93), v119)))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(
                                                                                              (int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v134, v138), v93),
                                                                                              v119),
                                                                                 (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v133, v138), v93), v119)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v132, v138), v93), v119), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v131, v138), v93), v119))))), v121);
              v94 += 16;
            }
            while (v66 != v94);
            if (v7 == v66)
              goto LABEL_152;
            v94 = v66;
            v90 = v66;
            if ((v7 & 8) == 0)
            {
              do
              {
LABEL_142:
                LODWORD(v139) = v6->i32[v90];
                if ((v139 & 0x80000000) == 0)
                  v139 = v139;
                else
                  v139 = -(int)v139;
                *(_BYTE *)(v44 + v90++) = ((v139 >> v91) & v89) != v67;
              }
              while (v7 != v90);
              goto LABEL_152;
            }
          }
          v95 = vdupq_n_s64(v802);
          v96 = vdupq_n_s64(v67);
          v97 = (int32x4_t *)((char *)v6 + 4 * v94);
          do
          {
            v98 = *v97;
            v99 = v97[1];
            v97 += 2;
            v100 = vabsq_s32(v99);
            v101 = vabsq_s32(v98);
            v102.i64[0] = v101.u32[0];
            v102.i64[1] = v101.u32[1];
            v103 = v102;
            v102.i64[0] = v101.u32[2];
            v102.i64[1] = v101.u32[3];
            v104 = v102;
            v102.i64[0] = v100.u32[0];
            v102.i64[1] = v100.u32[1];
            v105 = v102;
            v102.i64[0] = v100.u32[2];
            v102.i64[1] = v100.u32[3];
            v106 = (uint64x2_t)vnegq_s64(v95);
            *(int8x8_t *)(v44 + v94) = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v103, v106), v93), v96), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v104, v106), v93), v96)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v105, v106), v93), v96), (int32x4_t)vceqq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v102, v106), v93), v96))))), (int8x8_t)0x101010101010101);
            v94 += 8;
          }
          while (v49 != v94);
          v90 = v49;
          if (v7 != v49)
            goto LABEL_142;
LABEL_152:
          memset(v825, 0, sizeof(v825));
          __src = 0u;
          goto LABEL_182;
        }
        if (v7 < 8)
        {
          v92 = 0;
          do
          {
LABEL_151:
            *(_BYTE *)(v44 + v92) = v67 != (unint64_t)v6->u32[v92] >> 31;
            ++v92;
          }
          while (v7 != v92);
          goto LABEL_152;
        }
        if (v7 >= 0x10)
        {
          v140 = 0;
          v141 = vdupq_n_s64(v67);
          v142 = (uint32x4_t *)v6;
          v143.i64[0] = 0x101010101010101;
          v143.i64[1] = 0x101010101010101;
          do
          {
            v145 = v142[2];
            v144 = v142[3];
            v146 = *v142;
            v147 = v142[1];
            v142 += 4;
            v148 = vshrq_n_u32(v147, 0x1FuLL);
            v149 = vshrq_n_u32(v146, 0x1FuLL);
            v150 = vshrq_n_u32(v145, 0x1FuLL);
            v151 = vshrq_n_u32(v144, 0x1FuLL);
            v152.i64[0] = v151.u32[2];
            v152.i64[1] = v151.u32[3];
            v153 = v152;
            v152.i64[0] = v151.u32[0];
            v152.i64[1] = v151.u32[1];
            v154 = v152;
            v152.i64[0] = v150.u32[2];
            v152.i64[1] = v150.u32[3];
            v155 = v152;
            v152.i64[0] = v150.u32[0];
            v152.i64[1] = v150.u32[1];
            v156 = v152;
            v152.i64[0] = v149.u32[0];
            v152.i64[1] = v149.u32[1];
            v157 = v152;
            v152.i64[0] = v149.u32[2];
            v152.i64[1] = v149.u32[3];
            v158 = v152;
            v152.i64[0] = v148.u32[0];
            v152.i64[1] = v148.u32[1];
            v159 = v152;
            v152.i64[0] = v148.u32[2];
            v152.i64[1] = v148.u32[3];
            *(int8x16_t *)(v44 + v140) = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v141, v157), (int32x4_t)vceqq_s64(v141, v158)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v141, v159), (int32x4_t)vceqq_s64(v141, v152)))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v141, v156), (int32x4_t)vceqq_s64(v141, v155)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v141, v154), (int32x4_t)vceqq_s64(v141, v153))))), v143);
            v140 += 16;
          }
          while (v66 != v140);
          if (v7 == v66)
            goto LABEL_152;
          v107 = v66;
          v92 = v66;
          if ((v7 & 8) == 0)
            goto LABEL_151;
        }
        else
        {
          v107 = 0;
        }
        v108 = vdupq_n_s64(v67);
        v109 = (uint32x4_t *)((char *)v6 + 4 * v107);
        do
        {
          v110 = *v109;
          v111 = v109[1];
          v109 += 2;
          v112 = vshrq_n_u32(v111, 0x1FuLL);
          v113 = vshrq_n_u32(v110, 0x1FuLL);
          v114.i64[0] = v113.u32[0];
          v114.i64[1] = v113.u32[1];
          v115 = v114;
          v114.i64[0] = v113.u32[2];
          v114.i64[1] = v113.u32[3];
          v116 = v114;
          v114.i64[0] = v112.u32[0];
          v114.i64[1] = v112.u32[1];
          v117 = v114;
          v114.i64[0] = v112.u32[2];
          v114.i64[1] = v112.u32[3];
          *(int8x8_t *)(v44 + v107) = vand_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v108, v115), (int32x4_t)vceqq_s64(v108, v116)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v108, v117), (int32x4_t)vceqq_s64(v108, v114))))), (int8x8_t)0x101010101010101);
          v107 += 8;
        }
        while (v49 != v107);
        v92 = v49;
        if (v7 == v49)
          goto LABEL_152;
        goto LABEL_151;
      }
      v48 = *(_QWORD *)(v8 + 16);
      v49 = v789;
      if (v48 - (uint64_t)v45 >= v47)
      {
        bzero(*(void **)(v8 + 8), v7 - v46);
        *(_QWORD *)(v8 + 8) = &v45[v47];
        v44 = *(_QWORD *)v8;
        v66 = v781;
        v67 = v813;
        goto LABEL_122;
      }
      if ((v7 & 0x8000000000000000) != 0)
        goto LABEL_898;
      v50 = v48 - v44;
      v51 = 2 * v50;
      if (2 * v50 <= v7)
        v51 = v7;
      if (v50 >= 0x3FFFFFFFFFFFFFFFLL)
        v52 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v52 = v51;
      v53 = (char *)operator new(v52);
      v54 = &v53[v46];
      bzero(&v53[v46], v47);
      if (v45 == (char *)v44)
      {
        v49 = v789;
        goto LABEL_119;
      }
      if (v46 < 8)
      {
        v49 = v789;
        goto LABEL_116;
      }
      v49 = v789;
      if ((unint64_t)(v44 - (_QWORD)v53) >= 0x20)
      {
        if (v46 < 0x20)
        {
          v69 = 0;
          goto LABEL_103;
        }
        v69 = v46 & 0xFFFFFFFFFFFFFFE0;
        v71 = &v53[v46 - 16];
        v72 = v45 - 16;
        v73 = v46 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v74 = *(_OWORD *)v72;
          *((_OWORD *)v71 - 1) = *((_OWORD *)v72 - 1);
          *(_OWORD *)v71 = v74;
          v71 -= 32;
          v72 -= 32;
          v73 -= 32;
        }
        while (v73);
        if (v46 == v69)
          goto LABEL_118;
        if ((v46 & 0x18) != 0)
        {
LABEL_103:
          v54 -= v46 & 0xFFFFFFFFFFFFFFF8;
          v75 = &v45[-v69 - v44 - 8 + (_QWORD)v53];
          v76 = &v45[-v69 - 8];
          v77 = v69 - (v46 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v78 = *(_QWORD *)v76;
            v76 -= 8;
            *(_QWORD *)v75 = v78;
            v75 -= 8;
            v77 += 8;
          }
          while (v77);
          v45 -= v46 & 0xFFFFFFFFFFFFFFF8;
          if (v46 == (v46 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_118;
          goto LABEL_116;
        }
        v54 -= v69;
        v45 -= v69;
      }
LABEL_116:
      v87 = v54 - 1;
      do
      {
        v88 = *--v45;
        *v87-- = v88;
      }
      while (v45 != (char *)v44);
LABEL_118:
      v45 = (char *)v44;
      v54 = v53;
LABEL_119:
      v66 = v781;
      *(_QWORD *)v8 = v54;
      *(_QWORD *)(v8 + 8) = &v53[v812];
      *(_QWORD *)(v8 + 16) = &v53[v52];
      v44 = (uint64_t)v54;
      v7 = v812;
      v6 = v797;
      v12 = v795;
      if (v45)
      {
        operator delete(v45);
        v44 = *(_QWORD *)v8;
      }
      goto LABEL_121;
    }
    if (v42 > 0x1F)
      goto LABEL_81;
    v55 = *(mgcl::muid **)v8;
    v56 = *(mgcl::muid **)(v8 + 8);
    v57 = (unint64_t)v56 - *(_QWORD *)v8;
    v58 = v790 - v57;
    if (v790 <= v57)
    {
      v68 = v789;
      if (v790 < v57)
        *(_QWORD *)(v8 + 8) = (char *)v55 + v790;
      goto LABEL_159;
    }
    v59 = *(_QWORD *)(v8 + 16);
    if (v59 - (uint64_t)v56 < v58)
    {
      if ((v790 & 0x8000000000000000) != 0)
        goto LABEL_898;
      v60 = v59 - (_QWORD)v55;
      v61 = 2 * v60;
      if (2 * v60 <= v790)
        v61 = v790;
      if (v60 >= 0x3FFFFFFFFFFFFFFFLL)
        v62 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v62 = v61;
      v63 = (mgcl::muid *)operator new(v62);
      v64 = (char *)v63 + v57;
      bzero((char *)v63 + v57, v58);
      if (v56 == v55)
      {
        v7 = v812;
        goto LABEL_157;
      }
      if (v57 < 8)
      {
        v7 = v812;
        goto LABEL_154;
      }
      v7 = v812;
      if ((unint64_t)(v55 - v63) >= 0x20)
      {
        if (v57 < 0x20)
        {
          v70 = 0;
          goto LABEL_111;
        }
        v70 = v57 & 0xFFFFFFFFFFFFFFE0;
        v79 = (char *)v63 + v57 - 16;
        v80 = (char *)v56 - 16;
        v81 = v57 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v82 = *(_OWORD *)v80;
          *((_OWORD *)v79 - 1) = *((_OWORD *)v80 - 1);
          *(_OWORD *)v79 = v82;
          v79 -= 32;
          v80 -= 32;
          v81 -= 32;
        }
        while (v81);
        if (v57 == v70)
          goto LABEL_156;
        if ((v57 & 0x18) != 0)
        {
LABEL_111:
          v64 -= v57 & 0xFFFFFFFFFFFFFFF8;
          v83 = (char *)v63 + (mgcl::muid *)((char *)v56 - v70) - v55 - 8;
          v84 = (char *)v56 - v70 - 8;
          v85 = v70 - (v57 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v86 = *(_QWORD *)v84;
            v84 -= 8;
            *(_QWORD *)v83 = v86;
            v83 -= 8;
            v85 += 8;
          }
          while (v85);
          v56 = (mgcl::muid *)((char *)v56 - (v57 & 0xFFFFFFFFFFFFFFF8));
          if (v57 == (v57 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_156;
          goto LABEL_154;
        }
        v64 -= v70;
        v56 = (mgcl::muid *)((char *)v56 - v70);
      }
LABEL_154:
      v161 = v64 - 1;
      do
      {
        v162 = *((_BYTE *)v56 - 1);
        v56 = (mgcl::muid *)((char *)v56 - 1);
        *v161-- = v162;
      }
      while (v56 != v55);
LABEL_156:
      v56 = v55;
      v64 = (char *)v63;
LABEL_157:
      v68 = v789;
      *(_QWORD *)v8 = v64;
      *(_QWORD *)(v8 + 8) = (char *)v63 + v790;
      *(_QWORD *)(v8 + 16) = (char *)v63 + v62;
      v6 = v797;
      v12 = v795;
      if (v56)
        operator delete(v56);
      goto LABEL_159;
    }
    bzero(*(void **)(v8 + 8), v790 - v57);
    *(_QWORD *)(v8 + 8) = (char *)v56 + v58;
    v68 = v789;
LABEL_159:
    v163 = *(char **)v8;
    if (v7)
    {
      if (v814 <= 0x3F)
      {
        v176 = 0;
        v177 = ~(-1 << v814);
        if (v7 < 8)
          goto LABEL_176;
        if ((unint64_t)(v163 - (char *)v6) < 0x20)
          goto LABEL_176;
        v178 = vdupq_n_s64(v802);
        v179 = (int8x16_t)vdupq_n_s64(v177);
        v180 = (int32x4_t *)(v163 + 16);
        v181 = v68;
        v182 = vdupq_n_s64(v813);
        v183 = v782;
        do
        {
          v184 = vabsq_s32(v183[-1]);
          v185 = vabsq_s32(*v183);
          v186.i64[0] = v184.u32[0];
          v186.i64[1] = v184.u32[1];
          v187 = v186;
          v186.i64[0] = v184.u32[2];
          v186.i64[1] = v184.u32[3];
          v188 = v186;
          v186.i64[0] = v185.u32[0];
          v186.i64[1] = v185.u32[1];
          v189 = v186;
          v186.i64[0] = v185.u32[2];
          v186.i64[1] = v185.u32[3];
          v190 = (uint64x2_t)vnegq_s64(v178);
          v180[-1] = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v187, v190), v179), v182), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v188, v190), v179), v182));
          *v180 = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v189, v190), v179), v182), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v186, v190), v179), v182));
          v183 += 2;
          v180 += 2;
          v181 -= 8;
        }
        while (v181);
        v176 = v68;
        if (v7 != v68)
        {
LABEL_176:
          v191 = v7 - v176;
          v192 = v176;
          v193 = &v163[4 * v176];
          v194 = &v6->i32[v192];
          do
          {
            v196 = *v194++;
            LODWORD(v195) = v196;
            if (v196 >= 0)
              v195 = v195;
            else
              v195 = -(int)v195;
            *(_DWORD *)v193 = ((v195 >> v802) & v177) - v813;
            v193 += 4;
            --v191;
          }
          while (v191);
        }
      }
      else
      {
        v164 = 0;
        if (v7 < 8)
          goto LABEL_166;
        if ((unint64_t)(v163 - (char *)v6) < 0x20)
          goto LABEL_166;
        v165 = vdupq_n_s32(v813);
        v166 = (int32x4_t *)(v163 + 16);
        v167 = v68;
        v168 = v782;
        do
        {
          v169 = vsubq_s32(vabsq_s32(*v168), v165);
          v166[-1] = vsubq_s32(vabsq_s32(v168[-1]), v165);
          *v166 = v169;
          v168 += 2;
          v166 += 2;
          v167 -= 8;
        }
        while (v167);
        v164 = v68;
        if (v7 != v68)
        {
LABEL_166:
          v170 = v7 - v164;
          v171 = v164;
          v172 = &v163[4 * v164];
          v173 = &v6->i32[v171];
          do
          {
            v175 = *v173++;
            v174 = v175;
            if (v175 < 0)
              v174 = -v174;
            *(_DWORD *)v172 = v174 - v813;
            v172 += 4;
            --v170;
          }
          while (v170);
        }
      }
    }
    memset(v825, 0, sizeof(v825));
    __src = 0u;
LABEL_182:
    v792 = v160;
    if (!v160 && *((_QWORD *)&__src + 1) < *(_QWORD *)(v803 + 8))
    {
      *(_OWORD *)v803 = __src;
      *(_OWORD *)(v803 + 16) = v825[0];
      *(_OWORD *)(v803 + 28) = *(_OWORD *)((char *)v825 + 12);
      v197 = *(_OWORD *)(v8 + 72);
      *(_OWORD *)(v8 + 72) = *(_OWORD *)(v8 + 48);
      *(_OWORD *)(v8 + 48) = v197;
      v198 = *(_QWORD *)(v8 + 88);
      *(_QWORD *)(v8 + 88) = *(_QWORD *)(v8 + 64);
      *(_QWORD *)(v8 + 64) = v198;
    }
    v6 = v797;
    v13 = v798;
    v7 = v812;
    v12 = v795;
    v26 = v801;
    if ((v795 & 2) != 0)
      goto LABEL_186;
LABEL_82:
    v65 = v814;
    if ((v12 & 4) == 0)
      goto LABEL_332;
LABEL_316:
    v321 = *(mgcl::muid **)v8;
    v320 = *(mgcl::muid **)(v8 + 8);
    if (v320 != *(mgcl::muid **)v8)
    {
      *(_QWORD *)(v8 + 8) = v321;
      v320 = v321;
    }
    __src = 0uLL;
    *(_QWORD *)&v825[0] = v8;
    if (v7)
    {
      v322 = ~(-1 << v65);
      v323 = v6;
      v324 = v7;
      do
      {
        v326 = v323->i32[0];
        v323 = (int32x4_t *)((char *)v323 + 4);
        v325 = v326;
        if (v814)
        {
          if ((v325 & 0x80000000) == 0)
            v325 = v325;
          else
            v325 = -(int)v325;
          if (v814 <= 0x3F)
            v325 = (v325 >> v802) & v322;
        }
        else
        {
          v325 >>= 31;
        }
        geo::WriteBitstream::writeVariableInt((geo::WriteBitstream *)&__src, v325 - v813);
        --v324;
      }
      while (v324);
      v321 = *(mgcl::muid **)v8;
      v320 = *(mgcl::muid **)(v8 + 8);
      v26 = v801;
      v65 = v814;
    }
    v327 = v320 - v321;
    if ((unint64_t)(v320 - v321) < *(_QWORD *)(v803 + 8))
    {
      v328 = *(_OWORD *)(v8 + 72);
      *(_QWORD *)(v8 + 72) = v321;
      *(_QWORD *)(v8 + 80) = v320;
      *(_OWORD *)v8 = v328;
      v329 = *(_QWORD *)(v8 + 88);
      *(_QWORD *)(v8 + 88) = *(_QWORD *)(v8 + 16);
      *(_QWORD *)(v8 + 16) = v329;
      *(_BYTE *)v803 = 3;
      *(_QWORD *)(v803 + 8) = v327;
      *(_QWORD *)(v803 + 16) = v65;
      *(_QWORD *)(v803 + 24) = v813;
      *(_QWORD *)(v803 + 32) = 0;
      *(_DWORD *)(v803 + 40) = 0;
    }
LABEL_332:
    if ((v12 & 8) == 0 || v65 > 0x20)
      goto LABEL_875;
    v330 = *(mgcl::muid **)v8;
    v331 = *(mgcl::muid **)(v8 + 8);
    v332 = (unint64_t)v331 - *(_QWORD *)v8;
    v333 = v790 >= v332;
    v334 = v790 - v332;
    if (v790 > v332)
    {
      v335 = *(_QWORD *)(v8 + 16);
      if (v335 - (uint64_t)v331 >= v334)
      {
        bzero(*(void **)(v8 + 8), v790 - v332);
        *(_QWORD *)(v8 + 8) = (char *)v331 + v334;
        v13 = v798;
        goto LABEL_366;
      }
      if ((v790 & 0x8000000000000000) != 0)
LABEL_898:
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v336 = v335 - (_QWORD)v330;
      v337 = 2 * v336;
      if (2 * v336 <= v790)
        v337 = v790;
      if (v336 >= 0x3FFFFFFFFFFFFFFFLL)
        v338 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v338 = v337;
      v339 = (mgcl::muid *)operator new(v338);
      v340 = (char *)v339 + v332;
      bzero((char *)v339 + v332, v334);
      if (v331 == v330)
      {
        v7 = v812;
        goto LABEL_364;
      }
      if (v332 < 8)
      {
        v7 = v812;
        goto LABEL_361;
      }
      v7 = v812;
      if ((unint64_t)(v330 - v339) >= 0x20)
      {
        if (v332 < 0x20)
        {
          v341 = 0;
          goto LABEL_356;
        }
        v341 = v332 & 0xFFFFFFFFFFFFFFE0;
        v342 = (char *)v339 + v332 - 16;
        v343 = (char *)v331 - 16;
        v344 = v332 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v345 = *(_OWORD *)v343;
          *((_OWORD *)v342 - 1) = *((_OWORD *)v343 - 1);
          *(_OWORD *)v342 = v345;
          v342 -= 32;
          v343 -= 32;
          v344 -= 32;
        }
        while (v344);
        if (v332 == v341)
          goto LABEL_363;
        if ((v332 & 0x18) != 0)
        {
LABEL_356:
          v340 -= v332 & 0xFFFFFFFFFFFFFFF8;
          v346 = (char *)v339 + (mgcl::muid *)((char *)v331 - v341) - v330 - 8;
          v347 = (char *)v331 - v341 - 8;
          v348 = v341 - (v332 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v349 = *(_QWORD *)v347;
            v347 -= 8;
            *(_QWORD *)v346 = v349;
            v346 -= 8;
            v348 += 8;
          }
          while (v348);
          v331 = (mgcl::muid *)((char *)v331 - (v332 & 0xFFFFFFFFFFFFFFF8));
          if (v332 == (v332 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_363;
          goto LABEL_361;
        }
        v340 -= v341;
        v331 = (mgcl::muid *)((char *)v331 - v341);
      }
LABEL_361:
      v350 = v340 - 1;
      do
      {
        v351 = *((_BYTE *)v331 - 1);
        v331 = (mgcl::muid *)((char *)v331 - 1);
        *v350-- = v351;
      }
      while (v331 != v330);
LABEL_363:
      v331 = v330;
      v340 = (char *)v339;
LABEL_364:
      *(_QWORD *)v8 = v340;
      *(_QWORD *)(v8 + 8) = (char *)v339 + v790;
      *(_QWORD *)(v8 + 16) = (char *)v339 + v338;
      v6 = v797;
      v13 = v798;
      v12 = v795;
      v26 = v801;
      if (v331)
        operator delete(v331);
      goto LABEL_366;
    }
    v13 = v798;
    if (!v333)
      *(_QWORD *)(v8 + 8) = (char *)v330 + v790;
LABEL_366:
    v352 = *(geo **)v8;
    v353 = v814;
    if (v7)
    {
      if (v814)
      {
        v354 = 0;
        v355 = ~(-1 << v814);
        if (v7 < 8)
          goto LABEL_373;
        if ((unint64_t)(v352 - (geo *)v6) < 0x20)
          goto LABEL_373;
        v356 = vdupq_n_s64(v802);
        v357 = (int8x16_t)vdupq_n_s64(v355);
        v358 = (int32x4_t *)((char *)v352 + 16);
        v359 = v789;
        v360 = vdupq_n_s64(v813);
        v361 = v782;
        do
        {
          v362 = vabsq_s32(v361[-1]);
          v363 = vabsq_s32(*v361);
          v364.i64[0] = v362.u32[0];
          v364.i64[1] = v362.u32[1];
          v365 = v364;
          v364.i64[0] = v362.u32[2];
          v364.i64[1] = v362.u32[3];
          v366 = v364;
          v364.i64[0] = v363.u32[0];
          v364.i64[1] = v363.u32[1];
          v367 = v364;
          v364.i64[0] = v363.u32[2];
          v364.i64[1] = v363.u32[3];
          v368 = (uint64x2_t)vnegq_s64(v356);
          v358[-1] = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v365, v368), v357), v360), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v366, v368), v357), v360));
          *v358 = vuzp1q_s32((int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v367, v368), v357), v360), (int32x4_t)vsubq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v364, v368), v357), v360));
          v361 += 2;
          v358 += 2;
          v359 -= 8;
        }
        while (v359);
        v354 = v789;
        if (v7 != v789)
        {
LABEL_373:
          v369 = v7 - v354;
          v370 = v354;
          v371 = (_DWORD *)((char *)v352 + 4 * v354);
          v372 = &v6->i32[v370];
          do
          {
            v374 = *v372++;
            LODWORD(v373) = v374;
            if (v374 >= 0)
              v373 = v373;
            else
              v373 = -(int)v373;
            *v371++ = ((v373 >> v802) & v355) - v813;
            --v369;
          }
          while (v369);
        }
      }
      else
      {
        if (v7 < 8)
          goto LABEL_384;
        if ((unint64_t)(v352 - (geo *)v6) < 0x20)
          goto LABEL_384;
        v375 = vdupq_n_s32(v813);
        v376 = (int32x4_t *)((char *)v352 + 16);
        v377 = v789;
        v378 = (uint32x4_t *)v782;
        do
        {
          v379 = vsubq_s32((int32x4_t)vshrq_n_u32(*v378, 0x1FuLL), v375);
          v376[-1] = vsubq_s32((int32x4_t)vshrq_n_u32(v378[-1], 0x1FuLL), v375);
          *v376 = v379;
          v378 += 2;
          v376 += 2;
          v377 -= 8;
        }
        while (v377);
        v353 = v789;
        if (v7 != v789)
        {
LABEL_384:
          v380 = v7 - v353;
          v381 = v353;
          v382 = (_DWORD *)((char *)v352 + 4 * v353);
          v383 = &v6->i32[v381];
          do
          {
            v384 = *v383++;
            *v382++ = (v384 >> 31) - v813;
            --v380;
          }
          while (v380);
        }
      }
    }
    v811 = v352;
    if ((v12 & 0x400000000) != 0)
    {
      v385 = *(_QWORD *)(v8 + 24);
      if (*(_QWORD *)(v8 + 32) != v385)
        *(_QWORD *)(v8 + 32) = v385;
      __src = 0uLL;
      *(_QWORD *)&v825[0] = v794;
      v386 = operator new();
      *(_QWORD *)v386 = 0;
      *(_QWORD *)(v386 + 8) = 0;
      *(_DWORD *)(v386 + 24) = 0;
      *(_QWORD *)(v386 + 16) = 0;
      *(_QWORD *)&__src = v386;
      v387 = operator new(2uLL);
      *(_QWORD *)v386 = v387;
      *v387 = 0;
      *(_BYTE *)v387++ = (v42 + 31) & 0x10;
      *(_QWORD *)(v386 + 8) = v387;
      *(_QWORD *)(v386 + 16) = v387;
      *(_DWORD *)(v386 + 24) = 3;
      v388 = __src;
      v389 = (*(_DWORD *)(__src + 24) + 1);
      *(_DWORD *)(__src + 24) = v389;
      *(_BYTE *)(*(_QWORD *)v388 + (v389 >> 3)) |= (((v42 + 31) >> 3) & 1) << (~(_BYTE)v389 & 7);
      v390 = (*(_DWORD *)(v388 + 24) + 1);
      *(_DWORD *)(v388 + 24) = v390;
      *(_BYTE *)(*(_QWORD *)v388 + (v390 >> 3)) |= (((v42 + 31) >> 2) & 1) << (~(_BYTE)v390 & 7);
      v391 = (*(_DWORD *)(v388 + 24) + 1);
      *(_DWORD *)(v388 + 24) = v391;
      *(_BYTE *)(*(_QWORD *)v388 + (v391 >> 3)) |= (((v42 + 31) >> 1) & 1) << (~(_BYTE)v391 & 7);
      v392 = (*(_DWORD *)(v388 + 24) + 1);
      *(_DWORD *)(v388 + 24) = v392;
      *(_BYTE *)(*(_QWORD *)v388 + (v392 >> 3)) |= ((v42 + 31) & 1) << (~(_BYTE)v392 & 7);
      v393 = *(_DWORD *)(v388 + 24) + 1;
      *(_DWORD *)(v388 + 24) = v393;
      if (v7)
      {
        v394 = 0;
        v395 = v42;
        v396 = 64 - v42;
        v397 = (unint64_t)v42 >> 3;
        if ((v42 & 7) != 0)
          ++v397;
        v815 = v397;
        v398 = -(uint64_t)v42;
        v399 = v811;
        v804 = v42;
        do
        {
          v400 = *((unsigned int *)v399 + v394);
          v401 = v395 + v393;
          if ((v401 & 7) != 0)
            v402 = (v401 >> 3) + 1;
          else
            v402 = v401 >> 3;
          v404 = *(char **)v388;
          v403 = *(char **)(v388 + 8);
          v405 = (unint64_t)&v403[-*(_QWORD *)v388];
          if (v405 >= v402)
            goto LABEL_429;
          v406 = 2 * (v815 + v405);
          v407 = v406 - v405;
          if (v406 <= v405)
          {
            if (v406 < v405)
              *(_QWORD *)(v388 + 8) = &v404[v406];
            goto LABEL_428;
          }
          v408 = *(_QWORD *)(v388 + 16);
          if (v408 - (uint64_t)v403 >= v407)
          {
            bzero(*(void **)(v388 + 8), v406 - v405);
            *(_QWORD *)(v388 + 8) = &v403[v407];
            goto LABEL_428;
          }
          v809 = *((unsigned int *)v399 + v394);
          v409 = v408 - (_QWORD)v404;
          v410 = 2 * v409;
          v411 = 2 * (v815 + v405);
          if (2 * v409 <= v406)
            v410 = 2 * (v815 + v405);
          if (v409 >= 0x3FFFFFFFFFFFFFFFLL)
            v412 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v412 = v410;
          v413 = v412;
          v807 = (char *)operator new(v412);
          v805 = &v807[v405];
          bzero(&v807[v405], v407);
          if (v403 == v404)
          {
            v417 = v413;
            v400 = v809;
            *(_QWORD *)v388 = v805;
            *(_QWORD *)(v388 + 8) = &v807[v411];
            *(_QWORD *)(v388 + 16) = &v807[v417];
            v395 = v804;
            if (!v403)
              goto LABEL_428;
LABEL_427:
            operator delete(v403);
            goto LABEL_428;
          }
          if (v405 < 8)
          {
            v414 = v413;
            v415 = v807;
            v400 = v809;
            v416 = &v807[v405];
            goto LABEL_424;
          }
          v416 = &v807[v405];
          v415 = v807;
          v414 = v413;
          v400 = v809;
          if ((unint64_t)(v404 - v807) < 0x20)
            goto LABEL_424;
          if (v405 >= 0x20)
          {
            v418 = v405 & 0xFFFFFFFFFFFFFFE0;
            v419 = &v807[v405 - 16];
            v420 = v403 - 16;
            v421 = v405 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v422 = *(_OWORD *)v420;
              *((_OWORD *)v419 - 1) = *((_OWORD *)v420 - 1);
              *(_OWORD *)v419 = v422;
              v419 -= 32;
              v420 -= 32;
              v421 -= 32;
            }
            while (v421);
            if (v405 == v418)
              goto LABEL_426;
            if ((v405 & 0x18) == 0)
            {
              v416 = &v805[-v418];
              v403 -= v418;
LABEL_424:
              v427 = v416 - 1;
              do
              {
                v428 = *--v403;
                *v427-- = v428;
              }
              while (v403 != v404);
              goto LABEL_426;
            }
          }
          else
          {
            v418 = 0;
          }
          v416 = &v805[-(v405 & 0xFFFFFFFFFFFFFFF8)];
          v423 = &v807[&v403[-v418] - v404 - 8];
          v424 = &v403[-v418 - 8];
          v425 = v418 - (v405 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v426 = *(_QWORD *)v424;
            v424 -= 8;
            *(_QWORD *)v423 = v426;
            v423 -= 8;
            v425 += 8;
          }
          while (v425);
          v403 -= v405 & 0xFFFFFFFFFFFFFFF8;
          if (v405 != (v405 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_424;
LABEL_426:
          v403 = v404;
          *(_QWORD *)v388 = v415;
          *(_QWORD *)(v388 + 8) = &v415[v411];
          *(_QWORD *)(v388 + 16) = &v415[v414];
          v395 = v804;
          if (v404)
            goto LABEL_427;
LABEL_428:
          v388 = __src;
          bzero((void *)(v405 + *(_QWORD *)__src), *(_QWORD *)(__src + 8) - (v405 + *(_QWORD *)__src));
          v393 = *(_DWORD *)(v388 + 24);
LABEL_429:
          v429 = 0;
          v399 = v811;
          do
          {
            *(_BYTE *)(*(_QWORD *)v388 + ((unint64_t)v393 >> 3)) |= (((unint64_t)(v400 << v396) >> (v429 + 63)) & 1) << (~(_BYTE)v393 & 7);
            v393 = *(_DWORD *)(v388 + 24) + 1;
            *(_DWORD *)(v388 + 24) = v393;
            --v429;
          }
          while (v398 != v429);
          ++v394;
        }
        while (v394 != v812);
      }
      if ((v393 & 7) != 0)
        v430 = 8 - (v393 & 7);
      else
        v430 = 0;
      v431 = v430 + v393;
      if ((v431 & 7) != 0)
        v432 = (v431 >> 3) + 1;
      else
        v432 = v431 >> 3;
      v433 = *(char **)v388;
      v434 = *(char **)(v388 + 8);
      v435 = (unint64_t)&v434[-*(_QWORD *)v388];
      if (v435 >= v432)
      {
        v7 = v812;
LABEL_474:
        v457 = v393 + v430;
        *(_DWORD *)(v388 + 24) = v457;
        std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(*(uint64_t *)&v825[0], *(char **)(*(_QWORD *)&v825[0] + 8), v433, &v433[v457 >> 3], v457 >> 3);
        *(_QWORD *)&__src = 0;
        v458 = *(char **)v388;
        if (*(_QWORD *)v388)
        {
          *(_QWORD *)(v388 + 8) = v458;
          operator delete(v458);
        }
        MEMORY[0x18D76437C](v388, 0x1010C40A6F07D10);
        v8 = v787;
        v460 = *(_QWORD *)(v787 + 24);
        v459 = *(_QWORD *)(v787 + 32);
        v461 = v459 - v460;
        if ((unint64_t)(v459 - v460) < *(_QWORD *)(v803 + 8))
        {
          v462 = *(_OWORD *)(v787 + 72);
          *(_QWORD *)(v787 + 72) = v460;
          *(_QWORD *)(v787 + 80) = v459;
          *(_OWORD *)(v787 + 24) = v462;
          v463 = *(_QWORD *)(v787 + 88);
          *(_QWORD *)(v787 + 88) = *(_QWORD *)(v787 + 40);
          *(_QWORD *)(v787 + 40) = v463;
          *(_BYTE *)v803 = 4;
          *(_QWORD *)(v803 + 8) = v461;
          *(_QWORD *)(v803 + 16) = v814;
          *(_QWORD *)(v803 + 24) = v813;
          *(_QWORD *)(v803 + 32) = 0;
          *(_DWORD *)(v803 + 40) = 0;
        }
        v464 = *((_QWORD *)&__src + 1);
        v6 = v797;
        v13 = v798;
        v12 = v795;
        v352 = v811;
        if (*((_QWORD *)&__src + 1))
        {
          v465 = (void *)**((_QWORD **)&__src + 1);
          if (**((_QWORD **)&__src + 1))
          {
            *(_QWORD *)(*((_QWORD *)&__src + 1) + 8) = v465;
            operator delete(v465);
          }
          MEMORY[0x18D76437C](v464, 0x10C402FEFCB83);
        }
        v466 = __src;
        if ((_QWORD)__src)
        {
          v467 = *(void **)__src;
          if (*(_QWORD *)__src)
          {
            *(_QWORD *)(__src + 8) = v467;
            operator delete(v467);
          }
          MEMORY[0x18D76437C](v466, 0x1010C40A6F07D10);
        }
        v26 = v801;
        goto LABEL_487;
      }
      v436 = v435 + (v430 >> 3);
      if ((v430 & 7) != 0)
        ++v436;
      v437 = 2 * v436;
      v438 = 2 * v436 - v435;
      v7 = v812;
      if (2 * v436 <= v435)
      {
        if (2 * v436 < v435)
          *(_QWORD *)(v388 + 8) = &v433[v437];
        goto LABEL_473;
      }
      v439 = *(_QWORD *)(v388 + 16);
      if (v439 - (uint64_t)v434 >= v438)
      {
        bzero(*(void **)(v388 + 8), v438);
        *(_QWORD *)(v388 + 8) = &v434[v438];
        goto LABEL_473;
      }
      v440 = v439 - (_QWORD)v433;
      v441 = 2 * v440;
      if (2 * v440 <= v437)
        v441 = v437;
      if (v440 >= 0x3FFFFFFFFFFFFFFFLL)
        v442 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v442 = v441;
      v443 = v442;
      v444 = operator new(v442);
      v816 = &v444[v435];
      bzero(&v444[v435], v438);
      if (v434 == v433)
      {
        *(_QWORD *)v388 = v816;
        *(_QWORD *)(v388 + 8) = &v444[v437];
        *(_QWORD *)(v388 + 16) = &v444[v443];
        if (!v434)
          goto LABEL_473;
        goto LABEL_472;
      }
      if (v435 < 8)
      {
        v445 = &v444[v435];
        goto LABEL_469;
      }
      v445 = &v444[v435];
      if ((unint64_t)(v433 - v444) >= 0x20)
      {
        if (v435 < 0x20)
        {
          v446 = 0;
          goto LABEL_464;
        }
        v446 = v435 & 0xFFFFFFFFFFFFFFE0;
        v447 = &v444[v435 - 16];
        v448 = v434 - 16;
        v449 = v435 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v450 = *(_OWORD *)v448;
          *(v447 - 1) = *((_OWORD *)v448 - 1);
          *v447 = v450;
          v447 -= 2;
          v448 -= 32;
          v449 -= 32;
        }
        while (v449);
        if (v435 == v446)
          goto LABEL_471;
        if ((v435 & 0x18) != 0)
        {
LABEL_464:
          v445 = &v816[-(v435 & 0xFFFFFFFFFFFFFFF8)];
          v451 = &v444[&v434[-v446] - v433 - 8];
          v452 = &v434[-v446 - 8];
          v453 = v446 - (v435 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v454 = *(_QWORD *)v452;
            v452 -= 8;
            *v451-- = v454;
            v453 += 8;
          }
          while (v453);
          v434 -= v435 & 0xFFFFFFFFFFFFFFF8;
          if (v435 != (v435 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_469;
LABEL_471:
          v434 = v433;
          *(_QWORD *)v388 = v444;
          *(_QWORD *)(v388 + 8) = &v444[v437];
          *(_QWORD *)(v388 + 16) = &v444[v443];
          if (v433)
LABEL_472:
            operator delete(v434);
LABEL_473:
          v388 = __src;
          bzero((void *)(v435 + *(_QWORD *)__src), *(_QWORD *)(__src + 8) - (v435 + *(_QWORD *)__src));
          v393 = *(_DWORD *)(v388 + 24);
          v433 = *(char **)v388;
          goto LABEL_474;
        }
        v445 = &v816[-v446];
        v434 -= v446;
      }
LABEL_469:
      v455 = v445 - 1;
      do
      {
        v456 = *--v434;
        *v455-- = v456;
      }
      while (v434 != v433);
      goto LABEL_471;
    }
LABEL_487:
    if ((v12 & 0x800000000) == 0)
      goto LABEL_714;
    if (v7)
    {
      v468 = 0;
      v469 = -1;
      v470 = -1;
      do
      {
        v472 = 0;
        v471 = 0;
        v473 = v468++;
        v474 = 1;
        while (1)
        {
          v475 = (*((_DWORD *)v352 + v472) >> v473) + v468;
          if (__CFADD__(v471, v475))
            break;
          v471 += v475;
          v472 = v474++;
          if (v7 <= v472)
            goto LABEL_491;
        }
        v471 = -1;
LABEL_491:
        if (v471 < v470)
        {
          v470 = v471;
          v469 = v473;
        }
      }
      while (v468 != 32);
    }
    else
    {
      v469 = 0;
    }
    v806 = v469;
    v476 = *(_QWORD *)(v8 + 24);
    if (*(_QWORD *)(v8 + 32) != v476)
      *(_QWORD *)(v8 + 32) = v476;
    __src = 0uLL;
    *(_QWORD *)&v825[0] = v794;
    v477 = operator new();
    *(_QWORD *)v477 = 0;
    *(_QWORD *)(v477 + 8) = 0;
    *(_DWORD *)(v477 + 24) = 0;
    *(_QWORD *)(v477 + 16) = 0;
    *(_QWORD *)&__src = v477;
    v478 = operator new(2uLL);
    *(_QWORD *)v477 = v478;
    *v478 = 0;
    *(_BYTE *)v478++ = 32;
    *(_QWORD *)(v477 + 8) = v478;
    *(_QWORD *)(v477 + 16) = v478;
    *(_DWORD *)(v477 + 24) = 2;
    v479 = __src;
    v480 = (*(_DWORD *)(__src + 24) + 1);
    *(_DWORD *)(__src + 24) = v480;
    if (((v480 + 5) & 7) != 0)
      v481 = ((unint64_t)(v480 + 5) >> 3) + 1;
    else
      v481 = (unint64_t)(v480 + 5) >> 3;
    v482 = *(char **)v479;
    v483 = *(char **)(v479 + 8);
    v484 = (unint64_t)&v483[-*(_QWORD *)v479];
    if (v484 >= v481)
      goto LABEL_536;
    v485 = 2 * v484 + 2;
    v486 = v485 - v484;
    if (v485 <= v484)
    {
      if (v485 < v484)
      {
        v483 = &v482[v485];
        *(_QWORD *)(v479 + 8) = &v482[v485];
      }
      goto LABEL_535;
    }
    v487 = *(_QWORD *)(v479 + 16);
    if (v487 - (uint64_t)v483 >= v486)
    {
      bzero(*(void **)(v479 + 8), v485 - v484);
      *(_QWORD *)(v479 + 8) = &v483[v486];
      v483 += v486;
      goto LABEL_535;
    }
    v488 = v487 - (_QWORD)v482;
    v489 = 2 * v488;
    if (2 * v488 <= v485)
      v489 = 2 * v484 + 2;
    if (v488 >= 0x3FFFFFFFFFFFFFFFLL)
      v490 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v490 = v489;
    v491 = operator new(v490);
    v492 = &v491[v484];
    bzero(&v491[v484], v485 - v484);
    if (v483 == v482)
    {
      v482 = v483;
      v483 = &v491[v485];
      *(_QWORD *)v479 = v492;
      *(_QWORD *)(v479 + 8) = &v491[v485];
      *(_QWORD *)(v479 + 16) = &v491[v490];
      if (!v482)
        goto LABEL_535;
      goto LABEL_534;
    }
    if (v484 < 8 || (unint64_t)(v482 - v491) < 0x20)
      goto LABEL_531;
    if (v484 < 0x20)
    {
      v493 = 0;
      goto LABEL_526;
    }
    v493 = v484 & 0xFFFFFFFFFFFFFFE0;
    v494 = &v491[v484 - 16];
    v495 = v483 - 16;
    v496 = v484 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v497 = *(_OWORD *)v495;
      *(v494 - 1) = *((_OWORD *)v495 - 1);
      *v494 = v497;
      v494 -= 2;
      v495 -= 32;
      v496 -= 32;
    }
    while (v496);
    if (v484 != v493)
    {
      if ((v484 & 0x18) == 0)
      {
        v492 -= v493;
        v483 -= v493;
        goto LABEL_531;
      }
LABEL_526:
      v492 -= v484 & 0xFFFFFFFFFFFFFFF8;
      v498 = &v491[&v483[-v493] - v482 - 8];
      v499 = &v483[-v493 - 8];
      v500 = v493 - (v484 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v501 = *(_QWORD *)v499;
        v499 -= 8;
        *v498-- = v501;
        v500 += 8;
      }
      while (v500);
      v483 -= v484 & 0xFFFFFFFFFFFFFFF8;
      if (v484 == (v484 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_533;
LABEL_531:
      v502 = v492 - 1;
      do
      {
        v503 = *--v483;
        *v502-- = v503;
      }
      while (v483 != v482);
    }
LABEL_533:
    v483 = &v491[v485];
    *(_QWORD *)v479 = v491;
    *(_QWORD *)(v479 + 8) = &v491[v485];
    *(_QWORD *)(v479 + 16) = &v491[v490];
    if (v482)
    {
LABEL_534:
      operator delete(v482);
      v483 = *(char **)(v479 + 8);
    }
LABEL_535:
    bzero((void *)(v484 + *(_QWORD *)v479), (size_t)&v483[-v484 - *(_QWORD *)v479]);
    LODWORD(v480) = *(_DWORD *)(v479 + 24);
    v482 = *(char **)v479;
LABEL_536:
    LOBYTE(v504) = v806;
    v482[(unint64_t)v480 >> 3] |= ((v806 >> 4) & 1) << (~(_BYTE)v480 & 7);
    v505 = (*(_DWORD *)(v479 + 24) + 1);
    *(_DWORD *)(v479 + 24) = v505;
    *(_BYTE *)(*(_QWORD *)v479 + (v505 >> 3)) |= ((v806 >> 3) & 1) << (~(_BYTE)v505 & 7);
    v506 = (*(_DWORD *)(v479 + 24) + 1);
    *(_DWORD *)(v479 + 24) = v506;
    *(_BYTE *)(*(_QWORD *)v479 + (v506 >> 3)) |= ((v806 >> 2) & 1) << (~(_BYTE)v506 & 7);
    v507 = (*(_DWORD *)(v479 + 24) + 1);
    *(_DWORD *)(v479 + 24) = v507;
    *(_BYTE *)(*(_QWORD *)v479 + (v507 >> 3)) |= ((v806 >> 1) & 1) << (~(_BYTE)v507 & 7);
    v508 = (*(_DWORD *)(v479 + 24) + 1);
    *(_DWORD *)(v479 + 24) = v508;
    *(_BYTE *)(*(_QWORD *)v479 + (v508 >> 3)) |= (v806 & 1) << (~(_BYTE)v508 & 7);
    v509 = *(_DWORD *)(v479 + 24) + 1;
    *(_DWORD *)(v479 + 24) = v509;
    if (!v7)
      goto LABEL_660;
    v510 = 0;
    v511 = (unint64_t)v806 >> 3;
    if ((v806 & 7) != 0)
      ++v511;
    v799 = v511;
    v512 = v811;
    do
    {
      v810 = v510;
      v808 = *((_DWORD *)v512 + v510);
      v513 = v808 >> v504;
      v514 = *(_DWORD *)(v479 + 24);
      v817 = v808 >> v504;
      if (v808 >> v504)
      {
        v515 = 0;
        while (1)
        {
          v517 = v514 + 1;
          if ((v517 & 7) != 0)
            v518 = (v517 >> 3) + 1;
          else
            v518 = v517 >> 3;
          v516 = *(char **)v479;
          v519 = *(char **)(v479 + 8);
          v520 = (unint64_t)&v519[-*(_QWORD *)v479];
          if (v520 >= v518)
            goto LABEL_545;
          v521 = 2 * v520 + 2;
          v522 = v521 - v520;
          if (v521 <= v520)
          {
            if (v521 < v520)
              *(_QWORD *)(v479 + 8) = &v516[v521];
            goto LABEL_544;
          }
          v523 = *(_QWORD *)(v479 + 16);
          if (v523 - (uint64_t)v519 < v522)
            break;
          bzero(*(void **)(v479 + 8), v521 - v520);
          *(_QWORD *)(v479 + 8) = &v519[v522];
          v513 = v817;
LABEL_544:
          v479 = __src;
          bzero((void *)(v520 + *(_QWORD *)__src), *(_QWORD *)(__src + 8) - (v520 + *(_QWORD *)__src));
          v514 = *(_DWORD *)(v479 + 24);
          v516 = *(char **)v479;
LABEL_545:
          v516[(unint64_t)v514 >> 3] |= 1 << (~(_BYTE)v514 & 7);
          v514 = *(_DWORD *)(v479 + 24) + 1;
          *(_DWORD *)(v479 + 24) = v514;
          if (++v515 == v513)
            goto LABEL_578;
        }
        v524 = v523 - (_QWORD)v516;
        v525 = 2 * v524;
        if (2 * v524 <= v521)
          v525 = 2 * v520 + 2;
        if (v524 >= 0x3FFFFFFFFFFFFFFFLL)
          v526 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v526 = v525;
        v527 = (char *)operator new(v526);
        v528 = &v527[v520];
        bzero(&v527[v520], v521 - v520);
        if (v519 == v516)
        {
LABEL_576:
          *(_QWORD *)v479 = v528;
          *(_QWORD *)(v479 + 8) = &v527[v521];
          *(_QWORD *)(v479 + 16) = &v527[v526];
          v513 = v817;
          if (v519)
            operator delete(v519);
          goto LABEL_544;
        }
        if (v520 >= 8 && (unint64_t)(v516 - v527) >= 0x20)
        {
          if (v520 < 0x20)
          {
            v529 = 0;
            goto LABEL_568;
          }
          v529 = v520 & 0xFFFFFFFFFFFFFFE0;
          v530 = &v527[v520 - 16];
          v531 = v519 - 16;
          v532 = v520 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v533 = *(_OWORD *)v531;
            *((_OWORD *)v530 - 1) = *((_OWORD *)v531 - 1);
            *(_OWORD *)v530 = v533;
            v530 -= 32;
            v531 -= 32;
            v532 -= 32;
          }
          while (v532);
          if (v520 == v529)
            goto LABEL_575;
          if ((v520 & 0x18) != 0)
          {
LABEL_568:
            v528 -= v520 & 0xFFFFFFFFFFFFFFF8;
            v534 = &v527[&v519[-v529] - v516 - 8];
            v535 = &v519[-v529 - 8];
            v536 = v529 - (v520 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v537 = *(_QWORD *)v535;
              v535 -= 8;
              *(_QWORD *)v534 = v537;
              v534 -= 8;
              v536 += 8;
            }
            while (v536);
            v519 -= v520 & 0xFFFFFFFFFFFFFFF8;
            if (v520 == (v520 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_575;
            goto LABEL_573;
          }
          v528 -= v529;
          v519 -= v529;
        }
LABEL_573:
        v538 = v528 - 1;
        do
        {
          v539 = *--v519;
          *v538-- = v539;
        }
        while (v519 != v516);
LABEL_575:
        v519 = v516;
        v528 = v527;
        goto LABEL_576;
      }
LABEL_578:
      v540 = v514 + 1;
      if ((v540 & 7) != 0)
        v541 = (v540 >> 3) + 1;
      else
        v541 = v540 >> 3;
      v542 = *(char **)v479;
      v543 = *(char **)(v479 + 8);
      v544 = (unint64_t)&v543[-*(_QWORD *)v479];
      if (v544 >= v541)
      {
        v7 = v812;
        v553 = v806;
        goto LABEL_615;
      }
      v545 = 2 * v544 + 2;
      v546 = v545 - v544;
      if (v545 <= v544)
      {
        v7 = v812;
        v553 = v806;
        if (v545 < v544)
          *(_QWORD *)(v479 + 8) = &v542[v545];
        goto LABEL_614;
      }
      v547 = *(_QWORD *)(v479 + 16);
      if (v547 - (uint64_t)v543 >= v546)
      {
        bzero(*(void **)(v479 + 8), v545 - v544);
        *(_QWORD *)(v479 + 8) = &v543[v546];
        v7 = v812;
        v553 = v806;
        goto LABEL_614;
      }
      v548 = v547 - (_QWORD)v542;
      v549 = 2 * v548;
      if (2 * v548 <= v545)
        v549 = 2 * v544 + 2;
      if (v548 >= 0x3FFFFFFFFFFFFFFFLL)
        v550 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v550 = v549;
      v7 = v812;
      v551 = operator new(v550);
      v552 = &v551[v544];
      bzero(&v551[v544], v545 - v544);
      if (v543 == v542)
      {
        v553 = v806;
        *(_QWORD *)v479 = v552;
        *(_QWORD *)(v479 + 8) = &v551[v545];
        *(_QWORD *)(v479 + 16) = &v551[v550];
        if (!v543)
          goto LABEL_614;
LABEL_613:
        operator delete(v543);
        goto LABEL_614;
      }
      if (v544 < 8)
      {
        v553 = v806;
        goto LABEL_610;
      }
      v553 = v806;
      if ((unint64_t)(v542 - v551) < 0x20)
        goto LABEL_610;
      if (v544 >= 0x20)
      {
        v554 = v544 & 0xFFFFFFFFFFFFFFE0;
        v555 = &v551[v544 - 16];
        v556 = v543 - 16;
        v557 = v544 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v558 = *(_OWORD *)v556;
          *(v555 - 1) = *((_OWORD *)v556 - 1);
          *v555 = v558;
          v555 -= 2;
          v556 -= 32;
          v557 -= 32;
        }
        while (v557);
        if (v544 == v554)
          goto LABEL_612;
        if ((v544 & 0x18) == 0)
        {
          v552 -= v554;
          v543 -= v554;
LABEL_610:
          v563 = v552 - 1;
          do
          {
            v564 = *--v543;
            *v563-- = v564;
          }
          while (v543 != v542);
          goto LABEL_612;
        }
      }
      else
      {
        v554 = 0;
      }
      v552 -= v544 & 0xFFFFFFFFFFFFFFF8;
      v559 = &v551[&v543[-v554] - v542 - 8];
      v560 = &v543[-v554 - 8];
      v561 = v554 - (v544 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v562 = *(_QWORD *)v560;
        v560 -= 8;
        *v559-- = v562;
        v561 += 8;
      }
      while (v561);
      v543 -= v544 & 0xFFFFFFFFFFFFFFF8;
      if (v544 != (v544 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_610;
LABEL_612:
      v543 = v542;
      *(_QWORD *)v479 = v551;
      *(_QWORD *)(v479 + 8) = &v551[v545];
      *(_QWORD *)(v479 + 16) = &v551[v550];
      if (v542)
        goto LABEL_613;
LABEL_614:
      v479 = __src;
      bzero((void *)(v544 + *(_QWORD *)__src), *(_QWORD *)(__src + 8) - (v544 + *(_QWORD *)__src));
      v514 = *(_DWORD *)(v479 + 24);
      v542 = *(char **)v479;
      v543 = *(char **)(v479 + 8);
      v544 = (unint64_t)&v543[-*(_QWORD *)v479];
LABEL_615:
      v565 = v514 + 1;
      *(_DWORD *)(v479 + 24) = v565;
      v566 = v565 + v553;
      if ((v566 & 7) != 0)
        v567 = (v566 >> 3) + 1;
      else
        v567 = v566 >> 3;
      if (v544 >= v567)
      {
        v504 = v806;
        v580 = v810;
        v581 = -(uint64_t)v806;
        v512 = v811;
        v582 = v817;
        if (!v806)
          goto LABEL_540;
        goto LABEL_642;
      }
      v568 = 2 * (v799 + v544);
      v569 = v568 - v544;
      if (v568 <= v544)
      {
        v504 = v806;
        if (v568 < v544)
          *(_QWORD *)(v479 + 8) = &v542[v568];
        goto LABEL_641;
      }
      v570 = *(_QWORD *)(v479 + 16);
      if (v570 - (uint64_t)v543 >= v569)
      {
        bzero(v543, v568 - v544);
        *(_QWORD *)(v479 + 8) = &v543[v569];
        v504 = v806;
        goto LABEL_641;
      }
      v571 = v570 - (_QWORD)v542;
      v572 = 2 * v571;
      if (2 * v571 <= v568)
        v572 = 2 * (v799 + v544);
      if (v571 >= 0x3FFFFFFFFFFFFFFFLL)
        v573 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v573 = v572;
      v574 = operator new(v573);
      v575 = &v574[v544];
      bzero(&v574[v544], v568 - v544);
      v576 = v543 - v542;
      if (v543 == v542)
      {
        v504 = v806;
        *(_QWORD *)v479 = v575;
        *(_QWORD *)(v479 + 8) = &v574[v568];
        *(_QWORD *)(v479 + 16) = &v574[v573];
        if (!v542)
          goto LABEL_641;
LABEL_640:
        operator delete(v542);
        goto LABEL_641;
      }
      if (v576 < 8 || (unint64_t)(&v543[-v544] - v574) < 0x20)
      {
        v577 = v543;
        v504 = v806;
        goto LABEL_630;
      }
      if (v576 < 0x20)
      {
        v586 = 0;
        v504 = v806;
        goto LABEL_654;
      }
      v586 = v576 & 0xFFFFFFFFFFFFFFE0;
      v587 = &v574[v544 - 16];
      v588 = v543 - 16;
      v589 = v576 & 0xFFFFFFFFFFFFFFE0;
      v504 = v806;
      do
      {
        v590 = *(_OWORD *)v588;
        *(v587 - 1) = *((_OWORD *)v588 - 1);
        *v587 = v590;
        v587 -= 2;
        v588 -= 32;
        v589 -= 32;
      }
      while (v589);
      if (v576 != v586)
      {
        if ((v576 & 0x18) != 0)
        {
LABEL_654:
          v577 = &v543[-(v576 & 0xFFFFFFFFFFFFFFF8)];
          v575 -= v576 & 0xFFFFFFFFFFFFFFF8;
          v591 = &v574[v544 - v586 - 8];
          v592 = &v543[-v586 - 8];
          v593 = v586 - (v576 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v594 = *(_QWORD *)v592;
            v592 -= 8;
            *v591-- = v594;
            v593 += 8;
          }
          while (v593);
          if (v576 == (v576 & 0xFFFFFFFFFFFFFFF8))
          {
LABEL_632:
            *(_QWORD *)v479 = v574;
            *(_QWORD *)(v479 + 8) = &v574[v568];
            *(_QWORD *)(v479 + 16) = &v574[v573];
            if (v542)
              goto LABEL_640;
            goto LABEL_641;
          }
        }
        else
        {
          v575 -= v586;
          v577 = &v543[-v586];
        }
LABEL_630:
        v578 = v575 - 1;
        do
        {
          v579 = *--v577;
          *v578-- = v579;
        }
        while (v577 != v542);
        goto LABEL_632;
      }
      *(_QWORD *)v479 = v574;
      *(_QWORD *)(v479 + 8) = &v574[v568];
      *(_QWORD *)(v479 + 16) = &v574[v573];
      if (v542)
        goto LABEL_640;
LABEL_641:
      v479 = __src;
      bzero((void *)(v544 + *(_QWORD *)__src), *(_QWORD *)(__src + 8) - (v544 + *(_QWORD *)__src));
      v580 = v810;
      v581 = -(uint64_t)v806;
      v512 = v811;
      v582 = v817;
      if (!v504)
        goto LABEL_540;
LABEL_642:
      v583 = (unint64_t)(v808 - (v582 << v504)) << (64 - v806);
      *(_BYTE *)(*(_QWORD *)v479 + ((unint64_t)*(unsigned int *)(v479 + 24) >> 3)) |= v583 >> 63 << (~*(_DWORD *)(v479 + 24) & 7);
      v584 = *(_DWORD *)(v479 + 24) + 1;
      *(_DWORD *)(v479 + 24) = v584;
      if (v504 != 1)
      {
        v585 = -1;
        do
        {
          *(_BYTE *)(*(_QWORD *)v479 + ((unint64_t)v584 >> 3)) |= ((v583 >> (v585 + 63)) & 1) << (~(_BYTE)v584 & 7);
          v584 = *(_DWORD *)(v479 + 24) + 1;
          *(_DWORD *)(v479 + 24) = v584;
          --v585;
        }
        while (v581 != v585);
      }
LABEL_540:
      v510 = v580 + 1;
    }
    while (v510 != v7);
    v509 = *(_DWORD *)(v479 + 24);
LABEL_660:
    if ((v509 & 7) != 0)
      v595 = 8 - (v509 & 7);
    else
      v595 = 0;
    v596 = v595 + v509;
    if ((v596 & 7) != 0)
      v597 = (v596 >> 3) + 1;
    else
      v597 = v596 >> 3;
    v598 = *(char **)v479;
    v599 = *(char **)(v479 + 8);
    v600 = (unint64_t)&v599[-*(_QWORD *)v479];
    if (v600 < v597)
    {
      v601 = v600 + (v595 >> 3);
      if ((v595 & 7) != 0)
        ++v601;
      v602 = 2 * v601;
      v603 = 2 * v601 - v600;
      if (2 * v601 <= v600)
      {
        if (2 * v601 < v600)
          *(_QWORD *)(v479 + 8) = &v598[v602];
      }
      else
      {
        v604 = *(_QWORD *)(v479 + 16);
        if (v604 - (uint64_t)v599 >= v603)
        {
          bzero(*(void **)(v479 + 8), v603);
          *(_QWORD *)(v479 + 8) = &v599[v603];
        }
        else
        {
          v605 = v604 - (_QWORD)v598;
          v606 = 2 * v605;
          if (2 * v605 <= v602)
            v606 = v602;
          if (v605 >= 0x3FFFFFFFFFFFFFFFLL)
            v607 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v607 = v606;
          v608 = v607;
          v609 = operator new(v607);
          v818 = &v609[v600];
          bzero(&v609[v600], v603);
          if (v599 == v598)
          {
            *(_QWORD *)v479 = v818;
            *(_QWORD *)(v479 + 8) = &v609[v602];
            *(_QWORD *)(v479 + 16) = &v609[v608];
            if (v599)
              goto LABEL_699;
          }
          else
          {
            if (v600 < 8)
            {
              v610 = &v609[v600];
              goto LABEL_696;
            }
            v610 = &v609[v600];
            if ((unint64_t)(v598 - v609) < 0x20)
              goto LABEL_696;
            if (v600 >= 0x20)
            {
              v611 = v600 & 0xFFFFFFFFFFFFFFE0;
              v612 = &v609[v600 - 16];
              v613 = v599 - 16;
              v614 = v600 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v615 = *(_OWORD *)v613;
                *(v612 - 1) = *((_OWORD *)v613 - 1);
                *v612 = v615;
                v612 -= 2;
                v613 -= 32;
                v614 -= 32;
              }
              while (v614);
              if (v600 != v611)
              {
                if ((v600 & 0x18) == 0)
                {
                  v610 = &v818[-v611];
                  v599 -= v611;
                  goto LABEL_696;
                }
                goto LABEL_691;
              }
            }
            else
            {
              v611 = 0;
LABEL_691:
              v610 = &v818[-(v600 & 0xFFFFFFFFFFFFFFF8)];
              v616 = &v609[&v599[-v611] - v598 - 8];
              v617 = &v599[-v611 - 8];
              v618 = v611 - (v600 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v619 = *(_QWORD *)v617;
                v617 -= 8;
                *v616-- = v619;
                v618 += 8;
              }
              while (v618);
              v599 -= v600 & 0xFFFFFFFFFFFFFFF8;
              if (v600 != (v600 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_696:
                v620 = v610 - 1;
                do
                {
                  v621 = *--v599;
                  *v620-- = v621;
                }
                while (v599 != v598);
              }
            }
            v599 = v598;
            *(_QWORD *)v479 = v609;
            *(_QWORD *)(v479 + 8) = &v609[v602];
            *(_QWORD *)(v479 + 16) = &v609[v608];
            if (v598)
LABEL_699:
              operator delete(v599);
          }
        }
      }
      v479 = __src;
      bzero((void *)(v600 + *(_QWORD *)__src), *(_QWORD *)(__src + 8) - (v600 + *(_QWORD *)__src));
      v509 = *(_DWORD *)(v479 + 24);
      v598 = *(char **)v479;
    }
    v622 = v509 + v595;
    *(_DWORD *)(v479 + 24) = v622;
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(*(uint64_t *)&v825[0], *(char **)(*(_QWORD *)&v825[0] + 8), v598, &v598[v622 >> 3], v622 >> 3);
    *(_QWORD *)&__src = 0;
    v623 = *(char **)v479;
    if (*(_QWORD *)v479)
    {
      *(_QWORD *)(v479 + 8) = v623;
      operator delete(v623);
    }
    MEMORY[0x18D76437C](v479, 0x1010C40A6F07D10);
    v8 = v787;
    v625 = *(_QWORD *)(v787 + 24);
    v624 = *(_QWORD *)(v787 + 32);
    v626 = v624 - v625;
    v6 = v797;
    v13 = v798;
    v12 = v795;
    if ((unint64_t)(v624 - v625) < *(_QWORD *)(v803 + 8))
    {
      v627 = *(_OWORD *)(v787 + 72);
      *(_QWORD *)(v787 + 72) = v625;
      *(_QWORD *)(v787 + 80) = v624;
      *(_OWORD *)(v787 + 24) = v627;
      v628 = *(_QWORD *)(v787 + 88);
      *(_QWORD *)(v787 + 88) = *(_QWORD *)(v787 + 40);
      *(_QWORD *)(v787 + 40) = v628;
      *(_BYTE *)v803 = 4;
      *(_QWORD *)(v803 + 8) = v626;
      *(_QWORD *)(v803 + 16) = v814;
      *(_QWORD *)(v803 + 24) = v813;
      *(_DWORD *)(v803 + 40) = 0;
      *(_QWORD *)(v803 + 32) = 1;
    }
    v629 = *((_QWORD *)&__src + 1);
    v352 = v811;
    if (*((_QWORD *)&__src + 1))
    {
      v630 = (void *)**((_QWORD **)&__src + 1);
      if (**((_QWORD **)&__src + 1))
      {
        *(_QWORD *)(*((_QWORD *)&__src + 1) + 8) = v630;
        operator delete(v630);
      }
      MEMORY[0x18D76437C](v629, 0x10C402FEFCB83);
    }
    v631 = __src;
    if ((_QWORD)__src)
    {
      v632 = *(void **)__src;
      if (*(_QWORD *)__src)
      {
        *(_QWORD *)(__src + 8) = v632;
        operator delete(v632);
      }
      MEMORY[0x18D76437C](v631, 0x1010C40A6F07D10);
    }
    v26 = v801;
LABEL_714:
    if ((v12 & 0x1000000000) == 0)
      goto LABEL_875;
    v822 = geo::computeRiceParam2(v352, v7, v16, v17);
    v823 = v633;
    v634 = *(_QWORD *)(v8 + 24);
    if (*(_QWORD *)(v8 + 32) != v634)
      *(_QWORD *)(v8 + 32) = v634;
    __src = 0uLL;
    *(_QWORD *)&v825[0] = v794;
    v635 = operator new();
    *(_QWORD *)v635 = 0;
    *(_QWORD *)(v635 + 8) = 0;
    *(_DWORD *)(v635 + 24) = 0;
    *(_QWORD *)(v635 + 16) = 0;
    *(_QWORD *)&__src = v635;
    v636 = operator new(2uLL);
    *(_QWORD *)v635 = v636;
    *v636 = 0;
    *(_BYTE *)v636++ = 64;
    *(_QWORD *)(v635 + 8) = v636;
    *(_QWORD *)(v635 + 16) = v636;
    *(_DWORD *)(v635 + 24) = 1;
    v637 = __src;
    v638 = (*(_DWORD *)(__src + 24) + 2);
    *(_DWORD *)(__src + 24) = v638;
    v639 = v822;
    if (((v638 + 5) & 7) != 0)
      v640 = ((unint64_t)(v638 + 5) >> 3) + 1;
    else
      v640 = (unint64_t)(v638 + 5) >> 3;
    v641 = *(char **)v637;
    v642 = *(char **)(v637 + 8);
    v643 = (unint64_t)&v642[-*(_QWORD *)v637];
    if (v643 >= v640)
      goto LABEL_754;
    v644 = 2 * v643 + 2;
    v645 = v644 - v643;
    if (v644 <= v643)
    {
      if (v644 < v643)
      {
        v642 = &v641[v644];
        *(_QWORD *)(v637 + 8) = &v641[v644];
      }
      goto LABEL_753;
    }
    v646 = *(_QWORD *)(v637 + 16);
    if (v646 - (uint64_t)v642 >= v645)
    {
      bzero(*(void **)(v637 + 8), v644 - v643);
      *(_QWORD *)(v637 + 8) = &v642[v645];
      v642 += v645;
      goto LABEL_753;
    }
    v647 = v646 - (_QWORD)v641;
    v648 = 2 * v647;
    if (2 * v647 <= v644)
      v648 = 2 * v643 + 2;
    if (v647 >= 0x3FFFFFFFFFFFFFFFLL)
      v649 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v649 = v648;
    v650 = operator new(v649);
    v651 = &v650[v643];
    bzero(&v650[v643], v644 - v643);
    if (v642 == v641)
    {
      v641 = v642;
      v642 = &v650[v644];
      *(_QWORD *)v637 = v651;
      *(_QWORD *)(v637 + 8) = &v650[v644];
      *(_QWORD *)(v637 + 16) = &v650[v649];
      if (v641)
        goto LABEL_752;
      goto LABEL_753;
    }
    if (v643 < 8 || (unint64_t)(v641 - v650) < 0x20)
      goto LABEL_749;
    if (v643 >= 0x20)
    {
      v652 = v643 & 0xFFFFFFFFFFFFFFE0;
      v653 = &v650[v643 - 16];
      v654 = v642 - 16;
      v655 = v643 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v656 = *(_OWORD *)v654;
        *(v653 - 1) = *((_OWORD *)v654 - 1);
        *v653 = v656;
        v653 -= 2;
        v654 -= 32;
        v655 -= 32;
      }
      while (v655);
      if (v643 == v652)
        goto LABEL_751;
      if ((v643 & 0x18) != 0)
        goto LABEL_744;
      v651 -= v652;
      v642 -= v652;
LABEL_749:
      v661 = v651 - 1;
      do
      {
        v662 = *--v642;
        *v661-- = v662;
      }
      while (v642 != v641);
      goto LABEL_751;
    }
    v652 = 0;
LABEL_744:
    v651 -= v643 & 0xFFFFFFFFFFFFFFF8;
    v657 = &v650[&v642[-v652] - v641 - 8];
    v658 = &v642[-v652 - 8];
    v659 = v652 - (v643 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v660 = *(_QWORD *)v658;
      v658 -= 8;
      *v657-- = v660;
      v659 += 8;
    }
    while (v659);
    v642 -= v643 & 0xFFFFFFFFFFFFFFF8;
    if (v643 != (v643 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_749;
LABEL_751:
    v642 = &v650[v644];
    *(_QWORD *)v637 = v650;
    *(_QWORD *)(v637 + 8) = &v650[v644];
    *(_QWORD *)(v637 + 16) = &v650[v649];
    if (v641)
    {
LABEL_752:
      operator delete(v641);
      v642 = *(char **)(v637 + 8);
    }
LABEL_753:
    bzero((void *)(v643 + *(_QWORD *)v637), (size_t)&v642[-v643 - *(_QWORD *)v637]);
    LODWORD(v638) = *(_DWORD *)(v637 + 24);
    v641 = *(char **)v637;
LABEL_754:
    v641[(unint64_t)v638 >> 3] |= ((v639 >> 4) & 1) << (~(_BYTE)v638 & 7);
    v663 = (*(_DWORD *)(v637 + 24) + 1);
    *(_DWORD *)(v637 + 24) = v663;
    *(_BYTE *)(*(_QWORD *)v637 + (v663 >> 3)) |= ((v639 >> 3) & 1) << (~(_BYTE)v663 & 7);
    v664 = (*(_DWORD *)(v637 + 24) + 1);
    *(_DWORD *)(v637 + 24) = v664;
    *(_BYTE *)(*(_QWORD *)v637 + (v664 >> 3)) |= ((v639 >> 2) & 1) << (~(_BYTE)v664 & 7);
    v665 = (*(_DWORD *)(v637 + 24) + 1);
    *(_DWORD *)(v637 + 24) = v665;
    *(_BYTE *)(*(_QWORD *)v637 + (v665 >> 3)) |= ((v639 >> 1) & 1) << (~(_BYTE)v665 & 7);
    v666 = (*(_DWORD *)(v637 + 24) + 1);
    *(_DWORD *)(v637 + 24) = v666;
    *(_BYTE *)(*(_QWORD *)v637 + (v666 >> 3)) |= (v639 & 1) << (~(_BYTE)v666 & 7);
    v667 = (*(_DWORD *)(v637 + 24) + 1);
    *(_DWORD *)(v637 + 24) = v667;
    v668 = HIDWORD(v822);
    if (((v667 + 5) & 7) != 0)
      v669 = ((unint64_t)(v667 + 5) >> 3) + 1;
    else
      v669 = (unint64_t)(v667 + 5) >> 3;
    v671 = *(char **)v637;
    v670 = *(char **)(v637 + 8);
    v672 = (unint64_t)&v670[-*(_QWORD *)v637];
    v673 = (unsigned int *)v811;
    if (v672 >= v669)
    {
      v683 = __src;
    }
    else
    {
      v674 = 2 * v672 + 2;
      v675 = v674 - v672;
      if (v674 <= v672)
      {
        if (v674 < v672)
          *(_QWORD *)(v637 + 8) = &v671[v674];
      }
      else
      {
        v676 = *(_QWORD *)(v637 + 16);
        if (v676 - (uint64_t)v670 >= v675)
        {
          bzero(*(void **)(v637 + 8), v674 - v672);
          *(_QWORD *)(v637 + 8) = &v670[v675];
        }
        else
        {
          v677 = v676 - (_QWORD)v671;
          v678 = 2 * v677;
          if (2 * v677 <= v674)
            v678 = 2 * v672 + 2;
          if (v677 >= 0x3FFFFFFFFFFFFFFFLL)
            v679 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v679 = v678;
          v680 = (char *)operator new(v679);
          v681 = &v680[v672];
          bzero(&v680[v672], v674 - v672);
          if (v670 != v671)
          {
            if (v672 >= 8 && (unint64_t)(v671 - v680) >= 0x20)
            {
              if (v672 >= 0x20)
              {
                v682 = v672 & 0xFFFFFFFFFFFFFFE0;
                v684 = &v680[v672 - 16];
                v685 = v670 - 16;
                v686 = v672 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v687 = *(_OWORD *)v685;
                  *((_OWORD *)v684 - 1) = *((_OWORD *)v685 - 1);
                  *(_OWORD *)v684 = v687;
                  v684 -= 32;
                  v685 -= 32;
                  v686 -= 32;
                }
                while (v686);
                if (v672 == v682)
                  goto LABEL_785;
                if ((v672 & 0x18) != 0)
                  goto LABEL_778;
                v681 -= v682;
                v670 -= v682;
              }
              else
              {
                v682 = 0;
LABEL_778:
                v681 -= v672 & 0xFFFFFFFFFFFFFFF8;
                v688 = &v680[&v670[-v682] - v671 - 8];
                v689 = &v670[-v682 - 8];
                v690 = v682 - (v672 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v691 = *(_QWORD *)v689;
                  v689 -= 8;
                  *(_QWORD *)v688 = v691;
                  v688 -= 8;
                  v690 += 8;
                }
                while (v690);
                v670 -= v672 & 0xFFFFFFFFFFFFFFF8;
                if (v672 == (v672 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_785:
                  v670 = v671;
                  v681 = v680;
                  goto LABEL_786;
                }
              }
            }
            v692 = v681 - 1;
            do
            {
              v693 = *--v670;
              *v692-- = v693;
            }
            while (v670 != v671);
            goto LABEL_785;
          }
LABEL_786:
          *(_QWORD *)v637 = v681;
          *(_QWORD *)(v637 + 8) = &v680[v674];
          *(_QWORD *)(v637 + 16) = &v680[v679];
          v673 = (unsigned int *)v811;
          if (v670)
            operator delete(v670);
        }
      }
      v683 = __src;
      bzero((void *)(v672 + *(_QWORD *)__src), *(_QWORD *)(__src + 8) - (v672 + *(_QWORD *)__src));
      LODWORD(v667) = *(_DWORD *)(v683 + 24);
      v671 = *(char **)v683;
    }
    v671[(unint64_t)v667 >> 3] |= ((v668 >> 4) & 1) << (~(_BYTE)v667 & 7);
    v694 = (*(_DWORD *)(v683 + 24) + 1);
    *(_DWORD *)(v683 + 24) = v694;
    *(_BYTE *)(*(_QWORD *)v683 + (v694 >> 3)) |= ((v668 >> 3) & 1) << (~(_BYTE)v694 & 7);
    v695 = (*(_DWORD *)(v683 + 24) + 1);
    *(_DWORD *)(v683 + 24) = v695;
    *(_BYTE *)(*(_QWORD *)v683 + (v695 >> 3)) |= ((v668 >> 2) & 1) << (~(_BYTE)v695 & 7);
    v696 = (*(_DWORD *)(v683 + 24) + 1);
    *(_DWORD *)(v683 + 24) = v696;
    *(_BYTE *)(*(_QWORD *)v683 + (v696 >> 3)) |= ((v668 >> 1) & 1) << (~(_BYTE)v696 & 7);
    v697 = (*(_DWORD *)(v683 + 24) + 1);
    *(_DWORD *)(v683 + 24) = v697;
    *(_BYTE *)(*(_QWORD *)v683 + (v697 >> 3)) |= (v668 & 1) << (~(_BYTE)v697 & 7);
    v698 = (*(_DWORD *)(v683 + 24) + 1);
    *(_DWORD *)(v683 + 24) = v698;
    v699 = v823;
    if (((v698 + 5) & 7) != 0)
      v700 = ((unint64_t)(v698 + 5) >> 3) + 1;
    else
      v700 = (unint64_t)(v698 + 5) >> 3;
    v702 = *(char **)v683;
    v701 = *(char **)(v683 + 8);
    v703 = (unint64_t)&v701[-*(_QWORD *)v683];
    if (v703 >= v700)
    {
      v713 = __src;
    }
    else
    {
      v704 = 2 * v703 + 2;
      v705 = v704 - v703;
      if (v704 <= v703)
      {
        if (v704 < v703)
          *(_QWORD *)(v683 + 8) = &v702[v704];
      }
      else
      {
        v706 = *(_QWORD *)(v683 + 16);
        if (v706 - (uint64_t)v701 >= v705)
        {
          bzero(*(void **)(v683 + 8), v704 - v703);
          *(_QWORD *)(v683 + 8) = &v701[v705];
        }
        else
        {
          v707 = v706 - (_QWORD)v702;
          v708 = 2 * v707;
          if (2 * v707 <= v704)
            v708 = 2 * v703 + 2;
          if (v707 >= 0x3FFFFFFFFFFFFFFFLL)
            v709 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v709 = v708;
          v710 = (char *)operator new(v709);
          v711 = &v710[v703];
          bzero(&v710[v703], v704 - v703);
          if (v701 != v702)
          {
            if (v703 >= 8 && (unint64_t)(v702 - v710) >= 0x20)
            {
              if (v703 >= 0x20)
              {
                v712 = v703 & 0xFFFFFFFFFFFFFFE0;
                v714 = &v710[v703 - 16];
                v715 = v701 - 16;
                v716 = v703 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v717 = *(_OWORD *)v715;
                  *((_OWORD *)v714 - 1) = *((_OWORD *)v715 - 1);
                  *(_OWORD *)v714 = v717;
                  v714 -= 32;
                  v715 -= 32;
                  v716 -= 32;
                }
                while (v716);
                if (v703 == v712)
                  goto LABEL_820;
                if ((v703 & 0x18) != 0)
                  goto LABEL_813;
                v711 -= v712;
                v701 -= v712;
              }
              else
              {
                v712 = 0;
LABEL_813:
                v711 -= v703 & 0xFFFFFFFFFFFFFFF8;
                v718 = &v710[&v701[-v712] - v702 - 8];
                v719 = &v701[-v712 - 8];
                v720 = v712 - (v703 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v721 = *(_QWORD *)v719;
                  v719 -= 8;
                  *(_QWORD *)v718 = v721;
                  v718 -= 8;
                  v720 += 8;
                }
                while (v720);
                v701 -= v703 & 0xFFFFFFFFFFFFFFF8;
                if (v703 == (v703 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_820:
                  v701 = v702;
                  v711 = v710;
                  goto LABEL_821;
                }
              }
            }
            v722 = v711 - 1;
            do
            {
              v723 = *--v701;
              *v722-- = v723;
            }
            while (v701 != v702);
            goto LABEL_820;
          }
LABEL_821:
          *(_QWORD *)v683 = v711;
          *(_QWORD *)(v683 + 8) = &v710[v704];
          *(_QWORD *)(v683 + 16) = &v710[v709];
          v673 = (unsigned int *)v811;
          if (v701)
            operator delete(v701);
        }
      }
      v713 = __src;
      bzero((void *)(v703 + *(_QWORD *)__src), *(_QWORD *)(__src + 8) - (v703 + *(_QWORD *)__src));
      LODWORD(v698) = *(_DWORD *)(v713 + 24);
      v702 = *(char **)v713;
    }
    v702[(unint64_t)v698 >> 3] |= ((v699 >> 4) & 1) << (~(_BYTE)v698 & 7);
    v724 = (*(_DWORD *)(v713 + 24) + 1);
    *(_DWORD *)(v713 + 24) = v724;
    *(_BYTE *)(*(_QWORD *)v713 + (v724 >> 3)) |= ((v699 >> 3) & 1) << (~(_BYTE)v724 & 7);
    v725 = (*(_DWORD *)(v713 + 24) + 1);
    *(_DWORD *)(v713 + 24) = v725;
    *(_BYTE *)(*(_QWORD *)v713 + (v725 >> 3)) |= ((v699 >> 2) & 1) << (~(_BYTE)v725 & 7);
    v726 = (*(_DWORD *)(v713 + 24) + 1);
    *(_DWORD *)(v713 + 24) = v726;
    *(_BYTE *)(*(_QWORD *)v713 + (v726 >> 3)) |= ((v699 >> 1) & 1) << (~(_BYTE)v726 & 7);
    v727 = (*(_DWORD *)(v713 + 24) + 1);
    *(_DWORD *)(v713 + 24) = v727;
    *(_BYTE *)(*(_QWORD *)v713 + (v727 >> 3)) |= (v699 & 1) << (~(_BYTE)v727 & 7);
    v728 = *(_DWORD *)(v713 + 24) + 1;
    *(_DWORD *)(v713 + 24) = v728;
    v729 = v812;
    if (v812)
    {
      do
      {
        v730 = *v673++;
        geo::WriteBitstream::packRice2((void ***)&__src, v730, &v822);
        --v729;
      }
      while (v729);
      v728 = *(_DWORD *)(v713 + 24);
    }
    if ((v728 & 7) != 0)
      v731 = 8 - (v728 & 7);
    else
      v731 = 0;
    v732 = v731 + v728;
    if ((v732 & 7) != 0)
      v733 = (v732 >> 3) + 1;
    else
      v733 = v732 >> 3;
    v734 = *(char **)v713;
    v735 = *(char **)(v713 + 8);
    v736 = (unint64_t)&v735[-*(_QWORD *)v713];
    if (v736 >= v733)
      goto LABEL_867;
    v737 = v736 + (v731 >> 3);
    if ((v731 & 7) != 0)
      ++v737;
    v738 = 2 * v737;
    v739 = 2 * v737 - v736;
    if (2 * v737 <= v736)
    {
      if (2 * v737 < v736)
      {
        v735 = &v734[v738];
        *(_QWORD *)(v713 + 8) = &v734[v738];
      }
      goto LABEL_866;
    }
    v740 = *(_QWORD *)(v713 + 16);
    if (v740 - (uint64_t)v735 >= v739)
    {
      bzero(*(void **)(v713 + 8), v739);
      *(_QWORD *)(v713 + 8) = &v735[v739];
      v735 += v739;
      goto LABEL_866;
    }
    v741 = v740 - (_QWORD)v734;
    v742 = 2 * v741;
    if (2 * v741 <= v738)
      v742 = v738;
    if (v741 >= 0x3FFFFFFFFFFFFFFFLL)
      v743 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v743 = v742;
    v744 = operator new(v743);
    v745 = &v744[v736];
    bzero(&v744[v736], v739);
    if (v735 == v734)
    {
      v734 = v735;
      v735 = &v744[v738];
      *(_QWORD *)v713 = v745;
      *(_QWORD *)(v713 + 8) = &v744[v738];
      *(_QWORD *)(v713 + 16) = &v744[v743];
      if (v734)
        goto LABEL_865;
      goto LABEL_866;
    }
    if (v736 < 8 || (unint64_t)(v734 - v744) < 0x20)
      goto LABEL_862;
    if (v736 >= 0x20)
    {
      v746 = v736 & 0xFFFFFFFFFFFFFFE0;
      v747 = &v744[v736 - 16];
      v748 = v735 - 16;
      v749 = v736 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v750 = *(_OWORD *)v748;
        *(v747 - 1) = *((_OWORD *)v748 - 1);
        *v747 = v750;
        v747 -= 2;
        v748 -= 32;
        v749 -= 32;
      }
      while (v749);
      if (v736 == v746)
        goto LABEL_864;
      if ((v736 & 0x18) != 0)
        goto LABEL_857;
      v745 -= v746;
      v735 -= v746;
LABEL_862:
      v755 = v745 - 1;
      do
      {
        v756 = *--v735;
        *v755-- = v756;
      }
      while (v735 != v734);
      goto LABEL_864;
    }
    v746 = 0;
LABEL_857:
    v745 -= v736 & 0xFFFFFFFFFFFFFFF8;
    v751 = &v744[&v735[-v746] - v734 - 8];
    v752 = &v735[-v746 - 8];
    v753 = v746 - (v736 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v754 = *(_QWORD *)v752;
      v752 -= 8;
      *v751-- = v754;
      v753 += 8;
    }
    while (v753);
    v735 -= v736 & 0xFFFFFFFFFFFFFFF8;
    if (v736 != (v736 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_862;
LABEL_864:
    v735 = &v744[v738];
    *(_QWORD *)v713 = v744;
    *(_QWORD *)(v713 + 8) = &v744[v738];
    *(_QWORD *)(v713 + 16) = &v744[v743];
    if (v734)
    {
LABEL_865:
      operator delete(v734);
      v735 = *(char **)(v713 + 8);
    }
LABEL_866:
    bzero((void *)(v736 + *(_QWORD *)v713), (size_t)&v735[-v736 - *(_QWORD *)v713]);
    v728 = *(_DWORD *)(v713 + 24);
    v734 = *(char **)v713;
LABEL_867:
    v757 = v728 + v731;
    *(_DWORD *)(v713 + 24) = v757;
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(*(uint64_t *)&v825[0], *(char **)(*(_QWORD *)&v825[0] + 8), v734, &v734[v757 >> 3], v757 >> 3);
    *(_QWORD *)&__src = 0;
    v758 = *(char **)v713;
    if (*(_QWORD *)v713)
    {
      *(_QWORD *)(v713 + 8) = v758;
      operator delete(v758);
    }
    MEMORY[0x18D76437C](v713, 0x1010C40A6F07D10);
    v8 = v787;
    v760 = *(_QWORD *)(v787 + 24);
    v759 = *(_QWORD *)(v787 + 32);
    v761 = v759 - v760;
    v6 = v797;
    v13 = v798;
    v7 = v812;
    v12 = v795;
    if ((unint64_t)(v759 - v760) < *(_QWORD *)(v803 + 8))
    {
      v762 = *(_OWORD *)(v787 + 72);
      *(_QWORD *)(v787 + 72) = v760;
      *(_QWORD *)(v787 + 80) = v759;
      *(_OWORD *)(v787 + 24) = v762;
      v763 = *(_QWORD *)(v787 + 88);
      *(_QWORD *)(v787 + 88) = *(_QWORD *)(v787 + 40);
      *(_QWORD *)(v787 + 40) = v763;
      *(_BYTE *)v803 = 4;
      *(_QWORD *)(v803 + 8) = v761;
      *(_QWORD *)(v803 + 16) = v814;
      *(_QWORD *)(v803 + 24) = v813;
      *(_DWORD *)(v803 + 40) = 0;
      *(_QWORD *)(v803 + 32) = 2;
    }
    v764 = *((_QWORD *)&__src + 1);
    v26 = v801;
    if (*((_QWORD *)&__src + 1))
    {
      v765 = (void *)**((_QWORD **)&__src + 1);
      if (**((_QWORD **)&__src + 1))
      {
        *(_QWORD *)(*((_QWORD *)&__src + 1) + 8) = v765;
        operator delete(v765);
      }
      MEMORY[0x18D76437C](v764, 0x10C402FEFCB83);
    }
LABEL_875:
    if (*(_BYTE *)v803)
    {
      LOBYTE(__src) = *(_BYTE *)v803;
      v766 = v821;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v821, *(char **)(v821 + 8), (char *)&__src, (char *)&__src + 1, 1);
      geo::WriteBitstream::writeVariableInt((geo::WriteBitstream *)&v819, *(_QWORD *)(v26 + 48 * v796 + 24));
      v767 = v26 + 48 * v796;
      geo::WriteBitstream::writeVariableInt((geo::WriteBitstream *)&v819, *(_QWORD *)(v767 + 8));
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v766, *(char **)(v766 + 8), *v788, &(*v788)[*(_QWORD *)(v767 + 8)], *(_QWORD *)(v767 + 8));
      v24 = v796 + 1;
      v19 = v802;
      v22 = v780 + 2;
      if (v796 + 1 == v13)
        goto LABEL_877;
      continue;
    }
    break;
  }
  if (v792)
    v768 = v792;
  else
    v768 = 6;
  v769 = v820;
  if (v820)
  {
LABEL_883:
    v770 = *(void **)v769;
    if (*(_QWORD *)v769)
    {
      *(_QWORD *)(v769 + 8) = v770;
      operator delete(v770);
    }
    MEMORY[0x18D76437C](v769, 0x10C402FEFCB83);
  }
LABEL_886:
  v771 = v819;
  if (v819)
  {
    v772 = *(void **)v819;
    if (*(_QWORD *)v819)
    {
      *(_QWORD *)(v819 + 8) = v772;
      operator delete(v772);
    }
    MEMORY[0x18D76437C](v771, 0x1010C40A6F07D10);
  }
  **(_DWORD **)v779 = v768;
  if (!v768)
  {
    v773 = *(uint64_t **)(v779 + 40);
    v774 = **(_QWORD **)(v779 + 48);
    if ((unint64_t)*v773 < *(_QWORD *)v774)
    {
      v775 = *v773;
      *(_BYTE *)(v774 + 8) = *((_BYTE *)v773 + 8);
      *(_QWORD *)v774 = v775;
      if ((uint64_t *)v774 != v773)
        std::vector<mgcl::ints::ColumnInfo>::__assign_with_size[abi:ne180100]<mgcl::ints::ColumnInfo*,mgcl::ints::ColumnInfo*>((_QWORD *)(v774 + 16), (char *)v773[2], (char *)v773[3], 0xAAAAAAAAAAAAAAABLL * ((v773[3] - v773[2]) >> 4));
      v776 = **(_QWORD **)(v779 + 48);
      *(_BYTE *)(v776 + 8) = v778;
      if (*(_QWORD *)v776 > **(_QWORD **)(v779 + 56))
        **(_DWORD **)v779 = 1;
      memcpy(**(void ***)(v779 + 64), *v793, **(_QWORD **)(v779 + 40));
    }
  }
}

void sub_189ADDAE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::WriteBitstream::~WriteBitstream((geo::WriteBitstream *)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_189ADDAFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::WriteBitstream::~WriteBitstream((geo::WriteBitstream *)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_189ADDB10(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::WriteBitstream::~WriteBitstream((geo::WriteBitstream *)(v1 - 216));
  _Unwind_Resume(a1);
}

void sub_189ADDB24(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::WriteBitstream::~WriteBitstream((geo::WriteBitstream *)(v1 - 176));
  geo::WriteBitstream::~WriteBitstream((geo::WriteBitstream *)(v1 - 216));
  _Unwind_Resume(a1);
}

void geo::WriteBitstream::writeVariableInt(geo::WriteBitstream *this, unint64_t a2)
{
  unint64_t v4;
  char v5;
  char __src;
  uint64_t v7;

  if (a2 < 0x80)
  {
    LOBYTE(v4) = a2;
  }
  else
  {
    __src = a2 | 0x80;
    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*((_QWORD *)this + 2), *(char **)(*((_QWORD *)this + 2) + 8), &__src, (char *)&v7, 1);
    if (a2 < 0x4000)
    {
      v4 = a2 >> 7;
    }
    else
    {
      __src = (a2 >> 7) | 0x80;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*((_QWORD *)this + 2), *(char **)(*((_QWORD *)this + 2) + 8), &__src, (char *)&v7, 1);
      if (a2 < 0x200000)
      {
        v4 = a2 >> 14;
      }
      else
      {
        __src = (a2 >> 14) | 0x80;
        std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*((_QWORD *)this + 2), *(char **)(*((_QWORD *)this + 2) + 8), &__src, (char *)&v7, 1);
        v4 = a2 >> 28;
        if (a2 >> 28)
        {
          __src = (a2 >> 21) | 0x80;
          std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*((_QWORD *)this + 2), *(char **)(*((_QWORD *)this + 2) + 8), &__src, (char *)&v7, 1);
          if (a2 >> 35)
          {
            __src = v4 | 0x80;
            std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*((_QWORD *)this + 2), *(char **)(*((_QWORD *)this + 2) + 8), &__src, (char *)&v7, 1);
            v4 = a2 >> 35;
            if (a2 >> 42)
            {
              __src = (a2 >> 35) | 0x80;
              std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*((_QWORD *)this + 2), *(char **)(*((_QWORD *)this + 2) + 8), &__src, (char *)&v7, 1);
              v4 = a2 >> 42;
              if (a2 >> 49)
              {
                __src = (a2 >> 42) | 0x80;
                std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*((_QWORD *)this + 2), *(char **)(*((_QWORD *)this + 2) + 8), &__src, (char *)&v7, 1);
                v4 = a2 >> 49;
                if (HIBYTE(a2))
                {
                  __src = (a2 >> 49) | 0x80;
                  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*((_QWORD *)this + 2), *(char **)(*((_QWORD *)this + 2) + 8), &__src, (char *)&v7, 1);
                  v4 = HIBYTE(a2);
                  if ((a2 & 0x8000000000000000) != 0)
                  {
                    __src = HIBYTE(a2) | 0x80;
                    LOBYTE(v4) = 1;
                    std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*((_QWORD *)this + 2), *(char **)(*((_QWORD *)this + 2) + 8), &__src, (char *)&v7, 1);
                  }
                }
              }
            }
          }
        }
        else
        {
          v4 = a2 >> 21;
        }
      }
    }
  }
  v5 = v4;
  std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(*((_QWORD *)this + 2), *(char **)(*((_QWORD *)this + 2) + 8), &v5, &__src, 1);
}

void geo::WriteBitstream::~WriteBitstream(geo::WriteBitstream *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x18D76437C](v2, 0x10C402FEFCB83);
  }
  v4 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v4)
  {
    v5 = *(void **)v4;
    if (*(_QWORD *)v4)
    {
      *(_QWORD *)(v4 + 8) = v5;
      operator delete(v5);
    }
    MEMORY[0x18D76437C](v4, 0x1010C40A6F07D10);
  }
}

void std::vector<mgcl::ints::ColumnInfo>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      v12 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    v8 = v7 + a2;
    if (v7 + a2 > 0x555555555555555)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 4);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x2AAAAAAAAAAAAAALL)
      v10 = 0x555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(48 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[48 * v7];
    v14 = &v11[48 * v10];
    v15 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v17 = *((_OWORD *)v5 - 3);
        v18 = *((_OWORD *)v5 - 2);
        *(_OWORD *)(v13 - 20) = *(_OWORD *)(v5 - 20);
        *((_OWORD *)v13 - 3) = v17;
        *((_OWORD *)v13 - 2) = v18;
        v13 -= 48;
        v5 -= 48;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
      operator delete(v5);
  }
}

uint64_t mgcl::ints::`anonymous namespace'::compressGCLIntArray<BOOL>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, gcl::ArithmeticEncoder ****a6, uint64_t *a7, uint64_t *a8, uint64_t a9)
{
  uint64_t *v9;
  gcl::ArithmeticEncoder ***v17;
  gcl::ArithmeticEncoder **v18;
  uint64_t v19;
  gcl::ArithmeticEncoder ***v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  __int128 v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  char *v46;
  char *v47;
  char *v48;
  size_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  size_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  unint64_t v62;
  __int128 v63;
  char *v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char v69;
  uint64_t v70;
  uint64_t result;
  int v72;
  uint64_t v73;
  unint64_t v74;
  gcl::ArithmeticEncoder **v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  gcl::ArithmeticEncoder **v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  gcl::ArithmeticEncoder **v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  gcl::ArithmeticEncoder **v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  char *v107;
  char *v108;
  unint64_t v109;
  size_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  size_t v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  unint64_t v119;
  char *v120;
  char *v121;
  unint64_t v122;
  __int128 v123;
  char *v124;
  char *v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  char v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  _DWORD v142[2];
  uint64_t v143;
  int v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  unsigned __int8 v148[16];

  if (!a2)
    return 6;
  v9 = a8;
  if (!*a6)
  {
    v17 = (gcl::ArithmeticEncoder ***)operator new();
    v18 = (gcl::ArithmeticEncoder **)operator new();
    v19 = operator new();
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 1136) = 0;
    *(_QWORD *)(v19 + 1152) = 0;
    *(_QWORD *)(v19 + 1144) = 0;
    *(_OWORD *)(v19 + 1072) = 0u;
    *(_OWORD *)(v19 + 1088) = 0u;
    *(_OWORD *)(v19 + 1104) = 0u;
    *v18 = (gcl::ArithmeticEncoder *)v19;
    *v17 = v18;
    v20 = *a6;
    *a6 = v17;
    v9 = a8;
    if (v20)
    {
      mgcl::iarray::Encoder::~Encoder((mgcl::iarray::Encoder *)v20);
      MEMORY[0x18D76437C]();
    }
  }
  v133 = a3;
  v134 = a4;
  v21 = a2 + 69;
  v23 = (char *)*a7;
  v22 = (char *)a7[1];
  v24 = (unint64_t)&v22[-*a7];
  v25 = a2 + 69 - v24;
  if (a2 + 69 <= v24)
  {
    if (a2 + 69 < v24)
      a7[1] = (uint64_t)&v23[v21];
  }
  else
  {
    v26 = a7[2];
    if (v26 - (uint64_t)v22 >= v25)
    {
      bzero((void *)a7[1], a2 + 69 - v24);
      a7[1] = (uint64_t)&v22[v25];
      v9 = a8;
      goto LABEL_37;
    }
    v138 = (unint64_t)&v22[-*a7];
    if ((v21 & 0x8000000000000000) != 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v27 = v26 - (_QWORD)v23;
    v28 = 2 * v27;
    if (2 * v27 <= v21)
      v28 = a2 + 69;
    if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
      v29 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v29 = v28;
    v30 = (char *)operator new(v29);
    v135 = &v30[v29];
    v130 = v30;
    v31 = &v30[a2 + 69];
    v131 = &v30[v138];
    bzero(&v30[v138], v25);
    if (v22 != v23)
    {
      if (v138 < 8)
      {
        v32 = v135;
        v33 = v130;
        v21 = a2 + 69;
        v34 = v131;
        goto LABEL_33;
      }
      v33 = v130;
      v21 = a2 + 69;
      v32 = v135;
      v34 = v131;
      if ((unint64_t)(v23 - v130) >= 0x20)
      {
        if (v138 < 0x20)
        {
          v35 = 0;
          goto LABEL_28;
        }
        v35 = v138 & 0xFFFFFFFFFFFFFFE0;
        v36 = v22 - 16;
        v37 = &v130[v22 - 16 - v23];
        v38 = v138 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v39 = *(_OWORD *)v36;
          *((_OWORD *)v37 - 1) = *((_OWORD *)v36 - 1);
          *(_OWORD *)v37 = v39;
          v37 -= 32;
          v36 -= 32;
          v38 -= 32;
        }
        while (v38);
        if (v138 == v35)
          goto LABEL_35;
        if ((v138 & 0x18) != 0)
        {
LABEL_28:
          v34 = &v131[-(v138 & 0xFFFFFFFFFFFFFFF8)];
          v40 = &v22[-v35 - 8];
          v41 = (char *)(v40 - v23);
          v42 = v35 - (v138 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v43 = *(_QWORD *)v40;
            v40 -= 8;
            *(_QWORD *)&v41[(_QWORD)v130] = v43;
            v41 -= 8;
            v42 += 8;
          }
          while (v42);
          v22 -= v138 & 0xFFFFFFFFFFFFFFF8;
          if (v138 != (v138 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_33;
LABEL_35:
          v22 = v23;
          *a7 = (uint64_t)v33;
          a7[1] = (uint64_t)v31;
          a7[2] = (uint64_t)v32;
          v9 = a8;
          if (!v23)
            goto LABEL_37;
          goto LABEL_36;
        }
        v34 = &v131[-v35];
        v22 -= v35;
      }
LABEL_33:
      v44 = v34 - 1;
      do
      {
        v45 = *--v22;
        *v44-- = v45;
      }
      while (v22 != v23);
      goto LABEL_35;
    }
    v21 = a2 + 69;
    *a7 = (uint64_t)v131;
    a7[1] = (uint64_t)v31;
    a7[2] = (uint64_t)v135;
    v9 = a8;
    if (v22)
LABEL_36:
      operator delete(v22);
  }
LABEL_37:
  v47 = (char *)*v9;
  v46 = (char *)v9[1];
  v48 = &v46[-*v9];
  v49 = v21 - (_QWORD)v48;
  if (v21 <= (unint64_t)v48)
  {
    if (v21 < (unint64_t)v48)
      v9[1] = (uint64_t)&v47[v21];
    goto LABEL_69;
  }
  v50 = v9[2];
  if (v50 - (uint64_t)v46 >= v49)
  {
    bzero((void *)v9[1], v21 - (_QWORD)v48);
    v9[1] = (uint64_t)&v46[v49];
    goto LABEL_69;
  }
  v139 = (unint64_t)&v46[-*v9];
  if ((v21 & 0x8000000000000000) != 0)
    goto LABEL_154;
  v51 = v50 - (_QWORD)v47;
  v52 = 2 * v51;
  if (2 * v51 <= v21)
    v52 = v21;
  if (v51 >= 0x3FFFFFFFFFFFFFFFLL)
    v53 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v53 = v52;
  v54 = (char *)operator new(v53);
  v55 = &v54[v53];
  v132 = v54;
  v136 = &v54[v21];
  v56 = &v54[v139];
  bzero(&v54[v139], v49);
  if (v46 == v47)
  {
    *a8 = (uint64_t)v56;
    a8[1] = (uint64_t)v136;
    a8[2] = (uint64_t)v55;
    if (!v46)
      goto LABEL_69;
    goto LABEL_68;
  }
  if (v139 < 8)
  {
    v57 = v132;
    v58 = v136;
    goto LABEL_65;
  }
  v57 = v132;
  v58 = v136;
  if ((unint64_t)(v47 - v132) < 0x20)
  {
LABEL_65:
    v68 = v56 - 1;
    do
    {
      v69 = *--v46;
      *v68-- = v69;
    }
    while (v46 != v47);
    goto LABEL_67;
  }
  if (v139 < 0x20)
  {
    v59 = 0;
    goto LABEL_60;
  }
  v59 = v139 & 0xFFFFFFFFFFFFFFE0;
  v60 = v46 - 16;
  v61 = &v132[v46 - 16 - v47];
  v62 = v139 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v63 = *(_OWORD *)v60;
    *((_OWORD *)v61 - 1) = *((_OWORD *)v60 - 1);
    *(_OWORD *)v61 = v63;
    v61 -= 32;
    v60 -= 32;
    v62 -= 32;
  }
  while (v62);
  if (v139 == v59)
    goto LABEL_67;
  if ((v139 & 0x18) == 0)
  {
    v56 -= v59;
    v46 -= v59;
    goto LABEL_65;
  }
LABEL_60:
  v56 -= v139 & 0xFFFFFFFFFFFFFFF8;
  v64 = &v46[-v59 - 8];
  v65 = (char *)(v64 - v47);
  v66 = v59 - (v139 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v67 = *(_QWORD *)v64;
    v64 -= 8;
    *(_QWORD *)&v65[(_QWORD)v132] = v67;
    v65 -= 8;
    v66 += 8;
  }
  while (v66);
  v46 -= v139 & 0xFFFFFFFFFFFFFFF8;
  if (v139 != (v139 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_65;
LABEL_67:
  v46 = v47;
  *a8 = (uint64_t)v57;
  a8[1] = (uint64_t)v58;
  a8[2] = (uint64_t)v55;
  if (v47)
LABEL_68:
    operator delete(v46);
LABEL_69:
  v70 = 0;
  LODWORD(result) = 0;
  v142[0] = 2;
  v143 = 0x10000;
  v144 = 1;
  v140 = -1;
  v145 = 0x20000;
  v146 = 0;
  v147 = 0x40000;
  do
  {
    if ((*(_QWORD *)&v142[v70 + 2] & a5) != 0)
    {
      v72 = v142[v70];
      if ((a5 & 0x10000) != 0)
      {
        v141 = 0;
        v73 = *a7;
        v74 = a7[1] - *a7;
        v75 = **a6;
        v76 = 0x100010100000000;
        if (v72 == 2)
          v76 = 0x100040100000000;
        if (!v72)
          v76 = 0x100000100000000;
        *(_QWORD *)v148 = v76;
        LODWORD(result) = gcl::polyline::EncoderImpl::compressAttributes(*v75, a1, 0, 0, 0, a2, 1, v73, v74, (uint64_t *)&v141, v148, 1);
        if ((result - 1) >= 4)
        {
          if ((_DWORD)result)
          {
            LODWORD(result) = 5;
          }
          else
          {
            v93 = v141;
            LODWORD(result) = 0;
            if (v141 < v140)
            {
              v94 = *a8;
              *a8 = *a7;
              *a7 = v94;
              v95 = a8[1];
              a8[1] = a7[1];
              a7[1] = v95;
              v96 = a8[2];
              a8[2] = a7[2];
              a7[2] = v96;
              *(_QWORD *)(a9 + 32) = 0x100000001;
              *(_DWORD *)(a9 + 40) = v72;
              v140 = v93;
            }
          }
        }
      }
      if ((a5 & 0x2000000) != 0)
      {
        v141 = 0;
        v77 = *a7;
        v78 = a7[1] - *a7;
        v79 = **a6;
        v80 = 0x100010200000000;
        if (v72 == 2)
          v80 = 0x100040200000000;
        if (!v72)
          v80 = 0x100000200000000;
        *(_QWORD *)v148 = v80;
        LODWORD(result) = gcl::polyline::EncoderImpl::compressAttributes(*v79, a1, 0, 0, 0, a2, 1, v77, v78, (uint64_t *)&v141, v148, 1);
        if ((result - 1) >= 4)
        {
          if ((_DWORD)result)
          {
            LODWORD(result) = 5;
          }
          else
          {
            v97 = v141;
            LODWORD(result) = 0;
            if (v141 < v140)
            {
              v98 = *a8;
              *a8 = *a7;
              *a7 = v98;
              v99 = a8[1];
              a8[1] = a7[1];
              a7[1] = v99;
              v100 = a8[2];
              a8[2] = a7[2];
              a7[2] = v100;
              *(_QWORD *)(a9 + 32) = 0x100000002;
              *(_DWORD *)(a9 + 40) = v72;
              v140 = v97;
            }
          }
        }
      }
      if ((a5 & 0x4000000) != 0)
      {
        v141 = 0;
        v81 = *a7;
        v82 = a7[1] - *a7;
        v83 = **a6;
        v84 = 0x100010000000000;
        if (v72 == 2)
          v84 = 0x100040000000000;
        if (!v72)
          v84 = 0x100000000000000;
        *(_QWORD *)v148 = v84;
        LODWORD(result) = gcl::polyline::EncoderImpl::compressAttributes(*v83, a1, 0, 0, 0, a2, 1, v81, v82, (uint64_t *)&v141, v148, 1);
        if ((result - 1) >= 4)
        {
          if ((_DWORD)result)
          {
            LODWORD(result) = 5;
          }
          else
          {
            v101 = v141;
            LODWORD(result) = 0;
            if (v141 < v140)
            {
              v102 = *a8;
              *a8 = *a7;
              *a7 = v102;
              v103 = a8[1];
              a8[1] = a7[1];
              a7[1] = v103;
              v104 = a8[2];
              a8[2] = a7[2];
              a7[2] = v104;
              *(_QWORD *)(a9 + 32) = 0x100000000;
              *(_DWORD *)(a9 + 40) = v72;
              v140 = v101;
            }
          }
        }
      }
      if ((a5 & 0x8000000) != 0)
      {
        v141 = 0;
        v85 = *a7;
        v86 = a7[1] - *a7;
        v87 = **a6;
        v88 = 0x100010300000000;
        if (v72 == 2)
          v88 = 0x100040300000000;
        if (!v72)
          v88 = 0x100000300000000;
        *(_QWORD *)v148 = v88;
        LODWORD(result) = gcl::polyline::EncoderImpl::compressAttributes(*v87, a1, 0, 0, 0, a2, 1, v85, v86, (uint64_t *)&v141, v148, 1);
        if ((result - 1) >= 4)
        {
          if ((_DWORD)result)
          {
            LODWORD(result) = 5;
          }
          else
          {
            v89 = v141;
            LODWORD(result) = 0;
            if (v141 < v140)
            {
              v90 = *a8;
              *a8 = *a7;
              *a7 = v90;
              v91 = a8[1];
              a8[1] = a7[1];
              a7[1] = v91;
              v92 = a8[2];
              a8[2] = a7[2];
              a7[2] = v92;
              *(_QWORD *)(a9 + 32) = 0x100000003;
              *(_DWORD *)(a9 + 40) = v72;
              v140 = v89;
            }
          }
        }
      }
    }
    v70 += 4;
  }
  while (v70 != 12);
  if (v140 != -1)
  {
    if (v140 >= 0x1C)
    {
      v105 = a8;
      *(_BYTE *)*a8 = *(_DWORD *)(a9 + 32);
      *(_BYTE *)(*a8 + 1) = *(_DWORD *)(a9 + 40);
      memmove((void *)(*a8 + 2), (const void *)(*a8 + 28), v140 - 28);
      v106 = v140 - 26;
      v108 = (char *)*a8;
      v107 = (char *)a8[1];
      v109 = (unint64_t)&v107[-*a8];
      v110 = v140 - 26 - v109;
      if (v140 - 26 <= v109)
      {
        v118 = (char *)a8[1];
        if (v140 - 26 >= v109)
        {
LABEL_153:
          result = 0;
          *(_QWORD *)(a9 + 16) = v133;
          *(_QWORD *)(a9 + 24) = v134;
          *(_BYTE *)a9 = 1;
          *(_QWORD *)(a9 + 8) = &v118[-*v105];
          return result;
        }
        v118 = &v108[v106];
      }
      else
      {
        v111 = a8[2];
        if (v111 - (uint64_t)v107 < v110)
        {
          if ((v106 & 0x8000000000000000) == 0)
          {
            v112 = v111 - (_QWORD)v108;
            v113 = 2 * v112;
            if (2 * v112 <= v106)
              v113 = v140 - 26;
            if (v112 >= 0x3FFFFFFFFFFFFFFFLL)
              v114 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v114 = v113;
            v115 = (char *)operator new(v114);
            v116 = &v115[v109];
            v117 = &v115[v114];
            v118 = &v115[v106];
            bzero(&v115[v109], v110);
            if (v107 == v108)
              goto LABEL_151;
            if (v109 >= 8 && (unint64_t)(v108 - v115) >= 0x20)
            {
              if (v109 < 0x20)
              {
                v119 = 0;
                goto LABEL_143;
              }
              v119 = v109 & 0xFFFFFFFFFFFFFFE0;
              v120 = v107 - 16;
              v121 = &v115[v107 - 16 - v108];
              v122 = v109 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v123 = *(_OWORD *)v120;
                *((_OWORD *)v121 - 1) = *((_OWORD *)v120 - 1);
                *(_OWORD *)v121 = v123;
                v121 -= 32;
                v120 -= 32;
                v122 -= 32;
              }
              while (v122);
              if (v109 == v119)
                goto LABEL_150;
              if ((v109 & 0x18) != 0)
              {
LABEL_143:
                v116 -= v109 & 0xFFFFFFFFFFFFFFF8;
                v124 = &v107[-v119 - 8];
                v125 = (char *)(v124 - v108);
                v126 = v119 - (v109 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v127 = *(_QWORD *)v124;
                  v124 -= 8;
                  *(_QWORD *)&v125[(_QWORD)v115] = v127;
                  v125 -= 8;
                  v126 += 8;
                }
                while (v126);
                v107 -= v109 & 0xFFFFFFFFFFFFFFF8;
                if (v109 == (v109 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_150;
                goto LABEL_148;
              }
              v116 -= v119;
              v107 -= v119;
            }
LABEL_148:
            v128 = v116 - 1;
            do
            {
              v129 = *--v107;
              *v128-- = v129;
            }
            while (v107 != v108);
LABEL_150:
            v107 = v108;
            v116 = v115;
LABEL_151:
            *a8 = (uint64_t)v116;
            a8[1] = (uint64_t)v118;
            v105 = a8;
            a8[2] = (uint64_t)v117;
            if (v107)
            {
              operator delete(v107);
              v118 = (char *)a8[1];
            }
            goto LABEL_153;
          }
LABEL_154:
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        v118 = &v107[v110];
        bzero((void *)a8[1], v110);
      }
      a8[1] = (uint64_t)v118;
      goto LABEL_153;
    }
    return 6;
  }
  if ((_DWORD)result)
    return result;
  else
    return 6;
}

void sub_189ADEAA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D76437C](v2, 0x20C4093837F09);
  MEMORY[0x18D76437C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t mgcl::ints::`anonymous namespace'::compressGCLIntArray<int>(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int ****a6, uint64_t *a7, uint64_t *a8, uint64_t a9)
{
  uint64_t *v9;
  unsigned int ***v17;
  unsigned int **v18;
  uint64_t v19;
  unsigned int ***v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  __int128 v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  char *v46;
  char *v47;
  char *v48;
  size_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  size_t v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  unint64_t v62;
  __int128 v63;
  char *v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char v69;
  uint64_t v70;
  uint64_t result;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int **v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int **v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int **v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int **v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  char *v107;
  char *v108;
  unint64_t v109;
  size_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  size_t v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  unint64_t v119;
  char *v120;
  char *v121;
  unint64_t v122;
  __int128 v123;
  char *v124;
  char *v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  char v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  _DWORD v142[2];
  uint64_t v143;
  int v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  _QWORD v148[2];

  if (!a2)
    return 6;
  v9 = a8;
  if (!*a6)
  {
    v17 = (unsigned int ***)operator new();
    v18 = (unsigned int **)operator new();
    v19 = operator new();
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 1136) = 0;
    *(_QWORD *)(v19 + 1152) = 0;
    *(_QWORD *)(v19 + 1144) = 0;
    *(_OWORD *)(v19 + 1072) = 0u;
    *(_OWORD *)(v19 + 1088) = 0u;
    *(_OWORD *)(v19 + 1104) = 0u;
    *v18 = (unsigned int *)v19;
    *v17 = v18;
    v20 = *a6;
    *a6 = v17;
    v9 = a8;
    if (v20)
    {
      mgcl::iarray::Encoder::~Encoder((mgcl::iarray::Encoder *)v20);
      MEMORY[0x18D76437C]();
    }
  }
  v133 = a3;
  v134 = a4;
  v21 = 7 * a2 + 69;
  v23 = (char *)*a7;
  v22 = (char *)a7[1];
  v24 = &v22[-*a7];
  v25 = v21 - (_QWORD)v24;
  if (v21 <= (unint64_t)v24)
  {
    if (v21 < (unint64_t)v24)
      a7[1] = (uint64_t)&v23[v21];
  }
  else
  {
    v26 = a7[2];
    if (v26 - (uint64_t)v22 >= v25)
    {
      bzero((void *)a7[1], v21 - (_QWORD)v24);
      a7[1] = (uint64_t)&v22[v25];
      v9 = a8;
      goto LABEL_37;
    }
    v138 = (unint64_t)&v22[-*a7];
    if ((v21 & 0x8000000000000000) != 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v27 = v26 - (_QWORD)v23;
    v28 = 2 * v27;
    if (2 * v27 <= v21)
      v28 = 7 * a2 + 69;
    if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
      v29 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v29 = v28;
    v30 = (char *)operator new(v29);
    v135 = &v30[v29];
    v130 = v30;
    v31 = &v30[7 * a2 + 69];
    v131 = &v30[v138];
    bzero(&v30[v138], v25);
    if (v22 != v23)
    {
      if (v138 < 8)
      {
        v32 = v135;
        v33 = v130;
        v21 = 7 * a2 + 69;
        v34 = v131;
        goto LABEL_33;
      }
      v33 = v130;
      v21 = 7 * a2 + 69;
      v32 = v135;
      v34 = v131;
      if ((unint64_t)(v23 - v130) >= 0x20)
      {
        if (v138 < 0x20)
        {
          v35 = 0;
          goto LABEL_28;
        }
        v35 = v138 & 0xFFFFFFFFFFFFFFE0;
        v36 = v22 - 16;
        v37 = &v130[v22 - 16 - v23];
        v38 = v138 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v39 = *(_OWORD *)v36;
          *((_OWORD *)v37 - 1) = *((_OWORD *)v36 - 1);
          *(_OWORD *)v37 = v39;
          v37 -= 32;
          v36 -= 32;
          v38 -= 32;
        }
        while (v38);
        if (v138 == v35)
          goto LABEL_35;
        if ((v138 & 0x18) != 0)
        {
LABEL_28:
          v34 = &v131[-(v138 & 0xFFFFFFFFFFFFFFF8)];
          v40 = &v22[-v35 - 8];
          v41 = (char *)(v40 - v23);
          v42 = v35 - (v138 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v43 = *(_QWORD *)v40;
            v40 -= 8;
            *(_QWORD *)&v41[(_QWORD)v130] = v43;
            v41 -= 8;
            v42 += 8;
          }
          while (v42);
          v22 -= v138 & 0xFFFFFFFFFFFFFFF8;
          if (v138 != (v138 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_33;
LABEL_35:
          v22 = v23;
          *a7 = (uint64_t)v33;
          a7[1] = (uint64_t)v31;
          a7[2] = (uint64_t)v32;
          v9 = a8;
          if (!v23)
            goto LABEL_37;
          goto LABEL_36;
        }
        v34 = &v131[-v35];
        v22 -= v35;
      }
LABEL_33:
      v44 = v34 - 1;
      do
      {
        v45 = *--v22;
        *v44-- = v45;
      }
      while (v22 != v23);
      goto LABEL_35;
    }
    v21 = 7 * a2 + 69;
    *a7 = (uint64_t)v131;
    a7[1] = (uint64_t)v31;
    a7[2] = (uint64_t)v135;
    v9 = a8;
    if (v22)
LABEL_36:
      operator delete(v22);
  }
LABEL_37:
  v47 = (char *)*v9;
  v46 = (char *)v9[1];
  v48 = &v46[-*v9];
  v49 = v21 - (_QWORD)v48;
  if (v21 <= (unint64_t)v48)
  {
    if (v21 < (unint64_t)v48)
      v9[1] = (uint64_t)&v47[v21];
    goto LABEL_69;
  }
  v50 = v9[2];
  if (v50 - (uint64_t)v46 >= v49)
  {
    bzero((void *)v9[1], v21 - (_QWORD)v48);
    v9[1] = (uint64_t)&v46[v49];
    goto LABEL_69;
  }
  v139 = (unint64_t)&v46[-*v9];
  if ((v21 & 0x8000000000000000) != 0)
    goto LABEL_154;
  v51 = v50 - (_QWORD)v47;
  v52 = 2 * v51;
  if (2 * v51 <= v21)
    v52 = v21;
  if (v51 >= 0x3FFFFFFFFFFFFFFFLL)
    v53 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v53 = v52;
  v54 = (char *)operator new(v53);
  v55 = &v54[v53];
  v132 = v54;
  v136 = &v54[v21];
  v56 = &v54[v139];
  bzero(&v54[v139], v49);
  if (v46 == v47)
  {
    *a8 = (uint64_t)v56;
    a8[1] = (uint64_t)v136;
    a8[2] = (uint64_t)v55;
    if (!v46)
      goto LABEL_69;
    goto LABEL_68;
  }
  if (v139 < 8)
  {
    v57 = v132;
    v58 = v136;
    goto LABEL_65;
  }
  v57 = v132;
  v58 = v136;
  if ((unint64_t)(v47 - v132) < 0x20)
  {
LABEL_65:
    v68 = v56 - 1;
    do
    {
      v69 = *--v46;
      *v68-- = v69;
    }
    while (v46 != v47);
    goto LABEL_67;
  }
  if (v139 < 0x20)
  {
    v59 = 0;
    goto LABEL_60;
  }
  v59 = v139 & 0xFFFFFFFFFFFFFFE0;
  v60 = v46 - 16;
  v61 = &v132[v46 - 16 - v47];
  v62 = v139 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v63 = *(_OWORD *)v60;
    *((_OWORD *)v61 - 1) = *((_OWORD *)v60 - 1);
    *(_OWORD *)v61 = v63;
    v61 -= 32;
    v60 -= 32;
    v62 -= 32;
  }
  while (v62);
  if (v139 == v59)
    goto LABEL_67;
  if ((v139 & 0x18) == 0)
  {
    v56 -= v59;
    v46 -= v59;
    goto LABEL_65;
  }
LABEL_60:
  v56 -= v139 & 0xFFFFFFFFFFFFFFF8;
  v64 = &v46[-v59 - 8];
  v65 = (char *)(v64 - v47);
  v66 = v59 - (v139 & 0xFFFFFFFFFFFFFFF8);
  do
  {
    v67 = *(_QWORD *)v64;
    v64 -= 8;
    *(_QWORD *)&v65[(_QWORD)v132] = v67;
    v65 -= 8;
    v66 += 8;
  }
  while (v66);
  v46 -= v139 & 0xFFFFFFFFFFFFFFF8;
  if (v139 != (v139 & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_65;
LABEL_67:
  v46 = v47;
  *a8 = (uint64_t)v57;
  a8[1] = (uint64_t)v58;
  a8[2] = (uint64_t)v55;
  if (v47)
LABEL_68:
    operator delete(v46);
LABEL_69:
  v70 = 0;
  LODWORD(result) = 0;
  v142[0] = 2;
  v143 = 0x10000;
  v144 = 1;
  v140 = -1;
  v145 = 0x20000;
  v146 = 0;
  v147 = 0x40000;
  do
  {
    if ((*(_QWORD *)&v142[v70 + 2] & a5) != 0)
    {
      v72 = v142[v70];
      if ((a5 & 0x10000) != 0)
      {
        v141 = 0;
        v73 = *a7;
        v74 = a7[1] - *a7;
        v75 = **a6;
        v76 = 0x100010100000000;
        if (v72 == 2)
          v76 = 0x100040100000000;
        if (!v72)
          v76 = 0x100000100000000;
        v148[0] = v76;
        LODWORD(result) = gcl::polyline::EncoderImpl::compressAttributes(*v75, a1, 0, 0, 0, a2, 1uLL, v73, v74, (uint64_t *)&v141, v148, 1);
        if ((result - 1) >= 4)
        {
          if ((_DWORD)result)
          {
            LODWORD(result) = 5;
          }
          else
          {
            v93 = v141;
            LODWORD(result) = 0;
            if (v141 < v140)
            {
              v94 = *a8;
              *a8 = *a7;
              *a7 = v94;
              v95 = a8[1];
              a8[1] = a7[1];
              a7[1] = v95;
              v96 = a8[2];
              a8[2] = a7[2];
              a7[2] = v96;
              *(_QWORD *)(a9 + 32) = 1;
              *(_DWORD *)(a9 + 40) = v72;
              v140 = v93;
            }
          }
        }
      }
      if ((a5 & 0x2000000) != 0)
      {
        v141 = 0;
        v77 = *a7;
        v78 = a7[1] - *a7;
        v79 = **a6;
        v80 = 0x100010200000000;
        if (v72 == 2)
          v80 = 0x100040200000000;
        if (!v72)
          v80 = 0x100000200000000;
        v148[0] = v80;
        LODWORD(result) = gcl::polyline::EncoderImpl::compressAttributes(*v79, a1, 0, 0, 0, a2, 1uLL, v77, v78, (uint64_t *)&v141, v148, 1);
        if ((result - 1) >= 4)
        {
          if ((_DWORD)result)
          {
            LODWORD(result) = 5;
          }
          else
          {
            v97 = v141;
            LODWORD(result) = 0;
            if (v141 < v140)
            {
              v98 = *a8;
              *a8 = *a7;
              *a7 = v98;
              v99 = a8[1];
              a8[1] = a7[1];
              a7[1] = v99;
              v100 = a8[2];
              a8[2] = a7[2];
              a7[2] = v100;
              *(_QWORD *)(a9 + 32) = 2;
              *(_DWORD *)(a9 + 40) = v72;
              v140 = v97;
            }
          }
        }
      }
      if ((a5 & 0x4000000) != 0)
      {
        v141 = 0;
        v81 = *a7;
        v82 = a7[1] - *a7;
        v83 = **a6;
        v84 = 0x100010000000000;
        if (v72 == 2)
          v84 = 0x100040000000000;
        if (!v72)
          v84 = 0x100000000000000;
        v148[0] = v84;
        LODWORD(result) = gcl::polyline::EncoderImpl::compressAttributes(*v83, a1, 0, 0, 0, a2, 1uLL, v81, v82, (uint64_t *)&v141, v148, 1);
        if ((result - 1) >= 4)
        {
          if ((_DWORD)result)
          {
            LODWORD(result) = 5;
          }
          else
          {
            v101 = v141;
            LODWORD(result) = 0;
            if (v141 < v140)
            {
              v102 = *a8;
              *a8 = *a7;
              *a7 = v102;
              v103 = a8[1];
              a8[1] = a7[1];
              a7[1] = v103;
              v104 = a8[2];
              a8[2] = a7[2];
              a7[2] = v104;
              *(_QWORD *)(a9 + 32) = 0;
              *(_DWORD *)(a9 + 40) = v72;
              v140 = v101;
            }
          }
        }
      }
      if ((a5 & 0x8000000) != 0)
      {
        v141 = 0;
        v85 = *a7;
        v86 = a7[1] - *a7;
        v87 = **a6;
        v88 = 0x100010300000000;
        if (v72 == 2)
          v88 = 0x100040300000000;
        if (!v72)
          v88 = 0x100000300000000;
        v148[0] = v88;
        LODWORD(result) = gcl::polyline::EncoderImpl::compressAttributes(*v87, a1, 0, 0, 0, a2, 1uLL, v85, v86, (uint64_t *)&v141, v148, 1);
        if ((result - 1) >= 4)
        {
          if ((_DWORD)result)
          {
            LODWORD(result) = 5;
          }
          else
          {
            v89 = v141;
            LODWORD(result) = 0;
            if (v141 < v140)
            {
              v90 = *a8;
              *a8 = *a7;
              *a7 = v90;
              v91 = a8[1];
              a8[1] = a7[1];
              a7[1] = v91;
              v92 = a8[2];
              a8[2] = a7[2];
              a7[2] = v92;
              *(_QWORD *)(a9 + 32) = 3;
              *(_DWORD *)(a9 + 40) = v72;
              v140 = v89;
            }
          }
        }
      }
    }
    v70 += 4;
  }
  while (v70 != 12);
  if (v140 != -1)
  {
    if (v140 >= 0x1C)
    {
      v105 = a8;
      *(_BYTE *)*a8 = *(_DWORD *)(a9 + 32);
      *(_BYTE *)(*a8 + 1) = *(_DWORD *)(a9 + 40);
      memmove((void *)(*a8 + 2), (const void *)(*a8 + 28), v140 - 28);
      v106 = v140 - 26;
      v108 = (char *)*a8;
      v107 = (char *)a8[1];
      v109 = (unint64_t)&v107[-*a8];
      v110 = v140 - 26 - v109;
      if (v140 - 26 <= v109)
      {
        v118 = (char *)a8[1];
        if (v140 - 26 >= v109)
        {
LABEL_153:
          result = 0;
          *(_QWORD *)(a9 + 16) = v133;
          *(_QWORD *)(a9 + 24) = v134;
          *(_BYTE *)a9 = 1;
          *(_QWORD *)(a9 + 8) = &v118[-*v105];
          return result;
        }
        v118 = &v108[v106];
      }
      else
      {
        v111 = a8[2];
        if (v111 - (uint64_t)v107 < v110)
        {
          if ((v106 & 0x8000000000000000) == 0)
          {
            v112 = v111 - (_QWORD)v108;
            v113 = 2 * v112;
            if (2 * v112 <= v106)
              v113 = v140 - 26;
            if (v112 >= 0x3FFFFFFFFFFFFFFFLL)
              v114 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v114 = v113;
            v115 = (char *)operator new(v114);
            v116 = &v115[v109];
            v117 = &v115[v114];
            v118 = &v115[v106];
            bzero(&v115[v109], v110);
            if (v107 == v108)
              goto LABEL_151;
            if (v109 >= 8 && (unint64_t)(v108 - v115) >= 0x20)
            {
              if (v109 < 0x20)
              {
                v119 = 0;
                goto LABEL_143;
              }
              v119 = v109 & 0xFFFFFFFFFFFFFFE0;
              v120 = v107 - 16;
              v121 = &v115[v107 - 16 - v108];
              v122 = v109 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v123 = *(_OWORD *)v120;
                *((_OWORD *)v121 - 1) = *((_OWORD *)v120 - 1);
                *(_OWORD *)v121 = v123;
                v121 -= 32;
                v120 -= 32;
                v122 -= 32;
              }
              while (v122);
              if (v109 == v119)
                goto LABEL_150;
              if ((v109 & 0x18) != 0)
              {
LABEL_143:
                v116 -= v109 & 0xFFFFFFFFFFFFFFF8;
                v124 = &v107[-v119 - 8];
                v125 = (char *)(v124 - v108);
                v126 = v119 - (v109 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v127 = *(_QWORD *)v124;
                  v124 -= 8;
                  *(_QWORD *)&v125[(_QWORD)v115] = v127;
                  v125 -= 8;
                  v126 += 8;
                }
                while (v126);
                v107 -= v109 & 0xFFFFFFFFFFFFFFF8;
                if (v109 == (v109 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_150;
                goto LABEL_148;
              }
              v116 -= v119;
              v107 -= v119;
            }
LABEL_148:
            v128 = v116 - 1;
            do
            {
              v129 = *--v107;
              *v128-- = v129;
            }
            while (v107 != v108);
LABEL_150:
            v107 = v108;
            v116 = v115;
LABEL_151:
            *a8 = (uint64_t)v116;
            a8[1] = (uint64_t)v118;
            v105 = a8;
            a8[2] = (uint64_t)v117;
            if (v107)
            {
              operator delete(v107);
              v118 = (char *)a8[1];
            }
            goto LABEL_153;
          }
LABEL_154:
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        }
        v118 = &v107[v110];
        bzero((void *)a8[1], v110);
      }
      a8[1] = (uint64_t)v118;
      goto LABEL_153;
    }
    return 6;
  }
  if ((_DWORD)result)
    return result;
  else
    return 6;
}

void sub_189ADF5D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D76437C](v2, 0x20C4093837F09);
  MEMORY[0x18D76437C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

unint64_t geo::computeRiceParam2(geo *this, unint64_t a2, unint64_t a3, unsigned int *a4)
{
  uint64_t v6;
  void *v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  const unsigned int *v17;
  ldiv_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v36;
  unsigned int v37;

  if (a2)
  {
    if (a2 >> 62)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v6 = 4 * a2;
    v7 = operator new(4 * a2);
    bzero(v7, 4 * a2);
    v8 = operator new(4 * a2);
    bzero(v8, 4 * a2);
    v9 = 0;
    v10 = 0;
    LODWORD(v11) = 0;
    v12 = 0;
    v13 = v6 >> 2;
    v14 = -1;
    do
    {
      v36 = v14;
      v37 = v11;
      v16 = v12;
      v17 = 0;
      do
      {
        v18 = ldiv(*((unsigned int *)this + (_QWORD)v17), (1 << v10));
        *((_DWORD *)v7 + (_QWORD)v17) = v18.quot;
        *((_DWORD *)v8 + (_QWORD)v17) = v18.rem;
        v17 = (const unsigned int *)((char *)v17 + 1);
      }
      while ((const unsigned int *)a2 != v17);
      v19 = 0;
      v20 = -1;
      v21 = -1;
      do
      {
        v23 = 0;
        v22 = 0;
        v24 = v19++;
        v25 = 1;
        while (1)
        {
          v26 = (*((_DWORD *)v7 + v23) >> v24) + v19;
          if (__CFADD__(v22, v26))
            break;
          v22 += v26;
          v23 = v25++;
          if (v13 <= v23)
            goto LABEL_17;
        }
        v22 = -1;
LABEL_17:
        if (v22 < v21)
        {
          v21 = v22;
          v20 = v24;
        }
      }
      while (v19 != 32);
      v27 = 0;
      v28 = -1;
      v29 = -1;
      do
      {
        v31 = 0;
        v30 = 0;
        v32 = v27++;
        v33 = 1;
        while (1)
        {
          v34 = (*((_DWORD *)v8 + v31) >> v32) + v27;
          if (__CFADD__(v30, v34))
            break;
          v30 += v34;
          v31 = v33++;
          if (v13 <= v31)
            goto LABEL_26;
        }
        v30 = -1;
LABEL_26:
        if (v30 < v29)
        {
          v29 = v30;
          v28 = v32;
        }
      }
      while (v27 != 32);
      v15 = v29 + v21;
      v14 = v36;
      if (v15 >= v36)
        v12 = v16;
      else
        v12 = v28;
      if (v15 >= v36)
        v11 = v37;
      else
        v11 = v20;
      if (v15 < v36)
      {
        v14 = v15;
        v9 = v10;
      }
      ++v10;
    }
    while (v10 != 32);
    operator delete(v8);
    operator delete(v7);
  }
  else
  {
    v11 = 0;
    v9 = 0;
  }
  return v9 | (unint64_t)(v11 << 32);
}

void sub_189ADF838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  _Unwind_Resume(a1);
}

void geo::WriteBitstream::packRice2(void ***this, unsigned int a2, _DWORD *a3)
{
  _DWORD *v3;
  unsigned int v4;
  int v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _BYTE *v20;
  unint64_t v21;
  uint64_t v22;
  size_t v23;
  char *v24;
  char *v25;
  char *v26;
  unint64_t v27;
  __int128 *v28;
  char *v29;
  unint64_t v30;
  __int128 v31;
  char *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  void **v40;
  unsigned int v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;
  void **v45;
  unint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  size_t v53;
  _BYTE *v54;
  unint64_t v55;
  uint64_t v56;
  size_t v57;
  char *v58;
  char *v59;
  char *v60;
  unint64_t v61;
  __int128 *v62;
  char *v63;
  unint64_t v64;
  __int128 v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char v71;
  uint64_t v72;
  void **v73;
  unsigned int v74;
  char *v75;
  char *v76;
  _DWORD *v77;
  unsigned int v78;
  char *v79;
  int v80;
  char *v81;
  unsigned int v82;

  v3 = a3;
  v4 = a2;
  v6 = *a3;
  v7 = a3[1];
  v8 = a2 >> *a3;
  if (v8 >> v7)
  {
    v9 = v8 >> v7;
    do
    {
      geo::WriteBitstream::flag(this, 1);
      --v9;
    }
    while (v9);
  }
  v10 = v8 << v6;
  geo::WriteBitstream::flag(this, 0);
  v11 = *this;
  v12 = *((unsigned int *)*this + 6) + v7;
  if ((v12 & 7) != 0)
    v13 = (v12 >> 3) + 1;
  else
    v13 = v12 >> 3;
  v15 = *v11;
  v14 = v11[1];
  v16 = v14 - (_BYTE *)*v11;
  if (v16 < v13)
  {
    v80 = v10;
    v78 = v4;
    v17 = v7 >> 3;
    if ((v7 & 7) != 0)
      ++v17;
    v18 = 2 * (v17 + v16);
    v19 = v18 - v16;
    if (v18 <= v16)
    {
      v4 = v78;
      if (v18 < v16)
        v11[1] = &v15[v18];
      goto LABEL_41;
    }
    v20 = v11[2];
    if (v20 - v14 >= v19)
    {
      bzero(v14, v18 - v16);
      v11[1] = &v14[v19];
      v4 = v78;
LABEL_41:
      bzero((char *)**this + v16, (_BYTE *)(*this)[1] - ((_BYTE *)**this + v16));
      v10 = v80;
      goto LABEL_42;
    }
    v77 = v3;
    v21 = v20 - v15;
    v22 = 2 * v21;
    if (2 * v21 <= v18)
      v22 = v18;
    if (v21 >= 0x3FFFFFFFFFFFFFFFLL)
      v23 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v23 = v22;
    v24 = (char *)operator new(v23);
    v76 = &v24[v23];
    v25 = v24;
    v75 = &v24[v18];
    v26 = &v24[v16];
    bzero(&v24[v16], v19);
    if (v14 == v15)
    {
      v4 = v78;
      goto LABEL_39;
    }
    if (v16 < 8)
    {
      v4 = v78;
      goto LABEL_36;
    }
    v4 = v78;
    if ((unint64_t)(v15 - v25) >= 0x20)
    {
      if (v16 < 0x20)
      {
        v27 = 0;
        goto LABEL_31;
      }
      v27 = v16 & 0xFFFFFFFFFFFFFFE0;
      v28 = (__int128 *)(v14 - 16);
      v29 = &v25[v14 - 16 - v15];
      v30 = v16 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v31 = *v28;
        *((_OWORD *)v29 - 1) = *(v28 - 1);
        *(_OWORD *)v29 = v31;
        v29 -= 32;
        v28 -= 2;
        v30 -= 32;
      }
      while (v30);
      if (v16 == v27)
        goto LABEL_38;
      if ((v16 & 0x18) != 0)
      {
LABEL_31:
        v26 -= v16 & 0xFFFFFFFFFFFFFFF8;
        v32 = &v14[-v27 - 8];
        v33 = (char *)(v32 - v15);
        v34 = v27 - (v16 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v35 = *(_QWORD *)v32;
          v32 -= 8;
          *(_QWORD *)&v33[(_QWORD)v25] = v35;
          v33 -= 8;
          v34 += 8;
        }
        while (v34);
        v14 -= v16 & 0xFFFFFFFFFFFFFFF8;
        if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_38;
        goto LABEL_36;
      }
      v26 -= v27;
      v14 -= v27;
    }
LABEL_36:
    v36 = v26 - 1;
    do
    {
      v37 = *--v14;
      *v36-- = v37;
    }
    while (v14 != v15);
LABEL_38:
    v14 = v15;
    v26 = v25;
LABEL_39:
    *v11 = v26;
    v11[1] = v75;
    v11[2] = v76;
    v3 = v77;
    if (v14)
      operator delete(v14);
    goto LABEL_41;
  }
LABEL_42:
  v38 = v4 - v10;
  if ((_DWORD)v7)
  {
    v39 = 0;
    v40 = *this;
    v41 = *((_DWORD *)*this + 6);
    do
    {
      *((_BYTE *)*v40 + ((unint64_t)v41 >> 3)) |= (((unint64_t)(v8 - (v8 >> v7 << v7)) << -(char)v7 >> (v39 + 63)) & 1) << (~(_BYTE)v41 & 7);
      v40 = *this;
      v41 = *((_DWORD *)*this + 6) + 1;
      *((_DWORD *)*this + 6) = v41;
      --v39;
    }
    while (-(uint64_t)v7 != v39);
  }
  v42 = v3[2];
  v43 = v38 >> v42;
  if (v38 >> v42)
  {
    v44 = v38 >> v42;
    do
    {
      geo::WriteBitstream::flag(this, 1);
      --v44;
    }
    while (v44);
  }
  geo::WriteBitstream::flag(this, 0);
  v45 = *this;
  v46 = *((unsigned int *)*this + 6) + v42;
  if ((v46 & 7) != 0)
    v47 = (v46 >> 3) + 1;
  else
    v47 = v46 >> 3;
  v49 = *v45;
  v48 = v45[1];
  v50 = v48 - (_BYTE *)*v45;
  if (v50 < v47)
  {
    v51 = v42 >> 3;
    if ((v42 & 7) != 0)
      ++v51;
    v52 = 2 * (v51 + v50);
    v53 = v52 - v50;
    if (v52 <= v50)
    {
      if (v52 < v50)
        v45[1] = &v49[v52];
      goto LABEL_83;
    }
    v54 = v45[2];
    if (v54 - v48 >= v53)
    {
      bzero(v45[1], v52 - v50);
      v45[1] = &v48[v53];
LABEL_83:
      bzero((char *)**this + v50, (_BYTE *)(*this)[1] - ((_BYTE *)**this + v50));
      goto LABEL_84;
    }
    v82 = v38;
    v55 = v54 - v49;
    v56 = 2 * v55;
    if (2 * v55 <= v52)
      v56 = v52;
    if (v55 >= 0x3FFFFFFFFFFFFFFFLL)
      v57 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v57 = v56;
    v58 = (char *)operator new(v57);
    v81 = &v58[v57];
    v59 = v58;
    v79 = &v58[v52];
    v60 = &v58[v50];
    bzero(&v58[v50], v53);
    if (v48 == v49)
    {
LABEL_81:
      *v45 = v60;
      v45[1] = v79;
      v45[2] = v81;
      v38 = v82;
      if (v48)
        operator delete(v48);
      goto LABEL_83;
    }
    if (v50 >= 8 && (unint64_t)(v49 - v59) >= 0x20)
    {
      if (v50 < 0x20)
      {
        v61 = 0;
        goto LABEL_73;
      }
      v61 = v50 & 0xFFFFFFFFFFFFFFE0;
      v62 = (__int128 *)(v48 - 16);
      v63 = &v59[v48 - 16 - v49];
      v64 = v50 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v65 = *v62;
        *((_OWORD *)v63 - 1) = *(v62 - 1);
        *(_OWORD *)v63 = v65;
        v63 -= 32;
        v62 -= 2;
        v64 -= 32;
      }
      while (v64);
      if (v50 == v61)
        goto LABEL_80;
      if ((v50 & 0x18) != 0)
      {
LABEL_73:
        v60 -= v50 & 0xFFFFFFFFFFFFFFF8;
        v66 = &v48[-v61 - 8];
        v67 = (char *)(v66 - v49);
        v68 = v61 - (v50 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v69 = *(_QWORD *)v66;
          v66 -= 8;
          *(_QWORD *)&v67[(_QWORD)v59] = v69;
          v67 -= 8;
          v68 += 8;
        }
        while (v68);
        v48 -= v50 & 0xFFFFFFFFFFFFFFF8;
        if (v50 == (v50 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_80;
        goto LABEL_78;
      }
      v60 -= v61;
      v48 -= v61;
    }
LABEL_78:
    v70 = v60 - 1;
    do
    {
      v71 = *--v48;
      *v70-- = v71;
    }
    while (v48 != v49);
LABEL_80:
    v48 = v49;
    v60 = v59;
    goto LABEL_81;
  }
LABEL_84:
  if ((_DWORD)v42)
  {
    v72 = 0;
    v73 = *this;
    v74 = *((_DWORD *)*this + 6);
    do
    {
      *((_BYTE *)*v73 + ((unint64_t)v74 >> 3)) |= (((unint64_t)(v38 - (v43 << v42)) << -(char)v42 >> (v72 + 63)) & 1) << (~(_BYTE)v74 & 7);
      v73 = *this;
      v74 = *((_DWORD *)*this + 6) + 1;
      *((_DWORD *)*this + 6) = v74;
      --v72;
    }
    while (-(uint64_t)v42 != v72);
  }
}

void std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>(uint64_t a1, char *__dst, _BYTE *__src, _BYTE *a4, unint64_t a5)
{
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  __int128 *v32;
  unint64_t v33;
  __int128 v34;
  char v35;
  __int128 *v36;
  _OWORD *v37;
  unint64_t v38;
  __int128 v39;
  uint64_t *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  _OWORD *v49;
  unint64_t v50;
  __int128 v51;
  char v52;
  char *v53;
  char *v54;

  if ((uint64_t)a5 < 1)
    return;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < (uint64_t)a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = operator new(v15);
      v17 = &v13[(_QWORD)v16];
      v18 = &v13[(_QWORD)v16 + a5];
      v19 = &v13[(_QWORD)v16];
      v20 = __src;
      if (a5 < 8)
        goto LABEL_43;
    }
    else
    {
      v16 = 0;
      v17 = (char *)(__dst - v11);
      v18 = &v13[a5];
      v19 = (char *)(__dst - v11);
      v20 = __src;
      if (a5 < 8)
        goto LABEL_43;
    }
    v19 = v17;
    v20 = __src;
    if ((char *)(&__dst[(_QWORD)v16] - &__src[(_QWORD)v11]) >= (char *)0x20)
    {
      if (a5 >= 0x20)
      {
        v29 = a5 & 0x7FFFFFFFFFFFFFE0;
        v36 = (__int128 *)(__src + 16);
        v37 = (char *)v16 + (_QWORD)v13 + 16;
        v38 = a5 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v39 = *v36;
          *(v37 - 1) = *(v36 - 1);
          *v37 = v39;
          v36 += 2;
          v37 += 2;
          v38 -= 32;
        }
        while (v38);
        if (v29 == a5)
        {
LABEL_44:
          v45 = *(char **)a1;
          if (*(char **)a1 == __dst)
          {
LABEL_53:
            v53 = (char *)v16 + v15;
            if (v10 != __dst)
              memmove(v18, __dst, v10 - __dst);
            v54 = *(char **)a1;
            *(_QWORD *)a1 = v17;
            *(_QWORD *)(a1 + 8) = &v18[v10 - __dst];
            *(_QWORD *)(a1 + 16) = v53;
            if (v54)
              operator delete(v54);
            return;
          }
          v46 = __dst - v45;
          if ((unint64_t)(__dst - v45) >= 0x20)
          {
            v47 = __dst;
            if ((unint64_t)(v11 - (_BYTE *)v16) >= 0x20)
            {
              v47 = &__dst[-(v46 & 0xFFFFFFFFFFFFFFE0)];
              v17 -= v46 & 0xFFFFFFFFFFFFFFE0;
              v48 = __dst - 16;
              v49 = (char *)v16 + __dst - 16 - v11;
              v50 = v46 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v51 = *(_OWORD *)v48;
                *(v49 - 1) = *((_OWORD *)v48 - 1);
                *v49 = v51;
                v49 -= 2;
                v48 -= 32;
                v50 -= 32;
              }
              while (v50);
              if (v46 == (v46 & 0xFFFFFFFFFFFFFFE0))
                goto LABEL_52;
            }
          }
          else
          {
            v47 = __dst;
          }
          do
          {
            v52 = *--v47;
            *--v17 = v52;
          }
          while (v47 != v45);
LABEL_52:
          v10 = *(char **)(a1 + 8);
          goto LABEL_53;
        }
        if ((a5 & 0x18) == 0)
        {
          v20 = &__src[v29];
          v19 = &v17[v29];
          goto LABEL_43;
        }
      }
      else
      {
        v29 = 0;
      }
      v19 = &v17[a5 & 0xFFFFFFFFFFFFFFF8];
      v20 = &__src[a5 & 0xFFFFFFFFFFFFFFF8];
      v40 = (uint64_t *)&__src[v29];
      v41 = (char *)v16 + &__dst[v29] - v11;
      v42 = v29 - (a5 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v43 = *v40++;
        *v41++ = v43;
        v42 += 8;
      }
      while (v42);
      if ((a5 & 0x7FFFFFFFFFFFFFF8) == a5)
        goto LABEL_44;
    }
    do
    {
LABEL_43:
      v44 = *v20++;
      *v19++ = v44;
    }
    while (v19 != v18);
    goto LABEL_44;
  }
  v21 = v10 - __dst;
  if (v10 - __dst >= (uint64_t)a5)
  {
    v22 = &__src[a5];
    v24 = *(char **)(a1 + 8);
    v25 = &__dst[a5];
    v26 = &v10[-a5];
    v27 = v24;
    if ((unint64_t)v10 < a5)
      goto LABEL_30;
    goto LABEL_19;
  }
  v22 = &__src[v21];
  v23 = a4 - &__src[v21];
  if (a4 != &__src[v21])
    memmove(*(void **)(a1 + 8), &__src[v21], a4 - &__src[v21]);
  v24 = &v10[v23];
  *(_QWORD *)(a1 + 8) = &v10[v23];
  if (v21 >= 1)
  {
    v25 = &__dst[a5];
    v26 = &v24[-a5];
    v27 = &v10[v23];
    if (&v24[-a5] >= v10)
      goto LABEL_30;
LABEL_19:
    v28 = &v10[a5] - v24;
    if (v28 >= 0x20)
    {
      v27 = v24;
      if (a5 >= 0x20)
      {
        v30 = &v26[v28 & 0xFFFFFFFFFFFFFFE0];
        v27 = &v24[v28 & 0xFFFFFFFFFFFFFFE0];
        v31 = v24 + 16;
        v32 = (__int128 *)(v26 + 16);
        v33 = v28 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v34 = *v32;
          *(v31 - 1) = *(v32 - 1);
          *v31 = v34;
          v31 += 2;
          v32 += 2;
          v33 -= 32;
        }
        while (v33);
        v26 = v30;
        if (v28 == (v28 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_30;
      }
    }
    else
    {
      v27 = v24;
    }
    do
    {
      v35 = *v26++;
      *v27++ = v35;
    }
    while (v26 != v10);
LABEL_30:
    *(_QWORD *)(a1 + 8) = v27;
    if (v24 != v25)
      memmove(v25, __dst, v24 - v25);
    if (v22 != __src)
      memmove(__dst, __src, v22 - __src);
  }
}

uint64_t geo::WriteBitstream::flag(void ***this, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  char *v31;

  v4 = *this;
  v5 = *((unsigned int *)*this + 6);
  if (((v5 + 1) & 7) != 0)
    v6 = ((unint64_t)(v5 + 1) >> 3) + 1;
  else
    v6 = (unint64_t)(v5 + 1) >> 3;
  v8 = (char *)*v4;
  v7 = (char *)v4[1];
  v9 = v7 - (_BYTE *)*v4;
  if (v9 < v6)
  {
    v10 = 2 * v9 + 2;
    v11 = v10 - v9;
    if (v10 <= v9)
    {
      if (v10 < v9)
        v4[1] = &v8[v10];
      goto LABEL_35;
    }
    v12 = v4[2];
    if (v12 - v7 >= v11)
    {
      bzero(v4[1], v10 - v9);
      v4[1] = &v7[v11];
LABEL_35:
      bzero((char *)**this + v9, (_BYTE *)(*this)[1] - ((_BYTE *)**this + v9));
      LODWORD(v5) = *((_DWORD *)*this + 6);
      v8 = (char *)**this;
      goto LABEL_36;
    }
    v13 = v12 - v8;
    v14 = 2 * v13;
    if (2 * v13 <= v10)
      v14 = 2 * v9 + 2;
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v16 = operator new(v15);
    v17 = (char *)v16 + v15;
    v31 = (char *)v16 + v10;
    v18 = (char *)v16 + v9;
    bzero((char *)v16 + v9, v11);
    if (v7 == v8)
    {
      v16 = (char *)v16 + v9;
      goto LABEL_33;
    }
    if (v9 >= 8 && (unint64_t)(v8 - (_BYTE *)v16) >= 0x20)
    {
      if (v9 < 0x20)
      {
        v19 = 0;
        goto LABEL_25;
      }
      v19 = v9 & 0xFFFFFFFFFFFFFFE0;
      v20 = v7 - 16;
      v21 = (char *)v16 + v7 - 16 - v8;
      v22 = v9 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v23 = *(_OWORD *)v20;
        *((_OWORD *)v21 - 1) = *((_OWORD *)v20 - 1);
        *(_OWORD *)v21 = v23;
        v21 -= 32;
        v20 -= 32;
        v22 -= 32;
      }
      while (v22);
      if (v9 == v19)
        goto LABEL_32;
      if ((v9 & 0x18) != 0)
      {
LABEL_25:
        v18 -= v9 & 0xFFFFFFFFFFFFFFF8;
        v24 = &v7[-v19 - 8];
        v25 = (char *)(v24 - v8);
        v26 = v19 - (v9 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v27 = *(_QWORD *)v24;
          v24 -= 8;
          *(_QWORD *)&v25[(_QWORD)v16] = v27;
          v25 -= 8;
          v26 += 8;
        }
        while (v26);
        v7 -= v9 & 0xFFFFFFFFFFFFFFF8;
        if (v9 == (v9 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_32;
        goto LABEL_30;
      }
      v18 -= v19;
      v7 -= v19;
    }
LABEL_30:
    v28 = v18 - 1;
    do
    {
      v29 = *--v7;
      *v28-- = v29;
    }
    while (v7 != v8);
LABEL_32:
    v7 = v8;
LABEL_33:
    *v4 = v16;
    v4[1] = v31;
    v4[2] = v17;
    if (v7)
      operator delete(v7);
    goto LABEL_35;
  }
LABEL_36:
  v8[(unint64_t)v5 >> 3] |= (_DWORD)a2 << (~(_BYTE)v5 & 7);
  ++*((_DWORD *)*this + 6);
  return a2;
}

void std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  size_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  char *v33;
  _OWORD *v34;
  __int128 *v35;
  unint64_t v36;
  __int128 v37;
  char v38;
  char *v39;
  char *v40;
  unint64_t v41;
  __int128 v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char v48;
  _BYTE *v49;
  char *v50;

  if (a5 < 1)
    return;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v13 = __dst - v11;
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = (char *)operator new(v15);
    else
      v16 = 0;
    v25 = &v16[v13];
    memcpy(&v16[v13], __src, a5);
    if (v11 == __dst)
    {
      v26 = &v16[v13];
      v27 = &v25[a5];
      v28 = &v16[v15];
      v29 = v10 - __dst;
      if (v10 == __dst)
      {
LABEL_51:
        v50 = *(char **)a1;
        *(_QWORD *)a1 = v26;
        *(_QWORD *)(a1 + 8) = &v27[v29];
        *(_QWORD *)(a1 + 16) = v28;
        if (v50)
          operator delete(v50);
        return;
      }
LABEL_50:
      memmove(v27, __dst, v29);
      goto LABEL_51;
    }
    if (v13 < 8)
    {
      v30 = __dst;
      v31 = &v16[v13];
      goto LABEL_47;
    }
    v30 = __dst;
    v31 = &v16[v13];
    if ((unint64_t)(v11 - v16) >= 0x20)
    {
      if (v13 < 0x20)
      {
        v32 = 0;
        goto LABEL_42;
      }
      v32 = v13 & 0xFFFFFFFFFFFFFFE0;
      v39 = __dst - 16;
      v40 = &v16[__dst - 16 - v11];
      v41 = v13 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v42 = *(_OWORD *)v39;
        *((_OWORD *)v40 - 1) = *((_OWORD *)v39 - 1);
        *(_OWORD *)v40 = v42;
        v40 -= 32;
        v39 -= 32;
        v41 -= 32;
      }
      while (v41);
      if (v13 == v32)
        goto LABEL_49;
      if ((v13 & 0x18) != 0)
      {
LABEL_42:
        v30 = &__dst[-(v13 & 0xFFFFFFFFFFFFFFF8)];
        v31 = &v25[-(v13 & 0xFFFFFFFFFFFFFFF8)];
        v43 = &__dst[-v32 - 8];
        v44 = &v16[v43 - v11];
        v45 = v32 - (v13 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v46 = *(_QWORD *)v43;
          v43 -= 8;
          *(_QWORD *)v44 = v46;
          v44 -= 8;
          v45 += 8;
        }
        while (v45);
        if (v13 != (v13 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_47;
LABEL_49:
        v49 = *(_BYTE **)(a1 + 8);
        v26 = v16;
        v27 = &v25[a5];
        v28 = &v16[v15];
        v29 = v49 - __dst;
        if (v49 == __dst)
          goto LABEL_51;
        goto LABEL_50;
      }
      v31 = &v25[-v32];
      v30 = &__dst[-v32];
    }
LABEL_47:
    v47 = v31 - 1;
    do
    {
      v48 = *--v30;
      *v47-- = v48;
    }
    while (v30 != v11);
    goto LABEL_49;
  }
  v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v18 = &__src[a5];
    v20 = *(char **)(a1 + 8);
    v21 = &__dst[a5];
    v22 = &v10[-a5];
    v23 = v20;
    if ((unint64_t)v10 < a5)
      goto LABEL_34;
    goto LABEL_18;
  }
  v18 = &__src[v17];
  v19 = a4 - &__src[v17];
  if (a4 != &__src[v17])
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  v20 = &v10[v19];
  *(_QWORD *)(a1 + 8) = &v10[v19];
  if (v17 >= 1)
  {
    v21 = &__dst[a5];
    v22 = &v20[-a5];
    v23 = &v10[v19];
    if (&v20[-a5] >= v10)
      goto LABEL_34;
LABEL_18:
    v24 = &v10[a5] - v20;
    if (v24 >= 0x20)
    {
      v23 = v20;
      if ((unint64_t)a5 >= 0x20)
      {
        v33 = &v22[v24 & 0xFFFFFFFFFFFFFFE0];
        v23 = &v20[v24 & 0xFFFFFFFFFFFFFFE0];
        v34 = v20 + 16;
        v35 = (__int128 *)(v22 + 16);
        v36 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v37 = *v35;
          *(v34 - 1) = *(v35 - 1);
          *v34 = v37;
          v34 += 2;
          v35 += 2;
          v36 -= 32;
        }
        while (v36);
        v22 = v33;
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_34;
      }
    }
    else
    {
      v23 = v20;
    }
    do
    {
      v38 = *v22++;
      *v23++ = v38;
    }
    while (v22 != v10);
LABEL_34:
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(v21, __dst, v20 - v21);
    if (v18 != __src)
      memmove(__dst, __src, v18 - __src);
  }
}

_QWORD *std::vector<mgcl::ints::ColumnInfo>::__assign_with_size[abi:ne180100]<mgcl::ints::ColumnInfo*,mgcl::ints::ColumnInfo*>(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  size_t v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *result) >> 4) < __sz)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz > 0x555555555555555)
      goto LABEL_23;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v11;
    if (v12 > 0x555555555555555)
LABEL_23:
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v13 = 6 * v12;
    result = operator new(48 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14 - 4);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v16 - v9) >> 4) >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = v14 - 4;
    v19 = (void *)*result;
LABEL_21:
    result = memmove(v19, __src, v18);
    goto LABEL_22;
  }
  v17 = &__src[16 * ((v16 - v9) >> 4)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9 - 4);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v14 - 4;
    v19 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

mgcl::iarray::Decoder *mgcl::iarray::Decoder::Decoder(mgcl::iarray::Decoder *this)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)operator new();
  v3 = operator new();
  *(_QWORD *)(v3 + 20) = 0;
  *(_QWORD *)(v3 + 12) = 0;
  *(_DWORD *)(v3 + 36) = 0;
  *(_QWORD *)(v3 + 28) = 0;
  *(_WORD *)(v3 + 40) = 257;
  *(_QWORD *)(v3 + 44) = 0;
  *(_QWORD *)(v3 + 60) = 0;
  *(_QWORD *)(v3 + 52) = 0;
  *(_DWORD *)(v3 + 67) = 0;
  *(_DWORD *)(v3 + 72) = 0;
  *(_WORD *)(v3 + 76) = 257;
  *(_QWORD *)(v3 + 136) = 0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *v2 = v3;
  *(_QWORD *)this = v2;
  return this;
}

void sub_189AE0914(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t mgcl::iarray::Decoder::decompress(uint64_t **this, const unsigned __int8 *a2, uint64_t a3, unint64_t *a4, int32x4_t *a5)
{
  uint64_t v7;
  uint64_t result;
  const unsigned __int8 *v9;
  uint64_t v10;

  v7 = **this;
  v9 = a2;
  v10 = a3;
  result = gcl::polyline::DecoderImpl::decompressAttributes(v7, (uint64_t)&v9, a5, 0, 0);
  *a4 = a3 - (v10 & ~(v10 >> 63));
  return result;
}

void mgcl::tmesh::Decoder::~Decoder(gcl::tmesh::DecoderImpl ***this)
{
  gcl::tmesh::DecoderImpl **v1;
  gcl::tmesh::DecoderImpl *v2;

  v1 = *this;
  *this = 0;
  if (v1)
  {
    v2 = *v1;
    *v1 = 0;
    if (v2)
    {
      gcl::tmesh::DecoderImpl::~DecoderImpl(v2);
      MEMORY[0x18D76437C]();
    }
    MEMORY[0x18D76437C](v1, 0x20C4093837F09);
  }
}

uint64_t mgcl::raster::PolygonRasterDecoder<unsigned short>::decode(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  int v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  size_t v53;
  char v54;
  unint64_t v55;
  size_t v56;
  int v57;
  int v58;
  char *v59;
  char *v60;
  char *v61;
  size_t v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  size_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  unint64_t v72;
  char *v73;
  char *v74;
  unint64_t v75;
  __int128 v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char v82;
  uint64x2_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  char v88;
  unint64_t v89;
  size_t v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  size_t v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  size_t v101;
  char *v102;
  char *v103;
  char *v104;
  unint64_t v105;
  char *v106;
  char *v107;
  unint64_t v108;
  __int128 v109;
  char *v110;
  int64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  char v115;
  size_t v116;
  unint64_t v117;
  uint64x2_t *v118;
  unint64_t v119;
  BOOL v120;
  unint64_t v121;
  void **v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  size_t v126;
  size_t v127;
  int v128;
  unint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  size_t v133;
  char *v134;
  unint64_t v135;
  uint64_t v136;
  size_t v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  unint64_t v143;
  char *v144;
  char *v145;
  unint64_t v146;
  __int128 v147;
  char *v148;
  int64_t v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  char v153;
  uint64x2_t *v154;
  unint64_t v155;
  unint64_t v156;
  void **v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64x2_t *v161;
  uint64x2_t *v162;
  char *v163;
  _QWORD *v164;
  unint64_t v165;
  __int16 v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  __int16 v170;
  uint64_t v171;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  size_t v181;
  char *v182;
  char *v183;
  size_t v184;
  char *v185;
  char *v186;
  size_t v187;
  char *v188;
  char *v189;
  size_t v190;
  char *v191;
  size_t v192;
  size_t v193;
  size_t v194;
  size_t v195;
  size_t v196;
  size_t v197;
  int v198[2];
  char *v199;
  unint64_t v200;
  char *v201;
  uint64x2_t *v202;
  uint64_t *v203;
  int v204[2];
  void **v205;
  void *__p;
  void *v207;
  char *v208;
  char *v209;
  uint64x2_t *v210;
  __int8 *v211;
  char *v212;
  uint64x2_t *v213;
  char *v214;
  char *v215;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  do
  {
    v11 = v9;
    v12 = *(char *)(a2 + v9++);
    v10 |= (unint64_t)(v12 & 0x7F) << v8;
    if (v11 > 8)
      break;
    v8 += 7;
  }
  while (v12 < 0);
  if ((_DWORD)v10 != 1)
    return 4;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  do
  {
    v16 = *(char *)(a2 + v14 + v9);
    v15 |= (unint64_t)(*(_BYTE *)(a2 + v14 + v9) & 0x7F) << v13;
    v17 = v14 + 1;
    if (v14 > 8)
      break;
    v13 += 7;
    ++v14;
  }
  while (v16 < 0);
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = v9 + v17;
  do
  {
    v22 = *(char *)(a2 + v21++);
    v20 |= (unint64_t)(v22 & 0x7F) << v18;
    if (v19 > 8)
      break;
    ++v19;
    v18 += 7;
  }
  while (v22 < 0);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = (char *)(a2 + v21);
  do
  {
    v28 = *v26++;
    v27 = v28;
    ++v21;
    v25 |= (unint64_t)(v28 & 0x7F) << v23;
    if (v24 > 8)
      break;
    ++v24;
    v23 += 7;
  }
  while (v27 < 0);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  do
  {
    v33 = *v26++;
    v32 = v33;
    ++v21;
    v31 |= (unint64_t)(v33 & 0x7F) << v29;
    if (v30 > 8)
      break;
    ++v30;
    v29 += 7;
  }
  while (v32 < 0);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  do
  {
    v38 = *v26++;
    v37 = v38;
    ++v21;
    v36 |= (unint64_t)(v38 & 0x7F) << v34;
    if (v35 > 8)
      break;
    ++v35;
    v34 += 7;
  }
  while (v37 < 0);
  *(_QWORD *)a4 = v25;
  *(_QWORD *)(a4 + 8) = v31;
  *(_DWORD *)(a4 + 16) = v36;
  if (a5)
  {
    v39 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 24) = 0;
    if (v39)
      MEMORY[0x18D764364](v39, 0x1000C80BDFB0063);
    return 0;
  }
  v41 = operator new[]();
  v42 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 24) = v41;
  if (v42)
    MEMORY[0x18D764364](v42, 0x1000C80BDFB0063);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  do
  {
    v47 = *v26++;
    v46 = v47;
    ++v21;
    v45 |= (unint64_t)(v47 & 0x7F) << v43;
    if (v44 > 8)
      break;
    ++v44;
    v43 += 7;
  }
  while (v46 < 0);
  v48 = 0;
  v49 = 0;
  v50 = 0;
  do
  {
    v52 = *v26++;
    v51 = v52;
    ++v21;
    v50 |= (unint64_t)(v52 & 0x7F) << v48;
    if (v49 > 8)
      break;
    ++v49;
    v48 += 7;
  }
  while (v51 < 0);
  v213 = 0;
  v214 = 0;
  v215 = 0;
  *(_QWORD *)v204 = v45;
  v205 = a1;
  *(_QWORD *)v198 = v50;
  if (v45)
  {
    if (v45 >> 61)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v53 = 8 * v45;
    v213 = (uint64x2_t *)operator new(8 * v45);
    v215 = &v213->i8[8 * *(_QWORD *)v204];
    bzero(v213, v53);
    v199 = &v213->i8[v53];
    v202 = v213;
    v214 = &v213->i8[v53];
  }
  else
  {
    v199 = 0;
    v202 = 0;
  }
  v54 = 0;
  v55 = 0;
  v56 = 0;
  do
  {
    v58 = *v26++;
    v57 = v58;
    ++v21;
    v56 |= (unint64_t)(v58 & 0x7F) << v54;
    if (v55 > 8)
      break;
    ++v55;
    v54 += 7;
  }
  while (v57 < 0);
  v59 = (char *)*v205;
  v60 = (char *)v205[1];
  v61 = (char *)(v60 - (_BYTE *)*v205);
  v62 = v56 - (_QWORD)v61;
  if (v56 <= (unint64_t)v61)
  {
    if (v56 < (unint64_t)v61)
      v205[1] = &v59[v56];
LABEL_72:
    if (!v56)
      goto LABEL_74;
    goto LABEL_73;
  }
  v63 = (char *)v205[2];
  if (v63 - v60 < v62)
  {
    v190 = v56 - (_QWORD)v61;
    v193 = v60 - (_BYTE *)*v205;
    if ((v56 & 0x8000000000000000) != 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v64 = v63 - v59;
    v65 = 2 * v64;
    if (2 * v64 <= v56)
      v65 = v56;
    if (v64 >= 0x3FFFFFFFFFFFFFFFLL)
      v66 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v66 = v65;
    v181 = v66;
    v186 = (char *)*v205;
    v67 = (char *)operator new(v66);
    v182 = &v67[v181];
    v173 = v67;
    v175 = &v67[v193];
    v178 = &v67[v56];
    bzero(&v67[v193], v190);
    if (v60 == v186)
    {
      v69 = v178;
      v68 = v182;
      v71 = v175;
      goto LABEL_70;
    }
    if (v193 < 8)
    {
      v69 = v178;
      v68 = v182;
      v71 = v173;
      v70 = v175;
      goto LABEL_67;
    }
    v71 = v173;
    v70 = v175;
    v69 = v178;
    v68 = v182;
    if ((unint64_t)(v186 - v173) >= 0x20)
    {
      if (v193 < 0x20)
      {
        v72 = 0;
        goto LABEL_62;
      }
      v72 = v193 & 0xFFFFFFFFFFFFFFE0;
      v73 = v60 - 16;
      v74 = &v173[v60 - 16 - v186];
      v75 = v193 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v76 = *(_OWORD *)v73;
        *((_OWORD *)v74 - 1) = *((_OWORD *)v73 - 1);
        *(_OWORD *)v74 = v76;
        v74 -= 32;
        v73 -= 32;
        v75 -= 32;
      }
      while (v75);
      if (v193 == v72)
        goto LABEL_69;
      if ((v193 & 0x18) != 0)
      {
LABEL_62:
        v70 = &v175[-(v193 & 0xFFFFFFFFFFFFFFF8)];
        v77 = &v60[-v72 - 8];
        v78 = (char *)(v77 - v186);
        v79 = v72 - (v193 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v80 = *(_QWORD *)v77;
          v77 -= 8;
          *(_QWORD *)&v78[(_QWORD)v173] = v80;
          v78 -= 8;
          v79 += 8;
        }
        while (v79);
        v60 -= v193 & 0xFFFFFFFFFFFFFFF8;
        if (v193 == (v193 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_69;
        goto LABEL_67;
      }
      v70 = &v175[-v72];
      v60 -= v72;
    }
LABEL_67:
    v81 = v70 - 1;
    do
    {
      v82 = *--v60;
      *v81-- = v82;
    }
    while (v60 != v186);
LABEL_69:
    v60 = v186;
LABEL_70:
    *v205 = v71;
    v205[1] = v69;
    v205[2] = v68;
    if (v60)
      operator delete(v60);
    goto LABEL_72;
  }
  v194 = (size_t)&v60[v62];
  bzero(v60, v62);
  v205[1] = (void *)v194;
LABEL_73:
  memcpy(*v205, v26, v56);
  v21 += v56;
LABEL_74:
  v83 = v202;
  v84 = (v199 - (char *)v202) >> 3;
  v85 = *(_QWORD *)v204;
  if (*(_QWORD *)v204 <= v84)
  {
    v86 = (uint64_t *)v205;
    if (*(_QWORD *)v204 < v84)
      v214 = &v202->i8[8 * *(_QWORD *)v204];
  }
  else
  {
    std::vector<long long>::__append((uint64_t)&v213, *(_QWORD *)v204 - v84);
    v86 = (uint64_t *)v205;
    v83 = v213;
    v85 = *(_QWORD *)v204;
  }
  v87 = v86 + 3;
  v40 = mgcl::ints::IntDecompressor<long long>::decompress(v86 + 3, (unsigned __int8 *)*v86, v86[1] - *v86, v15, v20, v85, v83);
  if ((_DWORD)v40)
    goto LABEL_203;
  v203 = v87;
  v210 = 0;
  v211 = 0;
  v212 = 0;
  if (*(_QWORD *)v204)
  {
    if (*(_QWORD *)v204 >> 61)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v210 = (uint64x2_t *)operator new(8 * *(_QWORD *)v204);
    v212 = &v210->i8[8 * *(_QWORD *)v204];
    bzero(v210, 8 * *(_QWORD *)v204);
    v211 = v212;
  }
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = a2 + v21;
  do
  {
    v92 = *(char *)(v91 + v89);
    v90 |= (unint64_t)(*(_BYTE *)(v91 + v89) & 0x7F) << v88;
    v93 = v89 + 1;
    if (v89 > 8)
      break;
    v88 += 7;
    ++v89;
  }
  while (v92 < 0);
  v94 = (char *)*v205;
  v95 = (char *)v205[1];
  v96 = (char *)(v95 - (_BYTE *)*v205);
  v97 = v90 - (_QWORD)v96;
  if (v90 > (unint64_t)v96)
  {
    v98 = (char *)v205[2];
    if (v98 - v95 >= v97)
    {
      v201 = &v95[v97];
      bzero(v95, v97);
      v205[1] = v201;
      goto LABEL_118;
    }
    v195 = v90 - (_QWORD)v96;
    v200 = v95 - (_BYTE *)*v205;
    if ((v90 & 0x8000000000000000) != 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v99 = v98 - v94;
    v100 = 2 * v99;
    if (2 * v99 <= v90)
      v100 = v90;
    if (v99 >= 0x3FFFFFFFFFFFFFFFLL)
      v101 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v101 = v100;
    v187 = v101;
    v191 = (char *)*v205;
    v102 = (char *)operator new(v101);
    v183 = &v102[v187];
    v188 = &v102[v200];
    v176 = v102;
    v179 = &v102[v90];
    bzero(&v102[v200], v195);
    if (v95 == v191)
    {
      v103 = v188;
      goto LABEL_115;
    }
    if (v200 < 8)
    {
      v103 = v176;
      v104 = v188;
      goto LABEL_112;
    }
    v103 = v176;
    v104 = v188;
    if ((unint64_t)(v191 - v176) >= 0x20)
    {
      if (v200 < 0x20)
      {
        v105 = 0;
        goto LABEL_107;
      }
      v105 = v200 & 0xFFFFFFFFFFFFFFE0;
      v106 = v95 - 16;
      v107 = &v176[v95 - 16 - v191];
      v108 = v200 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v109 = *(_OWORD *)v106;
        *((_OWORD *)v107 - 1) = *((_OWORD *)v106 - 1);
        *(_OWORD *)v107 = v109;
        v107 -= 32;
        v106 -= 32;
        v108 -= 32;
      }
      while (v108);
      if (v200 == v105)
        goto LABEL_114;
      if ((v200 & 0x18) != 0)
      {
LABEL_107:
        v104 = &v188[-(v200 & 0xFFFFFFFFFFFFFFF8)];
        v110 = &v95[-v105 - 8];
        v111 = v110 - v191;
        v112 = v105 - (v200 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v113 = *(_QWORD *)v110;
          v110 -= 8;
          *(_QWORD *)&v176[v111] = v113;
          v111 -= 8;
          v112 += 8;
        }
        while (v112);
        v95 -= v200 & 0xFFFFFFFFFFFFFFF8;
        if (v200 == (v200 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_114;
        goto LABEL_112;
      }
      v104 = &v188[-v105];
      v95 -= v105;
    }
LABEL_112:
    v114 = v104 - 1;
    do
    {
      v115 = *--v95;
      *v114-- = v115;
    }
    while (v95 != v191);
LABEL_114:
    v95 = v191;
LABEL_115:
    *v205 = v103;
    v205[1] = v179;
    v205[2] = v183;
    if (v95)
      operator delete(v95);
    goto LABEL_117;
  }
  if (v90 < (unint64_t)v96)
    v205[1] = &v94[v90];
LABEL_117:
  if (!v90)
  {
    v116 = v21 + v93;
    v117 = *(_QWORD *)v204;
    v118 = v210;
    v123 = (v211 - (__int8 *)v210) >> 3;
    v120 = *(_QWORD *)v204 >= v123;
    v121 = *(_QWORD *)v204 - v123;
    if (*(_QWORD *)v204 > v123)
      goto LABEL_119;
    goto LABEL_121;
  }
LABEL_118:
  memcpy(*v205, (const void *)(a2 + v21 + v93), v90);
  v116 = v21 + v90 + v93;
  v117 = *(_QWORD *)v204;
  v118 = v210;
  v119 = (v211 - (__int8 *)v210) >> 3;
  v120 = *(_QWORD *)v204 >= v119;
  v121 = *(_QWORD *)v204 - v119;
  if (*(_QWORD *)v204 > v119)
  {
LABEL_119:
    std::vector<long long>::__append((uint64_t)&v210, v121);
    v118 = v210;
    v117 = *(_QWORD *)v204;
    v122 = v205;
    goto LABEL_124;
  }
LABEL_121:
  if (!v120)
    v211 = &v118->i8[8 * v117];
  v122 = v205;
LABEL_124:
  v40 = mgcl::ints::IntDecompressor<long long>::decompress(v203, (unsigned __int8 *)*v122, (_BYTE *)v122[1] - (_BYTE *)*v122, v15, v20, v117, v118);
  if (!(_DWORD)v40)
  {
    v207 = 0;
    v208 = 0;
    v209 = 0;
    if (*(_QWORD *)v198)
    {
      if (*(_QWORD *)v198 >> 61)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v207 = operator new(8 * *(_QWORD *)v198);
      v209 = (char *)v207 + 8 * *(_QWORD *)v198;
      bzero(v207, 8 * *(_QWORD *)v198);
      v208 = v209;
    }
    v124 = 0;
    v125 = 0;
    v126 = 0;
    v127 = a2 + v116;
    do
    {
      v128 = *(char *)(v127 + v125);
      v126 |= (unint64_t)(*(_BYTE *)(v127 + v125) & 0x7F) << v124;
      v129 = v125 + 1;
      if (v125 > 8)
        break;
      v124 += 7;
      ++v125;
    }
    while (v128 < 0);
    v130 = (char *)*v205;
    v131 = (char *)v205[1];
    v132 = (char *)(v131 - (_BYTE *)*v205);
    v133 = v126 - (_QWORD)v132;
    if (v126 <= (unint64_t)v132)
    {
      if (v126 < (unint64_t)v132)
        v205[1] = &v130[v126];
LABEL_163:
      if (!v126)
      {
LABEL_165:
        v154 = (uint64x2_t *)v207;
        v155 = (v208 - (_BYTE *)v207) >> 3;
        v156 = *(_QWORD *)v198;
        if (*(_QWORD *)v198 <= v155)
        {
          v157 = v205;
          v158 = v203;
          if (*(_QWORD *)v198 < v155)
            v208 = (char *)v207 + 8 * *(_QWORD *)v198;
        }
        else
        {
          std::vector<long long>::__append((uint64_t)&v207, *(_QWORD *)v198 - v155);
          v154 = (uint64x2_t *)v207;
          v157 = v205;
          v156 = *(_QWORD *)v198;
          v158 = v203;
        }
        v40 = mgcl::ints::IntDecompressor<long long>::decompress(v158, (unsigned __int8 *)*v157, (_BYTE *)v157[1] - (_BYTE *)*v157, v15, v20, v156, v154);
        if (!(_DWORD)v40)
        {
          std::vector<BOOL>::vector(&__p, v31 * v25);
          if (*(_QWORD *)v204)
          {
            v159 = 0;
            v160 = 0;
            v161 = v213;
            v162 = v210;
            v163 = (char *)__p;
            v164 = v207;
LABEL_173:
            v165 = v161->u64[v159];
            v166 = v162->i16[4 * v159];
            while (1)
            {
              *(_WORD *)(v41 + 2 * v165) = v166;
              *(_QWORD *)&v163[(v165 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v165;
              switch(v164[v160])
              {
                case 0:
                  ++v159;
                  ++v160;
                  if (v159 != *(_QWORD *)v204)
                    goto LABEL_173;
                  goto LABEL_183;
                case 1:
                  v165 += v31;
                  ++v160;
                  continue;
                case 2:
                  v165 += v31 - 1;
                  ++v160;
                  continue;
                case 3:
                  v165 += v31 + 1;
                  ++v160;
                  continue;
                case 4:
                  v165 += v31 - 2;
                  ++v160;
                  continue;
                case 5:
                  v165 += v31 + 2;
                  ++v160;
                  continue;
                case 6:
                  v165 += v31 - 3;
                  ++v160;
                  continue;
                case 7:
                  v165 += v31 + 3;
                  goto LABEL_175;
                default:
LABEL_175:
                  ++v160;
                  break;
              }
            }
          }
LABEL_183:
          v167 = (char *)__p;
          if (v25 && v31)
          {
            v168 = 0;
            v169 = 0;
            while (1)
            {
              if (((*(_QWORD *)&v167[(v169 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v169) & 1) != 0)
              {
                v170 = *(_WORD *)(v41 + 2 * v169++);
                if (v31 != 1)
                  goto LABEL_191;
              }
              else
              {
                v170 = *(_WORD *)(v41 + 2 * (v169 - v31));
                *(_WORD *)(v41 + 2 * v169++) = v170;
                if (v31 != 1)
                {
LABEL_191:
                  v171 = v31 - 1;
                  do
                  {
                    while (((*(_QWORD *)&v167[(v169 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v169) & 1) == 0)
                    {
                      *(_WORD *)(v41 + 2 * v169++) = v170;
                      if (!--v171)
                        goto LABEL_186;
                    }
                    v170 = *(_WORD *)(v41 + 2 * v169++);
                    --v171;
                  }
                  while (v171);
                }
              }
LABEL_186:
              if (++v168 == v25)
                goto LABEL_197;
            }
          }
          if (__p)
LABEL_197:
            operator delete(v167);
          v40 = 0;
        }
        if (v207)
        {
          v208 = (char *)v207;
          operator delete(v207);
        }
        goto LABEL_201;
      }
LABEL_164:
      memcpy(*v205, (const void *)(a2 + v116 + v129), v126);
      goto LABEL_165;
    }
    v134 = (char *)v205[2];
    if (v134 - v131 >= v133)
    {
      v197 = (size_t)&v131[v133];
      bzero(v131, v133);
      v205[1] = (void *)v197;
      goto LABEL_164;
    }
    v192 = v126 - (_QWORD)v132;
    v196 = v131 - (_BYTE *)*v205;
    if ((v126 & 0x8000000000000000) != 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v135 = v134 - v130;
    v136 = 2 * v135;
    if (2 * v135 <= v126)
      v136 = v126;
    if (v135 >= 0x3FFFFFFFFFFFFFFFLL)
      v137 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v137 = v136;
    v184 = v137;
    v189 = (char *)*v205;
    v138 = (char *)operator new(v137);
    v185 = &v138[v184];
    v174 = v138;
    v177 = &v138[v196];
    v180 = &v138[v126];
    bzero(&v138[v196], v192);
    if (v131 == v189)
    {
      v140 = v180;
      v139 = v185;
      v142 = v177;
      goto LABEL_161;
    }
    if (v196 < 8)
    {
      v140 = v180;
      v139 = v185;
      v142 = v174;
      v141 = v177;
      goto LABEL_158;
    }
    v142 = v174;
    v141 = v177;
    v140 = v180;
    v139 = v185;
    if ((unint64_t)(v189 - v174) >= 0x20)
    {
      if (v196 < 0x20)
      {
        v143 = 0;
        goto LABEL_153;
      }
      v143 = v196 & 0xFFFFFFFFFFFFFFE0;
      v144 = v131 - 16;
      v145 = &v174[v131 - 16 - v189];
      v146 = v196 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v147 = *(_OWORD *)v144;
        *((_OWORD *)v145 - 1) = *((_OWORD *)v144 - 1);
        *(_OWORD *)v145 = v147;
        v145 -= 32;
        v144 -= 32;
        v146 -= 32;
      }
      while (v146);
      if (v196 == v143)
        goto LABEL_160;
      if ((v196 & 0x18) != 0)
      {
LABEL_153:
        v141 = &v177[-(v196 & 0xFFFFFFFFFFFFFFF8)];
        v148 = &v131[-v143 - 8];
        v149 = v148 - v189;
        v150 = v143 - (v196 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v151 = *(_QWORD *)v148;
          v148 -= 8;
          *(_QWORD *)&v174[v149] = v151;
          v149 -= 8;
          v150 += 8;
        }
        while (v150);
        v131 -= v196 & 0xFFFFFFFFFFFFFFF8;
        if (v196 == (v196 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_160;
        goto LABEL_158;
      }
      v141 = &v177[-v143];
      v131 -= v143;
    }
LABEL_158:
    v152 = v141 - 1;
    do
    {
      v153 = *--v131;
      *v152-- = v153;
    }
    while (v131 != v189);
LABEL_160:
    v131 = v189;
LABEL_161:
    *v205 = v142;
    v205[1] = v140;
    v205[2] = v139;
    if (v131)
      operator delete(v131);
    goto LABEL_163;
  }
LABEL_201:
  if (v210)
  {
    v211 = (__int8 *)v210;
    operator delete(v210);
  }
LABEL_203:
  if (v213)
  {
    v214 = (char *)v213;
    operator delete(v213);
  }
  return v40;
}

void sub_189AE1730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  uint64_t v26;
  void *v28;
  void *v29;

  if (__p)
  {
    operator delete(__p);
    v28 = *(void **)(v26 - 136);
    if (!v28)
    {
LABEL_3:
      v29 = *(void **)(v26 - 112);
      if (!v29)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v28 = *(void **)(v26 - 136);
    if (!v28)
      goto LABEL_3;
  }
  *(_QWORD *)(v26 - 128) = v28;
  operator delete(v28);
  v29 = *(void **)(v26 - 112);
  if (!v29)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  *(_QWORD *)(v26 - 104) = v29;
  operator delete(v29);
  _Unwind_Resume(exception_object);
}

uint64_t mgcl::raster::PolygonRasterDecoder<unsigned int>::decode(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  int v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  size_t v53;
  char v54;
  unint64_t v55;
  size_t v56;
  int v57;
  int v58;
  char *v59;
  char *v60;
  char *v61;
  size_t v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  size_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  unint64_t v72;
  char *v73;
  char *v74;
  unint64_t v75;
  __int128 v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char v82;
  uint64x2_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  char v88;
  unint64_t v89;
  size_t v90;
  uint64_t v91;
  int v92;
  unint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  size_t v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  size_t v101;
  char *v102;
  char *v103;
  char *v104;
  unint64_t v105;
  char *v106;
  char *v107;
  unint64_t v108;
  __int128 v109;
  char *v110;
  int64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  char v115;
  size_t v116;
  unint64_t v117;
  uint64x2_t *v118;
  unint64_t v119;
  BOOL v120;
  unint64_t v121;
  void **v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  size_t v126;
  size_t v127;
  int v128;
  unint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  size_t v133;
  char *v134;
  unint64_t v135;
  uint64_t v136;
  size_t v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  unint64_t v143;
  char *v144;
  char *v145;
  unint64_t v146;
  __int128 v147;
  char *v148;
  int64_t v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  char v153;
  uint64x2_t *v154;
  unint64_t v155;
  unint64_t v156;
  void **v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64x2_t *v161;
  uint64x2_t *v162;
  char *v163;
  _QWORD *v164;
  unint64_t v165;
  __int32 v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  int v170;
  uint64_t v171;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  char *v180;
  size_t v181;
  char *v182;
  char *v183;
  size_t v184;
  char *v185;
  char *v186;
  size_t v187;
  char *v188;
  char *v189;
  size_t v190;
  char *v191;
  size_t v192;
  size_t v193;
  size_t v194;
  size_t v195;
  size_t v196;
  size_t v197;
  int v198[2];
  char *v199;
  unint64_t v200;
  char *v201;
  uint64x2_t *v202;
  uint64_t *v203;
  int v204[2];
  void **v205;
  void *__p;
  void *v207;
  char *v208;
  char *v209;
  uint64x2_t *v210;
  __int8 *v211;
  char *v212;
  uint64x2_t *v213;
  char *v214;
  char *v215;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  do
  {
    v11 = v9;
    v12 = *(char *)(a2 + v9++);
    v10 |= (unint64_t)(v12 & 0x7F) << v8;
    if (v11 > 8)
      break;
    v8 += 7;
  }
  while (v12 < 0);
  if ((_DWORD)v10 != 1)
    return 4;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  do
  {
    v16 = *(char *)(a2 + v14 + v9);
    v15 |= (unint64_t)(*(_BYTE *)(a2 + v14 + v9) & 0x7F) << v13;
    v17 = v14 + 1;
    if (v14 > 8)
      break;
    v13 += 7;
    ++v14;
  }
  while (v16 < 0);
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = v9 + v17;
  do
  {
    v22 = *(char *)(a2 + v21++);
    v20 |= (unint64_t)(v22 & 0x7F) << v18;
    if (v19 > 8)
      break;
    ++v19;
    v18 += 7;
  }
  while (v22 < 0);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = (char *)(a2 + v21);
  do
  {
    v28 = *v26++;
    v27 = v28;
    ++v21;
    v25 |= (unint64_t)(v28 & 0x7F) << v23;
    if (v24 > 8)
      break;
    ++v24;
    v23 += 7;
  }
  while (v27 < 0);
  v29 = 0;
  v30 = 0;
  v31 = 0;
  do
  {
    v33 = *v26++;
    v32 = v33;
    ++v21;
    v31 |= (unint64_t)(v33 & 0x7F) << v29;
    if (v30 > 8)
      break;
    ++v30;
    v29 += 7;
  }
  while (v32 < 0);
  v34 = 0;
  v35 = 0;
  v36 = 0;
  do
  {
    v38 = *v26++;
    v37 = v38;
    ++v21;
    v36 |= (unint64_t)(v38 & 0x7F) << v34;
    if (v35 > 8)
      break;
    ++v35;
    v34 += 7;
  }
  while (v37 < 0);
  *(_QWORD *)a4 = v25;
  *(_QWORD *)(a4 + 8) = v31;
  *(_DWORD *)(a4 + 16) = v36;
  if (a5)
  {
    v39 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 24) = 0;
    if (v39)
      MEMORY[0x18D764364](v39, 0x1000C8052888210);
    return 0;
  }
  v41 = operator new[]();
  v42 = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 24) = v41;
  if (v42)
    MEMORY[0x18D764364](v42, 0x1000C8052888210);
  v43 = 0;
  v44 = 0;
  v45 = 0;
  do
  {
    v47 = *v26++;
    v46 = v47;
    ++v21;
    v45 |= (unint64_t)(v47 & 0x7F) << v43;
    if (v44 > 8)
      break;
    ++v44;
    v43 += 7;
  }
  while (v46 < 0);
  v48 = 0;
  v49 = 0;
  v50 = 0;
  do
  {
    v52 = *v26++;
    v51 = v52;
    ++v21;
    v50 |= (unint64_t)(v52 & 0x7F) << v48;
    if (v49 > 8)
      break;
    ++v49;
    v48 += 7;
  }
  while (v51 < 0);
  v213 = 0;
  v214 = 0;
  v215 = 0;
  *(_QWORD *)v204 = v45;
  v205 = a1;
  *(_QWORD *)v198 = v50;
  if (v45)
  {
    if (v45 >> 61)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v53 = 8 * v45;
    v213 = (uint64x2_t *)operator new(8 * v45);
    v215 = &v213->i8[8 * *(_QWORD *)v204];
    bzero(v213, v53);
    v199 = &v213->i8[v53];
    v202 = v213;
    v214 = &v213->i8[v53];
  }
  else
  {
    v199 = 0;
    v202 = 0;
  }
  v54 = 0;
  v55 = 0;
  v56 = 0;
  do
  {
    v58 = *v26++;
    v57 = v58;
    ++v21;
    v56 |= (unint64_t)(v58 & 0x7F) << v54;
    if (v55 > 8)
      break;
    ++v55;
    v54 += 7;
  }
  while (v57 < 0);
  v59 = (char *)*v205;
  v60 = (char *)v205[1];
  v61 = (char *)(v60 - (_BYTE *)*v205);
  v62 = v56 - (_QWORD)v61;
  if (v56 <= (unint64_t)v61)
  {
    if (v56 < (unint64_t)v61)
      v205[1] = &v59[v56];
LABEL_72:
    if (!v56)
      goto LABEL_74;
    goto LABEL_73;
  }
  v63 = (char *)v205[2];
  if (v63 - v60 < v62)
  {
    v190 = v56 - (_QWORD)v61;
    v193 = v60 - (_BYTE *)*v205;
    if ((v56 & 0x8000000000000000) != 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v64 = v63 - v59;
    v65 = 2 * v64;
    if (2 * v64 <= v56)
      v65 = v56;
    if (v64 >= 0x3FFFFFFFFFFFFFFFLL)
      v66 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v66 = v65;
    v181 = v66;
    v186 = (char *)*v205;
    v67 = (char *)operator new(v66);
    v182 = &v67[v181];
    v173 = v67;
    v175 = &v67[v193];
    v178 = &v67[v56];
    bzero(&v67[v193], v190);
    if (v60 == v186)
    {
      v69 = v178;
      v68 = v182;
      v71 = v175;
      goto LABEL_70;
    }
    if (v193 < 8)
    {
      v69 = v178;
      v68 = v182;
      v71 = v173;
      v70 = v175;
      goto LABEL_67;
    }
    v71 = v173;
    v70 = v175;
    v69 = v178;
    v68 = v182;
    if ((unint64_t)(v186 - v173) >= 0x20)
    {
      if (v193 < 0x20)
      {
        v72 = 0;
        goto LABEL_62;
      }
      v72 = v193 & 0xFFFFFFFFFFFFFFE0;
      v73 = v60 - 16;
      v74 = &v173[v60 - 16 - v186];
      v75 = v193 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v76 = *(_OWORD *)v73;
        *((_OWORD *)v74 - 1) = *((_OWORD *)v73 - 1);
        *(_OWORD *)v74 = v76;
        v74 -= 32;
        v73 -= 32;
        v75 -= 32;
      }
      while (v75);
      if (v193 == v72)
        goto LABEL_69;
      if ((v193 & 0x18) != 0)
      {
LABEL_62:
        v70 = &v175[-(v193 & 0xFFFFFFFFFFFFFFF8)];
        v77 = &v60[-v72 - 8];
        v78 = (char *)(v77 - v186);
        v79 = v72 - (v193 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v80 = *(_QWORD *)v77;
          v77 -= 8;
          *(_QWORD *)&v78[(_QWORD)v173] = v80;
          v78 -= 8;
          v79 += 8;
        }
        while (v79);
        v60 -= v193 & 0xFFFFFFFFFFFFFFF8;
        if (v193 == (v193 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_69;
        goto LABEL_67;
      }
      v70 = &v175[-v72];
      v60 -= v72;
    }
LABEL_67:
    v81 = v70 - 1;
    do
    {
      v82 = *--v60;
      *v81-- = v82;
    }
    while (v60 != v186);
LABEL_69:
    v60 = v186;
LABEL_70:
    *v205 = v71;
    v205[1] = v69;
    v205[2] = v68;
    if (v60)
      operator delete(v60);
    goto LABEL_72;
  }
  v194 = (size_t)&v60[v62];
  bzero(v60, v62);
  v205[1] = (void *)v194;
LABEL_73:
  memcpy(*v205, v26, v56);
  v21 += v56;
LABEL_74:
  v83 = v202;
  v84 = (v199 - (char *)v202) >> 3;
  v85 = *(_QWORD *)v204;
  if (*(_QWORD *)v204 <= v84)
  {
    v86 = (uint64_t *)v205;
    if (*(_QWORD *)v204 < v84)
      v214 = &v202->i8[8 * *(_QWORD *)v204];
  }
  else
  {
    std::vector<long long>::__append((uint64_t)&v213, *(_QWORD *)v204 - v84);
    v86 = (uint64_t *)v205;
    v83 = v213;
    v85 = *(_QWORD *)v204;
  }
  v87 = v86 + 3;
  v40 = mgcl::ints::IntDecompressor<long long>::decompress(v86 + 3, (unsigned __int8 *)*v86, v86[1] - *v86, v15, v20, v85, v83);
  if ((_DWORD)v40)
    goto LABEL_203;
  v203 = v87;
  v210 = 0;
  v211 = 0;
  v212 = 0;
  if (*(_QWORD *)v204)
  {
    if (*(_QWORD *)v204 >> 61)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v210 = (uint64x2_t *)operator new(8 * *(_QWORD *)v204);
    v212 = &v210->i8[8 * *(_QWORD *)v204];
    bzero(v210, 8 * *(_QWORD *)v204);
    v211 = v212;
  }
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = a2 + v21;
  do
  {
    v92 = *(char *)(v91 + v89);
    v90 |= (unint64_t)(*(_BYTE *)(v91 + v89) & 0x7F) << v88;
    v93 = v89 + 1;
    if (v89 > 8)
      break;
    v88 += 7;
    ++v89;
  }
  while (v92 < 0);
  v94 = (char *)*v205;
  v95 = (char *)v205[1];
  v96 = (char *)(v95 - (_BYTE *)*v205);
  v97 = v90 - (_QWORD)v96;
  if (v90 > (unint64_t)v96)
  {
    v98 = (char *)v205[2];
    if (v98 - v95 >= v97)
    {
      v201 = &v95[v97];
      bzero(v95, v97);
      v205[1] = v201;
      goto LABEL_118;
    }
    v195 = v90 - (_QWORD)v96;
    v200 = v95 - (_BYTE *)*v205;
    if ((v90 & 0x8000000000000000) != 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v99 = v98 - v94;
    v100 = 2 * v99;
    if (2 * v99 <= v90)
      v100 = v90;
    if (v99 >= 0x3FFFFFFFFFFFFFFFLL)
      v101 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v101 = v100;
    v187 = v101;
    v191 = (char *)*v205;
    v102 = (char *)operator new(v101);
    v183 = &v102[v187];
    v188 = &v102[v200];
    v176 = v102;
    v179 = &v102[v90];
    bzero(&v102[v200], v195);
    if (v95 == v191)
    {
      v103 = v188;
      goto LABEL_115;
    }
    if (v200 < 8)
    {
      v103 = v176;
      v104 = v188;
      goto LABEL_112;
    }
    v103 = v176;
    v104 = v188;
    if ((unint64_t)(v191 - v176) >= 0x20)
    {
      if (v200 < 0x20)
      {
        v105 = 0;
        goto LABEL_107;
      }
      v105 = v200 & 0xFFFFFFFFFFFFFFE0;
      v106 = v95 - 16;
      v107 = &v176[v95 - 16 - v191];
      v108 = v200 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v109 = *(_OWORD *)v106;
        *((_OWORD *)v107 - 1) = *((_OWORD *)v106 - 1);
        *(_OWORD *)v107 = v109;
        v107 -= 32;
        v106 -= 32;
        v108 -= 32;
      }
      while (v108);
      if (v200 == v105)
        goto LABEL_114;
      if ((v200 & 0x18) != 0)
      {
LABEL_107:
        v104 = &v188[-(v200 & 0xFFFFFFFFFFFFFFF8)];
        v110 = &v95[-v105 - 8];
        v111 = v110 - v191;
        v112 = v105 - (v200 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v113 = *(_QWORD *)v110;
          v110 -= 8;
          *(_QWORD *)&v176[v111] = v113;
          v111 -= 8;
          v112 += 8;
        }
        while (v112);
        v95 -= v200 & 0xFFFFFFFFFFFFFFF8;
        if (v200 == (v200 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_114;
        goto LABEL_112;
      }
      v104 = &v188[-v105];
      v95 -= v105;
    }
LABEL_112:
    v114 = v104 - 1;
    do
    {
      v115 = *--v95;
      *v114-- = v115;
    }
    while (v95 != v191);
LABEL_114:
    v95 = v191;
LABEL_115:
    *v205 = v103;
    v205[1] = v179;
    v205[2] = v183;
    if (v95)
      operator delete(v95);
    goto LABEL_117;
  }
  if (v90 < (unint64_t)v96)
    v205[1] = &v94[v90];
LABEL_117:
  if (!v90)
  {
    v116 = v21 + v93;
    v117 = *(_QWORD *)v204;
    v118 = v210;
    v123 = (v211 - (__int8 *)v210) >> 3;
    v120 = *(_QWORD *)v204 >= v123;
    v121 = *(_QWORD *)v204 - v123;
    if (*(_QWORD *)v204 > v123)
      goto LABEL_119;
    goto LABEL_121;
  }
LABEL_118:
  memcpy(*v205, (const void *)(a2 + v21 + v93), v90);
  v116 = v21 + v90 + v93;
  v117 = *(_QWORD *)v204;
  v118 = v210;
  v119 = (v211 - (__int8 *)v210) >> 3;
  v120 = *(_QWORD *)v204 >= v119;
  v121 = *(_QWORD *)v204 - v119;
  if (*(_QWORD *)v204 > v119)
  {
LABEL_119:
    std::vector<long long>::__append((uint64_t)&v210, v121);
    v118 = v210;
    v117 = *(_QWORD *)v204;
    v122 = v205;
    goto LABEL_124;
  }
LABEL_121:
  if (!v120)
    v211 = &v118->i8[8 * v117];
  v122 = v205;
LABEL_124:
  v40 = mgcl::ints::IntDecompressor<long long>::decompress(v203, (unsigned __int8 *)*v122, (_BYTE *)v122[1] - (_BYTE *)*v122, v15, v20, v117, v118);
  if (!(_DWORD)v40)
  {
    v207 = 0;
    v208 = 0;
    v209 = 0;
    if (*(_QWORD *)v198)
    {
      if (*(_QWORD *)v198 >> 61)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v207 = operator new(8 * *(_QWORD *)v198);
      v209 = (char *)v207 + 8 * *(_QWORD *)v198;
      bzero(v207, 8 * *(_QWORD *)v198);
      v208 = v209;
    }
    v124 = 0;
    v125 = 0;
    v126 = 0;
    v127 = a2 + v116;
    do
    {
      v128 = *(char *)(v127 + v125);
      v126 |= (unint64_t)(*(_BYTE *)(v127 + v125) & 0x7F) << v124;
      v129 = v125 + 1;
      if (v125 > 8)
        break;
      v124 += 7;
      ++v125;
    }
    while (v128 < 0);
    v130 = (char *)*v205;
    v131 = (char *)v205[1];
    v132 = (char *)(v131 - (_BYTE *)*v205);
    v133 = v126 - (_QWORD)v132;
    if (v126 <= (unint64_t)v132)
    {
      if (v126 < (unint64_t)v132)
        v205[1] = &v130[v126];
LABEL_163:
      if (!v126)
      {
LABEL_165:
        v154 = (uint64x2_t *)v207;
        v155 = (v208 - (_BYTE *)v207) >> 3;
        v156 = *(_QWORD *)v198;
        if (*(_QWORD *)v198 <= v155)
        {
          v157 = v205;
          v158 = v203;
          if (*(_QWORD *)v198 < v155)
            v208 = (char *)v207 + 8 * *(_QWORD *)v198;
        }
        else
        {
          std::vector<long long>::__append((uint64_t)&v207, *(_QWORD *)v198 - v155);
          v154 = (uint64x2_t *)v207;
          v157 = v205;
          v156 = *(_QWORD *)v198;
          v158 = v203;
        }
        v40 = mgcl::ints::IntDecompressor<long long>::decompress(v158, (unsigned __int8 *)*v157, (_BYTE *)v157[1] - (_BYTE *)*v157, v15, v20, v156, v154);
        if (!(_DWORD)v40)
        {
          std::vector<BOOL>::vector(&__p, v31 * v25);
          if (*(_QWORD *)v204)
          {
            v159 = 0;
            v160 = 0;
            v161 = v213;
            v162 = v210;
            v163 = (char *)__p;
            v164 = v207;
LABEL_173:
            v165 = v161->u64[v159];
            v166 = v162->i32[2 * v159];
            while (1)
            {
              *(_DWORD *)(v41 + 4 * v165) = v166;
              *(_QWORD *)&v163[(v165 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v165;
              switch(v164[v160])
              {
                case 0:
                  ++v159;
                  ++v160;
                  if (v159 != *(_QWORD *)v204)
                    goto LABEL_173;
                  goto LABEL_183;
                case 1:
                  v165 += v31;
                  ++v160;
                  continue;
                case 2:
                  v165 += v31 - 1;
                  ++v160;
                  continue;
                case 3:
                  v165 += v31 + 1;
                  ++v160;
                  continue;
                case 4:
                  v165 += v31 - 2;
                  ++v160;
                  continue;
                case 5:
                  v165 += v31 + 2;
                  ++v160;
                  continue;
                case 6:
                  v165 += v31 - 3;
                  ++v160;
                  continue;
                case 7:
                  v165 += v31 + 3;
                  goto LABEL_175;
                default:
LABEL_175:
                  ++v160;
                  break;
              }
            }
          }
LABEL_183:
          v167 = (char *)__p;
          if (v25 && v31)
          {
            v168 = 0;
            v169 = 0;
            while (1)
            {
              if (((*(_QWORD *)&v167[(v169 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v169) & 1) != 0)
              {
                v170 = *(_DWORD *)(v41 + 4 * v169++);
                if (v31 != 1)
                  goto LABEL_191;
              }
              else
              {
                v170 = *(_DWORD *)(v41 + 4 * (v169 - v31));
                *(_DWORD *)(v41 + 4 * v169++) = v170;
                if (v31 != 1)
                {
LABEL_191:
                  v171 = v31 - 1;
                  do
                  {
                    while (((*(_QWORD *)&v167[(v169 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v169) & 1) == 0)
                    {
                      *(_DWORD *)(v41 + 4 * v169++) = v170;
                      if (!--v171)
                        goto LABEL_186;
                    }
                    v170 = *(_DWORD *)(v41 + 4 * v169++);
                    --v171;
                  }
                  while (v171);
                }
              }
LABEL_186:
              if (++v168 == v25)
                goto LABEL_197;
            }
          }
          if (__p)
LABEL_197:
            operator delete(v167);
          v40 = 0;
        }
        if (v207)
        {
          v208 = (char *)v207;
          operator delete(v207);
        }
        goto LABEL_201;
      }
LABEL_164:
      memcpy(*v205, (const void *)(a2 + v116 + v129), v126);
      goto LABEL_165;
    }
    v134 = (char *)v205[2];
    if (v134 - v131 >= v133)
    {
      v197 = (size_t)&v131[v133];
      bzero(v131, v133);
      v205[1] = (void *)v197;
      goto LABEL_164;
    }
    v192 = v126 - (_QWORD)v132;
    v196 = v131 - (_BYTE *)*v205;
    if ((v126 & 0x8000000000000000) != 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v135 = v134 - v130;
    v136 = 2 * v135;
    if (2 * v135 <= v126)
      v136 = v126;
    if (v135 >= 0x3FFFFFFFFFFFFFFFLL)
      v137 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v137 = v136;
    v184 = v137;
    v189 = (char *)*v205;
    v138 = (char *)operator new(v137);
    v185 = &v138[v184];
    v174 = v138;
    v177 = &v138[v196];
    v180 = &v138[v126];
    bzero(&v138[v196], v192);
    if (v131 == v189)
    {
      v140 = v180;
      v139 = v185;
      v142 = v177;
      goto LABEL_161;
    }
    if (v196 < 8)
    {
      v140 = v180;
      v139 = v185;
      v142 = v174;
      v141 = v177;
      goto LABEL_158;
    }
    v142 = v174;
    v141 = v177;
    v140 = v180;
    v139 = v185;
    if ((unint64_t)(v189 - v174) >= 0x20)
    {
      if (v196 < 0x20)
      {
        v143 = 0;
        goto LABEL_153;
      }
      v143 = v196 & 0xFFFFFFFFFFFFFFE0;
      v144 = v131 - 16;
      v145 = &v174[v131 - 16 - v189];
      v146 = v196 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v147 = *(_OWORD *)v144;
        *((_OWORD *)v145 - 1) = *((_OWORD *)v144 - 1);
        *(_OWORD *)v145 = v147;
        v145 -= 32;
        v144 -= 32;
        v146 -= 32;
      }
      while (v146);
      if (v196 == v143)
        goto LABEL_160;
      if ((v196 & 0x18) != 0)
      {
LABEL_153:
        v141 = &v177[-(v196 & 0xFFFFFFFFFFFFFFF8)];
        v148 = &v131[-v143 - 8];
        v149 = v148 - v189;
        v150 = v143 - (v196 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v151 = *(_QWORD *)v148;
          v148 -= 8;
          *(_QWORD *)&v174[v149] = v151;
          v149 -= 8;
          v150 += 8;
        }
        while (v150);
        v131 -= v196 & 0xFFFFFFFFFFFFFFF8;
        if (v196 == (v196 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_160;
        goto LABEL_158;
      }
      v141 = &v177[-v143];
      v131 -= v143;
    }
LABEL_158:
    v152 = v141 - 1;
    do
    {
      v153 = *--v131;
      *v152-- = v153;
    }
    while (v131 != v189);
LABEL_160:
    v131 = v189;
LABEL_161:
    *v205 = v142;
    v205[1] = v140;
    v205[2] = v139;
    if (v131)
      operator delete(v131);
    goto LABEL_163;
  }
LABEL_201:
  if (v210)
  {
    v211 = (__int8 *)v210;
    operator delete(v210);
  }
LABEL_203:
  if (v213)
  {
    v214 = (char *)v213;
    operator delete(v213);
  }
  return v40;
}

void sub_189AE24F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  uint64_t v26;
  void *v28;
  void *v29;

  if (__p)
  {
    operator delete(__p);
    v28 = *(void **)(v26 - 136);
    if (!v28)
    {
LABEL_3:
      v29 = *(void **)(v26 - 112);
      if (!v29)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v28 = *(void **)(v26 - 136);
    if (!v28)
      goto LABEL_3;
  }
  *(_QWORD *)(v26 - 128) = v28;
  operator delete(v28);
  v29 = *(void **)(v26 - 112);
  if (!v29)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  *(_QWORD *)(v26 - 104) = v29;
  operator delete(v29);
  _Unwind_Resume(exception_object);
}

void gcl::gpcc::Decoder::Delegate::~Delegate(gcl::gpcc::Decoder::Delegate *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  gcl::gpcc::Decoder::Delegate *v5;
  uint64_t v6;
  gcl::gpcc::Decoder::Delegate *v7;
  uint64_t v8;
  gcl::gpcc::Decoder::Delegate *v9;
  uint64_t v10;
  gcl::gpcc::Decoder::Delegate *v11;
  uint64_t v12;
  gcl::gpcc::Decoder::Delegate *v13;
  uint64_t v14;

  v2 = (char *)this + 160;
  v3 = (char *)*((_QWORD *)this + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (gcl::gpcc::Decoder::Delegate *)*((_QWORD *)this + 19);
  if (v5 == (gcl::gpcc::Decoder::Delegate *)((char *)this + 128))
  {
    v6 = 4;
    v5 = (gcl::gpcc::Decoder::Delegate *)((char *)this + 128);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  v7 = (gcl::gpcc::Decoder::Delegate *)*((_QWORD *)this + 15);
  if (v7 == (gcl::gpcc::Decoder::Delegate *)((char *)this + 96))
  {
    v8 = 4;
    v7 = (gcl::gpcc::Decoder::Delegate *)((char *)this + 96);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_16:
  v9 = (gcl::gpcc::Decoder::Delegate *)*((_QWORD *)this + 11);
  if (v9 == (gcl::gpcc::Decoder::Delegate *)((char *)this + 64))
  {
    v10 = 4;
    v9 = (gcl::gpcc::Decoder::Delegate *)((char *)this + 64);
  }
  else
  {
    if (!v9)
      goto LABEL_21;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
LABEL_21:
  v11 = (gcl::gpcc::Decoder::Delegate *)*((_QWORD *)this + 7);
  if (v11 == (gcl::gpcc::Decoder::Delegate *)((char *)this + 32))
  {
    v12 = 4;
    v11 = (gcl::gpcc::Decoder::Delegate *)((char *)this + 32);
  }
  else
  {
    if (!v11)
      goto LABEL_26;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_26:
  v13 = (gcl::gpcc::Decoder::Delegate *)*((_QWORD *)this + 3);
  if (v13 == this)
  {
    v14 = 4;
    v13 = this;
  }
  else
  {
    if (!v13)
      return;
    v14 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
}

uint64_t *std::list<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::GenericAttr,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::GenericAttr>>::~list(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

void mgcl::bldg::BldgDecoderV1::~BldgDecoderV1(mgcl::bldg::BldgDecoderV1 *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 149);
  if (v2)
  {
    *((_QWORD *)this + 150) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 146);
  if (v3)
  {
    *((_QWORD *)this + 147) = v3;
    operator delete(v3);
  }
}

void std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

__n128 std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E1BFAD30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRK"
                     "NS_4gpcc20AttributeDescriptionEEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11Arra"
                                "yBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::target_type()
{
}

_QWORD *std::__function::__value_func<BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_189AE29B8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

_QWORD *std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E1BFAD88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRK"
                     "NS_4gpcc20AttributeDescriptionEEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11Arra"
                                "yBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::target_type()
{
}

_QWORD *std::__function::__value_func<BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_189AE2C20(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

__n128 std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E1BFADE0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E1BFADE0;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRK"
                     "NS_4gpcc20AttributeDescriptionEEEEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11Arra"
                                "yBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_2>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::target_type()
{
}

_QWORD *std::__function::__value_func<gcl::gpcc::ArrayBuffer ()(unsigned long)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_189AE2EB4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

__n128 std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E1BFAE38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRK"
                     "NS_4gpcc20AttributeDescriptionEEEEE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11Arra"
                                "yBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_3>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::target_type()
{
}

_QWORD *std::__function::__value_func<gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_189AE3120(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_4,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_4>,void ()(int,unsigned long)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

_QWORD *std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_4,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_4>,void ()(int,unsigned long)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E1BFAE90;
  return result;
}

uint64_t std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_4,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_4>,void ()(int,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRK"
                     "NS_4gpcc20AttributeDescriptionEEEEE3$_4")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11Arra"
                                "yBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_4"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_4,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_4>,void ()(int,unsigned long)>::target_type()
{
}

_QWORD *std::__function::__value_func<void ()(int,unsigned long)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_189AE3378(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5>,gcl::Error ()(int,gcl::gpcc::ByteBuffer)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

_QWORD *std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5>,gcl::Error ()(int,gcl::gpcc::ByteBuffer)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E1BFAEE8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5>,gcl::Error ()(int,gcl::gpcc::ByteBuffer)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E1BFAEE8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5>,gcl::Error ()(int,gcl::gpcc::ByteBuffer)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRK"
                     "NS_4gpcc20AttributeDescriptionEEEEE3$_5")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11Arra"
                                "yBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_5" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_5"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4bldg13BldgDecoderV16decodeERNS0_11BuildingCfgEPKcmRKNSt3__18functionIFNS0_11ArrayBufferEmRKNS_4gpcc20AttributeDescriptionEEEEE3$_5" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5,std::allocator<mgcl::bldg::BldgDecoderV1::decode(mgcl::bldg::BuildingCfg &,char const*,unsigned long,std::function<mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)> const&)::$_5>,gcl::Error ()(int,gcl::gpcc::ByteBuffer)>::target_type()
{
}

uint64_t mgcl::muid::Encoder::compressOrdered(mgcl::muid::Encoder *this)
{
  int *end;
  int *begin;
  unint64_t v4;
  uint64_t v5;
  std::vector<int>::pointer v6;
  int v7;
  uint64_t v8;
  int32x4_t v9;
  int32x4_t *v10;
  int32x4_t v11;
  int32x4_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  std::vector<int>::size_type v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::vector<int>::pointer v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  char v41;
  uint64_t v42;
  unsigned int v43;
  __int16 v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  char v55;
  uint64_t v56;
  unsigned int v57;
  __int16 v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  unsigned int v83;
  __int16 v84;
  __int16 v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unsigned int v92;
  int v94;
  uint64_t v95;
  int v96;
  unint64_t v97;
  char *v98;
  std::vector<int> v99;
  std::vector<int> v100;

  memset(&v100, 0, sizeof(v100));
  end = (int *)*((_QWORD *)this + 5);
  if (!end)
  {
    begin = 0;
    v7 = 1;
    goto LABEL_12;
  }
  std::vector<int>::__append(&v100, (std::vector<int>::size_type)end);
  begin = v100.__begin_;
  end = v100.__end_;
  if (v100.__begin_ == v100.__end_)
  {
    v7 = 1;
    end = v100.__begin_;
    goto LABEL_12;
  }
  v4 = (char *)v100.__end_ - (char *)v100.__begin_ - 4;
  if (v4 >= 0x1C)
  {
    v8 = (v4 >> 2) + 1;
    v5 = v8 & 0x7FFFFFFFFFFFFFF8;
    v6 = &v100.__begin_[v8 & 0x7FFFFFFFFFFFFFF8];
    v9 = (int32x4_t)xmmword_189CBDDD0;
    v10 = (int32x4_t *)(v100.__begin_ + 4);
    v11.i64[0] = 0x400000004;
    v11.i64[1] = 0x400000004;
    v12.i64[0] = 0x800000008;
    v12.i64[1] = 0x800000008;
    v13 = v8 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v10[-1] = v9;
      *v10 = vaddq_s32(v9, v11);
      v9 = vaddq_s32(v9, v12);
      v10 += 2;
      v13 -= 8;
    }
    while (v13);
    if (v8 == v5)
      goto LABEL_11;
  }
  else
  {
    LODWORD(v5) = 0;
    v6 = v100.__begin_;
  }
  do
  {
    *v6++ = v5;
    LODWORD(v5) = v5 + 1;
  }
  while (v6 != end);
LABEL_11:
  v7 = 0;
LABEL_12:
  v99.__begin_ = (std::vector<int>::pointer)this;
  v14 = 126 - 2 * __clz(end - begin);
  if (v7)
    v15 = 0;
  else
    v15 = v14;
  std::__introsort<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *,false>(begin, end, (uint64_t *)&v99, v15, 1);
  memset(&v99, 0, sizeof(v99));
  v16 = *((_QWORD *)this + 5);
  if (*(_QWORD *)this)
  {
    if (v16)
    {
      std::vector<int>::__append(&v99, v16);
      v17 = *((_QWORD *)this + 5);
      if (v17)
      {
        v18 = 0;
        v19 = *(_QWORD *)this;
        v20 = v99.__begin_;
        do
        {
          v20[*(int *)(v19 + 4 * v18)] = v18;
          ++v18;
        }
        while (v17 != v18);
LABEL_22:
        v21 = 0;
        v22 = 0;
        v23 = (char *)this + 1274;
        v98 = (char *)this + 64;
        v94 = *((_DWORD *)this + 4);
        v95 = *((_QWORD *)this + 1);
        v24 = (char *)this + 1136;
        v25 = -1;
        while (1)
        {
          v26 = v100.__begin_[v21];
          if (((*(_QWORD *)(v95 + v94 * (uint64_t)v26) ^ v22) & 0xFFFFFFFFFFF00000) == 0
            || *((_BYTE *)this + 1288) == 0)
          {
            v28 = v22;
          }
          else
          {
            v28 = v22 & 0xFFFFFFFFFFF00000;
          }
          v97 = *(_QWORD *)(v95 + v94 * (uint64_t)v26);
          if (v99.__begin_ != v99.__end_)
            v26 = v99.__begin_[v26];
          v29 = v26 - v25;
          v30 = v26 - v25 >= 0 ? v26 - v25 : v25 - v26;
          v31 = v30 - 1;
          v96 = v26;
          if (v30 > 1)
            break;
          gcl::ArithmeticEncoder::encode((uint64_t)v98, 0, (_WORD *)this + 641);
LABEL_38:
          gcl::ArithmeticEncoder::encode((uint64_t)v98, v29 >> 31, (_WORD *)this + 642);
          v22 = v97;
          gcl::ArithmeticEncoder::encode((uint64_t)v98, v97 != v28, (_WORD *)this + 643);
          v32 = v97 - v28;
          if (v32)
          {
            v33 = __clz(v32 | 1) ^ 0x3F;
            if ((_DWORD)v33)
            {
              v34 = 0;
              v36 = *((_DWORD *)this + 22);
              v35 = *((_DWORD *)this + 23);
              v37 = 4;
              v38 = 1;
              v39 = v33;
              do
              {
                v41 = v34;
                v42 = 2 * v37;
                v43 = (v35 * *(unsigned __int16 *)&v24[v42]) >> 16;
                v36 += v43;
                v35 -= v43;
                v44 = *(_WORD *)&v24[v42]
                    - *(_WORD *)((char *)this + (((unint64_t)*(unsigned __int16 *)&v24[v42] >> 7) & 0x1FE) + 112);
                *((_DWORD *)this + 22) = v36;
                *((_DWORD *)this + 23) = v35;
                *(_WORD *)&v24[v42] = v44;
                if (v35 <= 0x4000)
                {
                  v45 = *((_DWORD *)this + 26);
                  do
                  {
                    v36 *= 2;
                    v35 *= 2;
                    *((_DWORD *)this + 22) = v36;
                    *((_DWORD *)this + 23) = v35;
                    *((_DWORD *)this + 26) = ++v45;
                    if (v45 != 8)
                      continue;
                    v46 = *((_QWORD *)this + 10);
                    v47 = *((int *)this + 27);
                    if (v46 + v47 + 1 > (unint64_t)*((unsigned int *)this + 17))
                      break;
                    if (HIBYTE(v36))
                    {
                      ++*(_BYTE *)(v46 + *((_QWORD *)this + 9) - 1);
                      v46 = *((_QWORD *)this + 10);
                      if (*((_DWORD *)this + 27))
                      {
                        do
                        {
                          *(_BYTE *)(*((_QWORD *)this + 9) + v46) = 0;
                          v48 = *((_DWORD *)this + 27);
                          v46 = *((_QWORD *)this + 10) + 1;
                          *((_QWORD *)this + 10) = v46;
                          *((_DWORD *)this + 27) = --v48;
                        }
                        while (v48);
                      }
                    }
                    else
                    {
                      if ((v35 + v36) >> 24)
                      {
                        *((_DWORD *)this + 27) = v47 + 1;
                        goto LABEL_47;
                      }
                      if ((_DWORD)v47)
                      {
                        do
                        {
                          *(_BYTE *)(*((_QWORD *)this + 9) + v46) = -1;
                          v49 = *((_DWORD *)this + 27);
                          v46 = *((_QWORD *)this + 10) + 1;
                          *((_QWORD *)this + 10) = v46;
                          *((_DWORD *)this + 27) = --v49;
                        }
                        while (v49);
                      }
                    }
                    *(_BYTE *)(*((_QWORD *)this + 9) + v46) = *((_WORD *)this + 45);
                    ++*((_QWORD *)this + 10);
                    LOWORD(v36) = *((_WORD *)this + 44);
                    v35 = *((_DWORD *)this + 23);
LABEL_47:
                    v45 = 0;
                    v36 = (unsigned __int16)v36;
                    *((_DWORD *)this + 22) = (unsigned __int16)v36;
                    *((_DWORD *)this + 26) = 0;
                  }
                  while (v35 <= 0x4000);
                }
                v39 -= v38;
                ++v34;
                v40 = v37-- != 0;
                if (!v40)
                  v37 = 0;
                v38 = 2 << v41;
              }
              while (v39 >= 2 << v41);
              gcl::ArithmeticEncoder::encode((uint64_t)v98, 0, &v24[2 * v37]);
              v72 = *((_DWORD *)this + 23);
              while (2)
              {
                --v34;
                v73 = (unsigned __int16)(v72 >> 1);
                if (((v39 >> v34) & 1) != 0)
                {
                  v72 -= v73;
                  *((_DWORD *)this + 22) += v73;
                  *((_DWORD *)this + 23) = v72;
                  if (v72 <= 0x4000)
                    goto LABEL_107;
LABEL_102:
                  if (v34)
                    continue;
                  v80 = ~(1 << v33);
                  v22 = v97;
                  while (2)
                  {
                    --v33;
                    v81 = (char *)this + 2 * v33;
                    v82 = *((unsigned __int16 *)v81 + 573);
                    v83 = (v72 * v82) >> 16;
                    if (((1 << v33) & v80 & v32) != 0)
                    {
                      v72 -= v83;
                      v84 = v82 - *(_WORD *)((char *)this + ((v82 >> 7) & 0x1FE) + 112);
                      *((_DWORD *)this + 22) += v83;
                      *((_DWORD *)this + 23) = v72;
                      *((_WORD *)v81 + 573) = v84;
                      if (v72 <= 0x4000)
                        break;
                      goto LABEL_123;
                    }
                    v85 = *(_WORD *)((char *)this + (~(*((_WORD *)v81 + 573) >> 7) & 0x1FE) + 112)
                        + *((_WORD *)v81 + 573);
                    v72 = v83;
                    *((_DWORD *)this + 23) = v83;
                    *((_WORD *)v81 + 573) = v85;
                    if (v83 > 0x4000)
                    {
LABEL_123:
                      if (!v33)
                        goto LABEL_24;
                      continue;
                    }
                    break;
                  }
                  v86 = *((_DWORD *)this + 22);
                  v87 = *((_DWORD *)this + 26);
                  while (2)
                  {
                    v86 *= 2;
                    v72 *= 2;
                    *((_DWORD *)this + 22) = v86;
                    *((_DWORD *)this + 23) = v72;
                    *((_DWORD *)this + 26) = ++v87;
                    if (v87 != 8)
                      goto LABEL_131;
                    v88 = *((_QWORD *)this + 10);
                    v89 = *((int *)this + 27);
                    if (v88 + v89 + 1 > (unint64_t)*((unsigned int *)this + 17))
                      goto LABEL_123;
                    if (HIBYTE(v86))
                    {
                      ++*(_BYTE *)(v88 + *((_QWORD *)this + 9) - 1);
                      v88 = *((_QWORD *)this + 10);
                      if (*((_DWORD *)this + 27))
                      {
                        do
                        {
                          *(_BYTE *)(*((_QWORD *)this + 9) + v88) = 0;
                          v90 = *((_DWORD *)this + 27);
                          v88 = *((_QWORD *)this + 10) + 1;
                          *((_QWORD *)this + 10) = v88;
                          *((_DWORD *)this + 27) = --v90;
                        }
                        while (v90);
                      }
                    }
                    else
                    {
                      if ((v72 + v86) >> 24)
                      {
                        *((_DWORD *)this + 27) = v89 + 1;
LABEL_130:
                        v87 = 0;
                        v86 = (unsigned __int16)v86;
                        *((_DWORD *)this + 22) = (unsigned __int16)v86;
                        *((_DWORD *)this + 26) = 0;
LABEL_131:
                        if (v72 > 0x4000)
                          goto LABEL_123;
                        continue;
                      }
                      if ((_DWORD)v89)
                      {
                        do
                        {
                          *(_BYTE *)(*((_QWORD *)this + 9) + v88) = -1;
                          v91 = *((_DWORD *)this + 27);
                          v88 = *((_QWORD *)this + 10) + 1;
                          *((_QWORD *)this + 10) = v88;
                          *((_DWORD *)this + 27) = --v91;
                        }
                        while (v91);
                      }
                    }
                    break;
                  }
                  *(_BYTE *)(*((_QWORD *)this + 9) + v88) = *((_WORD *)this + 45);
                  ++*((_QWORD *)this + 10);
                  LOWORD(v86) = *((_WORD *)this + 44);
                  v72 = *((_DWORD *)this + 23);
                  goto LABEL_130;
                }
                break;
              }
              v72 = (unsigned __int16)(v72 >> 1);
              *((_DWORD *)this + 23) = v73;
              if (v73 > 0x4000)
                goto LABEL_102;
LABEL_107:
              v74 = *((_DWORD *)this + 22);
              v75 = *((_DWORD *)this + 26);
              while (2)
              {
                v74 *= 2;
                v72 *= 2;
                *((_DWORD *)this + 22) = v74;
                *((_DWORD *)this + 23) = v72;
                *((_DWORD *)this + 26) = ++v75;
                if (v75 != 8)
                  goto LABEL_110;
                v76 = *((_QWORD *)this + 10);
                v77 = *((int *)this + 27);
                if (v76 + v77 + 1 > (unint64_t)*((unsigned int *)this + 17))
                  goto LABEL_102;
                if (HIBYTE(v74))
                {
                  ++*(_BYTE *)(v76 + *((_QWORD *)this + 9) - 1);
                  v76 = *((_QWORD *)this + 10);
                  if (*((_DWORD *)this + 27))
                  {
                    do
                    {
                      *(_BYTE *)(*((_QWORD *)this + 9) + v76) = 0;
                      v78 = *((_DWORD *)this + 27);
                      v76 = *((_QWORD *)this + 10) + 1;
                      *((_QWORD *)this + 10) = v76;
                      *((_DWORD *)this + 27) = --v78;
                    }
                    while (v78);
                  }
                }
                else
                {
                  if ((v72 + v74) >> 24)
                  {
                    *((_DWORD *)this + 27) = v77 + 1;
LABEL_109:
                    v75 = 0;
                    v74 = (unsigned __int16)v74;
                    *((_DWORD *)this + 22) = (unsigned __int16)v74;
                    *((_DWORD *)this + 26) = 0;
LABEL_110:
                    if (v72 > 0x4000)
                      goto LABEL_102;
                    continue;
                  }
                  if ((_DWORD)v77)
                  {
                    do
                    {
                      *(_BYTE *)(*((_QWORD *)this + 9) + v76) = -1;
                      v79 = *((_DWORD *)this + 27);
                      v76 = *((_QWORD *)this + 10) + 1;
                      *((_QWORD *)this + 10) = v76;
                      *((_DWORD *)this + 27) = --v79;
                    }
                    while (v79);
                  }
                }
                break;
              }
              *(_BYTE *)(*((_QWORD *)this + 9) + v76) = *((_WORD *)this + 45);
              ++*((_QWORD *)this + 10);
              LOWORD(v74) = *((_WORD *)this + 44);
              v72 = *((_DWORD *)this + 23);
              goto LABEL_109;
            }
            gcl::ArithmeticEncoder::encode((uint64_t)v98, 0, (_WORD *)this + 572);
          }
LABEL_24:
          ++v21;
          v25 = v96;
          if (v21 >= *((_QWORD *)this + 5))
            goto LABEL_143;
        }
        v50 = 0;
        v52 = *((_DWORD *)this + 22);
        v51 = *((_DWORD *)this + 23);
        v53 = 4;
        v54 = 1;
        do
        {
          v55 = v50;
          v56 = 2 * v53;
          v57 = (v51 * *(unsigned __int16 *)&v23[v56]) >> 16;
          v52 += v57;
          v51 -= v57;
          v58 = *(_WORD *)&v23[v56]
              - *(_WORD *)((char *)this + (((unint64_t)*(unsigned __int16 *)&v23[v56] >> 7) & 0x1FE) + 112);
          *((_DWORD *)this + 22) = v52;
          *((_DWORD *)this + 23) = v51;
          *(_WORD *)&v23[v56] = v58;
          if (v51 <= 0x4000)
          {
            v59 = *((_DWORD *)this + 26);
            do
            {
              v52 *= 2;
              v51 *= 2;
              *((_DWORD *)this + 22) = v52;
              *((_DWORD *)this + 23) = v51;
              *((_DWORD *)this + 26) = ++v59;
              if (v59 != 8)
                continue;
              v60 = *((_QWORD *)this + 10);
              v61 = *((int *)this + 27);
              if (v60 + v61 + 1 > (unint64_t)*((unsigned int *)this + 17))
                break;
              if (HIBYTE(v52))
              {
                ++*(_BYTE *)(v60 + *((_QWORD *)this + 9) - 1);
                v60 = *((_QWORD *)this + 10);
                if (*((_DWORD *)this + 27))
                {
                  do
                  {
                    *(_BYTE *)(*((_QWORD *)this + 9) + v60) = 0;
                    v62 = *((_DWORD *)this + 27);
                    v60 = *((_QWORD *)this + 10) + 1;
                    *((_QWORD *)this + 10) = v60;
                    *((_DWORD *)this + 27) = --v62;
                  }
                  while (v62);
                }
              }
              else
              {
                if ((v51 + v52) >> 24)
                {
                  *((_DWORD *)this + 27) = v61 + 1;
                  goto LABEL_67;
                }
                if ((_DWORD)v61)
                {
                  do
                  {
                    *(_BYTE *)(*((_QWORD *)this + 9) + v60) = -1;
                    v63 = *((_DWORD *)this + 27);
                    v60 = *((_QWORD *)this + 10) + 1;
                    *((_QWORD *)this + 10) = v60;
                    *((_DWORD *)this + 27) = --v63;
                  }
                  while (v63);
                }
              }
              *(_BYTE *)(*((_QWORD *)this + 9) + v60) = *((_WORD *)this + 45);
              ++*((_QWORD *)this + 10);
              LOWORD(v52) = *((_WORD *)this + 44);
              v51 = *((_DWORD *)this + 23);
LABEL_67:
              v59 = 0;
              v52 = (unsigned __int16)v52;
              *((_DWORD *)this + 22) = (unsigned __int16)v52;
              *((_DWORD *)this + 26) = 0;
            }
            while (v51 <= 0x4000);
          }
          v31 -= v54;
          ++v50;
          v40 = v53-- != 0;
          if (!v40)
            v53 = 0;
          v54 = 2 << v55;
        }
        while (v31 >= 2 << v55);
        gcl::ArithmeticEncoder::encode((uint64_t)v98, 0, &v23[2 * v53]);
        v64 = *((_DWORD *)this + 23);
        while (1)
        {
          --v50;
          v65 = (unsigned __int16)(v64 >> 1);
          if (((v31 >> v50) & 1) == 0)
            break;
          v64 -= v65;
          *((_DWORD *)this + 22) += v65;
          *((_DWORD *)this + 23) = v64;
          if (v64 <= 0x4000)
            goto LABEL_86;
LABEL_81:
          if (!v50)
            goto LABEL_38;
        }
        v64 = (unsigned __int16)(v64 >> 1);
        *((_DWORD *)this + 23) = v65;
        if (v65 > 0x4000)
          goto LABEL_81;
LABEL_86:
        v66 = *((_DWORD *)this + 22);
        v67 = *((_DWORD *)this + 26);
        while (1)
        {
          v66 *= 2;
          v64 *= 2;
          *((_DWORD *)this + 22) = v66;
          *((_DWORD *)this + 23) = v64;
          *((_DWORD *)this + 26) = ++v67;
          if (v67 != 8)
            goto LABEL_89;
          v68 = *((_QWORD *)this + 10);
          v69 = *((int *)this + 27);
          if (v68 + v69 + 1 > (unint64_t)*((unsigned int *)this + 17))
            goto LABEL_81;
          if (HIBYTE(v66))
          {
            ++*(_BYTE *)(v68 + *((_QWORD *)this + 9) - 1);
            v68 = *((_QWORD *)this + 10);
            if (*((_DWORD *)this + 27))
            {
              do
              {
                *(_BYTE *)(*((_QWORD *)this + 9) + v68) = 0;
                v70 = *((_DWORD *)this + 27);
                v68 = *((_QWORD *)this + 10) + 1;
                *((_QWORD *)this + 10) = v68;
                *((_DWORD *)this + 27) = --v70;
              }
              while (v70);
            }
          }
          else
          {
            if ((v64 + v66) >> 24)
            {
              *((_DWORD *)this + 27) = v69 + 1;
              goto LABEL_88;
            }
            if ((_DWORD)v69)
            {
              do
              {
                *(_BYTE *)(*((_QWORD *)this + 9) + v68) = -1;
                v71 = *((_DWORD *)this + 27);
                v68 = *((_QWORD *)this + 10) + 1;
                *((_QWORD *)this + 10) = v68;
                *((_DWORD *)this + 27) = --v71;
              }
              while (v71);
            }
          }
          *(_BYTE *)(*((_QWORD *)this + 9) + v68) = *((_WORD *)this + 45);
          ++*((_QWORD *)this + 10);
          LOWORD(v66) = *((_WORD *)this + 44);
          v64 = *((_DWORD *)this + 23);
LABEL_88:
          v67 = 0;
          v66 = (unsigned __int16)v66;
          *((_DWORD *)this + 22) = (unsigned __int16)v66;
          *((_DWORD *)this + 26) = 0;
LABEL_89:
          if (v64 > 0x4000)
            goto LABEL_81;
        }
      }
    }
  }
  else if (v16)
  {
    goto LABEL_22;
  }
LABEL_143:
  *((_QWORD *)this + 6) += gcl::ArithmeticEncoder::stop((mgcl::muid::Encoder *)((char *)this + 64));
  v92 = *((_DWORD *)this + 16);
  if (v99.__begin_)
  {
    v99.__end_ = v99.__begin_;
    operator delete(v99.__begin_);
  }
  if (v100.__begin_)
  {
    v100.__end_ = v100.__begin_;
    operator delete(v100.__begin_);
  }
  if (v92 >= 5)
    return 5;
  else
    return v92;
}

void sub_189AE3EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  void *v24;

  if (__p)
  {
    operator delete(__p);
    v24 = a22;
    if (!a22)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v24 = a22;
    if (!a22)
      goto LABEL_3;
  }
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

uint64_t mgcl::muid::compress(mgcl::muid *this, const unint64_t *a2, uint64_t a3, uint64_t a4, const int *a5, const int *a6, _BYTE *a7, char *a8, _QWORD *a9, unint64_t *a10)
{
  uint64_t result;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  int v18;
  const int *v19;
  int v20;
  uint64_t v21;
  _BYTE *v22;
  char *v23;
  int v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[1024];
  uint64_t v31;
  _BYTE v32[6];
  _BYTE v33[22];

  result = 5;
  if (a7 && (unint64_t)a8 >= 0x10)
  {
    if (a9)
      *a9 = 0;
    v17[0] = a4;
    v17[1] = this;
    v18 = (int)a2;
    v19 = a5;
    v20 = (int)a6;
    v21 = a3;
    memset_pattern16(&v31, &memset_pattern_0, 0xAuLL);
    memset_pattern16(v32, &memset_pattern_1, 0x80uLL);
    memset_pattern16(v33, &memset_pattern_2, 0xAuLL);
    v14 = 0;
    *(_DWORD *)&v33[10] = 1081344;
    v33[14] = 1;
    *a7 = 1;
    v22 = a7 + 1;
    v23 = a8 - 1;
    v24 = 0;
    v25 = (_DWORD)a8 - 1;
    *(_QWORD *)&v15 = 0xFFFF00000000;
    *((_QWORD *)&v15 + 1) = 0xFFFF00000000;
    v28 = v15;
    v26 = a7 + 1;
    v27 = 0;
    v16 = 0x237u;
    v29 = 0;
    do
    {
      *(_WORD *)&v30[v14 * 2] = gcl::ArithmeticEncoder::probUpdateLut[v14];
      *(_WORD *)((char *)v17 + v16 * 2) = gcl::ArithmeticEncoder::probUpdateLut[v16 - 312];
      ++v14;
      --v16;
    }
    while (v14 != 256);
    result = mgcl::muid::Encoder::compressOrdered((mgcl::muid::Encoder *)v17);
    if (a9)
      *a9 = v22 - a7;
  }
  return result;
}

int *std::__introsort<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *,false>(int *result, int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  int *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int *v31;
  int *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  int v41;
  int v42;
  int v43;
  int *v44;
  int *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  unint64_t v75;
  int v76;
  int *v77;
  int *v78;
  int v79;
  int v80;
  int v81;
  int *v82;
  int *v83;
  int v84;
  unint64_t v85;
  int v86;
  int v87;
  int *v88;
  BOOL v89;
  int v90;
  int *v91;
  int *v92;
  int v93;
  int v94;
  int v95;
  int v96;
  unint64_t v97;
  int v98;
  int v99;
  int *v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  int v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  unint64_t v111;
  int *v112;
  int *v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  uint64_t v119;
  int *v120;
  uint64_t v121;
  uint64_t v122;
  int *v123;
  int *v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  int64_t v133;
  uint64_t v134;
  int64_t v135;
  int64_t v136;
  uint64_t v137;
  int *v138;
  int v139;
  uint64_t v140;
  int v141;
  int *v142;
  int v143;
  unint64_t v144;
  int v145;
  unint64_t v146;
  unint64_t v147;
  int *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int64_t v155;
  int *v156;
  int v157;
  int *v158;
  int *v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  int *v166;
  int v167;
  int v168;
  uint64_t v169;
  int *v170;
  int v171;
  unint64_t v172;
  int v173;
  int *v174;
  uint64_t v175;
  int v176;
  int v177;
  int v178;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v101 = *(a2 - 1);
        v102 = *v10;
        if (*(_QWORD *)(*(_QWORD *)(*a3 + 8) + *(_DWORD *)(*a3 + 16) * v101) < *(_QWORD *)(*(_QWORD *)(*a3 + 8)
                                                                                          + *(_DWORD *)(*a3 + 16) * *v10))
        {
          *v10 = v101;
          *(a2 - 1) = v102;
        }
        return result;
      case 3:
        v103 = *a3;
        v104 = *v10;
        v105 = v10[1];
        v106 = *(_QWORD *)(*a3 + 8);
        v107 = *(_DWORD *)(*a3 + 16);
        v108 = *(_QWORD *)(v106 + v107 * v105);
        v109 = *(_QWORD *)(v106 + v107 * *v10);
        v110 = *(a2 - 1);
        v111 = *(_QWORD *)(v106 + v110 * v107);
        if (v108 >= v109)
        {
          if (v111 < v108)
          {
            v10[1] = v110;
            *(a2 - 1) = v105;
            v116 = v10[1];
            goto LABEL_158;
          }
        }
        else
        {
          if (v111 >= v108)
          {
            *v10 = v105;
            v10[1] = v104;
            v178 = *(a2 - 1);
            if (*(_QWORD *)(v106 + *(_DWORD *)(v103 + 16) * v178) >= *(_QWORD *)(v106 + *(_DWORD *)(v103 + 16) * v104))
              return result;
            v10[1] = v178;
          }
          else
          {
            *v10 = v110;
          }
          *(a2 - 1) = v104;
        }
        return result;
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *>(v10, v10 + 1, v10 + 2, a2 - 1, *a3);
      case 5:
        v112 = v10 + 2;
        v113 = v10 + 3;
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *>(v9, v9 + 1, v9 + 2, v9 + 3, *a3);
        v114 = *(a2 - 1);
        v115 = v9[3];
        v103 = *a3;
        v106 = *(_QWORD *)(*a3 + 8);
        if (*(_QWORD *)(v106 + *(_DWORD *)(*a3 + 16) * v114) < *(_QWORD *)(v106 + *(_DWORD *)(*a3 + 16) * v115))
        {
          *v113 = v114;
          *(a2 - 1) = v115;
          v116 = *v113;
          v117 = *v112;
          if (*(_QWORD *)(v106 + *(_DWORD *)(v103 + 16) * *v113) < *(_QWORD *)(v106 + *(_DWORD *)(v103 + 16) * *v112))
          {
            *v112 = v116;
            *v113 = v117;
            v118 = v9[1];
            if (*(_QWORD *)(v106 + *(_DWORD *)(v103 + 16) * v116) < *(_QWORD *)(v106 + *(_DWORD *)(v103 + 16) * v118))
            {
              v9[1] = v116;
              v9[2] = v118;
LABEL_158:
              v173 = *v9;
              if (*(_QWORD *)(v106 + *(_DWORD *)(v103 + 16) * v116) < *(_QWORD *)(v106 + *(_DWORD *)(v103 + 16) * *v9))
              {
                *v9 = v116;
                v9[1] = v173;
              }
            }
          }
        }
        return result;
      default:
        if (v11 > 95)
        {
          if (!a4)
          {
            if (v10 != a2)
            {
              v133 = (unint64_t)(v12 - 2) >> 1;
              v134 = *a3;
              v135 = v133;
              do
              {
                v136 = v135;
                if (v133 >= v135)
                {
                  v137 = (2 * v135) | 1;
                  v138 = &v10[v137];
                  v139 = *v138;
                  if (2 * v136 + 2 >= v12)
                  {
                    v140 = *(_QWORD *)(v134 + 8);
                    v141 = *(_DWORD *)(v134 + 16);
                  }
                  else
                  {
                    v140 = *(_QWORD *)(v134 + 8);
                    v141 = *(_DWORD *)(v134 + 16);
                    if (*(_QWORD *)(v140 + v141 * v139) < *(_QWORD *)(v140 + v141 * v138[1]))
                    {
                      v139 = v138[1];
                      ++v138;
                      v137 = 2 * v136 + 2;
                    }
                  }
                  v142 = &v10[v136];
                  v143 = *v142;
                  v144 = *(_QWORD *)(v140 + v141 * (uint64_t)v139);
                  result = *(int **)(v140 + *v142 * (uint64_t)v141);
                  if (v144 >= (unint64_t)result)
                  {
                    result = (int *)v143;
                    do
                    {
                      v148 = v138;
                      *v142 = v139;
                      if (v133 < v137)
                        break;
                      v149 = (2 * v137) | 1;
                      v138 = &v10[v149];
                      v137 = 2 * v137 + 2;
                      v139 = *v138;
                      if (v137 < v12)
                      {
                        v145 = *(_DWORD *)(v134 + 16);
                        if (*(_QWORD *)(v140 + v145 * v139) >= *(_QWORD *)(v140 + v145 * v138[1]))
                        {
                          v137 = v149;
                        }
                        else
                        {
                          v139 = v138[1];
                          ++v138;
                        }
                      }
                      else
                      {
                        v145 = *(_DWORD *)(v134 + 16);
                        v137 = v149;
                      }
                      v146 = *(_QWORD *)(v140 + v139 * (uint64_t)v145);
                      v147 = *(_QWORD *)(v140 + v143 * (uint64_t)v145);
                      v142 = v148;
                    }
                    while (v146 >= v147);
                    *v148 = v143;
                    v134 = *a3;
                  }
                }
                v135 = v136 - 1;
              }
              while (v136);
              v150 = (unint64_t)v11 >> 2;
              do
              {
                v152 = 0;
                v153 = *v10;
                v154 = *a3;
                v155 = (unint64_t)(v150 - 2) >> 1;
                v156 = v10;
                do
                {
                  while (1)
                  {
                    v159 = &v156[v152];
                    v160 = v159[1];
                    v158 = v159 + 1;
                    v157 = v160;
                    v161 = (2 * v152) | 1;
                    v152 = 2 * v152 + 2;
                    if (v152 < v150)
                      break;
                    v152 = v161;
                    *v156 = v157;
                    v156 = v158;
                    if (v161 > v155)
                      goto LABEL_150;
                  }
                  result = (int *)v158[1];
                  if (*(_QWORD *)(*(_QWORD *)(v154 + 8) + *(_DWORD *)(v154 + 16) * v157) >= *(_QWORD *)(*(_QWORD *)(v154 + 8) + *(_DWORD *)(v154 + 16) * (int)result))
                  {
                    v152 = v161;
                  }
                  else
                  {
                    v157 = v158[1];
                    ++v158;
                  }
                  *v156 = v157;
                  v156 = v158;
                }
                while (v152 <= v155);
LABEL_150:
                if (v158 == --a2)
                {
                  *v158 = v153;
                }
                else
                {
                  *v158 = *a2;
                  *a2 = v153;
                  v162 = (char *)v158 - (char *)v10 + 4;
                  if (v162 >= 5)
                  {
                    v163 = (unint64_t)v162 >> 2;
                    v164 = *a3;
                    v165 = (v163 - 2) >> 1;
                    v166 = &v10[v165];
                    v167 = *v166;
                    v168 = *v158;
                    v169 = *(_QWORD *)(*a3 + 8);
                    if (*(_QWORD *)(v169 + *(_DWORD *)(*a3 + 16) * *v166) < *(_QWORD *)(v169
                                                                                       + *(_DWORD *)(*a3 + 16) * *v158))
                    {
                      do
                      {
                        v170 = v166;
                        *v158 = v167;
                        if (!v165)
                          break;
                        v165 = (v165 - 1) >> 1;
                        v166 = &v10[v165];
                        v167 = *v166;
                        v171 = *(_DWORD *)(v164 + 16);
                        v172 = *(_QWORD *)(v169 + v171 * *v166);
                        result = *(int **)(v169 + v171 * v168);
                        v158 = v170;
                      }
                      while (v172 < (unint64_t)result);
                      *v170 = v168;
                    }
                  }
                }
              }
              while (v150-- > 2);
            }
            return result;
          }
          v13 = (unint64_t)v12 >> 1;
          v14 = &v10[(unint64_t)v12 >> 1];
          v15 = *a3;
          v16 = *(_QWORD *)(*a3 + 8);
          v17 = *(_DWORD *)(*a3 + 16);
          v18 = *(a2 - 1);
          v19 = *(_QWORD *)(v16 + v18 * v17);
          if ((unint64_t)v11 < 0x201)
          {
            v23 = *v10;
            v24 = *v14;
            v25 = *(_QWORD *)(v16 + *v10 * v17);
            if (v25 >= *(_QWORD *)(v16 + *v14 * v17))
            {
              if (v19 < v25)
              {
                *v10 = v18;
                *(a2 - 1) = v23;
                v27 = *v14;
                if (*(_QWORD *)(v16 + *(_DWORD *)(v15 + 16) * *v10) < *(_QWORD *)(v16 + *(_DWORD *)(v15 + 16) * *v14))
                {
                  *v14 = *v10;
                  *v10 = v27;
                  --a4;
                  v28 = v27;
                  v29 = v27;
                  if ((a5 & 1) != 0)
                    goto LABEL_55;
                  goto LABEL_54;
                }
              }
              goto LABEL_32;
            }
            if (v19 >= v25)
            {
              *v14 = v23;
              *v10 = v24;
              v42 = *(a2 - 1);
              if (*(_QWORD *)(v16 + *(_DWORD *)(v15 + 16) * v42) >= *(_QWORD *)(v16 + *(_DWORD *)(v15 + 16) * v24))
                goto LABEL_32;
              *v10 = v42;
            }
            else
            {
              *v14 = v18;
            }
            *(a2 - 1) = v24;
LABEL_32:
            --a4;
            v28 = *v10;
            v29 = *v10;
            if ((a5 & 1) != 0)
              goto LABEL_55;
            goto LABEL_54;
          }
          v20 = *v14;
          v21 = *v10;
          v22 = *(_QWORD *)(v16 + *v14 * v17);
          if (v22 >= *(_QWORD *)(v16 + *v10 * v17))
          {
            if (v19 < v22)
            {
              *v14 = v18;
              *(a2 - 1) = v20;
              v26 = *v10;
              if (*(_QWORD *)(v16 + *(_DWORD *)(v15 + 16) * *v14) < *(_QWORD *)(v16 + *(_DWORD *)(v15 + 16) * *v10))
              {
                *v10 = *v14;
                *v14 = v26;
              }
            }
          }
          else
          {
            if (v19 >= v22)
            {
              *v10 = v20;
              *v14 = v21;
              v30 = *(a2 - 1);
              if (*(_QWORD *)(v16 + *(_DWORD *)(v15 + 16) * v30) >= *(_QWORD *)(v16 + *(_DWORD *)(v15 + 16) * v21))
                goto LABEL_23;
              *v14 = v30;
            }
            else
            {
              *v10 = v18;
            }
            *(a2 - 1) = v21;
          }
LABEL_23:
          v31 = &v10[v13];
          v34 = *(v31 - 1);
          v32 = v31 - 1;
          v33 = v34;
          v35 = v10[1];
          v36 = *(_DWORD *)(v15 + 16);
          v37 = *(_QWORD *)(v16 + v36 * v34);
          v38 = *(_QWORD *)(v16 + v36 * v35);
          v39 = *(a2 - 2);
          v40 = *(_QWORD *)(v16 + v39 * v36);
          if (v37 >= v38)
          {
            if (v40 < v37)
            {
              *v32 = v39;
              *(a2 - 2) = v33;
              v41 = v10[1];
              if (*(_QWORD *)(v16 + *(_DWORD *)(v15 + 16) * *v32) < *(_QWORD *)(v16 + *(_DWORD *)(v15 + 16) * v41))
              {
                v10[1] = *v32;
                *v32 = v41;
              }
            }
          }
          else
          {
            if (v40 >= v37)
            {
              v10[1] = v33;
              *v32 = v35;
              v43 = *(a2 - 2);
              if (*(_QWORD *)(v16 + *(_DWORD *)(v15 + 16) * v43) >= *(_QWORD *)(v16 + *(_DWORD *)(v15 + 16) * v35))
                goto LABEL_37;
              *v32 = v43;
            }
            else
            {
              v10[1] = v39;
            }
            *(a2 - 2) = v35;
          }
LABEL_37:
          v44 = &v10[v13];
          v47 = v44[1];
          v45 = v44 + 1;
          v46 = v47;
          v48 = v10[2];
          v49 = *(_DWORD *)(v15 + 16);
          v50 = *(_QWORD *)(v16 + v49 * v47);
          v51 = *(_QWORD *)(v16 + v49 * v48);
          v52 = *(a2 - 3);
          v53 = *(_QWORD *)(v16 + v52 * v49);
          if (v50 >= v51)
          {
            if (v53 < v50)
            {
              *v45 = v52;
              *(a2 - 3) = v46;
              v54 = v10[2];
              if (*(_QWORD *)(v16 + *(_DWORD *)(v15 + 16) * *v45) < *(_QWORD *)(v16 + *(_DWORD *)(v15 + 16) * v54))
              {
                v10[2] = *v45;
                *v45 = v54;
              }
            }
          }
          else
          {
            if (v53 >= v50)
            {
              v10[2] = v46;
              *v45 = v48;
              v55 = *(a2 - 3);
              if (*(_QWORD *)(v16 + *(_DWORD *)(v15 + 16) * v55) >= *(_QWORD *)(v16 + *(_DWORD *)(v15 + 16) * v48))
                goto LABEL_46;
              *v45 = v55;
            }
            else
            {
              v10[2] = v52;
            }
            *(a2 - 3) = v48;
          }
LABEL_46:
          v56 = *v14;
          v57 = *v32;
          v58 = *(_DWORD *)(v15 + 16);
          v59 = *(_QWORD *)(v16 + v58 * *v14);
          result = *(int **)(v16 + v58 * *v32);
          v60 = *v45;
          v61 = *(_QWORD *)(v16 + *v45 * v58);
          if (v59 < (unint64_t)result)
          {
            if (v61 >= v59)
            {
              *v32 = v56;
              *v14 = v57;
              v62 = *(_DWORD *)(v15 + 16);
              v63 = *(_QWORD *)(v16 + v62 * v60);
              v64 = *(_QWORD *)(v16 + v62 * v57);
              v32 = v14;
              v56 = v60;
              if (v63 >= v64)
              {
                v56 = v57;
                goto LABEL_53;
              }
            }
LABEL_52:
            *v32 = v60;
            *v45 = v57;
            goto LABEL_53;
          }
          if (v61 >= v59)
            goto LABEL_53;
          *v14 = v60;
          *v45 = v56;
          v65 = *(_DWORD *)(v15 + 16);
          v66 = *(_QWORD *)(v16 + v65 * v60);
          v67 = *(_QWORD *)(v16 + v65 * v57);
          v45 = v14;
          v56 = v57;
          if (v66 < v67)
            goto LABEL_52;
          v56 = v60;
LABEL_53:
          v68 = *v10;
          *v10 = v56;
          *v14 = v68;
          --a4;
          v28 = *v10;
          v29 = *v10;
          if ((a5 & 1) != 0)
            goto LABEL_55;
LABEL_54:
          v69 = *(_DWORD *)(v15 + 16);
          v70 = *(_QWORD *)(v16 + v69 * (uint64_t)v29);
          if (*(_QWORD *)(v16 + v69 * (uint64_t)*(v10 - 1)) >= v70)
          {
            if (v70 >= *(_QWORD *)(v16 + *(a2 - 1) * (uint64_t)v69))
            {
              v91 = v10 + 1;
              do
              {
                v10 = v91;
                if (v91 >= a2)
                  break;
                ++v91;
              }
              while (v70 >= *(_QWORD *)(v16 + *v10 * (uint64_t)v69));
            }
            else
            {
              do
              {
                v90 = v10[1];
                ++v10;
              }
              while (v70 >= *(_QWORD *)(v16 + v90 * (uint64_t)v69));
            }
            v92 = a2;
            if (v10 < a2)
            {
              v92 = a2;
              do
                v93 = *--v92;
              while (v70 < *(_QWORD *)(v16 + v93 * (uint64_t)v69));
            }
            if (v10 < v92)
            {
              v94 = *v10;
              v95 = *v92;
              do
              {
                *v10 = v95;
                *v92 = v94;
                v96 = *(_DWORD *)(v15 + 16);
                v97 = *(_QWORD *)(v16 + v96 * v28);
                do
                {
                  v98 = v10[1];
                  ++v10;
                  v94 = v98;
                }
                while (v97 >= *(_QWORD *)(v16 + v98 * v96));
                do
                {
                  v99 = *--v92;
                  v95 = v99;
                }
                while (v97 < *(_QWORD *)(v16 + v99 * v96));
              }
              while (v10 < v92);
            }
            v100 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v100;
            a5 = 0;
            *v100 = v28;
            continue;
          }
LABEL_55:
          v71 = 0;
          v72 = *a3;
          v73 = *(_QWORD *)(*a3 + 8);
          v74 = *(_DWORD *)(*a3 + 16);
          v75 = *(_QWORD *)(v73 + v74 * (uint64_t)v29);
          do
            v76 = v10[++v71];
          while (*(_QWORD *)(v73 + v76 * v74) < v75);
          v77 = &v10[v71];
          v78 = a2;
          if (v71 == 1)
          {
            v78 = a2;
            do
            {
              if (v77 >= v78)
                break;
              v80 = *--v78;
            }
            while (*(_QWORD *)(v73 + v80 * (uint64_t)v74) >= v75);
          }
          else
          {
            do
              v79 = *--v78;
            while (*(_QWORD *)(v73 + v79 * (uint64_t)v74) >= v75);
          }
          if (v77 < v78)
          {
            v81 = *v78;
            v82 = &v10[v71];
            v83 = v78;
            do
            {
              *v82 = v81;
              *v83 = v76;
              v84 = *(_DWORD *)(v72 + 16);
              v85 = *(_QWORD *)(v73 + v84 * v28);
              do
              {
                v86 = v82[1];
                ++v82;
                v76 = v86;
              }
              while (*(_QWORD *)(v73 + v86 * v84) < v85);
              do
              {
                v87 = *--v83;
                v81 = v87;
              }
              while (*(_QWORD *)(v73 + v87 * v84) >= v85);
            }
            while (v82 < v83);
            v88 = v82 - 1;
            if (v82 - 1 == v10)
              goto LABEL_73;
LABEL_72:
            *v10 = *v88;
            goto LABEL_73;
          }
          v88 = v77 - 1;
          if (v77 - 1 != v10)
            goto LABEL_72;
LABEL_73:
          *v88 = v28;
          if (v77 < v78)
            goto LABEL_76;
          v89 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *>(v10, v88, a3);
          v10 = v88 + 1;
          result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *>(v88 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            if (v89)
              continue;
LABEL_76:
            result = (int *)std::__introsort<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *,false>(v9, v88, a3, a4, a5 & 1);
            a5 = 0;
            v10 = v88 + 1;
            continue;
          }
          a2 = v88;
          if (v89)
            return result;
          goto LABEL_2;
        }
        v119 = *a3;
        if ((a5 & 1) != 0)
        {
          if (v10 != a2)
          {
            v120 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v121 = *(_QWORD *)(v119 + 8);
              v122 = 4;
              v123 = v10;
              do
              {
                v126 = *v123;
                v125 = v123[1];
                v123 = v120;
                if (*(_QWORD *)(v121 + *(_DWORD *)(v119 + 16) * v125) < *(_QWORD *)(v121 + *(_DWORD *)(v119 + 16)
                                                                                          * v126))
                {
                  v127 = v122;
                  do
                  {
                    *(int *)((char *)v10 + v127) = v126;
                    v128 = v127 - 4;
                    if (v127 == 4)
                    {
                      v124 = v10;
                      goto LABEL_114;
                    }
                    v129 = (char *)v10 + v127;
                    v130 = *(_DWORD *)(v119 + 16);
                    v131 = *(_QWORD *)(v121 + v130 * v125);
                    v126 = *((_DWORD *)v129 - 2);
                    v132 = *(_QWORD *)(v121 + v130 * v126);
                    v127 = v128;
                  }
                  while (v131 < v132);
                  v124 = (int *)((char *)v10 + v128);
LABEL_114:
                  *v124 = v125;
                }
                v120 = v123 + 1;
                v122 += 4;
              }
              while (v123 + 1 != a2);
            }
          }
        }
        else if (v10 != a2)
        {
          v174 = v10 + 1;
          if (v10 + 1 != a2)
          {
            v175 = *(_QWORD *)(v119 + 8);
            do
            {
              v177 = *v9;
              v176 = v9[1];
              v9 = v174;
              if (*(_QWORD *)(v175 + *(_DWORD *)(v119 + 16) * v176) < *(_QWORD *)(v175 + *(_DWORD *)(v119 + 16) * v177))
              {
                do
                {
                  *v174 = v177;
                  v177 = *(v174 - 2);
                  --v174;
                }
                while (*(_QWORD *)(v175 + *(_DWORD *)(v119 + 16) * v176) < *(_QWORD *)(v175
                                                                                      + *(_DWORD *)(v119 + 16) * v177));
                *v174 = v176;
              }
              v174 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int *v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  int *v28;
  int *v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  int *v33;
  int *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  int v57;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(_QWORD *)(*(_QWORD *)(*a3 + 8) + *(_DWORD *)(*a3 + 16) * v8) < *(_QWORD *)(*(_QWORD *)(*a3 + 8)
                                                                                      + *(_DWORD *)(*a3 + 16) * *a1))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      v10 = *a3;
      v11 = *a1;
      v12 = a1[1];
      v13 = *(_QWORD *)(*a3 + 8);
      v14 = *(_DWORD *)(*a3 + 16);
      v15 = *(_QWORD *)(v13 + v14 * v12);
      v16 = *(_QWORD *)(v13 + v14 * *a1);
      v17 = *(a2 - 1);
      v18 = *(_QWORD *)(v13 + v17 * v14);
      if (v15 >= v16)
      {
        if (v18 < v15)
        {
          a1[1] = v17;
          *(a2 - 1) = v12;
          v44 = *a1;
          v43 = a1[1];
          if (*(_QWORD *)(v13 + *(_DWORD *)(v10 + 16) * v43) < *(_QWORD *)(v13 + *(_DWORD *)(v10 + 16) * *a1))
          {
            *a1 = v43;
            a1[1] = v44;
          }
        }
      }
      else if (v18 >= v15)
      {
        *a1 = v12;
        a1[1] = v11;
        v57 = *(a2 - 1);
        if (*(_QWORD *)(v13 + *(_DWORD *)(v10 + 16) * v57) < *(_QWORD *)(v13 + *(_DWORD *)(v10 + 16) * v11))
        {
          a1[1] = v57;
          *(a2 - 1) = v11;
        }
      }
      else
      {
        *a1 = v17;
        *(a2 - 1) = v11;
      }
      return result;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, *a3);
      return 1;
    case 5:
      v33 = a1 + 2;
      v34 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, *a3);
      v35 = *(a2 - 1);
      v36 = a1[3];
      v37 = *a3;
      v38 = *(_QWORD *)(*a3 + 8);
      if (*(_QWORD *)(v38 + *(_DWORD *)(*a3 + 16) * v35) >= *(_QWORD *)(v38 + *(_DWORD *)(*a3 + 16) * v36))
        return 1;
      *v34 = v35;
      *(a2 - 1) = v36;
      v39 = *v34;
      v40 = *v33;
      if (*(_QWORD *)(v38 + *(_DWORD *)(v37 + 16) * *v34) >= *(_QWORD *)(v38 + *(_DWORD *)(v37 + 16) * *v33))
        return 1;
      *v33 = v39;
      *v34 = v40;
      v41 = a1[1];
      if (*(_QWORD *)(v38 + *(_DWORD *)(v37 + 16) * v39) >= *(_QWORD *)(v38 + *(_DWORD *)(v37 + 16) * v41))
        return 1;
      a1[1] = v39;
      a1[2] = v41;
      v42 = *a1;
      if (*(_QWORD *)(v38 + *(_DWORD *)(v37 + 16) * v39) >= *(_QWORD *)(v38 + *(_DWORD *)(v37 + 16) * *a1))
        return 1;
      *a1 = v39;
      a1[1] = v42;
      return 1;
    default:
      v19 = a1 + 2;
      v20 = a1[2];
      v21 = a1[1];
      v22 = *a3;
      v23 = *a1;
      v24 = *(_QWORD *)(*a3 + 8);
      v25 = *(_DWORD *)(*a3 + 16);
      v26 = *(_QWORD *)(v24 + v25 * v21);
      v27 = *(_QWORD *)(v24 + v20 * v25);
      if (v26 >= *(_QWORD *)(v24 + v25 * *a1))
      {
        if (v27 >= v26)
          goto LABEL_25;
        a1[1] = v20;
        *v19 = v21;
        v45 = *(_DWORD *)(v22 + 16);
        v31 = *(_QWORD *)(v24 + v45 * v20);
        v32 = *(_QWORD *)(v24 + v45 * v23);
        v28 = a1;
        v29 = a1 + 1;
      }
      else
      {
        v28 = a1;
        v29 = a1 + 2;
        if (v27 < v26)
          goto LABEL_24;
        *a1 = v21;
        a1[1] = v23;
        v30 = *(_DWORD *)(v22 + 16);
        v31 = *(_QWORD *)(v24 + v30 * v20);
        v32 = *(_QWORD *)(v24 + v30 * v23);
        v28 = a1 + 1;
        v29 = a1 + 2;
      }
      if (v31 >= v32)
        goto LABEL_25;
LABEL_24:
      *v28 = v20;
      *v29 = v23;
LABEL_25:
      v46 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v47 = 0;
      v48 = 12;
      break;
  }
  while (1)
  {
    v49 = *v46;
    v50 = *v19;
    if (*(_QWORD *)(v24 + *(_DWORD *)(v22 + 16) * *v46) < *(_QWORD *)(v24 + *(_DWORD *)(v22 + 16) * v50))
      break;
LABEL_34:
    v19 = v46;
    v48 += 4;
    if (++v46 == a2)
      return 1;
  }
  v51 = v48;
  do
  {
    *(int *)((char *)a1 + v51) = v50;
    v52 = v51 - 4;
    if (v51 == 4)
    {
      *a1 = v49;
      if (++v47 != 8)
        goto LABEL_34;
      return v46 + 1 == a2;
    }
    v53 = (char *)a1 + v51;
    v54 = *(_DWORD *)(v22 + 16);
    v55 = *(_QWORD *)(v24 + v54 * v49);
    v50 = *((_DWORD *)v53 - 2);
    v56 = *(_QWORD *)(v24 + v54 * v50);
    v51 = v52;
  }
  while (v55 < v56);
  *(int *)((char *)a1 + v52) = v49;
  if (++v47 != 8)
    goto LABEL_34;
  return v46 + 1 == a2;
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,mgcl::muid::Encoder::compressOrdered(void)::$_0 &,int *>(int *result, int *a2, int *a3, int *a4, uint64_t a5)
{
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;

  v5 = *a2;
  v6 = *result;
  v7 = *(_QWORD *)(a5 + 8);
  v8 = *(_DWORD *)(a5 + 16);
  v9 = *(_QWORD *)(v7 + v8 * *a2);
  v10 = *(_QWORD *)(v7 + v8 * *result);
  v11 = *a3;
  v12 = *(_QWORD *)(v7 + *a3 * v8);
  if (v9 >= v10)
  {
    if (v12 >= v9)
    {
      v5 = *a3;
    }
    else
    {
      *a2 = v11;
      *a3 = v5;
      v13 = *result;
      if (*(_QWORD *)(v7 + *(_DWORD *)(a5 + 16) * *a2) < *(_QWORD *)(v7 + *(_DWORD *)(a5 + 16) * *result))
      {
        *result = *a2;
        *a2 = v13;
        v5 = *a3;
      }
    }
  }
  else
  {
    if (v12 < v9)
    {
      *result = v11;
LABEL_9:
      *a3 = v6;
      v5 = v6;
      goto LABEL_11;
    }
    *result = v5;
    *a2 = v6;
    v5 = *a3;
    if (*(_QWORD *)(v7 + *(_DWORD *)(a5 + 16) * *a3) < *(_QWORD *)(v7 + *(_DWORD *)(a5 + 16) * v6))
    {
      *a2 = v5;
      goto LABEL_9;
    }
  }
LABEL_11:
  if (*(_QWORD *)(v7 + *(_DWORD *)(a5 + 16) * *a4) < *(_QWORD *)(v7 + *(_DWORD *)(a5 + 16) * v5))
  {
    *a3 = *a4;
    *a4 = v5;
    v14 = *a2;
    if (*(_QWORD *)(v7 + *(_DWORD *)(a5 + 16) * *a3) < *(_QWORD *)(v7 + *(_DWORD *)(a5 + 16) * *a2))
    {
      *a2 = *a3;
      *a3 = v14;
      v15 = *result;
      if (*(_QWORD *)(v7 + *(_DWORD *)(a5 + 16) * *a2) < *(_QWORD *)(v7 + *(_DWORD *)(a5 + 16) * *result))
      {
        *result = *a2;
        *a2 = v15;
      }
    }
  }
  return result;
}

void mgcl::iarray::Encoder::~Encoder(mgcl::iarray::Encoder *this)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = *(_QWORD **)this;
  *(_QWORD *)this = 0;
  if (v1)
  {
    v2 = (_QWORD *)*v1;
    *v1 = 0;
    if (v2)
    {
      v3 = (void *)v2[142];
      if (v3)
      {
        v2[143] = v3;
        operator delete(v3);
      }
      v4 = (void *)v2[137];
      if (v4)
      {
        v2[138] = v4;
        operator delete(v4);
      }
      v5 = (void *)v2[134];
      if (v5)
      {
        v2[135] = v5;
        operator delete(v5);
      }
      MEMORY[0x18D76437C](v2, 0x1030C40509BDA7ELL);
    }
    MEMORY[0x18D76437C](v1, 0x20C4093837F09);
  }
}

mgcl::polyline::Decoder *mgcl::polyline::Decoder::Decoder(mgcl::polyline::Decoder *this)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)operator new();
  v3 = operator new();
  *(_QWORD *)(v3 + 20) = 0;
  *(_QWORD *)(v3 + 12) = 0;
  *(_DWORD *)(v3 + 36) = 0;
  *(_QWORD *)(v3 + 28) = 0;
  *(_WORD *)(v3 + 40) = 257;
  *(_QWORD *)(v3 + 44) = 0;
  *(_QWORD *)(v3 + 60) = 0;
  *(_QWORD *)(v3 + 52) = 0;
  *(_DWORD *)(v3 + 67) = 0;
  *(_DWORD *)(v3 + 72) = 0;
  *(_WORD *)(v3 + 76) = 257;
  *(_QWORD *)(v3 + 136) = 0;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *v2 = v3;
  *(_QWORD *)this = v2;
  return this;
}

void sub_189AE535C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t mgcl::polyline::Decoder::getPositionsInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  char v7;
  __int16 v8;
  int v9;
  int v10;
  int v11;
  int v12;

  if (a2 < 4)
    return 3;
  result = 3;
  if (a2 != 8)
  {
    v5 = a2 & 0x7FFFFFFFFFFFFFFCLL;
    if ((a2 & 0xFFFFFFFFFFFFFFFCLL) != 4
      && a2 != 9
      && (a2 & 0xFFFFFFFFFFFFFFFELL) != 0xA
      && v5 != 12
      && v5 != 16
      && v5 != 20
      && v5 != 24
      && (a2 & 0xFFFFFFFFFFFFFFFELL) != 0x1C
      && a1 != -32
      && (unint64_t)a2 >= 0x20
      && *(_DWORD *)a1 == -294009975)
    {
      result = 0;
      v6 = *(_BYTE *)(a1 + 8);
      v7 = *(_BYTE *)(a1 + 9);
      v8 = *(_WORD *)(a1 + 10);
      v9 = *(_DWORD *)(a1 + 12);
      v10 = *(_DWORD *)(a1 + 16);
      v12 = *(_DWORD *)(a1 + 20);
      v11 = *(_DWORD *)(a1 + 24);
      *(_BYTE *)(a3 + 4) = v6;
      *(_DWORD *)a3 = 0;
      *(_BYTE *)(a3 + 5) = v7;
      *(_WORD *)(a3 + 6) = v8;
      *(_DWORD *)(a3 + 8) = v9;
      *(_DWORD *)(a3 + 12) = v10 & 0x7FFFFFFF;
      *(_DWORD *)(a3 + 16) = v12 & 0x7FFFFFFF;
      *(_DWORD *)(a3 + 20) = v11 & 0x7FFFFFFF;
    }
  }
  return result;
}

uint64_t mgcl::polyline::Decoder::decompressPositions(uint64_t **this, const unsigned __int8 *a2, uint64_t a3, unint64_t *a4, int *a5, int *a6, int *a7)
{
  uint64_t *v9;
  uint64_t result;
  const unsigned __int8 *v11;
  uint64_t v12;

  v9 = *this;
  v11 = a2;
  v12 = a3;
  result = gcl::polyline::DecoderImpl::decompressPositions(*v9, (unint64_t *)&v11, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, 0);
  *a4 = a3 - (v12 & ~(v12 >> 63));
  return result;
}

void mgcl::gpcc::Decoder::~Decoder(mgcl::gpcc::Decoder *this)
{
  _QWORD *v1;
  void *v2;
  _QWORD *v3;

  v1 = *(_QWORD **)this;
  *(_QWORD *)this = 0;
  if (v1)
  {
    v2 = (void *)v1[4];
    if (v2)
    {
      v1[5] = v2;
      operator delete(v2);
    }
    v3 = (_QWORD *)*v1;
    *v1 = 0;
    if (v3)
      std::default_delete<gcl::gpcc::Decoder::Impl>::operator()[abi:ne180100]((uint64_t)v1, v3);
    MEMORY[0x18D76437C](v1, 0x1030C40A5E9B400);
  }
}

void std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_0,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

_QWORD *std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_0,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E1BFAF40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_0,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4gpcc7Decoder13parseMetadataEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mgcl4gpcc7Decoder13parseMetadataEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4gpcc7Decoder13parseMetadataEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4gpcc7Decoder13parseMetadataEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_0,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_0>,BOOL ()(gcl::gpcc::AttributeInfo const&,int)>::target_type()
{
}

void std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_1,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

_QWORD *std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_1,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E1BFAF98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_1,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4gpcc7Decoder13parseMetadataEvE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mgcl4gpcc7Decoder13parseMetadataEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4gpcc7Decoder13parseMetadataEvE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4gpcc7Decoder13parseMetadataEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<mgcl::gpcc::Decoder::parseMetadata(void)::$_1,std::allocator<mgcl::gpcc::Decoder::parseMetadata(void)::$_1>,BOOL ()(int,int,gcl::gpcc::SliceInfo const&)>::target_type()
{
}

void std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

__n128 std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E1BFAFF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E1BFAFF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;

  v2 = *(uint64_t **)(result + 8);
  v3 = **(_QWORD **)(result + 16);
  v4 = *v2;
  v5 = v2[1];
  v6 = *((_DWORD *)v2 + 4);
  v7 = *((_DWORD *)v2 + 5);
  v8 = v2[3];
  v9 = 3 * v3;
  v10 = v4 + v3 * v7;
  v11 = v4 == 0;
  if (v4)
    v12 = v5 - v9;
  else
    v12 = v5;
  if (v11)
    v10 = 0;
  if (v5 < v9)
  {
    v12 = 0;
    v10 = 0;
  }
  *(_QWORD *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v12;
  *(_DWORD *)(a2 + 16) = v6;
  *(_DWORD *)(a2 + 20) = v7;
  *(_QWORD *)(a2 + 24) = v8;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_0>,gcl::gpcc::ArrayBuffer ()(unsigned long)>::target_type()
{
}

void std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

__n128 std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E1BFB048;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E1BFB048;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::operator()@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;

  v4 = **(_QWORD **)(result + 16);
  v5 = **(_QWORD **)(result + 8) + 32 * *a3;
  v6 = *(_QWORD *)v5;
  v7 = *(_QWORD *)(v5 + 8);
  v8 = *(_DWORD *)(v5 + 16);
  v9 = *(_DWORD *)(v5 + 20);
  v10 = *(_QWORD *)(v5 + 24);
  v11 = v4 * *(int *)(a2 + 8);
  v12 = v6 + v4 * v9;
  v13 = v6 == 0;
  if (v6)
    v14 = v7 - v11;
  else
    v14 = v7;
  if (v13)
    v12 = 0;
  v15 = v7 >= v11;
  if (v7 >= v11)
    v16 = v14;
  else
    v16 = 0;
  if (!v15)
    v12 = 0;
  *(_QWORD *)a4 = v12;
  *(_QWORD *)(a4 + 8) = v16;
  *(_DWORD *)(a4 + 16) = v8;
  *(_DWORD *)(a4 + 20) = v9;
  *(_QWORD *)(a4 + 24) = v10;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_1>,gcl::gpcc::ArrayBuffer ()(gcl::gpcc::AttributeInfo const&,int,unsigned long)>::target_type()
{
}

void std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2>,void ()(int,unsigned long)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

_QWORD *std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2>,void ()(int,unsigned long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E1BFB0A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2>,void ()(int,unsigned long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E1BFB0A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2>,void ()(int,unsigned long)>::operator()(uint64_t result, uint64_t a2, _QWORD *a3)
{
  **(_QWORD **)(result + 8) += *a3;
  return result;
}

uint64_t std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2>,void ()(int,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_2"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4mgcl4gpcc7Decoder6decodeERNS0_14IntArrayBufferEPKPS2_mE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2,std::allocator<mgcl::gpcc::Decoder::decode(mgcl::gpcc::IntArrayBuffer &,mgcl::gpcc::IntArrayBuffer* const*,unsigned long)::$_2>,void ()(int,unsigned long)>::target_type()
{
}

uint64_t geo::codec::VectorTile::transitSystemInfoForFeatureID(geo::codec::VectorTile *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *i;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = *((_QWORD *)this + 160);
  v3 = *((_QWORD *)this + 161) - v2;
  if (!v3)
    return 0;
  v4 = v3 / 104;
  if (v4 <= 1)
    v4 = 1;
  for (i = (unsigned int *)(v2 + 84); *(_QWORD *)(i - 11) != a2; i += 26)
  {
    if (!--v4)
      return 0;
  }
  v7 = *i;
  v8 = *((_QWORD *)this + 164);
  v9 = 0x8E38E38E38E38E39 * ((*((_QWORD *)this + 165) - v8) >> 3);
  v10 = v8 + 72 * v7;
  if (v9 <= v7)
    return 0;
  else
    return v10;
}

void GeoCodecsContourLinesInfo::~GeoCodecsContourLinesInfo(GeoCodecsContourLinesInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 40))(*((_QWORD *)this + 13), v2, *((_QWORD *)this + 12) - v2);
  }
  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9), v3, *((_QWORD *)this + 8) - v3);
  }
  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v5 = *((_QWORD *)this + 1);
    v6 = *(_QWORD *)this;
    if (v5 == v4)
    {
LABEL_18:
      *((_QWORD *)this + 1) = v4;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), v6, *((_QWORD *)this + 2) - v6);
      return;
    }
    while (1)
    {
      v7 = *(std::__shared_weak_count **)(v5 - 16);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
          break;
      }
      v10 = *(std::__shared_weak_count **)(v5 - 48);
      if (v10)
        goto LABEL_14;
LABEL_8:
      v5 -= 56;
      if (v5 == v4)
      {
        v6 = *(_QWORD *)this;
        goto LABEL_18;
      }
    }
    ((void (*)(std::__shared_weak_count *, uint64_t))v7->__on_zero_shared)(v7, v6);
    std::__shared_weak_count::__release_weak(v7);
    v10 = *(std::__shared_weak_count **)(v5 - 48);
    if (!v10)
      goto LABEL_8;
LABEL_14:
    std::__shared_weak_count::__release_weak(v10);
    goto LABEL_8;
  }
}

void std::__tree<std::shared_ptr<FeatureStyleAttributes const>,FeatureStyleAttributesSet::FeatureStyleAttributesCompare,std::allocator<std::shared_ptr<FeatureStyleAttributes const>>>::destroy(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a2)
  {
    std::__tree<std::shared_ptr<FeatureStyleAttributes const>,FeatureStyleAttributesSet::FeatureStyleAttributesCompare,std::allocator<std::shared_ptr<FeatureStyleAttributes const>>>::destroy(a1, *a2);
    std::__tree<std::shared_ptr<FeatureStyleAttributes const>,FeatureStyleAttributesSet::FeatureStyleAttributesCompare,std::allocator<std::shared_ptr<FeatureStyleAttributes const>>>::destroy(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[5];
    if (!v4)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      operator delete(a2);
    }
    else
    {
LABEL_6:
      operator delete(a2);
    }
  }
}

void std::__tree<std::__value_type<unsigned char,std::vector<unsigned long long>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned long long>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned long long>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned char,std::vector<unsigned long long>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned long long>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned long long>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned char,std::vector<unsigned long long>>,std::__map_value_compare<unsigned char,std::__value_type<unsigned char,std::vector<unsigned long long>>,std::less<unsigned char>,true>,std::allocator<std::__value_type<unsigned char,std::vector<unsigned long long>>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t **std::vector<GeoCodecs3DBuildingFeature,geo::StdAllocator<GeoCodecs3DBuildingFeature,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v1 = *result;
  v2 = **result;
  if (!v2)
    return result;
  v3 = v1[1];
  v4 = **result;
  v5 = *result;
  if (v3 == v2)
    goto LABEL_16;
  v6 = result;
  do
  {
    v7 = *(_QWORD *)(v3 - 32);
    if (v7)
    {
      *(_QWORD *)(v3 - 24) = v7;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 - 8) + 40))(*(_QWORD *)(v3 - 8), v7, *(_QWORD *)(v3 - 16) - v7);
    }
    v8 = *(std::__shared_weak_count **)(v3 - 80);
    if (!v8)
      goto LABEL_11;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (v10)
    {
LABEL_11:
      v11 = *(std::__shared_weak_count **)(v3 - 104);
      if (!v11)
        goto LABEL_4;
LABEL_12:
      std::__shared_weak_count::__release_weak(v11);
      goto LABEL_4;
    }
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v11 = *(std::__shared_weak_count **)(v3 - 104);
    if (v11)
      goto LABEL_12;
LABEL_4:
    v3 -= 112;
  }
  while (v3 != v2);
  v5 = *v6;
  v4 = **v6;
LABEL_16:
  v1[1] = v2;
  return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[3] + 40))(v5[3], v4, v5[2] - v4);
}

void GeoCodecsMultiPolygonFeature::~GeoCodecsMultiPolygonFeature(GeoCodecsMultiPolygonFeature *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    *((_QWORD *)this + 13) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 15) + 40))(*((_QWORD *)this + 15), v2, *((_QWORD *)this + 14) - v2);
  }
  v3 = *((_QWORD *)this + 8);
  if (v3)
  {
    v4 = *((_QWORD *)this + 9);
    v5 = *((_QWORD *)this + 8);
    if (v4 != v3)
    {
      v6 = *((_QWORD *)this + 9);
      do
      {
        v8 = *(_QWORD *)(v6 - 32);
        v6 -= 32;
        v7 = v8;
        if (v8)
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 - 8) + 40))(*(_QWORD *)(v4 - 8), v7, 8 * *(_QWORD *)(v4 - 16));
        v4 = v6;
      }
      while (v6 != v3);
      v5 = *((_QWORD *)this + 8);
    }
    *((_QWORD *)this + 9) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11), v5, *((_QWORD *)this + 10) - v5);
  }
  v9 = *((_QWORD *)this + 4);
  if (v9)
  {
    v10 = *((_QWORD *)this + 5);
    v11 = *((_QWORD *)this + 4);
    if (v10 != v9)
    {
      v12 = *((_QWORD *)this + 5);
      do
      {
        v14 = *(_QWORD *)(v12 - 32);
        v12 -= 32;
        v13 = v14;
        if (v14)
        {
          *(_QWORD *)(v10 - 24) = v13;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v10 - 8) + 40))(*(_QWORD *)(v10 - 8), v13, *(_QWORD *)(v10 - 16) - v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = *((_QWORD *)this + 4);
    }
    *((_QWORD *)this + 5) = v9;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), v11, *((_QWORD *)this + 6) - v11);
  }
}

uint64_t geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 96);
    if (v3)
    {
      v4 = *(_QWORD *)(a2 + 104);
      v5 = *(_QWORD *)(a2 + 96);
      if (v4 != v3)
      {
        do
        {
          v6 = *(_QWORD *)(v4 - 40);
          if (v6)
          {
            *(_QWORD *)(v4 - 32) = v6;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 - 16) + 40))(*(_QWORD *)(v4 - 16), v6, *(_QWORD *)(v4 - 24) - v6);
          }
          v4 -= 48;
        }
        while (v4 != v3);
        v5 = *(_QWORD *)(a2 + 96);
      }
      *(_QWORD *)(a2 + 104) = v3;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 120) + 40))(*(_QWORD *)(a2 + 120), v5, *(_QWORD *)(a2 + 112) - v5);
    }
    v8 = *(_QWORD *)(a2 + 48);
    if (v8)
    {
      *(_QWORD *)(a2 + 56) = v8;
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 72) + 40))(*(_QWORD *)(a2 + 72), v8, *(_QWORD *)(a2 + 64) - v8);
    }
  }
  return result;
}

uint64_t std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  _WORD *v13;
  uint64_t v14;
  _WORD *v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 *v24;
  unint64_t v25;
  __int128 v26;
  __int16 v27;
  uint64_t v28;

  v3 = result;
  v4 = *(_WORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 1)
  {
    if (a2)
    {
      v11 = 2 * a2;
      v12 = &v4[a2];
      do
      {
        if (v4)
          *v4 = 0;
        ++v4;
        v11 -= 2;
      }
      while (v11);
      v4 = v12;
    }
    *(_QWORD *)(result + 8) = v4;
  }
  else
  {
    v6 = (uint64_t)v4 - *(_QWORD *)result;
    v7 = v6 >> 1;
    v8 = (v6 >> 1) + a2;
    if (v8 < 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v9 = v5 - *(_QWORD *)result;
    if (v9 > v8)
      v8 = v9;
    if (v9 >= 0x7FFFFFFFFFFFFFFELL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 2 * v10, 2);
    else
      result = 0;
    v13 = (_WORD *)(result + 2 * v7);
    v14 = 2 * a2;
    v15 = &v13[a2];
    v16 = v13;
    do
    {
      if (v16)
        *v16 = 0;
      ++v16;
      v14 -= 2;
    }
    while (v14);
    v17 = *(_QWORD *)v3;
    v18 = *(_QWORD *)(v3 + 8);
    if (v18 != *(_QWORD *)v3)
    {
      v19 = v18 - *(_QWORD *)v3 - 2;
      if (v19 < 0x1E)
        goto LABEL_35;
      if ((unint64_t)(v18 - (v6 + result)) < 0x20)
        goto LABEL_35;
      v20 = (v19 >> 1) + 1;
      v21 = 2 * (v20 & 0xFFFFFFFFFFFFFFF0);
      v22 = v18 - v21;
      v13 = (_WORD *)((char *)v13 - v21);
      v23 = (_OWORD *)(result + 2 * v7 - 16);
      v24 = (__int128 *)(v18 - 16);
      v25 = v20 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v26 = *v24;
        *(v23 - 1) = *(v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 2;
        v25 -= 16;
      }
      while (v25);
      v18 = v22;
      if (v20 != (v20 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_35:
        do
        {
          v27 = *(_WORD *)(v18 - 2);
          v18 -= 2;
          *--v13 = v27;
        }
        while (v18 != v17);
      }
    }
    *(_QWORD *)v3 = v13;
    *(_QWORD *)(v3 + 8) = v15;
    v28 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 2 * v10;
    if (v17)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v17, v28 - v17);
  }
  return result;
}

void geo::read_write_lock::~read_write_lock(pthread_rwlock_t *this)
{
  geo::read_write_lock *v1;
  const char *v2;

  v1 = (geo::read_write_lock *)pthread_rwlock_destroy(this);
  if ((_DWORD)v1)
    geo::read_write_lock::logFailure(v1, (uint64_t)"destruction", v2);
}

void geo::MallocZoneAllocator::~MallocZoneAllocator(geo::MallocZoneAllocator *this)
{
  geo::MallocZoneAllocator::~MallocZoneAllocator(this);
  JUMPOUT(0x18D76437CLL);
}

{
  pthread_rwlock_t *v2;
  geo::read_write_lock *v3;
  const char *v4;
  NSObject *v6;
  unint64_t v7;
  geo::read_write_lock *v8;
  const char *v9;
  geo::read_write_lock *v10;
  const char *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E1BF6690;
  v2 = (pthread_rwlock_t *)((char *)this + 56);
  v3 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 56));
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"write lock", v4);
  if (atomic_load((unint64_t *)this + 5))
  {
    v6 = *((_QWORD *)this + 32);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = atomic_load((unint64_t *)this + 5);
      v12 = 134217984;
      v13 = v7;
      _os_log_impl(&dword_1885A9000, v6, OS_LOG_TYPE_INFO, "Destroying zone allocator with %lu allocations still alive", (uint8_t *)&v12, 0xCu);
    }
  }
  else
  {
    malloc_destroy_zone(*((malloc_zone_t **)this + 6));
  }
  os_release(*((void **)this + 32));
  v8 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
  if ((_DWORD)v8)
    geo::read_write_lock::logFailure(v8, (uint64_t)"unlock", v9);
  v10 = (geo::read_write_lock *)pthread_rwlock_destroy(v2);
  if ((_DWORD)v10)
    geo::read_write_lock::logFailure(v10, (uint64_t)"destruction", v11);
}

void geo::MallocZoneAllocator::reset(geo::MallocZoneAllocator *this)
{
  pthread_rwlock_t *v2;
  geo::read_write_lock *v3;
  const char *v4;
  geo::read_write_lock *v6;
  const char *v7;
  geo::read_write_lock *v8;
  const char *v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  geo::read_write_lock *v13;
  const char *v14;
  unint64_t v15;
  unint64_t v16;
  malloc_zone_t *zone;
  _BYTE v18[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = (pthread_rwlock_t *)((char *)this + 56);
  *(_QWORD *)v18 = (char *)this + 56;
  v3 = (geo::read_write_lock *)pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 56));
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"write lock", v4);
  if (atomic_load((unint64_t *)this + 5))
  {
    v6 = (geo::read_write_lock *)pthread_rwlock_unlock(*(pthread_rwlock_t **)v18);
    if ((_DWORD)v6)
      geo::read_write_lock::logFailure(v6, (uint64_t)"unlock", v7);
    v8 = (geo::read_write_lock *)pthread_rwlock_rdlock(v2);
    if ((_DWORD)v8)
      geo::read_write_lock::logFailure(v8, (uint64_t)"read lock", v9);
    v10 = *((_QWORD *)this + 32);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = *((_QWORD *)this + 3);
      *(_DWORD *)v18 = 136315138;
      *(_QWORD *)&v18[4] = v11;
      _os_log_impl(&dword_1885A9000, v10, OS_LOG_TYPE_INFO, "BasicAllocationTracker(%s)", v18, 0xCu);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        goto LABEL_10;
    }
    else if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
LABEL_10:
      v12 = *((_QWORD *)this + 32);
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
LABEL_11:
        v13 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
        goto LABEL_16;
      }
LABEL_14:
      v16 = atomic_load((unint64_t *)this + 5);
      *(_DWORD *)v18 = 134217984;
      *(_QWORD *)&v18[4] = v16;
      _os_log_error_impl(&dword_1885A9000, v12, OS_LOG_TYPE_ERROR, "Resetting zone allocator with %lu allocations still alive", v18, 0xCu);
      goto LABEL_11;
    }
    v15 = atomic_load((unint64_t *)this + 5);
    *(_DWORD *)v18 = 134217984;
    *(_QWORD *)&v18[4] = v15;
    _os_log_impl(&dword_1885A9000, v10, OS_LOG_TYPE_INFO, "\tCount: %zu", v18, 0xCu);
    v12 = *((_QWORD *)this + 32);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_11;
    goto LABEL_14;
  }
  malloc_destroy_zone(*((malloc_zone_t **)this + 6));
  zone = malloc_create_zone(0, 0);
  *((_QWORD *)this + 6) = zone;
  malloc_set_zone_name(zone, *((const char **)this + 1));
  atomic_store(0, (unint64_t *)this + 5);
  v13 = (geo::read_write_lock *)pthread_rwlock_unlock(*(pthread_rwlock_t **)v18);
LABEL_16:
  if ((_DWORD)v13)
    geo::read_write_lock::logFailure(v13, (uint64_t)"unlock", v14);
}

void sub_189AE6398(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

unint64_t geo::MallocZoneAllocator::allocationCount(geo::MallocZoneAllocator *this)
{
  pthread_rwlock_t *v2;
  geo::read_write_lock *v3;
  const char *v4;
  unint64_t v5;
  geo::read_write_lock *v6;
  const char *v7;

  v2 = (pthread_rwlock_t *)((char *)this + 56);
  v3 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)((char *)this + 56));
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"read lock", v4);
  v5 = atomic_load((unint64_t *)this + 5);
  v6 = (geo::read_write_lock *)pthread_rwlock_unlock(v2);
  if ((_DWORD)v6)
    geo::read_write_lock::logFailure(v6, (uint64_t)"unlock", v7);
  return v5;
}

size_t geo::MallocZoneAllocator::allocationSize(malloc_zone_t **this)
{
  malloc_statistics_t v2;

  malloc_zone_statistics(this[6], &v2);
  return v2.size_allocated;
}

void geo::read_write_lock::logFailure(geo::read_write_lock *this, uint64_t a2, const char *a3)
{
  int v4;
  unsigned __int8 v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v4 = (int)this;
  v11 = *MEMORY[0x1E0C80C00];
  v5 = atomic_load((unsigned __int8 *)&qword_1ECDBCD88);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ECDBCD88))
  {
    _MergedGlobals_350 = (uint64_t)os_log_create("com.apple.GeoStdLib", "Locking");
    __cxa_guard_release(&qword_1ECDBCD88);
  }
  v6 = _MergedGlobals_350;
  if (os_log_type_enabled((os_log_t)_MergedGlobals_350, OS_LOG_TYPE_FAULT))
  {
    v7 = 136315394;
    v8 = a2;
    v9 = 1024;
    v10 = v4;
    _os_log_fault_impl(&dword_1885A9000, v6, OS_LOG_TYPE_FAULT, "Read/write lock %s resulted in non-zero value %d", (uint8_t *)&v7, 0x12u);
  }
}

void sub_189AE6688(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void geo::write_lock_guard::~write_lock_guard(pthread_rwlock_t **this)
{
  geo::read_write_lock *v1;
  const char *v2;

  v1 = (geo::read_write_lock *)pthread_rwlock_unlock(*this);
  if ((_DWORD)v1)
    geo::read_write_lock::logFailure(v1, (uint64_t)"unlock", v2);
}

void geo::read_lock_guard::~read_lock_guard(pthread_rwlock_t **this)
{
  geo::read_write_lock *v1;
  const char *v2;

  v1 = (geo::read_write_lock *)pthread_rwlock_unlock(*this);
  if ((_DWORD)v1)
    geo::read_write_lock::logFailure(v1, (uint64_t)"unlock", v2);
}

uint64_t geo::codec::ECEFDequantizer::readInfo(uint64_t a1, _QWORD *a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  float v24;

  v4 = a2[6];
  v3 = a2[7];
  v5 = v4 + 4;
  if (v4 + 4 > v3)
    return 0;
  v7 = a2[5];
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v7 + v4);
  a2[6] = v5;
  v8 = v4 + 6;
  if (v4 + 6 > v3)
    return 0;
  *(_WORD *)a1 = *(_WORD *)(v7 + v5);
  a2[6] = v8;
  v9 = v4 + 10;
  if (v4 + 10 > v3)
    return 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(v7 + v8);
  a2[6] = v9;
  v10 = v4 + 12;
  if (v4 + 12 > v3)
    return 0;
  *(_WORD *)(a1 + 2) = *(_WORD *)(v7 + v9);
  a2[6] = v10;
  v11 = v4 + 16;
  if (v4 + 16 > v3)
    return 0;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(v7 + v10);
  a2[6] = v11;
  v12 = v4 + 18;
  if (v4 + 18 > v3)
    return 0;
  *(_WORD *)(a1 + 4) = *(_WORD *)(v7 + v11);
  a2[6] = v12;
  if (a3)
  {
    v13 = v4 + 22;
    if (v13 > v3)
      return 0;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v7 + v12);
    a2[6] = v13;
    *(_BYTE *)(a1 + 57) = 1;
    v12 = v13;
  }
  if (v12 + 1 > v3)
    return 0;
  v14 = *(_BYTE *)(v7 + v12);
  *(_BYTE *)(a1 + 12) = v14;
  v15 = a2[6];
  v16 = a2[7];
  a2[6] = v15 + 1;
  v17 = v15 + 5;
  if (v15 + 5 > v16)
    return 0;
  v18 = a2[5];
  v19 = *(_DWORD *)(v18 + v15 + 1);
  *(_DWORD *)(a1 + 28) = v19;
  a2[6] = v17;
  v20 = v15 + 9;
  if (v15 + 9 > v16)
    return 0;
  v21 = *(_DWORD *)(v18 + v17);
  *(_DWORD *)(a1 + 32) = v21;
  a2[6] = v20;
  v22 = v15 + 13;
  if (v22 > v16)
    return 0;
  v23 = *(_DWORD *)(v18 + v20);
  *(_DWORD *)(a1 + 36) = v23;
  a2[6] = v22;
  v24 = (float)(1 << v14);
  *(float *)(a1 + 40) = (float)v19 * v24;
  *(float *)(a1 + 44) = (float)v21 * v24;
  *(float *)(a1 + 48) = (float)v23 * v24;
  *(float *)(a1 + 52) = v24;
  *(_BYTE *)(a1 + 56) = 1;
  return 1;
}

BOOL geo::codec::decodeAttributeSet<GeoCodecsPBTransitSystemInfo>(int a1, uint64_t *a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  _OWORD *v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t *v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  int *v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  BOOL v110;
  unint64_t v112;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  __int128 v120;
  uint64_t v121;
  std::__shared_weak_count *v122;

  v121 = 0;
  v122 = 0;
  v120 = 0uLL;
  v118 = 0;
  v119 = 0;
  v6 = a2[2];
  v7 = 8 * a2[1];
  if (v6 + 5 > v7)
    goto LABEL_17;
  LODWORD(v9) = 0;
  v10 = *a2;
  v11 = 5;
  do
  {
    v12 = 8 - (v6 & 7);
    if (v11 < v12)
      v12 = v11;
    v9 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v12)) & ~(-1 << v12) | ((_DWORD)v9 << v12);
    v6 += v12;
    a2[2] = v6;
    v11 -= v12;
  }
  while (v11);
  if (v6 + 5 > v7)
    goto LABEL_17;
  LODWORD(v13) = 0;
  v14 = 5;
  do
  {
    v15 = 8 - (v6 & 7);
    if (v14 < v15)
      v15 = v14;
    v13 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v15)) & ~(-1 << v15) | ((_DWORD)v13 << v15);
    v6 += v15;
    a2[2] = v6;
    v14 -= v15;
  }
  while (v14);
  if (v6 + 5 > v7)
    goto LABEL_17;
  LODWORD(v16) = 0;
  v17 = 5;
  do
  {
    v18 = 8 - (v6 & 7);
    if (v17 < v18)
      v18 = v17;
    v16 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v18)) & ~(-1 << v18) | ((_DWORD)v16 << v18);
    v6 += v18;
    a2[2] = v6;
    v17 -= v18;
  }
  while (v17);
  if (v6 + 5 > v7)
  {
LABEL_17:
    v19 = 0;
    goto LABEL_18;
  }
  LODWORD(v30) = 0;
  v31 = 5;
  do
  {
    v32 = 8 - (v6 & 7);
    if (v31 < v32)
      v32 = v31;
    v30 = (*(unsigned __int8 *)(v10 + (v6 >> 3)) >> (8 - (v6 & 7) - v32)) & ~(-1 << v32) | ((_DWORD)v30 << v32);
    v6 += v32;
    a2[2] = v6;
    v31 -= v32;
  }
  while (v31);
  if (!a3)
  {
    v19 = 1;
    goto LABEL_18;
  }
  v116 = 0;
  v19 = 0;
  v112 = a3;
  while (1)
  {
    if (v121)
    {
      geo::codec::copyFeatureStyleAttributes(&v117, v121);
      v33 = v117;
      v117 = 0uLL;
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
      v120 = v33;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v36 = __ldaxr(p_shared_owners);
        while (__stlxr(v36 - 1, p_shared_owners));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
      if (*((_QWORD *)&v117 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
LABEL_60:
          std::__shared_weak_count::__release_weak(v37);
        }
      }
    }
    else
    {
      v40 = (char *)operator new(0x40uLL);
      *((_QWORD *)v40 + 1) = 0;
      *((_QWORD *)v40 + 2) = 0;
      *(_QWORD *)v40 = &off_1E1BFB2F8;
      *(_OWORD *)(v40 + 24) = 0u;
      *(_OWORD *)(v40 + 40) = 0u;
      *(_DWORD *)(v40 + 55) = 0;
      v41 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
      *((_QWORD *)v40 + 3) = v41;
      if (v41)
      {
        *(_QWORD *)&v42 = -1;
        *((_QWORD *)&v42 + 1) = -1;
        v41[14] = v42;
        v41[15] = v42;
        v41[12] = v42;
        v41[13] = v42;
        v41[10] = v42;
        v41[11] = v42;
        v41[8] = v42;
        v41[9] = v42;
        v41[6] = v42;
        v41[7] = v42;
        v41[4] = v42;
        v41[5] = v42;
        v41[2] = v42;
        v41[3] = v42;
        *v41 = v42;
        v41[1] = v42;
      }
      if (a1 != -1)
      {
        *(_DWORD *)v41 = 5;
        *((_DWORD *)v41 + 1) = a1;
        v40[57] = 1;
      }
      v40[58] = a1;
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
      *(_QWORD *)&v120 = v40 + 24;
      *((_QWORD *)&v120 + 1) = v40;
      if (v43)
      {
        v44 = (unint64_t *)&v43->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          v37 = v43;
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          goto LABEL_60;
        }
      }
    }
    v46 = a2[2];
    v47 = 8 * a2[1];
    if (v46 + v16 > v47)
      goto LABEL_18;
    if ((_DWORD)v16)
    {
      v48 = 0;
      v49 = *a2;
      v50 = v16;
      do
      {
        v51 = 8 - (v46 & 7);
        if (v50 < v51)
          v51 = v50;
        v48 = (*(unsigned __int8 *)(v49 + (v46 >> 3)) >> (8 - (v46 & 7) - v51)) & ~(-1 << v51) | (v48 << v51);
        v46 += v51;
        a2[2] = v46;
        v50 -= v51;
      }
      while (v50);
      if (v48)
      {
        v52 = 0;
        v53 = (uint64_t *)v120;
        do
        {
          if (v46 + v9 > v47)
            goto LABEL_18;
          v54 = 0;
          if ((_DWORD)v9)
          {
            v55 = v9;
            do
            {
              v56 = 8 - (v46 & 7);
              if (v55 < v56)
                v56 = v55;
              v54 = (*(unsigned __int8 *)(v49 + (v46 >> 3)) >> (8 - (v46 & 7) - v56)) & ~(-1 << v56) | (v54 << v56);
              v46 += v56;
              a2[2] = v46;
              v55 -= v56;
            }
            while (v55);
          }
          if (v46 + v13 > v47)
            goto LABEL_18;
          v57 = 0;
          if ((_DWORD)v13)
          {
            v58 = v13;
            do
            {
              v59 = 8 - (v46 & 7);
              if (v58 < v59)
                v59 = v58;
              v57 = (*(unsigned __int8 *)(v49 + (v46 >> 3)) >> (8 - (v46 & 7) - v59)) & ~(-1 << v59) | (v57 << v59);
              v46 += v59;
              a2[2] = v46;
              v58 -= v59;
            }
            while (v58);
          }
          v60 = *((unsigned __int8 *)v53 + 33);
          v61 = *v53;
          if (*((_BYTE *)v53 + 33))
          {
            v62 = *((unsigned __int8 *)v53 + 33);
            v63 = (int *)(v61 + 4);
            v64 = v62;
            do
            {
              if (*(v63 - 1) == v54)
              {
                *v63 = v57;
                goto LABEL_70;
              }
              v63 += 2;
              --v64;
            }
            while (v64);
            if (v60 > 0x1F)
              goto LABEL_70;
          }
          else
          {
            v62 = 0;
          }
          v65 = (int *)(v61 + 8 * v62);
          *v65 = v54;
          v65[1] = v57;
          *((_BYTE *)v53 + 33) = v60 + 1;
LABEL_70:
          ++v52;
        }
        while (v52 != v48);
      }
    }
    if (v46 + v30 > v47)
      goto LABEL_18;
    if ((_DWORD)v30)
    {
      v66 = 0;
      v67 = *a2;
      v68 = v30;
      do
      {
        v69 = 8 - (v46 & 7);
        if (v68 < v69)
          v69 = v68;
        v66 = (*(unsigned __int8 *)(v67 + (v46 >> 3)) >> (8 - (v46 & 7) - v69)) & ~(-1 << v69) | (v66 << v69);
        v46 += v69;
        a2[2] = v46;
        v68 -= v69;
      }
      while (v68);
      if (v66)
        break;
    }
    v77 = v120;
    LODWORD(v71) = *(unsigned __int8 *)(v120 + 33);
LABEL_113:
    qsort(*(void **)v77, v71, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
    *(_QWORD *)&v117 = v77;
    *((_QWORD *)&v117 + 1) = *((_QWORD *)&v120 + 1);
    v81 = v116;
    if (*((_QWORD *)&v120 + 1))
    {
      v82 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
      do
        v83 = __ldxr(v82);
      while (__stxr(v83 + 1, v82));
    }
    v84 = FeatureStyleAttributesSet::insert(a4, (uint64_t *)&v117);
    v86 = *v84;
    v85 = v84[1];
    if (v85)
    {
      v87 = (unint64_t *)(v85 + 8);
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
    }
    v89 = v119;
    v118 = v86;
    v119 = (std::__shared_weak_count *)v85;
    if (v89)
    {
      v90 = (unint64_t *)&v89->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    v92 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
    if (*((_QWORD *)&v117 + 1))
    {
      v93 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    v96 = v118;
    v95 = v119;
    if (v119)
    {
      v97 = (unint64_t *)&v119->__shared_owners_;
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
    v99 = a5 + v116 * a6;
    v100 = *(std::__shared_weak_count **)(v99 + 32);
    *(_QWORD *)(v99 + 24) = v96;
    *(_QWORD *)(v99 + 32) = v95;
    if (v100)
    {
      v101 = (unint64_t *)&v100->__shared_owners_;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    v104 = v118;
    v103 = v119;
    if (v119)
    {
      v105 = (unint64_t *)&v119->__shared_owners_;
      do
        v106 = __ldxr(v105);
      while (__stxr(v106 + 1, v105));
    }
    v107 = v122;
    v121 = v104;
    v122 = v103;
    if (v107)
    {
      v108 = (unint64_t *)&v107->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    ++v116;
    v110 = v81 + 1 == v112;
    v19 = v81 + 1 >= v112;
    if (v110)
      goto LABEL_18;
  }
  v70 = 0;
  while (1)
  {
    v72 = a2[2];
    if (v72 + v9 > 8 * a2[1])
      break;
    v73 = 0;
    if ((_DWORD)v9)
    {
      v74 = *a2;
      v75 = v9;
      do
      {
        v76 = 8 - (v72 & 7);
        if (v75 < v76)
          v76 = v75;
        v73 = (*(unsigned __int8 *)(v74 + (v72 >> 3)) >> (8 - (v72 & 7) - v76)) & ~(-1 << v76) | (v73 << v76);
        v72 += v76;
        a2[2] = v72;
        v75 -= v76;
      }
      while (v75);
    }
    v77 = v120;
    LODWORD(v71) = *(unsigned __int8 *)(v120 + 33);
    if (*(_BYTE *)(v120 + 33))
    {
      v78 = *(_QWORD *)v120;
      v79 = *(unsigned __int8 *)(v120 + 33);
      v80 = *(_DWORD **)v120;
      while (*v80 != v73)
      {
        v80 += 2;
        if (!--v79)
          goto LABEL_100;
      }
      *(_BYTE *)(v120 + 33) = v71 - 1;
      *(_QWORD *)v80 = *(_QWORD *)(v78 + 8 * (v71 - 1));
      v71 = *(unsigned __int8 *)(v77 + 33);
      *(_QWORD *)(*(_QWORD *)v77 + 8 * v71) = -1;
    }
LABEL_100:
    if (++v70 == v66)
      goto LABEL_113;
  }
LABEL_18:
  v20 = v119;
  if (v119)
  {
    v21 = (unint64_t *)&v119->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
  if (*((_QWORD *)&v120 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v122;
  if (v122)
  {
    v27 = (unint64_t *)&v122->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  return v19;
}

void sub_189AE715C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  std::__shared_weak_count *v21;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void *v26;

  shared_weak_owners = (std::__shared_weak_count *)v21[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v26);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void geo::codec::copyFeatureStyleAttributes(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;

  if (a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (v4)
    {
      v5 = (char *)operator new(0x40uLL);
      v6 = v5;
      *((_QWORD *)v5 + 1) = 0;
      *((_QWORD *)v5 + 2) = 0;
      *((_QWORD *)v5 + 3) = *(_QWORD *)v4;
      v7 = v5 + 24;
      *(_QWORD *)v5 = &off_1E1BFB2F8;
      v8 = *(unsigned __int8 *)(a2 + 32);
      v9 = *(_QWORD *)(a2 + 16);
      v10 = *(const void **)(a2 + 24);
      *((_QWORD *)v5 + 4) = v4;
      *((_QWORD *)v5 + 5) = v9;
      if (v9)
      {
        v11 = (unint64_t *)(v9 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
        v4 = *(_QWORD *)(a2 + 8);
      }
      *((_QWORD *)v5 + 6) = 0;
      v5[56] = 0;
      *(_WORD *)(v5 + 57) = *(unsigned __int8 *)(v4 + 33);
      if (v10 && (_DWORD)v8)
      {
        v13 = malloc_type_malloc(12 * v8, 0x10000403E1C8BA9uLL);
        *((_QWORD *)v6 + 6) = v13;
        if (v13)
        {
          v6[56] = v8;
          memcpy(v13, v10, 12 * v8);
        }
      }
    }
    else
    {
      v6 = (char *)operator new(0x40uLL);
      *((_QWORD *)v6 + 1) = 0;
      *((_QWORD *)v6 + 2) = 0;
      *(_QWORD *)v6 = &off_1E1BFB2F8;
      v7 = v6 + 24;
      FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)(v6 + 24), (const FeatureStyleAttributes *)a2);
    }
    *a1 = v7;
    a1[1] = v6;
    v6[58] = 0;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_189AE7320(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;
  void *v7;

  shared_weak_owners = (std::__shared_weak_count *)v1[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
      std::__shared_weak_count::~__shared_weak_count(v1);
      operator delete(v6);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v7);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t geo::codec::decodeIntCompressorArray<unsigned int>(_QWORD *a1, uint64_t *a2, char a3, char a4, unint64_t a5, int8x16_t *a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int v17;

  v17 = 0;
  if (!a2)
    return 0;
  result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v17);
  if ((_DWORD)result)
  {
    v13 = v17;
    v14 = a1[6];
    v15 = v14 + v17;
    if (v15 <= a1[7])
    {
      v16 = (unsigned __int8 *)(a1[5] + v14);
      a1[6] = v15;
      return mgcl::ints::IntDecompressor<unsigned int>::decompress(a2, v16, v13, a3, a4, a5, a6) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t geo::codec::decodeIntCompressorArray<int>(_QWORD *a1, uint64_t *a2, char a3, char a4, unint64_t a5, int8x16_t *a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int v17;

  v17 = 0;
  if (!a2)
    return 0;
  result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v17);
  if ((_DWORD)result)
  {
    v13 = v17;
    v14 = a1[6];
    v15 = v14 + v17;
    if (v15 <= a1[7])
    {
      v16 = (unsigned __int8 *)(a1[5] + v14);
      a1[6] = v15;
      return mgcl::ints::IntDecompressor<int>::decompress(a2, v16, v13, a3, a4, a5, a6) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t geo::codec::decodeIntCompressorArray<unsigned char>(_QWORD *a1, uint64_t *a2, char a3, char a4, size_t a5, uint8x8_t *a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int v17;

  v17 = 0;
  if (!a2)
    return 0;
  result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v17);
  if ((_DWORD)result)
  {
    v13 = v17;
    v14 = a1[6];
    v15 = v14 + v17;
    if (v15 <= a1[7])
    {
      v16 = (unsigned __int8 *)(a1[5] + v14);
      a1[6] = v15;
      return mgcl::ints::IntDecompressor<unsigned char>::decompress(a2, v16, v13, a3, a4, a5, a6) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t geo::codec::decodeLocalizations()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char **v3;
  char **v4;
  Bytef *v5;
  unint64_t v6;
  geo::codec::Allocator *v7;
  FILE **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  geo::codec::Allocator *v16;
  int v17;
  size_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  geo::codec::Allocator *v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  const char *v28;
  geo::codec::Allocator *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  int v35;
  char *v36;
  unint64_t v37;
  char *v38;
  void *v39;
  const char *v40;
  const char *v41;
  size_t v42;
  size_t v43;
  size_t v44;
  size_t v45;
  Bytef *p_strm;
  char *v47;
  _BYTE *next_in;
  uint64_t total_in_high;
  char *v50;
  char *v51;
  unint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  _BYTE *v68;
  char *v69;
  unint64_t v70;
  char *v71;
  _OWORD *v72;
  __int128 *v73;
  unint64_t v74;
  __int128 v75;
  char v76;
  char *v77;
  unint64_t v78;
  _OWORD *v79;
  __int128 *v80;
  unint64_t v81;
  __int128 v82;
  char v83;
  char *v84;
  char *v85;
  size_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  unint64_t v99;
  char *v100;
  _BYTE *v101;
  _OWORD *v102;
  __int128 *v103;
  unint64_t v104;
  __int128 v105;
  char v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  geo::codec::Allocator *v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  size_t v118;
  _QWORD *v119;
  int v120;
  unint64_t v121;
  char **v122;
  uint64_t v123;
  char **v124;
  uint64_t v125;
  size_t v126;
  const char *v127;
  z_stream strm;
  __int128 __src;
  char *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;

  v0 = MEMORY[0x1E0C80A78]();
  v125 = v2;
  v122 = v3;
  v133 = *MEMORY[0x1E0C80C00];
  v123 = v1;
  v124 = v4;
  v4[1] = *v4;
  v3[1] = *v3;
  if (*(char *)(v1 + 23) < 0)
  {
    **(_BYTE **)v1 = 0;
    *(_QWORD *)(v1 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v1 = 0;
    *(_BYTE *)(v1 + 23) = 0;
  }
  v5 = *(Bytef **)v0;
  v6 = *(_QWORD *)(v0 + 8) - *(_QWORD *)v0;
  bzero(&strm, 0x70uLL);
  strm.next_in = v5;
  strm.avail_in = v6;
  v7 = (geo::codec::Allocator *)inflateInit2_(&strm, 31, "1.2.12", 112);
  v8 = (FILE **)MEMORY[0x1E0C80C10];
  if ((_DWORD)v7)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "inflateInit returned %d\n", (_DWORD)v7);
    goto LABEL_22;
  }
  v9 = 2;
  do
  {
    v10 = v9;
    v9 *= 2;
  }
  while (v10 < v6);
  v11 = geo::codec::Allocator::instance(v7);
  v12 = (const char *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v10, 8);
  v13 = 0;
  while (1)
  {
    strm.next_out = (Bytef *)&__src;
    strm.avail_out = 4096;
    v16 = (geo::codec::Allocator *)inflate(&strm, 0);
    v17 = (int)v16;
    if (v16 > 1)
      goto LABEL_19;
    if (strm.avail_out == 4096)
      goto LABEL_11;
    v18 = 4096 - strm.avail_out;
    v19 = v10;
    do
    {
      v14 = v19;
      v19 *= 2;
    }
    while (v14 < v18 + v13);
    if (v14 != v10)
      break;
    v14 = v10;
    v15 = (uint64_t)v12;
LABEL_10:
    memcpy((void *)(v15 + v13), &__src, v18);
    v10 = v14;
    v12 = (const char *)v15;
    v13 += v18;
LABEL_11:
    if (v17)
    {
      inflateEnd(&strm);
      v8 = (FILE **)MEMORY[0x1E0C80C10];
      if (v13 < 4 || strncmp(v12, "VLOC", 4uLL))
        goto LABEL_22;
      v25 = v125;
      (*(void (**)(uint64_t, const char *, unint64_t))(*(_QWORD *)v125 + 16))(v125, v12, v13);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 40))(v25, 4);
      (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v25 + 48))(&__src, v25);
      if (*(char *)(v123 + 23) < 0)
        operator delete(*(void **)v123);
      *(_OWORD *)v123 = __src;
      *(_QWORD *)(v123 + 16) = v130;
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 56))(v125);
      if (v26 > 0x10000)
      {
        v27 = v123;
        if (*(char *)(v123 + 23) >= 0)
          v28 = (const char *)v123;
        else
          v28 = *(const char **)v123;
        v29 = (geo::codec::Allocator *)fprintf((FILE *)*MEMORY[0x1E0C80C10], "Tile (%s) contains too many localization labels (%zu)", v28, v26);
        if (v12)
        {
          v30 = geo::codec::Allocator::instance(v29);
          (*(void (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)v30 + 40))(v30, v12, 0);
          v27 = v123;
        }
        MEMORY[0x18D7640AC](v27, "");
        return 0;
      }
      if (v26)
      {
        v31 = (v122[1] - *v122) >> 5;
        if (v26 <= v31)
        {
          if (v26 < v31)
            v122[1] = &(*v122)[32 * v26];
        }
        else
        {
          std::vector<GeoCodecsLocalizationTableEntry,geo::StdAllocator<GeoCodecsLocalizationTableEntry,geo::codec::Allocator>>::__append((uint64_t)v122, v26 - v31);
        }
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v125 + 32))(v125))
        {
          v33 = 0;
          v34 = 0;
          v121 = 0;
          v35 = 0;
          v119 = v124 + 3;
          while (1)
          {
            v36 = *v122;
            if (v33 >= (v122[1] - *v122) >> 5)
              std::vector<zilch::GeoCoordinates>::__throw_out_of_range[abi:ne180100]();
            v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 56))(v125);
            v38 = &v36[32 * v33];
            *(_QWORD *)v38 = v37;
            if (*(char *)(v123 + 23) >= 0)
              v39 = (void *)v123;
            else
              v39 = *(void **)v123;
            *((_QWORD *)v38 + 2) = v39;
            v38[24] &= ~1u;
            if (!((v37 >= v121) | v35 & 1))
            {
              if (*(char *)(v123 + 23) >= 0)
                v40 = (const char *)v123;
              else
                v40 = *(const char **)v123;
              fprintf((FILE *)*MEMORY[0x1E0C80C10], "Localization tile %s is not in sorted order!", v40);
              v37 = *(_QWORD *)v38;
              v35 = 1;
            }
            v121 = v37;
            (*(void (**)(uint64_t))(*(_QWORD *)v125 + 56))(v125);
            v126 = 0;
            v127 = 0;
            (*(void (**)(uint64_t, const char **, size_t *))(*(_QWORD *)v125 + 64))(v125, &v127, &v126);
            v41 = v127;
            v42 = strnlen(v127, v126);
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v125 + 40))(v125, (int)v42 + 1);
            if (v42 + 1 < v126)
              v43 = v42 + 1;
            else
              v43 = v126;
            v44 = strlen(v41);
            if (v44 >= 0x7FFFFFFFFFFFFFF8)
              std::string::__throw_length_error[abi:ne180100]();
            v45 = v44;
            if (v44 >= 0x17)
            {
              v59 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v44 | 7) != 0x17)
                v59 = v44 | 7;
              v60 = v59 + 1;
              p_strm = (Bytef *)operator new(v59 + 1);
              *(_QWORD *)&strm.avail_in = v45;
              strm.total_in = v60 | 0x8000000000000000;
              strm.next_in = p_strm;
            }
            else
            {
              HIBYTE(strm.total_in) = v44;
              p_strm = (Bytef *)&strm;
              if (!v44)
              {
                LOBYTE(strm.next_in) = 0;
                v47 = &v36[32 * v33 + 8];
                if (!v43)
                  goto LABEL_78;
                goto LABEL_58;
              }
            }
            memmove(p_strm, v41, v45);
            p_strm[v45] = 0;
            v47 = &v36[32 * v33 + 8];
            if (!v43)
            {
LABEL_78:
              *(_QWORD *)v47 = -1;
              if (SHIBYTE(strm.total_in) < 0)
                goto LABEL_153;
              goto LABEL_154;
            }
LABEL_58:
            v120 = v35;
            *(_QWORD *)v47 = v34;
            if ((strm.total_in & 0x8000000000000000) == 0)
              next_in = &strm;
            else
              next_in = strm.next_in;
            if ((strm.total_in & 0x8000000000000000) == 0)
              total_in_high = HIBYTE(strm.total_in);
            else
              total_in_high = *(_QWORD *)&strm.avail_in;
            v50 = *v124;
            v51 = v124[1];
            v52 = (unint64_t)v124[2];
            if (total_in_high < 1)
            {
              v61 = *v124;
              v35 = v120;
              goto LABEL_109;
            }
            if ((uint64_t)(v52 - (_QWORD)v51) >= total_in_high)
            {
              v62 = v124[1];
              v63 = total_in_high;
              v64 = next_in;
              v65 = v62;
              v35 = v120;
              do
              {
                if (v65)
                  *v65 = *v64;
                ++v64;
                ++v65;
                ++v62;
                --v63;
              }
              while (v63);
              v124[1] = v65;
              goto LABEL_108;
            }
            v53 = (_BYTE *)(v51 - v50);
            if (v51 - v50 + total_in_high < 0)
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            v54 = v52 - (_QWORD)v50;
            v55 = 2 * (v52 - (_QWORD)v50);
            v117 = (_BYTE *)(v51 - v50 + total_in_high);
            if (v55 <= (unint64_t)v117)
              v55 = v51 - v50 + total_in_high;
            if (v54 >= 0x3FFFFFFFFFFFFFFFLL)
              v56 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v56 = v55;
            if (v56)
            {
              v57 = v56;
              v58 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v119 + 16))(*v119, v56, 1);
              v56 = v57;
              v53 = (_BYTE *)(v51 - v50);
            }
            else
            {
              v58 = 0;
            }
            v61 = &v53[v58];
            v66 = &v53[v58 + total_in_high];
            v67 = total_in_high;
            v68 = &v53[v58];
            do
            {
              if (v68)
                *v68 = *next_in;
              ++v68;
              ++next_in;
              --v67;
            }
            while (v67);
            v69 = *v124;
            if (*v124 != v51)
            {
              v70 = v51 - v69;
              if ((unint64_t)(v51 - v69) < 0x20)
              {
                v71 = v51;
                do
                {
LABEL_98:
                  v76 = *--v71;
                  *--v61 = v76;
                }
                while (v71 != v69);
                goto LABEL_99;
              }
              v71 = v51;
              if ((unint64_t)&v50[-v58] < 0x20)
                goto LABEL_98;
              v71 = &v51[-(v70 & 0xFFFFFFFFFFFFFFE0)];
              v61 -= v70 & 0xFFFFFFFFFFFFFFE0;
              v72 = &v53[v58 - 16];
              v73 = (__int128 *)&v53[(_QWORD)v50 - 16];
              v74 = v70 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v75 = *v73;
                *(v72 - 1) = *(v73 - 1);
                *v72 = v75;
                v72 -= 2;
                v73 -= 2;
                v74 -= 32;
              }
              while (v74);
              if (v70 != (v70 & 0xFFFFFFFFFFFFFFE0))
                goto LABEL_98;
            }
LABEL_99:
            v77 = v124[1];
            v78 = v77 - v51;
            if (v77 != v51)
            {
              if (v78 < 0x20)
                goto LABEL_176;
              if ((unint64_t)(total_in_high + v58 - (_QWORD)v50) < 0x20)
                goto LABEL_176;
              v51 += v78 & 0xFFFFFFFFFFFFFFE0;
              v66 += v78 & 0xFFFFFFFFFFFFFFE0;
              v79 = &v117[v58 + 16];
              v80 = (__int128 *)&v53[(_QWORD)v50 + 16];
              v81 = v78 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v82 = *v80;
                *(v79 - 1) = *(v80 - 1);
                *v79 = v82;
                v79 += 2;
                v80 += 2;
                v81 -= 32;
              }
              while (v81);
              if (v78 != (v78 & 0xFFFFFFFFFFFFFFE0))
              {
LABEL_176:
                do
                {
                  v83 = *v51++;
                  *v66++ = v83;
                }
                while (v51 != v77);
              }
            }
            v52 = v58 + v56;
            v84 = *v124;
            *v124 = v61;
            v124[1] = v66;
            v85 = v124[2];
            v51 = v66;
            v124[2] = (char *)v52;
            v35 = v120;
            if (v84)
            {
              (*(void (**)(_QWORD, char *, int64_t))(*(_QWORD *)*v119 + 40))(*v119, v84, v85 - v84);
LABEL_108:
              v61 = *v124;
              v51 = v124[1];
              v52 = (unint64_t)v124[2];
            }
LABEL_109:
            if ((unint64_t)v51 >= v52)
            {
              v118 = v33;
              v86 = v43;
              v87 = v51 - v61;
              v88 = v51 - v61 + 1;
              v89 = v124 + 3;
              if (v88 < 0)
                std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
              v90 = v52 - (_QWORD)v61;
              v91 = 2 * (v52 - (_QWORD)v61);
              if (v91 <= v88)
                v91 = v51 - v61 + 1;
              if (v90 >= 0x3FFFFFFFFFFFFFFFLL)
                v92 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v92 = v91;
              v132 = v124 + 3;
              v116 = v34;
              if (v92)
              {
                v93 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v119 + 16))(*v119, v92, 1);
                v89 = v124 + 3;
                v94 = (_BYTE *)(v93 + v87);
                *(_QWORD *)&__src = v93;
                *((_QWORD *)&__src + 1) = v93 + v87;
                v130 = (char *)(v93 + v87);
                v131 = v93 + v92;
                if (v87 != v92)
                  goto LABEL_130;
              }
              else
              {
                v93 = 0;
                v94 = (_BYTE *)(v51 - v61);
                *(_QWORD *)&__src = 0;
                *((_QWORD *)&__src + 1) = v51 - v61;
                v130 = (char *)(v51 - v61);
                v131 = 0;
                if (v87)
                  goto LABEL_130;
              }
              if (v87 < 1)
              {
                if ((unint64_t)(2 * v87) <= 1)
                  v95 = 1;
                else
                  v95 = 2 * v87;
                v96 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)*v89 + 16))(*v89, v95, 1);
                v94 = (_BYTE *)(v96 + (v95 >> 2));
                v131 = v96 + v95;
                if (v93)
                  (*(void (**)(_QWORD, uint64_t, int64_t))(*(_QWORD *)*v119 + 40))(*v119, v93, v51 - v61);
              }
              else
              {
                v94 -= (unint64_t)v88 >> 1;
              }
LABEL_130:
              if (v94)
                *v94 = 0;
              v97 = v94 + 1;
              v130 = v94 + 1;
              v98 = *v124;
              v43 = v86;
              if (*v124 != v51)
              {
                v99 = v51 - v98;
                v33 = v118;
                if ((unint64_t)(v51 - v98) < 0x20 || (unint64_t)(v51 - v94) < 0x20)
                {
                  v100 = v51;
                  v101 = v94;
                }
                else
                {
                  v100 = &v51[-(v99 & 0xFFFFFFFFFFFFFFE0)];
                  v101 = &v94[-(v99 & 0xFFFFFFFFFFFFFFE0)];
                  v102 = v94 - 16;
                  v103 = (__int128 *)(v51 - 16);
                  v104 = v99 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v105 = *v103;
                    *(v102 - 1) = *(v103 - 1);
                    *v102 = v105;
                    v102 -= 2;
                    v103 -= 2;
                    v104 -= 32;
                  }
                  while (v104);
                  if (v99 == (v99 & 0xFFFFFFFFFFFFFFE0))
                  {
LABEL_142:
                    v97 = v130;
                    v94 = v101;
                    goto LABEL_143;
                  }
                }
                do
                {
                  v106 = *--v100;
                  *--v101 = v106;
                }
                while (v100 != v98);
                goto LABEL_142;
              }
              v33 = v118;
LABEL_143:
              *((_QWORD *)&__src + 1) = v94;
              v107 = v124[1];
              if (v107 != v51)
              {
                do
                {
                  if (v97)
                    *v97 = *v51;
                  ++v51;
                  ++v97;
                }
                while (v51 != v107);
                v94 = (_BYTE *)*((_QWORD *)&__src + 1);
              }
              v108 = *v124;
              *v124 = v94;
              v124[1] = v97;
              v109 = v124[2];
              v124[2] = (char *)v131;
              if (v108)
                (*(void (**)(_QWORD, char *, int64_t))(*(_QWORD *)*v132 + 40))(*v132, v108, v109 - v108);
              v35 = v120;
              v34 = v116;
              goto LABEL_152;
            }
            if (v61)
              *v51 = 0;
            v124[1] = v51 + 1;
LABEL_152:
            v34 += v43;
            if (SHIBYTE(strm.total_in) < 0)
LABEL_153:
              operator delete(strm.next_in);
LABEL_154:
            ++v33;
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 32))(v125) & 1) == 0)
              goto LABEL_157;
          }
        }
        LOBYTE(v35) = 0;
        v33 = 0;
LABEL_157:
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 24))(v125) & 1) != 0
          || (v110 = *v122, v33 != (v122[1] - *v122) >> 5))
        {
          v112 = v123;
          if (*(char *)(v123 + 23) >= 0)
            v113 = (const char *)v123;
          else
            v113 = *(const char **)v123;
          v114 = (geo::codec::Allocator *)fprintf((FILE *)*MEMORY[0x1E0C80C10], "Localization tile %s could not be fully read!\n", v113);
          v122[1] = *v122;
          if (v12)
          {
            v115 = geo::codec::Allocator::instance(v114);
            (*(void (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)v115 + 40))(v115, v12, 0);
            v112 = v123;
          }
          MEMORY[0x18D7640AC](v112, "");
          return 0;
        }
        if ((v35 & 1) != 0)
          qsort(v110, v33, 0x20uLL, (int (__cdecl *)(const void *, const void *))geo::codec::decodeLocalizations(std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>> const&,std::string &,std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>&,std::vector<GeoCodecsLocalizationTableEntry,geo::StdAllocator<GeoCodecsLocalizationTableEntry,geo::codec::Allocator>> &,geo::codec::PBDataReaderInterface &)::$_0::__invoke);
        if (v12)
        {
          v111 = geo::codec::Allocator::instance((geo::codec::Allocator *)v110);
          (*(void (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)v111 + 40))(v111, v12, 0);
        }
      }
      else if (v12)
      {
        v32 = geo::codec::Allocator::instance(0);
        (*(void (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)v32 + 40))(v32, v12, 0);
      }
      return 1;
    }
  }
  v20 = geo::codec::Allocator::instance(v16);
  v15 = (*(uint64_t (**)(uint64_t, const char *, size_t))(*(_QWORD *)v20 + 32))(v20, v12, v14);
  if (v15)
    goto LABEL_10;
  v21 = geo::codec::Allocator::instance(0);
  (*(void (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)v21 + 40))(v21, v12, 0);
  v12 = 0;
LABEL_19:
  v22 = (geo::codec::Allocator *)inflateEnd(&strm);
  v23 = geo::codec::Allocator::instance(v22);
  (*(void (**)(uint64_t, const char *, _QWORD))(*(_QWORD *)v23 + 40))(v23, v12, 0);
  v8 = (FILE **)MEMORY[0x1E0C80C10];
LABEL_22:
  fwrite("Localization tile is not in VLOC format\n", 0x28uLL, 1uLL, *v8);
  return 0;
}

void sub_189AE82F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL geo::codec::chapterReadNullTerminatedString(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = a1[6];
  v4 = a1[7];
  v5 = v3 + 1;
  if (v3 + 1 > v4)
    return 0;
  if (v3 < v4)
  {
    v7 = 0;
    v8 = a1[5];
    while (*(_BYTE *)(v8 + v3))
    {
      if (v7 < a3 - 1)
        a2[v7++] = *(_BYTE *)(v8 + v3);
      if (v4 == ++v3)
      {
        v3 = v4;
        break;
      }
    }
    v5 = v3 + 1;
    a2[v7] = 0;
    v9 = a1[7];
    if (v3 + 1 < v9)
      goto LABEL_13;
LABEL_10:
    a1[6] = v9;
    return *(_BYTE *)(v9 + a1[5] - 1) == 0;
  }
  *a2 = 0;
  v9 = a1[7];
  if (v5 >= v9)
    goto LABEL_10;
LABEL_13:
  a1[6] = v5;
  return 1;
}

uint64_t geo::codec::_createLOD(geo::codec::Allocator *a1, _QWORD *a2, char a3, int a4, uint64_t *a5, uint64_t a6, _QWORD *a7, _QWORD *a8)
{
  uint64_t v8;
  float v14;
  uint64_t v15;
  uint64_t v16;
  geo::codec::Allocator *v17;
  float *v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  float v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  geo::codec::Allocator *v34;
  uint64_t v35;
  geo::codec::Allocator *v36;
  uint64_t v37;
  geo::codec::Allocator *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  float32x2_t v54;
  int v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  float32x2_t v60;
  int v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  unsigned __int8 v65;
  geo::codec::Allocator *v66;
  uint64_t v67;
  unsigned __int8 v68;
  geo::codec::Allocator *v69;
  uint64_t v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  float32x2_t v80;
  int v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  uint64_t v85;
  float32x2_t v86;
  int v87;
  uint64_t v88;
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  float *v104;
  char *v105;
  float *v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  float *v111;
  _BYTE *v112;
  uint64_t v113;
  char *v114;
  _OWORD *v115;
  char *v116;
  unint64_t v117;
  __int128 v118;
  char v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  float *v132;
  char *v133;
  float *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  char *v139;
  int64_t v140;
  unint64_t v141;
  float *v142;
  char *v143;
  uint64_t v144;
  float *v145;
  _BYTE *v146;
  uint64_t v147;
  char *v148;
  _OWORD *v149;
  __int128 *v150;
  unint64_t v151;
  __int128 v152;
  char v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  float32x4_t *v159;
  int8x16_t *v160;
  uint64_t v161;
  int8x16_t v162;
  float32x4_t *v163;
  char *v164;
  uint64_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float v168;
  unint64_t *v169;
  uint64_t v170;
  void *v171;
  geo::codec::Allocator *v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  geo::codec::Allocator *v176;
  uint64_t v177;
  _QWORD *v178;
  size_t v179;
  uint64_t v180;
  _QWORD *v181;
  size_t v182;
  uint64_t v183;
  uint64_t v184;
  _DWORD *v185;
  uint64_t v186;
  _DWORD *v188;
  uint64_t v189;
  geo::codec::Allocator *v190;
  uint64_t v191;
  geo::codec::Allocator *v192;
  uint64_t v193;
  uint64_t v194;
  int8x16_t v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t *v199;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  geo::codec::Allocator *v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unsigned int *v210;
  char *v211;
  char *v212;
  uint64_t v213;
  geo::codec::Allocator *v214;
  char *v215;
  char *v216;
  uint64_t v217;
  geo::codec::Allocator *v218;
  int8x16x2_t v219;
  int8x16x4_t v220;

  v8 = 1;
  if (!*((_QWORD *)a1 + 2))
    return v8;
  if (a4)
    v14 = 0.00024414;
  else
    v14 = 0.00097656;
  v215 = 0;
  v216 = 0;
  v217 = 0;
  v218 = (geo::codec::Allocator *)geo::codec::Allocator::instance(a1);
  v211 = 0;
  v212 = 0;
  v213 = 0;
  v214 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v218);
  v15 = geo::codec::Allocator::instance(v214);
  v206 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, 16 * *((_QWORD *)a1 + 5), 8);
  v16 = geo::codec::Allocator::instance(v206);
  v17 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, 0x2000, 8);
  v18 = (float *)v17;
  if (*((_QWORD *)a1 + 3))
  {
    v19 = geo::codec::Allocator::instance(v17);
    v17 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, 4096, 8);
    v20 = (float *)v17;
  }
  else
  {
    v20 = 0;
  }
  v199 = a5;
  v21 = geo::codec::Allocator::instance(v17);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, 4096, 8);
  v23 = (_DWORD *)v22;
  v24 = *((_QWORD *)a1 + 5);
  if (a6 && *(_QWORD *)a6 || a7 && *a7)
  {
    v25 = 1;
    v26 = 0;
    if (!v24)
      goto LABEL_222;
  }
  else
  {
    v25 = v199 != 0;
    v26 = 0;
    if (!v24)
      goto LABEL_222;
  }
  v27 = v14 / (float)(1 << a3);
  v28 = *((_QWORD *)a1 + 2);
  v205 = *((_QWORD *)a1 + 4);
  v29 = (_QWORD *)(v205 + 8);
  v30 = *((_QWORD *)a1 + 5);
  do
  {
    v31 = *(v29 - 1);
    if (v31 >= v28 || *v29 + v31 > v28)
    {
      v33 = geo::codec::Allocator::instance((geo::codec::Allocator *)v22);
      v34 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v33 + 40))(v33, v206, 0);
      v35 = geo::codec::Allocator::instance(v34);
      v36 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _DWORD *, _QWORD))(*(_QWORD *)v35 + 40))(v35, v23, 0);
      v37 = geo::codec::Allocator::instance(v36);
      v38 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, float *, _QWORD))(*(_QWORD *)v37 + 40))(v37, v18, 0);
      if (v20)
      {
        v39 = geo::codec::Allocator::instance(v38);
        (*(void (**)(uint64_t, float *, _QWORD))(*(_QWORD *)v39 + 40))(v39, v20, 0);
      }
      v8 = 0;
      goto LABEL_251;
    }
    v26 += *v29;
    v29 += 2;
    --v30;
  }
  while (v30);
  if (!v26)
    v25 = 0;
  v197 = a7;
  v198 = a8;
  v203 = *((_QWORD *)a1 + 5);
  if (v25)
  {
    v32 = geo::codec::Allocator::instance((geo::codec::Allocator *)v22);
    v204 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v32 + 24))(v32, v26, 4);
  }
  else
  {
    v204 = 0;
  }
  v40 = 0;
  v41 = 0;
  v42 = 1024;
  v196 = (int8x16_t)xmmword_189CFC5C0;
  v43 = 1024;
  while (2)
  {
    v207 = v41;
    v208 = v40;
    v44 = v205 + 16 * v40;
    v210 = (unsigned int *)(v44 + 8);
    v22 = geo::codec::lineArcSplineFlatten((geo::codec *)(*((_QWORD *)a1 + 1) + 12 * *(_QWORD *)v44), (const GeoCodecsTileCurveVertex *)*(unsigned int *)(v44 + 8), (float *)(*((_QWORD *)a1 + 3) + 4 * *(_QWORD *)v44), v18, 2 * (int)v43, v27, v20, v23, (float *)v42, (int *)v196.i64[0], v196.i32[2]);
    if (v22 > 0xFFFFFFFC
      || ((int)v22 >= 0 ? (v45 = v22) : (v45 = v22 + 1),
          (v46 = (v45 >> 1), v47 = *(_QWORD *)v210, (int)v42 >= (int)*(_QWORD *)v210)
        ? (v48 = (int)v46 <= (int)v43)
        : (v48 = 0),
          !v48 || ((v46 | v47) & 0x80000000) != 0))
    {
      while (1)
      {
LABEL_69:
        {
          v90 = operator new();
          geo::MallocZoneAllocator::MallocZoneAllocator(v90, "GeoCodec", 0x99AFC36000000008, 0, 0);
          geo::codec::Allocator::instance(void)::alloc = v90;
        }
        v66 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, float *, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                                           + 40))(geo::codec::Allocator::instance(void)::alloc, v18, 0);
        if (v20)
        {
          v67 = geo::codec::Allocator::instance(v66);
          (*(void (**)(uint64_t, float *, _QWORD))(*(_QWORD *)v67 + 40))(v67, v20, 0);
        }
        {
          v91 = operator new();
          geo::MallocZoneAllocator::MallocZoneAllocator(v91, "GeoCodec", 0x99AFC36000000008, 0, 0);
          geo::codec::Allocator::instance(void)::alloc = v91;
        }
        v69 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                                            + 16))(geo::codec::Allocator::instance(void)::alloc, 16 * v43, 8);
        v18 = (float *)v69;
        if (*((_QWORD *)a1 + 3))
        {
          v70 = geo::codec::Allocator::instance(v69);
          v20 = (float *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70 + 16))(v70, 8 * v43, 8);
        }
        {
          v92 = operator new();
          geo::MallocZoneAllocator::MallocZoneAllocator(v92, "GeoCodec", 0x99AFC36000000008, 0, 0);
          geo::codec::Allocator::instance(void)::alloc = v92;
        }
        (*(void (**)(uint64_t, _DWORD *, _QWORD))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                          + 40))(geo::codec::Allocator::instance(void)::alloc, v23, 0);
        {
          v93 = operator new();
          geo::MallocZoneAllocator::MallocZoneAllocator(v93, "GeoCodec", 0x99AFC36000000008, 0, 0);
          geo::codec::Allocator::instance(void)::alloc = v93;
        }
        v23 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)geo::codec::Allocator::instance(void)::alloc
                                                                             + 16))(geo::codec::Allocator::instance(void)::alloc, 8 * v42, 8);
        v43 *= 2;
        v42 *= 2;
        v22 = geo::codec::lineArcSplineFlatten((geo::codec *)(*((_QWORD *)a1 + 1) + 12 * *(_QWORD *)v44), (const GeoCodecsTileCurveVertex *)*v210, (float *)(*((_QWORD *)a1 + 3) + 4 * *(_QWORD *)v44), v18, 2 * (int)v43, v27, v20, v23, (float *)v42, (int *)v196.i64[0], v196.i32[2]);
        if ((int)v22 >= 0)
          v73 = v22;
        else
          v73 = v22 + 1;
        if (v22 > 0xFFFFFFFC)
        {
          LODWORD(v64) = -1;
          goto LABEL_68;
        }
        v74 = *(_QWORD *)v210;
        LODWORD(v64) = -1;
        if ((int)v42 < (int)*(_QWORD *)v210)
          goto LABEL_68;
        v75 = (v73 >> 1);
        if ((int)v75 > (int)v43 || ((v75 | v74) & 0x80000000) != 0)
          goto LABEL_68;
        if ((int)v22 < 2)
          break;
        v64 = 0;
        v76 = 0;
        v77 = 0;
        if (v20)
        {
          do
          {
            v78 = v76;
            v79 = v76 + 1;
            while (v75 != v79)
            {
              v80 = vsub_f32(*(float32x2_t *)&v18[2 * v78], *(float32x2_t *)&v18[2 * v79]);
              ++v76;
              ++v79;
              if (vaddv_f32(vmul_f32(v80, v80)) >= 1.0e-10)
              {
                v81 = v76 - 1;
                *(_QWORD *)&v18[2 * v64] = *(_QWORD *)&v18[2 * v78];
                v20[v64] = v20[v78];
                if (v77 >= (int)v74)
                  goto LABEL_87;
                goto LABEL_94;
              }
            }
            v81 = v75 - 1;
            v76 = v75;
            *(_QWORD *)&v18[2 * v64] = *(_QWORD *)&v18[2 * v78];
            v20[v64] = v20[v78];
            if (v77 >= (int)v74)
              goto LABEL_87;
LABEL_94:
            v82 = (int)v74 - (uint64_t)v77;
            v83 = &v23[v77];
            while (1)
            {
              v22 = *v83;
              if ((int)v22 > v81)
                break;
              *v83++ = v64;
              ++v77;
              if (!--v82)
              {
                v77 = v74;
                break;
              }
            }
LABEL_87:
            ++v64;
          }
          while (v76 < (int)v75);
LABEL_110:
          if (v77 != (_DWORD)v74)
            goto LABEL_122;
          goto LABEL_68;
        }
        do
        {
          v84 = v76;
          v85 = v76 + 1;
          while (v75 != v85)
          {
            v86 = vsub_f32(*(float32x2_t *)&v18[2 * v84], *(float32x2_t *)&v18[2 * v85]);
            ++v76;
            ++v85;
            if (vaddv_f32(vmul_f32(v86, v86)) >= 1.0e-10)
            {
              v87 = v76 - 1;
              *(_QWORD *)&v18[2 * v64] = *(_QWORD *)&v18[2 * v84];
              if (v77 >= (int)v74)
                goto LABEL_98;
              goto LABEL_105;
            }
          }
          v87 = v75 - 1;
          v76 = v75;
          *(_QWORD *)&v18[2 * v64] = *(_QWORD *)&v18[2 * v84];
          if (v77 >= (int)v74)
            goto LABEL_98;
LABEL_105:
          v88 = (int)v74 - (uint64_t)v77;
          v89 = &v23[v77];
          while (1)
          {
            v22 = *v89;
            if ((int)v22 > v87)
              break;
            *v89++ = v64;
            ++v77;
            if (!--v88)
            {
              v77 = v74;
              break;
            }
          }
LABEL_98:
          ++v64;
        }
        while (v76 < (int)v75);
        if (v77 != (_DWORD)v74)
          goto LABEL_122;
LABEL_68:
        if ((_DWORD)v64 != -1)
          goto LABEL_123;
      }
      LODWORD(v64) = 0;
      v77 = 0;
      goto LABEL_110;
    }
    if ((int)v22 <= 1)
      goto LABEL_122;
    v49 = 0;
    v50 = 0;
    v51 = 0;
    if (v20)
    {
      do
      {
        v52 = v50;
        v53 = v50 + 1;
        while (v46 != v53)
        {
          v54 = vsub_f32(*(float32x2_t *)&v18[2 * v52], *(float32x2_t *)&v18[2 * v53]);
          ++v50;
          ++v53;
          if (vaddv_f32(vmul_f32(v54, v54)) >= 1.0e-10)
          {
            v55 = v50 - 1;
            *(_QWORD *)&v18[2 * v49] = *(_QWORD *)&v18[2 * v52];
            v20[v49] = v20[v52];
            if (v51 >= (int)v47)
              goto LABEL_42;
            goto LABEL_49;
          }
        }
        v55 = v46 - 1;
        v50 = v46;
        *(_QWORD *)&v18[2 * v49] = *(_QWORD *)&v18[2 * v52];
        v20[v49] = v20[v52];
        if (v51 >= (int)v47)
          goto LABEL_42;
LABEL_49:
        v56 = (int)v47 - (uint64_t)v51;
        v57 = &v23[v51];
        while (1)
        {
          v22 = *v57;
          if ((int)v22 > v55)
            break;
          *v57++ = v49;
          ++v51;
          if (!--v56)
          {
            v51 = v47;
            break;
          }
        }
LABEL_42:
        ++v49;
      }
      while (v50 < (int)v46);
    }
    else
    {
      do
      {
        v58 = v50;
        v59 = v50 + 1;
        while (v46 != v59)
        {
          v60 = vsub_f32(*(float32x2_t *)&v18[2 * v58], *(float32x2_t *)&v18[2 * v59]);
          ++v50;
          ++v59;
          if (vaddv_f32(vmul_f32(v60, v60)) >= 1.0e-10)
          {
            v61 = v50 - 1;
            *(_QWORD *)&v18[2 * v49] = *(_QWORD *)&v18[2 * v58];
            if (v51 >= (int)v47)
              goto LABEL_53;
            goto LABEL_60;
          }
        }
        v61 = v46 - 1;
        v50 = v46;
        *(_QWORD *)&v18[2 * v49] = *(_QWORD *)&v18[2 * v58];
        if (v51 >= (int)v47)
          goto LABEL_53;
LABEL_60:
        v62 = (int)v47 - (uint64_t)v51;
        v63 = &v23[v51];
        while (1)
        {
          v22 = *v63;
          if ((int)v22 > v61)
            break;
          *v63++ = v49;
          ++v51;
          if (!--v62)
          {
            v51 = v47;
            break;
          }
        }
LABEL_53:
        ++v49;
      }
      while (v50 < (int)v46);
    }
    if (v51 == (_DWORD)v47)
    {
      if ((_DWORD)v49 == -1)
        goto LABEL_69;
      LODWORD(v64) = v49;
    }
    else
    {
LABEL_122:
      LODWORD(v64) = 0;
    }
LABEL_123:
    v94 = v215;
    v95 = v216;
    v96 = v216 - v215;
    v209 = (int)v64;
    if ((int)v64 < 1)
      goto LABEL_219;
    v97 = 8 * (int)v64;
    if (v217 - (uint64_t)v216 >= v97)
    {
      if (v97 <= 0)
      {
        v106 = (float *)((char *)v18 + v97);
        v107 = &v216[-v97];
        v108 = v216;
        while (v107 < v216)
        {
          if (v108)
            *v108 = *v107;
          ++v107;
          ++v108;
        }
        v216 = v108;
        if (v95 != &v95[v97])
          v22 = (uint64_t)memmove(&v95[v97], v95, -8 * (int)v64);
        if (v106 != v18)
          v22 = (uint64_t)memmove(v95, v18, (char *)v106 - (char *)v18);
      }
      else
      {
        v102 = v216;
        v103 = 8 * (int)v64;
        v104 = v18;
        v105 = v216;
        do
        {
          if (v105)
            *v105 = *(_BYTE *)v104;
          v104 = (float *)((char *)v104 + 1);
          ++v105;
          ++v102;
          --v103;
        }
        while (v103);
        v216 = v105;
      }
    }
    else
    {
      if ((uint64_t)(v96 + v97) < 0)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v98 = 2 * (v217 - (_QWORD)v215);
      if (v98 <= v96 + v97)
        v98 = v96 + v97;
      if ((unint64_t)(v217 - (_QWORD)v215) >= 0x3FFFFFFFFFFFFFFFLL)
        v99 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v99 = v98;
      if (v99)
      {
        v100 = 8 * (int)v64;
        v101 = v99;
        v22 = (*(uint64_t (**)(geo::codec::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v218 + 16))(v218, v99, 1);
        v97 = v100;
        v96 = v216 - v215;
        v99 = v101;
        v94 = v215;
      }
      else
      {
        v22 = 0;
      }
      v109 = (char *)(v22 + v96);
      v110 = v97;
      v111 = v18;
      v112 = (_BYTE *)(v22 + v96);
      do
      {
        if (v112)
          *v112 = *(_BYTE *)v111;
        ++v112;
        v111 = (float *)((char *)v111 + 1);
        --v110;
      }
      while (v110);
      if (v215 != v216)
      {
        v113 = v216 - v215;
        if ((unint64_t)(v216 - v215) < 0x20)
        {
          v114 = v216;
          goto LABEL_160;
        }
        v114 = v216;
        if ((unint64_t)&v94[-v22] < 0x20)
          goto LABEL_258;
        v114 = &v216[-(v113 & 0xFFFFFFFFFFFFFFE0)];
        v109 -= v113 & 0xFFFFFFFFFFFFFFE0;
        v115 = (_OWORD *)(v22 + v96 - 16);
        v116 = &v94[v96 - 16];
        v117 = v113 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v118 = *(_OWORD *)v116;
          *(v115 - 1) = *((_OWORD *)v116 - 1);
          *v115 = v118;
          v115 -= 2;
          v116 -= 32;
          v117 -= 32;
        }
        while (v117);
        if (v113 != (v113 & 0xFFFFFFFFFFFFFFE0))
        {
LABEL_258:
          do
          {
LABEL_160:
            v119 = *--v114;
            *--v109 = v119;
          }
          while (v114 != v215);
        }
      }
      v120 = v22 + v99;
      v121 = v215;
      v122 = v217;
      v215 = v109;
      v216 = (char *)(v22 + v96 + v97);
      v217 = v120;
      if (v121)
        v22 = (*(uint64_t (**)(geo::codec::Allocator *, char *, uint64_t))(*(_QWORD *)v218 + 40))(v218, v121, v122 - (_QWORD)v121);
    }
    if (!*((_QWORD *)a1 + 3))
      goto LABEL_219;
    v123 = 4 * v209;
    v124 = v211;
    v125 = v212;
    v126 = v212 - v211;
    if (v213 - (uint64_t)v212 < (uint64_t)(4 * v209))
    {
      v202 = v96;
      if (v126 + v123 < 0)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v127 = 2 * (v213 - (_QWORD)v211);
      if (v127 <= v126 + v123)
        v127 = v126 + v123;
      if ((unint64_t)(v213 - (_QWORD)v211) >= 0x3FFFFFFFFFFFFFFFLL)
        v128 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v128 = v127;
      if (v128)
      {
        v129 = v128;
        v22 = (*(uint64_t (**)(geo::codec::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v214 + 16))(v214, v128, 1);
        v123 = 4 * v209;
        v128 = v129;
      }
      else
      {
        v22 = 0;
      }
      v143 = (char *)(v22 + v126);
      v144 = v123;
      v145 = v20;
      v146 = (_BYTE *)(v22 + v126);
      do
      {
        if (v146)
          *v146 = (int)*v145;
        ++v146;
        ++v145;
        --v144;
      }
      while (v144);
      if (v211 == v212)
      {
        v96 = v202;
      }
      else
      {
        v147 = v212 - v211;
        v96 = v202;
        if ((unint64_t)(v212 - v211) < 0x20)
        {
          v148 = v212;
          goto LABEL_202;
        }
        v148 = v212;
        if ((unint64_t)&v211[-v22] < 0x20)
          goto LABEL_259;
        v148 = &v212[-(v147 & 0xFFFFFFFFFFFFFFE0)];
        v143 -= v147 & 0xFFFFFFFFFFFFFFE0;
        v149 = (_OWORD *)(v22 + v126 - 16);
        v150 = (__int128 *)(v212 - 16);
        v151 = v147 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v152 = *v150;
          *(v149 - 1) = *(v150 - 1);
          *v149 = v152;
          v149 -= 2;
          v150 -= 2;
          v151 -= 32;
        }
        while (v151);
        if (v147 != (v147 & 0xFFFFFFFFFFFFFFE0))
        {
LABEL_259:
          do
          {
LABEL_202:
            v153 = *--v148;
            *--v143 = v153;
          }
          while (v148 != v211);
        }
      }
      v154 = v22 + v128;
      v155 = v211;
      v156 = v213;
      v211 = v143;
      v212 = (char *)(v22 + v126 + v123);
      v213 = v154;
      if (v155)
        v22 = (*(uint64_t (**)(geo::codec::Allocator *, char *, uint64_t))(*(_QWORD *)v214 + 40))(v214, v155, v156 - (_QWORD)v155);
      goto LABEL_219;
    }
    if (v123 > 0)
    {
      v130 = 16 * v209;
      v131 = v212;
      v132 = v20;
      v133 = v212;
      do
      {
        if (v133)
          *v133 = (int)*v132;
        ++v132;
        ++v133;
        ++v131;
        v130 -= 4;
      }
      while (v130);
      v212 = v133;
      goto LABEL_219;
    }
    v134 = &v20[4 * v209];
    v135 = v212;
    v136 = v212;
    v137 = &v212[-v123];
    v138 = v212;
    while (v137 < v212)
    {
      if (v138)
        *v138 = *v137;
      ++v137;
      ++v138;
    }
    v139 = &v212[v123];
    v212 = v138;
    if (v136 != &v125[v123])
    {
      v22 = (uint64_t)memmove(&v136[-(v135 - v139)], v125, v135 - v139);
      v134 = &v20[4 * v209];
      v124 = v211;
    }
    v140 = (char *)v134 - (char *)v20;
    if (v134 != v20)
    {
      v141 = v140 - 4;
      if ((unint64_t)(v140 - 4) < 0x1C)
      {
        v142 = v20;
        goto LABEL_218;
      }
      if (v125 < (char *)v20 + (v141 & 0xFFFFFFFFFFFFFFFCLL) + 4)
      {
        v142 = v20;
        if (v20 < (float *)&v125[(v141 >> 2) + 1])
          goto LABEL_218;
      }
      v157 = (v141 >> 2) + 1;
      if (v141 < 0x7C)
      {
        v158 = 0;
        goto LABEL_213;
      }
      v158 = v157 & 0x7FFFFFFFFFFFFFE0;
      v159 = (float32x4_t *)(v20 + 16);
      v160 = (int8x16_t *)&v124[v126 + 16];
      v161 = v157 & 0x7FFFFFFFFFFFFFE0;
      do
      {
        v220.val[3] = (int8x16_t)vcvtq_u32_f32(v159[-1]);
        v220.val[2] = (int8x16_t)vcvtq_u32_f32(v159[-2]);
        v220.val[1] = (int8x16_t)vcvtq_u32_f32(v159[-3]);
        v220.val[0] = (int8x16_t)vcvtq_u32_f32(v159[-4]);
        v162 = vqtbl4q_s8(v220, v196);
        v220.val[3] = (int8x16_t)vcvtq_u32_f32(v159[3]);
        v220.val[2] = (int8x16_t)vcvtq_u32_f32(v159[2]);
        v220.val[1] = (int8x16_t)vcvtq_u32_f32(v159[1]);
        v220.val[0] = (int8x16_t)vcvtq_u32_f32(*v159);
        v160[-1] = v162;
        *v160 = vqtbl4q_s8(v220, v196);
        v159 += 8;
        v160 += 2;
        v161 -= 32;
      }
      while (v161);
      if (v157 == v158)
        goto LABEL_219;
      if ((v157 & 0x18) != 0)
      {
LABEL_213:
        v142 = &v20[v157 & 0x7FFFFFFFFFFFFFF8];
        v163 = (float32x4_t *)&v20[v158];
        v164 = &v125[v158];
        v165 = v158 - (v157 & 0x7FFFFFFFFFFFFFF8);
        do
        {
          v166 = *v163;
          v167 = v163[1];
          v163 += 2;
          v219.val[1] = (int8x16_t)vcvtq_u32_f32(v167);
          v219.val[0] = (int8x16_t)vcvtq_u32_f32(v166);
          *(_QWORD *)v164 = vqtbl2q_s8(v219, (int8x16_t)xmmword_189CFC5D0).u64[0];
          v164 += 8;
          v165 += 8;
        }
        while (v165);
        v125 += v157 & 0x7FFFFFFFFFFFFFF8;
        if (v157 == (v157 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_219;
      }
      else
      {
        v142 = &v20[v158];
        v125 += v158;
      }
      do
      {
LABEL_218:
        v168 = *v142++;
        *v125++ = (int)v168;
      }
      while (v142 != v134);
    }
LABEL_219:
    v169 = (unint64_t *)((char *)v206 + 16 * v208);
    *v169 = v96 >> 3;
    v169[1] = v209;
    if (v204)
      v22 = (uint64_t)memcpy((void *)(v204 + 4 * v207), v23, 4 * *(_QWORD *)v210);
    v41 = *(_QWORD *)v210 + v207;
    v40 = v208 + 1;
    if (v208 + 1 != v203)
      continue;
    break;
  }
  a7 = v197;
  a8 = v198;
  v26 = v204;
LABEL_222:
  a2[4] = v206;
  v170 = geo::codec::Allocator::instance((geo::codec::Allocator *)v22);
  v171 = (void *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v170 + 16))(v170, v216 - v215, 8);
  a2[1] = v171;
  v172 = (geo::codec::Allocator *)memcpy(v171, v215, v216 - v215);
  a2[2] = (unint64_t)(v216 - v215) >> 3;
  if (*((_QWORD *)a1 + 3))
  {
    v173 = geo::codec::Allocator::instance(v172);
    v174 = (void *)(*(uint64_t (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v173 + 16))(v173, v212 - v211, 8);
    a2[3] = v174;
    v172 = (geo::codec::Allocator *)memcpy(v174, v211, v212 - v211);
  }
  if (a6 && *(_QWORD *)a6 && v26)
  {
    v175 = geo::codec::Allocator::instance(v172);
    **(_QWORD **)(a6 + 16) = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v175 + 24))(v175, *(_QWORD *)a6, 16);
    v176 = (geo::codec::Allocator *)memcpy(**(void ***)(a6 + 16), *(const void **)(a6 + 8), 16 * *(_QWORD *)a6);
    v177 = geo::codec::Allocator::instance(v176);
    v178 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v177 + 24))(v177, *(_QWORD *)a6, 8);
    **(_QWORD **)(a6 + 24) = v178;
    v179 = *(_QWORD *)a6;
    if (*(_QWORD *)a6)
    {
      v180 = 0;
      v181 = v178;
      v182 = *(_QWORD *)a6;
      do
      {
        v183 = **(_QWORD **)(a6 + 16) + v180;
        *(_DWORD *)(v183 + 12) = *(_DWORD *)(v26 + 4 * *(unsigned int *)(v183 + 12));
        *v181++ = v183;
        v180 += 16;
        --v182;
      }
      while (v182);
    }
    qsort(v178, v179, 8uLL, (int (__cdecl *)(const void *, const void *))geo::codec::compare);
  }
  if (a7)
  {
    v184 = *a7;
    if (*a7)
    {
      if (v26)
      {
        v185 = (_DWORD *)(a7[1] + 12);
        do
        {
          *v185 = *(_DWORD *)(v26 + 4 * *v185);
          v185 += 25;
          --v184;
        }
        while (v184);
      }
    }
  }
  if (a8)
  {
    v186 = *a8;
    if (*a8 && v26 != 0)
    {
      v188 = (_DWORD *)(a8[1] + 8);
      do
      {
        *v188 = *(_DWORD *)(v26 + 4 * *v188);
        v188 += 4;
        --v186;
      }
      while (v186);
    }
  }
  v189 = geo::codec::Allocator::instance(v172);
  v190 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _DWORD *, _QWORD))(*(_QWORD *)v189 + 40))(v189, v23, 0);
  v191 = geo::codec::Allocator::instance(v190);
  v192 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, float *, _QWORD))(*(_QWORD *)v191 + 40))(v191, v18, 0);
  if (v20)
  {
    v193 = geo::codec::Allocator::instance(v192);
    v192 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, float *, _QWORD))(*(_QWORD *)v193 + 40))(v193, v20, 0);
  }
  if (v199 && v26)
  {
    *v199 = v26;
  }
  else
  {
    v194 = geo::codec::Allocator::instance(v192);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v194 + 40))(v194, v26, 0);
  }
  v8 = 1;
  if (v211)
    (*(void (**)(geo::codec::Allocator *, char *, uint64_t))(*(_QWORD *)v214 + 40))(v214, v211, v213 - (_QWORD)v211);
LABEL_251:
  if (v215)
    (*(void (**)(geo::codec::Allocator *, char *, uint64_t))(*(_QWORD *)v218 + 40))(v218, v215, v217 - (_QWORD)v215);
  return v8;
}

void sub_189AE96F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;

  MEMORY[0x18D76437C](v30, 0x10F1C40DA10AB66);
  std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::~vector[abi:ne180100](&a30);
  std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v31 - 136));
  _Unwind_Resume(a1);
}

void sub_189AE9760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;

  std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::~vector[abi:ne180100](&a30);
  std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v30 - 136));
  _Unwind_Resume(a1);
}

_OWORD *_ZNSt3__111make_sharedB8ne180100I22FeatureStyleAttributesJEvEENS_10shared_ptrIT_EEDpOT0_@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  _OWORD *result;
  __int128 v4;

  v2 = (char *)operator new(0x40uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E1BFB2F8;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_DWORD *)(v2 + 55) = 0;
  result = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  *((_QWORD *)v2 + 3) = result;
  if (result)
  {
    *(_QWORD *)&v4 = -1;
    *((_QWORD *)&v4 + 1) = -1;
    result[14] = v4;
    result[15] = v4;
    result[12] = v4;
    result[13] = v4;
    result[10] = v4;
    result[11] = v4;
    result[8] = v4;
    result[9] = v4;
    result[6] = v4;
    result[7] = v4;
    result[4] = v4;
    result[5] = v4;
    result[2] = v4;
    result[3] = v4;
    *result = v4;
    result[1] = v4;
  }
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_189AE985C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  shared_weak_owners = (std::__shared_weak_count *)v1[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void std::stable_sort[abi:ne180100]<GeoCodecsGhostPoint *,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0>(char *a1, char *a2)
{
  unint64_t v4;
  const std::nothrow_t *v5;
  unint64_t v6;
  __int128 *v7;
  BOOL v8;
  __int128 *v9;

  v4 = (a2 - a1) >> 5;
  if (a2 - a1 <= 4096)
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(a1, a2, v4, 0, 0);
  }
  else
  {
    v5 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v6 = (a2 - a1) >> 5;
    while (1)
    {
      v7 = (__int128 *)operator new(32 * v6, v5);
      if (v7)
        break;
      v8 = v6 > 1;
      v6 >>= 1;
      if (!v8)
        goto LABEL_5;
    }
    v9 = v7;
    std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(a1, a2, v4, v7, v6);
    operator delete(v9);
  }
}

geo::codec::Allocator *geo::codec::freeChapter(geo::codec::Allocator *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if (result && a2)
  {
    if (*(_BYTE *)a2)
    {
      v3 = geo::codec::Allocator::instance(result);
      result = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a2 + 40), 0);
    }
    v4 = geo::codec::Allocator::instance(result);
    return (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a2, 0);
  }
  return result;
}

uint64_t geo::codec::accumulateStyleAttributes(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  int v23;
  unsigned __int8 v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;

  v64 = 0;
  v65 = 0;
  v62 = 0;
  v63 = 0;
  v61 = 0;
  v8 = *a2;
  if (v8)
  {
    geo::codec::copyFeatureStyleAttributes(&v59, v8);
    v10 = v59;
    v9 = (char *)v60;
  }
  else
  {
    v9 = (char *)operator new(0x40uLL);
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = &off_1E1BFB2F8;
    *(_OWORD *)(v9 + 24) = 0u;
    v10 = (uint64_t)(v9 + 24);
    *(_OWORD *)(v9 + 40) = 0u;
    *(_DWORD *)(v9 + 55) = 0;
    v11 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
    *((_QWORD *)v9 + 3) = v11;
    if (v11)
    {
      *(_QWORD *)&v12 = -1;
      *((_QWORD *)&v12 + 1) = -1;
      v11[14] = v12;
      v11[15] = v12;
      v11[12] = v12;
      v11[13] = v12;
      v11[10] = v12;
      v11[11] = v12;
      v11[8] = v12;
      v11[9] = v12;
      v11[6] = v12;
      v11[7] = v12;
      v11[4] = v12;
      v11[5] = v12;
      v11[2] = v12;
      v11[3] = v12;
      *v11 = v12;
      v11[1] = v12;
    }
  }
  v63 = v10;
  v64 = (std::__shared_weak_count *)v9;
  if (!geo::codec::chapterReadVarUint32(a3, (unsigned int *)&v65 + 1))
    goto LABEL_31;
  v13 = HIDWORD(v65);
  if (HIDWORD(v65))
  {
    v14 = 0;
    do
    {
      v58 = 0;
      LODWORD(v59) = 0;
      if (!geo::codec::chapterReadVarUint32(a3, (unsigned int *)&v59)
        || !geo::codec::chapterReadVarUint32(a3, &v58))
      {
        goto LABEL_31;
      }
      v15 = v58;
      v16 = *(unsigned __int8 *)(v10 + 33);
      v17 = *(_DWORD **)v10;
      if (*(_BYTE *)(v10 + 33))
      {
        v18 = *(unsigned __int8 *)(v10 + 33);
        v19 = v17 + 1;
        v20 = v18;
        do
        {
          if (*(v19 - 1) == (_DWORD)v59)
          {
            *v19 = v58;
            goto LABEL_9;
          }
          v19 += 2;
          --v20;
        }
        while (v20);
        if (v16 > 0x1F)
          continue;
      }
      else
      {
        v18 = 0;
      }
      v21 = &v17[2 * v18];
      *v21 = v59;
      v21[1] = v15;
      *(_BYTE *)(v10 + 33) = v16 + 1;
LABEL_9:
      ;
    }
    while (++v14 != v13);
  }
  if (!geo::codec::chapterReadVarUint32(a3, (unsigned int *)&v65))
    goto LABEL_31;
  v22 = v65;
  if ((_DWORD)v65)
  {
    v23 = 0;
    while (1)
    {
      LODWORD(v59) = 0;
      if ((geo::codec::chapterReadVarUint32(a3, (unsigned int *)&v59) & 1) == 0)
        break;
      if (*(_BYTE *)(v10 + 33))
      {
        v25 = *(_DWORD **)v10;
        v26 = *(unsigned __int8 *)(v10 + 33);
        v27 = *(_DWORD **)v10;
        while (*v27 != (_DWORD)v59)
        {
          v27 += 2;
          if (!--v26)
            goto LABEL_24;
        }
        v24 = *(_BYTE *)(v10 + 33) - 1;
        *(_BYTE *)(v10 + 33) = v24;
        *(_QWORD *)v27 = *(_QWORD *)&v25[2 * v24];
        *(_QWORD *)(*(_QWORD *)v10 + 8 * *(unsigned __int8 *)(v10 + 33)) = -1;
      }
LABEL_24:
      if (++v23 == v22)
        goto LABEL_43;
    }
LABEL_31:
    v28 = 0;
    goto LABEL_32;
  }
LABEL_43:
  qsort(*(void **)v10, *(unsigned __int8 *)(v10 + 33), 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
  v59 = v10;
  v60 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v36 = (unint64_t *)(v9 + 8);
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v38 = FeatureStyleAttributesSet::insert(a1, &v59);
  v40 = *v38;
  v39 = v38[1];
  if (v39)
  {
    v41 = (unint64_t *)(v39 + 8);
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  v61 = v40;
  v62 = (std::__shared_weak_count *)v39;
  v43 = v60;
  if (v60)
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
    v40 = v61;
    v39 = (uint64_t)v62;
  }
  if (v39)
  {
    v46 = (unint64_t *)(v39 + 8);
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v48 = (std::__shared_weak_count *)a2[1];
  *a2 = v40;
  a2[1] = v39;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v52 = v61;
  v51 = v62;
  if (v62)
  {
    v53 = (unint64_t *)&v62->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  v55 = *(std::__shared_weak_count **)(a4 + 32);
  *(_QWORD *)(a4 + 24) = v52;
  *(_QWORD *)(a4 + 32) = v51;
  if (!v55)
    goto LABEL_70;
  v56 = (unint64_t *)&v55->__shared_owners_;
  do
    v57 = __ldaxr(v56);
  while (__stlxr(v57 - 1, v56));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
    std::__shared_weak_count::__release_weak(v55);
    v28 = 1;
  }
  else
  {
LABEL_70:
    v28 = 1;
  }
LABEL_32:
  v29 = v62;
  if (v62)
  {
    v30 = (unint64_t *)&v62->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v64;
  if (v64)
  {
    v33 = (unint64_t *)&v64->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  return v28;
}

void sub_189AE9DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_189AE9DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::stable_sort[abi:ne180100]<GeoCodecsCharacteristicPoint *,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0>(uint64_t a1, char *a2)
{
  unint64_t v4;
  const std::nothrow_t *v5;
  unint64_t v6;
  void *v7;
  BOOL v8;
  void *v9;

  v4 = 0x8F5C28F5C28F5C29 * ((uint64_t)&a2[-a1] >> 2);
  if ((uint64_t)&a2[-a1] < 12801)
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(a1, a2, v4, 0, 0);
  }
  else
  {
    v5 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v6 = 0x8F5C28F5C28F5C29 * ((uint64_t)&a2[-a1] >> 2);
    while (1)
    {
      v7 = operator new(100 * v6, v5);
      if (v7)
        break;
      v8 = v6 > 1;
      v6 >>= 1;
      if (!v8)
        goto LABEL_5;
    }
    v9 = v7;
    std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(a1, a2, v4, (uint64_t)v7, v6);
    operator delete(v9);
  }
}

uint64_t geo::codec::compare(geo::codec *this, const void *a2, const void *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  _BOOL4 v9;

  v3 = *(_DWORD *)(*(_QWORD *)this + 4);
  v4 = *(_DWORD *)(*(_QWORD *)a2 + 4);
  if (v3 < v4)
    return 0xFFFFFFFFLL;
  if (v3 > v4)
    return 1;
  v6 = *(_DWORD *)(*(_QWORD *)this + 12);
  v7 = *(_DWORD *)(*(_QWORD *)a2 + 12);
  v8 = v6 >= v7;
  v9 = v6 > v7;
  if (v8)
    return v9;
  else
    return 0xFFFFFFFFLL;
}

BOOL geo::codec::featureStyleAttributesFind(uint64_t *a1, int a2, _DWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  unint64_t v6;
  _BOOL8 result;
  int *v8;
  int v9;

  v3 = *a1;
  if (!*a1)
    return 0;
  v4 = *(unsigned __int8 *)(v3 + 33);
  if (!*(_BYTE *)(v3 + 33))
    return 0;
  v5 = *(_DWORD **)v3;
  if (*v5 != a2)
  {
    v6 = 0;
    v8 = v5 + 2;
    while (v4 - 1 != v6)
    {
      v9 = *v8;
      v8 += 2;
      ++v6;
      if (v9 == a2)
      {
        result = v6 < v4;
        if (a3)
          goto LABEL_5;
        return result;
      }
    }
    return 0;
  }
  v6 = 0;
  result = 1;
  if (a3)
LABEL_5:
    *a3 = v5[2 * v6 + 1];
  return result;
}

uint64_t geo::codec::transitLinkPoints(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v15;

  if (*(_DWORD *)(a1 + 20))
  {
    v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (v5 && (v7 = std::__shared_weak_count::lock(v5)) != 0)
    {
      v8 = v7;
      if (*(_QWORD *)a1)
      {
        v9 = *(_QWORD *)(*(_QWORD *)a1 + 1400);
        if (v9)
        {
          v10 = (_QWORD *)(*(_QWORD *)(v9 + 32) + 16 * *(unsigned int *)(a1 + 16) + 16 * a2);
          v11 = *(_QWORD *)(v9 + 8);
          v9 = v10[1];
          v12 = v11 + 8 * *v10;
        }
        else
        {
          v12 = 0;
        }
        *a3 = v9;
      }
      else
      {
        v12 = 0;
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v8);
      }
      return v12;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    *a3 = 0;
    return 0;
  }
}

BOOL geo::codec::appendStyleAttributes(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  const FeatureStyleAttributes *v4;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  void **v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned __int8 v17;
  size_t v18;
  char *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unsigned __int8 v29;
  size_t v30;
  char *v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  _DWORD *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  char *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;

  v54 = 0;
  v55 = 0;
  v4 = *(const FeatureStyleAttributes **)a3;
  if (*(_QWORD *)a3)
  {
    v9 = (std::__shared_weak_count *)operator new(0x40uLL);
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__shared_weak_owners_ = 0;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1BFB2F8;
    v11 = (void **)&v9[1].__vftable;
    FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)&v9[1], v4);
    v54 = v9 + 1;
    v55 = v9;
    v12 = *a1;
    if (*a1)
    {
      v13 = *((unsigned __int8 *)v12 + 33);
      if (*((_BYTE *)v12 + 33))
      {
        v14 = 0;
        v15 = 0;
        v16 = *v12;
        v17 = BYTE1(v9[2].__shared_owners_);
        while (1)
        {
          v18 = v17;
          v19 = (char *)*v11;
          if (v17)
            break;
LABEL_5:
          *(_QWORD *)&v19[8 * v17] = *(_QWORD *)(v16 + 8 * v14);
          v17 = BYTE1(v9[2].__shared_owners_) + 1;
          BYTE1(v9[2].__shared_owners_) = v17;
          ++v14;
          v15 = 1;
          if (v14 == v13)
          {
            v19 = (char *)*v11;
            v18 = v17;
LABEL_22:
            qsort(v19, v18, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
            goto LABEL_23;
          }
        }
        if (v17 > 0x1Fu)
        {
          do
          {
            v22 = v17;
            v23 = v19 + 4;
            while (*(v23 - 1) != *(_DWORD *)(v16 + 8 * v14))
            {
              v23 += 2;
              if (!--v22)
                goto LABEL_16;
            }
            *v23 = *(_DWORD *)(v16 + 8 * v14 + 4);
LABEL_16:
            ++v14;
          }
          while (v14 != v13);
        }
        else
        {
          do
          {
            v20 = v17;
            v21 = v19 + 4;
            while (*(v21 - 1) != *(_DWORD *)(v16 + 8 * v14))
            {
              v21 += 2;
              if (!--v20)
                goto LABEL_5;
            }
            *v21 = *(_DWORD *)(v16 + 8 * v14++ + 4);
          }
          while (v14 != v13);
        }
        if ((v15 & 1) != 0)
          goto LABEL_22;
      }
    }
LABEL_23:
    v24 = *a2;
    if (*a2)
    {
      v25 = *((unsigned __int8 *)v24 + 33);
      if (*((_BYTE *)v24 + 33))
      {
        v26 = 0;
        v27 = 0;
        v28 = *v24;
        v29 = BYTE1(v9[2].__shared_owners_);
        while (1)
        {
          v30 = v29;
          v31 = (char *)*v11;
          if (v29)
            break;
LABEL_26:
          *(_QWORD *)&v31[8 * v29] = *(_QWORD *)(v28 + 8 * v26);
          v29 = BYTE1(v9[2].__shared_owners_) + 1;
          BYTE1(v9[2].__shared_owners_) = v29;
          ++v26;
          v27 = 1;
          if (v26 == v25)
          {
            v31 = (char *)*v11;
            v30 = v29;
LABEL_43:
            qsort(v31, v30, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
            goto LABEL_44;
          }
        }
        if (v29 > 0x1Fu)
        {
          do
          {
            v34 = v29;
            v35 = v31 + 4;
            while (*(v35 - 1) != *(_DWORD *)(v28 + 8 * v26))
            {
              v35 += 2;
              if (!--v34)
                goto LABEL_37;
            }
            *v35 = *(_DWORD *)(v28 + 8 * v26 + 4);
LABEL_37:
            ++v26;
          }
          while (v26 != v25);
        }
        else
        {
          do
          {
            v32 = v29;
            v33 = v31 + 4;
            while (*(v33 - 1) != *(_DWORD *)(v28 + 8 * v26))
            {
              v33 += 2;
              if (!--v32)
                goto LABEL_26;
            }
            *v33 = *(_DWORD *)(v28 + 8 * v26++ + 4);
          }
          while (v26 != v25);
        }
        if ((v27 & 1) != 0)
          goto LABEL_43;
      }
    }
LABEL_44:
    qsort(v9[1].__vftable, BYTE1(v9[2].__shared_owners_), 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
    v52 = (char *)&v9[1];
    v53 = v9;
    do
      v36 = __ldxr(p_shared_owners);
    while (__stxr(v36 + 1, p_shared_owners));
    v37 = FeatureStyleAttributesSet::insert(a4, (uint64_t *)&v52);
    v39 = *v37;
    v38 = v37[1];
    if (v38)
    {
      v40 = (unint64_t *)(v38 + 8);
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v42 = *(std::__shared_weak_count **)(a3 + 8);
    *(_QWORD *)a3 = v39;
    *(_QWORD *)(a3 + 8) = v38;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = v53;
    if (v53)
    {
      v46 = (unint64_t *)&v53->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = v55;
    if (v55)
    {
      v49 = (unint64_t *)&v55->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
  }
  return v4 != 0;
}

void sub_189AEA4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_189AEA4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  void *v13;

  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_189AEA4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_189AEA4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void geo::codec::transitNodeFeatureGetSystem(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a3)
    *a3 = 0;
  if (a1)
  {
    if (a1[29] > a2)
    {
      v6 = (std::__shared_weak_count *)a1[1];
      if (v6)
      {
        v7 = std::__shared_weak_count::lock(v6);
        if (v7)
        {
          v8 = v7;
          v9 = (_QWORD *)*a1;
          if (*a1)
          {
            if (a3)
            {
              v10 = *(_QWORD *)(v9[180] + 8 * (a1[28] + a2));
              v11 = v9[165];
              v12 = v9[164];
              if (v10 < 0x8E38E38E38E38E39 * ((v11 - v12) >> 3))
                *a3 = v12 + 72 * v10;
            }
          }
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
    }
  }
}

uint64_t geo::codec::unionStyleAttributes(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v7;
  char *v8;
  size_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _DWORD *v18;
  char *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  size_t v24;
  _DWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;

  v46 = 0;
  v47 = 0;
  v3 = *a1;
  if (*a1 == a1[1])
    goto LABEL_51;
  v7 = 0;
  do
  {
    v10 = *(uint64_t **)(v3 + 16 * v7);
    if (v10)
    {
      v11 = v46;
      if (v46)
      {
        v12 = *((unsigned __int8 *)v10 + 33);
        if (*((_BYTE *)v10 + 33))
        {
          v13 = 0;
          v14 = 0;
          v15 = *v10;
          v16 = *(_BYTE *)(v46 + 33);
          while (1)
          {
            v9 = v16;
            v8 = *(char **)v11;
            if (v16)
              break;
LABEL_10:
            *(_QWORD *)&v8[8 * v16] = *(_QWORD *)(v15 + 8 * v13);
            v16 = *(_BYTE *)(v11 + 33) + 1;
            *(_BYTE *)(v11 + 33) = v16;
            ++v13;
            v14 = 1;
            if (v13 == v12)
            {
              v8 = *(char **)v11;
              v9 = v16;
LABEL_4:
              qsort(v8, v9, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
              goto LABEL_5;
            }
          }
          if (v16 >= 0x20u)
          {
            do
            {
              v24 = v9;
              v25 = v8 + 4;
              while (*(v25 - 1) != *(_DWORD *)(v15 + 8 * v13))
              {
                v25 += 2;
                if (!--v24)
                  goto LABEL_27;
              }
              *v25 = *(_DWORD *)(v15 + 8 * v13 + 4);
LABEL_27:
              ++v13;
            }
            while (v13 != v12);
          }
          else
          {
            do
            {
              v17 = v16;
              v18 = v8 + 4;
              while (*(v18 - 1) != *(_DWORD *)(v15 + 8 * v13))
              {
                v18 += 2;
                if (!--v17)
                  goto LABEL_10;
              }
              *v18 = *(_DWORD *)(v15 + 8 * v13++ + 4);
            }
            while (v13 != v12);
          }
          if ((v14 & 1) != 0)
            goto LABEL_4;
        }
      }
      else
      {
        v19 = (char *)operator new(0x40uLL);
        *((_QWORD *)v19 + 2) = 0;
        *(_QWORD *)v19 = &off_1E1BFB2F8;
        *((_QWORD *)v19 + 1) = 0;
        FeatureStyleAttributes::FeatureStyleAttributes((FeatureStyleAttributes *)(v19 + 24), (const FeatureStyleAttributes *)v10);
        v20 = v47;
        v46 = v21;
        v47 = (std::__shared_weak_count *)v19;
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
      }
    }
LABEL_5:
    ++v7;
    v3 = *a1;
  }
  while (v7 < (a1[1] - *a1) >> 4);
  if (!v46)
  {
LABEL_51:
    v39 = 0;
    v40 = v47;
    if (!v47)
      return v39;
    goto LABEL_52;
  }
  qsort(*(void **)v46, *(unsigned __int8 *)(v46 + 33), 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
  v44 = v46;
  v45 = v47;
  if (v47)
  {
    v26 = (unint64_t *)&v47->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = FeatureStyleAttributesSet::insert(a3, &v44);
  v30 = *v28;
  v29 = v28[1];
  if (v29)
  {
    v31 = (unint64_t *)(v29 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = (std::__shared_weak_count *)a2[1];
  *a2 = v30;
  a2[1] = v29;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v45;
  if (v45)
  {
    v37 = (unint64_t *)&v45->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = 1;
  v40 = v47;
  if (v47)
  {
LABEL_52:
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  return v39;
}

void sub_189AEA920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_189AEA93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_189AEA950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_189AEA964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  void *v13;

  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_189AEA984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::accumulateStyleAttributeValue(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _OWORD *v12;
  size_t v13;
  size_t v14;
  _DWORD *v15;
  size_t v16;
  __int128 v17;
  _DWORD *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;

  v42 = 0;
  v43 = 0;
  v9 = *a2;
  if (v9)
  {
    geo::codec::copyFeatureStyleAttributes(&v40, v9);
    v11 = v40;
    v10 = (char *)v41;
    v42 = v40;
    v43 = v41;
    v12 = *(_OWORD **)v40;
    v13 = *(unsigned __int8 *)(v40 + 33);
    if (*(_BYTE *)(v40 + 33))
      goto LABEL_3;
LABEL_11:
    v14 = 0;
LABEL_12:
    v18 = (_DWORD *)v12 + 2 * v14;
    *v18 = a4;
    v18[1] = a5;
    v14 = v13 + 1;
    *(_BYTE *)(v11 + 33) = v13 + 1;
    goto LABEL_14;
  }
  v10 = (char *)operator new(0x40uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E1BFB2F8;
  *(_OWORD *)(v10 + 24) = 0u;
  v11 = (uint64_t)(v10 + 24);
  *(_OWORD *)(v10 + 40) = 0u;
  *(_DWORD *)(v10 + 55) = 0;
  v12 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  *((_QWORD *)v10 + 3) = v12;
  if (v12)
  {
    *(_QWORD *)&v17 = -1;
    *((_QWORD *)&v17 + 1) = -1;
    v12[14] = v17;
    v12[15] = v17;
    v12[12] = v17;
    v12[13] = v17;
    v12[10] = v17;
    v12[11] = v17;
    v12[8] = v17;
    v12[9] = v17;
    v12[6] = v17;
    v12[7] = v17;
    v12[4] = v17;
    v12[5] = v17;
    v12[2] = v17;
    v12[3] = v17;
    *v12 = v17;
    v12[1] = v17;
  }
  v42 = (uint64_t)(v10 + 24);
  v43 = (std::__shared_weak_count *)v10;
  v13 = v10[57];
  if (!v10[57])
    goto LABEL_11;
LABEL_3:
  v14 = v13;
  v15 = (_DWORD *)v12 + 1;
  v16 = v13;
  do
  {
    if (*(v15 - 1) == a4)
    {
      *v15 = a5;
      goto LABEL_14;
    }
    v15 += 2;
    --v16;
  }
  while (v16);
  if (v13 <= 0x1F)
    goto LABEL_12;
LABEL_14:
  qsort(v12, v14, 8uLL, (int (__cdecl *)(const void *, const void *))FeatureStyleAttributes::compareStylePairs);
  v40 = v11;
  v41 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v19 = (unint64_t *)(v10 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = FeatureStyleAttributesSet::insert(a1, &v40);
  v23 = *v21;
  v22 = (std::__shared_weak_count *)v21[1];
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  v26 = v41;
  if (v41)
  {
    v27 = (unint64_t *)&v41->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v22)
  {
    v29 = (unint64_t *)&v22->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = *(std::__shared_weak_count **)(a3 + 32);
  *(_QWORD *)(a3 + 24) = v23;
  *(_QWORD *)(a3 + 32) = v22;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v22)
  {
    v34 = (unint64_t *)&v22->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v36 = v43;
  if (v43)
  {
    v37 = (unint64_t *)&v43->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  return 1;
}

void sub_189AEAC1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;

  shared_weak_owners = (std::__shared_weak_count *)v11[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v16);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_189AEAC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_189AEAC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_189AEAC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_189AEACB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t geo::codec::lineArcSplineFlatten(geo::codec *this, const GeoCodecsTileCurveVertex *a2, float *a3, float *a4, int a5, float a6, float *a7, _DWORD *a8, float *a9, int *a10, int a11)
{
  uint64_t v11;
  int v13;
  float *v16;
  int v18;
  BOOL v19;
  int v20;
  int v21;
  float *v22;
  uint64_t v23;
  float32x2_t *v24;
  uint64_t v25;
  float32x2_t *v26;
  uint64_t v27;
  float *v28;
  float v29;
  float32x2_t v30;
  uint64_t v31;
  float v32;
  float *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  float *v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;
  float v47;
  float *v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  float *v52;
  float *v53;
  int v55;
  float *v57;
  _DWORD *v58;
  uint64_t v59;
  float v60;
  float v61;
  float v62;
  unint64_t v63;
  float32x2_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v11 = 0xFFFFFFFFLL;
  if (a6 > 0.0)
  {
    v13 = (int)a2;
    if (((a5 | a2 | a9) & 0x80000000) == 0)
    {
      if ((_DWORD)a2)
      {
        if ((int)a9 >= (int)a2 && (v60 = 0.0, v59 = 0, a5 >= 2))
        {
          v16 = a3;
          v18 = 0;
          *a8 = 0;
          if (a3)
            v19 = a7 == 0;
          else
            v19 = 1;
          v20 = !v19;
          if (!v19)
          {
            *a7 = *a3;
            v18 = 1;
          }
          *a4 = *(float *)this;
          a4[1] = *((float *)this + 1);
          v11 = 2;
          if ((int)a2 >= 2)
          {
            v21 = 1;
            v57 = a7;
            v58 = a8;
            v55 = v20;
            do
            {
              v23 = v21;
              v24 = (float32x2_t *)((char *)this + 12 * v21);
              if (v24[1].i8[0])
              {
                v25 = v21 + 1;
                if (v21 + 1 >= v13)
                  return 0;
                v26 = (float32x2_t *)((char *)this + 12 * v25);
                if (v26[1].i8[0])
                {
                  v27 = (int)v11 - 2;
                  v28 = &a4[v27];
                  v29 = a4[(int)v11 - 1];
                  v61 = *v28;
                  v62 = v29;
                  v30 = vmul_f32(vadd_f32(*v26, *v24), (float32x2_t)0x3F0000003F000000);
                  v63 = (unint64_t)*v24;
                  v64 = v30;
                  v31 = v18 - 1;
                  if (v20)
                  {
                    v32 = v16[v21];
                    *(float *)&v59 = a7[v31];
                    *((float *)&v59 + 1) = v32;
                    v60 = (float)(v16[v25] + v32) * 0.5;
                  }
                  if (a7)
                    v33 = &a7[v31];
                  else
                    v33 = 0;
                  v34 = geo::codec::quadraticBezierFlatten((geo::codec *)&v61, (const float *)&v59, v28, a6, (float *)(a5 - v27), v33, a7);
                  if (v34 == -1)
                    return 0xFFFFFFFFLL;
                  a7 = v57;
                  a8 = v58;
                  v58[v21] = (int)v11 >> 1;
                  v11 = (v27 + v34);
                  if (v34 >= 0)
                    v35 = v34;
                  else
                    v35 = v34 + 1;
                  v18 = v31 + (v35 >> 1);
                  v16 = a3;
                  v20 = v55;
                }
                else
                {
                  v36 = (int)v11 - 2;
                  v37 = &a4[v36];
                  v38 = v24->f32[0];
                  v39 = v24->f32[1];
                  v40 = a4[(int)v11 - 1];
                  v41 = (float)((float)(v24->f32[0] - *v37) * (float)(v24->f32[0] - *v37))
                      + (float)((float)(v39 - v40) * (float)(v39 - v40));
                  if (v41 <= 1.0e-20
                    || (v43 = v26->f32[0],
                        v42 = v26->f32[1],
                        v44 = (float)((float)(v38 - v26->f32[0]) * (float)(v38 - v26->f32[0]))
                            + (float)((float)(v39 - v42) * (float)(v39 - v42)),
                        v44 <= 1.0e-20))
                  {
                    v50 = v11 + 2;
                    if ((int)v11 + 2 > a5)
                      return 0xFFFFFFFFLL;
                    a8[v23] = (int)v11 >> 1;
                    if (v20)
                    {
                      a7[v18++] = v16[v23];
                      v38 = v24->f32[0];
                    }
                    v52 = &a4[(int)v11];
                    *v52 = v38;
                    v52[1] = v24->f32[1];
                  }
                  else
                  {
                    v45 = sqrtf(fminf(v41, v44) / v44);
                    v61 = *v37;
                    v62 = v40;
                    v63 = __PAIR64__(LODWORD(v39), LODWORD(v38));
                    v64.f32[0] = v38 + (float)(v45 * (float)(v43 - v38));
                    v64.f32[1] = v39 + (float)(v45 * (float)(v42 - v39));
                    v46 = v18 - 1;
                    if (v20)
                    {
                      v47 = v16[v23];
                      *(float *)&v59 = a7[v46];
                      *((float *)&v59 + 1) = v47;
                      v60 = v47 + (float)((float)(v16[v25] - v47) * v45);
                    }
                    if (a7)
                      v48 = &a7[v46];
                    else
                      v48 = 0;
                    v49 = geo::codec::quadraticBezierFlatten((geo::codec *)&v61, (const float *)&v59, v37, a6, (float *)(a5 - v36), v48, a7);
                    if (v49 == -1)
                      return 0xFFFFFFFFLL;
                    a7 = v57;
                    a8 = v58;
                    v58[v23] = (int)v11 >> 1;
                    v50 = v36 + v49;
                    if (v49 >= 0)
                      v51 = v49;
                    else
                      v51 = v49 + 1;
                    v18 = v46 + (v51 >> 1);
                    v16 = a3;
                    v20 = v55;
                  }
                  v11 = (v50 + 2);
                  if ((int)v11 > a5)
                    return 0xFFFFFFFFLL;
                  a8[v25] = v50 >> 1;
                  if (v20)
                    a7[v18++] = v16[v25];
                  v53 = &a4[v50];
                  *v53 = v26->f32[0];
                  v53[1] = v26->f32[1];
                  v21 = v23 + 1;
                }
              }
              else
              {
                if ((int)v11 + 2 > a5)
                  return 0xFFFFFFFFLL;
                a8[v21] = (int)v11 >> 1;
                if (v20)
                  a7[v18++] = v16[v21];
                v22 = &a4[(int)v11];
                *v22 = v24->f32[0];
                v22[1] = v24->f32[1];
                v11 = (v11 + 2);
              }
              ++v21;
            }
            while (v21 < v13);
          }
        }
        else
        {
          return 0xFFFFFFFFLL;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return v11;
}

uint64_t geo::codec::quadraticBezierFlatten(geo::codec *this, const float *a2, float *a3, float a4, float *a5, float *a6, float *a7)
{
  float *v7;
  float *v9;
  __int128 v10;
  float *v11;
  int v12;
  float v13;
  uint64_t v14;
  const float *v15;
  float *v16;
  BOOL v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  int v26;
  float *v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  int v42;
  float *v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  int i;

  if (a4 <= 0.0 || (a5 & 0x80000000) != 0)
    return -1;
  v7 = &a6[a5 >> 1];
  if (!a6)
    v7 = 0;
  if (a5 < 2)
    return -1;
  *a3 = *(float *)this;
  a3[1] = *((float *)this + 1);
  if (a6)
    *a6++ = *a2;
  if (a5 < 8)
    return -1;
  v9 = a3 + 2;
  v10 = *(_OWORD *)this;
  v11 = &a3[a5 - 6];
  *((_QWORD *)v11 + 2) = *((_QWORD *)this + 2);
  *(_OWORD *)v11 = v10;
  if (v7)
  {
    v12 = *((_DWORD *)a2 + 2);
    *(_QWORD *)(v7 - 3) = *(_QWORD *)a2;
    v7 -= 3;
    *((_DWORD *)v7 + 2) = v12;
  }
  v13 = 1.0 / a4;
  do
  {
    v18 = v11[2];
    v19 = v11[3];
    v21 = v11[4];
    v20 = v11[5];
    v22 = *v11;
    v23 = v11[1];
    v24 = (float)(v21 - (float)(v18 + v18)) + *v11;
    v25 = (float)(v20 - (float)(v19 + v19)) + v23;
    v26 = vcvtps_s32_f32(sqrtf(fmaxf(fmaxf(fabsf(v24), fabsf(v25)) * (float)(0.35355 * v13), 1.0)));
    if (v26 > 64)
    {
      v15 = v11 - 6;
      if (v11 - 6 < v9)
        return -1;
      v44 = (float)(v22 + v18) * 0.5;
      v45 = (float)(v23 + v19) * 0.5;
      v46 = (float)(v18 + v21) * 0.5;
      v47 = (float)(v19 + v20) * 0.5;
      v48 = (float)(v44 + v46) * 0.5;
      *(v11 - 6) = v22;
      *(v11 - 5) = v23;
      *(v11 - 4) = v44;
      *(v11 - 3) = v45;
      v49 = (float)(v45 + v47) * 0.5;
      *(v11 - 2) = v48;
      *(v11 - 1) = v49;
      *v11 = v48;
      v11[1] = v49;
      v11[2] = v46;
      v11[3] = v47;
      if (v7)
      {
        v50 = *v7;
        v51 = v7[1];
        v52 = (float)(v51 + *v7) * 0.5;
        v53 = (float)(v7[2] + v51) * 0.5;
        v54 = (float)(v53 + v52) * 0.5;
        *(v7 - 2) = v52;
        *(v7 - 1) = v54;
        *v7 = v54;
        v7[1] = v53;
        *(v7 - 3) = v50;
        v7 -= 3;
      }
    }
    else
    {
      v27 = &v9[2 * v26];
      if (v27 > v11)
        return -1;
      v28 = 1.0 / (float)v26;
      v29 = v28 * v28;
      v30 = (float)(v28 * v28) * v24;
      v31 = (float)(v28 * v28) * v25;
      v32 = v28 + v28;
      v33 = v30 + (float)((float)(v28 + v28) * (float)(v18 - v22));
      v34 = v31 + (float)((float)(v28 + v28) * (float)(v19 - v23));
      v35 = v30 + v30;
      v36 = v31 + v31;
      if (v7)
      {
        if (v26)
        {
          v37 = *v7;
          v38 = v7[1];
          v39 = (float)((float)(*v7 - (float)(v38 + v38)) + v7[2]) * v29;
          v40 = v39 + v39;
          v41 = v39 + (float)((float)(v38 - *v7) * v32);
          v42 = v26;
          v43 = a6;
          do
          {
            v22 = v22 + v33;
            v23 = v23 + v34;
            v33 = v33 + v35;
            v34 = v34 + v36;
            *v9 = v22;
            v9[1] = v23;
            v9 += 2;
            v37 = v37 + v41;
            v41 = v41 + v40;
            *v43++ = v37;
            --v42;
          }
          while (v42);
        }
      }
      else
      {
        for (i = v26; i; --i)
        {
          v22 = v22 + v33;
          v23 = v23 + v34;
          v33 = v33 + v35;
          v34 = v34 + v36;
          *v9 = v22;
          v9[1] = v23;
          v9 += 2;
        }
      }
      v14 = v26;
      v15 = v11 + 6;
      v16 = &a6[v14];
      v17 = a6 == 0;
      if (a6)
        a6 = v16;
      else
        a6 = 0;
      if (!v17)
        v7 += 3;
      v9 = v27;
    }
    v11 = (float *)v15;
  }
  while (v15 != &a3[a5]);
  return v9 - a3;
}

_QWORD *geo::codec::multiSectionFeaturePoints(_QWORD *result, unint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (!result)
    goto LABEL_8;
  v5 = result;
  if (*((unsigned int *)result + 25) <= a2)
  {
LABEL_9:
    result = 0;
    *a3 = 0;
    return result;
  }
  result = geo::codec::vertexPoolForFeature((uint64_t)result);
  if (!result)
  {
LABEL_8:
    *a3 = 0;
    return result;
  }
  v6 = result[4];
  if (v6)
  {
    v7 = *((unsigned int *)v5 + 24) + a2;
    if (result[5] > v7)
    {
      v8 = *(_QWORD *)(v6 + 16 * v7);
      if (v8 < result[2])
      {
        result = (_QWORD *)(result[1] + 8 * v8);
        *a3 = *(_QWORD *)(v6 + 16 * v7 + 8);
        return result;
      }
    }
    goto LABEL_9;
  }
  return 0;
}

_QWORD *geo::codec::multiSectionFeaturePointsWithElevation(_QWORD *result, unint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v6;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!result)
  {
    v8 = 0;
    goto LABEL_13;
  }
  v6 = result;
  if (*((unsigned int *)result + 25) <= a2)
    goto LABEL_11;
  result = geo::codec::vertexPoolForFeature((uint64_t)result);
  v8 = result;
  if (!result)
  {
LABEL_13:
    *a4 = v8;
    return result;
  }
  v9 = result[4];
  if (!v9)
    return 0;
  v10 = *((unsigned int *)v6 + 24) + a2;
  if (result[5] <= v10 || (v11 = *(_QWORD *)(v9 + 16 * v10), v11 >= result[2]))
  {
LABEL_11:
    result = 0;
    *a4 = 0;
    return result;
  }
  result = (_QWORD *)(result[1] + 8 * v11);
  if (a3)
  {
    v12 = v8[3];
    if (v12)
    {
      *a3 = v12 + 4 * v11;
      v9 = v8[4];
    }
  }
  *a4 = *(_QWORD *)(v9 + 16 * v10 + 8);
  return result;
}

void geo::codec::featureGetNativeLabel(uint64_t a1, unint64_t a2, _QWORD *a3, _QWORD *a4)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (a1)
  {
    v7 = *(std::__shared_weak_count **)(a1 + 8);
    if (v7)
    {
      v9 = std::__shared_weak_count::lock(v7);
      if (v9 && *(unsigned __int8 *)(a1 + 73) > a2 && *(_QWORD *)a1)
      {
        v10 = *(unsigned int *)(a1 + 56) + a2;
        v11 = *(_QWORD *)(*(_QWORD *)a1 + 1048);
        if (a3)
          *a3 = *(_QWORD *)(v11 + 24 * v10);
        if (!a4)
        {
LABEL_17:
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
          return;
        }
        v12 = *(_QWORD *)(v11 + 24 * v10 + 8);
        goto LABEL_15;
      }
    }
    else
    {
      v9 = 0;
    }
    if (a3)
      *a3 = 0;
    if (!a4)
    {
LABEL_16:
      if (!v9)
        return;
      goto LABEL_17;
    }
    v12 = 0;
LABEL_15:
    *a4 = v12;
    goto LABEL_16;
  }
}

void geo::codec::featureGetNativeShield(uint64_t a1, unint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  if (a1)
  {
    v9 = *(std::__shared_weak_count **)(a1 + 8);
    if (v9)
    {
      v11 = std::__shared_weak_count::lock(v9);
      if (v11 && *(unsigned __int8 *)(a1 + 72) > a2 && *(_QWORD *)a1)
      {
        v12 = *(unsigned int *)(a1 + 60) + a2;
        v13 = *(_QWORD *)(*(_QWORD *)a1 + 1064);
        v14 = (_QWORD *)(v13 + 32 * v12);
        if (a3)
          *a3 = *v14;
        if (a5)
          *a5 = v14[1];
        if (a4)
          *a4 = *(_QWORD *)(v13 + 32 * v12 + 24);
LABEL_20:
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        return;
      }
    }
    else
    {
      v11 = 0;
    }
    if (a3)
      *a3 = 0;
    if (a4)
      *a4 = 0;
    if (a5)
      *a5 = 0;
    if (v11)
      goto LABEL_20;
  }
}

_QWORD *geo::codec::vectorTileGetLocalizedLabel(_QWORD *result, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5, unint64_t *a6)
{
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  BOOL v15;
  const void *v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t __key;

  if (a4 < a2
    && (v8 = (_QWORD *)*result) != 0
    && (v9 = (unint64_t *)(v8[131] + 24 * (a4 + a3)), (v10 = *v9) != 0))
  {
    v11 = v9[1];
    v12 = v8[107];
    v13 = v8[108];
    if (v12 <= v10)
    {
      v14 = v13 >= v10;
      v15 = v13 == v10;
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
    if (v15 || !v14)
      goto LABEL_21;
    v16 = (const void *)v8[135];
    v17 = v8[136];
    __key = v10 - v12;
    result = bsearch(&__key, v16, (v17 - (uint64_t)v16) >> 5, 0x20uLL, (int (__cdecl *)(const void *, const void *))geo::codec::compareSearchingLocalizationTableEntries);
    if (!result)
      goto LABEL_21;
    v18 = result[1];
    if (v18 == -1)
      goto LABEL_21;
    v19 = v8 + 127;
    v20 = 127;
    if ((result[3] & 1) == 0)
    {
      v20 = 113;
      v19 = v8 + 113;
    }
    v21 = v8[v20];
    if (v18 < v19[1] - v21 && v21)
    {
      v11 = result[2];
      if (a5)
        *a5 = v21 + v18;
    }
    else
    {
LABEL_21:
      if (a5)
        *a5 = v10;
    }
    if (a6)
      goto LABEL_24;
  }
  else
  {
    if (a5)
      *a5 = 0;
    if (a6)
    {
      v11 = 0;
LABEL_24:
      *a6 = v11;
    }
  }
  return result;
}

void geo::codec::featureGetLocalizedLabel(uint64_t *a1, unint64_t a2, unint64_t *a3, unint64_t *a4)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  if (a1)
  {
    v12 = 0;
    v13 = 0;
    v8 = (std::__shared_weak_count *)a1[1];
    if (v8)
    {
      v9 = std::__shared_weak_count::lock(v8);
      v13 = v9;
      if (v9)
        v12 = *a1;
    }
    else
    {
      v9 = 0;
    }
    geo::codec::vectorTileGetLocalizedLabel(&v12, *((unsigned __int8 *)a1 + 73), *((unsigned int *)a1 + 14), a2, a3, a4);
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_189AEB924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void geo::codec::featureGetLocalizedShield(uint64_t a1, unint64_t a2, unint64_t *a3, _QWORD *a4, _QWORD *a5)
{
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  unint64_t v21;
  const void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t __key;

  if (!a1)
    goto LABEL_33;
  v9 = *(std::__shared_weak_count **)(a1 + 8);
  if (v9)
  {
    v11 = std::__shared_weak_count::lock(v9);
    if (v11 && *(unsigned __int8 *)(a1 + 72) > a2 && *(_QWORD *)a1)
    {
      v12 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)a1 + 1064) + 32 * (*(unsigned int *)(a1 + 60) + a2));
      v13 = *v12;
      v14 = (_QWORD *)v12[1];
      if (a4)
        *a4 = v12[3];
      goto LABEL_13;
    }
  }
  else
  {
    v11 = 0;
  }
  if (a4)
    *a4 = 0;
  if (!v11)
    goto LABEL_33;
  v13 = 0;
  v14 = 0;
LABEL_13:
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (v16)
  {
    if (v13)
    {
LABEL_17:
      v17 = *(std::__shared_weak_count **)(a1 + 8);
      if (v17)
      {
        v18 = std::__shared_weak_count::lock(v17);
        if (v18)
        {
          v19 = v18;
          v20 = *(_QWORD **)a1;
          if (v20)
          {
            v21 = v20[107];
            if (v21 > v13 || v20[108] <= v13)
              goto LABEL_37;
            v23 = (const void *)v20[135];
            v24 = v20[136];
            __key = v13 - v21;
            v25 = bsearch(&__key, v23, (v24 - (uint64_t)v23) >> 5, 0x20uLL, (int (__cdecl *)(const void *, const void *))geo::codec::compareSearchingLocalizationTableEntries);
            if (!v25)
              goto LABEL_37;
            v26 = v25[1];
            if (v26 == -1)
              goto LABEL_37;
            v27 = v20 + 127;
            v28 = 127;
            if ((v25[3] & 1) == 0)
            {
              v28 = 113;
              v27 = v20 + 113;
            }
            v29 = v20[v28];
            if (v26 < v27[1] - v29 && v29)
            {
              v20 = (_QWORD *)v25[2];
              v30 = v29 + v26;
            }
            else
            {
LABEL_37:
              v30 = 0;
              v20 = 0;
            }
          }
          else
          {
            v30 = 0;
          }
          v31 = (unint64_t *)&v19->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
          if (v30)
          {
            if (a3)
              *a3 = v30;
            if (!a5)
              return;
LABEL_51:
            *a5 = v20;
            return;
          }
        }
      }
      if (a3)
        *a3 = v13;
      v20 = v14;
      if (a5)
        goto LABEL_51;
      return;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (v13)
      goto LABEL_17;
  }
LABEL_33:
  if (a3)
    *a3 = 0;
  if (a5)
  {
    v20 = 0;
    goto LABEL_51;
  }
}

void sub_189AEBB58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::readMaterial(_QWORD *a1, uint64_t *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  geo::codec::Allocator *v33;
  uint64_t *v34;
  uint64_t v35;
  geo::codec::Allocator *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;

  v4 = a1;
  if (!a3)
    goto LABEL_8;
  v5 = a1[6];
  if ((unint64_t)(v5 + 2) > a1[7])
    return 0;
  *((_WORD *)a2 + 9) = *(_WORD *)(a1[5] + v5);
  a1[6] = v5 + 2;
  v6 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  a1 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, 8 * *((unsigned __int16 *)a2 + 9), 8);
  a2[1] = (uint64_t)a1;
  v7 = *((unsigned __int16 *)a2 + 9);
  if (*((_WORD *)a2 + 9))
  {
    v9 = v4[6];
    v8 = v4[7];
    v10 = (_DWORD *)a1 + 1;
    while (v9 + 2 <= v8)
    {
      v11 = v4[5];
      v12 = *(unsigned __int16 *)(v11 + v9);
      v4[6] = v9 + 2;
      v13 = v9 + 6;
      if (v9 + 6 > v8)
        break;
      v14 = *(_DWORD *)(v11 + v9 + 2);
      v4[6] = v13;
      *(v10 - 1) = v12;
      *v10 = v14;
      v10 += 2;
      v9 = v13;
      if (!--v7)
        goto LABEL_8;
    }
    return 0;
  }
  else
  {
LABEL_8:
    v15 = v4[6];
    if ((unint64_t)(v15 + 2) > v4[7])
      return 0;
    *((_WORD *)a2 + 8) = *(_WORD *)(v4[5] + v15);
    v4[6] = v15 + 2;
    v17 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, 32 * *((unsigned __int16 *)a2 + 8), 8);
    *a2 = result;
    if (*((_WORD *)a2 + 8))
    {
      v18 = 0;
      while (1)
      {
        v19 = v4[6];
        if ((unint64_t)(v19 + 1) > v4[7])
          return 0;
        v20 = *a2;
        v21 = (_BYTE *)(*a2 + 32 * v18);
        v22 = v21 + 2;
        v21[2] = *(_BYTE *)(v4[5] + v19);
        v23 = v4[6];
        v24 = v4[7];
        v4[6] = v23 + 1;
        if (v23 + 2 > v24)
          return 0;
        *(_BYTE *)(v20 + 32 * v18 + 3) = *(_BYTE *)(v4[5] + v23 + 1);
        v25 = v4[6];
        v26 = v4[7];
        v4[6] = v25 + 1;
        v27 = v25 + 2;
        if (v25 + 2 > v26)
          return 0;
        v28 = v4[5];
        v29 = *(unsigned __int8 *)(v28 + v25 + 1);
        v4[6] = v27;
        if (v29)
        {
          *v21 = 1;
          if (v25 + 3 > v26)
            return 0;
          *(_BYTE *)(v20 + 32 * v18 + 1) = *(_BYTE *)(v28 + v27);
          ++v4[6];
        }
        else
        {
          *v21 = 0;
          *(_BYTE *)(v20 + 32 * v18 + 1) = 1;
        }
        v30 = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
        v31 = v20 + 32 * v18;
        v32 = (_BYTE *)(v31 + 1);
        v33 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v30 + 16))(v30, *(unsigned __int8 *)(v31 + 1), 8);
        *(_QWORD *)(v31 + 8) = v33;
        v34 = (uint64_t *)(v31 + 8);
        v35 = geo::codec::Allocator::instance(v33);
        v36 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v35 + 16))(v35, *(unsigned __int8 *)(v31 + 1), 8);
        *(_QWORD *)(v31 + 16) = v36;
        v37 = (uint64_t *)(v31 + 16);
        switch(*v22)
        {
          case 0:
          case 3:
            v38 = geo::codec::Allocator::instance(v36);
            v39 = 4 * *v32;
            goto LABEL_23;
          case 1:
          case 4:
            v38 = geo::codec::Allocator::instance(v36);
            v39 = *v32;
            goto LABEL_23;
          case 2:
          case 5:
            v38 = geo::codec::Allocator::instance(v36);
            v39 = 8 * *v32;
LABEL_23:
            v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v39, 8);
            v41 = v20 + 32 * v18;
            *(_QWORD *)(v41 + 24) = v40;
            v42 = (uint64_t *)(v41 + 24);
            if (*v32)
            {
              v43 = 0;
              v44 = 0;
              v45 = 0;
              while (2)
              {
                v47 = *v34;
                v48 = *v37;
                if (*v21)
                {
                  v49 = v4[6];
                  if ((unint64_t)(v49 + 1) > v4[7])
                    return 0;
                  *(_BYTE *)(v47 + v45) = *(_BYTE *)(v4[5] + v49);
                  v50 = v4[6];
                  v51 = v4[7];
                  v4[6] = v50 + 1;
                  if (v50 + 2 > v51)
                    return 0;
                  *(_BYTE *)(v48 + v45) = *(_BYTE *)(v4[5] + v50 + 1);
                  ++v4[6];
                  v52 = *v22;
                  if (v52 > 5)
                    return 0;
                }
                else
                {
                  *(_BYTE *)(v47 + v45) = 1;
                  *(_BYTE *)(v48 + v45) = 24;
                  v52 = *v22;
                }
                switch(v52)
                {
                  case 0u:
                    v53 = v4[6];
                    if ((unint64_t)(v53 + 1) > v4[7])
                      return 0;
                    v54 = *v42;
                    *(_BYTE *)(*v42 + v43) = *(_BYTE *)(v4[5] + v53);
                    v55 = v4[6];
                    v56 = v4[7];
                    v4[6] = v55 + 1;
                    if (v55 + 2 > v56)
                      return 0;
                    *(_BYTE *)(v54 + v43 + 1) = *(_BYTE *)(v4[5] + v55 + 1);
                    v57 = v4[6];
                    v58 = v4[7];
                    v4[6] = v57 + 1;
                    if (v57 + 2 > v58)
                      return 0;
                    *(_BYTE *)(v54 + v43 + 2) = *(_BYTE *)(v4[5] + v57 + 1);
                    v59 = v4[6];
                    v60 = v4[7];
                    v4[6] = v59 + 1;
                    if (v59 + 2 > v60)
                      return 0;
                    *(_BYTE *)(v54 + v43 + 3) = *(_BYTE *)(v4[5] + v59 + 1);
                    goto LABEL_43;
                  case 1u:
                    v61 = v4[6];
                    if ((unint64_t)(v61 + 1) > v4[7])
                      return 0;
                    *(_BYTE *)(*v42 + v45) = *(_BYTE *)(v4[5] + v61);
LABEL_43:
                    v46 = v4[6] + 1;
                    goto LABEL_27;
                  case 2u:
                    v62 = v4[6];
                    if ((unint64_t)(v62 + 8) > v4[7])
                      return 0;
                    *(_QWORD *)(*v42 + 8 * v45) = *(_QWORD *)(v4[5] + v62);
                    v4[6] = v62 + 8;
                    goto LABEL_28;
                  case 3u:
                    v63 = v4[6];
                    if ((unint64_t)(v63 + 4) > v4[7])
                      return 0;
                    *(_DWORD *)(*v42 + 4 * v45) = *(_DWORD *)(v4[5] + v63);
                    goto LABEL_26;
                  case 4u:
                    v64 = v4[6];
                    v65 = v64 + 1;
                    if ((unint64_t)(v64 + 1) > v4[7])
                      return 0;
                    v66 = *(unsigned __int8 *)(v4[5] + v64);
                    v4[6] = v65;
                    *(_BYTE *)(*v42 + v45) = v66 != 0;
                    goto LABEL_28;
                  case 5u:
                    v67 = v4[6];
                    if ((unint64_t)(v67 + 4) > v4[7])
                      return 0;
                    v68 = *v42;
                    *(_DWORD *)(*v42 + 4 * v44) = *(_DWORD *)(v4[5] + v67);
                    v69 = v4[6];
                    v70 = v4[7];
                    v4[6] = v69 + 4;
                    if (v69 + 8 > v70)
                      return 0;
                    *(_DWORD *)(v68 + 4 * v44 + 4) = *(_DWORD *)(v4[5] + v69 + 4);
LABEL_26:
                    v46 = v4[6] + 4;
LABEL_27:
                    v4[6] = v46;
LABEL_28:
                    ++v45;
                    v44 += 2;
                    v43 += 4;
                    if (v45 < *v32)
                      continue;
                    goto LABEL_53;
                  default:
                    return 0;
                }
              }
            }
LABEL_53:
            ++v18;
            result = 1;
            if (v18 >= *((unsigned __int16 *)a2 + 8))
              return result;
            break;
          default:
            return 0;
        }
      }
    }
    return 1;
  }
}

uint64_t geo::codec::readTransformation(_QWORD *a1, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int32 v17;
  int v18;
  int v19;
  int v20;
  int v21;
  __int32 v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  float32x4_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  float v38[10];

  v2 = a1[6];
  v3 = a1[7];
  v4 = v2 + 4;
  if (v2 + 4 > v3)
    return 0;
  v6 = a1[5];
  v38[0] = *(float *)(v6 + v2);
  a1[6] = v4;
  v7 = v2 + 8;
  if (v2 + 8 > v3)
    return 0;
  v38[1] = *(float *)(v6 + v4);
  a1[6] = v7;
  v8 = v2 + 12;
  if (v2 + 12 > v3)
    return 0;
  v38[2] = *(float *)(v6 + v7);
  a1[6] = v8;
  v9 = v2 + 16;
  if (v2 + 16 > v3)
    return 0;
  v38[7] = *(float *)(v6 + v8);
  a1[6] = v9;
  v10 = v2 + 20;
  if (v2 + 20 > v3)
    return 0;
  v38[8] = *(float *)(v6 + v9);
  a1[6] = v10;
  v11 = v2 + 24;
  if (v2 + 24 > v3)
    return 0;
  v38[9] = *(float *)(v6 + v10);
  a1[6] = v11;
  v12 = v2 + 28;
  if (v2 + 28 > v3)
    return 0;
  v38[3] = *(float *)(v6 + v11);
  a1[6] = v12;
  v13 = v2 + 32;
  if (v2 + 32 > v3)
    return 0;
  v38[4] = *(float *)(v6 + v12);
  a1[6] = v13;
  v14 = v2 + 36;
  if (v2 + 36 > v3)
    return 0;
  v38[5] = *(float *)(v6 + v13);
  a1[6] = v14;
  v15 = v2 + 40;
  if (v15 > v3)
    return 0;
  v38[6] = *(float *)(v6 + v14);
  a1[6] = v15;
  geo::Transform<float>::toMatrix(&v28, v38);
  v17 = v28.i32[1];
  v18 = v32;
  v19 = v33;
  v20 = v29;
  v21 = v30;
  v22 = v28.i32[2];
  v23 = v31;
  v24 = v35;
  v25 = v36;
  v26 = v34;
  v27 = v37;
  *a2 = v28.i32[0];
  a2[1] = v20;
  a2[2] = v18;
  a2[3] = v24;
  a2[4] = v17;
  a2[5] = v21;
  a2[6] = v19;
  a2[7] = v25;
  a2[8] = v22;
  a2[9] = v23;
  a2[10] = v26;
  a2[11] = v27;
  return 1;
}

double geo::Transform<float>::toMatrix(float32x4_t *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  int v8;
  float v9;
  float v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  int v20;
  double result;
  int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  float32x4_t v28;
  float v29;
  float v30;
  float v31;
  int v32;
  float v33;
  float v34;
  float v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;

  v2 = a2[4];
  v3 = a2[5];
  v4 = v2 + v2;
  v5 = (float)(v2 + v2) * v2;
  v6 = (float)(v3 + v3) * v3;
  v8 = *((_DWORD *)a2 + 2);
  v7 = a2[3];
  v9 = (float)(v7 + v7) * v2;
  v10 = a2[6];
  v11 = *((_DWORD *)a2 + 7);
  v12 = (float)(v3 + v3) * v10;
  v13 = v9 - v12;
  v14 = v3 * (float)(v7 + v7);
  v28.f32[0] = 1.0 - (float)(v5 + v6);
  v28.f32[1] = v12 + v9;
  v15 = 1.0 - (float)((float)(v7 + v7) * v7);
  v29 = v13;
  v30 = v15 - v6;
  v16 = v10 * v4;
  v17 = (float)(v10 * v4) + v14;
  v18 = v4 * v3;
  v19 = v10 * (float)(v7 + v7);
  v33 = v17;
  v34 = v18 - v19;
  v28.f32[2] = v14 - v16;
  v31 = v19 + v18;
  v35 = v15 - v5;
  v28.i32[3] = 0;
  v32 = 0;
  v36 = 0;
  v37 = *(_QWORD *)a2;
  v38 = v8;
  v39 = 1065353216;
  v24 = 0u;
  v25 = 0u;
  v26 = 0;
  v23 = 0u;
  v27 = 1065353216;
  v22 = v11;
  v20 = *((_DWORD *)a2 + 9);
  *(float *)&v24 = a2[8];
  DWORD1(v25) = v20;
  *(_QWORD *)&result = gm::operator*<float,4,4,4>(&v28, (uint64_t)&v22, a1).u64[0];
  return result;
}

uint64_t *std::vector<std::pair<int,geo::Transform<float>>,geo::StdAllocator<std::pair<int,geo::Transform<float>>,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

void GeoCodecsPointCloud::~GeoCodecsPointCloud(GeoCodecsPointCloud *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11), v2, *((_QWORD *)this + 10) - v2);
  }
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7), v3, *((_QWORD *)this + 6) - v3);
  }
  v4 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3), v4, *((_QWORD *)this + 2) - v4);
  }
}

_QWORD *geo::codec::transitLinkGetFromNodeID(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = (_QWORD *)a1;
  if (!a1)
    return v2;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  if (*v2 && v2[14] > (unint64_t)(2 * a2))
    v2 = **(_QWORD ***)(*(_QWORD *)(*v2 + 1680) + 8 * (v2[13] + 2 * a2));
  else
    v2 = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v2;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v6);
  return v2;
}

_QWORD *geo::codec::transitLinkGetToNodeID(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = (_QWORD *)a1;
  if (!a1)
    return v2;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  if (*v2 && (v7 = (2 * a2) | 1, v2[14] > v7))
    v2 = **(_QWORD ***)(*(_QWORD *)(*v2 + 1680) + 8 * (v2[13] + v7));
  else
    v2 = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
    return v2;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v6);
  return v2;
}

BOOL geo::codec::multiSectionFeatureIsSameRoad(geo::codec *this, const GeoCodecsRoadFeature *a2, const GeoCodecsRoadFeature *a3)
{
  _BOOL8 result;
  int v6;

  result = 0;
  if (this && a2)
  {
    if (*((_BYTE *)this + 154) == 1)
    {
      if (*((_BYTE *)a2 + 154) != 1)
        return 0;
      if (*((unsigned __int8 *)this + 72) != *((unsigned __int8 *)a2 + 72))
      {
        v6 = 1;
        return v6 == 0;
      }
      if (*((unsigned __int8 *)this + 73) == *((unsigned __int8 *)a2 + 73))
      {
        v6 = geo::codec::_cmpShields((uint64_t)this, (uint64_t)a2);
        if (!v6)
          return geo::codec::_cmpRoadNames((uint64_t)this, (uint64_t)a2) == 0;
        return v6 == 0;
      }
      return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t geo::codec::featureStyleAttributesCompare(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;

  v2 = *a1;
  v3 = *a2;
  if (*a1 == *a2)
    return 0;
  if (!v2)
    return 0xFFFFFFFFLL;
  if (!v3)
    return 1;
  v4 = *(unsigned __int8 *)(v2 + 33);
  v5 = *(unsigned __int8 *)(v3 + 33);
  v6 = v4 >= v5;
  if ((_DWORD)v4 != v5)
  {
LABEL_13:
    if (v6)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  if (!*(_BYTE *)(v2 + 33) || (result = memcmp(*(const void **)v2, *(const void **)v3, 8 * v4), !(_DWORD)result))
  {
    v8 = *(unsigned __int8 *)(v2 + 32);
    v9 = *(unsigned __int8 *)(v3 + 32);
    v6 = v8 >= v9;
    if ((_DWORD)v8 == v9)
    {
      if (*(_BYTE *)(v2 + 32))
        return memcmp(*(const void **)(v2 + 24), *(const void **)(v3 + 24), 12 * v8);
      else
        return 0;
    }
    goto LABEL_13;
  }
  return result;
}

uint64_t geo::codec::_cmpShields(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v11;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  const char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;

  if (result)
  {
    v2 = result;
    v3 = *(unsigned __int8 *)(result + 72);
    if (!*(_BYTE *)(result + 72))
      return 0;
    if (a2)
    {
      v5 = 0;
      while (1)
      {
        v6 = *(std::__shared_weak_count **)(v2 + 8);
        if (v6 && (v7 = std::__shared_weak_count::lock(v6)) != 0)
        {
          v8 = v7;
          v9 = *(_QWORD *)v2;
          if (v5 >= *(unsigned __int8 *)(v2 + 72) || v9 == 0)
          {
            v13 = 0;
            v14 = 0;
          }
          else
          {
            v12 = *(_QWORD *)(v9 + 1064) + 32 * (v5 + *(unsigned int *)(v2 + 60));
            v13 = *(const char **)v12;
            v14 = *(_QWORD *)(v12 + 24);
          }
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (v16)
          {
            v11 = *(std::__shared_weak_count **)(a2 + 8);
            if (!v11)
              goto LABEL_25;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v8);
            v11 = *(std::__shared_weak_count **)(a2 + 8);
            if (!v11)
            {
LABEL_25:
              v19 = 0;
              v20 = 0;
              goto LABEL_31;
            }
          }
        }
        else
        {
          v13 = 0;
          v14 = 0;
          v11 = *(std::__shared_weak_count **)(a2 + 8);
          if (!v11)
            goto LABEL_25;
        }
        v17 = std::__shared_weak_count::lock(v11);
        if (!v17)
          goto LABEL_25;
        v18 = v17;
        v19 = 0;
        if (v5 >= *(unsigned __int8 *)(a2 + 72))
        {
          v20 = 0;
        }
        else
        {
          v20 = 0;
          if (*(_QWORD *)a2)
          {
            v21 = *(_QWORD *)(*(_QWORD *)a2 + 1064) + 32 * (v5 + *(unsigned int *)(a2 + 60));
            v19 = *(const char **)v21;
            v20 = *(_QWORD *)(v21 + 24);
          }
        }
        v22 = (unint64_t *)&v17->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
        }
LABEL_31:
        if (v14 != v20)
          goto LABEL_60;
        if ((unint64_t)v13 | (unint64_t)v19)
        {
          if (!v13 || !v19)
          {
            if (v13)
              return 1;
            else
              return 0xFFFFFFFFLL;
          }
          result = strcmp(v13, v19);
          if ((_DWORD)result)
            return result;
        }
        if (++v5 == v3)
          return 0;
      }
    }
    result = *(_QWORD *)(result + 8);
    if (!result)
      return result;
    v24 = 0;
LABEL_39:
    v25 = std::__shared_weak_count::lock((std::__shared_weak_count *)result);
    if (!v25)
      goto LABEL_52;
    v26 = v25;
    v27 = *(_QWORD *)v2;
    if (v24 >= *(unsigned __int8 *)(v2 + 72) || v27 == 0)
    {
      v30 = 0;
      v14 = 0;
    }
    else
    {
      v29 = (uint64_t *)(*(_QWORD *)(v27 + 1064) + 32 * (v24 + *(unsigned int *)(v2 + 60)));
      v30 = *v29;
      v14 = v29[3];
    }
    v31 = (unint64_t *)&v25->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v26);
    }
    if (!v14)
    {
      if (v30)
        return 1;
LABEL_52:
      while (++v24 != v3)
      {
        result = *(_QWORD *)(v2 + 8);
        if (result)
          goto LABEL_39;
      }
      return 0;
    }
    v20 = 0;
LABEL_60:
    if (v14 < v20)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  return result;
}

uint64_t geo::codec::_cmpRoadNames(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v11;
  const char *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  const char *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;

  if (result)
  {
    v2 = (uint64_t *)result;
    v3 = *(unsigned __int8 *)(result + 73);
    if (!*(_BYTE *)(result + 73))
      return 0;
    if (a2)
    {
      v5 = 0;
      while (1)
      {
        v6 = (std::__shared_weak_count *)v2[1];
        if (v6 && (v7 = std::__shared_weak_count::lock(v6)) != 0)
        {
          v8 = v7;
          v9 = *v2;
          if (v5 >= *((unsigned __int8 *)v2 + 73) || v9 == 0)
            v12 = 0;
          else
            v12 = *(const char **)(*(_QWORD *)(v9 + 1048) + 24 * (v5 + *((unsigned int *)v2 + 14)));
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (v14)
          {
            v11 = *(std::__shared_weak_count **)(a2 + 8);
            if (!v11)
              goto LABEL_5;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v8);
            v11 = *(std::__shared_weak_count **)(a2 + 8);
            if (!v11)
              goto LABEL_5;
          }
        }
        else
        {
          v12 = 0;
          v11 = *(std::__shared_weak_count **)(a2 + 8);
          if (!v11)
            goto LABEL_5;
        }
        v15 = std::__shared_weak_count::lock(v11);
        if (v15)
        {
          v16 = v15;
          v17 = 0;
          if (v5 < *(unsigned __int8 *)(a2 + 73) && *(_QWORD *)a2)
            v17 = *(const char **)(*(_QWORD *)(*(_QWORD *)a2 + 1048) + 24 * (v5 + *(unsigned int *)(a2 + 56)));
          v18 = (unint64_t *)&v15->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v16);
          }
          if (v12)
          {
            if (v17)
            {
              result = strcmp(v12, v17);
              if ((_DWORD)result)
                return result;
            }
          }
        }
LABEL_5:
        if (++v5 == v3)
          return 0;
      }
    }
    result = *(_QWORD *)(result + 8);
    if (result)
    {
      v20 = 0;
LABEL_37:
      v21 = std::__shared_weak_count::lock((std::__shared_weak_count *)result);
      if (v21)
      {
        v22 = v21;
        v23 = (unint64_t *)&v21->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      while (++v20 != v3)
      {
        result = v2[1];
        if (result)
          goto LABEL_37;
      }
      return 0;
    }
  }
  return result;
}

uint64_t geo::codec::multiSectionFeatureElevations(uint64_t result, unint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (result)
  {
    v5 = result;
    if (*(unsigned int *)(result + 100) <= a2)
    {
      result = 0;
      *a3 = 0;
    }
    else
    {
      v6 = geo::codec::vertexPoolForFeature(result);
      v7 = *(unsigned int *)(v5 + 96);
      *a3 = 0;
      v8 = v6[3];
      if (v8)
      {
        v9 = (_QWORD *)(v6[4] + 16 * (v7 + a2));
        result = v8 + 4 * *v9;
        *a3 = v9[1];
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

geo::codec::Allocator *std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::vector(geo::codec::Allocator *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v4 = geo::codec::Allocator::instance(a1);
  *((_QWORD *)a1 + 3) = v4;
  if (a2)
  {
    if (a2 >> 62)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v5 = a2;
    v6 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5 * 4, 4);
    *(_QWORD *)a1 = v6;
    *((_QWORD *)a1 + 1) = v6;
    v7 = &v6[v5];
    *((_QWORD *)a1 + 2) = &v6[v5];
    do
    {
      if (v6)
        *v6 = 0;
      ++v6;
      --v5;
    }
    while (v5 * 4);
    *((_QWORD *)a1 + 1) = v7;
  }
  return a1;
}

void sub_189AECD9C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

geo::codec::Allocator *std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::vector(geo::codec::Allocator *a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v6 = geo::codec::Allocator::instance(a1);
  *((_QWORD *)a1 + 3) = v6;
  if (a2)
  {
    if (a2 >> 62)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v7 = a2;
    v8 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v7 * 4, 4);
    *(_QWORD *)a1 = v8;
    *((_QWORD *)a1 + 1) = v8;
    v9 = &v8[v7];
    *((_QWORD *)a1 + 2) = &v8[v7];
    do
    {
      if (v8)
        *v8 = *a3;
      ++v8;
      --v7;
    }
    while (v7 * 4);
    *((_QWORD *)a1 + 1) = v9;
  }
  return a1;
}

void sub_189AECE70(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<mgcl::gpcc::IntArrayBuffer *,geo::StdAllocator<mgcl::gpcc::IntArrayBuffer *,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t *std::vector<mgcl::gpcc::IntArrayBuffer,geo::StdAllocator<mgcl::gpcc::IntArrayBuffer,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t *std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

_QWORD *geo::codec::multiSectionFeatureGetSectionData(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *result;
  uint64_t v9;

  result = geo::codec::vertexPoolForFeature(a1);
  if (result)
  {
    v9 = *(unsigned int *)(a1 + 100);
    *a2 = v9;
    if ((_DWORD)v9)
    {
      *a3 = result[4] + 16 * *(unsigned int *)(a1 + 96);
      *a4 = result[1] + 8 * *(_QWORD *)result[4];
    }
    else
    {
      *a3 = 0;
      *a4 = 0;
    }
  }
  else
  {
    *a2 = 0;
    *a3 = 0;
    *a4 = 0;
  }
  return result;
}

float geo::codec::buildingFootprintExtrusionHeight(uint64_t a1, unint64_t a2)
{
  float v2;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = 0.0;
  if (*(unsigned int *)(a1 + 100) <= a2)
    return v2;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    return v2;
  v6 = std::__shared_weak_count::lock(v4);
  if (!v6)
    return v2;
  v7 = v6;
  if (*(_QWORD *)a1)
    v2 = *(float *)(*(_QWORD *)(*(_QWORD *)a1 + 312) + 4 * (*(_QWORD *)(a1 + 112) + a2));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v2;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  return v2;
}

float geo::codec::buildingFootprintBaseHeight(uint64_t a1, unint64_t a2)
{
  float v2;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v2 = 0.0;
  if (*(unsigned int *)(a1 + 100) <= a2)
    return v2;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4)
    return v2;
  v6 = std::__shared_weak_count::lock(v4);
  if (!v6)
    return v2;
  v7 = v6;
  if (*(_QWORD *)a1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)a1 + 344);
    if (v8)
      v2 = *(float *)(v8 + 4 * (*(_QWORD *)(a1 + 120) + a2));
  }
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
    return v2;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  return v2;
}

uint64_t geo::codec::transitTravelTimeForLineAlongLink(_QWORD *a1, unint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v11;

  if (!a1)
    return 0;
  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3)
    return 0;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return 0;
  v6 = v5;
  if (*a1 && a1[4] > a2 && (v7 = *(_QWORD *)(*a1 + 1528)) != 0)
    v8 = *(unsigned int *)(v7 + 4 * (a1[3] + a2));
  else
    v8 = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v8;
}

geo::codec *geo::codec::multiSectionFeatureCharacteristicPoints(std::__shared_weak_count **this, GeoCodecsRoadFeature *a2, unint64_t *a3)
{
  geo::codec *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  size_t v9;
  geo::codec *v10;
  geo::codec *v11;
  geo::codec *v12;
  unint64_t v13;
  uint64_t v14;
  geo::codec *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t __key;

  v3 = (geo::codec *)this;
  if (!this)
    return v3;
  v4 = this[1];
  if (!v4)
    return 0;
  v6 = std::__shared_weak_count::lock(v4);
  if (!v6)
    return 0;
  v7 = v6;
  v8 = *(_QWORD **)v3;
  if (*(_QWORD *)v3)
  {
    v9 = v8[151];
    v10 = (geo::codec *)v8[150];
    __key = 0xCF3CF3CF3CF3CF3DLL * (((uint64_t)v3 - v8[4]) >> 3);
    v11 = (geo::codec *)bsearch(&__key, v10, v9, 0x64uLL, (int (__cdecl *)(const void *, const void *))geo::codec::_searchForCharacteristicPoints(GeoCodecsCharacteristicPoint const*,unsigned long,unsigned long,unsigned long *)::$_0::__invoke);
    if (a2)
    {
      v3 = v11;
      if (v11)
      {
        if (v11 > v10)
        {
          do
          {
            if (__key != *((_DWORD *)v3 - 24))
              break;
            v3 = (geo::codec *)((char *)v3 - 100);
          }
          while (v3 > v10);
        }
        *(_QWORD *)a2 = 0;
        v12 = (geo::codec *)((char *)v10 + 100 * v9);
        if (v3 < v12)
        {
          v13 = __key;
          v14 = 1;
          v15 = v3;
          do
          {
            if (v13 != *((_DWORD *)v15 + 1))
              break;
            *(_QWORD *)a2 = v14;
            v15 = (geo::codec *)((char *)v15 + 100);
            ++v14;
          }
          while (v15 < v12);
        }
        goto LABEL_18;
      }
      *(_QWORD *)a2 = 0;
    }
  }
  v3 = 0;
LABEL_18:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v3;
}

void sub_189AED3CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *geo::codec::multiSectionFeatureBounds(float *a1)
{
  _DWORD *v2;
  unint64_t i;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const float *v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  const float *v21;
  uint64_t v22;
  float *v23;
  float v24;
  float v25;
  float32x4x2_t v27;
  float32x4x2_t v28;

  v2 = a1 + 20;
  if ((a1[20] > a1[22] || a1[21] > a1[23]) && *((_DWORD *)a1 + 25))
  {
    for (i = 0; i < *((unsigned int *)a1 + 25); ++i)
    {
      v8 = geo::codec::vertexPoolForFeature((uint64_t)a1);
      if (v8
        && (v9 = v8[4]) != 0
        && (v10 = i + *((unsigned int *)a1 + 24), v8[5] > v10)
        && (v11 = *(_QWORD *)(v9 + 16 * v10), v11 < v8[2]))
      {
        v12 = *(_QWORD *)(v9 + 16 * v10 + 8);
        v5.f32[0] = a1[20];
        v4.f32[0] = a1[21];
        v6.f32[0] = a1[22];
        v7.f32[0] = a1[23];
        if ((int)v12 >= 1)
        {
          v13 = v8[1];
          if (v12 >= 8uLL)
          {
            v7 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 0);
            v6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 0);
            v14 = v12 & 0xFFFFFFF8;
            v5 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 0);
            v15 = (const float *)(v13 + 8 * v11 + 32);
            v16 = v14;
            v4 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 0);
            v17 = v7;
            v18 = v6;
            v19 = v5;
            v20 = v4;
            do
            {
              v21 = v15 - 8;
              v27 = vld2q_f32(v21);
              v28 = vld2q_f32(v15);
              v5 = vminnmq_f32(v5, v27.val[0]);
              v19 = vminnmq_f32(v19, v28.val[0]);
              v6 = vmaxnmq_f32(v6, v27.val[0]);
              v18 = vmaxnmq_f32(v18, v28.val[0]);
              v4 = vminnmq_f32(v4, v27.val[1]);
              v20 = vminnmq_f32(v20, v28.val[1]);
              v7 = vmaxnmq_f32(v7, v27.val[1]);
              v17 = vmaxnmq_f32(v17, v28.val[1]);
              v15 += 16;
              v16 -= 8;
            }
            while (v16);
            v4.f32[0] = vminnmvq_f32(vminnmq_f32(v4, v20));
            v5.f32[0] = vminnmvq_f32(vminnmq_f32(v5, v19));
            v6.f32[0] = vmaxnmvq_f32(vmaxnmq_f32(v6, v18));
            v7.f32[0] = vmaxnmvq_f32(vmaxnmq_f32(v7, v17));
            if ((v12 & 7) == 0)
              goto LABEL_6;
          }
          else
          {
            v14 = 0;
          }
          v22 = v12 - v14;
          v23 = (float *)(v13 + 8 * v14 + 8 * v11 + 4);
          do
          {
            v24 = *(v23 - 1);
            v5.f32[0] = fminf(v5.f32[0], v24);
            v6.f32[0] = fmaxf(v6.f32[0], v24);
            v25 = *v23;
            v23 += 2;
            v4.f32[0] = fminf(v4.f32[0], v25);
            v7.f32[0] = fmaxf(v7.f32[0], v25);
            --v22;
          }
          while (v22);
        }
      }
      else
      {
        v5.f32[0] = a1[20];
        v4.f32[0] = a1[21];
        v6.f32[0] = a1[22];
        v7.f32[0] = a1[23];
      }
LABEL_6:
      a1[20] = v5.f32[0];
      a1[21] = v4.f32[0];
      a1[22] = v6.f32[0];
      a1[23] = v7.f32[0];
    }
  }
  return v2;
}

uint64_t *FeatureStyleAttributesSet::insert(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;

  v4 = (_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 8);
  if (!v5)
    goto LABEL_8;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = FeatureStyleAttributesSet::FeatureStyleAttributesCompare::operator()(a1 + 16, v5 + 4, a2);
    v8 = v5 + 1;
    if (!v7)
    {
      v8 = v5;
      v6 = v5;
    }
    v5 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v4
    || (v9 = v6 + 4, FeatureStyleAttributesSet::FeatureStyleAttributesCompare::operator()(a1 + 16, a2, v6 + 4)))
  {
LABEL_8:
    std::__tree<std::shared_ptr<FeatureStyleAttributes const>,FeatureStyleAttributesSet::FeatureStyleAttributesCompare,std::allocator<std::shared_ptr<FeatureStyleAttributes const>>>::__emplace_unique_key_args<std::shared_ptr<FeatureStyleAttributes const>,std::shared_ptr<FeatureStyleAttributes const> const&>((uint64_t **)a1, a2, a2);
    v10 = *(uint64_t **)(a1 + 32);
    if ((unint64_t)v10 >= *(_QWORD *)(a1 + 40))
    {
      v14 = std::vector<std::shared_ptr<FeatureStyleAttributes const>,geo::StdAllocator<std::shared_ptr<FeatureStyleAttributes const>,geo::codec::Allocator>>::__emplace_back_slow_path<std::shared_ptr<FeatureStyleAttributes const> const&>(a1 + 24, (__int128 *)a2);
    }
    else
    {
      if (v10)
      {
        v11 = a2[1];
        *v10 = *a2;
        v10[1] = v11;
        if (v11)
        {
          v12 = (unint64_t *)(v11 + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
      }
      v14 = (uint64_t)(v10 + 2);
    }
    *(_QWORD *)(a1 + 32) = v14;
    return a2;
  }
  return v9;
}

BOOL FeatureStyleAttributesSet::FeatureStyleAttributesCompare::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;

  v3 = *a2;
  v4 = (*(char *)(*a2 + 34) - 0x61C8864680B57FA7) ^ 0x11;
  v5 = *(unsigned __int8 *)(*a2 + 33);
  if (*(_BYTE *)(*a2 + 33))
  {
    v6 = (int *)(*(_QWORD *)v3 + 4);
    do
    {
      v7 = ((v4 << 6) - 0x61C8864680B583EBLL + (v4 >> 2) + *(v6 - 1)) ^ v4;
      v4 = (*v6 - 0x61C8864680B583EBLL + (v7 << 6) + (v7 >> 2)) ^ v7;
      v6 += 2;
      --v5;
    }
    while (v5);
  }
  v8 = *(unsigned __int8 *)(v3 + 32);
  if (*(_BYTE *)(v3 + 32))
  {
    v9 = (uint64_t *)(*(_QWORD *)(v3 + 24) + 4);
    do
    {
      v10 = ((v4 << 6) - 0x61C8864680B583EBLL + (v4 >> 2) + *((unsigned int *)v9 - 1)) ^ v4;
      v11 = *v9;
      v9 = (uint64_t *)((char *)v9 + 12);
      v4 = (v11 - 0x61C8864680B583EBLL + (v10 << 6) + (v10 >> 2)) ^ v10;
      --v8;
    }
    while (v8);
  }
  v12 = *a3;
  v13 = (*(char *)(*a3 + 34) - 0x61C8864680B57FA7) ^ 0x11;
  v14 = *(unsigned __int8 *)(*a3 + 33);
  if (*(_BYTE *)(*a3 + 33))
  {
    v15 = (int *)(*(_QWORD *)v12 + 4);
    do
    {
      v16 = ((v13 << 6) - 0x61C8864680B583EBLL + (v13 >> 2) + *(v15 - 1)) ^ v13;
      v13 = (*v15 - 0x61C8864680B583EBLL + (v16 << 6) + (v16 >> 2)) ^ v16;
      v15 += 2;
      --v14;
    }
    while (v14);
  }
  v17 = *(unsigned __int8 *)(v12 + 32);
  if (*(_BYTE *)(v12 + 32))
  {
    v18 = (uint64_t *)(*(_QWORD *)(v12 + 24) + 4);
    do
    {
      v19 = ((v13 << 6) - 0x61C8864680B583EBLL + (v13 >> 2) + *((unsigned int *)v18 - 1)) ^ v13;
      v20 = *v18;
      v18 = (uint64_t *)((char *)v18 + 12);
      v13 = (v20 - 0x61C8864680B583EBLL + (v19 << 6) + (v19 >> 2)) ^ v19;
      --v17;
    }
    while (v17);
  }
  return v4 < v13;
}

uint64_t *std::__tree<std::shared_ptr<FeatureStyleAttributes const>,FeatureStyleAttributesSet::FeatureStyleAttributesCompare,std::allocator<std::shared_ptr<FeatureStyleAttributes const>>>::__emplace_unique_key_args<std::shared_ptr<FeatureStyleAttributes const>,std::shared_ptr<FeatureStyleAttributes const> const&>(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = (uint64_t *)operator new(0x30uLL);
    v11 = v10;
    v12 = a3[1];
    v10[4] = *a3;
    v10[5] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v6 = v10;
    v15 = (uint64_t *)**a1;
    v16 = v10;
    if (v15)
    {
      *a1 = v15;
      v16 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = v5 + 4;
      if (!FeatureStyleAttributesSet::FeatureStyleAttributesCompare::operator()((uint64_t)(a1 + 2), a2, v5 + 4))
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if (!FeatureStyleAttributesSet::FeatureStyleAttributesCompare::operator()((uint64_t)(a1 + 2), v9, a2))
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v11 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v11;
}

uint64_t std::vector<std::shared_ptr<FeatureStyleAttributes const>,geo::StdAllocator<std::shared_ptr<FeatureStyleAttributes const>,geo::codec::Allocator>>::__emplace_back_slow_path<std::shared_ptr<FeatureStyleAttributes const> const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  __int128 v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v5 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
  if (v5 >> 3 > v4)
    v4 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7)
  {
    v9 = 16 * v7;
    v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 16 * v7, 8);
    v11 = (__int128 *)(v10 + 16 * v3);
    v7 = v10 + v9;
    if (v10)
    {
      v12 = *a2;
      *v11 = *a2;
      if (*((_QWORD *)&v12 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
    }
    v15 = (uint64_t)(v11 + 1);
    v16 = *(_QWORD **)a1;
    v17 = *(_QWORD **)(a1 + 8);
    if (v17 == *(_QWORD **)a1)
      goto LABEL_23;
  }
  else
  {
    v11 = (__int128 *)(16 * v3);
    v15 = 16 * v3 + 16;
    v16 = *(_QWORD **)a1;
    v17 = *(_QWORD **)(a1 + 8);
    if (v17 == *(_QWORD **)a1)
    {
LABEL_23:
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = v15;
      v20 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v7;
      goto LABEL_24;
    }
  }
  do
  {
    v18 = *((_OWORD *)v17 - 1);
    v17 -= 2;
    *--v11 = v18;
    *v17 = 0;
    v17[1] = 0;
  }
  while (v17 != v16);
  v17 = *(_QWORD **)a1;
  v19 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v15;
  v20 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  while (v19 != v17)
  {
    v21 = (std::__shared_weak_count *)*(v19 - 1);
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v19 -= 2;
  }
LABEL_24:
  if (v17)
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v17, v20 - (_QWORD)v17);
  return v15;
}

uint64_t geo::codec::decodeLocalizations(std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>> const&,std::string &,std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>&,std::vector<GeoCodecsLocalizationTableEntry,geo::StdAllocator<GeoCodecsLocalizationTableEntry,geo::codec::Allocator>> &,geo::codec::PBDataReaderInterface &)::$_0::__invoke(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a1 != *a2;
}

uint64_t geo::codec::compareSearchingLocalizationTableEntries(geo::codec *this, _QWORD *a2, const void *a3)
{
  if (*a2 > *(_QWORD *)this)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *(_QWORD *)this;
}

uint64_t geo::codec::_searchForCharacteristicPoints(GeoCodecsCharacteristicPoint const*,unsigned long,unsigned long,unsigned long *)::$_0::__invoke(unint64_t *a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a2 + 4);
  if (*a1 < v2)
    return 0xFFFFFFFFLL;
  else
    return *a1 > v2;
}

uint64_t std::__split_buffer<char,geo::StdAllocator<char,geo::codec::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) != v2)
    *(_QWORD *)(a1 + 16) = v2;
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

char *std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(char *result, char *a2, unint64_t a3, __int128 *a4, uint64_t a5)
{
  char *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  char *v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 *v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  __int128 *v40;
  __int128 *v41;
  __int128 *v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  __int128 v57;

  if (a3 >= 2)
  {
    v6 = result;
    if (a3 == 2)
    {
      v7 = *((_QWORD *)a2 - 3);
      v8 = *((_QWORD *)result + 1);
      v9 = v7 >= v8;
      if (v7 == v8 && (v10 = *((_QWORD *)a2 - 2), v11 = *((_QWORD *)result + 2), v9 = v10 >= v11, v10 == v11))
      {
        if (*((_QWORD *)a2 - 1) >= *((_QWORD *)result + 3))
          return result;
      }
      else if (v9)
      {
        return result;
      }
      v31 = a2 - 32;
      v33 = *(_OWORD *)result;
      v32 = *((_OWORD *)result + 1);
      v34 = *((_OWORD *)a2 - 1);
      *(_OWORD *)result = *((_OWORD *)a2 - 2);
      *((_OWORD *)result + 1) = v34;
      *(_OWORD *)v31 = v33;
      *((_OWORD *)v31 + 1) = v32;
    }
    else
    {
      if ((uint64_t)a3 <= 128)
      {
        if (result == a2)
          return result;
        v13 = result + 32;
        if (result + 32 == a2)
          return result;
        v14 = 0;
        v15 = result;
LABEL_14:
        v17 = v15;
        v15 = v13;
        v18 = *((_QWORD *)v17 + 5);
        v19 = *((_QWORD *)v17 + 1);
        if (v18 == v19)
        {
          v20 = *((_QWORD *)v17 + 6);
          v21 = *((_QWORD *)v17 + 2);
          if (v20 == v21)
          {
            if (*((_QWORD *)v17 + 7) >= *((_QWORD *)v17 + 3))
              goto LABEL_13;
          }
          else if (v20 >= v21)
          {
            goto LABEL_13;
          }
        }
        else
        {
          if (v18 >= v19)
            goto LABEL_13;
          v20 = *((_QWORD *)v17 + 6);
        }
        v22 = *((_QWORD *)v17 + 4);
        v23 = *((_QWORD *)v17 + 7);
        v24 = *((_OWORD *)v17 + 1);
        *(_OWORD *)v15 = *(_OWORD *)v17;
        *((_OWORD *)v15 + 1) = v24;
        v16 = v6;
        if (v17 == v6)
          goto LABEL_12;
        v25 = v14;
        while (1)
        {
          v27 = &v6[v25];
          v28 = *(_QWORD *)&v6[v25 - 24];
          v29 = v18 >= v28;
          if (v18 == v28 && (v30 = *((_QWORD *)v27 - 2), v29 = v20 >= v30, v20 == v30))
          {
            v16 = &v6[v25];
            result = *(char **)&v6[v25 - 8];
            if (v23 >= (unint64_t)result)
              goto LABEL_12;
          }
          else if (v29)
          {
            v16 = v17;
LABEL_12:
            *(_QWORD *)v16 = v22;
            *((_QWORD *)v16 + 1) = v18;
            *((_QWORD *)v16 + 2) = v20;
            *((_QWORD *)v16 + 3) = v23;
LABEL_13:
            v13 = v15 + 32;
            v14 += 32;
            if (v15 + 32 == a2)
              return result;
            goto LABEL_14;
          }
          v17 -= 32;
          v26 = *((_OWORD *)v27 - 1);
          *(_OWORD *)v27 = *((_OWORD *)v27 - 2);
          *((_OWORD *)v27 + 1) = v26;
          v25 -= 32;
          if (!v25)
          {
            v16 = v6;
            goto LABEL_12;
          }
        }
      }
      v36 = a4;
      v37 = a3 >> 1;
      v38 = &result[32 * (a3 >> 1)];
      v39 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>((uint64_t)result, v38, v39, a4);
        v40 = &v36[2 * v37];
        result = (char *)std::__stable_sort_move<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>((uint64_t)&v6[32 * (a3 >> 1)], a2, a3 - (a3 >> 1), v40);
        v41 = &v36[2 * a3];
        v42 = v40;
        while (v42 != v41)
        {
          v45 = *((_QWORD *)v42 + 1);
          v46 = *((_QWORD *)v36 + 1);
          v47 = v45 >= v46;
          if (v45 == v46)
          {
            v48 = *((_QWORD *)v42 + 2);
            v49 = *((_QWORD *)v36 + 2);
            v47 = v48 >= v49;
            if (v48 == v49)
              v47 = *((_QWORD *)v42 + 3) >= *((_QWORD *)v36 + 3);
          }
          if (v47)
          {
            v50 = *v36;
            v51 = v36[1];
            v36 += 2;
            *(_OWORD *)v6 = v50;
            *((_OWORD *)v6 + 1) = v51;
            v6 += 32;
            if (v36 == v40)
            {
LABEL_44:
              if (v42 != v41)
              {
                v52 = 0;
                do
                {
                  v53 = &v6[v52 * 16];
                  v54 = v42[v52 + 1];
                  *(_OWORD *)v53 = v42[v52];
                  *((_OWORD *)v53 + 1) = v54;
                  v52 += 2;
                }
                while (&v42[v52] != v41);
              }
              return result;
            }
          }
          else
          {
            v43 = *v42;
            v44 = v42[1];
            v42 += 2;
            *(_OWORD *)v6 = v43;
            *((_OWORD *)v6 + 1) = v44;
            v6 += 32;
            if (v36 == v40)
              goto LABEL_44;
          }
        }
        if (v36 != v40)
        {
          v55 = 0;
          do
          {
            v56 = &v6[v55 * 16];
            v57 = v36[v55 + 1];
            *(_OWORD *)v56 = v36[v55];
            *((_OWORD *)v56 + 1) = v57;
            v55 += 2;
          }
          while (&v36[v55] != v40);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(result, v38, v39, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(&v6[32 * (a3 >> 1)], a2, a3 - (a3 >> 1), v36, a5);
        return std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(v6, &v6[32 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v36, a5);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(uint64_t result, _QWORD *a2, unint64_t a3, __int128 *a4)
{
  __int128 *v4;
  _QWORD *v7;
  __int128 v8;
  __int128 *v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  __int128 v23;
  _QWORD *v24;
  __int128 *v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  _OWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  __int128 *v54;
  __int128 v55;
  unint64_t v56;
  __int128 *v57;
  __int128 v58;

  if (!a3)
    return result;
  v4 = a4;
  v7 = (_QWORD *)result;
  if (a3 == 2)
  {
    v9 = (__int128 *)(a2 - 4);
    v10 = *(a2 - 3);
    v11 = *(_QWORD *)(result + 8);
    v12 = v10 >= v11;
    if (v10 == v11 && (v13 = *(a2 - 2), v14 = *(_QWORD *)(result + 16), v12 = v13 >= v14, v13 == v14))
    {
      if (*(a2 - 1) >= *(_QWORD *)(result + 24))
      {
LABEL_9:
        v15 = *(_OWORD *)(result + 16);
        *a4 = *(_OWORD *)result;
        a4[1] = v15;
        v16 = *v9;
        v17 = *((_OWORD *)a2 - 1);
LABEL_34:
        a4[2] = v16;
        a4[3] = v17;
        return result;
      }
    }
    else if (v12)
    {
      goto LABEL_9;
    }
    v39 = *((_OWORD *)a2 - 1);
    *a4 = *v9;
    a4[1] = v39;
    v16 = *(_OWORD *)result;
    v17 = *(_OWORD *)(result + 16);
    goto LABEL_34;
  }
  if (a3 == 1)
  {
    v8 = *(_OWORD *)(result + 16);
    *a4 = *(_OWORD *)result;
    a4[1] = v8;
  }
  else if ((uint64_t)a3 > 8)
  {
    v40 = a3 >> 1;
    v41 = 32 * (a3 >> 1);
    v42 = result + v41;
    std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(result, result + v41, a3 >> 1, a4, a3 >> 1);
    result = std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(&v7[(unint64_t)v41 / 8], a2, a3 - v40, &v4[(unint64_t)v41 / 0x10], a3 - v40);
    v43 = &v7[(unint64_t)v41 / 8];
    while (v43 != a2)
    {
      v46 = v43[1];
      v47 = v7[1];
      v48 = v46 >= v47;
      if (v46 == v47)
      {
        v49 = v43[2];
        v50 = v7[2];
        v48 = v49 >= v50;
        if (v49 == v50)
          v48 = v43[3] >= v7[3];
      }
      if (v48)
      {
        v51 = *(_OWORD *)v7;
        v52 = *((_OWORD *)v7 + 1);
        v7 += 4;
        *v4 = v51;
        v4[1] = v52;
        v4 += 2;
        if (v7 == (_QWORD *)v42)
        {
LABEL_44:
          if (v43 != a2)
          {
            v53 = 0;
            do
            {
              v54 = &v4[v53 / 2];
              v55 = *(_OWORD *)&v43[v53 + 2];
              *v54 = *(_OWORD *)&v43[v53];
              v54[1] = v55;
              v53 += 4;
            }
            while (&v43[v53] != a2);
          }
          return result;
        }
      }
      else
      {
        v44 = *(_OWORD *)v43;
        v45 = *((_OWORD *)v43 + 1);
        v43 += 4;
        *v4 = v44;
        v4[1] = v45;
        v4 += 2;
        if (v7 == (_QWORD *)v42)
          goto LABEL_44;
      }
    }
    if (v7 != (_QWORD *)v42)
    {
      v56 = 0;
      do
      {
        v57 = &v4[v56 / 2];
        v58 = *(_OWORD *)&v7[v56 + 2];
        *v57 = *(_OWORD *)&v7[v56];
        v57[1] = v58;
        v56 += 4;
      }
      while (&v7[v56] != (_QWORD *)v42);
    }
  }
  else if ((_QWORD *)result != a2)
  {
    v18 = *(_OWORD *)(result + 16);
    *a4 = *(_OWORD *)result;
    a4[1] = v18;
    v19 = result + 32;
    if ((_QWORD *)(result + 32) != a2)
    {
      v20 = 0;
      v21 = a4;
      do
      {
        v24 = v7;
        v25 = v21;
        v7 = (_QWORD *)v19;
        v21 += 2;
        v26 = v24[5];
        v27 = *((_QWORD *)v25 + 1);
        v28 = v26 >= v27;
        if (v26 == v27 && (v29 = v24[6], v30 = *((_QWORD *)v25 + 2), v28 = v29 >= v30, v29 == v30))
        {
          v22 = v21;
          if (v24[7] >= *((_QWORD *)v25 + 3))
            goto LABEL_15;
        }
        else
        {
          v22 = v21;
          if (v28)
            goto LABEL_15;
        }
        v31 = v25[1];
        *v21 = *v25;
        v21[1] = v31;
        v22 = a4;
        if (v25 != a4)
        {
          v32 = v20;
          while (1)
          {
            v34 = (__int128 *)((char *)a4 + v32);
            v35 = v24[5];
            v36 = *(_QWORD *)((char *)a4 + v32 - 24);
            if (v35 == v36)
            {
              v37 = v24[6];
              v38 = *((_QWORD *)v34 - 2);
              if (v37 == v38)
              {
                if (v24[7] >= *(_QWORD *)((char *)a4 + v32 - 8))
                {
LABEL_31:
                  v22 = v25;
                  break;
                }
              }
              else if (v37 >= v38)
              {
                v22 = (__int128 *)((char *)a4 + v32);
                break;
              }
            }
            else if (v35 >= v36)
            {
              goto LABEL_31;
            }
            v25 -= 2;
            v33 = *(v34 - 1);
            *v34 = *(v34 - 2);
            v34[1] = v33;
            v32 -= 32;
            if (!v32)
            {
              v22 = a4;
              break;
            }
          }
        }
LABEL_15:
        v23 = *((_OWORD *)v7 + 1);
        *v22 = *(_OWORD *)v7;
        v22[1] = v23;
        v19 = (uint64_t)(v7 + 4);
        v20 += 32;
      }
      while (v7 + 4 != a2);
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, _OWORD *a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  int64_t v48;
  _OWORD *v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  char *v59;
  char *v60;
  char *v61;
  __int128 v62;
  uint64_t v63;
  BOOL v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  char *v74;
  unint64_t v75;
  _OWORD *v76;
  __int128 v77;
  _OWORD *v78;
  char *v79;
  __int128 v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  BOOL v84;
  unint64_t v85;
  unint64_t v86;
  __int128 v87;
  unint64_t v88;
  _OWORD *v89;
  __int128 v90;
  char *v91;
  char *v92;
  __int128 v93;
  __int128 v94;
  unint64_t v95;
  unint64_t v96;
  BOOL v97;
  unint64_t v98;
  unint64_t v99;
  __int128 v100;
  __int128 v101;
  char *v102;
  __int128 v103;
  uint64_t v104;
  char *v105;
  __int128 v106;
  char *v107;
  char *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;

  if (!a5)
    return result;
  v8 = a5;
  while (a4 > a7 && v8 > a7)
  {
    if (!a4)
      return result;
    v11 = 0;
    v12 = *((_QWORD *)a2 + 1);
    v13 = -a4;
    while (1)
    {
      v14 = *(_QWORD *)&result[v11 + 8];
      v15 = v12 >= v14;
      if (v12 == v14)
      {
        v16 = *((_QWORD *)a2 + 2);
        v17 = *(_QWORD *)&result[v11 + 16];
        v15 = v16 >= v17;
        if (v16 == v17)
          v15 = *((_QWORD *)a2 + 3) >= *(_QWORD *)&result[v11 + 24];
      }
      if (!v15)
        break;
      v11 += 32;
      v15 = __CFADD__(v13++, 1);
      if (v15)
        return result;
    }
    v18 = -v13;
    v19 = &result[v11];
    if (-v13 < v8)
    {
      if (v8 >= 0)
        v20 = v8;
      else
        v20 = v8 + 1;
      v21 = v20 >> 1;
      v22 = &a2[32 * (v20 >> 1)];
      v23 = a2;
      if (v19 != a2)
      {
        v24 = (a2 - result - v11) >> 5;
        v25 = *((_QWORD *)v22 + 1);
        v26 = *((_QWORD *)v22 + 2);
        v23 = &result[v11];
        do
        {
          v27 = v24 >> 1;
          v28 = &v23[32 * (v24 >> 1)];
          v29 = *((_QWORD *)v28 + 1);
          v30 = v25 >= v29;
          if (v25 == v29)
          {
            v31 = *((_QWORD *)v28 + 2);
            v30 = v26 >= v31;
            if (v26 == v31)
              v30 = *((_QWORD *)v22 + 3) >= *(_QWORD *)&v23[32 * v27 + 24];
          }
          if (v30)
          {
            v23 = v28 + 32;
            v27 = v24 + ~v27;
          }
          v24 = v27;
        }
        while (v27);
      }
      v32 = (v23 - result - v11) >> 5;
      v41 = v22;
      if (v23 == a2)
        goto LABEL_64;
LABEL_42:
      v41 = v23;
      if (a2 != v22)
      {
        if (v23 + 32 == a2)
        {
          v110 = *(_OWORD *)v23;
          v114 = *((_OWORD *)v23 + 1);
          v48 = v22 - a2;
          v49 = a6;
          v50 = a3;
          v107 = v19;
          memmove(v23, a2, v22 - a2);
          v19 = v107;
          a3 = v50;
          a6 = v49;
          v41 = &v23[v48];
          *(_OWORD *)v41 = v110;
          *((_OWORD *)v41 + 1) = v114;
        }
        else if (a2 + 32 == v22)
        {
          v41 = v23 + 32;
          v111 = *((_OWORD *)v22 - 2);
          v115 = *((_OWORD *)v22 - 1);
          if (v22 - 32 != v23)
          {
            v51 = a6;
            v52 = a3;
            v108 = v19;
            memmove(v23 + 32, v23, v22 - 32 - v23);
            v19 = v108;
            a3 = v52;
            a6 = v51;
          }
          *(_OWORD *)v23 = v111;
          *((_OWORD *)v23 + 1) = v115;
        }
        else
        {
          v42 = (a2 - v23) >> 5;
          v43 = (v22 - a2) >> 5;
          if (v42 == v43)
          {
            v44 = 0;
            do
            {
              v45 = &a2[v44];
              v46 = &v23[v44];
              v109 = *(_OWORD *)&v23[v44];
              v113 = *(_OWORD *)&v23[v44 + 16];
              v47 = *(_OWORD *)&a2[v44 + 16];
              *(_OWORD *)v46 = *(_OWORD *)&a2[v44];
              *((_OWORD *)v46 + 1) = v47;
              *(_OWORD *)v45 = v109;
              *((_OWORD *)v45 + 1) = v113;
              if (&v23[v44 + 32] == a2)
                break;
              v44 += 32;
            }
            while (v45 + 32 != v22);
            v41 = a2;
          }
          else
          {
            v53 = (v22 - a2) >> 5;
            v54 = (a2 - v23) >> 5;
            do
            {
              v55 = v54;
              v54 = v53;
              v53 = v55 % v53;
            }
            while (v53);
            if (v54)
            {
              v56 = &v23[32 * v54];
              do
              {
                v57 = *((_OWORD *)v56 - 2);
                v58 = *((_OWORD *)v56 - 1);
                v56 -= 32;
                v116 = v58;
                v59 = &v56[32 * v42];
                v60 = v56;
                do
                {
                  v61 = v60;
                  v60 = v59;
                  v62 = *((_OWORD *)v59 + 1);
                  *(_OWORD *)v61 = *(_OWORD *)v59;
                  *((_OWORD *)v61 + 1) = v62;
                  v63 = (v22 - v59) >> 5;
                  v64 = __OFSUB__(v42, v63);
                  v66 = v42 - v63;
                  v65 = (v66 < 0) ^ v64;
                  v59 = &v23[32 * v66];
                  if (v65)
                    v59 = &v60[32 * v42];
                }
                while (v59 != v56);
                *(_OWORD *)v60 = v57;
                *((_OWORD *)v60 + 1) = v116;
              }
              while (v56 != v23);
            }
            v41 = &v23[32 * v43];
          }
        }
      }
      goto LABEL_64;
    }
    if (v13 == -1)
    {
      v102 = &result[v11];
      v112 = *(_OWORD *)v102;
      v117 = *((_OWORD *)v102 + 1);
      v103 = *((_OWORD *)a2 + 1);
      *(_OWORD *)v102 = *(_OWORD *)a2;
      *((_OWORD *)v102 + 1) = v103;
      *(_OWORD *)a2 = v112;
      *((_OWORD *)a2 + 1) = v117;
      return result;
    }
    if (v13 > 0)
      v18 = 1 - v13;
    v32 = v18 >> 1;
    v23 = &result[32 * (v18 >> 1) + v11];
    v22 = a3;
    if (a3 != a2)
    {
      v33 = (a3 - a2) >> 5;
      v34 = *((_QWORD *)v23 + 1);
      v35 = *((_QWORD *)v23 + 2);
      v22 = a2;
      do
      {
        v36 = v33 >> 1;
        v37 = &v22[32 * (v33 >> 1)];
        v38 = *((_QWORD *)v37 + 1);
        v39 = v38 >= v34;
        if (v38 == v34)
        {
          v40 = *((_QWORD *)v37 + 2);
          v39 = v40 >= v35;
          if (v40 == v35)
            v39 = *(_QWORD *)&v22[32 * v36 + 24] >= *((_QWORD *)v23 + 3);
        }
        if (!v39)
        {
          v22 = v37 + 32;
          v36 = v33 + ~v36;
        }
        v33 = v36;
      }
      while (v36);
    }
    v21 = (v22 - a2) >> 5;
    v41 = v22;
    if (v23 != a2)
      goto LABEL_42;
LABEL_64:
    a4 = -(v32 + v13);
    v67 = v8 - v21;
    if (v32 + v21 >= v8 - (v32 + v21) - v13)
    {
      v71 = -(v32 + v13);
      v72 = v8 - v21;
      v73 = a6;
      v74 = v19;
      std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(v41, v22, a3, v71, v72, a6, a7);
      result = v74;
      a4 = v32;
      a3 = v41;
      v8 = v21;
      a2 = v23;
      a6 = v73;
      if (!v21)
        return result;
    }
    else
    {
      v68 = v32;
      v69 = a6;
      v70 = a3;
      std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0 &,GeoCodecsGhostPoint *>(v19, v23, v41, v68, v21, a6, a7);
      a3 = v70;
      result = v41;
      v8 -= v21;
      a2 = v22;
      a6 = v69;
      if (!v67)
        return result;
    }
  }
  if (a4 <= v8)
  {
    if (result != a2)
    {
      v88 = 0;
      do
      {
        v89 = &a6[v88 / 0x10];
        v90 = *(_OWORD *)&result[v88 + 16];
        *v89 = *(_OWORD *)&result[v88];
        v89[1] = v90;
        v88 += 32;
      }
      while (&result[v88] != a2);
      if (v88)
      {
        v91 = (char *)&a6[v88 / 0x10];
        v92 = (char *)a6;
        while (a2 != a3)
        {
          v95 = *((_QWORD *)a2 + 1);
          v96 = *((_QWORD *)v92 + 1);
          v97 = v95 >= v96;
          if (v95 == v96)
          {
            v98 = *((_QWORD *)a2 + 2);
            v99 = *((_QWORD *)v92 + 2);
            v97 = v98 >= v99;
            if (v98 == v99)
              v97 = *((_QWORD *)a2 + 3) >= *((_QWORD *)v92 + 3);
          }
          if (v97)
          {
            v100 = *(_OWORD *)v92;
            v101 = *((_OWORD *)v92 + 1);
            v92 += 32;
            *(_OWORD *)result = v100;
            *((_OWORD *)result + 1) = v101;
            result += 32;
            if (v91 == v92)
              return result;
          }
          else
          {
            v93 = *(_OWORD *)a2;
            v94 = *((_OWORD *)a2 + 1);
            a2 += 32;
            *(_OWORD *)result = v93;
            *((_OWORD *)result + 1) = v94;
            result += 32;
            if (v91 == v92)
              return result;
          }
        }
        return (char *)memmove(result, v92, (char *)a6 - v92 + v88);
      }
    }
  }
  else if (a2 != a3)
  {
    v75 = 0;
    do
    {
      v76 = &a6[v75 / 0x10];
      v77 = *(_OWORD *)&a2[v75 + 16];
      *v76 = *(_OWORD *)&a2[v75];
      v76[1] = v77;
      v75 += 32;
    }
    while (&a2[v75] != a3);
    if (v75)
    {
      v78 = &a6[v75 / 0x10];
      v79 = a3 - 32;
      while (a2 != result)
      {
        v81 = a2 - 32;
        v82 = *((_QWORD *)v78 - 3);
        v83 = *((_QWORD *)a2 - 3);
        v84 = v82 >= v83;
        if (v82 == v83)
        {
          v85 = *((_QWORD *)v78 - 2);
          v86 = *((_QWORD *)a2 - 2);
          v84 = v85 >= v86;
          if (v85 == v86)
            v84 = *((_QWORD *)v78 - 1) >= *((_QWORD *)a2 - 1);
        }
        if (v84)
        {
          v78 -= 2;
          v80 = v78[1];
          *(_OWORD *)v79 = *v78;
          *((_OWORD *)v79 + 1) = v80;
          v79 -= 32;
          if (v78 == a6)
            return result;
        }
        else
        {
          a2 -= 32;
          v87 = *((_OWORD *)v81 + 1);
          *(_OWORD *)v79 = *(_OWORD *)v81;
          *((_OWORD *)v79 + 1) = v87;
          v79 -= 32;
          if (v78 == a6)
            return result;
        }
      }
      v104 = 0;
      do
      {
        v105 = &v79[v104 * 16];
        v106 = v78[v104 - 1];
        *(_OWORD *)v105 = v78[v104 - 2];
        *((_OWORD *)v105 + 1) = v106;
        v104 -= 2;
      }
      while (&v78[v104] != a6);
    }
  }
  return result;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(uint64_t result, char *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  __int128 v23;
  int v24;
  int v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  unsigned int v55;
  unsigned int v56;
  BOOL v57;
  unsigned int v58;
  unsigned int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  int v89;
  __int128 v90;
  int v91;

  if (a3 >= 2)
  {
    v6 = result;
    if (a3 == 2)
    {
      v7 = *((_DWORD *)a2 - 24);
      v8 = *(_DWORD *)(result + 4);
      v9 = v7 >= v8;
      if (v7 == v8 && (v10 = *((_DWORD *)a2 - 23), v11 = *(_DWORD *)(result + 8), v9 = v10 >= v11, v10 == v11))
      {
        if (*((_DWORD *)a2 - 22) >= *(_DWORD *)(result + 12))
          return result;
      }
      else if (v9)
      {
        return result;
      }
      v36 = a2 - 100;
      v88 = *(_OWORD *)(result + 64);
      v90 = *(_OWORD *)(result + 80);
      v91 = *(_DWORD *)(result + 96);
      v80 = *(_OWORD *)result;
      v82 = *(_OWORD *)(result + 16);
      v84 = *(_OWORD *)(result + 32);
      v86 = *(_OWORD *)(result + 48);
      v38 = *(_OWORD *)(a2 - 84);
      v37 = *(_OWORD *)(a2 - 68);
      *(_OWORD *)result = *(_OWORD *)(a2 - 100);
      *(_OWORD *)(result + 16) = v38;
      *(_OWORD *)(result + 32) = v37;
      v40 = *(_OWORD *)(a2 - 36);
      v39 = *(_OWORD *)(a2 - 20);
      v41 = *(_OWORD *)(a2 - 52);
      *(_DWORD *)(result + 96) = *((_DWORD *)a2 - 1);
      *(_OWORD *)(result + 64) = v40;
      *(_OWORD *)(result + 80) = v39;
      *(_OWORD *)(result + 48) = v41;
      *(_OWORD *)v36 = v80;
      *((_OWORD *)v36 + 1) = v82;
      *((_DWORD *)v36 + 24) = v91;
      *((_OWORD *)v36 + 4) = v88;
      *((_OWORD *)v36 + 5) = v90;
      *((_OWORD *)v36 + 2) = v84;
      *((_OWORD *)v36 + 3) = v86;
    }
    else
    {
      if ((uint64_t)a3 <= 128)
      {
        if ((char *)result == a2)
          return result;
        v13 = result + 100;
        if ((char *)(result + 100) == a2)
          return result;
        v14 = 0;
        v15 = result;
LABEL_14:
        v17 = v15;
        v15 = v13;
        v18 = *(_DWORD *)(v17 + 104);
        v19 = *(_DWORD *)(v17 + 4);
        if (v18 == v19)
        {
          v20 = *(_DWORD *)(v17 + 108);
          v21 = *(_DWORD *)(v17 + 8);
          if (v20 == v21)
          {
            if (*(_DWORD *)(v17 + 112) >= *(_DWORD *)(v17 + 12))
              goto LABEL_13;
          }
          else if (v20 >= v21)
          {
            goto LABEL_13;
          }
        }
        else
        {
          if (v18 >= v19)
            goto LABEL_13;
          v20 = *(_DWORD *)(v17 + 108);
        }
        v22 = *(_DWORD *)(v17 + 112);
        v79 = *(_OWORD *)(v17 + 116);
        v81 = *(_OWORD *)(v17 + 132);
        v89 = *(_DWORD *)(v17 + 196);
        v85 = *(_OWORD *)(v17 + 164);
        v87 = *(_OWORD *)(v17 + 180);
        v83 = *(_OWORD *)(v17 + 148);
        v23 = *(_OWORD *)(v17 + 48);
        v25 = *(_DWORD *)(v17 + 96);
        v24 = *(_DWORD *)(v17 + 100);
        *(_OWORD *)(v15 + 32) = *(_OWORD *)(v17 + 32);
        *(_OWORD *)(v15 + 48) = v23;
        *(_DWORD *)(v15 + 96) = v25;
        v26 = *(_OWORD *)(v17 + 16);
        *(_OWORD *)v15 = *(_OWORD *)v17;
        *(_OWORD *)(v15 + 16) = v26;
        v27 = *(_OWORD *)(v17 + 80);
        v16 = v6;
        *(_OWORD *)(v15 + 64) = *(_OWORD *)(v17 + 64);
        *(_OWORD *)(v15 + 80) = v27;
        if (v17 == v6)
          goto LABEL_12;
        v28 = v14;
        while (1)
        {
          v32 = v6 + v28;
          v33 = *(_DWORD *)(v6 + v28 - 96);
          v34 = v18 >= v33;
          if (v18 == v33 && (v35 = *(_DWORD *)(v32 - 92), v34 = v20 >= v35, v20 == v35))
          {
            v16 = v6 + v28;
            result = *(unsigned int *)(v6 + v28 - 88);
            if (v22 >= result)
              goto LABEL_12;
          }
          else if (v34)
          {
            v16 = v17;
LABEL_12:
            *(_DWORD *)v16 = v24;
            *(_DWORD *)(v16 + 4) = v18;
            *(_DWORD *)(v16 + 8) = v20;
            *(_DWORD *)(v16 + 12) = v22;
            *(_OWORD *)(v16 + 48) = v83;
            *(_OWORD *)(v16 + 64) = v85;
            *(_OWORD *)(v16 + 80) = v87;
            *(_DWORD *)(v16 + 96) = v89;
            *(_OWORD *)(v16 + 16) = v79;
            *(_OWORD *)(v16 + 32) = v81;
LABEL_13:
            v13 = v15 + 100;
            v14 += 100;
            if ((char *)(v15 + 100) == a2)
              return result;
            goto LABEL_14;
          }
          v17 -= 100;
          v29 = *(_OWORD *)(v32 - 20);
          *(_OWORD *)(v32 + 64) = *(_OWORD *)(v32 - 36);
          *(_OWORD *)(v32 + 80) = v29;
          result = *(unsigned int *)(v32 - 4);
          *(_DWORD *)(v32 + 96) = result;
          v30 = *(_OWORD *)(v32 - 84);
          *(_OWORD *)v32 = *(_OWORD *)(v32 - 100);
          *(_OWORD *)(v32 + 16) = v30;
          v31 = *(_OWORD *)(v32 - 52);
          *(_OWORD *)(v32 + 32) = *(_OWORD *)(v32 - 68);
          *(_OWORD *)(v32 + 48) = v31;
          v28 -= 100;
          if (!v28)
          {
            v16 = v6;
            goto LABEL_12;
          }
        }
      }
      v43 = a4;
      v44 = a3 >> 1;
      v45 = result + 100 * (a3 >> 1);
      v46 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(result, v45, v46, a4);
        v47 = v43 + 100 * v44;
        result = std::__stable_sort_move<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(v6 + 100 * (a3 >> 1), (uint64_t)a2, a3 - (a3 >> 1), v47);
        v48 = v43 + 100 * a3;
        v49 = v47;
        while (v49 != v48)
        {
          v55 = *(_DWORD *)(v49 + 4);
          v56 = *(_DWORD *)(v43 + 4);
          v57 = v55 >= v56;
          if (v55 == v56)
          {
            v58 = *(_DWORD *)(v49 + 8);
            v59 = *(_DWORD *)(v43 + 8);
            v57 = v58 >= v59;
            if (v58 == v59)
              v57 = *(_DWORD *)(v49 + 12) >= *(_DWORD *)(v43 + 12);
          }
          if (v57)
          {
            v60 = *(_OWORD *)v43;
            v61 = *(_OWORD *)(v43 + 32);
            *(_OWORD *)(v6 + 16) = *(_OWORD *)(v43 + 16);
            *(_OWORD *)(v6 + 32) = v61;
            *(_OWORD *)v6 = v60;
            v62 = *(_OWORD *)(v43 + 48);
            v63 = *(_OWORD *)(v43 + 64);
            v64 = *(_OWORD *)(v43 + 80);
            *(_DWORD *)(v6 + 96) = *(_DWORD *)(v43 + 96);
            *(_OWORD *)(v6 + 64) = v63;
            *(_OWORD *)(v6 + 80) = v64;
            *(_OWORD *)(v6 + 48) = v62;
            v43 += 100;
            v6 += 100;
            if (v43 == v47)
            {
LABEL_44:
              if (v49 != v48)
              {
                v65 = 0;
                do
                {
                  v66 = v6 + v65;
                  v67 = *(_OWORD *)(v49 + v65);
                  v68 = *(_OWORD *)(v49 + v65 + 32);
                  *(_OWORD *)(v66 + 16) = *(_OWORD *)(v49 + v65 + 16);
                  *(_OWORD *)(v66 + 32) = v68;
                  *(_OWORD *)v66 = v67;
                  v69 = *(_OWORD *)(v49 + v65 + 48);
                  v70 = *(_OWORD *)(v49 + v65 + 64);
                  v71 = *(_OWORD *)(v49 + v65 + 80);
                  *(_DWORD *)(v66 + 96) = *(_DWORD *)(v49 + v65 + 96);
                  *(_OWORD *)(v66 + 64) = v70;
                  *(_OWORD *)(v66 + 80) = v71;
                  *(_OWORD *)(v66 + 48) = v69;
                  v65 += 100;
                }
                while (v49 + v65 != v48);
              }
              return result;
            }
          }
          else
          {
            v50 = *(_OWORD *)v49;
            v51 = *(_OWORD *)(v49 + 32);
            *(_OWORD *)(v6 + 16) = *(_OWORD *)(v49 + 16);
            *(_OWORD *)(v6 + 32) = v51;
            *(_OWORD *)v6 = v50;
            v52 = *(_OWORD *)(v49 + 48);
            v53 = *(_OWORD *)(v49 + 64);
            v54 = *(_OWORD *)(v49 + 80);
            *(_DWORD *)(v6 + 96) = *(_DWORD *)(v49 + 96);
            *(_OWORD *)(v6 + 64) = v53;
            *(_OWORD *)(v6 + 80) = v54;
            *(_OWORD *)(v6 + 48) = v52;
            v49 += 100;
            v6 += 100;
            if (v43 == v47)
              goto LABEL_44;
          }
        }
        if (v43 != v47)
        {
          v72 = 0;
          do
          {
            v73 = v6 + v72;
            v74 = *(_OWORD *)(v43 + v72);
            v75 = *(_OWORD *)(v43 + v72 + 32);
            *(_OWORD *)(v73 + 16) = *(_OWORD *)(v43 + v72 + 16);
            *(_OWORD *)(v73 + 32) = v75;
            *(_OWORD *)v73 = v74;
            v76 = *(_OWORD *)(v43 + v72 + 48);
            v77 = *(_OWORD *)(v43 + v72 + 64);
            v78 = *(_OWORD *)(v43 + v72 + 80);
            *(_DWORD *)(v73 + 96) = *(_DWORD *)(v43 + v72 + 96);
            *(_OWORD *)(v73 + 64) = v77;
            *(_OWORD *)(v73 + 80) = v78;
            *(_OWORD *)(v73 + 48) = v76;
            v72 += 100;
          }
          while (v43 + v72 != v47);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(result, v45, v46, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(v6 + 100 * (a3 >> 1), a2, a3 - (a3 >> 1), v43, a5);
        return (uint64_t)std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>((char *)v6, (char *)(v6 + 100 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), (char *)v43, a5);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 *v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _DWORD *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  unsigned int v49;
  unsigned int v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  unsigned int v80;
  unsigned int v81;
  BOOL v82;
  unsigned int v83;
  unsigned int v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;

  if (!a3)
    return result;
  v4 = a4;
  v7 = result;
  if (a3 == 2)
  {
    v13 = (__int128 *)(a2 - 100);
    v14 = *(_DWORD *)(a2 - 96);
    v15 = *(_DWORD *)(result + 4);
    v16 = v14 >= v15;
    if (v14 == v15 && (v17 = *(_DWORD *)(a2 - 92), v18 = *(_DWORD *)(result + 8), v16 = v17 >= v18, v17 == v18))
    {
      if (*(_DWORD *)(a2 - 88) >= *(_DWORD *)(result + 12))
      {
LABEL_9:
        v19 = *(_OWORD *)result;
        v20 = *(_OWORD *)(result + 32);
        *(_OWORD *)(a4 + 16) = *(_OWORD *)(result + 16);
        *(_OWORD *)(a4 + 32) = v20;
        *(_OWORD *)a4 = v19;
        v21 = *(_OWORD *)(result + 48);
        v22 = *(_OWORD *)(result + 64);
        v23 = *(_OWORD *)(result + 80);
        *(_DWORD *)(a4 + 96) = *(_DWORD *)(result + 96);
        *(_OWORD *)(a4 + 64) = v22;
        *(_OWORD *)(a4 + 80) = v23;
        *(_OWORD *)(a4 + 48) = v21;
        v25 = *(_OWORD *)(a2 - 36);
        v24 = *(_OWORD *)(a2 - 20);
        v26 = *(_DWORD *)(a2 - 4);
        *(_OWORD *)(a4 + 148) = *(_OWORD *)(a2 - 52);
        *(_DWORD *)(a4 + 196) = v26;
        *(_OWORD *)(a4 + 180) = v24;
        *(_OWORD *)(a4 + 164) = v25;
        v27 = *v13;
        v28 = *(_OWORD *)(a2 - 84);
        v29 = *(_OWORD *)(a2 - 68);
LABEL_34:
        *(_OWORD *)(a4 + 132) = v29;
        *(_OWORD *)(a4 + 116) = v28;
        *(_OWORD *)(a4 + 100) = v27;
        return result;
      }
    }
    else if (v16)
    {
      goto LABEL_9;
    }
    v63 = *v13;
    v64 = *(_OWORD *)(a2 - 68);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(a2 - 84);
    *(_OWORD *)(a4 + 32) = v64;
    *(_OWORD *)a4 = v63;
    v65 = *(_OWORD *)(a2 - 52);
    v66 = *(_OWORD *)(a2 - 36);
    v67 = *(_OWORD *)(a2 - 20);
    *(_DWORD *)(a4 + 96) = *(_DWORD *)(a2 - 4);
    *(_OWORD *)(a4 + 64) = v66;
    *(_OWORD *)(a4 + 80) = v67;
    *(_OWORD *)(a4 + 48) = v65;
    v69 = *(_OWORD *)(result + 64);
    v68 = *(_OWORD *)(result + 80);
    v70 = *(_DWORD *)(result + 96);
    *(_OWORD *)(a4 + 148) = *(_OWORD *)(result + 48);
    *(_DWORD *)(a4 + 196) = v70;
    *(_OWORD *)(a4 + 180) = v68;
    *(_OWORD *)(a4 + 164) = v69;
    v27 = *(_OWORD *)result;
    v28 = *(_OWORD *)(result + 16);
    v29 = *(_OWORD *)(result + 32);
    goto LABEL_34;
  }
  if (a3 == 1)
  {
    v8 = *(_OWORD *)result;
    v9 = *(_OWORD *)(result + 32);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(result + 16);
    *(_OWORD *)(a4 + 32) = v9;
    *(_OWORD *)a4 = v8;
    v10 = *(_OWORD *)(result + 48);
    v11 = *(_OWORD *)(result + 64);
    v12 = *(_OWORD *)(result + 80);
    *(_DWORD *)(a4 + 96) = *(_DWORD *)(result + 96);
    *(_OWORD *)(a4 + 64) = v11;
    *(_OWORD *)(a4 + 80) = v12;
    *(_OWORD *)(a4 + 48) = v10;
  }
  else if ((uint64_t)a3 > 8)
  {
    v71 = a3 >> 1;
    v72 = 100 * (a3 >> 1);
    v73 = result + v72;
    std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(result, result + v72, a3 >> 1, a4, a3 >> 1);
    result = std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(v7 + v72, a2, a3 - v71, v4 + v72, a3 - v71);
    v74 = v7 + v72;
    while (v74 != a2)
    {
      v80 = *(_DWORD *)(v74 + 4);
      v81 = *(_DWORD *)(v7 + 4);
      v82 = v80 >= v81;
      if (v80 == v81)
      {
        v83 = *(_DWORD *)(v74 + 8);
        v84 = *(_DWORD *)(v7 + 8);
        v82 = v83 >= v84;
        if (v83 == v84)
          v82 = *(_DWORD *)(v74 + 12) >= *(_DWORD *)(v7 + 12);
      }
      if (v82)
      {
        v85 = *(_OWORD *)v7;
        v86 = *(_OWORD *)(v7 + 32);
        *(_OWORD *)(v4 + 16) = *(_OWORD *)(v7 + 16);
        *(_OWORD *)(v4 + 32) = v86;
        *(_OWORD *)v4 = v85;
        v87 = *(_OWORD *)(v7 + 48);
        v88 = *(_OWORD *)(v7 + 64);
        v89 = *(_OWORD *)(v7 + 80);
        *(_DWORD *)(v4 + 96) = *(_DWORD *)(v7 + 96);
        *(_OWORD *)(v4 + 64) = v88;
        *(_OWORD *)(v4 + 80) = v89;
        *(_OWORD *)(v4 + 48) = v87;
        v7 += 100;
        v4 += 100;
        if (v7 == v73)
        {
LABEL_44:
          if (v74 != a2)
          {
            v90 = 0;
            do
            {
              v91 = v4 + v90;
              v92 = *(_OWORD *)(v74 + v90);
              v93 = *(_OWORD *)(v74 + v90 + 32);
              *(_OWORD *)(v91 + 16) = *(_OWORD *)(v74 + v90 + 16);
              *(_OWORD *)(v91 + 32) = v93;
              *(_OWORD *)v91 = v92;
              v94 = *(_OWORD *)(v74 + v90 + 48);
              v95 = *(_OWORD *)(v74 + v90 + 64);
              v96 = *(_OWORD *)(v74 + v90 + 80);
              *(_DWORD *)(v91 + 96) = *(_DWORD *)(v74 + v90 + 96);
              *(_OWORD *)(v91 + 64) = v95;
              *(_OWORD *)(v91 + 80) = v96;
              *(_OWORD *)(v91 + 48) = v94;
              v90 += 100;
            }
            while (v74 + v90 != a2);
          }
          return result;
        }
      }
      else
      {
        v75 = *(_OWORD *)v74;
        v76 = *(_OWORD *)(v74 + 32);
        *(_OWORD *)(v4 + 16) = *(_OWORD *)(v74 + 16);
        *(_OWORD *)(v4 + 32) = v76;
        *(_OWORD *)v4 = v75;
        v77 = *(_OWORD *)(v74 + 48);
        v78 = *(_OWORD *)(v74 + 64);
        v79 = *(_OWORD *)(v74 + 80);
        *(_DWORD *)(v4 + 96) = *(_DWORD *)(v74 + 96);
        *(_OWORD *)(v4 + 64) = v78;
        *(_OWORD *)(v4 + 80) = v79;
        *(_OWORD *)(v4 + 48) = v77;
        v74 += 100;
        v4 += 100;
        if (v7 == v73)
          goto LABEL_44;
      }
    }
    if (v7 != v73)
    {
      v97 = 0;
      do
      {
        v98 = v4 + v97;
        v99 = *(_OWORD *)(v7 + v97);
        v100 = *(_OWORD *)(v7 + v97 + 32);
        *(_OWORD *)(v98 + 16) = *(_OWORD *)(v7 + v97 + 16);
        *(_OWORD *)(v98 + 32) = v100;
        *(_OWORD *)v98 = v99;
        v101 = *(_OWORD *)(v7 + v97 + 48);
        v102 = *(_OWORD *)(v7 + v97 + 64);
        v103 = *(_OWORD *)(v7 + v97 + 80);
        *(_DWORD *)(v98 + 96) = *(_DWORD *)(v7 + v97 + 96);
        *(_OWORD *)(v98 + 64) = v102;
        *(_OWORD *)(v98 + 80) = v103;
        *(_OWORD *)(v98 + 48) = v101;
        v97 += 100;
      }
      while (v7 + v97 != v73);
    }
  }
  else if (result != a2)
  {
    v30 = *(_OWORD *)result;
    v31 = *(_OWORD *)(result + 32);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(result + 16);
    *(_OWORD *)(a4 + 32) = v31;
    *(_OWORD *)a4 = v30;
    v32 = *(_OWORD *)(result + 48);
    v33 = *(_OWORD *)(result + 64);
    v34 = *(_OWORD *)(result + 80);
    *(_DWORD *)(a4 + 96) = *(_DWORD *)(result + 96);
    *(_OWORD *)(a4 + 64) = v33;
    *(_OWORD *)(a4 + 80) = v34;
    *(_OWORD *)(a4 + 48) = v32;
    v35 = result + 100;
    if (result + 100 != a2)
    {
      v36 = 0;
      v37 = a4;
      do
      {
        v44 = (_DWORD *)v7;
        v45 = v37;
        v7 = v35;
        v37 += 100;
        v46 = v44[26];
        v47 = *(_DWORD *)(v45 + 4);
        v48 = v46 >= v47;
        if (v46 == v47 && (v49 = v44[27], v50 = *(_DWORD *)(v45 + 8), v48 = v49 >= v50, v49 == v50))
        {
          v38 = v37;
          if (v44[28] >= *(_DWORD *)(v45 + 12))
            goto LABEL_15;
        }
        else
        {
          v38 = v37;
          if (v48)
            goto LABEL_15;
        }
        v51 = *(_OWORD *)(v45 + 80);
        *(_OWORD *)(v37 + 64) = *(_OWORD *)(v45 + 64);
        *(_OWORD *)(v37 + 80) = v51;
        *(_DWORD *)(v37 + 96) = *(_DWORD *)(v45 + 96);
        v52 = *(_OWORD *)(v45 + 16);
        *(_OWORD *)v37 = *(_OWORD *)v45;
        *(_OWORD *)(v37 + 16) = v52;
        v53 = *(_OWORD *)(v45 + 48);
        v38 = a4;
        *(_OWORD *)(v37 + 32) = *(_OWORD *)(v45 + 32);
        *(_OWORD *)(v37 + 48) = v53;
        if (v45 != a4)
        {
          v54 = v36;
          while (1)
          {
            v58 = a4 + v54;
            v59 = v44[26];
            v60 = *(_DWORD *)(a4 + v54 - 96);
            if (v59 == v60)
            {
              v61 = v44[27];
              v62 = *(_DWORD *)(v58 - 92);
              if (v61 == v62)
              {
                if (v44[28] >= *(_DWORD *)(a4 + v54 - 88))
                {
LABEL_31:
                  v38 = v45;
                  break;
                }
              }
              else if (v61 >= v62)
              {
                v38 = a4 + v54;
                break;
              }
            }
            else if (v59 >= v60)
            {
              goto LABEL_31;
            }
            v45 -= 100;
            v55 = *(_OWORD *)(v58 - 20);
            *(_OWORD *)(v58 + 64) = *(_OWORD *)(v58 - 36);
            *(_OWORD *)(v58 + 80) = v55;
            *(_DWORD *)(v58 + 96) = *(_DWORD *)(v58 - 4);
            v56 = *(_OWORD *)(v58 - 84);
            *(_OWORD *)v58 = *(_OWORD *)(v58 - 100);
            *(_OWORD *)(v58 + 16) = v56;
            v57 = *(_OWORD *)(v58 - 52);
            *(_OWORD *)(v58 + 32) = *(_OWORD *)(v58 - 68);
            *(_OWORD *)(v58 + 48) = v57;
            v54 -= 100;
            if (!v54)
            {
              v38 = a4;
              break;
            }
          }
        }
LABEL_15:
        v39 = *(_OWORD *)v7;
        v40 = *(_OWORD *)(v7 + 32);
        *(_OWORD *)(v38 + 16) = *(_OWORD *)(v7 + 16);
        *(_OWORD *)(v38 + 32) = v40;
        *(_OWORD *)v38 = v39;
        v41 = *(_OWORD *)(v7 + 48);
        v42 = *(_OWORD *)(v7 + 64);
        v43 = *(_OWORD *)(v7 + 80);
        *(_DWORD *)(v38 + 96) = *(_DWORD *)(v7 + 96);
        *(_OWORD *)(v38 + 64) = v42;
        *(_OWORD *)(v38 + 80) = v43;
        *(_OWORD *)(v38 + 48) = v41;
        v35 = v7 + 100;
        v36 += 100;
      }
      while (v7 + 100 != a2);
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;
  unint64_t v27;
  char *v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  char *v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  char *v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  int64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  int v66;
  char *v67;
  char *v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  unint64_t v75;
  BOOL v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  char *v95;
  char *v96;
  char *v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  unsigned int v103;
  unsigned int v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  unint64_t v108;
  char *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  char *v115;
  char *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  unsigned int v122;
  unsigned int v123;
  BOOL v124;
  unsigned int v125;
  unsigned int v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  char *v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  unint64_t v138;
  char *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;

  if (!a5)
    return result;
  v7 = a5;
  while (a4 > a7 && v7 > a7)
  {
    if (!a4)
      return result;
    v10 = 0;
    v11 = *((_DWORD *)a2 + 1);
    v12 = -a4;
    while (1)
    {
      v13 = *(_DWORD *)&result[v10 + 4];
      v14 = v11 >= v13;
      if (v11 == v13)
      {
        v15 = *((_DWORD *)a2 + 2);
        v16 = *(_DWORD *)&result[v10 + 8];
        v14 = v15 >= v16;
        if (v15 == v16)
          v14 = *((_DWORD *)a2 + 3) >= *(_DWORD *)&result[v10 + 12];
      }
      if (!v14)
        break;
      v10 += 100;
      v14 = __CFADD__(v12++, 1);
      if (v14)
        return result;
    }
    v17 = -v12;
    v18 = &result[v10];
    if (-v12 < v7)
    {
      if (v7 >= 0)
        v19 = v7;
      else
        v19 = v7 + 1;
      v20 = v19 >> 1;
      v21 = &a2[100 * (v19 >> 1)];
      if (v18 == a2)
      {
        v26 = a2;
        v22 = a2;
      }
      else
      {
        v22 = &result[v10];
        v23 = 0x8F5C28F5C28F5C29 * ((a2 - result - v10) >> 2);
        v24 = *((_DWORD *)v21 + 1);
        v25 = *((_DWORD *)v21 + 2);
        v26 = v18;
        do
        {
          v27 = v23 >> 1;
          v28 = &v26[100 * (v23 >> 1)];
          v29 = *((_DWORD *)v28 + 1);
          v30 = v24 >= v29;
          if (v24 == v29)
          {
            v31 = *((_DWORD *)v28 + 2);
            v30 = v25 >= v31;
            if (v25 == v31)
              v30 = *((_DWORD *)v21 + 3) >= *((_DWORD *)v28 + 3);
          }
          if (v30)
          {
            v26 = v28 + 100;
            v27 = v23 + ~v27;
          }
          v23 = v27;
        }
        while (v27);
      }
      v32 = 0x8F5C28F5C28F5C29 * ((v26 - v22) >> 2);
      v44 = v21;
      if (v26 == a2)
        goto LABEL_67;
LABEL_45:
      v44 = v26;
      if (a2 != v21)
      {
        if (v26 + 100 == a2)
        {
          v156 = *((_OWORD *)v26 + 1);
          v161 = *((_OWORD *)v26 + 2);
          v151 = *(_OWORD *)v26;
          v181 = *((_DWORD *)v26 + 24);
          v171 = *((_OWORD *)v26 + 4);
          v176 = *((_OWORD *)v26 + 5);
          v166 = *((_OWORD *)v26 + 3);
          v54 = v21 - a2;
          v55 = a6;
          v56 = a3;
          v145 = v20;
          v147 = v18;
          memmove(v26, a2, v21 - a2);
          v20 = v145;
          v18 = v147;
          a3 = v56;
          a6 = v55;
          v44 = &v26[v54];
          *(_OWORD *)v44 = v151;
          *((_OWORD *)v44 + 1) = v156;
          *((_OWORD *)v44 + 2) = v161;
          *((_DWORD *)v44 + 24) = v181;
          *((_OWORD *)v44 + 4) = v171;
          *((_OWORD *)v44 + 5) = v176;
          *((_OWORD *)v44 + 3) = v166;
        }
        else if (a2 + 100 == v21)
        {
          v44 = v26 + 100;
          v157 = *(_OWORD *)(v21 - 84);
          v162 = *(_OWORD *)(v21 - 68);
          v152 = *(_OWORD *)(v21 - 100);
          v182 = *((_DWORD *)v21 - 1);
          v172 = *(_OWORD *)(v21 - 36);
          v177 = *(_OWORD *)(v21 - 20);
          v167 = *(_OWORD *)(v21 - 52);
          if (v21 - 100 != v26)
          {
            v57 = a6;
            v58 = a3;
            v146 = v20;
            v148 = v18;
            memmove(v26 + 100, v26, v21 - 100 - v26);
            v20 = v146;
            v18 = v148;
            a3 = v58;
            a6 = v57;
          }
          *((_OWORD *)v26 + 1) = v157;
          *((_OWORD *)v26 + 2) = v162;
          *(_OWORD *)v26 = v152;
          *((_DWORD *)v26 + 24) = v182;
          *((_OWORD *)v26 + 4) = v172;
          *((_OWORD *)v26 + 5) = v177;
          *((_OWORD *)v26 + 3) = v167;
        }
        else
        {
          v45 = 0x8F5C28F5C28F5C29 * ((a2 - v26) >> 2);
          if (v45 == 0x8F5C28F5C28F5C29 * ((v21 - a2) >> 2))
          {
            v46 = 0;
            do
            {
              v47 = &a2[v46];
              v48 = &v26[v46];
              v155 = *(_OWORD *)&v26[v46 + 16];
              v160 = *(_OWORD *)&v26[v46 + 32];
              v150 = *(_OWORD *)&v26[v46];
              v180 = *(_DWORD *)&v26[v46 + 96];
              v170 = *(_OWORD *)&v26[v46 + 64];
              v175 = *(_OWORD *)&v26[v46 + 80];
              v165 = *(_OWORD *)&v26[v46 + 48];
              v50 = *(_OWORD *)&a2[v46 + 64];
              v49 = *(_OWORD *)&a2[v46 + 80];
              v51 = *(_OWORD *)&a2[v46 + 48];
              *((_DWORD *)v48 + 24) = *(_DWORD *)&a2[v46 + 96];
              *((_OWORD *)v48 + 4) = v50;
              *((_OWORD *)v48 + 5) = v49;
              *((_OWORD *)v48 + 3) = v51;
              v52 = *(_OWORD *)&a2[v46];
              v53 = *(_OWORD *)&a2[v46 + 32];
              *((_OWORD *)v48 + 1) = *(_OWORD *)&a2[v46 + 16];
              *((_OWORD *)v48 + 2) = v53;
              *(_OWORD *)v48 = v52;
              *((_OWORD *)v47 + 1) = v155;
              *((_OWORD *)v47 + 2) = v160;
              *(_OWORD *)v47 = v150;
              *((_DWORD *)v47 + 24) = v180;
              *((_OWORD *)v47 + 4) = v170;
              *((_OWORD *)v47 + 5) = v175;
              *((_OWORD *)v47 + 3) = v165;
              if (&v26[v46 + 100] == a2)
                break;
              v46 += 100;
            }
            while (v47 + 100 != v21);
            v44 = a2;
          }
          else
          {
            v59 = 0x8F5C28F5C28F5C29 * ((v21 - a2) >> 2);
            v60 = 0x8F5C28F5C28F5C29 * ((a2 - v26) >> 2);
            do
            {
              v61 = v60;
              v60 = v59;
              v59 = v61 % v59;
            }
            while (v59);
            if (v60)
            {
              v62 = &v26[100 * v60];
              do
              {
                v158 = *(_OWORD *)(v62 - 84);
                v163 = *(_OWORD *)(v62 - 68);
                v153 = *(_OWORD *)(v62 - 100);
                v63 = *(_OWORD *)(v62 - 52);
                v64 = *(_OWORD *)(v62 - 36);
                v65 = *(_OWORD *)(v62 - 20);
                v66 = *((_DWORD *)v62 - 1);
                v62 -= 100;
                v183 = v66;
                v173 = v64;
                v178 = v65;
                v168 = v63;
                v67 = &v62[4 * ((a2 - v26) >> 2)];
                v68 = v62;
                do
                {
                  v69 = v68;
                  v68 = v67;
                  v70 = *(_OWORD *)v67;
                  v71 = *((_OWORD *)v67 + 2);
                  *((_OWORD *)v69 + 1) = *((_OWORD *)v67 + 1);
                  *((_OWORD *)v69 + 2) = v71;
                  *(_OWORD *)v69 = v70;
                  v72 = *((_OWORD *)v67 + 3);
                  v73 = *((_OWORD *)v67 + 4);
                  v74 = *((_OWORD *)v67 + 5);
                  *((_DWORD *)v69 + 24) = *((_DWORD *)v67 + 24);
                  *((_OWORD *)v69 + 4) = v73;
                  *((_OWORD *)v69 + 5) = v74;
                  *((_OWORD *)v69 + 3) = v72;
                  v75 = 0x8F5C28F5C28F5C29 * ((v21 - v67) >> 2);
                  v76 = __OFSUB__(v45, v75);
                  v78 = v45 - v75;
                  v77 = (v78 < 0) ^ v76;
                  v67 = &v26[100 * v78];
                  if (v77)
                    v67 = &v68[4 * ((a2 - v26) >> 2)];
                }
                while (v67 != v62);
                *((_OWORD *)v68 + 1) = v158;
                *((_OWORD *)v68 + 2) = v163;
                *(_OWORD *)v68 = v153;
                *((_DWORD *)v68 + 24) = v183;
                *((_OWORD *)v68 + 4) = v173;
                *((_OWORD *)v68 + 5) = v178;
                *((_OWORD *)v68 + 3) = v168;
              }
              while (v62 != v26);
            }
            v44 = &v26[4 * ((v21 - a2) >> 2)];
          }
        }
      }
      goto LABEL_67;
    }
    if (v12 == -1)
    {
      v132 = &result[v10];
      v159 = *((_OWORD *)v132 + 1);
      v164 = *((_OWORD *)v132 + 2);
      v154 = *(_OWORD *)v132;
      v184 = *((_DWORD *)v132 + 24);
      v174 = *((_OWORD *)v132 + 4);
      v179 = *((_OWORD *)v132 + 5);
      v169 = *((_OWORD *)v132 + 3);
      v134 = *((_OWORD *)a2 + 4);
      v133 = *((_OWORD *)a2 + 5);
      v135 = *((_OWORD *)a2 + 3);
      *((_DWORD *)v132 + 24) = *((_DWORD *)a2 + 24);
      *((_OWORD *)v132 + 4) = v134;
      *((_OWORD *)v132 + 5) = v133;
      *((_OWORD *)v132 + 3) = v135;
      v136 = *(_OWORD *)a2;
      v137 = *((_OWORD *)a2 + 2);
      *((_OWORD *)v132 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)v132 + 2) = v137;
      *(_OWORD *)v132 = v136;
      *((_OWORD *)a2 + 1) = v159;
      *((_OWORD *)a2 + 2) = v164;
      *(_OWORD *)a2 = v154;
      *((_DWORD *)a2 + 24) = v184;
      *((_OWORD *)a2 + 4) = v174;
      *((_OWORD *)a2 + 5) = v179;
      *((_OWORD *)a2 + 3) = v169;
      return result;
    }
    if (v12 > 0)
      v17 = 1 - v12;
    v32 = v17 >> 1;
    if (a3 == a2)
    {
      v21 = a3;
      v43 = a3;
    }
    else
    {
      v33 = 0x8F5C28F5C28F5C29 * ((a3 - a2) >> 2);
      v34 = &result[100 * v32 + v10];
      v35 = *((_DWORD *)v34 + 1);
      v36 = *((_DWORD *)v34 + 2);
      v37 = *((_DWORD *)v34 + 3);
      v21 = a2;
      do
      {
        v38 = v33 >> 1;
        v39 = &v21[100 * (v33 >> 1)];
        v40 = *((_DWORD *)v39 + 1);
        v41 = v40 >= v35;
        if (v40 == v35)
        {
          v42 = *((_DWORD *)v39 + 2);
          v41 = v42 >= v36;
          if (v42 == v36)
            v41 = *((_DWORD *)v39 + 3) >= v37;
        }
        if (!v41)
        {
          v21 = v39 + 100;
          v38 = v33 + ~v38;
        }
        v33 = v38;
      }
      while (v38);
      v43 = a2;
    }
    v26 = &result[100 * v32 + v10];
    v20 = 0x8F5C28F5C28F5C29 * ((v21 - v43) >> 2);
    v44 = v21;
    if (v26 != a2)
      goto LABEL_45;
LABEL_67:
    a4 = -(v32 + v12);
    v79 = v7 - v20;
    if (v32 + v20 >= v7 - (v32 + v20) - v12)
    {
      v82 = -(v32 + v12);
      v83 = v20;
      v84 = v7 - v20;
      v85 = a6;
      v86 = v18;
      std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(v44, v21, a3, v82, v84, a6, a7);
      result = v86;
      v87 = v83;
      a4 = v32;
      a3 = v44;
      v7 = v87;
      a2 = v26;
      a6 = v85;
      if (!v87)
        return result;
    }
    else
    {
      v80 = a6;
      v81 = a3;
      std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0 &,GeoCodecsCharacteristicPoint *>(v18, v26, v44, v32, v20, a6, a7);
      a3 = v81;
      result = v44;
      v7 = v79;
      a2 = v21;
      a6 = v80;
      if (!v79)
        return result;
    }
  }
  if (a4 <= v7)
  {
    if (result != a2)
    {
      v108 = 0;
      do
      {
        v109 = &a6[v108];
        v110 = *(_OWORD *)&result[v108];
        v111 = *(_OWORD *)&result[v108 + 32];
        *((_OWORD *)v109 + 1) = *(_OWORD *)&result[v108 + 16];
        *((_OWORD *)v109 + 2) = v111;
        *(_OWORD *)v109 = v110;
        v112 = *(_OWORD *)&result[v108 + 48];
        v113 = *(_OWORD *)&result[v108 + 64];
        v114 = *(_OWORD *)&result[v108 + 80];
        *((_DWORD *)v109 + 24) = *(_DWORD *)&result[v108 + 96];
        *((_OWORD *)v109 + 4) = v113;
        *((_OWORD *)v109 + 5) = v114;
        *((_OWORD *)v109 + 3) = v112;
        v108 += 100;
      }
      while (&result[v108] != a2);
      if (v108)
      {
        v115 = &a6[v108];
        v116 = a6;
        while (a2 != a3)
        {
          v122 = *((_DWORD *)a2 + 1);
          v123 = *((_DWORD *)v116 + 1);
          v124 = v122 >= v123;
          if (v122 == v123)
          {
            v125 = *((_DWORD *)a2 + 2);
            v126 = *((_DWORD *)v116 + 2);
            v124 = v125 >= v126;
            if (v125 == v126)
              v124 = *((_DWORD *)a2 + 3) >= *((_DWORD *)v116 + 3);
          }
          if (v124)
          {
            v127 = *(_OWORD *)v116;
            v128 = *((_OWORD *)v116 + 2);
            *((_OWORD *)result + 1) = *((_OWORD *)v116 + 1);
            *((_OWORD *)result + 2) = v128;
            *(_OWORD *)result = v127;
            v129 = *((_OWORD *)v116 + 3);
            v130 = *((_OWORD *)v116 + 4);
            v131 = *((_OWORD *)v116 + 5);
            *((_DWORD *)result + 24) = *((_DWORD *)v116 + 24);
            *((_OWORD *)result + 4) = v130;
            *((_OWORD *)result + 5) = v131;
            *((_OWORD *)result + 3) = v129;
            v116 += 100;
            result += 100;
            if (v115 == v116)
              return result;
          }
          else
          {
            v117 = *(_OWORD *)a2;
            v118 = *((_OWORD *)a2 + 2);
            *((_OWORD *)result + 1) = *((_OWORD *)a2 + 1);
            *((_OWORD *)result + 2) = v118;
            *(_OWORD *)result = v117;
            v119 = *((_OWORD *)a2 + 3);
            v120 = *((_OWORD *)a2 + 4);
            v121 = *((_OWORD *)a2 + 5);
            *((_DWORD *)result + 24) = *((_DWORD *)a2 + 24);
            *((_OWORD *)result + 4) = v120;
            *((_OWORD *)result + 5) = v121;
            *((_OWORD *)result + 3) = v119;
            a2 += 100;
            result += 100;
            if (v115 == v116)
              return result;
          }
        }
        return (char *)memmove(result, v116, a6 - v116 + v108);
      }
    }
  }
  else if (a2 != a3)
  {
    v88 = 0;
    do
    {
      v89 = &a6[v88];
      v90 = *(_OWORD *)&a2[v88];
      v91 = *(_OWORD *)&a2[v88 + 32];
      *((_OWORD *)v89 + 1) = *(_OWORD *)&a2[v88 + 16];
      *((_OWORD *)v89 + 2) = v91;
      *(_OWORD *)v89 = v90;
      v92 = *(_OWORD *)&a2[v88 + 48];
      v93 = *(_OWORD *)&a2[v88 + 64];
      v94 = *(_OWORD *)&a2[v88 + 80];
      *((_DWORD *)v89 + 24) = *(_DWORD *)&a2[v88 + 96];
      *((_OWORD *)v89 + 4) = v93;
      *((_OWORD *)v89 + 5) = v94;
      *((_OWORD *)v89 + 3) = v92;
      v88 += 100;
    }
    while (&a2[v88] != a3);
    if (v88)
    {
      v95 = &a6[v88];
      v96 = a3 - 100;
      while (a2 != result)
      {
        v97 = a2 - 100;
        v103 = *((_DWORD *)v95 - 24);
        v104 = *((_DWORD *)a2 - 24);
        v105 = v103 >= v104;
        if (v103 == v104)
        {
          v106 = *((_DWORD *)v95 - 23);
          v107 = *((_DWORD *)a2 - 23);
          v105 = v106 >= v107;
          if (v106 == v107)
            v105 = *((_DWORD *)v95 - 22) >= *((_DWORD *)a2 - 22);
        }
        if (v105)
        {
          v97 = v95 - 100;
          v95 -= 100;
        }
        else
        {
          a2 -= 100;
        }
        v98 = *(_OWORD *)v97;
        v99 = *((_OWORD *)v97 + 2);
        *((_OWORD *)v96 + 1) = *((_OWORD *)v97 + 1);
        *((_OWORD *)v96 + 2) = v99;
        *(_OWORD *)v96 = v98;
        v100 = *((_OWORD *)v97 + 3);
        v101 = *((_OWORD *)v97 + 4);
        v102 = *((_OWORD *)v97 + 5);
        *((_DWORD *)v96 + 24) = *((_DWORD *)v97 + 24);
        *((_OWORD *)v96 + 4) = v101;
        *((_OWORD *)v96 + 5) = v102;
        *((_OWORD *)v96 + 3) = v100;
        v96 -= 100;
        if (v95 == a6)
          return result;
      }
      v138 = 0;
      do
      {
        v139 = &v96[v138];
        v140 = *(_OWORD *)&v95[v138 - 100];
        v141 = *(_OWORD *)&v95[v138 - 68];
        *((_OWORD *)v139 + 1) = *(_OWORD *)&v95[v138 - 84];
        *((_OWORD *)v139 + 2) = v141;
        *(_OWORD *)v139 = v140;
        v142 = *(_OWORD *)&v95[v138 - 52];
        v143 = *(_OWORD *)&v95[v138 - 36];
        v144 = *(_OWORD *)&v95[v138 - 20];
        *((_DWORD *)v139 + 24) = *(_DWORD *)&v95[v138 - 4];
        *((_OWORD *)v139 + 4) = v143;
        *((_OWORD *)v139 + 5) = v144;
        *((_OWORD *)v139 + 3) = v142;
        v138 -= 100;
      }
      while (&v95[v138] != a6);
    }
  }
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<geo::codec::CharacteristicMakeDefault(void)::$_0 &&>>()
{
  dword_1ECDBCD98 = -1;
  *(_QWORD *)&dword_1ECDBCD9C = 0;
  *(_QWORD *)((char *)&dword_1ECDBCDA0 + 1) = 0;
  byte_1ECDBCDAA = 1;
  word_1ECDBCDAC = 0;
  byte_1ECDBCDAE = 1;
  word_1ECDBCDB0 = 0;
  byte_1ECDBCDB2 = 1;
  word_1ECDBCDB4 = 0;
  byte_1ECDBCDB6 = 1;
  word_1ECDBCDB8 = 0;
  byte_1ECDBCDBA = 1;
  word_1ECDBCDBC = 0;
  byte_1ECDBCDBE = 1;
  word_1ECDBCDC0 = 0;
  byte_1ECDBCDC2 = 1;
  word_1ECDBCDC4 = 0;
  byte_1ECDBCDC6 = 1;
  word_1ECDBCDC8 = 0;
  byte_1ECDBCDCA = 1;
  word_1ECDBCDCC = 0;
  byte_1ECDBCDCE = 1;
  word_1ECDBCDD0 = 0;
  byte_1ECDBCDD2 = 1;
  word_1ECDBCDD4 = 0;
  byte_1ECDBCDD6 = 1;
  word_1ECDBCDD8 = 0;
  byte_1ECDBCDDA = 1;
  word_1ECDBCDDC = 0;
  byte_1ECDBCDDE = 1;
  word_1ECDBCDE0 = 0;
  byte_1ECDBCDE2 = 1;
  word_1ECDBCDE4 = 0;
  byte_1ECDBCDE6 = 1;
  word_1ECDBCDE8 = 0;
}

uint64_t std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  unint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;

  v2 = a2;
  v3 = result;
  v5 = *(_BYTE **)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  if (v4 - (uint64_t)v5 >= a2)
  {
    if (a2)
    {
      v11 = &v5[a2];
      do
      {
        if (v5)
          *v5 = 0;
        ++v5;
        --v2;
      }
      while (v2);
      v5 = v11;
    }
    *(_QWORD *)(result + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD *)result;
    v7 = &v5[-*(_QWORD *)result];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v9 = v4 - v6;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), v10, 1);
    else
      result = 0;
    v12 = &v7[result];
    v13 = &v7[result + v2];
    v14 = &v7[result];
    do
    {
      if (v14)
        *v14 = 0;
      ++v14;
      --v2;
    }
    while (v2);
    v16 = *(_QWORD *)v3;
    v15 = *(_QWORD *)(v3 + 8);
    v17 = v15 - *(_QWORD *)v3;
    if (v15 != *(_QWORD *)v3)
    {
      if (v17 < 0x20)
        goto LABEL_36;
      if ((unint64_t)(v6 - (_QWORD)&v5[result] + v15) < 0x20)
        goto LABEL_36;
      v12 -= v17 & 0xFFFFFFFFFFFFFFE0;
      v18 = &v7[result - 16];
      v19 = (__int128 *)(v15 - 16);
      v20 = v17 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        *v18 = v21;
        v18 -= 2;
        v19 -= 2;
        v20 -= 32;
      }
      while (v20);
      v15 -= v17 & 0xFFFFFFFFFFFFFFE0;
      if (v17 != (v17 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_36:
        do
        {
          v22 = *(_BYTE *)--v15;
          *--v12 = v22;
        }
        while (v15 != v16);
      }
      v15 = *(_QWORD *)v3;
    }
    *(_QWORD *)v3 = v12;
    *(_QWORD *)(v3 + 8) = v13;
    v23 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + v10;
    if (v15)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v15, v23 - v15);
  }
  return result;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<geo::Transform<float>,geo::StdAllocator<geo::Transform<float>,geo::codec::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<geo::Transform<float>,geo::StdAllocator<geo::Transform<float>,geo::codec::Allocator>>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        *(_QWORD *)(v2 + 32) = v3;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 48) + 40))(*(_QWORD *)(v2 + 48), v3, *(_QWORD *)(v2 + 40) - v3);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        *(_QWORD *)(v2 + 32) = v3;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 48) + 40))(*(_QWORD *)(v2 + 48), v3, *(_QWORD *)(v2 + 40) - v3);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t geo::codec::_readDTMRaster(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::chrono::steady_clock::time_point v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  FILE *v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  void *v51;
  void *v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  int v56;
  void *__src;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  size_t __n;
  unsigned int v63;
  const char *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;

  v4 = *a2;
  v5 = a1[1];
  if (!v5)
  {
LABEL_5:
    v8 = 0;
    v64 = "ChapterDTMRaster";
    v65 = v4;
    v9 = (std::__shared_weak_count *)a2[1];
    v66 = v9;
    if (!v9)
      goto LABEL_10;
    goto LABEL_8;
  }
  v6 = 0;
  v7 = 0;
  while (*(_WORD *)(*a1 + 16 * v6) != 170)
  {
    v6 = ++v7;
    if (v5 <= v7)
      goto LABEL_5;
  }
  v8 = (_QWORD *)geo::codec::chapterAt((uint64_t)a1, v7, 170, v4 + 1912);
  v4 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  v64 = "ChapterDTMRaster";
  v65 = v4;
  v66 = v9;
  if (v9)
  {
LABEL_8:
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
LABEL_10:
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v12.__d_.__rep_;
  if (!v8)
  {
LABEL_25:
    v22 = 1;
    goto LABEL_29;
  }
  v63 = 0;
  __n = 0;
  v13 = (_QWORD *)operator new();
  *v13 = 0;
  v13[1] = 0;
  v13[2] = 0;
  v14 = *(_QWORD *)(*a2 + 2912);
  *(_QWORD *)(*a2 + 2912) = v13;
  if (v14)
    MEMORY[0x18D76437C](v14, 0x1000C40504FFAC1);
  if ((geo::codec::chapterReadVarUint32(v8, &v63) & 1) == 0)
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 1940;
    goto LABEL_19;
  }
  if ((geo::codec::chapterReadVarUint32(v8, (unsigned int *)&__n + 1) & 1) == 0)
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 1941;
    goto LABEL_19;
  }
  v15 = v8[6];
  if ((unint64_t)(v15 + 4) > v8[7])
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 1943;
LABEL_19:
    v18 = fprintf(v16, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v17);
    goto LABEL_20;
  }
  **(_DWORD **)(*a2 + 2912) = *(_DWORD *)(v8[5] + v15);
  v28 = v8[6];
  v29 = v8[7];
  v8[6] = v28 + 4;
  if (v28 + 8 > v29)
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 1944;
    goto LABEL_19;
  }
  *(_DWORD *)(*(_QWORD *)(*a2 + 2912) + 4) = *(_DWORD *)(v8[5] + v28 + 4);
  v8[6] += 4;
  if ((geo::codec::chapterReadVarUint32(v8, (unsigned int *)(*(_QWORD *)(*a2 + 2912) + 8)) & 1) == 0)
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 1946;
    goto LABEL_19;
  }
  if ((geo::codec::chapterReadVarUint32(v8, (unsigned int *)(*(_QWORD *)(*a2 + 2912) + 12)) & 1) == 0)
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 1947;
    goto LABEL_19;
  }
  if ((geo::codec::chapterReadVarUint32(v8, (unsigned int *)(*(_QWORD *)(*a2 + 2912) + 16)) & 1) == 0)
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 1948;
    goto LABEL_19;
  }
  v30 = v8[6];
  if ((unint64_t)(v30 + 1) > v8[7])
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 1950;
    goto LABEL_19;
  }
  *(_BYTE *)(*(_QWORD *)(*a2 + 2912) + 20) = *(_BYTE *)(v8[5] + v30);
  v31 = v8[6];
  v32 = v8[7];
  v8[6] = v31 + 1;
  if (v31 + 2 > v32)
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 1951;
    goto LABEL_19;
  }
  *(_BYTE *)(*(_QWORD *)(*a2 + 2912) + 21) = *(_BYTE *)(v8[5] + v31 + 1);
  ++v8[6];
  v33 = *a2;
  v34 = *(_QWORD *)(*a2 + 2912);
  v35 = *(unsigned __int8 *)(v34 + 21);
  v36 = 0x10101000100uLL >> (8 * v35);
  if (v35 >= 6)
    LOBYTE(v36) = 0;
  *(_BYTE *)(v34 + 23) = v36;
  if (v35 == 6)
  {
    v40 = *(_DWORD *)(v34 + 12);
    v39 = *(_DWORD *)(v34 + 16);
    v41 = *(_DWORD *)(v34 + 8);
    v42 = (v39 * v40);
    if (v41 > 0xFF)
    {
      v44 = (unint64_t *)(v33 + 2888);
      if (HIWORD(v41))
      {
        v58 = 0uLL;
        v59 = 0uLL;
        std::vector<unsigned char>::resize(v44, 4 * v42);
        if (!geo::codec::decodeIntCompressorArray<unsigned int>(v8, (uint64_t *)&v58, v63, SBYTE4(__n), v42, *(int8x16_t **)(*a2 + 2888)))
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 2009);
          v18 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v58);
          v19 = 0;
          if (!a1)
            goto LABEL_24;
          goto LABEL_21;
        }
      }
      else
      {
        v58 = 0uLL;
        v59 = 0uLL;
        std::vector<unsigned char>::resize(v44, 2 * v42);
        if (!geo::codec::decodeIntCompressorArray<unsigned short>(v8, (uint64_t *)&v58, v63, SBYTE4(__n), v42, *(uint16x8_t **)(*a2 + 2888)))
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 2005);
          v18 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v58);
          v19 = 0;
          if (!a1)
            goto LABEL_24;
          goto LABEL_21;
        }
      }
      v18 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v58);
    }
    else
    {
      v58 = 0u;
      v59 = 0u;
      std::vector<unsigned char>::resize((unint64_t *)(v33 + 2888), (v39 * v40));
      if (!geo::codec::decodeIntCompressorArray<unsigned char>(v8, (uint64_t *)&v58, v63, SBYTE4(__n), v42, *(uint8x8_t **)(*a2 + 2888)))
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 2001);
        v18 = mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)&v58);
        v19 = 0;
        if (!a1)
          goto LABEL_24;
        goto LABEL_21;
      }
      v18 = mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)&v58);
    }
    goto LABEL_77;
  }
  if (v35 != 2)
  {
    if ((geo::codec::chapterReadVarUint32(v8, (unsigned int *)&__n) & 1) == 0)
    {
      v16 = (FILE *)*MEMORY[0x1E0C80C10];
      v17 = 2013;
      goto LABEL_19;
    }
    if (!(_DWORD)__n)
    {
      v16 = (FILE *)*MEMORY[0x1E0C80C10];
      v17 = 2014;
      goto LABEL_19;
    }
    std::vector<unsigned char>::resize((unint64_t *)(*a2 + 2888), __n);
    v43 = v8[6];
    if (v8[7] - v43 < (unint64_t)__n)
    {
      v16 = (FILE *)*MEMORY[0x1E0C80C10];
      v17 = 2017;
      goto LABEL_19;
    }
    v18 = (uint64_t)memcpy(*(void **)(*a2 + 2888), (const void *)(v8[5] + v43), __n);
    goto LABEL_77;
  }
  if ((geo::codec::chapterReadVarUint32(v8, (unsigned int *)&__n) & 1) == 0)
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 1969;
    goto LABEL_19;
  }
  v37 = __n;
  if (!(_DWORD)__n)
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 1970;
    goto LABEL_19;
  }
  v38 = v8[6];
  if (v38 + (unint64_t)__n > v8[7])
  {
    v16 = (FILE *)*MEMORY[0x1E0C80C10];
    v17 = 1973;
    goto LABEL_19;
  }
  v45 = v8[5] + v38;
  v8[6] = v38 + __n;
  v46 = *(_DWORD *)(*(_QWORD *)(*a2 + 2912) + 8);
  if (v46 > 0xFF)
  {
    if (HIWORD(v46))
    {
      v61 = 0;
      v59 = 0u;
      v60 = 0u;
      v58 = 0u;
      __src = 0;
      v54 = 0;
      v55 = 0;
      v56 = 0;
      v50 = mgcl::raster::PolygonRasterDecoder<unsigned int>::decode((void **)&v58, v45, v37, (uint64_t)&v54, 0);
      if (v50)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 1991);
        v48 = 6;
      }
      else
      {
        memcpy(*(void **)(*a2 + 2888), __src, 4 * (_QWORD)v54 * v55);
        v48 = 0;
        *(_BYTE *)(*(_QWORD *)(*a2 + 2912) + 22) = 32;
      }
      v53 = __src;
      __src = 0;
      if (v53)
        MEMORY[0x18D764364](v53, 0x1000C8052888210);
      v18 = mgcl::raster::PolygonRasterDecoder<unsigned char>::~PolygonRasterDecoder((uint64_t)&v58);
      if (v50)
        goto LABEL_102;
    }
    else
    {
      v61 = 0;
      v59 = 0u;
      v60 = 0u;
      v58 = 0u;
      __src = 0;
      v54 = 0;
      v55 = 0;
      v56 = 0;
      v49 = mgcl::raster::PolygonRasterDecoder<unsigned short>::decode((void **)&v58, v45, v37, (uint64_t)&v54, 0);
      if (v49)
      {
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 1985);
        v48 = 6;
      }
      else
      {
        memcpy(*(void **)(*a2 + 2888), __src, 2 * (_QWORD)v54 * v55);
        v48 = 0;
        *(_BYTE *)(*(_QWORD *)(*a2 + 2912) + 22) = 16;
      }
      v52 = __src;
      __src = 0;
      if (v52)
        MEMORY[0x18D764364](v52, 0x1000C80BDFB0063);
      v18 = mgcl::raster::PolygonRasterDecoder<unsigned char>::~PolygonRasterDecoder((uint64_t)&v58);
      if (v49)
        goto LABEL_102;
    }
LABEL_77:
    v19 = 1;
    if (!a1)
      goto LABEL_24;
    goto LABEL_21;
  }
  v61 = 0;
  v59 = 0u;
  v60 = 0u;
  v58 = 0u;
  __src = 0;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v47 = mgcl::raster::PolygonRasterDecoder<unsigned char>::decode((void **)&v58, v45, v37, (uint64_t)&v54, 0);
  if (v47)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 1978);
    v48 = 6;
  }
  else
  {
    memcpy(*(void **)(*a2 + 2888), __src, v55 * (_QWORD)v54);
    v48 = 0;
    *(_BYTE *)(*(_QWORD *)(*a2 + 2912) + 22) = 8;
  }
  v51 = __src;
  __src = 0;
  if (v51)
    MEMORY[0x18D764364](v51, 0x1000C8077774924);
  v18 = mgcl::raster::PolygonRasterDecoder<unsigned char>::~PolygonRasterDecoder((uint64_t)&v58);
  if (!v47)
    goto LABEL_77;
LABEL_102:
  if (!v48)
    goto LABEL_77;
LABEL_20:
  v19 = 0;
  if (!a1)
    goto LABEL_24;
LABEL_21:
  if (*(_BYTE *)v8)
  {
    v20 = geo::codec::Allocator::instance((geo::codec::Allocator *)v18);
    v18 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v20 + 40))(v20, v8[5], 0);
  }
  v21 = geo::codec::Allocator::instance((geo::codec::Allocator *)v18);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v21 + 40))(v21, v8, 0);
LABEL_24:
  if ((v19 & 1) != 0)
    goto LABEL_25;
  v23 = *(_QWORD *)(*a2 + 2912);
  *(_QWORD *)(*a2 + 2912) = 0;
  if (v23)
    MEMORY[0x18D76437C](v23, 0x1000C40504FFAC1);
  v22 = 0;
LABEL_29:
  v24 = std::chrono::steady_clock::now().__d_.__rep_;
  v54 = "ChapterDTMRaster";
  *(_QWORD *)&v58 = &v54;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v4 + 1912, (uint64_t *)&v54, (uint64_t)&std::piecewise_construct, (uint64_t **)&v58)+ 4) = (double)((v24 - v12.__d_.__rep_) / 1000) * 0.001;
  if (v9)
  {
    v25 = (unint64_t *)&v9->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v22 & 1;
}

void sub_189AF0594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  if (a7)
    MEMORY[0x18D764364](a7, 0x1000C8052888210);
  mgcl::raster::PolygonRasterDecoder<unsigned char>::~PolygonRasterDecoder((uint64_t)va);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v7 - 112));
  _Unwind_Resume(a1);
}

void sub_189AF05D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  if (a7)
    MEMORY[0x18D764364](a7, 0x1000C80BDFB0063);
  mgcl::raster::PolygonRasterDecoder<unsigned char>::~PolygonRasterDecoder((uint64_t)va);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v7 - 112));
  _Unwind_Resume(a1);
}

void sub_189AF060C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  if (a7)
    MEMORY[0x18D764364](a7, 0x1000C8077774924);
  mgcl::raster::PolygonRasterDecoder<unsigned char>::~PolygonRasterDecoder((uint64_t)va);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v7 - 112));
  _Unwind_Resume(a1);
}

void sub_189AF0648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)va);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v7 - 112));
  _Unwind_Resume(a1);
}

void sub_189AF0664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)va);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v7 - 112));
  _Unwind_Resume(a1);
}

void sub_189AF0680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)va);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v7 - 112));
  _Unwind_Resume(a1);
}

void sub_189AF069C(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_189AF06B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::_readContourLines(geo::codec::Allocator *a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  char v13;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  FILE *v21;
  int v22;
  char v23;
  uint64_t VarUint32;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  char v34;
  geo::codec::Allocator *v35;
  FILE *v36;
  int v37;
  geo::codec::Allocator *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  geo::codec::Allocator *v44;
  uint64_t v45;
  geo::codec::Allocator *v46;
  uint64_t v47;
  geo::codec::Allocator *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int8x16_t *v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  __int32 *v57;
  uint64_t v58;
  float *v59;
  float32x2_t *v60;
  __int32 v61;
  float v62;
  float v63;
  uint64_t v64;
  int v65;
  FILE *v66;
  int v67;
  GeoCodecsVertexPool *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  std::__shared_weak_count *v77;
  FILE *v78;
  int v79;
  FILE *v80;
  int v81;
  FILE *v82;
  int v83;
  FILE *v84;
  int v85;
  const float *v86;
  uint64_t v87;
  float32x4_t *v88;
  float *v89;
  int64x2_t v90;
  unsigned int v91;
  int *v92;
  _QWORD *v93;
  unint64_t v94;
  uint64_t v95;
  FILE *v96;
  int v97;
  FILE *v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  int v107;
  __int32 v108;
  uint16x8_t *v109;
  __int32 *v110;
  __int32 v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  float v117;
  int8x16_t *v118;
  uint64_t v119;
  unint64_t v120;
  float *v121;
  const float *v122;
  uint64_t v123;
  unint64_t v124;
  float32x2_t *v125;
  int v126;
  FILE *v127;
  int v128;
  int v129;
  uint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  double v134;
  GeoCodecsFeatureStylePair v135[2];
  GeoCodecsFeatureStylePair v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140[2];
  __int128 v141;
  _OWORD v142[2];
  __int128 v143;
  __int128 v144;
  _OWORD v145[2];
  _OWORD v146[2];
  int8x16_t *v147;
  uint64_t v148;
  uint16x8_t *v149;
  uint64_t v150;
  _OWORD v151[2];
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155[4];
  float32x4x2_t v156;
  float32x4x2_t v157;
  float32x4x2_t v158;
  float32x4x3_t v159;

  v5 = *a2;
  v6 = *a2 + 3360;
  if (a3)
  {
    v7 = 172;
  }
  else
  {
    v6 = *a2 + 3248;
    v7 = 171;
  }
  v8 = v5 + 3136;
  if (a3)
  {
    v9 = 164;
  }
  else
  {
    v8 = v5 + 3024;
    v9 = 161;
  }
  if (a4)
    v10 = v6;
  else
    v10 = v8;
  if (a4)
    v11 = v7;
  else
    v11 = v9;
  v12 = *((_QWORD *)a1 + 1);
  if (!v12)
    goto LABEL_26;
  v13 = a4;
  v16 = 0;
  v17 = 0;
  while (*(unsigned __int16 *)(*(_QWORD *)a1 + 16 * v16) != v11)
  {
    v16 = ++v17;
    if (v12 <= v17)
      goto LABEL_26;
  }
  v18 = (_QWORD *)geo::codec::chapterAt((uint64_t)a1, v17, v11, v5 + 1912);
  if (!v18)
  {
LABEL_26:
    v23 = 1;
    return v23 & 1;
  }
  v19 = (uint64_t)v18;
  v154 = 0;
  *(_QWORD *)v155 = 0;
  v152 = 0;
  v153 = 0;
  if ((geo::codec::chapterReadVarUint32(v18, &v155[1]) & 1) == 0)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 1628;
    goto LABEL_33;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v19, v155) & 1) == 0)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 1629;
    goto LABEL_33;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v19, (unsigned int *)&v154 + 1) & 1) == 0)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 1630;
    goto LABEL_33;
  }
  if ((BYTE4(v154) & 1) != a3)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 1633;
    goto LABEL_33;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v19, (unsigned int *)&v154) & 1) == 0)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 1635;
    goto LABEL_33;
  }
  v20 = *(_QWORD *)(v19 + 48);
  if ((unint64_t)(v20 + 8) > *(_QWORD *)(v19 + 56))
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 1636;
    goto LABEL_33;
  }
  v134 = *(double *)(*(_QWORD *)(v19 + 40) + v20);
  *(_QWORD *)(v19 + 48) = v20 + 8;
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v19, (unsigned int *)&v153 + 1) & 1) == 0)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 1637;
    goto LABEL_33;
  }
  *(_DWORD *)(v10 + 40) = v154;
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v19, (unsigned int *)&v152) & 1) == 0)
  {
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = 1640;
LABEL_33:
    VarUint32 = fprintf(v21, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v22);
    v23 = 0;
    if (!*(_BYTE *)v19)
    {
LABEL_35:
      v27 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v27 + 40))(v27, v19, 0);
      return v23 & 1;
    }
LABEL_34:
    v26 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
    VarUint32 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v26 + 40))(v26, *(_QWORD *)(v19 + 40), 0);
    goto LABEL_35;
  }
  v28 = v152;
  mgcl::polyline::Decoder::Decoder((mgcl::polyline::Decoder *)v142);
  v143 = 0uLL;
  *(_QWORD *)&v144 = 0;
  mgcl::polyline::Decoder::getPositionsInfo(*(_QWORD *)(v19 + 40) + *(_QWORD *)(v19 + 48), v28, (uint64_t)&v143);
  v30 = v144;
  v29 = DWORD1(v144);
  v31 = HIDWORD(v143);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)v151, v144);
  if (v30 != (uint64_t)(*((_QWORD *)&v151[0] + 1) - *(_QWORD *)&v151[0]) >> 2)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 1653);
    goto LABEL_47;
  }
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)&v149, v29);
  if (v29 != (v150 - (uint64_t)v149) >> 2)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 1655);
    std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v149);
LABEL_47:
    std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)v151);
    mgcl::iarray::Decoder::~Decoder((mgcl::iarray::Decoder *)v142);
    v23 = 0;
    if (!*(_BYTE *)v19)
      goto LABEL_35;
    goto LABEL_34;
  }
  v140[0] = 0;
  v133 = v31;
  v32 = (3 * v31);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)&v147, v32);
  v131 = v30;
  v132 = v29;
  v130 = (uint64_t *)v10;
  if (v32 != (v148 - (uint64_t)v147) >> 2)
  {
    v36 = (FILE *)*MEMORY[0x1E0C80C10];
    v37 = 1659;
    goto LABEL_50;
  }
  v33 = a2;
  v34 = v13;
  v35 = (geo::codec::Allocator *)mgcl::polyline::Decoder::decompressPositions((uint64_t **)v142, (const unsigned __int8 *)(*(_QWORD *)(v19 + 40) + *(_QWORD *)(v19 + 48)), v28, v140, v147->i32, *(int **)&v151[0], v149->i32);
  if ((_DWORD)v35)
  {
    v36 = (FILE *)*MEMORY[0x1E0C80C10];
    v37 = 1660;
LABEL_50:
    fprintf(v36, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v37);
    v38 = 0;
LABEL_51:
    v39 = 6;
    goto LABEL_52;
  }
  *(_QWORD *)(v19 + 48) += v28;
  v43 = geo::codec::Allocator::instance(v35);
  v44 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v43 + 24))(v43, 1, 72);
  v38 = v44;
  if (!v44)
  {
    v78 = (FILE *)*MEMORY[0x1E0C80C10];
    v79 = 1666;
LABEL_103:
    fprintf(v78, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v79);
    goto LABEL_51;
  }
  *((_QWORD *)v44 + 2) = v133;
  v45 = geo::codec::Allocator::instance(v44);
  v46 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v45 + 16))(v45, 8 * v133, 8);
  *((_QWORD *)v38 + 1) = v46;
  if (!v46)
  {
    v78 = (FILE *)*MEMORY[0x1E0C80C10];
    v79 = 1669;
    goto LABEL_103;
  }
  *((_QWORD *)v38 + 5) = v30;
  v47 = geo::codec::Allocator::instance(v46);
  v48 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v47 + 16))(v47, 16 * v30, 8);
  *((_QWORD *)v38 + 4) = v48;
  if (!v48)
  {
    v78 = (FILE *)*MEMORY[0x1E0C80C10];
    v79 = 1672;
    goto LABEL_103;
  }
  v49 = geo::codec::Allocator::instance(v48);
  v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v49 + 16))(v49, 4 * v133, 8);
  *((_QWORD *)v38 + 3) = v50;
  if (!v50)
  {
    v78 = (FILE *)*MEMORY[0x1E0C80C10];
    v79 = 1674;
    goto LABEL_103;
  }
  if (!(_DWORD)v133)
    goto LABEL_76;
  v51 = *((_QWORD *)v38 + 1);
  v52 = v147;
  v53 = 1.0 / (float)v154;
  if (v133 < 4 || v51 < v50 + 4 * v133 && v50 < v51 + 8 * v133)
  {
    v54 = 0;
    v55 = 0;
    v56 = v134;
LABEL_74:
    v57 = &v52->i32[v54 + 2];
    v58 = v133 - v55;
    v59 = (float *)(v50 + 4 * v55);
    v60 = (float32x2_t *)(v51 + 8 * v55);
    do
    {
      *v60++ = vmul_n_f32(vcvt_f32_s32(*(int32x2_t *)(v57 - 2)), v53);
      v61 = *v57;
      v57 += 3;
      v62 = v56 * (double)v61;
      *v59++ = v62;
      --v58;
    }
    while (v58);
    goto LABEL_76;
  }
  v55 = v133 & 0xFFFFFFFC;
  v54 = 3 * v55;
  v86 = (const float *)v147;
  v87 = v55;
  v88 = (float32x4_t *)v50;
  v89 = (float *)*((_QWORD *)v38 + 1);
  do
  {
    v159 = vld3q_f32(v86);
    v86 += 12;
    v158.val[0] = vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v159.val[0]), v53);
    v158.val[1] = vmulq_n_f32(vcvtq_f32_s32((int32x4_t)v159.val[1]), v53);
    vst2q_f32(v89, v158);
    v89 += 8;
    v90.i64[0] = v159.val[2].i32[0];
    v90.i64[1] = v159.val[2].i32[1];
    v158.val[0] = (float32x4_t)vcvtq_f64_s64(v90);
    v90.i64[0] = v159.val[2].i32[2];
    v90.i64[1] = v159.val[2].i32[3];
    *v88++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64((float64x2_t)v158.val[0], v134)), vmulq_n_f64(vcvtq_f64_s64(v90), v134));
    v87 -= 4;
  }
  while (v87);
  v56 = v134;
  if (v55 != v133)
    goto LABEL_74;
LABEL_76:
  memset(v146, 0, sizeof(v146));
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)v145, v132);
  if (v132 == (uint64_t)(*((_QWORD *)&v145[0] + 1) - *(_QWORD *)&v145[0]) >> 2)
  {
    if ((geo::codec::decodeIntCompressorArray<int>((_QWORD *)v19, (uint64_t *)v146, v155[1], v155[0], v132, *(int8x16_t **)&v145[0]) & 1) != 0)
    {
      std::vector<GeoCodecsContourLinesFeature,geo::StdAllocator<GeoCodecsContourLinesFeature,geo::codec::Allocator>>::resize((unint64_t *)v10, v132);
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 3) == v132)
      {
        if (a3)
          v63 = 10.0;
        else
          v63 = 3.048;
        if ((_DWORD)v132)
        {
          v64 = 0;
          v65 = 0;
          do
          {
            v71 = *v130;
            v73 = *v33;
            v72 = v33[1];
            if (v72)
            {
              v74 = (unint64_t *)(v72 + 16);
              do
                v75 = __ldxr(v74);
              while (__stxr(v75 + 1, v74));
            }
            v76 = (_QWORD *)(v71 + 56 * v64);
            v77 = (std::__shared_weak_count *)v76[1];
            *v76 = v73;
            v76[1] = v72;
            if (v77)
              std::__shared_weak_count::__release_weak(v77);
            v69 = v71 + 56 * v64;
            *(_QWORD *)(v69 + 48) = v130;
            v70 = *(_QWORD *)&v145[0];
            *(_DWORD *)(v69 + 24) = llroundf(v63 * (float)*(int *)(*(_QWORD *)&v145[0] + 4 * v64));
            *(_BYTE *)(v69 + 28) = *(_DWORD *)(v70 + 4 * v64) % HIDWORD(v153) == 0;
            *(_DWORD *)(v69 + 16) = v65;
            LODWORD(v70) = v149->i32[v64];
            *(_DWORD *)(v69 + 20) = v70;
            *(_BYTE *)(v69 + 29) = a3;
            *(_BYTE *)(v69 + 30) = v34;
            v65 += v70;
            ++v64;
          }
          while (v64 != v132);
        }
        if ((_DWORD)v131)
        {
          v91 = 0;
          v92 = *(int **)&v151[0];
          v93 = (_QWORD *)(*((_QWORD *)v38 + 4) + 8);
          v94 = v131;
          do
          {
            v95 = *v92++;
            *(v93 - 1) = v91;
            *v93 = v95;
            v91 += v95;
            v93 += 2;
            --v94;
          }
          while (v94);
        }
        v39 = 0;
        v130[4] = (uint64_t)v38;
        v38 = 0;
        goto LABEL_115;
      }
      v82 = (FILE *)*MEMORY[0x1E0C80C10];
      v83 = 1695;
    }
    else
    {
      v82 = (FILE *)*MEMORY[0x1E0C80C10];
      v83 = 1691;
    }
  }
  else
  {
    v82 = (FILE *)*MEMORY[0x1E0C80C10];
    v83 = 1690;
  }
  fprintf(v82, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v83);
  v39 = 6;
LABEL_115:
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)v145);
  mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)v146);
LABEL_52:
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v147);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v149);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)v151);
  mgcl::iarray::Decoder::~Decoder((mgcl::iarray::Decoder *)v142);
  if (v39 == 6)
    goto LABEL_87;
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v19, (unsigned int *)&v153) & 1) == 0)
  {
    v66 = (FILE *)*MEMORY[0x1E0C80C10];
    v67 = 1726;
LABEL_86:
    fprintf(v66, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v67);
    goto LABEL_87;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v19, (unsigned int *)&v152 + 1) & 1) == 0)
  {
    v66 = (FILE *)*MEMORY[0x1E0C80C10];
    v67 = 1728;
    goto LABEL_86;
  }
  std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::vector((geo::codec::Allocator *)v151, v153);
  std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::vector((geo::codec::Allocator *)&v149, HIDWORD(v152));
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)&v147, HIDWORD(v152));
  std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::vector((geo::codec::Allocator *)v146, v132);
  memset(v145, 0, sizeof(v145));
  if (*((_QWORD *)&v151[0] + 1) - *(_QWORD *)&v151[0] != v153)
  {
    v80 = (FILE *)*MEMORY[0x1E0C80C10];
    v81 = 1740;
LABEL_101:
    fprintf(v80, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v81);
    v42 = 6;
    goto LABEL_141;
  }
  if ((geo::codec::decodeIntCompressorArray<unsigned char>((_QWORD *)v19, (uint64_t *)v145, v155[1], v155[0], *((_QWORD *)&v151[0] + 1) - *(_QWORD *)&v151[0], *(uint8x8_t **)&v151[0]) & 1) == 0)
  {
    v80 = (FILE *)*MEMORY[0x1E0C80C10];
    v81 = 1741;
    goto LABEL_101;
  }
  v143 = 0u;
  v144 = 0u;
  v40 = (v150 - (uint64_t)v149) >> 1;
  if (v40 == HIDWORD(v152))
  {
    if ((geo::codec::decodeIntCompressorArray<unsigned short>((_QWORD *)v19, (uint64_t *)&v143, v155[1], v155[0], v40, v149) & 1) != 0)
    {
      memset(v142, 0, sizeof(v142));
      v41 = (v148 - (uint64_t)v147) >> 2;
      if (v41 == HIDWORD(v152))
      {
        if ((geo::codec::decodeIntCompressorArray<unsigned int>((_QWORD *)v19, (uint64_t *)v142, v155[1], v155[0], v41, v147) & 1) != 0)
        {
          *(_OWORD *)v140 = 0u;
          v141 = 0u;
          if (v132 == (uint64_t)(*((_QWORD *)&v146[0] + 1) - *(_QWORD *)&v146[0]) >> 1)
          {
            if ((geo::codec::decodeIntCompressorArray<unsigned short>((_QWORD *)v19, (uint64_t *)v140, v155[1], v155[0], v132, *(uint16x8_t **)&v146[0]) & 1) != 0)
            {
              v137 = 0;
              v138 = 0;
              v139 = 0;
              std::vector<std::shared_ptr<FeatureStyleAttributes>>::reserve((uint64_t)&v137, v153);
              if (v153 <= (unint64_t)((v139 - (uint64_t)v137) >> 4))
              {
                if ((_DWORD)v153)
                {
                  v100 = 0;
                  LODWORD(v101) = 0;
                  do
                  {
                    _ZNSt3__111make_sharedB8ne180100I22FeatureStyleAttributesJEvEENS_10shared_ptrIT_EEDpOT0_(v135);
                    std::vector<std::shared_ptr<FeatureStyleAttributes>>::push_back[abi:ne180100](&v137, (uint64_t)v135);
                    std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)v135);
                    v102 = v101 + *(unsigned __int8 *)(*(_QWORD *)&v151[0] + v100);
                    if ((unsigned __int16)v101 < (unsigned __int16)(v101
                                                                                 + *(unsigned __int8 *)(*(_QWORD *)&v151[0] + v100)))
                    {
                      v103 = v138;
                      v101 = (unsigned __int16)v101;
                      do
                      {
                        v136.var0 = v149->u16[v101];
                        v136.var1 = v147->i32[v101];
                        FeatureStyleAttributes::replaceAttributes(*(FeatureStyleAttributes **)(v103 - 16), &v136, 1);
                        ++v101;
                      }
                      while ((unsigned __int16)v102 != v101);
                      LODWORD(v101) = v102;
                    }
                    ++v100;
                  }
                  while (v100 < v153);
                }
                if ((_DWORD)v132)
                {
                  v104 = 0;
                  v105 = 32;
                  do
                  {
                    v106 = (uint64_t *)&v137[16 * *(unsigned __int16 *)(*(_QWORD *)&v146[0] + v104)];
                    std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]((_QWORD *)(*v130 + v105), *v106, v106[1]);
                    v104 += 2;
                    v105 += 56;
                  }
                  while (2 * v132 != v104);
                }
                v42 = 0;
              }
              else
              {
                fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 1757);
                v42 = 6;
              }
              std::vector<std::shared_ptr<FeatureStyleAttributes>>::~vector[abi:ne180100]((void **)&v137);
              goto LABEL_138;
            }
            v98 = (FILE *)*MEMORY[0x1E0C80C10];
            v99 = 1753;
          }
          else
          {
            v98 = (FILE *)*MEMORY[0x1E0C80C10];
            v99 = 1752;
          }
          fprintf(v98, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v99);
          v42 = 6;
LABEL_138:
          mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v140);
          goto LABEL_139;
        }
        v96 = (FILE *)*MEMORY[0x1E0C80C10];
        v97 = 1749;
      }
      else
      {
        v96 = (FILE *)*MEMORY[0x1E0C80C10];
        v97 = 1748;
      }
      fprintf(v96, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v97);
      v42 = 6;
LABEL_139:
      mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v142);
      goto LABEL_140;
    }
    v84 = (FILE *)*MEMORY[0x1E0C80C10];
    v85 = 1745;
  }
  else
  {
    v84 = (FILE *)*MEMORY[0x1E0C80C10];
    v85 = 1744;
  }
  fprintf(v84, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v85);
  v42 = 6;
LABEL_140:
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&v143);
LABEL_141:
  mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)v145);
  std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)v146);
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v147);
  std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v149);
  std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)v151);
  if (v42 == 6)
    goto LABEL_87;
  *(_QWORD *)&v151[0] = 0;
  VarUint32 = std::vector<GeoCodecsContourPolylineInfo,geo::StdAllocator<GeoCodecsContourPolylineInfo,geo::codec::Allocator>>::resize((uint64_t)(v130 + 6), v131, v151);
  if (v131 != (v130[7] - v130[6]) >> 3)
  {
    v66 = (FILE *)*MEMORY[0x1E0C80C10];
    v67 = 1782;
    goto LABEL_86;
  }
  if (*(_DWORD *)(v19 + 64) < 2u)
    goto LABEL_180;
  LODWORD(v146[0]) = 0;
  VarUint32 = geo::codec::chapterReadVarUint32((_QWORD *)v19, (unsigned int *)v146);
  if ((VarUint32 & 1) == 0)
  {
    v66 = (FILE *)*MEMORY[0x1E0C80C10];
    v67 = 1786;
    goto LABEL_86;
  }
  v107 = v146[0];
  if (!LODWORD(v146[0]))
    goto LABEL_180;
  LODWORD(v145[0]) = 0;
  memset(v151, 0, sizeof(v151));
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)&v149, v131);
  if (v131 == (v150 - (uint64_t)v149) >> 2)
  {
    if (geo::codec::decodeIntCompressorArray<unsigned int>((_QWORD *)v19, (uint64_t *)v151, v155[1], v155[0], v131, (int8x16_t *)v149))
    {
      v108 = v131;
      if ((_DWORD)v131)
      {
        v108 = 0;
        v109 = v149;
        v110 = (__int32 *)(v130[6] + 4);
        do
        {
          *(v110 - 1) = v108;
          v111 = v109->i32[0];
          v109 = (uint16x8_t *)((char *)v109 + 4);
          *v110 = v111;
          v110 += 2;
          v108 += v111;
          --v131;
        }
        while (v131);
      }
      if (v108 == LODWORD(v146[0]))
      {
        if ((geo::codec::chapterReadVarUint32((_QWORD *)v19, (unsigned int *)v145) & 1) != 0)
        {
          v112 = v145[0];
          if (LODWORD(v145[0]))
          {
            std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::vector((geo::codec::Allocator *)&v147, (2 * v107));
            if (2 * v107 == (v148 - (uint64_t)v147) >> 2)
            {
              if (geo::codec::decodeIntCompressorArray<unsigned int>((_QWORD *)v19, (uint64_t *)v151, v155[1], v155[0], (2 * v107), v147))
              {
                std::vector<GeoCodecsContourPolylineAttribute,geo::StdAllocator<GeoCodecsContourPolylineAttribute,geo::codec::Allocator>>::resize((uint64_t)(v130 + 10), LODWORD(v146[0]));
                v113 = v130[10];
                v114 = v130[11] - v113;
                v115 = v114 >> 3;
                if (v114 >> 3 == LODWORD(v146[0]))
                {
                  if (LODWORD(v146[0]))
                  {
                    v116 = 0;
                    v117 = 1.0 / (float)v112;
                    v118 = v147;
                    if ((unint64_t)v114 < 0x20)
                      goto LABEL_163;
                    if ((unint64_t)(v115 - 0x100000001) < 0xFFFFFFFF00000000)
                      goto LABEL_163;
                    v119 = 0;
                    v116 = v115 & 0xFFFFFFFFFFFFFFFCLL;
                    v120 = v115 & 0xFFFFFFFFFFFFFFFCLL;
                    v121 = (float *)v130[10];
                    do
                    {
                      v122 = (const float *)&v118->i32[v119 & 0xFFFFFFF8];
                      v156 = vld2q_f32(v122);
                      v157.val[0] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)v156.val[0]), v117);
                      v157.val[1] = vmulq_n_f32(vcvtq_f32_u32((uint32x4_t)v156.val[1]), v117);
                      vst2q_f32(v121, v157);
                      v121 += 8;
                      v119 += 8;
                      v120 -= 4;
                    }
                    while (v120);
                    if (v115 != v116)
                    {
LABEL_163:
                      v123 = 2 * v116;
                      v124 = v115 - v116;
                      v125 = (float32x2_t *)(v113 + 8 * v116);
                      do
                      {
                        *v125++ = vmul_n_f32(vcvt_f32_u32(*(uint32x2_t *)&v118->i8[4 * (v123 & 0xFFFFFFFE)]), v117);
                        v123 += 2;
                        --v124;
                      }
                      while (v124);
                    }
                  }
                  v126 = 0;
LABEL_179:
                  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v147);
                  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v149);
                  VarUint32 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v151);
                  if (!v126)
                  {
LABEL_180:
                    v23 = 1;
                    if (!*(_BYTE *)v19)
                      goto LABEL_35;
                    goto LABEL_34;
                  }
                  goto LABEL_87;
                }
                v129 = 1816;
              }
              else
              {
                v129 = 1813;
              }
            }
            else
            {
              v129 = 1812;
            }
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v129);
            v126 = 6;
            goto LABEL_179;
          }
          v127 = (FILE *)*MEMORY[0x1E0C80C10];
          v128 = 1808;
        }
        else
        {
          v127 = (FILE *)*MEMORY[0x1E0C80C10];
          v128 = 1807;
        }
      }
      else
      {
        v127 = (FILE *)*MEMORY[0x1E0C80C10];
        v128 = 1805;
      }
    }
    else
    {
      v127 = (FILE *)*MEMORY[0x1E0C80C10];
      v128 = 1798;
    }
  }
  else
  {
    v127 = (FILE *)*MEMORY[0x1E0C80C10];
    v128 = 1797;
  }
  fprintf(v127, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v128);
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)&v149);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v151);
LABEL_87:
  geo::codec::freeChapter(a1, v19);
  if (v38)
    geo::codec::VertexPoolDealloc(v38, v68);
  v23 = 0;
  return v23 & 1;
}

void sub_189AF168C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 240));
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 208));
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_189AF16B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 208));
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_189AF16DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_189AF16F0()
{
  JUMPOUT(0x189AF1750);
}

void sub_189AF16F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x189AF1740);
}

void sub_189AF170C()
{
  JUMPOUT(0x189AF1758);
}

void sub_189AF1714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100](&a35);
  mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)&a39);
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v39 - 240));
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v39 - 208));
  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v39 - 176));
  mgcl::iarray::Decoder::~Decoder((mgcl::iarray::Decoder *)&a27);
  _Unwind_Resume(a1);
}

void sub_189AF1734()
{
  JUMPOUT(0x189AF1760);
}

void sub_189AF173C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;

  std::vector<std::shared_ptr<FeatureStyleAttributes>>::~vector[abi:ne180100](&a20);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a23);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a27);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a31);
  mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)&a35);
  std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100](&a39);
  std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v39 - 240));
  std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v39 - 208));
  std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v39 - 176));
  _Unwind_Resume(a1);
}

void sub_189AF1798(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 208));
  std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 176));
  _Unwind_Resume(a1);
}

void sub_189AF17B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v1 - 176));
  _Unwind_Resume(a1);
}

void sub_189AF17C8()
{
  JUMPOUT(0x189AF17DCLL);
}

void sub_189AF17FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v27 - 176));
  mgcl::iarray::Decoder::~Decoder((mgcl::iarray::Decoder *)&a27);
  _Unwind_Resume(a1);
}

void sub_189AF1818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  mgcl::iarray::Decoder::~Decoder((mgcl::iarray::Decoder *)&a27);
  _Unwind_Resume(a1);
}

void sub_189AF182C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  mgcl::iarray::Decoder::~Decoder((mgcl::iarray::Decoder *)&a27);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100](_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = result;
  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)result[1];
  *result = a2;
  result[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v3;
    }
  }
  return result;
}

void GeoCodecsFeature::~GeoCodecsFeature(GeoCodecsFeature *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  std::__shared_weak_count::__release_weak(v5);
}

uint64_t std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::push_back[abi:ne180100](uint64_t result, _BYTE *a2)
{
  uint64_t v3;
  _BYTE *v4;
  unint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _OWORD *v18;
  __int128 *v19;
  unint64_t v20;
  __int128 v21;
  char v22;

  v3 = result;
  v4 = *(_BYTE **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if ((unint64_t)v4 >= v5)
  {
    v6 = &v4[-*(_QWORD *)result];
    v7 = (unint64_t)(v6 + 1);
    if ((uint64_t)(v6 + 1) < 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v8 = v5 - *(_QWORD *)result;
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), v9, 1);
      v6 += result;
      v10 = result + v9;
      if (result)
        *v6 = *a2;
      v11 = v6 + 1;
      v13 = *(_QWORD *)v3;
      v12 = *(_QWORD *)(v3 + 8);
      v14 = v12 - *(_QWORD *)v3;
      if (v12 == *(_QWORD *)v3)
      {
LABEL_15:
        *(_QWORD *)v3 = v6;
        *(_QWORD *)(v3 + 8) = v11;
        v15 = *(_QWORD *)(v3 + 16);
        *(_QWORD *)(v3 + 16) = v10;
        if (!v12)
        {
LABEL_16:
          *(_QWORD *)(v3 + 8) = v11;
          return result;
        }
LABEL_27:
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v12, v15 - v12);
        goto LABEL_16;
      }
    }
    else
    {
      v10 = 0;
      v11 = v6 + 1;
      v13 = *(_QWORD *)result;
      v12 = *(_QWORD *)(result + 8);
      v14 = v12 - *(_QWORD *)result;
      if (v12 == *(_QWORD *)result)
        goto LABEL_15;
    }
    if (v14 < 0x20 || (unint64_t)(v12 - (_QWORD)v6) < 0x20)
    {
      v16 = v12;
      v17 = v6;
    }
    else
    {
      v16 = v12 - (v14 & 0xFFFFFFFFFFFFFFE0);
      v17 = &v6[-(v14 & 0xFFFFFFFFFFFFFFE0)];
      v18 = v6 - 16;
      v19 = (__int128 *)(v12 - 16);
      v20 = v14 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v21 = *v19;
        *(v18 - 1) = *(v19 - 1);
        *v18 = v21;
        v18 -= 2;
        v19 -= 2;
        v20 -= 32;
      }
      while (v20);
      if (v14 == (v14 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_26:
        v12 = *(_QWORD *)v3;
        *(_QWORD *)v3 = v17;
        *(_QWORD *)(v3 + 8) = v11;
        v15 = *(_QWORD *)(v3 + 16);
        *(_QWORD *)(v3 + 16) = v10;
        if (!v12)
          goto LABEL_16;
        goto LABEL_27;
      }
    }
    do
    {
      v22 = *(_BYTE *)--v16;
      *--v17 = v22;
    }
    while (v16 != v13);
    goto LABEL_26;
  }
  if (v4)
    *v4 = *a2;
  *(_QWORD *)(result + 8) = v4 + 1;
  return result;
}

uint64_t std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]<FeatureStyleAttributes,void>(uint64_t result, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = result;
  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(result + 8);
  *(_OWORD *)result = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      return v2;
    }
  }
  return result;
}

_QWORD *std::unordered_set<unsigned long long>::find[abi:ne180100](uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = (a2 - 1) & a3;
  }
  v5 = *(_QWORD **)(a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    if (v3.u32[0] < 2uLL)
    {
      while (1)
      {
        v8 = result[1];
        if (v8 == a3)
        {
          if (result[2] == a3)
            return result;
        }
        else if ((v8 & (a2 - 1)) != v4)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v7 = result[1];
      if (v7 == a3)
      {
        if (result[2] == a3)
          return result;
      }
      else
      {
        if (v7 >= a2)
          v7 %= a2;
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

char *std::make_shared[abi:ne180100]<FeatureStyleAttributes,std::shared_ptr<FeatureStyleAttributes const> &,GeoCodecsFeatureStylePairExt *,int,void>(_QWORD *a1, uint64_t a2, const void *a3, unsigned __int8 a4)
{
  char *result;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;

  result = (char *)operator new(0x40uLL);
  v9 = result;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  *(_QWORD *)result = &off_1E1BFB2F8;
  v10 = *(_QWORD **)a2;
  v11 = *(_QWORD *)(a2 + 8);
  *((_QWORD *)result + 3) = **(_QWORD **)a2;
  v12 = result + 24;
  *((_QWORD *)result + 4) = v10;
  *((_QWORD *)result + 5) = v11;
  if (v11)
  {
    v13 = (unint64_t *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v10 = *(_QWORD **)a2;
  }
  *((_QWORD *)result + 6) = 0;
  result[56] = 0;
  *(_WORD *)(result + 57) = *((unsigned __int8 *)v10 + 33);
  if (a3)
  {
    if (a4)
    {
      result = (char *)malloc_type_malloc(12 * a4, 0x10000403E1C8BA9uLL);
      *((_QWORD *)v9 + 6) = result;
      if (result)
      {
        v9[56] = a4;
        result = (char *)memcpy(result, a3, 12 * a4);
      }
    }
  }
  *a1 = v12;
  a1[1] = v9;
  return result;
}

void sub_189AF1CEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  shared_weak_owners = (std::__shared_weak_count *)v1[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    p_shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<FeatureStyleAttributes const>,geo::StdAllocator<std::shared_ptr<FeatureStyleAttributes const>,geo::codec::Allocator>>::emplace_back<std::shared_ptr<FeatureStyleAttributes> &>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4)
    {
      v6 = a2[1];
      *v4 = *a2;
      v4[1] = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
    }
    *(_QWORD *)(a1 + 8) = v4 + 2;
    return;
  }
  v9 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 60)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v11 = v5 - *(_QWORD *)a1;
  if (v11 >> 3 > v10)
    v10 = v11 >> 3;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  if (v10)
  {
    v12 = 16 * v10;
    v13 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 16 * v10, 8);
    v14 = (_OWORD *)(v13 + 16 * v9);
    v10 = v13 + v12;
    if (v13)
    {
      v15 = *(_OWORD *)a2;
      *v14 = *(_OWORD *)a2;
      if (*((_QWORD *)&v15 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
    }
    v18 = (uint64_t)(v14 + 1);
    v19 = *(_QWORD **)a1;
    v20 = *(_QWORD **)(a1 + 8);
    if (v20 == *(_QWORD **)a1)
      goto LABEL_29;
    do
    {
LABEL_20:
      v21 = *((_OWORD *)v20 - 1);
      v20 -= 2;
      *--v14 = v21;
      *v20 = 0;
      v20[1] = 0;
    }
    while (v20 != v19);
    v20 = *(_QWORD **)a1;
    v22 = *(_QWORD **)(a1 + 8);
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v18;
    v23 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v10;
    while (v22 != v20)
    {
      v24 = (std::__shared_weak_count *)*(v22 - 1);
      if (v24)
      {
        p_shared_owners = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v22 -= 2;
    }
    goto LABEL_30;
  }
  v14 = (_OWORD *)(16 * v9);
  v18 = 16 * v9 + 16;
  v19 = *(_QWORD **)a1;
  v20 = *(_QWORD **)(a1 + 8);
  if (v20 != *(_QWORD **)a1)
    goto LABEL_20;
LABEL_29:
  *(_QWORD *)a1 = v14;
  *(_QWORD *)(a1 + 8) = v18;
  v23 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
LABEL_30:
  if (v20)
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v20, v23 - (_QWORD)v20);
  *(_QWORD *)(a1 + 8) = v18;
}

void std::vector<GeoCodecsContourLinesFeature,geo::StdAllocator<GeoCodecsContourLinesFeature,geo::codec::Allocator>>::resize(unint64_t *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;

  v4 = *a1;
  v5 = a1[1];
  v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return;
    v18 = v4 + 56 * a2;
    while (1)
    {
      if (v5 == v18)
        goto LABEL_29;
      v19 = *(std::__shared_weak_count **)(v5 - 16);
      if (!v19)
        break;
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (v21)
        break;
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      v22 = *(std::__shared_weak_count **)(v5 - 48);
      if (v22)
        goto LABEL_22;
LABEL_15:
      v5 -= 56;
    }
    v22 = *(std::__shared_weak_count **)(v5 - 48);
    if (!v22)
      goto LABEL_15;
LABEL_22:
    std::__shared_weak_count::__release_weak(v22);
    goto LABEL_15;
  }
  v8 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8 - v5) >> 3) >= v7)
  {
    v18 = v5 + 56 * v7;
    v23 = 56 * a2 - 8 * ((uint64_t)(v5 - *a1) >> 3);
    do
    {
      if (v5)
      {
        *(_QWORD *)(v5 + 48) = 0;
        *(_OWORD *)(v5 + 16) = 0uLL;
        *(_OWORD *)(v5 + 32) = 0uLL;
        *(_OWORD *)v5 = 0uLL;
      }
      v5 += 56;
      v23 -= 56;
    }
    while (v23);
LABEL_29:
    a1[1] = v18;
  }
  else
  {
    if (a2 > 0x492492492492492)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8 - v4) >> 3);
    v10 = 2 * v9;
    if (2 * v9 <= a2)
      v10 = a2;
    if (v9 >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v10;
    v12 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 56 * v11, 8);
    v13 = v12 + 56 * v6;
    v14 = v12 + 56 * a2;
    v15 = 56 * a2 - 56 * v6;
    v16 = 0uLL;
    v17 = v13;
    do
    {
      if (v17)
      {
        *(_QWORD *)(v17 + 48) = 0;
        *(_OWORD *)(v17 + 16) = 0uLL;
        *(_OWORD *)(v17 + 32) = 0uLL;
        *(_OWORD *)v17 = 0uLL;
      }
      v17 += 56;
      v15 -= 56;
    }
    while (v15);
    v24 = v12 + 56 * v11;
    v25 = *a1;
    v26 = a1[1];
    if (v26 != *a1)
    {
      v27 = 0;
      do
      {
        v28 = v13 + v27;
        v29 = v26 + v27;
        *(_OWORD *)(v28 - 56) = *(_OWORD *)(v26 + v27 - 56);
        *(_QWORD *)(v29 - 56) = 0;
        *(_QWORD *)(v29 - 48) = 0;
        v30 = *(_QWORD *)(v26 + v27 - 40);
        *(_QWORD *)(v28 - 33) = *(_QWORD *)(v26 + v27 - 33);
        *(_QWORD *)(v28 - 40) = v30;
        v16 = *(__n128 *)(v26 + v27 - 24);
        *(__n128 *)(v28 - 24) = v16;
        *(_QWORD *)(v29 - 24) = 0;
        *(_QWORD *)(v29 - 16) = 0;
        *(_QWORD *)(v28 - 8) = *(_QWORD *)(v26 + v27 - 8);
        v27 -= 56;
      }
      while (v26 + v27 != v25);
      v26 = *a1;
      v31 = a1[1];
      *a1 = v13 + v27;
      a1[1] = v14;
      v32 = a1[2];
      a1[2] = v24;
      while (1)
      {
        if (v31 == v26)
          goto LABEL_45;
        v33 = *(std::__shared_weak_count **)(v31 - 16);
        if (!v33)
          break;
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (v35)
          break;
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
        v36 = *(std::__shared_weak_count **)(v31 - 48);
        if (v36)
          goto LABEL_41;
LABEL_34:
        v31 -= 56;
      }
      v36 = *(std::__shared_weak_count **)(v31 - 48);
      if (!v36)
        goto LABEL_34;
LABEL_41:
      std::__shared_weak_count::__release_weak(v36);
      goto LABEL_34;
    }
    *a1 = v13;
    a1[1] = v14;
    v32 = a1[2];
    a1[2] = v24;
LABEL_45:
    if (v26)
      (*(void (**)(unint64_t, unint64_t, unint64_t, __n128))(*(_QWORD *)a1[3] + 40))(a1[3], v26, v32 - v26, v16);
  }
}

geo::codec::Allocator *std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::vector(geo::codec::Allocator *a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v4 = geo::codec::Allocator::instance(a1);
  *((_QWORD *)a1 + 3) = v4;
  if (a2)
  {
    v5 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2, 1);
    *(_QWORD *)a1 = v5;
    *((_QWORD *)a1 + 1) = v5;
    v6 = &v5[a2];
    *((_QWORD *)a1 + 2) = &v5[a2];
    do
    {
      if (v5)
        *v5 = 0;
      ++v5;
      --a2;
    }
    while (a2);
    *((_QWORD *)a1 + 1) = v6;
  }
  return a1;
}

void sub_189AF227C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

geo::codec::Allocator *std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::vector(geo::codec::Allocator *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _WORD *v6;
  _WORD *v7;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v4 = geo::codec::Allocator::instance(a1);
  *((_QWORD *)a1 + 3) = v4;
  if (a2)
  {
    v5 = a2;
    v6 = (_WORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5 * 2, 2);
    *(_QWORD *)a1 = v6;
    *((_QWORD *)a1 + 1) = v6;
    v7 = &v6[v5];
    *((_QWORD *)a1 + 2) = &v6[v5];
    do
    {
      if (v6)
        *v6 = 0;
      ++v6;
      --v5;
    }
    while (v5 * 2);
    *((_QWORD *)a1 + 1) = v7;
  }
  return a1;
}

void sub_189AF232C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

geo::codec::Allocator *std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::vector(geo::codec::Allocator *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v4 = geo::codec::Allocator::instance(a1);
  *((_QWORD *)a1 + 3) = v4;
  if (a2)
  {
    v5 = a2;
    v6 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5 * 4, 4);
    *(_QWORD *)a1 = v6;
    *((_QWORD *)a1 + 1) = v6;
    v7 = &v6[v5];
    *((_QWORD *)a1 + 2) = &v6[v5];
    do
    {
      if (v6)
        *v6 = 0;
      ++v6;
      --v5;
    }
    while (v5 * 4);
    *((_QWORD *)a1 + 1) = v7;
  }
  return a1;
}

void sub_189AF23DC(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::shared_ptr<FeatureStyleAttributes>>::reserve(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    v4 = *(char **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_OWORD *)v4 - 1);
        v4 -= 16;
        *((_OWORD *)v9 - 1) = v10;
        v9 -= 16;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (v11 != v2)
      {
        v12 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(p_shared_owners);
          while (__stlxr(v14 - 1, p_shared_owners));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v11 -= 16;
      }
    }
    if (v2)
      operator delete(v2);
  }
}

void std::vector<std::shared_ptr<FeatureStyleAttributes>>::push_back[abi:ne180100](char **a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_OWORD *)v5 = *(_OWORD *)a2;
    v6 = v5 + 16;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
LABEL_3:
    a1[1] = v6;
    return;
  }
  v7 = (v5 - *a1) >> 4;
  if ((unint64_t)(v7 + 1) >> 60)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v8 = v4 - (_QWORD)*a1;
  v9 = v8 >> 3;
  if (v8 >> 3 <= (unint64_t)(v7 + 1))
    v9 = v7 + 1;
  v10 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
  v11 = 0xFFFFFFFFFFFFFFFLL;
  if (!v10)
    v11 = v9;
  if (v11 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v12 = 16 * v11;
  v13 = (char *)operator new(16 * v11);
  v14 = &v13[16 * v7];
  *(_OWORD *)v14 = *(_OWORD *)a2;
  v6 = v14 + 16;
  v15 = &v13[v12];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v16 = *a1;
  v17 = a1[1];
  if (v17 == *a1)
  {
    *a1 = v14;
    a1[1] = v6;
    a1[2] = v15;
  }
  else
  {
    do
    {
      v18 = *((_OWORD *)v17 - 1);
      v17 -= 16;
      *((_OWORD *)v14 - 1) = v18;
      v14 -= 16;
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = 0;
    }
    while (v17 != v16);
    v17 = *a1;
    v19 = a1[1];
    *a1 = v14;
    a1[1] = v6;
    a1[2] = v15;
    while (v19 != v17)
    {
      v20 = (std::__shared_weak_count *)*((_QWORD *)v19 - 1);
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v19 -= 16;
    }
  }
  if (!v17)
    goto LABEL_3;
  operator delete(v17);
  a1[1] = v6;
}

void **std::vector<std::shared_ptr<FeatureStyleAttributes>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t *std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t *std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t std::vector<GeoCodecsContourPolylineInfo,geo::StdAllocator<GeoCodecsContourPolylineInfo,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v4 = result;
  v6 = *(_QWORD *)result;
  v5 = *(_QWORD **)(result + 8);
  v7 = (uint64_t)v5 - *(_QWORD *)result;
  v8 = v7 >> 3;
  v9 = a2 - (v7 >> 3);
  if (a2 <= v7 >> 3)
  {
    if (a2 >= v7 >> 3)
      return result;
    v18 = (_QWORD *)(v6 + 8 * a2);
LABEL_15:
    *(_QWORD *)(result + 8) = v18;
    return result;
  }
  v11 = *(_QWORD *)(result + 16);
  if (v9 <= (v11 - (uint64_t)v5) >> 3)
  {
    v18 = &v5[v9];
    v19 = 8 * a2 - 8 * v8;
    do
    {
      if (v5)
        *v5 = *a3;
      ++v5;
      v19 -= 8;
    }
    while (v19);
    goto LABEL_15;
  }
  if (a2 >> 61)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v12 = v11 - v6;
  v13 = (v11 - v6) >> 2;
  if (v13 <= a2)
    v13 = a2;
  if (v12 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v13;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 8 * v14, 4);
  v15 = (_QWORD *)(result + 8 * v8);
  v16 = 8 * a2 - 8 * v8;
  v17 = v15;
  do
  {
    if (v17)
      *v17 = *a3;
    ++v17;
    v16 -= 8;
  }
  while (v16);
  v21 = *(_QWORD *)v4;
  v20 = *(_QWORD *)(v4 + 8);
  if (v20 != *(_QWORD *)v4)
  {
    v22 = v20 - *(_QWORD *)v4 - 8;
    if (v22 < 0x58)
      goto LABEL_34;
    if ((unint64_t)(v20 - (v7 + result)) < 0x20)
      goto LABEL_34;
    v23 = (v22 >> 3) + 1;
    v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
    v25 = v20 - v24;
    v15 = (_QWORD *)((char *)v15 - v24);
    v26 = (_OWORD *)(result + 8 * v8 - 16);
    v27 = (__int128 *)(v20 - 16);
    v28 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v29 = *v27;
      *(v26 - 1) = *(v27 - 1);
      *v26 = v29;
      v26 -= 2;
      v27 -= 2;
      v28 -= 4;
    }
    while (v28);
    v20 = v25;
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        v30 = *(_QWORD *)(v20 - 8);
        v20 -= 8;
        *--v15 = v30;
      }
      while (v20 != v21);
    }
    v20 = *(_QWORD *)v4;
  }
  *(_QWORD *)v4 = v15;
  *(_QWORD *)(v4 + 8) = result + 8 * a2;
  v31 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v4 + 16) = result + 8 * v14;
  if (v20)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 24) + 40))(*(_QWORD *)(v4 + 24), v20, v31 - v20);
  return result;
}

uint64_t std::vector<GeoCodecsContourPolylineAttribute,geo::StdAllocator<GeoCodecsContourPolylineAttribute,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v3 = result;
  v5 = *(_QWORD *)result;
  v4 = *(_QWORD **)(result + 8);
  v6 = (uint64_t)v4 - *(_QWORD *)result;
  v7 = v6 >> 3;
  v8 = a2 - (v6 >> 3);
  if (a2 <= v6 >> 3)
  {
    if (a2 >= v6 >> 3)
      return result;
    v16 = (_QWORD *)(v5 + 8 * a2);
LABEL_15:
    *(_QWORD *)(result + 8) = v16;
    return result;
  }
  v9 = *(_QWORD *)(result + 16);
  if (v8 <= (v9 - (uint64_t)v4) >> 3)
  {
    v16 = &v4[v8];
    v17 = 8 * a2 - 8 * v7;
    do
    {
      if (v4)
        *v4 = 0;
      ++v4;
      v17 -= 8;
    }
    while (v17);
    goto LABEL_15;
  }
  if (a2 >> 61)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v10 = v9 - v5;
  v11 = (v9 - v5) >> 2;
  if (v11 <= a2)
    v11 = a2;
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    v12 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v12 = v11;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 8 * v12, 4);
  v13 = (_QWORD *)(result + 8 * v7);
  v14 = 8 * a2 - 8 * v7;
  v15 = v13;
  do
  {
    if (v15)
      *v15 = 0;
    ++v15;
    v14 -= 8;
  }
  while (v14);
  v19 = *(_QWORD *)v3;
  v18 = *(_QWORD *)(v3 + 8);
  if (v18 != *(_QWORD *)v3)
  {
    v20 = v18 - *(_QWORD *)v3 - 8;
    if (v20 < 0x58)
      goto LABEL_34;
    if ((unint64_t)(v18 - (v6 + result)) < 0x20)
      goto LABEL_34;
    v21 = (v20 >> 3) + 1;
    v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
    v23 = v18 - v22;
    v13 = (_QWORD *)((char *)v13 - v22);
    v24 = (_OWORD *)(result + 8 * v7 - 16);
    v25 = (__int128 *)(v18 - 16);
    v26 = v21 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27 = *v25;
      *(v24 - 1) = *(v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 2;
      v26 -= 4;
    }
    while (v26);
    v18 = v23;
    if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        v28 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *--v13 = v28;
      }
      while (v18 != v19);
    }
    v18 = *(_QWORD *)v3;
  }
  *(_QWORD *)v3 = v13;
  *(_QWORD *)(v3 + 8) = result + 8 * a2;
  v29 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = result + 8 * v12;
  if (v18)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v18, v29 - v18);
  return result;
}

uint64_t mgcl::raster::PolygonRasterDecoder<unsigned char>::~PolygonRasterDecoder(uint64_t a1)
{
  _QWORD **v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = *(_QWORD ***)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = (_QWORD *)*v3;
      *v3 = 0;
      if (v4)
      {
        v5 = (void *)v4[13];
        if (v5)
        {
          v4[14] = v5;
          operator delete(v5);
        }
        v6 = (void *)v4[10];
        if (v6)
        {
          v4[11] = v6;
          operator delete(v6);
        }
        MEMORY[0x18D76437C](v4, 0x1070C40ADA6D0DELL);
      }
      MEMORY[0x18D76437C](v3, 0x20C4093837F09);
    }
    MEMORY[0x18D76437C](v2, 0x20C4093837F09);
  }
  v7 = *(void **)(a1 + 24);
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = v7;
    operator delete(v7);
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void std::vector<GeoCodecsRoadFeature,geo::StdAllocator<GeoCodecsRoadFeature,geo::codec::Allocator>>::resize(unint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v3 = a1[1];
  v4 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<GeoCodecsRoadFeature,geo::StdAllocator<GeoCodecsRoadFeature,geo::codec::Allocator>>::__append(a1, v6);
    return;
  }
  if (!v5)
  {
    v7 = *a1 + 168 * a2;
    while (1)
    {
      if (v3 == v7)
      {
        a1[1] = v7;
        return;
      }
      v8 = *(std::__shared_weak_count **)(v3 - 136);
      if (!v8)
        break;
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
        break;
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = *(std::__shared_weak_count **)(v3 - 160);
      if (v11)
        goto LABEL_13;
LABEL_6:
      v3 -= 168;
    }
    v11 = *(std::__shared_weak_count **)(v3 - 160);
    if (!v11)
      goto LABEL_6;
LABEL_13:
    std::__shared_weak_count::__release_weak(v11);
    goto LABEL_6;
  }
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::pointer begin;
  std::vector<unsigned int>::pointer end;
  uint64_t v5;
  uint64_t v6;
  std::vector<unsigned int>::size_type v7;
  unsigned int *value;
  uint64_t v9;
  std::vector<unsigned int>::size_type v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char *v15;
  unsigned int *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  unsigned int *v26;

  begin = this->__begin_;
  end = this->__end_;
  v5 = (char *)end - (char *)this->__begin_;
  v6 = v5 >> 2;
  v7 = __sz - (v5 >> 2);
  if (__sz <= v5 >> 2)
  {
    if (__sz >= v5 >> 2)
      return;
    v26 = &begin[__sz];
    goto LABEL_21;
  }
  value = this->__end_cap_.__value_;
  if (v7 <= value - end)
  {
    bzero(this->__end_, 4 * v7);
    v26 = &end[v7];
LABEL_21:
    this->__end_ = v26;
    return;
  }
  if (__sz >> 62)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v9 = (char *)value - (char *)begin;
  v10 = v9 >> 1;
  if (v9 >> 1 <= __sz)
    v10 = __sz;
  v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL;
  v12 = 0x3FFFFFFFFFFFFFFFLL;
  if (!v11)
    v12 = v10;
  if (v12 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v13 = 4 * v12;
  v14 = operator new(4 * v12);
  v15 = &v14[4 * v6];
  bzero(v15, 4 * v7);
  v16 = (unsigned int *)&v15[4 * v7];
  if (end != begin)
  {
    v17 = (char *)end - (char *)begin - 4;
    if (v17 < 0x2C)
      goto LABEL_27;
    if ((unint64_t)((char *)end - v5 - v14) < 0x20)
      goto LABEL_27;
    v18 = (v17 >> 2) + 1;
    v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
    v20 = &end[v19 / 0xFFFFFFFFFFFFFFFCLL];
    v15 -= v19;
    v21 = &v14[4 * v6 - 16];
    v22 = (__int128 *)(end - 4);
    v23 = v18 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v24 = *v22;
      *(v21 - 1) = *(v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 2;
      v23 -= 8;
    }
    while (v23);
    end = v20;
    if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        v25 = *--end;
        *((_DWORD *)v15 - 1) = v25;
        v15 -= 4;
      }
      while (end != begin);
    }
  }
  this->__begin_ = (std::vector<unsigned int>::pointer)v15;
  this->__end_ = v16;
  this->__end_cap_.__value_ = (unsigned int *)&v14[v13];
  if (begin)
    operator delete(begin);
}

void std::vector<GeoCodecsBuildingFootprintFeature,geo::StdAllocator<GeoCodecsBuildingFootprintFeature,geo::codec::Allocator>>::resize(unint64_t *a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v3 = a1[1];
  v4 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<GeoCodecsBuildingFootprintFeature,geo::StdAllocator<GeoCodecsBuildingFootprintFeature,geo::codec::Allocator>>::__append(a1, v6);
    return;
  }
  if (!v5)
  {
    v7 = *a1 + 136 * a2;
    while (1)
    {
      if (v3 == v7)
      {
        a1[1] = v7;
        return;
      }
      v8 = *(std::__shared_weak_count **)(v3 - 104);
      if (!v8)
        break;
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
        break;
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      v11 = *(std::__shared_weak_count **)(v3 - 128);
      if (v11)
        goto LABEL_13;
LABEL_6:
      v3 -= 136;
    }
    v11 = *(std::__shared_weak_count **)(v3 - 128);
    if (!v11)
      goto LABEL_6;
LABEL_13:
    std::__shared_weak_count::__release_weak(v11);
    goto LABEL_6;
  }
}

uint64_t std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 *v19;
  unint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;

  v3 = result;
  v5 = *(_QWORD *)result;
  v4 = *(_BYTE **)(result + 8);
  v6 = &v4[-*(_QWORD *)result];
  v7 = a2 - (_QWORD)v6;
  if (a2 <= (unint64_t)v6)
  {
    if (a2 >= (unint64_t)v6)
      return result;
    v14 = (_BYTE *)(v5 + a2);
LABEL_15:
    *(_QWORD *)(result + 8) = v14;
    return result;
  }
  v8 = *(_QWORD *)(result + 16);
  if (v8 - (uint64_t)v4 >= v7)
  {
    v14 = &v4[v7];
    do
    {
      if (v4)
        *v4 = 0;
      ++v4;
      --v7;
    }
    while (v7);
    goto LABEL_15;
  }
  if ((a2 & 0x8000000000000000) != 0)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v9 = v8 - v5;
  v10 = 2 * v9;
  if (2 * v9 <= a2)
    v10 = a2;
  if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), v11, 1);
  v12 = &v6[result];
  v13 = &v6[result];
  do
  {
    if (v13)
      *v13 = 0;
    ++v13;
    --v7;
  }
  while (v7);
  v16 = *(_QWORD *)v3;
  v15 = *(_QWORD *)(v3 + 8);
  v17 = v15 - *(_QWORD *)v3;
  if (v15 != *(_QWORD *)v3)
  {
    if (v17 < 0x20)
      goto LABEL_34;
    if ((unint64_t)(v5 - (_QWORD)&v4[result] + v15) < 0x20)
      goto LABEL_34;
    v12 -= v17 & 0xFFFFFFFFFFFFFFE0;
    v18 = &v6[result - 16];
    v19 = (__int128 *)(v15 - 16);
    v20 = v17 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v21 = *v19;
      *(v18 - 1) = *(v19 - 1);
      *v18 = v21;
      v18 -= 2;
      v19 -= 2;
      v20 -= 32;
    }
    while (v20);
    v15 -= v17 & 0xFFFFFFFFFFFFFFE0;
    if (v17 != (v17 & 0xFFFFFFFFFFFFFFE0))
    {
LABEL_34:
      do
      {
        v22 = *(_BYTE *)--v15;
        *--v12 = v22;
      }
      while (v15 != v16);
    }
    v15 = *(_QWORD *)v3;
  }
  *(_QWORD *)v3 = v12;
  *(_QWORD *)(v3 + 8) = result + a2;
  v23 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = result + v11;
  if (v15)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v15, v23 - v15);
  return result;
}

_QWORD *std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::resize(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = result[1] - *result;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
    return (_QWORD *)std::vector<unsigned char,geo::StdAllocator<unsigned char,geo::codec::Allocator>>::__append((uint64_t)result, v4);
  if (!v3)
    result[1] = *result + a2;
  return result;
}

uint64_t geo::codec::_decodeTransitLabelsFromStream(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  FILE *v8;
  int v9;
  uint64_t v11;
  unsigned int v12;
  int v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  geo::codec::Allocator *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const void *v46;
  size_t v47;
  _QWORD *v48;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t __key;

  v5 = a1[2];
  v6 = v5 + 1;
  v7 = 8 * a1[1];
  if (v5 + 1 > v7)
  {
    v8 = (FILE *)*MEMORY[0x1E0C80C10];
    v9 = 5584;
    goto LABEL_50;
  }
  v11 = *a1;
  v12 = *(unsigned __int8 *)(*a1 + (v5 >> 3));
  a1[2] = v6;
  if (((v12 >> (~(_BYTE)v5 & 7)) & 1) == 0)
    return 1;
  if (v5 + 6 > v7)
  {
    v8 = (FILE *)*MEMORY[0x1E0C80C10];
    v9 = 5588;
    goto LABEL_50;
  }
  v17 = 0;
  v18 = 5;
  do
  {
    v19 = 8 - (v6 & 7);
    if (v18 < v19)
      v19 = v18;
    v17 = (*(unsigned __int8 *)(v11 + (v6 >> 3)) >> (8 - (v6 & 7) - v19)) & ~(-1 << v19) | (v17 << v19);
    v6 += v19;
    a1[2] = v6;
    v18 -= v19;
  }
  while (v18);
  if (v6 + 5 > v7)
  {
    v8 = (FILE *)*MEMORY[0x1E0C80C10];
    v9 = 5591;
    goto LABEL_50;
  }
  v20 = 0;
  v21 = (v17 + 1);
  v22 = 5;
  do
  {
    v23 = 8 - (v6 & 7);
    if (v22 < v23)
      v23 = v22;
    v20 = (*(unsigned __int8 *)(v11 + (v6 >> 3)) >> (8 - (v6 & 7) - v23)) & ~(-1 << v23) | (v20 << v23);
    v6 += v23;
    a1[2] = v6;
    v22 -= v23;
  }
  while (v22);
  v24 = (v20 + 1);
  if (v6 + v24 > v7)
  {
    v8 = (FILE *)*MEMORY[0x1E0C80C10];
    v9 = 5594;
    goto LABEL_50;
  }
  if (v20 == -1)
  {
    v25 = 0;
  }
  else
  {
    LODWORD(v25) = 0;
    do
    {
      v26 = 8 - (v6 & 7);
      if (v24 < v26)
        v26 = v24;
      v25 = (geo::codec::Allocator *)((*(unsigned __int8 *)(v11 + (v6 >> 3)) >> (8 - (v6 & 7) - v26)) & ~(-1 << v26) | ((_DWORD)v25 << v26));
      v6 += v26;
      a1[2] = v6;
      v24 -= v26;
    }
    while (v24);
  }
  v27 = *a5;
  v51 = *(_QWORD *)(*a5 + 856);
  v52 = 0;
  v28 = *(_DWORD *)(v27 + 864);
  if (!geo::codec::_makeSpaceForLabels(v25, &v52, a5))
  {
    v9 = 5600;
    goto LABEL_49;
  }
  v29 = v52;
  if (!a2)
  {
LABEL_43:
    if (v29 != *(_QWORD *)(*a5 + 1056))
    {
      v9 = 5619;
      goto LABEL_49;
    }
    return 1;
  }
  v30 = 0;
  v50 = v21;
  while (1)
  {
    v33 = a1[2];
    v34 = v33 + 1;
    v35 = 8 * a1[1];
    if (v33 + 1 > v35)
    {
      v9 = 5603;
      goto LABEL_49;
    }
    v36 = *a1;
    v37 = *(unsigned __int8 *)(*a1 + (v33 >> 3));
    a1[2] = v34;
    if (((v37 >> (~(_BYTE)v33 & 7)) & 1) != 0)
      break;
LABEL_30:
    if (++v30 == a2)
      goto LABEL_43;
  }
  if (v34 + v21 > v35)
  {
    v9 = 5607;
    goto LABEL_49;
  }
  v38 = 0;
  if ((_DWORD)v21)
  {
    v39 = v21;
    do
    {
      v40 = 8 - (v34 & 7);
      if (v39 < v40)
        v40 = v39;
      v38 = (*(unsigned __int8 *)(v36 + (v34 >> 3)) >> (8 - (v34 & 7) - v40)) & ~(-1 << v40) | (v38 << v40);
      v34 += v40;
      a1[2] = v34;
      v39 -= v40;
    }
    while (v39);
  }
  if (v38 < v28 - (int)v51)
  {
    v41 = a3 + v30 * a4;
    *(_BYTE *)(v41 + 73) = 1;
    *(_DWORD *)(v41 + 56) = v29;
    v42 = v38;
    v43 = v51 + v38;
    v44 = *a5;
    v45 = *(_QWORD *)(*a5 + 1048) + 24 * v29;
    *(_QWORD *)v45 = v43;
    *(_DWORD *)(v45 + 16) = 0;
    v46 = *(const void **)(v44 + 888);
    v47 = *(_QWORD *)(v44 + 896);
    __key = v42;
    v48 = bsearch(&__key, v46, v47, 0x18uLL, (int (__cdecl *)(const void *, const void *))geo::codec::findLabelLanguageLocal);
    if (v48)
      v31 = v48[2];
    else
      v31 = 0;
    v32 = (_QWORD *)(*(_QWORD *)(*a5 + 1048) + 24 * v29);
    v32[1] = v31;
    *(_QWORD *)(v41 + 16) = *v32;
    ++v29;
    v21 = v50;
    goto LABEL_30;
  }
  v9 = 5608;
LABEL_49:
  v8 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_50:
  fprintf(v8, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v9);
  return 0;
}

uint64_t geo::codec::_decodeLabelTextPlacementsFromStream(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  FILE *v10;
  int v11;
  uint64_t v13;
  unsigned int v14;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int32x2_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float32x2_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  float32x2_t *v81;
  unint64_t v82;
  char v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;

  if (!a2)
    return 1;
  v7 = a1[2];
  v8 = v7 + 1;
  v9 = 8 * a1[1];
  if (v7 + 1 > v9)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    v11 = 5802;
    goto LABEL_13;
  }
  v13 = *a1;
  v14 = *(unsigned __int8 *)(*a1 + (v7 >> 3));
  a1[2] = v8;
  if (((v14 >> (~(_BYTE)v7 & 7)) & 1) == 0)
    return 1;
  if (v7 + 6 > v9)
    goto LABEL_12;
  v20 = 0;
  v21 = 5;
  do
  {
    v22 = 8 - (v8 & 7);
    if (v21 < v22)
      v22 = v21;
    v20 = (*(unsigned __int8 *)(v13 + (v8 >> 3)) >> (8 - (v8 & 7) - v22)) & ~(-1 << v22) | (v20 << v22);
    v8 += v22;
    a1[2] = v8;
    v21 -= v22;
  }
  while (v21);
  v23 = (v20 + 1);
  if (v8 + v23 > v9)
  {
LABEL_12:
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    v11 = 5808;
    goto LABEL_13;
  }
  v24 = 0;
  if (v20 != -1)
  {
    do
    {
      v25 = 8 - (v8 & 7);
      if (v23 < v25)
        v25 = v23;
      v24 = (*(unsigned __int8 *)(v13 + (v8 >> 3)) >> (8 - (v8 & 7) - v25)) & ~(-1 << v25) | (v24 << v25);
      v8 += v25;
      a1[2] = v8;
      v23 -= v25;
    }
    while (v23);
  }
  if (v8 + 3 > v9)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    v11 = 5811;
    goto LABEL_13;
  }
  v26 = 0;
  v27 = 3;
  do
  {
    v28 = 8 - (v8 & 7);
    if (v27 < v28)
      v28 = v27;
    v26 = (*(unsigned __int8 *)(v13 + (v8 >> 3)) >> (8 - (v8 & 7) - v28)) & ~(-1 << v28) | (v26 << v28);
    v8 += v28;
    a1[2] = v8;
    v27 -= v28;
  }
  while (v27);
  if (v8 + 3 > v9)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    v11 = 5814;
    goto LABEL_13;
  }
  v29 = 0;
  v30 = (v26 + 1);
  v31 = 3;
  do
  {
    v32 = 8 - (v8 & 7);
    if (v31 < v32)
      v32 = v31;
    v29 = (*(unsigned __int8 *)(v13 + (v8 >> 3)) >> (8 - (v8 & 7) - v32)) & ~(-1 << v32) | (v29 << v32);
    v8 += v32;
    a1[2] = v8;
    v31 -= v32;
  }
  while (v31);
  if (v8 + 3 > v9)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    v11 = 5817;
    goto LABEL_13;
  }
  v33 = 0;
  v34 = (v29 + 1);
  v35 = 3;
  do
  {
    v36 = 8 - (v8 & 7);
    if (v35 < v36)
      v36 = v35;
    v33 = (*(unsigned __int8 *)(v13 + (v8 >> 3)) >> (8 - (v8 & 7) - v36)) & ~(-1 << v36) | (v33 << v36);
    v8 += v36;
    a1[2] = v8;
    v35 -= v36;
  }
  while (v35);
  v94 = 0;
  if (!BitstreamUnpackBitcount(a1, &v94, 3uLL))
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    v11 = 5820;
    goto LABEL_13;
  }
  v93 = 0;
  v37 = BitstreamUnpackBitcount(a1, &v93, 5uLL);
  if (!v37)
  {
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    v11 = 5823;
    goto LABEL_13;
  }
  v86 = v34;
  v38 = *(unsigned int *)(*a6 + 672);
  if (!*(_QWORD *)(*a6 + 664))
  {
    v87 = *(unsigned int *)(*a6 + 672);
    v45 = geo::codec::Allocator::instance((geo::codec::Allocator *)v37);
    v46 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v45 + 24))(v45, v24, 16);
    v44 = *a6;
    *(_QWORD *)(*a6 + 664) = v46;
    if (!v46)
    {
      v10 = (FILE *)*MEMORY[0x1E0C80C10];
      v11 = 5837;
      goto LABEL_13;
    }
    goto LABEL_45;
  }
  v39 = geo::codec::Allocator::instance((geo::codec::Allocator *)v37);
  v40 = *(_QWORD *)(*a6 + 664);
  if (!v38)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v39 + 40))(v39, v40, 0);
    *(_QWORD *)(*a6 + 664) = 0;
    goto LABEL_50;
  }
  v87 = v38;
  v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39 + 32))(v39, v40, 16 * (*(_DWORD *)(*a6 + 672) + v24));
  v42 = *a6;
  *(_QWORD *)(*a6 + 664) = v41;
  if (!v41)
  {
LABEL_50:
    v10 = (FILE *)*MEMORY[0x1E0C80C10];
    v11 = 5833;
    goto LABEL_13;
  }
  bzero((void *)(v41 + 16 * *(unsigned int *)(v42 + 672)), 16 * v24);
  v44 = *a6;
LABEL_45:
  v47 = 0;
  *(_DWORD *)(v44 + 672) += v24;
  v84 = v94;
  v85 = (v33 + 1);
  v83 = 8 - v94;
  v82 = v93;
  if (a2 <= 1)
    v48 = 1;
  else
    v48 = a2;
  *(float *)v43.i32 = (float)~(-1 << a5);
  __asm { FMOV            V1.2S, #1.0 }
  v54 = vdiv_f32(_D1, (float32x2_t)vdup_lane_s32(v43, 0));
  v80 = v48;
  while (1)
  {
    v56 = a1[2];
    v57 = v56 + 1;
    v58 = 8 * a1[1];
    if (v56 + 1 > v58)
    {
      v10 = (FILE *)*MEMORY[0x1E0C80C10];
      v11 = 5843;
      goto LABEL_13;
    }
    v59 = *a1;
    v60 = *(unsigned __int8 *)(*a1 + (v56 >> 3));
    a1[2] = v57;
    if (((v60 >> (~(_BYTE)v56 & 7)) & 1) == 0)
      goto LABEL_54;
    v61 = v56 + 2;
    if (v61 > v58)
    {
      v10 = (FILE *)*MEMORY[0x1E0C80C10];
      v11 = 5848;
      goto LABEL_13;
    }
    v62 = a3 + v47 * a4;
    v63 = *(unsigned __int8 *)(v59 + (v57 >> 3));
    a1[2] = v61;
    *(_BYTE *)(v62 + 209) = ((v63 >> (~(_BYTE)v57 & 7)) & 1) == 0;
    v92 = 0;
    if (!BitstreamUnpack(a1, (int *)&v92, v30))
    {
      v10 = (FILE *)*MEMORY[0x1E0C80C10];
      v11 = 5852;
      goto LABEL_13;
    }
    v55 = v87;
    *(_DWORD *)(v62 + 184) = v87;
    v64 = v92;
    if (v92 >= 0x100)
    {
      v10 = (FILE *)*MEMORY[0x1E0C80C10];
      v11 = 5855;
      goto LABEL_13;
    }
    *(_BYTE *)(v62 + 205) = v92;
    if (v64)
      break;
LABEL_53:
    v87 = v55;
    v48 = v80;
LABEL_54:
    if (++v47 == v48)
    {
      if (v87 != *(_DWORD *)(*a6 + 672))
      {
        v10 = (FILE *)*MEMORY[0x1E0C80C10];
        v11 = 5901;
        goto LABEL_13;
      }
      return 1;
    }
  }
  v81 = (float32x2_t *)(a3 + v47 * a4);
  v78 = v47;
  v79 = v30;
  v65 = 0;
  v66 = 16 * v87;
  while (1)
  {
    if (v55 + v65 >= (unint64_t)*(unsigned int *)(*a6 + 672))
    {
      v10 = (FILE *)*MEMORY[0x1E0C80C10];
      v11 = 5859;
      goto LABEL_13;
    }
    v67 = *(_QWORD *)(*a6 + 664);
    v91 = 0;
    if (!BitstreamUnpack(a1, &v91, v86))
    {
      v10 = (FILE *)*MEMORY[0x1E0C80C10];
      v11 = 5863;
      goto LABEL_13;
    }
    *(_BYTE *)(v67 + v66) = v91;
    v90 = 0;
    if (!BitstreamUnpack(a1, &v90, v85))
    {
      v10 = (FILE *)*MEMORY[0x1E0C80C10];
      v11 = 5867;
      goto LABEL_13;
    }
    *(_BYTE *)(v67 + v66 + 1) = v90;
    v68 = a1[2];
    v69 = v68 + 1;
    v70 = 8 * a1[1];
    if (v68 + 1 > v70)
    {
      v10 = (FILE *)*MEMORY[0x1E0C80C10];
      v11 = 5871;
      goto LABEL_13;
    }
    v71 = *(unsigned __int8 *)(*a1 + (v68 >> 3));
    a1[2] = v69;
    if (((v71 >> (~(_BYTE)v68 & 7)) & 1) != 0)
    {
      v89 = 0;
      if (!BitstreamUnpack(a1, (int *)&v89, v84))
      {
        v10 = (FILE *)*MEMORY[0x1E0C80C10];
        v11 = 5874;
        goto LABEL_13;
      }
      v72 = v67 + v66;
      *(_BYTE *)(v72 + 2) = 10;
      *(_BYTE *)(v72 + 4) = v89 << v83;
      v69 = a1[2];
      v70 = 8 * a1[1];
    }
    else
    {
      *(_BYTE *)(v67 + v66 + 2) = 9;
    }
    v73 = v69 + 1;
    if (v69 + 1 > v70)
    {
      v10 = (FILE *)*MEMORY[0x1E0C80C10];
      v11 = 5882;
      goto LABEL_13;
    }
    v74 = *a1;
    v75 = *(unsigned __int8 *)(*a1 + (v69 >> 3));
    a1[2] = v73;
    *(_BYTE *)(v67 + v66 + 3) = ((v75 >> (~(_BYTE)v69 & 7)) & 1) == 0;
    v76 = v69 + 2;
    if (v76 > v70)
    {
      v10 = (FILE *)*MEMORY[0x1E0C80C10];
      v11 = 5886;
      goto LABEL_13;
    }
    v77 = *(unsigned __int8 *)(v74 + (v73 >> 3));
    a1[2] = v76;
    if (a5)
    {
      if (((1 << (~(_BYTE)v73 & 7)) & v77) != 0)
        break;
    }
LABEL_62:
    ++v65;
    v66 += 16;
    v55 = v87;
    if (v64 == (_DWORD)v65)
    {
      v55 = (v87 + v65);
      v47 = v78;
      v30 = v79;
      goto LABEL_53;
    }
  }
  *(_BYTE *)(v67 + v66 + 5) = 1;
  v88 = 0;
  v89 = 0;
  if (!BitstreamUnpackSigned(a1, (int *)&v89, v82))
  {
    v11 = 5891;
    goto LABEL_93;
  }
  if (BitstreamUnpackSigned(a1, (int *)&v88, v82))
  {
    *(float32x2_t *)(v67 + v66 + 8) = vmla_f32(v81[11], vcvt_f32_s32((int32x2_t)__PAIR64__(v88, v89)), v54);
    goto LABEL_62;
  }
  v11 = 5892;
LABEL_93:
  v10 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_13:
  fprintf(v10, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v11);
  return 0;
}

uint64_t geo::codec::_readTransitSystemsChapterIDSet(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  FILE *v6;
  int v7;
  uint64_t v9;
  unsigned int v10;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;

  v3 = a1[2];
  v4 = v3 + 1;
  v5 = 8 * a1[1];
  if (v3 + 1 <= v5)
  {
    v9 = *a1;
    v10 = *(unsigned __int8 *)(*a1 + (v3 >> 3));
    a1[2] = v4;
    if (((v10 >> (~(_BYTE)v3 & 7)) & 1) != 0)
    {
      if (v3 + 7 > v5)
      {
        v6 = (FILE *)*MEMORY[0x1E0C80C10];
        v7 = 6255;
        goto LABEL_28;
      }
      v13 = 0;
      v14 = 6;
      do
      {
        v15 = 8 - (v4 & 7);
        if (v14 < v15)
          v15 = v14;
        v13 = (*(unsigned __int8 *)(v9 + (v4 >> 3)) >> (8 - (v4 & 7) - v15)) & ~(-1 << v15) | (v13 << v15);
        v4 += v15;
        a1[2] = v4;
        v14 -= v15;
      }
      while (v14);
      if (a2)
      {
        v16 = 0;
        v17 = (v13 + 1);
        if (v13 == -1)
        {
          while (1)
          {
            v26 = 0;
            if (a1[2] + v17 > 8 * a1[1])
              break;
            v19 = *(_QWORD *)(a3 + 24);
            if (v19)
            {
              v27 = &v26;
              v28 = v16;
              (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v19 + 48))(v19, &v28, &v27);
            }
            ++v16;
            result = 1;
            if (a2 == v16)
              return result;
          }
        }
        else
        {
          while (1)
          {
            v26 = 0;
            v20 = a1[2];
            if (v20 + v17 > 8 * a1[1])
              break;
            v21 = 0;
            v22 = *a1;
            v23 = v17;
            do
            {
              v24 = 8 - (v20 & 7);
              if (v23 < v24)
                v24 = v23;
              v21 = (*(unsigned __int8 *)(v22 + (v20 >> 3)) >> (8 - (v20 & 7) - v24)) & (unint64_t)~(-1 << v24) | (v21 << v24);
              v20 += v24;
              a1[2] = v20;
              v23 -= v24;
            }
            while (v23);
            v26 = v21;
            v25 = *(_QWORD *)(a3 + 24);
            if (v25)
            {
              v27 = &v26;
              v28 = v16;
              (*(void (**)(uint64_t, uint64_t *, unint64_t **))(*(_QWORD *)v25 + 48))(v25, &v28, &v27);
            }
            ++v16;
            result = 1;
            if (v16 == a2)
              return result;
          }
        }
        v6 = (FILE *)*MEMORY[0x1E0C80C10];
        v7 = 6260;
        goto LABEL_28;
      }
    }
    return 1;
  }
  v6 = (FILE *)*MEMORY[0x1E0C80C10];
  v7 = 6249;
LABEL_28:
  fprintf(v6, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v7);
  return 0;
}

uint64_t geo::codec::_readTransitSystemsChapterLabelSet(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unsigned int v10;
  FILE *v11;
  int v12;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  geo::codec::Allocator *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const void *v40;
  size_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t __key;

  v4 = a1[2];
  v5 = v4 + 1;
  v6 = 8 * a1[1];
  if (v4 + 1 > v6)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 6276);
    return 0;
  }
  v9 = *a1;
  v10 = *(unsigned __int8 *)(*a1 + (v4 >> 3));
  a1[2] = v5;
  if (((v10 >> (~(_BYTE)v4 & 7)) & 1) == 0)
    return 1;
  if (v4 + 6 > v6)
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    v12 = 6283;
    goto LABEL_58;
  }
  v16 = 0;
  v50 = *(_QWORD *)(*a4 + 856);
  v51 = *(_QWORD *)(*a4 + 864) - v50;
  v17 = 5;
  do
  {
    v18 = 8 - (v5 & 7);
    if (v17 < v18)
      v18 = v17;
    v16 = (*(unsigned __int8 *)(v9 + (v5 >> 3)) >> (8 - (v5 & 7) - v18)) & ~(-1 << v18) | (v16 << v18);
    v5 += v18;
    a1[2] = v5;
    v17 -= v18;
  }
  while (v17);
  v19 = (v16 + 1);
  if (a2)
  {
    if (v16 == -1)
    {
      v21 = 0;
      v46 = a2;
      v47 = v5;
      while (v47 + 1 <= v6)
      {
        v48 = *(unsigned __int8 *)(v9 + (v47 >> 3));
        a1[2] = v47 + 1;
        if (((v48 >> (~(_BYTE)v47 & 7)) & 1) != 0)
        {
          if (v19 + 1 + v47 > v6)
          {
LABEL_50:
            v11 = (FILE *)*MEMORY[0x1E0C80C10];
            v12 = 6294;
            goto LABEL_58;
          }
          v21 = (geo::codec::Allocator *)((char *)v21 + 1);
        }
        ++v47;
        if (!--v46)
          goto LABEL_24;
      }
    }
    else
    {
      v20 = 0;
      v21 = 0;
      v22 = v5;
      while (1)
      {
        v23 = v22 + 1;
        if (v22 + 1 > v6)
          break;
        v24 = *(unsigned __int8 *)(v9 + (v22 >> 3));
        a1[2] = v23;
        if (((v24 >> (~(_BYTE)v22 & 7)) & 1) != 0)
        {
          if (v23 + v19 > v6)
            goto LABEL_50;
          v25 = v19;
          do
          {
            v26 = 8 - (v23 & 7);
            if (v25 < v26)
              v26 = v25;
            v23 += v26;
            v25 -= v26;
          }
          while (v25);
          a1[2] = v23;
          v21 = (geo::codec::Allocator *)((char *)v21 + 1);
        }
        ++v20;
        v22 = v23;
        if (v20 == a2)
          goto LABEL_24;
      }
    }
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    v12 = 6291;
    goto LABEL_58;
  }
  v21 = 0;
LABEL_24:
  a1[2] = v5;
  v52 = 0;
  if (!geo::codec::_makeSpaceForLabels(v21, &v52, a4))
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    v12 = 6301;
    goto LABEL_58;
  }
  v27 = v52;
  if (a2)
  {
    v28 = 0;
    while (1)
    {
      v29 = a1[2];
      v30 = v29 + 1;
      v31 = 8 * a1[1];
      if (v29 + 1 > v31)
      {
        v11 = (FILE *)*MEMORY[0x1E0C80C10];
        v12 = 6305;
        goto LABEL_58;
      }
      v32 = *a1;
      v33 = *(unsigned __int8 *)(*a1 + (v29 >> 3));
      a1[2] = v30;
      if (((v33 >> (~(_BYTE)v29 & 7)) & 1) != 0)
        break;
LABEL_28:
      if (++v28 == a2)
        goto LABEL_52;
    }
    if (v30 + v19 > v31)
    {
      v11 = (FILE *)*MEMORY[0x1E0C80C10];
      v12 = 6308;
      goto LABEL_58;
    }
    v34 = 0;
    if ((_DWORD)v19)
    {
      v35 = v19;
      do
      {
        v36 = 8 - (v30 & 7);
        if (v35 < v36)
          v36 = v35;
        v34 = (*(unsigned __int8 *)(v32 + (v30 >> 3)) >> (8 - (v30 & 7) - v36)) & ~(-1 << v36) | (v34 << v36);
        v30 += v36;
        a1[2] = v30;
        v35 -= v36;
      }
      while (v35);
    }
    v37 = v34;
    if (v51 <= v34)
    {
      v11 = (FILE *)*MEMORY[0x1E0C80C10];
      v12 = 6309;
LABEL_58:
      fprintf(v11, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v12);
      v49 = 0;
      return v49 != 0;
    }
    v38 = *a4;
    v39 = *(_QWORD *)(*a4 + 1048) + 24 * v27;
    *(_QWORD *)v39 = v50 + v37;
    *(_DWORD *)(v39 + 16) = 0;
    v40 = *(const void **)(v38 + 888);
    v41 = *(_QWORD *)(v38 + 896);
    __key = v37;
    v42 = bsearch(&__key, v40, v41, 0x18uLL, (int (__cdecl *)(const void *, const void *))geo::codec::findLabelLanguageLocal);
    if (v42)
    {
      v43 = *(_QWORD *)(*a4 + 1048);
      *(_QWORD *)(v43 + 24 * v27 + 8) = v42[2];
      v44 = *(_QWORD *)(a3 + 24);
      if (!v44)
        goto LABEL_27;
    }
    else
    {
      v43 = *(_QWORD *)(*a4 + 1048);
      *(_QWORD *)(v43 + 24 * v27 + 8) = 0;
      v44 = *(_QWORD *)(a3 + 24);
      if (!v44)
      {
LABEL_27:
        ++v27;
        goto LABEL_28;
      }
    }
    v45 = *(_QWORD *)(v43 + 24 * v27);
    v54 = v27;
    __key = v28;
    v53 = v45;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)v44 + 48))(v44, &__key, &v54, &v53);
    goto LABEL_27;
  }
LABEL_52:
  if (v27 != *(_QWORD *)(*a4 + 1056))
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    v12 = 6321;
    goto LABEL_58;
  }
  v49 = 1;
  return v49 != 0;
}

uint64_t geo::codec::_convertTransitLineKeys(geo::codec::Allocator *a1, uint64_t a2, geo::codec::Allocator **a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v8;
  geo::codec::Allocator *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  if (!a2)
    return 1;
  v6 = a2;
  v8 = geo::codec::Allocator::instance(a1);
  v9 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, 8 * v6, 8);
  if (v9)
  {
    *a3 = v9;
    v10 = *a4;
    v11 = *(_QWORD *)(*a4 + 1312);
    v12 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(*a4 + 1320) - v11) >> 3);
    v13 = (unsigned int *)(*(_QWORD *)a1 + 4);
    do
    {
      while (1)
      {
        v16 = *(v13 - 1);
        if (v12 > v16)
          break;
        *(_QWORD *)v9 = -1;
        v9 = (geo::codec::Allocator *)((char *)v9 + 8);
        v13 += 2;
        if (!--v6)
          goto LABEL_9;
      }
      v14 = *v13;
      v13 += 2;
      v15 = *(_QWORD *)(v11 + 72 * v16) + v14;
      if (v15 >= 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)(v10 + 1288) - *(_QWORD *)(v10 + 1280)) >> 3))
        v15 = -1;
      *(_QWORD *)v9 = v15;
      v9 = (geo::codec::Allocator *)((char *)v9 + 8);
      --v6;
    }
    while (v6);
LABEL_9:
    v17 = geo::codec::Allocator::instance(v9);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v17 + 40))(v17, *(_QWORD *)a1, 0);
    *(_QWORD *)a1 = 0;
    return 1;
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 6334);
    return 0;
  }
}

void FeatureStyleAttributesSet::~FeatureStyleAttributesSet(FeatureStyleAttributesSet *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *((_QWORD *)this + 4);
    v4 = *((_QWORD *)this + 3);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), v4, *((_QWORD *)this + 5) - v4);
  }
  std::__tree<std::shared_ptr<FeatureStyleAttributes const>,FeatureStyleAttributesSet::FeatureStyleAttributesCompare,std::allocator<std::shared_ptr<FeatureStyleAttributes const>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

uint64_t *std::vector<std::shared_ptr<FeatureStyleAttributes const>,geo::StdAllocator<std::shared_ptr<FeatureStyleAttributes const>,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *, uint64_t))v5->__on_zero_shared)(v5, v4);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

uint64_t std::vector<GeoCodecsVectorTileRawPoint,geo::StdAllocator<GeoCodecsVectorTileRawPoint,geo::codec::Allocator>>::reserve(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  if (a2 > (uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 3)
  {
    if (a2 >> 61)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = *(_QWORD *)(result + 8) - *(_QWORD *)result;
    v4 = 8 * a2;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 8 * a2, 4);
    v5 = result + (v3 & 0xFFFFFFFFFFFFFFF8);
    v6 = result + v4;
    v8 = *(_QWORD *)v2;
    v7 = *(_QWORD *)(v2 + 8);
    v9 = v7 - *(_QWORD *)v2;
    if (v7 == *(_QWORD *)v2)
    {
      *(_QWORD *)v2 = v5;
      *(_QWORD *)(v2 + 8) = v5;
      v12 = *(_QWORD *)(v2 + 16);
      *(_QWORD *)(v2 + 16) = v6;
      if (!v7)
        return result;
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 24) + 40))(*(_QWORD *)(v2 + 24), v7, v12 - v7);
    }
    v10 = v9 - 8;
    if ((unint64_t)(v9 - 8) >= 0x58)
    {
      v11 = result + (v3 & 0xFFFFFFFFFFFFFFF8);
      if (v7 - (v3 & 0xFFFFFFFFFFFFFFF8) - result >= 0x20)
      {
        v13 = (v10 >> 3) + 1;
        v14 = 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
        v15 = v7 - v14;
        v11 = v5 - v14;
        v16 = (_OWORD *)(result + 8 * (v3 >> 3) - 16);
        v17 = (__int128 *)(v7 - 16);
        v18 = v13 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v19 = *v17;
          *(v16 - 1) = *(v17 - 1);
          *v16 = v19;
          v16 -= 2;
          v17 -= 2;
          v18 -= 4;
        }
        while (v18);
        v7 = v15;
        if (v13 == (v13 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_13:
          v7 = *(_QWORD *)v2;
          *(_QWORD *)v2 = v11;
          *(_QWORD *)(v2 + 8) = v5;
          v12 = *(_QWORD *)(v2 + 16);
          *(_QWORD *)(v2 + 16) = v6;
          if (!v7)
            return result;
          return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 24) + 40))(*(_QWORD *)(v2 + 24), v7, v12 - v7);
        }
      }
    }
    else
    {
      v11 = result + (v3 & 0xFFFFFFFFFFFFFFF8);
    }
    do
    {
      v20 = *(_QWORD *)(v7 - 8);
      v7 -= 8;
      *(_QWORD *)(v11 - 8) = v20;
      v11 -= 8;
    }
    while (v7 != v8);
    goto LABEL_13;
  }
  return result;
}

uint64_t std::vector<GeoCodecsVectorTileRawPoint,geo::StdAllocator<GeoCodecsVectorTileRawPoint,geo::codec::Allocator>>::push_back[abi:ne180100](uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if ((unint64_t)v4 >= v5)
  {
    v6 = ((uint64_t)v4 - *(_QWORD *)result) >> 3;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v8 = v5 - *(_QWORD *)result;
    if (v8 >> 2 > v7)
      v7 = v8 >> 2;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v7 = 0x1FFFFFFFFFFFFFFFLL;
    if (v7)
    {
      v9 = 8 * v7;
      result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 8 * v7, 4);
      v10 = (_QWORD *)(result + 8 * v6);
      v7 = result + v9;
      if (result)
        *v10 = *a2;
      v11 = (uint64_t)(v10 + 1);
      v13 = *(_QWORD *)v3;
      v12 = *(_QWORD *)(v3 + 8);
      v14 = v12 - *(_QWORD *)v3;
      if (v12 == *(_QWORD *)v3)
      {
LABEL_14:
        *(_QWORD *)v3 = v10;
        *(_QWORD *)(v3 + 8) = v11;
        v15 = *(_QWORD *)(v3 + 16);
        *(_QWORD *)(v3 + 16) = v7;
        if (!v12)
        {
LABEL_15:
          *(_QWORD *)(v3 + 8) = v11;
          return result;
        }
LABEL_26:
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v12, v15 - v12);
        goto LABEL_15;
      }
    }
    else
    {
      v10 = (_QWORD *)(8 * v6);
      v11 = 8 * v6 + 8;
      v13 = *(_QWORD *)result;
      v12 = *(_QWORD *)(result + 8);
      v14 = v12 - *(_QWORD *)result;
      if (v12 == *(_QWORD *)result)
        goto LABEL_14;
    }
    v16 = v14 - 8;
    if (v16 < 0x38 || (unint64_t)(v12 - (_QWORD)v10) < 0x20)
    {
      v19 = v12;
      v20 = v10;
    }
    else
    {
      v17 = (v16 >> 3) + 1;
      v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
      v19 = v12 - v18;
      v20 = &v10[v18 / 0xFFFFFFFFFFFFFFF8];
      v21 = v10 - 2;
      v22 = (__int128 *)(v12 - 16);
      v23 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      if (v17 == (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_25:
        v12 = *(_QWORD *)v3;
        *(_QWORD *)v3 = v20;
        *(_QWORD *)(v3 + 8) = v11;
        v15 = *(_QWORD *)(v3 + 16);
        *(_QWORD *)(v3 + 16) = v7;
        if (!v12)
          goto LABEL_15;
        goto LABEL_26;
      }
    }
    do
    {
      v25 = *(_QWORD *)(v19 - 8);
      v19 -= 8;
      *--v20 = v25;
    }
    while (v19 != v13);
    goto LABEL_25;
  }
  if (v4)
    *v4 = *a2;
  *(_QWORD *)(result + 8) = v4 + 1;
  return result;
}

geo::codec::Allocator *std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::vector(geo::codec::Allocator *a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v6 = geo::codec::Allocator::instance(a1);
  *((_QWORD *)a1 + 3) = v6;
  if (a2)
  {
    if (a2 >> 61)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v7 = a2;
    v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v7 * 8, 8);
    *(_QWORD *)a1 = v8;
    *((_QWORD *)a1 + 1) = v8;
    v9 = &v8[v7];
    *((_QWORD *)a1 + 2) = &v8[v7];
    do
    {
      if (v8)
        *v8 = *a3;
      ++v8;
      --v7;
    }
    while (v7 * 8);
    *((_QWORD *)a1 + 1) = v9;
  }
  return a1;
}

void sub_189AF4A34(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t *std::vector<GeoCodecsVectorTileRawPoint,geo::StdAllocator<GeoCodecsVectorTileRawPoint,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

int64x2_t **std::vector<unsigned long long>::vector(int64x2_t **a1, unint64_t a2, unint64_t *a3)
{
  int64x2_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int64x2_t v12;
  int64x2_t *v13;
  uint64_t v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v6 = (int64x2_t *)operator new(8 * a2);
    *a1 = v6;
    a1[1] = v6;
    v7 = (unint64_t *)v6 + a2;
    a1[2] = (int64x2_t *)v7;
    v8 = *a3;
    v9 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    v10 = (unint64_t *)v6;
    if (v9 < 3)
      goto LABEL_13;
    v11 = v9 + 1;
    v10 = (unint64_t *)v6 + (v11 & 0x3FFFFFFFFFFFFFFCLL);
    v12 = vdupq_n_s64(v8);
    v13 = v6 + 1;
    v14 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v13[-1] = v12;
      *v13 = v12;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_13:
      do
        *v10++ = v8;
      while (v10 != v7);
    }
    a1[1] = (int64x2_t *)v7;
  }
  return a1;
}

void sub_189AF4BA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t geo::codec::_readConnectivity(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::chrono::steady_clock::time_point v12;
  uint64_t VarUint32;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  FILE *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  size_t v34;
  size_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  FILE *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  FILE *v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  FILE *v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  int8x16_t *v80;
  uint64_t v81;
  unsigned __int32 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t __p;
  int8x16_t *__pa;
  unint64_t v88;
  void *v89[3];
  int v90;
  _OWORD v91[2];
  void *v92[3];
  int v93;
  _OWORD v94[2];
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  _QWORD v98[6];

  v2 = a1[1];
  if (!v2)
    goto LABEL_16;
  v4 = 0;
  v5 = 0;
  while (*(_WORD *)(*a1 + 16 * v4) != 60)
  {
    v4 = ++v5;
    if (v2 <= v5)
      goto LABEL_16;
  }
  v6 = geo::codec::chapterAt((uint64_t)a1, v5, 60, *a2 + 1912);
  if (!v6)
  {
LABEL_16:
    v22 = 1;
    return v22 & 1;
  }
  v7 = v6;
  v9 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  v98[1] = "ChapterConnectivity";
  v98[2] = v9;
  v98[3] = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v98[4] = v12.__d_.__rep_;
  v98[0] = 0;
  VarUint32 = geo::codec::chapterReadVarUint32((_QWORD *)v7, (unsigned int *)v98 + 1);
  if ((VarUint32 & 1) == 0)
  {
    v24 = (FILE *)*MEMORY[0x1E0C80C10];
    v25 = 7516;
    goto LABEL_80;
  }
  *(_QWORD *)(*a2 + 720) = HIDWORD(v98[0]);
  v14 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
  v15 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v14 + 24))(v14, *(_QWORD *)(*a2 + 720), 16);
  *(_QWORD *)(*a2 + 712) = v15;
  if (!v15)
  {
    v24 = (FILE *)*MEMORY[0x1E0C80C10];
    v25 = 7519;
    goto LABEL_80;
  }
  v16 = geo::codec::chapterReadVarUint32((_QWORD *)v7, (unsigned int *)v98);
  if ((v16 & 1) == 0)
  {
    v24 = (FILE *)*MEMORY[0x1E0C80C10];
    v25 = 7521;
    goto LABEL_80;
  }
  *(_QWORD *)(*a2 + 696) = LODWORD(v98[0]);
  v17 = geo::codec::Allocator::instance((geo::codec::Allocator *)v16);
  v18 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v17 + 24))(v17, *(_QWORD *)(*a2 + 696), 32);
  v19 = (_QWORD *)*a2;
  *(_QWORD *)(*a2 + 688) = v18;
  if (!v18)
  {
    v24 = (FILE *)*MEMORY[0x1E0C80C10];
    v25 = 7525;
    goto LABEL_80;
  }
  if (v19[87])
  {
    v20 = 0;
    v21 = 0;
    do
    {
      v26 = v19[86];
      LODWORD(v94[0]) = 0;
      v18 = geo::codec::chapterReadVarUint32((_QWORD *)v7, (unsigned int *)v94);
      if ((v18 & 1) == 0)
      {
        v24 = (FILE *)*MEMORY[0x1E0C80C10];
        v25 = 7530;
        goto LABEL_80;
      }
      v19 = (_QWORD *)*a2;
      if (v21 + (unint64_t)LODWORD(v94[0]) > *(_QWORD *)(*a2 + 720))
      {
        v24 = (FILE *)*MEMORY[0x1E0C80C10];
        v25 = 7531;
        goto LABEL_80;
      }
      *(_DWORD *)(v26 + 32 * v20) = v94[0];
      *(_DWORD *)(v26 + 32 * v20 + 4) = v21;
      if (LODWORD(v94[0]))
      {
        v27 = 0;
        v28 = 16 * v21;
        do
        {
          LODWORD(v91[0]) = 0;
          if ((geo::codec::chapterReadVarUint32((_QWORD *)v7, (unsigned int *)v91) & 1) == 0)
          {
            v24 = (FILE *)*MEMORY[0x1E0C80C10];
            v25 = 7538;
            goto LABEL_80;
          }
          LODWORD(v92[0]) = 0;
          v18 = geo::codec::chapterReadVarUint32((_QWORD *)v7, (unsigned int *)v92);
          if ((v18 & 1) == 0)
          {
            v24 = (FILE *)*MEMORY[0x1E0C80C10];
            v25 = 7541;
            goto LABEL_80;
          }
          v19 = (_QWORD *)*a2;
          v29 = (_DWORD *)(*(_QWORD *)(*a2 + 712) + v28);
          *v29 = v20;
          v29[1] = v91[0];
          v29[2] = 0;
          v29[3] = v92[0];
          ++v27;
          v28 += 16;
        }
        while (v27 < LODWORD(v94[0]));
        v21 += v27;
      }
      ++v20;
    }
    while (v20 < v19[87]);
  }
  if (v19[89])
  {
    v30 = geo::codec::Allocator::instance((geo::codec::Allocator *)v18);
    v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, 8 * *(_QWORD *)(*a2 + 720), 8);
    v32 = (_QWORD *)*a2;
    *(_QWORD *)(*a2 + 728) = v31;
    if (!v31)
    {
      v24 = (FILE *)*MEMORY[0x1E0C80C10];
      v25 = 7555;
      goto LABEL_80;
    }
    if (v32[90])
    {
      v33 = 0;
      v34 = 0;
      do
      {
        *(_QWORD *)(v32[91] + 8 * v34++) = v32[89] + v33;
        v32 = (_QWORD *)*a2;
        v35 = *(_QWORD *)(*a2 + 720);
        v33 += 16;
      }
      while (v34 < v35);
      v31 = (void *)v32[91];
    }
    else
    {
      v35 = 0;
    }
    qsort(v31, v35, 8uLL, (int (__cdecl *)(const void *, const void *))geo::codec::compare);
  }
  v36 = *(_DWORD *)(v7 + 64);
  if (v36 < 3)
    goto LABEL_72;
  v37 = *(_QWORD *)(v7 + 48);
  v38 = *(_QWORD *)(v7 + 56);
  v39 = v38 - v37;
  if (v38 >= v37)
  {
    v40 = 0;
    *(_BYTE *)(v7 + 32) = 1;
    v41 = *(_QWORD *)(v7 + 40) + v37;
    *(_QWORD *)(v7 + 16) = v39;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 8) = v41;
  }
  else
  {
    v39 = *(_QWORD *)(v7 + 16);
    v40 = *(_QWORD *)(v7 + 24);
  }
  v42 = v40 + 1;
  if (v40 + 1 > 8 * v39)
  {
    v24 = (FILE *)*MEMORY[0x1E0C80C10];
    v25 = 7569;
    goto LABEL_80;
  }
  v43 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 8) + (v40 >> 3));
  *(_QWORD *)(v7 + 24) = v42;
  if (((v43 >> (~(_BYTE)v40 & 7)) & 1) == 0)
  {
LABEL_62:
    v51 = v37 + (v42 >> 3);
    if ((v42 & 7) != 0)
      ++v51;
    *(_QWORD *)(v7 + 48) = v51;
    *(_BYTE *)(v7 + 32) = 0;
    if (v36 >= 0x48)
    {
      v97 = 0;
      if ((geo::codec::chapterReadVarUint32((_QWORD *)v7, (unsigned int *)&v97 + 1) & 1) == 0)
      {
        v25 = 7596;
        goto LABEL_79;
      }
      if (!geo::codec::chapterReadVarUint32((_QWORD *)v7, (unsigned int *)&v97))
      {
        v25 = 7597;
        goto LABEL_79;
      }
      v96 = 0;
      v18 = geo::codec::chapterReadVarUint32((_QWORD *)v7, &v96);
      if ((v18 & 1) == 0)
      {
        v54 = (FILE *)*MEMORY[0x1E0C80C10];
        v55 = 7600;
        goto LABEL_90;
      }
      if (!v96)
      {
LABEL_104:
        v22 = 1;
LABEL_105:
        if (*(_BYTE *)v7)
          goto LABEL_82;
        goto LABEL_83;
      }
      v95 = 0;
      if ((geo::codec::chapterReadVarUint32((_QWORD *)v7, &v95) & 1) == 0)
      {
        v54 = (FILE *)*MEMORY[0x1E0C80C10];
        v55 = 7604;
        goto LABEL_90;
      }
      v52 = v95;
      v53 = *(_QWORD *)(v7 + 48);
      if (v53 + (unint64_t)v95 > *(_QWORD *)(v7 + 56))
      {
        v54 = (FILE *)*MEMORY[0x1E0C80C10];
        v55 = 7607;
LABEL_90:
        v18 = fprintf(v54, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v55);
        v22 = 0;
        goto LABEL_105;
      }
      v61 = *(_QWORD *)(v7 + 40);
      *(_QWORD *)(v7 + 48) = v53 + v95;
      v62 = v96;
      if (v96)
      {
        __pa = (int8x16_t *)operator new(4 * v96);
        bzero(__pa, 4 * v62);
      }
      else
      {
        __pa = 0;
      }
      memset(v94, 0, sizeof(v94));
      if (mgcl::ints::IntDecompressor<unsigned int>::decompress((uint64_t *)v94, (unsigned __int8 *)(v61 + v53), v52, SBYTE4(v97), v97, v62, __pa))
      {
        v63 = (FILE *)*MEMORY[0x1E0C80C10];
        v64 = 7612;
LABEL_100:
        fprintf(v63, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v64);
        v67 = 6;
        goto LABEL_101;
      }
      v93 = 0;
      if ((geo::codec::chapterReadVarUint32((_QWORD *)v7, (unsigned int *)&v93) & 1) == 0)
      {
        v63 = (FILE *)*MEMORY[0x1E0C80C10];
        v64 = 7616;
        goto LABEL_100;
      }
      v65 = *(_QWORD *)(v7 + 48);
      v66 = v65 + v93;
      if (v66 > *(_QWORD *)(v7 + 56))
      {
        v63 = (FILE *)*MEMORY[0x1E0C80C10];
        v64 = 7619;
        goto LABEL_100;
      }
      v68 = *(_QWORD *)(v7 + 40);
      *(_QWORD *)(v7 + 48) = v66;
      *(_QWORD *)&v91[0] = 0;
      std::vector<unsigned long long>::vector((int64x2_t **)v92, v96, (unint64_t *)v91);
      memset(v91, 0, sizeof(v91));
      if (mgcl::ints::IntDecompressor<unsigned long long>::decompress((uint64_t *)v91, (unsigned __int8 *)(v68 + v65), v93, SBYTE4(v97), v97, v96, (uint64x2_t *)v92[0]))
      {
        v69 = (FILE *)*MEMORY[0x1E0C80C10];
        v70 = 7624;
LABEL_113:
        fprintf(v69, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v70);
        v67 = 6;
LABEL_114:
        mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v91);
        if (v92[0])
        {
          v92[1] = v92[0];
          operator delete(v92[0]);
        }
LABEL_101:
        v18 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v94);
        if (__pa)
          operator delete(__pa);
        if (v67)
          goto LABEL_81;
        goto LABEL_104;
      }
      v90 = 0;
      if ((geo::codec::chapterReadVarUint32((_QWORD *)v7, (unsigned int *)&v90) & 1) == 0)
      {
        v69 = (FILE *)*MEMORY[0x1E0C80C10];
        v70 = 7628;
        goto LABEL_113;
      }
      v71 = *(_QWORD *)(v7 + 48);
      v72 = v71 + v90;
      if (v72 > *(_QWORD *)(v7 + 56))
      {
        v69 = (FILE *)*MEMORY[0x1E0C80C10];
        v70 = 7631;
        goto LABEL_113;
      }
      v73 = *(_QWORD *)(v7 + 40);
      *(_QWORD *)(v7 + 48) = v72;
      v88 = 0;
      std::vector<unsigned long long>::vector((int64x2_t **)v89, v96, &v88);
      if (mgcl::ints::IntDecompressor<unsigned long long>::decompress((uint64_t *)v91, (unsigned __int8 *)(v73 + v71), v90, SBYTE4(v97), v97, v96, (uint64x2_t *)v89[0]))
      {
        v74 = 7635;
      }
      else
      {
        v75 = v96;
        if (!v96)
        {
LABEL_123:
          v67 = 0;
LABEL_124:
          if (v89[0])
          {
            v89[1] = v89[0];
            operator delete(v89[0]);
          }
          goto LABEL_114;
        }
        v76 = *a2;
        v77 = *(_QWORD *)(*a2 + 696);
        v78 = (uint64_t *)v92[0];
        v79 = (uint64_t *)v89[0];
        v80 = __pa;
        while (1)
        {
          v82 = v80->i32[0];
          v80 = (int8x16_t *)((char *)v80 + 4);
          v81 = v82;
          if (v77 <= v82)
            break;
          v83 = *v78++;
          v84 = *(_QWORD *)(v76 + 688) + 32 * v81;
          *(_QWORD *)(v84 + 16) = v83;
          v85 = *v79++;
          *(_QWORD *)(v84 + 24) = v85;
          if (!--v75)
            goto LABEL_123;
        }
        v74 = 7638;
      }
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v74);
      v67 = 6;
      goto LABEL_124;
    }
LABEL_72:
    v22 = 1;
    if (*(_BYTE *)v7)
      goto LABEL_82;
    goto LABEL_83;
  }
  LODWORD(v94[0]) = 0;
  v18 = BitstreamUnpack((uint64_t *)(v7 + 8), (int *)v94, 5uLL);
  if ((v18 & 1) == 0)
  {
    v24 = (FILE *)*MEMORY[0x1E0C80C10];
    v25 = 7573;
    goto LABEL_80;
  }
  v44 = *a2;
  if (!*(_QWORD *)(*a2 + 696))
  {
LABEL_61:
    v42 = *(_QWORD *)(v7 + 24);
    v37 = *(_QWORD *)(v7 + 48);
    v36 = *(_DWORD *)(v7 + 64);
    goto LABEL_62;
  }
  v45 = 0;
  __p = (LODWORD(v94[0]) + 1);
  v46 = 8;
  while (1)
  {
    v47 = *(_QWORD *)(v7 + 24);
    if (v47 + 1 > 8 * *(_QWORD *)(v7 + 16))
    {
      v24 = (FILE *)*MEMORY[0x1E0C80C10];
      v25 = 7578;
      goto LABEL_80;
    }
    v48 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 8) + (v47 >> 3));
    *(_QWORD *)(v7 + 24) = v47 + 1;
    if (((v48 >> (~(_BYTE)v47 & 7)) & 1) != 0)
      break;
LABEL_52:
    ++v45;
    v46 += 32;
    if (v45 >= *(_QWORD *)(v44 + 696))
      goto LABEL_61;
  }
  v49 = *(_QWORD *)(v44 + 688);
  LODWORD(v91[0]) = 0;
  v18 = BitstreamUnpack((uint64_t *)(v7 + 8), (int *)v91, __p);
  if (!(_DWORD)v18)
  {
    v25 = 7583;
    goto LABEL_79;
  }
  v44 = *a2;
  v50 = *(_QWORD *)(*a2 + 504);
  if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*a2 + 512) - v50) >> 5) > (unint64_t)LODWORD(v91[0]))
  {
    *(_QWORD *)(v49 + v46) = v50 + 224 * LODWORD(v91[0]);
    goto LABEL_52;
  }
  v25 = 7584;
LABEL_79:
  v24 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_80:
  v18 = fprintf(v24, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v25);
LABEL_81:
  v22 = 0;
  if (*(_BYTE *)v7)
  {
LABEL_82:
    v56 = geo::codec::Allocator::instance((geo::codec::Allocator *)v18);
    v18 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v56 + 40))(v56, *(_QWORD *)(v7 + 40), 0);
  }
LABEL_83:
  v57 = geo::codec::Allocator::instance((geo::codec::Allocator *)v18);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v57 + 40))(v57, v7, 0);
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  *(_QWORD *)&v91[0] = "ChapterConnectivity";
  *(_QWORD *)&v94[0] = v91;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v9 + 1912, (uint64_t *)v91, (uint64_t)&std::piecewise_construct, (uint64_t **)v94)+ 4) = (double)((rep - v12.__d_.__rep_) / 1000) * 0.001;
  if (v8)
  {
    v59 = (unint64_t *)&v8->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v22 & 1;
}

void sub_189AF55A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;
  void *v27;

  if (__p)
  {
    operator delete(__p);
    mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a17);
    v27 = a21;
    if (!a21)
    {
LABEL_3:
      mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a25);
      if (!a11)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a17);
    v27 = a21;
    if (!a21)
      goto LABEL_3;
  }
  a22 = (uint64_t)v27;
  operator delete(v27);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a25);
  if (!a11)
  {
LABEL_4:
    geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v25 - 120));
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a11);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v25 - 120));
  _Unwind_Resume(a1);
}

void sub_189AF56A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_189AF56BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_189AF56D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_189AF56E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_189AF56F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_189AF570C(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_189AF5724(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 120));
  _Unwind_Resume(a1);
}

double *geo::Coordinate3D<geo::Degrees,double>::Coordinate3D<double>(double *a1, double *a2)
{
  long double v3;
  long double v4;
  long double v5;
  double v6;
  double v7;
  double v8;
  __double2 v9;
  double v10;
  __double2 v11;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = sqrt(v3 * v3 + v4 * v4);
  v7 = atan2(v5, v6 * 0.996647189);
  v8 = atan2(v4, v3);
  v9 = __sincos_stret(v7);
  v10 = atan2(v5 + v9.__sinval * v9.__sinval * (42841.3115 * v9.__sinval), v6 + v9.__cosval * v9.__cosval * (-42697.6727 * v9.__cosval));
  v11 = __sincos_stret(v10);
  *a1 = v10 * 57.2957795;
  a1[1] = v8 * 57.2957795;
  a1[2] = v6 / v11.__cosval + -6378137.0 / sqrt(v11.__sinval * v11.__sinval * -0.00669437999 + 1.0);
  return a1;
}

double *geo::Geocentric<double>::Geocentric<geo::Degrees,double>(double *a1, double *a2)
{
  double v3;
  double v4;
  __double2 v5;
  double v6;
  double v7;
  __double2 v8;

  v3 = a2[1] * 0.0174532925;
  v4 = a2[2];
  v5 = __sincos_stret(*a2 * 0.0174532925);
  v6 = 6378137.0 / sqrt(v5.__sinval * v5.__sinval * -0.00669437999 + 1.0);
  v7 = (v6 + v4) * v5.__cosval;
  v8 = __sincos_stret(v3);
  *a1 = v7 * v8.__cosval;
  a1[1] = v7 * v8.__sinval;
  a1[2] = (v4 + v6 * 0.99330562) * v5.__sinval;
  return a1;
}

uint64_t *std::vector<gm::Matrix<int,3,1>,geo::StdAllocator<gm::Matrix<int,3,1>,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::reserve(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  uint64_t v18;

  if (a2 > (uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 2)
  {
    v2 = result;
    if (a2 >> 62)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v3 = *(_QWORD *)(result + 8) - *(_QWORD *)result;
    v4 = 4 * a2;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 4 * a2, 4);
    v5 = result + (v3 & 0xFFFFFFFFFFFFFFFCLL);
    v6 = *(_QWORD *)v2;
    v7 = *(_QWORD *)(v2 + 8);
    v8 = v5;
    if (v7 == *(_QWORD *)v2)
      goto LABEL_11;
    v9 = v7 - *(_QWORD *)v2 - 4;
    if (v9 >= 0x2C)
    {
      v8 = result + (v3 & 0xFFFFFFFFFFFFFFFCLL);
      if (v7 - (v3 & 0xFFFFFFFFFFFFFFFCLL) - result >= 0x20)
      {
        v10 = (v9 >> 2) + 1;
        v11 = 4 * (v10 & 0x7FFFFFFFFFFFFFF8);
        v12 = v7 - v11;
        v8 = v5 - v11;
        v13 = (_OWORD *)(result + 4 * (v3 >> 2) - 16);
        v14 = (__int128 *)(v7 - 16);
        v15 = v10 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v16 = *v14;
          *(v13 - 1) = *(v14 - 1);
          *v13 = v16;
          v13 -= 2;
          v14 -= 2;
          v15 -= 8;
        }
        while (v15);
        v7 = v12;
        if (v10 == (v10 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_11;
      }
    }
    else
    {
      v8 = result + (v3 & 0xFFFFFFFFFFFFFFFCLL);
    }
    do
    {
      v17 = *(_DWORD *)(v7 - 4);
      v7 -= 4;
      *(_DWORD *)(v8 - 4) = v17;
      v8 -= 4;
    }
    while (v7 != v6);
LABEL_11:
    *(_QWORD *)v2 = v8;
    *(_QWORD *)(v2 + 8) = v5;
    v18 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = result + v4;
    if (v6)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 24) + 40))(*(_QWORD *)(v2 + 24), v6, v18 - v6);
  }
  return result;
}

uint64_t std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::emplace_back<int const&>(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  uint64_t v25;

  v3 = result;
  v4 = *(_DWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4)
      *v4 = *a2;
    *(_QWORD *)(result + 8) = v4 + 1;
    return result;
  }
  v6 = ((uint64_t)v4 - *(_QWORD *)result) >> 2;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 62)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v8 = v5 - *(_QWORD *)result;
  if (v8 >> 1 > v7)
    v7 = v8 >> 1;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v7 = 0x3FFFFFFFFFFFFFFFLL;
  if (v7)
  {
    v9 = 4 * v7;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 4 * v7, 4);
    v10 = (_DWORD *)(result + 4 * v6);
    v7 = result + v9;
    if (result)
      *v10 = *a2;
    v11 = (uint64_t)(v10 + 1);
    v12 = *(_QWORD *)v3;
    v13 = *(_QWORD *)(v3 + 8);
    v14 = v13 - *(_QWORD *)v3;
    if (v13 != *(_QWORD *)v3)
      goto LABEL_14;
LABEL_21:
    v19 = v10;
    goto LABEL_24;
  }
  v10 = (_DWORD *)(4 * v6);
  v11 = 4 * v6 + 4;
  v12 = *(_QWORD *)result;
  v13 = *(_QWORD *)(result + 8);
  v14 = v13 - *(_QWORD *)result;
  if (v13 == *(_QWORD *)result)
    goto LABEL_21;
LABEL_14:
  v15 = v14 - 4;
  if (v15 < 0x1C || (unint64_t)(v13 - (_QWORD)v10) < 0x20)
  {
    v18 = v13;
    v19 = v10;
  }
  else
  {
    v16 = (v15 >> 2) + 1;
    v17 = 4 * (v16 & 0x7FFFFFFFFFFFFFF8);
    v18 = v13 - v17;
    v19 = &v10[v17 / 0xFFFFFFFFFFFFFFFCLL];
    v20 = v10 - 4;
    v21 = (__int128 *)(v13 - 16);
    v22 = v16 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v23 = *v21;
      *(v20 - 1) = *(v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 2;
      v22 -= 8;
    }
    while (v22);
    if (v16 == (v16 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_24;
  }
  do
  {
    v24 = *(_DWORD *)(v18 - 4);
    v18 -= 4;
    *--v19 = v24;
  }
  while (v18 != v12);
LABEL_24:
  *(_QWORD *)v3 = v19;
  *(_QWORD *)(v3 + 8) = v11;
  v25 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v7;
  if (v12)
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v12, v25 - v12);
  *(_QWORD *)(v3 + 8) = v11;
  return result;
}

void std::unordered_map<unsigned short,unsigned short>::reserve[abi:ne180100](uint64_t a1, unint64_t a2)
{
  unint64_t prime;
  int8x8_t v4;
  size_t v5;
  uint8x8_t v6;
  uint64_t v7;
  size_t v8;

  prime = vcvtps_u32_f32((float)a2 / *(float *)(a1 + 32));
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_18;
  if (prime >= *(_QWORD *)&v4)
    return;
  v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
  if (*(_QWORD *)&v4 >= 3uLL)
  {
    v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] <= 1uLL)
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
      if (prime <= v5)
        prime = v5;
      if (prime >= *(_QWORD *)&v4)
        return;
LABEL_18:
      std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
      return;
    }
  }
  v8 = std::__next_prime(v5);
  if (prime <= v8)
    prime = v8;
  if (prime < *(_QWORD *)&v4)
    goto LABEL_18;
}

uint64_t *std::unordered_map<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>::find[abi:ne180100](uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = ((_DWORD)a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  result = *v5;
  if (*v5)
  {
    if (v3.u32[0] < 2uLL)
    {
      while (1)
      {
        v8 = result[1];
        if (v8 == a3)
        {
          if (*((_DWORD *)result + 4) == a3)
            return result;
        }
        else if ((v8 & (a2 - 1)) != v4)
        {
          return 0;
        }
        result = (uint64_t *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v7 = result[1];
      if (v7 == a3)
      {
        if (*((_DWORD *)result + 4) == a3)
          return result;
      }
      else
      {
        if (v7 >= a2)
          v7 %= a2;
        if (v7 != v4)
          return 0;
      }
      result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *std::vector<VMP4Material,geo::StdAllocator<VMP4Material,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t *std::vector<unsigned long,geo::StdAllocator<unsigned long,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t std::unordered_map<unsigned int,std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;
  void *v6;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      v6 = v2[3];
      if (v6)
      {
        v2[4] = v6;
        (*(void (**)(void *, void *, int64_t))(*(_QWORD *)v2[6] + 40))(v2[6], v6, (_BYTE *)v2[5] - (_BYTE *)v6);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t std::unordered_map<unsigned int,std::vector<geo::Transform<float>,geo::StdAllocator<geo::Transform<float>,geo::codec::Allocator>>>::~unordered_map[abi:ne180100](uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;
  void *v6;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      v6 = v2[3];
      if (v6)
      {
        v2[4] = v6;
        (*(void (**)(void *, void *, int64_t))(*(_QWORD *)v2[6] + 40))(v2[6], v6, (_BYTE *)v2[5] - (_BYTE *)v6);
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void std::vector<std::vector<unsigned short>>::resize(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *v23;
  void *v24;

  v4 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 3);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v21 = &v4[3 * a2];
      if (v3 != v21)
      {
        v22 = *(_QWORD **)(a1 + 8);
        do
        {
          v24 = (void *)*(v22 - 3);
          v22 -= 3;
          v23 = v24;
          if (v24)
          {
            *(v3 - 2) = v23;
            operator delete(v23);
          }
          v3 = v22;
        }
        while (v22 != v21);
      }
      *(_QWORD *)(a1 + 8) = v21;
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v3) >> 3) >= v6)
    {
      bzero(*(void **)(a1 + 8), 24 * ((24 * v6 - 24) / 0x18) + 24);
      *(_QWORD *)(a1 + 8) = &v3[3 * ((24 * v6 - 24) / 0x18) + 3];
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3);
      v9 = 2 * v8;
      if (2 * v8 <= a2)
        v9 = a2;
      if (v8 >= 0x555555555555555)
        v10 = 0xAAAAAAAAAAAAAAALL;
      else
        v10 = v9;
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = 24 * v10;
      v12 = (char *)operator new(24 * v10);
      v13 = &v12[24 * v5];
      v14 = &v12[v11];
      bzero(v13, 24 * ((24 * v6 - 24) / 0x18) + 24);
      v15 = &v13[24 * ((24 * v6 - 24) / 0x18) + 24];
      if (v3 == v4)
      {
        *(_QWORD *)a1 = v13;
        *(_QWORD *)(a1 + 8) = v15;
        *(_QWORD *)(a1 + 16) = v14;
      }
      else
      {
        do
        {
          v16 = *(_OWORD *)(v3 - 3);
          v3 -= 3;
          *(_OWORD *)(v13 - 24) = v16;
          v13 -= 24;
          *((_QWORD *)v13 + 2) = v3[2];
          *v3 = 0;
          v3[1] = 0;
          v3[2] = 0;
        }
        while (v3 != v4);
        v3 = *(_QWORD **)a1;
        v17 = *(_QWORD **)(a1 + 8);
        *(_QWORD *)a1 = v13;
        *(_QWORD *)(a1 + 8) = v15;
        *(_QWORD *)(a1 + 16) = v14;
        if (v17 != v3)
        {
          v18 = v17;
          do
          {
            v20 = (void *)*(v18 - 3);
            v18 -= 3;
            v19 = v20;
            if (v20)
            {
              *(v17 - 2) = v19;
              operator delete(v19);
            }
            v17 = v18;
          }
          while (v18 != v3);
        }
      }
      if (v3)
        operator delete(v3);
    }
  }
}

void std::vector<unsigned short>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  __int128 *v22;
  unint64_t v23;
  __int128 v24;
  __int16 v25;
  char *v26;

  v3 = *a1;
  v4 = a1[1];
  v5 = v4 - *a1;
  v6 = v5 >> 1;
  v7 = a2 - (v5 >> 1);
  if (a2 <= v5 >> 1)
  {
    if (a2 >= v5 >> 1)
      return;
    v26 = &v3[2 * a2];
    goto LABEL_22;
  }
  v8 = a1[2];
  if (v7 <= (v8 - v4) >> 1)
  {
    bzero(a1[1], 2 * v7);
    v26 = &v4[2 * v7];
LABEL_22:
    a1[1] = v26;
    return;
  }
  if ((a2 & 0x8000000000000000) != 0)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v9 = v8 - v3;
  if (v9 <= a2)
    v10 = a2;
  else
    v10 = v9;
  v11 = v9 >= 0x7FFFFFFFFFFFFFFELL;
  v12 = 0x7FFFFFFFFFFFFFFFLL;
  if (!v11)
    v12 = v10;
  if (v12 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v13 = 2 * v12;
  v14 = (char *)operator new(2 * v12);
  v15 = &v14[2 * v6];
  bzero(v15, 2 * v7);
  v16 = &v15[2 * v7];
  if (v4 != v3)
  {
    v17 = v4 - v3 - 2;
    if (v17 < 0x1E)
      goto LABEL_28;
    if ((unint64_t)(&v4[-v5] - v14) < 0x20)
      goto LABEL_28;
    v18 = (v17 >> 1) + 1;
    v19 = 2 * (v18 & 0xFFFFFFFFFFFFFFF0);
    v20 = &v4[-v19];
    v15 -= v19;
    v21 = &v14[2 * v6 - 16];
    v22 = (__int128 *)(v4 - 16);
    v23 = v18 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 16;
    }
    while (v23);
    v4 = v20;
    if (v18 != (v18 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_28:
      do
      {
        v25 = *((_WORD *)v4 - 1);
        v4 -= 2;
        *((_WORD *)v15 - 1) = v25;
        v15 -= 2;
      }
      while (v4 != v3);
    }
  }
  *a1 = v15;
  a1[1] = v16;
  a1[2] = &v14[v13];
  if (v3)
    operator delete(v3);
}

void **std::vector<std::vector<unsigned short>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t geo::codec::adaptiveDeltaEncoderDecode(geo::codec::Allocator *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  geo::codec::Allocator *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  BOOL v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  unint64_t v80;
  unsigned int v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  char v103;
  int v104;
  unint64_t v105;
  unsigned int v106;
  unsigned int *v107;
  unint64_t v108;
  unint64_t v109;
  BOOL v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t *v136;
  __int128 *v137;
  uint64_t v138;
  __int128 v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;

  v3 = a3;
  v4 = a2;
  v5 = a1;
  v6 = *(_QWORD *)a3;
  v7 = *(_QWORD *)(a3 + 8);
  if (v7 != *(_QWORD *)a3)
  {
    *(_QWORD *)(a3 + 8) = v6;
    v7 = v6;
  }
  if (a2 <= (*(_QWORD *)(a3 + 16) - v6) >> 3)
    goto LABEL_14;
  v8 = v7 - v6;
  a1 = (geo::codec::Allocator *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a3 + 24)
                                                                                             + 16))(*(_QWORD *)(a3 + 24), 8 * a2, 8);
  v9 = (char *)a1 + (v8 & 0xFFFFFFFFFFFFFFF8);
  v10 = *(_QWORD *)v3;
  v11 = *(_QWORD *)(v3 + 8);
  v12 = v9;
  if (v11 != *(_QWORD *)v3)
  {
    v13 = v11 - *(_QWORD *)v3 - 8;
    if (v13 < 0x58)
    {
      v12 = (char *)a1 + (v8 & 0xFFFFFFFFFFFFFFF8);
      do
      {
LABEL_11:
        v21 = *(_QWORD *)(v11 - 8);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v21;
        v12 -= 8;
      }
      while (v11 != v10);
      goto LABEL_12;
    }
    v12 = (char *)a1 + (v8 & 0xFFFFFFFFFFFFFFF8);
    if (v11 - (v8 & 0xFFFFFFFFFFFFFFF8) - (unint64_t)a1 < 0x20)
      goto LABEL_11;
    v14 = (v13 >> 3) + 1;
    v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
    v16 = v11 - v15;
    v12 = &v9[-v15];
    v17 = (_OWORD *)((char *)a1 + 8 * (v8 >> 3) - 16);
    v18 = (__int128 *)(v11 - 16);
    v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v20 = *v18;
      *(v17 - 1) = *(v18 - 1);
      *v17 = v20;
      v17 -= 2;
      v18 -= 2;
      v19 -= 4;
    }
    while (v19);
    v11 = v16;
    if (v14 != (v14 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_11;
  }
LABEL_12:
  *(_QWORD *)v3 = v12;
  *(_QWORD *)(v3 + 8) = v9;
  v22 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = (char *)a1 + 8 * v4;
  if (v10)
    a1 = (geo::codec::Allocator *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v10, v22 - v10);
LABEL_14:
  if (!v4)
    return 1;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  v23 = geo::codec::Allocator::instance(a1);
  v24 = v23;
  v153 = v23;
  v25 = *((_QWORD *)v5 + 2);
  v26 = 8 * *((_QWORD *)v5 + 1);
  if (v25 + 1 > v26)
  {
LABEL_16:
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 10418);
    return 0;
  }
  v28 = *(_QWORD *)v5;
  v29 = *(unsigned __int8 *)(*(_QWORD *)v5 + (v25 >> 3));
  *((_QWORD *)v5 + 2) = v25 + 1;
  if (((v29 >> (~(_BYTE)v25 & 7)) & 1) == 0)
    goto LABEL_68;
  v30 = 0;
  v31 = v25 - v26 + 1;
  do
  {
    if (!(v31 + v30))
      goto LABEL_16;
    v32 = *(unsigned __int8 *)(v28 + ((v25 + v30 + 1) >> 3));
    *((_QWORD *)v5 + 2) = v25 + v30 + 2;
    v33 = ~(v25 + v30++ + 1) & 7;
  }
  while (((v32 >> v33) & 1) != 0);
  if (!(_DWORD)v30)
  {
LABEL_68:
    v70 = 0;
    v37 = 0;
    v34 = 0;
    goto LABEL_69;
  }
  v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, 16 * v30, 8);
  v144 = v4;
  v146 = v3;
  v35 = 0;
  v36 = v30 - 1;
  v37 = v34 + 16 * v30;
  v150 = v34;
  v151 = v34;
  v152 = v37;
  v38 = v34;
  v148 = v24;
  do
  {
    v40 = *((_QWORD *)v5 + 2);
    v41 = 8 * *((_QWORD *)v5 + 1);
    if (v40 + 2 > v41)
    {
      v74 = v37;
      v75 = 10422;
      goto LABEL_82;
    }
    v42 = 0;
    v43 = *(_QWORD *)v5;
    v44 = 2;
    do
    {
      v45 = 8 - (v40 & 7);
      if (v44 < v45)
        v45 = v44;
      v42 = (*(unsigned __int8 *)(v43 + (v40 >> 3)) >> (8 - (v40 & 7) - v45)) & ~(-1 << v45) | (v42 << v45);
      v40 += v45;
      *((_QWORD *)v5 + 2) = v40;
      v44 -= v45;
    }
    while (v44);
    v46 = v40 + 1;
    if (v40 + 1 > v41)
    {
      v74 = v37;
      v75 = 10424;
      goto LABEL_82;
    }
    v47 = *(unsigned __int8 *)(v43 + (v40 >> 3));
    *((_QWORD *)v5 + 2) = v46;
    v48 = (1 << (~(_BYTE)v40 & 7)) & v47;
    v49 = v48 != 0;
    v50 = v40 + 7;
    if (v48)
    {
      if (v50 > v41)
      {
        v74 = v37;
        v75 = 10429;
        goto LABEL_82;
      }
      v51 = 0;
      v52 = 6;
      do
      {
        v53 = 8 - (v46 & 7);
        if (v52 < v53)
          v53 = v52;
        v51 = (*(unsigned __int8 *)(v43 + (v46 >> 3)) >> (8 - (v46 & 7) - v53)) & ~(-1 << v53) | (v51 << v53);
        v46 += v53;
        *((_QWORD *)v5 + 2) = v46;
        v52 -= v53;
      }
      while (v52);
      v54 = (v51 + 1);
    }
    else
    {
      if (v50 > v41)
        goto LABEL_80;
      v55 = 0;
      v56 = 6;
      do
      {
        v57 = 8 - (v46 & 7);
        if (v56 < v57)
          v57 = v56;
        v55 = (*(unsigned __int8 *)(v43 + (v46 >> 3)) >> (8 - (v46 & 7) - v57)) & ~(-1 << v57) | (v55 << v57);
        v46 += v57;
        *((_QWORD *)v5 + 2) = v46;
        v56 -= v57;
      }
      while (v56);
      v58 = (v55 + 1);
      if (v46 + v58 > v41)
      {
LABEL_80:
        v74 = v37;
        v75 = 10432;
        goto LABEL_82;
      }
      v54 = 0;
      if (v55 != -1)
      {
        do
        {
          v59 = 8 - (v46 & 7);
          if (v58 < v59)
            v59 = v58;
          v54 = (*(unsigned __int8 *)(v43 + (v46 >> 3)) >> (8 - (v46 & 7) - v59)) & (unint64_t)~(-1 << v59) | (v54 << v59);
          v46 += v59;
          *((_QWORD *)v5 + 2) = v46;
          v58 -= v59;
        }
        while (v58);
      }
    }
    if (v38 >= v37)
    {
      v60 = (uint64_t)(v38 - v34) >> 4;
      v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 60)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      if ((uint64_t)(v37 - v34) >> 3 > v61)
        v61 = (uint64_t)(v37 - v34) >> 3;
      if (v37 - v34 >= 0x7FFFFFFFFFFFFFF0)
        v62 = 0xFFFFFFFFFFFFFFFLL;
      else
        v62 = v61;
      if (v62)
      {
        v63 = v49;
        v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v148 + 16))(v148, 16 * v62, 8);
        v65 = v64 + 16 * v60;
        v37 = v64 + 16 * v62;
        if (v64)
        {
          *(_DWORD *)v65 = v42;
          *(_BYTE *)(v65 + 4) = v63;
          *(_QWORD *)(v65 + 8) = v54;
        }
        v67 = v150;
        v66 = v151;
        v34 = v64 + 16 * v60;
        if (v151 == v150)
        {
LABEL_62:
          v38 = v65 + 16;
          v68 = v152;
          v150 = v34;
          v152 = v37;
          if (v66)
            goto LABEL_63;
LABEL_67:
          v36 = v30 - 1;
          goto LABEL_25;
        }
      }
      else
      {
        v37 = 0;
        v65 = 16 * v60;
        v67 = v150;
        v66 = v151;
        v34 = 16 * v60;
        if (v151 == v150)
          goto LABEL_62;
      }
      do
      {
        *(_OWORD *)(v34 - 16) = *(_OWORD *)(v66 - 16);
        v34 -= 16;
        v66 -= 16;
      }
      while (v66 != v67);
      v66 = v67;
      v38 = v65 + 16;
      v68 = v152;
      v150 = v34;
      v152 = v37;
      if (v67)
      {
LABEL_63:
        v69 = v37;
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v148 + 40))(v148, v66, v68 - v66);
        v37 = v69;
        v36 = v30 - 1;
        goto LABEL_25;
      }
      goto LABEL_67;
    }
    if (v38)
    {
      *(_DWORD *)v38 = v42;
      *(_BYTE *)(v38 + 4) = v49;
      *(_QWORD *)(v38 + 8) = v54;
    }
    v38 += 16;
LABEL_25:
    v151 = v38;
  }
  while (v36 != v35++);
  v34 = v150;
  v70 = v30;
  v4 = v144;
  v24 = v148;
  v3 = v146;
  if (v30 != (uint64_t)(v38 - v150) >> 4)
  {
    v74 = v37;
    v75 = 10437;
    goto LABEL_90;
  }
LABEL_69:
  v71 = *((_QWORD *)v5 + 2);
  v72 = v71 + 1;
  v73 = 8 * *((_QWORD *)v5 + 1);
  if (v71 + 1 > v73)
  {
    v74 = v37;
    v75 = 10440;
    goto LABEL_90;
  }
  v76 = *(_QWORD *)v5;
  v77 = *(unsigned __int8 *)(*(_QWORD *)v5 + (v71 >> 3));
  *((_QWORD *)v5 + 2) = v72;
  v78 = (1 << (~(_BYTE)v71 & 7)) & v77;
  if (v78)
  {
    v79 = 0;
    v149 = 0;
    if (v71 + 7 > v73)
      goto LABEL_89;
  }
  else
  {
    v80 = v71 + 2;
    if (v80 > v73)
    {
      v74 = v37;
      v75 = 10445;
      goto LABEL_90;
    }
    v81 = *(unsigned __int8 *)(v76 + (v72 >> 3));
    *((_QWORD *)v5 + 2) = v80;
    v79 = (v81 >> (~(_BYTE)v72 & 7)) & 1;
    v72 = v80;
    v149 = 0;
    if (v80 + 6 > v73)
      goto LABEL_89;
  }
  v82 = 0;
  v83 = 6;
  do
  {
    v84 = 8 - (v72 & 7);
    if (v83 < v84)
      v84 = v83;
    v82 = (*(unsigned __int8 *)(v76 + (v72 >> 3)) >> (8 - (v72 & 7) - v84)) & ~(-1 << v84) | (v82 << v84);
    v72 += v84;
    *((_QWORD *)v5 + 2) = v72;
    v83 -= v84;
  }
  while (v83);
  v85 = (v82 + 1);
  if (v72 + v85 > v73)
    goto LABEL_89;
  if (v82 == -1)
    goto LABEL_103;
  v87 = 0;
  do
  {
    v88 = 8 - (v72 & 7);
    if (v85 < v88)
      v88 = v85;
    v87 = (*(unsigned __int8 *)(v76 + (v72 >> 3)) >> (8 - (v72 & 7) - v88)) & (unint64_t)~(-1 << v88) | (v87 << v88);
    v72 += v88;
    *((_QWORD *)v5 + 2) = v72;
    v85 -= v88;
  }
  while (v85);
  if (!v87)
  {
LABEL_103:
    v74 = v37;
    v90 = 0;
  }
  else
  {
    if (v72 + 1 > v73)
    {
LABEL_89:
      v74 = v37;
      v75 = 10449;
      goto LABEL_90;
    }
    v74 = v37;
    v89 = *(unsigned __int8 *)(v76 + (v72 >> 3));
    *((_QWORD *)v5 + 2) = v72 + 1;
    if (((v89 >> (~(_BYTE)v72 & 7)) & 1) != 0)
      v90 = -(uint64_t)v87;
    else
      v90 = v87;
  }
  v149 = v90;
  std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::emplace_back<long long &>(v3, &v149);
  v148 = v24;
  v145 = v4;
  if (v4 <= 1)
  {
    v93 = *(_QWORD **)(v3 + 8);
LABEL_168:
    if (v145 != ((uint64_t)v93 - *(_QWORD *)v3) >> 3)
    {
      v75 = 10504;
      goto LABEL_82;
    }
    v27 = 1;
    v24 = v148;
    if (v34)
      goto LABEL_91;
    return v27;
  }
  v147 = v79;
  v91 = 0;
  v92 = 1;
  v143 = v78;
  while (2)
  {
    if (v70 < 2)
    {
LABEL_118:
      if (v70 <= v91)
      {
        v75 = 10463;
        goto LABEL_82;
      }
      v104 = v147;
      if (v78)
      {
        v105 = *((_QWORD *)v5 + 2);
        if (v105 + 1 > 8 * *((_QWORD *)v5 + 1))
        {
          v75 = 10467;
          goto LABEL_82;
        }
        v106 = *(unsigned __int8 *)(*(_QWORD *)v5 + (v105 >> 3));
        *((_QWORD *)v5 + 2) = v105 + 1;
        v104 = (v106 >> (~(_BYTE)v105 & 7)) & 1;
      }
      v107 = (unsigned int *)(v34 + 16 * v91);
      v108 = *((_QWORD *)v107 + 1);
      if (*((_BYTE *)v107 + 4))
      {
        v109 = *((_QWORD *)v5 + 2);
        if (v108)
          v110 = v109 + v108 > 8 * *((_QWORD *)v5 + 1);
        else
          v110 = 1;
        if (v110)
        {
          v111 = 0;
        }
        else
        {
          v111 = 0;
          v112 = *(_QWORD *)v5;
          do
          {
            v113 = 8 - (v109 & 7);
            if (v108 < v113)
              v113 = v108;
            v111 = (*(unsigned __int8 *)(v112 + (v109 >> 3)) >> (8 - (v109 & 7) - v113)) & ~(-1 << v113) | (v111 << v113);
            v109 += v113;
            *((_QWORD *)v5 + 2) = v109;
            v108 -= v113;
          }
          while (v108);
        }
        v108 = v111;
      }
      v114 = *v107;
      v116 = *(_QWORD *)v3;
      v115 = *(unint64_t **)(v3 + 8);
      v117 = ((uint64_t)v115 - *(_QWORD *)v3) >> 3;
      switch((int)v114)
      {
        case 0:
          break;
        case 1:
          v114 = *(_QWORD *)(v116 + 8 * v117 - 8);
          break;
        case 2:
          v114 = 2 * *(_QWORD *)(v116 + 8 * v117 - 8) - *(_QWORD *)(v116 + 8 * v117 - 16);
          break;
        case 3:
          v114 = 3 * (*(_QWORD *)(v116 + 8 * v117 - 8) - *(_QWORD *)(v116 + 8 * v117 - 16))
               + *(_QWORD *)(v116 + 8 * v117 - 24);
          break;
        default:
          v118 = v91;
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Unexpected history count %u\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 10498, v114);
          v91 = v118;
          v114 = 0;
          v115 = *(unint64_t **)(v3 + 8);
          break;
      }
      if (v104)
        v119 = -(uint64_t)v108;
      else
        v119 = v108;
      v120 = v114 + v119;
      v121 = *(_QWORD *)(v3 + 16);
      if ((unint64_t)v115 < v121)
      {
        if (v115)
          *v115 = v120;
        v93 = v115 + 1;
        v78 = v143;
        goto LABEL_107;
      }
      v122 = ((uint64_t)v115 - *(_QWORD *)v3) >> 3;
      v123 = v122 + 1;
      if ((unint64_t)(v122 + 1) >> 61)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v124 = v121 - *(_QWORD *)v3;
      if (v124 >> 2 > v123)
        v123 = v124 >> 2;
      if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF8)
        v125 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v125 = v123;
      v142 = v91;
      if (v125)
      {
        v126 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 16))(*(_QWORD *)(v3 + 24), 8 * v125, 8);
        v127 = (unint64_t *)(v126 + 8 * v122);
        v128 = v126 + 8 * v125;
        if (v126)
          *v127 = v120;
      }
      else
      {
        v128 = 0;
        v127 = (unint64_t *)(8 * v122);
      }
      v78 = v143;
      v129 = *(_QWORD *)v3;
      v130 = *(_QWORD *)(v3 + 8);
      v131 = v127;
      if (v130 != *(_QWORD *)v3)
      {
        v132 = v130 - *(_QWORD *)v3 - 8;
        if (v132 < 0x38)
        {
          v131 = v127;
        }
        else
        {
          v131 = v127;
          if ((unint64_t)(v130 - (_QWORD)v127) >= 0x20)
          {
            v133 = (v132 >> 3) + 1;
            v134 = 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
            v135 = v130 - v134;
            v131 = &v127[v134 / 0xFFFFFFFFFFFFFFF8];
            v136 = v127 - 2;
            v137 = (__int128 *)(v130 - 16);
            v138 = v133 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v139 = *v137;
              *((_OWORD *)v136 - 1) = *(v137 - 1);
              *(_OWORD *)v136 = v139;
              v136 -= 4;
              v137 -= 2;
              v138 -= 4;
            }
            while (v138);
            v130 = v135;
            if (v133 == (v133 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_163;
          }
        }
        do
        {
          v140 = *(_QWORD *)(v130 - 8);
          v130 -= 8;
          *--v131 = v140;
        }
        while (v130 != v129);
      }
LABEL_163:
      v93 = v127 + 1;
      *(_QWORD *)v3 = v131;
      *(_QWORD *)(v3 + 8) = v127 + 1;
      v141 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 16) = v128;
      if (v129)
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v129, v141 - v129);
      v91 = v142;
LABEL_107:
      *(_QWORD *)(v3 + 8) = v93;
      if (++v92 == v145)
        goto LABEL_168;
      continue;
    }
    break;
  }
  v94 = *((_QWORD *)v5 + 2);
  v95 = v94 + 1;
  v96 = 8 * *((_QWORD *)v5 + 1);
  if (v94 + 1 <= v96)
  {
    v97 = *(_QWORD *)v5;
    v98 = *(unsigned __int8 *)(*(_QWORD *)v5 + (v94 >> 3));
    *((_QWORD *)v5 + 2) = v95;
    if (((v98 >> (~(_BYTE)v94 & 7)) & 1) != 0)
    {
      if (v94 + 2 > v96)
        goto LABEL_172;
      v99 = *(unsigned __int8 *)(v97 + (v95 >> 3));
      *((_QWORD *)v5 + 2) = v94 + 2;
      if (((v99 >> (~(_BYTE)v95 & 7)) & 1) != 0)
      {
        v100 = 0;
        v101 = v94 - v96 + 2;
        while (v101 + v100)
        {
          v102 = *(unsigned __int8 *)(v97 + ((v94 + v100 + 2) >> 3));
          *((_QWORD *)v5 + 2) = v94 + v100 + 3;
          v103 = ~(v94 + v100++ + 2) & 7;
          if (((v102 >> v103) & 1) == 0)
          {
            v91 = v100;
            goto LABEL_118;
          }
        }
LABEL_172:
        v75 = 10459;
        goto LABEL_82;
      }
      v91 = 0;
    }
    goto LABEL_118;
  }
  v75 = 10457;
LABEL_82:
  v24 = v148;
LABEL_90:
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v75);
  v27 = 0;
  if (v34)
  {
LABEL_91:
    v151 = v34;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v24 + 40))(v24, v34, v74 - v34);
  }
  return v27;
}

void sub_189AF6F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::vector<geo::codec::ParamInfo,geo::StdAllocator<geo::codec::ParamInfo,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_189AF6FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::vector<geo::codec::ParamInfo,geo::StdAllocator<geo::codec::ParamInfo,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_189AF6FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::vector<geo::codec::ParamInfo,geo::StdAllocator<geo::codec::ParamInfo,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_189AF6FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::vector<geo::codec::ParamInfo,geo::StdAllocator<geo::codec::ParamInfo,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_189AF6FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  std::vector<geo::codec::ParamInfo,geo::StdAllocator<geo::codec::ParamInfo,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t BitstreamUnpackUnary(uint64_t *a1, _DWORD *a2)
{
  _BOOL8 v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  char v10;

  v2 = 0;
  *a2 = 0;
  v3 = a1[2];
  v4 = 8 * a1[1];
  if (v3 + 1 > v4)
    return v2;
  v5 = *a1;
  v6 = *(unsigned __int8 *)(*a1 + (v3 >> 3));
  a1[2] = v3 + 1;
  if (((v6 >> (~(_BYTE)v3 & 7)) & 1) != 0)
  {
    v7 = 0;
    v8 = ~v3 + v4;
    do
    {
      *a2 = v7 + 1;
      v2 = v8 != v7;
      if (v8 == v7)
        break;
      v9 = *(unsigned __int8 *)(v5 + ((v3 + v7 + 1) >> 3));
      a1[2] = v3 + v7 + 2;
      v10 = ~(v3 + v7++ + 1) & 7;
    }
    while (((v9 >> v10) & 1) != 0);
    return v2;
  }
  return 1;
}

uint64_t std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::emplace_back<long long &>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4)
      *v4 = *a2;
    *(_QWORD *)(result + 8) = v4 + 1;
    return result;
  }
  v6 = ((uint64_t)v4 - *(_QWORD *)result) >> 3;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 61)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v8 = v5 - *(_QWORD *)result;
  if (v8 >> 2 > v7)
    v7 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  if (v7)
  {
    v9 = 8 * v7;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 8 * v7, 8);
    v10 = (_QWORD *)(result + 8 * v6);
    v7 = result + v9;
    if (result)
      *v10 = *a2;
    v11 = (uint64_t)(v10 + 1);
    v12 = *(_QWORD *)v3;
    v13 = *(_QWORD *)(v3 + 8);
    v14 = v13 - *(_QWORD *)v3;
    if (v13 != *(_QWORD *)v3)
      goto LABEL_14;
LABEL_21:
    v19 = v10;
    goto LABEL_24;
  }
  v10 = (_QWORD *)(8 * v6);
  v11 = 8 * v6 + 8;
  v12 = *(_QWORD *)result;
  v13 = *(_QWORD *)(result + 8);
  v14 = v13 - *(_QWORD *)result;
  if (v13 == *(_QWORD *)result)
    goto LABEL_21;
LABEL_14:
  v15 = v14 - 8;
  if (v15 < 0x38 || (unint64_t)(v13 - (_QWORD)v10) < 0x20)
  {
    v18 = v13;
    v19 = v10;
  }
  else
  {
    v16 = (v15 >> 3) + 1;
    v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    v18 = v13 - v17;
    v19 = &v10[v17 / 0xFFFFFFFFFFFFFFF8];
    v20 = v10 - 2;
    v21 = (__int128 *)(v13 - 16);
    v22 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *(v20 - 1) = *(v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_24;
  }
  do
  {
    v24 = *(_QWORD *)(v18 - 8);
    v18 -= 8;
    *--v19 = v24;
  }
  while (v18 != v12);
LABEL_24:
  *(_QWORD *)v3 = v19;
  *(_QWORD *)(v3 + 8) = v11;
  v25 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v7;
  if (v12)
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v12, v25 - v12);
  *(_QWORD *)(v3 + 8) = v11;
  return result;
}

uint64_t std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::emplace_back<long long>(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4)
      *v4 = *a2;
    *(_QWORD *)(result + 8) = v4 + 1;
    return result;
  }
  v6 = ((uint64_t)v4 - *(_QWORD *)result) >> 3;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 61)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v8 = v5 - *(_QWORD *)result;
  if (v8 >> 2 > v7)
    v7 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  if (v7)
  {
    v9 = 8 * v7;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 8 * v7, 8);
    v10 = (_QWORD *)(result + 8 * v6);
    v7 = result + v9;
    if (result)
      *v10 = *a2;
    v11 = (uint64_t)(v10 + 1);
    v12 = *(_QWORD *)v3;
    v13 = *(_QWORD *)(v3 + 8);
    v14 = v13 - *(_QWORD *)v3;
    if (v13 != *(_QWORD *)v3)
      goto LABEL_14;
LABEL_21:
    v19 = v10;
    goto LABEL_24;
  }
  v10 = (_QWORD *)(8 * v6);
  v11 = 8 * v6 + 8;
  v12 = *(_QWORD *)result;
  v13 = *(_QWORD *)(result + 8);
  v14 = v13 - *(_QWORD *)result;
  if (v13 == *(_QWORD *)result)
    goto LABEL_21;
LABEL_14:
  v15 = v14 - 8;
  if (v15 < 0x38 || (unint64_t)(v13 - (_QWORD)v10) < 0x20)
  {
    v18 = v13;
    v19 = v10;
  }
  else
  {
    v16 = (v15 >> 3) + 1;
    v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    v18 = v13 - v17;
    v19 = &v10[v17 / 0xFFFFFFFFFFFFFFF8];
    v20 = v10 - 2;
    v21 = (__int128 *)(v13 - 16);
    v22 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *(v20 - 1) = *(v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_24;
  }
  do
  {
    v24 = *(_QWORD *)(v18 - 8);
    v18 -= 8;
    *--v19 = v24;
  }
  while (v18 != v12);
LABEL_24:
  *(_QWORD *)v3 = v19;
  *(_QWORD *)(v3 + 8) = v11;
  v25 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v7;
  if (v12)
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v12, v25 - v12);
  *(_QWORD *)(v3 + 8) = v11;
  return result;
}

uint64_t *std::vector<geo::codec::ParamInfo,geo::StdAllocator<geo::codec::ParamInfo,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  uint64_t v29;

  v3 = result;
  v5 = *(_QWORD *)result;
  v4 = *(_DWORD **)(result + 8);
  v6 = (uint64_t)v4 - *(_QWORD *)result;
  v7 = v6 >> 2;
  v8 = a2 - (v6 >> 2);
  if (a2 <= v6 >> 2)
  {
    if (a2 >= v6 >> 2)
      return result;
    v16 = (_DWORD *)(v5 + 4 * a2);
LABEL_15:
    *(_QWORD *)(result + 8) = v16;
    return result;
  }
  v9 = *(_QWORD *)(result + 16);
  if (v8 <= (v9 - (uint64_t)v4) >> 2)
  {
    v16 = &v4[v8];
    v17 = 4 * a2 - 4 * v7;
    do
    {
      if (v4)
        *v4 = 0;
      ++v4;
      v17 -= 4;
    }
    while (v17);
    goto LABEL_15;
  }
  if (a2 >> 62)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v10 = v9 - v5;
  v11 = (v9 - v5) >> 1;
  if (v11 <= a2)
    v11 = a2;
  if (v10 >= 0x7FFFFFFFFFFFFFFCLL)
    v12 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v12 = v11;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 4 * v12, 4);
  v13 = (_DWORD *)(result + 4 * v7);
  v14 = 4 * a2 - 4 * v7;
  v15 = v13;
  do
  {
    if (v15)
      *v15 = 0;
    ++v15;
    v14 -= 4;
  }
  while (v14);
  v18 = *(_QWORD *)v3;
  v19 = *(_QWORD *)(v3 + 8);
  if (v19 != *(_QWORD *)v3)
  {
    v20 = v19 - *(_QWORD *)v3 - 4;
    if (v20 < 0x2C)
      goto LABEL_33;
    if ((unint64_t)(v19 - (v6 + result)) < 0x20)
      goto LABEL_33;
    v21 = (v20 >> 2) + 1;
    v22 = 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
    v23 = v19 - v22;
    v13 = (_DWORD *)((char *)v13 - v22);
    v24 = (_OWORD *)(result + 4 * v7 - 16);
    v25 = (__int128 *)(v19 - 16);
    v26 = v21 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v27 = *v25;
      *(v24 - 1) = *(v25 - 1);
      *v24 = v27;
      v24 -= 2;
      v25 -= 2;
      v26 -= 8;
    }
    while (v26);
    v19 = v23;
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_33:
      do
      {
        v28 = *(_DWORD *)(v19 - 4);
        v19 -= 4;
        *--v13 = v28;
      }
      while (v19 != v18);
    }
  }
  *(_QWORD *)v3 = v13;
  *(_QWORD *)(v3 + 8) = result + 4 * a2;
  v29 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = result + 4 * v12;
  if (v18)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v18, v29 - v18);
  return result;
}

uint64_t std::vector<unsigned int,geo::StdAllocator<unsigned int,geo::codec::Allocator>>::emplace_back<unsigned int>(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  uint64_t v25;

  v3 = result;
  v4 = *(_DWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4)
      *v4 = *a2;
    *(_QWORD *)(result + 8) = v4 + 1;
    return result;
  }
  v6 = ((uint64_t)v4 - *(_QWORD *)result) >> 2;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 62)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v8 = v5 - *(_QWORD *)result;
  if (v8 >> 1 > v7)
    v7 = v8 >> 1;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
    v7 = 0x3FFFFFFFFFFFFFFFLL;
  if (v7)
  {
    v9 = 4 * v7;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 4 * v7, 4);
    v10 = (_DWORD *)(result + 4 * v6);
    v7 = result + v9;
    if (result)
      *v10 = *a2;
    v11 = (uint64_t)(v10 + 1);
    v12 = *(_QWORD *)v3;
    v13 = *(_QWORD *)(v3 + 8);
    v14 = v13 - *(_QWORD *)v3;
    if (v13 != *(_QWORD *)v3)
      goto LABEL_14;
LABEL_21:
    v19 = v10;
    goto LABEL_24;
  }
  v10 = (_DWORD *)(4 * v6);
  v11 = 4 * v6 + 4;
  v12 = *(_QWORD *)result;
  v13 = *(_QWORD *)(result + 8);
  v14 = v13 - *(_QWORD *)result;
  if (v13 == *(_QWORD *)result)
    goto LABEL_21;
LABEL_14:
  v15 = v14 - 4;
  if (v15 < 0x1C || (unint64_t)(v13 - (_QWORD)v10) < 0x20)
  {
    v18 = v13;
    v19 = v10;
  }
  else
  {
    v16 = (v15 >> 2) + 1;
    v17 = 4 * (v16 & 0x7FFFFFFFFFFFFFF8);
    v18 = v13 - v17;
    v19 = &v10[v17 / 0xFFFFFFFFFFFFFFFCLL];
    v20 = v10 - 4;
    v21 = (__int128 *)(v13 - 16);
    v22 = v16 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v23 = *v21;
      *(v20 - 1) = *(v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 2;
      v22 -= 8;
    }
    while (v22);
    if (v16 == (v16 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_24;
  }
  do
  {
    v24 = *(_DWORD *)(v18 - 4);
    v18 -= 4;
    *--v19 = v24;
  }
  while (v18 != v12);
LABEL_24:
  *(_QWORD *)v3 = v19;
  *(_QWORD *)(v3 + 8) = v11;
  v25 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v7;
  if (v12)
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v12, v25 - v12);
  *(_QWORD *)(v3 + 8) = v11;
  return result;
}

uint64_t std::vector<BOOL,geo::StdAllocator<BOOL,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t a1)
{
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(_QWORD *)a1, 8 * *(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t *std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

uint64_t std::vector<GeoCodecsRoadOffsets,geo::StdAllocator<GeoCodecsRoadOffsets,geo::codec::Allocator>>::reserve(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (a2 > (uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 4)
  {
    if (a2 >> 60)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = *(_QWORD *)(result + 8) - *(_QWORD *)result;
    v4 = 16 * a2;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 16 * a2, 4);
    v6 = *(_QWORD *)v2;
    v5 = *(_QWORD *)(v2 + 8);
    v7 = result + (v3 & 0xFFFFFFFFFFFFFFF0);
    if (v5 != *(_QWORD *)v2)
    {
      do
      {
        *(_OWORD *)(v7 - 16) = *(_OWORD *)(v5 - 16);
        v7 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *(_QWORD *)v2;
    }
    *(_QWORD *)v2 = v7;
    *(_QWORD *)(v2 + 8) = result + (v3 & 0xFFFFFFFFFFFFFFF0);
    v8 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = result + v4;
    if (v5)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 24) + 40))(*(_QWORD *)(v2 + 24), v5, v8 - v5);
  }
  return result;
}

uint64_t std::vector<GeoCodecsRoadOffsets,geo::StdAllocator<GeoCodecsRoadOffsets,geo::codec::Allocator>>::emplace_back<GeoCodecsRoadOffsets>(uint64_t result, _OWORD *a2)
{
  uint64_t v3;
  _OWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v4 = *(_OWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if ((unint64_t)v4 >= v5)
  {
    v6 = ((uint64_t)v4 - *(_QWORD *)result) >> 4;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 60)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v8 = v5 - *(_QWORD *)result;
    if (v8 >> 3 > v7)
      v7 = v8 >> 3;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v7 = 0xFFFFFFFFFFFFFFFLL;
    if (v7)
    {
      v9 = 16 * v7;
      result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 16 * v7, 4);
      v10 = (_OWORD *)(result + 16 * v6);
      v7 = result + v9;
      if (result)
        *v10 = *a2;
      v11 = (uint64_t)(v10 + 1);
      v13 = *(_QWORD *)v3;
      v12 = *(_QWORD *)(v3 + 8);
      if (v12 == *(_QWORD *)v3)
      {
LABEL_14:
        *(_QWORD *)v3 = v10;
        *(_QWORD *)(v3 + 8) = v11;
        v14 = *(_QWORD *)(v3 + 16);
        *(_QWORD *)(v3 + 16) = v7;
        if (!v12)
        {
LABEL_15:
          *(_QWORD *)(v3 + 8) = v11;
          return result;
        }
LABEL_19:
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v12, v14 - v12);
        goto LABEL_15;
      }
    }
    else
    {
      v10 = (_OWORD *)(16 * v6);
      v11 = 16 * v6 + 16;
      v13 = *(_QWORD *)result;
      v12 = *(_QWORD *)(result + 8);
      if (v12 == *(_QWORD *)result)
        goto LABEL_14;
    }
    do
    {
      *--v10 = *(_OWORD *)(v12 - 16);
      v12 -= 16;
    }
    while (v12 != v13);
    v12 = *(_QWORD *)v3;
    *(_QWORD *)v3 = v10;
    *(_QWORD *)(v3 + 8) = v11;
    v14 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v7;
    if (!v12)
      goto LABEL_15;
    goto LABEL_19;
  }
  if (v4)
    *v4 = *a2;
  *(_QWORD *)(result + 8) = v4 + 1;
  return result;
}

_QWORD *std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::resize(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = (uint64_t)(result[1] - *result) >> 2;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
    return (_QWORD *)std::vector<int,geo::StdAllocator<int,geo::codec::Allocator>>::__append((uint64_t)result, v4);
  if (!v3)
    result[1] = *result + 4 * a2;
  return result;
}

uint64_t std::vector<GeoCodecsRunningTrackLane,geo::StdAllocator<GeoCodecsRunningTrackLane,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = result;
  v4 = *(_QWORD *)result;
  v5 = *(_OWORD **)(result + 8);
  v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)result) >> 4);
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return result;
    v19 = (_OWORD *)(v4 + 48 * a2);
    while (v5 != v19)
    {
      v20 = *((_QWORD *)v5 - 5);
      if (v20)
      {
        *((_QWORD *)v5 - 4) = v20;
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v5 - 2) + 40))(*((_QWORD *)v5 - 2), v20, *((_QWORD *)v5 - 3) - v20);
      }
      v5 -= 3;
    }
LABEL_23:
    *(_QWORD *)(v3 + 8) = v19;
    return result;
  }
  v8 = *(_QWORD *)(result + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v5) >> 4) >= v7)
  {
    v19 = &v5[3 * v7];
    v21 = 48 * a2 - 16 * (((uint64_t)v5 - *(_QWORD *)result) >> 4);
    do
    {
      if (v5)
      {
        v5[1] = 0u;
        v5[2] = 0u;
        *v5 = 0u;
        result = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
        *((_QWORD *)v5 + 4) = result;
      }
      v5 += 3;
      v21 -= 48;
    }
    while (v21);
    goto LABEL_23;
  }
  if (a2 > 0x555555555555555)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v4) >> 4);
  v10 = 2 * v9;
  if (2 * v9 <= a2)
    v10 = a2;
  if (v9 >= 0x2AAAAAAAAAAAAAALL)
    v11 = 0x555555555555555;
  else
    v11 = v10;
  v12 = 48 * v11;
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 48 * v11, 8);
  v13 = 48 * v6;
  v14 = (_OWORD *)(result + 48 * v6);
  v15 = result + v12;
  v16 = result + 48 * a2;
  v17 = 48 * a2 - v13;
  v18 = v14;
  do
  {
    if (v18)
    {
      v18[1] = 0u;
      v18[2] = 0u;
      *v18 = 0u;
      result = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
      *((_QWORD *)v18 + 4) = result;
    }
    v18 += 3;
    v17 -= 48;
  }
  while (v17);
  v22 = *(_QWORD *)v3;
  v23 = *(_QWORD *)(v3 + 8);
  if (v23 == *(_QWORD *)v3)
  {
    *(_QWORD *)v3 = v14;
    *(_QWORD *)(v3 + 8) = v16;
    v28 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v15;
  }
  else
  {
    v24 = 0;
    do
    {
      v25 = &v14[v24 / 0x10];
      v26 = v23 + v24;
      *((_BYTE *)v25 - 48) = *(_BYTE *)(v23 + v24 - 48);
      *((_QWORD *)v25 - 4) = 0;
      *((_QWORD *)v25 - 3) = 0;
      *((_QWORD *)v25 - 5) = 0;
      *((_QWORD *)v25 - 2) = *(_QWORD *)(v23 + v24 - 16);
      *(_OWORD *)((char *)v25 - 40) = *(_OWORD *)(v23 + v24 - 40);
      *((_QWORD *)v25 - 3) = *(_QWORD *)(v23 + v24 - 24);
      *(_QWORD *)(v26 - 40) = 0;
      *(_QWORD *)(v26 - 32) = 0;
      *(_QWORD *)(v26 - 24) = 0;
      *((_QWORD *)v25 - 1) = *(_QWORD *)(v23 + v24 - 8);
      v24 -= 48;
    }
    while (v23 + v24 != v22);
    v23 = *(_QWORD *)v3;
    v27 = *(_QWORD *)(v3 + 8);
    *(_QWORD *)v3 = &v14[v24 / 0x10];
    *(_QWORD *)(v3 + 8) = v16;
    v28 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v15;
    while (v27 != v23)
    {
      v29 = *(_QWORD *)(v27 - 40);
      if (v29)
      {
        *(_QWORD *)(v27 - 32) = v29;
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v27 - 16) + 40))(*(_QWORD *)(v27 - 16), v29, *(_QWORD *)(v27 - 24) - v29);
      }
      v27 -= 48;
    }
  }
  if (v23)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v23, v28 - v23);
  return result;
}

uint64_t std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::resize(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  v2 = result;
  v3 = *(_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(_QWORD *)result) >> 2);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
      *(_QWORD *)(result + 8) = v3 + 12 * a2;
  }
  else
  {
    v7 = *(_QWORD *)(result + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 2) >= v6)
    {
      *(_QWORD *)(result + 8) = v4 + 12 * (12 * v6 / 0xC);
    }
    else
    {
      if (a2 > 0x1555555555555555)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 2);
      v9 = 2 * v8;
      if (2 * v8 <= a2)
        v9 = a2;
      if (v8 >= 0xAAAAAAAAAAAAAAALL)
        v10 = 0x1555555555555555;
      else
        v10 = v9;
      v11 = 12 * v10;
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 12 * v10, 4);
      v13 = *(_QWORD *)v2;
      v12 = *(_QWORD *)(v2 + 8);
      v14 = result + 12 * v5;
      v15 = v14 + 12 * (12 * v6 / 0xC);
      if (v12 != *(_QWORD *)v2)
      {
        do
        {
          v16 = *(_QWORD *)(v12 - 12);
          v12 -= 12;
          v17 = *(_DWORD *)(v12 + 8);
          *(_QWORD *)(v14 - 12) = v16;
          v14 -= 12;
          *(_DWORD *)(v14 + 8) = v17;
        }
        while (v12 != v13);
        v12 = *(_QWORD *)v2;
      }
      *(_QWORD *)v2 = v14;
      *(_QWORD *)(v2 + 8) = v15;
      v18 = *(_QWORD *)(v2 + 16);
      *(_QWORD *)(v2 + 16) = result + v11;
      if (v12)
        return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 24) + 40))(*(_QWORD *)(v2 + 24), v12, v18 - v12);
    }
  }
  return result;
}

uint64_t *std::vector<GeoCodecsRunningTrack,geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v3 -= 128;
        geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>::destroy((uint64_t)(a1 + 3), v3);
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

geo::codec::Allocator *std::vector<long long,geo::StdAllocator<long long,geo::codec::Allocator>>::vector(geo::codec::Allocator *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v4 = geo::codec::Allocator::instance(a1);
  *((_QWORD *)a1 + 3) = v4;
  if (a2)
  {
    v5 = a2;
    v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5 * 8, 8);
    *(_QWORD *)a1 = v6;
    *((_QWORD *)a1 + 1) = v6;
    v7 = &v6[v5];
    *((_QWORD *)a1 + 2) = &v6[v5];
    do
    {
      if (v6)
        *v6 = 0;
      ++v6;
      --v5;
    }
    while (v5 * 8);
    *((_QWORD *)a1 + 1) = v7;
  }
  return a1;
}

void sub_189AF7F60(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplate,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::AnnotationTemplate,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 32);
        if (v5)
        {
          *(_QWORD *)(v3 - 24) = v5;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 - 8) + 40))(*(_QWORD *)(v3 - 8), v5, *(_QWORD *)(v3 - 16) - v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

uint64_t *std::vector<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::StdAllocator<geo::codec::_readAnnotationLabels(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::ValueArraySpan,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v2, a1[2] - v2);
  }
  return a1;
}

void geo::small_vector_base<GeoCodecsMetadata>::emplace_back<GeoCodecsMetadata&>(uint64_t a1, uint64_t *a2)
{
  char *v4;
  _DWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  _DWORD *v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD **)a1;
  v4 = *(char **)(a1 + 8);
  v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v4[-*(_QWORD *)a1] >> 2);
  v7 = *(_QWORD *)(a1 + 24);
  if (v7 < v6 + 1)
  {
    v8 = *(_DWORD **)(a1 + 16);
    v9 = (1 << -(char)__clz(v7 + 1));
    if (v7 >= 0xFFFFFFFFFFFFFFFELL)
      v9 = 1;
    if (v9 <= v6 + 1)
      v10 = v6 + 1;
    else
      v10 = v9;
    v11 = (char *)malloc_type_malloc(12 * v10, 0x1000040149951FBuLL);
    v12 = v11;
    v13 = *(_DWORD **)a1;
    v14 = *(_DWORD **)(a1 + 8);
    if (*(_DWORD **)a1 != v14)
    {
      v15 = v11;
      do
      {
        v16 = *(_QWORD *)v13;
        *((_DWORD *)v15 + 2) = v13[2];
        *(_QWORD *)v15 = v16;
        v15 += 12;
        v13 += 3;
      }
      while (v13 != v14);
    }
    if (v5 != v8)
      free(*(void **)a1);
    v4 = &v12[12 * v6];
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 24) = v10;
  }
  v17 = *a2;
  *((_DWORD *)v4 + 2) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v4 = v17;
  *(_QWORD *)(a1 + 8) += 12;
}

void std::vector<GeoCodecsMultiPolygonFeature,geo::StdAllocator<GeoCodecsMultiPolygonFeature,geo::codec::Allocator>>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  geo::codec::Allocator *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  geo::codec::Allocator *v22;
  geo::codec::Allocator *v23;
  uint64_t v24;
  unint64_t v25;
  geo::codec::Allocator *v26;
  geo::codec::Allocator *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;

  v3 = a1;
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (v5 - *(_QWORD *)a1) >> 7;
  v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 >= v6)
      return;
    v24 = v4 + (a2 << 7);
    while (v5 != v24)
    {
      v5 -= 128;
      GeoCodecsMultiPolygonFeature::~GeoCodecsMultiPolygonFeature((GeoCodecsMultiPolygonFeature *)v5);
    }
LABEL_15:
    *(_QWORD *)(v3 + 8) = v24;
    return;
  }
  v8 = *(_QWORD *)(a1 + 16);
  if (v7 <= (v8 - v5) >> 7)
  {
    v24 = v5 + (v7 << 7);
    v25 = (a2 << 7) - (v6 << 7);
    do
    {
      if (v5)
      {
        *(_OWORD *)(v5 + 96) = 0u;
        *(_OWORD *)(v5 + 112) = 0u;
        *(_OWORD *)(v5 + 64) = 0u;
        *(_OWORD *)(v5 + 80) = 0u;
        *(_OWORD *)(v5 + 32) = 0u;
        *(_OWORD *)(v5 + 48) = 0u;
        *(_OWORD *)v5 = 0u;
        *(_OWORD *)(v5 + 16) = 0u;
        v26 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
        *(_QWORD *)(v5 + 56) = v26;
        *(_QWORD *)(v5 + 64) = 0;
        *(_QWORD *)(v5 + 72) = 0;
        *(_QWORD *)(v5 + 80) = 0;
        v27 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v26);
        *(_QWORD *)(v5 + 88) = v27;
        *(_QWORD *)(v5 + 96) = 0;
        *(_QWORD *)(v5 + 104) = 0;
        *(_QWORD *)(v5 + 112) = 0;
        a1 = geo::codec::Allocator::instance(v27);
        *(_QWORD *)(v5 + 120) = a1;
      }
      v5 += 128;
      v25 -= 128;
    }
    while (v25);
    goto LABEL_15;
  }
  if (a2 >> 57)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v9 = v8 - v4;
  v10 = v9 >> 6;
  if (v9 >> 6 <= a2)
    v10 = a2;
  v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFF80;
  v12 = 0x1FFFFFFFFFFFFFFLL;
  if (!v11)
    v12 = v10;
  v13 = v12 << 7;
  v14 = (geo::codec::Allocator *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), v12 << 7, 8);
  v15 = v6 << 7;
  v16 = (char *)v14 + 128 * v6;
  v17 = (char *)v14 + v13;
  v18 = a2 << 7;
  v19 = (char *)v14 + 128 * a2;
  v20 = v18 - v15;
  v21 = v16;
  do
  {
    if (v21)
    {
      *((_OWORD *)v21 + 6) = 0u;
      *((_OWORD *)v21 + 7) = 0u;
      *((_OWORD *)v21 + 4) = 0u;
      *((_OWORD *)v21 + 5) = 0u;
      *((_OWORD *)v21 + 2) = 0u;
      *((_OWORD *)v21 + 3) = 0u;
      *(_OWORD *)v21 = 0u;
      *((_OWORD *)v21 + 1) = 0u;
      v22 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v14);
      *((_QWORD *)v21 + 7) = v22;
      *((_QWORD *)v21 + 8) = 0;
      *((_QWORD *)v21 + 9) = 0;
      *((_QWORD *)v21 + 10) = 0;
      v23 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v22);
      *((_QWORD *)v21 + 11) = v23;
      *((_QWORD *)v21 + 12) = 0;
      *((_QWORD *)v21 + 13) = 0;
      *((_QWORD *)v21 + 14) = 0;
      v14 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v23);
      *((_QWORD *)v21 + 15) = v14;
    }
    v21 += 128;
    v20 -= 128;
  }
  while (v20);
  v28 = *(_QWORD *)v3;
  v29 = *(_QWORD *)(v3 + 8);
  if (v29 == *(_QWORD *)v3)
  {
    *(_QWORD *)v3 = v16;
    *(_QWORD *)(v3 + 8) = v19;
    v35 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v17;
    if (!v29)
      return;
LABEL_28:
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v29, v35 - v29);
    return;
  }
  v30 = 0;
  do
  {
    v31 = &v16[v30];
    v32 = v29 + v30;
    v33 = *(_OWORD *)(v29 + v30 - 128);
    *(_OWORD *)(v31 - 118) = *(_OWORD *)(v29 + v30 - 118);
    *((_QWORD *)v31 - 11) = 0;
    *((_QWORD *)v31 - 10) = 0;
    *((_QWORD *)v31 - 12) = 0;
    *((_OWORD *)v31 - 8) = v33;
    *((_QWORD *)v31 - 9) = *(_QWORD *)(v29 + v30 - 72);
    *((_OWORD *)v31 - 6) = *(_OWORD *)(v29 + v30 - 96);
    *((_QWORD *)v31 - 10) = *(_QWORD *)(v29 + v30 - 80);
    *(_QWORD *)(v32 - 96) = 0;
    *(_QWORD *)(v32 - 88) = 0;
    *(_QWORD *)(v32 - 80) = 0;
    *((_QWORD *)v31 - 8) = 0;
    *((_QWORD *)v31 - 7) = 0;
    *((_QWORD *)v31 - 6) = 0;
    *((_QWORD *)v31 - 5) = *(_QWORD *)(v29 + v30 - 40);
    *((_OWORD *)v31 - 4) = *(_OWORD *)(v29 + v30 - 64);
    *((_QWORD *)v31 - 6) = *(_QWORD *)(v29 + v30 - 48);
    *(_QWORD *)(v32 - 64) = 0;
    *(_QWORD *)(v32 - 56) = 0;
    *(_QWORD *)(v32 - 48) = 0;
    *((_QWORD *)v31 - 4) = 0;
    *((_QWORD *)v31 - 3) = 0;
    *((_QWORD *)v31 - 2) = 0;
    *((_QWORD *)v31 - 1) = *(_QWORD *)(v29 + v30 - 8);
    *((_OWORD *)v31 - 2) = *(_OWORD *)(v29 + v30 - 32);
    *((_QWORD *)v31 - 2) = *(_QWORD *)(v29 + v30 - 16);
    *(_QWORD *)(v32 - 32) = 0;
    *(_QWORD *)(v32 - 24) = 0;
    *(_QWORD *)(v32 - 16) = 0;
    v30 -= 128;
  }
  while (v29 + v30 != v28);
  v29 = *(_QWORD *)v3;
  v34 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)v3 = &v16[v30];
  *(_QWORD *)(v3 + 8) = v19;
  v35 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v17;
  while (v34 != v29)
    GeoCodecsMultiPolygonFeature::~GeoCodecsMultiPolygonFeature((GeoCodecsMultiPolygonFeature *)(v34 - 128));
  if (v29)
    goto LABEL_28;
}

uint64_t *std::vector<GeoCodecsMultiPolygonFeature,geo::StdAllocator<GeoCodecsMultiPolygonFeature,geo::codec::Allocator>>::operator=[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  if (*a1)
  {
    v5 = a1[1];
    v6 = v4;
    if (v5 != v4)
    {
      do
        GeoCodecsMultiPolygonFeature::~GeoCodecsMultiPolygonFeature((GeoCodecsMultiPolygonFeature *)(v5 - 128));
      while (v5 != v4);
      v6 = *a1;
    }
    a1[1] = v4;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v6, a1[2] - v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return a1;
}

uint64_t *std::vector<GeoCodecsMultiPolygonFeature,geo::StdAllocator<GeoCodecsMultiPolygonFeature,geo::codec::Allocator>>::~vector[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        GeoCodecsMultiPolygonFeature::~GeoCodecsMultiPolygonFeature((GeoCodecsMultiPolygonFeature *)(v3 - 128));
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 40))(a1[3], v4, a1[2] - v4);
  }
  return a1;
}

_QWORD *std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::resize(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = (uint64_t)(result[1] - *result) >> 1;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
    return (_QWORD *)std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::__append((uint64_t)result, v4);
  if (!v3)
    result[1] = *result + 2 * a2;
  return result;
}

geo::codec::Allocator *std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::vector(geo::codec::Allocator *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v4 = geo::codec::Allocator::instance(a1);
  *((_QWORD *)a1 + 3) = v4;
  if (a2)
  {
    v5 = a2;
    v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5 * 8, 8);
    *(_QWORD *)a1 = v6;
    *((_QWORD *)a1 + 1) = v6;
    v7 = &v6[v5];
    *((_QWORD *)a1 + 2) = &v6[v5];
    do
    {
      if (v6)
        *v6 = 0;
      ++v6;
      --v5;
    }
    while (v5 * 8);
    *((_QWORD *)a1 + 1) = v7;
  }
  return a1;
}

void sub_189AF85E4(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::reserve(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 *v14;
  unint64_t v15;
  __int128 v16;
  __int16 v17;
  uint64_t v18;

  if (a2 > (uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 1)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 8) - *(_QWORD *)result;
    v4 = 2 * a2;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 2 * a2, 2);
    v5 = result + (v3 & 0xFFFFFFFFFFFFFFFELL);
    v6 = *(_QWORD *)v2;
    v7 = *(_QWORD *)(v2 + 8);
    v8 = v5;
    if (v7 != *(_QWORD *)v2)
    {
      v9 = v7 - *(_QWORD *)v2 - 2;
      if (v9 >= 0x1E)
      {
        v8 = result + (v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v7 - v8 >= 0x20)
        {
          v10 = (v9 >> 1) + 1;
          v11 = 2 * (v10 & 0xFFFFFFFFFFFFFFF0);
          v12 = v7 - v11;
          v8 = v5 - v11;
          v13 = (_OWORD *)(result + 2 * (v3 >> 1) - 16);
          v14 = (__int128 *)(v7 - 16);
          v15 = v10 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v16 = *v14;
            *(v13 - 1) = *(v14 - 1);
            *v13 = v16;
            v13 -= 2;
            v14 -= 2;
            v15 -= 16;
          }
          while (v15);
          v7 = v12;
          if (v10 == (v10 & 0xFFFFFFFFFFFFFFF0))
            goto LABEL_10;
        }
      }
      else
      {
        v8 = result + (v3 & 0xFFFFFFFFFFFFFFFELL);
      }
      do
      {
        v17 = *(_WORD *)(v7 - 2);
        v7 -= 2;
        *(_WORD *)(v8 - 2) = v17;
        v8 -= 2;
      }
      while (v7 != v6);
    }
LABEL_10:
    *(_QWORD *)v2 = v8;
    *(_QWORD *)(v2 + 8) = v5;
    v18 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = result + v4;
    if (v6)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v2 + 24) + 40))(*(_QWORD *)(v2 + 24), v6, v18 - v6);
  }
  return result;
}

uint64_t std::vector<BOOL,geo::StdAllocator<BOOL,geo::codec::Allocator>>::reserve(uint64_t result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 > *(_QWORD *)(result + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v2 = (_QWORD *)result;
    v3 = *(_QWORD *)(result + 24);
    v4 = ((a2 - 1) >> 6) + 1;
    result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, 8 * v4, 8);
    v5 = (_QWORD *)*v2;
    v6 = v2[1];
    v7 = (v6 - 1) >> 6;
    if (v6 < 0x41)
      v7 = 0;
    *(_QWORD *)(result + 8 * v7) = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      v8 = 0;
      v9 = 0;
      v10 = (_QWORD *)result;
      v11 = v5;
      do
      {
        v12 = 1 << v8;
        if (((*v11 >> v9) & 1) != 0)
          v13 = *v10 | v12;
        else
          v13 = *v10 & ~v12;
        *v10 = v13;
        v11 += v9 == 63;
        if (v9 == 63)
          v9 = 0;
        else
          ++v9;
        v10 += v8 == 63;
        if (v8 == 63)
          v8 = 0;
        else
          ++v8;
      }
      while (v9 != (v6 & 0x3F) || v11 != &v5[v6 >> 6]);
    }
    *v2 = result;
    v2[1] = v6;
    v14 = v2[2];
    v2[2] = v4;
    if (v5)
      return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v3 + 40))(v3, v5, 8 * v14);
  }
  return result;
}

void sub_189AF8878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::vector<BOOL,geo::StdAllocator<BOOL,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>::push_back[abi:ne180100](uint64_t result, _WORD *a2)
{
  uint64_t v3;
  _WORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  _OWORD *v21;
  __int128 *v22;
  unint64_t v23;
  __int128 v24;
  __int16 v25;
  uint64_t v26;

  v3 = result;
  v4 = *(_WORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4)
      *v4 = *a2;
    *(_QWORD *)(result + 8) = v4 + 1;
    return result;
  }
  v6 = (uint64_t)v4 - *(_QWORD *)result;
  if (v6 <= -3)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v7 = v6 >> 1;
  v8 = v5 - *(_QWORD *)result;
  if (v8 <= (v6 >> 1) + 1)
    v9 = v7 + 1;
  else
    v9 = v8;
  if (v8 >= 0x7FFFFFFFFFFFFFFELL)
    v9 = 0x7FFFFFFFFFFFFFFFLL;
  if (v9)
  {
    v10 = 2 * v9;
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 2 * v9, 2);
    v11 = (_WORD *)(result + 2 * v7);
    v9 = result + v10;
    if (result)
      *v11 = *a2;
    v12 = (uint64_t)(v11 + 1);
    v13 = *(_QWORD *)v3;
    v14 = *(_QWORD *)(v3 + 8);
    v15 = v14 - *(_QWORD *)v3;
    if (v14 != *(_QWORD *)v3)
      goto LABEL_15;
LABEL_22:
    v20 = v11;
    goto LABEL_25;
  }
  v11 = (_WORD *)(2 * v7);
  v12 = 2 * v7 + 2;
  v13 = *(_QWORD *)result;
  v14 = *(_QWORD *)(result + 8);
  v15 = v14 - *(_QWORD *)result;
  if (v14 == *(_QWORD *)result)
    goto LABEL_22;
LABEL_15:
  v16 = v15 - 2;
  if (v16 < 0x1E || (unint64_t)(v14 - (_QWORD)v11) < 0x20)
  {
    v19 = v14;
    v20 = v11;
  }
  else
  {
    v17 = (v16 >> 1) + 1;
    v18 = 2 * (v17 & 0xFFFFFFFFFFFFFFF0);
    v19 = v14 - v18;
    v20 = &v11[v18 / 0xFFFFFFFFFFFFFFFELL];
    v21 = v11 - 8;
    v22 = (__int128 *)(v14 - 16);
    v23 = v17 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v24 = *v22;
      *(v21 - 1) = *(v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 2;
      v23 -= 16;
    }
    while (v23);
    if (v17 == (v17 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_25;
  }
  do
  {
    v25 = *(_WORD *)(v19 - 2);
    v19 -= 2;
    *--v20 = v25;
  }
  while (v19 != v13);
LABEL_25:
  *(_QWORD *)v3 = v20;
  *(_QWORD *)(v3 + 8) = v12;
  v26 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v9;
  if (v13)
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v13, v26 - v13);
  *(_QWORD *)(v3 + 8) = v12;
  return result;
}

uint64_t std::vector<BOOL,geo::StdAllocator<BOOL,geo::codec::Allocator>>::push_back(uint64_t result, _BYTE *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = (uint64_t *)result;
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (v4 == v5 << 6)
  {
    if ((uint64_t)(v4 + 1) < 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v6 = v5 << 7;
    if (v6 <= (v4 & 0xFFFFFFFFFFFFFFC0) + 64)
      v6 = (v4 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v4 <= 0x3FFFFFFFFFFFFFFELL)
      v7 = v6;
    else
      v7 = 0x7FFFFFFFFFFFFFFFLL;
    result = std::vector<BOOL,geo::StdAllocator<BOOL,geo::codec::Allocator>>::reserve(result, v7);
    v4 = v3[1];
  }
  v3[1] = v4 + 1;
  v8 = *v3;
  v9 = v4 >> 6;
  v10 = 1 << v4;
  if (*a2)
    v11 = *(_QWORD *)(v8 + 8 * v9) | v10;
  else
    v11 = *(_QWORD *)(v8 + 8 * v9) & ~v10;
  *(_QWORD *)(v8 + 8 * v9) = v11;
  return result;
}

uint64_t std::vector<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::StdAllocator<std::vector<unsigned short,geo::StdAllocator<unsigned short,geo::codec::Allocator>>,geo::codec::Allocator>>::push_back[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4)
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      v4[3] = *(_QWORD *)(a2 + 24);
      *(_OWORD *)v4 = *(_OWORD *)a2;
      v4[2] = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
    *(_QWORD *)(result + 8) = v4 + 4;
    return result;
  }
  v6 = ((uint64_t)v4 - *(_QWORD *)result) >> 5;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v8 = v5 - *(_QWORD *)result;
  if (v8 >> 4 > v7)
    v7 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v7 = 0x7FFFFFFFFFFFFFFLL;
  if (v7)
  {
    v9 = 32 * v7;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 32 * v7, 8);
    v10 = (_QWORD *)(result + 32 * v6);
    v7 = result + v9;
    if (result)
    {
      *v10 = 0;
      v10[1] = 0;
      v10[2] = 0;
      v10[3] = *(_QWORD *)(a2 + 24);
      *(_OWORD *)v10 = *(_OWORD *)a2;
      v10[2] = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
    v11 = (uint64_t)(v10 + 4);
    v12 = *(_QWORD *)v3;
    v13 = *(_QWORD *)(v3 + 8);
    if (v13 != *(_QWORD *)v3)
      goto LABEL_14;
  }
  else
  {
    v10 = (_QWORD *)(32 * v6);
    v11 = 32 * v6 + 32;
    v12 = *(_QWORD *)result;
    v13 = *(_QWORD *)(result + 8);
    if (v13 != *(_QWORD *)result)
    {
LABEL_14:
      v14 = 0;
      do
      {
        v15 = &v10[v14 / 8];
        v16 = v13 + v14;
        *(v15 - 4) = 0;
        *(v15 - 3) = 0;
        *(v15 - 2) = 0;
        *(v15 - 1) = *(_QWORD *)(v13 + v14 - 8);
        *((_OWORD *)v15 - 2) = *(_OWORD *)(v13 + v14 - 32);
        *(v15 - 2) = *(_QWORD *)(v13 + v14 - 16);
        *(_QWORD *)(v16 - 32) = 0;
        *(_QWORD *)(v16 - 24) = 0;
        *(_QWORD *)(v16 - 16) = 0;
        v14 -= 32;
      }
      while (v13 + v14 != v12);
      v13 = *(_QWORD *)v3;
      v17 = *(_QWORD *)(v3 + 8);
      *(_QWORD *)v3 = &v10[v14 / 8];
      *(_QWORD *)(v3 + 8) = v11;
      v18 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 16) = v7;
      if (v17 != v13)
      {
        v19 = v17;
        do
        {
          v21 = *(_QWORD *)(v19 - 32);
          v19 -= 32;
          v20 = v21;
          if (v21)
          {
            *(_QWORD *)(v17 - 24) = v20;
            result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v17 - 8) + 40))(*(_QWORD *)(v17 - 8), v20, *(_QWORD *)(v17 - 16) - v20);
          }
          v17 = v19;
        }
        while (v19 != v13);
      }
      goto LABEL_23;
    }
  }
  *(_QWORD *)v3 = v10;
  *(_QWORD *)(v3 + 8) = v11;
  v18 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v7;
LABEL_23:
  if (v13)
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v13, v18 - v13);
  *(_QWORD *)(v3 + 8) = v11;
  return result;
}

uint64_t std::vector<std::vector<BOOL,geo::StdAllocator<BOOL,geo::codec::Allocator>>,geo::StdAllocator<std::vector<BOOL,geo::StdAllocator<BOOL,geo::codec::Allocator>>,geo::codec::Allocator>>::push_back[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (v4 < v5)
  {
    if (v4)
    {
      v6 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)v4 = *(_QWORD *)a2;
      *(_QWORD *)(v4 + 8) = v6;
      *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
    *(_QWORD *)(result + 8) = v4 + 32;
    return result;
  }
  v7 = (uint64_t)(v4 - *(_QWORD *)result) >> 5;
  v8 = v7 + 1;
  if ((unint64_t)(v7 + 1) >> 59)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v9 = v5 - *(_QWORD *)result;
  if (v9 >> 4 > v8)
    v8 = v9 >> 4;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
    v8 = 0x7FFFFFFFFFFFFFFLL;
  if (v8)
  {
    v10 = 32 * v8;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 32 * v8, 8);
    v11 = result + 32 * v7;
    v8 = result + v10;
    if (result)
    {
      v12 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)v11 = *(_QWORD *)a2;
      *(_QWORD *)(v11 + 8) = v12;
      *(_OWORD *)(v11 + 16) = *(_OWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
    v13 = v11 + 32;
    v14 = *(_QWORD *)v3;
    v15 = *(_QWORD *)(v3 + 8);
    if (v15 == *(_QWORD *)v3)
      goto LABEL_22;
    do
    {
LABEL_16:
      v16 = *(_QWORD *)(v15 - 32);
      v15 -= 32;
      *(_QWORD *)(v11 - 32) = v16;
      v11 -= 32;
      *(_QWORD *)(v11 + 8) = *(_QWORD *)(v15 + 8);
      *(_OWORD *)(v11 + 16) = *(_OWORD *)(v15 + 16);
      *(_QWORD *)v15 = 0;
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v15 + 16) = 0;
    }
    while (v15 != v14);
    v15 = *(_QWORD *)v3;
    v17 = *(_QWORD *)(v3 + 8);
    *(_QWORD *)v3 = v11;
    *(_QWORD *)(v3 + 8) = v13;
    v18 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v8;
    if (v17 != v15)
    {
      v19 = v17;
      do
      {
        v21 = *(_QWORD *)(v19 - 32);
        v19 -= 32;
        v20 = v21;
        if (v21)
          result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v17 - 8) + 40))(*(_QWORD *)(v17 - 8), v20, 8 * *(_QWORD *)(v17 - 16));
        v17 = v19;
      }
      while (v19 != v15);
    }
    goto LABEL_23;
  }
  v11 = 32 * v7;
  v13 = 32 * v7 + 32;
  v14 = *(_QWORD *)result;
  v15 = *(_QWORD *)(result + 8);
  if (v15 != *(_QWORD *)result)
    goto LABEL_16;
LABEL_22:
  *(_QWORD *)v3 = v11;
  *(_QWORD *)(v3 + 8) = v13;
  v18 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v8;
LABEL_23:
  if (v15)
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v15, v18 - v15);
  *(_QWORD *)(v3 + 8) = v13;
  return result;
}

uint64_t std::vector<unsigned long long,geo::StdAllocator<unsigned long long,geo::codec::Allocator>>::push_back[abi:ne180100](uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  __int128 *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if ((unint64_t)v4 < v5)
  {
    if (v4)
      *v4 = *a2;
    *(_QWORD *)(result + 8) = v4 + 1;
    return result;
  }
  v6 = ((uint64_t)v4 - *(_QWORD *)result) >> 3;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 61)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v8 = v5 - *(_QWORD *)result;
  if (v8 >> 2 > v7)
    v7 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v7 = 0x1FFFFFFFFFFFFFFFLL;
  if (v7)
  {
    v9 = 8 * v7;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 8 * v7, 8);
    v10 = (_QWORD *)(result + 8 * v6);
    v7 = result + v9;
    if (result)
      *v10 = *a2;
    v11 = (uint64_t)(v10 + 1);
    v12 = *(_QWORD *)v3;
    v13 = *(_QWORD *)(v3 + 8);
    v14 = v13 - *(_QWORD *)v3;
    if (v13 != *(_QWORD *)v3)
      goto LABEL_14;
LABEL_21:
    v19 = v10;
    goto LABEL_24;
  }
  v10 = (_QWORD *)(8 * v6);
  v11 = 8 * v6 + 8;
  v12 = *(_QWORD *)result;
  v13 = *(_QWORD *)(result + 8);
  v14 = v13 - *(_QWORD *)result;
  if (v13 == *(_QWORD *)result)
    goto LABEL_21;
LABEL_14:
  v15 = v14 - 8;
  if (v15 < 0x38 || (unint64_t)(v13 - (_QWORD)v10) < 0x20)
  {
    v18 = v13;
    v19 = v10;
  }
  else
  {
    v16 = (v15 >> 3) + 1;
    v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
    v18 = v13 - v17;
    v19 = &v10[v17 / 0xFFFFFFFFFFFFFFF8];
    v20 = v10 - 2;
    v21 = (__int128 *)(v13 - 16);
    v22 = v16 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v23 = *v21;
      *(v20 - 1) = *(v21 - 1);
      *v20 = v23;
      v20 -= 2;
      v21 -= 2;
      v22 -= 4;
    }
    while (v22);
    if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_24;
  }
  do
  {
    v24 = *(_QWORD *)(v18 - 8);
    v18 -= 8;
    *--v19 = v24;
  }
  while (v18 != v12);
LABEL_24:
  *(_QWORD *)v3 = v19;
  *(_QWORD *)(v3 + 8) = v11;
  v25 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v7;
  if (v12)
    result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v12, v25 - v12);
  *(_QWORD *)(v3 + 8) = v11;
  return result;
}

uint64_t geo::codec::_findOverpasses(std::shared_ptr<geo::codec::VectorTile> const&)::$_0::__invoke(uint64_t a1, uint64_t a2)
{
  float v2;
  float v3;

  v2 = *(float *)(a1 + 20);
  v3 = *(float *)(a2 + 20);
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  else
    return v2 > v3;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**,false>(unint64_t result, unint64_t **a2, uint64_t a3, char a4)
{
  unint64_t **v7;
  unint64_t **v8;
  unint64_t **i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t **v13;
  unint64_t **v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t **v24;
  unint64_t v25;
  unint64_t **j;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t **v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t *v45;
  unint64_t *v46;
  BOOL v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  unsigned int v51;
  unsigned int v52;
  BOOL v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  BOOL v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t *v60;
  unsigned int v61;
  unsigned int v62;
  BOOL v63;
  unint64_t *v64;
  unint64_t v65;
  BOOL v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t **v69;
  BOOL v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t *v73;
  unint64_t *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  BOOL v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t *v81;
  unint64_t *v82;
  BOOL v83;
  unsigned int v84;
  unsigned int v85;
  unint64_t **v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  BOOL v90;
  unsigned int v91;
  unsigned int v92;
  unint64_t **v93;
  BOOL v95;
  uint64_t v96;
  unint64_t **v97;
  unint64_t **v98;
  unint64_t **v99;
  unint64_t *v100;
  unint64_t *v101;
  unint64_t v102;
  BOOL v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  unsigned int v109;
  unsigned int v110;
  int64_t v111;
  int64_t v112;
  unint64_t ****v113;
  int64_t v114;
  uint64_t v115;
  unint64_t ***v116;
  unint64_t *v117;
  BOOL v118;
  unsigned int v119;
  unint64_t ***v120;
  unint64_t *v121;
  unint64_t **v122;
  BOOL v123;
  unsigned int v124;
  unsigned int v125;
  unint64_t ***v126;
  unint64_t **v127;
  BOOL v128;
  unint64_t ****v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t ***v132;
  unint64_t ***v133;
  unint64_t **v134;
  BOOL v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  unint64_t **v140;
  uint64_t v142;
  unint64_t *v143;
  unint64_t **v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t *v147;
  unint64_t *v148;
  BOOL v149;
  unsigned int v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t **v154;
  unint64_t *v155;
  unint64_t v156;
  unint64_t v157;
  BOOL v158;
  unsigned int v159;
  unsigned int v160;
  unint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  BOOL v164;
  unsigned int v165;
  unsigned int v166;
  unint64_t **v167;
  unint64_t *v168;
  unint64_t *v169;
  unint64_t v170;
  BOOL v171;
  unsigned int v172;
  unsigned int v173;
  unint64_t **v174;
  unint64_t *v175;
  BOOL v176;
  unsigned int v177;
  unsigned int v178;

  v7 = (unint64_t **)result;
LABEL_2:
  v8 = a2 - 1;
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = (char *)a2 - (char *)i;
    v11 = a2 - i;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v87 = (uint64_t)*(a2 - 1);
        v88 = *i;
        v89 = **i;
        v90 = *(_QWORD *)v87 >= v89;
        if (*(_QWORD *)v87 == v89)
        {
          v91 = *(_DWORD *)(v87 + 56);
          v92 = *((_DWORD *)v88 + 14);
          v90 = v91 >= v92;
          if (v91 == v92)
            v90 = *(_DWORD *)(v87 + 60) >= *((_DWORD *)v88 + 15);
        }
        if (!v90)
        {
          *i = (unint64_t *)v87;
          *(a2 - 1) = v88;
        }
        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**>(i, i + 1, a2 - 1);
      case 4uLL:
        return (unint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**>(i, i + 1, i + 2, a2 - 1);
      case 5uLL:
        return (unint64_t)std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**,0>(i, i + 1, i + 2, i + 3, a2 - 1);
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (i == a2)
              return result;
            v111 = (v11 - 2) >> 1;
            v112 = v111;
LABEL_156:
            v114 = v112;
            if (v111 < v112)
              goto LABEL_155;
            v115 = (2 * v112) | 1;
            v113 = (unint64_t ****)&i[v115];
            if (2 * v114 + 2 >= (uint64_t)v11)
              goto LABEL_164;
            v116 = *v113;
            v117 = (unint64_t *)v113[1];
            result = (unint64_t)**v113;
            v118 = result >= *v117;
            if (result == *v117
              && (result = *((unsigned int *)v116 + 14),
                  v119 = *((_DWORD *)v117 + 14),
                  v118 = result >= v119,
                  (_DWORD)result == v119))
            {
              if (*((_DWORD *)v116 + 15) >= *((_DWORD *)v117 + 15))
              {
LABEL_164:
                v120 = *v113;
                v121 = i[v114];
                v122 = **v113;
                v123 = (unint64_t)v122 >= *v121;
                if (v122 == (unint64_t **)*v121
                  && (v124 = *((_DWORD *)v120 + 14), v125 = *((_DWORD *)v121 + 14), v123 = v124 >= v125, v124 == v125))
                {
                  if (*((_DWORD *)v120 + 15) < *((_DWORD *)v121 + 15))
                    goto LABEL_155;
                }
                else if (!v123)
                {
                  goto LABEL_155;
                }
                i[v114] = (unint64_t *)v120;
                while (1)
                {
                  if (v111 < v115)
                    goto LABEL_154;
                  v129 = v113;
                  v130 = 2 * v115;
                  v115 = (2 * v115) | 1;
                  v113 = (unint64_t ****)&i[v115];
                  v131 = v130 + 2;
                  if (v131 < (uint64_t)v11)
                  {
                    v132 = *v113;
                    v133 = v113[1];
                    v134 = **v113;
                    v135 = v134 >= *v133;
                    if (v134 == *v133
                      && (v136 = *((_DWORD *)v132 + 14), v137 = *((_DWORD *)v133 + 14),
                                                         v135 = v136 >= v137,
                                                         v136 == v137))
                    {
                      if (*((_DWORD *)v132 + 15) >= *((_DWORD *)v133 + 15))
                        goto LABEL_172;
                    }
                    else if (v135)
                    {
                      goto LABEL_172;
                    }
                    ++v113;
                    v115 = v131;
                  }
LABEL_172:
                  v126 = *v113;
                  v127 = **v113;
                  result = *v121;
                  v128 = (unint64_t)v127 >= *v121;
                  if (v127 == (unint64_t **)*v121
                    && (v138 = *((_DWORD *)v126 + 14),
                        result = *((unsigned int *)v121 + 14),
                        v128 = v138 >= result,
                        v138 == (_DWORD)result))
                  {
                    result = *((unsigned int *)v121 + 15);
                    if (*((_DWORD *)v126 + 15) < result)
                    {
LABEL_153:
                      v113 = v129;
LABEL_154:
                      *v113 = (unint64_t ***)v121;
LABEL_155:
                      v112 = v114 - 1;
                      if (v114)
                        goto LABEL_156;
                      v139 = (unint64_t)v10 >> 3;
                      while (2)
                      {
                        v142 = 0;
                        v143 = *i;
                        v140 = i;
                        do
                        {
                          v144 = v140;
                          v140 += v142 + 1;
                          v145 = 2 * v142;
                          v142 = (2 * v142) | 1;
                          v146 = v145 + 2;
                          if (v146 < v139)
                          {
                            v147 = *v140;
                            v148 = v140[1];
                            result = **v140;
                            v149 = result >= *v148;
                            if (result == *v148)
                            {
                              result = *((unsigned int *)v147 + 14);
                              v150 = *((_DWORD *)v148 + 14);
                              v149 = result >= v150;
                              if ((_DWORD)result == v150)
                                v149 = *((_DWORD *)v147 + 15) >= *((_DWORD *)v148 + 15);
                            }
                            if (!v149)
                            {
                              ++v140;
                              v142 = v146;
                            }
                          }
                          *v144 = *v140;
                        }
                        while (v142 <= (uint64_t)((unint64_t)(v139 - 2) >> 1));
                        if (v140 == --a2)
                        {
LABEL_190:
                          *v140 = v143;
                        }
                        else
                        {
                          *v140 = *a2;
                          *a2 = v143;
                          v151 = (char *)v140 - (char *)i + 8;
                          if (v151 >= 9)
                          {
                            v152 = ((unint64_t)v151 >> 3) - 2;
                            v153 = v152 >> 1;
                            v154 = &i[v152 >> 1];
                            v155 = *v154;
                            v143 = *v140;
                            v156 = **v154;
                            v157 = **v140;
                            v158 = v156 >= v157;
                            if (v156 == v157)
                            {
                              v159 = *((_DWORD *)v155 + 14);
                              v160 = *((_DWORD *)v143 + 14);
                              v158 = v159 >= v160;
                              if (v159 == v160)
                                v158 = *((_DWORD *)v155 + 15) >= *((_DWORD *)v143 + 15);
                            }
                            if (!v158)
                            {
                              *v140 = v155;
                              if (v152 >= 2)
                              {
                                while (1)
                                {
                                  v161 = v153 - 1;
                                  v153 = (v153 - 1) >> 1;
                                  v140 = &i[v153];
                                  v162 = *v140;
                                  v163 = **v140;
                                  v164 = v163 >= *v143;
                                  if (v163 == *v143)
                                  {
                                    v165 = *((_DWORD *)v162 + 14);
                                    v166 = *((_DWORD *)v143 + 14);
                                    v164 = v165 >= v166;
                                    if (v165 == v166)
                                      v164 = *((_DWORD *)v162 + 15) >= *((_DWORD *)v143 + 15);
                                  }
                                  if (v164)
                                    break;
                                  *v154 = v162;
                                  v154 = &i[v153];
                                  if (v161 <= 1)
                                    goto LABEL_190;
                                }
                              }
                              v140 = v154;
                              goto LABEL_190;
                            }
                          }
                        }
                        if (v139-- <= 2)
                          return result;
                        continue;
                      }
                    }
                  }
                  else if (!v128)
                  {
                    goto LABEL_153;
                  }
                  *v129 = v126;
                }
              }
            }
            else if (v118)
            {
              goto LABEL_164;
            }
            ++v113;
            v115 = 2 * v114 + 2;
            goto LABEL_164;
          }
          v12 = v11 >> 1;
          v13 = &i[v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**>(&v7[v11 >> 1], v7, a2 - 1);
            --a3;
            v16 = *v7;
            v17 = **v7;
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**>(v7, &v7[v11 >> 1], a2 - 1);
            v14 = &v7[v12];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**>(v7 + 1, v14 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**>(v7 + 2, &v7[v12 + 1], a2 - 3);
            result = (unint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**>(v14 - 1, v13, &v7[v12 + 1]);
            v15 = *v7;
            *v7 = *v14;
            *v14 = v15;
            --a3;
            v16 = *v7;
            v17 = **v7;
            if ((a4 & 1) != 0)
              goto LABEL_12;
          }
          v18 = (uint64_t)*(v7 - 1);
          if (*(_QWORD *)v18 != v17)
          {
            if (*(_QWORD *)v18 < v17)
              goto LABEL_12;
LABEL_67:
            v54 = *v8;
            v55 = **v8;
            if (v17 == v55)
            {
              v61 = *((_DWORD *)v16 + 14);
              v62 = *((_DWORD *)v54 + 14);
              v63 = v61 >= v62;
              if (v61 == v62)
                v63 = *((_DWORD *)v16 + 15) >= *((_DWORD *)v54 + 15);
              if (v63)
              {
LABEL_80:
                for (i = v7 + 1; i < a2; ++i)
                {
                  v64 = *i;
                  v65 = **i;
                  v66 = v17 >= v65;
                  if (v17 == v65)
                  {
                    v67 = *((_DWORD *)v16 + 14);
                    v68 = *((_DWORD *)v64 + 14);
                    v66 = v67 >= v68;
                    if (v67 == v68)
                      v66 = *((_DWORD *)v16 + 15) >= *((_DWORD *)v64 + 15);
                  }
                  if (!v66)
                    break;
                }
                goto LABEL_87;
              }
            }
            else if (v17 >= v55)
            {
              goto LABEL_80;
            }
            i = v7 + 1;
            v56 = v7[1];
            v57 = v17 >= *v56;
            if (v17 != *v56)
              goto LABEL_72;
LABEL_70:
            v58 = *((_DWORD *)v16 + 14);
            v59 = *((_DWORD *)v56 + 14);
            v57 = v58 >= v59;
            if (v58 == v59)
              v57 = *((_DWORD *)v16 + 15) >= *((_DWORD *)v56 + 15);
LABEL_72:
            while (v57)
            {
              v60 = i[1];
              ++i;
              v56 = v60;
              v57 = v17 >= *v60;
              if (v17 == *v60)
                goto LABEL_70;
            }
LABEL_87:
            v69 = a2;
            if (i < a2)
            {
              v69 = a2 - 1;
              v70 = v17 >= v55;
              if (v17 != v55)
                goto LABEL_91;
LABEL_89:
              v71 = *((_DWORD *)v16 + 14);
              v72 = *((_DWORD *)v54 + 14);
              v70 = v71 >= v72;
              if (v71 == v72)
                v70 = *((_DWORD *)v16 + 15) >= *((_DWORD *)v54 + 15);
LABEL_91:
              while (!v70)
              {
                v73 = *--v69;
                v54 = v73;
                v70 = v17 >= *v73;
                if (v17 == *v73)
                  goto LABEL_89;
              }
            }
            if (i < v69)
            {
              v74 = *i;
              v75 = *v69;
              do
              {
                *i++ = v75;
                *v69 = v74;
                v76 = *v16;
                v74 = *i;
                v77 = **i;
                v78 = *v16 >= v77;
                if (*v16 != v77)
                  goto LABEL_100;
LABEL_98:
                v79 = *((_DWORD *)v16 + 14);
                v80 = *((_DWORD *)v74 + 14);
                v78 = v79 >= v80;
                if (v79 == v80)
                  v78 = *((_DWORD *)v16 + 15) >= *((_DWORD *)v74 + 15);
LABEL_100:
                while (v78)
                {
                  v81 = i[1];
                  ++i;
                  v74 = v81;
                  v78 = v76 >= *v81;
                  if (v76 == *v81)
                    goto LABEL_98;
                }
                do
                {
                  while (1)
                  {
                    while (1)
                    {
                      v82 = *--v69;
                      v75 = v82;
                      v83 = v76 >= *v82;
                      if (v76 == *v82)
                        break;
                      if (v83)
                        goto LABEL_96;
                    }
                    v84 = *((_DWORD *)v16 + 14);
                    v85 = *((_DWORD *)v75 + 14);
                    if (v84 != v85)
                      break;
                    if (*((_DWORD *)v16 + 15) >= *((_DWORD *)v75 + 15))
                      goto LABEL_96;
                  }
                }
                while (v84 < v85);
LABEL_96:
                ;
              }
              while (i < v69);
            }
            v86 = i - 1;
            if (i - 1 != v7)
              *v7 = *v86;
            a4 = 0;
            *v86 = v16;
            continue;
          }
          v51 = *(_DWORD *)(v18 + 56);
          v52 = *((_DWORD *)v16 + 14);
          v53 = v51 >= v52;
          if (v51 == v52)
            v53 = *(_DWORD *)(v18 + 60) >= *((_DWORD *)v16 + 15);
          if (v53)
            goto LABEL_67;
LABEL_12:
          v19 = 0;
          v20 = v7[1];
          v21 = *v20 >= v17;
          if (*v20 != v17)
            goto LABEL_15;
LABEL_13:
          v22 = *((_DWORD *)v20 + 14);
          v23 = *((_DWORD *)v16 + 14);
          v21 = v22 >= v23;
          if (v22 == v23)
            v21 = *((_DWORD *)v20 + 15) >= *((_DWORD *)v16 + 15);
LABEL_15:
          while (!v21)
          {
            v20 = v7[++v19 + 1];
            v21 = *v20 >= v17;
            if (*v20 == v17)
              goto LABEL_13;
          }
          v24 = &v7[v19];
          v25 = (unint64_t)&v7[v19 + 1];
          j = a2 - 1;
          if (v19 * 8)
          {
            v27 = *v8;
            v28 = **v8;
            v29 = v28 >= v17;
            if (v28 != v17)
              goto LABEL_22;
LABEL_20:
            v30 = *((_DWORD *)v27 + 14);
            v31 = *((_DWORD *)v16 + 14);
            v29 = v30 >= v31;
            if (v30 == v31)
              v29 = *((_DWORD *)v27 + 15) >= *((_DWORD *)v16 + 15);
LABEL_22:
            while (v29)
            {
              v32 = *--j;
              v27 = v32;
              v29 = *v32 >= v17;
              if (*v32 == v17)
                goto LABEL_20;
            }
          }
          else
          {
            j = a2;
            if (v25 < (unint64_t)a2)
            {
              for (j = a2 - 1; ; --j)
              {
                v33 = *j;
                v34 = **j;
                if (v34 == v17)
                {
                  v35 = *((_DWORD *)v33 + 14);
                  v36 = *((_DWORD *)v16 + 14);
                  if (v35 == v36)
                  {
                    if (v25 >= (unint64_t)j || *((_DWORD *)v33 + 15) < *((_DWORD *)v16 + 15))
                      break;
                  }
                  else if (v25 >= (unint64_t)j || v35 < v36)
                  {
                    break;
                  }
                }
                else if (v25 >= (unint64_t)j || v34 < v17)
                {
                  break;
                }
              }
            }
          }
          if (v25 < (unint64_t)j)
          {
            v37 = *j;
            v38 = v25;
            v39 = j;
            do
            {
              *(_QWORD *)v38 = v37;
              v38 += 8;
              *v39 = v20;
              v40 = *v16;
              v20 = *(unint64_t **)v38;
              v41 = **(_QWORD **)v38;
              v42 = v41 >= *v16;
              if (v41 != *v16)
                goto LABEL_45;
LABEL_43:
              v43 = *((_DWORD *)v20 + 14);
              v44 = *((_DWORD *)v16 + 14);
              v42 = v43 >= v44;
              if (v43 == v44)
                v42 = *((_DWORD *)v20 + 15) >= *((_DWORD *)v16 + 15);
LABEL_45:
              while (!v42)
              {
                v45 = *(unint64_t **)(v38 + 8);
                v38 += 8;
                v20 = v45;
                v42 = *v45 >= v40;
                if (*v45 == v40)
                  goto LABEL_43;
              }
              do
              {
                while (1)
                {
                  while (1)
                  {
                    v46 = *--v39;
                    v37 = v46;
                    v47 = *v46 >= v40;
                    if (*v46 == v40)
                      break;
                    if (!v47)
                      goto LABEL_41;
                  }
                  v48 = *((_DWORD *)v37 + 14);
                  v49 = *((_DWORD *)v16 + 14);
                  if (v48 != v49)
                    break;
                  if (*((_DWORD *)v37 + 15) < *((_DWORD *)v16 + 15))
                    goto LABEL_41;
                }
              }
              while (v48 >= v49);
LABEL_41:
              ;
            }
            while (v38 < (unint64_t)v39);
            v24 = (unint64_t **)(v38 - 8);
          }
          if (v24 != v7)
            *v7 = *v24;
          *v24 = v16;
          if (v25 < (unint64_t)j)
          {
LABEL_62:
            result = std::__introsort<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**,false>(v7, v24, a3, a4 & 1);
            a4 = 0;
            i = v24 + 1;
            continue;
          }
          v50 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**>(v7, v24);
          i = v24 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**>(v24 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v50)
              continue;
            goto LABEL_62;
          }
          a2 = v24;
          if (v50)
            return result;
          goto LABEL_2;
        }
        v93 = i + 1;
        v95 = i == a2 || v93 == a2;
        if ((a4 & 1) == 0)
        {
          if (v95)
            return result;
          while (1)
          {
            v167 = v7;
            v7 = v93;
            v169 = *v167;
            v168 = v167[1];
            v170 = **v167;
            v171 = *v168 >= v170;
            if (*v168 == v170)
            {
              v172 = *((_DWORD *)v168 + 14);
              v173 = *((_DWORD *)v169 + 14);
              v171 = v172 >= v173;
              if (v172 == v173)
                v171 = *((_DWORD *)v168 + 15) >= *((_DWORD *)v169 + 15);
            }
            if (!v171)
            {
              do
              {
                while (1)
                {
                  while (1)
                  {
                    v174 = v167;
                    v175 = *--v167;
                    v167[2] = v169;
                    v169 = v175;
                    v176 = *v168 >= *v175;
                    if (*v168 == *v175)
                      break;
                    if (v176)
                      goto LABEL_215;
                  }
                  v177 = *((_DWORD *)v168 + 14);
                  v178 = *((_DWORD *)v169 + 14);
                  if (v177 != v178)
                    break;
                  if (*((_DWORD *)v168 + 15) >= *((_DWORD *)v169 + 15))
                    goto LABEL_215;
                }
              }
              while (v177 < v178);
LABEL_215:
              *v174 = v168;
            }
            v93 = v7 + 1;
            if (v7 + 1 == a2)
              return result;
          }
        }
        if (v95)
          return result;
        v96 = 0;
        v97 = i;
        while (2)
        {
          v99 = v97;
          v97 = v93;
          v101 = *v99;
          v100 = v99[1];
          v102 = **v99;
          v103 = *v100 >= v102;
          if (*v100 == v102)
          {
            v104 = *((_DWORD *)v100 + 14);
            v105 = *((_DWORD *)v101 + 14);
            v103 = v104 >= v105;
            if (v104 == v105)
              v103 = *((_DWORD *)v100 + 15) >= *((_DWORD *)v101 + 15);
          }
          if (v103)
            goto LABEL_137;
          v99[1] = v101;
          v98 = i;
          if (v99 == i)
            goto LABEL_136;
          v106 = v96;
          while (1)
          {
            v107 = *(uint64_t *)((char *)i + v106 - 8);
            v108 = *v100 >= *(_QWORD *)v107;
            if (*v100 != *(_QWORD *)v107)
              break;
            v109 = *((_DWORD *)v100 + 14);
            v110 = *(_DWORD *)(v107 + 56);
            v108 = v109 >= v110;
            if (v109 != v110)
              break;
            if (*((_DWORD *)v100 + 15) >= *(_DWORD *)(v107 + 60))
            {
              v98 = (unint64_t **)((char *)i + v106);
              goto LABEL_136;
            }
LABEL_145:
            --v99;
            *(unint64_t **)((char *)i + v106) = (unint64_t *)v107;
            v106 -= 8;
            if (!v106)
            {
              v98 = i;
              goto LABEL_136;
            }
          }
          if (!v108)
            goto LABEL_145;
          v98 = v99;
LABEL_136:
          *v98 = v100;
LABEL_137:
          v93 = v97 + 1;
          v96 += 8;
          if (v97 + 1 != a2)
            continue;
          return result;
        }
    }
  }
}

unint64_t **std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**,0>(unint64_t **a1, unint64_t **a2, unint64_t **a3, unint64_t **a4, unint64_t **a5)
{
  unint64_t **result;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  unsigned int v37;
  unsigned int v38;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  v13 = **a5;
  v14 = **a4;
  if (v13 != v14)
  {
    if (v13 >= v14)
      return result;
    goto LABEL_7;
  }
  v15 = *((_DWORD *)v11 + 14);
  v16 = *((_DWORD *)v12 + 14);
  v17 = v15 >= v16;
  if (v15 == v16)
    v17 = *((_DWORD *)v11 + 15) >= *((_DWORD *)v12 + 15);
  if (!v17)
  {
LABEL_7:
    *a4 = v11;
    *a5 = v12;
    v18 = *a4;
    v19 = *a3;
    v20 = **a4;
    v21 = **a3;
    v22 = v20 >= v21;
    if (v20 == v21)
    {
      v23 = *((_DWORD *)v18 + 14);
      v24 = *((_DWORD *)v19 + 14);
      v22 = v23 >= v24;
      if (v23 == v24)
        v22 = *((_DWORD *)v18 + 15) >= *((_DWORD *)v19 + 15);
    }
    if (!v22)
    {
      *a3 = v18;
      *a4 = v19;
      v25 = *a3;
      v26 = *a2;
      v27 = **a3;
      v28 = **a2;
      v29 = v27 >= v28;
      if (v27 == v28)
      {
        v30 = *((_DWORD *)v25 + 14);
        v31 = *((_DWORD *)v26 + 14);
        v29 = v30 >= v31;
        if (v30 == v31)
          v29 = *((_DWORD *)v25 + 15) >= *((_DWORD *)v26 + 15);
      }
      if (!v29)
      {
        *a2 = v25;
        *a3 = v26;
        v32 = *a2;
        v33 = *a1;
        v34 = **a2;
        v35 = **a1;
        v36 = v34 >= v35;
        if (v34 == v35)
        {
          v37 = *((_DWORD *)v32 + 14);
          v38 = *((_DWORD *)v33 + 14);
          v36 = v37 >= v38;
          if (v37 == v38)
            v36 = *((_DWORD *)v32 + 15) >= *((_DWORD *)v33 + 15);
        }
        if (!v36)
        {
          *a1 = v32;
          *a2 = v33;
        }
      }
    }
  }
  return result;
}

unint64_t **std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**>(unint64_t **result, unint64_t **a2, unint64_t **a3)
{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t *v10;
  unint64_t v11;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t *v15;
  unint64_t v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t *v20;
  unint64_t v21;
  BOOL v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unsigned int v30;
  unsigned int v31;

  v3 = *a2;
  v4 = *result;
  v5 = **a2;
  v6 = **result;
  v7 = v5 >= v6;
  if (v5 == v6)
  {
    v8 = *((_DWORD *)v3 + 14);
    v9 = *((_DWORD *)v4 + 14);
    v7 = v8 >= v9;
    if (v8 == v9)
    {
      if (*((_DWORD *)v3 + 15) >= *((_DWORD *)v4 + 15))
        goto LABEL_4;
LABEL_9:
      v15 = *a3;
      v16 = **a3;
      v17 = v16 >= v5;
      if (v16 == v5 && (v18 = *((_DWORD *)v15 + 14), v19 = *((_DWORD *)v3 + 14), v17 = v18 >= v19, v18 == v19))
      {
        if (*((_DWORD *)v15 + 15) >= *((_DWORD *)v3 + 15))
          goto LABEL_12;
      }
      else if (v17)
      {
LABEL_12:
        *result = v3;
        *a2 = v4;
        v20 = *a3;
        v21 = **a3;
        v22 = v21 >= *v4;
        if (v21 == *v4 && (v23 = *((_DWORD *)v20 + 14), v24 = *((_DWORD *)v4 + 14), v22 = v23 >= v24, v23 == v24))
        {
          if (*((_DWORD *)v20 + 15) >= *((_DWORD *)v4 + 15))
            return result;
        }
        else if (v22)
        {
          return result;
        }
        *a2 = v20;
        *a3 = v4;
        return result;
      }
      *result = v15;
      *a3 = v4;
      return result;
    }
  }
  if (!v7)
    goto LABEL_9;
LABEL_4:
  v10 = *a3;
  v11 = **a3;
  v12 = v11 >= v5;
  if (v11 == v5 && (v13 = *((_DWORD *)v10 + 14), v14 = *((_DWORD *)v3 + 14), v12 = v13 >= v14, v13 == v14))
  {
    if (*((_DWORD *)v10 + 15) >= *((_DWORD *)v3 + 15))
      return result;
  }
  else if (v12)
  {
    return result;
  }
  *a2 = v10;
  *a3 = v3;
  v25 = *a2;
  v26 = *result;
  v27 = **a2;
  v28 = **result;
  v29 = v27 >= v28;
  if (v27 == v28 && (v30 = *((_DWORD *)v25 + 14), v31 = *((_DWORD *)v26 + 14), v29 = v30 >= v31, v30 == v31))
  {
    if (*((_DWORD *)v25 + 15) >= *((_DWORD *)v26 + 15))
      return result;
  }
  else if (v29)
  {
    return result;
  }
  *result = v25;
  *a2 = v26;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**>(unint64_t **a1, unint64_t **a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t **v6;
  unint64_t **v7;
  uint64_t v8;
  int v9;
  unint64_t **v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v22 = (uint64_t)*(a2 - 1);
      v23 = *a1;
      v24 = **a1;
      v25 = *(_QWORD *)v22 >= v24;
      if (*(_QWORD *)v22 == v24
        && (v26 = *(_DWORD *)(v22 + 56), v27 = *((_DWORD *)v23 + 14), v25 = v26 >= v27, v26 == v27))
      {
        if (*(_DWORD *)(v22 + 60) >= *((_DWORD *)v23 + 15))
          return result;
      }
      else if (v25)
      {
        return result;
      }
      *a1 = (unint64_t *)v22;
      *(a2 - 1) = v23;
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v6 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**>(a1, a1 + 1, a1 + 2);
      v7 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (2)
  {
    v11 = *v7;
    v12 = *v6;
    v13 = **v7;
    v14 = **v6;
    v15 = v13 >= v14;
    if (v13 == v14)
    {
      v16 = *((_DWORD *)v11 + 14);
      v17 = *((_DWORD *)v12 + 14);
      v15 = v16 >= v17;
      if (v16 == v17)
        v15 = *((_DWORD *)v11 + 15) >= *((_DWORD *)v12 + 15);
    }
    if (v15)
      goto LABEL_7;
    *v7 = v12;
    v10 = a1;
    if (v6 == a1)
      goto LABEL_6;
    v18 = v8;
    while (1)
    {
      v19 = *(uint64_t *)((char *)a1 + v18 + 8);
      if (*v11 == *(_QWORD *)v19)
        break;
      if (*v11 >= *(_QWORD *)v19)
        goto LABEL_22;
LABEL_15:
      --v6;
      *(unint64_t **)((char *)a1 + v18 + 16) = (unint64_t *)v19;
      v18 -= 8;
      if (v18 == -16)
      {
        v10 = a1;
        goto LABEL_6;
      }
    }
    v20 = *((_DWORD *)v11 + 14);
    v21 = *(_DWORD *)(v19 + 56);
    if (v20 != v21)
    {
      if (v20 >= v21)
      {
        v10 = (unint64_t **)((char *)a1 + v18 + 16);
        goto LABEL_6;
      }
      goto LABEL_15;
    }
    if (*((_DWORD *)v11 + 15) < *(_DWORD *)(v19 + 60))
      goto LABEL_15;
LABEL_22:
    v10 = v6;
LABEL_6:
    *v10 = v11;
    if (++v9 == 8)
      return v7 + 1 == a2;
LABEL_7:
    v6 = v7;
    v8 += 8;
    if (++v7 != a2)
      continue;
    return 1;
  }
}

unint64_t **std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**>(unint64_t **a1, unint64_t **a2, unint64_t **a3, unint64_t **a4)
{
  unint64_t **result;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  v11 = **a4;
  v12 = **a3;
  if (v11 != v12)
  {
    if (v11 >= v12)
      return result;
    goto LABEL_7;
  }
  v13 = *((_DWORD *)v9 + 14);
  v14 = *((_DWORD *)v10 + 14);
  v15 = v13 >= v14;
  if (v13 == v14)
    v15 = *((_DWORD *)v9 + 15) >= *((_DWORD *)v10 + 15);
  if (!v15)
  {
LABEL_7:
    *a3 = v9;
    *a4 = v10;
    v16 = *a3;
    v17 = *a2;
    v18 = **a3;
    v19 = **a2;
    v20 = v18 >= v19;
    if (v18 == v19)
    {
      v21 = *((_DWORD *)v16 + 14);
      v22 = *((_DWORD *)v17 + 14);
      v20 = v21 >= v22;
      if (v21 == v22)
        v20 = *((_DWORD *)v16 + 15) >= *((_DWORD *)v17 + 15);
    }
    if (!v20)
    {
      *a2 = v16;
      *a3 = v17;
      v23 = *a2;
      v24 = *a1;
      v25 = **a2;
      v26 = **a1;
      v27 = v25 >= v26;
      if (v25 == v26)
      {
        v28 = *((_DWORD *)v23 + 14);
        v29 = *((_DWORD *)v24 + 14);
        v27 = v28 >= v29;
        if (v28 == v29)
          v27 = *((_DWORD *)v23 + 15) >= *((_DWORD *)v24 + 15);
      }
      if (!v27)
      {
        *a1 = v23;
        *a2 = v24;
      }
    }
  }
  return result;
}

void std::__shared_ptr_emplace<geo::codec::VectorTile,geo::StdAllocator<geo::codec::VectorTile,geo::codec::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1BFB528;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<geo::codec::VectorTile,geo::StdAllocator<geo::codec::VectorTile,geo::codec::Allocator>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1BFB528;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D76437CLL);
}

uint64_t std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(uint64_t result, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  __int128 *v28;
  char *v29;
  unint64_t v30;
  __int128 v31;
  char v32;
  char *v33;
  unint64_t v34;
  char *v35;
  __int128 *v36;
  unint64_t v37;
  __int128 v38;
  char v39;
  char *v40;
  uint64_t v41;
  char *v42;
  _BYTE *v43;
  _BYTE *v44;

  if (a5 < 1)
    return result;
  v6 = __src;
  v7 = __dst;
  v8 = result;
  v9 = *(_QWORD *)(result + 8);
  v10 = *(_QWORD *)(result + 16);
  if ((uint64_t)(v10 - v9) < a5)
  {
    v11 = *(_QWORD *)result;
    v12 = v9 - *(_QWORD *)result + a5;
    if (v12 < 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v13 = &__dst[-v11];
    v14 = v10 - v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), v15, 1);
    else
      result = 0;
    v21 = &v13[result];
    v22 = &v13[result + a5];
    v23 = a5;
    v24 = &v13[result];
    do
    {
      if (v24)
        *v24 = *v6;
      ++v24;
      ++v6;
      --v23;
    }
    while (v23);
    v25 = *(char **)v8;
    if (*(char **)v8 == v7)
      goto LABEL_31;
    v26 = v7 - v25;
    if ((unint64_t)(v7 - v25) >= 0x20)
    {
      v27 = v7;
      if ((unint64_t)(v11 - result) >= 0x20)
      {
        v27 = &v7[-(v26 & 0xFFFFFFFFFFFFFFE0)];
        v21 -= v26 & 0xFFFFFFFFFFFFFFE0;
        v28 = (__int128 *)(v7 - 16);
        v29 = &v7[result - 16 - v11];
        v30 = v26 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v31 = *v28;
          *((_OWORD *)v29 - 1) = *(v28 - 1);
          *(_OWORD *)v29 = v31;
          v29 -= 32;
          v28 -= 2;
          v30 -= 32;
        }
        while (v30);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_31;
      }
    }
    else
    {
      v27 = v7;
    }
    do
    {
      v32 = *--v27;
      *--v21 = v32;
    }
    while (v27 != v25);
LABEL_31:
    v33 = *(char **)(v8 + 8);
    v34 = v33 - v7;
    if (v33 != v7)
    {
      if (v34 < 0x20)
        goto LABEL_55;
      if ((unint64_t)(a5 + result - v11) < 0x20)
        goto LABEL_55;
      v22 += v34 & 0xFFFFFFFFFFFFFFE0;
      v35 = &v7[a5 - v11 + 16 + result];
      v36 = (__int128 *)(v7 + 16);
      v37 = v34 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v38 = *v36;
        *((_OWORD *)v35 - 1) = *(v36 - 1);
        *(_OWORD *)v35 = v38;
        v35 += 32;
        v36 += 2;
        v37 -= 32;
      }
      while (v37);
      v7 += v34 & 0xFFFFFFFFFFFFFFE0;
      if (v34 != (v34 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_55:
        do
        {
          v39 = *v7++;
          *v22++ = v39;
        }
        while (v7 != v33);
      }
    }
    v40 = *(char **)v8;
    *(_QWORD *)v8 = v21;
    *(_QWORD *)(v8 + 8) = v22;
    v41 = *(_QWORD *)(v8 + 16);
    *(_QWORD *)(v8 + 16) = result + v15;
    if (v40)
      return (*(uint64_t (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), v40, v41 - (_QWORD)v40);
    return result;
  }
  v16 = v9 - (_QWORD)__dst;
  if ((uint64_t)(v9 - (_QWORD)__dst) >= a5)
  {
    v17 = &__src[a5];
    v19 = *(_BYTE **)(result + 8);
LABEL_42:
    v42 = &__dst[a5];
    v43 = &v19[-a5];
    v44 = v19;
    if ((unint64_t)&v19[-a5] < v9)
    {
      v44 = v19;
      do
      {
        if (v44)
          *v44 = *v43;
        ++v43;
        ++v44;
      }
      while ((unint64_t)v43 < v9);
    }
    *(_QWORD *)(result + 8) = v44;
    if (v19 != v42)
      result = (uint64_t)memmove(&__dst[a5], __dst, v19 - v42);
    if (v17 != v6)
      return (uint64_t)memmove(v7, v6, v17 - v6);
    return result;
  }
  v17 = &__src[v16];
  if (&__src[v16] == a4)
  {
    v19 = *(_BYTE **)(result + 8);
  }
  else
  {
    v18 = __src - __dst;
    v19 = *(_BYTE **)(result + 8);
    v20 = v19;
    do
    {
      if (v20)
        *v20 = v19[v18];
      ++v20;
      ++v19;
    }
    while (&v19[v18] != a4);
  }
  *(_QWORD *)(result + 8) = v19;
  if (v16 >= 1)
    goto LABEL_42;
  return result;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>(__n128 *a1, unint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 *v6;
  __n128 *v7;
  unint64_t v8;
  __n128 result;
  unint64_t v10;
  __int8 *v12;
  uint64_t v13;
  __n128 *v14;
  uint64_t v15;
  __n128 *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  __n128 *v26;
  __n128 *v27;
  unint64_t v28;
  __n128 *v29;
  uint64_t v30;
  __n128 *v31;
  __n128 v32;

  if (a3 >= 2)
  {
    v6 = a1;
    if (a3 == 2)
    {
      v7 = (__n128 *)(a2 - 3);
      if (*(a2 - 3) < a1->n128_u64[0])
      {
        v8 = a1[1].n128_u64[0];
        result = *a1;
        v10 = *(a2 - 1);
        *a1 = *v7;
        a1[1].n128_u64[0] = v10;
        *v7 = result;
        *(a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v21 = a4;
      v22 = a3 >> 1;
      v23 = &a1->n128_u64[3 * (a3 >> 1)];
      v24 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>((uint64_t)a1, v23, v24, a4);
        v25 = v21 + 24 * v22;
        std::__stable_sort_move<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>((uint64_t)v6 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), v25);
        v26 = (__n128 *)(v21 + 24 * a3);
        v27 = (__n128 *)v25;
        while (v27 != v26)
        {
          if (v27->n128_u64[0] >= *(_QWORD *)v21)
          {
            result = *(__n128 *)v21;
            v6[1].n128_u64[0] = *(_QWORD *)(v21 + 16);
            *v6 = result;
            v6 = (__n128 *)((char *)v6 + 24);
            v21 += 24;
            if (v21 == v25)
              goto LABEL_24;
          }
          else
          {
            result = *v27;
            v6[1].n128_u64[0] = v27[1].n128_u64[0];
            *v6 = result;
            v6 = (__n128 *)((char *)v6 + 24);
            v27 = (__n128 *)((char *)v27 + 24);
            if (v21 == v25)
            {
LABEL_24:
              if (v27 != v26)
              {
                v28 = 0;
                do
                {
                  v29 = (__n128 *)((char *)v6 + v28);
                  result = *(__n128 *)((char *)v27 + v28);
                  v29[1].n128_u64[0] = v27[1].n128_u64[v28 / 8];
                  *v29 = result;
                  v28 += 24;
                }
                while ((__n128 *)((char *)v27 + v28) != v26);
              }
              return result;
            }
          }
        }
        if (v21 != v25)
        {
          v30 = 0;
          do
          {
            v31 = (__n128 *)((char *)v6 + v30);
            result = *(__n128 *)(v21 + v30);
            v31[1].n128_u64[0] = *(_QWORD *)(v21 + v30 + 16);
            *v31 = result;
            v30 += 24;
          }
          while (v21 + v30 != v25);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>(a1, v23, v24, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>((char *)v6 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), v21, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>((char *)v6, (char *)v6 + 24 * (a3 >> 1), (char *)a2, a3 >> 1, a3 - (a3 >> 1), (char *)v21, a5);
      }
    }
    else if (a1 != (__n128 *)a2)
    {
      v12 = &a1[1].n128_i8[8];
      if (&a1[1].n128_i8[8] != (__int8 *)a2)
      {
        v13 = 0;
        v14 = a1;
        do
        {
          v16 = (__n128 *)v12;
          v17 = v14[1].n128_u64[1];
          if (v17 < v14->n128_u64[0])
          {
            v32 = v14[2];
            v18 = v13;
            do
            {
              v19 = (char *)a1 + v18;
              *(__n128 *)(v19 + 24) = *(__n128 *)((char *)a1 + v18);
              *((_QWORD *)v19 + 5) = *(unint64_t *)((char *)a1[1].n128_u64 + v18);
              if (!v18)
              {
                v15 = (uint64_t)a1;
                goto LABEL_10;
              }
              v18 -= 24;
            }
            while (v17 < *((_QWORD *)v19 - 3));
            v15 = (uint64_t)&a1[1].n128_i64[1] + v18;
LABEL_10:
            *(_QWORD *)v15 = v17;
            result = v32;
            *(__n128 *)(v15 + 8) = v32;
          }
          v12 = &v16[1].n128_i8[8];
          v13 += 24;
          v14 = v16;
        }
        while (&v16[1].n128_i8[8] != (__int8 *)a2);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>(uint64_t result, unint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  __int128 v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  unint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;

  if (a3)
  {
    v4 = a4;
    v7 = result;
    if (a3 == 2)
    {
      v9 = (__int128 *)(a2 - 3);
      if (*(a2 - 3) >= *(_QWORD *)result)
      {
        v22 = *(_OWORD *)result;
        *(_QWORD *)(a4 + 16) = *(_QWORD *)(result + 16);
        *(_OWORD *)a4 = v22;
        v11 = *v9;
        v12 = *(a2 - 1);
      }
      else
      {
        v10 = *v9;
        *(_QWORD *)(a4 + 16) = *(a2 - 1);
        *(_OWORD *)a4 = v10;
        v11 = *(_OWORD *)result;
        v12 = *(_QWORD *)(result + 16);
      }
      *(_QWORD *)(a4 + 40) = v12;
      *(_OWORD *)(a4 + 24) = v11;
    }
    else if (a3 == 1)
    {
      v8 = *(_OWORD *)result;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)(result + 16);
      *(_OWORD *)a4 = v8;
    }
    else if ((uint64_t)a3 > 8)
    {
      v23 = a3 >> 1;
      v24 = 24 * (a3 >> 1);
      v25 = result + v24;
      std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>(result, result + v24, a3 >> 1, a4, a3 >> 1);
      result = std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>(v7 + v24, a2, a3 - v23, v4 + v24, a3 - v23);
      v26 = (unint64_t *)(v7 + v24);
      while (v26 != a2)
      {
        if (*v26 >= *(_QWORD *)v7)
        {
          v27 = *(_OWORD *)v7;
          *(_QWORD *)(v4 + 16) = *(_QWORD *)(v7 + 16);
          *(_OWORD *)v4 = v27;
          v4 += 24;
          v7 += 24;
          if (v7 == v25)
            goto LABEL_26;
        }
        else
        {
          v28 = *(_OWORD *)v26;
          *(_QWORD *)(v4 + 16) = v26[2];
          *(_OWORD *)v4 = v28;
          v4 += 24;
          v26 += 3;
          if (v7 == v25)
          {
LABEL_26:
            if (v26 != a2)
            {
              v29 = 0;
              do
              {
                v30 = v4 + v29 * 8;
                v31 = *(_OWORD *)&v26[v29];
                *(_QWORD *)(v30 + 16) = v26[v29 + 2];
                *(_OWORD *)v30 = v31;
                v29 += 3;
              }
              while (&v26[v29] != a2);
            }
            return result;
          }
        }
      }
      if (v7 != v25)
      {
        v32 = 0;
        do
        {
          v33 = v4 + v32;
          v34 = *(_OWORD *)(v7 + v32);
          *(_QWORD *)(v33 + 16) = *(_QWORD *)(v7 + v32 + 16);
          *(_OWORD *)v33 = v34;
          v32 += 24;
        }
        while (v7 + v32 != v25);
      }
    }
    else if ((unint64_t *)result != a2)
    {
      v13 = *(_OWORD *)result;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)(result + 16);
      *(_OWORD *)a4 = v13;
      v14 = (unint64_t *)(result + 24);
      if ((unint64_t *)(result + 24) != a2)
      {
        v15 = 0;
        v16 = (_QWORD *)a4;
        do
        {
          v18 = v16;
          v19 = *v16;
          v16 += 3;
          v20 = v16;
          if (*v14 < v19)
          {
            *(_OWORD *)v16 = *(_OWORD *)v18;
            v16[2] = v18[2];
            v20 = (_QWORD *)a4;
            if (v18 != (_QWORD *)a4)
            {
              v21 = v15;
              while (1)
              {
                v20 = (_QWORD *)(a4 + v21);
                if (*v14 >= *(_QWORD *)(a4 + v21 - 24))
                  break;
                *(_OWORD *)v20 = *(_OWORD *)(a4 + v21 - 24);
                v20[2] = *(_QWORD *)(a4 + v21 - 8);
                v21 -= 24;
                if (!v21)
                {
                  v20 = (_QWORD *)a4;
                  break;
                }
              }
            }
          }
          v17 = *(_OWORD *)v14;
          v20[2] = v14[2];
          *(_OWORD *)v20 = v17;
          v14 += 3;
          v15 += 24;
        }
        while (v14 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  int64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  unint64_t v54;
  BOOL v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  __int128 v71;
  char *v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  char *v77;
  __int128 v78;
  unint64_t v79;
  char *v80;
  __int128 v81;
  char *v82;
  char *v83;
  __int128 v84;
  __int128 v85;
  char *v86;
  __int128 v87;
  unint64_t v88;
  char *v89;
  __int128 v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  if (!a5)
    return result;
  v7 = a5;
  while (a4 > a7 && v7 > a7)
  {
    if (!a4)
      return result;
    v10 = 0;
    v11 = -a4;
    while (*(_QWORD *)a2 >= *(_QWORD *)&result[v10])
    {
      v10 += 24;
      v76 = __CFADD__(v11++, 1);
      if (v76)
        return result;
    }
    v12 = -v11;
    v13 = &result[v10];
    if (-v11 >= v7)
    {
      if (v11 == -1)
      {
        v86 = &result[v10];
        v107 = *((_QWORD *)v86 + 2);
        v102 = *(_OWORD *)v86;
        v87 = *(_OWORD *)a2;
        *((_QWORD *)v86 + 2) = *((_QWORD *)a2 + 2);
        *(_OWORD *)v86 = v87;
        *((_QWORD *)a2 + 2) = v107;
        *(_OWORD *)a2 = v102;
        return result;
      }
      if (v11 > 0)
        v12 = 1 - v11;
      v24 = v12 >> 1;
      v19 = &result[24 * (v12 >> 1) + v10];
      if (a3 == a2)
      {
        v16 = a3;
        v30 = a3;
      }
      else
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
        v16 = a2;
        do
        {
          v26 = v25 >> 1;
          v27 = &v16[24 * (v25 >> 1)];
          v29 = *(_QWORD *)v27;
          v28 = v27 + 24;
          v25 += ~(v25 >> 1);
          if (v29 < *(_QWORD *)v19)
            v16 = v28;
          else
            v25 = v26;
        }
        while (v25);
        v30 = a2;
      }
      v15 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v30) >> 3);
      v31 = v16;
      if (v19 != a2)
      {
LABEL_37:
        v31 = v19;
        if (a2 != v16)
        {
          if (v19 + 24 == a2)
          {
            v104 = *((_QWORD *)v19 + 2);
            v99 = *(_OWORD *)v19;
            v37 = v16 - a2;
            v91 = a6;
            v93 = v13;
            v38 = a3;
            v39 = v15;
            v95 = v24;
            v40 = a7;
            memmove(v19, a2, v16 - a2);
            a7 = v40;
            v13 = v93;
            v24 = v95;
            v15 = v39;
            a3 = v38;
            a6 = v91;
            v31 = &v19[v37];
            *(_OWORD *)v31 = v99;
            *((_QWORD *)v31 + 2) = v104;
          }
          else if (a2 + 24 == v16)
          {
            v31 = v19 + 24;
            v105 = *((_QWORD *)v16 - 1);
            v100 = *(_OWORD *)(v16 - 24);
            if (v16 - 24 != v19)
            {
              v92 = a6;
              v94 = v13;
              v41 = a3;
              v42 = v15;
              v96 = v24;
              v43 = a7;
              memmove(v19 + 24, v19, v16 - 24 - v19);
              a7 = v43;
              v13 = v94;
              v24 = v96;
              v15 = v42;
              a3 = v41;
              a6 = v92;
            }
            *((_QWORD *)v19 + 2) = v105;
            *(_OWORD *)v19 = v100;
          }
          else
          {
            v32 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v19) >> 3);
            if (v32 == 0xAAAAAAAAAAAAAAABLL * ((v16 - a2) >> 3))
            {
              v33 = 0;
              do
              {
                v34 = &a2[v33];
                v35 = &v19[v33];
                v103 = *(_QWORD *)&v19[v33 + 16];
                v98 = *(_OWORD *)&v19[v33];
                v36 = *(_OWORD *)&a2[v33];
                *((_QWORD *)v35 + 2) = *(_QWORD *)&a2[v33 + 16];
                *(_OWORD *)v35 = v36;
                *((_QWORD *)v34 + 2) = v103;
                *(_OWORD *)v34 = v98;
                if (&v19[v33 + 24] == a2)
                  break;
                v33 += 24;
              }
              while (v34 + 24 != v16);
              v31 = a2;
            }
            else
            {
              v44 = 0xAAAAAAAAAAAAAAABLL * ((v16 - a2) >> 3);
              v45 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v19) >> 3);
              do
              {
                v46 = v45;
                v45 = v44;
                v44 = v46 % v44;
              }
              while (v44);
              if (v45)
              {
                v47 = &v19[24 * v45];
                do
                {
                  v48 = *(_OWORD *)(v47 - 24);
                  v49 = *((_QWORD *)v47 - 1);
                  v47 -= 24;
                  v106 = v49;
                  v101 = v48;
                  v50 = &v47[8 * ((a2 - v19) >> 3)];
                  v51 = v47;
                  do
                  {
                    v52 = v51;
                    v51 = v50;
                    v53 = *(_OWORD *)v50;
                    *((_QWORD *)v52 + 2) = *((_QWORD *)v50 + 2);
                    *(_OWORD *)v52 = v53;
                    v54 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v50) >> 3);
                    v55 = __OFSUB__(v32, v54);
                    v57 = v32 - v54;
                    v56 = (v57 < 0) ^ v55;
                    v50 = &v19[24 * v57];
                    if (v56)
                      v50 = &v51[8 * ((a2 - v19) >> 3)];
                  }
                  while (v50 != v47);
                  *((_QWORD *)v51 + 2) = v106;
                  *(_OWORD *)v51 = v101;
                }
                while (v47 != v19);
              }
              v31 = &v19[8 * ((v16 - a2) >> 3)];
            }
          }
        }
      }
    }
    else
    {
      if (v7 >= 0)
        v14 = v7;
      else
        v14 = v7 + 1;
      v15 = v14 >> 1;
      v16 = &a2[24 * (v14 >> 1)];
      if (v13 == a2)
      {
        v19 = a2;
        v17 = a2;
      }
      else
      {
        v17 = &result[v10];
        v18 = 0xAAAAAAAAAAAAAAABLL * ((a2 - result - v10) >> 3);
        v19 = v13;
        do
        {
          v20 = v18 >> 1;
          v21 = &v19[24 * (v18 >> 1)];
          v23 = *(_QWORD *)v21;
          v22 = v21 + 24;
          v18 += ~(v18 >> 1);
          if (v23 > *(_QWORD *)v16)
            v18 = v20;
          else
            v19 = v22;
        }
        while (v18);
      }
      v24 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v17) >> 3);
      v31 = v16;
      if (v19 != a2)
        goto LABEL_37;
    }
    a4 = -(v24 + v11);
    v58 = v7 - v15;
    if (v24 + v15 >= v7 - (v24 + v15) - v11)
    {
      v97 = v24;
      v62 = -(v24 + v11);
      v63 = v15;
      v64 = v7 - v15;
      v65 = a6;
      v66 = a7;
      v67 = v13;
      std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>(v31, v16, a3, v62, v64);
      result = v67;
      v68 = v63;
      a4 = v97;
      a3 = v31;
      v7 = v68;
      a2 = v19;
      a6 = v65;
      a7 = v66;
      if (!v68)
        return result;
    }
    else
    {
      v59 = a6;
      v60 = a7;
      v61 = a3;
      std::__inplace_merge<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>(v13, v19, v31, v24, v15);
      a3 = v61;
      result = v31;
      v7 = v58;
      a2 = v16;
      a6 = v59;
      a7 = v60;
      if (!v58)
        return result;
    }
  }
  if (a4 <= v7)
  {
    if (result != a2)
    {
      v79 = 0;
      do
      {
        v80 = &a6[v79];
        v81 = *(_OWORD *)&result[v79];
        *((_QWORD *)v80 + 2) = *(_QWORD *)&result[v79 + 16];
        *(_OWORD *)v80 = v81;
        v79 += 24;
      }
      while (&result[v79] != a2);
      if (v79)
      {
        v82 = &a6[v79];
        v83 = a6;
        while (a2 != a3)
        {
          if (*(_QWORD *)a2 >= *(_QWORD *)v83)
          {
            v84 = *(_OWORD *)v83;
            *((_QWORD *)result + 2) = *((_QWORD *)v83 + 2);
            *(_OWORD *)result = v84;
            result += 24;
            v83 += 24;
            if (v82 == v83)
              return result;
          }
          else
          {
            v85 = *(_OWORD *)a2;
            *((_QWORD *)result + 2) = *((_QWORD *)a2 + 2);
            *(_OWORD *)result = v85;
            result += 24;
            a2 += 24;
            if (v82 == v83)
              return result;
          }
        }
        return (char *)memmove(result, v83, a6 - v83 + v79);
      }
    }
  }
  else if (a2 != a3)
  {
    v69 = 0;
    do
    {
      v70 = &a6[v69];
      v71 = *(_OWORD *)&a2[v69];
      *((_QWORD *)v70 + 2) = *(_QWORD *)&a2[v69 + 16];
      *(_OWORD *)v70 = v71;
      v69 += 24;
    }
    while (&a2[v69] != a3);
    if (v69)
    {
      v72 = &a6[v69];
      v73 = a3 - 24;
      while (a2 != result)
      {
        v74 = *((_QWORD *)a2 - 3);
        v75 = *((_QWORD *)v72 - 3);
        v76 = v75 >= v74;
        if (v75 >= v74)
          v77 = v72 - 24;
        else
          v77 = a2 - 24;
        if (!v76)
          a2 -= 24;
        v78 = *(_OWORD *)v77;
        if (v76)
          v72 -= 24;
        *((_QWORD *)v73 + 2) = *((_QWORD *)v77 + 2);
        *(_OWORD *)v73 = v78;
        v73 -= 24;
        if (v72 == a6)
          return result;
      }
      v88 = 0;
      do
      {
        v89 = &v73[v88];
        v90 = *(_OWORD *)&v72[v88 - 24];
        *((_QWORD *)v89 + 2) = *(_QWORD *)&v72[v88 - 8];
        *(_OWORD *)v89 = v90;
        v88 -= 24;
      }
      while (&v72[v88] != a6);
    }
  }
  return result;
}

uint64_t std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::__insert_with_size[abi:ne180100]<char const*,char const*>(uint64_t result, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  char *v27;
  __int128 *v28;
  char *v29;
  unint64_t v30;
  __int128 v31;
  char v32;
  char *v33;
  unint64_t v34;
  char *v35;
  __int128 *v36;
  unint64_t v37;
  __int128 v38;
  char v39;
  char *v40;
  uint64_t v41;
  char *v42;
  _BYTE *v43;
  _BYTE *v44;

  if (a5 < 1)
    return result;
  v6 = __src;
  v7 = __dst;
  v8 = result;
  v9 = *(_QWORD *)(result + 8);
  v10 = *(_QWORD *)(result + 16);
  if ((uint64_t)(v10 - v9) < a5)
  {
    v11 = *(_QWORD *)result;
    v12 = v9 - *(_QWORD *)result + a5;
    if (v12 < 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v13 = &__dst[-v11];
    v14 = v10 - v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), v15, 1);
    else
      result = 0;
    v21 = &v13[result];
    v22 = &v13[result + a5];
    v23 = a5;
    v24 = &v13[result];
    do
    {
      if (v24)
        *v24 = *v6;
      ++v24;
      ++v6;
      --v23;
    }
    while (v23);
    v25 = *(char **)v8;
    if (*(char **)v8 == v7)
      goto LABEL_31;
    v26 = v7 - v25;
    if ((unint64_t)(v7 - v25) >= 0x20)
    {
      v27 = v7;
      if ((unint64_t)(v11 - result) >= 0x20)
      {
        v27 = &v7[-(v26 & 0xFFFFFFFFFFFFFFE0)];
        v21 -= v26 & 0xFFFFFFFFFFFFFFE0;
        v28 = (__int128 *)(v7 - 16);
        v29 = &v7[result - 16 - v11];
        v30 = v26 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v31 = *v28;
          *((_OWORD *)v29 - 1) = *(v28 - 1);
          *(_OWORD *)v29 = v31;
          v29 -= 32;
          v28 -= 2;
          v30 -= 32;
        }
        while (v30);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_31;
      }
    }
    else
    {
      v27 = v7;
    }
    do
    {
      v32 = *--v27;
      *--v21 = v32;
    }
    while (v27 != v25);
LABEL_31:
    v33 = *(char **)(v8 + 8);
    v34 = v33 - v7;
    if (v33 != v7)
    {
      if (v34 < 0x20)
        goto LABEL_55;
      if ((unint64_t)(a5 + result - v11) < 0x20)
        goto LABEL_55;
      v22 += v34 & 0xFFFFFFFFFFFFFFE0;
      v35 = &v7[a5 - v11 + 16 + result];
      v36 = (__int128 *)(v7 + 16);
      v37 = v34 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v38 = *v36;
        *((_OWORD *)v35 - 1) = *(v36 - 1);
        *(_OWORD *)v35 = v38;
        v35 += 32;
        v36 += 2;
        v37 -= 32;
      }
      while (v37);
      v7 += v34 & 0xFFFFFFFFFFFFFFE0;
      if (v34 != (v34 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_55:
        do
        {
          v39 = *v7++;
          *v22++ = v39;
        }
        while (v7 != v33);
      }
    }
    v40 = *(char **)v8;
    *(_QWORD *)v8 = v21;
    *(_QWORD *)(v8 + 8) = v22;
    v41 = *(_QWORD *)(v8 + 16);
    *(_QWORD *)(v8 + 16) = result + v15;
    if (v40)
      return (*(uint64_t (**)(_QWORD, char *, uint64_t))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), v40, v41 - (_QWORD)v40);
    return result;
  }
  v16 = v9 - (_QWORD)__dst;
  if ((uint64_t)(v9 - (_QWORD)__dst) >= a5)
  {
    v17 = &__src[a5];
    v19 = *(_BYTE **)(result + 8);
LABEL_42:
    v42 = &__dst[a5];
    v43 = &v19[-a5];
    v44 = v19;
    if ((unint64_t)&v19[-a5] < v9)
    {
      v44 = v19;
      do
      {
        if (v44)
          *v44 = *v43;
        ++v43;
        ++v44;
      }
      while ((unint64_t)v43 < v9);
    }
    *(_QWORD *)(result + 8) = v44;
    if (v19 != v42)
      result = (uint64_t)memmove(&__dst[a5], __dst, v19 - v42);
    if (v17 != v6)
      return (uint64_t)memmove(v7, v6, v17 - v6);
    return result;
  }
  v17 = &__src[v16];
  if (&__src[v16] == a4)
  {
    v19 = *(_BYTE **)(result + 8);
  }
  else
  {
    v18 = __src - __dst;
    v19 = *(_BYTE **)(result + 8);
    v20 = v19;
    do
    {
      if (v20)
        *v20 = v19[v18];
      ++v20;
      ++v19;
    }
    while (&v19[v18] != a4);
  }
  *(_QWORD *)(result + 8) = v19;
  if (v16 >= 1)
    goto LABEL_42;
  return result;
}

unint64_t *std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(unint64_t *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  _BYTE *v14;
  char *v15;
  size_t v16;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (_BYTE *)*result;
  if (v8 - *result >= a4)
  {
    v12 = (_BYTE *)result[1];
    if (v12 - v9 >= a4)
    {
      v16 = a3 - __src;
      if (a3 != __src)
        result = (unint64_t *)memmove((void *)*result, __src, v16);
      v7[1] = &v9[v16];
    }
    else
    {
      v13 = &__src[v12 - v9];
      if (v12 != v9)
      {
        result = (unint64_t *)memmove((void *)*result, __src, v12 - v9);
        v9 = (_BYTE *)v7[1];
      }
      v14 = v9;
      if (v13 != a3)
      {
        v14 = v9;
        v15 = v9;
        do
        {
          if (v15)
            *v15 = *v13;
          ++v13;
          ++v15;
          ++v14;
        }
        while (v13 != a3);
      }
      v7[1] = v14;
    }
  }
  else
  {
    if (v9)
    {
      result[1] = (unint64_t)v9;
      (*(void (**)(unint64_t, _BYTE *))(*(_QWORD *)result[3] + 40))(result[3], v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      goto LABEL_29;
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if (v11 < 0)
LABEL_29:
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    result = (unint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v7[3] + 16))(v7[3], v11, 1);
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    while (v6 != a3)
    {
      if (result)
        *(_BYTE *)result = *v6;
      ++v6;
      result = (unint64_t *)((char *)result + 1);
    }
    v7[1] = result;
  }
  return result;
}

void std::__function::__func<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

_QWORD *std::__function::__func<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E1BFAC28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E1BFAC28;
  a2[1] = v2;
  return result;
}

float std::__function::__func<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::operator()(uint64_t a1, _QWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *(float *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 504) + 224 * *a2 + 164) = *a3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec9_readPoisEP8VMP4TileRK28GeoCodecsVMP4DecodingOptionsRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec9_readPoisEP8VMP4TileRK28GeoCodecsVMP4DecodingOptionsRKNSt3__110shared_ptrIN"
                                "S0_10VectorTileEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec9_readPoisEP8VMP4TileRK28GeoCodecsVMP4DecodingOptionsRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec9_readPoisEP8VMP4TileRK28GeoCodecsVMP4DecodingOptionsRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readPois(VMP4Tile *,GeoCodecsVMP4DecodingOptions const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::target_type()
{
}

void std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

_QWORD *std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E1BFAA70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E1BFAA70;
  a2[1] = v2;
  return result;
}

float std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::operator()(uint64_t a1, _QWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *(float *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 152) + 176 * *a2 + 68) = *a3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec25_readLinesExtendedChapterEP8VMP4TileRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec25_readLinesExtendedChapterEP8VMP4TileRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec25_readLinesExtendedChapterEP8VMP4TileRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec25_readLinesExtendedChapterEP8VMP4TileRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::target_type()
{
}

void std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

_QWORD *std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E1BFAAC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E1BFAAC8;
  a2[1] = v2;
  return result;
}

float std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::operator()(uint64_t a1, _QWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *(float *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 152) + 176 * *a2 + 164) = *a3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec25_readLinesExtendedChapterEP8VMP4TileRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec25_readLinesExtendedChapterEP8VMP4TileRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec25_readLinesExtendedChapterEP8VMP4TileRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec25_readLinesExtendedChapterEP8VMP4TileRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readLinesExtendedChapter(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::target_type()
{
}

void std::vector<GeoCodecsRoadFeature,geo::StdAllocator<GeoCodecsRoadFeature,geo::codec::Allocator>>::__append(unint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;

  v4 = a1[1];
  v5 = a1[2];
  if (0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = v4 + 168 * a2;
      v12 = 168 * a2;
      do
      {
        if (v4)
        {
          *(_QWORD *)(v4 + 160) = 0;
          *(_OWORD *)(v4 + 128) = 0uLL;
          *(_OWORD *)(v4 + 144) = 0uLL;
          *(_OWORD *)(v4 + 96) = 0uLL;
          *(_OWORD *)(v4 + 112) = 0uLL;
          *(_OWORD *)(v4 + 64) = 0uLL;
          *(_OWORD *)(v4 + 80) = 0uLL;
          *(_OWORD *)(v4 + 32) = 0uLL;
          *(_OWORD *)(v4 + 48) = 0uLL;
          *(_OWORD *)v4 = 0uLL;
          *(_OWORD *)(v4 + 16) = 0uLL;
        }
        v4 += 168;
        v12 -= 168;
      }
      while (v12);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v4 - *a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x186186186186186)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v8 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0xC30C30C30C30C3)
      v9 = 0x186186186186186;
    else
      v9 = v7;
    if (v9)
      v10 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 168 * v9, 8);
    else
      v10 = 0;
    v13 = v10 + 168 * v6;
    v14 = 168 * a2;
    v15 = v13 + 168 * a2;
    v16 = 0uLL;
    v17 = v13;
    do
    {
      if (v17)
      {
        *(_QWORD *)(v17 + 160) = 0;
        *(_OWORD *)(v17 + 128) = 0uLL;
        *(_OWORD *)(v17 + 144) = 0uLL;
        *(_OWORD *)(v17 + 96) = 0uLL;
        *(_OWORD *)(v17 + 112) = 0uLL;
        *(_OWORD *)(v17 + 64) = 0uLL;
        *(_OWORD *)(v17 + 80) = 0uLL;
        *(_OWORD *)(v17 + 32) = 0uLL;
        *(_OWORD *)(v17 + 48) = 0uLL;
        *(_OWORD *)v17 = 0uLL;
        *(_OWORD *)(v17 + 16) = 0uLL;
      }
      v17 += 168;
      v14 -= 168;
    }
    while (v14);
    v18 = v10 + 168 * v9;
    v19 = *a1;
    v20 = a1[1];
    if (v20 != *a1)
    {
      v21 = 0;
      do
      {
        v22 = v13 + v21;
        v23 = v20 + v21;
        *(_OWORD *)(v22 - 168) = *(_OWORD *)(v20 + v21 - 168);
        *(_QWORD *)(v23 - 168) = 0;
        *(_QWORD *)(v23 - 160) = 0;
        *(_OWORD *)(v22 - 152) = *(_OWORD *)(v20 + v21 - 152);
        *(_QWORD *)(v22 - 136) = *(_QWORD *)(v20 + v21 - 136);
        *(_QWORD *)(v23 - 144) = 0;
        *(_QWORD *)(v23 - 136) = 0;
        v24 = *(_OWORD *)(v20 + v21 - 128);
        v25 = *(_OWORD *)(v20 + v21 - 112);
        *(_DWORD *)(v22 - 96) = *(_DWORD *)(v20 + v21 - 96);
        *(_OWORD *)(v22 - 128) = v24;
        *(_OWORD *)(v22 - 112) = v25;
        v26 = *(_OWORD *)(v20 + v21 - 88);
        *(_QWORD *)(v22 - 72) = *(_QWORD *)(v20 + v21 - 72);
        *(_OWORD *)(v22 - 88) = v26;
        v16 = *(__n128 *)(v20 + v21 - 64);
        v27 = *(_OWORD *)(v20 + v21 - 48);
        v28 = *(_OWORD *)(v20 + v21 - 32);
        *(_OWORD *)(v22 - 21) = *(_OWORD *)(v20 + v21 - 21);
        *(_OWORD *)(v22 - 48) = v27;
        *(_OWORD *)(v22 - 32) = v28;
        *(__n128 *)(v22 - 64) = v16;
        v21 -= 168;
      }
      while (v20 + v21 != v19);
      v20 = *a1;
      v29 = a1[1];
      *a1 = v13 + v21;
      a1[1] = v15;
      v30 = a1[2];
      a1[2] = v18;
      while (1)
      {
        if (v29 == v20)
          goto LABEL_37;
        v31 = *(std::__shared_weak_count **)(v29 - 136);
        if (!v31)
          break;
        p_shared_owners = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (v33)
          break;
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
        v34 = *(std::__shared_weak_count **)(v29 - 160);
        if (v34)
          goto LABEL_33;
LABEL_26:
        v29 -= 168;
      }
      v34 = *(std::__shared_weak_count **)(v29 - 160);
      if (!v34)
        goto LABEL_26;
LABEL_33:
      std::__shared_weak_count::__release_weak(v34);
      goto LABEL_26;
    }
    *a1 = v13;
    a1[1] = v15;
    v30 = a1[2];
    a1[2] = v18;
LABEL_37:
    if (v20)
      (*(void (**)(unint64_t, unint64_t, unint64_t, __n128))(*(_QWORD *)a1[3] + 40))(a1[3], v20, v30 - v20, v16);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<GhostPointKey,unsigned int>,std::__unordered_map_hasher<GhostPointKey,std::__hash_value_type<GhostPointKey,unsigned int>,GhostPointHash,GhostPointKeyEqual,true>,std::__unordered_map_equal<GhostPointKey,std::__hash_value_type<GhostPointKey,unsigned int>,GhostPointKeyEqual,GhostPointHash,true>,std::allocator<std::__hash_value_type<GhostPointKey,unsigned int>>>::__emplace_unique_key_args<GhostPointKey,std::piecewise_construct_t const&,std::tuple<GhostPointKey const&>,std::tuple<>>(float *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  _QWORD *v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  size_t v29;
  size_t v30;
  size_t v31;
  _QWORD *i;
  size_t v33;
  uint64_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;

  v6 = *a2;
  v7 = a2[1];
  v8 = ((v6 << 6) + (v6 >> 2) + v7 - 0x61C8864680B583EBLL) ^ v6;
  v9 = (a2[2] + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
  v10 = *((_QWORD *)a1 + 1);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = (a2[2] + (v8 << 6) + (v8 >> 2) - 0x61C8864680B583EBLL) ^ v8;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == __PAIR64__(v7, v6) && *((_DWORD *)v13 + 6) == (_DWORD)v7)
                return v13;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_25;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_25;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == __PAIR64__(v7, v6) && *((_DWORD *)v13 + 6) == (_DWORD)v7)
              return v13;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_25:
  v13 = operator new(0x20uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = *(_QWORD *)a3;
  *((_DWORD *)v13 + 6) = *(_DWORD *)(a3 + 8);
  *((_DWORD *)v13 + 7) = 0;
  v16 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v17 = a1[8];
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *((_QWORD *)a1 + 1);
    }
    if (prime > v10)
    {
LABEL_39:
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v24 = operator new(8 * prime);
      v25 = *(_QWORD **)a1;
      *(_QWORD *)a1 = v24;
      if (v25)
        operator delete(v25);
      v26 = 0;
      *((_QWORD *)a1 + 1) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v26++) = 0;
      while (prime != v26);
      v28 = (uint64_t *)(a1 + 4);
      v27 = (_QWORD *)*((_QWORD *)a1 + 2);
      if (!v27)
        goto LABEL_71;
      v29 = v27[1];
      v30 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v31 = v29 & v30;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v28;
        for (i = (_QWORD *)*v27; *v27; i = (_QWORD *)*v27)
        {
          v33 = i[1] & v30;
          if (v33 == v31)
          {
            v27 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v33))
          {
            *v27 = *i;
            v34 = 8 * v33;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v34);
            **(_QWORD **)(*(_QWORD *)a1 + v34) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v27;
            v27 = i;
            v31 = v33;
          }
        }
        goto LABEL_71;
      }
      if (v29 >= prime)
        v29 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v28;
      v38 = (_QWORD *)*v27;
      if (!*v27)
      {
LABEL_71:
        v10 = prime;
        v41 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_72;
        goto LABEL_87;
      }
      while (1)
      {
        v40 = v38[1];
        if (v40 >= prime)
          v40 %= prime;
        if (v40 == v29)
          goto LABEL_65;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v40))
        {
          *v27 = *v38;
          v39 = 8 * v40;
          *v38 = **(_QWORD **)(*(_QWORD *)a1 + v39);
          **(_QWORD **)(*(_QWORD *)a1 + v39) = v38;
          v38 = v27;
LABEL_65:
          v27 = v38;
          v38 = (_QWORD *)*v38;
          if (!v38)
            goto LABEL_71;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v27;
          v27 = v38;
          v38 = (_QWORD *)*v38;
          v29 = v40;
          if (!v38)
            goto LABEL_71;
        }
      }
    }
    if (prime < v10)
    {
      v35 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < v10)
      {
        if (!prime)
        {
          v42 = *(_QWORD **)a1;
          *(_QWORD *)a1 = 0;
          if (v42)
            operator delete(v42);
          v10 = 0;
          *((_QWORD *)a1 + 1) = 0;
          v41 = -1;
          goto LABEL_87;
        }
        goto LABEL_39;
      }
      v10 = *((_QWORD *)a1 + 1);
    }
    v41 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
LABEL_72:
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v18 = *(_QWORD **)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v19)
          goto LABEL_28;
      }
      else
      {
        v3 = v9;
        v18 = *(_QWORD **)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v19)
          goto LABEL_28;
      }
      goto LABEL_88;
    }
LABEL_87:
    v3 = v41 & v9;
    v18 = *(_QWORD **)a1;
    v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v9));
    if (v19)
      goto LABEL_28;
    goto LABEL_88;
  }
  v18 = *(_QWORD **)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
LABEL_28:
    *v13 = *v19;
LABEL_94:
    *v19 = v13;
    goto LABEL_95;
  }
LABEL_88:
  *v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v13;
  v18[v3] = a1 + 4;
  if (*v13)
  {
    v43 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v43 >= v10)
        v43 %= v10;
    }
    else
    {
      v43 &= v10 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v43);
    goto LABEL_94;
  }
LABEL_95:
  ++*((_QWORD *)a1 + 3);
  return v13;
}

void sub_189AFBFB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<GeoCodecsBuildingFootprintFeature,geo::StdAllocator<GeoCodecsBuildingFootprintFeature,geo::codec::Allocator>>::__append(unint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;

  v4 = a1[1];
  v5 = a1[2];
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = v4 + 136 * a2;
      v12 = 136 * a2;
      do
      {
        if (v4)
        {
          *(_QWORD *)(v4 + 128) = 0;
          *(_OWORD *)(v4 + 96) = 0uLL;
          *(_OWORD *)(v4 + 112) = 0uLL;
          *(_OWORD *)(v4 + 64) = 0uLL;
          *(_OWORD *)(v4 + 80) = 0uLL;
          *(_OWORD *)(v4 + 32) = 0uLL;
          *(_OWORD *)(v4 + 48) = 0uLL;
          *(_OWORD *)v4 = 0uLL;
          *(_OWORD *)(v4 + 16) = 0uLL;
        }
        v4 += 136;
        v12 -= 136;
      }
      while (v12);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v4 - *a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x1E1E1E1E1E1E1E1)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v8 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0xF0F0F0F0F0F0F0)
      v9 = 0x1E1E1E1E1E1E1E1;
    else
      v9 = v7;
    if (v9)
      v10 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 136 * v9, 8);
    else
      v10 = 0;
    v13 = v10 + 136 * v6;
    v14 = 136 * a2;
    v15 = v13 + 136 * a2;
    v16 = 0uLL;
    v17 = v13;
    do
    {
      if (v17)
      {
        *(_QWORD *)(v17 + 128) = 0;
        *(_OWORD *)(v17 + 96) = 0uLL;
        *(_OWORD *)(v17 + 112) = 0uLL;
        *(_OWORD *)(v17 + 64) = 0uLL;
        *(_OWORD *)(v17 + 80) = 0uLL;
        *(_OWORD *)(v17 + 32) = 0uLL;
        *(_OWORD *)(v17 + 48) = 0uLL;
        *(_OWORD *)v17 = 0uLL;
        *(_OWORD *)(v17 + 16) = 0uLL;
      }
      v17 += 136;
      v14 -= 136;
    }
    while (v14);
    v18 = v10 + 136 * v9;
    v19 = *a1;
    v20 = a1[1];
    if (v20 != *a1)
    {
      v21 = 0;
      do
      {
        v22 = v13 + v21;
        v23 = v20 + v21;
        *(_OWORD *)(v22 - 136) = *(_OWORD *)(v20 + v21 - 136);
        *(_QWORD *)(v23 - 136) = 0;
        *(_QWORD *)(v23 - 128) = 0;
        *(_OWORD *)(v22 - 120) = *(_OWORD *)(v20 + v21 - 120);
        *(_QWORD *)(v22 - 104) = *(_QWORD *)(v20 + v21 - 104);
        *(_QWORD *)(v23 - 112) = 0;
        *(_QWORD *)(v23 - 104) = 0;
        v24 = *(_OWORD *)(v20 + v21 - 96);
        v25 = *(_OWORD *)(v20 + v21 - 80);
        *(_DWORD *)(v22 - 64) = *(_DWORD *)(v20 + v21 - 64);
        *(_OWORD *)(v22 - 96) = v24;
        *(_OWORD *)(v22 - 80) = v25;
        v26 = *(_OWORD *)(v20 + v21 - 56);
        *(_QWORD *)(v22 - 40) = *(_QWORD *)(v20 + v21 - 40);
        *(_OWORD *)(v22 - 56) = v26;
        v16 = *(__n128 *)(v20 + v21 - 32);
        *(_OWORD *)(v22 - 22) = *(_OWORD *)(v20 + v21 - 22);
        *(__n128 *)(v22 - 32) = v16;
        v21 -= 136;
      }
      while (v20 + v21 != v19);
      v20 = *a1;
      v27 = a1[1];
      *a1 = v13 + v21;
      a1[1] = v15;
      v28 = a1[2];
      a1[2] = v18;
      while (1)
      {
        if (v27 == v20)
          goto LABEL_37;
        v29 = *(std::__shared_weak_count **)(v27 - 104);
        if (!v29)
          break;
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (v31)
          break;
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
        v32 = *(std::__shared_weak_count **)(v27 - 128);
        if (v32)
          goto LABEL_33;
LABEL_26:
        v27 -= 136;
      }
      v32 = *(std::__shared_weak_count **)(v27 - 128);
      if (!v32)
        goto LABEL_26;
LABEL_33:
      std::__shared_weak_count::__release_weak(v32);
      goto LABEL_26;
    }
    *a1 = v13;
    a1[1] = v15;
    v28 = a1[2];
    a1[2] = v18;
LABEL_37:
    if (v20)
      (*(void (**)(unint64_t, unint64_t, unint64_t, __n128))(*(_QWORD *)a1[3] + 40))(a1[3], v20, v28 - v20, v16);
  }
}

void std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

_QWORD *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E1BFA650;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E1BFA650;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::operator()(uint64_t result, _QWORD *a2, float *a3)
{
  float v3;
  uint64_t v4;

  v3 = *a3;
  if (*a3 != 100.0)
  {
    v4 = *(_QWORD *)(**(_QWORD **)(result + 8) + 1408) + 344 * *a2;
    *(float *)(v4 + 68) = v3;
    *(float *)(v4 + 160) = v3;
  }
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,float)>::target_type()
{
}

void std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

_QWORD *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E1BFA6A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E1BFA6A8;
  a2[1] = v2;
  return result;
}

float std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::operator()(uint64_t a1, _QWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *(float *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 1408) + 344 * *a2 + 300) = *a3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,float)>::target_type()
{
}

void std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,float)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

_QWORD *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E1BFA700;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E1BFA700;
  a2[1] = v2;
  return result;
}

float std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,float)>::operator()(uint64_t a1, _QWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *(float *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 1464) + 104 * *a2 + 68) = *a3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,float)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,float)>::target_type()
{
}

void std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,float)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

_QWORD *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E1BFA758;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E1BFA758;
  a2[1] = v2;
  return result;
}

float std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,float)>::operator()(uint64_t a1, _QWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *(float *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 1464) + 104 * *a2 + 96) = *a3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,float)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,float)>::target_type()
{
}

void std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4>,void ()(unsigned long,float)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

_QWORD *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E1BFA7B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4>,void ()(unsigned long,float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E1BFA7B0;
  a2[1] = v2;
  return result;
}

float std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4>,void ()(unsigned long,float)>::operator()(uint64_t a1, _QWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *(float *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 1560) + 248 * *a2 + 68) = *a3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4>,void ()(unsigned long,float)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_4")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_4" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_4"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_4>,void ()(unsigned long,float)>::target_type()
{
}

void std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5>,void ()(unsigned long,float)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

_QWORD *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E1BFA808;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5>,void ()(unsigned long,float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E1BFA808;
  a2[1] = v2;
  return result;
}

float std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5>,void ()(unsigned long,float)>::operator()(uint64_t a1, _QWORD *a2, float *a3)
{
  float result;

  result = *a3;
  *(float *)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 1560) + 248 * *a2 + 244) = *a3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5>,void ()(unsigned long,float)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_5")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_5" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_5"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_5" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_5>,void ()(unsigned long,float)>::target_type()
{
}

void std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6>,void ()(unsigned long,float)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

_QWORD *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6>,void ()(unsigned long,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E1BFA860;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6>,void ()(unsigned long,float)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E1BFA860;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6>,void ()(unsigned long,float)>::operator()(uint64_t result, _QWORD *a2, _DWORD *a3)
{
  if (*(float *)a3 != 100.0)
    *(_DWORD *)(*(_QWORD *)(**(_QWORD **)(result + 8) + 1536) + 4 * *a2) = *a3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6>,void ()(unsigned long,float)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_6")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_6" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_6"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitNetworkEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_6" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6,std::allocator<geo::codec::_readTransitNetwork(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_6>,void ()(unsigned long,float)>::target_type()
{
}

char *std::__hash_table<std::__hash_value_type<unsigned long long,JunctionInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,JunctionInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,JunctionInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,JunctionInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = *((_QWORD *)v10 + 1);
            if (v12 == a2)
            {
              if (*((_QWORD *)v10 + 2) == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = *(char **)v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_QWORD *)v10 + 2) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = (char *)operator new(0x78uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v5;
  *((_QWORD *)v10 + 2) = *a3;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *((_DWORD *)v10 + 14) = 1065353216;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *((_DWORD *)v10 + 24) = 1065353216;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    v16 = *a1;
    v17 = *(_QWORD **)(*a1 + 8 * v3);
    if (!v17)
      goto LABEL_84;
LABEL_72:
    *(_QWORD *)v10 = *v17;
LABEL_90:
    *v17 = v10;
    goto LABEL_91;
  }
  v18 = 1;
  if (v7 >= 3)
    v18 = (v7 & (v7 - 1)) != 0;
  v19 = v18 | (2 * v7);
  v20 = vcvtps_u32_f32(v14 / v15);
  if (v19 <= v20)
    prime = v20;
  else
    prime = v19;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_36:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v22 = operator new(8 * prime);
    v23 = (void *)*a1;
    *a1 = (uint64_t)v22;
    if (v23)
      operator delete(v23);
    v24 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v24++) = 0;
    while (prime != v24);
    v25 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_68;
    v26 = v25[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*a1 + 8 * v28) = v13;
      for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v25 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v30))
        {
          *v25 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*a1 + v31);
          **(_QWORD **)(*a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v30) = v25;
          v25 = i;
          v28 = v30;
        }
      }
      goto LABEL_68;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*a1 + 8 * v26) = v13;
    v35 = (_QWORD *)*v25;
    if (!*v25)
    {
LABEL_68:
      v7 = prime;
      v38 = prime - 1;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_69;
LABEL_83:
      v5 &= v38;
      v16 = *a1;
      v17 = *(_QWORD **)(*a1 + 8 * v5);
      if (!v17)
        goto LABEL_84;
      goto LABEL_72;
    }
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 == v26)
        goto LABEL_62;
      if (*(_QWORD *)(*a1 + 8 * v37))
      {
        *v25 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*a1 + v36);
        **(_QWORD **)(*a1 + v36) = v35;
        v35 = v25;
LABEL_62:
        v25 = v35;
        v35 = (_QWORD *)*v35;
        if (!v35)
          goto LABEL_68;
      }
      else
      {
        *(_QWORD *)(*a1 + 8 * v37) = v25;
        v25 = v35;
        v35 = (_QWORD *)*v35;
        v26 = v37;
        if (!v35)
          goto LABEL_68;
      }
    }
  }
  if (prime < v7)
  {
    v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
    {
      v32 = std::__next_prime(v32);
    }
    else
    {
      v34 = 1 << -(char)__clz(v32 - 1);
      if (v32 >= 2)
        v32 = v34;
    }
    if (prime <= v32)
      prime = v32;
    if (prime < v7)
    {
      if (!prime)
      {
        v39 = (void *)*a1;
        *a1 = 0;
        if (v39)
          operator delete(v39);
        v7 = 0;
        a1[1] = 0;
        v38 = -1;
        goto LABEL_83;
      }
      goto LABEL_36;
    }
    v7 = a1[1];
  }
  v38 = v7 - 1;
  if ((v7 & (v7 - 1)) == 0)
    goto LABEL_83;
LABEL_69:
  if (v7 <= v5)
    v5 %= v7;
  v16 = *a1;
  v17 = *(_QWORD **)(*a1 + 8 * v5);
  if (v17)
    goto LABEL_72;
LABEL_84:
  *(_QWORD *)v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v16 + 8 * v5) = v13;
  if (*(_QWORD *)v10)
  {
    v40 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
    v17 = (_QWORD *)(*a1 + 8 * v40);
    goto LABEL_90;
  }
LABEL_91:
  ++a1[3];
  return v10;
}

void sub_189AFCE44(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,JunctionInfo>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,JunctionInfo>,void *>>>::operator()[abi:ne180100](char a1, _QWORD *__p)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;

  if (a1)
  {
    v3 = (_QWORD *)__p[10];
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        operator delete(v3);
        v3 = v4;
      }
      while (v4);
    }
    v5 = (void *)__p[8];
    __p[8] = 0;
    if (v5)
      operator delete(v5);
    v6 = (_QWORD *)__p[5];
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        operator delete(v6);
        v6 = v7;
      }
      while (v7);
    }
    v8 = (void *)__p[3];
    __p[3] = 0;
    if (v8)
    {
      operator delete(v8);
      operator delete(__p);
      return;
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__hash_table<GeoCodecsTransitLink *,std::hash<GeoCodecsTransitLink *>,std::equal_to<GeoCodecsTransitLink *>,std::allocator<GeoCodecsTransitLink *>>::__emplace_unique_key_args<GeoCodecsTransitLink *,GeoCodecsTransitLink *&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _QWORD *v19;
  _QWORD *v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t prime;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  size_t v30;
  size_t v31;
  size_t v32;
  _QWORD *i;
  size_t v34;
  uint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = v7 ^ (v7 >> 47);
  v9 = 0x9DDFEA08EB382D69 * v8;
  v10 = *((_QWORD *)a1 + 1);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * v8;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (v13)
      {
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v15 = v13[1];
            if (v15 == v9)
            {
              if (v13[2] == a2)
                return;
            }
            else if ((v15 & (v10 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v13 = (_QWORD *)*v13;
            if (!v13)
              goto LABEL_22;
          }
        }
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == a2)
              return;
          }
          else
          {
            if (v14 >= v10)
              v14 %= v10;
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_22:
  v16 = operator new(0x18uLL);
  *v16 = 0;
  v16[1] = v9;
  v16[2] = a3;
  v17 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v18 = a1[8];
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v17 / v18);
    if (v22 <= v23)
      prime = v23;
    else
      prime = v22;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v10 = *((_QWORD *)a1 + 1);
    }
    if (prime > v10)
    {
LABEL_36:
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v25 = operator new(8 * prime);
      v26 = *(_QWORD **)a1;
      *(_QWORD *)a1 = v25;
      if (v26)
        operator delete(v26);
      v27 = 0;
      *((_QWORD *)a1 + 1) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v27++) = 0;
      while (prime != v27);
      v29 = (uint64_t *)(a1 + 4);
      v28 = (_QWORD *)*((_QWORD *)a1 + 2);
      if (!v28)
        goto LABEL_68;
      v30 = v28[1];
      v31 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v32 = v30 & v31;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v29;
        for (i = (_QWORD *)*v28; *v28; i = (_QWORD *)*v28)
        {
          v34 = i[1] & v31;
          if (v34 == v32)
          {
            v28 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v34))
          {
            *v28 = *i;
            v35 = 8 * v34;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v35);
            **(_QWORD **)(*(_QWORD *)a1 + v35) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v28;
            v28 = i;
            v32 = v34;
          }
        }
        goto LABEL_68;
      }
      if (v30 >= prime)
        v30 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v29;
      v39 = (_QWORD *)*v28;
      if (!*v28)
      {
LABEL_68:
        v10 = prime;
        v42 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_69;
        goto LABEL_84;
      }
      while (1)
      {
        v41 = v39[1];
        if (v41 >= prime)
          v41 %= prime;
        if (v41 == v30)
          goto LABEL_62;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v41))
        {
          *v28 = *v39;
          v40 = 8 * v41;
          *v39 = **(_QWORD **)(*(_QWORD *)a1 + v40);
          **(_QWORD **)(*(_QWORD *)a1 + v40) = v39;
          v39 = v28;
LABEL_62:
          v28 = v39;
          v39 = (_QWORD *)*v39;
          if (!v39)
            goto LABEL_68;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v41) = v28;
          v28 = v39;
          v39 = (_QWORD *)*v39;
          v30 = v41;
          if (!v39)
            goto LABEL_68;
        }
      }
    }
    if (prime < v10)
    {
      v36 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v10 < 3 || (v37 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < v10)
      {
        if (!prime)
        {
          v43 = *(_QWORD **)a1;
          *(_QWORD *)a1 = 0;
          if (v43)
            operator delete(v43);
          v10 = 0;
          *((_QWORD *)a1 + 1) = 0;
          v42 = -1;
          goto LABEL_84;
        }
        goto LABEL_36;
      }
      v10 = *((_QWORD *)a1 + 1);
    }
    v42 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
LABEL_69:
      if (v9 >= v10)
      {
        v3 = v9 % v10;
        v19 = *(_QWORD **)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        if (v20)
          goto LABEL_25;
      }
      else
      {
        v3 = v9;
        v19 = *(_QWORD **)a1;
        v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        if (v20)
          goto LABEL_25;
      }
      goto LABEL_85;
    }
LABEL_84:
    v3 = v42 & v9;
    v19 = *(_QWORD **)a1;
    v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v9));
    if (v20)
      goto LABEL_25;
    goto LABEL_85;
  }
  v19 = *(_QWORD **)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
LABEL_25:
    *v16 = *v20;
LABEL_91:
    *v20 = v16;
    goto LABEL_92;
  }
LABEL_85:
  *v16 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v16;
  v19[v3] = a1 + 4;
  if (*v16)
  {
    v44 = *(_QWORD *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v44 >= v10)
        v44 %= v10;
    }
    else
    {
      v44 &= v10 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v44);
    goto LABEL_91;
  }
LABEL_92:
  ++*((_QWORD *)a1 + 3);
}

void sub_189AFD3B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,unsigned long long const*)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

_QWORD *std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,unsigned long long const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E1BFA8B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,unsigned long long const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E1BFA8B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,unsigned long long const*)>::operator()(uint64_t result, _QWORD *a2, _QWORD **a3)
{
  *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(result + 8) + 1312) + 72 * *a2 + 16) = **a3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,unsigned long long const*)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(unsigned long,unsigned long long const*)>::target_type()
{
}

void std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,unsigned long,char const*)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

_QWORD *std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,unsigned long,char const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E1BFA910;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,unsigned long,char const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E1BFA910;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,unsigned long,char const*)>::operator()(uint64_t result, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a3;
  v5 = *a4;
  v6 = *(_QWORD *)(**(_QWORD **)(result + 8) + 1280) + 104 * *a2;
  *(_BYTE *)(v6 + 73) = 1;
  *(_DWORD *)(v6 + 56) = v4;
  *(_QWORD *)(v6 + 16) = v5;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,unsigned long,char const*)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_1"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_1>,void ()(unsigned long,unsigned long,char const*)>::target_type()
{
}

void std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,unsigned long long const*)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

_QWORD *std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,unsigned long long const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E1BFA968;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,unsigned long long const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E1BFA968;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,unsigned long long const*)>::operator()(uint64_t result, _QWORD *a2, _QWORD **a3)
{
  *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(result + 8) + 1280) + 104 * *a2 + 40) = **a3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,unsigned long long const*)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_2"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_2>,void ()(unsigned long,unsigned long long const*)>::target_type()
{
}

void std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,unsigned long,char const*)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

_QWORD *std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,unsigned long,char const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E1BFA9C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,unsigned long,char const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E1BFA9C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,unsigned long,char const*)>::operator()(uint64_t result, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *a3;
  v5 = *a4;
  v6 = (_QWORD *)(*(_QWORD *)(**(_QWORD **)(result + 8) + 1312) + 72 * *a2);
  v6[5] = 1;
  v6[6] = v4;
  v6[7] = v5;
  return result;
}

uint64_t std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,unsigned long,char const*)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_3")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS"
                                "0_10VectorTileEEEE3$_3" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_3"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec19_readTransitSystemsEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3,std::allocator<geo::codec::_readTransitSystems(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_3>,void ()(unsigned long,unsigned long,char const*)>::target_type()
{
}

uint64_t **std::vector<GeoCodecsVertexAttributesData,geo::StdAllocator<GeoCodecsVertexAttributesData,geo::codec::Allocator>>::__destroy_vector::operator()[abi:ne180100](uint64_t **result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *result;
  v2 = **result;
  if (v2)
  {
    v3 = v1[1];
    v4 = **result;
    v5 = *result;
    if (v3 != v2)
    {
      v6 = result;
      do
      {
        v7 = *(_QWORD *)(v3 - 32);
        if (v7)
        {
          *(_QWORD *)(v3 - 24) = v7;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 - 8) + 40))(*(_QWORD *)(v3 - 8), v7, *(_QWORD *)(v3 - 16) - v7);
        }
        v8 = *(_QWORD *)(v3 - 64);
        if (v8)
        {
          *(_QWORD *)(v3 - 56) = v8;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 - 40) + 40))(*(_QWORD *)(v3 - 40), v8, *(_QWORD *)(v3 - 48) - v8);
        }
        v3 -= 72;
      }
      while (v3 != v2);
      v5 = *v6;
      v4 = **v6;
    }
    v1[1] = v2;
    return (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[3] + 40))(v5[3], v4, v5[2] - v4);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned short,unsigned short>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned short>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned short>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short,unsigned short>>(uint64_t a1, unsigned __int16 a2, __int16 a3, __int16 a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t ***v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  unint64_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v8 = a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & a2;
    }
    v11 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (v12)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == (uint64_t *)a2)
            {
              if (*((unsigned __int16 *)v12 + 8) == a2)
                return;
            }
            else if (((unint64_t)v14 & (v9 - 1)) != v4)
            {
              goto LABEL_22;
            }
            v12 = (uint64_t **)*v12;
            if (!v12)
              goto LABEL_22;
          }
        }
        do
        {
          v13 = (unint64_t)v12[1];
          if (v13 == a2)
          {
            if (*((unsigned __int16 *)v12 + 8) == a2)
              return;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (uint64_t **)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_22:
  v15 = operator new(0x18uLL);
  *v15 = 0;
  v15[1] = v8;
  *((_WORD *)v15 + 8) = a3;
  *((_WORD *)v15 + 9) = a4;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (v9 && (float)(v17 * (float)v9) >= v16)
    goto LABEL_50;
  v18 = 1;
  if (v9 >= 3)
    v18 = (v9 & (v9 - 1)) != 0;
  v19 = v18 | (2 * v9);
  v20 = vcvtps_u32_f32(v16 / v17);
  if (v19 <= v20)
    prime = v20;
  else
    prime = v19;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v9 = *(_QWORD *)(a1 + 8);
  }
  if (prime > v9)
    goto LABEL_34;
  if (prime < v9)
  {
    v22 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v9 < 3 || (v23 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v23.i16[0] = vaddlv_u8(v23), v23.u32[0] > 1uLL))
    {
      v22 = std::__next_prime(v22);
    }
    else
    {
      v24 = 1 << -(char)__clz(v22 - 1);
      if (v22 >= 2)
        v22 = v24;
    }
    if (prime <= v22)
      prime = v22;
    if (prime < v9)
LABEL_34:
      std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
  }
  v9 = *(_QWORD *)(a1 + 8);
  if ((v9 & (v9 - 1)) != 0)
  {
    if (v9 <= v8)
    {
      v4 = v8 % v9;
      v25 = *(_QWORD *)a1;
      v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
      if (!v26)
        goto LABEL_53;
LABEL_51:
      *v15 = *v26;
LABEL_59:
      *v26 = v15;
      goto LABEL_60;
    }
    v4 = v8;
LABEL_50:
    v25 = *(_QWORD *)a1;
    v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (!v26)
      goto LABEL_53;
    goto LABEL_51;
  }
  v4 = ((_DWORD)v9 - 1) & v8;
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
    goto LABEL_51;
LABEL_53:
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v27 = *(_QWORD *)(*v15 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_59;
  }
LABEL_60:
  ++*(_QWORD *)(a1 + 24);
}

void sub_189AFDBA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

__n128 std::__function::__func<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E1BFAB20;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E1BFAB20;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)>::operator()(uint64_t a1@<X0>, unint64_t *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  int v6;
  int v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  size_t v24;
  char *v25;
  _QWORD *v26;
  void **v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  size_t v31;
  char *v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  _OWORD *v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  int v47;

  v5 = *a2;
  v6 = *a3;
  v7 = a3[1];
  *(_QWORD *)a4 = 0;
  *(_DWORD *)(a4 + 12) = 0;
  if (v7)
    return;
  switch(v6)
  {
    case 4:
      **(_BYTE **)(a1 + 8) = 1;
      v9 = *(uint64_t **)(a1 + 32);
      v10 = *v9;
      if (*v9 == v9[1])
      {
        v47 = 1;
        if (v5)
        {
          std::vector<GeoCodecsDaVinciBuildingColor,geo::StdAllocator<GeoCodecsDaVinciBuildingColor,geo::codec::Allocator>>::__append((uint64_t)v9, v5, &v47);
          v10 = **(_QWORD **)(a1 + 32);
        }
      }
      *(_QWORD *)a4 = v10 + 1;
      HIDWORD(v11) = 4;
      LODWORD(v11) = 3 * v5;
      goto LABEL_65;
    case 6:
      **(_BYTE **)(a1 + 16) = 1;
      v12 = *(_QWORD *)(a1 + 32);
      v13 = *(_DWORD **)v12;
      if (v5 && v13 == *(_DWORD **)(v12 + 8))
      {
        v14 = *(_QWORD *)(v12 + 16) - (_QWORD)v13;
        if (v5 <= v14 >> 2)
        {
          v33 = 4 * v5;
          v34 = &v13[v5];
          do
          {
            if (v13)
              *v13 = 0;
            ++v13;
            v33 -= 4;
          }
          while (v33);
          *(_QWORD *)(v12 + 8) = v34;
        }
        else
        {
          if (v5 >> 62)
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          v15 = v14 >> 1;
          if (v14 >> 1 <= v5)
            v15 = v5;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
            v16 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          v17 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v12 + 24) + 16))(*(_QWORD *)(v12 + 24), 4 * v16, 1);
          v18 = 0;
          v19 = v17;
          do
          {
            if (v17 + v18)
              *(_DWORD *)(v17 + v18) = 0;
            v18 += 4;
          }
          while (4 * v5 != v18);
          v36 = *(_DWORD **)v12;
          v35 = *(_DWORD **)(v12 + 8);
          if (v35 != *(_DWORD **)v12)
          {
            v37 = (unint64_t)v35 - *(_QWORD *)v12 - 4;
            if (v37 < 0x1C)
              goto LABEL_71;
            if ((unint64_t)v35 - v17 < 0x20)
              goto LABEL_71;
            v38 = (v37 >> 2) + 1;
            v39 = 4 * (v38 & 0x7FFFFFFFFFFFFFF8);
            v40 = &v35[v39 / 0xFFFFFFFFFFFFFFFCLL];
            v19 = v17 - v39;
            v41 = (_OWORD *)(v17 - 16);
            v42 = (__int128 *)(v35 - 4);
            v43 = v38 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v44 = *v42;
              *(v41 - 1) = *(v42 - 1);
              *v41 = v44;
              v41 -= 2;
              v42 -= 2;
              v43 -= 8;
            }
            while (v43);
            v35 = v40;
            if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_71:
              do
              {
                v45 = *--v35;
                *(_DWORD *)(v19 - 4) = v45;
                v19 -= 4;
              }
              while (v35 != v36);
            }
            v35 = *(_DWORD **)v12;
          }
          *(_QWORD *)v12 = v19;
          *(_QWORD *)(v12 + 8) = v17 + 4 * v5;
          v46 = *(_QWORD *)(v12 + 16);
          *(_QWORD *)(v12 + 16) = v17 + 4 * v16;
          if (v35)
            (*(void (**)(_QWORD, _DWORD *, uint64_t))(**(_QWORD **)(v12 + 24) + 40))(*(_QWORD *)(v12 + 24), v35, v46 - (_QWORD)v35);
        }
        v13 = **(_DWORD ***)(a1 + 32);
      }
      *(_QWORD *)a4 = v13;
      HIDWORD(v11) = 4;
      goto LABEL_64;
    case 7:
      **(_BYTE **)(a1 + 24) = 1;
      if (!v5)
        goto LABEL_31;
      v20 = *(void ***)(a1 + 40);
      v21 = (char *)*v20;
      if (*v20 != v20[1])
        goto LABEL_31;
      v22 = (_BYTE *)v20[2] - v21;
      if (v22 < v5)
      {
        if ((v5 & 0x8000000000000000) == 0)
        {
          v23 = 2 * v22;
          if (2 * v22 <= v5)
            v23 = v5;
          if (v22 >= 0x3FFFFFFFFFFFFFFFLL)
            v24 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v24 = v23;
          v25 = (char *)operator new(v24);
          bzero(v25, v5);
          *v20 = v25;
          v20[1] = &v25[v5];
          v20[2] = &v25[v24];
          if (v21)
            operator delete(v21);
LABEL_31:
          v26 = *(_QWORD **)(a1 + 40);
          break;
        }
LABEL_67:
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      }
      bzero(*v20, v5);
      v20[1] = &v21[v5];
      v26 = *(_QWORD **)(a1 + 40);
      break;
    case 8:
      **(_BYTE **)(a1 + 48) = 1;
      if (!v5)
        goto LABEL_49;
      v27 = *(void ***)(a1 + 56);
      v28 = (char *)*v27;
      if (*v27 != v27[1])
        goto LABEL_49;
      v29 = (_BYTE *)v27[2] - v28;
      if (v29 >= v5)
      {
        bzero(*v27, v5);
        v27[1] = &v28[v5];
      }
      else
      {
        if ((v5 & 0x8000000000000000) != 0)
          goto LABEL_67;
        v30 = 2 * v29;
        if (2 * v29 <= v5)
          v30 = v5;
        if (v29 >= 0x3FFFFFFFFFFFFFFFLL)
          v31 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        v32 = (char *)operator new(v31);
        bzero(v32, v5);
        *v27 = v32;
        v27[1] = &v32[v5];
        v27[2] = &v32[v31];
        if (v28)
          operator delete(v28);
      }
LABEL_49:
      v26 = *(_QWORD **)(a1 + 56);
      break;
    default:
      return;
  }
  *(_QWORD *)a4 = *v26;
  HIDWORD(v11) = 1;
LABEL_64:
  LODWORD(v11) = v5;
LABEL_65:
  *(_QWORD *)(a4 + 12) = v11;
  *(_DWORD *)(a4 + 8) = 1;
}

uint64_t std::__function::__func<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec26_decodeCompressedBuildingsEPKhjRKNS0_19MercatorDequantizerERKNSt3__110shared_ptrINS0_"
                     "10VectorTileEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec26_decodeCompressedBuildingsEPKhjRKNS0_19MercatorDequantizerERKNSt3__110shar"
                                "ed_ptrINS0_10VectorTileEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec26_decodeCompressedBuildingsEPKhjRKNS0_19MercatorDequantizerERKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec26_decodeCompressedBuildingsEPKhjRKNS0_19MercatorDequantizerERKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_decodeCompressedBuildings(unsigned char const*,unsigned int,geo::codec::MercatorDequantizer const&,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,mgcl::bldg::ArrayBuffer ()(unsigned long,mgcl::gpcc::AttributeDescription const&)>::target_type()
{
}

void std::__introsort<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_6 &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentCrossing *,false>(uint64_t a1, __int128 *a2, uint64_t a3, char a4, __n128 a5)
{
  __int128 *v9;
  __int128 *v10;
  __int128 *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  float v18;
  unsigned int v19;
  float v20;
  unsigned int v21;
  BOOL v22;
  _BOOL4 v23;
  __int128 v24;
  unsigned int v25;
  float v26;
  unsigned int v27;
  BOOL v28;
  _BOOL4 v29;
  __int128 v30;
  __int128 v31;
  unsigned int v32;
  unsigned int v33;
  _BOOL4 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v37;
  unsigned int v38;
  _BOOL4 v39;
  __int128 v40;
  __int128 v41;
  unsigned int v42;
  unsigned int v43;
  _BOOL4 v44;
  __int128 v45;
  __int128 *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  float v50;
  BOOL v51;
  BOOL v52;
  unsigned int v53;
  _BOOL4 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unsigned int v59;
  unsigned int v60;
  _BOOL4 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  unsigned int v65;
  unsigned int v66;
  _BOOL4 v67;
  __int128 v68;
  unsigned int v69;
  __int128 v70;
  __int128 v71;
  unsigned int v72;
  unsigned int v73;
  _BOOL4 v74;
  __int128 v75;
  __int128 *v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int v79;
  float v80;
  BOOL v81;
  BOOL v82;
  unsigned int v83;
  _BOOL4 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  unsigned int v89;
  unsigned int v90;
  _BOOL4 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  unsigned int v96;
  unsigned int v97;
  _BOOL4 v98;
  __int128 v99;
  unsigned int v100;
  float v101;
  unsigned int v102;
  BOOL v103;
  unsigned int v104;
  _BOOL4 v105;
  __int128 v106;
  __int128 v107;
  unsigned int v108;
  unsigned int v109;
  _BOOL4 v110;
  __int128 v111;
  __int128 v112;
  unsigned int v113;
  unsigned int v114;
  _BOOL4 v115;
  __int128 v116;
  __int128 v117;
  unsigned int v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  BOOL v125;
  BOOL v126;
  unint64_t v127;
  __int128 *v128;
  __int128 *v129;
  unsigned int v130;
  _BOOL4 v131;
  _BOOL4 v132;
  __int128 *v133;
  unsigned int v134;
  BOOL v135;
  BOOL v136;
  __int128 *v137;
  __int128 v138;
  unsigned int v139;
  float v140;
  BOOL v141;
  unsigned int v142;
  float v143;
  _BOOL4 v144;
  __int128 v145;
  BOOL v146;
  __n128 v147;
  unsigned int v148;
  BOOL v149;
  unint64_t v150;
  unsigned int v151;
  BOOL v152;
  BOOL v153;
  unint64_t v154;
  unsigned int v155;
  _BOOL4 v156;
  _BOOL4 v157;
  __int128 *v158;
  __int128 *v159;
  unsigned int v160;
  BOOL v161;
  BOOL v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  unsigned int v167;
  float v168;
  _BOOL4 v169;
  unsigned int v170;
  float v171;
  BOOL v172;
  __int128 v173;
  unsigned int v174;
  unsigned int v175;
  _BOOL4 v176;
  __int128 v177;
  __int128 *v178;
  unsigned int v179;
  float v180;
  unsigned int v181;
  BOOL v182;
  unsigned int v183;
  _BOOL4 v184;
  __int128 v185;
  unsigned int v186;
  unsigned int v187;
  _BOOL4 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 *v192;
  __int128 *v193;
  unsigned int v194;
  unsigned int v195;
  _BOOL4 v196;
  __int128 v197;
  __int128 v198;
  unsigned int v199;
  unsigned int v200;
  _BOOL4 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  unsigned int v205;
  unsigned int v206;
  _BOOL4 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  unsigned int v211;
  unsigned int v212;
  _BOOL4 v213;
  __int128 v214;
  __int128 *v215;
  BOOL v216;
  char v217;
  uint64_t v218;
  _QWORD *v219;
  uint64_t v220;
  __int128 *v221;
  unsigned int v222;
  float v223;
  unsigned int v224;
  _BOOL4 v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  __int128 v231;
  unsigned int v232;
  BOOL v233;
  BOOL v234;
  int64_t v235;
  int64_t v236;
  int64_t v237;
  uint64_t v238;
  unint64_t v239;
  unsigned int v240;
  unsigned int v241;
  uint64_t v242;
  unint64_t v243;
  unsigned int v244;
  unsigned int v245;
  float v246;
  BOOL v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int v251;
  _BOOL4 v252;
  _BOOL4 v253;
  _OWORD *v254;
  __int128 v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v263;
  _OWORD *v264;
  __int128 v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int v269;
  unsigned int v270;
  uint64_t v271;
  __int128 v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  unsigned int v276;
  unsigned int v277;
  float v278;
  _BOOL4 v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  _OWORD *v283;
  __int128 v284;
  unsigned int v285;
  BOOL v286;
  __int128 v287;
  __int128 v288;
  unsigned int v289;
  unsigned int v290;
  _BOOL4 v291;
  __int128 v292;
  _QWORD *v293;
  __int128 *v294;
  unsigned int v295;
  float v296;
  unsigned int v297;
  _BOOL4 v298;
  uint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  uint64_t v302;
  unsigned int v303;
  BOOL v304;
  __int128 v305;
  __n128 v306;
  __n128 v307;
  __int128 v308;
  __n128 v309;
  __n128 v310;
  __int128 v311;
  __int128 v312;
  __n128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __n128 v317;
  __n128 v318;
  __n128 v319;
  __n128 v320;
  __n128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_6 &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentCrossing *>(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  _BOOL8 result;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  _BOOL4 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 *v14;
  __int128 *v15;
  unsigned int v16;
  float v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  _BOOL4 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 *v26;
  unsigned int v27;
  float v28;
  unsigned int v29;
  float v30;
  BOOL v31;
  unsigned int v32;
  float v33;
  _BOOL4 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 *v38;
  __int128 *v39;
  __int128 *v40;
  unsigned int v41;
  unsigned int v42;
  _BOOL4 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unsigned int v47;
  unsigned int v48;
  _BOOL4 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unsigned int v53;
  unsigned int v54;
  _BOOL4 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unsigned int v59;
  unsigned int v60;
  _BOOL4 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  unsigned int v68;
  unsigned int v69;
  _BOOL4 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  unsigned int v77;
  _BOOL4 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unsigned int v85;
  unsigned int v86;
  _BOOL4 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  unsigned int v92;
  _BOOL4 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  float v100;
  unsigned int v101;
  _BOOL4 v102;
  _BOOL4 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  unsigned int v110;
  BOOL v111;
  BOOL v112;

  v5 = (a2 - a1) >> 5;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = *(_DWORD *)(a2 - 24);
      v8 = *(_DWORD *)(a1 + 8);
      v9 = v7 == v8;
      v10 = v7 < v8;
      if (v9)
        v10 = *(float *)(a2 - 12) < *(float *)(a1 + 20);
      if (v10)
      {
        v12 = *(_OWORD *)a1;
        v11 = *(_OWORD *)(a1 + 16);
        v13 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 16) = v13;
        *(_OWORD *)(a2 - 32) = v12;
        *(_OWORD *)(a2 - 16) = v11;
      }
      return result;
    case 3:
      v14 = (__int128 *)(a1 + 32);
      v15 = (__int128 *)(a2 - 32);
      v16 = *(_DWORD *)(a1 + 40);
      v17 = *(float *)(a1 + 52);
      v18 = *(_DWORD *)(a1 + 8);
      v9 = v16 == v18;
      v19 = v16 < v18;
      if (v9)
        v19 = v17 < *(float *)(a1 + 20);
      v20 = *(_DWORD *)(a2 - 24);
      v9 = v20 == v16;
      v21 = v20 < v16;
      if (v9)
        v21 = *(float *)(a2 - 12) < v17;
      if (v19)
      {
        if (v21)
        {
          v23 = *(_OWORD *)a1;
          v22 = *(_OWORD *)(a1 + 16);
          v24 = *(_OWORD *)(a2 - 16);
          *(_OWORD *)a1 = *v15;
          *(_OWORD *)(a1 + 16) = v24;
LABEL_49:
          *v15 = v23;
          *(_OWORD *)(a2 - 16) = v22;
          return result;
        }
        v83 = *(_OWORD *)a1;
        v82 = *(_OWORD *)(a1 + 16);
        v84 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)a1 = *v14;
        *(_OWORD *)(a1 + 16) = v84;
        *v14 = v83;
        *(_OWORD *)(a1 + 48) = v82;
        v85 = *(_DWORD *)(a2 - 24);
        v86 = *(_DWORD *)(a1 + 40);
        v9 = v85 == v86;
        v87 = v85 < v86;
        if (v9)
          v87 = *(float *)(a2 - 12) < *(float *)(a1 + 52);
        if (v87)
        {
          v23 = *v14;
          v22 = *(_OWORD *)(a1 + 48);
          v88 = *(_OWORD *)(a2 - 16);
          *v14 = *v15;
          *(_OWORD *)(a1 + 48) = v88;
          goto LABEL_49;
        }
      }
      else if (v21)
      {
        v66 = *v14;
        v65 = *(_OWORD *)(a1 + 48);
        v67 = *(_OWORD *)(a2 - 16);
        *v14 = *v15;
        *(_OWORD *)(a1 + 48) = v67;
        *v15 = v66;
        *(_OWORD *)(a2 - 16) = v65;
        v68 = *(_DWORD *)(a1 + 40);
        v69 = *(_DWORD *)(a1 + 8);
        v9 = v68 == v69;
        v70 = v68 < v69;
        if (v9)
          v70 = *(float *)(a1 + 52) < *(float *)(a1 + 20);
        if (v70)
        {
          v72 = *(_OWORD *)a1;
          v71 = *(_OWORD *)(a1 + 16);
          v73 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)a1 = *v14;
          *(_OWORD *)(a1 + 16) = v73;
          *v14 = v72;
          *(_OWORD *)(a1 + 48) = v71;
        }
      }
      return result;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_6 &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentCrossing *>((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64), (__int128 *)(a2 - 32), a3);
      return 1;
    case 5:
      v38 = (__int128 *)(a1 + 32);
      v39 = (__int128 *)(a1 + 64);
      v40 = (__int128 *)(a1 + 96);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_6 &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentCrossing *>((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64), (__int128 *)(a1 + 96), a3);
      v41 = *(_DWORD *)(a2 - 24);
      v42 = *(_DWORD *)(a1 + 104);
      v9 = v41 == v42;
      v43 = v41 < v42;
      if (v9)
        v43 = *(float *)(a2 - 12) < *(float *)(a1 + 116);
      if (v43)
      {
        v45 = *v40;
        v44 = *(_OWORD *)(a1 + 112);
        v46 = *(_OWORD *)(a2 - 16);
        *v40 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 112) = v46;
        *(_OWORD *)(a2 - 32) = v45;
        *(_OWORD *)(a2 - 16) = v44;
        v47 = *(_DWORD *)(a1 + 104);
        v48 = *(_DWORD *)(a1 + 72);
        v9 = v47 == v48;
        v49 = v47 < v48;
        if (v9)
          v49 = *(float *)(a1 + 116) < *(float *)(a1 + 84);
        if (v49)
        {
          v51 = *v39;
          v50 = *(_OWORD *)(a1 + 80);
          v52 = *(_OWORD *)(a1 + 112);
          *v39 = *v40;
          *(_OWORD *)(a1 + 80) = v52;
          *v40 = v51;
          *(_OWORD *)(a1 + 112) = v50;
          v53 = *(_DWORD *)(a1 + 72);
          v54 = *(_DWORD *)(a1 + 40);
          v9 = v53 == v54;
          v55 = v53 < v54;
          if (v9)
            v55 = *(float *)(a1 + 84) < *(float *)(a1 + 52);
          if (v55)
          {
            v57 = *v38;
            v56 = *(_OWORD *)(a1 + 48);
            v58 = *(_OWORD *)(a1 + 80);
            *v38 = *v39;
            *(_OWORD *)(a1 + 48) = v58;
            *v39 = v57;
            *(_OWORD *)(a1 + 80) = v56;
            v59 = *(_DWORD *)(a1 + 40);
            v60 = *(_DWORD *)(a1 + 8);
            v9 = v59 == v60;
            v61 = v59 < v60;
            if (v9)
              v61 = *(float *)(a1 + 52) < *(float *)(a1 + 20);
            if (v61)
            {
              v63 = *(_OWORD *)a1;
              v62 = *(_OWORD *)(a1 + 16);
              v64 = *(_OWORD *)(a1 + 48);
              *(_OWORD *)a1 = *v38;
              *(_OWORD *)(a1 + 16) = v64;
              *v38 = v63;
              *(_OWORD *)(a1 + 48) = v62;
            }
          }
        }
      }
      return 1;
    default:
      v25 = a1 + 64;
      v26 = (__int128 *)(a1 + 32);
      v27 = *(_DWORD *)(a1 + 40);
      v28 = *(float *)(a1 + 52);
      v29 = *(_DWORD *)(a1 + 8);
      v30 = *(float *)(a1 + 20);
      v31 = v27 < v29;
      if (v27 == v29)
        v31 = v28 < v30;
      v32 = *(_DWORD *)(a1 + 72);
      v33 = *(float *)(a1 + 84);
      v9 = v32 == v27;
      v34 = v32 < v27;
      if (v9)
        v34 = v33 < v28;
      if (v31)
      {
        if (v34)
        {
          v36 = *(_OWORD *)a1;
          v35 = *(_OWORD *)(a1 + 16);
          v37 = *(_OWORD *)(a1 + 80);
          *(_OWORD *)a1 = *(_OWORD *)v25;
          *(_OWORD *)(a1 + 16) = v37;
LABEL_54:
          *(_OWORD *)v25 = v36;
          *(_OWORD *)(a1 + 80) = v35;
          goto LABEL_55;
        }
        v90 = *(_OWORD *)a1;
        v89 = *(_OWORD *)(a1 + 16);
        v91 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)a1 = *v26;
        *(_OWORD *)(a1 + 16) = v91;
        *v26 = v90;
        *(_OWORD *)(a1 + 48) = v89;
        v92 = *(_DWORD *)(a1 + 40);
        v9 = v32 == v92;
        v93 = v32 < v92;
        if (v9)
          v93 = v33 < *(float *)(a1 + 52);
        if (v93)
        {
          v36 = *v26;
          v35 = *(_OWORD *)(a1 + 48);
          v94 = *(_OWORD *)(a1 + 80);
          *v26 = *(_OWORD *)v25;
          *(_OWORD *)(a1 + 48) = v94;
          goto LABEL_54;
        }
      }
      else if (v34)
      {
        v75 = *v26;
        v74 = *(_OWORD *)(a1 + 48);
        v76 = *(_OWORD *)(a1 + 80);
        *v26 = *(_OWORD *)v25;
        *(_OWORD *)(a1 + 48) = v76;
        *(_OWORD *)v25 = v75;
        *(_OWORD *)(a1 + 80) = v74;
        v77 = *(_DWORD *)(a1 + 40);
        v9 = v77 == v29;
        v78 = v77 < v29;
        if (v9)
          v78 = *(float *)(a1 + 52) < v30;
        if (v78)
        {
          v80 = *(_OWORD *)a1;
          v79 = *(_OWORD *)(a1 + 16);
          v81 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)a1 = *v26;
          *(_OWORD *)(a1 + 16) = v81;
          *v26 = v80;
          *(_OWORD *)(a1 + 48) = v79;
        }
      }
LABEL_55:
      v95 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v96 = 0;
      v97 = 0;
      while (1)
      {
        v99 = *(_DWORD *)(v95 + 8);
        v100 = *(float *)(v95 + 20);
        v101 = *(_DWORD *)(v25 + 8);
        v102 = v100 < *(float *)(v25 + 20);
        v9 = v99 == v101;
        v103 = v99 < v101;
        if (!v9)
          v102 = v103;
        if (v102)
        {
          v104 = *(_QWORD *)v95;
          v105 = *(_QWORD *)(v95 + 12);
          v106 = v96;
          v107 = *(_QWORD *)(v95 + 24);
          do
          {
            v108 = a1 + v106;
            v109 = *(_OWORD *)(a1 + v106 + 80);
            *(_OWORD *)(v108 + 96) = *(_OWORD *)(a1 + v106 + 64);
            *(_OWORD *)(v108 + 112) = v109;
            if (v106 == -64)
            {
              v98 = a1;
              goto LABEL_58;
            }
            v110 = *(_DWORD *)(v108 + 40);
            v111 = v100 < *(float *)(v108 + 52);
            v9 = v99 == v110;
            v112 = v99 < v110;
            if (!v9)
              v111 = v112;
            v106 -= 32;
          }
          while (v111);
          v98 = a1 + v106 + 96;
LABEL_58:
          *(_QWORD *)v98 = v104;
          *(_DWORD *)(v98 + 8) = v99;
          *(_QWORD *)(v98 + 12) = v105;
          *(float *)(v98 + 20) = v100;
          ++v97;
          *(_QWORD *)(v98 + 24) = v107;
          if (v97 == 8)
            return v95 + 32 == a2;
        }
        v25 = v95;
        v96 += 32;
        v95 += 32;
        if (v95 == a2)
          return 1;
      }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_6 &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentCrossing *>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __n128 result)
{
  unsigned int v5;
  float v6;
  unsigned int v7;
  BOOL v8;
  BOOL v9;
  unsigned int v10;
  _BOOL4 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unsigned int v16;
  unsigned int v17;
  _BOOL4 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unsigned int v23;
  unsigned int v24;
  _BOOL4 v25;
  __int128 v26;
  unsigned int v27;
  unsigned int v28;
  _BOOL4 v29;
  __int128 v30;
  __int128 v31;
  unsigned int v32;
  unsigned int v33;
  _BOOL4 v34;
  __int128 v35;
  __int128 v36;
  unsigned int v37;
  unsigned int v38;
  _BOOL4 v39;
  __int128 v40;
  __int128 v41;

  v5 = *((_DWORD *)a2 + 2);
  v6 = *((float *)a2 + 5);
  v7 = *((_DWORD *)a1 + 2);
  v8 = v5 == v7;
  v9 = v5 < v7;
  if (v8)
    v9 = v6 < *((float *)a1 + 5);
  v10 = *((_DWORD *)a3 + 2);
  v8 = v10 == v5;
  v11 = v10 < v5;
  if (v8)
    v11 = *((float *)a3 + 5) < v6;
  if (v9)
  {
    if (v11)
    {
      v12 = *a1;
      result = (__n128)a1[1];
      v13 = a3[1];
      *a1 = *a3;
      a1[1] = v13;
LABEL_17:
      *a3 = v12;
      a3[1] = (__int128)result;
      goto LABEL_18;
    }
    v21 = *a1;
    result = (__n128)a1[1];
    v22 = a2[1];
    *a1 = *a2;
    a1[1] = v22;
    *a2 = v21;
    a2[1] = (__int128)result;
    v23 = *((_DWORD *)a3 + 2);
    v24 = *((_DWORD *)a2 + 2);
    v8 = v23 == v24;
    v25 = v23 < v24;
    if (v8)
      v25 = *((float *)a3 + 5) < *((float *)a2 + 5);
    if (v25)
    {
      v12 = *a2;
      result = (__n128)a2[1];
      v26 = a3[1];
      *a2 = *a3;
      a2[1] = v26;
      goto LABEL_17;
    }
  }
  else if (v11)
  {
    v14 = *a2;
    result = (__n128)a2[1];
    v15 = a3[1];
    *a2 = *a3;
    a2[1] = v15;
    *a3 = v14;
    a3[1] = (__int128)result;
    v16 = *((_DWORD *)a2 + 2);
    v17 = *((_DWORD *)a1 + 2);
    v8 = v16 == v17;
    v18 = v16 < v17;
    if (v8)
      v18 = *((float *)a2 + 5) < *((float *)a1 + 5);
    if (v18)
    {
      v19 = *a1;
      result = (__n128)a1[1];
      v20 = a2[1];
      *a1 = *a2;
      a1[1] = v20;
      *a2 = v19;
      a2[1] = (__int128)result;
    }
  }
LABEL_18:
  v27 = *((_DWORD *)a4 + 2);
  result.n128_u32[0] = *((_DWORD *)a4 + 5);
  v28 = *((_DWORD *)a3 + 2);
  v8 = v27 == v28;
  v29 = v27 < v28;
  if (v8)
    v29 = result.n128_f32[0] < *((float *)a3 + 5);
  if (v29)
  {
    v30 = *a3;
    result = (__n128)a3[1];
    v31 = a4[1];
    *a3 = *a4;
    a3[1] = v31;
    *a4 = v30;
    a4[1] = (__int128)result;
    v32 = *((_DWORD *)a3 + 2);
    result.n128_u32[0] = *((_DWORD *)a3 + 5);
    v33 = *((_DWORD *)a2 + 2);
    v8 = v32 == v33;
    v34 = v32 < v33;
    if (v8)
      v34 = result.n128_f32[0] < *((float *)a2 + 5);
    if (v34)
    {
      v35 = *a2;
      result = (__n128)a2[1];
      v36 = a3[1];
      *a2 = *a3;
      a2[1] = v36;
      *a3 = v35;
      a3[1] = (__int128)result;
      v37 = *((_DWORD *)a2 + 2);
      result.n128_u32[0] = *((_DWORD *)a2 + 5);
      v38 = *((_DWORD *)a1 + 2);
      v8 = v37 == v38;
      v39 = v37 < v38;
      if (v8)
        v39 = result.n128_f32[0] < *((float *)a1 + 5);
      if (v39)
      {
        v40 = *a1;
        result = (__n128)a1[1];
        v41 = a2[1];
        *a1 = *a2;
        a1[1] = v41;
        *a2 = v40;
        a2[1] = (__int128)result;
      }
    }
  }
  return result;
}

void std::__function::__func<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

__n128 std::__function::__func<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E1BFABD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E1BFABD0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::chrono::steady_clock::time_point v9;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  FILE *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t **v23;
  void **v24;
  size_t v25;
  uint64_t v26;
  char v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v31;
  unint64_t *v32;
  unint64_t v33;
  const char *v34;
  const char **v35;

  v3 = *a2;
  v4 = *(uint64_t **)(a1 + 8);
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v9.__d_.__rep_;
  v11 = **(_QWORD **)(a1 + 16);
  if (v11 >= *(_QWORD *)(**(_QWORD **)(a1 + 8) + 2832) + 24 * **(_QWORD **)(a1 + 24))
  {
    v15 = (FILE *)*MEMORY[0x1E0C80C10];
    v16 = 9987;
  }
  else
  {
    v12 = *(_QWORD *)(v3 + 48);
    v13 = *(_QWORD *)(v3 + 56);
    v14 = v12 + 4;
    if (v12 + 4 <= v13)
    {
      v17 = *(_QWORD *)(v3 + 40);
      *(_DWORD *)(v3 + 64) = *(_DWORD *)(v17 + v12);
      *(_QWORD *)(v3 + 48) = v14;
      v18 = v12 + 6;
      if (v12 + 6 <= v13)
      {
        v19 = *(unsigned __int16 *)(v17 + v14);
        *(_QWORD *)(v3 + 48) = v18;
        if (**(_BYTE **)(a1 + 32) && v19 == 71)
          goto LABEL_20;
        *(_DWORD *)(v11 + 12) = v19;
        *(_BYTE *)(v11 + 16) = 0;
        v20 = v12 + 10;
        if (v20 <= v13)
        {
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v17 + v18);
          *(_QWORD *)(v3 + 48) = v20;
          v21 = geo::codec::Allocator::instance((geo::codec::Allocator *)v9.__d_.__rep_);
          v22 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v21 + 16))(v21, *(unsigned int *)(**(_QWORD **)(a1 + 16) + 8), 8);
          v23 = *(uint64_t ***)(a1 + 16);
          **v23 = v22;
          v24 = (void **)*v23;
          v25 = *((unsigned int *)v24 + 2);
          v26 = *(_QWORD *)(v3 + 48);
          if (v26 + v25 <= *(_QWORD *)(v3 + 56))
          {
            v9.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)memcpy(*v24, (const void *)(*(_QWORD *)(v3 + 40) + v26), v25);
            *(_QWORD *)(v3 + 48) += v25;
            **(_QWORD **)(a1 + 16) += 24;
            ++*(_WORD *)(**(_QWORD **)(a1 + 8) + 2840);
            v27 = 1;
            goto LABEL_17;
          }
          v15 = (FILE *)*MEMORY[0x1E0C80C10];
          v16 = 10005;
        }
        else
        {
          v15 = (FILE *)*MEMORY[0x1E0C80C10];
          v16 = 10002;
        }
      }
      else
      {
        v15 = (FILE *)*MEMORY[0x1E0C80C10];
        v16 = 9992;
      }
    }
    else
    {
      v15 = (FILE *)*MEMORY[0x1E0C80C10];
      v16 = 9989;
    }
  }
  v9.__d_.__rep_ = fprintf(v15, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v16);
  v27 = 0;
LABEL_17:
  v28 = *(char **)(a1 + 48);
  if (!*v28)
    v27 = 0;
  *v28 = v27;
LABEL_20:
  if (v3 && **(_QWORD **)(a1 + 40))
  {
    if (*(_BYTE *)v3)
    {
      v29 = geo::codec::Allocator::instance((geo::codec::Allocator *)v9.__d_.__rep_);
      v9.__d_.__rep_ = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v29 + 40))(v29, *(_QWORD *)(v3 + 40), 0);
    }
    v30 = geo::codec::Allocator::instance((geo::codec::Allocator *)v9.__d_.__rep_);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v30 + 40))(v30, v3, 0);
  }
  v31 = std::chrono::steady_clock::now().__d_.__rep_;
  v34 = "ChapterStyleAttributeRaster";
  v35 = &v34;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v6 + 1912, (uint64_t *)&v34, (uint64_t)&std::piecewise_construct, (uint64_t **)&v35)+ 4) = (double)((v31 - rep) / 1000) * 0.001;
  if (v5)
  {
    v32 = (unint64_t *)&v5->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_189AFFBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, const char *a12, uint64_t a13, const char **a14)
{
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t *p_shared_owners;
  unint64_t v20;

  rep = std::chrono::steady_clock::now().__d_.__rep_;
  a12 = "ChapterStyleAttributeRaster";
  a14 = &a12;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v16 + 1912, (uint64_t *)&a12, (uint64_t)&std::piecewise_construct, (uint64_t **)&a14)+ 4) = (double)((rep - v15) / 1000) * 0.001;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec29_readStyleAttributeRastersOldEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0"
                     "_10VectorTileEEEbE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec29_readStyleAttributeRastersOldEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110sha"
                                "red_ptrINS0_10VectorTileEEEbE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec29_readStyleAttributeRastersOldEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEbE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec29_readStyleAttributeRastersOldEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEbE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRastersOld(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::target_type()
{
}

void std::__function::__func<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

__n128 std::__function::__func<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E1BFAB78;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E1BFAB78;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::operator()(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::chrono::steady_clock::time_point v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  FILE *v14;
  int v15;
  char v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void ***v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t **v37;
  uint64_t *v38;
  unsigned __int16 v39;
  mgcl::iarray::Decoder *v40;
  void *v41[2];
  void *__p[2];
  __int128 v43;
  mgcl::iarray::Decoder *v44;
  const char *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;

  v3 = *a2;
  v4 = *(uint64_t **)(a1 + 8);
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (**(_QWORD **)(a1 + 16) >= (unint64_t)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 2832)
                                                  + 24 * **(_QWORD **)(a1 + 24)))
  {
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = 10034;
  }
  else
  {
    v50 = 0;
    v10 = geo::codec::chapterReadVarUint32(v3, &v50);
    if ((v10 & 1) != 0)
    {
      if (**(_BYTE **)(a1 + 32) && v50 == 71)
        goto LABEL_17;
      v11 = **(_QWORD **)(a1 + 16);
      *(_DWORD *)(v11 + 12) = v50;
      v12 = v3[6];
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) <= v3[7])
      {
        v23 = *(unsigned __int8 *)(v3[5] + v12);
        v3[6] = v13;
        if (v23 == 1)
        {
          v24 = 0;
        }
        else
        {
          if (v23 != 2)
          {
            v14 = (FILE *)*MEMORY[0x1E0C80C10];
            v15 = 10053;
            goto LABEL_12;
          }
          v24 = 1;
        }
        *(_BYTE *)(v11 + 16) = v24;
        v49 = 0;
        v10 = geo::codec::chapterReadVarUint32(v3, &v49);
        if ((v10 & 1) == 0)
        {
          v14 = (FILE *)*MEMORY[0x1E0C80C10];
          v15 = 10057;
          goto LABEL_12;
        }
        v25 = *(uint64_t **)(a1 + 16);
        v26 = *v25;
        if (*(_BYTE *)(*v25 + 16) == 1)
        {
          v48 = 0;
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v44 = 0;
          *(_OWORD *)__p = 0u;
          v43 = 0u;
          *(_OWORD *)v41 = 0u;
          v32 = v3[6];
          v33 = v3[5] + v32;
          v34 = v49;
          v3[6] = v32 + v49;
          if (mgcl::raster::PolygonRasterDecoder<unsigned char>::decode(v41, v33, v34, (uint64_t)&v45, 0))
          {
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 10073);
            v35 = 6;
          }
          else
          {
            v35 = 0;
            v36 = v48;
            v48 = 0;
            v37 = *(uint64_t ***)(a1 + 16);
            **v37 = v36;
            v38 = *v37;
            v39 = (unsigned __int16)v45;
            LOWORD(v37) = v46;
            *((_WORD *)v38 + 9) = v46;
            *((_WORD *)v38 + 10) = v39;
            *((_DWORD *)v38 + 2) = v39 * (unsigned __int16)v37;
          }
          v40 = v44;
          v44 = 0;
          if (v40)
          {
            mgcl::iarray::Decoder::~Decoder(v40);
            MEMORY[0x18D76437C]();
          }
          if (__p[1])
          {
            *(void **)&v43 = __p[1];
            operator delete(__p[1]);
          }
          if (v41[0])
          {
            v41[1] = v41[0];
            operator delete(v41[0]);
          }
          v10 = v48;
          v48 = 0;
          if (v10)
            v10 = MEMORY[0x18D764364](v10, 0x1000C8077774924);
          if (v35 == 6)
            goto LABEL_13;
          v25 = *(uint64_t **)(a1 + 16);
          v26 = *v25;
        }
        else if (!*(_BYTE *)(*v25 + 16))
        {
          v27 = geo::codec::Allocator::instance((geo::codec::Allocator *)v10);
          v28 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v27 + 16))(v27, v49, 8);
          v29 = *(void ****)(a1 + 16);
          **v29 = (void *)v28;
          v30 = v49;
          v31 = v3[6];
          if (v31 + (unint64_t)v49 > v3[7])
          {
            v14 = (FILE *)*MEMORY[0x1E0C80C10];
            v15 = 10063;
            goto LABEL_12;
          }
          v10 = (uint64_t)memcpy(**v29, (const void *)(v3[5] + v31), v49);
          v3[6] += v30;
          v25 = *(uint64_t **)(a1 + 16);
          v26 = *v25;
          *(_DWORD *)(*v25 + 8) = v49;
        }
        *v25 = v26 + 24;
        ++*(_WORD *)(**(_QWORD **)(a1 + 8) + 2840);
        v16 = 1;
        goto LABEL_14;
      }
      v14 = (FILE *)*MEMORY[0x1E0C80C10];
      v15 = 10046;
    }
    else
    {
      v14 = (FILE *)*MEMORY[0x1E0C80C10];
      v15 = 10037;
    }
  }
LABEL_12:
  v10 = fprintf(v14, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v15);
LABEL_13:
  v16 = 0;
LABEL_14:
  v17 = *(char **)(a1 + 48);
  if (!*v17)
    v16 = 0;
  *v17 = v16;
LABEL_17:
  if (v3 && **(_QWORD **)(a1 + 40))
  {
    if (*(_BYTE *)v3)
    {
      v18 = geo::codec::Allocator::instance((geo::codec::Allocator *)v10);
      v10 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v18 + 40))(v18, v3[5], 0);
    }
    v19 = geo::codec::Allocator::instance((geo::codec::Allocator *)v10);
    (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v19 + 40))(v19, v3, 0);
  }
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v45 = "ChapterStyleAttributeRaster2";
  v41[0] = &v45;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v6 + 1912, (uint64_t *)&v45, (uint64_t)&std::piecewise_construct, (uint64_t **)v41)+ 4) = (double)((rep - v9.__d_.__rep_) / 1000) * 0.001;
  if (v5)
  {
    v21 = (unint64_t *)&v5->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_189B001E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const char **a11, const char **a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, mgcl::iarray::Decoder *a17, uint64_t a18, const char *a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  std::__shared_weak_count *v22;
  uint64_t v23;
  uint64_t v24;
  mgcl::iarray::Decoder *v26;
  void *v27;
  const char **v28;
  uint64_t v29;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t *p_shared_owners;
  unint64_t v32;

  v26 = a17;
  a17 = 0;
  if (v26)
  {
    mgcl::iarray::Decoder::~Decoder(v26);
    MEMORY[0x18D76437C]();
    v27 = __p;
    if (!__p)
    {
LABEL_3:
      v28 = a11;
      if (!a11)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else
  {
    v27 = __p;
    if (!__p)
      goto LABEL_3;
  }
  a15 = (uint64_t)v27;
  operator delete(v27);
  v28 = a11;
  if (!a11)
  {
LABEL_4:
    v29 = a22;
    a22 = 0;
    if (!v29)
    {
LABEL_10:
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      a19 = "ChapterStyleAttributeRaster2";
      a11 = &a19;
      *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v24 + 1912, (uint64_t *)&a19, (uint64_t)&std::piecewise_construct, (uint64_t **)&a11)+ 4) = (double)((rep - v23) / 1000) * 0.001;
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      _Unwind_Resume(a1);
    }
LABEL_9:
    MEMORY[0x18D764364](v29, 0x1000C8077774924);
    goto LABEL_10;
  }
LABEL_8:
  a12 = v28;
  operator delete(v28);
  v29 = a22;
  a22 = 0;
  if (!v29)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t std::__function::__func<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec26_readStyleAttributeRastersEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10"
                     "VectorTileEEEbE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec26_readStyleAttributeRastersEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared"
                                "_ptrINS0_10VectorTileEEEbE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec26_readStyleAttributeRastersEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEbE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec26_readStyleAttributeRastersEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEbE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0,std::allocator<geo::codec::_readStyleAttributeRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&,BOOL)::$_0>,void ()(VMP4Chapter *)>::target_type()
{
}

void std::__function::__func<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(VMP4Chapter *)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

__n128 std::__function::__func<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(VMP4Chapter *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E1BFAA18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(VMP4Chapter *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E1BFAA18;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(VMP4Chapter *)>::operator()(uint64_t a1, _QWORD **a2)
{
  _QWORD *v3;
  uint64_t *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::chrono::steady_clock::time_point v9;
  uint64_t v10;
  FILE *v11;
  int v12;
  geo::codec::Allocator *v13;
  char v14;
  char *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  FILE *v42;
  int v43;
  mgcl::iarray::Decoder *v44;
  mgcl::iarray::Decoder *v45;
  int v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  FILE *v57;
  int v58;
  int v59;
  mgcl::iarray::Decoder *v60;
  uint64_t v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  mgcl::iarray::Decoder *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int16 v70;
  unsigned __int16 v71;
  uint64_t v72;
  void *v73[2];
  void *v74[2];
  __int128 v75;
  mgcl::iarray::Decoder *v76;
  _QWORD v77[2];
  int v78;
  uint64_t v79;
  void *v80[2];
  void *__p[2];
  __int128 v82;
  mgcl::iarray::Decoder *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;

  v3 = *a2;
  v4 = *(uint64_t **)(a1 + 8);
  v6 = *v4;
  v5 = (std::__shared_weak_count *)v4[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v97 = 0;
  if (**(_QWORD **)(a1 + 16) >= (unint64_t)(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 2848)
                                                  + 80 * **(_QWORD **)(a1 + 24)))
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    v12 = 10114;
    goto LABEL_12;
  }
  if ((geo::codec::chapterReadVarUint32(v3, (unsigned int *)&v97 + 1) & 1) == 0)
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    v12 = 10116;
    goto LABEL_12;
  }
  if ((geo::codec::chapterReadVarUint32(v3, (unsigned int *)&v97) & 1) == 0)
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    v12 = 10117;
    goto LABEL_12;
  }
  v10 = v3[6];
  if ((unint64_t)(v10 + 1) > v3[7])
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    v12 = 10119;
LABEL_12:
    v13 = (geo::codec::Allocator *)fprintf(v11, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v12);
    v14 = 0;
    goto LABEL_13;
  }
  ***(_BYTE ***)(a1 + 16) = *(_BYTE *)(v3[5] + v10);
  ++v3[6];
  v96 = 0;
  if ((geo::codec::chapterReadVarUint32(v3, &v96) & 1) == 0)
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    v12 = 10122;
    goto LABEL_12;
  }
  v95 = 0;
  if ((geo::codec::chapterReadVarUint32(v3, &v95) & 1) == 0)
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    v12 = 10124;
    goto LABEL_12;
  }
  v94 = 0;
  if ((geo::codec::chapterReadVarUint32(v3, &v94) & 1) == 0)
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    v12 = 10126;
    goto LABEL_12;
  }
  v93 = 0;
  v22 = geo::codec::chapterReadVarUint32(v3, &v93);
  if ((v22 & 1) == 0)
  {
    v11 = (FILE *)*MEMORY[0x1E0C80C10];
    v12 = 10129;
    goto LABEL_12;
  }
  v91 = 0u;
  v92 = 0u;
  v23 = geo::codec::Allocator::instance((geo::codec::Allocator *)v22);
  v24 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v23 + 24))(v23, v94, 8);
  v25 = *(uint64_t **)(a1 + 16);
  *(_QWORD *)(*v25 + 32) = v24;
  v26 = v94;
  v27 = *v25;
  *(_WORD *)(v27 + 40) = v94;
  v28 = geo::codec::decodeIntCompressorArray<unsigned long long>(v3, (uint64_t *)&v91, SBYTE4(v97), v97, v26, *(uint64x2_t **)(v27 + 32));
  if ((v28 & 1) != 0)
  {
    v29 = geo::codec::Allocator::instance((geo::codec::Allocator *)v28);
    v30 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v29 + 24))(v29, v96, 2);
    v31 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(*(_QWORD *)v31 + 64) = v30;
    v33 = v96;
    v32 = v97;
    *(_WORD *)(*(_QWORD *)v31 + 72) = v96;
    v89 = 0u;
    v90 = 0u;
    v34 = geo::codec::decodeIntCompressorArray<unsigned short>(v3, (uint64_t *)&v89, SBYTE4(v97), v32, v33, *(uint16x8_t **)(*(_QWORD *)v31 + 64));
    if ((v34 & 1) == 0)
    {
      v42 = (FILE *)*MEMORY[0x1E0C80C10];
      v43 = 10139;
      goto LABEL_43;
    }
    v35 = geo::codec::Allocator::instance((geo::codec::Allocator *)v34);
    v36 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v35 + 24))(v35, v93, 2);
    v37 = *(uint64_t **)(a1 + 16);
    *(_QWORD *)(*v37 + 48) = v36;
    v38 = v93;
    v39 = *v37;
    *(_WORD *)(v39 + 56) = v93;
    if ((geo::codec::decodeIntCompressorArray<unsigned short>(v3, (uint64_t *)&v89, SBYTE4(v97), v97, v38, *(uint16x8_t **)(v39 + 48)) & 1) == 0)
    {
      v42 = (FILE *)*MEMORY[0x1E0C80C10];
      v43 = 10143;
      goto LABEL_43;
    }
    v40 = v3[6];
    v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) > v3[7])
    {
      v42 = (FILE *)*MEMORY[0x1E0C80C10];
      v43 = 10146;
      goto LABEL_43;
    }
    v46 = *(unsigned __int8 *)(v3[5] + v40);
    v3[6] = v41;
    if (v46 == 1)
    {
      v47 = 0;
    }
    else
    {
      if (v46 != 2)
      {
        v42 = (FILE *)*MEMORY[0x1E0C80C10];
        v43 = 10153;
        goto LABEL_43;
      }
      v47 = 1;
    }
    *(_BYTE *)(**(_QWORD **)(a1 + 16) + 20) = v47;
    v88 = 0;
    v48 = geo::codec::chapterReadVarUint32(v3, &v88);
    if ((v48 & 1) != 0)
    {
      v72 = v6;
      v49 = *(uint64_t **)(a1 + 16);
      v50 = *v49;
      if (*(_BYTE *)(*v49 + 20) != 1)
      {
        if (!*(_BYTE *)(*v49 + 20))
        {
          v51 = geo::codec::Allocator::instance((geo::codec::Allocator *)v48);
          v52 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v51 + 16))(v51, v88, 8);
          v53 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(*(_QWORD *)v53 + 8) = v52;
          v54 = v88;
          v55 = v3[6];
          if (v55 + (unint64_t)v88 > v3[7])
          {
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 10163);
            v14 = 0;
            goto LABEL_82;
          }
          memcpy(*(void **)(*(_QWORD *)v53 + 8), (const void *)(v3[5] + v55), v88);
          v3[6] += v54;
          v49 = *(uint64_t **)(a1 + 16);
          v50 = *v49;
          *(_DWORD *)(v50 + 16) = v88;
          *(_BYTE *)(v50 + 26) = 0;
        }
        goto LABEL_81;
      }
      v56 = v3[5] + v3[6];
      v87 = 0;
      v84 = 0;
      v85 = 0;
      v86 = 0;
      v83 = 0;
      *(_OWORD *)__p = 0u;
      v82 = 0u;
      *(_OWORD *)v80 = 0u;
      if (mgcl::raster::PolygonRasterDecoder<unsigned char>::decode(v80, v56, v88, (uint64_t)&v84, 1))
      {
        v57 = (FILE *)*MEMORY[0x1E0C80C10];
        v58 = 10174;
LABEL_64:
        fprintf(v57, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v58);
        v59 = 6;
LABEL_65:
        v60 = v83;
        v83 = 0;
        if (v60)
        {
          mgcl::iarray::Decoder::~Decoder(v60);
          MEMORY[0x18D76437C]();
        }
        if (__p[1])
        {
          *(void **)&v82 = __p[1];
          operator delete(__p[1]);
        }
        if (v80[0])
        {
          v80[1] = v80[0];
          operator delete(v80[0]);
        }
        v61 = v87;
        v87 = 0;
        if (v61)
          MEMORY[0x18D764364](v61, 0x1000C8077774924);
        if (v59)
        {
          v14 = 0;
          goto LABEL_82;
        }
        v49 = *(uint64_t **)(a1 + 16);
        v50 = *v49;
LABEL_81:
        *v49 = v50 + 80;
        ++*(_WORD *)(**(_QWORD **)(a1 + 8) + 2856);
        v14 = 1;
LABEL_82:
        v6 = v72;
        v44 = (mgcl::iarray::Decoder *)*((_QWORD *)&v90 + 1);
        *((_QWORD *)&v90 + 1) = 0;
        if (!v44)
        {
LABEL_45:
          if ((_QWORD)v89)
          {
            *((_QWORD *)&v89 + 1) = v89;
            operator delete((void *)v89);
          }
          goto LABEL_47;
        }
LABEL_44:
        mgcl::iarray::Decoder::~Decoder(v44);
        MEMORY[0x18D76437C]();
        goto LABEL_45;
      }
      v62 = v86;
      *(_BYTE *)(**(_QWORD **)(a1 + 16) + 26) = v86;
      if (v62 == 8)
      {
        if (mgcl::raster::PolygonRasterDecoder<unsigned char>::decode(v80, v56, v88, (uint64_t)&v84, 0))
        {
          v57 = (FILE *)*MEMORY[0x1E0C80C10];
          v58 = 10180;
          goto LABEL_64;
        }
        v68 = v87;
        v87 = 0;
        v67 = *(uint64_t **)(a1 + 16);
        *(_QWORD *)(*v67 + 8) = v68;
      }
      else
      {
        if (v62 != 16)
        {
          v57 = (FILE *)*MEMORY[0x1E0C80C10];
          v58 = 10177;
          goto LABEL_64;
        }
        v79 = 0;
        v77[0] = 0;
        v77[1] = 0;
        v78 = 0;
        v76 = 0;
        *(_OWORD *)v74 = 0u;
        v75 = 0u;
        *(_OWORD *)v73 = 0u;
        v63 = mgcl::raster::PolygonRasterDecoder<unsigned short>::decode(v73, v56, v88, (uint64_t)v77, 0);
        if (v63)
        {
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 10185);
          v59 = 6;
        }
        else
        {
          v59 = 0;
          v64 = v79;
          v79 = 0;
          *(_QWORD *)(**(_QWORD **)(a1 + 16) + 8) = v64;
        }
        v65 = v76;
        v76 = 0;
        if (v65)
        {
          mgcl::iarray::Decoder::~Decoder(v65);
          MEMORY[0x18D76437C]();
        }
        if (v74[1])
        {
          *(void **)&v75 = v74[1];
          operator delete(v74[1]);
        }
        if (v73[0])
        {
          v73[1] = v73[0];
          operator delete(v73[0]);
        }
        v66 = v79;
        v79 = 0;
        if (v66)
          MEMORY[0x18D764364](v66, 0x1000C80BDFB0063);
        if (v63)
          goto LABEL_65;
        v67 = *(uint64_t **)(a1 + 16);
      }
      v59 = 0;
      v69 = *v67;
      v71 = v84;
      v70 = v85;
      *(_WORD *)(v69 + 22) = v85;
      *(_WORD *)(v69 + 24) = v71;
      *(_DWORD *)(v69 + 16) = v71 * v70 * (v86 >> 3);
      v3[6] += v88;
      goto LABEL_65;
    }
    v42 = (FILE *)*MEMORY[0x1E0C80C10];
    v43 = 10157;
LABEL_43:
    fprintf(v42, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v43);
    v14 = 0;
    v44 = (mgcl::iarray::Decoder *)*((_QWORD *)&v90 + 1);
    *((_QWORD *)&v90 + 1) = 0;
    if (!v44)
      goto LABEL_45;
    goto LABEL_44;
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 10134);
  v14 = 0;
LABEL_47:
  v45 = (mgcl::iarray::Decoder *)*((_QWORD *)&v92 + 1);
  *((_QWORD *)&v92 + 1) = 0;
  if (v45)
  {
    mgcl::iarray::Decoder::~Decoder(v45);
    MEMORY[0x18D76437C]();
  }
  v13 = (geo::codec::Allocator *)v91;
  if ((_QWORD)v91)
  {
    *((_QWORD *)&v91 + 1) = v91;
    operator delete((void *)v91);
  }
LABEL_13:
  v15 = *(char **)(a1 + 32);
  if (*v15)
    v16 = v14;
  else
    v16 = 0;
  *v15 = v16;
  if (v3 && **(_QWORD **)(a1 + 40))
  {
    if (*(_BYTE *)v3)
    {
      v17 = geo::codec::Allocator::instance(v13);
      v13 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v17 + 40))(v17, v3[5], 0);
    }
    v18 = geo::codec::Allocator::instance(v13);
    (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v18 + 40))(v18, v3, 0);
  }
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v73[0] = "ChapterMaterialRaster";
  v80[0] = v73;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v6 + 1912, (uint64_t *)v73, (uint64_t)&std::piecewise_construct, (uint64_t **)v80)+ 4) = (double)((rep - v9.__d_.__rep_) / 1000) * 0.001;
  if (v5)
  {
    v20 = (unint64_t *)&v5->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_189B00CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const char *a13, char *a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, mgcl::iarray::Decoder *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,const char **a25,const char **a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,mgcl::iarray::Decoder *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  std::__shared_weak_count *v35;
  uint64_t v36;
  uint64_t v37;
  mgcl::iarray::Decoder *v39;
  void *v40;
  char *v41;
  uint64_t v42;
  mgcl::iarray::Decoder *v43;
  void *v44;
  const char **v45;
  uint64_t v46;
  mgcl::iarray::Decoder *v47;
  void *v48;
  mgcl::iarray::Decoder *v49;
  void *v50;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t *p_shared_owners;
  unint64_t v53;

  v39 = a19;
  a19 = 0;
  if (v39)
  {
    mgcl::iarray::Decoder::~Decoder(v39);
    MEMORY[0x18D76437C]();
    v40 = __p;
    if (!__p)
    {
LABEL_3:
      v41 = (char *)a13;
      if (!a13)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else
  {
    v40 = __p;
    if (!__p)
      goto LABEL_3;
  }
  a17 = (uint64_t)v40;
  operator delete(v40);
  v41 = (char *)a13;
  if (!a13)
  {
LABEL_4:
    v42 = a24;
    a24 = 0;
    if (!v42)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  a14 = v41;
  operator delete(v41);
  v42 = a24;
  a24 = 0;
  if (!v42)
  {
LABEL_5:
    v43 = a31;
    a31 = 0;
    if (!v43)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  MEMORY[0x18D764364](v42, 0x1000C80BDFB0063);
  v43 = a31;
  a31 = 0;
  if (!v43)
  {
LABEL_6:
    v44 = a28;
    if (!a28)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  mgcl::iarray::Decoder::~Decoder(v43);
  MEMORY[0x18D76437C]();
  v44 = a28;
  if (!a28)
  {
LABEL_7:
    v45 = a25;
    if (!a25)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  a29 = (uint64_t)v44;
  operator delete(v44);
  v45 = a25;
  if (!a25)
  {
LABEL_8:
    v46 = a35;
    a35 = 0;
    if (!v46)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  a26 = v45;
  operator delete(v45);
  v46 = a35;
  a35 = 0;
  if (!v46)
  {
LABEL_9:
    v47 = *(mgcl::iarray::Decoder **)(v37 - 136);
    *(_QWORD *)(v37 - 136) = 0;
    if (!v47)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  MEMORY[0x18D764364](v46, 0x1000C8077774924);
  v47 = *(mgcl::iarray::Decoder **)(v37 - 136);
  *(_QWORD *)(v37 - 136) = 0;
  if (!v47)
  {
LABEL_10:
    v48 = *(void **)(v37 - 160);
    if (!v48)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  mgcl::iarray::Decoder::~Decoder(v47);
  MEMORY[0x18D76437C]();
  v48 = *(void **)(v37 - 160);
  if (!v48)
  {
LABEL_11:
    v49 = *(mgcl::iarray::Decoder **)(v37 - 104);
    *(_QWORD *)(v37 - 104) = 0;
    if (!v49)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  *(_QWORD *)(v37 - 152) = v48;
  operator delete(v48);
  v49 = *(mgcl::iarray::Decoder **)(v37 - 104);
  *(_QWORD *)(v37 - 104) = 0;
  if (!v49)
  {
LABEL_12:
    v50 = *(void **)(v37 - 128);
    if (!v50)
    {
LABEL_26:
      rep = std::chrono::steady_clock::now().__d_.__rep_;
      a13 = "ChapterMaterialRaster";
      a25 = &a13;
      *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(a12 + 1912, (uint64_t *)&a13, (uint64_t)&std::piecewise_construct, (uint64_t **)&a25)+ 4) = (double)((rep - v36) / 1000) * 0.001;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v53 = __ldaxr(p_shared_owners);
        while (__stlxr(v53 - 1, p_shared_owners));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      _Unwind_Resume(a1);
    }
LABEL_25:
    *(_QWORD *)(v37 - 120) = v50;
    operator delete(v50);
    goto LABEL_26;
  }
LABEL_24:
  mgcl::iarray::Decoder::~Decoder(v49);
  MEMORY[0x18D76437C]();
  v50 = *(void **)(v37 - 128);
  if (!v50)
    goto LABEL_26;
  goto LABEL_25;
}

uint64_t std::__function::__func<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(VMP4Chapter *)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3geo5codec20_readMaterialRastersEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN3geo5codec20_readMaterialRastersEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrIN"
                                "S0_10VectorTileEEEE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3geo5codec20_readMaterialRastersEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3geo5codec20_readMaterialRastersEP8VMP4TilePK16GeoCodecsTileKeyRKNSt3__110shared_ptrINS0_10VectorTileEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0,std::allocator<geo::codec::_readMaterialRasters(VMP4Tile *,GeoCodecsTileKey const*,std::shared_ptr<geo::codec::VectorTile> const&)::$_0>,void ()(VMP4Chapter *)>::target_type()
{
}

uint64_t std::__split_buffer<GeoCodecsTrafficSkeleton,geo::StdAllocator<GeoCodecsTrafficSkeleton,geo::codec::Allocator> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    while (1)
    {
      v4 = i - 40;
      *(_QWORD *)(a1 + 16) = i - 40;
      v5 = *(_QWORD *)(i - 32);
      if (v5)
        break;
      i -= 40;
      if (v4 == v3)
        goto LABEL_6;
    }
    *(_QWORD *)(i - 24) = v5;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(i - 8) + 40))(*(_QWORD *)(i - 8), v5, *(_QWORD *)(i - 16) - v5);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(***(_QWORD ***)(a1 + 32) + 40))(**(_QWORD **)(a1 + 32), *(_QWORD *)a1, *(_QWORD *)(a1 + 24) - *(_QWORD *)a1);
  return a1;
}

geo::codec::Allocator **std::vector<GeoCodecsRunningTrack,geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>>::vector(geo::codec::Allocator **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  geo::codec::Allocator *v6;
  geo::codec::Allocator *v7;
  geo::codec::Allocator *v8;
  geo::codec::Allocator *v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  a1[3] = (geo::codec::Allocator *)v4;
  if (a2)
  {
    v5 = a2 << 7;
    v6 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5, 8);
    v7 = v6;
    *a1 = v6;
    a1[1] = v6;
    v8 = (geo::codec::Allocator *)((char *)v6 + v5);
    a1[2] = (geo::codec::Allocator *)((char *)v6 + v5);
    do
    {
      if (v7)
      {
        *((_OWORD *)v7 + 6) = 0u;
        *((_OWORD *)v7 + 7) = 0u;
        *((_OWORD *)v7 + 4) = 0u;
        *((_OWORD *)v7 + 5) = 0u;
        *((_OWORD *)v7 + 2) = 0u;
        *((_OWORD *)v7 + 3) = 0u;
        *(_OWORD *)v7 = 0u;
        *((_OWORD *)v7 + 1) = 0u;
        v9 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v6);
        *((_QWORD *)v7 + 9) = v9;
        *((_QWORD *)v7 + 13) = 0;
        *((_QWORD *)v7 + 14) = 0;
        *((_QWORD *)v7 + 12) = 0;
        v6 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v9);
        *((_QWORD *)v7 + 15) = v6;
      }
      v7 = (geo::codec::Allocator *)((char *)v7 + 128);
      v5 -= 128;
    }
    while (v5);
    a1[1] = v8;
  }
  return a1;
}

void sub_189B0118C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  std::__exception_guard_exceptions<std::vector<GeoCodecsRunningTrack,geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::__exception_guard_exceptions<std::vector<GeoCodecsRunningTrack,geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  if (!*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    v3 = **a1;
    if (v3)
    {
      v4 = v2[1];
      v5 = **a1;
      v6 = *a1;
      if (v4 != v3)
      {
        do
        {
          v4 -= 128;
          geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>::destroy((uint64_t)(v2 + 3), v4);
        }
        while (v4 != v3);
        v6 = *a1;
        v5 = **a1;
      }
      v2[1] = v3;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[3] + 40))(v6[3], v5, v6[2] - v5);
    }
  }
  return a1;
}

uint64_t *std::vector<GeoCodecsRunningTrack,geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<GeoCodecsRunningTrack*,GeoCodecsRunningTrack*>(uint64_t *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v7 = result;
  v8 = result[2];
  v9 = *result;
  v10 = v8 - *result;
  if (a4 > v10 >> 7)
  {
    if (v9)
    {
      v11 = result[1];
      if (v11 == v9)
      {
        v12 = *result;
      }
      else
      {
        do
        {
          v11 -= 128;
          geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>::destroy((uint64_t)(v7 + 3), v11);
        }
        while (v11 != v9);
        v12 = *v7;
        v10 = v7[2] - *v7;
      }
      v7[1] = v9;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[3] + 40))(v7[3], v12, v10);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 57)
      goto LABEL_33;
    v22 = v8 >> 6;
    if (v8 >> 6 <= a4)
      v22 = a4;
    v23 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFF80;
    v24 = 0x1FFFFFFFFFFFFFFLL;
    if (!v23)
      v24 = v22;
    if (v24 >> 57)
LABEL_33:
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v25 = v24 << 7;
    v26 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v7[3] + 16))(v7[3], v24 << 7, 8);
    *v7 = v26;
    v7[1] = v26;
    v7[2] = v26 + v25;
    result = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>,GeoCodecsRunningTrack*,GeoCodecsRunningTrack*,GeoCodecsRunningTrack*>((uint64_t)(v7 + 3), a2, a3, v26);
LABEL_32:
    v7[1] = (uint64_t)result;
    return result;
  }
  v13 = result[1];
  v14 = (v13 - v9) >> 7;
  if (v14 < a4)
  {
    v15 = &a2[8 * v14];
    if (v13 != v9)
    {
      v16 = (uint64_t *)(v9 + 96);
      v17 = (char *)a2 + 56;
      do
      {
        v18 = v17 - 56;
        *((_OWORD *)v16 - 6) = *(_OWORD *)(v17 - 56);
        *(v16 - 10) = *((_QWORD *)v17 - 5);
        *(v16 - 9) = *((_QWORD *)v17 - 4);
        *(v16 - 8) = *((_QWORD *)v17 - 3);
        *(v16 - 7) = *((_QWORD *)v17 - 2);
        if (v16 - 12 != (uint64_t *)(v17 - 56))
        {
          std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<gm::Matrix<unsigned int,3,1>*,gm::Matrix<unsigned int,3,1>*>((uint64_t)(v16 - 6), *((char **)v17 - 1), *(char **)v17, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v17 - *((_QWORD *)v17 - 1)) >> 2));
          *((_OWORD *)v16 - 1) = *(_OWORD *)(v17 + 24);
          std::vector<GeoCodecsRunningTrackLane,geo::StdAllocator<GeoCodecsRunningTrackLane,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<GeoCodecsRunningTrackLane*,GeoCodecsRunningTrackLane*>(v16, *((_QWORD *)v17 + 5), *((_QWORD *)v17 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v17 + 6) - *((_QWORD *)v17 + 5)) >> 4));
        }
        v16 += 16;
        v17 += 128;
      }
      while (v18 + 128 != (char *)v15);
      v9 = v7[1];
    }
    result = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>,GeoCodecsRunningTrack*,GeoCodecsRunningTrack*,GeoCodecsRunningTrack*>((uint64_t)(v7 + 3), v15, a3, v9);
    goto LABEL_32;
  }
  if (a2 != a3)
  {
    v19 = (uint64_t *)(v9 + 96);
    v20 = (char *)a2 + 56;
    do
    {
      v21 = v20 - 56;
      *((_OWORD *)v19 - 6) = *(_OWORD *)(v20 - 56);
      *(v19 - 10) = *((_QWORD *)v20 - 5);
      *(v19 - 9) = *((_QWORD *)v20 - 4);
      *(v19 - 8) = *((_QWORD *)v20 - 3);
      *(v19 - 7) = *((_QWORD *)v20 - 2);
      if (v19 - 12 != (uint64_t *)(v20 - 56))
      {
        std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<gm::Matrix<unsigned int,3,1>*,gm::Matrix<unsigned int,3,1>*>((uint64_t)(v19 - 6), *((char **)v20 - 1), *(char **)v20, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v20 - *((_QWORD *)v20 - 1)) >> 2));
        *((_OWORD *)v19 - 1) = *(_OWORD *)(v20 + 24);
        result = std::vector<GeoCodecsRunningTrackLane,geo::StdAllocator<GeoCodecsRunningTrackLane,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<GeoCodecsRunningTrackLane*,GeoCodecsRunningTrackLane*>(v19, *((_QWORD *)v20 + 5), *((_QWORD *)v20 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v20 + 6) - *((_QWORD *)v20 + 5)) >> 4));
      }
      v19 += 16;
      v20 += 128;
      v9 += 128;
    }
    while (v21 + 128 != (char *)a3);
    v13 = v7[1];
  }
  for (;
        v13 != v9;
        result = (uint64_t *)geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>::destroy((uint64_t)(v7 + 3), v13))
  {
    v13 -= 128;
  }
  v7[1] = v9;
  return result;
}

void sub_189B01534(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_189B01540(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>,GeoCodecsRunningTrack*,GeoCodecsRunningTrack*,GeoCodecsRunningTrack*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v25;

  v4 = a4;
  v25 = a4;
  if (a2 != a3)
  {
    v5 = a3;
    v6 = (uint64_t *)a2;
    do
    {
      while (!v4)
      {
        v6 += 16;
        v4 = 128;
        v25 = 128;
        if (v6 == (uint64_t *)v5)
          return v4;
      }
      v7 = *(_OWORD *)v6;
      v8 = *((_OWORD *)v6 + 2);
      *(_OWORD *)(v4 + 16) = *((_OWORD *)v6 + 1);
      *(_OWORD *)(v4 + 32) = v8;
      *(_OWORD *)v4 = v7;
      std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::vector((uint64_t *)(v4 + 48), v6 + 6);
      v9 = *((_OWORD *)v6 + 5);
      *(_QWORD *)(v4 + 96) = 0;
      *(_OWORD *)(v4 + 80) = v9;
      *(_QWORD *)(v4 + 104) = 0;
      v10 = v6[15];
      *(_QWORD *)(v4 + 112) = 0;
      *(_QWORD *)(v4 + 120) = v10;
      v12 = v6[12];
      v11 = v6[13];
      if (v11 != v12)
      {
        if (0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 4) >= 0x555555555555556)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        v14 = 0;
        *(_QWORD *)(v4 + 96) = v13;
        *(_QWORD *)(v4 + 104) = v13;
        *(_QWORD *)(v4 + 112) = v13 + 16 * ((v11 - v12) >> 4);
        v15 = v13;
        do
        {
          if (v15)
          {
            *(_BYTE *)v15 = *(_BYTE *)v12;
            *(_QWORD *)(v15 + 8) = 0;
            *(_QWORD *)(v15 + 16) = 0;
            v16 = *(_QWORD *)(v12 + 32);
            *(_QWORD *)(v15 + 24) = 0;
            *(_QWORD *)(v15 + 32) = v16;
            v17 = *(_QWORD *)(v12 + 8);
            v18 = *(_QWORD *)(v12 + 16);
            if (v18 != v17)
            {
              if (0xAAAAAAAAAAAAAAABLL * ((v18 - v17) >> 2) >= 0x1555555555555556)
                std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
              v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
              v20 = 0;
              *(_QWORD *)(v15 + 8) = v19;
              *(_QWORD *)(v15 + 16) = v19;
              *(_QWORD *)(v15 + 24) = v19 + 4 * ((v18 - v17) >> 2);
              do
              {
                v21 = v19 + v20;
                if (v19 + v20)
                {
                  v22 = *(_QWORD *)(v17 + v20);
                  *(_DWORD *)(v21 + 8) = *(_DWORD *)(v17 + v20 + 8);
                  *(_QWORD *)v21 = v22;
                }
                v20 += 12;
              }
              while (v17 + v20 != v18);
              *(_QWORD *)(v15 + 16) = v19 + v20;
            }
            *(_QWORD *)(v15 + 40) = *(_QWORD *)(v12 + 40);
          }
          v12 += 48;
          v15 += 48;
          v14 += 48;
        }
        while (v12 != v11);
        *(_QWORD *)(v4 + 104) = v15;
        v5 = a3;
      }
      v6 += 16;
      v4 = v25 + 128;
      v25 += 128;
    }
    while (v6 != (uint64_t *)v5);
  }
  return v4;
}

void sub_189B01780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::__exception_guard_exceptions<std::vector<GeoCodecsRunningTrackLane,geo::StdAllocator<GeoCodecsRunningTrackLane,geo::codec::Allocator>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100]((uint64_t **)va1);
  v7 = *a4;
  if (*a4)
  {
    *(_QWORD *)(v5 + 56) = v7;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 72) + 40))(*(_QWORD *)(v5 + 72), v7, *(_QWORD *)(v5 + 64) - v7);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>,GeoCodecsRunningTrack*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>,GeoCodecsRunningTrack*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(uint64_t **)(a1 + 8);
    v2 = *(uint64_t **)(a1 + 16);
    v4 = *v2;
    v5 = *v3;
    if (*v2 != *v3)
    {
      v6 = *(_QWORD *)a1;
      do
      {
        v4 -= 128;
        geo::StdAllocator<GeoCodecsRunningTrack,geo::codec::Allocator>::destroy(v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

uint64_t *std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::vector(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = 0;
  a1[1] = 0;
  v3 = a2[3];
  a1[2] = 0;
  a1[3] = v3;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v6)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 2);
    if (v7 >= 0x1555555555555556)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    v9 = 0;
    *a1 = v8;
    a1[1] = v8;
    a1[2] = v8 + 12 * v7;
    do
    {
      v10 = v8 + v9;
      if (v8 + v9)
      {
        v11 = *(_QWORD *)(v4 + v9);
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v4 + v9 + 8);
        *(_QWORD *)v10 = v11;
      }
      v9 += 12;
    }
    while (v4 + v9 != v5);
    a1[1] = v8 + v9;
  }
  return a1;
}

void sub_189B0197C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__exception_guard_exceptions<std::vector<GeoCodecsRunningTrackLane,geo::StdAllocator<GeoCodecsRunningTrackLane,geo::codec::Allocator>>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  if (!*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    v3 = **a1;
    if (v3)
    {
      v4 = v2[1];
      v5 = **a1;
      v6 = *a1;
      if (v4 != v3)
      {
        do
        {
          v7 = *(_QWORD *)(v4 - 40);
          if (v7)
          {
            *(_QWORD *)(v4 - 32) = v7;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 - 16) + 40))(*(_QWORD *)(v4 - 16), v7, *(_QWORD *)(v4 - 24) - v7);
          }
          v4 -= 48;
        }
        while (v4 != v3);
        v6 = *a1;
        v5 = **a1;
      }
      v2[1] = v3;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[3] + 40))(v6[3], v5, v6[2] - v5);
    }
  }
  return a1;
}

uint64_t std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<gm::Matrix<unsigned int,3,1>*,gm::Matrix<unsigned int,3,1>*>(uint64_t a1, char *a2, char *a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 2) < a4)
  {
    if (v9)
    {
      *(_QWORD *)(a1 + 8) = v9;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a4 > 0x1555555555555555)
      goto LABEL_51;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v11;
    if (v12 > 0x1555555555555555)
LABEL_51:
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v13 = 12 * v12;
    result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), 12 * v12, 4);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = result + v13;
    v15 = result;
    if (a2 != a3)
    {
      v15 = result;
      do
      {
        if (v15)
        {
          v16 = *(_QWORD *)a2;
          *(_DWORD *)(v15 + 8) = *((_DWORD *)a2 + 2);
          *(_QWORD *)v15 = v16;
        }
        a2 += 12;
        v15 += 12;
      }
      while (a2 != a3);
    }
    *(_QWORD *)(a1 + 8) = v15;
    return result;
  }
  v17 = (uint64_t *)(a1 + 8);
  result = *(_QWORD *)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((result - (uint64_t)v9) >> 2) >= a4)
  {
    if (a2 == a3)
    {
      v39 = v9;
    }
    else
    {
      v33 = a3 - a2 - 12;
      if (v33 < 0x84
        || ((v34 = v33 / 0xC, v35 = 12 * v34 + 12, v9 < &a2[v35]) ? (v36 = &v9[v35] > a2) : (v36 = 0), v36))
      {
        v39 = v9;
        v40 = a2;
      }
      else
      {
        v37 = v34 + 1;
        v38 = (v34 + 1) & 0x3FFFFFFFFFFFFFF8;
        v39 = &v9[12 * v38];
        v40 = &a2[12 * v38];
        v41 = v38;
        v42 = v9;
        do
        {
          v43 = *((_OWORD *)a2 + 1);
          v45 = *((_OWORD *)a2 + 4);
          v44 = *((_OWORD *)a2 + 5);
          v46 = *((_OWORD *)a2 + 2);
          v47 = *((_OWORD *)a2 + 3);
          *(_OWORD *)v42 = *(_OWORD *)a2;
          *((_OWORD *)v42 + 1) = v43;
          *((_OWORD *)v42 + 2) = v46;
          *((_OWORD *)v42 + 3) = v47;
          a2 += 96;
          *((_OWORD *)v42 + 4) = v45;
          *((_OWORD *)v42 + 5) = v44;
          v42 += 96;
          v41 -= 8;
        }
        while (v41);
        if (v37 == v38)
          goto LABEL_50;
      }
      do
      {
        *(_DWORD *)v39 = *(_DWORD *)v40;
        *((_DWORD *)v39 + 1) = *((_DWORD *)v40 + 1);
        *((_DWORD *)v39 + 2) = *((_DWORD *)v40 + 2);
        v39 += 12;
        v40 += 12;
      }
      while (v40 != a3);
    }
LABEL_50:
    *v17 = (uint64_t)v39;
    return result;
  }
  v18 = &a2[4 * ((result - (uint64_t)v9) >> 2)];
  if ((char *)result != v9)
  {
    v19 = result - (_QWORD)v9 - 12;
    if (v19 < 0x84 || ((v20 = v19 / 0xC, v21 = 12 * v20 + 12, v9 < &a2[v21]) ? (v22 = &v9[v21] > a2) : (v22 = 0), v22))
    {
      v25 = v9;
      v26 = a2;
    }
    else
    {
      v23 = v20 + 1;
      v24 = (v20 + 1) & 0x3FFFFFFFFFFFFFF8;
      v25 = &v9[12 * v24];
      v26 = &a2[12 * v24];
      v27 = v24;
      do
      {
        v28 = *((_OWORD *)a2 + 1);
        v30 = *((_OWORD *)a2 + 4);
        v29 = *((_OWORD *)a2 + 5);
        v31 = *((_OWORD *)a2 + 2);
        v32 = *((_OWORD *)a2 + 3);
        *(_OWORD *)v9 = *(_OWORD *)a2;
        *((_OWORD *)v9 + 1) = v28;
        *((_OWORD *)v9 + 2) = v31;
        *((_OWORD *)v9 + 3) = v32;
        a2 += 96;
        *((_OWORD *)v9 + 4) = v30;
        *((_OWORD *)v9 + 5) = v29;
        v9 += 96;
        v27 -= 8;
      }
      while (v27);
      if (v23 == v24)
        goto LABEL_40;
    }
    do
    {
      *(_DWORD *)v25 = *(_DWORD *)v26;
      *((_DWORD *)v25 + 1) = *((_DWORD *)v26 + 1);
      *((_DWORD *)v25 + 2) = *((_DWORD *)v26 + 2);
      v26 += 12;
      v25 += 12;
    }
    while (v26 != v18);
  }
LABEL_40:
  v48 = result;
  if (v18 != a3)
  {
    v49 = result;
    do
    {
      if (v49)
      {
        v50 = *(_QWORD *)v18;
        *(_DWORD *)(v49 + 8) = *((_DWORD *)v18 + 2);
        *(_QWORD *)v49 = v50;
      }
      v18 += 12;
      v49 += 12;
      v48 += 12;
    }
    while (v18 != a3);
  }
  *v17 = v48;
  return result;
}

uint64_t *std::vector<GeoCodecsRunningTrackLane,geo::StdAllocator<GeoCodecsRunningTrackLane,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<GeoCodecsRunningTrackLane*,GeoCodecsRunningTrackLane*>(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v7 = result;
  v8 = result[2];
  v9 = *result;
  v10 = v8 - *result;
  if (0xAAAAAAAAAAAAAAABLL * (v10 >> 4) >= a4)
  {
    v14 = result[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v14 - v9) >> 4) >= a4)
    {
      if (a2 != a3)
      {
        v19 = v9 + 8;
        v20 = a2 + 8;
        do
        {
          v21 = v20 - 8;
          *(_BYTE *)(v19 - 8) = *(_BYTE *)(v20 - 8);
          if (v19 != v20)
            result = (uint64_t *)std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<gm::Matrix<unsigned int,3,1>*,gm::Matrix<unsigned int,3,1>*>(v19, *(char **)v20, *(char **)(v20 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v20 + 8) - *(_QWORD *)v20) >> 2));
          *(_QWORD *)(v19 + 32) = *(_QWORD *)(v20 + 32);
          v19 += 48;
          v9 += 48;
          v20 += 48;
        }
        while (v21 + 48 != a3);
        v14 = v7[1];
      }
      while (v14 != v9)
      {
        v30 = *(_QWORD *)(v14 - 40);
        if (v30)
        {
          *(_QWORD *)(v14 - 32) = v30;
          result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 - 16) + 40))(*(_QWORD *)(v14 - 16), v30, *(_QWORD *)(v14 - 24) - v30);
        }
        v14 -= 48;
      }
      v7[1] = v9;
    }
    else
    {
      v15 = a2 + 16 * ((v14 - v9) >> 4);
      if (v14 != v9)
      {
        v16 = v9 + 8;
        v17 = a2 + 8;
        do
        {
          v18 = v17 - 8;
          *(_BYTE *)(v16 - 8) = *(_BYTE *)(v17 - 8);
          if (v16 != v17)
            result = (uint64_t *)std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<gm::Matrix<unsigned int,3,1>*,gm::Matrix<unsigned int,3,1>*>(v16, *(char **)v17, *(char **)(v17 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 2));
          *(_QWORD *)(v16 + 32) = *(_QWORD *)(v17 + 32);
          v16 += 48;
          v17 += 48;
        }
        while (v18 + 48 != v15);
        v9 = v7[1];
      }
      v28 = v9;
      if (v15 != a3)
      {
        v29 = 0;
        do
        {
          if (v9 + v29)
          {
            *(_BYTE *)(v9 + v29) = *(_BYTE *)(v15 + v29);
            result = std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::vector((uint64_t *)(v9 + v29 + 8), (uint64_t *)(v15 + v29 + 8));
            *(_QWORD *)(v9 + v29 + 40) = *(_QWORD *)(v15 + v29 + 40);
          }
          v29 += 48;
        }
        while (v15 + v29 != a3);
        v28 = v9 + v29;
      }
      v7[1] = v28;
    }
  }
  else
  {
    if (v9)
    {
      v11 = result[1];
      if (v11 == v9)
      {
        v12 = *result;
      }
      else
      {
        do
        {
          v13 = *(_QWORD *)(v11 - 40);
          if (v13)
          {
            *(_QWORD *)(v11 - 32) = v13;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 - 16) + 40))(*(_QWORD *)(v11 - 16), v13, *(_QWORD *)(v11 - 24) - v13);
          }
          v11 -= 48;
        }
        while (v11 != v9);
        v12 = *v7;
        v10 = v7[2] - *v7;
      }
      v7[1] = v9;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[3] + 40))(v7[3], v12, v10);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x555555555555555)
      goto LABEL_49;
    v22 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    v23 = 2 * v22;
    if (2 * v22 <= a4)
      v23 = a4;
    v24 = v22 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v23;
    if (v24 > 0x555555555555555)
LABEL_49:
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v25 = 6 * v24;
    result = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v7[3] + 16))(v7[3], 48 * v24, 8);
    v26 = result;
    *v7 = (uint64_t)result;
    v7[1] = (uint64_t)result;
    v7[2] = (uint64_t)&result[v25];
    if (a2 != a3)
    {
      v27 = 0;
      do
      {
        if (&v26[v27])
        {
          LOBYTE(v26[v27]) = *(_BYTE *)(a2 + v27 * 8);
          result = std::vector<gm::Matrix<unsigned int,3,1>,geo::StdAllocator<gm::Matrix<unsigned int,3,1>,geo::codec::Allocator>>::vector(&v26[v27 + 1], (uint64_t *)(a2 + v27 * 8 + 8));
          v26[v27 + 5] = *(_QWORD *)(a2 + v27 * 8 + 40);
        }
        v27 += 6;
      }
      while (a2 + v27 * 8 != a3);
      v26 = (uint64_t *)((char *)v26 + v27 * 8);
    }
    v7[1] = (uint64_t)v26;
  }
  return result;
}

void sub_189B02190(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  for (; v3; v3 -= 48)
  {
    v5 = v2 + v3;
    v6 = *(_QWORD *)(v2 + v3 - 40);
    if (v6)
    {
      *(_QWORD *)(v5 - 32) = v6;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 - 16) + 40))(*(_QWORD *)(v5 - 16), v6, *(_QWORD *)(v5 - 24) - v6);
    }
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,geo::small_vector<GeoCodecsMetadata,2ul>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,geo::small_vector<GeoCodecsMetadata,2ul>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,geo::small_vector<GeoCodecsMetadata,2ul>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,geo::small_vector<GeoCodecsMetadata,2ul>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  size_t v26;
  size_t v27;
  size_t v28;
  _QWORD *i;
  size_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  v13 = a1 + 2;
  v10 = operator new(0x50uLL);
  *v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = v10 + 7;
  v10[4] = v10 + 7;
  v10[5] = v10 + 7;
  v10[6] = 2;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    v16 = *a1;
    v17 = *(_QWORD **)(*a1 + 8 * v3);
    if (!v17)
      goto LABEL_84;
LABEL_72:
    *v10 = *v17;
LABEL_90:
    *v17 = v10;
    goto LABEL_91;
  }
  v18 = 1;
  if (v7 >= 3)
    v18 = (v7 & (v7 - 1)) != 0;
  v19 = v18 | (2 * v7);
  v20 = vcvtps_u32_f32(v14 / v15);
  if (v19 <= v20)
    prime = v20;
  else
    prime = v19;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
    v7 = a1[1];
  }
  if (prime > v7)
  {
LABEL_36:
    if (prime >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v22 = operator new(8 * prime);
    v23 = (void *)*a1;
    *a1 = (uint64_t)v22;
    if (v23)
      operator delete(v23);
    v24 = 0;
    a1[1] = prime;
    do
      *(_QWORD *)(*a1 + 8 * v24++) = 0;
    while (prime != v24);
    v25 = (_QWORD *)*v13;
    if (!*v13)
      goto LABEL_68;
    v26 = v25[1];
    v27 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v28 = v26 & v27;
      *(_QWORD *)(*a1 + 8 * v28) = v13;
      for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
      {
        v30 = i[1] & v27;
        if (v30 == v28)
        {
          v25 = i;
        }
        else if (*(_QWORD *)(*a1 + 8 * v30))
        {
          *v25 = *i;
          v31 = 8 * v30;
          *i = **(_QWORD **)(*a1 + v31);
          **(_QWORD **)(*a1 + v31) = i;
        }
        else
        {
          *(_QWORD *)(*a1 + 8 * v30) = v25;
          v25 = i;
          v28 = v30;
        }
      }
      goto LABEL_68;
    }
    if (v26 >= prime)
      v26 %= prime;
    *(_QWORD *)(*a1 + 8 * v26) = v13;
    v35 = (_QWORD *)*v25;
    if (!*v25)
    {
LABEL_68:
      v7 = prime;
      v38 = prime - 1;
      if ((prime & (prime - 1)) != 0)
        goto LABEL_69;
LABEL_83:
      v5 &= v38;
      v16 = *a1;
      v17 = *(_QWORD **)(*a1 + 8 * v5);
      if (!v17)
        goto LABEL_84;
      goto LABEL_72;
    }
    while (1)
    {
      v37 = v35[1];
      if (v37 >= prime)
        v37 %= prime;
      if (v37 == v26)
        goto LABEL_62;
      if (*(_QWORD *)(*a1 + 8 * v37))
      {
        *v25 = *v35;
        v36 = 8 * v37;
        *v35 = **(_QWORD **)(*a1 + v36);
        **(_QWORD **)(*a1 + v36) = v35;
        v35 = v25;
LABEL_62:
        v25 = v35;
        v35 = (_QWORD *)*v35;
        if (!v35)
          goto LABEL_68;
      }
      else
      {
        *(_QWORD *)(*a1 + 8 * v37) = v25;
        v25 = v35;
        v35 = (_QWORD *)*v35;
        v26 = v37;
        if (!v35)
          goto LABEL_68;
      }
    }
  }
  if (prime < v7)
  {
    v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
    {
      v32 = std::__next_prime(v32);
    }
    else
    {
      v34 = 1 << -(char)__clz(v32 - 1);
      if (v32 >= 2)
        v32 = v34;
    }
    if (prime <= v32)
      prime = v32;
    if (prime < v7)
    {
      if (!prime)
      {
        v39 = (void *)*a1;
        *a1 = 0;
        if (v39)
          operator delete(v39);
        v7 = 0;
        a1[1] = 0;
        v38 = -1;
        goto LABEL_83;
      }
      goto LABEL_36;
    }
    v7 = a1[1];
  }
  v38 = v7 - 1;
  if ((v7 & (v7 - 1)) == 0)
    goto LABEL_83;
LABEL_69:
  if (v7 <= v5)
    v5 %= v7;
  v16 = *a1;
  v17 = *(_QWORD **)(*a1 + 8 * v5);
  if (v17)
    goto LABEL_72;
LABEL_84:
  *v10 = *v13;
  *v13 = v10;
  *(_QWORD *)(v16 + 8 * v5) = v13;
  if (*v10)
  {
    v40 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v40 >= v7)
        v40 %= v7;
    }
    else
    {
      v40 &= v7 - 1;
    }
    v17 = (_QWORD *)(*a1 + 8 * v40);
    goto LABEL_90;
  }
LABEL_91:
  ++a1[3];
  return v10;
}

