id getNRPairedDeviceRegistryClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getNRPairedDeviceRegistryClass_softClass;
  v7 = getNRPairedDeviceRegistryClass_softClass;
  if (!getNRPairedDeviceRegistryClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getNRPairedDeviceRegistryClass_block_invoke;
    v3[3] = &unk_1E1C03348;
    v3[4] = &v4;
    __getNRPairedDeviceRegistryClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1885AA980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t FeatureStyleAttributes::compareStylePairs(FeatureStyleAttributes *this, _DWORD *a2, const void *a3)
{
  if (*(_DWORD *)this < *a2)
    return 0xFFFFFFFFLL;
  else
    return *(_DWORD *)this > *a2;
}

uint64_t geo::codec::findLabelLanguageLocal(geo::codec *this, _QWORD *a2, const void *a3)
{
  if (*(_QWORD *)this >= *a2)
    return *(_QWORD *)this >= a2[1];
  else
    return 0xFFFFFFFFLL;
}

void sub_1885AABA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void CAARiseTransitSet2::CalculateMoon(CAAMoon *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>)
{
  int v8;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  CAAMoon *v18;
  CAAMoon *v19;
  double v20;
  CAACoordinateTransformation *v21;
  double v22;
  CAAParallax *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  CAASidereal *v28;
  double v29;
  CAACoordinateTransformation *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v42;
  double v43[2];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (a3 < a4)
  {
    v8 = (int)a1;
    v10 = -1.0;
    v11 = 0.0;
    v12 = -90.0;
    v13 = -90.0;
    v36 = a5 / 15.0;
    do
    {
      v42 = v11;
      v11 = a3;
      v14 = 0.0;
      v15 = 0.0;
      v16 = 0.0;
      if (!v8)
      {
        CAAMoon::EclipticLongitude(a1, a3);
        v14 = v17;
        v15 = CAAMoon::EclipticLatitude(v18, v11);
        v16 = CAAMoon::RadiusVector(v19, v11);
      }
      v20 = CAANutation::TrueObliquityOfEcliptic(a1, v11);
      v22 = CAACoordinateTransformation::Ecliptic2Equatorial(v21, v14, v15, v20);
      v25 = CAAParallax::Equatorial2Topocentric(v23, v22, v24, v16 / 149597871.0, a5, a6, 0.0, v11);
      v27 = v26;
      CAASidereal::ApparentGreenwichSiderealTime(v28, v11);
      v31 = CAACoordinateTransformation::Equatorial2Horizontal(v30, v29 - v36 - v25, v27, a6);
      v33 = v32;
      v43[0] = v31;
      v43[1] = v32;
      v34 = a7 + asin(1737.4 / v16) * -57.2957795;
      v35 = v33 - v34;
      CAARiseTransitSet2::AddEvents((char **)a2, v43, 1, v12, v33 - v34, v13, v34, v42, a8, v10, 0.0, 0.0);
      a3 = v11 + a8;
      v12 = v35;
      v13 = v33;
      v10 = v31;
    }
    while (v11 + a8 < a4);
  }
}

void sub_1885AC058(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double CAACoordinateTransformation::Ecliptic2Equatorial(CAACoordinateTransformation *this, double a2, double a3, double a4)
{
  double v4;
  double v5;
  __double2 v6;
  __double2 v7;
  long double v8;
  double v9;
  double v10;
  __double2 v11;

  v4 = a2 * 0.0174532925;
  v5 = a3 * 0.0174532925;
  v6 = __sincos_stret(a4 * 0.0174532925);
  v7 = __sincos_stret(v4);
  v8 = tan(v5);
  v9 = atan2(v7.__sinval * v6.__cosval - v8 * v6.__sinval, v7.__cosval) * 3.81971863;
  if (v9 >= 0.0)
    v10 = v9;
  else
    v10 = v9 + 24.0;
  v11 = __sincos_stret(v5);
  asin(v7.__sinval * (v11.__cosval * v6.__sinval) + v11.__sinval * v6.__cosval);
  return v10;
}

double CAACoordinateTransformation::Equatorial2Horizontal(CAACoordinateTransformation *this, double a2, double a3, double a4)
{
  double v4;
  double v5;
  __double2 v6;
  __double2 v7;
  long double v8;
  double v9;
  double v10;
  __double2 v11;

  v4 = a2 * 0.261799388;
  v5 = a3 * 0.0174532925;
  v6 = __sincos_stret(a4 * 0.0174532925);
  v7 = __sincos_stret(v4);
  v8 = tan(v5);
  v9 = atan2(v7.__sinval, v7.__cosval * v6.__sinval - v8 * v6.__cosval) * 57.2957795;
  if (v9 >= 0.0)
    v10 = v9;
  else
    v10 = v9 + 360.0;
  v11 = __sincos_stret(v5);
  asin(v7.__cosval * (v11.__cosval * v6.__cosval) + v6.__sinval * v11.__sinval);
  return v10;
}

double CAANutation::TrueObliquityOfEcliptic(CAANutation *this, double a2)
{
  double v2;
  double v3;
  double v4;
  double v5;

  v2 = (a2 + -2451545.0) / 3652500.0;
  v3 = v2 * (v2 * v2);
  v4 = v2 * (v2 * v3);
  v5 = v2 * (v2 * v4);
  return v2 * -1.30025833
       + 23.4392911
       + v2 * v2 * -0.000430555556
       + v3 * 0.555347222
       + v2 * v3 * -0.0142722222
       + v4 * -0.0693527778
       + v2 * v4 * -0.0108472222
       + v5 * 0.00197777778
       + v2 * v5 * 0.00774166667
       + v2 * (v2 * v5) * 0.00160833333
       + v2 * (v2 * (v2 * v5)) * 0.000680555556
       + CAANutation::NutationInObliquity(this, a2) / 3600.0
       + 0.0;
}

double CAAMoon::RadiusVector(CAAMoon *this, double a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  unint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  int v17;
  double v18;

  v2 = (a2 + -2451545.0) / 36525.0;
  v3 = v2 * v2;
  v4 = v2 * (v2 * v2);
  v5 = fmod(v2 * 445267.111 + 297.850192 + v2 * v2 * -0.0018819 + v4 / 545868.0 + v2 * v4 / -113065000.0, 360.0);
  if (v5 < 0.0)
    v5 = v5 + 360.0;
  v6 = v5 * 0.0174532925;
  v7 = fmod(v2 * 35999.0503 + 357.529109 + v3 * -0.0001536 + v4 / 24490000.0, 360.0);
  if (v7 < 0.0)
    v7 = v7 + 360.0;
  v8 = v7 * 0.0174532925;
  v9 = fmod(v2 * 477198.868 + 134.963396 + v3 * 0.0087414 + v4 / 69699.0 + v2 * v4 / -14712000.0, 360.0);
  if (v9 < 0.0)
    v9 = v9 + 360.0;
  v10 = v9 * 0.0174532925;
  v11 = fmod(v2 * 483202.018 + 93.272095 + v3 * -0.0036539 + v4 / -3526000.0 + v2 * v4 / 863310000.0, 360.0);
  v12 = 0;
  if (v11 < 0.0)
    v11 = v11 + 360.0;
  v13 = v11 * 0.0174532925;
  v14 = v2 * -0.002516 + 1.0 + v3 * -0.0000074;
  v15 = 0.0;
  do
  {
    v16 = *(double *)&g_MoonCoefficients2[v12 / 8 + 1];
    v17 = *(_DWORD *)((char *)&g_MoonCoefficients1 + v12 + 4);
    v18 = v16
        * cos(v8 * (double)v17+ (double)*(int *)((char *)&g_MoonCoefficients1 + v12) * v6+ (double)*(int *)((char *)&g_MoonCoefficients1 + v12 + 8) * v10+ (double)*(int *)((char *)&g_MoonCoefficients1 + v12 + 12) * v13);
    switch(v17)
    {
      case -2:
      case 2:
        v18 = v14 * v14 * v18;
        break;
      case -1:
      case 1:
        v18 = v14 * v18;
        break;
      default:
        break;
    }
    v15 = v15 + v18;
    v12 += 16;
  }
  while (v12 != 960);
  return v15 / 1000.0 + 385000.56;
}

double CAAParallax::Equatorial2Topocentric(CAAParallax *this, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v11;
  long double v12;
  double v13;
  __double2 v14;
  double v15;
  __double2 v16;
  CAASidereal *v17;
  double v18;
  double v19;
  __double2 v20;
  long double v21;
  double v22;
  __double2 v23;
  double v24;
  double v25;
  long double v26;
  double v27;
  double v28;
  long double v29;

  v11 = a6 * 0.0174532925;
  v12 = tan(a6 * 0.0174532925);
  v13 = atan(v12 * 0.99664719);
  v14 = __sincos_stret(v13);
  v15 = a7 / 6378140.0;
  v16 = __sincos_stret(v11);
  CAASidereal::ApparentGreenwichSiderealTime(v17, a8);
  v19 = v18;
  v20 = __sincos_stret(a3 * 0.0174532925);
  v21 = asin(0.0000426345151 / a4);
  v22 = sin(v21);
  v23 = __sincos_stret((v19 + a5 / -15.0 - a2) * 0.261799388);
  v24 = -((v14.__cosval + v15 * v16.__cosval) * v22);
  v25 = v20.__cosval + v24 * v23.__cosval;
  v26 = atan2(v24 * v23.__sinval, v25);
  v27 = fmod(v26 * 3.81971863 + a2, 24.0);
  if (v27 >= 0.0)
    v28 = v27;
  else
    v28 = v27 + 24.0;
  v29 = cos(v26);
  atan2((v20.__sinval - (v15 * v16.__sinval + v14.__sinval * 0.99664719) * v22) * v29, v25);
  return v28;
}

void CAASidereal::ApparentGreenwichSiderealTime(CAASidereal *this, double a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  CAANutation *v8;
  double v9;
  CAASidereal *v10;
  double v11;
  double v12;
  long double v13;

  v3 = (a2 + -2451545.0) / 3652500.0;
  v4 = v3 * (v3 * v3);
  v5 = v3 * (v3 * v4);
  v6 = v3 * (v3 * v5);
  v7 = v3 * -1.30025833
     + 23.4392911
     + v3 * v3 * -0.000430555556
     + v4 * 0.555347222
     + v3 * v4 * -0.0142722222
     + v5 * -0.0693527778
     + v3 * v5 * -0.0108472222
     + v6 * 0.00197777778
     + v3 * v6 * 0.00774166667
     + v3 * (v3 * v6) * 0.00160833333
     + v3 * (v3 * (v3 * v6)) * 0.000680555556
     + CAANutation::NutationInObliquity(this, a2) / 3600.0;
  v9 = CAANutation::NutationInLongitude(v8, a2);
  CAASidereal::MeanGreenwichSiderealTime(v10, a2);
  v12 = v11;
  v13 = cos(v7 * 0.0174532925);
  fmod(v12 + v9 * v13 / 54000.0, 24.0);
}

void CAASidereal::MeanGreenwichSiderealTime(CAASidereal *this, double a2)
{
  double v2;
  double v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  v7 = 0;
  v8 = 0;
  v5 = 0.0;
  v6 = 0;
  v3 = a2;
  LOBYTE(v4) = a2 >= 2299160.5;
  CAADate::Get((CAADate *)&v3, &v10, &v9, &v8, &v7, &v6, &v5);
  v2 = CAADate::DateToJD((CAADate *)v10, v9, v4, (double)v8);
  fmod(((v2 + -2451545.0) / 36525.0 * 36000.7701+ 100.460618+ (v2 + -2451545.0) / 36525.0 * ((v2 + -2451545.0) / 36525.0) * 0.000387933+ (v2 + -2451545.0) / 36525.0 * ((v2 + -2451545.0) / 36525.0 * ((v2 + -2451545.0) / 36525.0)) / -38710000.0+ ((double)v6 * 0.25 + (double)v7 * 15.0 + v5 * 0.00416666667) * 1.00273791)/ 15.0, 24.0);
}

double CAADate::Get(CAADate *this, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, double *a7)
{
  long double v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double result;
  double __y;

  v14 = *(double *)this + 0.5;
  __y = 0.0;
  v15 = modf(v14, &__y);
  v16 = (uint64_t)__y;
  if (*((_BYTE *)this + 8))
  {
    v17 = ((double)v16 + -1867216.25) / 36524.25;
    if (v17 < 0.0)
      v17 = v17 + -1.0;
    v18 = (uint64_t)v17;
    v19 = v16 + (uint64_t)v17;
    v20 = (double)(uint64_t)v17;
    if (v18 < 0)
      v20 = v20 + -1.0;
    v21 = (double)(uint64_t)v20 * 0.25;
    if (v21 < 0.0)
      v21 = v21 + -1.0;
    v16 = v19 - (uint64_t)v21 + 1;
  }
  v22 = (double)(v16 + 1524);
  v23 = (v22 + -122.1) / 365.25;
  if (v23 < 0.0)
    v23 = v23 + -1.0;
  v24 = (uint64_t)v23;
  v25 = (double)(uint64_t)v23 * 365.25;
  if (v25 < 0.0)
    v25 = v25 + -1.0;
  v26 = v22 - (double)(uint64_t)v25;
  v27 = v26 / 30.6001;
  if (v26 / 30.6001 < 0.0)
    v27 = v26 / 30.6001 + -1.0;
  v28 = (uint64_t)v27;
  v29 = (double)(uint64_t)v27 * 30.6001;
  if (v29 < 0.0)
    v29 = v29 + -1.0;
  v30 = v15 + v26 - (double)(uint64_t)v29;
  *a4 = (uint64_t)v30;
  v31 = -13;
  if (v28 < 14)
    v31 = -1;
  v32 = v31 + v28;
  *a3 = v32;
  v33 = v32 <= 2;
  v34 = -4716;
  if (v33)
    v34 = -4715;
  *a2 = v34 + v24;
  v35 = modf(v30, &__y);
  v36 = v35 * 24.0;
  if (v35 * 24.0 < 0.0)
    v36 = v35 * 24.0 + -1.0;
  *a5 = (uint64_t)v36;
  v37 = (v35 - (double)(uint64_t)v36 / 24.0) * 1440.0;
  if (v37 < 0.0)
    v37 = v37 + -1.0;
  *a6 = (uint64_t)v37;
  result = (v35 - (double)*a5 / 24.0 - (double)(uint64_t)v37 / 1440.0) * 86400.0;
  *a7 = result;
  return result;
}

double CAADate::DateToJD(CAADate *this, uint64_t a2, int a3, double a4)
{
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  float64x2_t v10;
  float64x2_t v11;

  v4 = (double)((uint64_t)this - (a2 < 3));
  v5 = 0.0;
  if (a3)
  {
    v6 = v4 / 100.0;
    if (v4 / 100.0 < 0.0)
      v6 = v4 / 100.0 + -1.0;
    v7 = (uint64_t)v6;
    v8 = (double)(uint64_t)v6 * 0.25;
    if (v8 < 0.0)
      v8 = v8 + -1.0;
    v5 = (double)((uint64_t)v8 - v7 + 2);
  }
  v9 = a2 + 12;
  if (a2 >= 3)
    v9 = a2;
  v10.f64[0] = (double)v9;
  v10.f64[1] = (double)((uint64_t)this - (a2 < 3));
  v11 = vmulq_f64(vaddq_f64(v10, (float64x2_t)xmmword_189CB9EA0), (float64x2_t)xmmword_189CB9EB0);
  __asm { FMOV            V4.2D, #-1.0 }
  return vaddvq_f64(vcvtq_f64_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcgezq_f64(v11), (int8x16_t)v11, (int8x16_t)vaddq_f64(v11, _Q4)))))+ a4+ v5+ -1524.5;
}

long double CAAMoon::EclipticLatitude(CAAMoon *this, double a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  int *v16;
  double v17;
  int v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  long double v26;
  long double v27;
  long double v28;
  long double v29;
  long double v30;
  double v32;

  v2 = (a2 + -2451545.0) / 36525.0;
  v3 = v2 * v2;
  v4 = v2 * (v2 * v2);
  v32 = v2 * v4;
  v5 = fmod(v2 * 445267.111 + 297.850192 + v2 * v2 * -0.0018819 + v4 / 545868.0 + v2 * v4 / -113065000.0, 360.0);
  if (v5 < 0.0)
    v5 = v5 + 360.0;
  v6 = v5 * 0.0174532925;
  v7 = fmod(v2 * 35999.0503 + 357.529109 + v3 * -0.0001536 + v4 / 24490000.0, 360.0);
  if (v7 < 0.0)
    v7 = v7 + 360.0;
  v8 = v7 * 0.0174532925;
  v9 = fmod(v2 * 477198.868 + 134.963396 + v3 * 0.0087414 + v4 / 69699.0 + v2 * v4 / -14712000.0, 360.0);
  if (v9 < 0.0)
    v9 = v9 + 360.0;
  v10 = v9 * 0.0174532925;
  v11 = fmod(v2 * 483202.018 + 93.272095 + v3 * -0.0036539 + v4 / -3526000.0 + v32 / 863310000.0, 360.0);
  v12 = 0;
  if (v11 < 0.0)
    v11 = v11 + 360.0;
  v13 = v11 * 0.0174532925;
  v14 = v2 * -0.002516 + 1.0 + v3 * -0.0000074;
  v15 = 0.0;
  v16 = &dword_189CB6608;
  do
  {
    v17 = *(double *)&g_MoonCoefficients4[v12];
    v18 = *(v16 - 1);
    v19 = v17 * sin(v8 * (double)v18 + (double)*(v16 - 2) * v6 + (double)*v16 * v10 + (double)v16[1] * v13);
    switch(v18)
    {
      case -2:
      case 2:
        v19 = v14 * v14 * v19;
        break;
      case -1:
      case 1:
        v19 = v14 * v19;
        break;
      default:
        break;
    }
    v16 += 4;
    v15 = v15 + v19;
    ++v12;
  }
  while (v12 != 60);
  v20 = fmod(v2 * 481266.484 + 313.45, 360.0);
  if (v20 < 0.0)
    v20 = v20 + 360.0;
  v21 = v20 * 0.0174532925;
  v22 = fmod(v2 * 131.849 + 119.75, 360.0);
  if (v22 < 0.0)
    v22 = v22 + 360.0;
  v23 = v22 * 0.0174532925;
  v24 = fmod(v2 * 481267.881 + 218.316448 + v2 * v2 * -0.0015786 + v2 * (v2 * v2) / 538841.0 + v32 / -65194000.0, 360.0);
  if (v24 < 0.0)
    v24 = v24 + 360.0;
  v25 = v24 * 0.0174532925;
  v26 = v15 + sin(v24 * 0.0174532925) * -2235.0;
  v27 = v26 + sin(v21) * 382.0;
  v28 = v27 + sin(v23 - v13) * 175.0;
  v29 = v28 + sin(v23 + v13) * 175.0;
  v30 = v29 + sin(v25 - v10) * 127.0;
  return (v30 + sin(v25 + v10) * -115.0) / 1000000.0;
}

void CAAMoon::EclipticLongitude(CAAMoon *this, double a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  unint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  long double v25;
  long double v26;
  long double v27;
  CAANutation *v28;
  double v29;
  double v31;

  v2 = (a2 + -2451545.0) / 36525.0;
  v3 = v2 * v2;
  v4 = v2 * (v2 * v2);
  v31 = v2 * v4;
  v5 = fmod(v2 * 445267.111 + 297.850192 + v2 * v2 * -0.0018819 + v4 / 545868.0 + v2 * v4 / -113065000.0, 360.0);
  if (v5 < 0.0)
    v5 = v5 + 360.0;
  v6 = v5 * 0.0174532925;
  v7 = fmod(v2 * 35999.0503 + 357.529109 + v3 * -0.0001536 + v4 / 24490000.0, 360.0);
  if (v7 < 0.0)
    v7 = v7 + 360.0;
  v8 = v7 * 0.0174532925;
  v9 = fmod(v2 * 477198.868 + 134.963396 + v3 * 0.0087414 + v4 / 69699.0 + v2 * v4 / -14712000.0, 360.0);
  if (v9 < 0.0)
    v9 = v9 + 360.0;
  v10 = v9 * 0.0174532925;
  v11 = fmod(v2 * 483202.018 + 93.272095 + v3 * -0.0036539 + v4 / -3526000.0 + v31 / 863310000.0, 360.0);
  v12 = 0;
  if (v11 < 0.0)
    v11 = v11 + 360.0;
  v13 = v11 * 0.0174532925;
  v14 = v2 * -0.002516 + 1.0 + v3 * -0.0000074;
  v15 = 0.0;
  do
  {
    v16 = *(double *)&g_MoonCoefficients2[v12 / 8];
    v17 = *(_DWORD *)((char *)&g_MoonCoefficients1 + v12 + 4);
    v18 = v16
        * sin(v8 * (double)v17+ (double)*(int *)((char *)&g_MoonCoefficients1 + v12) * v6+ (double)*(int *)((char *)&g_MoonCoefficients1 + v12 + 8) * v10+ (double)*(int *)((char *)&g_MoonCoefficients1 + v12 + 12) * v13);
    switch(v17)
    {
      case -2:
      case 2:
        v18 = v14 * v14 * v18;
        break;
      case -1:
      case 1:
        v18 = v14 * v18;
        break;
      default:
        break;
    }
    v15 = v15 + v18;
    v12 += 16;
  }
  while (v12 != 960);
  v19 = fmod(v2 * 479264.29 + 53.09, 360.0);
  if (v19 < 0.0)
    v19 = v19 + 360.0;
  v20 = v19 * 0.0174532925;
  v21 = fmod(v2 * 131.849 + 119.75, 360.0);
  if (v21 < 0.0)
    v21 = v21 + 360.0;
  v22 = v21 * 0.0174532925;
  v23 = fmod(v2 * 481267.881 + 218.316448 + v2 * v2 * -0.0015786 + v2 * (v2 * v2) / 538841.0 + v31 / -65194000.0, 360.0);
  if (v23 >= 0.0)
    v24 = v23;
  else
    v24 = v23 + 360.0;
  v25 = v15 + sin(v22) * 3958.0;
  v26 = v25 + sin(v24 * 0.0174532925 - v13) * 1962.0;
  v27 = v26 + sin(v20) * 318.0;
  v29 = CAANutation::NutationInLongitude(v28, a2);
  fmod(v24 + v27 / 1000000.0 + v29 / 3600.0, 360.0);
}

double CAANutation::NutationInObliquity(CAANutation *this, double a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int *v15;
  double v16;
  double v18;
  double v19;

  v2 = (a2 + -2451545.0) / 36525.0;
  v3 = v2 * v2;
  v4 = v2 * (v2 * v2);
  v5 = fmod(v2 * 445267.111 + 297.85036 + v2 * v2 * -0.0019142 + v4 / 189474.0, 360.0);
  if (v5 < 0.0)
    v5 = v5 + 360.0;
  v19 = v5;
  v6 = fmod(v2 * 35999.0503 + 357.52772 + v3 * -0.0001603 + v4 / -300000.0, 360.0);
  if (v6 < 0.0)
    v6 = v6 + 360.0;
  v18 = v6;
  v7 = fmod(v2 * 477198.867 + 134.96298 + v3 * 0.0086972 + v4 / 56250.0, 360.0);
  if (v7 >= 0.0)
    v8 = v7;
  else
    v8 = v7 + 360.0;
  v9 = fmod(v2 * 483202.018 + 93.27191 + v3 * -0.0036825 + v4 / 327270.0, 360.0);
  if (v9 >= 0.0)
    v10 = v9;
  else
    v10 = v9 + 360.0;
  v11 = v2;
  v12 = fmod(v2 * -1934.13626 + 125.04452 + v3 * 0.0020708 + v4 / 450000.0, 360.0);
  if (v12 >= 0.0)
    v13 = v12;
  else
    v13 = v12 + 360.0;
  v14 = 0.0;
  v15 = &g_NutationCoefficients;
  do
  {
    v16 = (double)v15[8] + *((double *)v15 + 5) * v11;
    v14 = v14
        + v16
        * cos((v18 * (double)v15[1]+ (double)*v15 * v19+ (double)v15[2] * v8+ (double)v15[3] * v10+ (double)v15[4] * v13)* 0.0174532925)* 0.0001;
    v15 += 12;
  }
  while (v15 != (int *)&qword_189CB7658);
  return v14;
}

double CAANutation::NutationInLongitude(CAANutation *this, double a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int *v15;
  double v16;
  double v18;
  double v19;

  v2 = (a2 + -2451545.0) / 36525.0;
  v3 = v2 * v2;
  v4 = v2 * (v2 * v2);
  v5 = fmod(v2 * 445267.111 + 297.85036 + v2 * v2 * -0.0019142 + v4 / 189474.0, 360.0);
  if (v5 < 0.0)
    v5 = v5 + 360.0;
  v19 = v5;
  v6 = fmod(v2 * 35999.0503 + 357.52772 + v3 * -0.0001603 + v4 / -300000.0, 360.0);
  if (v6 < 0.0)
    v6 = v6 + 360.0;
  v18 = v6;
  v7 = fmod(v2 * 477198.867 + 134.96298 + v3 * 0.0086972 + v4 / 56250.0, 360.0);
  if (v7 >= 0.0)
    v8 = v7;
  else
    v8 = v7 + 360.0;
  v9 = fmod(v2 * 483202.018 + 93.27191 + v3 * -0.0036825 + v4 / 327270.0, 360.0);
  if (v9 >= 0.0)
    v10 = v9;
  else
    v10 = v9 + 360.0;
  v11 = v2;
  v12 = fmod(v2 * -1934.13626 + 125.04452 + v3 * 0.0020708 + v4 / 450000.0, 360.0);
  if (v12 >= 0.0)
    v13 = v12;
  else
    v13 = v12 + 360.0;
  v14 = 0.0;
  v15 = &g_NutationCoefficients;
  do
  {
    v16 = (double)v15[5] + *((double *)v15 + 3) * v11;
    v14 = v14
        + v16
        * sin((v18 * (double)v15[1]+ (double)*v15 * v19+ (double)v15[2] * v8+ (double)v15[3] * v10+ (double)v15[4] * v13)* 0.0174532925)* 0.0001;
    v15 += 12;
  }
  while (v15 != (int *)&qword_189CB7658);
  return v14;
}

void CAARiseTransitSet2::AddEvents(char **a1, double *a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  double v18;
  double v19;
  double v21;
  double v22;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v46;
  double v47;
  double v48;
  char *v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  double v63;
  double v64;
  double v65;
  double v66;
  char *v67;
  char *v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  double v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  __int128 v79;
  __int128 v80;
  double v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  double v88;
  double v89;
  double v91;
  char *v92;
  __int128 v93;
  __int128 v94;
  double v95;
  char *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  double v102;
  char *v103;
  __int128 v104;
  __int128 v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  char *v115;
  char *v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  __int128 v128;
  __int128 v129;
  double v130;
  char *v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  __int128 v138;
  __int128 v139;
  double v140;
  double v141;
  double v142;
  double v143;
  BOOL v144;
  int *v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  double v153;
  unint64_t v154;
  int v155;
  double v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  double v163;
  unint64_t v164;
  char *v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  double v186;
  double v187;
  __int128 v188;
  double v189;
  uint64_t v190;
  char v191;

  v18 = a9;
  v19 = a8;
  v21 = a7;
  v22 = a6;
  if (a3 || a11 == -90.0)
    goto LABEL_134;
  if (a11 < -18.0 && a12 >= -18.0)
  {
    v34 = *a2;
    v35 = (-18.0 - a6) / (a2[1] - a6);
    v187 = a5;
    if (vabdd_f64(*a2, a10) > 180.0)
    {
      if (v34 > a10)
      {
        v38 = a10 + 360.0;
LABEL_31:
        v46 = a8 + v35 * a9;
        v47 = fmod(v38 + v35 * (v34 - v38), 360.0);
        if (v47 >= 0.0)
          v48 = v47;
        else
          v48 = v47 + 360.0;
        v49 = a1[1];
        v50 = a1[2];
        if (v49 < v50)
        {
          *(_DWORD *)v49 = 8;
          *((double *)v49 + 1) = v46;
          *((double *)v49 + 2) = v48;
          *((_QWORD *)v49 + 3) = 0;
          v51 = (unint64_t)(v49 + 40);
          v49[32] = 0;
          v21 = a7;
          a5 = v187;
          v18 = a9;
          v22 = a6;
LABEL_133:
          a1[1] = (char *)v51;
          goto LABEL_134;
        }
        v52 = 0xCCCCCCCCCCCCCCCDLL * ((v49 - *a1) >> 3);
        v53 = v52 + 1;
        if (v52 + 1 > 0x666666666666666)
          goto LABEL_253;
        v54 = 0xCCCCCCCCCCCCCCCDLL * ((v50 - *a1) >> 3);
        if (2 * v54 > v53)
          v53 = 2 * v54;
        if (v54 >= 0x333333333333333)
          v55 = 0x666666666666666;
        else
          v55 = v53;
        if (v55)
          v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CAARiseTransitSetDetails2>>(v55);
        else
          v56 = 0;
        v57 = v55 + 40 * v52;
        v58 = v55 + 40 * v56;
        *(_DWORD *)v57 = 8;
        *(double *)(v57 + 8) = v46;
        *(double *)(v57 + 16) = v48;
        *(_QWORD *)(v57 + 24) = 0;
        *(_BYTE *)(v57 + 32) = 0;
        v51 = v57 + 40;
        v60 = *a1;
        v59 = a1[1];
        v21 = a7;
        if (v59 == *a1)
        {
          a5 = v187;
          v18 = a9;
        }
        else
        {
          v18 = a9;
          do
          {
            v61 = *(_OWORD *)(v59 - 40);
            v62 = *(_OWORD *)(v59 - 24);
            *(_BYTE *)(v57 - 8) = *(v59 - 8);
            *(_OWORD *)(v57 - 24) = v62;
            *(_OWORD *)(v57 - 40) = v61;
            v57 -= 40;
            v59 -= 40;
          }
          while (v59 != v60);
          v59 = *a1;
          a5 = v187;
        }
        v22 = a6;
        *a1 = (char *)v57;
        a1[1] = (char *)v51;
        a1[2] = (char *)v58;
        if (!v59)
          goto LABEL_133;
LABEL_132:
        operator delete(v59);
        goto LABEL_133;
      }
      v34 = v34 + 360.0;
    }
    v38 = a10;
    goto LABEL_31;
  }
  if (a11 < -12.0 && a12 >= -12.0)
  {
    v39 = *a2;
    v40 = (-12.0 - a6) / (a2[1] - a6);
    v186 = a6;
    if (vabdd_f64(*a2, a10) <= 180.0)
    {
      v31 = a8;
      v30 = a5;
      v32 = a7;
    }
    else
    {
      v30 = a5;
      v31 = a8;
      v32 = a7;
      if (v39 > a10)
      {
        v41 = a10 + 360.0;
        goto LABEL_56;
      }
      v39 = v39 + 360.0;
    }
    v41 = a10;
LABEL_56:
    v63 = a9;
    v64 = v31 + v40 * a9;
    v65 = fmod(v41 + v40 * (v39 - v41), 360.0);
    if (v65 >= 0.0)
      v66 = v65;
    else
      v66 = v65 + 360.0;
    v67 = a1[1];
    v68 = a1[2];
    if (v67 < v68)
    {
      v69 = 9;
LABEL_111:
      *(_DWORD *)v67 = v69;
      *((double *)v67 + 1) = v64;
      *((double *)v67 + 2) = v66;
      *((_QWORD *)v67 + 3) = 0;
      v51 = (unint64_t)(v67 + 40);
      v67[32] = 0;
      v21 = v32;
      a5 = v30;
      v18 = v63;
      v19 = v31;
      v22 = v186;
      goto LABEL_133;
    }
    v70 = 0xCCCCCCCCCCCCCCCDLL * ((v67 - *a1) >> 3);
    v71 = v70 + 1;
    if (v70 + 1 > 0x666666666666666)
      goto LABEL_253;
    v72 = 0xCCCCCCCCCCCCCCCDLL * ((v68 - *a1) >> 3);
    if (2 * v72 > v71)
      v71 = 2 * v72;
    if (v72 >= 0x333333333333333)
      v73 = 0x666666666666666;
    else
      v73 = v71;
    if (v73)
      v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CAARiseTransitSetDetails2>>(v73);
    else
      v74 = 0;
    v76 = v73 + 40 * v70;
    v77 = v73 + 40 * v74;
    *(_DWORD *)v76 = 9;
    *(double *)(v76 + 8) = v64;
    *(double *)(v76 + 16) = v66;
    *(_QWORD *)(v76 + 24) = 0;
    *(_BYTE *)(v76 + 32) = 0;
    v51 = v76 + 40;
    v78 = *a1;
    v59 = a1[1];
    v21 = v32;
    if (v59 != *a1)
    {
      v18 = v63;
      do
      {
        v79 = *(_OWORD *)(v59 - 40);
        v80 = *(_OWORD *)(v59 - 24);
        *(_BYTE *)(v76 - 8) = *(v59 - 8);
        *(_OWORD *)(v76 - 24) = v80;
        *(_OWORD *)(v76 - 40) = v79;
        v76 -= 40;
        v59 -= 40;
      }
      while (v59 != v78);
LABEL_129:
      v59 = *a1;
      a5 = v30;
      goto LABEL_131;
    }
    goto LABEL_130;
  }
  if (a11 < -6.0 && a12 >= -6.0)
  {
    v28 = *a2;
    v29 = (-6.0 - a6) / (a2[1] - a6);
    v186 = a6;
    if (vabdd_f64(*a2, a10) <= 180.0)
    {
      v31 = a8;
      v30 = a5;
      v32 = a7;
    }
    else
    {
      v30 = a5;
      v31 = a8;
      v32 = a7;
      if (v28 > a10)
      {
        v33 = a10 + 360.0;
        goto LABEL_79;
      }
      v28 = v28 + 360.0;
    }
    v33 = a10;
LABEL_79:
    v63 = a9;
    v64 = v31 + v29 * a9;
    v81 = fmod(v33 + v29 * (v28 - v33), 360.0);
    if (v81 >= 0.0)
      v66 = v81;
    else
      v66 = v81 + 360.0;
    v67 = a1[1];
    v82 = a1[2];
    if (v67 < v82)
    {
      v69 = 10;
      goto LABEL_111;
    }
    v83 = 0xCCCCCCCCCCCCCCCDLL * ((v67 - *a1) >> 3);
    v84 = v83 + 1;
    if (v83 + 1 > 0x666666666666666)
      goto LABEL_253;
    v85 = 0xCCCCCCCCCCCCCCCDLL * ((v82 - *a1) >> 3);
    if (2 * v85 > v84)
      v84 = 2 * v85;
    if (v85 >= 0x333333333333333)
      v86 = 0x666666666666666;
    else
      v86 = v84;
    if (v86)
      v86 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CAARiseTransitSetDetails2>>(v86);
    else
      v87 = 0;
    v76 = v86 + 40 * v83;
    v77 = v86 + 40 * v87;
    *(_DWORD *)v76 = 10;
    *(double *)(v76 + 8) = v64;
    *(double *)(v76 + 16) = v66;
    *(_QWORD *)(v76 + 24) = 0;
    *(_BYTE *)(v76 + 32) = 0;
    v51 = v76 + 40;
    v92 = *a1;
    v59 = a1[1];
    v21 = v32;
    if (v59 != *a1)
    {
      v18 = v63;
      do
      {
        v93 = *(_OWORD *)(v59 - 40);
        v94 = *(_OWORD *)(v59 - 24);
        *(_BYTE *)(v76 - 8) = *(v59 - 8);
        *(_OWORD *)(v76 - 24) = v94;
        *(_OWORD *)(v76 - 40) = v93;
        v76 -= 40;
        v59 -= 40;
      }
      while (v59 != v92);
      goto LABEL_129;
    }
LABEL_130:
    a5 = v30;
    v18 = v63;
LABEL_131:
    v19 = v31;
    *a1 = (char *)v76;
    a1[1] = (char *)v51;
    a1[2] = (char *)v77;
    v22 = v186;
    if (!v59)
      goto LABEL_133;
    goto LABEL_132;
  }
  if (a11 > -18.0 && a12 <= -18.0)
  {
    v42 = *a2;
    v43 = (-18.0 - a6) / (a2[1] - a6);
    v186 = a6;
    if (vabdd_f64(*a2, a10) <= 180.0)
    {
      v31 = a8;
      v30 = a5;
      v32 = a7;
    }
    else
    {
      v30 = a5;
      v31 = a8;
      v32 = a7;
      if (v42 > a10)
      {
        v44 = a10 + 360.0;
        goto LABEL_106;
      }
      v42 = v42 + 360.0;
    }
    v44 = a10;
LABEL_106:
    v63 = a9;
    v64 = v31 + v43 * a9;
    v95 = fmod(v44 + v43 * (v42 - v44), 360.0);
    if (v95 >= 0.0)
      v66 = v95;
    else
      v66 = v95 + 360.0;
    v67 = a1[1];
    v96 = a1[2];
    if (v67 < v96)
    {
      v69 = 7;
      goto LABEL_111;
    }
    v97 = 0xCCCCCCCCCCCCCCCDLL * ((v67 - *a1) >> 3);
    v98 = v97 + 1;
    if (v97 + 1 > 0x666666666666666)
      goto LABEL_253;
    v99 = 0xCCCCCCCCCCCCCCCDLL * ((v96 - *a1) >> 3);
    if (2 * v99 > v98)
      v98 = 2 * v99;
    if (v99 >= 0x333333333333333)
      v100 = 0x666666666666666;
    else
      v100 = v98;
    if (v100)
      v100 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CAARiseTransitSetDetails2>>(v100);
    else
      v101 = 0;
    v76 = v100 + 40 * v97;
    v77 = v100 + 40 * v101;
    *(_DWORD *)v76 = 7;
    *(double *)(v76 + 8) = v64;
    *(double *)(v76 + 16) = v66;
    *(_QWORD *)(v76 + 24) = 0;
    *(_BYTE *)(v76 + 32) = 0;
    v51 = v76 + 40;
    v103 = *a1;
    v59 = a1[1];
    v21 = v32;
    if (v59 != *a1)
    {
      v18 = v63;
      do
      {
        v104 = *(_OWORD *)(v59 - 40);
        v105 = *(_OWORD *)(v59 - 24);
        *(_BYTE *)(v76 - 8) = *(v59 - 8);
        *(_OWORD *)(v76 - 24) = v105;
        *(_OWORD *)(v76 - 40) = v104;
        v76 -= 40;
        v59 -= 40;
      }
      while (v59 != v103);
      goto LABEL_129;
    }
    goto LABEL_130;
  }
  if (a11 <= -12.0 || a12 > -12.0)
  {
    if (a11 <= -6.0 || a12 > -6.0)
      goto LABEL_134;
    v191 = 0;
    v190 = 0;
    LODWORD(v188) = 5;
    v75 = -6.0;
  }
  else
  {
    v191 = 0;
    v190 = 0;
    LODWORD(v188) = 6;
    v75 = -12.0;
  }
  v88 = *a2;
  v89 = (v75 - a6) / (a2[1] - a6);
  *((double *)&v188 + 1) = a8 + v89 * a9;
  if (vabdd_f64(v88, a10) <= 180.0)
    goto LABEL_121;
  if (v88 <= a10)
  {
    v88 = v88 + 360.0;
LABEL_121:
    v91 = a10;
    goto LABEL_122;
  }
  v91 = a10 + 360.0;
LABEL_122:
  v102 = fmod(v91 + v89 * (v88 - v91), 360.0);
  if (v102 < 0.0)
    v102 = v102 + 360.0;
  v189 = v102;
  std::vector<CAARiseTransitSetDetails2>::push_back[abi:ne180100]((void **)a1, &v188);
  v18 = a9;
LABEL_134:
  if (a4 == -90.0)
    goto LABEL_187;
  if (a4 < 0.0 && a5 >= 0.0)
  {
    v106 = *a2;
    v107 = (0.0 - v22 + v21) / (a2[1] - v22);
    if (vabdd_f64(*a2, a10) > 180.0)
    {
      if (v106 > a10)
      {
        v108 = a10 + 360.0;
        goto LABEL_147;
      }
      v106 = v106 + 360.0;
    }
    v108 = a10;
LABEL_147:
    v112 = v19 + v107 * v18;
    v113 = fmod(v108 + v107 * (v106 - v108), 360.0);
    if (v113 >= 0.0)
      v114 = v113;
    else
      v114 = v113 + 360.0;
    v115 = a1[1];
    v116 = a1[2];
    if (v115 < v116)
    {
      v117 = 1;
LABEL_171:
      *(_DWORD *)v115 = v117;
      *((double *)v115 + 1) = v112;
      *((double *)v115 + 2) = v114;
      *((_QWORD *)v115 + 3) = 0;
      v125 = (unint64_t)(v115 + 40);
      v115[32] = 0;
LABEL_186:
      a1[1] = (char *)v125;
      goto LABEL_187;
    }
    v118 = 0xCCCCCCCCCCCCCCCDLL * ((v115 - *a1) >> 3);
    v119 = v118 + 1;
    if (v118 + 1 > 0x666666666666666)
      goto LABEL_253;
    v120 = 0xCCCCCCCCCCCCCCCDLL * ((v116 - *a1) >> 3);
    if (2 * v120 > v119)
      v119 = 2 * v120;
    if (v120 >= 0x333333333333333)
      v121 = 0x666666666666666;
    else
      v121 = v119;
    if (v121)
      v121 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CAARiseTransitSetDetails2>>(v121);
    else
      v122 = 0;
    v123 = v121 + 40 * v118;
    v124 = v121 + 40 * v122;
    *(_DWORD *)v123 = 1;
    *(double *)(v123 + 8) = v112;
    *(double *)(v123 + 16) = v114;
    *(_QWORD *)(v123 + 24) = 0;
    *(_BYTE *)(v123 + 32) = 0;
    v125 = v123 + 40;
    v127 = *a1;
    v126 = a1[1];
    if (v126 != *a1)
    {
      do
      {
        v128 = *(_OWORD *)(v126 - 40);
        v129 = *(_OWORD *)(v126 - 24);
        *(_BYTE *)(v123 - 8) = *(v126 - 8);
        *(_OWORD *)(v123 - 24) = v129;
        *(_OWORD *)(v123 - 40) = v128;
        v123 -= 40;
        v126 -= 40;
      }
      while (v126 != v127);
LABEL_183:
      v126 = *a1;
      goto LABEL_184;
    }
    goto LABEL_184;
  }
  if (a4 > 0.0 && a5 <= 0.0)
  {
    v109 = *a2;
    v110 = (0.0 - v22 + v21) / (a2[1] - v22);
    if (vabdd_f64(*a2, a10) > 180.0)
    {
      if (v109 > a10)
      {
        v111 = a10 + 360.0;
        goto LABEL_166;
      }
      v109 = v109 + 360.0;
    }
    v111 = a10;
LABEL_166:
    v112 = v19 + v110 * v18;
    v130 = fmod(v111 + v110 * (v109 - v111), 360.0);
    if (v130 >= 0.0)
      v114 = v130;
    else
      v114 = v130 + 360.0;
    v115 = a1[1];
    v131 = a1[2];
    if (v115 < v131)
    {
      v117 = 2;
      goto LABEL_171;
    }
    v132 = 0xCCCCCCCCCCCCCCCDLL * ((v115 - *a1) >> 3);
    v133 = v132 + 1;
    if (v132 + 1 > 0x666666666666666)
      goto LABEL_253;
    v134 = 0xCCCCCCCCCCCCCCCDLL * ((v131 - *a1) >> 3);
    if (2 * v134 > v133)
      v133 = 2 * v134;
    if (v134 >= 0x333333333333333)
      v135 = 0x666666666666666;
    else
      v135 = v133;
    if (v135)
      v135 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CAARiseTransitSetDetails2>>(v135);
    else
      v136 = 0;
    v123 = v135 + 40 * v132;
    v124 = v135 + 40 * v136;
    *(_DWORD *)v123 = 2;
    *(double *)(v123 + 8) = v112;
    *(double *)(v123 + 16) = v114;
    *(_QWORD *)(v123 + 24) = 0;
    *(_BYTE *)(v123 + 32) = 0;
    v125 = v123 + 40;
    v137 = *a1;
    v126 = a1[1];
    if (v126 != *a1)
    {
      do
      {
        v138 = *(_OWORD *)(v126 - 40);
        v139 = *(_OWORD *)(v126 - 24);
        *(_BYTE *)(v123 - 8) = *(v126 - 8);
        *(_OWORD *)(v123 - 24) = v139;
        *(_OWORD *)(v123 - 40) = v138;
        v123 -= 40;
        v126 -= 40;
      }
      while (v126 != v137);
      goto LABEL_183;
    }
LABEL_184:
    *a1 = (char *)v123;
    a1[1] = (char *)v125;
    a1[2] = (char *)v124;
    if (v126)
      operator delete(v126);
    goto LABEL_186;
  }
LABEL_187:
  if (a10 == -1.0)
    return;
  v140 = *a2;
  if (a10 > 270.0 && v140 >= 0.0 && v140 <= 90.0)
  {
    v141 = (360.0 - a10) / (360.0 - a10 + v140);
    v142 = v19 + v141 * v18;
    v143 = v22 + v141 * (a2[1] - v22);
    v144 = a5 > 0.0;
    v145 = (int *)a1[1];
    v146 = (unint64_t)a1[2];
    if ((unint64_t)v145 >= v146)
    {
      v147 = 0x666666666666666;
      v148 = *a1;
      v149 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v145 - *a1) >> 3);
      v150 = v149 + 1;
      if (v149 + 1 <= 0x666666666666666)
      {
        v151 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v146 - (_QWORD)v148) >> 3);
        if (2 * v151 > v150)
          v150 = 2 * v151;
        if (v151 < 0x333333333333333)
          v147 = v150;
        if (v147)
        {
          v147 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CAARiseTransitSetDetails2>>(v147);
          v148 = *a1;
          v145 = (int *)a1[1];
        }
        else
        {
          v152 = 0;
        }
        v176 = v147 + 40 * v149;
        *(_DWORD *)v176 = 3;
        *(double *)(v176 + 8) = v142;
        *(_QWORD *)(v176 + 16) = 0;
        v177 = v147 + 40 * v152;
        *(double *)(v176 + 24) = v143;
        *(_BYTE *)(v176 + 32) = v144;
        v165 = (char *)(v176 + 40);
        if (v145 == (int *)v148)
          goto LABEL_249;
        do
        {
          v180 = *(_OWORD *)(v145 - 10);
          v181 = *(_OWORD *)(v145 - 6);
          *(_BYTE *)(v176 - 8) = *((_BYTE *)v145 - 8);
          *(_OWORD *)(v176 - 24) = v181;
          *(_OWORD *)(v176 - 40) = v180;
          v176 -= 40;
          v145 -= 10;
        }
        while (v145 != (int *)v148);
LABEL_248:
        v148 = *a1;
LABEL_249:
        *a1 = (char *)v176;
        a1[1] = v165;
        a1[2] = (char *)v177;
        if (v148)
          operator delete(v148);
        goto LABEL_251;
      }
      goto LABEL_253;
    }
    goto LABEL_203;
  }
  if (a10 < 90.0 && v140 >= 270.0 && v140 <= 360.0)
  {
    v153 = a10 / (360.0 - v140 + a10);
    v142 = v19 + v153 * v18;
    v143 = v22 + v153 * (a2[1] - v22);
    v144 = a5 > 0.0;
    v145 = (int *)a1[1];
    v154 = (unint64_t)a1[2];
    if ((unint64_t)v145 >= v154)
    {
      v166 = 0x666666666666666;
      v148 = *a1;
      v167 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v145 - *a1) >> 3);
      v168 = v167 + 1;
      if (v167 + 1 <= 0x666666666666666)
      {
        v169 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v154 - (_QWORD)v148) >> 3);
        if (2 * v169 > v168)
          v168 = 2 * v169;
        if (v169 < 0x333333333333333)
          v166 = v168;
        if (v166)
        {
          v166 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CAARiseTransitSetDetails2>>(v166);
          v148 = *a1;
          v145 = (int *)a1[1];
        }
        else
        {
          v170 = 0;
        }
        v176 = v166 + 40 * v167;
        *(_DWORD *)v176 = 3;
        *(double *)(v176 + 8) = v142;
        *(_QWORD *)(v176 + 16) = 0;
        v177 = v166 + 40 * v170;
        *(double *)(v176 + 24) = v143;
        *(_BYTE *)(v176 + 32) = v144;
        v165 = (char *)(v176 + 40);
        if (v145 == (int *)v148)
          goto LABEL_249;
        do
        {
          v182 = *(_OWORD *)(v145 - 10);
          v183 = *(_OWORD *)(v145 - 6);
          *(_BYTE *)(v176 - 8) = *((_BYTE *)v145 - 8);
          *(_OWORD *)(v176 - 24) = v183;
          *(_OWORD *)(v176 - 40) = v182;
          v176 -= 40;
          v145 -= 10;
        }
        while (v145 != (int *)v148);
        goto LABEL_248;
      }
      goto LABEL_253;
    }
LABEL_203:
    v155 = 3;
LABEL_218:
    *v145 = v155;
    *((double *)v145 + 1) = v142;
    *((_QWORD *)v145 + 2) = 0;
    *((double *)v145 + 3) = v143;
    v165 = (char *)(v145 + 10);
    *((_BYTE *)v145 + 32) = v144;
LABEL_251:
    a1[1] = v165;
    return;
  }
  if (a10 < 180.0 && v140 >= 180.0)
  {
    v156 = (180.0 - a10) / (v140 - a10);
    v142 = v19 + v156 * v18;
    v143 = v22 + v156 * (a2[1] - v22);
    v144 = a5 > 0.0;
    v145 = (int *)a1[1];
    v157 = (unint64_t)a1[2];
    if ((unint64_t)v145 >= v157)
    {
      v158 = 0x666666666666666;
      v148 = *a1;
      v159 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v145 - *a1) >> 3);
      v160 = v159 + 1;
      if (v159 + 1 <= 0x666666666666666)
      {
        v161 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v157 - (_QWORD)v148) >> 3);
        if (2 * v161 > v160)
          v160 = 2 * v161;
        if (v161 < 0x333333333333333)
          v158 = v160;
        if (v158)
        {
          v158 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CAARiseTransitSetDetails2>>(v158);
          v148 = *a1;
          v145 = (int *)a1[1];
        }
        else
        {
          v162 = 0;
        }
        v176 = v158 + 40 * v159;
        *(_DWORD *)v176 = 4;
        *(double *)(v176 + 8) = v142;
        *(_QWORD *)(v176 + 16) = 0;
        v177 = v158 + 40 * v162;
        *(double *)(v176 + 24) = v143;
        *(_BYTE *)(v176 + 32) = v144;
        v165 = (char *)(v176 + 40);
        if (v145 == (int *)v148)
          goto LABEL_249;
        do
        {
          v178 = *(_OWORD *)(v145 - 10);
          v179 = *(_OWORD *)(v145 - 6);
          *(_BYTE *)(v176 - 8) = *((_BYTE *)v145 - 8);
          *(_OWORD *)(v176 - 24) = v179;
          *(_OWORD *)(v176 - 40) = v178;
          v176 -= 40;
          v145 -= 10;
        }
        while (v145 != (int *)v148);
        goto LABEL_248;
      }
      goto LABEL_253;
    }
LABEL_217:
    v155 = 4;
    goto LABEL_218;
  }
  if (a10 > 180.0 && v140 <= 180.0)
  {
    v163 = (a10 + -180.0) / (a10 - v140);
    v142 = v19 + v163 * v18;
    v143 = v22 + v163 * (a2[1] - v22);
    v144 = a5 > 0.0;
    v145 = (int *)a1[1];
    v164 = (unint64_t)a1[2];
    if ((unint64_t)v145 >= v164)
    {
      v171 = 0x666666666666666;
      v148 = *a1;
      v172 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v145 - *a1) >> 3);
      v173 = v172 + 1;
      if (v172 + 1 <= 0x666666666666666)
      {
        v174 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v164 - (_QWORD)v148) >> 3);
        if (2 * v174 > v173)
          v173 = 2 * v174;
        if (v174 < 0x333333333333333)
          v171 = v173;
        if (v171)
        {
          v171 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CAARiseTransitSetDetails2>>(v171);
          v148 = *a1;
          v145 = (int *)a1[1];
        }
        else
        {
          v175 = 0;
        }
        v176 = v171 + 40 * v172;
        *(_DWORD *)v176 = 4;
        *(double *)(v176 + 8) = v142;
        *(_QWORD *)(v176 + 16) = 0;
        v177 = v171 + 40 * v175;
        *(double *)(v176 + 24) = v143;
        *(_BYTE *)(v176 + 32) = v144;
        v165 = (char *)(v176 + 40);
        if (v145 == (int *)v148)
          goto LABEL_249;
        do
        {
          v184 = *(_OWORD *)(v145 - 10);
          v185 = *(_OWORD *)(v145 - 6);
          *(_BYTE *)(v176 - 8) = *((_BYTE *)v145 - 8);
          *(_OWORD *)(v176 - 24) = v185;
          *(_OWORD *)(v176 - 40) = v184;
          v176 -= 40;
          v145 -= 10;
        }
        while (v145 != (int *)v148);
        goto LABEL_248;
      }
LABEL_253:
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_217;
  }
}

void sub_1885AF71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<unsigned int,_GEOAltitudeTriggerData>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,_GEOAltitudeTriggerData>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,_GEOAltitudeTriggerData>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,_GEOAltitudeTriggerData>>(uint64_t **a1, unsigned int a2, uint64_t a3)
{
  char *v5;
  uint64_t **v6;
  char *v7;
  unsigned int v8;
  char *v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *(char **)v7;
        v6 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = (char *)*((_QWORD *)v7 + 1);
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (char *)(a1 + 1);
LABEL_9:
    v9 = v7;
    v7 = (char *)operator new(0x70uLL);
    *((_DWORD *)v7 + 8) = *(_DWORD *)a3;
    *((_QWORD *)v7 + 5) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(v7 + 45) = *(_QWORD *)(a3 + 13);
    v10 = *(_OWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)(v7 + 56) = v10;
    *(_OWORD *)(v7 + 72) = *(_OWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_OWORD *)(v7 + 88) = *(_OWORD *)(a3 + 56);
    *((_QWORD *)v7 + 13) = *(_QWORD *)(a3 + 72);
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v6 = (uint64_t *)v7;
    v11 = (uint64_t *)v7;
    v12 = (uint64_t *)**a1;
    if (v12)
    {
      *a1 = v12;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t geo::codec::decodePointCharacteristics(_QWORD *a1, int a2, uint64_t *a3, unint64_t *a4, uint64_t *a5, _QWORD *a6, uint64_t a7)
{
  unint64_t v7;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t VarUint32;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int *v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  _DWORD *v37;
  int v38;
  unint64_t v39;
  char v40;
  int v41;
  int *v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  float v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  _BYTE *v58;
  BOOL v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  unint64_t v63;
  __int16 v64;
  _WORD *v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  geo::codec::Allocator *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  int *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  uint64_t *v88;
  uint64_t *v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char v99;
  int *v100;
  int v101;
  unint64_t v102;
  unsigned int v103;
  unint64_t v104;
  char v105;
  unint64_t v106;
  char v107;
  unint64_t v108;
  char v109;
  int v110;
  char v111;
  uint64_t v112;
  int v113;
  int *v114;
  uint64_t *v115;
  _WORD *v116;
  int v117;
  _BYTE *v118;
  int v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int *v128;
  unsigned int v129[4];

  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  v7 = a1[1];
  if (!v7)
    return 1;
  v13 = 0;
  v14 = 0;
  while (*(unsigned __int16 *)(*a1 + 16 * v13) != a2)
  {
    v13 = ++v14;
    if (v7 <= v14)
      return 1;
  }
  v15 = (_QWORD *)geo::codec::chapterAt((uint64_t)a1, v14, a2, a7);
  if (!v15)
    return 1;
  v16 = v15;
  v126 = 0;
  v127 = 0;
  VarUint32 = geo::codec::chapterReadVarUint32(v15, (unsigned int *)&v127 + 1);
  if ((_DWORD)VarUint32)
  {
    VarUint32 = geo::codec::chapterReadVarUint32(v16, (unsigned int *)&v127);
    if ((_DWORD)VarUint32)
    {
      VarUint32 = geo::codec::chapterReadVarUint32(v16, (unsigned int *)&v126 + 1);
      if ((_DWORD)VarUint32)
      {
        v18 = v127;
        if (!(_DWORD)v127)
        {
          v21 = 0;
          goto LABEL_90;
        }
        v19 = HIDWORD(v126);
        if (!(HIDWORD(v126) >> 20))
        {
          v20 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
          VarUint32 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v20 + 24))(v20, v18, 100);
          v21 = VarUint32;
          if (!VarUint32)
            goto LABEL_118;
          if (v19)
          {
            v96 = 0;
            v97 = v18;
            v22 = 0;
            v92 = VarUint32 + 36;
            v93 = VarUint32 + 34;
            while (1)
            {
              v125 = 0;
              VarUint32 = geo::codec::chapterReadVarUint32(v16, (unsigned int *)&v125 + 1);
              if (!(_DWORD)VarUint32)
                break;
              VarUint32 = geo::codec::chapterReadVarUint32(v16, (unsigned int *)&v125);
              if (!(_DWORD)VarUint32)
                break;
              v23 = atomic_load(&_MergedGlobals_351);
              if (v23 != -1)
              {
                *(_QWORD *)v129 = &v124;
                v128 = v129;
                std::__call_once(&_MergedGlobals_351, &v128, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<geo::codec::CharacteristicMakeDefault(void)::$_0 &&>>);
              }
              if ((_DWORD)v125)
              {
                v113 = 0;
                if (v22 <= v18)
                  v24 = v18;
                else
                  v24 = v22;
                v94 = v125 + v22;
                v118 = (_BYTE *)(v93 + 100 * v22);
                v116 = (_WORD *)(v92 + 100 * v22);
                v25 = &dword_1ECDBCD98;
                v95 = v24;
                while (v22 != v24)
                {
                  v129[0] = 0;
                  VarUint32 = geo::codec::chapterReadVarUint32(v16, v129);
                  if ((VarUint32 & 1) == 0)
                    break;
                  v26 = *((_DWORD *)v16 + 16);
                  v27 = v16[6];
                  v28 = v16[7];
                  if (v26 >= 2)
                  {
                    if (v27 + 2 > v28)
                      goto LABEL_118;
                    v29 = 2;
                  }
                  else
                  {
                    if (v27 + 1 > v28)
                      goto LABEL_118;
                    v29 = 1;
                  }
                  *((_BYTE *)v16 + 32) = 1;
                  v30 = (char *)(v16[5] + v27);
                  v16[2] = v29;
                  v16[3] = 0;
                  v16[1] = v30;
                  v31 = *v30;
                  v16[3] = 1;
                  v32 = *v30;
                  v16[3] = 2;
                  v33 = *v30;
                  v16[3] = 3;
                  v34 = *v30;
                  v16[3] = 4;
                  v109 = *v30;
                  v111 = v34;
                  v16[3] = 6;
                  v107 = *v30;
                  v16[3] = 7;
                  v105 = *v30;
                  v16[3] = 8;
                  if (v26 >= 2)
                  {
                    v36 = v30[1];
                    v16[3] = 9;
                    v103 = v36 >> 7;
                    v101 = (v30[1] >> 6) & 1;
                    v16[3] = 16;
                    v35 = 2;
                  }
                  else
                  {
                    LOBYTE(v103) = 0;
                    LOBYTE(v101) = 0;
                    v35 = 1;
                  }
                  v37 = (_DWORD *)(v21 + 100 * v22);
                  v16[6] = v35 + v27;
                  *((_BYTE *)v16 + 32) = 0;
                  v37[1] = HIDWORD(v125);
                  v38 = v113;
                  LODWORD(v128) = v113;
                  if (v31 < 0)
                  {
                    v99 = v32;
                    v114 = v25;
                    v39 = v22;
                    v40 = v33;
                    VarUint32 = geo::codec::chapterReadVarUint32(v16, (unsigned int *)&v128);
                    if (!(_DWORD)VarUint32)
                      goto LABEL_118;
                    v38 = (int)v128;
                    v33 = v40;
                    v22 = v39;
                    v25 = v114;
                    v32 = v99;
                  }
                  v113 = v38;
                  v37[2] = v38;
                  v37[3] = v129[0];
                  v41 = *v25;
                  v124 = *v25;
                  if ((v32 & 0x40) != 0)
                  {
                    v42 = v25;
                    v43 = v22;
                    v44 = v33;
                    VarUint32 = geo::codec::chapterReadVarUint32(v16, (unsigned int *)&v124);
                    if (!(_DWORD)VarUint32)
                      goto LABEL_118;
                    v41 = v124;
                    v33 = v44;
                    v22 = v43;
                    v25 = v42;
                  }
                  v45 = v21 + 100 * v22;
                  *(_DWORD *)(v45 + 16) = v41;
                  v100 = (int *)(v45 + 16);
                  if ((v33 & 0x20) != 0)
                  {
                    v123 = 0;
                    VarUint32 = geo::codec::chapterReadVarUint32(v16, (unsigned int *)&v123);
                    if ((VarUint32 & 1) == 0)
                      goto LABEL_118;
                    v46 = (float)v123;
                  }
                  else
                  {
                    v46 = *((float *)v25 + 2);
                  }
                  *(float *)(v21 + 100 * v22 + 24) = v46;
                  v47 = v25[1];
                  v123 = v47;
                  if ((v111 & 0x10) != 0)
                  {
                    VarUint32 = geo::codec::chapterReadVarUint32(v16, (unsigned int *)&v123);
                    if (!(_DWORD)VarUint32)
                      goto LABEL_118;
                    *(_BYTE *)(v21 + 100 * v22 + 29) = 1;
                    v47 = v123;
                  }
                  else
                  {
                    *(_BYTE *)(v21 + 100 * v22 + 29) = 0;
                  }
                  v48 = v21 + 100 * v22;
                  *(_DWORD *)(v48 + 20) = v47;
                  *(_BYTE *)(v48 + 30) = v105 & 1;
                  *(_BYTE *)(v48 + 28) = (v107 & 2) != 0;
                  *(_BYTE *)(v48 + 31) = v103;
                  *(_BYTE *)(v48 + 32) = v101;
                  if ((v109 & 8) != 0)
                  {
                    v122 = 0;
                    v121 = 0;
                    VarUint32 = geo::codec::chapterReadVarUint32(v16, &v122);
                    if (!(_DWORD)VarUint32)
                      goto LABEL_118;
                    VarUint32 = geo::codec::chapterReadVarUint32(v16, &v121);
                    if (!(_DWORD)VarUint32)
                      goto LABEL_118;
                    v53 = v122;
                    if (v122)
                    {
                      v54 = 0;
                      do
                      {
                        v120 = 0;
                        VarUint32 = geo::codec::chapterReadVarUint32(v16, (unsigned int *)&v120 + 1);
                        if (!(_DWORD)VarUint32)
                          goto LABEL_118;
                        VarUint32 = geo::codec::chapterReadVarUint32(v16, (unsigned int *)&v120);
                        if (!(_DWORD)VarUint32)
                          goto LABEL_118;
                        v55 = v120;
                        if (v120 >= 2)
                        {
                          v56 = 0;
                          v57 = BYTE4(v120);
                          v58 = v118;
                          do
                          {
                            if ((v55 & 2) != 0)
                              *v58 = v57;
                            if (v55 < 4)
                              break;
                            v55 >>= 1;
                            v58 += 4;
                            v59 = v56++ >= 0xF;
                          }
                          while (!v59);
                        }
                      }
                      while (++v54 != v53);
                    }
                    v60 = v121;
                    if (v121)
                    {
                      v61 = 0;
                      do
                      {
                        v120 = 0;
                        VarUint32 = geo::codec::chapterReadVarUint32(v16, (unsigned int *)&v120 + 1);
                        if (!(_DWORD)VarUint32)
                          goto LABEL_118;
                        VarUint32 = geo::codec::chapterReadVarUint32(v16, (unsigned int *)&v120);
                        if (!(_DWORD)VarUint32)
                          goto LABEL_118;
                        v62 = v120;
                        if (v120 >= 2)
                        {
                          v63 = 0;
                          v64 = BYTE4(v120);
                          v65 = v116;
                          do
                          {
                            if ((v62 & 2) != 0)
                              *v65 = v64;
                            if (v62 < 4)
                              break;
                            v62 >>= 1;
                            v65 += 2;
                            v59 = v63++ >= 0xF;
                          }
                          while (!v59);
                        }
                      }
                      while (++v61 != v60);
                    }
                  }
                  else
                  {
                    v49 = v21 + 100 * v22;
                    v50 = *(_OWORD *)((char *)v25 + 18);
                    v51 = *(_OWORD *)((char *)v25 + 34);
                    v52 = *(_OWORD *)((char *)v25 + 50);
                    *(_OWORD *)(v49 + 82) = *(_OWORD *)((char *)v25 + 66);
                    *(_OWORD *)(v49 + 66) = v52;
                    *(_OWORD *)(v49 + 50) = v51;
                    *(_OWORD *)(v49 + 34) = v50;
                  }
                  ++v22;
                  v116 += 50;
                  v118 += 100;
                  v25 = v100;
                  v24 = v95;
                  if (v94 == (_DWORD)v22)
                    goto LABEL_79;
                }
                break;
              }
LABEL_79:
              v18 = v97;
              if (++v96 >= (unint64_t)HIDWORD(v126))
                goto LABEL_90;
            }
LABEL_118:
            v66 = 0;
            v68 = 0;
            if (!*(_BYTE *)v16)
              goto LABEL_85;
            goto LABEL_84;
          }
LABEL_90:
          if (*((_DWORD *)v16 + 16) < 0x33u)
          {
            v68 = 0;
            if (a2 != 52)
              goto LABEL_122;
          }
          else
          {
            VarUint32 = geo::codec::chapterReadVarUint32(v16, (unsigned int *)&v126);
            if (!(_DWORD)VarUint32)
              goto LABEL_118;
            v98 = v18;
            v74 = v126;
            if ((_DWORD)v126)
            {
              v75 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
              VarUint32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v75 + 16))(v75, 16 * v74, 8);
              v68 = VarUint32;
              if (VarUint32)
              {
                v129[0] = 0;
                LODWORD(v128) = 0;
                v125 = 0;
                v77 = v16[6];
                v76 = v16[7];
                v59 = v76 >= v77;
                v78 = v76 - v77;
                if (v59)
                {
                  *((_BYTE *)v16 + 32) = 1;
                  v79 = v16[5] + v77;
                  v16[2] = v78;
                  v16[3] = 0;
                  v16[1] = v79;
                }
                VarUint32 = BitstreamUnpack(v16 + 1, (int *)v129, 5uLL);
                if ((_DWORD)VarUint32)
                {
                  VarUint32 = BitstreamUnpack(v16 + 1, (int *)&v128, 5uLL);
                  if ((_DWORD)VarUint32)
                  {
                    VarUint32 = BitstreamUnpack(v16 + 1, (int *)&v125 + 1, 5uLL);
                    if ((_DWORD)VarUint32)
                    {
                      VarUint32 = BitstreamUnpack(v16 + 1, (int *)&v125, 5uLL);
                      if ((_DWORD)VarUint32)
                      {
                        v112 = v74;
                        v115 = v16 + 1;
                        v119 = 0;
                        v117 = 0;
                        v80 = 0;
                        v102 = ((_DWORD)v128 + 1);
                        v104 = v129[0] + 1;
                        v106 = (v125 + 1);
                        v108 = (HIDWORD(v125) + 1);
                        v81 = (int *)(v68 + 12);
                        while (1)
                        {
                          v82 = v16[3];
                          v83 = v82 + 1;
                          v84 = 8 * v16[2];
                          if (v82 + 1 > v84)
                            break;
                          v85 = *(unsigned __int8 *)(v16[1] + (v82 >> 3));
                          v16[3] = v83;
                          if (((v85 >> (~(_BYTE)v82 & 7)) & 1) != 0)
                          {
                            v124 = 0;
                            VarUint32 = BitstreamUnpack(v115, &v124, v104);
                            if (!(_DWORD)VarUint32)
                              break;
                            v117 = 0;
                            v119 = 0;
                            v80 += v124;
                            v83 = v16[3];
                            v84 = 8 * v16[2];
                          }
                          if (v83 + 1 > v84)
                            break;
                          v86 = *(unsigned __int8 *)(v16[1] + (v83 >> 3));
                          v16[3] = v83 + 1;
                          if (((v86 >> (~(_BYTE)v83 & 7)) & 1) != 0)
                          {
                            v124 = 0;
                            VarUint32 = BitstreamUnpack(v115, &v124, v102);
                            if (!(_DWORD)VarUint32)
                              break;
                            v119 = 0;
                            v87 = v124 + v117;
                            v88 = v16 + 1;
                          }
                          else
                          {
                            v88 = v16 + 1;
                            v87 = v117;
                          }
                          v110 = v80;
                          *(v81 - 3) = v80;
                          *(v81 - 2) = v87;
                          v117 = v87;
                          v124 = 0;
                          v89 = v88;
                          VarUint32 = BitstreamUnpack(v88, &v124, v108);
                          if (!(_DWORD)VarUint32)
                            break;
                          v119 += v124;
                          *(v81 - 1) = v119;
                          VarUint32 = BitstreamUnpack(v89, v81, v106);
                          if ((VarUint32 & 1) == 0)
                            break;
                          v81 += 4;
                          v90 = v112-- == 1;
                          v80 = v110;
                          if (v90)
                          {
                            v91 = v16[6] + (v16[3] >> 3);
                            if ((v16[3] & 7) != 0)
                              ++v91;
                            v16[6] = v91;
                            *((_BYTE *)v16 + 32) = 0;
                            goto LABEL_127;
                          }
                        }
                      }
                    }
                  }
                }
              }
              v66 = 0;
              if (!*(_BYTE *)v16)
                goto LABEL_85;
              goto LABEL_84;
            }
            v68 = 0;
LABEL_127:
            v18 = v98;
            if (a2 != 52)
            {
LABEL_122:
              *a3 = v21;
              *a4 = v18;
              *a5 = v68;
              *a6 = v126;
              v66 = 1;
              v21 = 0;
              v68 = 0;
              if (!*(_BYTE *)v16)
                goto LABEL_85;
              goto LABEL_84;
            }
          }
          std::stable_sort[abi:ne180100]<GeoCodecsCharacteristicPoint *,geo::codec::decodePointCharacteristics(VMP4Tile *,unsigned short,GeoCodecsCharacteristicPoint **,unsigned long *,GeoCodecsStrokeSpecification **,unsigned long *,std::unordered_map<char const*,DebugChapterInfo> &)::$_0>(v21, (char *)(v21 + 100 * v18));
          goto LABEL_122;
        }
      }
    }
  }
  v66 = 0;
  v21 = 0;
  v68 = 0;
  if (*(_BYTE *)v16)
  {
LABEL_84:
    v69 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
    VarUint32 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v69 + 40))(v69, v16[5], 0);
  }
LABEL_85:
  v70 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
  v71 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v70 + 40))(v70, v16, 0);
  if (v21)
  {
    v72 = geo::codec::Allocator::instance(v71);
    v71 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v72 + 40))(v72, v21, 0);
  }
  if (v68)
  {
    v73 = geo::codec::Allocator::instance(v71);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 40))(v73, v68, 0);
  }
  return v66;
}

uint64_t geo::codec::chapterReadVarUint32(_QWORD *a1, unsigned int *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  int v26;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v3 + 1;
  if (v3 + 1 > v2)
  {
    result = 0;
    *a2 = 0;
    return result;
  }
  v6 = a1[5];
  v7 = *(_BYTE *)(v6 + v3);
  a1[6] = v4;
  v8 = v7 & 0x7F;
  if ((v7 & 0x80) == 0)
    goto LABEL_4;
  v9 = v3 + 2;
  if (v3 + 2 > v2)
  {
    result = 0;
    *a2 = v8;
    return result;
  }
  v10 = *(char *)(v6 + v4);
  a1[6] = v9;
  v8 = v8 & 0xFFFFC07F | ((v10 & 0x7F) << 7);
  if ((v10 & 0x80000000) == 0)
    goto LABEL_4;
  v11 = v3 + 3;
  if (v3 + 3 > v2)
  {
    result = 0;
    *a2 = v8;
    return result;
  }
  v12 = *(char *)(v6 + v9);
  a1[6] = v11;
  v8 = v8 & 0xFFE03FFF | ((v12 & 0x7F) << 14);
  if ((v12 & 0x80000000) == 0)
    goto LABEL_4;
  v13 = v3 + 4;
  if (v3 + 4 > v2)
  {
    result = 0;
    *a2 = v8;
    return result;
  }
  v14 = *(char *)(v6 + v11);
  a1[6] = v13;
  v8 = v8 & 0xF01FFFFF | ((v14 & 0x7F) << 21);
  if ((v14 & 0x80000000) == 0)
    goto LABEL_4;
  v15 = v3 + 5;
  if (v3 + 5 > v2)
  {
    result = 0;
    *a2 = v8;
    return result;
  }
  v16 = *(char *)(v6 + v13);
  a1[6] = v15;
  v8 |= v16 << 28;
  if ((v16 & 0x80000000) == 0)
    goto LABEL_4;
  v17 = v3 + 6;
  if (v3 + 6 > v2)
  {
    result = 0;
    *a2 = v8;
    return result;
  }
  v18 = *(char *)(v6 + v15);
  a1[6] = v17;
  if ((v18 & 0x80000000) == 0)
    goto LABEL_4;
  v19 = v3 + 7;
  if (v3 + 7 > v2)
  {
    result = 0;
    *a2 = v8;
    return result;
  }
  v20 = *(char *)(v6 + v17);
  a1[6] = v19;
  if ((v20 & 0x80000000) == 0)
    goto LABEL_4;
  v21 = v3 + 8;
  if (v3 + 8 > v2)
  {
    result = 0;
    *a2 = v8;
    return result;
  }
  v22 = *(char *)(v6 + v19);
  a1[6] = v21;
  if ((v22 & 0x80000000) == 0)
    goto LABEL_4;
  v23 = v3 + 9;
  if (v3 + 9 > v2)
  {
    result = 0;
    *a2 = v8;
    return result;
  }
  v24 = *(char *)(v6 + v21);
  a1[6] = v23;
  if ((v24 & 0x80000000) == 0)
    goto LABEL_4;
  v25 = v3 + 10;
  if (v25 > v2)
  {
    result = 0;
    *a2 = v8;
    return result;
  }
  v26 = *(char *)(v6 + v23);
  a1[6] = v25;
  if ((v26 & 0x80000000) == 0)
  {
LABEL_4:
    result = 1;
    *a2 = v8;
    return result;
  }
  return 0;
}

void FeatureStyleAttributes::FeatureStyleAttributes(FeatureStyleAttributes *this, const FeatureStyleAttributes *a2)
{
  void *v4;
  uint64_t v5;
  const void *v6;
  void *v7;

  *(_DWORD *)((char *)this + 31) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v4 = malloc_type_malloc(0x100uLL, 0x100004000313F17uLL);
  *(_QWORD *)this = v4;
  if (v4)
    memcpy(v4, *(const void **)a2, 8 * *((unsigned __int8 *)a2 + 33));
  *(_WORD *)((char *)this + 33) = *(_WORD *)((char *)a2 + 33);
  *((_BYTE *)this + 32) = 0;
  v5 = *((unsigned __int8 *)a2 + 32);
  if (*((_BYTE *)a2 + 32))
  {
    v6 = (const void *)*((_QWORD *)a2 + 3);
    v7 = malloc_type_malloc(12 * v5, 0x10000403E1C8BA9uLL);
    *((_QWORD *)this + 3) = v7;
    if (v7)
    {
      *((_BYTE *)this + 32) = v5;
      memcpy(v7, v6, 12 * v5);
    }
  }
}

void sub_1885B0474(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<FeatureStyleAttributes>::__on_zero_shared(uint64_t a1)
{
  FeatureStyleAttributes::~FeatureStyleAttributes((FeatureStyleAttributes *)(a1 + 24));
}

void FeatureStyleAttributes::~FeatureStyleAttributes(FeatureStyleAttributes *this)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  v2 = (char *)this + 8;
  if (*((_QWORD *)this + 1))
  {
    v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  else
  {
    free(*(void **)this);
    *(_QWORD *)this = 0;
    *((_BYTE *)this + 33) = 0;
  }
  v6 = (void *)*((_QWORD *)this + 3);
  if (v6)
  {
    free(v6);
    *((_QWORD *)this + 3) = 0;
    *((_BYTE *)this + 32) = 0;
  }
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)v2);
}

id _attributionsToRequestForPlaceDatas(void *a1)
{
  id v1;
  void *v2;
  int *v3;
  int *v4;
  int *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  id *v17;
  void *v18;
  id *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  id *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t k;
  id *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  id *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t m;
  id *v42;
  id *v43;
  id *v44;
  void *v45;
  uint64_t v46;
  id *v47;
  id *v48;
  void *v49;
  id *v50;
  id *v51;
  void *v52;
  uint64_t v53;
  id *v54;
  id *v55;
  void *v56;
  id v57;
  id obj;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  id *v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _BYTE v94[128];
  _BYTE v95[128];
  _BYTE v96[128];
  _BYTE v97[128];
  _BYTE v98[128];
  _BYTE v99[128];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  obj = v1;
  v61 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v90, v99, 16);
  if (v61)
  {
    v3 = &OBJC_IVAR___GEOXPCReply__methodName;
    v60 = *(_QWORD *)v91;
    v4 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
    v5 = &OBJC_IVAR___GEOXPCReply__methodName;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v91 != v60)
          objc_enumerationMutation(obj);
        v65 = v6;
        v7 = *(void **)(*((_QWORD *)&v90 + 1) + 8 * v6);
        v86 = 0u;
        v87 = 0u;
        v88 = 0u;
        v89 = 0u;
        objc_msgSend(v7, "components");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v86, v98, 16);
        if (v9)
        {
          v10 = v9;
          v11 = *(_QWORD *)v87;
          do
          {
            for (i = 0; i != v10; ++i)
            {
              if (*(_QWORD *)v87 != v11)
                objc_enumerationMutation(v8);
              v13 = *(_QWORD *)(*((_QWORD *)&v86 + 1) + 8 * i);
              v14 = objc_msgSend((id)v13, "statusCodeIsValid");
              if (v13)
                v15 = v14 == 0;
              else
                v15 = 1;
              if (!v15
                && ((*(_WORD *)(v13 + v5[731]) & 0x80) == 0 || *(_DWORD *)(v13 + 88) != 65)
                && *(_QWORD *)(v13 + 16))
              {
                -[GEOPDComponent attribution]((id *)v13);
                v16 = objc_claimAutoreleasedReturnValue();
                v17 = (id *)v16;
                if (v16)
                {
                  -[GEOPDAttribution _readVendorId](v16);
                  if (*(id *)((char *)v17 + v3[607]))
                  {
                    -[GEOPDAttribution vendorId](v17);
                    v18 = (void *)objc_claimAutoreleasedReturnValue();
                    objc_msgSend(v2, "addObject:", v18);

                    v5 = &OBJC_IVAR___GEOXPCReply__methodName;
                  }
                }

              }
            }
            v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v86, v98, 16);
          }
          while (v10);
        }

        +[GEOPDRestaurantReservationLink reservationLinkForPlaceData:](GEOPDRestaurantReservationLink, "reservationLinkForPlaceData:", v7);
        v19 = (id *)objc_claimAutoreleasedReturnValue();
        v82 = 0u;
        v83 = 0u;
        v84 = 0u;
        v85 = 0u;
        v64 = v19;
        -[GEOPDRestaurantReservationLink restaurantLinks](v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v82, v97, 16);
        if (v21)
        {
          v22 = v21;
          v23 = *(_QWORD *)v83;
          do
          {
            for (j = 0; j != v22; ++j)
            {
              if (*(_QWORD *)v83 != v23)
                objc_enumerationMutation(v20);
              v25 = *(id **)(*((_QWORD *)&v82 + 1) + 8 * j);
              if (v25)
              {
                -[GEOPDVendorIDLink _readVendorId](*(_QWORD *)(*((_QWORD *)&v82 + 1) + 8 * j));
                if (*(id *)((char *)v25 + v4[573]))
                {
                  -[GEOPDVendorIDLink vendorId](v25);
                  v26 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v2, "addObject:", v26);

                }
              }
            }
            v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v82, v97, 16);
          }
          while (v22);
        }

        _fetchPhotoRelatedDataAttributionsForPlaceData(v7);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        v78 = 0u;
        v79 = 0u;
        v80 = 0u;
        v81 = 0u;
        v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v78, v96, 16);
        if (v28)
        {
          v29 = v28;
          v30 = *(_QWORD *)v79;
          do
          {
            for (k = 0; k != v29; ++k)
            {
              if (*(_QWORD *)v79 != v30)
                objc_enumerationMutation(v27);
              v32 = *(id **)(*((_QWORD *)&v78 + 1) + 8 * k);
              if (v32)
              {
                -[GEOPDAttribution _readVendorId](*(_QWORD *)(*((_QWORD *)&v78 + 1) + 8 * k));
                if (*(id *)((char *)v32 + v3[607]))
                {
                  -[GEOPDAttribution vendorId](v32);
                  v33 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v2, "addObject:", v33);

                }
              }
            }
            v29 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v78, v96, 16);
          }
          while (v29);
        }
        v63 = v27;
        +[GEOPDTemplatePlace templatedPlacesForPlaceData:](GEOPDTemplatePlace, "templatedPlacesForPlaceData:", v7);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        v74 = 0u;
        v75 = 0u;
        v76 = 0u;
        v77 = 0u;
        v62 = v34;
        objc_msgSend(v34, "allValues");
        v66 = (id)objc_claimAutoreleasedReturnValue();
        v68 = objc_msgSend(v66, "countByEnumeratingWithState:objects:count:", &v74, v95, 16);
        if (v68)
        {
          v67 = *(_QWORD *)v75;
          do
          {
            v35 = 0;
            do
            {
              if (*(_QWORD *)v75 != v67)
                objc_enumerationMutation(v66);
              v69 = v35;
              v36 = *(id **)(*((_QWORD *)&v74 + 1) + 8 * v35);
              v70 = 0u;
              v71 = 0u;
              v72 = 0u;
              v73 = 0u;
              -[GEOPDTemplatePlace templateDatas](v36);
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v70, v94, 16);
              if (v38)
              {
                v39 = v38;
                v40 = *(_QWORD *)v71;
                do
                {
                  for (m = 0; m != v39; ++m)
                  {
                    if (*(_QWORD *)v71 != v40)
                      objc_enumerationMutation(v37);
                    v42 = *(id **)(*((_QWORD *)&v70 + 1) + 8 * m);
                    -[GEOPDTemplateData footer](v42);
                    v43 = (id *)objc_claimAutoreleasedReturnValue();
                    -[GEOPDDataItem ratingData](v43);
                    v44 = (id *)objc_claimAutoreleasedReturnValue();
                    -[GEOPDRatingData vendorId](v44);
                    v45 = (void *)objc_claimAutoreleasedReturnValue();
                    v46 = objc_msgSend(v45, "length");

                    if (v46)
                    {
                      -[GEOPDTemplateData footer](v42);
                      v47 = (id *)objc_claimAutoreleasedReturnValue();
                      -[GEOPDDataItem ratingData](v47);
                      v48 = (id *)objc_claimAutoreleasedReturnValue();
                      -[GEOPDRatingData vendorId](v48);
                      v49 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v2, "addObject:", v49);

                    }
                    -[GEOPDTemplateData subtitle](v42);
                    v50 = (id *)objc_claimAutoreleasedReturnValue();
                    -[GEOPDDataItem ratingData](v50);
                    v51 = (id *)objc_claimAutoreleasedReturnValue();
                    -[GEOPDRatingData vendorId](v51);
                    v52 = (void *)objc_claimAutoreleasedReturnValue();
                    v53 = objc_msgSend(v52, "length");

                    if (v53)
                    {
                      -[GEOPDTemplateData subtitle](v42);
                      v54 = (id *)objc_claimAutoreleasedReturnValue();
                      -[GEOPDDataItem ratingData](v54);
                      v55 = (id *)objc_claimAutoreleasedReturnValue();
                      -[GEOPDRatingData vendorId](v55);
                      v56 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v2, "addObject:", v56);

                    }
                  }
                  v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v70, v94, 16);
                }
                while (v39);
              }

              v35 = v69 + 1;
            }
            while (v69 + 1 != v68);
            v68 = objc_msgSend(v66, "countByEnumeratingWithState:objects:count:", &v74, v95, 16);
          }
          while (v68);
        }

        v6 = v65 + 1;
        v3 = &OBJC_IVAR___GEOXPCReply__methodName;
        v4 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
        v5 = &OBJC_IVAR___GEOXPCReply__methodName;
      }
      while (v65 + 1 != v61);
      v61 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v90, v99, 16);
    }
    while (v61);
  }

  if (objc_msgSend(v2, "count"))
    v57 = v2;
  else
    v57 = 0;

  return v57;
}

id _fetchPhotoRelatedDataAttributionsForPlaceData(void *a1)
{
  id v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  id *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t j;
  id *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  id *v37;
  id *v38;
  void *v39;
  void *v40;
  id obj;
  uint64_t v42;
  uint64_t v43;
  id *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[128];
  _BYTE v58[128];
  _BYTE v59[128];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  +[GEOPDCaptionedPhoto captionedPhotosForPlaceData:](GEOPDCaptionedPhoto, "captionedPhotosForPlaceData:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v53, v59, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v54;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v54 != v6)
          objc_enumerationMutation(v3);
        v8 = *(id **)(*((_QWORD *)&v53 + 1) + 8 * i);
        -[GEOPDCaptionedPhoto attribution](v8);
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = (_QWORD *)v9;
        if (v9)
        {
          -[GEOPDAttribution _readVendorId](v9);
          v11 = v10[7];

          if (!v11)
            continue;
          -[GEOPDCaptionedPhoto attribution](v8);
          v10 = (_QWORD *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v2, "addObject:", v10);
        }

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v53, v59, 16);
    }
    while (v5);
  }
  objc_msgSend(v1, "componentOfType:options:", 26, 3);
  v12 = objc_claimAutoreleasedReturnValue();
  v13 = (id *)v12;
  if (v12)
  {
    v14 = *(id *)(v12 + 16);
    v15 = v14;
    if (v14)
    {
      -[GEOPDAttribution _readVendorId]((uint64_t)v14);
      v16 = v15[7];

      if (!v16)
        goto LABEL_17;
      v15 = v13[2];
      objc_msgSend(v2, "addObject:", v15);
    }

  }
LABEL_17:
  objc_msgSend(v1, "componentOfType:options:", 84, 3);
  v17 = (id *)objc_claimAutoreleasedReturnValue();
  -[GEOPDComponent commingledAttributions](v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  v19 = objc_msgSend(v18, "count");

  if (v19)
  {
    -[GEOPDComponent commingledAttributions](v17);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObjectsFromArray:", v20);
  }
  else
  {
    -[GEOPDComponent attribution](v17);
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v21)
      goto LABEL_22;
    -[GEOPDComponent attribution](v17);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "addObject:", v20);
  }

LABEL_22:
  v38 = v13;
  v39 = v3;
  v40 = v1;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v37 = v17;
  -[GEOPDComponent values](v17);
  obj = (id)objc_claimAutoreleasedReturnValue();
  v43 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v58, 16);
  if (v43)
  {
    v42 = *(_QWORD *)v50;
    do
    {
      for (j = 0; j != v43; ++j)
      {
        if (*(_QWORD *)v50 != v42)
          objc_enumerationMutation(obj);
        -[GEOPDComponentValue categorizedPhotos](*(id **)(*((_QWORD *)&v49 + 1) + 8 * j));
        v23 = (id *)objc_claimAutoreleasedReturnValue();
        v45 = 0u;
        v46 = 0u;
        v47 = 0u;
        v48 = 0u;
        v44 = v23;
        -[GEOPDCategorizedPhotos photos](v23);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v45, v57, 16, v37, v38, v39, v40);
        if (v25)
        {
          v26 = v25;
          v27 = *(_QWORD *)v46;
          do
          {
            v28 = 0;
            do
            {
              if (*(_QWORD *)v46 != v27)
                objc_enumerationMutation(v24);
              v29 = *(id **)(*((_QWORD *)&v45 + 1) + 8 * v28);
              -[GEOPDCaptionedPhoto attribution](v29);
              v30 = objc_claimAutoreleasedReturnValue();
              if (v30)
              {
                v31 = (_QWORD *)v30;
                -[GEOPDAttribution _readVendorId](v30);
                v32 = v31[7];

                if (!v32)
                  goto LABEL_36;
                -[GEOPDCaptionedPhoto attribution](v29);
                v33 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v2, "addObject:", v33);
              }
              else
              {
                v33 = 0;
              }

LABEL_36:
              ++v28;
            }
            while (v26 != v28);
            v34 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v45, v57, 16);
            v26 = v34;
          }
          while (v34);
        }

      }
      v43 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v58, 16);
    }
    while (v43);
  }

  v35 = (void *)objc_msgSend(v2, "copy");
  return v35;
}

void sub_1885B172C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1885B1974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void gcl::tmesh::DecoderImpl::decompressAdaptiveTraversal(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  int v16;
  int *v17;
  _BOOL4 v18;
  _BOOL4 v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  unint64_t v31;
  _WORD *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  unsigned int v42;
  int v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  int v52;
  int v53;
  _DWORD *v54;
  int *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _BOOL4 v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  BOOL v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  unsigned int v104;
  _BOOL4 v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unsigned int v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  int *v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  int *v142;
  int v143;
  int v144;
  _QWORD *v145;
  int ***v146;
  uint64_t *v147;
  char *v148;
  int **v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  _BYTE *v155;
  int **v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned int v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int **v172;
  _OWORD *v173;
  int **v174;
  uint64_t v175;
  __int128 v176;
  int *v177;
  int ***v178;
  uint64_t *v179;
  int v180;
  int v181;
  _BOOL4 v182;
  _BOOL4 v183;
  _BOOL4 v184;
  unsigned int v185;
  unsigned int v186;
  int v187;
  int v188;
  uint64_t v189;
  unint64_t v190;
  int v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int v196;
  _DWORD *v198;
  int *v199;
  uint64_t v200;
  unint64_t v202;
  int v204;
  uint64_t v205;

  v3 = a1[948];
  v205 = 0;
  v4 = a1[947];
  if (v4 >= 1)
  {
    v5 = (uint64_t)a1;
    v6 = 0;
    v196 = v3 + 1;
    v199 = a1 + 62;
    LODWORD(v7) = -1;
    do
    {
      if (v6 == HIDWORD(v205))
      {
        ++HIDWORD(v205);
        if (*(_BYTE *)(v5 + 3820))
          v8 = -1;
        else
          v8 = v7;
        *(_DWORD *)(*(_QWORD *)(v5 + 176) + 12 * v6) = v8;
        gcl::tmesh::DecoderImpl::decompressGeometry(v5, v6, a2);
        gcl::MutableApproximatePriorityQueue<gcl::tmesh::VertexPriority,64>::insert(v199, (int *)(*(_QWORD *)(v5 + 224) + 12 * v6));
        v9 = *(_DWORD *)(v5 + 248);
        if (v9)
        {
          v193 = v6;
          while (1)
          {
            v10 = *(_DWORD *)(v5 + 252);
            if ((v10 & 0x80000000) != 0)
            {
              v13 = 0;
            }
            else
            {
              *(_DWORD *)(v5 + 248) = --v9;
              v11 = v5 + 248 + 24 * v10;
              v12 = *(_QWORD *)(v11 + 16);
              v13 = *(_QWORD *)(v12 - 8);
              *(_QWORD *)(v11 + 16) = v12 - 8;
              *(_DWORD *)(v13 + 8) = -1;
              if (v9)
              {
                do
                {
                  if (*(_QWORD *)(v5 + 24 * v10 + 256) != *(_QWORD *)(v5 + 24 * v10 + 264))
                    break;
                  *(_DWORD *)(v5 + 252) = v10 - 1;
                  v14 = (int)v10-- <= 0;
                }
                while (!v14);
              }
              else
              {
                *(_DWORD *)(v5 + 252) = -1;
              }
            }
            v7 = 0xAAAAAAAAAAAAAAABLL * ((v13 - *(_QWORD *)(v5 + 224)) >> 2);
            v17 = (int *)(*(_QWORD *)(v5 + 152)
                        + ((uint64_t)(0xAAAAAAAB00000000 * ((v13 - *(_QWORD *)(v5 + 224)) >> 2)) >> 28));
            v15 = *v17;
            v16 = v17[1];
            v18 = *v17 != -1;
            v19 = v16 == *v17 && v15 != -1;
            v20 = (v18 | (2 * (v16 != -1))) + v19;
            v21 = v5 + 2 * v20;
            v22 = *(unsigned __int16 *)(v21 + 2048);
            v23 = *(_DWORD *)(v5 + 2732);
            v24 = *(_DWORD *)(v5 + 2736);
            if (v23 < 0x40000001)
            {
              v25 = *(_DWORD *)(v5 + 2744);
              while (1)
              {
                v24 *= 2;
                *(_DWORD *)(v5 + 2744) = --v25;
                if (v25)
                  goto LABEL_27;
                v28 = *(_QWORD *)(v5 + 2720);
                *(_QWORD *)(v5 + 2720) = v28 + 1;
                v29 = *(unsigned int *)(v5 + 2704);
                if (v28 + 1 >= v29)
                {
                  v30 = 65280;
                  v31 = v28 + 2;
                  *(_QWORD *)(v5 + 2720) = v31;
                  if (v31 >= v29)
                  {
LABEL_33:
                    v26 = 255;
                    goto LABEL_26;
                  }
                }
                else
                {
                  v30 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 2712) + v28 + 1) << 8;
                  v31 = v28 + 2;
                  *(_QWORD *)(v5 + 2720) = v31;
                  if (v31 >= v29)
                    goto LABEL_33;
                }
                v26 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 2712) + v31);
LABEL_26:
                v24 |= v30 | v26;
                v25 = 16;
                *(_DWORD *)(v5 + 2744) = 16;
LABEL_27:
                v27 = 2 * v23;
                v41 = v23 >= 0x20000001;
                v23 *= 2;
                if (v41)
                  goto LABEL_35;
              }
            }
            v27 = *(_DWORD *)(v5 + 2732);
LABEL_35:
            v32 = (_WORD *)(v21 + 2048);
            v33 = (HIWORD(v27) * v22) & 0xFFFF0000;
            v34 = v27 - v33;
            v35 = v24 < v33 ? 0 : (HIWORD(v27) * v22) & 0xFFFF0000;
            *(_DWORD *)(v5 + 2736) = v24 - v35;
            *v32 = *(_WORD *)(v5 + 2 * ((v22 >> 7) & 0x1FE | (v24 >= v33)) + 2752) + v22;
            v36 = v24 < v33 ? v33 : v34;
            *(_DWORD *)(v5 + 2732) = v36;
            if (v24 >= v33)
              break;
LABEL_11:
            if (!v9)
              goto LABEL_3;
          }
          v194 = (int)v7;
          v195 = v7;
          v198 = (_DWORD *)(a2 + 12 * (int)v7);
          while (2)
          {
            v204 = 0;
            v43 = gcl::tmesh::DecoderImpl::decompressTFanConnectivity((gcl::tmesh::DecoderImpl *)v5, v7, v20, a3, &v204, (_DWORD *)&v205 + 1, &v205);
            if (v43 < 0 || (v44 = v43, v43 > v196))
            {
LABEL_273:
              *(_DWORD *)(v5 + 3872) = 3;
              return;
            }
            v45 = v204 == 3 || v204 == 5;
            if (v45)
            {
              if (v43)
              {
                v46 = v43 + 1;
                do
                {
                  v47 = (v46 - 2);
                  if (*(_BYTE *)(*(_QWORD *)(v5 + 32) + v47))
                    gcl::tmesh::DecoderImpl::decompressGeometry(v5, *(_DWORD *)(*(_QWORD *)(v5 + 8) + 4 * v47), a2);
                  --v46;
                }
                while (v46 > 1);
                goto LABEL_69;
              }
            }
            else if (v43)
            {
              v48 = 0;
              do
              {
                if (*(_BYTE *)(*(_QWORD *)(v5 + 32) + v48))
                  gcl::tmesh::DecoderImpl::decompressGeometry(v5, *(_DWORD *)(*(_QWORD *)(v5 + 8) + 4 * v48), a2);
                ++v48;
              }
              while (v44 != v48);
LABEL_69:
              if (v44 > 1)
              {
                if (*(_BYTE *)(v5 + 3818))
                {
                  v49 = *(_QWORD *)(v5 + 224);
                  v50 = v44 - 1;
                  v51 = (int *)(*(_QWORD *)(v5 + 8) + 4);
                  while (1)
                  {
                    v53 = *(v51 - 1);
                    v52 = *v51;
                    v54 = (_DWORD *)(a2 + 12 * v53);
                    v55 = (int *)(a2 + 12 * *v51);
                    v57 = *v55;
                    v56 = v55[1];
                    v58 = v54[1];
                    v59 = *v55 - *v54;
                    v60 = v56 - v58;
                    v61 = v55[2];
                    v62 = v54[2];
                    v63 = v61 - v62;
                    v64 = v198[1];
                    v65 = *v198 - *v54;
                    v66 = v64 - v58;
                    v67 = v198[2];
                    v68 = v67 - v62;
                    if (v59 >= 0)
                      v69 = v59;
                    else
                      v69 = -v59;
                    if (v60 >= 0)
                      v70 = v60;
                    else
                      v70 = -v60;
                    if (v63 >= 0)
                      v71 = v63;
                    else
                      v71 = -v63;
                    v74 = v69 < 0x1000 && v70 < 0x1000 && v71 < 0x1000;
                    if (v65 >= 0)
                      v75 = v65;
                    else
                      v75 = -v65;
                    if (v66 >= 0)
                      v76 = v66;
                    else
                      v76 = -v66;
                    if (v68 >= 0)
                      v77 = v68;
                    else
                      v77 = -v68;
                    if (v74 && v75 <= 0xFFF && v76 <= 0xFFF && v77 <= 0xFFF)
                    {
                      v78 = v65 * v59 + v66 * v60 + v68 * v63;
                      if (!v78)
                        goto LABEL_145;
                      v79 = v68 * v60 - v66 * v63;
                      if (v79 < 0)
                        v79 = v66 * v63 - v68 * v60;
                      v80 = v65 * v63 - v68 * v59;
                      if (v80 < 0)
                        v80 = -v80;
                      v81 = v66 * v59 - v65 * v60;
                      if (v81 < 0)
                        v81 = -v81;
                      v82 = v79 + v80;
                      if (v80 < v81)
                      {
                        v83 = v81;
                      }
                      else
                      {
                        v82 = v79 + v81;
                        v83 = v80;
                      }
                      v84 = v79 >= v80 && v79 >= v81;
                      if (v84)
                        v85 = v80 + v81;
                      else
                        v85 = v82;
                      if (v84)
                        v86 = v79;
                      else
                        v86 = v83;
                      v87 = v86 + (v85 >> 2);
                      if (v78 < 0)
                        LODWORD(v88) = -16 * v78 / (int)(v87 - v78) + 16;
                      else
                        LODWORD(v88) = (int)(16 * v87) / (int)(v87 + v78);
                    }
                    else
                    {
                      v89 = v66 * (uint64_t)v60 + v65 * (uint64_t)v59 + v68 * (uint64_t)v63;
                      if (!v89)
                      {
LABEL_145:
                        LODWORD(v88) = 16;
                        goto LABEL_148;
                      }
                      v90 = v68 * (uint64_t)v60 - v66 * (uint64_t)v63;
                      if (v90 < 0)
                        v90 = v66 * (uint64_t)v63 - v68 * (uint64_t)v60;
                      v91 = v65 * (uint64_t)v63 - v68 * (uint64_t)v59;
                      if (v91 < 0)
                        v91 = -v91;
                      v92 = v66 * (uint64_t)v59 - v65 * (uint64_t)v60;
                      if (v92 < 0)
                        v92 = -v92;
                      v93 = v90 + v91;
                      if (v91 < (unint64_t)v92)
                      {
                        v94 = v92;
                      }
                      else
                      {
                        v93 = v90 + v92;
                        v94 = v91;
                      }
                      v95 = v90 >= (unint64_t)v91 && v90 >= (unint64_t)v92;
                      if (v95)
                        v96 = v91 + v92;
                      else
                        v96 = v93;
                      if (v95)
                        v97 = v90;
                      else
                        v97 = v94;
                      v88 = v97 + (v96 >> 2);
                      if (v89 < 0)
                        LODWORD(v88) = -16 * v89 / (v88 - v89) + 16;
                      else
                        v88 = 16 * v88 / (v88 + v89);
                    }
LABEL_148:
                    v98 = *v198 - v57;
                    v99 = v64 - v56;
                    v100 = v67 - v61;
                    v101 = -v59;
                    v102 = -v60;
                    v103 = -v63;
                    if (v98 >= 0)
                      v104 = v98;
                    else
                      v104 = -v98;
                    v105 = v104 < 0x1000 && v74;
                    if (v99 >= 0)
                      v106 = v99;
                    else
                      v106 = -v99;
                    if (v100 >= 0)
                      v107 = v100;
                    else
                      v107 = -v100;
                    if (!v105 || v106 > 0xFFF || v107 > 0xFFF)
                    {
                      v113 = v99 * (uint64_t)v102 + v98 * (uint64_t)v101 + v100 * (uint64_t)v103;
                      if (v113)
                      {
                        v114 = -v59;
                        v115 = v100 * (uint64_t)v102 - v99 * (uint64_t)v103;
                        if (v115 < 0)
                          v115 = v99 * (uint64_t)v103 - v100 * (uint64_t)v102;
                        v116 = v98 * (uint64_t)v103 - v100 * (uint64_t)v114;
                        if (v116 < 0)
                          v116 = -v116;
                        v117 = v99 * (uint64_t)v114 - v98 * (uint64_t)v102;
                        if (v117 < 0)
                          v117 = -v117;
                        v118 = v115 + v116;
                        if (v116 < (unint64_t)v117)
                        {
                          v119 = v117;
                        }
                        else
                        {
                          v118 = v115 + v117;
                          v119 = v116;
                        }
                        v120 = v115 >= (unint64_t)v116 && v115 >= (unint64_t)v117;
                        if (v120)
                          v121 = v116 + v117;
                        else
                          v121 = v118;
                        if (v120)
                          v122 = v115;
                        else
                          v122 = v119;
                        v123 = v122 + (v121 >> 2);
                        if (v113 < 0)
                          LODWORD(v113) = -16 * v113 / (uint64_t)(v123 - v113) + 16;
                        else
                          v113 = (uint64_t)(16 * v123) / (uint64_t)(v123 + v113);
                        goto LABEL_202;
                      }
LABEL_195:
                      LODWORD(v113) = 16;
                      goto LABEL_202;
                    }
                    v108 = v98 * v101 + v99 * v102 + v100 * v103;
                    if (!v108)
                      goto LABEL_195;
                    v109 = v99 * v63 + v100 * v102;
                    if (v109 < 0)
                      v109 = -v109;
                    v110 = v98 * v103 + v100 * v59;
                    if (v110 < 0)
                      v110 = -v110;
                    v111 = v98 * v60 + v99 * v101;
                    if (v111 < 0)
                      v111 = -v111;
                    if (v109 < v110 || v109 < v111)
                    {
                      v124 = v109 + v110;
                      v125 = v109 + v111;
                      if (v110 < v111)
                      {
                        v126 = v111;
                      }
                      else
                      {
                        v124 = v125;
                        v126 = v110;
                      }
                      v112 = v126 + (v124 >> 2);
                      if (v108 < 0)
                      {
LABEL_173:
                        LODWORD(v113) = -16 * v108 / (int)(v112 - v108) + 16;
                        goto LABEL_202;
                      }
                    }
                    else
                    {
                      v112 = v109 + ((v110 + v111) >> 2);
                      if (v108 < 0)
                        goto LABEL_173;
                    }
                    LODWORD(v113) = (int)(16 * v112) / (int)(v112 + v108);
LABEL_202:
                    v127 = 12 * v53;
                    *(_DWORD *)(v49 + v127) += v88;
                    v128 = 12 * v52;
                    v129 = *(_DWORD *)(v49 + v128) + v113;
                    *(_DWORD *)(v49 + v128) = v129;
                    if ((*(_DWORD *)(v49 + v127) & 0x80000000) != 0 || v129 < 0)
                      goto LABEL_273;
                    if (*(_DWORD *)(v5 + 3872))
                      return;
                    ++v51;
                    if (!--v50)
                      goto LABEL_209;
                  }
                }
                v130 = *(_QWORD *)(v5 + 224);
                v131 = v44 - 1;
                v132 = (int *)(*(_QWORD *)(v5 + 8) + 4);
                do
                {
                  v133 = *v132;
                  *(_DWORD *)(v130 + 12 * *(v132 - 1)) += 8;
                  *(_DWORD *)(v130 + 12 * v133) += 8;
                  ++v132;
                  --v131;
                }
                while (v131);
              }
LABEL_209:
              if (v44 >= 1)
              {
                v134 = 0;
                v135 = v44;
                v200 = v44;
                while (1)
                {
                  v139 = *(_DWORD *)(*(_QWORD *)(v5 + 8) + 4 * v134);
                  v140 = *(_QWORD *)(v5 + 224);
                  if (*(_BYTE *)(*(_QWORD *)(v5 + 32) + v134))
                  {
                    v141 = *(_DWORD *)(v5 + 252);
                    goto LABEL_218;
                  }
                  v158 = *(unsigned int *)(v140 + 12 * v139 + 8);
                  if ((v158 & 0x80000000) == 0)
                    break;
LABEL_215:
                  if (++v134 == v135)
                    goto LABEL_258;
                }
                v159 = v5 + 24 * *(int *)(v140 + 12 * v139 + 4);
                v160 = (uint64_t *)(v159 + 264);
                v163 = v159 + 256;
                v161 = *(_QWORD *)(v159 + 256);
                v162 = *(_QWORD *)(v163 + 8);
                v164 = ((unint64_t)(v162 - v161) >> 3) - 1;
                if ((_DWORD)v158 != v164)
                {
                  v165 = 8 * v164;
                  v166 = *(_QWORD *)(v161 + 8 * v158);
                  *(_QWORD *)(v161 + 8 * v158) = *(_QWORD *)(v161 + v165);
                  *(_QWORD *)(v161 + v165) = v166;
                  *(_DWORD *)(*(_QWORD *)(v161 + 8 * v158) + 8) = v158;
                  *(_DWORD *)(v166 + 8) = v164;
                  v162 = *v160;
                }
                v167 = *(_QWORD *)(v162 - 8);
                *v160 = v162 - 8;
                *(_DWORD *)(v167 + 8) = -1;
                v45 = (*v199)-- == 1;
                if (v45)
                {
                  v141 = -1;
                  *(_DWORD *)(v5 + 252) = -1;
                }
                else
                {
                  v168 = *(_DWORD *)(v5 + 252);
                  v141 = v168;
                  if ((v168 & 0x80000000) == 0)
                  {
                    while (*(_QWORD *)(v5 + 24 * v168 + 256) == *(_QWORD *)(v5 + 24 * v168 + 264))
                    {
                      v141 = v168 - 1;
                      *(_DWORD *)(v5 + 252) = v168 - 1;
                      v14 = (int)v168-- <= 0;
                      if (v14)
                      {
                        if (v167)
                          goto LABEL_218;
                        goto LABEL_215;
                      }
                    }
                    v141 = v168;
                    if (v167)
                      goto LABEL_218;
                    goto LABEL_215;
                  }
                }
LABEL_218:
                v142 = (int *)(v140 + 12 * v139);
                if (*v142 >= 63)
                  v143 = 63;
                else
                  v143 = *v142;
                if (v143 <= v141)
                  v144 = v141;
                else
                  v144 = v143;
                *(_DWORD *)(v5 + 252) = v144;
                v145 = (_QWORD *)(v5 + 24 * v143);
                v146 = (int ***)(v145 + 32);
                v147 = v145 + 33;
                v148 = (char *)v145[32];
                v149 = (int **)v145[33];
                v150 = ((char *)v149 - v148) >> 3;
                v151 = v140 + 12 * v139;
                *(_DWORD *)(v151 + 4) = v143;
                *(_DWORD *)(v151 + 8) = v150;
                v152 = v145[34];
                if ((unint64_t)v149 >= v152)
                {
                  v153 = v150 + 1;
                  if ((unint64_t)(v150 + 1) >> 61)
                    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
                  v154 = v152 - (_QWORD)v148;
                  if (v154 >> 2 > v153)
                    v153 = v154 >> 2;
                  if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFF8)
                    v153 = 0x1FFFFFFFFFFFFFFFLL;
                  v202 = v153;
                  if (v153)
                  {
                    if (v153 >> 61)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v155 = operator new(8 * v153);
                    v146 = (int ***)(v145 + 32);
                    v147 = v145 + 33;
                    v5 = (uint64_t)a1;
                    v156 = (int **)&v155[8 * v150];
                    *v156 = v142;
                    v136 = (uint64_t)(v156 + 1);
                    v157 = (char *)((char *)v149 - v148);
                    if (v149 == (int **)v148)
                    {
LABEL_252:
                      *v146 = v156;
                      *v147 = v136;
                      v145[34] = &v155[8 * v202];
                      if (v149)
                      {
                        v178 = v146;
                        v179 = v147;
                        operator delete(v149);
                        v147 = v179;
                        v5 = (uint64_t)a1;
                        v146 = v178;
                      }
                      v135 = v200;
                      goto LABEL_212;
                    }
                  }
                  else
                  {
                    v155 = 0;
                    v156 = (int **)(8 * v150);
                    *(_QWORD *)(8 * v150) = v142;
                    v136 = 8 * v150 + 8;
                    v157 = (char *)((char *)v149 - v148);
                    if (v149 == (int **)v148)
                      goto LABEL_252;
                  }
                  v169 = (unint64_t)(v157 - 8);
                  if (v169 < 0x58)
                    goto LABEL_279;
                  if ((char *)v149 - v155 - (((char *)v149 - v148) & 0xFFFFFFFFFFFFFFF8) < 0x20)
                    goto LABEL_279;
                  v170 = (v169 >> 3) + 1;
                  v171 = 8 * (v170 & 0x3FFFFFFFFFFFFFFCLL);
                  v172 = &v149[v171 / 0xFFFFFFFFFFFFFFF8];
                  v156 = (int **)((char *)v156 - v171);
                  v173 = &v155[8 * v150 - 16];
                  v174 = v149 - 2;
                  v175 = v170 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v176 = *(_OWORD *)v174;
                    *(v173 - 1) = *((_OWORD *)v174 - 1);
                    *v173 = v176;
                    v173 -= 2;
                    v174 -= 4;
                    v175 -= 4;
                  }
                  while (v175);
                  v149 = v172;
                  if (v170 != (v170 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_279:
                    do
                    {
                      v177 = *--v149;
                      *--v156 = v177;
                    }
                    while (v149 != (int **)v148);
                  }
                  v149 = *v146;
                  goto LABEL_252;
                }
                *v149 = v142;
                v136 = (uint64_t)(v149 + 1);
LABEL_212:
                *v147 = v136;
                ++*(_DWORD *)(v5 + 248);
                v137 = v5 + 248 + 4 * v143;
                v138 = (unint64_t)(v136 - (_QWORD)*v146) >> 3;
                if (*(_DWORD *)(v137 + 1544) > (int)v138)
                  LODWORD(v138) = *(_DWORD *)(v137 + 1544);
                *(_DWORD *)(v137 + 1544) = v138;
                goto LABEL_215;
              }
            }
LABEL_258:
            if (*(_DWORD *)(v5 + 3872))
              return;
            v180 = *(_DWORD *)(*(_QWORD *)(v5 + 152) + 16 * v194);
            v181 = *(_DWORD *)(*(_QWORD *)(v5 + 152) + 16 * v194 + 4);
            v182 = v181 != -1;
            v183 = v180 != -1;
            v184 = v181 == v180 && v180 != -1;
            v185 = *(_DWORD *)(v5 + 2732);
            v186 = *(_DWORD *)(v5 + 2736);
            if (v185 < 0x40000001)
            {
              v187 = *(_DWORD *)(v5 + 2744);
              LODWORD(v7) = v195;
              while (2)
              {
                v186 *= 2;
                *(_DWORD *)(v5 + 2744) = --v187;
                if (v187)
                  goto LABEL_266;
                v189 = *(_QWORD *)(v5 + 2720);
                *(_QWORD *)(v5 + 2720) = v189 + 1;
                v190 = *(unsigned int *)(v5 + 2704);
                if (v189 + 1 >= v190)
                {
                  v191 = 65280;
                  v192 = v189 + 2;
                  *(_QWORD *)(v5 + 2720) = v192;
                  if (v192 >= v190)
                    goto LABEL_272;
                }
                else
                {
                  v191 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 2712) + v189 + 1) << 8;
                  v192 = v189 + 2;
                  *(_QWORD *)(v5 + 2720) = v192;
                  if (v192 >= v190)
                  {
LABEL_272:
                    v188 = 255;
LABEL_265:
                    v186 |= v191 | v188;
                    v187 = 16;
                    *(_DWORD *)(v5 + 2744) = 16;
LABEL_266:
                    v37 = 2 * v185;
                    v41 = v185 >= 0x20000001;
                    v185 *= 2;
                    if (v41)
                      goto LABEL_44;
                    continue;
                  }
                }
                break;
              }
              v188 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 2712) + v192);
              goto LABEL_265;
            }
            v37 = *(_DWORD *)(v5 + 2732);
            LODWORD(v7) = v195;
LABEL_44:
            v20 = (v183 | (2 * v182)) + v184;
            v38 = *(unsigned __int16 *)(v5 + 2058);
            v39 = (HIWORD(v37) * v38) & 0xFFFF0000;
            if (v186 < v39)
              v40 = 0;
            else
              v40 = (HIWORD(v37) * v38) & 0xFFFF0000;
            *(_DWORD *)(v5 + 2736) = v186 - v40;
            v41 = v186 >= v39;
            *(_WORD *)(v5 + 2058) = *(_WORD *)(v5 + 2 * ((v38 >> 7) & 0x1FE | (v186 >= v39)) + 2752) + v38;
            if (v186 < v39)
              v42 = (HIWORD(v37) * v38) & 0xFFFF0000;
            else
              v42 = v37 - v39;
            *(_DWORD *)(v5 + 2732) = v42;
            if (!v41)
            {
              v9 = *v199;
              v6 = v193;
              goto LABEL_11;
            }
            continue;
          }
        }
LABEL_3:
        v4 = *(_DWORD *)(v5 + 3788);
      }
      ++v6;
    }
    while (v6 < v4);
  }
}

int32x2_t gcl::tmesh::DecoderImpl::decompressGeometry(uint64_t a1, int a2, uint64_t a3)
{
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  int32x2_t *v26;
  int32x2_t *v27;
  int32x2_t *v28;
  int v29;
  int32x2_t *v30;
  int32x2_t *v31;
  uint32x2_t v32;
  BOOL v33;
  int v34;
  int32x2_t *v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  _BOOL4 v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int v44;
  _WORD *v45;
  unsigned int v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  _BOOL4 v56;
  unsigned int v57;
  int v58;
  int32x2_t *v59;
  int32x2_t *v60;
  int32x2_t *v61;
  int32x2_t v62;
  int v63;
  int32x2_t v64;
  int32x2_t *v65;
  int32x2_t *v66;
  int32x2_t *v67;
  int32x2_t *v68;
  __int32 v69;
  __int32 v70;
  int v71;
  int32x2_t v72;
  uint32x2_t v73;
  int32x2_t v74;
  int v75;
  int32x2_t *v76;
  int32x2_t *v77;
  int32x2_t *v78;
  int32x2_t *v79;
  int32x2_t *v80;
  __int32 v81;
  __int32 v82;
  int v83;
  int32x2_t *v84;
  int32x2_t *v85;
  int32x2_t *v86;
  int32x2_t *v87;
  uint32x2_t v88;
  int32x2_t v89;
  int64x2_t v90;
  int32x2_t *v91;
  int32x2_t result;
  int32x2_t v93;
  int32x2_t v94;
  int v95;

  v6 = (int *)(*(_QWORD *)(a1 + 176) + 12 * a2);
  v7 = *v6;
  v8 = v6[1];
  v9 = v6[2];
  v10 = *(_DWORD *)(a1 + 3812);
  if (v10 != 1)
  {
    if (v10 != 2)
      goto LABEL_17;
    v11 = (int *)(*(_QWORD *)(a1 + 200) + 12 * a2);
    v12 = v11[2];
    if (v12 != -1)
    {
      v14 = *v11;
      v13 = v11[1];
      v15 = *(unsigned __int16 *)(a1 + 2416);
      v16 = *(_DWORD *)(a1 + 2732);
      v17 = *(_DWORD *)(a1 + 2736);
      if (v16 < 0x40000001)
      {
        v18 = *(_DWORD *)(a1 + 2744);
        while (1)
        {
          v17 *= 2;
          *(_DWORD *)(a1 + 2744) = --v18;
          if (v18)
            goto LABEL_8;
          v21 = *(_QWORD *)(a1 + 2720);
          *(_QWORD *)(a1 + 2720) = v21 + 1;
          v22 = *(unsigned int *)(a1 + 2704);
          if (v21 + 1 >= v22)
          {
            v23 = 65280;
            v24 = v21 + 2;
            *(_QWORD *)(a1 + 2720) = v24;
            if (v24 >= v22)
            {
LABEL_14:
              v19 = 255;
              goto LABEL_7;
            }
          }
          else
          {
            v23 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v21 + 1) << 8;
            v24 = v21 + 2;
            *(_QWORD *)(a1 + 2720) = v24;
            if (v24 >= v22)
              goto LABEL_14;
          }
          v19 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v24);
LABEL_7:
          v17 |= v23 | v19;
          v18 = 16;
          *(_DWORD *)(a1 + 2744) = 16;
LABEL_8:
          v20 = 2 * v16;
          v38 = v16 >= 0x20000001;
          v16 *= 2;
          if (v38)
            goto LABEL_24;
        }
      }
      v20 = *(_DWORD *)(a1 + 2732);
LABEL_24:
      v36 = (HIWORD(v20) * v15) & 0xFFFF0000;
      v37 = v20 - v36;
      v38 = v17 >= v36;
      v39 = v17 >= v36;
      v40 = a1 + 2416;
      *(_WORD *)(a1 + 2416) = *(_WORD *)(a1 + 2 * ((v15 >> 7) & 0x1FE | v39) + 2752) + v15;
      if (v17 < v36)
        v41 = v36;
      else
        v41 = v37;
      if (v17 < v36)
        v42 = 0;
      else
        v42 = v36;
      v43 = 2;
      if (v38)
        v43 = 4;
      v44 = v17 - v42;
      *(_DWORD *)(a1 + 2732) = v41;
      *(_DWORD *)(a1 + 2736) = v44;
      v45 = (_WORD *)(v40 + v43);
      v46 = *(unsigned __int16 *)(v40 + v43);
      if (v41 < 0x40000001)
      {
        v47 = *(_DWORD *)(a1 + 2744);
        while (1)
        {
          v44 *= 2;
          *(_DWORD *)(a1 + 2744) = --v47;
          if (v47)
            goto LABEL_36;
          v50 = *(_QWORD *)(a1 + 2720);
          *(_QWORD *)(a1 + 2720) = v50 + 1;
          v51 = *(unsigned int *)(a1 + 2704);
          if (v50 + 1 >= v51)
          {
            v52 = 65280;
            v53 = v50 + 2;
            *(_QWORD *)(a1 + 2720) = v53;
            if (v53 >= v51)
            {
LABEL_42:
              v48 = 255;
              goto LABEL_35;
            }
          }
          else
          {
            v52 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v50 + 1) << 8;
            v53 = v50 + 2;
            *(_QWORD *)(a1 + 2720) = v53;
            if (v53 >= v51)
              goto LABEL_42;
          }
          v48 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v53);
LABEL_35:
          v44 |= v52 | v48;
          v47 = 16;
          *(_DWORD *)(a1 + 2744) = 16;
LABEL_36:
          v49 = 2 * v41;
          v38 = v41 >= 0x20000001;
          v41 *= 2;
          if (v38)
            goto LABEL_44;
        }
      }
      v49 = v41;
LABEL_44:
      v54 = (HIWORD(v49) * v46) & 0xFFFF0000;
      v55 = v49 - v54;
      v56 = v44 >= v54;
      *v45 = *(_WORD *)(a1 + 2 * ((v46 >> 7) & 0x1FE | v56) + 2752) + v46;
      if (v44 < v54)
        v57 = v54;
      else
        v57 = v55;
      if (v44 < v54)
        v54 = 0;
      *(_DWORD *)(a1 + 2732) = v57;
      *(_DWORD *)(a1 + 2736) = v44 - v54;
      v58 = v39 | (2 * v56);
      if (v58 == 2)
      {
        v65 = (int32x2_t *)(a3 + 12 * v8);
        v66 = (int32x2_t *)(a3 + 12 * v13);
        v67 = (int32x2_t *)(a3 + 12 * v7);
        v68 = (int32x2_t *)(a3 + 12 * v14);
        v69 = v67[1].i32[0];
        v70 = v68[1].i32[0];
        v33 = __OFADD__(v70, v69);
        v71 = v70 + v69;
        v72 = vadd_s32(*v66, *v65);
        v73 = (uint32x2_t)vadd_s32(*v68, *v67);
        v74 = vshr_n_s32((int32x2_t)vsra_n_u32(v73, v73, 0x1FuLL), 1uLL);
        if (v71 < 0 != v33)
          v75 = v71 + 1;
        else
          v75 = v71;
        v93 = vsub_s32(v72, v74);
        v29 = v66[1].i32[0] + v65[1].i32[0] - (v75 >> 1);
      }
      else if (v58 == 1)
      {
        v76 = (int32x2_t *)(a3 + 12 * v14);
        v77 = (int32x2_t *)(a3 + 12 * v13);
        v78 = (int32x2_t *)(a3 + 12 * v12);
        v93 = vsub_s32(vadd_s32(*v77, *v76), *v78);
        v29 = v77[1].i32[0] + v76[1].i32[0] - v78[1].i32[0];
      }
      else if (v58)
      {
        v79 = (int32x2_t *)(a3 + 12 * v7);
        v80 = (int32x2_t *)(a3 + 12 * v14);
        v81 = v79[1].i32[0];
        v82 = v80[1].i32[0];
        v33 = __OFADD__(v82, v81);
        v83 = v82 + v81;
        if (v83 < 0 != v33)
          ++v83;
        v84 = (int32x2_t *)(a3 + 12 * v8);
        v85 = (int32x2_t *)(a3 + 12 * v13);
        v86 = (int32x2_t *)(a3 + 12 * v9);
        v87 = (int32x2_t *)(a3 + 12 * v12);
        v88 = (uint32x2_t)vadd_s32(*v80, *v79);
        v89 = vadd_s32(*v85, *v84);
        v90 = vmull_s32(vsub_s32(vsra_n_s32(vadd_s32(v89, v89), (int32x2_t)vsra_n_u32(v88, v88, 0x1FuLL), 1uLL), vadd_s32(*v86, *v87)), vdup_n_s32(0x55555556u));
        v93 = vadd_s32(vshrn_n_s64(v90, 0x20uLL), vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v90, 0x3FuLL)));
        v29 = (2 * (v85[1].i32[0] + v84[1].i32[0]) + (v83 >> 1) - (v86[1].i32[0] + v87[1].i32[0])) / 3;
      }
      else
      {
        v59 = (int32x2_t *)(a3 + 12 * v7);
        v60 = (int32x2_t *)(a3 + 12 * v8);
        v61 = (int32x2_t *)(a3 + 12 * v9);
        v93 = vsub_s32(vadd_s32(*v60, *v59), *v61);
        v29 = v60[1].i32[0] + v59[1].i32[0] - v61[1].i32[0];
      }
      v25 = 1;
      goto LABEL_64;
    }
  }
  if (v9 != -1)
  {
    v25 = 0;
    v26 = (int32x2_t *)(a3 + 12 * v7);
    v27 = (int32x2_t *)(a3 + 12 * v8);
    v28 = (int32x2_t *)(a3 + 12 * v9);
    v93 = vsub_s32(vadd_s32(*v27, *v26), *v28);
    v29 = v27[1].i32[0] + v26[1].i32[0] - v28[1].i32[0];
LABEL_64:
    gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)&v94, a1, *(_DWORD *)(a1 + 3808), (uint64_t *)(a1 + 120 * v25 + 2424));
    v62 = v94;
    v63 = v95;
    v64 = v93;
    goto LABEL_65;
  }
LABEL_17:
  if (v8 != -1)
  {
    v25 = 0;
    v30 = (int32x2_t *)(a3 + 12 * v7);
    v31 = (int32x2_t *)(a3 + 12 * v8);
    v32 = (uint32x2_t)vadd_s32(*v31, *v30);
    LODWORD(v30) = v30[1].i32[0];
    LODWORD(v31) = v31[1].i32[0];
    v33 = __OFADD__((_DWORD)v31, (_DWORD)v30);
    v34 = (_DWORD)v31 + (_DWORD)v30;
    v93 = vshr_n_s32((int32x2_t)vsra_n_u32(v32, v32, 0x1FuLL), 1uLL);
    if (v34 < 0 != v33)
      ++v34;
    v29 = v34 >> 1;
    goto LABEL_64;
  }
  if (v7 != -1)
  {
    v25 = 0;
    v35 = (int32x2_t *)(a3 + 12 * v7);
    v93 = *v35;
    v29 = v35[1].i32[0];
    goto LABEL_64;
  }
  if (!*(_BYTE *)(a1 + 3820))
  {
    v25 = 0;
    v29 = 0;
    v93 = 0;
    goto LABEL_64;
  }
  gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)&v94, a1, 3, 0);
  v29 = 0;
  v62 = v94;
  v63 = v95;
  v64 = 0;
LABEL_65:
  v91 = (int32x2_t *)(a3 + 12 * a2);
  result = vadd_s32(v62, v64);
  *v91 = result;
  v91[1].i32[0] = v63 + v29;
  return result;
}

uint64_t gcl::tmesh::DecoderImpl::decodeResidual(uint64_t result, uint64_t a2, int a3, uint64_t *a4)
{
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  _WORD *v40;
  unsigned int v41;
  int v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  _BOOL4 v51;
  uint64_t v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  unsigned int v62;
  unsigned int v63;
  _BOOL4 v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  unsigned int v78;
  unsigned int v79;
  _BOOL4 v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  unsigned int v94;
  unsigned int v95;
  _BOOL4 v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  unint64_t v109;
  unsigned int v110;
  unsigned int v111;
  _BOOL4 v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  uint64_t v117;
  unsigned int v118;
  int v119;
  int v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  int v124;
  unint64_t v125;
  unsigned int v126;
  unsigned int v127;
  _BOOL4 v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  unint64_t v145;
  unsigned int *v146;
  int *v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  BOOL v151;
  int v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  int v161;
  unsigned int v162;
  uint64_t v163;
  unint64_t v164;
  int v165;
  unint64_t v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  BOOL v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  uint64_t v174;
  unsigned int v175;
  int v176;
  int v177;
  unsigned int v178;
  uint64_t v179;
  unint64_t v180;
  int v181;
  unint64_t v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  _WORD *v187;
  unsigned int v188;
  int v189;
  int v190;
  unsigned int v191;
  uint64_t v192;
  unint64_t v193;
  int v194;
  unint64_t v195;
  unsigned int v196;
  unsigned int v197;
  _BOOL4 v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  unsigned int v202;
  int v203;
  int v204;
  unsigned int v205;
  uint64_t v206;
  unint64_t v207;
  int v208;
  unint64_t v209;
  int v210;
  unsigned int v211;
  _BOOL4 v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  uint64_t v216;
  unsigned int v217;
  int v218;
  int v219;
  unsigned int v220;
  uint64_t v221;
  unint64_t v222;
  int v223;
  unint64_t v224;
  unsigned int v225;
  _BOOL4 v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  uint64_t v231;
  unsigned int v232;
  int v233;
  int v234;
  unsigned int v235;
  uint64_t v236;
  unint64_t v237;
  int v238;
  unint64_t v239;
  unsigned int v240;
  _BOOL4 v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  unsigned int v245;
  uint64_t v246;
  unsigned int v247;
  int v248;
  int v249;
  unsigned int v250;
  uint64_t v251;
  unint64_t v252;
  int v253;
  unint64_t v254;
  unsigned int v255;
  _BOOL4 v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  uint64_t v261;
  unsigned int v262;
  int v263;
  int v264;
  unsigned int v265;
  uint64_t v266;
  unint64_t v267;
  int v268;
  unint64_t v269;
  unsigned int v270;
  unsigned int v271;
  _BOOL4 v272;
  unsigned int v273;
  unsigned int v274;
  int v275;
  uint64_t v276;
  int v277;
  int v278;
  uint64_t v279;
  int v280;
  unsigned int v281;
  int v282;
  unsigned int v283;
  BOOL v284;
  int v285;
  uint64_t v286;
  unsigned int v287;
  int v288;
  unsigned int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  int v298;
  int v299;
  int v300;
  uint64_t v301;
  unint64_t v302;
  int v303;
  unint64_t v304;
  int v305;
  int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  int v311;
  int v312;
  int v313;
  uint64_t v314;
  unint64_t v315;
  int v316;
  unint64_t v317;
  unsigned int *v318;

  v6 = (_DWORD *)result;
  switch(a3)
  {
    case 0:
      v7 = 0;
      while (1)
      {
        v9 = *a4;
        v10 = *(unsigned __int16 *)(*a4 + 2 * v7);
        v11 = *(_DWORD *)(a2 + 2732);
        v12 = *(_DWORD *)(a2 + 2736);
        if (v11 < 0x40000001)
        {
          v13 = *(_DWORD *)(a2 + 2744);
          while (1)
          {
            v12 *= 2;
            *(_DWORD *)(a2 + 2744) = --v13;
            if (v13)
              goto LABEL_11;
            v16 = *(_QWORD *)(a2 + 2720);
            *(_QWORD *)(a2 + 2720) = v16 + 1;
            v17 = *(unsigned int *)(a2 + 2704);
            if (v16 + 1 >= v17)
            {
              v18 = 65280;
              v19 = v16 + 2;
              *(_QWORD *)(a2 + 2720) = v19;
              if (v19 >= v17)
              {
LABEL_17:
                v14 = 255;
                goto LABEL_10;
              }
            }
            else
            {
              v18 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v16 + 1) << 8;
              v19 = v16 + 2;
              *(_QWORD *)(a2 + 2720) = v19;
              if (v19 >= v17)
                goto LABEL_17;
            }
            v14 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v19);
LABEL_10:
            v12 |= v18 | v14;
            v13 = 16;
            *(_DWORD *)(a2 + 2744) = 16;
LABEL_11:
            v15 = 2 * v11;
            v23 = v11 >= 0x20000001;
            v11 *= 2;
            if (v23)
              goto LABEL_19;
          }
        }
        v15 = *(_DWORD *)(a2 + 2732);
LABEL_19:
        v8 = 0;
        v20 = (HIWORD(v15) * v10) & 0xFFFF0000;
        v21 = v12 < v20 ? 0 : (HIWORD(v15) * v10) & 0xFFFF0000;
        v22 = v12 - v21;
        *(_DWORD *)(a2 + 2736) = v12 - v21;
        v23 = v12 >= v20;
        v24 = (v10 >> 7) & 0x1FE | (v12 >= v20);
        v25 = v15 - v20;
        *(_WORD *)(v9 + 2 * v7) = *(_WORD *)(a2 + 2 * v24 + 2752) + v10;
        v26 = v23 ? v15 - v20 : (HIWORD(v15) * v10) & 0xFFFF0000;
        *(_DWORD *)(a2 + 2732) = v26;
        if (v23)
          break;
LABEL_6:
        v6[v7++] = v8;
        if (v7 == 3)
          return result;
      }
      v27 = a4[3];
      v28 = *(unsigned __int16 *)(v27 + 2 * v7);
      if (v25 < 0x40000001)
      {
        v29 = *(_DWORD *)(a2 + 2744);
        while (1)
        {
          v22 *= 2;
          *(_DWORD *)(a2 + 2744) = --v29;
          if (v29)
            goto LABEL_31;
          v32 = *(_QWORD *)(a2 + 2720);
          *(_QWORD *)(a2 + 2720) = v32 + 1;
          v33 = *(unsigned int *)(a2 + 2704);
          if (v32 + 1 >= v33)
          {
            v34 = 65280;
            v35 = v32 + 2;
            *(_QWORD *)(a2 + 2720) = v35;
            if (v35 >= v33)
            {
LABEL_37:
              v30 = 255;
              goto LABEL_30;
            }
          }
          else
          {
            v34 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v32 + 1) << 8;
            v35 = v32 + 2;
            *(_QWORD *)(a2 + 2720) = v35;
            if (v35 >= v33)
              goto LABEL_37;
          }
          v30 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v35);
LABEL_30:
          v22 |= v34 | v30;
          v29 = 16;
          *(_DWORD *)(a2 + 2744) = 16;
LABEL_31:
          v31 = 2 * v25;
          v23 = v25 >= 0x20000001;
          v25 *= 2;
          if (v23)
            goto LABEL_39;
        }
      }
      v31 = v15 - v20;
LABEL_39:
      v36 = (HIWORD(v31) * v28) & 0xFFFF0000;
      *(_WORD *)(v27 + 2 * v7) = *(_WORD *)(a2 + 2 * ((v28 >> 7) & 0x1FE | (v22 >= v36)) + 2752) + v28;
      if (v22 < v36)
        v37 = (HIWORD(v31) * v28) & 0xFFFF0000;
      else
        v37 = v31 - v36;
      if (v22 < v36)
        v38 = 0;
      else
        v38 = v36;
      v39 = v22 - v38;
      *(_DWORD *)(a2 + 2732) = v37;
      *(_DWORD *)(a2 + 2736) = v22 - v38;
      v40 = (_WORD *)(a4[6] + (v7 << 7));
      v41 = (unsigned __int16)*v40;
      if (v37 < 0x40000001)
      {
        v42 = *(_DWORD *)(a2 + 2744);
        while (1)
        {
          v39 *= 2;
          *(_DWORD *)(a2 + 2744) = --v42;
          if (v42)
            goto LABEL_49;
          v45 = *(_QWORD *)(a2 + 2720);
          *(_QWORD *)(a2 + 2720) = v45 + 1;
          v46 = *(unsigned int *)(a2 + 2704);
          if (v45 + 1 >= v46)
          {
            v47 = 65280;
            v48 = v45 + 2;
            *(_QWORD *)(a2 + 2720) = v48;
            if (v48 >= v46)
            {
LABEL_55:
              v43 = 255;
              goto LABEL_48;
            }
          }
          else
          {
            v47 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v45 + 1) << 8;
            v48 = v45 + 2;
            *(_QWORD *)(a2 + 2720) = v48;
            if (v48 >= v46)
              goto LABEL_55;
          }
          v43 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v48);
LABEL_48:
          v39 |= v47 | v43;
          v42 = 16;
          *(_DWORD *)(a2 + 2744) = 16;
LABEL_49:
          v44 = 2 * v37;
          v23 = v37 >= 0x20000001;
          v37 *= 2;
          if (v23)
            goto LABEL_57;
        }
      }
      v44 = v37;
LABEL_57:
      v49 = (HIWORD(v44) * v41) & 0xFFFF0000;
      v50 = v44 - v49;
      v51 = v39 >= v49;
      *v40 = *(_WORD *)(a2 + 2 * ((v41 >> 7) & 0x1FE | v51) + 2752) + v41;
      if (v39 >= v49)
      {
        v52 = 2;
      }
      else
      {
        v50 = v49;
        v49 = 0;
        v52 = 1;
      }
      v53 = v39 - v49;
      *(_DWORD *)(a2 + 2732) = v50;
      *(_DWORD *)(a2 + 2736) = v53;
      v54 = (unsigned __int16)v40[v52];
      if (v50 < 0x40000001)
      {
        v55 = *(_DWORD *)(a2 + 2744);
        while (1)
        {
          v53 *= 2;
          *(_DWORD *)(a2 + 2744) = --v55;
          if (v55)
            goto LABEL_64;
          v58 = *(_QWORD *)(a2 + 2720);
          *(_QWORD *)(a2 + 2720) = v58 + 1;
          v59 = *(unsigned int *)(a2 + 2704);
          if (v58 + 1 >= v59)
          {
            v60 = 65280;
            v61 = v58 + 2;
            *(_QWORD *)(a2 + 2720) = v61;
            if (v61 >= v59)
            {
LABEL_70:
              v56 = 255;
              goto LABEL_63;
            }
          }
          else
          {
            v60 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v58 + 1) << 8;
            v61 = v58 + 2;
            *(_QWORD *)(a2 + 2720) = v61;
            if (v61 >= v59)
              goto LABEL_70;
          }
          v56 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v61);
LABEL_63:
          v53 |= v60 | v56;
          v55 = 16;
          *(_DWORD *)(a2 + 2744) = 16;
LABEL_64:
          v57 = 2 * v50;
          v23 = v50 >= 0x20000001;
          v50 *= 2;
          if (v23)
            goto LABEL_72;
        }
      }
      v57 = v50;
LABEL_72:
      v62 = (HIWORD(v57) * v54) & 0xFFFF0000;
      v63 = v57 - v62;
      v64 = v53 >= v62;
      v40[v52] = *(_WORD *)(a2 + 2 * ((v54 >> 7) & 0x1FE | v64) + 2752) + v54;
      if (v53 < v62)
        v65 = v62;
      else
        v65 = v63;
      if (v53 < v62)
        v66 = 0;
      else
        v66 = v62;
      v67 = v53 - v66;
      *(_DWORD *)(a2 + 2732) = v65;
      *(_DWORD *)(a2 + 2736) = v67;
      v68 = v51 | (2 * v64);
      v69 = (v68 + 3);
      v70 = (unsigned __int16)v40[v69];
      if (v65 < 0x40000001)
      {
        v71 = *(_DWORD *)(a2 + 2744);
        while (1)
        {
          v67 *= 2;
          *(_DWORD *)(a2 + 2744) = --v71;
          if (v71)
            goto LABEL_82;
          v74 = *(_QWORD *)(a2 + 2720);
          *(_QWORD *)(a2 + 2720) = v74 + 1;
          v75 = *(unsigned int *)(a2 + 2704);
          if (v74 + 1 >= v75)
          {
            v76 = 65280;
            v77 = v74 + 2;
            *(_QWORD *)(a2 + 2720) = v77;
            if (v77 >= v75)
            {
LABEL_88:
              v72 = 255;
              goto LABEL_81;
            }
          }
          else
          {
            v76 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v74 + 1) << 8;
            v77 = v74 + 2;
            *(_QWORD *)(a2 + 2720) = v77;
            if (v77 >= v75)
              goto LABEL_88;
          }
          v72 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v77);
LABEL_81:
          v67 |= v76 | v72;
          v71 = 16;
          *(_DWORD *)(a2 + 2744) = 16;
LABEL_82:
          v73 = 2 * v65;
          v23 = v65 >= 0x20000001;
          v65 *= 2;
          if (v23)
            goto LABEL_90;
        }
      }
      v73 = v65;
LABEL_90:
      v78 = (HIWORD(v73) * v70) & 0xFFFF0000;
      v79 = v73 - v78;
      v80 = v67 >= v78;
      v40[v69] = *(_WORD *)(a2 + 2 * ((v70 >> 7) & 0x1FE | v80) + 2752) + v70;
      if (v67 < v78)
        v81 = v78;
      else
        v81 = v79;
      if (v67 < v78)
        v82 = 0;
      else
        v82 = v78;
      v83 = v67 - v82;
      *(_DWORD *)(a2 + 2732) = v81;
      *(_DWORD *)(a2 + 2736) = v83;
      v84 = v68 | (4 * v80);
      v85 = (v84 + 7);
      v86 = (unsigned __int16)v40[v85];
      if (v81 < 0x40000001)
      {
        v87 = *(_DWORD *)(a2 + 2744);
        while (1)
        {
          v83 *= 2;
          *(_DWORD *)(a2 + 2744) = --v87;
          if (v87)
            goto LABEL_100;
          v90 = *(_QWORD *)(a2 + 2720);
          *(_QWORD *)(a2 + 2720) = v90 + 1;
          v91 = *(unsigned int *)(a2 + 2704);
          if (v90 + 1 >= v91)
          {
            v92 = 65280;
            v93 = v90 + 2;
            *(_QWORD *)(a2 + 2720) = v93;
            if (v93 >= v91)
            {
LABEL_106:
              v88 = 255;
              goto LABEL_99;
            }
          }
          else
          {
            v92 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v90 + 1) << 8;
            v93 = v90 + 2;
            *(_QWORD *)(a2 + 2720) = v93;
            if (v93 >= v91)
              goto LABEL_106;
          }
          v88 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v93);
LABEL_99:
          v83 |= v92 | v88;
          v87 = 16;
          *(_DWORD *)(a2 + 2744) = 16;
LABEL_100:
          v89 = 2 * v81;
          v23 = v81 >= 0x20000001;
          v81 *= 2;
          if (v23)
            goto LABEL_108;
        }
      }
      v89 = v81;
LABEL_108:
      v94 = (HIWORD(v89) * v86) & 0xFFFF0000;
      v95 = v89 - v94;
      v96 = v83 >= v94;
      v40[v85] = *(_WORD *)(a2 + 2 * ((v86 >> 7) & 0x1FE | v96) + 2752) + v86;
      if (v83 < v94)
        v97 = v94;
      else
        v97 = v95;
      if (v83 < v94)
        v98 = 0;
      else
        v98 = v94;
      v99 = v83 - v98;
      *(_DWORD *)(a2 + 2732) = v97;
      *(_DWORD *)(a2 + 2736) = v99;
      v100 = v84 | (8 * v96);
      v101 = (v100 + 15);
      v102 = (unsigned __int16)v40[v101];
      if (v97 < 0x40000001)
      {
        v103 = *(_DWORD *)(a2 + 2744);
        while (1)
        {
          v99 *= 2;
          *(_DWORD *)(a2 + 2744) = --v103;
          if (v103)
            goto LABEL_118;
          v106 = *(_QWORD *)(a2 + 2720);
          *(_QWORD *)(a2 + 2720) = v106 + 1;
          v107 = *(unsigned int *)(a2 + 2704);
          if (v106 + 1 >= v107)
          {
            v108 = 65280;
            v109 = v106 + 2;
            *(_QWORD *)(a2 + 2720) = v109;
            if (v109 >= v107)
            {
LABEL_124:
              v104 = 255;
              goto LABEL_117;
            }
          }
          else
          {
            v108 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v106 + 1) << 8;
            v109 = v106 + 2;
            *(_QWORD *)(a2 + 2720) = v109;
            if (v109 >= v107)
              goto LABEL_124;
          }
          v104 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v109);
LABEL_117:
          v99 |= v108 | v104;
          v103 = 16;
          *(_DWORD *)(a2 + 2744) = 16;
LABEL_118:
          v105 = 2 * v97;
          v23 = v97 >= 0x20000001;
          v97 *= 2;
          if (v23)
            goto LABEL_126;
        }
      }
      v105 = v97;
LABEL_126:
      v110 = (HIWORD(v105) * v102) & 0xFFFF0000;
      v111 = v105 - v110;
      v112 = v99 >= v110;
      v40[v101] = *(_WORD *)(a2 + 2 * ((v102 >> 7) & 0x1FE | v112) + 2752) + v102;
      if (v99 < v110)
        v113 = v110;
      else
        v113 = v111;
      if (v99 < v110)
        v114 = 0;
      else
        v114 = v110;
      v115 = v99 - v114;
      *(_DWORD *)(a2 + 2732) = v113;
      *(_DWORD *)(a2 + 2736) = v115;
      v116 = v100 | (16 * v112);
      v117 = (v116 + 31);
      v118 = (unsigned __int16)v40[v117];
      if (v113 >= 0x40000001)
      {
        v121 = v113;
LABEL_144:
        v126 = (HIWORD(v121) * v118) & 0xFFFF0000;
        v127 = v121 - v126;
        v128 = v115 >= v126;
        v40[v117] = *(_WORD *)(a2 + 2 * ((v118 >> 7) & 0x1FE | v128) + 2752) + v118;
        if (v115 < v126)
          v129 = v126;
        else
          v129 = v127;
        if (v115 < v126)
          v130 = 0;
        else
          v130 = v126;
        *(_DWORD *)(a2 + 2732) = v129;
        *(_DWORD *)(a2 + 2736) = v115 - v130;
        v131 = v116 | (32 * v128);
        if (v131 == 63)
        {
          result = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)(a2 + 2704), *(_DWORD *)(a4[12] + 4 * v7), (_WORD *)(a4[9] + 2 * v7));
          v131 = result + 63;
        }
        if (v22 >= v36)
          v8 = v131 + 1;
        else
          v8 = ~v131;
        goto LABEL_6;
      }
      v119 = *(_DWORD *)(a2 + 2744);
      while (1)
      {
        v115 *= 2;
        *(_DWORD *)(a2 + 2744) = --v119;
        if (v119)
          goto LABEL_136;
        v122 = *(_QWORD *)(a2 + 2720);
        *(_QWORD *)(a2 + 2720) = v122 + 1;
        v123 = *(unsigned int *)(a2 + 2704);
        if (v122 + 1 >= v123)
        {
          v124 = 65280;
          v125 = v122 + 2;
          *(_QWORD *)(a2 + 2720) = v125;
          if (v125 >= v123)
          {
LABEL_142:
            v120 = 255;
            goto LABEL_135;
          }
        }
        else
        {
          v124 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v122 + 1) << 8;
          v125 = v122 + 2;
          *(_QWORD *)(a2 + 2720) = v125;
          if (v125 >= v123)
            goto LABEL_142;
        }
        v120 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v125);
LABEL_135:
        v115 |= v124 | v120;
        v119 = 16;
        *(_DWORD *)(a2 + 2744) = 16;
LABEL_136:
        v121 = 2 * v113;
        v23 = v113 >= 0x20000001;
        v113 *= 2;
        if (v23)
          goto LABEL_144;
      }
    case 2:
      v146 = (unsigned int *)(a2 + 2704);
      v147 = (int *)a4[12];
      v148 = gcl::ArithmeticDecoder::decodeSignedExpGolomb((unsigned int *)(a2 + 2704), *v147, (_WORD *)a4[3], (_WORD *)a4[9]);
      if (v148 >= 0)
        v149 = v148;
      else
        v149 = -v148;
      v150 = v149 >> *v147;
      if (*v147)
        v151 = v150 == 0;
      else
        v151 = 0;
      if (v151)
      {
        v152 = -1;
      }
      else
      {
        if (v150 < 2)
          goto LABEL_334;
        v152 = 1;
      }
      *v147 += v152;
LABEL_334:
      *v6 = v148;
      v279 = a4[12];
      v280 = gcl::ArithmeticDecoder::decodeSignedExpGolomb(v146, *(_DWORD *)(v279 + 4), (_WORD *)(a4[3] + 2), (_WORD *)(a4[9] + 2));
      if (v280 >= 0)
        v281 = v280;
      else
        v281 = -v280;
      v282 = *(_DWORD *)(v279 + 4);
      v283 = v281 >> v282;
      if (v282)
        v284 = v283 == 0;
      else
        v284 = 0;
      if (v284)
      {
        v285 = -1;
      }
      else
      {
        if (v283 < 2)
        {
LABEL_345:
          v6[1] = v280;
          v286 = a4[12];
          result = gcl::ArithmeticDecoder::decodeSignedExpGolomb(v146, *(_DWORD *)(v286 + 8), (_WORD *)(a4[3] + 4), (_WORD *)(a4[9] + 4));
          if ((int)result >= 0)
            v287 = result;
          else
            v287 = -(int)result;
          v288 = *(_DWORD *)(v286 + 8);
          v289 = v287 >> v288;
          if (!v288 || v289)
          {
            if (v289 < 2)
              goto LABEL_354;
            v290 = 1;
          }
          else
          {
            v290 = -1;
          }
          *(_DWORD *)(v286 + 8) = v290 + v288;
          goto LABEL_354;
        }
        v285 = 1;
      }
      *(_DWORD *)(v279 + 4) = v285 + v282;
      goto LABEL_345;
    case 3:
      v132 = *(_DWORD *)(a2 + 2688);
      if (v132 <= 0)
      {
        v134 = 0;
        goto LABEL_357;
      }
      v133 = 0;
      v134 = 0;
      v135 = *(_DWORD *)(a2 + 2732);
      v136 = *(_DWORD *)(a2 + 2736);
      do
      {
        if (v135 < 0x40000001)
        {
          v140 = *(_DWORD *)(a2 + 2744);
          while (1)
          {
            v136 *= 2;
            *(_DWORD *)(a2 + 2744) = --v140;
            if (v140)
              goto LABEL_162;
            v142 = *(_QWORD *)(a2 + 2720);
            *(_QWORD *)(a2 + 2720) = v142 + 1;
            v143 = *(unsigned int *)(a2 + 2704);
            if (v142 + 1 >= v143)
            {
              v144 = 65280;
              v145 = v142 + 2;
              *(_QWORD *)(a2 + 2720) = v145;
              if (v145 >= v143)
              {
LABEL_168:
                v141 = 255;
                goto LABEL_161;
              }
            }
            else
            {
              v144 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v142 + 1) << 8;
              v145 = v142 + 2;
              *(_QWORD *)(a2 + 2720) = v145;
              if (v145 >= v143)
                goto LABEL_168;
            }
            v141 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v145);
LABEL_161:
            v136 |= v144 | v141;
            v140 = 16;
            *(_DWORD *)(a2 + 2744) = 16;
LABEL_162:
            v137 = 2 * v135;
            v23 = v135 >= 0x20000001;
            v135 *= 2;
            if (v23)
              goto LABEL_155;
          }
        }
        v137 = v135;
LABEL_155:
        v138 = (v137 >> 1) & 0x7FFF0000;
        v135 = v137 - v138;
        v139 = v136 >= v138;
        if (v136 < v138)
        {
          v135 = v138;
          v138 = 0;
        }
        v136 -= v138;
        *(_DWORD *)(a2 + 2732) = v135;
        *(_DWORD *)(a2 + 2736) = v136;
        v134 += v139 << v133++;
      }
      while (v133 != v132);
LABEL_357:
      *(_DWORD *)result = v134;
      v291 = *(_DWORD *)(a2 + 2692);
      if (v291 >= 1)
      {
        v292 = 0;
        v293 = 0;
        v294 = *(_DWORD *)(a2 + 2732);
        v295 = *(_DWORD *)(a2 + 2736);
        while (v294 >= 0x40000001)
        {
          v296 = v294;
LABEL_360:
          v297 = (v296 >> 1) & 0x7FFF0000;
          v294 = v296 - v297;
          v298 = v295 >= v297;
          if (v295 < v297)
          {
            v294 = v297;
            v297 = 0;
          }
          v295 -= v297;
          *(_DWORD *)(a2 + 2732) = v294;
          *(_DWORD *)(a2 + 2736) = v295;
          v293 += v298 << v292++;
          if (v292 == v291)
            goto LABEL_375;
        }
        v299 = *(_DWORD *)(a2 + 2744);
        while (2)
        {
          v295 *= 2;
          *(_DWORD *)(a2 + 2744) = --v299;
          if (v299)
            goto LABEL_367;
          v301 = *(_QWORD *)(a2 + 2720);
          *(_QWORD *)(a2 + 2720) = v301 + 1;
          v302 = *(unsigned int *)(a2 + 2704);
          if (v301 + 1 >= v302)
          {
            v303 = 65280;
            v304 = v301 + 2;
            *(_QWORD *)(a2 + 2720) = v304;
            if (v304 >= v302)
              goto LABEL_373;
          }
          else
          {
            v303 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v301 + 1) << 8;
            v304 = v301 + 2;
            *(_QWORD *)(a2 + 2720) = v304;
            if (v304 >= v302)
            {
LABEL_373:
              v300 = 255;
LABEL_366:
              v295 |= v303 | v300;
              v299 = 16;
              *(_DWORD *)(a2 + 2744) = 16;
LABEL_367:
              v296 = 2 * v294;
              v23 = v294 >= 0x20000001;
              v294 *= 2;
              if (v23)
                goto LABEL_360;
              continue;
            }
          }
          break;
        }
        v300 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v304);
        goto LABEL_366;
      }
      v293 = 0;
LABEL_375:
      *(_DWORD *)(result + 4) = v293;
      v305 = *(_DWORD *)(a2 + 2696);
      if (v305 < 1)
      {
        result = 0;
        v6[2] = 0;
        return result;
      }
      v306 = 0;
      LODWORD(result) = 0;
      v307 = *(_DWORD *)(a2 + 2732);
      v308 = *(_DWORD *)(a2 + 2736);
      while (2)
      {
        if (v307 < 0x40000001)
        {
          v312 = *(_DWORD *)(a2 + 2744);
          while (1)
          {
            v308 *= 2;
            *(_DWORD *)(a2 + 2744) = --v312;
            if (v312)
              goto LABEL_385;
            v314 = *(_QWORD *)(a2 + 2720);
            *(_QWORD *)(a2 + 2720) = v314 + 1;
            v315 = *(unsigned int *)(a2 + 2704);
            if (v314 + 1 >= v315)
            {
              v316 = 65280;
              v317 = v314 + 2;
              *(_QWORD *)(a2 + 2720) = v317;
              if (v317 >= v315)
              {
LABEL_391:
                v313 = 255;
                goto LABEL_384;
              }
            }
            else
            {
              v316 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v314 + 1) << 8;
              v317 = v314 + 2;
              *(_QWORD *)(a2 + 2720) = v317;
              if (v317 >= v315)
                goto LABEL_391;
            }
            v313 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v317);
LABEL_384:
            v308 |= v316 | v313;
            v312 = 16;
            *(_DWORD *)(a2 + 2744) = 16;
LABEL_385:
            v309 = 2 * v307;
            v23 = v307 >= 0x20000001;
            v307 *= 2;
            if (v23)
              goto LABEL_378;
          }
        }
        v309 = v307;
LABEL_378:
        v310 = (v309 >> 1) & 0x7FFF0000;
        v307 = v309 - v310;
        v311 = v308 >= v310;
        if (v308 < v310)
        {
          v307 = v310;
          v310 = 0;
        }
        v308 -= v310;
        *(_DWORD *)(a2 + 2732) = v307;
        *(_DWORD *)(a2 + 2736) = v308;
        result = ((v311 << v306++) + result);
        if (v306 != v305)
          continue;
        break;
      }
LABEL_354:
      v6[2] = result;
      return result;
    case 4:
      v153 = 0;
      v318 = (unsigned int *)(a2 + 2704);
      break;
    default:
      return result;
  }
  while (1)
  {
    v156 = *a4;
    v157 = *(unsigned __int16 *)(*a4 + 2 * v153);
    v158 = *(_DWORD *)(a2 + 2732);
    v159 = *(_DWORD *)(a2 + 2736);
    if (v158 < 0x40000001)
    {
      v160 = *(_DWORD *)(a2 + 2744);
      while (1)
      {
        v159 *= 2;
        *(_DWORD *)(a2 + 2744) = --v160;
        if (v160)
          goto LABEL_189;
        v163 = *(_QWORD *)(a2 + 2720);
        *(_QWORD *)(a2 + 2720) = v163 + 1;
        v164 = *(unsigned int *)(a2 + 2704);
        if (v163 + 1 >= v164)
        {
          v165 = 65280;
          v166 = v163 + 2;
          *(_QWORD *)(a2 + 2720) = v166;
          if (v166 >= v164)
          {
LABEL_195:
            v161 = 255;
            goto LABEL_188;
          }
        }
        else
        {
          v165 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v163 + 1) << 8;
          v166 = v163 + 2;
          *(_QWORD *)(a2 + 2720) = v166;
          if (v166 >= v164)
            goto LABEL_195;
        }
        v161 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v166);
LABEL_188:
        v159 |= v165 | v161;
        v160 = 16;
        *(_DWORD *)(a2 + 2744) = 16;
LABEL_189:
        v162 = 2 * v158;
        v23 = v158 >= 0x20000001;
        v158 *= 2;
        if (v23)
          goto LABEL_197;
      }
    }
    v162 = *(_DWORD *)(a2 + 2732);
LABEL_197:
    v155 = 0;
    v167 = (HIWORD(v162) * v157) & 0xFFFF0000;
    v168 = v159 < v167 ? 0 : (HIWORD(v162) * v157) & 0xFFFF0000;
    v169 = v159 - v168;
    *(_DWORD *)(a2 + 2736) = v159 - v168;
    v170 = v159 >= v167;
    v171 = (v157 >> 7) & 0x1FE | (v159 >= v167);
    v172 = v162 - v167;
    *(_WORD *)(v156 + 2 * v153) = *(_WORD *)(a2 + 2 * v171 + 2752) + v157;
    v173 = v170 ? v162 - v167 : (HIWORD(v162) * v157) & 0xFFFF0000;
    *(_DWORD *)(a2 + 2732) = v173;
    if (v170)
      break;
LABEL_184:
    v6[v153++] = v155;
    if (v153 == 3)
      return result;
  }
  v174 = a4[3];
  v175 = *(unsigned __int16 *)(v174 + 2 * v153);
  if (v172 < 0x40000001)
  {
    v176 = *(_DWORD *)(a2 + 2744);
    while (1)
    {
      v169 *= 2;
      *(_DWORD *)(a2 + 2744) = --v176;
      if (v176)
        goto LABEL_209;
      v179 = *(_QWORD *)(a2 + 2720);
      *(_QWORD *)(a2 + 2720) = v179 + 1;
      v180 = *(unsigned int *)(a2 + 2704);
      if (v179 + 1 >= v180)
      {
        v181 = 65280;
        v182 = v179 + 2;
        *(_QWORD *)(a2 + 2720) = v182;
        if (v182 >= v180)
        {
LABEL_215:
          v177 = 255;
          goto LABEL_208;
        }
      }
      else
      {
        v181 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v179 + 1) << 8;
        v182 = v179 + 2;
        *(_QWORD *)(a2 + 2720) = v182;
        if (v182 >= v180)
          goto LABEL_215;
      }
      v177 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v182);
LABEL_208:
      v169 |= v181 | v177;
      v176 = 16;
      *(_DWORD *)(a2 + 2744) = 16;
LABEL_209:
      v178 = 2 * v172;
      v23 = v172 >= 0x20000001;
      v172 *= 2;
      if (v23)
        goto LABEL_217;
    }
  }
  v178 = v162 - v167;
LABEL_217:
  v183 = (HIWORD(v178) * v175) & 0xFFFF0000;
  *(_WORD *)(v174 + 2 * v153) = *(_WORD *)(a2 + 2 * ((v175 >> 7) & 0x1FE | (v169 >= v183)) + 2752) + v175;
  if (v169 < v183)
    v184 = (HIWORD(v178) * v175) & 0xFFFF0000;
  else
    v184 = v178 - v183;
  if (v169 < v183)
    v185 = 0;
  else
    v185 = (HIWORD(v178) * v175) & 0xFFFF0000;
  v186 = v169 - v185;
  *(_DWORD *)(a2 + 2732) = v184;
  *(_DWORD *)(a2 + 2736) = v169 - v185;
  v187 = (_WORD *)(a4[6] + (v153 << 7));
  v188 = (unsigned __int16)*v187;
  if (v184 < 0x40000001)
  {
    v189 = *(_DWORD *)(a2 + 2744);
    while (1)
    {
      v186 *= 2;
      *(_DWORD *)(a2 + 2744) = --v189;
      if (v189)
        goto LABEL_227;
      v192 = *(_QWORD *)(a2 + 2720);
      *(_QWORD *)(a2 + 2720) = v192 + 1;
      v193 = *(unsigned int *)(a2 + 2704);
      if (v192 + 1 >= v193)
      {
        v194 = 65280;
        v195 = v192 + 2;
        *(_QWORD *)(a2 + 2720) = v195;
        if (v195 >= v193)
        {
LABEL_233:
          v190 = 255;
          goto LABEL_226;
        }
      }
      else
      {
        v194 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v192 + 1) << 8;
        v195 = v192 + 2;
        *(_QWORD *)(a2 + 2720) = v195;
        if (v195 >= v193)
          goto LABEL_233;
      }
      v190 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v195);
LABEL_226:
      v186 |= v194 | v190;
      v189 = 16;
      *(_DWORD *)(a2 + 2744) = 16;
LABEL_227:
      v191 = 2 * v184;
      v23 = v184 >= 0x20000001;
      v184 *= 2;
      if (v23)
        goto LABEL_235;
    }
  }
  v191 = v184;
LABEL_235:
  v196 = (HIWORD(v191) * v188) & 0xFFFF0000;
  v197 = v191 - v196;
  v198 = v186 >= v196;
  *v187 = *(_WORD *)(a2 + 2 * ((v188 >> 7) & 0x1FE | v198) + 2752) + v188;
  if (v186 >= v196)
  {
    v199 = v196;
  }
  else
  {
    v197 = v196;
    v199 = 0;
  }
  v200 = v186 - v199;
  *(_DWORD *)(a2 + 2732) = v197;
  *(_DWORD *)(a2 + 2736) = v200;
  v201 = (v198 & 0x7FFFFFFu) + 1;
  v202 = (unsigned __int16)v187[v201];
  if (v197 < 0x40000001)
  {
    v203 = *(_DWORD *)(a2 + 2744);
    while (1)
    {
      v200 *= 2;
      *(_DWORD *)(a2 + 2744) = --v203;
      if (v203)
        goto LABEL_242;
      v206 = *(_QWORD *)(a2 + 2720);
      *(_QWORD *)(a2 + 2720) = v206 + 1;
      v207 = *(unsigned int *)(a2 + 2704);
      if (v206 + 1 >= v207)
      {
        v208 = 65280;
        v209 = v206 + 2;
        *(_QWORD *)(a2 + 2720) = v209;
        if (v209 >= v207)
        {
LABEL_248:
          v204 = 255;
          goto LABEL_241;
        }
      }
      else
      {
        v208 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v206 + 1) << 8;
        v209 = v206 + 2;
        *(_QWORD *)(a2 + 2720) = v209;
        if (v209 >= v207)
          goto LABEL_248;
      }
      v204 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v209);
LABEL_241:
      v200 |= v208 | v204;
      v203 = 16;
      *(_DWORD *)(a2 + 2744) = 16;
LABEL_242:
      v205 = 2 * v197;
      v23 = v197 >= 0x20000001;
      v197 *= 2;
      if (v23)
        goto LABEL_250;
    }
  }
  v205 = v197;
LABEL_250:
  v210 = 32 * v198;
  v211 = (HIWORD(v205) * v202) & 0xFFFF0000;
  v212 = v200 >= v211;
  v187[v201] = *(_WORD *)(a2 + 2 * ((v202 >> 7) & 0x1FE | v212) + 2752) + v202;
  if (v200 < v211)
    v213 = (HIWORD(v205) * v202) & 0xFFFF0000;
  else
    v213 = v205 - v211;
  if (v200 < v211)
    v211 = 0;
  v214 = v200 - v211;
  *(_DWORD *)(a2 + 2732) = v213;
  *(_DWORD *)(a2 + 2736) = v214;
  v215 = v210 | (16 * v212);
  v216 = (v215 >> 4) + 3;
  v217 = (unsigned __int16)v187[v216];
  if (v213 < 0x40000001)
  {
    v218 = *(_DWORD *)(a2 + 2744);
    while (1)
    {
      v214 *= 2;
      *(_DWORD *)(a2 + 2744) = --v218;
      if (v218)
        goto LABEL_259;
      v221 = *(_QWORD *)(a2 + 2720);
      *(_QWORD *)(a2 + 2720) = v221 + 1;
      v222 = *(unsigned int *)(a2 + 2704);
      if (v221 + 1 >= v222)
      {
        v223 = 65280;
        v224 = v221 + 2;
        *(_QWORD *)(a2 + 2720) = v224;
        if (v224 >= v222)
        {
LABEL_265:
          v219 = 255;
          goto LABEL_258;
        }
      }
      else
      {
        v223 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v221 + 1) << 8;
        v224 = v221 + 2;
        *(_QWORD *)(a2 + 2720) = v224;
        if (v224 >= v222)
          goto LABEL_265;
      }
      v219 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v224);
LABEL_258:
      v214 |= v223 | v219;
      v218 = 16;
      *(_DWORD *)(a2 + 2744) = 16;
LABEL_259:
      v220 = 2 * v213;
      v23 = v213 >= 0x20000001;
      v213 *= 2;
      if (v23)
        goto LABEL_267;
    }
  }
  v220 = v213;
LABEL_267:
  v225 = (HIWORD(v220) * v217) & 0xFFFF0000;
  v226 = v214 >= v225;
  v187[v216] = *(_WORD *)(a2 + 2 * ((v217 >> 7) & 0x1FE | v226) + 2752) + v217;
  if (v214 < v225)
    v227 = (HIWORD(v220) * v217) & 0xFFFF0000;
  else
    v227 = v220 - v225;
  if (v214 < v225)
    v228 = 0;
  else
    v228 = (HIWORD(v220) * v217) & 0xFFFF0000;
  v229 = v214 - v228;
  *(_DWORD *)(a2 + 2732) = v227;
  *(_DWORD *)(a2 + 2736) = v229;
  v230 = v215 | (8 * v226);
  v231 = (v230 >> 3) + 7;
  v232 = (unsigned __int16)v187[v231];
  if (v227 < 0x40000001)
  {
    v233 = *(_DWORD *)(a2 + 2744);
    while (1)
    {
      v229 *= 2;
      *(_DWORD *)(a2 + 2744) = --v233;
      if (v233)
        goto LABEL_277;
      v236 = *(_QWORD *)(a2 + 2720);
      *(_QWORD *)(a2 + 2720) = v236 + 1;
      v237 = *(unsigned int *)(a2 + 2704);
      if (v236 + 1 >= v237)
      {
        v238 = 65280;
        v239 = v236 + 2;
        *(_QWORD *)(a2 + 2720) = v239;
        if (v239 >= v237)
        {
LABEL_283:
          v234 = 255;
          goto LABEL_276;
        }
      }
      else
      {
        v238 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v236 + 1) << 8;
        v239 = v236 + 2;
        *(_QWORD *)(a2 + 2720) = v239;
        if (v239 >= v237)
          goto LABEL_283;
      }
      v234 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v239);
LABEL_276:
      v229 |= v238 | v234;
      v233 = 16;
      *(_DWORD *)(a2 + 2744) = 16;
LABEL_277:
      v235 = 2 * v227;
      v23 = v227 >= 0x20000001;
      v227 *= 2;
      if (v23)
        goto LABEL_285;
    }
  }
  v235 = v227;
LABEL_285:
  v240 = (HIWORD(v235) * v232) & 0xFFFF0000;
  v241 = v229 >= v240;
  v187[v231] = *(_WORD *)(a2 + 2 * ((v232 >> 7) & 0x1FE | v241) + 2752) + v232;
  if (v229 < v240)
    v242 = (HIWORD(v235) * v232) & 0xFFFF0000;
  else
    v242 = v235 - v240;
  if (v229 < v240)
    v243 = 0;
  else
    v243 = (HIWORD(v235) * v232) & 0xFFFF0000;
  v244 = v229 - v243;
  *(_DWORD *)(a2 + 2732) = v242;
  *(_DWORD *)(a2 + 2736) = v244;
  v245 = v230 | (4 * v241);
  v246 = (v245 >> 2) + 15;
  v247 = (unsigned __int16)v187[v246];
  if (v242 < 0x40000001)
  {
    v248 = *(_DWORD *)(a2 + 2744);
    while (1)
    {
      v244 *= 2;
      *(_DWORD *)(a2 + 2744) = --v248;
      if (v248)
        goto LABEL_295;
      v251 = *(_QWORD *)(a2 + 2720);
      *(_QWORD *)(a2 + 2720) = v251 + 1;
      v252 = *(unsigned int *)(a2 + 2704);
      if (v251 + 1 >= v252)
      {
        v253 = 65280;
        v254 = v251 + 2;
        *(_QWORD *)(a2 + 2720) = v254;
        if (v254 >= v252)
        {
LABEL_301:
          v249 = 255;
          goto LABEL_294;
        }
      }
      else
      {
        v253 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v251 + 1) << 8;
        v254 = v251 + 2;
        *(_QWORD *)(a2 + 2720) = v254;
        if (v254 >= v252)
          goto LABEL_301;
      }
      v249 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v254);
LABEL_294:
      v244 |= v253 | v249;
      v248 = 16;
      *(_DWORD *)(a2 + 2744) = 16;
LABEL_295:
      v250 = 2 * v242;
      v23 = v242 >= 0x20000001;
      v242 *= 2;
      if (v23)
        goto LABEL_303;
    }
  }
  v250 = v242;
LABEL_303:
  v255 = (HIWORD(v250) * v247) & 0xFFFF0000;
  v256 = v244 >= v255;
  v187[v246] = *(_WORD *)(a2 + 2 * ((v247 >> 7) & 0x1FE | v256) + 2752) + v247;
  if (v244 < v255)
    v257 = (HIWORD(v250) * v247) & 0xFFFF0000;
  else
    v257 = v250 - v255;
  if (v244 < v255)
    v258 = 0;
  else
    v258 = (HIWORD(v250) * v247) & 0xFFFF0000;
  v259 = v244 - v258;
  *(_DWORD *)(a2 + 2732) = v257;
  *(_DWORD *)(a2 + 2736) = v259;
  v260 = v245 | (2 * v256);
  v261 = (v260 >> 1) + 31;
  v262 = (unsigned __int16)v187[v261];
  if (v257 < 0x40000001)
  {
    v263 = *(_DWORD *)(a2 + 2744);
    while (1)
    {
      v259 *= 2;
      *(_DWORD *)(a2 + 2744) = --v263;
      if (v263)
        goto LABEL_313;
      v266 = *(_QWORD *)(a2 + 2720);
      *(_QWORD *)(a2 + 2720) = v266 + 1;
      v267 = *(unsigned int *)(a2 + 2704);
      if (v266 + 1 >= v267)
      {
        v268 = 65280;
        v269 = v266 + 2;
        *(_QWORD *)(a2 + 2720) = v269;
        if (v269 >= v267)
        {
LABEL_319:
          v264 = 255;
          goto LABEL_312;
        }
      }
      else
      {
        v268 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v266 + 1) << 8;
        v269 = v266 + 2;
        *(_QWORD *)(a2 + 2720) = v269;
        if (v269 >= v267)
          goto LABEL_319;
      }
      v264 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 2712) + v269);
LABEL_312:
      v259 |= v268 | v264;
      v263 = 16;
      *(_DWORD *)(a2 + 2744) = 16;
LABEL_313:
      v265 = 2 * v257;
      v23 = v257 >= 0x20000001;
      v257 *= 2;
      if (v23)
        goto LABEL_321;
    }
  }
  v265 = v257;
LABEL_321:
  v270 = (HIWORD(v265) * v262) & 0xFFFF0000;
  v271 = v265 - v270;
  v272 = v259 >= v270;
  v187[v261] = *(_WORD *)(a2 + 2 * ((v262 >> 7) & 0x1FE | v272) + 2752) + v262;
  if (v259 < v270)
    v273 = v270;
  else
    v273 = v271;
  if (v259 < v270)
    v274 = 0;
  else
    v274 = v270;
  *(_DWORD *)(a2 + 2732) = v273;
  *(_DWORD *)(a2 + 2736) = v259 - v274;
  v275 = v260 | v272;
  if ((v260 | v272) == 0x3F)
  {
    v276 = a4[12];
    result = gcl::ArithmeticDecoder::decodeExpGolomb(v318, *(_DWORD *)(v276 + 4 * v153), (_WORD *)(a4[9] + 2 * v153));
    v275 = result + 63;
    v277 = *(_DWORD *)(v276 + 4 * v153);
    v278 = ((int)result + 63) >> v277;
    if (v277 && !v278)
    {
      v154 = -1;
LABEL_180:
      *(_DWORD *)(v276 + 4 * v153) = v154 + v277;
      goto LABEL_181;
    }
    if (v278 >= 2)
    {
      v154 = 1;
      goto LABEL_180;
    }
  }
LABEL_181:
  if (v169 >= v183)
    v155 = v275 + 1;
  else
    v155 = ~v275;
  goto LABEL_184;
}

uint64_t gcl::tmesh::DecoderImpl::decompressTFanConnectivity(gcl::tmesh::DecoderImpl *this, int a2, unsigned int a3, uint64_t a4, int *a5, _DWORD *a6, _DWORD *a7)
{
  _WORD *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  char v28;
  char v29;
  int v30;
  int v31;
  int v32;
  char *v33;
  unsigned int v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  _BOOL4 v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  char *v49;
  unsigned int v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int v59;
  _BOOL4 v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  _WORD *v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  unsigned int v74;
  unsigned int v75;
  BOOL v76;
  unsigned int v77;
  int v78;
  int v79;
  unsigned int v80;
  int *v81;
  int v82;
  _WORD *v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  unsigned int v94;
  unsigned int v95;
  BOOL v96;
  _BOOL4 v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  _WORD *v102;
  unsigned int v103;
  int v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  unint64_t v110;
  unsigned int v111;
  unsigned int v112;
  _BOOL4 v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  unint64_t v123;
  _DWORD *v124;
  char *v125;
  char *v126;
  size_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  size_t v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  unint64_t v136;
  char *v137;
  char *v138;
  unint64_t v139;
  __int128 v140;
  char *v141;
  char *v142;
  unint64_t v143;
  uint64_t v144;
  char *v145;
  char v146;
  _DWORD *v147;
  uint64_t v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  int v154;
  unsigned int v155;
  uint64_t v156;
  unint64_t v157;
  int v158;
  unint64_t v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  uint64_t v164;
  int v165;
  int v166;
  uint64_t v167;
  int v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  int v172;
  unsigned int v173;
  uint64_t v174;
  unint64_t v175;
  int v176;
  unint64_t v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  _BOOL4 v181;
  unsigned int v182;
  int v183;
  uint64_t v185;
  uint64_t v186;
  _DWORD *v187;
  BOOL v188;
  int v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  int v195;
  _DWORD *v196;
  int v197;
  int v198;
  uint64_t v199;
  int v200;
  _DWORD *v201;
  int *v202;
  int v203;
  int v204;
  uint64_t v205;
  int v206;
  _DWORD *v207;
  _DWORD *v208;
  _BOOL4 v209;
  uint64_t v210;
  uint64_t v211;
  int *v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  _DWORD *v216;
  _DWORD *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  int v222;
  int v223;
  _DWORD *v224;
  char *v225;
  unint64_t v226;
  char *v227;
  size_t v228;
  char *v229;
  uint64_t v230;
  int v231;
  int v232;
  int *v233;
  _DWORD *v234;
  unsigned int *v235;
  int v236;
  int v238;
  char v239;
  char v240;
  int v241;
  char v242;
  unsigned int v243;
  int v244;
  int v245;

  v12 = (_WORD *)((char *)this + 16 * a3 + 2060);
  v13 = (unsigned __int16)*v12;
  v14 = *((_DWORD *)this + 683);
  v15 = *((_DWORD *)this + 684);
  if (v14 < 0x40000001)
  {
    v16 = *((_DWORD *)this + 686);
    while (1)
    {
      v15 *= 2;
      *((_DWORD *)this + 686) = --v16;
      if (v16)
        goto LABEL_5;
      v19 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v19 + 1;
      v20 = *((unsigned int *)this + 676);
      if (v19 + 1 >= v20)
      {
        v21 = 65280;
        v22 = v19 + 2;
        *((_QWORD *)this + 340) = v22;
        if (v22 >= v20)
        {
LABEL_11:
          v17 = 255;
          goto LABEL_4;
        }
      }
      else
      {
        v21 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v19 + 1) << 8;
        v22 = v19 + 2;
        *((_QWORD *)this + 340) = v22;
        if (v22 >= v20)
          goto LABEL_11;
      }
      v17 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v22);
LABEL_4:
      v15 |= v21 | v17;
      v16 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_5:
      v18 = 2 * v14;
      v44 = v14 >= 0x20000001;
      v14 *= 2;
      if (v44)
        goto LABEL_13;
    }
  }
  v18 = *((_DWORD *)this + 683);
LABEL_13:
  v23 = (HIWORD(v18) * v13) & 0xFFFF0000;
  v24 = v18 - v23;
  if (v15 < v23)
    v25 = 0;
  else
    v25 = v23;
  v26 = v15 - v25;
  *((_DWORD *)this + 684) = v26;
  *v12 = *((_WORD *)this + ((v13 >> 7) & 0x1FE | (v15 >= v23)) + 1376) + v13;
  if (v15 < v23)
    v27 = v23;
  else
    v27 = v24;
  *((_DWORD *)this + 683) = v27;
  if (v15 < v23)
  {
    v33 = (char *)this + 16 * a3;
    v34 = *((unsigned __int16 *)v33 + 1031);
    if (v23 < 0x40000001)
    {
      v35 = *((_DWORD *)this + 686);
      while (1)
      {
        v26 *= 2;
        *((_DWORD *)this + 686) = --v35;
        if (v35)
          goto LABEL_26;
        v38 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v38 + 1;
        v39 = *((unsigned int *)this + 676);
        if (v38 + 1 >= v39)
        {
          v40 = 65280;
          v41 = v38 + 2;
          *((_QWORD *)this + 340) = v41;
          if (v41 >= v39)
          {
LABEL_32:
            v36 = 255;
            goto LABEL_25;
          }
        }
        else
        {
          v40 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v38 + 1) << 8;
          v41 = v38 + 2;
          *((_QWORD *)this + 340) = v41;
          if (v41 >= v39)
            goto LABEL_32;
        }
        v36 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v41);
LABEL_25:
        v26 |= v40 | v36;
        v35 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_26:
        v37 = 2 * v23;
        v44 = v23 >= 0x20000001;
        v23 *= 2;
        if (v44)
          goto LABEL_34;
      }
    }
    v37 = v23;
LABEL_34:
    v42 = (HIWORD(v37) * v34) & 0xFFFF0000;
    v43 = v37 - v42;
    v44 = v26 >= v42;
    v45 = v26 >= v42;
    *((_WORD *)v33 + 1031) = *((_WORD *)this + ((v34 >> 7) & 0x1FE | v45) + 1376) + v34;
    if (v26 < v42)
      v46 = v42;
    else
      v46 = v43;
    if (v26 < v42)
      v42 = 0;
    v47 = 4;
    if (v44)
      v47 = 6;
    v48 = v26 - v42;
    *((_DWORD *)this + 683) = v46;
    *((_DWORD *)this + 684) = v48;
    v49 = &v33[v47 + 2060];
    v50 = *(unsigned __int16 *)v49;
    if (v46 < 0x40000001)
    {
      v51 = *((_DWORD *)this + 686);
      while (1)
      {
        v48 *= 2;
        *((_DWORD *)this + 686) = --v51;
        if (v51)
          goto LABEL_45;
        v54 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v54 + 1;
        v55 = *((unsigned int *)this + 676);
        if (v54 + 1 >= v55)
        {
          v56 = 65280;
          v57 = v54 + 2;
          *((_QWORD *)this + 340) = v57;
          if (v57 >= v55)
          {
LABEL_51:
            v52 = 255;
            goto LABEL_44;
          }
        }
        else
        {
          v56 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v54 + 1) << 8;
          v57 = v54 + 2;
          *((_QWORD *)this + 340) = v57;
          if (v57 >= v55)
            goto LABEL_51;
        }
        v52 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v57);
LABEL_44:
        v48 |= v56 | v52;
        v51 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_45:
        v53 = 2 * v46;
        v44 = v46 >= 0x20000001;
        v46 *= 2;
        if (v44)
          goto LABEL_53;
      }
    }
    v53 = v46;
LABEL_53:
    v58 = (HIWORD(v53) * v50) & 0xFFFF0000;
    v59 = v53 - v58;
    v60 = v48 >= v58;
    *(_WORD *)v49 = *((_WORD *)this + ((v50 >> 7) & 0x1FE | v60) + 1376) + v50;
    if (v48 < v58)
      v61 = v58;
    else
      v61 = v59;
    if (v48 < v58)
      v62 = 0;
    else
      v62 = v58;
    v63 = v48 - v62;
    *((_DWORD *)this + 683) = v61;
    *((_DWORD *)this + 684) = v63;
    v64 = v45 | (2 * v60);
    v65 = (_WORD *)((char *)this + 16 * a3 + 2 * (v64 | 4) + 2060);
    v66 = (unsigned __int16)*v65;
    if (v61 >= 0x40000001)
    {
      v69 = v61;
LABEL_71:
      v74 = (HIWORD(v69) * v66) & 0xFFFF0000;
      v75 = v69 - v74;
      v76 = v63 >= v74;
      *v65 = *((_WORD *)this + ((v66 >> 7) & 0x1FE | (v63 >= v74)) + 1376) + v66;
      if (v63 < v74)
        v77 = v74;
      else
        v77 = v75;
      if (v63 < v74)
        v74 = 0;
      v78 = v64 + 5;
      if (!v76)
        v78 = v64 + 1;
      *((_DWORD *)this + 683) = v77;
      *((_DWORD *)this + 684) = v63 - v74;
      v28 = 0;
      v32 = 0;
      v29 = 0;
      v31 = 1;
      v30 = 1;
      switch(v78)
      {
        case 1:
          goto LABEL_90;
        case 2:
          v28 = 0;
          v29 = 0;
          v32 = 1;
          v240 = 0;
          *a5 = v78;
          if (!*((_BYTE *)this + 3817))
            goto LABEL_98;
          goto LABEL_91;
        case 3:
          v31 = 0;
          v30 = 0;
          goto LABEL_85;
        case 4:
          v31 = 0;
LABEL_85:
          v28 = 1;
          goto LABEL_87;
        case 5:
          v28 = 0;
          v30 = 0;
LABEL_87:
          v32 = 1;
          v29 = 1;
          v240 = 0;
          *a5 = v78;
          if (!*((_BYTE *)this + 3817))
            goto LABEL_98;
          goto LABEL_91;
        case 6:
          v28 = 0;
          v32 = 0;
          v29 = 1;
LABEL_90:
          v240 = 1;
          *a5 = v78;
          if (*((_BYTE *)this + 3817))
            goto LABEL_91;
          goto LABEL_98;
        case 7:
          v31 = 0;
          v32 = 0;
          v28 = 1;
          v29 = 1;
          v240 = 1;
          *a5 = v78;
          if (!*((_BYTE *)this + 3817))
            goto LABEL_98;
          goto LABEL_91;
        default:
          v28 = 0;
          v31 = 1;
          v32 = 1;
          v29 = 1;
          v30 = 1;
          v240 = 0;
          *a5 = v78;
          if (!*((_BYTE *)this + 3817))
            goto LABEL_98;
          goto LABEL_91;
      }
    }
    v67 = *((_DWORD *)this + 686);
    while (1)
    {
      v63 *= 2;
      *((_DWORD *)this + 686) = --v67;
      if (v67)
        goto LABEL_63;
      v70 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v70 + 1;
      v71 = *((unsigned int *)this + 676);
      if (v70 + 1 >= v71)
      {
        v72 = 65280;
        v73 = v70 + 2;
        *((_QWORD *)this + 340) = v73;
        if (v73 >= v71)
        {
LABEL_69:
          v68 = 255;
          goto LABEL_62;
        }
      }
      else
      {
        v72 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v70 + 1) << 8;
        v73 = v70 + 2;
        *((_QWORD *)this + 340) = v73;
        if (v73 >= v71)
          goto LABEL_69;
      }
      v68 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v73);
LABEL_62:
      v63 |= v72 | v68;
      v67 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_63:
      v69 = 2 * v61;
      v44 = v61 >= 0x20000001;
      v61 *= 2;
      if (v44)
        goto LABEL_71;
    }
  }
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 1;
  v32 = 1;
  v240 = 0;
  *a5 = 0;
  if (!*((_BYTE *)this + 3817))
  {
LABEL_98:
    v245 = 7;
    v81 = (int *)(*((_QWORD *)this + 10) + 4 * a2);
    if (*v81 >= 7)
      v81 = &v245;
    goto LABEL_100;
  }
LABEL_91:
  if (!*((_BYTE *)this + 3816))
    goto LABEL_98;
  v79 = *(_DWORD *)(*((_QWORD *)this + 28) + 12 * a2);
  if (v79 <= 19)
    v79 = 19;
  v80 = v79 - 19;
  v243 = v80 >> 1;
  v244 = 15;
  v44 = v80 >= 0x1E;
  v81 = &v244;
  if (!v44)
    v81 = (int *)&v243;
LABEL_100:
  v82 = *v81;
  v83 = (_WORD *)((char *)this + 6 * *v81 + 2140);
  v84 = (unsigned __int16)*v83;
  v85 = *((_DWORD *)this + 683);
  v86 = *((_DWORD *)this + 684);
  if (v85 < 0x40000001)
  {
    v87 = *((_DWORD *)this + 686);
    while (1)
    {
      v86 *= 2;
      *((_DWORD *)this + 686) = --v87;
      if (v87)
        goto LABEL_104;
      v90 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v90 + 1;
      v91 = *((unsigned int *)this + 676);
      if (v90 + 1 >= v91)
      {
        v92 = 65280;
        v93 = v90 + 2;
        *((_QWORD *)this + 340) = v93;
        if (v93 >= v91)
        {
LABEL_110:
          v88 = 255;
          goto LABEL_103;
        }
      }
      else
      {
        v92 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v90 + 1) << 8;
        v93 = v90 + 2;
        *((_QWORD *)this + 340) = v93;
        if (v93 >= v91)
          goto LABEL_110;
      }
      v88 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v93);
LABEL_103:
      v86 |= v92 | v88;
      v87 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_104:
      v89 = 2 * v85;
      v44 = v85 >= 0x20000001;
      v85 *= 2;
      if (v44)
        goto LABEL_112;
    }
  }
  v89 = *((_DWORD *)this + 683);
LABEL_112:
  v94 = (HIWORD(v89) * v84) & 0xFFFF0000;
  v95 = v89 - v94;
  v96 = v86 >= v94;
  v97 = v86 >= v94;
  *v83 = *((_WORD *)this + ((v84 >> 7) & 0x1FE | v97) + 1376) + v84;
  if (v86 < v94)
    v98 = v94;
  else
    v98 = v95;
  if (v86 < v94)
    v99 = 0;
  else
    v99 = v94;
  v100 = 2;
  if (v96)
    v100 = 4;
  v101 = v86 - v99;
  *((_DWORD *)this + 683) = v98;
  *((_DWORD *)this + 684) = v101;
  v102 = (_WORD *)((char *)this + 6 * v82 + v100 + 2140);
  v103 = (unsigned __int16)*v102;
  if (v98 < 0x40000001)
  {
    v104 = *((_DWORD *)this + 686);
    while (1)
    {
      v101 *= 2;
      *((_DWORD *)this + 686) = --v104;
      if (v104)
        goto LABEL_124;
      v107 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v107 + 1;
      v108 = *((unsigned int *)this + 676);
      if (v107 + 1 >= v108)
      {
        v109 = 65280;
        v110 = v107 + 2;
        *((_QWORD *)this + 340) = v110;
        if (v110 >= v108)
        {
LABEL_130:
          v105 = 255;
          goto LABEL_123;
        }
      }
      else
      {
        v109 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v107 + 1) << 8;
        v110 = v107 + 2;
        *((_QWORD *)this + 340) = v110;
        if (v110 >= v108)
          goto LABEL_130;
      }
      v105 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v110);
LABEL_123:
      v101 |= v109 | v105;
      v104 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_124:
      v106 = 2 * v98;
      v44 = v98 >= 0x20000001;
      v98 *= 2;
      if (v44)
        goto LABEL_132;
    }
  }
  v106 = v98;
LABEL_132:
  v239 = v29;
  v242 = v28;
  v238 = v31;
  v111 = (HIWORD(v106) * v103) & 0xFFFF0000;
  v112 = v106 - v111;
  v113 = v101 >= v111;
  *v102 = *((_WORD *)this + ((v103 >> 7) & 0x1FE | v113) + 1376) + v103;
  if (v101 < v111)
    v114 = v111;
  else
    v114 = v112;
  if (v101 < v111)
    v115 = 0;
  else
    v115 = v111;
  *((_DWORD *)this + 683) = v114;
  *((_DWORD *)this + 684) = v101 - v115;
  v116 = v97 | (2 * v113);
  if (v116 == 3)
  {
    v117 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)this + 676, 0, (_WORD *)this + 1118);
    if (v117 < -3)
      goto LABEL_145;
    v116 = v117 + 3;
  }
  if ((int)v116 < *((_DWORD *)this + 948) - *a7)
  {
    v235 = (unsigned int *)((char *)this + 2704);
    v236 = a2;
    v231 = v32;
    v232 = v30;
    v233 = a5;
    v234 = a7;
    v230 = a4;
    v118 = v116 + 1;
    v119 = v116 + 2;
    v120 = *((_QWORD *)this + 1);
    v121 = (char *)this + 8;
    v122 = (*((_QWORD *)this + 2) - v120) >> 2;
    if ((int)v118 < (int)v122)
      goto LABEL_180;
    v123 = (2 * (_DWORD)v119) | 1u;
    if (v123 <= v122)
    {
      if (v123 < v122)
        *((_QWORD *)this + 2) = v120 + 4 * v123;
    }
    else
    {
      std::vector<int>::__append((std::vector<int> *)((char *)this + 8), v123 - v122);
    }
    v126 = (char *)*((_QWORD *)this + 4);
    v125 = (char *)*((_QWORD *)this + 5);
    v127 = v123 - (v125 - v126);
    if (v123 <= v125 - v126)
    {
      if (v123 < v125 - v126)
        *((_QWORD *)this + 5) = &v126[v123];
LABEL_180:
      **((_BYTE **)this + 4) = v242;
      *(_BYTE *)(*((_QWORD *)this + 4) + v118) = v240;
      v147 = (_DWORD *)*((_QWORD *)this + 1);
      v148 = *((_QWORD *)this + 19);
      v241 = *(_DWORD *)(v148 + 16 * v236);
      if ((v239 & 1) != 0)
      {
        if (!v238)
        {
LABEL_186:
          if ((int)v116 < 1)
            goto LABEL_239;
          v150 = *((unsigned __int16 *)this + 1138);
          v151 = *((_DWORD *)this + 683);
          v152 = *((_DWORD *)this + 684);
          if (v151 < 0x40000001)
          {
            v153 = *((_DWORD *)this + 686);
            while (1)
            {
              v152 *= 2;
              *((_DWORD *)this + 686) = --v153;
              if (v153)
                goto LABEL_191;
              v156 = *((_QWORD *)this + 340);
              *((_QWORD *)this + 340) = v156 + 1;
              v157 = *((unsigned int *)this + 676);
              if (v156 + 1 >= v157)
              {
                v158 = 65280;
                v159 = v156 + 2;
                *((_QWORD *)this + 340) = v159;
                if (v159 >= v157)
                {
LABEL_197:
                  v154 = 255;
                  goto LABEL_190;
                }
              }
              else
              {
                v158 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v156 + 1) << 8;
                v159 = v156 + 2;
                *((_QWORD *)this + 340) = v159;
                if (v159 >= v157)
                  goto LABEL_197;
              }
              v154 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v159);
LABEL_190:
              v152 |= v158 | v154;
              v153 = 16;
              *((_DWORD *)this + 686) = 16;
LABEL_191:
              v155 = 2 * v151;
              v44 = v151 >= 0x20000001;
              v151 *= 2;
              if (v44)
                goto LABEL_199;
            }
          }
          v155 = *((_DWORD *)this + 683);
LABEL_199:
          v160 = (HIWORD(v155) * v150) & 0xFFFF0000;
          v161 = v155 - v160;
          if (v152 < v160)
            v162 = 0;
          else
            v162 = (HIWORD(v155) * v150) & 0xFFFF0000;
          *((_DWORD *)this + 684) = v152 - v162;
          *((_WORD *)this + 1138) = *((_WORD *)this + ((v150 >> 7) & 0x1FE | (v152 >= v160)) + 1376) + v150;
          if (v152 < v160)
            v163 = v160;
          else
            v163 = v161;
          *((_DWORD *)this + 683) = v163;
          if (v152 >= v160)
          {
            v164 = 1;
            do
              *(_BYTE *)(*((_QWORD *)this + 4) + v164++) = 1;
            while (v118 != v164);
            goto LABEL_239;
          }
          if (v116 == 1)
          {
            *(_BYTE *)(*((_QWORD *)this + 4) + 1) = 0;
            if (*((_BYTE *)this + 3816))
            {
              v166 = gcl::tmesh::DecoderImpl::decodeIndex(this, *((_DWORD *)this + 947));
            }
            else
            {
              v165 = *((_DWORD *)this + 947);
              v166 = v165 - gcl::ArithmeticDecoder::decodeExpGolomb(v235, 0, (_WORD *)this + 1137);
            }
            *(_DWORD *)(*(_QWORD *)v121 + 4) = v166;
LABEL_239:
            if (*((_DWORD *)this + 968))
              return 0xFFFFFFFFLL;
            if (v232)
            {
              if (!v231)
              {
LABEL_248:
                v124 = (_DWORD *)((char *)this + 3872);
                if (*v233 == 3 || *v233 == 5)
                {
                  v185 = *((_QWORD *)this + 4);
                  v186 = v116 + 1;
                  v187 = v234;
                  do
                  {
                    if (*(_BYTE *)(v185 + v186))
                    {
                      v189 = (*a6)++;
                      *(_DWORD *)(*(_QWORD *)v121 + 4 * v186) = v189;
                    }
                    v188 = v186-- <= 0;
                  }
                  while (!v188);
                }
                else
                {
                  v190 = 0;
                  v185 = *((_QWORD *)this + 4);
                  v187 = v234;
                  do
                  {
                    if (*(_BYTE *)(v185 + v190))
                    {
                      v191 = (*a6)++;
                      *(_DWORD *)(*(_QWORD *)v121 + 4 * v190) = v191;
                    }
                    ++v190;
                  }
                  while (v119 != v190);
                }
                v192 = 0;
                v193 = *((_QWORD *)this + 19);
                while (1)
                {
                  v194 = *(_DWORD *)(*((_QWORD *)this + 1) + 4 * v192);
                  if (v194 < 0 || v194 >= (int)((unint64_t)(*((_QWORD *)this + 20) - v193) >> 4))
                    goto LABEL_146;
                  if (v119 == ++v192)
                  {
                    v195 = *v233;
                    if (*v233 > 2)
                    {
                      if (v195 == 3 || v195 == 5)
                      {
                        if (v116 <= 0x7FFFFFFD)
                        {
                          v202 = (int *)(v193 + 16 * v236);
                          v203 = v202[3];
                          v204 = *v202;
                          v205 = v116;
                          do
                          {
                            v206 = v204;
                            v204 = *(_DWORD *)(*((_QWORD *)this + 1) + 4 * v205);
                            if (*(_BYTE *)(*((_QWORD *)this + 4) + v205))
                            {
                              v207 = (_DWORD *)(*((_QWORD *)this + 22) + 12 * v204);
                              *v207 = v236;
                              v207[1] = v206;
                              v207[2] = v203;
                            }
                            v203 = v206;
                            v188 = v205-- <= 0;
                          }
                          while (!v188);
                        }
                      }
                      else if ((int)v119 >= 1)
                      {
                        v220 = 0;
                        v221 = -1;
                        v222 = -1;
                        do
                        {
                          v223 = v221;
                          v221 = *(_DWORD *)(*((_QWORD *)this + 1) + 4 * v220);
                          if (*(_BYTE *)(*((_QWORD *)this + 4) + v220))
                          {
                            v224 = (_DWORD *)(*((_QWORD *)this + 22) + 12 * v221);
                            *v224 = v236;
                            v224[1] = v223;
                            v224[2] = v222;
                          }
                          ++v220;
                          v222 = v223;
                        }
                        while (v119 != v220);
                      }
                    }
                    else
                    {
                      v196 = (_DWORD *)(v193 + 16 * v236);
                      if (v116 <= 0x7FFFFFFD)
                      {
                        v197 = v196[1];
                        v198 = v196[2];
                        v199 = 1;
                        do
                        {
                          v200 = *(_DWORD *)(*((_QWORD *)this + 1) + 4 * v199);
                          if (*(_BYTE *)(*((_QWORD *)this + 4) + v199))
                          {
                            v201 = (_DWORD *)(*((_QWORD *)this + 22) + 12 * v200);
                            *v201 = v236;
                            v201[1] = v197;
                            v201[2] = v198;
                          }
                          ++v199;
                          v198 = v197;
                          v197 = v200;
                        }
                        while (v119 != v199);
                        v185 = *((_QWORD *)this + 4);
                      }
                      if (!v195 && *(_BYTE *)(v185 + v116))
                      {
                        v208 = (_DWORD *)(*((_QWORD *)this + 25) + 12 * *(int *)(*((_QWORD *)this + 1) + 4 * v116));
                        *v208 = v236;
                        v208[1] = *v196;
                        v208[2] = *(_DWORD *)(v193 + 16 * v236 + 12);
                      }
                    }
                    if (*((_BYTE *)this + 3816))
                    {
                      v209 = *((_BYTE *)this + 3817) == 0;
                      if (*v187 + (int)v118 > *((_DWORD *)this + 948))
                        goto LABEL_146;
                    }
                    else
                    {
                      v209 = 1;
                      if (*v187 + (int)v118 > *((_DWORD *)this + 948))
                        goto LABEL_146;
                    }
                    v210 = *((_QWORD *)this + 19);
                    v211 = v119 - 1;
                    v212 = (int *)(*((_QWORD *)this + 1) + 4);
                    do
                    {
                      v214 = *(v212 - 1);
                      v213 = *v212;
                      v215 = (*v187)++;
                      v216 = (_DWORD *)(v230 + 12 * v215);
                      *v216 = v236;
                      v216[1] = v214;
                      v216[2] = v213;
                      v217 = (_DWORD *)(v210 + 16 * v214);
                      v218 = v210 + 16 * v213;
                      *(_DWORD *)(v218 + 4) = v214;
                      *(_DWORD *)(v218 + 8) = v236;
                      *v217 = v213;
                      v217[3] = v236;
                      if (v209)
                      {
                        v219 = *((_QWORD *)this + 10);
                        ++*(_DWORD *)(v219 + 4 * v214);
                        ++*(_DWORD *)(v219 + 4 * v213);
                      }
                      ++v212;
                      --v211;
                    }
                    while (v211);
                    return v119;
                  }
                }
              }
              if (*((_BYTE *)this + 3816))
                v241 = gcl::tmesh::DecoderImpl::decodeIndex(this, v236 + 1);
              else
                v241 = gcl::ArithmeticDecoder::decodeSignedExpGolomb(v235, 0, (_WORD *)this + 1136, (_WORD *)this + 1137)+ v236+ 1;
            }
            v147[v118] = v241;
            goto LABEL_248;
          }
          v167 = 1;
          while (1)
          {
            v169 = *((_DWORD *)this + 683);
            v170 = *((_DWORD *)this + 684);
            if (v169 < 0x40000001)
              break;
            v173 = *((_DWORD *)this + 683);
LABEL_228:
            v178 = *((unsigned __int16 *)this + 1139);
            v179 = (HIWORD(v173) * v178) & 0xFFFF0000;
            v180 = v173 - v179;
            v181 = v170 >= v179;
            *((_WORD *)this + 1139) = *((_WORD *)this + ((v178 >> 7) & 0x1FE | v181) + 1376) + v178;
            if (v170 < v179)
              v182 = v179;
            else
              v182 = v180;
            if (v170 < v179)
              v179 = 0;
            *((_DWORD *)this + 683) = v182;
            *((_DWORD *)this + 684) = v170 - v179;
            *(_BYTE *)(*((_QWORD *)this + 4) + v167) = v181;
            if (!*(_BYTE *)(*((_QWORD *)this + 4) + v167))
            {
              if (*((_BYTE *)this + 3816))
              {
                v168 = gcl::tmesh::DecoderImpl::decodeIndex(this, *((_DWORD *)this + 947));
              }
              else
              {
                v183 = *((_DWORD *)this + 947);
                v168 = v183 - gcl::ArithmeticDecoder::decodeExpGolomb(v235, 0, (_WORD *)this + 1137);
              }
              *(_DWORD *)(*(_QWORD *)v121 + 4 * v167) = v168;
            }
            if (++v167 == v118)
              goto LABEL_239;
          }
          v171 = *((_DWORD *)this + 686);
          while (1)
          {
            v170 *= 2;
            *((_DWORD *)this + 686) = --v171;
            if (v171)
              goto LABEL_220;
            v174 = *((_QWORD *)this + 340);
            *((_QWORD *)this + 340) = v174 + 1;
            v175 = *((unsigned int *)this + 676);
            if (v174 + 1 >= v175)
            {
              v176 = 65280;
              v177 = v174 + 2;
              *((_QWORD *)this + 340) = v177;
              if (v177 >= v175)
              {
LABEL_226:
                v172 = 255;
                goto LABEL_219;
              }
            }
            else
            {
              v176 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v174 + 1) << 8;
              v177 = v174 + 2;
              *((_QWORD *)this + 340) = v177;
              if (v177 >= v175)
                goto LABEL_226;
            }
            v172 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v177);
LABEL_219:
            v170 |= v176 | v172;
            v171 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_220:
            v173 = 2 * v169;
            v44 = v169 >= 0x20000001;
            v169 *= 2;
            if (v44)
              goto LABEL_228;
          }
        }
        if (*((_BYTE *)this + 3816))
          v149 = gcl::tmesh::DecoderImpl::decodeIndex(this, v236 - 1);
        else
          v149 = gcl::ArithmeticDecoder::decodeSignedExpGolomb(v235, 0, (_WORD *)this + 1136, (_WORD *)this + 1137)
               + v236
               - 1;
      }
      else
      {
        v149 = *(_DWORD *)(v148 + 16 * v236 + 4);
      }
      *v147 = v149;
      goto LABEL_186;
    }
    v128 = *((_QWORD *)this + 6);
    if (v128 - (uint64_t)v125 >= v127)
    {
      bzero(*((void **)this + 5), v123 - (v125 - v126));
      *((_QWORD *)this + 5) = &v126[v123];
      goto LABEL_180;
    }
    v129 = v128 - (_QWORD)v126;
    v130 = 2 * v129;
    if (2 * v129 <= v123)
      v130 = (2 * (_DWORD)v119) | 1u;
    if (v129 >= 0x3FFFFFFFFFFFFFFFLL)
      v131 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v131 = v130;
    v228 = v131;
    v225 = (char *)operator new(v131);
    v226 = v125 - v126;
    v229 = &v225[v228];
    v227 = &v225[v123];
    v132 = &v225[v125 - v126];
    bzero(v132, v127);
    if (v125 == v126)
    {
      v134 = v229;
      v133 = &v225[v125 - v126];
      v135 = v227;
      goto LABEL_178;
    }
    if (v226 < 8)
    {
      v133 = v225;
      goto LABEL_175;
    }
    v133 = v225;
    if ((unint64_t)(v126 - v225) >= 0x20)
    {
      if (v226 < 0x20)
      {
        v136 = 0;
        goto LABEL_170;
      }
      v136 = v226 & 0xFFFFFFFFFFFFFFE0;
      v137 = v125 - 16;
      v138 = &v225[v125 - 16 - v126];
      v139 = v226 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v140 = *(_OWORD *)v137;
        *((_OWORD *)v138 - 1) = *((_OWORD *)v137 - 1);
        *(_OWORD *)v138 = v140;
        v138 -= 32;
        v137 -= 32;
        v139 -= 32;
      }
      while (v139);
      if (v226 == v136)
        goto LABEL_177;
      if ((v226 & 0x18) != 0)
      {
LABEL_170:
        v132 -= v226 & 0xFFFFFFFFFFFFFFF8;
        v141 = &v125[-v136 - 8];
        v142 = (char *)(v141 - v126);
        v143 = v136 - (v226 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v144 = *(_QWORD *)v141;
          v141 -= 8;
          *(_QWORD *)&v142[(_QWORD)v225] = v144;
          v142 -= 8;
          v143 += 8;
        }
        while (v143);
        v125 -= v226 & 0xFFFFFFFFFFFFFFF8;
        if (v226 == (v226 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_177;
        goto LABEL_175;
      }
      v132 -= v136;
      v125 -= v136;
    }
LABEL_175:
    v145 = v132 - 1;
    do
    {
      v146 = *--v125;
      *v145-- = v146;
    }
    while (v125 != v126);
LABEL_177:
    v125 = v126;
    v134 = v229;
    v135 = v227;
LABEL_178:
    *((_QWORD *)this + 4) = v133;
    *((_QWORD *)this + 5) = v135;
    *((_QWORD *)this + 6) = v134;
    if (v125)
      operator delete(v125);
    goto LABEL_180;
  }
LABEL_145:
  v124 = (_DWORD *)((char *)this + 3872);
LABEL_146:
  *v124 = 3;
  return 0xFFFFFFFFLL;
}

uint64_t gcl::ArithmeticDecoder::decodeExpGolomb(unsigned int *a1, int a2, _WORD *a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  int v19;
  int v20;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;

  v3 = 0;
  v4 = (unsigned __int16)*a3;
  v6 = a1[7];
  v5 = a1[8];
  if (v6 >= 0x40000001)
    goto LABEL_12;
LABEL_2:
  v7 = a1[10];
  do
  {
    v5 *= 2;
    a1[10] = --v7;
    if (!v7)
    {
      v10 = *((_QWORD *)a1 + 2);
      *((_QWORD *)a1 + 2) = v10 + 1;
      v11 = *a1;
      if (v10 + 1 >= v11)
      {
        v12 = 65280;
        v13 = v10 + 2;
        *((_QWORD *)a1 + 2) = v13;
        if (v13 >= v11)
        {
LABEL_11:
          v8 = 255;
          goto LABEL_4;
        }
      }
      else
      {
        v12 = *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + v10 + 1) << 8;
        v13 = v10 + 2;
        *((_QWORD *)a1 + 2) = v13;
        if (v13 >= v11)
          goto LABEL_11;
      }
      v8 = *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + v13);
LABEL_4:
      v5 |= v12 | v8;
      v7 = 16;
      a1[10] = 16;
    }
    v9 = 2 * v6;
    v16 = v6 >= 0x20000001;
    v6 *= 2;
  }
  while (!v16);
  while (1)
  {
    v6 = (HIWORD(v9) * (unsigned __int16)v4) & 0xFFFF0000;
    v14 = v9 - v6;
    if (v5 < v6)
      v15 = 0;
    else
      v15 = (HIWORD(v9) * (unsigned __int16)v4) & 0xFFFF0000;
    v16 = v5 >= v6;
    v5 -= v15;
    v17 = v16;
    v4 += *((unsigned __int16 *)a1 + ((v4 >> 7) & 0x1FE | v17) + 24);
    *a3 = v4;
    if (v16)
      v6 = v14;
    a1[7] = v6;
    a1[8] = v5;
    if (!v16 || a2 >= 31)
      break;
    v19 = 1 << a2++;
    v3 |= v19;
    if (v6 < 0x40000001)
      goto LABEL_2;
LABEL_12:
    v9 = v6;
  }
  v20 = 0;
  if (a2)
  {
    while (v6 >= 0x40000001)
    {
      v22 = v6;
LABEL_31:
      v23 = (v22 >> 1) & 0x7FFF0000;
      v6 = v22 - v23;
      v24 = v5 >= v23;
      if (v5 < v23)
      {
        v6 = v23;
        v23 = 0;
      }
      v5 -= v23;
      a1[7] = v6;
      a1[8] = v5;
      v20 |= v24 << --a2;
      if (!a2)
        return (v20 + v3);
    }
    v25 = a1[10];
    while (1)
    {
      v5 *= 2;
      a1[10] = --v25;
      if (v25)
        goto LABEL_38;
      v27 = *((_QWORD *)a1 + 2);
      *((_QWORD *)a1 + 2) = v27 + 1;
      v28 = *a1;
      if (v27 + 1 >= v28)
      {
        v29 = 65280;
        v30 = v27 + 2;
        *((_QWORD *)a1 + 2) = v30;
        if (v30 >= v28)
        {
LABEL_44:
          v26 = 255;
          goto LABEL_37;
        }
      }
      else
      {
        v29 = *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + v27 + 1) << 8;
        v30 = v27 + 2;
        *((_QWORD *)a1 + 2) = v30;
        if (v30 >= v28)
          goto LABEL_44;
      }
      v26 = *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + v30);
LABEL_37:
      v5 |= v29 | v26;
      v25 = 16;
      a1[10] = 16;
LABEL_38:
      v22 = 2 * v6;
      v16 = v6 >= 0x20000001;
      v6 *= 2;
      if (v16)
        goto LABEL_31;
    }
  }
  return (v20 + v3);
}

uint64_t gcl::tmesh::DecoderImpl::decodeIndex(gcl::tmesh::DecoderImpl *this, int a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  _BOOL4 v31;
  char *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  char *v36;
  unsigned int v37;
  int v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unsigned int v45;
  unsigned int v46;
  _BOOL4 v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  _WORD *v52;
  unsigned int v53;
  int v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  unsigned int v61;
  unsigned int v62;
  _BOOL4 v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  _WORD *v68;
  unsigned int v69;
  int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  unsigned int v77;
  unsigned int v78;
  _BOOL4 v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  _WORD *v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  unint64_t v92;
  unsigned int v93;
  unsigned int v94;
  _BOOL4 v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  _WORD *v100;
  unsigned int v101;
  int v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  int v107;
  unint64_t v108;
  unsigned int v109;
  unsigned int v110;
  _BOOL4 v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  int v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  unint64_t v122;
  unsigned int v123;
  unsigned int v124;
  BOOL v125;
  _BOOL4 v126;
  char *v127;
  unsigned int v128;
  uint64_t v129;
  unsigned int v130;
  char *v131;
  unsigned int v132;
  int v133;
  int v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  int v138;
  unint64_t v139;
  unsigned int v140;
  unsigned int v141;
  _BOOL4 v142;
  unsigned int v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;

  v3 = (unsigned int *)((char *)this + 2704);
  v4 = *((unsigned __int16 *)this + 1119);
  v5 = *((_DWORD *)this + 683);
  v6 = *((_DWORD *)this + 684);
  if (v5 < 0x40000001)
  {
    v7 = *((_DWORD *)this + 686);
    while (1)
    {
      v6 *= 2;
      *((_DWORD *)this + 686) = --v7;
      if (v7)
        goto LABEL_5;
      v10 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v10 + 1;
      v11 = *((unsigned int *)this + 676);
      if (v10 + 1 >= v11)
      {
        v12 = 65280;
        v13 = v10 + 2;
        *((_QWORD *)this + 340) = v13;
        if (v13 >= v11)
        {
LABEL_11:
          v8 = 255;
          goto LABEL_4;
        }
      }
      else
      {
        v12 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v10 + 1) << 8;
        v13 = v10 + 2;
        *((_QWORD *)this + 340) = v13;
        if (v13 >= v11)
          goto LABEL_11;
      }
      v8 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v13);
LABEL_4:
      v6 |= v12 | v8;
      v7 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_5:
      v9 = 2 * v5;
      v30 = v5 >= 0x20000001;
      v5 *= 2;
      if (v30)
        goto LABEL_13;
    }
  }
  v9 = *((_DWORD *)this + 683);
LABEL_13:
  v14 = (HIWORD(v9) * v4) & 0xFFFF0000;
  v15 = v9 - v14;
  if (v6 < v14)
    v16 = 0;
  else
    v16 = (HIWORD(v9) * v4) & 0xFFFF0000;
  v17 = v6 - v16;
  *((_DWORD *)this + 684) = v17;
  *((_WORD *)this + 1119) = *((_WORD *)this + ((v4 >> 7) & 0x1FE | (v6 >= v14)) + 1376) + v4;
  if (v6 < v14)
    v18 = (HIWORD(v9) * v4) & 0xFFFF0000;
  else
    v18 = v9 - v14;
  *((_DWORD *)this + 683) = v18;
  if (v6 < v14)
    return gcl::ArithmeticDecoder::decodeSignedExpGolomb(v3, 0, (_WORD *)this + 1136, (_WORD *)this + 1137)+ a2;
  v19 = *((unsigned __int16 *)this + 1140);
  if (v15 < 0x40000001)
  {
    v20 = *((_DWORD *)this + 686);
    while (1)
    {
      v17 *= 2;
      *((_DWORD *)this + 686) = --v20;
      if (v20)
        goto LABEL_25;
      v23 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v23 + 1;
      v24 = *((unsigned int *)this + 676);
      if (v23 + 1 >= v24)
      {
        v25 = 65280;
        v26 = v23 + 2;
        *((_QWORD *)this + 340) = v26;
        if (v26 >= v24)
        {
LABEL_31:
          v21 = 255;
          goto LABEL_24;
        }
      }
      else
      {
        v25 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v23 + 1) << 8;
        v26 = v23 + 2;
        *((_QWORD *)this + 340) = v26;
        if (v26 >= v24)
          goto LABEL_31;
      }
      v21 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v26);
LABEL_24:
      v17 |= v25 | v21;
      v20 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_25:
      v22 = 2 * v15;
      v30 = v15 >= 0x20000001;
      v15 *= 2;
      if (v30)
        goto LABEL_33;
    }
  }
  v22 = v9 - v14;
LABEL_33:
  v28 = (HIWORD(v22) * v19) & 0xFFFF0000;
  v29 = v22 - v28;
  v30 = v17 >= v28;
  v31 = v17 >= v28;
  v32 = (char *)this + 2280;
  *((_WORD *)this + 1140) = *((_WORD *)this + ((v19 >> 7) & 0x1FE | v31) + 1376) + v19;
  if (v17 >= v28)
  {
    v33 = v28;
  }
  else
  {
    v29 = v28;
    v33 = 0;
  }
  v34 = 2;
  if (v30)
    v34 = 4;
  v35 = v17 - v33;
  *((_DWORD *)this + 683) = v29;
  *((_DWORD *)this + 684) = v35;
  v36 = &v32[v34];
  v37 = *(unsigned __int16 *)&v32[v34];
  if (v29 < 0x40000001)
  {
    v38 = *((_DWORD *)this + 686);
    while (1)
    {
      v35 *= 2;
      *((_DWORD *)this + 686) = --v38;
      if (v38)
        goto LABEL_42;
      v41 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v41 + 1;
      v42 = *((unsigned int *)this + 676);
      if (v41 + 1 >= v42)
      {
        v43 = 65280;
        v44 = v41 + 2;
        *((_QWORD *)this + 340) = v44;
        if (v44 >= v42)
        {
LABEL_48:
          v39 = 255;
          goto LABEL_41;
        }
      }
      else
      {
        v43 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v41 + 1) << 8;
        v44 = v41 + 2;
        *((_QWORD *)this + 340) = v44;
        if (v44 >= v42)
          goto LABEL_48;
      }
      v39 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v44);
LABEL_41:
      v35 |= v43 | v39;
      v38 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_42:
      v40 = 2 * v29;
      v30 = v29 >= 0x20000001;
      v29 *= 2;
      if (v30)
        goto LABEL_50;
    }
  }
  v40 = v29;
LABEL_50:
  v45 = (HIWORD(v40) * v37) & 0xFFFF0000;
  v46 = v40 - v45;
  v47 = v35 >= v45;
  *(_WORD *)v36 = *((_WORD *)this + ((v37 >> 7) & 0x1FE | v47) + 1376) + v37;
  if (v35 < v45)
    v48 = v45;
  else
    v48 = v46;
  if (v35 < v45)
    v49 = 0;
  else
    v49 = v45;
  v50 = v35 - v49;
  *((_DWORD *)this + 683) = v48;
  *((_DWORD *)this + 684) = v50;
  v51 = v31 | (2 * v47);
  v52 = (_WORD *)((char *)this + 2 * (v51 + 3) + 2280);
  v53 = (unsigned __int16)*v52;
  if (v48 < 0x40000001)
  {
    v54 = *((_DWORD *)this + 686);
    while (1)
    {
      v50 *= 2;
      *((_DWORD *)this + 686) = --v54;
      if (v54)
        goto LABEL_60;
      v57 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v57 + 1;
      v58 = *((unsigned int *)this + 676);
      if (v57 + 1 >= v58)
      {
        v59 = 65280;
        v60 = v57 + 2;
        *((_QWORD *)this + 340) = v60;
        if (v60 >= v58)
        {
LABEL_66:
          v55 = 255;
          goto LABEL_59;
        }
      }
      else
      {
        v59 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v57 + 1) << 8;
        v60 = v57 + 2;
        *((_QWORD *)this + 340) = v60;
        if (v60 >= v58)
          goto LABEL_66;
      }
      v55 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v60);
LABEL_59:
      v50 |= v59 | v55;
      v54 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_60:
      v56 = 2 * v48;
      v30 = v48 >= 0x20000001;
      v48 *= 2;
      if (v30)
        goto LABEL_68;
    }
  }
  v56 = v48;
LABEL_68:
  v61 = (HIWORD(v56) * v53) & 0xFFFF0000;
  v62 = v56 - v61;
  v63 = v50 >= v61;
  *v52 = *((_WORD *)this + ((v53 >> 7) & 0x1FE | v63) + 1376) + v53;
  if (v50 < v61)
    v64 = v61;
  else
    v64 = v62;
  if (v50 < v61)
    v65 = 0;
  else
    v65 = v61;
  v66 = v50 - v65;
  *((_DWORD *)this + 683) = v64;
  *((_DWORD *)this + 684) = v66;
  v67 = v51 | (4 * v63);
  v68 = (_WORD *)((char *)this + 2 * (v67 + 7) + 2280);
  v69 = (unsigned __int16)*v68;
  if (v64 < 0x40000001)
  {
    v70 = *((_DWORD *)this + 686);
    while (1)
    {
      v66 *= 2;
      *((_DWORD *)this + 686) = --v70;
      if (v70)
        goto LABEL_78;
      v73 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v73 + 1;
      v74 = *((unsigned int *)this + 676);
      if (v73 + 1 >= v74)
      {
        v75 = 65280;
        v76 = v73 + 2;
        *((_QWORD *)this + 340) = v76;
        if (v76 >= v74)
        {
LABEL_84:
          v71 = 255;
          goto LABEL_77;
        }
      }
      else
      {
        v75 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v73 + 1) << 8;
        v76 = v73 + 2;
        *((_QWORD *)this + 340) = v76;
        if (v76 >= v74)
          goto LABEL_84;
      }
      v71 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v76);
LABEL_77:
      v66 |= v75 | v71;
      v70 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_78:
      v72 = 2 * v64;
      v30 = v64 >= 0x20000001;
      v64 *= 2;
      if (v30)
        goto LABEL_86;
    }
  }
  v72 = v64;
LABEL_86:
  v77 = (HIWORD(v72) * v69) & 0xFFFF0000;
  v78 = v72 - v77;
  v79 = v66 >= v77;
  *v68 = *((_WORD *)this + ((v69 >> 7) & 0x1FE | v79) + 1376) + v69;
  if (v66 < v77)
    v80 = v77;
  else
    v80 = v78;
  if (v66 < v77)
    v81 = 0;
  else
    v81 = v77;
  v82 = v66 - v81;
  *((_DWORD *)this + 683) = v80;
  *((_DWORD *)this + 684) = v82;
  v83 = v67 | (8 * v79);
  v84 = (_WORD *)((char *)this + 2 * (v83 + 15) + 2280);
  v85 = (unsigned __int16)*v84;
  if (v80 < 0x40000001)
  {
    v86 = *((_DWORD *)this + 686);
    while (1)
    {
      v82 *= 2;
      *((_DWORD *)this + 686) = --v86;
      if (v86)
        goto LABEL_96;
      v89 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v89 + 1;
      v90 = *((unsigned int *)this + 676);
      if (v89 + 1 >= v90)
      {
        v91 = 65280;
        v92 = v89 + 2;
        *((_QWORD *)this + 340) = v92;
        if (v92 >= v90)
        {
LABEL_102:
          v87 = 255;
          goto LABEL_95;
        }
      }
      else
      {
        v91 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v89 + 1) << 8;
        v92 = v89 + 2;
        *((_QWORD *)this + 340) = v92;
        if (v92 >= v90)
          goto LABEL_102;
      }
      v87 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v92);
LABEL_95:
      v82 |= v91 | v87;
      v86 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_96:
      v88 = 2 * v80;
      v30 = v80 >= 0x20000001;
      v80 *= 2;
      if (v30)
        goto LABEL_104;
    }
  }
  v88 = v80;
LABEL_104:
  v93 = (HIWORD(v88) * v85) & 0xFFFF0000;
  v94 = v88 - v93;
  v95 = v82 >= v93;
  *v84 = *((_WORD *)this + ((v85 >> 7) & 0x1FE | v95) + 1376) + v85;
  if (v82 < v93)
    v96 = v93;
  else
    v96 = v94;
  if (v82 < v93)
    v97 = 0;
  else
    v97 = v93;
  v98 = v82 - v97;
  *((_DWORD *)this + 683) = v96;
  *((_DWORD *)this + 684) = v98;
  v99 = v83 | (16 * v95);
  v100 = (_WORD *)((char *)this + 2 * (v99 + 31) + 2280);
  v101 = (unsigned __int16)*v100;
  if (v96 < 0x40000001)
  {
    v102 = *((_DWORD *)this + 686);
    while (1)
    {
      v98 *= 2;
      *((_DWORD *)this + 686) = --v102;
      if (v102)
        goto LABEL_114;
      v105 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v105 + 1;
      v106 = *((unsigned int *)this + 676);
      if (v105 + 1 >= v106)
      {
        v107 = 65280;
        v108 = v105 + 2;
        *((_QWORD *)this + 340) = v108;
        if (v108 >= v106)
        {
LABEL_120:
          v103 = 255;
          goto LABEL_113;
        }
      }
      else
      {
        v107 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v105 + 1) << 8;
        v108 = v105 + 2;
        *((_QWORD *)this + 340) = v108;
        if (v108 >= v106)
          goto LABEL_120;
      }
      v103 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v108);
LABEL_113:
      v98 |= v107 | v103;
      v102 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_114:
      v104 = 2 * v96;
      v30 = v96 >= 0x20000001;
      v96 *= 2;
      if (v30)
        goto LABEL_122;
    }
  }
  v104 = v96;
LABEL_122:
  v109 = (HIWORD(v104) * v101) & 0xFFFF0000;
  v110 = v104 - v109;
  v111 = v98 >= v109;
  *v100 = *((_WORD *)this + ((v101 >> 7) & 0x1FE | v111) + 1376) + v101;
  if (v98 < v109)
    v112 = v109;
  else
    v112 = v110;
  if (v98 < v109)
    v113 = 0;
  else
    v113 = v109;
  v114 = v98 - v113;
  *((_DWORD *)this + 683) = v112;
  *((_DWORD *)this + 684) = v114;
  v115 = *((unsigned __int16 *)this + 1204);
  if (v112 < 0x40000001)
  {
    v116 = *((_DWORD *)this + 686);
    while (1)
    {
      v114 *= 2;
      *((_DWORD *)this + 686) = --v116;
      if (v116)
        goto LABEL_132;
      v119 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v119 + 1;
      v120 = *((unsigned int *)this + 676);
      if (v119 + 1 >= v120)
      {
        v121 = 65280;
        v122 = v119 + 2;
        *((_QWORD *)this + 340) = v122;
        if (v122 >= v120)
        {
LABEL_138:
          v117 = 255;
          goto LABEL_131;
        }
      }
      else
      {
        v121 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v119 + 1) << 8;
        v122 = v119 + 2;
        *((_QWORD *)this + 340) = v122;
        if (v122 >= v120)
          goto LABEL_138;
      }
      v117 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v122);
LABEL_131:
      v114 |= v121 | v117;
      v116 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_132:
      v118 = 2 * v112;
      v30 = v112 >= 0x20000001;
      v112 *= 2;
      if (v30)
        goto LABEL_140;
    }
  }
  v118 = v112;
LABEL_140:
  v123 = (HIWORD(v118) * v115) & 0xFFFF0000;
  v124 = v118 - v123;
  v125 = v114 >= v123;
  v126 = v114 >= v123;
  v127 = (char *)this + 2408;
  *((_WORD *)this + 1204) = *((_WORD *)this + ((v115 >> 7) & 0x1FE | v126) + 1376) + v115;
  if (v114 >= v123)
  {
    v128 = v123;
  }
  else
  {
    v124 = v123;
    v128 = 0;
  }
  v129 = 2;
  if (v125)
    v129 = 4;
  v130 = v114 - v128;
  *((_DWORD *)this + 683) = v124;
  *((_DWORD *)this + 684) = v130;
  v131 = &v127[v129];
  v132 = *(unsigned __int16 *)&v127[v129];
  if (v124 < 0x40000001)
  {
    v133 = *((_DWORD *)this + 686);
    while (1)
    {
      v130 *= 2;
      *((_DWORD *)this + 686) = --v133;
      if (v133)
        goto LABEL_149;
      v136 = *((_QWORD *)this + 340);
      *((_QWORD *)this + 340) = v136 + 1;
      v137 = *((unsigned int *)this + 676);
      if (v136 + 1 >= v137)
      {
        v138 = 65280;
        v139 = v136 + 2;
        *((_QWORD *)this + 340) = v139;
        if (v139 >= v137)
        {
LABEL_155:
          v134 = 255;
          goto LABEL_148;
        }
      }
      else
      {
        v138 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v136 + 1) << 8;
        v139 = v136 + 2;
        *((_QWORD *)this + 340) = v139;
        if (v139 >= v137)
          goto LABEL_155;
      }
      v134 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v139);
LABEL_148:
      v130 |= v138 | v134;
      v133 = 16;
      *((_DWORD *)this + 686) = 16;
LABEL_149:
      v135 = 2 * v124;
      v30 = v124 >= 0x20000001;
      v124 *= 2;
      if (v30)
        goto LABEL_157;
    }
  }
  v135 = v124;
LABEL_157:
  v140 = (HIWORD(v135) * v132) & 0xFFFF0000;
  v141 = v135 - v140;
  v142 = v130 >= v140;
  *(_WORD *)v131 = *((_WORD *)this + ((v132 >> 7) & 0x1FE | v142) + 1376) + v132;
  if (v130 < v140)
    v143 = v140;
  else
    v143 = v141;
  if (v130 < v140)
    v140 = 0;
  *((_DWORD *)this + 683) = v143;
  *((_DWORD *)this + 684) = v130 - v140;
  v144 = v126 | (2 * v142);
  if (v144 == 3)
  {
    v145 = gcl::ArithmeticDecoder::decodeExpGolomb(v3, 0, (_WORD *)this + 1207);
    if (v145 < -3)
      goto LABEL_168;
    v144 = v145 + 3;
  }
  v146 = *((_QWORD *)this + 3 * (v99 | (32 * v111)) + 32);
  if (v144 < (int)((unint64_t)(*((_QWORD *)this + 3 * (v99 | (32 * v111)) + 33) - v146) >> 3))
  {
    v147 = *(_QWORD *)(v146 + 8 * v144);
    if (v147)
      return -1431655765 * ((unint64_t)(v147 - *((_QWORD *)this + 28)) >> 2);
  }
LABEL_168:
  *((_DWORD *)this + 968) = 3;
  return 0xFFFFFFFFLL;
}

void gcl::MutableApproximatePriorityQueue<gcl::tmesh::VertexPriority,64>::insert(_DWORD *a1, int *a2)
{
  int v4;
  int v5;
  _DWORD *v6;
  int ***v7;
  char *v8;
  char *v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  int **v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int *v32;
  char *v33;
  uint64_t *v34;
  _DWORD *v35;
  unint64_t v36;

  if (*a2 >= 63)
    v4 = 63;
  else
    v4 = *a2;
  v5 = a1[1];
  if (v4 > v5)
    v5 = v4;
  a1[1] = v5;
  v6 = &a1[6 * v4];
  v9 = (char *)*((_QWORD *)v6 + 1);
  v7 = (int ***)(v6 + 2);
  v8 = v9;
  v10 = (uint64_t *)(v7 + 1);
  v11 = (char *)v7[1];
  v12 = v11;
  v13 = v11 - v9;
  v14 = (v11 - v9) >> 3;
  a2[1] = v4;
  a2[2] = v14;
  v16 = v7 + 2;
  v15 = (unint64_t)v7[2];
  if ((unint64_t)v11 < v15)
  {
    *(_QWORD *)v11 = a2;
    v17 = (uint64_t)(v11 + 8);
    goto LABEL_28;
  }
  v18 = v14 + 1;
  if ((unint64_t)(v14 + 1) >> 61)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v19 = v15 - (_QWORD)v8;
  if (v19 >> 2 > v18)
    v18 = v19 >> 2;
  if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
    v20 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v20 = v18;
  if (v20)
  {
    if (v20 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v21 = operator new(8 * v20);
    v16 = v7 + 2;
    v10 = (uint64_t *)(v7 + 1);
    v22 = (int **)&v21[8 * v14];
    v23 = &v21[8 * v20];
    *v22 = a2;
    v17 = (uint64_t)(v22 + 1);
    v24 = (char *)(v11 - v8);
    if (v11 == v8)
      goto LABEL_26;
    goto LABEL_19;
  }
  v21 = 0;
  v22 = (int **)(8 * v14);
  v23 = 0;
  *(_QWORD *)(8 * v14) = a2;
  v17 = 8 * v14 + 8;
  v24 = (char *)(v11 - v8);
  if (v11 != v8)
  {
LABEL_19:
    v25 = (unint64_t)(v24 - 8);
    if (v25 < 0x58)
      goto LABEL_35;
    if (v11 - v21 - (v13 & 0xFFFFFFFFFFFFFFF8) < 0x20)
      goto LABEL_35;
    v26 = (v25 >> 3) + 1;
    v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
    v12 = &v11[-v27];
    v22 = (int **)((char *)v22 - v27);
    v28 = &v21[8 * v14 - 16];
    v29 = v11 - 16;
    v30 = v26 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 4;
    }
    while (v30);
    if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_35:
      do
      {
        v32 = (int *)*((_QWORD *)v12 - 1);
        v12 -= 8;
        *--v22 = v32;
      }
      while (v12 != v8);
    }
    v12 = (char *)*v7;
  }
LABEL_26:
  *v7 = v22;
  *v10 = v17;
  *v16 = v23;
  if (v12)
  {
    v33 = v12;
    v34 = v10;
    operator delete(v33);
    v10 = v34;
  }
LABEL_28:
  *v10 = v17;
  ++*a1;
  v35 = &a1[v4];
  v36 = (unint64_t)(v17 - (_QWORD)*v7) >> 3;
  if (v35[386] > (int)v36)
    LODWORD(v36) = v35[386];
  v35[386] = v36;
}

uint64_t GEOTileKeyIsOffline(unsigned __int8 *a1)
{
  return (*a1 >> 6) & 1;
}

uint64_t ___withKeyListeners_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t geo::codec::decodeGhostPointEncoding(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int v13;
  int v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int32x2_t v37;
  float32x2_t v38;
  uint64_t v39;
  float32x2_t v40;
  unint64_t v41;
  float32x2_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  float32x2_t v46;
  float32x2_t *v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  unint64_t i;
  uint64_t v54;
  unint64_t *v55;
  unint64_t *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;

  v5 = a1[2];
  v6 = v5 + 1;
  v7 = 8 * a1[1];
  if (v5 + 1 > v7)
  {
LABEL_2:
    result = 0;
    goto LABEL_3;
  }
  v12 = *a1;
  v13 = *(unsigned __int8 *)(*a1 + (v5 >> 3));
  a1[2] = v6;
  if (((v13 >> (~(_BYTE)v5 & 7)) & 1) == 0)
    return 1;
  result = 0;
  if (a2 && a4)
  {
    v62 = 0;
    if (v5 + 6 > v7)
      goto LABEL_2;
    v16 = 0;
    v17 = 5;
    do
    {
      v18 = 8 - (v6 & 7);
      if (v17 < v18)
        v18 = v17;
      v16 = (*(unsigned __int8 *)(v12 + (v6 >> 3)) >> (8 - (v6 & 7) - v18)) & ~(-1 << v18) | (v16 << v18);
      v6 += v18;
      a1[2] = v6;
      v17 -= v18;
    }
    while (v17);
    if (v6 + 5 > v7)
      goto LABEL_2;
    v19 = 0;
    v20 = 5;
    do
    {
      v21 = 8 - (v6 & 7);
      if (v20 < v21)
        v21 = v20;
      v19 = (*(unsigned __int8 *)(v12 + (v6 >> 3)) >> (8 - (v6 & 7) - v21)) & ~(-1 << v21) | (v19 << v21);
      v6 += v21;
      a1[2] = v6;
      v20 -= v21;
    }
    while (v20);
    if (v6 + 5 > v7)
      goto LABEL_2;
    v22 = 0;
    v23 = 5;
    do
    {
      v24 = 8 - (v6 & 7);
      if (v23 < v24)
        v24 = v23;
      v22 = (*(unsigned __int8 *)(v12 + (v6 >> 3)) >> (8 - (v6 & 7) - v24)) & ~(-1 << v24) | (v22 << v24);
      v6 += v24;
      a1[2] = v6;
      v23 -= v24;
    }
    while (v23);
    if (!BitstreamUnpack(a1, &v62, 5uLL))
      goto LABEL_2;
    v25 = v62;
    v61 = 0;
    v26 = BitstreamUnpackVar32(a1, (int *)&v61);
    result = 0;
    if (!v26)
      goto LABEL_3;
    v27 = v61;
    if (!v61)
      goto LABEL_2;
    *(_QWORD *)(a2 + 48) = v61;
    v28 = geo::codec::Allocator::instance(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 24))(v28, v27, 32);
    *(_QWORD *)(a2 + 56) = result;
    if (result)
    {
      v29 = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
      result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v29 + 24))(v29, *(_QWORD *)(a2 + 40), 16);
      *(_QWORD *)(a2 + 64) = result;
      if (result)
      {
        v30 = (v16 + 1);
        v31 = (v19 + 1);
        v32 = (v22 + 1);
        v33 = (v25 + 1);
        if (*(_QWORD *)(a2 + 40))
        {
          v34 = 0;
          do
            *(_OWORD *)(result + 16 * v34++) = xmmword_189CFC5E0;
          while (v34 < *(_QWORD *)(a2 + 40));
        }
        v35 = 0;
        if (v27 <= 1)
          v36 = 1;
        else
          v36 = v27;
        v57 = 32 * v36;
        while (1)
        {
          v59 = 0;
          v60 = 0;
          v58 = 0;
          if (!BitstreamUnpack(a1, (int *)&v60 + 1, v30))
            goto LABEL_2;
          if (!BitstreamUnpack(a1, (int *)&v60, v31))
            goto LABEL_2;
          if (!BitstreamUnpack(a1, (int *)&v59 + 1, v32))
            goto LABEL_2;
          if (!BitstreamUnpackSigned(a1, (int *)&v59, v33))
            goto LABEL_2;
          if (!BitstreamUnpackSigned(a1, (int *)&v58, v33))
            goto LABEL_2;
          v38 = (float32x2_t)HIDWORD(v60);
          if (HIDWORD(v60) >= a3)
            goto LABEL_2;
          v39 = a4 + ((unint64_t)HIDWORD(v60) << 7);
          v40 = (float32x2_t)v60;
          if (v60 >= *(_DWORD *)(v39 + 100))
            goto LABEL_2;
          v41 = (*(_DWORD *)(v39 + 96) + v60);
          if (*(_QWORD *)(a2 + 40) <= v41)
            goto LABEL_2;
          v42 = (float32x2_t)HIDWORD(v59);
          v43 = *(_QWORD *)(a2 + 32);
          if (*(_QWORD *)(v43 + 16 * v41 + 8) <= (unint64_t)HIDWORD(v59))
            goto LABEL_2;
          v44 = *(_QWORD *)(v43 + 16 * v41) + HIDWORD(v59);
          if (v44 >= *(_QWORD *)(a2 + 16))
            goto LABEL_2;
          *(float *)v37.i32 = (float)~(-1 << *(_BYTE *)a2);
          v45 = *(char **)(a2 + 56);
          v46 = *(float32x2_t *)(*(_QWORD *)(a2 + 8) + 8 * v44);
          v47 = (float32x2_t *)&v45[v35];
          *v47 = vadd_f32(vdiv_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v58, v59)), (float32x2_t)vdup_lane_s32(v37, 0)), v46);
          v47[1] = v38;
          v47[2] = v40;
          v47[3] = v42;
          v35 += 32;
          if (v57 == v35)
          {
            std::stable_sort[abi:ne180100]<GeoCodecsGhostPoint *,geo::codec::decodeGhostPointEncoding(Bitstream *,GeoCodecsVertexPool *,unsigned long,GeoCodecsPolygonFeature *)::$_0>(v45, &v45[32 * v27]);
            v48 = *(_QWORD *)(a2 + 48);
            v49 = *(_QWORD **)(a2 + 56);
            v50 = v49[2] + *(unsigned int *)(a4 + (v49[1] << 7) + 96);
            if (v48 < 2)
            {
              v51 = 0;
            }
            else
            {
              v51 = 0;
              v52 = v49 + 6;
              for (i = 1; i < v48; ++i)
              {
                v54 = *v52 + *(unsigned int *)(a4 + (*(v52 - 1) << 7) + 96);
                if (v50 != v54)
                {
                  v55 = (unint64_t *)(*(_QWORD *)(a2 + 64) + 16 * v50);
                  *v55 = v51;
                  v55[1] = i - v51;
                  v48 = *(_QWORD *)(a2 + 48);
                  v50 = v54;
                  v51 = i;
                }
                v52 += 4;
              }
            }
            v56 = (unint64_t *)(*(_QWORD *)(a2 + 64) + 16 * v50);
            *v56 = v51;
            v56[1] = v48 - v51;
            result = 1;
            break;
          }
        }
      }
    }
  }
LABEL_3:
  if (a2 && (result & 1) == 0)
  {
    if (*(_QWORD *)(a2 + 48))
    {
      *(_QWORD *)(a2 + 48) = 0;
      if (*(_QWORD *)(a2 + 56))
      {
        v9 = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
        result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 40))(v9, *(_QWORD *)(a2 + 56), 0);
      }
      *(_QWORD *)(a2 + 56) = 0;
      if (*(_QWORD *)(a2 + 64))
      {
        v10 = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 40))(v10, *(_QWORD *)(a2 + 64), 0);
      }
      result = 0;
      *(_QWORD *)(a2 + 64) = 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t geo::codec::decodeVerticesAfterPreamble(uint64_t a1, unsigned int *a2, geo::codec::Allocator **a3, uint64_t *a4, int a5)
{
  int v5;
  uint64_t v7;
  int v12;
  uint64_t (*v13)(void);
  geo::codec::Allocator *v14;
  uint64_t v15;
  geo::codec::Allocator *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  geo::codec::Allocator *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  float v30;
  float *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  float v61;
  float v62;
  geo::codec::Allocator *v63;
  _QWORD *v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  float v69;
  float *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t (*v81)(void);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  geo::codec::Allocator *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  float v102;
  unint64_t v103;
  unint64_t v104;
  float *v105;
  float v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  unsigned int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;

  v5 = *a2;
  if (!*a2)
    return 1;
  v7 = a2[1];
  if (!(_DWORD)v7)
    return 1;
  *a3 = 0;
  *a4 = 0;
  if ((v7 | v5) >> 20)
    return 0;
  v12 = *((unsigned __int8 *)a2 + 24);
  v13 = *(uint64_t (**)(void))(*(_QWORD *)geo::codec::Allocator::instance((geo::codec::Allocator *)a1) + 24);
  if (v12)
  {
    v14 = (geo::codec::Allocator *)v13();
    *a3 = v14;
    *(_BYTE *)v14 = a2[2];
    *((_QWORD *)v14 + 2) = v7;
    v15 = geo::codec::Allocator::instance(v14);
    v16 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, 12 * v7, 8);
    *((_QWORD *)*a3 + 1) = v16;
    if (!*((_QWORD *)*a3 + 1))
      return 0;
    *((_QWORD *)*a3 + 5) = *a2;
    v17 = geo::codec::Allocator::instance(v16);
    *((_QWORD *)*a3 + 4) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, 16 * *a2, 8);
    if (!*((_QWORD *)*a3 + 4))
      return 0;
  }
  else
  {
    result = v13();
    *a4 = result;
    if (!result)
      return result;
    *(_BYTE *)result = a2[2];
    *(_QWORD *)(result + 16) = v7;
    v19 = geo::codec::Allocator::instance((geo::codec::Allocator *)result);
    v20 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, 8 * v7, 8);
    *(_QWORD *)(*a4 + 8) = v20;
    if (!*(_QWORD *)(*a4 + 8))
      return 0;
    *(_QWORD *)(*a4 + 40) = *a2;
    v21 = geo::codec::Allocator::instance(v20);
    *(_QWORD *)(*a4 + 32) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, 16 * *a2, 8);
    if (!*(_QWORD *)(*a4 + 32))
      return 0;
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = (uint64_t *)(a1 + 8);
  v28 = v7;
  do
  {
    v32 = v7 - v28;
    if (v24)
    {
      if (!v26)
        return 0;
      v33 = v26;
      v34 = *(_QWORD *)(a1 + 24);
      v35 = 8 * *(_QWORD *)(a1 + 16);
      if (v34 + v26 > v35)
        return 0;
      v36 = 0;
      v37 = *v27;
      v38 = v26;
      do
      {
        v39 = 8 - (v34 & 7);
        if (v38 < v39)
          v39 = v38;
        v36 = (*(unsigned __int8 *)(v37 + (v34 >> 3)) >> (8 - (v34 & 7) - v39)) & ~(-1 << v39) | (v36 << v39);
        v34 += v39;
        *(_QWORD *)(a1 + 24) = v34;
        v38 -= v39;
      }
      while (v38);
      if (v34 + v26 > v35)
        return 0;
      v40 = 0;
      v41 = v36 << -(char)v26 >> -(char)v26;
      do
      {
        v42 = 8 - (v34 & 7);
        if (v33 < v42)
          v42 = v33;
        v40 = (*(unsigned __int8 *)(v37 + (v34 >> 3)) >> (8 - (v34 & 7) - v42)) & ~(-1 << v42) | (v40 << v42);
        v34 += v42;
        *(_QWORD *)(a1 + 24) = v34;
        v33 -= v42;
      }
      while (v33);
      v43 = v40 << (32 - v26) >> (32 - v26);
      if (*((_BYTE *)a2 + 24))
      {
        if (v34 + 1 > v35)
          return 0;
        v44 = *(unsigned __int8 *)(v37 + (v34 >> 3));
        *(_QWORD *)(a1 + 24) = v34 + 1;
        v23 += v41;
        v22 += v43;
        v45 = ~(-1 << a2[3]);
        v46 = *((_QWORD *)*a3 + 1) + 12 * v32;
        *(float *)v46 = (float)v23 / (float)v45;
        *(float *)(v46 + 4) = (float)v22 / (float)v45;
        --v24;
        *(_WORD *)(v46 + 8) = (v44 >> (~(_BYTE)v34 & 7)) & 1;
        v29 = 1;
      }
      else
      {
        v29 = 0;
        v23 += v41;
        v22 += v43;
        v30 = (float)~(-1 << a2[3]);
        --v24;
        v31 = (float *)(*(_QWORD *)(*a4 + 8) + 8 * v32);
        *v31 = (float)v23 / v30;
        v31[1] = (float)v22 / v30;
      }
    }
    else
    {
      v47 = a2[2];
      v48 = *(_QWORD *)(a1 + 24);
      v49 = 8 * *(_QWORD *)(a1 + 16);
      if (v48 + v47 > v49)
        return 0;
      v23 = 0;
      if ((_DWORD)v47)
      {
        v50 = *v27;
        v51 = a2[2];
        do
        {
          v52 = 8 - (v48 & 7);
          if (v51 < v52)
            v52 = v51;
          v23 = (*(unsigned __int8 *)(v50 + (v48 >> 3)) >> (8 - (v48 & 7) - v52)) & ~(-1 << v52) | (v23 << v52);
          v48 += v52;
          *(_QWORD *)(a1 + 24) = v48;
          v51 -= v52;
        }
        while (v51);
        if (v48 + v47 > v49)
          return 0;
        v22 = 0;
        do
        {
          v53 = 8 - (v48 & 7);
          if (v47 < v53)
            v53 = v47;
          v22 = (*(unsigned __int8 *)(v50 + (v48 >> 3)) >> (8 - (v48 & 7) - v53)) & ~(-1 << v53) | (v22 << v53);
          v48 += v53;
          *(_QWORD *)(a1 + 24) = v48;
          v47 -= v53;
        }
        while (v47);
        v54 = a2[4];
        if (v48 + v54 > v49)
          return 0;
      }
      else
      {
        v22 = 0;
        v54 = a2[4];
        if (v48 + v54 > v49)
          return 0;
      }
      v24 = 0;
      if ((_DWORD)v54)
      {
        v55 = *v27;
        do
        {
          v56 = 8 - (v48 & 7);
          if (v54 < v56)
            v56 = v54;
          v24 = (*(unsigned __int8 *)(v55 + (v48 >> 3)) >> (8 - (v48 & 7) - v56)) & ~(-1 << v56) | (v24 << v56);
          v48 += v56;
          *(_QWORD *)(a1 + 24) = v48;
          v54 -= v56;
        }
        while (v54);
      }
      v57 = a2[5];
      if (v48 + v57 > v49)
        return 0;
      v26 = 0;
      if ((_DWORD)v57)
      {
        v58 = *v27;
        do
        {
          v59 = 8 - (v48 & 7);
          if (v57 < v59)
            v59 = v57;
          v26 = (*(unsigned __int8 *)(v58 + (v48 >> 3)) >> (8 - (v48 & 7) - v59)) & ~(-1 << v59) | (v26 << v59);
          v48 += v59;
          *(_QWORD *)(a1 + 24) = v48;
          v57 -= v59;
        }
        while (v57);
      }
      if (v25 >= *a2)
        return 0;
      v60 = (v24 + 1);
      v29 = *((unsigned __int8 *)a2 + 24);
      v61 = (float)v23;
      v62 = (float)v22;
      if (*((_BYTE *)a2 + 24))
      {
        v63 = *a3;
        v64 = (_QWORD *)(*((_QWORD *)*a3 + 4) + 16 * v25);
        *v64 = v32;
        v64[1] = v60;
        v65 = (float)~(-1 << a2[3]);
        v66 = *((_QWORD *)v63 + 1) + 12 * v32;
        *(float *)v66 = v61 / v65;
        *(float *)(v66 + 4) = v62 / v65;
        *(_WORD *)(v66 + 8) = 0;
      }
      else
      {
        v67 = *a4;
        v68 = (_QWORD *)(*(_QWORD *)(*a4 + 32) + 16 * v25);
        *v68 = v32;
        v68[1] = v60;
        v69 = (float)~(-1 << a2[3]);
        v70 = (float *)(*(_QWORD *)(v67 + 8) + 8 * v32);
        *v70 = v61 / v69;
        v70[1] = v62 / v69;
      }
      ++v25;
    }
    --v28;
  }
  while (v28);
  v71 = *(_QWORD *)(a1 + 24);
  if (!a5)
  {
    v73 = *(_QWORD *)(a1 + 48) + (v71 >> 3);
    if ((*(_QWORD *)(a1 + 24) & 7) != 0)
      ++v73;
    *(_QWORD *)(a1 + 48) = v73;
    *(_BYTE *)(a1 + 32) = 0;
    if (!v29)
    {
LABEL_73:
      v74 = *a4;
      goto LABEL_74;
    }
LABEL_65:
    v74 = (uint64_t)*a3;
LABEL_74:
    *(_QWORD *)(v74 + 24) = 0;
    return 1;
  }
  v72 = v71 + 1;
  if (v72 > 8 * *(_QWORD *)(a1 + 16))
    return 0;
  result = 0;
  *(_QWORD *)(a1 + 24) = v72;
  v75 = (v72 & 7) == 0;
  v76 = v72 >> 3;
  if (!v75)
    ++v76;
  v77 = *(_QWORD *)(a1 + 56);
  v78 = v76 + *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v78;
  *(_BYTE *)(a1 + 32) = 0;
  v79 = v78 + 1;
  if (v78 + 1 <= v77)
  {
    v80 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + v78);
    *(_QWORD *)(a1 + 48) = v79;
    if (v80)
    {
      v81 = *(uint64_t (**)(void))(*(_QWORD *)geo::codec::Allocator::instance(0) + 16);
      if (v29)
      {
        *((_QWORD *)*a3 + 3) = v81();
        v82 = (uint64_t)*a3;
      }
      else
      {
        *(_QWORD *)(*a4 + 24) = v81();
        v82 = *a4;
      }
      v83 = *(_QWORD *)(v82 + 24);
      if (!v83)
        return 0;
      v116 = 0;
      v84 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)(v84 + 8) > *(_QWORD *)(a1 + 56))
        return 0;
      v85 = *(double *)(*(_QWORD *)(a1 + 40) + v84);
      *(_QWORD *)(a1 + 48) = v84 + 8;
      if (!geo::codec::chapterReadVarInt64((_QWORD *)a1, &v116))
        return 0;
      v87 = *(_QWORD *)(a1 + 48);
      v86 = *(_QWORD *)(a1 + 56);
      v88 = v86 - v87;
      if (v86 >= v87)
      {
        v89 = 0;
        *(_BYTE *)(a1 + 32) = 1;
        v90 = *(_QWORD *)(a1 + 40) + v87;
        *(_QWORD *)(a1 + 16) = v88;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 8) = v90;
      }
      else
      {
        v88 = *(_QWORD *)(a1 + 16);
        v89 = *(_QWORD *)(a1 + 24);
      }
      if (v89 + 1 > 8 * v88)
        return 0;
      v110 = v83;
      v91 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + (v89 >> 3));
      *(_QWORD *)(a1 + 24) = v89 + 1;
      if (((v91 >> (~(_BYTE)v89 & 7)) & 1) != 0)
        v116 = -v116;
      v115 = 0;
      if (!BitstreamUnpack((uint64_t *)(a1 + 8), (int *)&v115 + 1, 6uLL))
        return 0;
      v92 = HIDWORD(v115);
      if (!BitstreamUnpack((uint64_t *)(a1 + 8), (int *)&v115, 6uLL))
        return 0;
      v93 = *a2;
      if ((_DWORD)v93)
      {
        v94 = 0;
        v108 = (v115 + 1);
        v109 = (v92 + 1);
        v111 = v116;
        do
        {
          v95 = *((_BYTE *)a2 + 24) ? *a3 : (geo::codec::Allocator *)*a4;
          v96 = (unint64_t *)(*((_QWORD *)v95 + 4) + 16 * v94);
          v97 = *v96;
          v98 = v96[1];
          if (v98 + *v96 > *((_QWORD *)v95 + 2))
            return 0;
          v99 = *(_QWORD *)(a1 + 24);
          if (v99 + 1 > 8 * *(_QWORD *)(a1 + 16))
            return 0;
          v100 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + (v99 >> 3));
          *(_QWORD *)(a1 + 24) = v99 + 1;
          if (((v100 >> (~(_BYTE)v99 & 7)) & 1) != 0)
          {
            v114 = 0;
            if (!BitstreamUnpack((uint64_t *)(a1 + 8), &v114, v109))
              return 0;
            LODWORD(v101) = v114;
            v102 = v85 * (double)(v111 + v114);
            *(float *)(v110 + 4 * v97) = v102;
            v113 = 0;
            if (!BitstreamUnpack((uint64_t *)(a1 + 8), (int *)&v113, v108))
              return 0;
            if (v97 + 1 < v97 + v98)
            {
              v103 = v113;
              v104 = v98 - 1;
              v105 = (float *)(v110 + 4 + 4 * v97);
              do
              {
                v112 = 0;
                if (!BitstreamUnpackSigned((uint64_t *)(a1 + 8), &v112, v103))
                  return 0;
                v101 = v112 + (uint64_t)(int)v101;
                v106 = v85 * (double)(v111 + v101);
                *v105++ = v106;
              }
              while (--v104);
            }
            v93 = *a2;
          }
          else if (v97 < v97 + v98)
          {
            memset_pattern16((void *)(v110 + 4 * v97), &unk_189CFC5F0, 4 * v98);
          }
        }
        while (++v94 < v93);
      }
      v107 = *(_QWORD *)(a1 + 48) + (*(_QWORD *)(a1 + 24) >> 3);
      if ((*(_QWORD *)(a1 + 24) & 7) != 0)
        ++v107;
      *(_QWORD *)(a1 + 48) = v107;
      *(_BYTE *)(a1 + 32) = 0;
      return 1;
    }
    if (!v29)
      goto LABEL_73;
    goto LABEL_65;
  }
  return result;
}

BOOL BitstreamUnpackSigned(uint64_t *a1, int *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;

  v3 = a1[2];
  v4 = v3 + a3;
  v5 = 8 * a1[1];
  if (v3 + a3 <= v5)
  {
    if (a3)
    {
      v6 = 0;
      v7 = *a1;
      v8 = a3;
      do
      {
        v9 = 8 - (v3 & 7);
        if (v8 < v9)
          v9 = v8;
        v6 = (*(unsigned __int8 *)(v7 + (v3 >> 3)) >> (8 - (v3 & 7) - v9)) & ~(-1 << v9) | (v6 << v9);
        v3 += v9;
        a1[2] = v3;
        v8 -= v9;
      }
      while (v8);
      v10 = v6 << -(char)a3 >> -(char)a3;
    }
    else
    {
      v10 = 0;
    }
    *a2 = v10;
  }
  return v4 <= v5;
}

uint64_t geo::codec::_readLabels(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::chrono::steady_clock::time_point v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 *v35;
  unint64_t v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  FILE *v46;
  int v47;
  uint64_t v48;
  __n128 *v49;
  unint64_t *v50;
  int64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  std::chrono::steady_clock::time_point v66;
  int v67;
  const std::nothrow_t *v68;
  unint64_t v69;
  void *v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v76;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  std::chrono::steady_clock::time_point v87;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  const char *v93;
  std::chrono::steady_clock::time_point v94;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  const char *v100;
  void *v101;
  char *v102;
  geo::codec::Allocator *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  size_t v109;
  size_t v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  geo::codec::Allocator *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  size_t v122;
  size_t v123;
  uint64_t v124;
  unint64_t v125;
  FILE *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  unint64_t v136;
  unsigned int v137;
  unint64_t v138;
  size_t v139;
  size_t v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  BOOL v144;
  unint64_t v145;
  FILE *v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  size_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unsigned int v154;
  unint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  size_t v161;
  BOOL v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unsigned int v166;
  unint64_t v167;
  unsigned int v168;
  unint64_t v169;
  uint64_t v170;
  unsigned int v171;
  unint64_t v172;
  unsigned int v173;
  unint64_t v174;
  int v175;
  uint64_t v176;
  const char *v177;
  const char *v178;
  const char *v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  int v192;
  char *__dsta;
  BOOL __dst;
  uint64_t v195;
  uint64_t v196;
  size_t v197;
  uint64_t v198;
  unint64_t v199;
  _QWORD *v200;
  int v201;
  unsigned int v202;
  unint64_t v203;
  size_t __n;
  size_t __na;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unsigned int v212;
  const char *v213;
  uint64_t v214;
  std::__shared_weak_count *v215;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v216;
  const char *v217;
  uint64_t v218;
  std::__shared_weak_count *v219;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int v228;
  const char *v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v232;
  const char *v233;
  const char **v234;
  char __s1[8];
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;

  v239 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = a1[1];
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    while (*(_WORD *)(*a1 + 16 * v6) != 10)
    {
      v6 = ++v7;
      if (v5 <= v7)
      {
        v8 = 0;
        goto LABEL_8;
      }
    }
    v8 = geo::codec::chapterAt((uint64_t)a1, v7, 10, v4 + 1912);
    v5 = a1[1];
    v4 = *a2;
    if (!v5)
      goto LABEL_11;
LABEL_8:
    v9 = 0;
    v10 = 0;
    while (*(_WORD *)(*a1 + 16 * v9) != 11)
    {
      v9 = ++v10;
      if (v5 <= v10)
        goto LABEL_11;
    }
    v11 = (_QWORD *)geo::codec::chapterAt((uint64_t)a1, v10, 11, v4 + 1912);
    v13 = *a2;
    v217 = "ChapterLabels";
    v218 = v13;
    v12 = (std::__shared_weak_count *)a2[1];
    v219 = v12;
    if (v12)
      goto LABEL_14;
  }
  else
  {
    v8 = 0;
LABEL_11:
    v11 = 0;
    v217 = "ChapterLabels";
    v218 = v4;
    v12 = (std::__shared_weak_count *)a2[1];
    v219 = v12;
    if (v12)
    {
LABEL_14:
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
  }
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v17 = *a2;
  v16 = (std::__shared_weak_count *)a2[1];
  v213 = "ChapterLabelLanguages";
  v214 = v17;
  v215 = v16;
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v216 = v20.__d_.__rep_;
  v212 = 0;
  v21 = 1;
  if (!v8 || !v11)
    goto LABEL_106;
  v22 = *a2;
  v23 = *(_QWORD *)(v8 + 56);
  v24 = *(_QWORD *)(*a2 + 856);
  if (*(_QWORD *)(*a2 + 872) - v24 < v23)
  {
    if ((v23 & 0x8000000000000000) != 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v25 = *(_QWORD *)(v22 + 864);
    v26 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v22 + 880) + 16))(*(_QWORD *)(v22 + 880), *(_QWORD *)(v8 + 56), 1);
    v27 = v26 + v25 - v24;
    v28 = v26 + v23;
    v29 = *(_QWORD *)(v22 + 864);
    v30 = *(_QWORD *)(v22 + 856);
    v31 = v29 - v30;
    if (v29 != v30)
    {
      if (v31 >= 0x20)
      {
        v32 = v26 + v25 - v24;
        if ((unint64_t)(v24 - v25 - v26 + v29) >= 0x20)
        {
          v32 = v27 - (v31 & 0xFFFFFFFFFFFFFFE0);
          v34 = (_OWORD *)(v25 - v24 + v26 - 16);
          v35 = (__int128 *)(v29 - 16);
          v36 = v31 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v37 = *v35;
            *(v34 - 1) = *(v35 - 1);
            *v34 = v37;
            v34 -= 2;
            v35 -= 2;
            v36 -= 32;
          }
          while (v36);
          v29 -= v31 & 0xFFFFFFFFFFFFFFE0;
          if (v31 == (v31 & 0xFFFFFFFFFFFFFFE0))
          {
LABEL_33:
            v29 = *(_QWORD *)(v22 + 856);
            *(_QWORD *)(v22 + 856) = v32;
            *(_QWORD *)(v22 + 864) = v27;
            v33 = *(_QWORD *)(v22 + 872);
            *(_QWORD *)(v22 + 872) = v28;
            if (!v29)
              goto LABEL_35;
            goto LABEL_34;
          }
        }
      }
      else
      {
        v32 = v26 + v25 - v24;
      }
      do
      {
        v38 = *(_BYTE *)--v29;
        *(_BYTE *)--v32 = v38;
      }
      while (v29 != v30);
      goto LABEL_33;
    }
    *(_QWORD *)(v22 + 856) = v27;
    *(_QWORD *)(v22 + 864) = v27;
    v33 = *(_QWORD *)(v22 + 872);
    *(_QWORD *)(v22 + 872) = v28;
    if (v29)
LABEL_34:
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v22 + 880) + 40))(*(_QWORD *)(v22 + 880), v29, v33 - v29);
  }
LABEL_35:
  std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(*a2 + 856, *(char **)(*a2 + 864), *(char **)(v8 + 40), (char *)(*(_QWORD *)(v8 + 40) + *(_QWORD *)(v8 + 56)), *(_QWORD *)(v8 + 56));
  v39 = geo::codec::chapterReadVarUint32(v11, &v212);
  if ((v39 & 1) == 0)
  {
    v46 = (FILE *)*MEMORY[0x1E0C80C10];
    v47 = 470;
    goto LABEL_41;
  }
  v40 = v212;
  *(_QWORD *)(*a2 + 896) = v212;
  if (!v40)
    goto LABEL_62;
  v41 = geo::codec::Allocator::instance((geo::codec::Allocator *)v39);
  v42 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v41 + 24))(v41, *(_QWORD *)(*a2 + 896), 24);
  v43 = (unint64_t *)v42;
  v44 = *a2;
  *(_QWORD *)(*a2 + 888) = v42;
  if (!v42)
  {
    v46 = (FILE *)*MEMORY[0x1E0C80C10];
    v47 = 474;
    goto LABEL_41;
  }
  if (!*(_QWORD *)(v44 + 896))
  {
    v51 = 0;
    v49 = (__n128 *)v42;
LABEL_61:
    std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>(v49, v43, v51, 0, 0);
    goto LABEL_62;
  }
  v45 = 0;
  do
  {
    LODWORD(v229) = 0;
    LODWORD(v234) = 0;
    if ((geo::codec::chapterReadVarUint32(v11, (unsigned int *)&v229) & 1) == 0)
    {
      v47 = 478;
      goto LABEL_84;
    }
    if (!geo::codec::chapterReadVarUint32(v11, (unsigned int *)&v234))
    {
      v47 = 479;
      goto LABEL_84;
    }
    v53 = v11[6];
    v52 = v11[7];
    v54 = v53 + 1;
    if (v53 + 1 > v52)
    {
      v47 = 480;
LABEL_84:
      v46 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_41:
      v20.__d_.__rep_ = fprintf(v46, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v47);
      v21 = 0;
      goto LABEL_106;
    }
    v55 = v11[5];
    if (v53 >= v52)
    {
      __s1[0] = 0;
      if (v54 < v52)
        goto LABEL_42;
    }
    else
    {
      v56 = 0;
      while (*(_BYTE *)(v55 + v53))
      {
        if (v56 <= 0x1E)
          __s1[v56++] = *(_BYTE *)(v55 + v53);
        if (v52 == ++v53)
        {
          v53 = v52;
          break;
        }
      }
      v54 = v53 + 1;
      __s1[v56] = 0;
      if (v53 + 1 < v52)
      {
LABEL_42:
        v11[6] = v54;
        goto LABEL_43;
      }
    }
    v11[6] = v52;
    if (*(_BYTE *)(v52 + v55 - 1))
    {
      v47 = 480;
      goto LABEL_84;
    }
LABEL_43:
    v48 = *a2;
    v49 = *(__n128 **)(*a2 + 888);
    v50 = &v49->n128_u64[3 * v45];
    *v50 = v229;
    v50[1] = v234;
    v50[2] = (unint64_t)strdup(__s1);
    ++v45;
    v51 = *(_QWORD *)(v48 + 896);
  }
  while (v45 < v51);
  v43 = &v49->n128_u64[3 * v51];
  if (v51 < 129)
    goto LABEL_61;
  v68 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  v69 = v51;
  while (1)
  {
    v70 = operator new(24 * v69, v68);
    if (v70)
      break;
    v71 = v69 > 1;
    v69 >>= 1;
    if (!v71)
      goto LABEL_61;
  }
  v101 = v70;
  std::__stable_sort<std::_ClassicAlgPolicy,geo::codec::_readLabels(VMP4Tile *,std::shared_ptr<geo::codec::VectorTile> const&)::$_0 &,GeoCodecsLabelLanguageLocale *>(v49, &v49->n128_u64[3 * v51], v51, (uint64_t)v70, v69);
  operator delete(v101);
LABEL_62:
  *(_QWORD *)__s1 = 0;
  v236 = 0;
  v237 = 0;
  v238 = geo::codec::Allocator::instance((geo::codec::Allocator *)v39);
  v57 = *a2;
  v58 = a1[1];
  if (v58)
  {
    v59 = 0;
    v60 = 0;
    while (*(_WORD *)(*a1 + 16 * v59) != 13)
    {
      v59 = ++v60;
      if (v58 <= v60)
        goto LABEL_66;
    }
    v61 = geo::codec::chapterAt((uint64_t)a1, v60, 13, v57 + 1912);
    v63 = *a2;
    v229 = "ChapterLabelLocalizations2";
    v230 = v63;
    v62 = (std::__shared_weak_count *)a2[1];
    v231 = v62;
    if (v62)
    {
LABEL_69:
      v64 = (unint64_t *)&v62->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
  }
  else
  {
LABEL_66:
    v61 = 0;
    v229 = "ChapterLabelLocalizations2";
    v230 = v57;
    v62 = (std::__shared_weak_count *)a2[1];
    v231 = v62;
    if (v62)
      goto LABEL_69;
  }
  v66.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v232 = v66.__d_.__rep_;
  if (!v61)
  {
    v21 = 1;
    goto LABEL_97;
  }
  if (*(_QWORD *)(*a2 + 904) != *(_QWORD *)(*a2 + 912))
  {
    v21 = 1;
    goto LABEL_93;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v61, (unsigned int *)(v61 + 64)) & 1) == 0)
  {
    v67 = 526;
    goto LABEL_92;
  }
  v228 = 0;
  if (!geo::codec::chapterReadVarUint32((_QWORD *)v61, &v228))
  {
    v67 = 529;
    goto LABEL_92;
  }
  v227 = 0;
  if (!geo::codec::chapterReadVarUint32((_QWORD *)v61, &v227))
  {
    v67 = 532;
    goto LABEL_92;
  }
  if (*(_QWORD *)(v61 + 48) + (unint64_t)v228 > *(_QWORD *)(v61 + 56))
  {
    v67 = 534;
LABEL_92:
    v66.__d_.__rep_ = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v67);
    v21 = 0;
    goto LABEL_93;
  }
  std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::reserve(*a2 + 936, v228);
  v102 = (char *)(*(_QWORD *)(v61 + 40) + *(_QWORD *)(v61 + 48));
  v103 = (geo::codec::Allocator *)std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(*a2 + 936, *(char **)(*a2 + 944), v102, &v102[v228], v228);
  v104 = geo::codec::Allocator::instance(v103);
  v211 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v104 + 16))(v104, 4 * v227, 8);
  if (v227)
  {
    v105 = 0;
    v106 = 0;
    v107 = *(_QWORD *)(v61 + 48);
    v108 = v107 + v228;
    while (v108 > v106)
    {
      *(_DWORD *)(v211 + 4 * v105) = v106;
      v109 = strnlen((const char *)(*(_QWORD *)(v61 + 40) + v107), v108 - v107);
      if (v109 + 1 < v108 - v107)
        v110 = v109 + 1;
      else
        v110 = v108 - v107;
      v107 += v110;
      *(_QWORD *)(v61 + 48) = v107;
      v106 += v110;
      if (++v105 >= (unint64_t)v227)
        goto LABEL_140;
    }
    v112 = 547;
LABEL_147:
    v66.__d_.__rep_ = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v112);
    v21 = 0;
    v113 = 0;
    goto LABEL_148;
  }
LABEL_140:
  v226 = 0;
  if (!geo::codec::chapterReadVarUint32((_QWORD *)v61, &v226))
  {
    v112 = 560;
    goto LABEL_147;
  }
  v225 = 0;
  if (!geo::codec::chapterReadVarUint32((_QWORD *)v61, &v225))
  {
    v112 = 563;
    goto LABEL_147;
  }
  v111 = *(_QWORD *)(v61 + 48) + v226;
  if (v111 > *(_QWORD *)(v61 + 56))
  {
    v112 = 565;
    goto LABEL_147;
  }
  *(_QWORD *)(v61 + 48) = v111;
  v224 = 0;
  if (!geo::codec::chapterReadVarUint32((_QWORD *)v61, &v224))
  {
    v112 = 569;
    goto LABEL_147;
  }
  v223 = 0;
  if (!geo::codec::chapterReadVarUint32((_QWORD *)v61, &v223))
  {
    v112 = 572;
    goto LABEL_147;
  }
  if (*(_QWORD *)(v61 + 48) + (unint64_t)v224 > *(_QWORD *)(v61 + 56))
  {
    v112 = 574;
    goto LABEL_147;
  }
  std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::reserve(*a2 + 904, v224);
  v116 = (char *)(*(_QWORD *)(v61 + 40) + *(_QWORD *)(v61 + 48));
  v117 = (geo::codec::Allocator *)std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>(*a2 + 904, *(char **)(*a2 + 912), v116, &v116[v224], v224);
  v118 = geo::codec::Allocator::instance(v117);
  v208 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v118 + 16))(v118, 4 * v223, 8);
  v119 = *(_QWORD *)(v61 + 48);
  if (v223)
  {
    v120 = 0;
    v121 = 0;
    v209 = v119 + v224;
    while (v209 > v121)
    {
      *(_DWORD *)(v208 + 4 * v120) = v121;
      v122 = strnlen((const char *)(*(_QWORD *)(v61 + 40) + v119), v209 - v119);
      if (v122 + 1 < v209 - v119)
        v123 = v122 + 1;
      else
        v123 = v209 - v119;
      v119 += v123;
      *(_QWORD *)(v61 + 48) = v119;
      v121 += v123;
      if (++v120 >= (unint64_t)v223)
        goto LABEL_165;
    }
    v126 = (FILE *)*MEMORY[0x1E0C80C10];
    v127 = 586;
LABEL_190:
    v66.__d_.__rep_ = fprintf(v126, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v127);
    v113 = 0;
    v21 = 0;
    if (!v208)
      goto LABEL_148;
LABEL_191:
    v148 = geo::codec::Allocator::instance((geo::codec::Allocator *)v66.__d_.__rep_);
    v66.__d_.__rep_ = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v148 + 40))(v148, v208, 0);
    goto LABEL_148;
  }
LABEL_165:
  v124 = v119 + 1;
  v125 = *(_QWORD *)(v61 + 56);
  if (v119 + 1 > v125)
  {
    v126 = (FILE *)*MEMORY[0x1E0C80C10];
    v127 = 598;
    goto LABEL_190;
  }
  v128 = *(_QWORD *)(v61 + 40);
  v210 = *(unsigned __int8 *)(v128 + v119);
  *(_QWORD *)(v61 + 48) = v124;
  v129 = v119 + 2;
  if (v119 + 2 > v125)
  {
    v126 = (FILE *)*MEMORY[0x1E0C80C10];
    v127 = 601;
    goto LABEL_190;
  }
  v207 = *(unsigned __int8 *)(v128 + v124);
  *(_QWORD *)(v61 + 48) = v129;
  v130 = v119 + 3;
  if (v119 + 3 > v125)
  {
    v126 = (FILE *)*MEMORY[0x1E0C80C10];
    v127 = 604;
    goto LABEL_190;
  }
  v206 = *(unsigned __int8 *)(v128 + v129);
  *(_QWORD *)(v61 + 48) = v130;
  v131 = v119 + 4;
  if (v119 + 4 > v125)
  {
    v126 = (FILE *)*MEMORY[0x1E0C80C10];
    v127 = 607;
    goto LABEL_190;
  }
  v203 = *(unsigned __int8 *)(v128 + v130);
  *(_QWORD *)(v61 + 48) = v131;
  v132 = v119 + 5;
  if (v119 + 5 > v125)
  {
    v126 = (FILE *)*MEMORY[0x1E0C80C10];
    v127 = 610;
    goto LABEL_190;
  }
  v202 = *(unsigned __int8 *)(v128 + v131);
  *(_QWORD *)(v61 + 48) = v132;
  if (v119 + 6 > v125)
  {
    v126 = (FILE *)*MEMORY[0x1E0C80C10];
    v127 = 613;
    goto LABEL_190;
  }
  v199 = *(unsigned __int8 *)(v128 + v132);
  *(_QWORD *)(v61 + 48) = v119 + 6;
  v222 = 0;
  v133 = geo::codec::chapterReadVarUint32((_QWORD *)v61, &v222);
  if ((v133 & 1) == 0)
  {
    v126 = (FILE *)*MEMORY[0x1E0C80C10];
    v127 = 616;
    goto LABEL_190;
  }
  v134 = geo::codec::Allocator::instance((geo::codec::Allocator *)v133);
  v113 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v134 + 16))(v134, 4 * v222, 8);
  v200 = (_QWORD *)*a2;
  v135 = v222;
  if (v222)
  {
    v136 = 0;
    v137 = 0;
    __n = v200[107];
    v138 = v200[108];
    do
    {
      if (v137 >= v138)
      {
        v146 = (FILE *)*MEMORY[0x1E0C80C10];
        v147 = 624;
        goto LABEL_265;
      }
      *(_DWORD *)(v113 + 4 * v136) = v137;
      v139 = v138 - (__n + v137);
      v140 = strnlen((const char *)(__n + v137), v139);
      if (v140 + 1 < v139)
        v141 = v140 + 1;
      else
        v141 = v139;
      v137 += v141;
      ++v136;
      v135 = v222;
    }
    while (v136 < v222);
  }
  std::vector<GeoCodecsLocalizationTableEntry,geo::StdAllocator<GeoCodecsLocalizationTableEntry,geo::codec::Allocator>>::resize(v200 + 135, v135);
  v142 = *(_QWORD *)(v61 + 48);
  v143 = *(_QWORD *)(v61 + 56);
  v144 = v143 >= v142;
  v145 = v143 - v142;
  if (!v144)
  {
    v146 = (FILE *)*MEMORY[0x1E0C80C10];
    v147 = 637;
    goto LABEL_265;
  }
  *(_QWORD *)(v61 + 8) = *(_QWORD *)(v61 + 40) + v142;
  *(_BYTE *)(v61 + 32) = 1;
  *(_QWORD *)(v61 + 16) = v145;
  *(_QWORD *)(v61 + 24) = 0;
  v149 = *a2;
  if (*(char *)(*a2 + 1015) < 0)
    v150 = *(_QWORD *)(v149 + 1000);
  else
    v150 = *(unsigned __int8 *)(*a2 + 1015);
  __na = v150;
  if (!v222)
  {
    v186 = 0;
LABEL_258:
    v187 = v142 + (v186 >> 3);
    if ((v186 & 7) != 0)
      ++v187;
    *(_QWORD *)(v61 + 48) = v187;
    *(_BYTE *)(v61 + 32) = 0;
    v66.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::__assign_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>((unint64_t *)(v149 + 1016), *(char **)__s1, v236, (unint64_t)&v236[-*(_QWORD *)__s1]);
    v21 = 1;
    if (!v208)
      goto LABEL_148;
    goto LABEL_191;
  }
  v196 = 0;
  while (2)
  {
    v151 = *(_QWORD *)(v61 + 24);
    v152 = v151 + 1;
    v153 = 8 * *(_QWORD *)(v61 + 16);
    if (v151 + 1 > v153)
    {
      v147 = 644;
LABEL_264:
      v146 = (FILE *)*MEMORY[0x1E0C80C10];
      goto LABEL_265;
    }
    v154 = *(unsigned __int8 *)(*(_QWORD *)(v61 + 8) + (v151 >> 3));
    *(_QWORD *)(v61 + 24) = v152;
    if (((v154 >> (~(_BYTE)v151 & 7)) & 1) == 0)
      goto LABEL_202;
    v155 = v152 + v207;
    if (v155 > v153)
    {
      v147 = 647;
      goto LABEL_264;
    }
    *(_QWORD *)(v61 + 24) = v155;
LABEL_202:
    LODWORD(v234) = 0;
    if (BitstreamUnpack((uint64_t *)(v61 + 8), (int *)&v234, v203))
    {
      v192 = (int)v234;
      v144 = __CFADD__((_DWORD)v234, 1);
      LODWORD(v234) = (_DWORD)v234 + 1;
      if (!v144)
      {
        v191 = 0;
        v201 = 0;
        v195 = 0;
        v198 = 0;
        v162 = 0;
        while (1)
        {
          v163 = *(_QWORD *)(v61 + 24);
          v164 = v163 + 1;
          v165 = 8 * *(_QWORD *)(v61 + 16);
          if (v163 + 1 > v165)
          {
            v146 = (FILE *)*MEMORY[0x1E0C80C10];
            v147 = 667;
            goto LABEL_265;
          }
          v166 = *(unsigned __int8 *)(*(_QWORD *)(v61 + 8) + (v163 >> 3));
          *(_QWORD *)(v61 + 24) = v164;
          if (((v166 >> (~(_BYTE)v163 & 7)) & 1) != 0)
          {
            LODWORD(v233) = 0;
            if (!BitstreamUnpack((uint64_t *)(v61 + 8), (int *)&v233, v206))
            {
              v147 = 670;
              goto LABEL_264;
            }
            if (v233 >= v223)
            {
              v147 = 671;
              goto LABEL_264;
            }
            v190 = *(unsigned int *)(v208 + 4 * v233);
            v164 = *(_QWORD *)(v61 + 24);
            v165 = 8 * *(_QWORD *)(v61 + 16);
          }
          else
          {
            v190 = -1;
          }
          v167 = v164 + 1;
          if (v164 + 1 > v165)
          {
            v146 = (FILE *)*MEMORY[0x1E0C80C10];
            v147 = 677;
            goto LABEL_265;
          }
          v168 = *(unsigned __int8 *)(*(_QWORD *)(v61 + 8) + (v164 >> 3));
          *(_QWORD *)(v61 + 24) = v167;
          if (((v168 >> (~(_BYTE)v164 & 7)) & 1) != 0)
          {
            LODWORD(v233) = 0;
            if (!BitstreamUnpack((uint64_t *)(v61 + 8), (int *)&v233, v210))
            {
              v147 = 680;
              goto LABEL_264;
            }
            if (v233 >= v227)
            {
              v147 = 681;
              goto LABEL_264;
            }
            v189 = *(unsigned int *)(v211 + 4 * v233);
            v167 = *(_QWORD *)(v61 + 24);
            v165 = 8 * *(_QWORD *)(v61 + 16);
          }
          else
          {
            v189 = -1;
          }
          v169 = v167 + 1;
          if (v167 + 1 > v165)
          {
            v147 = 687;
            goto LABEL_264;
          }
          v170 = *(_QWORD *)(v61 + 8);
          v171 = *(unsigned __int8 *)(v170 + (v167 >> 3));
          *(_QWORD *)(v61 + 24) = v169;
          if (((v171 >> (~(_BYTE)v167 & 7)) & 1) != 0)
          {
            if (!v202)
            {
              v147 = 689;
              goto LABEL_264;
            }
            v172 = v167 + 2;
            if (v172 > v165)
            {
              v147 = 690;
              goto LABEL_264;
            }
            v173 = *(unsigned __int8 *)(v170 + (v169 >> 3));
            *(_QWORD *)(v61 + 24) = v172;
            v188 = (v173 >> (~(_BYTE)v169 & 7)) & 1;
            if (v202 >= 2)
            {
              v174 = v172 + v202 - 1;
              if (v174 > v165)
              {
                v147 = 695;
                goto LABEL_264;
              }
              *(_QWORD *)(v61 + 24) = v174;
            }
          }
          else
          {
            v188 = 0;
          }
          LODWORD(v233) = 0;
          if (!BitstreamUnpack((uint64_t *)(v61 + 8), (int *)&v233, v199))
          {
            v146 = (FILE *)*MEMORY[0x1E0C80C10];
            v147 = 709;
            goto LABEL_265;
          }
          v175 = (int)v233;
          if ((_DWORD)v233)
            break;
          __dst = 0;
LABEL_243:
          v180 = v191;
          v181 = v198;
          if (v191 == 0 || __dst)
            v181 = v190;
          v198 = v181;
          v182 = v195;
          if (v191 == 0 || __dst)
            v182 = v189;
          v195 = v182;
          v183 = v201;
          if (v191 == 0 || __dst)
            v183 = v188;
          v201 = v183;
          ++v191;
          if (v180 == v192)
            goto LABEL_206;
        }
        __dst = 0;
        while (1)
        {
          v221 = 0;
          if (!BitstreamUnpack((uint64_t *)(v61 + 8), (int *)&v221, v210))
          {
            v147 = 712;
            goto LABEL_264;
          }
          if (v221 >= v227)
            break;
          if (v162)
          {
            v162 = 1;
          }
          else
          {
            v176 = *a2;
            v177 = (const char *)(*(_QWORD *)(*a2 + 936) + *(unsigned int *)(v211 + 4 * v221));
            v178 = v177;
            if (strnlen(v177, *(_QWORD *)(*a2 + 944) - (_QWORD)v177) == __na)
            {
              v179 = (const char *)(v176 + 992);
              if (*(char *)(v176 + 1015) < 0)
                v179 = *(const char **)v179;
              v162 = strncmp(v179, v178, __na) == 0;
              __dst = v162;
            }
            else
            {
              v162 = 0;
            }
          }
          if (!--v175)
            goto LABEL_243;
        }
        v147 = 713;
        goto LABEL_264;
      }
      v198 = 0;
      v195 = 0;
      LOBYTE(v201) = 0;
LABEL_206:
      v156 = *(unsigned int *)(v113 + 4 * v196);
      v157 = (_QWORD *)*a2;
      v158 = *(_QWORD *)(*a2 + 1080);
      *(_QWORD *)(v158 + 32 * v196) = v156;
      if ((v201 & 1) == 0 || v198 == -1)
      {
        *(_QWORD *)(v158 + 32 * v196 + 8) = v198;
      }
      else
      {
        __dsta = v236;
        *(_QWORD *)(v158 + 32 * v196 + 8) = &v236[-*(_QWORD *)__s1];
        v159 = (char *)(v157[113] + v198);
        v197 = strnlen(v159, v157[114] - (_QWORD)v159);
        v160 = (char *)(v157[107] + v156);
        v161 = strnlen(v160, v157[108] - (_QWORD)v160);
        std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::__insert_with_size[abi:ne180100]<char const*,char const*>((uint64_t)__s1, __dsta, v159, &v159[v197], v197);
        LOBYTE(v233) = 10;
        std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::push_back[abi:ne180100]((uint64_t)__s1, &v233);
        std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::__insert_with_size[abi:ne180100]<char const*,char const*>((uint64_t)__s1, v236, v160, &v160[v161], v161);
        LOBYTE(v233) = 0;
        std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::push_back[abi:ne180100]((uint64_t)__s1, &v233);
        v157 = (_QWORD *)*a2;
      }
      if (v195 == -1)
        v184 = 0;
      else
        v184 = v157[117] + v195;
      v185 = v157[135] + 32 * v196;
      *(_QWORD *)(v185 + 16) = v184;
      *(_BYTE *)(v185 + 24) = *(_BYTE *)(v185 + 24) & 0xFE | v201 & 1;
      if (++v196 >= (unint64_t)v222)
      {
        v186 = *(_QWORD *)(v61 + 24);
        v142 = *(_QWORD *)(v61 + 48);
        v149 = *a2;
        goto LABEL_258;
      }
      continue;
    }
    break;
  }
  v146 = (FILE *)*MEMORY[0x1E0C80C10];
  v147 = 651;
LABEL_265:
  v66.__d_.__rep_ = fprintf(v146, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v147);
  v21 = 0;
  if (v208)
    goto LABEL_191;
LABEL_148:
  if (v211)
  {
    v114 = geo::codec::Allocator::instance((geo::codec::Allocator *)v66.__d_.__rep_);
    v66.__d_.__rep_ = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v114 + 40))(v114, v211, 0);
  }
  if (v113)
  {
    v115 = geo::codec::Allocator::instance((geo::codec::Allocator *)v66.__d_.__rep_);
    v66.__d_.__rep_ = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v115 + 40))(v115, v113, 0);
  }
LABEL_93:
  if (a1)
  {
    if (*(_BYTE *)v61)
    {
      v72 = geo::codec::Allocator::instance((geo::codec::Allocator *)v66.__d_.__rep_);
      v66.__d_.__rep_ = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v72 + 40))(v72, *(_QWORD *)(v61 + 40), 0);
    }
    v73 = geo::codec::Allocator::instance((geo::codec::Allocator *)v66.__d_.__rep_);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 40))(v73, v61, 0);
  }
LABEL_97:
  v75 = v229;
  v74 = v230;
  v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v76 = v232;
  v233 = v75;
  if (v75)
  {
    v77 = v20.__d_.__rep_;
    v234 = &v233;
    v20.__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v74 + 1912, (uint64_t *)&v233, (uint64_t)&std::piecewise_construct, (uint64_t **)&v234);
    *(double *)(v20.__d_.__rep_ + 32) = (double)((v77 - v76) / 1000) * 0.001;
  }
  v78 = v231;
  if (v231)
  {
    v79 = (unint64_t *)&v231->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if (*(_QWORD *)__s1)
  {
    v236 = *(char **)__s1;
    v20.__d_.__rep_ = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v238 + 40))(v238, *(_QWORD *)__s1, v237 - *(_QWORD *)__s1);
  }
LABEL_106:
  if (a1 && v8)
  {
    if (*(_BYTE *)v8)
    {
      v81 = geo::codec::Allocator::instance((geo::codec::Allocator *)v20.__d_.__rep_);
      v20.__d_.__rep_ = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v81 + 40))(v81, *(_QWORD *)(v8 + 40), 0);
    }
    v82 = geo::codec::Allocator::instance((geo::codec::Allocator *)v20.__d_.__rep_);
    v20.__d_.__rep_ = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 40))(v82, v8, 0);
  }
  if (a1 && v11)
  {
    if (*(_BYTE *)v11)
    {
      v83 = geo::codec::Allocator::instance((geo::codec::Allocator *)v20.__d_.__rep_);
      v20.__d_.__rep_ = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v83 + 40))(v83, v11[5], 0);
    }
    v84 = geo::codec::Allocator::instance((geo::codec::Allocator *)v20.__d_.__rep_);
    (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v84 + 40))(v84, v11, 0);
  }
  v86 = v213;
  v85 = v214;
  v87.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v88 = v216;
  v229 = v86;
  if (v86)
  {
    *(_QWORD *)__s1 = &v229;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v85 + 1912, (uint64_t *)&v229, (uint64_t)&std::piecewise_construct, (uint64_t **)__s1)+ 4) = (double)((v87.__d_.__rep_ - v88) / 1000) * 0.001;
  }
  v89 = v215;
  if (!v215)
    goto LABEL_122;
  v90 = (unint64_t *)&v215->__shared_owners_;
  do
    v91 = __ldaxr(v90);
  while (__stlxr(v91 - 1, v90));
  if (!v91)
  {
    ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
    std::__shared_weak_count::__release_weak(v89);
    v100 = v217;
    v92 = v218;
    v94.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v95 = rep;
    v229 = v100;
    if (v100)
    {
LABEL_123:
      *(_QWORD *)__s1 = &v229;
      *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v92 + 1912, (uint64_t *)&v229, (uint64_t)&std::piecewise_construct, (uint64_t **)__s1)+ 4) = (double)((v94.__d_.__rep_ - v95) / 1000) * 0.001;
    }
  }
  else
  {
LABEL_122:
    v93 = v217;
    v92 = v218;
    v94.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v95 = rep;
    v229 = v93;
    if (v93)
      goto LABEL_123;
  }
  v96 = v219;
  if (v219)
  {
    v97 = (unint64_t *)&v219->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  return v21;
}

void sub_1885B8578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v35 - 192));
  std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::~vector[abi:ne180100]((uint64_t *)(v35 - 144));
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)&a31);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)&a35);
  _Unwind_Resume(a1);
}

BOOL BitstreamUnpack(uint64_t *a1, int *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;

  v3 = a1[2];
  v4 = v3 + a3;
  v5 = 8 * a1[1];
  if (v3 + a3 <= v5)
  {
    v6 = 0;
    if (a3)
    {
      v7 = *a1;
      do
      {
        v8 = 8 - (v3 & 7);
        if (a3 < v8)
          v8 = a3;
        v6 = (*(unsigned __int8 *)(v7 + (v3 >> 3)) >> (8 - (v3 & 7) - v8)) & ~(-1 << v8) | (v6 << v8);
        v3 += v8;
        a1[2] = v3;
        a3 -= v8;
      }
      while (a3);
    }
    *a2 = v6;
  }
  return v4 <= v5;
}

_QWORD *std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  float v20;
  float v21;
  uint64_t v22;
  _QWORD *v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t prime;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v7 = *a2;
  v8 = HIDWORD(*a2);
  v9 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v8);
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v8 ^ (v9 >> 47) ^ v9)) >> 47));
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v16 = v14[1];
            if (v16 == v10)
            {
              if (v14[2] == v7)
                return v14;
            }
            else if ((v16 & (v11 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v14 = (_QWORD *)*v14;
            if (!v14)
              goto LABEL_23;
          }
        }
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (v14[2] == v7)
              return v14;
          }
          else
          {
            if (v15 >= v11)
              v15 %= v11;
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_23:
  v18 = operator new(0x28uLL);
  *v18 = 0;
  v18[1] = v10;
  v19 = **a4;
  v18[3] = 0;
  v18[4] = 0;
  v18[2] = v19;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (v11 && (float)(v21 * (float)v11) >= v20)
  {
    v22 = *(_QWORD *)a1;
    v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v23)
    {
LABEL_26:
      *v18 = *v23;
LABEL_61:
      *v23 = v18;
      goto LABEL_62;
    }
  }
  else
  {
    v24 = 1;
    if (v11 >= 3)
      v24 = (v11 & (v11 - 1)) != 0;
    v25 = v24 | (2 * v11);
    v26 = vcvtps_u32_f32(v20 / v21);
    if (v25 <= v26)
      prime = v26;
    else
      prime = v25;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v11 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v11)
      goto LABEL_37;
    if (prime < v11)
    {
      v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
      {
        v28 = std::__next_prime(v28);
      }
      else
      {
        v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2)
          v28 = v30;
      }
      if (prime <= v28)
        prime = v28;
      if (prime < v11)
LABEL_37:
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v31 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v4 = v10 % v11;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        if (v23)
          goto LABEL_26;
      }
      else
      {
        v4 = v10;
        v22 = *(_QWORD *)a1;
        v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        if (v23)
          goto LABEL_26;
      }
    }
    else
    {
      v4 = v31 & v10;
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v31 & v10));
      if (v23)
        goto LABEL_26;
    }
  }
  *v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*v18)
  {
    v32 = *(_QWORD *)(*v18 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v32 >= v11)
        v32 %= v11;
    }
    else
    {
      v32 &= v11 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_61;
  }
LABEL_62:
  ++*(_QWORD *)(a1 + 24);
  return v18;
}

void sub_1885B89C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::codec::chapterAt(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  Bytef *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint8x8_t v29;
  _QWORD **v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  float v34;
  float v35;
  _BOOL8 v36;
  unint64_t v37;
  unint64_t v38;
  size_t prime;
  unint64_t v40;
  uint8x8_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uLongf destLen;

  v4 = a2;
  if (*(_QWORD *)(a1 + 8) <= (unint64_t)a2)
    return 0;
  v7 = *(_QWORD *)a1;
  if (*(unsigned __int16 *)(*(_QWORD *)a1 + 16 * a2) != a3)
    return 0;
  v8 = v7 + 16 * a2;
  v10 = *(_DWORD *)(v8 + 4);
  v9 = (unsigned int *)(v8 + 4);
  if (*(_QWORD *)(a1 + 32) < v9[1] + (unint64_t)v10)
    return 0;
  v14 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 24))(v14, 1, 72);
  v11 = v15;
  if (!v15)
    return v11;
  v16 = (unsigned __int8 *)(*(_QWORD *)(a1 + 24) + *v9);
  v17 = v9[1];
  v18 = *v16;
  *(_BYTE *)v15 = v18;
  v19 = *(_DWORD *)(v7 + 16 * v4 + 12);
  if (v19 == -1)
    v19 = *(_DWORD *)(a1 + 20);
  *(_DWORD *)(v15 + 64) = v19;
  if (v18 != 1)
  {
    if (!v18)
    {
      *(_QWORD *)(v15 + 40) = v16 + 1;
      *(_QWORD *)(v15 + 56) = v17 - 1;
    }
    goto LABEL_16;
  }
  if ((unint64_t)(v17 - 1) <= 4)
  {
LABEL_15:
    *(_QWORD *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 56) = 0;
    goto LABEL_16;
  }
  v20 = *(unsigned int *)(v16 + 1);
  if (v20 > 0x400000)
  {
    v15 = fprintf((FILE *)*MEMORY[0x1E0C80C10], "Cowardly refusing to uncompress to %d bytes\n", *(_DWORD *)(v16 + 1));
    goto LABEL_15;
  }
  *(_QWORD *)(v15 + 56) = v20;
  if ((_DWORD)v20)
  {
    v23 = geo::codec::Allocator::instance((geo::codec::Allocator *)v15);
    v24 = (Bytef *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v20, 8);
    *(_QWORD *)(v11 + 40) = v24;
    destLen = *(_QWORD *)(v11 + 56);
    v15 = uncompress(v24, &destLen, v16 + 5, v17 - 1);
    if ((_DWORD)v15)
      v15 = fprintf((FILE *)*MEMORY[0x1E0C80C10], "uncompress returned %d\n", v15);
  }
  else
  {
    *(_QWORD *)(v15 + 40) = 0;
  }
LABEL_16:
  if (!*(_QWORD *)(v11 + 40))
  {
    v22 = geo::codec::Allocator::instance((geo::codec::Allocator *)v15);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v22 + 40))(v22, v11, 0);
    return 0;
  }
  v21 = "ChapterGlobal";
  switch(a3)
  {
    case 1:
      break;
    case 10:
      v21 = "ChapterLabels";
      break;
    case 11:
      v21 = "ChapterLabelLanguages";
      break;
    case 13:
      v21 = "ChapterLabelLocalizations2";
      break;
    case 20:
      v21 = "ChapterVertices";
      break;
    case 30:
      v21 = "ChapterPointFeatures";
      break;
    case 31:
      v21 = "ChapterLineFeatures";
      break;
    case 32:
      v21 = "ChapterPolygonFeatures";
      break;
    case 33:
      v21 = "ChapterBuildingFeatures";
      break;
    case 34:
      v21 = "ChapterCoastlineFeatures";
      break;
    case 38:
      v21 = "ChapterWrappingCoastlineFeatures";
      break;
    case 39:
      v21 = "ChapterBuildingMeshes";
      break;
    case 51:
      v21 = "ChapterLinePointCharacteristics";
      break;
    case 52:
      v21 = "ChapterPolygonPointCharacteristics";
      break;
    case 55:
      v21 = "ChapterPolygonPointLabelPositions";
      break;
    case 60:
      v21 = "ChapterConnectivity";
      break;
    case 80:
      v21 = "ChapterGeoIDSegments";
      break;
    case 90:
      v21 = "ChapterAddressRanges";
      break;
    case 93:
      v21 = "ChapterTileReferences";
      break;
    case 96:
      v21 = "ChapterHighResBuildings";
      break;
    case 100:
      v21 = "ChapterDebugBlob";
      break;
    case 101:
      v21 = "ChapterElevationRaster";
      break;
    case 102:
      v21 = "ChapterStyleAttributeRaster";
      break;
    case 103:
      v21 = "ChapterDaVinciMetadata";
      break;
    case 104:
      v21 = "ChapterLowResBuildings";
      break;
    case 112:
      v21 = "ChapterTransitMZROverride";
      break;
    case 119:
      v21 = "ChapterCoverage";
      break;
    case 128:
      v21 = "ChapterTransitSystems";
      break;
    case 129:
      v21 = "ChapterTransitNetwork";
      break;
    case 135:
      v21 = "ChapterRoadNetwork";
      break;
    case 136:
      v21 = "ChapterVenueMZROverride";
      break;
    case 137:
      v21 = "ChapterVenues";
      break;
    case 138:
      v21 = "ChapterStorefronts";
      break;
    case 139:
      v21 = "ChapterLowResBorderBuildings";
      break;
    case 140:
      v21 = "ChapterBorderBuildingMeshes";
      break;
    case 141:
      v21 = "ChapterLabelPlacementMetadata";
      break;
    case 142:
      v21 = "ChapterDaVinciBuildings";
      break;
    case 144:
      v21 = "ChapterPointFeaturesAddendum";
      break;
    case 145:
      v21 = "ChapterLinesExtended";
      break;
    case 146:
      v21 = "ChapterTrafficSkeleton1";
      break;
    case 147:
      v21 = "ChapterDaVinciLandmarks";
      break;
    case 148:
      v21 = "ChapterLineWidths1";
      break;
    case 149:
      v21 = "ChapterPointLabelAnnotations";
      break;
    case 151:
      v21 = "ChapterPOIMzrOverrides";
      break;
    case 152:
      v21 = "ChapterTrafficSkeleton2";
      break;
    case 153:
      v21 = "ChapterLineWidths2";
      break;
    case 154:
      v21 = "ChapterStyleAttributeRaster2";
      break;
    case 155:
      v21 = "ChapterMaterialRaster";
      break;
    case 156:
      v21 = "ChapterDaVinciAssetMetadata";
      break;
    case 157:
      v21 = "ChapterRunningTracks";
      break;
    case 158:
      v21 = "ChapterHikingHillShadeRaster";
      break;
    case 159:
      v21 = "ChapterLiveFeatures";
      break;
    case 160:
      v21 = "ChapterAnnotationLabels";
      break;
    case 161:
      v21 = "ChapterContourLinesFeet";
      break;
    case 162:
      v21 = "ChapterSupplementalFeatureIDs";
      break;
    case 164:
      v21 = "ChapterContourLinesMeters";
      break;
    case 165:
      v21 = "ChapterLiveFeaturesMetadatas";
      break;
    case 166:
      v21 = "ChapterPOIUpdates";
      break;
    case 168:
      v21 = "ChapterRegionMetadata";
      break;
    case 169:
      v21 = "ChapterCompressedPolygons";
      break;
    case 170:
      v21 = "ChapterDTMRaster";
      break;
    case 171:
      v21 = "ChapterGlobalContourLinesFeet";
      break;
    case 172:
      v21 = "ChapterGlobalContourLinesMeters";
      break;
    default:
      v21 = "unknown";
      break;
  }
  v25 = 0x9DDFEA08EB382D69 * (((8 * (_DWORD)v21) + 8) ^ ((unint64_t)v21 >> 32));
  v26 = 0x9DDFEA08EB382D69 * (((unint64_t)v21 >> 32) ^ (v25 >> 47) ^ v25);
  v27 = 0x9DDFEA08EB382D69 * (v26 ^ (v26 >> 47));
  v28 = *(_QWORD *)(a4 + 8);
  if (v28)
  {
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      v7 = 0x9DDFEA08EB382D69 * (v26 ^ (v26 >> 47));
      if (v27 >= v28)
        v7 = v27 % v28;
    }
    else
    {
      v7 = v27 & (v28 - 1);
    }
    v30 = *(_QWORD ***)(*(_QWORD *)a4 + 8 * v7);
    if (v30)
    {
      v31 = *v30;
      if (*v30)
      {
        if (v29.u32[0] < 2uLL)
        {
          while (1)
          {
            v33 = v31[1];
            if (v33 == v27)
            {
              if ((const char *)v31[2] == v21)
                goto LABEL_145;
            }
            else if ((v33 & (v28 - 1)) != v7)
            {
              goto LABEL_107;
            }
            v31 = (_QWORD *)*v31;
            if (!v31)
              goto LABEL_107;
          }
        }
        do
        {
          v32 = v31[1];
          if (v32 == v27)
          {
            if ((const char *)v31[2] == v21)
              goto LABEL_145;
          }
          else
          {
            if (v32 >= v28)
              v32 %= v28;
            if (v32 != v7)
              break;
          }
          v31 = (_QWORD *)*v31;
        }
        while (v31);
      }
    }
  }
LABEL_107:
  v31 = operator new(0x28uLL);
  *v31 = 0;
  v31[1] = v27;
  v31[3] = 0;
  v31[4] = 0;
  v31[2] = v21;
  v34 = (float)(unint64_t)(*(_QWORD *)(a4 + 24) + 1);
  v35 = *(float *)(a4 + 32);
  if (!v28 || (float)(v35 * (float)v28) < v34)
  {
    v36 = 1;
    if (v28 >= 3)
      v36 = (v28 & (v28 - 1)) != 0;
    v37 = v36 | (2 * v28);
    v38 = vcvtps_u32_f32(v34 / v35);
    if (v37 <= v38)
      prime = v38;
    else
      prime = v37;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v28 = *(_QWORD *)(a4 + 8);
    }
    if (prime > v28)
      goto LABEL_119;
    if (prime < v28)
    {
      v40 = vcvtps_u32_f32((float)*(unint64_t *)(a4 + 24) / *(float *)(a4 + 32));
      if (v28 < 3 || (v41 = (uint8x8_t)vcnt_s8((int8x8_t)v28), v41.i16[0] = vaddlv_u8(v41), v41.u32[0] > 1uLL))
      {
        v40 = std::__next_prime(v40);
      }
      else
      {
        v42 = 1 << -(char)__clz(v40 - 1);
        if (v40 >= 2)
          v40 = v42;
      }
      if (prime <= v40)
        prime = v40;
      if (prime < v28)
LABEL_119:
        std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(a4, prime);
    }
    v28 = *(_QWORD *)(a4 + 8);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v27 >= v28)
        v7 = v27 % v28;
      else
        v7 = v27;
    }
    else
    {
      v7 = (v28 - 1) & v27;
    }
  }
  v43 = *(_QWORD *)a4;
  v44 = *(_QWORD **)(*(_QWORD *)a4 + 8 * v7);
  if (v44)
  {
    *v31 = *v44;
  }
  else
  {
    *v31 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = v31;
    *(_QWORD *)(v43 + 8 * v7) = a4 + 16;
    if (!*v31)
      goto LABEL_144;
    v45 = *(_QWORD *)(*v31 + 8);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v45 >= v28)
        v45 %= v28;
    }
    else
    {
      v45 &= v28 - 1;
    }
    v44 = (_QWORD *)(*(_QWORD *)a4 + 8 * v45);
  }
  *v44 = v31;
LABEL_144:
  ++*(_QWORD *)(a4 + 24);
LABEL_145:
  v31[3] = v17;
  return v11;
}

void sub_1885B9198(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *geo::MallocZoneAllocator::callocate(malloc_zone_t **this, size_t a2, size_t a3)
{
  geo::read_write_lock *v6;
  const char *v7;
  void *v8;
  unint64_t *v9;
  unint64_t v10;
  geo::read_write_lock *v11;
  const char *v12;
  pthread_rwlock_t *v14;

  v14 = (pthread_rwlock_t *)(this + 7);
  v6 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(this + 7));
  if ((_DWORD)v6)
    geo::read_write_lock::logFailure(v6, (uint64_t)"read lock", v7);
  v8 = malloc_type_zone_calloc(this[6], a2, a3, 0x2C8B3229uLL);
  v9 = (unint64_t *)(this + 5);
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = (geo::read_write_lock *)pthread_rwlock_unlock(v14);
  if ((_DWORD)v11)
    geo::read_write_lock::logFailure(v11, (uint64_t)"unlock", v12);
  return v8;
}

void sub_1885B924C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  geo::read_lock_guard::~read_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

uint64_t std::vector<char,geo::StdAllocator<char,geo::codec::Allocator>>::reserve(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 *v15;
  unint64_t v16;
  __int128 v17;
  char v18;

  v2 = *(_QWORD *)result;
  if (*(_QWORD *)(result + 16) - *(_QWORD *)result < a2)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 8);
    v6 = v5 - v2;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24));
    v7 = result + v5 - v2;
    v8 = result + a2;
    v10 = *(_QWORD *)v4;
    v9 = *(_QWORD *)(v4 + 8);
    v11 = v9 - *(_QWORD *)v4;
    if (v9 != *(_QWORD *)v4)
    {
      if (v11 >= 0x20)
      {
        v12 = result + v6;
        if ((unint64_t)(v2 - v5 - result + v9) >= 0x20)
        {
          v12 = v7 - (v11 & 0xFFFFFFFFFFFFFFE0);
          v14 = (_OWORD *)(v6 + result - 16);
          v15 = (__int128 *)(v9 - 16);
          v16 = v11 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v17 = *v15;
            *(v14 - 1) = *(v15 - 1);
            *v14 = v17;
            v14 -= 2;
            v15 -= 2;
            v16 -= 32;
          }
          while (v16);
          v9 -= v11 & 0xFFFFFFFFFFFFFFE0;
          if (v11 == (v11 & 0xFFFFFFFFFFFFFFE0))
          {
LABEL_12:
            v9 = *(_QWORD *)v4;
            *(_QWORD *)v4 = v12;
            *(_QWORD *)(v4 + 8) = v7;
            v13 = *(_QWORD *)(v4 + 16);
            *(_QWORD *)(v4 + 16) = v8;
            if (!v9)
              return result;
            return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 24) + 40))(*(_QWORD *)(v4 + 24), v9, v13 - v9);
          }
        }
      }
      else
      {
        v12 = result + v6;
      }
      do
      {
        v18 = *(_BYTE *)--v9;
        *(_BYTE *)--v12 = v18;
      }
      while (v9 != v10);
      goto LABEL_12;
    }
    *(_QWORD *)v4 = v7;
    *(_QWORD *)(v4 + 8) = v7;
    v13 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v4 + 16) = v8;
    if (v9)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v4 + 24) + 40))(*(_QWORD *)(v4 + 24), v9, v13 - v9);
  }
  return result;
}

_QWORD *std::vector<GeoCodecsLocalizationTableEntry,geo::StdAllocator<GeoCodecsLocalizationTableEntry,geo::codec::Allocator>>::resize(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = (uint64_t)(result[1] - *result) >> 5;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
    return (_QWORD *)std::vector<GeoCodecsLocalizationTableEntry,geo::StdAllocator<GeoCodecsLocalizationTableEntry,geo::codec::Allocator>>::__append((uint64_t)result, v4);
  if (!v3)
    result[1] = *result + 32 * a2;
  return result;
}

uint64_t BitstreamUnpackVar32(uint64_t *a1, int *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;

  v2 = a1[2];
  v3 = 8 * a1[1];
  if (v2 + 5 > v3)
    return 0;
  v5 = 0;
  v6 = *a1;
  v7 = 5;
  do
  {
    v8 = 8 - (v2 & 7);
    if (v7 < v8)
      v8 = v7;
    v5 = (*(unsigned __int8 *)(v6 + (v2 >> 3)) >> (8 - (v2 & 7) - v8)) & ~(-1 << v8) | (v5 << v8);
    v2 += v8;
    a1[2] = v2;
    v7 -= v8;
  }
  while (v7);
  v9 = (v5 + 1);
  if (v2 + v9 > v3)
    return 0;
  v10 = 0;
  if ((_DWORD)v9)
  {
    do
    {
      v11 = 8 - (v2 & 7);
      if (v9 < v11)
        v11 = v9;
      v10 = (*(unsigned __int8 *)(v6 + (v2 >> 3)) >> (8 - (v2 & 7) - v11)) & ~(-1 << v11) | (v10 << v11);
      v2 += v11;
      a1[2] = v2;
      v9 -= v11;
    }
    while (v9);
  }
  *a2 = v10;
  return 1;
}

BOOL GEODisplayStringReadAllFrom(_QWORD *a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v17;
  GEOLocalizedString *v19;
  id v20;
  void *v21;
  _BOOL8 v22;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          if (v14 == -1 || v14 >= *(_QWORD *)&v5[*v7])
            break;
          v15 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v14 + 1;
          v12 |= (unint64_t)(v15 & 0x7F) << v10;
          if ((v15 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          if (v11++ >= 9)
          {
            v12 = 0;
            v17 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v17 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v17 || (v12 & 7) == 4)
          break;
        if ((v12 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_29;
          v19 = objc_alloc_init(GEOLocalizedString);
          if (!GEOLocalizedStringReadAllFrom((uint64_t)v19, v5, a3))
          {

            goto LABEL_29;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "addLocalizedStrings:", v19, 0, 0);

        }
        else
        {
          if (!a1[1])
          {
            v20 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v21 = (void *)a1[1];
            a1[1] = v20;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_29;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v22 = v5[*v8] == 0;
  }
  else
  {
LABEL_29:
    v22 = 0;
  }
  objc_sync_exit(v5);

  return v22;
}

void sub_1885B9BE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedStringReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLocalizedStringReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLocalizedStringReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLocalizedStringReadAllFrom_initialTag;
  Specified = GEOLocalizedStringReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_1885B9D68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedStringReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned __int8 v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  int v41;
  char v42;
  char v43;
  char v44;
  int v45;
  int v46;
  void *v47;
  int v49;
  int *v50;
  unsigned __int8 v51;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        v12 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 != 0;
        v15 = v14 | v7;
        v51 = v14 & ~(_BYTE)v7 | v8;
        if ((((v14 | v7) | v9) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
        v13 = v8;
LABEL_8:
        ++v10;
        v7 = v12;
        v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_59;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      if (v21++ >= 9)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_59:
      v49 = 1;
      goto LABEL_60;
    }
    v30 = v22 >> 3;
    v31 = v15;
    if (!((v16 == 0) | v15 & 1))
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    if ((_DWORD)v30 == 3)
      break;
    if ((_DWORD)v30 == 1)
    {
      if (v31)
      {
        if ((*(_BYTE *)(a1 + 52) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_79;
          v43 = *(_BYTE *)(a1 + 52) << 6;
          goto LABEL_57;
        }
        PBReaderReadString();
        v36 = objc_claimAutoreleasedReturnValue();
        v37 = 24;
        goto LABEL_44;
      }
    }
    else if ((v51 & 1) != 0 && (*(_BYTE *)(a1 + 52) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v39 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v40 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v39;

      }
      v41 = PBUnknownFieldAdd();
      v18 = (int *)MEMORY[0x1E0D82BC8];
      if (!v41)
      {
        v49 = 0;
        v50 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
        goto LABEL_62;
      }
      goto LABEL_58;
    }
LABEL_51:
    v42 = PBReaderSkipValueWithTag();
    v18 = (int *)MEMORY[0x1E0D82BC8];
    if ((v42 & 1) == 0)
    {
      v49 = 0;
LABEL_60:
      v50 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
      goto LABEL_61;
    }
LABEL_58:
    if (!((v15 | v51) & 1 | (v10 != 0)))
      goto LABEL_59;
  }
  if (!v31)
    goto LABEL_51;
  if ((*(_BYTE *)(a1 + 52) & 4) == 0)
  {
    PBReaderReadString();
    v36 = objc_claimAutoreleasedReturnValue();
    v37 = 32;
LABEL_44:
    v38 = *(void **)(a1 + v37);
    *(_QWORD *)(a1 + v37) = v36;

    v18 = (int *)MEMORY[0x1E0D82BC8];
    --v10;
    goto LABEL_58;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v43 = 32 * *(_BYTE *)(a1 + 52);
LABEL_57:
    v10 += v43 >> 7;
    v18 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_58;
  }
LABEL_79:
  v49 = 0;
  v50 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
  v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_61:
  if ((v51 & 1) == 0)
    goto LABEL_63;
LABEL_62:
  *(_BYTE *)(a1 + v50[269]) |= 1u;
LABEL_63:
  if (v15 & 1 | ((v49 & 1) == 0))
  {
    *(_BYTE *)(a1 + v50[269]) |= 2u;
    *(_BYTE *)(a1 + v50[269]) |= 4u;
    goto LABEL_73;
  }
  if (v16)
  {
    while (1)
    {
      v46 = *v16++;
      v45 = v46;
      if (v46 == 1)
        break;
      if (v45 == 3)
      {
        v44 = 4;
LABEL_69:
        *(_BYTE *)(a1 + v50[269]) |= v44;
      }
      else if (!v45)
      {
        goto LABEL_73;
      }
    }
    v44 = 2;
    goto LABEL_69;
  }
LABEL_73:
  if (v49)
  {
    v3 = *(_BYTE *)(v3 + *v18) == 0;
    if ((v15 & 1) == 0)
      return v3;
LABEL_77:
    v47 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  else
  {
    v3 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_77;
  }
  return v3;
}

void sub_1885BA940(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885BAB20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885BABD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOActiveTileSetReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 100))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOActiveTileSetReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 96) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 100) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOActiveTileSetReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOActiveTileSetReadAllFrom_initialTag;
  Specified = GEOActiveTileSetReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOActiveTileSetCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
  return Specified;
}

void sub_1885BAD6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOActiveTileSetReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  BOOL v30;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  int v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  GEOSentinelTile *v75;
  void *v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  char v102;
  uint64_t v103;
  __int16 v104;
  int v105;
  __int16 v106;
  void *v107;
  int v109;
  int *v110;
  char v111;
  char v112;
  char v113;
  char v114;
  BOOL v115;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 104));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 100);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 96));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int16 *)(a1 + 144) >> 5) & 1)
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 144)), (uint16x4_t)0xFFF6FFF5FFF9FFFALL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 144) >> 12) & 1)+ (HIBYTE(*(_WORD *)(a1 + 144)) & 1)+ ((*(_WORD *)(a1 + 144) >> 9) & 1));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 4;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v111 = v17;
        v112 = v8;
        v113 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v114 = (v19 == 0) | v18;
        v115 = v18;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_194;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v23 += 7;
      v30 = v24++ >= 9;
      if (v30)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_194:
      v109 = 1;
      goto LABEL_195;
    }
    v33 = v25 >> 3;
    v34 = v115;
    if ((v114 & 1) == 0)
    {
      v35 = v19;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34)
          goto LABEL_148;
        if ((*(_WORD *)(a1 + 144) & 0x80) == 0)
        {
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 48;
          goto LABEL_101;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_215;
        v104 = *(_WORD *)(a1 + 144) << 8;
        goto LABEL_191;
      case 3:
        if ((v112 & 1) == 0)
          goto LABEL_148;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        while (2)
        {
          v47 = *v20;
          v48 = *(_QWORD *)(v3 + v47);
          v49 = v48 + 1;
          if (v48 == -1 || v49 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v48);
            *(_QWORD *)(v3 + v47) = v49;
            v46 |= (unint64_t)(v50 & 0x7F) << v44;
            if (v50 < 0)
            {
              v44 += 7;
              v30 = v45++ >= 9;
              if (v30)
              {
                LODWORD(v46) = 0;
                goto LABEL_153;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v46) = 0;
LABEL_153:
        v103 = 124;
        goto LABEL_182;
      case 4:
        if ((v112 & 1) == 0)
          goto LABEL_148;
        v51 = 0;
        v52 = 0;
        v46 = 0;
        while (2)
        {
          v53 = *v20;
          v54 = *(_QWORD *)(v3 + v53);
          v55 = v54 + 1;
          if (v54 == -1 || v55 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v54);
            *(_QWORD *)(v3 + v53) = v55;
            v46 |= (unint64_t)(v56 & 0x7F) << v51;
            if (v56 < 0)
            {
              v51 += 7;
              v30 = v52++ >= 9;
              if (v30)
              {
                LODWORD(v46) = 0;
                goto LABEL_157;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v46) = 0;
LABEL_157:
        v103 = 116;
        goto LABEL_182;
      case 5:
        if ((v112 & 1) == 0)
          goto LABEL_148;
        v57 = 0;
        v58 = 0;
        v46 = 0;
        while (2)
        {
          v59 = *v20;
          v60 = *(_QWORD *)(v3 + v59);
          v61 = v60 + 1;
          if (v60 == -1 || v61 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v62 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v60);
            *(_QWORD *)(v3 + v59) = v61;
            v46 |= (unint64_t)(v62 & 0x7F) << v57;
            if (v62 < 0)
            {
              v57 += 7;
              v30 = v58++ >= 9;
              if (v30)
              {
                LODWORD(v46) = 0;
                goto LABEL_161;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v46) = 0;
LABEL_161:
        v103 = 120;
        goto LABEL_182;
      case 6:
        if ((v112 & 1) == 0)
          goto LABEL_148;
        v63 = 0;
        v64 = 0;
        v46 = 0;
        while (2)
        {
          v65 = *v20;
          v66 = *(_QWORD *)(v3 + v65);
          v67 = v66 + 1;
          if (v66 == -1 || v67 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v68 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v66);
            *(_QWORD *)(v3 + v65) = v67;
            v46 |= (unint64_t)(v68 & 0x7F) << v63;
            if (v68 < 0)
            {
              v63 += 7;
              v30 = v64++ >= 9;
              if (v30)
              {
                LODWORD(v46) = 0;
                goto LABEL_165;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v46) = 0;
LABEL_165:
        v103 = 136;
        goto LABEL_182;
      case 7:
        if ((v112 & 1) == 0)
          goto LABEL_148;
        v69 = 0;
        v70 = 0;
        v46 = 0;
        *(_WORD *)(a1 + 144) |= 4u;
        while (2)
        {
          v71 = *v20;
          v72 = *(_QWORD *)(v3 + v71);
          v73 = v72 + 1;
          if (v72 == -1 || v73 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v74 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v72);
            *(_QWORD *)(v3 + v71) = v73;
            v46 |= (unint64_t)(v74 & 0x7F) << v69;
            if (v74 < 0)
            {
              v69 += 7;
              v30 = v70++ >= 9;
              if (v30)
              {
                LODWORD(v46) = 0;
                goto LABEL_169;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v46) = 0;
LABEL_169:
        v103 = 128;
        goto LABEL_182;
      case 8:
        if (!v34 || (*(_WORD *)(a1 + 144) & 0x40) != 0)
          goto LABEL_148;
        if (!PBReaderPlaceMark())
          goto LABEL_215;
        -[GEOActiveTileSet _reserveAvailableTiles:](a1, 1uLL);
        if (!GEOTileSetRegionReadAllFrom((_DWORD *)(*(_QWORD *)(a1 + 24) + 24 * *(_QWORD *)(a1 + 32)), v3))
          goto LABEL_215;
        PBReaderRecallMark();
        ++*(_QWORD *)(a1 + 32);
        goto LABEL_192;
      case 9:
        if (!v34 || (*(_WORD *)(a1 + 144) & 0x800) != 0)
          goto LABEL_148;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_215;
        v75 = objc_alloc_init(GEOSentinelTile);
        if (!GEOSentinelTileReadAllFrom((uint64_t)v75, (void *)v3))
          goto LABEL_214;
        PBReaderRecallMark();
        -[GEOActiveTileSet _addNoFlagsSentinelTile:](a1, v75);
        goto LABEL_147;
      case 10:
        if (!v34)
          goto LABEL_148;
        if ((*(_WORD *)(a1 + 144) & 0x400) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_215;
          v104 = 32 * *(_WORD *)(a1 + 144);
LABEL_191:
          v7 += v104 >> 15;
        }
        else
        {
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 72;
LABEL_101:
          v76 = *(void **)(a1 + v40);
          *(_QWORD *)(a1 + v40) = v39;

          --v7;
        }
        goto LABEL_192;
      case 11:
        if (!v34 || (*(_WORD *)(a1 + 144) & 0x1000) != 0)
          goto LABEL_148;
        PBReaderReadString();
        v75 = (GEOSentinelTile *)objc_claimAutoreleasedReturnValue();
        if (v75)
          -[GEOActiveTileSet _addNoFlagsSupportedLanguage:](a1, v75);
        goto LABEL_147;
      case 13:
        if ((v112 & 1) == 0)
          goto LABEL_148;
        v77 = 0;
        v78 = 0;
        v46 = 0;
        *(_WORD *)(a1 + 144) |= 8u;
        while (2)
        {
          v79 = *v20;
          v80 = *(_QWORD *)(v3 + v79);
          v81 = v80 + 1;
          if (v80 == -1 || v81 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v82 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v80);
            *(_QWORD *)(v3 + v79) = v81;
            v46 |= (unint64_t)(v82 & 0x7F) << v77;
            if (v82 < 0)
            {
              v77 += 7;
              v30 = v78++ >= 9;
              if (v30)
              {
                LODWORD(v46) = 0;
                goto LABEL_173;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v46) = 0;
LABEL_173:
        v103 = 132;
        goto LABEL_182;
      case 14:
        if (!v34 || (*(_WORD *)(a1 + 144) & 0x100) != 0)
          goto LABEL_148;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_215;
        v75 = objc_alloc_init(GEOCountryRegionTuple);
        if (GEOCountryRegionTupleReadAllFrom((uint64_t)v75, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          -[GEOActiveTileSet _addNoFlagsCountryRegionAllowlist:](a1, v75);
LABEL_147:

LABEL_192:
          v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_193:
          if (!(v113 & 1 | (v7 != 0)))
            goto LABEL_194;
          continue;
        }
LABEL_214:

LABEL_215:
        v109 = 0;
        v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_195:
        v110 = &OBJC_IVAR___GEOLPRRestrictionRegion__name;
        if ((v111 & 1) != 0)
LABEL_196:
          *(_WORD *)(a1 + v110[955]) |= 0x20u;
        if (v115 || (v109 & 1) == 0)
        {
          *(_WORD *)(a1 + v110[955]) |= 0x80u;
          *(_WORD *)(a1 + v110[955]) |= 0x40u;
          *(_WORD *)(a1 + v110[955]) |= 0x800u;
          *(_WORD *)(a1 + v110[955]) |= 0x400u;
          *(_WORD *)(a1 + v110[955]) |= 0x1000u;
          *(_WORD *)(a1 + v110[955]) |= 0x100u;
          *(_WORD *)(a1 + v110[955]) |= 0x200u;
        }
        else if (v19)
        {
          while (1)
          {
            v105 = *v19++;
            v106 = 128;
            switch(v105)
            {
              case 0:
                goto LABEL_208;
              case 1:
                goto LABEL_207;
              case 8:
                v106 = 64;
                goto LABEL_207;
              case 9:
                v106 = 2048;
                goto LABEL_207;
              case 10:
                v106 = 1024;
                goto LABEL_207;
              case 11:
                v106 = 4096;
                goto LABEL_207;
              case 14:
                v106 = 256;
                goto LABEL_207;
              case 18:
                v106 = 512;
LABEL_207:
                *(_WORD *)(a1 + v110[955]) |= v106;
                break;
              default:
                continue;
            }
          }
        }
LABEL_208:
        if (v109)
          v3 = *(_BYTE *)(v3 + *v21) == 0;
        else
          v3 = 0;
        if (v115)
        {
          v107 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 15:
        if ((v112 & 1) == 0)
          goto LABEL_148;
        v83 = 0;
        v84 = 0;
        v46 = 0;
        *(_WORD *)(a1 + 144) |= 1u;
        while (2)
        {
          v85 = *v20;
          v86 = *(_QWORD *)(v3 + v85);
          v87 = v86 + 1;
          if (v86 == -1 || v87 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v88 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v86);
            *(_QWORD *)(v3 + v85) = v87;
            v46 |= (unint64_t)(v88 & 0x7F) << v83;
            if (v88 < 0)
            {
              v83 += 7;
              v30 = v84++ >= 9;
              if (v30)
              {
                LODWORD(v46) = 0;
                goto LABEL_177;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v46) = 0;
LABEL_177:
        v103 = 108;
        goto LABEL_182;
      case 16:
        if ((v112 & 1) == 0)
          goto LABEL_148;
        v89 = 0;
        v90 = 0;
        v46 = 0;
        *(_WORD *)(a1 + 144) |= 2u;
        while (2)
        {
          v91 = *v20;
          v92 = *(_QWORD *)(v3 + v91);
          v93 = v92 + 1;
          if (v92 == -1 || v93 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v94 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v92);
            *(_QWORD *)(v3 + v91) = v93;
            v46 |= (unint64_t)(v94 & 0x7F) << v89;
            if (v94 < 0)
            {
              v89 += 7;
              v30 = v90++ >= 9;
              if (v30)
              {
                LODWORD(v46) = 0;
                goto LABEL_181;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v46) = 0;
LABEL_181:
        v103 = 112;
LABEL_182:
        *(_DWORD *)(a1 + v103) = v46;
        goto LABEL_193;
      case 17:
        if ((v112 & 1) == 0)
          goto LABEL_148;
        v95 = 0;
        v96 = 0;
        v97 = 0;
        *(_WORD *)(a1 + 144) |= 0x10u;
        while (2)
        {
          v98 = *v20;
          v99 = *(_QWORD *)(v3 + v98);
          v100 = v99 + 1;
          if (v99 == -1 || v100 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v101 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v99);
            *(_QWORD *)(v3 + v98) = v100;
            v97 |= (unint64_t)(v101 & 0x7F) << v95;
            if (v101 < 0)
            {
              v95 += 7;
              v30 = v96++ >= 9;
              if (v30)
              {
                v97 = 0;
                goto LABEL_186;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          v97 = 0;
LABEL_186:
        *(_BYTE *)(a1 + 140) = v97 != 0;
        goto LABEL_193;
      case 18:
        if (!v34 || (*(_WORD *)(a1 + 144) & 0x200) != 0)
          goto LABEL_148;
        PBReaderReadString();
        v75 = (GEOSentinelTile *)objc_claimAutoreleasedReturnValue();
        if (v75)
          -[GEOActiveTileSet _addNoFlagsDeviceSKUAllowlist:](a1, v75);
        goto LABEL_147;
      default:
        if ((v111 & 1) == 0 || (*(_WORD *)(a1 + 144) & 0x20) != 0)
        {
LABEL_148:
          v102 = PBReaderSkipValueWithTag();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if ((v102 & 1) == 0)
          {
            v109 = 0;
            goto LABEL_195;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v41 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v42 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v41;

          }
          v43 = PBUnknownFieldAdd();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          if (!v43)
          {
            v109 = 0;
            v110 = &OBJC_IVAR___GEOLPRRestrictionRegion__name;
            goto LABEL_196;
          }
        }
        goto LABEL_193;
    }
  }
}

void sub_1885BBD74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1885BBDFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t GEOTileSetRegionIntersectsMapRect(unsigned int *a1, double a2, double a3, double a4, double a5)
{
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  unint64_t v21;
  unsigned int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  _BOOL4 v29;
  double v30;
  char v31;
  unint64_t v32;
  int v33;
  unsigned __int16 v34;
  unsigned __int8 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (fabs(a2) < 0.00000001
    && fabs(a3) < 0.00000001
    && fabs(a4 + -268435456.0) < 0.00000001
    && fabs(a5 + -268435456.0) < 0.00000001)
  {
    return 1;
  }
  v31 = 0;
  v11 = a1[4];
  v12 = a1[3];
  v13 = ((unint64_t)(a1[5] & 0x3F) << 40) | (v12 << 46);
  v35 = 0;
  v34 = (v11 >> 24) & 3;
  v33 = (v12 >> 18) | ((_DWORD)v11 << 8);
  v32 = v13;
  v14 = GEOMapRectForGEOTileKey((uint64_t)&v31);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v21 = *a1;
  v22 = a1[1];
  v32 = v32 & 0x3FFFFFFFFFFFLL | ((unint64_t)v21 << 46);
  v33 = (v21 >> 18) | (v22 << 8);
  v34 = (((unint64_t)(v34 | (v35 << 16)) << 32) & 0xFFFFFC00000000 | (v21 >> 18) | ((unint64_t)(v22 & 0x3FFFFFF) << 8)) >> 32;
  v23 = GEOMapRectForGEOTileKey((uint64_t)&v31);
  v25 = GEOMapRectUnion(v14, v16, v18, v20, v23, v24);
  v29 = fabs(GEOMapRectIntersection(a2, a3, a4, a5, v25, v26, v27, v28)) != INFINITY;
  return fabs(v30) != INFINITY && v29;
}

unint64_t GEOCountryRegionTupleReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOCountryRegionTupleReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOCountryRegionTupleReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOCountryRegionTupleReadAllFrom_initialTag;
  Specified = GEOCountryRegionTupleReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_1885BC290(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOCountryRegionTupleReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned __int8 v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  int v27;
  unint64_t v29;
  BOOL v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  void *v39;
  int v40;
  char v41;
  char v42;
  char v43;
  int v44;
  int v45;
  void *v46;
  int v48;
  int *v49;
  unsigned __int8 v50;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        v12 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 != 0;
        v15 = v14 | v7;
        v50 = v14 & ~(_BYTE)v7 | v8;
        if ((((v14 | v7) | v9) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
        v13 = v8;
LABEL_8:
        ++v10;
        v7 = v12;
        v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_59;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      if (v24 == -1 || v24 >= *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v24 + 1;
      v22 |= (unint64_t)(v25 & 0x7F) << v20;
      if ((v25 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      if (v21++ >= 9)
      {
        v22 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v27 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v27 || (v22 & 7) == 4)
    {
LABEL_59:
      v48 = 1;
      goto LABEL_60;
    }
    v29 = v22 >> 3;
    v30 = v15;
    if (!((v16 == 0) | v15 & 1))
    {
      v31 = v16;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    if ((_DWORD)v29 == 2)
      break;
    if ((_DWORD)v29 == 1)
    {
      if (v30)
      {
        if ((*(_BYTE *)(a1 + 52) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_79;
          v42 = *(_BYTE *)(a1 + 52) << 6;
          goto LABEL_57;
        }
        PBReaderReadString();
        v35 = objc_claimAutoreleasedReturnValue();
        v36 = 24;
        goto LABEL_44;
      }
    }
    else if ((v50 & 1) != 0 && (*(_BYTE *)(a1 + 52) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v38 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v39 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v38;

      }
      v40 = PBUnknownFieldAdd();
      v18 = (int *)MEMORY[0x1E0D82BC8];
      if (!v40)
      {
        v48 = 0;
        v49 = &OBJC_IVAR___GEOTextItemContainer__textItems;
        goto LABEL_62;
      }
      goto LABEL_58;
    }
LABEL_51:
    v41 = PBReaderSkipValueWithTag();
    v18 = (int *)MEMORY[0x1E0D82BC8];
    if ((v41 & 1) == 0)
    {
      v48 = 0;
LABEL_60:
      v49 = &OBJC_IVAR___GEOTextItemContainer__textItems;
      goto LABEL_61;
    }
LABEL_58:
    if (!((v15 | v50) & 1 | (v10 != 0)))
      goto LABEL_59;
  }
  if (!v30)
    goto LABEL_51;
  if ((*(_BYTE *)(a1 + 52) & 4) == 0)
  {
    PBReaderReadString();
    v35 = objc_claimAutoreleasedReturnValue();
    v36 = 32;
LABEL_44:
    v37 = *(void **)(a1 + v36);
    *(_QWORD *)(a1 + v36) = v35;

    v18 = (int *)MEMORY[0x1E0D82BC8];
    --v10;
    goto LABEL_58;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v42 = 32 * *(_BYTE *)(a1 + 52);
LABEL_57:
    v10 += v42 >> 7;
    v18 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_58;
  }
LABEL_79:
  v48 = 0;
  v49 = &OBJC_IVAR___GEOTextItemContainer__textItems;
  v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_61:
  if ((v50 & 1) == 0)
    goto LABEL_63;
LABEL_62:
  *(_BYTE *)(a1 + v49[42]) |= 1u;
LABEL_63:
  if (v15 & 1 | ((v48 & 1) == 0))
  {
    *(_BYTE *)(a1 + v49[42]) |= 2u;
    *(_BYTE *)(a1 + v49[42]) |= 4u;
    goto LABEL_73;
  }
  if (v16)
  {
    while (1)
    {
      v45 = *v16++;
      v44 = v45;
      if (v45 == 1)
        break;
      if (v44 == 2)
      {
        v43 = 4;
LABEL_69:
        *(_BYTE *)(a1 + v49[42]) |= v43;
      }
      else if (!v44)
      {
        goto LABEL_73;
      }
    }
    v43 = 2;
    goto LABEL_69;
  }
LABEL_73:
  if (v48)
  {
    v3 = *(_BYTE *)(v3 + *v18) == 0;
    if ((v15 & 1) == 0)
      return v3;
LABEL_77:
    v46 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  else
  {
    v3 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_77;
  }
  return v3;
}

void sub_1885BC81C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSentinelTileReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  _BOOL8 v29;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          PBReaderReadString();
          v25 = objc_claimAutoreleasedReturnValue();
          v26 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v25;

        }
        else if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_34;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_36;
            }
          }
          v3[*v6] = 1;
LABEL_34:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_36:
          *(_DWORD *)(a1 + 24) = v20;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v27 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v28 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v27;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_39;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v29 = v3[*v6] == 0;
  }
  else
  {
LABEL_39:
    v29 = 0;
  }
  objc_sync_exit(v3);

  return v29;
}

void sub_1885BCB7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885BCD48(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

uint64_t GEORegionalResourceSetReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORegionalResourceSetReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORegionalResourceSetReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORegionalResourceSetReadAllFrom_initialTag;
  Specified = GEORegionalResourceSetReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEORegionalResourceSetCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_1885BD0C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOResourceFilterReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 76))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOResourceFilterReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 76) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOResourceFilterReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOResourceFilterReadAllFrom_initialTag;
  Specified = GEOResourceFilterReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return Specified;
}

void sub_1885BD250(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOResourceReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 76))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOResourceReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 76) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOResourceReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOResourceReadAllFrom_initialTag;
  Specified = GEOResourceReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOResourceCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return Specified;
}

void sub_1885BD3E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885BD86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _getValue(int a1, uint64_t a2, int a3, void *a4, _QWORD *a5, void *a6)
{
  id v11;
  _QWORD *v12;
  uint64_t MetadataStruct;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  id v20;
  void (**v21)(_QWORD, _QWORD);
  _QWORD *v22;
  void (**v23)(_QWORD, _QWORD);
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  int v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  char v40;
  void *v41;
  uint64_t v42;
  _QWORD *v44;
  void *v45;
  void *v46;
  id v47;
  void (**v48)(void);
  uint8_t buf[8];
  _QWORD v50[5];

  v11 = a4;
  v12 = a6;
  if (a1 && a2)
  {
    MetadataStruct = _getMetadataStruct(a1, a2);
    if (MetadataStruct)
    {
      v14 = MetadataStruct;
      v15 = *(id *)(MetadataStruct + 8);
      v17 = *(_QWORD *)(v14 + 16);
      v16 = *(_QWORD *)(v14 + 24);
      v48 = (void (**)(void))MEMORY[0x18D765024](*(_QWORD *)(v14 + 32));
      if (*(_BYTE *)v14)
        v18 = *(_QWORD *)(v14 + 48);
      else
        v18 = 0;
      v21 = (void (**)(_QWORD, _QWORD))MEMORY[0x18D765024](v18);
      v22 = v12;
      if (!v12)
      {
        v50[0] = MEMORY[0x1E0C809B0];
        v50[1] = 3221225472;
        v50[2] = ___getValue_block_invoke;
        v50[3] = &__block_descriptor_40_e8__16__0_8l;
        v50[4] = v16;
        v22 = v50;
      }
      v23 = (void (**)(_QWORD, _QWORD))MEMORY[0x18D765024](v22);
      *(_QWORD *)buf = 0;
      _GEOConfigStorageCFProfile();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v24, "getConfigValueForKey:countryCode:options:source:", v15, 0, 0, buf);
      v25 = (void *)objc_claimAutoreleasedReturnValue();

      if (*(_QWORD *)buf == 1)
      {
        if (v25)
        {
          ((void (**)(_QWORD, void *))v23)[2](v23, v25);
          v26 = (void *)objc_claimAutoreleasedReturnValue();

          if (a5 && v26)
            *a5 = *(_QWORD *)buf;
        }
        else
        {
          v26 = 0;
        }
        v20 = v26;
LABEL_64:

        goto LABEL_65;
      }
      v44 = a5;
      if ((v17 & 0x200) != 0)
      {
        v27 = v11;
        if (!v11)
        {
          +[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration");
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v33, "countryCode");
          v47 = (id)objc_claimAutoreleasedReturnValue();

LABEL_22:
          _GEOConfigProxy();
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v28, "configStoreForOptions:", v17);
          v46 = (void *)objc_claimAutoreleasedReturnValue();

          _GEOConfigProxy();
          v29 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v29, "configExpiryForOptions:", v17);
          v30 = (void *)objc_claimAutoreleasedReturnValue();

          v45 = v30;
          if ((v17 & 0xFF0000) == 0x10000)
          {
            v31 = v44;
            goto LABEL_35;
          }
          v32 = objc_msgSend(v30, "getConfigKeyIsExpired:", v15);
          v31 = v44;
          if (v25)
          {
LABEL_42:
            objc_msgSend(MEMORY[0x1E0C99E38], "null");
            v38 = (void *)objc_claimAutoreleasedReturnValue();
            if (v25 != v38)
            {

LABEL_52:
              v40 = a3 ^ 1;
              if (v25)
                v40 = 0;
              if ((v40 & 1) != 0)
              {
                v41 = v45;
              }
              else
              {
                v41 = v45;
                if (v21)
                {
                  if (qword_1ECDBC300 != -1)
                    dispatch_once(&qword_1ECDBC300, &__block_literal_global_126);
                  if ((_MergedGlobals_266 & 1) == 0)
                  {
                    if (!v25 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
                    {
                      ((void (**)(_QWORD, void *))v21)[2](v21, v25);
                      v42 = objc_claimAutoreleasedReturnValue();

                      v25 = (void *)v42;
                    }
                  }
                }
              }
              v20 = v25;

              goto LABEL_64;
            }

            if (!a3)
              goto LABEL_52;
LABEL_47:
            v48[2]();
            v39 = (void *)objc_claimAutoreleasedReturnValue();

            if (v39)
            {
              ((void (**)(_QWORD, void *))v23)[2](v23, v39);
              v25 = (void *)objc_claimAutoreleasedReturnValue();

              if (v31 && v25)
                *v31 = 9;
            }
            else
            {
              v25 = 0;
            }
            goto LABEL_52;
          }
          if (v32)
          {
            _GEOConfigClearExpiredKey(v15, v17);
          }
          else
          {
            objc_msgSend(v46, "getConfigValueForKey:countryCode:options:source:", v15, v47, v17, buf);
            v34 = objc_claimAutoreleasedReturnValue();
            if (v34)
            {
              v35 = (void *)v34;
              v23[2](v23, v34);
              v25 = (void *)objc_claimAutoreleasedReturnValue();

              if (v44 && v25)
                goto LABEL_40;
LABEL_35:
              if (!v25 && (v17 & 0x100) != 0)
              {
                _GEOGetConfigStorageRemote();
                v36 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v36, "getConfigValueForKey:countryCode:options:source:", v15, v47, 0, buf);
                v37 = (void *)objc_claimAutoreleasedReturnValue();

                if (!v37)
                  goto LABEL_44;
                ((void (**)(_QWORD, void *))v23)[2](v23, v37);
                v25 = (void *)objc_claimAutoreleasedReturnValue();

                if (v31 && v25)
                {
LABEL_40:
                  *v31 = *(_QWORD *)buf;
                  goto LABEL_42;
                }
              }
              if (v25)
                goto LABEL_42;
LABEL_44:
              v25 = 0;
              if ((a3 & 1) == 0)
                goto LABEL_52;
              goto LABEL_47;
            }
          }
          v25 = 0;
          goto LABEL_35;
        }
      }
      else
      {
        v27 = 0;
      }
      v47 = v27;
      goto LABEL_22;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Assertion failed: metadataStruct != ((void *)0)", buf, 2u);
    }
  }
  else
  {
    j__GEOGetUserDefaultsLog();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1885A9000, v19, OS_LOG_TYPE_ERROR, "tried to get invalid config key", buf, 2u);
    }

  }
  v20 = 0;
LABEL_65:

  return v20;
}

id ___getValue_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = v3;
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v6 = (id)objc_claimAutoreleasedReturnValue();

    if (v6 != v5)
    {
      switch(v4)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 9:
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            v7 = v5;
          else
            v7 = 0;
          v8 = v7;
          goto LABEL_17;
        case 8:
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            break;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_21;
          objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v5);
          v8 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_17;
        case 10:
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            break;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
              goto LABEL_21;
          }
          v9 = (void *)MEMORY[0x1E0C99D68];
          objc_msgSend(v5, "doubleValue");
          objc_msgSend(v9, "dateWithTimeIntervalSinceReferenceDate:");
          v8 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_17;
        case 11:
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
            break;
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            goto LABEL_21;
          v8 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBase64EncodedString:options:", v5, 0);
          goto LABEL_17;
        default:
LABEL_21:
          v10 = 0;
          goto LABEL_18;
      }
    }
  }
  v8 = v5;
LABEL_17:
  v10 = v8;
LABEL_18:

  return v10;
}

id _GEOConfigProxy()
{
  if (qword_1ECDBBA78 != -1)
    dispatch_once(&qword_1ECDBBA78, &__block_literal_global_30);
  return (id)qword_1ECDBBA70;
}

id _GEOConfigStorageCFProfile()
{
  if (qword_1ECDBC660 != -1)
    dispatch_once(&qword_1ECDBC660, &__block_literal_global_154);
  return (id)qword_1ECDBC658;
}

uint64_t GEODefaultsDomain()
{
  if (qword_1ECDBBA88 != -1)
    dispatch_once(&qword_1ECDBBA88, &__block_literal_global_57);
  return qword_1ECDBBA80;
}

id _GEOGetConfigStorageRemote()
{
  if (qword_1ECDBBAB8 != -1)
    dispatch_once(&qword_1ECDBBAB8, &__block_literal_global_128);
  return (id)qword_1ECDBBAB0;
}

void sub_1885BE80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1885BEB60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885BEC40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOResourceFilterReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  id v48;
  void *v49;
  int v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  BOOL v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  int v65;
  int v66;
  void *v67;
  char v69;
  int v70;
  int v71;
  int v72;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 76);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 72));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 84) >> 2) & 1)
      + (*(_BYTE *)(a1 + 84) & 1)
      + ((*(unsigned __int8 *)(a1 + 84) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 != 0;
        v15 = v14 & ~(_DWORD)v10 | v7;
        v72 = v14 | v10;
        v16 = (int *)MEMORY[0x1E0D82BF0];
        if ((((v14 | v10) | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v70 = 1;
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_98;
        v69 = v14 & ~(_BYTE)v10 | v7;
        v71 = (v9 != 0) | v72 | v15;
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_BYTE *)(v3 + *v18))
      goto LABEL_96;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v16;
      v24 = *(_QWORD *)(v3 + v23);
      if (v24 == -1 || v24 >= *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v24 + 1;
      v22 |= (unint64_t)(v25 & 0x7F) << v20;
      if ((v25 & 0x80) == 0)
        goto LABEL_24;
      v20 += 7;
      v26 = v21++ >= 9;
      if (v26)
      {
        v22 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_24:
    v27 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_26:
    v28 = v22 & 7;
    if (v27 || v28 == 4)
    {
LABEL_96:
      v70 = 1;
      goto LABEL_97;
    }
    v30 = v22 >> 3;
    v31 = v72;
    if (!((v17 == 0) | v72 & 1))
    {
      v32 = v17;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    if ((_DWORD)v30 == 2)
      break;
    if ((_DWORD)v30 == 1)
    {
      if (v31 && (*(_BYTE *)(a1 + 84) & 2) == 0)
      {
        if (v28 == 2)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_116;
          while (*(_QWORD *)(v3 + *v16) < *(_QWORD *)(v3 + *v6) && !*(_BYTE *)(v3 + *v18))
          {
            v36 = 0;
            v37 = 0;
            v38 = 0;
            while (1)
            {
              v39 = *v16;
              v40 = *(_QWORD *)(v3 + v39);
              if (v40 == -1 || v40 >= *(_QWORD *)(v3 + *v6))
                break;
              v41 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v40);
              *(_QWORD *)(v3 + v39) = v40 + 1;
              v38 |= (unint64_t)(v41 & 0x7F) << v36;
              if (v41 < 0)
              {
                v36 += 7;
                v26 = v37++ >= 9;
                if (!v26)
                  continue;
              }
              goto LABEL_53;
            }
            *(_BYTE *)(v3 + *v18) = 1;
LABEL_53:
            PBRepeatedInt32Add();
          }
LABEL_77:
          PBReaderRecallMark();
LABEL_94:
          if ((v71 & 1) == 0)
            goto LABEL_96;
          goto LABEL_95;
        }
        v51 = 0;
        v52 = 0;
        v53 = 0;
        while (1)
        {
          v54 = *v16;
          v55 = *(_QWORD *)(v3 + v54);
          if (v55 == -1 || v55 >= *(_QWORD *)(v3 + *v6))
            break;
          v56 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v55);
          *(_QWORD *)(v3 + v54) = v55 + 1;
          v53 |= (unint64_t)(v56 & 0x7F) << v51;
          if (v56 < 0)
          {
            v51 += 7;
            v57 = v52++ > 8;
            if (!v57)
              continue;
          }
          goto LABEL_93;
        }
LABEL_92:
        *(_BYTE *)(v3 + *v18) = 1;
LABEL_93:
        PBRepeatedInt32Add();
        goto LABEL_94;
      }
    }
    else if ((v69 & 1) != 0 && (*(_BYTE *)(a1 + 84) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v48 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v49 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v48;

      }
      if ((PBUnknownFieldAdd() & 1) == 0)
      {
        v70 = 0;
LABEL_99:
        *(_BYTE *)(a1 + 84) |= 1u;
        goto LABEL_100;
      }
      goto LABEL_94;
    }
LABEL_75:
    v50 = PBReaderSkipValueWithTag();
    if ((v50 & v71 & 1) == 0)
    {
      v70 = v50;
      goto LABEL_97;
    }
LABEL_95:
    if (*(_QWORD *)(v3 + *v16) >= *(_QWORD *)(v3 + *v6))
      goto LABEL_96;
  }
  if (!v31 || (*(_BYTE *)(a1 + 84) & 4) != 0)
    goto LABEL_75;
  if (v28 != 2)
  {
    v58 = 0;
    v59 = 0;
    v60 = 0;
    while (1)
    {
      v61 = *v16;
      v62 = *(_QWORD *)(v3 + v61);
      if (v62 == -1 || v62 >= *(_QWORD *)(v3 + *v6))
        goto LABEL_92;
      v63 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v62);
      *(_QWORD *)(v3 + v61) = v62 + 1;
      v60 |= (unint64_t)(v63 & 0x7F) << v58;
      if (v63 < 0)
      {
        v58 += 7;
        v57 = v59++ > 8;
        if (!v57)
          continue;
      }
      goto LABEL_93;
    }
  }
  if (PBReaderPlaceMark())
  {
    while (*(_QWORD *)(v3 + *v16) < *(_QWORD *)(v3 + *v6) && !*(_BYTE *)(v3 + *v18))
    {
      v42 = 0;
      v43 = 0;
      v44 = 0;
      while (1)
      {
        v45 = *v16;
        v46 = *(_QWORD *)(v3 + v45);
        if (v46 == -1 || v46 >= *(_QWORD *)(v3 + *v6))
          break;
        v47 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v46);
        *(_QWORD *)(v3 + v45) = v46 + 1;
        v44 |= (unint64_t)(v47 & 0x7F) << v42;
        if (v47 < 0)
        {
          v42 += 7;
          v26 = v43++ >= 9;
          if (!v26)
            continue;
        }
        goto LABEL_68;
      }
      *(_BYTE *)(v3 + *v18) = 1;
LABEL_68:
      PBRepeatedInt32Add();
    }
    goto LABEL_77;
  }
LABEL_116:
  v70 = 0;
LABEL_97:
  LOBYTE(v15) = v69;
LABEL_98:
  if ((v15 & 1) != 0)
    goto LABEL_99;
LABEL_100:
  if (v72 & 1 | ((v70 & 1) == 0))
  {
    *(_BYTE *)(a1 + 84) |= 2u;
    *(_BYTE *)(a1 + 84) |= 4u;
    goto LABEL_110;
  }
  if (v17)
  {
    while (1)
    {
      v66 = *v17++;
      v65 = v66;
      if (v66 == 1)
        break;
      if (v65 == 2)
      {
        v64 = 4;
LABEL_106:
        *(_BYTE *)(a1 + 84) |= v64;
      }
      else if (!v65)
      {
        goto LABEL_110;
      }
    }
    v64 = 2;
    goto LABEL_106;
  }
LABEL_110:
  if (v70)
    v3 = *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]) == 0;
  else
    v3 = 0;
  if ((v72 & 1) != 0)
  {
    v67 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1885BF4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t GEORegionalResourceSetReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  int v17;
  int v18;
  int *v19;
  _BOOL4 v20;
  int *v21;
  int v22;
  int *v23;
  int *v24;
  char v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  int v33;
  unint64_t v35;
  BOOL v36;
  int *v37;
  int v38;
  int v39;
  BOOL v40;
  GEOResource *v41;
  id v42;
  void *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  char v48;
  void *v49;
  char v51;
  int v52;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 68) >> 2) & 1)
      + (*(_BYTE *)(a1 + 68) & 1)
      + ((*(unsigned __int8 *)(a1 + 68) >> 1) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v7 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 != 0;
        v17 = v16 & ~(_DWORD)v11 | v9;
        v18 = v16 | v11;
        if ((((v16 | v11) | v7) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = v8 != 0;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = 1;
        v23 = (int *)MEMORY[0x1E0D82BC8];
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_62;
        v51 = v17;
        v52 = v20 | v18 | v17;
        v24 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v8;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_BYTE *)(v3 + *v23))
      goto LABEL_60;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    while (1)
    {
      v28 = *v21;
      v29 = *(_QWORD *)(v3 + v28);
      v30 = v29 + 1;
      if (v29 == -1 || v30 > *(_QWORD *)(v3 + *v6))
        break;
      v31 = *(_BYTE *)(*(_QWORD *)(v3 + *v24) + v29);
      *(_QWORD *)(v3 + v28) = v30;
      v27 |= (unint64_t)(v31 & 0x7F) << v25;
      if ((v31 & 0x80) == 0)
        goto LABEL_25;
      v25 += 7;
      if (v26++ >= 9)
      {
        v27 = 0;
        v33 = *(unsigned __int8 *)(v3 + *v23);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v23) = 1;
LABEL_25:
    v33 = *(unsigned __int8 *)(v3 + *v23);
    if (*(_BYTE *)(v3 + *v23))
      v27 = 0;
LABEL_27:
    if (v33 || (v27 & 7) == 4)
    {
LABEL_60:
      v22 = 1;
      goto LABEL_61;
    }
    v35 = v27 >> 3;
    v36 = v18;
    if (!((v19 == 0) | v18 & 1))
    {
      v37 = v19;
      do
      {
        v39 = *v37++;
        v38 = v39;
        v36 = v39 != 0;
        if (v39)
          v40 = v38 == (_DWORD)v35;
        else
          v40 = 1;
      }
      while (!v40);
    }
    if ((_DWORD)v35 == 2)
      break;
    if ((_DWORD)v35 == 1)
    {
      if (v36 && (*(_BYTE *)(a1 + 68) & 2) == 0)
      {
        if (!PBReaderPlaceMark())
          goto LABEL_83;
        -[GEORegionalResourceSet _reserveRegions:](a1, 1uLL);
        if (!GEOTileSetRegionReadAllFrom((_DWORD *)(*(_QWORD *)(a1 + 24) + 24 * *(_QWORD *)(a1 + 32)), v3))
          goto LABEL_83;
        PBReaderRecallMark();
        ++*(_QWORD *)(a1 + 32);
LABEL_50:
        v23 = (int *)MEMORY[0x1E0D82BC8];
LABEL_56:
        if ((v52 & 1) == 0)
          goto LABEL_60;
        goto LABEL_59;
      }
    }
    else if ((v51 & 1) != 0 && (*(_BYTE *)(a1 + 68) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v42 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v43 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v42;

      }
      v44 = PBUnknownFieldAdd();
      v23 = (int *)MEMORY[0x1E0D82BC8];
      if (!v44)
      {
        v22 = 0;
        goto LABEL_63;
      }
      goto LABEL_56;
    }
LABEL_58:
    v45 = PBReaderSkipValueWithTag();
    v23 = (int *)MEMORY[0x1E0D82BC8];
    if ((v45 & v52 & 1) == 0)
    {
      v22 = v45;
      goto LABEL_61;
    }
LABEL_59:
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6))
      goto LABEL_60;
  }
  if (!v36 || (*(_BYTE *)(a1 + 68) & 4) != 0)
    goto LABEL_58;
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_83;
  v41 = objc_alloc_init(GEOResource);
  if (GEOResourceReadAllFrom((uint64_t)v41, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    -[GEORegionalResourceSet _addNoFlagsResource:](a1, v41);

    goto LABEL_50;
  }

LABEL_83:
  v22 = 0;
  v23 = (int *)MEMORY[0x1E0D82BC8];
LABEL_61:
  LOBYTE(v17) = v51;
LABEL_62:
  if ((v17 & 1) != 0)
LABEL_63:
    *(_BYTE *)(a1 + 68) |= 1u;
  if (v18 & 1 | ((v22 & 1) == 0))
  {
    *(_BYTE *)(a1 + 68) |= 2u;
    *(_BYTE *)(a1 + 68) |= 4u;
    goto LABEL_74;
  }
  if (v19)
  {
    while (2)
    {
      while (1)
      {
        v47 = *v19++;
        v46 = v47;
        if (v47 == 1)
          break;
        if (v46 == 2)
        {
          v48 = 4;
          goto LABEL_73;
        }
        if (!v46)
          goto LABEL_74;
      }
      v48 = 2;
LABEL_73:
      *(_BYTE *)(a1 + 68) |= v48;
      continue;
    }
  }
LABEL_74:
  if (v22)
  {
    v3 = *(_BYTE *)(v3 + *v23) == 0;
    if ((v18 & 1) == 0)
      return v3;
LABEL_78:
    v49 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  else
  {
    v3 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_78;
  }
  return v3;
}

BOOL GEOTileSetRegionReadAllFrom(_DWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  _DWORD *v7;
  _DWORD *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  _DWORD *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v54 = a1 + 5;
    v55 = a1 + 2;
    v53 = a1 + 1;
    v7 = a1 + 4;
    v8 = a1 + 3;
    v9 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = *v3;
        v14 = *(_QWORD *)(a2 + v13);
        if (v14 == -1 || v14 >= *(_QWORD *)(a2 + *v4))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v14);
        *(_QWORD *)(a2 + v13) = v14 + 1;
        v12 |= (unint64_t)(v15 & 0x7F) << v10;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v10 += 7;
        if (v11++ >= 9)
        {
          v12 = 0;
          v17 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v17 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v12 = 0;
LABEL_14:
      if (v17 || (v12 & 7) == 4)
        break;
      switch((v12 >> 3))
      {
        case 1u:
          v19 = 0;
          v20 = 0;
          v21 = 0;
          while (1)
          {
            v22 = *v3;
            v23 = *(_QWORD *)(a2 + v22);
            if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            {
              v26 = v8;
              goto LABEL_69;
            }
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              break;
            v19 += 7;
            v25 = v20++ > 8;
            if (v25)
            {
              LODWORD(v21) = 0;
              v26 = v8;
              goto LABEL_72;
            }
          }
          v26 = v8;
          goto LABEL_70;
        case 2u:
          v27 = 0;
          v28 = 0;
          v21 = 0;
          while (2)
          {
            v29 = *v3;
            v30 = *(_QWORD *)(a2 + v29);
            if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
            {
              v26 = v7;
              goto LABEL_69;
            }
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v21 |= (unint64_t)(v31 & 0x7F) << v27;
            if (v31 < 0)
            {
              v27 += 7;
              v25 = v28++ > 8;
              if (v25)
              {
                LODWORD(v21) = 0;
                v26 = v7;
                goto LABEL_72;
              }
              continue;
            }
            break;
          }
          v26 = v7;
          goto LABEL_70;
        case 3u:
          v32 = 0;
          v33 = 0;
          v21 = 0;
          while (2)
          {
            v34 = *v3;
            v35 = *(_QWORD *)(a2 + v34);
            if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
            {
              v26 = a1;
              goto LABEL_69;
            }
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v21 |= (unint64_t)(v36 & 0x7F) << v32;
            if (v36 < 0)
            {
              v32 += 7;
              v25 = v33++ > 8;
              if (v25)
              {
                LODWORD(v21) = 0;
                v26 = a1;
                goto LABEL_72;
              }
              continue;
            }
            break;
          }
          v26 = a1;
          goto LABEL_70;
        case 4u:
          v37 = 0;
          v38 = 0;
          v21 = 0;
          while (2)
          {
            v39 = *v3;
            v40 = *(_QWORD *)(a2 + v39);
            if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
            {
              v26 = v53;
              goto LABEL_69;
            }
            v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v40);
            *(_QWORD *)(a2 + v39) = v40 + 1;
            v21 |= (unint64_t)(v41 & 0x7F) << v37;
            if (v41 < 0)
            {
              v37 += 7;
              v25 = v38++ > 8;
              if (v25)
              {
                LODWORD(v21) = 0;
                v26 = v53;
                goto LABEL_72;
              }
              continue;
            }
            break;
          }
          v26 = v53;
          goto LABEL_70;
        case 5u:
          v42 = 0;
          v43 = 0;
          v21 = 0;
          while (2)
          {
            v44 = *v3;
            v45 = *(_QWORD *)(a2 + v44);
            if (v45 == -1 || v45 >= *(_QWORD *)(a2 + *v4))
            {
              v26 = v54;
              goto LABEL_69;
            }
            v46 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v45);
            *(_QWORD *)(a2 + v44) = v45 + 1;
            v21 |= (unint64_t)(v46 & 0x7F) << v42;
            if (v46 < 0)
            {
              v42 += 7;
              v25 = v43++ > 8;
              if (v25)
              {
                LODWORD(v21) = 0;
                v26 = v54;
                goto LABEL_72;
              }
              continue;
            }
            break;
          }
          v26 = v54;
          goto LABEL_70;
        case 6u:
          v47 = 0;
          v48 = 0;
          v21 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
          return 0;
      }
      while (1)
      {
        v49 = *v3;
        v50 = *(_QWORD *)(a2 + v49);
        if (v50 == -1 || v50 >= *(_QWORD *)(a2 + *v4))
          break;
        v51 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v50);
        *(_QWORD *)(a2 + v49) = v50 + 1;
        v21 |= (unint64_t)(v51 & 0x7F) << v47;
        if ((v51 & 0x80) == 0)
        {
          v26 = v55;
          goto LABEL_70;
        }
        v47 += 7;
        v25 = v48++ > 8;
        if (v25)
        {
          LODWORD(v21) = 0;
          v26 = v55;
          goto LABEL_72;
        }
      }
      v26 = v55;
LABEL_69:
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_70:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v21) = 0;
LABEL_72:
      *v26 = v21;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id _GEOConfigStorageExpiryUser()
{
  if (qword_1ECDBC718 != -1)
    dispatch_once(&qword_1ECDBC718, &__block_literal_global_160);
  return (id)qword_1ECDBC708;
}

id _GEOConfigStorageExpirySystem()
{
  if (qword_1ECDBC718 != -1)
    dispatch_once(&qword_1ECDBC718, &__block_literal_global_160);
  return (id)_MergedGlobals_298;
}

void _registerStateCaptureCallbacks()
{
  if (_registerStateCaptureCallbacks_onceToken != -1)
    dispatch_once(&_registerStateCaptureCallbacks_onceToken, &__block_literal_global_4);
}

void _registerStateCaptureCallbacks_0()
{
  if (_registerStateCaptureCallbacks_onceToken_0 != -1)
    dispatch_once(&_registerStateCaptureCallbacks_onceToken_0, &__block_literal_global_21_1);
}

void _registerStateCaptureCallbacks_1()
{
  if (_registerStateCaptureCallbacks_onceToken_1 != -1)
    dispatch_once(&_registerStateCaptureCallbacks_onceToken_1, &__block_literal_global_176_0);
}

void _registerStateCaptureCallbacks_2()
{
  if (_registerStateCaptureCallbacks_onceToken_2 != -1)
    dispatch_once(&_registerStateCaptureCallbacks_onceToken_2, &__block_literal_global_9_1);
}

id _GEOConfigStorageDirectSystemReadOnly()
{
  _initStorageReadOnly();
  return (id)_system_storage_readonly;
}

id _GEOConfigStorageDirectUserReadOnly()
{
  _initStorageReadOnly();
  return (id)_user_storage_readonly;
}

uint64_t gcl::tmesh::DecoderImpl::decompressVertexAttributes(uint64_t a1, unint64_t a2, unint64_t a3, _QWORD *a4, int *a5, BOOL *a6)
{
  uint64_t result;
  unint64_t v8;
  int v10;
  int v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  std::vector<int>::size_type v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int *v23;
  uint64_t v24;
  std::vector<int>::size_type v25;
  std::vector<int>::pointer begin;
  std::vector<int>::size_type v27;
  int v28;
  BOOL v29;
  int v30;
  int32x4_t **v31;
  uint64_t v32;
  int32x4_t *v33;
  __int32 v34;
  uint64_t v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  uint64_t v58;
  int8x8_t v59;
  int8x8_t v60;
  int *v61;
  int32x4_t *v62;
  uint64_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  std::vector<int>::size_type v69;
  uint64_t v70;
  __int32 *v71;
  int *v72;
  int v73;
  int v74;
  unsigned __int8 *inited;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  std::vector<int>::pointer v80;
  int *v81;
  uint64_t v82;
  std::vector<int>::pointer v83;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  int *v87;
  BOOL v88;
  uint64_t v89;
  int32x4_t *v90;
  int32x4_t *v91;
  int32x4_t v92;
  uint64_t v93;
  std::vector<int>::size_type v94;
  int *v95;
  int v96;
  uint64_t v98;
  std::vector<int> v100;

  if (*(_DWORD *)(a1 + 3872))
    return 6;
  if (!a2)
    return 5;
  result = 5;
  if ((a3 & 0x8000000000000000) == 0 && a5)
  {
    if (a3 < 4)
      return 3;
    v8 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    if ((a3 & 0xFFFFFFFFFFFFFFFCLL) == 4
      || a3 == 8
      || a3 == 9
      || (a3 & 0xFFFFFFFFFFFFFFFELL) == 0xA
      || v8 == 12
      || v8 == 16)
    {
      return 3;
    }
    result = 3;
    if (a3 - 20 >= 5 && a3 >= 0x20 && *(_DWORD *)a2 == -290009985)
    {
      v10 = *(_DWORD *)(a2 + 4);
      v11 = *(unsigned __int8 *)(a2 + 8);
      v12 = *(unsigned __int8 *)(a2 + 9);
      v13 = *(_WORD *)(a2 + 10);
      v14 = *(unsigned int *)(a2 + 12);
      v15 = *(_DWORD *)(a2 + 16) & 0x7FFFFFFF;
      v16 = *(unsigned __int8 *)(a2 + 20);
      v17 = *(unsigned __int8 *)(a2 + 21);
      v18 = *(unsigned __int8 *)(a2 + 22);
      v19 = *(unsigned __int8 *)(a2 + 23);
      v20 = *(unsigned __int8 *)(a2 + 24);
      v21 = *(unsigned __int8 *)(a2 + 26);
      v22 = *(unsigned __int8 *)(a2 + 27);
      *(_DWORD *)(a1 + 3824) = 0;
      *(_BYTE *)(a1 + 3828) = v11;
      *(_BYTE *)(a1 + 3829) = v12;
      *(_WORD *)(a1 + 3830) = v13;
      *(_DWORD *)(a1 + 3832) = v14;
      *(_DWORD *)(a1 + 3836) = v15;
      *(_DWORD *)(a1 + 3840) = v18;
      *(_DWORD *)(a1 + 3844) = v17;
      *(_DWORD *)(a1 + 3848) = v22;
      *(_DWORD *)(a1 + 3852) = v16;
      *(_DWORD *)(a1 + 3856) = v21;
      *(_DWORD *)(a1 + 3860) = v10;
      *(_DWORD *)(a1 + 3864) = v19;
      v98 = a1;
      *(_DWORD *)(a1 + 3868) = v20;
      v23 = (int *)(a2 + 32);
      if (a2 == -32 || a3 < v14 || a2 + a3 < a2)
        return 3;
      result = 3;
      if (a2 + v14 >= (unint64_t)v23 && v14 >= 0x20)
      {
        if (v11)
          return 4;
        result = 4;
        if ((v12 - 5) <= 2)
        {
          if (v15 == *(_DWORD *)(a1 + 3788) && (a6 || !v21))
          {
            v24 = v14 - 32;
            if ((v20 - 5) > 1)
            {
              if (v22 <= 0x1B)
              {
                std::vector<int>::vector(&v100, v18);
                v25 = v18;
                if (!(_DWORD)v18)
                {
                  v30 = 0;
                  v25 = 0;
                  goto LABEL_42;
                }
LABEL_36:
                begin = v100.__begin_;
                v27 = v18;
                do
                {
                  while (1)
                  {
                    v29 = v24 < 4;
                    v24 -= 4;
                    if (v29)
                      break;
                    v28 = *v23++;
                    *begin++ = v28;
                    if (!--v27)
                      goto LABEL_41;
                  }
                  v24 = 0;
                  v23 = 0;
                  ++begin;
                  --v27;
                }
                while (v27);
LABEL_41:
                v30 = 1;
LABEL_42:
                v31 = (int32x4_t **)(v98 + 2664);
                std::vector<int>::resize((std::vector<int> *)(v98 + 2664), v25);
                if (!v30)
                {
                  if (v23)
                  {
                    v36 = 0;
LABEL_71:
                    inited = gcl::tmesh::DecoderImpl::initArithmeticDecoder(v98, v23, v24);
                    v77 = 3;
                    if (inited && (v76 & 0x8000000000000000) == 0)
                    {
                      gcl::tmesh::DecoderImpl::decodeVertexAttributesAC((gcl::tmesh::DecoderImpl *)v98, a5, a6);
                      if ((v36 & 1) != 0 && *(int *)(v98 + 3788) >= 1 && v30)
                      {
                        LODWORD(v78) = 0;
                        v79 = 0;
                        v80 = v100.__begin_;
                        v81 = &v100.__begin_[v18];
                        v82 = v18 & 0xF8;
                        v83 = v100.__begin_ + 4;
                        do
                        {
                          v84 = (int)v78;
                          if (v18 >= 8
                            && ((v85 = (int)v78, v86 = &a5[v85], v87 = &a5[v18 + v85], v86 < v81)
                              ? (v88 = v80 >= v87)
                              : (v88 = 1),
                                v88))
                          {
                            v78 = v84 + v82;
                            v89 = v18 & 0xF8;
                            v90 = (int32x4_t *)v83;
                            v91 = (int32x4_t *)&a5[v84 + 4];
                            do
                            {
                              v92 = vaddq_s32(*v91, *v90);
                              v91[-1] = vaddq_s32(v91[-1], v90[-1]);
                              *v91 = v92;
                              v90 += 2;
                              v91 += 2;
                              v89 -= 8;
                            }
                            while (v89);
                            v93 = v18 & 0xF8;
                            if (v82 == v18)
                              goto LABEL_77;
                          }
                          else
                          {
                            v93 = 0;
                            v78 = v84;
                          }
                          v94 = v18 - v93;
                          v95 = &v80[v93];
                          do
                          {
                            v96 = *v95++;
                            a5[v78++] += v96;
                            --v94;
                          }
                          while (v94);
LABEL_77:
                          ++v79;
                        }
                        while (v79 < *(_DWORD *)(v98 + 3788));
                      }
                      v77 = 0;
                      *a4 = *(unsigned int *)(v98 + 3832);
                    }
                    goto LABEL_94;
                  }
LABEL_92:
                  v77 = 3;
LABEL_94:
                  if (v100.__begin_)
                  {
                    v100.__end_ = v100.__begin_;
                    operator delete(v100.__begin_);
                  }
                  return v77;
                }
                v32 = 0;
                do
                {
                  while (1)
                  {
                    v29 = v24-- < 1;
                    if (!v29)
                      break;
                    v23 = 0;
                    v24 = 0;
                    if (++v32 == v18)
                      goto LABEL_92;
                  }
                  v33 = *v31;
                  v34 = *(unsigned __int8 *)v23;
                  v23 = (int *)((char *)v23 + 1);
                  (*v31)->i32[v32++] = v34;
                }
                while (v32 != v18);
                if (!v23)
                  goto LABEL_92;
                if (v18 < 8)
                {
                  v35 = 0;
                  v36 = 0;
                  v37 = 1;
                  goto LABEL_68;
                }
                if (v18 >= 0x20)
                {
                  v35 = v18 & 0xE0;
                  v38 = *((int8x16_t *)v100.__begin_ + 2);
                  v39 = *((int8x16_t *)v100.__begin_ + 3);
                  v40 = *(int8x16_t *)v100.__begin_;
                  v41 = *((int8x16_t *)v100.__begin_ + 1);
                  v42 = *((int8x16_t *)v100.__begin_ + 6);
                  v43 = *((int8x16_t *)v100.__begin_ + 7);
                  v44 = *((int8x16_t *)v100.__begin_ + 4);
                  v45 = *((int8x16_t *)v100.__begin_ + 5);
                  v46.i64[0] = 0x1D0000001DLL;
                  v46.i64[1] = 0x1D0000001DLL;
                  v47 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, v33[2]), (int16x8_t)vcgtq_s32(v46, v33[3]));
                  v48 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, *v33), (int16x8_t)vcgtq_s32(v46, v33[1]));
                  v49 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, v33[6]), (int16x8_t)vcgtq_s32(v46, v33[7]));
                  v50 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, v33[4]), (int16x8_t)vcgtq_s32(v46, v33[5]));
                  if (v35 == 32)
                  {
                    v51 = vuzp1q_s8(v48, v47);
                    v52 = vuzp1q_s8(v50, v49);
                  }
                  else
                  {
                    v53 = vuzp1q_s8(v50, v49);
                    v41 = vorrq_s8(v41, *((int8x16_t *)v100.__begin_ + 9));
                    v40 = vorrq_s8(v40, *((int8x16_t *)v100.__begin_ + 8));
                    v38 = vorrq_s8(v38, *((int8x16_t *)v100.__begin_ + 10));
                    v39 = vorrq_s8(v39, *((int8x16_t *)v100.__begin_ + 11));
                    v45 = vorrq_s8(v45, *((int8x16_t *)v100.__begin_ + 13));
                    v44 = vorrq_s8(v44, *((int8x16_t *)v100.__begin_ + 12));
                    v42 = vorrq_s8(v42, *((int8x16_t *)v100.__begin_ + 14));
                    v43 = vorrq_s8(v43, *((int8x16_t *)v100.__begin_ + 15));
                    v54 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, v33[12]), (int16x8_t)vcgtq_s32(v46, v33[13])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, v33[14]), (int16x8_t)vcgtq_s32(v46, v33[15])));
                    v51 = vandq_s8(vuzp1q_s8(v48, v47), vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, v33[8]), (int16x8_t)vcgtq_s32(v46, v33[9])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v46, v33[10]), (int16x8_t)vcgtq_s32(v46, v33[11]))));
                    v52 = vandq_s8(v53, v54);
                    if (v35 != 64)
                    {
                      v41 = vorrq_s8(v41, *((int8x16_t *)v100.__begin_ + 17));
                      v40 = vorrq_s8(v40, *((int8x16_t *)v100.__begin_ + 16));
                      v38 = vorrq_s8(v38, *((int8x16_t *)v100.__begin_ + 18));
                      v39 = vorrq_s8(v39, *((int8x16_t *)v100.__begin_ + 19));
                      v45 = vorrq_s8(v45, *((int8x16_t *)v100.__begin_ + 21));
                      v44 = vorrq_s8(v44, *((int8x16_t *)v100.__begin_ + 20));
                      v42 = vorrq_s8(v42, *((int8x16_t *)v100.__begin_ + 22));
                      v43 = vorrq_s8(v43, *((int8x16_t *)v100.__begin_ + 23));
                      v55.i64[0] = 0x1D0000001DLL;
                      v55.i64[1] = 0x1D0000001DLL;
                      v51 = vandq_s8(v51, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[16]), (int16x8_t)vcgtq_s32(v55, v33[17])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[18]), (int16x8_t)vcgtq_s32(v55, v33[19]))));
                      v52 = vandq_s8(v52, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[20]), (int16x8_t)vcgtq_s32(v55, v33[21])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[22]), (int16x8_t)vcgtq_s32(v55, v33[23]))));
                      if (v35 != 96)
                      {
                        v41 = vorrq_s8(v41, *((int8x16_t *)v100.__begin_ + 25));
                        v40 = vorrq_s8(v40, *((int8x16_t *)v100.__begin_ + 24));
                        v38 = vorrq_s8(v38, *((int8x16_t *)v100.__begin_ + 26));
                        v39 = vorrq_s8(v39, *((int8x16_t *)v100.__begin_ + 27));
                        v45 = vorrq_s8(v45, *((int8x16_t *)v100.__begin_ + 29));
                        v44 = vorrq_s8(v44, *((int8x16_t *)v100.__begin_ + 28));
                        v42 = vorrq_s8(v42, *((int8x16_t *)v100.__begin_ + 30));
                        v43 = vorrq_s8(v43, *((int8x16_t *)v100.__begin_ + 31));
                        v51 = vandq_s8(v51, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[24]), (int16x8_t)vcgtq_s32(v55, v33[25])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[26]), (int16x8_t)vcgtq_s32(v55, v33[27]))));
                        v52 = vandq_s8(v52, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[28]), (int16x8_t)vcgtq_s32(v55, v33[29])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v55, v33[30]), (int16x8_t)vcgtq_s32(v55, v33[31]))));
                        if (v35 != 128)
                        {
                          v41 = vorrq_s8(v41, *((int8x16_t *)v100.__begin_ + 33));
                          v40 = vorrq_s8(v40, *((int8x16_t *)v100.__begin_ + 32));
                          v38 = vorrq_s8(v38, *((int8x16_t *)v100.__begin_ + 34));
                          v39 = vorrq_s8(v39, *((int8x16_t *)v100.__begin_ + 35));
                          v45 = vorrq_s8(v45, *((int8x16_t *)v100.__begin_ + 37));
                          v44 = vorrq_s8(v44, *((int8x16_t *)v100.__begin_ + 36));
                          v42 = vorrq_s8(v42, *((int8x16_t *)v100.__begin_ + 38));
                          v43 = vorrq_s8(v43, *((int8x16_t *)v100.__begin_ + 39));
                          v56.i64[0] = 0x1D0000001DLL;
                          v56.i64[1] = 0x1D0000001DLL;
                          v51 = vandq_s8(v51, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[32]), (int16x8_t)vcgtq_s32(v56, v33[33])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[34]), (int16x8_t)vcgtq_s32(v56, v33[35]))));
                          v52 = vandq_s8(v52, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[36]), (int16x8_t)vcgtq_s32(v56, v33[37])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[38]), (int16x8_t)vcgtq_s32(v56, v33[39]))));
                          if (v35 != 160)
                          {
                            v41 = vorrq_s8(v41, *((int8x16_t *)v100.__begin_ + 41));
                            v40 = vorrq_s8(v40, *((int8x16_t *)v100.__begin_ + 40));
                            v38 = vorrq_s8(v38, *((int8x16_t *)v100.__begin_ + 42));
                            v39 = vorrq_s8(v39, *((int8x16_t *)v100.__begin_ + 43));
                            v45 = vorrq_s8(v45, *((int8x16_t *)v100.__begin_ + 45));
                            v44 = vorrq_s8(v44, *((int8x16_t *)v100.__begin_ + 44));
                            v42 = vorrq_s8(v42, *((int8x16_t *)v100.__begin_ + 46));
                            v43 = vorrq_s8(v43, *((int8x16_t *)v100.__begin_ + 47));
                            v51 = vandq_s8(v51, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[40]), (int16x8_t)vcgtq_s32(v56, v33[41])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[42]), (int16x8_t)vcgtq_s32(v56, v33[43]))));
                            v52 = vandq_s8(v52, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[44]), (int16x8_t)vcgtq_s32(v56, v33[45])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v56, v33[46]), (int16x8_t)vcgtq_s32(v56, v33[47]))));
                            if (v35 != 192)
                            {
                              v41 = vorrq_s8(v41, *((int8x16_t *)v100.__begin_ + 49));
                              v40 = vorrq_s8(v40, *((int8x16_t *)v100.__begin_ + 48));
                              v38 = vorrq_s8(v38, *((int8x16_t *)v100.__begin_ + 50));
                              v39 = vorrq_s8(v39, *((int8x16_t *)v100.__begin_ + 51));
                              v45 = vorrq_s8(v45, *((int8x16_t *)v100.__begin_ + 53));
                              v44 = vorrq_s8(v44, *((int8x16_t *)v100.__begin_ + 52));
                              v42 = vorrq_s8(v42, *((int8x16_t *)v100.__begin_ + 54));
                              v43 = vorrq_s8(v43, *((int8x16_t *)v100.__begin_ + 55));
                              v57.i64[0] = 0x1D0000001DLL;
                              v57.i64[1] = 0x1D0000001DLL;
                              v51 = vandq_s8(v51, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v57, v33[48]), (int16x8_t)vcgtq_s32(v57, v33[49])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v57, v33[50]), (int16x8_t)vcgtq_s32(v57, v33[51]))));
                              v52 = vandq_s8(v52, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v57, v33[52]), (int16x8_t)vcgtq_s32(v57, v33[53])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v57, v33[54]), (int16x8_t)vcgtq_s32(v57, v33[55]))));
                            }
                          }
                        }
                      }
                    }
                  }
                  v36 = vmaxvq_u8((uint8x16_t)vmvnq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(v44, v40)), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(v45, v41))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(v42, v38)), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(v43, v39)))))) & 1;
                  v37 = vminvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vandq_s8(v52, v51), 7uLL)));
                  if (v35 == v18)
                    goto LABEL_70;
                  if ((v18 & 0x18) == 0)
                  {
LABEL_68:
                    v69 = v18 - v35;
                    v70 = v35;
                    v71 = &v33->i32[v70];
                    v72 = &v100.__begin_[v70];
                    do
                    {
                      v73 = *v72++;
                      v36 |= v73 != 0;
                      v74 = *v71++;
                      v37 &= v74 < 29;
                      --v69;
                    }
                    while (v69);
                    goto LABEL_70;
                  }
                }
                else
                {
                  v36 = 0;
                  v35 = 0;
                  v37 = 1;
                }
                v58 = v35;
                v59 = (int8x8_t)-1;
                v59.i8[0] = v37;
                v60 = (int8x8_t)v36;
                v35 = v18 & 0xF8;
                v61 = &v100.__begin_[v58];
                v62 = (int32x4_t *)((char *)v33 + 4 * v58);
                v63 = v58 - v35;
                v64.i64[0] = 0x1D0000001DLL;
                v64.i64[1] = 0x1D0000001DLL;
                do
                {
                  v65 = *(int32x4_t *)v61;
                  v66 = *((int32x4_t *)v61 + 1);
                  v61 += 8;
                  v60 = vorr_s8(v60, vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v65), (int16x8_t)vceqzq_s32(v66)))));
                  v67 = *v62;
                  v68 = v62[1];
                  v62 += 2;
                  v59 = vand_s8(v59, vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_s32(v64, v67), (int16x8_t)vcgtq_s32(v64, v68))));
                  v63 += 8;
                }
                while (v63);
                v36 = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v60, 7uLL))) & 1;
                v37 = vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v59, 7uLL)));
                if (v35 != v18)
                  goto LABEL_68;
LABEL_70:
                if ((v37 & 1) != 0)
                  goto LABEL_71;
                goto LABEL_92;
              }
            }
            else if ((_DWORD)v18 == 2)
            {
              result = 3;
              if (v22 - 28 < 0xFFFFFFE5)
                return result;
              v25 = 2;
              std::vector<int>::vector(&v100, 2uLL);
              goto LABEL_36;
            }
          }
          return 3;
        }
      }
    }
  }
  return result;
}

void sub_1885C13E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t gcl::polyline::DecoderImpl::decompressAttributes(uint64_t a1, uint64_t a2, int32x4_t *a3, unsigned __int8 *a4, __int128 *a5)
{
  unsigned __int8 *v5;
  uint64_t v7;
  uint64_t v9;
  __int128 v12;
  __int128 v13;
  uint64_t AttributeInfo;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  _BOOL4 v23;
  std::vector<int>::size_type v24;
  uint64_t v25;
  std::vector<int>::pointer begin;
  uint64_t v27;
  int v28;
  BOOL v29;
  int32x4_t **v30;
  uint64_t i;
  int32x4_t *v32;
  __int32 v33;
  uint64_t v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  int32x4_t *v37;
  int32x4_t *v38;
  int8x16_t v39;
  int8x16_t v40;
  int32x4_t v41;
  uint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  uint64_t v45;
  int8x8_t v46;
  int8x8_t v47;
  int *v48;
  int32x4_t *v49;
  uint64_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  int *v59;
  int v60;
  int v61;
  int *v62;
  uint64_t v63;
  int v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  int *v70;
  BOOL v71;
  uint64_t v72;
  int32x4_t *v73;
  int32x4_t *v74;
  int32x4_t v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  int v79;
  std::vector<int> v80;

  v5 = *(unsigned __int8 **)a2;
  if (!*(_QWORD *)a2)
    return 5;
  v7 = 5;
  if (a3)
  {
    v9 = *(_QWORD *)(a2 + 8);
    if ((v9 & 0x8000000000000000) == 0)
    {
      if (a5)
      {
        v12 = *a5;
        v13 = a5[1];
        *(_WORD *)(a1 + 76) = *((_WORD *)a5 + 16);
        *(_OWORD *)(a1 + 60) = v13;
        *(_OWORD *)(a1 + 44) = v12;
      }
      else
      {
        AttributeInfo = gcl::polyline::DecoderImpl::getAttributeInfo((uint64_t)v5, v9, a1 + 44);
        v7 = 3;
        if (!AttributeInfo)
          return v7;
        v5 = (unsigned __int8 *)AttributeInfo;
        if (v9 < 0)
          return v7;
      }
      v16 = *(unsigned int *)(a1 + 52);
      v17 = *(unsigned __int8 **)a2;
      v18 = *(_QWORD *)a2 + v16;
      if (*(_QWORD *)a2)
        v19 = *(_QWORD *)a2 + v16;
      else
        v19 = *(unsigned int *)(a1 + 52);
      v7 = 3;
      v20 = *(_QWORD *)(a2 + 8) - v16;
      *(_QWORD *)a2 = v19;
      *(_QWORD *)(a2 + 8) = v20;
      if (v20 >= 0 && v17 && &v5[v9] >= v17 && (unint64_t)v5 <= v18)
      {
        v21 = v18 - (_QWORD)v5;
        if ((uint64_t)(v18 - (_QWORD)v5) < 0)
          return 3;
        if (*(_BYTE *)(a1 + 48) || *(unsigned __int8 *)(a1 + 49) - 1 > 1)
          return 4;
        if ((*(_BYTE *)(a1 + 77) & 0xFE) == 2)
          return 3;
        v22 = !*(_BYTE *)(a1 + 76) || *(_BYTE *)(a1 + 76) == 3;
        v23 = !v22;
        if (*(_BYTE *)(a1 + 77) && !v23 || *(_BYTE *)(a1 + 70) || !a4 && *(_BYTE *)(a1 + 69))
          return 3;
        v24 = *(int *)(a1 + 60);
        v25 = *(unsigned int *)(a1 + 60);
        std::vector<int>::vector(&v80, v24);
        if ((int)v24 >= 1)
        {
          begin = v80.__begin_;
          v27 = v25;
          do
          {
            while (1)
            {
              v29 = v21 < 4;
              v21 -= 4;
              if (v29)
                break;
              v28 = *(_DWORD *)v5;
              v5 += 4;
              *begin++ = v28;
              if (!--v27)
                goto LABEL_40;
            }
            v21 = 0;
            v5 = 0;
            ++begin;
            --v27;
          }
          while (v27);
        }
LABEL_40:
        v30 = (int32x4_t **)(a1 + 104);
        std::vector<int>::resize((std::vector<int> *)(a1 + 104), v24);
        if ((int)v25 < 1)
        {
          if (v5)
          {
            v35 = 0;
            goto LABEL_62;
          }
LABEL_81:
          v7 = 3;
          goto LABEL_82;
        }
        for (i = 0; i != v25; ++i)
        {
          while (1)
          {
            v29 = v21-- < 1;
            if (!v29)
              break;
            v21 = 0;
            v5 = 0;
            if (++i == v25)
              goto LABEL_81;
          }
          v32 = *v30;
          v33 = *v5++;
          (*v30)->i32[i] = v33;
        }
        if (!v5)
          goto LABEL_81;
        if (v25 < 8)
        {
          v34 = 0;
          v35 = 0;
          v36 = 1;
          goto LABEL_59;
        }
        if (v24 >= 0x20)
        {
          v34 = v25 & 0x7FFFFFE0;
          v37 = (int32x4_t *)(v80.__begin_ + 16);
          v38 = v32 + 4;
          v39 = 0uLL;
          v40.i64[0] = 0x101010101010101;
          v40.i64[1] = 0x101010101010101;
          v41.i64[0] = 0x1D0000001DLL;
          v41.i64[1] = 0x1D0000001DLL;
          v42 = v25 & 0xFFFFFFE0;
          v43.i64[0] = 0x101010101010101;
          v43.i64[1] = 0x101010101010101;
          v44 = 0uLL;
          do
          {
            v39 = vornq_s8(v39, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v37[-4]), (int16x8_t)vceqzq_s32(v37[-3])), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v37[-2]), (int16x8_t)vceqzq_s32(v37[-1]))));
            v44 = vornq_s8(v44, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(*v37), (int16x8_t)vceqzq_s32(v37[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v37[2]), (int16x8_t)vceqzq_s32(v37[3]))));
            v40 = vandq_s8(v40, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v41, v38[-4]), (int16x8_t)vcgtq_s32(v41, v38[-3])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v41, v38[-2]), (int16x8_t)vcgtq_s32(v41, v38[-1]))));
            v43 = vandq_s8(v43, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v41, *v38), (int16x8_t)vcgtq_s32(v41, v38[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_s32(v41, v38[2]), (int16x8_t)vcgtq_s32(v41, v38[3]))));
            v37 += 8;
            v38 += 8;
            v42 -= 32;
          }
          while (v42);
          v35 = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vorrq_s8(v44, v39), 7uLL))) & 1;
          v36 = vminvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vandq_s8(v43, v40), 7uLL)));
          if (v34 == v25)
            goto LABEL_61;
          if ((v25 & 0x18) == 0)
          {
LABEL_59:
            v56 = v25 - v34;
            v57 = v34;
            v58 = &v32->i32[v57];
            v59 = &v80.__begin_[v57];
            do
            {
              v60 = *v59++;
              v35 |= v60 != 0;
              v61 = *v58++;
              v36 &= v61 < 29;
              --v56;
            }
            while (v56);
            goto LABEL_61;
          }
        }
        else
        {
          v35 = 0;
          v34 = 0;
          v36 = 1;
        }
        v45 = v34;
        v46 = (int8x8_t)-1;
        v46.i8[0] = v36;
        v47 = (int8x8_t)v35;
        v34 = v25 & 0xFFFFFFF8;
        v48 = &v80.__begin_[v45];
        v49 = (int32x4_t *)((char *)v32 + 4 * v45);
        v50 = v45 - v34;
        v51.i64[0] = 0x1D0000001DLL;
        v51.i64[1] = 0x1D0000001DLL;
        do
        {
          v52 = *(int32x4_t *)v48;
          v53 = *((int32x4_t *)v48 + 1);
          v48 += 8;
          v47 = vorr_s8(v47, vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v52), (int16x8_t)vceqzq_s32(v53)))));
          v54 = *v49;
          v55 = v49[1];
          v49 += 2;
          v46 = vand_s8(v46, vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_s32(v51, v54), (int16x8_t)vcgtq_s32(v51, v55))));
          v50 += 8;
        }
        while (v50);
        v35 = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v47, 7uLL))) & 1;
        v36 = vminv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v46, 7uLL)));
        if (v34 != v25)
          goto LABEL_59;
LABEL_61:
        if ((v36 & 1) != 0)
        {
LABEL_62:
          v7 = gcl::polyline::DecoderImpl::decodeAttributes(a1, v5, v21, a3, a4);
          if ((((_DWORD)v7 == 0) & v35) == 1)
          {
            if (*(int *)(a1 + 56) < 1)
            {
LABEL_84:
              v7 = 0;
              v62 = v80.__begin_;
              if (!v80.__begin_)
                return v7;
            }
            else
            {
              v62 = v80.__begin_;
              if ((int)v25 >= 1)
              {
                LODWORD(v63) = 0;
                v64 = 0;
                v65 = &v80.__begin_[v25];
                v66 = v25 & 0xFFFFFFF8;
                while (1)
                {
                  v67 = (int)v63;
                  if (v25 >= 8
                    && ((v68 = (int)v63, v69 = &a3->i8[v68 * 4], v70 = &a3->i32[v25 + v68], v69 < (char *)v65)
                      ? (v71 = v62 >= v70)
                      : (v71 = 1),
                        v71))
                  {
                    v63 = v67 + v66;
                    v72 = v25 & 0xFFFFFFF8;
                    v73 = (int32x4_t *)(v62 + 4);
                    v74 = (int32x4_t *)((char *)a3 + 4 * v67 + 16);
                    do
                    {
                      v75 = vaddq_s32(*v74, *v73);
                      v74[-1] = vaddq_s32(v74[-1], v73[-1]);
                      *v74 = v75;
                      v73 += 2;
                      v74 += 2;
                      v72 -= 8;
                    }
                    while (v72);
                    v76 = v25 & 0x7FFFFFF8;
                    if (v66 == v25)
                      goto LABEL_66;
                  }
                  else
                  {
                    v76 = 0;
                    v63 = v67;
                  }
                  v77 = v25 - v76;
                  v78 = &v62[v76];
                  do
                  {
                    v79 = *v78++;
                    a3->i32[v63++] += v79;
                    --v77;
                  }
                  while (v77);
LABEL_66:
                  if (++v64 >= *(_DWORD *)(a1 + 56))
                    goto LABEL_84;
                }
              }
              v7 = 0;
              if (!v80.__begin_)
                return v7;
            }
LABEL_83:
            v80.__end_ = v62;
            operator delete(v62);
            return v7;
          }
LABEL_82:
          v62 = v80.__begin_;
          if (!v80.__begin_)
            return v7;
          goto LABEL_83;
        }
        goto LABEL_81;
      }
    }
  }
  return v7;
}

void sub_1885C196C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::size_type v4;
  int *v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    if (__n >> 62)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v4 = __n;
    v5 = (int *)operator new(4 * __n);
    this->__begin_ = v5;
    this->__end_cap_.__value_ = &v5[__n];
    bzero(v5, 4 * __n);
    this->__end_ = &v5[v4];
  }
  return this;
}

{
  std::vector<int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1885C1A04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;
  BOOL v3;
  std::vector<int>::size_type v4;

  v2 = this->__end_ - this->__begin_;
  v3 = __sz >= v2;
  v4 = __sz - v2;
  if (v4 != 0 && v3)
  {
    std::vector<int>::__append(this, v4);
  }
  else if (!v3)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

uint64_t gcl::polyline::DecoderImpl::decodeAttributes(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int32x4_t *a4, unsigned __int8 *a5)
{
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  __int128 v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  _BOOL4 v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int32 v37;
  int v38;
  unsigned int v39;
  int v40;
  uint64_t i;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  unint64_t v51;
  int v52;
  int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  int v59;
  BOOL v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  int v71;
  int v72;
  unint64_t v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  size_t v78;
  int32x4_t *v79;
  int v80;
  uint64_t j;
  int v82;
  uint64_t v83;
  size_t v84;
  void *v85;
  int32x4_t *v86;
  int v87;
  unint64_t v88;
  char v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  unint64_t v101;
  int32x4_t *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  BOOL v107;
  int v108;
  unsigned int v109;
  int v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  unint64_t v114;
  int v115;
  unint64_t v116;
  unsigned int v117;
  unsigned int v118;
  _BOOL4 v119;
  int v120;
  unsigned int v121;
  int v122;
  int v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v126;
  int v127;
  unint64_t v128;
  char v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  char v136;
  unint64_t v137;
  uint64_t v138;
  int32x4_t *v139;
  uint64_t v141;
  int32x4_t *v143;
  uint64_t v144;
  _WORD v145[3];
  __int128 __b;
  void *v147[2];
  __int128 v148;
  void *v149[2];
  void *v150[2];
  __int128 v151;
  void *__p[2];
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  v8 = a3 >> 63;
  if (*(_BYTE *)(a1 + 48) || *(_BYTE *)(a1 + 49) != 1)
  {
    LODWORD(v8) = a3 & ~(_DWORD)v8;
  }
  else
  {
    v60 = a3 < 4;
    a3 -= 4;
    if (v60)
      return 3;
    if (a2 == (unsigned __int8 *)-4)
      return 3;
    v8 = *(unsigned int *)a2;
    if (a3 < v8)
      return 3;
    a2 += 4;
  }
  if (a3 >= v8)
    v10 = a2;
  else
    v10 = 0;
  if (a3 >= v8)
    v11 = v8;
  else
    v11 = 0;
  *(_DWORD *)(a1 + 128) = v11;
  *(_QWORD *)(a1 + 136) = v10;
  *(_QWORD *)&v12 = 0xFFFF000000000000;
  *((_QWORD *)&v12 + 1) = 0xFFFF000000000000;
  *(_OWORD *)(a1 + 152) = v12;
  *(_QWORD *)(a1 + 168) = 16;
  if (!(_DWORD)v11)
  {
    v13 = -16777216;
    goto LABEL_20;
  }
  v13 = *v10 << 24;
  *(_DWORD *)(a1 + 160) = v13;
  if ((_DWORD)v11 == 1)
  {
LABEL_20:
    v14 = v13 | 0xFF0000;
    goto LABEL_21;
  }
  v14 = v13 | (v10[1] << 16);
  *(_DWORD *)(a1 + 160) = v14;
  if (v11 <= 2)
  {
LABEL_21:
    v15 = v14 | 0xFF00;
    goto LABEL_22;
  }
  v15 = v14 | (v10[2] << 8);
  *(_DWORD *)(a1 + 160) = v15;
  if ((_DWORD)v11 == 3)
  {
LABEL_22:
    v16 = 255;
    goto LABEL_23;
  }
  v16 = v10[3];
LABEL_23:
  v17 = v16 | v15;
  *(_DWORD *)(a1 + 160) = v16 | v15;
  v18 = 3;
  *(_QWORD *)(a1 + 144) = 3;
  memcpy((void *)(a1 + 176), &gcl::ArithmeticDecoder::probUpdateLutInterleaved, 0x400uLL);
  v19 = *(unsigned __int8 *)(a1 + 69);
  if (v19 != 1)
    goto LABEL_49;
  memset_pattern16(&__b, &unk_189CFAE50, 4uLL);
  v20 = *(unsigned int *)(a1 + 56);
  if ((int)v20 < 1)
  {
    v18 = 3;
    goto LABEL_49;
  }
  v21 = 0;
  v22 = -65536;
  v23 = 16;
  v18 = 3;
  do
  {
    if (v21)
    {
      v30 = a5[v21 - 1];
      if (v22 < 0x40000001)
        goto LABEL_42;
      goto LABEL_26;
    }
    v30 = 0;
    if (v22 < 0x40000001)
    {
      while (1)
      {
LABEL_42:
        v17 *= 2;
        *(_DWORD *)(a1 + 168) = --v23;
        if (v23)
          goto LABEL_41;
        *(_QWORD *)(a1 + 144) = v18 + 1;
        if (v18 + 1 >= v11)
        {
          v32 = 65280;
          v18 += 2;
          *(_QWORD *)(a1 + 144) = v18;
          if (v18 >= v11)
          {
LABEL_47:
            v31 = 255;
            goto LABEL_40;
          }
        }
        else
        {
          v32 = v10[v18 + 1] << 8;
          v18 += 2;
          *(_QWORD *)(a1 + 144) = v18;
          if (v18 >= v11)
            goto LABEL_47;
        }
        v31 = v10[v18];
LABEL_40:
        v17 |= v32 | v31;
        v23 = 16;
        *(_DWORD *)(a1 + 168) = 16;
LABEL_41:
        v24 = 2 * v22;
        v58 = v22 >= 0x20000001;
        v22 *= 2;
        if (v58)
          goto LABEL_27;
      }
    }
LABEL_26:
    v24 = v22;
LABEL_27:
    v25 = *((unsigned __int16 *)&v147[-2] + v30);
    v26 = (HIWORD(v24) * v25) & 0xFFFF0000;
    v27 = v24 - v26;
    v28 = v17 >= v26;
    *((_WORD *)&v147[-2] + v30) = *(_WORD *)(a1 + 2 * ((v25 >> 7) & 0x1FE | v28) + 176) + v25;
    if (v17 < v26)
      v22 = v26;
    else
      v22 = v27;
    if (v17 < v26)
      v29 = 0;
    else
      v29 = v26;
    v17 -= v29;
    *(_DWORD *)(a1 + 156) = v22;
    *(_DWORD *)(a1 + 160) = v17;
    a5[v21++] = v28;
  }
  while (v21 != v20);
LABEL_49:
  v33 = *(unsigned __int8 *)(a1 + 77);
  if (v33 == 4)
  {
    v82 = *(_DWORD *)(a1 + 60);
    v153 = 0;
    v151 = 0u;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v149 = 0u;
    *(_OWORD *)v150 = 0u;
    *(_OWORD *)v147 = 0u;
    v148 = 0u;
    __b = 0u;
    gcl::polyline::ACContext::init((std::vector<int> *)&__b, v82);
    memset_pattern16(v145, &unk_189CFAE50, 6uLL);
    v83 = v82;
    v144 = v82;
    if (v82)
    {
      if (v82 < 0)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v84 = 4 * v82;
      v85 = operator new(v84);
      bzero(v85, v84);
      v154 = -1;
      v155 = -1;
      v86 = (int32x4_t *)operator new(v84);
      bzero(v86, v84);
      v83 = v144;
      v87 = *(_DWORD *)(a1 + 56);
      if (v87 >= 1)
        goto LABEL_139;
    }
    else
    {
      v85 = 0;
      v86 = 0;
      v154 = -1;
      v155 = -1;
      v87 = *(_DWORD *)(a1 + 56);
      if (v87 >= 1)
      {
LABEL_139:
        v143 = v86;
        v88 = 0;
        v89 = 0;
        v90 = 0x8000;
        v91 = v145[0];
        while (1)
        {
          if (!v19 || a5[v88])
          {
            v94 = *(_DWORD *)(a1 + 156);
            v93 = *(_DWORD *)(a1 + 160);
            if (v94 < 0x40000001)
            {
              v95 = *(_DWORD *)(a1 + 168);
              while (1)
              {
                v93 *= 2;
                *(_DWORD *)(a1 + 168) = --v95;
                if (v95)
                  goto LABEL_149;
                v98 = *(_QWORD *)(a1 + 144);
                *(_QWORD *)(a1 + 144) = v98 + 1;
                v99 = *(unsigned int *)(a1 + 128);
                if (v98 + 1 >= v99)
                {
                  v100 = 65280;
                  v101 = v98 + 2;
                  *(_QWORD *)(a1 + 144) = v101;
                  if (v101 >= v99)
                  {
LABEL_155:
                    v96 = 255;
                    goto LABEL_148;
                  }
                }
                else
                {
                  v100 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v98 + 1) << 8;
                  v101 = v98 + 2;
                  *(_QWORD *)(a1 + 144) = v101;
                  if (v101 >= v99)
                    goto LABEL_155;
                }
                v96 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v101);
LABEL_148:
                v93 |= v100 | v96;
                v95 = 16;
                *(_DWORD *)(a1 + 168) = 16;
LABEL_149:
                v97 = 2 * v94;
                v58 = v94 >= 0x20000001;
                v94 *= 2;
                if (v58)
                  goto LABEL_157;
              }
            }
            v97 = *(_DWORD *)(a1 + 156);
LABEL_157:
            v102 = (int32x4_t *)((char *)a4 + 4 * v88 * v83);
            v103 = (HIWORD(v97) * (unsigned __int16)v90) & 0xFFFF0000;
            v104 = v97 - v103;
            if (v93 < v103)
              v105 = 0;
            else
              v105 = v103;
            v106 = v93 - v105;
            v107 = v93 >= v103;
            v108 = *(unsigned __int16 *)(a1 + 2 * ((v90 >> 7) & 0x1FE | (v93 >= v103)) + 176);
            if (v93 < v103)
              v109 = v103;
            else
              v109 = v104;
            *(_DWORD *)(a1 + 156) = v109;
            *(_DWORD *)(a1 + 160) = v106;
            if (v107)
            {
              gcl::polyline::DecoderImpl::decodeResidual(a1, v143, v83, 0, 0, v102);
            }
            else
            {
              if (v103 < 0x40000001)
              {
                v110 = *(_DWORD *)(a1 + 168);
                while (1)
                {
                  v106 *= 2;
                  *(_DWORD *)(a1 + 168) = --v110;
                  if (v110)
                    goto LABEL_168;
                  v113 = *(_QWORD *)(a1 + 144);
                  *(_QWORD *)(a1 + 144) = v113 + 1;
                  v114 = *(unsigned int *)(a1 + 128);
                  if (v113 + 1 >= v114)
                  {
                    v115 = 65280;
                    v116 = v113 + 2;
                    *(_QWORD *)(a1 + 144) = v116;
                    if (v116 >= v114)
                    {
LABEL_174:
                      v111 = 255;
                      goto LABEL_167;
                    }
                  }
                  else
                  {
                    v115 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v113 + 1) << 8;
                    v116 = v113 + 2;
                    *(_QWORD *)(a1 + 144) = v116;
                    if (v116 >= v114)
                      goto LABEL_174;
                  }
                  v111 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v116);
LABEL_167:
                  v106 |= v115 | v111;
                  v110 = 16;
                  *(_DWORD *)(a1 + 168) = 16;
LABEL_168:
                  v112 = 2 * v103;
                  v58 = v103 >= 0x20000001;
                  v103 *= 2;
                  if (v58)
                    goto LABEL_176;
                }
              }
              v112 = v103;
LABEL_176:
              v117 = (HIWORD(v112) * (unsigned __int16)v91) & 0xFFFF0000;
              v118 = v112 - v117;
              v119 = v106 >= v117;
              v120 = *(unsigned __int16 *)(a1 + 2 * ((v91 >> 7) & 0x1FE | v119) + 176);
              if (v106 < v117)
              {
                v118 = v117;
                v117 = 0;
              }
              v121 = v106 - v117;
              *(_DWORD *)(a1 + 156) = v118;
              *(_DWORD *)(a1 + 160) = v121;
              if (v118 < 0x40000001)
              {
                v122 = *(_DWORD *)(a1 + 168);
                while (2)
                {
                  v121 *= 2;
                  *(_DWORD *)(a1 + 168) = --v122;
                  if (v122)
                    goto LABEL_182;
                  v125 = *(_QWORD *)(a1 + 144);
                  *(_QWORD *)(a1 + 144) = v125 + 1;
                  v126 = *(unsigned int *)(a1 + 128);
                  if (v125 + 1 >= v126)
                  {
                    v127 = 65280;
                    v128 = v125 + 2;
                    *(_QWORD *)(a1 + 144) = v128;
                    if (v128 >= v126)
                      goto LABEL_188;
                  }
                  else
                  {
                    v127 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v125 + 1) << 8;
                    v128 = v125 + 2;
                    *(_QWORD *)(a1 + 144) = v128;
                    if (v128 >= v126)
                    {
LABEL_188:
                      v123 = 255;
LABEL_181:
                      v121 |= v127 | v123;
                      v122 = 16;
                      *(_DWORD *)(a1 + 168) = 16;
LABEL_182:
                      v124 = 2 * v118;
                      v58 = v118 >= 0x20000001;
                      v118 *= 2;
                      if (v58)
                        goto LABEL_190;
                      continue;
                    }
                  }
                  break;
                }
                v123 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v128);
                goto LABEL_181;
              }
              v124 = v118;
LABEL_190:
              v129 = 2 * v119;
              v130 = (v119 & 0x7FFFFFFFu) + 1;
              v131 = (unsigned __int16)v145[v130];
              v132 = (HIWORD(v124) * v131) & 0xFFFF0000;
              v133 = v124 - v132;
              v145[v130] = *(_WORD *)(a1 + 2 * ((v131 >> 7) & 0x1FE | (v121 >= v132)) + 176) + v131;
              if (v121 < v132)
                v134 = v132;
              else
                v134 = v133;
              if (v121 < v132)
                v135 = 0;
              else
                v135 = v132;
              v136 = v89 + v129;
              if (v121 >= v132)
                ++v136;
              *(_DWORD *)(a1 + 156) = v134;
              *(_DWORD *)(a1 + 160) = v121 - v135;
              v137 = *((unsigned int *)&v154 + ((v136 - 1) & 3));
              if (v88 <= v137)
              {
                v9 = 3;
                v86 = v143;
                if (!v143)
                  goto LABEL_207;
LABEL_206:
                operator delete(v86);
LABEL_207:
                if (v85)
                  operator delete(v85);
                if (__p[0])
                {
                  __p[1] = __p[0];
                  operator delete(__p[0]);
                }
                if (v150[1])
                {
                  *(void **)&v151 = v150[1];
                  operator delete(v150[1]);
                }
                if (v149[0])
                {
                  v149[1] = v149[0];
                  operator delete(v149[0]);
                }
                if (v147[1])
                {
                  *(void **)&v148 = v147[1];
                  operator delete(v147[1]);
                }
                if ((_QWORD)__b)
                {
                  *((_QWORD *)&__b + 1) = __b;
                  operator delete((void *)__b);
                }
                return v9;
              }
              v91 += v120;
              gcl::polyline::DecoderImpl::decodeResidual(a1, (int32x4_t *)((char *)a4 + 4 * (int)v137 * (int)v83), v83, *(_BYTE *)(a1 + 76), (uint64_t *)&__b, v102);
            }
            v83 = v144;
            v90 += v108;
            v92 = v89++ & 3;
            *((_DWORD *)&v154 + v92) = v88;
            v87 = *(_DWORD *)(a1 + 56);
          }
          if ((uint64_t)++v88 >= v87)
          {
            v9 = 0;
            v86 = v143;
            if (v143)
              goto LABEL_206;
            goto LABEL_207;
          }
        }
      }
    }
    v9 = 0;
    if (v86)
      goto LABEL_206;
    goto LABEL_207;
  }
  if (v33 != 1)
  {
    if (*(_BYTE *)(a1 + 77))
      return 5;
    v35 = *(unsigned int *)(a1 + 56);
    v34 = *(unsigned int *)(a1 + 60);
    if (*(_BYTE *)(a1 + 76) == 3)
    {
      if ((int)v34 >= 1 && (int)v35 >= 1)
      {
        v36 = 0;
        v37 = 0;
        v38 = 0;
        v39 = 0x8000;
        v40 = -1;
        do
        {
          for (i = 0; i != v35; ++i)
          {
            if (!v19 || a5[i])
            {
              if ((v40 & 0x80000000) == 0)
              {
LABEL_60:
                a4->i32[v36 + i * v34] = v37;
                --v40;
                continue;
              }
              v42 = *(_QWORD *)(a1 + 104);
              v43 = *(_DWORD *)(a1 + 156);
              v44 = *(_DWORD *)(a1 + 160);
              if (*(int *)(v42 + 4 * v36) >= 1)
              {
                v45 = 0;
                v37 = 0;
                while (v43 >= 0x40000001)
                {
                  v46 = v43;
LABEL_68:
                  v47 = (v46 >> 1) & 0x7FFF0000;
                  v43 = v46 - v47;
                  v48 = v44 >= v47;
                  if (v44 < v47)
                  {
                    v43 = v47;
                    v47 = 0;
                  }
                  v44 -= v47;
                  *(_DWORD *)(a1 + 156) = v43;
                  *(_DWORD *)(a1 + 160) = v44;
                  v37 += v48 << v45++;
                  if (v45 >= *(_DWORD *)(v42 + 4 * v36))
                    goto LABEL_83;
                }
                v49 = *(_DWORD *)(a1 + 168);
                while (1)
                {
                  v44 *= 2;
                  *(_DWORD *)(a1 + 168) = --v49;
                  if (v49)
                    goto LABEL_75;
                  *(_QWORD *)(a1 + 144) = v18 + 1;
                  v51 = *(unsigned int *)(a1 + 128);
                  if (v18 + 1 >= v51)
                  {
                    v52 = 65280;
                    v18 += 2;
                    *(_QWORD *)(a1 + 144) = v18;
                    if (v18 >= v51)
                    {
LABEL_81:
                      v50 = 255;
                      goto LABEL_74;
                    }
                  }
                  else
                  {
                    v52 = v10[v18 + 1] << 8;
                    v18 += 2;
                    *(_QWORD *)(a1 + 144) = v18;
                    if (v18 >= v51)
                      goto LABEL_81;
                  }
                  v50 = v10[v18];
LABEL_74:
                  v44 |= v52 | v50;
                  v49 = 16;
                  *(_DWORD *)(a1 + 168) = 16;
LABEL_75:
                  v46 = 2 * v43;
                  v58 = v43 >= 0x20000001;
                  v43 *= 2;
                  if (v58)
                    goto LABEL_68;
                }
              }
              v37 = 0;
LABEL_83:
              v53 = 0;
              v54 = v38;
              if (v43 >= 0x40000001)
              {
                while (1)
                {
                  v55 = v43;
LABEL_85:
                  v43 = (HIWORD(v55) * (unsigned __int16)v39) & 0xFFFF0000;
                  v56 = v55 - v43;
                  if (v44 < v43)
                    v57 = 0;
                  else
                    v57 = (HIWORD(v55) * (unsigned __int16)v39) & 0xFFFF0000;
                  v58 = v44 >= v43;
                  v44 -= v57;
                  v59 = v58;
                  v39 += *(unsigned __int16 *)(a1 + 2 * ((v39 >> 7) & 0x1FE | v59) + 176);
                  if (v58)
                    v43 = v56;
                  *(_DWORD *)(a1 + 156) = v43;
                  *(_DWORD *)(a1 + 160) = v44;
                  v60 = v58 && v54 < 31;
                  if (!v60)
                    break;
                  v61 = 1 << v54++;
                  v53 |= v61;
                  if (v43 < 0x40000001)
                    goto LABEL_99;
                }
                v66 = 0;
                if (!v54)
                {
LABEL_110:
                  v40 = v66 + v53;
                  v67 = (v66 + v53) >> v38;
                  if (!v38 || v67)
                  {
                    if (v67 > 1)
                      ++v38;
                  }
                  else
                  {
                    --v38;
                  }
                  goto LABEL_60;
                }
                while (v43 >= 0x40000001)
                {
                  v68 = v43;
LABEL_114:
                  v69 = (v68 >> 1) & 0x7FFF0000;
                  v43 = v68 - v69;
                  v70 = v44 >= v69;
                  if (v44 < v69)
                  {
                    v43 = v69;
                    v69 = 0;
                  }
                  v44 -= v69;
                  *(_DWORD *)(a1 + 156) = v43;
                  *(_DWORD *)(a1 + 160) = v44;
                  v66 |= v70 << --v54;
                  if (!v54)
                    goto LABEL_110;
                }
                v71 = *(_DWORD *)(a1 + 168);
                while (2)
                {
                  v44 *= 2;
                  *(_DWORD *)(a1 + 168) = --v71;
                  if (v71)
                    goto LABEL_121;
                  *(_QWORD *)(a1 + 144) = v18 + 1;
                  v73 = *(unsigned int *)(a1 + 128);
                  if (v18 + 1 >= v73)
                  {
                    v74 = 65280;
                    v18 += 2;
                    *(_QWORD *)(a1 + 144) = v18;
                    if (v18 >= v73)
                      goto LABEL_127;
                  }
                  else
                  {
                    v74 = v10[v18 + 1] << 8;
                    v18 += 2;
                    *(_QWORD *)(a1 + 144) = v18;
                    if (v18 >= v73)
                    {
LABEL_127:
                      v72 = 255;
LABEL_120:
                      v44 |= v74 | v72;
                      v71 = 16;
                      *(_DWORD *)(a1 + 168) = 16;
LABEL_121:
                      v68 = 2 * v43;
                      v58 = v43 >= 0x20000001;
                      v43 *= 2;
                      if (v58)
                        goto LABEL_114;
                      continue;
                    }
                  }
                  break;
                }
                v72 = v10[v18];
                goto LABEL_120;
              }
LABEL_99:
              v62 = *(_DWORD *)(a1 + 168);
              while (2)
              {
                v44 *= 2;
                *(_DWORD *)(a1 + 168) = --v62;
                if (v62)
                  goto LABEL_102;
                *(_QWORD *)(a1 + 144) = v18 + 1;
                v64 = *(unsigned int *)(a1 + 128);
                if (v18 + 1 >= v64)
                {
                  v65 = 65280;
                  v18 += 2;
                  *(_QWORD *)(a1 + 144) = v18;
                  if (v18 >= v64)
                    goto LABEL_108;
                }
                else
                {
                  v65 = v10[v18 + 1] << 8;
                  v18 += 2;
                  *(_QWORD *)(a1 + 144) = v18;
                  if (v18 >= v64)
                  {
LABEL_108:
                    v63 = 255;
LABEL_101:
                    v44 |= v65 | v63;
                    v62 = 16;
                    *(_DWORD *)(a1 + 168) = 16;
LABEL_102:
                    v55 = 2 * v43;
                    v58 = v43 >= 0x20000001;
                    v43 *= 2;
                    if (v58)
                      goto LABEL_85;
                    continue;
                  }
                }
                break;
              }
              v63 = v10[v18];
              goto LABEL_101;
            }
          }
          ++v36;
        }
        while (v36 != v34);
      }
      return 0;
    }
    v153 = 0;
    v151 = 0u;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v149 = 0u;
    *(_OWORD *)v150 = 0u;
    *(_OWORD *)v147 = 0u;
    v148 = 0u;
    __b = 0u;
    gcl::polyline::ACContext::init((std::vector<int> *)&__b, v34);
    v138 = 4 * (int)v34;
    if ((_DWORD)v34)
    {
      if ((v34 & 0x80000000) != 0)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v139 = (int32x4_t *)operator new(4 * (int)v34);
      bzero(v139, 4 * (int)v34);
      if ((int)v35 < 1)
        goto LABEL_225;
    }
    else
    {
      v139 = 0;
      if ((int)v35 < 1)
      {
LABEL_225:
        if (v139)
          operator delete(v139);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v150[1])
        {
          *(void **)&v151 = v150[1];
          operator delete(v150[1]);
        }
        if (v149[0])
        {
          v149[1] = v149[0];
          operator delete(v149[0]);
        }
        if (v147[1])
        {
          *(void **)&v148 = v147[1];
          operator delete(v147[1]);
        }
        if ((_QWORD)__b)
        {
          *((_QWORD *)&__b + 1) = __b;
          operator delete((void *)__b);
        }
        return 0;
      }
    }
    if (v19)
    {
      do
      {
        if (*a5++)
          gcl::polyline::DecoderImpl::decodeResidual(a1, v139, v34, *(_BYTE *)(a1 + 76), (uint64_t *)&__b, a4);
        a4 = (int32x4_t *)((char *)a4 + v138);
        --v35;
      }
      while (v35);
    }
    else
    {
      do
      {
        gcl::polyline::DecoderImpl::decodeResidual(a1, v139, v34, *(_BYTE *)(a1 + 76), (uint64_t *)&__b, a4);
        a4 = (int32x4_t *)((char *)a4 + v138);
        --v35;
      }
      while (v35);
    }
    goto LABEL_225;
  }
  v153 = 0;
  v151 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v149 = 0u;
  *(_OWORD *)v150 = 0u;
  *(_OWORD *)v147 = 0u;
  v148 = 0u;
  __b = 0u;
  gcl::polyline::ACContext::init((std::vector<int> *)&__b, *(_DWORD *)(a1 + 60));
  v75 = *(_DWORD *)(a1 + 60);
  v76 = *(unsigned __int8 *)(a1 + 69);
  if (v75)
  {
    v77 = v75;
    if (v75 < 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v78 = 4 * v75;
    v79 = (int32x4_t *)operator new(v78);
    bzero(v79, 4 * v77);
    v80 = *(_DWORD *)(a1 + 56);
    if (v80 >= 1)
    {
      if (v76)
      {
        for (j = 0; j < v80; ++j)
        {
          if (a5[j])
          {
            gcl::polyline::DecoderImpl::decodeResidual(a1, v79, v77, *(_BYTE *)(a1 + 76), (uint64_t *)&__b, a4);
            memcpy(v79, a4, 4 * v77);
            v80 = *(_DWORD *)(a1 + 56);
          }
          a4 = (int32x4_t *)((char *)a4 + v78);
        }
      }
      else
      {
        v141 = 0;
        do
        {
          gcl::polyline::DecoderImpl::decodeResidual(a1, v79, v77, *(_BYTE *)(a1 + 76), (uint64_t *)&__b, a4);
          memcpy(v79, a4, 4 * v77);
          ++v141;
          a4 = (int32x4_t *)((char *)a4 + v78);
        }
        while (v141 < *(int *)(a1 + 56));
      }
    }
    operator delete(v79);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v150[1])
  {
    *(void **)&v151 = v150[1];
    operator delete(v150[1]);
  }
  if (v149[0])
  {
    v149[1] = v149[0];
    operator delete(v149[0]);
  }
  if (v147[1])
  {
    *(void **)&v148 = v147[1];
    operator delete(v147[1]);
  }
  if ((_QWORD)__b)
  {
    *((_QWORD *)&__b + 1) = __b;
    operator delete((void *)__b);
  }
  return 0;
}

void sub_1885C289C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  gcl::polyline::ACContext::~ACContext((gcl::polyline::ACContext *)va);
  _Unwind_Resume(a1);
}

void sub_1885C28B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, __int16 a16, __int16 a17, int a18, char a19)
{
  void *v19;

  operator delete(v19);
  gcl::polyline::ACContext::~ACContext((gcl::polyline::ACContext *)&a19);
  _Unwind_Resume(a1);
}

int32x4_t gcl::polyline::DecoderImpl::decodeResidual(uint64_t a1, int32x4_t *a2, int a3, char a4, uint64_t *a5, int32x4_t *a6)
{
  uint64_t v9;
  uint64_t v10;
  __int32 v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int32x4_t result;
  unsigned int v33;
  int v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  BOOL v55;
  _BOOL4 v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  unint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  _WORD *v72;
  unsigned int v73;
  int v74;
  int v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  int v79;
  unint64_t v80;
  unsigned int v81;
  unsigned int v82;
  _BOOL4 v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  int v93;
  unint64_t v94;
  int v95;
  unsigned int v96;
  _BOOL4 v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  int v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  unint64_t v109;
  unsigned int v110;
  _BOOL4 v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  unint64_t v122;
  int v123;
  unint64_t v124;
  unsigned int v125;
  _BOOL4 v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int v132;
  int v133;
  int v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  int v138;
  unint64_t v139;
  unsigned int v140;
  _BOOL4 v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  int v148;
  int v149;
  unsigned int v150;
  uint64_t v151;
  unint64_t v152;
  int v153;
  unint64_t v154;
  unsigned int v155;
  unsigned int v156;
  _BOOL4 v157;
  unsigned int v158;
  unsigned int v159;
  int v160;
  uint64_t v161;
  int v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  __int32 *v167;
  __int32 *v168;
  int v169;
  int32x4_t *v170;
  int32x4_t *v171;
  uint64_t v172;
  int32x4_t v173;
  unsigned int *v174;
  unsigned int v176;

  if (a4 == 2)
  {
    if (a3 < 1)
      return result;
    v25 = 0;
    v26 = 0;
    v27 = (unsigned int *)(a1 + 128);
    v176 = a3;
    v28 = 2 * a3;
    while (1)
    {
      v30 = a5[12];
      v31 = gcl::ArithmeticDecoder::decodeSignedExpGolomb(v27, *(_DWORD *)(v30 + v25), (_WORD *)(a5[3] + v26), (_WORD *)(a5[9] + v26));
      if (v31 >= 0)
        v33 = v31;
      else
        v33 = -v31;
      v34 = *(_DWORD *)(v30 + v25);
      v35 = v33 >> v34;
      if (v34)
        v36 = v35 == 0;
      else
        v36 = 0;
      if (v36)
      {
        v29 = -1;
      }
      else
      {
        if (v35 < 2)
          goto LABEL_29;
        v29 = 1;
      }
      *(_DWORD *)(v30 + v25) = v29 + v34;
LABEL_29:
      a6->i32[v25 / 4] = v31;
      v26 += 2;
      v25 += 4;
      if (v28 == v26)
        goto LABEL_195;
    }
  }
  if (a4 == 1)
  {
    if (a3 < 1)
      return result;
    v37 = 0;
    v174 = (unsigned int *)(a1 + 128);
    v176 = a3;
    v38 = a3;
    while (1)
    {
      v41 = *a5;
      v42 = *(unsigned __int16 *)(*a5 + 2 * v37);
      v44 = *(_DWORD *)(a1 + 156);
      v43 = *(_DWORD *)(a1 + 160);
      if (v44 < 0x40000001)
      {
        v45 = *(_DWORD *)(a1 + 168);
        while (1)
        {
          v43 *= 2;
          *(_DWORD *)(a1 + 168) = --v45;
          if (v45)
            goto LABEL_51;
          v48 = *(_QWORD *)(a1 + 144);
          *(_QWORD *)(a1 + 144) = v48 + 1;
          v49 = *(unsigned int *)(a1 + 128);
          if (v48 + 1 >= v49)
          {
            v50 = 65280;
            v51 = v48 + 2;
            *(_QWORD *)(a1 + 144) = v51;
            if (v51 >= v49)
            {
LABEL_57:
              v46 = 255;
              goto LABEL_50;
            }
          }
          else
          {
            v50 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v48 + 1) << 8;
            v51 = v48 + 2;
            *(_QWORD *)(a1 + 144) = v51;
            if (v51 >= v49)
              goto LABEL_57;
          }
          v46 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v51);
LABEL_50:
          v43 |= v50 | v46;
          v45 = 16;
          *(_DWORD *)(a1 + 168) = 16;
LABEL_51:
          v47 = 2 * v44;
          v55 = v44 >= 0x20000001;
          v44 *= 2;
          if (v55)
            goto LABEL_59;
        }
      }
      v47 = *(_DWORD *)(a1 + 156);
LABEL_59:
      v40 = 0;
      v52 = (HIWORD(v47) * v42) & 0xFFFF0000;
      v53 = v43 < v52 ? 0 : (HIWORD(v47) * v42) & 0xFFFF0000;
      v54 = v43 - v53;
      v55 = v43 >= v52;
      v56 = v43 >= v52;
      v57 = v47 - v52;
      *(_WORD *)(v41 + 2 * v37) = *(_WORD *)(a1 + 2 * ((v42 >> 7) & 0x1FE | v56) + 176) + v42;
      v58 = v55 ? v47 - v52 : (HIWORD(v47) * v42) & 0xFFFF0000;
      *(_DWORD *)(a1 + 156) = v58;
      *(_DWORD *)(a1 + 160) = v54;
      if (v55)
        break;
LABEL_46:
      a6->i32[v37++] = v40;
      if (v37 == v38)
        goto LABEL_195;
    }
    v59 = a5[3];
    v60 = *(unsigned __int16 *)(v59 + 2 * v37);
    if (v57 < 0x40000001)
    {
      v61 = *(_DWORD *)(a1 + 168);
      while (1)
      {
        v54 *= 2;
        *(_DWORD *)(a1 + 168) = --v61;
        if (v61)
          goto LABEL_71;
        v64 = *(_QWORD *)(a1 + 144);
        *(_QWORD *)(a1 + 144) = v64 + 1;
        v65 = *(unsigned int *)(a1 + 128);
        if (v64 + 1 >= v65)
        {
          v66 = 65280;
          v67 = v64 + 2;
          *(_QWORD *)(a1 + 144) = v67;
          if (v67 >= v65)
          {
LABEL_77:
            v62 = 255;
            goto LABEL_70;
          }
        }
        else
        {
          v66 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v64 + 1) << 8;
          v67 = v64 + 2;
          *(_QWORD *)(a1 + 144) = v67;
          if (v67 >= v65)
            goto LABEL_77;
        }
        v62 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v67);
LABEL_70:
        v54 |= v66 | v62;
        v61 = 16;
        *(_DWORD *)(a1 + 168) = 16;
LABEL_71:
        v63 = 2 * v57;
        v55 = v57 >= 0x20000001;
        v57 *= 2;
        if (v55)
          goto LABEL_79;
      }
    }
    v63 = v47 - v52;
LABEL_79:
    v68 = (HIWORD(v63) * v60) & 0xFFFF0000;
    *(_WORD *)(v59 + 2 * v37) = *(_WORD *)(a1 + 2 * ((v60 >> 7) & 0x1FE | (v54 >= v68)) + 176) + v60;
    if (v54 < v68)
      v69 = (HIWORD(v63) * v60) & 0xFFFF0000;
    else
      v69 = v63 - v68;
    if (v54 < v68)
      v70 = 0;
    else
      v70 = (HIWORD(v63) * v60) & 0xFFFF0000;
    v71 = v54 - v70;
    *(_DWORD *)(a1 + 156) = v69;
    *(_DWORD *)(a1 + 160) = v54 - v70;
    v72 = (_WORD *)(a5[6] + 2 * (int)((_DWORD)v37 << 6));
    v73 = (unsigned __int16)*v72;
    if (v69 < 0x40000001)
    {
      v74 = *(_DWORD *)(a1 + 168);
      while (1)
      {
        v71 *= 2;
        *(_DWORD *)(a1 + 168) = --v74;
        if (v74)
          goto LABEL_89;
        v77 = *(_QWORD *)(a1 + 144);
        *(_QWORD *)(a1 + 144) = v77 + 1;
        v78 = *(unsigned int *)(a1 + 128);
        if (v77 + 1 >= v78)
        {
          v79 = 65280;
          v80 = v77 + 2;
          *(_QWORD *)(a1 + 144) = v80;
          if (v80 >= v78)
          {
LABEL_95:
            v75 = 255;
            goto LABEL_88;
          }
        }
        else
        {
          v79 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v77 + 1) << 8;
          v80 = v77 + 2;
          *(_QWORD *)(a1 + 144) = v80;
          if (v80 >= v78)
            goto LABEL_95;
        }
        v75 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v80);
LABEL_88:
        v71 |= v79 | v75;
        v74 = 16;
        *(_DWORD *)(a1 + 168) = 16;
LABEL_89:
        v76 = 2 * v69;
        v55 = v69 >= 0x20000001;
        v69 *= 2;
        if (v55)
          goto LABEL_97;
      }
    }
    v76 = v69;
LABEL_97:
    v81 = (HIWORD(v76) * v73) & 0xFFFF0000;
    v82 = v76 - v81;
    v83 = v71 >= v81;
    *v72 = *(_WORD *)(a1 + 2 * ((v73 >> 7) & 0x1FE | v83) + 176) + v73;
    if (v71 >= v81)
    {
      v84 = v81;
    }
    else
    {
      v82 = v81;
      v84 = 0;
    }
    v85 = v71 - v84;
    *(_DWORD *)(a1 + 156) = v82;
    *(_DWORD *)(a1 + 160) = v85;
    v86 = (v83 & 0x7FFFFFFu) + 1;
    v87 = (unsigned __int16)v72[v86];
    if (v82 < 0x40000001)
    {
      v88 = *(_DWORD *)(a1 + 168);
      while (1)
      {
        v85 *= 2;
        *(_DWORD *)(a1 + 168) = --v88;
        if (v88)
          goto LABEL_104;
        v91 = *(_QWORD *)(a1 + 144);
        *(_QWORD *)(a1 + 144) = v91 + 1;
        v92 = *(unsigned int *)(a1 + 128);
        if (v91 + 1 >= v92)
        {
          v93 = 65280;
          v94 = v91 + 2;
          *(_QWORD *)(a1 + 144) = v94;
          if (v94 >= v92)
          {
LABEL_110:
            v89 = 255;
            goto LABEL_103;
          }
        }
        else
        {
          v93 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v91 + 1) << 8;
          v94 = v91 + 2;
          *(_QWORD *)(a1 + 144) = v94;
          if (v94 >= v92)
            goto LABEL_110;
        }
        v89 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v94);
LABEL_103:
        v85 |= v93 | v89;
        v88 = 16;
        *(_DWORD *)(a1 + 168) = 16;
LABEL_104:
        v90 = 2 * v82;
        v55 = v82 >= 0x20000001;
        v82 *= 2;
        if (v55)
          goto LABEL_112;
      }
    }
    v90 = v82;
LABEL_112:
    v95 = 32 * v83;
    v96 = (HIWORD(v90) * v87) & 0xFFFF0000;
    v97 = v85 >= v96;
    v72[v86] = *(_WORD *)(a1 + 2 * ((v87 >> 7) & 0x1FE | v97) + 176) + v87;
    if (v85 < v96)
      v98 = (HIWORD(v90) * v87) & 0xFFFF0000;
    else
      v98 = v90 - v96;
    if (v85 < v96)
      v96 = 0;
    v99 = v85 - v96;
    *(_DWORD *)(a1 + 156) = v98;
    *(_DWORD *)(a1 + 160) = v99;
    v100 = v95 | (16 * v97);
    v101 = (v100 >> 4) + 3;
    v102 = (unsigned __int16)v72[v101];
    if (v98 < 0x40000001)
    {
      v103 = *(_DWORD *)(a1 + 168);
      while (1)
      {
        v99 *= 2;
        *(_DWORD *)(a1 + 168) = --v103;
        if (v103)
          goto LABEL_121;
        v106 = *(_QWORD *)(a1 + 144);
        *(_QWORD *)(a1 + 144) = v106 + 1;
        v107 = *(unsigned int *)(a1 + 128);
        if (v106 + 1 >= v107)
        {
          v108 = 65280;
          v109 = v106 + 2;
          *(_QWORD *)(a1 + 144) = v109;
          if (v109 >= v107)
          {
LABEL_127:
            v104 = 255;
            goto LABEL_120;
          }
        }
        else
        {
          v108 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v106 + 1) << 8;
          v109 = v106 + 2;
          *(_QWORD *)(a1 + 144) = v109;
          if (v109 >= v107)
            goto LABEL_127;
        }
        v104 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v109);
LABEL_120:
        v99 |= v108 | v104;
        v103 = 16;
        *(_DWORD *)(a1 + 168) = 16;
LABEL_121:
        v105 = 2 * v98;
        v55 = v98 >= 0x20000001;
        v98 *= 2;
        if (v55)
          goto LABEL_129;
      }
    }
    v105 = v98;
LABEL_129:
    v110 = (HIWORD(v105) * v102) & 0xFFFF0000;
    v111 = v99 >= v110;
    v72[v101] = *(_WORD *)(a1 + 2 * ((v102 >> 7) & 0x1FE | v111) + 176) + v102;
    if (v99 < v110)
      v112 = (HIWORD(v105) * v102) & 0xFFFF0000;
    else
      v112 = v105 - v110;
    if (v99 < v110)
      v113 = 0;
    else
      v113 = (HIWORD(v105) * v102) & 0xFFFF0000;
    v114 = v99 - v113;
    *(_DWORD *)(a1 + 156) = v112;
    *(_DWORD *)(a1 + 160) = v114;
    v115 = v100 | (8 * v111);
    v116 = (v115 >> 3) + 7;
    v117 = (unsigned __int16)v72[v116];
    if (v112 < 0x40000001)
    {
      v118 = *(_DWORD *)(a1 + 168);
      while (1)
      {
        v114 *= 2;
        *(_DWORD *)(a1 + 168) = --v118;
        if (v118)
          goto LABEL_139;
        v121 = *(_QWORD *)(a1 + 144);
        *(_QWORD *)(a1 + 144) = v121 + 1;
        v122 = *(unsigned int *)(a1 + 128);
        if (v121 + 1 >= v122)
        {
          v123 = 65280;
          v124 = v121 + 2;
          *(_QWORD *)(a1 + 144) = v124;
          if (v124 >= v122)
          {
LABEL_145:
            v119 = 255;
            goto LABEL_138;
          }
        }
        else
        {
          v123 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v121 + 1) << 8;
          v124 = v121 + 2;
          *(_QWORD *)(a1 + 144) = v124;
          if (v124 >= v122)
            goto LABEL_145;
        }
        v119 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v124);
LABEL_138:
        v114 |= v123 | v119;
        v118 = 16;
        *(_DWORD *)(a1 + 168) = 16;
LABEL_139:
        v120 = 2 * v112;
        v55 = v112 >= 0x20000001;
        v112 *= 2;
        if (v55)
          goto LABEL_147;
      }
    }
    v120 = v112;
LABEL_147:
    v125 = (HIWORD(v120) * v117) & 0xFFFF0000;
    v126 = v114 >= v125;
    v72[v116] = *(_WORD *)(a1 + 2 * ((v117 >> 7) & 0x1FE | v126) + 176) + v117;
    if (v114 < v125)
      v127 = (HIWORD(v120) * v117) & 0xFFFF0000;
    else
      v127 = v120 - v125;
    if (v114 < v125)
      v128 = 0;
    else
      v128 = (HIWORD(v120) * v117) & 0xFFFF0000;
    v129 = v114 - v128;
    *(_DWORD *)(a1 + 156) = v127;
    *(_DWORD *)(a1 + 160) = v129;
    v130 = v115 | (4 * v126);
    v131 = (v130 >> 2) + 15;
    v132 = (unsigned __int16)v72[v131];
    if (v127 < 0x40000001)
    {
      v133 = *(_DWORD *)(a1 + 168);
      while (1)
      {
        v129 *= 2;
        *(_DWORD *)(a1 + 168) = --v133;
        if (v133)
          goto LABEL_157;
        v136 = *(_QWORD *)(a1 + 144);
        *(_QWORD *)(a1 + 144) = v136 + 1;
        v137 = *(unsigned int *)(a1 + 128);
        if (v136 + 1 >= v137)
        {
          v138 = 65280;
          v139 = v136 + 2;
          *(_QWORD *)(a1 + 144) = v139;
          if (v139 >= v137)
          {
LABEL_163:
            v134 = 255;
            goto LABEL_156;
          }
        }
        else
        {
          v138 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v136 + 1) << 8;
          v139 = v136 + 2;
          *(_QWORD *)(a1 + 144) = v139;
          if (v139 >= v137)
            goto LABEL_163;
        }
        v134 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v139);
LABEL_156:
        v129 |= v138 | v134;
        v133 = 16;
        *(_DWORD *)(a1 + 168) = 16;
LABEL_157:
        v135 = 2 * v127;
        v55 = v127 >= 0x20000001;
        v127 *= 2;
        if (v55)
          goto LABEL_165;
      }
    }
    v135 = v127;
LABEL_165:
    v140 = (HIWORD(v135) * v132) & 0xFFFF0000;
    v141 = v129 >= v140;
    v72[v131] = *(_WORD *)(a1 + 2 * ((v132 >> 7) & 0x1FE | v141) + 176) + v132;
    if (v129 < v140)
      v142 = (HIWORD(v135) * v132) & 0xFFFF0000;
    else
      v142 = v135 - v140;
    if (v129 < v140)
      v143 = 0;
    else
      v143 = (HIWORD(v135) * v132) & 0xFFFF0000;
    v144 = v129 - v143;
    *(_DWORD *)(a1 + 156) = v142;
    *(_DWORD *)(a1 + 160) = v144;
    v145 = v130 | (2 * v141);
    v146 = (v145 >> 1) + 31;
    v147 = (unsigned __int16)v72[v146];
    if (v142 < 0x40000001)
    {
      v148 = *(_DWORD *)(a1 + 168);
      while (1)
      {
        v144 *= 2;
        *(_DWORD *)(a1 + 168) = --v148;
        if (v148)
          goto LABEL_175;
        v151 = *(_QWORD *)(a1 + 144);
        *(_QWORD *)(a1 + 144) = v151 + 1;
        v152 = *(unsigned int *)(a1 + 128);
        if (v151 + 1 >= v152)
        {
          v153 = 65280;
          v154 = v151 + 2;
          *(_QWORD *)(a1 + 144) = v154;
          if (v154 >= v152)
          {
LABEL_181:
            v149 = 255;
            goto LABEL_174;
          }
        }
        else
        {
          v153 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v151 + 1) << 8;
          v154 = v151 + 2;
          *(_QWORD *)(a1 + 144) = v154;
          if (v154 >= v152)
            goto LABEL_181;
        }
        v149 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v154);
LABEL_174:
        v144 |= v153 | v149;
        v148 = 16;
        *(_DWORD *)(a1 + 168) = 16;
LABEL_175:
        v150 = 2 * v142;
        v55 = v142 >= 0x20000001;
        v142 *= 2;
        if (v55)
          goto LABEL_183;
      }
    }
    v150 = v142;
LABEL_183:
    v155 = (HIWORD(v150) * v147) & 0xFFFF0000;
    v156 = v150 - v155;
    v157 = v144 >= v155;
    v72[v146] = *(_WORD *)(a1 + 2 * ((v147 >> 7) & 0x1FE | v157) + 176) + v147;
    if (v144 < v155)
      v158 = v155;
    else
      v158 = v156;
    if (v144 < v155)
      v159 = 0;
    else
      v159 = v155;
    *(_DWORD *)(a1 + 156) = v158;
    *(_DWORD *)(a1 + 160) = v144 - v159;
    v160 = v145 | v157;
    if ((v145 | v157) == 0x3F)
    {
      v161 = a5[12];
      v160 = gcl::ArithmeticDecoder::decodeExpGolomb(v174, *(_DWORD *)(v161 + 4 * v37), (_WORD *)(a5[9] + 2 * v37)) + 63;
      v162 = *(_DWORD *)(v161 + 4 * v37);
      v163 = v160 >> v162;
      if (v162 && !v163)
      {
        v39 = -1;
LABEL_42:
        *(_DWORD *)(v161 + 4 * v37) = v39 + v162;
        goto LABEL_43;
      }
      if (v163 >= 2)
      {
        v39 = 1;
        goto LABEL_42;
      }
    }
LABEL_43:
    if (v54 >= v68)
      v40 = v160 + 1;
    else
      v40 = ~v160;
    goto LABEL_46;
  }
  v176 = a3;
  if (a4)
  {
LABEL_195:
    if ((int)v176 < 1)
      return result;
    if (v176 >= 8 && ((int32x4_t *)((char *)a2 + 4 * v176) <= a6 || (int32x4_t *)((char *)a6 + 4 * v176) <= a2))
    {
      v164 = v176 & 0x7FFFFFF8;
      v170 = a2 + 1;
      v171 = a6 + 1;
      v172 = v176 & 0xFFFFFFF8;
      do
      {
        result = vaddq_s32(v171[-1], v170[-1]);
        v173 = vaddq_s32(*v171, *v170);
        v171[-1] = result;
        *v171 = v173;
        v170 += 2;
        v171 += 2;
        v172 -= 8;
      }
      while (v172);
      if (v164 == v176)
        return result;
    }
    else
    {
      v164 = 0;
    }
    v165 = v176 - v164;
    v166 = v164;
    v167 = &a6->i32[v164];
    v168 = &a2->i32[v166];
    do
    {
      v169 = *v168++;
      *v167++ += v169;
      --v165;
    }
    while (v165);
    return result;
  }
  if (a3 >= 1)
  {
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 104);
    while (1)
    {
      v12 = *(_DWORD *)(v10 + 4 * v9);
      if (v12 >= 1)
        break;
      v11 = 0;
LABEL_7:
      a6->i32[v9++] = v11;
      if (v9 == v176)
        goto LABEL_195;
    }
    v13 = 0;
    v11 = 0;
    v15 = *(_DWORD *)(a1 + 156);
    v14 = *(_DWORD *)(a1 + 160);
    while (v15 >= 0x40000001)
    {
      v16 = v15;
LABEL_11:
      v17 = (v16 >> 1) & 0x7FFF0000;
      v15 = v16 - v17;
      v18 = v14 >= v17;
      if (v14 < v17)
      {
        v15 = v17;
        v17 = 0;
      }
      v14 -= v17;
      *(_DWORD *)(a1 + 156) = v15;
      *(_DWORD *)(a1 + 160) = v14;
      v11 += v18 << v13++;
      if (v13 == v12)
        goto LABEL_7;
    }
    v19 = *(_DWORD *)(a1 + 168);
    while (1)
    {
      v14 *= 2;
      *(_DWORD *)(a1 + 168) = --v19;
      if (v19)
        goto LABEL_18;
      v21 = *(_QWORD *)(a1 + 144);
      *(_QWORD *)(a1 + 144) = v21 + 1;
      v22 = *(unsigned int *)(a1 + 128);
      if (v21 + 1 >= v22)
      {
        v23 = 65280;
        v24 = v21 + 2;
        *(_QWORD *)(a1 + 144) = v24;
        if (v24 >= v22)
        {
LABEL_24:
          v20 = 255;
          goto LABEL_17;
        }
      }
      else
      {
        v23 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v21 + 1) << 8;
        v24 = v21 + 2;
        *(_QWORD *)(a1 + 144) = v24;
        if (v24 >= v22)
          goto LABEL_24;
      }
      v20 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 136) + v24);
LABEL_17:
      v14 |= v23 | v20;
      v19 = 16;
      *(_DWORD *)(a1 + 168) = 16;
LABEL_18:
      v16 = 2 * v15;
      v55 = v15 >= 0x20000001;
      v15 *= 2;
      if (v55)
        goto LABEL_11;
    }
  }
  return result;
}

uint64_t gcl::ArithmeticDecoder::decodeSignedExpGolomb(unsigned int *a1, int a2, _WORD *a3, _WORD *a4)
{
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;

  result = gcl::ArithmeticDecoder::decodeExpGolomb(a1, a2, a4);
  if ((_DWORD)result)
  {
    v7 = (unsigned __int16)*a3;
    v9 = a1[7];
    v8 = a1[8];
    if (v9 <= 0x40000000)
    {
      v10 = a1[10];
      while (1)
      {
        v8 *= 2;
        a1[10] = --v10;
        if (v10)
          goto LABEL_6;
        v13 = *((_QWORD *)a1 + 2);
        *((_QWORD *)a1 + 2) = v13 + 1;
        v14 = *a1;
        if (v13 + 1 >= v14)
        {
          v15 = 65280;
          v16 = v13 + 2;
          *((_QWORD *)a1 + 2) = v16;
          if (v16 >= v14)
          {
LABEL_12:
            v11 = 255;
            goto LABEL_5;
          }
        }
        else
        {
          v15 = *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + v13 + 1) << 8;
          v16 = v13 + 2;
          *((_QWORD *)a1 + 2) = v16;
          if (v16 >= v14)
            goto LABEL_12;
        }
        v11 = *(unsigned __int8 *)(*((_QWORD *)a1 + 1) + v16);
LABEL_5:
        v8 |= v15 | v11;
        v10 = 16;
        a1[10] = 16;
LABEL_6:
        v12 = 2 * v9;
        v18 = v9 >= 0x20000001;
        v9 *= 2;
        if (v18)
          goto LABEL_14;
      }
    }
    v12 = a1[7];
LABEL_14:
    v17 = (HIWORD(v12) * v7) & 0xFFFF0000;
    v18 = v8 >= v17;
    *a3 = *((_WORD *)a1 + ((v7 >> 7) & 0x1FE | (v8 >= v17)) + 24) + v7;
    if (v8 < v17)
      v19 = (HIWORD(v12) * v7) & 0xFFFF0000;
    else
      v19 = v12 - v17;
    if (v8 < v17)
      v17 = 0;
    if (v18)
      result = result;
    else
      result = -(int)result;
    a1[7] = v19;
    a1[8] = v8 - v17;
  }
  return result;
}

void gcl::tmesh::ACContext::init(std::vector<int> *this, int a2)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  std::vector<int>::pointer begin;
  unint64_t v8;
  std::vector<int>::pointer v9;
  unint64_t v10;
  std::vector<int>::pointer v11;
  unint64_t v12;
  std::vector<int>::pointer v13;
  int *end;
  unint64_t v15;
  int *v16;
  std::vector<int>::pointer v17;
  std::vector<int>::pointer v18;
  std::vector<int>::pointer v19;
  std::vector<int>::pointer v20;
  std::vector<int>::pointer v21;
  std::vector<int>::pointer v22;

  v3 = a2;
  v4 = ((char *)this->__end_ - (char *)this->__begin_) >> 1;
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<gcl::ArithmeticContext>::__append((uint64_t)this, v6);
  }
  else if (!v5)
  {
    this->__end_ = (std::vector<int>::pointer)((char *)this->__begin_ + 2 * v3);
  }
  begin = this[1].__begin_;
  v8 = ((char *)this[1].__end_ - (char *)begin) >> 1;
  if (v3 <= v8)
  {
    if (v3 < v8)
      this[1].__end_ = (std::vector<int>::pointer)((char *)begin + 2 * v3);
  }
  else
  {
    std::vector<gcl::ArithmeticContext>::__append((uint64_t)&this[1], v3 - v8);
  }
  v9 = this[2].__begin_;
  v10 = ((char *)this[2].__end_ - (char *)v9) >> 1;
  if (v3 << 6 <= v10)
  {
    if (v3 << 6 < v10)
      this[2].__end_ = &v9[32 * v3];
  }
  else
  {
    std::vector<gcl::ArithmeticContext>::__append((uint64_t)&this[2], (v3 << 6) - v10);
  }
  v11 = this[3].__begin_;
  v12 = ((char *)this[3].__end_ - (char *)v11) >> 1;
  if (v3 <= v12)
  {
    if (v3 < v12)
      this[3].__end_ = (std::vector<int>::pointer)((char *)v11 + 2 * v3);
  }
  else
  {
    std::vector<gcl::ArithmeticContext>::__append((uint64_t)&this[3], v3 - v12);
  }
  v13 = this[4].__begin_;
  end = this[4].__end_;
  v15 = end - v13;
  if (v3 <= v15)
  {
    if (v3 < v15)
    {
      end = &v13[v3];
      this[4].__end_ = end;
    }
  }
  else
  {
    std::vector<int>::__append(this + 4, v3 - v15);
    v13 = this[4].__begin_;
    end = this[4].__end_;
  }
  if ((char *)end - (char *)v13 >= 1)
    memset_pattern16(v13, &unk_189CFAE40, 4 * (((unint64_t)((char *)end - (char *)v13) >> 2) - ((unint64_t)((char *)end - (char *)v13) > 3))+ 4);
  v16 = this->__end_;
  if (this->__begin_ != v16)
    memset_pattern16(this->__begin_, &memset_pattern_26, ((char *)v16 - (char *)this->__begin_) & 0xFFFFFFFFFFFFFFFELL);
  v17 = this[1].__begin_;
  v18 = this[1].__end_;
  if (v17 != v18)
    memset_pattern16(v17, &memset_pattern_26, ((char *)v18 - (char *)v17) & 0xFFFFFFFFFFFFFFFELL);
  v19 = this[2].__begin_;
  v20 = this[2].__end_;
  if (v19 != v20)
    memset_pattern16(v19, &memset_pattern_26, ((char *)v20 - (char *)v19) & 0xFFFFFFFFFFFFFFFELL);
  v21 = this[3].__begin_;
  v22 = this[3].__end_;
  if (v21 != v22)
    memset_pattern16(v21, &memset_pattern_26, ((char *)v22 - (char *)v21) & 0xFFFFFFFFFFFFFFFELL);
}

void gcl::polyline::ACContext::init(std::vector<int> *this, int a2)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  std::vector<int>::pointer begin;
  unint64_t v8;
  std::vector<int>::pointer v9;
  unint64_t v10;
  std::vector<int>::pointer v11;
  unint64_t v12;
  std::vector<int>::pointer v13;
  int *end;
  unint64_t v15;
  int *v16;
  std::vector<int>::pointer v17;
  std::vector<int>::pointer v18;
  std::vector<int>::pointer v19;
  std::vector<int>::pointer v20;
  std::vector<int>::pointer v21;
  std::vector<int>::pointer v22;

  v3 = a2;
  v4 = ((char *)this->__end_ - (char *)this->__begin_) >> 1;
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<gcl::ArithmeticContext>::__append((uint64_t)this, v6);
  }
  else if (!v5)
  {
    this->__end_ = (std::vector<int>::pointer)((char *)this->__begin_ + 2 * v3);
  }
  begin = this[1].__begin_;
  v8 = ((char *)this[1].__end_ - (char *)begin) >> 1;
  if (v3 <= v8)
  {
    if (v3 < v8)
      this[1].__end_ = (std::vector<int>::pointer)((char *)begin + 2 * v3);
  }
  else
  {
    std::vector<gcl::ArithmeticContext>::__append((uint64_t)&this[1], v3 - v8);
  }
  v9 = this[2].__begin_;
  v10 = ((char *)this[2].__end_ - (char *)v9) >> 1;
  if (v3 << 6 <= v10)
  {
    if (v3 << 6 < v10)
      this[2].__end_ = &v9[32 * v3];
  }
  else
  {
    std::vector<gcl::ArithmeticContext>::__append((uint64_t)&this[2], (v3 << 6) - v10);
  }
  v11 = this[3].__begin_;
  v12 = ((char *)this[3].__end_ - (char *)v11) >> 1;
  if (v3 <= v12)
  {
    if (v3 < v12)
      this[3].__end_ = (std::vector<int>::pointer)((char *)v11 + 2 * v3);
  }
  else
  {
    std::vector<gcl::ArithmeticContext>::__append((uint64_t)&this[3], v3 - v12);
  }
  v13 = this[4].__begin_;
  end = this[4].__end_;
  v15 = end - v13;
  if (v3 <= v15)
  {
    if (v3 < v15)
    {
      end = &v13[v3];
      this[4].__end_ = end;
    }
  }
  else
  {
    std::vector<int>::__append(this + 4, v3 - v15);
    v13 = this[4].__begin_;
    end = this[4].__end_;
  }
  if ((char *)end - (char *)v13 >= 1)
    memset_pattern16(v13, &unk_189CFAE40, 4 * (((unint64_t)((char *)end - (char *)v13) >> 2) - ((unint64_t)((char *)end - (char *)v13) > 3))+ 4);
  v16 = this->__end_;
  if (this->__begin_ != v16)
    memset_pattern16(this->__begin_, &unk_189CFAE50, ((char *)v16 - (char *)this->__begin_) & 0xFFFFFFFFFFFFFFFELL);
  v17 = this[1].__begin_;
  v18 = this[1].__end_;
  if (v17 != v18)
    memset_pattern16(v17, &unk_189CFAE50, ((char *)v18 - (char *)v17) & 0xFFFFFFFFFFFFFFFELL);
  v19 = this[2].__begin_;
  v20 = this[2].__end_;
  if (v19 != v20)
    memset_pattern16(v19, &unk_189CFAE50, ((char *)v20 - (char *)v19) & 0xFFFFFFFFFFFFFFFELL);
  v21 = this[3].__begin_;
  v22 = this[3].__end_;
  if (v21 != v22)
    memset_pattern16(v21, &unk_189CFAE50, ((char *)v22 - (char *)v21) & 0xFFFFFFFFFFFFFFFELL);
}

void std::vector<gcl::ArithmeticContext>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  char *v22;
  unint64_t v23;
  __int128 v24;
  __int16 v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 1)
  {
    if (a2)
    {
      memset_pattern16(v5, &unk_189CFAE50, 2 * a2);
      v6 = &v5[2 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 1;
    v10 = (v8 >> 1) + a2;
    if (v10 < 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v11 = v4 - (_QWORD)v7;
    if (v11 > v10)
      v10 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 < 0)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(2 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[2 * v9];
    v15 = 2 * a2;
    v16 = &v13[2 * v12];
    memset_pattern16(v14, &unk_189CFAE50, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 2;
      if (v18 < 0x1E)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 1) + 1;
      v20 = 2 * (v19 & 0xFFFFFFFFFFFFFFF0);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[2 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 16;
      }
      while (v23);
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_29:
        do
        {
          v25 = *((_WORD *)v6 - 1);
          v6 -= 2;
          *((_WORD *)v14 - 1) = v25;
          v14 -= 2;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  int *value;
  std::vector<int>::pointer end;
  int *v6;
  std::vector<int>::pointer begin;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  int *v16;
  int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  v6 = end;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(end, 4 * __n);
      v6 = &end[__n];
    }
    this->__end_ = v6;
  }
  else
  {
    begin = this->__begin_;
    v8 = (char *)end - (char *)this->__begin_;
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + __n;
    if (v10 >> 62)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v11 = (char *)value - (char *)begin;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * __n;
    v16 = (int *)&v13[4 * v12];
    bzero(v14, v15);
    v17 = (int *)&v14[v15];
    if (end != begin)
    {
      v18 = (char *)end - (char *)begin - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)((char *)end - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &end[v20 / 0xFFFFFFFFFFFFFFFCLL];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = (__int128 *)(end - 4);
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *--v6;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != begin);
      }
    }
    this->__begin_ = (std::vector<int>::pointer)v14;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

uint64_t gcl::polyline::DecoderImpl::getAttributeInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t result;
  int v5;
  char v6;
  char v7;
  __int16 v8;
  int v9;
  int v10;
  char v11;
  int v12;
  int v13;
  char v14;
  char v15;
  char v16;
  char v17;

  if (a2 < 4)
    return 0;
  v3 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == 4
    || a2 == 8
    || a2 == 9
    || (a2 & 0xFFFFFFFFFFFFFFFELL) == 0xA
    || v3 == 12
    || v3 == 16
    || a2 == 20
    || a2 == 21
    || a2 == 22
    || a2 == 23
    || a2 == 24
    || a2 == 25
    || a2 == 26)
  {
    return 0;
  }
  if ((unint64_t)a2 < 0x1C)
    return 0;
  if (*(_DWORD *)a1 != -1214009963)
    return 0;
  v5 = *(_DWORD *)(a1 + 4);
  v6 = *(_BYTE *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 9);
  v8 = *(_WORD *)(a1 + 10);
  v9 = *(_DWORD *)(a1 + 12);
  v10 = *(_DWORD *)(a1 + 16) & 0x7FFFFFFF;
  v11 = *(_BYTE *)(a1 + 20);
  v12 = *(unsigned __int8 *)(a1 + 21);
  v13 = *(unsigned __int8 *)(a1 + 22);
  v14 = *(_BYTE *)(a1 + 23);
  v15 = *(_BYTE *)(a1 + 24);
  v16 = *(_BYTE *)(a1 + 25);
  v17 = *(_BYTE *)(a1 + 26);
  result = a1 + 28;
  *(_DWORD *)a3 = 0;
  *(_BYTE *)(a3 + 4) = v6;
  *(_BYTE *)(a3 + 5) = v7;
  *(_WORD *)(a3 + 6) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 12) = v10;
  *(_DWORD *)(a3 + 16) = v13;
  *(_DWORD *)(a3 + 20) = v12;
  *(_BYTE *)(a3 + 24) = v11;
  *(_BYTE *)(a3 + 25) = v16;
  *(_BYTE *)(a3 + 26) = v17;
  *(_DWORD *)(a3 + 28) = v5;
  *(_BYTE *)(a3 + 32) = v14;
  *(_BYTE *)(a3 + 33) = v15;
  return result;
}

void sub_1885C3FC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPDPhotoSizeFilterValueWriteTo(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = result;
  v2 = *(_BYTE *)(result + 8);
  if ((v2 & 2) != 0)
  {
    result = PBDataWriterWriteUint32Field();
    v2 = *(_BYTE *)(v1 + 8);
  }
  if ((v2 & 1) != 0)
    return PBDataWriterWriteUint32Field();
  return result;
}

void sub_1885C42B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPDTimeRangeWriteTo(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = result;
  v2 = *(_BYTE *)(result + 8);
  if ((v2 & 2) != 0)
  {
    result = PBDataWriterWriteUint32Field();
    v2 = *(_BYTE *)(v1 + 8);
  }
  if ((v2 & 1) != 0)
    return PBDataWriterWriteUint32Field();
  return result;
}

void sub_1885C4710(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885C47D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885C4EA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885C4F64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885C5290(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885C5350(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void ___notifyListenersOfKeyChange_block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v20 = a2;
  v19 = a3;
  v7 = a4;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v8 = *(id *)(a1 + 32);
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v22;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v22 != v11)
          objc_enumerationMutation(v8);
        objc_msgSend(v7, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * v12), v19);
        v13 = (_QWORD *)objc_claimAutoreleasedReturnValue();
        if (-[_GEOConfigKeyHelper valueChanged](v13))
        {
          v14 = *(void **)(a1 + 40);
          objc_msgSend(v20, "objectForKeyedSubscript:", v13);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "addObjectsFromArray:", v15);

          objc_msgSend(v19, "objectForKeyedSubscript:", v13);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "compact");
          v17 = *(void **)(a1 + 40);
          objc_msgSend(v16, "allObjects");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "addObjectsFromArray:", v18);

        }
        ++v12;
      }
      while (v10 != v12);
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    }
    while (v10);
  }

}

void sub_1885C67DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885C6ECC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885C7614(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885C7914(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885C7AAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885C7F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table(v8);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::unordered_set<unsigned long long>::unordered_set(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_1885C7FD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1885C81F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__do_rehash<true>(a1, prime);
  }
}

uint64_t gcl::gpcc::GeometryDecoderBasic::decodeSlice(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unsigned int a5, uint64_t a6, int a7, _DWORD *a8)
{
  __int128 v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  _DWORD *v30;
  unint64_t v31;
  uint64_t result;
  uint64_t v33;

  *(_DWORD *)(a1 + 1712) = a5;
  *(_QWORD *)(a1 + 1720) = a4;
  *(_QWORD *)&v14 = 0xFFFF000000000000;
  *((_QWORD *)&v14 + 1) = 0xFFFF000000000000;
  *(_OWORD *)(a1 + 1736) = v14;
  *(_QWORD *)(a1 + 1752) = 16;
  if (!a5)
  {
    v15 = -16777216;
    goto LABEL_7;
  }
  v15 = *a4 << 24;
  *(_DWORD *)(a1 + 1744) = v15;
  if (a5 == 1)
  {
LABEL_7:
    v16 = v15 | 0xFF0000;
    goto LABEL_8;
  }
  v16 = v15 | (a4[1] << 16);
  *(_DWORD *)(a1 + 1744) = v16;
  if (a5 <= 2)
  {
LABEL_8:
    v17 = v16 | 0xFF00;
    goto LABEL_9;
  }
  v17 = v16 | (a4[2] << 8);
  *(_DWORD *)(a1 + 1744) = v17;
  if (a5 != 3)
  {
    v18 = a4[3];
    goto LABEL_10;
  }
LABEL_9:
  v18 = 255;
LABEL_10:
  *(_DWORD *)(a1 + 1744) = v18 | v17;
  *(_QWORD *)(a1 + 1728) = 3;
  memcpy((void *)(a1 + 1760), &gcl::ArithmeticDecoder::probUpdateLutInterleaved, 0x400uLL);
  gcl::gpcc::GeometryDecoderBasic::prepare(a1, a2, a3, a6, a7, *(_DWORD *)(a3 + 32));
  v19 = *(_QWORD *)(a1 + 48);
  v20 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 56) - v19) >> 2);
  if (*(_QWORD *)(a1 + 56) == v19)
  {
    std::vector<gcl::gpcc::GeometryDecoderBasic::TreeNode>::__append((char **)(a1 + 48), 1 - v20);
    v33 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)v33 = 0;
    *(_DWORD *)(v33 + 8) = 0;
    if (*(int *)(a1 + 76) < 2)
      goto LABEL_15;
    goto LABEL_14;
  }
  if (v20 >= 2)
    *(_QWORD *)(a1 + 56) = v19 + 12;
  *(_QWORD *)v19 = 0;
  *(_DWORD *)(v19 + 8) = 0;
  if (*(int *)(a1 + 76) >= 2)
  {
    do
    {
LABEL_14:
      gcl::gpcc::GeometryDecoderBasic::processLevel((gcl::gpcc::GeometryDecoderBasic *)a1);
      v21 = *(_DWORD *)(a1 + 76);
      *(_DWORD *)(a1 + 76) = v21 - 1;
    }
    while (v21 > 2);
  }
LABEL_15:
  *(_BYTE *)(a1 + 1688) = 1;
  v22 = *(_QWORD *)(a1 + 24);
  v23 = *(_QWORD *)(a1 + 32);
  v24 = *(_QWORD *)(a1 + 40);
  v25 = *(_DWORD **)(a1 + 48);
  *(_QWORD *)(a1 + 24) = v25;
  v26 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v22;
  *(_QWORD *)(a1 + 56) = v23;
  *(_OWORD *)(a1 + 32) = v26;
  *(_QWORD *)(a1 + 64) = v24;
  v27 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v22) >> 2);
  v28 = 0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 2);
  v29 = v27 >= v28;
  if (v27 <= v28)
  {
    v30 = (_DWORD *)v26;
    if (!v29)
      *(_QWORD *)(a1 + 56) = v22 + 12 * v27;
  }
  else
  {
    std::vector<gcl::gpcc::GeometryDecoderBasic::TreeNode>::__append((char **)(a1 + 48), v27 - v28);
    v25 = *(_DWORD **)(a1 + 24);
    v30 = *(_DWORD **)(a1 + 32);
  }
  if (v30 == v25)
  {
LABEL_23:
    result = *(unsigned int *)(a1 + 2784);
    if (!(_DWORD)result)
      *a8 = *(_DWORD *)(a3 + 32) - *(_DWORD *)a1;
  }
  else
  {
    v31 = 0xAAAAAAAAAAAAAAABLL * (v30 - v25);
    while (!gcl::gpcc::GeometryDecoderBasic::processLeafNode((int *)a1, v25))
    {
      v25 += 3;
      if (!--v31)
        goto LABEL_23;
    }
    *(_DWORD *)(a1 + 76) = 0;
    *(_DWORD *)(a1 + 2784) = 1;
    return 1;
  }
  return result;
}

BOOL gcl::gpcc::GeometryDecoderBasic::processLeafNode(int *a1, _DWORD *a2)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int *v27;
  int v28;
  int *v29;

  v4 = gcl::DualLutCoder<true>::decode((uint64_t)(a1 + 21), (unsigned int *)a1 + 428);
  v5 = 0;
  v6 = 1;
  while (((v4 >> v5) & 1) == 0)
  {
LABEL_2:
    v6 = v5++ < 7;
    if (v5 == 8)
      return v6;
  }
  if ((a1[18] & 1) == 0)
  {
    v7 = 0;
    goto LABEL_26;
  }
  v8 = a1[435];
  v9 = a1[436];
  if (v8 <= 0x40000000)
  {
    v10 = a1[438];
    while (1)
    {
      v9 *= 2;
      a1[438] = --v10;
      if (v10)
        goto LABEL_10;
      v13 = *((_QWORD *)a1 + 216);
      *((_QWORD *)a1 + 216) = v13 + 1;
      v14 = a1[428];
      if (v13 + 1 >= v14)
      {
        v15 = 65280;
        v16 = v13 + 2;
        *((_QWORD *)a1 + 216) = v16;
        if (v16 >= v14)
        {
LABEL_16:
          v11 = 255;
          goto LABEL_9;
        }
      }
      else
      {
        v15 = *(unsigned __int8 *)(*((_QWORD *)a1 + 215) + v13 + 1) << 8;
        v16 = v13 + 2;
        *((_QWORD *)a1 + 216) = v16;
        if (v16 >= v14)
          goto LABEL_16;
      }
      v11 = *(unsigned __int8 *)(*((_QWORD *)a1 + 215) + v16);
LABEL_9:
      v9 |= v15 | v11;
      v10 = 16;
      a1[438] = 16;
LABEL_10:
      v12 = 2 * v8;
      v21 = v8 >= 0x20000001;
      v8 *= 2;
      if (v21)
        goto LABEL_18;
    }
  }
  v12 = a1[435];
LABEL_18:
  v7 = 0;
  v17 = *((unsigned __int16 *)a1 + 40);
  v18 = (HIWORD(v12) * v17) & 0xFFFF0000;
  v19 = v12 - v18;
  if (v9 < v18)
    v20 = 0;
  else
    v20 = v18;
  a1[436] = v9 - v20;
  v21 = v9 >= v18;
  *((_WORD *)a1 + 40) = *((_WORD *)a1 + ((v17 >> 7) & 0x1FE | (v9 >= v18)) + 880) + v17;
  if (v9 < v18)
    v22 = v18;
  else
    v22 = v19;
  a1[435] = v22;
  if (!v21)
    v7 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)a1 + 428, 0, (_WORD *)a1 + 41) + 1;
LABEL_26:
  v23 = *a1;
  *a1 += ~v7;
  if ((int)(v23 + ~v7) >= 0)
  {
    v24 = (2 * *a2) | (v5 >> 2);
    v25 = (v5 >> 1) & 1 | (2 * a2[1]);
    v26 = a2[2];
    v27 = (int *)*((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = (char *)v27 + a1[4];
    v28 = v5 & 1 | (2 * v26);
    *v27 = v24;
    v27[1] = v25;
    for (v27[2] = v28; v7; --v7)
    {
      v29 = (int *)*((_QWORD *)a1 + 1);
      *((_QWORD *)a1 + 1) = (char *)v29 + a1[4];
      *v29 = v24;
      v29[1] = v25;
      v29[2] = v28;
    }
    goto LABEL_2;
  }
  return v6;
}

void gcl::gpcc::GeometryDecoderBasic::processLevel(gcl::gpcc::GeometryDecoderBasic *this)
{
  uint64_t v2;
  char **v3;
  int *v4;
  int *v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  char v16;
  unsigned int v17;
  int *v18;
  int *v19;
  unint64_t v20;
  unint64_t v21;

  v3 = (char **)((char *)this + 48);
  v2 = *((_QWORD *)this + 6);
  *((_BYTE *)this + 1688) = 1;
  v5 = (int *)*((_QWORD *)this + 3);
  v4 = (int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 3) = v2;
  v6 = *((_QWORD *)this + 5);
  v7 = *(_OWORD *)((char *)this + 56);
  *((_QWORD *)this + 6) = v5;
  *((_QWORD *)this + 7) = v4;
  *((_OWORD *)this + 2) = v7;
  *((_QWORD *)this + 8) = v6;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v5) >> 2);
  v9 = 0xAAAAAAAAAAAAAAABLL * (v4 - v5);
  v10 = v8 >= v9;
  if (v8 <= v9)
  {
    v11 = v7;
    if (!v10)
    {
      v4 = &v5[3 * v8];
      *((_QWORD *)this + 7) = v4;
    }
  }
  else
  {
    std::vector<gcl::gpcc::GeometryDecoderBasic::TreeNode>::__append((char **)this + 6, v8 - v9);
    v5 = (int *)*((_QWORD *)this + 6);
    v4 = (int *)*((_QWORD *)this + 7);
    v2 = *((_QWORD *)this + 3);
    v11 = *((_QWORD *)this + 4);
  }
  v12 = v11 - v2;
  if (v12)
  {
    v13 = (unint64_t)(v4 - 24);
    v14 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 2);
    v15 = (_DWORD *)(v2 + 8);
    while (1)
    {
      if ((unint64_t)v5 >= v13)
      {
        *((_DWORD *)this + 19) = 0;
        *((_DWORD *)this + 696) = 6;
        return;
      }
      v16 = gcl::DualLutCoder<true>::decode((uint64_t)v3 + 36, (unsigned int *)this + 428);
      if ((v16 & 1) != 0)
        break;
      v17 = 0;
      v18 = v5;
      if ((v16 & 2) != 0)
        goto LABEL_13;
LABEL_14:
      if ((v16 & 4) != 0)
      {
        ++v17;
        *v18 = 2 * *(v15 - 2);
        v18[1] = (2 * *(v15 - 1)) | 1;
        v18[2] = 2 * *v15;
        v18 += 3;
        if ((v16 & 8) == 0)
        {
LABEL_16:
          if ((v16 & 0x10) == 0)
            goto LABEL_17;
          goto LABEL_23;
        }
      }
      else if ((v16 & 8) == 0)
      {
        goto LABEL_16;
      }
      ++v17;
      *v18 = 2 * *(v15 - 2);
      v18[1] = (2 * *(v15 - 1)) | 1;
      v18[2] = (2 * *v15) | 1;
      v18 += 3;
      if ((v16 & 0x10) == 0)
      {
LABEL_17:
        if ((v16 & 0x20) == 0)
          goto LABEL_18;
        goto LABEL_24;
      }
LABEL_23:
      ++v17;
      *v18 = (2 * *(v15 - 2)) | 1;
      v18[1] = 2 * *(v15 - 1);
      v18[2] = 2 * *v15;
      v18 += 3;
      if ((v16 & 0x20) == 0)
      {
LABEL_18:
        if ((v16 & 0x40) == 0)
          goto LABEL_19;
        goto LABEL_25;
      }
LABEL_24:
      ++v17;
      *v18 = (2 * *(v15 - 2)) | 1;
      v18[1] = 2 * *(v15 - 1);
      v18[2] = (2 * *v15) | 1;
      v18 += 3;
      if ((v16 & 0x40) == 0)
      {
LABEL_19:
        if (v16 < 0)
          goto LABEL_26;
        goto LABEL_7;
      }
LABEL_25:
      ++v17;
      *v18 = (2 * *(v15 - 2)) | 1;
      v18[1] = (2 * *(v15 - 1)) | 1;
      v18[2] = 2 * *v15;
      v18 += 3;
      if (v16 < 0)
      {
LABEL_26:
        ++v17;
        *v18 = (2 * *(v15 - 2)) | 1;
        v18[1] = (2 * *(v15 - 1)) | 1;
        v18[2] = (2 * *v15) | 1;
      }
LABEL_7:
      v5 += 3 * v17;
      v15 += 3;
      if (!--v14)
      {
        v19 = (int *)*((_QWORD *)this + 6);
        v4 = (int *)*((_QWORD *)this + 7);
        goto LABEL_29;
      }
    }
    v18 = v5 + 3;
    *v5 = 2 * *(v15 - 2);
    v5[1] = 2 * *(v15 - 1);
    v5[2] = 2 * *v15;
    v17 = 1;
    if ((v16 & 2) == 0)
      goto LABEL_14;
LABEL_13:
    ++v17;
    *v18 = 2 * *(v15 - 2);
    v18[1] = 2 * *(v15 - 1);
    v18[2] = (2 * *v15) | 1;
    v18 += 3;
    goto LABEL_14;
  }
  v19 = v5;
LABEL_29:
  v20 = 0xAAAAAAAAAAAAAAABLL * (v5 - v19);
  v21 = 0xAAAAAAAAAAAAAAABLL * (v4 - v19);
  if (v20 <= v21)
  {
    if (v20 < v21)
      *((_QWORD *)this + 7) = &v19[v5 - v19];
  }
  else
  {
    std::vector<gcl::gpcc::GeometryDecoderBasic::TreeNode>::__append(v3, v20 - v21);
  }
}

uint64_t gcl::DualLutCoder<true>::decode(uint64_t a1, unsigned int *a2)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  unsigned int v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  _BOOL8 v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  _BOOL8 v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  _BOOL8 v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  int v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  unint64_t v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  int v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unsigned int v114;
  BOOL v115;
  unsigned int v116;
  unsigned int v117;
  int v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  BOOL v129;
  unsigned int v130;
  int v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  int v135;
  unsigned int v136;
  int v137;
  unsigned int v138;
  BOOL v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  unsigned int v147;
  int v148;
  unsigned int v149;
  int v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  _BOOL4 v159;
  unsigned int v160;
  int v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  int v165;
  unsigned int v166;
  int v167;
  int v168;
  unsigned int v169;
  int v170;
  BOOL v171;
  unsigned int v172;
  _BOOL4 v173;
  int v174;
  unsigned int v175;
  BOOL v176;
  unsigned int v177;
  unsigned int v178;
  int v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  int v183;
  unsigned int v184;
  int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  int v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  int v195;
  unsigned int v196;
  int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  int v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  int v205;
  unsigned int v206;
  int v207;
  unsigned int v208;
  int v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  int v213;
  unsigned int v214;
  int v215;
  unsigned int v216;
  int v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  int v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  int v225;
  unsigned int v226;
  int v227;
  unsigned int v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  int v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  int v237;
  unsigned int v238;
  int v239;
  unsigned int v240;
  int v241;
  unsigned int v242;
  unsigned int v243;
  int v244;
  uint64_t v245;
  int v246;
  uint32x4_t v247;
  uint32x4_t v248;
  uint32x4_t v249;
  uint32x4_t v250;
  uint32x4_t v251;
  uint32x4_t v252;
  uint32x4_t v253;
  uint32x4_t v254;
  uint32x4_t v255;
  uint32x4_t v256;
  uint32x4_t v257;
  uint32x4_t v258;
  uint32x4_t v259;
  uint32x4_t v260;
  uint32x4_t v261;
  uint32x4_t v262;
  uint32x4_t v263;
  uint32x4_t v264;
  uint32x4_t v265;
  uint32x4_t v266;
  uint32x4_t v267;
  uint32x4_t v268;
  uint32x4_t v269;
  uint32x4_t v270;
  uint32x4_t v271;
  uint32x4_t v272;
  uint32x4_t v273;
  uint32x4_t v274;
  uint32x4_t v275;
  uint32x4_t v276;
  uint32x4_t v277;
  uint32x4_t v278;
  int v279;
  uint64_t v280;
  unsigned int v281;
  int32x4_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  _OWORD *v286;
  unsigned int *v287;
  unsigned int *v288;
  unint64_t v289;
  unsigned int *v290;
  unsigned int *v291;
  unsigned int v292;
  unsigned int v293;
  unsigned int v294;
  int v295;
  unsigned int v296;
  unsigned int v297;
  unsigned int *v298;
  unsigned int *v299;
  unsigned int *v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int *v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int *v311;
  unsigned int v312;
  unsigned int *v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int *v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int *v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int *v330;
  unsigned int *v331;
  unsigned int *v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int v337;
  uint64_t v338;
  int16x8_t v339;
  int16x8_t v340;
  unsigned __int8 v341;
  unsigned __int8 v342;
  unsigned __int8 v343;
  unsigned __int8 v344;
  uint64_t v345;
  int16x8_t v346;
  int16x8_t v347;
  unsigned __int8 v348;
  unsigned __int8 v349;
  unsigned __int8 v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  int16x8_t v356;
  int16x8_t v357;
  unsigned __int8 v358;
  unsigned __int8 v359;
  unsigned __int8 v360;
  uint64_t v361;
  int16x8_t v362;
  int16x8_t v363;
  unsigned __int8 v364;
  unsigned __int8 v365;
  uint64_t v366;
  void *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  _OWORD v400[2];
  int16x8_t v401;
  int16x8_t v402;
  int16x8_t v403;
  int16x8_t v404;
  int16x8_t v405;
  int16x8_t v406;
  _BYTE v407[896];
  uint64_t v408;

  v408 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int16 *)(a1 + 1608);
  v4 = a2[7];
  v5 = a2[8];
  if (v4 < 0x40000001)
  {
    v6 = a2[10];
    v7 = *a2;
    v9 = *((_QWORD *)a2 + 1);
    v8 = *((_QWORD *)a2 + 2);
    while (1)
    {
      v5 *= 2;
      a2[10] = --v6;
      if (v6)
        goto LABEL_5;
      *((_QWORD *)a2 + 2) = v8 + 1;
      if (v8 + 1 >= v7)
      {
        v12 = 65280;
        v8 += 2;
        *((_QWORD *)a2 + 2) = v8;
        if (v8 >= v7)
        {
LABEL_11:
          v10 = 255;
          goto LABEL_4;
        }
      }
      else
      {
        v12 = *(unsigned __int8 *)(v9 + v8 + 1) << 8;
        v8 += 2;
        *((_QWORD *)a2 + 2) = v8;
        if (v8 >= v7)
          goto LABEL_11;
      }
      v10 = *(unsigned __int8 *)(v9 + v8);
LABEL_4:
      v5 |= v12 | v10;
      v6 = 16;
      a2[10] = 16;
LABEL_5:
      v11 = 2 * v4;
      v38 = v4 >= 0x20000001;
      v4 *= 2;
      if (v38)
        goto LABEL_13;
    }
  }
  v11 = a2[7];
LABEL_13:
  v13 = (HIWORD(v11) * v3) & 0xFFFF0000;
  v14 = v11 - v13;
  if (v5 < v13)
    v15 = 0;
  else
    v15 = (HIWORD(v11) * v3) & 0xFFFF0000;
  v16 = v5 - v15;
  *(_WORD *)(a1 + 1608) = *((_WORD *)a2 + ((v3 >> 7) & 0x1FE | (v5 >= v13)) + 24) + v3;
  if (v5 < v13)
    v17 = (HIWORD(v11) * v3) & 0xFFFF0000;
  else
    v17 = v11 - v13;
  a2[7] = v17;
  a2[8] = v16;
  if (v5 >= v13)
  {
    v18 = *(unsigned __int16 *)(a1 + 1614);
    if (v14 < 0x40000001)
    {
      v19 = a2[10];
      v20 = *a2;
      v22 = *((_QWORD *)a2 + 1);
      v21 = *((_QWORD *)a2 + 2);
      while (1)
      {
        v16 *= 2;
        a2[10] = --v19;
        if (v19)
          goto LABEL_24;
        *((_QWORD *)a2 + 2) = v21 + 1;
        if (v21 + 1 >= v20)
        {
          v25 = 65280;
          v21 += 2;
          *((_QWORD *)a2 + 2) = v21;
          if (v21 >= v20)
          {
LABEL_30:
            v23 = 255;
            goto LABEL_23;
          }
        }
        else
        {
          v25 = *(unsigned __int8 *)(v22 + v21 + 1) << 8;
          v21 += 2;
          *((_QWORD *)a2 + 2) = v21;
          if (v21 >= v20)
            goto LABEL_30;
        }
        v23 = *(unsigned __int8 *)(v22 + v21);
LABEL_23:
        v16 |= v25 | v23;
        v19 = 16;
        a2[10] = 16;
LABEL_24:
        v24 = 2 * v14;
        v38 = v14 >= 0x20000001;
        v14 *= 2;
        if (v38)
          goto LABEL_43;
      }
    }
    v24 = v14;
LABEL_43:
    v34 = (HIWORD(v24) * v18) & 0xFFFF0000;
    v35 = v24 - v34;
    if (v16 < v34)
      v36 = 0;
    else
      v36 = (HIWORD(v24) * v18) & 0xFFFF0000;
    v37 = v16 - v36;
    v38 = v16 >= v34;
    *(_WORD *)(a1 + 1614) = *((_WORD *)a2 + ((v18 >> 7) & 0x1FE | (v16 >= v34)) + 24) + v18;
    if (v16 < v34)
      v39 = (HIWORD(v24) * v18) & 0xFFFF0000;
    else
      v39 = v24 - v34;
    a2[7] = v39;
    a2[8] = v37;
    if (!v38)
    {
      v93 = *(unsigned __int16 *)(a1 + 1616);
      if (v34 < 0x40000001)
      {
        v94 = a2[10];
        v95 = *a2;
        v97 = *((_QWORD *)a2 + 1);
        v96 = *((_QWORD *)a2 + 2);
        while (1)
        {
          v37 *= 2;
          a2[10] = --v94;
          if (v94)
            goto LABEL_134;
          *((_QWORD *)a2 + 2) = v96 + 1;
          if (v96 + 1 >= v95)
          {
            v100 = 65280;
            v96 += 2;
            *((_QWORD *)a2 + 2) = v96;
            if (v96 >= v95)
            {
LABEL_140:
              v98 = 255;
              goto LABEL_133;
            }
          }
          else
          {
            v100 = *(unsigned __int8 *)(v97 + v96 + 1) << 8;
            v96 += 2;
            *((_QWORD *)a2 + 2) = v96;
            if (v96 >= v95)
              goto LABEL_140;
          }
          v98 = *(unsigned __int8 *)(v97 + v96);
LABEL_133:
          v37 |= v100 | v98;
          v94 = 16;
          a2[10] = 16;
LABEL_134:
          v99 = 2 * v34;
          v38 = v34 >= 0x20000001;
          v34 *= 2;
          if (v38)
            goto LABEL_175;
        }
      }
      v99 = (HIWORD(v24) * v18) & 0xFFFF0000;
LABEL_175:
      v125 = (HIWORD(v99) * v93) & 0xFFFF0000;
      v126 = v99 - v125;
      if (v37 < v125)
        v127 = 0;
      else
        v127 = (HIWORD(v99) * v93) & 0xFFFF0000;
      v128 = v37 - v127;
      v129 = v37 >= v125;
      *(_WORD *)(a1 + 1616) = *((_WORD *)a2 + ((v93 >> 7) & 0x1FE | (v37 >= v125)) + 24) + v93;
      if (v37 < v125)
        v130 = (HIWORD(v99) * v93) & 0xFFFF0000;
      else
        v130 = v99 - v125;
      a2[7] = v130;
      a2[8] = v128;
      if (!v129)
      {
        v149 = *(unsigned __int16 *)(a1 + 1618);
        if (v125 < 0x40000001)
        {
          v150 = a2[10];
          v151 = *a2;
          v153 = *((_QWORD *)a2 + 1);
          v152 = *((_QWORD *)a2 + 2);
          while (1)
          {
            v128 *= 2;
            a2[10] = --v150;
            if (v150)
              goto LABEL_212;
            *((_QWORD *)a2 + 2) = v152 + 1;
            if (v152 + 1 >= v151)
            {
              v156 = 65280;
              v152 += 2;
              *((_QWORD *)a2 + 2) = v152;
              if (v152 >= v151)
              {
LABEL_218:
                v154 = 255;
                goto LABEL_211;
              }
            }
            else
            {
              v156 = *(unsigned __int8 *)(v153 + v152 + 1) << 8;
              v152 += 2;
              *((_QWORD *)a2 + 2) = v152;
              if (v152 >= v151)
                goto LABEL_218;
            }
            v154 = *(unsigned __int8 *)(v153 + v152);
LABEL_211:
            v128 |= v156 | v154;
            v150 = 16;
            a2[10] = 16;
LABEL_212:
            v155 = 2 * v125;
            v38 = v125 >= 0x20000001;
            v125 *= 2;
            if (v38)
              goto LABEL_259;
          }
        }
        v155 = (HIWORD(v99) * v93) & 0xFFFF0000;
LABEL_259:
        v186 = (HIWORD(v155) * v149) & 0xFFFF0000;
        v187 = v155 - v186;
        if (v128 < v186)
          v188 = 0;
        else
          v188 = (HIWORD(v155) * v149) & 0xFFFF0000;
        v189 = v128 - v188;
        *(_WORD *)(a1 + 1618) = *((_WORD *)a2 + ((v149 >> 7) & 0x1FE | (v128 >= v186)) + 24) + v149;
        if (v128 < v186)
          v190 = (HIWORD(v155) * v149) & 0xFFFF0000;
        else
          v190 = v155 - v186;
        a2[7] = v190;
        a2[8] = v189;
        if (v128 >= v186)
        {
          if (v187 < 0x40000001)
          {
            v191 = a2[10];
            v192 = *a2;
            v194 = *((_QWORD *)a2 + 1);
            v193 = *((_QWORD *)a2 + 2);
            while (1)
            {
              v189 *= 2;
              a2[10] = --v191;
              if (v191)
                goto LABEL_270;
              *((_QWORD *)a2 + 2) = v193 + 1;
              if (v193 + 1 >= v192)
              {
                v197 = 65280;
                v193 += 2;
                *((_QWORD *)a2 + 2) = v193;
                if (v193 >= v192)
                {
LABEL_276:
                  v195 = 255;
                  goto LABEL_269;
                }
              }
              else
              {
                v197 = *(unsigned __int8 *)(v194 + v193 + 1) << 8;
                v193 += 2;
                *((_QWORD *)a2 + 2) = v193;
                if (v193 >= v192)
                  goto LABEL_276;
              }
              v195 = *(unsigned __int8 *)(v194 + v193);
LABEL_269:
              v189 |= v197 | v195;
              v191 = 16;
              a2[10] = 16;
LABEL_270:
              v196 = 2 * v187;
              v38 = v187 >= 0x20000001;
              v187 *= 2;
              if (v38)
                goto LABEL_308;
            }
          }
          v196 = v155 - v186;
LABEL_308:
          v218 = (v196 >> 1) & 0x7FFF0000;
          v219 = v196 - v218;
          v159 = v189 >= v218;
          if (v189 < v218)
          {
            v219 = (v196 >> 1) & 0x7FFF0000;
            v218 = 0;
          }
          v220 = v189 - v218;
          a2[7] = v219;
          a2[8] = v220;
          if (v219 < 0x40000001)
          {
            v221 = a2[10];
            v222 = *a2;
            v224 = *((_QWORD *)a2 + 1);
            v223 = *((_QWORD *)a2 + 2);
            while (1)
            {
              v220 *= 2;
              a2[10] = --v221;
              if (v221)
                goto LABEL_314;
              *((_QWORD *)a2 + 2) = v223 + 1;
              if (v223 + 1 >= v222)
              {
                v227 = 65280;
                v223 += 2;
                *((_QWORD *)a2 + 2) = v223;
                if (v223 >= v222)
                {
LABEL_320:
                  v225 = 255;
                  goto LABEL_313;
                }
              }
              else
              {
                v227 = *(unsigned __int8 *)(v224 + v223 + 1) << 8;
                v223 += 2;
                *((_QWORD *)a2 + 2) = v223;
                if (v223 >= v222)
                  goto LABEL_320;
              }
              v225 = *(unsigned __int8 *)(v224 + v223);
LABEL_313:
              v220 |= v227 | v225;
              v221 = 16;
              a2[10] = 16;
LABEL_314:
              v226 = 2 * v219;
              v38 = v219 >= 0x20000001;
              v219 *= 2;
              if (v38)
                goto LABEL_340;
            }
          }
          v226 = v219;
LABEL_340:
          v174 = 0;
          v240 = (v226 >> 1) & 0x7FFF0000;
          v241 = v226 - v240;
          v173 = v220 >= v240;
          if (v220 < v240)
          {
            v241 = (v226 >> 1) & 0x7FFF0000;
            v240 = 0;
          }
          a2[7] = v241;
          a2[8] = v220 - v240;
LABEL_343:
          v168 = 4;
LABEL_348:
          if (v159)
            v244 = 2;
          else
            v244 = 0;
          v78 = *(unsigned __int8 *)(a1 + (v244 | v174 | v168 | v173) + 1572);
          LOBYTE(v102) = v78;
          goto LABEL_352;
        }
        v208 = *(unsigned __int16 *)(a1 + 1620);
        if (v186 < 0x40000001)
        {
          v209 = a2[10];
          v210 = *a2;
          v212 = *((_QWORD *)a2 + 1);
          v211 = *((_QWORD *)a2 + 2);
          while (1)
          {
            v189 *= 2;
            a2[10] = --v209;
            if (v209)
              goto LABEL_295;
            *((_QWORD *)a2 + 2) = v211 + 1;
            if (v211 + 1 >= v210)
            {
              v215 = 65280;
              v211 += 2;
              *((_QWORD *)a2 + 2) = v211;
              if (v211 >= v210)
              {
LABEL_301:
                v213 = 255;
                goto LABEL_294;
              }
            }
            else
            {
              v215 = *(unsigned __int8 *)(v212 + v211 + 1) << 8;
              v211 += 2;
              *((_QWORD *)a2 + 2) = v211;
              if (v211 >= v210)
                goto LABEL_301;
            }
            v213 = *(unsigned __int8 *)(v212 + v211);
LABEL_294:
            v189 |= v215 | v213;
            v209 = 16;
            a2[10] = 16;
LABEL_295:
            v214 = 2 * v186;
            v38 = v186 >= 0x20000001;
            v186 *= 2;
            if (v38)
              goto LABEL_322;
          }
        }
        v214 = v186;
LABEL_322:
        v228 = (HIWORD(v214) * v208) & 0xFFFF0000;
        v159 = v189 >= v228;
        *(_WORD *)(a1 + 1620) = *((_WORD *)a2 + ((v208 >> 7) & 0x1FE | v159) + 24) + v208;
        if (v189 < v228)
          v229 = (HIWORD(v214) * v208) & 0xFFFF0000;
        else
          v229 = v214 - v228;
        if (v189 < v228)
          v230 = 0;
        else
          v230 = (HIWORD(v214) * v208) & 0xFFFF0000;
        v231 = v189 - v230;
        a2[7] = v229;
        a2[8] = v231;
        v232 = *(unsigned __int16 *)(a1 + 1622);
        if (v229 >= 0x40000001)
        {
          v238 = v229;
LABEL_345:
          v174 = 0;
          v168 = 0;
          v242 = (HIWORD(v238) * v232) & 0xFFFF0000;
          v173 = v231 >= v242;
          *(_WORD *)(a1 + 1622) = *((_WORD *)a2 + ((v232 >> 7) & 0x1FE | v173) + 24) + v232;
          v243 = v238 - v242;
          if (v231 < v242)
          {
            v243 = v242;
            v242 = 0;
          }
          a2[7] = v243;
          a2[8] = v231 - v242;
          goto LABEL_348;
        }
        v233 = a2[10];
        v234 = *a2;
        v236 = *((_QWORD *)a2 + 1);
        v235 = *((_QWORD *)a2 + 2);
        while (1)
        {
          v231 *= 2;
          a2[10] = --v233;
          if (v233)
            goto LABEL_332;
          *((_QWORD *)a2 + 2) = v235 + 1;
          if (v235 + 1 >= v234)
          {
            v239 = 65280;
            v235 += 2;
            *((_QWORD *)a2 + 2) = v235;
            if (v235 >= v234)
            {
LABEL_338:
              v237 = 255;
              goto LABEL_331;
            }
          }
          else
          {
            v239 = *(unsigned __int8 *)(v236 + v235 + 1) << 8;
            v235 += 2;
            *((_QWORD *)a2 + 2) = v235;
            if (v235 >= v234)
              goto LABEL_338;
          }
          v237 = *(unsigned __int8 *)(v236 + v235);
LABEL_331:
          v231 |= v239 | v237;
          v233 = 16;
          a2[10] = 16;
LABEL_332:
          v238 = 2 * v229;
          v38 = v229 >= 0x20000001;
          v229 *= 2;
          if (v38)
            goto LABEL_345;
        }
      }
      if (v126 < 0x40000001)
      {
        v131 = a2[10];
        v132 = *a2;
        v134 = *((_QWORD *)a2 + 1);
        v133 = *((_QWORD *)a2 + 2);
        while (1)
        {
          v128 *= 2;
          a2[10] = --v131;
          if (v131)
            goto LABEL_187;
          *((_QWORD *)a2 + 2) = v133 + 1;
          if (v133 + 1 >= v132)
          {
            v137 = 65280;
            v133 += 2;
            *((_QWORD *)a2 + 2) = v133;
            if (v133 >= v132)
            {
LABEL_193:
              v135 = 255;
              goto LABEL_186;
            }
          }
          else
          {
            v137 = *(unsigned __int8 *)(v134 + v133 + 1) << 8;
            v133 += 2;
            *((_QWORD *)a2 + 2) = v133;
            if (v133 >= v132)
              goto LABEL_193;
          }
          v135 = *(unsigned __int8 *)(v134 + v133);
LABEL_186:
          v128 |= v137 | v135;
          v131 = 16;
          a2[10] = 16;
LABEL_187:
          v136 = 2 * v126;
          v38 = v126 >= 0x20000001;
          v126 *= 2;
          if (v38)
            goto LABEL_245;
        }
      }
      v136 = v99 - v125;
LABEL_245:
      v175 = (v136 >> 1) & 0x7FFF0000;
      v176 = v128 >= v175;
      v177 = v136 - v175;
      if (v128 < v175)
      {
        v177 = (v136 >> 1) & 0x7FFF0000;
        v175 = 0;
      }
      v178 = v128 - v175;
      a2[7] = v177;
      a2[8] = v178;
      if (v177 < 0x40000001)
      {
        v179 = a2[10];
        v180 = *a2;
        v182 = *((_QWORD *)a2 + 1);
        v181 = *((_QWORD *)a2 + 2);
        while (1)
        {
          v178 *= 2;
          a2[10] = --v179;
          if (v179)
            goto LABEL_251;
          *((_QWORD *)a2 + 2) = v181 + 1;
          if (v181 + 1 >= v180)
          {
            v185 = 65280;
            v181 += 2;
            *((_QWORD *)a2 + 2) = v181;
            if (v181 >= v180)
            {
LABEL_257:
              v183 = 255;
              goto LABEL_250;
            }
          }
          else
          {
            v185 = *(unsigned __int8 *)(v182 + v181 + 1) << 8;
            v181 += 2;
            *((_QWORD *)a2 + 2) = v181;
            if (v181 >= v180)
              goto LABEL_257;
          }
          v183 = *(unsigned __int8 *)(v182 + v181);
LABEL_250:
          v178 |= v185 | v183;
          v179 = 16;
          a2[10] = 16;
LABEL_251:
          v184 = 2 * v177;
          v38 = v177 >= 0x20000001;
          v177 *= 2;
          if (v38)
            goto LABEL_278;
        }
      }
      v184 = v177;
LABEL_278:
      v198 = (v184 >> 1) & 0x7FFF0000;
      v199 = v184 - v198;
      v159 = v178 >= v198;
      if (v178 < v198)
      {
        v199 = (v184 >> 1) & 0x7FFF0000;
        v198 = 0;
      }
      v200 = v178 - v198;
      a2[7] = v199;
      a2[8] = v200;
      if (v199 >= 0x40000001)
      {
        v206 = v199;
LABEL_303:
        v168 = 0;
        v216 = (v206 >> 1) & 0x7FFF0000;
        v217 = v206 - v216;
        v173 = v200 >= v216;
        if (v200 < v216)
        {
          v217 = (v206 >> 1) & 0x7FFF0000;
          v216 = 0;
        }
        a2[7] = v217;
        a2[8] = v200 - v216;
        v174 = 8;
        if (!v176)
          goto LABEL_348;
        goto LABEL_343;
      }
      v201 = a2[10];
      v202 = *a2;
      v204 = *((_QWORD *)a2 + 1);
      v203 = *((_QWORD *)a2 + 2);
      while (1)
      {
        v200 *= 2;
        a2[10] = --v201;
        if (v201)
          goto LABEL_284;
        *((_QWORD *)a2 + 2) = v203 + 1;
        if (v203 + 1 >= v202)
        {
          v207 = 65280;
          v203 += 2;
          *((_QWORD *)a2 + 2) = v203;
          if (v203 >= v202)
          {
LABEL_290:
            v205 = 255;
            goto LABEL_283;
          }
        }
        else
        {
          v207 = *(unsigned __int8 *)(v204 + v203 + 1) << 8;
          v203 += 2;
          *((_QWORD *)a2 + 2) = v203;
          if (v203 >= v202)
            goto LABEL_290;
        }
        v205 = *(unsigned __int8 *)(v204 + v203);
LABEL_283:
        v200 |= v207 | v205;
        v201 = 16;
        a2[10] = 16;
LABEL_284:
        v206 = 2 * v199;
        v38 = v199 >= 0x20000001;
        v199 *= 2;
        if (v38)
          goto LABEL_303;
      }
    }
    if (v35 < 0x40000001)
    {
      v40 = a2[10];
      v41 = *a2;
      v43 = *((_QWORD *)a2 + 1);
      v42 = *((_QWORD *)a2 + 2);
      while (1)
      {
        v37 *= 2;
        a2[10] = --v40;
        if (v40)
          goto LABEL_55;
        *((_QWORD *)a2 + 2) = v42 + 1;
        if (v42 + 1 >= v41)
        {
          v46 = 65280;
          v42 += 2;
          *((_QWORD *)a2 + 2) = v42;
          if (v42 >= v41)
          {
LABEL_61:
            v44 = 255;
            goto LABEL_54;
          }
        }
        else
        {
          v46 = *(unsigned __int8 *)(v43 + v42 + 1) << 8;
          v42 += 2;
          *((_QWORD *)a2 + 2) = v42;
          if (v42 >= v41)
            goto LABEL_61;
        }
        v44 = *(unsigned __int8 *)(v43 + v42);
LABEL_54:
        v37 |= v46 | v44;
        v40 = 16;
        a2[10] = 16;
LABEL_55:
        v45 = 2 * v35;
        v38 = v35 >= 0x20000001;
        v35 *= 2;
        if (v38)
          goto LABEL_161;
      }
    }
    v45 = v24 - v34;
LABEL_161:
    v114 = (v45 >> 1) & 0x7FFF0000;
    v115 = v37 >= v114;
    v116 = v45 - v114;
    if (v37 < v114)
    {
      v116 = (v45 >> 1) & 0x7FFF0000;
      v114 = 0;
    }
    v117 = v37 - v114;
    a2[7] = v116;
    a2[8] = v117;
    if (v116 < 0x40000001)
    {
      v118 = a2[10];
      v119 = *a2;
      v121 = *((_QWORD *)a2 + 1);
      v120 = *((_QWORD *)a2 + 2);
      while (1)
      {
        v117 *= 2;
        a2[10] = --v118;
        if (v118)
          goto LABEL_167;
        *((_QWORD *)a2 + 2) = v120 + 1;
        if (v120 + 1 >= v119)
        {
          v124 = 65280;
          v120 += 2;
          *((_QWORD *)a2 + 2) = v120;
          if (v120 >= v119)
          {
LABEL_173:
            v122 = 255;
            goto LABEL_166;
          }
        }
        else
        {
          v124 = *(unsigned __int8 *)(v121 + v120 + 1) << 8;
          v120 += 2;
          *((_QWORD *)a2 + 2) = v120;
          if (v120 >= v119)
            goto LABEL_173;
        }
        v122 = *(unsigned __int8 *)(v121 + v120);
LABEL_166:
        v117 |= v124 | v122;
        v118 = 16;
        a2[10] = 16;
LABEL_167:
        v123 = 2 * v116;
        v38 = v116 >= 0x20000001;
        v116 *= 2;
        if (v38)
          goto LABEL_195;
      }
    }
    v123 = v116;
LABEL_195:
    v138 = (v123 >> 1) & 0x7FFF0000;
    v139 = v117 >= v138;
    v140 = v123 - v138;
    if (v117 < v138)
    {
      v140 = (v123 >> 1) & 0x7FFF0000;
      v138 = 0;
    }
    v141 = v117 - v138;
    a2[7] = v140;
    a2[8] = v141;
    if (v140 < 0x40000001)
    {
      v142 = a2[10];
      v143 = *a2;
      v145 = *((_QWORD *)a2 + 1);
      v144 = *((_QWORD *)a2 + 2);
      while (1)
      {
        v141 *= 2;
        a2[10] = --v142;
        if (v142)
          goto LABEL_201;
        *((_QWORD *)a2 + 2) = v144 + 1;
        if (v144 + 1 >= v143)
        {
          v148 = 65280;
          v144 += 2;
          *((_QWORD *)a2 + 2) = v144;
          if (v144 >= v143)
          {
LABEL_207:
            v146 = 255;
            goto LABEL_200;
          }
        }
        else
        {
          v148 = *(unsigned __int8 *)(v145 + v144 + 1) << 8;
          v144 += 2;
          *((_QWORD *)a2 + 2) = v144;
          if (v144 >= v143)
            goto LABEL_207;
        }
        v146 = *(unsigned __int8 *)(v145 + v144);
LABEL_200:
        v141 |= v148 | v146;
        v142 = 16;
        a2[10] = 16;
LABEL_201:
        v147 = 2 * v140;
        v38 = v140 >= 0x20000001;
        v140 *= 2;
        if (v38)
          goto LABEL_220;
      }
    }
    v147 = v140;
LABEL_220:
    v157 = (v147 >> 1) & 0x7FFF0000;
    v158 = v147 - v157;
    v159 = v141 >= v157;
    if (v141 < v157)
    {
      v158 = (v147 >> 1) & 0x7FFF0000;
      v157 = 0;
    }
    v160 = v141 - v157;
    a2[7] = v158;
    a2[8] = v160;
    if (v158 >= 0x40000001)
    {
      v166 = v158;
LABEL_234:
      v168 = 0;
      v169 = (v166 >> 1) & 0x7FFF0000;
      v170 = v166 - v169;
      v171 = v160 >= v169;
      if (v160 < v169)
      {
        v170 = (v166 >> 1) & 0x7FFF0000;
        v169 = 0;
      }
      v172 = v160 - v169;
      v173 = v171;
      a2[7] = v170;
      a2[8] = v172;
      if (v115)
        v174 = 24;
      else
        v174 = 16;
      if (!v139)
        goto LABEL_348;
      goto LABEL_343;
    }
    v161 = a2[10];
    v162 = *a2;
    v164 = *((_QWORD *)a2 + 1);
    v163 = *((_QWORD *)a2 + 2);
    while (1)
    {
      v160 *= 2;
      a2[10] = --v161;
      if (v161)
        goto LABEL_226;
      *((_QWORD *)a2 + 2) = v163 + 1;
      if (v163 + 1 >= v162)
      {
        v167 = 65280;
        v163 += 2;
        *((_QWORD *)a2 + 2) = v163;
        if (v163 >= v162)
        {
LABEL_232:
          v165 = 255;
          goto LABEL_225;
        }
      }
      else
      {
        v167 = *(unsigned __int8 *)(v164 + v163 + 1) << 8;
        v163 += 2;
        *((_QWORD *)a2 + 2) = v163;
        if (v163 >= v162)
          goto LABEL_232;
      }
      v165 = *(unsigned __int8 *)(v164 + v163);
LABEL_225:
      v160 |= v167 | v165;
      v161 = 16;
      a2[10] = 16;
LABEL_226:
      v166 = 2 * v158;
      v38 = v158 >= 0x20000001;
      v158 *= 2;
      if (v38)
        goto LABEL_234;
    }
  }
  v26 = *(unsigned __int16 *)(a1 + 1610);
  if (v13 < 0x40000001)
  {
    v27 = a2[10];
    v28 = *a2;
    v30 = *((_QWORD *)a2 + 1);
    v29 = *((_QWORD *)a2 + 2);
    while (1)
    {
      v16 *= 2;
      a2[10] = --v27;
      if (v27)
        goto LABEL_35;
      *((_QWORD *)a2 + 2) = v29 + 1;
      if (v29 + 1 >= v28)
      {
        v33 = 65280;
        v29 += 2;
        *((_QWORD *)a2 + 2) = v29;
        if (v29 >= v28)
        {
LABEL_41:
          v31 = 255;
          goto LABEL_34;
        }
      }
      else
      {
        v33 = *(unsigned __int8 *)(v30 + v29 + 1) << 8;
        v29 += 2;
        *((_QWORD *)a2 + 2) = v29;
        if (v29 >= v28)
          goto LABEL_41;
      }
      v31 = *(unsigned __int8 *)(v30 + v29);
LABEL_34:
      v16 |= v33 | v31;
      v27 = 16;
      a2[10] = 16;
LABEL_35:
      v32 = 2 * v13;
      v38 = v13 >= 0x20000001;
      v13 *= 2;
      if (v38)
        goto LABEL_63;
    }
  }
  v32 = v13;
LABEL_63:
  v47 = (HIWORD(v32) * v26) & 0xFFFF0000;
  v48 = v32 - v47;
  if (v16 < v47)
    v49 = 0;
  else
    v49 = (HIWORD(v32) * v26) & 0xFFFF0000;
  v50 = v16 - v49;
  *(_WORD *)(a1 + 1610) = *((_WORD *)a2 + ((v26 >> 7) & 0x1FE | (v16 >= v47)) + 24) + v26;
  if (v16 < v47)
    v51 = (HIWORD(v32) * v26) & 0xFFFF0000;
  else
    v51 = v32 - v47;
  a2[7] = v51;
  a2[8] = v50;
  if (v16 < v47)
  {
    v101 = 0;
    v102 = 0;
    v103 = a2[10];
    v104 = *((_QWORD *)a2 + 2);
    v105 = *(unsigned __int16 *)(a1 + 1612);
    while (v47 >= 0x40000001)
    {
      v106 = v47;
LABEL_142:
      v107 = (HIWORD(v106) * (unsigned __int16)v105) & 0xFFFF0000;
      v108 = v106 - v107;
      v109 = v50 >= v107;
      v105 += *((unsigned __int16 *)a2 + ((v105 >> 7) & 0x1FE | v109) + 24);
      *(_WORD *)(a1 + 1612) = v105;
      if (v50 < v107)
        v47 = v107;
      else
        v47 = v108;
      if (v50 < v107)
        v107 = 0;
      v50 -= v107;
      a2[7] = v47;
      a2[8] = v50;
      v102 |= v109 << v101++;
      if (v101 == 8)
        goto LABEL_92;
    }
    v110 = *a2;
    v111 = *((_QWORD *)a2 + 1);
    while (1)
    {
      v50 *= 2;
      a2[10] = --v103;
      if (v103)
        goto LABEL_152;
      *((_QWORD *)a2 + 2) = v104 + 1;
      if (v104 + 1 >= v110)
      {
        v113 = 65280;
        v104 += 2;
        *((_QWORD *)a2 + 2) = v104;
        if (v104 >= v110)
        {
LABEL_158:
          v112 = 255;
          goto LABEL_151;
        }
      }
      else
      {
        v113 = *(unsigned __int8 *)(v111 + v104 + 1) << 8;
        v104 += 2;
        *((_QWORD *)a2 + 2) = v104;
        if (v104 >= v110)
          goto LABEL_158;
      }
      v112 = *(unsigned __int8 *)(v111 + v104);
LABEL_151:
      v50 |= v113 | v112;
      v103 = 16;
      a2[10] = 16;
LABEL_152:
      v106 = 2 * v47;
      v38 = v47 >= 0x20000001;
      v47 *= 2;
      if (v38)
        goto LABEL_142;
    }
  }
  v52 = *a2;
  v53 = a2[10];
  v54 = *((_QWORD *)a2 + 1);
  v55 = *((_QWORD *)a2 + 2);
  if (v48 < 0x40000001)
  {
    while (1)
    {
      v50 *= 2;
      a2[10] = --v53;
      if (v53)
        goto LABEL_96;
      *((_QWORD *)a2 + 2) = v55 + 1;
      if (v55 + 1 >= v52)
      {
        v86 = 65280;
        v55 += 2;
        *((_QWORD *)a2 + 2) = v55;
        if (v55 >= v52)
        {
LABEL_102:
          v85 = 255;
          goto LABEL_95;
        }
      }
      else
      {
        v86 = *(unsigned __int8 *)(v54 + v55 + 1) << 8;
        v55 += 2;
        *((_QWORD *)a2 + 2) = v55;
        if (v55 >= v52)
          goto LABEL_102;
      }
      v85 = *(unsigned __int8 *)(v54 + v55);
LABEL_95:
      v50 |= v86 | v85;
      v53 = 16;
      a2[10] = 16;
LABEL_96:
      v56 = 2 * v48;
      v38 = v48 >= 0x20000001;
      v48 *= 2;
      if (v38)
        goto LABEL_73;
    }
  }
  v56 = v48;
LABEL_73:
  v57 = (v56 >> 1) & 0x7FFF0000;
  v58 = v56 - v57;
  v59 = v50 >= v57;
  if (v50 < v57)
  {
    v58 = v57;
    v57 = 0;
  }
  v60 = v50 - v57;
  a2[7] = v58;
  a2[8] = v60;
  if (v58 < 0x40000001)
  {
    while (1)
    {
      v60 *= 2;
      a2[10] = --v53;
      if (v53)
        goto LABEL_105;
      *((_QWORD *)a2 + 2) = v55 + 1;
      if (v55 + 1 >= v52)
      {
        v88 = 65280;
        v55 += 2;
        *((_QWORD *)a2 + 2) = v55;
        if (v55 >= v52)
        {
LABEL_111:
          v87 = 255;
          goto LABEL_104;
        }
      }
      else
      {
        v88 = *(unsigned __int8 *)(v54 + v55 + 1) << 8;
        v55 += 2;
        *((_QWORD *)a2 + 2) = v55;
        if (v55 >= v52)
          goto LABEL_111;
      }
      v87 = *(unsigned __int8 *)(v54 + v55);
LABEL_104:
      v60 |= v88 | v87;
      v53 = 16;
      a2[10] = 16;
LABEL_105:
      v61 = 2 * v58;
      v38 = v58 >= 0x20000001;
      v58 *= 2;
      if (v38)
        goto LABEL_77;
    }
  }
  v61 = v58;
LABEL_77:
  v62 = (v61 >> 1) & 0x7FFF0000;
  v63 = v61 - v62;
  v64 = v60 >= v62;
  if (v60 < v62)
  {
    v63 = v62;
    v62 = 0;
  }
  v65 = v60 - v62;
  a2[7] = v63;
  a2[8] = v65;
  v66 = v59 || 2 * v64;
  if (v63 < 0x40000001)
  {
    while (1)
    {
      v65 *= 2;
      a2[10] = --v53;
      if (v53)
        goto LABEL_114;
      *((_QWORD *)a2 + 2) = v55 + 1;
      if (v55 + 1 >= v52)
      {
        v90 = 65280;
        v55 += 2;
        *((_QWORD *)a2 + 2) = v55;
        if (v55 >= v52)
        {
LABEL_120:
          v89 = 255;
          goto LABEL_113;
        }
      }
      else
      {
        v90 = *(unsigned __int8 *)(v54 + v55 + 1) << 8;
        v55 += 2;
        *((_QWORD *)a2 + 2) = v55;
        if (v55 >= v52)
          goto LABEL_120;
      }
      v89 = *(unsigned __int8 *)(v54 + v55);
LABEL_113:
      v65 |= v90 | v89;
      v53 = 16;
      a2[10] = 16;
LABEL_114:
      v67 = 2 * v63;
      v38 = v63 >= 0x20000001;
      v63 *= 2;
      if (v38)
        goto LABEL_81;
    }
  }
  v67 = v63;
LABEL_81:
  v68 = (v67 >> 1) & 0x7FFF0000;
  v69 = v67 - v68;
  if (v65 >= v68)
    v70 = v69;
  else
    v70 = v68;
  if (v65 >= v68)
    v71 = v68;
  else
    v71 = 0;
  v72 = v65 - v71;
  a2[7] = v70;
  a2[8] = v72;
  v73 = v66 | (4 * (v65 >= v68));
  if (v70 < 0x40000001)
  {
    while (1)
    {
      v72 *= 2;
      a2[10] = --v53;
      if (v53)
        goto LABEL_123;
      *((_QWORD *)a2 + 2) = v55 + 1;
      if (v55 + 1 >= v52)
      {
        v92 = 65280;
        v55 += 2;
        *((_QWORD *)a2 + 2) = v55;
        if (v55 >= v52)
        {
LABEL_129:
          v91 = 255;
          goto LABEL_122;
        }
      }
      else
      {
        v92 = *(unsigned __int8 *)(v54 + v55 + 1) << 8;
        v55 += 2;
        *((_QWORD *)a2 + 2) = v55;
        if (v55 >= v52)
          goto LABEL_129;
      }
      v91 = *(unsigned __int8 *)(v54 + v55);
LABEL_122:
      v72 |= v92 | v91;
      v53 = 16;
      a2[10] = 16;
LABEL_123:
      v74 = 2 * v70;
      v38 = v70 >= 0x20000001;
      v70 *= 2;
      if (v38)
        goto LABEL_89;
    }
  }
  v74 = v70;
LABEL_89:
  v75 = (v74 >> 1) & 0x7FFF0000;
  v76 = v74 - v75;
  v77 = v72 >= v75;
  if (v72 < v75)
  {
    v76 = v75;
    v75 = 0;
  }
  a2[7] = v76;
  a2[8] = v72 - v75;
  LOBYTE(v102) = *(_BYTE *)(a1 + (v73 | (8 * v77)) + 256);
LABEL_92:
  v78 = v102;
  v79 = *(unsigned __int8 *)(a1 + v102);
  v80 = *(_BYTE *)(a1 + 272);
  *(_BYTE *)(a1 + 272) = v80 + 1;
  v81 = a1 + (v80 & 0xF);
  v82 = *(unsigned __int8 *)(v81 + 256);
  v83 = (_BYTE *)(v81 + 256);
  *(_BYTE *)(a1 + v102) = *(_BYTE *)(a1 + v82);
  *(_BYTE *)(a1 + v82) = v79;
  if (v79 == 255)
  {
    *v83 = v102;
  }
  else
  {
    v84 = a1 + v79;
    *v83 = *(_BYTE *)(v84 + 256);
    *(_BYTE *)(v84 + 256) = v82;
  }
LABEL_352:
  v245 = a1 + 276 + 4 * v78;
  v246 = *(_DWORD *)(v245 + 16) + 1;
  *(_DWORD *)(v245 + 16) = v246;
  if (v246 == *(_DWORD *)(a1 + 276))
  {
    v247 = vshrq_n_u32(*(uint32x4_t *)(a1 + 308), 1uLL);
    *(uint32x4_t *)(a1 + 292) = vshrq_n_u32(*(uint32x4_t *)(a1 + 292), 1uLL);
    *(uint32x4_t *)(a1 + 308) = v247;
    v248 = vshrq_n_u32(*(uint32x4_t *)(a1 + 340), 1uLL);
    *(uint32x4_t *)(a1 + 324) = vshrq_n_u32(*(uint32x4_t *)(a1 + 324), 1uLL);
    *(uint32x4_t *)(a1 + 340) = v248;
    v249 = vshrq_n_u32(*(uint32x4_t *)(a1 + 372), 1uLL);
    *(uint32x4_t *)(a1 + 356) = vshrq_n_u32(*(uint32x4_t *)(a1 + 356), 1uLL);
    *(uint32x4_t *)(a1 + 372) = v249;
    v250 = vshrq_n_u32(*(uint32x4_t *)(a1 + 404), 1uLL);
    *(uint32x4_t *)(a1 + 388) = vshrq_n_u32(*(uint32x4_t *)(a1 + 388), 1uLL);
    *(uint32x4_t *)(a1 + 404) = v250;
    v251 = vshrq_n_u32(*(uint32x4_t *)(a1 + 436), 1uLL);
    *(uint32x4_t *)(a1 + 420) = vshrq_n_u32(*(uint32x4_t *)(a1 + 420), 1uLL);
    *(uint32x4_t *)(a1 + 436) = v251;
    v252 = vshrq_n_u32(*(uint32x4_t *)(a1 + 468), 1uLL);
    *(uint32x4_t *)(a1 + 452) = vshrq_n_u32(*(uint32x4_t *)(a1 + 452), 1uLL);
    *(uint32x4_t *)(a1 + 468) = v252;
    v253 = vshrq_n_u32(*(uint32x4_t *)(a1 + 500), 1uLL);
    *(uint32x4_t *)(a1 + 484) = vshrq_n_u32(*(uint32x4_t *)(a1 + 484), 1uLL);
    *(uint32x4_t *)(a1 + 500) = v253;
    v254 = vshrq_n_u32(*(uint32x4_t *)(a1 + 532), 1uLL);
    *(uint32x4_t *)(a1 + 516) = vshrq_n_u32(*(uint32x4_t *)(a1 + 516), 1uLL);
    *(uint32x4_t *)(a1 + 532) = v254;
    v255 = vshrq_n_u32(*(uint32x4_t *)(a1 + 564), 1uLL);
    *(uint32x4_t *)(a1 + 548) = vshrq_n_u32(*(uint32x4_t *)(a1 + 548), 1uLL);
    *(uint32x4_t *)(a1 + 564) = v255;
    v256 = vshrq_n_u32(*(uint32x4_t *)(a1 + 596), 1uLL);
    *(uint32x4_t *)(a1 + 580) = vshrq_n_u32(*(uint32x4_t *)(a1 + 580), 1uLL);
    *(uint32x4_t *)(a1 + 596) = v256;
    v257 = vshrq_n_u32(*(uint32x4_t *)(a1 + 628), 1uLL);
    *(uint32x4_t *)(a1 + 612) = vshrq_n_u32(*(uint32x4_t *)(a1 + 612), 1uLL);
    *(uint32x4_t *)(a1 + 628) = v257;
    v258 = vshrq_n_u32(*(uint32x4_t *)(a1 + 660), 1uLL);
    *(uint32x4_t *)(a1 + 644) = vshrq_n_u32(*(uint32x4_t *)(a1 + 644), 1uLL);
    *(uint32x4_t *)(a1 + 660) = v258;
    v259 = vshrq_n_u32(*(uint32x4_t *)(a1 + 692), 1uLL);
    *(uint32x4_t *)(a1 + 676) = vshrq_n_u32(*(uint32x4_t *)(a1 + 676), 1uLL);
    *(uint32x4_t *)(a1 + 692) = v259;
    v260 = vshrq_n_u32(*(uint32x4_t *)(a1 + 724), 1uLL);
    *(uint32x4_t *)(a1 + 708) = vshrq_n_u32(*(uint32x4_t *)(a1 + 708), 1uLL);
    *(uint32x4_t *)(a1 + 724) = v260;
    v261 = vshrq_n_u32(*(uint32x4_t *)(a1 + 756), 1uLL);
    *(uint32x4_t *)(a1 + 740) = vshrq_n_u32(*(uint32x4_t *)(a1 + 740), 1uLL);
    *(uint32x4_t *)(a1 + 756) = v261;
    v262 = vshrq_n_u32(*(uint32x4_t *)(a1 + 788), 1uLL);
    *(uint32x4_t *)(a1 + 772) = vshrq_n_u32(*(uint32x4_t *)(a1 + 772), 1uLL);
    *(uint32x4_t *)(a1 + 788) = v262;
    v263 = vshrq_n_u32(*(uint32x4_t *)(a1 + 820), 1uLL);
    *(uint32x4_t *)(a1 + 804) = vshrq_n_u32(*(uint32x4_t *)(a1 + 804), 1uLL);
    *(uint32x4_t *)(a1 + 820) = v263;
    v264 = vshrq_n_u32(*(uint32x4_t *)(a1 + 852), 1uLL);
    *(uint32x4_t *)(a1 + 836) = vshrq_n_u32(*(uint32x4_t *)(a1 + 836), 1uLL);
    *(uint32x4_t *)(a1 + 852) = v264;
    v265 = vshrq_n_u32(*(uint32x4_t *)(a1 + 884), 1uLL);
    *(uint32x4_t *)(a1 + 868) = vshrq_n_u32(*(uint32x4_t *)(a1 + 868), 1uLL);
    *(uint32x4_t *)(a1 + 884) = v265;
    v266 = vshrq_n_u32(*(uint32x4_t *)(a1 + 916), 1uLL);
    *(uint32x4_t *)(a1 + 900) = vshrq_n_u32(*(uint32x4_t *)(a1 + 900), 1uLL);
    *(uint32x4_t *)(a1 + 916) = v266;
    v267 = vshrq_n_u32(*(uint32x4_t *)(a1 + 948), 1uLL);
    *(uint32x4_t *)(a1 + 932) = vshrq_n_u32(*(uint32x4_t *)(a1 + 932), 1uLL);
    *(uint32x4_t *)(a1 + 948) = v267;
    v268 = vshrq_n_u32(*(uint32x4_t *)(a1 + 980), 1uLL);
    *(uint32x4_t *)(a1 + 964) = vshrq_n_u32(*(uint32x4_t *)(a1 + 964), 1uLL);
    *(uint32x4_t *)(a1 + 980) = v268;
    v269 = vshrq_n_u32(*(uint32x4_t *)(a1 + 1012), 1uLL);
    *(uint32x4_t *)(a1 + 996) = vshrq_n_u32(*(uint32x4_t *)(a1 + 996), 1uLL);
    *(uint32x4_t *)(a1 + 1012) = v269;
    v270 = vshrq_n_u32(*(uint32x4_t *)(a1 + 1044), 1uLL);
    *(uint32x4_t *)(a1 + 1028) = vshrq_n_u32(*(uint32x4_t *)(a1 + 1028), 1uLL);
    *(uint32x4_t *)(a1 + 1044) = v270;
    v271 = vshrq_n_u32(*(uint32x4_t *)(a1 + 1076), 1uLL);
    *(uint32x4_t *)(a1 + 1060) = vshrq_n_u32(*(uint32x4_t *)(a1 + 1060), 1uLL);
    *(uint32x4_t *)(a1 + 1076) = v271;
    v272 = vshrq_n_u32(*(uint32x4_t *)(a1 + 1108), 1uLL);
    *(uint32x4_t *)(a1 + 1092) = vshrq_n_u32(*(uint32x4_t *)(a1 + 1092), 1uLL);
    *(uint32x4_t *)(a1 + 1108) = v272;
    v273 = vshrq_n_u32(*(uint32x4_t *)(a1 + 1140), 1uLL);
    *(uint32x4_t *)(a1 + 1124) = vshrq_n_u32(*(uint32x4_t *)(a1 + 1124), 1uLL);
    *(uint32x4_t *)(a1 + 1140) = v273;
    v274 = vshrq_n_u32(*(uint32x4_t *)(a1 + 1172), 1uLL);
    *(uint32x4_t *)(a1 + 1156) = vshrq_n_u32(*(uint32x4_t *)(a1 + 1156), 1uLL);
    *(uint32x4_t *)(a1 + 1172) = v274;
    v275 = vshrq_n_u32(*(uint32x4_t *)(a1 + 1204), 1uLL);
    *(uint32x4_t *)(a1 + 1188) = vshrq_n_u32(*(uint32x4_t *)(a1 + 1188), 1uLL);
    *(uint32x4_t *)(a1 + 1204) = v275;
    v276 = vshrq_n_u32(*(uint32x4_t *)(a1 + 1236), 1uLL);
    *(uint32x4_t *)(a1 + 1220) = vshrq_n_u32(*(uint32x4_t *)(a1 + 1220), 1uLL);
    *(uint32x4_t *)(a1 + 1236) = v276;
    v277 = vshrq_n_u32(*(uint32x4_t *)(a1 + 1268), 1uLL);
    *(uint32x4_t *)(a1 + 1252) = vshrq_n_u32(*(uint32x4_t *)(a1 + 1252), 1uLL);
    *(uint32x4_t *)(a1 + 1268) = v277;
    v278 = vshrq_n_u32(*(uint32x4_t *)(a1 + 1300), 1uLL);
    *(uint32x4_t *)(a1 + 1284) = vshrq_n_u32(*(uint32x4_t *)(a1 + 1284), 1uLL);
    *(uint32x4_t *)(a1 + 1300) = v278;
  }
  v279 = *(_DWORD *)(a1 + 288) - 1;
  *(_DWORD *)(a1 + 288) = v279;
  if (!v279)
  {
    v280 = 0;
    v281 = (5 * *(_DWORD *)(a1 + 284)) >> 2;
    if (*(_DWORD *)(a1 + 280) < v281)
      v281 = *(_DWORD *)(a1 + 280);
    *(_DWORD *)(a1 + 284) = v281;
    *(_DWORD *)(a1 + 288) = v281;
    v282 = (int32x4_t)xmmword_189CBDDD0;
    v283.i64[0] = 0x400000004;
    v283.i64[1] = 0x400000004;
    v284.i64[0] = 0x800000008;
    v284.i64[1] = 0x800000008;
    do
    {
      v285 = vaddq_s32(vaddq_s32(v282, v283), vshlq_n_s32((int32x4_t)vmvnq_s8(*(int8x16_t *)(a1 + v280 * 16 + 308)), 8uLL));
      v286 = &v400[v280];
      *v286 = vaddq_s32(vshlq_n_s32((int32x4_t)vmvnq_s8(*(int8x16_t *)(a1 + v280 * 16 + 292)), 8uLL), v282);
      v286[1] = v285;
      v282 = vaddq_s32(v282, v284);
      v280 += 2;
    }
    while (v280 != 64);
    v287 = (unsigned int *)v400;
    v288 = (unsigned int *)&v408;
    while (1)
    {
      v289 = v288 - v287;
      if (v289 < 2)
      {
LABEL_446:
        std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
        v338 = a1 + 1316;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1572)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1573)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1574)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1575)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1576)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1577)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1578)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1579)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1580)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1581)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1582)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1583)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1584)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1585)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1586)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1587)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1588)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1589)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1590)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1591)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1592)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1593)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1594)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1595)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1596)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1597)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1598)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1599)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1600)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1601)) = -1;
        v340 = (int16x8_t)v400[0];
        v339 = (int16x8_t)v400[1];
        v341 = BYTE4(v400[0]);
        v342 = BYTE8(v400[0]);
        v343 = BYTE12(v400[0]);
        v344 = v400[0];
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1602)) = -1;
        *(_BYTE *)(v338 + *(unsigned __int8 *)(a1 + 1603)) = -1;
        v398 = v344;
        *(_BYTE *)(v338 + v344) = 0;
        v345 = v343;
        v396 = v341;
        *(_BYTE *)(v338 + v341) = 1;
        v394 = v342;
        *(_BYTE *)(v338 + v342) = 2;
        v347 = v401;
        v346 = v402;
        v348 = v401.u8[4];
        v349 = v401.u8[8];
        v350 = v401.u8[12];
        v351 = v401.u8[0];
        v392 = v345;
        *(_BYTE *)(v338 + v345) = 3;
        v390 = v339.u8[0];
        *(_BYTE *)(v338 + v339.u8[0]) = 4;
        *(_BYTE *)(v338 + v339.u8[4]) = 5;
        *(_BYTE *)(v338 + v339.u8[8]) = 6;
        *(_BYTE *)(v338 + v339.u8[12]) = 7;
        *(_BYTE *)(v338 + v351) = 8;
        v352 = v348;
        v353 = v349;
        v354 = v350;
        *(_BYTE *)(v338 + v348) = 9;
        *(_BYTE *)(v338 + v349) = 10;
        v355 = v346.u8[8];
        v357 = v403;
        v356 = v404;
        v358 = v403.u8[4];
        v359 = v403.u8[8];
        v360 = v403.u8[12];
        v361 = v403.u8[0];
        *(_BYTE *)(v338 + v354) = 11;
        *(_BYTE *)(v338 + v346.u8[0]) = 12;
        *(_BYTE *)(v338 + v346.u8[4]) = 13;
        *(_BYTE *)(v338 + v346.u8[8]) = 14;
        v399 = v346.u8[12];
        *(_BYTE *)(v338 + v346.u8[12]) = 15;
        v397 = v361;
        *(_BYTE *)(v338 + v361) = 16;
        *(_BYTE *)(v338 + v358) = 17;
        *(_BYTE *)(v338 + v359) = 18;
        *(_BYTE *)(v338 + v360) = 19;
        *(_BYTE *)(v338 + v356.u8[0]) = 20;
        *(_BYTE *)(v338 + v356.u8[4]) = 21;
        *(_BYTE *)(v338 + v356.u8[8]) = 22;
        *(_BYTE *)(v338 + v356.u8[12]) = 23;
        v362 = v405;
        v363 = v406;
        v364 = v405.u8[4];
        v365 = v405.u8[8];
        v366 = v405.u8[0];
        *(_BYTE *)(v338 + v405.u8[0]) = 24;
        *(_BYTE *)(v338 + v364) = 25;
        *(_BYTE *)(v338 + v365) = 26;
        v395 = v362.u8[12];
        *(_BYTE *)(v338 + v362.u8[12]) = 27;
        *(_BYTE *)(v338 + v363.u8[0]) = 28;
        v393 = v363.u8[4];
        *(_BYTE *)(v338 + v363.u8[4]) = 29;
        *(_BYTE *)(v338 + v363.u8[8]) = 30;
        v391 = v363.u8[12];
        *(_BYTE *)(v338 + v363.u8[12]) = 31;
        *(int8x16_t *)(a1 + 1572) = vuzp1q_s8((int8x16_t)vuzp1q_s16(v340, v339), (int8x16_t)vuzp1q_s16(v347, v346));
        *(int8x16_t *)(a1 + 1588) = vuzp1q_s8((int8x16_t)vuzp1q_s16(v357, v356), (int8x16_t)vuzp1q_s16(v362, v363));
        if (*(_BYTE *)(a1 + 1604))
        {
          *(_BYTE *)(a1 + 1604) = 0;
          v367 = (void *)(a1 + 292);
          v388 = v366;
          v389 = v356.u8[12];
          v381 = v346.u8[4];
          v382 = v346.u8[0];
          v379 = v354;
          v380 = v352;
          v377 = v351;
          v378 = v353;
          v368 = v339.u8[4];
          v369 = v339.u8[8];
          v376 = v339.u8[12];
          v370 = v358;
          v371 = v359;
          v383 = v360;
          v384 = v356.u8[0];
          v385 = v356.u8[4];
          v386 = v356.u8[8];
          v387 = v364;
          v372 = v365;
          v373 = v363.u8[0];
          v374 = v363.u8[8];
          bzero(v367, 0x400uLL);
          *((_DWORD *)v367 + v398) = 1;
          *((_DWORD *)v367 + v396) = 1;
          *((_DWORD *)v367 + v394) = 1;
          *((_DWORD *)v367 + v392) = 1;
          *((_DWORD *)v367 + v390) = 1;
          *((_DWORD *)v367 + v368) = 1;
          *((_DWORD *)v367 + v369) = 1;
          *((_DWORD *)v367 + v376) = 1;
          *((_DWORD *)v367 + v377) = 1;
          *((_DWORD *)v367 + v380) = 1;
          *((_DWORD *)v367 + v378) = 1;
          *((_DWORD *)v367 + v379) = 1;
          *((_DWORD *)v367 + v382) = 1;
          *((_DWORD *)v367 + v381) = 1;
          *((_DWORD *)v367 + v355) = 1;
          *((_DWORD *)v367 + v399) = 1;
          *((_DWORD *)v367 + v397) = 1;
          *((_DWORD *)v367 + v370) = 1;
          *((_DWORD *)v367 + v371) = 1;
          *((_DWORD *)v367 + v383) = 1;
          *((_DWORD *)v367 + v384) = 1;
          *((_DWORD *)v367 + v385) = 1;
          *((_DWORD *)v367 + v386) = 1;
          *((_DWORD *)v367 + v389) = 1;
          *((_DWORD *)v367 + v388) = 1;
          *((_DWORD *)v367 + v387) = 1;
          *((_DWORD *)v367 + v372) = 1;
          *((_DWORD *)v367 + v395) = 1;
          *((_DWORD *)v367 + v373) = 1;
          *((_DWORD *)v367 + v393) = 1;
          *((_DWORD *)v367 + v374) = 1;
          *((_DWORD *)v367 + v391) = 1;
        }
        return v102;
      }
      if (v289 == 3)
      {
        v322 = *v287;
        v323 = v287[1];
        v324 = *(v288 - 1);
        if (v323 >= *v287)
        {
          if (v324 < v323)
          {
            v287[1] = v324;
            *(v288 - 1) = v323;
            v336 = *v287;
            v335 = v287[1];
            if (v335 < *v287)
            {
              *v287 = v335;
              v287[1] = v336;
            }
          }
        }
        else
        {
          if (v324 >= v323)
          {
            *v287 = v323;
            v287[1] = v322;
            v337 = *(v288 - 1);
            if (v337 >= v322)
              goto LABEL_446;
            v287[1] = v337;
          }
          else
          {
            *v287 = v324;
          }
          *(v288 - 1) = v322;
        }
        goto LABEL_446;
      }
      if (v289 == 2)
      {
        v325 = *(v288 - 1);
        v326 = *v287;
        if (v325 < *v287)
        {
          *v287 = v325;
          *(v288 - 1) = v326;
        }
        goto LABEL_446;
      }
      if ((char *)v288 - (char *)v287 <= 31)
      {
        while (v287 != v288 - 1)
        {
          v327 = v287++;
          if (v327 != v288 && v287 != v288)
          {
            v328 = *v327;
            v329 = *v327;
            v330 = v287;
            v331 = v327;
            v332 = v287;
            do
            {
              v334 = *v332++;
              v333 = v334;
              if (v334 < v329)
              {
                v329 = v333;
                v331 = v330;
              }
              v330 = v332;
            }
            while (v332 != v288);
            if (v331 != v327)
            {
              *v327 = *v331;
              *v331 = v328;
            }
          }
        }
        goto LABEL_446;
      }
      v290 = &v287[v289 >> 1];
      v291 = v288 - 1;
      v292 = *(v288 - 1);
      v293 = *v290;
      v294 = *v287;
      if (*v290 >= *v287)
      {
        if (v292 >= v293)
        {
          v295 = 0;
          v296 = *v287;
          v297 = *v290;
          if (*v287 >= *v290)
            goto LABEL_385;
          goto LABEL_367;
        }
        *v290 = v292;
        *v291 = v293;
        v307 = *v287;
        if (*v290 < *v287)
        {
          *v287 = *v290;
          *v290 = v307;
          v295 = 2;
          v296 = *v287;
          v297 = *v290;
          if (*v287 >= *v290)
            goto LABEL_385;
          goto LABEL_367;
        }
      }
      else
      {
        if (v292 < v293)
        {
          *v287 = v292;
          *v291 = v294;
          v295 = 1;
          v296 = *v287;
          v297 = *v290;
          if (*v287 >= *v290)
            goto LABEL_385;
          goto LABEL_367;
        }
        *v287 = v293;
        *v290 = v294;
        if (*v291 < v294)
        {
          *v290 = *v291;
          *v291 = v294;
          v295 = 2;
          v296 = *v287;
          v297 = *v290;
          if (*v287 >= *v290)
            goto LABEL_385;
          goto LABEL_367;
        }
      }
      v295 = 1;
      v296 = *v287;
      v297 = *v290;
      if (*v287 >= *v290)
      {
LABEL_385:
        v298 = v288 - 1;
        while (--v298 != v287)
        {
          if (*v298 < v297)
          {
            *v287 = *v298;
            *v298 = v296;
            ++v295;
            v299 = v287 + 1;
            if (v287 + 1 < v298)
              goto LABEL_368;
            goto LABEL_389;
          }
        }
        v311 = v287 + 1;
        if (v296 >= *v291)
        {
          if (v311 == v291)
            goto LABEL_446;
          while (1)
          {
            v312 = *v311;
            if (v296 < *v311)
              break;
            if (++v311 == v291)
              goto LABEL_446;
          }
          *v311++ = *v291;
          *v291 = v312;
        }
        if (v311 == v291)
          goto LABEL_446;
        while (1)
        {
          v316 = *v287;
          do
          {
            v318 = *v311++;
            v317 = v318;
          }
          while (v316 >= v318);
          v319 = v311 - 1;
          do
          {
            v321 = *--v291;
            v320 = v321;
          }
          while (v316 < v321);
          if (v319 >= v291)
            break;
          *v319 = v320;
          *v291 = v317;
        }
        v287 = v311 - 1;
        if (v319 > (unsigned int *)v407)
          goto LABEL_446;
        goto LABEL_422;
      }
LABEL_367:
      v298 = v288 - 1;
      v299 = v287 + 1;
      if (v287 + 1 >= v288 - 1)
      {
LABEL_389:
        v304 = v299;
      }
      else
      {
LABEL_368:
        v300 = v299;
        while (1)
        {
          v301 = *v290;
          do
          {
            v303 = *v300++;
            v302 = v303;
          }
          while (v303 < v301);
          v304 = v300 - 1;
          do
          {
            v306 = *--v298;
            v305 = v306;
          }
          while (v306 >= v301);
          if (v304 >= v298)
            break;
          *v304 = v305;
          *v298 = v302;
          ++v295;
          if (v304 == v290)
            v290 = v298;
        }
      }
      if (v304 != v290)
      {
        v308 = *v304;
        if (*v290 < *v304)
        {
          *v304 = *v290;
          *v290 = v308;
          ++v295;
        }
      }
      if (v304 == (unsigned int *)v407)
        goto LABEL_446;
      if (!v295)
      {
        if (v304 <= (unsigned int *)v407)
        {
          v313 = v304 + 1;
          while (v313 != v288)
          {
            v315 = *(v313 - 1);
            v314 = *v313++;
            if (v314 < v315)
              goto LABEL_395;
          }
        }
        else
        {
          while (v299 != v304)
          {
            v310 = *(v299 - 1);
            v309 = *v299++;
            if (v309 < v310)
              goto LABEL_395;
          }
        }
        goto LABEL_446;
      }
LABEL_395:
      if (v304 > (unsigned int *)v407)
        v288 = v304;
      else
        v287 = v304 + 1;
LABEL_422:
      if (v288 == (unsigned int *)v407)
        goto LABEL_446;
    }
  }
  return v102;
}

void std::vector<gcl::gpcc::GeometryDecoderBasic::TreeNode>::__append(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  const float *v24;
  float *v25;
  uint64_t v26;
  int v27;
  float32x4x3_t v28;

  v5 = a1[1];
  v4 = a1[2];
  v6 = v5;
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(v5, v13);
      v6 = &v5[v13];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = *a1;
    v8 = v5 - *a1;
    v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2) + a2;
    if (v9 > 0x1555555555555555)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v7) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v11 = 0x1555555555555555;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0x1555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(12 * v11);
    }
    else
    {
      v12 = 0;
    }
    v14 = &v12[4 * (v8 >> 2)];
    v15 = &v12[12 * v11];
    v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    v17 = &v14[v16];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v15;
      if (v7)
LABEL_28:
        operator delete(v7);
    }
    else
    {
      v18 = v5 - v7 - 12;
      if (v18 < 0xB4)
        goto LABEL_25;
      v19 = v18 / 0xC;
      if (&v12[v8 - 12 * v19 - 12] < v5 && &v5[-12 * v19 - 12] < v14)
        goto LABEL_25;
      v21 = v19 + 1;
      v22 = (v19 + 1) & 0x3FFFFFFFFFFFFFFCLL;
      v6 = &v5[-12 * v22];
      v23 = &v14[-12 * v22];
      v24 = (const float *)(v5 - 48);
      v25 = (float *)(v14 - 48);
      v26 = v22;
      do
      {
        v28 = vld3q_f32(v24);
        vst3q_f32(v25, v28);
        v25 -= 12;
        v24 -= 12;
        v26 -= 4;
      }
      while (v26);
      v14 -= 12 * v22;
      if (v21 != v22)
      {
LABEL_25:
        v23 = v14;
        do
        {
          v27 = *((_DWORD *)v6 - 3);
          v6 -= 12;
          *((_DWORD *)v23 - 3) = v27;
          v23 -= 12;
          *((_DWORD *)v23 + 1) = *((_DWORD *)v6 + 1);
          *((_DWORD *)v23 + 2) = *((_DWORD *)v6 + 2);
        }
        while (v6 != v7);
      }
      *a1 = v23;
      a1[1] = v17;
      a1[2] = v15;
      if (v7)
        goto LABEL_28;
    }
  }
}

void *gcl::gpcc::GeometryDecoderBasic::prepare(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  unint64_t v9;
  void *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  const float *v21;
  float *v22;
  uint64_t v23;
  int v24;
  void *v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  const float *v36;
  float *v37;
  uint64_t v38;
  int v39;
  void *result;
  _DWORD __src[407];
  uint64_t v42;
  float32x4x3_t v43;
  float32x4x3_t v44;

  v42 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = a4;
  *(_DWORD *)(a1 + 16) = a5;
  *(_DWORD *)a1 = a6;
  v9 = *(int *)(a3 + 32) + 8;
  v10 = *(void **)(a1 + 24);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v10) >> 2) >= v9)
    goto LABEL_17;
  if (v9 > 0x1555555555555555)
    goto LABEL_34;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = (char *)operator new(12 * v9);
  v13 = v11 - (_QWORD)v10;
  v14 = (uint64_t)(v11 - (_QWORD)v10) / 12;
  v15 = (unint64_t)&v12[12 * v14];
  v16 = (char *)v15;
  if ((void *)v11 != v10)
  {
    v17 = v13 - 12;
    if (v13 - 12 < 0xB4)
    {
      v16 = &v12[12 * v14];
      do
      {
LABEL_14:
        v24 = *(_DWORD *)(v11 - 12);
        v11 -= 12;
        *((_DWORD *)v16 - 3) = v24;
        v16 -= 12;
        *((_DWORD *)v16 + 1) = *(_DWORD *)(v11 + 4);
        *((_DWORD *)v16 + 2) = *(_DWORD *)(v11 + 8);
      }
      while ((void *)v11 != v10);
      goto LABEL_15;
    }
    v18 = v17 / 0xC;
    v19 = (unint64_t)&v12[12 * v14 - 12 + -12 * (v17 / 0xC)] >= v11 || v11 - 12 * (v17 / 0xC) - 12 >= v15;
    v16 = &v12[12 * v14];
    if (!v19)
      goto LABEL_14;
    v20 = v18 + 1;
    v16 = (char *)(v15 - 12 * (v20 & 0x3FFFFFFFFFFFFFFCLL));
    v21 = (const float *)(v11 - 48);
    v22 = (float *)(v15 - 48);
    v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v43 = vld3q_f32(v21);
      vst3q_f32(v22, v43);
      v22 -= 12;
      v21 -= 12;
      v23 -= 4;
    }
    while (v23);
    v11 -= 12 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_14;
  }
LABEL_15:
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 32) = v15;
  *(_QWORD *)(a1 + 40) = &v12[12 * v9];
  if (v10)
  {
    operator delete(v10);
    v9 = *(int *)(a3 + 32) + 8;
  }
LABEL_17:
  v25 = *(void **)(a1 + 48);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 64) - (_QWORD)v25) >> 2) >= v9)
    goto LABEL_33;
  if (v9 > 0x1555555555555555)
LABEL_34:
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v26 = *(_QWORD *)(a1 + 56);
  v27 = (char *)operator new(12 * v9);
  v28 = v26 - (_QWORD)v25;
  v29 = (uint64_t)(v26 - (_QWORD)v25) / 12;
  v30 = (unint64_t)&v27[12 * v29];
  v31 = (char *)v30;
  if ((void *)v26 != v25)
  {
    v32 = v28 - 12;
    if (v28 - 12 >= 0xB4)
    {
      v33 = v32 / 0xC;
      v34 = (unint64_t)&v27[12 * v29 - 12 + -12 * (v32 / 0xC)] >= v26 || v26 - 12 * (v32 / 0xC) - 12 >= v30;
      v31 = &v27[12 * v29];
      if (v34)
      {
        v35 = v33 + 1;
        v31 = (char *)(v30 - 12 * (v35 & 0x3FFFFFFFFFFFFFFCLL));
        v36 = (const float *)(v26 - 48);
        v37 = (float *)(v30 - 48);
        v38 = v35 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v44 = vld3q_f32(v36);
          vst3q_f32(v37, v44);
          v37 -= 12;
          v36 -= 12;
          v38 -= 4;
        }
        while (v38);
        v26 -= 12 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
        if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_31;
      }
    }
    else
    {
      v31 = &v27[12 * v29];
    }
    do
    {
      v39 = *(_DWORD *)(v26 - 12);
      v26 -= 12;
      *((_DWORD *)v31 - 3) = v39;
      v31 -= 12;
      *((_DWORD *)v31 + 1) = *(_DWORD *)(v26 + 4);
      *((_DWORD *)v31 + 2) = *(_DWORD *)(v26 + 8);
    }
    while ((void *)v26 != v25);
  }
LABEL_31:
  *(_QWORD *)(a1 + 48) = v31;
  *(_QWORD *)(a1 + 56) = v30;
  *(_QWORD *)(a1 + 64) = &v27[12 * v9];
  if (v25)
    operator delete(v25);
LABEL_33:
  bzero(&__src[1], 0x658uLL);
  __src[0] = -2147450880;
  gcl::DualLutCoder<true>::DualLutCoder((uint64_t)&__src[1]);
  result = memcpy((void *)(a1 + 80), __src, 0x65CuLL);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a3 + 28);
  *(_BYTE *)(a1 + 72) = (*(_BYTE *)(a1 + 72) & 0xFE | *(_BYTE *)(a2 + 20)) ^ 1;
  *(_DWORD *)(a1 + 2784) = 0;
  return result;
}

gcl::gpcc::GeometryDecoderBasic *gcl::gpcc::GeometryDecoderBasic::GeometryDecoderBasic(gcl::gpcc::GeometryDecoderBasic *this)
{
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 12;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 20) = -2147450880;
  gcl::DualLutCoder<true>::DualLutCoder((uint64_t)this + 84);
  *((_QWORD *)this + 215) = 0;
  return this;
}

void sub_1885CB018(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[6];
  if (v4)
  {
    v1[7] = v4;
    operator delete(v4);
    v5 = *v2;
    if (!*v2)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v5 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  v1[4] = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

uint64_t gcl::DualLutCoder<true>::DualLutCoder(uint64_t a1)
{
  _OWORD *v2;
  _QWORD *v3;
  __int128 v4;
  void *v5;
  __int128 v6;

  v2 = (_OWORD *)(a1 + 1316);
  v3 = (_QWORD *)(a1 + 276);
  *(_QWORD *)&v4 = -1;
  *((_QWORD *)&v4 + 1) = -1;
  *(_OWORD *)a1 = xmmword_189CFB270;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 80) = v4;
  *(_OWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 128) = v4;
  *(_OWORD *)(a1 + 144) = v4;
  *(_OWORD *)(a1 + 160) = v4;
  *(_OWORD *)(a1 + 176) = v4;
  *(_OWORD *)(a1 + 192) = v4;
  *(_OWORD *)(a1 + 208) = v4;
  *(_OWORD *)(a1 + 224) = v4;
  *(_OWORD *)(a1 + 240) = v4;
  *(_OWORD *)(a1 + 256) = xmmword_189CFB270;
  *(_BYTE *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 276) = xmmword_189CFB280;
  v5 = (void *)(a1 + 292);
  *(_BYTE *)(a1 + 1604) = 0;
  bzero((void *)(a1 + 420), 0x380uLL);
  *(_QWORD *)&v6 = -1;
  *((_QWORD *)&v6 + 1) = -1;
  v2[14] = v6;
  v2[15] = v6;
  v2[12] = v6;
  v2[13] = v6;
  v2[10] = v6;
  v2[11] = v6;
  v2[8] = v6;
  v2[9] = v6;
  v2[6] = v6;
  v2[7] = v6;
  v2[4] = v6;
  v2[5] = v6;
  v2[2] = v6;
  v2[3] = v6;
  *v2 = v6;
  v2[1] = v6;
  memset_pattern16(v5, &unk_189CFB2A0, 0x80uLL);
  v3[162] = 0x706050403020100;
  v3[163] = 0xF0E0D0C0B0A0908;
  v3[164] = 0x1716151413121110;
  v3[165] = 0x1F1E1D1C1B1A1918;
  *v2 = xmmword_189CFB270;
  v2[1] = xmmword_189CFB290;
  *(_DWORD *)(a1 + 1608) = -2147450880;
  *(_WORD *)(a1 + 1612) = 0x8000;
  memset_pattern16((void *)(a1 + 1614), &unk_189CFAE50, 0xAuLL);
  return a1;
}

uint64_t geo::codec::decodeIntCompressorArray<unsigned long long>(_QWORD *a1, uint64_t *a2, char a3, char a4, unint64_t a5, uint64x2_t *a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int v17;

  v17 = 0;
  if (!a2)
    return 0;
  result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v17);
  if ((_DWORD)result)
  {
    v13 = v17;
    v14 = a1[6];
    v15 = v14 + v17;
    if (v15 <= a1[7])
    {
      v16 = (unsigned __int8 *)(a1[5] + v14);
      a1[6] = v15;
      return mgcl::ints::IntDecompressor<unsigned long long>::decompress(a2, v16, v13, a3, a4, a5, a6) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t geo::codec::decodeIntCompressorArray<unsigned long long>(_QWORD *a1, uint64_t *a2, char a3, char a4, uint64_t a5)
{
  uint64x2_t *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int v16;

  v5 = *(uint64x2_t **)a5;
  v6 = *(_QWORD *)(a5 + 8);
  v16 = 0;
  if (!a2)
    return 0;
  result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v16);
  if ((_DWORD)result)
  {
    v12 = v16;
    v13 = a1[6];
    v14 = v13 + v16;
    if (v14 <= a1[7])
    {
      v15 = (unsigned __int8 *)(a1[5] + v13);
      a1[6] = v14;
      return mgcl::ints::IntDecompressor<unsigned long long>::decompress(a2, v15, v12, a3, a4, (v6 - (uint64_t)v5) >> 3, v5) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mgcl::ints::IntDecompressor<unsigned long long>::decompress(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, char a4, char a5, unint64_t a6, uint64x2_t *a7)
{
  uint64_t v12;
  size_t v13;
  uint64_t result;
  size_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD **v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  void *v45;
  BOOL v46;
  unsigned int v47;
  unsigned __int8 *v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  size_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  size_t v61;
  size_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  unsigned __int8 *v75;
  uint64_t v76;
  int v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD **v81;
  _QWORD *v82;
  _QWORD *v83;
  void *v84;
  void *v85;
  unsigned int v86;
  unsigned __int8 *v87;
  unsigned int v88;
  int v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  size_t v93;
  unsigned __int8 *v94;
  unint64_t v95;
  uint64_t v96;
  size_t v97;
  size_t v98;
  char *v99;
  char *v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  _BYTE *v103;
  unint64_t v104;
  char *v105;
  _BYTE *v106;
  unsigned __int8 *v107;
  char *v108;
  char *v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  size_t v113;
  uint64_t v114;
  char v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 *v119;
  int v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  unsigned int v128;
  int v129;
  int v130;
  unint64_t v131;
  uint64_t v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  char *v135;
  size_t v136;
  unsigned __int8 *v137;
  unint64_t v138;
  uint64_t v139;
  size_t v140;
  size_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  unsigned __int8 *v145;
  unsigned __int8 *v146;
  _BYTE *v147;
  unint64_t v148;
  char *v149;
  _BYTE *v150;
  unsigned __int8 *v151;
  char *v152;
  char *v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  unint64_t v158;
  uint64_t v159;
  unsigned __int8 *v160;
  int v161;
  uint64_t *v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  unsigned int v166;
  int v167;
  int v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  unint64_t v173;
  uint64_t *v174;
  BOOL v175;
  size_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  size_t v180;
  size_t v181;
  uint64_t *v182;
  char *v183;
  char *v184;
  size_t v185;
  uint64_t *v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  size_t v191;
  unsigned int v192;
  size_t v193;
  char *v194;
  char *v195;
  _BYTE *v196;
  int v197;
  int v198;
  int v199;
  int v200;
  uint64_t i;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  _BYTE *v208;
  int v209;
  int v210;
  int v211;
  int v212;
  uint64_t j;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char v218;
  int v219;
  char v220;
  unsigned int v221;
  uint64_t v222;
  int v223;
  int v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unsigned int v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  int v233;
  char v234;
  char v235;
  unsigned int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  unsigned __int8 *v241;
  int v242;
  unsigned int v243;
  uint64_t v244;
  char v245;
  int v246;
  char v247;
  unsigned int v248;
  uint64_t v249;
  int v250;
  int v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unsigned int v255;
  int v256;
  uint64_t v257;
  char v258;
  int v259;
  char v260;
  char v261;
  unsigned int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  char *v267;
  int v268;
  BOOL v269;
  unsigned int v270;
  char *v271;
  int v272;
  unsigned int v273;
  unsigned int v274;
  int v275;
  unsigned int v276;
  int v277;
  int v278;
  uint64_t *v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  char *v284;
  unint64_t v285;
  unint64_t v286;
  unsigned int v287;
  int v288;
  unsigned int v289;
  int v290;
  int v291;
  uint64_t *v292;
  uint64_t v293;
  char *v294;
  unint64_t v295;
  unint64_t v296;
  char *v297;
  unint64_t v298;
  char *v299;
  _OWORD *v300;
  unsigned __int8 *v301;
  unint64_t v302;
  __int128 v303;
  _QWORD *v304;
  unsigned __int8 *v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  _OWORD *v311;
  unsigned __int8 *v312;
  unint64_t v313;
  __int128 v314;
  _QWORD *v315;
  unsigned __int8 *v316;
  unint64_t v317;
  uint64_t v318;
  char *v319;
  char *v320;
  unint64_t v321;
  __int128 v322;
  char *v323;
  char *v324;
  unint64_t v325;
  uint64_t v326;
  char *v327;
  char *v328;
  unint64_t v329;
  __int128 v330;
  char *v331;
  char *v332;
  unint64_t v333;
  uint64_t v334;
  char *v335;
  char *v336;
  unint64_t v337;
  __int128 v338;
  char *v339;
  char *v340;
  unint64_t v341;
  uint64_t v342;
  char *v343;
  char *v344;
  unint64_t v345;
  __int128 v346;
  char *v347;
  char *v348;
  unint64_t v349;
  uint64_t v350;
  char *v351;
  char *v352;
  unint64_t v353;
  __int128 v354;
  char *v355;
  char *v356;
  unint64_t v357;
  uint64_t v358;
  char *v359;
  char v360;
  int64x2_t *v361;
  unint64_t v362;
  unint64_t v363;
  int64x2_t v364;
  uint64x2_t v365;
  int8x16_t v366;
  int32x2_t v367;
  int64x2_t *v368;
  unint64_t v369;
  uint64x2_t *v370;
  int8x16_t v371;
  int8x16_t v372;
  int64x2_t v373;
  int8x16_t v374;
  int8x16_t v375;
  unint64_t v376;
  uint64_t v377;
  char *v378;
  uint64_t *v379;
  uint64_t v380;
  unint64_t v381;
  char *v382;
  char v383;
  uint64_t *v384;
  uint64_t *v385;
  unint64_t v386;
  uint64_t v387;
  const char *v388;
  char *v389;
  char v390;
  unsigned __int8 *v391;
  uint64_t *v392;
  char v393;
  char v394;
  uint64_t v395;
  uint64_t *v396;
  unint64_t v397;
  unsigned int v398;
  char *v399;
  char v400;
  int v401;
  uint64_t v402;
  uint64_t *v403;
  char v404;
  char v405;
  uint64_t v406;
  int8x16_t v407;
  unint64_t v408;
  unint64_t v409;
  uint64x2_t v410;
  uint64_t *v411;
  int64x2_t *v412;
  unint64_t v413;
  uint64_t v414;
  uint32x4_t v415;
  uint32x4_t v416;
  int64x2_t v417;
  int64x2_t v418;
  int64x2_t v419;
  uint64x2_t v420;
  unint64_t v421;
  int64x2_t *v422;
  int8x16_t *v423;
  int8x16_t v424;
  uint32x4_t v425;
  uint32x4_t v426;
  uint32x4_t v427;
  uint32x4_t v428;
  int64x2_t v429;
  int64x2_t v430;
  int64x2_t v431;
  int64x2_t v432;
  int64x2_t v433;
  int64x2_t v434;
  int64x2_t v435;
  int64x2_t v436;
  unint64_t v437;
  unint64_t *v438;
  char *v439;
  char v440;
  char *v441;
  char v442;
  int32x4_t *v443;
  uint64_t *v444;
  char v445;
  char v446;
  uint64_t v447;
  unint64_t v448;
  unint64_t v449;
  int64x2_t v450;
  uint64x2_t v451;
  int8x16_t v452;
  int32x2_t v453;
  int32x2_t *v454;
  unint64_t v455;
  uint64x2_t *v456;
  int8x16_t v457;
  int8x16_t v458;
  int64x2_t v459;
  int8x16_t v460;
  int8x16_t v461;
  unint64_t v462;
  char *v463;
  __int32 *v464;
  uint64_t v465;
  unint64_t v466;
  char *v467;
  char *v468;
  char *v469;
  char *v470;
  char *v471;
  size_t v472;
  unsigned int v473;
  char *v474;
  unsigned int v475;
  int v476;
  unsigned int v477;
  char *v478;
  int v479;
  int v480;
  char *v481;
  char *v482;
  char *v483;
  char *v484;
  BOOL v485;
  unint64_t v486;
  char *v487;
  int v488;
  int32x4_t *v489;
  unint64_t v490;
  unint64_t v491;
  uint64_t v492;
  size_t v495;
  uint64_t v496;
  unint64_t __sz;
  uint64_t *v498;
  unsigned __int8 *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  __int128 v504;
  uint64_t v505;
  __int16 v506;
  char v507;
  int v508;
  char v509;
  char v510;
  uint64_t v511;
  uint64_t v512;
  _BYTE __dst[65];
  uint64_t v514;

  v514 = *MEMORY[0x1E0C80C00];
  if (!a6)
    return 0;
  v12 = 8 * a6;
  bzero(a7, 8 * a6);
  v13 = *a2;
  if ((v13 - 66) < 0xFFFFFFBF)
    return 3;
  if (v13 <= 0x40)
    v15 = 65 - v13;
  else
    v15 = 0;
  bzero(&__dst[v13], v15);
  v16 = a6;
  memcpy(__dst, a2 + 1, v13);
  v17 = 0;
  v18 = v13 + 1;
  v489 = (int32x4_t *)&a7->i8[v12];
  v490 = a6 & 0xFFFFFFFFFFFFFFFCLL;
  v491 = 4 * a6;
  v492 = a3 - 1;
  v488 = a3 - 1;
  v496 = 8 * a3 - 24;
  __sz = v12;
  v498 = a1;
  v499 = a2;
  v495 = v13;
  while (2)
  {
    while (1)
    {
      v19 = __dst[v17];
      v20 = a2[v18];
      v21 = v18 + 1;
      v500 = v17;
      v22 = 0;
      v23 = 0;
      if (!__dst[v17])
        break;
      v24 = v18;
      v25 = 0;
      v26 = &a2[v21];
      v27 = 1;
      v501 = v24;
      v28 = v496 - 8 * v24;
      do
      {
        v29 = v27;
        v30 = v28;
        v31 = (char)v26[v23];
        v25 |= (unint64_t)(v26[v23] & 0x7F) << v22;
        if (v23 > 8)
          break;
        ++v23;
        v22 += 7;
        ++v27;
        v28 -= 8;
      }
      while (v31 < 0);
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v35 = &a2[v501];
      do
      {
        v36 = v30;
        v37 = (char)v35[v29 + 1];
        v34 |= (unint64_t)(v35[++v29] & 0x7F) << v32;
        if (v33 > 8)
          break;
        ++v33;
        v32 += 7;
        v30 -= 8;
      }
      while (v37 < 0);
      switch(v20)
      {
        case 1:
          if (!a1[3])
          {
            v38 = (_QWORD *)operator new();
            v39 = (_QWORD *)operator new();
            v40 = operator new();
            a1 = v498;
            a2 = v499;
            *(_QWORD *)(v40 + 20) = 0;
            *(_QWORD *)(v40 + 12) = 0;
            *(_DWORD *)(v40 + 36) = 0;
            *(_QWORD *)(v40 + 28) = 0;
            *(_WORD *)(v40 + 40) = 257;
            *(_QWORD *)(v40 + 44) = 0;
            *(_QWORD *)(v40 + 60) = 0;
            *(_QWORD *)(v40 + 52) = 0;
            *(_DWORD *)(v40 + 67) = 0;
            *(_DWORD *)(v40 + 72) = 0;
            *(_WORD *)(v40 + 76) = 257;
            *(_QWORD *)(v40 + 136) = 0;
            *(_OWORD *)(v40 + 80) = 0u;
            *(_OWORD *)(v40 + 96) = 0u;
            *(_OWORD *)(v40 + 112) = 0u;
            *v39 = v40;
            *v38 = v39;
            v41 = (_QWORD **)v498[3];
            v498[3] = (uint64_t)v38;
            if (v41)
            {
              v42 = *v41;
              *v41 = 0;
              if (v42)
              {
                v43 = (_QWORD *)*v42;
                *v42 = 0;
                if (v43)
                {
                  v44 = (void *)v43[13];
                  if (v44)
                  {
                    v43[14] = v44;
                    operator delete(v44);
                  }
                  v45 = (void *)v43[10];
                  if (v45)
                  {
                    v43[11] = v45;
                    operator delete(v45);
                  }
                  MEMORY[0x18D76437C](v43, 0x1070C40ADA6D0DELL);
                }
                MEMORY[0x18D76437C](v42, 0x20C4093837F09);
                a1 = v498;
              }
              MEMORY[0x18D76437C](v41, 0x20C4093837F09);
            }
          }
          v46 = (_DWORD)v19 == 1;
          v47 = v34 - 2;
          if (v34 < 2)
            return 3;
          v48 = &a2[v501 + v29];
          v49 = v48[1];
          v50 = v48[2];
          v51 = *a1;
          v52 = (char *)a1[1];
          v53 = &v52[-*a1];
          if ((_DWORD)v19 == 1)
          {
            LODWORD(v54) = a6;
            v55 = a6 - (_QWORD)v53;
            if (a6 <= (unint64_t)v53)
            {
              v56 = v498;
              if (a6 >= (unint64_t)v53)
              {
LABEL_395:
                v402 = *v56;
                v403 = *(uint64_t **)v56[3];
                LODWORD(v504) = 0;
                BYTE4(v504) = a4;
                BYTE5(v504) = a5;
                WORD3(v504) = 0;
                v505 = 1;
                v506 = 0;
                v507 = v46;
                v508 = 0;
                if (v49 >= 4)
                  v404 = 1;
                else
                  v404 = v49;
                v509 = v404;
                if (v50 == 2)
                  v405 = 4;
                else
                  v405 = 1;
                if (!v50)
                  v405 = 0;
                v510 = v405;
                *((_QWORD *)&v504 + 1) = __PAIR64__(v54, v47);
                v406 = *v403;
                v511 = (uint64_t)&v499[v501 + 3 + v29];
                v512 = v47;
                result = gcl::polyline::DecoderImpl::decompressAttributes(v406, (uint64_t)&v511, v402, 0, &v504);
                if ((_DWORD)result)
                  goto LABEL_448;
                v16 = a6;
                if (a6 < 8)
                {
                  v408 = 0;
                  a1 = v498;
LABEL_416:
                  v437 = a6 - v408;
                  v438 = (unint64_t *)a7 + v408;
                  v439 = (char *)(v402 + v408);
                  do
                  {
                    v440 = *v439++;
                    *v438 = ((_BYTE)v25 + v440) & 1 | (2 * *v438);
                    ++v438;
                    --v437;
                  }
                  while (v437);
                  goto LABEL_418;
                }
                a1 = v498;
                if (a6 >= 0x10)
                {
                  v420 = (uint64x2_t)vdupq_n_s64(v25);
                  v421 = a6 & 0xFFFFFFFFFFFFFFF0;
                  v422 = (int64x2_t *)a7;
                  v423 = (int8x16_t *)v402;
                  do
                  {
                    v424 = *v423++;
                    v425 = (uint32x4_t)vqtbl1q_s8(v424, (int8x16_t)xmmword_189CFB5D0);
                    v426 = (uint32x4_t)vqtbl1q_s8(v424, (int8x16_t)xmmword_189CFB5C0);
                    v427 = (uint32x4_t)vqtbl1q_s8(v424, (int8x16_t)xmmword_189CFB5B0);
                    v428 = (uint32x4_t)vqtbl1q_s8(v424, (int8x16_t)xmmword_189CFB5A0);
                    v429 = (int64x2_t)vaddw_u32(v420, *(uint32x2_t *)v425.i8);
                    v430 = (int64x2_t)vaddw_u32(v420, *(uint32x2_t *)v428.i8);
                    v432 = *v422;
                    v431 = v422[1];
                    v433 = v422[4];
                    v434 = v422[5];
                    v407 = (int8x16_t)vsliq_n_s64((int64x2_t)vaddw_high_u32(v420, v428), v422[7], 1uLL);
                    v435 = vsliq_n_s64(v430, v422[6], 1uLL);
                    v436 = vsliq_n_s64((int64x2_t)vaddw_high_u32(v420, v425), v422[3], 1uLL);
                    v422[2] = vsliq_n_s64(v429, v422[2], 1uLL);
                    v422[3] = v436;
                    *v422 = vsliq_n_s64((int64x2_t)vaddw_u32(v420, *(uint32x2_t *)v426.i8), v432, 1uLL);
                    v422[1] = vsliq_n_s64((int64x2_t)vaddw_high_u32(v420, v426), v431, 1uLL);
                    v422[4] = vsliq_n_s64((int64x2_t)vaddw_u32(v420, *(uint32x2_t *)v427.i8), v433, 1uLL);
                    v422[5] = vsliq_n_s64((int64x2_t)vaddw_high_u32(v420, v427), v434, 1uLL);
                    v422[6] = v435;
                    v422[7] = (int64x2_t)v407;
                    v422 += 8;
                    v421 -= 16;
                  }
                  while (v421);
                  if ((a6 & 0xFFFFFFFFFFFFFFF0) == a6)
                    goto LABEL_418;
                  v408 = a6 & 0xFFFFFFFFFFFFFFF0;
                  v409 = a6 & 0xFFFFFFFFFFFFFFF0;
                  if ((a6 & 8) == 0)
                    goto LABEL_416;
                }
                else
                {
                  v409 = 0;
                }
                v410 = (uint64x2_t)vdupq_n_s64(v25);
                v411 = (uint64_t *)(v402 + v409);
                v412 = (int64x2_t *)((char *)a7 + 8 * v409);
                v413 = v409 - (a6 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v414 = *v411++;
                  v407.i64[0] = v414;
                  v415 = (uint32x4_t)vqtbl1q_s8(v407, (int8x16_t)xmmword_189CFB5D0);
                  v416 = (uint32x4_t)vqtbl1q_s8(v407, (int8x16_t)xmmword_189CFB5C0);
                  v417 = (int64x2_t)vaddw_high_u32(v410, v416);
                  v407 = (int8x16_t)vsliq_n_s64((int64x2_t)vaddw_u32(v410, *(uint32x2_t *)v416.i8), *v412, 1uLL);
                  v418 = vsliq_n_s64(v417, v412[1], 1uLL);
                  v419 = vsliq_n_s64((int64x2_t)vaddw_high_u32(v410, v415), v412[3], 1uLL);
                  v412[2] = vsliq_n_s64((int64x2_t)vaddw_u32(v410, *(uint32x2_t *)v415.i8), v412[2], 1uLL);
                  v412[3] = v419;
                  *v412 = (int64x2_t)v407;
                  v412[1] = v418;
                  v412 += 4;
                  v413 += 8;
                }
                while (v413);
                v408 = a6 & 0xFFFFFFFFFFFFFFF8;
                if ((a6 & 0xFFFFFFFFFFFFFFF8) != a6)
                  goto LABEL_416;
                goto LABEL_418;
              }
              v207 = v51 + a6;
            }
            else
            {
              v56 = v498;
              v57 = v498[2];
              if (v57 - (uint64_t)v52 < v55)
              {
                v473 = v49;
                v485 = v46;
                v476 = v50;
                if ((a6 & 0x8000000000000000) != 0)
                  goto LABEL_452;
                v58 = (unint64_t)v53;
                v59 = v57 - v51;
                v60 = 2 * v59;
                if (2 * v59 <= a6)
                  v60 = a6;
                if (v59 >= 0x3FFFFFFFFFFFFFFFLL)
                  v61 = 0x7FFFFFFFFFFFFFFFLL;
                else
                  v61 = v60;
                v470 = (char *)operator new(v61);
                v468 = &v470[v58];
                bzero(&v470[v58], v55);
                v62 = v61;
                if (v52 == (char *)v51)
                {
                  v56 = v498;
                  v54 = a6;
                  v47 = v34 - 2;
                  v50 = v476;
                  v46 = v485;
                  v49 = v473;
                  v297 = &v470[v58];
                  v63 = v470;
                  goto LABEL_393;
                }
                if (v58 < 8)
                {
                  v56 = v498;
                  v54 = a6;
                  v47 = v34 - 2;
                  v50 = v476;
                  v46 = v485;
                  v49 = v473;
                  v64 = &v470[v58];
                  v63 = v470;
                  goto LABEL_390;
                }
                v64 = &v470[v58];
                v63 = v470;
                v56 = v498;
                v54 = a6;
                v47 = v34 - 2;
                v50 = v476;
                v46 = v485;
                v49 = v473;
                if ((unint64_t)(v51 - (_QWORD)v470) >= 0x20)
                {
                  if (v58 < 0x20)
                  {
                    v308 = 0;
                    goto LABEL_320;
                  }
                  v308 = v58 & 0xFFFFFFFFFFFFFFE0;
                  v343 = &v470[v58 - 16];
                  v344 = v52 - 16;
                  v345 = v58 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v346 = *(_OWORD *)v344;
                    *((_OWORD *)v343 - 1) = *((_OWORD *)v344 - 1);
                    *(_OWORD *)v343 = v346;
                    v343 -= 32;
                    v344 -= 32;
                    v345 -= 32;
                  }
                  while (v345);
                  if (v58 == v308)
                    goto LABEL_392;
                  if ((v58 & 0x18) != 0)
                  {
LABEL_320:
                    v64 = &v468[-(v58 & 0xFFFFFFFFFFFFFFF8)];
                    v347 = &v52[-v308 - v51 - 8 + (_QWORD)v470];
                    v348 = &v52[-v308 - 8];
                    v349 = v308 - (v58 & 0xFFFFFFFFFFFFFFF8);
                    do
                    {
                      v350 = *(_QWORD *)v348;
                      v348 -= 8;
                      *(_QWORD *)v347 = v350;
                      v347 -= 8;
                      v349 += 8;
                    }
                    while (v349);
                    v52 -= v58 & 0xFFFFFFFFFFFFFFF8;
                    if (v58 == (v58 & 0xFFFFFFFFFFFFFFF8))
                      goto LABEL_392;
                    goto LABEL_390;
                  }
                  v64 = &v468[-v308];
                  v52 -= v308;
                }
LABEL_390:
                v399 = v64 - 1;
                do
                {
                  v400 = *--v52;
                  *v399-- = v400;
                }
                while (v52 != (char *)v51);
LABEL_392:
                v52 = (char *)v51;
                v297 = v63;
LABEL_393:
                *v56 = (uint64_t)v297;
                v56[1] = (uint64_t)&v63[v54];
                v56[2] = (uint64_t)&v63[v62];
                if (v52)
                {
                  v401 = v54;
                  operator delete(v52);
                  LODWORD(v54) = v401;
                  v49 = v473;
                  v46 = v485;
                  v50 = v476;
                  v47 = v34 - 2;
                }
                goto LABEL_395;
              }
              v483 = &v52[v55];
              v267 = v52;
              v268 = v50;
              v269 = v46;
              v270 = v49;
              bzero(v267, a6 - (_QWORD)v53);
              LODWORD(v54) = a6;
              v49 = v270;
              v46 = v269;
              v50 = v268;
              v47 = v34 - 2;
              v207 = (unint64_t)v483;
            }
            v56[1] = v207;
            goto LABEL_395;
          }
          v185 = v491 - (_QWORD)v53;
          if (v491 > (unint64_t)v53)
          {
            v186 = v498;
            v187 = v498[2];
            if (v187 - (uint64_t)v52 >= v185)
            {
              v484 = &v52[v185];
              v271 = v52;
              v272 = v50;
              v273 = v49;
              bzero(v271, v491 - (_QWORD)v53);
              v49 = v273;
              v46 = (_DWORD)v19 == 1;
              v50 = v272;
              v47 = v34 - 2;
              v498[1] = (uint64_t)v484;
              v192 = a6;
              goto LABEL_426;
            }
            v475 = v49;
            v479 = v50;
            if ((v491 & 0x8000000000000000) != 0)
LABEL_452:
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            v188 = (unint64_t)v53;
            v189 = v187 - v51;
            v190 = 2 * v189;
            if (2 * v189 <= v491)
              v190 = 4 * a6;
            if (v189 >= 0x3FFFFFFFFFFFFFFFLL)
              v191 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v191 = v190;
            v472 = v191;
            v469 = (char *)operator new(v191);
            v467 = &v469[v188];
            bzero(&v469[v188], v185);
            if (v52 == (char *)v51)
            {
              v186 = v498;
              v192 = a6;
              v47 = v34 - 2;
              v50 = v479;
              v46 = (_DWORD)v19 == 1;
              v49 = v475;
              v194 = v469;
              v193 = v472;
              v299 = v467;
            }
            else
            {
              if (v188 < 8)
              {
                v186 = v498;
                v192 = a6;
                v47 = v34 - 2;
                v50 = v479;
                v46 = (_DWORD)v19 == 1;
                v49 = v475;
                v194 = v469;
                v193 = v472;
                v195 = v467;
                goto LABEL_421;
              }
              v309 = v188;
              v194 = v469;
              v193 = v472;
              v186 = v498;
              v192 = a6;
              v47 = v34 - 2;
              v50 = v479;
              v46 = (_DWORD)v19 == 1;
              v49 = v475;
              v195 = v467;
              if ((unint64_t)(v51 - (_QWORD)v469) < 0x20)
                goto LABEL_421;
              if (v309 >= 0x20)
              {
                v310 = v309 & 0xFFFFFFFFFFFFFFE0;
                v351 = &v469[v309 - 16];
                v352 = v52 - 16;
                v353 = v309 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v354 = *(_OWORD *)v352;
                  *((_OWORD *)v351 - 1) = *((_OWORD *)v352 - 1);
                  *(_OWORD *)v351 = v354;
                  v351 -= 32;
                  v352 -= 32;
                  v353 -= 32;
                }
                while (v353);
                if (v309 != v310)
                {
                  if ((v309 & 0x18) == 0)
                  {
                    v195 = &v467[-v310];
                    v52 -= v310;
                    goto LABEL_421;
                  }
                  goto LABEL_328;
                }
              }
              else
              {
                v310 = 0;
LABEL_328:
                v195 = &v467[-(v309 & 0xFFFFFFFFFFFFFFF8)];
                v355 = &v52[-v310 - v51 - 8 + (_QWORD)v469];
                v356 = &v52[-v310 - 8];
                v357 = v310 - (v309 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v358 = *(_QWORD *)v356;
                  v356 -= 8;
                  *(_QWORD *)v355 = v358;
                  v355 -= 8;
                  v357 += 8;
                }
                while (v357);
                v52 -= v309 & 0xFFFFFFFFFFFFFFF8;
                if (v309 != (v309 & 0xFFFFFFFFFFFFFFF8))
                {
LABEL_421:
                  v441 = v195 - 1;
                  do
                  {
                    v442 = *--v52;
                    *v441-- = v442;
                  }
                  while (v52 != (char *)v51);
                }
              }
              v52 = (char *)v51;
              v299 = v194;
            }
            *v186 = (uint64_t)v299;
            v186[1] = (uint64_t)&v194[v491];
            v186[2] = (uint64_t)&v194[v193];
            if (v52)
            {
              operator delete(v52);
              v49 = v475;
              v46 = (_DWORD)v19 == 1;
              v50 = v479;
              v47 = v34 - 2;
            }
            goto LABEL_426;
          }
          v186 = v498;
          v192 = a6;
          if (v491 < (unint64_t)v53)
            v498[1] = v51 + v491;
LABEL_426:
          v443 = (int32x4_t *)*v186;
          v444 = *(uint64_t **)v186[3];
          LODWORD(v504) = 0;
          BYTE4(v504) = a4;
          BYTE5(v504) = a5;
          WORD3(v504) = 0;
          v505 = 1;
          v506 = 0;
          v507 = v46;
          v508 = 0;
          if (v49 >= 4)
            v445 = 1;
          else
            v445 = v49;
          v509 = v445;
          if (v50 == 2)
            v446 = 4;
          else
            v446 = 1;
          if (!v50)
            v446 = 0;
          v510 = v446;
          *((_QWORD *)&v504 + 1) = __PAIR64__(v192, v47);
          v447 = *v444;
          v511 = (uint64_t)&v499[v501 + 3 + v29];
          v512 = v47;
          result = gcl::polyline::DecoderImpl::decompressAttributes(v447, (uint64_t)&v511, v443, 0, &v504);
          if ((_DWORD)result)
            goto LABEL_448;
          v448 = ~(-1 << v19);
          v16 = a6;
          if (a6 >= 4)
          {
            a1 = v498;
            if (&v443->i8[v491] <= (__int8 *)a7 || v443 >= v489)
            {
              v450 = vdupq_n_s64(v25);
              v451 = (uint64x2_t)vdupq_n_s64(v19);
              v452 = (int8x16_t)vdupq_n_s64(v448);
              v453 = vdup_n_s32(v19 > 0x3F);
              v454 = (int32x2_t *)&v443->u64[1];
              v455 = a6 & 0xFFFFFFFFFFFFFFFCLL;
              v456 = a7 + 1;
              do
              {
                v457 = (int8x16_t)vaddw_s32(v450, v454[-1]);
                v458 = (int8x16_t)vaddw_s32(v450, *v454);
                v459.i64[0] = v453.u32[0];
                v459.i64[1] = v453.u32[1];
                v460 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v459, 0x3FuLL));
                v461 = vbslq_s8(v460, v458, vorrq_s8((int8x16_t)vshlq_u64(*v456, v451), vandq_s8(v458, v452)));
                v456[-1] = (uint64x2_t)vbslq_s8(v460, v457, vorrq_s8((int8x16_t)vshlq_u64(v456[-1], v451), vandq_s8(v457, v452)));
                *v456 = (uint64x2_t)v461;
                v454 += 2;
                v456 += 2;
                v455 -= 4;
              }
              while (v455);
              v449 = a6 & 0xFFFFFFFFFFFFFFFCLL;
              if (v490 == a6)
                goto LABEL_418;
            }
            else
            {
              v449 = 0;
            }
          }
          else
          {
            v449 = 0;
            a1 = v498;
          }
          v462 = a6 - v449;
          v463 = &a7->i8[8 * v449];
          v464 = &v443->i32[v449];
          do
          {
            v465 = *v464++;
            v466 = v25 + v465;
            if (v19 <= 0x3F)
              v466 = (*(_QWORD *)v463 << v19) | v466 & v448;
            *(_QWORD *)v463 = v466;
            v463 += 8;
            --v462;
          }
          while (v462);
LABEL_418:
          v18 = v501 + v34 + v29 + 1;
          a2 = v499;
          v17 = v500 + 1;
          if (v500 + 1 == v495)
            return 0;
          continue;
        case 2:
          v133 = (unsigned __int8 *)*a1;
          v134 = (unsigned __int8 *)a1[1];
          v135 = (char *)&v134[-*a1];
          v136 = __sz - (_QWORD)v135;
          if (__sz > (unint64_t)v135)
          {
            v137 = (unsigned __int8 *)a1[2];
            if (v137 - v134 >= v136)
            {
              bzero((void *)a1[1], __sz - (_QWORD)v135);
              a1[1] = (uint64_t)&v134[v136];
              v142 = a6;
              goto LABEL_340;
            }
            v486 = (unint64_t)&v134[-*a1];
            if ((__sz & 0x8000000000000000) != 0)
              goto LABEL_452;
            v138 = v137 - v133;
            v139 = 2 * v138;
            if (2 * v138 <= __sz)
              v139 = __sz;
            if (v138 >= 0x3FFFFFFFFFFFFFFFLL)
              v140 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v140 = v139;
            v481 = (char *)operator new(v140);
            v478 = &v481[v486];
            bzero(&v481[v486], v136);
            v141 = v140;
            if (v134 == v133)
            {
              a1 = v498;
              v142 = a6;
              v284 = &v481[v486];
              v143 = v481;
              goto LABEL_338;
            }
            if (v486 < 8)
            {
              a1 = v498;
              v142 = a6;
              v144 = &v481[v486];
              v143 = v481;
              goto LABEL_335;
            }
            v144 = &v481[v486];
            v143 = v481;
            a1 = v498;
            v142 = a6;
            if ((unint64_t)(v133 - (unsigned __int8 *)v481) >= 0x20)
            {
              if (v486 < 0x20)
              {
                v286 = 0;
                goto LABEL_296;
              }
              v286 = v486 & 0xFFFFFFFFFFFFFFE0;
              v319 = &v481[v486 - 16];
              v320 = (char *)(v134 - 16);
              v321 = v486 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v322 = *(_OWORD *)v320;
                *((_OWORD *)v319 - 1) = *((_OWORD *)v320 - 1);
                *(_OWORD *)v319 = v322;
                v319 -= 32;
                v320 -= 32;
                v321 -= 32;
              }
              while (v321);
              if (v486 == v286)
                goto LABEL_337;
              if ((v486 & 0x18) != 0)
              {
LABEL_296:
                v144 = &v478[-(v486 & 0xFFFFFFFFFFFFFFF8)];
                v323 = &v481[&v134[-v286] - v133 - 8];
                v324 = (char *)&v134[-v286 - 8];
                v325 = v286 - (v486 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v326 = *(_QWORD *)v324;
                  v324 -= 8;
                  *(_QWORD *)v323 = v326;
                  v323 -= 8;
                  v325 += 8;
                }
                while (v325);
                v134 -= v486 & 0xFFFFFFFFFFFFFFF8;
                if (v486 == (v486 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_337;
                goto LABEL_335;
              }
              v144 = &v478[-v286];
              v134 -= v286;
            }
LABEL_335:
            v359 = v144 - 1;
            do
            {
              v360 = *--v134;
              *v359-- = v360;
            }
            while (v134 != v133);
LABEL_337:
            v134 = v133;
            v284 = v143;
LABEL_338:
            *a1 = (uint64_t)v284;
            a1[1] = (uint64_t)&v143[__sz];
            a1[2] = (uint64_t)&v143[v141];
            if (v134)
              operator delete(v134);
            goto LABEL_340;
          }
          v142 = a6;
          if (__sz < (unint64_t)v135)
            a1[1] = (uint64_t)&v133[__sz];
LABEL_340:
          v361 = (int64x2_t *)*a1;
          result = mgcl::muid::decompress((mgcl::muid *)&v499[v501 + 1 + v29], (const char *)v34, 0, 0, *a1, (unint64_t *)8, v142);
          if ((_DWORD)result)
            return result;
          v362 = ~(-1 << v19);
          v16 = a6;
          if (a6 >= 4)
          {
            a1 = v498;
            a2 = v499;
            if (&v361->i8[__sz] <= (__int8 *)a7 || v361 >= (int64x2_t *)v489)
            {
              v364 = vdupq_n_s64(v25);
              v365 = (uint64x2_t)vdupq_n_s64(v19);
              v366 = (int8x16_t)vdupq_n_s64(v362);
              v367 = vdup_n_s32(v19 > 0x3F);
              v368 = v361 + 1;
              v369 = a6 & 0xFFFFFFFFFFFFFFFCLL;
              v370 = a7 + 1;
              do
              {
                v371 = (int8x16_t)vaddq_s64(v368[-1], v364);
                v372 = (int8x16_t)vaddq_s64(*v368, v364);
                v373.i64[0] = v367.u32[0];
                v373.i64[1] = v367.u32[1];
                v374 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v373, 0x3FuLL));
                v375 = vbslq_s8(v374, v372, vorrq_s8((int8x16_t)vshlq_u64(*v370, v365), vandq_s8(v372, v366)));
                v370[-1] = (uint64x2_t)vbslq_s8(v374, v371, vorrq_s8((int8x16_t)vshlq_u64(v370[-1], v365), vandq_s8(v371, v366)));
                *v370 = (uint64x2_t)v375;
                v368 += 2;
                v370 += 2;
                v369 -= 4;
              }
              while (v369);
              v363 = a6 & 0xFFFFFFFFFFFFFFFCLL;
              if (v490 == a6)
                goto LABEL_349;
            }
            else
            {
              v363 = 0;
            }
          }
          else
          {
            v363 = 0;
            a1 = v498;
            a2 = v499;
          }
          v376 = a6 - v363;
          v377 = v363;
          v378 = &a7->i8[8 * v363];
          v379 = &v361->i64[v377];
          do
          {
            v380 = *v379++;
            v381 = v380 + v25;
            if (v19 <= 0x3F)
              v381 = (*(_QWORD *)v378 << v19) | v381 & v362;
            *(_QWORD *)v378 = v381;
            v378 += 8;
            --v376;
          }
          while (v376);
LABEL_349:
          v18 = v501 + v34 + v29 + 1;
          v17 = v500 + 1;
          if (v500 + 1 == v495)
            return 0;
          continue;
        case 3:
          v102 = (unsigned __int8 *)*a1;
          v101 = (unsigned __int8 *)a1[1];
          if (v101 != (unsigned __int8 *)*a1)
          {
            a1[1] = (uint64_t)v102;
            v101 = v102;
          }
          if (a1[2] - (uint64_t)v102 >= __sz)
            goto LABEL_83;
          if ((__sz & 0x8000000000000000) != 0)
            goto LABEL_452;
          v103 = operator new(__sz);
          v104 = v101 - v102;
          v105 = &v103[v101 - v102];
          v106 = v105;
          a1 = v498;
          a2 = v499;
          v16 = a6;
          if (v101 == v102)
            goto LABEL_81;
          v106 = v103;
          if (v104 < 8 || (unint64_t)(v102 - v103) < 0x20)
          {
            v107 = v101;
            v108 = &v103[v101 - v102];
            goto LABEL_79;
          }
          if (v104 >= 0x20)
          {
            v285 = v104 & 0xFFFFFFFFFFFFFFE0;
            v300 = &v103[v104 - 16];
            v301 = v101 - 16;
            v302 = v104 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v303 = *(_OWORD *)v301;
              *(v300 - 1) = *((_OWORD *)v301 - 1);
              *v300 = v303;
              v300 -= 2;
              v301 -= 32;
              v302 -= 32;
            }
            while (v302);
            if (v104 == v285)
              goto LABEL_81;
            if ((v104 & 0x18) == 0)
            {
              v108 = &v105[-v285];
              v107 = &v101[-v285];
LABEL_79:
              v109 = v108 - 1;
              do
              {
                v110 = *--v107;
                *v109-- = v110;
              }
              while (v107 != v102);
              goto LABEL_81;
            }
          }
          else
          {
            v285 = 0;
          }
          v107 = &v101[-(v104 & 0xFFFFFFFFFFFFFFF8)];
          v108 = &v105[-(v104 & 0xFFFFFFFFFFFFFFF8)];
          v304 = &v103[&v101[-v285] - v102 - 8];
          v305 = &v101[-v285 - 8];
          v306 = v285 - (v104 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v307 = *(_QWORD *)v305;
            v305 -= 8;
            *v304-- = v307;
            v306 += 8;
          }
          while (v306);
          if (v104 != (v104 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_79;
LABEL_81:
          *v498 = (uint64_t)v106;
          v498[1] = (uint64_t)v105;
          v498[2] = (uint64_t)&v103[__sz];
          if (v102)
            operator delete(v102);
LABEL_83:
          v111 = 0;
          v112 = v501 + v29 + 1;
          v113 = v495;
          v114 = v500;
          do
          {
            v115 = 0;
            v116 = 0;
            v117 = 0;
            v118 = v112;
            v119 = &a2[v112];
            do
            {
              v120 = (char)v119[v116];
              v117 |= (unint64_t)(v119[v116] & 0x7F) << v115;
              v121 = v116 + 1;
              if (v116 > 8)
                break;
              v115 += 7;
              ++v116;
            }
            while (v120 < 0);
            v122 = v117 + v25;
            if (v19 <= 0x3F)
              v122 = (a7->i64[v111] << v19) | v122 & ~(-1 << v19);
            v112 = v118 + v121;
            a7->i64[v111++] = v122;
          }
          while (v111 != v16);
          goto LABEL_8;
        case 4:
          v123 = (uint64_t *)operator new();
          v124 = v123;
          v125 = v492 - v501 - v29;
          a2 = v499;
          *v123 = (uint64_t)&v499[v501 + 1 + v29];
          v123[1] = v125;
          v123[2] = 0;
          v126 = 8 * v125;
          if (!v126)
          {
            v131 = 0;
            v16 = a6;
LABEL_95:
            v132 = 1;
            goto LABEL_158;
          }
          v127 = (char *)*v123;
          v128 = *(unsigned __int8 *)*v123;
          v123[2] = 1;
          v129 = (v128 >> 6) & 2 | (*v127 >> 6) & 1;
          v123[2] = 2;
          v130 = (*v127 >> 5) & 1 | (2 * v129);
          v123[2] = 3;
          v16 = a6;
          if (v130 == 2)
          {
            v232 = *v127;
            v123[2] = 4;
            v233 = v232 & 0x10 | *v127 & 0xF;
            v123[2] = 5;
            v234 = *v127;
            v123[2] = 6;
            v235 = *v127;
            v123[2] = 7;
            v236 = v233 & 0xFFFFFFF8 | v234 & 4 | v235 & 2 | *v127 & 1;
            v123[2] = 8;
            LODWORD(v504) = v236;
            if (v126 < 0xD)
            {
              DWORD1(v504) = 0;
              goto LABEL_231;
            }
            v274 = v127[1];
            v123[2] = 9;
            v275 = (v274 >> 6) & 2 | (v127[1] >> 6) & 1;
            v123[2] = 10;
            v276 = v127[1];
            v123[2] = 11;
            v277 = (4 * v275) | (v276 >> 4) & 2 | (v127[1] >> 4) & 1;
            v123[2] = 12;
            v278 = (2 * v277) | (v127[1] >> 3) & 1;
            v123[2] = 13;
            DWORD1(v504) = v278;
            if (v126 >= 0x12)
            {
              v237 = v127[1] >> 2;
              v123[2] = 14;
              v238 = (v127[1] >> 1) & 1 | (2 * (v237 & 1));
              v123[2] = 15;
              LOBYTE(v237) = v127[1];
              v123[2] = 16;
              v239 = (4 * v238) | (2 * (v237 & 1)) | (v127[2] >> 7) & 1;
              v123[2] = 17;
              v240 = (v127[2] >> 6) & 1 | (2 * v239);
              v123[2] = 18;
            }
            else
            {
LABEL_231:
              v240 = 0;
            }
            DWORD2(v504) = v240;
            v279 = (uint64_t *)a7;
            v280 = a6;
            do
            {
              v281 = v25 + geo::ReadBitstream::unpackRice2(v124, &v504);
              if (v19 <= 0x3F)
                v281 = (*v279 << v19) | v281 & ~(-1 << v19);
              *v279++ = v281;
              --v280;
            }
            while (v280);
            v131 = v124[2];
            a1 = v498;
            v16 = a6;
            goto LABEL_237;
          }
          if (v130 == 1)
          {
            v217 = 0;
            v218 = *v127;
            v123[2] = 4;
            v219 = v218 & 0x10 | *v127 & 0xF;
            v123[2] = 5;
            v220 = *v127;
            v123[2] = 6;
            v221 = v219 & 0xFFFFFFF8 | v220 & 4 | *v127 & 3;
            v123[2] = 7;
            v222 = v221 & 0xFFFFFFFE | *v127 & 1;
            v123[2] = 8;
            v131 = 8;
            a1 = v498;
            while (v131 + 1 > v126)
            {
              v223 = 0;
              v224 = 0;
              if ((_DWORD)v222)
                goto LABEL_196;
LABEL_200:
              v231 = v25 + (v224 | (v223 << v222));
              if (v19 <= 0x3F)
                v231 = (a7->i64[v217] << v19) | v231 & ~(-1 << v19);
              a7->i64[v217++] = v231;
              if (v217 == a6)
                goto LABEL_237;
            }
            v225 = 0;
            v223 = 8 * (v488 - v501 - v29) - v131;
            v226 = v36 - v131;
            while (1)
            {
              v227 = v131++;
              v228 = v127[v227 >> 3];
              v124[2] = v131;
              if (((v228 >> (~(_BYTE)v227 & 7)) & 1) == 0)
                break;
              if (v226 == ++v225)
              {
                v131 = v227 + 1;
                v224 = 0;
                if ((_DWORD)v222)
                  goto LABEL_196;
                goto LABEL_200;
              }
            }
            v223 = v225;
            v131 = v227 + 1;
            v224 = 0;
            if (!(_DWORD)v222)
              goto LABEL_200;
LABEL_196:
            if (v131 + v222 <= v126)
            {
              v229 = 0;
              v230 = -v222;
              do
              {
                v224 = (v127[v131 >> 3] >> (~(_BYTE)v131 & 7)) & 1 | (2 * v229);
                v124[2] = ++v131;
                v229 = v224;
                v175 = __CFADD__(v230++, 1);
              }
              while (!v175);
            }
            goto LABEL_200;
          }
          v131 = 3;
          if (v130)
            goto LABEL_451;
          if (v126 < 8)
            goto LABEL_95;
          v196 = (_BYTE *)*v123;
          v197 = *(unsigned __int8 *)*v123 >> 4;
          v123[2] = 4;
          v198 = (*v196 >> 3) & 1 | (2 * (v197 & 1));
          v123[2] = 5;
          v199 = *v196 >> 2;
          v123[2] = 6;
          v200 = (4 * v198) | (2 * (v199 & 1)) | (*v196 >> 1) & 1;
          v123[2] = 7;
          LODWORD(v196) = *v196 & 1;
          v123[2] = 8;
          v132 = (v196 | (2 * v200)) + 1;
          v131 = 8;
LABEL_158:
          a1 = v498;
          for (i = 0; i != v16; ++i)
          {
            if (v131 + v132 <= v126)
            {
              v202 = 0;
              v203 = *v123;
              v204 = v132;
              do
              {
                v202 = (*(unsigned __int8 *)(v203 + (v131 >> 3)) >> (~(_BYTE)v131 & 7)) & 1 | (2 * v202);
                v123[2] = ++v131;
                --v204;
              }
              while (v204);
            }
            else
            {
              v202 = 0;
            }
            v205 = v202 + v25;
            if (v19 <= 0x3F)
              v205 = (a7->i64[i] << v19) | v205 & ~(-1 << v19);
            a7->i64[i] = v205;
          }
LABEL_237:
          v282 = v131 >> 3;
          if ((v131 & 7) != 0)
            ++v282;
          v283 = v501 + v29;
LABEL_256:
          v18 = v283 + v282 + 1;
          MEMORY[0x18D76437C](v124, 0x1050C40E4AAA758);
          v17 = v500 + 1;
          if (v500 + 1 == v495)
            return 0;
          break;
        default:
          return 3;
      }
    }
    v65 = 0;
    v66 = &a2[v21];
    v67 = 1;
    v68 = v496 - 8 * v18;
    do
    {
      v69 = v67;
      v70 = v68;
      v71 = (char)v66[v23];
      v65 |= (unint64_t)(v66[v23] & 0x7F) << v22;
      if (v23 > 8)
        break;
      ++v23;
      v22 += 7;
      ++v67;
      v68 -= 8;
    }
    while (v71 < 0);
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v75 = &a2[v18];
    do
    {
      v76 = v70;
      v77 = (char)v75[v69 + 1];
      v74 |= (unint64_t)(v75[++v69] & 0x7F) << v72;
      if (v73 > 8)
        break;
      ++v73;
      v72 += 7;
      v70 -= 8;
    }
    while (v77 < 0);
    switch(a2[v18])
    {
      case 1u:
        v502 = v18;
        if (!a1[3])
        {
          v78 = (_QWORD *)operator new();
          v79 = (_QWORD *)operator new();
          v80 = operator new();
          a1 = v498;
          a2 = v499;
          *(_QWORD *)(v80 + 20) = 0;
          *(_QWORD *)(v80 + 12) = 0;
          *(_DWORD *)(v80 + 36) = 0;
          *(_QWORD *)(v80 + 28) = 0;
          *(_WORD *)(v80 + 40) = 257;
          *(_QWORD *)(v80 + 44) = 0;
          *(_QWORD *)(v80 + 60) = 0;
          *(_QWORD *)(v80 + 52) = 0;
          *(_DWORD *)(v80 + 67) = 0;
          *(_DWORD *)(v80 + 72) = 0;
          *(_WORD *)(v80 + 76) = 257;
          *(_QWORD *)(v80 + 136) = 0;
          *(_OWORD *)(v80 + 80) = 0u;
          *(_OWORD *)(v80 + 96) = 0u;
          *(_OWORD *)(v80 + 112) = 0u;
          *v79 = v80;
          *v78 = v79;
          v81 = (_QWORD **)v498[3];
          v498[3] = (uint64_t)v78;
          if (v81)
          {
            v82 = *v81;
            *v81 = 0;
            if (v82)
            {
              v83 = (_QWORD *)*v82;
              *v82 = 0;
              if (v83)
              {
                v84 = (void *)v83[13];
                if (v84)
                {
                  v83[14] = v84;
                  operator delete(v84);
                }
                v85 = (void *)v83[10];
                if (v85)
                {
                  v83[11] = v85;
                  operator delete(v85);
                }
                MEMORY[0x18D76437C](v83, 0x1070C40ADA6D0DELL);
              }
              MEMORY[0x18D76437C](v82, 0x20C4093837F09);
            }
            MEMORY[0x18D76437C](v81, 0x20C4093837F09);
          }
        }
        v86 = v74 - 2;
        if (v74 < 2)
          return 3;
        v87 = &a2[v502 + v69];
        v88 = v87[1];
        v89 = v87[2];
        v90 = *a1;
        v91 = (char *)a1[1];
        v92 = (unint64_t)&v91[-*a1];
        v93 = a6 - v92;
        if (a6 > v92)
        {
          v94 = (unsigned __int8 *)a1[2];
          if (v94 - (unsigned __int8 *)v91 >= v93)
          {
            v241 = (unsigned __int8 *)&v91[v93];
            v242 = v89;
            v243 = v88;
            bzero((void *)a1[1], v93);
            v88 = v243;
            v89 = v242;
            v86 = v74 - 2;
            a1[1] = (uint64_t)v241;
            LODWORD(v93) = a6;
            goto LABEL_373;
          }
          v477 = v88;
          v480 = v89;
          if ((a6 & 0x8000000000000000) != 0)
            goto LABEL_453;
          v95 = (unint64_t)&v94[-v90];
          v96 = 2 * v95;
          if (2 * v95 <= a6)
            v96 = a6;
          if (v95 >= 0x3FFFFFFFFFFFFFFFLL)
            v97 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v97 = v96;
          v474 = (char *)operator new(v97);
          v471 = &v474[v92];
          bzero(&v474[v92], v93);
          v98 = v97;
          if (v91 == (char *)v90)
          {
            a1 = v498;
            v93 = a6;
            v86 = v74 - 2;
            v89 = v480;
            v88 = v477;
            v294 = &v474[v92];
            v100 = v474;
            goto LABEL_371;
          }
          if (v92 < 8)
          {
            a1 = v498;
            v93 = a6;
            v86 = v74 - 2;
            v89 = v480;
            v88 = v477;
            v99 = &v474[v92];
            v100 = v474;
            goto LABEL_368;
          }
          v99 = &v474[v92];
          v100 = v474;
          a1 = v498;
          v93 = a6;
          v86 = v74 - 2;
          v89 = v480;
          v88 = v477;
          if ((unint64_t)(v90 - (_QWORD)v474) >= 0x20)
          {
            if (v92 < 0x20)
            {
              v298 = 0;
              goto LABEL_312;
            }
            v298 = v92 & 0xFFFFFFFFFFFFFFE0;
            v335 = &v474[v92 - 16];
            v336 = v91 - 16;
            v337 = v92 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v338 = *(_OWORD *)v336;
              *((_OWORD *)v335 - 1) = *((_OWORD *)v336 - 1);
              *(_OWORD *)v335 = v338;
              v335 -= 32;
              v336 -= 32;
              v337 -= 32;
            }
            while (v337);
            if (v92 == v298)
              goto LABEL_370;
            if ((v92 & 0x18) != 0)
            {
LABEL_312:
              v99 = &v471[-(v92 & 0xFFFFFFFFFFFFFFF8)];
              v339 = &v91[-v298 - v90 - 8 + (_QWORD)v474];
              v340 = &v91[-v298 - 8];
              v341 = v298 - (v92 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v342 = *(_QWORD *)v340;
                v340 -= 8;
                *(_QWORD *)v339 = v342;
                v339 -= 8;
                v341 += 8;
              }
              while (v341);
              v91 -= v92 & 0xFFFFFFFFFFFFFFF8;
              if (v92 == (v92 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_370;
              goto LABEL_368;
            }
            v99 = &v471[-v298];
            v91 -= v298;
          }
LABEL_368:
          v389 = v99 - 1;
          do
          {
            v390 = *--v91;
            *v389-- = v390;
          }
          while (v91 != (char *)v90);
LABEL_370:
          v91 = (char *)v90;
          v294 = v100;
LABEL_371:
          *a1 = (uint64_t)v294;
          a1[1] = (uint64_t)&v100[v93];
          a1[2] = (uint64_t)&v100[v98];
          if (v91)
          {
            operator delete(v91);
            v88 = v477;
            v89 = v480;
            v86 = v74 - 2;
          }
          goto LABEL_373;
        }
        LODWORD(v93) = a6;
        if (a6 < v92)
          a1[1] = v90 + a6;
LABEL_373:
        v391 = (unsigned __int8 *)*a1;
        v392 = *(uint64_t **)a1[3];
        LODWORD(v504) = 0;
        BYTE4(v504) = a4;
        BYTE5(v504) = a5;
        WORD3(v504) = 0;
        v505 = 1;
        v506 = 0;
        v507 = 1;
        v508 = 0;
        if (v88 >= 4)
          v393 = 1;
        else
          v393 = v88;
        v509 = v393;
        if (v89 == 2)
          v394 = 4;
        else
          v394 = 1;
        if (!v89)
          v394 = 0;
        v510 = v394;
        *((_QWORD *)&v504 + 1) = __PAIR64__(v93, v86);
        v395 = *v392;
        v511 = (uint64_t)&v499[v502 + 3 + v69];
        v512 = v86;
        result = gcl::polyline::DecoderImpl::decompressAttributes(v395, (uint64_t)&v511, (uint64_t)v391, 0, &v504);
        if (!(_DWORD)result)
        {
          v396 = (uint64_t *)a7;
          a2 = v499;
          v16 = a6;
          v397 = a6;
          do
          {
            v398 = *v391++;
            if (v65 + v398)
              *v396 = -*v396;
            ++v396;
            --v397;
          }
          while (v397);
          v388 = (const char *)(v502 + v74);
          goto LABEL_387;
        }
LABEL_448:
        if ((result - 1) >= 4)
          return 5;
        return result;
      case 2u:
        v503 = v18;
        v171 = *a1;
        v172 = (char *)a1[1];
        v173 = (unint64_t)&v172[-*a1];
        v174 = a1;
        v175 = __sz >= v173;
        v176 = __sz - v173;
        if (__sz > v173)
        {
          v177 = v174[2];
          if (v177 - (uint64_t)v172 >= v176)
          {
            bzero(v172, __sz - v173);
            v174[1] = (uint64_t)&v172[v176];
            v182 = v174;
            v206 = v503;
            goto LABEL_361;
          }
          if ((__sz & 0x8000000000000000) != 0)
LABEL_453:
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          v178 = v177 - v171;
          v179 = 2 * v178;
          if (2 * v178 <= __sz)
            v179 = __sz;
          if (v178 >= 0x3FFFFFFFFFFFFFFFLL)
            v180 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v180 = v179;
          v181 = v180;
          v487 = (char *)operator new(v180);
          v482 = &v487[v173];
          bzero(&v487[v173], v176);
          if (v172 == (char *)v171)
          {
            v182 = v498;
            v206 = v503;
            v183 = v487;
            v293 = (uint64_t)v482;
          }
          else
          {
            if (v173 < 8)
            {
              v182 = v498;
              v183 = v487;
              v184 = &v487[v173];
              goto LABEL_356;
            }
            v183 = v487;
            v182 = v498;
            v184 = &v487[v173];
            if ((unint64_t)(v171 - (_QWORD)v487) < 0x20)
              goto LABEL_356;
            if (v173 >= 0x20)
            {
              v296 = v173 & 0xFFFFFFFFFFFFFFE0;
              v327 = &v487[v173 - 16];
              v328 = v172 - 16;
              v329 = v173 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v330 = *(_OWORD *)v328;
                *((_OWORD *)v327 - 1) = *((_OWORD *)v328 - 1);
                *(_OWORD *)v327 = v330;
                v327 -= 32;
                v328 -= 32;
                v329 -= 32;
              }
              while (v329);
              if (v173 != v296)
              {
                if ((v173 & 0x18) == 0)
                {
                  v184 = &v482[-v296];
                  v172 -= v296;
                  goto LABEL_356;
                }
                goto LABEL_304;
              }
            }
            else
            {
              v296 = 0;
LABEL_304:
              v184 = &v482[-(v173 & 0xFFFFFFFFFFFFFFF8)];
              v331 = &v172[-v296 - v171 - 8 + (_QWORD)v487];
              v332 = &v172[-v296 - 8];
              v333 = v296 - (v173 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v334 = *(_QWORD *)v332;
                v332 -= 8;
                *(_QWORD *)v331 = v334;
                v331 -= 8;
                v333 += 8;
              }
              while (v333);
              v172 -= v173 & 0xFFFFFFFFFFFFFFF8;
              if (v173 != (v173 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_356:
                v382 = v184 - 1;
                do
                {
                  v383 = *--v172;
                  *v382-- = v383;
                }
                while (v172 != (char *)v171);
              }
            }
            v172 = (char *)v171;
            v293 = (uint64_t)v183;
            v206 = v503;
          }
          *v182 = v293;
          v182[1] = (uint64_t)&v183[__sz];
          v182[2] = (uint64_t)&v183[v181];
          if (v172)
            operator delete(v172);
          goto LABEL_361;
        }
        v182 = v174;
        v206 = v503;
        if (!v175)
          v174[1] = v171 + __sz;
LABEL_361:
        v384 = (uint64_t *)*v182;
        result = mgcl::muid::decompress((mgcl::muid *)&v499[v206 + 1 + v69], (const char *)v74, 0, 0, *v182, (unint64_t *)8, a6);
        if ((_DWORD)result)
          return result;
        v385 = (uint64_t *)a7;
        a2 = v499;
        v16 = a6;
        v386 = a6;
        do
        {
          v387 = *v384++;
          if (v387 != -v65)
            *v385 = -*v385;
          ++v385;
          --v386;
        }
        while (v386);
        v388 = (const char *)(v503 + v74);
LABEL_387:
        v18 = (uint64_t)&v388[v69 + 1];
        a1 = v498;
        v17 = v500 + 1;
        if (v500 + 1 == v495)
          return 0;
        continue;
      case 3u:
        v146 = (unsigned __int8 *)*a1;
        v145 = (unsigned __int8 *)a1[1];
        if (v145 != (unsigned __int8 *)*a1)
        {
          a1[1] = (uint64_t)v146;
          v145 = v146;
        }
        if (a1[2] - (uint64_t)v146 >= __sz)
          goto LABEL_119;
        if ((__sz & 0x8000000000000000) != 0)
          goto LABEL_453;
        v147 = operator new(__sz);
        v148 = v145 - v146;
        v149 = &v147[v145 - v146];
        v150 = v149;
        a1 = v498;
        a2 = v499;
        v16 = a6;
        if (v145 == v146)
          goto LABEL_117;
        v150 = v147;
        if (v148 < 8 || (unint64_t)(v146 - v147) < 0x20)
        {
          v151 = v145;
          v152 = &v147[v145 - v146];
          goto LABEL_115;
        }
        if (v148 >= 0x20)
        {
          v295 = v148 & 0xFFFFFFFFFFFFFFE0;
          v311 = &v147[v148 - 16];
          v312 = v145 - 16;
          v313 = v148 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v314 = *(_OWORD *)v312;
            *(v311 - 1) = *((_OWORD *)v312 - 1);
            *v311 = v314;
            v311 -= 2;
            v312 -= 32;
            v313 -= 32;
          }
          while (v313);
          if (v148 == v295)
            goto LABEL_117;
          if ((v148 & 0x18) == 0)
          {
            v152 = &v149[-v295];
            v151 = &v145[-v295];
LABEL_115:
            v153 = v152 - 1;
            do
            {
              v154 = *--v151;
              *v153-- = v154;
            }
            while (v151 != v146);
            goto LABEL_117;
          }
        }
        else
        {
          v295 = 0;
        }
        v151 = &v145[-(v148 & 0xFFFFFFFFFFFFFFF8)];
        v152 = &v149[-(v148 & 0xFFFFFFFFFFFFFFF8)];
        v315 = &v147[&v145[-v295] - v146 - 8];
        v316 = &v145[-v295 - 8];
        v317 = v295 - (v148 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v318 = *(_QWORD *)v316;
          v316 -= 8;
          *v315-- = v318;
          v317 += 8;
        }
        while (v317);
        if (v148 != (v148 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_115;
LABEL_117:
        *v498 = (uint64_t)v150;
        v498[1] = (uint64_t)v149;
        v498[2] = (uint64_t)&v147[__sz];
        if (v146)
          operator delete(v146);
LABEL_119:
        v155 = 0;
        v156 = v18 + v69 + 1;
        v113 = v495;
        v114 = v500;
        do
        {
          v157 = 0;
          v158 = 0;
          v159 = 0;
          v118 = v156;
          v160 = &a2[v156];
          do
          {
            v161 = (char)v160[v158];
            v159 |= (unint64_t)(v160[v158] & 0x7F) << v157;
            v121 = v158 + 1;
            if (v158 > 8)
              break;
            v157 += 7;
            ++v158;
          }
          while (v161 < 0);
          if (v159 != -v65)
            a7->i64[v155] = -a7->i64[v155];
          v156 = v118 + v121;
          ++v155;
        }
        while (v155 != v16);
LABEL_8:
        v18 = v118 + v121;
        v17 = v114 + 1;
        if (v17 == v113)
          return 0;
        continue;
      case 4u:
        v162 = (uint64_t *)operator new();
        v124 = v162;
        v163 = v492 - v18 - v69;
        a2 = v499;
        *v162 = (uint64_t)&v499[v18 + 1 + v69];
        v162[1] = v163;
        v162[2] = 0;
        v164 = 8 * v163;
        if (!v164)
        {
          v169 = 0;
          v16 = a6;
          goto LABEL_131;
        }
        v165 = (char *)*v162;
        v166 = *(unsigned __int8 *)*v162;
        v162[2] = 1;
        v167 = (v166 >> 6) & 2 | (*v165 >> 6) & 1;
        v162[2] = 2;
        v168 = (*v165 >> 5) & 1 | (2 * v167);
        v162[2] = 3;
        v16 = a6;
        if (v168 != 2)
        {
          if (v168 != 1)
          {
            v169 = 3;
            if (v168)
            {
LABEL_451:
              MEMORY[0x18D76437C](v124, 0x1050C40E4AAA758);
              return 3;
            }
            if (v164 >= 8)
            {
              v208 = (_BYTE *)*v162;
              v209 = *(unsigned __int8 *)*v162 >> 4;
              v162[2] = 4;
              v210 = (*v208 >> 3) & 1 | (2 * (v209 & 1));
              v162[2] = 5;
              v211 = *v208 >> 2;
              v162[2] = 6;
              v212 = (4 * v210) | (2 * (v211 & 1)) | (*v208 >> 1) & 1;
              v162[2] = 7;
              LODWORD(v208) = *v208 & 1;
              v162[2] = 8;
              v170 = (v208 | (2 * v212)) + 1;
              v169 = 8;
LABEL_177:
              a1 = v498;
              for (j = 0; j != v16; ++j)
              {
                if (v169 + v170 <= v164)
                {
                  v214 = 0;
                  v215 = *v162;
                  v216 = v170;
                  do
                  {
                    v214 = (*(unsigned __int8 *)(v215 + (v169 >> 3)) >> (~(_BYTE)v169 & 7)) & 1 | (2 * v214);
                    v162[2] = ++v169;
                    --v216;
                  }
                  while (v216);
                }
                else
                {
                  v214 = 0;
                }
                if (v214 != -v65)
                  a7->i64[j] = -a7->i64[j];
              }
LABEL_253:
              v282 = v169 >> 3;
              if ((v169 & 7) != 0)
                ++v282;
              v283 = v18 + v69;
              goto LABEL_256;
            }
LABEL_131:
            v170 = 1;
            goto LABEL_177;
          }
          v244 = 0;
          v245 = *v165;
          v162[2] = 4;
          v246 = v245 & 0x10 | *v165 & 0xF;
          v162[2] = 5;
          v247 = *v165;
          v162[2] = 6;
          v248 = v246 & 0xFFFFFFF8 | v247 & 4 | *v165 & 3;
          v162[2] = 7;
          v249 = v248 & 0xFFFFFFFE | *v165 & 1;
          v162[2] = 8;
          v169 = 8;
          a1 = v498;
          while (v169 + 1 > v164)
          {
            v250 = 0;
            v251 = 0;
            if ((_DWORD)v249)
              goto LABEL_218;
LABEL_222:
            if (v65 + (v251 | (v250 << v249)))
              a7->i64[v244] = -a7->i64[v244];
            if (++v244 == a6)
              goto LABEL_253;
          }
          v252 = 0;
          v250 = 8 * (v488 - v18 - v69) - v169;
          v253 = v76 - v169;
          while (1)
          {
            v254 = v169++;
            v255 = v165[v254 >> 3];
            v124[2] = v169;
            if (((v255 >> (~(_BYTE)v254 & 7)) & 1) == 0)
              break;
            if (v253 == ++v252)
            {
              v169 = v254 + 1;
              v251 = 0;
              if ((_DWORD)v249)
                goto LABEL_218;
              goto LABEL_222;
            }
          }
          v250 = v252;
          v169 = v254 + 1;
          v251 = 0;
          if (!(_DWORD)v249)
            goto LABEL_222;
LABEL_218:
          if (v169 + v249 <= v164)
          {
            v256 = 0;
            v257 = -v249;
            do
            {
              v251 = (v165[v169 >> 3] >> (~(_BYTE)v169 & 7)) & 1 | (2 * v256);
              v124[2] = ++v169;
              v256 = v251;
              v175 = __CFADD__(v257++, 1);
            }
            while (!v175);
          }
          goto LABEL_222;
        }
        v258 = *v165;
        v162[2] = 4;
        v259 = v258 & 0x10 | *v165 & 0xF;
        v162[2] = 5;
        v260 = *v165;
        v162[2] = 6;
        v261 = *v165;
        v162[2] = 7;
        v262 = v259 & 0xFFFFFFF8 | v260 & 4 | v261 & 2 | *v165 & 1;
        v162[2] = 8;
        LODWORD(v504) = v262;
        if (v164 >= 0xD)
        {
          v287 = v165[1];
          v162[2] = 9;
          v288 = (v287 >> 6) & 2 | (v165[1] >> 6) & 1;
          v162[2] = 10;
          v289 = v165[1];
          v162[2] = 11;
          v290 = (4 * v288) | (v289 >> 4) & 2 | (v165[1] >> 4) & 1;
          v162[2] = 12;
          v291 = (2 * v290) | (v165[1] >> 3) & 1;
          v162[2] = 13;
          a1 = v498;
          DWORD1(v504) = v291;
          if (v164 >= 0x12)
          {
            v263 = v165[1] >> 2;
            v162[2] = 14;
            v264 = (v165[1] >> 1) & 1 | (2 * (v263 & 1));
            v162[2] = 15;
            LOBYTE(v263) = v165[1];
            v162[2] = 16;
            v265 = (4 * v264) | (2 * (v263 & 1)) | (v165[2] >> 7) & 1;
            v162[2] = 17;
            v266 = (v165[2] >> 6) & 1 | (2 * v265);
            v162[2] = 18;
            goto LABEL_248;
          }
        }
        else
        {
          a1 = v498;
          DWORD1(v504) = 0;
        }
        v266 = 0;
LABEL_248:
        DWORD2(v504) = v266;
        v292 = (uint64_t *)a7;
        do
        {
          if (v65 + geo::ReadBitstream::unpackRice2(v124, &v504))
            *v292 = -*v292;
          ++v292;
          --v16;
        }
        while (v16);
        v169 = v124[2];
        v16 = a6;
        goto LABEL_253;
      default:
        return 3;
    }
  }
}

void sub_1885CD8A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D76437C](v2, 0x20C4093837F09);
  MEMORY[0x18D76437C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t mgcl::muid::decompress(mgcl::muid *this, const char *a2, uint64_t a3, const int *a4, uint64_t a5, unint64_t *a6, unint64_t a7)
{
  uint64_t result;
  int v9;
  int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  _BYTE v35[1024];
  uint64_t v36;
  _BYTE v37[6];
  _BYTE v38[14];
  char v39;

  result = 5;
  if (!this)
    return result;
  v9 = (int)a2;
  if (!a2)
    return result;
  v11 = (int)a6;
  v23 = a5;
  v24 = (int)a6;
  v25 = a3;
  v26 = (int)a4;
  v27 = a7;
  memset_pattern16(&v36, &memset_pattern_1, 0xAuLL);
  memset_pattern16(v37, &memset_pattern_1_0, 0x80uLL);
  memset_pattern16(v38, &memset_pattern_2_0, 0xAuLL);
  v39 = *(_BYTE *)this & 1;
  v29 = (char *)this + 1;
  v31 = 0xFFFF000000000000;
  *(_DWORD *)&v38[10] = 1081344;
  v34 = 0;
  v33 = 0x10FFFF0000;
  v28 = v9 - 1;
  if (v9 == 1)
  {
    v13 = -16777216;
    goto LABEL_9;
  }
  v13 = *((unsigned __int8 *)this + 1) << 24;
  if (v9 == 2)
  {
LABEL_9:
    v14 = v13 | 0xFF0000;
    goto LABEL_10;
  }
  v14 = v13 | (*((unsigned __int8 *)this + 2) << 16);
  if ((v9 - 1) <= 2)
  {
LABEL_10:
    v15 = v14 | 0xFF00;
    goto LABEL_11;
  }
  v15 = v14 | (*((unsigned __int8 *)this + 3) << 8);
  if (v9 == 4)
  {
LABEL_11:
    v16 = 255;
    goto LABEL_12;
  }
  v16 = *((unsigned __int8 *)this + 4);
LABEL_12:
  v32 = v16 | v15;
  v30 = 3;
  memcpy(v35, &gcl::ArithmeticDecoder::probUpdateLutInterleaved, sizeof(v35));
  if (a7)
  {
    v17 = 0;
    v18 = 0;
    LODWORD(v19) = -1;
    do
    {
      v19 = mgcl::muid::Decoder::decodeOrder((mgcl::muid::Decoder *)&v23) + v19;
      if ((v19 & 0x80000000) != 0 || v27 <= v19)
        break;
      v20 = mgcl::muid::Decoder::decodeDeltaMuidUnsigned((mgcl::muid::Decoder *)&v23);
      v21 = (v20 & 0xFFFFFFFFFFF00000) == 0 || v39 == 0;
      v22 = v18 & 0xFFFFFFFFFFF00000;
      if (v21)
        v22 = v18;
      v18 = v22 + v20;
      *(_QWORD *)(a5 + (int)v19 * v11) = v22 + v20;
      ++v17;
    }
    while (v17 < v27);
  }
  return 0;
}

uint64_t mgcl::muid::Decoder::decodeOrder(mgcl::muid::Decoder *this)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t result;

  v2 = mgcl::muid::Decoder::decEgk((uint64_t)this, (uint64_t)this + 1250);
  v3 = *((unsigned __int16 *)this + 630);
  v5 = *((_DWORD *)this + 17);
  v4 = *((_DWORD *)this + 18);
  if (v5 <= 0x40000000)
  {
    v6 = *((_DWORD *)this + 20);
    while (1)
    {
      v4 *= 2;
      *((_DWORD *)this + 20) = --v6;
      if (v6)
        goto LABEL_5;
      v9 = *((_QWORD *)this + 7);
      *((_QWORD *)this + 7) = v9 + 1;
      v10 = *((unsigned int *)this + 10);
      if (v9 + 1 >= v10)
      {
        v11 = 65280;
        v12 = v9 + 2;
        *((_QWORD *)this + 7) = v12;
        if (v12 >= v10)
        {
LABEL_11:
          v7 = 255;
          goto LABEL_4;
        }
      }
      else
      {
        v11 = *(unsigned __int8 *)(*((_QWORD *)this + 6) + v9 + 1) << 8;
        v12 = v9 + 2;
        *((_QWORD *)this + 7) = v12;
        if (v12 >= v10)
          goto LABEL_11;
      }
      v7 = *(unsigned __int8 *)(*((_QWORD *)this + 6) + v12);
LABEL_4:
      v4 |= v11 | v7;
      v6 = 16;
      *((_DWORD *)this + 20) = 16;
LABEL_5:
      v8 = 2 * v5;
      v14 = v5 >= 0x20000001;
      v5 *= 2;
      if (v14)
        goto LABEL_13;
    }
  }
  v8 = *((_DWORD *)this + 17);
LABEL_13:
  v13 = (HIWORD(v8) * v3) & 0xFFFF0000;
  v14 = v4 >= v13;
  *((_WORD *)this + 630) = *((_WORD *)this + ((v3 >> 7) & 0x1FE | (v4 >= v13)) + 44) + v3;
  if (v4 < v13)
    v15 = (HIWORD(v8) * v3) & 0xFFFF0000;
  else
    v15 = v8 - v13;
  if (v4 < v13)
    v13 = 0;
  if (v14)
    result = ~v2;
  else
    result = (v2 + 1);
  *((_DWORD *)this + 17) = v15;
  *((_DWORD *)this + 18) = v4 - v13;
  return result;
}

uint64_t mgcl::muid::Decoder::decEgk(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;

  v3 = 0;
  result = 0;
  v6 = *(_DWORD *)(a1 + 68);
  v5 = *(_DWORD *)(a1 + 72);
  v7 = 4;
  v8 = *(unsigned __int16 *)(a2 + 8);
  if (v6 >= 0x40000001)
    goto LABEL_12;
LABEL_2:
  v9 = *(_DWORD *)(a1 + 80);
  do
  {
    v5 *= 2;
    *(_DWORD *)(a1 + 80) = --v9;
    if (!v9)
    {
      v12 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v12 + 1;
      v13 = *(unsigned int *)(a1 + 40);
      if (v12 + 1 >= v13)
      {
        v14 = 65280;
        v15 = v12 + 2;
        *(_QWORD *)(a1 + 56) = v15;
        if (v15 >= v13)
        {
LABEL_11:
          v10 = 255;
          goto LABEL_4;
        }
      }
      else
      {
        v14 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v12 + 1) << 8;
        v15 = v12 + 2;
        *(_QWORD *)(a1 + 56) = v15;
        if (v15 >= v13)
          goto LABEL_11;
      }
      v10 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v15);
LABEL_4:
      v5 |= v14 | v10;
      v9 = 16;
      *(_DWORD *)(a1 + 80) = 16;
    }
    v11 = 2 * v6;
    v17 = v6 >= 0x20000001;
    v6 *= 2;
  }
  while (!v17);
  while (1)
  {
    v6 = (HIWORD(v11) * v8) & 0xFFFF0000;
    if (v5 < v6)
      v16 = 0;
    else
      v16 = (HIWORD(v11) * v8) & 0xFFFF0000;
    v17 = v5 >= v6;
    v18 = v11 - v6;
    *(_WORD *)(a2 + 2 * v7) = *(_WORD *)(a1 + 2 * ((v8 >> 7) & 0x1FE | (v5 >= v6)) + 88) + v8;
    v5 -= v16;
    if (v17)
      v6 = v18;
    *(_DWORD *)(a1 + 68) = v6;
    *(_DWORD *)(a1 + 72) = v5;
    if (!v17 || v3 == 31)
      break;
    result = (result + (1 << v3++));
    v17 = v7-- != 0;
    if (!v17)
      v7 = 0;
    v8 = *(unsigned __int16 *)(a2 + 2 * v7);
    if (v6 < 0x40000001)
      goto LABEL_2;
LABEL_12:
    v11 = v6;
  }
  if (v3)
  {
    while (v6 >= 0x40000001)
    {
      v20 = v6;
LABEL_29:
      v21 = (v20 >> 1) & 0x7FFF0000;
      v6 = v20 - v21;
      v22 = v5 >= v21;
      if (v5 < v21)
      {
        v6 = v21;
        v21 = 0;
      }
      v5 -= v21;
      *(_DWORD *)(a1 + 68) = v6;
      *(_DWORD *)(a1 + 72) = v5;
      result = ((v22 << --v3) + result);
      if (!v3)
        return result;
    }
    v23 = *(_DWORD *)(a1 + 80);
    while (1)
    {
      v5 *= 2;
      *(_DWORD *)(a1 + 80) = --v23;
      if (v23)
        goto LABEL_36;
      v25 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v25 + 1;
      v26 = *(unsigned int *)(a1 + 40);
      if (v25 + 1 >= v26)
      {
        v27 = 65280;
        v28 = v25 + 2;
        *(_QWORD *)(a1 + 56) = v28;
        if (v28 >= v26)
        {
LABEL_42:
          v24 = 255;
          goto LABEL_35;
        }
      }
      else
      {
        v27 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v25 + 1) << 8;
        v28 = v25 + 2;
        *(_QWORD *)(a1 + 56) = v28;
        if (v28 >= v26)
          goto LABEL_42;
      }
      v24 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v28);
LABEL_35:
      v5 |= v27 | v24;
      v23 = 16;
      *(_DWORD *)(a1 + 80) = 16;
LABEL_36:
      v20 = 2 * v6;
      v17 = v6 >= 0x20000001;
      v6 *= 2;
      if (v17)
        goto LABEL_29;
    }
  }
  return result;
}

uint64_t mgcl::muid::Decoder::decodeDeltaMuidUnsigned(mgcl::muid::Decoder *this)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  _WORD *v22;
  unsigned int v23;
  unsigned int v24;
  _BOOL8 v25;
  unsigned int v26;
  char *v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t result;

  v2 = *((unsigned __int16 *)this + 631);
  v4 = *((_DWORD *)this + 17);
  v3 = *((_DWORD *)this + 18);
  if (v4 < 0x40000001)
  {
    v5 = *((_DWORD *)this + 20);
    while (1)
    {
      v3 *= 2;
      *((_DWORD *)this + 20) = --v5;
      if (v5)
        goto LABEL_5;
      v9 = *((_QWORD *)this + 7);
      *((_QWORD *)this + 7) = v9 + 1;
      v10 = *((unsigned int *)this + 10);
      if (v9 + 1 >= v10)
      {
        v11 = 65280;
        v12 = v9 + 2;
        *((_QWORD *)this + 7) = v12;
        if (v12 >= v10)
        {
LABEL_11:
          v6 = 255;
          goto LABEL_4;
        }
      }
      else
      {
        v11 = *(unsigned __int8 *)(*((_QWORD *)this + 6) + v9 + 1) << 8;
        v12 = v9 + 2;
        *((_QWORD *)this + 7) = v12;
        if (v12 >= v10)
          goto LABEL_11;
      }
      v6 = *(unsigned __int8 *)(*((_QWORD *)this + 6) + v12);
LABEL_4:
      v3 |= v11 | v6;
      v5 = 16;
      *((_DWORD *)this + 20) = 16;
LABEL_5:
      v7 = 2 * v4;
      v8 = v4 >= 0x20000001;
      v4 *= 2;
      if (v8)
        goto LABEL_13;
    }
  }
  v7 = *((_DWORD *)this + 17);
LABEL_13:
  v13 = (HIWORD(v7) * v2) & 0xFFFF0000;
  if (v3 < v13)
    v14 = 0;
  else
    v14 = (HIWORD(v7) * v2) & 0xFFFF0000;
  v15 = v3 - v14;
  *((_WORD *)this + 631) = *((_WORD *)this + ((v2 >> 7) & 0x1FE | (v3 >= v13)) + 44) + v2;
  if (v3 < v13)
    v16 = (HIWORD(v7) * v2) & 0xFFFF0000;
  else
    v16 = v7 - v13;
  *((_DWORD *)this + 17) = v16;
  *((_DWORD *)this + 18) = v15;
  if (v3 < v13)
    return 0;
  v17 = mgcl::muid::Decoder::decEgk((uint64_t)this, (uint64_t)this + 1112);
  v18 = v17 & 0x3F;
  if ((v17 & 0x3F) != 0)
  {
    v20 = *((_DWORD *)this + 17);
    v19 = *((_DWORD *)this + 18);
    result = 1;
    while (1)
    {
      --v18;
      v27 = (char *)this + 2 * v18;
      v28 = *((unsigned __int16 *)v27 + 561);
      if (v20 < 0x40000001)
        break;
      v21 = v20;
LABEL_24:
      v22 = v27 + 1122;
      v23 = (HIWORD(v21) * v28) & 0xFFFF0000;
      v24 = v21 - v23;
      v25 = v19 >= v23;
      *v22 = *((_WORD *)this + ((v28 >> 7) & 0x1FE | v25) + 44) + v28;
      if (v19 < v23)
        v20 = v23;
      else
        v20 = v24;
      if (v19 < v23)
        v26 = 0;
      else
        v26 = v23;
      v19 -= v26;
      *((_DWORD *)this + 17) = v20;
      *((_DWORD *)this + 18) = v19;
      result = (2 * result) | v25;
      if (!v18)
        return result;
    }
    v29 = *((_DWORD *)this + 20);
    while (1)
    {
      v19 *= 2;
      *((_DWORD *)this + 20) = --v29;
      if (v29)
        goto LABEL_35;
      v31 = *((_QWORD *)this + 7);
      *((_QWORD *)this + 7) = v31 + 1;
      v32 = *((unsigned int *)this + 10);
      if (v31 + 1 >= v32)
      {
        v33 = 65280;
        v34 = v31 + 2;
        *((_QWORD *)this + 7) = v34;
        if (v34 >= v32)
        {
LABEL_41:
          v30 = 255;
          goto LABEL_34;
        }
      }
      else
      {
        v33 = *(unsigned __int8 *)(*((_QWORD *)this + 6) + v31 + 1) << 8;
        v34 = v31 + 2;
        *((_QWORD *)this + 7) = v34;
        if (v34 >= v32)
          goto LABEL_41;
      }
      v30 = *(unsigned __int8 *)(*((_QWORD *)this + 6) + v34);
LABEL_34:
      v19 |= v33 | v30;
      v29 = 16;
      *((_DWORD *)this + 20) = 16;
LABEL_35:
      v21 = 2 * v20;
      v8 = v20 >= 0x20000001;
      v20 *= 2;
      if (v8)
        goto LABEL_24;
    }
  }
  return 1;
}

uint64_t std::__shared_ptr_emplace<geo::codec::VectorTile,geo::StdAllocator<geo::codec::VectorTile,geo::codec::Allocator>>::__on_zero_shared_weak(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a1, 3840);
}

uint64_t std::vector<GeoCodecsLocalizationTableEntry,geo::StdAllocator<GeoCodecsLocalizationTableEntry,geo::codec::Allocator>>::__append(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v3 = result;
  v4 = *(_OWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (a2 <= (v5 - (uint64_t)v4) >> 5)
  {
    if (a2)
    {
      v10 = 32 * a2;
      v11 = &v4[2 * a2];
      do
      {
        if (v4)
        {
          *v4 = 0uLL;
          v4[1] = 0uLL;
        }
        v4 += 2;
        v10 -= 32;
      }
      while (v10);
      v4 = v11;
    }
    *(_QWORD *)(result + 8) = v4;
  }
  else
  {
    v6 = ((uint64_t)v4 - *(_QWORD *)result) >> 5;
    v7 = v6 + a2;
    if ((v6 + a2) >> 59)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v8 = v5 - *(_QWORD *)result;
    if (v8 >> 4 > v7)
      v7 = v8 >> 4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v9 = 0x7FFFFFFFFFFFFFFLL;
    else
      v9 = v7;
    if (v9)
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 32 * v9, 8);
    else
      result = 0;
    v12 = (_OWORD *)(result + 32 * v6);
    v13 = 32 * a2;
    v14 = &v12[2 * a2];
    v15 = v12;
    do
    {
      if (v15)
      {
        *v15 = 0uLL;
        v15[1] = 0uLL;
      }
      v15 += 2;
      v13 -= 32;
    }
    while (v13);
    v17 = *(_QWORD *)v3;
    v16 = *(_QWORD *)(v3 + 8);
    if (v16 != *(_QWORD *)v3)
    {
      do
      {
        v18 = *(_OWORD *)(v16 - 16);
        *(v12 - 2) = *(_OWORD *)(v16 - 32);
        *(v12 - 1) = v18;
        v12 -= 2;
        v16 -= 32;
      }
      while (v16 != v17);
      v16 = *(_QWORD *)v3;
    }
    *(_QWORD *)v3 = v12;
    *(_QWORD *)(v3 + 8) = v14;
    v19 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 32 * v9;
    if (v16)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v16, v19 - v16);
  }
  return result;
}

uint64_t geo::codec::_postDecoding(geo::codec::Allocator *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t i;
  _QWORD *v16;
  BOOL v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  uint64_t v67;
  _OWORD *v68;
  _OWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  float v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  float *v88;
  unint64_t v89;
  float *v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  BOOL v97;
  float v98;
  uint64_t v99;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  int v104;
  int *v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float *v111;
  uint64_t v112;
  float *v113;
  float v114;
  float v115;
  _BYTE *v117;
  int v118;
  _BYTE *v119;
  _QWORD *v120;
  uint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  __int128 *v138;
  uint64_t v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  float *v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t **v165;
  unint64_t **v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  _DWORD *v171;
  int v172;
  int v173;
  int v174;
  int v175;
  unint64_t **v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  __n128 v180;
  unint64_t **v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t *v184;
  unint64_t *v185;
  unint64_t **v186;
  unint64_t *v187;
  unsigned __int32 *v188;
  unsigned __int32 *v189;
  unsigned __int32 *v190;
  unsigned __int32 *v191;
  unsigned __int32 *v192;
  unint64_t **v193;
  float *v194;
  float **v195;
  float *v196;
  _BYTE *v197;
  unint64_t **v198;
  int v199;
  _BYTE *v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  unint64_t **v217;
  unint64_t **v218;
  unint64_t **v219;
  _QWORD *v220;
  uint64_t v221;
  _QWORD *v222;
  unint64_t v223;
  unint64_t v224;
  char *v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _OWORD *v230;
  __int128 *v231;
  uint64_t v232;
  __int128 v233;
  unint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _OWORD *v238;
  __int128 *v239;
  uint64_t v240;
  __int128 v241;
  uint64_t v242;
  unsigned __int32 *v243;
  unsigned __int32 *v244;
  unsigned __int32 *v245;
  unsigned __int32 *v246;
  float *v247;
  float *v248;
  float *v249;
  float *v250;
  float *v251;
  float *v252;
  float **v253;
  float *v254;
  float v255;
  float v256;
  float v257;
  float v258;
  float v259;
  float v260;
  float v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  unsigned int v270;
  float v271;
  float v272;
  float v273;
  float v275;
  float v276;
  float v277;
  BOOL v278;
  float v279;
  BOOL v280;
  float v281;
  uint64_t v282;
  uint64_t v283;
  float v284;
  float v285;
  int v286;
  char v287;
  __int128 *v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  uint64_t v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  __int128 *v299;
  uint64_t v300;
  __int128 v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  float *v305;
  uint64_t v306;
  const void *v307;
  __int128 v308;
  _OWORD *v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  float v313;
  unint64_t v314;
  BOOL v315;
  unint64_t v316;
  __int128 *v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;
  float *v322;
  __int128 *v323;
  uint64_t v324;
  float *v325;
  uint64_t v326;
  uint64_t v327;
  __int128 *v328;
  __int128 v329;
  unint64_t v330;
  __int128 *v331;
  unint64_t v332;
  int v333;
  int v334;
  int v335;
  char v336;
  int v337;
  unint64_t v338;
  unint64_t v339;
  _DWORD *v340;
  int64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  _DWORD *v345;
  uint64_t v346;
  int v347;
  uint64_t v348;
  int64_t v349;
  unint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  unint64_t v356;
  _WORD *v357;
  unint64_t v358;
  unint64_t v359;
  _WORD *v360;
  uint64_t v361;
  _BYTE *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  geo::codec::Allocator *v366;
  uint64_t v367;
  geo::codec::Allocator *v368;
  uint64_t v369;
  geo::codec::Allocator *v370;
  _QWORD *v371;
  uint64_t v372;
  size_t v373;
  size_t v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  _QWORD *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  size_t *v390;
  uint64_t (*v391)(void);
  geo::codec::Allocator *v392;
  uint64_t v393;
  uint64_t v394;
  int v395;
  unsigned int v396;
  char v397;
  _BYTE *v398;
  uint64_t v399;
  geo::codec::Allocator *v400;
  uint64_t v401;
  char *v403;
  uint64_t v404;
  uint64_t v405;
  geo::codec::Allocator *v406;
  float *v407;
  unint64_t v408;
  uint64_t v409;
  float v411;
  float *v412;
  unint64_t v413;
  uint64_t v414;
  const char *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  unint64_t v421;
  geo::codec::Allocator *v422;
  unint64_t v423;
  unsigned __int32 *v424;
  geo::codec::Allocator *v425;
  geo::codec::Allocator *v426;
  uint64_t v427;
  float *v428;
  uint64_t v429;
  _DWORD *v430;
  uint64_t v431;
  uint64_t v432;
  unsigned int v433;
  uint64_t v434;
  __int128 *v435;
  char v436;
  float *v437;
  uint64_t v438;
  uint64_t *v439;
  unsigned int v440;
  _QWORD *v441;
  int v442;
  unint64_t v443;
  uint64_t v444;
  char v445;
  uint64_t v446;
  uint64_t v447;
  float *v448;
  unint64_t v449;
  unsigned int v450;
  unint64_t v451;
  int *v452;
  float *v453;
  unint64_t v454;
  int *v455;
  float *v456;
  _QWORD *v457;
  int v458;
  float *v459;
  uint64_t v460;
  uint64_t v461;
  float *v462;
  float *v463;
  unint64_t v464;
  uint64_t v465;
  float *v466;
  uint64_t v467;
  _BYTE *v468;
  unsigned int v469;
  __int128 *v470;
  unint64_t v471;
  int *v472;
  float *v473;
  __int128 *v474;
  geo::codec::Allocator *v475;
  int *v476;
  int v477;
  float *v478;
  int64_t v479;
  int v480;
  int *v481;
  unint64_t v482;
  unint64_t v483;
  _BYTE v484[3208];

  v422 = a1;
  v1 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if (v2 != v3)
  {
    v4 = (v2 - v3) / 168;
    if (v4 < 2)
    {
      v5 = 0;
LABEL_7:
      v8 = v4 - v5;
      v9 = (_WORD *)(v3 + 168 * v5 + 144);
      do
      {
        *((_DWORD *)v9 - 3) = 0;
        *v9 = 0;
        v9 += 84;
        --v8;
      }
      while (v8);
      goto LABEL_9;
    }
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v6 = v3 + 300;
    v7 = v4 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(_DWORD *)(v6 - 168) = 0;
      *(_DWORD *)v6 = 0;
      *(_WORD *)(v6 - 156) = 0;
      *(_WORD *)(v6 + 12) = 0;
      v6 += 336;
      v7 -= 2;
    }
    while (v7);
    if (v4 != v5)
      goto LABEL_7;
  }
LABEL_9:
  v10 = *(_QWORD *)(v1 + 720);
  if (v10)
  {
    v11 = 0;
    v12 = *(_QWORD *)(v1 + 728);
    do
    {
      v13 = v3 + 168 * *(unsigned int *)(*(_QWORD *)(v12 + 8 * v11) + 4);
      v14 = *(unsigned __int16 *)(v13 + 144);
      *(_DWORD *)(v13 + 132) = v11 - v14;
      *(_WORD *)(v13 + 144) = v14 + 1;
      ++v11;
    }
    while (v10 != v11);
  }
  v433 = (*(_DWORD *)(v1 + 4) >> 8) & 0x3F;
  if (v433 >= 7 && v2 != v3 && !*(_QWORD *)(v1 + 696))
  {
    for (i = 0; i != 3200; i += 32)
    {
      v16 = &v484[i];
      *v16 = 0;
      v16[1] = 0;
      v16[2] = 0;
      a1 = (geo::codec::Allocator *)geo::codec::Allocator::instance(a1);
      v16[3] = a1;
    }
    v17 = v433 > 0xC;
    if (v433 <= 0xC)
      v18 = 3;
    else
      v18 = 7;
    if (v433 == 10)
    {
      v17 = 0;
      v19 = 1;
    }
    else
    {
      v19 = v18;
    }
    v20 = v433 >= 0xA && v17;
    if (v433 < 0xA)
      v19 = 0;
    v440 = v19;
    v21 = *(_QWORD *)(*(_QWORD *)v422 + 32);
    v22 = *(_QWORD *)(*(_QWORD *)v422 + 40) - v21;
    if (v22)
    {
      v23 = v22 / 168;
      if (v23 <= 1)
        v23 = 1;
      if (v23 >= 2)
      {
        v26 = 0;
        v27 = 0;
        v25 = v23 & 0xFFFFFFFFFFFFFFFELL;
        v28 = (unsigned int *)(v21 + 268);
        v29 = v23 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v26 += *(v28 - 42);
          v27 += *v28;
          v28 += 84;
          v29 -= 2;
        }
        while (v29);
        v24 = v27 + v26;
        if (v23 == v25)
          goto LABEL_39;
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
      v30 = v23 - v25;
      v31 = (unsigned int *)(v21 + 168 * v25 + 100);
      do
      {
        v32 = *v31;
        v31 += 42;
        v24 += v32;
        --v30;
      }
      while (v30);
    }
    else
    {
      v24 = 0;
    }
LABEL_39:
    v33 = geo::codec::Allocator::instance(a1);
    v419 = v33;
    if (v24)
    {
      if (v24 > 0x555555555555555)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v34 = 48 * v24;
      v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v34, 8);
      v35 = v33;
      v36 = 0;
      v37 = v33 + v34;
      do
      {
        v38 = (_OWORD *)(v35 + v36);
        if (v35 + v36)
        {
          v38[1] = 0u;
          v38[2] = 0u;
          *v38 = 0u;
          v33 = geo::codec::Allocator::instance((geo::codec::Allocator *)v33);
          *(_QWORD *)(v35 + v36 + 40) = v33;
        }
        v36 += 48;
      }
      while (v34 != v36);
    }
    else
    {
      v37 = 0;
      v35 = 0;
    }
    v431 = *(_QWORD *)(*(_QWORD *)v422 + 2960);
    v432 = *(_QWORD *)(*(_QWORD *)v422 + 2952);
    v39 = *(_QWORD *)(*(_QWORD *)v422 + 32);
    if (*(_QWORD *)(*(_QWORD *)v422 + 40) == v39)
    {
      v144 = 0;
      v143 = 0xAAAAAAAAAAAAAAABLL * ((v37 - v35) >> 4);
      goto LABEL_179;
    }
    v443 = 0;
    v40 = 0;
    v429 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v422 + 792) + 32);
    v436 = !v20;
    v434 = *(_QWORD *)v422;
    v41 = *(_QWORD *)v422;
    v438 = v35;
LABEL_50:
    v42 = v39 + 168 * v40;
    v43 = *(unsigned __int8 *)(v42 + 151);
    if (v43 > v440)
    {
      v151 = v43 == 8;
      v44 = v436;
      if (!v151)
        v44 = 1;
      if ((v44 & 1) != 0 || !*(_BYTE *)(v42 + 73) && !*(_BYTE *)(v42 + 72))
        goto LABEL_49;
    }
    v45 = *(unsigned int *)(v42 + 100);
    if (!(_DWORD)v45)
      goto LABEL_49;
    v46 = 0;
    v467 = v42;
    while (1)
    {
      if (v46 >= v45)
        goto LABEL_59;
      v471 = v46;
      v33 = (uint64_t)geo::codec::vertexPoolForFeature(v42);
      if (!v33)
      {
        v42 = v467;
        goto LABEL_68;
      }
      v47 = *(_QWORD *)(v33 + 32);
      v46 = v471;
      if (!v47)
      {
        v42 = v467;
        goto LABEL_59;
      }
      v42 = v467;
      v48 = v471 + *(unsigned int *)(v467 + 96);
      if (*(_QWORD *)(v33 + 40) > v48)
      {
        v49 = *(_QWORD *)(v47 + 16 * v48);
        if (v49 < *(_QWORD *)(v33 + 16))
        {
          v50 = *(_QWORD *)(v47 + 16 * v48 + 8);
          if (v50 >= 2)
            break;
        }
      }
LABEL_59:
      ++v46;
      v45 = *(unsigned int *)(v42 + 100);
      if (v46 >= v45)
      {
        v41 = *(_QWORD *)v422;
LABEL_49:
        ++v40;
        v39 = *(_QWORD *)(v41 + 32);
        if (v40 >= 0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(v41 + 40) - v39) >> 3))
        {
          v143 = 0xAAAAAAAAAAAAAAABLL * ((v37 - v35) >> 4);
          v144 = v443;
          if (v143 < v443)
          {
            if (v443 > 0x555555555555555)
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            v145 = 0x5555555555555556 * ((v37 - v35) >> 4);
            if (v145 <= v443)
              v145 = v443;
            if (v143 >= 0x2AAAAAAAAAAAAAALL)
              v146 = 0x555555555555555;
            else
              v146 = v145;
            v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v419 + 16))(v419, 48 * v146, 8);
            v147 = v33 + 16 * ((v37 - v35) >> 4);
            v417 = v33 + 48 * v146;
            v148 = v33 + 48 * v443;
            v149 = 48 * v443 - 16 * ((v37 - v35) >> 4);
            v150 = v147;
            do
            {
              if (v150)
              {
                *(_OWORD *)(v150 + 16) = 0u;
                *(_OWORD *)(v150 + 32) = 0u;
                *(_OWORD *)v150 = 0u;
                v33 = geo::codec::Allocator::instance((geo::codec::Allocator *)v33);
                *(_QWORD *)(v150 + 40) = v33;
              }
              v150 += 48;
              v149 -= 48;
            }
            while (v149);
            v152 = v37;
            if (v37 != v35)
            {
              v153 = 0;
              do
              {
                v154 = v147 + v153;
                v155 = v37 + v153;
                v156 = *(_QWORD *)(v37 + v153 - 48);
                *(_DWORD *)(v154 - 40) = *(_DWORD *)(v37 + v153 - 40);
                *(_QWORD *)(v154 - 48) = v156;
                *(_QWORD *)(v154 - 24) = 0;
                *(_QWORD *)(v154 - 16) = 0;
                *(_QWORD *)(v154 - 32) = 0;
                *(_QWORD *)(v154 - 8) = *(_QWORD *)(v37 + v153 - 8);
                *(_OWORD *)(v154 - 32) = *(_OWORD *)(v37 + v153 - 32);
                *(_QWORD *)(v154 - 16) = *(_QWORD *)(v37 + v153 - 16);
                *(_QWORD *)(v155 - 32) = 0;
                *(_QWORD *)(v155 - 24) = 0;
                *(_QWORD *)(v155 - 16) = 0;
                v153 -= 48;
              }
              while (v37 + v153 != v35);
              v147 += v153;
              v157 = v37;
              do
              {
                v158 = *(_QWORD *)(v157 - 32);
                if (v158)
                {
                  *(_QWORD *)(v157 - 24) = v158;
                  v33 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v157 - 8) + 40))(*(_QWORD *)(v157 - 8), v158, *(_QWORD *)(v157 - 16) - v158);
                }
                v157 -= 48;
              }
              while (v157 != v35);
              v152 = v35;
            }
            if (v152)
              v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v419 + 40))(v419, v152, v37 - v152);
            goto LABEL_199;
          }
LABEL_179:
          v148 = v35 + 48 * v144;
          v151 = v143 <= v144 || v37 == v148;
          if (v151)
          {
            v417 = v37;
            v148 = v37;
            v147 = v35;
          }
          else
          {
            v159 = v37;
            do
            {
              v160 = *(_QWORD *)(v159 - 32);
              if (v160)
              {
                *(_QWORD *)(v159 - 24) = v160;
                v33 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v159 - 8) + 40))(*(_QWORD *)(v159 - 8), v160, *(_QWORD *)(v159 - 16) - v160);
              }
              v159 -= 48;
            }
            while (v159 != v148);
            v417 = v37;
            v147 = v35;
          }
LABEL_199:
          v426 = (geo::codec::Allocator *)geo::codec::Allocator::instance((geo::codec::Allocator *)v33);
          v425 = (geo::codec::Allocator *)geo::codec::Allocator::instance(v426);
          v161 = (float *)geo::codec::Allocator::instance(v425);
          v463 = v161;
          v421 = v148;
          v418 = v147;
          if (v147 != v148)
          {
            v435 = 0;
            v437 = 0;
            v427 = 0;
            v428 = 0;
            v420 = 0;
            v162 = 0;
            v430 = 0;
            v163 = 0;
            v164 = 0;
            v165 = 0;
            v166 = 0;
            v167 = v147;
            while (1)
            {
              v168 = *(_QWORD *)(v167 + 16);
              if (*(_QWORD *)(v167 + 24) == v168)
                goto LABEL_202;
              v169 = 0;
              v450 = 0;
              v439 = (uint64_t *)v167;
              do
              {
                v171 = (_DWORD *)(v168 + 96 * v169);
                v172 = v171[7];
                v173 = v171[9];
                v452 = v171 + 9;
                v482 = v162;
                v444 = v169;
                v447 = v168;
                v441 = v171;
                if (v172 <= v173)
                {
                  v455 = v171 + 6;
                  v174 = v171[6];
                  v472 = v171 + 8;
                  v175 = v171[8];
                  if (v174 <= v175)
                  {
                    v458 = v172;
                    v197 = &v484[320 * v172 + 32 * v174];
                    v176 = v166;
                    v198 = v166;
                    while (1)
                    {
                      v199 = *v455;
                      v200 = v197;
                      v468 = v197;
                      if (*v455 <= v175)
                        break;
LABEL_245:
                      v197 += 320;
                      v177 = v482;
                      v164 = v482;
                      v165 = (unint64_t **)v482;
                      v97 = v458++ < v173;
                      if (!v97)
                        goto LABEL_210;
                    }
                    while (2)
                    {
                      v202 = *(char **)v200;
                      v201 = (char *)*((_QWORD *)v200 + 1);
                      v203 = (uint64_t)&v201[-*(_QWORD *)v200];
                      if (v203 < 1)
                      {
LABEL_251:
                        v200 += 32;
                        v175 = *v472;
                        v97 = v199++ < *v472;
                        if (!v97)
                        {
                          v173 = *v452;
                          goto LABEL_245;
                        }
                        continue;
                      }
                      break;
                    }
                    v477 = v199;
                    v204 = v203 >> 3;
                    v205 = (uint64_t)v198 - v482;
                    v206 = (char *)(v482 + (((unint64_t)v198 - v482) & 0xFFFFFFFFFFFFFFF8));
                    if (v203 >> 3 > (v163 - (uint64_t)v198) >> 3)
                    {
                      v207 = v205 >> 3;
                      v208 = v204 + (v205 >> 3);
                      if (v208 >> 61)
                        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
                      v465 = v203;
                      v209 = v163 - v482;
                      if ((uint64_t)(v163 - v482) >> 2 > v208)
                        v208 = (uint64_t)(v163 - v482) >> 2;
                      if (v209 >= 0x7FFFFFFFFFFFFFF8)
                        v210 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v210 = v208;
                      if (v210)
                      {
                        v211 = v163 - v482;
                        v212 = v210;
                        v213 = (*(uint64_t (**)(float *, uint64_t, uint64_t))(*(_QWORD *)v463 + 16))(v463, 8 * v210, 8);
                        v209 = v211;
                        v210 = v212;
                      }
                      else
                      {
                        v213 = 0;
                      }
                      v220 = (_QWORD *)(v213 + 8 * v207);
                      v198 = (unint64_t **)&v220[v204];
                      v221 = 8 * v204;
                      v222 = v220;
                      do
                      {
                        if (v222)
                          *v222 = *(_QWORD *)v202;
                        ++v222;
                        v202 += 8;
                        v221 -= 8;
                      }
                      while (v221);
                      v223 = v205 - 8;
                      if ((unint64_t)v205 < 8)
                      {
                        v166 = v176;
                        v224 = v482;
                        goto LABEL_291;
                      }
                      v224 = v482;
                      if (v223 < 0x168)
                      {
                        v225 = v206;
                        goto LABEL_290;
                      }
                      if (v213 + (v205 & 0xFFFFFFFFFFFFFFF8) - 8 - (v223 & 0xFFFFFFFFFFFFFFF8) > v213 + (v205 & 0xFFFFFFFFFFFFFFF8) - 8)
                      {
                        v225 = v206;
                        goto LABEL_290;
                      }
                      if (v482 + (v205 & 0xFFFFFFFFFFFFFFF8) - 8 - (v223 & 0xFFFFFFFFFFFFFFF8) > v482 + (v205 & 0xFFFFFFFFFFFFFFF8) - 8)
                      {
                        v225 = v206;
                        goto LABEL_290;
                      }
                      v225 = v206;
                      if (v482 + (v205 & 0xFFFFFFFFFFFFFFF8) - (v213 + (v205 & 0xFFFFFFFFFFFFFFF8)) < 0x20)
                        goto LABEL_539;
                      v236 = (v223 >> 3) + 1;
                      v237 = 8 * (v236 & 0x3FFFFFFFFFFFFFFCLL);
                      v225 = &v206[-v237];
                      v220 = (_QWORD *)((char *)v220 - v237);
                      v238 = (_OWORD *)(v213 + 8 * v207 - 16);
                      v239 = (__int128 *)(v482 + 8 * v207 - 16);
                      v240 = v236 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v241 = *v239;
                        *(v238 - 1) = *(v239 - 1);
                        *v238 = v241;
                        v238 -= 2;
                        v239 -= 2;
                        v240 -= 4;
                      }
                      while (v240);
                      if (v236 != (v236 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_539:
                        do
                        {
LABEL_290:
                          v226 = *((_QWORD *)v225 - 1);
                          v225 -= 8;
                          *--v220 = v226;
                        }
                        while (v225 != (char *)v482);
                      }
LABEL_291:
                      if (v166 != (unint64_t **)v206)
                      {
                        v227 = (unint64_t)v166 + -(v205 & 0xFFFFFFFFFFFFFFF8) - v224 - 8;
                        if (v227 < 0x68)
                          goto LABEL_540;
                        if (v213 + (v465 & 0xFFFFFFFFFFFFFFF8) - v224 < 0x20)
                          goto LABEL_540;
                        v228 = (v227 >> 3) + 1;
                        v229 = 8 * (v228 & 0x3FFFFFFFFFFFFFFCLL);
                        v206 += v229;
                        v198 = (unint64_t **)((char *)v198 + v229);
                        v230 = (_OWORD *)(v213 + 8 * v204 + 8 * v207 + 16);
                        v231 = (__int128 *)(v224 + 8 * v207 + 16);
                        v232 = v228 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v233 = *v231;
                          *(v230 - 1) = *(v231 - 1);
                          *v230 = v233;
                          v230 += 2;
                          v231 += 2;
                          v232 -= 4;
                        }
                        while (v232);
                        if (v228 != (v228 & 0x3FFFFFFFFFFFFFFCLL))
                        {
LABEL_540:
                          do
                          {
                            v234 = *(unint64_t **)v206;
                            v206 += 8;
                            *v198++ = v234;
                          }
                          while (v206 != (char *)v166);
                        }
                      }
                      v235 = v213 + 8 * v210;
                      if (v224)
                      {
                        (*(void (**)(float *, unint64_t, unint64_t))(*(_QWORD *)v463 + 40))(v463, v224, v209);
                        v482 = (unint64_t)v220;
                        v166 = v198;
                        v176 = v198;
                        v163 = v235;
                        v197 = v468;
                        v199 = v477;
                        goto LABEL_251;
                      }
                      v482 = (unint64_t)v220;
                      v166 = v198;
                      v176 = v198;
                      v163 = v213 + 8 * v210;
LABEL_250:
                      v197 = v468;
                      v199 = v477;
                      goto LABEL_251;
                    }
                    v214 = ((char *)v198 - v206) >> 3;
                    if (v214 >= v204)
                    {
                      v215 = &v202[8 * v204];
                      v176 = v198;
                    }
                    else
                    {
                      v215 = &v202[8 * v214];
                      v176 = v198;
                      if (v215 != v201)
                      {
                        v216 = &v202[8 * v214];
                        v217 = v198;
                        do
                        {
                          if (v217)
                            *v217 = *(unint64_t **)v216;
                          v216 += 8;
                          ++v217;
                          ++v176;
                        }
                        while (v216 != v201);
                      }
                      if ((char *)v198 - v206 < 1)
                      {
                        v166 = v176;
                        v198 = v176;
                        goto LABEL_250;
                      }
                    }
                    v218 = &v176[-v204];
                    v166 = v176;
                    while (v218 < v198)
                    {
                      if (v166)
                        *v166 = *v218;
                      ++v218;
                      ++v166;
                    }
                    v219 = (unint64_t **)&v206[8 * v204];
                    if (v176 != v219)
                      memmove(&v176[-(v176 - v219)], v206, (char *)v176 - (char *)v219);
                    if (v215 != v202)
                      memmove(v206, v202, v215 - v202);
                    v176 = v166;
                    v198 = v166;
                    goto LABEL_250;
                  }
                }
                v176 = v166;
                v177 = (unint64_t)v166;
LABEL_210:
                v178 = 126 - 2 * __clz((uint64_t)((uint64_t)v176 - v177) >> 3);
                if (v176 == (unint64_t **)v177)
                  v179 = 0;
                else
                  v179 = v178;
                v161 = (float *)std::__introsort<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_3::operator() const(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,std::vector<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::StdAllocator<geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem*,geo::codec::Allocator>> &)::{lambda(geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem const*)#1} &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentItem**,false>(v177, v176, v179, 1);
                if (v165 == v176)
                {
                  v176 = v165;
                  v183 = v444;
                  v182 = v447;
                  v461 = v163;
                  if (v165 != v166)
                    goto LABEL_312;
                }
                else
                {
                  v181 = v165 + 1;
                  v183 = v444;
                  v182 = v447;
                  while (v181 != v176)
                  {
                    v184 = *(v181 - 1);
                    v185 = *v181++;
                    if (v184 == v185)
                    {
                      v186 = v181 - 2;
                      while (v181 != v176)
                      {
                        v187 = v184;
                        v184 = *v181;
                        if (v187 != *v181)
                        {
                          v186[1] = v184;
                          ++v186;
                        }
                        ++v181;
                      }
                      v176 = v186 + 1;
                      break;
                    }
                  }
                  if (v165 == v176)
                  {
                    v176 = v165;
LABEL_311:
                    v461 = v163;
                    if (v176 == v166)
                      goto LABEL_313;
LABEL_312:
                    v166 = v176;
                    goto LABEL_313;
                  }
                  v188 = (unsigned __int32 *)(v447 + 96 * v444);
                  v189 = v188 + 2;
                  v190 = v188 + 5;
                  v191 = v188 + 3;
                  v192 = v188 + 4;
                  v193 = v165;
                  while (1)
                  {
                    v194 = (float *)*v193;
                    if (**v193 == *v441)
                      break;
                    v180.n128_u32[0] = *v192;
                    if (*(float *)v192 <= v194[2])
                      break;
                    v180.n128_u32[0] = *v189;
                    if (*(float *)v189 >= v194[4])
                      break;
                    v180.n128_u32[0] = *v190;
                    if (*(float *)v190 <= v194[3])
                      break;
                    v180.n128_u32[0] = *v191;
                    if (*(float *)v191 >= v194[5])
                      break;
                    if (++v193 == v176)
                      goto LABEL_311;
                  }
                  if (v193 == v176)
                    goto LABEL_311;
                  v195 = (float **)(v193 + 1);
                  if (v193 + 1 != v176)
                  {
                    do
                    {
                      v196 = *v195;
                      if (*(_QWORD *)*v195 != *v441)
                      {
                        v180.n128_u32[0] = *v192;
                        if (*(float *)v192 > v196[2])
                        {
                          v180.n128_u32[0] = *v189;
                          if (*(float *)v189 < v196[4])
                          {
                            v180.n128_u32[0] = *v190;
                            if (*(float *)v190 > v196[3])
                            {
                              v180.n128_u32[0] = *v191;
                              if (*(float *)v191 < v196[5])
                                *v193++ = (unint64_t *)v196;
                            }
                          }
                        }
                      }
                      ++v195;
                    }
                    while (v195 != (float **)v176);
                    v165 = (unint64_t **)v482;
                    v164 = v482;
                  }
                  v176 = v193;
                  v461 = v163;
                  if (v193 != v166)
                    goto LABEL_312;
                }
LABEL_313:
                v167 = (uint64_t)v439;
                if (v165 != v166)
                {
                  v242 = v182 + 96 * v183;
                  v243 = (unsigned __int32 *)(v242 + 16);
                  v244 = (unsigned __int32 *)(v242 + 8);
                  v245 = (unsigned __int32 *)(v242 + 20);
                  v246 = (unsigned __int32 *)(v242 + 12);
                  v247 = (float *)(v242 + 40);
                  v248 = (float *)(v242 + 48);
                  v249 = (float *)(v242 + 52);
                  v161 = (float *)(v242 + 44);
                  v250 = (float *)(v242 + 68);
                  v251 = (float *)(v242 + 72);
                  v252 = (float *)(v242 + 64);
                  v170 = v450 + 1;
                  v253 = (float **)v165;
                  while (1)
                  {
                    v254 = *v253;
                    v180.n128_u32[0] = *v243;
                    if (*(float *)v243 > (*v253)[2])
                    {
                      v180.n128_u32[0] = *v244;
                      if (*(float *)v244 < v254[4])
                      {
                        v180.n128_u32[0] = *v245;
                        if (*(float *)v245 > v254[3])
                        {
                          v180.n128_u32[0] = *v246;
                          if (*(float *)v246 < v254[5])
                          {
                            v255 = *v248;
                            v257 = v254[12];
                            v256 = v254[13];
                            v180.n128_f32[0] = v256 * *v248;
                            v258 = *v249;
                            v259 = v257 * *v249;
                            if (vabds_f32(v180.n128_f32[0], v259) >= 0.00000011921)
                            {
                              v180.n128_f32[0] = 1.0 / (float)(v180.n128_f32[0] - v259);
                              v265 = *v247 - v254[10];
                              v266 = *v161 - v254[11];
                              v267 = (float)-(float)((float)(v265 * v256) - (float)(v266 * v257)) * v180.n128_f32[0];
                              if (*v250 <= v267 && *v251 >= v267)
                              {
                                v180.n128_f32[0] = (float)-(float)((float)(v265 * v258) - (float)(v266 * v255))
                                                 * v180.n128_f32[0];
                                if (v254[17] <= v180.n128_f32[0] && v254[18] >= v180.n128_f32[0])
                                {
                                  v264 = fminf(fmaxf(v267, 0.0), 1.0);
                                  v180.n128_f32[0] = fminf(fmaxf(v180.n128_f32[0], 0.0), 1.0);
                                  v268 = *v252;
                                  v269 = 0.0;
                                  v270 = v450;
                                  if (fabsf(v264) > *v252)
                                    goto LABEL_350;
                                  goto LABEL_354;
                                }
                              }
                            }
                            else if (v433 >= 0xF)
                            {
                              v260 = *v247;
                              v261 = v254[10];
                              if (vabds_f32(*v247, v261) >= 0.002)
                              {
                                v263 = v254[11];
                                v262 = *v161;
                              }
                              else
                              {
                                v262 = *v161;
                                v263 = v254[11];
                                v264 = 0.0;
                                v180.n128_u32[0] = 0;
                                if (vabds_f32(*v161, v263) < 0.002)
                                  goto LABEL_349;
                              }
                              v271 = v261 + v257;
                              v272 = v263 + v256;
                              v273 = vabds_f32(v262, v272);
                              v180.n128_u32[0] = 0;
                              if (vabds_f32(v260, v271) < 0.002 && v273 < 0.002)
                              {
                                v264 = 0.0;
                                v268 = *v252;
                                v269 = 0.0;
                                v270 = v450;
                                if (fabsf(0.0) <= *v252)
                                  goto LABEL_354;
LABEL_350:
                                v281 = 1.0;
                                if (fabsf(v264 + -1.0) <= v268 || (v281 = v264, v270 = v450, v269 = v264, v264 >= 1.0))
                                {
                                  v269 = v281 + -1.0;
                                  v270 = v170;
                                }
LABEL_354:
                                v282 = *(_QWORD *)(v167 + 16);
                                v283 = *(_QWORD *)(v167 + 24);
                                if (0xAAAAAAAAAAAAAAABLL * ((v283 - v282) >> 5) <= v270)
                                {
                                  v284 = *(float *)(v283 - 16) + *(float *)(v283 - 20);
                                  if (v432 != v431)
                                    goto LABEL_356;
                                }
                                else
                                {
                                  v284 = *(float *)(v282 + 96 * v270 + 80)
                                       + (float)(*(float *)(v282 + 96 * v270 + 76) * v269);
                                  if (v432 != v431)
                                  {
LABEL_356:
                                    v285 = v254[21] + (float)((float)(v254[22] - v254[21]) * v180.n128_f32[0]);
                                    v286 = *(_DWORD *)(v167 + 8);
                                    v287 = *(_BYTE *)(*(_QWORD *)v254 + 151);
                                    v288 = v435;
                                    if (v435 >= (__int128 *)v428)
                                      goto LABEL_361;
LABEL_357:
                                    if (v288)
                                    {
                                      *(_QWORD *)v288 = 0;
                                      *((_DWORD *)v288 + 2) = v286;
                                      *((_DWORD *)v288 + 3) = v270;
                                      *((float *)v288 + 4) = v269;
                                      *((float *)v288 + 5) = v284;
                                      *((_BYTE *)v288 + 24) = v287;
                                      *((float *)v288 + 7) = v285;
                                    }
                                    v435 = v288 + 2;
                                    goto LABEL_319;
                                  }
                                }
                                v289 = *(_QWORD *)v254;
                                v180.n128_u16[0] = *(_WORD *)(v289 + 148);
                                v180.n128_f32[0] = (float)v180.n128_u32[0];
                                v285 = v180.n128_f32[0] * 1000.0;
                                v286 = *(_DWORD *)(v167 + 8);
                                v287 = *(_BYTE *)(v289 + 151);
                                v288 = v435;
                                if (v435 >= (__int128 *)v428)
                                {
LABEL_361:
                                  v473 = v252;
                                  v478 = v251;
                                  v290 = ((uint64_t)v288 - v427) >> 5;
                                  v291 = v290 + 1;
                                  if ((unint64_t)(v290 + 1) >> 59)
                                    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
                                  v292 = (unint64_t)v428 - v427;
                                  if (((uint64_t)v428 - v427) >> 4 > v291)
                                    v291 = ((uint64_t)v428 - v427) >> 4;
                                  if (v292 >= 0x7FFFFFFFFFFFFFE0)
                                    v293 = 0x7FFFFFFFFFFFFFFLL;
                                  else
                                    v293 = v291;
                                  v469 = v170;
                                  v466 = v247;
                                  v456 = v249;
                                  v459 = v248;
                                  v453 = v161;
                                  v448 = v250;
                                  if (v293)
                                  {
                                    v442 = v286;
                                    v445 = v287;
                                    v423 = (unint64_t)v428 - v427;
                                    v424 = v246;
                                    v294 = v270;
                                    v295 = (*(uint64_t (**)(geo::codec::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v425 + 16))(v425, 32 * v293, 8);
                                    v296 = v295 + 32 * v290;
                                    v428 = (float *)(v295 + 32 * v293);
                                    if (v295)
                                    {
                                      *(_QWORD *)v296 = 0;
                                      *(_DWORD *)(v296 + 8) = v442;
                                      *(_DWORD *)(v296 + 12) = v294;
                                      *(float *)(v296 + 16) = v269;
                                      *(float *)(v296 + 20) = v284;
                                      *(_BYTE *)(v296 + 24) = v445;
                                      *(float *)(v296 + 28) = v285;
                                    }
                                    v167 = (uint64_t)v439;
                                    v292 = v423;
                                    v246 = v424;
                                    v297 = v295 + 32 * v290;
                                    v298 = v427;
                                    v299 = v435;
                                    if (v435 == (__int128 *)v427)
                                      goto LABEL_375;
LABEL_373:
                                    v300 = v296;
                                    do
                                    {
                                      v297 = v300 - 32;
                                      v180 = (__n128)*(v299 - 2);
                                      v301 = *(v299 - 1);
                                      *(__n128 *)(v300 - 32) = v180;
                                      *(_OWORD *)(v300 - 16) = v301;
                                      v299 -= 2;
                                      v300 -= 32;
                                    }
                                    while (v299 != (__int128 *)v298);
                                  }
                                  else
                                  {
                                    v428 = 0;
                                    v296 = 32 * v290;
                                    v167 = (uint64_t)v439;
                                    v297 = 32 * v290;
                                    v298 = v427;
                                    v299 = v435;
                                    if (v435 != (__int128 *)v427)
                                      goto LABEL_373;
                                  }
LABEL_375:
                                  v435 = (__int128 *)(v296 + 32);
                                  if (v298)
                                    (*(void (**)(geo::codec::Allocator *, uint64_t, unint64_t))(*(_QWORD *)v425 + 40))(v425, v298, v292);
                                  v427 = v297;
                                  v170 = v469;
                                  v247 = v466;
                                  v249 = v456;
                                  v248 = v459;
                                  v161 = v453;
                                  v250 = v448;
                                  v252 = v473;
                                  v251 = v478;
                                  goto LABEL_319;
                                }
                                goto LABEL_357;
                              }
                              v275 = v260 + v255;
                              v276 = v262 + v258;
                              v277 = vabds_f32(v262 + v258, v263);
                              v264 = 1.0;
                              v278 = vabds_f32(v275, v261) < 0.002 && v277 < 0.002;
                              if (v278
                                || ((v279 = vabds_f32(v276, v272), vabds_f32(v275, v271) < 0.002)
                                  ? (v280 = v279 < 0.002)
                                  : (v280 = 0),
                                    v280))
                              {
LABEL_349:
                                v268 = *v252;
                                v269 = 0.0;
                                v270 = v450;
                                if (fabsf(v264) <= *v252)
                                  goto LABEL_354;
                                goto LABEL_350;
                              }
                            }
                          }
                        }
                      }
                    }
LABEL_319:
                    if (++v253 == (float **)v166)
                      goto LABEL_206;
                  }
                }
                v170 = v450 + 1;
LABEL_206:
                v169 = v170;
                v168 = *(_QWORD *)(v167 + 16);
                v166 = v165;
                v450 = v170;
                v162 = v482;
                v163 = v461;
              }
              while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v167 + 24) - v168) >> 5) > v170);
              if ((__int128 *)v427 == v435)
              {
                v166 = v165;
                v435 = (__int128 *)v427;
                goto LABEL_202;
              }
              v302 = ((uint64_t)v435 - v427) >> 5;
              std::__introsort<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_6 &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentCrossing *,false>(v427, v435, 126 - 2 * __clz(v302), 1, v180);
              if ((unint64_t)v435 - v427 < 0x21)
              {
                v303 = 0;
                v307 = v430;
                v167 = (uint64_t)v439;
                v314 = 1;
                v315 = v302 <= 1;
                v316 = 1 - v302;
                if (!v302)
                  goto LABEL_392;
LABEL_405:
                if (v315)
                  v323 = v435;
                else
                  v323 = (__int128 *)(v427 + 32 * v314);
                v322 = (float *)v427;
                v162 = v482;
                v326 = *(_QWORD *)v167;
                if (!*(_DWORD *)(*(_QWORD *)v167 + 136))
                  goto LABEL_446;
                goto LABEL_420;
              }
              v303 = 0;
              if (v302 <= 2)
                v304 = 2;
              else
                v304 = ((uint64_t)v435 - v427) >> 5;
              v305 = (float *)(v427 + 60);
              v306 = v304 - 1;
              v307 = v430;
              v167 = (uint64_t)v439;
              do
              {
                while (1)
                {
                  v310 = v427 + 32 * v303;
                  if (*((_DWORD *)v305 - 5) == *(_DWORD *)(v310 + 8)
                    && vabds_f32(*(float *)(v310 + 20), *(v305 - 2)) <= 0.002)
                  {
                    break;
                  }
                  ++v303;
                  v308 = *(_OWORD *)(v305 - 3);
                  v309 = (_OWORD *)(v427 + 32 * v303);
                  *v309 = *(_OWORD *)(v305 - 7);
                  v309[1] = v308;
                  v305 += 8;
                  if (!--v306)
                    goto LABEL_391;
                }
                v311 = v427 + 32 * v303;
                v312 = *((char *)v305 - 4);
                if (v312 >= *(char *)(v311 + 24))
                  LOBYTE(v312) = *(_BYTE *)(v311 + 24);
                *(_BYTE *)(v311 + 24) = v312;
                v313 = *v305;
                v305 += 8;
                *(float *)(v311 + 28) = fmaxf(*(float *)(v311 + 28), v313);
                --v306;
              }
              while (v306);
LABEL_391:
              v314 = v303 + 1;
              v315 = v303 + 1 >= v302;
              v316 = v303 + 1 - v302;
              if (v303 + 1 <= v302)
                goto LABEL_405;
LABEL_392:
              v317 = v435;
              if (v316 <= ((char *)v428 - (char *)v435) >> 5)
              {
                v323 = &v435[2 * v316];
                v327 = 32 * v303 - 32 * v302 + 32;
                v162 = v482;
                do
                {
                  if (v317)
                  {
                    *v317 = 0u;
                    v317[1] = 0u;
                  }
                  v317 += 2;
                  v327 -= 32;
                }
                while (v327);
                v322 = (float *)v427;
                v326 = *(_QWORD *)v167;
                if (!*(_DWORD *)(*(_QWORD *)v167 + 136))
                  goto LABEL_446;
LABEL_420:
                *(_WORD *)(v326 + 146) += ((_DWORD)v323 - (_DWORD)v322) >> 5;
                if (v323 == (__int128 *)v322)
                  goto LABEL_447;
LABEL_421:
                v470 = (__int128 *)v322;
                v474 = v323;
                v332 = v420;
                while (2)
                {
                  v333 = *((_DWORD *)v322 + 2);
                  v334 = *((_DWORD *)v322 + 3);
                  v335 = *((_DWORD *)v322 + 4);
                  v336 = *((_BYTE *)v322 + 24);
                  v337 = (int)(float)(v322[7] * 10.0);
                  if (v332 < (unint64_t)v437)
                  {
                    if (v332)
                    {
                      *(_WORD *)v332 = v333;
                      *(_WORD *)(v332 + 2) = v334;
                      *(_DWORD *)(v332 + 4) = v335;
                      *(_BYTE *)(v332 + 8) = v336;
                      *(_BYTE *)(v332 + 9) = v337;
                    }
                    v332 += 12;
                    v163 = v461;
                    goto LABEL_423;
                  }
                  v338 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v332 - (_QWORD)v430) >> 2);
                  v339 = v338 + 1;
                  if (v338 + 1 > 0x1555555555555555)
                    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
                  v340 = (_DWORD *)v332;
                  v341 = (char *)v437 - (char *)v430;
                  if (0x5555555555555556 * (((char *)v437 - (char *)v430) >> 2) > v339)
                    v339 = 0x5555555555555556 * (((char *)v437 - (char *)v430) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * (((char *)v437 - (char *)v430) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v342 = 0x1555555555555555;
                  else
                    v342 = v339;
                  if (v342)
                  {
                    v479 = (char *)v437 - (char *)v430;
                    v161 = (float *)(*(uint64_t (**)(geo::codec::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v426 + 16))(v426, 12 * v342, 4);
                    v343 = (uint64_t)&v161[3 * v338];
                    v437 = &v161[3 * v342];
                    if (v161)
                    {
                      *(_WORD *)v343 = v333;
                      *(_WORD *)(v343 + 2) = v334;
                      *(_DWORD *)(v343 + 4) = v335;
                      *(_BYTE *)(v343 + 8) = v336;
                      *(_BYTE *)(v343 + 9) = v337;
                    }
                    v341 = v479;
                    v344 = (uint64_t)&v161[3 * v338];
                    v345 = v430;
                    v163 = v461;
                    if (v340 == v430)
                      goto LABEL_441;
LABEL_439:
                    v344 = v343;
                    do
                    {
                      v346 = *(_QWORD *)(v340 - 3);
                      v340 -= 3;
                      v347 = v340[2];
                      *(_QWORD *)(v344 - 12) = v346;
                      v344 -= 12;
                      *(_DWORD *)(v344 + 8) = v347;
                    }
                    while (v340 != v345);
                  }
                  else
                  {
                    v437 = 0;
                    v343 = 12 * v338;
                    v344 = 12 * v338;
                    v345 = v430;
                    v163 = v461;
                    if (v340 != v430)
                      goto LABEL_439;
                  }
LABEL_441:
                  v332 = v343 + 12;
                  if (v345)
                    v161 = (float *)(*(uint64_t (**)(geo::codec::Allocator *, _DWORD *, int64_t))(*(_QWORD *)v426 + 40))(v426, v345, v341);
                  v430 = (_DWORD *)v344;
                  v323 = v474;
LABEL_423:
                  v322 += 8;
                  if (v322 == (float *)v323)
                  {
                    v420 = v332;
                    v427 = (uint64_t)v470;
                    v166 = v165;
                    v435 = v470;
                    v162 = v482;
                    v167 = (uint64_t)v439;
                    goto LABEL_202;
                  }
                  continue;
                }
              }
              if (v314 >> 59)
                std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
              v318 = (unint64_t)v428 - v427;
              v319 = ((uint64_t)v428 - v427) >> 4;
              if (v319 <= v314)
                v319 = v314;
              if (v318 >= 0x7FFFFFFFFFFFFFE0)
                v320 = 0x7FFFFFFFFFFFFFFLL;
              else
                v320 = v319;
              v161 = (float *)(*(uint64_t (**)(geo::codec::Allocator *, uint64_t, uint64_t))(*(_QWORD *)v425 + 16))(v425, 32 * v320, 8);
              v321 = 32 * v302;
              v322 = &v161[8 * v302];
              v323 = (__int128 *)&v161[8 * v314];
              v324 = 32 * v303 - v321 + 32;
              v325 = v322;
              v162 = v482;
              v167 = (uint64_t)v439;
              do
              {
                if (v325)
                {
                  *(_OWORD *)v325 = 0u;
                  *((_OWORD *)v325 + 1) = 0u;
                }
                v325 += 8;
                v324 -= 32;
              }
              while (v324);
              v328 = v435;
              do
              {
                v329 = *(v328 - 1);
                *((_OWORD *)v322 - 2) = *(v328 - 2);
                *((_OWORD *)v322 - 1) = v329;
                v322 -= 8;
                v328 -= 2;
              }
              while (v328 != (__int128 *)v427);
              v428 = &v161[8 * v320];
              if (!v427)
              {
                v163 = v461;
                v326 = *v439;
                if (!*(_DWORD *)(*v439 + 136))
                  goto LABEL_446;
                goto LABEL_420;
              }
              v330 = v318;
              v331 = v323;
              v161 = (float *)(*(uint64_t (**)(geo::codec::Allocator *, uint64_t, unint64_t))(*(_QWORD *)v425 + 40))(v425, v427, v330);
              v323 = v331;
              v163 = v461;
              v326 = *v439;
              if (*(_DWORD *)(*v439 + 136))
                goto LABEL_420;
LABEL_446:
              *(_DWORD *)(v326 + 136) = -1431655765 * ((v420 - (unint64_t)v307) >> 2);
              *(_WORD *)(v326 + 146) += ((_DWORD)v323 - (_DWORD)v322) >> 5;
              if (v323 != (__int128 *)v322)
                goto LABEL_421;
LABEL_447:
              v427 = (uint64_t)v322;
              v166 = v165;
              v435 = (__int128 *)v322;
LABEL_202:
              v167 += 48;
              if (v167 == v421)
                goto LABEL_449;
            }
          }
          v435 = 0;
          v437 = 0;
          v428 = 0;
          v420 = 0;
          v430 = 0;
          v163 = 0;
          v164 = 0;
LABEL_449:
          v348 = geo::codec::Allocator::instance((geo::codec::Allocator *)v161);
          v349 = v420 - (_QWORD)v430;
          a1 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v348 + 16))(v348, v420 - (_QWORD)v430, 8);
          v350 = v421;
          v351 = *(_QWORD *)v422;
          *(_QWORD *)(*(_QWORD *)v422 + 744) = a1;
          if (a1)
          {
            *(_QWORD *)(v351 + 736) = 0xAAAAAAAAAAAAAAABLL * (v349 >> 2);
            a1 = (geo::codec::Allocator *)memcpy(a1, v430, v349);
          }
          else
          {
            v353 = v351 + 32;
            v352 = *(_QWORD *)(v351 + 32);
            v354 = *(_QWORD *)(v353 + 8) - v352;
            if (v354)
            {
              v355 = v354 / 168;
              if (v355 <= 1)
                v355 = 1;
              if (v355 >= 2)
              {
                v356 = v355 & 0xFFFFFFFFFFFFFFFELL;
                v357 = (_WORD *)(v352 + 314);
                v358 = v355 & 0xFFFFFFFFFFFFFFFELL;
                do
                {
                  *(v357 - 84) = 0;
                  *v357 = 0;
                  v357 += 168;
                  v358 -= 2;
                }
                while (v358);
                if (v355 == v356)
                  goto LABEL_461;
              }
              else
              {
                v356 = 0;
              }
              v359 = v355 - v356;
              v360 = (_WORD *)(v352 + 168 * v356 + 146);
              do
              {
                *v360 = 0;
                v360 += 84;
                --v359;
              }
              while (v359);
            }
          }
LABEL_461:
          if (v164)
            a1 = (geo::codec::Allocator *)(*(uint64_t (**)(float *, unint64_t, unint64_t))(*(_QWORD *)v463 + 40))(v463, v164, v163 - v164);
          if (v435)
            a1 = (geo::codec::Allocator *)(*(uint64_t (**)(geo::codec::Allocator *, __int128 *, int64_t))(*(_QWORD *)v425 + 40))(v425, v435, (char *)v428 - (char *)v435);
          if (v430)
            a1 = (geo::codec::Allocator *)(*(uint64_t (**)(geo::codec::Allocator *, _DWORD *, int64_t))(*(_QWORD *)v426 + 40))(v426, v430, (char *)v437 - (char *)v430);
          if (v418)
          {
            if (v418 != v421)
            {
              do
              {
                v364 = *(_QWORD *)(v350 - 32);
                if (v364)
                {
                  *(_QWORD *)(v350 - 24) = v364;
                  (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v350 - 8) + 40))(*(_QWORD *)(v350 - 8), v364, *(_QWORD *)(v350 - 16) - v364);
                }
                v350 -= 48;
              }
              while (v350 != v418);
            }
            a1 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v419 + 40))(v419, v418, v417 - v418);
          }
          v361 = 3200;
          do
          {
            v362 = &v484[v361];
            v363 = *(_QWORD *)&v484[v361 - 32];
            if (v363)
            {
              *((_QWORD *)v362 - 3) = v363;
              a1 = (geo::codec::Allocator *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v362 - 1)
                                                                                                + 40))(*((_QWORD *)v362 - 1), v363, *((_QWORD *)v362 - 2) - v363);
            }
            v361 -= 32;
          }
          while (v361);
          v1 = *(_QWORD *)v422;
          goto LABEL_478;
        }
        goto LABEL_50;
      }
    }
    v451 = v50 - 2;
    if (v432 == v431)
      v460 = 0;
    else
      v460 = *(_QWORD *)(v434 + 2952) + 16 * *(_QWORD *)(v429 + 16 * v48);
    v51 = *(_QWORD *)(v33 + 8);
    v52 = v35 + 48 * v443;
    *(_QWORD *)v52 = v467;
    *(_DWORD *)(v52 + 8) = v471;
    v53 = *(_QWORD *)(v52 + 16);
    v457 = (_QWORD *)(v52 + 16);
    v54 = *(_OWORD **)(v52 + 24);
    v55 = v35;
    v56 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v54 - v53) >> 5);
    v454 = v50 - 1;
    v57 = v50 - 1 - v56;
    if (v50 - 1 <= v56)
    {
      if (v50 - 1 >= v56)
      {
        ++v443;
        goto LABEL_99;
      }
      v69 = (_OWORD *)(v53 + 96 * v454);
    }
    else
    {
      v58 = v55 + 48 * v443;
      v61 = *(_QWORD *)(v58 + 32);
      v60 = (uint64_t *)(v58 + 32);
      v59 = v61;
      if (0xAAAAAAAAAAAAAAABLL * ((v61 - (uint64_t)v54) >> 5) < v57)
      {
        if (v454 > 0x2AAAAAAAAAAAAAALL)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v62 = 0xAAAAAAAAAAAAAAABLL * ((v59 - v53) >> 5);
        v63 = 2 * v62;
        if (2 * v62 <= v454)
          v63 = v50 - 1;
        if (v62 >= 0x155555555555555)
          v64 = 0x2AAAAAAAAAAAAAALL;
        else
          v64 = v63;
        v65 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v438 + 48 * v443 + 40) + 16))(*(_QWORD *)(v438 + 48 * v443 + 40), 96 * v64, 8);
        v66 = (_OWORD *)(v65 + 96 * v56);
        v67 = -96 * v56 + 96 * v50 - 96;
        v68 = v66;
        v42 = v467;
        do
        {
          if (v68)
          {
            v68[4] = 0u;
            v68[5] = 0u;
            v68[2] = 0u;
            v68[3] = 0u;
            *v68 = 0u;
            v68[1] = 0u;
          }
          v68 += 6;
          v67 -= 96;
        }
        while (v67);
        v72 = *v457;
        v71 = v457[1];
        if (v71 == *v457)
        {
          v77 = v457;
        }
        else
        {
          do
          {
            v73 = *(_OWORD *)(v71 - 80);
            *(v66 - 6) = *(_OWORD *)(v71 - 96);
            *(v66 - 5) = v73;
            v74 = *(_OWORD *)(v71 - 64);
            v75 = *(_OWORD *)(v71 - 48);
            v76 = *(_OWORD *)(v71 - 16);
            *(v66 - 2) = *(_OWORD *)(v71 - 32);
            *(v66 - 1) = v76;
            *(v66 - 4) = v74;
            *(v66 - 3) = v75;
            v66 -= 6;
            v71 -= 96;
          }
          while (v71 != v72);
          v77 = v457;
          v71 = *v457;
        }
        *v77 = v66;
        v77[1] = v65 + 96 * v454;
        v78 = *v60;
        *v60 = v65 + 96 * v64;
        if (v71)
        {
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v438 + 48 * v443 + 40) + 40))(*(_QWORD *)(v438 + 48 * v443 + 40), v71, v78 - v71);
          v42 = v467;
        }
LABEL_98:
        ++v443;
LABEL_99:
        v79 = 0;
        v80 = 0;
        v81 = v51 + 8 * v49;
        v82 = 0.0;
        v83 = v50 - 2;
        v84 = v50 - 1;
        v85 = v457;
        v446 = v81;
        v449 = v40;
        while (2)
        {
          v86 = *v85;
          v87 = *v85 + 96 * v79;
          *(_QWORD *)v87 = v42;
          *(_DWORD *)(v87 + 56) = v471;
          *(_DWORD *)(v87 + 60) = v80;
          v88 = (float *)(v81 + 8 * v79);
          v89 = (v80 + 1);
          v90 = (float *)(v81 + 8 * v89);
          v91 = v88[1];
          v92 = v90[1];
          v93 = fmaxf(*v88, *v90);
          v94 = fminf(*v88, *v90);
          v95 = fmaxf(v91, v92);
          v96 = fminf(v91, v92);
          v97 = v93 < v94 || v95 < v96;
          if (v97)
          {
            v98 = v93;
          }
          else
          {
            v96 = v96 + -0.002;
            v94 = v94 + -0.002;
            v98 = v93 + 0.002;
          }
          if (!v97)
            v95 = v95 + 0.002;
          v99 = v86 + 96 * v79;
          *(float *)(v99 + 8) = v94;
          *(float *)(v99 + 12) = v96;
          *(float *)(v99 + 16) = v98;
          *(float *)(v99 + 20) = v95;
          v33 = 9;
          if (((int)(float)(v94 * 10.0) & ~((int)(float)(v94 * 10.0) >> 31)) >= 9)
            v101 = 9;
          else
            v101 = (int)(float)(v94 * 10.0) & ~((int)(float)(v94 * 10.0) >> 31);
          v100 = (int)(float)(v96 * 10.0);
          if ((v100 & ~(v100 >> 31)) >= 9)
            v102 = 9;
          else
            v102 = v100 & ~(v100 >> 31);
          v103 = (int)(float)(v98 * 10.0) & ~((int)(float)(v98 * 10.0) >> 31);
          if (v103 >= 9)
            v103 = 9;
          v104 = (int)(float)(v95 * 10.0) & ~((int)(float)(v95 * 10.0) >> 31);
          if (v104 >= 9)
            v104 = 9;
          *(_DWORD *)(v99 + 24) = v101;
          v481 = (int *)(v99 + 24);
          *(_DWORD *)(v99 + 32) = v103;
          v105 = (int *)(v99 + 32);
          *(_DWORD *)(v99 + 36) = v104;
          v476 = (int *)(v99 + 36);
          *(_DWORD *)(v99 + 28) = v102;
          v106 = *v88;
          v107 = v88[1];
          v108 = *v90 - *v88;
          v109 = v90[1] - v107;
          v110 = sqrtf((float)(v108 * v108) + (float)(v109 * v109));
          *(float *)(v99 + 76) = v110;
          v111 = (float *)(v99 + 76);
          *(v111 - 9) = v106;
          *(v111 - 8) = v107;
          *(v111 - 7) = v108;
          *(v111 - 6) = v109;
          v111[1] = v82;
          if (v432 != v431)
          {
            v112 = v86 + 96 * v79;
            *(float *)(v112 + 84) = fmaxf(fabsf(*(float *)(v460 + 16 * v79 + 4)), fabsf(*(float *)(v460 + 16 * v79 + 12)));
            *(float *)(v112 + 88) = fmaxf(fabsf(*(float *)(v460 + 16 * v89 + 4)), fabsf(*(float *)(v460 + 16 * v89 + 12)));
          }
          v113 = (float *)(v86 + 96 * v79);
          v113[16] = 0.002 / v110;
          if (v80)
            v114 = 0.0;
          else
            v114 = -(float)(0.002 / v110);
          if (v83 == v79)
            v115 = (float)(0.002 / v110) + 1.0;
          else
            v115 = 1.0;
          v113[17] = v114;
          v113[18] = v115;
          if (v103 < v101 || v104 < v102)
          {
LABEL_100:
            v82 = v110 + v82;
            v79 = v89;
            v80 = v89;
            v42 = v467;
            if (v84 > v89)
              continue;
            v35 = v438;
LABEL_68:
            v46 = v471;
            goto LABEL_59;
          }
          break;
        }
        v462 = v111;
        v464 = v89;
        v117 = &v484[320 * v102 + 32 * v101];
        while (1)
        {
          v118 = *v481;
          v119 = v117;
          if (*v481 <= v103)
            break;
LABEL_133:
          v117 += 320;
          v97 = v102++ < v104;
          if (!v97)
          {
            v89 = v464;
            v110 = *v462;
            v40 = v449;
            v83 = v451;
            v84 = v454;
            v85 = v457;
            v81 = v446;
            goto LABEL_100;
          }
        }
        while (1)
        {
          v121 = (uint64_t *)*((_QWORD *)v119 + 1);
          v122 = *((_QWORD *)v119 + 2);
          if ((unint64_t)v121 < v122)
          {
            if (v121)
              *v121 = v87;
            v120 = v121 + 1;
            goto LABEL_138;
          }
          v123 = ((uint64_t)v121 - *(_QWORD *)v119) >> 3;
          v124 = v123 + 1;
          if ((unint64_t)(v123 + 1) >> 61)
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          v125 = v122 - *(_QWORD *)v119;
          if (v125 >> 2 > v124)
            v124 = v125 >> 2;
          v126 = (unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v124;
          if (v126)
          {
            v33 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v119 + 3) + 16))(*((_QWORD *)v119 + 3), 8 * v126, 8);
            v127 = (uint64_t *)(v33 + 8 * v123);
            v128 = v33 + 8 * v126;
            if (v33)
              *v127 = v87;
            v130 = *(_QWORD *)v119;
            v129 = *((_QWORD *)v119 + 1);
            v131 = v129 - *(_QWORD *)v119;
            if (v129 == *(_QWORD *)v119)
            {
LABEL_160:
              v120 = v127 + 1;
              *(_QWORD *)v119 = v127;
              *((_QWORD *)v119 + 1) = v127 + 1;
              v141 = *((_QWORD *)v119 + 2);
              *((_QWORD *)v119 + 2) = v128;
              if (!v129)
                goto LABEL_138;
LABEL_165:
              v33 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v119 + 3) + 40))(*((_QWORD *)v119 + 3), v129, v141 - v129);
              goto LABEL_138;
            }
          }
          else
          {
            v128 = 0;
            v127 = (uint64_t *)(8 * v123);
            v130 = *(_QWORD *)v119;
            v129 = *((_QWORD *)v119 + 1);
            v131 = v129 - *(_QWORD *)v119;
            if (v129 == *(_QWORD *)v119)
              goto LABEL_160;
          }
          v132 = v131 - 8;
          if ((unint64_t)(v131 - 8) < 0x38)
            break;
          v133 = v127;
          if ((unint64_t)(v129 - (_QWORD)v127) < 0x20)
            goto LABEL_163;
          v134 = (v132 >> 3) + 1;
          v135 = 8 * (v134 & 0x3FFFFFFFFFFFFFFCLL);
          v136 = v129 - v135;
          v133 = &v127[v135 / 0xFFFFFFFFFFFFFFF8];
          v137 = v127 - 2;
          v138 = (__int128 *)(v129 - 16);
          v139 = v134 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v140 = *v138;
            *((_OWORD *)v137 - 1) = *(v138 - 1);
            *(_OWORD *)v137 = v140;
            v137 -= 4;
            v138 -= 2;
            v139 -= 4;
          }
          while (v139);
          v129 = v136;
          if (v134 != (v134 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_163;
LABEL_164:
          v129 = *(_QWORD *)v119;
          v120 = v127 + 1;
          *(_QWORD *)v119 = v133;
          *((_QWORD *)v119 + 1) = v127 + 1;
          v141 = *((_QWORD *)v119 + 2);
          *((_QWORD *)v119 + 2) = v128;
          if (v129)
            goto LABEL_165;
LABEL_138:
          *((_QWORD *)v119 + 1) = v120;
          v119 += 32;
          v103 = *v105;
          v97 = v118++ < *v105;
          if (!v97)
          {
            v104 = *v476;
            goto LABEL_133;
          }
        }
        v133 = v127;
        do
        {
LABEL_163:
          v142 = *(_QWORD *)(v129 - 8);
          v129 -= 8;
          *--v133 = v142;
        }
        while (v129 != v130);
        goto LABEL_164;
      }
      v69 = &v54[6 * v57];
      v70 = 96 * v50 - 96 * v56 - 96;
      v42 = v467;
      do
      {
        if (v54)
        {
          v54[4] = 0u;
          v54[5] = 0u;
          v54[2] = 0u;
          v54[3] = 0u;
          *v54 = 0u;
          v54[1] = 0u;
        }
        v54 += 6;
        v70 -= 96;
      }
      while (v70);
    }
    v457[1] = v69;
    goto LABEL_98;
  }
LABEL_478:
  if (!*(_QWORD *)(v1 + 688))
    goto LABEL_497;
  v365 = geo::codec::Allocator::instance(a1);
  v366 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v365 + 40))(v365, *(_QWORD *)(*(_QWORD *)v422 + 680), 0);
  *(_QWORD *)(*(_QWORD *)v422 + 680) = 0;
  v367 = geo::codec::Allocator::instance(v366);
  v368 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v367 + 24))(v367, *(_QWORD *)(*(_QWORD *)v422 + 696), 32);
  v369 = geo::codec::Allocator::instance(v368);
  v370 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v369 + 24))(v369, *(_QWORD *)(*(_QWORD *)v422 + 696), 2);
  v371 = *(_QWORD **)v422;
  *(_QWORD *)(*(_QWORD *)v422 + 680) = v370;
  if (!v368)
  {
    v391 = *(uint64_t (**)(void))(*(_QWORD *)geo::codec::Allocator::instance(v370) + 40);
LABEL_496:
    v392 = (geo::codec::Allocator *)v391();
    v393 = geo::codec::Allocator::instance(v392);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v393 + 40))(v393, *(_QWORD *)(*(_QWORD *)v422 + 680), 0);
    v1 = *(_QWORD *)v422;
    *(_QWORD *)(*(_QWORD *)v422 + 680) = 0;
LABEL_497:
    v394 = *(_QWORD *)(v1 + 856);
    v395 = *(_DWORD *)(v1 + 864) - v394;
    v396 = v395 - 1;
    if (v395 - 1 < 0)
      return 1;
    goto LABEL_498;
  }
  if (!v370)
  {
    v391 = *(uint64_t (**)(void))(*(_QWORD *)geo::codec::Allocator::instance(0) + 40);
    goto LABEL_496;
  }
  if (v371[87])
  {
    v372 = 0;
    v373 = 0;
    while (1)
    {
      v375 = v371[86];
      if (*(_DWORD *)(v375 + v372))
      {
        v376 = *(unsigned int *)(v375 + v372 + 4);
        if (v371[90] <= v376)
          goto LABEL_505;
        v377 = v371[89];
        v378 = v377 + 16 * v376;
        v379 = *(unsigned int *)(v378 + 4);
        v381 = v371 + 4;
        v380 = v371[4];
        if (0xCF3CF3CF3CF3CF3DLL * ((v381[1] - v380) >> 3) <= v379)
          goto LABEL_505;
        v382 = v380 + 168 * v379;
        v383 = *(unsigned int *)(v378 + 8);
        if (v383 >= *(_DWORD *)(v382 + 100)
          || (v370 = (geo::codec::Allocator *)geo::codec::vertexPoolForFeature(v382)) == 0
          || (v384 = *((_QWORD *)v370 + 4)) == 0
          || (v385 = *(unsigned int *)(v382 + 96) + v383, *((_QWORD *)v370 + 5) <= v385)
          || (v386 = *(_QWORD *)(v384 + 16 * v385), v386 >= *((_QWORD *)v370 + 2))
          || (v387 = *(_QWORD *)(v384 + 16 * v385 + 8), v388 = *(unsigned int *)(v377 + 16 * v376 + 12), v387 <= v388))
        {
LABEL_505:
          v399 = geo::codec::Allocator::instance(v370);
          v400 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v399 + 40))(v399, v368, 0);
          v401 = geo::codec::Allocator::instance(v400);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v401 + 40))(v401, *(_QWORD *)(*(_QWORD *)v422 + 680), 0);
          *(_QWORD *)(*(_QWORD *)v422 + 680) = 0;
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 9414);
          return 0;
        }
        v389 = *((_QWORD *)v370 + 1) + 8 * v386;
        v390 = (size_t *)((char *)v368 + v372);
        *v390 = v373;
        v390[1] = *(_QWORD *)(v382 + 16);
        *(size_t *)((char *)v390 + 20) = *(_QWORD *)(v389 + 8 * v388);
        v371 = *(_QWORD **)v422;
      }
      ++v373;
      v374 = v371[87];
      v372 += 32;
      if (v373 >= v374)
        goto LABEL_507;
    }
  }
  v374 = 0;
LABEL_507:
  v475 = v368;
  qsort(v368, v374, 0x20uLL, (int (__cdecl *)(const void *, const void *))geo::codec::_findOverpasses(std::shared_ptr<geo::codec::VectorTile> const&)::$_0::__invoke);
  v483 = *(_QWORD *)(*(_QWORD *)v422 + 696);
  if (v483 != 1)
  {
    v404 = 0;
    v480 = 0;
    v405 = *(_QWORD *)(*(_QWORD *)v422 + 680);
    v406 = v368;
    v407 = (float *)((char *)v368 + 56);
    v408 = v483 - 1;
    do
    {
      v409 = *(_QWORD *)v406;
      if (!*(_WORD *)(v405 + 2 * *(_QWORD *)v406) && !*((_BYTE *)v406 + 16) && v404 + 1 < v483)
      {
        v411 = *((float *)v406 + 5);
        v412 = v407;
        v413 = v408;
        do
        {
          if ((float)(*(v412 - 1) - v411) > 0.00018311)
            break;
          if (vabds_f32(*((float *)v406 + 6), *v412) <= 0.00018311)
          {
            v403 = (char *)*((_QWORD *)v406 + 1);
            if (v403
              && (v415 = (const char *)*((_QWORD *)v412 - 2)) != 0
              && (v403 = (char *)strcmp(v403, v415), !(_DWORD)v403)
              || (v414 = *((_QWORD *)v412 - 3), *(_WORD *)(v405 + 2 * v414))
              || *(_WORD *)(v405 + 2 * v409))
            {
              *((_BYTE *)v412 - 8) = 1;
            }
            else
            {
              *(_WORD *)(v405 + 2 * v409) = ++v480;
              *(_WORD *)(v405 + 2 * v414) = v480;
            }
          }
          v412 += 8;
          --v413;
        }
        while (v413);
      }
      ++v404;
      v406 = (geo::codec::Allocator *)((char *)v406 + 32);
      --v408;
      v407 += 8;
    }
    while (v404 != v483 - 1);
  }
  v416 = geo::codec::Allocator::instance((geo::codec::Allocator *)v403);
  (*(void (**)(uint64_t, geo::codec::Allocator *, _QWORD))(*(_QWORD *)v416 + 40))(v416, v475, 0);
  v394 = *(_QWORD *)(*(_QWORD *)v422 + 856);
  v395 = *(_DWORD *)(*(_QWORD *)v422 + 864) - v394;
  v396 = v395 - 1;
  if (v395 - 1 >= 0)
  {
LABEL_498:
    v397 = 0;
    v398 = (_BYTE *)(v394 + v396);
    while (1)
    {
      if (!*v398)
        goto LABEL_500;
      if (*v398 != 32 || (v397 & 1) == 0)
      {
        v397 = 0;
        --v395;
        --v398;
        if (v395 <= 0)
          return 1;
      }
      else
      {
        *v398 = 0;
LABEL_500:
        v397 = 1;
        --v395;
        --v398;
        if (v395 <= 0)
          return 1;
      }
    }
  }
  return 1;
}

void sub_1885D05E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;

  v47 = v44;
  if (v45)
  {
    while (v44 != v45)
    {
      v48 = *(_QWORD *)(v44 - 32);
      if (v48)
      {
        *(_QWORD *)(v44 - 24) = v48;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v44 - 8) + 40))(*(_QWORD *)(v44 - 8), v48, *(_QWORD *)(v44 - 16) - v48);
      }
      v44 -= 48;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a13 + 40))(a13, v45, v47 - v45);
  }
  v49 = 3200;
  while (1)
  {
    v50 = &a44 + v49;
    v51 = *(_QWORD *)(&a44 + v49 - 32);
    if (v51)
    {
      *((_QWORD *)v50 - 3) = v51;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v50 - 1) + 40))(*((_QWORD *)v50 - 1), v51, *((_QWORD *)v50 - 2) - v51);
    }
    v49 -= 32;
    if (!v49)
      _Unwind_Resume(exception_object);
  }
}

uint64_t geo::codec::Allocator::instance(geo::codec::Allocator *this)
{
  unsigned __int8 v1;
  uint64_t v3;

    return geo::codec::Allocator::instance(void)::alloc;
  v3 = operator new();
  geo::MallocZoneAllocator::MallocZoneAllocator(v3, "GeoCodec", 0x99AFC36000000008, 0, 0);
  geo::codec::Allocator::instance(void)::alloc = v3;
  return geo::codec::Allocator::instance(void)::alloc;
}

void sub_1885D0890(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10F1C40DA10AB66);
  _Unwind_Resume(a1);
}

void sub_1885D08C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *geo::MallocZoneAllocator::allocate(malloc_zone_t **this, size_t a2)
{
  pthread_rwlock_t *v4;
  geo::read_write_lock *v5;
  const char *v6;
  void *v7;
  unint64_t *v8;
  unint64_t v9;
  geo::read_write_lock *v10;
  const char *v11;

  v4 = (pthread_rwlock_t *)(this + 7);
  v5 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(this + 7));
  if ((_DWORD)v5)
    geo::read_write_lock::logFailure(v5, (uint64_t)"read lock", v6);
  v7 = malloc_type_zone_malloc(this[6], a2, 0x2D50C850uLL);
  v8 = (unint64_t *)(this + 5);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v10 = (geo::read_write_lock *)pthread_rwlock_unlock(v4);
  if ((_DWORD)v10)
    geo::read_write_lock::logFailure(v10, (uint64_t)"unlock", v11);
  return v7;
}

void sub_1885D0968(_Unwind_Exception *a1)
{
  pthread_rwlock_t *v1;
  geo::read_write_lock *v3;
  const char *v4;

  v3 = (geo::read_write_lock *)pthread_rwlock_unlock(v1);
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"unlock", v4);
  _Unwind_Resume(a1);
}

void geo::MallocZoneAllocator::deallocate(malloc_zone_t **this, void *a2)
{
  pthread_rwlock_t *v4;
  geo::read_write_lock *v5;
  const char *v6;
  unint64_t *v7;
  unint64_t v8;
  geo::read_write_lock *v9;
  const char *v10;

  v4 = (pthread_rwlock_t *)(this + 7);
  v5 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(this + 7));
  if ((_DWORD)v5)
    geo::read_write_lock::logFailure(v5, (uint64_t)"read lock", v6);
  if (a2)
  {
    v7 = (unint64_t *)(this + 5);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
  }
  malloc_zone_free(this[6], a2);
  v9 = (geo::read_write_lock *)pthread_rwlock_unlock(v4);
  if ((_DWORD)v9)
    geo::read_write_lock::logFailure(v9, (uint64_t)"unlock", v10);
}

void sub_1885D0A20(_Unwind_Exception *a1)
{
  pthread_rwlock_t *v1;
  geo::read_write_lock *v3;
  const char *v4;

  v3 = (geo::read_write_lock *)pthread_rwlock_unlock(v1);
  if ((_DWORD)v3)
    geo::read_write_lock::logFailure(v3, (uint64_t)"unlock", v4);
  _Unwind_Resume(a1);
}

_QWORD *geo::codec::vertexPoolForFeature(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  _QWORD *v5;
  _QWORD **v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v1 = (_QWORD *)a1;
  if (!a1)
    return v1;
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = (_QWORD *)*v1;
  if (!*v1)
    goto LABEL_37;
  if (v5[4] > (unint64_t)v1 || v5[5] <= (unint64_t)v1)
  {
    if (v5[12] <= (unint64_t)v1 && v5[13] > (unint64_t)v1)
    {
      v6 = (_QWORD **)(v5 + 100);
      goto LABEL_36;
    }
    if (v5[23] <= (unint64_t)v1 && v5[24] > (unint64_t)v1
      || v5[27] <= (unint64_t)v1 && v5[28] > (unint64_t)v1)
    {
      v6 = (_QWORD **)(v5 + 105);
      goto LABEL_36;
    }
    if (v5[35] <= (unint64_t)v1 && v5[36] > (unint64_t)v1)
    {
      v6 = (_QWORD **)(v5 + 102);
      goto LABEL_36;
    }
    if (v5[47] <= (unint64_t)v1 && v5[48] > (unint64_t)v1)
    {
      v6 = (_QWORD **)(v5 + 103);
      goto LABEL_36;
    }
    if (v5[51] <= (unint64_t)v1 && v5[52] > (unint64_t)v1)
    {
      v6 = (_QWORD **)(v5 + 104);
      goto LABEL_36;
    }
    if (v5[8] <= (unint64_t)v1 && v5[9] > (unint64_t)v1)
    {
      v6 = (_QWORD **)(v5 + 101);
      goto LABEL_36;
    }
    if (v5[19] <= (unint64_t)v1 && v5[20] > (unint64_t)v1)
    {
      v6 = (_QWORD **)(v5 + 106);
      goto LABEL_36;
    }
    if (v5[436] <= (unint64_t)v1 && v5[437] > (unint64_t)v1)
    {
      v6 = (_QWORD **)(v5 + 440);
      goto LABEL_36;
    }
LABEL_37:
    v1 = 0;
    goto LABEL_38;
  }
  v6 = (_QWORD **)(v5 + 99);
LABEL_36:
  v1 = *v6;
LABEL_38:
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v4);
  return v1;
}

uint64_t geo::MallocZoneAllocator::MallocZoneAllocator(uint64_t a1, const char *a2, uint64_t a3, vm_size_t a4, unsigned int a5)
{
  geo::read_write_lock *v9;
  const char *v10;
  malloc_zone_t *zone;

  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_1E1BF6690;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  v9 = (geo::read_write_lock *)pthread_rwlock_init((pthread_rwlock_t *)(a1 + 56), 0);
  if ((_DWORD)v9)
    geo::read_write_lock::logFailure(v9, (uint64_t)"initialization", v10);
  zone = malloc_create_zone(a4, a5);
  *(_QWORD *)(a1 + 48) = zone;
  malloc_set_zone_name(zone, a2);
  *(_QWORD *)(a1 + 256) = os_log_create("com.apple.VectorKit", "Memory");
  return a1;
}

void sub_1885D0D08(_Unwind_Exception *a1)
{
  pthread_rwlock_t *v1;

  geo::read_write_lock::~read_write_lock(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTileKeyEquals(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void sub_1885D0DF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1885D0EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1885D0FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1885D126C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1885D15C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1885D1A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, id *location, void *a12, void *a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, id a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  void *v28;
  void *v29;
  uint64_t v30;

  objc_destroyWeak(location);
  objc_destroyWeak(&a19);

  _Unwind_Resume(a1);
}

void sub_1885D1CBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  os_unfair_lock_unlock(&stru_1ECDBBDBC);
  _Unwind_Resume(a1);
}

void sub_1885D270C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885D28A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885D2A10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORegionalResourceTileDataReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  int v17;
  int v18;
  int *v19;
  _BOOL4 v20;
  int *v21;
  int v22;
  int *v23;
  int *v24;
  char v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  int v33;
  unint64_t v35;
  BOOL v36;
  int *v37;
  int v38;
  int v39;
  BOOL v40;
  GEOAttribution *v41;
  id v42;
  void *v43;
  int v44;
  char v45;
  void *v46;
  char v48;
  int v49;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 1;
        v17 = v16 & ~(_DWORD)v11 | v7;
        v18 = v16 | v11;
        if ((((v16 | v11) | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = v9 != 0;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = 1;
        v23 = (int *)MEMORY[0x1E0D82BC8];
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_66;
        v48 = v17;
        v49 = v20 | v18 | v17;
        v24 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v7;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v9;
        v7 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_BYTE *)(v3 + *v23))
      goto LABEL_64;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    while (1)
    {
      v28 = *v21;
      v29 = *(_QWORD *)(v3 + v28);
      v30 = v29 + 1;
      if (v29 == -1 || v30 > *(_QWORD *)(v3 + *v6))
        break;
      v31 = *(_BYTE *)(*(_QWORD *)(v3 + *v24) + v29);
      *(_QWORD *)(v3 + v28) = v30;
      v27 |= (unint64_t)(v31 & 0x7F) << v25;
      if ((v31 & 0x80) == 0)
        goto LABEL_25;
      v25 += 7;
      if (v26++ >= 9)
      {
        v27 = 0;
        v33 = *(unsigned __int8 *)(v3 + *v23);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v23) = 1;
LABEL_25:
    v33 = *(unsigned __int8 *)(v3 + *v23);
    if (*(_BYTE *)(v3 + *v23))
      v27 = 0;
LABEL_27:
    if (v33 || (v27 & 7) == 4)
    {
LABEL_64:
      v22 = 1;
      goto LABEL_65;
    }
    v35 = v27 >> 3;
    v36 = v18;
    if (!((v19 == 0) | v18 & 1))
    {
      v37 = v19;
      do
      {
        v39 = *v37++;
        v38 = v39;
        v36 = v39 != 0;
        if (v39)
          v40 = v38 == (_DWORD)v35;
        else
          v40 = 1;
      }
      while (!v40);
    }
    if ((_DWORD)v35 == 3)
    {
      if (!v36 || (*(_BYTE *)(a1 + 60) & 4) != 0)
      {
LABEL_62:
        v22 = PBReaderSkipValueWithTag();
        v23 = (int *)MEMORY[0x1E0D82BC8];
        if ((v22 & v49 & 1) == 0)
          goto LABEL_65;
        goto LABEL_63;
      }
      PBReaderReadString();
      v41 = (GEOAttribution *)objc_claimAutoreleasedReturnValue();
      if (v41)
        -[GEORegionalResourceTileData _addNoFlagsFilename:](a1, v41);
      goto LABEL_54;
    }
    if ((_DWORD)v35 == 2)
      break;
    if ((_DWORD)v35 == 1)
    {
      if (!v36 || (*(_BYTE *)(a1 + 60) & 8) != 0)
        goto LABEL_62;
      PBReaderReadString();
      v41 = (GEOAttribution *)objc_claimAutoreleasedReturnValue();
      if (v41)
        -[GEORegionalResourceTileData _addNoFlagsIcon:](a1, v41);
      goto LABEL_54;
    }
    if ((v48 & 1) == 0 || (*(_BYTE *)(a1 + 60) & 1) != 0)
      goto LABEL_62;
    if (!*(_QWORD *)(a1 + 16))
    {
      v42 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v43 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v42;

    }
    v22 = PBUnknownFieldAdd();
    v23 = (int *)MEMORY[0x1E0D82BC8];
    if (!v22)
      goto LABEL_67;
LABEL_60:
    if ((v49 & 1) == 0)
      goto LABEL_64;
LABEL_63:
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6))
      goto LABEL_64;
  }
  if (!v36 || (*(_BYTE *)(a1 + 60) & 2) != 0)
    goto LABEL_62;
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_82;
  v41 = objc_alloc_init(GEOAttribution);
  if (GEOAttributionReadAllFrom((uint64_t)v41, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    -[GEORegionalResourceTileData _addNoFlagsAttribution:](a1, v41);
LABEL_54:

    v23 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_60;
  }

LABEL_82:
  v22 = 0;
  v23 = (int *)MEMORY[0x1E0D82BC8];
LABEL_65:
  LOBYTE(v17) = v48;
LABEL_66:
  if ((v17 & 1) != 0)
LABEL_67:
    *(_BYTE *)(a1 + 60) |= 1u;
  if (v18 & 1 | ((v22 & 1) == 0))
  {
    *(_BYTE *)(a1 + 60) |= 8u;
    *(_BYTE *)(a1 + 60) |= 2u;
    *(_BYTE *)(a1 + 60) |= 4u;
  }
  else if (v19)
  {
    while (1)
    {
      v44 = *v19++;
      v45 = 8;
      switch(v44)
      {
        case 0:
          goto LABEL_75;
        case 1:
          goto LABEL_74;
        case 2:
          v45 = 2;
          goto LABEL_74;
        case 3:
          v45 = 4;
LABEL_74:
          *(_BYTE *)(a1 + 60) |= v45;
          break;
        default:
          continue;
      }
    }
  }
LABEL_75:
  if (v22)
  {
    v3 = *(_BYTE *)(v3 + *v23) == 0;
    if ((v18 & 1) == 0)
      return v3;
LABEL_79:
    v46 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  else
  {
    v3 = 0;
    if ((v18 & 1) != 0)
      goto LABEL_79;
  }
  return v3;
}

void sub_1885D32D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885D3484(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEORegionalResourceTileKeyActiveScenarios(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unsigned int v4;
  void *v5;

  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = 0;
  v4 = *(unsigned __int8 *)(a1 + 5);
  do
  {
    if ((v4 & 1) != 0)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v5);

    }
    v4 >>= 1;
    ++v3;
  }
  while (v3 != 7);
  return v2;
}

void sub_1885D3C90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOGetSHA1FromExtendedAttributes(void *a1)
{
  const char *v1;
  ssize_t v2;
  size_t v3;
  id v4;
  id v5;

  v1 = (const char *)objc_msgSend(objc_retainAutorelease(a1), "fileSystemRepresentation");
  v2 = getxattr(v1, "com.apple.GeoServices.SHA1", 0, 0, 0, 0);
  if (v2 < 0)
  {
    v5 = 0;
  }
  else
  {
    v3 = v2;
    objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", v2);
    v4 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    if (getxattr(v1, "com.apple.GeoServices.SHA1", (void *)objc_msgSend(v4, "mutableBytes"), v3, 0, 0) < 1)
      v5 = 0;
    else
      v5 = v4;

  }
  return v5;
}

void sub_1885D47D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOActiveTileGroupPath(void *a1)
{
  void *v1;
  void *v2;

  GEOResourceCachesDirectory(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stringByAppendingPathComponent:", CFSTR("ActiveTileGroup.pbd"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t GEOTileKeyMakeOnline(_BYTE *a1)
{
  uint64_t v1;

  v1 = -97;
  if ((*a1 & 0x60) == 0)
    v1 = -1;
  return v1 & *(_QWORD *)a1;
}

void gcl::tmesh::DecoderImpl::decodeVertexAttributesAC(gcl::tmesh::DecoderImpl *this, int *a2, BOOL *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  _BOOL4 v17;
  unsigned int v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  _BOOL4 v25;
  _BOOL4 v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int32x4_t *v35;
  uint64_t v36;
  int32x4_t *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int32x4_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  signed int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int *v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int *v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  _BOOL4 v90;
  int v91;
  int v92;
  int *v93;
  int v94;
  __int32 v95;
  __int32 v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  signed int v102;
  int v103;
  uint64_t v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  int v108;
  int32x2_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int *v114;
  __int8 *v115;
  double v116;
  int v117;
  int *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int32x2_t v126;
  int32x2_t v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  unint64_t v137;
  int32x2_t v138;
  int32x2_t v139;
  int v140;
  int32x2_t v141;
  int32x2_t v142;
  int v143;
  int32x2_t v144;
  int32x2_t v145;
  int v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  int v150;
  unsigned int v151;
  uint64_t v152;
  unint64_t v153;
  int v154;
  unint64_t v155;
  int32x2_t v156;
  int32x2_t v157;
  int v158;
  int32x2_t v159;
  int32x2_t v160;
  unsigned int v161;
  unsigned int v162;
  int v163;
  int v164;
  unsigned int v165;
  uint64_t v166;
  unint64_t v167;
  int v168;
  unint64_t v169;
  int32x2_t v170;
  unsigned int v171;
  unsigned int v172;
  int v173;
  int v174;
  unsigned int v175;
  uint64_t v176;
  unint64_t v177;
  int v178;
  unint64_t v179;
  unsigned int v180;
  unsigned int v181;
  int v182;
  int v183;
  unsigned int v184;
  uint64_t v185;
  unint64_t v186;
  int v187;
  unint64_t v188;
  unsigned int v189;
  unsigned int v190;
  BOOL v191;
  _BOOL4 v192;
  int v193;
  unsigned int v194;
  unsigned int v195;
  uint64_t v196;
  unsigned int v197;
  unsigned int v198;
  int v199;
  int v200;
  unsigned int v201;
  uint64_t v202;
  unint64_t v203;
  int v204;
  unint64_t v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  _BOOL4 v209;
  unsigned int v210;
  unsigned int v211;
  int v212;
  int32x2_t v213;
  int32x2_t v214;
  int8x8_t v215;
  unsigned int v216;
  unsigned int v217;
  BOOL v218;
  _BOOL4 v219;
  int v220;
  unsigned int v221;
  unsigned int v222;
  uint64_t v223;
  unsigned int v224;
  int v225;
  int v226;
  unsigned int v227;
  uint64_t v228;
  unint64_t v229;
  int v230;
  unint64_t v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  _BOOL4 v235;
  unsigned int v236;
  unsigned int v237;
  int v238;
  int32x2_t v239;
  int32x2_t v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  BOOL v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  uint32x2_t v248;
  __int32 v249;
  int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  double v255;
  BOOL v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  BOOL v261;
  unsigned int v262;
  unsigned int v263;
  int32x2_t v264;
  int32x2_t v265;
  int32x2_t v266;
  int32x2_t v267;
  int v268;
  int32x2_t v269;
  int32x2_t v270;
  int v271;
  int32x2_t v272;
  int v273;
  int32x2_t v274;
  int32x2_t v275;
  int v276;
  int32x2_t v277;
  int32x2_t v278;
  int v279;
  int32x2_t v280;
  int32x2_t v281;
  int32x2_t v282;
  int v283;
  int32x2_t v284;
  int32x2_t v285;
  int v286;
  int32x2_t v287;
  int32x2_t v288;
  int v289;
  int32x2_t v290;
  int32x2_t v291;
  int v292;
  int32x2_t v293;
  int32x2_t v294;
  uint32x2_t v295;
  BOOL v296;
  int v297;
  int32x2_t v298;
  int64x2_t v299;
  unint64_t v300;
  uint32x2_t v301;
  int v302;
  int v303;
  int64x2_t v304;
  int v305;
  int v306;
  int32x2_t v307;
  unsigned int v308;
  unsigned int v309;
  __int32 v310;
  _BOOL4 v312;
  int v313;
  int v314;
  int *v315;
  int v316;
  __int32 v317;
  __int32 v318;
  int v319;
  int v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  int32x4_t *v326;
  uint64_t v327;
  int v328;
  uint64_t v329;
  unsigned int v330;
  int *v331;
  int v332;
  int v333;
  uint64_t v334;
  size_t v335;
  size_t v336;
  size_t v337;
  __int32 *v338;
  int *v339;
  __int32 v340;
  int *v341;
  int v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  BOOL v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  __int32 *v350;
  int *v351;
  int *v352;
  int v353;
  int v354;
  int v355;
  int v356;
  int *v357;
  uint64_t v358;
  int32x4_t *v359;
  int *v360;
  int32x4_t v361;
  int32x4_t v362;
  int32x4_t v363;
  uint32x4_t v364;
  size_t v365;
  int *v366;
  int32x4_t *v367;
  int32x4_t v368;
  int32x4_t *v369;
  uint64_t v370;
  int v371;
  int32x4_t v372;
  unsigned int v373;
  int *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  int *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unsigned int v382;
  unsigned int v383;
  int v384;
  int v385;
  unsigned int v386;
  uint64_t v387;
  unint64_t v388;
  int v389;
  unint64_t v390;
  unsigned int v391;
  unsigned int v392;
  int *v393;
  int v394;
  int v395;
  int v396;
  unsigned int v397;
  uint64_t v398;
  unint64_t v399;
  int v400;
  unint64_t v401;
  uint64_t v402;
  unsigned int v403;
  unsigned int v404;
  int v405;
  unsigned int v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  __int32 *v411;
  int *v412;
  __int32 v413;
  int v414;
  unsigned int v415;
  uint64_t v416;
  unint64_t v417;
  int v418;
  unint64_t v419;
  unsigned int v420;
  unsigned int v421;
  BOOL v422;
  _BOOL4 v423;
  int v424;
  unsigned int v425;
  uint64_t v426;
  unsigned int v427;
  int v428;
  int v429;
  unsigned int v430;
  uint64_t v431;
  unint64_t v432;
  int v433;
  unint64_t v434;
  int v435;
  int v436;
  uint64_t v437;
  int v438;
  int v439;
  unsigned int v440;
  unsigned int v441;
  unsigned int v442;
  _BOOL4 v443;
  unsigned int v444;
  unsigned int v445;
  int v446;
  int32x4_t *v447;
  int32x4_t *v448;
  int32x4_t *v449;
  int32x4_t *v450;
  int v451;
  int32x4_t *v452;
  int v453;
  int32x4_t *v454;
  uint64_t v455;
  uint64_t v456;
  int32x4_t *v457;
  uint64_t v458;
  uint64_t v459;
  __int32 *v460;
  int *v461;
  int *v462;
  int *v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  unsigned int v469;
  unsigned int v470;
  BOOL v471;
  _BOOL4 v472;
  int v473;
  unsigned int v474;
  unsigned int v475;
  uint64_t v476;
  unsigned int v477;
  int v478;
  int v479;
  unsigned int v480;
  uint64_t v481;
  unint64_t v482;
  int v483;
  unint64_t v484;
  uint64_t v485;
  int32x4_t *v486;
  uint64_t v487;
  int32x4_t *v488;
  uint64_t v489;
  int32x4_t *v490;
  unsigned int v491;
  unsigned int v492;
  unsigned int v493;
  _BOOL4 v494;
  unsigned int v495;
  unsigned int v496;
  int v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  __int32 *v501;
  int *v502;
  int *v503;
  int *v504;
  int v505;
  int v506;
  int v507;
  int v508;
  int v509;
  int v510;
  uint64_t v511;
  int v512;
  uint64_t v513;
  BOOL v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  __int32 *v518;
  int *v519;
  int *v520;
  int v521;
  int v522;
  int v523;
  int v524;
  int32x4_t *v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  __int32 *v529;
  __int32 *v530;
  int v531;
  int v532;
  uint64_t v533;
  int32x4_t *v534;
  uint64_t v535;
  uint64_t v536;
  __int32 *v537;
  int *v538;
  int *v539;
  int *v540;
  int v541;
  int v542;
  int v543;
  int v544;
  int v545;
  int32x4_t *v546;
  __int32 v547;
  __int32 v548;
  __int32 v549;
  int v550;
  uint64_t v551;
  uint64_t v552;
  int32x4_t *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  __int32 *v558;
  int *v559;
  int *v560;
  int *v561;
  int v562;
  int v563;
  int v564;
  int v565;
  int v566;
  int v567;
  int v568;
  unsigned int v569;
  unsigned int v570;
  _BOOL4 v571;
  unsigned int v572;
  int v573;
  unsigned int v574;
  uint64_t v575;
  __int32 v576;
  __int32 v577;
  int v578;
  unint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  __int32 *v583;
  int *v584;
  int *v585;
  int *v586;
  int v587;
  int v588;
  int v589;
  int v590;
  int v591;
  int *v592;
  int32x4_t *v593;
  uint64_t v594;
  int32x4_t v595;
  int64_t v596;
  int32x4_t *v597;
  int32x4_t *v598;
  int32x4_t *v599;
  int32x4_t *v600;
  uint64_t v601;
  int32x4_t v602;
  int32x4_t v603;
  int32x4_t *v604;
  int32x4_t *v605;
  int32x4_t *v606;
  int32x4_t *v607;
  uint64_t v608;
  int32x4_t v609;
  int32x4_t v610;
  int32x4_t *v611;
  int32x4_t *v612;
  int32x4_t *v613;
  int32x4_t *v614;
  uint64_t v615;
  int32x4_t v616;
  int32x4_t v617;
  int32x4_t *v618;
  BOOL v620;
  BOOL v622;
  uint64_t v624;
  int32x4_t *v625;
  int32x4_t v626;
  int32x4_t v627;
  int32x4_t v628;
  int32x4_t v629;
  int32x4_t v630;
  uint32x4_t v631;
  int32x4_t *v632;
  uint64_t v633;
  int32x4_t *v634;
  int32x4_t *v635;
  int32x4_t v636;
  int32x4_t v637;
  int32x4_t v638;
  uint32x4_t v639;
  uint64_t v640;
  uint32x4_t *v641;
  int32x4_t *v642;
  int32x4_t *v643;
  int32x4_t *v644;
  int32x4_t *v645;
  int32x4_t *v646;
  int32x4_t *v647;
  int32x4_t v648;
  int32x4_t v649;
  int32x4_t v650;
  uint32x4_t v651;
  int32x4_t v652;
  int32x4_t v653;
  int32x4_t v654;
  int32x4_t v655;
  int32x4_t v656;
  int32x4_t v657;
  int32x4_t v658;
  int32x4_t v659;
  int32x4_t v660;
  uint32x4_t v661;
  uint64_t v662;
  int32x4_t *v663;
  int32x4_t *v664;
  int32x4_t v665;
  uint32x4_t v666;
  int64_t v667;
  int32x4_t *v668;
  int32x4_t *v669;
  int32x4_t *v670;
  int32x4_t *v671;
  uint64_t v672;
  int32x4_t v673;
  int32x4_t v674;
  int32x4_t *v675;
  int32x4_t *v676;
  uint64_t v677;
  int v678;
  unsigned int v679;
  int32x4_t v680;
  unsigned int v681;
  int *v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  int *v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  unsigned int v690;
  unsigned int v691;
  int v692;
  int v693;
  unsigned int v694;
  uint64_t v695;
  unint64_t v696;
  int v697;
  unint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  __int32 *v705;
  int *v706;
  int *v707;
  int *v708;
  int v709;
  int v710;
  int v711;
  int v712;
  int v713;
  int v714;
  uint64_t v715;
  int v716;
  uint64_t v717;
  BOOL v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  __int32 *v722;
  int *v723;
  int *v724;
  int v725;
  int v726;
  int v727;
  int v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  __int32 *v733;
  int *v734;
  __int32 v735;
  unsigned int v736;
  unsigned int v737;
  BOOL v738;
  _BOOL4 v739;
  int v740;
  unsigned int v741;
  unsigned int v742;
  uint64_t v743;
  unsigned int v744;
  int v745;
  int v746;
  unsigned int v747;
  uint64_t v748;
  unint64_t v749;
  int v750;
  unint64_t v751;
  unsigned int v752;
  unsigned int v753;
  unsigned int v754;
  _BOOL4 v755;
  unsigned int v756;
  unsigned int v757;
  int v758;
  int v759;
  uint64_t v760;
  int v761;
  uint64_t v762;
  int v763;
  uint64_t v764;
  int v765;
  uint64_t v766;
  int v767;
  uint64_t v768;
  int v769;
  int *v770;
  int *v771;
  int *v772;
  int *v773;
  uint64_t i;
  int v775;
  int v776;
  int v777;
  int64_t v778;
  int32x4_t *v779;
  int32x4_t *v780;
  int32x4_t *v781;
  int32x4_t *v782;
  uint64_t v783;
  int32x4_t v784;
  int32x4_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  __int32 *v789;
  int *v790;
  int *v791;
  int *v792;
  int v793;
  int v794;
  int v795;
  int v796;
  int v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  __int32 *v801;
  int *v802;
  int *v803;
  int *v804;
  int v805;
  int v806;
  int v807;
  int v808;
  int v809;
  int *v810;
  int *v811;
  uint64_t j;
  int v813;
  int v814;
  int v815;
  unint64_t v816;
  int *v817;
  uint64_t v818;
  int32x4_t *v819;
  int *v820;
  int32x4_t v821;
  int32x4_t v822;
  int32x4_t v823;
  uint32x4_t v824;
  int *v825;
  int32x4_t *v826;
  uint64_t v827;
  int32x4_t v828;
  int64_t v829;
  int32x4_t *v830;
  int32x4_t *v831;
  int32x4_t *v832;
  int32x4_t *v833;
  uint64_t v834;
  int32x4_t v835;
  int32x4_t v836;
  int64_t v837;
  int32x4_t *v838;
  int32x4_t *v839;
  int32x4_t *v840;
  int32x4_t *v841;
  uint64_t v842;
  int32x4_t v843;
  int32x4_t v844;
  uint64_t v845;
  int64_t v846;
  uint64_t v847;
  uint64_t v848;
  int32x4_t *v849;
  int32x4_t *v850;
  int32x4_t *v851;
  int32x4_t *v852;
  int32x4_t *v853;
  uint64_t v854;
  uint32x4_t v855;
  uint32x4_t v856;
  int32x4_t v857;
  uint64_t v858;
  uint32x4_t *v859;
  int *v860;
  int32x4_t *v861;
  int32x4_t *v862;
  int32x4_t *v863;
  int32x4_t *v864;
  int32x4_t *v865;
  int32x4_t v866;
  int32x4_t v867;
  int32x4_t v868;
  uint32x4_t v869;
  int32x4_t v870;
  int32x4_t v871;
  int32x4_t v872;
  int32x4_t v873;
  int32x4_t v874;
  int32x4_t v875;
  int32x4_t v876;
  int32x4_t v877;
  int32x4_t v878;
  uint32x4_t v879;
  uint64_t v880;
  int v881;
  unsigned int v882;
  int *v883;
  int *v884;
  uint64_t v885;
  uint64_t v886;
  uint64_t v887;
  int *v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  int v892;
  int32x4_t *v893;
  uint64_t v894;
  int32x4_t *v895;
  uint64_t v896;
  unsigned int v897;
  unsigned int v898;
  int v899;
  unsigned int v900;
  uint64_t v901;
  char *v902;
  uint64_t v903;
  uint64_t v904;
  __int32 *v905;
  int *v906;
  __int32 v907;
  int v908;
  unsigned int v909;
  uint64_t v910;
  unint64_t v911;
  int v912;
  unint64_t v913;
  int v914;
  uint64_t v915;
  int v916;
  uint64_t v917;
  BOOL v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  __int32 *v922;
  int *v923;
  int *v924;
  int v925;
  int v926;
  int v927;
  int v928;
  unsigned int v929;
  unsigned int v930;
  _BOOL4 v931;
  unsigned int v932;
  int v933;
  unsigned int v934;
  uint64_t v935;
  int32x4_t *v936;
  int32x4_t *v937;
  int32x4_t v938;
  uint32x4_t v939;
  uint64_t v940;
  uint64_t v941;
  __int32 *v942;
  __int32 *v943;
  int v944;
  int v945;
  char *v946;
  int *v947;
  int32x4_t *v948;
  int32x4_t v949;
  int32x4_t *v950;
  uint64_t v951;
  int32x4_t *v952;
  int32x4_t *v953;
  int32x4_t v954;
  int32x4_t v955;
  int32x4_t v956;
  uint32x4_t v957;
  uint64_t v958;
  int v959;
  unsigned int v960;
  int *v961;
  int v962;
  int v963;
  int v964;
  uint64_t v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  __int32 *v969;
  int *v970;
  __int32 v971;
  int *v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  __int32 *v979;
  int *v980;
  int *v981;
  int *v982;
  int v983;
  int v984;
  int v985;
  int v986;
  int v987;
  int v988;
  uint64_t v989;
  int v990;
  uint64_t v991;
  BOOL v992;
  size_t v993;
  size_t v994;
  size_t v995;
  __int32 *v996;
  int *v997;
  int *v998;
  int v999;
  int v1000;
  int v1001;
  int v1002;
  int64_t v1003;
  int32x4_t *v1004;
  int32x4_t *v1005;
  int32x4_t *v1006;
  int32x4_t *v1007;
  uint64_t v1008;
  int32x4_t v1009;
  int32x4_t v1010;
  int *v1011;
  size_t v1012;
  int32x4_t *v1013;
  int *v1014;
  int32x4_t v1015;
  int32x4_t v1016;
  int32x4_t v1017;
  uint32x4_t v1018;
  int *v1019;
  int32x4_t *v1020;
  uint64_t v1021;
  int32x4_t v1022;
  int32x4_t *v1023;
  int *v1024;
  unint64_t v1025;
  int *v1026;
  uint64_t v1027;
  uint64_t v1028;
  uint64_t v1029;
  unsigned int v1030;
  int v1031;
  int *v1032;
  int32x4_t *v1033;
  int v1034;
  char *v1035;
  unsigned int v1036;
  int32x4_t *v1037;
  unint64_t v1038;
  unsigned int v1039;
  int v1040;
  uint64_t v1041;
  uint64_t v1042;
  unsigned int v1043;
  int v1044;
  unsigned int v1045;
  int *v1046;
  uint64_t v1047;
  size_t v1048;
  unsigned int v1049;
  int v1050;
  size_t v1051;
  unsigned int v1052;
  unsigned int v1053;
  uint64_t v1054;
  int v1055;
  int *v1056;
  int32x4_t *v1057;
  int v1058;
  unsigned int v1059;
  size_t v1060;
  size_t v1061[2];
  uint64_t v1062;
  size_t v1063;
  BOOL *v1064;
  int *v1065;
  uint64_t v1066;
  int32x4_t v1067;
  uint64_t v1068;
  int v1069[2];
  int32x4_t v1070;
  int v1071;
  int32x4_t v1072;
  _WORD v1073[4];
  int32x4_t *v1074;
  int32x4_t *v1075;
  int32x4_t *v1076;
  __int128 __b;
  void *v1078[2];
  __int128 v1079;
  void *v1080[2];
  __int128 v1081;
  __int128 v1082;
  __int128 v1083;
  __int128 v1084;
  __int128 v1085;
  __int128 v1086;
  __int128 v1087;
  __int128 v1088;
  __int128 v1089;
  __int128 v1090;
  __int128 v1091;
  __int128 v1092;
  __int128 v1093;
  __int128 v1094;
  __int128 v1095;
  __int128 v1096;
  __int128 v1097;
  __int128 __p;
  uint64_t v1099;
  uint64_t v1100;

  v1100 = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned int *)this + 960);
  *(_QWORD *)v1069 = v6;
  if (*((_DWORD *)this + 964) == 1)
  {
    memset_pattern16(&__b, &memset_pattern_26, 4uLL);
    v7 = *((unsigned int *)this + 959);
    if ((int)v7 >= 1)
    {
      v8 = 0;
      v9 = *((_QWORD *)this + 22);
      v10 = *((_QWORD *)this + 25);
      v11 = *((_DWORD *)this + 683);
      v12 = *((_DWORD *)this + 684);
      while (1)
      {
        v19 = (int *)(v9 + 12 * v8);
        v20 = *v19;
        v21 = v19[1];
        v22 = v19[2];
        v23 = (int *)(v10 + 12 * v8);
        v24 = v23[2];
        if ((_DWORD)v24 != -1)
        {
          v25 = a3[v21] + a3[v20] + a3[v22] + a3[*v23] + a3[v23[1]] + a3[v24] > 2;
          if (v11 < 0x40000001)
            break;
          goto LABEL_4;
        }
        if ((_DWORD)v22 != -1)
        {
          v25 = a3[v21] + a3[v20] + a3[v22] > 1;
          if (v11 < 0x40000001)
            break;
          goto LABEL_4;
        }
        if ((_DWORD)v21 != -1)
        {
          v25 = a3[v20];
          if (v25)
          {
            v26 = a3[v21];
            goto LABEL_23;
          }
          goto LABEL_24;
        }
        if ((_DWORD)v20 != -1)
        {
          v26 = a3[v20];
LABEL_23:
          v25 = v26;
LABEL_24:
          if (v11 < 0x40000001)
            break;
          goto LABEL_4;
        }
        v25 = 0;
        if (v11 < 0x40000001)
          break;
LABEL_4:
        v13 = v11;
LABEL_5:
        v14 = *((unsigned __int16 *)&v1078[-2] + v25);
        v15 = (HIWORD(v13) * v14) & 0xFFFF0000;
        v16 = v13 - v15;
        v17 = v12 >= v15;
        *((_WORD *)&v1078[-2] + v25) = *((_WORD *)this + ((v14 >> 7) & 0x1FE | v17) + 1376) + v14;
        if (v12 < v15)
          v11 = v15;
        else
          v11 = v16;
        if (v12 < v15)
          v18 = 0;
        else
          v18 = v15;
        v12 -= v18;
        *((_DWORD *)this + 683) = v11;
        *((_DWORD *)this + 684) = v12;
        a3[v8++] = v17;
        if (v8 == v7)
          goto LABEL_37;
      }
      v27 = *((_DWORD *)this + 686);
      while (1)
      {
        v12 *= 2;
        *((_DWORD *)this + 686) = --v27;
        if (v27)
          goto LABEL_28;
        v29 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v29 + 1;
        v30 = *((unsigned int *)this + 676);
        if (v29 + 1 >= v30)
        {
          v31 = 65280;
          v32 = v29 + 2;
          *((_QWORD *)this + 340) = v32;
          if (v32 >= v30)
          {
LABEL_34:
            v28 = 255;
            goto LABEL_27;
          }
        }
        else
        {
          v31 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v29 + 1) << 8;
          v32 = v29 + 2;
          *((_QWORD *)this + 340) = v32;
          if (v32 >= v30)
            goto LABEL_34;
        }
        v28 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v32);
LABEL_27:
        v12 |= v31 | v28;
        v27 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_28:
        v13 = 2 * v11;
        v84 = v11 >= 0x20000001;
        v11 *= 2;
        if (v84)
          goto LABEL_5;
      }
    }
LABEL_37:
    v6 = *(_QWORD *)v1069;
  }
  v33 = (int)v6;
  v1064 = a3;
  v1065 = a2;
  v1066 = (int)v6;
  switch(*((_DWORD *)this + 967))
  {
    case 0:
      v1090 = 0u;
      v1091 = 0u;
      v1088 = 0u;
      v1089 = 0u;
      v1086 = 0u;
      v1087 = 0u;
      v1084 = 0u;
      v1085 = 0u;
      v1082 = 0u;
      v1083 = 0u;
      v1081 = 0u;
      v1079 = 0u;
      *(_OWORD *)v1080 = 0u;
      __b = 0u;
      *(_OWORD *)v1078 = 0u;
      gcl::tmesh::ACContext::init((std::vector<int> *)&__b, v6);
      gcl::tmesh::ACContext::init((std::vector<int> *)((char *)&v1084 + 8), v33);
      v1074 = 0;
      v1075 = 0;
      v1076 = 0;
      v34 = *(_QWORD *)v1069;
      if (v1069[0])
      {
        if (v1069[0] < 0)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v35 = (int32x4_t *)operator new(4 * v33);
        v1074 = v35;
        v1076 = (int32x4_t *)((char *)v35 + 4 * v33);
        bzero(v35, 4 * v33);
        v1075 = v1076;
        v34 = *(_QWORD *)v1069;
        if (*((int *)this + 959) < 1)
          goto LABEL_519;
      }
      else
      {
        v35 = 0;
        if (*((int *)this + 959) < 1)
        {
LABEL_519:
          if (!v35)
            goto LABEL_1158;
          v369 = v35;
          goto LABEL_1157;
        }
      }
      v327 = 0;
      v328 = *((_DWORD *)this + 964);
      v329 = v34 & 0xFFFFFFFC;
      v1051 = v34 & 0xFFFFFFF8;
      v1060 = 4 * v34;
      while (1)
      {
        if (v328)
        {
          if (!a3[v327])
            goto LABEL_479;
          v331 = (int *)(*((_QWORD *)this + 22) + 12 * v327);
          v332 = *v331;
          v333 = v331[1];
          if (v333 == -1 || !a3[v332] || !a3[v333])
          {
            if (v332 == -1 || !a3[v332])
            {
LABEL_508:
              if ((_DWORD)v34)
                bzero(v35, v1060);
              gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v35, v1066, 3u, 0, (int32x4_t *)&a2[v327 * v1066]);
              v34 = *(_QWORD *)v1069;
              goto LABEL_479;
            }
LABEL_487:
            if ((_DWORD)v34)
            {
              v334 = v332 * (int)v1066;
              if (v1066 < 8 || (unint64_t)((char *)v35 - (char *)a2 - 4 * v334) < 0x20)
              {
                v335 = 0;
                goto LABEL_491;
              }
              v365 = v1051;
              v366 = &a2[v334 + 4];
              v367 = v35 + 1;
              do
              {
                v368 = *(int32x4_t *)v366;
                v367[-1] = *((int32x4_t *)v366 - 1);
                *v367 = v368;
                v366 += 8;
                v367 += 2;
                v365 -= 8;
              }
              while (v365);
              v335 = v1051;
              if (v1051 != v34)
              {
LABEL_491:
                v336 = v34 - v335;
                v337 = v335;
                v338 = &v35->i32[v335];
                v339 = &a2[v334 + v337];
                do
                {
                  v340 = *v339++;
                  *v338++ = v340;
                  --v336;
                }
                while (v336);
              }
            }
            v330 = 0;
            goto LABEL_478;
          }
        }
        else
        {
          v341 = (int *)(*((_QWORD *)this + 22) + 12 * v327);
          v332 = *v341;
          v333 = v341[1];
          if (v333 == -1)
          {
            if (v332 == -1)
              goto LABEL_508;
            goto LABEL_487;
          }
        }
        if ((_DWORD)v34)
        {
          v342 = v332 * v34;
          v343 = v332 * (int)v34;
          v344 = v333 * v1066;
          v345 = v333 * (int)v1066;
          if (v34 < 8
            || ((unint64_t)((char *)v35 - (char *)&a2[v344]) >= 0x10
              ? (v346 = (unint64_t)((char *)v35 - (char *)&a2[v342]) >= 0x10)
              : (v346 = 0),
                !v346))
          {
            v347 = 0;
LABEL_502:
            v348 = v34 - v347;
            v349 = v347;
            v350 = &v35->i32[v347];
            v351 = &a2[v345 + v349];
            v352 = &a2[v343 + v349];
            do
            {
              v354 = *v352++;
              v353 = v354;
              v355 = *v351++;
              v296 = __OFADD__(v355, v353);
              v356 = v355 + v353;
              if (v356 < 0 != v296)
                ++v356;
              *v350++ = v356 >> 1;
              --v348;
            }
            while (v348);
            goto LABEL_477;
          }
          v357 = &a2[v342];
          v358 = v329;
          v359 = v35;
          v360 = &a2[v344];
          do
          {
            v361 = *(int32x4_t *)v357;
            v357 += 4;
            v362 = v361;
            v363 = *(int32x4_t *)v360;
            v360 += 4;
            v364 = (uint32x4_t)vaddq_s32(v363, v362);
            *v359++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v364, v364, 0x1FuLL), 1uLL);
            v358 -= 4;
          }
          while (v358);
          v347 = v329;
          if (v329 != v34)
            goto LABEL_502;
        }
LABEL_477:
        v330 = 1;
LABEL_478:
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v35, v1066, *((_DWORD *)this + 966), (uint64_t *)&v1078[15 * v330 - 2], (int32x4_t *)&a2[v327 * v1066]);
        v34 = *(_QWORD *)v1069;
LABEL_479:
        if (++v327 >= *((int *)this + 959))
          goto LABEL_519;
      }
    case 1:
      v1099 = 0;
      v1097 = 0u;
      __p = 0u;
      v1095 = 0u;
      v1096 = 0u;
      v1093 = 0u;
      v1094 = 0u;
      v1091 = 0u;
      v1092 = 0u;
      v1089 = 0u;
      v1090 = 0u;
      v1087 = 0u;
      v1088 = 0u;
      v1085 = 0u;
      v1086 = 0u;
      v1083 = 0u;
      v1084 = 0u;
      v1081 = 0u;
      v1082 = 0u;
      v1079 = 0u;
      *(_OWORD *)v1080 = 0u;
      __b = 0u;
      *(_OWORD *)v1078 = 0u;
      v43 = v6;
      gcl::tmesh::ACContext::init((std::vector<int> *)&__b, v6);
      gcl::tmesh::ACContext::init((std::vector<int> *)((char *)&v1084 + 8), v43);
      gcl::tmesh::ACContext::init((std::vector<int> *)&v1092, v43);
      v1074 = 0;
      v1075 = 0;
      v1076 = 0;
      v44 = v43;
      if ((_DWORD)v43)
      {
        v45 = v1066;
        if ((v1066 & 0x80000000) != 0)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v41 = (int32x4_t *)operator new(4 * v1066);
        v1074 = v41;
        v1076 = (int32x4_t *)((char *)v41 + 4 * v1066);
        bzero(v41, 4 * v1066);
        v1075 = v1076;
        v44 = *(_QWORD *)v1069;
        if (*((int *)this + 959) < 1)
        {
LABEL_1144:
          if (!v41)
            goto LABEL_1147;
          v676 = v41;
LABEL_1146:
          operator delete(v676);
LABEL_1147:
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          if (*((_QWORD *)&v1096 + 1))
          {
            *(_QWORD *)&v1097 = *((_QWORD *)&v1096 + 1);
            operator delete(*((void **)&v1096 + 1));
          }
          if ((_QWORD)v1095)
          {
            *((_QWORD *)&v1095 + 1) = v1095;
            operator delete((void *)v1095);
          }
          if (*((_QWORD *)&v1093 + 1))
          {
            *(_QWORD *)&v1094 = *((_QWORD *)&v1093 + 1);
            operator delete(*((void **)&v1093 + 1));
          }
          v369 = (int32x4_t *)v1092;
          if ((_QWORD)v1092)
          {
            *((_QWORD *)&v1092 + 1) = v1092;
LABEL_1157:
            operator delete(v369);
          }
LABEL_1158:
          if (*((_QWORD *)&v1090 + 1))
          {
            *(_QWORD *)&v1091 = *((_QWORD *)&v1090 + 1);
            operator delete(*((void **)&v1090 + 1));
          }
          if ((_QWORD)v1089)
          {
            *((_QWORD *)&v1089 + 1) = v1089;
            operator delete((void *)v1089);
          }
          if (*((_QWORD *)&v1087 + 1))
          {
            *(_QWORD *)&v1088 = *((_QWORD *)&v1087 + 1);
            operator delete(*((void **)&v1087 + 1));
          }
          if ((_QWORD)v1086)
          {
            *((_QWORD *)&v1086 + 1) = v1086;
            operator delete((void *)v1086);
          }
          if (*((_QWORD *)&v1084 + 1))
          {
            *(_QWORD *)&v1085 = *((_QWORD *)&v1084 + 1);
            operator delete(*((void **)&v1084 + 1));
          }
          if ((_QWORD)v1083)
          {
            *((_QWORD *)&v1083 + 1) = v1083;
            operator delete((void *)v1083);
          }
          if (*((_QWORD *)&v1081 + 1))
          {
            *(_QWORD *)&v1082 = *((_QWORD *)&v1081 + 1);
            operator delete(*((void **)&v1081 + 1));
          }
          if (v1080[0])
          {
            v1080[1] = v1080[0];
            operator delete(v1080[0]);
          }
          if (v1078[1])
          {
            *(void **)&v1079 = v1078[1];
            operator delete(v1078[1]);
          }
          v326 = (int32x4_t *)__b;
          if ((_QWORD)__b)
          {
            *((_QWORD *)&__b + 1) = __b;
            goto LABEL_1178;
          }
          return;
        }
      }
      else
      {
        v41 = 0;
        v45 = v1066;
        if (*((int *)this + 959) < 1)
          goto LABEL_1144;
      }
      v958 = 0;
      v959 = *((_DWORD *)this + 964);
      v1068 = v44 & 0xFFFFFFF8;
      v1048 = v44 & 0xFFFFFFFC;
      v1056 = a2 + 4;
      v1063 = 4 * v44;
      while (1)
      {
        if (v959)
        {
          if (!a3[v958])
            goto LABEL_1086;
          v961 = (int *)(*((_QWORD *)this + 22) + 12 * v958);
          v962 = *v961;
          v963 = v961[1];
          v964 = v961[2];
          if (v964 == -1 || !a3[v962] || !a3[v963] || !a3[v964])
          {
            if (v963 != -1 && a3[v962] && a3[v963])
            {
LABEL_1113:
              if ((_DWORD)v44)
              {
                v988 = v962 * v44;
                v989 = v962 * (int)v44;
                v990 = v963 * v44;
                v991 = v963 * (int)v44;
                if (v45 >= 8
                  && ((unint64_t)((char *)v41 - (char *)&a2[v990]) >= 0x10
                    ? (v992 = (unint64_t)((char *)v41 - (char *)&a2[v988]) >= 0x10)
                    : (v992 = 0),
                      v992))
                {
                  v1011 = &a2[v988];
                  v1012 = v1048;
                  v1013 = v41;
                  v1014 = &a2[v990];
                  do
                  {
                    v1015 = *(int32x4_t *)v1011;
                    v1011 += 4;
                    v1016 = v1015;
                    v1017 = *(int32x4_t *)v1014;
                    v1014 += 4;
                    v1018 = (uint32x4_t)vaddq_s32(v1017, v1016);
                    *v1013++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v1018, v1018, 0x1FuLL), 1uLL);
                    v1012 -= 4;
                  }
                  while (v1012);
                  v993 = v1048;
                  if (v1048 != v44)
                    goto LABEL_1120;
                }
                else
                {
                  v993 = 0;
LABEL_1120:
                  v994 = v44 - v993;
                  v995 = v993;
                  v996 = &v41->i32[v993];
                  v997 = &a2[v991 + v995];
                  v998 = &a2[v989 + v995];
                  do
                  {
                    v1000 = *v998++;
                    v999 = v1000;
                    v1001 = *v997++;
                    v296 = __OFADD__(v1001, v999);
                    v1002 = v1001 + v999;
                    if (v1002 < 0 != v296)
                      ++v1002;
                    *v996++ = v1002 >> 1;
                    --v994;
                  }
                  while (v994);
                }
              }
              v960 = 1;
              goto LABEL_1085;
            }
            if (v962 == -1 || !a3[v962])
            {
LABEL_1133:
              if ((_DWORD)v44)
              {
                bzero(v41, v1063);
                v44 = *(_QWORD *)v1069;
              }
              gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v41, v44, 3u, 0, (int32x4_t *)&a2[v958 * v45]);
              v44 = *(_QWORD *)v1069;
              goto LABEL_1086;
            }
LABEL_1098:
            if ((_DWORD)v45)
            {
              v965 = v962 * (int)v45;
              if (v44 < 8 || (unint64_t)((char *)v41 - (char *)&a2[v965]) < 0x20)
              {
                v966 = 0;
                goto LABEL_1102;
              }
              v1019 = &v1056[v965];
              v1020 = v41 + 1;
              v1021 = v1068;
              do
              {
                v1022 = *(int32x4_t *)v1019;
                v1020[-1] = *((int32x4_t *)v1019 - 1);
                *v1020 = v1022;
                v1019 += 8;
                v1020 += 2;
                v1021 -= 8;
              }
              while (v1021);
              v966 = v1068;
              if (v1068 != v44)
              {
LABEL_1102:
                v967 = v44 - v966;
                v968 = v966;
                v969 = &v41->i32[v966];
                v970 = &a2[v965 + v968];
                do
                {
                  v971 = *v970++;
                  *v969++ = v971;
                  --v967;
                }
                while (v967);
              }
            }
            v960 = 0;
            goto LABEL_1085;
          }
        }
        else
        {
          v972 = (int *)(*((_QWORD *)this + 22) + 12 * v958);
          v962 = *v972;
          v963 = v972[1];
          v964 = v972[2];
          if (v964 == -1)
          {
            if (v963 != -1)
              goto LABEL_1113;
            if (v962 == -1)
              goto LABEL_1133;
            goto LABEL_1098;
          }
        }
        if ((_DWORD)v44)
        {
          v973 = v962 * (int)v44;
          v974 = v963 * (int)v45;
          v975 = v964 * (int)v45;
          if (v45 >= 0xC)
          {
            v976 = 0;
            v1003 = (char *)v41 - (char *)a2;
            if ((unint64_t)((char *)v41 - (char *)a2 - 4 * v975) >= 0x20
              && (unint64_t)(v1003 - 4 * v974) >= 0x20
              && (unint64_t)(v1003 - 4 * v973) >= 0x20)
            {
              v1004 = (int32x4_t *)&v1056[v973];
              v1005 = v41 + 1;
              v1006 = (int32x4_t *)&v1056[v974];
              v1007 = (int32x4_t *)&v1056[v975];
              v1008 = v1068;
              do
              {
                v1009 = vsubq_s32(vaddq_s32(v1006[-1], v1004[-1]), v1007[-1]);
                v1010 = vsubq_s32(vaddq_s32(*v1006, *v1004), *v1007);
                v1004 += 2;
                v1005[-1] = v1009;
                *v1005 = v1010;
                v1005 += 2;
                v1006 += 2;
                v1007 += 2;
                v1008 -= 8;
              }
              while (v1008);
              v976 = v1068;
              if (v1068 == v44)
                goto LABEL_1084;
            }
          }
          else
          {
            v976 = 0;
          }
          v977 = v976;
          v978 = v44 - v976;
          v979 = &v41->i32[v977];
          v980 = &a2[v975 + v977];
          v981 = &a2[v974 + v977];
          v982 = &a2[v973 + v977];
          do
          {
            v984 = *v982++;
            v983 = v984;
            v985 = *v981++;
            v986 = v985 + v983;
            v987 = *v980++;
            *v979++ = v986 - v987;
            --v978;
          }
          while (v978);
        }
LABEL_1084:
        v960 = 2;
LABEL_1085:
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v41, v45, *((_DWORD *)this + 966), (uint64_t *)&v1078[15 * v960 - 2], (int32x4_t *)&a2[v958 * v45]);
        v44 = *(_QWORD *)v1069;
LABEL_1086:
        if (++v958 >= *((int *)this + 959))
          goto LABEL_1144;
      }
    case 2:
      v1099 = 0;
      v1097 = 0u;
      __p = 0u;
      v1095 = 0u;
      v1096 = 0u;
      v1093 = 0u;
      v1094 = 0u;
      v1091 = 0u;
      v1092 = 0u;
      v1089 = 0u;
      v1090 = 0u;
      v1087 = 0u;
      v1088 = 0u;
      v1085 = 0u;
      v1086 = 0u;
      v1083 = 0u;
      v1084 = 0u;
      v1081 = 0u;
      v1082 = 0u;
      v1079 = 0u;
      *(_OWORD *)v1080 = 0u;
      __b = 0u;
      *(_OWORD *)v1078 = 0u;
      gcl::tmesh::ACContext::init((std::vector<int> *)&__b, v6);
      v39 = v33;
      gcl::tmesh::ACContext::init((std::vector<int> *)((char *)&v1084 + 8), v33);
      gcl::tmesh::ACContext::init((std::vector<int> *)&v1092, v33);
      memset_pattern16(&v1072, &memset_pattern_26, 6uLL);
      v1074 = 0;
      v1075 = 0;
      v1076 = 0;
      v40 = *(_QWORD *)v1069;
      if (v1069[0])
      {
        if ((v33 & 0x80000000) != 0)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v41 = (int32x4_t *)operator new(4 * v33);
        v1074 = v41;
        v1076 = (int32x4_t *)((char *)v41 + 4 * v33);
        bzero(v41, 4 * v33);
        v1075 = (int32x4_t *)((char *)v41 + 4 * v33);
        v40 = *(_QWORD *)v1069;
        if (*((int *)this + 959) < 1)
          goto LABEL_1144;
      }
      else
      {
        v41 = 0;
        if (*((int *)this + 959) < 1)
          goto LABEL_1144;
      }
      v677 = 0;
      v678 = *((_DWORD *)this + 964);
      v679 = v1072.u16[0];
      v1054 = 4 * v40;
      v1062 = v40 & 0xFFFFFFF8;
      v1041 = v40 & 0xFFFFFFFC;
      v1046 = a2 + 4;
      v680 = vdupq_n_s32(0x55555556u);
      v1067 = v680;
      while (1)
      {
        if (v678 && !a3[v677])
          goto LABEL_823;
        v682 = (int *)(*((_QWORD *)this + 22) + 12 * v677);
        v683 = *v682;
        v684 = v682[1];
        v685 = v682[2];
        v686 = (int *)(*((_QWORD *)this + 25) + 12 * v677);
        v687 = v686[2];
        if ((_DWORD)v687 != -1
          && ((v689 = *v686, v688 = v686[1], !v678)
           || a3[v683] && a3[v684] && a3[v685] && a3[v689] && a3[v688] && a3[v687]))
        {
          v690 = *((_DWORD *)this + 683);
          v691 = *((_DWORD *)this + 684);
          if (v690 < 0x40000001)
          {
            v692 = *((_DWORD *)this + 686);
            while (1)
            {
              v691 *= 2;
              *((_DWORD *)this + 686) = --v692;
              if (v692)
                goto LABEL_838;
              v695 = *((_QWORD *)this + 340);
              *((_QWORD *)this + 340) = v695 + 1;
              v696 = *((unsigned int *)this + 676);
              if (v695 + 1 >= v696)
              {
                v697 = 65280;
                v698 = v695 + 2;
                *((_QWORD *)this + 340) = v698;
                if (v698 >= v696)
                {
LABEL_844:
                  v693 = 255;
                  goto LABEL_837;
                }
              }
              else
              {
                v697 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v695 + 1) << 8;
                v698 = v695 + 2;
                *((_QWORD *)this + 340) = v698;
                if (v698 >= v696)
                  goto LABEL_844;
              }
              v693 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v698);
LABEL_837:
              v691 |= v697 | v693;
              v692 = 16;
              *((_DWORD *)this + 686) = 16;
LABEL_838:
              v694 = 2 * v690;
              v84 = v690 >= 0x20000001;
              v690 *= 2;
              if (v84)
                goto LABEL_886;
            }
          }
          v694 = *((_DWORD *)this + 683);
LABEL_886:
          v736 = (HIWORD(v694) * (unsigned __int16)v679) & 0xFFFF0000;
          v737 = v694 - v736;
          v738 = v691 >= v736;
          v739 = v691 >= v736;
          v740 = *((unsigned __int16 *)this + ((v679 >> 7) & 0x1FE | v739) + 1376);
          if (v691 < v736)
            v741 = v736;
          else
            v741 = v737;
          if (v691 < v736)
            v742 = 0;
          else
            v742 = v736;
          v743 = 1;
          if (v738)
            v743 = 2;
          v744 = v691 - v742;
          *((_DWORD *)this + 683) = v741;
          *((_DWORD *)this + 684) = v744;
          if (v741 < 0x40000001)
          {
            v745 = *((_DWORD *)this + 686);
            while (2)
            {
              v744 *= 2;
              *((_DWORD *)this + 686) = --v745;
              if (v745)
                goto LABEL_898;
              v748 = *((_QWORD *)this + 340);
              *((_QWORD *)this + 340) = v748 + 1;
              v749 = *((unsigned int *)this + 676);
              if (v748 + 1 >= v749)
              {
                v750 = 65280;
                v751 = v748 + 2;
                *((_QWORD *)this + 340) = v751;
                if (v751 >= v749)
                  goto LABEL_904;
              }
              else
              {
                v750 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v748 + 1) << 8;
                v751 = v748 + 2;
                *((_QWORD *)this + 340) = v751;
                if (v751 >= v749)
                {
LABEL_904:
                  v746 = 255;
LABEL_897:
                  v744 |= v750 | v746;
                  v745 = 16;
                  *((_DWORD *)this + 686) = 16;
LABEL_898:
                  v747 = 2 * v741;
                  v84 = v741 >= 0x20000001;
                  v741 *= 2;
                  if (v84)
                    goto LABEL_906;
                  continue;
                }
              }
              break;
            }
            v746 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v751);
            goto LABEL_897;
          }
          v747 = v741;
LABEL_906:
          v679 += v740;
          v752 = v1072.u16[v743];
          v753 = (HIWORD(v747) * v752) & 0xFFFF0000;
          v754 = v747 - v753;
          v755 = v744 >= v753;
          v1072.i16[v743] = *((_WORD *)this + ((v752 >> 7) & 0x1FE | v755) + 1376) + v752;
          if (v744 < v753)
            v756 = v753;
          else
            v756 = v754;
          if (v744 < v753)
            v757 = 0;
          else
            v757 = v753;
          *((_DWORD *)this + 683) = v756;
          *((_DWORD *)this + 684) = v744 - v757;
          v758 = v739 | (2 * v755);
          v759 = v683 * v40;
          v760 = v759;
          v761 = v684 * v40;
          v762 = v761;
          v763 = v685 * v40;
          v764 = (int)v685 * (int)v40;
          if (v758)
          {
            v765 = v689 * v40;
            v766 = (int)v689 * (int)v40;
            v767 = v688 * v39;
            v768 = v767;
            v769 = v687 * v40;
            if (v758 == 1)
            {
              if ((_DWORD)v40)
              {
                if (v40 >= 0xC)
                {
                  v786 = 0;
                  v829 = (char *)v41 - (char *)a2;
                  if ((unint64_t)((char *)v41 - (char *)a2 - 4 * v769) >= 0x20
                    && (unint64_t)(v829 - 4 * v767) >= 0x20
                    && (unint64_t)(v829 - 4 * v766) >= 0x20)
                  {
                    v830 = (int32x4_t *)&v1046[v766];
                    v831 = v41 + 1;
                    v832 = (int32x4_t *)&v1046[v767];
                    v833 = (int32x4_t *)&v1046[v769];
                    v834 = v1062;
                    do
                    {
                      v835 = vsubq_s32(vaddq_s32(v832[-1], v830[-1]), v833[-1]);
                      v836 = vsubq_s32(vaddq_s32(*v832, *v830), *v833);
                      v830 += 2;
                      v831[-1] = v835;
                      *v831 = v836;
                      v831 += 2;
                      v832 += 2;
                      v833 += 2;
                      v834 -= 8;
                    }
                    while (v834);
                    v786 = v1062;
                    if (v1062 == v40)
                      goto LABEL_821;
                  }
                }
                else
                {
                  v786 = 0;
                }
                v787 = v786;
                v788 = v40 - v786;
                v789 = &v41->i32[v787];
                v790 = &a2[v769 + v787];
                v791 = &a2[v768 + v787];
                v792 = &a2[v766 + v787];
                do
                {
                  v794 = *v792++;
                  v793 = v794;
                  v795 = *v791++;
                  v796 = v795 + v793;
                  v797 = *v790++;
                  *v789++ = v796 - v797;
                  --v788;
                }
                while (v788);
              }
            }
            else
            {
              v770 = &a2[v759];
              v771 = &a2[v761];
              v772 = &a2[v765];
              v773 = &a2[v767];
              if (v758 == 2)
              {
                if ((_DWORD)v40)
                {
                  if (v39 < 0xC)
                  {
                    for (i = 0; i != v40; ++i)
                    {
LABEL_918:
                      v775 = v770[i];
                      v776 = v772[i];
                      v296 = __OFADD__(v776, v775);
                      v777 = v776 + v775;
                      if (v777 < 0 != v296)
                        ++v777;
                      v41->i32[i] = v773[i] + v771[i] - (v777 >> 1);
                    }
                    goto LABEL_821;
                  }
                  i = 0;
                  v845 = v766;
                  v846 = (char *)v41 - (char *)a2;
                  if ((unint64_t)((char *)v41 - (char *)a2 - v845 * 4) < 0x20)
                    goto LABEL_918;
                  v847 = v760;
                  if ((unint64_t)(v846 - 4 * v760) < 0x20)
                    goto LABEL_918;
                  if ((unint64_t)(v846 - 4 * v768) < 0x20)
                    goto LABEL_918;
                  v848 = v762;
                  if ((unint64_t)(v846 - v848 * 4) < 0x20)
                    goto LABEL_918;
                  v849 = (int32x4_t *)&v1046[v848];
                  v850 = v41 + 1;
                  v851 = (int32x4_t *)&v1046[v768];
                  v852 = (int32x4_t *)&v1046[v845];
                  v853 = (int32x4_t *)&v1046[v847];
                  v854 = v1062;
                  do
                  {
                    v855 = (uint32x4_t)vaddq_s32(v852[-1], v853[-1]);
                    v856 = (uint32x4_t)vaddq_s32(*v852, *v853);
                    v857 = vsubq_s32(vaddq_s32(*v851, *v849), vshrq_n_s32((int32x4_t)vsraq_n_u32(v856, v856, 0x1FuLL), 1uLL));
                    v850[-1] = vsubq_s32(vaddq_s32(v851[-1], v849[-1]), vshrq_n_s32((int32x4_t)vsraq_n_u32(v855, v855, 0x1FuLL), 1uLL));
                    *v850 = v857;
                    v849 += 2;
                    v850 += 2;
                    v851 += 2;
                    v852 += 2;
                    v853 += 2;
                    v854 -= 8;
                  }
                  while (v854);
                  i = v1062;
                  if (v1062 != v40)
                    goto LABEL_918;
                }
              }
              else if ((_DWORD)v40)
              {
                v810 = &a2[v763];
                v811 = &a2[v769];
                if (v39 < 0xC)
                {
                  for (j = 0; j != v40; ++j)
                  {
LABEL_944:
                    v813 = v770[j];
                    v814 = v772[j];
                    v296 = __OFADD__(v814, v813);
                    v815 = v814 + v813;
                    if (v815 < 0 != v296)
                      ++v815;
                    v816 = 1431655766 * ((v815 >> 1) - (v810[j] + v811[j]) + 2 * (v773[j] + v771[j]));
                    v41->i32[j] = HIDWORD(v816) + (v816 >> 63);
                  }
                  goto LABEL_821;
                }
                j = 0;
                if ((unint64_t)((char *)v41 - (char *)&a2[v769]) < 0x10)
                  goto LABEL_944;
                if ((unint64_t)((char *)v41 - (char *)&a2[v764]) < 0x10)
                  goto LABEL_944;
                if ((unint64_t)((char *)v41 - (char *)&a2[v768]) < 0x10)
                  goto LABEL_944;
                if ((unint64_t)((char *)v41 - (char *)&a2[v762]) < 0x10)
                  goto LABEL_944;
                if ((unint64_t)((char *)v41 - (char *)&a2[v766]) < 0x10)
                  goto LABEL_944;
                if ((unint64_t)((char *)v41 - (char *)&a2[v760]) < 0x10)
                  goto LABEL_944;
                v858 = v1041;
                v859 = (uint32x4_t *)v41;
                v860 = &a2[v769];
                v861 = (int32x4_t *)v810;
                v862 = (int32x4_t *)v773;
                v863 = (int32x4_t *)v771;
                v864 = (int32x4_t *)v772;
                v865 = (int32x4_t *)v770;
                do
                {
                  v866 = *v865++;
                  v867 = v866;
                  v868 = *v864++;
                  v869 = (uint32x4_t)vaddq_s32(v868, v867);
                  v870 = *v863++;
                  v871 = v870;
                  v872 = *v862++;
                  v873 = v872;
                  v874 = *v861++;
                  v875 = v874;
                  v876 = *(int32x4_t *)v860;
                  v860 += 4;
                  v877 = vaddq_s32(v873, v871);
                  v878 = vaddq_s32(vsubq_s32(vshrq_n_s32((int32x4_t)vsraq_n_u32(v869, v869, 0x1FuLL), 1uLL), vaddq_s32(v875, v876)), vaddq_s32(v877, v877));
                  v879 = (uint32x4_t)vuzp2q_s32((int32x4_t)vmull_s32(*(int32x2_t *)v878.i8, *(int32x2_t *)v680.i8), (int32x4_t)vmull_high_s32(v878, v680));
                  *v859++ = vsraq_n_u32(v879, v879, 0x1FuLL);
                  v858 -= 4;
                }
                while (v858);
                j = v1041;
                if (v1041 != v40)
                  goto LABEL_944;
              }
            }
          }
          else if ((_DWORD)v40)
          {
            if (v39 >= 0xC)
            {
              v798 = 0;
              v837 = (char *)v41 - (char *)a2;
              if ((unint64_t)((char *)v41 - (char *)a2 - 4 * v763) >= 0x20
                && (unint64_t)(v837 - 4 * v762) >= 0x20
                && (unint64_t)(v837 - 4 * v760) >= 0x20)
              {
                v838 = (int32x4_t *)&v1046[v760];
                v839 = v41 + 1;
                v840 = (int32x4_t *)&v1046[v762];
                v841 = (int32x4_t *)&v1046[v763];
                v842 = v1062;
                do
                {
                  v843 = vsubq_s32(vaddq_s32(v840[-1], v838[-1]), v841[-1]);
                  v844 = vsubq_s32(vaddq_s32(*v840, *v838), *v841);
                  v838 += 2;
                  v839[-1] = v843;
                  *v839 = v844;
                  v839 += 2;
                  v840 += 2;
                  v841 += 2;
                  v842 -= 8;
                }
                while (v842);
                v798 = v1062;
                if (v1062 == v40)
                  goto LABEL_821;
              }
            }
            else
            {
              v798 = 0;
            }
            v799 = v798;
            v800 = v40 - v798;
            v801 = &v41->i32[v799];
            v802 = &a2[v763 + v799];
            v803 = &a2[v762 + v799];
            v804 = &a2[v760 + v799];
            do
            {
              v806 = *v804++;
              v805 = v806;
              v807 = *v803++;
              v808 = v807 + v805;
              v809 = *v802++;
              *v801++ = v808 - v809;
              --v800;
            }
            while (v800);
          }
        }
        else
        {
          if ((_DWORD)v685 == -1 || v678 && (!a3[v683] || !a3[v684] || !a3[v685]))
          {
            if ((_DWORD)v684 == -1 || v678 && (!a3[v683] || !a3[v684]))
            {
              if ((_DWORD)v683 == -1 || v678 && !a3[v683])
              {
                if ((_DWORD)v40)
                  bzero(v41, v1054);
                gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v41, v39, 3u, 0, (int32x4_t *)&a2[v677 * v39]);
                v40 = *(_QWORD *)v1069;
                v680 = v1067;
                goto LABEL_823;
              }
              if ((_DWORD)v39)
              {
                v729 = (int)v683 * (int)v39;
                if (v40 < 8 || (unint64_t)((char *)v41 - (char *)a2 - 4 * v729) < 0x20)
                {
                  v730 = 0;
                  goto LABEL_879;
                }
                v825 = &v1046[v729];
                v826 = v41 + 1;
                v827 = v1062;
                do
                {
                  v828 = *(int32x4_t *)v825;
                  v826[-1] = *((int32x4_t *)v825 - 1);
                  *v826 = v828;
                  v825 += 8;
                  v826 += 2;
                  v827 -= 8;
                }
                while (v827);
                v730 = v1062;
                if (v1062 != v40)
                {
LABEL_879:
                  v731 = v40 - v730;
                  v732 = v730;
                  v733 = &v41->i32[v730];
                  v734 = &a2[v729 + v732];
                  do
                  {
                    v735 = *v734++;
                    *v733++ = v735;
                    --v731;
                  }
                  while (v731);
                }
              }
              v681 = 0;
              goto LABEL_822;
            }
            if ((_DWORD)v39)
            {
              v714 = v683 * v40;
              v715 = (int)v683 * (int)v40;
              v716 = v684 * v40;
              v717 = (int)v684 * (int)v40;
              if (v40 >= 8
                && ((unint64_t)((char *)v41 - (char *)&a2[v716]) >= 0x10
                  ? (v718 = (unint64_t)((char *)v41 - (char *)&a2[v714]) >= 0x10)
                  : (v718 = 0),
                    v718))
              {
                v817 = &a2[v714];
                v818 = v1041;
                v819 = v41;
                v820 = &a2[v716];
                do
                {
                  v821 = *(int32x4_t *)v817;
                  v817 += 4;
                  v822 = v821;
                  v823 = *(int32x4_t *)v820;
                  v820 += 4;
                  v824 = (uint32x4_t)vaddq_s32(v823, v822);
                  *v819++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v824, v824, 0x1FuLL), 1uLL);
                  v818 -= 4;
                }
                while (v818);
                v719 = v1041;
                if (v1041 != v40)
                  goto LABEL_867;
              }
              else
              {
                v719 = 0;
LABEL_867:
                v720 = v40 - v719;
                v721 = v719;
                v722 = &v41->i32[v719];
                v723 = &a2[v717 + v721];
                v724 = &a2[v715 + v721];
                do
                {
                  v726 = *v724++;
                  v725 = v726;
                  v727 = *v723++;
                  v296 = __OFADD__(v727, v725);
                  v728 = v727 + v725;
                  if (v728 < 0 != v296)
                    ++v728;
                  *v722++ = v728 >> 1;
                  --v720;
                }
                while (v720);
              }
            }
            v681 = 1;
            goto LABEL_822;
          }
          if ((_DWORD)v40)
          {
            v699 = (int)v683 * (int)v39;
            v700 = (int)v684 * (int)v39;
            v701 = (int)v685 * (int)v40;
            if (v40 >= 0xC)
            {
              v702 = 0;
              v778 = (char *)v41 - (char *)a2;
              if ((unint64_t)((char *)v41 - (char *)a2 - 4 * v701) >= 0x20
                && (unint64_t)(v778 - 4 * v700) >= 0x20
                && (unint64_t)(v778 - 4 * v699) >= 0x20)
              {
                v779 = (int32x4_t *)&v1046[v699];
                v780 = v41 + 1;
                v781 = (int32x4_t *)&v1046[v700];
                v782 = (int32x4_t *)&v1046[v701];
                v783 = v1062;
                do
                {
                  v784 = vsubq_s32(vaddq_s32(v781[-1], v779[-1]), v782[-1]);
                  v785 = vsubq_s32(vaddq_s32(*v781, *v779), *v782);
                  v779 += 2;
                  v780[-1] = v784;
                  *v780 = v785;
                  v780 += 2;
                  v781 += 2;
                  v782 += 2;
                  v783 -= 8;
                }
                while (v783);
                v702 = v1062;
                if (v1062 == v40)
                  goto LABEL_821;
              }
            }
            else
            {
              v702 = 0;
            }
            v703 = v702;
            v704 = v40 - v702;
            v705 = &v41->i32[v703];
            v706 = &a2[v701 + v703];
            v707 = &a2[v700 + v703];
            v708 = &a2[v699 + v703];
            do
            {
              v710 = *v708++;
              v709 = v710;
              v711 = *v707++;
              v712 = v711 + v709;
              v713 = *v706++;
              *v705++ = v712 - v713;
              --v704;
            }
            while (v704);
          }
        }
LABEL_821:
        v681 = 2;
LABEL_822:
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v41, v39, *((_DWORD *)this + 966), (uint64_t *)&v1078[15 * v681 - 2], (int32x4_t *)&a2[v677 * v39]);
        v40 = *(_QWORD *)v1069;
        v680 = v1067;
LABEL_823:
        if (++v677 >= *((int *)this + 959))
          goto LABEL_1144;
      }
    case 3:
      v1099 = 0;
      v1097 = 0u;
      __p = 0u;
      v1095 = 0u;
      v1096 = 0u;
      v1093 = 0u;
      v1094 = 0u;
      v1091 = 0u;
      v1092 = 0u;
      v1089 = 0u;
      v1090 = 0u;
      v1087 = 0u;
      v1088 = 0u;
      v1085 = 0u;
      v1086 = 0u;
      v1083 = 0u;
      v1084 = 0u;
      v1081 = 0u;
      v1082 = 0u;
      v1079 = 0u;
      *(_OWORD *)v1080 = 0u;
      __b = 0u;
      *(_OWORD *)v1078 = 0u;
      gcl::tmesh::ACContext::init((std::vector<int> *)&__b, v6);
      gcl::tmesh::ACContext::init((std::vector<int> *)((char *)&v1084 + 8), v1069[0]);
      gcl::tmesh::ACContext::init((std::vector<int> *)&v1092, v33);
      v1074 = 0;
      v1075 = 0;
      v1076 = 0;
      v42 = *(_QWORD *)v1069;
      if (v1069[0])
      {
        if (v1069[0] < 0)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v37 = (int32x4_t *)operator new(4 * v33);
        v1074 = v37;
        v1076 = (int32x4_t *)((char *)v37 + 4 * v33);
        bzero(v37, 4 * v33);
        v1075 = v1076;
        v1057 = (int32x4_t *)operator new(4 * v33);
        bzero(v1057, 4 * v33);
        v42 = *(_QWORD *)v1069;
        if (*((int *)this + 959) < 1)
        {
LABEL_1080:
          v675 = v1057;
          if (!v1057)
            goto LABEL_817;
          goto LABEL_816;
        }
      }
      else
      {
        v37 = 0;
        v1057 = 0;
        if (*((int *)this + 959) < 1)
          goto LABEL_1080;
      }
      v880 = 0;
      v881 = *((_DWORD *)this + 964);
      v1038 = (unint64_t)v1057 + 4 * v42;
      v1042 = v42 & 0xFFFFFFFC;
      v1047 = 4 * v42;
      v1032 = a2 + 4;
      v1035 = (char *)(v42 & 0xFFFFFFF8);
      v1055 = 0x8000;
      while (1)
      {
        if (v881 && !a3[v880])
          goto LABEL_993;
        v884 = (int *)(*((_QWORD *)this + 22) + 12 * v880);
        v885 = *v884;
        v886 = v884[1];
        v887 = v884[2];
        v888 = (int *)(*((_QWORD *)this + 25) + 12 * v880);
        v889 = v888[2];
        if ((_DWORD)v889 != -1)
        {
          v890 = *v888;
          v891 = v888[1];
          if (!v881 || v1064[v885] && v1064[v886] && v1064[v887] && v1064[v890] && v1064[v891] && v1064[v889])
          {
            v1023 = v37;
            v892 = v42;
            gcl::tmesh::ComputeGeneralizedParallelogramPrediction((int32x4_t *)&v1065[(int)v885 * (int)v42], (int32x4_t *)&v1065[(int)v886 * (int)v42], (int32x4_t *)&v1065[(int)v887 * (int)v1066], v1066, (int *)(*((_QWORD *)this + 13) + 12 * (int)v885), (int *)(*((_QWORD *)this + 13) + 12 * (int)v886), (int *)(*((_QWORD *)this + 13) + 12 * (int)v887), (int *)(*((_QWORD *)this + 13) + 12 * v880), v1023);
            gcl::tmesh::ComputeGeneralizedParallelogramPrediction((int32x4_t *)&v1065[(int)v890 * v892], (int32x4_t *)&v1065[(int)v891 * (int)v1066], (int32x4_t *)&v1065[(int)v889 * (int)v1066], v892, (int *)(*((_QWORD *)this + 13) + 12 * (int)v890), (int *)(*((_QWORD *)this + 13) + 12 * (int)v891), (int *)(*((_QWORD *)this + 13) + 12 * (int)v889), (int *)(*((_QWORD *)this + 13) + 12 * v880), v1057);
            if ((_DWORD)v1066)
            {
              v893 = v1074;
              v42 = *(_QWORD *)v1069;
              if (v1069[0] >= 4u)
              {
                a3 = v1064;
                v883 = v1065;
                v895 = v1057;
                if ((unint64_t)v1074 >= v1038 || v1057 >= (int32x4_t *)&v1074->i8[v1047])
                {
                  v935 = v1042;
                  v936 = v1057;
                  v937 = v1074;
                  do
                  {
                    v938 = *v936++;
                    v939 = (uint32x4_t)vaddq_s32(v938, *v937);
                    *v937++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v939, v939, 0x1FuLL), 1uLL);
                    v935 -= 4;
                  }
                  while (v935);
                  v894 = v1042;
                  if (v1042 == *(_QWORD *)v1069)
                  {
LABEL_1071:
                    v882 = 2;
                    goto LABEL_992;
                  }
                }
                else
                {
                  v894 = 0;
                }
              }
              else
              {
                v894 = 0;
                a3 = v1064;
                v883 = v1065;
                v895 = v1057;
              }
              v940 = *(_QWORD *)v1069 - v894;
              v941 = v894;
              v942 = &v895->i32[v894];
              v943 = &v893->i32[v941];
              do
              {
                v944 = *v942++;
                v945 = v944 + *v943;
                if (v945 < 0 != __OFADD__(v944, *v943))
                  ++v945;
                *v943++ = v945 >> 1;
                --v940;
              }
              while (v940);
              goto LABEL_1071;
            }
            v882 = 2;
            a3 = v1064;
            v883 = v1065;
            goto LABEL_991;
          }
        }
        a3 = v1064;
        v883 = v1065;
        if ((_DWORD)v887 != -1 && (!v881 || v1064[v885] && v1064[v886] && v1064[v887]))
        {
          v896 = v42;
          gcl::tmesh::ComputeGeneralizedParallelogramPrediction((int32x4_t *)&v1065[(int)v885 * (int)v42], (int32x4_t *)&v1065[(int)v886 * (int)v42], (int32x4_t *)&v1065[(int)v887 * (int)v42], v42, (int *)(*((_QWORD *)this + 13) + 12 * (int)v885), (int *)(*((_QWORD *)this + 13) + 12 * (int)v886), (int *)(*((_QWORD *)this + 13) + 12 * (int)v887), (int *)(*((_QWORD *)this + 13) + 12 * v880), v37);
          v882 = 2;
          a3 = v1064;
          v42 = v896;
          goto LABEL_992;
        }
        if ((_DWORD)v886 == -1 || v881 && (!v1064[v885] || !v1064[v886]))
        {
          if ((_DWORD)v885 == -1 || v881 && !v1064[v885])
          {
            if ((_DWORD)v42)
            {
              bzero(v37, v1047);
              v42 = *(_QWORD *)v1069;
            }
            gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v37, v42, 3u, 0, (int32x4_t *)&v1065[v880 * v1066]);
            v42 = *(_QWORD *)v1069;
            goto LABEL_993;
          }
          if ((_DWORD)v42)
          {
            v901 = (int)v885 * (int)v1066;
            if (v1066 < 8 || (unint64_t)((char *)v37 - (char *)v1065 - 4 * v901) < 0x20)
            {
              v902 = 0;
              goto LABEL_1027;
            }
            v946 = v1035;
            v947 = &v1032[v901];
            v948 = v37 + 1;
            do
            {
              v949 = *(int32x4_t *)v947;
              v948[-1] = *((int32x4_t *)v947 - 1);
              *v948 = v949;
              v947 += 8;
              v948 += 2;
              v946 -= 8;
            }
            while (v946);
            v902 = v1035;
            if (v1035 != (char *)v42)
            {
LABEL_1027:
              v903 = v42 - (_QWORD)v902;
              v904 = (uint64_t)v902;
              v905 = &v37->i32[(_QWORD)v902];
              v906 = &v1065[v901 + v904];
              do
              {
                v907 = *v906++;
                *v905++ = v907;
                --v903;
              }
              while (v903);
            }
          }
          v882 = 0;
          goto LABEL_992;
        }
        if ((_DWORD)v42 != 2)
        {
          if ((_DWORD)v42)
          {
            v914 = v885 * v42;
            v915 = (int)v885 * (int)v42;
            v916 = v886 * v1066;
            v917 = (int)v886 * (int)v1066;
            if (v1066 >= 8
              && ((unint64_t)((char *)v37 - (char *)&v1065[v916]) >= 0x10
                ? (v918 = (unint64_t)((char *)v37 - (char *)&v1065[v914]) >= 0x10)
                : (v918 = 0),
                  v918))
            {
              v950 = (int32x4_t *)&v1065[v914];
              v951 = v1042;
              v952 = v37;
              v953 = (int32x4_t *)&v1065[v916];
              do
              {
                v954 = *v950++;
                v955 = v954;
                v956 = *v953++;
                v957 = (uint32x4_t)vaddq_s32(v956, v955);
                *v952++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v957, v957, 0x1FuLL), 1uLL);
                v951 -= 4;
              }
              while (v951);
              v919 = v1042;
              if (v1042 != v42)
                goto LABEL_1049;
            }
            else
            {
              v919 = 0;
LABEL_1049:
              v920 = v42 - v919;
              v921 = v919;
              v922 = &v37->i32[v919];
              v923 = &v1065[v917 + v921];
              v924 = &v1065[v915 + v921];
              do
              {
                v926 = *v924++;
                v925 = v926;
                v927 = *v923++;
                v296 = __OFADD__(v927, v925);
                v928 = v927 + v925;
                if (v928 < 0 != v296)
                  ++v928;
                *v922++ = v928 >> 1;
                --v920;
              }
              while (v920);
            }
          }
          v882 = 1;
          goto LABEL_992;
        }
        v897 = *((_DWORD *)this + 683);
        v898 = *((_DWORD *)this + 684);
        if (v897 < 0x40000001)
          break;
        v909 = *((_DWORD *)this + 683);
        v900 = v1055;
LABEL_1058:
        v929 = (HIWORD(v909) * (unsigned __int16)v900) & 0xFFFF0000;
        v930 = v909 - v929;
        v931 = v898 >= v929;
        v932 = v900;
        v933 = *((unsigned __int16 *)this + ((v900 >> 7) & 0x1FE | v931) + 1376);
        if (v898 < v929)
          v934 = v929;
        else
          v934 = v930;
        if (v898 < v929)
          v929 = 0;
        *((_DWORD *)this + 683) = v934;
        *((_DWORD *)this + 684) = v898 - v929;
        gcl::tmesh::ComputeTexCoordinatesPrediction(&v1065[2 * v885], &v1065[2 * v886], (_DWORD *)(*((_QWORD *)this + 13) + 12 * (int)v885), (_DWORD *)(*((_QWORD *)this + 13) + 12 * (int)v886), (int *)(*((_QWORD *)this + 13) + 12 * v880), v931, v37->i32);
        v1055 = v933 + v932;
        v882 = 1;
        a3 = v1064;
LABEL_991:
        v42 = *(_QWORD *)v1069;
LABEL_992:
        v37 = v1074;
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v1074, v42, *((_DWORD *)this + 966), (uint64_t *)&v1078[15 * v882 - 2], (int32x4_t *)&v883[v880 * v1066]);
        v42 = *(_QWORD *)v1069;
LABEL_993:
        if (++v880 >= *((int *)this + 959))
          goto LABEL_1080;
      }
      v899 = *((_DWORD *)this + 686);
      v900 = v1055;
      while (1)
      {
        v898 *= 2;
        *((_DWORD *)this + 686) = --v899;
        if (v899)
          goto LABEL_1032;
        v910 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v910 + 1;
        v911 = *((unsigned int *)this + 676);
        if (v910 + 1 >= v911)
        {
          v912 = 65280;
          v913 = v910 + 2;
          *((_QWORD *)this + 340) = v913;
          if (v913 >= v911)
          {
LABEL_1038:
            v908 = 255;
            goto LABEL_1031;
          }
        }
        else
        {
          v912 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v910 + 1) << 8;
          v913 = v910 + 2;
          *((_QWORD *)this + 340) = v913;
          if (v913 >= v911)
            goto LABEL_1038;
        }
        v908 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v913);
LABEL_1031:
        v898 |= v912 | v908;
        v899 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_1032:
        v909 = 2 * v897;
        v84 = v897 >= 0x20000001;
        v897 *= 2;
        if (v84)
          goto LABEL_1058;
      }
    case 4:
      v1099 = 0;
      v1097 = 0u;
      __p = 0u;
      v1095 = 0u;
      v1096 = 0u;
      v1093 = 0u;
      v1094 = 0u;
      v1091 = 0u;
      v1092 = 0u;
      v1089 = 0u;
      v1090 = 0u;
      v1087 = 0u;
      v1088 = 0u;
      v1085 = 0u;
      v1086 = 0u;
      v1083 = 0u;
      v1084 = 0u;
      v1081 = 0u;
      v1082 = 0u;
      v1079 = 0u;
      *(_OWORD *)v1080 = 0u;
      __b = 0u;
      *(_OWORD *)v1078 = 0u;
      gcl::tmesh::ACContext::init((std::vector<int> *)&__b, v6);
      gcl::tmesh::ACContext::init((std::vector<int> *)((char *)&v1084 + 8), v1069[0]);
      gcl::tmesh::ACContext::init((std::vector<int> *)&v1092, v33);
      memset_pattern16(&v1072, &memset_pattern_26, 6uLL);
      memset_pattern16(&v1070, &memset_pattern_26, 6uLL);
      v1074 = 0;
      v1075 = 0;
      v1076 = 0;
      v36 = *(_QWORD *)v1069;
      if (v1069[0])
      {
        if (v1069[0] < 0)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v37 = (int32x4_t *)operator new(4 * v33);
        v1074 = v37;
        v1076 = (int32x4_t *)((char *)v37 + 4 * v33);
        bzero(v37, 4 * v33);
        v1075 = (int32x4_t *)((char *)v37 + 4 * v33);
        v1033 = (int32x4_t *)operator new(4 * v33);
        bzero(v1033, 4 * v33);
        v36 = *(_QWORD *)v1069;
        v38 = v1070.u16[0];
        v1043 = v1072.u16[0];
        if (*((int *)this + 959) < 1)
        {
LABEL_815:
          v1070.i16[0] = v38;
          v1072.i16[0] = v1043;
          v675 = v1033;
          if (!v1033)
          {
LABEL_817:
            if (!v37)
              goto LABEL_1147;
            v1075 = v37;
            v676 = v37;
            goto LABEL_1146;
          }
LABEL_816:
          operator delete(v675);
          goto LABEL_817;
        }
      }
      else
      {
        v37 = 0;
        v1033 = 0;
        v38 = v1070.u16[0];
        v1043 = v1072.u16[0];
        if (*((int *)this + 959) < 1)
          goto LABEL_815;
      }
      v370 = 0;
      v371 = *((_DWORD *)this + 964);
      v1024 = &a2[v36];
      v1025 = (unint64_t)v1033 + 4 * v36;
      v1028 = v36 & 0xFFFFFFF8;
      v1029 = 4 * v36;
      v1026 = a2 + 4;
      v1027 = v36 & 0xFFFFFFFC;
      v1031 = 0x8000;
      v372 = vdupq_n_s32(0x55555556u);
      v1040 = v371;
      *(int32x4_t *)v1061 = v372;
      while (1)
      {
        if (v371 && !a3[v370])
          goto LABEL_525;
        v374 = (int *)(*((_QWORD *)this + 22) + 12 * v370);
        v375 = *v374;
        v376 = v374[1];
        v377 = v374[2];
        v378 = (int *)(*((_QWORD *)this + 25) + 12 * v370);
        v379 = v378[2];
        if ((_DWORD)v379 == -1)
          break;
        v380 = *v378;
        v381 = v378[1];
        if (v371)
        {
          if (!a3[v375] || !a3[v376] || !a3[v377] || !a3[v380] || !a3[v381] || !a3[v379])
            break;
        }
        v382 = *((_DWORD *)this + 683);
        v383 = *((_DWORD *)this + 684);
        if (v382 < 0x40000001)
        {
          v384 = *((_DWORD *)this + 686);
          while (1)
          {
            v383 *= 2;
            *((_DWORD *)this + 686) = --v384;
            if (v384)
              goto LABEL_540;
            v387 = *((_QWORD *)this + 340);
            *((_QWORD *)this + 340) = v387 + 1;
            v388 = *((unsigned int *)this + 676);
            if (v387 + 1 >= v388)
            {
              v389 = 65280;
              v390 = v387 + 2;
              *((_QWORD *)this + 340) = v390;
              if (v390 >= v388)
              {
LABEL_546:
                v385 = 255;
                goto LABEL_539;
              }
            }
            else
            {
              v389 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v387 + 1) << 8;
              v390 = v387 + 2;
              *((_QWORD *)this + 340) = v390;
              if (v390 >= v388)
                goto LABEL_546;
            }
            v385 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v390);
LABEL_539:
            v383 |= v389 | v385;
            v384 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_540:
            v386 = 2 * v382;
            v84 = v382 >= 0x20000001;
            v382 *= 2;
            if (v84)
              goto LABEL_593;
          }
        }
        v386 = *((_DWORD *)this + 683);
LABEL_593:
        v420 = (HIWORD(v386) * (unsigned __int16)v38) & 0xFFFF0000;
        v421 = v386 - v420;
        v422 = v383 >= v420;
        v423 = v383 >= v420;
        v424 = *((unsigned __int16 *)this + ((v38 >> 7) & 0x1FE | v423) + 1376);
        if (v383 < v420)
          v425 = v420;
        else
          v425 = v421;
        if (v383 < v420)
          v420 = 0;
        if (v422)
          v426 = 2;
        else
          v426 = 1;
        v427 = v383 - v420;
        *((_DWORD *)this + 683) = v425;
        *((_DWORD *)this + 684) = v383 - v420;
        v1037 = v37;
        if (v425 < 0x40000001)
        {
          v428 = *((_DWORD *)this + 686);
          while (2)
          {
            v427 *= 2;
            *((_DWORD *)this + 686) = --v428;
            if (v428)
              goto LABEL_605;
            v431 = *((_QWORD *)this + 340);
            *((_QWORD *)this + 340) = v431 + 1;
            v432 = *((unsigned int *)this + 676);
            if (v431 + 1 >= v432)
            {
              v433 = 65280;
              v434 = v431 + 2;
              *((_QWORD *)this + 340) = v434;
              if (v434 >= v432)
                goto LABEL_611;
            }
            else
            {
              v433 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v431 + 1) << 8;
              v434 = v431 + 2;
              *((_QWORD *)this + 340) = v434;
              if (v434 >= v432)
              {
LABEL_611:
                v429 = 255;
LABEL_604:
                v427 |= v433 | v429;
                v428 = 16;
                *((_DWORD *)this + 686) = 16;
LABEL_605:
                v430 = 2 * v425;
                v84 = v425 >= 0x20000001;
                v425 *= 2;
                if (v84)
                  goto LABEL_613;
                continue;
              }
            }
            break;
          }
          v429 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v434);
          goto LABEL_604;
        }
        v430 = v425;
LABEL_613:
        v435 = v380;
        v436 = v375 * v36;
        v437 = (int)v375 * (int)v36;
        v438 = v376 * v1066;
        v439 = v377 * v1066;
        v38 += v424;
        v440 = v1070.u16[v426];
        v441 = (HIWORD(v430) * v440) & 0xFFFF0000;
        v442 = v430 - v441;
        v443 = v427 >= v441;
        v1070.i16[v426] = *((_WORD *)this + ((v440 >> 7) & 0x1FE | v443) + 1376) + v440;
        if (v427 < v441)
          v444 = v441;
        else
          v444 = v442;
        if (v427 < v441)
          v445 = 0;
        else
          v445 = v441;
        *((_DWORD *)this + 683) = v444;
        *((_DWORD *)this + 684) = v427 - v445;
        v446 = v423 | (2 * v443);
        if (v446)
        {
          v1052 = v38;
          v447 = (int32x4_t *)&v1065[v436];
          v448 = (int32x4_t *)&v1065[v438];
          v449 = (int32x4_t *)&v1065[v439];
          v450 = (int32x4_t *)&v1065[v435 * (int)v36];
          v451 = v381 * v36;
          v452 = (int32x4_t *)&v1065[(int)v381 * (int)v36];
          v453 = v379 * v36;
          v454 = (int32x4_t *)&v1065[(int)v379 * (int)v36];
          if (v446 == 2)
          {
            gcl::tmesh::ComputeGeneralizedParallelogramPrediction(v447, v448, v449, v1066, (int *)(*((_QWORD *)this + 13) + 12 * (int)v375), (int *)(*((_QWORD *)this + 13) + 12 * (int)v376), (int *)(*((_QWORD *)this + 13) + 12 * (int)v377), (int *)(*((_QWORD *)this + 13) + 12 * v370), v1037);
            gcl::tmesh::ComputeGeneralizedParallelogramPrediction(v450, v452, v454, v1069[0], (int *)(*((_QWORD *)this + 13) + 12 * v435), (int *)(*((_QWORD *)this + 13) + 12 * (int)v381), (int *)(*((_QWORD *)this + 13) + 12 * (int)v379), (int *)(*((_QWORD *)this + 13) + 12 * v370), v1033);
            v36 = *(_QWORD *)v1069;
            v402 = v1066;
            if (!(_DWORD)v1066)
            {
              v373 = 2;
              v393 = v1065;
LABEL_738:
              v38 = v1052;
              goto LABEL_739;
            }
            v525 = v1074;
            a3 = v1064;
            v393 = v1065;
            v38 = v1052;
            v371 = v1040;
            if (v1066 < 4 || (unint64_t)v1074 < v1025 && v1033 < (int32x4_t *)&v1074->i8[v1029])
            {
              v526 = 0;
LABEL_682:
              v527 = *(_QWORD *)v1069 - v526;
              v528 = v526;
              v529 = &v1033->i32[v526];
              v530 = &v525->i32[v528];
              do
              {
                v531 = *v529++;
                v532 = v531 + *v530;
                if (v532 < 0 != __OFADD__(v531, *v530))
                  ++v532;
                *v530++ = v532 >> 1;
                --v527;
              }
              while (v527);
              goto LABEL_523;
            }
            v662 = v1027;
            v663 = v1033;
            v664 = v1074;
            do
            {
              v665 = *v663++;
              v666 = (uint32x4_t)vaddq_s32(v665, *v664);
              *v664++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v666, v666, 0x1FuLL), 1uLL);
              v662 -= 4;
            }
            while (v662);
            v526 = v1027;
            if (v1027 != *(_QWORD *)v1069)
              goto LABEL_682;
          }
          else
          {
            v455 = v435 * (int)v36;
            if (v446 != 1)
            {
              if ((_DWORD)v36 == 2)
              {
                gcl::tmesh::ComputeTexCoordinatesPrediction((unint64_t)v447, v448->i32, v449->i32, (_DWORD *)(*((_QWORD *)this + 13) + 12 * (int)v375), (_DWORD *)(*((_QWORD *)this + 13) + 12 * (int)v376), (int *)(*((_QWORD *)this + 13) + 12 * v370), v1037->i32);
                gcl::tmesh::ComputeTexCoordinatesPrediction((unint64_t)v450, v452->i32, v454->i32, (_DWORD *)(*((_QWORD *)this + 13) + 12 * v435), (_DWORD *)(*((_QWORD *)this + 13) + 12 * (int)v381), (int *)(*((_QWORD *)this + 13) + 12 * v370), v1033->i32);
                v546 = v1074;
                v547 = v1074->i32[1];
                v548 = v1033->i32[0] + v1074->i32[0];
                if (v548 < 0 != __OFADD__(v1033->i32[0], v1074->i32[0]))
                  ++v548;
                v1074->i32[0] = v548 >> 1;
                v549 = v1033->i32[1];
                v296 = __OFADD__(v549, v547);
                v550 = v549 + v547;
                if (v550 < 0 != v296)
                  ++v550;
                v546->i32[1] = v550 >> 1;
                v373 = 2;
                v393 = v1065;
                v402 = v1066;
                v36 = *(_QWORD *)v1069;
                goto LABEL_738;
              }
              v393 = v1065;
              v402 = v1066;
              a3 = v1064;
              if ((_DWORD)v1066)
              {
                if (v1066 >= 0xC)
                {
                  v575 = 0;
                  if ((unint64_t)((char *)v1037 - (char *)&v1065[v453]) < 0x10)
                    goto LABEL_722;
                  if ((unint64_t)((char *)v1037 - (char *)&v1065[v439]) < 0x10)
                    goto LABEL_722;
                  if ((unint64_t)((char *)v1037 - (char *)&v1065[v451]) < 0x10)
                    goto LABEL_722;
                  if ((unint64_t)((char *)v1037 - (char *)&v1065[(int)v376 * (int)v1066]) < 0x10)
                    goto LABEL_722;
                  if ((unint64_t)((char *)v1037 - (char *)&v1065[v455]) < 0x10)
                    goto LABEL_722;
                  if ((unint64_t)((char *)v1037 - (char *)&v1065[v437]) < 0x10)
                    goto LABEL_722;
                  v640 = v1027;
                  v641 = (uint32x4_t *)v1037;
                  v642 = (int32x4_t *)&v1065[v453];
                  v643 = (int32x4_t *)&v1065[v439];
                  v644 = v452;
                  v645 = v448;
                  v646 = (int32x4_t *)&v1065[v435 * (int)v36];
                  v647 = v447;
                  do
                  {
                    v648 = *v647++;
                    v649 = v648;
                    v650 = *v646++;
                    v651 = (uint32x4_t)vaddq_s32(v650, v649);
                    v652 = *v645++;
                    v653 = v652;
                    v654 = *v644++;
                    v655 = v654;
                    v656 = *v643++;
                    v657 = v656;
                    v658 = *v642++;
                    v659 = vaddq_s32(v655, v653);
                    v660 = vaddq_s32(vsubq_s32(vshrq_n_s32((int32x4_t)vsraq_n_u32(v651, v651, 0x1FuLL), 1uLL), vaddq_s32(v657, v658)), vaddq_s32(v659, v659));
                    v661 = (uint32x4_t)vuzp2q_s32((int32x4_t)vmull_s32(*(int32x2_t *)v660.i8, *(int32x2_t *)v372.i8), (int32x4_t)vmull_high_s32(v660, v372));
                    *v641++ = vsraq_n_u32(v661, v661, 0x1FuLL);
                    v640 -= 4;
                  }
                  while (v640);
                  v575 = v1027;
                  if (v1027 != v36)
                    goto LABEL_722;
                }
                else
                {
                  v575 = 0;
                  do
                  {
LABEL_722:
                    v576 = v447->i32[v575];
                    v577 = v450->i32[v575];
                    v296 = __OFADD__(v577, v576);
                    v578 = v577 + v576;
                    if (v578 < 0 != v296)
                      ++v578;
                    v579 = 1431655766
                         * ((v578 >> 1) - (v449->i32[v575] + v454->i32[v575]) + 2 * (v452->i32[v575] + v448->i32[v575]));
                    v1037->i32[v575++] = HIDWORD(v579) + (v579 >> 63);
                  }
                  while (v36 != v575);
                }
              }
              v373 = 2;
LABEL_736:
              v38 = v1052;
              v371 = v1040;
              goto LABEL_524;
            }
            a3 = v1064;
            v393 = v1065;
            if (!(_DWORD)v36)
            {
              v373 = 2;
              v402 = v1066;
              goto LABEL_736;
            }
            v38 = v1052;
            v371 = v1040;
            v456 = 0;
            if (v36 >= 0xC)
            {
              v457 = v1037;
              if ((unint64_t)((char *)v1037 - (char *)&v1065[v453]) < 0x20)
              {
                v402 = v1066;
              }
              else
              {
                v402 = v1066;
                if ((unint64_t)((char *)v1037 - (char *)&v1065[v451]) >= 0x20
                  && (unint64_t)((char *)v1037 - (char *)&v1065[v455]) >= 0x20)
                {
                  v604 = (int32x4_t *)&v1026[v455];
                  v605 = v1037 + 1;
                  v606 = (int32x4_t *)&v1026[v451];
                  v607 = (int32x4_t *)&v1026[v453];
                  v608 = v1028;
                  do
                  {
                    v609 = vsubq_s32(vaddq_s32(v606[-1], v604[-1]), v607[-1]);
                    v610 = vsubq_s32(vaddq_s32(*v606, *v604), *v607);
                    v604 += 2;
                    v605[-1] = v609;
                    *v605 = v610;
                    v605 += 2;
                    v606 += 2;
                    v607 += 2;
                    v608 -= 8;
                  }
                  while (v608);
                  v456 = v1028;
                  if (v1028 == v36)
                    goto LABEL_523;
                }
              }
            }
            else
            {
              v402 = v1066;
              v457 = v1037;
            }
            v458 = v456;
            v459 = v36 - v456;
            v460 = &v457->i32[v458];
            v461 = &v1065[v453 + v458];
            v462 = &v1065[v451 + v458];
            v463 = &v1065[v455 + v458];
            do
            {
              v465 = *v463++;
              v464 = v465;
              v466 = *v462++;
              v467 = v466 + v464;
              v468 = *v461++;
              *v460++ = v467 - v468;
              --v459;
            }
            while (v459);
          }
        }
        else
        {
          if (!(_DWORD)v36)
          {
            v373 = 2;
            v393 = v1065;
            v402 = v1066;
LABEL_739:
            a3 = v1064;
            v371 = v1040;
            goto LABEL_524;
          }
          v393 = v1065;
          v402 = v1066;
          a3 = v1064;
          v371 = v1040;
          v533 = 0;
          if (v1066 >= 0xC)
          {
            v534 = v37;
            v596 = (char *)v37 - (char *)v1065;
            if ((unint64_t)((char *)v37 - (char *)v1065 - 4 * v439) >= 0x20
              && (unint64_t)(v596 - 4 * v438) >= 0x20
              && (unint64_t)(v596 - 4 * v436) >= 0x20)
            {
              v597 = (int32x4_t *)&v1026[v436];
              v598 = v37 + 1;
              v599 = (int32x4_t *)&v1026[v438];
              v600 = (int32x4_t *)&v1026[v439];
              v601 = v1028;
              do
              {
                v602 = vsubq_s32(vaddq_s32(v599[-1], v597[-1]), v600[-1]);
                v603 = vsubq_s32(vaddq_s32(*v599, *v597), *v600);
                v597 += 2;
                v598[-1] = v602;
                *v598 = v603;
                v598 += 2;
                v599 += 2;
                v600 += 2;
                v601 -= 8;
              }
              while (v601);
              v533 = v1028;
              if (v1028 == v36)
                goto LABEL_523;
            }
          }
          else
          {
            v534 = v37;
          }
          v535 = v533;
          v536 = v36 - v533;
          v537 = &v534->i32[v535];
          v538 = &v1065[v439 + v535];
          v539 = &v1065[v438 + v535];
          v540 = &v1065[v436 + v535];
          do
          {
            v542 = *v540++;
            v541 = v542;
            v543 = *v539++;
            v544 = v543 + v541;
            v545 = *v538++;
            *v537++ = v544 - v545;
            --v536;
          }
          while (v536);
        }
LABEL_523:
        v373 = 2;
LABEL_524:
        v37 = v1074;
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v1074, v36, *((_DWORD *)this + 966), (uint64_t *)&v1078[15 * v373 - 2], (int32x4_t *)&v393[v370 * v402]);
        v36 = *(_QWORD *)v1069;
        v372 = *(int32x4_t *)v1061;
LABEL_525:
        if (++v370 >= *((int *)this + 959))
          goto LABEL_815;
      }
      if ((_DWORD)v377 != -1 && (!v371 || a3[v375] && a3[v376] && a3[v377]))
      {
        v391 = *((_DWORD *)this + 683);
        v392 = *((_DWORD *)this + 684);
        v393 = v1065;
        if (v391 < 0x40000001)
        {
          v394 = *((_DWORD *)this + 686);
          v395 = v1066;
          while (1)
          {
            v392 *= 2;
            *((_DWORD *)this + 686) = --v394;
            if (v394)
              goto LABEL_556;
            v398 = *((_QWORD *)this + 340);
            *((_QWORD *)this + 340) = v398 + 1;
            v399 = *((unsigned int *)this + 676);
            if (v398 + 1 >= v399)
            {
              v400 = 65280;
              v401 = v398 + 2;
              *((_QWORD *)this + 340) = v401;
              if (v401 >= v399)
              {
LABEL_562:
                v396 = 255;
                goto LABEL_555;
              }
            }
            else
            {
              v400 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v398 + 1) << 8;
              v401 = v398 + 2;
              *((_QWORD *)this + 340) = v401;
              if (v401 >= v399)
                goto LABEL_562;
            }
            v396 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v401);
LABEL_555:
            v392 |= v400 | v396;
            v394 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_556:
            v397 = 2 * v391;
            v84 = v391 >= 0x20000001;
            v391 *= 2;
            if (v84)
              goto LABEL_629;
          }
        }
        v397 = *((_DWORD *)this + 683);
        v395 = v1066;
LABEL_629:
        v469 = (HIWORD(v397) * (unsigned __int16)v1043) & 0xFFFF0000;
        v470 = v397 - v469;
        v471 = v392 >= v469;
        v472 = v392 >= v469;
        v473 = *((unsigned __int16 *)this + ((v1043 >> 7) & 0x1FE | v472) + 1376);
        if (v392 < v469)
          v474 = v469;
        else
          v474 = v470;
        if (v392 < v469)
          v475 = 0;
        else
          v475 = v469;
        v476 = 1;
        if (v471)
          v476 = 2;
        v477 = v392 - v475;
        *((_DWORD *)this + 683) = v474;
        *((_DWORD *)this + 684) = v477;
        if (v474 < 0x40000001)
        {
          v478 = *((_DWORD *)this + 686);
          while (1)
          {
            v477 *= 2;
            *((_DWORD *)this + 686) = --v478;
            if (v478)
              goto LABEL_641;
            v481 = *((_QWORD *)this + 340);
            *((_QWORD *)this + 340) = v481 + 1;
            v482 = *((unsigned int *)this + 676);
            if (v481 + 1 >= v482)
            {
              v483 = 65280;
              v484 = v481 + 2;
              *((_QWORD *)this + 340) = v484;
              if (v484 >= v482)
              {
LABEL_647:
                v479 = 255;
                goto LABEL_640;
              }
            }
            else
            {
              v483 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v481 + 1) << 8;
              v484 = v481 + 2;
              *((_QWORD *)this + 340) = v484;
              if (v484 >= v482)
                goto LABEL_647;
            }
            v479 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v484);
LABEL_640:
            v477 |= v483 | v479;
            v478 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_641:
            v480 = 2 * v474;
            v84 = v474 >= 0x20000001;
            v474 *= 2;
            if (v84)
              goto LABEL_649;
          }
        }
        v480 = v474;
LABEL_649:
        v1053 = v38;
        v485 = (int)v375 * (int)v36;
        v486 = (int32x4_t *)&v1065[v485];
        v487 = (int)v376 * v395;
        v488 = (int32x4_t *)&v1065[v487];
        v489 = (int)v377 * (int)v36;
        v490 = (int32x4_t *)&v1065[v489];
        v1043 += v473;
        v491 = v1072.u16[v476];
        v492 = (HIWORD(v480) * v491) & 0xFFFF0000;
        v493 = v480 - v492;
        v494 = v477 >= v492;
        v1072.i16[v476] = *((_WORD *)this + ((v491 >> 7) & 0x1FE | v494) + 1376) + v491;
        if (v477 < v492)
          v495 = v492;
        else
          v495 = v493;
        if (v477 < v492)
          v496 = 0;
        else
          v496 = v492;
        *((_DWORD *)this + 683) = v495;
        *((_DWORD *)this + 684) = v477 - v496;
        v497 = v472 | (2 * v494);
        if (v497 != 2)
        {
          if (v497 != 1)
          {
            if (!v497)
            {
              v38 = v1053;
              if ((_DWORD)v36)
              {
                if (v36 >= 0xC)
                {
                  v498 = 0;
                  if ((unint64_t)((char *)v37 - (char *)&v1065[v489]) >= 0x20)
                  {
                    v371 = v1040;
                    a3 = v1064;
                    if ((unint64_t)((char *)v37 - (char *)&v1065[v487]) >= 0x20
                      && (unint64_t)((char *)v37 - (char *)&v1065[v485]) >= 0x20)
                    {
                      v611 = (int32x4_t *)&v1026[v485];
                      v612 = v37 + 1;
                      v613 = (int32x4_t *)&v1026[v487];
                      v614 = (int32x4_t *)&v1026[v489];
                      v615 = v1028;
                      do
                      {
                        v616 = vsubq_s32(vaddq_s32(v613[-1], v611[-1]), v614[-1]);
                        v617 = vsubq_s32(vaddq_s32(*v613, *v611), *v614);
                        v611 += 2;
                        v612[-1] = v616;
                        *v612 = v617;
                        v612 += 2;
                        v613 += 2;
                        v614 += 2;
                        v615 -= 8;
                      }
                      while (v615);
                      v498 = v1028;
                      if (v1028 == v36)
                        goto LABEL_813;
                    }
                    goto LABEL_662;
                  }
                }
                else
                {
                  v498 = 0;
                }
                v371 = v1040;
                a3 = v1064;
LABEL_662:
                v499 = v498;
                v500 = v36 - v498;
                v501 = &v37->i32[v499];
                v502 = &v1065[v489 + v499];
                v503 = &v1065[v487 + v499];
                v504 = &v1065[v485 + v499];
                do
                {
                  v506 = *v504++;
                  v505 = v506;
                  v507 = *v503++;
                  v508 = v507 + v505;
                  v509 = *v502++;
                  *v501++ = v508 - v509;
                  --v500;
                }
                while (v500);
LABEL_813:
                v373 = 2;
                v402 = v1066;
                goto LABEL_524;
              }
LABEL_733:
              v373 = 2;
              v402 = v1066;
              v371 = v1040;
              a3 = v1064;
              goto LABEL_524;
            }
            if ((_DWORD)v36 == 2)
            {
              gcl::tmesh::ComputeTexCoordinatesPrediction((unint64_t)&v1065[2 * v375], &v1065[2 * v376], &v1065[2 * (_DWORD)v377], (_DWORD *)(*((_QWORD *)this + 13) + 12 * (int)v375), (_DWORD *)(*((_QWORD *)this + 13) + 12 * (int)v376), (int *)(*((_QWORD *)this + 13) + 12 * v370), v37->i32);
              v373 = 2;
              v36 = *(_QWORD *)v1069;
              v402 = v1066;
              v38 = v1053;
              v371 = v1040;
              a3 = v1064;
              goto LABEL_524;
            }
            v38 = v1053;
            if (!(_DWORD)v36)
              goto LABEL_733;
            if (v36 >= 0xC)
            {
              v580 = 0;
              v667 = (char *)v37 - (char *)v1065;
              if ((unint64_t)((char *)v37 - (char *)v1065 - 4 * v489) >= 0x20)
              {
                v371 = v1040;
                a3 = v1064;
                if ((unint64_t)(v667 - 4 * v487) >= 0x20 && (unint64_t)(v667 - 4 * v485) >= 0x20)
                {
                  v668 = (int32x4_t *)&v1026[v485];
                  v669 = v37 + 1;
                  v670 = (int32x4_t *)&v1026[v487];
                  v671 = (int32x4_t *)&v1026[v489];
                  v672 = v1028;
                  do
                  {
                    v673 = vsubq_s32(vaddq_s32(v670[-1], v668[-1]), v671[-1]);
                    v674 = vsubq_s32(vaddq_s32(*v670, *v668), *v671);
                    v668 += 2;
                    v669[-1] = v673;
                    *v669 = v674;
                    v669 += 2;
                    v670 += 2;
                    v671 += 2;
                    v672 -= 8;
                  }
                  while (v672);
                  v580 = v1028;
                  if (v1028 == v36)
                    goto LABEL_813;
                }
                goto LABEL_730;
              }
            }
            else
            {
              v580 = 0;
            }
            v371 = v1040;
            a3 = v1064;
LABEL_730:
            v581 = v580;
            v582 = v36 - v580;
            v583 = &v37->i32[v581];
            v584 = &v1065[v489 + v581];
            v585 = &v1065[v487 + v581];
            v586 = &v1065[v485 + v581];
            do
            {
              v588 = *v586++;
              v587 = v588;
              v589 = *v585++;
              v590 = v589 + v587;
              v591 = *v584++;
              *v583++ = v590 - v591;
              --v582;
            }
            while (v582);
            goto LABEL_813;
          }
          gcl::tmesh::ComputeGeneralizedParallelogramPrediction((int32x4_t *)&v1065[v485], (int32x4_t *)&v1065[v487], v490, v36, (int *)(*((_QWORD *)this + 13) + 12 * (int)v375), (int *)(*((_QWORD *)this + 13) + 12 * (int)v376), (int *)(*((_QWORD *)this + 13) + 12 * (int)v377), (int *)(*((_QWORD *)this + 13) + 12 * v370), v37);
          v373 = 2;
          v36 = *(_QWORD *)v1069;
LABEL_709:
          v402 = v1066;
          v38 = v1053;
          v371 = v1040;
          a3 = v1064;
          goto LABEL_524;
        }
        v551 = (int)v377 * (int)v36;
        v552 = v487;
        gcl::tmesh::ComputeGeneralizedParallelogramPrediction(v486, v488, v490, v36, (int *)(*((_QWORD *)this + 13) + 12 * (int)v375), (int *)(*((_QWORD *)this + 13) + 12 * (int)v376), (int *)(*((_QWORD *)this + 13) + 12 * (int)v377), (int *)(*((_QWORD *)this + 13) + 12 * v370), v37);
        if (!(_DWORD)v1066)
        {
          v373 = 2;
          v36 = *(_QWORD *)v1069;
          v393 = v1065;
          v402 = v1066;
          v38 = v1053;
          v371 = v1040;
          a3 = v1064;
          goto LABEL_524;
        }
        v553 = v1074;
        v36 = *(_QWORD *)v1069;
        if (v1069[0] >= 8u)
        {
          v554 = 0;
          v618 = (int32x4_t *)((char *)v1074 + v1029);
          v555 = v551;
          v620 = v1074 < (int32x4_t *)&v1024[v552] && v488 < v618;
          v622 = v1074 < (int32x4_t *)&v1024[v485] && v486 < v618;
          if (v490 >= v618 || v1074 >= (int32x4_t *)&v1024[v551])
          {
            v393 = v1065;
            if (!v620 && !v622)
            {
              v624 = v1027;
              v625 = v1074;
              do
              {
                v626 = *v486++;
                v627 = v626;
                v628 = *v488++;
                v629 = vaddq_s32(v628, v627);
                v630 = *v490++;
                v631 = (uint32x4_t)vaddq_s32(vsubq_s32(v629, v630), *v625);
                *v625++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v631, v631, 0x1FuLL), 1uLL);
                v624 -= 4;
              }
              while (v624);
              v554 = v1027;
              if (v1027 == *(_QWORD *)v1069)
              {
LABEL_708:
                v373 = 2;
                goto LABEL_709;
              }
            }
LABEL_704:
            v556 = v554;
            v557 = *(_QWORD *)v1069 - v554;
            v558 = &v553->i32[v556];
            v559 = &v393[v555 + v556];
            v560 = &v393[v552 + v556];
            v561 = &v393[v485 + v556];
            do
            {
              v563 = *v561++;
              v562 = v563;
              v564 = *v560++;
              v565 = v564 + v562;
              v566 = *v559++;
              v567 = v565 - v566;
              v296 = __OFADD__(v567, *v558);
              v568 = v567 + *v558;
              if (v568 < 0 != v296)
                ++v568;
              *v558++ = v568 >> 1;
              --v557;
            }
            while (v557);
            goto LABEL_708;
          }
        }
        else
        {
          v554 = 0;
          v555 = v551;
        }
        v393 = v1065;
        goto LABEL_704;
      }
      v393 = v1065;
      v402 = v1066;
      if ((_DWORD)v376 != -1 && (!v371 || a3[v375] && a3[v376]))
      {
        if ((_DWORD)v36 == 2)
        {
          v403 = *((_DWORD *)this + 683);
          v404 = *((_DWORD *)this + 684);
          if (v403 >= 0x40000001)
          {
            v415 = *((_DWORD *)this + 683);
            v406 = v1031;
LABEL_713:
            v569 = (HIWORD(v415) * (unsigned __int16)v406) & 0xFFFF0000;
            v570 = v415 - v569;
            v571 = v404 >= v569;
            v572 = v406;
            v573 = *((unsigned __int16 *)this + ((v406 >> 7) & 0x1FE | v571) + 1376);
            if (v404 < v569)
              v574 = v569;
            else
              v574 = v570;
            if (v404 < v569)
              v569 = 0;
            *((_DWORD *)this + 683) = v574;
            *((_DWORD *)this + 684) = v404 - v569;
            gcl::tmesh::ComputeTexCoordinatesPrediction(&v1065[2 * (_DWORD)v375], &v1065[2 * (_DWORD)v376], (_DWORD *)(*((_QWORD *)this + 13) + 12 * (int)v375), (_DWORD *)(*((_QWORD *)this + 13) + 12 * (int)v376), (int *)(*((_QWORD *)this + 13) + 12 * v370), v571, v37->i32);
            v1031 = v573 + v572;
            v373 = 1;
            a3 = v1064;
            v36 = *(_QWORD *)v1069;
            v371 = v1040;
            goto LABEL_524;
          }
          v405 = *((_DWORD *)this + 686);
          v406 = v1031;
          while (1)
          {
            v404 *= 2;
            *((_DWORD *)this + 686) = --v405;
            if (v405)
              goto LABEL_582;
            v416 = *((_QWORD *)this + 340);
            *((_QWORD *)this + 340) = v416 + 1;
            v417 = *((unsigned int *)this + 676);
            if (v416 + 1 >= v417)
            {
              v418 = 65280;
              v419 = v416 + 2;
              *((_QWORD *)this + 340) = v419;
              if (v419 >= v417)
              {
LABEL_588:
                v414 = 255;
                goto LABEL_581;
              }
            }
            else
            {
              v418 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v416 + 1) << 8;
              v419 = v416 + 2;
              *((_QWORD *)this + 340) = v419;
              if (v419 >= v417)
                goto LABEL_588;
            }
            v414 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v419);
LABEL_581:
            v404 |= v418 | v414;
            v405 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_582:
            v415 = 2 * v403;
            v84 = v403 >= 0x20000001;
            v403 *= 2;
            if (v84)
              goto LABEL_713;
          }
        }
        if ((_DWORD)v36)
        {
          v510 = v375 * v1066;
          v511 = (int)v375 * (int)v1066;
          v512 = v376 * v1066;
          v513 = (int)v376 * (int)v1066;
          if (v36 < 8
            || ((unint64_t)((char *)v37 - (char *)&v1065[v512]) >= 0x10
              ? (v514 = (unint64_t)((char *)v37 - (char *)&v1065[v510]) >= 0x10)
              : (v514 = 0),
                !v514))
          {
            v515 = 0;
            goto LABEL_672;
          }
          v632 = (int32x4_t *)&v1065[v510];
          v633 = v1027;
          v634 = v37;
          v635 = (int32x4_t *)&v1065[v512];
          do
          {
            v636 = *v632++;
            v637 = v636;
            v638 = *v635++;
            v639 = (uint32x4_t)vaddq_s32(v638, v637);
            *v634++ = vshrq_n_s32((int32x4_t)vsraq_n_u32(v639, v639, 0x1FuLL), 1uLL);
            v633 -= 4;
          }
          while (v633);
          v515 = v1027;
          if (v1027 != v36)
          {
LABEL_672:
            v516 = v36 - v515;
            v517 = v515;
            v518 = &v37->i32[v515];
            v519 = &v1065[v513 + v517];
            v520 = &v1065[v511 + v517];
            do
            {
              v522 = *v520++;
              v521 = v522;
              v523 = *v519++;
              v296 = __OFADD__(v523, v521);
              v524 = v523 + v521;
              if (v524 < 0 != v296)
                ++v524;
              *v518++ = v524 >> 1;
              --v516;
            }
            while (v516);
          }
        }
        v373 = 1;
        goto LABEL_524;
      }
      if ((_DWORD)v375 == -1 || v371 && !a3[v375])
      {
        if ((_DWORD)v36)
        {
          bzero(v37, v1029);
          v36 = *(_QWORD *)v1069;
        }
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, v37, v36, 3u, 0, (int32x4_t *)&v1065[v370 * v1066]);
        v36 = *(_QWORD *)v1069;
        v372 = *(int32x4_t *)v1061;
        goto LABEL_525;
      }
      if (!(_DWORD)v36)
        goto LABEL_579;
      v407 = (int)v375 * (int)v1066;
      if (v1066 >= 8 && (unint64_t)((char *)v37 - (char *)v1065 - 4 * v407) >= 0x20)
      {
        v592 = &v1026[v407];
        v593 = v37 + 1;
        v594 = v1028;
        do
        {
          v595 = *(int32x4_t *)v592;
          v593[-1] = *((int32x4_t *)v592 - 1);
          *v593 = v595;
          v592 += 8;
          v593 += 2;
          v594 -= 8;
        }
        while (v594);
        v408 = v1028;
        if (v1028 == v36)
          goto LABEL_579;
      }
      else
      {
        v408 = 0;
      }
      v409 = v36 - v408;
      v410 = v408;
      v411 = &v37->i32[v408];
      v412 = &v1065[v407 + v410];
      do
      {
        v413 = *v412++;
        *v411++ = v413;
        --v409;
      }
      while (v409);
LABEL_579:
      v373 = 0;
      goto LABEL_524;
    case 5:
      v46 = ~(-1 << (*((_DWORD *)this + 962) - 1));
      v1074 = 0;
      v1075 = 0;
      v1076 = 0;
      gcl::tmesh::EstimateQuantizedNormals((uint64_t *)this + 13, (_QWORD *)this + 16, (uint64_t)&v1074, v46);
      *(_QWORD *)&v1084 = 0;
      v1082 = 0u;
      v1083 = 0u;
      v1081 = 0u;
      v1079 = 0u;
      *(_OWORD *)v1080 = 0u;
      __b = 0u;
      *(_OWORD *)v1078 = 0u;
      gcl::tmesh::ACContext::init((std::vector<int> *)&__b, v1069[0]);
      v47 = *((_DWORD *)this + 959);
      v48 = *(_QWORD *)v1069;
      if (v47 < 1)
        goto LABEL_463;
      v49 = 0;
      v1058 = *((_DWORD *)this + 964);
      v1044 = 2 * v46;
      v1049 = 0x8000;
      while (v1058 && !a3[v49])
      {
LABEL_75:
        if (++v49 >= v47)
          goto LABEL_463;
      }
      v57 = &v1074->i32[3 * v49];
      v59 = *v57;
      v58 = v57[1];
      v60 = v57[2];
      v61 = *(int *)(*((_QWORD *)this + 22) + 12 * v49);
      if ((_DWORD)v61 != -1 && (!v1058 || a3[v61]))
      {
        v62 = &v1065[(int)v61 * (int)v1066];
        v63 = *v62 - v46;
        v64 = v62[1] - v46;
        if (v63 >= 0)
          v65 = v63;
        else
          v65 = -v63;
        if (v64 >= 0)
          v66 = v64;
        else
          v66 = -v64;
        v67 = v46 - v65;
        v68 = v66 - v46;
        if (v63 >= 0)
          v68 = v46 - v66;
        v69 = v65 - v46;
        if (v64 >= 0)
          v69 = v67;
        v70 = v67 - v66;
        if (v70 < 0)
        {
          v63 = v68;
          v64 = v69;
        }
        if (v60 * (uint64_t)v70 + v59 * (uint64_t)v63 + v58 * (uint64_t)v64 < 0)
        {
          v59 = -v59;
          v58 = -v58;
          v60 = -v60;
        }
        goto LABEL_115;
      }
      v71 = *((_DWORD *)this + 683);
      v72 = *((_DWORD *)this + 684);
      if (v71 >= 0x40000001)
      {
        v75 = *((_DWORD *)this + 683);
LABEL_107:
        v80 = (HIWORD(v75) * (unsigned __int16)v1049) & 0xFFFF0000;
        v81 = v75 - v80;
        if (v72 < v80)
          v82 = 0;
        else
          v82 = (HIWORD(v75) * (unsigned __int16)v1049) & 0xFFFF0000;
        v83 = v72 - v82;
        v84 = v72 >= v80;
        v1049 += *((unsigned __int16 *)this + ((v1049 >> 7) & 0x1FE | (v72 >= v80)) + 1376);
        if (v72 < v80)
          v85 = v80;
        else
          v85 = v81;
        *((_DWORD *)this + 683) = v85;
        *((_DWORD *)this + 684) = v83;
        if (v84)
        {
          v59 = -v59;
          v58 = -v58;
          v60 = -v60;
        }
LABEL_115:
        if (v59 >= 0)
          v86 = v59;
        else
          v86 = -v59;
        if (v58 >= 0)
          v87 = v58;
        else
          v87 = -v58;
        if (v60 >= 0)
          v88 = v60;
        else
          v88 = -v60;
        v90 = v86 < v87 || v86 < v88;
        if (v90)
        {
          v86 = v88;
          v91 = v58;
          v92 = v59;
          if (v87 < v88)
            goto LABEL_135;
          v93 = &v1072.i32[3];
          v86 = v87;
          v91 = v60;
          v92 = v59;
        }
        else
        {
          v93 = (int *)v1073;
          v91 = v58;
          v92 = v60;
        }
        *v93 = v60;
LABEL_135:
        v1072.i64[0] = __PAIR64__(v91, v92);
        v1072.i32[2] = v86;
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, &v1072, v48, *((_DWORD *)this + 966), (uint64_t *)&__b, &v1070);
        v51 = v1070.i32[0];
        v94 = v1070.i32[1];
        if (v1070.i32[0] >= 0)
          v95 = v1070.i32[0];
        else
          v95 = -v1070.i32[0];
        if (v1070.i32[1] >= 0)
          v96 = v1070.i32[1];
        else
          v96 = -v1070.i32[1];
        v97 = v46 - v95;
        v98 = v46 - v95 - v96;
        if (v98 < 0)
        {
          v99 = v46 - v96;
          v100 = v96 - v46;
          if (v1070.i32[0] >= 0)
            v51 = v99;
          else
            v51 = v100;
          v101 = v95 - v46;
          if (v1070.i32[1] >= 0)
            v94 = v97;
          else
            v94 = v101;
          v48 = *(_QWORD *)v1069;
          if (v90)
            goto LABEL_151;
        }
        else
        {
          v48 = *(_QWORD *)v1069;
          if (v90)
          {
LABEL_151:
            if (v87 >= v88)
            {
              v50 = v94;
              if (v58 >= 0)
                v94 = v98;
              else
                v94 = -v98;
            }
            else if (v60 >= 0)
            {
              v50 = v98;
            }
            else
            {
              v50 = -v98;
            }
            goto LABEL_64;
          }
        }
        v50 = v51;
        if (v59 >= 0)
          v51 = v98;
        else
          v51 = -v98;
LABEL_64:
        a3 = v1064;
        v52 = &v1065[v49 * v1066];
        if (v94 >= 0)
          v53 = v94;
        else
          v53 = -v94;
        if (v51 < 0)
        {
          v54 = -v51;
        }
        else
        {
          v53 = v1044 - v53;
          v54 = v51;
        }
        if (v94 >= 0)
          v54 = v1044 - v54;
        v55 = v51 + v46;
        v56 = v94 + v46;
        if (v50 < 0)
        {
          v55 = v53;
          v56 = v54;
        }
        *v52 = v55;
        v52[1] = v56;
        v47 = *((_DWORD *)this + 959);
        goto LABEL_75;
      }
      v73 = *((_DWORD *)this + 686);
      while (1)
      {
        v72 *= 2;
        *((_DWORD *)this + 686) = --v73;
        if (v73)
          goto LABEL_99;
        v76 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v76 + 1;
        v77 = *((unsigned int *)this + 676);
        if (v76 + 1 >= v77)
        {
          v78 = 65280;
          v79 = v76 + 2;
          *((_QWORD *)this + 340) = v79;
          if (v79 >= v77)
          {
LABEL_105:
            v74 = 255;
            goto LABEL_98;
          }
        }
        else
        {
          v78 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v76 + 1) << 8;
          v79 = v76 + 2;
          *((_QWORD *)this + 340) = v79;
          if (v79 >= v77)
            goto LABEL_105;
        }
        v74 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v79);
LABEL_98:
        v72 |= v78 | v74;
        v73 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_99:
        v75 = 2 * v71;
        v84 = v71 >= 0x20000001;
        v71 *= 2;
        if (v84)
          goto LABEL_107;
      }
    case 6:
      v102 = ~(-1 << (*((_DWORD *)this + 962) - 1));
      v1074 = 0;
      v1075 = 0;
      v1076 = 0;
      v1059 = v102;
      gcl::tmesh::EstimateQuantizedNormals((uint64_t *)this + 13, (_QWORD *)this + 16, (uint64_t)&v1074, v102);
      v1099 = 0;
      v1097 = 0u;
      __p = 0u;
      v1095 = 0u;
      v1096 = 0u;
      v1093 = 0u;
      v1094 = 0u;
      v1091 = 0u;
      v1092 = 0u;
      v1089 = 0u;
      v1090 = 0u;
      v1087 = 0u;
      v1088 = 0u;
      v1085 = 0u;
      v1086 = 0u;
      v1083 = 0u;
      v1084 = 0u;
      v1081 = 0u;
      v1082 = 0u;
      v1079 = 0u;
      *(_OWORD *)v1080 = 0u;
      __b = 0u;
      *(_OWORD *)v1078 = 0u;
      gcl::tmesh::ACContext::init((std::vector<int> *)&__b, v1069[0]);
      gcl::tmesh::ACContext::init((std::vector<int> *)((char *)&v1084 + 8), v1069[0]);
      gcl::tmesh::ACContext::init((std::vector<int> *)&v1092, v1069[0]);
      memset_pattern16(v1073, &memset_pattern_26, 6uLL);
      memset_pattern16((char *)&v1072.u64[1] + 4, &memset_pattern_26, 6uLL);
      v103 = *((_DWORD *)this + 959);
      LODWORD(v104) = v1066;
      v105 = v1059;
      if (v103 <= 0)
        goto LABEL_443;
      v106 = v1069[0];
      v107 = 0;
      v108 = *((_DWORD *)this + 964);
      v1036 = v1073[0];
      v1034 = 2 * v1059;
      v1039 = 0x8000;
      v1045 = v1072.u16[6];
      v109 = vdup_n_s32(v1059);
      v1030 = 0x8000;
      v1050 = v108;
      break;
    default:
      return;
  }
  do
  {
    if (!v108 || a3[v107])
    {
      v115 = &v1074->i8[12 * v107];
      v116 = *(double *)v115;
      v117 = *((_DWORD *)v115 + 2);
      v118 = (int *)(*((_QWORD *)this + 22) + 12 * v107);
      v119 = *v118;
      v120 = v118[1];
      v121 = v118[2];
      v122 = (int *)(*((_QWORD *)this + 25) + 12 * v107);
      v123 = v122[2];
      if ((_DWORD)v123 != -1)
      {
        v125 = *v122;
        v124 = v122[1];
        if (!v108 || a3[v119] && a3[v120] && a3[v121] && a3[v125] && a3[v124] && a3[v123])
        {
          v126 = vsub_s32(*(int32x2_t *)&a2[(int)v119 * v106], v109);
          v127 = vabs_s32(vrev64_s32(v126));
          v128 = v105 - v127.i32[1] - v127.i32[0];
          if (v128 >= 0)
          {
            v129 = *((_DWORD *)this + 683);
            v130 = *((_DWORD *)this + 684);
            if (v129 < 0x40000001)
              goto LABEL_179;
LABEL_290:
            v133 = v129;
LABEL_291:
            v216 = (HIWORD(v133) * (unsigned __int16)v1045) & 0xFFFF0000;
            v217 = v133 - v216;
            v218 = v130 >= v216;
            v219 = v130 >= v216;
            v220 = *((unsigned __int16 *)this + ((v1045 >> 7) & 0x1FE | v219) + 1376);
            if (v130 < v216)
              v221 = v216;
            else
              v221 = v217;
            if (v130 < v216)
              v222 = 0;
            else
              v222 = v216;
            v223 = 1;
            if (v218)
              v223 = 2;
            v224 = v130 - v222;
            *((_DWORD *)this + 683) = v221;
            *((_DWORD *)this + 684) = v224;
            if (v221 < 0x40000001)
            {
              v225 = *((_DWORD *)this + 686);
              while (1)
              {
                v224 *= 2;
                *((_DWORD *)this + 686) = --v225;
                if (v225)
                  goto LABEL_303;
                v228 = *((_QWORD *)this + 340);
                *((_QWORD *)this + 340) = v228 + 1;
                v229 = *((unsigned int *)this + 676);
                if (v228 + 1 >= v229)
                {
                  v230 = 65280;
                  v231 = v228 + 2;
                  *((_QWORD *)this + 340) = v231;
                  if (v231 >= v229)
                  {
LABEL_309:
                    v226 = 255;
                    goto LABEL_302;
                  }
                }
                else
                {
                  v230 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v228 + 1) << 8;
                  v231 = v228 + 2;
                  *((_QWORD *)this + 340) = v231;
                  if (v231 >= v229)
                    goto LABEL_309;
                }
                v226 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v231);
LABEL_302:
                v224 |= v230 | v226;
                v225 = 16;
                *((_DWORD *)this + 686) = 16;
LABEL_303:
                v227 = 2 * v221;
                v84 = v221 >= 0x20000001;
                v221 *= 2;
                if (v84)
                  goto LABEL_311;
              }
            }
            v227 = v221;
LABEL_311:
            v1045 += v220;
            v232 = v1072.u16[v223 + 6];
            v233 = (HIWORD(v227) * v232) & 0xFFFF0000;
            v234 = v227 - v233;
            v235 = v224 >= v233;
            v1072.i16[v223 + 6] = *((_WORD *)this + ((v232 >> 7) & 0x1FE | v235) + 1376) + v232;
            if (v224 < v233)
              v236 = v233;
            else
              v236 = v234;
            if (v224 < v233)
              v237 = 0;
            else
              v237 = v233;
            *((_DWORD *)this + 683) = v236;
            *((_DWORD *)this + 684) = v224 - v237;
            v238 = v219 | (2 * v235);
            if (v238 == 2)
            {
              v274 = vsub_s32(*(int32x2_t *)&a2[(int)v125 * (int)v104], v109);
              v275 = vabs_s32(vrev64_s32(v274));
              v276 = v105 - v275.i32[1] - v275.i32[0];
              if (v276 < 0)
                v274 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v274), (int8x8_t)vsub_s32(v275, v109), (int8x8_t)__PAIR64__(v105 - v275.i32[1], v105 - v275.i32[0]));
              v277 = vsub_s32(*(int32x2_t *)&a2[(int)v124 * (int)v104], v109);
              v278 = vabs_s32(vrev64_s32(v277));
              v279 = v105 - v278.i32[1] - v278.i32[0];
              if (v279 < 0)
                v277 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v277), (int8x8_t)vsub_s32(v278, v109), (int8x8_t)__PAIR64__(v105 - v278.i32[1], v105 - v278.i32[0]));
              v269 = vsub_s32(*(int32x2_t *)&a2[(int)v123 * (int)v104], v109);
              v280 = vabs_s32(vrev64_s32(v269));
              v271 = v105 - v280.i32[1] - v280.i32[0];
              if (v271 < 0)
                v269 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v269), (int8x8_t)vsub_s32(v280, v109), (int8x8_t)__PAIR64__(v105 - v280.i32[1], v105 - v280.i32[0]));
              v272 = vadd_s32(v277, v274);
              v273 = v279 + v276;
            }
            else
            {
              if (v238 != 1)
              {
                if (v238)
                {
                  v281 = vsub_s32(*(int32x2_t *)&a2[(int)v120 * v106], v109);
                  v282 = vabs_s32(vrev64_s32(v281));
                  v283 = v105 - v282.i32[1] - v282.i32[0];
                  if (v283 < 0)
                    v281 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v281), (int8x8_t)vsub_s32(v282, v109), (int8x8_t)__PAIR64__(v105 - v282.i32[1], v105 - v282.i32[0]));
                  v284 = vsub_s32(*(int32x2_t *)&a2[(int)v121 * (int)v104], v109);
                  v285 = vabs_s32(vrev64_s32(v284));
                  v286 = v105 - v285.i32[1] - v285.i32[0];
                  if (v286 < 0)
                    v284 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v284), (int8x8_t)vsub_s32(v285, v109), (int8x8_t)__PAIR64__(v105 - v285.i32[1], v105 - v285.i32[0]));
                  v287 = vsub_s32(*(int32x2_t *)&a2[(int)v125 * v106], v109);
                  v288 = vabs_s32(vrev64_s32(v287));
                  v289 = v105 - v288.i32[1] - v288.i32[0];
                  if (v289 < 0)
                    v287 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v287), (int8x8_t)vsub_s32(v288, v109), (int8x8_t)__PAIR64__(v105 - v288.i32[1], v105 - v288.i32[0]));
                  v290 = vsub_s32(*(int32x2_t *)&a2[(int)v124 * (int)v104], v109);
                  v291 = vabs_s32(vrev64_s32(v290));
                  v292 = v105 - v291.i32[1] - v291.i32[0];
                  if (v292 < 0)
                    v290 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v290), (int8x8_t)vsub_s32(v291, v109), (int8x8_t)__PAIR64__(v105 - v291.i32[1], v105 - v291.i32[0]));
                  v293 = vsub_s32(*(int32x2_t *)&a2[(int)v123 * v106], v109);
                  v294 = vabs_s32(vrev64_s32(v293));
                  if ((int)(v105 - v294.i32[1] - v294.i32[0]) < 0)
                    v293 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v293), (int8x8_t)vsub_s32(v294, v109), (int8x8_t)__PAIR64__(v105 - v294.i32[1], v105 - v294.i32[0]));
                  v295 = (uint32x2_t)vadd_s32(v287, v126);
                  v296 = __OFADD__(v289, v128);
                  v297 = v289 + v128;
                  if (v297 < 0 != v296)
                    ++v297;
                  v298 = vadd_s32(v290, v281);
                  v299 = vmull_s32(vsub_s32(vsra_n_s32(vadd_s32(v298, v298), (int32x2_t)vsra_n_u32(v295, v295, 0x1FuLL), 1uLL), vadd_s32(v284, v293)), vdup_n_s32(0x55555556u));
                  v116 = COERCE_DOUBLE(vadd_s32(vshrn_n_s64(v299, 0x20uLL), vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v299, 0x3FuLL))));
                  v300 = 1431655766
                       * (int)((v297 >> 1) + 2 * (v292 + v283) - (v286 + v105 - v294.i32[1] - v294.i32[0]));
                  v117 = HIDWORD(v300) + (v300 >> 63);
                }
                else
                {
                  v239 = vzip1_s32(v126, *(int32x2_t *)&v116);
                  v240 = vzip2_s32(v126, *(int32x2_t *)&v116);
                  if (v239.i32[0] * (uint64_t)v239.i32[1] + v117 * (uint64_t)v128 + v240.i32[0] * (uint64_t)v240.i32[1] < 0)
                  {
                    v116 = COERCE_DOUBLE(vneg_s32(*(int32x2_t *)&v116));
                    v117 = -v117;
                  }
                }
                goto LABEL_385;
              }
              v266 = vsub_s32(*(int32x2_t *)&a2[(int)v120 * (int)v104], v109);
              v267 = vabs_s32(vrev64_s32(v266));
              v268 = v105 - v267.i32[1] - v267.i32[0];
              if (v268 < 0)
                v266 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v266), (int8x8_t)vsub_s32(v267, v109), (int8x8_t)__PAIR64__(v105 - v267.i32[1], v105 - v267.i32[0]));
              v269 = vsub_s32(*(int32x2_t *)&a2[(int)v121 * v106], v109);
              v270 = vabs_s32(vrev64_s32(v269));
              v271 = v105 - v270.i32[1] - v270.i32[0];
              if (v271 < 0)
                v269 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v269), (int8x8_t)vsub_s32(v270, v109), (int8x8_t)__PAIR64__(v105 - v270.i32[1], v105 - v270.i32[0]));
              v272 = vadd_s32(v266, v126);
              v273 = v268 + v128;
            }
            v116 = COERCE_DOUBLE(vsub_s32(v272, v269));
            v117 = v273 - v271;
LABEL_385:
            v247 = 2;
            goto LABEL_394;
          }
          v215.i32[0] = v105 - v127.i32[0];
          v215.i32[1] = v105 - v127.i32[1];
          v126 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v126), (int8x8_t)vsub_s32(v127, v109), v215);
          v129 = *((_DWORD *)this + 683);
          v130 = *((_DWORD *)this + 684);
          if (v129 >= 0x40000001)
            goto LABEL_290;
LABEL_179:
          v131 = *((_DWORD *)this + 686);
          while (1)
          {
            v130 *= 2;
            *((_DWORD *)this + 686) = --v131;
            if (v131)
              goto LABEL_182;
            v134 = *((_QWORD *)this + 340);
            *((_QWORD *)this + 340) = v134 + 1;
            v135 = *((unsigned int *)this + 676);
            if (v134 + 1 >= v135)
            {
              v136 = 65280;
              v137 = v134 + 2;
              *((_QWORD *)this + 340) = v137;
              if (v137 >= v135)
              {
LABEL_188:
                v132 = 255;
                goto LABEL_181;
              }
            }
            else
            {
              v136 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v134 + 1) << 8;
              v137 = v134 + 2;
              *((_QWORD *)this + 340) = v137;
              if (v137 >= v135)
                goto LABEL_188;
            }
            v132 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v137);
LABEL_181:
            v130 |= v136 | v132;
            v131 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_182:
            v133 = 2 * v129;
            v84 = v129 >= 0x20000001;
            v129 *= 2;
            if (v84)
              goto LABEL_291;
          }
        }
      }
      if ((_DWORD)v121 != -1 && (!v108 || a3[v119] && a3[v120] && a3[v121]))
      {
        v138 = vsub_s32(*(int32x2_t *)&a2[(int)v119 * (int)v104], v109);
        v139 = vabs_s32(vrev64_s32(v138));
        v140 = v105 - v139.i32[1] - v139.i32[0];
        if (v140 < 0)
          v138 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v138), (int8x8_t)vsub_s32(v139, v109), (int8x8_t)__PAIR64__(v105 - v139.i32[1], v105 - v139.i32[0]));
        v141 = vsub_s32(*(int32x2_t *)&a2[(int)v120 * v106], v109);
        v142 = vabs_s32(vrev64_s32(v141));
        v143 = v105 - v142.i32[1] - v142.i32[0];
        if (v143 < 0)
          v141 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v141), (int8x8_t)vsub_s32(v142, v109), (int8x8_t)__PAIR64__(v105 - v142.i32[1], v105 - v142.i32[0]));
        v144 = vsub_s32(*(int32x2_t *)&a2[(int)v121 * (int)v104], v109);
        v145 = vabs_s32(vrev64_s32(v144));
        v146 = v105 - v145.i32[1] - v145.i32[0];
        if (v146 < 0)
          v144 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v144), (int8x8_t)vsub_s32(v145, v109), (int8x8_t)__PAIR64__(v105 - v145.i32[1], v105 - v145.i32[0]));
        v147 = *((_DWORD *)this + 683);
        v148 = *((_DWORD *)this + 684);
        if (v147 < 0x40000001)
        {
          v149 = *((_DWORD *)this + 686);
          while (1)
          {
            v148 *= 2;
            *((_DWORD *)this + 686) = --v149;
            if (v149)
              goto LABEL_204;
            v152 = *((_QWORD *)this + 340);
            *((_QWORD *)this + 340) = v152 + 1;
            v153 = *((unsigned int *)this + 676);
            if (v152 + 1 >= v153)
            {
              v154 = 65280;
              v155 = v152 + 2;
              *((_QWORD *)this + 340) = v155;
              if (v155 >= v153)
              {
LABEL_210:
                v150 = 255;
                goto LABEL_203;
              }
            }
            else
            {
              v154 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v152 + 1) << 8;
              v155 = v152 + 2;
              *((_QWORD *)this + 340) = v155;
              if (v155 >= v153)
                goto LABEL_210;
            }
            v150 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v155);
LABEL_203:
            v148 |= v154 | v150;
            v149 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_204:
            v151 = 2 * v147;
            v84 = v147 >= 0x20000001;
            v147 *= 2;
            if (v84)
              goto LABEL_258;
          }
        }
        v151 = *((_DWORD *)this + 683);
LABEL_258:
        v189 = (HIWORD(v151) * (unsigned __int16)v1036) & 0xFFFF0000;
        v190 = v151 - v189;
        v191 = v148 >= v189;
        v192 = v148 >= v189;
        v193 = *((unsigned __int16 *)this + ((v1036 >> 7) & 0x1FE | v192) + 1376);
        if (v148 < v189)
          v194 = v189;
        else
          v194 = v190;
        if (v148 < v189)
          v195 = 0;
        else
          v195 = v189;
        v196 = 1;
        if (v191)
          v196 = 2;
        v197 = v148 - v195;
        *((_DWORD *)this + 683) = v194;
        *((_DWORD *)this + 684) = v197;
        v198 = (unsigned __int16)v1073[v196];
        if (v194 < 0x40000001)
        {
          v199 = *((_DWORD *)this + 686);
          while (1)
          {
            v197 *= 2;
            *((_DWORD *)this + 686) = --v199;
            if (v199)
              goto LABEL_270;
            v202 = *((_QWORD *)this + 340);
            *((_QWORD *)this + 340) = v202 + 1;
            v203 = *((unsigned int *)this + 676);
            if (v202 + 1 >= v203)
            {
              v204 = 65280;
              v205 = v202 + 2;
              *((_QWORD *)this + 340) = v205;
              if (v205 >= v203)
              {
LABEL_276:
                v200 = 255;
                goto LABEL_269;
              }
            }
            else
            {
              v204 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v202 + 1) << 8;
              v205 = v202 + 2;
              *((_QWORD *)this + 340) = v205;
              if (v205 >= v203)
                goto LABEL_276;
            }
            v200 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v205);
LABEL_269:
            v197 |= v204 | v200;
            v199 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_270:
            v201 = 2 * v194;
            v84 = v194 >= 0x20000001;
            v194 *= 2;
            if (v84)
              goto LABEL_278;
          }
        }
        v201 = v194;
LABEL_278:
        v206 = v193 + v1036;
        v207 = (HIWORD(v201) * v198) & 0xFFFF0000;
        v208 = v201 - v207;
        v209 = v197 >= v207;
        v1073[v196] = *((_WORD *)this + ((v198 >> 7) & 0x1FE | v209) + 1376) + v198;
        if (v197 < v207)
          v210 = v207;
        else
          v210 = v208;
        if (v197 < v207)
          v211 = 0;
        else
          v211 = v207;
        *((_DWORD *)this + 683) = v210;
        *((_DWORD *)this + 684) = v197 - v211;
        v212 = v192 | (2 * v209);
        v1036 = v206;
        if (v212 == 2)
        {
          v301 = (uint32x2_t)vsub_s32(v141, (int32x2_t)vmvn_s8((int8x8_t)v138));
          v302 = v140 + v143;
          v116 = COERCE_DOUBLE(vshr_n_s32((int32x2_t)vsra_n_u32(v301, v301, 0x1FuLL), 1uLL));
          if (v140 + v143 + 1 >= 0)
            v303 = v302 + 1;
          else
            v303 = v302 + 2;
          v117 = v303 >> 1;
        }
        else if (v212 == 1)
        {
          v116 = COERCE_DOUBLE(vsub_s32(vadd_s32(v141, v138), v144));
          v117 = v143 + v140 - v146;
        }
        else if (v212)
        {
          v304 = vmull_s32(vadd_s32(vsub_s32(v141, (int32x2_t)vmvn_s8((int8x8_t)v138)), v144), vdup_n_s32(0x55555556u));
          v116 = COERCE_DOUBLE(vadd_s32(vshrn_n_s64(v304, 0x20uLL), vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v304, 0x3FuLL))));
          v117 = (v140 + v143 + v146 + 1) / 3;
        }
        else
        {
          v213 = vzip1_s32(v138, *(int32x2_t *)&v116);
          v214 = vzip2_s32(v138, *(int32x2_t *)&v116);
          if (v213.i32[0] * (uint64_t)v213.i32[1] + v117 * (uint64_t)v140 + v214.i32[0] * (uint64_t)v214.i32[1] < 0)
          {
            v116 = COERCE_DOUBLE(vneg_s32(*(int32x2_t *)&v116));
            v117 = -v117;
          }
        }
        v247 = 1;
LABEL_394:
        v305 = LODWORD(v116);
        v1071 = LODWORD(v116);
        v306 = HIDWORD(v116);
        v1070.i32[3] = HIDWORD(v116);
        v307 = vabs_s32(*(int32x2_t *)&v116);
        v308 = v307.u32[1];
        if (v117 >= 0)
          v309 = v117;
        else
          v309 = -v117;
        v310 = v307.i32[0];
        v312 = v307.i32[0] < (unsigned __int32)v307.i32[1] || v307.i32[0] < v309;
        if (v312)
        {
          v310 = v309;
          v313 = v306;
          v314 = v305;
          if (v307.i32[1] < v309)
            goto LABEL_408;
          v315 = &v1070.i32[3];
          v310 = v307.i32[1];
          v313 = v117;
          v314 = v305;
        }
        else
        {
          v315 = &v1071;
          v313 = v306;
          v314 = v117;
        }
        *v315 = v117;
LABEL_408:
        v1072.i64[0] = __PAIR64__(v313, v314);
        v1072.i32[2] = v310;
        gcl::tmesh::DecoderImpl::decodeResidual((uint64_t)this, &v1072, v1066, *((_DWORD *)this + 966), (uint64_t *)&v1078[15 * v247 - 2], &v1070);
        v111 = v1070.i32[0];
        v316 = v1070.i32[1];
        if (v1070.i32[0] >= 0)
          v317 = v1070.i32[0];
        else
          v317 = -v1070.i32[0];
        if (v1070.i32[1] >= 0)
          v318 = v1070.i32[1];
        else
          v318 = -v1070.i32[1];
        v105 = v1059;
        v319 = v1059 - v317;
        v320 = v1059 - v317 - v318;
        if (v320 < 0)
        {
          v321 = v1059 - v318;
          v322 = v318 - v1059;
          if (v1070.i32[0] >= 0)
            v111 = v321;
          else
            v111 = v322;
          v323 = v317 - v1059;
          if (v1070.i32[1] >= 0)
            v316 = v319;
          else
            v316 = v323;
          v106 = v1069[0];
          if (v312)
          {
LABEL_424:
            if (v308 >= v309)
            {
              v325 = v316;
              if (v306 >= 0)
                v316 = v320;
              else
                v316 = -v320;
              a2 = v1065;
              v104 = v1066;
              v108 = v1050;
              if (v325 < 0)
                goto LABEL_434;
            }
            else
            {
              if (v117 >= 0)
                v324 = v320;
              else
                v324 = -v320;
              a2 = v1065;
              v104 = v1066;
              v108 = v1050;
              if (v324 < 0)
              {
LABEL_434:
                if (v316 >= 0)
                  v112 = v316;
                else
                  v112 = -v316;
                if (v111 < 0)
                  v111 = -v111;
                else
                  v112 = v1034 - v112;
                if (v316 >= 0)
                  v113 = v1034 - v111;
                else
                  v113 = v111;
                goto LABEL_165;
              }
            }
LABEL_164:
            v112 = v111 + v1059;
            v113 = v316 + v1059;
LABEL_165:
            v114 = &a2[v107 * v104];
            *v114 = v112;
            v114[1] = v113;
            v103 = *((_DWORD *)this + 959);
            goto LABEL_166;
          }
        }
        else
        {
          v106 = v1069[0];
          if (v312)
            goto LABEL_424;
        }
        v110 = v111;
        if (v305 >= 0)
          v111 = v320;
        else
          v111 = -v320;
        a2 = v1065;
        v104 = v1066;
        v108 = v1050;
        if (v110 < 0)
          goto LABEL_434;
        goto LABEL_164;
      }
      if ((_DWORD)v120 != -1 && (!v108 || a3[v119] && a3[v120]))
      {
        v156 = vsub_s32(*(int32x2_t *)&a2[(int)v119 * v106], v109);
        v157 = vabs_s32(vrev64_s32(v156));
        v158 = v105 - v157.i32[1] - v157.i32[0];
        if (v158 < 0)
          v156 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v156), (int8x8_t)vsub_s32(v157, v109), (int8x8_t)__PAIR64__(v105 - v157.i32[1], v105 - v157.i32[0]));
        v159 = vsub_s32(*(int32x2_t *)&a2[(int)v120 * (int)v104], v109);
        v160 = vabs_s32(vrev64_s32(v159));
        if ((int)(v105 - v160.i32[1] - v160.i32[0]) < 0)
          v159 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v159), (int8x8_t)vsub_s32(v160, v109), (int8x8_t)__PAIR64__(v105 - v160.i32[1], v105 - v160.i32[0]));
        v161 = *((_DWORD *)this + 683);
        v162 = *((_DWORD *)this + 684);
        if (v161 < 0x40000001)
        {
          v163 = *((_DWORD *)this + 686);
          while (1)
          {
            v162 *= 2;
            *((_DWORD *)this + 686) = --v163;
            if (v163)
              goto LABEL_223;
            v166 = *((_QWORD *)this + 340);
            *((_QWORD *)this + 340) = v166 + 1;
            v167 = *((unsigned int *)this + 676);
            if (v166 + 1 >= v167)
            {
              v168 = 65280;
              v169 = v166 + 2;
              *((_QWORD *)this + 340) = v169;
              if (v169 >= v167)
              {
LABEL_229:
                v164 = 255;
                goto LABEL_222;
              }
            }
            else
            {
              v168 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v166 + 1) << 8;
              v169 = v166 + 2;
              *((_QWORD *)this + 340) = v169;
              if (v169 >= v167)
                goto LABEL_229;
            }
            v164 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v169);
LABEL_222:
            v162 |= v168 | v164;
            v163 = 16;
            *((_DWORD *)this + 686) = 16;
LABEL_223:
            v165 = 2 * v161;
            v84 = v161 >= 0x20000001;
            v161 *= 2;
            if (v84)
              goto LABEL_323;
          }
        }
        v165 = *((_DWORD *)this + 683);
LABEL_323:
        v241 = (HIWORD(v165) * (unsigned __int16)v1039) & 0xFFFF0000;
        v242 = v165 - v241;
        if (v162 < v241)
          v243 = 0;
        else
          v243 = (HIWORD(v165) * (unsigned __int16)v1039) & 0xFFFF0000;
        *((_DWORD *)this + 684) = v162 - v243;
        v244 = v162 >= v241;
        v245 = *((unsigned __int16 *)this + ((v1039 >> 7) & 0x1FE | (v162 >= v241)) + 1376) + v1039;
        if (v162 < v241)
          v246 = v241;
        else
          v246 = v242;
        *((_DWORD *)this + 683) = v246;
        v1039 = v245;
        if (v244)
        {
          v247 = 0;
          v248 = (uint32x2_t)vsub_s32(v159, (int32x2_t)vmvn_s8((int8x8_t)v156));
          v249 = v158 + v105 - v160.i32[1] - v160.i32[0];
          v116 = COERCE_DOUBLE(vshr_n_s32((int32x2_t)vsra_n_u32(v248, v248, 0x1FuLL), 1uLL));
          if (v249 + 1 >= 0)
            v250 = v249 + 1;
          else
            v250 = v249 + 2;
          v117 = v250 >> 1;
          goto LABEL_394;
        }
LABEL_357:
        v264 = vzip1_s32(v156, *(int32x2_t *)&v116);
        v265 = vzip2_s32(v156, *(int32x2_t *)&v116);
        v247 = 0;
        if (v264.i32[0] * (uint64_t)v264.i32[1] + v117 * (uint64_t)v158 + v265.i32[0] * (uint64_t)v265.i32[1] < 0)
        {
          v116 = COERCE_DOUBLE(vneg_s32(*(int32x2_t *)&v116));
          v117 = -v117;
        }
        goto LABEL_394;
      }
      if ((_DWORD)v119 != -1 && (!v108 || a3[v119]))
      {
        v156 = vsub_s32(*(int32x2_t *)&a2[(int)v119 * (int)v104], v109);
        v170 = vabs_s32(vrev64_s32(v156));
        v158 = v105 - v170.i32[1] - v170.i32[0];
        if (v158 < 0)
          v156 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v156), (int8x8_t)vsub_s32(v170, v109), (int8x8_t)__PAIR64__(v105 - v170.i32[1], v105 - v170.i32[0]));
        v171 = *((_DWORD *)this + 683);
        v172 = *((_DWORD *)this + 684);
        if (v171 >= 0x40000001)
        {
          v175 = *((_DWORD *)this + 683);
LABEL_348:
          v258 = (HIWORD(v175) * (unsigned __int16)v1039) & 0xFFFF0000;
          v259 = v175 - v258;
          if (v172 < v258)
            v260 = 0;
          else
            v260 = (HIWORD(v175) * (unsigned __int16)v1039) & 0xFFFF0000;
          *((_DWORD *)this + 684) = v172 - v260;
          v261 = v172 >= v258;
          v262 = *((unsigned __int16 *)this + ((v1039 >> 7) & 0x1FE | (v172 >= v258)) + 1376) + v1039;
          if (v172 < v258)
            v263 = v258;
          else
            v263 = v259;
          *((_DWORD *)this + 683) = v263;
          v1039 = v262;
          if (v261)
          {
            v247 = 0;
            v117 = v105 - v170.i32[1] - v170.i32[0];
            v116 = *(double *)&v156;
            goto LABEL_394;
          }
          goto LABEL_357;
        }
        v173 = *((_DWORD *)this + 686);
        while (1)
        {
          v172 *= 2;
          *((_DWORD *)this + 686) = --v173;
          if (v173)
            goto LABEL_239;
          v176 = *((_QWORD *)this + 340);
          *((_QWORD *)this + 340) = v176 + 1;
          v177 = *((unsigned int *)this + 676);
          if (v176 + 1 >= v177)
          {
            v178 = 65280;
            v179 = v176 + 2;
            *((_QWORD *)this + 340) = v179;
            if (v179 >= v177)
            {
LABEL_245:
              v174 = 255;
              goto LABEL_238;
            }
          }
          else
          {
            v178 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v176 + 1) << 8;
            v179 = v176 + 2;
            *((_QWORD *)this + 340) = v179;
            if (v179 >= v177)
              goto LABEL_245;
          }
          v174 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v179);
LABEL_238:
          v172 |= v178 | v174;
          v173 = 16;
          *((_DWORD *)this + 686) = 16;
LABEL_239:
          v175 = 2 * v171;
          v84 = v171 >= 0x20000001;
          v171 *= 2;
          if (v84)
            goto LABEL_348;
        }
      }
      v180 = *((_DWORD *)this + 683);
      v181 = *((_DWORD *)this + 684);
      if (v180 >= 0x40000001)
      {
        v184 = *((_DWORD *)this + 683);
LABEL_336:
        v251 = (HIWORD(v184) * (unsigned __int16)v1030) & 0xFFFF0000;
        v252 = v184 - v251;
        if (v181 < v251)
          v253 = 0;
        else
          v253 = (HIWORD(v184) * (unsigned __int16)v1030) & 0xFFFF0000;
        v254 = v181 - v253;
        v255 = COERCE_DOUBLE(vneg_s32(*(int32x2_t *)&v116));
        v256 = v181 >= v251;
        v1030 += *((unsigned __int16 *)this + ((v1030 >> 7) & 0x1FE | (v181 >= v251)) + 1376);
        if (v181 < v251)
          v257 = v251;
        else
          v257 = v252;
        *((_DWORD *)this + 683) = v257;
        *((_DWORD *)this + 684) = v254;
        if (v256)
          v117 = -v117;
        v247 = 0;
        if (v256)
          v116 = v255;
        goto LABEL_394;
      }
      v182 = *((_DWORD *)this + 686);
      while (1)
      {
        v181 *= 2;
        *((_DWORD *)this + 686) = --v182;
        if (v182)
          goto LABEL_250;
        v185 = *((_QWORD *)this + 340);
        *((_QWORD *)this + 340) = v185 + 1;
        v186 = *((unsigned int *)this + 676);
        if (v185 + 1 >= v186)
        {
          v187 = 65280;
          v188 = v185 + 2;
          *((_QWORD *)this + 340) = v188;
          if (v188 >= v186)
          {
LABEL_256:
            v183 = 255;
            goto LABEL_249;
          }
        }
        else
        {
          v187 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v185 + 1) << 8;
          v188 = v185 + 2;
          *((_QWORD *)this + 340) = v188;
          if (v188 >= v186)
            goto LABEL_256;
        }
        v183 = *(unsigned __int8 *)(*((_QWORD *)this + 339) + v188);
LABEL_249:
        v181 |= v187 | v183;
        v182 = 16;
        *((_DWORD *)this + 686) = 16;
LABEL_250:
        v184 = 2 * v180;
        v84 = v180 >= 0x20000001;
        v180 *= 2;
        if (v84)
          goto LABEL_336;
      }
    }
LABEL_166:
    ++v107;
  }
  while (v107 < v103);
LABEL_443:
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (*((_QWORD *)&v1096 + 1))
  {
    *(_QWORD *)&v1097 = *((_QWORD *)&v1096 + 1);
    operator delete(*((void **)&v1096 + 1));
  }
  if ((_QWORD)v1095)
  {
    *((_QWORD *)&v1095 + 1) = v1095;
    operator delete((void *)v1095);
  }
  if (*((_QWORD *)&v1093 + 1))
  {
    *(_QWORD *)&v1094 = *((_QWORD *)&v1093 + 1);
    operator delete(*((void **)&v1093 + 1));
  }
  if ((_QWORD)v1092)
  {
    *((_QWORD *)&v1092 + 1) = v1092;
    operator delete((void *)v1092);
  }
  if (*((_QWORD *)&v1090 + 1))
  {
    *(_QWORD *)&v1091 = *((_QWORD *)&v1090 + 1);
    operator delete(*((void **)&v1090 + 1));
  }
  if ((_QWORD)v1089)
  {
    *((_QWORD *)&v1089 + 1) = v1089;
    operator delete((void *)v1089);
  }
  if (*((_QWORD *)&v1087 + 1))
  {
    *(_QWORD *)&v1088 = *((_QWORD *)&v1087 + 1);
    operator delete(*((void **)&v1087 + 1));
  }
  if ((_QWORD)v1086)
  {
    *((_QWORD *)&v1086 + 1) = v1086;
    operator delete((void *)v1086);
  }
  if (*((_QWORD *)&v1084 + 1))
  {
    *(_QWORD *)&v1085 = *((_QWORD *)&v1084 + 1);
    operator delete(*((void **)&v1084 + 1));
  }
LABEL_463:
  if ((_QWORD)v1083)
  {
    *((_QWORD *)&v1083 + 1) = v1083;
    operator delete((void *)v1083);
  }
  if (*((_QWORD *)&v1081 + 1))
  {
    *(_QWORD *)&v1082 = *((_QWORD *)&v1081 + 1);
    operator delete(*((void **)&v1081 + 1));
  }
  if (v1080[0])
  {
    v1080[1] = v1080[0];
    operator delete(v1080[0]);
  }
  if (v1078[1])
  {
    *(void **)&v1079 = v1078[1];
    operator delete(v1078[1]);
  }
  if ((_QWORD)__b)
  {
    *((_QWORD *)&__b + 1) = __b;
    operator delete((void *)__b);
  }
  v326 = v1074;
  if (v1074)
  {
    v1075 = v1074;
LABEL_1178:
    operator delete(v326);
  }
}

void sub_1885D91EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;

  if (__p)
    operator delete(__p);
  gcl::polyline::ACContext::~ACContext((gcl::polyline::ACContext *)&a69);
  gcl::polyline::ACContext::~ACContext((gcl::polyline::ACContext *)&a54);
  gcl::polyline::ACContext::~ACContext((gcl::polyline::ACContext *)&a39);
  _Unwind_Resume(a1);
}

void gcl::tmesh::DecoderImpl::decodeResidual(uint64_t a1, int32x4_t *a2, uint64_t a3, unsigned int a4, uint64_t *a5, int32x4_t *a6)
{
  uint64_t v8;
  int32x4_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  _WORD *v44;
  unsigned int v45;
  int v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;
  _BOOL4 v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  _BOOL4 v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  unint64_t v81;
  unsigned int v82;
  unsigned int v83;
  _BOOL4 v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  unint64_t v97;
  unsigned int v98;
  unsigned int v99;
  _BOOL4 v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  int v104;
  uint64_t v105;
  unsigned int v106;
  int v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  int v112;
  unint64_t v113;
  unsigned int v114;
  unsigned int v115;
  _BOOL4 v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  uint64_t v121;
  unsigned int v122;
  int v123;
  int v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  int v128;
  unint64_t v129;
  unsigned int v130;
  unsigned int v131;
  _BOOL4 v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  __int32 v138;
  int v139;
  int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  int v145;
  int v146;
  int v147;
  uint64_t v148;
  unint64_t v149;
  int v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unsigned int *v154;
  int v155;
  uint64_t v156;
  int v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  BOOL v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  int v170;
  int v171;
  unsigned int v172;
  uint64_t v173;
  unint64_t v174;
  int v175;
  unint64_t v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  BOOL v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  uint64_t v184;
  unsigned int v185;
  int v186;
  int v187;
  unsigned int v188;
  uint64_t v189;
  unint64_t v190;
  int v191;
  unint64_t v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  _WORD *v197;
  unsigned int v198;
  int v199;
  int v200;
  unsigned int v201;
  uint64_t v202;
  unint64_t v203;
  int v204;
  unint64_t v205;
  unsigned int v206;
  unsigned int v207;
  _BOOL4 v208;
  unsigned int v209;
  unsigned int v210;
  uint64_t v211;
  unsigned int v212;
  int v213;
  int v214;
  unsigned int v215;
  uint64_t v216;
  unint64_t v217;
  int v218;
  unint64_t v219;
  int v220;
  unsigned int v221;
  _BOOL4 v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  uint64_t v226;
  unsigned int v227;
  int v228;
  int v229;
  unsigned int v230;
  uint64_t v231;
  unint64_t v232;
  int v233;
  unint64_t v234;
  unsigned int v235;
  _BOOL4 v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  unsigned int v240;
  uint64_t v241;
  unsigned int v242;
  int v243;
  int v244;
  unsigned int v245;
  uint64_t v246;
  unint64_t v247;
  int v248;
  unint64_t v249;
  unsigned int v250;
  _BOOL4 v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  uint64_t v256;
  unsigned int v257;
  int v258;
  int v259;
  unsigned int v260;
  uint64_t v261;
  unint64_t v262;
  int v263;
  unint64_t v264;
  unsigned int v265;
  _BOOL4 v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  uint64_t v271;
  unsigned int v272;
  int v273;
  int v274;
  unsigned int v275;
  uint64_t v276;
  unint64_t v277;
  int v278;
  unint64_t v279;
  unsigned int v280;
  unsigned int v281;
  _BOOL4 v282;
  unsigned int v283;
  unsigned int v284;
  int v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  int v289;
  uint64_t v290;
  int32x4_t *v291;
  int32x4_t *v292;
  int32x4_t *v293;
  int32x4_t *v294;
  int32x4_t *v295;
  uint64_t v296;
  int32x4_t v297;
  uint64_t v298;
  uint64_t v299;
  __int32 *v300;
  __int32 *v301;
  __int32 *v302;
  int v303;
  int v304;
  int v305;
  int32x4_t *v308;

  v8 = a3;
  if (!(_DWORD)a3)
  {
    v10 = 0;
    goto LABEL_6;
  }
  if ((a3 & 0x80000000) != 0)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v10 = (int32x4_t *)operator new(4 * (int)a3);
  bzero(v10, 4 * (int)v8);
  if (a4 <= 4)
  {
LABEL_6:
    v308 = v10;
    switch(a4)
    {
      case 0u:
        if (!(_DWORD)v8)
          goto LABEL_356;
        v11 = 0;
        while (1)
        {
          v13 = *a5;
          v14 = *(unsigned __int16 *)(*a5 + 2 * v11);
          v15 = *(_DWORD *)(a1 + 2732);
          v16 = *(_DWORD *)(a1 + 2736);
          if (v15 < 0x40000001)
          {
            v17 = *(_DWORD *)(a1 + 2744);
            while (1)
            {
              v16 *= 2;
              *(_DWORD *)(a1 + 2744) = --v17;
              if (v17)
                goto LABEL_17;
              v20 = *(_QWORD *)(a1 + 2720);
              *(_QWORD *)(a1 + 2720) = v20 + 1;
              v21 = *(unsigned int *)(a1 + 2704);
              if (v20 + 1 >= v21)
              {
                v22 = 65280;
                v23 = v20 + 2;
                *(_QWORD *)(a1 + 2720) = v23;
                if (v23 >= v21)
                {
LABEL_23:
                  v18 = 255;
                  goto LABEL_16;
                }
              }
              else
              {
                v22 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v20 + 1) << 8;
                v23 = v20 + 2;
                *(_QWORD *)(a1 + 2720) = v23;
                if (v23 >= v21)
                  goto LABEL_23;
              }
              v18 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v23);
LABEL_16:
              v16 |= v22 | v18;
              v17 = 16;
              *(_DWORD *)(a1 + 2744) = 16;
LABEL_17:
              v19 = 2 * v15;
              v27 = v15 >= 0x20000001;
              v15 *= 2;
              if (v27)
                goto LABEL_25;
            }
          }
          v19 = *(_DWORD *)(a1 + 2732);
LABEL_25:
          v12 = 0;
          v24 = (HIWORD(v19) * v14) & 0xFFFF0000;
          v25 = v16 < v24 ? 0 : (HIWORD(v19) * v14) & 0xFFFF0000;
          v26 = v16 - v25;
          v27 = v16 >= v24;
          v28 = (v14 >> 7) & 0x1FE | (v16 >= v24);
          v29 = v19 - v24;
          *(_WORD *)(v13 + 2 * v11) = *(_WORD *)(a1 + 2 * v28 + 2752) + v14;
          v30 = v27 ? v19 - v24 : (HIWORD(v19) * v14) & 0xFFFF0000;
          *(_DWORD *)(a1 + 2732) = v30;
          *(_DWORD *)(a1 + 2736) = v26;
          if (v27)
            break;
LABEL_12:
          v10->i32[v11++] = v12;
          if (v11 == v8)
            goto LABEL_349;
        }
        v31 = a5[3];
        v32 = *(unsigned __int16 *)(v31 + 2 * v11);
        if (v29 < 0x40000001)
        {
          v33 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v26 *= 2;
            *(_DWORD *)(a1 + 2744) = --v33;
            if (v33)
              goto LABEL_37;
            v36 = *(_QWORD *)(a1 + 2720);
            *(_QWORD *)(a1 + 2720) = v36 + 1;
            v37 = *(unsigned int *)(a1 + 2704);
            if (v36 + 1 >= v37)
            {
              v38 = 65280;
              v39 = v36 + 2;
              *(_QWORD *)(a1 + 2720) = v39;
              if (v39 >= v37)
              {
LABEL_43:
                v34 = 255;
                goto LABEL_36;
              }
            }
            else
            {
              v38 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v36 + 1) << 8;
              v39 = v36 + 2;
              *(_QWORD *)(a1 + 2720) = v39;
              if (v39 >= v37)
                goto LABEL_43;
            }
            v34 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v39);
LABEL_36:
            v26 |= v38 | v34;
            v33 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_37:
            v35 = 2 * v29;
            v27 = v29 >= 0x20000001;
            v29 *= 2;
            if (v27)
              goto LABEL_45;
          }
        }
        v35 = v19 - v24;
LABEL_45:
        v40 = (HIWORD(v35) * v32) & 0xFFFF0000;
        *(_WORD *)(v31 + 2 * v11) = *(_WORD *)(a1 + 2 * ((v32 >> 7) & 0x1FE | (v26 >= v40)) + 2752) + v32;
        if (v26 < v40)
          v41 = (HIWORD(v35) * v32) & 0xFFFF0000;
        else
          v41 = v35 - v40;
        if (v26 < v40)
          v42 = 0;
        else
          v42 = v40;
        v43 = v26 - v42;
        *(_DWORD *)(a1 + 2732) = v41;
        *(_DWORD *)(a1 + 2736) = v26 - v42;
        v44 = (_WORD *)(a5[6] + 2 * (int)((_DWORD)v11 << 6));
        v45 = (unsigned __int16)*v44;
        if (v41 < 0x40000001)
        {
          v46 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v43 *= 2;
            *(_DWORD *)(a1 + 2744) = --v46;
            if (v46)
              goto LABEL_55;
            v49 = *(_QWORD *)(a1 + 2720);
            *(_QWORD *)(a1 + 2720) = v49 + 1;
            v50 = *(unsigned int *)(a1 + 2704);
            if (v49 + 1 >= v50)
            {
              v51 = 65280;
              v52 = v49 + 2;
              *(_QWORD *)(a1 + 2720) = v52;
              if (v52 >= v50)
              {
LABEL_61:
                v47 = 255;
                goto LABEL_54;
              }
            }
            else
            {
              v51 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v49 + 1) << 8;
              v52 = v49 + 2;
              *(_QWORD *)(a1 + 2720) = v52;
              if (v52 >= v50)
                goto LABEL_61;
            }
            v47 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v52);
LABEL_54:
            v43 |= v51 | v47;
            v46 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_55:
            v48 = 2 * v41;
            v27 = v41 >= 0x20000001;
            v41 *= 2;
            if (v27)
              goto LABEL_63;
          }
        }
        v48 = v41;
LABEL_63:
        v53 = (HIWORD(v48) * v45) & 0xFFFF0000;
        v54 = v48 - v53;
        v55 = v43 >= v53;
        *v44 = *(_WORD *)(a1 + 2 * ((v45 >> 7) & 0x1FE | v55) + 2752) + v45;
        if (v43 >= v53)
        {
          v56 = 2;
        }
        else
        {
          v54 = v53;
          v53 = 0;
          v56 = 1;
        }
        v57 = v43 - v53;
        *(_DWORD *)(a1 + 2732) = v54;
        *(_DWORD *)(a1 + 2736) = v57;
        v58 = (unsigned __int16)v44[v56];
        if (v54 < 0x40000001)
        {
          v59 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v57 *= 2;
            *(_DWORD *)(a1 + 2744) = --v59;
            if (v59)
              goto LABEL_70;
            v62 = *(_QWORD *)(a1 + 2720);
            *(_QWORD *)(a1 + 2720) = v62 + 1;
            v63 = *(unsigned int *)(a1 + 2704);
            if (v62 + 1 >= v63)
            {
              v64 = 65280;
              v65 = v62 + 2;
              *(_QWORD *)(a1 + 2720) = v65;
              if (v65 >= v63)
              {
LABEL_76:
                v60 = 255;
                goto LABEL_69;
              }
            }
            else
            {
              v64 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v62 + 1) << 8;
              v65 = v62 + 2;
              *(_QWORD *)(a1 + 2720) = v65;
              if (v65 >= v63)
                goto LABEL_76;
            }
            v60 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v65);
LABEL_69:
            v57 |= v64 | v60;
            v59 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_70:
            v61 = 2 * v54;
            v27 = v54 >= 0x20000001;
            v54 *= 2;
            if (v27)
              goto LABEL_78;
          }
        }
        v61 = v54;
LABEL_78:
        v66 = (HIWORD(v61) * v58) & 0xFFFF0000;
        v67 = v61 - v66;
        v68 = v57 >= v66;
        v44[v56] = *(_WORD *)(a1 + 2 * ((v58 >> 7) & 0x1FE | v68) + 2752) + v58;
        if (v57 < v66)
          v69 = v66;
        else
          v69 = v67;
        if (v57 < v66)
          v70 = 0;
        else
          v70 = v66;
        v71 = v57 - v70;
        *(_DWORD *)(a1 + 2732) = v69;
        *(_DWORD *)(a1 + 2736) = v71;
        v72 = v55 | (2 * v68);
        v73 = (v72 + 3);
        v74 = (unsigned __int16)v44[v73];
        if (v69 < 0x40000001)
        {
          v75 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v71 *= 2;
            *(_DWORD *)(a1 + 2744) = --v75;
            if (v75)
              goto LABEL_88;
            v78 = *(_QWORD *)(a1 + 2720);
            *(_QWORD *)(a1 + 2720) = v78 + 1;
            v79 = *(unsigned int *)(a1 + 2704);
            if (v78 + 1 >= v79)
            {
              v80 = 65280;
              v81 = v78 + 2;
              *(_QWORD *)(a1 + 2720) = v81;
              if (v81 >= v79)
              {
LABEL_94:
                v76 = 255;
                goto LABEL_87;
              }
            }
            else
            {
              v80 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v78 + 1) << 8;
              v81 = v78 + 2;
              *(_QWORD *)(a1 + 2720) = v81;
              if (v81 >= v79)
                goto LABEL_94;
            }
            v76 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v81);
LABEL_87:
            v71 |= v80 | v76;
            v75 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_88:
            v77 = 2 * v69;
            v27 = v69 >= 0x20000001;
            v69 *= 2;
            if (v27)
              goto LABEL_96;
          }
        }
        v77 = v69;
LABEL_96:
        v82 = (HIWORD(v77) * v74) & 0xFFFF0000;
        v83 = v77 - v82;
        v84 = v71 >= v82;
        v44[v73] = *(_WORD *)(a1 + 2 * ((v74 >> 7) & 0x1FE | v84) + 2752) + v74;
        if (v71 < v82)
          v85 = v82;
        else
          v85 = v83;
        if (v71 < v82)
          v86 = 0;
        else
          v86 = v82;
        v87 = v71 - v86;
        *(_DWORD *)(a1 + 2732) = v85;
        *(_DWORD *)(a1 + 2736) = v87;
        v88 = v72 | (4 * v84);
        v89 = (v88 + 7);
        v90 = (unsigned __int16)v44[v89];
        if (v85 < 0x40000001)
        {
          v91 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v87 *= 2;
            *(_DWORD *)(a1 + 2744) = --v91;
            if (v91)
              goto LABEL_106;
            v94 = *(_QWORD *)(a1 + 2720);
            *(_QWORD *)(a1 + 2720) = v94 + 1;
            v95 = *(unsigned int *)(a1 + 2704);
            if (v94 + 1 >= v95)
            {
              v96 = 65280;
              v97 = v94 + 2;
              *(_QWORD *)(a1 + 2720) = v97;
              if (v97 >= v95)
              {
LABEL_112:
                v92 = 255;
                goto LABEL_105;
              }
            }
            else
            {
              v96 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v94 + 1) << 8;
              v97 = v94 + 2;
              *(_QWORD *)(a1 + 2720) = v97;
              if (v97 >= v95)
                goto LABEL_112;
            }
            v92 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v97);
LABEL_105:
            v87 |= v96 | v92;
            v91 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_106:
            v93 = 2 * v85;
            v27 = v85 >= 0x20000001;
            v85 *= 2;
            if (v27)
              goto LABEL_114;
          }
        }
        v93 = v85;
LABEL_114:
        v98 = (HIWORD(v93) * v90) & 0xFFFF0000;
        v99 = v93 - v98;
        v100 = v87 >= v98;
        v44[v89] = *(_WORD *)(a1 + 2 * ((v90 >> 7) & 0x1FE | v100) + 2752) + v90;
        if (v87 < v98)
          v101 = v98;
        else
          v101 = v99;
        if (v87 < v98)
          v102 = 0;
        else
          v102 = v98;
        v103 = v87 - v102;
        *(_DWORD *)(a1 + 2732) = v101;
        *(_DWORD *)(a1 + 2736) = v103;
        v104 = v88 | (8 * v100);
        v105 = (v104 + 15);
        v106 = (unsigned __int16)v44[v105];
        if (v101 < 0x40000001)
        {
          v107 = *(_DWORD *)(a1 + 2744);
          while (1)
          {
            v103 *= 2;
            *(_DWORD *)(a1 + 2744) = --v107;
            if (v107)
              goto LABEL_124;
            v110 = *(_QWORD *)(a1 + 2720);
            *(_QWORD *)(a1 + 2720) = v110 + 1;
            v111 = *(unsigned int *)(a1 + 2704);
            if (v110 + 1 >= v111)
            {
              v112 = 65280;
              v113 = v110 + 2;
              *(_QWORD *)(a1 + 2720) = v113;
              if (v113 >= v111)
              {
LABEL_130:
                v108 = 255;
                goto LABEL_123;
              }
            }
            else
            {
              v112 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v110 + 1) << 8;
              v113 = v110 + 2;
              *(_QWORD *)(a1 + 2720) = v113;
              if (v113 >= v111)
                goto LABEL_130;
            }
            v108 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v113);
LABEL_123:
            v103 |= v112 | v108;
            v107 = 16;
            *(_DWORD *)(a1 + 2744) = 16;
LABEL_124:
            v109 = 2 * v101;
            v27 = v101 >= 0x20000001;
            v101 *= 2;
            if (v27)
              goto LABEL_132;
          }
        }
        v109 = v101;
LABEL_132:
        v114 = (HIWORD(v109) * v106) & 0xFFFF0000;
        v115 = v109 - v114;
        v116 = v103 >= v114;
        v44[v105] = *(_WORD *)(a1 + 2 * ((v106 >> 7) & 0x1FE | v116) + 2752) + v106;
        if (v103 < v114)
          v117 = v114;
        else
          v117 = v115;
        if (v103 < v114)
          v118 = 0;
        else
          v118 = v114;
        v119 = v103 - v118;
        *(_DWORD *)(a1 + 2732) = v117;
        *(_DWORD *)(a1 + 2736) = v119;
        v120 = v104 | (16 * v116);
        v121 = (v120 + 31);
        v122 = (unsigned __int16)v44[v121];
        if (v117 >= 0x40000001)
        {
          v125 = v117;
LABEL_150:
          v130 = (HIWORD(v125) * v122) & 0xFFFF0000;
          v131 = v125 - v130;
          v132 = v119 >= v130;
          v44[v121] = *(_WORD *)(a1 + 2 * ((v122 >> 7) & 0x1FE | v132) + 2752) + v122;
          if (v119 < v130)
            v133 = v130;
          else
            v133 = v131;
          if (v119 < v130)
            v134 = 0;
          else
            v134 = v130;
          *(_DWORD *)(a1 + 2732) = v133;
          *(_DWORD *)(a1 + 2736) = v119 - v134;
          v135 = v120 | (32 * v132);
          if (v135 == 63)
            v135 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)(a1 + 2704), *(_DWORD *)(a5[12] + 4 * v11), (_WORD *)(a5[9] + 2 * v11))+ 63;
          if (v26 >= v40)
            v12 = v135 + 1;
          else
            v12 = ~v135;
          goto LABEL_12;
        }
        v123 = *(_DWORD *)(a1 + 2744);
        while (1)
        {
          v119 *= 2;
          *(_DWORD *)(a1 + 2744) = --v123;
          if (v123)
            goto LABEL_142;
          v126 = *(_QWORD *)(a1 + 2720);
          *(_QWORD *)(a1 + 2720) = v126 + 1;
          v127 = *(unsigned int *)(a1 + 2704);
          if (v126 + 1 >= v127)
          {
            v128 = 65280;
            v129 = v126 + 2;
            *(_QWORD *)(a1 + 2720) = v129;
            if (v129 >= v127)
            {
LABEL_148:
              v124 = 255;
              goto LABEL_141;
            }
          }
          else
          {
            v128 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v126 + 1) << 8;
            v129 = v126 + 2;
            *(_QWORD *)(a1 + 2720) = v129;
            if (v129 >= v127)
              goto LABEL_148;
          }
          v124 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v129);
LABEL_141:
          v119 |= v128 | v124;
          v123 = 16;
          *(_DWORD *)(a1 + 2744) = 16;
LABEL_142:
          v125 = 2 * v117;
          v27 = v117 >= 0x20000001;
          v117 *= 2;
          if (v27)
            goto LABEL_150;
        }
      case 2u:
        if (!(_DWORD)v8)
          goto LABEL_356;
        v152 = 0;
        v153 = 0;
        v154 = (unsigned int *)(a1 + 2704);
        while (1)
        {
          v156 = a5[12];
          v157 = gcl::ArithmeticDecoder::decodeSignedExpGolomb(v154, *(_DWORD *)(v156 + v152), (_WORD *)(a5[3] + v153), (_WORD *)(a5[9] + v153));
          if (v157 >= 0)
            v158 = v157;
          else
            v158 = -v157;
          v159 = *(_DWORD *)(v156 + v152);
          v160 = v158 >> v159;
          if (v159)
            v161 = v160 == 0;
          else
            v161 = 0;
          if (v161)
          {
            v155 = -1;
          }
          else
          {
            if (v160 < 2)
              goto LABEL_183;
            v155 = 1;
          }
          *(_DWORD *)(v156 + v152) = v155 + v159;
LABEL_183:
          v10->i32[v152 / 4] = v157;
          v153 += 2;
          v152 += 4;
          if (2 * v8 == v153)
            goto LABEL_349;
        }
      case 3u:
        if (!(_DWORD)v8)
          goto LABEL_356;
        v136 = 0;
        v137 = *(_QWORD *)(a1 + 2664);
        while (1)
        {
          v139 = *(_DWORD *)(v137 + 4 * v136);
          if (v139 >= 1)
            break;
          v138 = 0;
LABEL_161:
          v10->i32[v136++] = v138;
          if (v136 == v8)
            goto LABEL_349;
        }
        v140 = 0;
        v138 = 0;
        v141 = *(_DWORD *)(a1 + 2732);
        v142 = *(_DWORD *)(a1 + 2736);
        while (v141 >= 0x40000001)
        {
          v143 = v141;
LABEL_165:
          v144 = (v143 >> 1) & 0x7FFF0000;
          v141 = v143 - v144;
          v145 = v142 >= v144;
          if (v142 < v144)
          {
            v141 = v144;
            v144 = 0;
          }
          v142 -= v144;
          *(_DWORD *)(a1 + 2732) = v141;
          *(_DWORD *)(a1 + 2736) = v142;
          v138 += v145 << v140++;
          if (v140 == v139)
            goto LABEL_161;
        }
        v146 = *(_DWORD *)(a1 + 2744);
        while (1)
        {
          v142 *= 2;
          *(_DWORD *)(a1 + 2744) = --v146;
          if (v146)
            goto LABEL_172;
          v148 = *(_QWORD *)(a1 + 2720);
          *(_QWORD *)(a1 + 2720) = v148 + 1;
          v149 = *(unsigned int *)(a1 + 2704);
          if (v148 + 1 >= v149)
          {
            v150 = 65280;
            v151 = v148 + 2;
            *(_QWORD *)(a1 + 2720) = v151;
            if (v151 >= v149)
            {
LABEL_178:
              v147 = 255;
              goto LABEL_171;
            }
          }
          else
          {
            v150 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v148 + 1) << 8;
            v151 = v148 + 2;
            *(_QWORD *)(a1 + 2720) = v151;
            if (v151 >= v149)
              goto LABEL_178;
          }
          v147 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v151);
LABEL_171:
          v142 |= v150 | v147;
          v146 = 16;
          *(_DWORD *)(a1 + 2744) = 16;
LABEL_172:
          v143 = 2 * v141;
          v27 = v141 >= 0x20000001;
          v141 *= 2;
          if (v27)
            goto LABEL_165;
        }
      case 4u:
        if (!(_DWORD)v8)
          goto LABEL_356;
        v162 = 0;
        v163 = v8;
        break;
      default:
        goto LABEL_349;
    }
    while (1)
    {
      v166 = *a5;
      v167 = *(unsigned __int16 *)(*a5 + 2 * v162);
      v168 = *(_DWORD *)(a1 + 2732);
      v169 = *(_DWORD *)(a1 + 2736);
      if (v168 < 0x40000001)
      {
        v170 = *(_DWORD *)(a1 + 2744);
        while (1)
        {
          v169 *= 2;
          *(_DWORD *)(a1 + 2744) = --v170;
          if (v170)
            goto LABEL_205;
          v173 = *(_QWORD *)(a1 + 2720);
          *(_QWORD *)(a1 + 2720) = v173 + 1;
          v174 = *(unsigned int *)(a1 + 2704);
          if (v173 + 1 >= v174)
          {
            v175 = 65280;
            v176 = v173 + 2;
            *(_QWORD *)(a1 + 2720) = v176;
            if (v176 >= v174)
            {
LABEL_211:
              v171 = 255;
              goto LABEL_204;
            }
          }
          else
          {
            v175 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v173 + 1) << 8;
            v176 = v173 + 2;
            *(_QWORD *)(a1 + 2720) = v176;
            if (v176 >= v174)
              goto LABEL_211;
          }
          v171 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v176);
LABEL_204:
          v169 |= v175 | v171;
          v170 = 16;
          *(_DWORD *)(a1 + 2744) = 16;
LABEL_205:
          v172 = 2 * v168;
          v27 = v168 >= 0x20000001;
          v168 *= 2;
          if (v27)
            goto LABEL_213;
        }
      }
      v172 = *(_DWORD *)(a1 + 2732);
LABEL_213:
      v165 = 0;
      v177 = (HIWORD(v172) * v167) & 0xFFFF0000;
      v178 = v169 < v177 ? 0 : (HIWORD(v172) * v167) & 0xFFFF0000;
      v179 = v169 - v178;
      v180 = v169 >= v177;
      v181 = (v167 >> 7) & 0x1FE | (v169 >= v177);
      v182 = v172 - v177;
      *(_WORD *)(v166 + 2 * v162) = *(_WORD *)(a1 + 2 * v181 + 2752) + v167;
      v183 = v180 ? v172 - v177 : (HIWORD(v172) * v167) & 0xFFFF0000;
      *(_DWORD *)(a1 + 2732) = v183;
      *(_DWORD *)(a1 + 2736) = v179;
      if (v180)
        break;
LABEL_200:
      v10->i32[v162++] = v165;
      if (v162 == v163)
        goto LABEL_349;
    }
    v184 = a5[3];
    v185 = *(unsigned __int16 *)(v184 + 2 * v162);
    if (v182 < 0x40000001)
    {
      v186 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v179 *= 2;
        *(_DWORD *)(a1 + 2744) = --v186;
        if (v186)
          goto LABEL_225;
        v189 = *(_QWORD *)(a1 + 2720);
        *(_QWORD *)(a1 + 2720) = v189 + 1;
        v190 = *(unsigned int *)(a1 + 2704);
        if (v189 + 1 >= v190)
        {
          v191 = 65280;
          v192 = v189 + 2;
          *(_QWORD *)(a1 + 2720) = v192;
          if (v192 >= v190)
          {
LABEL_231:
            v187 = 255;
            goto LABEL_224;
          }
        }
        else
        {
          v191 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v189 + 1) << 8;
          v192 = v189 + 2;
          *(_QWORD *)(a1 + 2720) = v192;
          if (v192 >= v190)
            goto LABEL_231;
        }
        v187 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v192);
LABEL_224:
        v179 |= v191 | v187;
        v186 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_225:
        v188 = 2 * v182;
        v27 = v182 >= 0x20000001;
        v182 *= 2;
        if (v27)
          goto LABEL_233;
      }
    }
    v188 = v172 - v177;
LABEL_233:
    v193 = (HIWORD(v188) * v185) & 0xFFFF0000;
    *(_WORD *)(v184 + 2 * v162) = *(_WORD *)(a1 + 2 * ((v185 >> 7) & 0x1FE | (v179 >= v193)) + 2752) + v185;
    if (v179 < v193)
      v194 = (HIWORD(v188) * v185) & 0xFFFF0000;
    else
      v194 = v188 - v193;
    if (v179 < v193)
      v195 = 0;
    else
      v195 = (HIWORD(v188) * v185) & 0xFFFF0000;
    v196 = v179 - v195;
    *(_DWORD *)(a1 + 2732) = v194;
    *(_DWORD *)(a1 + 2736) = v179 - v195;
    v197 = (_WORD *)(a5[6] + 2 * (int)((_DWORD)v162 << 6));
    v198 = (unsigned __int16)*v197;
    if (v194 < 0x40000001)
    {
      v199 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v196 *= 2;
        *(_DWORD *)(a1 + 2744) = --v199;
        if (v199)
          goto LABEL_243;
        v202 = *(_QWORD *)(a1 + 2720);
        *(_QWORD *)(a1 + 2720) = v202 + 1;
        v203 = *(unsigned int *)(a1 + 2704);
        if (v202 + 1 >= v203)
        {
          v204 = 65280;
          v205 = v202 + 2;
          *(_QWORD *)(a1 + 2720) = v205;
          if (v205 >= v203)
          {
LABEL_249:
            v200 = 255;
            goto LABEL_242;
          }
        }
        else
        {
          v204 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v202 + 1) << 8;
          v205 = v202 + 2;
          *(_QWORD *)(a1 + 2720) = v205;
          if (v205 >= v203)
            goto LABEL_249;
        }
        v200 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v205);
LABEL_242:
        v196 |= v204 | v200;
        v199 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_243:
        v201 = 2 * v194;
        v27 = v194 >= 0x20000001;
        v194 *= 2;
        if (v27)
          goto LABEL_251;
      }
    }
    v201 = v194;
LABEL_251:
    v206 = (HIWORD(v201) * v198) & 0xFFFF0000;
    v207 = v201 - v206;
    v208 = v196 >= v206;
    *v197 = *(_WORD *)(a1 + 2 * ((v198 >> 7) & 0x1FE | v208) + 2752) + v198;
    if (v196 >= v206)
    {
      v209 = v206;
    }
    else
    {
      v207 = v206;
      v209 = 0;
    }
    v210 = v196 - v209;
    *(_DWORD *)(a1 + 2732) = v207;
    *(_DWORD *)(a1 + 2736) = v210;
    v211 = (v208 & 0x7FFFFFFu) + 1;
    v212 = (unsigned __int16)v197[v211];
    if (v207 < 0x40000001)
    {
      v213 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v210 *= 2;
        *(_DWORD *)(a1 + 2744) = --v213;
        if (v213)
          goto LABEL_258;
        v216 = *(_QWORD *)(a1 + 2720);
        *(_QWORD *)(a1 + 2720) = v216 + 1;
        v217 = *(unsigned int *)(a1 + 2704);
        if (v216 + 1 >= v217)
        {
          v218 = 65280;
          v219 = v216 + 2;
          *(_QWORD *)(a1 + 2720) = v219;
          if (v219 >= v217)
          {
LABEL_264:
            v214 = 255;
            goto LABEL_257;
          }
        }
        else
        {
          v218 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v216 + 1) << 8;
          v219 = v216 + 2;
          *(_QWORD *)(a1 + 2720) = v219;
          if (v219 >= v217)
            goto LABEL_264;
        }
        v214 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v219);
LABEL_257:
        v210 |= v218 | v214;
        v213 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_258:
        v215 = 2 * v207;
        v27 = v207 >= 0x20000001;
        v207 *= 2;
        if (v27)
          goto LABEL_266;
      }
    }
    v215 = v207;
LABEL_266:
    v220 = 32 * v208;
    v221 = (HIWORD(v215) * v212) & 0xFFFF0000;
    v222 = v210 >= v221;
    v197[v211] = *(_WORD *)(a1 + 2 * ((v212 >> 7) & 0x1FE | v222) + 2752) + v212;
    if (v210 < v221)
      v223 = (HIWORD(v215) * v212) & 0xFFFF0000;
    else
      v223 = v215 - v221;
    if (v210 < v221)
      v221 = 0;
    v224 = v210 - v221;
    *(_DWORD *)(a1 + 2732) = v223;
    *(_DWORD *)(a1 + 2736) = v224;
    v225 = v220 | (16 * v222);
    v226 = (v225 >> 4) + 3;
    v227 = (unsigned __int16)v197[v226];
    if (v223 < 0x40000001)
    {
      v228 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v224 *= 2;
        *(_DWORD *)(a1 + 2744) = --v228;
        if (v228)
          goto LABEL_275;
        v231 = *(_QWORD *)(a1 + 2720);
        *(_QWORD *)(a1 + 2720) = v231 + 1;
        v232 = *(unsigned int *)(a1 + 2704);
        if (v231 + 1 >= v232)
        {
          v233 = 65280;
          v234 = v231 + 2;
          *(_QWORD *)(a1 + 2720) = v234;
          if (v234 >= v232)
          {
LABEL_281:
            v229 = 255;
            goto LABEL_274;
          }
        }
        else
        {
          v233 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v231 + 1) << 8;
          v234 = v231 + 2;
          *(_QWORD *)(a1 + 2720) = v234;
          if (v234 >= v232)
            goto LABEL_281;
        }
        v229 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v234);
LABEL_274:
        v224 |= v233 | v229;
        v228 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_275:
        v230 = 2 * v223;
        v27 = v223 >= 0x20000001;
        v223 *= 2;
        if (v27)
          goto LABEL_283;
      }
    }
    v230 = v223;
LABEL_283:
    v235 = (HIWORD(v230) * v227) & 0xFFFF0000;
    v236 = v224 >= v235;
    v197[v226] = *(_WORD *)(a1 + 2 * ((v227 >> 7) & 0x1FE | v236) + 2752) + v227;
    if (v224 < v235)
      v237 = (HIWORD(v230) * v227) & 0xFFFF0000;
    else
      v237 = v230 - v235;
    if (v224 < v235)
      v238 = 0;
    else
      v238 = (HIWORD(v230) * v227) & 0xFFFF0000;
    v239 = v224 - v238;
    *(_DWORD *)(a1 + 2732) = v237;
    *(_DWORD *)(a1 + 2736) = v239;
    v240 = v225 | (8 * v236);
    v241 = (v240 >> 3) + 7;
    v242 = (unsigned __int16)v197[v241];
    if (v237 < 0x40000001)
    {
      v243 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v239 *= 2;
        *(_DWORD *)(a1 + 2744) = --v243;
        if (v243)
          goto LABEL_293;
        v246 = *(_QWORD *)(a1 + 2720);
        *(_QWORD *)(a1 + 2720) = v246 + 1;
        v247 = *(unsigned int *)(a1 + 2704);
        if (v246 + 1 >= v247)
        {
          v248 = 65280;
          v249 = v246 + 2;
          *(_QWORD *)(a1 + 2720) = v249;
          if (v249 >= v247)
          {
LABEL_299:
            v244 = 255;
            goto LABEL_292;
          }
        }
        else
        {
          v248 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v246 + 1) << 8;
          v249 = v246 + 2;
          *(_QWORD *)(a1 + 2720) = v249;
          if (v249 >= v247)
            goto LABEL_299;
        }
        v244 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v249);
LABEL_292:
        v239 |= v248 | v244;
        v243 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_293:
        v245 = 2 * v237;
        v27 = v237 >= 0x20000001;
        v237 *= 2;
        if (v27)
          goto LABEL_301;
      }
    }
    v245 = v237;
LABEL_301:
    v250 = (HIWORD(v245) * v242) & 0xFFFF0000;
    v251 = v239 >= v250;
    v197[v241] = *(_WORD *)(a1 + 2 * ((v242 >> 7) & 0x1FE | v251) + 2752) + v242;
    if (v239 < v250)
      v252 = (HIWORD(v245) * v242) & 0xFFFF0000;
    else
      v252 = v245 - v250;
    if (v239 < v250)
      v253 = 0;
    else
      v253 = (HIWORD(v245) * v242) & 0xFFFF0000;
    v254 = v239 - v253;
    *(_DWORD *)(a1 + 2732) = v252;
    *(_DWORD *)(a1 + 2736) = v254;
    v255 = v240 | (4 * v251);
    v256 = (v255 >> 2) + 15;
    v257 = (unsigned __int16)v197[v256];
    if (v252 < 0x40000001)
    {
      v258 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v254 *= 2;
        *(_DWORD *)(a1 + 2744) = --v258;
        if (v258)
          goto LABEL_311;
        v261 = *(_QWORD *)(a1 + 2720);
        *(_QWORD *)(a1 + 2720) = v261 + 1;
        v262 = *(unsigned int *)(a1 + 2704);
        if (v261 + 1 >= v262)
        {
          v263 = 65280;
          v264 = v261 + 2;
          *(_QWORD *)(a1 + 2720) = v264;
          if (v264 >= v262)
          {
LABEL_317:
            v259 = 255;
            goto LABEL_310;
          }
        }
        else
        {
          v263 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v261 + 1) << 8;
          v264 = v261 + 2;
          *(_QWORD *)(a1 + 2720) = v264;
          if (v264 >= v262)
            goto LABEL_317;
        }
        v259 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v264);
LABEL_310:
        v254 |= v263 | v259;
        v258 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_311:
        v260 = 2 * v252;
        v27 = v252 >= 0x20000001;
        v252 *= 2;
        if (v27)
          goto LABEL_319;
      }
    }
    v260 = v252;
LABEL_319:
    v265 = (HIWORD(v260) * v257) & 0xFFFF0000;
    v266 = v254 >= v265;
    v197[v256] = *(_WORD *)(a1 + 2 * ((v257 >> 7) & 0x1FE | v266) + 2752) + v257;
    if (v254 < v265)
      v267 = (HIWORD(v260) * v257) & 0xFFFF0000;
    else
      v267 = v260 - v265;
    if (v254 < v265)
      v268 = 0;
    else
      v268 = (HIWORD(v260) * v257) & 0xFFFF0000;
    v269 = v254 - v268;
    *(_DWORD *)(a1 + 2732) = v267;
    *(_DWORD *)(a1 + 2736) = v269;
    v270 = v255 | (2 * v266);
    v271 = (v270 >> 1) + 31;
    v272 = (unsigned __int16)v197[v271];
    if (v267 < 0x40000001)
    {
      v273 = *(_DWORD *)(a1 + 2744);
      while (1)
      {
        v269 *= 2;
        *(_DWORD *)(a1 + 2744) = --v273;
        if (v273)
          goto LABEL_329;
        v276 = *(_QWORD *)(a1 + 2720);
        *(_QWORD *)(a1 + 2720) = v276 + 1;
        v277 = *(unsigned int *)(a1 + 2704);
        if (v276 + 1 >= v277)
        {
          v278 = 65280;
          v279 = v276 + 2;
          *(_QWORD *)(a1 + 2720) = v279;
          if (v279 >= v277)
          {
LABEL_335:
            v274 = 255;
            goto LABEL_328;
          }
        }
        else
        {
          v278 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v276 + 1) << 8;
          v279 = v276 + 2;
          *(_QWORD *)(a1 + 2720) = v279;
          if (v279 >= v277)
            goto LABEL_335;
        }
        v274 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 2712) + v279);
LABEL_328:
        v269 |= v278 | v274;
        v273 = 16;
        *(_DWORD *)(a1 + 2744) = 16;
LABEL_329:
        v275 = 2 * v267;
        v27 = v267 >= 0x20000001;
        v267 *= 2;
        if (v27)
          goto LABEL_337;
      }
    }
    v275 = v267;
LABEL_337:
    v280 = (HIWORD(v275) * v272) & 0xFFFF0000;
    v281 = v275 - v280;
    v282 = v269 >= v280;
    v197[v271] = *(_WORD *)(a1 + 2 * ((v272 >> 7) & 0x1FE | v282) + 2752) + v272;
    if (v269 < v280)
      v283 = v280;
    else
      v283 = v281;
    if (v269 < v280)
      v284 = 0;
    else
      v284 = v280;
    *(_DWORD *)(a1 + 2732) = v283;
    *(_DWORD *)(a1 + 2736) = v269 - v284;
    v285 = v270 | v282;
    if ((v270 | v282) == 0x3F)
    {
      v286 = v8;
      v287 = a5[12];
      v285 = gcl::ArithmeticDecoder::decodeExpGolomb((unsigned int *)(a1 + 2704), *(_DWORD *)(v287 + 4 * v162), (_WORD *)(a5[9] + 2 * v162))+ 63;
      v288 = *(_DWORD *)(v287 + 4 * v162);
      v289 = v285 >> v288;
      if (v288 && !v289)
      {
        v164 = -1;
LABEL_196:
        *(_DWORD *)(v287 + 4 * v162) = v164 + v288;
        v8 = v286;
        v10 = v308;
        goto LABEL_197;
      }
      if (v289 >= 2)
      {
        v164 = 1;
        goto LABEL_196;
      }
      v8 = v286;
      v10 = v308;
    }
LABEL_197:
    if (v179 >= v193)
      v165 = v285 + 1;
    else
      v165 = ~v285;
    goto LABEL_200;
  }
LABEL_349:
  if ((int)v8 >= 1)
  {
    v290 = 0;
    if (v8 < 8)
    {
      v292 = a6;
      v291 = a2;
    }
    else
    {
      v292 = a6;
      v291 = a2;
      if ((unint64_t)((char *)a6 - (char *)a2) >= 0x20)
      {
        v290 = v8 & 0x7FFFFFF8;
        v293 = a2 + 1;
        v294 = v10 + 1;
        v295 = a6 + 1;
        v296 = v8 & 0xFFFFFFF8;
        do
        {
          v297 = vaddq_s32(*v294, *v293);
          v295[-1] = vaddq_s32(v294[-1], v293[-1]);
          *v295 = v297;
          v293 += 2;
          v294 += 2;
          v295 += 2;
          v296 -= 8;
        }
        while (v296);
        if (v290 == v8)
          goto LABEL_361;
      }
    }
    v298 = v8 - v290;
    v299 = v290;
    v300 = &v292->i32[v290];
    v301 = &v10->i32[v299];
    v302 = &v291->i32[v299];
    do
    {
      v304 = *v302++;
      v303 = v304;
      v305 = *v301++;
      *v300++ = v305 + v303;
      --v298;
    }
    while (v298);
LABEL_361:
    operator delete(v10);
    return;
  }
LABEL_356:
  if (v10)
    goto LABEL_361;
}

void sub_1885DA784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void geo::DbReaderTarFileDescriptor::createMemoryBuffer(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  unsigned __int8 *v8;
  unint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  int v28;
  void *__p;
  uint64_t v30;
  uint64_t v31;

  v8 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(a1 + 5, a2);
  v9 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 13), (uint64_t)a2);
  v10 = (int8x8_t)a1[11];
  if (!*(_QWORD *)&v10)
    goto LABEL_18;
  v11 = v9;
  v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    v14 = v9;
    if (v9 >= *(_QWORD *)&v10)
      v14 = v9 % *(_QWORD *)&v10;
  }
  else
  {
    v14 = (*(_QWORD *)&v10 - 1) & v9;
  }
  v15 = *(unsigned __int8 ***)(a1[10] + 8 * v14);
  if (!v15)
    goto LABEL_18;
  v16 = *v15;
  if (!*v15)
    goto LABEL_18;
  v17 = (uint64_t)(a1 + 14);
  while (1)
  {
    v18 = *((_QWORD *)v16 + 1);
    if (v11 == v18)
      break;
    if (v13 > 1)
    {
      if (v18 >= *(_QWORD *)&v10)
        v18 %= *(_QWORD *)&v10;
    }
    else
    {
      v18 &= *(_QWORD *)&v10 - 1;
    }
    if (v18 != v14)
      goto LABEL_18;
LABEL_17:
    v16 = *(unsigned __int8 **)v16;
    if (!v16)
      goto LABEL_18;
  }
  if ((std::equal_to<std::string>::operator()[abi:ne180100](v17, v16 + 16, a2) & 1) == 0)
    goto LABEL_17;
  if (!v8)
  {
LABEL_18:
    LOBYTE(v25) = 1;
    HIDWORD(v25) = 0;
    v26 = "";
    v27 = 0;
    gloria::Status::Status(a5, 1, (uint64_t)&v25);
    return;
  }
  v26 = 0;
  v27 = 0;
  v28 = -1;
  v30 = 0;
  v31 = 0;
  __p = 0;
  v25 = *((_QWORD *)v8 + 5);
  v19 = v25;
  v20 = (**(uint64_t (***)(_QWORD))*a4)(*a4);
  v21 = *((_QWORD *)v16 + 5);
  v26 = (const char *)v20;
  v27 = v21;
  v22 = operator new();
  *(_QWORD *)(v22 + 16) = v20;
  *(_QWORD *)(v22 + 24) = v21;
  *(_DWORD *)(v22 + 32) = -1;
  *(_QWORD *)(v22 + 48) = 0;
  *(_QWORD *)(v22 + 56) = 0;
  *(_QWORD *)(v22 + 40) = 0;
  *(_QWORD *)v22 = &off_1E1BF69B8;
  *(_QWORD *)(v22 + 8) = v19;
  *a3 = v22;
  (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*a4 + 16))(*a4, &v25);
  if (SHIBYTE(v31) < 0)
    operator delete(__p);
}

void sub_1885DA9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1885DAB24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void gloria::ShardPool::Close(gloria::ShardPool *this@<X0>, std::string *a2@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  BOOL v9;
  std::string v10;
  char v11;

  v10.__r_.__value_.__s.__data_[0] = 1;
  HIDWORD(v10.__r_.__value_.__r.__words[0]) = 0;
  v10.__r_.__value_.__l.__size_ = (std::string::size_type)&str_5;
  v10.__r_.__value_.__r.__words[2] = 0;
  gloria::Status::Status((uint64_t)a2, 0, (uint64_t)&v10);
  v6 = *(char **)this;
  v4 = (char *)this + 8;
  v5 = v6;
  if (v6 != v4)
  {
    do
    {
      gloria::Shard::Close((gloria::Shard *)(v5 + 40), &v10);
      if (LODWORD(v10.__r_.__value_.__l.__data_))
        gloria::Status::operator=(a2, (uint64_t)&v10);
      if (v11 < 0)
        operator delete((void *)v10.__r_.__value_.__l.__size_);
      v7 = (char *)*((_QWORD *)v5 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)*((_QWORD *)v5 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v4);
  }
}

void sub_1885DAC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 31) < 0)
    operator delete(*(void **)(v15 + 8));
  _Unwind_Resume(exception_object);
}

void gloria::Shard::Close(gloria::Shard *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p;
  uint64_t v10;
  char v11;

  LOBYTE(v8) = 1;
  HIDWORD(v8) = 0;
  __p = &str_5;
  v10 = 0;
  gloria::Status::Status((uint64_t)a2, 0, (uint64_t)&v8);
  if (*(_QWORD *)this)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)this + 24))(&v8);
    if (*(_QWORD *)this)
      (*(void (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
    *(_QWORD *)this = 0;
    if ((_DWORD)v8)
      gloria::Status::operator=(a2, (uint64_t)&v8);
    if (v11 < 0)
      operator delete(__p);
  }
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 24))(&v8);
    v5 = *((_QWORD *)this + 1);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    *((_QWORD *)this + 1) = 0;
    if ((_DWORD)v8 && LODWORD(a2->__r_.__value_.__l.__data_))
      gloria::Status::operator=(a2, (uint64_t)&v8);
    if (v11 < 0)
      operator delete(__p);
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v6 + 24))(&v8);
    v7 = *((_QWORD *)this + 2);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    *((_QWORD *)this + 2) = 0;
    if ((_DWORD)v8 && LODWORD(a2->__r_.__value_.__l.__data_))
      gloria::Status::operator=(a2, (uint64_t)&v8);
    if (v11 < 0)
      operator delete(__p);
  }
}

void sub_1885DAD94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 31) < 0)
    operator delete(*(void **)(v15 + 8));
  _Unwind_Resume(exception_object);
}

void gloria::MmapMemoryBuffer::~MmapMemoryBuffer(gloria::MmapMemoryBuffer *this)
{
  gloria::MmapMemoryBuffer::~MmapMemoryBuffer(this);
  JUMPOUT(0x18D76437CLL);
}

{
  *(_QWORD *)this = &off_1E1BF71C8;
  std::unique_ptr<gloria::MemoryMappedFile>::reset[abi:ne180100]((void ***)this + 8, 0);
  *(_QWORD *)this = &unk_1E1BF7248;
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
}

void gloria::MemoryMappedFile::~MemoryMappedFile(void **this)
{
  uint64_t v2;
  void *__p;
  char v4;

  if (*((_DWORD *)this + 6) != -1)
  {
    gloria::MemoryMappedFile::UnMap((gloria::MemoryMappedFile *)this, (uint64_t)&v2);
    if (v4 < 0)
      operator delete(__p);
  }
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
}

void gloria::MmapMemoryBuffer::Close(gloria::MemoryMappedFile **this@<X0>, std::string *a2@<X8>)
{
  gloria::MemoryMappedFile::Close(this[8], a2);
}

void gloria::MemoryMappedFile::Close(gloria::MemoryMappedFile *this@<X0>, std::string *a2@<X8>)
{
  _BYTE v4[4];
  int v5;
  void *__p;
  uint64_t v7;
  char v8;

  v4[0] = 1;
  v5 = 0;
  __p = "could not unmap mmap file";
  v7 = 25;
  gloria::Status::Status((uint64_t)a2, 7, (uint64_t)v4);
  if (*((_DWORD *)this + 6) != -1)
  {
    gloria::MemoryMappedFile::UnMap(this, (uint64_t)v4);
    gloria::Status::operator=(a2, (uint64_t)v4);
    if (v8 < 0)
      operator delete(__p);
  }
}

void sub_1885DAF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 31) < 0)
    operator delete(*(void **)(v15 + 8));
  _Unwind_Resume(exception_object);
}

void gloria::MemoryMappedFile::UnMap(gloria::MemoryMappedFile *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  _QWORD *v6;
  const char *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int *v12;
  char *v13;
  size_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  std::string *v17;
  __int128 v18;
  void *v19;
  void **v20;
  int v21;
  int v22;
  _QWORD *v23;
  const char *v24;
  size_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  int *v29;
  char *v30;
  size_t v31;
  _QWORD *v32;
  const std::locale::facet *v33;
  std::string *v34;
  __int128 v35;
  std::string v36;
  void *__p[2];
  int64_t v38;
  std::locale v39;
  const char *v40;
  void *v41;

  if (*((_DWORD *)this + 14) == 1 && (v4 = munlock(*(const void **)this, *((_QWORD *)this + 2))) != 0)
  {
    v5 = v4;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"munlock() failed to unlock file: ", 33);
    v7 = (char *)this + 32;
    if (*((char *)this + 55) < 0)
      v7 = *(const char **)v7;
    v8 = strlen(v7);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"; size_=", 8);
    v10 = (_QWORD *)std::ostream::operator<<();
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; error=", 8);
    v12 = __error();
    v13 = strerror(*v12);
    v14 = strlen(v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
    v16 = std::locale::use_facet(&v39, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    std::to_string(&v36, v5);
    v17 = std::string::insert(&v36, 0, "could not munlock file, munlock error code: ");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v38 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    LOBYTE(v39.__locale_) = 1;
    v19 = (void *)HIBYTE(v38);
    v20 = __p;
    if (v38 < 0)
      v20 = (void **)__p[0];
    HIDWORD(v39.__locale_) = 0;
    if (v38 < 0)
      v19 = __p[1];
  }
  else
  {
    v21 = munmap(*(void **)this, *((_QWORD *)this + 2));
    if (!v21)
    {
      close(*((_DWORD *)this + 6));
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 6) = -1;
      *((_QWORD *)this + 2) = -1;
      LOBYTE(v39.__locale_) = 1;
      HIDWORD(v39.__locale_) = 0;
      v40 = "";
      v41 = 0;
      gloria::Status::Status(a2, 0, (uint64_t)&v39);
      return;
    }
    v22 = v21;
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"munmap() failed to unmap file: ", 31);
    v24 = (char *)this + 32;
    if (*((char *)this + 55) < 0)
      v24 = *(const char **)v24;
    v25 = strlen(v24);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"; size_=", 8);
    v27 = (_QWORD *)std::ostream::operator<<();
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"; error=", 8);
    v29 = __error();
    v30 = strerror(*v29);
    v31 = strlen(v30);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v30, v31);
    std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(_QWORD *)(*v32 - 24)));
    v33 = std::locale::use_facet(&v39, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
    std::locale::~locale(&v39);
    std::ostream::put();
    std::ostream::flush();
    std::to_string(&v36, v22);
    v34 = std::string::insert(&v36, 0, "could not unmap file, unmap error code: ");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v38 = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    LOBYTE(v39.__locale_) = 1;
    v19 = (void *)HIBYTE(v38);
    v20 = __p;
    if (v38 < 0)
      v20 = (void **)__p[0];
    HIDWORD(v39.__locale_) = 0;
    if (v38 < 0)
      v19 = __p[1];
  }
  v40 = (const char *)v20;
  v41 = v19;
  gloria::Status::Status(a2, 7, (uint64_t)&v39);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
}

void sub_1885DB30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::locale a22)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void gloria::ShardPool::Initialize(uint64_t a1, uint64_t **a2, uint64_t **a3, _DWORD *a4, int *a5, char *a6)
{
  char *v6;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t **v12;
  std::string::size_type v13;
  std::string::size_type size;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t *v19;
  BOOL v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t **v27;
  int v28;
  char v29;
  int v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  int data;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  int v70;
  uint64_t **v71;
  uint64_t *v72;
  uint64_t **v73;
  int v74;
  char *v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t **v90;
  std::string::size_type v91;
  char v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t **v104;
  uint64_t **v106;
  uint64_t **v108;
  std::string v111;
  __int128 v112;
  _BYTE v113[96];
  uint64_t v114;
  std::__shared_weak_count *v115;
  uint64_t v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  char v120[8];
  void *v121;
  char v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  std::string v128;
  std::string v129;
  std::string v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  _BYTE v137[16];
  std::__shared_weak_count *v138;
  void *v139;
  char v140;
  void *v141;
  char v142;
  void *v143;
  uint64_t v144;
  unsigned __int8 v145;
  std::string v146;
  uint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  uint64_t v152;
  std::__shared_weak_count *v153;
  std::string v154;
  uint64_t v155;
  std::__shared_weak_count *v156;
  uint64_t *v157;
  uint64_t **v158;
  uint64_t v159;
  char v160;

  v6 = a6;
  v8 = a2 + 3;
  if (a2 + 3 != a3)
  {
    v10 = (uint64_t *)(a3 + 1);
    v9 = *a3;
    if (a2[5])
    {
      v12 = a2 + 4;
      v11 = a2[4];
      v13 = (std::string::size_type)a2[3];
      a2[3] = (uint64_t *)(a2 + 4);
      v11[2] = 0;
      a2[4] = 0;
      a2[5] = 0;
      if (*(_QWORD *)(v13 + 8))
        size = *(_QWORD *)(v13 + 8);
      else
        size = v13;
      v111.__r_.__value_.__r.__words[0] = (std::string::size_type)(a2 + 3);
      v111.__r_.__value_.__l.__size_ = size;
      v111.__r_.__value_.__r.__words[2] = size;
      if (!size
        || (v111.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<std::__value_type<int,gloria::ShardInfo>,std::__map_value_compare<int,std::__value_type<int,gloria::ShardInfo>,std::less<int>,true>,std::allocator<std::__value_type<int,gloria::ShardInfo>>>::_DetachedTreeCache::__detach_next(size),
            v9 == v10))
      {
        v19 = v9;
      }
      else
      {
        do
        {
          *(_DWORD *)(size + 32) = *((_DWORD *)v9 + 8);
          *(_DWORD *)(size + 40) = *((_DWORD *)v9 + 10);
          std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::operator=[abi:ne180100]((_QWORD *)(size + 48), v9 + 6);
          std::string::operator=((std::string *)(size + 64), (const std::string *)(v9 + 8));
          std::string::operator=((std::string *)(size + 88), (const std::string *)(v9 + 11));
          std::string::operator=((std::string *)(size + 112), (const std::string *)(v9 + 14));
          v15 = *v12;
          v16 = a2 + 4;
          v17 = a2 + 4;
          if (*v12)
          {
            do
            {
              while (1)
              {
                v16 = (uint64_t **)v15;
                if (*(_DWORD *)(v111.__r_.__value_.__r.__words[2] + 32) >= *((_DWORD *)v15 + 8))
                  break;
                v15 = (uint64_t *)*v15;
                v17 = v16;
                if (!*v16)
                  goto LABEL_14;
              }
              v15 = (uint64_t *)v15[1];
            }
            while (v15);
            v17 = v16 + 1;
          }
LABEL_14:
          std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at(v8, (uint64_t)v16, v17, (uint64_t *)v111.__r_.__value_.__r.__words[2]);
          size = v111.__r_.__value_.__l.__size_;
          v111.__r_.__value_.__r.__words[2] = v111.__r_.__value_.__l.__size_;
          if (v111.__r_.__value_.__l.__size_)
            v111.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<std::__value_type<int,gloria::ShardInfo>,std::__map_value_compare<int,std::__value_type<int,gloria::ShardInfo>,std::less<int>,true>,std::allocator<std::__value_type<int,gloria::ShardInfo>>>::_DetachedTreeCache::__detach_next(v111.__r_.__value_.__l.__size_);
          v18 = (uint64_t *)v9[1];
          if (v18)
          {
            do
            {
              v19 = v18;
              v18 = (uint64_t *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v19 = (uint64_t *)v9[2];
              v20 = *v19 == (_QWORD)v9;
              v9 = v19;
            }
            while (!v20);
          }
          if (!size)
            break;
          v9 = v19;
        }
        while (v19 != v10);
      }
      std::__tree<std::__value_type<int,gloria::ShardInfo>,std::__map_value_compare<int,std::__value_type<int,gloria::ShardInfo>,std::less<int>,true>,std::allocator<std::__value_type<int,gloria::ShardInfo>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v111);
      v9 = v19;
      v6 = a6;
    }
    if (v9 != v10)
    {
      v21 = a2 + 4;
      do
      {
        std::__tree<std::__value_type<int,gloria::ShardInfo>,std::__map_value_compare<int,std::__value_type<int,gloria::ShardInfo>,std::less<int>,true>,std::allocator<std::__value_type<int,gloria::ShardInfo>>>::__construct_node<std::pair<int const,gloria::ShardInfo> const&>((uint64_t)&v111, (uint64_t)v8, (_DWORD *)v9 + 8);
        v22 = *v21;
        v23 = a2 + 4;
        v24 = a2 + 4;
        if (*v21)
        {
          do
          {
            while (1)
            {
              v23 = (uint64_t **)v22;
              if (*(_DWORD *)(v111.__r_.__value_.__r.__words[0] + 32) >= *((_DWORD *)v22 + 8))
                break;
              v22 = (uint64_t *)*v22;
              v24 = v23;
              if (!*v23)
                goto LABEL_34;
            }
            v22 = (uint64_t *)v22[1];
          }
          while (v22);
          v24 = v23 + 1;
        }
LABEL_34:
        std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at(v8, (uint64_t)v23, v24, (uint64_t *)v111.__r_.__value_.__l.__data_);
        v111.__r_.__value_.__r.__words[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<int,gloria::ShardInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,gloria::ShardInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)&v111);
        v25 = (uint64_t *)v9[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (uint64_t *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (uint64_t *)v9[2];
            v20 = *v26 == (_QWORD)v9;
            v9 = v26;
          }
          while (!v20);
        }
        v9 = v26;
      }
      while (v26 != v10);
    }
  }
  LODWORD(v146.__r_.__value_.__l.__data_) = 10;
  v147 = 0;
  *(_OWORD *)&v146.__r_.__value_.__r.__words[1] = 0uLL;
  v27 = (uint64_t **)a2[3];
  v104 = a2;
  v108 = a2 + 4;
  if (v27 == a2 + 4)
  {
LABEL_179:
    v111.__r_.__value_.__s.__data_[0] = 1;
    HIDWORD(v111.__r_.__value_.__r.__words[0]) = 0;
    v111.__r_.__value_.__l.__size_ = (std::string::size_type)&str_5;
    v111.__r_.__value_.__r.__words[2] = 0;
    gloria::Status::Status(a1, 0, (uint64_t)&v111);
  }
  else
  {
    v106 = a2 + 1;
    while (1)
    {
      v28 = *((_DWORD *)v27 + 8);
      gloria::ShardInfo::ShardInfo((uint64_t)v137, (uint64_t)(v27 + 5));
      v29 = *v6;
      *(_QWORD *)&v124 = 0;
      v123 = 0uLL;
      v30 = *a5;
      DWORD2(v124) = *a4;
      HIDWORD(v124) = v30;
      gloria::ShardInfo::ShardInfo((uint64_t)&v125, (uint64_t)v137);
      v31 = operator new();
      *(_QWORD *)v31 = &off_1E1BF7138;
      *(_QWORD *)(v31 + 48) = 0;
      *(_QWORD *)(v31 + 56) = 0;
      *(_QWORD *)(v31 + 40) = 0;
      *(_BYTE *)(v31 + 64) = v29;
      v131 = v31;
      v32 = (std::__shared_weak_count *)operator new();
      v32->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1BFB678;
      v32->__shared_owners_ = 0;
      v32->__shared_weak_owners_ = 0;
      v32[1].__vftable = (std::__shared_weak_count_vtbl *)v31;
      v132 = v32;
      v33 = operator new();
      *(_QWORD *)v33 = &off_1E1BF7138;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_QWORD *)(v33 + 40) = 0;
      *(_BYTE *)(v33 + 64) = v29;
      v133 = v33;
      v34 = (std::__shared_weak_count *)operator new();
      v34->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1BFB678;
      v34->__shared_owners_ = 0;
      v34->__shared_weak_owners_ = 0;
      v34[1].__vftable = (std::__shared_weak_count_vtbl *)v33;
      v134 = v34;
      v135 = 0;
      v136 = 0;
      v35 = v145;
      if ((v145 & 0x80u) != 0)
        v35 = v144;
      if (v35)
      {
        v36 = operator new();
        *(_QWORD *)v36 = &off_1E1BF7180;
        *(_QWORD *)(v36 + 56) = 0;
        *(_QWORD *)(v36 + 64) = 0;
        *(_QWORD *)(v36 + 48) = 0;
        *(_BYTE *)(v36 + 72) = v29;
        v37 = (std::__shared_weak_count *)operator new();
        v37->__vftable = (std::__shared_weak_count_vtbl *)&off_1E1BFB6B0;
        v37->__shared_owners_ = 0;
        v37->__shared_weak_owners_ = 0;
        v37[1].__vftable = (std::__shared_weak_count_vtbl *)v36;
        v38 = v136;
        v135 = v36;
        v136 = v37;
        if (v38)
        {
          p_shared_owners = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(p_shared_owners);
          while (__stlxr(v40 - 1, p_shared_owners));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
      }
      LODWORD(v111.__r_.__value_.__l.__data_) = 10;
      *(_QWORD *)&v112 = 0;
      *(_OWORD *)&v111.__r_.__value_.__r.__words[1] = 0uLL;
      v41 = v126;
      v155 = v126;
      v156 = v127;
      if (v127)
      {
        v42 = (unint64_t *)&v127->__shared_owners_;
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v154, v128.__r_.__value_.__l.__data_, v128.__r_.__value_.__l.__size_);
      else
        v154 = v128;
      v152 = v131;
      v153 = v132;
      if (v132)
      {
        v44 = (unint64_t *)&v132->__shared_owners_;
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      (*(void (**)(uint64_t **__return_ptr, uint64_t, std::string *, char *, __int128 *, uint64_t *))(*(_QWORD *)v41 + 40))(&v157, v41, &v154, (char *)&v124 + 8, &v123, &v152);
      gloria::Status::operator=(&v111, (uint64_t)&v157);
      if (v160 < 0)
        operator delete(v158);
      v46 = v153;
      if (v153)
      {
        v47 = (unint64_t *)&v153->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v154.__r_.__value_.__l.__data_);
      v49 = v156;
      if (v156)
      {
        v50 = (unint64_t *)&v156->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if (LODWORD(v111.__r_.__value_.__l.__data_))
        goto LABEL_98;
      v52 = v126;
      v155 = v126;
      v156 = v127;
      if (v127)
      {
        v53 = (unint64_t *)&v127->__shared_owners_;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v154, v129.__r_.__value_.__l.__data_, v129.__r_.__value_.__l.__size_);
      else
        v154 = v129;
      v150 = v133;
      v151 = v134;
      if (v134)
      {
        v55 = (unint64_t *)&v134->__shared_owners_;
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      (*(void (**)(uint64_t **__return_ptr, uint64_t, std::string *, char *, char *, uint64_t *))(*(_QWORD *)v52 + 40))(&v157, v52, &v154, (char *)&v124 + 12, (char *)&v123 + 8, &v150);
      gloria::Status::operator=(&v111, (uint64_t)&v157);
      if (v160 < 0)
        operator delete(v158);
      v57 = v151;
      if (v151)
      {
        v58 = (unint64_t *)&v151->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v154.__r_.__value_.__l.__data_);
      v60 = v156;
      if (v156)
      {
        v61 = (unint64_t *)&v156->__shared_owners_;
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      if (LODWORD(v111.__r_.__value_.__l.__data_))
        goto LABEL_98;
      v91 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
      v92 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
      if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v91 = v130.__r_.__value_.__l.__size_;
      if (!v91)
        goto LABEL_178;
      v93 = v126;
      v155 = v126;
      v156 = v127;
      if (v127)
      {
        v94 = (unint64_t *)&v127->__shared_owners_;
        do
          v95 = __ldxr(v94);
        while (__stxr(v95 + 1, v94));
        v92 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
      }
      if (v92 < 0)
        std::string::__init_copy_ctor_external(&v154, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
      else
        v154 = v130;
      v148 = v135;
      v149 = v136;
      if (v136)
      {
        v96 = (unint64_t *)&v136->__shared_owners_;
        do
          v97 = __ldxr(v96);
        while (__stxr(v97 + 1, v96));
      }
      (*(void (**)(uint64_t **__return_ptr, uint64_t, std::string *, char *, __int128 *, uint64_t *))(*(_QWORD *)v93 + 40))(&v157, v93, &v154, (char *)&v124 + 8, &v124, &v148);
      gloria::Status::operator=(&v111, (uint64_t)&v157);
      if (v160 < 0)
        operator delete(v158);
      v98 = v149;
      if (v149)
      {
        v99 = (unint64_t *)&v149->__shared_owners_;
        do
          v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v154.__r_.__value_.__l.__data_);
      v101 = v156;
      if (v156)
      {
        v102 = (unint64_t *)&v156->__shared_owners_;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      if (LODWORD(v111.__r_.__value_.__l.__data_))
      {
LABEL_98:
        gloria::Status::Status((uint64_t)v120, (uint64_t)&v111);
      }
      else
      {
LABEL_178:
        LOBYTE(v157) = 1;
        HIDWORD(v157) = 0;
        v158 = (uint64_t **)&str_5;
        v159 = 0;
        gloria::Status::Status((uint64_t)v120, 0, (uint64_t)&v157);
      }
      if (SBYTE7(v112) < 0)
        operator delete((void *)v111.__r_.__value_.__l.__size_);
      gloria::Status::operator=(&v146, (uint64_t)v120);
      if (v122 < 0)
        operator delete(v121);
      data = (int)v146.__r_.__value_.__l.__data_;
      if (LODWORD(v146.__r_.__value_.__l.__data_))
      {
        gloria::Status::Status(a1, (uint64_t)&v146);
      }
      else
      {
        LODWORD(v111.__r_.__value_.__l.__data_) = v28;
        *(_OWORD *)&v111.__r_.__value_.__r.__words[1] = v123;
        v112 = v124;
        gloria::ShardInfo::ShardInfo((uint64_t)v113, (uint64_t)&v125);
        v114 = v131;
        v115 = v132;
        if (v132)
        {
          v64 = (unint64_t *)&v132->__shared_owners_;
          do
            v65 = __ldxr(v64);
          while (__stxr(v65 + 1, v64));
        }
        v116 = v133;
        v117 = v134;
        if (v134)
        {
          v66 = (unint64_t *)&v134->__shared_owners_;
          do
            v67 = __ldxr(v66);
          while (__stxr(v67 + 1, v66));
        }
        v118 = v135;
        v119 = v136;
        if (v136)
        {
          v68 = (unint64_t *)&v136->__shared_owners_;
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 1, v68));
        }
        v70 = (int)v111.__r_.__value_.__l.__data_;
        v71 = v106;
        while (1)
        {
          v72 = *v71;
          v73 = v71;
          if (!*v71)
            break;
          while (1)
          {
            v71 = (uint64_t **)v72;
            v74 = *((_DWORD *)v72 + 8);
            if (v74 > SLODWORD(v111.__r_.__value_.__l.__data_))
              break;
            if (v74 >= SLODWORD(v111.__r_.__value_.__l.__data_))
              goto LABEL_130;
            v72 = v71[1];
            if (!v72)
            {
              v73 = v71 + 1;
              goto LABEL_120;
            }
          }
        }
LABEL_120:
        v75 = (char *)operator new(0xD8uLL);
        v157 = (uint64_t *)v75;
        v158 = v106;
        LOBYTE(v159) = 0;
        *((_DWORD *)v75 + 8) = v70;
        v76 = v112;
        *(_OWORD *)(v75 + 40) = *(_OWORD *)&v111.__r_.__value_.__r.__words[1];
        *(_OWORD *)(v75 + 56) = v76;
        gloria::ShardInfo::ShardInfo((uint64_t)(v75 + 72), (uint64_t)v113);
        v77 = v115;
        *((_QWORD *)v75 + 21) = v114;
        *((_QWORD *)v75 + 22) = v77;
        if (v77)
        {
          v78 = (unint64_t *)&v77->__shared_owners_;
          do
            v79 = __ldxr(v78);
          while (__stxr(v79 + 1, v78));
        }
        v80 = v117;
        *((_QWORD *)v75 + 23) = v116;
        *((_QWORD *)v75 + 24) = v80;
        if (v80)
        {
          v81 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldxr(v81);
          while (__stxr(v82 + 1, v81));
        }
        v83 = v119;
        *((_QWORD *)v75 + 25) = v118;
        *((_QWORD *)v75 + 26) = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
        LOBYTE(v159) = 1;
        std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at(v104, (uint64_t)v71, v73, v157);
        v157 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<int,gloria::Shard>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,gloria::Shard>,void *>>>>::reset[abi:ne180100]((uint64_t)&v157, 0);
LABEL_130:
        gloria::Shard::~Shard((void **)&v111.__r_.__value_.__l.__size_);
        v6 = a6;
      }
      gloria::Shard::~Shard((void **)&v123);
      if ((char)v145 < 0)
        operator delete(v143);
      if (v142 < 0)
        operator delete(v141);
      if (v140 < 0)
        operator delete(v139);
      v86 = v138;
      if (v138)
      {
        v87 = (unint64_t *)&v138->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      if (data)
        break;
      v89 = v27[1];
      if (v89)
      {
        do
        {
          v90 = (uint64_t **)v89;
          v89 = (uint64_t *)*v89;
        }
        while (v89);
      }
      else
      {
        do
        {
          v90 = (uint64_t **)v27[2];
          v20 = *v90 == (uint64_t *)v27;
          v27 = v90;
        }
        while (!v20);
      }
      v27 = v90;
      if (v90 == v108)
        goto LABEL_179;
    }
  }
  if (SHIBYTE(v147) < 0)
    operator delete((void *)v146.__r_.__value_.__l.__size_);
}

void sub_1885DBEAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,gloria::ShardInfo *a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  uint64_t v58;

  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v58 - 144);
  if (a34 < 0)
    operator delete(__p);
  gloria::Shard::~Shard(&a58);
  gloria::ShardInfo::~ShardInfo((void **)&STACK[0x220]);
  if (*(char *)(v58 - 225) < 0)
    operator delete(*(void **)(v58 - 248));
  _Unwind_Resume(a1);
}

void sub_1885DC04C()
{
  JUMPOUT(0x1885DC02CLL);
}

void sub_1885DC05C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  std::__tree<std::__value_type<int,gloria::ShardInfo>,std::__map_value_compare<int,std::__value_type<int,gloria::ShardInfo>,std::less<int>,true>,std::allocator<std::__value_type<int,gloria::ShardInfo>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a28);
  JUMPOUT(0x1885DC044);
}

uint64_t gloria::ShardInfo::ShardInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v7;
  }
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v8;
  }
  v9 = (std::string *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return a1;
}

void sub_1885DC15C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;

  if (*(char *)(v2 + 71) < 0)
    operator delete(*v4);
  if (*(char *)(v2 + 47) < 0)
    operator delete(*v3);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void gloria::Shard::~Shard(void **this)
{
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 20));
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 18));
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 16));
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 5));
}

void gloria::DbReaderDisk::createMemoryBuffer(const std::string *a1@<X1>, _DWORD *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void *__p;
  uint64_t v21;
  char v22;
  std::string v23;
  uint64_t v24;

  v10 = *a4;
  v9 = (std::__shared_weak_count *)a4[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  LODWORD(v23.__r_.__value_.__l.__data_) = 10;
  v24 = 0;
  *(_OWORD *)&v23.__r_.__value_.__r.__words[1] = 0uLL;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, const std::string *))(*(_QWORD *)v10 + 8))(&v19, v10, a1);
  gloria::Status::operator=(&v23, (uint64_t)&v19);
  if (v22 < 0)
    operator delete(__p);
  if (LODWORD(v23.__r_.__value_.__l.__data_))
  {
    gloria::Status::Status(a5, (uint64_t)&v23);
  }
  else
  {
    v13 = operator new();
    v14 = (**(uint64_t (***)(uint64_t))v10)(v10);
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    *(_DWORD *)(v13 + 24) = -1;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 40) = 0;
    *(_QWORD *)(v13 + 48) = 0;
    std::string::operator=((std::string *)(v13 + 32), a1);
    *(_QWORD *)(v13 + 8) = v14;
    *(_DWORD *)(v13 + 56) = *a2;
    gloria::MemoryMappedFile::Map((gloria::MemoryMappedFile *)v13, (uint64_t)&v19);
    gloria::Status::operator=(&v23, (uint64_t)&v19);
    if (v22 < 0)
      operator delete(__p);
    if (LODWORD(v23.__r_.__value_.__l.__data_))
    {
      gloria::Status::Status(a5, (uint64_t)&v23);
      gloria::MemoryMappedFile::~MemoryMappedFile((void **)v13);
      MEMORY[0x18D76437C]();
    }
    else
    {
      v15 = operator new();
      v16 = *(_QWORD *)v13;
      *(_OWORD *)(v15 + 16) = *(_OWORD *)(v13 + 8);
      *(_DWORD *)(v15 + 32) = *(_DWORD *)(v13 + 24);
      *(_QWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)v15 = &off_1E1BF71C8;
      *(_QWORD *)(v15 + 8) = v16;
      *(_QWORD *)(v15 + 56) = 0;
      *(_QWORD *)(v15 + 64) = v13;
      *a3 = v15;
      LOBYTE(v19) = 1;
      HIDWORD(v19) = 0;
      __p = "";
      v21 = 0;
      gloria::Status::Status(a5, 0, (uint64_t)&v19);
    }
  }
  if (SHIBYTE(v24) < 0)
    operator delete((void *)v23.__r_.__value_.__l.__size_);
  if (v9)
  {
    v17 = (unint64_t *)&v9->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1885DC4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void **a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::unique_ptr<gloria::MemoryMappedFile>::reset[abi:ne180100](&a12, 0);
  if (a26 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

std::string *gloria::Status::operator=(std::string *result, uint64_t a2)
{
  uint64_t v2;

  if (LODWORD(result->__r_.__value_.__l.__data_) != *(_DWORD *)a2)
  {
    LODWORD(result->__r_.__value_.__l.__data_) = *(_DWORD *)a2;
    v2 = *(unsigned __int8 *)(a2 + 31);
    if ((v2 & 0x80u) != 0)
      v2 = *(_QWORD *)(a2 + 16);
    if (v2)
      return std::string::operator=((std::string *)&result->__r_.__value_.__r.__words[1], (const std::string *)(a2 + 8));
  }
  return result;
}

void gloria::MemoryMappedFile::Map(gloria::MemoryMappedFile *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  const char *v5;
  const char *v6;
  const char *locale;
  int v8;
  int v9;
  __darwin_ino64_t st_gid_high;
  stat *p_p;
  int v12;
  off_t st_size;
  void *v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  int *v18;
  char *v19;
  size_t v20;
  _QWORD *v21;
  const char *v22;
  uint64_t v23;
  int *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  size_t v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  std::locale v31;
  void *v32;
  int64_t v33;
  char v34;
  _QWORD v35[3];
  char v36;
  stat __p;

  v3 = *((_DWORD *)this + 14);
  if (v3 < 3)
  {
    memset(v35, 0, sizeof(v35));
    std::string::basic_string[abi:ne180100]<0>(&__p, "/");
    v5 = (char *)this + 32;
    gloria::FilePath::Tokenize((uint64_t)v35, (std::string *)((char *)this + 32), (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.st_gid) < 0)
      operator delete(*(void **)&__p.st_dev);
    if (*((char *)this + 55) < 0)
    {
      v6 = (const char *)*((_QWORD *)this + 5);
      if (!v6)
        goto LABEL_13;
      v6 = *(const char **)v5;
    }
    else
    {
      v6 = (char *)this + 32;
      if (!*((_BYTE *)this + 55))
      {
        LOBYTE(v6) = 0;
        goto LABEL_13;
      }
    }
    LOBYTE(v6) = *v6 == 47;
LABEL_13:
    v36 = (char)v6;
    gloria::FilePath::ToString((uint64_t *)&v31, (gloria::FilePath *)v35);
    if (v33 >= 0)
      locale = (const char *)&v31;
    else
      locale = (const char *)v31.__locale_;
    v8 = stat(locale, &__p);
    v9 = v8;
    if (SHIBYTE(v33) < 0)
    {
      operator delete(v31.__locale_);
      if (v9)
        goto LABEL_18;
    }
    else if (v8)
    {
LABEL_18:
      std::operator+<char>();
      LOBYTE(v31.__locale_) = 1;
      HIDWORD(v31.__locale_) = 0;
      st_gid_high = HIBYTE(__p.st_gid);
      p_p = *(stat **)&__p.st_dev;
      if ((__p.st_gid & 0x80000000) != 0)
        st_gid_high = __p.st_ino;
      else
        p_p = &__p;
      v32 = p_p;
      v33 = st_gid_high;
      gloria::Status::Status(a2, 9, (uint64_t)&v31);
      if (SHIBYTE(__p.st_gid) < 0)
        operator delete(*(void **)&__p.st_dev);
      goto LABEL_50;
    }
    if (*((char *)this + 55) < 0)
      v5 = *(const char **)v5;
    v12 = open(v5, 0);
    *((_DWORD *)this + 6) = v12;
    fstat(v12, &__p);
    st_size = __p.st_size;
    if (!__p.st_size)
    {
      *((_DWORD *)this + 6) = -1;
      LOBYTE(v31.__locale_) = 1;
      HIDWORD(v31.__locale_) = 0;
      v32 = "cannot memory map an empty file";
      v33 = 31;
      gloria::Status::Status(a2, 6, (uint64_t)&v31);
      goto LABEL_50;
    }
    *((_QWORD *)this + 2) = __p.st_size;
    v14 = mmap(0, st_size, 1, 1, *((_DWORD *)this + 6), 0);
    *(_QWORD *)this = v14;
    if (v14 == (void *)-1)
    {
      LOBYTE(v31.__locale_) = 1;
      HIDWORD(v31.__locale_) = 0;
      v32 = "memory mapping failed";
      v33 = 21;
      gloria::Status::Status(a2, 7, (uint64_t)&v31);
      goto LABEL_50;
    }
    v15 = *((_DWORD *)this + 14);
    if (v15 == 1)
    {
      if (mlock(v14, *((_QWORD *)this + 2)))
      {
        v24 = __error();
        v25 = strerror(*v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"WARN: mlock() failed with return code=", 38);
        v26 = (_QWORD *)std::ostream::operator<<();
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"; error=", 8);
        v28 = strlen(v25);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v25, v28);
        std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
        v30 = std::locale::use_facet(&v31, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
        std::locale::~locale(&v31);
        std::ostream::put();
        std::ostream::flush();
        LOBYTE(v31.__locale_) = 1;
        HIDWORD(v31.__locale_) = 0;
        v32 = v25;
        v33 = strlen(v25);
        gloria::Status::Status(a2, 8, (uint64_t)&v31);
      }
      else
      {
        LOBYTE(v31.__locale_) = 1;
        HIDWORD(v31.__locale_) = 0;
        v32 = "";
        v33 = 0;
        gloria::Status::Status(a2, 0, (uint64_t)&v31);
      }
      if (*(_DWORD *)a2)
        goto LABEL_50;
      if ((*(char *)(a2 + 31) & 0x80000000) == 0)
        goto LABEL_49;
    }
    else
    {
      if (v15)
      {
LABEL_49:
        LOBYTE(v31.__locale_) = 1;
        HIDWORD(v31.__locale_) = 0;
        v32 = "";
        v33 = 0;
        gloria::Status::Status(a2, 0, (uint64_t)&v31);
        goto LABEL_50;
      }
      if (madvise(v14, *((_QWORD *)this + 2), 3))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"WARN: madvice() failed with return code=", 40);
        v16 = (_QWORD *)std::ostream::operator<<();
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"; error=", 8);
        v18 = __error();
        v19 = strerror(*v18);
        v20 = strlen(v19);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
        LOBYTE(v31.__locale_) = 1;
        HIDWORD(v31.__locale_) = 0;
        v32 = "could not load index to resident memory";
        v33 = 39;
        gloria::Status::Status(a2, 7, (uint64_t)&v31);
      }
      else
      {
        LOBYTE(v31.__locale_) = 1;
        HIDWORD(v31.__locale_) = 0;
        v32 = "";
        v33 = 0;
        gloria::Status::Status(a2, 0, (uint64_t)&v31);
      }
      if (*(_DWORD *)a2)
        goto LABEL_50;
      gloria::MemoryMappedFile::Load((gloria::MemoryMappedFile *)&v31, (uint64_t)this);
      gloria::Status::operator=((std::string *)a2, (uint64_t)&v31);
      if (v34 < 0)
        operator delete(v32);
      if (*(_DWORD *)a2 || (*(char *)(a2 + 31) & 0x80000000) == 0)
      {
        if (!*(_DWORD *)a2)
          goto LABEL_49;
LABEL_50:
        *(_QWORD *)&__p.st_dev = v35;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        return;
      }
    }
    operator delete(*(void **)(a2 + 8));
    goto LABEL_49;
  }
  LOBYTE(__p.st_dev) = 1;
  *(_DWORD *)&__p.st_mode = 0;
  if (v3 == 3)
  {
    v22 = "random access files are not supported";
    v23 = 37;
  }
  else
  {
    v22 = "cannot instantiate buffer from type provided";
    v23 = 44;
  }
  __p.st_ino = (__darwin_ino64_t)v22;
  *(_QWORD *)&__p.st_uid = v23;
  gloria::Status::Status(a2, 2, (uint64_t)&__p);
}

void sub_1885DCAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  if (a19 < 0)
    operator delete(__p);
  if (*(char *)(v29 + 31) < 0)
    operator delete(*(void **)(v29 + 8));
  *(_QWORD *)(v30 - 56) = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 56));
  _Unwind_Resume(a1);
}

uint64_t gloria::FilePath::ToString(gloria::FilePath *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v11[11];
  char v12;
  uint64_t v13;
  char v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  if (*((_BYTE *)this + 24))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"/", 1);
  v2 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) != *(_QWORD *)this)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = v2 + v3;
      v6 = *(char *)(v5 + 23);
      if (v6 >= 0)
        v7 = v5;
      else
        v7 = *(_QWORD *)v5;
      if (v6 >= 0)
        v8 = *(unsigned __int8 *)(v5 + 23);
      else
        v8 = *(_QWORD *)(v5 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v7, v8);
      ++v4;
      v2 = *(_QWORD *)this;
      v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
      if (v4 < v9)
      {
        v14 = 47;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v14, 1);
        v2 = *(_QWORD *)this;
        v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
      }
      v3 += 24;
    }
    while (v4 < v9);
  }
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v11[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D764310](&v13);
}

void sub_1885DCCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t gloria::BasicShardHeader::Size(gloria::BasicShardHeader *this)
{
  return (unint64_t)(*((_BYTE *)this + 64) == 0) << 12;
}

void gloria::BasicShardHeader::ReadFrom(_BYTE *a1@<X0>, const std::string *a2@<X1>, std::ios_base::openmode a3@<W2>, uint64_t a4@<X8>)
{
  void **v6;
  std::string::size_type v7;
  int v8;
  void *__p;
  char v10;
  void *v11[2];
  uint64_t v12;
  std::fstream v13;
  void **v14;
  __int128 v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a1[64])
  {
    LOBYTE(v13.__sb_.__extbuf_) = 1;
    HIDWORD(v13.__sb_.__extbuf_) = 0;
    v13.__sb_.__extbufnext_ = "";
    v13.__sb_.__extbufend_ = 0;
    gloria::Status::Status(a4, 0, (uint64_t)&v13);
  }
  else
  {
    std::fstream::basic_fstream(&v13, a2, a3);
    if (*(&v13.__sb_.__st_._mbstateL + 9)
      && (v13.__sb_.__extbuf_min_[*((_QWORD *)v13.__sb_.__extbuf_ - 3) + 8] & 5) == 0)
    {
      std::istream::seekg();
      std::istream::tellg();
      if (v20)
      {
        v11[0] = 0;
        v11[1] = 0;
        v12 = 0;
        v14 = 0;
        v7 = 4096;
        gloria::FileIO::ReadBuffer((uint64_t)&v8, &v13, (uint64_t *)&v14, &v7, (uint64_t)v11);
        if (v8)
        {
          LOBYTE(v14) = 1;
          HIDWORD(v14) = 0;
          *(_QWORD *)&v15 = "cannot read header buffer from the index file";
          *((_QWORD *)&v15 + 1) = 45;
          gloria::Status::Status(a4, 7, (uint64_t)&v14);
        }
        else
        {
          v16 = -1;
          v18 = 0;
          v19 = 0;
          v17 = 0;
          v6 = v11;
          if (v12 < 0)
            v6 = (void **)v11[0];
          v14 = v6;
          v15 = xmmword_189CBC8E0;
          (*(void (**)(_BYTE *, void ***))(*(_QWORD *)a1 + 16))(a1, &v14);
          if (SHIBYTE(v19) < 0)
            operator delete(v17);
        }
        if (v10 < 0)
          operator delete(__p);
        if (SHIBYTE(v12) < 0)
          operator delete(v11[0]);
      }
      else
      {
        LOBYTE(v14) = 1;
        HIDWORD(v14) = 0;
        *(_QWORD *)&v15 = "cannot read header from empty file";
        *((_QWORD *)&v15 + 1) = 34;
        gloria::Status::Status(a4, 7, (uint64_t)&v14);
      }
    }
    else
    {
      LOBYTE(v14) = 1;
      HIDWORD(v14) = 0;
      *(_QWORD *)&v15 = "cannot read the index file: invalid input stream";
      *((_QWORD *)&v15 + 1) = 48;
      gloria::Status::Status(a4, 7, (uint64_t)&v14);
    }
    gloria::FileIO::~FileIO((gloria::FileIO *)&v13);
  }
}

void sub_1885DCF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 121) < 0)
    operator delete(*(void **)(v24 - 144));
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  gloria::FileIO::~FileIO((gloria::FileIO *)&a24);
  _Unwind_Resume(a1);
}

void gloria::FileIO::~FileIO(gloria::FileIO *this)
{
  char *v2;

  v2 = (char *)this + 24;
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) | 4);
  MEMORY[0x18D764154](v2);
  std::iostream::~basic_iostream();
  MEMORY[0x18D764310]((char *)this + 432);
}

void gloria::BasicShardHeader::ReadFrom(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  const char *v8;
  void *v9;
  const char *v10;
  void *p_p;
  _BYTE v12[4];
  int v13;
  void *v14;
  const char *v15;
  void *__p;
  const char *v17;
  uint64_t v18;

  v5 = *a2;
  v6 = a1 + 40;
  std::string::resize((std::string *)(a1 + 40), 0x28uLL, 0);
  MEMORY[0x18D7640B8](v6, v5, 40);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) & 1) != 0)
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(v5 + 40);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v5 + 44);
    v7 = *(_DWORD *)(v5 + 48);
    *(_DWORD *)(a1 + 12) = v7;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(v5 + 52);
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(v5 + 56);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v5 + 60);
    if (v7)
    {
      LOBYTE(__p) = 1;
      HIDWORD(__p) = 0;
      v17 = "";
      v18 = 0;
      gloria::Status::Status(a3, 0, (uint64_t)&__p);
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "BIG_ENDIAN endian index not currently supported");
    v12[0] = 1;
    v13 = 0;
    v10 = (const char *)HIBYTE(v18);
    p_p = __p;
    if (v18 < 0)
      v10 = v17;
    else
      p_p = &__p;
    v14 = p_p;
    v15 = v10;
    gloria::Status::Status(a3, 6, (uint64_t)v12);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "data is not a gloria index");
    v12[0] = 1;
    v13 = 0;
    v8 = (const char *)HIBYTE(v18);
    v9 = __p;
    if (v18 < 0)
      v8 = v17;
    else
      v9 = &__p;
    v14 = v9;
    v15 = v8;
    gloria::Status::Status(a3, 7, (uint64_t)v12);
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
}

void sub_1885DD1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL gloria::BasicShardHeader::IsValid(gloria::BasicShardHeader *this)
{
  _BOOL8 v1;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  int v6;
  const void **v7;
  void **v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  void *__p[2];
  unsigned __int8 v18;

  if (!*((_BYTE *)this + 64))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "46b7e0e169f90a020d0a4ccdf761a8b1001aac3d");
    v3 = *((unsigned __int8 *)this + 63);
    if ((v3 & 0x80u) == 0)
      v4 = (void *)*((unsigned __int8 *)this + 63);
    else
      v4 = (void *)*((_QWORD *)this + 6);
    v5 = v18;
    v6 = (char)v18;
    if ((v18 & 0x80u) != 0)
      v5 = (unint64_t)__p[1];
    if (v4 == (void *)v5)
    {
      v7 = (const void **)((char *)this + 40);
      if ((v18 & 0x80u) == 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      if ((v3 & 0x80) != 0)
      {
        v1 = memcmp(*v7, v8, *((_QWORD *)this + 6)) == 0;
      }
      else
      {
        if (!*((_BYTE *)this + 63))
        {
          v1 = 1;
          if (((char)v18 & 0x80000000) == 0)
            return v1;
          goto LABEL_25;
        }
        v9 = v3 - 1;
        do
        {
          v11 = *(unsigned __int8 *)v7;
          v7 = (const void **)((char *)v7 + 1);
          v10 = v11;
          v13 = *(unsigned __int8 *)v8;
          v8 = (void **)((char *)v8 + 1);
          v12 = v13;
          v15 = v9-- != 0;
          v1 = v10 == v12;
        }
        while (v10 == v12 && v15);
      }
      if ((v6 & 0x80000000) == 0)
        return v1;
    }
    else
    {
      v1 = 0;
      if (((char)v18 & 0x80000000) == 0)
        return v1;
    }
LABEL_25:
    operator delete(__p[0]);
    return v1;
  }
  return 1;
}

std::fstream *__cdecl std::fstream::basic_fstream(std::fstream *this, const std::string *__s, std::ios_base::openmode __mode)
{
  char *extbuf_min;

  this->__sb_.__extbufnext_ = 0;
  *(&this[1].__sb_.__st_._mbstateL + 2) = (uint64_t)&unk_1E1BF2CF0;
  extbuf_min = this->__sb_.__extbuf_min_;
  this->__sb_.__extbuf_ = (char *)&unk_1E1BF2CC8;
  std::ios_base::init((std::ios_base *)(&this[1].__sb_.__st_._mbstateL + 2), this->__sb_.__extbuf_min_);
  *(&this[1].__sb_.__st_last_._mbstateL + 3) = 0;
  *((_DWORD *)&this[1].__sb_.__st_last_._mbstateL + 8) = -1;
  MEMORY[0x18D764148](extbuf_min);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)this + *((_QWORD *)this->__sb_.__extbuf_ - 3)), *(_DWORD *)&this->__sb_.__extbuf_min_[*((_QWORD *)this->__sb_.__extbuf_ - 3) + 8] | 4);
  return this;
}

void sub_1885DD398(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x18D764310](v1);
  _Unwind_Resume(a1);
}

void gloria::FileIO::ReadBuffer(uint64_t a1, _QWORD *a2, uint64_t *a3, std::string::size_type *a4, uint64_t a5)
{
  uint64_t v10;
  std::string *v11;
  _BYTE v12[4];
  int v13;
  const char *v14;
  uint64_t v15;
  std::string v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  memset(&v16, 0, sizeof(v16));
  std::string::resize(&v16, *a4, 0);
  v10 = *a3;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = v10;
  std::istream::seekg();
  std::istream::read();
  if (a2[18] && (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
  {
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v16;
    else
      v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
    MEMORY[0x18D7640B8](a5, v11, *a4);
    v12[0] = 1;
    v13 = 0;
    v14 = "";
    v15 = 0;
    gloria::Status::Status(a1, 0, (uint64_t)v12);
  }
  else
  {
    v12[0] = 1;
    v13 = 0;
    v14 = "ReadBuffer: invalid input stream";
    v15 = 32;
    gloria::Status::Status(a1, 6, (uint64_t)v12);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1885DD550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void gloria::BasicShardHeader::~BasicShardHeader(void **this)
{
  *this = &off_1E1BF7138;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  JUMPOUT(0x18D76437CLL);
}

{
  *this = &off_1E1BF7138;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
}

uint64_t std::__shared_ptr_pointer<gloria::BasicShardHeader *,std::shared_ptr<gloria::BasicShardHeader>::__shared_ptr_default_delete<gloria::BasicShardHeader,gloria::BasicShardHeader>,std::allocator<gloria::BasicShardHeader>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void gloria::BinarySearchStrategy::search(void (***a1)(void **__return_ptr, _QWORD, uint64_t *, uint64_t *, char *)@<X1>, uint64_t a2@<X2>, int *a3@<X3>, uint64_t *a4@<X4>, uint64_t *a5@<X5>, _QWORD *a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  size_t v17;
  size_t v18;
  _BOOL4 v19;
  size_t v20;
  int v21;
  int v22;
  uint64_t v23;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char v31;
  char v32[4];
  int v33;
  const char *v34;
  uint64_t v35;
  void *v36[3];
  char v37;
  char v38[4];
  int v39;
  const char *v40;
  size_t v41;
  uint64_t v42;

  v7 = *a4;
  v8 = *a5;
  v42 = *(_QWORD *)(a2 + 16);
  if (v7 >= v8)
  {
LABEL_20:
    LOBYTE(v28) = 1;
    HIDWORD(v28) = 0;
    v29 = "key was not found";
    v30 = 17;
    gloria::Status::Status(a7, 1, (uint64_t)&v28);
    return;
  }
  v12 = "";
  while (1)
  {
    v13 = v8 - v7;
    if (v8 < v7)
      ++v13;
    v14 = v7 + (v13 >> 1);
    v15 = v14 * *a3;
    v38[0] = 1;
    v39 = 0;
    v16 = v12;
    v40 = v12;
    v41 = 0;
    v28 = v15;
    (**a1)(v36, a1, &v28, &v42, v38);
    if (v37 < 0)
      operator delete(v36[1]);
    v17 = v41;
    v18 = *(_QWORD *)(a2 + 16);
    v19 = v18 < v41;
    if (v18 >= v41)
      v20 = v41;
    else
      v20 = *(_QWORD *)(a2 + 16);
    v21 = memcmp(v40, *(const void **)(a2 + 8), v20);
    if (v17 < v18)
      v22 = -1;
    else
      v22 = v19;
    if (v21)
      v22 = v21;
    if (v22 < 0)
    {
      v7 = v14 + 1;
      v12 = v16;
      goto LABEL_19;
    }
    v8 = v14;
    v12 = v16;
    if (!v22)
      break;
LABEL_19:
    if (v7 >= v8)
      goto LABEL_20;
  }
  v23 = v42 + v14 * *a3;
  v32[0] = 1;
  v33 = 0;
  v34 = v16;
  v35 = 0;
  v26[0] = v23;
  v27 = 8;
  (**a1)((void **)&v28, a1, v26, &v27, v32);
  if ((_DWORD)v28)
  {
    gloria::Status::Status(a7, (uint64_t)&v28);
  }
  else
  {
    *a6 = *(_QWORD *)v34;
    LOBYTE(v26[0]) = 1;
    HIDWORD(v26[0]) = 0;
    v26[1] = v16;
    v26[2] = 0;
    gloria::Status::Status(a7, 0, (uint64_t)v26);
  }
  if (v31 < 0)
    operator delete(v29);
}

void sub_1885DD810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void gloria::MmapMemoryBuffer::Read(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  gloria::MemoryDescriptor::CheckBounds((gloria::MemoryDescriptor *)(a1 + 8), *a2, *a3, (uint64_t)a5);
  if (*a5)
  {
    v11 = 0;
    *(_BYTE *)(a4 + 3) = 0;
    *(_WORD *)(a4 + 1) = 0;
    v12 = "";
  }
  else
  {
    v12 = (const char *)(v9 + v10 + v8);
    v11 = *a3;
  }
  *(_BYTE *)a4 = 1;
  *(_DWORD *)(a4 + 4) = 0;
  *(_QWORD *)(a4 + 8) = v12;
  *(_QWORD *)(a4 + 16) = v11;
}

void gloria::MemoryDescriptor::CheckBounds(gloria::MemoryDescriptor *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v7;
  std::string *v8;
  std::string::size_type size;
  std::string *v10;
  uint64_t v11;
  int v12;
  char v13[4];
  int v14;
  std::string *v15;
  std::string::size_type v16;
  std::string v17;

  if (a2 < 0 || a3 <= 0)
  {
    v17.__r_.__value_.__s.__data_[0] = 1;
    HIDWORD(v17.__r_.__value_.__r.__words[0]) = 0;
    v17.__r_.__value_.__l.__size_ = (std::string::size_type)"payload size_ must be greater than 0";
    v17.__r_.__value_.__r.__words[2] = 36;
    v11 = a4;
    v12 = 5;
LABEL_10:
    gloria::Status::Status(v11, v12, (uint64_t)&v17);
    return;
  }
  if (a3 + a2 + *((_QWORD *)this + 1) <= *((_QWORD *)this + 2))
  {
    v17.__r_.__value_.__s.__data_[0] = 1;
    HIDWORD(v17.__r_.__value_.__r.__words[0]) = 0;
    v17.__r_.__value_.__l.__size_ = (std::string::size_type)"";
    v17.__r_.__value_.__r.__words[2] = 0;
    v11 = a4;
    v12 = 0;
    goto LABEL_10;
  }
  std::string::basic_string[abi:ne180100]<0>(&v17, "memory offset_ access out of bound expected <= ");
  v7 = std::string::append(&v17, *(const std::string::value_type **)this);
  v8 = std::string::append(v7, ", but found: ");
  std::string::append(v8, (const std::string::value_type *)(*(_QWORD *)this + a2 + *((_QWORD *)this + 2)));
  v13[0] = 1;
  v14 = 0;
  size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  v10 = &v17;
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = v17.__r_.__value_.__l.__size_;
    v10 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  v15 = v10;
  v16 = size;
  gloria::Status::Status(a4, 5, (uint64_t)v13);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1885DD9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t gloria::Status::Status(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)a1 = 10;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  MEMORY[0x18D7640AC](a1 + 8, *(_QWORD *)(a3 + 8));
  *(_DWORD *)a1 = a2;
  return a1;
}

void sub_1885DDA58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<addr_obj::V2AddressObject *,std::shared_ptr<addr_obj::V2AddressObject>::__shared_ptr_default_delete<addr_obj::V2AddressObject,addr_obj::V2AddressObject>,std::allocator<addr_obj::V2AddressObject>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void addr_obj::V2AddressObject::~V2AddressObject(void **this)
{
  addr_obj::V2AddressObject::~V2AddressObject(this);
  JUMPOUT(0x18D76437CLL);
}

{
  *this = &off_1E1BF9500;
  if (*((char *)this + 1015) < 0)
    operator delete(this[124]);
  if (*((char *)this + 991) < 0)
    operator delete(this[121]);
  if (*((char *)this + 967) < 0)
    operator delete(this[118]);
  if (*((char *)this + 943) < 0)
    operator delete(this[115]);
  if (*((char *)this + 919) < 0)
    operator delete(this[112]);
  if (*((char *)this + 895) < 0)
    operator delete(this[109]);
  if (*((char *)this + 871) < 0)
    operator delete(this[106]);
  if (*((char *)this + 847) < 0)
    operator delete(this[103]);
  if (*((char *)this + 823) < 0)
    operator delete(this[100]);
  if (*((char *)this + 799) < 0)
    operator delete(this[97]);
  if (*((char *)this + 775) < 0)
    operator delete(this[94]);
  if (*((char *)this + 751) < 0)
    operator delete(this[91]);
  addr_obj::V1AddressObject::~V1AddressObject((addr_obj::V1AddressObject *)this);
}

uint64_t std::__shared_ptr_emplace<gloria::DbReaderDisk>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void gloria::DbReaderDisk::~DbReaderDisk(void **this)
{
  *this = off_1E1BF7090;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E1BF7090;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x18D76437CLL);
}

void geo::TarBuffer::Read(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  gloria::MemoryDescriptor::CheckBounds((gloria::MemoryDescriptor *)(a1 + 8), *a2, *a3, (uint64_t)a5);
  if (*a5)
  {
    v11 = 0;
    *(_BYTE *)(a4 + 3) = 0;
    *(_WORD *)(a4 + 1) = 0;
    v12 = "";
  }
  else
  {
    v12 = (const char *)(v9 + v10 + v8);
    v11 = *a3;
  }
  *(_BYTE *)a4 = 1;
  *(_DWORD *)(a4 + 4) = 0;
  *(_QWORD *)(a4 + 8) = v12;
  *(_QWORD *)(a4 + 16) = v11;
}

uint64_t std::__shared_ptr_pointer<geo::GloriaDB::QuadKey *,std::shared_ptr<gloria::RecordAttribute>::__shared_ptr_default_delete<gloria::RecordAttribute,geo::GloriaDB::QuadKey>,std::allocator<geo::GloriaDB::QuadKey>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void geo::GloriaDB::QuadKey::~QuadKey(geo::GloriaDB::QuadKey *this)
{
  JUMPOUT(0x18D76437CLL);
}

void sub_1885DDD2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<geo::DbReaderTarFileDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t geo::TarBuffer::Close@<X0>(uint64_t a1@<X8>)
{
  char v3[4];
  int v4;
  const char *v5;
  uint64_t v6;

  v3[0] = 1;
  v4 = 0;
  v5 = "";
  v6 = 0;
  return gloria::Status::Status(a1, 0, (uint64_t)v3);
}

uint64_t ___notifyListenersOfKeyChange_block_invoke_2(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "makeObjectsPerformSelector:", sel_callListener);
}

unint64_t GEOPDPlaceReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  BOOL v30;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  GEOPDComponent *v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  char v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  id v104;
  void *v105;
  int v106;
  void *v107;
  uint64_t v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  BOOL v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  void *v126;
  int v128;
  char v129;
  char v130;
  char v131;
  char v132;
  char v133;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 112));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 108);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 104));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12.i64[0] = 0x100000001;
  v12.i64[1] = 0x100000001;
  v13 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(*(_DWORD *)(a1 + 140)), (uint32x4_t)xmmword_189CD7C50), v12))+ ((*(_DWORD *)(a1 + 140) >> 17) & 1)+ ((*(_DWORD *)(a1 + 140) >> 15) & 1)+ ((*(_DWORD *)(a1 + 140) >> 11) & 1);
  while (2)
  {
    v14 = 1;
    v15 = 1;
    v16 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v15 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v17 = v13 > 3;
        v18 = v17 | v11;
        v129 = v17 & ~(_BYTE)v11 | v9;
        v130 = v8;
        v132 = v17 | v11 | v129;
        if ((((v17 | v11) | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v133 = (v19 == 0) | v18;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = (int *)MEMORY[0x1E0D82BB8];
        v131 = v17 | v11;
        break;
      default:
        ++v13;
LABEL_7:
        v14 = v9;
LABEL_8:
        v15 = v10;
        v16 = v11;
LABEL_10:
        ++v7;
        v9 = v14;
        v10 = v15;
        v11 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_224;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v23 += 7;
      v30 = v24++ >= 9;
      if (v30)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_224:
      v128 = 1;
      goto LABEL_225;
    }
    v33 = v25 >> 3;
    v34 = v18;
    if ((v133 & 1) == 0)
    {
      v35 = v19;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if ((v130 & 1) == 0)
          goto LABEL_164;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        *(_DWORD *)(a1 + 140) |= 2u;
        while (2)
        {
          v42 = *v20;
          v43 = *(_QWORD *)(v3 + v42);
          v44 = v43 + 1;
          if (v43 == -1 || v44 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v43);
            *(_QWORD *)(v3 + v42) = v44;
            v41 |= (unint64_t)(v45 & 0x7F) << v39;
            if (v45 < 0)
            {
              v39 += 7;
              v30 = v40++ >= 9;
              if (v30)
              {
                v41 = 0;
                goto LABEL_169;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          v41 = 0;
LABEL_169:
        v117 = 56;
        goto LABEL_194;
      case 2:
        if ((v130 & 1) == 0)
          goto LABEL_164;
        v53 = 0;
        v54 = 0;
        v48 = 0;
        *(_DWORD *)(a1 + 140) |= 0x100u;
        while (2)
        {
          v55 = *v20;
          v56 = *(_QWORD *)(v3 + v55);
          v57 = v56 + 1;
          if (v56 == -1 || v57 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v56);
            *(_QWORD *)(v3 + v55) = v57;
            v48 |= (unint64_t)(v58 & 0x7F) << v53;
            if (v58 < 0)
            {
              v53 += 7;
              v30 = v54++ >= 9;
              if (v30)
              {
                LODWORD(v48) = 0;
                goto LABEL_177;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v48) = 0;
LABEL_177:
        v118 = 132;
        goto LABEL_207;
      case 3:
        if ((v130 & 1) == 0)
          goto LABEL_164;
        v59 = 0;
        v60 = 0;
        v41 = 0;
        *(_DWORD *)(a1 + 140) |= 4u;
        while (2)
        {
          v61 = *v20;
          v62 = *(_QWORD *)(v3 + v61);
          v63 = v62 + 1;
          if (v62 == -1 || v63 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v64 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v62);
            *(_QWORD *)(v3 + v61) = v63;
            v41 |= (unint64_t)(v64 & 0x7F) << v59;
            if (v64 < 0)
            {
              v59 += 7;
              v30 = v60++ >= 9;
              if (v30)
              {
                v41 = 0;
                goto LABEL_181;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          v41 = 0;
LABEL_181:
        v117 = 80;
        goto LABEL_194;
      case 4:
        if (!v34 || (*(_BYTE *)(a1 + 141) & 0x20) != 0)
          goto LABEL_164;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_247;
        v65 = objc_alloc_init(GEOPDComponent);
        if (!GEOPDComponentReadAllFrom((uint64_t)v65, (void *)v3, v10 & 1))
          goto LABEL_246;
        PBReaderRecallMark();
        -[GEOPDPlace _addNoFlagsComponent:](a1, v65);
LABEL_131:

        goto LABEL_222;
      case 5:
        if ((v130 & 1) == 0)
          goto LABEL_164;
        v66 = 0;
        v67 = 0;
        v48 = 0;
        *(_DWORD *)(a1 + 140) |= 0x80u;
        while (2)
        {
          v68 = *v20;
          v69 = *(_QWORD *)(v3 + v68);
          v70 = v69 + 1;
          if (v69 == -1 || v70 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v71 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v69);
            *(_QWORD *)(v3 + v68) = v70;
            v48 |= (unint64_t)(v71 & 0x7F) << v66;
            if (v71 < 0)
            {
              v66 += 7;
              v30 = v67++ >= 9;
              if (v30)
              {
                LODWORD(v48) = 0;
                goto LABEL_185;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v48) = 0;
LABEL_185:
        v118 = 128;
        goto LABEL_207;
      case 6:
        if ((v130 & 1) == 0)
          goto LABEL_164;
        v72 = 0;
        v73 = 0;
        v41 = 0;
        *(_DWORD *)(a1 + 140) |= 8u;
        while (2)
        {
          v74 = *v20;
          v75 = *(_QWORD *)(v3 + v74);
          v76 = v75 + 1;
          if (v75 == -1 || v76 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v77 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v75);
            *(_QWORD *)(v3 + v74) = v76;
            v41 |= (unint64_t)(v77 & 0x7F) << v72;
            if (v77 < 0)
            {
              v72 += 7;
              v30 = v73++ >= 9;
              if (v30)
              {
                v41 = 0;
                goto LABEL_189;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          v41 = 0;
LABEL_189:
        v117 = 96;
        goto LABEL_194;
      case 7:
        if (!v34)
          goto LABEL_164;
        if ((*(_BYTE *)(a1 + 141) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_247;
          v121 = (int)(*(_DWORD *)(a1 + 140) << 17) >> 31;
          goto LABEL_221;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_247;
        v65 = objc_alloc_init(GEOPDMapsIdentifier);
        if (!GEOPDMapsIdentifierReadAllFrom((uint64_t)v65, (void *)v3))
          goto LABEL_246;
        PBReaderRecallMark();
        v78 = 48;
        goto LABEL_151;
      case 8:
        if ((v130 & 1) == 0)
          goto LABEL_164;
        v79 = 0;
        v80 = 0;
        v41 = 0;
        *(_DWORD *)(a1 + 140) |= 1u;
        while (2)
        {
          v81 = *v20;
          v82 = *(_QWORD *)(v3 + v81);
          v83 = v82 + 1;
          if (v82 == -1 || v83 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v84 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v82);
            *(_QWORD *)(v3 + v81) = v83;
            v41 |= (unint64_t)(v84 & 0x7F) << v79;
            if (v84 < 0)
            {
              v79 += 7;
              v30 = v80++ >= 9;
              if (v30)
              {
                v41 = 0;
                goto LABEL_193;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          v41 = 0;
LABEL_193:
        v117 = 40;
LABEL_194:
        *(_QWORD *)(a1 + v117) = v41;
        goto LABEL_223;
      case 9:
        if (!v34)
          goto LABEL_164;
        if ((*(_BYTE *)(a1 + 142) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_247;
          v121 = (int)(*(_DWORD *)(a1 + 140) << 15) >> 31;
          goto LABEL_221;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_247;
        v65 = objc_alloc_init(GEOPDPlacecardLayoutData);
        if (!GEOPDPlacecardLayoutDataReadAllFrom((uint64_t)v65, (void *)v3, v10 & 1))
          goto LABEL_246;
        PBReaderRecallMark();
        v78 = 72;
        goto LABEL_151;
      case 10:
        if ((v130 & 1) == 0)
          goto LABEL_164;
        v85 = 0;
        v86 = 0;
        v87 = 0;
        *(_DWORD *)(a1 + 140) |= 0x200u;
        while (2)
        {
          v88 = *v20;
          v89 = *(_QWORD *)(v3 + v88);
          v90 = v89 + 1;
          if (v89 == -1 || v90 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v91 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v89);
            *(_QWORD *)(v3 + v88) = v90;
            v87 |= (unint64_t)(v91 & 0x7F) << v85;
            if (v91 < 0)
            {
              v85 += 7;
              v30 = v86++ >= 9;
              if (v30)
              {
                v87 = 0;
                goto LABEL_198;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          v87 = 0;
LABEL_198:
        v119 = v87 != 0;
        v120 = 136;
        goto LABEL_212;
      case 11:
        if ((v130 & 1) == 0)
          goto LABEL_164;
        v92 = 0;
        v93 = 0;
        v48 = 0;
        *(_DWORD *)(a1 + 140) |= 0x10u;
        while (2)
        {
          v94 = *v20;
          v95 = *(_QWORD *)(v3 + v94);
          v96 = v95 + 1;
          if (v95 == -1 || v96 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v97 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v95);
            *(_QWORD *)(v3 + v94) = v96;
            v48 |= (unint64_t)(v97 & 0x7F) << v92;
            if (v97 < 0)
            {
              v92 += 7;
              v30 = v93++ >= 9;
              if (v30)
              {
                LODWORD(v48) = 0;
                goto LABEL_202;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v48) = 0;
LABEL_202:
        v118 = 116;
        goto LABEL_207;
      case 12:
        if (!v34 || (*(_BYTE *)(a1 + 141) & 0x10) != 0)
          goto LABEL_164;
        PBReaderReadString();
        v65 = (GEOPDComponent *)objc_claimAutoreleasedReturnValue();
        if (v65)
          -[GEOPDPlace _addNoFlagsAbExpBranchId:](a1, v65);
        goto LABEL_131;
      case 13:
        if ((v130 & 1) != 0)
        {
          v98 = 0;
          v99 = 0;
          v48 = 0;
          *(_DWORD *)(a1 + 140) |= 0x20u;
          while (1)
          {
            v100 = *v20;
            v101 = *(_QWORD *)(v3 + v100);
            v102 = v101 + 1;
            if (v101 == -1 || v102 > *(_QWORD *)(v3 + *v6))
              break;
            v103 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v101);
            *(_QWORD *)(v3 + v100) = v102;
            v48 |= (unint64_t)(v103 & 0x7F) << v98;
            if ((v103 & 0x80) == 0)
              goto LABEL_204;
            v98 += 7;
            v30 = v99++ >= 9;
            if (v30)
            {
              LODWORD(v48) = 0;
              goto LABEL_206;
            }
          }
          *(_BYTE *)(v3 + *v21) = 1;
LABEL_204:
          if (*(_BYTE *)(v3 + *v21))
            LODWORD(v48) = 0;
LABEL_206:
          v118 = 120;
LABEL_207:
          *(_DWORD *)(a1 + v118) = v48;
        }
        else
        {
LABEL_164:
          v116 = PBReaderSkipValueWithTag();
          v22 = (int *)MEMORY[0x1E0D82BB8];
          v21 = (int *)MEMORY[0x1E0D82BC8];
          v18 = v131;
          if ((v116 & 1) == 0)
          {
            v128 = 0;
            goto LABEL_225;
          }
        }
        goto LABEL_223;
      default:
        switch((int)v33)
        {
          case 200:
            if ((v130 & 1) == 0)
              goto LABEL_164;
            v46 = 0;
            v47 = 0;
            v48 = 0;
            *(_DWORD *)(a1 + 140) |= 0x40u;
            while (2)
            {
              v49 = *v20;
              v50 = *(_QWORD *)(v3 + v49);
              v51 = v50 + 1;
              if (v50 == -1 || v51 > *(_QWORD *)(v3 + *v6))
              {
                *(_BYTE *)(v3 + *v21) = 1;
              }
              else
              {
                v52 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v50);
                *(_QWORD *)(v3 + v49) = v51;
                v48 |= (unint64_t)(v52 & 0x7F) << v46;
                if (v52 < 0)
                {
                  v46 += 7;
                  v30 = v47++ >= 9;
                  if (v30)
                  {
                    LODWORD(v48) = 0;
                    goto LABEL_173;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(v3 + *v21))
              LODWORD(v48) = 0;
LABEL_173:
            v118 = 124;
            goto LABEL_207;
          case 201:
            if (!v34)
              goto LABEL_164;
            if ((*(_BYTE *)(a1 + 142) & 2) != 0)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_247;
              v121 = (int)(*(_DWORD *)(a1 + 140) << 14) >> 31;
LABEL_221:
              v7 += v121;
LABEL_222:
              v18 = v131;
              v21 = (int *)MEMORY[0x1E0D82BC8];
              v22 = (int *)MEMORY[0x1E0D82BB8];
LABEL_223:
              if (!(v132 & 1 | (v7 != 0)))
                goto LABEL_224;
              continue;
            }
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_247;
            v65 = objc_alloc_init(GEOMapItemInitialRequestData);
            if (GEOMapItemInitialRequestDataReadAllFrom((uint64_t)v65, (void *)v3, v10 & 1))
            {
              PBReaderRecallMark();
              v78 = 88;
LABEL_151:
              v107 = *(void **)(a1 + v78);
              *(_QWORD *)(a1 + v78) = v65;
LABEL_155:

              --v7;
              goto LABEL_222;
            }
LABEL_246:

LABEL_247:
            v128 = 0;
            v18 = v131;
            v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_225:
            if ((v129 & 1) != 0)
LABEL_226:
              *(_DWORD *)(a1 + 140) |= 0x800u;
            if (v18 & 1 | ((v128 & 1) == 0))
            {
              *(_DWORD *)(a1 + 140) |= 0x2000u;
              *(_DWORD *)(a1 + 140) |= 0x4000u;
              *(_DWORD *)(a1 + 140) |= 0x10000u;
              *(_DWORD *)(a1 + 140) |= 0x1000u;
              *(_DWORD *)(a1 + 140) |= 0x20000u;
              *(_DWORD *)(a1 + 140) |= 0x8000u;
              goto LABEL_240;
            }
            if (v19)
            {
              while (1)
              {
                v123 = *v19++;
                v122 = v123;
                if (v123 <= 200)
                {
                  v124 = v122 - 4;
                  v125 = 0x2000;
                  switch(v124)
                  {
                    case 0:
                      goto LABEL_239;
                    case 3:
                      v125 = 0x4000;
                      goto LABEL_239;
                    case 5:
                      v125 = 0x10000;
                      goto LABEL_239;
                    case 8:
                      v125 = 4096;
                      goto LABEL_239;
                    default:
                      continue;
                  }
                }
                if (v122 == 201)
                {
                  v125 = 0x20000;
                }
                else
                {
                  if (v122 != 202)
                    continue;
                  v125 = 0x8000;
                }
LABEL_239:
                *(_DWORD *)(a1 + 140) |= v125;
              }
            }
LABEL_240:
            if (v128)
            {
              v3 = *(_BYTE *)(v3 + *v21) == 0;
              if ((v18 & 1) == 0)
                return v3;
LABEL_244:
              v126 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = 0;

            }
            else
            {
              v3 = 0;
              if ((v18 & 1) != 0)
                goto LABEL_244;
            }
            return v3;
          case 202:
            if (!v34)
              goto LABEL_164;
            if ((*(_BYTE *)(a1 + 141) & 0x80) == 0)
            {
              PBReaderReadString();
              v108 = objc_claimAutoreleasedReturnValue();
              v107 = *(void **)(a1 + 64);
              *(_QWORD *)(a1 + 64) = v108;
              goto LABEL_155;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_247;
            v121 = (int)(*(_DWORD *)(a1 + 140) << 16) >> 31;
            goto LABEL_221;
          case 203:
            if ((v130 & 1) == 0)
              goto LABEL_164;
            v109 = 0;
            v110 = 0;
            v111 = 0;
            *(_DWORD *)(a1 + 140) |= 0x400u;
            while (2)
            {
              v112 = *v20;
              v113 = *(_QWORD *)(v3 + v112);
              v114 = v113 + 1;
              if (v113 == -1 || v114 > *(_QWORD *)(v3 + *v6))
              {
                *(_BYTE *)(v3 + *v21) = 1;
              }
              else
              {
                v115 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v113);
                *(_QWORD *)(v3 + v112) = v114;
                v111 |= (unint64_t)(v115 & 0x7F) << v109;
                if (v115 < 0)
                {
                  v109 += 7;
                  v30 = v110++ >= 9;
                  if (v30)
                  {
                    v111 = 0;
                    goto LABEL_211;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(v3 + *v21))
              v111 = 0;
LABEL_211:
            v119 = v111 != 0;
            v120 = 137;
LABEL_212:
            *(_BYTE *)(a1 + v120) = v119;
            goto LABEL_223;
          default:
            if ((v129 & 1) == 0 || (*(_BYTE *)(a1 + 141) & 8) != 0)
              goto LABEL_164;
            if (!*(_QWORD *)(a1 + 16))
            {
              v104 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v105 = *(void **)(a1 + 16);
              *(_QWORD *)(a1 + 16) = v104;

            }
            v106 = PBUnknownFieldAdd();
            v18 = v131;
            v21 = (int *)MEMORY[0x1E0D82BC8];
            v22 = (int *)MEMORY[0x1E0D82BB8];
            if (v106)
              goto LABEL_223;
            v128 = 0;
            goto LABEL_226;
        }
    }
  }
}

BOOL GEOPDComponentReadAllFrom(uint64_t a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  GEOPDAttribution *v56;
  uint64_t v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  void *v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  _BOOL8 v84;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      while (!v5[*v8])
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          v17 = v11++ >= 9;
          if (v17)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        switch((v12 >> 3))
        {
          case 1u:
            v20 = 0;
            v21 = 0;
            v22 = 0;
            *(_WORD *)(a1 + 100) |= 0x80u;
            while (1)
            {
              v23 = *v6;
              v24 = *(_QWORD *)&v5[v23];
              v25 = v24 + 1;
              if (v24 == -1 || v25 > *(_QWORD *)&v5[*v7])
                break;
              v26 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v24);
              *(_QWORD *)&v5[v23] = v25;
              v22 |= (unint64_t)(v26 & 0x7F) << v20;
              if ((v26 & 0x80) == 0)
                goto LABEL_108;
              v20 += 7;
              v17 = v21++ >= 9;
              if (v17)
              {
                LODWORD(v22) = 0;
                goto LABEL_110;
              }
            }
            v5[*v8] = 1;
LABEL_108:
            if (v5[*v8])
              LODWORD(v22) = 0;
LABEL_110:
            v83 = 88;
            goto LABEL_143;
          case 2u:
            v32 = 0;
            v33 = 0;
            v22 = 0;
            *(_WORD *)(a1 + 100) |= 0x20u;
            while (2)
            {
              v34 = *v6;
              v35 = *(_QWORD *)&v5[v34];
              v36 = v35 + 1;
              if (v35 == -1 || v36 > *(_QWORD *)&v5[*v7])
              {
                v5[*v8] = 1;
              }
              else
              {
                v37 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v35);
                *(_QWORD *)&v5[v34] = v36;
                v22 |= (unint64_t)(v37 & 0x7F) << v32;
                if (v37 < 0)
                {
                  v32 += 7;
                  v17 = v33++ >= 9;
                  if (v17)
                  {
                    LODWORD(v22) = 0;
                    goto LABEL_114;
                  }
                  continue;
                }
              }
              break;
            }
            if (v5[*v8])
              LODWORD(v22) = 0;
LABEL_114:
            v83 = 80;
            goto LABEL_143;
          case 3u:
            goto LABEL_31;
          case 4u:
            v38 = 0;
            v39 = 0;
            v22 = 0;
            *(_WORD *)(a1 + 100) |= 0x40u;
            while (2)
            {
              v40 = *v6;
              v41 = *(_QWORD *)&v5[v40];
              v42 = v41 + 1;
              if (v41 == -1 || v42 > *(_QWORD *)&v5[*v7])
              {
                v5[*v8] = 1;
              }
              else
              {
                v43 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v41);
                *(_QWORD *)&v5[v40] = v42;
                v22 |= (unint64_t)(v43 & 0x7F) << v38;
                if (v43 < 0)
                {
                  v38 += 7;
                  v17 = v39++ >= 9;
                  if (v17)
                  {
                    LODWORD(v22) = 0;
                    goto LABEL_118;
                  }
                  continue;
                }
              }
              break;
            }
            if (v5[*v8])
              LODWORD(v22) = 0;
LABEL_118:
            v83 = 84;
            goto LABEL_143;
          case 5u:
            v44 = 0;
            v45 = 0;
            v22 = 0;
            *(_WORD *)(a1 + 100) |= 0x10u;
            while (2)
            {
              v46 = *v6;
              v47 = *(_QWORD *)&v5[v46];
              v48 = v47 + 1;
              if (v47 == -1 || v48 > *(_QWORD *)&v5[*v7])
              {
                v5[*v8] = 1;
              }
              else
              {
                v49 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v47);
                *(_QWORD *)&v5[v46] = v48;
                v22 |= (unint64_t)(v49 & 0x7F) << v44;
                if (v49 < 0)
                {
                  v44 += 7;
                  v17 = v45++ >= 9;
                  if (v17)
                  {
                    LODWORD(v22) = 0;
                    goto LABEL_122;
                  }
                  continue;
                }
              }
              break;
            }
            if (v5[*v8])
              LODWORD(v22) = 0;
LABEL_122:
            v83 = 76;
            goto LABEL_143;
          case 6u:
            v50 = 0;
            v51 = 0;
            v22 = 0;
            *(_WORD *)(a1 + 100) |= 0x100u;
            while (2)
            {
              v52 = *v6;
              v53 = *(_QWORD *)&v5[v52];
              v54 = v53 + 1;
              if (v53 == -1 || v54 > *(_QWORD *)&v5[*v7])
              {
                v5[*v8] = 1;
              }
              else
              {
                v55 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v53);
                *(_QWORD *)&v5[v52] = v54;
                v22 |= (unint64_t)(v55 & 0x7F) << v50;
                if (v55 < 0)
                {
                  v50 += 7;
                  v17 = v51++ >= 9;
                  if (v17)
                  {
                    LODWORD(v22) = 0;
                    goto LABEL_126;
                  }
                  continue;
                }
              }
              break;
            }
            if (v5[*v8])
              LODWORD(v22) = 0;
LABEL_126:
            v83 = 92;
            goto LABEL_143;
          case 7u:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_150;
            v56 = objc_alloc_init(GEOPDAttribution);
            if (!GEOPDAttributionReadAllFrom((uint64_t)v56, v5, a3))
              goto LABEL_149;
            PBReaderRecallMark();
            v57 = 16;
            goto LABEL_81;
          case 8u:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_150;
            v56 = objc_alloc_init(GEOPDComponentValue);
            if (!GEOPDComponentValueReadAllFrom((uint64_t)v56, v5, a3))
              goto LABEL_149;
            PBReaderRecallMark();
            -[GEOPDComponent addValue:](a1, v56);
            goto LABEL_99;
          case 9u:
            PBReaderReadString();
            v56 = (GEOPDAttribution *)objc_claimAutoreleasedReturnValue();
            if (v56)
              -[GEOPDComponent addVersionDomain:](a1, v56);
            goto LABEL_99;
          case 0xAu:
            v58 = 0;
            v59 = 0;
            v22 = 0;
            *(_WORD *)(a1 + 100) |= 0x200u;
            while (2)
            {
              v60 = *v6;
              v61 = *(_QWORD *)&v5[v60];
              v62 = v61 + 1;
              if (v61 == -1 || v62 > *(_QWORD *)&v5[*v7])
              {
                v5[*v8] = 1;
              }
              else
              {
                v63 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v61);
                *(_QWORD *)&v5[v60] = v62;
                v22 |= (unint64_t)(v63 & 0x7F) << v58;
                if (v63 < 0)
                {
                  v58 += 7;
                  v17 = v59++ >= 9;
                  if (v17)
                  {
                    LODWORD(v22) = 0;
                    goto LABEL_130;
                  }
                  continue;
                }
              }
              break;
            }
            if (v5[*v8])
              LODWORD(v22) = 0;
LABEL_130:
            v83 = 96;
            goto LABEL_143;
          case 0xBu:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_150;
            v56 = objc_alloc_init(GEOPDSource);
            if (!GEOPDSourceReadAllFrom((uint64_t)v56, v5, a3))
              goto LABEL_149;
            PBReaderRecallMark();
            v57 = 32;
LABEL_81:
            v64 = *(void **)(a1 + v57);
            *(_QWORD *)(a1 + v57) = v56;

            goto LABEL_144;
          case 0xCu:
            v65 = 0;
            v66 = 0;
            v22 = 0;
            *(_WORD *)(a1 + 100) |= 2u;
            while (2)
            {
              v67 = *v6;
              v68 = *(_QWORD *)&v5[v67];
              v69 = v68 + 1;
              if (v68 == -1 || v69 > *(_QWORD *)&v5[*v7])
              {
                v5[*v8] = 1;
              }
              else
              {
                v70 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v68);
                *(_QWORD *)&v5[v67] = v69;
                v22 |= (unint64_t)(v70 & 0x7F) << v65;
                if (v70 < 0)
                {
                  v65 += 7;
                  v17 = v66++ >= 9;
                  if (v17)
                  {
                    LODWORD(v22) = 0;
                    goto LABEL_134;
                  }
                  continue;
                }
              }
              break;
            }
            if (v5[*v8])
              LODWORD(v22) = 0;
LABEL_134:
            v83 = 64;
            goto LABEL_143;
          case 0xDu:
            v71 = 0;
            v72 = 0;
            v22 = 0;
            *(_WORD *)(a1 + 100) |= 4u;
            while (2)
            {
              v73 = *v6;
              v74 = *(_QWORD *)&v5[v73];
              v75 = v74 + 1;
              if (v74 == -1 || v75 > *(_QWORD *)&v5[*v7])
              {
                v5[*v8] = 1;
              }
              else
              {
                v76 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v74);
                *(_QWORD *)&v5[v73] = v75;
                v22 |= (unint64_t)(v76 & 0x7F) << v71;
                if (v76 < 0)
                {
                  v71 += 7;
                  v17 = v72++ >= 9;
                  if (v17)
                  {
                    LODWORD(v22) = 0;
                    goto LABEL_138;
                  }
                  continue;
                }
              }
              break;
            }
            if (v5[*v8])
              LODWORD(v22) = 0;
LABEL_138:
            v83 = 68;
            goto LABEL_143;
          case 0xEu:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_150;
            v56 = objc_alloc_init(GEOPDAttribution);
            if (!GEOPDAttributionReadAllFrom((uint64_t)v56, v5, a3))
            {
LABEL_149:

              goto LABEL_150;
            }
            PBReaderRecallMark();
            -[GEOPDComponent addCommingledAttributions:](a1, v56);
LABEL_99:

LABEL_144:
            if (*(_QWORD *)&v5[*v6] >= *(_QWORD *)&v5[*v7])
              goto LABEL_148;
            break;
          case 0xFu:
            v77 = 0;
            v78 = 0;
            v22 = 0;
            *(_WORD *)(a1 + 100) |= 8u;
            while (2)
            {
              v79 = *v6;
              v80 = *(_QWORD *)&v5[v79];
              v81 = v80 + 1;
              if (v80 == -1 || v81 > *(_QWORD *)&v5[*v7])
              {
                v5[*v8] = 1;
              }
              else
              {
                v82 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v80);
                *(_QWORD *)&v5[v79] = v81;
                v22 |= (unint64_t)(v82 & 0x7F) << v77;
                if (v82 < 0)
                {
                  v77 += 7;
                  v17 = v78++ >= 9;
                  if (v17)
                  {
                    LODWORD(v22) = 0;
                    goto LABEL_142;
                  }
                  continue;
                }
              }
              break;
            }
            if (v5[*v8])
              LODWORD(v22) = 0;
LABEL_142:
            v83 = 72;
LABEL_143:
            *(_DWORD *)(a1 + v83) = v22;
            goto LABEL_144;
          default:
            if ((v12 >> 3) == 2000)
            {
              *(_WORD *)(a1 + 100) |= 1u;
              v27 = *v6;
              v28 = *(_QWORD *)&v5[v27];
              if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)&v5[*v7])
              {
                v29 = *(_QWORD *)(*(_QWORD *)&v5[*v9] + v28);
                *(_QWORD *)&v5[v27] = v28 + 8;
              }
              else
              {
                v5[*v8] = 1;
                v29 = 0;
              }
              *(_QWORD *)(a1 + 40) = v29;
            }
            else
            {
LABEL_31:
              if (!*(_QWORD *)(a1 + 8))
              {
                v30 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
                v31 = *(void **)(a1 + 8);
                *(_QWORD *)(a1 + 8) = v30;

              }
              if (!PBUnknownFieldAdd())
                goto LABEL_150;
            }
            goto LABEL_144;
        }
      }
    }
LABEL_148:
    v84 = v5[*v8] == 0;
  }
  else
  {
LABEL_150:
    v84 = 0;
  }
  objc_sync_exit(v5);

  return v84;
}

void sub_1885DF8F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOResourceReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  id v43;
  void *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  GEOResourceFilter *v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  char v80;
  uint64_t v81;
  __int16 v82;
  int v83;
  __int16 v84;
  void *v85;
  int v87;
  int *v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 76);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 72));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (unsigned __int16)(vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 112)), (uint16x4_t)0xFFF5FFF8FFF6FFF7) & 0xFF01FF01FF01FF01))+ ((*(_WORD *)(a1 + 112) >> 7) & 1));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 2;
        v17 = v16 | v11;
        v89 = v16 & ~(_BYTE)v11 | v9;
        v90 = v8;
        v92 = v16 | v11 | v89;
        if ((((v16 | v11) | v8) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        v93 = (v18 == 0) | v17;
        v20 = (int *)MEMORY[0x1E0D82BC8];
        v21 = (int *)MEMORY[0x1E0D82BB8];
        v91 = v16 | v11;
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (*(_QWORD *)(v3 + *v19) < *(_QWORD *)(v3 + *v6) && !*(_BYTE *)(v3 + *v20))
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v19;
      v26 = *(_QWORD *)(v3 + v25);
      if (v26 == -1 || v26 >= *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v26);
      *(_QWORD *)(v3 + v25) = v26 + 1;
      v24 |= (unint64_t)(v27 & 0x7F) << v22;
      if ((v27 & 0x80) == 0)
        goto LABEL_25;
      v22 += 7;
      v28 = v23++ >= 9;
      if (v28)
      {
        v24 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v20) = 1;
LABEL_25:
    v29 = *(unsigned __int8 *)(v3 + *v20);
    if (*(_BYTE *)(v3 + *v20))
      v24 = 0;
LABEL_27:
    if (v29 || (v24 & 7) == 4)
      break;
    v31 = v24 >> 3;
    v32 = v17;
    if ((v93 & 1) == 0)
    {
      v33 = v18;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v90 & 1) == 0)
          goto LABEL_118;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 112) |= 8u;
        while (1)
        {
          v40 = *v19;
          v41 = *(_QWORD *)(v3 + v40);
          if (v41 == -1 || v41 >= *(_QWORD *)(v3 + *v6))
            break;
          v42 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v41);
          *(_QWORD *)(v3 + v40) = v41 + 1;
          v39 |= (unint64_t)(v42 & 0x7F) << v37;
          if ((v42 & 0x80) == 0)
            goto LABEL_121;
          v37 += 7;
          v28 = v38++ >= 9;
          if (v28)
          {
            LODWORD(v39) = 0;
            goto LABEL_123;
          }
        }
        *(_BYTE *)(v3 + *v20) = 1;
LABEL_121:
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v39) = 0;
LABEL_123:
        v81 = 96;
        goto LABEL_148;
      case 2:
        if (!v32)
          goto LABEL_118;
        if ((*(_WORD *)(a1 + 112) & 0x400) == 0)
        {
          PBReaderReadString();
          v46 = objc_claimAutoreleasedReturnValue();
          v47 = 56;
          goto LABEL_59;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_175;
        v82 = 32 * *(_WORD *)(a1 + 112);
        goto LABEL_153;
      case 3:
        if (!v32)
          goto LABEL_118;
        if ((*(_WORD *)(a1 + 112) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_175;
          v82 = *(_WORD *)(a1 + 112) << 6;
LABEL_153:
          v7 += v82 >> 15;
        }
        else
        {
          PBReaderReadData();
          v46 = objc_claimAutoreleasedReturnValue();
          v47 = 48;
LABEL_59:
          v48 = *(void **)(a1 + v47);
          *(_QWORD *)(a1 + v47) = v46;

          --v7;
        }
        goto LABEL_154;
      case 4:
        if (!v32 || (*(_WORD *)(a1 + 112) & 0x100) != 0)
          goto LABEL_118;
        if (!PBReaderPlaceMark())
          goto LABEL_175;
        -[GEOResource _reserveRegions:](a1, 1uLL);
        if (!GEOTileSetRegionReadAllFrom((_DWORD *)(*(_QWORD *)(a1 + 24) + 24 * *(_QWORD *)(a1 + 32)), v3))
          goto LABEL_175;
        PBReaderRecallMark();
        ++*(_QWORD *)(a1 + 32);
        goto LABEL_154;
      case 5:
        if (!v32 || (*(_WORD *)(a1 + 112) & 0x800) != 0)
          goto LABEL_118;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_175;
        v49 = objc_alloc_init(GEOResourceFilter);
        if (GEOResourceFilterReadAllFrom((uint64_t)v49, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          -[GEOResource _addNoFlagsFilter:](a1, v49);

LABEL_154:
          v17 = v91;
          v20 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_155;
        }

LABEL_175:
        v87 = 0;
        v88 = &OBJC_IVAR___GEOComposedRoute__avoidsHighways;
        v17 = v91;
        v20 = (int *)MEMORY[0x1E0D82BC8];
LABEL_158:
        if ((v89 & 1) != 0)
LABEL_159:
          *(_WORD *)(a1 + v88[115]) |= 0x80u;
        if (v17 & 1 | ((v87 & 1) == 0))
        {
          *(_WORD *)(a1 + v88[115]) |= 0x400u;
          *(_WORD *)(a1 + v88[115]) |= 0x200u;
          *(_WORD *)(a1 + v88[115]) |= 0x100u;
          *(_WORD *)(a1 + v88[115]) |= 0x800u;
        }
        else if (v18)
        {
          while (1)
          {
            v83 = *v18++;
            v84 = 1024;
            switch(v83)
            {
              case 0:
                goto LABEL_168;
              case 2:
                goto LABEL_167;
              case 3:
                v84 = 512;
                goto LABEL_167;
              case 4:
                v84 = 256;
                goto LABEL_167;
              case 5:
                v84 = 2048;
LABEL_167:
                *(_WORD *)(a1 + v88[115]) |= v84;
                break;
              default:
                continue;
            }
          }
        }
LABEL_168:
        if (v87)
        {
          v3 = *(_BYTE *)(v3 + *v20) == 0;
          if ((v17 & 1) == 0)
            return v3;
LABEL_172:
          v85 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        else
        {
          v3 = 0;
          if ((v17 & 1) != 0)
            goto LABEL_172;
        }
        return v3;
      case 6:
        if ((v90 & 1) == 0)
          goto LABEL_118;
        v50 = 0;
        v51 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 112) |= 2u;
        while (2)
        {
          v52 = *v19;
          v53 = *(_QWORD *)(v3 + v52);
          if (v53 == -1 || v53 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v54 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v53);
            *(_QWORD *)(v3 + v52) = v53 + 1;
            v39 |= (unint64_t)(v54 & 0x7F) << v50;
            if (v54 < 0)
            {
              v50 += 7;
              v28 = v51++ >= 9;
              if (v28)
              {
                LODWORD(v39) = 0;
                goto LABEL_127;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v39) = 0;
LABEL_127:
        v81 = 88;
        goto LABEL_148;
      case 7:
        if ((v90 & 1) == 0)
          goto LABEL_118;
        v55 = 0;
        v56 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 112) |= 4u;
        while (2)
        {
          v57 = *v19;
          v58 = *(_QWORD *)(v3 + v57);
          if (v58 == -1 || v58 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v58);
            *(_QWORD *)(v3 + v57) = v58 + 1;
            v39 |= (unint64_t)(v59 & 0x7F) << v55;
            if (v59 < 0)
            {
              v55 += 7;
              v28 = v56++ >= 9;
              if (v28)
              {
                LODWORD(v39) = 0;
                goto LABEL_131;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v39) = 0;
LABEL_131:
        v81 = 92;
        goto LABEL_148;
      case 8:
        if ((v90 & 1) == 0)
          goto LABEL_118;
        v60 = 0;
        v61 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 112) |= 0x40u;
        while (2)
        {
          v62 = *v19;
          v63 = *(_QWORD *)(v3 + v62);
          if (v63 == -1 || v63 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v64 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v63);
            *(_QWORD *)(v3 + v62) = v63 + 1;
            v39 |= (unint64_t)(v64 & 0x7F) << v60;
            if (v64 < 0)
            {
              v60 += 7;
              v28 = v61++ >= 9;
              if (v28)
              {
                LODWORD(v39) = 0;
                goto LABEL_135;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v39) = 0;
LABEL_135:
        v81 = 108;
        goto LABEL_148;
      case 9:
        if ((v90 & 1) == 0)
          goto LABEL_118;
        v65 = 0;
        v66 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 112) |= 1u;
        while (2)
        {
          v67 = *v19;
          v68 = *(_QWORD *)(v3 + v67);
          if (v68 == -1 || v68 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v69 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v68);
            *(_QWORD *)(v3 + v67) = v68 + 1;
            v39 |= (unint64_t)(v69 & 0x7F) << v65;
            if (v69 < 0)
            {
              v65 += 7;
              v28 = v66++ >= 9;
              if (v28)
              {
                LODWORD(v39) = 0;
                goto LABEL_139;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v39) = 0;
LABEL_139:
        v81 = 84;
        goto LABEL_148;
      case 10:
        if ((v90 & 1) == 0)
          goto LABEL_118;
        v70 = 0;
        v71 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 112) |= 0x20u;
        while (2)
        {
          v72 = *v19;
          v73 = *(_QWORD *)(v3 + v72);
          if (v73 == -1 || v73 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v74 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v73);
            *(_QWORD *)(v3 + v72) = v73 + 1;
            v39 |= (unint64_t)(v74 & 0x7F) << v70;
            if (v74 < 0)
            {
              v70 += 7;
              v28 = v71++ >= 9;
              if (v28)
              {
                LODWORD(v39) = 0;
                goto LABEL_143;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v39) = 0;
LABEL_143:
        v81 = 104;
        goto LABEL_148;
      case 11:
        if ((v90 & 1) == 0)
          goto LABEL_118;
        v75 = 0;
        v76 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 112) |= 0x10u;
        while (2)
        {
          v77 = *v19;
          v78 = *(_QWORD *)(v3 + v77);
          if (v78 == -1 || v78 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v79 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v78);
            *(_QWORD *)(v3 + v77) = v78 + 1;
            v39 |= (unint64_t)(v79 & 0x7F) << v75;
            if (v79 < 0)
            {
              v75 += 7;
              v28 = v76++ >= 9;
              if (v28)
              {
                LODWORD(v39) = 0;
                goto LABEL_147;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v39) = 0;
LABEL_147:
        v81 = 100;
LABEL_148:
        *(_DWORD *)(a1 + v81) = v39;
        goto LABEL_155;
      default:
        if ((v89 & 1) == 0 || (*(_WORD *)(a1 + 112) & 0x80) != 0)
        {
LABEL_118:
          v80 = PBReaderSkipValueWithTag();
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v17 = v91;
          if ((v80 & 1) == 0)
          {
            v87 = 0;
LABEL_157:
            v88 = &OBJC_IVAR___GEOComposedRoute__avoidsHighways;
            goto LABEL_158;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v43 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v44 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v43;

          }
          v45 = PBUnknownFieldAdd();
          v17 = v91;
          v20 = (int *)MEMORY[0x1E0D82BC8];
          if (!v45)
          {
            v87 = 0;
            v88 = &OBJC_IVAR___GEOComposedRoute__avoidsHighways;
            goto LABEL_159;
          }
        }
LABEL_155:
        if (!(v92 & 1 | (v7 != 0)))
          goto LABEL_156;
        break;
    }
  }
LABEL_156:
  v87 = 1;
  goto LABEL_157;
}

void sub_1885E0EA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885E2014(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885E2C0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885E2E04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void ___setDefaultNonRecursive_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  _GEOConfigDBUpdateOperation *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  _GEOConfigDBDeleteOperation *v19;
  id v20;
  uint64_t v21;
  _GEOConfigDBInsertOperation *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id (*v29)(_QWORD *, void *, void *);
  void *v30;
  id v31;
  id v32;
  uint64_t *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  void (*v39)(uint64_t);
  id v40;
  uint8_t buf[4];
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v35 = 0;
  v36 = &v35;
  v37 = 0x3032000000;
  v38 = __Block_byref_object_copy_;
  v39 = __Block_byref_object_dispose_;
  v40 = 0;
  v34 = 0;
  v27 = MEMORY[0x1E0C809B0];
  v28 = 3221225472;
  v29 = ___setDefaultNonRecursive_block_invoke_2;
  v30 = &unk_1E1BFFA60;
  v33 = &v35;
  v4 = *(void **)(a1 + 32);
  v31 = *(id *)(a1 + 40);
  v32 = *(id *)(a1 + 48);
  _valueForKeyPath(v3, v4, &v34, &v27);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v34;
  v7 = *(_QWORD *)(a1 + 40);
  if (v7 && v5)
  {
    if (objc_msgSend(v5, "dbId", v27, v28, v29, v30, v31))
    {
      objc_msgSend(v5, "type");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if ((objc_msgSend(v8, "isEqualToString:", *(_QWORD *)(a1 + 48)) & 1) != 0)
      {
        objc_msgSend(v5, "value");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v9, "isEqual:", *(_QWORD *)(a1 + 40));

        if ((v10 & 1) != 0)
        {
          v7 = *(_QWORD *)(a1 + 40);
          goto LABEL_7;
        }
      }
      else
      {

      }
    }
    objc_msgSend(v5, "setType:", *(_QWORD *)(a1 + 48));
    objc_msgSend(v5, "setValue:", *(_QWORD *)(a1 + 40));
    if (*(_QWORD *)(a1 + 40))
    {
      v11 = objc_msgSend(v5, "dbId");
      v12 = *(void **)(a1 + 56);
      if (v11)
      {
        objc_msgSend(v12, "operationQueue");
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = [_GEOConfigDBUpdateOperation alloc];
        v15 = *(_QWORD *)(a1 + 56);
        v16 = objc_msgSend(v5, "dbId");
        objc_msgSend(v5, "type");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v18 = -[_GEOConfigDBUpdateOperation init:rowId:type:value:](v14, "init:rowId:type:value:", v15, v16, v17, *(_QWORD *)(a1 + 64));
        -[NSObject enqueueOperation:](v13, "enqueueOperation:", v18);
      }
      else
      {
        objc_msgSend(v5, "setDbId:", objc_msgSend(v12, "nextId"));
        objc_msgSend(*(id *)(a1 + 56), "operationQueue");
        v13 = objc_claimAutoreleasedReturnValue();
        v22 = [_GEOConfigDBInsertOperation alloc];
        v23 = *(_QWORD *)(a1 + 56);
        v24 = objc_msgSend(v5, "dbId");
        objc_msgSend(v5, "type");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = *(_QWORD *)(a1 + 64);
        objc_msgSend(v5, "parent");
        v18 = (id)objc_claimAutoreleasedReturnValue();
        v26 = -[_GEOConfigDBInsertOperation init:rowId:type:key:value:parentId:](v22, "init:rowId:type:key:value:parentId:", v23, v24, v17, v6, v25, objc_msgSend(v18, "dbId"));
        -[NSObject enqueueOperation:](v13, "enqueueOperation:", v26);

      }
      goto LABEL_19;
    }
LABEL_14:
    if (v36[5])
    {
      objc_msgSend(*(id *)(a1 + 56), "operationQueue");
      v13 = objc_claimAutoreleasedReturnValue();
      v19 = [_GEOConfigDBDeleteOperation alloc];
      v20 = -[_GEOConfigDBDeleteOperation init:rowId:](v19, "init:rowId:", *(_QWORD *)(a1 + 56), objc_msgSend((id)v36[5], "dbId"));
      -[NSObject enqueueOperation:](v13, "enqueueOperation:", v20);

    }
    else
    {
      j__GEOGetUserDefaultsLog();
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        v21 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v42 = v21;
        _os_log_impl(&dword_1885A9000, v13, OS_LOG_TYPE_DEBUG, "Can not clear value for keyPath '%@' because no existing value was found", buf, 0xCu);
      }
    }
LABEL_19:

    goto LABEL_20;
  }
LABEL_7:
  if (!v7)
    goto LABEL_14;
LABEL_20:

  _Block_object_dispose(&v35, 8);
}

void sub_1885E3920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _valueForKeyPath(void *a1, void *a2, _QWORD *a3, void *a4)
{
  id v7;
  id v8;
  void (**v9)(id, void *, void *);
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  NSObject *v21;
  int v23;
  id v24;
  __int16 v25;
  void *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a4;
  v10 = v7;
  v11 = objc_msgSend(v8, "count");
  v12 = v10;
  v13 = v11 - 1;
  if (v11 == 1)
  {
LABEL_6:
    objc_msgSend(v8, "lastObject");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v17;
    if (a3)
      *a3 = objc_retainAutorelease(v17);
    objc_msgSend(v12, "objectForKeyedSubscript:", v18);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      v9[2](v9, v19, v12);
      v20 = objc_claimAutoreleasedReturnValue();

      objc_msgSend(v12, "setObject:forKeyedSubscript:", v20, v18);
      v19 = (void *)v20;
    }

    v15 = v12;
  }
  else
  {
    v14 = 0;
    v15 = v10;
    while (1)
    {
      objc_msgSend(v8, "objectAtIndexedSubscript:", v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "objectForKeyedSubscript:", v16);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v12)
        break;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        j__GEOGetUserDefaultsLog();
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          v23 = 138412546;
          v24 = v8;
          v25 = 2112;
          v26 = v16;
          _os_log_impl(&dword_1885A9000, v21, OS_LOG_TYPE_ERROR, "Can not retrieve value for keyPath '%@' because sub-item '%@' is not a collection", (uint8_t *)&v23, 0x16u);
        }

        break;
      }

      ++v14;
      v15 = v12;
      if (v13 == v14)
        goto LABEL_6;
    }

    v19 = 0;
  }

  return v19;
}

id _GEOGetAllValuesInStore(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  GEOConfigGetAllValueInStoreRequest *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = a1 & 0xFF0000;
  if ((a1 & 0xFF0000uLL) < 0x40000)
  {
    if (v2 == 0x10000)
    {
      v3 = 3;
      goto LABEL_13;
    }
    if (v2 == 0x20000)
    {
      v3 = 6;
      goto LABEL_13;
    }
  }
  else
  {
    if ((a1 & 0xFF0000) == 0x40000)
    {
      v3 = 7;
      goto LABEL_13;
    }
    if (v2 == 0x80000)
    {
      v3 = 8;
      goto LABEL_13;
    }
    if (v2 == 983040)
    {
      v3 = 2;
      goto LABEL_13;
    }
  }
  v3 = 0;
LABEL_13:
  if ((_MergedGlobals_194 & 1) != 0)
  {
    v7 = (void *)MEMORY[0x1E0C9AA70];
  }
  else
  {
    if (_GEODefaultsUseServer)
    {
      v4 = -[GEOConfigGetAllValueInStoreRequest initWithTraits:auditToken:throttleToken:]([GEOConfigGetAllValueInStoreRequest alloc], "initWithTraits:auditToken:throttleToken:", 0, 0, 0);
      -[GEOConfigGetAllValueInStoreRequest setKeyOptions:](v4, "setKeyOptions:", a1);
      _GEODefaultsServerConnection();
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      -[GEOXPCRequest sendSync:error:](v4, "sendSync:error:", v5, 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v6, "keyStringsAndValues");
      v7 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      _directStoreForSource(v3);
      v4 = (GEOConfigGetAllValueInStoreRequest *)objc_claimAutoreleasedReturnValue();
      -[GEOConfigGetAllValueInStoreRequest getConfigValueForKey:countryCode:options:source:](v4, "getConfigValueForKey:countryCode:options:source:", 0, 0, 0, 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
    }

  }
  return v7;
}

void _GEOAddChangeListenerForKeys(void *a1)
{
  GEOConfigAddChangeListenerRequest *v1;
  void *v2;
  id v3;

  v3 = a1;
  if (objc_msgSend(v3, "count") && _GEODefaultsUseServer)
  {
    v1 = -[GEOConfigAddChangeListenerRequest initWithTraits:auditToken:throttleToken:]([GEOConfigAddChangeListenerRequest alloc], "initWithTraits:auditToken:throttleToken:", 0, 0, 0);
    -[GEOConfigAddChangeListenerRequest setKeysAndSources:](v1, "setKeysAndSources:", v3);
    _GEODefaultsServerConnection();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    -[GEOXPCRequest send:](v1, "send:", v2);

  }
}

id _GEODefaultsServerConnection()
{
  uint8_t v1[16];

  if (_MergedGlobals_194 == 1 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Assertion failed: !_GEODefaultsDisableServer", v1, 2u);
  }
  if (qword_1ECDBBAA8 != -1)
    dispatch_once(&qword_1ECDBBAA8, &__block_literal_global_85);
  return (id)qword_1ECDBBAA0;
}

id _countrySpecificKeyPathComponents(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v9[2];
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  GEOConfig_stripEntitlement(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  GEOConfig_splitKeyPathComponents(v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v5, "count") == 1)
  {
    v10[0] = CFSTR("CountryProviders");
    v10[1] = v3;
    v10[2] = v4;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v10, 3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v9[0] = CFSTR("CountryProviders");
    v9[1] = v3;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v9, 2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v7, "arrayByAddingObjectsFromArray:", v5);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = v7;
  }

  return v6;
}

id GEOConfig_splitKeyPathComponents(void *a1)
{
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "componentsSeparatedByString:", CFSTR("/"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v1, "count") == 1)
  {
    v2 = v1;
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v3 = v1;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      while (2)
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          if (!objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v7), "length", (_QWORD)v11))
          {

            objc_msgSend(MEMORY[0x1E0CB3880], "predicateWithBlock:", &__block_literal_global_110);
            v9 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v3, "filteredArrayUsingPredicate:", v9);
            v8 = (void *)objc_claimAutoreleasedReturnValue();

            goto LABEL_14;
          }
          ++v7;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
        if (v5)
          continue;
        break;
      }
    }

    v2 = v3;
  }
  v8 = v2;
LABEL_14:

  return v8;
}

void sub_1885E4564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1885E4654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id GEOGetGEODaemonLog()
{
  if (qword_1ECDBCD28 != -1)
    dispatch_once(&qword_1ECDBCD28, &__block_literal_global_213);
  return (id)_MergedGlobals_345;
}

void GEOSetThrottleToken(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;

  v6 = a1;
  v5 = a2;
  if (v6 && v5)
    GEOEncodeXPCValue(v6, "throttleToken", v5, a3);

}

void sub_1885E57DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void GEOEncodeModernXPCMessage(void *a1, void *a2)
{
  id v3;
  id v4;
  xpc_object_t value;

  v3 = a2;
  v4 = a1;
  value = xpc_dictionary_create(0, 0, 0);
  objc_msgSend(v4, "encodeToXPCDictionary:", value);

  xpc_dictionary_set_value(v3, "__msg", value);
}

id _geoDefaultsToDict(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  _QWORD v6[4];
  id v7;

  v1 = (void *)MEMORY[0x1E0C99E08];
  v2 = a1;
  objc_msgSend(v1, "dictionaryWithCapacity:", objc_msgSend(v2, "count"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___geoDefaultsToDict_block_invoke;
  v6[3] = &unk_1E1BFFAB0;
  v4 = v3;
  v7 = v4;
  objc_msgSend(v2, "enumerateKeysAndObjectsUsingBlock:", v6);

  return v4;
}

void sub_1885E60B4(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

id _directStoreForSource(uint64_t a1)
{
  void *v2;

  v2 = 0;
  switch(a1)
  {
    case 2:
      _GEOConfigStorageCFPrefsReadWrite();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 6:
      _GEOConfigStorageSystem();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 7:
      _GEOConfigStorageUser();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    case 8:
      _GEOConfigStorageXPC();
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      break;
    default:
      return v2;
  }
  return v2;
}

id ___setDefaultNonRecursive_block_invoke_2(_QWORD *a1, void *a2, void *a3)
{
  id v6;
  id v7;
  __objc2_class *v8;
  void *v9;
  id v10;
  uint64_t v11;

  v6 = a2;
  v7 = a3;
  objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), a2);
  if (a1[4])
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v8 = GEODefaultsDBDict;
LABEL_9:
        -[__objc2_class dbValue:](v8, "dbValue:", v7);
        v10 = (id)objc_claimAutoreleasedReturnValue();
LABEL_13:
        v9 = v10;
        goto LABEL_14;
      }
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v8 = GEODefaultsDBArray;
          goto LABEL_9;
        }
      }
      else
      {
        v11 = objc_opt_class();
        if (v11 != objc_opt_class())
        {
          +[GEODefaultsDBValue dbValue:type:value:](GEODefaultsDBValue, "dbValue:type:value:", v7, a1[5], a1[4]);
          v10 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_13;
        }
      }
    }
    v10 = v6;
    goto LABEL_13;
  }
  v9 = 0;
LABEL_14:

  return v9;
}

id _GEOConfigStorageSystem()
{
  if (qword_1ECDBC718 != -1)
    dispatch_once(&qword_1ECDBC718, &__block_literal_global_160);
  return (id)_MergedGlobals_298;
}

void sub_1885E6C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _GEOConfigStorageUser()
{
  if (qword_1ECDBC718 != -1)
    dispatch_once(&qword_1ECDBC718, &__block_literal_global_160);
  return (id)qword_1ECDBC708;
}

void std::__shared_ptr_emplace<geo::codec::VectorTile,geo::StdAllocator<geo::codec::VectorTile,geo::codec::Allocator>>::__on_zero_shared(uint64_t a1, GeoCodecsVertexPool *a2)
{
  geo::codec::VectorTile::~VectorTile((geo::codec::VectorTile *)(a1 + 32), a2);
}

void sub_1885E7E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _GEOConfigAddDelegateListenerForKey(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;

  v7 = a3;
  v8 = a4;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = ___GEOConfigAddDelegateListenerForKey_block_invoke;
  v12[3] = &unk_1E1C106A8;
  v13 = v7;
  v14 = v8;
  v9 = v8;
  v10 = v7;
  v11 = _GEOConfigAddListenerForKey(a1, a2, v12);

}

void sub_1885E81B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1885E8600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _GEOGetURLWithSource(uint64_t a1, _QWORD *a2, int a3, void *a4)
{
  id v7;
  id v8;
  void (**v9)(_QWORD, _QWORD);
  int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  BOOL v18;
  BOOL v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[4];
  id v33;
  uint64_t v34;

  v7 = a4;
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 3221225472;
  v32[2] = ___GEOGetURLWithSource_block_invoke;
  v32[3] = &unk_1E1C13070;
  v33 = v7;
  v34 = a1;
  v8 = v7;
  v9 = (void (**)(_QWORD, _QWORD))MEMORY[0x18D765024](v32);
  v30 = 0u;
  v31 = 0u;
  v29 = 0u;
  _recordForType(a1, (uint64_t)&v29);
  v27 = 0;
  v28 = 0;
  v10 = DWORD2(v29);
  v11 = v30;
  _getValue(SDWORD2(v29), v30, 1, 0, &v27, v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v12)
  {
    switch(v27)
    {
      case 1:
        v15 = 1;
        goto LABEL_7;
      case 2:
      case 7:
      case 8:
        v28 = 2;
        v14 = v12;
        goto LABEL_21;
      case 3:
        v15 = 4;
        goto LABEL_7;
      case 4:
        v15 = 5;
LABEL_7:
        v28 = v15;
        break;
      default:
        break;
    }
    v16 = v12;
  }
  _getValue(GeoServicesConfig_CustomEnvironmentConfiguration, (uint64_t)off_1EDF4E858, 1, 0, 0, 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17)
    v18 = v10 == 0;
  else
    v18 = 1;
  v19 = v18 || v11 == 0;
  v14 = v13;
  if (!v19)
  {
    v26 = a3;
    GEODefaultsKeyStringForConfigKey(v10, v11);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "objectForKey:", v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v9)[2](v9, v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = v22;
    v14 = v13;
    if (v22)
    {
      v14 = v22;

      v28 = 3;
    }

    a3 = v26;
  }

  if (!v14)
  {
    _GEOURLWorldDefaultURLStringWithSource(a1, &v28, a3);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, void *))v9)[2](v9, v24);
    v14 = (id)objc_claimAutoreleasedReturnValue();

  }
LABEL_21:
  if (a2)
    *a2 = v28;

  return v14;
}

__n128 _recordForType@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[3];
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  const __CFString *v14;
  uint64_t v15;
  __int128 v16;
  const __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  const __CFString *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  const __CFString *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  const __CFString *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  const __CFString *v49;
  uint64_t v50;
  __int128 v51;
  const __CFString *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  const __CFString *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  const __CFString *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  const __CFString *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  const __CFString *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  const __CFString *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  const __CFString *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  const __CFString *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  const __CFString *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  const __CFString *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  const __CFString *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  const __CFString *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  const __CFString *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  const __CFString *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  const __CFString *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  const __CFString *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  const __CFString *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  const __CFString *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  const __CFString *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  const __CFString *v157;
  const __CFString *v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  const __CFString *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __int128 v171;
  const __CFString *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  const __CFString *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  const __CFString *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  __int128 v206;
  const __CFString *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  __int128 v211;
  const __CFString *v212;
  const __CFString *v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  const __CFString *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  __int128 v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  __int128 v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  __int128 v231;
  const __CFString *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  __int128 v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  __int128 v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  __int128 v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  __int128 v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  __int128 v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  __int128 v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  __int128 v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  __int128 v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  __int128 v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  __int128 v286;
  uint64_t v287;
  uint64_t v288;
  const __CFString *v289;
  uint64_t v290;
  __int128 v291;
  uint64_t v292;
  uint64_t v293;
  const __CFString *v294;
  uint64_t v295;

  v295 = *MEMORY[0x1E0C80C00];
  objc_opt_self();
  if (registerStateCaptureIfNecessary_onceToken != -1)
    dispatch_once(&registerStateCaptureIfNecessary_onceToken, &__block_literal_global_201_0);
  v5 = 0;
  v7 = 0;
  v8 = GeoServicesConfig_NetworkDefaultsURL;
  v9 = 0;
  v10[0] = CFSTR("https://configuration-carry.ls.apple.com/config/defaults");
  v10[1] = CFSTR("https://configuration.ls.apple.com/config/defaults");
  v10[2] = 1;
  v11 = GeoServicesConfig_ResourceManifestURL;
  v12 = 0;
  v13 = 0;
  v14 = CFSTR("https://gspe35-ssl.ls.apple.com/geo_manifest/dynamic/config%{DEVICE_QUERY}");
  v15 = 2;
  v16 = GeoServicesConfig_VoltaireDirectionsURL;
  v17 = CFSTR("Directions");
  v18 = 0;
  v19 = 0;
  v20 = 5;
  v21 = GeoServicesConfig_VoltaireETAURL;
  v22 = CFSTR("ETA");
  v23 = 0;
  v24 = 0;
  v25 = 9;
  v26 = GeoServicesConfig_SearchAttributionManifestURL;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 10;
  v31 = GeoServicesConfig_VoltaireProblemSubmissionURL;
  v32 = CFSTR("ProblemSubmission");
  v33 = 0;
  v34 = 0;
  v35 = 11;
  v36 = GeoServicesConfig_VoltaireProblemStatusURL;
  v37 = CFSTR("ProblemStatus");
  v38 = 0;
  v39 = 0;
  v40 = 12;
  v41 = GeoServicesConfig_LocalizedCategoriesURL;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 14;
  v46 = GeoServicesConfig_CurrentCountryURL;
  v47 = 0;
  v48 = 0;
  v49 = CFSTR("https://gspe1-ssl.ls.apple.com/pep/gcc");
  v50 = 15;
  v51 = GeoServicesConfig_VoltairePolyLocationShiftURL;
  v52 = CFSTR("LocationShift");
  v53 = 0;
  v54 = 0;
  v55 = 16;
  v56 = GeoServicesConfig_VoltaireBatchReverseGeocoderURL;
  v59 = 0;
  v60 = 18;
  v57 = CFSTR("BatchReverseGeocode");
  v58 = 0;
  v61 = GeoServicesConfig_URLSimpleETAURL;
  v62 = CFSTR("SimpleETA");
  v64 = 0;
  v65 = 19;
  v63 = 0;
  v66 = GeoServicesConfig_URLAddressCorrectionInitURL;
  v67 = CFSTR("AddressCorrection");
  v70 = 20;
  v69 = 0;
  v68 = 0;
  v71 = GeoServicesConfig_URLAddressCorrectionUpdateURL;
  v72 = CFSTR("AddressCorrection");
  v74 = 0;
  v73 = 0;
  v75 = 21;
  v76 = GeoServicesConfig_URLReverseGeocoderVersionFileURL;
  v78 = 0;
  v77 = 0;
  v79 = 0;
  v80 = 23;
  v81 = GeoServicesConfig_VoltaireAnnouncementsURL;
  v83 = 0;
  v82 = 0;
  v85 = 24;
  v84 = 0;
  v86 = GeoServicesConfig_DispatcherURL;
  v87 = CFSTR("PlaceDataLookup");
  v89 = 0;
  v90 = 25;
  v88 = 0;
  v91 = GeoServicesConfig_ProblemOptInURL;
  v92 = CFSTR("ProblemOptIn");
  v94 = 0;
  v95 = 26;
  v93 = 0;
  v96 = GeoServicesConfig_ExperimentsURL;
  v97 = CFSTR("ExperimentRequest");
  v99 = 0;
  v100 = 27;
  v98 = 0;
  v101 = GeoServicesConfig_BusinessPortalBaseURL;
  v102 = CFSTR("BusinessPortalBaseURL");
  v104 = 0;
  v105 = 28;
  v103 = 0;
  v106 = GeoServicesConfig_VoltaireLogMessageUsageURL;
  v107 = CFSTR("LogMessageUsageURL");
  v109 = 0;
  v110 = 29;
  v108 = 0;
  v111 = GeoServicesConfig_SpatialLookupURL;
  v112 = CFSTR("SpatialLookup");
  v114 = 0;
  v115 = 30;
  v113 = 0;
  v116 = GeoServicesConfig_RealtimeTrafficProbeURL;
  v117 = CFSTR("RealtimeTrafficProbe");
  v119 = 0;
  v120 = 31;
  v118 = 0;
  v121 = GeoServicesConfig_BatchTrafficProbeURL;
  v122 = CFSTR("BatchTrafficProbe");
  v124 = 0;
  v125 = 32;
  v123 = 0;
  v126 = GeoServicesConfig_LogMessageUsageV3URL;
  v127 = CFSTR("LogMessageUsageV3URL");
  v129 = 0;
  v130 = 33;
  v128 = 0;
  v131 = GeoServicesConfig_ProactiveRoutingURL;
  v132 = CFSTR("ProactiveRouting");
  v134 = 0;
  v135 = 34;
  v133 = 0;
  v136 = GeoServicesConfig_BackgroundDispatcherURL;
  v137 = CFSTR("BackgroundDispatcher");
  v139 = 0;
  v140 = 35;
  v138 = 0;
  v141 = GeoServicesConfig_BluePOIURL;
  v142 = CFSTR("BluePOI");
  v144 = 0;
  v145 = 36;
  v143 = 0;
  v146 = GeoServicesConfig_BackgroundRevGeoURL;
  v147 = CFSTR("BackgroundRevGeo");
  v149 = 0;
  v150 = 37;
  v148 = 0;
  v151 = GeoServicesConfig_ImageServiceURL;
  v152 = CFSTR("ImageService");
  v154 = 0;
  v155 = 38;
  v153 = 0;
  v156 = GeoServicesConfig_WiFiConnectionQualityProbeURL;
  v157 = CFSTR("WiFiConnectionQualityProbe");
  v158 = CFSTR("https://gsp10-carry.ls.apple.com/hvr/wcq");
  v159 = 0;
  v160 = 39;
  v161 = GeoServicesConfig_MapsAuthProxy;
  v163 = 0;
  v162 = 0;
  v165 = 40;
  v164 = 0;
  v166 = GeoServicesConfig_MuninBaseURL;
  v167 = CFSTR("MuninBase");
  v169 = 0;
  v170 = 41;
  v168 = 0;
  v171 = GeoServicesConfig_WiFiQualityURL;
  v172 = CFSTR("WiFiQuality");
  v174 = 0;
  v175 = 42;
  v173 = 0;
  v176 = GeoServicesConfig_FeedbackSubmissionURL;
  v177 = CFSTR("RAPFeedbackSubmission");
  v179 = 0;
  v180 = 43;
  v178 = 0;
  v181 = GeoServicesConfig_FeedbackLookupURL;
  v182 = CFSTR("RAPFeedbackLookup");
  v184 = 0;
  v185 = 44;
  v183 = 0;
  v186 = GeoServicesConfig_AnalyticsCohortSessionURL;
  v188 = 0;
  v187 = 0;
  v189 = 0;
  v190 = 45;
  v191 = GeoServicesConfig_AnalyticsLongSessionURL;
  v193 = 0;
  v192 = 0;
  v194 = 0;
  v195 = 46;
  v196 = GeoServicesConfig_AnalyticsShortSessionURL;
  v198 = 0;
  v197 = 0;
  v200 = 47;
  v199 = 0;
  v201 = GeoServicesConfig_AnalyticsSessionlessURL;
  v203 = 0;
  v202 = 0;
  v204 = 0;
  v205 = 48;
  v206 = GeoServicesConfig_WebModuleBaseURL;
  v207 = CFSTR("WebModuleBase");
  v209 = 0;
  v208 = 0;
  v210 = 49;
  v211 = GeoServicesConfig_WiFiTileURL;
  v212 = CFSTR("WiFiTile");
  v213 = CFSTR("https://gsp85-carry.ls.apple.com/wifi_request_tile");
  v214 = 0;
  v215 = 50;
  v216 = GeoServicesConfig_TokenAuthenticationURL;
  v217 = CFSTR("UGCTokenAuthentication");
  v219 = 0;
  v220 = 51;
  v218 = 0;
  v221 = GeoServicesConfig_MapsAuthClientFeatureFlags;
  v223 = 0;
  v222 = 0;
  v224 = 0;
  v225 = 52;
  v226 = GeoServicesConfig_AddressCorrectionTaggedLocationURL;
  v228 = 0;
  v227 = 0;
  v229 = 0;
  v230 = 53;
  v231 = GeoServicesConfig_EnrichmentSubmissionURL;
  v232 = CFSTR("POIEnrichmentSubmission");
  v234 = 0;
  v233 = 0;
  v235 = 54;
  v236 = GeoServicesConfig_UGCDeleteServiceURL;
  v238 = 0;
  v237 = 0;
  v240 = 55;
  v239 = 0;
  v241 = GeoServicesConfig_BatchRevGeoPlaceRequestURL;
  v243 = 0;
  v242 = 0;
  v244 = 0;
  v245 = 56;
  v246 = GeoServicesConfig_PressureDataURL;
  v248 = 0;
  v247 = 0;
  v249 = 0;
  v250 = 57;
  v251 = GeoServicesConfig_BusynessDataURL;
  v253 = 0;
  v252 = 0;
  v255 = 58;
  v254 = 0;
  v256 = GeoServicesConfig_RAPWebModuleBaseURL;
  v258 = 0;
  v257 = 0;
  v259 = 0;
  v260 = 59;
  v261 = GeoServicesConfig_NetworkSelectionHarvestURL;
  v263 = 0;
  v262 = 0;
  v264 = 0;
  v265 = 60;
  v266 = GeoOfflineConfig_BatchListURL;
  v268 = 0;
  v267 = 0;
  v270 = 61;
  v269 = 0;
  v271 = GeoOfflineConfig_SizeURL;
  v273 = 0;
  v272 = 0;
  v274 = 0;
  v275 = 62;
  v276 = GeoOfflineConfig_DownloadURL;
  v278 = 0;
  v277 = 0;
  v279 = 0;
  v280 = 63;
  v281 = GeoServicesConfig_BCXDispatcherURL;
  v283 = 0;
  v282 = 0;
  v285 = 64;
  v284 = 0;
  v286 = GeoServicesConfig_ConnectivityCheckURL;
  v288 = 0;
  v287 = 0;
  v289 = CFSTR("https://gspe1-ssl.ls.apple.com/pep/gcc");
  v290 = 65;
  v291 = GeoServicesConfig_CoreLocationKACURL;
  v293 = 0;
  v292 = 0;
  v294 = CFSTR("https://gspe79-ssl.ls.apple.com/ligl/v1/ligl.bin");
  while (*(uint64_t *)((char *)&v7 + v5 * 8) != a1)
  {
    v5 += 6;
    if (v5 == 348)
    {
      *(_QWORD *)a2 = 0;
      result.n128_u64[0] = GEOConfigKey_InvalidString;
      *(_OWORD *)(a2 + 8) = GEOConfigKey_InvalidString;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      return result;
    }
  }
  v6 = *(__int128 *)((char *)&v8 + v5 * 8 + 8);
  *(_OWORD *)a2 = *(_OWORD *)((char *)&v7 + v5 * 8);
  *(_OWORD *)(a2 + 16) = v6;
  result = *(__n128 *)&v10[v5];
  *(__n128 *)(a2 + 32) = result;
  return result;
}

id _GEOURLWorldDefaultURLStringWithSource(uint64_t a1, uint64_t *a2, int a3)
{
  void *v6;
  int v7;
  int BOOL;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  char v14;
  _OWORD v16[2];
  __int128 v17;

  v17 = 0u;
  memset(v16, 0, sizeof(v16));
  +[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform", _recordForType(a1, (uint64_t)v16).n128_f64[0]);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "isInternalInstall");

  if (v7)
  {
    BOOL = GEOConfigGetBOOL(GeoServicesConfig_UseProductionURLs, (uint64_t)off_1EDF4E868);
    if (!a3)
      goto LABEL_8;
  }
  else
  {
    BOOL = 1;
    if (!a3)
      goto LABEL_8;
  }
  _GEOURLInfoFromActiveTileGroup(a1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "url");
  v10 = (id)objc_claimAutoreleasedReturnValue();

  if (v10)
  {
    v11 = 6;
    if (!a2)
      return v10;
    goto LABEL_18;
  }
LABEL_8:
  v13 = (void *)*((_QWORD *)&v17 + 1);
  v12 = (void *)v17;
  if (BOOL)
    v12 = (void *)*((_QWORD *)&v17 + 1);
  v10 = v12;
  if (v10)
    v14 = 1;
  else
    v14 = BOOL;
  if ((v14 & 1) == 0)
    v10 = v13;
  v11 = 7;
  if (!v10)
    v11 = 0;
  if (a2)
LABEL_18:
    *a2 = v11;
  return v10;
}

id _GEOURLInfoFromActiveTileGroup(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  +[GEOResourceManifestManager modernManager](GEOResourceManifestManager, "modernManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "activeTileGroup");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "urlInfoSet");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = 0;
  switch(a1)
  {
    case 2:
      objc_msgSend(v4, "directionsURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 5:
      objc_msgSend(v4, "etaURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 9:
      objc_msgSend(v4, "searchAttributionManifestURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 10:
      objc_msgSend(v4, "problemSubmissionURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 11:
      objc_msgSend(v4, "problemStatusURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 12:
      objc_msgSend(v4, "problemCategoriesURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 15:
      objc_msgSend(v4, "polyLocationShiftURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 16:
      objc_msgSend(v4, "batchReverseGeocoderURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 18:
      objc_msgSend(v4, "simpleETAURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 19:
      objc_msgSend(v4, "addressCorrectionInitURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 20:
      objc_msgSend(v4, "addressCorrectionUpdateURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 21:
      objc_msgSend(v4, "reverseGeocoderVersionsURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 23:
      objc_msgSend(v4, "announcementsURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 24:
      objc_msgSend(v4, "dispatcherURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 25:
      objc_msgSend(v4, "problemOptInURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 26:
      objc_msgSend(v4, "abExperimentURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 27:
      objc_msgSend(v4, "businessPortalBaseURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 28:
      objc_msgSend(v4, "logMessageUsageURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 29:
      objc_msgSend(v4, "spatialLookupURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 30:
      objc_msgSend(v4, "realtimeTrafficProbeURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 31:
      objc_msgSend(v4, "batchTrafficProbeURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 32:
      objc_msgSend(v4, "logMessageUsageV3URL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 33:
      objc_msgSend(v4, "proactiveRoutingURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 34:
      objc_msgSend(v4, "backgroundDispatcherURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 35:
      objc_msgSend(v4, "bluePOIDispatcherURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 36:
      objc_msgSend(v4, "backgroundRevGeoURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 37:
      objc_msgSend(v4, "junctionImageServiceURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 38:
      objc_msgSend(v4, "wifiConnectionQualityProbeURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 39:
      objc_msgSend(v4, "authProxyURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 40:
      objc_msgSend(v4, "muninBaseURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 41:
      objc_msgSend(v4, "wifiQualityURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 42:
      objc_msgSend(v4, "feedbackSubmissionURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 43:
      objc_msgSend(v4, "feedbackLookupURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 44:
      objc_msgSend(v4, "analyticsCohortSessionURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 45:
      objc_msgSend(v4, "analyticsLongSessionURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 46:
      objc_msgSend(v4, "analyticsShortSessionURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 47:
      objc_msgSend(v4, "analyticsSessionlessURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 48:
      objc_msgSend(v4, "webModuleBaseURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 49:
      objc_msgSend(v4, "wifiQualityTileURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 50:
      objc_msgSend(v4, "tokenAuthenticationURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 51:
      objc_msgSend(v4, "authenticatedClientFeatureFlagURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 52:
      objc_msgSend(v4, "addressCorrectionTaggedLocationURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 53:
      objc_msgSend(v4, "enrichmentSubmissionURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 54:
      objc_msgSend(v4, "ugcLogDiscardURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 55:
      objc_msgSend(v4, "batchReverseGeocoderPlaceRequestURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 56:
      objc_msgSend(v4, "pressureProbeDataURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 57:
      objc_msgSend(v4, "poiBusynessActivityCollectionURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 58:
      objc_msgSend(v4, "rapWebBundleURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 59:
      objc_msgSend(v4, "networkSelectionHarvestURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 60:
      objc_msgSend(v4, "offlineDataBatchListURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 61:
      objc_msgSend(v4, "offlineDataSizeURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 62:
      objc_msgSend(v4, "offlineDataDownloadBaseURL");
      v6 = objc_claimAutoreleasedReturnValue();
      goto LABEL_55;
    case 63:
      objc_msgSend(v4, "bcxDispatcherURL");
      v6 = objc_claimAutoreleasedReturnValue();
LABEL_55:
      v5 = (void *)v6;
      break;
    default:
      break;
  }

  return v5;
}

void sub_1885E9A70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885E9C2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885E9F58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void GEOTileUnpackageBaseAndLocalization(void *a1, _QWORD *a2, _QWORD *a3)
{
  id v5;
  unint64_t v6;
  id v7;
  int v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;

  v5 = a1;
  *a2 = 0;
  *a3 = 0;
  v6 = objc_msgSend(v5, "length");
  v7 = objc_retainAutorelease(v5);
  if (v6 > 7)
  {
    v12 = v7;
    v8 = *(_DWORD *)objc_msgSend(v7, "bytes");
    v9 = objc_retainAutorelease(v12);
    v10 = v9;
    if (v8 == 1280262996)
    {
      v11 = *(unsigned int *)(objc_msgSend(v9, "bytes") + 4);
      objc_msgSend(v10, "subdataWithRange:", 8, v11 - 8);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "subdataWithRange:", v11, v6 - v11);
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      *a2 = v9;
    }
    v7 = v12;
  }
  else
  {
    *a2 = v7;
  }

}

void sub_1885EA6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  GeoCodecsVMP4DecodingOptions::~GeoCodecsVMP4DecodingOptions((GeoCodecsVMP4DecodingOptions *)&a15);
  geo::codec::PBDataReaderObjC::~PBDataReaderObjC((geo::codec::PBDataReaderObjC *)&a9);

  _Unwind_Resume(a1);
}

geo::codec::PBDataReaderObjC *geo::codec::PBDataReaderObjC::PBDataReaderObjC(geo::codec::PBDataReaderObjC *this, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)this = &off_1E1BF6860;
  *((_QWORD *)this + 1) = 0;
  if (a2 && a3)
  {
    v4 = objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", a2, a3);
    *((_QWORD *)this + 1) = objc_msgSend(objc_alloc(MEMORY[0x1E0D82B90]), "initWithData:", v4);
  }
  return this;
}

void geo::codec::PBDataReaderObjC::~PBDataReaderObjC(geo::codec::PBDataReaderObjC *this)
{
  void *v1;

  *(_QWORD *)this = &off_1E1BF6860;
  v1 = (void *)*((_QWORD *)this + 1);
  if (v1)

}

{
  void *v1;

  *(_QWORD *)this = &off_1E1BF6860;
  v1 = (void *)*((_QWORD *)this + 1);
  if (v1)

  JUMPOUT(0x18D76437CLL);
}

void sub_1885EACBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1885EB184(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::DescriptorPool::InternalAddGeneratedFile(AddrObjGoogle::protobuf::DescriptorPool *this, const void *a2)
{
  unsigned int v2;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v2 = a2;
  v4 = qword_1EDF508B0;
  __dmb(0xBu);
  if (v4 != 2)
  {
    v7[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E1BF6040;
    v7[0].__r_.__value_.__l.__size_ = (std::string::size_type)sub_188829E44;
    v7[0].__r_.__value_.__s.__data_[16] = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&qword_1EDF508B0, (uint64_t)v7);
    AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)v7);
  }
  if ((AddrObjGoogle::protobuf::EncodedDescriptorDatabase::Add((uint64_t **)qword_1EDF508A8, (char *)this, v2) & 1) == 0)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/descriptor.cc", 960);
    v5 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: generated_database_->Add(encoded_file_descriptor, size): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v6, (AddrObjGoogle::protobuf::internal::LogMessage *)v5);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
}

void sub_1885EB270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

AddrObjGoogle *AddrObjGoogle::protobuf::EncodedDescriptorDatabase::Add(uint64_t **this, char *a2, unsigned int a3)
{
  uint64_t v6;
  std::string *v7;
  char v9;
  std::string v10[2];
  _BYTE v11[208];

  AddrObjGoogle::protobuf::FileDescriptorProto::FileDescriptorProto((AddrObjGoogle::protobuf::FileDescriptorProto *)v11);
  if (AddrObjGoogle::protobuf::MessageLite::ParseFromArray((AddrObjGoogle::protobuf::MessageLite *)v11, a2, a3))
  {
    v6 = AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::AddFile(this + 1, (uint64_t)v11, (uint64_t)a2, a3);
  }
  else
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/descriptor_database.cc", 315);
    v7 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v10, "Invalid file descriptor data passed to EncodedDescriptorDatabase::Add().");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v9, (AddrObjGoogle::protobuf::internal::LogMessage *)v7);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    v6 = 0;
  }
  AddrObjGoogle::protobuf::FileDescriptorProto::~FileDescriptorProto((AddrObjGoogle::protobuf::FileDescriptorProto *)v11);
  return (AddrObjGoogle *)v6;
}

void sub_1885EB350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, void *);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  AddrObjGoogle::protobuf::FileDescriptorProto::~FileDescriptorProto((AddrObjGoogle::protobuf::FileDescriptorProto *)va1);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::FileDescriptorProto *AddrObjGoogle::protobuf::FileDescriptorProto::FileDescriptorProto(AddrObjGoogle::protobuf::FileDescriptorProto *this)
{
  AddrObjGoogle::protobuf::internal *v2;
  uint64_t *v3;

  *(_QWORD *)this = &off_1E1BF58F8;
  v2 = (AddrObjGoogle::protobuf::internal *)AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_DWORD *)this + 44) = 0;
  *((_DWORD *)this + 50) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 26) = 0;
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString(v2);
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 3) = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  *((_DWORD *)this + 51) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  return this;
}

void sub_1885EB440(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;

  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void sub_1885EB454()
{
  uint64_t v0;
  AddrObjGoogle::protobuf::UnknownFieldSet *v1;
  int *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;

  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(v3);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(v6);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(v5);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(v4);
  v8 = *(_QWORD *)(v0 + 72);
  if (v8)
    MEMORY[0x18D764364](v8, 0x1000C8052888210);
  if (*v7)
    MEMORY[0x18D764364](*v7, 0x1000C8052888210);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v2);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v1);
  JUMPOUT(0x1885EB444);
}

void AddrObjGoogle::protobuf::FileDescriptorProto::~FileDescriptorProto(AddrObjGoogle::protobuf::FileDescriptorProto *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E1BF58F8;
  AddrObjGoogle::protobuf::FileDescriptorProto::SharedDtor(this);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)this + 20);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)this + 17);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)this + 14);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)this + 11);
  v2 = *((_QWORD *)this + 9);
  if (v2)
    MEMORY[0x18D764364](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 7);
  if (v3)
    MEMORY[0x18D764364](v3, 0x1000C8052888210);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 8);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((AddrObjGoogle::protobuf::FileDescriptorProto *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

{
  AddrObjGoogle::protobuf::FileDescriptorProto::~FileDescriptorProto(this);
  JUMPOUT(0x18D76437CLL);
}

void addr_obj::V1AddressObject::~V1AddressObject(addr_obj::V1AddressObject *this)
{
  *(_QWORD *)this = &off_1E1BF93B8;
  std::unique_ptr<addr_obj::VenueInfo const>::reset[abi:ne180100]((void ****)this + 90, 0);
  addr_obj::geo3::Address::~Address((addr_obj::V1AddressObject *)((char *)this + 656));
  if (*((char *)this + 655) < 0)
    operator delete(*((void **)this + 79));
  addr_obj::geo3::StructuredAddress::~StructuredAddress((addr_obj::V1AddressObject *)((char *)this + 384));
  if (*((char *)this + 383) < 0)
    operator delete(*((void **)this + 45));
  if (*((char *)this + 359) < 0)
    operator delete(*((void **)this + 42));
  addr_obj::geo3::Address::~Address((addr_obj::V1AddressObject *)((char *)this + 272));
  if (*((char *)this + 271) < 0)
    operator delete(*((void **)this + 31));
  addr_obj::AddressObjectBase::~AddressObjectBase((void **)this);
}

{
  addr_obj::V1AddressObject::~V1AddressObject(this);
  JUMPOUT(0x18D76437CLL);
}

void addr_obj::geo3::StructuredAddress::~StructuredAddress(addr_obj::geo3::StructuredAddress *this)
{
  addr_obj::geo3::StructuredAddress::~StructuredAddress(this);
  JUMPOUT(0x18D76437CLL);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E1BF9FD0;
  addr_obj::geo3::StructuredAddress::SharedDtor(this);
  v2 = *((_QWORD *)this + 28);
  if (v2)
    MEMORY[0x18D764364](v2, 0x1000C8000313F17);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)this + 24);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 40);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 30);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((addr_obj::geo3::StructuredAddress *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

void addr_obj::geo3::Address::~Address(addr_obj::geo3::Address *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E1BFA130;
  if ((addr_obj::geo3::Address *)addr_obj::geo3::Address::default_instance_(this) != this)
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 4);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((addr_obj::geo3::Address *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

{
  addr_obj::geo3::Address::~Address(this);
  JUMPOUT(0x18D76437CLL);
}

uint64_t AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<std::string>::TypeHandler>(int *a1)
{
  uint64_t v2;
  uint64_t result;

  if (a1[3] >= 1)
  {
    v2 = 0;
    do
      AddrObjGoogle::protobuf::internal::StringTypeHandlerBase::Delete(*(_QWORD *)(*(_QWORD *)a1 + 8 * v2++));
    while (v2 < a1[3]);
  }
  result = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    JUMPOUT(0x18D764364);
  return result;
}

uint64_t AddrObjGoogle::protobuf::internal::StringTypeHandlerBase::Delete(uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 23) < 0)
      operator delete(*(void **)result);
    JUMPOUT(0x18D76437CLL);
  }
  return result;
}

uint64_t addr_obj::geo3::StructuredAddress::default_instance_(addr_obj::geo3::StructuredAddress *this)
{
  unsigned __int8 v1;
  addr_obj::geo3::StructuredAddress *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF504F8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF504F8))
  {
    v3 = (addr_obj::geo3::StructuredAddress *)operator new();
    addr_obj::geo3::StructuredAddress::StructuredAddress(v3);
    qword_1EDF504F0 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF504F8);
  }
  return qword_1EDF504F0;
}

void sub_1885EB850(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10B1C403F20F32DLL);
  __cxa_guard_abort(&qword_1EDF504F8);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::geo3::StructuredAddress::SharedDtor(addr_obj::geo3::StructuredAddress *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;

  v2 = (uint64_t *)*((_QWORD *)this + 2);
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  if (v2 != v3)
  {
    v4 = *((_QWORD *)this + 2);
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      v3 = (uint64_t *)MEMORY[0x18D76437C](v4, 0x1012C40EC159624);
    }
  }
  v5 = (uint64_t *)*((_QWORD *)this + 3);
  v6 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  if (v5 != v6)
  {
    v7 = *((_QWORD *)this + 3);
    if (v7)
    {
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      v6 = (uint64_t *)MEMORY[0x18D76437C](v7, 0x1012C40EC159624);
    }
  }
  v8 = (uint64_t *)*((_QWORD *)this + 4);
  v9 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v6);
  if (v8 != v9)
  {
    v10 = *((_QWORD *)this + 4);
    if (v10)
    {
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      v9 = (uint64_t *)MEMORY[0x18D76437C](v10, 0x1012C40EC159624);
    }
  }
  v11 = (uint64_t *)*((_QWORD *)this + 5);
  v12 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v9);
  if (v11 != v12)
  {
    v13 = *((_QWORD *)this + 5);
    if (v13)
    {
      if (*(char *)(v13 + 23) < 0)
        operator delete(*(void **)v13);
      v12 = (uint64_t *)MEMORY[0x18D76437C](v13, 0x1012C40EC159624);
    }
  }
  v14 = (uint64_t *)*((_QWORD *)this + 6);
  v15 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v12);
  if (v14 != v15)
  {
    v16 = *((_QWORD *)this + 6);
    if (v16)
    {
      if (*(char *)(v16 + 23) < 0)
        operator delete(*(void **)v16);
      v15 = (uint64_t *)MEMORY[0x18D76437C](v16, 0x1012C40EC159624);
    }
  }
  v17 = (uint64_t *)*((_QWORD *)this + 7);
  v18 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v15);
  if (v17 != v18)
  {
    v19 = *((_QWORD *)this + 7);
    if (v19)
    {
      if (*(char *)(v19 + 23) < 0)
        operator delete(*(void **)v19);
      v18 = (uint64_t *)MEMORY[0x18D76437C](v19, 0x1012C40EC159624);
    }
  }
  v20 = (uint64_t *)*((_QWORD *)this + 8);
  v21 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v18);
  if (v20 != v21)
  {
    v22 = *((_QWORD *)this + 8);
    if (v22)
    {
      if (*(char *)(v22 + 23) < 0)
        operator delete(*(void **)v22);
      v21 = (uint64_t *)MEMORY[0x18D76437C](v22, 0x1012C40EC159624);
    }
  }
  v23 = (uint64_t *)*((_QWORD *)this + 9);
  v24 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v21);
  if (v23 != v24)
  {
    v25 = *((_QWORD *)this + 9);
    if (v25)
    {
      if (*(char *)(v25 + 23) < 0)
        operator delete(*(void **)v25);
      v24 = (uint64_t *)MEMORY[0x18D76437C](v25, 0x1012C40EC159624);
    }
  }
  v26 = (uint64_t *)*((_QWORD *)this + 10);
  v27 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v24);
  if (v26 != v27)
  {
    v28 = *((_QWORD *)this + 10);
    if (v28)
    {
      if (*(char *)(v28 + 23) < 0)
        operator delete(*(void **)v28);
      v27 = (uint64_t *)MEMORY[0x18D76437C](v28, 0x1012C40EC159624);
    }
  }
  v29 = (uint64_t *)*((_QWORD *)this + 11);
  v30 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v27);
  if (v29 != v30)
  {
    v31 = *((_QWORD *)this + 11);
    if (v31)
    {
      if (*(char *)(v31 + 23) < 0)
        operator delete(*(void **)v31);
      v30 = (uint64_t *)MEMORY[0x18D76437C](v31, 0x1012C40EC159624);
    }
  }
  v32 = (uint64_t *)*((_QWORD *)this + 12);
  v33 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v30);
  if (v32 != v33)
  {
    v34 = *((_QWORD *)this + 12);
    if (v34)
    {
      if (*(char *)(v34 + 23) < 0)
        operator delete(*(void **)v34);
      v33 = (uint64_t *)MEMORY[0x18D76437C](v34, 0x1012C40EC159624);
    }
  }
  v35 = (uint64_t *)*((_QWORD *)this + 13);
  v36 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v33);
  if (v35 != v36)
  {
    v37 = *((_QWORD *)this + 13);
    if (v37)
    {
      if (*(char *)(v37 + 23) < 0)
        operator delete(*(void **)v37);
      v36 = (uint64_t *)MEMORY[0x18D76437C](v37, 0x1012C40EC159624);
    }
  }
  v38 = (uint64_t *)*((_QWORD *)this + 14);
  v39 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v36);
  if (v38 != v39)
  {
    v40 = *((_QWORD *)this + 14);
    if (v40)
    {
      if (*(char *)(v40 + 23) < 0)
        operator delete(*(void **)v40);
      v39 = (uint64_t *)MEMORY[0x18D76437C](v40, 0x1012C40EC159624);
    }
  }
  v41 = (uint64_t *)*((_QWORD *)this + 18);
  v42 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v39);
  if (v41 != v42)
  {
    v43 = *((_QWORD *)this + 18);
    if (v43)
    {
      if (*(char *)(v43 + 23) < 0)
        operator delete(*(void **)v43);
      v42 = (uint64_t *)MEMORY[0x18D76437C](v43, 0x1012C40EC159624);
    }
  }
  v44 = (uint64_t *)*((_QWORD *)this + 19);
  v45 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v42);
  if (v44 != v45)
  {
    v46 = *((_QWORD *)this + 19);
    if (v46)
    {
      if (*(char *)(v46 + 23) < 0)
        operator delete(*(void **)v46);
      v45 = (uint64_t *)MEMORY[0x18D76437C](v46, 0x1012C40EC159624);
    }
  }
  v47 = (uint64_t *)*((_QWORD *)this + 23);
  v48 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v45);
  if (v47 != v48)
  {
    v49 = *((_QWORD *)this + 23);
    if (v49)
    {
      if (*(char *)(v49 + 23) < 0)
        operator delete(*(void **)v49);
      v48 = (uint64_t *)MEMORY[0x18D76437C](v49, 0x1012C40EC159624);
    }
  }
  v50 = (uint64_t *)*((_QWORD *)this + 27);
  v51 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v48);
  if (v50 != v51)
  {
    v52 = *((_QWORD *)this + 27);
    if (v52)
    {
      if (*(char *)(v52 + 23) < 0)
        operator delete(*(void **)v52);
      v51 = (uint64_t *)MEMORY[0x18D76437C](v52, 0x1012C40EC159624);
    }
  }
  return addr_obj::geo3::StructuredAddress::default_instance_((addr_obj::geo3::StructuredAddress *)v51);
}

uint64_t AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(uint64_t *a1)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  uint64_t result;

  v2 = *((_DWORD *)a1 + 3);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*a1 + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)a1 + 3);
      }
    }
  }
  result = *a1;
  if (*a1)
    JUMPOUT(0x18D764364);
  return result;
}

uint64_t addr_obj::geo3::Address::default_instance_(addr_obj::geo3::Address *this)
{
  unsigned __int8 v1;
  addr_obj::geo3::Address *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF504E8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF504E8))
  {
    v3 = (addr_obj::geo3::Address *)operator new();
    addr_obj::geo3::Address::Address(v3);
    qword_1EDF504E0 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF504E8);
  }
  return qword_1EDF504E0;
}

void sub_1885EBDD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40C067BF1BLL);
  __cxa_guard_abort(&qword_1EDF504E8);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::EnumValueDescriptorProto::~EnumValueDescriptorProto(AddrObjGoogle::protobuf::EnumValueDescriptorProto *this)
{
  AddrObjGoogle::protobuf::EnumValueDescriptorProto::~EnumValueDescriptorProto(this);
  JUMPOUT(0x18D76437CLL);
}

{
  *(_QWORD *)this = &off_1E1BF5D40;
  AddrObjGoogle::protobuf::EnumValueDescriptorProto::SharedDtor(this);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((AddrObjGoogle::protobuf::EnumValueDescriptorProto *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

AddrObjGoogle::protobuf::EnumValueDescriptorProto *AddrObjGoogle::protobuf::EnumValueDescriptorProto::SharedDtor(AddrObjGoogle::protobuf::EnumValueDescriptorProto *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  AddrObjGoogle::protobuf::EnumValueDescriptorProto *result;

  v2 = (uint64_t *)*((_QWORD *)this + 2);
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  if (v2 != v3)
  {
    v4 = *((_QWORD *)this + 2);
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      v3 = (uint64_t *)MEMORY[0x18D76437C](v4, 0x1012C40EC159624);
    }
  }
  result = (AddrObjGoogle::protobuf::EnumValueDescriptorProto *)AddrObjGoogle::protobuf::EnumValueDescriptorProto::default_instance_((AddrObjGoogle::protobuf::EnumValueDescriptorProto *)v3);
  if (result != this)
  {
    result = (AddrObjGoogle::protobuf::EnumValueDescriptorProto *)*((_QWORD *)this + 3);
    if (result)
      return (AddrObjGoogle::protobuf::EnumValueDescriptorProto *)(*(uint64_t (**)(AddrObjGoogle::protobuf::EnumValueDescriptorProto *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t AddrObjGoogle::protobuf::EnumValueDescriptorProto::default_instance_(AddrObjGoogle::protobuf::EnumValueDescriptorProto *this)
{
  unsigned __int8 v1;
  AddrObjGoogle::protobuf::EnumValueDescriptorProto *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50578);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50578))
  {
    v3 = (AddrObjGoogle::protobuf::EnumValueDescriptorProto *)operator new();
    AddrObjGoogle::protobuf::EnumValueDescriptorProto::EnumValueDescriptorProto(v3);
    qword_1EDF50570 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50578);
  }
  return qword_1EDF50570;
}

void sub_1885EBF64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C406601F8D4);
  __cxa_guard_abort(&qword_1EDF50578);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::DescriptorProto::~DescriptorProto(AddrObjGoogle::protobuf::DescriptorProto *this)
{
  *(_QWORD *)this = &off_1E1BF5610;
  AddrObjGoogle::protobuf::DescriptorProto::SharedDtor(this);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)this + 15);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)this + 12);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)this + 9);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)this + 6);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)this + 3);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((AddrObjGoogle::protobuf::DescriptorProto *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

{
  AddrObjGoogle::protobuf::DescriptorProto::~DescriptorProto(this);
  JUMPOUT(0x18D76437CLL);
}

void AddrObjGoogle::protobuf::FieldDescriptorProto::~FieldDescriptorProto(AddrObjGoogle::protobuf::FieldDescriptorProto *this)
{
  AddrObjGoogle::protobuf::FieldDescriptorProto::~FieldDescriptorProto(this);
  JUMPOUT(0x18D76437CLL);
}

{
  *(_QWORD *)this = &off_1E1BF5A58;
  AddrObjGoogle::protobuf::FieldDescriptorProto::SharedDtor(this);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((AddrObjGoogle::protobuf::FieldDescriptorProto *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

void AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(AddrObjGoogle::protobuf::UnknownFieldSet *this)
{
  uint64_t v2;
  void *v3;

  if (*(_QWORD *)this)
  {
    AddrObjGoogle::protobuf::UnknownFieldSet::ClearFallback(this);
    v2 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v3 = *(void **)v2;
      if (*(_QWORD *)v2)
      {
        *(_QWORD *)(v2 + 8) = v3;
        operator delete(v3);
      }
      MEMORY[0x18D76437C](v2, 0x20C40960023A9);
    }
  }
}

AddrObjGoogle::protobuf::DescriptorProto *AddrObjGoogle::protobuf::DescriptorProto::SharedDtor(AddrObjGoogle::protobuf::DescriptorProto *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  AddrObjGoogle::protobuf::DescriptorProto *result;

  v2 = (uint64_t *)*((_QWORD *)this + 2);
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  if (v2 != v3)
  {
    v4 = *((_QWORD *)this + 2);
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      v3 = (uint64_t *)MEMORY[0x18D76437C](v4, 0x1012C40EC159624);
    }
  }
  result = (AddrObjGoogle::protobuf::DescriptorProto *)AddrObjGoogle::protobuf::DescriptorProto::default_instance_((AddrObjGoogle::protobuf::DescriptorProto *)v3);
  if (result != this)
  {
    result = (AddrObjGoogle::protobuf::DescriptorProto *)*((_QWORD *)this + 18);
    if (result)
      return (AddrObjGoogle::protobuf::DescriptorProto *)(*(uint64_t (**)(AddrObjGoogle::protobuf::DescriptorProto *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t AddrObjGoogle::protobuf::DescriptorProto::default_instance_(AddrObjGoogle::protobuf::DescriptorProto *this)
{
  unsigned __int8 v1;
  AddrObjGoogle::protobuf::DescriptorProto *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50548);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50548))
  {
    v3 = (AddrObjGoogle::protobuf::DescriptorProto *)operator new();
    AddrObjGoogle::protobuf::DescriptorProto::DescriptorProto(v3);
    qword_1EDF50540 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50548);
  }
  return qword_1EDF50540;
}

void sub_1885EC1FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C4073756666);
  __cxa_guard_abort(&qword_1EDF50548);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange::~DescriptorProto_ExtensionRange(AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange *this)
{
  AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange::~DescriptorProto_ExtensionRange(this);
  JUMPOUT(0x18D76437CLL);
}

{
  *(_QWORD *)this = &off_1E1BF5F90;
  AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange::default_instance_(this);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

uint64_t AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange::default_instance_(AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange *this)
{
  unsigned __int8 v1;
  AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50538);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50538))
  {
    v3 = (AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange *)operator new();
    AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange::DescriptorProto_ExtensionRange(v3);
    qword_1EDF50530 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50538);
  }
  return qword_1EDF50530;
}

void sub_1885EC308(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40380937A6);
  __cxa_guard_abort(&qword_1EDF50538);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::EnumDescriptorProto::~EnumDescriptorProto(AddrObjGoogle::protobuf::EnumDescriptorProto *this)
{
  AddrObjGoogle::protobuf::EnumDescriptorProto::~EnumDescriptorProto(this);
  JUMPOUT(0x18D76437CLL);
}

{
  *(_QWORD *)this = &off_1E1BF5848;
  AddrObjGoogle::protobuf::EnumDescriptorProto::SharedDtor(this);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)this + 3);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((AddrObjGoogle::protobuf::EnumDescriptorProto *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

uint64_t AddrObjGoogle::protobuf::EnumDescriptorProto::MergePartialFromCodedStream(uint64_t this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  uint64_t v5;
  int *v6;
  void ***v7;
  char *v8;
  AddrObjGoogle::protobuf::io::CodedInputStream *v9;
  unsigned int v10;
  int v11;
  uint64_t *v12;
  std::string *v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  AddrObjGoogle::protobuf::EnumValueDescriptorProto *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  AddrObjGoogle::protobuf::UnknownFieldSet *v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  AddrObjGoogle::protobuf::EnumOptions *v31;
  char *v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  AddrObjGoogle::protobuf::UnknownFieldSet *v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;

  v5 = this;
  v6 = (int *)(this + 24);
  v7 = (void ***)(this + 8);
  while (1)
  {
    while (1)
    {
LABEL_2:
      v8 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
      {
        this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        v9 = (AddrObjGoogle::protobuf::io::CodedInputStream *)this;
        *((_DWORD *)a2 + 8) = this;
        if (!(_DWORD)this)
          return 1;
      }
      else
      {
        v9 = (AddrObjGoogle::protobuf::io::CodedInputStream *)*v8;
        *((_DWORD *)a2 + 8) = (_DWORD)v9;
        *((_QWORD *)a2 + 1) = v8 + 1;
        if (!(_DWORD)v9)
          return 1;
      }
      v10 = v9 >> 3;
      if (v9 >> 3 != 1)
        break;
      v11 = v9 & 7;
      if (v11 != 2)
        goto LABEL_18;
      *(_DWORD *)(v5 + 60) |= 1u;
      v12 = *(uint64_t **)(v5 + 16);
      if (v12 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
      {
        v13 = (std::string *)operator new();
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        *(_QWORD *)(v5 + 16) = v13;
      }
      else
      {
        v13 = *(std::string **)(v5 + 16);
      }
      this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v13);
      if (!(_DWORD)this)
        return this;
      v14 = (_BYTE *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v14 < *((_QWORD *)a2 + 2) && *v14 == 18)
      {
        while (1)
        {
          *((_QWORD *)a2 + 1) = v14 + 1;
LABEL_26:
          v15 = *(_DWORD *)(v5 + 36);
          v16 = *(int *)(v5 + 32);
          if ((int)v16 >= v15)
          {
            if (v15 == *(_DWORD *)(v5 + 40))
            {
              AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v15 + 1);
              v15 = *(_DWORD *)(v5 + 36);
            }
            *(_DWORD *)(v5 + 36) = v15 + 1;
            v18 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<AddrObjGoogle::protobuf::EnumValueDescriptorProto>::New();
            v19 = *(_QWORD *)(v5 + 24);
            v20 = *(int *)(v5 + 32);
            *(_DWORD *)(v5 + 32) = v20 + 1;
            *(_QWORD *)(v19 + 8 * v20) = v18;
          }
          else
          {
            v17 = *(_QWORD *)(v5 + 24);
            *(_DWORD *)(v5 + 32) = v16 + 1;
            v18 = *(AddrObjGoogle::protobuf::EnumValueDescriptorProto **)(v17 + 8 * v16);
          }
          v40 = 0;
          v21 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v21 >= *((_QWORD *)a2 + 2) || *v21 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v40))
              return 0;
          }
          else
          {
            v40 = *v21;
            *((_QWORD *)a2 + 1) = v21 + 1;
          }
          v22 = *((_DWORD *)a2 + 14);
          v23 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v22 + 1;
          if (v22 >= v23)
            return 0;
          v24 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v40);
          if (!AddrObjGoogle::protobuf::EnumValueDescriptorProto::MergePartialFromCodedStream((uint64_t)v18, a2, v25, v26)|| !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v24);
          v27 = *((_DWORD *)a2 + 14);
          v28 = __OFSUB__(v27, 1);
          v29 = v27 - 1;
          if (v29 < 0 == v28)
            *((_DWORD *)a2 + 14) = v29;
          v14 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v14 >= *((_QWORD *)a2 + 2))
            break;
          v30 = *v14;
          if (v30 != 18)
          {
            if (v30 == 26)
            {
              *((_QWORD *)a2 + 1) = v14 + 1;
LABEL_44:
              *(_DWORD *)(v5 + 60) |= 4u;
              v31 = *(AddrObjGoogle::protobuf::EnumOptions **)(v5 + 48);
              if (!v31)
              {
                v31 = (AddrObjGoogle::protobuf::EnumOptions *)operator new();
                AddrObjGoogle::protobuf::EnumOptions::EnumOptions(v31);
                *(_QWORD *)(v5 + 48) = v31;
              }
              v41 = 0;
              v32 = (char *)*((_QWORD *)a2 + 1);
              if ((unint64_t)v32 >= *((_QWORD *)a2 + 2) || *v32 < 0)
              {
                if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v41))
                  return 0;
              }
              else
              {
                v41 = *v32;
                *((_QWORD *)a2 + 1) = v32 + 1;
              }
              v33 = *((_DWORD *)a2 + 14);
              v34 = *((_DWORD *)a2 + 15);
              *((_DWORD *)a2 + 14) = v33 + 1;
              if (v33 >= v34)
                return 0;
              v35 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v41);
              if (!AddrObjGoogle::protobuf::EnumOptions::MergePartialFromCodedStream((uint64_t)v31, a2, v36, v37)|| !*((_BYTE *)a2 + 36))
              {
                return 0;
              }
              this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v35);
              v38 = *((_DWORD *)a2 + 14);
              v28 = __OFSUB__(v38, 1);
              v39 = v38 - 1;
              if (v39 < 0 == v28)
                *((_DWORD *)a2 + 14) = v39;
              if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
                && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
              {
                *((_DWORD *)a2 + 8) = 0;
                this = 1;
                *((_BYTE *)a2 + 36) = 1;
                return this;
              }
            }
            goto LABEL_2;
          }
        }
      }
    }
    if (v10 == 2)
    {
      v11 = v9 & 7;
      if (v11 != 2)
        goto LABEL_18;
      goto LABEL_26;
    }
    if (v10 == 3)
    {
      v11 = v9 & 7;
      if (v11 == 2)
        goto LABEL_44;
    }
    else
    {
      v11 = v9 & 7;
    }
LABEL_18:
    if (v11 == 4)
      return 1;
    this = AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, v9, v7, a4);
    if ((this & 1) == 0)
      return 0;
  }
}

void sub_1885EC738(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40FFAE3E5BLL);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::EnumValueDescriptorProto *AddrObjGoogle::protobuf::internal::GenericTypeHandler<AddrObjGoogle::protobuf::EnumValueDescriptorProto>::New()
{
  AddrObjGoogle::protobuf::EnumValueDescriptorProto *v0;

  v0 = (AddrObjGoogle::protobuf::EnumValueDescriptorProto *)operator new();
  AddrObjGoogle::protobuf::EnumValueDescriptorProto::EnumValueDescriptorProto(v0);
  return v0;
}

void sub_1885EC798(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C406601F8D4);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::EnumValueDescriptorProto *AddrObjGoogle::protobuf::EnumValueDescriptorProto::EnumValueDescriptorProto(AddrObjGoogle::protobuf::EnumValueDescriptorProto *this)
{
  AddrObjGoogle::protobuf::internal *v2;
  uint64_t *v3;

  *(_QWORD *)this = &off_1E1BF5D40;
  v2 = (AddrObjGoogle::protobuf::internal *)AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_DWORD *)this + 9) = 0;
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString(v2);
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 10) = 0;
  return this;
}

void sub_1885EC810(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::UnknownFieldSet *v2;

  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::EnumValueDescriptorProto::MergePartialFromCodedStream(uint64_t this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  uint64_t v5;
  void ***v6;
  char *v7;
  AddrObjGoogle::protobuf::io::CodedInputStream *v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t *v12;
  std::string *v13;
  unint64_t v14;
  char *v15;
  _BYTE *v16;
  unsigned int v17;
  _BYTE *v18;
  AddrObjGoogle::protobuf::EnumValueOptions *v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  AddrObjGoogle::protobuf::UnknownFieldSet *v25;
  int v26;
  BOOL v27;
  int v28;
  unsigned int v29;
  unsigned int v30;

  v5 = this;
  v6 = (void ***)(this + 8);
  while (1)
  {
    do
    {
      while (1)
      {
        while (1)
        {
          v7 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
          {
            this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
            v8 = (AddrObjGoogle::protobuf::io::CodedInputStream *)this;
            *((_DWORD *)a2 + 8) = this;
            if (!(_DWORD)this)
              return 1;
          }
          else
          {
            v8 = (AddrObjGoogle::protobuf::io::CodedInputStream *)*v7;
            *((_DWORD *)a2 + 8) = (_DWORD)v8;
            *((_QWORD *)a2 + 1) = v7 + 1;
            if (!(_DWORD)v8)
              return 1;
          }
          v9 = v8 >> 3;
          if (v8 >> 3 != 1)
            break;
          v10 = v8 & 7;
          if (v10 != 2)
            goto LABEL_18;
          *(_DWORD *)(v5 + 40) |= 1u;
          v12 = *(uint64_t **)(v5 + 16);
          if (v12 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
          {
            v13 = (std::string *)operator new();
            v13->__r_.__value_.__l.__size_ = 0;
            v13->__r_.__value_.__r.__words[2] = 0;
            v13->__r_.__value_.__r.__words[0] = 0;
            *(_QWORD *)(v5 + 16) = v13;
          }
          else
          {
            v13 = *(std::string **)(v5 + 16);
          }
          this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v13);
          if (!(_DWORD)this)
            return this;
          v16 = (_BYTE *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v16 < v14 && *v16 == 16)
          {
            v15 = v16 + 1;
            *((_QWORD *)a2 + 1) = v15;
            goto LABEL_26;
          }
        }
        if (v9 == 2)
          break;
        if (v9 == 3)
        {
          v10 = v8 & 7;
          if (v10 == 2)
          {
            v11 = *(_DWORD *)(v5 + 40);
            goto LABEL_34;
          }
        }
        else
        {
          v10 = v8 & 7;
        }
LABEL_18:
        if (v10 == 4)
          return 1;
        this = AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, v8, v6, a4);
        if ((this & 1) == 0)
          return 0;
      }
      v10 = v8 & 7;
      if ((v8 & 7) != 0)
        goto LABEL_18;
      v15 = (char *)*((_QWORD *)a2 + 1);
      v14 = *((_QWORD *)a2 + 2);
LABEL_26:
      v29 = 0;
      if ((unint64_t)v15 >= v14 || *v15 < 0)
      {
        this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v29);
        if (!(_DWORD)this)
          return this;
        v17 = v29;
        v18 = (_BYTE *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
      }
      else
      {
        v17 = *v15;
        v18 = v15 + 1;
        *((_QWORD *)a2 + 1) = v18;
      }
      *(_DWORD *)(v5 + 32) = v17;
      v11 = *(_DWORD *)(v5 + 40) | 2;
      *(_DWORD *)(v5 + 40) = v11;
    }
    while ((unint64_t)v18 >= v14 || *v18 != 26);
    *((_QWORD *)a2 + 1) = v18 + 1;
LABEL_34:
    *(_DWORD *)(v5 + 40) = v11 | 4;
    v19 = *(AddrObjGoogle::protobuf::EnumValueOptions **)(v5 + 24);
    if (!v19)
    {
      v19 = (AddrObjGoogle::protobuf::EnumValueOptions *)operator new();
      AddrObjGoogle::protobuf::EnumValueOptions::EnumValueOptions(v19);
      *(_QWORD *)(v5 + 24) = v19;
    }
    v30 = 0;
    v20 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v20 >= *((_QWORD *)a2 + 2) || *v20 < 0)
    {
      if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v30))
        return 0;
    }
    else
    {
      v30 = *v20;
      *((_QWORD *)a2 + 1) = v20 + 1;
    }
    v21 = *((_DWORD *)a2 + 14);
    v22 = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 14) = v21 + 1;
    if (v21 >= v22)
      return 0;
    v23 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v30);
    if (!AddrObjGoogle::protobuf::EnumValueOptions::MergePartialFromCodedStream((unint64_t)v19, a2, v24, v25)|| !*((_BYTE *)a2 + 36))
    {
      return 0;
    }
    this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v23);
    v26 = *((_DWORD *)a2 + 14);
    v27 = __OFSUB__(v26, 1);
    v28 = v26 - 1;
    if (v28 < 0 == v27)
      *((_DWORD *)a2 + 14) = v28;
    if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
      && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
    {
      *((_DWORD *)a2 + 8) = 0;
      this = 1;
      *((_BYTE *)a2 + 36) = 1;
      return this;
    }
  }
}

void sub_1885ECB04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C406A05FE54);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::DescriptorProto::MergePartialFromCodedStream(uint64_t this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  uint64_t v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  void ***v10;
  char *v11;
  AddrObjGoogle::protobuf::io::CodedInputStream *v12;
  int v13;
  uint64_t *v14;
  std::string *v15;
  _BYTE *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  AddrObjGoogle::protobuf::FieldDescriptorProto *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  AddrObjGoogle::protobuf::UnknownFieldSet *v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  AddrObjGoogle::protobuf::DescriptorProto *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  AddrObjGoogle::protobuf::EnumDescriptorProto *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  AddrObjGoogle::protobuf::UnknownFieldSet *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  AddrObjGoogle::protobuf::UnknownFieldSet *v72;
  int v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  AddrObjGoogle::protobuf::FieldDescriptorProto *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  AddrObjGoogle::protobuf::UnknownFieldSet *v87;
  int v88;
  int v89;
  int v90;
  AddrObjGoogle::protobuf::MessageOptions *v91;
  char *v92;
  int v93;
  int v94;
  int v95;
  uint64_t v96;
  AddrObjGoogle::protobuf::UnknownFieldSet *v97;
  int v98;
  int v99;
  int *v100;
  unsigned int v101;

  v5 = this;
  v100 = (int *)(this + 24);
  v6 = (int *)(this + 72);
  v7 = (int *)(this + 96);
  v8 = (int *)(this + 120);
  v9 = (int *)(this + 48);
  v10 = (void ***)(this + 8);
LABEL_2:
  while (2)
  {
    v11 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v11 >= *((_QWORD *)a2 + 2) || *v11 < 0)
    {
      this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      v12 = (AddrObjGoogle::protobuf::io::CodedInputStream *)this;
      *((_DWORD *)a2 + 8) = this;
      if (!(_DWORD)this)
        return 1;
    }
    else
    {
      v12 = (AddrObjGoogle::protobuf::io::CodedInputStream *)*v11;
      *((_DWORD *)a2 + 8) = (_DWORD)v12;
      *((_QWORD *)a2 + 1) = v11 + 1;
      if (!(_DWORD)v12)
        return 1;
    }
    switch(v12 >> 3)
    {
      case 1u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_23;
        *(_DWORD *)(v5 + 156) |= 1u;
        v14 = *(uint64_t **)(v5 + 16);
        if (v14 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v15 = (std::string *)operator new();
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          v15->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 16) = v15;
        }
        else
        {
          v15 = *(std::string **)(v5 + 16);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v15);
        if ((_DWORD)this)
        {
          v16 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v16 >= *((_QWORD *)a2 + 2) || *v16 != 18)
            continue;
          goto LABEL_30;
        }
        return this;
      case 2u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_23;
        while (1)
        {
          v17 = *(_DWORD *)(v5 + 36);
          v18 = *(int *)(v5 + 32);
          if ((int)v18 >= v17)
          {
            if (v17 == *(_DWORD *)(v5 + 40))
            {
              AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v100, v17 + 1);
              v17 = *(_DWORD *)(v5 + 36);
            }
            *(_DWORD *)(v5 + 36) = v17 + 1;
            v20 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<AddrObjGoogle::protobuf::FieldDescriptorProto>::New();
            v21 = *(_QWORD *)(v5 + 24);
            v22 = *(int *)(v5 + 32);
            *(_DWORD *)(v5 + 32) = v22 + 1;
            *(_QWORD *)(v21 + 8 * v22) = v20;
          }
          else
          {
            v19 = *(_QWORD *)(v5 + 24);
            *(_DWORD *)(v5 + 32) = v18 + 1;
            v20 = *(AddrObjGoogle::protobuf::FieldDescriptorProto **)(v19 + 8 * v18);
          }
          v101 = 0;
          v23 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v23 >= *((_QWORD *)a2 + 2) || *v23 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v101))
              return 0;
          }
          else
          {
            v101 = *v23;
            *((_QWORD *)a2 + 1) = v23 + 1;
          }
          v24 = *((_DWORD *)a2 + 14);
          v25 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v24 + 1;
          if (v24 >= v25)
            return 0;
          v26 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v101);
          if (!AddrObjGoogle::protobuf::FieldDescriptorProto::MergePartialFromCodedStream((uint64_t)v20, a2, v27, v28)|| !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v26);
          v29 = *((_DWORD *)a2 + 14);
          v30 = __OFSUB__(v29, 1);
          v31 = v29 - 1;
          if (v31 < 0 == v30)
            *((_DWORD *)a2 + 14) = v31;
          v16 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v16 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v32 = *v16;
          if (v32 != 18)
            break;
LABEL_30:
          *((_QWORD *)a2 + 1) = v16 + 1;
        }
        if (v32 != 26)
          continue;
        goto LABEL_48;
      case 3u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_23;
        break;
      case 4u:
        v13 = v12 & 7;
        if (v13 == 2)
          goto LABEL_67;
        goto LABEL_23;
      case 5u:
        v13 = v12 & 7;
        if (v13 == 2)
          goto LABEL_85;
        goto LABEL_23;
      case 6u:
        v13 = v12 & 7;
        if (v13 == 2)
          goto LABEL_103;
        goto LABEL_23;
      case 7u:
        v13 = v12 & 7;
        if (v13 != 2)
          goto LABEL_23;
        goto LABEL_121;
      default:
        v13 = v12 & 7;
LABEL_23:
        if (v13 == 4)
          return 1;
        this = AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, v12, v10, a4);
        if ((this & 1) == 0)
          return 0;
        continue;
    }
    break;
  }
  while (1)
  {
    v33 = *(_DWORD *)(v5 + 84);
    v34 = *(int *)(v5 + 80);
    if ((int)v34 >= v33)
    {
      if (v33 == *(_DWORD *)(v5 + 88))
      {
        AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v33 + 1);
        v33 = *(_DWORD *)(v5 + 84);
      }
      *(_DWORD *)(v5 + 84) = v33 + 1;
      v36 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<AddrObjGoogle::protobuf::DescriptorProto>::New();
      v37 = *(_QWORD *)(v5 + 72);
      v38 = *(int *)(v5 + 80);
      *(_DWORD *)(v5 + 80) = v38 + 1;
      *(_QWORD *)(v37 + 8 * v38) = v36;
    }
    else
    {
      v35 = *(_QWORD *)(v5 + 72);
      *(_DWORD *)(v5 + 80) = v34 + 1;
      v36 = *(AddrObjGoogle::protobuf::DescriptorProto **)(v35 + 8 * v34);
    }
    v101 = 0;
    v39 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v39 >= *((_QWORD *)a2 + 2) || *v39 < 0)
    {
      if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v101))
        return 0;
    }
    else
    {
      v101 = *v39;
      *((_QWORD *)a2 + 1) = v39 + 1;
    }
    v40 = *((_DWORD *)a2 + 14);
    v41 = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 14) = v40 + 1;
    if (v40 >= v41)
      return 0;
    v42 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v101);
    if (!AddrObjGoogle::protobuf::DescriptorProto::MergePartialFromCodedStream(v36, a2)
      || !*((_BYTE *)a2 + 36))
    {
      return 0;
    }
    this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v42);
    v43 = *((_DWORD *)a2 + 14);
    v30 = __OFSUB__(v43, 1);
    v44 = v43 - 1;
    if (v44 < 0 == v30)
      *((_DWORD *)a2 + 14) = v44;
    v16 = (_BYTE *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v16 >= *((_QWORD *)a2 + 2))
      goto LABEL_2;
    v45 = *v16;
    if (v45 != 26)
    {
      if (v45 != 34)
        goto LABEL_2;
      while (1)
      {
        *((_QWORD *)a2 + 1) = v16 + 1;
LABEL_67:
        v46 = *(_DWORD *)(v5 + 108);
        v47 = *(int *)(v5 + 104);
        if ((int)v47 >= v46)
        {
          if (v46 == *(_DWORD *)(v5 + 112))
          {
            AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v46 + 1);
            v46 = *(_DWORD *)(v5 + 108);
          }
          *(_DWORD *)(v5 + 108) = v46 + 1;
          v49 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<AddrObjGoogle::protobuf::EnumDescriptorProto>::New();
          v50 = *(_QWORD *)(v5 + 96);
          v51 = *(int *)(v5 + 104);
          *(_DWORD *)(v5 + 104) = v51 + 1;
          *(_QWORD *)(v50 + 8 * v51) = v49;
        }
        else
        {
          v48 = *(_QWORD *)(v5 + 96);
          *(_DWORD *)(v5 + 104) = v47 + 1;
          v49 = *(AddrObjGoogle::protobuf::EnumDescriptorProto **)(v48 + 8 * v47);
        }
        v101 = 0;
        v52 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v52 >= *((_QWORD *)a2 + 2) || *v52 < 0)
        {
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v101))
            return 0;
        }
        else
        {
          v101 = *v52;
          *((_QWORD *)a2 + 1) = v52 + 1;
        }
        v53 = *((_DWORD *)a2 + 14);
        v54 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v53 + 1;
        if (v53 >= v54)
          return 0;
        v55 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v101);
        if (!AddrObjGoogle::protobuf::EnumDescriptorProto::MergePartialFromCodedStream((uint64_t)v49, a2, v56, v57)|| !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v55);
        v58 = *((_DWORD *)a2 + 14);
        v30 = __OFSUB__(v58, 1);
        v59 = v58 - 1;
        if (v59 < 0 == v30)
          *((_DWORD *)a2 + 14) = v59;
        v16 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v16 >= *((_QWORD *)a2 + 2))
          goto LABEL_2;
        v60 = *v16;
        if (v60 != 34)
        {
          if (v60 != 42)
            goto LABEL_2;
          while (1)
          {
            *((_QWORD *)a2 + 1) = v16 + 1;
LABEL_85:
            v61 = *(_DWORD *)(v5 + 132);
            v62 = *(int *)(v5 + 128);
            if ((int)v62 >= v61)
            {
              if (v61 == *(_DWORD *)(v5 + 136))
              {
                AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v61 + 1);
                v61 = *(_DWORD *)(v5 + 132);
              }
              *(_DWORD *)(v5 + 132) = v61 + 1;
              v64 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange>::New();
              v65 = *(_QWORD *)(v5 + 120);
              v66 = *(int *)(v5 + 128);
              *(_DWORD *)(v5 + 128) = v66 + 1;
              *(_QWORD *)(v65 + 8 * v66) = v64;
            }
            else
            {
              v63 = *(_QWORD *)(v5 + 120);
              *(_DWORD *)(v5 + 128) = v62 + 1;
              v64 = *(AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange **)(v63 + 8 * v62);
            }
            v101 = 0;
            v67 = (char *)*((_QWORD *)a2 + 1);
            if ((unint64_t)v67 >= *((_QWORD *)a2 + 2) || *v67 < 0)
            {
              if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v101))
                return 0;
            }
            else
            {
              v101 = *v67;
              *((_QWORD *)a2 + 1) = v67 + 1;
            }
            v68 = *((_DWORD *)a2 + 14);
            v69 = *((_DWORD *)a2 + 15);
            *((_DWORD *)a2 + 14) = v68 + 1;
            if (v68 >= v69)
              return 0;
            v70 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v101);
            if (!AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange::MergePartialFromCodedStream(v64, a2, v71, v72)|| !*((_BYTE *)a2 + 36))
            {
              return 0;
            }
            this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v70);
            v73 = *((_DWORD *)a2 + 14);
            v30 = __OFSUB__(v73, 1);
            v74 = v73 - 1;
            if (v74 < 0 == v30)
              *((_DWORD *)a2 + 14) = v74;
            v16 = (_BYTE *)*((_QWORD *)a2 + 1);
            if ((unint64_t)v16 >= *((_QWORD *)a2 + 2))
              goto LABEL_2;
            v75 = *v16;
            if (v75 != 42)
            {
              if (v75 != 50)
                goto LABEL_2;
              while (1)
              {
                *((_QWORD *)a2 + 1) = v16 + 1;
LABEL_103:
                v76 = *(_DWORD *)(v5 + 60);
                v77 = *(int *)(v5 + 56);
                if ((int)v77 >= v76)
                {
                  if (v76 == *(_DWORD *)(v5 + 64))
                  {
                    AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v76 + 1);
                    v76 = *(_DWORD *)(v5 + 60);
                  }
                  *(_DWORD *)(v5 + 60) = v76 + 1;
                  v79 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<AddrObjGoogle::protobuf::FieldDescriptorProto>::New();
                  v80 = *(_QWORD *)(v5 + 48);
                  v81 = *(int *)(v5 + 56);
                  *(_DWORD *)(v5 + 56) = v81 + 1;
                  *(_QWORD *)(v80 + 8 * v81) = v79;
                }
                else
                {
                  v78 = *(_QWORD *)(v5 + 48);
                  *(_DWORD *)(v5 + 56) = v77 + 1;
                  v79 = *(AddrObjGoogle::protobuf::FieldDescriptorProto **)(v78 + 8 * v77);
                }
                v101 = 0;
                v82 = (char *)*((_QWORD *)a2 + 1);
                if ((unint64_t)v82 >= *((_QWORD *)a2 + 2) || *v82 < 0)
                {
                  if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v101))
                    return 0;
                }
                else
                {
                  v101 = *v82;
                  *((_QWORD *)a2 + 1) = v82 + 1;
                }
                v83 = *((_DWORD *)a2 + 14);
                v84 = *((_DWORD *)a2 + 15);
                *((_DWORD *)a2 + 14) = v83 + 1;
                if (v83 >= v84)
                  return 0;
                v85 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v101);
                if (!AddrObjGoogle::protobuf::FieldDescriptorProto::MergePartialFromCodedStream((uint64_t)v79, a2, v86, v87)|| !*((_BYTE *)a2 + 36))
                {
                  return 0;
                }
                this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v85);
                v88 = *((_DWORD *)a2 + 14);
                v30 = __OFSUB__(v88, 1);
                v89 = v88 - 1;
                if (v89 < 0 == v30)
                  *((_DWORD *)a2 + 14) = v89;
                v16 = (_BYTE *)*((_QWORD *)a2 + 1);
                if ((unint64_t)v16 >= *((_QWORD *)a2 + 2))
                  goto LABEL_2;
                v90 = *v16;
                if (v90 != 50)
                {
                  if (v90 != 58)
                    goto LABEL_2;
                  *((_QWORD *)a2 + 1) = v16 + 1;
LABEL_121:
                  *(_DWORD *)(v5 + 156) |= 0x40u;
                  v91 = *(AddrObjGoogle::protobuf::MessageOptions **)(v5 + 144);
                  if (!v91)
                  {
                    v91 = (AddrObjGoogle::protobuf::MessageOptions *)operator new();
                    AddrObjGoogle::protobuf::MessageOptions::MessageOptions(v91);
                    *(_QWORD *)(v5 + 144) = v91;
                  }
                  v101 = 0;
                  v92 = (char *)*((_QWORD *)a2 + 1);
                  if ((unint64_t)v92 >= *((_QWORD *)a2 + 2) || *v92 < 0)
                  {
                    if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v101))
                      return 0;
                  }
                  else
                  {
                    v101 = *v92;
                    *((_QWORD *)a2 + 1) = v92 + 1;
                  }
                  v93 = *((_DWORD *)a2 + 14);
                  v94 = *((_DWORD *)a2 + 15);
                  *((_DWORD *)a2 + 14) = v93 + 1;
                  if (v93 >= v94)
                    return 0;
                  v95 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v101);
                  if (!AddrObjGoogle::protobuf::MessageOptions::MergePartialFromCodedStream((uint64_t)v91, a2, v96, v97)|| !*((_BYTE *)a2 + 36))
                  {
                    return 0;
                  }
                  this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v95);
                  v98 = *((_DWORD *)a2 + 14);
                  v30 = __OFSUB__(v98, 1);
                  v99 = v98 - 1;
                  if (v99 < 0 == v30)
                    *((_DWORD *)a2 + 14) = v99;
                  if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
                    && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                  {
                    *((_DWORD *)a2 + 8) = 0;
                    this = 1;
                    *((_BYTE *)a2 + 36) = 1;
                    return this;
                  }
                  goto LABEL_2;
                }
              }
            }
          }
        }
      }
    }
LABEL_48:
    *((_QWORD *)a2 + 1) = v16 + 1;
  }
}

void sub_1885ED3A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40ABAA5818);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(AddrObjGoogle::protobuf::io::CodedInputStream *this, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  int v11;

  v2 = *((_DWORD *)this + 6);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned int *)this + 10);
  v5 = *((int *)this + 11);
  v6 = v2 - v5 + *((_DWORD *)this + 2) - v3;
  v7 = (v6 ^ 0x7FFFFFFF) < a2 || a2 < 0;
  v8 = v6 + a2;
  if (v7)
    v8 = 0x7FFFFFFF;
  if ((int)v4 < v8)
    v8 = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = v8;
  v9 = v3 + v5;
  *((_QWORD *)this + 2) = v9;
  if (*((_DWORD *)this + 12) < v8)
    v8 = *((_DWORD *)this + 12);
  v10 = __OFSUB__(v2, v8);
  v11 = v2 - v8;
  if ((v11 < 0) ^ v10 | (v11 == 0))
    v11 = 0;
  else
    *((_QWORD *)this + 2) = v9 - v11;
  *((_DWORD *)this + 11) = v11;
  return v4;
}

uint64_t AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit(uint64_t this, int a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;

  *(_DWORD *)(this + 40) = a2;
  v2 = *(_DWORD *)(this + 48);
  v3 = *(_QWORD *)(this + 16) + *(int *)(this + 44);
  *(_QWORD *)(this + 16) = v3;
  if (v2 >= a2)
    v4 = a2;
  else
    v4 = v2;
  v5 = *(_DWORD *)(this + 24);
  v6 = __OFSUB__(v5, v4);
  v7 = v5 - v4;
  if ((v7 < 0) ^ v6 | (v7 == 0))
    v7 = 0;
  else
    *(_QWORD *)(this + 16) = v3 - v7;
  *(_DWORD *)(this + 44) = v7;
  *(_BYTE *)(this + 36) = 0;
  return this;
}

int *AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(int *this, int a2)
{
  int v2;
  int *v3;
  const void *v4;
  int v5;

  v2 = this[4];
  if (v2 < a2)
  {
    v3 = this;
    v4 = *(const void **)this;
    v5 = 2 * v2;
    if (v5 <= a2)
      v5 = a2;
    if (v5 <= 4)
      v5 = 4;
    this[4] = v5;
    this = (int *)operator new[]();
    *(_QWORD *)v3 = this;
    if (v4)
    {
      memcpy(this, v4, 8 * v3[3]);
      JUMPOUT(0x18D764364);
    }
  }
  return this;
}

AddrObjGoogle::protobuf::FieldDescriptorProto *AddrObjGoogle::protobuf::internal::GenericTypeHandler<AddrObjGoogle::protobuf::FieldDescriptorProto>::New()
{
  AddrObjGoogle::protobuf::FieldDescriptorProto *v0;

  v0 = (AddrObjGoogle::protobuf::FieldDescriptorProto *)operator new();
  AddrObjGoogle::protobuf::FieldDescriptorProto::FieldDescriptorProto(v0);
  return v0;
}

void sub_1885ED560(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C4090AC2D2CLL);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::FieldDescriptorProto *AddrObjGoogle::protobuf::FieldDescriptorProto::FieldDescriptorProto(AddrObjGoogle::protobuf::FieldDescriptorProto *this)
{
  *(_QWORD *)this = &off_1E1BF5A58;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  AddrObjGoogle::protobuf::FieldDescriptorProto::SharedCtor(this);
  return this;
}

void sub_1885ED5CC(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::UnknownFieldSet *v2;

  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

_QWORD *AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet(_QWORD *this)
{
  *this = 0;
  return this;
}

uint64_t AddrObjGoogle::protobuf::FieldDescriptorProto::MergePartialFromCodedStream(uint64_t this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  uint64_t v5;
  void ***v6;
  char *v7;
  AddrObjGoogle::protobuf::io::CodedInputStream *v8;
  int v9;
  uint64_t *v10;
  std::string *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  _BYTE *v17;
  uint64_t *v18;
  std::string *v19;
  _BYTE *v20;
  unsigned int v21;
  _BYTE *v22;
  signed int v23;
  _BYTE *v24;
  signed int v25;
  _BYTE *v26;
  uint64_t *v27;
  std::string *v28;
  _BYTE *v29;
  uint64_t *v30;
  std::string *v31;
  _BYTE *v32;
  AddrObjGoogle::protobuf::FieldOptions *v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  AddrObjGoogle::protobuf::UnknownFieldSet *v39;
  int v40;
  BOOL v41;
  int v42;
  unsigned int v43;

  v5 = this;
  v6 = (void ***)(this + 8);
  while (2)
  {
    v7 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
    {
      this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      v8 = (AddrObjGoogle::protobuf::io::CodedInputStream *)this;
      *((_DWORD *)a2 + 8) = this;
      if (!(_DWORD)this)
        return 1;
    }
    else
    {
      v8 = (AddrObjGoogle::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)a2 + 8) = (_DWORD)v8;
      *((_QWORD *)a2 + 1) = v7 + 1;
      if (!(_DWORD)v8)
        return 1;
    }
    switch(v8 >> 3)
    {
      case 1u:
        v9 = v8 & 7;
        if (v9 != 2)
          goto LABEL_25;
        *(_DWORD *)(v5 + 72) |= 1u;
        v10 = *(uint64_t **)(v5 + 16);
        if (v10 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v11 = (std::string *)operator new();
          v11->__r_.__value_.__l.__size_ = 0;
          v11->__r_.__value_.__r.__words[2] = 0;
          v11->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 16) = v11;
        }
        else
        {
          v11 = *(std::string **)(v5 + 16);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v11);
        if ((_DWORD)this)
        {
          v17 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v17 < *((_QWORD *)a2 + 2) && *v17 == 18)
          {
            *((_QWORD *)a2 + 1) = v17 + 1;
            goto LABEL_33;
          }
          continue;
        }
        return this;
      case 2u:
        v9 = v8 & 7;
        if (v9 != 2)
          goto LABEL_25;
LABEL_33:
        *(_DWORD *)(v5 + 72) |= 0x20u;
        v18 = *(uint64_t **)(v5 + 40);
        if (v18 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v19 = (std::string *)operator new();
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 40) = v19;
        }
        else
        {
          v19 = *(std::string **)(v5 + 40);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v19);
        if ((_DWORD)this)
        {
          v20 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v20 < v12 && *v20 == 24)
          {
            v13 = v20 + 1;
            *((_QWORD *)a2 + 1) = v13;
            goto LABEL_40;
          }
          continue;
        }
        return this;
      case 3u:
        v9 = v8 & 7;
        if ((v8 & 7) != 0)
          goto LABEL_25;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
LABEL_40:
        v43 = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v43);
          if (!(_DWORD)this)
            return this;
          v21 = v43;
          v22 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v21 = *v13;
          v22 = v13 + 1;
          *((_QWORD *)a2 + 1) = v22;
        }
        *(_DWORD *)(v5 + 24) = v21;
        *(_DWORD *)(v5 + 72) |= 2u;
        if ((unint64_t)v22 < v12 && *v22 == 32)
        {
          v14 = v22 + 1;
          *((_QWORD *)a2 + 1) = v14;
          goto LABEL_48;
        }
        continue;
      case 4u:
        v9 = v8 & 7;
        if ((v8 & 7) != 0)
          goto LABEL_25;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
LABEL_48:
        v43 = 0;
        if ((unint64_t)v14 >= v12 || *v14 < 0)
        {
          this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v43);
          if (!(_DWORD)this)
            return this;
          v23 = v43;
        }
        else
        {
          v23 = *v14;
          *((_QWORD *)a2 + 1) = v14 + 1;
        }
        if ((v23 - 1) > 2)
        {
          AddrObjGoogle::protobuf::UnknownFieldSet::AddVarint(v6, 4, v23);
        }
        else
        {
          *(_DWORD *)(v5 + 72) |= 4u;
          *(_DWORD *)(v5 + 28) = v23;
        }
        v24 = (_BYTE *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v24 >= v15 || *v24 != 40)
          continue;
        v16 = v24 + 1;
        *((_QWORD *)a2 + 1) = v16;
LABEL_59:
        v43 = 0;
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v43);
          if (!(_DWORD)this)
            return this;
          v25 = v43;
        }
        else
        {
          v25 = *v16;
          *((_QWORD *)a2 + 1) = v16 + 1;
        }
        if ((v25 - 1) > 0x11)
        {
          AddrObjGoogle::protobuf::UnknownFieldSet::AddVarint(v6, 5, v25);
        }
        else
        {
          *(_DWORD *)(v5 + 72) |= 8u;
          *(_DWORD *)(v5 + 64) = v25;
        }
        v26 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v26 >= *((_QWORD *)a2 + 2) || *v26 != 50)
          continue;
        *((_QWORD *)a2 + 1) = v26 + 1;
LABEL_70:
        *(_DWORD *)(v5 + 72) |= 0x10u;
        v27 = *(uint64_t **)(v5 + 32);
        if (v27 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v28 = (std::string *)operator new();
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 32) = v28;
        }
        else
        {
          v28 = *(std::string **)(v5 + 32);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v28);
        if (!(_DWORD)this)
          return this;
        v29 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v29 >= *((_QWORD *)a2 + 2) || *v29 != 58)
          continue;
        *((_QWORD *)a2 + 1) = v29 + 1;
LABEL_77:
        *(_DWORD *)(v5 + 72) |= 0x40u;
        v30 = *(uint64_t **)(v5 + 48);
        if (v30 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v31 = (std::string *)operator new();
          v31->__r_.__value_.__l.__size_ = 0;
          v31->__r_.__value_.__r.__words[2] = 0;
          v31->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 48) = v31;
        }
        else
        {
          v31 = *(std::string **)(v5 + 48);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v31);
        if (!(_DWORD)this)
          return this;
        v32 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v32 >= *((_QWORD *)a2 + 2) || *v32 != 66)
          continue;
        *((_QWORD *)a2 + 1) = v32 + 1;
LABEL_84:
        *(_DWORD *)(v5 + 72) |= 0x80u;
        v33 = *(AddrObjGoogle::protobuf::FieldOptions **)(v5 + 56);
        if (!v33)
        {
          v33 = (AddrObjGoogle::protobuf::FieldOptions *)operator new();
          AddrObjGoogle::protobuf::FieldOptions::FieldOptions(v33);
          *(_QWORD *)(v5 + 56) = v33;
        }
        v43 = 0;
        v34 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v34 >= *((_QWORD *)a2 + 2) || *v34 < 0)
        {
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v43))
            return 0;
        }
        else
        {
          v43 = *v34;
          *((_QWORD *)a2 + 1) = v34 + 1;
        }
        v35 = *((_DWORD *)a2 + 14);
        v36 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v35 + 1;
        if (v35 < v36)
        {
          v37 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v43);
          if (AddrObjGoogle::protobuf::FieldOptions::MergePartialFromCodedStream((uint64_t)v33, a2, v38, v39))
          {
            if (*((_BYTE *)a2 + 36))
            {
              this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v37);
              v40 = *((_DWORD *)a2 + 14);
              v41 = __OFSUB__(v40, 1);
              v42 = v40 - 1;
              if (v42 < 0 == v41)
                *((_DWORD *)a2 + 14) = v42;
              if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
                && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
              {
                *((_DWORD *)a2 + 8) = 0;
                this = 1;
                *((_BYTE *)a2 + 36) = 1;
                return this;
              }
              continue;
            }
          }
        }
        return 0;
      case 5u:
        v9 = v8 & 7;
        if ((v8 & 7) != 0)
          goto LABEL_25;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v15 = *((_QWORD *)a2 + 2);
        goto LABEL_59;
      case 6u:
        v9 = v8 & 7;
        if (v9 == 2)
          goto LABEL_70;
        goto LABEL_25;
      case 7u:
        v9 = v8 & 7;
        if (v9 == 2)
          goto LABEL_77;
        goto LABEL_25;
      case 8u:
        v9 = v8 & 7;
        if (v9 != 2)
          goto LABEL_25;
        goto LABEL_84;
      default:
        v9 = v8 & 7;
LABEL_25:
        if (v9 == 4)
          return 1;
        this = AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, v8, v6, a4);
        if ((this & 1) == 0)
          return 0;
        continue;
    }
  }
}

void sub_1885EDB9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C409A5D65B8);
  _Unwind_Resume(a1);
}

BOOL AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString(uint64_t a1, std::string *this)
{
  unint64_t v4;
  char *v5;
  unsigned int v6;
  unsigned __int8 *v7;
  int v8;
  _BOOL8 result;
  unsigned int v10;

  v10 = 0;
  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 < v4 && (*v5 & 0x80000000) == 0)
  {
    v6 = *v5;
    v10 = v6;
    v7 = (unsigned __int8 *)(v5 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    goto LABEL_7;
  }
  v8 = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback((AddrObjGoogle::protobuf::io::CodedInputStream *)a1, &v10);
  result = 0;
  if (v8)
  {
    v6 = v10;
    if ((v10 & 0x80000000) == 0)
    {
      v7 = *(unsigned __int8 **)(a1 + 8);
      v4 = *(_QWORD *)(a1 + 16);
LABEL_7:
      if ((int)v6 > (int)v4 - (int)v7)
        return AddrObjGoogle::protobuf::io::CodedInputStream::ReadStringFallback((AddrObjGoogle::protobuf::io::CodedInputStream *)a1, this, v6);
      std::string::resize(this, v6, 0);
      if (!v6)
        return 1;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      {
        if (!this->__r_.__value_.__l.__size_)
        {
LABEL_15:
          this = 0;
          goto LABEL_16;
        }
        this = (std::string *)this->__r_.__value_.__r.__words[0];
      }
      else if (!*((_BYTE *)&this->__r_.__value_.__s + 23))
      {
        goto LABEL_15;
      }
LABEL_16:
      memcpy(this, *(const void **)(a1 + 8), v6);
      *(_QWORD *)(a1 + 8) += v6;
      return 1;
    }
  }
  return result;
}

unint64_t AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(AddrObjGoogle::protobuf::io::CodedInputStream *this)
{
  uint64_t v1;
  _BYTE *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;

  v2 = (_BYTE *)*((_QWORD *)this + 1);
  v1 = *((_QWORD *)this + 2);
  v3 = v1 - (_DWORD)v2;
  if ((int)v1 - (int)v2 > 9)
    goto LABEL_4;
  if (v3 >= 1)
  {
    if ((*(char *)(v1 - 1) & 0x80000000) == 0)
    {
LABEL_4:
      v4 = (uint64_t)(v2 + 1);
      v5 = *v2 & 0x7F;
      if ((*v2 & 0x80) != 0)
      {
        v6 = (char)v2[1];
        v5 = *v2 & 0x7F | ((v6 & 0x7F) << 7);
        if (v6 < 0)
        {
          v8 = (char)v2[2];
          v5 = v5 & 0xFFE03FFF | ((v8 & 0x7F) << 14);
          if (v8 < 0)
          {
            v12 = (char)v2[3];
            v5 = v5 & 0xF01FFFFF | ((v12 & 0x7F) << 21);
            if (v12 < 0)
            {
              v13 = (char)v2[4];
              v5 = v5 | (v13 << 28);
              if (v13 < 0)
              {
                v14 = 0;
                while ((char)v2[v14 + 5] < 0)
                {
                  v11 = 0;
                  if ((_DWORD)++v14 == 5)
                    return v11;
                }
                v4 = (uint64_t)&v2[v14 + 6];
              }
              else
              {
                v4 = (uint64_t)(v2 + 5);
              }
            }
            else
            {
              v4 = (uint64_t)(v2 + 4);
            }
          }
          else
          {
            v4 = (uint64_t)(v2 + 3);
          }
        }
        else
        {
          v4 = (uint64_t)(v2 + 2);
        }
      }
      *((_QWORD *)this + 1) = v4;
      return v5;
    }
    return AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagSlow(this);
  }
  if (v3)
    return AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagSlow(this);
  v9 = *((_DWORD *)this + 11);
  v10 = *((_DWORD *)this + 6);
  if (v9 <= 0 && v10 != *((_DWORD *)this + 10))
    return AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagSlow(this);
  if (v10 - v9 >= *((_DWORD *)this + 12))
    return AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagSlow(this);
  v11 = 0;
  *((_BYTE *)this + 36) = 1;
  return v11;
}

uint64_t *addr_obj::geo3::StructuredAddress::SharedCtor(addr_obj::geo3::StructuredAddress *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *result;

  *((_DWORD *)this + 60) = 0;
  v2 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  *((_QWORD *)this + 2) = v2;
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v2);
  *((_QWORD *)this + 3) = v3;
  v4 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  *((_QWORD *)this + 4) = v4;
  v5 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v4);
  *((_QWORD *)this + 5) = v5;
  v6 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v5);
  *((_QWORD *)this + 6) = v6;
  v7 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v6);
  *((_QWORD *)this + 7) = v7;
  v8 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v7);
  *((_QWORD *)this + 8) = v8;
  v9 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v8);
  *((_QWORD *)this + 9) = v9;
  v10 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v9);
  *((_QWORD *)this + 10) = v10;
  v11 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v10);
  *((_QWORD *)this + 11) = v11;
  v12 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v11);
  *((_QWORD *)this + 12) = v12;
  v13 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v12);
  *((_QWORD *)this + 13) = v13;
  v14 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v13);
  *((_QWORD *)this + 14) = v14;
  v15 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v14);
  *((_QWORD *)this + 18) = v15;
  v16 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v15);
  *((_QWORD *)this + 19) = v16;
  v17 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v16);
  *((_QWORD *)this + 23) = v17;
  result = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v17);
  *((_QWORD *)this + 27) = result;
  *((_DWORD *)this + 61) = 0;
  return result;
}

AddrObjGoogle::protobuf::FieldDescriptorProto *AddrObjGoogle::protobuf::FieldDescriptorProto::SharedDtor(AddrObjGoogle::protobuf::FieldDescriptorProto *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  AddrObjGoogle::protobuf::FieldDescriptorProto *result;

  v2 = (uint64_t *)*((_QWORD *)this + 2);
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  if (v2 != v3)
  {
    v4 = *((_QWORD *)this + 2);
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      v3 = (uint64_t *)MEMORY[0x18D76437C](v4, 0x1012C40EC159624);
    }
  }
  v5 = (uint64_t *)*((_QWORD *)this + 4);
  v6 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  if (v5 != v6)
  {
    v7 = *((_QWORD *)this + 4);
    if (v7)
    {
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      v6 = (uint64_t *)MEMORY[0x18D76437C](v7, 0x1012C40EC159624);
    }
  }
  v8 = (uint64_t *)*((_QWORD *)this + 5);
  v9 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v6);
  if (v8 != v9)
  {
    v10 = *((_QWORD *)this + 5);
    if (v10)
    {
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      v9 = (uint64_t *)MEMORY[0x18D76437C](v10, 0x1012C40EC159624);
    }
  }
  v11 = (uint64_t *)*((_QWORD *)this + 6);
  v12 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v9);
  if (v11 != v12)
  {
    v13 = *((_QWORD *)this + 6);
    if (v13)
    {
      if (*(char *)(v13 + 23) < 0)
        operator delete(*(void **)v13);
      v12 = (uint64_t *)MEMORY[0x18D76437C](v13, 0x1012C40EC159624);
    }
  }
  result = (AddrObjGoogle::protobuf::FieldDescriptorProto *)AddrObjGoogle::protobuf::FieldDescriptorProto::default_instance_((AddrObjGoogle::protobuf::FieldDescriptorProto *)v12);
  if (result != this)
  {
    result = (AddrObjGoogle::protobuf::FieldDescriptorProto *)*((_QWORD *)this + 7);
    if (result)
      return (AddrObjGoogle::protobuf::FieldDescriptorProto *)(*(uint64_t (**)(AddrObjGoogle::protobuf::FieldDescriptorProto *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t AddrObjGoogle::protobuf::FieldDescriptorProto::default_instance_(AddrObjGoogle::protobuf::FieldDescriptorProto *this)
{
  unsigned __int8 v1;
  AddrObjGoogle::protobuf::FieldDescriptorProto *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50558);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50558))
  {
    v3 = (AddrObjGoogle::protobuf::FieldDescriptorProto *)operator new();
    AddrObjGoogle::protobuf::FieldDescriptorProto::FieldDescriptorProto(v3);
    qword_1EDF50550 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50558);
  }
  return qword_1EDF50550;
}

void sub_1885EE01C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C4090AC2D2CLL);
  __cxa_guard_abort(&qword_1EDF50558);
  _Unwind_Resume(a1);
}

uint64_t *AddrObjGoogle::protobuf::FieldDescriptorProto::SharedCtor(AddrObjGoogle::protobuf::FieldDescriptorProto *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *result;

  *((_DWORD *)this + 17) = 0;
  v2 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  *((_QWORD *)this + 2) = v2;
  *((_QWORD *)this + 3) = 0x100000000;
  *((_DWORD *)this + 16) = 1;
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v2);
  *((_QWORD *)this + 4) = v3;
  v4 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  *((_QWORD *)this + 5) = v4;
  result = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v4);
  *((_QWORD *)this + 6) = result;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 18) = 0;
  return result;
}

uint64_t *AddrObjGoogle::protobuf::internal::kEmptyString(AddrObjGoogle::protobuf::internal *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50408);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50408))
  {
    qword_1EDF503F0 = 0;
    *(_QWORD *)algn_1EDF503F8 = 0;
    qword_1EDF50400 = 0;
    __cxa_guard_release(&qword_1EDF50408);
  }
  return &qword_1EDF503F0;
}

AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange *AddrObjGoogle::protobuf::internal::GenericTypeHandler<AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange>::New()
{
  AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange *v0;

  v0 = (AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange *)operator new();
  AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange::DescriptorProto_ExtensionRange(v0);
  return v0;
}

void sub_1885EE140(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40380937A6);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange *AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange::DescriptorProto_ExtensionRange(AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange *this)
{
  *(_QWORD *)this = &off_1E1BF5F90;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_1885EE198(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;

  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange::MergePartialFromCodedStream(AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange *this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  void ***v6;
  char *v7;
  unint64_t TagFallback;
  int v9;
  unint64_t v10;
  char *v11;
  char *v12;
  unsigned int v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned __int8 *v16;
  uint64_t result;
  unsigned int v18;
  unsigned int v19;

  v6 = (void ***)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      v7 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
      {
        TagFallback = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v7;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v7 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v9 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v19 = 0;
      v12 = (char *)*((_QWORD *)a2 + 1);
      v10 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v12 >= v10 || *v12 < 0)
      {
        result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v19);
        if (!(_DWORD)result)
          return result;
        v13 = v19;
        v14 = (_BYTE *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
      }
      else
      {
        v13 = *v12;
        v14 = v12 + 1;
        *((_QWORD *)a2 + 1) = v14;
      }
      *((_DWORD *)this + 4) = v13;
      *((_DWORD *)this + 7) |= 1u;
      if ((unint64_t)v14 < v10 && *v14 == 16)
      {
        v11 = v14 + 1;
        *((_QWORD *)a2 + 1) = v11;
LABEL_24:
        v18 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v18);
          if (!(_DWORD)result)
            return result;
          v15 = v18;
          v16 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v15 = *v11;
          v16 = (unsigned __int8 *)(v11 + 1);
          *((_QWORD *)a2 + 1) = v16;
        }
        *((_DWORD *)this + 5) = v15;
        *((_DWORD *)this + 7) |= 2u;
        if (v16 == (unsigned __int8 *)v10 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v9 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        goto LABEL_24;
      }
    }
    else
    {
      v9 = TagFallback & 7;
    }
LABEL_16:
    if (v9 == 4)
      return 1;
    if (!AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, (AddrObjGoogle::protobuf::io::CodedInputStream *)TagFallback, v6, a4))return 0;
  }
}

AddrObjGoogle::protobuf::EnumDescriptorProto *AddrObjGoogle::protobuf::internal::GenericTypeHandler<AddrObjGoogle::protobuf::EnumDescriptorProto>::New()
{
  AddrObjGoogle::protobuf::EnumDescriptorProto *v0;

  v0 = (AddrObjGoogle::protobuf::EnumDescriptorProto *)operator new();
  AddrObjGoogle::protobuf::EnumDescriptorProto::EnumDescriptorProto(v0);
  return v0;
}

void sub_1885EE39C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C407FD52222);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::EnumDescriptorProto *AddrObjGoogle::protobuf::EnumDescriptorProto::EnumDescriptorProto(AddrObjGoogle::protobuf::EnumDescriptorProto *this)
{
  AddrObjGoogle::protobuf::internal *v2;

  *(_QWORD *)this = &off_1E1BF5848;
  v2 = (AddrObjGoogle::protobuf::internal *)AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 2) = AddrObjGoogle::protobuf::internal::kEmptyString(v2);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 15) = 0;
  return this;
}

void sub_1885EE420(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::UnknownFieldSet *v2;
  uint64_t *v3;
  uint64_t *v4;

  v4 = v3;
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(v4);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::EnumDescriptorProto *AddrObjGoogle::protobuf::EnumDescriptorProto::SharedDtor(AddrObjGoogle::protobuf::EnumDescriptorProto *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  AddrObjGoogle::protobuf::EnumDescriptorProto *result;

  v2 = (uint64_t *)*((_QWORD *)this + 2);
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  if (v2 != v3)
  {
    v4 = *((_QWORD *)this + 2);
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      v3 = (uint64_t *)MEMORY[0x18D76437C](v4, 0x1012C40EC159624);
    }
  }
  result = (AddrObjGoogle::protobuf::EnumDescriptorProto *)AddrObjGoogle::protobuf::EnumDescriptorProto::default_instance_((AddrObjGoogle::protobuf::EnumDescriptorProto *)v3);
  if (result != this)
  {
    result = (AddrObjGoogle::protobuf::EnumDescriptorProto *)*((_QWORD *)this + 6);
    if (result)
      return (AddrObjGoogle::protobuf::EnumDescriptorProto *)(*(uint64_t (**)(AddrObjGoogle::protobuf::EnumDescriptorProto *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t AddrObjGoogle::protobuf::EnumDescriptorProto::default_instance_(AddrObjGoogle::protobuf::EnumDescriptorProto *this)
{
  unsigned __int8 v1;
  AddrObjGoogle::protobuf::EnumDescriptorProto *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50568);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50568))
  {
    v3 = (AddrObjGoogle::protobuf::EnumDescriptorProto *)operator new();
    AddrObjGoogle::protobuf::EnumDescriptorProto::EnumDescriptorProto(v3);
    qword_1EDF50560 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50568);
  }
  return qword_1EDF50560;
}

void sub_1885EE54C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C407FD52222);
  __cxa_guard_abort(&qword_1EDF50568);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::FileDescriptorProto *AddrObjGoogle::protobuf::FileDescriptorProto::SharedDtor(AddrObjGoogle::protobuf::FileDescriptorProto *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  AddrObjGoogle::protobuf::FileDescriptorProto *result;
  uint64_t v9;

  v2 = (uint64_t *)*((_QWORD *)this + 2);
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  if (v2 != v3)
  {
    v4 = *((_QWORD *)this + 2);
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      v3 = (uint64_t *)MEMORY[0x18D76437C](v4, 0x1012C40EC159624);
    }
  }
  v5 = (uint64_t *)*((_QWORD *)this + 3);
  v6 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  if (v5 != v6)
  {
    v7 = *((_QWORD *)this + 3);
    if (v7)
    {
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      v6 = (uint64_t *)MEMORY[0x18D76437C](v7, 0x1012C40EC159624);
    }
  }
  result = (AddrObjGoogle::protobuf::FileDescriptorProto *)AddrObjGoogle::protobuf::FileDescriptorProto::default_instance_((AddrObjGoogle::protobuf::FileDescriptorProto *)v6);
  if (result != this)
  {
    v9 = *((_QWORD *)this + 23);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    result = (AddrObjGoogle::protobuf::FileDescriptorProto *)*((_QWORD *)this + 24);
    if (result)
      return (AddrObjGoogle::protobuf::FileDescriptorProto *)(*(uint64_t (**)(AddrObjGoogle::protobuf::FileDescriptorProto *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t AddrObjGoogle::protobuf::FileDescriptorProto::default_instance_(AddrObjGoogle::protobuf::FileDescriptorProto *this)
{
  unsigned __int8 v1;
  AddrObjGoogle::protobuf::FileDescriptorProto *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50528);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50528))
  {
    v3 = (AddrObjGoogle::protobuf::FileDescriptorProto *)operator new();
    AddrObjGoogle::protobuf::FileDescriptorProto::FileDescriptorProto(v3);
    qword_1EDF50520 = (uint64_t)v3;
    __cxa_guard_release(&qword_1EDF50528);
  }
  return qword_1EDF50520;
}

void sub_1885EE6D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10B1C4063BD6257);
  __cxa_guard_abort(&qword_1EDF50528);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::FieldOptions *AddrObjGoogle::protobuf::FieldOptions::FieldOptions(AddrObjGoogle::protobuf::FieldOptions *this)
{
  AddrObjGoogle::protobuf::internal *v2;

  *(_QWORD *)this = &off_1E1BF51C8;
  AddrObjGoogle::protobuf::internal::ExtensionSet::ExtensionSet((_QWORD *)this + 1);
  v2 = (AddrObjGoogle::protobuf::internal *)AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 4);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_DWORD *)this + 10) = 0;
  *(_DWORD *)((char *)this + 43) = 0;
  *((_QWORD *)this + 6) = AddrObjGoogle::protobuf::internal::kEmptyString(v2);
  *((_BYTE *)this + 47) = 0;
  *((_DWORD *)this + 21) = 0;
  return this;
}

void sub_1885EE784(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::internal::ExtensionSet *v2;
  AddrObjGoogle::protobuf::UnknownFieldSet *v3;
  uint64_t *v4;
  uint64_t *v5;

  v5 = v4;
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>(v5);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v3);
  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::FieldOptions::~FieldOptions(AddrObjGoogle::protobuf::FieldOptions *this)
{
  AddrObjGoogle::protobuf::FieldOptions::~FieldOptions(this);
  JUMPOUT(0x18D76437CLL);
}

{
  *(_QWORD *)this = &off_1E1BF51C8;
  AddrObjGoogle::protobuf::FieldOptions::SharedDtor(this);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)this + 7);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((AddrObjGoogle::protobuf::FieldOptions *)((char *)this + 32));
  AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet((AddrObjGoogle::protobuf::FieldOptions *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

uint64_t AddrObjGoogle::protobuf::FieldOptions::MergePartialFromCodedStream(uint64_t this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  uint64_t v5;
  void ***v6;
  int *v7;
  uint64_t **v8;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  unsigned int v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  const AddrObjGoogle::protobuf::Message *v19;
  unint64_t v20;
  unsigned __int8 *v21;
  _BYTE *v22;
  unsigned int v23;
  _BYTE *v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int v27;
  _BYTE *v28;
  uint64_t *v29;
  std::string *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned __int8 *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  AddrObjGoogle::protobuf::UninterpretedOption *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  AddrObjGoogle::protobuf::UnknownFieldSet *v45;
  int v46;
  BOOL v47;
  int v48;
  unsigned __int8 *v49;
  unsigned int v50;

  v5 = this;
  v6 = (void ***)(this + 32);
  v7 = (int *)(this + 56);
  v8 = (uint64_t **)(this + 8);
LABEL_2:
  while (2)
  {
    v9 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
    {
      this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      v10 = this;
      *((_DWORD *)a2 + 8) = this;
      if (!(_DWORD)this)
        return 1;
    }
    else
    {
      v10 = *v9;
      *((_DWORD *)a2 + 8) = v10;
      *((_QWORD *)a2 + 1) = v9 + 1;
      if (!(_DWORD)v10)
        return 1;
    }
    switch(v10 >> 3)
    {
      case 1u:
        v11 = v10 & 7;
        if ((v10 & 7) != 0)
          goto LABEL_25;
        v50 = 0;
        v12 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v12 >= *((_QWORD *)a2 + 2) || *v12 < 0)
        {
          this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v50);
          if (!(_DWORD)this)
            return this;
          v13 = v50;
        }
        else
        {
          v13 = *v12;
          *((_QWORD *)a2 + 1) = v12 + 1;
        }
        if (v13 > 2)
        {
          AddrObjGoogle::protobuf::UnknownFieldSet::AddVarint(v6, 1, (int)v13);
        }
        else
        {
          *(_DWORD *)(v5 + 84) |= 1u;
          *(_DWORD *)(v5 + 40) = v13;
        }
        v22 = (_BYTE *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v22 < v14 && *v22 == 16)
        {
          v15 = v22 + 1;
          *((_QWORD *)a2 + 1) = v15;
          goto LABEL_40;
        }
        continue;
      case 2u:
        v11 = v10 & 7;
        if ((v10 & 7) != 0)
          goto LABEL_25;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
LABEL_40:
        v50 = 0;
        if ((unint64_t)v15 >= v14 || *v15 < 0)
        {
          this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v50);
          if (!(_DWORD)this)
            return this;
          v23 = v50;
          v24 = (_BYTE *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v23 = *v15;
          v24 = v15 + 1;
          *((_QWORD *)a2 + 1) = v24;
        }
        *(_BYTE *)(v5 + 44) = v23 != 0;
        *(_DWORD *)(v5 + 84) |= 2u;
        if ((unint64_t)v24 >= v14 || *v24 != 24)
          continue;
        v16 = v24 + 1;
        *((_QWORD *)a2 + 1) = v16;
LABEL_48:
        v50 = 0;
        if ((unint64_t)v16 >= v14 || *v16 < 0)
        {
          this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v50);
          if (!(_DWORD)this)
            return this;
          v25 = v50;
          v26 = (_BYTE *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v25 = *v16;
          v26 = v16 + 1;
          *((_QWORD *)a2 + 1) = v26;
        }
        *(_BYTE *)(v5 + 46) = v25 != 0;
        *(_DWORD *)(v5 + 84) |= 8u;
        if ((unint64_t)v26 >= v14 || *v26 != 40)
          continue;
        v17 = v26 + 1;
        *((_QWORD *)a2 + 1) = v17;
LABEL_56:
        v50 = 0;
        if ((unint64_t)v17 >= v14 || *v17 < 0)
        {
          this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v50);
          if (!(_DWORD)this)
            return this;
          v27 = v50;
          v28 = (_BYTE *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v27 = *v17;
          v28 = v17 + 1;
          *((_QWORD *)a2 + 1) = v28;
        }
        *(_BYTE *)(v5 + 45) = v27 != 0;
        v18 = *(_DWORD *)(v5 + 84) | 4;
        *(_DWORD *)(v5 + 84) = v18;
        if ((unint64_t)v28 >= v14 || *v28 != 74)
          continue;
        *((_QWORD *)a2 + 1) = v28 + 1;
LABEL_64:
        *(_DWORD *)(v5 + 84) = v18 | 0x10;
        v29 = *(uint64_t **)(v5 + 48);
        if (v29 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v30 = (std::string *)operator new();
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 48) = v30;
        }
        else
        {
          v30 = *(std::string **)(v5 + 48);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v30);
        if (!(_DWORD)this)
          return this;
        v31 = (_BYTE *)*((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v31 >= v20 || *v31 != 80)
          continue;
        v21 = v31 + 1;
        *((_QWORD *)a2 + 1) = v21;
LABEL_71:
        v50 = 0;
        if ((unint64_t)v21 >= v20 || (char)*v21 < 0)
        {
          this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v50);
          if (!(_DWORD)this)
            return this;
          v32 = v50;
          v33 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v20 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v32 = *v21;
          v33 = v21 + 1;
          *((_QWORD *)a2 + 1) = v33;
        }
        *(_BYTE *)(v5 + 47) = v32 != 0;
        *(_DWORD *)(v5 + 84) |= 0x20u;
        if ((int)v20 - (int)v33 >= 2 && *v33 == 186 && v33[1] == 62)
          goto LABEL_79;
        continue;
      case 3u:
        v11 = v10 & 7;
        if ((v10 & 7) != 0)
          goto LABEL_25;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        goto LABEL_48;
      case 4u:
      case 6u:
      case 7u:
      case 8u:
        goto LABEL_15;
      case 5u:
        v11 = v10 & 7;
        if ((v10 & 7) != 0)
          goto LABEL_25;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        goto LABEL_56;
      case 9u:
        v11 = v10 & 7;
        if (v11 != 2)
          goto LABEL_25;
        v18 = *(_DWORD *)(v5 + 84);
        goto LABEL_64;
      case 0xAu:
        v11 = v10 & 7;
        if ((v10 & 7) != 0)
          goto LABEL_25;
        v21 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        goto LABEL_71;
      default:
        if (v10 >> 3 != 999)
        {
LABEL_15:
          v11 = v10 & 7;
LABEL_25:
          if (v11 == 4)
            return 1;
          if (v10 >> 6 < 0x7D)
          {
            this = AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, (AddrObjGoogle::protobuf::io::CodedInputStream *)v10, v6, a4);
            if ((this & 1) == 0)
              return 0;
          }
          else
          {
            v19 = (const AddrObjGoogle::protobuf::Message *)AddrObjGoogle::protobuf::FieldOptions::default_instance_((AddrObjGoogle::protobuf::FieldOptions *)this);
            this = AddrObjGoogle::protobuf::internal::ExtensionSet::ParseField(v8, v10, a2, v19, (AddrObjGoogle::protobuf::UnknownFieldSet *)v6);
            if ((this & 1) == 0)
              return 0;
          }
          continue;
        }
        v11 = v10 & 7;
        if (v11 != 2)
          goto LABEL_25;
        while (2)
        {
          v34 = *(_DWORD *)(v5 + 68);
          v35 = *(int *)(v5 + 64);
          if ((int)v35 >= v34)
          {
            if (v34 == *(_DWORD *)(v5 + 72))
            {
              AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v34 + 1);
              v34 = *(_DWORD *)(v5 + 68);
            }
            *(_DWORD *)(v5 + 68) = v34 + 1;
            v37 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<AddrObjGoogle::protobuf::UninterpretedOption>::New();
            v38 = *(_QWORD *)(v5 + 56);
            v39 = *(int *)(v5 + 64);
            *(_DWORD *)(v5 + 64) = v39 + 1;
            *(_QWORD *)(v38 + 8 * v39) = v37;
          }
          else
          {
            v36 = *(_QWORD *)(v5 + 56);
            *(_DWORD *)(v5 + 64) = v35 + 1;
            v37 = *(AddrObjGoogle::protobuf::UninterpretedOption **)(v36 + 8 * v35);
          }
          v50 = 0;
          v40 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v40 >= *((_QWORD *)a2 + 2) || *v40 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v50))
              return 0;
          }
          else
          {
            v50 = *v40;
            *((_QWORD *)a2 + 1) = v40 + 1;
          }
          v41 = *((_DWORD *)a2 + 14);
          v42 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v41 + 1;
          if (v41 < v42)
          {
            v43 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v50);
            if (AddrObjGoogle::protobuf::UninterpretedOption::MergePartialFromCodedStream((uint64_t)v37, a2, v44, v45))
            {
              if (*((_BYTE *)a2 + 36))
              {
                this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v43);
                v46 = *((_DWORD *)a2 + 14);
                v47 = __OFSUB__(v46, 1);
                v48 = v46 - 1;
                if (v48 < 0 == v47)
                  *((_DWORD *)a2 + 14) = v48;
                v33 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
                v49 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
                if ((int)v49 - (int)v33 > 1 && *v33 == 186 && v33[1] == 62)
                {
LABEL_79:
                  *((_QWORD *)a2 + 1) = v33 + 2;
                  continue;
                }
                if (v33 == v49 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                {
                  *((_DWORD *)a2 + 8) = 0;
                  this = 1;
                  *((_BYTE *)a2 + 36) = 1;
                  return this;
                }
                goto LABEL_2;
              }
            }
          }
          return 0;
        }
    }
  }
}

uint64_t AddrObjGoogle::protobuf::FieldOptions::SharedDtor(AddrObjGoogle::protobuf::FieldOptions *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = (uint64_t *)*((_QWORD *)this + 6);
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  if (v2 != v3)
  {
    v4 = *((_QWORD *)this + 6);
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      v3 = (uint64_t *)MEMORY[0x18D76437C](v4, 0x1012C40EC159624);
    }
  }
  return AddrObjGoogle::protobuf::FieldOptions::default_instance_((AddrObjGoogle::protobuf::FieldOptions *)v3);
}

uint64_t MapsFeature_IsEnabled_ElevatedPolygons()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_ElevatedPolygonsEnabled, (uint64_t)off_1EDF4B138);
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

_QWORD *__Block_byref_object_dispose__4(uint64_t a1)
{
  return std::__list_imp<std::__list_iterator<LoadItem,void *>>::clear((_QWORD *)(a1 + 48));
}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void __Block_byref_object_dispose__6(uint64_t a1)
{

}

void __Block_byref_object_dispose__7(uint64_t a1)
{

}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

void __Block_byref_object_dispose__9(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<GEORoadEdge * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void __Block_byref_object_dispose__10(uint64_t a1)
{

}

void __Block_byref_object_dispose__11(uint64_t a1)
{

}

void __Block_byref_object_dispose__12(uint64_t a1)
{

}

void __Block_byref_object_dispose__13(uint64_t a1)
{

}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

void __Block_byref_object_dispose__15(uint64_t a1)
{

}

void __Block_byref_object_dispose__16(uint64_t a1)
{

}

void __Block_byref_object_dispose__17(uint64_t a1)
{

}

void __Block_byref_object_dispose__18(uint64_t a1)
{

}

void __Block_byref_object_dispose__19(uint64_t a1)
{

}

void __Block_byref_object_dispose__20(uint64_t a1)
{

}

void __Block_byref_object_dispose__21(uint64_t a1)
{

}

void __Block_byref_object_dispose__22(uint64_t a1)
{

}

void __Block_byref_object_dispose__23(uint64_t a1)
{

}

void __Block_byref_object_dispose__24(uint64_t a1)
{

}

void __Block_byref_object_dispose__25(uint64_t a1)
{

}

void __Block_byref_object_dispose__26(uint64_t a1)
{

}

void __Block_byref_object_dispose__27(uint64_t a1)
{

}

void __Block_byref_object_dispose__28(uint64_t a1)
{

}

void __Block_byref_object_dispose__29(uint64_t a1)
{

}

void __Block_byref_object_dispose__30(uint64_t a1)
{

}

void __Block_byref_object_dispose__31(uint64_t a1)
{

}

void __Block_byref_object_dispose__32(uint64_t a1)
{

}

void __Block_byref_object_dispose__33(uint64_t a1)
{

}

void __Block_byref_object_dispose__34(uint64_t a1)
{

}

void __Block_byref_object_dispose__35(uint64_t a1)
{

}

void __Block_byref_object_dispose__36(uint64_t a1)
{

}

void __Block_byref_object_dispose__37(uint64_t a1)
{

}

void __Block_byref_object_dispose__38(uint64_t a1)
{

}

void __Block_byref_object_dispose__39(uint64_t a1)
{

}

void __Block_byref_object_dispose__40(uint64_t a1)
{

}

void __Block_byref_object_dispose__41(uint64_t a1)
{

}

void __Block_byref_object_dispose__42(uint64_t a1)
{

}

void __Block_byref_object_dispose__43(uint64_t a1)
{

}

void __Block_byref_object_dispose__44(uint64_t a1)
{

}

void __Block_byref_object_dispose__45(uint64_t a1)
{

}

void __Block_byref_object_dispose__46(uint64_t a1)
{

}

void __Block_byref_object_dispose__47(uint64_t a1)
{

}

void __Block_byref_object_dispose__48(uint64_t a1)
{

}

void __Block_byref_object_dispose__49(uint64_t a1)
{

}

void __Block_byref_object_dispose__50(uint64_t a1)
{

}

void __Block_byref_object_dispose__51(uint64_t a1)
{

}

uint64_t __Block_byref_object_dispose__52(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table(a1 + 48);
}

void __Block_byref_object_dispose__53(uint64_t a1)
{

}

void __Block_byref_object_dispose__54(uint64_t a1)
{

}

void __Block_byref_object_dispose__55(uint64_t a1)
{

}

void __Block_byref_object_dispose__56(uint64_t a1)
{

}

void __Block_byref_object_dispose__57(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<geo::TransitEdgePiece>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void __Block_byref_object_dispose__58(uint64_t a1)
{

}

void __Block_byref_object_dispose__59(uint64_t a1)
{

}

void __Block_byref_object_dispose__60(uint64_t a1)
{

}

void __Block_byref_object_dispose__61(uint64_t a1)
{

}

void __Block_byref_object_dispose__62(uint64_t a1)
{

}

void __Block_byref_object_dispose__63(uint64_t a1)
{

}

void __Block_byref_object_dispose__64(uint64_t a1)
{

}

void __Block_byref_object_dispose__65(uint64_t a1)
{

}

void __Block_byref_object_dispose__66(uint64_t a1)
{

}

void __Block_byref_object_dispose__67(uint64_t a1)
{

}

void __Block_byref_object_dispose__68(uint64_t a1)
{

}

void __Block_byref_object_dispose__69(uint64_t a1)
{

}

void __Block_byref_object_dispose__70(uint64_t a1)
{

}

void __Block_byref_object_dispose__71(uint64_t a1)
{

}

void __Block_byref_object_dispose__72(uint64_t a1)
{

}

void __Block_byref_object_dispose__73(uint64_t a1)
{

}

void __Block_byref_object_dispose__74(uint64_t a1)
{

}

void __Block_byref_object_dispose__75(uint64_t a1)
{

}

void __Block_byref_object_dispose__76(uint64_t a1)
{

}

void __Block_byref_object_dispose__77(uint64_t a1)
{

}

void __Block_byref_object_dispose__78(uint64_t a1)
{

}

void __Block_byref_object_dispose__79(uint64_t a1)
{

}

void __Block_byref_object_dispose__80(uint64_t a1)
{

}

void __Block_byref_object_dispose__82(uint64_t a1)
{

}

void __Block_byref_object_dispose__83(uint64_t a1)
{

}

void __Block_byref_object_dispose__84(uint64_t a1)
{

}

void __Block_byref_object_dispose__85(uint64_t a1)
{

}

void __Block_byref_object_dispose__86(uint64_t a1)
{

}

{

}

void __Block_byref_object_dispose__87(uint64_t a1)
{

}

void __Block_byref_object_dispose__88(uint64_t a1)
{

}

void __Block_byref_object_dispose__89(uint64_t a1)
{
  std::__tree<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::__map_value_compare<std::pair<google::protobuf::Descriptor const*,int>,std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::less<std::pair<google::protobuf::Descriptor const*,int>>,true>,std::allocator<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>>>::destroy(*(_QWORD **)(a1 + 56));
}

void __Block_byref_object_dispose__90(uint64_t a1)
{

}

void __Block_byref_object_dispose__91(uint64_t a1)
{

}

void __Block_byref_object_dispose__92(uint64_t a1)
{

}

void __Block_byref_object_dispose__93(uint64_t a1)
{

}

void __Block_byref_object_dispose__94(uint64_t a1)
{

}

void __Block_byref_object_dispose__95(uint64_t a1)
{

}

void __Block_byref_object_dispose__96(uint64_t a1)
{

}

void __Block_byref_object_dispose__97(uint64_t a1)
{

}

void __Block_byref_object_dispose__98(uint64_t a1)
{

}

void __Block_byref_object_dispose__99(uint64_t a1)
{

}

void __Block_byref_object_dispose__100(uint64_t a1)
{

}

void __Block_byref_object_dispose__102(uint64_t a1)
{

}

void __Block_byref_object_dispose__103(uint64_t a1)
{

}

void __Block_byref_object_dispose__104(uint64_t a1)
{

}

void __Block_byref_object_dispose__105(uint64_t a1)
{

}

unint64_t GEOTileKeyMakeEmpty(char a1, char a2)
{
  return a1 & 0x7F | ((unint64_t)(a2 & 1) << 7);
}

uint64_t _GEOConfigOptionsUseClientCache(int a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)&a1 & 0xFF0000;
  result = 1;
  if (v1 < 0x40000)
  {
    if (v1 != 0x20000)
      return 0;
  }
  else if (v1 != 0x40000)
  {
    return 0;
  }
  return result;
}

uint64_t geo::codec::_readLineAttributes(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::chrono::steady_clock::time_point v12;
  uint64_t v13;
  FILE *v14;
  int v15;
  char v16;
  double v17;
  uint64_t v18;
  size_t v19;
  int8x16_t *v20;
  __int8 *v21;
  geo::codec::Allocator *v22;
  uint64_t v23;
  uint64_t v24;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25;
  unint64_t *v26;
  unint64_t v27;
  int v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  FILE *v36;
  int v37;
  int8x16_t *v38;
  _QWORD **v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  void *v43;
  _QWORD **v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  size_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  size_t v54;
  uint64_t v55;
  size_t v56;
  uint64_t v57;
  size_t v58;
  uint64_t v59;
  size_t v60;
  uint64_t v61;
  unint64_t v62;
  FILE *v63;
  int v64;
  FILE *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  __int32 v69;
  uint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float *v96;
  uint64_t v97;
  float *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  float *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  float *v114;
  uint64_t v115;
  FILE *v116;
  int v117;
  FILE *v118;
  int v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  unint64_t *v126;
  char v127;
  unint64_t v128;
  uint64_t v129;
  int8x16_t *__p;
  void *v131;
  void *v132;
  char *v133;
  uint64_t v134;
  unsigned int v135;
  void *v136;
  void *v137;
  char *v138;
  uint64_t v139;
  unsigned int v140;
  void *v141;
  void *v142;
  char *v143;
  uint64_t v144;
  unsigned int v145;
  void *v146;
  void *v147;
  char *v148;
  uint64_t v149;
  unsigned int v150;
  void *v151;
  void *v152;
  char *v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  const char *v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;

  v4 = *a2;
  v5 = a1[1];
  if (!v5)
  {
LABEL_5:
    v8 = 0;
    v162 = "ChapterLineWidths2";
    v163 = v4;
    v9 = (std::__shared_weak_count *)a2[1];
    v164 = v9;
    if (!v9)
      goto LABEL_10;
    goto LABEL_8;
  }
  v6 = 0;
  v7 = 0;
  while (*(_WORD *)(*a1 + 16 * v6) != 153)
  {
    v6 = ++v7;
    if (v5 <= v7)
      goto LABEL_5;
  }
  v8 = (_QWORD *)geo::codec::chapterAt((uint64_t)a1, v7, 153, v4 + 1912);
  v4 = *a2;
  v9 = (std::__shared_weak_count *)a2[1];
  v162 = "ChapterLineWidths2";
  v163 = v4;
  v164 = v9;
  if (v9)
  {
LABEL_8:
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
LABEL_10:
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v12.__d_.__rep_;
  if (!v8)
  {
    v16 = 1;
    goto LABEL_26;
  }
  v161 = 0;
  v13 = v8[6];
  if ((unint64_t)(v13 + 8) > v8[7])
  {
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = 11138;
LABEL_21:
    v22 = (geo::codec::Allocator *)fprintf(v14, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v15);
    goto LABEL_22;
  }
  v17 = *(double *)(v8[5] + v13);
  v8[6] = v13 + 8;
  if ((geo::codec::chapterReadVarUint32(v8, (unsigned int *)&v161 + 1) & 1) == 0)
  {
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = 11139;
    goto LABEL_21;
  }
  if ((geo::codec::chapterReadVarUint32(v8, (unsigned int *)&v161) & 1) == 0)
  {
    v14 = (FILE *)*MEMORY[0x1E0C80C10];
    v15 = 11140;
    goto LABEL_21;
  }
  v159 = 0u;
  v160 = 0u;
  v157 = 0u;
  v158 = 0u;
  v156 = 0;
  if ((geo::codec::chapterReadVarUint32(v8, &v156) & 1) == 0)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11146);
    v29 = 2;
    goto LABEL_42;
  }
  v18 = v156;
  if (v156)
  {
    v19 = 4 * v156;
    v20 = (int8x16_t *)operator new(v19);
    v21 = &v20->i8[4 * v18];
    __p = v20;
    bzero(v20, v19);
  }
  else
  {
    __p = 0;
    v21 = 0;
  }
  v31 = v161;
  v30 = BYTE4(v161);
  LODWORD(v151) = 0;
  if (!geo::codec::chapterReadVarUint32(v8, (unsigned int *)&v151)
    || (v32 = v151, v33 = v8[6], v34 = v33 + v151, v34 > v8[7])
    || (v35 = (unsigned __int8 *)(v8[5] + v33),
        v8[6] = v34,
        mgcl::ints::IntDecompressor<unsigned int>::decompress((uint64_t *)&v159, v35, v32, v30, v31, (v21 - (__int8 *)__p) >> 2, __p)))
  {
    v36 = (FILE *)*MEMORY[0x1E0C80C10];
    v37 = 11148;
LABEL_38:
    fprintf(v36, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v37);
    v29 = 2;
LABEL_39:
    v38 = __p;
    goto LABEL_40;
  }
  v155 = 0;
  if ((geo::codec::chapterReadVarUint32(v8, &v155) & 1) == 0)
  {
    v36 = (FILE *)*MEMORY[0x1E0C80C10];
    v37 = 11151;
    goto LABEL_38;
  }
  v49 = v155;
  v152 = 0;
  v153 = 0;
  v151 = 0;
  if (v155)
  {
    v50 = 4 * v155;
    v51 = (char *)operator new(v50);
    v52 = &v51[4 * v49];
    v151 = v51;
    v153 = v52;
    bzero(v51, v50);
    v152 = v52;
  }
  v154 = 0;
  if ((geo::codec::decodeIntCompressorArray<unsigned int>(v8, (uint64_t *)&v159, SBYTE4(v161), v161, (uint64_t)&v151) & 1) == 0)
  {
    v63 = (FILE *)*MEMORY[0x1E0C80C10];
    v64 = 11153;
LABEL_94:
    fprintf(v63, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v64);
    v29 = 2;
LABEL_95:
    v38 = __p;
    goto LABEL_96;
  }
  v150 = 0;
  if ((geo::codec::chapterReadVarUint32(v8, &v150) & 1) == 0)
  {
    v63 = (FILE *)*MEMORY[0x1E0C80C10];
    v64 = 11156;
    goto LABEL_94;
  }
  v53 = v150;
  v147 = 0;
  v148 = 0;
  v146 = 0;
  if (v150)
  {
    v54 = 4 * v150;
    v146 = operator new(v54);
    v148 = (char *)v146 + 4 * v53;
    bzero(v146, v54);
    v147 = v148;
  }
  v149 = 0;
  if ((geo::codec::decodeIntCompressorArray<int>(v8, (uint64_t *)&v157, SBYTE4(v161), v161, (uint64_t)&v146) & 1) == 0)
  {
    v65 = (FILE *)*MEMORY[0x1E0C80C10];
    v66 = 11158;
LABEL_100:
    fprintf(v65, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v66);
    v29 = 2;
    goto LABEL_101;
  }
  v145 = 0;
  if ((geo::codec::chapterReadVarUint32(v8, &v145) & 1) == 0)
  {
    v65 = (FILE *)*MEMORY[0x1E0C80C10];
    v66 = 11161;
    goto LABEL_100;
  }
  v55 = v145;
  v142 = 0;
  v143 = 0;
  v141 = 0;
  if (v145)
  {
    v56 = 4 * v145;
    v141 = operator new(v56);
    v143 = (char *)v141 + 4 * v55;
    bzero(v141, v56);
    v142 = v143;
  }
  v144 = 0;
  if ((geo::codec::decodeIntCompressorArray<int>(v8, (uint64_t *)&v157, SBYTE4(v161), v161, (uint64_t)&v141) & 1) != 0)
  {
    v140 = 0;
    if ((geo::codec::chapterReadVarUint32(v8, &v140) & 1) != 0)
    {
      v57 = v140;
      v137 = 0;
      v138 = 0;
      v136 = 0;
      if (v140)
      {
        v58 = 4 * v140;
        v136 = operator new(v58);
        v138 = (char *)v136 + 4 * v57;
        bzero(v136, v58);
        v137 = v138;
      }
      v139 = 0;
      if ((geo::codec::decodeIntCompressorArray<int>(v8, (uint64_t *)&v157, SBYTE4(v161), v161, (uint64_t)&v136) & 1) != 0)
      {
        v135 = 0;
        if ((geo::codec::chapterReadVarUint32(v8, &v135) & 1) != 0)
        {
          v59 = v135;
          v132 = 0;
          v133 = 0;
          v131 = 0;
          if (v135)
          {
            v60 = 4 * v135;
            v131 = operator new(v60);
            v133 = (char *)v131 + 4 * v59;
            bzero(v131, v60);
            v132 = v133;
          }
          v134 = 0;
          if ((geo::codec::decodeIntCompressorArray<int>(v8, (uint64_t *)&v157, SBYTE4(v161), v161, (uint64_t)&v131) & 1) != 0)
          {
            v120 = *(_QWORD *)(*a2 + 40);
            if ((uint64_t)(v120 - *(_QWORD *)(*a2 + 32)) >= 1)
            {
              v61 = 0;
              v121 = *(_QWORD *)(*(_QWORD *)(*a2 + 792) + 32);
              v62 = *(_QWORD *)(*a2 + 32);
              while (!*(_DWORD *)(v62 + 100))
              {
LABEL_103:
                v62 += 168;
                if (v62 >= v120)
                  goto LABEL_174;
              }
              v67 = 0;
              v122 = v62;
              while (1)
              {
                v68 = v121 + 16 * *(unsigned int *)(v62 + 96);
                v123 = v67;
                v124 = v61;
                v69 = __p->i32[v61];
                if ((v69 & 1) == 0)
                {
                  v70 = v68 + 16 * v67;
                  v72 = *(_QWORD *)(v70 + 8);
                  v71 = (unint64_t *)(v70 + 8);
                  if (v72)
                  {
                    v73 = 0;
                    v126 = v71;
                    do
                    {
                      v75 = *a2;
                      v76 = *(_QWORD **)(*a2 + 2960);
                      v77 = *(_QWORD *)(*a2 + 2968);
                      if ((unint64_t)v76 >= v77)
                      {
                        v78 = *(_QWORD *)(v75 + 2952);
                        v79 = ((uint64_t)v76 - v78) >> 4;
                        v80 = v79 + 1;
                        if ((unint64_t)(v79 + 1) >> 60)
                          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
                        v81 = v77 - v78;
                        if (v81 >> 3 > v80)
                          v80 = v81 >> 3;
                        if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0)
                          v80 = 0xFFFFFFFFFFFFFFFLL;
                        if (v80)
                        {
                          v128 = v80;
                          v82 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(v75 + 2976)
                                                                                             + 16))(*(_QWORD *)(v75 + 2976), 16 * v80, 4);
                          v83 = (_QWORD *)(v82 + 16 * v79);
                          v80 = v82 + 16 * v128;
                          if (v82)
                          {
                            *v83 = 0;
                            v83[1] = 0;
                          }
                        }
                        else
                        {
                          v83 = (_QWORD *)(16 * v79);
                        }
                        v84 = *(_QWORD *)(v75 + 2960);
                        v85 = *(_QWORD *)(v75 + 2952);
                        v86 = v83;
                        if (v84 != v85)
                        {
                          do
                          {
                            *((_OWORD *)v86 - 1) = *(_OWORD *)(v84 - 16);
                            v86 -= 2;
                            v84 -= 16;
                          }
                          while (v84 != v85);
                          v84 = *(_QWORD *)(v75 + 2952);
                        }
                        v74 = v83 + 2;
                        *(_QWORD *)(v75 + 2952) = v86;
                        *(_QWORD *)(v75 + 2960) = v83 + 2;
                        v87 = *(_QWORD *)(v75 + 2968);
                        *(_QWORD *)(v75 + 2968) = v80;
                        if (v84)
                          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v75 + 2976) + 40))(*(_QWORD *)(v75 + 2976), v84, v87 - v84);
                        v71 = v126;
                      }
                      else
                      {
                        if (v76)
                        {
                          *v76 = 0;
                          v76[1] = 0;
                        }
                        v74 = v76 + 2;
                      }
                      *(_QWORD *)(v75 + 2960) = v74;
                      ++v73;
                    }
                    while (v73 < *v71);
                  }
                  goto LABEL_106;
                }
                ++v154;
                v88 = v68 + 16 * v67;
                v90 = *(_QWORD *)(v88 + 8);
                v89 = (_QWORD *)(v88 + 8);
                if (v90)
                  break;
LABEL_106:
                v61 = v124 + 1;
                v67 = v123 + 1;
                v62 = v122;
                if (v123 + 1 >= (unint64_t)*(unsigned int *)(v122 + 100))
                  goto LABEL_103;
              }
              v91 = 0;
              v92 = 0.0;
              v93 = 0.0;
              v94 = 0.0;
              v95 = 0.0;
              v127 = v69;
              v125 = v89;
              while (1)
              {
                if ((v69 & 2) != 0)
                {
                  v100 = v149++;
                  v95 = v17 * (double)*((int *)v146 + v100);
                  if ((v69 & 4) == 0)
                  {
LABEL_137:
                    if ((v69 & 8) == 0)
                      goto LABEL_138;
                    goto LABEL_144;
                  }
                }
                else if ((v69 & 4) == 0)
                {
                  goto LABEL_137;
                }
                v101 = v144++;
                v93 = v17 * (double)*((int *)v141 + v101);
                if ((v69 & 8) == 0)
                {
LABEL_138:
                  if ((v69 & 0x10) == 0)
                    goto LABEL_139;
                  goto LABEL_145;
                }
LABEL_144:
                v102 = v139++;
                v94 = v17 * (double)*((int *)v136 + v102);
                if ((v69 & 0x10) == 0)
                {
LABEL_139:
                  v97 = *a2;
                  v98 = *(float **)(*a2 + 2960);
                  v99 = *(_QWORD *)(*a2 + 2968);
                  if ((unint64_t)v98 >= v99)
                    goto LABEL_146;
                  goto LABEL_140;
                }
LABEL_145:
                v103 = v134++;
                v92 = v17 * (double)*((int *)v131 + v103);
                v97 = *a2;
                v98 = *(float **)(*a2 + 2960);
                v99 = *(_QWORD *)(*a2 + 2968);
                if ((unint64_t)v98 >= v99)
                {
LABEL_146:
                  v104 = *(_QWORD *)(v97 + 2952);
                  v105 = ((uint64_t)v98 - v104) >> 4;
                  v106 = v105 + 1;
                  if ((unint64_t)(v105 + 1) >> 60)
                    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
                  v107 = v99 - v104;
                  if (v107 >> 3 > v106)
                    v106 = v107 >> 3;
                  if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF0)
                    v108 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v108 = v106;
                  v129 = v91;
                  if (v108)
                  {
                    v109 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v97 + 2976) + 16))(*(_QWORD *)(v97 + 2976), 16 * v108, 4);
                    v110 = (float *)(v109 + 16 * v105);
                    v111 = v109 + 16 * v108;
                    if (v109)
                    {
                      *v110 = v95;
                      v110[1] = v94;
                      v110[2] = v93;
                      v110[3] = v92;
                    }
                  }
                  else
                  {
                    v111 = 0;
                    v110 = (float *)(16 * v105);
                  }
                  v112 = *(_QWORD *)(v97 + 2960);
                  v113 = *(_QWORD *)(v97 + 2952);
                  v114 = v110;
                  if (v112 != v113)
                  {
                    do
                    {
                      *((_OWORD *)v114 - 1) = *(_OWORD *)(v112 - 16);
                      v114 -= 4;
                      v112 -= 16;
                    }
                    while (v112 != v113);
                    v112 = *(_QWORD *)(v97 + 2952);
                  }
                  v96 = v110 + 4;
                  *(_QWORD *)(v97 + 2952) = v114;
                  *(_QWORD *)(v97 + 2960) = v110 + 4;
                  v115 = *(_QWORD *)(v97 + 2968);
                  *(_QWORD *)(v97 + 2968) = v111;
                  if (v112)
                    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v97 + 2976) + 40))(*(_QWORD *)(v97 + 2976), v112, v115 - v112);
                  LOBYTE(v69) = v127;
                  v89 = v125;
                  v91 = v129;
                  goto LABEL_134;
                }
LABEL_140:
                if (v98)
                {
                  *v98 = v95;
                  v98[1] = v94;
                  v98[2] = v93;
                  v98[3] = v92;
                }
                v96 = v98 + 4;
LABEL_134:
                *(_QWORD *)(v97 + 2960) = v96;
                if ((unint64_t)++v91 >= *v89)
                  goto LABEL_106;
              }
            }
LABEL_174:
            v29 = 0;
          }
          else
          {
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 11173);
            v29 = 2;
          }
          if (v131)
          {
            v132 = v131;
            operator delete(v131);
          }
          goto LABEL_171;
        }
        v118 = (FILE *)*MEMORY[0x1E0C80C10];
        v119 = 11171;
      }
      else
      {
        v118 = (FILE *)*MEMORY[0x1E0C80C10];
        v119 = 11168;
      }
      fprintf(v118, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v119);
      v29 = 2;
LABEL_171:
      if (v136)
      {
        v137 = v136;
        operator delete(v136);
      }
      goto LABEL_166;
    }
    v116 = (FILE *)*MEMORY[0x1E0C80C10];
    v117 = 11166;
  }
  else
  {
    v116 = (FILE *)*MEMORY[0x1E0C80C10];
    v117 = 11163;
  }
  fprintf(v116, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v117);
  v29 = 2;
LABEL_166:
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
LABEL_101:
  v38 = __p;
  if (v146)
  {
    v147 = v146;
    operator delete(v146);
    goto LABEL_95;
  }
LABEL_96:
  if (v151)
  {
    v152 = v151;
    operator delete(v151);
    goto LABEL_39;
  }
LABEL_40:
  if (v38)
    operator delete(v38);
LABEL_42:
  v39 = (_QWORD **)*((_QWORD *)&v158 + 1);
  *((_QWORD *)&v158 + 1) = 0;
  if (v39)
  {
    v40 = *v39;
    *v39 = 0;
    if (v40)
    {
      v41 = (_QWORD *)*v40;
      *v40 = 0;
      if (v41)
      {
        v42 = (void *)v41[13];
        if (v42)
        {
          v41[14] = v42;
          operator delete(v42);
        }
        v43 = (void *)v41[10];
        if (v43)
        {
          v41[11] = v43;
          operator delete(v43);
        }
        MEMORY[0x18D76437C](v41, 0x1070C40ADA6D0DELL);
      }
      MEMORY[0x18D76437C](v40, 0x20C4093837F09);
    }
    MEMORY[0x18D76437C](v39, 0x20C4093837F09);
  }
  if ((_QWORD)v157)
  {
    *((_QWORD *)&v157 + 1) = v157;
    operator delete((void *)v157);
  }
  v44 = (_QWORD **)*((_QWORD *)&v160 + 1);
  *((_QWORD *)&v160 + 1) = 0;
  if (v44)
  {
    v45 = *v44;
    *v44 = 0;
    if (v45)
    {
      v46 = (_QWORD *)*v45;
      *v45 = 0;
      if (v46)
      {
        v47 = (void *)v46[13];
        if (v47)
        {
          v46[14] = v47;
          operator delete(v47);
        }
        v48 = (void *)v46[10];
        if (v48)
        {
          v46[11] = v48;
          operator delete(v48);
        }
        MEMORY[0x18D76437C](v46, 0x1070C40ADA6D0DELL);
      }
      MEMORY[0x18D76437C](v45, 0x20C4093837F09);
    }
    MEMORY[0x18D76437C](v44, 0x20C4093837F09);
  }
  v22 = (geo::codec::Allocator *)v159;
  if ((_QWORD)v159)
  {
    *((_QWORD *)&v159 + 1) = v159;
    operator delete((void *)v159);
  }
  if (v29 == 2)
  {
LABEL_22:
    v16 = 0;
    if (!a1)
      goto LABEL_26;
    goto LABEL_23;
  }
  v16 = 1;
  if (!a1)
    goto LABEL_26;
LABEL_23:
  if (*(_BYTE *)v8)
  {
    v23 = geo::codec::Allocator::instance(v22);
    v22 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v23 + 40))(v23, v8[5], 0);
  }
  v24 = geo::codec::Allocator::instance(v22);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v24 + 40))(v24, v8, 0);
LABEL_26:
  v25 = std::chrono::steady_clock::now().__d_.__rep_;
  *(_QWORD *)&v157 = "ChapterLineWidths2";
  *(_QWORD *)&v159 = &v157;
  *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v4 + 1912, (uint64_t *)&v157, (uint64_t)&std::piecewise_construct, (uint64_t **)&v159)+ 4) = (double)((v25 - v12.__d_.__rep_) / 1000) * 0.001;
  if (v9)
  {
    v26 = (unint64_t *)&v9->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v16 & 1;
}

void sub_1885F0088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  uint64_t v41;
  void *v43;
  void *v44;
  void *v45;

  if (__p)
  {
    operator delete(__p);
    v43 = a30;
    if (!a30)
    {
LABEL_3:
      v44 = a35;
      if (!a35)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else
  {
    v43 = a30;
    if (!a30)
      goto LABEL_3;
  }
  operator delete(v43);
  v44 = a35;
  if (!a35)
  {
LABEL_4:
    v45 = a40;
    if (!a40)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v44);
  v45 = a40;
  if (!a40)
  {
LABEL_5:
    if (!a19)
    {
LABEL_12:
      mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor(v41 - 256);
      mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(v41 - 224);
      geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v41 - 176));
      _Unwind_Resume(a1);
    }
LABEL_11:
    operator delete(a19);
    goto LABEL_12;
  }
LABEL_10:
  operator delete(v45);
  if (!a19)
    goto LABEL_12;
  goto LABEL_11;
}

void sub_1885F0250(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 176));
  _Unwind_Resume(a1);
}

uint64_t std::vector<GeoCodecsRoadOffsets,geo::StdAllocator<GeoCodecsRoadOffsets,geo::codec::Allocator>>::emplace_back<GeoCodecsRoadOffsets&>(uint64_t result, _OWORD *a2)
{
  uint64_t v3;
  _OWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v4 = *(_OWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if ((unint64_t)v4 >= v5)
  {
    v6 = ((uint64_t)v4 - *(_QWORD *)result) >> 4;
    v7 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 60)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v8 = v5 - *(_QWORD *)result;
    if (v8 >> 3 > v7)
      v7 = v8 >> 3;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v7 = 0xFFFFFFFFFFFFFFFLL;
    if (v7)
    {
      v9 = 16 * v7;
      result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 16 * v7, 4);
      v10 = (_OWORD *)(result + 16 * v6);
      v7 = result + v9;
      if (result)
        *v10 = *a2;
      v11 = (uint64_t)(v10 + 1);
      v13 = *(_QWORD *)v3;
      v12 = *(_QWORD *)(v3 + 8);
      if (v12 == *(_QWORD *)v3)
      {
LABEL_14:
        *(_QWORD *)v3 = v10;
        *(_QWORD *)(v3 + 8) = v11;
        v14 = *(_QWORD *)(v3 + 16);
        *(_QWORD *)(v3 + 16) = v7;
        if (!v12)
        {
LABEL_15:
          *(_QWORD *)(v3 + 8) = v11;
          return result;
        }
LABEL_19:
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v12, v14 - v12);
        goto LABEL_15;
      }
    }
    else
    {
      v10 = (_OWORD *)(16 * v6);
      v11 = 16 * v6 + 16;
      v13 = *(_QWORD *)result;
      v12 = *(_QWORD *)(result + 8);
      if (v12 == *(_QWORD *)result)
        goto LABEL_14;
    }
    do
    {
      *--v10 = *(_OWORD *)(v12 - 16);
      v12 -= 16;
    }
    while (v12 != v13);
    v12 = *(_QWORD *)v3;
    *(_QWORD *)v3 = v10;
    *(_QWORD *)(v3 + 8) = v11;
    v14 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v7;
    if (!v12)
      goto LABEL_15;
    goto LABEL_19;
  }
  if (v4)
    *v4 = *a2;
  *(_QWORD *)(result + 8) = v4 + 1;
  return result;
}

uint64_t geo::codec::decodeIntCompressorArray<int>(_QWORD *a1, uint64_t *a2, char a3, char a4, uint64_t a5)
{
  int8x16_t *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int v16;

  v5 = *(int8x16_t **)a5;
  v6 = *(_QWORD *)(a5 + 8);
  v16 = 0;
  if (!a2)
    return 0;
  result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v16);
  if ((_DWORD)result)
  {
    v12 = v16;
    v13 = a1[6];
    v14 = v13 + v16;
    if (v14 <= a1[7])
    {
      v15 = (unsigned __int8 *)(a1[5] + v13);
      a1[6] = v14;
      return mgcl::ints::IntDecompressor<int>::decompress(a2, v15, v12, a3, a4, (v6 - (uint64_t)v5) >> 2, v5) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mgcl::ints::IntDecompressor<int>::decompress(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, char a4, char a5, unint64_t a6, int8x16_t *a7)
{
  size_t v12;
  uint64_t result;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD **v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  void *v44;
  BOOL v45;
  unsigned int v46;
  unsigned __int8 *v47;
  unsigned int v48;
  int v49;
  char *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  size_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  size_t v59;
  size_t v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  int v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD **v77;
  _QWORD *v78;
  _QWORD *v79;
  void *v80;
  void *v81;
  unsigned int v82;
  unsigned __int8 *v83;
  unsigned int v84;
  int v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  size_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  size_t v94;
  size_t v95;
  uint64_t *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  _BYTE *v101;
  unint64_t v102;
  char *v103;
  _BYTE *v104;
  char *v105;
  char *v106;
  char *v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 *v115;
  int v116;
  unint64_t v117;
  __int32 v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  unsigned int v124;
  int v125;
  int v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  size_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  size_t v135;
  size_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  _BYTE *v142;
  unint64_t v143;
  char *v144;
  _BYTE *v145;
  char *v146;
  char *v147;
  char *v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned __int8 *v156;
  int v157;
  unint64_t v158;
  __int32 v159;
  int v160;
  uint64_t *v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  unsigned int v165;
  int v166;
  int v167;
  unint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t *v173;
  size_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  size_t v178;
  size_t v179;
  uint64_t *v180;
  unint64_t v181;
  char *v182;
  char *v183;
  size_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  size_t v189;
  uint64_t *v190;
  unsigned int v191;
  size_t v192;
  char *v193;
  char *v194;
  _BYTE *v195;
  int v196;
  int v197;
  int v198;
  int v199;
  uint64_t i;
  int v201;
  uint64_t v202;
  uint64_t v203;
  __int32 v204;
  _BYTE *v205;
  int v206;
  int v207;
  int v208;
  int v209;
  uint64_t j;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  __int32 v214;
  int v215;
  uint64_t v216;
  char v217;
  int v218;
  char v219;
  unsigned int v220;
  uint64_t v221;
  int v222;
  int v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unsigned int v227;
  int v228;
  uint64_t v229;
  BOOL v230;
  __int32 v231;
  char v232;
  int v233;
  char v234;
  char v235;
  unsigned int v236;
  unint64_t v237;
  int v238;
  int v239;
  int v240;
  int v241;
  char *v242;
  char *v243;
  int v244;
  unsigned int v245;
  uint64_t v246;
  char v247;
  int v248;
  char v249;
  unsigned int v250;
  uint64_t v251;
  int v252;
  int v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  unsigned int v257;
  int v258;
  uint64_t v259;
  __int32 v260;
  int v261;
  char v262;
  int v263;
  char v264;
  char v265;
  unsigned int v266;
  unint64_t v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  BOOL v273;
  unsigned int v274;
  char *v275;
  int v276;
  unsigned int v277;
  unsigned int v278;
  int v279;
  unsigned int v280;
  int v281;
  int v282;
  int8x16_t *v283;
  int v284;
  char *v285;
  unint64_t v286;
  unint64_t v287;
  unsigned int v288;
  int v289;
  unsigned int v290;
  int v291;
  int v292;
  int *v293;
  int v294;
  unint64_t v295;
  char *v296;
  char *v297;
  unint64_t v298;
  unint64_t v299;
  char *v300;
  unint64_t v301;
  char *v302;
  _OWORD *v303;
  __int128 *v304;
  unint64_t v305;
  __int128 v306;
  _QWORD *v307;
  uint64_t *v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  unint64_t v314;
  _OWORD *v315;
  __int128 *v316;
  unint64_t v317;
  __int128 v318;
  _QWORD *v319;
  uint64_t *v320;
  unint64_t v321;
  uint64_t v322;
  char *v323;
  char *v324;
  unint64_t v325;
  __int128 v326;
  char *v327;
  char *v328;
  unint64_t v329;
  uint64_t v330;
  char *v331;
  char *v332;
  unint64_t v333;
  __int128 v334;
  char *v335;
  char *v336;
  unint64_t v337;
  uint64_t v338;
  char *v339;
  char *v340;
  unint64_t v341;
  __int128 v342;
  char *v343;
  char *v344;
  unint64_t v345;
  uint64_t v346;
  char *v347;
  char *v348;
  unint64_t v349;
  __int128 v350;
  char *v351;
  char *v352;
  unint64_t v353;
  uint64_t v354;
  char *v355;
  char *v356;
  unint64_t v357;
  __int128 v358;
  char *v359;
  char *v360;
  unint64_t v361;
  uint64_t v362;
  char *v363;
  char v364;
  uint64_t *v365;
  int8x16_t *v366;
  unint64_t v367;
  uint64_t v368;
  int v369;
  char *v370;
  char v371;
  uint64_t *v372;
  int *v373;
  unint64_t v374;
  uint64_t v375;
  int v376;
  char *v377;
  char v378;
  unsigned __int8 *v379;
  uint64_t *v380;
  char v381;
  char v382;
  uint64_t v383;
  int *v384;
  unint64_t v385;
  unsigned int v386;
  int v387;
  char *v388;
  char v389;
  uint64_t v390;
  uint64_t *v391;
  char v392;
  char v393;
  uint64_t v394;
  int8x16_t v395;
  unint64_t v396;
  uint64x2_t v397;
  unint64_t v398;
  uint64_t *v399;
  int8x16_t *v400;
  unint64_t v401;
  uint64_t v402;
  uint32x4_t v403;
  uint32x4_t v404;
  int8x16_t v405;
  int8x16_t v406;
  int32x2_t v407;
  int32x2_t v408;
  int8x16_t v409;
  int8x16_t v410;
  int32x2_t v411;
  int8x16_t v412;
  int8x16_t v413;
  int32x2_t v414;
  int8x16_t v415;
  unint64_t v416;
  int8x16_t *v417;
  int8x16_t *v418;
  int8x16_t v419;
  uint32x4_t v420;
  uint32x4_t v421;
  uint32x4_t v422;
  uint32x4_t v423;
  int8x16_t v424;
  int8x16_t v425;
  int8x16_t v426;
  int8x16_t v427;
  int32x2_t v428;
  int32x2_t v429;
  int32x2_t v430;
  int32x2_t v431;
  int32x2_t v432;
  int8x16_t v433;
  int8x16_t v434;
  int8x16_t v435;
  int32x2_t v436;
  int8x16_t v437;
  int8x16_t v438;
  int8x16_t v439;
  int32x2_t v440;
  int8x16_t v441;
  int8x16_t v442;
  int32x2_t v443;
  int8x16_t v444;
  unint64_t v445;
  int *v446;
  char *v447;
  char v448;
  char *v449;
  char v450;
  int32x4_t *v451;
  uint64_t *v452;
  char v453;
  char v454;
  uint64_t v455;
  int8x16_t *v456;
  unint64_t v457;
  __int32 v458;
  int v459;
  char *v460;
  char *v461;
  char *v462;
  char *v463;
  char *v464;
  size_t v465;
  unsigned int v466;
  char *v467;
  unsigned int v468;
  BOOL v469;
  char *v470;
  int v471;
  unsigned int v472;
  char *v473;
  char *v474;
  int v475;
  char *v476;
  char *v477;
  uint64_t v478;
  unint64_t v479;
  unint64_t v480;
  int v481;
  unint64_t v482;
  char *v483;
  int v484;
  unint64_t v485;
  uint64_t v486;
  size_t v489;
  unint64_t __sz;
  uint64_t v491;
  uint64_t *v492;
  unsigned __int8 *v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t v496;
  __int128 v497;
  uint64_t v498;
  __int16 v499;
  char v500;
  int v501;
  char v502;
  char v503;
  uint64_t v504;
  uint64_t v505;
  _BYTE __dst[65];
  uint64_t v507;

  v507 = *MEMORY[0x1E0C80C00];
  if (!a6)
    return 0;
  v485 = 4 * a6;
  bzero(a7, 4 * a6);
  v12 = *a2;
  if ((v12 - 66) < 0xFFFFFFBF)
    return 3;
  if (v12 <= 0x40)
    v14 = 65 - v12;
  else
    v14 = 0;
  bzero(&__dst[v12], v14);
  memcpy(__dst, a2 + 1, v12);
  v15 = 0;
  v16 = v12 + 1;
  v480 = a6 & 0xFFFFFFFFFFFFFFF0;
  v486 = a3 - 1;
  v484 = a3 - 1;
  __sz = 8 * a6;
  v491 = 8 * a3 - 24;
  v478 = -(uint64_t)(a6 & 0xFFFFFFFFFFFFFFF8);
  v479 = a6 & 0xFFFFFFFFFFFFFFF8;
  v492 = a1;
  v493 = a2;
  v494 = a6;
  v17 = a2;
  v489 = v12;
  while (2)
  {
    v495 = v15;
    v496 = v16;
    v21 = __dst[v15];
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = &v17[v16 + 1];
    v26 = 1;
    if (__dst[v15])
    {
      v27 = v491 - 8 * v16;
      do
      {
        v28 = v26;
        v29 = v27;
        v30 = (char)v25[v23];
        v24 |= (unint64_t)(v25[v23] & 0x7F) << v22;
        if (v23 > 8)
          break;
        ++v23;
        v22 += 7;
        ++v26;
        v27 -= 8;
      }
      while (v30 < 0);
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = &v17[v16];
      do
      {
        v35 = v29;
        v36 = (char)v34[v28 + 1];
        v33 |= (unint64_t)(v34[++v28] & 0x7F) << v31;
        if (v32 > 8)
          break;
        ++v32;
        v31 += 7;
        v29 -= 8;
      }
      while (v36 < 0);
      switch(v17[v16])
      {
        case 1u:
          if (!a1[3])
          {
            v37 = (_QWORD *)operator new();
            v38 = (_QWORD *)operator new();
            v39 = operator new();
            a1 = v492;
            v17 = v493;
            *(_QWORD *)(v39 + 20) = 0;
            *(_QWORD *)(v39 + 12) = 0;
            *(_DWORD *)(v39 + 36) = 0;
            *(_QWORD *)(v39 + 28) = 0;
            *(_WORD *)(v39 + 40) = 257;
            *(_QWORD *)(v39 + 44) = 0;
            *(_QWORD *)(v39 + 60) = 0;
            *(_QWORD *)(v39 + 52) = 0;
            *(_DWORD *)(v39 + 67) = 0;
            *(_DWORD *)(v39 + 72) = 0;
            *(_WORD *)(v39 + 76) = 257;
            *(_QWORD *)(v39 + 136) = 0;
            *(_OWORD *)(v39 + 80) = 0u;
            *(_OWORD *)(v39 + 96) = 0u;
            *(_OWORD *)(v39 + 112) = 0u;
            *v38 = v39;
            *v37 = v38;
            v40 = (_QWORD **)v492[3];
            v492[3] = (uint64_t)v37;
            if (v40)
            {
              v41 = *v40;
              *v40 = 0;
              if (v41)
              {
                v42 = (_QWORD *)*v41;
                *v41 = 0;
                if (v42)
                {
                  v43 = (void *)v42[13];
                  if (v43)
                  {
                    v42[14] = v43;
                    operator delete(v43);
                  }
                  v44 = (void *)v42[10];
                  if (v44)
                  {
                    v42[11] = v44;
                    operator delete(v44);
                  }
                  MEMORY[0x18D76437C](v42, 0x1070C40ADA6D0DELL);
                }
                MEMORY[0x18D76437C](v41, 0x20C4093837F09);
                a1 = v492;
              }
              MEMORY[0x18D76437C](v40, 0x20C4093837F09);
            }
          }
          v45 = v21 == 1;
          v46 = v33 - 2;
          if (v33 < 2)
            return 3;
          v47 = &v17[v496 + v28];
          v48 = v47[1];
          v49 = v47[2];
          v51 = *a1;
          v50 = (char *)a1[1];
          v52 = &v50[-*a1];
          if (v21 == 1)
          {
            LODWORD(v53) = v494;
            v54 = v494 - (_QWORD)v52;
            if (v494 <= (unint64_t)v52)
            {
              v61 = v492;
              if (v494 < (unint64_t)v52)
                v492[1] = v51 + v494;
LABEL_406:
              v390 = *v61;
              v391 = *(uint64_t **)v61[3];
              LODWORD(v497) = 0;
              BYTE4(v497) = a4;
              BYTE5(v497) = a5;
              WORD3(v497) = 0;
              v498 = 1;
              v499 = 0;
              v500 = v45;
              v501 = 0;
              if (v48 >= 4)
                v392 = 1;
              else
                v392 = v48;
              v502 = v392;
              if (v49 == 2)
                v393 = 4;
              else
                v393 = 1;
              if (!v49)
                v393 = 0;
              v503 = v393;
              *((_QWORD *)&v497 + 1) = __PAIR64__(v53, v46);
              v394 = *v391;
              v504 = (uint64_t)&v493[v496 + 3 + v28];
              v505 = v46;
              result = gcl::polyline::DecoderImpl::decompressAttributes(v394, (uint64_t)&v504, v390, 0, &v497);
              if ((_DWORD)result)
                goto LABEL_451;
              if (v494 < 8)
              {
                v396 = 0;
                a1 = v492;
                v17 = v493;
LABEL_427:
                v445 = v494 - v396;
                v446 = &a7->i32[v396];
                v447 = (char *)(v390 + v396);
                do
                {
                  v448 = *v447++;
                  *v446 = ((_BYTE)v24 + v448) & 1 | (2 * *v446);
                  ++v446;
                  --v445;
                }
                while (v445);
                goto LABEL_449;
              }
              v397 = (uint64x2_t)vdupq_n_s64(v24);
              a1 = v492;
              v17 = v493;
              if (v494 >= 0x10)
              {
                v416 = v480;
                v417 = a7;
                v418 = (int8x16_t *)v390;
                do
                {
                  v419 = *v418++;
                  v420 = (uint32x4_t)vqtbl1q_s8(v419, (int8x16_t)xmmword_189CFB5C0);
                  v421 = (uint32x4_t)vqtbl1q_s8(v419, (int8x16_t)xmmword_189CFB5D0);
                  v422 = (uint32x4_t)vqtbl1q_s8(v419, (int8x16_t)xmmword_189CFB5B0);
                  v423 = (uint32x4_t)vqtbl1q_s8(v419, (int8x16_t)xmmword_189CFB5A0);
                  v425 = v417[2];
                  v424 = v417[3];
                  v427 = *v417;
                  v426 = v417[1];
                  v428 = (int32x2_t)vextq_s8(v427, v427, 8uLL).u64[0];
                  v429 = (int32x2_t)vextq_s8(v426, v426, 8uLL).u64[0];
                  v430 = (int32x2_t)vextq_s8(v425, v425, 8uLL).u64[0];
                  v431 = (int32x2_t)vextq_s8(v424, v424, 8uLL).u64[0];
                  v432 = vadd_s32(v431, v431);
                  v433.i64[0] = v432.u32[0];
                  v433.i64[1] = v432.u32[1];
                  v434 = v433;
                  *(int32x2_t *)v424.i8 = vadd_s32(*(int32x2_t *)v424.i8, *(int32x2_t *)v424.i8);
                  v433.i64[0] = v424.u32[0];
                  v433.i64[1] = v424.u32[1];
                  v435 = v433;
                  v436 = vadd_s32(v430, v430);
                  v433.i64[0] = v436.u32[0];
                  v433.i64[1] = v436.u32[1];
                  v437 = v433;
                  *(int32x2_t *)v425.i8 = vadd_s32(*(int32x2_t *)v425.i8, *(int32x2_t *)v425.i8);
                  v433.i64[0] = v425.u32[0];
                  v433.i64[1] = v425.u32[1];
                  v438 = v433;
                  *(int32x2_t *)v426.i8 = vadd_s32(*(int32x2_t *)v426.i8, *(int32x2_t *)v426.i8);
                  v433.i64[0] = v426.u32[0];
                  v433.i64[1] = v426.u32[1];
                  v439 = v433;
                  v440 = vadd_s32(v429, v429);
                  v433.i64[0] = v440.u32[0];
                  v433.i64[1] = v440.u32[1];
                  v441 = v433;
                  *(int32x2_t *)v427.i8 = vadd_s32(*(int32x2_t *)v427.i8, *(int32x2_t *)v427.i8);
                  v433.i64[0] = v427.u32[0];
                  v433.i64[1] = v427.u32[1];
                  v442 = v433;
                  v443 = vadd_s32(v428, v428);
                  v433.i64[0] = v443.u32[0];
                  v433.i64[1] = v443.u32[1];
                  v444 = (int8x16_t)vdupq_n_s64(1uLL);
                  *(int32x4_t *)v417 = vuzp1q_s32((int32x4_t)vorrq_s8(v442, vandq_s8((int8x16_t)vaddw_u32(v397, *(uint32x2_t *)v420.i8), v444)), (int32x4_t)vorrq_s8(v433, vandq_s8((int8x16_t)vaddw_high_u32(v397, v420), v444)));
                  v417[1] = (int8x16_t)vuzp1q_s32((int32x4_t)vorrq_s8(v439, vandq_s8((int8x16_t)vaddw_u32(v397, *(uint32x2_t *)v421.i8), v444)), (int32x4_t)vorrq_s8(v441, vandq_s8((int8x16_t)vaddw_high_u32(v397, v421), v444)));
                  v395 = (int8x16_t)vuzp1q_s32((int32x4_t)vorrq_s8(v435, vandq_s8((int8x16_t)vaddw_u32(v397, *(uint32x2_t *)v423.i8), v444)), (int32x4_t)vorrq_s8(v434, vandq_s8((int8x16_t)vaddw_high_u32(v397, v423), v444)));
                  v417[2] = (int8x16_t)vuzp1q_s32((int32x4_t)vorrq_s8(v438, vandq_s8((int8x16_t)vaddw_u32(v397, *(uint32x2_t *)v422.i8), v444)), (int32x4_t)vorrq_s8(v437, vandq_s8((int8x16_t)vaddw_high_u32(v397, v422), v444)));
                  v417[3] = v395;
                  v417 += 4;
                  v416 -= 16;
                }
                while (v416);
                if (v480 == v494)
                  goto LABEL_449;
                v396 = v480;
                v398 = v480;
                if ((v494 & 8) == 0)
                  goto LABEL_427;
              }
              else
              {
                v398 = 0;
              }
              v399 = (uint64_t *)(v390 + v398);
              v400 = (int8x16_t *)((char *)a7 + 4 * v398);
              v401 = v478 + v398;
              do
              {
                v402 = *v399++;
                v395.i64[0] = v402;
                v403 = (uint32x4_t)vqtbl1q_s8(v395, (int8x16_t)xmmword_189CFB5C0);
                v404 = (uint32x4_t)vqtbl1q_s8(v395, (int8x16_t)xmmword_189CFB5D0);
                v406 = *v400;
                v405 = v400[1];
                v407 = (int32x2_t)vextq_s8(v406, v406, 8uLL).u64[0];
                v408 = (int32x2_t)vextq_s8(v405, v405, 8uLL).u64[0];
                *(int32x2_t *)v405.i8 = vadd_s32(*(int32x2_t *)v405.i8, *(int32x2_t *)v405.i8);
                v409.i64[0] = v405.u32[0];
                v409.i64[1] = v405.u32[1];
                v410 = v409;
                v411 = vadd_s32(v408, v408);
                v409.i64[0] = v411.u32[0];
                v409.i64[1] = v411.u32[1];
                v412 = v409;
                *(int32x2_t *)v406.i8 = vadd_s32(*(int32x2_t *)v406.i8, *(int32x2_t *)v406.i8);
                v409.i64[0] = v406.u32[0];
                v409.i64[1] = v406.u32[1];
                v413 = v409;
                v414 = vadd_s32(v407, v407);
                v409.i64[0] = v414.u32[0];
                v409.i64[1] = v414.u32[1];
                v415 = (int8x16_t)vdupq_n_s64(1uLL);
                v395 = (int8x16_t)vuzp1q_s32((int32x4_t)vorrq_s8(v410, vandq_s8((int8x16_t)vaddw_u32(v397, *(uint32x2_t *)v404.i8), v415)), (int32x4_t)vorrq_s8(v412, vandq_s8((int8x16_t)vaddw_high_u32(v397, v404), v415)));
                *(int32x4_t *)v400 = vuzp1q_s32((int32x4_t)vorrq_s8(v413, vandq_s8((int8x16_t)vaddw_u32(v397, *(uint32x2_t *)v403.i8), v415)), (int32x4_t)vorrq_s8(v409, vandq_s8((int8x16_t)vaddw_high_u32(v397, v403), v415)));
                v400[1] = v395;
                v400 += 2;
                v401 += 8;
              }
              while (v401);
              v396 = v479;
              if (v479 != v494)
                goto LABEL_427;
LABEL_449:
              v16 = v496 + v33 + v28 + 1;
              goto LABEL_12;
            }
            v55 = v492[2];
            if (v55 - (uint64_t)v50 >= v54)
            {
              v476 = &v50[v54];
              v272 = v49;
              v273 = v45;
              v274 = v48;
              bzero(v50, v494 - (_QWORD)v52);
              v48 = v274;
              v45 = v273;
              v49 = v272;
              v46 = v33 - 2;
              v492[1] = (uint64_t)v476;
              v61 = v492;
              LODWORD(v53) = v494;
              goto LABEL_406;
            }
            v466 = v48;
            v469 = v21 == 1;
            v471 = v49;
            if ((v494 & 0x8000000000000000) != 0)
              goto LABEL_455;
            v56 = (unint64_t)v52;
            v57 = v55 - v51;
            v58 = 2 * v57;
            if (2 * v57 <= v494)
              v58 = v494;
            if (v57 >= 0x3FFFFFFFFFFFFFFFLL)
              v59 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v59 = v58;
            v60 = v59;
            v463 = (char *)operator new(v59);
            v461 = &v463[v56];
            bzero(&v463[v56], v54);
            if (v50 == (char *)v51)
            {
              v61 = v492;
              v53 = v494;
              v46 = v33 - 2;
              v49 = v471;
              v45 = v469;
              v48 = v466;
              v300 = v461;
              v62 = v463;
              goto LABEL_404;
            }
            if (v56 < 8)
            {
              v61 = v492;
              v53 = v494;
              v46 = v33 - 2;
              v49 = v471;
              v45 = v469;
              v48 = v466;
              v63 = v461;
              v62 = v463;
              goto LABEL_401;
            }
            v311 = v56;
            v63 = &v463[v56];
            v62 = v463;
            v61 = v492;
            v53 = v494;
            v46 = v33 - 2;
            v49 = v471;
            v45 = v469;
            v48 = v466;
            if ((unint64_t)(v51 - (_QWORD)v463) >= 0x20)
            {
              if (v311 < 0x20)
              {
                v312 = 0;
                goto LABEL_336;
              }
              v312 = v311 & 0xFFFFFFFFFFFFFFE0;
              v347 = &v463[v311 - 16];
              v348 = v50 - 16;
              v349 = v311 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v350 = *(_OWORD *)v348;
                *((_OWORD *)v347 - 1) = *((_OWORD *)v348 - 1);
                *(_OWORD *)v347 = v350;
                v347 -= 32;
                v348 -= 32;
                v349 -= 32;
              }
              while (v349);
              if (v311 == v312)
                goto LABEL_403;
              if ((v311 & 0x18) != 0)
              {
LABEL_336:
                v63 = &v461[-(v311 & 0xFFFFFFFFFFFFFFF8)];
                v351 = &v50[-v312 - v51 - 8 + (_QWORD)v463];
                v352 = &v50[-v312 - 8];
                v353 = v312 - (v311 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v354 = *(_QWORD *)v352;
                  v352 -= 8;
                  *(_QWORD *)v351 = v354;
                  v351 -= 8;
                  v353 += 8;
                }
                while (v353);
                v50 -= v311 & 0xFFFFFFFFFFFFFFF8;
                if (v311 == (v311 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_403;
                goto LABEL_401;
              }
              v63 = &v461[-v312];
              v50 -= v312;
            }
LABEL_401:
            v388 = v63 - 1;
            do
            {
              v389 = *--v50;
              *v388-- = v389;
            }
            while (v50 != (char *)v51);
LABEL_403:
            v50 = (char *)v51;
            v300 = v62;
LABEL_404:
            *v61 = (uint64_t)v300;
            v61[1] = (uint64_t)&v62[v53];
            v61[2] = (uint64_t)&v62[v60];
            if (v50)
            {
              operator delete(v50);
              v48 = v466;
              v45 = v469;
              v49 = v471;
              v46 = v33 - 2;
            }
            goto LABEL_406;
          }
          v184 = v485 - (_QWORD)v52;
          if (v485 <= (unint64_t)v52)
          {
            v190 = v492;
            v191 = v494;
            if (v485 < (unint64_t)v52)
              v492[1] = v51 + v485;
            goto LABEL_436;
          }
          v185 = v492[2];
          if (v185 - (uint64_t)v50 >= v184)
          {
            v477 = &v50[v184];
            v275 = v50;
            v276 = v49;
            v277 = v48;
            bzero(v275, v485 - (_QWORD)v52);
            v48 = v277;
            v45 = v21 == 1;
            v49 = v276;
            v46 = v33 - 2;
            v492[1] = (uint64_t)v477;
            v190 = v492;
            v191 = v494;
LABEL_436:
            v451 = (int32x4_t *)*v190;
            v452 = *(uint64_t **)v190[3];
            LODWORD(v497) = 0;
            BYTE4(v497) = a4;
            BYTE5(v497) = a5;
            WORD3(v497) = 0;
            v498 = 1;
            v499 = 0;
            v500 = v45;
            v501 = 0;
            if (v48 >= 4)
              v453 = 1;
            else
              v453 = v48;
            v502 = v453;
            if (v49 == 2)
              v454 = 4;
            else
              v454 = 1;
            if (!v49)
              v454 = 0;
            v503 = v454;
            *((_QWORD *)&v497 + 1) = __PAIR64__(v191, v46);
            v455 = *v452;
            v504 = (uint64_t)&v493[v496 + 3 + v28];
            v505 = v46;
            result = gcl::polyline::DecoderImpl::decompressAttributes(v455, (uint64_t)&v504, v451, 0, &v497);
            if ((_DWORD)result)
              goto LABEL_451;
            v456 = a7;
            v17 = v493;
            v457 = v494;
            a1 = v492;
            do
            {
              while (1)
              {
                v458 = v451->i32[0];
                v451 = (int32x4_t *)((char *)v451 + 4);
                v459 = v24 + v458;
                if (v21 >= 0x40)
                  break;
                v456->i32[0] = ((unint64_t)v456->u32[0] << v21) | v459 & ~(-1 << v21);
                v456 = (int8x16_t *)((char *)v456 + 4);
                if (!--v457)
                  goto LABEL_449;
              }
              v456->i32[0] = v459;
              v456 = (int8x16_t *)((char *)v456 + 4);
              --v457;
            }
            while (v457);
            goto LABEL_449;
          }
          v468 = v48;
          v475 = v49;
          if ((v485 & 0x8000000000000000) != 0)
LABEL_455:
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          v186 = (unint64_t)v52;
          v187 = v185 - v51;
          v188 = 2 * v187;
          if (2 * v187 <= v485)
            v188 = v485;
          if (v187 >= 0x3FFFFFFFFFFFFFFFLL)
            v189 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v189 = v188;
          v465 = v189;
          v462 = (char *)operator new(v189);
          v460 = &v462[v186];
          bzero(&v462[v186], v184);
          if (v50 == (char *)v51)
          {
            v190 = v492;
            v191 = v494;
            v46 = v33 - 2;
            v49 = v475;
            v45 = v21 == 1;
            v48 = v468;
            v193 = v462;
            v192 = v465;
            v302 = v460;
            goto LABEL_434;
          }
          if (v186 < 8)
          {
            v190 = v492;
            v191 = v494;
            v46 = v33 - 2;
            v49 = v475;
            v45 = v21 == 1;
            v48 = v468;
            v193 = v462;
            v192 = v465;
            v194 = v460;
            goto LABEL_431;
          }
          v313 = v186;
          v193 = v462;
          v192 = v465;
          v190 = v492;
          v191 = v494;
          v46 = v33 - 2;
          v49 = v475;
          v45 = v21 == 1;
          v48 = v468;
          v194 = v460;
          if ((unint64_t)(v51 - (_QWORD)v462) < 0x20)
            goto LABEL_431;
          if (v313 >= 0x20)
          {
            v314 = v313 & 0xFFFFFFFFFFFFFFE0;
            v355 = &v462[v313 - 16];
            v356 = v50 - 16;
            v357 = v313 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v358 = *(_OWORD *)v356;
              *((_OWORD *)v355 - 1) = *((_OWORD *)v356 - 1);
              *(_OWORD *)v355 = v358;
              v355 -= 32;
              v356 -= 32;
              v357 -= 32;
            }
            while (v357);
            if (v313 == v314)
              goto LABEL_433;
            if ((v313 & 0x18) == 0)
            {
              v194 = &v460[-v314];
              v50 -= v314;
LABEL_431:
              v449 = v194 - 1;
              do
              {
                v450 = *--v50;
                *v449-- = v450;
              }
              while (v50 != (char *)v51);
LABEL_433:
              v50 = (char *)v51;
              v302 = v193;
LABEL_434:
              *v190 = (uint64_t)v302;
              v190[1] = (uint64_t)&v193[v485];
              v190[2] = (uint64_t)&v193[v192];
              if (v50)
              {
                operator delete(v50);
                v48 = v468;
                v45 = v21 == 1;
                v49 = v475;
                v46 = v33 - 2;
              }
              goto LABEL_436;
            }
          }
          else
          {
            v314 = 0;
          }
          v194 = &v460[-(v313 & 0xFFFFFFFFFFFFFFF8)];
          v359 = &v50[-v314 - v51 - 8 + (_QWORD)v462];
          v360 = &v50[-v314 - 8];
          v361 = v314 - (v313 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v362 = *(_QWORD *)v360;
            v360 -= 8;
            *(_QWORD *)v359 = v362;
            v359 -= 8;
            v361 += 8;
          }
          while (v361);
          v50 -= v313 & 0xFFFFFFFFFFFFFFF8;
          if (v313 == (v313 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_433;
          goto LABEL_431;
        case 2u:
          v129 = (char *)*a1;
          v128 = (char *)a1[1];
          v130 = &v128[-*a1];
          v131 = __sz - (_QWORD)v130;
          if (__sz <= (unint64_t)v130)
          {
            v137 = v494;
            if (__sz < (unint64_t)v130)
              a1[1] = (uint64_t)&v129[__sz];
LABEL_356:
            v365 = (uint64_t *)*a1;
            result = mgcl::muid::decompress((mgcl::muid *)&v493[v496 + 1 + v28], (const char *)v33, 0, 0, *a1, (unint64_t *)8, v137);
            if ((_DWORD)result)
              return result;
            v366 = a7;
            v17 = v493;
            v367 = v494;
            do
            {
              while (1)
              {
                v368 = *v365++;
                v369 = v368 + v24;
                if (v21 >= 0x40)
                  break;
                v366->i32[0] = ((unint64_t)v366->u32[0] << v21) | v369 & ~(-1 << v21);
                v366 = (int8x16_t *)((char *)v366 + 4);
                if (!--v367)
                  goto LABEL_361;
              }
              v366->i32[0] = v369;
              v366 = (int8x16_t *)((char *)v366 + 4);
              --v367;
            }
            while (v367);
LABEL_361:
            v16 = v496 + v33 + v28 + 1;
            a1 = v492;
            goto LABEL_12;
          }
          v132 = a1[2];
          if (v132 - (uint64_t)v128 >= v131)
          {
            bzero((void *)a1[1], __sz - (_QWORD)v130);
            a1[1] = (uint64_t)&v128[v131];
            v137 = v494;
            goto LABEL_356;
          }
          v482 = (unint64_t)&v128[-*a1];
          if ((__sz & 0x8000000000000000) != 0)
            goto LABEL_455;
          v133 = v132 - (_QWORD)v129;
          v134 = 2 * v133;
          if (2 * v133 <= __sz)
            v134 = __sz;
          if (v133 >= 0x3FFFFFFFFFFFFFFFLL)
            v135 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v135 = v134;
          v473 = (char *)operator new(v135);
          v470 = &v473[v482];
          bzero(&v473[v482], v131);
          v136 = v135;
          if (v128 == v129)
          {
            a1 = v492;
            v137 = v494;
            v285 = &v473[v482];
            v138 = v473;
            goto LABEL_354;
          }
          if (v482 < 8)
          {
            a1 = v492;
            v137 = v494;
            v139 = &v473[v482];
            v138 = v473;
            goto LABEL_351;
          }
          v139 = &v473[v482];
          v138 = v473;
          a1 = v492;
          v137 = v494;
          if ((unint64_t)(v129 - v473) < 0x20)
            goto LABEL_351;
          if (v482 >= 0x20)
          {
            v287 = v482 & 0xFFFFFFFFFFFFFFE0;
            v323 = &v473[v482 - 16];
            v324 = v128 - 16;
            v325 = v482 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v326 = *(_OWORD *)v324;
              *((_OWORD *)v323 - 1) = *((_OWORD *)v324 - 1);
              *(_OWORD *)v323 = v326;
              v323 -= 32;
              v324 -= 32;
              v325 -= 32;
            }
            while (v325);
            if (v482 == v287)
              goto LABEL_353;
            if ((v482 & 0x18) == 0)
            {
              v139 = &v470[-v287];
              v128 -= v287;
LABEL_351:
              v363 = v139 - 1;
              do
              {
                v364 = *--v128;
                *v363-- = v364;
              }
              while (v128 != v129);
LABEL_353:
              v128 = v129;
              v285 = v138;
LABEL_354:
              *a1 = (uint64_t)v285;
              a1[1] = (uint64_t)&v138[__sz];
              a1[2] = (uint64_t)&v138[v136];
              if (v128)
                operator delete(v128);
              goto LABEL_356;
            }
          }
          else
          {
            v287 = 0;
          }
          v139 = &v470[-(v482 & 0xFFFFFFFFFFFFFFF8)];
          v327 = &v473[&v128[-v287] - v129 - 8];
          v328 = &v128[-v287 - 8];
          v329 = v287 - (v482 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v330 = *(_QWORD *)v328;
            v328 -= 8;
            *(_QWORD *)v327 = v330;
            v327 -= 8;
            v329 += 8;
          }
          while (v329);
          v128 -= v482 & 0xFFFFFFFFFFFFFFF8;
          if (v482 == (v482 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_353;
          goto LABEL_351;
        case 3u:
          v99 = (char *)*a1;
          v100 = (char *)a1[1];
          if (v100 != (char *)*a1)
          {
            a1[1] = (uint64_t)v99;
            v100 = v99;
          }
          if (a1[2] - (uint64_t)v99 >= __sz)
            goto LABEL_89;
          if ((__sz & 0x8000000000000000) != 0)
            goto LABEL_455;
          v101 = operator new(__sz);
          v102 = v100 - v99;
          v103 = &v101[v100 - v99];
          v104 = v103;
          a1 = v492;
          v17 = v493;
          if (v100 == v99)
            goto LABEL_87;
          v104 = v101;
          if (v102 < 8 || (unint64_t)(v99 - v101) < 0x20)
          {
            v105 = v100;
            v106 = &v101[v100 - v99];
            goto LABEL_85;
          }
          if (v102 >= 0x20)
          {
            v286 = v102 & 0xFFFFFFFFFFFFFFE0;
            v303 = &v101[v102 - 16];
            v304 = (__int128 *)(v100 - 16);
            v305 = v102 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v306 = *v304;
              *(v303 - 1) = *(v304 - 1);
              *v303 = v306;
              v303 -= 2;
              v304 -= 2;
              v305 -= 32;
            }
            while (v305);
            if (v102 == v286)
            {
LABEL_87:
              *v492 = (uint64_t)v104;
              v492[1] = (uint64_t)v103;
              v492[2] = (uint64_t)&v101[__sz];
              if (v99)
                operator delete(v99);
LABEL_89:
              v109 = 0;
              v110 = v496 + v28 + 1;
              v12 = v489;
              do
              {
                while (1)
                {
                  v111 = 0;
                  v112 = 0;
                  v113 = 0;
                  v114 = v110;
                  v115 = &v17[v110];
                  do
                  {
                    v116 = (char)v115[v112];
                    v113 |= (unint64_t)(v115[v112] & 0x7F) << v111;
                    v117 = v112 + 1;
                    if (v112 > 8)
                      break;
                    v111 += 7;
                    ++v112;
                  }
                  while (v116 < 0);
                  v118 = v113 + v24;
                  if (v21 >= 0x40)
                    break;
                  a7->i32[v109] = ((unint64_t)a7->u32[v109] << v21) | v118 & ~(-1 << v21);
                  v110 = v114 + v117;
                  if (++v109 == v494)
                    goto LABEL_96;
                }
                a7->i32[v109] = v118;
                v110 = v114 + v117;
                ++v109;
              }
              while (v109 != v494);
LABEL_96:
              v16 = v114 + v117;
              goto LABEL_13;
            }
            if ((v102 & 0x18) == 0)
            {
              v106 = &v103[-v286];
              v105 = &v100[-v286];
LABEL_85:
              v107 = v106 - 1;
              do
              {
                v108 = *--v105;
                *v107-- = v108;
              }
              while (v105 != v99);
              goto LABEL_87;
            }
          }
          else
          {
            v286 = 0;
          }
          v105 = &v100[-(v102 & 0xFFFFFFFFFFFFFFF8)];
          v106 = &v103[-(v102 & 0xFFFFFFFFFFFFFFF8)];
          v307 = &v101[&v100[-v286] - v99 - 8];
          v308 = (uint64_t *)&v100[-v286 - 8];
          v309 = v286 - (v102 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v310 = *v308--;
            *v307-- = v310;
            v309 += 8;
          }
          while (v309);
          if (v102 != (v102 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_85;
          goto LABEL_87;
        case 4u:
          v119 = (uint64_t *)operator new();
          v120 = v119;
          v121 = v486 - v16 - v28;
          v17 = v493;
          *v119 = (uint64_t)&v493[v16 + 1 + v28];
          v119[1] = v121;
          v119[2] = 0;
          v122 = 8 * v121;
          if (!v122)
          {
            v18 = 0;
            goto LABEL_102;
          }
          v123 = (char *)*v119;
          v124 = *(unsigned __int8 *)*v119;
          v119[2] = 1;
          v125 = (v124 >> 6) & 2 | (*v123 >> 6) & 1;
          v119[2] = 2;
          v126 = (*v123 >> 5) & 1 | (2 * v125);
          v119[2] = 3;
          if (v126 != 2)
          {
            if (v126 != 1)
            {
              v18 = 3;
              if (v126)
                goto LABEL_454;
              if (v122 >= 8)
              {
                v195 = (_BYTE *)*v119;
                v196 = *(unsigned __int8 *)*v119 >> 4;
                v119[2] = 4;
                v197 = (*v195 >> 3) & 1 | (2 * (v196 & 1));
                v119[2] = 5;
                v198 = *v195 >> 2;
                v119[2] = 6;
                v199 = (4 * v197) | (2 * (v198 & 1)) | (*v195 >> 1) & 1;
                v119[2] = 7;
                LODWORD(v195) = *v195 & 1;
                v119[2] = 8;
                v127 = (v195 | (2 * v199)) + 1;
                v18 = 8;
LABEL_169:
                a1 = v492;
                for (i = 0; i != v494; ++i)
                {
                  while (1)
                  {
                    if (v18 + v127 <= v122)
                    {
                      v201 = 0;
                      v202 = *v119;
                      v203 = v127;
                      do
                      {
                        v201 = (*(unsigned __int8 *)(v202 + (v18 >> 3)) >> (~(_BYTE)v18 & 7)) & 1 | (2 * v201);
                        v119[2] = ++v18;
                        --v203;
                      }
                      while (v203);
                    }
                    else
                    {
                      v201 = 0;
                    }
                    v204 = v201 + v24;
                    if (v21 >= 0x40)
                      break;
                    a7->i32[i] = ((unint64_t)a7->u32[i] << v21) | v204 & ~(-1 << v21);
                    if (++i == v494)
                      goto LABEL_9;
                  }
                  a7->i32[i] = v204;
                }
LABEL_9:
                v19 = v18 >> 3;
                if ((v18 & 7) != 0)
                  ++v19;
                v16 = v496 + v28 + v19 + 1;
                MEMORY[0x18D76437C](v120, 0x1050C40E4AAA758);
LABEL_12:
                v12 = v489;
LABEL_13:
                v20 = v495;
                goto LABEL_14;
              }
LABEL_102:
              v127 = 1;
              goto LABEL_169;
            }
            v216 = 0;
            v217 = *v123;
            v119[2] = 4;
            v218 = v217 & 0x10 | *v123 & 0xF;
            v119[2] = 5;
            v219 = *v123;
            v119[2] = 6;
            v220 = v218 & 0xFFFFFFF8 | v219 & 4 | *v123 & 3;
            v119[2] = 7;
            v221 = v220 & 0xFFFFFFFE | *v123 & 1;
            v119[2] = 8;
            v18 = 8;
            a1 = v492;
            while (v18 + 1 > v122)
            {
              v222 = 0;
              v223 = 0;
              if ((_DWORD)v221)
                goto LABEL_211;
LABEL_215:
              v231 = v24 + (v223 | (v222 << v221));
              if (v21 < 0x40)
              {
                a7->i32[v216] = ((unint64_t)a7->u32[v216] << v21) | v231 & ~(-1 << v21);
                if (++v216 == v494)
                  goto LABEL_9;
              }
              else
              {
                a7->i32[v216++] = v231;
                if (v216 == v494)
                  goto LABEL_9;
              }
            }
            v224 = 0;
            v222 = 8 * (v484 - v16 - v28) - v18;
            v225 = v35 - v18;
            while (1)
            {
              v226 = v18++;
              v227 = v123[v226 >> 3];
              v120[2] = v18;
              if (((v227 >> (~(_BYTE)v226 & 7)) & 1) == 0)
                break;
              if (v225 == ++v224)
              {
                v18 = v226 + 1;
                v223 = 0;
                if ((_DWORD)v221)
                  goto LABEL_211;
                goto LABEL_215;
              }
            }
            v222 = v224;
            v18 = v226 + 1;
            v223 = 0;
            if (!(_DWORD)v221)
              goto LABEL_215;
LABEL_211:
            if (v18 + v221 <= v122)
            {
              v228 = 0;
              v229 = -v221;
              do
              {
                v223 = (v123[v18 >> 3] >> (~(_BYTE)v18 & 7)) & 1 | (2 * v228);
                v120[2] = ++v18;
                v228 = v223;
                v230 = __CFADD__(v229++, 1);
              }
              while (!v230);
            }
            goto LABEL_215;
          }
          v232 = *v123;
          v119[2] = 4;
          v233 = v232 & 0x10 | *v123 & 0xF;
          v119[2] = 5;
          v234 = *v123;
          v119[2] = 6;
          v235 = *v123;
          v119[2] = 7;
          v236 = v233 & 0xFFFFFFF8 | v234 & 4 | v235 & 2 | *v123 & 1;
          v119[2] = 8;
          LODWORD(v497) = v236;
          if (v122 >= 0xD)
          {
            v278 = v123[1];
            v119[2] = 9;
            v279 = (v278 >> 6) & 2 | (v123[1] >> 6) & 1;
            v119[2] = 10;
            v280 = v123[1];
            v119[2] = 11;
            v281 = (4 * v279) | (v280 >> 4) & 2 | (v123[1] >> 4) & 1;
            v119[2] = 12;
            v282 = (2 * v281) | (v123[1] >> 3) & 1;
            v119[2] = 13;
            v237 = v494;
            DWORD1(v497) = v282;
            if (v122 >= 0x12)
            {
              v238 = v123[1] >> 2;
              v119[2] = 14;
              v239 = (v123[1] >> 1) & 1 | (2 * (v238 & 1));
              v119[2] = 15;
              LOBYTE(v238) = v123[1];
              v119[2] = 16;
              v240 = (4 * v239) | (2 * (v238 & 1)) | (v123[2] >> 7) & 1;
              v119[2] = 17;
              v241 = (v123[2] >> 6) & 1 | (2 * v240);
              v119[2] = 18;
              goto LABEL_250;
            }
          }
          else
          {
            v237 = v494;
            DWORD1(v497) = 0;
          }
          v241 = 0;
LABEL_250:
          DWORD2(v497) = v241;
          v283 = a7;
          do
          {
            while (1)
            {
              v284 = v24 + geo::ReadBitstream::unpackRice2(v120, &v497);
              if (v21 >= 0x40)
                break;
              v283->i32[0] = ((unint64_t)v283->u32[0] << v21) | v284 & ~(-1 << v21);
              v283 = (int8x16_t *)((char *)v283 + 4);
              if (!--v237)
                goto LABEL_8;
            }
            v283->i32[0] = v284;
            v283 = (int8x16_t *)((char *)v283 + 4);
            --v237;
          }
          while (v237);
LABEL_8:
          v18 = v120[2];
          a1 = v492;
          goto LABEL_9;
        default:
          return 3;
      }
    }
    v64 = v491 - 8 * v16;
    do
    {
      v65 = v26;
      v66 = v64;
      v67 = (char)v25[v23];
      v24 |= (unint64_t)(v25[v23] & 0x7F) << v22;
      if (v23 > 8)
        break;
      ++v23;
      v22 += 7;
      ++v26;
      v64 -= 8;
    }
    while (v67 < 0);
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v71 = &v17[v16];
    do
    {
      v72 = v66;
      v73 = (char)v71[v65 + 1];
      v70 |= (unint64_t)(v71[++v65] & 0x7F) << v68;
      if (v69 > 8)
        break;
      ++v69;
      v68 += 7;
      v66 -= 8;
    }
    while (v73 < 0);
    switch(v17[v16])
    {
      case 1u:
        if (!a1[3])
        {
          v74 = (_QWORD *)operator new();
          v75 = (_QWORD *)operator new();
          v76 = operator new();
          a1 = v492;
          v17 = v493;
          *(_QWORD *)(v76 + 20) = 0;
          *(_QWORD *)(v76 + 12) = 0;
          *(_DWORD *)(v76 + 36) = 0;
          *(_QWORD *)(v76 + 28) = 0;
          *(_WORD *)(v76 + 40) = 257;
          *(_QWORD *)(v76 + 44) = 0;
          *(_QWORD *)(v76 + 60) = 0;
          *(_QWORD *)(v76 + 52) = 0;
          *(_DWORD *)(v76 + 67) = 0;
          *(_DWORD *)(v76 + 72) = 0;
          *(_WORD *)(v76 + 76) = 257;
          *(_QWORD *)(v76 + 136) = 0;
          *(_OWORD *)(v76 + 80) = 0u;
          *(_OWORD *)(v76 + 96) = 0u;
          *(_OWORD *)(v76 + 112) = 0u;
          *v75 = v76;
          *v74 = v75;
          v77 = (_QWORD **)v492[3];
          v492[3] = (uint64_t)v74;
          if (v77)
          {
            v78 = *v77;
            *v77 = 0;
            if (v78)
            {
              v79 = (_QWORD *)*v78;
              *v78 = 0;
              if (v79)
              {
                v80 = (void *)v79[13];
                if (v80)
                {
                  v79[14] = v80;
                  operator delete(v80);
                }
                v81 = (void *)v79[10];
                if (v81)
                {
                  v79[11] = v81;
                  operator delete(v81);
                }
                MEMORY[0x18D76437C](v79, 0x1070C40ADA6D0DELL);
              }
              MEMORY[0x18D76437C](v78, 0x20C4093837F09);
              a1 = v492;
            }
            MEMORY[0x18D76437C](v77, 0x20C4093837F09);
          }
        }
        v82 = v70 - 2;
        if (v70 < 2)
          return 3;
        v83 = &v17[v496 + v65];
        v84 = v83[1];
        v85 = v83[2];
        v87 = *a1;
        v86 = (char *)a1[1];
        v88 = (unint64_t)&v86[-*a1];
        v89 = (unint64_t)a1;
        v90 = v494 - v88;
        if (v494 > v88)
        {
          v91 = *(_QWORD *)(v89 + 16);
          if (v91 - (uint64_t)v86 >= v90)
          {
            v242 = &v86[v90];
            v243 = v86;
            v244 = v85;
            v245 = v84;
            bzero(v243, v494 - v88);
            v82 = v70 - 2;
            v84 = v245;
            v85 = v244;
            *(_QWORD *)(v89 + 8) = v242;
            v96 = (uint64_t *)v89;
            LODWORD(v89) = v494;
            goto LABEL_383;
          }
          v472 = v84;
          v481 = v85;
          if ((v494 & 0x8000000000000000) != 0)
            goto LABEL_456;
          v92 = v91 - v87;
          v93 = 2 * v92;
          if (2 * v92 <= v494)
            v93 = v494;
          if (v92 >= 0x3FFFFFFFFFFFFFFFLL)
            v94 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v94 = v93;
          v467 = (char *)operator new(v94);
          v464 = &v467[v88];
          bzero(&v467[v88], v90);
          v95 = v94;
          if (v86 == (char *)v87)
          {
            v96 = v492;
            v89 = v494;
            v85 = v481;
            v84 = v472;
            v297 = &v467[v88];
            v97 = v467;
            goto LABEL_381;
          }
          if (v88 < 8)
          {
            v96 = v492;
            v89 = v494;
            v85 = v481;
            v84 = v472;
            v98 = &v467[v88];
            v97 = v467;
            goto LABEL_378;
          }
          v98 = &v467[v88];
          v97 = v467;
          v96 = v492;
          v89 = v494;
          v85 = v481;
          v84 = v472;
          if ((unint64_t)(v87 - (_QWORD)v467) >= 0x20)
          {
            if (v88 < 0x20)
            {
              v301 = 0;
              goto LABEL_328;
            }
            v301 = v88 & 0xFFFFFFFFFFFFFFE0;
            v339 = &v467[v88 - 16];
            v340 = v86 - 16;
            v341 = v88 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v342 = *(_OWORD *)v340;
              *((_OWORD *)v339 - 1) = *((_OWORD *)v340 - 1);
              *(_OWORD *)v339 = v342;
              v339 -= 32;
              v340 -= 32;
              v341 -= 32;
            }
            while (v341);
            if (v88 == v301)
              goto LABEL_380;
            if ((v88 & 0x18) != 0)
            {
LABEL_328:
              v98 = &v464[-(v88 & 0xFFFFFFFFFFFFFFF8)];
              v343 = &v86[-v301 - v87 - 8 + (_QWORD)v467];
              v344 = &v86[-v301 - 8];
              v345 = v301 - (v88 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v346 = *(_QWORD *)v344;
                v344 -= 8;
                *(_QWORD *)v343 = v346;
                v343 -= 8;
                v345 += 8;
              }
              while (v345);
              v86 -= v88 & 0xFFFFFFFFFFFFFFF8;
              if (v88 == (v88 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_380;
              goto LABEL_378;
            }
            v98 = &v464[-v301];
            v86 -= v301;
          }
LABEL_378:
          v377 = v98 - 1;
          do
          {
            v378 = *--v86;
            *v377-- = v378;
          }
          while (v86 != (char *)v87);
LABEL_380:
          v86 = (char *)v87;
          v297 = v97;
LABEL_381:
          v82 = v70 - 2;
          *v96 = (uint64_t)v297;
          v96[1] = (uint64_t)&v97[v89];
          v96[2] = (uint64_t)&v97[v95];
          if (v86)
          {
            operator delete(v86);
            v82 = v70 - 2;
            v84 = v472;
            v85 = v481;
          }
          goto LABEL_383;
        }
        v96 = (uint64_t *)v89;
        LODWORD(v89) = v494;
        if (v494 < v88)
          v96[1] = v87 + v494;
LABEL_383:
        v379 = (unsigned __int8 *)*v96;
        v380 = *(uint64_t **)v96[3];
        LODWORD(v497) = 0;
        BYTE4(v497) = a4;
        BYTE5(v497) = a5;
        WORD3(v497) = 0;
        v498 = 1;
        v499 = 0;
        v500 = 1;
        v501 = 0;
        if (v84 >= 4)
          v381 = 1;
        else
          v381 = v84;
        v502 = v381;
        if (v85 == 2)
          v382 = 4;
        else
          v382 = 1;
        if (!v85)
          v382 = 0;
        v503 = v382;
        *((_QWORD *)&v497 + 1) = __PAIR64__(v89, v82);
        v383 = *v380;
        v504 = (uint64_t)&v493[v496 + 3 + v65];
        v505 = v82;
        result = gcl::polyline::DecoderImpl::decompressAttributes(v383, (uint64_t)&v504, (uint64_t)v379, 0, &v497);
        v12 = v489;
        if (!(_DWORD)result)
        {
          v384 = (int *)a7;
          v17 = v493;
          v385 = v494;
          do
          {
            v386 = *v379++;
            if (v24 + v386)
            {
              if (*v384)
                v387 = -*v384;
              else
                v387 = 0x80000000;
              *v384 = v387;
            }
            ++v384;
            --v385;
          }
          while (v385);
          v16 = v496 + v70 + v65 + 1;
          a1 = v492;
          goto LABEL_13;
        }
LABEL_451:
        if ((result - 1) >= 4)
          return 5;
        return result;
      case 2u:
        v171 = *a1;
        v170 = (char *)a1[1];
        v172 = (unint64_t)&v170[-*a1];
        v173 = a1;
        v174 = __sz - v172;
        if (__sz > v172)
        {
          v175 = v173[2];
          if (v175 - (uint64_t)v170 >= v174)
          {
            bzero(v170, __sz - v172);
            v173[1] = (uint64_t)&v170[v174];
            v180 = v173;
            v181 = v494;
            goto LABEL_368;
          }
          if ((__sz & 0x8000000000000000) != 0)
LABEL_456:
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          v176 = v175 - v171;
          v177 = 2 * v176;
          if (2 * v176 <= __sz)
            v177 = __sz;
          if (v176 >= 0x3FFFFFFFFFFFFFFFLL)
            v178 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v178 = v177;
          v483 = (char *)operator new(v178);
          v474 = &v483[v172];
          bzero(&v483[v172], v174);
          v179 = v178;
          if (v170 == (char *)v171)
          {
            v180 = v492;
            v181 = v494;
            v182 = v483;
            v296 = &v483[v172];
          }
          else
          {
            if (v172 < 8)
            {
              v180 = v492;
              v181 = v494;
              v182 = v483;
              v183 = &v483[v172];
              goto LABEL_363;
            }
            v182 = v483;
            v180 = v492;
            v181 = v494;
            v183 = &v483[v172];
            if ((unint64_t)(v171 - (_QWORD)v483) < 0x20)
              goto LABEL_363;
            if (v172 >= 0x20)
            {
              v299 = v172 & 0xFFFFFFFFFFFFFFE0;
              v331 = &v483[v172 - 16];
              v332 = v170 - 16;
              v333 = v172 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v334 = *(_OWORD *)v332;
                *((_OWORD *)v331 - 1) = *((_OWORD *)v332 - 1);
                *(_OWORD *)v331 = v334;
                v331 -= 32;
                v332 -= 32;
                v333 -= 32;
              }
              while (v333);
              if (v172 != v299)
              {
                if ((v172 & 0x18) == 0)
                {
                  v183 = &v474[-v299];
                  v170 -= v299;
                  goto LABEL_363;
                }
                goto LABEL_320;
              }
            }
            else
            {
              v299 = 0;
LABEL_320:
              v183 = &v474[-(v172 & 0xFFFFFFFFFFFFFFF8)];
              v335 = &v170[-v299 - v171 - 8 + (_QWORD)v483];
              v336 = &v170[-v299 - 8];
              v337 = v299 - (v172 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v338 = *(_QWORD *)v336;
                v336 -= 8;
                *(_QWORD *)v335 = v338;
                v335 -= 8;
                v337 += 8;
              }
              while (v337);
              v170 -= v172 & 0xFFFFFFFFFFFFFFF8;
              if (v172 != (v172 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_363:
                v370 = v183 - 1;
                do
                {
                  v371 = *--v170;
                  *v370-- = v371;
                }
                while (v170 != (char *)v171);
              }
            }
            v170 = (char *)v171;
            v296 = v182;
          }
          *v180 = (uint64_t)v296;
          v180[1] = (uint64_t)&v182[__sz];
          v180[2] = (uint64_t)&v182[v179];
          if (v170)
            operator delete(v170);
          goto LABEL_368;
        }
        v180 = v173;
        v181 = v494;
        if (__sz < v172)
          v180[1] = v171 + __sz;
LABEL_368:
        v372 = (uint64_t *)*v180;
        result = mgcl::muid::decompress((mgcl::muid *)&v493[v496 + 1 + v65], (const char *)v70, 0, 0, *v180, (unint64_t *)8, v181);
        if ((_DWORD)result)
          return result;
        v373 = (int *)a7;
        v17 = v493;
        v374 = v494;
        v12 = v489;
        v20 = v495;
        do
        {
          v375 = *v372++;
          if (v375 != -(uint64_t)v24)
          {
            if (*v373)
              v376 = -*v373;
            else
              v376 = 0x80000000;
            *v373 = v376;
          }
          ++v373;
          --v374;
        }
        while (v374);
        v16 = v496 + v70 + v65 + 1;
        a1 = v492;
LABEL_14:
        v15 = v20 + 1;
        if (v15 == v12)
          return 0;
        continue;
      case 3u:
        v140 = (char *)*a1;
        v141 = (char *)a1[1];
        if (v141 != (char *)*a1)
        {
          a1[1] = (uint64_t)v140;
          v141 = v140;
        }
        if (a1[2] - (uint64_t)v140 >= __sz)
          goto LABEL_126;
        if ((__sz & 0x8000000000000000) != 0)
          goto LABEL_456;
        v142 = operator new(__sz);
        v143 = v141 - v140;
        v144 = &v142[v141 - v140];
        v145 = v144;
        a1 = v492;
        v17 = v493;
        v12 = v489;
        if (v141 == v140)
          goto LABEL_124;
        v145 = v142;
        if (v143 < 8 || (unint64_t)(v140 - v142) < 0x20)
        {
          v146 = v141;
          v147 = &v142[v141 - v140];
          goto LABEL_122;
        }
        if (v143 >= 0x20)
        {
          v298 = v143 & 0xFFFFFFFFFFFFFFE0;
          v315 = &v142[v143 - 16];
          v316 = (__int128 *)(v141 - 16);
          v317 = v143 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v318 = *v316;
            *(v315 - 1) = *(v316 - 1);
            *v315 = v318;
            v315 -= 2;
            v316 -= 2;
            v317 -= 32;
          }
          while (v317);
          if (v143 == v298)
          {
LABEL_124:
            *v492 = (uint64_t)v145;
            v492[1] = (uint64_t)v144;
            v492[2] = (uint64_t)&v142[__sz];
            if (v140)
              operator delete(v140);
LABEL_126:
            v150 = 0;
            v20 = v495;
            v151 = v496 + v65 + 1;
            do
            {
              v152 = 0;
              v153 = 0;
              v154 = 0;
              v155 = v151;
              v156 = &v17[v151];
              do
              {
                v157 = (char)v156[v153];
                v154 |= (unint64_t)(v156[v153] & 0x7F) << v152;
                v158 = v153 + 1;
                if (v153 > 8)
                  break;
                v152 += 7;
                ++v153;
              }
              while (v157 < 0);
              if (v154 != -(uint64_t)v24)
              {
                v159 = a7->i32[v150];
                if (v159)
                  v160 = -v159;
                else
                  v160 = 0x80000000;
                a7->i32[v150] = v160;
              }
              v151 = v155 + v158;
              ++v150;
            }
            while (v150 != v494);
            v16 = v155 + v158;
            goto LABEL_14;
          }
          if ((v143 & 0x18) == 0)
          {
            v147 = &v144[-v298];
            v146 = &v141[-v298];
LABEL_122:
            v148 = v147 - 1;
            do
            {
              v149 = *--v146;
              *v148-- = v149;
            }
            while (v146 != v140);
            goto LABEL_124;
          }
        }
        else
        {
          v298 = 0;
        }
        v146 = &v141[-(v143 & 0xFFFFFFFFFFFFFFF8)];
        v147 = &v144[-(v143 & 0xFFFFFFFFFFFFFFF8)];
        v319 = &v142[&v141[-v298] - v140 - 8];
        v320 = (uint64_t *)&v141[-v298 - 8];
        v321 = v298 - (v143 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v322 = *v320--;
          *v319-- = v322;
          v321 += 8;
        }
        while (v321);
        if (v143 != (v143 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_122;
        goto LABEL_124;
      case 4u:
        v161 = (uint64_t *)operator new();
        v120 = v161;
        v162 = v486 - v16 - v65;
        v17 = v493;
        *v161 = (uint64_t)&v493[v16 + 1 + v65];
        v161[1] = v162;
        v161[2] = 0;
        v163 = 8 * v162;
        if (!v163)
        {
          v168 = 0;
          v12 = v489;
          goto LABEL_141;
        }
        v164 = (char *)*v161;
        v165 = *(unsigned __int8 *)*v161;
        v161[2] = 1;
        v166 = (v165 >> 6) & 2 | (*v164 >> 6) & 1;
        v161[2] = 2;
        v167 = (*v164 >> 5) & 1 | (2 * v166);
        v161[2] = 3;
        v12 = v489;
        if (v167 != 2)
        {
          if (v167 != 1)
          {
            v168 = 3;
            if (v167)
            {
LABEL_454:
              MEMORY[0x18D76437C](v120, 0x1050C40E4AAA758);
              return 3;
            }
            if (v163 >= 8)
            {
              v205 = (_BYTE *)*v161;
              v206 = *(unsigned __int8 *)*v161 >> 4;
              v161[2] = 4;
              v207 = (*v205 >> 3) & 1 | (2 * (v206 & 1));
              v161[2] = 5;
              v208 = *v205 >> 2;
              v161[2] = 6;
              v209 = (4 * v207) | (2 * (v208 & 1)) | (*v205 >> 1) & 1;
              v161[2] = 7;
              LODWORD(v205) = *v205 & 1;
              v161[2] = 8;
              v169 = (v205 | (2 * v209)) + 1;
              v168 = 8;
LABEL_189:
              a1 = v492;
              for (j = 0; j != v494; ++j)
              {
                if (v168 + v169 <= v163)
                {
                  v211 = 0;
                  v212 = *v161;
                  v213 = v169;
                  do
                  {
                    v211 = (*(unsigned __int8 *)(v212 + (v168 >> 3)) >> (~(_BYTE)v168 & 7)) & 1 | (2 * v211);
                    v161[2] = ++v168;
                    --v213;
                  }
                  while (v213);
                }
                else
                {
                  v211 = 0;
                }
                if (v211 != -(uint64_t)v24)
                {
                  v214 = a7->i32[j];
                  if (v214)
                    v215 = -v214;
                  else
                    v215 = 0x80000000;
                  a7->i32[j] = v215;
                }
              }
LABEL_271:
              v295 = v168 >> 3;
              if ((v168 & 7) != 0)
                ++v295;
              v16 = v496 + v65 + v295 + 1;
              MEMORY[0x18D76437C](v120, 0x1050C40E4AAA758);
              goto LABEL_13;
            }
LABEL_141:
            v169 = 1;
            goto LABEL_189;
          }
          v246 = 0;
          v247 = *v164;
          v161[2] = 4;
          v248 = v247 & 0x10 | *v164 & 0xF;
          v161[2] = 5;
          v249 = *v164;
          v161[2] = 6;
          v250 = v248 & 0xFFFFFFF8 | v249 & 4 | *v164 & 3;
          v161[2] = 7;
          v251 = v250 & 0xFFFFFFFE | *v164 & 1;
          v161[2] = 8;
          v168 = 8;
          a1 = v492;
          while (v168 + 1 > v163)
          {
            v252 = 0;
            v253 = 0;
            if ((_DWORD)v251)
              goto LABEL_234;
LABEL_238:
            if (v24 + (v253 | (v252 << v251)))
            {
              v260 = a7->i32[v246];
              if (v260)
                v261 = -v260;
              else
                v261 = 0x80000000;
              a7->i32[v246] = v261;
            }
            if (++v246 == v494)
              goto LABEL_271;
          }
          v254 = 0;
          v252 = 8 * (v484 - v16 - v65) - v168;
          v255 = v72 - v168;
          while (1)
          {
            v256 = v168++;
            v257 = v164[v256 >> 3];
            v120[2] = v168;
            if (((v257 >> (~(_BYTE)v256 & 7)) & 1) == 0)
              break;
            if (v255 == ++v254)
            {
              v168 = v256 + 1;
              v253 = 0;
              if ((_DWORD)v251)
                goto LABEL_234;
              goto LABEL_238;
            }
          }
          v252 = v254;
          v168 = v256 + 1;
          v253 = 0;
          if (!(_DWORD)v251)
            goto LABEL_238;
LABEL_234:
          if (v168 + v251 <= v163)
          {
            v258 = 0;
            v259 = -v251;
            do
            {
              v253 = (v164[v168 >> 3] >> (~(_BYTE)v168 & 7)) & 1 | (2 * v258);
              v120[2] = ++v168;
              v258 = v253;
              v230 = __CFADD__(v259++, 1);
            }
            while (!v230);
          }
          goto LABEL_238;
        }
        v262 = *v164;
        v161[2] = 4;
        v263 = v262 & 0x10 | *v164 & 0xF;
        v161[2] = 5;
        v264 = *v164;
        v161[2] = 6;
        v265 = *v164;
        v161[2] = 7;
        v266 = v263 & 0xFFFFFFF8 | v264 & 4 | v265 & 2 | *v164 & 1;
        v161[2] = 8;
        LODWORD(v497) = v266;
        if (v163 >= 0xD)
        {
          v288 = v164[1];
          v161[2] = 9;
          v289 = (v288 >> 6) & 2 | (v164[1] >> 6) & 1;
          v161[2] = 10;
          v290 = v164[1];
          v161[2] = 11;
          v291 = (4 * v289) | (v290 >> 4) & 2 | (v164[1] >> 4) & 1;
          v161[2] = 12;
          v292 = (2 * v291) | (v164[1] >> 3) & 1;
          v161[2] = 13;
          a1 = v492;
          v267 = v494;
          DWORD1(v497) = v292;
          if (v163 >= 0x12)
          {
            v268 = v164[1] >> 2;
            v161[2] = 14;
            v269 = (v164[1] >> 1) & 1 | (2 * (v268 & 1));
            v161[2] = 15;
            LOBYTE(v268) = v164[1];
            v161[2] = 16;
            v270 = (4 * v269) | (2 * (v268 & 1)) | (v164[2] >> 7) & 1;
            v161[2] = 17;
            v271 = (v164[2] >> 6) & 1 | (2 * v270);
            v161[2] = 18;
            goto LABEL_263;
          }
        }
        else
        {
          a1 = v492;
          v267 = v494;
          DWORD1(v497) = 0;
        }
        v271 = 0;
LABEL_263:
        DWORD2(v497) = v271;
        v293 = (int *)a7;
        do
        {
          if (v24 + geo::ReadBitstream::unpackRice2(v120, &v497))
          {
            if (*v293)
              v294 = -*v293;
            else
              v294 = 0x80000000;
            *v293 = v294;
          }
          ++v293;
          --v267;
        }
        while (v267);
        v168 = v120[2];
        goto LABEL_271;
      default:
        return 3;
    }
  }
}

void sub_1885F2960(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D76437C](v2, 0x20C4093837F09);
  MEMORY[0x18D76437C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t gcl::polyline::DecoderImpl::decodeAttributes(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  unsigned __int8 *v9;
  unint64_t v10;
  __int128 v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  _BOOL4 v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  char v37;
  char v38;
  uint64_t i;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  BOOL v55;
  int v56;
  BOOL v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  int v69;
  unsigned __int16 *v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  _BOOL4 v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  int v80;
  uint64_t v81;
  int v83;
  _WORD v84[2];
  _QWORD __b[4];

  __b[3] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 48) || *(_BYTE *)(a1 + 49) != 1)
  {
    LODWORD(v7) = a3 & ~(a3 >> 63);
  }
  else
  {
    v57 = a3 < 4;
    a3 -= 4;
    if (v57)
      return 3;
    if (a2 == (unsigned __int8 *)-4)
      return 3;
    v7 = *(unsigned int *)a2;
    if (a3 < v7)
      return 3;
    a2 += 4;
  }
  if (a3 >= v7)
    v9 = a2;
  else
    v9 = 0;
  if (a3 >= v7)
    v10 = v7;
  else
    v10 = 0;
  *(_DWORD *)(a1 + 128) = v10;
  *(_QWORD *)(a1 + 136) = v9;
  *(_QWORD *)&v11 = 0xFFFF000000000000;
  *((_QWORD *)&v11 + 1) = 0xFFFF000000000000;
  *(_OWORD *)(a1 + 152) = v11;
  *(_QWORD *)(a1 + 168) = 16;
  if (!(_DWORD)v10)
  {
    v12 = -16777216;
    goto LABEL_20;
  }
  v12 = *v9 << 24;
  *(_DWORD *)(a1 + 160) = v12;
  if ((_DWORD)v10 == 1)
  {
LABEL_20:
    v13 = v12 | 0xFF0000;
    goto LABEL_21;
  }
  v13 = v12 | (v9[1] << 16);
  *(_DWORD *)(a1 + 160) = v13;
  if (v10 <= 2)
  {
LABEL_21:
    v14 = v13 | 0xFF00;
    goto LABEL_22;
  }
  v14 = v13 | (v9[2] << 8);
  *(_DWORD *)(a1 + 160) = v14;
  if ((_DWORD)v10 == 3)
  {
LABEL_22:
    v15 = 255;
    goto LABEL_23;
  }
  v15 = v9[3];
LABEL_23:
  v16 = v15 | v14;
  *(_DWORD *)(a1 + 160) = v15 | v14;
  v17 = 3;
  *(_QWORD *)(a1 + 144) = 3;
  memcpy((void *)(a1 + 176), &gcl::ArithmeticDecoder::probUpdateLutInterleaved, 0x400uLL);
  v83 = *(unsigned __int8 *)(a1 + 69);
  if (v83 != 1)
  {
    v20 = -65536;
    v21 = 16;
    goto LABEL_49;
  }
  memset_pattern16(__b, &unk_189CFAE50, 4uLL);
  v18 = *(unsigned int *)(a1 + 56);
  if ((int)v18 < 1)
  {
    v20 = -65536;
    v21 = 16;
    v17 = 3;
    if (*(_BYTE *)(a1 + 77))
      return 5;
    goto LABEL_52;
  }
  v19 = 0;
  v20 = -65536;
  v21 = 16;
  v17 = 3;
  do
  {
    if (v19)
    {
      v28 = *(unsigned __int8 *)(v19 + a5 - 1);
      if (v20 < 0x40000001)
        goto LABEL_42;
      goto LABEL_26;
    }
    v28 = 0;
    if (v20 < 0x40000001)
    {
      while (1)
      {
LABEL_42:
        v16 *= 2;
        *(_DWORD *)(a1 + 168) = --v21;
        if (v21)
          goto LABEL_41;
        *(_QWORD *)(a1 + 144) = v17 + 1;
        if (v17 + 1 >= v10)
        {
          v30 = 65280;
          v17 += 2;
          *(_QWORD *)(a1 + 144) = v17;
          if (v17 >= v10)
          {
LABEL_47:
            v29 = 255;
            goto LABEL_40;
          }
        }
        else
        {
          v30 = v9[v17 + 1] << 8;
          v17 += 2;
          *(_QWORD *)(a1 + 144) = v17;
          if (v17 >= v10)
            goto LABEL_47;
        }
        v29 = v9[v17];
LABEL_40:
        v16 |= v30 | v29;
        v21 = 16;
        *(_DWORD *)(a1 + 168) = 16;
LABEL_41:
        v22 = 2 * v20;
        v55 = v20 >= 0x20000001;
        v20 *= 2;
        if (v55)
          goto LABEL_27;
      }
    }
LABEL_26:
    v22 = v20;
LABEL_27:
    v23 = *((unsigned __int16 *)__b + v28);
    v24 = (HIWORD(v22) * v23) & 0xFFFF0000;
    v25 = v22 - v24;
    v26 = v16 >= v24;
    *((_WORD *)__b + v28) = *(_WORD *)(a1 + 2 * ((v23 >> 7) & 0x1FE | v26) + 176) + v23;
    if (v16 < v24)
      v20 = v24;
    else
      v20 = v25;
    if (v16 < v24)
      v27 = 0;
    else
      v27 = v24;
    v16 -= v27;
    *(_DWORD *)(a1 + 156) = v20;
    *(_DWORD *)(a1 + 160) = v16;
    *(_BYTE *)(a5 + v19++) = v26;
  }
  while (v19 != v18);
LABEL_49:
  if (*(_BYTE *)(a1 + 77))
    return 5;
LABEL_52:
  v32 = *(unsigned int *)(a1 + 56);
  v31 = *(unsigned int *)(a1 + 60);
  v33 = *(unsigned __int8 *)(a1 + 76);
  if (v33 == 1)
  {
    memset(__b, 0, 24);
    if (!(_DWORD)v31)
      return 0;
    v81 = a5;
    if ((v31 & 0x80000000) != 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v70 = (unsigned __int16 *)operator new(2 * (int)v31);
    memset_pattern16(v70, &unk_189CFAE50, 2 * (int)v31);
    if ((int)v32 < 1)
    {
LABEL_163:
      operator delete(v70);
      return 0;
    }
    v71 = 0;
    while (v83 && !*(_BYTE *)(v81 + v71))
    {
LABEL_141:
      if (++v71 == v32)
        goto LABEL_163;
    }
    v72 = 0;
    while (v20 >= 0x40000001)
    {
      v78 = v20;
LABEL_145:
      v73 = v70[v72];
      v74 = (HIWORD(v78) * v73) & 0xFFFF0000;
      v75 = v78 - v74;
      v76 = v16 >= v74;
      v70[v72] = *(_WORD *)(a1 + 2 * ((v73 >> 7) & 0x1FE | v76) + 176) + v73;
      if (v16 < v74)
        v20 = v74;
      else
        v20 = v75;
      if (v16 < v74)
        v77 = 0;
      else
        v77 = v74;
      v16 -= v77;
      *(_DWORD *)(a1 + 156) = v20;
      *(_DWORD *)(a1 + 160) = v16;
      *(_BYTE *)(a4 + v71 * (int)v31 + v72++) = v76;
      if (v72 == v31)
        goto LABEL_141;
    }
    while (1)
    {
      v16 *= 2;
      *(_DWORD *)(a1 + 168) = --v21;
      if (v21)
        goto LABEL_156;
      *(_QWORD *)(a1 + 144) = v17 + 1;
      if (v17 + 1 >= v10)
      {
        v80 = 65280;
        v17 += 2;
        *(_QWORD *)(a1 + 144) = v17;
        if (v17 >= v10)
        {
LABEL_162:
          v79 = 255;
          goto LABEL_155;
        }
      }
      else
      {
        v80 = v9[v17 + 1] << 8;
        v17 += 2;
        *(_QWORD *)(a1 + 144) = v17;
        if (v17 >= v10)
          goto LABEL_162;
      }
      v79 = v9[v17];
LABEL_155:
      v16 |= v80 | v79;
      v21 = 16;
      *(_DWORD *)(a1 + 168) = 16;
LABEL_156:
      v78 = 2 * v20;
      v55 = v20 >= 0x20000001;
      v20 *= 2;
      if (v55)
        goto LABEL_145;
    }
  }
  if (v33 == 3)
  {
    memset_pattern16(v84, &unk_189CFAE50, 4uLL);
    v34 = v83;
    __b[0] = 0;
    if ((int)v31 >= 1 && (int)v32 >= 1)
    {
      v35 = 0;
      v36 = -1;
      v37 = 1;
      v38 = 1;
      do
      {
        for (i = 0; i != v32; ++i)
        {
          if (!v34 || *(_BYTE *)(a5 + i))
          {
            if ((v36 & 0x80000000) == 0)
              goto LABEL_62;
            if ((v38 & 1) == 0)
            {
              v37 ^= 1u;
              goto LABEL_86;
            }
            if (v20 >= 0x40000001)
            {
              v41 = v20;
LABEL_70:
              v42 = (v41 >> 1) & 0x7FFF0000;
              v43 = v41 - v42;
              v37 = v16 >= v42;
              if (v16 < v42)
                v20 = v42;
              else
                v20 = v43;
              if (v16 < v42)
                v42 = 0;
              v16 -= v42;
              *(_DWORD *)(a1 + 156) = v20;
              *(_DWORD *)(a1 + 160) = v16;
LABEL_86:
              v46 = 0;
              v47 = v37 & 1;
              v48 = *(_DWORD *)((unint64_t)__b & 0xFFFFFFFFFFFFFFFBLL | (4 * v47));
              v49 = (unsigned __int16)v84[v47];
              v50 = v48;
              if (v20 < 0x40000001)
                goto LABEL_107;
LABEL_87:
              v51 = v20;
LABEL_88:
              v52 = (HIWORD(v51) * (unsigned __int16)v49) & 0xFFFF0000;
              v53 = v51 - v52;
              if (v16 < v52)
                v54 = 0;
              else
                v54 = v52;
              v55 = v16 >= v52;
              v16 -= v54;
              v56 = v55;
              v49 += *(unsigned __int16 *)(a1 + 2 * ((v49 >> 7) & 0x1FE | v56) + 176);
              if (v55)
                v20 = v53;
              else
                v20 = v52;
              *(_DWORD *)(a1 + 156) = v20;
              *(_DWORD *)(a1 + 160) = v16;
              v57 = v55 && v50 < 31;
              if (!v57)
              {
                v84[v47] = v49;
                v61 = 0;
                if (!v50)
                {
LABEL_114:
                  v36 = v61 + v46;
                  v62 = v36 >> v48;
                  if (v48 && !v62)
                  {
                    v40 = -1;
                    goto LABEL_60;
                  }
                  if (v62 < 2)
                  {
                    v38 = 0;
                  }
                  else
                  {
                    v40 = 1;
LABEL_60:
                    v38 = 0;
                    *(_DWORD *)((unint64_t)__b | (4 * v47)) = v40 + v48;
                  }
                  v34 = v83;
LABEL_62:
                  *(_BYTE *)(a4 + v35 + i * v31) = v37 & 1;
                  --v36;
                  continue;
                }
                while (v20 >= 0x40000001)
                {
                  v67 = v20;
LABEL_118:
                  v63 = (v67 >> 1) & 0x7FFF0000;
                  v64 = v67 - v63;
                  v65 = v16 >= v63;
                  if (v16 < v63)
                    v20 = v63;
                  else
                    v20 = v64;
                  if (v16 < v63)
                    v66 = 0;
                  else
                    v66 = v63;
                  v16 -= v66;
                  *(_DWORD *)(a1 + 156) = v20;
                  *(_DWORD *)(a1 + 160) = v16;
                  v61 |= v65 << --v50;
                  if (!v50)
                    goto LABEL_114;
                }
                while (2)
                {
                  v16 *= 2;
                  *(_DWORD *)(a1 + 168) = --v21;
                  if (v21)
                    goto LABEL_129;
                  *(_QWORD *)(a1 + 144) = v17 + 1;
                  if (v17 + 1 >= v10)
                  {
                    v69 = 65280;
                    v17 += 2;
                    *(_QWORD *)(a1 + 144) = v17;
                    if (v17 >= v10)
                      goto LABEL_135;
                  }
                  else
                  {
                    v69 = v9[v17 + 1] << 8;
                    v17 += 2;
                    *(_QWORD *)(a1 + 144) = v17;
                    if (v17 >= v10)
                    {
LABEL_135:
                      v68 = 255;
LABEL_128:
                      v16 |= v69 | v68;
                      v21 = 16;
                      *(_DWORD *)(a1 + 168) = 16;
LABEL_129:
                      v67 = 2 * v20;
                      v55 = v20 >= 0x20000001;
                      v20 *= 2;
                      if (v55)
                        goto LABEL_118;
                      continue;
                    }
                  }
                  break;
                }
                v68 = v9[v17];
                goto LABEL_128;
              }
              v58 = 1 << v50++;
              v46 |= v58;
              if (v20 >= 0x40000001)
                goto LABEL_87;
LABEL_107:
              while (2)
              {
                v16 *= 2;
                *(_DWORD *)(a1 + 168) = --v21;
                if (v21)
                  goto LABEL_106;
                *(_QWORD *)(a1 + 144) = v17 + 1;
                if (v17 + 1 >= v10)
                {
                  v60 = 65280;
                  v17 += 2;
                  *(_QWORD *)(a1 + 144) = v17;
                  if (v17 >= v10)
                    goto LABEL_112;
                }
                else
                {
                  v60 = v9[v17 + 1] << 8;
                  v17 += 2;
                  *(_QWORD *)(a1 + 144) = v17;
                  if (v17 >= v10)
                  {
LABEL_112:
                    v59 = 255;
LABEL_105:
                    v16 |= v60 | v59;
                    v21 = 16;
                    *(_DWORD *)(a1 + 168) = 16;
LABEL_106:
                    v51 = 2 * v20;
                    v55 = v20 >= 0x20000001;
                    v20 *= 2;
                    if (v55)
                      goto LABEL_88;
                    continue;
                  }
                }
                break;
              }
              v59 = v9[v17];
              goto LABEL_105;
            }
            while (2)
            {
              v16 *= 2;
              *(_DWORD *)(a1 + 168) = --v21;
              if (v21)
                goto LABEL_78;
              *(_QWORD *)(a1 + 144) = v17 + 1;
              if (v17 + 1 >= v10)
              {
                v45 = 65280;
                v17 += 2;
                *(_QWORD *)(a1 + 144) = v17;
                if (v17 >= v10)
                  goto LABEL_84;
              }
              else
              {
                v45 = v9[v17 + 1] << 8;
                v17 += 2;
                *(_QWORD *)(a1 + 144) = v17;
                if (v17 >= v10)
                {
LABEL_84:
                  v44 = 255;
LABEL_77:
                  v16 |= v45 | v44;
                  v21 = 16;
                  *(_DWORD *)(a1 + 168) = 16;
LABEL_78:
                  v41 = 2 * v20;
                  v55 = v20 >= 0x20000001;
                  v20 *= 2;
                  if (v55)
                    goto LABEL_70;
                  continue;
                }
              }
              break;
            }
            v44 = v9[v17];
            goto LABEL_77;
          }
        }
        ++v35;
      }
      while (v35 != v31);
    }
  }
  return 0;
}

void sub_1885F31D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id GEOResourceCachesDirectory(void *a1)
{
  if (a1)
    objc_msgSend(a1, "dataDirectoryFor:", 7);
  else
    +[GEOFilePaths pathFor:](GEOFilePaths, "pathFor:", 7);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_1885F3750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  std::__shared_weak_count *v28;
  void *v30;

  std::__shared_weak_count::~__shared_weak_count(v28);
  operator delete(v30);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)&a17);

  _Unwind_Resume(a1);
}

id GEORegionalResourcesDirectory(void *a1)
{
  void *v1;
  void *v2;

  if (a1)
    objc_msgSend(a1, "dataDirectoryFor:", 8);
  else
    +[GEOFilePaths pathFor:](GEOFilePaths, "pathFor:", 8);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stringByAppendingPathComponent:", CFSTR("RegionalResources"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void sub_1885F3FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1885F4248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void ___initStorageReadOnly_block_invoke()
{
  GEOConfigStorageDirectReadOnly *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  GEOConfigStorageDirectReadOnly *v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  id v10;
  uint8_t buf[2];
  __int16 v12;

  if (+[GEOPlatform isRunningInGeod](GEOPlatform, "isRunningInGeod"))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      return;
    v12 = 0;
    v7 = MEMORY[0x1E0C81028];
    v8 = "Assertion failed: !GEOPlatform.isRunningInGeod";
    v9 = (uint8_t *)&v12;
LABEL_9:
    _os_log_fault_impl(&dword_1885A9000, v7, OS_LOG_TYPE_FAULT, v8, v9, 2u);
    return;
  }
  if (!_MergedGlobals_3_2)
  {
    v0 = [GEOConfigStorageDirectReadOnly alloc];
    +[GEOFilePaths urlFor:](GEOFilePaths, "urlFor:", 34);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = -[GEOConfigStorageDirectReadOnly initWithPath:forSource:](v0, "initWithPath:forSource:", v1, 7);
    v3 = (void *)_user_storage_readonly;
    _user_storage_readonly = v2;

    v4 = [GEOConfigStorageDirectReadOnly alloc];
    +[GEOFilePaths urlFor:](GEOFilePaths, "urlFor:", 33);
    v10 = (id)objc_claimAutoreleasedReturnValue();
    v5 = -[GEOConfigStorageDirectReadOnly initWithPath:forSource:](v4, "initWithPath:forSource:", v10, 6);
    v6 = (void *)_system_storage_readonly;
    _system_storage_readonly = v5;

    return;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    v7 = MEMORY[0x1E0C81028];
    v8 = "Assertion failed: _user_storage_readwrite == ((void *)0)";
    v9 = buf;
    goto LABEL_9;
  }
}

uint64_t GEOErrorToCounterInfoResult(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 v7;
  void *v8;
  int v9;
  uint64_t v10;
  char v11;

  v1 = a1;
  v2 = v1;
  if (!v1)
  {
LABEL_6:
    v7 = 0;
    goto LABEL_20;
  }
  objc_msgSend(v1, "domain");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  GEOErrorDomain();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "isEqualToString:", v4);

  if (v5)
  {
    v6 = objc_msgSend(v2, "code");
    if (v6 > -4)
    {
      if (v6 == -3)
      {
        v7 = 3;
        goto LABEL_20;
      }
      if (v6 == -2)
      {
        v7 = 4;
        goto LABEL_20;
      }
    }
    else
    {
      if (v6 == -19)
      {
        v7 = 2;
        goto LABEL_20;
      }
      if (v6 == -8)
        goto LABEL_6;
    }
    v7 = 1;
    goto LABEL_20;
  }
  objc_msgSend(v2, "domain");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "isEqualToString:", *MEMORY[0x1E0CB32E8]);

  v7 = 1;
  if (v9)
  {
    v10 = objc_msgSend(v2, "code");
    if (v10 == -1001)
      v11 = 2;
    else
      v11 = 1;
    if (v10 == -999)
      v7 = 4;
    else
      v7 = v11;
  }
LABEL_20:

  return v7;
}

const __CFString *GEOErrorDomain()
{
  return CFSTR("GEOErrorDomain");
}

uint64_t GEOConfigGetUInteger(int a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;

  _getValue(a1, a2, 1, 0, 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "unsignedIntegerValue");

  return v3;
}

void ___scheduleResync_block_invoke()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  os_unfair_lock_lock_with_options();
  objc_msgSend((id)qword_1ECDBBAC8, "allKeys");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "firstObject");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  while (v1)
  {
    objc_msgSend((id)qword_1ECDBBAC8, "objectForKeyedSubscript:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "allObjects");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend((id)qword_1ECDBBAC8, "setObject:forKeyedSubscript:", 0, v1);
    os_unfair_lock_unlock(&stru_1ECDBBA64);
    v4 = objc_msgSend(v1, "unsignedIntegerValue");
    v5 = v3;
    v6 = objc_msgSend(v5, "count");
    if (v4 && v6)
    {
      _GEOConfigProxy();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = v7;
      if ((v4 & 0x10000000) != 0)
      {
        objc_msgSend(v7, "configExpiryForOptions:", v4);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "resync");

        _GEOConfigPostKeyExpirysChangedNotificationOptions(v5, v4);
      }
      else
      {
        objc_msgSend(v7, "configStoreForOptions:", v4);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v9, "resync");

        _GEOConfigPostKeysChangedNotification(v5, v4);
        if ((v4 & 0x1000) != 0)
        {
          objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "postNotificationName:object:userInfo:", CFSTR("com.apple.GeoServices.ConfigNeedsWatchSyncNotification"), 0, 0);

        }
      }
    }

    os_unfair_lock_lock_with_options();
    objc_msgSend((id)qword_1ECDBBAC8, "allKeys");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "firstObject");
    v1 = (void *)objc_claimAutoreleasedReturnValue();

  }
  os_unfair_lock_unlock(&stru_1ECDBBA64);
}

void sub_1885F493C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void _initStorageReadOnly()
{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;

  v1 = _user_storage_readonly;
  if (_user_storage_readonly)
  {
    if (_system_storage_readonly)
      goto LABEL_11;
  }
  else
  {
    +[GEOFilePaths urlFor:](GEOFilePaths, "urlFor:", 34);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v2)
      return;
    v0 = v2;
    if (_system_storage_readonly)
    {

      goto LABEL_11;
    }
  }
  +[GEOFilePaths urlFor:](GEOFilePaths, "urlFor:", 33);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v1)
  {
    if (!v3)
      return;
  }
  else
  {

    if (!v3)
      return;
  }
LABEL_11:
  if (_initStorageReadOnly_onceToken != -1)
    dispatch_once(&_initStorageReadOnly_onceToken, &__block_literal_global_88_0);
}

void sub_1885F6028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;

  _Unwind_Resume(a1);
}

uint64_t ___ZZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_ENK3__5clERKN8LoadItem9RequesterE_block_invoke(uint64_t a1)
{
  __int128 v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a1 + 64);
  return (*(uint64_t (**)(_QWORD, __int128 *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), &v2, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56), 0, *(_QWORD *)(a1 + 40));
}

void sub_1885F6284(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t GEOConfigGetBOOL(int a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;

  _getValue(a1, a2, 1, 0, 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "BOOLValue");

  return v3;
}

void sub_1885F64BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  void *v29;

  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

void ___geoDefaultsToDict_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    _geoDefaultsToDict(v5);
    v6 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      _geoDefaultsToArray(v5);
    else
      objc_msgSend(v5, "value");
    v6 = objc_claimAutoreleasedReturnValue();
  }
  v7 = (void *)v6;
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, v8);

}

void GEOConfigGetPropertiesForKey(int a1, uint64_t a2, void *a3)
{
  void (**v5)(id, uint64_t, uint64_t, uint64_t, id);
  _QWORD *MetadataStruct;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  id v11;
  uint8_t buf[16];

  v5 = a3;
  MetadataStruct = (_QWORD *)_getMetadataStruct(a1, a2);
  if (MetadataStruct)
  {
    v7 = MetadataStruct[1];
    v8 = MetadataStruct[2];
    v9 = MetadataStruct[3];
    (*(void (**)(void))(MetadataStruct[4] + 16))();
    v11 = (id)objc_claimAutoreleasedReturnValue();
    v5[2](v5, v7, v8, v9, v11);

  }
  else
  {
    j__GEOGetUserDefaultsLog();
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1885A9000, v10, OS_LOG_TYPE_ERROR, "tried to get properties for invalid config key", buf, 2u);
    }

    v5[2](v5, (uint64_t)CFSTR("__invalid__"), 0, 0, &__block_literal_global_105);
  }
}

id GEOResourceDevResourcesPath()
{
  return +[GEOFilePaths pathFor:](GEOFilePaths, "pathFor:", 12);
}

uint64_t GEOResourceFilterScaleForScale(double a1)
{
  unsigned int v1;

  if (a1 <= 1.0)
    v1 = 1;
  else
    v1 = 2;
  if (a1 <= 2.0)
    return v1;
  else
    return 3;
}

void sub_1885F70AC(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

void sub_1885F7144(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

void gloria::GloriaDB::~GloriaDB(gloria::GloriaDB *this)
{
  uint64_t v2;
  std::string v3;
  char v4;

  *(_QWORD *)this = &off_1E1BF72F0;
  gloria::ShardPool::Close((gloria::GloriaDB *)((char *)this + 136), &v3);
  if (v4 < 0)
    operator delete((void *)v3.__r_.__value_.__l.__size_);
  v2 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  std::unique_ptr<gloria::Bucketizer>::reset[abi:ne180100]((uint64_t **)this + 23, 0);
  std::__tree<std::__value_type<int,gloria::ShardInfo>,std::__map_value_compare<int,std::__value_type<int,gloria::ShardInfo>,std::less<int>,true>,std::allocator<std::__value_type<int,gloria::ShardInfo>>>::destroy((uint64_t)this + 160, *((_QWORD **)this + 21));
  std::__tree<std::__value_type<int,gloria::Shard>,std::__map_value_compare<int,std::__value_type<int,gloria::Shard>,std::less<int>,true>,std::allocator<std::__value_type<int,gloria::Shard>>>::destroy(*((void ***)this + 18));
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  gloria::GloriaDB::~GloriaDB(this);
  JUMPOUT(0x18D76437CLL);
}

void std::__tree<std::__value_type<int,gloria::Shard>,std::__map_value_compare<int,std::__value_type<int,gloria::Shard>,std::less<int>,true>,std::allocator<std::__value_type<int,gloria::Shard>>>::destroy(void **a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,gloria::Shard>,std::__map_value_compare<int,std::__value_type<int,gloria::Shard>,std::less<int>,true>,std::allocator<std::__value_type<int,gloria::Shard>>>::destroy(*a1);
    std::__tree<std::__value_type<int,gloria::Shard>,std::__map_value_compare<int,std::__value_type<int,gloria::Shard>,std::less<int>,true>,std::allocator<std::__value_type<int,gloria::Shard>>>::destroy(a1[1]);
    gloria::Shard::~Shard(a1 + 5);
    operator delete(a1);
  }
}

void sub_1885F7960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  void *v20;
  void *v21;
  uint64_t v22;

  if (a19 < 0)
    operator delete(__p);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v22 + 32);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)&a20);

  _Unwind_Resume(a1);
}

uint64_t gloria::DbReaderDisk::DbReaderDisk(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  const char *v5;
  __int128 v7;
  std::string::size_type v8;
  char __s[1024];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E1BF7090;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = (const char *)a2;
  if (*(char *)(a2 + 23) < 0)
    v5 = *(const char **)a2;
  if (realpath_DARWIN_EXTSN(v5, __s))
  {
    std::string::basic_string[abi:ne180100]<0>(&v7, __s);
    if (*(char *)(a1 + 31) < 0)
      operator delete(v4->__r_.__value_.__l.__data_);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
    v4->__r_.__value_.__r.__words[2] = v8;
  }
  else
  {
    std::string::operator=(v4, (const std::string *)a2);
  }
  return a1;
}

void sub_1885F7AA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void gloria::DB::Open(uint64_t *a1@<X0>, std::string *a2@<X1>, uint64_t ***a3@<X8>)
{
  uint64_t **v6;
  uint64_t v7;
  void *__p;
  char v9;

  v6 = (uint64_t **)operator new();
  gloria::GloriaDB::GloriaDB((uint64_t)v6, a1);
  *a3 = 0;
  gloria::GloriaDB::Initialize(v6, (gloria::Status *)&v7);
  gloria::Status::operator=(a2, (uint64_t)&v7);
  if (v9 < 0)
    operator delete(__p);
  if (LODWORD(a2->__r_.__value_.__l.__data_))
    ((void (*)(uint64_t **))(*v6)[1])(v6);
  else
    *a3 = v6;
}

void sub_1885F7B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  _QWORD *v16;

  if (a15 < 0)
    operator delete(__p);
  *v16 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  _Unwind_Resume(a1);
}

uint64_t gloria::GloriaDB::GloriaDB(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;

  v3 = *a2;
  v2 = a2[1];
  *(_QWORD *)result = &off_1E1BF72F0;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_OWORD *)(result + 24) = *((_OWORD *)a2 + 1);
  v6 = a2[5];
  *(_QWORD *)(result + 40) = a2[4];
  *(_QWORD *)(result + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *((_BYTE *)a2 + 56);
  *(_QWORD *)(result + 56) = a2[6];
  *(_BYTE *)(result + 64) = v9;
  v10 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 72) = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 80) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_OWORD *)(result + 88) = *(_OWORD *)(result + 24);
  v13 = *(_QWORD *)(result + 48);
  *(_QWORD *)(result + 104) = *(_QWORD *)(result + 40);
  *(_QWORD *)(result + 112) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_QWORD *)(result + 120) = *(_QWORD *)(result + 56);
  *(_BYTE *)(result + 128) = *(_BYTE *)(result + 64);
  *(_QWORD *)(result + 144) = 0;
  *(_QWORD *)(result + 136) = result + 144;
  *(_QWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = result + 168;
  *(_QWORD *)(result + 184) = 0;
  *(_QWORD *)(result + 192) = 0;
  *(_QWORD *)(result + 176) = 0;
  return result;
}

void gloria::GloriaDB::Initialize(uint64_t **this@<X0>, gloria::Status *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  void *__p;
  void *v10;
  uint64_t v11;

  gloria::ShardManager::Prepare((gloria::ShardManager *)(this + 9), this + 17, a2);
  if (!*(_DWORD *)a2)
  {
    __p = 0;
    v10 = 0;
    v11 = 0;
    gloria::ShardPool::AllShards(this + 17, (char **)&__p);
    v4 = *(_QWORD *)(*(_QWORD *)__p + 128);
    v8 = *(_DWORD *)(v4 + 16);
    gloria::RecordDecompressor::decompressor((_DWORD *)(v4 + 8), &v7);
    v5 = this[24];
    this[24] = v7;
    if (v5)
      (*(void (**)(uint64_t *))(*v5 + 16))(v5);
    v6 = (uint64_t *)operator new();
    gloria::Bucketizer::Bucketizer(v6, (uint64_t)&v8);
    std::unique_ptr<gloria::Bucketizer>::reset[abi:ne180100](this + 23, v6);
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
  }
}

void sub_1885F7D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;

  MEMORY[0x18D76437C](v14, 0x20C4093837F09);
  if (__p)
    operator delete(__p);
  if (*(char *)(v13 + 31) < 0)
    operator delete(*(void **)(v13 + 8));
  _Unwind_Resume(a1);
}

void gloria::ShardManager::Prepare(gloria::ShardManager *this@<X0>, uint64_t **a2@<X1>, gloria::Status *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  char v10;
  char v11;
  std::string::size_type v12;
  __darwin_ino64_t size;
  _QWORD *v14;
  stat *v15;
  __darwin_ino64_t st_ino;
  _QWORD *v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  std::string *v26;
  __int128 v27;
  const std::string::value_type *locale;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string::size_type v34;
  std::string *v35;
  std::locale::__imp *v36;
  std::string::size_type v37;
  __darwin_ino64_t p_size;
  std::string::size_type v39;
  dev_t v40;
  char *v41;
  char **v42;
  char *v43;
  char **v44;
  dev_t v45;
  char **v46;
  _DWORD *v47;
  int v48;
  std::string *v49;
  std::string *v50;
  BOOL v51;
  char *v52;
  char **v53;
  char *v54;
  char **v55;
  dev_t v56;
  char **v57;
  char *v58;
  const std::string *v59;
  const std::string *v60;
  const std::string *v61;
  std::string *v62;
  const std::string::value_type **v63;
  _QWORD *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t **v68;
  uint64_t **v69;
  dev_t v70;
  uint64_t *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::string *v78;
  __int128 v79;
  __darwin_ino64_t st_gid_high;
  stat *p_p;
  uint64_t v82;
  std::string::size_type v83;
  std::__shared_weak_count *v84;
  char v85[8];
  std::string v86;
  char v87;
  uint64_t **v88;
  uint64_t *v89;
  uint64_t v90;
  std::string v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  stat __p;
  std::locale v103;
  std::string::size_type v104;
  std::__shared_weak_count *v105;
  std::string v106;
  std::string v107;
  std::string v108;
  std::string v109;
  std::string v110;
  std::string v111;
  std::string v112;
  char v113;
  char **v114;
  char *v115;
  uint64_t v116;
  char **v117;
  char *v118[2];
  std::string v119;
  std::string v120;

  v82 = *(_QWORD *)((char *)this + 20);
  v6 = *(_QWORD *)this;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v83 = *(_QWORD *)this;
  v84 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v85[0] = 0;
  v9 = *((unsigned __int8 *)this + 56);
  v85[1] = *((_BYTE *)this + 56);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_5);
  v10 = (*(uint64_t (**)(uint64_t, stat *))(*(_QWORD *)v6 + 24))(v6, &__p);
  v11 = v10;
  if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
  {
    if ((v10 & 1) != 0)
      goto LABEL_6;
LABEL_15:
    LOBYTE(__p.st_dev) = 1;
    *(_DWORD *)&__p.st_mode = 0;
    __p.st_ino = (__darwin_ino64_t)"the path provided does not exist";
    *(_QWORD *)&__p.st_uid = 32;
    gloria::Status::Status((uint64_t)a3, 1, (uint64_t)&__p);
    goto LABEL_28;
  }
  operator delete(*(void **)&__p.st_dev);
  if ((v11 & 1) == 0)
    goto LABEL_15;
LABEL_6:
  v99 = 0;
  v100 = 0;
  v101 = 0;
  v96 = 0;
  v97 = 0;
  v98 = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  LODWORD(v91.__r_.__value_.__l.__data_) = 10;
  v92 = 0;
  *(_OWORD *)&v91.__r_.__value_.__r.__words[1] = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(&v103, "db");
  (*(void (**)(stat *__return_ptr, uint64_t, std::locale *, uint64_t *))(*(_QWORD *)v6 + 32))(&__p, v6, &v103, &v99);
  gloria::Status::operator=(&v91, (uint64_t)&__p);
  if (*((char *)&__p.st_rdev + 7) < 0)
    operator delete((void *)__p.st_ino);
  if (SHIBYTE(v105) < 0)
    operator delete(v103.__locale_);
  if (!LODWORD(v91.__r_.__value_.__l.__data_))
  {
    std::string::basic_string[abi:ne180100]<0>(&v103, "index");
    (*(void (**)(stat *__return_ptr, uint64_t, std::locale *, uint64_t *))(*(_QWORD *)v6 + 32))(&__p, v6, &v103, &v96);
    gloria::Status::operator=(&v91, (uint64_t)&__p);
    if (*((char *)&__p.st_rdev + 7) < 0)
      operator delete((void *)__p.st_ino);
    if (SHIBYTE(v105) < 0)
      operator delete(v103.__locale_);
    if (LODWORD(v91.__r_.__value_.__l.__data_))
    {
      LOBYTE(__p.st_dev) = 1;
      *(_DWORD *)&__p.st_mode = 0;
      v12 = HIBYTE(v92);
      size = v91.__r_.__value_.__l.__size_;
      if (v92 < 0)
        v12 = v91.__r_.__value_.__r.__words[2];
      else
        size = (__darwin_ino64_t)&v91.__r_.__value_.__l.__size_;
      goto LABEL_24;
    }
    if (v99 == v100 || (v23 = v96, v24 = v97, v96 == v97))
    {
      std::string::basic_string[abi:ne180100]<0>(&v103, "db");
      (*(void (**)(stat *__return_ptr, uint64_t, std::locale *))(*(_QWORD *)v6 + 16))(&__p, v6, &v103);
      if (SHIBYTE(v105) < 0)
        operator delete(v103.__locale_);
      std::string::basic_string[abi:ne180100]<0>(&v112, "index");
      (*(void (**)(std::locale *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v6 + 16))(&v103, v6, &v112);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__r_.__value_.__l.__data_);
      std::operator+<char>();
      v26 = std::string::append(&v119, " ,index: ");
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v120.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v105) >= 0)
        locale = (const std::string::value_type *)&v103;
      else
        locale = (const std::string::value_type *)v103.__locale_;
      if (SHIBYTE(v105) >= 0)
        v29 = HIBYTE(v105);
      else
        v29 = v104;
      v30 = std::string::append(&v120, locale, v29);
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v86.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      v32 = std::string::append(&v86, " appears to be empty");
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v120.__r_.__value_.__l.__data_);
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v119.__r_.__value_.__l.__data_);
      v86.__r_.__value_.__s.__data_[0] = 1;
      HIDWORD(v86.__r_.__value_.__r.__words[0]) = 0;
      v34 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
      v35 = &v112;
      if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        v34 = v112.__r_.__value_.__l.__size_;
        v35 = (std::string *)v112.__r_.__value_.__r.__words[0];
      }
      v86.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
      v86.__r_.__value_.__r.__words[2] = v34;
      gloria::Status::Status((uint64_t)a3, 6, (uint64_t)&v86);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__r_.__value_.__l.__data_);
      if (SHIBYTE(v105) < 0)
        operator delete(v103.__locale_);
      if ((SHIBYTE(__p.st_gid) & 0x80000000) == 0)
        goto LABEL_25;
      v36 = *(std::locale::__imp **)&__p.st_dev;
    }
    else
    {
      if (!v9)
      {
LABEL_54:
        v89 = 0;
        v90 = 0;
        v88 = &v89;
        *(_OWORD *)&v119.__r_.__value_.__r.__words[1] = 0uLL;
        v118[1] = 0;
        v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&v119.__r_.__value_.__l.__size_;
        v117 = v118;
        v118[0] = 0;
        v115 = 0;
        v116 = 0;
        v114 = &v115;
        gloria::ShardLoader::ListAllFiles((uint64_t)&v112, v23, v24, (uint64_t **)&v119);
        if (LODWORD(v112.__r_.__value_.__l.__data_))
          goto LABEL_58;
        gloria::ShardLoader::ListAllFiles((uint64_t)&__p, v99, v100, (uint64_t **)&v117);
        gloria::Status::operator=(&v112, (uint64_t)&__p);
        if (*((char *)&__p.st_rdev + 7) < 0)
          operator delete((void *)__p.st_ino);
        if (LODWORD(v112.__r_.__value_.__l.__data_))
          goto LABEL_58;
        if (v97 - v96 != v100 - v99)
        {
          LOBYTE(__p.st_dev) = 1;
          *(_DWORD *)&__p.st_mode = 0;
          __p.st_ino = (__darwin_ino64_t)"index_path.size() != db_path.size()";
          *(_QWORD *)&__p.st_uid = 35;
          gloria::Status::Status((uint64_t)&v86, 6, (uint64_t)&__p);
          goto LABEL_59;
        }
        if (v9 && v93 != v94)
        {
          gloria::ShardLoader::ListAllFiles((uint64_t)&__p, v93, v94, (uint64_t **)&v114);
          gloria::Status::operator=(&v112, (uint64_t)&__p);
          if (*((char *)&__p.st_rdev + 7) < 0)
            operator delete((void *)__p.st_ino);
          if (LODWORD(v112.__r_.__value_.__l.__data_))
          {
LABEL_58:
            gloria::Status::Status((uint64_t)&v86, (uint64_t)&v112);
LABEL_59:
            if (v113 < 0)
              operator delete((void *)v112.__r_.__value_.__l.__size_);
            std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy((uint64_t)&v114, v115);
            std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy((uint64_t)&v117, v118[0]);
            std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy((uint64_t)&v119, (char *)v119.__r_.__value_.__l.__size_);
            if (LODWORD(v86.__r_.__value_.__l.__data_))
              gloria::Status::Status((uint64_t)a3, (uint64_t)&v86);
            else
              gloria::ShardPool::Initialize((uint64_t)a3, a2, (uint64_t **)&v88, &v82, (int *)&v82 + 1, v85);
            if (v87 < 0)
              operator delete((void *)v86.__r_.__value_.__l.__size_);
            std::__tree<std::__value_type<int,gloria::ShardInfo>,std::__map_value_compare<int,std::__value_type<int,gloria::ShardInfo>,std::less<int>,true>,std::allocator<std::__value_type<int,gloria::ShardInfo>>>::destroy((uint64_t)&v88, v89);
            goto LABEL_25;
          }
          if (v94 - v93 != v100 - v99)
          {
            LOBYTE(__p.st_dev) = 1;
            *(_DWORD *)&__p.st_mode = 0;
            __p.st_ino = (__darwin_ino64_t)"bloom_path.size() != db_path.size()";
            *(_QWORD *)&__p.st_uid = 35;
            gloria::Status::Status((uint64_t)&v86, 6, (uint64_t)&__p);
            goto LABEL_59;
          }
        }
        v39 = v119.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)v119.__r_.__value_.__l.__data_ == &v119.__r_.__value_.__r.__words[1])
        {
LABEL_217:
          LOBYTE(__p.st_dev) = 1;
          *(_DWORD *)&__p.st_mode = 0;
          __p.st_ino = (__darwin_ino64_t)&str_5;
          *(_QWORD *)&__p.st_uid = 0;
          gloria::Status::Status((uint64_t)&v86, 0, (uint64_t)&__p);
          goto LABEL_59;
        }
        while (1)
        {
          v40 = *(_DWORD *)(v39 + 32);
          if (*(char *)(v39 + 63) < 0)
            std::string::__init_copy_ctor_external(&v111, *(const std::string::value_type **)(v39 + 40), *(_QWORD *)(v39 + 48));
          else
            v111 = *(std::string *)(v39 + 40);
          v41 = v118[0];
          if (!v118[0])
            goto LABEL_122;
          v42 = v118;
          do
          {
            v43 = v41;
            v44 = v42;
            v45 = *((_DWORD *)v41 + 8);
            v46 = (char **)(v41 + 8);
            if (v45 >= v40)
            {
              v46 = (char **)v43;
              v42 = (char **)v43;
            }
            v41 = *v46;
          }
          while (v41);
          if (v42 == v118 || (v45 >= v40 ? (v47 = v43) : (v47 = v44), v40 < v47[8]))
          {
LABEL_122:
            LOBYTE(__p.st_dev) = 1;
            *(_DWORD *)&__p.st_mode = 0;
            __p.st_ino = (__darwin_ino64_t)"imbalanced shard_ pair: an index or a db file is missing or misnamed";
            *(_QWORD *)&__p.st_uid = 68;
            gloria::Status::Status((uint64_t)&v86, 6, (uint64_t)&__p);
            v48 = 1;
            goto LABEL_123;
          }
          std::string::basic_string[abi:ne180100]<0>(&v110, (char *)&str_5);
          if (!v116)
            goto LABEL_149;
          v52 = v115;
          if (v115)
          {
            v53 = &v115;
            do
            {
              v54 = v52;
              v55 = v53;
              v56 = *((_DWORD *)v52 + 8);
              v57 = (char **)(v52 + 8);
              if (v56 >= v40)
              {
                v57 = (char **)v54;
                v53 = (char **)v54;
              }
              v52 = *v57;
            }
            while (v52);
            if (v53 != &v115)
            {
              v58 = v56 >= v40 ? v54 : (char *)v55;
              if (v40 >= *((_DWORD *)v58 + 8))
                break;
            }
          }
          LOBYTE(__p.st_dev) = 1;
          *(_DWORD *)&__p.st_mode = 0;
          __p.st_ino = (__darwin_ino64_t)"imbalanced shard_ pair: a Bloom filter file is missing or misnamed";
          *(_QWORD *)&__p.st_uid = 66;
          gloria::Status::Status((uint64_t)&v86, 6, (uint64_t)&__p);
          v48 = 1;
LABEL_207:
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v110.__r_.__value_.__l.__data_);
LABEL_123:
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v111.__r_.__value_.__l.__data_);
          if (v48)
            goto LABEL_59;
          v49 = *(std::string **)(v39 + 8);
          if (v49)
          {
            do
            {
              v50 = v49;
              v49 = (std::string *)v49->__r_.__value_.__r.__words[0];
            }
            while (v49);
          }
          else
          {
            do
            {
              v50 = *(std::string **)(v39 + 16);
              v51 = v50->__r_.__value_.__r.__words[0] == v39;
              v39 = (std::string::size_type)v50;
            }
            while (!v51);
          }
          v39 = (std::string::size_type)v50;
          if (v50 == (std::string *)&v119.__r_.__value_.__r.__words[1])
            goto LABEL_217;
        }
        v59 = (const std::string *)(v55 + 5);
        v60 = (const std::string *)(v54 + 40);
        if (v56 >= v40)
          v61 = v60;
        else
          v61 = v59;
        std::string::operator=(&v110, v61);
LABEL_149:
        v62 = (std::string *)(v44 + 5);
        if (v45 >= v40)
          v63 = (const std::string::value_type **)v43;
        else
          v63 = (const std::string::value_type **)v44;
        if (v45 >= v40)
          v62 = (std::string *)(v43 + 40);
        if (*((char *)v42 + 63) < 0)
        {
          if (v45 >= v40)
            v64 = v43;
          else
            v64 = v44;
          std::string::__init_copy_ctor_external(&v109, v63[5], v64[6]);
        }
        else
        {
          v109 = *v62;
        }
        LODWORD(v103.__locale_) = v40;
        v104 = v83;
        v105 = v84;
        if (v84)
        {
          v65 = (unint64_t *)&v84->__shared_owners_;
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
        }
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v106, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
        else
          v106 = v111;
        if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v107, v109.__r_.__value_.__l.__data_, v109.__r_.__value_.__l.__size_);
        else
          v107 = v109;
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v108, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
        else
          v108 = v110;
        __p.st_dev = v40;
        gloria::ShardInfo::ShardInfo((uint64_t)&__p.st_ino, (uint64_t)&v103);
        v67 = v89;
        v68 = &v89;
        v69 = &v89;
        if (v89)
        {
          while (1)
          {
            while (1)
            {
              v68 = (uint64_t **)v67;
              v70 = *((_DWORD *)v67 + 8);
              if (v70 <= __p.st_dev)
                break;
              v67 = *v68;
              v69 = v68;
              if (!*v68)
                goto LABEL_179;
            }
            if (v70 >= __p.st_dev)
              break;
            v67 = v68[1];
            if (!v67)
            {
              v69 = v68 + 1;
              goto LABEL_179;
            }
          }
        }
        else
        {
LABEL_179:
          std::__tree<std::__value_type<int,gloria::ShardInfo>,std::__map_value_compare<int,std::__value_type<int,gloria::ShardInfo>,std::less<int>,true>,std::allocator<std::__value_type<int,gloria::ShardInfo>>>::__construct_node<std::pair<int const,gloria::ShardInfo> const&>((uint64_t)&v120, (uint64_t)&v88, &__p);
          v71 = (uint64_t *)v120.__r_.__value_.__r.__words[0];
          *(_QWORD *)v120.__r_.__value_.__l.__data_ = 0;
          v71[1] = 0;
          v71[2] = (uint64_t)v68;
          *v69 = v71;
          if (*v88)
          {
            v88 = (uint64_t **)*v88;
            v71 = *v69;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v89, v71);
          ++v90;
          v120.__r_.__value_.__r.__words[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<int,gloria::ShardInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,gloria::ShardInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)&v120);
        }
        if (SHIBYTE(__p.st_size) < 0)
          operator delete((void *)__p.st_birthtimespec.tv_sec);
        if (SHIBYTE(__p.st_ctimespec.tv_nsec) < 0)
          operator delete((void *)__p.st_mtimespec.tv_nsec);
        if (SHIBYTE(__p.st_mtimespec.tv_sec) < 0)
          operator delete((void *)__p.st_atimespec.tv_sec);
        v72 = *(std::__shared_weak_count **)&__p.st_rdev;
        if (*(_QWORD *)&__p.st_rdev)
        {
          v73 = (unint64_t *)(*(_QWORD *)&__p.st_rdev + 8);
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v108.__r_.__value_.__l.__data_);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v106.__r_.__value_.__l.__data_);
        v75 = v105;
        if (v105)
        {
          v76 = (unint64_t *)&v105->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v109.__r_.__value_.__l.__data_);
        v48 = 0;
        goto LABEL_207;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "bloom");
      (*(void (**)(std::locale *__return_ptr, uint64_t, stat *))(*(_QWORD *)v6 + 16))(&v103, v6, &__p);
      if (SHIBYTE(__p.st_gid) < 0)
        operator delete(*(void **)&__p.st_dev);
      if (SHIBYTE(v105) >= 0)
        v25 = (const char *)&v103;
      else
        v25 = (const char *)v103.__locale_;
      if (stat(v25, &__p))
      {
LABEL_51:
        if (SHIBYTE(v105) < 0)
          operator delete(v103.__locale_);
        v23 = v96;
        v24 = v97;
        goto LABEL_54;
      }
      (*(void (**)(stat *__return_ptr, uint64_t, std::locale *, uint64_t *))(*(_QWORD *)v6 + 32))(&__p, v6, &v103, &v93);
      gloria::Status::operator=(&v91, (uint64_t)&__p);
      if (*((char *)&__p.st_rdev + 7) < 0)
        operator delete((void *)__p.st_ino);
      if (LODWORD(v91.__r_.__value_.__l.__data_))
      {
        LOBYTE(__p.st_dev) = 1;
        *(_DWORD *)&__p.st_mode = 0;
        v37 = HIBYTE(v92);
        p_size = v91.__r_.__value_.__l.__size_;
        if (v92 < 0)
          v37 = v91.__r_.__value_.__r.__words[2];
        else
          p_size = (__darwin_ino64_t)&v91.__r_.__value_.__l.__size_;
        __p.st_ino = p_size;
        *(_QWORD *)&__p.st_uid = v37;
        gloria::Status::Status((uint64_t)a3, 6, (uint64_t)&__p);
      }
      else
      {
        if (v93 != v94)
          goto LABEL_51;
        std::operator+<char>();
        v78 = std::string::append(&v112, " appears to be empty");
        v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p.st_uid = *((_QWORD *)&v78->__r_.__value_.__l + 2);
        *(_OWORD *)&__p.st_dev = v79;
        v78->__r_.__value_.__l.__size_ = 0;
        v78->__r_.__value_.__r.__words[2] = 0;
        v78->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v112.__r_.__value_.__l.__data_);
        v112.__r_.__value_.__s.__data_[0] = 1;
        HIDWORD(v112.__r_.__value_.__r.__words[0]) = 0;
        st_gid_high = HIBYTE(__p.st_gid);
        p_p = &__p;
        if ((__p.st_gid & 0x80000000) != 0)
        {
          p_p = *(stat **)&__p.st_dev;
          st_gid_high = __p.st_ino;
        }
        v112.__r_.__value_.__l.__size_ = (std::string::size_type)p_p;
        v112.__r_.__value_.__r.__words[2] = st_gid_high;
        gloria::Status::Status((uint64_t)a3, 6, (uint64_t)&v112);
        if (SHIBYTE(__p.st_gid) < 0)
          operator delete(*(void **)&__p.st_dev);
      }
      if ((SHIBYTE(v105) & 0x80000000) == 0)
        goto LABEL_25;
      v36 = v103.__locale_;
    }
    operator delete(v36);
    goto LABEL_25;
  }
  LOBYTE(__p.st_dev) = 1;
  *(_DWORD *)&__p.st_mode = 0;
  v12 = HIBYTE(v92);
  size = v91.__r_.__value_.__l.__size_;
  if (v92 < 0)
    v12 = v91.__r_.__value_.__r.__words[2];
  else
    size = (__darwin_ino64_t)&v91.__r_.__value_.__l.__size_;
LABEL_24:
  __p.st_ino = size;
  *(_QWORD *)&__p.st_uid = v12;
  gloria::Status::Status((uint64_t)a3, 6, (uint64_t)&__p);
LABEL_25:
  if (SHIBYTE(v92) < 0)
    operator delete((void *)v91.__r_.__value_.__l.__size_);
  *(_QWORD *)&__p.st_dev = &v93;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(_QWORD *)&__p.st_dev = &v96;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  *(_QWORD *)&__p.st_dev = &v99;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_28:
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"ShardManager::Prepare: status=", 30);
  gloria::Status::ToString(a3, (std::string *)&__p);
  if ((__p.st_gid & 0x80000000) == 0)
    v15 = &__p;
  else
    v15 = *(stat **)&__p.st_dev;
  if ((__p.st_gid & 0x80000000) == 0)
    st_ino = HIBYTE(__p.st_gid);
  else
    st_ino = __p.st_ino;
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, st_ino);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"; dummy-hash=", 13);
  v18 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
  v19 = std::locale::use_facet(&v103, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale(&v103);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v20 = v84;
  if (v84)
  {
    v21 = (unint64_t *)&v84->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1885F8B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::locale a64;
  uint64_t v64;
  uint64_t v65;

  if (*(char *)(v65 - 193) < 0)
    operator delete(*(void **)(v65 - 216));
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(v65 - 184, *(char **)(v65 - 176));
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(v65 - 160, *(char **)(v65 - 152));
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(v65 - 136, *(char **)(v65 - 128));
  std::__tree<std::__value_type<int,gloria::ShardInfo>,std::__map_value_compare<int,std::__value_type<int,gloria::ShardInfo>,std::less<int>,true>,std::allocator<std::__value_type<int,gloria::ShardInfo>>>::destroy((uint64_t)&a27, (_QWORD *)a28);
  if (a36 < 0)
    operator delete(__p);
  a64.__locale_ = (std::locale::__imp *)&a37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a64);
  a64.__locale_ = (std::locale::__imp *)&a40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a64);
  a64.__locale_ = (std::locale::__imp *)&a43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a64);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v64 + 8);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<int,gloria::ShardInfo>,std::__map_value_compare<int,std::__value_type<int,gloria::ShardInfo>,std::less<int>,true>,std::allocator<std::__value_type<int,gloria::ShardInfo>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,gloria::ShardInfo>,std::__map_value_compare<int,std::__value_type<int,gloria::ShardInfo>,std::less<int>,true>,std::allocator<std::__value_type<int,gloria::ShardInfo>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,gloria::ShardInfo>,std::__map_value_compare<int,std::__value_type<int,gloria::ShardInfo>,std::less<int>,true>,std::allocator<std::__value_type<int,gloria::ShardInfo>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<int const,gloria::ShardInfo>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__tree<std::__value_type<int,gloria::ShardInfo>,std::__map_value_compare<int,std::__value_type<int,gloria::ShardInfo>,std::less<int>,true>,std::allocator<std::__value_type<int,gloria::ShardInfo>>>::__construct_node<std::pair<int const,gloria::ShardInfo> const&>(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t result;

  v5 = a2 + 8;
  v6 = operator new(0x88uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  v6[8] = *a3;
  result = gloria::ShardInfo::ShardInfo((uint64_t)(v6 + 10), (uint64_t)(a3 + 2));
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_1885F8F9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<int,gloria::ShardInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,gloria::ShardInfo>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void gloria::DbReaderDisk::listFiles(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string __p;

  gloria::FileUtils::AbsolutePath(&__p, (const void **)(a1 + 8), a2);
  gloria::FileUtils::ListFiles((const char *)&__p, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1885F9008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t gloria::FileUtils::ListFiles@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v4;
  DIR *v6;
  DIR *v7;
  dirent *v8;
  dirent *v9;
  int v10;
  char v11;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  std::__split_buffer<std::string>::pointer begin;
  _BYTE *p_str;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type size;
  _BYTE *first;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  std::string *v29;
  std::string *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  std::string **v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  std::string *v39;
  std::string *v40;
  std::string *v41;
  std::string v42;
  void *v43[2];
  uint64_t v44;
  void *__p[2];
  std::string::size_type v46;
  std::__split_buffer<std::string> __str;
  uint64_t v48;
  __int128 v49;

  v4 = a1;
  *(_QWORD *)&v49 = *MEMORY[0x1E0C80C00];
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v6 = opendir(a1);
  if (v6)
  {
    v7 = v6;
    v8 = readdir(v6);
    if (!v8)
      goto LABEL_76;
    v9 = v8;
    while (1)
    {
      if (v9->d_type == 4)
        goto LABEL_72;
      std::string::basic_string[abi:ne180100]<0>(v43, v9->d_name);
      if (v4[23] < 0)
        std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
      else
        v42 = *(std::string *)v4;
      if (SHIBYTE(v44) < 0)
        v10 = *(unsigned __int8 *)v43[0];
      else
        v10 = LOBYTE(v43[0]);
      if (v10 == 46 || v10 == 95)
      {
        v9 = readdir(v7);
        v11 = 0;
        goto LABEL_68;
      }
      if (v4[23] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__str, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
        if ((v44 & 0x8000000000000000) == 0)
        {
LABEL_18:
          __str.__end_cap_ = *(std::__compressed_pair<std::string *> *)v43;
          v48 = v44;
          goto LABEL_21;
        }
      }
      else
      {
        *(_OWORD *)&__str.__first_ = *(_OWORD *)v4;
        __str.__end_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v4 + 2);
        if ((v44 & 0x8000000000000000) == 0)
          goto LABEL_18;
      }
      std::string::__init_copy_ctor_external((std::string *)&__str.__end_cap_, (const std::string::value_type *)v43[0], (std::string::size_type)v43[1]);
LABEL_21:
      v39 = 0;
      v40 = 0;
      v41 = 0;
      v35 = &v39;
      LOBYTE(v36) = 0;
      v39 = (std::string *)operator new(0x30uLL);
      v40 = v39;
      v41 = v39 + 2;
      v12 = 0;
      v40 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v41, (__int128 *)&__str, &v49, v39);
      do
      {
        if (*((char *)&v48 + v12 * 8 + 7) < 0)
          operator delete((&__str.__end_cap_.__value_)[v12]);
        v12 -= 3;
      }
      while (v12 != -6);
      v35 = 0;
      v36 = 0;
      v38 = 0;
      v37 = 0;
      memset(&__str, 0, 24);
      v14 = v39;
      v13 = v40;
      while (v14 != v13)
      {
        if ((char *)v40 - (char *)v39 == 24)
          goto LABEL_44;
        if (SHIBYTE(__str.__end_) < 0)
        {
          begin = __str.__begin_;
          if (__str.__begin_)
            goto LABEL_32;
        }
        else if (HIBYTE(__str.__end_))
        {
          begin = (std::__split_buffer<std::string>::pointer)HIBYTE(__str.__end_);
LABEL_32:
          if (SHIBYTE(__str.__end_) >= 0)
            p_str = &__str;
          else
            p_str = __str.__first_;
          if (p_str[(_QWORD)begin - 1] != 47)
            std::string::append((std::string *)&__str, "/");
        }
        v17 = SHIBYTE(v14->__r_.__value_.__r.__words[2]);
        if (v17 >= 0)
          v18 = (const std::string::value_type *)v14;
        else
          v18 = (const std::string::value_type *)v14->__r_.__value_.__r.__words[0];
        if (v17 >= 0)
          size = HIBYTE(v14->__r_.__value_.__r.__words[2]);
        else
          size = v14->__r_.__value_.__l.__size_;
        std::string::append((std::string *)&__str, v18, size);
LABEL_44:
        ++v14;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "/");
      gloria::FilePath::Tokenize((uint64_t)&v35, (std::string *)&__str, (unsigned __int8 *)__p);
      if (SHIBYTE(v46) < 0)
        operator delete(__p[0]);
      if (v39 == v40)
      {
        v21 = 0;
      }
      else
      {
        first = __str.__first_;
        if (SHIBYTE(__str.__end_) >= 0)
          first = &__str;
        v21 = *first == 47;
      }
      v38 = v21;
      if (SHIBYTE(__str.__end_) < 0)
        operator delete(__str.__first_);
      gloria::FilePath::ToString((uint64_t *)__p, (gloria::FilePath *)&v35);
      v23 = *(_QWORD *)(a2 + 8);
      v22 = *(_QWORD *)(a2 + 16);
      if (v23 >= v22)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *(_QWORD *)a2) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *(_QWORD *)a2) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        __str.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v28)
          v29 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::TrafficDynamicTile::Flow>>(a2 + 16, v28);
        else
          v29 = 0;
        v30 = v29 + v25;
        __str.__first_ = v29;
        __str.__begin_ = v30;
        __str.__end_cap_.__value_ = &v29[v28];
        v31 = *(_OWORD *)__p;
        v30->__r_.__value_.__r.__words[2] = v46;
        *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
        __p[1] = 0;
        v46 = 0;
        __p[0] = 0;
        __str.__end_ = v30 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__str);
        v32 = *(_QWORD *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__str);
        v33 = SHIBYTE(v46);
        *(_QWORD *)(a2 + 8) = v32;
        if (v33 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *(_QWORD *)(v23 + 16) = v46;
        *(_OWORD *)v23 = v24;
        *(_QWORD *)(a2 + 8) = v23 + 24;
      }
      __str.__first_ = (std::__split_buffer<std::string>::pointer)&v35;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__first_ = (std::__split_buffer<std::string>::pointer)&v39;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      v11 = 1;
LABEL_68:
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v44) & 0x80000000) == 0)
      {
        if ((v11 & 1) != 0)
          goto LABEL_72;
LABEL_75:
        if (!v9)
          goto LABEL_76;
        continue;
      }
      operator delete(v43[0]);
      if ((v11 & 1) == 0)
        goto LABEL_75;
LABEL_72:
      v9 = readdir(v7);
      if (!v9)
      {
LABEL_76:
        closedir(v7);
        break;
      }
    }
  }
  LOBYTE(__str.__first_) = 1;
  HIDWORD(__str.__first_) = 0;
  __str.__begin_ = (std::__split_buffer<std::string>::pointer)"";
  __str.__end_ = 0;
  return gloria::Status::Status(a3, 0, (uint64_t)&__str);
}

void sub_1885F94D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char **__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0)
    operator delete(__p);
  __p = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a12 = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (a24 < 0)
    operator delete(a19);
  if (a31 < 0)
    operator delete(a26);
  _Unwind_Resume(a1);
}

void gloria::ShardLoader::ListAllFiles(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  int v13;
  char *v14;
  _QWORD *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *p_p;
  int v21;
  int v22;
  std::string::size_type v23;
  std::string *v24;
  std::string *v25;
  std::string::size_type size;
  std::string *v27;
  std::string::size_type v28;
  void **v29;
  char v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t **v33;
  int v34;
  char *v35;
  uint64_t **v37;
  std::string::size_type v39;
  char *v40;
  void *v41[2];
  unsigned __int8 v42;
  uint64_t v43;
  std::string *v44;
  unint64_t v45;
  std::string v46;
  std::string __p;
  char *__endptr;
  std::string v49[3];
  void *v50;
  char v51;
  uint64_t v52;

  v4 = a1;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = (char *)*MEMORY[0x1E0DE4F50];
    v39 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v40 = *(char **)(MEMORY[0x1E0DE4F50] + 64);
    v37 = a4 + 1;
    v8 = MEMORY[0x1E0DE4FB8] + 16;
    v9 = MEMORY[0x1E0C80978];
    do
    {
      v10 = *(unsigned __int8 *)(v6 + 23);
      v11 = (char *)(*(_QWORD *)v6 + *(_QWORD *)(v6 + 8));
      if ((v10 & 0x80u) != 0)
      {
        v12 = *(char **)v6;
      }
      else
      {
        v11 = (char *)(v6 + v10);
        v12 = (char *)v6;
      }
      while (v11 != v12)
      {
        v13 = *--v11;
        if (v13 == 47)
        {
          v14 = v11 + 1;
          goto LABEL_10;
        }
      }
      v14 = v12;
LABEL_10:
      if ((v10 & 0x80u) != 0)
        v10 = *(_QWORD *)(v6 + 8);
      std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(&v46, v14, &v12[v10], &v12[v10] - v14);
      v43 = 0;
      v44 = 0;
      v45 = 0;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](&__endptr, &v46, 24);
      memset(&__p, 0, sizeof(__p));
      while (1)
      {
        v15 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__endptr, (uint64_t)&__p, 0x2Du);
        if ((*((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 32) & 5) != 0)
          break;
        v16 = v44;
        if ((unint64_t)v44 >= v45)
        {
          v18 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v43, (__int128 *)&__p);
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v44, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v44->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
          }
          v18 = v16 + 1;
        }
        v44 = v18;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __endptr = v7;
      *(char **)((char *)&__endptr + *((_QWORD *)v7 - 3)) = v40;
      v49[0].__r_.__value_.__l.__size_ = v39;
      v49[0].__r_.__value_.__r.__words[2] = v8;
      if (v51 < 0)
        operator delete(v50);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x18D764310](&v52);
      if (SHIBYTE(v44[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, v44[-1].__r_.__value_.__l.__data_, v44[-1].__r_.__value_.__l.__size_);
      }
      else
      {
        v19 = *(_OWORD *)&v44[-1].__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v44[-1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      __endptr = 0;
      v21 = strtoul((const char *)p_p, &__endptr, 10);
      v22 = v21;
      v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = &__p;
      else
        v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      if (size)
      {
        v27 = (std::string *)((char *)v25 + size);
        while ((v25->__r_.__value_.__s.__data_[0] & 0x80000000) == 0
             && (*(_DWORD *)(v9 + 4 * v25->__r_.__value_.__s.__data_[0] + 60) & 0x400) != 0)
        {
          v25 = (std::string *)((char *)v25 + 1);
          if (!--size)
          {
            v25 = v27;
            break;
          }
        }
      }
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v23 = __p.__r_.__value_.__l.__size_;
        if (!__p.__r_.__value_.__l.__size_)
          goto LABEL_51;
      }
      else
      {
        if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
          goto LABEL_51;
        v24 = &__p;
      }
      if (v25 != (std::string *)((char *)v24 + v23) || v21 < 0)
      {
LABEL_51:
        std::operator+<char>();
        LOBYTE(__endptr) = 1;
        HIDWORD(__endptr) = 0;
        v28 = v42;
        v29 = (void **)v41[0];
        if ((v42 & 0x80u) != 0)
          v28 = (std::string::size_type)v41[1];
        else
          v29 = v41;
        v49[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
        v49[0].__r_.__value_.__l.__size_ = v28;
        gloria::Status::Status(v4, 6, (uint64_t)&__endptr);
        if ((char)v42 < 0)
          operator delete(v41[0]);
        v30 = 0;
        goto LABEL_68;
      }
      LODWORD(__endptr) = v21;
      if (*(char *)(v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v49, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
        v22 = (int)__endptr;
      }
      else
      {
        v49[0] = *(std::string *)v6;
      }
      v31 = v37;
      while (1)
      {
        v32 = *v31;
        v33 = v31;
        if (!*v31)
          break;
        while (1)
        {
          v31 = (uint64_t **)v32;
          v34 = *((_DWORD *)v32 + 8);
          if (v34 > v22)
            break;
          if (v34 >= v22)
            goto LABEL_65;
          v32 = v31[1];
          if (!v32)
          {
            v33 = v31 + 1;
            goto LABEL_64;
          }
        }
      }
LABEL_64:
      v35 = (char *)operator new(0x40uLL);
      *((_DWORD *)v35 + 8) = v22;
      *(std::string *)(v35 + 40) = v49[0];
      memset(v49, 0, 24);
      std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at(a4, (uint64_t)v31, v33, (uint64_t *)v35);
LABEL_65:
      if (SHIBYTE(v49[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49[0].__r_.__value_.__l.__data_);
      v30 = 1;
      v4 = a1;
LABEL_68:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __endptr = (char *)&v43;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__endptr);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      if ((v30 & 1) == 0)
        return;
      v6 += 24;
    }
    while (v6 != a3);
  }
  LOBYTE(__endptr) = 1;
  HIDWORD(__endptr) = 0;
  v49[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&str_5;
  v49[0].__r_.__value_.__l.__size_ = 0;
  gloria::Status::Status(v4, 0, (uint64_t)&__endptr);
}

void sub_1885F9A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a36 < 0)
    operator delete(__p);
  __p = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(a1);
}

void gloria::FilePath::Tokenize(uint64_t a1, std::string *__str, unsigned __int8 *a3)
{
  int v6;
  BOOL v7;
  std::string *v8;
  std::string::size_type size;
  uint64_t v10;
  unsigned __int8 *v11;
  BOOL v12;
  uint64_t v13;
  unsigned __int8 *v14;
  std::string *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  std::string::size_type v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::string *v27;
  std::string *v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  std::string::size_type v32;
  std::string *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  std::string __p;
  std::__split_buffer<std::string> __v;

  v6 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  v7 = v6 < 0;
  if (v6 >= 0)
    v8 = __str;
  else
    v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
  if (v7)
    size = __str->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v10 = a3[23];
  if ((v10 & 0x80u) == 0)
    v11 = a3;
  else
    v11 = *(unsigned __int8 **)a3;
  if ((v10 & 0x80u) != 0)
    v10 = *((_QWORD *)a3 + 1);
  if (size)
    v12 = v10 == 0;
  else
    v12 = 1;
  if (v12)
  {
    v13 = -1;
  }
  else
  {
    v14 = (unsigned __int8 *)v8 + size;
    v15 = v8;
LABEL_18:
    v16 = v10;
    v17 = v11;
    while (v15->__r_.__value_.__s.__data_[0] != *v17)
    {
      ++v17;
      if (!--v16)
      {
        v15 = (std::string *)((char *)v15 + 1);
        if (v15 != (std::string *)v14)
          goto LABEL_18;
        v15 = (std::string *)v14;
        break;
      }
    }
    v18 = (char *)v15 - (char *)v8;
    if (v15 == (std::string *)v14)
      v13 = -1;
    else
      v13 = v18;
  }
  v19 = 0;
  do
  {
    if (v13 != v19)
    {
      std::string::basic_string(&__p, __str, v19, v13 - v19, (std::allocator<char> *)&__v);
      v21 = *(_QWORD *)(a1 + 8);
      v20 = *(_QWORD *)(a1 + 16);
      if (v21 >= v20)
      {
        v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *(_QWORD *)a1) >> 3);
        v24 = v23 + 1;
        if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *(_QWORD *)a1) >> 3);
        if (2 * v25 > v24)
          v24 = 2 * v25;
        if (v25 >= 0x555555555555555)
          v26 = 0xAAAAAAAAAAAAAAALL;
        else
          v26 = v24;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
        if (v26)
          v27 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::TrafficDynamicTile::Flow>>(a1 + 16, v26);
        else
          v27 = 0;
        v28 = v27 + v23;
        __v.__first_ = v27;
        __v.__begin_ = v28;
        __v.__end_cap_.__value_ = &v27[v26];
        v29 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v28->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v28 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
        v30 = *(_QWORD *)(a1 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v31 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a1 + 8) = v30;
        if (v31 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v21 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v21 = v22;
        *(_QWORD *)(a1 + 8) = v21 + 24;
      }
    }
    if (v13 == -1)
      break;
    v19 = v13 + 1;
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      v32 = __str->__r_.__value_.__l.__size_;
      if (v19 == v32)
        return;
      v33 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    else
    {
      v32 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      v33 = __str;
      if (v19 == v32)
        return;
    }
    v34 = a3[23];
    if ((v34 & 0x80u) == 0)
      v35 = a3;
    else
      v35 = *(unsigned __int8 **)a3;
    if ((v34 & 0x80u) != 0)
      v34 = *((_QWORD *)a3 + 1);
    if (v32 <= v19 || v34 == 0)
    {
      v13 = -1;
    }
    else
    {
      v37 = (unsigned __int8 *)v33 + v19;
      v38 = (unsigned __int8 *)v33 + v32;
LABEL_58:
      v39 = v34;
      v40 = v35;
      while (*v37 != *v40)
      {
        ++v40;
        if (!--v39)
        {
          if (++v37 != v38)
            goto LABEL_58;
          v37 = v38;
          break;
        }
      }
      v41 = v37 - (unsigned __int8 *)v33;
      v13 = v37 == v38 ? -1 : v41;
    }
  }
  while (v19 != -1);
}

void sub_1885F9D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::__split_buffer<std::string> *a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void gloria::FileUtils::AbsolutePath(std::string *a1, const void **a2, uint64_t a3)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string v15;
  void *__p[2];
  int64_t v17;
  char __s[1024];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v6 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *a2;
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
  v9 = *(char *)(a3 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a3;
  else
    v10 = *(const std::string::value_type **)a3;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a3 + 23);
  else
    v11 = *(_QWORD *)(a3 + 8);
  v12 = std::string::append(&v15, v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v17 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (v17 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if (realpath_DARWIN_EXTSN((const char *)v14, __s))
  {
    std::string::basic_string[abi:ne180100]<0>(a1, __s);
  }
  else if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
}

void sub_1885F9FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL gloria::DbReaderDisk::pathExists(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::string *p_p;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string __p;
  stat v10;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    gloria::FileUtils::AbsolutePath(&__p, (const void **)(a1 + 8), a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v4 = stat((const char *)p_p, &v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    v5 = a1 + 8;
    v6 = v7;
    if (*(char *)(v5 + 23) < 0)
      v5 = v6;
    v4 = stat((const char *)v5, &v10);
  }
  return v4 == 0;
}

void sub_1885FA0AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void gloria::ShardPool::AllShards(_QWORD *a1, char **a2)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v5;
  _QWORD *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;

  v2 = a1 + 1;
  v3 = (_QWORD *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    v5 = a2[1];
    do
    {
      v6 = v3 + 5;
      v7 = (unint64_t)a2[2];
      if ((unint64_t)v5 >= v7)
      {
        v8 = *a2;
        v9 = (v5 - *a2) >> 3;
        v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v11 = v7 - (_QWORD)v8;
        if (v11 >> 2 > v10)
          v10 = v11 >> 2;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v12 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v12 = v10;
        if (v12)
        {
          if (v12 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v13 = (char *)operator new(8 * v12);
        }
        else
        {
          v13 = 0;
        }
        v14 = &v13[8 * v9];
        *(_QWORD *)v14 = v6;
        v15 = v14 + 8;
        if (v5 != v8)
        {
          do
          {
            v16 = *((_QWORD *)v5 - 1);
            v5 -= 8;
            *((_QWORD *)v14 - 1) = v16;
            v14 -= 8;
          }
          while (v5 != v8);
          v5 = *a2;
        }
        *a2 = v14;
        a2[1] = v15;
        a2[2] = &v13[8 * v12];
        if (v5)
          operator delete(v5);
        v5 = v15;
      }
      else
      {
        *(_QWORD *)v5 = v6;
        v5 += 8;
      }
      a2[1] = v5;
      v17 = (_QWORD *)v3[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v3[2];
          v19 = *v18 == (_QWORD)v3;
          v3 = v18;
        }
        while (!v19);
      }
      v3 = v18;
    }
    while (v18 != v2);
  }
}

_QWORD *gloria::RecordDecompressor::decompressor@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t (**v4)();

  *a2 = 0;
  if ((*a1 - 1) > 1)
  {
    result = (_QWORD *)operator new();
    v4 = &off_1E1BF71F8;
  }
  else
  {
    result = (_QWORD *)operator new();
    v4 = &off_1E1BF7110;
  }
  *result = v4;
  *a2 = result;
  return result;
}

void sub_1885FA288(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

void gloria::XXHashFn::~XXHashFn(gloria::XXHashFn *this)
{
  JUMPOUT(0x18D76437CLL);
}

void gloria::NoopDecompressor::~NoopDecompressor(gloria::NoopDecompressor *this)
{
  JUMPOUT(0x18D76437CLL);
}

uint64_t geo::DbReaderTarFileDescriptor::listFiles@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  int v8;
  __int128 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  char *v21;
  uint64_t v22;
  int v23;
  char v25;
  int v26;
  const char *v27;
  uint64_t v28;
  _BYTE v29[4];
  int v30;
  const char *v31;
  uint64_t v32;

  if (!*(_QWORD *)(a1 + 64))
  {
    v29[0] = 1;
    v30 = 0;
    v31 = "";
    v32 = 0;
    v21 = v29;
LABEL_32:
    v22 = a4;
    v23 = 1;
    return gloria::Status::Status(v22, v23, (uint64_t)v21);
  }
  v5 = *(uint64_t **)(a1 + 56);
  if (!v5)
    goto LABEL_31;
  v8 = 0;
  do
  {
    v9 = (__int128 *)(v5 + 2);
    v10 = (unsigned __int8 *)v5[2];
    v11 = a2[23];
    if ((v11 & 0x80u) == 0)
      v12 = a2;
    else
      v12 = *(unsigned __int8 **)a2;
    if ((v11 & 0x80u) != 0)
      v11 = *((_QWORD *)a2 + 1);
    v13 = *((unsigned __int8 *)v5 + 39);
    if ((v13 & 0x80u) != 0)
      v13 = v5[3];
    else
      v10 = (unsigned __int8 *)(v5 + 2);
    if (v11)
      v14 = v13 == 0;
    else
      v14 = 1;
    if (v14)
    {
      v19 = v12;
    }
    else
    {
      v17 = v11 - 1;
      v18 = v13 - 1;
      v19 = v12;
      do
      {
        if (*v19 != *v10)
          break;
        ++v19;
        if (!v17)
          break;
        ++v10;
        --v17;
      }
      while (v18--);
    }
    if (v19 == &v12[v11])
    {
      v15 = a3[1];
      if (v15 >= a3[2])
      {
        v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, v9);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v9);
        v16 = v15 + 24;
      }
      a3[1] = v16;
      ++v8;
    }
    v5 = (uint64_t *)*v5;
  }
  while (v5);
  if (v8 <= 0)
  {
LABEL_31:
    v25 = 1;
    v26 = 0;
    v27 = "";
    v28 = 0;
    v21 = &v25;
    goto LABEL_32;
  }
  v29[0] = 1;
  v30 = 0;
  v31 = "";
  v32 = 0;
  v21 = v29;
  v22 = a4;
  v23 = 0;
  return gloria::Status::Status(v22, v23, (uint64_t)v21);
}

BOOL geo::DbReaderTarFileDescriptor::pathExists(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2)
    v3 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)(a1 + 40), (unsigned __int8 *)a2);
  else
    v3 = *(unsigned __int8 **)(a1 + 64);
  return v3 != 0;
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__2(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

id __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  id result;
  char v8;

  v4 = *(id *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = v5;
  result = v6;
  *(_QWORD *)(a1 + 64) = result;
  v8 = *(_BYTE *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 76) = v8;
  return result;
}

uint64_t __Block_byref_object_copy__4(uint64_t *a1, uint64_t a2)
{
  a1[6] = (uint64_t)(a1 + 6);
  a1[7] = (uint64_t)(a1 + 6);
  a1[8] = 0;
  return std::list<_GEOTileKey>::splice((uint64_t)(a1 + 6), a1 + 6, (_QWORD *)(a2 + 48));
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  return result;
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__9(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t __Block_byref_object_copy__10(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__11(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__12(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__13(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__15(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__16(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__19(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__20(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__22(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x18D765024](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t __Block_byref_object_copy__23(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__24(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__25(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__26(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__27(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__28(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__29(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__30(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__31(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__32(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__33(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__34(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__35(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__36(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__37(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__38(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__39(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__40(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__41(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__42(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x18D765024](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t __Block_byref_object_copy__43(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__44(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__45(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__46(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__47(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__48(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__49(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__50(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__51(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__52(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_copy__53(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__54(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__55(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__56(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__57(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t __Block_byref_object_copy__58(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__59(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__60(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__61(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__62(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__63(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__64(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__65(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__66(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__67(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__68(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__69(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__70(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__71(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__72(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__73(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__74(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__75(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__76(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__77(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__78(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  return result;
}

uint64_t __Block_byref_object_copy__79(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__80(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__81(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  return result;
}

uint64_t __Block_byref_object_copy__82(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__83(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__84(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__85(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__86(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__87(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__88(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  return result;
}

_QWORD *__Block_byref_object_copy__89(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

uint64_t __Block_byref_object_copy__90(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__91(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__92(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__93(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__94(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__95(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__96(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__97(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__98(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = MEMORY[0x18D765024](*(_QWORD *)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

uint64_t __Block_byref_object_copy__99(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__100(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__101(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t __Block_byref_object_copy__102(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__103(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__104(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__105(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1885FAD70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1885FAEBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1885FB138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

double CAADynamicalTime::TT2UTC(CAADynamicalTime *this, double a2)
{
  CAADynamicalTime *v3;
  double v4;
  double v5;

  v4 = CAADynamicalTime::DeltaT(this, a2);
  v5 = a2 + v4 / -86400.0;
  if (a2 >= 2437300.5 && a2 <= 2458254.5)
    return v5 + (v4 - CAADynamicalTime::CumulativeLeapSeconds(v3, a2) + -32.184) / 86400.0;
  return v5;
}

void sub_1885FB5CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void getRightAscension(CAADynamicalTime *a1, _QWORD *a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v7;
  uint64_t v8;
  GEOEquatorialCelestialBodyData *v9;

  v9 = -[GEOEquatorialCelestialBodyData initWithJulianDay:body:useHighPrecision:]([GEOEquatorialCelestialBodyData alloc], "initWithJulianDay:body:useHighPrecision:", a3, a4, CAADynamicalTime::UTC2TT(a1, a5));
  -[GEOEquatorialCelestialBodyData rightAscension](v9, "rightAscension");
  *(_QWORD *)a1 = v7;
  -[GEOEquatorialCelestialBodyData declination](v9, "declination");
  *a2 = v8;

}

void sub_1885FB680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1885FB76C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double CAADynamicalTime::UTC2TT(CAADynamicalTime *this, double a2)
{
  double v2;
  CAADynamicalTime *v3;
  double v4;

  v2 = a2;
  v4 = CAADynamicalTime::DeltaT(this, a2);
  if (v2 >= 2437300.5 && v2 <= 2458254.5)
    v2 = v2 + (v4 - CAADynamicalTime::CumulativeLeapSeconds(v3, v2) + -32.184) / -86400.0;
  return v4 / 86400.0 + v2;
}

double CAADynamicalTime::DeltaT(CAADynamicalTime *this, double a2)
{
  double *v2;
  unint64_t v3;
  unint64_t v4;
  double *v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  BOOL v43;

  if (a2 >= 2326267.5 && a2 < 2463232.5)
  {
    v2 = (double *)&g_DeltaTValues;
    v3 = 19324;
    do
    {
      v4 = v3 >> 1;
      v5 = &v2[2 * (v3 >> 1)];
      v7 = *v5;
      v6 = v5 + 2;
      v3 += ~(v3 >> 1);
      if (v7 > a2)
        v3 = v4;
      else
        v2 = v6;
    }
    while (v3);
    v8 = *(v2 - 1);
    v9 = (a2 - *(v2 - 2)) / (*v2 - *(v2 - 2));
    v10 = v2[1] - v8;
    return v8 + v9 * v10;
  }
  v42 = a2;
  v43 = a2 >= 2299160.5;
  v11 = CAADate::FractionalYear((CAADate *)&v42);
  if (v11 < -500.0)
  {
    v9 = (v11 + -1820.0) / 100.0 * ((v11 + -1820.0) / 100.0);
    v10 = 32.0;
    v8 = -20.0;
    return v8 + v9 * v10;
  }
  if (v11 < 500.0)
  {
    v13 = v11 / 100.0;
    v14 = v13 * (v13 * v13);
    v15 = v13 * (v13 * v14);
    v16 = v13 * v15;
    v17 = v13 * -1014.41 + 10583.6 + v13 * v13 * 33.78311 + v14 * -5.952053 + v13 * v14 * -0.1798452 + v15 * 0.022174192;
    v18 = 0.0090316521;
    return v17 + v16 * v18;
  }
  if (v11 < 1600.0)
  {
    v19 = (v11 + -1000.0) / 100.0;
    v20 = v19 * (v19 * v19);
    v21 = v19 * (v19 * v20);
    v16 = v19 * v21;
    v17 = v19 * -556.01 + 1574.2 + v19 * v19 * 71.23472 + v20 * 0.319781 + v19 * v20 * -0.8503463 + v21 * -0.005050998;
    v18 = 0.0083572073;
    return v17 + v16 * v18;
  }
  if (v11 < 1700.0)
  {
    v22 = (v11 + -1600.0) / 100.0;
    v23 = v22 * (v22 * v22);
    v24 = v22 * -98.08 + 120.0 + v22 * v22 * -153.2;
    v25 = 0.007129;
LABEL_19:
    v26 = v23 / v25;
    return v24 + v26;
  }
  if (v11 < 1800.0)
  {
    v27 = (v11 + -1700.0) / 100.0;
    return v27 * 16.03 + 8.83 + v27 * v27 * -59.285 + v27 * (v27 * v27) * 133.36 + v27 * (v27 * (v27 * v27)) / -0.01174;
  }
  if (v11 < 1860.0)
  {
    v28 = (v11 + -1800.0) / 100.0;
    v29 = v28 * (v28 * v28);
    return v28 * -33.2447
         + 13.72
         + v28 * v28 * 68.612
         + v29 * 4111.6
         + v28 * v29 * -37436.0
         + v28 * (v28 * v29) * 121272.0
         + v28 * (v28 * (v28 * v29)) * -169900.0
         + v28 * (v28 * (v28 * (v28 * v29))) * 87500.0;
  }
  if (v11 < 1900.0)
  {
    v30 = (v11 + -1860.0) / 100.0;
    v31 = v30 * (v30 * v30);
    v32 = v30 * (v30 * v31);
    v24 = v30 * 57.37 + 7.62 + v30 * v30 * -2517.54 + v31 * 16806.68 + v30 * v31 * -44736.24;
    v26 = v32 / 0.0000233174;
    return v24 + v26;
  }
  if (v11 < 1920.0)
  {
    v33 = (v11 + -1900.0) / 100.0;
    return v33 * 149.4119
         + -2.79
         + v33 * v33 * -598.939
         + v33 * (v33 * v33) * 6196.6
         + v33 * (v33 * (v33 * v33)) * -19700.0;
  }
  if (v11 < 1941.0)
    return (v11 + -1920.0) / 100.0 * 84.493
         + 21.2
         + (v11 + -1920.0) / 100.0 * ((v11 + -1920.0) / 100.0) * -761.0
         + (v11 + -1920.0) / 100.0 * ((v11 + -1920.0) / 100.0 * ((v11 + -1920.0) / 100.0)) * 2093.6;
  if (v11 < 1961.0)
  {
    v34 = (v11 + -1950.0) / 100.0;
    v23 = v34 * (v34 * v34);
    v24 = v34 * 40.7 + 29.07 + v34 * v34 / -0.0233;
    v25 = 0.002547;
    goto LABEL_19;
  }
  if (v11 < 1986.0)
  {
    v35 = (v11 + -1975.0) / 100.0;
    v23 = v35 * (v35 * v35);
    v24 = v35 * 106.7 + 45.45 + v35 * v35 / -0.026;
    v25 = -0.000718;
    goto LABEL_19;
  }
  if (v11 < 2005.0)
  {
    v36 = (v11 + -2000.0) / 100.0;
    return v36 * 33.45
         + 63.86
         + v36 * v36 * -603.74
         + v36 * (v36 * v36) * 1727.5
         + v36 * (v36 * (v36 * v36)) * 65181.4
         + v36 * (v36 * (v36 * (v36 * v36))) * 237359.9;
  }
  if (v11 < 2050.0)
  {
    v37 = (v11 + -2000.0) / 100.0;
    v38 = v37 * v37;
    v39 = v37 * 32.217 + 62.92;
    v40 = 55.89;
    return v39 + v38 * v40;
  }
  v41 = (v11 + -1820.0) / 100.0;
  v38 = v41 * v41;
  if (v11 < 2150.0)
  {
    v39 = v41 * 56.28 + -205.72;
    v40 = 32.0;
    return v39 + v38 * v40;
  }
  return v38 * 32.0 + -20.0;
}

void _GEOEclipticLongitude(CAAMoon *a1, CAASun *this, double a3)
{
  switch((unint64_t)a1)
  {
    case 0uLL:
      CAASun::ApparentEclipticLongitude(this, a3);
      break;
    case 1uLL:
      CAAMercury::EclipticLongitude(this, a3);
      break;
    case 2uLL:
      CAAVenus::EclipticLongitude(this, a3);
      break;
    case 3uLL:
      CAAEarth::EclipticLongitude(this, a3);
      break;
    case 4uLL:
      CAAMoon::EclipticLongitude(a1, a3);
      break;
    case 5uLL:
      CAAMars::EclipticLongitude(this, a3);
      break;
    case 6uLL:
      CAAJupiter::EclipticLongitude(this, a3);
      break;
    case 7uLL:
      CAASaturn::EclipticLongitude(this, a3);
      break;
    case 8uLL:
      CAAUranus::EclipticLongitude(this, a3);
      break;
    case 9uLL:
      CAANeptune::EclipticLongitude(this, a3);
      break;
    case 0xAuLL:
      CAAPluto::EclipticLongitude(a1, a3);
      break;
    default:
      return;
  }
}

void _GEOEclipticLatitude(CAAMoon *a1, CAASun *this, double a3)
{
  switch((unint64_t)a1)
  {
    case 0uLL:
      CAASun::GeometricFK5EclipticLatitude(this, a3);
      break;
    case 1uLL:
      CAAMercury::EclipticLatitude(this, a3);
      break;
    case 2uLL:
      CAAVenus::EclipticLatitude(this, a3);
      break;
    case 3uLL:
      CAAEarth::EclipticLatitude(this, a3);
      break;
    case 4uLL:
      CAAMoon::EclipticLatitude(a1, a3);
      break;
    case 5uLL:
      CAAMars::EclipticLatitude(this, a3);
      break;
    case 6uLL:
      CAAJupiter::EclipticLatitude(this, a3);
      break;
    case 7uLL:
      CAASaturn::EclipticLatitude(this, a3);
      break;
    case 8uLL:
      CAAUranus::EclipticLatitude(this, a3);
      break;
    case 9uLL:
      CAANeptune::EclipticLatitude(this, a3);
      break;
    case 0xAuLL:
      CAAPluto::EclipticLatitude(a1, a3);
      break;
    default:
      return;
  }
}

double CAASun::GeometricFK5EclipticLatitude(CAASun *this, double a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  __double2 v9;

  CAAEarth::EclipticLongitude(this, a2);
  v5 = fmod(v4 + 180.0, 360.0);
  if (v5 >= 0.0)
    v6 = v5;
  else
    v6 = v5 + 360.0;
  CAAEarth::EclipticLatitude(this, a2);
  v8 = v7;
  v9 = __sincos_stret((v6+ (a2 + -2451545.0) / 36525.0 * -1.397+ (a2 + -2451545.0) / 36525.0 * -0.00031 * ((a2 + -2451545.0) / 36525.0))* 0.0174532925);
  return (v9.__cosval - v9.__sinval) * 0.03916 / 3600.0 + 0.0 - v8;
}

void CAASun::ApparentEclipticLongitude(CAASun *this, double a2)
{
  CAANutation *v4;
  CAASun *v5;

  CAASun::GeometricFK5EclipticLongitude(this, a2);
  CAANutation::NutationInLongitude(v4, a2);
  CAAEarth::RadiusVector(this, a2);
  if ((_DWORD)this)
    CAASun::VariationGeometricEclipticLongitude(v5, a2);
}

long double CAASun::GeometricFK5EclipticLongitude(CAASun *this, double a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  long double v9;
  __double2 v10;

  CAAEarth::EclipticLongitude(this, a2);
  v5 = fmod(v4 + 180.0, 360.0);
  if (v5 >= 0.0)
    v6 = v5;
  else
    v6 = v5 + 360.0;
  CAAEarth::EclipticLatitude(this, a2);
  v7 = (v6
      + (a2 + -2451545.0) / 36525.0 * -1.397
      + (a2 + -2451545.0) / 36525.0 * -0.00031 * ((a2 + -2451545.0) / 36525.0))
     * 0.0174532925;
  v9 = v8 * -0.0174532925;
  v10 = __sincos_stret(v7);
  return v6 + ((v10.__cosval + v10.__sinval) * 0.03916 * tan(v9) + -0.09033) / 3600.0 + 0.0;
}

void CAARiseTransitSet::Calculate(CAARiseTransitSet *this@<X0>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>, double a8@<D6>, double a9@<D7>, uint64_t a10@<X8>, double a11, double a12)
{
  double v17;
  double v18;
  CAADynamicalTime *v19;
  double i;
  __double2 v21;
  __double2 v22;
  long double v23;
  double *v24;
  double *v25;
  double v26;
  double Set;
  double Transit;
  double *v29;
  double *v30;
  double *v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v39;
  CAARiseTransitSetDetails v41;

  *(double *)&v41.bSetValid = a5;
  v41.Set = a3;
  v41.Transit = a7;
  *(_QWORD *)(a10 + 8) = 0;
  *(_QWORD *)(a10 + 40) = 0;
  *(_BYTE *)a10 = 0;
  *(_QWORD *)(a10 + 24) = 0;
  *(_BYTE *)(a10 + 32) = 0;
  *(_WORD *)(a10 + 16) = 1;
  CAASidereal::ApparentGreenwichSiderealTime(this, a2);
  v18 = v17 * 15.0;
  v37 = CAADynamicalTime::DeltaT(v19, a2);
  v39 = a9;
  for (i = (a9 + a5 * 15.0 - v18) / 360.0; i > 1.0; i = i + -1.0)
    ;
  for (; i < 0.0; i = i + 1.0)
    ;
  v21 = __sincos_stret(a11 * 0.0174532925);
  v22 = __sincos_stret(a6 * 0.0174532925);
  v23 = sin(a12 * 0.0174532925);
  *(double *)&v41.bTransitValid = i;
  v41.Rise = 0.0;
  *(_QWORD *)&v41.bRiseValid = 0;
  CAARiseTransitSet::CalculateRiseSet((CAARiseTransitSet *)a10, i, (v23 - v21.__sinval * v22.__sinval) / (v22.__cosval * v21.__cosval), (CAARiseTransitSetDetails *)&v41.Rise, (double *)&v41.bRiseValid, v24);
  CAARiseTransitSet::CorrectRAValuesForInterpolation((CAARiseTransitSet *)&v41.Set, (long double *)&v41.bSetValid, &v41.Transit, v25);
  v26 = *(double *)&v41.bSetValid;
  Set = v41.Set;
  Transit = v41.Transit;
  v36 = v41.Set;
  v35 = v41.Transit;
  CAARiseTransitSet::CalculateTransitHelper((CAARiseTransitSet *)a10, (CAARiseTransitSetDetails *)&v41.bTransitValid, v18, v37, v41.Set, *(double *)&v41.bSetValid, v41.Transit, v39, v29);
  CAARiseTransitSet::CalculateRiseHelper((CAARiseTransitSet *)a10, (CAARiseTransitSetDetails *)&v41.Rise, v18, v37, Set, a4, v26, a6, Transit, a8, v30, v39, a11, a11 * 0.0174532925, a12);
  CAARiseTransitSet::CalculateSetHelper((CAARiseTransitSet *)a10, &v41, v18, v37, v36, a4, v26, a6, v35, a8, v31, v39, a11, a11 * 0.0174532925, a12);
  v32 = v41.Rise * 24.0;
  if (!*(_BYTE *)a10)
    v32 = 0.0;
  *(double *)(a10 + 8) = v32;
  v33 = *(double *)&v41.bRiseValid * 24.0;
  if (!*(_BYTE *)(a10 + 32))
    v33 = 0.0;
  *(double *)(a10 + 40) = v33;
  v34 = *(double *)&v41.bTransitValid * 24.0;
  if (!*(_BYTE *)(a10 + 16))
    v34 = 0.0;
  *(double *)(a10 + 24) = v34;
}

void CAARiseTransitSet::CorrectRAValuesForInterpolation(CAARiseTransitSet *this, long double *a2, long double *a3, double *a4)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double *v14;

  v7 = fmod(*(long double *)this, 24.0);
  if (v7 < 0.0)
    v7 = v7 + 24.0;
  *(double *)this = v7;
  v8 = fmod(*a2, 24.0);
  if (v8 < 0.0)
    v8 = v8 + 24.0;
  *a2 = v8;
  v9 = fmod(*a3, 24.0);
  if (v9 < 0.0)
    v9 = v9 + 24.0;
  *a3 = v9;
  v10 = *a2;
  v11 = *(double *)this;
  if (vabdd_f64(*a2, *(double *)this) > 12.0)
  {
    if (v10 <= v11)
    {
      v10 = v10 + 24.0;
      *a2 = v10;
    }
    else
    {
      *(double *)this = v11 + 24.0;
      v10 = *a2;
    }
  }
  v12 = *a3;
  if (vabdd_f64(*a3, v10) > 12.0)
  {
    if (v12 <= v10)
    {
      *a3 = v12 + 24.0;
      v10 = *a2;
    }
    else
    {
      v10 = v10 + 24.0;
      *a2 = v10;
    }
  }
  v13 = *(double *)this;
  if (vabdd_f64(v10, *(double *)this) > 12.0)
  {
    if (v10 <= v13)
    {
      v10 = v10 + 24.0;
      *a2 = v10;
    }
    else
    {
      *(double *)this = v13 + 24.0;
      v10 = *a2;
    }
  }
  if (vabdd_f64(*a3, v10) > 12.0)
  {
    if (*a3 > v10)
    {
      v14 = a2;
    }
    else
    {
      v10 = *a3;
      v14 = a3;
    }
    *v14 = v10 + 24.0;
  }
}

void CAARiseTransitSet::CalculateTransitHelper(CAARiseTransitSet *this, CAARiseTransitSetDetails *a2, double a3, double a4, double a5, double a6, double a7, double a8, double *a9)
{
  int v12;
  double v13;
  double v14;
  char v15;
  double v16;
  char v17;
  double v18;
  double v19;
  double v21;

  v12 = *((unsigned __int8 *)this + 16);
  v13 = *(double *)&a2->bRiseValid;
  v21 = a5 + a7 + a6 * -2.0;
  v14 = a6 - a5 + a7 - a6;
  v15 = 1;
  v16 = a4 / 86400.0;
  do
  {
    v17 = v15;
    if (v12)
    {
      v18 = fmod(a3 + v13 * 360.985647, 360.0);
      if (v18 < 0.0)
        v18 = v18 + 360.0;
      v19 = fmod(v18 - a8 + (a6 + (v16 + v13) * 0.5 * (v14 + (v16 + v13) * v21)) * -15.0, 360.0);
      if (v19 < 0.0)
        v19 = v19 + 360.0;
      if (v19 > 180.0)
        v19 = v19 + -360.0;
      v13 = v13 + v19 / -360.0;
      *(double *)&a2->bRiseValid = v13;
      if (v13 < 0.0 || v13 >= 1.0)
      {
        v12 = 0;
        *((_BYTE *)this + 16) = 0;
      }
    }
    v15 = 0;
  }
  while ((v17 & 1) != 0);
}

void CAARiseTransitSet::CalculateRiseHelper(CAARiseTransitSet *this, CAARiseTransitSetDetails *a2, long double __x, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double *a11, double a12, double a13, long double __xa, double a15)
{
  int v17;
  double v18;
  char v19;
  char v20;
  CAACoordinateTransformation *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  long double v28;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;

  v35 = a5 + a9 + a7 * -2.0;
  v33 = a6 + a10 + a8 * -2.0;
  v34 = a7 - a5 + a9 - a7;
  v31 = a4 / 86400.0;
  v32 = a8 - a6 + a10 - a8;
  v30 = cos(__xa);
  v17 = *(unsigned __int8 *)this;
  v18 = *(double *)&a2->bRiseValid;
  v19 = 1;
  do
  {
    v20 = v19;
    if (v17)
    {
      v22 = fmod(__x + v18 * 360.985647, 360.0);
      if (v22 < 0.0)
        v22 = v22 + 360.0;
      v23 = (v31 + v18) * 0.5;
      v24 = a8 + v23 * (v32 + (v31 + v18) * v33);
      v25 = v22 - a12 - (a7 + v23 * (v34 + (v31 + v18) * v35)) * 15.0;
      CAACoordinateTransformation::Equatorial2Horizontal(v21, v25 / 15.0, v24, a13);
      v27 = v26 - a15;
      v28 = v30 * (cos(v24 * 0.0174532925) * 360.0);
      v18 = v18 + v27 / (v28 * sin(v25 * 0.0174532925));
      *(double *)&a2->bRiseValid = v18;
      if (v18 < 0.0 || v18 >= 1.0)
      {
        v17 = 0;
        *(_BYTE *)this = 0;
      }
    }
    v19 = 0;
  }
  while ((v20 & 1) != 0);
}

void CAARiseTransitSet::CalculateSetHelper(CAARiseTransitSet *this, CAARiseTransitSetDetails *a2, long double __x, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double *a11, double a12, double a13, long double __xa, double a15)
{
  int v17;
  double v18;
  char v19;
  char v20;
  CAACoordinateTransformation *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  long double v28;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;

  v35 = a5 + a9 + a7 * -2.0;
  v33 = a6 + a10 + a8 * -2.0;
  v34 = a7 - a5 + a9 - a7;
  v31 = a4 / 86400.0;
  v32 = a8 - a6 + a10 - a8;
  v30 = cos(__xa);
  v17 = *((unsigned __int8 *)this + 32);
  v18 = *(double *)&a2->bRiseValid;
  v19 = 1;
  do
  {
    v20 = v19;
    if (v17)
    {
      v22 = fmod(__x + v18 * 360.985647, 360.0);
      if (v22 < 0.0)
        v22 = v22 + 360.0;
      v23 = (v31 + v18) * 0.5;
      v24 = a8 + v23 * (v32 + (v31 + v18) * v33);
      v25 = v22 - a12 - (a7 + v23 * (v34 + (v31 + v18) * v35)) * 15.0;
      CAACoordinateTransformation::Equatorial2Horizontal(v21, v25 / 15.0, v24, a13);
      v27 = v26 - a15;
      v28 = v30 * (cos(v24 * 0.0174532925) * 360.0);
      v18 = v18 + v27 / (v28 * sin(v25 * 0.0174532925));
      *(double *)&a2->bRiseValid = v18;
      if (v18 < 0.0 || v18 >= 1.0)
      {
        v17 = 0;
        *((_BYTE *)this + 32) = 0;
      }
    }
    v19 = 0;
  }
  while ((v20 & 1) != 0);
}

void CAARiseTransitSet::CalculateRiseSet(CAARiseTransitSet *this, double a2, long double a3, CAARiseTransitSetDetails *a4, double *a5, double *a6)
{
  long double v10;
  double v11;
  double v12;

  *(_QWORD *)&a4->bRiseValid = 0;
  *a5 = 0.0;
  if (a3 > -1.0 && a3 < 1.0)
  {
    *(_BYTE *)this = 1;
    *((_BYTE *)this + 32) = 1;
    *((_BYTE *)this + 17) = 1;
    v10 = acos(a3) * 57.2957795 / 360.0;
    *(long double *)&a4->bRiseValid = a2 - v10;
    *a5 = v10 + a2;
    v11 = *(double *)&a4->bRiseValid;
    if (*(double *)&a4->bRiseValid > 1.0)
    {
      do
        v11 = v11 + -1.0;
      while (v11 > 1.0);
      *(double *)&a4->bRiseValid = v11;
    }
    if (v11 < 0.0)
    {
      do
        v11 = v11 + 1.0;
      while (v11 < 0.0);
      *(double *)&a4->bRiseValid = v11;
    }
    v12 = *a5;
    if (*a5 > 1.0)
    {
      do
        v12 = v12 + -1.0;
      while (v12 > 1.0);
      *a5 = v12;
    }
    if (v12 < 0.0)
    {
      do
        v12 = v12 + 1.0;
      while (v12 < 0.0);
      *a5 = v12;
    }
  }
  else if (a3 < 1.0)
  {
    *((_BYTE *)this + 17) = 1;
  }
}

void CAAMoonIlluminatedFraction::PositionAngle(CAAMoonIlluminatedFraction *this, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;
  double v7;
  __double2 v8;
  __double2 v9;
  __double2 v10;
  long double v11;

  v5 = a2 * 0.261799388;
  v6 = a4 * 0.261799388;
  v7 = a5 * 0.0174532925;
  v8 = __sincos_stret(a3 * 0.0174532925);
  v9 = __sincos_stret(v5 - v6);
  v10 = __sincos_stret(v7);
  v11 = atan2(v8.__cosval * v9.__sinval, v9.__cosval * -(v8.__cosval * v10.__sinval) + v8.__sinval * v10.__cosval);
  fmod(v11 * 57.2957795, 360.0);
}

void GEOFunctionInterceptor::nextMaxOrMin(GEOFunctionInterceptor *this, int a2)
{
  int v4;
  uint64_t Peak;
  uint64_t v6;
  double v7;
  char *v8;

  v4 = 1;
  while (1)
  {
    Peak = GEOFunctionInterceptor::getPeak(this, v4);
    if (*(unsigned __int8 *)(Peak + 56) == a2)
      break;
    if (++v4 == 4)
      return;
  }
  v6 = Peak;
  v7 = *((double *)this + 41);
  if (*(double *)(Peak + 24) - *(double *)(Peak + 8) > v7)
  {
    v8 = (char *)this + 264;
    do
      GEOLocalPeak::tighten(v6, (uint64_t)v8);
    while (*(double *)(v6 + 24) - *(double *)(v6 + 8) > v7);
  }
}

void GEOLocalPeak::tighten(uint64_t a1, uint64_t a2)
{
  double v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;

  v4 = *(double *)(a1 + 8);
  v5 = (double *)(a1 + 16);
  v6 = *(double *)(a1 + 16);
  v7 = *(double *)(a1 + 24);
  GEOLocalPeak::getY(a1, *(_QWORD *)(a2 + 24), 0);
  v9 = v8;
  GEOLocalPeak::getY(a1, *(_QWORD *)(a2 + 24), 1);
  v11 = v10;
  GEOLocalPeak::getY(a1, *(_QWORD *)(a2 + 24), 2);
  v13 = (v6 + v7) * (v9 - v11) / ((v4 - v6) * (v7 - v4)) - (v4 + v6) * (v12 - v11) / ((v7 - v6) * (v7 - v4));
  v14 = (v12 - v11 - v13 * (v7 - v6)) / ((v6 + v7) * (v7 - v6));
  v15 = -v13 / (v14 + v14);
  v16 = (v7 - v4) * 0.05;
  v17 = v4 + v16;
  if (v15 >= v4 + v16)
    v17 = v15;
  if (v7 - v16 >= v17)
    v18 = v17;
  else
    v18 = v7 - v16;
  if (vabdd_f64(v6, v18) < v16)
  {
    if (v6 - v4 <= v7 - v6)
      v19 = (v7 - v4) * 0.05;
    else
      v19 = -v16;
    v18 = v6 + v19;
  }
  v20 = *(double *)(a1 + 16);
  GEOLocalPeak::getY(a1, *(_QWORD *)(a2 + 24), 1);
  v27 = v18;
  v22 = *(_QWORD *)(a2 + 24);
  if (!v22)
    std::__throw_bad_function_call[abi:ne180100]();
  v23 = v21;
  v24 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v22 + 48))(v22, &v27);
  if (v24 >= v23 == (*(_BYTE *)(a1 + 56) == 0))
  {
    v26 = 2 * (v20 <= v18);
    v5 = (double *)(a1 + 16 * (v20 <= v18) + 8);
  }
  else
  {
    v25 = a1 + 16 * (v20 > v18);
    *(double *)(v25 + 8) = v20;
    *(double *)(v25 + 32) = v23;
    v26 = 1;
  }
  *v5 = v18;
  *(double *)(a1 + 8 * v26 + 32) = v24;
}

double std::__function::__func<GEORiseTransitSet::GEORiseTransitSet(GEOLocationCoordinate2D const&,double const&,double const&,double const&,BOOL const&)::$_0,std::allocator<GEORiseTransitSet::GEORiseTransitSet(GEOLocationCoordinate2D const&,double const&,double const&,double const&,BOOL const&)::$_0>,double ()(double)>::operator()(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v2 = a1[2];
  v3 = a1[3];
  v4 = *a2 * a1[1];
  v18 = 0;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  v11 = 0u;
  v10 = 0u;
  v9 = 0u;
  v8 = 0u;
  v7 = v4;
  geo_getSunPosition((const GEODayCache *)&v7, v2, v3);
  return v5;
}

double geo_getSunPosition(const GEODayCache *this, double a2, double a3)
{
  double v6;
  double v7;
  double v8;
  CAACoordinateTransformation *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  CAACoordinateTransformation *v15;
  double v16;
  double v17;
  double v18;
  double v19;

  if (*((_BYTE *)this + 88))
  {
    v6 = *((double *)this + 10);
  }
  else
  {
    GEODayCache::SunApparentEclipticLongitude_impl(this);
    v6 = v7;
    *((double *)this + 10) = v7;
    *((_BYTE *)this + 88) = 1;
  }
  if (*((_BYTE *)this + 104))
  {
    v8 = *((double *)this + 12);
  }
  else
  {
    v8 = GEODayCache::SunGeometricFK5EclipticLatitude_impl(this);
    *((double *)this + 12) = v8;
    *((_BYTE *)this + 104) = 1;
  }
  GEODayCache::EarthRadiusVector(this);
  v11 = v10;
  if (*((_BYTE *)this + 168))
  {
    v12 = *((double *)this + 20);
  }
  else
  {
    v12 = GEODayCache::NutationTrueObliquityOfEcliptic_impl(this);
    *((double *)this + 20) = v12;
    *((_BYTE *)this + 168) = 1;
  }
  v13 = CAACoordinateTransformation::Ecliptic2Equatorial(v9, v6, v8, v12);
  v16 = GEODayCache::ParallaxEquatorial2Topocentric(this, v13, v14, v11, a3, a2, 0.0);
  v18 = v17;
  if (*((_BYTE *)this + 136))
  {
    v19 = *((double *)this + 16);
  }
  else
  {
    GEODayCache::SiderealApparentGreenwichSiderealTime_impl(this);
    *((double *)this + 16) = v19;
    *((_BYTE *)this + 136) = 1;
  }
  return CAACoordinateTransformation::Equatorial2Horizontal(v15, v19 + a3 / -15.0 - v16, v18, a2);
}

void GEODayCache::EarthRadiusVector(GEODayCache *this)
{
  if (!*((_BYTE *)this + 152))
  {
    *((long double *)this + 18) = CAAEarth::RadiusVector((CAAEarth *)*((unsigned __int8 *)this + 8), *(double *)this);
    *((_BYTE *)this + 152) = 1;
  }
}

long double CAAEarth::RadiusVector(CAAEarth *this, double a2)
{
  double v2;
  uint64_t *v3;
  double v4;
  double v5;
  uint64_t *v6;
  double v7;
  double v8;
  double v9;
  uint64_t *v10;
  double v11;
  double v12;
  uint64_t *v13;
  double v14;

  v2 = (a2 + -2451545.0) / 365250.0;
  v3 = &g_R0EarthCoefficients;
  v4 = 0.0;
  do
  {
    v5 = *(double *)v3;
    v4 = v4 + v5 * cos(*((double *)v3 + 1) + *((double *)v3 + 2) * v2);
    v3 += 3;
  }
  while (v3 != &g_R1EarthCoefficients);
  v6 = &g_R1EarthCoefficients;
  v7 = 0.0;
  do
  {
    v8 = *(double *)v6;
    v7 = v7 + v8 * cos(*((double *)v6 + 1) + *((double *)v6 + 2) * v2);
    v6 += 3;
  }
  while (v6 != &g_R2EarthCoefficients);
  v9 = 0.0;
  v10 = &g_R2EarthCoefficients;
  do
  {
    v11 = *(double *)v10;
    v9 = v9 + v11 * cos(*((double *)v10 + 1) + *((double *)v10 + 2) * v2);
    v10 += 3;
  }
  while (v10 != &g_R3EarthCoefficients);
  v12 = 0.0;
  v13 = &g_R3EarthCoefficients;
  do
  {
    v14 = *(double *)v13;
    v12 = v12 + v14 * cos(*((double *)v13 + 1) + *((double *)v13 + 2) * v2);
    v13 += 3;
  }
  while (v13 != &qword_189C69128);
  return (v4
        + v7 * v2
        + v9 * (v2 * v2)
        + v12 * (v2 * (v2 * v2))
        + (cos(v2 * 6283.08 + 2.56) * 4.0 + 0.0) * (v2 * (v2 * (v2 * v2))))
       / 100000000.0;
}

long double GEODayCache::SunGeometricFK5EclipticLongitude_impl(GEODayCache *this)
{
  double v2;
  double v3;
  long double v4;
  __double2 v5;

  GEODayCache::SunGeometricEclipticLongitude(this);
  v3 = v2;
  v4 = GEODayCache::SunGeometricEclipticLatitude(this) * 0.0174532925;
  v5 = __sincos_stret((v3+ (*(double *)this + -2451545.0) / 36525.0 * -1.397+ (*(double *)this + -2451545.0) / 36525.0 * -0.00031 * ((*(double *)this + -2451545.0) / 36525.0))* 0.0174532925);
  return v3 + ((v5.__cosval + v5.__sinval) * 0.03916 * tan(v4) + -0.09033) / 3600.0 + 0.0;
}

double GEODayCache::SunGeometricFK5EclipticLatitude_impl(GEODayCache *this)
{
  double v2;
  double v3;
  double v4;
  __double2 v5;

  GEODayCache::SunGeometricEclipticLongitude(this);
  v3 = v2;
  v4 = GEODayCache::SunGeometricEclipticLatitude(this);
  v5 = __sincos_stret((v3+ (*(double *)this + -2451545.0) / 36525.0 * -1.397+ (*(double *)this + -2451545.0) / 36525.0 * -0.00031 * ((*(double *)this + -2451545.0) / 36525.0))* 0.0174532925);
  return v4 + (v5.__cosval - v5.__sinval) * 0.03916 / 3600.0 + 0.0;
}

void GEODayCache::SunGeometricEclipticLongitude(GEODayCache *this)
{
  double v2;
  double v3;

  if (!*((_BYTE *)this + 40))
  {
    CAAEarth::EclipticLongitude((CAAEarth *)*((unsigned __int8 *)this + 8), *(double *)this);
    v3 = fmod(v2 + 180.0, 360.0);
    if (v3 < 0.0)
      v3 = v3 + 360.0;
    *((double *)this + 4) = v3;
    *((_BYTE *)this + 40) = 1;
  }
}

double GEODayCache::SunGeometricEclipticLatitude(GEODayCache *this)
{
  double result;
  double v3;

  if (*((_BYTE *)this + 56))
    return *((double *)this + 6);
  CAAEarth::EclipticLatitude((CAAEarth *)*((unsigned __int8 *)this + 8), *(double *)this);
  result = -v3;
  *((double *)this + 6) = result;
  *((_BYTE *)this + 56) = 1;
  return result;
}

void CAAEarth::EclipticLatitude(CAAEarth *this, double a2)
{
  double v2;
  uint64_t *v3;
  double v4;
  double v5;
  double v6;
  uint64_t *v7;
  double v8;

  v2 = (a2 + -2451545.0) / 365250.0;
  v3 = &g_B0EarthCoefficients;
  v4 = 0.0;
  do
  {
    v5 = *(double *)v3;
    v4 = v4 + v5 * cos(*((double *)v3 + 1) + *((double *)v3 + 2) * v2);
    v3 += 3;
  }
  while (v3 != &g_B1EarthCoefficients);
  v6 = 0.0;
  v7 = &g_B1EarthCoefficients;
  do
  {
    v8 = *(double *)v7;
    v6 = v6 + v8 * cos(*((double *)v7 + 1) + *((double *)v7 + 2) * v2);
    v7 += 3;
  }
  while (v7 != &g_R0EarthCoefficients);
  fmod((v4 + v6 * v2) / 100000000.0 * 57.2957795, 360.0);
}

void CAAEarth::EclipticLongitude(CAAEarth *this, double a2)
{
  double v2;
  uint64_t *v3;
  double v4;
  double v5;
  uint64_t *v6;
  double v7;
  double v8;
  uint64_t *v9;
  double v10;
  double v11;
  double v12;
  uint64_t *v13;
  double v14;
  double v15;
  uint64_t *v16;
  double v17;
  long double v18;

  v2 = (a2 + -2451545.0) / 365250.0;
  v3 = &g_L0EarthCoefficients;
  v4 = 0.0;
  do
  {
    v5 = *(double *)v3;
    v4 = v4 + v5 * cos(*((double *)v3 + 1) + *((double *)v3 + 2) * v2);
    v3 += 3;
  }
  while (v3 != &g_L1EarthCoefficients);
  v6 = &g_L1EarthCoefficients;
  v7 = 0.0;
  do
  {
    v8 = *(double *)v6;
    v7 = v7 + v8 * cos(*((double *)v6 + 1) + *((double *)v6 + 2) * v2);
    v6 += 3;
  }
  while (v6 != &g_L2EarthCoefficients);
  v9 = &g_L2EarthCoefficients;
  v10 = 0.0;
  do
  {
    v11 = *(double *)v9;
    v10 = v10 + v11 * cos(*((double *)v9 + 1) + *((double *)v9 + 2) * v2);
    v9 += 3;
  }
  while (v9 != &g_L3EarthCoefficients);
  v12 = 0.0;
  v13 = &g_L3EarthCoefficients;
  do
  {
    v14 = *(double *)v13;
    v12 = v12 + v14 * cos(*((double *)v13 + 1) + *((double *)v13 + 2) * v2);
    v13 += 3;
  }
  while (v13 != &g_L4EarthCoefficients);
  v15 = 0.0;
  v16 = &g_L4EarthCoefficients;
  do
  {
    v17 = *(double *)v16;
    v15 = v15 + v17 * cos(*((double *)v16 + 1) + *((double *)v16 + 2) * v2);
    v16 += 3;
  }
  while (v16 != &g_B0EarthCoefficients);
  v18 = cos(v2 * 0.0 + 3.14);
  fmod((v4+ v7 * v2+ v10 * (v2 * v2)+ v12 * (v2 * (v2 * v2))+ v15 * (v2 * (v2 * (v2 * v2)))+ (v18 + 0.0) * (v2 * (v2 * (v2 * (v2 * v2)))))/ 100000000.0* 57.2957795, 360.0);
}

void GEODayCache::SunApparentEclipticLongitude_impl(GEODayCache *this)
{
  CAASun *v2;

  if (!*((_BYTE *)this + 72))
  {
    *((long double *)this + 8) = GEODayCache::SunGeometricFK5EclipticLongitude_impl(this);
    *((_BYTE *)this + 72) = 1;
  }
  if (!*((_BYTE *)this + 24))
  {
    *((double *)this + 2) = CAANutation::NutationInLongitude(this, *(double *)this);
    *((_BYTE *)this + 24) = 1;
  }
  GEODayCache::EarthRadiusVector(this);
  if (*((_BYTE *)this + 8))
    CAASun::VariationGeometricEclipticLongitude(v2, *(double *)this);
}

double GEODayCache::ParallaxEquatorial2Topocentric(GEODayCache *this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v11;
  double v12;
  double v13;
  long double v14;
  double v15;
  __double2 v16;
  double v17;
  __double2 v18;
  double v19;
  double v20;
  __double2 v21;
  long double v22;
  double v23;
  __double2 v24;
  double v25;
  double v26;
  long double v27;
  double v28;
  double v29;
  long double v30;

  if (*((_BYTE *)this + 136))
  {
    v11 = *((double *)this + 16);
  }
  else
  {
    GEODayCache::SiderealApparentGreenwichSiderealTime_impl(this);
    v11 = v12;
    *((double *)this + 16) = v12;
    *((_BYTE *)this + 136) = 1;
  }
  v13 = a6 * 0.0174532925;
  v14 = tan(v13);
  v15 = atan(v14 * 0.99664719);
  v16 = __sincos_stret(v15);
  v17 = a7 / 6378140.0;
  v18 = __sincos_stret(v13);
  v19 = v16.__cosval + v17 * v18.__cosval;
  v20 = v17 * v18.__sinval + v16.__sinval * 0.99664719;
  v21 = __sincos_stret(a3 * 0.0174532925);
  v22 = asin(0.0000426345151 / a4);
  v23 = sin(v22);
  v24 = __sincos_stret((v11 + a5 / -15.0 - a2) * 0.261799388);
  v25 = -(v19 * v23);
  v26 = v21.__cosval + v25 * v24.__cosval;
  v27 = atan2(v24.__sinval * v25, v26);
  v28 = fmod(v27 * 3.81971863 + a2, 24.0);
  if (v28 >= 0.0)
    v29 = v28;
  else
    v29 = v28 + 24.0;
  v30 = cos(v27);
  atan2((v21.__sinval - v20 * v23) * v30, v26);
  return v29;
}

void GEODayCache::SiderealApparentGreenwichSiderealTime_impl(GEODayCache *this)
{
  double v2;
  double v3;
  CAANutation *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  long double v12;

  v2 = *(double *)this;
  if (*((_BYTE *)this + 120))
  {
    v3 = *((double *)this + 14);
  }
  else
  {
    v3 = CAANutation::NutationInObliquity(this, *(double *)this);
    *((double *)this + 14) = v3;
    *((_BYTE *)this + 120) = 1;
  }
  CAASidereal::MeanGreenwichSiderealTime(this, v2);
  v6 = v5;
  if (*((_BYTE *)this + 24))
  {
    v7 = *((double *)this + 2);
  }
  else
  {
    v7 = CAANutation::NutationInLongitude(v4, *(double *)this);
    *((double *)this + 2) = v7;
    *((_BYTE *)this + 24) = 1;
  }
  v8 = (v2 + -2451545.0) / 3652500.0;
  v9 = v8 * (v8 * v8);
  v10 = v8 * (v8 * v9);
  v11 = v8 * (v8 * v10);
  v12 = cos((v8 * -1.30025833+ 23.4392911+ v8 * v8 * -0.000430555556+ v9 * 0.555347222+ v8 * v9 * -0.0142722222+ v10 * -0.0693527778+ v8 * v10 * -0.0108472222+ v11 * 0.00197777778+ v8 * v11 * 0.00774166667+ v8 * (v8 * v11) * 0.00160833333+ v8 * (v8 * (v8 * v11)) * 0.000680555556+ v3 / 3600.0)* 0.0174532925);
  fmod(v6 + v12 * v7 / 54000.0, 24.0);
}

double GEODayCache::NutationTrueObliquityOfEcliptic_impl(GEODayCache *this)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;

  v2 = *(double *)this;
  if (*((_BYTE *)this + 120))
  {
    v3 = *((double *)this + 14);
  }
  else
  {
    v3 = CAANutation::NutationInObliquity(this, *(double *)this);
    *((double *)this + 14) = v3;
    *((_BYTE *)this + 120) = 1;
  }
  v4 = (v2 + -2451545.0) / 3652500.0;
  v5 = v4 * (v4 * v4);
  v6 = v4 * (v4 * v5);
  v7 = v4 * (v4 * v6);
  return v4 * -1.30025833
       + 23.4392911
       + v4 * v4 * -0.000430555556
       + v5 * 0.555347222
       + v4 * v5 * -0.0142722222
       + v6 * -0.0693527778
       + v4 * v6 * -0.0108472222
       + v7 * 0.00197777778
       + v4 * v7 * 0.00774166667
       + v4 * (v4 * v7) * 0.00160833333
       + v4 * (v4 * (v4 * v7)) * 0.000680555556
       + v3 / 3600.0
       + 0.0;
}

uint64_t GEOFunctionInterceptor::getPeak(GEOFunctionInterceptor *this, int a2)
{
  unsigned int v2;
  int v4;
  _OWORD *v5;
  __int128 v6;
  signed int v7;
  _OWORD v9[2];
  _OWORD v10[2];

  v2 = a2;
  v4 = *((_DWORD *)this + 64);
  if (v4 <= a2)
  {
    while (v4 < 4)
    {
      GEOLocalPeak::step((uint64_t)v9, (uint64_t)this + 64 * (uint64_t)v4 - 64, (uint64_t)this + 264, 1);
      v5 = (_OWORD *)((char *)this + 64 * (uint64_t)*((int *)this + 64));
      v6 = v9[1];
      *v5 = v9[0];
      v5[1] = v6;
      v5[2] = v10[0];
      *(_OWORD *)((char *)v5 + 41) = *(_OWORD *)((char *)v10 + 9);
      v7 = *((_DWORD *)this + 64);
      v4 = v7 + 1;
      *((_DWORD *)this + 64) = v7 + 1;
      if (v7 >= (int)v2)
        return (uint64_t)this + 64 * (unint64_t)v2;
    }
    v2 = v4 - 1;
  }
  return (uint64_t)this + 64 * (unint64_t)v2;
}

void sub_1885FDEFC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x18D76437C](v2, 0x1020C40CBE26B1DLL);

  _Unwind_Resume(a1);
}

uint64_t GEORiseTransitSet::GEORiseTransitSet(uint64_t a1, double *a2, _QWORD *a3, _QWORD *a4, double *a5, _BYTE *a6)
{
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _BYTE __src[264];
  _QWORD v21[4];
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _BYTE v25[24];
  _BYTE *v26;
  __int128 v27;
  uint64_t v28;

  v7 = 0;
  v28 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = *a4;
  v8 = *a2;
  *(double *)(a1 + 8) = *a2;
  v9 = -a2[1];
  *(double *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = *a3;
  *(double *)(a1 + 32) = *a5 / 86400.0;
  if (*a6)
    v10 = 1.0;
  else
    v10 = -1.0;
  *(double *)(a1 + 40) = v10;
  v11 = (void *)(a1 + 48);
  do
  {
    v12 = a1 + v7;
    *(_WORD *)(v12 + 48) = 0;
    *(_BYTE *)(v12 + 50) = 0;
    *(_OWORD *)(v12 + 56) = 0uLL;
    *(_OWORD *)(v12 + 72) = 0uLL;
    *(_OWORD *)(v12 + 88) = 0uLL;
    v7 += 64;
    *(_BYTE *)(v12 + 104) = 0;
  }
  while (v7 != 256);
  *(_QWORD *)(a1 + 312) = &off_1E1BFA288;
  *(_QWORD *)(a1 + 320) = tempFunc;
  *(_QWORD *)(a1 + 336) = a1 + 312;
  *(_QWORD *)(a1 + 344) = 0x400921FB54442D18;
  *(_QWORD *)(a1 + 352) = 0x3E45798EE2308C3ALL;
  *(_OWORD *)(a1 + 416) = xmmword_189CD7E38;
  *(_OWORD *)(a1 + 432) = unk_189CD7E48;
  *(_OWORD *)(a1 + 448) = xmmword_189CD7E58;
  *(_OWORD *)(a1 + 384) = xmmword_189CD7E18;
  *(_OWORD *)(a1 + 400) = unk_189CD7E28;
  v13 = (char *)operator new(0x20uLL);
  *(_QWORD *)v13 = &off_1E1BFA5F8;
  *((double *)v13 + 1) = v10;
  *((double *)v13 + 2) = v8;
  *((double *)v13 + 3) = v9;
  v14 = (char *)operator new(0x20uLL);
  *(_QWORD *)v14 = &off_1E1BFA5F8;
  *(_OWORD *)(v14 + 8) = *(_OWORD *)(v13 + 8);
  *((_QWORD *)v14 + 3) = *((_QWORD *)v13 + 3);
  v26 = v14;
  v27 = xmmword_189CD7DF0;
  operator delete(v13);
  GEOFunctionInterceptor::GEOFunctionInterceptor((uint64_t)__src, (uint64_t)v25, v10 * *(double *)(a1 + 24), *(double *)(a1 + 32));
  memcpy(v11, __src, 0x104uLL);
  std::__function::__value_func<double ()(double)>::operator=[abi:ne180100]((_QWORD *)(a1 + 312), (uint64_t)v21);
  *(_OWORD *)(a1 + 344) = v22;
  v15 = (_QWORD *)v21[3];
  *(_QWORD *)(a1 + 376) = v24;
  *(_OWORD *)(a1 + 360) = v23;
  if (v15 == v21)
  {
    v16 = 4;
    v15 = v21;
  }
  else
  {
    if (!v15)
      goto LABEL_11;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_11:
  v17 = v26;
  if (v26 == v25)
  {
    v18 = 4;
    v17 = v25;
    goto LABEL_15;
  }
  if (v26)
  {
    v18 = 5;
LABEL_15:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  return a1;
}

void sub_1885FE1AC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<GEORiseTransitSet::GEORiseTransitSet(GEOLocationCoordinate2D const&,double const&,double const&,double const&,BOOL const&)::$_0,std::allocator<GEORiseTransitSet::GEORiseTransitSet(GEOLocationCoordinate2D const&,double const&,double const&,double const&,BOOL const&)::$_0>,double ()(double)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E1BFA5F8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

uint64_t std::__function::__func<double (*)(double),std::allocator<double (*)(double)>,double ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E1BFA288;
  a2[1] = v2;
  return result;
}

uint64_t GEOFunctionInterceptor::GEOFunctionInterceptor(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  int v22;
  int v23;
  double v24;
  _BOOL4 v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  BOOL v34;
  double v35;
  double v36;
  uint64_t v37;
  unsigned int v38;
  __int128 v39;
  char v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  double *v44;
  double *v45;
  double *v46;
  double v47;
  double v48;
  __int128 *v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  __int128 *v53;
  int v54;
  __int128 *v55;
  __int128 v56;
  int v58;
  double v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[2];
  __int128 v63;
  __int128 v64;
  _BYTE v65[25];
  _QWORD v66[3];
  _QWORD v67[2];
  uint64_t v68;

  v8 = 0;
  v67[0] = *MEMORY[0x1E0C80C00];
  do
  {
    v9 = a1 + v8;
    *(_WORD *)v9 = 0;
    *(_BYTE *)(v9 + 2) = 0;
    *(_OWORD *)(v9 + 8) = 0uLL;
    *(_OWORD *)(v9 + 24) = 0uLL;
    *(_OWORD *)(v9 + 40) = 0uLL;
    v8 += 64;
    *(_BYTE *)(v9 + 56) = 0;
  }
  while (v8 != 256);
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](a1 + 264, a2);
  v10 = 0;
  *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 32);
  *(double *)(a1 + 312) = a3;
  *(double *)(a1 + 328) = a4;
  do
  {
    v11 = (char *)&v63 + v10;
    *(_WORD *)v11 = 0;
    v11[2] = 0;
    *(_OWORD *)(v11 + 8) = 0uLL;
    *(_OWORD *)(v11 + 24) = 0uLL;
    *(_OWORD *)(v11 + 40) = 0uLL;
    v10 += 64;
    v11[56] = 0;
  }
  while (v10 != 256);
  *(double *)&v60 = a3;
  v12 = *(_QWORD *)(a1 + 288);
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  v13 = (*(double (**)(uint64_t, __int128 *))(*(_QWORD *)v12 + 48))(v12, &v60);
  v14 = a3 + (*(double *)(a1 + 296) - *(double *)(a1 + 304)) * 0.25;
  *(double *)&v60 = v14;
  v15 = *(_QWORD *)(a1 + 288);
  if (!v15)
    std::__throw_bad_function_call[abi:ne180100]();
  v16 = (*(double (**)(uint64_t, __int128 *))(*(_QWORD *)v15 + 48))(v15, &v60);
  *(double *)(a1 + 320) = v13;
  *(double *)&v60 = a3;
  *((double *)&v60 + 1) = v14;
  *(double *)v66 = v13;
  *(double *)&v66[1] = v16;
  v17 = v14 - a3;
  v18 = *(double *)(a1 + 296);
  v19 = *(double *)(a1 + 304);
  v20 = a3 + (v14 - a3) * 2.0;
  *(double *)&v61 = v20;
  v59 = v20;
  v21 = *(_QWORD *)(a1 + 288);
  if (!v21)
LABEL_44:
    std::__throw_bad_function_call[abi:ne180100]();
  v22 = (int)((v18 + v19) / fabs(v17)) + 2;
  if (v22 <= 2)
    v23 = 2;
  else
    v23 = v22;
  (*(void (**)(uint64_t, double *))(*(_QWORD *)v21 + 48))(v21, &v59);
  *(double *)&v66[2] = v24;
  v25 = v24 > v16;
  if (v16 > v13 != v25)
  {
    v26 = 0;
    v27 = 2;
  }
  else
  {
    if (v22 < 3)
    {
LABEL_18:
      v34 = v24 > v13;
      v16 = v24;
      v35 = v24;
      v14 = v20;
      v36 = v20;
      v37 = a1 + 264;
      goto LABEL_26;
    }
    v28 = 0;
    v58 = v23 - 2;
    v29 = 4;
    v30 = 3;
    v31 = 5;
    v32 = 3;
    while (1)
    {
      v20 = a3 + (double)((int)v28 + 3) * v17;
      *((double *)&v61 + v28 + -3 * (v30 / 3) + 1) = v20;
      v59 = v20;
      v33 = *(_QWORD *)(a1 + 288);
      if (!v33)
        goto LABEL_44;
      v24 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v33 + 48))(v33, &v59);
      *(double *)&v67[v28 + -3 * (v30 / 3)] = v24;
      v16 = *((double *)&v68 + v28 + -3 * (v31 / 3));
      if (((v25 ^ (v24 > v16)) & 1) != 0)
        break;
      ++v29;
      ++v28;
      ++v32;
      ++v30;
      ++v31;
      v25 = v24 > v16;
      if (v58 == (_DWORD)v28)
        goto LABEL_18;
    }
    v14 = *((double *)&v60 + v28 + -3 * (v31 / 3) + 5);
    v26 = -3 * (v29 / 3) + v28 + 4;
    v27 = -3 * (v32 / 3) + v28 + 3;
  }
  v37 = a1 + 264;
  if (v17 <= 0.0)
    v38 = v27;
  else
    v38 = v26;
  if (v17 > 0.0)
    v26 = v27;
  v36 = *((double *)&v60 + v38);
  v35 = *(double *)&v66[v38];
  v20 = *((double *)&v60 + v26);
  v24 = *(double *)&v66[v26];
  v34 = v35 < v16;
LABEL_26:
  LOWORD(v63) = 257;
  BYTE2(v63) = 1;
  *((double *)&v63 + 1) = v36;
  *(double *)&v64 = v14;
  *((double *)&v64 + 1) = v20;
  *(double *)v65 = v35;
  *(double *)&v65[8] = v16;
  *(double *)&v65[16] = v24;
  v65[24] = v34;
  if (v36 == v20)
  {
    v39 = v64;
    *(_OWORD *)(a1 + 64) = v63;
    *(_OWORD *)(a1 + 80) = v39;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)v65;
    *(_OWORD *)(a1 + 105) = *(_OWORD *)&v65[9];
    v40 = *(_BYTE *)(a1 + 56) ^ 1;
    *(_WORD *)a1 = 257;
    *(_BYTE *)(a1 + 2) = 1;
    *(double *)(a1 + 8) = a3;
    *(double *)(a1 + 16) = a3;
    *(double *)(a1 + 24) = a3;
    *(double *)(a1 + 32) = v13;
    *(double *)(a1 + 40) = v13;
    *(double *)(a1 + 48) = v13;
    *(_BYTE *)(a1 + 56) = v40;
    *(_DWORD *)(a1 + 256) = 2;
  }
  else
  {
    v41 = 1;
    v42 = 8;
LABEL_29:
    v43 = (v41 - 1) & 3;
    v44 = (double *)&v65[64 * v43 - 8];
    v45 = (double *)(&v63 + 4 * v43);
    v47 = v45[1];
    v46 = v45 + 1;
    v48 = v47;
    do
    {
      if (v48 > a3)
      {
LABEL_34:
        GEOLocalPeak::step((uint64_t)&v60, (uint64_t)(&v63 + 4 * v43), v37, 0);
        v49 = &v63 + 4 * (unint64_t)(v41 & 3);
        v50 = v61;
        *v49 = v60;
        v49[1] = v50;
        v49[2] = v62[0];
        *(__int128 *)((char *)v49 + 41) = *(_OWORD *)((char *)v62 + 9);
        ++v41;
        ++v42;
        goto LABEL_29;
      }
      if (*v44 <= a3)
        goto LABEL_35;
      GEOLocalPeak::tighten((uint64_t)(&v63 + 4 * v43), v37);
      v48 = *v46;
    }
    while (*v44 - *v46 > a4);
    if (*((double *)&v63 + 8 * v43 + 2) > a3)
      goto LABEL_34;
LABEL_35:
    v51 = 0;
    if (v41 >= 4)
      v52 = 4;
    else
      v52 = v41;
    *(_DWORD *)(a1 + 256) = v52;
    v53 = (__int128 *)a1;
    do
    {
      if (v42 <= 0)
        v54 = -(-v42 & 3);
      else
        v54 = v42 & 3;
      v55 = &v63 + 4 * (uint64_t)v54;
      v56 = v55[1];
      *v53 = *v55;
      v53[1] = v56;
      v53[2] = v55[2];
      *(__int128 *)((char *)v53 + 41) = *(__int128 *)((char *)v55 + 41);
      ++v51;
      v53 += 4;
      --v42;
    }
    while (v51 < *(int *)(a1 + 256));
  }
  return a1;
}

void sub_1885FE7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD *a9)
{
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;

  v11 = *(_QWORD **)(v9 + 288);
  if (v11 == a9)
  {
    v12 = 4;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
    a9 = *(_QWORD **)(v9 + 288);
  }
  (*(void (**)(void))(*a9 + 8 * v12))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

double GEOLocalPeak::step(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double i;
  double v13;
  double v14;
  double result;
  double v16;
  char v17;

  v7 = *(double *)(a3 + 32);
  v8 = *(double *)(a3 + 40) * 0.5 / v7;
  v9 = v8 * -2.0 + v7 * 0.25;
  v10 = *(double *)(a2 + 24);
  for (i = *(double *)(a2 + 8); v10 - i > v9; i = *(double *)(a2 + 8))
  {
    GEOLocalPeak::tighten(a2, a3);
    v10 = *(double *)(a2 + 24);
  }
  v13 = -0.5;
  if (a4)
    v13 = 0.5;
  v14 = v13 * v7;
  result = v8 + v14 + v10;
  v16 = *(double *)(a2 + 16);
  v17 = *(_BYTE *)(a2 + 56);
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  *(double *)(a1 + 8) = v14 + i - v8;
  *(double *)(a1 + 16) = v14 + v16;
  *(double *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = v17 ^ 1;
  return result;
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleGlobe()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_ShelbyvilleGlobe, (uint64_t)off_1EDF4AF98);
}

uint64_t GEOTileKeyMake(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  __int128 v9;

  *(_QWORD *)((char *)&v9 + 1) = (a1 << 46) | ((unint64_t)(a3 & 0x3F) << 40);
  LOBYTE(v9) = a7 & 0x7F | (a8 << 7);
  return v9;
}

uint64_t geo::codec::decodePointVertices(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t VarUint32;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int32x2_t v26;
  uint64_t v27;
  float32x2_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  float v53;
  uint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;

  v2 = geo::codec::Allocator::instance((geo::codec::Allocator *)a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 24))(v2, 1, 72);
  v60 = 0;
  if (!v3)
    return v3;
  VarUint32 = geo::codec::chapterReadVarUint32((_QWORD *)a1, (unsigned int *)&v60 + 1);
  if ((_DWORD)VarUint32)
  {
    VarUint32 = geo::codec::chapterReadVarUint32((_QWORD *)a1, (unsigned int *)&v60);
    if ((_DWORD)VarUint32)
    {
      v6 = *(_QWORD *)(a1 + 48);
      v5 = *(_QWORD *)(a1 + 56);
      v7 = v5 - v6;
      if (v5 < v6)
      {
        v8 = *(_QWORD *)(a1 + 24);
        v9 = 8 * *(_QWORD *)(a1 + 16);
        if (v8 + 6 > v9)
          goto LABEL_23;
LABEL_8:
        LODWORD(v11) = 0;
        v12 = *(_QWORD *)(a1 + 8);
        v13 = 6;
        do
        {
          v14 = 8 - (v8 & 7);
          if (v13 < v14)
            v14 = v13;
          v11 = (*(unsigned __int8 *)(v12 + (v8 >> 3)) >> (8 - (v8 & 7) - v14)) & ~(-1 << v14) | ((_DWORD)v11 << v14);
          v8 += v14;
          *(_QWORD *)(a1 + 24) = v8;
          v13 -= v14;
        }
        while (v13);
        if (v8 + 6 <= v9)
        {
          v15 = 0;
          v16 = 6;
          do
          {
            v17 = 8 - (v8 & 7);
            if (v16 < v17)
              v17 = v16;
            v15 = (*(unsigned __int8 *)(v12 + (v8 >> 3)) >> (8 - (v8 & 7) - v17)) & ~(-1 << v17) | (v15 << v17);
            v8 += v17;
            *(_QWORD *)(a1 + 24) = v8;
            v16 -= v17;
          }
          while (v16);
          if (v8 + 4 <= v9)
          {
            v18 = 0;
            v19 = 4;
            do
            {
              VarUint32 = 8 - (v8 & 7);
              if (v19 < VarUint32)
                VarUint32 = v19;
              v18 = (*(unsigned __int8 *)(v12 + (v8 >> 3)) >> (8 - (v8 & 7) - VarUint32)) & ~(-1 << VarUint32) | (v18 << VarUint32);
              v8 += VarUint32;
              *(_QWORD *)(a1 + 24) = v8;
              v19 -= VarUint32;
            }
            while (v19);
            if (v8 + 1 <= v9)
            {
              v23 = *(unsigned __int8 *)(v12 + (v8 >> 3));
              *(_QWORD *)(a1 + 24) = v8 + 1;
              *(_BYTE *)v3 = v11;
              v24 = HIDWORD(v60);
              if (!HIDWORD(v60) || !(_DWORD)v60)
                return v3;
              if (!(v60 >> 20)
                && HIDWORD(v60) == (_DWORD)v60
                && !v15
                && !v18
                && ((1 << (~(_BYTE)v8 & 7)) & v23) == 0)
              {
                v25 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
                VarUint32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, 8 * v24, 8);
                *(_QWORD *)(v3 + 8) = VarUint32;
                *(_QWORD *)(v3 + 16) = v24;
                if (VarUint32)
                {
                  v27 = 0;
                  *(float *)v26.i32 = (float)~(-1 << v11);
                  __asm { FMOV            V1.2S, #1.0 }
                  v33 = vdiv_f32(_D1, (float32x2_t)vdup_lane_s32(v26, 0));
                  while (1)
                  {
                    LODWORD(v58) = 0;
                    v59 = 0;
                    VarUint32 = BitstreamUnpack((uint64_t *)(a1 + 8), (int *)&v58, v11);
                    if (!(_DWORD)VarUint32)
                      break;
                    VarUint32 = BitstreamUnpack((uint64_t *)(a1 + 8), (int *)&v59, v11);
                    if ((VarUint32 & 1) == 0)
                      break;
                    *(float32x2_t *)(*(_QWORD *)(v3 + 8) + v27) = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v59, v58)), v33);
                    v27 += 8;
                    if (8 * v24 == v27)
                    {
                      v34 = *(_QWORD *)(a1 + 48) + (*(_QWORD *)(a1 + 24) >> 3);
                      if ((*(_QWORD *)(a1 + 24) & 7) != 0)
                        ++v34;
                      *(_QWORD *)(a1 + 48) = v34;
                      *(_BYTE *)(a1 + 32) = 0;
                      if (*(_DWORD *)(a1 + 64) >= 0x44u)
                      {
                        v35 = v34 + 1;
                        if ((unint64_t)(v34 + 1) > *(_QWORD *)(a1 + 56))
                          goto LABEL_23;
                        v36 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + v34);
                        *(_QWORD *)(a1 + 48) = v35;
                        if (v36)
                        {
                          v37 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
                          VarUint32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, 4 * v24, 8);
                          if (VarUint32)
                          {
                            v38 = (float *)VarUint32;
                            *(_QWORD *)(v3 + 24) = VarUint32;
                            v39 = *(_QWORD *)(a1 + 48);
                            if ((unint64_t)(v39 + 8) <= *(_QWORD *)(a1 + 56))
                            {
                              v40 = v24;
                              v41 = *(double *)(*(_QWORD *)(a1 + 40) + v39);
                              *(_QWORD *)(a1 + 48) = v39 + 8;
                              v58 = 0;
                              VarUint32 = geo::codec::chapterReadVarInt64((_QWORD *)a1, &v58);
                              if ((VarUint32 & 1) != 0)
                              {
                                v43 = *(_QWORD *)(a1 + 48);
                                v42 = *(_QWORD *)(a1 + 56);
                                v44 = v42 - v43;
                                if (v42 >= v43)
                                {
                                  v45 = 0;
                                  *(_BYTE *)(a1 + 32) = 1;
                                  v46 = *(_QWORD *)(a1 + 40) + v43;
                                  *(_QWORD *)(a1 + 16) = v44;
                                  *(_QWORD *)(a1 + 24) = 0;
                                  *(_QWORD *)(a1 + 8) = v46;
                                }
                                else
                                {
                                  v44 = *(_QWORD *)(a1 + 16);
                                  v45 = *(_QWORD *)(a1 + 24);
                                }
                                if (v45 + 1 <= 8 * v44)
                                {
                                  v47 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + (v45 >> 3));
                                  *(_QWORD *)(a1 + 24) = v45 + 1;
                                  if (((v47 >> (~(_BYTE)v45 & 7)) & 1) != 0)
                                    v58 = -v58;
                                  v59 = 0;
                                  v57 = 0;
                                  VarUint32 = BitstreamUnpackBitcount((uint64_t *)(a1 + 8), &v59);
                                  if ((_DWORD)VarUint32)
                                  {
                                    VarUint32 = BitstreamUnpackBitcount((uint64_t *)(a1 + 8), &v57);
                                    if ((_DWORD)VarUint32)
                                    {
                                      v48 = v59;
                                      v49 = v58;
                                      v50 = v57;
                                      while (1)
                                      {
                                        v51 = *(_QWORD *)(a1 + 24);
                                        if (v51 + 1 > 8 * *(_QWORD *)(a1 + 16))
                                          break;
                                        v52 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + (v51 >> 3));
                                        *(_QWORD *)(a1 + 24) = v51 + 1;
                                        if (((v52 >> (~(_BYTE)v51 & 7)) & 1) != 0)
                                        {
                                          v56 = 0;
                                          VarUint32 = BitstreamUnpack((uint64_t *)(a1 + 8), &v56, v48);
                                          if (!(_DWORD)VarUint32)
                                            goto LABEL_23;
                                          v53 = v41 * (double)(v49 + v56);
                                          *v38 = v53;
                                          VarUint32 = BitstreamUnpack((uint64_t *)(a1 + 8), &v55, v50);
                                          if ((VarUint32 & 1) == 0)
                                            goto LABEL_23;
                                        }
                                        else
                                        {
                                          *v38 = 3.4028e38;
                                        }
                                        ++v38;
                                        if (!--v40)
                                        {
                                          v54 = *(_QWORD *)(a1 + 48) + (*(_QWORD *)(a1 + 24) >> 3);
                                          if ((*(_QWORD *)(a1 + 24) & 7) != 0)
                                            ++v54;
                                          *(_QWORD *)(a1 + 48) = v54;
                                          *(_BYTE *)(a1 + 32) = 0;
                                          return v3;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          goto LABEL_23;
                        }
                      }
                      return v3;
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_23;
      }
      v8 = 0;
      *(_BYTE *)(a1 + 32) = 1;
      v10 = *(_QWORD *)(a1 + 40) + v6;
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 8) = v10;
      v9 = 8 * v7;
      if (8 * v7 >= 6)
        goto LABEL_8;
    }
  }
LABEL_23:
  if (*(_QWORD *)(v3 + 8))
  {
    v20 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
    VarUint32 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v20 + 40))(v20, *(_QWORD *)(v3 + 8), 0);
  }
  v21 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v21 + 40))(v21, v3, 0);
  return 0;
}

uint64_t geo::codec::_readPoisAddendum(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::chrono::steady_clock::time_point v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  FILE *v17;
  int v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  geo::codec::Allocator *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  std::chrono::steady_clock::time_point v39;
  int v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  geo::codec::Allocator *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _BOOL8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  _BYTE *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  uint64_t *v81;
  _QWORD *v82;
  const void *v83;
  size_t v84;
  unint64_t v85;
  FILE *v86;
  int v87;
  unsigned int v88;
  unint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  float v94;
  float v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  unint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unsigned int v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  const char *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  int v125;
  uint64_t *v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  const char *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  const char *v145;
  uint64_t *__key[2];

  v4 = *a2;
  v5 = a1[1];
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    while (*(_WORD *)(*a1 + 16 * v6) != 144)
    {
      v6 = ++v7;
      if (v5 <= v7)
        goto LABEL_5;
    }
    v8 = geo::codec::chapterAt((uint64_t)a1, v7, 144, v4 + 1912);
    v4 = *a2;
    v141 = "ChapterPointFeaturesAddendum";
    v142 = v4;
    v9 = (std::__shared_weak_count *)a2[1];
    v143 = v9;
    if (!v9)
      goto LABEL_10;
    goto LABEL_8;
  }
LABEL_5:
  v8 = 0;
  v141 = "ChapterPointFeaturesAddendum";
  v142 = v4;
  v9 = (std::__shared_weak_count *)a2[1];
  v143 = v9;
  if (v9)
  {
LABEL_8:
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
LABEL_10:
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v12.__d_.__rep_;
  if (!v8)
    goto LABEL_47;
  v13 = *(_QWORD *)(v8 + 48);
  v14 = *(_QWORD *)(v8 + 56);
  v15 = v14 >= v13;
  v16 = v14 - v13;
  if (!v15)
  {
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = 1169;
LABEL_27:
    v31 = fprintf(v17, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v18);
    v32 = 0;
    v33 = 0;
    goto LABEL_28;
  }
  v19 = (unsigned __int8 *)(*(_QWORD *)(v8 + 40) + v13);
  *(_QWORD *)(v8 + 8) = v19;
  *(_BYTE *)(v8 + 32) = 1;
  *(_QWORD *)(v8 + 16) = v16;
  *(_QWORD *)(v8 + 24) = 0;
  v20 = 8 * v16;
  if (!(8 * v16) || (v21 = *v19, *(_QWORD *)(v8 + 24) = 5, v22 = v21 >> 3, v22 + 6 > v20))
  {
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = 1175;
    goto LABEL_27;
  }
  v23 = 0;
  v24 = v22 + 1;
  v25 = 5;
  do
  {
    v26 = 8 - (v25 & 7);
    if (v24 < v26)
      v26 = v24;
    v23 = (v19[v25 >> 3] >> (8 - (v25 & 7) - v26)) & ~(-1 << v26) | (v23 << v26);
    v25 += v26;
    *(_QWORD *)(v8 + 24) = v25;
    v24 -= v26;
  }
  while (v24);
  *(_DWORD *)(v8 + 64) = v23;
  if (v25 + 5 > v20)
    goto LABEL_26;
  v27 = 0;
  v28 = 5;
  do
  {
    v29 = 8 - (v25 & 7);
    if (v28 < v29)
      v29 = v28;
    v27 = (v19[v25 >> 3] >> (8 - (v25 & 7) - v29)) & ~(-1 << v29) | (v27 << v29);
    v25 += v29;
    *(_QWORD *)(v8 + 24) = v25;
    v28 -= v29;
  }
  while (v28);
  v30 = (v27 + 1);
  if (v25 + v30 > v20)
  {
LABEL_26:
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = 1178;
    goto LABEL_27;
  }
  if (v27 == -1)
    goto LABEL_47;
  v40 = 0;
  do
  {
    v41 = 8 - (v25 & 7);
    if (v30 < v41)
      v41 = v30;
    v40 = (v19[v25 >> 3] >> (8 - (v25 & 7) - v41)) & ~(-1 << v41) | (v40 << v41);
    v25 += v41;
    *(_QWORD *)(v8 + 24) = v25;
    v30 -= v41;
  }
  while (v30);
  if (v40 != 4)
  {
LABEL_47:
    v32 = 1;
    v39.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v145 = "ChapterPointFeaturesAddendum";
    if (!"ChapterPointFeaturesAddendum")
      goto LABEL_49;
LABEL_48:
    __key[0] = (uint64_t *)&v145;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v4 + 1912, (uint64_t *)&v145, (uint64_t)&std::piecewise_construct, __key)+ 4) = (double)((v39.__d_.__rep_ - v12.__d_.__rep_) / 1000) * 0.001;
    goto LABEL_49;
  }
  if (v25 + 5 > v20)
    goto LABEL_46;
  v42 = 0;
  v43 = 5;
  do
  {
    v44 = 8 - (v25 & 7);
    if (v43 < v44)
      v44 = v43;
    v42 = (v19[v25 >> 3] >> (8 - (v25 & 7) - v44)) & ~(-1 << v44) | (v42 << v44);
    v25 += v44;
    *(_QWORD *)(v8 + 24) = v25;
    v43 -= v44;
  }
  while (v43);
  v45 = (v42 + 1);
  if (v25 + v45 > v20)
  {
LABEL_46:
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = 1184;
    goto LABEL_27;
  }
  v50 = 0;
  if (v42 != -1)
  {
    do
    {
      v51 = 8 - (v25 & 7);
      if (v45 < v51)
        v51 = v45;
      v50 = (v19[v25 >> 3] >> (8 - (v25 & 7) - v51)) & ~(-1 << v51) | (v50 << v51);
      v25 += v51;
      *(_QWORD *)(v8 + 24) = v25;
      v45 -= v51;
    }
    while (v45);
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*a2 + 512) - *(_QWORD *)(*a2 + 504)) >> 5) != v50)
  {
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = 1185;
    goto LABEL_27;
  }
  v140 = 0;
  v31 = BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v140, 5uLL);
  if ((v31 & 1) == 0)
  {
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = 1188;
    goto LABEL_27;
  }
  v52 = *(_QWORD *)(v8 + 24);
  v53 = v52 + 1;
  v54 = 8 * *(_QWORD *)(v8 + 16);
  if (v52 + 1 > v54)
  {
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = 1192;
    goto LABEL_27;
  }
  v55 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v52 >> 3));
  *(_QWORD *)(v8 + 24) = v53;
  if (((v55 >> (~(_BYTE)v52 & 7)) & 1) == 0)
  {
    v126 = a2;
    v33 = 0;
    v85 = v52 + 2;
    if (v53 + 1 <= v54)
      goto LABEL_130;
LABEL_111:
    v86 = (FILE *)*MEMORY[0x1E0C80C10];
    v87 = 1293;
    goto LABEL_144;
  }
  v139 = 0;
  if ((BitstreamUnpackVar32((uint64_t *)(v8 + 8), (int *)&v139) & 1) == 0)
  {
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = 1196;
    goto LABEL_27;
  }
  v126 = a2;
  v138 = 0;
  if ((BitstreamUnpackVar32((uint64_t *)(v8 + 8), (int *)&v138) & 1) == 0)
  {
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = 1198;
    goto LABEL_27;
  }
  v56 = (geo::codec::Allocator *)v138;
  v57 = v139;
  v137 = 0;
  if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v137, 5uLL))
  {
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    v18 = 1202;
    goto LABEL_27;
  }
  v136 = 0;
  v58 = BitstreamUnpackVar32((uint64_t *)(v8 + 8), (int *)&v136);
  if ((v58 & 1) == 0)
  {
    v18 = 1204;
LABEL_117:
    v17 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_27;
  }
  v59 = geo::codec::Allocator::instance((geo::codec::Allocator *)v58);
  v60 = v136;
  v33 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v59 + 24))(v59, v136, 4);
  if (!v33)
  {
    v18 = 1206;
    goto LABEL_117;
  }
  v135 = 0;
  if ((_DWORD)v60)
  {
    v61 = 0;
    v62 = v137;
    do
    {
      if (!BitstreamUnpack((uint64_t *)(v8 + 8), &v135, v62))
      {
        v86 = (FILE *)*MEMORY[0x1E0C80C10];
        v87 = 1210;
        goto LABEL_144;
      }
      *(_DWORD *)(v33 + v61) = v135;
      v61 += 4;
    }
    while (4 * v60 != v61);
  }
  v134 = 0;
  if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v134, 5uLL))
  {
    v86 = (FILE *)*MEMORY[0x1E0C80C10];
    v87 = 1215;
    goto LABEL_144;
  }
  v133 = 0;
  if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v133, 5uLL))
  {
    v86 = (FILE *)*MEMORY[0x1E0C80C10];
    v87 = 1217;
    goto LABEL_144;
  }
  v132 = 0;
  if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v132, 5uLL))
  {
    v86 = (FILE *)*MEMORY[0x1E0C80C10];
    v87 = 1219;
    goto LABEL_144;
  }
  v131 = 0;
  v63 = BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v131, 5uLL);
  if (!v63)
  {
    v87 = 1221;
    goto LABEL_143;
  }
  v64 = geo::codec::Allocator::instance((geo::codec::Allocator *)v63);
  v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 24))(v64);
  *(_QWORD *)(*v126 + 1888) = v65;
  if (!v65)
  {
    v87 = 1224;
    goto LABEL_143;
  }
  v145 = 0;
  if ((geo::codec::_makeSpaceForLabels(v56, &v145, v126) & 1) == 0)
  {
    v86 = (FILE *)*MEMORY[0x1E0C80C10];
    v87 = 1227;
    goto LABEL_144;
  }
  v120 = *(_QWORD *)(*v126 + 856);
  v66 = *(_QWORD *)(*v126 + 864);
  v129 = 0;
  v130 = 0;
  v128 = 0;
  v31 = BitstreamUnpackVar32((uint64_t *)(v8 + 8), (int *)&v129);
  if (!(_DWORD)v31)
  {
    v86 = (FILE *)*MEMORY[0x1E0C80C10];
    v87 = 1240;
    goto LABEL_144;
  }
  v121 = v145;
  v111 = v129;
  if ((_DWORD)v129)
  {
    v109 = 0;
    v117 = 0;
    v67 = 0;
    v115 = v66 - v120;
    v114 = v140;
    v113 = v134;
    v112 = v133;
    v123 = v132;
    v116 = v131;
    while (1)
    {
      if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v130 + 1, v114))
      {
        v145 = v121;
        v86 = (FILE *)*MEMORY[0x1E0C80C10];
        v87 = 1242;
        goto LABEL_144;
      }
      v118 = *(_QWORD *)(*v126 + 504);
      v119 = HIDWORD(v130);
      if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*v126 + 512) - v118) >> 5) <= (unint64_t)HIDWORD(v130))
      {
        v145 = v121;
        v86 = (FILE *)*MEMORY[0x1E0C80C10];
        v87 = 1243;
        goto LABEL_144;
      }
      v68 = v118 + 224 * HIDWORD(v130);
      v70 = *(unsigned __int8 *)(v68 + 207);
      v69 = (_BYTE *)(v68 + 207);
      if (v70)
      {
        v145 = v121;
        v86 = (FILE *)*MEMORY[0x1E0C80C10];
        v87 = 1246;
        goto LABEL_144;
      }
      if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v130, v113))
      {
        v145 = v121;
        v86 = (FILE *)*MEMORY[0x1E0C80C10];
        v87 = 1247;
        goto LABEL_144;
      }
      v71 = v130;
      v117 += v130;
      if (v117 > v57)
      {
        v86 = (FILE *)*MEMORY[0x1E0C80C10];
        v87 = 1248;
        goto LABEL_144;
      }
      if (v130 >= 0x100)
      {
        v145 = v121;
        v86 = (FILE *)*MEMORY[0x1E0C80C10];
        v87 = 1249;
        goto LABEL_144;
      }
      v72 = v118 + 224 * v119;
      v73 = *(unsigned __int8 *)(v72 + 208);
      v110 = (_BYTE *)(v72 + 208);
      *(_DWORD *)(v72 + 192) = v67;
      *v69 = v71;
      if (v73)
      {
        v145 = v121;
        v86 = (FILE *)*MEMORY[0x1E0C80C10];
        v87 = 1254;
        goto LABEL_144;
      }
      v31 = BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v129 + 1, v112);
      if ((v31 & 1) == 0)
      {
        v145 = v121;
        v86 = (FILE *)*MEMORY[0x1E0C80C10];
        v87 = 1255;
        goto LABEL_144;
      }
      v74 = HIDWORD(v129);
      if (HIDWORD(v129) > v56)
      {
        v86 = (FILE *)*MEMORY[0x1E0C80C10];
        v87 = 1256;
        goto LABEL_144;
      }
      if (HIDWORD(v129) > 0xFF)
      {
        v145 = v121;
        v86 = (FILE *)*MEMORY[0x1E0C80C10];
        v87 = 1257;
        goto LABEL_144;
      }
      if ((_DWORD)v71)
        break;
LABEL_98:
      *(_DWORD *)(v118 + 224 * v119 + 196) = v67;
      *v110 = v74;
      if ((_DWORD)v74)
      {
        v77 = 24 * (_QWORD)v121;
        while (1)
        {
          if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v128, v123))
          {
            v86 = (FILE *)*MEMORY[0x1E0C80C10];
            v87 = 1271;
            goto LABEL_144;
          }
          v79 = v128;
          if (v128 >= v60)
            break;
          v80 = (_DWORD *)(*(_QWORD *)(*v126 + 1888) + 12 * v67);
          *v80 = 6;
          v80[1] = *(_DWORD *)(v33 + 4 * v79);
          v127 = 0;
          if (!BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v127, v116))
          {
            v87 = 1278;
            goto LABEL_143;
          }
          v81 = (uint64_t *)v127;
          if (v115 <= v127)
          {
            v87 = 1279;
            goto LABEL_143;
          }
          v82 = (_QWORD *)*v126;
          *(_DWORD *)(*(_QWORD *)(*v126 + 1888) + 12 * v67 + 8) = (_DWORD)v121;
          *(_QWORD *)(v82[131] + v77) = (char *)v81 + v120;
          v83 = (const void *)v82[111];
          v84 = v82[112];
          __key[0] = v81;
          v31 = (uint64_t)bsearch(__key, v83, v84, 0x18uLL, (int (__cdecl *)(const void *, const void *))geo::codec::findLabelLanguageLocal);
          if (v31)
            v78 = *(_QWORD *)(v31 + 16);
          else
            v78 = 0;
          *(_QWORD *)(*(_QWORD *)(*v126 + 1048) + v77 + 8) = v78;
          ++v121;
          ++v67;
          v77 += 24;
          if (!--v74)
            goto LABEL_108;
        }
        v86 = (FILE *)*MEMORY[0x1E0C80C10];
        v87 = 1272;
        goto LABEL_144;
      }
LABEL_108:
      if (++v109 == v111)
        goto LABEL_127;
    }
    while (1)
    {
      v31 = BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v128, v123);
      if ((v31 & 1) == 0)
      {
        v145 = v121;
        v86 = (FILE *)*MEMORY[0x1E0C80C10];
        v87 = 1260;
        goto LABEL_144;
      }
      v75 = v128;
      if (v128 >= v60)
        break;
      v76 = (_DWORD *)(*(_QWORD *)(*v126 + 1888) + 12 * v67);
      *v76 = 6;
      v76[1] = *(_DWORD *)(v33 + 4 * v75);
      v76[2] = -1;
      ++v67;
      if (!--v71)
        goto LABEL_98;
    }
    v86 = (FILE *)*MEMORY[0x1E0C80C10];
    v87 = 1261;
    goto LABEL_144;
  }
  v67 = 0;
LABEL_127:
  if (v67 != (_DWORD)v56 + v57)
  {
    v86 = (FILE *)*MEMORY[0x1E0C80C10];
    v87 = 1287;
LABEL_144:
    v31 = fprintf(v86, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v87);
    v32 = 0;
    goto LABEL_28;
  }
  if (v121 != *(const char **)(*v126 + 1056))
  {
    v86 = (FILE *)*MEMORY[0x1E0C80C10];
    v87 = 1288;
    goto LABEL_144;
  }
  v53 = *(_QWORD *)(v8 + 24);
  v85 = v53 + 1;
  if (v53 + 1 > 8 * *(_QWORD *)(v8 + 16))
    goto LABEL_111;
LABEL_130:
  v88 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v53 >> 3));
  *(_QWORD *)(v8 + 24) = v85;
  if (((v88 >> (~(_BYTE)v53 & 7)) & 1) != 0)
  {
    LODWORD(__key[0]) = 0;
    if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), __key, 5uLL))
    {
      v86 = (FILE *)*MEMORY[0x1E0C80C10];
      v87 = 1296;
      goto LABEL_144;
    }
    v89 = LODWORD(__key[0]);
    LODWORD(v145) = 0;
    if ((BitstreamUnpackSignedVar32((uint64_t *)(v8 + 8), (int *)&v145) & 1) == 0)
    {
      v86 = (FILE *)*MEMORY[0x1E0C80C10];
      v87 = 1300;
      goto LABEL_144;
    }
    v139 = 0;
    if (BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v139, 8uLL))
    {
      v90 = v139;
      if (v139)
      {
        v138 = 0;
        if (!BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v138, 5uLL))
        {
          v86 = (FILE *)*MEMORY[0x1E0C80C10];
          v87 = 1308;
          goto LABEL_144;
        }
        v137 = 0;
        v31 = BitstreamUnpackBitcount((uint64_t *)(v8 + 8), &v137, 5uLL);
        if (!(_DWORD)v31)
        {
          v86 = (FILE *)*MEMORY[0x1E0C80C10];
          v87 = 1311;
          goto LABEL_144;
        }
        v91 = *(_QWORD *)(*v126 + 504);
        if (*(_QWORD *)(*v126 + 512) != v91)
        {
          v92 = 0;
          v93 = 0;
          v94 = 1.0 / (float)v90;
          v124 = v138;
          v95 = (float)(int)v145;
          v122 = v137;
          do
          {
            v97 = *(_QWORD *)(v8 + 24);
            v98 = v97 + 1;
            v99 = 8 * *(_QWORD *)(v8 + 16);
            if (v97 + 1 > v99)
            {
              v86 = (FILE *)*MEMORY[0x1E0C80C10];
              v87 = 1317;
              goto LABEL_144;
            }
            v100 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v97 >> 3));
            *(_QWORD *)(v8 + 24) = v98;
            v125 = (1 << (~(_BYTE)v97 & 7)) & v100;
            if (v125)
            {
              v136 = 0;
              v31 = BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v136, v124);
              if (!(_DWORD)v31)
              {
                v86 = (FILE *)*MEMORY[0x1E0C80C10];
                v87 = 1320;
                goto LABEL_144;
              }
              v101 = v91 + v92;
              *(float *)(v101 + 96) = v95 + (float)(v94 * (float)v136);
              *(_BYTE *)(v101 + 212) = 1;
              v98 = *(_QWORD *)(v8 + 24);
              v99 = 8 * *(_QWORD *)(v8 + 16);
            }
            v102 = v98 + 1;
            if (v98 + 1 > v99)
            {
              v86 = (FILE *)*MEMORY[0x1E0C80C10];
              v87 = 1326;
              goto LABEL_144;
            }
            v103 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v98 >> 3));
            *(_QWORD *)(v8 + 24) = v102;
            v104 = (1 << (~(_BYTE)v98 & 7)) & v103;
            if (v104)
            {
              v136 = 0;
              v31 = BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v136, v122);
              if (!(_DWORD)v31)
              {
                v86 = (FILE *)*MEMORY[0x1E0C80C10];
                v87 = 1329;
                goto LABEL_144;
              }
              v105 = v91 + v92;
              *(float *)(v105 + 100) = v94 * (float)v136;
              *(_BYTE *)(v105 + 213) = 1;
              v102 = *(_QWORD *)(v8 + 24);
              v99 = 8 * *(_QWORD *)(v8 + 16);
            }
            if (v102 + 1 > v99)
            {
              v86 = (FILE *)*MEMORY[0x1E0C80C10];
              v87 = 1335;
              goto LABEL_144;
            }
            v106 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 8) + (v102 >> 3));
            *(_QWORD *)(v8 + 24) = v102 + 1;
            v107 = (1 << (~(_BYTE)v102 & 7)) & v106;
            if (v107)
            {
              v136 = 0;
              v31 = BitstreamUnpack((uint64_t *)(v8 + 8), (int *)&v136, v89);
              if (!(_DWORD)v31)
              {
                v86 = (FILE *)*MEMORY[0x1E0C80C10];
                v87 = 1338;
                goto LABEL_144;
              }
              v96 = v91 + v92;
              *(float *)(v96 + 104) = (float)v136 * (float)(1.0 / (float)(unint64_t)~(-1 << v89));
              *(_BYTE *)(v96 + 214) = 1;
            }
            *(_BYTE *)(v91 + v92 + 215) = (v104 | v125 | v107) != 0;
            ++v93;
            v91 = *(_QWORD *)(*v126 + 504);
            v92 += 224;
          }
          while (v93 < 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*v126 + 512) - v91) >> 5));
        }
        v85 = *(_QWORD *)(v8 + 24);
        goto LABEL_162;
      }
      v87 = 1304;
    }
    else
    {
      v87 = 1303;
    }
LABEL_143:
    v86 = (FILE *)*MEMORY[0x1E0C80C10];
    goto LABEL_144;
  }
LABEL_162:
  v108 = *(_QWORD *)(v8 + 48) + (v85 >> 3);
  if ((v85 & 7) != 0)
    ++v108;
  *(_QWORD *)(v8 + 48) = v108;
  *(_BYTE *)(v8 + 32) = 0;
  v32 = 1;
LABEL_28:
  v34 = geo::codec::Allocator::instance((geo::codec::Allocator *)v31);
  v35 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v34 + 40))(v34, v33, 0);
  if (a1)
  {
    if (*(_BYTE *)v8)
    {
      v36 = geo::codec::Allocator::instance(v35);
      v35 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v36 + 40))(v36, *(_QWORD *)(v8 + 40), 0);
    }
    v37 = geo::codec::Allocator::instance(v35);
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v37 + 40))(v37, v8, 0);
  }
  v38 = v141;
  v4 = v142;
  v12.__d_.__rep_ = rep;
  v39.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v145 = v38;
  if (v38)
    goto LABEL_48;
LABEL_49:
  v46 = v143;
  if (v143)
  {
    v47 = (unint64_t *)&v143->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  return v32;
}

void sub_1885FFFBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 168));
  _Unwind_Resume(a1);
}

void sub_1885FFFD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 168));
  _Unwind_Resume(a1);
}

void sub_1885FFFE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 168));
  _Unwind_Resume(a1);
}

void sub_1885FFFF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 168));
  _Unwind_Resume(a1);
}

void sub_188600010(_Unwind_Exception *a1)
{
  uint64_t v1;

  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v1 - 168));
  _Unwind_Resume(a1);
}

uint64_t BitstreamUnpackSignedVar32(uint64_t *a1, int *a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;

  v2 = a1[2];
  v3 = 8 * a1[1];
  if (v2 + 5 > v3)
    return 0;
  v4 = 0;
  v5 = *a1;
  v6 = 5;
  do
  {
    v7 = 8 - (v2 & 7);
    if (v6 < v7)
      v7 = v6;
    v4 = (*(unsigned __int8 *)(v5 + (v2 >> 3)) >> (8 - (v2 & 7) - v7)) & ~(-1 << v7) | (v4 << v7);
    v2 += v7;
    a1[2] = v2;
    v6 -= v7;
  }
  while (v6);
  v8 = (v4 + 1);
  if (v2 + v8 > v3)
    return 0;
  if (!(_DWORD)v8)
    goto LABEL_19;
  v10 = 0;
  do
  {
    v11 = 8 - (v2 & 7);
    if (v8 < v11)
      v11 = v8;
    v10 = (*(unsigned __int8 *)(v5 + (v2 >> 3)) >> (8 - (v2 & 7) - v11)) & ~(-1 << v11) | (v10 << v11);
    v2 += v11;
    a1[2] = v2;
    v8 -= v11;
  }
  while (v8);
  if (v10)
  {
    if (v2 + 1 > v3)
      return 0;
    v12 = *(unsigned __int8 *)(v5 + (v2 >> 3));
    a1[2] = v2 + 1;
    if (((v12 >> (~(_BYTE)v2 & 7)) & 1) != 0)
      v13 = -v10;
    else
      v13 = v10;
    *a2 = v13;
    return 1;
  }
  else
  {
LABEL_19:
    *a2 = 0;
    return 1;
  }
}

BOOL BitstreamUnpackBitcount(uint64_t *a1, _DWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a1[2];
  v3 = v2 + 6;
  v4 = 8 * a1[1];
  if (v2 + 6 <= v4)
  {
    v5 = 0;
    v6 = *a1;
    v7 = 6;
    do
    {
      v8 = 8 - (v2 & 7);
      if (v7 < v8)
        v8 = v7;
      v5 = (*(unsigned __int8 *)(v6 + (v2 >> 3)) >> (8 - (v2 & 7) - v8)) & ~(-1 << v8) | (v5 << v8);
      v2 += v8;
      a1[2] = v2;
      v7 -= v8;
    }
    while (v7);
    *a2 = v5 + 1;
  }
  return v3 <= v4;
}

BOOL BitstreamUnpackBitcount(uint64_t *a1, _DWORD *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;

  v3 = a1[2];
  v4 = v3 + a3;
  v5 = 8 * a1[1];
  if (v3 + a3 <= v5)
  {
    v6 = 0;
    v7 = *a1;
    do
    {
      v8 = 8 - (v3 & 7);
      if (a3 < v8)
        v8 = a3;
      v6 = (*(unsigned __int8 *)(v7 + (v3 >> 3)) >> (8 - (v3 & 7) - v8)) & ~(-1 << v8) | (v6 << v8);
      v3 += v8;
      a1[2] = v3;
      a3 -= v8;
    }
    while (a3);
    *a2 = v6 + 1;
  }
  return v4 <= v5;
}

unint64_t geo::codec::_readLines(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::chrono::steady_clock::time_point v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::chrono::steady_clock::time_point v20;
  uint64_t v21;
  int v22;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23;
  std::chrono::steady_clock::time_point v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  uint64_t SpaceForShields;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  const void *v59;
  size_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  const void *v67;
  size_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  float32x4_t v101;
  uint64_t v102;
  __int32 v103;
  uint64_t v104;
  __int32 v105;
  unint64_t v106;
  uint64_t v107;
  float32x4_t v108;
  geo::codec::Allocator *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  BOOL v115;
  unint64_t v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  FILE *v137;
  int v138;
  char v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t VarUint32;
  uint64_t v146;
  geo::codec::Allocator *v147;
  uint64_t v148;
  _QWORD *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _WORD *v175;
  _WORD *v176;
  __int16 v177;
  __int16 v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  FILE *v186;
  int v187;
  int v188;
  FILE *v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  _DWORD *v193;
  FILE *v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unsigned int v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  _DWORD *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  unint64_t v238;
  _DWORD *v239;
  unint64_t v240;
  unsigned int v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  geo::codec::Allocator *v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  FILE *v255;
  int v256;
  BOOL v257;
  int *v258;
  unint64_t v259;
  int v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  int v267;
  int v268;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _WORD *v282;
  uint64_t *v283;
  _WORD *v284;
  uint64_t v285;
  _WORD *v286;
  unint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  int v294;
  unsigned int v295;
  _BYTE __sz[12];
  __int128 __key;
  __int128 v298;
  uint64_t v299;
  std::__shared_weak_count *v300;
  const char *v301;
  uint64_t v302;
  std::__shared_weak_count *v303;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  const char *v310;
  uint64_t v311;
  uint64_t *v312[8];

  v312[5] = *(uint64_t **)MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 856);
  v6 = *(_QWORD *)(*a2 + 864);
  v308 = 0;
  v309 = 0;
  v306 = 0;
  v307 = 0;
  v305 = 0;
  v7 = a1[1];
  if (!v7)
  {
LABEL_5:
    v10 = 0;
    v301 = "ChapterLineFeatures";
    v302 = v4;
    v11 = a2[1];
    v303 = (std::__shared_weak_count *)v11;
    if (!v11)
      goto LABEL_10;
    goto LABEL_8;
  }
  v8 = 0;
  v9 = 0;
  while (*(_WORD *)(*a1 + 16 * v8) != 31)
  {
    v8 = ++v9;
    if (v7 <= v9)
      goto LABEL_5;
  }
  v10 = geo::codec::chapterAt((uint64_t)a1, v9, 31, v4 + 1912);
  v4 = *a2;
  v301 = "ChapterLineFeatures";
  v302 = v4;
  v11 = a2[1];
  v303 = (std::__shared_weak_count *)v11;
  if (v11)
  {
LABEL_8:
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
LABEL_10:
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  rep = v14.__d_.__rep_;
  if (!v10)
  {
    v23 = v14.__d_.__rep_;
    LOBYTE(v15) = 1;
    v24.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v312[0] = (uint64_t *)"ChapterLineFeatures";
    if (!"ChapterLineFeatures")
      goto LABEL_202;
    goto LABEL_201;
  }
  v291 = v5;
  v299 = 0;
  v300 = 0;
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v307) & 1) == 0)
  {
    v25 = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 2058);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v293 = 0;
    goto LABEL_174;
  }
  v15 = (unint64_t)"ChapterVertices";
  v16 = *a2;
  v17 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)&__key = "ChapterVertices";
  *((_QWORD *)&__key + 1) = v16;
  *(_QWORD *)&v298 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  *((std::chrono::steady_clock::time_point *)&v298 + 1) = v20;
  v21 = geo::codec::chapterAt((uint64_t)a1, v307, 20, *a2 + 1912);
  v293 = v21;
  if (!v21)
  {
    v30 = 2062;
LABEL_23:
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v30);
    v22 = 6;
    goto LABEL_24;
  }
  if ((geo::codec::decodeVertices(v21, (geo::codec::Allocator **)(*a2 + 768), (uint64_t *)(*a2 + 792), *(_DWORD *)(v21 + 64) > 0x43u) & 1) == 0)
  {
    v30 = 2064;
    goto LABEL_23;
  }
  v22 = 0;
LABEL_24:
  v31 = std::chrono::steady_clock::now().__d_.__rep_;
  v310 = "ChapterVertices";
  v312[0] = (uint64_t *)&v310;
  v25 = (uint64_t)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v16 + 1912, (uint64_t *)&v310, (uint64_t)&std::piecewise_construct, v312);
  *(double *)(v25 + 32) = (double)((v31 - v20.__d_.__rep_) / 1000) * 0.001;
  if (!v17)
    goto LABEL_28;
  v32 = (unint64_t *)&v17->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (v22 == 6)
      goto LABEL_173;
  }
  else
  {
LABEL_28:
    if (v22 == 6)
      goto LABEL_173;
  }
  if ((geo::codec::decodePointCharacteristics(a1, 51, (uint64_t *)(*a2 + 1200), (unint64_t *)(*a2 + 1208), (uint64_t *)(*a2 + 1232), (_QWORD *)(*a2 + 1240), *a2 + 1912) & 1) == 0)
  {
    v137 = (FILE *)*MEMORY[0x1E0C80C10];
    v138 = 2067;
    goto LABEL_172;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v308) & 1) == 0)
  {
    v137 = (FILE *)*MEMORY[0x1E0C80C10];
    v138 = 2069;
    goto LABEL_172;
  }
  v34 = v308;
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v309 + 1) & 1) == 0)
  {
    v137 = (FILE *)*MEMORY[0x1E0C80C10];
    v138 = 2072;
    goto LABEL_172;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v309) & 1) == 0)
  {
    v137 = (FILE *)*MEMORY[0x1E0C80C10];
    v138 = 2073;
    goto LABEL_172;
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v308 + 1) & 1) == 0)
  {
    v137 = (FILE *)*MEMORY[0x1E0C80C10];
    v138 = 2074;
    goto LABEL_172;
  }
  if (HIDWORD(v309) >= 0x10000)
  {
    v137 = (FILE *)*MEMORY[0x1E0C80C10];
    v138 = 2077;
    goto LABEL_172;
  }
  if (v309 >= 0x10000)
  {
    v137 = (FILE *)*MEMORY[0x1E0C80C10];
    v138 = 2078;
    goto LABEL_172;
  }
  if (HIDWORD(v308) >= 0x10000)
  {
    v137 = (FILE *)*MEMORY[0x1E0C80C10];
    v138 = 2079;
    goto LABEL_172;
  }
  if ((geo::codec::_makeSpaceForLabels((geo::codec::Allocator *)HIDWORD(v309), &v306, a2) & 1) == 0)
  {
    v137 = (FILE *)*MEMORY[0x1E0C80C10];
    v138 = 2082;
    goto LABEL_172;
  }
  SpaceForShields = geo::codec::_makeSpaceForShields((geo::codec::Allocator *)v309, &v305, a2);
  if ((SpaceForShields & 1) == 0)
  {
    v137 = (FILE *)*MEMORY[0x1E0C80C10];
    v138 = 2083;
    goto LABEL_172;
  }
  v36 = HIDWORD(v308);
  if (HIDWORD(v308))
  {
    v37 = geo::codec::Allocator::instance((geo::codec::Allocator *)SpaceForShields);
    v38 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v37 + 24))(v37, v36, 24);
    v39 = *a2;
    *(_QWORD *)(v39 + 752) = v38;
    *(_QWORD *)(v39 + 760) = v36;
    if (!v38)
    {
      v137 = (FILE *)*MEMORY[0x1E0C80C10];
      v138 = 2090;
      goto LABEL_172;
    }
  }
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&v307 + 1) & 1) == 0)
  {
    v137 = (FILE *)*MEMORY[0x1E0C80C10];
    v138 = 2093;
    goto LABEL_172;
  }
  if (HIDWORD(v307) >= 0x10000)
  {
    v137 = (FILE *)*MEMORY[0x1E0C80C10];
    v138 = 2096;
    goto LABEL_172;
  }
  std::vector<GeoCodecsRoadFeature,geo::StdAllocator<GeoCodecsRoadFeature,geo::codec::Allocator>>::resize((unint64_t *)(*a2 + 32), HIDWORD(v307));
  _ZNSt3__111make_sharedB8ne180100I22FeatureStyleAttributesJEvEENS_10shared_ptrIT_EEDpOT0_(&__key);
  v40 = __key;
  **(_QWORD **)__key = 0x100000005;
  *(_WORD *)(v40 + 33) = 257;
  std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]<FeatureStyleAttributes,void>((uint64_t)&v299, &__key);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&__key);
  v41 = FeatureStyleAttributesSet::insert(*a2 + 1112, &v299);
  v42 = v41[1];
  *(_QWORD *)&__key = *v41;
  *((_QWORD *)&__key + 1) = v42;
  if (v42)
  {
    v43 = (unint64_t *)(v42 + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]<FeatureStyleAttributes,void>((uint64_t)&v299, &__key);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&__key);
  v45 = v306;
  v289 = v305;
  v46 = *a2;
  v281 = *(_QWORD *)(*a2 + 32);
  if (*(_QWORD *)(*a2 + 40) != v281)
  {
    v278 = 0;
    v279 = 0;
    v287 = v6 - v291;
    v283 = (uint64_t *)(v10 + 8);
    while (1)
    {
      v285 = v281 + 168 * v279;
      *(_BYTE *)(v285 + 154) = 1;
      v47 = a2[1];
      if (v47)
      {
        v48 = (unint64_t *)(v47 + 16);
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
      }
      v50 = *(std::__shared_weak_count **)(v285 + 8);
      *(_QWORD *)v285 = v46;
      *(_QWORD *)(v285 + 8) = v47;
      if (v50)
        std::__shared_weak_count::__release_weak(v50);
      v51 = *(_QWORD *)(v10 + 48);
      if ((unint64_t)(v51 + 1) > *(_QWORD *)(v10 + 56))
      {
        v305 = v289;
        v306 = v45;
        v137 = (FILE *)*MEMORY[0x1E0C80C10];
        v138 = 2109;
        goto LABEL_172;
      }
      *(_BYTE *)(v10 + 32) = 1;
      *(_QWORD *)(v10 + 8) = *(_QWORD *)(v10 + 40) + v51;
      *(_OWORD *)(v10 + 16) = xmmword_189CBD5D0;
      LODWORD(v310) = 0;
      *(_DWORD *)&__sz[8] = 0;
      if (!BitstreamUnpack(v283, (int *)&v310, 4uLL))
      {
        v305 = v289;
        v306 = v45;
        v137 = (FILE *)*MEMORY[0x1E0C80C10];
        v138 = 2112;
        goto LABEL_172;
      }
      if (!BitstreamUnpack(v283, (int *)&__sz[8], 4uLL))
      {
        v305 = v289;
        v306 = v45;
        v137 = (FILE *)*MEMORY[0x1E0C80C10];
        v138 = 2113;
        goto LABEL_172;
      }
      v52 = *(_QWORD *)(v10 + 48) + (*(_QWORD *)(v10 + 24) >> 3);
      if ((*(_QWORD *)(v10 + 24) & 7) != 0)
        ++v52;
      *(_QWORD *)(v10 + 48) = v52;
      *(_BYTE *)(v10 + 32) = 0;
      *(_DWORD *)(v285 + 56) = v45;
      *(_DWORD *)(v285 + 60) = v289;
      v53 = v310;
      *(_BYTE *)(v285 + 73) = (_BYTE)v310;
      v54 = *(unsigned int *)&__sz[8];
      *(_BYTE *)(v285 + 72) = __sz[8];
      if ((_DWORD)v53)
      {
        v55 = 24 * v45;
        do
        {
          LODWORD(v312[0]) = 0;
          *(_DWORD *)&__sz[4] = 0;
          if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)v312) & 1) == 0)
          {
            v305 = v289;
            v306 = v45;
            v138 = 2122;
            goto LABEL_171;
          }
          if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&__sz[4]) & 1) == 0)
          {
            v305 = v289;
            v306 = v45;
            v138 = 2123;
            goto LABEL_171;
          }
          if (v287 <= LODWORD(v312[0]))
          {
            v305 = v289;
            v306 = v45;
            v138 = 2124;
            goto LABEL_171;
          }
          v57 = (_QWORD *)*a2;
          if (v45 >= *(_QWORD *)(*a2 + 1056))
          {
            v305 = v289;
            v306 = v45;
            v138 = 2125;
            goto LABEL_171;
          }
          v58 = v57[131] + v55;
          *(_QWORD *)v58 = v291 + LODWORD(v312[0]);
          *(_DWORD *)(v58 + 16) = *(_DWORD *)&__sz[4];
          v59 = (const void *)v57[111];
          v60 = v57[112];
          *(_QWORD *)&__key = LODWORD(v312[0]);
          v61 = bsearch(&__key, v59, v60, 0x18uLL, (int (__cdecl *)(const void *, const void *))geo::codec::findLabelLanguageLocal);
          if (v61)
            v56 = v61[2];
          else
            v56 = 0;
          *(_QWORD *)(*(_QWORD *)(*a2 + 1048) + v55 + 8) = v56;
          ++v45;
          v55 += 24;
          --v53;
        }
        while (v53);
      }
      if ((_DWORD)v54)
        break;
LABEL_78:
      if (*(_BYTE *)(v285 + 72))
        v70 = *(_QWORD *)(*(_QWORD *)(*a2 + 1064) + 32 * v289 - 32);
      else
        v70 = 0;
      if (*(_BYTE *)(v285 + 73))
        v70 = *(_QWORD *)(*(_QWORD *)(*a2 + 1048) + 24 * v45 - 24);
      *(_QWORD *)(v285 + 16) = v70;
      v71 = *(_QWORD *)(v10 + 48);
      if ((unint64_t)(v71 + 1) <= *(_QWORD *)(v10 + 56))
      {
        v72 = 0;
        *(_BYTE *)(v10 + 32) = 1;
        *(_QWORD *)(v10 + 8) = *(_QWORD *)(v10 + 40) + v71;
        *(_OWORD *)(v10 + 16) = xmmword_189CBD5D0;
        v73 = 1;
      }
      else
      {
        v73 = *(_QWORD *)(v10 + 16);
        v72 = *(_QWORD *)(v10 + 24);
      }
      v15 = v72 + 1;
      v74 = 8 * v73;
      if (v72 + 1 > 8 * v73)
      {
        v305 = v289;
        v306 = v45;
        v138 = 2160;
        goto LABEL_171;
      }
      v75 = *(_QWORD *)(v10 + 8);
      v76 = *(unsigned __int8 *)(v75 + (v72 >> 3));
      *(_QWORD *)(v10 + 24) = v15;
      v77 = v72 + 2;
      if (v72 + 2 > v74)
      {
        v305 = v289;
        v306 = v45;
        v138 = 2161;
        goto LABEL_171;
      }
      v78 = *(unsigned __int8 *)(v75 + (v15 >> 3));
      *(_QWORD *)(v10 + 24) = v77;
      if (v72 + 3 > v74)
      {
        v305 = v289;
        v306 = v45;
        v138 = 2162;
        goto LABEL_171;
      }
      v79 = v72 + 3;
      v273 = *(unsigned __int8 *)(v75 + (v77 >> 3));
      *(_QWORD *)(v10 + 24) = v72 + 3;
      v277 = v72 + 4;
      if (v72 + 4 > v74)
      {
        v305 = v289;
        v306 = v45;
        v138 = 2163;
        goto LABEL_171;
      }
      v272 = *(unsigned __int8 *)(v75 + (v79 >> 3));
      *(_QWORD *)(v10 + 24) = v277;
      v276 = v72 + 5;
      if (v72 + 5 > v74)
      {
        v305 = v289;
        v306 = v45;
        v138 = 2164;
        goto LABEL_171;
      }
      v271 = *(unsigned __int8 *)(v75 + (v277 >> 3));
      *(_QWORD *)(v10 + 24) = v276;
      v275 = v72 + 6;
      if (v72 + 6 > v74)
      {
        v305 = v289;
        v306 = v45;
        v138 = 2165;
        goto LABEL_171;
      }
      v270 = *(unsigned __int8 *)(v75 + (v276 >> 3));
      *(_QWORD *)(v10 + 24) = v275;
      if (v72 + 7 > v74)
      {
        v305 = v289;
        v306 = v45;
        v138 = 2166;
        goto LABEL_171;
      }
      v269 = *(unsigned __int8 *)(v75 + (v275 >> 3));
      *(_QWORD *)(v10 + 24) = v72 + 7;
      v80 = v72 + 8;
      if (v72 + 8 > v74)
      {
        v305 = v289;
        v306 = v45;
        v138 = 2167;
        goto LABEL_171;
      }
      *(_QWORD *)(v10 + 24) = v80;
      v81 = v71 + (v80 >> 3);
      if ((v72 & 7) != 0)
        ++v81;
      *(_QWORD *)(v10 + 48) = v81;
      *(_BYTE *)(v10 + 32) = 0;
      v274 = 1;
      LODWORD(__key) = 1;
      if (((1 << (~(_BYTE)v72 & 7)) & v76) != 0)
      {
        if (!geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&__key))
        {
          v305 = v289;
          v306 = v45;
          v137 = (FILE *)*MEMORY[0x1E0C80C10];
          v138 = 2174;
          goto LABEL_172;
        }
        v274 = __key;
      }
      *(_DWORD *)(v285 + 96) = v34;
      *(_DWORD *)(v285 + 100) = v274;
      *(_OWORD *)(v285 + 80) = xmmword_189CC14F0;
      if (((1 << (~(_BYTE)v15 & 7)) & v78) != 0)
      {
        v82 = *(_QWORD *)(v10 + 48);
        v83 = v82 + 8;
        if ((unint64_t)(v82 + 8) > *(_QWORD *)(v10 + 56))
        {
          v305 = v289;
          v306 = v45;
          v137 = (FILE *)*MEMORY[0x1E0C80C10];
          v138 = 2185;
          goto LABEL_172;
        }
        v84 = *(_QWORD *)(*(_QWORD *)(v10 + 40) + v82);
        *(_QWORD *)(v10 + 48) = v83;
        *(_QWORD *)(v285 + 40) = v84;
      }
      if (((1 << (~(_BYTE)v77 & 7)) & v273) != 0)
      {
        v85 = *(_QWORD *)(v10 + 48);
        if ((unint64_t)(v85 + 2) <= *(_QWORD *)(v10 + 56))
        {
          *(_BYTE *)(v10 + 32) = 1;
          *(_QWORD *)(v10 + 8) = *(_QWORD *)(v10 + 40) + v85;
          *(_OWORD *)(v10 + 16) = xmmword_189CFDB70;
        }
        LODWORD(v312[0]) = 0;
        *(_QWORD *)__sz = 0;
        BitstreamUnpack(v283, (int *)v312, 4uLL);
        BitstreamUnpack(v283, (int *)&__sz[4], 4uLL);
        BitstreamUnpack(v283, (int *)__sz, 8uLL);
        v86 = *(_QWORD *)(v10 + 48) + (*(_QWORD *)(v10 + 24) >> 3);
        if ((*(_QWORD *)(v10 + 24) & 7) != 0)
          ++v86;
        *(_QWORD *)(v10 + 48) = v86;
        *(_BYTE *)(v10 + 32) = 0;
        if (LODWORD(v312[0]) >= 5uLL)
          v87 = -1;
        else
          v87 = 0x6000201FFuLL >> (8 * LOBYTE(v312[0]));
        v88 = (_BYTE *)(v281 + 168 * v279);
        v88[153] = v87;
        v88[151] = __sz[4];
        v88[152] = __sz[0];
      }
      else
      {
        v89 = v281 + 168 * v279;
        *(_BYTE *)(v89 + 153) = -1;
        *(_WORD *)(v89 + 151) = 264;
      }
      if (((1 << (~(_BYTE)v79 & 7)) & v272) != 0)
      {
        LODWORD(v312[0]) = 0;
        if (!geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)v312))
        {
          v305 = v289;
          v306 = v45;
          v137 = (FILE *)*MEMORY[0x1E0C80C10];
          v138 = 2228;
          goto LABEL_172;
        }
      }
      if (((1 << (~(_BYTE)v277 & 7)) & v271) != 0)
      {
        v90 = *(_QWORD *)(v10 + 48);
        if ((unint64_t)(v90 + 4) > *(_QWORD *)(v10 + 56))
        {
          v305 = v289;
          v306 = v45;
          v137 = (FILE *)*MEMORY[0x1E0C80C10];
          v138 = 2233;
          goto LABEL_172;
        }
        v91 = *(_DWORD *)(*(_QWORD *)(v10 + 40) + v90);
        *(_QWORD *)(v10 + 48) = v90 + 4;
        *(_DWORD *)(v285 + 68) = v91;
      }
      if (((1 << (~(_BYTE)v276 & 7)) & v270) != 0)
      {
        v92 = *(_QWORD *)(*a2 + 752);
        if (!v92)
        {
          v305 = v289;
          v306 = v45;
          v137 = (FILE *)*MEMORY[0x1E0C80C10];
          v138 = 2238;
          goto LABEL_172;
        }
        if (v278 >= v36)
        {
          v305 = v289;
          v306 = v45;
          v137 = (FILE *)*MEMORY[0x1E0C80C10];
          v138 = 2239;
          goto LABEL_172;
        }
        v93 = *(_QWORD *)(v10 + 48);
        v94 = *(_QWORD *)(v10 + 56);
        v95 = v93 + 4;
        if (v93 + 4 > v94)
        {
          v305 = v289;
          v306 = v45;
          v138 = 2243;
          goto LABEL_171;
        }
        v96 = *(_QWORD *)(v10 + 40);
        v97 = *(_DWORD *)(v96 + v93);
        *(_QWORD *)(v10 + 48) = v95;
        v98 = v93 + 8;
        if (v93 + 8 > v94)
        {
          v305 = v289;
          v306 = v45;
          v138 = 2244;
          goto LABEL_171;
        }
        v99 = *(_DWORD *)(v96 + v95);
        *(_QWORD *)(v10 + 48) = v98;
        v100 = v93 + 12;
        if (v93 + 12 > v94)
        {
          v305 = v289;
          v306 = v45;
          v138 = 2245;
          goto LABEL_171;
        }
        v101.i32[0] = *(_DWORD *)(v96 + v98);
        *(_QWORD *)(v10 + 48) = v100;
        v102 = v93 + 16;
        if (v93 + 16 > v94)
        {
          v305 = v289;
          v306 = v45;
          v138 = 2246;
          goto LABEL_171;
        }
        v103 = *(_DWORD *)(v96 + v100);
        *(_QWORD *)(v10 + 48) = v102;
        v104 = v93 + 20;
        if (v93 + 20 > v94)
        {
          v305 = v289;
          v306 = v45;
          v138 = 2247;
          goto LABEL_171;
        }
        v105 = *(_DWORD *)(v96 + v102);
        *(_QWORD *)(v10 + 48) = v104;
        v106 = v93 + 24;
        if (v106 > v94)
        {
          v305 = v289;
          v306 = v45;
          v138 = 2248;
          goto LABEL_171;
        }
        v101.i32[1] = v103;
        v101.i32[2] = v105;
        v101.i32[3] = *(_DWORD *)(v96 + v104);
        *(_QWORD *)(v10 + 48) = v106;
        v107 = v92 + 24 * v278;
        *(_DWORD *)v107 = v97;
        *(_DWORD *)(v107 + 4) = v99;
        v108.i64[0] = 0x3A0000003A000000;
        v108.i64[1] = 0x3A0000003A000000;
        *(float32x4_t *)(v107 + 8) = vmulq_f32(v101, v108);
        *(_QWORD *)(v281 + 168 * v279 + 112) = v107;
        ++v278;
      }
      if (((1 << (~(_BYTE)v275 & 7)) & v269) != 0)
      {
        if ((geo::codec::accumulateStyleAttributes(*a2 + 1112, &v299, (_QWORD *)v10, v285) & 1) == 0)
        {
          v305 = v289;
          v306 = v45;
          v137 = (FILE *)*MEMORY[0x1E0C80C10];
          v138 = 2263;
          goto LABEL_172;
        }
      }
      else
      {
        std::shared_ptr<FeatureStyleAttributes const>::operator=[abi:ne180100]((_QWORD *)(v285 + 24), v299, (uint64_t)v300);
      }
      v34 += v274;
      v46 = *a2;
      ++v279;
      v281 = *(_QWORD *)(*a2 + 32);
      if (v279 >= 0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(*a2 + 40) - v281) >> 3))
        goto LABEL_132;
    }
    v62 = 32 * v289;
    while (1)
    {
      *(_DWORD *)&__sz[4] = 0;
      v312[0] = 0;
      if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&__sz[4]) & 1) == 0)
      {
        v305 = v289;
        v306 = v45;
        v138 = 2134;
        goto LABEL_171;
      }
      if ((geo::codec::chapterReadVarInt64((_QWORD *)v10, (uint64_t *)v312) & 1) == 0)
      {
        v305 = v289;
        v306 = v45;
        v138 = 2135;
        goto LABEL_171;
      }
      v65 = *(unsigned int *)&__sz[4];
      if (v287 <= *(unsigned int *)&__sz[4])
      {
        v305 = v289;
        v306 = v45;
        v138 = 2136;
        goto LABEL_171;
      }
      v66 = (_QWORD *)*a2;
      if (v289 >= *(_QWORD *)(*a2 + 1072))
        break;
      *(_QWORD *)(v66[133] + v62) = v291 + *(unsigned int *)&__sz[4];
      v67 = (const void *)v66[111];
      v68 = v66[112];
      *(_QWORD *)&__key = v65;
      v69 = bsearch(&__key, v67, v68, 0x18uLL, (int (__cdecl *)(const void *, const void *))geo::codec::findLabelLanguageLocal);
      if (v69)
        v63 = v69[2];
      else
        v63 = 0;
      v64 = *(_QWORD *)(*a2 + 1064) + v62;
      *(_QWORD *)(v64 + 8) = v63;
      *(uint64_t **)(v64 + 24) = v312[0];
      ++v289;
      v62 += 32;
      if (!--v54)
        goto LABEL_78;
    }
    v305 = v289;
    v306 = v45;
    v138 = 2137;
LABEL_171:
    v137 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_172:
    v25 = fprintf(v137, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v138);
LABEL_173:
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    goto LABEL_174;
  }
LABEL_132:
  v305 = v289;
  v306 = v45;
  if (*(_DWORD *)(v10 + 64) < 0x48u)
  {
LABEL_240:
    v29 = geo::codec::chapterForTag(a1, 60, v46 + 1912);
    if (v29)
    {
      v142 = *a2;
      v141 = a2[1];
      *(_QWORD *)&__key = "ChapterConnectivity";
      *((_QWORD *)&__key + 1) = v142;
      *(_QWORD *)&v298 = v141;
      if (v141)
      {
        v143 = (unint64_t *)(v141 + 8);
        do
          v144 = __ldxr(v143);
        while (__stxr(v144 + 1, v143));
      }
      *((_QWORD *)&v298 + 1) = 0;
      *((std::chrono::steady_clock::time_point *)&v298 + 1) = std::chrono::steady_clock::now();
      LODWORD(v312[0]) = 0;
      LODWORD(v310) = 0;
      if ((geo::codec::chapterReadVarUint32((_QWORD *)v29, (unsigned int *)v312) & 1) != 0)
      {
        VarUint32 = geo::codec::chapterReadVarUint32((_QWORD *)v29, (unsigned int *)&v310);
        if ((VarUint32 & 1) != 0)
        {
          *(_QWORD *)(*a2 + 696) = v310;
          v146 = geo::codec::Allocator::instance((geo::codec::Allocator *)VarUint32);
          v147 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v146 + 24))(v146, *(_QWORD *)(*a2 + 696), 32);
          *(_QWORD *)(*a2 + 688) = v147;
          if (v147)
          {
            v292 = LODWORD(v312[0]);
            v148 = geo::codec::Allocator::instance(v147);
            v26 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v148 + 24))(v148, v292, 16);
            if (!v26)
            {
              v194 = (FILE *)*MEMORY[0x1E0C80C10];
              v195 = 2352;
              goto LABEL_340;
            }
            v149 = (_QWORD *)*a2;
            if (*(_QWORD *)(*a2 + 696))
            {
              v150 = 0;
              v151 = 0;
              do
              {
                v191 = v149[86];
                *(_DWORD *)&__sz[8] = 0;
                if ((geo::codec::chapterReadVarUint32((_QWORD *)v29, (unsigned int *)&__sz[8]) & 1) == 0)
                {
                  v194 = (FILE *)*MEMORY[0x1E0C80C10];
                  v195 = 2357;
                  goto LABEL_340;
                }
                if (v151 + (unint64_t)*(unsigned int *)&__sz[8] > v292)
                {
                  v194 = (FILE *)*MEMORY[0x1E0C80C10];
                  v195 = 2358;
                  goto LABEL_340;
                }
                *(_DWORD *)(v191 + 32 * v150) = *(_DWORD *)&__sz[8];
                *(_DWORD *)(v191 + 32 * v150 + 4) = v151;
                if (*(_DWORD *)&__sz[8])
                {
                  v192 = 0;
                  v193 = (_DWORD *)(v26 + 8 + 16 * v151);
                  do
                  {
                    *(_QWORD *)__sz = 0;
                    if ((geo::codec::chapterReadVarUint32((_QWORD *)v29, (unsigned int *)&__sz[4]) & 1) == 0)
                    {
                      v195 = 2366;
                      goto LABEL_339;
                    }
                    if (!geo::codec::chapterReadVarUint32((_QWORD *)v29, (unsigned int *)__sz))
                    {
                      v195 = 2367;
                      goto LABEL_339;
                    }
                    *(v193 - 2) = v150;
                    *(v193 - 1) = *(_DWORD *)&__sz[4];
                    *v193 = 0;
                    v193[1] = *(_DWORD *)__sz;
                    ++v192;
                    v193 += 4;
                  }
                  while (v192 < *(_DWORD *)&__sz[8]);
                  v151 += v192;
                }
                ++v150;
                v149 = (_QWORD *)*a2;
              }
              while (v150 < *(_QWORD *)(*a2 + 696));
            }
            v196 = v149[96];
            if (v196 && (_DWORD)v292)
            {
              v197 = 0;
              v199 = v149 + 4;
              v198 = v149[4];
              v200 = 0xCF3CF3CF3CF3CF3DLL * ((v199[1] - v198) >> 3);
              v201 = *(_QWORD *)(v196 + 32);
              v202 = *(_QWORD *)(v196 + 16);
              do
              {
                v203 = v26 + v197;
                v204 = *(unsigned int *)(v26 + v197 + 4);
                if (v200 <= v204)
                {
                  v194 = (FILE *)*MEMORY[0x1E0C80C10];
                  v195 = 2390;
                  goto LABEL_340;
                }
                v205 = *(unsigned int *)(v203 + 12);
                v206 = *(unsigned int *)(v198 + 168 * v204 + 96);
                if (*(_QWORD *)(v201 + 16 * v206 + 8) <= v205)
                {
                  v194 = (FILE *)*MEMORY[0x1E0C80C10];
                  v195 = 2391;
                  goto LABEL_340;
                }
                v207 = (v205 + *(_DWORD *)(v201 + 16 * v206));
                *(_DWORD *)(v203 + 12) = v207;
                if (v202 <= v207)
                {
                  v194 = (FILE *)*MEMORY[0x1E0C80C10];
                  v195 = 2393;
                  goto LABEL_340;
                }
                v197 += 16;
              }
              while (16 * v292 != v197);
            }
            if (*(_DWORD *)(v29 + 64) >= 3u)
            {
              v208 = *(_QWORD *)(v29 + 48);
              v209 = *(_QWORD *)(v29 + 56);
              v210 = v209 - v208;
              if (v209 >= v208)
              {
                v211 = 0;
                *(_BYTE *)(v29 + 32) = 1;
                v212 = *(_QWORD *)(v29 + 40) + v208;
                *(_QWORD *)(v29 + 16) = v210;
                *(_QWORD *)(v29 + 24) = 0;
                *(_QWORD *)(v29 + 8) = v212;
              }
              else
              {
                v210 = *(_QWORD *)(v29 + 16);
                v211 = *(_QWORD *)(v29 + 24);
              }
              v213 = v211 + 1;
              if (v211 + 1 > 8 * v210)
              {
                v194 = (FILE *)*MEMORY[0x1E0C80C10];
                v195 = 2405;
                goto LABEL_340;
              }
              v214 = *(unsigned __int8 *)(*(_QWORD *)(v29 + 8) + (v211 >> 3));
              *(_QWORD *)(v29 + 24) = v213;
              if (((v214 >> (~(_BYTE)v211 & 7)) & 1) != 0)
              {
                *(_DWORD *)&__sz[8] = 0;
                if (!BitstreamUnpack((uint64_t *)(v29 + 8), (int *)&__sz[8], 5uLL))
                {
                  v194 = (FILE *)*MEMORY[0x1E0C80C10];
                  v195 = 2409;
                  goto LABEL_340;
                }
                if (*(_QWORD *)(*a2 + 696))
                {
                  v215 = 0;
                  v216 = (*(_DWORD *)&__sz[8] + 1);
                  v217 = 8;
                  do
                  {
                    v218 = *(_QWORD *)(v29 + 24);
                    if (v218 + 1 > 8 * *(_QWORD *)(v29 + 16))
                    {
                      v194 = (FILE *)*MEMORY[0x1E0C80C10];
                      v195 = 2414;
                      goto LABEL_340;
                    }
                    v219 = *(unsigned __int8 *)(*(_QWORD *)(v29 + 8) + (v218 >> 3));
                    *(_QWORD *)(v29 + 24) = v218 + 1;
                    if (((v219 >> (~(_BYTE)v218 & 7)) & 1) != 0)
                    {
                      v220 = *(_QWORD *)(*a2 + 688);
                      *(_DWORD *)&__sz[4] = 0;
                      if (!BitstreamUnpack((uint64_t *)(v29 + 8), (int *)&__sz[4], v216))
                      {
                        v195 = 2419;
                        goto LABEL_339;
                      }
                      v221 = *(_QWORD *)(*a2 + 504);
                      if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(*a2 + 512) - v221) >> 5) <= (unint64_t)*(unsigned int *)&__sz[4])
                      {
                        v195 = 2420;
LABEL_339:
                        v194 = (FILE *)*MEMORY[0x1E0C80C10];
LABEL_340:
                        fprintf(v194, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v195);
LABEL_311:
                        geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)&__key);
                        v27 = 0;
                        v28 = 0;
LABEL_174:
                        LOBYTE(v15) = 0;
                        goto LABEL_175;
                      }
                      *(_QWORD *)(v220 + v217) = v221 + 224 * *(unsigned int *)&__sz[4];
                    }
                    ++v215;
                    v217 += 32;
                  }
                  while (v215 < *(_QWORD *)(*a2 + 696));
                }
                v213 = *(_QWORD *)(v29 + 24);
                v208 = *(_QWORD *)(v29 + 48);
              }
              v261 = v208 + (v213 >> 3);
              if ((v213 & 7) != 0)
                ++v261;
              *(_QWORD *)(v29 + 48) = v261;
              *(_BYTE *)(v29 + 32) = 0;
            }
            geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)&__key);
LABEL_251:
            v28 = geo::codec::chapterForTag(a1, 80, *a2 + 1912);
            v152 = *a2;
            if (!v28 || *(_QWORD *)(v152 + 40) == *(_QWORD *)(v152 + 32))
              goto LABEL_268;
            v153 = a2[1];
            *(_QWORD *)&__key = "ChapterGeoIDSegments";
            *((_QWORD *)&__key + 1) = v152;
            *(_QWORD *)&v298 = v153;
            if (v153)
            {
              v154 = (unint64_t *)(v153 + 8);
              do
                v155 = __ldxr(v154);
              while (__stxr(v155 + 1, v154));
            }
            *((_QWORD *)&v298 + 1) = 0;
            *((std::chrono::steady_clock::time_point *)&v298 + 1) = std::chrono::steady_clock::now();
            v157 = *(_QWORD *)(v28 + 48);
            v156 = *(_QWORD *)(v28 + 56);
            v115 = v156 >= v157;
            v158 = v156 - v157;
            if (v115)
            {
              *(_BYTE *)(v28 + 32) = 1;
              v159 = *(_QWORD *)(v28 + 40) + v157;
              *(_QWORD *)(v28 + 16) = v158;
              *(_QWORD *)(v28 + 24) = 0;
              *(_QWORD *)(v28 + 8) = v159;
            }
            LODWORD(v312[0]) = 0;
            if (BitstreamUnpack((uint64_t *)(v28 + 8), (int *)v312, 6uLL))
            {
              if ((LODWORD(v312[0]) + 1) <= 0x40)
              {
                v160 = (LODWORD(v312[0]) + 1);
                v161 = *(_QWORD *)(*a2 + 32);
                if (*(_QWORD *)(*a2 + 40) != v161)
                {
                  v162 = 0;
                  v163 = 40;
                  while (BitstreamUnpack64((uint64_t *)(v28 + 8), (unint64_t *)(v161 + v163), v160))
                  {
                    ++v162;
                    v161 = *(_QWORD *)(*a2 + 32);
                    v163 += 168;
                    if (v162 >= 0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(*a2 + 40) - v161) >> 3))
                      goto LABEL_265;
                  }
                  v188 = 2450;
                  goto LABEL_343;
                }
LABEL_265:
                v164 = *(_QWORD *)(v28 + 48) + (*(_QWORD *)(v28 + 24) >> 3);
                if ((*(_QWORD *)(v28 + 24) & 7) != 0)
                  ++v164;
                *(_QWORD *)(v28 + 48) = v164;
                *(_BYTE *)(v28 + 32) = 0;
                geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)&__key);
                v152 = *a2;
LABEL_268:
                v25 = geo::codec::chapterForTag(a1, 90, v152 + 1912);
                v27 = v25;
                v165 = (_QWORD *)*a2;
                if (v25 && v165[5] != v165[4])
                {
                  v166 = a2[1];
                  *(_QWORD *)&__key = "ChapterAddressRanges";
                  *((_QWORD *)&__key + 1) = v165;
                  *(_QWORD *)&v298 = v166;
                  if (v166)
                  {
                    v167 = (unint64_t *)(v166 + 8);
                    do
                      v168 = __ldxr(v167);
                    while (__stxr(v168 + 1, v167));
                  }
                  *((_QWORD *)&v298 + 1) = 0;
                  *((std::chrono::steady_clock::time_point *)&v298 + 1) = std::chrono::steady_clock::now();
                  v170 = *(_QWORD *)(v27 + 48);
                  v169 = *(_QWORD *)(v27 + 56);
                  v115 = v169 >= v170;
                  v171 = v169 - v170;
                  if (v115)
                  {
                    *(_BYTE *)(v27 + 32) = 1;
                    v172 = *(_QWORD *)(v27 + 40) + v170;
                    *(_QWORD *)(v27 + 16) = v171;
                    *(_QWORD *)(v27 + 24) = 0;
                    *(_QWORD *)(v27 + 8) = v172;
                  }
                  *(_QWORD *)&__sz[4] = 0;
                  if (BitstreamUnpack((uint64_t *)(v27 + 8), (int *)&__sz[8], 5uLL))
                  {
                    if (BitstreamUnpack((uint64_t *)(v27 + 8), (int *)&__sz[4], 5uLL))
                    {
                      v290 = (*(_DWORD *)&__sz[8] + 1);
                      if (v290 >= 0x41)
                      {
                        v189 = (FILE *)*MEMORY[0x1E0C80C10];
                        v190 = 2484;
                      }
                      else
                      {
                        v288 = (*(_DWORD *)&__sz[4] + 1);
                        if (v288 <= 0x40)
                        {
                          v173 = *(_QWORD *)(*a2 + 32);
                          if (*(_QWORD *)(*a2 + 40) != v173)
                          {
                            v280 = 0;
                            while (1)
                            {
                              *(_DWORD *)__sz = 0;
                              if (!BitstreamUnpack((uint64_t *)(v27 + 8), (int *)__sz, 2uLL))
                              {
                                v189 = (FILE *)*MEMORY[0x1E0C80C10];
                                v190 = 2489;
                                goto LABEL_345;
                              }
                              v174 = *(unsigned int *)__sz;
                              if (*(_DWORD *)__sz)
                                break;
LABEL_293:
                              v295 = 0;
                              if (!BitstreamUnpack((uint64_t *)(v27 + 8), (int *)&v295, 2uLL))
                              {
                                v189 = (FILE *)*MEMORY[0x1E0C80C10];
                                v190 = 2511;
                                goto LABEL_345;
                              }
                              v180 = v295;
                              if (v295)
                              {
                                while (1)
                                {
                                  if (!BitstreamUnpack((uint64_t *)(v27 + 8), &v294, 2uLL))
                                  {
                                    v189 = (FILE *)*MEMORY[0x1E0C80C10];
                                    v190 = 2514;
                                    goto LABEL_345;
                                  }
                                  v181 = *(_QWORD *)(v27 + 48) + (*(_QWORD *)(v27 + 24) >> 3);
                                  if ((*(_QWORD *)(v27 + 24) & 7) != 0)
                                    ++v181;
                                  *(_QWORD *)(v27 + 48) = v181;
                                  *(_BYTE *)(v27 + 32) = 0;
                                  if (!geo::codec::chapterReadNullTerminatedString((_QWORD *)v27, v312, 32))
                                  {
                                    v190 = 2519;
                                    goto LABEL_424;
                                  }
                                  if (!geo::codec::chapterReadNullTerminatedString((_QWORD *)v27, &v310, 32))
                                    break;
                                  v183 = *(_QWORD *)(v27 + 48);
                                  v182 = *(_QWORD *)(v27 + 56);
                                  v115 = v182 >= v183;
                                  v184 = v182 - v183;
                                  if (v115)
                                  {
                                    *(_BYTE *)(v27 + 32) = 1;
                                    v185 = *(_QWORD *)(v27 + 40) + v183;
                                    *(_QWORD *)(v27 + 16) = v184;
                                    *(_QWORD *)(v27 + 24) = 0;
                                    *(_QWORD *)(v27 + 8) = v185;
                                  }
                                  if (!--v180)
                                    goto LABEL_295;
                                }
                                v190 = 2520;
LABEL_424:
                                v189 = (FILE *)*MEMORY[0x1E0C80C10];
                                goto LABEL_345;
                              }
LABEL_295:
                              v173 = *(_QWORD *)(*a2 + 32);
                              if (++v280 >= 0xCF3CF3CF3CF3CF3DLL * ((*(_QWORD *)(*a2 + 40) - v173) >> 3))
                                goto LABEL_361;
                            }
                            v175 = (_WORD *)(v173 + 168 * v280);
                            v282 = v175 + 62;
                            v284 = v175 + 60;
                            v286 = v175 + 61;
                            v176 = v175 + 63;
                            while (1)
                            {
                              LODWORD(v312[0]) = 0;
                              if (!BitstreamUnpack((uint64_t *)(v27 + 8), (int *)v312, 2uLL))
                              {
                                v189 = (FILE *)*MEMORY[0x1E0C80C10];
                                v190 = 2492;
                                goto LABEL_345;
                              }
                              LODWORD(v310) = 0;
                              if (!BitstreamUnpack((uint64_t *)(v27 + 8), (int *)&v310, v290))
                              {
                                v189 = (FILE *)*MEMORY[0x1E0C80C10];
                                v190 = 2494;
                                goto LABEL_345;
                              }
                              v295 = 0;
                              if (!BitstreamUnpackSigned((uint64_t *)(v27 + 8), (int *)&v295, v288))
                                break;
                              v177 = (__int16)v310;
                              v178 = v295 + (_WORD)v310;
                              v179 = (int)v312[0];
                              if (LODWORD(v312[0]) == 2 || (*v284 = (_WORD)v310, *v282 = v178, v179 != 1))
                              {
                                *v286 = v177;
                                *v176 = v178;
                              }
                              if (!--v174)
                                goto LABEL_293;
                            }
                            v189 = (FILE *)*MEMORY[0x1E0C80C10];
                            v190 = 2496;
                            goto LABEL_345;
                          }
LABEL_361:
                          v222 = *(_QWORD *)(v27 + 48) + (*(_QWORD *)(v27 + 24) >> 3);
                          if ((*(_QWORD *)(v27 + 24) & 7) != 0)
                            ++v222;
                          *(_QWORD *)(v27 + 48) = v222;
                          *(_BYTE *)(v27 + 32) = 0;
                          geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)&__key);
                          v165 = (_QWORD *)*a2;
                          goto LABEL_364;
                        }
                        v189 = (FILE *)*MEMORY[0x1E0C80C10];
                        v190 = 2485;
                      }
                    }
                    else
                    {
                      v189 = (FILE *)*MEMORY[0x1E0C80C10];
                      v190 = 2481;
                    }
                  }
                  else
                  {
                    v189 = (FILE *)*MEMORY[0x1E0C80C10];
                    v190 = 2480;
                  }
LABEL_345:
                  fprintf(v189, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v190);
                  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)&__key);
                  goto LABEL_174;
                }
LABEL_364:
                v223 = v165[96];
                v224 = v165[99];
                if (v223 && !v224)
                {
                  v225 = v165[150];
                  if (v225)
                  {
                    v226 = v165[151];
                    if (v226)
                    {
                      v227 = *(_QWORD *)(v223 + 32);
                      v228 = v165[4];
                      v229 = 0;
                      v230 = v226 - 1;
                      if (v226 == 1)
                        goto LABEL_369;
                      v25 = 100;
                      v257 = !is_mul_ok(v230, 0x64uLL);
                      if (v225 + 12 + 100 * v230 < v225 + 12)
                        goto LABEL_369;
                      if (v257)
                        goto LABEL_369;
                      v229 = v226 & 0xFFFFFFFFFFFFFFFELL;
                      v258 = (int *)(v225 + 112);
                      v259 = v226 & 0xFFFFFFFFFFFFFFFELL;
                      do
                      {
                        v25 = (*(v258 - 25)
                                           + *(_DWORD *)(v227
                                                       + 16
                                                       * *(unsigned int *)(v228 + 168 * *(v258 - 27) + 96)));
                        v260 = *v258
                             + *(_DWORD *)(v227 + 16
                                                * *(unsigned int *)(v228 + 168 * *(v258 - 2) + 96));
                        *(v258 - 25) = v25;
                        *v258 = v260;
                        v258 += 50;
                        v259 -= 2;
                      }
                      while (v259);
                      if (v226 != v229)
                      {
LABEL_369:
                        v231 = v226 - v229;
                        v232 = (_DWORD *)(100 * v229 + v225 + 12);
                        do
                        {
                          *v232 += *(_DWORD *)(v227
                                             + 16 * *(unsigned int *)(v228 + 168 * *(v232 - 2) + 96));
                          v232 += 25;
                          --v231;
                        }
                        while (v231);
                      }
                    }
                  }
                  v233 = v165[154];
                  if (v233 && (v234 = v165[155]) != 0)
                  {
                    v235 = *(_QWORD *)(v223 + 32);
                    v237 = v165 + 4;
                    v236 = v165[4];
                    v238 = 0xCF3CF3CF3CF3CF3DLL * ((v237[1] - v236) >> 3);
                    v239 = (_DWORD *)(v233 + 8);
                    while (1)
                    {
                      v240 = *(v239 - 2);
                      if (v238 <= v240)
                      {
                        v255 = (FILE *)*MEMORY[0x1E0C80C10];
                        v256 = 2549;
                        goto LABEL_401;
                      }
                      v241 = *(v239 - 1);
                      v242 = v236 + 168 * v240;
                      if (v241 >= *(_DWORD *)(v242 + 100))
                      {
                        v255 = (FILE *)*MEMORY[0x1E0C80C10];
                        v256 = 2550;
                        goto LABEL_401;
                      }
                      v243 = *(_DWORD *)(v242 + 96) + v241;
                      v244 = *v239;
                      if (*(_QWORD *)(v235 + 16 * v243 + 8) <= v244)
                        break;
                      *v239 = v244 + *(_DWORD *)(v235 + 16 * v243);
                      v239 += 4;
                      if (!--v234)
                        goto LABEL_378;
                    }
                    v255 = (FILE *)*MEMORY[0x1E0C80C10];
                    v256 = 2553;
                  }
                  else
                  {
LABEL_378:
                    v245 = geo::codec::Allocator::instance((geo::codec::Allocator *)v25);
                    v246 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v245 + 24))(v245, 1, 72);
                    v247 = *a2;
                    *(_QWORD *)(*a2 + 792) = v246;
                    if (v246)
                    {
                      v248 = *(geo::codec::Allocator **)(v247 + 768);
                      v246[5] = *((_QWORD *)v248 + 5);
                      *(_QWORD *)&__key = v292;
                      *((_QWORD *)&__key + 1) = v26;
                      *(_QWORD *)&v298 = v247 + 712;
                      *((_QWORD *)&v298 + 1) = v247 + 728;
                      v249 = *(uint64_t **)(v247 + 1200);
                      v312[0] = *(uint64_t **)(v247 + 1208);
                      v312[1] = v249;
                      v250 = *(_QWORD *)(v247 + 1232);
                      v310 = *(const char **)(v247 + 1240);
                      v311 = v250;
                      v25 = geo::codec::_createLOD(v248, v246, 0, (*(_QWORD *)(v247 + 4) & 0x3F00uLL) > 0xE00, (uint64_t *)(v247 + 776), (uint64_t)&__key, v312, &v310);
                      if ((v25 & 1) != 0)
                      {
                        *(_QWORD *)(*a2 + 720) = v292;
                        LOBYTE(v15) = 1;
                        goto LABEL_175;
                      }
                      v255 = (FILE *)*MEMORY[0x1E0C80C10];
                      v256 = 2574;
                    }
                    else
                    {
                      v255 = (FILE *)*MEMORY[0x1E0C80C10];
                      v256 = 2559;
                    }
                  }
LABEL_401:
                  v25 = fprintf(v255, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v256);
                  goto LABEL_174;
                }
                LOBYTE(v15) = 1;
                if (v224 && v26)
                {
                  v165[89] = v26;
                  v165[90] = v292;
                  if (v292)
                  {
                    v251 = geo::codec::Allocator::instance((geo::codec::Allocator *)v25);
                    v252 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v251 + 24))(v251, v292, 8);
                    *(_QWORD *)(*a2 + 728) = v252;
                    if (v252)
                    {
                      v253 = 0;
                      v254 = 0;
                      do
                      {
                        *(_QWORD *)(*(_QWORD *)(*a2 + 728) + v253) = *(_QWORD *)(*a2 + 712) + v254;
                        v254 += 16;
                        v253 += 8;
                      }
                      while (16 * v292 != v254);
                      qsort(*(void **)(*a2 + 728), *(_QWORD *)(*a2 + 720), 8uLL, (int (__cdecl *)(const void *, const void *))geo::codec::compare);
                      v26 = 0;
                      LOBYTE(v15) = 1;
                      goto LABEL_175;
                    }
                  }
                  else
                  {
                    v165[91] = 0;
                  }
                  v25 = fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 2588);
                  v26 = 0;
                  goto LABEL_174;
                }
LABEL_175:
                if (a1)
                {
                  if (*(_BYTE *)v10)
                  {
                    v118 = geo::codec::Allocator::instance((geo::codec::Allocator *)v25);
                    v25 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v118 + 40))(v118, *(_QWORD *)(v10 + 40), 0);
                  }
                  v119 = geo::codec::Allocator::instance((geo::codec::Allocator *)v25);
                  v25 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v119 + 40))(v119, v10, 0);
                  if (v293)
                  {
                    if (*(_BYTE *)v293)
                    {
                      v120 = geo::codec::Allocator::instance((geo::codec::Allocator *)v25);
                      v25 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v120 + 40))(v120, *(_QWORD *)(v293 + 40), 0);
                    }
                    v121 = geo::codec::Allocator::instance((geo::codec::Allocator *)v25);
                    v25 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v121 + 40))(v121, v293, 0);
                  }
                  if (v29)
                  {
                    if (*(_BYTE *)v29)
                    {
                      v122 = geo::codec::Allocator::instance((geo::codec::Allocator *)v25);
                      v25 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v122 + 40))(v122, *(_QWORD *)(v29 + 40), 0);
                    }
                    v123 = geo::codec::Allocator::instance((geo::codec::Allocator *)v25);
                    v25 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v123 + 40))(v123, v29, 0);
                  }
                  if (v28)
                  {
                    if (*(_BYTE *)v28)
                    {
                      v124 = geo::codec::Allocator::instance((geo::codec::Allocator *)v25);
                      v25 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v124 + 40))(v124, *(_QWORD *)(v28 + 40), 0);
                    }
                    v125 = geo::codec::Allocator::instance((geo::codec::Allocator *)v25);
                    v25 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v125 + 40))(v125, v28, 0);
                  }
                  if (v27)
                  {
                    if (*(_BYTE *)v27)
                    {
                      v126 = geo::codec::Allocator::instance((geo::codec::Allocator *)v25);
                      v25 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v126 + 40))(v126, *(_QWORD *)(v27 + 40), 0);
                    }
                    v127 = geo::codec::Allocator::instance((geo::codec::Allocator *)v25);
                    v25 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v127 + 40))(v127, v27, 0);
                  }
                }
                v128 = geo::codec::Allocator::instance((geo::codec::Allocator *)v25);
                (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v128 + 40))(v128, v26, 0);
                goto LABEL_195;
              }
              v188 = 2446;
            }
            else
            {
              v188 = 2442;
            }
LABEL_343:
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v188);
            geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)&__key);
            v27 = 0;
            goto LABEL_174;
          }
          v186 = (FILE *)*MEMORY[0x1E0C80C10];
          v187 = 2348;
        }
        else
        {
          v186 = (FILE *)*MEMORY[0x1E0C80C10];
          v187 = 2345;
        }
      }
      else
      {
        v186 = (FILE *)*MEMORY[0x1E0C80C10];
        v187 = 2344;
      }
      fprintf(v186, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v187);
      v26 = 0;
      goto LABEL_311;
    }
    v26 = 0;
    v292 = 0;
    goto LABEL_251;
  }
  memset(__sz, 0, sizeof(__sz));
  if ((geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&__sz[8]) & 1) == 0)
  {
    v138 = 2274;
    goto LABEL_171;
  }
  if (!geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)&__sz[4]))
  {
    v138 = 2275;
    goto LABEL_171;
  }
  v109 = (geo::codec::Allocator *)geo::codec::chapterReadVarUint32((_QWORD *)v10, (unsigned int *)__sz);
  if (!(_DWORD)v109)
  {
    v138 = 2276;
    goto LABEL_171;
  }
  if (!*(_DWORD *)__sz)
  {
LABEL_239:
    v46 = *a2;
    goto LABEL_240;
  }
  *(_DWORD *)(*a2 + 3560) = *(_DWORD *)__sz;
  __key = 0u;
  v298 = 0u;
  memset(v312, 0, 32);
  v110 = geo::codec::Allocator::instance(v109);
  v111 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v110 + 24))(v110, 1, 72);
  v112 = *a2;
  *(_QWORD *)(*a2 + 3688) = v111;
  if (!v111)
  {
    v117 = 2284;
    goto LABEL_237;
  }
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(v112 + 3568), *(unsigned int *)__sz);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(*a2 + 3592), *(unsigned int *)__sz);
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)(*a2 + 3616), *(unsigned int *)__sz);
  std::vector<int>::resize((std::vector<int> *)(*a2 + 3640), *(unsigned int *)__sz);
  std::vector<int>::resize((std::vector<int> *)(*a2 + 3664), *(unsigned int *)__sz);
  if (!geo::codec::decodeIntCompressorArray<unsigned int>((_QWORD *)v10, (uint64_t *)&__key, __sz[8], __sz[4], *(unsigned int *)__sz, *(int8x16_t **)(*a2 + 3568)))
  {
    v117 = 2292;
    goto LABEL_237;
  }
  if (!geo::codec::decodeIntCompressorArray<unsigned int>((_QWORD *)v10, (uint64_t *)&__key, __sz[8], __sz[4], *(unsigned int *)__sz, *(int8x16_t **)(*a2 + 3592)))
  {
    v117 = 2293;
    goto LABEL_237;
  }
  if (!geo::codec::decodeIntCompressorArray<unsigned int>((_QWORD *)v10, (uint64_t *)&__key, __sz[8], __sz[4], *(unsigned int *)__sz, *(int8x16_t **)(*a2 + 3616)))
  {
    v117 = 2294;
    goto LABEL_237;
  }
  if (!geo::codec::decodeIntCompressorArray<int>((_QWORD *)v10, (uint64_t *)v312, __sz[8], __sz[4], *(unsigned int *)__sz, *(int8x16_t **)(*a2 + 3640)))
  {
    v117 = 2295;
    goto LABEL_237;
  }
  if (!geo::codec::decodeIntCompressorArray<int>((_QWORD *)v10, (uint64_t *)v312, __sz[8], __sz[4], *(unsigned int *)__sz, *(int8x16_t **)(*a2 + 3664)))
  {
    v117 = 2296;
    goto LABEL_237;
  }
  v114 = *(_QWORD *)(v10 + 48);
  v113 = *(_QWORD *)(v10 + 56);
  v115 = v113 >= v114;
  v116 = v113 - v114;
  if (!v115)
  {
    v117 = 2298;
LABEL_237:
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v117);
    v139 = 0;
    v140 = 1;
    goto LABEL_238;
  }
  *(_QWORD *)(v10 + 8) = *(_QWORD *)(v10 + 40) + v114;
  *(_BYTE *)(v10 + 32) = 1;
  *(_QWORD *)(v10 + 16) = v116;
  *(_QWORD *)(v10 + 24) = 0;
  v262 = geo::codec::decodeSectionZEncoding((geo::codec::Allocator *)(v10 + 8), *(_QWORD **)(*a2 + 3688));
  if ((v262 & 1) == 0)
  {
    v117 = 2300;
    goto LABEL_237;
  }
  v263 = *(_QWORD *)(v10 + 48) + (*(_QWORD *)(v10 + 24) >> 3);
  if ((*(_QWORD *)(v10 + 24) & 7) != 0)
    ++v263;
  *(_QWORD *)(v10 + 48) = v263;
  *(_BYTE *)(v10 + 32) = 0;
  v264 = geo::codec::Allocator::instance((geo::codec::Allocator *)v262);
  *(_QWORD *)(*(_QWORD *)(*a2 + 3688) + 8) = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v264 + 24))(v264, *(unsigned int *)__sz, 8);
  if (*(_DWORD *)__sz)
  {
    v265 = 0;
    v139 = 1;
    do
    {
      v266 = *a2;
      v267 = *(_DWORD *)(*(_QWORD *)(*a2 + 3592) + 4 * v265);
      v268 = *(_DWORD *)(*(_QWORD *)(*a2 + 3616) + 4 * v265);
      LODWORD(v310) = *(_DWORD *)(*(_QWORD *)(*a2 + 3568) + 4 * v265);
      HIDWORD(v310) = v267;
      LODWORD(v311) = v268;
      v140 = 0;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<GhostPointKey,unsigned int>,std::__unordered_map_hasher<GhostPointKey,std::__hash_value_type<GhostPointKey,unsigned int>,GhostPointHash,GhostPointKeyEqual,true>,std::__unordered_map_equal<GhostPointKey,std::__hash_value_type<GhostPointKey,unsigned int>,GhostPointKeyEqual,GhostPointHash,true>,std::allocator<std::__hash_value_type<GhostPointKey,unsigned int>>>::__emplace_unique_key_args<GhostPointKey,std::piecewise_construct_t const&,std::tuple<GhostPointKey const&>,std::tuple<>>((float *)(v266 + 3696), (unsigned int *)&v310, (uint64_t)&v310)+ 7) = v265++;
    }
    while (v265 < *(unsigned int *)__sz);
  }
  else
  {
    v140 = 0;
    v139 = 1;
  }
LABEL_238:
  mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)v312);
  v25 = mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&__key);
  if ((v139 & 1) != 0)
    goto LABEL_239;
  if ((v140 & 1) != 0)
    goto LABEL_173;
LABEL_195:
  v129 = v300;
  if (v300)
  {
    v130 = (unint64_t *)&v300->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = (uint64_t *)v301;
  v4 = v302;
  v23 = rep;
  v24.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v312[0] = v132;
  if (v132)
  {
LABEL_201:
    *(_QWORD *)&__key = v312;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v4 + 1912, (uint64_t *)v312, (uint64_t)&std::piecewise_construct, (uint64_t **)&__key)+ 4) = (double)((v24.__d_.__rep_ - v23) / 1000) * 0.001;
  }
LABEL_202:
  v133 = v303;
  if (v303)
  {
    v134 = (unint64_t *)&v303->__shared_owners_;
    do
      v135 = __ldaxr(v134);
    while (__stlxr(v135 - 1, v134));
    if (!v135)
    {
      ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
      std::__shared_weak_count::__release_weak(v133);
    }
  }
  return v15 & 1;
}

void sub_1886025C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;

  mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor(v42 - 144);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a37);
  std::shared_ptr<FeatureStyleAttributes>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v42 - 248));
  _Unwind_Resume(a1);
}

uint64_t geo::codec::chapterReadVarInt64(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v3 + 1;
  if (v3 + 1 > v2)
  {
    result = 0;
    *a2 = 0;
    return result;
  }
  v6 = a1[5];
  v7 = *(_BYTE *)(v6 + v3);
  a1[6] = v4;
  v8 = v7 & 0x7F;
  if ((v7 & 0x80) == 0)
    goto LABEL_4;
  v9 = v3 + 2;
  if (v3 + 2 > v2)
  {
    result = 0;
    *a2 = v8;
    return result;
  }
  v10 = *(char *)(v6 + v4);
  a1[6] = v9;
  v8 |= (unint64_t)(v10 & 0x7F) << 7;
  if ((v10 & 0x80000000) == 0)
    goto LABEL_4;
  v11 = v3 + 3;
  if (v3 + 3 > v2)
  {
    result = 0;
    *a2 = v8;
    return result;
  }
  v12 = *(char *)(v6 + v9);
  a1[6] = v11;
  v8 |= (unint64_t)(v12 & 0x7F) << 14;
  if ((v12 & 0x80000000) == 0)
    goto LABEL_4;
  v13 = v3 + 4;
  if (v3 + 4 > v2)
  {
    result = 0;
    *a2 = v8;
    return result;
  }
  v14 = *(char *)(v6 + v11);
  a1[6] = v13;
  v8 |= (unint64_t)(v14 & 0x7F) << 21;
  if ((v14 & 0x80000000) == 0)
    goto LABEL_4;
  v15 = v3 + 5;
  if (v3 + 5 > v2)
  {
    result = 0;
    *a2 = v8;
    return result;
  }
  v16 = *(char *)(v6 + v13);
  a1[6] = v15;
  v8 |= (unint64_t)(v16 & 0x7F) << 28;
  if ((v16 & 0x80000000) == 0)
    goto LABEL_4;
  v17 = v3 + 6;
  if (v3 + 6 > v2)
  {
    result = 0;
    *a2 = v8;
    return result;
  }
  v18 = *(char *)(v6 + v15);
  a1[6] = v17;
  v8 |= (unint64_t)(v18 & 0x7F) << 35;
  if ((v18 & 0x80000000) == 0)
    goto LABEL_4;
  v19 = v3 + 7;
  if (v3 + 7 > v2)
  {
    result = 0;
    *a2 = v8;
    return result;
  }
  v20 = *(char *)(v6 + v17);
  a1[6] = v19;
  v8 |= (unint64_t)(v20 & 0x7F) << 42;
  if ((v20 & 0x80000000) == 0)
    goto LABEL_4;
  v21 = v3 + 8;
  if (v3 + 8 > v2)
  {
    result = 0;
    *a2 = v8;
    return result;
  }
  v22 = *(char *)(v6 + v19);
  a1[6] = v21;
  v8 |= (unint64_t)(v22 & 0x7F) << 49;
  if ((v22 & 0x80000000) == 0)
    goto LABEL_4;
  v23 = v3 + 9;
  if (v3 + 9 > v2)
  {
    result = 0;
    *a2 = v8;
    return result;
  }
  v24 = *(char *)(v6 + v21);
  a1[6] = v23;
  v8 |= (unint64_t)(v24 & 0x7F) << 56;
  if ((v24 & 0x80000000) == 0)
  {
LABEL_4:
    result = 1;
    *a2 = v8;
    return result;
  }
  v25 = v3 + 10;
  if (v25 <= v2)
  {
    v26 = *(unsigned __int8 *)(v6 + v23);
    a1[6] = v25;
    if ((v26 & 0x80) != 0)
    {
      return 0;
    }
    else
    {
      result = 1;
      *a2 = v8 | (v26 << 63);
    }
  }
  else
  {
    result = 0;
    *a2 = v8;
  }
  return result;
}

uint64_t geo::codec::chapterForTag(_QWORD *a1, int a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  unsigned int v7;

  v3 = a1[1];
  if (!v3)
    return 0;
  v6 = 0;
  v7 = 0;
  while (*(unsigned __int16 *)(*a1 + 16 * v6) != a2)
  {
    v6 = ++v7;
    if (v3 <= v7)
      return 0;
  }
  return geo::codec::chapterAt((uint64_t)a1, v7, a2, a3);
}

void std::vector<GeoCodecsMultiSectionFeature,geo::StdAllocator<GeoCodecsMultiSectionFeature,geo::codec::Allocator>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;

  v4 = a1[1];
  v5 = a1[2];
  if (0x4EC4EC4EC4EC4EC5 * ((v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = v4 + 104 * a2;
      v12 = 104 * a2;
      do
      {
        if (v4)
        {
          *(_QWORD *)(v4 + 96) = 0;
          *(_OWORD *)(v4 + 64) = 0uLL;
          *(_OWORD *)(v4 + 80) = 0uLL;
          *(_OWORD *)(v4 + 32) = 0uLL;
          *(_OWORD *)(v4 + 48) = 0uLL;
          *(_OWORD *)v4 = 0uLL;
          *(_OWORD *)(v4 + 16) = 0uLL;
        }
        v4 += 104;
        v12 -= 104;
      }
      while (v12);
      v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    v6 = 0x4EC4EC4EC4EC4EC5 * ((v4 - *a1) >> 3);
    v7 = v6 + a2;
    if (v6 + a2 > 0x276276276276276)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v8 = 0x4EC4EC4EC4EC4EC5 * ((v5 - *a1) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x13B13B13B13B13BLL)
      v9 = 0x276276276276276;
    else
      v9 = v7;
    if (v9)
      v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[3] + 16))(a1[3], 104 * v9, 8);
    else
      v10 = 0;
    v13 = v10 + 104 * v6;
    v14 = 104 * a2;
    v15 = v13 + 104 * a2;
    v16 = 0uLL;
    v17 = v13;
    do
    {
      if (v17)
      {
        *(_QWORD *)(v17 + 96) = 0;
        *(_OWORD *)(v17 + 64) = 0uLL;
        *(_OWORD *)(v17 + 80) = 0uLL;
        *(_OWORD *)(v17 + 32) = 0uLL;
        *(_OWORD *)(v17 + 48) = 0uLL;
        *(_OWORD *)v17 = 0uLL;
        *(_OWORD *)(v17 + 16) = 0uLL;
      }
      v17 += 104;
      v14 -= 104;
    }
    while (v14);
    v18 = v10 + 104 * v9;
    v19 = *a1;
    v20 = a1[1];
    if (v20 != *a1)
    {
      v21 = 0;
      do
      {
        v22 = v13 + v21;
        v23 = v20 + v21;
        *(_OWORD *)(v22 - 104) = *(_OWORD *)(v20 + v21 - 104);
        *(_QWORD *)(v23 - 104) = 0;
        *(_QWORD *)(v23 - 96) = 0;
        *(_OWORD *)(v22 - 88) = *(_OWORD *)(v20 + v21 - 88);
        *(_QWORD *)(v22 - 72) = *(_QWORD *)(v20 + v21 - 72);
        *(_QWORD *)(v23 - 80) = 0;
        *(_QWORD *)(v23 - 72) = 0;
        v24 = *(_OWORD *)(v20 + v21 - 64);
        v25 = *(_OWORD *)(v20 + v21 - 48);
        *(_DWORD *)(v22 - 32) = *(_DWORD *)(v20 + v21 - 32);
        *(_OWORD *)(v22 - 64) = v24;
        *(_OWORD *)(v22 - 48) = v25;
        v16 = *(__n128 *)(v20 + v21 - 24);
        *(_QWORD *)(v22 - 8) = *(_QWORD *)(v20 + v21 - 8);
        *(__n128 *)(v22 - 24) = v16;
        v21 -= 104;
      }
      while (v20 + v21 != v19);
      v20 = *a1;
      v26 = a1[1];
      *a1 = v13 + v21;
      a1[1] = v15;
      v27 = a1[2];
      a1[2] = v18;
      while (1)
      {
        if (v26 == v20)
          goto LABEL_37;
        v28 = *(std::__shared_weak_count **)(v26 - 72);
        if (!v28)
          break;
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldaxr(p_shared_owners);
        while (__stlxr(v30 - 1, p_shared_owners));
        if (v30)
          break;
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
        v31 = *(std::__shared_weak_count **)(v26 - 96);
        if (v31)
          goto LABEL_33;
LABEL_26:
        v26 -= 104;
      }
      v31 = *(std::__shared_weak_count **)(v26 - 96);
      if (!v31)
        goto LABEL_26;
LABEL_33:
      std::__shared_weak_count::__release_weak(v31);
      goto LABEL_26;
    }
    *a1 = v13;
    a1[1] = v15;
    v27 = a1[2];
    a1[2] = v18;
LABEL_37:
    if (v20)
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)a1[3] + 40))(a1[3], v20, v27 - v20, v16);
  }
}

uint64_t geo::codec::decodeVertices(uint64_t a1, geo::codec::Allocator **a2, uint64_t *a3, int a4)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27[5];
  char v28;

  result = geo::codec::chapterReadVarUint32((_QWORD *)a1, &v26);
  if ((_DWORD)result)
  {
    result = geo::codec::chapterReadVarUint32((_QWORD *)a1, v27);
    if ((_DWORD)result)
    {
      v10 = *(_QWORD *)(a1 + 48);
      v9 = *(_QWORD *)(a1 + 56);
      v11 = v9 - v10;
      if (v9 >= v10)
      {
        v12 = 0;
        *(_BYTE *)(a1 + 32) = 1;
        v14 = *(_QWORD *)(a1 + 40) + v10;
        *(_QWORD *)(a1 + 16) = v11;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 8) = v14;
        v13 = 8 * v11;
        if (8 * v11 < 6)
          return 0;
      }
      else
      {
        v12 = *(_QWORD *)(a1 + 24);
        v13 = 8 * *(_QWORD *)(a1 + 16);
        if (v12 + 6 > v13)
          return 0;
      }
      v15 = 0;
      v16 = *(_QWORD *)(a1 + 8);
      v17 = 6;
      do
      {
        v18 = 8 - (v12 & 7);
        if (v17 < v18)
          v18 = v17;
        v15 = (*(unsigned __int8 *)(v16 + (v12 >> 3)) >> (8 - (v12 & 7) - v18)) & ~(-1 << v18) | (v15 << v18);
        v12 += v18;
        *(_QWORD *)(a1 + 24) = v12;
        v17 -= v18;
      }
      while (v17);
      v27[1] = v15;
      if (v12 + 6 > v13)
        return 0;
      v19 = 0;
      v20 = 6;
      do
      {
        v21 = 8 - (v12 & 7);
        if (v20 < v21)
          v21 = v20;
        v19 = (*(unsigned __int8 *)(v16 + (v12 >> 3)) >> (8 - (v12 & 7) - v21)) & ~(-1 << v21) | (v19 << v21);
        v12 += v21;
        *(_QWORD *)(a1 + 24) = v12;
        v20 -= v21;
      }
      while (v20);
      v27[3] = v19;
      if (v12 + 4 <= v13)
      {
        v22 = 0;
        v23 = 4;
        do
        {
          v24 = 8 - (v12 & 7);
          if (v23 < v24)
            v24 = v23;
          v22 = (*(unsigned __int8 *)(v16 + (v12 >> 3)) >> (8 - (v12 & 7) - v24)) & ~(-1 << v24) | (v22 << v24);
          v12 += v24;
          *(_QWORD *)(a1 + 24) = v12;
          v23 -= v24;
        }
        while (v23);
        v27[4] = v22;
        if (v12 + 1 <= v13)
        {
          v25 = *(unsigned __int8 *)(v16 + (v12 >> 3));
          *(_QWORD *)(a1 + 24) = v12 + 1;
          v28 = (v25 >> (~(_BYTE)v12 & 7)) & 1;
          v27[2] = v15;
          return geo::codec::decodeVerticesAfterPreamble(a1, &v26, a2, a3, a4);
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t geo::codec::_makeSpaceForShields(geo::codec::Allocator *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v4 = *a3;
  v5 = *(_QWORD *)(*a3 + 1072);
  if (!a1)
    goto LABEL_5;
  *(_QWORD *)(v4 + 1072) = (char *)a1 + v5;
  v8 = *(_QWORD *)(v4 + 1064);
  v9 = geo::codec::Allocator::instance(a1);
  v10 = *a3;
  if (!v8)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 24))(v9, *(_QWORD *)(v10 + 1072), 32);
    *(_QWORD *)(*a3 + 1064) = result;
    if (result)
      goto LABEL_5;
LABEL_7:
    *a2 = 0;
    return result;
  }
  v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v9 + 32))(v9, *(_QWORD *)(v10 + 1064), 32 * *(_QWORD *)(v10 + 1072));
  if (v11)
  {
    *(_QWORD *)(*a3 + 1064) = v11;
    bzero((void *)(v11 + 32 * v5), 32 * (_QWORD)a1);
    result = *(_QWORD *)(*a3 + 1064);
    if (result)
    {
LABEL_5:
      result = 1;
      *a2 = v5;
      return result;
    }
    goto LABEL_7;
  }
  v13 = geo::codec::Allocator::instance(0);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v13 + 40))(v13, *(_QWORD *)(*a3 + 1064), 0);
  result = 0;
  *(_QWORD *)(*a3 + 1064) = 0;
  *a2 = 0;
  return result;
}

uint64_t GEOCreatePhoneNumberForStringRepresentation(uint64_t a1)
{
  if (a1 && MEMORY[0x1E0D71050])
    return CFPhoneNumberCreate();
  else
    return 0;
}

void sub_188602FF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188603958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::__list_imp<geo::Batch>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t LoadItem::foreachRequester(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (result)
  {
    v3 = (_QWORD *)result;
    do
    {
      v4 = *(_QWORD *)(a2 + 24);
      if (!v4)
        std::__throw_bad_function_call[abi:ne180100]();
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 48))(v4, v3 + 3);
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  return result;
}

uint64_t LoadItem::reason(LoadItem *this)
{
  unsigned int i;

  for (i = 0; this; this = *(LoadItem **)this)
  {
    switch(*((_BYTE *)this + 152))
    {
      case 1:
        goto LABEL_11;
      case 2:
        if (i && i != 5)
          continue;
        goto LABEL_11;
      case 3:
        if (i > 5 || ((1 << i) & 0x25) == 0)
          continue;
        goto LABEL_11;
      case 4:
        if (i <= 5 && ((1 << i) & 0x2D) != 0)
          goto LABEL_11;
        continue;
      case 5:
        if (!i)
LABEL_11:
          i = *((unsigned __int8 *)this + 152);
        break;
      default:
        continue;
    }
  }
  return i;
}

void _ZNSt3__110__function6__funcIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__5NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEEclES7_(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD block[4];
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (**(_BYTE **)(a1 + 40))
  {
    v4 = a2[15];
    if ((v4 & 0x40) != 0)
    {
      v5 = **(void ***)(a1 + 48);
      if (!v5)
      {
        objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = *(void ***)(a1 + 48);
        v8 = *v7;
        *v7 = (void *)v6;

        v5 = **(void ***)(a1 + 48);
      }
      objc_msgSend(v5, "addObject:", a2[1]);
    }
    else if ((v4 & 0x20) == 0)
    {
      return;
    }
  }
  v9 = (void *)MEMORY[0x18D765024](a2[13]);
  v10 = *(id *)(a1 + 32);
  v11 = objc_msgSend(*(id *)(a1 + 32), "length");
  if ((a2[15] & 4) != 0)
  {

    v10 = 0;
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = ___ZZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_ENK3__5clERKN8LoadItem9RequesterE_block_invoke;
  block[3] = &unk_1E1C00410;
  v19 = *(_OWORD *)(a1 + 16);
  v12 = v9;
  v17 = v12;
  v13 = v10;
  v15 = v13;
  v18 = v11;
  v16 = *(id *)(a1 + 8);
  LoadItem::Requester::performAsyncOnCallbackQueue((uint64_t)a2, block);

}

void sub_188603CA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void LoadItem::Requester::performAsyncOnCallbackQueue(uint64_t a1, dispatch_block_t block)
{
  id v3;

  v3 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, (dispatch_qos_class_t)*(_DWORD *)(a1 + 156), 0, block);
  dispatch_async(*(dispatch_queue_t *)(a1 + 56), v3);

}

void _ZNSt3__110__function6__funcIZZ41__GEOTileLoader__loadedTile_forKey_info__EUb0_E3__5NS_9allocatorIS2_EEFvRN8LoadItem9RequesterEEE18destroy_deallocateEv(id *a1)
{

  operator delete(a1);
}

void sub_1886041A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t LoadItem::options(LoadItem *this)
{
  _QWORD *v1;
  uint64_t result;
  int v3;
  int v4;
  char v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  if (!*((_QWORD *)this + 11))
    return 0;
  v1 = (_QWORD *)*((_QWORD *)this + 10);
  if (!v1)
    return 524;
  LOBYTE(result) = 0;
  LOBYTE(v3) = 0;
  LOBYTE(v4) = 0;
  v5 = 0;
  LOBYTE(v6) = 1;
  LOBYTE(v7) = 1;
  LOBYTE(v8) = 1;
  do
  {
    v9 = v1[18];
    result = (v9 | result) & 1;
    v3 = v3 & 1 | ((v9 & 2) != 0);
    v5 |= (v9 & 0x60) != 0;
    v4 = (v4 | BYTE1(v9)) & 1;
    v8 = v8 & ((v9 & 8) != 0);
    v7 = v7 & ((v9 & 4) != 0);
    v6 = v6 & ((v9 & 0x200) != 0);
    v1 = (_QWORD *)*v1;
  }
  while (v1);
  if (v3)
    result |= 2uLL;
  if ((v5 & 1) != 0)
    result |= 0x20uLL;
  if (v4)
  {
    result |= 0x100uLL;
    if ((v8 & 1) != 0)
      goto LABEL_11;
  }
  else if (v8)
  {
LABEL_11:
    result |= 8uLL;
    if ((v7 & 1) == 0)
      goto LABEL_12;
    goto LABEL_19;
  }
  if (!v7)
  {
LABEL_12:
    if (v6)
      return result | 0x200;
    return result;
  }
LABEL_19:
  if ((v6 & 1) != 0)
    return result | 0x204;
  else
    return result | 4;
}

void sub_18860490C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char *a46)
{
  void *v46;
  void *v47;
  void *v48;
  char *v49;
  char *v51;
  uint64_t v52;

  v51 = a46;
  if (a46 == v49)
  {
    v52 = 4;
    v51 = &a43;
  }
  else
  {
    if (!a46)
      goto LABEL_6;
    v52 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v51 + 8 * v52))();
LABEL_6:

  _Unwind_Resume(a1);
}

void sub_188604B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void _pruneErrors(GEOTileLoader *a1)
{
  double v1;
  GEOTileLoader *v2;
  GEOTileLoaderInternal *internal;
  unint64_t v4;
  double v5;
  GEOTileLoader *v6;

  v6 = a1;
  GEOMachAbsoluteTimeGetCurrent();
  v2 = v6;
  internal = v6->_internal;
  v4 = *((_QWORD *)internal + 17);
  if (v4)
  {
    v5 = v1;
    while (v5
          - *(double *)(*(_QWORD *)(*((_QWORD *)internal + 13) + 8 * ((v4 + *((_QWORD *)internal + 16) - 1) / 0x49))
                      + 56 * ((v4 + *((_QWORD *)internal + 16) - 1) % 0x49)) > 300.0)
    {
      std::deque<ErrorInfo>::pop_back((_QWORD *)internal + 12);
      v2 = v6;
      internal = v6->_internal;
      v4 = *((_QWORD *)internal + 17);
      if (!v4)
        goto LABEL_8;
    }
    if (v4 >= 0x11)
    {
      do
      {
        std::deque<ErrorInfo>::pop_back((_QWORD *)internal + 12);
        v2 = v6;
        internal = v6->_internal;
      }
      while (*((_QWORD *)internal + 17) > 0x10uLL);
    }
  }
LABEL_8:

}

void sub_188604C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_188605498(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *LoadItem::addRequester(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, char a8, double a9, unsigned int a10, _OWORD *a11, int a12, uint64_t a13)
{
  NSString *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  unint64_t v33;
  id v34;
  id v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  uint64_t **v41;
  uint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  NSString *v46;
  __int128 v47;
  id v48;
  float v49;
  float v50;
  _BOOL8 v51;
  unint64_t v52;
  unint64_t v53;
  int8x8_t prime;
  void *v55;
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  uint8x8_t v60;
  unint64_t v61;
  uint8x8_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  void *v70;
  void *v71;
  void *v72;
  id v73;
  id v74;
  void *v75;
  id v76;
  NSString *v79;
  void *v80;
  uint64_t (**v81)();
  NSString *v82;
  uint64_t (**v83)();
  id v84;
  _QWORD v85[3];
  uint64_t (**v86)();
  id v87;
  uint64_t (**v88)();
  id v89;
  __int128 v90;
  _BYTE v91[24];
  id v92;
  __int128 v93;
  NSString *v94;
  _QWORD v95[3];
  _QWORD v96[3];
  _QWORD v97[3];
  _QWORD v98[3];
  _QWORD v99[3];
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  id v103;
  __int128 v104;
  _QWORD v105[2];
  char v106;

  v19 = a2;
  v20 = a3;
  v21 = a4;
  v74 = a5;
  v73 = a6;
  LoadItem::deleteRequester((int8x8_t *)a1, v19, 1, 1);
  v22 = v73;
  v23 = v74;
  v24 = v21;
  v25 = v20;
  v81 = &off_1E1BF64C0;
  v82 = v19;
  v26 = v25;
  v83 = &off_1E1BF6480;
  v84 = v26;

  geo::_retain_ptr<NSObject  {objcproto17OS_dispatch_queue}* {__strong},geo::_retain_dispatch_arc<NSObject  {objcproto17OS_dispatch_queue}* {__strong}>,geo::_release_dispatch_arc,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(v85, v24);
  v27 = v23;
  v28 = v27;
  v86 = &off_1E1BF6520;
  v87 = 0;
  if (v27)
    v29 = (void *)objc_msgSend(v27, "copy");
  else
    v29 = (void *)MEMORY[0x18D765024]();
  v30 = v87;
  v87 = v29;

  v31 = v22;
  v88 = &off_1E1BF6500;
  v89 = 0;
  v76 = v26;
  v75 = v28;
  v80 = v31;
  if (v31)
    v32 = (void *)objc_msgSend(v31, "copy");
  else
    v32 = (void *)MEMORY[0x18D765024]();
  v33 = a10;
  v34 = v89;
  v89 = v32;

  *(_QWORD *)&v90 = a7;
  BYTE8(v90) = a8;
  HIDWORD(v90) = a10;
  v91[0] = 0;
  *(_DWORD *)&v91[20] = a12;
  v92 = (id)voucher_copy();
  *(_QWORD *)&v93 = a13;
  *((double *)&v93 + 1) = a9;
  v91[1] = a11 != 0;
  if (a11)
    *(_OWORD *)&v91[4] = *a11;

  v79 = v82;
  v94 = v79;
  geo::_retain_ptr<NSString * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr((uint64_t)v95, (uint64_t)&v81);
  geo::_retain_ptr<GEOApplicationAuditToken * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr((uint64_t)v96, (uint64_t)&v83);
  geo::_retain_ptr<NSObject  {objcproto17OS_dispatch_queue}* {__strong},geo::_retain_dispatch_arc<NSObject  {objcproto17OS_dispatch_queue}* {__strong}>,geo::_release_dispatch_arc,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr((uint64_t)v97, (uint64_t)v85);
  geo::_retain_ptr<void({block_pointer} {__strong})(void),geo::_copy_block_arc<void({block_pointer} {__strong})(void)>,geo::_release_block_arc<void({block_pointer} {__strong})(void)>,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(v98, (uint64_t)&v86);
  geo::_retain_ptr<void({block_pointer} {__strong})(_GEOTileKey const*,GEOTileData *,unsigned long,NSError *,NSDictionary *),geo::_copy_block_arc<void({block_pointer} {__strong})(_GEOTileKey const*,GEOTileData *,unsigned long,NSError *,NSDictionary *)>,geo::_release_block_arc<void({block_pointer} {__strong})(_GEOTileKey const*,GEOTileData *,unsigned long,NSError *,NSDictionary *)>,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(v99, (uint64_t)&v88);
  v100 = v90;
  v101 = *(_OWORD *)v91;
  v35 = v92;
  v92 = 0;
  v102 = *(_QWORD *)&v91[16];
  v103 = v35;
  v104 = v93;
  v36 = -[NSString hash](v94, "hash");
  v37 = v36;
  v38 = *(_QWORD *)(a1 + 72);
  if (!v38)
    goto LABEL_26;
  v39 = (uint8x8_t)vcnt_s8((int8x8_t)v38);
  v39.i16[0] = vaddlv_u8(v39);
  v40 = v39.u32[0];
  if (v39.u32[0] > 1uLL)
  {
    v33 = v36;
    if (v36 >= v38)
      v33 = v36 % v38;
  }
  else
  {
    v33 = (v38 - 1) & v36;
  }
  v41 = *(uint64_t ***)(*(_QWORD *)(a1 + 64) + 8 * v33);
  if (!v41 || (v42 = *v41) == 0)
  {
LABEL_26:
    v44 = operator new(0xD0uLL);
    v45 = (_QWORD *)(a1 + 80);
    v105[0] = v44;
    v105[1] = a1 + 80;
    *v44 = 0;
    v44[1] = v37;
    v46 = v94;
    v94 = 0;
    v44[2] = v46;
    geo::_retain_ptr<NSString * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr((uint64_t)(v44 + 3), (uint64_t)v95);
    geo::_retain_ptr<GEOApplicationAuditToken * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr((uint64_t)(v44 + 6), (uint64_t)v96);
    geo::_retain_ptr<NSObject  {objcproto17OS_dispatch_queue}* {__strong},geo::_retain_dispatch_arc<NSObject  {objcproto17OS_dispatch_queue}* {__strong}>,geo::_release_dispatch_arc,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr((uint64_t)(v44 + 9), (uint64_t)v97);
    geo::_retain_ptr<void({block_pointer} {__strong})(void),geo::_copy_block_arc<void({block_pointer} {__strong})(void)>,geo::_release_block_arc<void({block_pointer} {__strong})(void)>,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(v44 + 12, (uint64_t)v98);
    geo::_retain_ptr<void({block_pointer} {__strong})(_GEOTileKey const*,GEOTileData *,unsigned long,NSError *,NSDictionary *),geo::_copy_block_arc<void({block_pointer} {__strong})(_GEOTileKey const*,GEOTileData *,unsigned long,NSError *,NSDictionary *)>,geo::_release_block_arc<void({block_pointer} {__strong})(_GEOTileKey const*,GEOTileData *,unsigned long,NSError *,NSDictionary *)>,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(v44 + 15, (uint64_t)v99);
    v47 = v101;
    *((_OWORD *)v44 + 9) = v100;
    *((_OWORD *)v44 + 10) = v47;
    v48 = v103;
    v103 = 0;
    v44[22] = v102;
    v44[23] = v48;
    *((_OWORD *)v44 + 12) = v104;
    v106 = 1;
    v49 = (float)(unint64_t)(*(_QWORD *)(a1 + 88) + 1);
    v50 = *(float *)(a1 + 96);
    if (v38 && (float)(v50 * (float)v38) >= v49)
    {
LABEL_72:
      v67 = *(_QWORD **)(*(_QWORD *)(a1 + 64) + 8 * v33);
      v42 = (uint64_t *)v105[0];
      if (v67)
      {
        *(_QWORD *)v105[0] = *v67;
        v26 = v76;
        v70 = v24;
        v71 = v75;
      }
      else
      {
        *(_QWORD *)v105[0] = *(_QWORD *)(a1 + 80);
        *(_QWORD *)(a1 + 80) = v42;
        *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v33) = v45;
        v26 = v76;
        v70 = v24;
        v71 = v75;
        if (!*v42)
        {
LABEL_81:
          v105[0] = 0;
          ++*(_QWORD *)(a1 + 88);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},LoadItem::Requester>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},LoadItem::Requester>,void *>>>>::reset[abi:ne180100]((uint64_t)v105);
          goto LABEL_82;
        }
        v68 = *(_QWORD *)(*v42 + 8);
        if ((v38 & (v38 - 1)) != 0)
        {
          if (v68 >= v38)
            v68 %= v38;
        }
        else
        {
          v68 &= v38 - 1;
        }
        v67 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v68);
      }
      *v67 = v42;
      goto LABEL_81;
    }
    v51 = 1;
    if (v38 >= 3)
      v51 = (v38 & (v38 - 1)) != 0;
    v52 = v51 | (2 * v38);
    v53 = vcvtps_u32_f32(v49 / v50);
    if (v52 <= v53)
      prime = (int8x8_t)v53;
    else
      prime = (int8x8_t)v52;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v38 = *(_QWORD *)(a1 + 72);
    if (*(_QWORD *)&prime > v38)
      goto LABEL_38;
    if (*(_QWORD *)&prime < v38)
    {
      v61 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 88) / *(float *)(a1 + 96));
      if (v38 < 3 || (v62 = (uint8x8_t)vcnt_s8((int8x8_t)v38), v62.i16[0] = vaddlv_u8(v62), v62.u32[0] > 1uLL))
      {
        v61 = std::__next_prime(v61);
      }
      else
      {
        v63 = 1 << -(char)__clz(v61 - 1);
        if (v61 >= 2)
          v61 = v63;
      }
      if (*(_QWORD *)&prime <= v61)
        prime = (int8x8_t)v61;
      if (*(_QWORD *)&prime >= v38)
      {
        v38 = *(_QWORD *)(a1 + 72);
      }
      else
      {
        if (prime)
        {
LABEL_38:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v55 = operator new(8 * *(_QWORD *)&prime);
          v56 = *(void **)(a1 + 64);
          *(_QWORD *)(a1 + 64) = v55;
          if (v56)
            operator delete(v56);
          v57 = 0;
          *(int8x8_t *)(a1 + 72) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v57++) = 0;
          while (*(_QWORD *)&prime != v57);
          v58 = (_QWORD *)*v45;
          if (*v45)
          {
            v59 = v58[1];
            v60 = (uint8x8_t)vcnt_s8(prime);
            v60.i16[0] = vaddlv_u8(v60);
            if (v60.u32[0] > 1uLL)
            {
              if (v59 >= *(_QWORD *)&prime)
                v59 %= *(_QWORD *)&prime;
            }
            else
            {
              v59 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v59) = v45;
            v64 = (_QWORD *)*v58;
            if (*v58)
            {
              do
              {
                v65 = v64[1];
                if (v60.u32[0] > 1uLL)
                {
                  if (v65 >= *(_QWORD *)&prime)
                    v65 %= *(_QWORD *)&prime;
                }
                else
                {
                  v65 &= *(_QWORD *)&prime - 1;
                }
                if (v65 != v59)
                {
                  v66 = *(_QWORD *)(a1 + 64);
                  if (!*(_QWORD *)(v66 + 8 * v65))
                  {
                    *(_QWORD *)(v66 + 8 * v65) = v58;
                    goto LABEL_63;
                  }
                  *v58 = *v64;
                  *v64 = **(_QWORD **)(*(_QWORD *)(a1 + 64) + 8 * v65);
                  **(_QWORD **)(*(_QWORD *)(a1 + 64) + 8 * v65) = v64;
                  v64 = v58;
                }
                v65 = v59;
LABEL_63:
                v58 = v64;
                v64 = (_QWORD *)*v64;
                v59 = v65;
              }
              while (v64);
            }
          }
          v38 = (unint64_t)prime;
          goto LABEL_67;
        }
        v72 = *(void **)(a1 + 64);
        *(_QWORD *)(a1 + 64) = 0;
        if (v72)
          operator delete(v72);
        v38 = 0;
        *(_QWORD *)(a1 + 72) = 0;
      }
    }
LABEL_67:
    if ((v38 & (v38 - 1)) != 0)
    {
      if (v37 >= v38)
        v33 = v37 % v38;
      else
        v33 = v37;
    }
    else
    {
      v33 = (v38 - 1) & v37;
    }
    goto LABEL_72;
  }
  while (1)
  {
    v43 = v42[1];
    if (v43 == v37)
      break;
    if (v40 > 1)
    {
      if (v43 >= v38)
        v43 %= v38;
    }
    else
    {
      v43 &= v38 - 1;
    }
    if (v43 != v33)
      goto LABEL_26;
LABEL_25:
    v42 = (uint64_t *)*v42;
    if (!v42)
      goto LABEL_26;
  }
  if ((objc_msgSend((id)v42[2], "isEqualToString:", v94) & 1) == 0)
    goto LABEL_25;
  v70 = v24;
  v71 = v75;
LABEL_82:

  v99[0] = &off_1E1BF6500;
  v98[0] = &off_1E1BF6520;

  v97[0] = &off_1E1BF64E0;
  v96[0] = &off_1E1BF6480;

  v95[0] = &off_1E1BF64C0;
  v88 = &off_1E1BF6500;

  v86 = &off_1E1BF6520;
  v85[0] = &off_1E1BF64E0;

  v83 = &off_1E1BF6480;
  v81 = &off_1E1BF64C0;

  return v42 + 3;
}

void sub_188605D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37)
{
  void *v37;
  void *v38;

  _Unwind_Resume(a1);
}

_QWORD *geo::_retain_ptr<void({block_pointer} {__strong})(void),geo::_copy_block_arc<void({block_pointer} {__strong})(void)>,geo::_release_block_arc<void({block_pointer} {__strong})(void)>,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;

  *a1 = &off_1E1BF6520;
  a1[1] = 0;
  v4 = MEMORY[0x18D765024](*(_QWORD *)(a2 + 8));
  v5 = (void *)a1[1];
  a1[1] = v4;

  v6 = *(void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;

  return a1;
}

_QWORD *geo::_retain_ptr<void({block_pointer} {__strong})(_GEOTileKey const*,GEOTileData *,unsigned long,NSError *,NSDictionary *),geo::_copy_block_arc<void({block_pointer} {__strong})(_GEOTileKey const*,GEOTileData *,unsigned long,NSError *,NSDictionary *)>,geo::_release_block_arc<void({block_pointer} {__strong})(_GEOTileKey const*,GEOTileData *,unsigned long,NSError *,NSDictionary *)>,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;

  *a1 = &off_1E1BF6500;
  a1[1] = 0;
  v4 = MEMORY[0x18D765024](*(_QWORD *)(a2 + 8));
  v5 = (void *)a1[1];
  a1[1] = v4;

  v6 = *(void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;

  return a1;
}

uint64_t geo::_retain_ptr<NSObject  {objcproto17OS_dispatch_queue}* {__strong},geo::_retain_dispatch_arc<NSObject  {objcproto17OS_dispatch_queue}* {__strong}>,geo::_release_dispatch_arc,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = &off_1E1BF64E0;
  *(_QWORD *)(a1 + 8) = 0;
  objc_storeStrong((id *)(a1 + 8), *(id *)(a2 + 8));
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;

  return a1;
}

uint64_t geo::_retain_ptr<GEOApplicationAuditToken * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = &off_1E1BF6480;
  *(_QWORD *)(a1 + 8) = 0;
  objc_storeStrong((id *)(a1 + 8), *(id *)(a2 + 8));
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;

  return a1;
}

uint64_t geo::_retain_ptr<NSString * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = &off_1E1BF64C0;
  *(_QWORD *)(a1 + 8) = 0;
  objc_storeStrong((id *)(a1 + 8), *(id *)(a2 + 8));
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;

  return a1;
}

void LoadItem::deleteRequester(int8x8_t *this, NSString *a2, int a3, char a4)
{
  NSString *v7;
  int8x8_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  void *v11;
  id v12;
  int8x8_t v13;
  uint64_t *v14;
  uint8x8_t v15;
  uint64_t **v16;
  int8x8_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  NSString *v22;
  _QWORD v23[2];
  char v24;
  _QWORD block[4];
  id v26;
  __int128 v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v22 = v7;
  v8 = this + 8;
  v9 = std::__hash_table<std::__hash_value_type<NSString * {__strong},LoadItem::Requester>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},LoadItem::Requester>,LoadItem::_NSStringHashFunc,LoadItem::_NSStringEqualsFunc,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},LoadItem::Requester>,LoadItem::_NSStringEqualsFunc,LoadItem::_NSStringHashFunc,true>,std::allocator<std::__hash_value_type<NSString * {__strong},LoadItem::Requester>>>::find<NSString * {__strong}>(&this[8], (id *)&v22);
  v10 = v9;
  if (v9)
  {
    if (a3)
    {
      v11 = (void *)MEMORY[0x18D765024](v9[16]);
      v27 = *(_OWORD *)this->i8;
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = ___ZN8LoadItem15deleteRequesterEP8NSStringbb_block_invoke;
      block[3] = &unk_1E1C003A8;
      v26 = v11;
      v28 = a4;
      v12 = v11;
      LoadItem::Requester::performAsyncOnCallbackQueue((uint64_t)(v10 + 3), block);

    }
    v13 = this[9];
    v14 = v10[1];
    v15 = (uint8x8_t)vcnt_s8(v13);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      if ((unint64_t)v14 >= *(_QWORD *)&v13)
        v14 = (uint64_t *)((unint64_t)v14 % *(_QWORD *)&v13);
    }
    else
    {
      v14 = (uint64_t *)((*(_QWORD *)&v13 - 1) & (unint64_t)v14);
    }
    v16 = *(uint64_t ***)(*(_QWORD *)v8 + 8 * (_QWORD)v14);
    do
    {
      v17 = (int8x8_t *)v16;
      v16 = (uint64_t **)*v16;
    }
    while (v16 != v10);
    if (v17 == &this[10])
      goto LABEL_21;
    v18 = (unint64_t)v17[1];
    if (v15.u32[0] > 1uLL)
    {
      if (v18 >= *(_QWORD *)&v13)
        v18 %= *(_QWORD *)&v13;
    }
    else
    {
      v18 &= *(_QWORD *)&v13 - 1;
    }
    if ((uint64_t *)v18 != v14)
    {
LABEL_21:
      if (!*v10)
        goto LABEL_22;
      v19 = (*v10)[1];
      if (v15.u32[0] > 1uLL)
      {
        if (v19 >= *(_QWORD *)&v13)
          v19 %= *(_QWORD *)&v13;
      }
      else
      {
        v19 &= *(_QWORD *)&v13 - 1;
      }
      if ((uint64_t *)v19 != v14)
LABEL_22:
        *(_QWORD *)(*(_QWORD *)v8 + 8 * (_QWORD)v14) = 0;
    }
    v20 = *v10;
    if (*v10)
    {
      v21 = v20[1];
      if (v15.u32[0] > 1uLL)
      {
        if (v21 >= *(_QWORD *)&v13)
          v21 %= *(_QWORD *)&v13;
      }
      else
      {
        v21 &= *(_QWORD *)&v13 - 1;
      }
      if ((uint64_t *)v21 != v14)
      {
        *(_QWORD *)(*(_QWORD *)v8 + 8 * v21) = v17;
        v20 = *v10;
      }
    }
    *v17 = (int8x8_t)v20;
    *v10 = 0;
    --*(_QWORD *)&this[11];
    v23[0] = v10;
    v23[1] = this + 10;
    v24 = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<NSString * {__strong},LoadItem::Requester>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<NSString * {__strong},LoadItem::Requester>,void *>>>>::reset[abi:ne180100]((uint64_t)v23);
  }

}

void sub_1886061A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<NSString * {__strong},LoadItem::Requester>,std::__unordered_map_hasher<NSString * {__strong},std::__hash_value_type<NSString * {__strong},LoadItem::Requester>,LoadItem::_NSStringHashFunc,LoadItem::_NSStringEqualsFunc,true>,std::__unordered_map_equal<NSString * {__strong},std::__hash_value_type<NSString * {__strong},LoadItem::Requester>,LoadItem::_NSStringEqualsFunc,LoadItem::_NSStringHashFunc,true>,std::allocator<std::__hash_value_type<NSString * {__strong},LoadItem::Requester>>>::find<NSString * {__strong}>(_QWORD *a1, id *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;

  v4 = objc_msgSend(*a2, "hash");
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = (uint64_t **)*i)
  {
    v12 = (unint64_t)i[1];
    if (v12 == v6)
    {
      if ((objc_msgSend(i[2], "isEqualToString:", *a2) & 1) != 0)
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

_QWORD *geo::_retain_ptr<NSObject  {objcproto17OS_dispatch_queue}* {__strong},geo::_retain_dispatch_arc<NSObject  {objcproto17OS_dispatch_queue}* {__strong}>,geo::_release_dispatch_arc,geo::_hash_ptr,geo::_equal_ptr>::_retain_ptr(_QWORD *a1, void *a2)
{
  id v3;

  v3 = a2;
  *a1 = &off_1E1BF64E0;
  a1[1] = v3;
  return a1;
}

id LoadItem::voucher(LoadItem *this)
{
  uint64_t *v1;
  unsigned int v2;
  void *v3;
  id v4;
  unsigned int v5;
  id v6;

  if (*((_QWORD *)this + 11) && (v1 = (uint64_t *)*((_QWORD *)this + 10)) != 0)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = (id)v1[23];
      if (v4)
      {
        v5 = *((_DWORD *)v1 + 45);

        if (v5 > v2)
        {
          v2 = *((_DWORD *)v1 + 45);
          v6 = (id)v1[23];

          v3 = v6;
        }
      }
      v1 = (uint64_t *)*v1;
    }
    while (v1);
  }
  else
  {
    v3 = 0;
  }
  return v3;
}

void sub_1886067EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,hashkey,eqkey,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,eqkey,hashkey,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>>>::find<_GEOTileKey>(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *i;
  unint64_t v9;

  v4 = GEOTileKeyHash(a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v7 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v4;
  }
  i = *(_QWORD **)(*a1 + 8 * v7);
  if (i)
  {
    for (i = (_QWORD *)*i; i; i = (_QWORD *)*i)
    {
      v9 = i[1];
      if (v9 == v4)
      {
        if (i[2] == *a2 && i[3] == a2[1])
          return i;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v9 >= *(_QWORD *)&v5)
            v9 %= *(_QWORD *)&v5;
        }
        else
        {
          v9 &= *(_QWORD *)&v5 - 1;
        }
        if (v9 != v7)
          return 0;
      }
    }
  }
  return i;
}

void sub_188606A40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void geo::BatchLoadHelper::~BatchLoadHelper(void **this)
{
  void *v2;

  free(*this);
  free(this[1]);
  free(this[2]);
  free(this[3]);
  v2 = this[5];
  if (v2)
    free(v2);

}

LABEL_1:
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(_DWORD *)(a2 - 40) > *(_DWORD *)(v8 + 16))
        {
          v179 = *(_QWORD *)(v8 + 48);
          v160 = *(_OWORD *)(v8 + 16);
          v170 = *(_OWORD *)(v8 + 32);
          v151 = *(_OWORD *)v8;
          v55 = *(_OWORD *)(a2 - 56);
          v56 = *(_OWORD *)(a2 - 40);
          v57 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(v8 + 16) = v56;
          *(_OWORD *)(v8 + 32) = v57;
          *(_OWORD *)v8 = v55;
          *(_QWORD *)(a2 - 8) = v179;
          *(_OWORD *)(a2 - 24) = v170;
          *(_OWORD *)(a2 - 40) = v160;
          *(_OWORD *)(a2 - 56) = v151;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[GEOTileLoader _requestOnlineTiles]::$_3 &,geo::Batch::KeyInfo *>((__int128 *)v8, (__int128 *)(v8 + 56), (__int128 *)(a2 - 56));
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[GEOTileLoader _requestOnlineTiles]::$_3 &,geo::Batch::KeyInfo *>(v8, v8 + 56, v8 + 112, (__int128 *)(a2 - 56));
        return;
      case 5:
        v58 = (__int128 *)(v8 + 56);
        v59 = (__int128 *)(v8 + 112);
        v60 = (__int128 *)(v8 + 168);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,-[GEOTileLoader _requestOnlineTiles]::$_3 &,geo::Batch::KeyInfo *>(v8, v8 + 56, v8 + 112, (__int128 *)(v8 + 168));
        if (*(_DWORD *)(a2 - 40) > *(_DWORD *)(v8 + 184))
        {
          v61 = *v60;
          v161 = *(_OWORD *)(v8 + 184);
          v62 = *(_OWORD *)(v8 + 200);
          v63 = *(_QWORD *)(v8 + 216);
          v64 = *(_QWORD *)(a2 - 8);
          v65 = *(_OWORD *)(a2 - 24);
          v66 = *(_OWORD *)(a2 - 40);
          *v60 = *(_OWORD *)(a2 - 56);
          *(_OWORD *)(v8 + 184) = v66;
          *(_OWORD *)(v8 + 200) = v65;
          *(_QWORD *)(v8 + 216) = v64;
          *(_OWORD *)(a2 - 40) = v161;
          *(_OWORD *)(a2 - 24) = v62;
          *(_QWORD *)(a2 - 8) = v63;
          *(_OWORD *)(a2 - 56) = v61;
          if (*(_DWORD *)(v8 + 184) > *(_DWORD *)(v8 + 128))
          {
            v67 = *(_QWORD *)(v8 + 160);
            v69 = *(_OWORD *)(v8 + 128);
            v68 = *(_OWORD *)(v8 + 144);
            v70 = *v59;
            v71 = *(_OWORD *)(v8 + 184);
            *v59 = *v60;
            *(_OWORD *)(v8 + 128) = v71;
            *(_OWORD *)(v8 + 144) = *(_OWORD *)(v8 + 200);
            *(_QWORD *)(v8 + 160) = *(_QWORD *)(v8 + 216);
            *v60 = v70;
            *(_OWORD *)(v8 + 184) = v69;
            *(_OWORD *)(v8 + 200) = v68;
            *(_QWORD *)(v8 + 216) = v67;
            if (*(_DWORD *)(v8 + 128) > *(_DWORD *)(v8 + 72))
            {
              v72 = *(_QWORD *)(v8 + 104);
              v74 = *(_OWORD *)(v8 + 72);
              v73 = *(_OWORD *)(v8 + 88);
              v75 = *v58;
              v76 = *(_OWORD *)(v8 + 128);
              *v58 = *v59;
              *(_OWORD *)(v8 + 72) = v76;
              *(_OWORD *)(v8 + 88) = *(_OWORD *)(v8 + 144);
              *(_QWORD *)(v8 + 104) = *(_QWORD *)(v8 + 160);
              *v59 = v75;
              *(_OWORD *)(v8 + 128) = v74;
              *(_OWORD *)(v8 + 144) = v73;
              *(_QWORD *)(v8 + 160) = v72;
              if (*(_DWORD *)(v8 + 72) > *(_DWORD *)(v8 + 16))
              {
                v180 = *(_QWORD *)(v8 + 48);
                v162 = *(_OWORD *)(v8 + 16);
                v171 = *(_OWORD *)(v8 + 32);
                v152 = *(_OWORD *)v8;
                v77 = *(_OWORD *)(v8 + 72);
                *(_OWORD *)v8 = *v58;
                *(_OWORD *)(v8 + 16) = v77;
                *(_OWORD *)(v8 + 32) = *(_OWORD *)(v8 + 88);
                *(_QWORD *)(v8 + 48) = *(_QWORD *)(v8 + 104);
                *(_QWORD *)(v8 + 104) = v180;
                *(_OWORD *)(v8 + 72) = v162;
                *(_OWORD *)(v8 + 88) = v171;
                *v58 = v152;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 1343)
        {
          v78 = (char *)(v8 + 56);
          v80 = v8 == a2 || v78 == (char *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v80)
            {
              v81 = 0;
              v82 = (_OWORD *)v8;
              do
              {
                v83 = v78;
                v84 = *((_DWORD *)v82 + 18);
                if (v84 > *((_DWORD *)v82 + 4))
                {
                  v135 = *v83;
                  v153 = *(_OWORD *)((char *)v82 + 76);
                  v163 = *(_OWORD *)((char *)v82 + 92);
                  v172 = *((_DWORD *)v82 + 27);
                  v85 = v81;
                  while (1)
                  {
                    v86 = v8 + v85;
                    v87 = *(_OWORD *)(v8 + v85 + 16);
                    *(_OWORD *)(v86 + 56) = *(_OWORD *)(v8 + v85);
                    *(_OWORD *)(v86 + 72) = v87;
                    *(_OWORD *)(v86 + 88) = *(_OWORD *)(v8 + v85 + 32);
                    *(_QWORD *)(v86 + 104) = *(_QWORD *)(v8 + v85 + 48);
                    if (!v85)
                      break;
                    v85 -= 56;
                    if (v84 <= *(_DWORD *)(v86 - 40))
                    {
                      v88 = v8 + v85 + 56;
                      goto LABEL_78;
                    }
                  }
                  v88 = v8;
LABEL_78:
                  *(_OWORD *)v88 = v135;
                  *(_DWORD *)(v88 + 16) = v84;
                  *(_OWORD *)(v88 + 20) = v153;
                  *(_OWORD *)(v88 + 36) = v163;
                  *(_DWORD *)(v88 + 52) = v172;
                }
                v78 = (char *)v83 + 56;
                v81 += 56;
                v82 = v83;
              }
              while ((_OWORD *)((char *)v83 + 56) != (_OWORD *)a2);
            }
          }
          else if (!v80)
          {
            do
            {
              v129 = (uint64_t)v78;
              v130 = *(_DWORD *)(a1 + 72);
              if (v130 > *(_DWORD *)(a1 + 16))
              {
                v138 = *(_OWORD *)v78;
                v156 = *(_OWORD *)(a1 + 76);
                v166 = *(_OWORD *)(a1 + 92);
                v175 = *(_DWORD *)(a1 + 108);
                do
                {
                  v131 = *(_OWORD *)(v78 - 40);
                  *(_OWORD *)v78 = *(_OWORD *)(v78 - 56);
                  *((_OWORD *)v78 + 1) = v131;
                  *((_OWORD *)v78 + 2) = *(_OWORD *)(v78 - 24);
                  *((_QWORD *)v78 + 6) = *((_QWORD *)v78 - 1);
                  v132 = *((_DWORD *)v78 - 24);
                  v78 -= 56;
                }
                while (v130 > v132);
                *(_OWORD *)v78 = v138;
                *((_DWORD *)v78 + 4) = v130;
                *((_DWORD *)v78 + 13) = v175;
                *(_OWORD *)(v78 + 36) = v166;
                *(_OWORD *)(v78 + 20) = v156;
              }
              v78 = (char *)(v129 + 56);
              a1 = v129;
            }
            while (v129 + 56 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v89 = (unint64_t)(v10 - 2) >> 1;
            v90 = v89;
            do
            {
              v91 = v90;
              if (v89 >= v90)
              {
                v92 = (2 * v90) | 1;
                v93 = v8 + 56 * v92;
                if (2 * v91 + 2 < v10)
                {
                  v94 = *(_DWORD *)(v8 + 56 * v92 + 16);
                  v95 = *(_DWORD *)(v93 + 72);
                  v93 += 56 * (v94 > v95);
                  if (v94 > v95)
                    v92 = 2 * v91 + 2;
                }
                v96 = *(_DWORD *)(v8 + 56 * v91 + 16);
                if (*(_DWORD *)(v93 + 16) <= v96)
                {
                  v97 = v8 + 56 * v91;
                  v136 = *(_OWORD *)v97;
                  v173 = *(_DWORD *)(v97 + 52);
                  v154 = *(_OWORD *)(v97 + 20);
                  v164 = *(_OWORD *)(v97 + 36);
                  do
                  {
                    v98 = v97;
                    v97 = v93;
                    v99 = *(_OWORD *)v93;
                    v100 = *(_OWORD *)(v93 + 16);
                    v101 = *(_OWORD *)(v93 + 32);
                    *(_QWORD *)(v98 + 48) = *(_QWORD *)(v93 + 48);
                    *(_OWORD *)(v98 + 16) = v100;
                    *(_OWORD *)(v98 + 32) = v101;
                    *(_OWORD *)v98 = v99;
                    if (v89 < v92)
                      break;
                    v102 = (2 * v92) | 1;
                    v93 = v8 + 56 * v102;
                    v103 = 2 * v92 + 2;
                    if (v103 < v10)
                    {
                      v104 = *(_DWORD *)(v8 + 56 * v102 + 16);
                      v105 = *(_DWORD *)(v93 + 72);
                      v93 += 56 * (v104 > v105);
                      if (v104 > v105)
                        v102 = v103;
                    }
                    v92 = v102;
                  }
                  while (*(_DWORD *)(v93 + 16) <= v96);
                  *(_OWORD *)v97 = v136;
                  *(_DWORD *)(v97 + 16) = v96;
                  *(_OWORD *)(v97 + 20) = v154;
                  *(_OWORD *)(v97 + 36) = v164;
                  *(_DWORD *)(v97 + 52) = v173;
                }
              }
              v90 = v91 - 1;
            }
            while (v91);
            v106 = (a2 - v8) / 0x38;
            do
            {
              v107 = 0;
              v181 = *(_QWORD *)(v8 + 48);
              v165 = *(_OWORD *)(v8 + 16);
              v174 = *(_OWORD *)(v8 + 32);
              v155 = *(_OWORD *)v8;
              v108 = v8;
              do
              {
                v109 = v107 + 1;
                v110 = v108 + 56 * (v107 + 1);
                v111 = (2 * v107) | 1;
                v112 = 2 * v107 + 2;
                if (v112 < v106)
                {
                  v113 = *(_DWORD *)(v108 + 56 * v109 + 16);
                  v114 = *(_DWORD *)(v110 + 72);
                  v110 += 56 * (v113 > v114);
                  if (v113 > v114)
                    v111 = v112;
                }
                v115 = *(_OWORD *)v110;
                v116 = *(_OWORD *)(v110 + 16);
                v117 = *(_OWORD *)(v110 + 32);
                *(_QWORD *)(v108 + 48) = *(_QWORD *)(v110 + 48);
                *(_OWORD *)(v108 + 16) = v116;
                *(_OWORD *)(v108 + 32) = v117;
                *(_OWORD *)v108 = v115;
                v108 = v110;
                v107 = v111;
              }
              while (v111 <= (uint64_t)((unint64_t)(v106 - 2) >> 1));
              a2 -= 56;
              if (v110 == a2)
              {
                *(_QWORD *)(v110 + 48) = v181;
                *(_OWORD *)(v110 + 16) = v165;
                *(_OWORD *)(v110 + 32) = v174;
                *(_OWORD *)v110 = v155;
              }
              else
              {
                v118 = *(_OWORD *)a2;
                v119 = *(_OWORD *)(a2 + 16);
                v120 = *(_OWORD *)(a2 + 32);
                *(_QWORD *)(v110 + 48) = *(_QWORD *)(a2 + 48);
                *(_OWORD *)(v110 + 16) = v119;
                *(_OWORD *)(v110 + 32) = v120;
                *(_OWORD *)v110 = v118;
                *(_QWORD *)(a2 + 48) = v181;
                *(_OWORD *)(a2 + 16) = v165;
                *(_OWORD *)(a2 + 32) = v174;
                *(_OWORD *)a2 = v155;
                v121 = v110 - v8 + 56;
                if (v121 >= 57)
                {
                  v122 = (v121 / 0x38uLL - 2) >> 1;
                  v123 = *(_DWORD *)(v110 + 16);
                  if (*(_DWORD *)(v8 + 56 * v122 + 16) > v123)
                  {
                    v147 = *(_OWORD *)v110;
                    v144 = *(_DWORD *)(v110 + 52);
                    v137 = *(_OWORD *)(v110 + 20);
                    v141 = *(_OWORD *)(v110 + 36);
                    do
                    {
                      v124 = v110;
                      v110 = v8 + 56 * v122;
                      v125 = *(_OWORD *)v110;
                      v126 = *(_OWORD *)(v110 + 16);
                      v127 = *(_OWORD *)(v110 + 32);
                      *(_QWORD *)(v124 + 48) = *(_QWORD *)(v110 + 48);
                      *(_OWORD *)(v124 + 16) = v126;
                      *(_OWORD *)(v124 + 32) = v127;
                      *(_OWORD *)v124 = v125;
                      if (!v122)
                        break;
                      v122 = (v122 - 1) >> 1;
                    }
                    while (*(_DWORD *)(v8 + 56 * v122 + 16) > v123);
                    *(_OWORD *)v110 = v147;
                    *(_DWORD *)(v110 + 16) = v123;
                    *(_DWORD *)(v110 + 52) = v144;
                    *(_OWORD *)(v110 + 36) = v141;
                    *(_OWORD *)(v110 + 20) = v137;
                  }
                }
              }
            }
            while (v106-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 56 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x1C01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[GEOTileLoader _requestOnlineTiles]::$_3 &,geo::Batch::KeyInfo *>((__int128 *)v12, (__int128 *)a1, (__int128 *)(a2 - 56));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[GEOTileLoader _requestOnlineTiles]::$_3 &,geo::Batch::KeyInfo *>((__int128 *)a1, (__int128 *)v12, (__int128 *)(a2 - 56));
          v13 = 56 * v11;
          v14 = (__int128 *)(56 * v11 + a1 - 56);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[GEOTileLoader _requestOnlineTiles]::$_3 &,geo::Batch::KeyInfo *>((__int128 *)(a1 + 56), v14, (__int128 *)(a2 - 112));
          v15 = (__int128 *)(a1 + 56 + v13);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[GEOTileLoader _requestOnlineTiles]::$_3 &,geo::Batch::KeyInfo *>((__int128 *)(a1 + 112), v15, (__int128 *)(a2 - 168));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,-[GEOTileLoader _requestOnlineTiles]::$_3 &,geo::Batch::KeyInfo *>(v14, (__int128 *)v12, v15);
          v176 = *(_QWORD *)(a1 + 48);
          v157 = *(_OWORD *)(a1 + 16);
          v167 = *(_OWORD *)(a1 + 32);
          v148 = *(_OWORD *)a1;
          v16 = *(_OWORD *)v12;
          v17 = *(_OWORD *)(v12 + 16);
          v18 = *(_OWORD *)(v12 + 32);
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(v12 + 48);
          *(_OWORD *)(a1 + 16) = v17;
          *(_OWORD *)(a1 + 32) = v18;
          *(_OWORD *)a1 = v16;
          *(_QWORD *)(v12 + 48) = v176;
          *(_OWORD *)(v12 + 16) = v157;
          *(_OWORD *)(v12 + 32) = v167;
          *(_OWORD *)v12 = v148;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v19 = *(_DWORD *)(a1 + 16);
          if (*(_DWORD *)(a1 - 40) > v19)
            goto LABEL_11;
          v146 = *(_OWORD *)a1;
          v134 = *(_OWORD *)(a1 + 20);
          v140 = *(_OWORD *)(a1 + 36);
          v143 = *(_DWORD *)(a1 + 52);
          if (v19 <= *(_DWORD *)(a2 - 40))
          {
            v41 = a1 + 56;
            do
            {
              v8 = v41;
              if (v41 >= a2)
                break;
              v42 = *(_DWORD *)(v41 + 16);
              v41 += 56;
            }
            while (v19 <= v42);
          }
          else
          {
            v39 = a1;
            do
            {
              v8 = v39 + 56;
              v40 = *(_DWORD *)(v39 + 72);
              v39 += 56;
            }
            while (v19 <= v40);
          }
          v43 = a2;
          if (v8 < a2)
          {
            v44 = a2;
            do
            {
              v43 = v44 - 56;
              v45 = *(_DWORD *)(v44 - 40);
              v44 -= 56;
            }
            while (v19 > v45);
          }
          while (v8 < v43)
          {
            v178 = *(_QWORD *)(v8 + 48);
            v159 = *(_OWORD *)(v8 + 16);
            v169 = *(_OWORD *)(v8 + 32);
            v150 = *(_OWORD *)v8;
            v46 = *(_OWORD *)v43;
            v47 = *(_OWORD *)(v43 + 16);
            v48 = *(_OWORD *)(v43 + 32);
            *(_QWORD *)(v8 + 48) = *(_QWORD *)(v43 + 48);
            *(_OWORD *)(v8 + 16) = v47;
            *(_OWORD *)(v8 + 32) = v48;
            *(_OWORD *)v8 = v46;
            *(_QWORD *)(v43 + 48) = v178;
            *(_OWORD *)(v43 + 16) = v159;
            *(_OWORD *)(v43 + 32) = v169;
            *(_OWORD *)v43 = v150;
            do
            {
              v49 = *(_DWORD *)(v8 + 72);
              v8 += 56;
            }
            while (v19 <= v49);
            do
            {
              v50 = *(_DWORD *)(v43 - 40);
              v43 -= 56;
            }
            while (v19 > v50);
          }
          v51 = (__int128 *)(v8 - 56);
          if (v8 - 56 != a1)
          {
            v52 = *v51;
            v53 = *(_OWORD *)(v8 - 40);
            v54 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)(a1 + 16) = v53;
            *(_OWORD *)(a1 + 32) = v54;
            *(_OWORD *)a1 = v52;
          }
          a4 = 0;
          *v51 = v146;
          *(_DWORD *)(v8 - 40) = v19;
          *(_DWORD *)(v8 - 4) = v143;
          *(_OWORD *)(v8 - 20) = v140;
          *(_OWORD *)(v8 - 36) = v134;
          continue;
        }
        v19 = *(_DWORD *)(a1 + 16);
LABEL_11:
        v20 = 0;
        v145 = *(_OWORD *)a1;
        v142 = *(_DWORD *)(a1 + 52);
        v133 = *(_OWORD *)(a1 + 20);
        v139 = *(_OWORD *)(a1 + 36);
        do
        {
          v21 = *(_DWORD *)(a1 + v20 + 72);
          v20 += 56;
        }
        while (v21 > v19);
        v22 = a1 + v20;
        v23 = a2;
        if (v20 == 56)
        {
          v26 = a2;
          while (v22 < v26)
          {
            v24 = v26 - 56;
            v27 = *(_DWORD *)(v26 - 40);
            v26 -= 56;
            if (v27 > v19)
              goto LABEL_21;
          }
          v24 = v26;
        }
        else
        {
          do
          {
            v24 = v23 - 56;
            v25 = *(_DWORD *)(v23 - 40);
            v23 -= 56;
          }
          while (v25 <= v19);
        }
LABEL_21:
        v8 = v22;
        if (v22 < v24)
        {
          v28 = v24;
          do
          {
            v177 = *(_QWORD *)(v8 + 48);
            v158 = *(_OWORD *)(v8 + 16);
            v168 = *(_OWORD *)(v8 + 32);
            v149 = *(_OWORD *)v8;
            v29 = *(_OWORD *)v28;
            v30 = *(_OWORD *)(v28 + 16);
            v31 = *(_OWORD *)(v28 + 32);
            *(_QWORD *)(v8 + 48) = *(_QWORD *)(v28 + 48);
            *(_OWORD *)(v8 + 16) = v30;
            *(_OWORD *)(v8 + 32) = v31;
            *(_OWORD *)v8 = v29;
            *(_QWORD *)(v28 + 48) = v177;
            *(_OWORD *)(v28 + 16) = v158;
            *(_OWORD *)(v28 + 32) = v168;
            *(_OWORD *)v28 = v149;
            do
            {
              v32 = *(_DWORD *)(v8 + 72);
              v8 += 56;
            }
            while (v32 > v19);
            do
            {
              v33 = *(_DWORD *)(v28 - 40);
              v28 -= 56;
            }
            while (v33 <= v19);
          }
          while (v8 < v28);
        }
        v34 = (__int128 *)(v8 - 56);
        if (v8 - 56 != a1)
        {
          v35 = *v34;
          v36 = *(_OWORD *)(v8 - 40);
          v37 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)(a1 + 16) = v36;
          *(_OWORD *)(a1 + 32) = v37;
          *(_OWORD *)a1 = v35;
        }
        *v34 = v145;
        *(_DWORD *)(v8 - 40) = v19;
        *(_DWORD *)(v8 - 4) = v142;
        *(_OWORD *)(v8 - 20) = v139;
        *(_OWORD *)(v8 - 36) = v133;
        if (v22 < v24)
        {
LABEL_32:
          std::__introsort<std::_ClassicAlgPolicy,-[GEOTileLoader _requestOnlineTiles]::$_3 &,geo::Batch::KeyInfo *,false>(a1, v8 - 56, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v38 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[GEOTileLoader _requestOnlineTiles]::$_3 &,geo::Batch::KeyInfo *>(a1, v8 - 56);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,-[GEOTileLoader _requestOnlineTiles]::$_3 &,geo::Batch::KeyInfo *>(v8, a2))
        {
          if (v38)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 56;
        if (!v38)
          goto LABEL_1;
        return;
    }
  }
}

  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v31 = *((_QWORD *)a2 - 2);
        v32 = (std::__shared_weak_count *)*((_QWORD *)a2 - 1);
        if (v32)
        {
          p_shared_owners = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldxr(p_shared_owners);
          while (__stxr(v34 + 1, p_shared_owners));
        }
        v35 = *(_QWORD *)v10;
        v36 = (std::__shared_weak_count *)*((_QWORD *)v10 + 1);
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
          v39 = *(_DWORD *)(v31 + 64) < *(_DWORD *)(v35 + 64);
          do
            v40 = __ldaxr(v37);
          while (__stlxr(v40 - 1, v37));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        else
        {
          v39 = *(_DWORD *)(v31 + 64) < *(_DWORD *)(v35 + 64);
        }
        if (v32)
        {
          v41 = (unint64_t *)&v32->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        if (v39)
        {
          v43 = *(_QWORD *)v10;
          *(_QWORD *)v10 = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v43;
          v44 = *((_QWORD *)v10 + 1);
          *((_QWORD *)v10 + 1) = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v44;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(v10, (_QWORD *)v10 + 2, (_QWORD *)a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>((uint64_t *)v10, (uint64_t *)v10 + 2, (uint64_t *)v10 + 4, (uint64_t *)a2 - 2);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>((uint64_t *)v10, (uint64_t *)v10 + 2, (uint64_t *)v10 + 4, (uint64_t *)v10 + 6, (uint64_t *)a2 - 2);
        return;
      default:
        if (v11 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>((uint64_t)v10, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>((uint64_t)v10, (uint64_t)a2);
          return;
        }
        if (!a4)
        {
          if (v10 != a2)
            std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>((uint64_t *)v10, (uint64_t *)a2, (uint64_t *)a2, a3);
          return;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        if ((unint64_t)v11 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(&v10[v12 >> 1], v10, (_QWORD *)a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(v10, &v10[v12 >> 1], (_QWORD *)a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>((_QWORD *)v10 + 2, (_QWORD *)v14 - 2, (_QWORD *)a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>((_QWORD *)v10 + 4, &v10[v13 + 1], (_QWORD *)a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>((_QWORD *)v14 - 2, v14, &v10[v13 + 1]);
          v15 = *v10;
          *v10 = *v14;
          *v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v16 = *((_QWORD *)v10 - 2);
          v17 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
          if (v17)
          {
            v18 = (unint64_t *)&v17->__shared_owners_;
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
          }
          v20 = *(_QWORD *)v10;
          v21 = (std::__shared_weak_count *)*((_QWORD *)v10 + 1);
          if (v21)
          {
            v22 = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
            v24 = *(_DWORD *)(v16 + 64) >= *(_DWORD *)(v20 + 64);
            do
              v25 = __ldaxr(v22);
            while (__stlxr(v25 - 1, v22));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
            if (!v17)
            {
LABEL_25:
              if (!v24)
                goto LABEL_26;
              goto LABEL_31;
            }
          }
          else
          {
            v24 = *(_DWORD *)(v16 + 64) >= *(_DWORD *)(v20 + 64);
            if (!v17)
              goto LABEL_25;
          }
          v26 = (unint64_t *)&v17->__shared_owners_;
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (v27)
            goto LABEL_25;
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
          if (!v24)
            goto LABEL_26;
LABEL_31:
          v10 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *,zilch::SortIncidentsByType &>(a1, a2);
          a5 = 0;
          continue;
        }
LABEL_26:
        v28 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *,zilch::SortIncidentsByType &>((uint64_t)a1, a2);
        if ((v29 & 1) == 0)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *,false>(a1, v28, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v28 + 1;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>((uint64_t *)a1, (char *)v28);
        v10 = v28 + 1;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>((uint64_t *)v28 + 2, (char *)a2))
        {
          if (v30)
            continue;
          goto LABEL_29;
        }
        a2 = v28;
        if (!v30)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = (__int128 *)a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((signed __int32)a2[-1].n128_u32[2] < *((_DWORD *)v9 + 4))
        {
          v33 = *((_QWORD *)v9 + 2);
          v30 = *v9;
          v24 = *(__int128 *)((char *)&a2[-2] + 8);
          *((_DWORD *)v9 + 4) = a2[-1].n128_u32[2];
          *v9 = v24;
          *(__n128 *)((char *)&a2[-2] + 8) = (__n128)v30;
          a2[-1].n128_u32[2] = v33;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(v9, (__int128 *)((char *)v9 + 24), (__int128 *)&a2[-2].n128_i8[8]);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>((uint64_t)v9, (uint64_t)v9 + 24, (uint64_t)(v9 + 3), (uint64_t)&a2[-2].n128_i64[1]);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>((__n128 *)v9, (__n128 *)((char *)v9 + 24), (__n128 *)v9 + 3, (__n128 *)((char *)v9 + 72), (__n128 *)((char *)a2 - 24));
        return;
      default:
        if (v12 > 575)
        {
          if (v11 == 1)
          {
            if (v9 != (__int128 *)a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *,zilch::TrafficDynamicTile::Flow *>((__n128 *)v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = (__int128 *)((char *)v9 + 24 * (v13 >> 1));
          if ((unint64_t)v12 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>((__int128 *)((char *)v9 + 24 * v14), v9, (__int128 *)&a2[-2].n128_i8[8]);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(v9, (__int128 *)((char *)v9 + 24 * v14), (__int128 *)&a2[-2].n128_i8[8]);
            v16 = 3 * v14;
            v17 = (__int128 *)((char *)v9 + 24 * v14 - 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>((__int128 *)((char *)v9 + 24), v17, (__int128 *)&a2[-3]);
            v18 = v9 + 3;
            v19 = (__int128 *)((char *)v9 + 8 * v16 + 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(v18, v19, (__int128 *)&a2[-5].n128_i8[8]);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(v17, v15, v19);
            v32 = *(_QWORD *)(a1 + 16);
            v29 = *(_OWORD *)a1;
            v20 = *v15;
            *(_DWORD *)(a1 + 16) = *((_DWORD *)v15 + 4);
            *(_OWORD *)a1 = v20;
            *((_DWORD *)v15 + 4) = v32;
            *v15 = v29;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(_DWORD *)(a1 - 8) >= *(_DWORD *)(a1 + 16))
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TrafficDynamicTile::Flow *,zilch::SortFlowsBySpeedClass &>(a1, (__int128 *)a2);
            goto LABEL_16;
          }
LABEL_11:
          v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TrafficDynamicTile::Flow *,zilch::SortFlowsBySpeedClass &>(a1, (unint64_t)a2);
          if ((v22 & 1) == 0)
            goto LABEL_14;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(a1, v21);
          v9 = (__int128 *)(v21 + 24);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(v21 + 24, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *,false>(a1, v21, a3, -v11, a5 & 1);
            v9 = (__int128 *)(v21 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (__n128 *)v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>((uint64_t)v9, a2);
        }
        else if (v9 != (__int128 *)a2)
        {
          while ((__n128 *)(a1 + 24) != a2)
          {
            v26 = *(_DWORD *)(a1 + 40);
            v27 = *(_DWORD *)(a1 + 16);
            v25 = a1 + 24;
            a1 += 24;
            if (v26 < v27)
            {
              v31 = *(_OWORD *)v25;
              do
              {
                *(_OWORD *)v25 = *(_OWORD *)(v25 - 24);
                *(_DWORD *)(v25 + 16) = *(_DWORD *)(v25 - 8);
                v28 = *(_DWORD *)(v25 - 32);
                v25 -= 24;
              }
              while (v26 < v28);
              *(_OWORD *)v25 = v31;
              *(_DWORD *)(v25 + 16) = v26;
            }
          }
        }
        return;
    }
  }
}

  v10 = (__int128 *)((char *)a2 - 40);
  v11 = (__int128 *)a1;
LABEL_2:
  v12 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v11;
    v13 = v12;
    v14 = (char *)a2 - (char *)v11;
    v15 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v11) >> 3);
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)((char *)a2 - 40), v11))
        {
          v34 = *((_QWORD *)v11 + 4);
          v30 = *v11;
          v32 = v11[1];
          v27 = *v10;
          v28 = *(__int128 *)((char *)a2 - 24);
          *((_QWORD *)v11 + 4) = *((_QWORD *)a2 - 1);
          *v11 = v27;
          v11[1] = v28;
          *v10 = v30;
          *(__int128 *)((char *)a2 - 24) = v32;
          *((_QWORD *)a2 - 1) = v34;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(v11, (__int128 *)((char *)v11 + 40), (__int128 *)((char *)a2 - 40), a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>((uint64_t)v11, (uint64_t)v11 + 40, (uint64_t)(v11 + 5), (uint64_t)a2 - 40, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>((uint64_t)v11, (uint64_t)v11 + 40, (uint64_t)(v11 + 5), (uint64_t)v11 + 120, (uint64_t)a2 - 40, a3);
        return;
      default:
        if (v14 <= 959)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          return;
        }
        if (v13 != 1)
        {
          v16 = v15 >> 1;
          v17 = (__int128 *)((char *)v11 + 40 * (v15 >> 1));
          if ((unint64_t)v14 < 0x1401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(v17, v11, (__int128 *)((char *)a2 - 40), a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(v11, v17, (__int128 *)((char *)a2 - 40), a3);
            v18 = 5 * v16;
            v19 = (__int128 *)((char *)v11 + 40 * v16 - 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>((__int128 *)((char *)v11 + 40), v19, a2 - 5, a3);
            v20 = v11 + 5;
            v21 = (__int128 *)((char *)v11 + 8 * v18 + 40);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(v20, v21, (__int128 *)((char *)a2 - 120), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(v19, v17, v21, a3);
            v33 = *(_QWORD *)(a1 + 32);
            v29 = *(_OWORD *)a1;
            v31 = *(_OWORD *)(a1 + 16);
            v22 = *v17;
            v23 = v17[1];
            *(_QWORD *)(a1 + 32) = *((_QWORD *)v17 + 4);
            *(_OWORD *)a1 = v22;
            *(_OWORD *)(a1 + 16) = v23;
            *((_QWORD *)v17 + 4) = v33;
            *v17 = v29;
            v17[1] = v31;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)((__int128 *)(a1 - 40), (__int128 *)a1) & 1) == 0)
          {
            v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TrafficSkeletonTile::Record *,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&)>((__int128 *)a1, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TrafficSkeletonTile::Record *,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&)>((__int128 *)a1, (char *)a2, (uint64_t (**)(char *, __int128 *))a3);
          if ((v25 & 1) == 0)
            goto LABEL_14;
          v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(a1, v24, a3);
          v11 = (__int128 *)(v24 + 40);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(v24 + 40, (uint64_t)a2, a3))
          {
            v12 = v13 + 1;
            if (v26)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*,false>(a1, v24, a3, -v13, a5 & 1);
            v11 = (__int128 *)(v24 + 40);
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = (__int128 *)v24;
          if (v26)
            return;
          goto LABEL_1;
        }
        if (v11 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*,zilch::TrafficSkeletonTile::Record*>((uint64_t)v11, (__n128 *)a2, (__n128 *)a2, (unsigned int (**)(int64_t, uint64_t))a3, a6);
        return;
    }
  }
}

  v148 = (__int128 *)(a2 - 3);
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = (uint64_t)a2 - v7;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v7) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v56 = *((unsigned __int8 *)a2 - 1);
        if ((v56 & 0x80u) != 0)
          v56 = *(a2 - 2);
        v57 = *(unsigned __int8 *)(v7 + 23);
        if ((v57 & 0x80u) != 0)
          v57 = *(_QWORD *)(v7 + 8);
        if (v56 > v57)
        {
          v166 = *(_QWORD *)(v7 + 16);
          v157 = *(_OWORD *)v7;
          v58 = *(_OWORD *)(a2 - 3);
          *(_QWORD *)(v7 + 16) = *(a2 - 1);
          *(_OWORD *)v7 = v58;
          *(a2 - 1) = v166;
          *(_OWORD *)(a2 - 3) = v157;
        }
        return;
      case 3:
        sub_1887E2A7C((__int128 *)v7, (__int128 *)(v7 + 24), v148);
        return;
      case 4:
        sub_1887E2F4C(v7, v7 + 24, v7 + 48, (uint64_t)v148);
        return;
      case 5:
        v59 = (__int128 *)(v7 + 24);
        v60 = (__int128 *)(v7 + 48);
        v61 = (__int128 *)(v7 + 72);
        sub_1887E2F4C(v7, v7 + 24, v7 + 48, v7 + 72);
        v62 = *((unsigned __int8 *)a2 - 1);
        if ((v62 & 0x80u) != 0)
          v62 = *(a2 - 2);
        v63 = *(unsigned __int8 *)(v7 + 95);
        if ((v63 & 0x80u) != 0)
          v63 = *(_QWORD *)(v7 + 80);
        if (v62 > v63)
        {
          v64 = *v61;
          v65 = *(_QWORD *)(v7 + 88);
          v66 = *(a2 - 1);
          *v61 = *(_OWORD *)(a2 - 3);
          *(_QWORD *)(v7 + 88) = v66;
          *(a2 - 1) = v65;
          *(_OWORD *)(a2 - 3) = v64;
          v67 = *(unsigned __int8 *)(v7 + 95);
          if ((v67 & 0x80u) != 0)
            v67 = *(_QWORD *)(v7 + 80);
          v68 = *(unsigned __int8 *)(v7 + 71);
          if ((v68 & 0x80u) != 0)
            v68 = *(_QWORD *)(v7 + 56);
          if (v67 > v68)
          {
            v69 = *(_QWORD *)(v7 + 64);
            v70 = *v60;
            *v60 = *v61;
            *(_QWORD *)(v7 + 64) = *(_QWORD *)(v7 + 88);
            *v61 = v70;
            *(_QWORD *)(v7 + 88) = v69;
            v71 = *(unsigned __int8 *)(v7 + 71);
            if ((v71 & 0x80u) != 0)
              v71 = *(_QWORD *)(v7 + 56);
            v72 = *(unsigned __int8 *)(v7 + 47);
            if ((v72 & 0x80u) != 0)
              v72 = *(_QWORD *)(v7 + 32);
            if (v71 > v72)
            {
              v73 = *(_QWORD *)(v7 + 40);
              v74 = *v59;
              *v59 = *v60;
              *(_QWORD *)(v7 + 40) = *(_QWORD *)(v7 + 64);
              *v60 = v74;
              *(_QWORD *)(v7 + 64) = v73;
              v75 = *(unsigned __int8 *)(v7 + 47);
              if ((v75 & 0x80u) != 0)
                v75 = *(_QWORD *)(v7 + 32);
              v76 = *(unsigned __int8 *)(v7 + 23);
              if ((v76 & 0x80u) != 0)
                v76 = *(_QWORD *)(v7 + 8);
              if (v75 > v76)
              {
                v167 = *(_QWORD *)(v7 + 16);
                v158 = *(_OWORD *)v7;
                *(_OWORD *)v7 = *v59;
                *(_QWORD *)(v7 + 16) = *(_QWORD *)(v7 + 40);
                *v59 = v158;
                *(_QWORD *)(v7 + 40) = v167;
              }
            }
          }
        }
        return;
      default:
        if (v8 <= 575)
        {
          v77 = (uint64_t *)(v7 + 24);
          v79 = (uint64_t *)v7 == a2 || v77 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v79)
            {
              v80 = 0;
              v81 = (_QWORD *)v7;
              do
              {
                v82 = v77;
                v83 = *((unsigned __int8 *)v81 + 47);
                v84 = v83;
                v85 = v81[4];
                if ((v83 & 0x80u) != 0)
                  v83 = v81[4];
                v86 = *((unsigned __int8 *)v81 + 23);
                if ((v86 & 0x80u) != 0)
                  v86 = v81[1];
                if (v83 > v86)
                {
                  v87 = *v82;
                  *(_DWORD *)v159 = *((_DWORD *)v81 + 10);
                  *(_DWORD *)&v159[3] = *(_DWORD *)((char *)v81 + 43);
                  v82[1] = 0;
                  v82[2] = 0;
                  *v82 = 0;
                  v88 = v80;
                  while (1)
                  {
                    v89 = v7 + v88;
                    *(_OWORD *)(v89 + 24) = *(_OWORD *)(v7 + v88);
                    *(_QWORD *)(v89 + 40) = *(_QWORD *)(v7 + v88 + 16);
                    *(_BYTE *)(v89 + 23) = 0;
                    *(_BYTE *)v89 = 0;
                    if (!v88)
                      break;
                    v90 = *(unsigned __int8 *)(v89 - 1);
                    v91 = *(_QWORD *)(v89 - 16);
                    if ((v90 & 0x80u) == 0)
                      v91 = v90;
                    v88 -= 24;
                    if (v83 <= v91)
                    {
                      v92 = v7 + v88 + 24;
                      goto LABEL_142;
                    }
                  }
                  v92 = v7;
LABEL_142:
                  *(_QWORD *)v92 = v87;
                  *(_QWORD *)(v92 + 8) = v85;
                  *(_DWORD *)(v92 + 16) = *(_DWORD *)v159;
                  *(_DWORD *)(v92 + 19) = *(_DWORD *)&v159[3];
                  *(_BYTE *)(v92 + 23) = v84;
                }
                v77 = v82 + 3;
                v80 += 24;
                v81 = v82;
              }
              while (v82 + 3 != a2);
            }
          }
          else if (!v79)
          {
            v138 = v7 + 47;
            do
            {
              v139 = v77;
              v140 = *(unsigned __int8 *)(a1 + 47);
              v141 = v140;
              v142 = *(_QWORD *)(a1 + 32);
              if ((v140 & 0x80u) != 0)
                v140 = *(_QWORD *)(a1 + 32);
              v143 = *(unsigned __int8 *)(a1 + 23);
              if ((v143 & 0x80u) != 0)
                v143 = *(_QWORD *)(a1 + 8);
              if (v140 > v143)
              {
                v144 = *v139;
                *(_DWORD *)v162 = *(_DWORD *)(a1 + 40);
                *(_DWORD *)&v162[3] = *(_DWORD *)(a1 + 43);
                v139[1] = 0;
                v139[2] = 0;
                *v139 = 0;
                v145 = v138;
                do
                {
                  v146 = *(_QWORD *)(v145 - 31);
                  *(_BYTE *)(v145 - 24) = 0;
                  v145 -= 24;
                  *(_QWORD *)(v145 + 17) = v146;
                  *(_OWORD *)(v145 + 1) = *(_OWORD *)(v145 - 23);
                  *(_BYTE *)(v145 - 23) = 0;
                  v147 = *(unsigned __int8 *)(v145 - 24);
                  if ((v147 & 0x80u) != 0)
                    v147 = *(_QWORD *)(v145 - 39);
                }
                while (v140 > v147);
                *(_QWORD *)(v145 - 23) = v144;
                *(_QWORD *)(v145 - 15) = v142;
                *(_DWORD *)(v145 - 4) = *(_DWORD *)&v162[3];
                *(_DWORD *)(v145 - 7) = *(_DWORD *)v162;
                *(_BYTE *)v145 = v141;
              }
              v77 = v139 + 3;
              v138 += 24;
              a1 = (uint64_t)v139;
            }
            while (v139 + 3 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((uint64_t *)v7 != a2)
          {
            v93 = (unint64_t)(v9 - 2) >> 1;
            v94 = v93;
            do
            {
              v95 = v94;
              if (v93 >= v94)
              {
                v96 = (2 * v94) | 1;
                v97 = v7 + 24 * v96;
                if (2 * v95 + 2 < v9)
                {
                  v98 = *(unsigned __int8 *)(v97 + 23);
                  if ((v98 & 0x80u) != 0)
                    v98 = *(_QWORD *)(v97 + 8);
                  v99 = *(unsigned __int8 *)(v97 + 47);
                  if ((v99 & 0x80u) != 0)
                    v99 = *(_QWORD *)(v97 + 32);
                  v97 += 24 * (v98 > v99);
                  if (v98 > v99)
                    v96 = 2 * v95 + 2;
                }
                v100 = v7 + 24 * v95;
                if (*(char *)(v97 + 23) >= 0)
                  v101 = *(unsigned __int8 *)(v97 + 23);
                else
                  v101 = *(_QWORD *)(v97 + 8);
                v102 = *(unsigned __int8 *)(v100 + 23);
                v103 = v102;
                v104 = *(_QWORD *)(v100 + 8);
                if ((v102 & 0x80u) != 0)
                  v102 = *(_QWORD *)(v100 + 8);
                if (v101 <= v102)
                {
                  v105 = *(_QWORD *)v100;
                  *(_DWORD *)&v160[3] = *(_DWORD *)(v100 + 19);
                  *(_DWORD *)v160 = *(_DWORD *)(v100 + 16);
                  *(_QWORD *)(v100 + 8) = 0;
                  *(_QWORD *)(v100 + 16) = 0;
                  *(_QWORD *)v100 = 0;
                  do
                  {
                    v106 = v100;
                    v100 = v97;
                    v107 = *(_OWORD *)v97;
                    *(_QWORD *)(v106 + 16) = *(_QWORD *)(v97 + 16);
                    *(_OWORD *)v106 = v107;
                    *(_BYTE *)(v97 + 23) = 0;
                    *(_BYTE *)v97 = 0;
                    if (v93 < v96)
                      break;
                    v108 = (2 * v96) | 1;
                    v97 = v7 + 24 * v108;
                    v109 = 2 * v96 + 2;
                    if (v109 < v9)
                    {
                      v110 = *(unsigned __int8 *)(v97 + 23);
                      if ((v110 & 0x80u) != 0)
                        v110 = *(_QWORD *)(v97 + 8);
                      v111 = *(unsigned __int8 *)(v97 + 47);
                      if ((v111 & 0x80u) != 0)
                        v111 = *(_QWORD *)(v97 + 32);
                      v97 += 24 * (v110 > v111);
                      if (v110 > v111)
                        v108 = v109;
                    }
                    v112 = *(char *)(v97 + 23) >= 0 ? *(unsigned __int8 *)(v97 + 23) : *(_QWORD *)(v97 + 8);
                    v96 = v108;
                  }
                  while (v112 <= v102);
                  *(_QWORD *)v100 = v105;
                  *(_QWORD *)(v100 + 8) = v104;
                  *(_DWORD *)(v100 + 16) = *(_DWORD *)v160;
                  *(_DWORD *)(v100 + 19) = *(_DWORD *)&v160[3];
                  *(_BYTE *)(v100 + 23) = v103;
                }
              }
              v94 = v95 - 1;
            }
            while (v95);
            v113 = v8 / 0x18uLL;
            v150 = (_QWORD *)(v7 + 8);
            do
            {
              v114 = 0;
              v115 = a2;
              v116 = *(_QWORD *)a1;
              *(_QWORD *)v161 = *v150;
              *(_QWORD *)&v161[7] = *(_QWORD *)((char *)v150 + 7);
              v117 = *(_BYTE *)(a1 + 23);
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v118 = a1;
              do
              {
                v119 = v118 + 24 * v114 + 24;
                v120 = 2 * v114;
                v114 = (2 * v114) | 1;
                v121 = v120 + 2;
                if (v120 + 2 < v113)
                {
                  v122 = *(unsigned __int8 *)(v119 + 23);
                  if ((v122 & 0x80u) != 0)
                    v122 = *(_QWORD *)(v119 + 8);
                  v123 = *(unsigned __int8 *)(v119 + 47);
                  if ((v123 & 0x80u) != 0)
                    v123 = *(_QWORD *)(v119 + 32);
                  v119 += 24 * (v122 > v123);
                  if (v122 > v123)
                    v114 = v121;
                }
                if (*(char *)(v118 + 23) < 0)
                  operator delete(*(void **)v118);
                v124 = *(_OWORD *)v119;
                *(_QWORD *)(v118 + 16) = *(_QWORD *)(v119 + 16);
                *(_OWORD *)v118 = v124;
                *(_BYTE *)(v119 + 23) = 0;
                *(_BYTE *)v119 = 0;
                v118 = v119;
              }
              while (v114 <= (uint64_t)((unint64_t)(v113 - 2) >> 1));
              a2 -= 3;
              if ((uint64_t *)v119 == v115 - 3)
              {
                *(_QWORD *)v119 = v116;
                *(_QWORD *)(v119 + 8) = *(_QWORD *)v161;
                *(_QWORD *)(v119 + 15) = *(_QWORD *)&v161[7];
                *(_BYTE *)(v119 + 23) = v117;
              }
              else
              {
                v125 = *(_OWORD *)a2;
                *(_QWORD *)(v119 + 16) = *(v115 - 1);
                *(_OWORD *)v119 = v125;
                *(v115 - 3) = v116;
                *(uint64_t *)((char *)v115 - 9) = *(_QWORD *)&v161[7];
                *(v115 - 2) = *(_QWORD *)v161;
                *((_BYTE *)v115 - 1) = v117;
                v126 = v119 - a1 + 24;
                if (v126 >= 25)
                {
                  v127 = (v126 / 0x18uLL - 2) >> 1;
                  v128 = a1 + 24 * v127;
                  if (*(char *)(v128 + 23) >= 0)
                    v129 = *(unsigned __int8 *)(v128 + 23);
                  else
                    v129 = *(_QWORD *)(v128 + 8);
                  v130 = *(unsigned __int8 *)(v119 + 23);
                  v131 = v130;
                  v132 = *(_QWORD *)(v119 + 8);
                  if ((v130 & 0x80u) != 0)
                    v130 = *(_QWORD *)(v119 + 8);
                  if (v129 > v130)
                  {
                    v133 = *(_QWORD *)v119;
                    *(_DWORD *)&v153[3] = *(_DWORD *)(v119 + 19);
                    *(_DWORD *)v153 = *(_DWORD *)(v119 + 16);
                    *(_QWORD *)(v119 + 8) = 0;
                    *(_QWORD *)(v119 + 16) = 0;
                    *(_QWORD *)v119 = 0;
                    do
                    {
                      v134 = v119;
                      v119 = v128;
                      v135 = *(_OWORD *)v128;
                      *(_QWORD *)(v134 + 16) = *(_QWORD *)(v128 + 16);
                      *(_OWORD *)v134 = v135;
                      *(_BYTE *)(v128 + 23) = 0;
                      *(_BYTE *)v128 = 0;
                      if (!v127)
                        break;
                      v127 = (v127 - 1) >> 1;
                      v128 = a1 + 24 * v127;
                      v136 = *(unsigned __int8 *)(v128 + 23);
                      if ((v136 & 0x80u) != 0)
                        v136 = *(_QWORD *)(v128 + 8);
                    }
                    while (v136 > v130);
                    *(_QWORD *)v119 = v133;
                    *(_QWORD *)(v119 + 8) = v132;
                    *(_DWORD *)(v119 + 16) = *(_DWORD *)v153;
                    *(_DWORD *)(v119 + 19) = *(_DWORD *)&v153[3];
                    *(_BYTE *)(v119 + 23) = v131;
                  }
                }
              }
            }
            while (v113-- > 2);
          }
          return;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = v7 + 24 * ((unint64_t)v9 >> 1);
        if ((unint64_t)v8 < 0xC01)
        {
          sub_1887E2A7C((__int128 *)(a1 + 24 * v10), (__int128 *)a1, v148);
        }
        else
        {
          sub_1887E2A7C((__int128 *)a1, (__int128 *)(a1 + 24 * v10), v148);
          v12 = 3 * v10;
          sub_1887E2A7C((__int128 *)(a1 + 24), (__int128 *)(a1 + 8 * v12 - 24), (__int128 *)a2 - 3);
          sub_1887E2A7C((__int128 *)(a1 + 48), (__int128 *)(a1 + 24 + 8 * v12), (__int128 *)(a2 - 9));
          sub_1887E2A7C((__int128 *)(a1 + 8 * v12 - 24), (__int128 *)v11, (__int128 *)(a1 + 24 + 8 * v12));
          v163 = *(_QWORD *)(a1 + 16);
          v154 = *(_OWORD *)a1;
          v13 = *(_QWORD *)(v11 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v11;
          *(_QWORD *)(a1 + 16) = v13;
          *(_QWORD *)(v11 + 16) = v163;
          *(_OWORD *)v11 = v154;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(_QWORD *)(a1 - 16);
          if (*(char *)(a1 - 1) >= 0)
            v17 = *(unsigned __int8 *)(a1 - 1);
          v15 = *(unsigned __int8 *)(a1 + 23);
          v16 = v15;
          v14 = *(_QWORD *)(a1 + 8);
          if ((v15 & 0x80u) == 0)
            v18 = *(unsigned __int8 *)(a1 + 23);
          else
            v18 = *(_QWORD *)(a1 + 8);
          if (v17 > v18)
            goto LABEL_16;
          v39 = *(_QWORD *)a1;
          *(_DWORD *)v152 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)&v152[3] = *(_DWORD *)(a1 + 19);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v40 = *((unsigned __int8 *)a2 - 1);
          if ((v40 & 0x80u) != 0)
            v40 = *(a2 - 2);
          if (v18 <= v40)
          {
            v44 = a1 + 24;
            do
            {
              v7 = v44;
              if (v44 >= (unint64_t)a2)
                break;
              v45 = *(char *)(v44 + 23) >= 0 ? *(unsigned __int8 *)(v44 + 23) : *(_QWORD *)(v44 + 8);
              v44 += 24;
            }
            while (v18 <= v45);
          }
          else
          {
            v41 = a1;
            do
            {
              v7 = v41 + 24;
              v42 = *(unsigned __int8 *)(v41 + 47);
              v43 = *(_QWORD *)(v41 + 32);
              if ((v42 & 0x80u) != 0)
                v42 = v43;
              v41 = v7;
            }
            while (v18 <= v42);
          }
          v46 = (__int128 *)a2;
          if (v7 < (unint64_t)a2)
          {
            v47 = (__int128 *)a2;
            do
            {
              v46 = (__int128 *)((char *)v47 - 24);
              v48 = *((unsigned __int8 *)v47 - 1);
              v49 = *((_QWORD *)v47 - 2);
              if ((v48 & 0x80u) != 0)
                v48 = v49;
              v47 = v46;
            }
            while (v18 > v48);
          }
          while (v7 < (unint64_t)v46)
          {
            v165 = *(_QWORD *)(v7 + 16);
            v156 = *(_OWORD *)v7;
            v50 = *v46;
            *(_QWORD *)(v7 + 16) = *((_QWORD *)v46 + 2);
            *(_OWORD *)v7 = v50;
            *((_QWORD *)v46 + 2) = v165;
            *v46 = v156;
            do
            {
              v51 = *(unsigned __int8 *)(v7 + 47);
              v52 = *(_QWORD *)(v7 + 32);
              v7 += 24;
              if ((v51 & 0x80u) != 0)
                v51 = v52;
            }
            while (v18 <= v51);
            do
            {
              v53 = *((unsigned __int8 *)v46 - 1);
              v54 = *((_QWORD *)v46 - 2);
              v46 = (__int128 *)((char *)v46 - 24);
              if ((v53 & 0x80u) != 0)
                v53 = v54;
            }
            while (v18 > v53);
          }
          if (v7 - 24 == a1)
          {
            if (*(char *)(v7 - 1) < 0)
              operator delete(*(void **)a1);
          }
          else
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v55 = *(_OWORD *)(v7 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 8);
            *(_OWORD *)a1 = v55;
            *(_BYTE *)(v7 - 1) = 0;
          }
          a4 = 0;
          *(_QWORD *)(v7 - 24) = v39;
          *(_QWORD *)(v7 - 16) = v14;
          *(_DWORD *)(v7 - 5) = *(_DWORD *)&v152[3];
          *(_DWORD *)(v7 - 8) = *(_DWORD *)v152;
          *(_BYTE *)(v7 - 1) = v16;
          continue;
        }
        v14 = *(_QWORD *)(a1 + 8);
        v15 = *(unsigned __int8 *)(a1 + 23);
        v16 = *(_BYTE *)(a1 + 23);
LABEL_16:
        v19 = 0;
        v20 = *(_QWORD *)a1;
        *(_DWORD *)v151 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)&v151[3] = *(_DWORD *)(a1 + 19);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        if (v16 >= 0)
          v21 = v15;
        else
          v21 = v14;
        do
        {
          v22 = *(_QWORD *)(a1 + v19 + 32);
          if (*(char *)(a1 + v19 + 47) >= 0)
            v22 = *(unsigned __int8 *)(a1 + v19 + 47);
          v19 += 24;
        }
        while (v22 > v21);
        v23 = a1 + v19;
        v24 = a2;
        if (v19 == 24)
        {
          v28 = a2;
          while (v23 < (unint64_t)v28)
          {
            v25 = v28 - 3;
            v29 = *((unsigned __int8 *)v28 - 1);
            v30 = *(v28 - 2);
            if ((v29 & 0x80u) != 0)
              v29 = v30;
            v28 = v25;
            if (v29 > v21)
              goto LABEL_34;
          }
          v25 = v28;
        }
        else
        {
          do
          {
            v25 = v24 - 3;
            v26 = *((unsigned __int8 *)v24 - 1);
            v27 = *(v24 - 2);
            if ((v26 & 0x80u) != 0)
              v26 = v27;
            v24 = v25;
          }
          while (v26 <= v21);
        }
LABEL_34:
        v7 = v23;
        if (v23 < (unint64_t)v25)
        {
          v31 = (unint64_t)v25;
          do
          {
            v164 = *(_QWORD *)(v7 + 16);
            v155 = *(_OWORD *)v7;
            v32 = *(_OWORD *)v31;
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(v31 + 16);
            *(_OWORD *)v7 = v32;
            *(_QWORD *)(v31 + 16) = v164;
            *(_OWORD *)v31 = v155;
            do
            {
              v33 = *(unsigned __int8 *)(v7 + 47);
              v34 = *(_QWORD *)(v7 + 32);
              v7 += 24;
              if ((v33 & 0x80u) != 0)
                v33 = v34;
            }
            while (v33 > v21);
            do
            {
              v35 = *(unsigned __int8 *)(v31 - 1);
              v36 = *(_QWORD *)(v31 - 16);
              v31 -= 24;
              if ((v35 & 0x80u) != 0)
                v35 = v36;
            }
            while (v35 <= v21);
          }
          while (v7 < v31);
        }
        if (v7 - 24 == a1)
        {
          if (*(char *)(v7 - 1) < 0)
            operator delete(*(void **)a1);
        }
        else
        {
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v37 = *(_OWORD *)(v7 - 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 8);
          *(_OWORD *)a1 = v37;
          *(_BYTE *)(v7 - 1) = 0;
        }
        *(_QWORD *)(v7 - 24) = v20;
        *(_QWORD *)(v7 - 16) = v14;
        *(_DWORD *)(v7 - 5) = *(_DWORD *)&v151[3];
        *(_DWORD *)(v7 - 8) = *(_DWORD *)v151;
        *(_BYTE *)(v7 - 1) = v16;
        if (v23 < (unint64_t)v25)
        {
LABEL_53:
          sub_1887E1D3C(a1, v7 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v38 = sub_1887E2BDC(a1, v7 - 24);
        if (!sub_1887E2BDC(v7, (uint64_t)a2))
        {
          if (v38)
            continue;
          goto LABEL_53;
        }
        a2 = (uint64_t *)(v7 - 24);
        if (!v38)
          goto LABEL_1;
        return;
    }
  }
}

  v148 = (__int128 *)(a2 - 3);
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = (uint64_t)a2 - v7;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v7) >> 3);
    switch(v9)
    {
      case 0:
      case 1:
        return;
      case 2:
        v56 = *((unsigned __int8 *)a2 - 1);
        if ((v56 & 0x80u) != 0)
          v56 = *(a2 - 2);
        v57 = *(unsigned __int8 *)(v7 + 23);
        if ((v57 & 0x80u) != 0)
          v57 = *(_QWORD *)(v7 + 8);
        if (v56 > v57)
        {
          v166 = *(_QWORD *)(v7 + 16);
          v157 = *(_OWORD *)v7;
          v58 = *(_OWORD *)(a2 - 3);
          *(_QWORD *)(v7 + 16) = *(a2 - 1);
          *(_OWORD *)v7 = v58;
          *(a2 - 1) = v166;
          *(_OWORD *)(a2 - 3) = v157;
        }
        return;
      case 3:
        sub_1887E2A7C((__int128 *)v7, (__int128 *)(v7 + 24), v148);
        return;
      case 4:
        sub_1887E2F4C(v7, v7 + 24, v7 + 48, (uint64_t)v148);
        return;
      case 5:
        v59 = (__int128 *)(v7 + 24);
        v60 = (__int128 *)(v7 + 48);
        v61 = (__int128 *)(v7 + 72);
        sub_1887E2F4C(v7, v7 + 24, v7 + 48, v7 + 72);
        v62 = *((unsigned __int8 *)a2 - 1);
        if ((v62 & 0x80u) != 0)
          v62 = *(a2 - 2);
        v63 = *(unsigned __int8 *)(v7 + 95);
        if ((v63 & 0x80u) != 0)
          v63 = *(_QWORD *)(v7 + 80);
        if (v62 > v63)
        {
          v64 = *v61;
          v65 = *(_QWORD *)(v7 + 88);
          v66 = *(a2 - 1);
          *v61 = *(_OWORD *)(a2 - 3);
          *(_QWORD *)(v7 + 88) = v66;
          *(a2 - 1) = v65;
          *(_OWORD *)(a2 - 3) = v64;
          v67 = *(unsigned __int8 *)(v7 + 95);
          if ((v67 & 0x80u) != 0)
            v67 = *(_QWORD *)(v7 + 80);
          v68 = *(unsigned __int8 *)(v7 + 71);
          if ((v68 & 0x80u) != 0)
            v68 = *(_QWORD *)(v7 + 56);
          if (v67 > v68)
          {
            v69 = *(_QWORD *)(v7 + 64);
            v70 = *v60;
            *v60 = *v61;
            *(_QWORD *)(v7 + 64) = *(_QWORD *)(v7 + 88);
            *v61 = v70;
            *(_QWORD *)(v7 + 88) = v69;
            v71 = *(unsigned __int8 *)(v7 + 71);
            if ((v71 & 0x80u) != 0)
              v71 = *(_QWORD *)(v7 + 56);
            v72 = *(unsigned __int8 *)(v7 + 47);
            if ((v72 & 0x80u) != 0)
              v72 = *(_QWORD *)(v7 + 32);
            if (v71 > v72)
            {
              v73 = *(_QWORD *)(v7 + 40);
              v74 = *v59;
              *v59 = *v60;
              *(_QWORD *)(v7 + 40) = *(_QWORD *)(v7 + 64);
              *v60 = v74;
              *(_QWORD *)(v7 + 64) = v73;
              v75 = *(unsigned __int8 *)(v7 + 47);
              if ((v75 & 0x80u) != 0)
                v75 = *(_QWORD *)(v7 + 32);
              v76 = *(unsigned __int8 *)(v7 + 23);
              if ((v76 & 0x80u) != 0)
                v76 = *(_QWORD *)(v7 + 8);
              if (v75 > v76)
              {
                v167 = *(_QWORD *)(v7 + 16);
                v158 = *(_OWORD *)v7;
                *(_OWORD *)v7 = *v59;
                *(_QWORD *)(v7 + 16) = *(_QWORD *)(v7 + 40);
                *v59 = v158;
                *(_QWORD *)(v7 + 40) = v167;
              }
            }
          }
        }
        return;
      default:
        if (v8 <= 575)
        {
          v77 = (uint64_t *)(v7 + 24);
          v79 = (uint64_t *)v7 == a2 || v77 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v79)
            {
              v80 = 0;
              v81 = (_QWORD *)v7;
              do
              {
                v82 = v77;
                v83 = *((unsigned __int8 *)v81 + 47);
                v84 = v83;
                v85 = v81[4];
                if ((v83 & 0x80u) != 0)
                  v83 = v81[4];
                v86 = *((unsigned __int8 *)v81 + 23);
                if ((v86 & 0x80u) != 0)
                  v86 = v81[1];
                if (v83 > v86)
                {
                  v87 = *v82;
                  *(_DWORD *)v159 = *((_DWORD *)v81 + 10);
                  *(_DWORD *)&v159[3] = *(_DWORD *)((char *)v81 + 43);
                  v82[1] = 0;
                  v82[2] = 0;
                  *v82 = 0;
                  v88 = v80;
                  while (1)
                  {
                    v89 = v7 + v88;
                    *(_OWORD *)(v89 + 24) = *(_OWORD *)(v7 + v88);
                    *(_QWORD *)(v89 + 40) = *(_QWORD *)(v7 + v88 + 16);
                    *(_BYTE *)(v89 + 23) = 0;
                    *(_BYTE *)v89 = 0;
                    if (!v88)
                      break;
                    v90 = *(unsigned __int8 *)(v89 - 1);
                    v91 = *(_QWORD *)(v89 - 16);
                    if ((v90 & 0x80u) == 0)
                      v91 = v90;
                    v88 -= 24;
                    if (v83 <= v91)
                    {
                      v92 = v7 + v88 + 24;
                      goto LABEL_142;
                    }
                  }
                  v92 = v7;
LABEL_142:
                  *(_QWORD *)v92 = v87;
                  *(_QWORD *)(v92 + 8) = v85;
                  *(_DWORD *)(v92 + 16) = *(_DWORD *)v159;
                  *(_DWORD *)(v92 + 19) = *(_DWORD *)&v159[3];
                  *(_BYTE *)(v92 + 23) = v84;
                }
                v77 = v82 + 3;
                v80 += 24;
                v81 = v82;
              }
              while (v82 + 3 != a2);
            }
          }
          else if (!v79)
          {
            v138 = v7 + 47;
            do
            {
              v139 = v77;
              v140 = *(unsigned __int8 *)(a1 + 47);
              v141 = v140;
              v142 = *(_QWORD *)(a1 + 32);
              if ((v140 & 0x80u) != 0)
                v140 = *(_QWORD *)(a1 + 32);
              v143 = *(unsigned __int8 *)(a1 + 23);
              if ((v143 & 0x80u) != 0)
                v143 = *(_QWORD *)(a1 + 8);
              if (v140 > v143)
              {
                v144 = *v139;
                *(_DWORD *)v162 = *(_DWORD *)(a1 + 40);
                *(_DWORD *)&v162[3] = *(_DWORD *)(a1 + 43);
                v139[1] = 0;
                v139[2] = 0;
                *v139 = 0;
                v145 = v138;
                do
                {
                  v146 = *(_QWORD *)(v145 - 31);
                  *(_BYTE *)(v145 - 24) = 0;
                  v145 -= 24;
                  *(_QWORD *)(v145 + 17) = v146;
                  *(_OWORD *)(v145 + 1) = *(_OWORD *)(v145 - 23);
                  *(_BYTE *)(v145 - 23) = 0;
                  v147 = *(unsigned __int8 *)(v145 - 24);
                  if ((v147 & 0x80u) != 0)
                    v147 = *(_QWORD *)(v145 - 39);
                }
                while (v140 > v147);
                *(_QWORD *)(v145 - 23) = v144;
                *(_QWORD *)(v145 - 15) = v142;
                *(_DWORD *)(v145 - 4) = *(_DWORD *)&v162[3];
                *(_DWORD *)(v145 - 7) = *(_DWORD *)v162;
                *(_BYTE *)v145 = v141;
              }
              v77 = v139 + 3;
              v138 += 24;
              a1 = (uint64_t)v139;
            }
            while (v139 + 3 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((uint64_t *)v7 != a2)
          {
            v93 = (unint64_t)(v9 - 2) >> 1;
            v94 = v93;
            do
            {
              v95 = v94;
              if (v93 >= v94)
              {
                v96 = (2 * v94) | 1;
                v97 = v7 + 24 * v96;
                if (2 * v95 + 2 < v9)
                {
                  v98 = *(unsigned __int8 *)(v97 + 23);
                  if ((v98 & 0x80u) != 0)
                    v98 = *(_QWORD *)(v97 + 8);
                  v99 = *(unsigned __int8 *)(v97 + 47);
                  if ((v99 & 0x80u) != 0)
                    v99 = *(_QWORD *)(v97 + 32);
                  v97 += 24 * (v98 > v99);
                  if (v98 > v99)
                    v96 = 2 * v95 + 2;
                }
                v100 = v7 + 24 * v95;
                if (*(char *)(v97 + 23) >= 0)
                  v101 = *(unsigned __int8 *)(v97 + 23);
                else
                  v101 = *(_QWORD *)(v97 + 8);
                v102 = *(unsigned __int8 *)(v100 + 23);
                v103 = v102;
                v104 = *(_QWORD *)(v100 + 8);
                if ((v102 & 0x80u) != 0)
                  v102 = *(_QWORD *)(v100 + 8);
                if (v101 <= v102)
                {
                  v105 = *(_QWORD *)v100;
                  *(_DWORD *)&v160[3] = *(_DWORD *)(v100 + 19);
                  *(_DWORD *)v160 = *(_DWORD *)(v100 + 16);
                  *(_QWORD *)(v100 + 8) = 0;
                  *(_QWORD *)(v100 + 16) = 0;
                  *(_QWORD *)v100 = 0;
                  do
                  {
                    v106 = v100;
                    v100 = v97;
                    v107 = *(_OWORD *)v97;
                    *(_QWORD *)(v106 + 16) = *(_QWORD *)(v97 + 16);
                    *(_OWORD *)v106 = v107;
                    *(_BYTE *)(v97 + 23) = 0;
                    *(_BYTE *)v97 = 0;
                    if (v93 < v96)
                      break;
                    v108 = (2 * v96) | 1;
                    v97 = v7 + 24 * v108;
                    v109 = 2 * v96 + 2;
                    if (v109 < v9)
                    {
                      v110 = *(unsigned __int8 *)(v97 + 23);
                      if ((v110 & 0x80u) != 0)
                        v110 = *(_QWORD *)(v97 + 8);
                      v111 = *(unsigned __int8 *)(v97 + 47);
                      if ((v111 & 0x80u) != 0)
                        v111 = *(_QWORD *)(v97 + 32);
                      v97 += 24 * (v110 > v111);
                      if (v110 > v111)
                        v108 = v109;
                    }
                    v112 = *(char *)(v97 + 23) >= 0 ? *(unsigned __int8 *)(v97 + 23) : *(_QWORD *)(v97 + 8);
                    v96 = v108;
                  }
                  while (v112 <= v102);
                  *(_QWORD *)v100 = v105;
                  *(_QWORD *)(v100 + 8) = v104;
                  *(_DWORD *)(v100 + 16) = *(_DWORD *)v160;
                  *(_DWORD *)(v100 + 19) = *(_DWORD *)&v160[3];
                  *(_BYTE *)(v100 + 23) = v103;
                }
              }
              v94 = v95 - 1;
            }
            while (v95);
            v113 = v8 / 0x18uLL;
            v150 = (_QWORD *)(v7 + 8);
            do
            {
              v114 = 0;
              v115 = a2;
              v116 = *(_QWORD *)a1;
              *(_QWORD *)v161 = *v150;
              *(_QWORD *)&v161[7] = *(_QWORD *)((char *)v150 + 7);
              v117 = *(_BYTE *)(a1 + 23);
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v118 = a1;
              do
              {
                v119 = v118 + 24 * v114 + 24;
                v120 = 2 * v114;
                v114 = (2 * v114) | 1;
                v121 = v120 + 2;
                if (v120 + 2 < v113)
                {
                  v122 = *(unsigned __int8 *)(v119 + 23);
                  if ((v122 & 0x80u) != 0)
                    v122 = *(_QWORD *)(v119 + 8);
                  v123 = *(unsigned __int8 *)(v119 + 47);
                  if ((v123 & 0x80u) != 0)
                    v123 = *(_QWORD *)(v119 + 32);
                  v119 += 24 * (v122 > v123);
                  if (v122 > v123)
                    v114 = v121;
                }
                if (*(char *)(v118 + 23) < 0)
                  operator delete(*(void **)v118);
                v124 = *(_OWORD *)v119;
                *(_QWORD *)(v118 + 16) = *(_QWORD *)(v119 + 16);
                *(_OWORD *)v118 = v124;
                *(_BYTE *)(v119 + 23) = 0;
                *(_BYTE *)v119 = 0;
                v118 = v119;
              }
              while (v114 <= (uint64_t)((unint64_t)(v113 - 2) >> 1));
              a2 -= 3;
              if ((uint64_t *)v119 == v115 - 3)
              {
                *(_QWORD *)v119 = v116;
                *(_QWORD *)(v119 + 8) = *(_QWORD *)v161;
                *(_QWORD *)(v119 + 15) = *(_QWORD *)&v161[7];
                *(_BYTE *)(v119 + 23) = v117;
              }
              else
              {
                v125 = *(_OWORD *)a2;
                *(_QWORD *)(v119 + 16) = *(v115 - 1);
                *(_OWORD *)v119 = v125;
                *(v115 - 3) = v116;
                *(uint64_t *)((char *)v115 - 9) = *(_QWORD *)&v161[7];
                *(v115 - 2) = *(_QWORD *)v161;
                *((_BYTE *)v115 - 1) = v117;
                v126 = v119 - a1 + 24;
                if (v126 >= 25)
                {
                  v127 = (v126 / 0x18uLL - 2) >> 1;
                  v128 = a1 + 24 * v127;
                  if (*(char *)(v128 + 23) >= 0)
                    v129 = *(unsigned __int8 *)(v128 + 23);
                  else
                    v129 = *(_QWORD *)(v128 + 8);
                  v130 = *(unsigned __int8 *)(v119 + 23);
                  v131 = v130;
                  v132 = *(_QWORD *)(v119 + 8);
                  if ((v130 & 0x80u) != 0)
                    v130 = *(_QWORD *)(v119 + 8);
                  if (v129 > v130)
                  {
                    v133 = *(_QWORD *)v119;
                    *(_DWORD *)&v153[3] = *(_DWORD *)(v119 + 19);
                    *(_DWORD *)v153 = *(_DWORD *)(v119 + 16);
                    *(_QWORD *)(v119 + 8) = 0;
                    *(_QWORD *)(v119 + 16) = 0;
                    *(_QWORD *)v119 = 0;
                    do
                    {
                      v134 = v119;
                      v119 = v128;
                      v135 = *(_OWORD *)v128;
                      *(_QWORD *)(v134 + 16) = *(_QWORD *)(v128 + 16);
                      *(_OWORD *)v134 = v135;
                      *(_BYTE *)(v128 + 23) = 0;
                      *(_BYTE *)v128 = 0;
                      if (!v127)
                        break;
                      v127 = (v127 - 1) >> 1;
                      v128 = a1 + 24 * v127;
                      v136 = *(unsigned __int8 *)(v128 + 23);
                      if ((v136 & 0x80u) != 0)
                        v136 = *(_QWORD *)(v128 + 8);
                    }
                    while (v136 > v130);
                    *(_QWORD *)v119 = v133;
                    *(_QWORD *)(v119 + 8) = v132;
                    *(_DWORD *)(v119 + 16) = *(_DWORD *)v153;
                    *(_DWORD *)(v119 + 19) = *(_DWORD *)&v153[3];
                    *(_BYTE *)(v119 + 23) = v131;
                  }
                }
              }
            }
            while (v113-- > 2);
          }
          return;
        }
        v10 = (unint64_t)v9 >> 1;
        v11 = v7 + 24 * ((unint64_t)v9 >> 1);
        if ((unint64_t)v8 < 0xC01)
        {
          sub_1887E2A7C((__int128 *)(a1 + 24 * v10), (__int128 *)a1, v148);
        }
        else
        {
          sub_1887E2A7C((__int128 *)a1, (__int128 *)(a1 + 24 * v10), v148);
          v12 = 3 * v10;
          sub_1887E2A7C((__int128 *)(a1 + 24), (__int128 *)(a1 + 8 * v12 - 24), (__int128 *)a2 - 3);
          sub_1887E2A7C((__int128 *)(a1 + 48), (__int128 *)(a1 + 24 + 8 * v12), (__int128 *)(a2 - 9));
          sub_1887E2A7C((__int128 *)(a1 + 8 * v12 - 24), (__int128 *)v11, (__int128 *)(a1 + 24 + 8 * v12));
          v163 = *(_QWORD *)(a1 + 16);
          v154 = *(_OWORD *)a1;
          v13 = *(_QWORD *)(v11 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v11;
          *(_QWORD *)(a1 + 16) = v13;
          *(_QWORD *)(v11 + 16) = v163;
          *(_OWORD *)v11 = v154;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(_QWORD *)(a1 - 16);
          if (*(char *)(a1 - 1) >= 0)
            v17 = *(unsigned __int8 *)(a1 - 1);
          v15 = *(unsigned __int8 *)(a1 + 23);
          v16 = v15;
          v14 = *(_QWORD *)(a1 + 8);
          if ((v15 & 0x80u) == 0)
            v18 = *(unsigned __int8 *)(a1 + 23);
          else
            v18 = *(_QWORD *)(a1 + 8);
          if (v17 > v18)
            goto LABEL_16;
          v39 = *(_QWORD *)a1;
          *(_DWORD *)v152 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)&v152[3] = *(_DWORD *)(a1 + 19);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v40 = *((unsigned __int8 *)a2 - 1);
          if ((v40 & 0x80u) != 0)
            v40 = *(a2 - 2);
          if (v18 <= v40)
          {
            v44 = a1 + 24;
            do
            {
              v7 = v44;
              if (v44 >= (unint64_t)a2)
                break;
              v45 = *(char *)(v44 + 23) >= 0 ? *(unsigned __int8 *)(v44 + 23) : *(_QWORD *)(v44 + 8);
              v44 += 24;
            }
            while (v18 <= v45);
          }
          else
          {
            v41 = a1;
            do
            {
              v7 = v41 + 24;
              v42 = *(unsigned __int8 *)(v41 + 47);
              v43 = *(_QWORD *)(v41 + 32);
              if ((v42 & 0x80u) != 0)
                v42 = v43;
              v41 = v7;
            }
            while (v18 <= v42);
          }
          v46 = (__int128 *)a2;
          if (v7 < (unint64_t)a2)
          {
            v47 = (__int128 *)a2;
            do
            {
              v46 = (__int128 *)((char *)v47 - 24);
              v48 = *((unsigned __int8 *)v47 - 1);
              v49 = *((_QWORD *)v47 - 2);
              if ((v48 & 0x80u) != 0)
                v48 = v49;
              v47 = v46;
            }
            while (v18 > v48);
          }
          while (v7 < (unint64_t)v46)
          {
            v165 = *(_QWORD *)(v7 + 16);
            v156 = *(_OWORD *)v7;
            v50 = *v46;
            *(_QWORD *)(v7 + 16) = *((_QWORD *)v46 + 2);
            *(_OWORD *)v7 = v50;
            *((_QWORD *)v46 + 2) = v165;
            *v46 = v156;
            do
            {
              v51 = *(unsigned __int8 *)(v7 + 47);
              v52 = *(_QWORD *)(v7 + 32);
              v7 += 24;
              if ((v51 & 0x80u) != 0)
                v51 = v52;
            }
            while (v18 <= v51);
            do
            {
              v53 = *((unsigned __int8 *)v46 - 1);
              v54 = *((_QWORD *)v46 - 2);
              v46 = (__int128 *)((char *)v46 - 24);
              if ((v53 & 0x80u) != 0)
                v53 = v54;
            }
            while (v18 > v53);
          }
          if (v7 - 24 == a1)
          {
            if (*(char *)(v7 - 1) < 0)
              operator delete(*(void **)a1);
          }
          else
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v55 = *(_OWORD *)(v7 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 8);
            *(_OWORD *)a1 = v55;
            *(_BYTE *)(v7 - 1) = 0;
          }
          a4 = 0;
          *(_QWORD *)(v7 - 24) = v39;
          *(_QWORD *)(v7 - 16) = v14;
          *(_DWORD *)(v7 - 5) = *(_DWORD *)&v152[3];
          *(_DWORD *)(v7 - 8) = *(_DWORD *)v152;
          *(_BYTE *)(v7 - 1) = v16;
          continue;
        }
        v14 = *(_QWORD *)(a1 + 8);
        v15 = *(unsigned __int8 *)(a1 + 23);
        v16 = *(_BYTE *)(a1 + 23);
LABEL_16:
        v19 = 0;
        v20 = *(_QWORD *)a1;
        *(_DWORD *)v151 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)&v151[3] = *(_DWORD *)(a1 + 19);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        if (v16 >= 0)
          v21 = v15;
        else
          v21 = v14;
        do
        {
          v22 = *(_QWORD *)(a1 + v19 + 32);
          if (*(char *)(a1 + v19 + 47) >= 0)
            v22 = *(unsigned __int8 *)(a1 + v19 + 47);
          v19 += 24;
        }
        while (v22 > v21);
        v23 = a1 + v19;
        v24 = a2;
        if (v19 == 24)
        {
          v28 = a2;
          while (v23 < (unint64_t)v28)
          {
            v25 = v28 - 3;
            v29 = *((unsigned __int8 *)v28 - 1);
            v30 = *(v28 - 2);
            if ((v29 & 0x80u) != 0)
              v29 = v30;
            v28 = v25;
            if (v29 > v21)
              goto LABEL_34;
          }
          v25 = v28;
        }
        else
        {
          do
          {
            v25 = v24 - 3;
            v26 = *((unsigned __int8 *)v24 - 1);
            v27 = *(v24 - 2);
            if ((v26 & 0x80u) != 0)
              v26 = v27;
            v24 = v25;
          }
          while (v26 <= v21);
        }
LABEL_34:
        v7 = v23;
        if (v23 < (unint64_t)v25)
        {
          v31 = (unint64_t)v25;
          do
          {
            v164 = *(_QWORD *)(v7 + 16);
            v155 = *(_OWORD *)v7;
            v32 = *(_OWORD *)v31;
            *(_QWORD *)(v7 + 16) = *(_QWORD *)(v31 + 16);
            *(_OWORD *)v7 = v32;
            *(_QWORD *)(v31 + 16) = v164;
            *(_OWORD *)v31 = v155;
            do
            {
              v33 = *(unsigned __int8 *)(v7 + 47);
              v34 = *(_QWORD *)(v7 + 32);
              v7 += 24;
              if ((v33 & 0x80u) != 0)
                v33 = v34;
            }
            while (v33 > v21);
            do
            {
              v35 = *(unsigned __int8 *)(v31 - 1);
              v36 = *(_QWORD *)(v31 - 16);
              v31 -= 24;
              if ((v35 & 0x80u) != 0)
                v35 = v36;
            }
            while (v35 <= v21);
          }
          while (v7 < v31);
        }
        if (v7 - 24 == a1)
        {
          if (*(char *)(v7 - 1) < 0)
            operator delete(*(void **)a1);
        }
        else
        {
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v37 = *(_OWORD *)(v7 - 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 - 8);
          *(_OWORD *)a1 = v37;
          *(_BYTE *)(v7 - 1) = 0;
        }
        *(_QWORD *)(v7 - 24) = v20;
        *(_QWORD *)(v7 - 16) = v14;
        *(_DWORD *)(v7 - 5) = *(_DWORD *)&v151[3];
        *(_DWORD *)(v7 - 8) = *(_DWORD *)v151;
        *(_BYTE *)(v7 - 1) = v16;
        if (v23 < (unint64_t)v25)
        {
LABEL_53:
          sub_1887E3484(a1, v7 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v38 = sub_1887E41C4(a1, v7 - 24);
        if (!sub_1887E41C4(v7, (uint64_t)a2))
        {
          if (v38)
            continue;
          goto LABEL_53;
        }
        a2 = (uint64_t *)(v7 - 24);
        if (!v38)
          goto LABEL_1;
        return;
    }
  }
}

  v78 = a2 - 2;
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (zilch::Probability::operator<(a2 - 1, a1[1]))
        {
          v81 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *((_OWORD *)a2 - 1);
          *((_OWORD *)a2 - 1) = v81;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, a1 + 2, v78);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, a1 + 2, a1 + 4, (uint64_t)v78);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, a1 + 2, a1 + 4, (uint64_t)(a1 + 6), (uint64_t)v78);
        return;
      default:
        if (v9 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if (a1 != a2)
            {
              v37 = a1 + 2;
              if (a1 + 2 != a2)
              {
                v38 = 0;
                v39 = a1;
                do
                {
                  v40 = v39[1];
                  v41 = v39 + 3;
                  v39 = v37;
                  if (zilch::Probability::operator<(v41, v40))
                  {
                    v81 = *(_OWORD *)v39;
                    v42 = v38;
                    while (1)
                    {
                      v43 = (double *)((char *)a1 + v42);
                      *(_OWORD *)((char *)a1 + v42 + 16) = *(_OWORD *)((char *)a1 + v42);
                      if (!v42)
                        break;
                      v42 -= 16;
                      if (!zilch::Probability::operator<((double *)&v81 + 1, *(v43 - 1)))
                      {
                        v44 = (double *)((char *)a1 + v42 + 16);
                        goto LABEL_68;
                      }
                    }
                    v44 = a1;
LABEL_68:
                    *(_OWORD *)v44 = v81;
                  }
                  v37 = v39 + 2;
                  v38 += 16;
                }
                while (v39 + 2 != a2);
              }
            }
          }
          else if (a1 != a2)
          {
            for (i = a1 + 2; a1 + 2 != a2; i = a1 + 2)
            {
              v73 = a1[1];
              v74 = a1 + 3;
              a1 = i;
              if (zilch::Probability::operator<(v74, v73))
              {
                v81 = *(_OWORD *)a1;
                v75 = a1;
                do
                {
                  v76 = v75 - 2;
                  *(_OWORD *)v75 = *((_OWORD *)v75 - 1);
                  v77 = zilch::Probability::operator<((double *)&v81 + 1, *(v75 - 3));
                  v75 = v76;
                }
                while (v77);
                *(_OWORD *)v76 = v81;
              }
            }
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v45 = (unint64_t)(v10 - 2) >> 1;
            v46 = v45;
            do
            {
              v47 = v46;
              if (v45 >= v46)
              {
                v48 = (2 * v46) | 1;
                v49 = &a1[2 * v48];
                if (2 * v46 + 2 < v10)
                {
                  v50 = zilch::Probability::operator<(v49 + 1, v49[3]);
                  v49 += 2 * v50;
                  if (v50)
                    v48 = 2 * v47 + 2;
                }
                v51 = &a1[2 * v47];
                if (!zilch::Probability::operator<(v49 + 1, v51[1]))
                {
                  v79 = *(_QWORD *)v51;
                  v52 = v51[1];
                  do
                  {
                    v53 = v51;
                    v51 = v49;
                    *(_OWORD *)v53 = *(_OWORD *)v49;
                    if (v45 < v48)
                      break;
                    v54 = (2 * v48) | 1;
                    v49 = &a1[2 * v54];
                    v55 = 2 * v48 + 2;
                    if (v55 < v10)
                    {
                      v56 = zilch::Probability::operator<(v49 + 1, v49[3]);
                      v49 += 2 * v56;
                      if (v56)
                        v54 = v55;
                    }
                    v48 = v54;
                  }
                  while (!zilch::Probability::operator<(v49 + 1, v52));
                  *(_QWORD *)v51 = v79;
                  v51[1] = v52;
                }
              }
              v46 = v47 - 1;
            }
            while (v47);
            v57 = (unint64_t)v9 >> 4;
            do
            {
              v58 = 0;
              v81 = *(_OWORD *)a1;
              v59 = v57 - 2;
              if (v57 < 2)
                v59 = v57 - 1;
              v60 = v59 >> 1;
              v61 = a1;
              do
              {
                v62 = &v61[2 * v58 + 2];
                v63 = (2 * v58) | 1;
                v64 = 2 * v58 + 2;
                if (v64 < v57)
                {
                  v65 = zilch::Probability::operator<(v62 + 1, v62[3]);
                  v62 += 2 * v65;
                  if (v65)
                    v63 = v64;
                }
                *(_OWORD *)v61 = *(_OWORD *)v62;
                v61 = v62;
                v58 = v63;
              }
              while (v63 <= v60);
              a2 -= 2;
              if (v62 == a2)
              {
                *(_OWORD *)v62 = v81;
              }
              else
              {
                *(_OWORD *)v62 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v81;
                v66 = (char *)v62 - (char *)a1 + 16;
                if (v66 >= 17)
                {
                  v67 = (((unint64_t)v66 >> 4) - 2) >> 1;
                  if (zilch::Probability::operator<(&a1[2 * v67 + 1], v62[1]))
                  {
                    v68 = *(_QWORD *)v62;
                    v69 = v62[1];
                    do
                    {
                      v70 = v62;
                      v62 = &a1[2 * v67];
                      *(_OWORD *)v70 = *(_OWORD *)v62;
                      if (!v67)
                        break;
                      v67 = (v67 - 1) >> 1;
                    }
                    while (zilch::Probability::operator<(&a1[2 * v67 + 1], v69));
                    *(_QWORD *)v62 = v68;
                    v62[1] = v69;
                  }
                }
              }
            }
            while (v57-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &a1[2 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(v12, a1, v78);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, v12, v78);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1 + 2, v12 - 2, a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1 + 4, &a1[2 * v11 + 2], a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(v12 - 2, v12, &a1[2 * v11 + 2]);
          v81 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v81;
        }
        --a3;
        if ((a4 & 1) == 0 && !zilch::Probability::operator<(a1 - 1, a1[1]))
        {
          v80 = *(_OWORD *)a1;
          if (zilch::Probability::operator<((double *)&v80 + 1, *(a2 - 1)))
          {
            v27 = a1;
            do
            {
              v8 = v27 + 2;
              v28 = zilch::Probability::operator<((double *)&v80 + 1, v27[3]);
              v27 = v8;
            }
            while (!v28);
          }
          else
          {
            v29 = a1 + 2;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              v30 = zilch::Probability::operator<((double *)&v80 + 1, v29[1]);
              v29 = v8 + 2;
            }
            while (!v30);
          }
          v31 = a2;
          if (v8 < a2)
          {
            v32 = a2;
            do
            {
              v31 = v32 - 2;
              v33 = zilch::Probability::operator<((double *)&v80 + 1, *(v32 - 1));
              v32 = v31;
            }
            while (v33);
          }
          while (v8 < v31)
          {
            v81 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v31;
            *(_OWORD *)v31 = v81;
            do
            {
              v34 = v8[3];
              v8 += 2;
            }
            while (!zilch::Probability::operator<((double *)&v80 + 1, v34));
            do
            {
              v35 = *(v31 - 1);
              v31 -= 2;
            }
            while (zilch::Probability::operator<((double *)&v80 + 1, v35));
          }
          v36 = v8 - 2;
          if (v8 - 2 != a1)
            *(_OWORD *)a1 = *(_OWORD *)v36;
          a4 = 0;
          *(_OWORD *)v36 = v80;
          continue;
        }
        v13 = 0;
        v14 = *a1;
        v15 = a1[1];
        do
        {
          v16 = zilch::Probability::operator<(&a1[v13 + 3], v15);
          v13 += 2;
        }
        while (v16);
        v17 = &a1[v13];
        v18 = a2;
        if (v13 == 2)
        {
          v21 = a2;
          while (v17 < v21)
          {
            v19 = v21 - 2;
            v22 = zilch::Probability::operator<(v21 - 1, v15);
            v21 = v19;
            if (v22)
              goto LABEL_20;
          }
          v19 = v21;
        }
        else
        {
          do
          {
            v19 = v18 - 2;
            v20 = zilch::Probability::operator<(v18 - 1, v15);
            v18 = v19;
          }
          while (!v20);
        }
LABEL_20:
        v8 = v17;
        if (v17 < v19)
        {
          v23 = v19;
          do
          {
            v81 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v23;
            *(_OWORD *)v23 = v81;
            do
            {
              v24 = v8 + 3;
              v8 += 2;
            }
            while (zilch::Probability::operator<(v24, v15));
            do
            {
              v25 = v23 - 1;
              v23 -= 2;
            }
            while (!zilch::Probability::operator<(v25, v15));
          }
          while (v8 < v23);
        }
        if (v8 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v8 - 1);
        *(v8 - 2) = v14;
        *(v8 - 1) = v15;
        if (v17 < v19)
        {
LABEL_31:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *,false>(a1, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(a1, v8 - 2);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,zilch::PathHypothesis<std::shared_ptr<geo::MapEdge>>::ProbableRoad *>(v8, a2))
        {
          if (v26)
            continue;
          goto LABEL_31;
        }
        a2 = v8 - 2;
        if (!v26)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a2 - 56;
  v165 = a2 - 112;
  v166 = a2;
  v9 = a2 - 168;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - v10) >> 3);
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v8, a1))
        {
          v72 = *(_OWORD *)a1;
          v73 = *(_OWORD *)(a1 + 16);
          v74 = *(_OWORD *)(a1 + 32);
          v174 = *(_QWORD *)(a1 + 48);
          v172 = v73;
          v173 = v74;
          v171 = v72;
          v75 = *(_OWORD *)v8;
          v76 = *(_OWORD *)(v8 + 16);
          v77 = *(_OWORD *)(v8 + 32);
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(v8 + 48);
          *(_OWORD *)(a1 + 16) = v76;
          *(_OWORD *)(a1 + 32) = v77;
          *(_OWORD *)a1 = v75;
          v78 = v171;
          v79 = v172;
          v80 = v173;
          *(_DWORD *)(v8 + 48) = v174;
          *(_OWORD *)(v8 + 16) = v79;
          *(_OWORD *)(v8 + 32) = v80;
          *(_OWORD *)v8 = v78;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, a1 + 56, v8);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, a1 + 56, a1 + 112, v8);
        return;
      case 5:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, a1 + 56, a1 + 112, a1 + 168, v8);
        return;
      default:
        if (v11 <= 1343)
        {
          v81 = a1 + 56;
          v82 = a1 == a2 || v81 == a2;
          v83 = v82;
          if ((a4 & 1) != 0)
          {
            if ((v83 & 1) == 0)
            {
              v84 = 0;
              v85 = a1;
              do
              {
                v86 = v85;
                v85 = v81;
                if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v81, v86))
                {
                  v87 = *(_OWORD *)v85;
                  v88 = *(_OWORD *)(v85 + 16);
                  v89 = *(_OWORD *)(v85 + 32);
                  v174 = *(_QWORD *)(v85 + 48);
                  v172 = v88;
                  v173 = v89;
                  v171 = v87;
                  v90 = v84;
                  while (1)
                  {
                    v91 = a1 + v90;
                    v92 = *(_OWORD *)(a1 + v90 + 16);
                    *(_OWORD *)(v91 + 56) = *(_OWORD *)(a1 + v90);
                    *(_OWORD *)(v91 + 72) = v92;
                    *(_OWORD *)(v91 + 88) = *(_OWORD *)(a1 + v90 + 32);
                    *(_DWORD *)(v91 + 104) = *(_DWORD *)(a1 + v90 + 48);
                    if (!v90)
                      break;
                    v90 -= 56;
                    if ((maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<((uint64_t)&v171, v90 + a1) & 1) == 0)
                    {
                      v93 = a1 + v90 + 56;
                      goto LABEL_73;
                    }
                  }
                  v93 = a1;
LABEL_73:
                  v94 = v171;
                  v95 = v172;
                  v96 = v173;
                  *(_DWORD *)(v93 + 48) = v174;
                  *(_OWORD *)(v93 + 16) = v95;
                  *(_OWORD *)(v93 + 32) = v96;
                  *(_OWORD *)v93 = v94;
                  a2 = v166;
                }
                v81 = v85 + 56;
                v84 += 56;
              }
              while (v85 + 56 != a2);
            }
          }
          else if ((v83 & 1) == 0)
          {
            v154 = a1 - 56;
            do
            {
              v155 = a1;
              a1 = v81;
              if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v81, v155))
              {
                v156 = *(_OWORD *)a1;
                v157 = *(_OWORD *)(a1 + 16);
                v158 = *(_OWORD *)(a1 + 32);
                v174 = *(_QWORD *)(a1 + 48);
                v172 = v157;
                v173 = v158;
                v171 = v156;
                v159 = v154;
                do
                {
                  v160 = *(_OWORD *)(v159 + 72);
                  *(_OWORD *)(v159 + 112) = *(_OWORD *)(v159 + 56);
                  *(_OWORD *)(v159 + 128) = v160;
                  *(_OWORD *)(v159 + 144) = *(_OWORD *)(v159 + 88);
                  *(_DWORD *)(v159 + 160) = *(_DWORD *)(v159 + 104);
                  v161 = maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<((uint64_t)&v171, v159);
                  v159 -= 56;
                }
                while ((v161 & 1) != 0);
                v162 = v171;
                v163 = v172;
                v164 = v173;
                *(_DWORD *)(v159 + 160) = v174;
                *(_OWORD *)(v159 + 128) = v163;
                *(_OWORD *)(v159 + 144) = v164;
                *(_OWORD *)(v159 + 112) = v162;
              }
              v81 = a1 + 56;
              v154 += 56;
            }
            while (a1 + 56 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v97 = (unint64_t)(v12 - 2) >> 1;
            v98 = v97;
            do
            {
              v99 = v98;
              if (v97 >= v98)
              {
                v100 = (2 * v98) | 1;
                v101 = a1 + 56 * v100;
                if (2 * v98 + 2 < v12
                  && maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a1 + 56 * v100, v101 + 56))
                {
                  v101 += 56;
                  v100 = 2 * v99 + 2;
                }
                v102 = a1 + 56 * v99;
                if ((maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v101, v102) & 1) == 0)
                {
                  v103 = *(_OWORD *)v102;
                  v104 = *(_OWORD *)(v102 + 16);
                  v105 = *(_OWORD *)(v102 + 32);
                  v174 = *(_QWORD *)(v102 + 48);
                  v172 = v104;
                  v173 = v105;
                  v171 = v103;
                  do
                  {
                    v106 = v101;
                    v107 = *(_OWORD *)v101;
                    v108 = *(_OWORD *)(v101 + 16);
                    v109 = *(_OWORD *)(v101 + 32);
                    *(_DWORD *)(v102 + 48) = *(_DWORD *)(v101 + 48);
                    *(_OWORD *)(v102 + 16) = v108;
                    *(_OWORD *)(v102 + 32) = v109;
                    *(_OWORD *)v102 = v107;
                    if (v97 < v100)
                      break;
                    v110 = (2 * v100) | 1;
                    v101 = a1 + 56 * v110;
                    v111 = 2 * v100 + 2;
                    if (v111 < v12
                      && maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a1 + 56 * v110, v101 + 56))
                    {
                      v101 += 56;
                      v110 = v111;
                    }
                    v102 = v106;
                    v100 = v110;
                  }
                  while (!maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v101, (uint64_t)&v171));
                  v112 = v171;
                  v113 = v172;
                  v114 = v173;
                  *(_DWORD *)(v106 + 48) = v174;
                  *(_OWORD *)(v106 + 16) = v113;
                  *(_OWORD *)(v106 + 32) = v114;
                  *(_OWORD *)v106 = v112;
                }
              }
              v98 = v99 - 1;
            }
            while (v99);
            v115 = v11 / 0x38uLL;
            v116 = v166;
            do
            {
              v117 = 0;
              v118 = *(_OWORD *)a1;
              v119 = *(_OWORD *)(a1 + 16);
              v120 = *(_OWORD *)(a1 + 32);
              v170 = *(_QWORD *)(a1 + 48);
              v168 = v119;
              v169 = v120;
              v167 = v118;
              v121 = v115 - 2;
              if (v115 < 2)
                v121 = v115 - 1;
              v122 = v121 >> 1;
              v123 = a1;
              do
              {
                v124 = v123 + 56 * v117 + 56;
                v125 = (2 * v117) | 1;
                v126 = 2 * v117 + 2;
                if (v126 < v115
                  && maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v123 + 56 * v117 + 56, v123 + 56 * v117 + 112))
                {
                  v124 += 56;
                  v125 = v126;
                }
                v127 = *(_OWORD *)v124;
                v128 = *(_OWORD *)(v124 + 16);
                v129 = *(_OWORD *)(v124 + 32);
                *(_DWORD *)(v123 + 48) = *(_DWORD *)(v124 + 48);
                *(_OWORD *)(v123 + 16) = v128;
                *(_OWORD *)(v123 + 32) = v129;
                *(_OWORD *)v123 = v127;
                v123 = v124;
                v117 = v125;
              }
              while (v125 <= v122);
              v116 -= 56;
              if (v124 == v116)
              {
                v150 = v167;
                v151 = v168;
                v152 = v169;
                *(_DWORD *)(v124 + 48) = v170;
                *(_OWORD *)(v124 + 16) = v151;
                *(_OWORD *)(v124 + 32) = v152;
                *(_OWORD *)v124 = v150;
                v137 = v115 - 1;
              }
              else
              {
                v130 = *(_OWORD *)v116;
                v131 = *(_OWORD *)(v116 + 16);
                v132 = *(_OWORD *)(v116 + 32);
                *(_DWORD *)(v124 + 48) = *(_DWORD *)(v116 + 48);
                *(_OWORD *)(v124 + 16) = v131;
                *(_OWORD *)(v124 + 32) = v132;
                *(_OWORD *)v124 = v130;
                v133 = v167;
                v134 = v168;
                v135 = v169;
                *(_DWORD *)(v116 + 48) = v170;
                *(_OWORD *)(v116 + 16) = v134;
                *(_OWORD *)(v116 + 32) = v135;
                *(_OWORD *)v116 = v133;
                v136 = v124 - a1 + 56;
                v137 = v115 - 1;
                if (v136 >= 57)
                {
                  v138 = (v136 / 0x38uLL - 2) >> 1;
                  v139 = a1 + 56 * v138;
                  if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v139, v124))
                  {
                    v140 = *(_OWORD *)v124;
                    v141 = *(_OWORD *)(v124 + 16);
                    v142 = *(_OWORD *)(v124 + 32);
                    v174 = *(_QWORD *)(v124 + 48);
                    v172 = v141;
                    v173 = v142;
                    v171 = v140;
                    do
                    {
                      v143 = v139;
                      v144 = *(_OWORD *)v139;
                      v145 = *(_OWORD *)(v139 + 16);
                      v146 = *(_OWORD *)(v139 + 32);
                      *(_DWORD *)(v124 + 48) = *(_DWORD *)(v139 + 48);
                      *(_OWORD *)(v124 + 16) = v145;
                      *(_OWORD *)(v124 + 32) = v146;
                      *(_OWORD *)v124 = v144;
                      if (!v138)
                        break;
                      v138 = (v138 - 1) >> 1;
                      v139 = a1 + 56 * v138;
                      v124 = v143;
                    }
                    while ((maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v139, (uint64_t)&v171) & 1) != 0);
                    v147 = v171;
                    v148 = v172;
                    v149 = v173;
                    *(_DWORD *)(v143 + 48) = v174;
                    *(_OWORD *)(v143 + 16) = v148;
                    *(_OWORD *)(v143 + 32) = v149;
                    *(_OWORD *)v143 = v147;
                  }
                }
              }
              v153 = v115 <= 2;
              v115 = v137;
            }
            while (!v153);
          }
          return;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = a1 + 56 * ((unint64_t)v12 >> 1);
        if ((unint64_t)v11 < 0x1C01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(v14, a1, v8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, v14, v8);
          v15 = 56 * v13;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1 + 56, v15 + a1 - 56, v165);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1 + 112, a1 + 56 + v15, v9);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(v15 + a1 - 56, v14, a1 + 56 + v15);
          v16 = *(_OWORD *)a1;
          v17 = *(_OWORD *)(a1 + 16);
          v18 = *(_OWORD *)(a1 + 32);
          v174 = *(_QWORD *)(a1 + 48);
          v172 = v17;
          v173 = v18;
          v171 = v16;
          v19 = *(_OWORD *)v14;
          v20 = *(_OWORD *)(v14 + 16);
          v21 = *(_OWORD *)(v14 + 32);
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(v14 + 48);
          *(_OWORD *)(a1 + 16) = v20;
          *(_OWORD *)(a1 + 32) = v21;
          *(_OWORD *)a1 = v19;
          v22 = v171;
          v23 = v172;
          v24 = v173;
          *(_DWORD *)(v14 + 48) = v174;
          *(_OWORD *)(v14 + 16) = v23;
          *(_OWORD *)(v14 + 32) = v24;
          *(_OWORD *)v14 = v22;
        }
        --a3;
        if ((a4 & 1) == 0
          && (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a1 - 56, a1) & 1) == 0)
        {
          v50 = *(_OWORD *)a1;
          v51 = *(_OWORD *)(a1 + 16);
          v52 = *(_OWORD *)(a1 + 32);
          v170 = *(_QWORD *)(a1 + 48);
          v168 = v51;
          v169 = v52;
          v167 = v50;
          if ((maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<((uint64_t)&v167, v8) & 1) != 0)
          {
            v10 = a1;
            a2 = v166;
            do
              v10 += 56;
            while ((maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<((uint64_t)&v167, v10) & 1) == 0);
          }
          else
          {
            v53 = a1 + 56;
            a2 = v166;
            do
            {
              v10 = v53;
              if (v53 >= v166)
                break;
              v54 = maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<((uint64_t)&v167, v53);
              v53 = v10 + 56;
            }
            while (!v54);
          }
          v55 = a2;
          if (v10 < a2)
          {
            v55 = a2;
            do
              v55 -= 56;
            while ((maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<((uint64_t)&v167, v55) & 1) != 0);
          }
          while (v10 < v55)
          {
            v56 = *(_OWORD *)v10;
            v57 = *(_OWORD *)(v10 + 16);
            v58 = *(_OWORD *)(v10 + 32);
            v174 = *(_QWORD *)(v10 + 48);
            v172 = v57;
            v173 = v58;
            v171 = v56;
            v59 = *(_OWORD *)v55;
            v60 = *(_OWORD *)(v55 + 16);
            v61 = *(_OWORD *)(v55 + 32);
            *(_DWORD *)(v10 + 48) = *(_DWORD *)(v55 + 48);
            *(_OWORD *)(v10 + 16) = v60;
            *(_OWORD *)(v10 + 32) = v61;
            *(_OWORD *)v10 = v59;
            v62 = v171;
            v63 = v172;
            v64 = v173;
            *(_DWORD *)(v55 + 48) = v174;
            *(_OWORD *)(v55 + 16) = v63;
            *(_OWORD *)(v55 + 32) = v64;
            *(_OWORD *)v55 = v62;
            do
              v10 += 56;
            while (!maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<((uint64_t)&v167, v10));
            do
              v55 -= 56;
            while ((maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<((uint64_t)&v167, v55) & 1) != 0);
          }
          v65 = (__int128 *)(v10 - 56);
          if (v10 - 56 != a1)
          {
            v66 = *v65;
            v67 = *(_OWORD *)(v10 - 40);
            v68 = *(_OWORD *)(v10 - 24);
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(v10 - 8);
            *(_OWORD *)(a1 + 16) = v67;
            *(_OWORD *)(a1 + 32) = v68;
            *(_OWORD *)a1 = v66;
          }
          a4 = 0;
          v69 = v167;
          v70 = v168;
          v71 = v169;
          *(_DWORD *)(v10 - 8) = v170;
          *(_OWORD *)(v10 - 40) = v70;
          *(_OWORD *)(v10 - 24) = v71;
          *v65 = v69;
          continue;
        }
        v25 = 0;
        v26 = *(_OWORD *)a1;
        v27 = *(_OWORD *)(a1 + 16);
        v28 = *(_OWORD *)(a1 + 32);
        v170 = *(_QWORD *)(a1 + 48);
        v168 = v27;
        v169 = v28;
        v167 = v26;
        do
          v25 += 56;
        while ((maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v25 + a1, (uint64_t)&v167) & 1) != 0);
        v29 = a1 + v25;
        v30 = v166;
        v82 = v25 == 56;
        a2 = v166;
        if (v82)
        {
          v30 = v166;
          do
          {
            if (v29 >= v30)
              break;
            v30 -= 56;
          }
          while ((maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v30, (uint64_t)&v167) & 1) == 0);
        }
        else
        {
          do
            v30 -= 56;
          while (!maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v30, (uint64_t)&v167));
        }
        if (v29 >= v30)
        {
          v42 = v29 - 56;
        }
        else
        {
          v31 = v29;
          v32 = v30;
          do
          {
            v33 = *(_OWORD *)v31;
            v34 = *(_OWORD *)(v31 + 16);
            v35 = *(_OWORD *)(v31 + 32);
            v174 = *(_QWORD *)(v31 + 48);
            v172 = v34;
            v173 = v35;
            v171 = v33;
            v36 = *(_OWORD *)v32;
            v37 = *(_OWORD *)(v32 + 16);
            v38 = *(_OWORD *)(v32 + 32);
            *(_DWORD *)(v31 + 48) = *(_DWORD *)(v32 + 48);
            *(_OWORD *)(v31 + 16) = v37;
            *(_OWORD *)(v31 + 32) = v38;
            *(_OWORD *)v31 = v36;
            v39 = v171;
            v40 = v172;
            v41 = v173;
            *(_DWORD *)(v32 + 48) = v174;
            *(_OWORD *)(v32 + 16) = v40;
            *(_OWORD *)(v32 + 32) = v41;
            *(_OWORD *)v32 = v39;
            do
              v31 += 56;
            while ((maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v31, (uint64_t)&v167) & 1) != 0);
            do
              v32 -= 56;
            while (!maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v32, (uint64_t)&v167));
          }
          while (v31 < v32);
          v42 = v31 - 56;
        }
        if (v42 != a1)
        {
          v43 = *(_OWORD *)v42;
          v44 = *(_OWORD *)(v42 + 16);
          v45 = *(_OWORD *)(v42 + 32);
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(v42 + 48);
          *(_OWORD *)(a1 + 16) = v44;
          *(_OWORD *)(a1 + 32) = v45;
          *(_OWORD *)a1 = v43;
        }
        v46 = v167;
        v47 = v168;
        v48 = v169;
        *(_DWORD *)(v42 + 48) = v170;
        *(_OWORD *)(v42 + 16) = v47;
        *(_OWORD *)(v42 + 32) = v48;
        *(_OWORD *)v42 = v46;
        if (v29 < v30)
        {
LABEL_31:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *,false>(a1, v42, a3, a4 & 1);
          a4 = 0;
          v10 = v42 + 56;
          continue;
        }
        v49 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, v42);
        v10 = v42 + 56;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(v42 + 56, v166))
        {
          if (v49)
            continue;
          goto LABEL_31;
        }
        a2 = v42;
        if (!v49)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a2 - 2;
  v10 = a2 - 4;
  v11 = a2 - 6;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (uint64_t)a2 - v12;
    v14 = (uint64_t)((uint64_t)a2 - v12) >> 5;
    switch(v14)
    {
      case 0:
      case 1:
        return;
      case 2:
        v174 = *((_DWORD *)a2 - 6);
        v175 = *(_DWORD *)(v12 + 8);
        v216 = v174 == v175;
        v176 = v174 < v175;
        if (v216)
          v176 = *((float *)a2 - 3) < *(float *)(v12 + 20);
        if (v176)
        {
          v324 = *(_OWORD *)v12;
          v352 = *(_OWORD *)(v12 + 16);
          v177 = *(a2 - 1);
          *(_OWORD *)v12 = *(a2 - 2);
          *(_OWORD *)(v12 + 16) = v177;
          *(a2 - 2) = v324;
          *(a2 - 1) = v352;
        }
        return;
      case 3:
        v178 = (__int128 *)(v12 + 32);
        v179 = *(_DWORD *)(v12 + 40);
        v180 = *(float *)(v12 + 52);
        v181 = *(_DWORD *)(v12 + 8);
        v216 = v179 == v181;
        v182 = v179 < v181;
        if (v216)
          v182 = v180 < *(float *)(v12 + 20);
        v183 = *((_DWORD *)a2 - 6);
        v216 = v183 == v179;
        v184 = v183 < v179;
        if (v216)
          v184 = *((float *)a2 - 3) < v180;
        if (v182)
        {
          if (v184)
            goto LABEL_190;
          v325 = *(_OWORD *)v12;
          v353 = *(_OWORD *)(v12 + 16);
          v185 = *(_OWORD *)(v12 + 48);
          *(_OWORD *)v12 = *v178;
          *(_OWORD *)(v12 + 16) = v185;
          *v178 = v325;
          *(_OWORD *)(v12 + 48) = v353;
          v186 = *((_DWORD *)a2 - 6);
          v187 = *(_DWORD *)(v12 + 40);
          v216 = v186 == v187;
          v188 = v186 < v187;
          if (v216)
            v188 = *((float *)a2 - 3) < *(float *)(v12 + 52);
          if (v188)
          {
            v189 = *v178;
            v190 = *(_OWORD *)(v12 + 48);
            v191 = *(a2 - 1);
            *v178 = *v9;
            *(_OWORD *)(v12 + 48) = v191;
            goto LABEL_191;
          }
        }
        else if (v184)
        {
          v287 = *v178;
          v357 = *(_OWORD *)(v12 + 48);
          v288 = *(a2 - 1);
          *v178 = *v9;
          *(_OWORD *)(v12 + 48) = v288;
          *v9 = v287;
          *(a2 - 1) = v357;
          v289 = *(_DWORD *)(v12 + 40);
          v290 = *(_DWORD *)(v12 + 8);
          v216 = v289 == v290;
          v291 = v289 < v290;
          if (v216)
            v291 = *(float *)(v12 + 52) < *(float *)(v12 + 20);
          if (v291)
          {
            v328 = *(_OWORD *)v12;
            v358 = *(_OWORD *)(v12 + 16);
            v292 = *(_OWORD *)(v12 + 48);
            *(_OWORD *)v12 = *v178;
            *(_OWORD *)(v12 + 16) = v292;
            *v178 = v328;
            *(_OWORD *)(v12 + 48) = v358;
          }
        }
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_6 &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentCrossing *>((__int128 *)v12, (__int128 *)(v12 + 32), (__int128 *)(v12 + 64), a2 - 2, a5);
        return;
      case 5:
        v9 = (__int128 *)(v12 + 32);
        v192 = (__int128 *)(v12 + 64);
        v193 = (__int128 *)(v12 + 96);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_6 &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentCrossing *>((__int128 *)v12, (__int128 *)(v12 + 32), (__int128 *)(v12 + 64), (__int128 *)(v12 + 96), a5);
        v194 = *((_DWORD *)a2 - 6);
        v195 = *(_DWORD *)(v12 + 104);
        v216 = v194 == v195;
        v196 = v194 < v195;
        if (v216)
          v196 = *((float *)a2 - 3) < *(float *)(v12 + 116);
        if (v196)
        {
          v197 = *v193;
          v354 = *(_OWORD *)(v12 + 112);
          v198 = *(a2 - 1);
          *v193 = *(a2 - 2);
          *(_OWORD *)(v12 + 112) = v198;
          *(a2 - 2) = v197;
          *(a2 - 1) = v354;
          v199 = *(_DWORD *)(v12 + 104);
          v200 = *(_DWORD *)(v12 + 72);
          v216 = v199 == v200;
          v201 = v199 < v200;
          if (v216)
            v201 = *(float *)(v12 + 116) < *(float *)(v12 + 84);
          if (v201)
          {
            v203 = *v192;
            v202 = *(_OWORD *)(v12 + 80);
            v204 = *(_OWORD *)(v12 + 112);
            *v192 = *v193;
            *(_OWORD *)(v12 + 80) = v204;
            *v193 = v203;
            *(_OWORD *)(v12 + 112) = v202;
            v205 = *(_DWORD *)(v12 + 72);
            v206 = *(_DWORD *)(v12 + 40);
            v216 = v205 == v206;
            v207 = v205 < v206;
            if (v216)
              v207 = *(float *)(v12 + 84) < *(float *)(v12 + 52);
            if (v207)
            {
              v209 = *v9;
              v208 = *(_OWORD *)(v12 + 48);
              v210 = *(_OWORD *)(v12 + 80);
              *v9 = *v192;
              *(_OWORD *)(v12 + 48) = v210;
              *v192 = v209;
              *(_OWORD *)(v12 + 80) = v208;
              v211 = *(_DWORD *)(v12 + 40);
              v212 = *(_DWORD *)(v12 + 8);
              v216 = v211 == v212;
              v213 = v211 < v212;
              if (v216)
                v213 = *(float *)(v12 + 52) < *(float *)(v12 + 20);
              if (v213)
              {
LABEL_190:
                v326 = *(_OWORD *)v12;
                v355 = *(_OWORD *)(v12 + 16);
                v214 = v9[1];
                *(_OWORD *)v12 = *v9;
                *(_OWORD *)(v12 + 16) = v214;
                v189 = v326;
                v190 = v355;
LABEL_191:
                *v9 = v189;
                v9[1] = v190;
              }
            }
          }
        }
        return;
      default:
        if (v13 > 767)
        {
          if (!a3)
          {
            if ((__int128 *)v12 != a2)
            {
              v235 = (unint64_t)(v14 - 2) >> 1;
              v236 = v235;
              do
              {
                v237 = v236;
                if (v235 >= v236)
                {
                  v238 = (2 * v236) | 1;
                  v239 = v12 + 32 * v238;
                  if (2 * v237 + 2 < v14)
                  {
                    v240 = *(_DWORD *)(v239 + 8);
                    v241 = *(_DWORD *)(v239 + 40);
                    v216 = v240 == v241;
                    LODWORD(v242) = v240 < v241;
                    v242 = v216 ? *(float *)(v239 + 20) < *(float *)(v239 + 52) : v242;
                    v239 += 32 * v242;
                    if ((_DWORD)v242)
                      v238 = 2 * v237 + 2;
                  }
                  v243 = v12 + 32 * v237;
                  v244 = *(_DWORD *)(v239 + 8);
                  v245 = *(_DWORD *)(v243 + 8);
                  v246 = *(float *)(v243 + 20);
                  v216 = v244 == v245;
                  v247 = v244 < v245;
                  if (v216)
                    v247 = *(float *)(v239 + 20) < v246;
                  if (!v247)
                  {
                    v248 = *(_QWORD *)v243;
                    v249 = *(_QWORD *)(v243 + 12);
                    v250 = *(_QWORD *)(v243 + 24);
                    do
                    {
                      v254 = (_OWORD *)v243;
                      v243 = v239;
                      v255 = *(_OWORD *)(v239 + 16);
                      *v254 = *(_OWORD *)v239;
                      v254[1] = v255;
                      if (v235 < v238)
                        break;
                      v256 = (2 * v238) | 1;
                      v239 = v12 + 32 * v256;
                      v257 = 2 * v238 + 2;
                      if (v257 < v14)
                      {
                        v258 = *(_DWORD *)(v239 + 8);
                        v259 = *(_DWORD *)(v239 + 40);
                        v216 = v258 == v259;
                        LODWORD(v260) = v258 < v259;
                        v260 = v216 ? *(float *)(v239 + 20) < *(float *)(v239 + 52) : v260;
                        v239 += 32 * v260;
                        if ((_DWORD)v260)
                          v256 = v257;
                      }
                      v251 = *(_DWORD *)(v239 + 8);
                      v252 = *(float *)(v239 + 20) < v246;
                      v216 = v251 == v245;
                      v253 = v251 < v245;
                      if (!v216)
                        v252 = v253;
                      v238 = v256;
                    }
                    while (!v252);
                    *(_QWORD *)v243 = v248;
                    *(_DWORD *)(v243 + 8) = v245;
                    *(_QWORD *)(v243 + 12) = v249;
                    *(float *)(v243 + 20) = v246;
                    *(_QWORD *)(v243 + 24) = v250;
                  }
                }
                v236 = v237 - 1;
              }
              while (v237);
              v261 = (unint64_t)v13 >> 5;
              do
              {
                v263 = 0;
                v327 = *(_OWORD *)v12;
                v356 = *(_OWORD *)(v12 + 16);
                v264 = (_OWORD *)v12;
                do
                {
                  v266 = (uint64_t)&v264[2 * v263 + 2];
                  v267 = (2 * v263) | 1;
                  v268 = 2 * v263 + 2;
                  if (v268 < v261)
                  {
                    v269 = *(_DWORD *)(v266 + 8);
                    v270 = *(_DWORD *)(v266 + 40);
                    v216 = v269 == v270;
                    LODWORD(v271) = v269 < v270;
                    v271 = v216 ? *(float *)(v266 + 20) < *(float *)(v266 + 52) : v271;
                    v266 += 32 * v271;
                    if ((_DWORD)v271)
                      v267 = v268;
                  }
                  v265 = *(_OWORD *)(v266 + 16);
                  *v264 = *(_OWORD *)v266;
                  v264[1] = v265;
                  v264 = (_OWORD *)v266;
                  v263 = v267;
                }
                while (v267 <= (uint64_t)((unint64_t)(v261 - 2) >> 1));
                a2 -= 2;
                if ((__int128 *)v266 == a2)
                {
                  *(_OWORD *)v266 = v327;
                  *(_OWORD *)(v266 + 16) = v356;
                }
                else
                {
                  v272 = a2[1];
                  *(_OWORD *)v266 = *a2;
                  *(_OWORD *)(v266 + 16) = v272;
                  *a2 = v327;
                  a2[1] = v356;
                  v273 = v266 - v12 + 32;
                  if (v273 >= 33)
                  {
                    v274 = (((unint64_t)v273 >> 5) - 2) >> 1;
                    v275 = v12 + 32 * v274;
                    v276 = *(_DWORD *)(v275 + 8);
                    v277 = *(_DWORD *)(v266 + 8);
                    v278 = *(float *)(v266 + 20);
                    v216 = v276 == v277;
                    v279 = v276 < v277;
                    if (v216)
                      v279 = *(float *)(v275 + 20) < v278;
                    if (v279)
                    {
                      v280 = *(_QWORD *)v266;
                      v281 = *(_QWORD *)(v266 + 12);
                      v282 = *(_QWORD *)(v266 + 24);
                      do
                      {
                        v283 = (_OWORD *)v266;
                        v266 = v275;
                        v284 = *(_OWORD *)(v275 + 16);
                        *v283 = *(_OWORD *)v275;
                        v283[1] = v284;
                        if (!v274)
                          break;
                        v274 = (v274 - 1) >> 1;
                        v275 = v12 + 32 * v274;
                        v285 = *(_DWORD *)(v275 + 8);
                        v216 = v285 == v277;
                        v286 = v285 < v277;
                        if (v216)
                          v286 = *(float *)(v275 + 20) < v278;
                      }
                      while (v286);
                      *(_QWORD *)v266 = v280;
                      *(_DWORD *)(v266 + 8) = v277;
                      *(_QWORD *)(v266 + 12) = v281;
                      *(float *)(v266 + 20) = v278;
                      *(_QWORD *)(v266 + 24) = v282;
                    }
                  }
                }
              }
              while (v261-- > 2);
            }
            return;
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = v12 + 32 * ((unint64_t)v14 >> 1);
          v17 = *((_DWORD *)a2 - 6);
          v18 = *((float *)a2 - 3);
          if ((unint64_t)v13 <= 0x1000)
          {
            v25 = *(_DWORD *)(v12 + 8);
            v26 = *(float *)(v12 + 20);
            v27 = *(_DWORD *)(v16 + 8);
            v216 = v25 == v27;
            v28 = v25 < v27;
            if (v216)
              v28 = v26 < *(float *)(v16 + 20);
            v216 = v17 == v25;
            v29 = v17 < v25;
            if (v216)
              v29 = v18 < v26;
            if (v28)
            {
              if (v29)
              {
                v306 = *(__n128 *)v16;
                v330 = *(_OWORD *)(v16 + 16);
                v30 = *(a2 - 1);
                *(_OWORD *)v16 = *v9;
                *(_OWORD *)(v16 + 16) = v30;
LABEL_52:
                a5 = v306;
                *v9 = (__int128)v306;
                *(a2 - 1) = v330;
                goto LABEL_53;
              }
              v313 = *(__n128 *)v16;
              v338 = *(_OWORD *)(v16 + 16);
              v64 = *(_OWORD *)(v12 + 16);
              *(_OWORD *)v16 = *(_OWORD *)v12;
              *(_OWORD *)(v16 + 16) = v64;
              a5 = v313;
              *(__n128 *)v12 = v313;
              *(_OWORD *)(v12 + 16) = v338;
              v65 = *((_DWORD *)a2 - 6);
              v66 = *(_DWORD *)(v12 + 8);
              v216 = v65 == v66;
              v67 = v65 < v66;
              if (v216)
                v67 = *((float *)a2 - 3) < *(float *)(v12 + 20);
              if (v67)
              {
                v306 = *(__n128 *)v12;
                v330 = *(_OWORD *)(v12 + 16);
                v68 = *(a2 - 1);
                *(_OWORD *)v12 = *v9;
                *(_OWORD *)(v12 + 16) = v68;
                goto LABEL_52;
              }
            }
            else if (v29)
            {
              v309 = *(__n128 *)v12;
              v333 = *(_OWORD *)(v12 + 16);
              v36 = *(a2 - 1);
              *(_OWORD *)v12 = *v9;
              *(_OWORD *)(v12 + 16) = v36;
              a5 = v309;
              *v9 = (__int128)v309;
              *(a2 - 1) = v333;
              v37 = *(_DWORD *)(v12 + 8);
              v38 = *(_DWORD *)(v16 + 8);
              v216 = v37 == v38;
              v39 = v37 < v38;
              if (v216)
                v39 = *(float *)(v12 + 20) < *(float *)(v16 + 20);
              if (v39)
              {
                v310 = *(__n128 *)v16;
                v334 = *(_OWORD *)(v16 + 16);
                v40 = *(_OWORD *)(v12 + 16);
                *(_OWORD *)v16 = *(_OWORD *)v12;
                *(_OWORD *)(v16 + 16) = v40;
                a5 = v310;
                *(__n128 *)v12 = v310;
                *(_OWORD *)(v12 + 16) = v334;
                --a3;
                if ((a4 & 1) != 0)
                  goto LABEL_54;
                goto LABEL_95;
              }
            }
LABEL_53:
            --a3;
            if ((a4 & 1) != 0)
              goto LABEL_54;
LABEL_95:
            v118 = *(_DWORD *)(v12 - 24);
            v69 = *(_DWORD *)(v12 + 8);
            a5.n128_u32[0] = *(_DWORD *)(v12 + 20);
            v216 = v118 == v69;
            v119 = v118 < v69;
            if (v216)
              v119 = *(float *)(v12 - 12) < a5.n128_f32[0];
            if (v119)
              goto LABEL_98;
            v148 = *((_DWORD *)a2 - 6);
            v216 = v69 == v148;
            v149 = v69 < v148;
            if (v216)
              v149 = a5.n128_f32[0] < *((float *)a2 - 3);
            if (v149)
            {
              v150 = v12;
              do
              {
                v12 = v150 + 32;
                v151 = *(_DWORD *)(v150 + 40);
                v152 = a5.n128_f32[0] < *(float *)(v150 + 52);
                v216 = v69 == v151;
                v153 = v69 < v151;
                if (v216)
                  v153 = v152;
                v150 = v12;
              }
              while (!v153);
            }
            else
            {
              v154 = v12 + 32;
              do
              {
                v12 = v154;
                if (v154 >= (unint64_t)a2)
                  break;
                v155 = *(_DWORD *)(v154 + 8);
                v156 = a5.n128_f32[0] < *(float *)(v12 + 20);
                v216 = v69 == v155;
                v157 = v69 < v155;
                if (!v216)
                  v156 = v157;
                v154 = v12 + 32;
              }
              while (!v156);
            }
            v158 = a2;
            if (v12 < (unint64_t)a2)
            {
              v159 = a2;
              do
              {
                v158 = v159 - 2;
                v160 = *((_DWORD *)v159 - 6);
                v161 = a5.n128_f32[0] < *((float *)v159 - 3);
                v216 = v69 == v160;
                v162 = v69 < v160;
                if (v216)
                  v162 = v161;
                v159 = v158;
              }
              while (v162);
            }
            v163 = *(_QWORD *)a1;
            v164 = *(_QWORD *)(a1 + 12);
            v165 = *(_QWORD *)(a1 + 24);
            while (v12 < (unint64_t)v158)
            {
              v323 = *(_OWORD *)v12;
              v351 = *(_OWORD *)(v12 + 16);
              v166 = v158[1];
              *(_OWORD *)v12 = *v158;
              *(_OWORD *)(v12 + 16) = v166;
              *v158 = v323;
              v158[1] = v351;
              do
              {
                v167 = *(_DWORD *)(v12 + 40);
                v168 = *(float *)(v12 + 52);
                v12 += 32;
                v216 = v69 == v167;
                v169 = v69 < v167;
                if (v216)
                  v169 = a5.n128_f32[0] < v168;
              }
              while (!v169);
              do
              {
                v170 = *((_DWORD *)v158 - 6);
                v171 = *((float *)v158 - 3);
                v158 -= 2;
                v216 = v69 == v170;
                v172 = v69 < v170;
                if (v216)
                  v172 = a5.n128_f32[0] < v171;
              }
              while (v172);
            }
            if (v12 - 32 != a1)
            {
              v173 = *(_OWORD *)(v12 - 16);
              *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
              *(_OWORD *)(a1 + 16) = v173;
            }
            a4 = 0;
            *(_QWORD *)(v12 - 32) = v163;
            *(_DWORD *)(v12 - 24) = v69;
            *(_QWORD *)(v12 - 20) = v164;
            *(_DWORD *)(v12 - 12) = a5.n128_u32[0];
            *(_QWORD *)(v12 - 8) = v165;
            continue;
          }
          v19 = *(_DWORD *)(v16 + 8);
          v20 = *(float *)(v16 + 20);
          v21 = *(_DWORD *)(v12 + 8);
          v216 = v19 == v21;
          v22 = v19 < v21;
          if (v216)
            v22 = v20 < *(float *)(v12 + 20);
          v216 = v17 == v19;
          v23 = v17 < v19;
          if (v216)
            v23 = v18 < v20;
          if (v22)
          {
            if (v23)
            {
              v305 = *(_OWORD *)v12;
              v329 = *(_OWORD *)(v12 + 16);
              v24 = *(a2 - 1);
              *(_OWORD *)v12 = *v9;
              *(_OWORD *)(v12 + 16) = v24;
LABEL_35:
              *v9 = v305;
              *(a2 - 1) = v329;
              goto LABEL_36;
            }
            v311 = *(_OWORD *)v12;
            v335 = *(_OWORD *)(v12 + 16);
            v41 = *(_OWORD *)(v16 + 16);
            *(_OWORD *)v12 = *(_OWORD *)v16;
            *(_OWORD *)(v12 + 16) = v41;
            *(_OWORD *)v16 = v311;
            *(_OWORD *)(v16 + 16) = v335;
            v42 = *((_DWORD *)a2 - 6);
            v43 = *(_DWORD *)(v16 + 8);
            v216 = v42 == v43;
            v44 = v42 < v43;
            if (v216)
              v44 = *((float *)a2 - 3) < *(float *)(v16 + 20);
            if (v44)
            {
              v305 = *(_OWORD *)v16;
              v329 = *(_OWORD *)(v16 + 16);
              v45 = *(a2 - 1);
              *(_OWORD *)v16 = *v9;
              *(_OWORD *)(v16 + 16) = v45;
              goto LABEL_35;
            }
          }
          else if (v23)
          {
            v307 = *(__n128 *)v16;
            v331 = *(_OWORD *)(v16 + 16);
            v31 = *(a2 - 1);
            *(_OWORD *)v16 = *v9;
            *(_OWORD *)(v16 + 16) = v31;
            *v9 = (__int128)v307;
            *(a2 - 1) = v331;
            v32 = *(_DWORD *)(v16 + 8);
            v33 = *(_DWORD *)(v12 + 8);
            v216 = v32 == v33;
            v34 = v32 < v33;
            if (v216)
              v34 = *(float *)(v16 + 20) < *(float *)(v12 + 20);
            if (v34)
            {
              v308 = *(_OWORD *)v12;
              v332 = *(_OWORD *)(v12 + 16);
              v35 = *(_OWORD *)(v16 + 16);
              *(_OWORD *)v12 = *(_OWORD *)v16;
              *(_OWORD *)(v12 + 16) = v35;
              *(_OWORD *)v16 = v308;
              *(_OWORD *)(v16 + 16) = v332;
            }
          }
LABEL_36:
          v46 = (__int128 *)(v12 + 32);
          v47 = v12 + 32 * v15;
          v48 = v47 - 32;
          v49 = *(_DWORD *)(v47 - 24);
          v50 = *(float *)(v47 - 12);
          LODWORD(v47) = *(_DWORD *)(v12 + 40);
          v51 = v50 < *(float *)(v12 + 52);
          v216 = v49 == (_DWORD)v47;
          v52 = v49 < v47;
          if (!v216)
            v51 = v52;
          v53 = *((_DWORD *)a2 - 14);
          v216 = v53 == v49;
          v54 = v53 < v49;
          if (v216)
            v54 = *((float *)a2 - 11) < v50;
          if (v51)
          {
            if (v54)
            {
              v55 = *v46;
              v56 = *(_OWORD *)(v12 + 48);
              v57 = *(a2 - 3);
              *v46 = *v10;
              *(_OWORD *)(v12 + 48) = v57;
LABEL_59:
              *v10 = v55;
              *(a2 - 3) = v56;
              goto LABEL_60;
            }
            v70 = *v46;
            v339 = *(_OWORD *)(v12 + 48);
            v71 = *(_OWORD *)(v48 + 16);
            *v46 = *(_OWORD *)v48;
            *(_OWORD *)(v12 + 48) = v71;
            *(_OWORD *)v48 = v70;
            *(_OWORD *)(v48 + 16) = v339;
            v72 = *((_DWORD *)a2 - 14);
            v73 = *(_DWORD *)(v48 + 8);
            v216 = v72 == v73;
            v74 = v72 < v73;
            if (v216)
              v74 = *((float *)a2 - 11) < *(float *)(v48 + 20);
            if (v74)
            {
              v314 = *(_OWORD *)v48;
              v340 = *(_OWORD *)(v48 + 16);
              v75 = *(a2 - 3);
              *(_OWORD *)v48 = *v10;
              *(_OWORD *)(v48 + 16) = v75;
              v55 = v314;
              v56 = v340;
              goto LABEL_59;
            }
          }
          else if (v54)
          {
            v312 = *(_OWORD *)v48;
            v336 = *(_OWORD *)(v48 + 16);
            v58 = *(a2 - 3);
            *(_OWORD *)v48 = *v10;
            *(_OWORD *)(v48 + 16) = v58;
            *v10 = v312;
            *(a2 - 3) = v336;
            v59 = *(_DWORD *)(v48 + 8);
            v60 = *(_DWORD *)(v12 + 40);
            v216 = v59 == v60;
            v61 = v59 < v60;
            if (v216)
              v61 = *(float *)(v48 + 20) < *(float *)(v12 + 52);
            if (v61)
            {
              v62 = *v46;
              v337 = *(_OWORD *)(v12 + 48);
              v63 = *(_OWORD *)(v48 + 16);
              *v46 = *(_OWORD *)v48;
              *(_OWORD *)(v12 + 48) = v63;
              *(_OWORD *)v48 = v62;
              *(_OWORD *)(v48 + 16) = v337;
            }
          }
LABEL_60:
          v76 = (__int128 *)(v12 + 64);
          v77 = v12 + 32 * v15;
          v78 = v77 + 32;
          v79 = *(_DWORD *)(v77 + 40);
          v80 = *(float *)(v77 + 52);
          LODWORD(v77) = *(_DWORD *)(v12 + 72);
          v81 = v80 < *(float *)(v12 + 84);
          v216 = v79 == (_DWORD)v77;
          v82 = v79 < v77;
          if (!v216)
            v81 = v82;
          v83 = *((_DWORD *)a2 - 22);
          v216 = v83 == v79;
          v84 = v83 < v79;
          if (v216)
            v84 = *((float *)a2 - 19) < v80;
          if (v81)
          {
            if (v84)
            {
              v85 = *v76;
              v86 = *(_OWORD *)(v12 + 80);
              v87 = *(a2 - 5);
              *v76 = *v11;
              *(_OWORD *)(v12 + 80) = v87;
LABEL_76:
              *v11 = v85;
              *(a2 - 5) = v86;
              goto LABEL_77;
            }
            v94 = *v76;
            v343 = *(_OWORD *)(v12 + 80);
            v95 = *(_OWORD *)(v78 + 16);
            *v76 = *(_OWORD *)v78;
            *(_OWORD *)(v12 + 80) = v95;
            *(_OWORD *)v78 = v94;
            *(_OWORD *)(v78 + 16) = v343;
            v96 = *((_DWORD *)a2 - 22);
            v97 = *(_DWORD *)(v78 + 8);
            v216 = v96 == v97;
            v98 = v96 < v97;
            if (v216)
              v98 = *((float *)a2 - 19) < *(float *)(v78 + 20);
            if (v98)
            {
              v316 = *(_OWORD *)v78;
              v344 = *(_OWORD *)(v78 + 16);
              v99 = *(a2 - 5);
              *(_OWORD *)v78 = *v11;
              *(_OWORD *)(v78 + 16) = v99;
              v85 = v316;
              v86 = v344;
              goto LABEL_76;
            }
          }
          else if (v84)
          {
            v315 = *(_OWORD *)v78;
            v341 = *(_OWORD *)(v78 + 16);
            v88 = *(a2 - 5);
            *(_OWORD *)v78 = *v11;
            *(_OWORD *)(v78 + 16) = v88;
            *v11 = v315;
            *(a2 - 5) = v341;
            v89 = *(_DWORD *)(v78 + 8);
            v90 = *(_DWORD *)(v12 + 72);
            v216 = v89 == v90;
            v91 = v89 < v90;
            if (v216)
              v91 = *(float *)(v78 + 20) < *(float *)(v12 + 84);
            if (v91)
            {
              v92 = *v76;
              v342 = *(_OWORD *)(v12 + 80);
              v93 = *(_OWORD *)(v78 + 16);
              *v76 = *(_OWORD *)v78;
              *(_OWORD *)(v12 + 80) = v93;
              *(_OWORD *)v78 = v92;
              *(_OWORD *)(v78 + 16) = v342;
            }
          }
LABEL_77:
          v100 = *(_DWORD *)(v16 + 8);
          v101 = *(float *)(v16 + 20);
          v102 = *(_DWORD *)(v48 + 8);
          v216 = v100 == v102;
          v103 = v100 < v102;
          if (v216)
            v103 = v101 < *(float *)(v48 + 20);
          v104 = *(_DWORD *)(v78 + 8);
          v216 = v104 == v100;
          v105 = v104 < v100;
          if (v216)
            v105 = *(float *)(v78 + 20) < v101;
          if (v103)
          {
            if (v105)
            {
              v317 = *(__n128 *)v48;
              v345 = *(_OWORD *)(v48 + 16);
              v106 = *(_OWORD *)(v78 + 16);
              *(_OWORD *)v48 = *(_OWORD *)v78;
              *(_OWORD *)(v48 + 16) = v106;
LABEL_93:
              *(__n128 *)v78 = v317;
              *(_OWORD *)(v78 + 16) = v345;
              goto LABEL_94;
            }
            v320 = *(__n128 *)v48;
            v348 = *(_OWORD *)(v48 + 16);
            v112 = *(_OWORD *)(v16 + 16);
            *(_OWORD *)v48 = *(_OWORD *)v16;
            *(_OWORD *)(v48 + 16) = v112;
            *(__n128 *)v16 = v320;
            *(_OWORD *)(v16 + 16) = v348;
            v113 = *(_DWORD *)(v78 + 8);
            v114 = *(_DWORD *)(v16 + 8);
            v216 = v113 == v114;
            v115 = v113 < v114;
            if (v216)
              v115 = *(float *)(v78 + 20) < *(float *)(v16 + 20);
            if (v115)
            {
              v317 = *(__n128 *)v16;
              v345 = *(_OWORD *)(v16 + 16);
              v116 = *(_OWORD *)(v78 + 16);
              *(_OWORD *)v16 = *(_OWORD *)v78;
              *(_OWORD *)(v16 + 16) = v116;
              goto LABEL_93;
            }
          }
          else if (v105)
          {
            v318 = *(__n128 *)v16;
            v346 = *(_OWORD *)(v16 + 16);
            v107 = *(_OWORD *)(v78 + 16);
            *(_OWORD *)v16 = *(_OWORD *)v78;
            *(_OWORD *)(v16 + 16) = v107;
            *(__n128 *)v78 = v318;
            *(_OWORD *)(v78 + 16) = v346;
            v108 = *(_DWORD *)(v16 + 8);
            v109 = *(_DWORD *)(v48 + 8);
            v216 = v108 == v109;
            v110 = v108 < v109;
            if (v216)
              v110 = *(float *)(v16 + 20) < *(float *)(v48 + 20);
            if (v110)
            {
              v319 = *(__n128 *)v48;
              v347 = *(_OWORD *)(v48 + 16);
              v111 = *(_OWORD *)(v16 + 16);
              *(_OWORD *)v48 = *(_OWORD *)v16;
              *(_OWORD *)(v48 + 16) = v111;
              *(__n128 *)v16 = v319;
              *(_OWORD *)(v16 + 16) = v347;
            }
          }
LABEL_94:
          v321 = *(__n128 *)v12;
          v349 = *(_OWORD *)(v12 + 16);
          v117 = *(_OWORD *)(v16 + 16);
          *(_OWORD *)v12 = *(_OWORD *)v16;
          *(_OWORD *)(v12 + 16) = v117;
          a5 = v321;
          *(__n128 *)v16 = v321;
          *(_OWORD *)(v16 + 16) = v349;
          --a3;
          if ((a4 & 1) == 0)
            goto LABEL_95;
LABEL_54:
          v69 = *(_DWORD *)(v12 + 8);
          a5.n128_u32[0] = *(_DWORD *)(v12 + 20);
LABEL_98:
          v120 = 0;
          v121 = *(_QWORD *)v12;
          v122 = *(_QWORD *)(v12 + 12);
          v123 = *(_QWORD *)(v12 + 24);
          do
          {
            v124 = *(_DWORD *)(v12 + v120 + 40);
            v125 = *(float *)(v12 + v120 + 52) < a5.n128_f32[0];
            v216 = v124 == v69;
            v126 = v124 < v69;
            if (!v216)
              v125 = v126;
            v120 += 32;
          }
          while (v125);
          v127 = v12 + v120;
          v128 = a2;
          if (v120 == 32)
          {
            v133 = a2;
            while (v127 < (unint64_t)v133)
            {
              v129 = v133 - 2;
              v134 = *((_DWORD *)v133 - 6);
              v135 = *((float *)v133 - 3) < a5.n128_f32[0];
              v216 = v134 == v69;
              v136 = v134 < v69;
              if (v216)
                v136 = v135;
              v133 = v129;
              if (v136)
                goto LABEL_112;
            }
            v129 = v133;
            v12 = v127;
          }
          else
          {
            do
            {
              v129 = v128 - 2;
              v130 = *((_DWORD *)v128 - 6);
              v131 = *((float *)v128 - 3) < a5.n128_f32[0];
              v216 = v130 == v69;
              v132 = v130 < v69;
              if (v216)
                v132 = v131;
              v128 = v129;
            }
            while (!v132);
LABEL_112:
            v12 = v127;
            if (v127 < (unint64_t)v129)
            {
              v137 = v129;
              do
              {
                v322 = *(_OWORD *)v12;
                v350 = *(_OWORD *)(v12 + 16);
                v138 = v137[1];
                *(_OWORD *)v12 = *v137;
                *(_OWORD *)(v12 + 16) = v138;
                *v137 = v322;
                v137[1] = v350;
                do
                {
                  v139 = *(_DWORD *)(v12 + 40);
                  v140 = *(float *)(v12 + 52);
                  v12 += 32;
                  v216 = v139 == v69;
                  v141 = v139 < v69;
                  if (v216)
                    v141 = v140 < a5.n128_f32[0];
                }
                while (v141);
                do
                {
                  v142 = *((_DWORD *)v137 - 6);
                  v143 = *((float *)v137 - 3);
                  v137 -= 2;
                  v216 = v142 == v69;
                  v144 = v142 < v69;
                  if (v216)
                    v144 = v143 < a5.n128_f32[0];
                }
                while (!v144);
              }
              while (v12 < (unint64_t)v137);
            }
          }
          if (v12 - 32 != a1)
          {
            v145 = *(_OWORD *)(v12 - 16);
            *(_OWORD *)a1 = *(_OWORD *)(v12 - 32);
            *(_OWORD *)(a1 + 16) = v145;
          }
          *(_QWORD *)(v12 - 32) = v121;
          *(_DWORD *)(v12 - 24) = v69;
          *(_QWORD *)(v12 - 20) = v122;
          *(_DWORD *)(v12 - 12) = a5.n128_u32[0];
          *(_QWORD *)(v12 - 8) = v123;
          if (v127 < (unint64_t)v129)
            goto LABEL_127;
          v146 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_6 &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentCrossing *>(a1, v12 - 32, a5);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_6 &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentCrossing *>(v12, (uint64_t)a2, v147))
          {
            if (v146)
              continue;
LABEL_127:
            std::__introsort<std::_ClassicAlgPolicy,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::$_6 &,geo::codec::_findCrossings(std::shared_ptr<geo::codec::VectorTile> const&)::SegmentCrossing *,false>(a1, v12 - 32, a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = (__int128 *)(v12 - 32);
          if (v146)
            return;
          goto LABEL_1;
        }
        v215 = (__int128 *)(v12 + 32);
        v216 = (__int128 *)v12 == a2 || v215 == a2;
        v217 = v216;
        if ((a4 & 1) != 0)
        {
          if ((v217 & 1) == 0)
          {
            v218 = 0;
            v219 = (_QWORD *)v12;
            do
            {
              v221 = v215;
              v222 = *((_DWORD *)v219 + 10);
              v223 = *((float *)v219 + 13);
              v224 = *((_DWORD *)v219 + 2);
              v216 = v222 == v224;
              v225 = v222 < v224;
              if (v216)
                v225 = v223 < *((float *)v219 + 5);
              if (v225)
              {
                v226 = *(_QWORD *)v221;
                v227 = *(_QWORD *)((char *)v219 + 44);
                v228 = v218;
                v229 = v219[7];
                do
                {
                  v230 = v12 + v228;
                  v231 = *(_OWORD *)(v12 + v228 + 16);
                  *(_OWORD *)(v230 + 32) = *(_OWORD *)(v12 + v228);
                  *(_OWORD *)(v230 + 48) = v231;
                  if (!v228)
                  {
                    v220 = v12;
                    goto LABEL_202;
                  }
                  v232 = *(_DWORD *)(v230 - 24);
                  v233 = v223 < *(float *)(v230 - 12);
                  v216 = v222 == v232;
                  v234 = v222 < v232;
                  if (!v216)
                    v233 = v234;
                  v228 -= 32;
                }
                while (v233);
                v220 = v12 + v228 + 32;
LABEL_202:
                *(_QWORD *)v220 = v226;
                *(_DWORD *)(v220 + 8) = v222;
                *(_QWORD *)(v220 + 12) = v227;
                *(float *)(v220 + 20) = v223;
                *(_QWORD *)(v220 + 24) = v229;
              }
              v215 = v221 + 2;
              v218 += 32;
              v219 = v221;
            }
            while (v221 + 2 != a2);
          }
        }
        else if ((v217 & 1) == 0)
        {
          v293 = (_QWORD *)(v12 + 56);
          do
          {
            v294 = v215;
            v295 = *(_DWORD *)(a1 + 40);
            v296 = *(float *)(a1 + 52);
            v297 = *(_DWORD *)(a1 + 8);
            v216 = v295 == v297;
            v298 = v295 < v297;
            if (v216)
              v298 = v296 < *(float *)(a1 + 20);
            if (v298)
            {
              v299 = *(_QWORD *)v294;
              v300 = *(_QWORD *)(a1 + 44);
              v301 = v293;
              v302 = *(_QWORD *)(a1 + 56);
              do
              {
                *(_OWORD *)(v301 - 3) = *(_OWORD *)(v301 - 7);
                *(_OWORD *)(v301 - 1) = *(_OWORD *)(v301 - 5);
                v303 = *((_DWORD *)v301 - 20);
                v216 = v295 == v303;
                v304 = v295 < v303;
                if (v216)
                  v304 = v296 < *((float *)v301 - 17);
                v301 -= 4;
              }
              while (v304);
              *(v301 - 3) = v299;
              *((_DWORD *)v301 - 4) = v295;
              *(_QWORD *)((char *)v301 - 12) = v300;
              *((float *)v301 - 1) = v296;
              *v301 = v302;
            }
            v215 = v294 + 2;
            v293 += 4;
            a1 = (uint64_t)v294;
          }
          while (v294 + 2 != a2);
        }
        return;
    }
  }
}

uint64_t geo::Batch::Batch(uint64_t a1, uint64_t a2, char a3, int a4, int a5, void *a6)
{
  id v11;
  id v12;

  v11 = a6;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_BYTE *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  v12 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  *(_QWORD *)(a1 + 40) = &off_1E1BF6420;
  *(_QWORD *)(a1 + 48) = v12;
  *(_DWORD *)(a1 + 68) = a5;
  *(_QWORD *)(a1 + 72) = v11;
  return a1;
}

void sub_188607678(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

void std::__list_imp<geo::Batch>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  void *v6;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];

        v3[7] = (uint64_t)&off_1E1BF6420;
        v6 = (void *)v3[2];
        if (v6)
        {
          v3[3] = (uint64_t)v6;
          operator delete(v6);
        }
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__function::__func<void({block_pointer} {__strong})(LoadItem::Requester const&),std::allocator<void({block_pointer} {__strong})(LoadItem::Requester const&)>,void ()(LoadItem::Requester&)>::destroy(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

}

uint64_t std::list<CacheItem>::splice(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 != a4)
  {
    v4 = (uint64_t *)a4[1];
    if (v4 != a2)
    {
      v5 = *a4;
      *(_QWORD *)(v5 + 8) = v4;
      *(_QWORD *)a4[1] = v5;
      v6 = *a2;
      *(_QWORD *)(v6 + 8) = a4;
      *a4 = v6;
      *a2 = (uint64_t)a4;
      a4[1] = (uint64_t)a2;
      --*(_QWORD *)(a3 + 16);
      ++*(_QWORD *)(result + 16);
    }
  }
  return result;
}

void sub_188608004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18860823C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1886083F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  _Unwind_Resume(exception_object);
}

id GEOGetTileDBLog()
{
  if (qword_1ECDBB900 != -1)
    dispatch_once(&qword_1ECDBB900, &__block_literal_global_797);
  return (id)qword_1ECDBB8F8;
}

id GEOGetTileDBLog_0()
{
  if (qword_1ECDBC490 != -1)
    dispatch_once(&qword_1ECDBC490, &__block_literal_global_142);
  return (id)_MergedGlobals_280;
}

void LookupTileRowForKey(void *a1, int a2, int a3, int a4, int a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  _QWORD v15[4];
  id v16;
  id v17;
  _QWORD *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _QWORD v23[5];
  id v24;

  v11 = a1;
  v12 = a6;
  v23[0] = 0;
  v23[1] = v23;
  v23[2] = 0x3032000000;
  v23[3] = __Block_byref_object_copy__5;
  v23[4] = __Block_byref_object_dispose__5;
  v24 = 0;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 3221225472;
  v15[2] = __LookupTileRowForKey_block_invoke;
  v15[3] = &unk_1E1C01A60;
  v13 = v11;
  v16 = v13;
  v18 = v23;
  v19 = a2;
  v20 = a3;
  v21 = a4;
  v22 = a5;
  v14 = v12;
  v17 = v14;
  objc_msgSend(v13, "statementForKey:statementBlock:", CFSTR("LookupTileRowForKey"), v15);

  _Block_object_dispose(v23, 8);
}

void sub_1886085C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188608A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

void sub_188609B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18860A2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t SetXPCValue(void *a1, _QWORD *a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;

  v9 = a1;
  v10 = a4;
  v11 = a5;
  v24 = 0;
  v25 = &v24;
  v26 = 0x3032000000;
  v27 = __Block_byref_object_copy_;
  v28 = __Block_byref_object_dispose_;
  v29 = 0;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __SetXPCValue_block_invoke;
  v18[3] = &unk_1E1BFFB00;
  v12 = v9;
  v22 = &v24;
  v23 = a3;
  v19 = v12;
  v13 = v10;
  v20 = v13;
  v14 = v11;
  v21 = v14;
  v15 = objc_msgSend(v12, "executeStatement:statementBlock:", CFSTR("SetXPCValue"), v18);
  if (a2)
  {
    v16 = (void *)v25[5];
    if (v16)
      *a2 = objc_retainAutorelease(v16);
  }

  _Block_object_dispose(&v24, 8);
  return v15;
}

void sub_18860A5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t SetValue(void *a1, _QWORD *a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  _QWORD v18[4];
  id v19;
  id v20;
  id v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;

  v9 = a1;
  v10 = a4;
  v11 = a5;
  v24 = 0;
  v25 = &v24;
  v26 = 0x3032000000;
  v27 = __Block_byref_object_copy_;
  v28 = __Block_byref_object_dispose_;
  v29 = 0;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = __SetValue_block_invoke;
  v18[3] = &unk_1E1BFFB00;
  v12 = v9;
  v22 = &v24;
  v23 = a3;
  v19 = v12;
  v13 = v10;
  v20 = v13;
  v14 = v11;
  v21 = v14;
  v15 = objc_msgSend(v12, "executeStatement:statementBlock:", CFSTR("SetValue"), v18);
  if (a2)
  {
    v16 = (void *)v25[5];
    if (v16)
      *a2 = objc_retainAutorelease(v16);
  }

  _Block_object_dispose(&v24, 8);
  return v15;
}

void sub_18860AA74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18860AC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18860ADB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18860B284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  void *v10;
  std::mutex *v11;

  std::mutex::unlock(v11);
  objc_storeWeak((id *)&a9, 0);
  objc_destroyWeak((id *)&a9);
  objc_storeWeak(&location, 0);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::equal_to<_GEOTileKey>,std::hash<_GEOTileKey>,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>>>::__emplace_unique_key_args<_GEOTileKey,std::piecewise_construct_t const&,std::tuple<_GEOTileKey const&>,std::tuple<>>(float *a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v36;

  v7 = GEOTileKeyHash(a2);
  v8 = v7;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1])
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  i[4] = 0;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_34;
    if (*(_QWORD *)&prime < v9)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v24)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = a1 + 4;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
                    goto LABEL_59;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_59:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_63;
        }
        v36 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v36)
          operator delete(v36);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_63:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v32 = *(_QWORD **)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v33)
  {
    *i = *v33;
LABEL_76:
    *v33 = i;
    goto LABEL_77;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v32[v3] = a1 + 4;
  if (*i)
  {
    v34 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_76;
  }
LABEL_77:
  ++*((_QWORD *)a1 + 3);
  return i;
}

void sub_18860B704(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

id *geo::_geo_weak_ptr<GEOTileData * {__strong}>::operator=(id *a1, id *location)
{
  id WeakRetained;

  if (a1 != location)
  {
    WeakRetained = objc_loadWeakRetained(location);
    objc_storeWeak(a1, WeakRetained);

  }
  return a1;
}

void sub_18860B8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  std::mutex *v10;

  std::mutex::unlock(v10);

  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,hashkey,eqkey,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,eqkey,hashkey,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>>>::__emplace_unique_key_args<_GEOTileKey,std::piecewise_construct_t const&,std::tuple<_GEOTileKey const&>,std::tuple<>>(float *a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v36;

  v7 = GEOTileKeyHash(a2);
  v8 = v7;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1])
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  i[4] = 0;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_34;
    if (*(_QWORD *)&prime < v9)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v24)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = a1 + 4;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
                    goto LABEL_59;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_59:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_63;
        }
        v36 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v36)
          operator delete(v36);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_63:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v32 = *(_QWORD **)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v33)
  {
    *i = *v33;
LABEL_76:
    *v33 = i;
    goto LABEL_77;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v32[v3] = a1 + 4;
  if (*i)
  {
    v34 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_76;
  }
LABEL_77:
  ++*((_QWORD *)a1 + 3);
  return i;
}

void sub_18860BE70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,hashkey,eqkey,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,eqkey,hashkey,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>>>::erase(_QWORD *a1, uint64_t *__p)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  v3 = *__p;
  v4 = __p[1];
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v2)
      v4 %= *(_QWORD *)&v2;
  }
  else
  {
    v4 &= *(_QWORD *)&v2 - 1;
  }
  v6 = *(uint64_t **)(*a1 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (uint64_t *)*v6;
  }
  while (v6 != __p);
  if (v7 != a1 + 2)
  {
    v8 = v7[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v2)
        v8 %= *(_QWORD *)&v2;
    }
    else
    {
      v8 &= *(_QWORD *)&v2 - 1;
    }
    if (v8 == v4)
    {
LABEL_20:
      if (!v3)
        goto LABEL_27;
      goto LABEL_21;
    }
  }
  if (!v3)
    goto LABEL_19;
  v9 = *(_QWORD *)(v3 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v9 >= *(_QWORD *)&v2)
      v9 %= *(_QWORD *)&v2;
  }
  else
  {
    v9 &= *(_QWORD *)&v2 - 1;
  }
  if (v9 != v4)
  {
LABEL_19:
    *(_QWORD *)(*a1 + 8 * v4) = 0;
    v3 = *__p;
    goto LABEL_20;
  }
LABEL_21:
  v10 = *(_QWORD *)(v3 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= *(_QWORD *)&v2)
      v10 %= *(_QWORD *)&v2;
  }
  else
  {
    v10 &= *(_QWORD *)&v2 - 1;
  }
  if (v10 != v4)
  {
    *(_QWORD *)(*a1 + 8 * v10) = v7;
    v3 = *__p;
  }
LABEL_27:
  *v7 = v3;
  *__p = 0;
  --a1[3];
  operator delete(__p);
}

void sub_18860C208(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t geo::BatchLoadHelper::BatchLoadHelper(uint64_t a1, __int128 **a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v13;
  _BYTE v14[32];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = malloc_type_malloc(0xB6DB6DB6DB6DB6DCLL * (((char *)a2[1] - (char *)*a2) >> 3), 0x100004052888210uLL);
  *(_QWORD *)(a1 + 8) = malloc_type_malloc(0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 3), 0x100004077774924uLL);
  *(_QWORD *)(a1 + 16) = malloc_type_calloc(0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 3), 0x10uLL, 0x1000040451B5BE8uLL);
  *(_QWORD *)(a1 + 24) = malloc_type_malloc(0x6DB6DB6DB6DB6DB8 * ((unint64_t)((char *)a2[1] - (char *)*a2) >> 3), 0x100004000313F17uLL);
  *(_QWORD *)(a1 + 32) = -[GEOTileKeyList initWithCapacity:]([GEOTileKeyList alloc], "initWithCapacity:", 0x6DB6DB6DB6DB6DB7 * (((char *)a2[1] - (char *)*a2) >> 3));
  *(_QWORD *)(a1 + 40) = malloc_type_malloc(0x6DB6DB6DB6DB6DB8 * ((unint64_t)((char *)a2[1] - (char *)*a2) >> 3), 0x100004000313F17uLL);
  v5 = *a2;
  v4 = a2[1];
  if (v5 != v4)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *v5;
      v9 = v5[1];
      v10 = v5[2];
      v15 = *((_QWORD *)v5 + 6);
      *(_OWORD *)v14 = v9;
      *(_OWORD *)&v14[16] = v10;
      v13 = v8;
      objc_msgSend(*(id *)(a1 + 32), "_addKeyToBack:", &v13);
      *(_DWORD *)(*(_QWORD *)a1 + 4 * v7) = *(_DWORD *)v14;
      *(_BYTE *)(*(_QWORD *)(a1 + 8) + v7) = v14[4];
      if (v14[4])
        *(_OWORD *)(*(_QWORD *)(a1 + 16) + v6) = *(_OWORD *)&v14[8];
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v7) = *(_QWORD *)&v14[24];
      v11 = *(_QWORD *)(a1 + 40);
      if (v11)
        *(_QWORD *)(v11 + 8 * v7) = v15;
      ++v7;
      v5 = (__int128 *)((char *)v5 + 56);
      v6 += 16;
    }
    while (v5 != v4);
  }
  return a1;
}

void sub_18860C450(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

void sub_18860C514(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18860D9D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTileKeyHash(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = ~*a1 + (*a1 << 18);
  v2 = 65 * ((21 * (v1 ^ (v1 >> 31))) ^ ((21 * (v1 ^ (v1 >> 31))) >> 11));
  v3 = 21 * ((~a1[1] + (a1[1] << 18)) ^ ((~a1[1] + (a1[1] << 18)) >> 31));
  return v2 ^ (((65 * (v3 ^ (v3 >> 11))) ^ v2) >> 22) ^ (65 * (v3 ^ (v3 >> 11)));
}

uint64_t GEOTileKeyStyle(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = 0;
  LODWORD(v3) = 47;
  switch(*(_BYTE *)a1 & 0x7F)
  {
    case 2:
      LODWORD(v3) = *(unsigned __int16 *)(a1 + 13) >> 2;
      goto LABEL_12;
    case 3:
      v3 = ((*(unsigned int *)(a1 + 9) | ((unint64_t)(*(unsigned __int16 *)(a1 + 13) | (*(unsigned __int8 *)(a1 + 15) << 16)) << 32)) >> 26) & 0x3FFF;
      goto LABEL_12;
    case 4:
      LODWORD(v3) = *(_DWORD *)(a1 + 8) & 0x3FFF;
      goto LABEL_12;
    case 9:
      LODWORD(v3) = *(unsigned __int8 *)(a1 + 10);
      goto LABEL_12;
    case 0xA:
      goto LABEL_12;
    case 0xB:
      LODWORD(v3) = 69;
      goto LABEL_12;
    case 0xC:
      LODWORD(v3) = ((*(unsigned __int16 *)(a1 + 9) | (*(unsigned __int8 *)(a1 + 11) << 16)) >> 6) & 0x3FFF;
      goto LABEL_12;
    case 0xD:
    case 0xF:
      LODWORD(v3) = 71;
      goto LABEL_12;
    case 0xE:
      LODWORD(v3) = 70;
      goto LABEL_12;
    case 0x13:
      LODWORD(v3) = 87;
      goto LABEL_12;
    case 0x14:
      LODWORD(v3) = 90;
LABEL_12:
      *a2 = v3;
      v2 = 1;
      break;
    default:
      return v2;
  }
  return v2;
}

id _GEOConfigAddBlockListenerForKey(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  _QWORD v13[4];
  id v14;
  id v15;

  v7 = a3;
  v8 = a4;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___GEOConfigAddBlockListenerForKey_block_invoke;
  v13[3] = &unk_1E1C10680;
  v14 = v7;
  v15 = v8;
  v9 = v8;
  v10 = v7;
  _GEOConfigAddListenerForKey(a1, a2, v13);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

id _GEOConfigAddListenerForKey(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  _QWORD *v10;
  objc_class *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  _QWORD *v19;
  _QWORD *v20;
  id v21;
  _QWORD v23[4];
  id v24;
  id v25;
  uint64_t *v26;
  uint64_t *v27;
  _QWORD v28[4];
  id v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  void (*v35)(uint64_t);
  id v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);
  void (*v41)(uint64_t);
  id v42;
  uint8_t buf[8];
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  void *v46;
  id v47;

  v5 = a3;
  v37 = 0;
  v38 = &v37;
  v39 = 0x3032000000;
  v40 = __Block_byref_object_copy__64;
  v41 = __Block_byref_object_dispose__64;
  v42 = 0;
  v31 = 0;
  v32 = &v31;
  v33 = 0x3032000000;
  v34 = __Block_byref_object_copy__64;
  v35 = __Block_byref_object_dispose__64;
  v36 = 0;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a1 | (unint64_t)(a2 << 16));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = MEMORY[0x1E0C809B0];
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = ___GEOConfigAddListenerForKey_block_invoke;
  v28[3] = &unk_1E1C10630;
  v30 = &v31;
  v8 = v6;
  v29 = v8;
  v9 = v28;
  if (qword_1ECDBC348 != -1)
    dispatch_once(&qword_1ECDBC348, &__block_literal_global_113);
  *(_QWORD *)buf = v7;
  v44 = 3221225472;
  v45 = ___withKeyListeners_block_invoke;
  v46 = &unk_1E1C01F48;
  v10 = v9;
  v47 = v10;
  geo_isolate_sync();

  if (!v32[5])
  {
    v11 = (objc_class *)objc_opt_self();
    if (a2 && (_DWORD)a1)
    {
      v12 = objc_alloc_init(v11);
      v13 = v12;
      if (v12)
      {
        v12[5] = a1;
        v12[6] = a2;
        v12[2] = 0;
        -[_GEOConfigKeyHelper _currentValue](a1, a2);
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = (void *)v13[1];
        v13[1] = v14;

      }
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Assertion failed: _GEOConfigKeyIsValid(key)", buf, 2u);
      }
      v13 = 0;
    }
    v16 = (void *)v32[5];
    v32[5] = (uint64_t)v13;

  }
  v23[0] = v7;
  v23[1] = 3221225472;
  v23[2] = ___GEOConfigAddListenerForKey_block_invoke_2;
  v23[3] = &unk_1E1C10658;
  v17 = v8;
  v24 = v17;
  v26 = &v31;
  v27 = &v37;
  v18 = v5;
  v25 = v18;
  v19 = v23;
  if (qword_1ECDBC348 != -1)
    dispatch_once(&qword_1ECDBC348, &__block_literal_global_113);
  *(_QWORD *)buf = v7;
  v44 = 3221225472;
  v45 = ___withKeyListeners_block_invoke;
  v46 = &unk_1E1C01F48;
  v20 = v19;
  v47 = v20;
  geo_isolate_sync();

  v21 = (id)v38[5];
  _Block_object_dispose(&v31, 8);

  _Block_object_dispose(&v37, 8);
  return v21;
}

void sub_18860DF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_18860E028(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__hash_table<google::protobuf::Descriptor const*,std::hash<google::protobuf::Descriptor const*>,std::equal_to<google::protobuf::Descriptor const*>,std::allocator<google::protobuf::Descriptor const*>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void setManifestConfiguration(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v5 = a1;
  v3 = a2;
  v4 = v3;
  if (v3 && (objc_msgSend(v3, "isDefaultConfiguration") & 1) == 0)
    GEOEncodeXPCValue(v5, "mcfg", v4, 0);

}

void setLocale(void *a1, void *a2)
{
  void *v3;
  void *v4;
  xpc_object_t xdict;

  xdict = a1;
  objc_msgSend(a2, "localeIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
    xpc_dictionary_set_string(xdict, "lcl", (const char *)objc_msgSend(objc_retainAutorelease(v3), "UTF8String"));

}

id _NSDictionarySafeEncodingCopy(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  unsigned int v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v23;
    v9 = 0x1E0C99000uLL;
    v20 = a2;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v23 != v8)
          objc_enumerationMutation(v5);
        v11 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * v10);
        objc_msgSend(v5, "objectForKey:", v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v12, "absoluteString");
          v13 = objc_claimAutoreleasedReturnValue();
          goto LABEL_8;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        {
          objc_msgSend(v4, "setObject:forKey:", v12, v11);
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            if ((_DWORD)a2)
            {
              _geo_NSErrorXPCSafeRepresentationCopy(v12);
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              if (v14)
                goto LABEL_9;
              goto LABEL_10;
            }
            _geo_NSErrorDictionaryRepresentationCopy(v12);
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithDictionary:", v21);
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
            v16 = v9;
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v15, "setObject:forKey:", v17, CFSTR("_geo_SerializedError"));

            v9 = v16;
            objc_msgSend(v4, "setObject:forKey:", v15, v11);

            a2 = v20;
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v13 = _NSDictionarySafeEncodingCopy(v12, a2);
              goto LABEL_8;
            }
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v13 = (uint64_t)_NSArraySafeEncodingCopy(v12, a2);
LABEL_8:
              v14 = (void *)v13;
LABEL_9:
              objc_msgSend(v4, "setObject:forKey:", v14, v11);
LABEL_10:

            }
          }
        }

        ++v10;
      }
      while (v7 != v10);
      v18 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v22, v26, 16);
      v7 = v18;
    }
    while (v18);
  }

  return v4;
}

uint64_t GEOActiveTileGroupReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int32x2_t v10;
  unint64_t v11;
  __int128 v12;
  int32x2_t v13;
  int32x2_t v14;
  int32x2_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  int32x2_t v20;
  int32x2_t v21;
  int32x2_t v22;
  int32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  int32x2_t v27;
  int32x2_t v28;
  int32x2_t v29;
  int32x2_t v30;
  uint64_t v31;
  int32x2_t v32;
  int32x2_t v33;
  int32x2_t v34;
  int32x2_t v35;
  int32x2_t v36;
  int32x2_t v37;
  int32x2_t v38;
  int8x16_t v39;
  int8x16_t v40;
  uint32x4_t v41;
  int8x16_t v42;
  int32x2_t v43;
  int v44;
  int *v45;
  int8x16_t v46;
  char v47;
  int32x2_t v48;
  uint64_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x2_t v54;
  int32x2_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  char v61;
  char v62;
  int *v63;
  int *v64;
  int v65;
  int *v66;
  int *v67;
  int *v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  BOOL v76;
  int v77;
  int v78;
  unint64_t v80;
  BOOL v81;
  int *v82;
  int v83;
  int v84;
  BOOL v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  GEOActiveTileSet *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  int *v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  int *v117;
  char v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  void *v125;
  int *v126;
  GEOActiveTileSet *v127;
  char v128;
  unsigned int v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  BOOL v135;
  uint64_t v136;
  GEOActiveTileSet *v137;
  uint64_t v138;
  int *v139;
  char v140;
  unsigned int v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  uint64_t v147;
  GEOActiveTileSet *v148;
  uint64_t v149;
  id v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  char v160;
  char v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char v167;
  uint64_t v168;
  char v169;
  int v170;
  int *v171;
  int v172;
  char v173;
  unint64_t v174;
  uint64_t v175;
  char v176;
  int v177;
  void *v178;
  uint64_t v180;
  uint64_t v181;
  int32x2_t v182;
  char v183;
  int32x2_t v184;
  int *v185;
  char v186;
  int32x2_t v187;
  char v188;
  char v189;

  v3 = a2;
  if (a2)
  {
    os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 616));
    *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 612);
    objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 608));
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = (int32x2_t)*(unsigned __int8 *)(a1 + 640);
    v11 = *(_QWORD *)(a1 + 632);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v13 = (int32x2_t)(v12 >> 45);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v14 = (int32x2_t)(v12 >> 46);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v15 = (int32x2_t)(v12 >> 55);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v16 = (int32x2_t)(v12 >> 47);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v17 = (int32x2_t)(v12 >> 49);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v18 = (int32x2_t)(v12 >> 63);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v19 = (int32x2_t)(v12 >> 53);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v20 = (int32x2_t)(v12 >> 42);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v187 = (int32x2_t)(v12 >> 37);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v21 = (int32x2_t)(v12 >> 54);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v182 = (int32x2_t)(v12 >> 41);
    v184 = v21;
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v22 = (int32x2_t)(v12 >> 40);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v23 = (int32x2_t)(v12 >> 59);
    v24 = v20;
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v25 = (int32x2_t)(v12 >> 60);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v26 = (int32x2_t)(v12 >> 62);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v27 = (int32x2_t)(v12 >> 61);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v28 = (int32x2_t)(v12 >> 43);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v29 = (int32x2_t)(v12 >> 56);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v30 = (int32x2_t)(v12 >> 33);
    v31 = a1;
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v32 = (int32x2_t)(v12 >> 52);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v33 = (int32x2_t)(v12 >> 38);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v34 = (int32x2_t)(v12 >> 39);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v35 = (int32x2_t)(v12 >> 50);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v36 = (int32x2_t)(v12 >> 57);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v37 = (int32x2_t)(v12 >> 35);
    *((int32x2_t *)&v12 + 1) = v10;
    *(_QWORD *)&v12 = v11;
    v38 = vzip1_s32(v16, v15);
    *(int32x2_t *)v39.i8 = vzip1_s32(v14, v13);
    v40.i64[0] = 0x100000001;
    v40.i64[1] = 0x100000001;
    v41 = (uint32x4_t)vdupq_n_s32(v11);
    *(int32x2_t *)v42.i8 = vzip1_s32((int32x2_t)(*(_QWORD *)&v10 >> 4), (int32x2_t)(*(_QWORD *)&v10 >> 5));
    v43 = v23;
    v42.u64[1] = (unint64_t)vzip1_s32(v27, v26);
    v44 = vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8(v42, v40), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v41, (uint32x4_t)xmmword_189CCF570), v40)));
    v45 = (int *)MEMORY[0x1E0D82BD8];
    v39.u64[1] = (unint64_t)v38;
    *(int32x2_t *)v46.i8 = vzip1_s32(v19, v18);
    v47 = 0;
    v46.u64[1] = (unint64_t)vzip1_s32(v10, v17);
    v48 = v32;
    v49 = v31;
    *(int32x2_t *)v50.i8 = vzip1_s32(v187, v24);
    v50.u64[1] = (unint64_t)vzip1_s32(v182, v184);
    *(int32x2_t *)v51.i8 = vzip1_s32(v22, (int32x2_t)(*(_QWORD *)&v10 >> 2));
    v51.u64[1] = (unint64_t)vzip1_s32(v25, v43);
    v43.i32[0] = HIDWORD(v11);
    v43.i32[1] = v11 >> 14;
    v52 = (int32x4_t)vandq_s8(v50, v40);
    v53 = vaddq_s32((int32x4_t)vandq_s8(v51, v40), (int32x4_t)vandq_s8(v39, v40));
    v51.i32[0] = v11 >> 5;
    v40.i32[0] = vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8(v46, v40), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v41, (uint32x4_t)xmmword_189CCF590), v40)));
    v51.i32[1] = (v11 >> 34) | (v10.i32[0] << 30);
    v22.i32[0] = vaddvq_s32(vaddq_s32(v53, v52));
    v54 = (int32x2_t)vand_s8((int8x8_t)vzip1_s32(v48, v30), (int8x8_t)0x100000001);
    v55 = (int32x2_t)vand_s8((int8x8_t)v43, (int8x8_t)0x100000001);
    v43.i32[0] = (v11 >> 58) | (v10.i32[0] << 6);
    v43.i32[1] = v11 >> 25;
    v40.i32[1] = WORD1(v11) & 1;
    *(int32x2_t *)v53.i8 = vadd_s32(vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v41.i8, (uint32x2_t)0xFFFFFFEDFFFFFFF8), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vzip1_s32(v29, v28), (int8x8_t)0x100000001)), vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vzip1_s32(v34, v33), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v41.i8, (uint32x2_t)0xFFFFFFF3FFFFFFF7), (int8x8_t)0x100000001)), vadd_s32((int32x2_t)vand_s8(
                                                  (int8x8_t)vshl_u32(*(uint32x2_t *)v41.i8, (uint32x2_t)0xFFFFFFEFFFFFFFEELL), (int8x8_t)0x100000001), v55))), vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vzip1_s32(v35, (int32x2_t)(*(_QWORD *)&v10 >> 3)), (int8x8_t)0x100000001), (int32x2_t)vand_s8(*(int8x8_t *)v51.i8, (int8x8_t)0x100000001)), vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v41.i8, (uint32x2_t)0xFFFFFFE6FFFFFFF9), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vzip1_s32(v36, (int32x2_t)(*(_QWORD *)&v10 >> 1)),
                                                  (int8x8_t)0x100000001))),
                                 vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vzip1_s32((int32x2_t)(v12 >> 48), v37), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v41.i8, (uint32x2_t)0xFFFFFFE9FFFFFFFDLL), (int8x8_t)0x100000001)), vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v41.i8, (uint32x2_t)0xFFFFFFEAFFFFFFFCLL), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)v43, (int8x8_t)0x100000001))))), vadd_s32(*(int32x2_t *)v40.i8, v54));
    v56 = vadd_s32(*(int32x2_t *)v53.i8, vdup_lane_s32(*(int32x2_t *)v53.i8, 1)).u32[0]
        + ((v11 >> 36) & 1)
        + ((v11 >> 51) & 1)
        + ((v11 >> 44) & 1)
        + ((v11 >> 2) & 1)
        + v44
        + vaddvq_s32((int32x4_t)(*(_OWORD *)&vshlq_u32(v41, (uint32x4_t)xmmword_189CCF580) & __PAIR128__(0xFFFFFFE1FFFFFFE1, 0xFFFFFFE1FFFFFFE1)))+ (v11 >> 31)+ v22.i32[0];
    while (2)
    {
      v57 = 1;
      v58 = 1;
      v59 = 1;
      switch(a3[v6])
      {
        case -4:
          ++v56;
          goto LABEL_8;
        case -3:
          v47 = 1;
          goto LABEL_7;
        case -2:
          v58 = v8;
          goto LABEL_10;
        case -1:
          goto LABEL_10;
        case 0:
          v60 = v56 > 0x34;
          v61 = v60 & ~(_BYTE)v9 | v7;
          v62 = v60 | v9;
          v63 = (int *)MEMORY[0x1E0D82BF0];
          if ((((v60 | v9) | v47) & 1) != 0)
            v64 = 0;
          else
            v64 = a3;
          v65 = 1;
          v66 = &OBJC_IVAR___GEOLPRRestrictionRegion__name;
          v67 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]))
            goto LABEL_505;
          v183 = v60 & ~(_BYTE)v9 | v7;
          v186 = v47;
          v188 = v62 | v61;
          v185 = v64;
          v189 = (v64 == 0) | v62;
          v68 = (int *)MEMORY[0x1E0D82BB8];
          break;
        default:
          ++v56;
LABEL_7:
          v57 = v7;
LABEL_8:
          v58 = v8;
          v59 = v9;
LABEL_10:
          ++v6;
          v7 = v57;
          v8 = v58;
          v9 = v59;
          continue;
      }
      break;
    }
    while (2)
    {
      if (*(_BYTE *)(v3 + *v67))
        goto LABEL_503;
      v69 = 0;
      v70 = 0;
      v71 = 0;
      while (1)
      {
        v72 = *v63;
        v73 = *(_QWORD *)(v3 + v72);
        v74 = v73 + 1;
        if (v73 == -1 || v74 > *(_QWORD *)(v3 + *v45))
          break;
        v75 = *(_BYTE *)(*(_QWORD *)(v3 + *v68) + v73);
        *(_QWORD *)(v3 + v72) = v74;
        v71 |= (unint64_t)(v75 & 0x7F) << v69;
        if ((v75 & 0x80) == 0)
          goto LABEL_25;
        v69 += 7;
        v76 = v70++ >= 9;
        if (v76)
        {
          v71 = 0;
          v77 = *(unsigned __int8 *)(v3 + *v67);
          goto LABEL_27;
        }
      }
      *(_BYTE *)(v3 + *v67) = 1;
LABEL_25:
      v77 = *(unsigned __int8 *)(v3 + *v67);
      if (*(_BYTE *)(v3 + *v67))
        v71 = 0;
LABEL_27:
      v78 = v71 & 7;
      if (v77 || v78 == 4)
      {
LABEL_503:
        v65 = 1;
      }
      else
      {
        v80 = v71 >> 3;
        v81 = v62;
        if ((v189 & 1) == 0)
        {
          v82 = v185;
          do
          {
            v84 = *v82++;
            v83 = v84;
            v81 = v84 != 0;
            if (v84)
              v85 = v83 == (_DWORD)v80;
            else
              v85 = 1;
          }
          while (!v85);
        }
        switch((int)v80)
        {
          case 1:
            if ((v186 & 1) == 0)
              goto LABEL_389;
            v86 = 0;
            v87 = 0;
            v88 = 0;
            while (1)
            {
              v89 = *v63;
              v90 = *(_QWORD *)(v3 + v89);
              v91 = v90 + 1;
              if (v90 == -1 || v91 > *(_QWORD *)(v3 + *v45))
                break;
              v92 = *(_BYTE *)(*(_QWORD *)(v3 + *v68) + v90);
              *(_QWORD *)(v3 + v89) = v91;
              v88 |= (unint64_t)(v92 & 0x7F) << v86;
              if ((v92 & 0x80) == 0)
                goto LABEL_394;
              v86 += 7;
              v76 = v87++ >= 9;
              if (v76)
              {
                LODWORD(v88) = 0;
                goto LABEL_396;
              }
            }
            *(_BYTE *)(v3 + *v67) = 1;
LABEL_394:
            if (*(_BYTE *)(v3 + *v67))
              LODWORD(v88) = 0;
LABEL_396:
            v152 = 620;
            goto LABEL_405;
          case 2:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x8000000000000000) != 0)
              goto LABEL_389;
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_590;
            v93 = objc_alloc_init(GEOActiveTileSet);
            if (!GEOActiveTileSetReadAllFrom((uint64_t)v93, (void *)v3, v8 & 1))
              goto LABEL_589;
            PBReaderRecallMark();
            -[GEOActiveTileGroup _addNoFlagsTileSet:](v49, v93);
            goto LABEL_382;
          case 3:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x20000000000000) != 0)
              goto LABEL_389;
            PBReaderReadString();
            v93 = (GEOActiveTileSet *)objc_claimAutoreleasedReturnValue();
            if (v93)
              -[GEOActiveTileGroup _addNoFlagsResource:](v49, v93);
            goto LABEL_382;
          case 4:
            if (!v81)
              goto LABEL_389;
            if ((*(_BYTE *)(v49 + 640) & 1) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 560;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            LOBYTE(v153) = *(_BYTE *)(v49 + 640) << 7;
            goto LABEL_480;
          case 6:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x1000) != 0)
              goto LABEL_389;
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_590;
            v93 = objc_alloc_init(GEOAttribution);
            if (!GEOAttributionReadAllFrom((uint64_t)v93, (void *)v3, v8 & 1))
              goto LABEL_589;
            PBReaderRecallMark();
            -[GEOActiveTileGroup _addNoFlagsAttribution:](v49, v93);
            goto LABEL_382;
          case 7:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x400000000000) != 0)
              goto LABEL_389;
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_590;
            v93 = objc_alloc_init(GEORegionalResourceTile);
            if (!GEORegionalResourceTileReadAllFrom((uint64_t)v93, (void *)v3, v8 & 1))
              goto LABEL_589;
            PBReaderRecallMark();
            -[GEOActiveTileGroup _addNoFlagsRegionalResourceTile:](v49, v93);
            goto LABEL_382;
          case 8:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x200000000000) != 0)
              goto LABEL_389;
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_590;
            v93 = objc_alloc_init(GEORegionalResourceRegion);
            if (!GEORegionalResourceRegionReadAllFrom((uint64_t)v93, (void *)v3, v8 & 1))
              goto LABEL_589;
            PBReaderRecallMark();
            -[GEOActiveTileGroup _addNoFlagsRegionalResourceRegion:](v49, v93);
            goto LABEL_382;
          case 9:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x800000000000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 424;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = *(char *)(v49 + 637);
            goto LABEL_481;
          case 11:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x80000000000000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 488;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = *(char *)(v49 + 638);
            goto LABEL_481;
          case 15:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x100000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 208;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 43) >> 56;
            goto LABEL_481;
          case 16:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x1000000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 240;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 39) >> 56;
            goto LABEL_481;
          case 18:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x8000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 168;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = *(char *)(v49 + 633);
            goto LABEL_481;
          case 19:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x2000000000000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 440;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 14) >> 56;
            goto LABEL_481;
          case 21:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x10000000000000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 464;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 11) >> 56;
            goto LABEL_481;
          case 22:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x100000000000000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 496;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 7) >> 56;
            goto LABEL_481;
          case 23:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x100) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 112;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 55) >> 56;
            goto LABEL_481;
          case 24:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x200) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 120;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 54) >> 56;
            goto LABEL_481;
          case 25:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x2000000000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 344;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 26) >> 56;
            goto LABEL_481;
          case 26:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x40000000000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 384;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 21) >> 56;
            goto LABEL_481;
          case 27:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x20000000000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 376;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 22) >> 56;
            goto LABEL_481;
          case 28:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x40000000000000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 480;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 9) >> 56;
            goto LABEL_481;
          case 29:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x8000000000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 360;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = *(char *)(v49 + 636);
            goto LABEL_481;
          case 35:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x800) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 136;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 52) >> 56;
            goto LABEL_481;
          case 36:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x400) != 0)
              goto LABEL_389;
            PBReaderReadString();
            v93 = (GEOActiveTileSet *)objc_claimAutoreleasedReturnValue();
            if (v93)
              -[GEOActiveTileGroup _addNoFlagsAnnouncementsSupportedLanguages:](v49, v93);
            goto LABEL_382;
          case 38:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x200000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 216;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 42) >> 56;
            goto LABEL_481;
          case 39:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x10000000000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 368;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 23) >> 56;
            goto LABEL_481;
          case 40:
            if (!v81)
              goto LABEL_389;
            if ((*(_BYTE *)(v49 + 640) & 4) != 0)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_590;
              LOBYTE(v153) = 32 * *(_BYTE *)(v49 + 640);
              goto LABEL_480;
            }
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_590;
            v93 = objc_alloc_init(GEOVersionManifest);
            if (!GEOVersionManifestReadAllFrom(v93, (void *)v3))
              goto LABEL_589;
            PBReaderRecallMark();
            v96 = 576;
            goto LABEL_328;
          case 41:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x1000000000000000) != 0)
              goto LABEL_389;
            PBReaderReadString();
            v93 = (GEOActiveTileSet *)objc_claimAutoreleasedReturnValue();
            if (v93)
              -[GEOActiveTileGroup _addNoFlagsStyleSheet:](v49, v93);
            goto LABEL_382;
          case 42:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x800000000000000) != 0)
              goto LABEL_389;
            PBReaderReadString();
            v93 = (GEOActiveTileSet *)objc_claimAutoreleasedReturnValue();
            if (v93)
              -[GEOActiveTileGroup _addNoFlagsStyleSheetChecksum:](v49, v93);
            goto LABEL_382;
          case 43:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x4000000000000000) != 0)
              goto LABEL_389;
            PBReaderReadString();
            v93 = (GEOActiveTileSet *)objc_claimAutoreleasedReturnValue();
            if (v93)
              -[GEOActiveTileGroup _addNoFlagsTexture:](v49, v93);
            goto LABEL_382;
          case 44:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x2000000000000000) != 0)
              goto LABEL_389;
            PBReaderReadString();
            v93 = (GEOActiveTileSet *)objc_claimAutoreleasedReturnValue();
            if (v93)
              -[GEOActiveTileGroup _addNoFlagsTextureChecksum:](v49, v93);
            goto LABEL_382;
          case 45:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x10000000) != 0)
              goto LABEL_389;
            PBReaderReadString();
            v93 = (GEOActiveTileSet *)objc_claimAutoreleasedReturnValue();
            if (v93)
              -[GEOActiveTileGroup _addNoFlagsFont:](v49, v93);
            goto LABEL_382;
          case 46:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x8000000) != 0)
              goto LABEL_389;
            PBReaderReadString();
            v93 = (GEOActiveTileSet *)objc_claimAutoreleasedReturnValue();
            if (v93)
              -[GEOActiveTileGroup _addNoFlagsFontChecksum:](v49, v93);
            goto LABEL_382;
          case 47:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x40000000) != 0)
              goto LABEL_389;
            PBReaderReadString();
            v93 = (GEOActiveTileSet *)objc_claimAutoreleasedReturnValue();
            if (v93)
              -[GEOActiveTileGroup _addNoFlagsIcon:](v49, v93);
            goto LABEL_382;
          case 48:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x20000000) != 0)
              goto LABEL_389;
            PBReaderReadString();
            v93 = (GEOActiveTileSet *)objc_claimAutoreleasedReturnValue();
            if (v93)
              -[GEOActiveTileGroup _addNoFlagsIconChecksum:](v49, v93);
            goto LABEL_382;
          case 49:
            if (!v81 || (*(_BYTE *)(v49 + 640) & 0x20) != 0)
              goto LABEL_389;
            PBReaderReadString();
            v93 = (GEOActiveTileSet *)objc_claimAutoreleasedReturnValue();
            if (v93)
              -[GEOActiveTileGroup _addNoFlagsXml:](v49, v93);
            goto LABEL_382;
          case 50:
            if (!v81 || (*(_BYTE *)(v49 + 640) & 0x10) != 0)
              goto LABEL_389;
            PBReaderReadString();
            v93 = (GEOActiveTileSet *)objc_claimAutoreleasedReturnValue();
            if (v93)
              -[GEOActiveTileGroup _addNoFlagsXmlChecksum:](v49, v93);
            goto LABEL_382;
          case 51:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x40) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 96;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            LODWORD(v153) = 2 * *(_DWORD *)(v49 + 632);
            goto LABEL_480;
          case 52:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x40000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 192;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 45) >> 56;
            goto LABEL_481;
          case 53:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x100000000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 304;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 31) >> 56;
            goto LABEL_481;
          case 54:
            if (!v81 || (*(_DWORD *)(v49 + 632) & 0x80000000) != 0)
              goto LABEL_389;
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_590;
            v93 = objc_alloc_init(GEOMapRegion);
            if (!GEOMapRegionReadAllFrom((uint64_t)v93, (void *)v3))
              goto LABEL_589;
            PBReaderRecallMark();
            -[GEOActiveTileGroup _addNoFlagsLocationShiftEnabledRegion:](v49, v93);
            goto LABEL_382;
          case 55:
            if ((v186 & 1) == 0)
              goto LABEL_389;
            v97 = 0;
            v98 = 0;
            v88 = 0;
            *(_QWORD *)(v49 + 632) |= 1uLL;
            while (2)
            {
              v99 = *v63;
              v100 = *(_QWORD *)(v3 + v99);
              v101 = v100 + 1;
              if (v100 == -1 || v101 > *(_QWORD *)(v3 + *v45))
              {
                *(_BYTE *)(v3 + *v67) = 1;
              }
              else
              {
                v102 = *(_BYTE *)(*(_QWORD *)(v3 + *v68) + v100);
                *(_QWORD *)(v3 + v99) = v101;
                v88 |= (unint64_t)(v102 & 0x7F) << v97;
                if (v102 < 0)
                {
                  v97 += 7;
                  v76 = v98++ >= 9;
                  if (v76)
                  {
                    LODWORD(v88) = 0;
                    goto LABEL_400;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(v3 + *v67))
              LODWORD(v88) = 0;
LABEL_400:
            v152 = 624;
            goto LABEL_405;
          case 56:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x20) != 0)
              goto LABEL_389;
            if (!PBReaderPlaceMark())
              goto LABEL_590;
            -[GEOActiveTileGroup _reserveHybridUnavailableRegions:](v49, 1uLL);
            if (!GEOTileSetRegionReadAllFrom((_DWORD *)(*(_QWORD *)(v49 + 72) + 24 * *(_QWORD *)(v49 + 80)), v3))
              goto LABEL_590;
            PBReaderRecallMark();
            ++*(_QWORD *)(v49 + 80);
            goto LABEL_390;
          case 57:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x4000000000000) == 0)
            {
              PBReaderReadData();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 448;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 13) >> 56;
            goto LABEL_481;
          case 68:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x200000000000000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 504;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 6) >> 56;
            goto LABEL_481;
          case 69:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x80) != 0)
              goto LABEL_389;
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_590;
            v93 = objc_alloc_init(GEOResource);
            if (!GEOResourceReadAllFrom((uint64_t)v93, (void *)v3, v8 & 1))
              goto LABEL_589;
            PBReaderRecallMark();
            -[GEOActiveTileGroup _addNoFlagsActiveResource:](v49, v93);
            goto LABEL_382;
          case 70:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x1000000000000) != 0)
              goto LABEL_389;
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_590;
            v93 = objc_alloc_init(GEORegionalResourceSet);
            if (!GEORegionalResourceSetReadAllFrom((uint64_t)v93, (void *)v3, v8 & 1))
              goto LABEL_589;
            PBReaderRecallMark();
            -[GEOActiveTileGroup _addNoFlagsRegionalResource:](v49, v93);
            goto LABEL_382;
          case 71:
            if ((v186 & 1) == 0)
              goto LABEL_389;
            v103 = 0;
            v104 = 0;
            v88 = 0;
            *(_QWORD *)(v49 + 632) |= 2uLL;
            while (2)
            {
              v105 = *v63;
              v106 = *(_QWORD *)(v3 + v105);
              v107 = v106 + 1;
              if (v106 == -1 || v107 > *(_QWORD *)(v3 + *v45))
              {
                *(_BYTE *)(v3 + *v67) = 1;
              }
              else
              {
                v108 = *(_BYTE *)(*(_QWORD *)(v3 + *v68) + v106);
                *(_QWORD *)(v3 + v105) = v107;
                v88 |= (unint64_t)(v108 & 0x7F) << v103;
                if (v108 < 0)
                {
                  v103 += 7;
                  v76 = v104++ >= 9;
                  if (v76)
                  {
                    LODWORD(v88) = 0;
                    goto LABEL_404;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(v3 + *v67))
              LODWORD(v88) = 0;
LABEL_404:
            v152 = 628;
LABEL_405:
            *(_DWORD *)(v49 + v152) = v88;
            goto LABEL_390;
          case 72:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 8) != 0)
              goto LABEL_389;
            if (v78 != 2)
            {
              v154 = 0;
              v155 = 0;
              v156 = 0;
              while (1)
              {
                v157 = *v63;
                v158 = *(_QWORD *)(v3 + v157);
                v159 = v158 + 1;
                if (v158 == -1 || v159 > *(_QWORD *)(v3 + *v45))
                  goto LABEL_501;
                v160 = *(_BYTE *)(*(_QWORD *)(v3 + *v68) + v158);
                *(_QWORD *)(v3 + v157) = v159;
                v156 |= (unint64_t)(v160 & 0x7F) << v154;
                if (v160 < 0)
                {
                  v154 += 7;
                  v76 = v155++ >= 9;
                  if (!v76)
                    continue;
                }
                goto LABEL_502;
              }
            }
            if (!PBReaderPlaceMark())
              goto LABEL_590;
            while (1)
            {
              v109 = (int *)MEMORY[0x1E0D82BD8];
              if (*(_QWORD *)(v3 + *v63) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) || *(_BYTE *)(v3 + *v67))
                goto LABEL_486;
              v110 = 0;
              v111 = 0;
              v112 = 0;
              while (1)
              {
                v113 = *v63;
                v114 = *(_QWORD *)(v3 + v113);
                v115 = v114 + 1;
                if (v114 == -1 || v115 > *(_QWORD *)(v3 + *v109))
                  break;
                v116 = *(_BYTE *)(*(_QWORD *)(v3 + *v68) + v114);
                *(_QWORD *)(v3 + v113) = v115;
                v112 |= (unint64_t)(v116 & 0x7F) << v110;
                if (v116 < 0)
                {
                  v110 += 7;
                  v76 = v111++ >= 9;
                  if (!v76)
                    continue;
                }
                goto LABEL_242;
              }
              *(_BYTE *)(v3 + *v67) = 1;
LABEL_242:
              PBRepeatedInt32Add();
            }
          case 73:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x10) != 0)
              goto LABEL_389;
            if (v78 == 2)
            {
              if (!PBReaderPlaceMark())
                goto LABEL_590;
              while (1)
              {
                v117 = (int *)MEMORY[0x1E0D82BD8];
                if (*(_QWORD *)(v3 + *v63) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) || *(_BYTE *)(v3 + *v67))
                  break;
                v118 = 0;
                v119 = 0;
                v120 = 0;
                while (1)
                {
                  v121 = *v63;
                  v122 = *(_QWORD *)(v3 + v121);
                  v123 = v122 + 1;
                  if (v122 == -1 || v123 > *(_QWORD *)(v3 + *v117))
                    break;
                  v124 = *(_BYTE *)(*(_QWORD *)(v3 + *v68) + v122);
                  *(_QWORD *)(v3 + v121) = v123;
                  v120 |= (unint64_t)(v124 & 0x7F) << v118;
                  if (v124 < 0)
                  {
                    v118 += 7;
                    v76 = v119++ >= 9;
                    if (!v76)
                      continue;
                  }
                  goto LABEL_257;
                }
                *(_BYTE *)(v3 + *v67) = 1;
LABEL_257:
                PBRepeatedInt32Add();
              }
LABEL_486:
              PBReaderRecallMark();
            }
            else
            {
              v161 = 0;
              v162 = 0;
              v163 = 0;
              while (1)
              {
                v164 = *v63;
                v165 = *(_QWORD *)(v3 + v164);
                v166 = v165 + 1;
                if (v165 == -1 || v166 > *(_QWORD *)(v3 + *v45))
                  break;
                v167 = *(_BYTE *)(*(_QWORD *)(v3 + *v68) + v165);
                *(_QWORD *)(v3 + v164) = v166;
                v163 |= (unint64_t)(v167 & 0x7F) << v161;
                if (v167 < 0)
                {
                  v161 += 7;
                  v76 = v162++ >= 9;
                  if (!v76)
                    continue;
                }
                goto LABEL_502;
              }
LABEL_501:
              *(_BYTE *)(v3 + *v67) = 1;
LABEL_502:
              PBRepeatedInt32Add();
            }
            goto LABEL_390;
          case 74:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x400000000000000) != 0)
              goto LABEL_389;
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_590;
            v93 = objc_alloc_init(GEOStaleResource);
            if (!GEOStaleResourceReadAllFrom((uint64_t)v93, (void *)v3, v8 & 1))
              goto LABEL_589;
            PBReaderRecallMark();
            -[GEOActiveTileGroup _addNoFlagsStaleResource:](v49, v93);
            goto LABEL_382;
          case 75:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x80000) != 0)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_590;
              v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 44) >> 56;
              goto LABEL_481;
            }
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_590;
            v93 = objc_alloc_init(GEODataSetDescription);
            if (!GEODataSetDescriptionReadAllFrom((uint64_t)v93, (void *)v3))
              goto LABEL_589;
            PBReaderRecallMark();
            v96 = 200;
            goto LABEL_328;
          case 78:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x80000000000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 392;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 20) >> 56;
            goto LABEL_481;
          case 79:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x10000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 176;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 47) >> 56;
            goto LABEL_481;
          case 80:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x200000000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 312;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 30) >> 56;
            goto LABEL_481;
          case 81:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x4000000000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 352;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 25) >> 56;
            goto LABEL_481;
          case 83:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x2000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 152;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 50) >> 56;
            goto LABEL_481;
          case 84:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x20000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 184;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 46) >> 56;
            goto LABEL_481;
          case 85:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x4000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 160;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 49) >> 56;
            goto LABEL_481;
          case 87:
            if (!v81)
              goto LABEL_389;
            if ((*(_BYTE *)(v49 + 640) & 8) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 584;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            LOBYTE(v153) = 16 * *(_BYTE *)(v49 + 640);
            goto LABEL_480;
          case 91:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x400000000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 320;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 29) >> 56;
            goto LABEL_481;
          case 93:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x4000000) == 0)
            {
              PBReaderReadData();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 256;
              goto LABEL_311;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 37) >> 56;
            goto LABEL_481;
          case 94:
            if (!v81)
              goto LABEL_389;
            if ((*(_BYTE *)(v49 + 640) & 2) != 0)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_590;
              LOBYTE(v153) = *(_BYTE *)(v49 + 640) << 6;
LABEL_480:
              v153 = (char)v153;
              goto LABEL_481;
            }
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_590;
            v93 = objc_alloc_init(GEOURLInfoSet);
            if (!GEOURLInfoSetReadAllFrom((uint64_t)v93, (void *)v3, v8 & 1))
              goto LABEL_589;
            PBReaderRecallMark();
            v96 = 568;
            goto LABEL_328;
          case 95:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x800000000) != 0)
              goto LABEL_389;
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_590;
            v93 = objc_alloc_init(GEOMuninBucket);
            if (!GEOMuninBucketReadAllFrom((uint64_t)v93, (void *)v3))
              goto LABEL_589;
            PBReaderRecallMark();
            -[GEOActiveTileGroup _addNoFlagsMuninBucket:](v49, v93);
            goto LABEL_382;
          case 96:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x800000) == 0)
            {
              PBReaderReadString();
              v94 = objc_claimAutoreleasedReturnValue();
              v95 = 232;
LABEL_311:
              v125 = *(void **)(v49 + v95);
              *(_QWORD *)(v49 + v95) = v94;
              goto LABEL_312;
            }
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_590;
            v153 = *(char *)(v49 + 634);
            goto LABEL_481;
          case 97:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x400000) != 0)
              goto LABEL_389;
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_590;
            v93 = objc_alloc_init(GEODisplayString);
            if (!GEODisplayStringReadAllFrom(v93, (void *)v3, v8 & 1))
              goto LABEL_589;
            PBReaderRecallMark();
            -[GEOActiveTileGroup _addNoFlagsDisplayStrings:](v49, v93);
            goto LABEL_382;
          case 98:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x2000000) != 0)
              goto LABEL_389;
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_590;
            v93 = objc_alloc_init(GEOResource);
            if (!GEOResourceReadAllFrom((uint64_t)v93, (void *)v3, v8 & 1))
              goto LABEL_589;
            PBReaderRecallMark();
            -[GEOActiveTileGroup _addNoFlagsExplicitResource:](v49, v93);
            goto LABEL_382;
          case 99:
            if (!v81)
              goto LABEL_389;
            if ((*(_QWORD *)(v49 + 632) & 0x1000000000) != 0)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_590;
              v153 = (uint64_t)(*(_QWORD *)(v49 + 632) << 27) >> 56;
LABEL_481:
              v6 += v153 >> 7;
            }
            else
            {
              if ((PBReaderPlaceMark() & 1) == 0)
                goto LABEL_590;
              v93 = objc_alloc_init(GEOOfflineMetadata);
              if (!GEOOfflineMetadataReadAllFrom((uint64_t)v93, (void *)v3))
                goto LABEL_589;
              PBReaderRecallMark();
              v96 = 336;
LABEL_328:
              v125 = *(void **)(v49 + v96);
              *(_QWORD *)(v49 + v96) = v93;
LABEL_312:

              --v6;
            }
            goto LABEL_390;
          case 100:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x8000000000000) != 0)
              goto LABEL_389;
            if (!PBReaderPlaceMark())
              goto LABEL_590;
            v126 = (int *)MEMORY[0x1E0D82BD8];
            if (*(_QWORD *)(v3 + *v63) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]))
              goto LABEL_587;
            v180 = 0;
            v127 = 0;
            v93 = 0;
            while (2)
            {
              if (!*(_BYTE *)(v3 + *v67))
              {
                v128 = 0;
                v129 = 0;
                v130 = 0;
                while (1)
                {
                  v131 = *v63;
                  v132 = *(_QWORD *)(v3 + v131);
                  v133 = v132 + 1;
                  if (v132 == -1 || v133 > *(_QWORD *)(v3 + *v126))
                    break;
                  v134 = *(_BYTE *)(*(_QWORD *)(v3 + *v68) + v132);
                  *(_QWORD *)(v3 + v131) = v133;
                  v130 |= (unint64_t)(v134 & 0x7F) << v128;
                  if ((v134 & 0x80) == 0)
                    goto LABEL_343;
                  v128 += 7;
                  v135 = v129++ > 8;
                  if (v135)
                    goto LABEL_350;
                }
                *(_BYTE *)(v3 + *v67) = 1;
LABEL_343:
                if (*(_BYTE *)(v3 + *v67))
                  v130 = 0;
                if ((v130 >> 3) == 2)
                {
                  PBReaderReadString();
                  v138 = objc_claimAutoreleasedReturnValue();
                  v137 = v127;
                  LOBYTE(v180) = 1;
                  v127 = (GEOActiveTileSet *)v138;
LABEL_349:

                }
                else
                {
                  if ((v130 >> 3) == 1)
                  {
                    PBReaderReadString();
                    v136 = objc_claimAutoreleasedReturnValue();
                    v137 = v93;
                    BYTE4(v180) = 1;
                    v93 = (GEOActiveTileSet *)v136;
                    goto LABEL_349;
                  }
LABEL_350:
                  if ((PBReaderSkipValueWithTag() & 1) == 0)
                    goto LABEL_588;
                }
                v126 = (int *)MEMORY[0x1E0D82BD8];
                if (*(_QWORD *)(v3 + *v63) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]))
                  break;
                continue;
              }
              break;
            }
            if ((v180 & 0x100000000) == 0 || (v180 & 1) == 0)
              goto LABEL_588;
            -[GEOActiveTileGroup _setNoFlagsResourceCanonicalNameToFileNameValue:forKey:](v49, v127, v93);
LABEL_381:
            PBReaderRecallMark();

LABEL_382:
            goto LABEL_390;
          case 101:
            if (!v81 || (*(_QWORD *)(v49 + 632) & 0x100000000000) != 0)
              goto LABEL_389;
            if (!PBReaderPlaceMark())
              goto LABEL_590;
            v139 = (int *)MEMORY[0x1E0D82BD8];
            if (*(_QWORD *)(v3 + *v63) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]))
            {
LABEL_587:
              v93 = 0;
              v127 = 0;
              goto LABEL_588;
            }
            v181 = 0;
            v127 = 0;
            v93 = 0;
            while (2)
            {
              if (!*(_BYTE *)(v3 + *v67))
              {
                v140 = 0;
                v141 = 0;
                v142 = 0;
                while (1)
                {
                  v143 = *v63;
                  v144 = *(_QWORD *)(v3 + v143);
                  v145 = v144 + 1;
                  if (v144 == -1 || v145 > *(_QWORD *)(v3 + *v139))
                    break;
                  v146 = *(_BYTE *)(*(_QWORD *)(v3 + *v68) + v144);
                  *(_QWORD *)(v3 + v143) = v145;
                  v142 |= (unint64_t)(v146 & 0x7F) << v140;
                  if ((v146 & 0x80) == 0)
                    goto LABEL_369;
                  v140 += 7;
                  v135 = v141++ > 8;
                  if (v135)
                    goto LABEL_376;
                }
                *(_BYTE *)(v3 + *v67) = 1;
LABEL_369:
                if (*(_BYTE *)(v3 + *v67))
                  v142 = 0;
                if ((v142 >> 3) == 2)
                {
                  PBReaderReadString();
                  v149 = objc_claimAutoreleasedReturnValue();
                  v148 = v127;
                  LOBYTE(v181) = 1;
                  v127 = (GEOActiveTileSet *)v149;
                }
                else
                {
                  if ((v142 >> 3) != 1)
                  {
LABEL_376:
                    if ((PBReaderSkipValueWithTag() & 1) == 0)
                      goto LABEL_588;
LABEL_377:
                    v139 = (int *)MEMORY[0x1E0D82BD8];
                    if (*(_QWORD *)(v3 + *v63) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]))
                      break;
                    continue;
                  }
                  PBReaderReadString();
                  v147 = objc_claimAutoreleasedReturnValue();
                  v148 = v93;
                  BYTE4(v181) = 1;
                  v93 = (GEOActiveTileSet *)v147;
                }

                goto LABEL_377;
              }
              break;
            }
            if ((v181 & 0x100000000) != 0 && (v181 & 1) != 0)
            {
              -[GEOActiveTileGroup _setNoFlagsRegionalResourceCanonicalNameToFileNameValue:forKey:](v49, v127, v93);
              goto LABEL_381;
            }
LABEL_588:

LABEL_589:
LABEL_590:
            v65 = 0;
            break;
          default:
            if ((v183 & 1) == 0 || (*(_QWORD *)(v49 + 632) & 4) != 0)
            {
LABEL_389:
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_590;
            }
            else
            {
              if (!*(_QWORD *)(v49 + 16))
              {
                v150 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
                v151 = *(void **)(v49 + 16);
                *(_QWORD *)(v49 + 16) = v150;

              }
              if (!PBUnknownFieldAdd())
              {
                v65 = 0;
                v66 = &OBJC_IVAR___GEOLPRRestrictionRegion__name;
                v64 = v185;
                goto LABEL_506;
              }
            }
LABEL_390:
            if (!(v188 & 1 | (v6 != 0)))
              goto LABEL_503;
            v45 = (int *)MEMORY[0x1E0D82BD8];
            if (*(_QWORD *)(v3 + *v63) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]))
              goto LABEL_503;
            continue;
        }
      }
      break;
    }
    v66 = &OBJC_IVAR___GEOLPRRestrictionRegion__name;
    v64 = v185;
    v61 = v183;
LABEL_505:
    if ((v61 & 1) != 0)
LABEL_506:
      *(_QWORD *)(v49 + v66[878]) |= 4uLL;
    if (v62 & 1 | ((v65 & 1) == 0))
    {
      v168 = v49 + v66[878];
      v169 = *(_BYTE *)(v168 + 8) | 0x3F;
      *(_QWORD *)v168 |= 0xFFFFFFFFFFFFFFF8;
      *(_BYTE *)(v168 + 8) = v169;
    }
    else if (v64)
    {
      v170 = *v64;
      if (*v64)
      {
        v171 = v64 + 1;
        do
        {
          v172 = v170 - 2;
          v173 = 0;
          v174 = 0x8000000000000000;
          switch(v172)
          {
            case 0:
              goto LABEL_579;
            case 1:
              v173 = 0;
              v174 = 0x20000000000000;
              goto LABEL_579;
            case 2:
              v174 = 0;
              v173 = 1;
              goto LABEL_579;
            case 4:
              v173 = 0;
              v174 = 4096;
              goto LABEL_579;
            case 5:
              v173 = 0;
              v174 = 0x400000000000;
              goto LABEL_579;
            case 6:
              v173 = 0;
              v174 = 0x200000000000;
              goto LABEL_579;
            case 7:
              v173 = 0;
              v174 = 0x800000000000;
              goto LABEL_579;
            case 9:
              v173 = 0;
              v174 = 0x80000000000000;
              goto LABEL_579;
            case 13:
              v173 = 0;
              v174 = 0x100000;
              goto LABEL_579;
            case 14:
              v173 = 0;
              v174 = 0x1000000;
              goto LABEL_579;
            case 16:
              v173 = 0;
              v174 = 0x8000;
              goto LABEL_579;
            case 17:
              v173 = 0;
              v174 = 0x2000000000000;
              goto LABEL_579;
            case 19:
              v173 = 0;
              v174 = 0x10000000000000;
              goto LABEL_579;
            case 20:
              v173 = 0;
              v174 = 0x100000000000000;
              goto LABEL_579;
            case 21:
              v173 = 0;
              v174 = 256;
              goto LABEL_579;
            case 22:
              v173 = 0;
              v174 = 512;
              goto LABEL_579;
            case 23:
              v173 = 0;
              v174 = 0x2000000000;
              goto LABEL_579;
            case 24:
              v173 = 0;
              v174 = 0x40000000000;
              goto LABEL_579;
            case 25:
              v173 = 0;
              v174 = 0x20000000000;
              goto LABEL_579;
            case 26:
              v173 = 0;
              v174 = 0x40000000000000;
              goto LABEL_579;
            case 27:
              v173 = 0;
              v174 = 0x8000000000;
              goto LABEL_579;
            case 33:
              v173 = 0;
              v174 = 2048;
              goto LABEL_579;
            case 34:
              v173 = 0;
              v174 = 1024;
              goto LABEL_579;
            case 36:
              v173 = 0;
              v174 = 0x200000;
              goto LABEL_579;
            case 37:
              v173 = 0;
              v174 = 0x10000000000;
              goto LABEL_579;
            case 38:
              v174 = 0;
              v173 = 4;
              goto LABEL_579;
            case 39:
              v173 = 0;
              v174 = 0x1000000000000000;
              goto LABEL_579;
            case 40:
              v173 = 0;
              v174 = 0x800000000000000;
              goto LABEL_579;
            case 41:
              v173 = 0;
              v174 = 0x4000000000000000;
              goto LABEL_579;
            case 42:
              v173 = 0;
              v174 = 0x2000000000000000;
              goto LABEL_579;
            case 43:
              v173 = 0;
              v174 = 0x10000000;
              goto LABEL_579;
            case 44:
              v173 = 0;
              v174 = 0x8000000;
              goto LABEL_579;
            case 45:
              v173 = 0;
              v174 = 0x40000000;
              goto LABEL_579;
            case 46:
              v173 = 0;
              v174 = 0x20000000;
              goto LABEL_579;
            case 47:
              v174 = 0;
              v173 = 32;
              goto LABEL_579;
            case 48:
              v174 = 0;
              v173 = 16;
              goto LABEL_579;
            case 49:
              v173 = 0;
              v174 = 64;
              goto LABEL_579;
            case 50:
              v173 = 0;
              v174 = 0x40000;
              goto LABEL_579;
            case 51:
              v173 = 0;
              v174 = 0x100000000;
              goto LABEL_579;
            case 52:
              v173 = 0;
              v174 = 0x80000000;
              goto LABEL_579;
            case 54:
              v173 = 0;
              v174 = 32;
              goto LABEL_579;
            case 55:
              v173 = 0;
              v174 = 0x4000000000000;
              goto LABEL_579;
            case 66:
              v173 = 0;
              v174 = 0x200000000000000;
              goto LABEL_579;
            case 67:
              v173 = 0;
              v174 = 128;
              goto LABEL_579;
            case 68:
              v173 = 0;
              v174 = 0x1000000000000;
              goto LABEL_579;
            case 70:
              v173 = 0;
              v174 = 8;
              goto LABEL_579;
            case 71:
              v173 = 0;
              v174 = 16;
              goto LABEL_579;
            case 72:
              v173 = 0;
              v174 = 0x400000000000000;
              goto LABEL_579;
            case 73:
              v173 = 0;
              v174 = 0x80000;
              goto LABEL_579;
            case 76:
              v173 = 0;
              v174 = 0x80000000000;
              goto LABEL_579;
            case 77:
              v173 = 0;
              v174 = 0x10000;
              goto LABEL_579;
            case 78:
              v173 = 0;
              v174 = 0x200000000;
              goto LABEL_579;
            case 79:
              v173 = 0;
              v174 = 0x4000000000;
              goto LABEL_579;
            case 81:
              v173 = 0;
              v174 = 0x2000;
              goto LABEL_579;
            case 82:
              v173 = 0;
              v174 = 0x20000;
              goto LABEL_579;
            case 83:
              v173 = 0;
              v174 = 0x4000;
              goto LABEL_579;
            case 85:
              v174 = 0;
              v173 = 8;
              goto LABEL_579;
            case 89:
              v173 = 0;
              v174 = 0x400000000;
              goto LABEL_579;
            case 91:
              v173 = 0;
              v174 = 0x4000000;
              goto LABEL_579;
            case 92:
              v174 = 0;
              v173 = 2;
              goto LABEL_579;
            case 93:
              v173 = 0;
              v174 = 0x800000000;
              goto LABEL_579;
            case 94:
              v173 = 0;
              v174 = 0x800000;
              goto LABEL_579;
            case 95:
              v173 = 0;
              v174 = 0x400000;
              goto LABEL_579;
            case 96:
              v173 = 0;
              v174 = 0x2000000;
              goto LABEL_579;
            case 97:
              v173 = 0;
              v174 = 0x1000000000;
              goto LABEL_579;
            case 98:
              v173 = 0;
              v174 = 0x8000000000000;
              goto LABEL_579;
            case 99:
              v173 = 0;
              v174 = 0x100000000000;
LABEL_579:
              v175 = v49 + v66[878];
              v176 = *(_BYTE *)(v175 + 8) | v173;
              *(_QWORD *)v175 |= v174;
              *(_BYTE *)(v175 + 8) = v176;
              break;
            default:
              break;
          }
          v177 = *v171++;
          v170 = v177;
        }
        while (v177);
      }
    }
    if (v65)
    {
      v3 = *(_BYTE *)(v3 + *v67) == 0;
      if ((v62 & 1) == 0)
        return v3;
      goto LABEL_585;
    }
    v3 = 0;
    if ((v62 & 1) != 0)
    {
LABEL_585:
      v178 = *(void **)(v49 + 8);
      *(_QWORD *)(v49 + 8) = 0;

    }
  }
  return v3;
}

void sub_188611D7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMuninBucketReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  _BOOL8 v34;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (1)
      {
        if (v3[*v6])
          goto LABEL_51;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          goto LABEL_51;
        v17 = v10 >> 3;
        if ((v10 >> 3) == 5)
          break;
        if ((_DWORD)v17 == 4)
        {
          PBReaderReadString();
          v29 = objc_claimAutoreleasedReturnValue();
          v30 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v29;

        }
        else
        {
          if ((_DWORD)v17 == 3)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 1u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              if (v22 == -1 || v22 >= *(_QWORD *)&v3[*v5])
                break;
              v23 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_42;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_44;
              }
            }
            v3[*v6] = 1;
LABEL_42:
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_44:
            v33 = 24;
LABEL_49:
            *(_DWORD *)(a1 + v33) = v20;
            goto LABEL_50;
          }
          if (!*(_QWORD *)(a1 + 8))
          {
            v31 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v32 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v31;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_52;
        }
LABEL_50:
        if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
          goto LABEL_51;
      }
      v24 = 0;
      v25 = 0;
      v20 = 0;
      *(_BYTE *)(a1 + 32) |= 2u;
      while (1)
      {
        v26 = *v4;
        v27 = *(_QWORD *)&v3[v26];
        if (v27 == -1 || v27 >= *(_QWORD *)&v3[*v5])
          break;
        v28 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v27);
        *(_QWORD *)&v3[v26] = v27 + 1;
        v20 |= (unint64_t)(v28 & 0x7F) << v24;
        if ((v28 & 0x80) == 0)
          goto LABEL_46;
        v24 += 7;
        v14 = v25++ >= 9;
        if (v14)
        {
          LODWORD(v20) = 0;
          goto LABEL_48;
        }
      }
      v3[*v6] = 1;
LABEL_46:
      if (v3[*v6])
        LODWORD(v20) = 0;
LABEL_48:
      v33 = 28;
      goto LABEL_49;
    }
LABEL_51:
    v34 = v3[*v6] == 0;
  }
  else
  {
LABEL_52:
    v34 = 0;
  }
  objc_sync_exit(v3);

  return v34;
}

void sub_18861224C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOURLInfoSetReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 476))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOURLInfoSetReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 480));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 472) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 476) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOURLInfoSetReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOURLInfoSetReadAllFrom_initialTag;
  Specified = GEOURLInfoSetReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOURLInfoSetCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 480));
  return Specified;
}

void sub_188612528(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886129B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_188613B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

uint64_t GEODataURLSessionGetIdentifierFromSession(void *a1)
{
  void *v1;
  void *v2;
  unsigned __int8 v3;
  uint64_t v4;
  unint64_t v6;

  objc_msgSend(a1, "sessionDescription");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0CB3900], "scannerWithString:", v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setCharactersToBeSkipped:", 0);
    v6 = 0;
    if (objc_msgSend(v2, "scanString:intoString:", CFSTR("["), 0)
      && objc_msgSend(v2, "scanUnsignedLongLong:", &v6))
    {
      v3 = objc_msgSend(v2, "scanString:intoString:", CFSTR("]"), 0);
      if ((v3 & (HIDWORD(v6) == 0)) != 0)
        v4 = v6;
      else
        v4 = 0;
    }
    else
    {
      v4 = 0;
    }

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_1886142A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  os_activity_scope_leave(&a9);
  _Unwind_Resume(a1);
}

void sub_1886144C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188614854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188614AB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t bodySizeEstimateFromResponse(void *a1)
{
  void *v1;
  void *v2;
  _xlocale *v3;
  int v4;
  uint64_t v5;
  uint64_t v7;

  objc_msgSend(a1, "allHeaderFields");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("Content-Length"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    v3 = newlocale(63, 0, 0);
    v7 = 0;
    v4 = sscanf_l((const char *)objc_msgSend(objc_retainAutorelease(v2), "UTF8String"), v3, "%zu", &v7);
    freelocale(v3);
    if (v4 == 1)
      v5 = v7;
    else
      v5 = 0;
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_1886150FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void _recursivelyClearAllRelatedOperations(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = a1;
  objc_msgSend(v1, "baseTile");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "localizationTile");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "clearAllRelatedOperations");

  if (v3)
    _recursivelyClearAllRelatedOperations(v3);
  if (v2)
    _recursivelyClearAllRelatedOperations(v2);

}

id `anonymous namespace'::isolation(_anonymous_namespace_ *this)
{
  if (qword_1ECDBC3B8 != -1)
    dispatch_once(&qword_1ECDBC3B8, &__block_literal_global_132);
  return (id)qword_1ECDBC3B0;
}

void sub_188615B74(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_188616BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  uint64_t v13;
  void *v14;
  void *v15;
  void *v17;

  v17 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v17;
    operator delete(v17);
  }

  MEMORY[0x18D76437C](v13, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

void sub_188616F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _GEOReadStoredCountryCodeWithFallback()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;

  +[_GEOCountryConfigurationInfo get]();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    v2 = v0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectForKey:", *MEMORY[0x1E0C997B0]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    +[_GEOCountryConfigurationInfo countryCode:source:]((uint64_t)_GEOCountryConfigurationInfo, v4, 0x103u);
    v2 = (id)objc_claimAutoreleasedReturnValue();

  }
  return v2;
}

void sub_1886174A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

xpc_connection_t __defaultGEODaemonXPCConnectionCreationBlock_block_invoke(int a1, NSObject *a2, char *name)
{
  xpc_connection_t mach_service;
  int foreground_uid;
  NSObject *v5;
  uint8_t buf[4];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  mach_service = xpc_connection_create_mach_service(name, a2, 0);
  if (xpc_user_sessions_enabled())
  {
    foreground_uid = xpc_user_sessions_get_foreground_uid();
    GEOFindOrCreateLog("com.apple.GeoServices", "GEOXPC");
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v8 = foreground_uid;
      _os_log_impl(&dword_1885A9000, v5, OS_LOG_TYPE_DEBUG, "using xpc foreground uid %d", buf, 8u);
    }

    xpc_connection_set_target_user_session_uid();
  }
  return mach_service;
}

os_log_t GEOFindOrCreateLog(const char *a1, const char *a2)
{
  uint64_t v4;
  const char **v5;
  os_log_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  os_log_t *v10;

  os_unfair_lock_lock_with_options();
  v4 = logsCount;
  if (!logsCount)
    goto LABEL_6;
  v5 = (const char **)(logs + 16);
  while (*(v5 - 1) != a1 || *v5 != a2)
  {
    v5 += 3;
    if (!--v4)
      goto LABEL_6;
  }
  v6 = (os_log_t)*(v5 - 2);
  if (!v6)
  {
LABEL_6:
    v6 = os_log_create(a1, a2);
    v7 = logsCapacity;
    v8 = logsCount;
    v9 = (char *)logs;
    if (logsCapacity <= (unint64_t)logsCount)
    {
      logsCapacity += 31;
      v9 = (char *)malloc_type_realloc((void *)logs, 24 * (v7 + 31), 0xD00405A9F8827uLL);
      logs = (uint64_t)v9;
      v8 = logsCount;
    }
    v10 = (os_log_t *)&v9[24 * v8];
    v10[1] = (os_log_t)a1;
    v10[2] = (os_log_t)a2;
    *v10 = v6;
    logsCount = v8 + 1;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&GEOFindOrCreateLog_lock);
  return v6;
}

uint64_t geo::codec::decodeZoomRanks(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  float v17;
  uint64_t i;
  uint64_t v19;
  uint64_t result;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  float v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  float v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  float v43;
  uint64_t v44;

  v3 = a1[2];
  v4 = v3 + 1;
  v5 = 8 * a1[1];
  if (v3 + 1 <= v5)
  {
    v9 = *a1;
    v10 = *(unsigned __int8 *)(*a1 + (v3 >> 3));
    a1[2] = v4;
    if (((v10 >> (~(_BYTE)v3 & 7)) & 1) == 0)
    {
      if (a2)
      {
        for (i = 0; i != a2; ++i)
        {
          v44 = i;
          v43 = 100.0;
          v19 = *(_QWORD *)(a3 + 24);
          if (!v19)
LABEL_55:
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, uint64_t *, float *))(*(_QWORD *)v19 + 48))(v19, &v44, &v43);
        }
      }
      return 1;
    }
    if (v3 + 6 > v5)
      return 0;
    v11 = 0;
    v12 = 5;
    do
    {
      v13 = 8 - (v4 & 7);
      if (v12 < v13)
        v13 = v12;
      v11 = (*(unsigned __int8 *)(v9 + (v4 >> 3)) >> (8 - (v4 & 7) - v13)) & ~(-1 << v13) | (v11 << v13);
      v4 += v13;
      a1[2] = v4;
      v12 -= v13;
    }
    while (v12);
    v14 = (v11 + 1);
    if (v4 + v14 > v5)
      return 0;
    if (v11 != -1)
    {
      v15 = 0;
      do
      {
        v16 = 8 - (v4 & 7);
        if (v14 < v16)
          v16 = v14;
        v15 = (*(unsigned __int8 *)(v9 + (v4 >> 3)) >> (8 - (v4 & 7) - v16)) & ~(-1 << v16) | (v15 << v16);
        v4 += v16;
        a1[2] = v4;
        v14 -= v16;
      }
      while (v14);
      v17 = (float)v15;
      if (v4 + 5 > v5)
        return 0;
      goto LABEL_22;
    }
    v17 = 0.0;
    if (v4 + 5 <= v5)
    {
LABEL_22:
      v21 = 0;
      v22 = 5;
      do
      {
        v23 = 8 - (v4 & 7);
        if (v22 < v23)
          v23 = v22;
        v21 = (*(unsigned __int8 *)(v9 + (v4 >> 3)) >> (8 - (v4 & 7) - v23)) & ~(-1 << v23) | (v21 << v23);
        v4 += v23;
        a1[2] = v4;
        v22 -= v23;
      }
      while (v22);
      v24 = (v21 + 1);
      if (v4 + v24 > v5)
        return 0;
      if (v21 == -1)
      {
        v27 = 0.0;
      }
      else
      {
        v25 = 0;
        do
        {
          v26 = 8 - (v4 & 7);
          if (v24 < v26)
            v26 = v24;
          v25 = (*(unsigned __int8 *)(v9 + (v4 >> 3)) >> (8 - (v4 & 7) - v26)) & ~(-1 << v26) | (v25 << v26);
          v4 += v26;
          a1[2] = v4;
          v24 -= v26;
        }
        while (v24);
        v27 = (float)v25;
      }
      if (v4 + 5 > v5)
        return 0;
      v28 = 0;
      v29 = 5;
      do
      {
        v30 = 8 - (v4 & 7);
        if (v29 < v30)
          v30 = v29;
        v28 = (*(unsigned __int8 *)(v9 + (v4 >> 3)) >> (8 - (v4 & 7) - v30)) & ~(-1 << v30) | (v28 << v30);
        v4 += v30;
        a1[2] = v4;
        v29 -= v30;
      }
      while (v29);
      if (a2)
      {
        v31 = 0;
        v32 = (v28 + 1);
        v33 = 1.0 / v17;
        while (1)
        {
          v34 = a1[2];
          v35 = v34 + 1;
          v36 = 8 * a1[1];
          if (v34 + 1 > v36)
            return 0;
          v37 = *a1;
          v38 = *(unsigned __int8 *)(*a1 + (v34 >> 3));
          a1[2] = v35;
          if (((v38 >> (~(_BYTE)v34 & 7)) & 1) != 0)
          {
            if (v35 + v32 > v36)
              return 0;
            v39 = 0;
            if ((_DWORD)v32)
            {
              v40 = v32;
              do
              {
                v41 = 8 - (v35 & 7);
                if (v40 < v41)
                  v41 = v40;
                v39 = (*(unsigned __int8 *)(v37 + (v35 >> 3)) >> (8 - (v35 & 7) - v41)) & ~(-1 << v41) | (v39 << v41);
                v35 += v41;
                a1[2] = v35;
                v40 -= v41;
              }
              while (v40);
            }
            v44 = v31;
            v43 = (float)(v27 + (float)v39) * v33;
          }
          else
          {
            v44 = v31;
            v43 = 100.0;
          }
          v42 = *(_QWORD *)(a3 + 24);
          if (!v42)
            goto LABEL_55;
          (*(void (**)(uint64_t, uint64_t *, float *))(*(_QWORD *)v42 + 48))(v42, &v44, &v43);
          ++v31;
          result = 1;
          if (v31 == a2)
            return result;
        }
      }
      return 1;
    }
  }
  return 0;
}

uint64_t MapsFeature_IsEnabled_ShelbyvilleTerrain()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_ShelbyvilleTerrain, (uint64_t)off_1EDF4AFF8);
}

uint64_t AddrObjGoogle::protobuf::InsertIfNotPresent<std::map<std::string,std::pair<void const*,int>>,std::string,std::pair<void const*,int>>(uint64_t **a1, uint64_t a2, __int128 *a3)
{
  char v5;
  char v6;
  std::string __p;
  __int128 v9;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v9 = *a3;
  std::__tree<std::__value_type<std::string,std::pair<void const*,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<void const*,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<void const*,int>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<void const*,int>>>(a1, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  v6 = v5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6 & 1;
}

void sub_188617D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::AddFile(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string *v6;
  std::string *v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  std::string::size_type size;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void *__p[2];
  char v21;
  std::string v22;
  __int128 v23;

  *(_QWORD *)&v23 = a3;
  *((_QWORD *)&v23 + 1) = a4;
  if ((AddrObjGoogle::protobuf::InsertIfNotPresent<std::map<std::string,std::pair<void const*,int>>,std::string,std::pair<void const*,int>>(a1, *(_QWORD *)(a2 + 16), &v23) & 1) == 0)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)&v22, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/descriptor_database.cc", 58);
    v6 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(&v22, "File already exists in database: ");
    v7 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v6, *(const std::string::value_type **)(a2 + 16));
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)__p, (AddrObjGoogle::protobuf::internal::LogMessage *)v7);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v22.__r_.__value_.__l.__data_);
    return 0;
  }
  if ((*(_BYTE *)(a2 + 204) & 2) != 0)
  {
    v9 = *(__int128 **)(a2 + 24);
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v22.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
    }
  }
  else
  {
    memset(&v22, 0, sizeof(v22));
  }
  size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v22.__r_.__value_.__l.__size_;
  if (size)
    std::string::push_back(&v22, 46);
  if (*(int *)(a2 + 96) < 1)
  {
LABEL_19:
    if (*(int *)(a2 + 120) < 1)
    {
LABEL_25:
      if (*(int *)(a2 + 168) < 1)
      {
LABEL_32:
        if (*(int *)(a2 + 144) < 1)
        {
          v8 = 1;
        }
        else
        {
          v18 = 0;
          do
          {
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v22.__r_.__value_.__l.__data_, *(const void ***)(*(_QWORD *)(*(_QWORD *)(a2 + 136) + 8 * v18) + 16), (uint64_t)__p);
            v8 = AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::AddSymbol((uint64_t)a1, (uint64_t)__p, v23, *((uint64_t *)&v23 + 1));
            if (v21 < 0)
              operator delete(__p[0]);
            if ((v8 & 1) == 0)
              break;
            ++v18;
          }
          while (v18 < *(int *)(a2 + 144));
        }
        goto LABEL_40;
      }
      v16 = 0;
      while (1)
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v22.__r_.__value_.__l.__data_, *(const void ***)(*(_QWORD *)(*(_QWORD *)(a2 + 160) + 8 * v16) + 16), (uint64_t)__p);
        v17 = AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::AddSymbol((uint64_t)a1, (uint64_t)__p, v23, *((uint64_t *)&v23 + 1));
        if (v21 < 0)
          operator delete(__p[0]);
        if ((v17 & 1) == 0
          || (AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::AddExtension((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(a2 + 160) + 8 * v16), v23, *((uint64_t *)&v23 + 1)) & 1) == 0)
        {
          break;
        }
        if (++v16 >= *(int *)(a2 + 168))
          goto LABEL_32;
      }
    }
    else
    {
      v14 = 0;
      while (1)
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v22.__r_.__value_.__l.__data_, *(const void ***)(*(_QWORD *)(*(_QWORD *)(a2 + 112) + 8 * v14) + 16), (uint64_t)__p);
        v15 = AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::AddSymbol((uint64_t)a1, (uint64_t)__p, v23, *((uint64_t *)&v23 + 1));
        if (v21 < 0)
          operator delete(__p[0]);
        if ((v15 & 1) == 0)
          break;
        if (++v14 >= *(int *)(a2 + 120))
          goto LABEL_25;
      }
    }
  }
  else
  {
    v12 = 0;
    while (1)
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v22.__r_.__value_.__l.__data_, *(const void ***)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 8 * v12) + 16), (uint64_t)__p);
      v13 = AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::AddSymbol((uint64_t)a1, (uint64_t)__p, v23, *((uint64_t *)&v23 + 1));
      if (v21 < 0)
        operator delete(__p[0]);
      if ((v13 & 1) == 0
        || (AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::AddNestedExtensions((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8 * v12), v23, *((uint64_t *)&v23 + 1)) & 1) == 0)
      {
        break;
      }
      if (++v12 >= *(int *)(a2 + 96))
        goto LABEL_19;
    }
  }
  v8 = 0;
LABEL_40:
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v8;
}

void sub_188618018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::AddNestedExtensions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  if (*(int *)(a2 + 80) < 1)
  {
LABEL_5:
    if (*(int *)(a2 + 56) < 1)
    {
      return 1;
    }
    else
    {
      v9 = 0;
      do
      {
        result = AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::AddExtension(a1, *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v9), a3, a4);
        if ((result & 1) == 0)
          break;
        ++v9;
      }
      while (v9 < *(int *)(a2 + 56));
    }
  }
  else
  {
    v8 = 0;
    while ((AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::AddNestedExtensions(a1, *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8 * v8), a3, a4) & 1) != 0)
    {
      if (++v8 >= *(int *)(a2 + 80))
        goto LABEL_5;
    }
    return 0;
  }
  return result;
}

uint64_t AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::AddSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *LastLessOrEqual;
  _QWORD *v9;
  const std::string::value_type *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  std::string *v22;
  std::string *v23;
  std::string *v24;
  std::string *v25;
  std::string *v26;
  char v27;
  std::string v28;
  uint64_t v29;
  uint64_t v30;

  if (!AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::ValidateSymbolName(a1, (uint64_t *)a2))
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)&v28, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/descriptor_database.cc", 95);
    v16 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(&v28, "Invalid symbol name: ");
    v17 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v16, (const std::string::value_type *)a2);
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v27, (AddrObjGoogle::protobuf::internal::LogMessage *)v17);
    goto LABEL_6;
  }
  LastLessOrEqual = AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::FindLastLessOrEqual(a1, (const void **)a2);
  if ((_QWORD *)(a1 + 32) == LastLessOrEqual)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v28 = *(std::string *)a2;
    v29 = a3;
    v30 = a4;
    std::__tree<std::__value_type<std::string,std::pair<void const*,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<void const*,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<void const*,int>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<void const*,int>>>((uint64_t **)(a1 + 24), (const void **)&v28.__r_.__value_.__l.__data_, (uint64_t)&v28);
  }
  else
  {
    v9 = LastLessOrEqual;
    v10 = (const std::string::value_type *)(LastLessOrEqual + 4);
    if (AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::IsSubSymbol(a1, (unsigned __int8 *)LastLessOrEqual + 32, (unsigned __int8 *)a2))
    {
      AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)&v28, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/descriptor_database.cc", 110);
      v11 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(&v28, "Symbol name \"");
      v12 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v11, (const std::string::value_type *)a2);
      v13 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v12, "\" conflicts with the existing symbol \"");
      v14 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v13, v10);
      v15 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v14, "\".");
      AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v27, (AddrObjGoogle::protobuf::internal::LogMessage *)v15);
LABEL_6:
      AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v28.__r_.__value_.__l.__data_);
      return 0;
    }
    v19 = (_QWORD *)v9[1];
    if (v19)
    {
      do
      {
        v20 = v19;
        v19 = (_QWORD *)*v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        v20 = (_QWORD *)v9[2];
        v21 = *v20 == (_QWORD)v9;
        v9 = v20;
      }
      while (!v21);
    }
    if (v20 != (_QWORD *)(a1 + 32)
      && AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::IsSubSymbol(a1, (unsigned __int8 *)a2, (unsigned __int8 *)v20 + 32))
    {
      AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)&v28, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/descriptor_database.cc", 123);
      v22 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(&v28, "Symbol name \"");
      v23 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v22, (const std::string::value_type *)a2);
      v24 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v23, "\" conflicts with the existing symbol \"");
      v25 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v24, (const std::string::value_type *)v20 + 32);
      v26 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v25, "\".");
      AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v27, (AddrObjGoogle::protobuf::internal::LogMessage *)v26);
      goto LABEL_6;
    }
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v28 = *(std::string *)a2;
    v29 = a3;
    v30 = a4;
    std::__tree<std::__value_type<std::string,std::pair<void const*,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<void const*,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<void const*,int>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::pair<void const*,int>>>((uint64_t **)(a1 + 24), v20, (const void **)&v28.__r_.__value_.__l.__data_, (uint64_t)&v28);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1886183C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage(&__p);
  _Unwind_Resume(a1);
}

BOOL AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::IsSubSymbol(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  size_t v5;
  size_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  size_t v13;
  _BOOL8 result;
  const void *v15;
  const void *v16;
  int v17;
  unsigned __int8 *v18;

  v5 = a2[23];
  v6 = *((_QWORD *)a2 + 1);
  if ((v5 & 0x80u) == 0)
    v7 = a2[23];
  else
    v7 = *((_QWORD *)a2 + 1);
  v8 = a3[23];
  v9 = *((_QWORD *)a3 + 1);
  if ((v8 & 0x80u) == 0)
    v10 = a3[23];
  else
    v10 = *((_QWORD *)a3 + 1);
  if (v7 != v10)
    goto LABEL_17;
  if ((v8 & 0x80u) == 0)
    v11 = a3;
  else
    v11 = *(unsigned __int8 **)a3;
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v11, v6))
    {
LABEL_21:
      if (v10 < v6)
        return 0;
      goto LABEL_22;
    }
    return 1;
  }
  if (!(_DWORD)v5)
    return 1;
  v12 = a2;
  v13 = v5;
  while (*v12 == *v11)
  {
    ++v12;
    ++v11;
    if (!--v13)
      return 1;
  }
LABEL_17:
  if ((v5 & 0x80) != 0)
    goto LABEL_21;
  v6 = v5;
  if (v10 < v5)
    return 0;
LABEL_22:
  if ((v8 & 0x80) != 0)
  {
    if (v6 != -1)
    {
      if (v9 >= v6)
        v9 = v6;
      v15 = *(const void **)a3;
      goto LABEL_33;
    }
LABEL_43:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v6 == -1)
    goto LABEL_43;
  if (v8 >= v6)
    v9 = v6;
  else
    v9 = v8;
  v15 = a3;
LABEL_33:
  if ((v5 & 0x80u) == 0)
    v16 = a2;
  else
    v16 = *(const void **)a2;
  v17 = memcmp(v15, v16, v9);
  result = 0;
  if (v9 == v6 && !v17)
  {
    if ((v8 & 0x80u) == 0)
      v18 = a3;
    else
      v18 = *(unsigned __int8 **)a3;
    return v18[v7] == 46;
  }
  return result;
}

BOOL AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::ValidateSymbolName(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  int v3;
  uint64_t v4;
  BOOL v5;
  uint64_t *v6;
  int v7;

  v2 = *((unsigned __int8 *)a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  if (v2)
  {
    v4 = 0;
    v5 = 0;
    if (v3 >= 0)
      v6 = a2;
    else
      v6 = (uint64_t *)*a2;
    do
    {
      v7 = *((unsigned __int8 *)v6 + v4);
      if (v7 != 46
        && v7 != 95
        && (v7 - 58) <= 0xFFFFFFF5
        && *((unsigned __int8 *)v6 + v4) - 91 <= 0xFFFFFFE5
        && *((unsigned __int8 *)v6 + v4) - 123 < 0xFFFFFFE6)
      {
        break;
      }
      v5 = v2 <= ++v4;
    }
    while (v2 != v4);
  }
  else
  {
    return 1;
  }
  return v5;
}

uint64_t *std::__tree<std::__value_type<std::string,std::pair<void const*,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<void const*,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<void const*,int>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::pair<void const*,int>>>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::pair<void const*,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<void const*,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<void const*,int>>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,std::pair<void const*,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<void const*,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<void const*,int>>>>::__construct_node<std::pair<std::string const,std::pair<void const*,int>>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

__n128 std::__tree<std::__value_type<std::string,std::pair<void const*,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<void const*,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<void const*,int>>>>::__construct_node<std::pair<std::string const,std::pair<void const*,int>>>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __n128 result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v6 + 56) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1886186F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<void const*,int>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

const void **std::__tree<std::__value_type<std::string,std::pair<void const*,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<void const*,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<void const*,int>>>>::__find_equal<std::string>(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  const void **v9;
  const void **v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;
  uint64_t *v16;
  BOOL v17;
  const void **v18;

  v9 = (const void **)(a1 + 1);
  if (a1 + 1 == a2 || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = (const void **)a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = (const void **)a2;
        return (const void **)a2;
      }
    }
    v11 = (const void **)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (const void **)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (const void **)v16[2];
        v17 = *v12 == v16;
        v16 = (uint64_t *)v12;
      }
      while (v17);
    }
    if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return (const void **)std::__tree<std::__value_type<std::string,std::pair<void const*,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<void const*,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<void const*,int>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (const void **)a2[1];
      do
      {
        v15 = v14;
        v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = (const void **)a2;
      do
      {
        v15 = (const void **)v18[2];
        v17 = *v15 == v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4))
        return (const void **)std::__tree<std::__value_type<std::string,std::pair<void const*,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<void const*,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<void const*,int>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  *a3 = (const void **)a2;
  *a4 = (uint64_t)a2;
  return (const void **)a4;
}

_QWORD *AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::FindLastLessOrEqual(uint64_t a1, const void **a2)
{
  _QWORD *v3;
  uint64_t v4;
  _BOOL4 v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *result;
  BOOL v10;

  v3 = (_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    do
    {
      v6 = std::less<std::string>::operator()[abi:ne180100](a1 + 40, a2, (const void **)(v4 + 32));
      v7 = (uint64_t *)(v4 + 8);
      if (v6)
      {
        v7 = (uint64_t *)v4;
        v3 = (_QWORD *)v4;
      }
      v4 = *v7;
    }
    while (*v7);
  }
  if (v3 == *(_QWORD **)(a1 + 24))
    return v3;
  v8 = (_QWORD *)*v3;
  if (*v3)
  {
    do
    {
      result = v8;
      v8 = (_QWORD *)v8[1];
    }
    while (v8);
  }
  else
  {
    do
    {
      result = (_QWORD *)v3[2];
      v10 = *result == (_QWORD)v3;
      v3 = result;
    }
    while (v10);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::pair<void const*,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<void const*,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<void const*,int>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::pair<void const*,int>>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::pair<void const*,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<void const*,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<void const*,int>>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<std::string,std::pair<void const*,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<void const*,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<void const*,int>>>>::__construct_node<std::pair<std::string const,std::pair<void const*,int>>>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<std::string,std::pair<void const*,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<void const*,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<void const*,int>>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::AddExtension(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t **v7;
  int v8;
  char v9;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string __p;
  int v19;
  std::string v20;
  __int128 v21;
  char v22;

  *(_QWORD *)&v21 = a3;
  *((_QWORD *)&v21 + 1) = a4;
  v5 = *(_QWORD *)(a2 + 40);
  if (*(char *)(v5 + 23) < 0)
  {
    if (!*(_QWORD *)(v5 + 8))
      return 1;
    v6 = *(_BYTE **)v5;
  }
  else
  {
    v6 = (_BYTE *)v5;
    if (!*(_BYTE *)(v5 + 23))
      return 1;
  }
  if (*v6 != 46)
    return 1;
  v7 = (uint64_t **)(a1 + 48);
  std::string::basic_string(&v20, (const std::string *)v5, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v22);
  v8 = *(_DWORD *)(a2 + 24);
  __p = v20;
  memset(&v20, 0, sizeof(v20));
  v19 = v8;
  v9 = AddrObjGoogle::protobuf::InsertIfNotPresent<std::map<std::pair<std::string,int>,std::pair<void const*,int>>,std::pair<std::string,int>,std::pair<void const*,int>>(v7, (uint64_t)&__p, &v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((v9 & 1) != 0)
      return 1;
  }
  else if ((v9 & 1) != 0)
  {
    return 1;
  }
  AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/descriptor_database.cc", 161);
  v11 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(&__p, "Extension conflicts with extension already in database: extend ");
  v12 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v11, *(const std::string::value_type **)(a2 + 40));
  v13 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v12, " { ");
  v14 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v13, *(const std::string::value_type **)(a2 + 16));
  v15 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v14, " = ");
  v16 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v15, *(_DWORD *)(a2 + 24));
  v17 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v16, " }");
  AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v20, (AddrObjGoogle::protobuf::internal::LogMessage *)v17);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_188618BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage(&__p);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::InsertIfNotPresent<std::map<std::pair<std::string,int>,std::pair<void const*,int>>,std::pair<std::string,int>,std::pair<void const*,int>>(uint64_t **a1, uint64_t a2, __int128 *a3)
{
  char v6;
  char v7;
  std::string __p;
  int v10;
  __int128 v11;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v10 = *(_DWORD *)(a2 + 24);
  v11 = *a3;
  std::__tree<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::__map_value_compare<std::pair<std::string,int>,std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::less<std::pair<std::string,int>>,true>,std::allocator<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>>>::__emplace_unique_key_args<std::pair<std::string,int>,std::pair<std::pair<std::string,int> const,std::pair<void const*,int>>>(a1, (const void **)&__p.__r_.__value_.__l.__data_, (__int128 *)&__p);
  v7 = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7 & 1;
}

void sub_188618C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::__map_value_compare<std::pair<std::string,int>,std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::less<std::pair<std::string,int>>,true>,std::allocator<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>>>::__emplace_unique_key_args<std::pair<std::string,int>,std::pair<std::pair<std::string,int> const,std::pair<void const*,int>>>(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::__map_value_compare<std::pair<std::string,int>,std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::less<std::pair<std::string,int>>,true>,std::allocator<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>>>::__find_equal<std::pair<std::string,int>>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::__map_value_compare<std::pair<std::string,int>,std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::less<std::pair<std::string,int>>,true>,std::allocator<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>>>::__construct_node<std::pair<std::pair<std::string,int> const,std::pair<void const*,int>>>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

std::string *std::__tree<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::__map_value_compare<std::pair<std::string,int>,std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::less<std::pair<std::string,int>>,true>,std::allocator<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>>>::__construct_node<std::pair<std::pair<std::string,int> const,std::pair<void const*,int>>>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::pair<std::string,int> const,std::pair<void const*,int>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_188618D8C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<void const*,int>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::__map_value_compare<std::pair<std::string,int>,std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::less<std::pair<std::string,int>>,true>,std::allocator<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>>>::__find_equal<std::pair<std::string,int>>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::pair<std::string,int>>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::pair<std::string,int>>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void sub_1886191F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188619348(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188619480(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void ___ZZ90__GEOTileLoader__loadedTileForLocalKey_preliminary_quickly_tileDecoder_data_disburseTile__ENK3__7clERKN8LoadItem9RequesterE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  __int128 v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a1 + 40);
  v1 = *(_QWORD *)(a1 + 32);
  _cacheMissErr();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD, void *, _QWORD))(v1 + 16))(v1, &v3, 0, 0, v2, 0);

}

void sub_188619534(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id _cacheMissErr(void)
{
  if (qword_1ECDBB838 != -1)
    dispatch_once(&qword_1ECDBB838, &__block_literal_global_412);
  return (id)qword_1ECDBB830;
}

void sub_188619658(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188619738(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886198EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886199A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOAttributionReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 124))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOAttributionReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 128));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 120) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 124) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOAttributionReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOAttributionReadAllFrom_initialTag;
  Specified = GEOAttributionReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOAttributionCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
  return Specified;
}

void sub_188619B34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOAttributionReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint16x4_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  unsigned __int8 v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  BOOL v30;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  int v43;
  GEOResource *v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  void *v56;
  char v57;
  uint64_t v58;
  __int16 v59;
  int v60;
  __int16 v61;
  void *v62;
  int v64;
  char v65;
  char v66;
  char v67;
  char v68;
  BOOL v69;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 124);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 120));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 140));
  v13 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16(v12, (uint16x4_t)0xFFF4FFF8FFFBFFF9), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 140) >> 4) & 1)+ ((*(_WORD *)(a1 + 140) >> 6) & 1)+ ((*(_WORD *)(a1 + 140) >> 11) & 1))+ (unsigned __int16)vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16(v12, (uint16x4_t)0xFFFEFFF7FFF6FFFDLL), (int8x8_t)0x1000100010001));
  while (2)
  {
    v14 = 1;
    v15 = 1;
    v16 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v15 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v17 = v13 > 7;
        v18 = v17 & ~(_BYTE)v11 | v9;
        v19 = v17 | v11;
        v66 = v18;
        v67 = v19 | v18;
        v65 = v8;
        if (((v19 | v8) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v68 = (v20 == 0) | v19;
        v69 = v19;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v13;
LABEL_7:
        v14 = v9;
LABEL_8:
        v15 = v10;
        v16 = v11;
LABEL_10:
        ++v7;
        v9 = v14;
        v10 = v15;
        v11 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_126;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v28 + 1;
      v26 |= (unint64_t)(v29 & 0x7F) << v24;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      v30 = v25++ >= 9;
      if (v30)
      {
        v26 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v31 || (v26 & 7) == 4)
    {
LABEL_126:
      v64 = 1;
      goto LABEL_127;
    }
    v33 = v26 >> 3;
    v34 = v69;
    if ((v68 & 1) == 0)
    {
      v35 = v20;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34)
          goto LABEL_96;
        if ((*(_WORD *)(a1 + 140) & 0x20) == 0)
        {
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 56;
          goto LABEL_95;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_150;
        v59 = *(_WORD *)(a1 + 140) << 10;
        goto LABEL_123;
      case 2:
        if (!v34)
          goto LABEL_96;
        if ((*(_WORD *)(a1 + 140) & 0x80) == 0)
        {
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 72;
          goto LABEL_95;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_150;
        v59 = *(_WORD *)(a1 + 140) << 8;
        goto LABEL_123;
      case 3:
        if (!v34)
          goto LABEL_96;
        if ((*(_WORD *)(a1 + 140) & 0x100) == 0)
        {
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 80;
          goto LABEL_95;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_150;
        v59 = *(_WORD *)(a1 + 140) << 7;
        goto LABEL_123;
      case 4:
        if (!v34)
          goto LABEL_96;
        if ((*(_WORD *)(a1 + 140) & 0x1000) == 0)
        {
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 112;
          goto LABEL_95;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_150;
        v59 = 8 * *(_WORD *)(a1 + 140);
        goto LABEL_123;
      case 5:
        if (!v34)
          goto LABEL_96;
        if ((*(_WORD *)(a1 + 140) & 0x10) == 0)
        {
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 48;
          goto LABEL_95;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_150;
        v59 = *(_WORD *)(a1 + 140) << 11;
        goto LABEL_123;
      case 6:
        if (!v34)
          goto LABEL_96;
        if ((*(_WORD *)(a1 + 140) & 0x40) == 0)
        {
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 64;
          goto LABEL_95;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_150;
        v59 = *(_WORD *)(a1 + 140) << 9;
        goto LABEL_123;
      case 7:
        if (!v34 || (*(_WORD *)(a1 + 140) & 0x800) != 0)
          goto LABEL_96;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_150;
        v44 = objc_alloc_init(GEOResource);
        if (GEOResourceReadAllFrom((uint64_t)v44, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          -[GEOAttribution _addNoFlagsResource:](a1, v44);

LABEL_124:
          v22 = (int *)MEMORY[0x1E0D82BC8];
          v23 = (int *)MEMORY[0x1E0D82BB8];
LABEL_125:
          if (!(v67 & 1 | (v7 != 0)))
            goto LABEL_126;
          continue;
        }

LABEL_150:
        v64 = 0;
        v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_127:
        if ((v66 & 1) != 0)
LABEL_128:
          *(_WORD *)(a1 + 140) |= 4u;
        if (v69 || (v64 & 1) == 0)
        {
          *(_WORD *)(a1 + 140) |= 0x20u;
          *(_WORD *)(a1 + 140) |= 0x80u;
          *(_WORD *)(a1 + 140) |= 0x100u;
          *(_WORD *)(a1 + 140) |= 0x1000u;
          *(_WORD *)(a1 + 140) |= 0x10u;
          *(_WORD *)(a1 + 140) |= 0x40u;
          *(_WORD *)(a1 + 140) |= 0x800u;
          *(_WORD *)(a1 + 140) |= 8u;
          *(_WORD *)(a1 + 140) |= 0x400u;
          *(_WORD *)(a1 + 140) |= 0x200u;
        }
        else if (v20)
        {
          while (1)
          {
            v60 = *v20++;
            v61 = 32;
            switch(v60)
            {
              case 0:
                goto LABEL_143;
              case 1:
                goto LABEL_142;
              case 2:
                v61 = 128;
                goto LABEL_142;
              case 3:
                v61 = 256;
                goto LABEL_142;
              case 4:
                v61 = 4096;
                goto LABEL_142;
              case 5:
                v61 = 16;
                goto LABEL_142;
              case 6:
                v61 = 64;
                goto LABEL_142;
              case 7:
                v61 = 2048;
                goto LABEL_142;
              case 8:
                v61 = 8;
                goto LABEL_142;
              case 11:
                v61 = 1024;
                goto LABEL_142;
              case 12:
                v61 = 512;
LABEL_142:
                *(_WORD *)(a1 + 140) |= v61;
                break;
              default:
                continue;
            }
          }
        }
LABEL_143:
        if (v64)
          v3 = *(_BYTE *)(v3 + *v22) == 0;
        else
          v3 = 0;
        if (v69)
        {
          v62 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 8:
        if (!v34 || (*(_WORD *)(a1 + 140) & 8) != 0)
          goto LABEL_96;
        if (!PBReaderPlaceMark())
          goto LABEL_150;
        -[GEOAttribution _reserveRegions:](a1, 1uLL);
        if (!GEOTileSetRegionReadAllFrom((_DWORD *)(*(_QWORD *)(a1 + 24) + 24 * *(_QWORD *)(a1 + 32)), v3))
          goto LABEL_150;
        PBReaderRecallMark();
        ++*(_QWORD *)(a1 + 32);
        goto LABEL_124;
      case 9:
        if ((v65 & 1) == 0)
          goto LABEL_96;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        *(_WORD *)(a1 + 140) |= 1u;
        while (2)
        {
          v48 = *v21;
          v49 = *(_QWORD *)(v3 + v48);
          if (v49 == -1 || v49 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v22) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v49);
            *(_QWORD *)(v3 + v48) = v49 + 1;
            v47 |= (unint64_t)(v50 & 0x7F) << v45;
            if (v50 < 0)
            {
              v45 += 7;
              v30 = v46++ >= 9;
              if (v30)
              {
                LODWORD(v47) = 0;
                goto LABEL_101;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v22))
          LODWORD(v47) = 0;
LABEL_101:
        v58 = 132;
        goto LABEL_106;
      case 10:
        if ((v65 & 1) == 0)
          goto LABEL_96;
        v51 = 0;
        v52 = 0;
        v47 = 0;
        *(_WORD *)(a1 + 140) |= 2u;
        while (2)
        {
          v53 = *v21;
          v54 = *(_QWORD *)(v3 + v53);
          if (v54 == -1 || v54 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v22) = 1;
          }
          else
          {
            v55 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v54);
            *(_QWORD *)(v3 + v53) = v54 + 1;
            v47 |= (unint64_t)(v55 & 0x7F) << v51;
            if (v55 < 0)
            {
              v51 += 7;
              v30 = v52++ >= 9;
              if (v30)
              {
                LODWORD(v47) = 0;
                goto LABEL_105;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v22))
          LODWORD(v47) = 0;
LABEL_105:
        v58 = 136;
LABEL_106:
        *(_DWORD *)(a1 + v58) = v47;
        goto LABEL_125;
      case 11:
        if (!v34)
          goto LABEL_96;
        if ((*(_WORD *)(a1 + 140) & 0x400) == 0)
        {
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 96;
          goto LABEL_95;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_150;
        v59 = 32 * *(_WORD *)(a1 + 140);
        goto LABEL_123;
      case 12:
        if (!v34)
          goto LABEL_96;
        if ((*(_WORD *)(a1 + 140) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_150;
          v59 = *(_WORD *)(a1 + 140) << 6;
LABEL_123:
          v7 += v59 >> 15;
        }
        else
        {
          PBReaderReadData();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 88;
LABEL_95:
          v56 = *(void **)(a1 + v40);
          *(_QWORD *)(a1 + v40) = v39;

          --v7;
        }
        goto LABEL_124;
      default:
        if ((v66 & 1) == 0 || (*(_WORD *)(a1 + 140) & 4) != 0)
        {
LABEL_96:
          v57 = PBReaderSkipValueWithTag();
          v23 = (int *)MEMORY[0x1E0D82BB8];
          v22 = (int *)MEMORY[0x1E0D82BC8];
          if ((v57 & 1) == 0)
          {
            v64 = 0;
            goto LABEL_127;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v41 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v42 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v41;

          }
          v43 = PBUnknownFieldAdd();
          v22 = (int *)MEMORY[0x1E0D82BC8];
          v23 = (int *)MEMORY[0x1E0D82BB8];
          if (!v43)
          {
            v64 = 0;
            goto LABEL_128;
          }
        }
        goto LABEL_125;
    }
  }
}

void sub_18861AC24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18861AE30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___initKeyChangeListeners_block_invoke_3(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;

  objc_msgSend(a2, "userInfo");
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("DeviceCountryCode"));
  v2 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v2, "isEqualToString:", qword_1ECDBC308) & 1) == 0)
  {
    _getValue(GeoServicesConfig_CountryProviders, (uint64_t)off_1EDF4CCA8, 1, 0, 0, 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (!objc_msgSend(v3, "count"))
    {
LABEL_9:

      goto LABEL_10;
    }
    if (qword_1ECDBC308)
    {
      objc_msgSend(v3, "objectForKeyedSubscript:");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      if (v2)
      {
LABEL_5:
        objc_msgSend(v3, "objectForKeyedSubscript:", v2);
        v5 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_8:
        GEOCalculateChangedKeys(v4, v5, 0);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(v2, "copy");
        v8 = (void *)qword_1ECDBC308;
        qword_1ECDBC308 = v7;

        _notifyListenersOfKeyChange(v6);
        goto LABEL_9;
      }
    }
    else
    {
      v4 = (void *)MEMORY[0x1E0C9AA70];
      if (v2)
        goto LABEL_5;
    }
    v5 = (void *)MEMORY[0x1E0C9AA70];
    goto LABEL_8;
  }
LABEL_10:

}

id GEOGetTileServerRemoteProxyLog()
{
  if (qword_1ECDBABF0 != -1)
    dispatch_once(&qword_1ECDBABF0, &__block_literal_global_70);
  return (id)_MergedGlobals_9;
}

id *GEODecodeModernXPCMessage(void *a1, objc_class *a2, uint64_t a3)
{
  id v6;
  void *v7;
  id *v8;

  v6 = a1;
  xpc_dictionary_get_value(v6, "__msg");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7 || (xpc_dictionary_get_value(v6, "userInfo"), (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v8 = (id *)objc_msgSend([a2 alloc], "initWithXPCDictionary:error:", v7, a3);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && v8)
      objc_storeStrong(v8 + 2, a1);

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

uint64_t getTileKeyFromXPCDictionary(_OWORD *a1, xpc_object_t xdict)
{
  uint64_t v3;
  void *v4;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  uint64_t v9;
  int v11;
  size_t length;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  xpc_dictionary_get_value(xdict, "tileKey");
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)v3;
  if (v3)
  {
    if (MEMORY[0x18D765A14](v3) == MEMORY[0x1E0C812E8])
    {
      if (xpc_data_get_length(v4) == 16)
      {
        *a1 = *(_OWORD *)xpc_data_get_bytes_ptr(v4);
        v9 = 1;
        goto LABEL_10;
      }
      GEOGetTileServerRemoteProxyLog();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v11 = 134217984;
        length = xpc_data_get_length(v4);
        v6 = "Received wrong length (%zu) for tileKey";
        v7 = v5;
        v8 = 12;
        goto LABEL_8;
      }
    }
    else
    {
      GEOGetTileServerRemoteProxyLog();
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v11) = 0;
        v6 = "Invalid tile key";
LABEL_7:
        v7 = v5;
        v8 = 2;
LABEL_8:
        _os_log_impl(&dword_1885A9000, v7, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v11, v8);
      }
    }
  }
  else
  {
    GEOGetTileServerRemoteProxyLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v11) = 0;
      v6 = "No tile key";
      goto LABEL_7;
    }
  }

  v9 = 0;
LABEL_10:

  return v9;
}

id _NSDictionarySafeDecodingCopy(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  int v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v21;
    v19 = *(_QWORD *)v21;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v21 != v6)
          objc_enumerationMutation(v3);
        v8 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * v7);
        objc_msgSend(v3, "objectForKey:", v8);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        {
          objc_msgSend(v2, "setObject:forKey:", v9, v8);
          goto LABEL_9;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v10 = v9;
          objc_msgSend(v10, "objectForKey:", CFSTR("_geo_SerializedError"));
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend(v10, "objectForKey:", CFSTR("_geo_SerializedError"));
            v12 = v2;
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v14 = objc_msgSend(v13, "BOOLValue");

            v2 = v12;
            v6 = v19;

            if (v14)
            {
              _geo_NSErrorFromDictionaryRepresentationCopy(v10);
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              if (!v15)
                goto LABEL_21;
              goto LABEL_20;
            }
          }
          else
          {

          }
          v15 = (void *)_NSDictionarySafeDecodingCopy(v10);
LABEL_20:
          objc_msgSend(v2, "setObject:forKey:", v15, v8);
LABEL_21:

          goto LABEL_9;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v16 = _NSArraySafeDecodingCopy(v9);
          objc_msgSend(v2, "setObject:forKey:", v16, v8);

        }
LABEL_9:

        ++v7;
      }
      while (v5 != v7);
      v17 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      v5 = v17;
    }
    while (v17);
  }

  return v2;
}

void ___initKeyChangeListeners_block_invoke_2(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  objc_msgSend(a2, "userInfo");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("keys"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  _notifyListenersOfKeyChange(v2);

}

void _notifyListenersOfKeyChange(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  id v17;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", objc_msgSend(v1, "count"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = ___notifyListenersOfKeyChange_block_invoke;
  v10[3] = &unk_1E1C107A8;
  v11 = v1;
  v4 = v2;
  v12 = v4;
  v5 = v10;
  v6 = qword_1ECDBC348;
  v7 = v1;
  if (v6 != -1)
    dispatch_once(&qword_1ECDBC348, &__block_literal_global_113);
  v13 = v3;
  v14 = 3221225472;
  v15 = ___withKeyListeners_block_invoke;
  v16 = &unk_1E1C01F48;
  v17 = v5;
  geo_isolate_sync();

  v9 = v4;
  v8 = v4;
  geo_dispatch_async_qos();

}

void sub_18861D4D0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(&stru_1ECDBBA64);
  _Unwind_Resume(a1);
}

void _GEOConfigPostKeysChangedNotification(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint8_t v7[8];
  _QWORD v8[2];
  _QWORD v9[3];

  v9[2] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (a2)
  {
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v8[0] = CFSTR("keys");
    v8[1] = CFSTR("options");
    v9[0] = v3;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v9[1] = v5;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v9, v8, 2);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "postNotificationName:object:userInfo:", CFSTR("_GEOConfigKeysChangedNotification"), 0, v6);

  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Assertion failed: options != GEOConfigOption_None", v7, 2u);
  }

}

void sub_18861D69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18861D8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t MapsFeature_IsAvailable_Maps298()
{
  return 1;
}

void ___registerStateCaptureCallbacks_block_invoke()
{
  _stateCaptureCallbackRegistration = 1;
  _GEOConfigRegisterStateCaptureFunctions(0, (uint64_t)_getConfigStoreStringKeysForStateCapture);
}

void ___registerStateCaptureCallbacks_block_invoke_0()
{
  _stateCaptureCallbackRegistration_0 = 1;
  _GEOConfigRegisterStateCaptureFunctions(0, (uint64_t)_getConfigStoreStringKeysForStateCapture_0);
}

void ___registerStateCaptureCallbacks_block_invoke_1()
{
  _stateCaptureCallbackRegistration_1 = 1;
  _GEOConfigRegisterStateCaptureFunctions((uint64_t)_getUserDefaultStringKeysForStateCapture, (uint64_t)_getConfigStoreStringKeysForStateCapture_1);
}

void ___registerStateCaptureCallbacks_block_invoke_2()
{
  _stateCaptureCallbackRegistration_2 = 1;
  _GEOConfigRegisterStateCaptureFunctions((uint64_t)_getUserDefaultStringKeysForStateCapture_0, (uint64_t)_getConfigStoreStringKeysForStateCapture_2);
}

void _remove(void *a1, _QWORD *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = a1;
  if (*((_QWORD **)v3 + 1) == a2)
    *((_QWORD *)v3 + 1) = a2[2];
  if (*((_QWORD **)v3 + 2) == a2)
    *((_QWORD *)v3 + 2) = a2[3];
  v5 = a2[2];
  v4 = a2[3];
  if (v4)
    *(_QWORD *)(v4 + 16) = v5;
  if (v5)
    *(_QWORD *)(v5 + 24) = v4;
  v6 = v3;
  objc_msgSend(*((id *)v3 + 3), "removeObjectForKey:", a2);
  free(a2);
  --v6[4];
  ++v6[6];

}

void sub_18861EF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_18861F144(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

void sub_18861F1B8(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

uint64_t _GEOTileResponseIsCacheable(unsigned __int8 *a1, void *a2)
{
  id v3;
  unsigned int v4;
  void *v5;
  int v6;
  uint64_t v7;

  v3 = a2;
  v4 = *a1;
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("TileIsCacheable"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  v6 = objc_opt_isKindOfClass() ^ 1;
  v7 = v6 & (v4 < 0x40);
  if ((v6 & 1) == 0 && v4 <= 0x3F)
    v7 = objc_msgSend(v5, "BOOLValue");

  return v7;
}

BOOL _GEOTileResponseIsAllowable(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  _BOOL8 v14;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  v14 = (objc_msgSend(v9, "isDisputedBordersAllowlistedForCountry:region:", v10, v11) & 1) == 0
     && !objc_msgSend(v9, "isDisputedBordersAllowlistedForCountry:region:", v12, v13)
     || (v10 == v12 || objc_msgSend(v10, "isEqualToString:", v12))
     && (v11 == v13 || objc_msgSend(v11, "isEqualToString:", v13));

  return v14;
}

id GEOGetDataSessionURLLog()
{
  if (qword_1ECDBBF90 != -1)
    dispatch_once(&qword_1ECDBBF90, &__block_literal_global_85);
  return (id)_MergedGlobals_233;
}

void sub_18861F868(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

id GEOGetNetworkRequestLog()
{
  if (qword_1ECDBB968 != -1)
    dispatch_once(&qword_1ECDBB968, &__block_literal_global_12);
  return (id)_MergedGlobals_182;
}

void sub_1886208D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_188621734(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188621B24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18862226C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  _Block_object_dispose(&a57, 8);
  _Unwind_Resume(a1);
}

void sub_188622680(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

os_unfair_lock_s *GEOPDMapsResultIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOPDMapsResultIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 18);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_188622790(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188622A94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188622F98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886230DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18862381C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886238DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

os_unfair_lock_s *GEOPDPlaceIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOPDPlaceIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 28);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_188624000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18862424C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id GEOURLString(uint64_t a1)
{
  return _GEOGetURLWithSource(a1, 0, 1, 0);
}

void __destroy_helper_block_ea8_32c49_ZTSKZ36__GEOTileLoader__requestOnlineTiles_E3__4(uint64_t a1)
{

}

BOOL GEOMapItemHandleShouldStoreRequestData(int a1)
{
  return ((a1 - 2) & 0xFFFFFFFD) == 0;
}

uint64_t GEORegionalResourceTileKeyMake(unsigned int a1, char a2, unsigned __int8 a3, unsigned __int8 a4)
{
  _BYTE v5[9];

  *(_QWORD *)&v5[1] = *(_QWORD *)&v5[1] & 0xC000000000000000 | ((unint64_t)(a2 & 0x3F) << 40) | ((unint64_t)a3 << 54) | a1 | ((unint64_t)a4 << 32) | 0x800000000000;
  return *(_QWORD *)v5;
}

void sub_1886287B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188628898(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOConfigGetInteger(int a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;

  _getValue(a1, a2, 1, 0, 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "integerValue");

  return v3;
}

void sub_188628AEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188628F78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886292C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188629374(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id __copy_helper_block_ea8_32c49_ZTSKZ36__GEOTileLoader__requestOnlineTiles_E3__4(uint64_t a1, uint64_t a2)
{
  id result;

  *(_QWORD *)(a1 + 32) = *(id *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  result = *(id *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = result;
  return result;
}

void _polygonForPackedPoints(char **a1, uint64_t a2, unint64_t a3, double *a4, int a5, int64x2_t *a6)
{
  double v12;
  int64x2_t *v13;
  uint64_t v14;
  char *v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char v26;
  char v27;
  double v28;
  double v29;
  char *v30;
  __int128 v31;
  char *v32;
  char *v33;
  char *v34;

  v32 = 0;
  v33 = 0;
  v34 = 0;
  std::vector<gm::Matrix<double,2,1>>::reserve((void **)&v32, a3);
  v12 = __exp10((double)a5);
  *a6 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  a6[1] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v13 = a6 + 1;
  if (a3)
  {
    v14 = 0;
    v15 = v33;
    do
    {
      v16 = a4[1] - (double)(unsigned __int16)*(_DWORD *)(a2 + 4 * v14) / v12;
      *(double *)&v31 = *a4 + (double)HIWORD(*(_DWORD *)(a2 + 4 * v14)) / v12;
      *((double *)&v31 + 1) = v16;
      if (v15 >= v34)
      {
        v17 = (v15 - v32) >> 4;
        if ((unint64_t)(v17 + 1) >> 60)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v18 = (v34 - v32) >> 3;
        if (v18 <= v17 + 1)
          v18 = v17 + 1;
        if ((unint64_t)(v34 - v32) >= 0x7FFFFFFFFFFFFFF0)
          v19 = 0xFFFFFFFFFFFFFFFLL;
        else
          v19 = v18;
        if (v19)
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>((uint64_t)&v34, v19);
        else
          v20 = 0;
        v21 = &v20[16 * v17];
        *(_OWORD *)v21 = v31;
        v23 = v32;
        v22 = v33;
        v24 = v21;
        if (v33 != v32)
        {
          do
          {
            *((_OWORD *)v24 - 1) = *((_OWORD *)v22 - 1);
            v24 -= 16;
            v22 -= 16;
          }
          while (v22 != v23);
          v22 = v32;
        }
        v15 = v21 + 16;
        v32 = v24;
        v33 = v21 + 16;
        v34 = &v20[16 * v19];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_OWORD *)v15 = v31;
        v15 += 16;
      }
      v25 = 0;
      v33 = v15;
      v26 = 1;
      do
      {
        v27 = v26;
        v28 = *((double *)&v31 + v25);
        v29 = *(double *)&a6->i64[v25];
        if (v28 < v29)
          v29 = *((double *)&v31 + v25);
        *(double *)&a6->i64[v25] = v29;
        if (*(double *)&v13->i64[v25] >= v28)
          v28 = *(double *)&v13->i64[v25];
        *(double *)&v13->i64[v25] = v28;
        v25 = 1;
        v26 = 0;
      }
      while ((v27 & 1) != 0);
      ++v14;
    }
    while (v14 != a3);
  }
  else
  {
    v15 = v33;
  }
  v30 = v34;
  *a1 = v32;
  a1[1] = v15;
  a1[2] = v30;
}

void sub_18862A080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18862A288(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTerritoryDataTerritoryInfoReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t Specified;
  id v6;
  uint8_t v7[16];

  if (*(_DWORD *)(a1 + 100))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTerritoryDataTerritoryInfoReadAllFrom can only be called once per object"));
  }
  else
  {
    if (!((unint64_t)objc_msgSend(a2, "position") >> 32)
      && !((unint64_t)objc_msgSend(a2, "length") >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
      v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 96) = objc_msgSend(v6, "position");
      *(_DWORD *)(a1 + 100) = objc_msgSend(v6, "length");
      Specified = GEOTerritoryDataTerritoryInfoReadSpecified(a1, (unint64_t)v6, (int *)&GEOTerritoryDataTerritoryInfoReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_18862A3FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOGetGeographicMetadataLog()
{
  if (qword_1ECDBC810 != -1)
    dispatch_once(&qword_1ECDBC810, &__block_literal_global_175);
  return (id)_MergedGlobals_311;
}

uint64_t GEOTerritoryDataTerritoryInfoContainsLocation(void *a1, unint64_t a2, void *a3)
{
  _QWORD *v5;
  id v6;
  void *v7;
  unint64_t UInteger;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  double *v75;
  NSObject *v76;
  _BYTE *v77;
  _BYTE *v78;
  void *v79;
  id *v80;
  void *v81;
  _BOOL4 v82;
  NSObject *v83;
  int v84;
  id *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t i;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  NSObject *v94;
  void *v95;
  unint64_t v96;
  _QWORD *v97;
  _BYTE *v98;
  _BYTE *v99;
  void *v100;
  unint64_t v101;
  float64x2_t *v102;
  float64x2_t *v103;
  double v104;
  float64x2_t *v105;
  float64x2_t v106;
  uint64_t v107;
  uint64_t v109;
  int64x2_t v110;
  int64x2_t v111;
  id v112;
  void *__p;
  _BYTE *v114;
  int64x2_t v115[2];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  void *v120;
  _BYTE *v121;
  char *v122;
  int64x2_t v123[2];
  double v124[2];
  unint64_t v125;
  unsigned __int8 v126;
  __int128 v127;
  double v128;
  __int128 v129;
  _BYTE v130[128];
  uint8_t buf[40];
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v112 = v6;
  +[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v7, "isInternalInstall") & 1) != 0)
  {
    UInteger = GEOConfigGetUInteger(GeoServicesConfig_GloriaVerbosity, (uint64_t)off_1EDF4E278);

    if (UInteger)
    {
      GEOGetGloriaUtilLog();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        if (v5)
          v10 = v5[8];
        else
          v10 = 0;
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v10;
        _os_log_impl(&dword_1885A9000, v9, OS_LOG_TYPE_DEBUG, "\nChecking intersection for feature %llu", buf, 0xCu);
      }

    }
  }
  else
  {

    UInteger = 0;
  }
  objc_msgSend(v6, "coordinate");
  v12 = v11;
  objc_msgSend(v6, "coordinate");
  v14 = v13;
  *(_QWORD *)&v129 = v12;
  *((double *)&v129 + 1) = v13;
  objc_msgSend(v6, "horizontalAccuracy");
  v16 = v15;
  v17 = v14 * 0.0174532925;
  v18 = cos(v14 * 0.0174532925 * 6.0);
  v19 = cos(v17 * 4.0);
  v127 = v129;
  v128 = v16 / (cos(v17 + v17) * -559.82 + 111132.92 + v19 * 1.175 + v18 * -0.0023);
  v20 = __clz(a2);
  v126 = (int)((63 - v20 + (((63 - v20) & 0x80u) >> 7)) << 24) >> 25;
  v125 = a2 - gloria::LEADING_BITS_VALUE_LUT[v126];
  v21 = gloria::TileId::ToBBOX((gloria::TileId *)&v125);
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v124[0] = v26;
  v124[1] = v21;
  v123[0] = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  v123[1] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  if (v5 && (-[GEOTerritoryDataTerritoryInfo _readPolygon]((uint64_t)v5), v5[11]))
  {
    -[GEOTerritoryDataTerritoryInfo polygon]((id *)v5);
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = (_QWORD *)v28;
    if (v28)
    {
      -[GEOTerritoryDataPolygon _readShells](v28);
      v30 = v29[2];
    }
    else
    {
      v30 = 0;
    }
    -[GEOTerritoryDataTerritoryInfo polygon]((id *)v5);
    v31 = objc_claimAutoreleasedReturnValue();
    v32 = (_QWORD *)v31;
    if (v31)
    {
      -[GEOTerritoryDataPolygon _readShells](v31);
      v33 = v32[3];
    }
    else
    {
      v33 = 0;
    }
    _polygonForPackedPoints((char **)&v120, v30, v33, v124, 5, v123);

  }
  else
  {
    memset(buf, 0, 24);
    std::vector<gm::Matrix<double,2,1>>::reserve((void **)buf, 5uLL);
    v35 = *(_QWORD *)&buf[8];
    v34 = *(char **)&buf[16];
    if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
    {
      v37 = *(void **)buf;
      v38 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 4;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 60)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v40 = *(_QWORD *)&buf[16] - *(_QWORD *)buf;
      if ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 3 > v39)
        v39 = v40 >> 3;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
        v41 = 0xFFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41)
      {
        v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>((uint64_t)&buf[16], v41);
        v37 = *(void **)buf;
        v35 = *(_QWORD *)&buf[8];
      }
      else
      {
        v42 = 0;
      }
      v43 = &v42[16 * v38];
      v34 = &v42[16 * v41];
      *(double *)v43 = v27;
      *((double *)v43 + 1) = v21;
      v36 = v43 + 16;
      if ((void *)v35 != v37)
      {
        do
        {
          *((_OWORD *)v43 - 1) = *(_OWORD *)(v35 - 16);
          v43 -= 16;
          v35 -= 16;
        }
        while ((void *)v35 != v37);
        v37 = *(void **)buf;
      }
      *(_QWORD *)buf = v43;
      *(_QWORD *)&buf[8] = v36;
      *(_QWORD *)&buf[16] = v34;
      if (v37)
      {
        operator delete(v37);
        v34 = *(char **)&buf[16];
      }
    }
    else
    {
      **(double **)&buf[8] = v27;
      *(double *)(v35 + 8) = v21;
      v36 = (char *)(v35 + 16);
    }
    *(_QWORD *)&buf[8] = v36;
    if (v36 >= v34)
    {
      v45 = *(char **)buf;
      v46 = (uint64_t)&v36[-*(_QWORD *)buf] >> 4;
      v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 60)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v48 = (uint64_t)&v34[-*(_QWORD *)buf];
      if (v48 >> 3 > v47)
        v47 = v48 >> 3;
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0)
        v49 = 0xFFFFFFFFFFFFFFFLL;
      else
        v49 = v47;
      if (v49)
      {
        v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>((uint64_t)&buf[16], v49);
        v45 = *(char **)buf;
        v36 = *(char **)&buf[8];
      }
      else
      {
        v50 = 0;
      }
      v51 = &v50[16 * v46];
      v34 = &v50[16 * v49];
      *(double *)v51 = v27;
      *((_QWORD *)v51 + 1) = v23;
      v44 = v51 + 16;
      if (v36 != v45)
      {
        do
        {
          *((_OWORD *)v51 - 1) = *((_OWORD *)v36 - 1);
          v51 -= 16;
          v36 -= 16;
        }
        while (v36 != v45);
        v45 = *(char **)buf;
      }
      *(_QWORD *)buf = v51;
      *(_QWORD *)&buf[8] = v44;
      *(_QWORD *)&buf[16] = v34;
      if (v45)
      {
        operator delete(v45);
        v34 = *(char **)&buf[16];
      }
    }
    else
    {
      *(double *)v36 = v27;
      *((_QWORD *)v36 + 1) = v23;
      v44 = v36 + 16;
    }
    *(_QWORD *)&buf[8] = v44;
    if (v44 >= v34)
    {
      v53 = *(char **)buf;
      v54 = (uint64_t)&v44[-*(_QWORD *)buf] >> 4;
      v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 60)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v56 = (uint64_t)&v34[-*(_QWORD *)buf];
      if (v56 >> 3 > v55)
        v55 = v56 >> 3;
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0)
        v57 = 0xFFFFFFFFFFFFFFFLL;
      else
        v57 = v55;
      if (v57)
      {
        v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>((uint64_t)&buf[16], v57);
        v53 = *(char **)buf;
        v44 = *(char **)&buf[8];
      }
      else
      {
        v58 = 0;
      }
      v59 = &v58[16 * v54];
      v34 = &v58[16 * v57];
      *(_QWORD *)v59 = v25;
      *((_QWORD *)v59 + 1) = v23;
      v52 = v59 + 16;
      if (v44 != v53)
      {
        do
        {
          *((_OWORD *)v59 - 1) = *((_OWORD *)v44 - 1);
          v59 -= 16;
          v44 -= 16;
        }
        while (v44 != v53);
        v53 = *(char **)buf;
      }
      *(_QWORD *)buf = v59;
      *(_QWORD *)&buf[8] = v52;
      *(_QWORD *)&buf[16] = v34;
      if (v53)
      {
        operator delete(v53);
        v34 = *(char **)&buf[16];
      }
    }
    else
    {
      *(_QWORD *)v44 = v25;
      *((_QWORD *)v44 + 1) = v23;
      v52 = v44 + 16;
    }
    *(_QWORD *)&buf[8] = v52;
    if (v52 >= v34)
    {
      v61 = *(char **)buf;
      v62 = (uint64_t)&v52[-*(_QWORD *)buf] >> 4;
      v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 60)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v64 = (uint64_t)&v34[-*(_QWORD *)buf];
      if (v64 >> 3 > v63)
        v63 = v64 >> 3;
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0)
        v65 = 0xFFFFFFFFFFFFFFFLL;
      else
        v65 = v63;
      if (v65)
      {
        v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>((uint64_t)&buf[16], v65);
        v61 = *(char **)buf;
        v52 = *(char **)&buf[8];
      }
      else
      {
        v66 = 0;
      }
      v67 = &v66[16 * v62];
      v34 = &v66[16 * v65];
      *(_QWORD *)v67 = v25;
      *((double *)v67 + 1) = v21;
      v60 = v67 + 16;
      if (v52 != v61)
      {
        do
        {
          *((_OWORD *)v67 - 1) = *((_OWORD *)v52 - 1);
          v67 -= 16;
          v52 -= 16;
        }
        while (v52 != v61);
        v61 = *(char **)buf;
      }
      *(_QWORD *)buf = v67;
      *(_QWORD *)&buf[8] = v60;
      *(_QWORD *)&buf[16] = v34;
      if (v61)
      {
        operator delete(v61);
        v34 = *(char **)&buf[16];
      }
    }
    else
    {
      *(_QWORD *)v52 = v25;
      *((double *)v52 + 1) = v21;
      v60 = v52 + 16;
    }
    *(_QWORD *)&buf[8] = v60;
    if (v60 >= v34)
    {
      v69 = *(char **)buf;
      v70 = (uint64_t)&v60[-*(_QWORD *)buf] >> 4;
      v71 = v70 + 1;
      if ((unint64_t)(v70 + 1) >> 60)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v72 = (uint64_t)&v34[-*(_QWORD *)buf];
      if (v72 >> 3 > v71)
        v71 = v72 >> 3;
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0)
        v73 = 0xFFFFFFFFFFFFFFFLL;
      else
        v73 = v71;
      if (v73)
      {
        v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>((uint64_t)&buf[16], v73);
        v69 = *(char **)buf;
        v60 = *(char **)&buf[8];
      }
      else
      {
        v74 = 0;
      }
      v75 = (double *)&v74[16 * v70];
      v34 = &v74[16 * v73];
      *v75 = v27;
      v75[1] = v21;
      v68 = v75 + 2;
      if (v60 != v69)
      {
        do
        {
          *((_OWORD *)v75 - 1) = *((_OWORD *)v60 - 1);
          v75 -= 2;
          v60 -= 16;
        }
        while (v60 != v69);
        v69 = *(char **)buf;
      }
      *(_QWORD *)buf = v75;
      *(_QWORD *)&buf[8] = v68;
      *(_QWORD *)&buf[16] = v34;
      if (v69)
      {
        operator delete(v69);
        v34 = *(char **)&buf[16];
      }
    }
    else
    {
      *(double *)v60 = v27;
      *((double *)v60 + 1) = v21;
      v68 = v60 + 16;
    }
    v120 = *(void **)buf;
    v121 = v68;
    v122 = v34;
  }
  if (UInteger >= 4)
  {
    GEOGetGloriaUtilLog();
    v76 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
    {
      v78 = v120;
      v77 = v121;
      _polygonToString(&v120);
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 134218242;
      *(_QWORD *)&buf[4] = (v77 - v78) >> 4;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v79;
      _os_log_impl(&dword_1885A9000, v76, OS_LOG_TYPE_DEBUG, "  polygon has %zd points: %@", buf, 0x16u);

    }
LABEL_103:

    -[GEOTerritoryDataTerritoryInfo polygon]((id *)v5);
    v80 = (id *)objc_claimAutoreleasedReturnValue();
    -[GEOTerritoryDataPolygon holes](v80);
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    v82 = objc_msgSend(v81, "count") == 0;

    if (v82)
    {
      GEOGetGloriaUtilLog();
      v83 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1885A9000, v83, OS_LOG_TYPE_DEBUG, "  polygon has no holes", buf, 2u);
      }

    }
    v84 = 1;
    goto LABEL_109;
  }
  if (UInteger >= 2)
  {
    GEOGetGloriaUtilLog();
    v76 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = (v121 - (_BYTE *)v120) >> 4;
      _os_log_impl(&dword_1885A9000, v76, OS_LOG_TYPE_DEBUG, "  polygon has %zd points", buf, 0xCu);
    }
    goto LABEL_103;
  }
  v84 = 0;
LABEL_109:
  if ((geo::containsPoint<double>((uint64_t *)&v120, (double *)&v129) & 1) == 0
    && !geo::Polygon2<double>::intersects((uint64_t *)&v120, (double *)&v127))
  {
    v107 = 0;
    goto LABEL_144;
  }
  v118 = 0u;
  v119 = 0u;
  v116 = 0u;
  v117 = 0u;
  -[GEOTerritoryDataTerritoryInfo polygon]((id *)v5);
  v85 = (id *)objc_claimAutoreleasedReturnValue();
  -[GEOTerritoryDataPolygon holes](v85);
  v86 = (void *)objc_claimAutoreleasedReturnValue();

  v87 = objc_msgSend(v86, "countByEnumeratingWithState:objects:count:", &v116, v130, 16);
  if (!v87)
  {
    v107 = 1;
    goto LABEL_142;
  }
  v88 = *(_QWORD *)v117;
  v110 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  v111 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  while (2)
  {
    v109 = v87;
    for (i = 0; i != v109; ++i)
    {
      if (*(_QWORD *)v117 != v88)
        objc_enumerationMutation(v86);
      v90 = *(_QWORD *)(*((_QWORD *)&v116 + 1) + 8 * i);
      v115[0] = v111;
      v115[1] = v110;
      if (v90)
      {
        v91 = (uint64_t *)(v90 + 8);
        v92 = *v91;
        v93 = v91[1];
      }
      else
      {
        v92 = 0;
        v93 = 0;
      }
      _polygonForPackedPoints((char **)&__p, v92, v93, v124, 5, v115);
      if (UInteger < 4)
      {
        if (!v84)
          goto LABEL_125;
        GEOGetGloriaUtilLog();
        v94 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = (v114 - (_BYTE *)__p) >> 4;
          _os_log_impl(&dword_1885A9000, v94, OS_LOG_TYPE_DEBUG, "  hole has %zd points", buf, 0xCu);
        }
      }
      else
      {
        GEOGetGloriaUtilLog();
        v94 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
        {
          v95 = v86;
          v96 = UInteger;
          v97 = v5;
          v99 = __p;
          v98 = v114;
          _polygonToString(&__p);
          v100 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 134218242;
          *(_QWORD *)&buf[4] = (v98 - v99) >> 4;
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v100;
          _os_log_impl(&dword_1885A9000, v94, OS_LOG_TYPE_DEBUG, "  hole has %zd points: %@", buf, 0x16u);

          v5 = v97;
          UInteger = v96;
          v86 = v95;
        }
      }

LABEL_125:
      v101 = UInteger;
      if (geo::containsPoint<double>((uint64_t *)&__p, (double *)&v129))
      {
        v103 = (float64x2_t *)__p;
        v102 = (float64x2_t *)v114;
        if (__p == v114)
        {
LABEL_138:
          v6 = v112;
          if (v102)
          {
            v114 = v102;
            operator delete(v102);
          }
          v107 = 0;
          goto LABEL_142;
        }
        v104 = v128 * v128;
        v105 = (float64x2_t *)(v114 - 16);
        while (1)
        {
          v106 = vsubq_f64(*v103, *v105);
          *(float64x2_t *)buf = *v105;
          *(float64x2_t *)&buf[16] = v106;
          if (gm::LineSegment<double,2>::distanceSquaredTo((double *)buf, (double *)&v127) <= v104)
            break;
          v105 = v103++;
          if (v103 == v102)
          {
            v102 = (float64x2_t *)__p;
            goto LABEL_138;
          }
        }
      }
      if (__p)
      {
        v114 = __p;
        operator delete(__p);
      }
      v6 = v112;
      UInteger = v101;
    }
    v87 = objc_msgSend(v86, "countByEnumeratingWithState:objects:count:", &v116, v130, 16);
    v107 = 1;
    if (v87)
      continue;
    break;
  }
LABEL_142:

LABEL_144:
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }

  return v107;
}

void sub_18862B2B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  void *v37;
  void *v38;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_18862B4E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t geo::containsPoint<double>(uint64_t *a1, double *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  char v13;
  double v14;
  double v15;
  double v16;
  BOOL v17;
  unint64_t v18;
  double *v19;
  double v20;
  double v21;
  double v23;
  BOOL v26;
  BOOL v27;
  double v28;
  double v29;
  double v30;

  v3 = *a1;
  v2 = a1[1];
  v4 = v2 - *a1;
  if (v2 == *a1)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = v4 >> 4;
    v9 = *a2;
    v8 = a2[1];
    if ((unint64_t)(v4 >> 4) <= 1)
      v10 = 1;
    else
      v10 = v4 >> 4;
    LODWORD(v4) = 1;
    do
    {
      v11 = 0;
      v12 = (double *)(v3 + 16 * v6++);
      v13 = 1;
      do
      {
        v14 = v12[v11];
        v15 = a2[v11];
        v16 = vabdd_f64(v14, v15);
        v17 = v16 <= fabs(v14 + v15) * 2.22044605e-16 * 100.0 || v16 <= 2.22507386e-308;
        if ((v13 & 1) == 0)
          break;
        v13 = 0;
        v11 = 1;
      }
      while (v17);
      v18 = v6 == v7 ? 0 : v6;
      if (v17)
        break;
      v19 = (double *)(v3 + 16 * v18);
      v20 = v12[1];
      v21 = v19[1];
      if (v20 == v21 && v20 == v8)
      {
        v23 = *v19;
        if (*v12 <= v9 && v23 >= v9)
          break;
        if (*v12 >= v9 && v23 <= v9)
          break;
      }
      v26 = v20 > v8 || v21 <= v8;
      if (!v26 || (v20 > v8 ? (v27 = v21 > v8) : (v27 = 1), !v27))
      {
        v28 = *v12;
        if (*v12 != *v19)
          v28 = v28 + (v8 - v20) / ((v21 - v20) / (*v19 - v28));
        v29 = vabdd_f64(v9, v28);
        v30 = fabs(v9 + v28) * 2.22044605e-16 * 100.0;
        if (v29 < 2.22507386e-308 || v29 <= v30)
          return (v4 | v5) & 1;
        if (v28 < v9)
          ++v5;
      }
      LODWORD(v4) = v6 < v7;
    }
    while (v6 != v10);
  }
  return (v4 | v5) & 1;
}

void sub_18862B748(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTerritoryDataTerritoryInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  int *v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  int v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  void *v58;
  int *v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  char v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  char v80;
  int v81;
  char v82;
  void *v83;
  GEOTerritoryDataPolygon *v85;
  char v86;
  char v87;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 104));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 100);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 96));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 112)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFEFFFAFFFDFFFBLL) & 0xFF01FF01FF01FF01))+ ((*(_BYTE *)(a1 + 112) & 0x10) != 0));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 3;
        v15 = v10 | v14;
        if ((((v10 | v14) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_138;
        v87 = (v16 == 0) | v15;
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v86 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v18))
      goto LABEL_138;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      if (v24 == -1 || v24 >= *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v24 + 1;
      v22 |= (unint64_t)(v25 & 0x7F) << v20;
      if ((v25 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      v26 = v21++ >= 9;
      if (v26)
      {
        v22 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v27 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    v28 = v22 & 7;
    if (v27 || v28 == 4)
    {
LABEL_138:
      if ((v15 & 1) != 0)
      {
        v80 = 1;
        goto LABEL_140;
      }
      if (v16)
      {
        while (1)
        {
          v81 = *v16++;
          v82 = 8;
          switch(v81)
          {
            case 0:
              goto LABEL_150;
            case 1:
              goto LABEL_149;
            case 3:
              v82 = 32;
              goto LABEL_149;
            case 5:
              v82 = 64;
              goto LABEL_149;
            case 6:
              v82 = 4;
              goto LABEL_149;
            case 7:
              v82 = 16;
LABEL_149:
              *(_BYTE *)(a1 + 112) |= v82;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_150;
    }
    v30 = v22 >> 3;
    v31 = v15;
    if ((v87 & 1) == 0)
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (!v31 || (*(_BYTE *)(a1 + 112) & 8) != 0)
          goto LABEL_98;
        if (v28 != 2)
        {
          v68 = 0;
          v69 = 0;
          v70 = 0;
          while (1)
          {
            v71 = *v17;
            v72 = *(_QWORD *)(v3 + v71);
            if (v72 == -1 || v72 >= *(_QWORD *)(v3 + *v6))
              break;
            v73 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v72);
            *(_QWORD *)(v3 + v71) = v72 + 1;
            v70 |= (unint64_t)(v73 & 0x7F) << v68;
            if (v73 < 0)
            {
              v68 += 7;
              v26 = v69++ >= 9;
              if (!v26)
                continue;
            }
            goto LABEL_135;
          }
          *(_BYTE *)(v3 + *v18) = 1;
LABEL_135:
          PBRepeatedInt32Add();
          goto LABEL_115;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_155;
        while (1)
        {
          v36 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            goto LABEL_119;
          v37 = 0;
          v38 = 0;
          v39 = 0;
          while (1)
          {
            v40 = *v17;
            v41 = *(_QWORD *)(v3 + v40);
            if (v41 == -1 || v41 >= *(_QWORD *)(v3 + *v6))
              break;
            v42 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v41);
            *(_QWORD *)(v3 + v40) = v41 + 1;
            v39 |= (unint64_t)(v42 & 0x7F) << v37;
            if (v42 < 0)
            {
              v37 += 7;
              v26 = v38++ >= 9;
              if (!v26)
                continue;
            }
            goto LABEL_51;
          }
          *(_BYTE *)(v3 + *v36) = 1;
LABEL_51:
          PBRepeatedInt32Add();
        }
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_98;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        *(_BYTE *)(a1 + 112) |= 2u;
        while (2)
        {
          v47 = *v17;
          v48 = *(_QWORD *)(v3 + v47);
          if (v48 == -1 || v48 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v48);
            *(_QWORD *)(v3 + v47) = v48 + 1;
            v46 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              v26 = v45++ >= 9;
              if (v26)
              {
                LODWORD(v46) = 0;
                goto LABEL_103;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v46) = 0;
LABEL_103:
        *(_DWORD *)(a1 + 108) = v46;
        goto LABEL_116;
      case 3:
        if (!v31)
          goto LABEL_98;
        if ((*(_BYTE *)(a1 + 112) & 0x20) == 0)
        {
          PBReaderReadString();
          v50 = objc_claimAutoreleasedReturnValue();
          v51 = 80;
          goto LABEL_96;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_155;
        v67 = 4 * *(_BYTE *)(a1 + 112);
        goto LABEL_114;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_98;
        v52 = 0;
        v53 = 0;
        v54 = 0;
        *(_BYTE *)(a1 + 112) |= 1u;
        while (2)
        {
          v55 = *v17;
          v56 = *(_QWORD *)(v3 + v55);
          if (v56 == -1 || v56 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v57 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v56);
            *(_QWORD *)(v3 + v55) = v56 + 1;
            v54 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              v26 = v53++ >= 9;
              if (v26)
              {
                v54 = 0;
                goto LABEL_107;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v54 = 0;
LABEL_107:
        *(_QWORD *)(a1 + 64) = v54;
        goto LABEL_116;
      case 5:
        if (!v31)
          goto LABEL_98;
        if ((*(_BYTE *)(a1 + 112) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_155;
          v67 = 2 * *(_BYTE *)(a1 + 112);
LABEL_114:
          v7 += v67 >> 7;
LABEL_115:
          v15 = v86;
          v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_116:
          if (!(v15 & 1 | (v7 != 0)) || *(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_138;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_155;
        v85 = objc_alloc_init(GEOTerritoryDataPolygon);
        if (GEOTerritoryDataPolygonReadAllFrom((uint64_t)v85, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          v58 = *(void **)(a1 + 88);
          *(_QWORD *)(a1 + 88) = v85;
LABEL_97:

          --v7;
          goto LABEL_115;
        }

LABEL_155:
        v80 = 0;
        v15 = v86;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_140:
        *(_BYTE *)(a1 + 112) |= 8u;
        *(_BYTE *)(a1 + 112) |= 0x20u;
        *(_BYTE *)(a1 + 112) |= 0x40u;
        *(_BYTE *)(a1 + 112) |= 4u;
        *(_BYTE *)(a1 + 112) |= 0x10u;
        if ((v80 & 1) != 0)
        {
LABEL_150:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) != 0)
            goto LABEL_151;
          return v3;
        }
        v3 = 0;
        if ((v15 & 1) == 0)
          return v3;
LABEL_151:
        v83 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

        return v3;
      case 6:
        if (!v31 || (*(_BYTE *)(a1 + 112) & 4) != 0)
          goto LABEL_98;
        if (v28 != 2)
        {
          v74 = 0;
          v75 = 0;
          v76 = 0;
          while (1)
          {
            v77 = *v17;
            v78 = *(_QWORD *)(v3 + v77);
            if (v78 == -1 || v78 >= *(_QWORD *)(v3 + *v6))
              break;
            v79 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v78);
            *(_QWORD *)(v3 + v77) = v78 + 1;
            v76 |= (unint64_t)(v79 & 0x7F) << v74;
            if (v79 < 0)
            {
              v74 += 7;
              v26 = v75++ >= 9;
              if (!v26)
                continue;
            }
            goto LABEL_137;
          }
          *(_BYTE *)(v3 + *v18) = 1;
LABEL_137:
          PBRepeatedUInt32Add();
          goto LABEL_115;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_155;
        while (1)
        {
          v59 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            break;
          v60 = 0;
          v61 = 0;
          v62 = 0;
          while (1)
          {
            v63 = *v17;
            v64 = *(_QWORD *)(v3 + v63);
            if (v64 == -1 || v64 >= *(_QWORD *)(v3 + *v6))
              break;
            v65 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v64);
            *(_QWORD *)(v3 + v63) = v64 + 1;
            v62 |= (unint64_t)(v65 & 0x7F) << v60;
            if (v65 < 0)
            {
              v60 += 7;
              v26 = v61++ >= 9;
              if (!v26)
                continue;
            }
            goto LABEL_92;
          }
          *(_BYTE *)(v3 + *v59) = 1;
LABEL_92:
          PBRepeatedUInt32Add();
        }
LABEL_119:
        PBReaderRecallMark();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v86;
        goto LABEL_116;
      case 7:
        if (!v31)
        {
LABEL_98:
          v66 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v15 = v86;
          if ((v66 & 1) == 0)
          {
LABEL_153:
            v80 = 0;
            goto LABEL_140;
          }
          goto LABEL_116;
        }
        if ((*(_BYTE *)(a1 + 112) & 0x10) == 0)
        {
          PBReaderReadString();
          v50 = objc_claimAutoreleasedReturnValue();
          v51 = 72;
LABEL_96:
          v58 = *(void **)(a1 + v51);
          *(_QWORD *)(a1 + v51) = v50;
          goto LABEL_97;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_155;
        v67 = 8 * *(_BYTE *)(a1 + 112);
        goto LABEL_114;
      default:
        v43 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v86;
        if (!v43)
          goto LABEL_153;
        goto LABEL_116;
    }
  }
}

void std::vector<gm::Matrix<double,2,1>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

double gloria::TileId::ToBBOX(gloria::TileId *this)
{
  int v1;
  double v2;
  int64x2_t v4;
  unsigned __int8 v5;
  int64x2_t v6;
  unsigned __int8 v7;

  gloria::TileId::ToXYZ(this, (int8x16_t *)&v6);
  v1 = v7;
  v4 = vaddq_s64(v6, vdupq_n_s64(1uLL));
  v5 = v7;
  v2 = gloria::TileCoordinate::YToLat((gloria::TileCoordinate *)&v6);
  gloria::TileCoordinate::YToLat((gloria::TileCoordinate *)&v4);
  ldexp(1.0, v1);
  ldexp(1.0, v1);
  return v2;
}

long double gloria::TileCoordinate::YToLat(gloria::TileCoordinate *this)
{
  double v1;
  long double v2;
  double v3;
  long double v4;

  v1 = (double)*((unint64_t *)this + 1) * -6.28318531;
  v2 = v1 / ldexp(1.0, *((unsigned __int8 *)this + 16)) + 3.14159265;
  v3 = exp(v2);
  v4 = exp(-v2);
  return atan((v3 - v4) * 0.5) * 57.2957795;
}

int8x16_t gloria::TileId::ToXYZ@<Q0>(gloria::TileId *this@<X0>, int8x16_t *a2@<X8>)
{
  uint64x2_t v2;
  int8x16_t v3;
  __int8 v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t result;

  v2.i64[0] = *(_QWORD *)this & 0x1111111111111111 | ((*(_QWORD *)this & 0x5555555555555555uLL) >> 1) & 0x3333333333333333;
  v2.i64[1] = (*(_QWORD *)this >> 1) & 0x4444444444444444 | *(_QWORD *)this & 0x2222222222222222;
  v3 = (int8x16_t)vshlq_u64(v2, (uint64x2_t)xmmword_189CBC400);
  v2.i64[1] = (unint64_t)v2.i64[1] >> 1;
  v4 = *((_BYTE *)this + 8);
  v5 = vorrq_s8(v3, (int8x16_t)v2);
  v3.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v3.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v6 = vandq_s8(v5, v3);
  v3.i64[0] = 0xFF00FF00FF00FFLL;
  v3.i64[1] = 0xFF00FF00FF00FFLL;
  v7 = vandq_s8(vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v6, 4uLL), v6), v3);
  v8 = vorrq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v7, 8uLL), v7);
  v9.i64[0] = 4294901760;
  v9.i64[1] = 4294901760;
  v10 = vandq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v8, 0x10uLL), v9);
  v9.i64[0] = 0xFFFFLL;
  v9.i64[1] = 0xFFFFLL;
  result = vorrq_s8(v10, vandq_s8(v8, v9));
  *a2 = result;
  a2[1].i8[0] = v4;
  return result;
}

void sub_18862C488(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL geo::Polygon2<double>::intersects(uint64_t *a1, double *a2)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  double v8;
  float64x2_t *v9;
  uint64_t v10;
  float64x2_t v11;
  double v12;
  BOOL v13;
  _OWORD v14[2];

  if ((geo::containsPoint<double>(a1, a2) & 1) != 0)
    return 1;
  v7 = a1;
  v5 = *a1;
  v6 = v7[1];
  if (v5 == v6)
    return 0;
  v8 = a2[2] * a2[2];
  v9 = (float64x2_t *)(v6 - 16);
  v10 = v5 + 16;
  do
  {
    v11 = vsubq_f64(*(float64x2_t *)(v10 - 16), *v9);
    v14[0] = *v9;
    v14[1] = v11;
    v12 = gm::LineSegment<double,2>::distanceSquaredTo((double *)v14, a2);
    result = v12 <= v8;
    v9 = (float64x2_t *)v5;
    v5 += 16;
    v13 = v12 <= v8 || v10 == v6;
    v10 += 16;
  }
  while (!v13);
  return result;
}

double gm::LineSegment<double,2>::distanceSquaredTo(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v2 = *a2;
  v3 = a2[1];
  v5 = *a1;
  v4 = a1[1];
  v7 = a1[2];
  v6 = a1[3];
  v8 = ((*a2 - *a1) * v7 + 0.0 + (v3 - v4) * v6) / (v7 * v7 + 0.0 + v6 * v6);
  if (v8 >= 0.0)
  {
    if (v8 <= 1.0)
    {
      v7 = v7 * v8;
      v6 = v6 * v8;
    }
    v9 = v4 + v6 - v3;
    v10 = (v5 + v7 - v2) * (v5 + v7 - v2) + 0.0;
  }
  else
  {
    v9 = v4 - v3;
    v10 = (v5 - v2) * (v5 - v2) + 0.0;
  }
  return v10 + v9 * v9;
}

unint64_t GEOTerritoryDataPolygonReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTerritoryDataPolygonReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTerritoryDataPolygonReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTerritoryDataPolygonReadAllFrom_initialTag;
  Specified = GEOTerritoryDataPolygonReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOTerritoryDataPolygonCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_18862C760(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTerritoryDataPolygonReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  _BOOL4 v12;
  int *v13;
  int *v14;
  int *v15;
  _BOOL8 v16;
  _BOOL4 v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int v26;
  int v27;
  unint64_t v29;
  _BOOL4 v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  int *v41;
  _BOOL8 v42;
  GEOTerritoryDataRing *v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  int v51;
  int v52;
  void *v53;
  _BOOL4 v55;
  _BOOL4 v56;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1) + (*(_BYTE *)(a1 + 60) & 1);
  while (1)
  {
    v11 = a3[v8];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v7 = 1;
LABEL_9:
    ++v8;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = (v9 & 1 | v10) != 0;
  if (((v9 & 1 | v10) != 0) | v7 & 1)
    v13 = 0;
  else
    v13 = a3;
  v14 = (int *)MEMORY[0x1E0D82BF0];
  v15 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(v3 + *v6))
  {
    if (v13)
      v16 = (v9 & 1 | v10) != 0;
    else
      v16 = 1;
    if (v8)
      v17 = 1;
    else
      v17 = (v9 & 1 | v10) != 0;
    v56 = v17;
    v18 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(v3 + *v15))
        goto LABEL_82;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      while (1)
      {
        v22 = *v14;
        v23 = *(_QWORD *)(v3 + v22);
        if (v23 == -1 || v23 >= *(_QWORD *)(v3 + *v6))
          break;
        v24 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
        *(_QWORD *)(v3 + v22) = v23 + 1;
        v21 |= (unint64_t)(v24 & 0x7F) << v19;
        if ((v24 & 0x80) == 0)
          goto LABEL_30;
        v19 += 7;
        v25 = v20++ >= 9;
        if (v25)
        {
          v21 = 0;
          v26 = *(unsigned __int8 *)(v3 + *v15);
          goto LABEL_32;
        }
      }
      *(_BYTE *)(v3 + *v15) = 1;
LABEL_30:
      v26 = *(unsigned __int8 *)(v3 + *v15);
      if (*(_BYTE *)(v3 + *v15))
        v21 = 0;
LABEL_32:
      v27 = v21 & 7;
      if (v26 || v27 == 4)
        goto LABEL_82;
      v29 = v21 >> 3;
      v30 = v12;
      if (!v16)
      {
        v31 = v13;
        do
        {
          v33 = *v31++;
          v32 = v33;
          v30 = v33 != 0;
          if (v33)
            v34 = v32 == (_DWORD)v29;
          else
            v34 = 1;
        }
        while (!v34);
      }
      if ((_DWORD)v29 == 2)
        break;
      if ((_DWORD)v29 != 1)
      {
        if (!PBReaderSkipValueWithTag())
          goto LABEL_96;
        goto LABEL_68;
      }
      if (!v30 || (*(_BYTE *)(a1 + 60) & 1) != 0)
        goto LABEL_67;
      if (v27 != 2)
      {
        v44 = 0;
        v45 = 0;
        v46 = 0;
        while (1)
        {
          v47 = *v14;
          v48 = *(_QWORD *)(v3 + v47);
          if (v48 == -1 || v48 >= *(_QWORD *)(v3 + *v6))
            break;
          v49 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v48);
          *(_QWORD *)(v3 + v47) = v48 + 1;
          v46 |= (unint64_t)(v49 & 0x7F) << v44;
          if (v49 < 0)
          {
            v44 += 7;
            v25 = v45++ >= 9;
            if (!v25)
              continue;
          }
          goto LABEL_81;
        }
        *(_BYTE *)(v3 + *v15) = 1;
LABEL_81:
        PBRepeatedUInt32Add();
        goto LABEL_68;
      }
      if (!PBReaderPlaceMark())
        goto LABEL_96;
      while (*(_QWORD *)(v3 + *v14) < *(_QWORD *)(v3 + *v6) && !*(_BYTE *)(v3 + *v15))
      {
        v35 = 0;
        v36 = 0;
        v37 = 0;
        while (1)
        {
          v38 = *v14;
          v39 = *(_QWORD *)(v3 + v38);
          if (v39 == -1 || v39 >= *(_QWORD *)(v3 + *v6))
            break;
          v40 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v39);
          *(_QWORD *)(v3 + v38) = v39 + 1;
          v37 |= (unint64_t)(v40 & 0x7F) << v35;
          if (v40 < 0)
          {
            v35 += 7;
            v25 = v36++ >= 9;
            if (!v25)
              continue;
          }
          goto LABEL_59;
        }
        *(_BYTE *)(v3 + *v15) = 1;
LABEL_59:
        PBRepeatedUInt32Add();
      }
      PBReaderRecallMark();
      if (!v56)
        goto LABEL_82;
LABEL_69:
      if (*(_QWORD *)(v3 + *v14) >= *(_QWORD *)(v3 + *v6))
        goto LABEL_82;
    }
    if (!v30 || (*(_BYTE *)(a1 + 60) & 2) != 0)
    {
LABEL_67:
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_96:
        v50 = 0;
        goto LABEL_84;
      }
    }
    else
    {
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_96;
      v55 = v12;
      v41 = v15;
      v42 = v16;
      v43 = objc_alloc_init(GEOTerritoryDataRing);
      if (!GEOTerritoryDataRingReadAllFrom((uint64_t)v43, (void *)v3))
      {

        v50 = 0;
        v15 = v41;
        v12 = v55;
        goto LABEL_84;
      }
      PBReaderRecallMark();
      -[GEOTerritoryDataPolygon _addNoFlagsHole:](a1, v43);

      v16 = v42;
      v15 = v41;
      v12 = v55;
    }
LABEL_68:
    if (!v56)
      goto LABEL_82;
    goto LABEL_69;
  }
LABEL_82:
  if (!v12)
  {
    if (v13)
    {
      do
      {
        while (1)
        {
          v52 = *v13++;
          v51 = v52;
          if (v52 != 1 && v51 != 2)
            break;
          *(_BYTE *)(a1 + 60) |= v51;
        }
      }
      while (v51);
    }
    goto LABEL_93;
  }
  v50 = 1;
LABEL_84:
  *(_BYTE *)(a1 + 60) |= 1u;
  *(_BYTE *)(a1 + 60) |= 2u;
  if ((v50 & 1) != 0)
  {
LABEL_93:
    v3 = *(_BYTE *)(v3 + *v15) == 0;
    if (v12)
      goto LABEL_94;
    return v3;
  }
  v3 = 0;
  if (!v12)
    return v3;
LABEL_94:
  v53 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

  return v3;
}

geomapregion::Polygon *geomapregion::Polygon::Polygon(geomapregion::Polygon *this, GEOMapRegion *a2)
{
  GEOMapRegion *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  _OWORD *v28;
  double *v29;
  unint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  char *v52;
  char *v53;
  double *v54;
  double *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _OWORD *v68;
  unint64_t v69;
  char *v70;
  char *v71;
  double *v72;
  double v74;
  double v75;
  double *v76;
  double *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  _BYTE v154[128];
  uint64_t v155;

  v155 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  -[GEOMapRegion vertexs](v3, "vertexs");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (!v4)
  {
    if (!-[GEOMapRegion hasRectangleVertices](v3, "hasRectangleVertices"))
      goto LABEL_140;
    -[GEOMapRegion westLng](v3, "westLng");
    v32 = v31;
    -[GEOMapRegion eastLng](v3, "eastLng");
    if (v32 == v33
      && (-[GEOMapRegion northLat](v3, "northLat"), v35 = v34, -[GEOMapRegion southLat](v3, "southLat"), v35 == v36))
    {
      std::vector<geomapregion::Polygon::Point>::reserve((void **)this, 1uLL);
      -[GEOMapRegion westLng](v3, "westLng");
      v38 = v37;
      -[GEOMapRegion northLat](v3, "northLat");
      v40 = v39;
      v42 = (_QWORD *)*((_QWORD *)this + 1);
      v41 = *((_QWORD *)this + 2);
      if ((unint64_t)v42 >= v41)
      {
        v43 = ((uint64_t)v42 - *(_QWORD *)this) >> 4;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 60)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v45 = v41 - *(_QWORD *)this;
        if (v45 >> 3 > v44)
          v44 = v45 >> 3;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
          v46 = 0xFFFFFFFFFFFFFFFLL;
        else
          v46 = v44;
        v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(v46);
        v48 = &v47[16 * v43];
        v50 = &v47[16 * v49];
        *(_QWORD *)v48 = v38;
        *((_QWORD *)v48 + 1) = v40;
        v51 = v48 + 16;
        v53 = *(char **)this;
        v52 = (char *)*((_QWORD *)this + 1);
        if (v52 == *(char **)this)
          goto LABEL_134;
        do
        {
          *((_OWORD *)v48 - 1) = *((_OWORD *)v52 - 1);
          v48 -= 16;
          v52 -= 16;
        }
        while (v52 != v53);
LABEL_133:
        v52 = *(char **)this;
LABEL_134:
        *(_QWORD *)this = v48;
        *((_QWORD *)this + 1) = v51;
        *((_QWORD *)this + 2) = v50;
        if (v52)
          operator delete(v52);
        goto LABEL_136;
      }
    }
    else
    {
      std::vector<geomapregion::Polygon::Point>::reserve((void **)this, 5uLL);
      -[GEOMapRegion westLng](v3, "westLng");
      v62 = v61;
      -[GEOMapRegion northLat](v3, "northLat");
      v64 = v63;
      v66 = (_QWORD *)*((_QWORD *)this + 1);
      v65 = *((_QWORD *)this + 2);
      if ((unint64_t)v66 >= v65)
      {
        v78 = ((uint64_t)v66 - *(_QWORD *)this) >> 4;
        v79 = v78 + 1;
        if ((unint64_t)(v78 + 1) >> 60)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v80 = v65 - *(_QWORD *)this;
        if (v80 >> 3 > v79)
          v79 = v80 >> 3;
        if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF0)
          v81 = 0xFFFFFFFFFFFFFFFLL;
        else
          v81 = v79;
        v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(v81);
        v83 = &v82[16 * v78];
        v85 = &v82[16 * v84];
        *(_QWORD *)v83 = v62;
        *((_QWORD *)v83 + 1) = v64;
        v67 = v83 + 16;
        v87 = *(char **)this;
        v86 = (char *)*((_QWORD *)this + 1);
        if (v86 != *(char **)this)
        {
          do
          {
            *((_OWORD *)v83 - 1) = *((_OWORD *)v86 - 1);
            v83 -= 16;
            v86 -= 16;
          }
          while (v86 != v87);
          v86 = *(char **)this;
        }
        *(_QWORD *)this = v83;
        *((_QWORD *)this + 1) = v67;
        *((_QWORD *)this + 2) = v85;
        if (v86)
          operator delete(v86);
      }
      else
      {
        *v66 = v62;
        v66[1] = v63;
        v67 = v66 + 2;
      }
      *((_QWORD *)this + 1) = v67;
      -[GEOMapRegion eastLng](v3, "eastLng");
      v89 = v88;
      -[GEOMapRegion northLat](v3, "northLat");
      v91 = v90;
      v93 = (_QWORD *)*((_QWORD *)this + 1);
      v92 = *((_QWORD *)this + 2);
      if ((unint64_t)v93 >= v92)
      {
        v95 = ((uint64_t)v93 - *(_QWORD *)this) >> 4;
        v96 = v95 + 1;
        if ((unint64_t)(v95 + 1) >> 60)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v97 = v92 - *(_QWORD *)this;
        if (v97 >> 3 > v96)
          v96 = v97 >> 3;
        if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF0)
          v98 = 0xFFFFFFFFFFFFFFFLL;
        else
          v98 = v96;
        v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(v98);
        v100 = &v99[16 * v95];
        v102 = &v99[16 * v101];
        *(_QWORD *)v100 = v89;
        *((_QWORD *)v100 + 1) = v91;
        v94 = v100 + 16;
        v104 = *(char **)this;
        v103 = (char *)*((_QWORD *)this + 1);
        if (v103 != *(char **)this)
        {
          do
          {
            *((_OWORD *)v100 - 1) = *((_OWORD *)v103 - 1);
            v100 -= 16;
            v103 -= 16;
          }
          while (v103 != v104);
          v103 = *(char **)this;
        }
        *(_QWORD *)this = v100;
        *((_QWORD *)this + 1) = v94;
        *((_QWORD *)this + 2) = v102;
        if (v103)
          operator delete(v103);
      }
      else
      {
        *v93 = v89;
        v93[1] = v90;
        v94 = v93 + 2;
      }
      *((_QWORD *)this + 1) = v94;
      -[GEOMapRegion eastLng](v3, "eastLng");
      v106 = v105;
      -[GEOMapRegion southLat](v3, "southLat");
      v108 = v107;
      v110 = (_QWORD *)*((_QWORD *)this + 1);
      v109 = *((_QWORD *)this + 2);
      if ((unint64_t)v110 >= v109)
      {
        v112 = ((uint64_t)v110 - *(_QWORD *)this) >> 4;
        v113 = v112 + 1;
        if ((unint64_t)(v112 + 1) >> 60)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v114 = v109 - *(_QWORD *)this;
        if (v114 >> 3 > v113)
          v113 = v114 >> 3;
        if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0)
          v115 = 0xFFFFFFFFFFFFFFFLL;
        else
          v115 = v113;
        v116 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(v115);
        v117 = &v116[16 * v112];
        v119 = &v116[16 * v118];
        *(_QWORD *)v117 = v106;
        *((_QWORD *)v117 + 1) = v108;
        v111 = v117 + 16;
        v121 = *(char **)this;
        v120 = (char *)*((_QWORD *)this + 1);
        if (v120 != *(char **)this)
        {
          do
          {
            *((_OWORD *)v117 - 1) = *((_OWORD *)v120 - 1);
            v117 -= 16;
            v120 -= 16;
          }
          while (v120 != v121);
          v120 = *(char **)this;
        }
        *(_QWORD *)this = v117;
        *((_QWORD *)this + 1) = v111;
        *((_QWORD *)this + 2) = v119;
        if (v120)
          operator delete(v120);
      }
      else
      {
        *v110 = v106;
        v110[1] = v107;
        v111 = v110 + 2;
      }
      *((_QWORD *)this + 1) = v111;
      -[GEOMapRegion westLng](v3, "westLng");
      v123 = v122;
      -[GEOMapRegion southLat](v3, "southLat");
      v125 = v124;
      v127 = (_QWORD *)*((_QWORD *)this + 1);
      v126 = *((_QWORD *)this + 2);
      if ((unint64_t)v127 >= v126)
      {
        v129 = ((uint64_t)v127 - *(_QWORD *)this) >> 4;
        v130 = v129 + 1;
        if ((unint64_t)(v129 + 1) >> 60)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v131 = v126 - *(_QWORD *)this;
        if (v131 >> 3 > v130)
          v130 = v131 >> 3;
        if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF0)
          v132 = 0xFFFFFFFFFFFFFFFLL;
        else
          v132 = v130;
        v133 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(v132);
        v134 = &v133[16 * v129];
        v136 = &v133[16 * v135];
        *(_QWORD *)v134 = v123;
        *((_QWORD *)v134 + 1) = v125;
        v128 = v134 + 16;
        v138 = *(char **)this;
        v137 = (char *)*((_QWORD *)this + 1);
        if (v137 != *(char **)this)
        {
          do
          {
            *((_OWORD *)v134 - 1) = *((_OWORD *)v137 - 1);
            v134 -= 16;
            v137 -= 16;
          }
          while (v137 != v138);
          v137 = *(char **)this;
        }
        *(_QWORD *)this = v134;
        *((_QWORD *)this + 1) = v128;
        *((_QWORD *)this + 2) = v136;
        if (v137)
          operator delete(v137);
      }
      else
      {
        *v127 = v123;
        v127[1] = v124;
        v128 = v127 + 2;
      }
      *((_QWORD *)this + 1) = v128;
      -[GEOMapRegion westLng](v3, "westLng");
      v38 = v139;
      -[GEOMapRegion northLat](v3, "northLat");
      v40 = v140;
      v42 = (_QWORD *)*((_QWORD *)this + 1);
      v141 = *((_QWORD *)this + 2);
      if ((unint64_t)v42 >= v141)
      {
        v142 = ((uint64_t)v42 - *(_QWORD *)this) >> 4;
        v143 = v142 + 1;
        if ((unint64_t)(v142 + 1) >> 60)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v144 = v141 - *(_QWORD *)this;
        if (v144 >> 3 > v143)
          v143 = v144 >> 3;
        if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF0)
          v145 = 0xFFFFFFFFFFFFFFFLL;
        else
          v145 = v143;
        v146 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(v145);
        v48 = &v146[16 * v142];
        v50 = &v146[16 * v147];
        *(_QWORD *)v48 = v38;
        *((_QWORD *)v48 + 1) = v40;
        v51 = v48 + 16;
        v148 = *(char **)this;
        v52 = (char *)*((_QWORD *)this + 1);
        if (v52 == *(char **)this)
          goto LABEL_134;
        do
        {
          *((_OWORD *)v48 - 1) = *((_OWORD *)v52 - 1);
          v48 -= 16;
          v52 -= 16;
        }
        while (v52 != v148);
        goto LABEL_133;
      }
    }
    *v42 = v38;
    v42[1] = v40;
    v51 = v42 + 2;
LABEL_136:
    *((_QWORD *)this + 1) = v51;
    goto LABEL_140;
  }
  std::vector<geomapregion::Polygon::Point>::reserve((void **)this, objc_msgSend(v4, "count"));
  v152 = 0u;
  v153 = 0u;
  v150 = 0u;
  v151 = 0u;
  v6 = v5;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v150, v154, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v151;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v151 != v8)
          objc_enumerationMutation(v6);
        v10 = *(void **)(*((_QWORD *)&v150 + 1) + 8 * i);
        objc_msgSend(v10, "lng", (_QWORD)v150);
        v12 = v11;
        objc_msgSend(v10, "lat");
        v14 = v13;
        v16 = (_QWORD *)*((_QWORD *)this + 1);
        v15 = *((_QWORD *)this + 2);
        if ((unint64_t)v16 >= v15)
        {
          v18 = ((uint64_t)v16 - *(_QWORD *)this) >> 4;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 60)
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          v20 = v15 - *(_QWORD *)this;
          if (v20 >> 3 > v19)
            v19 = v20 >> 3;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
            v21 = 0xFFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(v21);
          v24 = &v22[16 * v18];
          *(_QWORD *)v24 = v12;
          *((_QWORD *)v24 + 1) = v14;
          v26 = *(char **)this;
          v25 = (char *)*((_QWORD *)this + 1);
          v27 = v24;
          if (v25 != *(char **)this)
          {
            do
            {
              *((_OWORD *)v27 - 1) = *((_OWORD *)v25 - 1);
              v27 -= 16;
              v25 -= 16;
            }
            while (v25 != v26);
            v25 = *(char **)this;
          }
          v17 = v24 + 16;
          *(_QWORD *)this = v27;
          *((_QWORD *)this + 1) = v24 + 16;
          *((_QWORD *)this + 2) = &v22[16 * v23];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *v16 = v12;
          v16[1] = v13;
          v17 = v16 + 2;
        }
        *((_QWORD *)this + 1) = v17;
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v150, v154, 16);
    }
    while (v7);
  }

  v29 = *(double **)this;
  v28 = (_OWORD *)*((_QWORD *)this + 1);
  if (*(_OWORD **)this == v28)
  {
    v54 = *(double **)this;
    v55 = *(double **)this;
  }
  else
  {
    v30 = *((_QWORD *)this + 2);
    if ((unint64_t)v28 >= v30)
    {
      v56 = ((char *)v28 - (char *)v29) >> 4;
      v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 60)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v58 = v30 - (_QWORD)v29;
      if (v58 >> 3 > v57)
        v57 = v58 >> 3;
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0)
        v59 = 0xFFFFFFFFFFFFFFFLL;
      else
        v59 = v57;
      if (v59)
        v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(v59);
      else
        v60 = 0;
      v68 = (_OWORD *)(v59 + 16 * v56);
      v69 = v59 + 16 * v60;
      *v68 = *(_OWORD *)v29;
      v29 = (double *)(v68 + 1);
      v71 = *(char **)this;
      v70 = (char *)*((_QWORD *)this + 1);
      if (v70 != *(char **)this)
      {
        do
        {
          *--v68 = *((_OWORD *)v70 - 1);
          v70 -= 16;
        }
        while (v70 != v71);
        v70 = *(char **)this;
      }
      *(_QWORD *)this = v68;
      *((_QWORD *)this + 1) = v29;
      *((_QWORD *)this + 2) = v69;
      if (v70)
        operator delete(v70);
    }
    else
    {
      *v28 = *(_OWORD *)v29;
      v29 = (double *)(v28 + 1);
    }
    *((_QWORD *)this + 1) = v29;
    v55 = *(double **)this;
    v54 = v29;
  }
  v72 = v55 + 2;
  if (v55 != v54 && v72 != v54)
  {
    v74 = *v55;
    while (1)
    {
      v75 = v74;
      v74 = *v72;
      if (vabdd_f64(v75, *v72) < 0.00000001 && vabdd_f64(*(v72 - 1), v72[1]) < 0.00000001)
        break;
      v72 += 2;
      v55 += 2;
      if (v72 == v54)
        goto LABEL_138;
    }
    v76 = v72 - 2;
    if (v72 - 2 == v54)
    {
      v54 = v55;
    }
    else
    {
      v77 = v72 + 2;
      if (v72 + 2 != v54)
      {
        do
        {
          if (vabdd_f64(*v76, *v77) >= 0.00000001 || vabdd_f64(v76[1], v77[1]) >= 0.00000001)
          {
            *((_OWORD *)v76 + 1) = *(_OWORD *)v77;
            v76 += 2;
          }
          v77 += 2;
        }
        while (v77 != v54);
        v29 = (double *)*((_QWORD *)this + 1);
      }
      v54 = v76 + 2;
    }
  }
LABEL_138:
  if (v29 != v54)
    *((_QWORD *)this + 1) = v54;
LABEL_140:

  return this;
}

void sub_18862D5A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v5;

  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(a1);
}

void std::vector<geomapregion::Polygon::Point>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF0];
    v7 = &v4[16 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v8 - 1);
        v10 -= 16;
        v8 -= 16;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

BOOL GEOTerritoryDataRingReadAllFrom(uint64_t a1, void *a2)
{
  char *v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  _BOOL8 v29;

  v2 = a2;
  objc_sync_enter(v2);
  if (v2)
  {
    v3 = (int *)MEMORY[0x1E0D82BF0];
    v4 = (int *)MEMORY[0x1E0D82BD8];
    v5 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v2[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v2[*MEMORY[0x1E0D82BD8]])
    {
      v6 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v2[*v5])
          break;
        v7 = 0;
        v8 = 0;
        v9 = 0;
        while (1)
        {
          v10 = *v3;
          v11 = *(_QWORD *)&v2[v10];
          if (v11 == -1 || v11 >= *(_QWORD *)&v2[*v4])
            break;
          v12 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v11);
          *(_QWORD *)&v2[v10] = v11 + 1;
          v9 |= (unint64_t)(v12 & 0x7F) << v7;
          if ((v12 & 0x80) == 0)
            goto LABEL_13;
          v7 += 7;
          v13 = v8++ >= 9;
          if (v13)
          {
            v9 = 0;
            v14 = v2[*v5];
            goto LABEL_15;
          }
        }
        v2[*v5] = 1;
LABEL_13:
        v14 = v2[*v5];
        if (v2[*v5])
          v9 = 0;
LABEL_15:
        v15 = v9 & 7;
        if (v14 || v15 == 4)
          break;
        if ((v9 >> 3) == 1)
        {
          if (v15 == 2)
          {
            if (!PBReaderPlaceMark())
              goto LABEL_47;
            while (*(_QWORD *)&v2[*v3] < *(_QWORD *)&v2[*v4] && !v2[*v5])
            {
              v17 = 0;
              v18 = 0;
              v19 = 0;
              while (1)
              {
                v20 = *v3;
                v21 = *(_QWORD *)&v2[v20];
                if (v21 == -1 || v21 >= *(_QWORD *)&v2[*v4])
                  break;
                v22 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v21);
                *(_QWORD *)&v2[v20] = v21 + 1;
                v19 |= (unint64_t)(v22 & 0x7F) << v17;
                if (v22 < 0)
                {
                  v17 += 7;
                  v13 = v18++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_32;
              }
              v2[*v5] = 1;
LABEL_32:
              PBRepeatedUInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v26 = *v3;
              v27 = *(_QWORD *)&v2[v26];
              if (v27 == -1 || v27 >= *(_QWORD *)&v2[*v4])
                break;
              v28 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v27);
              *(_QWORD *)&v2[v26] = v27 + 1;
              v25 |= (unint64_t)(v28 & 0x7F) << v23;
              if (v28 < 0)
              {
                v23 += 7;
                v13 = v24++ >= 9;
                if (!v13)
                  continue;
              }
              goto LABEL_44;
            }
            v2[*v5] = 1;
LABEL_44:
            PBRepeatedUInt32Add();
          }
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_47;
        }
      }
      while (*(_QWORD *)&v2[*v3] < *(_QWORD *)&v2[*v4]);
    }
    v29 = v2[*v5] == 0;
  }
  else
  {
LABEL_47:
    v29 = 0;
  }
  objc_sync_exit(v2);

  return v29;
}

void sub_18862DA4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOConfigRegisterStateCaptureFunctions(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;

  os_unfair_lock_lock_with_options();
  if (a1)
  {
    v4 = (void *)qword_1ECDBCBF8;
    if (!qword_1ECDBCBF8)
    {
      objc_msgSend(MEMORY[0x1E0CB3868], "pointerArrayWithOptions:", 258);
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = (void *)qword_1ECDBCBF8;
      qword_1ECDBCBF8 = v5;

      v4 = (void *)qword_1ECDBCBF8;
    }
    objc_msgSend(v4, "addPointer:", a1);
  }
  if (a2)
  {
    v7 = (void *)qword_1ECDBCC00;
    if (!qword_1ECDBCC00)
    {
      objc_msgSend(MEMORY[0x1E0CB3868], "pointerArrayWithOptions:", 258);
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = (void *)qword_1ECDBCC00;
      qword_1ECDBCC00 = v8;

      v7 = (void *)qword_1ECDBCC00;
    }
    objc_msgSend(v7, "addPointer:", a2);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_334);
}

void sub_18862E6CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void GEOPDPlaceRequestParametersClearSensitiveFields(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  id *v6;
  unsigned int v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id *v12;
  int HasSensitiveFields;
  void *v14;
  void *v15;
  void *v16;
  int v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  unsigned int v36;
  void *v37;
  void *v38;
  void *v39;
  id *v40;
  unsigned int v41;
  void *v42;
  void *v43;
  id *v44;
  int v45;
  void *v46;
  void *v47;
  void *v48;
  int v49;
  void *v50;
  void *v51;
  void *v52;
  int v53;
  void *v54;
  void *v55;
  id *v56;
  int v57;
  void *v58;
  void *v59;
  void *v60;
  int v61;
  void *v62;
  id v63;

  if (a1)
    v5 = a3;
  else
    v5 = 0;
  if (v5 == 1
    && (-[GEOPDPlaceRequestParameters _readSearchParameters](a1), *(_QWORD *)(a1 + 376))
    && (-[GEOPDPlaceRequestParameters searchParameters]((id *)a1),
        v6 = (id *)objc_claimAutoreleasedReturnValue(),
        v7 = GEOPDSearchParametersHasSensitiveFields(v6, a2),
        v6,
        v7))
  {
    -[GEOPDPlaceRequestParameters searchParameters]((id *)a1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(v8, "copy");

    GEOPDSearchParametersClearSensitiveFields((uint64_t)v9, a2, 0);
    -[GEOPDPlaceRequestParameters setSearchParameters:](a1, v9);

  }
  else
  {
    -[GEOPDPlaceRequestParameters searchParameters]((id *)a1);
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = (void *)v10;
    if (v10)
      GEOPDSearchParametersClearSensitiveFields(v10, a2, 1);

    if (!v5)
      goto LABEL_17;
  }
  -[GEOPDPlaceRequestParameters _readReverseGeocodingParameters](a1);
  if (*(_QWORD *)(a1 + 352))
  {
    -[GEOPDPlaceRequestParameters reverseGeocodingParameters]((id *)a1);
    v12 = (id *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEOPDReverseGeocodingParametersHasSensitiveFields(v12);

    if (HasSensitiveFields)
    {
      -[GEOPDPlaceRequestParameters reverseGeocodingParameters]((id *)a1);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (void *)objc_msgSend(v14, "copy");

      GEOPDReverseGeocodingParametersClearSensitiveFields((uint64_t)v15, a2, 0);
      -[GEOPDPlaceRequestParameters setReverseGeocodingParameters:](a1, v15);

      goto LABEL_14;
    }
  }
LABEL_17:
  -[GEOPDPlaceRequestParameters reverseGeocodingParameters]((id *)a1);
  v20 = objc_claimAutoreleasedReturnValue();
  v21 = (void *)v20;
  if (v20)
    GEOPDReverseGeocodingParametersClearSensitiveFields(v20, a2, 1);

  if (!v5)
  {
    -[GEOPDPlaceRequestParameters merchantLookupParameters]((id *)a1);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "clearSensitiveFields:", a2);

    goto LABEL_21;
  }
LABEL_14:
  -[GEOPDPlaceRequestParameters _readMerchantLookupParameters](a1);
  if (*(_QWORD *)(a1 + 248)
    && (-[GEOPDPlaceRequestParameters merchantLookupParameters]((id *)a1),
        v16 = (void *)objc_claimAutoreleasedReturnValue(),
        v17 = GEOPDMerchantLookupParametersHasSensitiveFields(v16),
        v16,
        v17))
  {
    -[GEOPDPlaceRequestParameters merchantLookupParameters]((id *)a1);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = (void *)objc_msgSend(v18, "copy");

    GEOPDMerchantLookupParametersClearSensitiveFields(v19, a2, 0);
    -[GEOPDPlaceRequestParameters setMerchantLookupParameters:](a1, v19);
  }
  else
  {
    -[GEOPDPlaceRequestParameters merchantLookupParameters]((id *)a1);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "clearSensitiveFields:", a2);
  }

  -[GEOPDPlaceRequestParameters _readAutocompleteParameters](a1);
  if (*(_QWORD *)(a1 + 64))
  {
    -[GEOPDPlaceRequestParameters autocompleteParameters]((id *)a1);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = GEOPDAutocompleteParametersHasSensitiveFields(v35, a2);

    if (v36)
    {
      -[GEOPDPlaceRequestParameters autocompleteParameters]((id *)a1);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = (void *)objc_msgSend(v37, "copy");

      objc_msgSend(v38, "allEntriesWithBrowse");
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "clearSensitiveFields:", a2);

      -[GEOPDPlaceRequestParameters setAutocompleteParameters:](a1, v38);
      goto LABEL_44;
    }
  }
LABEL_21:
  -[GEOPDPlaceRequestParameters autocompleteParameters]((id *)a1);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v23, "clearSensitiveFields:", a2);

  if (!v5)
    goto LABEL_22;
LABEL_44:
  -[GEOPDPlaceRequestParameters _readExternalTransitLookupParameters](a1);
  if (!*(_QWORD *)(a1 + 168)
    || (-[GEOPDPlaceRequestParameters externalTransitLookupParameters]((id *)a1),
        v40 = (id *)objc_claimAutoreleasedReturnValue(),
        v41 = GEOPDExternalTransitLookupParametersHasSensitiveFields(v40),
        v40,
        !v41))
  {
LABEL_22:
    -[GEOPDPlaceRequestParameters externalTransitLookupParameters]((id *)a1);
    v24 = objc_claimAutoreleasedReturnValue();
    v25 = (void *)v24;
    if (v24)
      GEOPDExternalTransitLookupParametersClearSensitiveFields(v24, a2, 1);

    if (!v5)
      goto LABEL_25;
    goto LABEL_47;
  }
  -[GEOPDPlaceRequestParameters externalTransitLookupParameters]((id *)a1);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = (void *)objc_msgSend(v42, "copy");

  GEOPDExternalTransitLookupParametersClearSensitiveFields((uint64_t)v43, a2, 0);
  -[GEOPDPlaceRequestParameters setExternalTransitLookupParameters:](a1, v43);

LABEL_47:
  -[GEOPDPlaceRequestParameters _readBatchReverseGeocodingParameters](a1);
  if (*(_QWORD *)(a1 + 96))
  {
    -[GEOPDPlaceRequestParameters batchReverseGeocodingParameters]((id *)a1);
    v44 = (id *)objc_claimAutoreleasedReturnValue();
    v45 = GEOPDBatchReverseGeocodingParametersHasSensitiveFields(v44);

    if (v45)
    {
      -[GEOPDPlaceRequestParameters batchReverseGeocodingParameters]((id *)a1);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      v47 = (void *)objc_msgSend(v46, "copy");

      GEOPDBatchReverseGeocodingParametersClearSensitiveFields((uint64_t)v47, a2, 0);
      -[GEOPDPlaceRequestParameters setBatchReverseGeocodingParameters:](a1, v47);

      goto LABEL_50;
    }
  }
LABEL_25:
  -[GEOPDPlaceRequestParameters batchReverseGeocodingParameters]((id *)a1);
  v26 = objc_claimAutoreleasedReturnValue();
  v27 = (void *)v26;
  if (v26)
    GEOPDBatchReverseGeocodingParametersClearSensitiveFields(v26, a2, 1);

  if (!v5)
  {
LABEL_28:
    -[GEOPDPlaceRequestParameters wifiFingerprintParameters]((id *)a1);
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = (void *)v28;
    if (v28)
      GEOPDWifiFingerprintParametersClearSensitiveFields(v28, a2, 1);

    if (!v5)
      goto LABEL_31;
    goto LABEL_53;
  }
LABEL_50:
  -[GEOPDPlaceRequestParameters _readWifiFingerprintParameters](a1);
  if (!*(_QWORD *)(a1 + 456))
    goto LABEL_28;
  -[GEOPDPlaceRequestParameters wifiFingerprintParameters]((id *)a1);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  v49 = GEOPDWifiFingerprintParametersHasSensitiveFields((uint64_t)v48);

  if (!v49)
    goto LABEL_28;
  -[GEOPDPlaceRequestParameters wifiFingerprintParameters]((id *)a1);
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  v51 = (void *)objc_msgSend(v50, "copy");

  GEOPDWifiFingerprintParametersClearSensitiveFields((uint64_t)v51, a2, 0);
  -[GEOPDPlaceRequestParameters setWifiFingerprintParameters:](a1, v51);

LABEL_53:
  -[GEOPDPlaceRequestParameters _readGroundViewLabelParameters](a1);
  if (*(_QWORD *)(a1 + 192))
  {
    -[GEOPDPlaceRequestParameters groundViewLabelParameters]((id *)a1);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    v53 = GEOPDGroundViewLabelParametersHasSensitiveFields((uint64_t)v52);

    if (v53)
    {
      -[GEOPDPlaceRequestParameters groundViewLabelParameters]((id *)a1);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      v55 = (void *)objc_msgSend(v54, "copy");

      GEOPDGroundViewLabelParametersClearSensitiveFields((uint64_t)v55, a2, 0);
      -[GEOPDPlaceRequestParameters setGroundViewLabelParameters:](a1, v55);

      goto LABEL_56;
    }
  }
LABEL_31:
  -[GEOPDPlaceRequestParameters groundViewLabelParameters]((id *)a1);
  v30 = objc_claimAutoreleasedReturnValue();
  v31 = (void *)v30;
  if (v30)
    GEOPDGroundViewLabelParametersClearSensitiveFields(v30, a2, 1);

  if (!v5)
  {
LABEL_34:
    -[GEOPDPlaceRequestParameters transitNearbyScheduleLookupParameters]((id *)a1);
    v32 = objc_claimAutoreleasedReturnValue();
    v33 = (void *)v32;
    if (v32)
      GEOPDTransitNearbyScheduleLookupParametersClearSensitiveFields(v32, a2, 1);

    if (!v5)
      goto LABEL_37;
    goto LABEL_59;
  }
LABEL_56:
  -[GEOPDPlaceRequestParameters _readTransitNearbyScheduleLookupParameters](a1);
  if (!*(_QWORD *)(a1 + 424))
    goto LABEL_34;
  -[GEOPDPlaceRequestParameters transitNearbyScheduleLookupParameters]((id *)a1);
  v56 = (id *)objc_claimAutoreleasedReturnValue();
  v57 = GEOPDTransitNearbyScheduleLookupParametersHasSensitiveFields(v56);

  if (!v57)
    goto LABEL_34;
  -[GEOPDPlaceRequestParameters transitNearbyScheduleLookupParameters]((id *)a1);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  v59 = (void *)objc_msgSend(v58, "copy");

  GEOPDTransitNearbyScheduleLookupParametersClearSensitiveFields((uint64_t)v59, a2, 0);
  -[GEOPDPlaceRequestParameters setTransitNearbyScheduleLookupParameters:](a1, v59);

LABEL_59:
  -[GEOPDPlaceRequestParameters _readTransitNearbyPaymentMethodLookupParameters](a1);
  if (*(_QWORD *)(a1 + 416))
  {
    -[GEOPDPlaceRequestParameters transitNearbyPaymentMethodLookupParameters]((id *)a1);
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    v61 = GEOPDTransitNearbyPaymentMethodLookupParametersHasSensitiveFields((uint64_t)v60);

    if (v61)
    {
      -[GEOPDPlaceRequestParameters transitNearbyPaymentMethodLookupParameters]((id *)a1);
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      v63 = (id)objc_msgSend(v62, "copy");

      GEOPDTransitNearbyPaymentMethodLookupParametersClearSensitiveFields((uint64_t)v63, a2, 0);
      -[GEOPDPlaceRequestParameters setTransitNearbyPaymentMethodLookupParameters:](a1, v63);
      goto LABEL_39;
    }
  }
LABEL_37:
  -[GEOPDPlaceRequestParameters transitNearbyPaymentMethodLookupParameters]((id *)a1);
  v34 = objc_claimAutoreleasedReturnValue();
  if (v34)
  {
    v63 = (id)v34;
    GEOPDTransitNearbyPaymentMethodLookupParametersClearSensitiveFields(v34, a2, 1);
  }
  else
  {
    v63 = 0;
  }
LABEL_39:

}

void sub_188630130(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18863021C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188630308(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886303F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886304E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886305CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886306B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886307A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188630890(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188630978(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDReverseGeocodingParametersClearSensitiveFields(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t result;
  unint64_t i;
  uint64_t v8;
  void *v9;
  _DWORD *v10;

  -[GEOPDReverseGeocodingParameters _readExtendedLocations](a1);
  result = objc_msgSend(*(id *)(a1 + 24), "count");
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      objc_msgSend(*(id *)(a1 + 24), "objectAtIndexedSubscript:", i);
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = (void *)v8;
      if (a3 && GEOLocationHasSensitiveFields(v8))
      {
        v10 = (_DWORD *)objc_msgSend(v9, "copy");
        GEOLocationClearSensitiveFields(v10);
        objc_msgSend(*(id *)(a1 + 24), "replaceObjectAtIndex:withObject:", i, v10);

      }
      else
      {
        objc_msgSend(v9, "clearSensitiveFields:", a2);
      }

      result = objc_msgSend(*(id *)(a1 + 24), "count");
    }
  }
  return result;
}

uint64_t GEOLocationClearSensitiveFields(_DWORD *a1)
{
  int v2;
  uint64_t result;
  int v4;

  v2 = a1[45];
  if ((v2 & 0x20) != 0)
  {
    a1[45] = v2 | 0x2000000;
    a1[45] &= ~0x20u;
    v2 = a1[45];
    if ((v2 & 0x80000) == 0)
    {
LABEL_3:
      if ((v2 & 0x100000) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  a1[45] = v2 | 0x2000000;
  a1[45] &= ~0x80000u;
  v2 = a1[45];
  if ((v2 & 0x100000) == 0)
  {
LABEL_4:
    if ((v2 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  a1[45] = v2 | 0x2000000;
  a1[45] &= ~0x100000u;
  v2 = a1[45];
  if ((v2 & 0x100) == 0)
  {
LABEL_5:
    if ((v2 & 0x8000) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_17:
  a1[45] = v2 | 0x2000000;
  a1[45] &= ~0x100u;
  v2 = a1[45];
  if ((v2 & 0x8000) != 0)
  {
LABEL_6:
    a1[45] = v2 | 0x2000000;
    a1[45] &= ~0x8000u;
  }
LABEL_7:
  result = objc_msgSend(a1, "setRawCoordinate:", 0);
  v4 = a1[45];
  if ((v4 & 0x10) != 0)
  {
    a1[45] = v4 | 0x2000000;
    a1[45] &= ~0x10u;
    v4 = a1[45];
    if ((v4 & 0x4000) == 0)
    {
LABEL_9:
      if ((v4 & 0x1000) == 0)
        goto LABEL_10;
      goto LABEL_21;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_9;
  }
  a1[45] = v4 | 0x2000000;
  a1[45] &= ~0x4000u;
  v4 = a1[45];
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  a1[45] = v4 | 0x2000000;
  a1[45] &= ~0x1000u;
  v4 = a1[45];
  if ((v4 & 0x10000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0)
      return result;
    goto LABEL_12;
  }
LABEL_22:
  a1[45] = v4 | 0x2000000;
  a1[45] &= ~0x10000u;
  v4 = a1[45];
  if ((v4 & 0x20000) == 0)
    return result;
LABEL_12:
  a1[45] = v4 | 0x2000000;
  a1[45] &= ~0x20000u;
  return result;
}

void sub_188631F50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188632040(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18863215C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188632270(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t MapsFeature_IsEnabled_FlexibleActionLinks()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_FlexibleActionLinksEnabled, (uint64_t)off_1EDF4B248);
}

void sub_188632808(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188632A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_188632CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 160), 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_188632EF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  _Unwind_Resume(a1);
}

void sub_188633E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *a42)
{
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;

  __cxa_guard_abort(&qword_1ECDBCBC8);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);

  _Unwind_Resume(a1);
}

void sub_18863438C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18863477C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188634C50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188634D68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOIsFeatureActive(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  char isKindOfClass;
  void *v8;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v1 = a1;
  if (qword_1ECDBCAC8 != -1)
    dispatch_once(&qword_1ECDBCAC8, &__block_literal_global_186);
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v10 = MEMORY[0x1E0C809B0];
  v2 = v1;
  v11 = v2;
  geo_isolate_sync();
  if (*((_BYTE *)v13 + 24))
  {
    v3 = 1;
  }
  else
  {
    _getValue(GeoServicesConfig_ClientAuthFeatureFlagsStateInfo, (uint64_t)off_1EDF4DE08, 1, 0, 0, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectForKeyedSubscript:", v2, v10, 3221225472, __GEOIsFeatureActive_block_invoke_5, &unk_1E1C00760, v2, &v12);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0
      && (objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("active")),
          v6 = (void *)objc_claimAutoreleasedReturnValue(),
          objc_opt_class(),
          isKindOfClass = objc_opt_isKindOfClass(),
          v6,
          (isKindOfClass & 1) != 0))
    {
      objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("active"));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = objc_msgSend(v8, "BOOLValue");

    }
    else
    {
      v3 = 0;
    }

  }
  _Block_object_dispose(&v12, 8);

  return v3;
}

void sub_1886350B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18863521C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886352D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188635394(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886354BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

long double GEOMapPointsPerMeterAtLatitude(double a1)
{
  double v2;
  long double v3;
  long double v4;
  long double v5;
  double v6;
  double v7;
  double v8;

  v2 = a1 * 0.0174532925;
  v3 = cos(v2 + v2) * -559.82 + 111132.92;
  v4 = v3 + cos(v2 * 4.0) * 1.175;
  v5 = v4 + cos(v2 * 6.0) * -0.0023;
  GEOTilePointForCoordinate(a1 + -0.5, 0.0, 20.0);
  v7 = v6;
  GEOTilePointForCoordinate(a1 + 0.5, 0.0, 20.0);
  return vabdd_f64(v8, v7) / v5;
}

void sub_188635744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188635828(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188635A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188635BDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188635E94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDBoundsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDBoundsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDBoundsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDBoundsReadAllFrom_initialTag;
  Specified = GEOPDBoundsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDBoundsCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_188636028(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDBoundsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  int *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  GEOMapRegion *v38;
  uint64_t v39;
  id v40;
  void *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  void *v48;
  char v49;
  char v50;
  uint64_t v51;
  int v52;
  char v53;
  void *v54;
  int v56;
  int *v57;
  char v58;
  char v59;
  char v60;
  char v61;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = v6;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 68)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFEFFFBFFFCFFFDLL) & 0xFF01FF01FF01FF01));
  while (2)
  {
    v14 = 1;
    v15 = 1;
    v16 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
        v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v17 = v13 > 1;
        v58 = v17 & ~(_BYTE)v12 | v10;
        v59 = v17 | v12 | v58;
        if ((((v17 | v12) | v9) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        v60 = (v18 == 0) | v17 | v12;
        v61 = v17 | v12;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        v20 = (int *)MEMORY[0x1E0D82BC8];
        v21 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v13;
LABEL_7:
        v14 = v10;
LABEL_8:
        v15 = v11;
        v16 = v12;
LABEL_10:
        ++v8;
        v10 = v14;
        v11 = v15;
        v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v7) || *(_BYTE *)(v3 + *v20))
      goto LABEL_85;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v19;
      v26 = *(_QWORD *)(v3 + v25);
      v27 = v26 + 1;
      if (v26 == -1 || v27 > *(_QWORD *)(v3 + *v7))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v26);
      *(_QWORD *)(v3 + v25) = v27;
      v24 |= (unint64_t)(v28 & 0x7F) << v22;
      if ((v28 & 0x80) == 0)
        goto LABEL_25;
      v22 += 7;
      if (v23++ >= 9)
      {
        v24 = 0;
        v30 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v20) = 1;
LABEL_25:
    v30 = *(unsigned __int8 *)(v3 + *v20);
    if (*(_BYTE *)(v3 + *v20))
      v24 = 0;
LABEL_27:
    if (v30 || (v24 & 7) == 4)
    {
LABEL_85:
      v56 = 1;
      goto LABEL_86;
    }
    v32 = v24 >> 3;
    v33 = v61;
    if ((v60 & 1) == 0)
    {
      v34 = v18;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    switch((int)v32)
    {
      case 1:
        if (!v33)
          goto LABEL_69;
        if ((*(_BYTE *)(a1 + 68) & 0x10) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_103;
          v38 = objc_alloc_init(GEOMapRegion);
          if (GEOMapRegionReadAllFrom((uint64_t)v38, (void *)v3))
          {
            PBReaderRecallMark();
            v39 = 32;
            goto LABEL_68;
          }
          goto LABEL_102;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_103;
        v50 = 8 * *(_BYTE *)(a1 + 68);
        goto LABEL_77;
      case 2:
        if (!v33)
          goto LABEL_69;
        if ((*(_BYTE *)(a1 + 68) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_103;
          v50 = 16 * *(_BYTE *)(a1 + 68);
          goto LABEL_77;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_103;
        v38 = objc_alloc_init(GEOMapRegion);
        if (!GEOMapRegionReadAllFrom((uint64_t)v38, (void *)v3))
          goto LABEL_102;
        PBReaderRecallMark();
        v39 = 24;
        goto LABEL_68;
      case 3:
        if ((v9 & 1) == 0)
          goto LABEL_69;
        *(_BYTE *)(a1 + 68) |= 2u;
        v43 = *v19;
        v44 = *(_QWORD *)(v3 + v43);
        if (v44 <= 0xFFFFFFFFFFFFFFFBLL && v44 + 4 <= *(_QWORD *)(v3 + *v7))
        {
          v45 = *(_DWORD *)(*(_QWORD *)(v3 + *v21) + v44);
          *(_QWORD *)(v3 + v43) = v44 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v20) = 1;
          v45 = 0;
        }
        v51 = 64;
        goto LABEL_83;
      case 4:
        if ((v9 & 1) == 0)
          goto LABEL_69;
        *(_BYTE *)(a1 + 68) |= 1u;
        v46 = *v19;
        v47 = *(_QWORD *)(v3 + v46);
        if (v47 <= 0xFFFFFFFFFFFFFFFBLL && v47 + 4 <= *(_QWORD *)(v3 + *v7))
        {
          v45 = *(_DWORD *)(*(_QWORD *)(v3 + *v21) + v47);
          *(_QWORD *)(v3 + v46) = v47 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v20) = 1;
          v45 = 0;
        }
        v51 = 60;
LABEL_83:
        *(_DWORD *)(a1 + v51) = v45;
        goto LABEL_84;
      case 5:
        if (!v33)
          goto LABEL_69;
        if ((*(_BYTE *)(a1 + 68) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_103;
          v50 = 4 * *(_BYTE *)(a1 + 68);
LABEL_77:
          v8 += v50 >> 7;
LABEL_78:
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          goto LABEL_84;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_103;
        v38 = objc_alloc_init(GEOPDViewportFrame);
        if (GEOPDViewportFrameReadAllFrom((uint64_t)v38, (void *)v3, v11 & 1))
        {
          PBReaderRecallMark();
          v39 = 40;
LABEL_68:
          v48 = *(void **)(a1 + v39);
          *(_QWORD *)(a1 + v39) = v38;

          --v8;
          goto LABEL_78;
        }
LABEL_102:

LABEL_103:
        v56 = 0;
        v57 = &OBJC_IVAR___GEOXPCReply__methodName;
        v20 = (int *)MEMORY[0x1E0D82BC8];
LABEL_87:
        if ((v58 & 1) != 0)
LABEL_88:
          *(_BYTE *)(a1 + v57[631]) |= 4u;
        if (v61 & 1 | ((v56 & 1) == 0))
        {
          *(_BYTE *)(a1 + v57[631]) |= 0x10u;
          *(_BYTE *)(a1 + v57[631]) |= 8u;
          *(_BYTE *)(a1 + v57[631]) |= 0x20u;
        }
        else if (v18)
        {
          while (1)
          {
            v52 = *v18++;
            v53 = 16;
            switch(v52)
            {
              case 0:
                goto LABEL_96;
              case 1:
                goto LABEL_95;
              case 2:
                v53 = 8;
                goto LABEL_95;
              case 5:
                v53 = 32;
LABEL_95:
                *(_BYTE *)(a1 + v57[631]) |= v53;
                break;
              default:
                continue;
            }
          }
        }
LABEL_96:
        if (v56)
          v3 = *(_BYTE *)(v3 + *v20) == 0;
        else
          v3 = 0;
        if ((v61 & 1) != 0)
        {
          v54 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v58 & 1) == 0 || (*(_BYTE *)(a1 + 68) & 4) != 0)
        {
LABEL_69:
          v49 = PBReaderSkipValueWithTag();
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v20 = (int *)MEMORY[0x1E0D82BC8];
          if ((v49 & 1) == 0)
          {
            v56 = 0;
LABEL_86:
            v57 = &OBJC_IVAR___GEOXPCReply__methodName;
            goto LABEL_87;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v40 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v41 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v40;

          }
          v42 = PBUnknownFieldAdd();
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          if (!v42)
          {
            v56 = 0;
            v57 = &OBJC_IVAR___GEOXPCReply__methodName;
            goto LABEL_88;
          }
        }
LABEL_84:
        if (!(v59 & 1 | (v8 != 0)))
          goto LABEL_85;
        continue;
    }
  }
}

BOOL GEOMapRegionReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  GEOLatLng *v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  _BOOL8 v38;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (!v3[*v6])
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 5u:
            *(_BYTE *)(a1 + 60) |= 4u;
            v18 = *v4;
            v19 = *(_QWORD *)&v3[v18];
            if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v19);
              *(_QWORD *)&v3[v18] = v19 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v37 = 32;
            goto LABEL_58;
          case 6u:
            *(_BYTE *)(a1 + 60) |= 8u;
            v23 = *v4;
            v24 = *(_QWORD *)&v3[v23];
            if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v24);
              *(_QWORD *)&v3[v23] = v24 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v37 = 48;
            goto LABEL_58;
          case 7u:
            *(_BYTE *)(a1 + 60) |= 2u;
            v25 = *v4;
            v26 = *(_QWORD *)&v3[v25];
            if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v26);
              *(_QWORD *)&v3[v25] = v26 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v37 = 24;
            goto LABEL_58;
          case 8u:
            *(_BYTE *)(a1 + 60) |= 1u;
            v27 = *v4;
            v28 = *(_QWORD *)&v3[v27];
            if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v28);
              *(_QWORD *)&v3[v27] = v28 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v37 = 16;
LABEL_58:
            *(_QWORD *)(a1 + v37) = v20;
            goto LABEL_59;
          case 9u:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_62;
            v29 = objc_alloc_init(GEOLatLng);
            if (!GEOLatLngReadAllFrom((uint64_t)v29, v3))
            {

              goto LABEL_62;
            }
            PBReaderRecallMark();
            objc_msgSend((id)a1, "addVertex:", v29, 0, 0);

LABEL_59:
            if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
              goto LABEL_60;
            break;
          case 0xAu:
            v30 = 0;
            v31 = 0;
            v32 = 0;
            *(_BYTE *)(a1 + 60) |= 0x10u;
            while (2)
            {
              v33 = *v4;
              v34 = *(_QWORD *)&v3[v33];
              v35 = v34 + 1;
              if (v34 == -1 || v35 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v36 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v34);
                *(_QWORD *)&v3[v33] = v35;
                v32 |= (unint64_t)(v36 & 0x7F) << v30;
                if (v36 < 0)
                {
                  v30 += 7;
                  v15 = v31++ >= 9;
                  if (v15)
                  {
                    LODWORD(v32) = 0;
                    goto LABEL_49;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v32) = 0;
LABEL_49:
            *(_DWORD *)(a1 + 56) = v32;
            goto LABEL_59;
          default:
            if (!*(_QWORD *)(a1 + 8))
            {
              v21 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v22 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v21;

            }
            if (!PBUnknownFieldAdd())
              goto LABEL_62;
            goto LABEL_59;
        }
      }
    }
LABEL_60:
    v38 = v3[*v6] == 0;
  }
  else
  {
LABEL_62:
    v38 = 0;
  }
  objc_sync_exit(v3);

  return v38;
}

void sub_188636BF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188636D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double GEOMapRectForMapRegion(void *a1)
{
  id v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  unint64_t v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "northLat");
  v3 = v2;
  objc_msgSend(v1, "westLng");
  v5 = GEOTilePointForCoordinate(v3, v4, 20.0);
  v7 = v6;
  objc_msgSend(v1, "southLat");
  v9 = v8;
  objc_msgSend(v1, "eastLng");
  v11 = GEOTilePointForCoordinate(v9, v10, 20.0);
  v13 = v12;
  if ((objc_msgSend(v1, "hasRectangleVertices") & 1) == 0)
  {
    if (!objc_msgSend(v1, "vertexsCount"))
    {
      v25 = INFINITY;
      goto LABEL_33;
    }
    if (objc_msgSend(v1, "vertexsCount"))
    {
      v14 = 0;
      do
      {
        objc_msgSend(v1, "vertexAtIndex:", v14);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "coordinate");
        v18 = GEOTilePointForCoordinate(v16, v17, 20.0);
        if (v5 >= v18)
          v20 = v18;
        else
          v20 = v5;
        if (v7 >= v19)
          v21 = v19;
        else
          v21 = v7;
        if (v11 <= v18)
          v22 = v18;
        else
          v22 = v11;
        if (v13 <= v19)
          v23 = v19;
        else
          v23 = v13;
        if (v14)
          v7 = v21;
        else
          v7 = v19;
        if (v14)
          v11 = v22;
        else
          v11 = v18;
        if (v14)
          v13 = v23;
        else
          v13 = v19;
        if (v14)
          v5 = v20;
        else
          v5 = v18;

        ++v14;
      }
      while (v14 < objc_msgSend(v1, "vertexsCount"));
    }
  }
  v24 = -0.0;
  if (v5 > v11)
    v24 = 268435456.0;
  *(double *)v27 = v5;
  *(double *)&v27[1] = v7;
  *(double *)&v27[2] = v11 + v24;
  *(double *)&v27[3] = v13;
  v25 = GEOMapRectBoundingMapPoints((uint64_t)v27, 2);
LABEL_33:

  return v25;
}

double GEOMapRectBoundingMapPoints(uint64_t a1, uint64_t a2)
{
  double *v2;
  double v3;
  double v4;
  double v5;
  double result;
  double v7;
  double v8;

  if (!a2)
    return INFINITY;
  v2 = (double *)(a1 + 8);
  v3 = INFINITY;
  v4 = -INFINITY;
  v5 = -INFINITY;
  result = INFINITY;
  do
  {
    v7 = *(v2 - 1);
    v8 = *v2;
    if (v7 < result)
      result = *(v2 - 1);
    if (v8 < v3)
      v3 = *v2;
    if (v7 > v5)
      v5 = *(v2 - 1);
    if (v8 > v4)
      v4 = *v2;
    v2 += 2;
    --a2;
  }
  while (a2);
  return result;
}

void GEOMapRectForCoordinateRegion(double a1, double a2, double a3, double a4)
{
  double v7;
  long double v9;
  long double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  double v21;
  double v22;
  double v23;
  long double v24;
  double v25;

  v7 = 0.0;
  if (a3 >= 0.0)
  {
    v9 = TileYForLatitude(20, fabs(a1));
    v10 = exp(((v9 * 128.0 + v9 * 128.0) * 0.0078125 + -1048576.0) / 333772.107);
    v11 = (atan(v10) * -2.0 + 1.57079633) * -57.2957795 + 85.0511288;
    if (a3 <= v11)
      v11 = a3;
    v7 = v11 * 0.5;
  }
  v12 = a4 * 0.5;
  if (a2 - v12 >= -180.0)
    v13 = a2 - v12;
  else
    v13 = a2 - v12 + 360.0;
  GEOTilePointForCoordinate(a1, v13, 20.0);
  v14 = a2 + v12;
  v15 = v14 + -360.0;
  if (v14 <= 180.0)
    v15 = v14;
  GEOTilePointForCoordinate(a1, v15, 20.0);
  if (a1 == 0.0)
  {
    GEOTilePointForCoordinate(a1 + v7, a2, 20.0);
    GEOTilePointForCoordinate(a1 - v7, a2, 20.0);
  }
  else
  {
    v16 = v7 + -85.0511288;
    v17 = 10.0;
    v18 = 502;
    do
    {
      v19 = v16 <= 85.0511288 || v16 <= a1;
      if (!v19 || (v16 < -85.0511288 ? (v20 = v16 < a1) : (v20 = 0), v20))
      {
        v16 = v16 - v17;
        v17 = v17 * 0.1;
      }
      else if (v16 > 85.0511288 || v16 < -85.0511288)
      {
        return;
      }
      if (!--v18)
        break;
      GEOTilePointForCoordinate(v7 + v16, a2, 20.0);
      v22 = v21;
      GEOTilePointForCoordinate(v16 - v7, a2, 20.0);
      v24 = exp(((v22 + (v23 - v22) * 0.5) * 0.0078125 + -1048576.0) / 333772.107);
      v25 = (atan(v24) * -2.0 + 1.57079633) * 57.2957795;
      if (v17 > 0.0 && v25 > a1 || v17 < 0.0 && v25 < a1)
        v17 = v17 * -0.1;
      v16 = v16 + v17;
    }
    while (vabdd_f64(v25, a1) >= 0.00000000999999994);
  }
}

double GEOTilePointForCoordinate(double a1, double a2, double a3)
{
  double v4;
  uint64_t v5;

  if (fabs(a2 + 180.0) < 0.00000001 && fabs(a1 + 180.0) < 0.00000001 || a2 < -180.0 || a2 > 180.0 || a1 < -90.0)
    return -1.0;
  v4 = -1.0;
  if (a1 <= 90.0)
  {
    v5 = (int)a3;
    v4 = (a2 + 180.0) * 0.0174532925 * (exp2((double)(int)a3 + 1.0) / 6.28318531) * 128.0;
    TileYForLatitude(v5, a1);
  }
  return v4;
}

long double TileYForLatitude(uint64_t a1, double a2)
{
  BOOL v2;
  double v3;
  double v4;
  double v5;
  double v6;
  long double v7;

  v2 = a2 < -90.0 || a2 > 90.0;
  v3 = fmax(fmin(a2, 85.0), -85.0);
  if (v2)
    v4 = a2;
  else
    v4 = v3;
  v5 = exp2((double)a1 + 1.0);
  v6 = v4 + -180.0;
  if (v4 <= 90.0)
    v6 = v4;
  if (v6 < -90.0)
    v6 = v6 + 180.0;
  v7 = sin(v6 * 0.0174532925);
  return v5 * ((log((v7 + 1.0) / (1.0 - v7)) * 0.5 / -3.14159265 + 1.0) * 0.5);
}

void sub_188638398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t MapKitFeature_IsEnabled_SPRForMapSnapshots()
{
  return GEOConfigGetBOOL(MapsFeaturesConfig_SPRForMapSnapshots, (uint64_t)off_1EDF4B1F8);
}

void sub_188639198(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188639518(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886396BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188639EA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _dispatcherSupportsService(uint64_t a1)
{
  void *v2;
  void *v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  if (!a1)
    return 1;
  +[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "countryCode");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("CN"));

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%zd"), a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  _getValue(GeoServicesConfig_DispatcherSupports, (uint64_t)off_1EDF4DBA8, 1, 0, 0, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "objectForKeyedSubscript:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = objc_msgSend(v7, "BOOLValue");
  else
    v8 = v4 ^ 1u;

  return v8;
}

void GEOPDPlaceRequestClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  void *v5;
  int HasSensitiveFields;
  void *v7;
  id *v8;
  void *v9;
  id *v10;
  int v11;
  void *v12;
  uint64_t v13;
  id v14;

  if (a3)
  {
    if (objc_msgSend(a1, "hasClientMetadata")
      && (objc_msgSend(a1, "clientMetadata"),
          v5 = (void *)objc_claimAutoreleasedReturnValue(),
          HasSensitiveFields = GEOPDClientMetadataHasSensitiveFields(v5),
          v5,
          HasSensitiveFields))
    {
      objc_msgSend(a1, "clientMetadata");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = (id *)objc_msgSend(v7, "copy");

      GEOPDClientMetadataClearSensitiveFields(v8, a2, 0);
      objc_msgSend(a1, "setClientMetadata:", v8);
    }
    else
    {
      objc_msgSend(a1, "clientMetadata");
      v8 = (id *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "clearSensitiveFields:", a2);
    }

    if (objc_msgSend(a1, "hasPlaceRequestParameters"))
    {
      objc_msgSend(a1, "placeRequestParameters");
      v10 = (id *)objc_claimAutoreleasedReturnValue();
      v11 = GEOPDPlaceRequestParametersHasSensitiveFields(v10, a2);

      if (v11)
      {
        objc_msgSend(a1, "placeRequestParameters");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = (id)objc_msgSend(v12, "copy");

        GEOPDPlaceRequestParametersClearSensitiveFields((uint64_t)v14, a2, 0);
        objc_msgSend(a1, "setPlaceRequestParameters:", v14);
        goto LABEL_12;
      }
    }
  }
  else
  {
    objc_msgSend(a1, "clientMetadata");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "clearSensitiveFields:", a2);

  }
  objc_msgSend(a1, "placeRequestParameters");
  v13 = objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    v14 = (id)v13;
    GEOPDPlaceRequestParametersClearSensitiveFields(v13, a2, 1);
  }
  else
  {
    v14 = 0;
  }
LABEL_12:

}

void sub_18863AA10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18863AB24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDClientMetadataClearSensitiveFields(id *a1, uint64_t a2, int a3)
{
  void *v6;
  int HasSensitiveFields;
  void *v8;
  _DWORD *v9;
  unint64_t result;
  unint64_t i;
  uint64_t v12;
  void *v13;
  _DWORD *v14;

  if (a3
    && objc_msgSend(a1, "hasDeviceExtendedLocation")
    && (objc_msgSend(a1, "deviceExtendedLocation"),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v6),
        v6,
        HasSensitiveFields))
  {
    objc_msgSend(a1, "deviceExtendedLocation");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (_DWORD *)objc_msgSend(v8, "copy");

    GEOLocationClearSensitiveFields(v9);
    objc_msgSend(a1, "setDeviceExtendedLocation:", v9);
  }
  else
  {
    objc_msgSend(a1, "deviceExtendedLocation");
    v9 = (_DWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "clearSensitiveFields:", a2);
  }

  -[GEOPDClientMetadata _readDeviceHistoricalLocations]((uint64_t)a1);
  result = objc_msgSend(a1[26], "count");
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      objc_msgSend(a1[26], "objectAtIndexedSubscript:", i);
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = (void *)v12;
      if (a3 && GEOLocationHasSensitiveFields(v12))
      {
        v14 = (_DWORD *)objc_msgSend(v13, "copy");
        GEOLocationClearSensitiveFields(v14);
        objc_msgSend(a1[26], "replaceObjectAtIndex:withObject:", i, v14);

      }
      else
      {
        objc_msgSend(v13, "clearSensitiveFields:", a2);
      }

      result = objc_msgSend(a1[26], "count");
    }
  }
  return result;
}

uint64_t GEOPDClientMetadataHasSensitiveFields(void *a1)
{
  void *v2;
  char HasSensitiveFields;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  objc_msgSend(a1, "deviceExtendedLocation");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v2);

  if ((HasSensitiveFields & 1) != 0)
    return 1;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  objc_msgSend(a1, "deviceHistoricalLocations", 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v12;
    while (2)
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(v5);
        if ((GEOLocationHasSensitiveFields(*(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * v9)) & 1) != 0)
        {
          v4 = 1;
          goto LABEL_15;
        }
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v7)
        continue;
      break;
    }
  }
  v4 = 0;
LABEL_15:

  return v4;
}

uint64_t GEOLocationHasSensitiveFields(uint64_t result)
{
  void *v1;

  if (result)
  {
    v1 = (void *)result;
    if ((objc_msgSend((id)result, "hasSpeedAccuracy") & 1) != 0
      || (objc_msgSend(v1, "hasIsMatchedLocation") & 1) != 0
      || (objc_msgSend(v1, "hasIsShifted") & 1) != 0
      || (objc_msgSend(v1, "hasTransitID") & 1) != 0
      || (objc_msgSend(v1, "hasReferenceFrame") & 1) != 0
      || (objc_msgSend(v1, "hasRawCoordinate") & 1) != 0
      || (objc_msgSend(v1, "hasRawCourse") & 1) != 0
      || (objc_msgSend(v1, "hasMatchQuality") & 1) != 0
      || (objc_msgSend(v1, "hasFormOfWay") & 1) != 0
      || (objc_msgSend(v1, "hasRoadClass") & 1) != 0)
    {
      return 1;
    }
    else
    {
      return objc_msgSend(v1, "hasTransportType");
    }
  }
  return result;
}

void sub_18863AFA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18863B1B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18863B538(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

uint64_t GEOPDPlaceRequestParametersHasSensitiveFields(id *a1, uint64_t a2)
{
  void *v4;
  uint64_t HasSensitiveFields;
  id *v6;
  void *v7;
  void *v8;
  id *v9;
  id *v10;
  void *v11;
  void *v12;
  void *v13;
  id *v15;

  if (!a1)
    return 0;
  -[GEOPDPlaceRequestParameters searchParameters](a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((GEOPDSearchParametersHasSensitiveFields(v4, a2) & 1) != 0)
  {
    HasSensitiveFields = 1;
  }
  else
  {
    -[GEOPDPlaceRequestParameters reverseGeocodingParameters](a1);
    v6 = (id *)objc_claimAutoreleasedReturnValue();
    if ((GEOPDReverseGeocodingParametersHasSensitiveFields(v6) & 1) != 0)
    {
      HasSensitiveFields = 1;
    }
    else
    {
      -[GEOPDPlaceRequestParameters merchantLookupParameters](a1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if ((GEOPDMerchantLookupParametersHasSensitiveFields(v7) & 1) != 0)
      {
        HasSensitiveFields = 1;
      }
      else
      {
        -[GEOPDPlaceRequestParameters autocompleteParameters](a1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if ((GEOPDAutocompleteParametersHasSensitiveFields(v8, a2) & 1) != 0)
        {
          HasSensitiveFields = 1;
        }
        else
        {
          -[GEOPDPlaceRequestParameters externalTransitLookupParameters](a1);
          v9 = (id *)objc_claimAutoreleasedReturnValue();
          if ((GEOPDExternalTransitLookupParametersHasSensitiveFields(v9) & 1) != 0)
          {
            HasSensitiveFields = 1;
          }
          else
          {
            -[GEOPDPlaceRequestParameters batchReverseGeocodingParameters](a1);
            v10 = (id *)objc_claimAutoreleasedReturnValue();
            if ((GEOPDBatchReverseGeocodingParametersHasSensitiveFields(v10) & 1) != 0)
            {
              HasSensitiveFields = 1;
            }
            else
            {
              -[GEOPDPlaceRequestParameters wifiFingerprintParameters](a1);
              v11 = (void *)objc_claimAutoreleasedReturnValue();
              if ((GEOPDWifiFingerprintParametersHasSensitiveFields((uint64_t)v11) & 1) != 0)
              {
                HasSensitiveFields = 1;
              }
              else
              {
                -[GEOPDPlaceRequestParameters groundViewLabelParameters](a1);
                v12 = (void *)objc_claimAutoreleasedReturnValue();
                if ((GEOPDGroundViewLabelParametersHasSensitiveFields((uint64_t)v12) & 1) != 0)
                {
                  HasSensitiveFields = 1;
                }
                else
                {
                  -[GEOPDPlaceRequestParameters transitNearbyScheduleLookupParameters](a1);
                  v15 = (id *)objc_claimAutoreleasedReturnValue();
                  if ((GEOPDTransitNearbyScheduleLookupParametersHasSensitiveFields(v15) & 1) != 0)
                  {
                    HasSensitiveFields = 1;
                  }
                  else
                  {
                    -[GEOPDPlaceRequestParameters transitNearbyPaymentMethodLookupParameters](a1);
                    v13 = (void *)objc_claimAutoreleasedReturnValue();
                    HasSensitiveFields = GEOPDTransitNearbyPaymentMethodLookupParametersHasSensitiveFields((uint64_t)v13);

                  }
                }

              }
            }

          }
        }

      }
    }

  }
  return HasSensitiveFields;
}

id *GEOPDSearchParametersHasSensitiveFields(id *result, uint64_t a2)
{
  void *v3;
  void *v4;

  if (result)
  {
    -[GEOPDSearchParameters suggestionEntry](result);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = GEOPDAutocompleteEntryHasSensitiveFields(v3, a2);

    return (id *)v4;
  }
  return result;
}

uint64_t GEOPDReverseGeocodingParametersHasSensitiveFields(id *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  -[GEOPDReverseGeocodingParameters extendedLocations](a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v9;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v1);
        if ((GEOLocationHasSensitiveFields(*(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * v5)) & 1) != 0)
        {
          v6 = 1;
          goto LABEL_12;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_12:

  return v6;
}

void sub_18863B95C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPDWifiFingerprintParametersHasSensitiveFields(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 16);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v9;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v1);
        if ((GEOPDWifiMeasurementHasSensitiveFields(*(id **)(*((_QWORD *)&v8 + 1) + 8 * v5)) & 1) != 0)
        {
          v6 = 1;
          goto LABEL_12;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_12:

  return v6;
}

uint64_t GEOPDTransitNearbyScheduleLookupParametersHasSensitiveFields(id *a1)
{
  void *v2;
  unsigned __int8 v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  -[GEOPDTransitNearbyScheduleLookupParameters userLocation](a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = GEOWaypointTypedHasSensitiveFields(v2);

  if ((v3 & 1) != 0)
    return 1;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  -[GEOPDTransitNearbyScheduleLookupParameters transitNearbyScheduleLookupOrigins](a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v12;
    while (2)
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v12 != v8)
          objc_enumerationMutation(v5);
        if ((GEOPDTransitNearbyScheduleLookupOriginHasSensitiveFields(*(void ***)(*((_QWORD *)&v11 + 1)
                                                                                                  + 8 * v9)) & 1) != 0)
        {
          v4 = 1;
          goto LABEL_15;
        }
        ++v9;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      if (v7)
        continue;
      break;
    }
  }
  v4 = 0;
LABEL_15:

  return v4;
}

uint64_t GEOPDTransitNearbyPaymentMethodLookupParametersHasSensitiveFields(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 16);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v9;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v1);
        if ((GEOPDTransitNearbyPaymentMethodLookupOriginHasSensitiveFields(*(void ***)(*((_QWORD *)&v8 + 1) + 8 * v5)) & 1) != 0)
        {
          v6 = 1;
          goto LABEL_12;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_12:

  return v6;
}

uint64_t GEOPDMerchantLookupParametersHasSensitiveFields(void *a1)
{
  void *v2;
  uint64_t HasSensitiveFields;
  void *v4;

  if (!a1)
    return 0;
  objc_msgSend(a1, "transactionLocation");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((GEOLocationHasSensitiveFields((uint64_t)v2) & 1) != 0)
  {
    HasSensitiveFields = 1;
  }
  else
  {
    objc_msgSend(a1, "bankTransactionInformation");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEOPDBankTransactionInformationHasSensitiveFields(v4);

  }
  return HasSensitiveFields;
}

uint64_t GEOPDGroundViewLabelParametersHasSensitiveFields(uint64_t result)
{
  if (result)
    return GEOLocationHasSensitiveFields(*(_QWORD *)(result + 24));
  return result;
}

id *GEOPDExternalTransitLookupParametersHasSensitiveFields(id *result)
{
  void *v1;
  uint64_t HasSensitiveFields;

  if (result)
  {
    -[GEOPDExternalTransitLookupParameters transactionLocation](result);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v1);

    return (id *)HasSensitiveFields;
  }
  return result;
}

uint64_t GEOPDBatchReverseGeocodingParametersHasSensitiveFields(id *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  -[GEOPDBatchReverseGeocodingParameters assetLocations](a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v9;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v1);
        if ((GEOLocationHasSensitiveFields(*(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * v5)) & 1) != 0)
        {
          v6 = 1;
          goto LABEL_12;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_12:

  return v6;
}

void *GEOPDAutocompleteParametersHasSensitiveFields(void *result, uint64_t a2)
{
  void *v3;
  uint64_t HasSensitiveFields;

  if (result)
  {
    objc_msgSend(result, "allEntriesWithBrowse");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEOPDAutocompleteParametersAllEntriesWithBrowseHasSensitiveFields(v3, a2);

    return (void *)HasSensitiveFields;
  }
  return result;
}

void sub_18863C278(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void ___ZL13_cacheMissErrv_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;

  v0 = (void *)MEMORY[0x1E0CB35C8];
  GEOErrorReason(CFSTR("Tile Loader cache miss"));
  v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "GEOErrorWithCode:userInfo:", -8);
  v1 = objc_claimAutoreleasedReturnValue();
  v2 = (void *)qword_1ECDBB830;
  qword_1ECDBB830 = v1;

}

void sub_18863C438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id GEOErrorReason(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  uint64_t v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v5 = *MEMORY[0x1E0C9AFA8];
  v6[0] = a1;
  v1 = (void *)MEMORY[0x1E0C99D80];
  v2 = a1;
  objc_msgSend(v1, "dictionaryWithObjects:forKeys:count:", v6, &v5, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void _attributedGeoMapItemsForPlaceDatasWithHandler(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  _QWORD v21[4];
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;

  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v17 = a7;
  if (v17)
  {
    if (objc_msgSend(v12, "count") || objc_msgSend(v16, "count"))
    {
      _attributionsToRequestForPlaceDatas(v12);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v18, "count"))
      {
        v21[0] = MEMORY[0x1E0C809B0];
        v21[1] = 3221225472;
        v21[2] = ___attributedGeoMapItemsForPlaceDatasWithHandler_block_invoke;
        v21[3] = &unk_1E1C0CF38;
        v22 = v12;
        v23 = v13;
        v24 = v14;
        v25 = v15;
        v26 = v17;
        _loadAttributions(v18, v21);

      }
      else
      {
        _attributedGeoMapItemsForPlaceDatas(v12, v13, v14, v15, 0);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v19, "count"))
        {
          (*((void (**)(id, void *, _QWORD))v17 + 2))(v17, v19, 0);
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0CB35C8], "GEOErrorWithCode:reason:", -8, CFSTR("No Results"));
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          (*((void (**)(id, _QWORD, void *))v17 + 2))(v17, 0, v20);

        }
      }
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "GEOErrorWithCode:reason:", -8, CFSTR("No Results"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      (*((void (**)(id, _QWORD, void *))v17 + 2))(v17, 0, v18);
    }

  }
}

id _attributedGeoMapItemsForPlaceDatas(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v13 = a5;
  v14 = (id)objc_msgSend(v9, "count");
  if (v14)
  {
    v15 = objc_msgSend(v10, "count");
    objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = ___attributedGeoMapItemsForPlaceDatas_block_invoke;
    v20[3] = &unk_1E1C0CFC0;
    v27 = v15;
    v21 = v10;
    v22 = v11;
    v23 = v9;
    v24 = v12;
    v25 = v13;
    v17 = v16;
    v26 = v17;
    objc_msgSend(v23, "enumerateObjectsUsingBlock:", v20);
    v18 = v26;
    v14 = v17;

  }
  return v14;
}

void sub_18863CF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void ___attributedGeoMapItemsForPlaceDatas_block_invoke(uint64_t a1, void *a2, unint64_t a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _GEOPlaceDataItem *v10;
  id v11;

  v11 = a2;
  if (objc_msgSend(v11, "statusCodeIsValid"))
  {
    if (*(_QWORD *)(a1 + 80) <= a3)
    {
      v5 = 0;
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "objectAtIndex:", a3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
    }
    v6 = objc_msgSend(*(id *)(a1 + 40), "count");
    if (v6 == objc_msgSend(*(id *)(a1 + 48), "count"))
    {
      objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", a3);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v7 = 0;
    }
    v8 = objc_msgSend(*(id *)(a1 + 56), "count");
    if (v8 == objc_msgSend(*(id *)(a1 + 48), "count"))
    {
      objc_msgSend(*(id *)(a1 + 56), "objectAtIndexedSubscript:", a3);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v9 = 0;
    }
    v10 = -[_GEOPlaceDataItem initWithPlaceData:attributionMap:disambiguationLabel:detourInfo:externalTransitStationCode:additionalPlaces:]([_GEOPlaceDataItem alloc], "initWithPlaceData:attributionMap:disambiguationLabel:detourInfo:externalTransitStationCode:additionalPlaces:", v11, *(_QWORD *)(a1 + 64), v5, v7, v9, 0);
    objc_msgSend(*(id *)(a1 + 72), "addObject:", v10);

  }
}

void sub_18863DA08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18863DB58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18863DC38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18863DCEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDMapsIdentifierReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  GEOPDShardedId *v18;
  void *v19;
  id v20;
  void *v21;
  _BOOL8 v22;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_29;
          v18 = objc_alloc_init(GEOPDShardedId);
          if (!GEOPDShardedIdReadAllFrom((uint64_t)v18, v3))
          {

            goto LABEL_29;
          }
          PBReaderRecallMark();
          v19 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v18;

        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v20 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v21 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v20;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_29;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v22 = v3[*v6] == 0;
  }
  else
  {
LABEL_29:
    v22 = 0;
  }
  objc_sync_exit(v3);

  return v22;
}

void sub_18863FF3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDShardedIdReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  GEOLatLng *v33;
  void *v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL8 v64;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (!v3[*v6])
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        v18 = v10 >> 3;
        switch((v10 >> 3))
        {
          case 1u:
            v19 = 0;
            v20 = 0;
            v21 = 0;
            *(_BYTE *)(a1 + 56) |= 2u;
            while (1)
            {
              v22 = *v4;
              v23 = *(_QWORD *)&v3[v22];
              v24 = v23 + 1;
              if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
                break;
              v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
              *(_QWORD *)&v3[v22] = v24;
              v21 |= (unint64_t)(v25 & 0x7F) << v19;
              if ((v25 & 0x80) == 0)
                goto LABEL_72;
              v19 += 7;
              v15 = v20++ >= 9;
              if (v15)
              {
                v21 = 0;
                goto LABEL_74;
              }
            }
            v3[*v6] = 1;
LABEL_72:
            if (v3[*v6])
              v21 = 0;
LABEL_74:
            v62 = 32;
            goto LABEL_87;
          case 2u:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_100;
            v33 = objc_alloc_init(GEOLatLng);
            if (!GEOLatLngReadAllFrom((uint64_t)v33, v3))
            {

              goto LABEL_100;
            }
            PBReaderRecallMark();
            v34 = *(void **)(a1 + 24);
            *(_QWORD *)(a1 + 24) = v33;

LABEL_97:
            if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
              goto LABEL_98;
            break;
          case 3u:
            v35 = 0;
            v36 = 0;
            v37 = 0;
            *(_BYTE *)(a1 + 56) |= 8u;
            while (2)
            {
              v38 = *v4;
              v39 = *(_QWORD *)&v3[v38];
              v40 = v39 + 1;
              if (v39 == -1 || v40 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v41 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v39);
                *(_QWORD *)&v3[v38] = v40;
                v37 |= (unint64_t)(v41 & 0x7F) << v35;
                if (v41 < 0)
                {
                  v35 += 7;
                  v15 = v36++ >= 9;
                  if (v15)
                  {
                    LODWORD(v37) = 0;
                    goto LABEL_82;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v37) = 0;
LABEL_82:
            v63 = 44;
            goto LABEL_96;
          case 4u:
            v42 = 0;
            v43 = 0;
            v21 = 0;
            *(_BYTE *)(a1 + 56) |= 1u;
            while (2)
            {
              v44 = *v4;
              v45 = *(_QWORD *)&v3[v44];
              v46 = v45 + 1;
              if (v45 == -1 || v46 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v47 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v45);
                *(_QWORD *)&v3[v44] = v46;
                v21 |= (unint64_t)(v47 & 0x7F) << v42;
                if (v47 < 0)
                {
                  v42 += 7;
                  v15 = v43++ >= 9;
                  if (v15)
                  {
                    v21 = 0;
                    goto LABEL_86;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v21 = 0;
LABEL_86:
            v62 = 16;
LABEL_87:
            *(_QWORD *)(a1 + v62) = v21;
            goto LABEL_97;
          case 5u:
            v48 = 0;
            v49 = 0;
            v37 = 0;
            *(_BYTE *)(a1 + 56) |= 0x10u;
            while (2)
            {
              v50 = *v4;
              v51 = *(_QWORD *)&v3[v50];
              v52 = v51 + 1;
              if (v51 == -1 || v52 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v53 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v51);
                *(_QWORD *)&v3[v50] = v52;
                v37 |= (unint64_t)(v53 & 0x7F) << v48;
                if (v53 < 0)
                {
                  v48 += 7;
                  v15 = v49++ >= 9;
                  if (v15)
                  {
                    LODWORD(v37) = 0;
                    goto LABEL_91;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v37) = 0;
LABEL_91:
            v63 = 48;
            goto LABEL_96;
          default:
            if ((_DWORD)v18 == 50)
            {
              v54 = 0;
              v55 = 0;
              v37 = 0;
              *(_BYTE *)(a1 + 56) |= 4u;
              while (1)
              {
                v56 = *v4;
                v57 = *(_QWORD *)&v3[v56];
                v58 = v57 + 1;
                if (v57 == -1 || v58 > *(_QWORD *)&v3[*v5])
                  break;
                v59 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v57);
                *(_QWORD *)&v3[v56] = v58;
                v37 |= (unint64_t)(v59 & 0x7F) << v54;
                if ((v59 & 0x80) == 0)
                  goto LABEL_93;
                v54 += 7;
                v15 = v55++ >= 9;
                if (v15)
                {
                  LODWORD(v37) = 0;
                  goto LABEL_95;
                }
              }
              v3[*v6] = 1;
LABEL_93:
              if (v3[*v6])
                LODWORD(v37) = 0;
LABEL_95:
              v63 = 40;
LABEL_96:
              *(_DWORD *)(a1 + v63) = v37;
            }
            else if ((_DWORD)v18 == 51)
            {
              v26 = 0;
              v27 = 0;
              v28 = 0;
              *(_BYTE *)(a1 + 56) |= 0x20u;
              while (1)
              {
                v29 = *v4;
                v30 = *(_QWORD *)&v3[v29];
                v31 = v30 + 1;
                if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
                  break;
                v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
                *(_QWORD *)&v3[v29] = v31;
                v28 |= (unint64_t)(v32 & 0x7F) << v26;
                if ((v32 & 0x80) == 0)
                  goto LABEL_76;
                v26 += 7;
                v15 = v27++ >= 9;
                if (v15)
                {
                  v28 = 0;
                  goto LABEL_78;
                }
              }
              v3[*v6] = 1;
LABEL_76:
              if (v3[*v6])
                v28 = 0;
LABEL_78:
              *(_BYTE *)(a1 + 52) = v28 != 0;
            }
            else
            {
              if (!*(_QWORD *)(a1 + 8))
              {
                v60 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
                v61 = *(void **)(a1 + 8);
                *(_QWORD *)(a1 + 8) = v60;

              }
              if (!PBUnknownFieldAdd())
                goto LABEL_100;
            }
            goto LABEL_97;
        }
      }
    }
LABEL_98:
    v64 = v3[*v6] == 0;
  }
  else
  {
LABEL_100:
    v64 = 0;
  }
  objc_sync_exit(v3);

  return v64;
}

void sub_188640580(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDRoadAccessInfoReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  GEORoadAccessPoint *v18;
  id v19;
  void *v20;
  _BOOL8 v21;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_29;
          v18 = objc_alloc_init(GEORoadAccessPoint);
          if (!GEORoadAccessPointReadAllFrom((uint64_t)v18, v3))
          {

            goto LABEL_29;
          }
          PBReaderRecallMark();
          -[GEOPDRoadAccessInfo addRoadAccessPoint:](a1, v18);

        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v19 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v20 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v19;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_29;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v21 = v3[*v6] == 0;
  }
  else
  {
LABEL_29:
    v21 = 0;
  }
  objc_sync_exit(v3);

  return v21;
}

void sub_188640904(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORoadAccessPointReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  GEOLatLng *v18;
  void *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  id v46;
  void *v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  _BOOL8 v73;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_119;
            v18 = objc_alloc_init(GEOLatLng);
            if (GEOLatLngReadAllFrom((uint64_t)v18, v3))
            {
              PBReaderRecallMark();
              v19 = *(void **)(a1 + 16);
              *(_QWORD *)(a1 + 16) = v18;

              continue;
            }

            goto LABEL_119;
          case 2u:
            v20 = 0;
            v21 = 0;
            v22 = 0;
            *(_BYTE *)(a1 + 56) |= 0x80u;
            while (2)
            {
              v23 = *v4;
              v24 = *(_QWORD *)&v3[v23];
              v25 = v24 + 1;
              if (v24 == -1 || v25 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v26 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v24);
                *(_QWORD *)&v3[v23] = v25;
                v22 |= (unint64_t)(v26 & 0x7F) << v20;
                if (v26 < 0)
                {
                  v20 += 7;
                  v15 = v21++ >= 9;
                  if (v15)
                  {
                    v22 = 0;
                    goto LABEL_86;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v22 = 0;
LABEL_86:
            *(_BYTE *)(a1 + 52) = v22 != 0;
            continue;
          case 3u:
            v27 = 0;
            v28 = 0;
            v29 = 0;
            *(_BYTE *)(a1 + 56) |= 0x40u;
            while (2)
            {
              v30 = *v4;
              v31 = *(_QWORD *)&v3[v30];
              v32 = v31 + 1;
              if (v31 == -1 || v32 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
                *(_QWORD *)&v3[v30] = v32;
                v29 |= (unint64_t)(v33 & 0x7F) << v27;
                if (v33 < 0)
                {
                  v27 += 7;
                  v15 = v28++ >= 9;
                  if (v15)
                  {
                    LODWORD(v29) = 0;
                    goto LABEL_90;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v29) = 0;
LABEL_90:
            v72 = 48;
            goto LABEL_115;
          case 4u:
            v34 = 0;
            v35 = 0;
            v29 = 0;
            *(_BYTE *)(a1 + 56) |= 2u;
            while (2)
            {
              v36 = *v4;
              v37 = *(_QWORD *)&v3[v36];
              v38 = v37 + 1;
              if (v37 == -1 || v38 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v39 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v37);
                *(_QWORD *)&v3[v36] = v38;
                v29 |= (unint64_t)(v39 & 0x7F) << v34;
                if (v39 < 0)
                {
                  v34 += 7;
                  v15 = v35++ >= 9;
                  if (v15)
                  {
                    LODWORD(v29) = 0;
                    goto LABEL_94;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v29) = 0;
LABEL_94:
            v72 = 28;
            goto LABEL_115;
          case 5u:
            v40 = 0;
            v41 = 0;
            v29 = 0;
            *(_BYTE *)(a1 + 56) |= 8u;
            while (2)
            {
              v42 = *v4;
              v43 = *(_QWORD *)&v3[v42];
              v44 = v43 + 1;
              if (v43 == -1 || v44 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v45 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v43);
                *(_QWORD *)&v3[v42] = v44;
                v29 |= (unint64_t)(v45 & 0x7F) << v40;
                if (v45 < 0)
                {
                  v40 += 7;
                  v15 = v41++ >= 9;
                  if (v15)
                  {
                    LODWORD(v29) = 0;
                    goto LABEL_98;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v29) = 0;
LABEL_98:
            v72 = 36;
            goto LABEL_115;
          case 0xBu:
            v48 = 0;
            v49 = 0;
            v29 = 0;
            *(_BYTE *)(a1 + 56) |= 0x20u;
            while (2)
            {
              v50 = *v4;
              v51 = *(_QWORD *)&v3[v50];
              v52 = v51 + 1;
              if (v51 == -1 || v52 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v53 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v51);
                *(_QWORD *)&v3[v50] = v52;
                v29 |= (unint64_t)(v53 & 0x7F) << v48;
                if (v53 < 0)
                {
                  v48 += 7;
                  v15 = v49++ >= 9;
                  if (v15)
                  {
                    LODWORD(v29) = 0;
                    goto LABEL_102;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v29) = 0;
LABEL_102:
            v72 = 44;
            goto LABEL_115;
          case 0xCu:
            v54 = 0;
            v55 = 0;
            v29 = 0;
            *(_BYTE *)(a1 + 56) |= 1u;
            while (2)
            {
              v56 = *v4;
              v57 = *(_QWORD *)&v3[v56];
              v58 = v57 + 1;
              if (v57 == -1 || v58 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v59 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v57);
                *(_QWORD *)&v3[v56] = v58;
                v29 |= (unint64_t)(v59 & 0x7F) << v54;
                if (v59 < 0)
                {
                  v54 += 7;
                  v15 = v55++ >= 9;
                  if (v15)
                  {
                    LODWORD(v29) = 0;
                    goto LABEL_106;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v29) = 0;
LABEL_106:
            v72 = 24;
            goto LABEL_115;
          case 0xDu:
            v60 = 0;
            v61 = 0;
            v29 = 0;
            *(_BYTE *)(a1 + 56) |= 0x10u;
            while (2)
            {
              v62 = *v4;
              v63 = *(_QWORD *)&v3[v62];
              v64 = v63 + 1;
              if (v63 == -1 || v64 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v65 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v63);
                *(_QWORD *)&v3[v62] = v64;
                v29 |= (unint64_t)(v65 & 0x7F) << v60;
                if (v65 < 0)
                {
                  v60 += 7;
                  v15 = v61++ >= 9;
                  if (v15)
                  {
                    LODWORD(v29) = 0;
                    goto LABEL_110;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v29) = 0;
LABEL_110:
            v72 = 40;
            goto LABEL_115;
          case 0xEu:
            v66 = 0;
            v67 = 0;
            v29 = 0;
            *(_BYTE *)(a1 + 56) |= 4u;
            break;
          default:
            if (!*(_QWORD *)(a1 + 8))
            {
              v46 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v47 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v46;

            }
            if (!PBUnknownFieldAdd())
              goto LABEL_119;
            continue;
        }
        while (1)
        {
          v68 = *v4;
          v69 = *(_QWORD *)&v3[v68];
          v70 = v69 + 1;
          if (v69 == -1 || v70 > *(_QWORD *)&v3[*v5])
            break;
          v71 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v69);
          *(_QWORD *)&v3[v68] = v70;
          v29 |= (unint64_t)(v71 & 0x7F) << v66;
          if ((v71 & 0x80) == 0)
            goto LABEL_112;
          v66 += 7;
          v15 = v67++ >= 9;
          if (v15)
          {
            LODWORD(v29) = 0;
            goto LABEL_114;
          }
        }
        v3[*v6] = 1;
LABEL_112:
        if (v3[*v6])
          LODWORD(v29) = 0;
LABEL_114:
        v72 = 32;
LABEL_115:
        *(_DWORD *)(a1 + v72) = v29;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v73 = v3[*v6] == 0;
  }
  else
  {
LABEL_119:
    v73 = 0;
  }
  objc_sync_exit(v3);

  return v73;
}

void sub_1886410E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188641470(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188641BA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188641E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188641F44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlaceInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 76))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDPlaceInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 76) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDPlaceInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDPlaceInfoReadAllFrom_initialTag;
  Specified = GEOPDPlaceInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 40), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 48), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 56), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return Specified;
}

void sub_18864210C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlaceInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  GEOLatLng *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  int v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  void *v59;
  char v60;
  __int16 v61;
  int v62;
  __int16 v63;
  void *v64;
  int v66;
  int *v67;
  char v68;
  char v69;
  char v70;
  char v71;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 76);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 72));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 92)), (uint16x4_t)0xFFFAFFFCFFFBFFF8), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 92) >> 7) & 1)+ ((*(_WORD *)(a1 + 92) >> 3) & 1));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 3;
        v68 = v16 & ~(_BYTE)v11 | v9;
        v69 = v16 | v11 | v68;
        if ((((v16 | v11) | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v70 = (v17 == 0) | v16 | v11;
        v71 = v16 | v11;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_117;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_25;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_25:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_27:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_117:
      v66 = 1;
      goto LABEL_118;
    }
    v31 = v23 >> 3;
    v32 = v71;
    if ((v70 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32)
          goto LABEL_91;
        if ((*(_WORD *)(a1 + 92) & 0x20) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_137;
          v37 = objc_alloc_init(GEOLatLng);
          if (GEOLatLngReadAllFrom((uint64_t)v37, (void *)v3))
          {
            PBReaderRecallMark();
            v38 = 40;
            goto LABEL_90;
          }
          goto LABEL_136;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_137;
        v61 = *(_WORD *)(a1 + 92) << 10;
        goto LABEL_111;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_91;
        *(_WORD *)(a1 + 92) |= 1u;
        v39 = *v18;
        v40 = *(_QWORD *)(v3 + v39);
        if (v40 <= 0xFFFFFFFFFFFFFFF7 && v40 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v41 = *(_QWORD *)(*(_QWORD *)(v3 + *v20) + v40);
          *(_QWORD *)(v3 + v39) = v40 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v19) = 1;
          v41 = 0;
        }
        *(_QWORD *)(a1 + 24) = v41;
        goto LABEL_113;
      case 4:
        if (!v32)
          goto LABEL_91;
        if ((*(_WORD *)(a1 + 92) & 0x100) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_137;
          v61 = *(_WORD *)(a1 + 92) << 7;
          goto LABEL_111;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_137;
        v37 = objc_alloc_init(GEOTimezone);
        if (!GEOTimezoneReadAllFrom((uint64_t)v37, (void *)v3))
          goto LABEL_136;
        PBReaderRecallMark();
        v38 = 64;
        goto LABEL_90;
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_91;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        *(_WORD *)(a1 + 92) |= 4u;
        while (2)
        {
          v48 = *v18;
          v49 = *(_QWORD *)(v3 + v48);
          v50 = v49 + 1;
          if (v49 == -1 || v50 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v51 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v49);
            *(_QWORD *)(v3 + v48) = v50;
            v47 |= (unint64_t)(v51 & 0x7F) << v45;
            if (v51 < 0)
            {
              v45 += 7;
              v28 = v46++ >= 9;
              if (v28)
              {
                v47 = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          v47 = 0;
LABEL_96:
        *(_BYTE *)(a1 + 88) = v47 != 0;
        goto LABEL_113;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_91;
        v52 = 0;
        v53 = 0;
        v54 = 0;
        *(_WORD *)(a1 + 92) |= 2u;
        while (2)
        {
          v55 = *v18;
          v56 = *(_QWORD *)(v3 + v55);
          v57 = v56 + 1;
          if (v56 == -1 || v57 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v56);
            *(_QWORD *)(v3 + v55) = v57;
            v54 |= (unint64_t)(v58 & 0x7F) << v52;
            if (v58 < 0)
            {
              v52 += 7;
              v28 = v53++ >= 9;
              if (v28)
              {
                LODWORD(v54) = 0;
                goto LABEL_100;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v54) = 0;
LABEL_100:
        *(_DWORD *)(a1 + 84) = v54;
        goto LABEL_113;
      case 7:
        if (!v32)
          goto LABEL_91;
        if ((*(_WORD *)(a1 + 92) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_137;
          v61 = *(_WORD *)(a1 + 92) << 11;
          goto LABEL_111;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_137;
        v37 = objc_alloc_init(GEOPDBasemapRegionMetadata);
        if (!GEOPDBasemapRegionMetadataReadAllFrom((uint64_t)v37, (void *)v3))
          goto LABEL_136;
        PBReaderRecallMark();
        v38 = 32;
        goto LABEL_90;
      case 8:
        if (!v32)
          goto LABEL_91;
        if ((*(_WORD *)(a1 + 92) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_137;
          v61 = *(_WORD *)(a1 + 92) << 9;
          goto LABEL_111;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_137;
        v37 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v37, (void *)v3))
          goto LABEL_136;
        PBReaderRecallMark();
        v38 = 48;
        goto LABEL_90;
      case 9:
        if (!v32)
          goto LABEL_91;
        if ((*(_WORD *)(a1 + 92) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_137;
          v61 = *(_WORD *)(a1 + 92) << 8;
LABEL_111:
          v7 += v61 >> 15;
LABEL_112:
          v19 = (int *)MEMORY[0x1E0D82BC8];
          v20 = (int *)MEMORY[0x1E0D82BB8];
          goto LABEL_113;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_137;
        v37 = objc_alloc_init(GEOLatLng);
        if (GEOLatLngReadAllFrom((uint64_t)v37, (void *)v3))
        {
          PBReaderRecallMark();
          v38 = 56;
LABEL_90:
          v59 = *(void **)(a1 + v38);
          *(_QWORD *)(a1 + v38) = v37;

          --v7;
          goto LABEL_112;
        }
LABEL_136:

LABEL_137:
        v66 = 0;
        v67 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_119:
        if ((v68 & 1) != 0)
LABEL_120:
          *(_WORD *)(a1 + v67[213]) |= 8u;
        if (v71 & 1 | ((v66 & 1) == 0))
        {
          *(_WORD *)(a1 + v67[213]) |= 0x20u;
          *(_WORD *)(a1 + v67[213]) |= 0x100u;
          *(_WORD *)(a1 + v67[213]) |= 0x10u;
          *(_WORD *)(a1 + v67[213]) |= 0x40u;
          *(_WORD *)(a1 + v67[213]) |= 0x80u;
        }
        else if (v17)
        {
          while (1)
          {
            v62 = *v17++;
            v63 = 32;
            switch(v62)
            {
              case 0:
                goto LABEL_130;
              case 1:
                goto LABEL_129;
              case 4:
                v63 = 256;
                goto LABEL_129;
              case 7:
                v63 = 16;
                goto LABEL_129;
              case 8:
                v63 = 64;
                goto LABEL_129;
              case 9:
                v63 = 128;
LABEL_129:
                *(_WORD *)(a1 + v67[213]) |= v63;
                break;
              default:
                continue;
            }
          }
        }
LABEL_130:
        if (v66)
          v3 = *(_BYTE *)(v3 + *v19) == 0;
        else
          v3 = 0;
        if ((v71 & 1) != 0)
        {
          v64 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v68 & 1) == 0 || (*(_WORD *)(a1 + 92) & 8) != 0)
        {
LABEL_91:
          v60 = PBReaderSkipValueWithTag();
          v20 = (int *)MEMORY[0x1E0D82BB8];
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v60 & 1) == 0)
          {
            v66 = 0;
LABEL_118:
            v67 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
            goto LABEL_119;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v42 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v43 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v42;

          }
          v44 = PBUnknownFieldAdd();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          v20 = (int *)MEMORY[0x1E0D82BB8];
          if (!v44)
          {
            v66 = 0;
            v67 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
            goto LABEL_120;
          }
        }
LABEL_113:
        if (!(v69 & 1 | (v7 != 0)))
          goto LABEL_117;
        continue;
    }
  }
}

BOOL GEOLatLngReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  _BOOL8 v37;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = *v6;
            v17 = v3[v16];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = *v6;
        v17 = v3[v16];
        if (v3[v16])
          v10 = 0;
LABEL_15:
        if (v17 || (v10 & 7) == 4)
          break;
        v19 = v10 >> 3;
        if ((int)(v10 >> 3) > 2)
        {
          if ((_DWORD)v19 == 3)
          {
            *(_BYTE *)(a1 + 44) |= 1u;
            v32 = *v4;
            v33 = *(_QWORD *)&v3[v32];
            if (v33 <= 0xFFFFFFFFFFFFFFF7 && v33 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v22 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v33);
              *(_QWORD *)&v3[v32] = v33 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v22 = 0;
            }
            v36 = 16;
            goto LABEL_54;
          }
          if ((_DWORD)v19 == 100)
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            *(_BYTE *)(a1 + 44) |= 2u;
            while (1)
            {
              v26 = *v4;
              v27 = *(_QWORD *)&v3[v26];
              v28 = v27 + 1;
              if (v27 == -1 || v28 > *(_QWORD *)&v3[*v5])
                break;
              v29 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v27);
              *(_QWORD *)&v3[v26] = v28;
              v25 |= (unint64_t)(v29 & 0x7F) << v23;
              if ((v29 & 0x80) == 0)
                goto LABEL_45;
              v23 += 7;
              v15 = v24++ >= 9;
              if (v15)
              {
                v25 = 0;
                goto LABEL_47;
              }
            }
            v3[*v6] = 1;
LABEL_45:
            if (v3[*v6])
              v25 = 0;
LABEL_47:
            *(_BYTE *)(a1 + 40) = v25 != 0;
            continue;
          }
        }
        else
        {
          if ((_DWORD)v19 == 1)
          {
            v30 = *v4;
            v31 = *(_QWORD *)&v3[v30];
            if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v22 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v31);
              *(_QWORD *)&v3[v30] = v31 + 8;
            }
            else
            {
              v3[v16] = 1;
              v22 = 0;
            }
            v36 = 24;
            goto LABEL_54;
          }
          if ((_DWORD)v19 == 2)
          {
            v20 = *v4;
            v21 = *(_QWORD *)&v3[v20];
            if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v22 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v21);
              *(_QWORD *)&v3[v20] = v21 + 8;
            }
            else
            {
              v3[v16] = 1;
              v22 = 0;
            }
            v36 = 32;
LABEL_54:
            *(_QWORD *)(a1 + v36) = v22;
            continue;
          }
        }
        if (!*(_QWORD *)(a1 + 8))
        {
          v34 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v35 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v34;

        }
        if (!PBUnknownFieldAdd())
          goto LABEL_57;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v37 = v3[*v6] == 0;
  }
  else
  {
LABEL_57:
    v37 = 0;
  }
  objc_sync_exit(v3);

  return v37;
}

void sub_188642E58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188642F0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTimezoneReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  _BOOL8 v22;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v18;

        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v20 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v21 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v20;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_26;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v22 = v3[*v6] == 0;
  }
  else
  {
LABEL_26:
    v22 = 0;
  }
  objc_sync_exit(v3);

  return v22;
}

void sub_188643104(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886431E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1886432C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDBasemapRegionMetadataReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  _BOOL8 v22;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v18;

        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v20 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v21 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v20;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_26;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v22 = v3[*v6] == 0;
  }
  else
  {
LABEL_26:
    v22 = 0;
  }
  objc_sync_exit(v3);

  return v22;
}

void sub_188643524(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188643990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

void *geo::MallocZoneAllocator::reallocate(malloc_zone_t **this, void *a2, size_t a3)
{
  geo::read_write_lock *v6;
  const char *v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  unint64_t *v11;
  unint64_t v12;
  geo::read_write_lock *v13;
  const char *v14;
  pthread_rwlock_t *v16;

  v16 = (pthread_rwlock_t *)(this + 7);
  v6 = (geo::read_write_lock *)pthread_rwlock_rdlock((pthread_rwlock_t *)(this + 7));
  if ((_DWORD)v6)
    geo::read_write_lock::logFailure(v6, (uint64_t)"read lock", v7);
  if (a2)
  {
    v8 = (unint64_t *)(this + 5);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
  }
  v10 = malloc_type_zone_realloc(this[6], a2, a3, 0x975057C8uLL);
  v11 = (unint64_t *)(this + 5);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = (geo::read_write_lock *)pthread_rwlock_unlock(v16);
  if ((_DWORD)v13)
    geo::read_write_lock::logFailure(v13, (uint64_t)"unlock", v14);
  return v10;
}

void sub_188643AFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  geo::read_lock_guard::~read_lock_guard((pthread_rwlock_t **)va);
  _Unwind_Resume(a1);
}

BOOL geo::codec::_readStyleAttributeRasters(geo::codec::Allocator *a1, uint64_t *a2, char a3)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  unsigned __int16 *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  geo::codec::Allocator *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int i;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  unsigned __int16 *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int j;
  uint64_t v46;
  int v47;
  uint64_t v49;
  unsigned __int8 v50;
  char v51;
  geo::codec::Allocator *v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  char v56;
  geo::codec::Allocator *v57;
  uint64_t v58;
  _BYTE v59[24];
  geo::codec::Allocator *v60;
  _QWORD v61[3];
  _QWORD *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v52 = a1;
  v51 = a3;
  v50 = 1;
  v5 = *((_QWORD *)a1 + 1);
  if (!v5)
  {
    v9 = 0;
    v57 = a1;
    v56 = a3;
    goto LABEL_39;
  }
  v6 = *(_QWORD *)a1;
  if (v5 == 1)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v7 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v12 = (unsigned __int16 *)(v6 + 16);
    v13 = v5 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v14 = *(v12 - 8);
      v16 = *v12;
      v12 += 16;
      v15 = v16;
      if (v14 == 154)
        ++v10;
      if (v15 == 154)
        ++v11;
      v13 -= 2;
    }
    while (v13);
    v8 = v11 + v10;
    if (v5 == v7)
      goto LABEL_16;
  }
  v17 = v5 - v7;
  v18 = (unsigned __int16 *)(v6 + 16 * v7);
  do
  {
    v19 = *v18;
    v18 += 8;
    if (v19 == 154)
      ++v8;
    --v17;
  }
  while (v17);
LABEL_16:
  v49 = v8;
  if (v8)
  {
    *(_WORD *)(*a2 + 2840) = 0;
    v20 = geo::codec::Allocator::instance(a1);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 24))(v20, v8, 24);
    v22 = *a2;
    *(_QWORD *)(*a2 + 2832) = v21;
    v58 = v21;
    v23 = (geo::codec::Allocator *)operator new(0x38uLL);
    *(_QWORD *)v23 = &off_1E1BFAB78;
    *((_QWORD *)v23 + 1) = a2;
    *((_QWORD *)v23 + 2) = &v58;
    *((_QWORD *)v23 + 3) = &v49;
    *((_QWORD *)v23 + 4) = &v51;
    *((_QWORD *)v23 + 5) = &v52;
    *((_QWORD *)v23 + 6) = &v50;
    v60 = v23;
    v24 = *((_QWORD *)a1 + 1);
    if (v24)
    {
      v25 = 0;
      for (i = 0; i < v24; v25 = ++i)
      {
        if (*(_WORD *)(*(_QWORD *)a1 + 16 * v25) == 154)
        {
          v61[0] = geo::codec::chapterAt((uint64_t)a1, i, 154, v22 + 1912);
          if (!v60)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(geo::codec::Allocator *, _QWORD *))(*(_QWORD *)v60 + 48))(v60, v61);
          v24 = *((_QWORD *)a1 + 1);
        }
      }
      v23 = v60;
      if (v60 == (geo::codec::Allocator *)v59)
      {
        v27 = 4;
        v23 = (geo::codec::Allocator *)v59;
        goto LABEL_52;
      }
      if (!v60)
      {
LABEL_53:
        v47 = v50;
        return v47 != 0;
      }
    }
    v27 = 5;
LABEL_52:
    (*(void (**)(geo::codec::Allocator *))(*(_QWORD *)v23 + 8 * v27))(v23);
    goto LABEL_53;
  }
  v57 = a1;
  v56 = a3;
  if (v5 >= 2)
  {
    v29 = 0;
    v30 = 0;
    v28 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v31 = (unsigned __int16 *)(v6 + 16);
    v32 = v5 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v33 = *(v31 - 8);
      v35 = *v31;
      v31 += 16;
      v34 = v35;
      if (v33 == 102)
        ++v29;
      if (v34 == 102)
        ++v30;
      v32 -= 2;
    }
    while (v32);
    v9 = v30 + v29;
    if (v5 == v28)
      goto LABEL_39;
  }
  else
  {
    v28 = 0;
    v9 = 0;
  }
  v36 = v5 - v28;
  v37 = (unsigned __int16 *)(v6 + 16 * v28);
  do
  {
    v38 = *v37;
    v37 += 8;
    if (v38 == 102)
      ++v9;
    --v36;
  }
  while (v36);
LABEL_39:
  v55 = v9;
  *(_WORD *)(*a2 + 2840) = 0;
  v39 = geo::codec::Allocator::instance(a1);
  v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39 + 24))(v39, v9, 24);
  v41 = *a2;
  *(_QWORD *)(*a2 + 2832) = v40;
  v54 = 1;
  v53 = v40;
  v42 = operator new(0x38uLL);
  *v42 = &off_1E1BFABD0;
  v42[1] = a2;
  v42[2] = &v53;
  v42[3] = &v55;
  v42[4] = &v56;
  v42[5] = &v57;
  v42[6] = &v54;
  v62 = v42;
  v43 = *((_QWORD *)a1 + 1);
  if (!v43)
    goto LABEL_47;
  v44 = 0;
  for (j = 0; j < v43; v44 = ++j)
  {
    if (*(_WORD *)(*(_QWORD *)a1 + 16 * v44) == 102)
    {
      v58 = geo::codec::chapterAt((uint64_t)a1, j, 102, v41 + 1912);
      if (!v62)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *, uint64_t *))(*v62 + 48))(v62, &v58);
      v43 = *((_QWORD *)a1 + 1);
    }
  }
  v42 = v62;
  if (v62 == v61)
  {
    v46 = 4;
    v42 = v61;
    goto LABEL_49;
  }
  if (v62)
  {
LABEL_47:
    v46 = 5;
LABEL_49:
    (*(void (**)(_QWORD *))(*v42 + 8 * v46))(v42);
  }
  v47 = v54;
  return v47 != 0;
}

void sub_188643FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t geo::codec::_readDaVinciTrafficSkeleton(_QWORD *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  FILE *v18;
  int v19;
  uint64_t v20;
  geo::codec::Allocator *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::chrono::steady_clock::time_point v26;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  size_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  double v56;
  int8x16_t v57;
  unsigned int v58;
  unint64_t v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  uint64_t v69;
  float v70;
  char *v71;
  float v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  __int128 v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  float v91;
  unsigned int v92;
  uint64_t v93;
  float v94;
  double v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  float32x2_t v102;
  int v103;
  double v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int v108;
  unsigned int v109;
  float32x2_t v110;
  float32x2_t v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  double v116;
  uint64_t v117;
  int v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  float *v122;
  float v123;
  BOOL v124;
  float v125;
  BOOL v126;
  NSObject *v127;
  _BOOL4 v128;
  char *v129;
  uint64_t v130;
  double v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  double v135;
  double v136;
  char *v137;
  float *v138;
  float v139;
  float v140;
  unint64_t v141;
  float32x2_t v142;
  float32x2_t v143;
  float32x2_t v144;
  float v145;
  double v146;
  double v147;
  float v148;
  NSObject *v149;
  uint64_t v150;
  int v151;
  unint64_t v152;
  uint64_t v153;
  double v154;
  float32x2_t *v155;
  unint64_t v156;
  double v157;
  float32x2_t v158;
  float v159;
  float v160;
  NSObject *v161;
  uint64_t v162;
  char *v163;
  float *v164;
  char v165;
  float v166;
  float32x2_t *v167;
  float v168;
  int v169;
  int v170;
  int8x16_t v171;
  int32x4_t *v172;
  float64x2_t v173;
  unsigned int v174;
  float64x2_t v175;
  float64x2_t v176;
  float64x2_t v177;
  const float *i32;
  int32x4_t v179;
  int32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  FILE *v188;
  int v189;
  unint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  unint64_t v196;
  uint64_t v197;
  unsigned int v198;
  unint64_t v199;
  char v200;
  float32x2_t v201;
  float32x2_t *v202;
  _QWORD *v203;
  uint64_t v204;
  char *v205;
  char *v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209[4];
  uint64_t v210[4];
  uint64_t v211[4];
  void *__p;
  void *v213;
  char *v214;
  uint64_t v215;
  void *v216;
  void *v217;
  char *v218;
  uint64_t v219;
  void *v220;
  void *v221;
  char *v222;
  uint64_t v223;
  void *v224;
  void *v225;
  char *v226;
  uint64_t v227;
  void *v228;
  _BYTE *v229;
  char *v230;
  unint64_t v231;
  void *v232;
  void *v233;
  char *v234;
  uint64_t v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  const char *v240;
  uint64_t v241;
  std::__shared_weak_count *v242;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  _BYTE buf[24];
  double v245;
  __int16 v246;
  int v247;
  __int16 v248;
  int v249;
  __int16 v250;
  unsigned int v251;
  uint64_t v252;
  float32x4x2_t v253;

  v252 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v7 = a1[1];
  if (!v7)
  {
LABEL_5:
    v10 = 0;
    v240 = "ChapterTrafficSkeleton2";
    v241 = v6;
    v11 = (std::__shared_weak_count *)a3[1];
    v242 = v11;
    if (!v11)
      goto LABEL_10;
    goto LABEL_8;
  }
  v8 = 0;
  v9 = 0;
  while (*(_WORD *)(*a1 + 16 * v8) != 152)
  {
    v8 = ++v9;
    if (v7 <= v9)
      goto LABEL_5;
  }
  v10 = (_QWORD *)geo::codec::chapterAt((uint64_t)a1, v9, 152, v6 + 1912);
  v12 = *a3;
  v240 = "ChapterTrafficSkeleton2";
  v241 = v12;
  v11 = (std::__shared_weak_count *)a3[1];
  v242 = v11;
  if (v11)
  {
LABEL_8:
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
LABEL_10:
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  if (!v10)
  {
    v20 = 1;
    goto LABEL_32;
  }
  v238 = 0;
  v239 = 0;
  v237 = 0;
  v236 = 0;
  if ((geo::codec::chapterReadVarUint32(v10, (unsigned int *)&v239 + 1) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 10779;
    goto LABEL_28;
  }
  if ((geo::codec::chapterReadVarUint32(v10, (unsigned int *)&v239) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 10780;
    goto LABEL_28;
  }
  if ((geo::codec::chapterReadVarUint32(v10, (unsigned int *)&v238 + 1) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 10781;
    goto LABEL_28;
  }
  if ((geo::codec::chapterReadVarUint32(v10, (unsigned int *)&v238) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 10782;
    goto LABEL_28;
  }
  if ((geo::codec::chapterReadVarUint32(v10, (unsigned int *)&v237 + 1) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 10783;
    goto LABEL_28;
  }
  if ((geo::codec::chapterReadVarUint32(v10, (unsigned int *)&v237) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 10784;
    goto LABEL_28;
  }
  if ((geo::codec::chapterReadVarUint32(v10, &v236) & 1) == 0)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 10785;
    goto LABEL_28;
  }
  v15 = v10[6];
  v16 = v10[7];
  v17 = v15 + 1;
  if (v15 + 1 > v16)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 10787;
    goto LABEL_28;
  }
  v32 = v10[5];
  v33 = *(_BYTE *)(v32 + v15);
  v10[6] = v17;
  v34 = v15 + 2;
  if (v34 > v16)
  {
    v18 = (FILE *)*MEMORY[0x1E0C80C10];
    v19 = 10788;
LABEL_28:
    v21 = (geo::codec::Allocator *)fprintf(v18, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v19);
    v20 = 0;
    if (!a1)
      goto LABEL_32;
    goto LABEL_29;
  }
  v35 = *(_BYTE *)(v32 + v17);
  v10[6] = v34;
  v36 = HIDWORD(v239);
  v233 = 0;
  v234 = 0;
  v232 = 0;
  if (HIDWORD(v239))
  {
    v37 = 4 * HIDWORD(v239);
    v232 = operator new(v37);
    v234 = (char *)v232 + 4 * v36;
    bzero(v232, v37);
    v233 = v234;
  }
  v235 = 0;
  v38 = v239;
  v229 = 0;
  v230 = 0;
  v228 = 0;
  if ((_DWORD)v239)
  {
    v39 = 8 * v239;
    v228 = operator new(v39);
    v230 = (char *)v228 + 8 * v38;
    bzero(v228, v39);
    v229 = v230;
  }
  v231 = 0;
  v40 = HIDWORD(v238);
  v225 = 0;
  v226 = 0;
  v224 = 0;
  if (HIDWORD(v238))
  {
    v41 = 4 * HIDWORD(v238);
    v224 = operator new(v41);
    v226 = (char *)v224 + 4 * v40;
    bzero(v224, v41);
    v225 = v226;
  }
  v227 = 0;
  v42 = v238;
  v221 = 0;
  v222 = 0;
  v220 = 0;
  if ((_DWORD)v238)
  {
    v43 = (char *)operator new(8 * v238);
    v44 = &v43[8 * v42];
    v220 = v43;
    v222 = v44;
    bzero(v43, 8 * v42);
    v221 = v44;
    v223 = 0;
    v216 = operator new(4 * v42);
    v218 = (char *)v216 + 4 * v42;
    bzero(v216, 4 * v42);
    v217 = v218;
  }
  else
  {
    v223 = 0;
    v216 = 0;
    v217 = 0;
    v218 = 0;
  }
  v219 = 0;
  v45 = HIDWORD(v237);
  v213 = 0;
  v214 = 0;
  __p = 0;
  if (HIDWORD(v237))
  {
    v46 = 4 * HIDWORD(v237);
    __p = operator new(v46);
    v214 = (char *)__p + 4 * v45;
    bzero(__p, v46);
    v213 = v214;
  }
  v215 = 0;
  memset(v211, 0, sizeof(v211));
  memset(v210, 0, sizeof(v210));
  memset(v209, 0, sizeof(v209));
  if ((geo::codec::decodeIntCompressorArray<unsigned int>(v10, v211, v237, v236, (uint64_t)&v232) & 1) == 0)
  {
    v188 = (FILE *)*MEMORY[0x1E0C80C10];
    v189 = 10805;
LABEL_181:
    fprintf(v188, "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", v189);
    goto LABEL_182;
  }
  if ((geo::codec::decodeIntCompressorArray<unsigned long long>(v10, v210, v237, v236, (uint64_t)&v228) & 1) == 0)
  {
    v188 = (FILE *)*MEMORY[0x1E0C80C10];
    v189 = 10806;
    goto LABEL_181;
  }
  if ((geo::codec::decodeIntCompressorArray<unsigned int>(v10, v211, v237, v236, (uint64_t)&v224) & 1) == 0)
  {
    v188 = (FILE *)*MEMORY[0x1E0C80C10];
    v189 = 10807;
    goto LABEL_181;
  }
  if ((geo::codec::decodeIntCompressorArray<long long>(v10, v209, v237, v236, (uint64_t)&v220) & 1) == 0)
  {
    v188 = (FILE *)*MEMORY[0x1E0C80C10];
    v189 = 10808;
    goto LABEL_181;
  }
  v200 = v33;
  if ((geo::codec::decodeIntCompressorArray<unsigned int>(v10, v211, v237, v236, (uint64_t)&v216) & 1) == 0)
  {
    v188 = (FILE *)*MEMORY[0x1E0C80C10];
    v189 = 10809;
    goto LABEL_181;
  }
  v47 = geo::codec::decodeIntCompressorArray<unsigned int>(v10, v211, v237, v236, (uint64_t)&__p);
  if ((v47 & 1) == 0)
  {
    v188 = (FILE *)*MEMORY[0x1E0C80C10];
    v189 = 10810;
    goto LABEL_181;
  }
  v48 = *a3;
  v197 = *(_QWORD *)(*a3 + 32);
  v49 = *(_QWORD *)(*a3 + 40) - v197;
  if (!v49)
  {
    v170 = 0;
    v169 = 1;
    goto LABEL_183;
  }
  v198 = *(_DWORD *)(v197 + 100);
  if (!v198)
  {
    v188 = (FILE *)*MEMORY[0x1E0C80C10];
    v189 = 10822;
    goto LABEL_181;
  }
  if (!HIDWORD(v239))
  {
    v169 = 0;
    v170 = 1;
    goto LABEL_183;
  }
  v199 = 0;
  v195 = 0;
  v196 = 0;
  v193 = *(_QWORD *)(v48 + 792);
  v191 = (uint64_t *)(v48 + 2920);
  v192 = *(_QWORD *)(v193 + 32);
  v190 = 0xCF3CF3CF3CF3CF3DLL * (v49 >> 3);
  v194 = (1 << v33) - 1;
  v50 = (double)~(-1 << v35);
  v51 = 1.0 / (double)((1 << v33) - 1);
  __asm { FMOV            V0.2S, #1.0 }
  v201 = _D0;
  v56 = 1.0 / v50;
  while (1)
  {
    v205 = 0;
    v206 = 0;
    v207 = 0;
    v208 = geo::codec::Allocator::instance((geo::codec::Allocator *)v47);
    v58 = *((_DWORD *)v232 + v199);
    if (v198 <= v58)
      break;
    v59 = v196;
    v60 = v195;
    v61 = v198;
LABEL_68:
    v198 = v61;
    v195 = v60;
    v62 = v58 - v60;
    LODWORD(v204) = v59;
    HIDWORD(v204) = v58 - v60;
    v196 = v59;
    v63 = (++v199 << v200) - 1;
    v64 = v231;
    v66 = v227;
    v65 = v228;
    v67 = *((_QWORD *)v228 + v231);
    v68 = (unsigned int *)v224;
    do
    {
      v231 = ++v64;
      v227 = v66 + 1;
      v69 = v68[v66];
      if ((_DWORD)v69)
      {
        v70 = (double)(v67 & v194) * v51;
        v71 = v206;
        do
        {
          if ((unint64_t)v71 >= v207)
          {
            v74 = (v71 - v205) >> 5;
            if ((unint64_t)(v74 + 1) >> 59)
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            v75 = (uint64_t)(v207 - (_QWORD)v205) >> 4;
            if (v75 <= v74 + 1)
              v75 = v74 + 1;
            if (v207 - (unint64_t)v205 >= 0x7FFFFFFFFFFFFFE0)
              v76 = 0x7FFFFFFFFFFFFFFLL;
            else
              v76 = v75;
            if (v76)
            {
              v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v208 + 16))(v208, 32 * v76, 8);
              v78 = (char *)(v77 + 32 * v74);
              v79 = v77 + 32 * v76;
              if (v77)
              {
                *(_OWORD *)v78 = 0u;
                *((_OWORD *)v78 + 1) = 0u;
              }
            }
            else
            {
              v79 = 0;
              v78 = (char *)(32 * v74);
            }
            v81 = v205;
            v80 = v206;
            v82 = v78;
            if (v206 != v205)
            {
              do
              {
                v83 = *((_OWORD *)v80 - 1);
                *((_OWORD *)v82 - 2) = *((_OWORD *)v80 - 2);
                *((_OWORD *)v82 - 1) = v83;
                v82 -= 32;
                v80 -= 32;
              }
              while (v80 != v81);
              v80 = v205;
            }
            v71 = v78 + 32;
            v205 = v82;
            v206 = v78 + 32;
            v84 = v207;
            v207 = v79;
            if (v80)
              (*(void (**)(uint64_t, char *, unint64_t))(*(_QWORD *)v208 + 40))(v208, v80, v84 - (_QWORD)v80);
          }
          else
          {
            if (v71)
            {
              *(_OWORD *)v71 = 0u;
              *((_OWORD *)v71 + 1) = 0u;
            }
            v71 += 32;
          }
          v206 = v71;
          v85 = v223++;
          *((_QWORD *)v71 - 3) = *((_QWORD *)v220 + v85);
          *((float *)v71 - 8) = v70;
          v86 = v219++;
          v87 = *((_DWORD *)v216 + v86);
          *(v71 - 6) = (v87 & 8) != 0;
          *(v71 - 7) = (v87 & 4) != 0;
          *(v71 - 8) = ((v87 >> 5) & 1) != ((v87 >> 3) & 1);
          *(v71 - 5) = (v87 & 0x10) != 0;
          v64 = v231;
          v88 = v69 + v231 - 1;
          v89 = (v199 << v200) - 1;
          if (v88 < v239)
          {
            if (v88 >= (v229 - (_BYTE *)v228) >> 3)
              std::vector<zilch::GeoCoordinates>::__throw_out_of_range[abi:ne180100]();
            v90 = *((_QWORD *)v228 + v88);
            if (v63 >= v90)
              v89 = v90;
            else
              v89 = (v199 << v200) - 1;
          }
          v91 = (double)(v89 & (unint64_t)v194) * v51;
          *((float *)v71 - 7) = v91;
          if ((v87 & 1) != 0)
          {
            v93 = v215++;
            v92 = *((_DWORD *)__p + v93);
          }
          else
          {
            v92 = 0;
          }
          v94 = (double)v92 * v56;
          *((float *)v71 - 4) = v94;
          v95 = v50;
          if ((v87 & 2) != 0)
          {
            v96 = v215++;
            LODWORD(v95) = *((_DWORD *)__p + v96);
            v95 = (double)*(unint64_t *)&v95;
          }
          v72 = v95 * v56;
          *((float *)v71 - 3) = v72;
          v73 = v227;
          v68 = (unsigned int *)v224;
          v66 = ++v227;
          v69 = *((unsigned int *)v224 + v73);
        }
        while ((_DWORD)v69);
        v65 = v228;
      }
      else
      {
        ++v66;
      }
      if (v64 >= (v229 - v65) >> 3)
        break;
      v67 = *(_QWORD *)&v65[8 * v64];
    }
    while (v67 <= v63);
    v97 = (uint64_t *)(v192 + 16 * (*(_DWORD *)(v197 + 168 * v196 + 96) + v62));
    v98 = *(_QWORD *)(v193 + 8);
    v99 = *v97;
    v202 = (float32x2_t *)(v98 + 8 * *v97);
    v100 = v97[1];
    v203 = v97 + 1;
    v101 = v100 - 1;
    if (v100 == 1)
    {
      v104 = 0.0;
      goto LABEL_116;
    }
    v102 = *v202;
    v103 = v100 - 1;
    v104 = 0.0;
    if ((v100 - 1) < 8
      || ((v105 = v100 - 2, _ZF = (_DWORD)v105 == -1, v106 = HIDWORD(v105), !_ZF) ? (_ZF = v106 == 0) : (_ZF = 0), !_ZF))
    {
      v108 = 0;
      goto LABEL_112;
    }
    v108 = v103 & 0xFFFFFFF8;
    v57.u64[1] = (unint64_t)*v202;
    v171 = (int8x16_t)vdupq_lane_s32((int32x2_t)v102, 0);
    v172 = (int32x4_t *)(v98 + 8 * v99 + 40);
    v173 = 0uLL;
    v174 = v103 & 0xFFFFFFF8;
    v175 = 0uLL;
    v176 = 0uLL;
    v177 = 0uLL;
    do
    {
      i32 = (const float *)v172[-2].i32;
      v253 = vld2q_f32(i32);
      v180 = *v172;
      v179 = v172[1];
      v172 += 4;
      v181 = (float32x4_t)vuzp1q_s32(v180, v179);
      v182 = (float32x4_t)vuzp2q_s32(v180, v179);
      v183 = vsubq_f32((float32x4_t)vextq_s8(v171, (int8x16_t)v253.val[0], 0xCuLL), v253.val[0]);
      v184 = vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v253.val[0], (int8x16_t)v181, 0xCuLL), v181);
      v185 = vsubq_f32((float32x4_t)vextq_s8(v57, (int8x16_t)v253.val[1], 0xCuLL), v253.val[1]);
      v253.val[0] = vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v253.val[1], (int8x16_t)v182, 0xCuLL), v182);
      v186 = vsqrtq_f32(vmlaq_f32(vmulq_f32(v183, v183), v185, v185));
      v187 = vsqrtq_f32(vmlaq_f32(vmulq_f32(v184, v184), v253.val[0], v253.val[0]));
      v175 = vaddq_f64(v175, vcvt_hight_f64_f32(v186));
      v173 = vaddq_f64(v173, vcvtq_f64_f32(*(float32x2_t *)v186.f32));
      v177 = vaddq_f64(v177, vcvt_hight_f64_f32(v187));
      v176 = vaddq_f64(v176, vcvtq_f64_f32(*(float32x2_t *)v187.f32));
      v57 = (int8x16_t)v182;
      v171 = (int8x16_t)v181;
      v174 -= 8;
    }
    while (v174);
    v104 = vaddvq_f64(vaddq_f64(vaddq_f64(v176, v173), vaddq_f64(v177, v175)));
    if (v103 != v108)
    {
      v102 = (float32x2_t)vextq_s8((int8x16_t)v179, (int8x16_t)v179, 8uLL).u64[0];
LABEL_112:
      v109 = v108 + 1;
      do
      {
        v110 = v202[v109];
        v111 = vsub_f32(v102, v110);
        v104 = v104 + sqrtf(vaddv_f32(vmul_f32(v111, v111)));
        v124 = v101 > v109++;
        v102 = v110;
      }
      while (v124);
    }
LABEL_116:
    v112 = v205;
    if (v206 != v205)
    {
      v113 = 0;
      v114 = 0;
      v115 = v98 + 8 * v99 + 8;
      v116 = 0.0;
      while (1)
      {
        v122 = (float *)&v112[32 * v113];
        v123 = *v122;
        v124 = *v122 >= 0.0 && v123 <= 1.0;
        if (!v124 || ((v125 = v122[1], v125 >= 0.0) ? (v126 = v125 <= 1.0) : (v126 = 0), !v126))
        {
          if (qword_1ECDBCDF8 != -1)
            dispatch_once(&qword_1ECDBCDF8, &__block_literal_global_217);
          v127 = _MergedGlobals_352;
          v128 = os_log_type_enabled((os_log_t)_MergedGlobals_352, OS_LOG_TYPE_ERROR);
          v123 = *v122;
          if (v128)
          {
            v129 = &v112[32 * v113];
            v130 = *((_QWORD *)v129 + 1);
            v131 = *((float *)v129 + 1);
            LODWORD(v129) = *((unsigned __int16 *)a2 + 4);
            v132 = *a2;
            v133 = (*a2 >> 14) & 0x3FFFFFF;
            v134 = *a2 >> 40;
            *(_DWORD *)buf = 134219264;
            *(_QWORD *)&buf[4] = v130;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v123;
            *(_WORD *)&buf[22] = 2048;
            v245 = v131;
            v246 = 1024;
            v247 = v133;
            v248 = 1024;
            v249 = (v134 | ((_DWORD)v129 << 24)) & 0x3FFFFFF;
            v250 = 1024;
            v251 = (v132 >> 8) & 0x3F;
            _os_log_impl(&dword_1885A9000, v127, OS_LOG_TYPE_ERROR, "SectionBegin/SectionEnd outside of range: geoId = %lld, Vertex Begin = %f, Vertex End = %f, in traffic tile (%d, %d, %d).", buf, 0x32u);
            v123 = *v122;
          }
        }
        v135 = v123;
        v136 = -(v116 - v104 * v123);
        v137 = &v112[32 * v113];
        v139 = *((float *)v137 + 1);
        v138 = (float *)(v137 + 4);
        v140 = v139;
        *v122 = 0.0;
        v141 = *v203 - 1;
        if (v114 >= v141 || v136 < 0.0)
        {
          v147 = v136;
        }
        else
        {
          v142 = v202[v114];
          while (1)
          {
            v143 = v142;
            v142 = *(float32x2_t *)(v115 + 8 * v114);
            v144 = vsub_f32(v143, v142);
            v145 = sqrtf(vaddv_f32(vmul_f32(v144, v144)));
            v146 = v145;
            v147 = v136 - v145;
            if (v145 > 0.0 && v147 <= 0.0)
              break;
            ++v114;
            v116 = v116 + v146;
            if (v114 < v141)
            {
              v136 = v136 - v145;
              if (v147 >= 0.0)
                continue;
            }
            goto LABEL_143;
          }
          v148 = v136 / v146 + (double)v114;
          *v122 = v148;
        }
LABEL_143:
        if (v147 > 0.0)
        {
          if (qword_1ECDBCDF8 != -1)
          {
            dispatch_once(&qword_1ECDBCDF8, &__block_literal_global_217);
            v149 = _MergedGlobals_352;
            if (!os_log_type_enabled((os_log_t)_MergedGlobals_352, OS_LOG_TYPE_ERROR))
              goto LABEL_147;
LABEL_146:
            v150 = *(_QWORD *)&v112[32 * v113 + 8];
            v151 = *((unsigned __int16 *)a2 + 4);
            v152 = *a2;
            v153 = (*a2 >> 14) & 0x3FFFFFF;
            *(_DWORD *)buf = 134219264;
            *(_QWORD *)&buf[4] = v150;
            *(_WORD *)&buf[12] = 2048;
            *(double *)&buf[14] = v135;
            *(_WORD *)&buf[22] = 2048;
            v245 = v140;
            v246 = 1024;
            v247 = v153;
            v248 = 1024;
            v249 = ((v152 >> 40) | (v151 << 24)) & 0x3FFFFFF;
            v250 = 1024;
            v251 = (v152 >> 8) & 0x3F;
            _os_log_impl(&dword_1885A9000, v149, OS_LOG_TYPE_ERROR, "Cannot find vertex offset: geoId = %lld, Vertex Begin = %f, Vertex End = %f, in traffic tile (%d, %d, %d).", buf, 0x32u);
            goto LABEL_147;
          }
          v149 = _MergedGlobals_352;
          if (os_log_type_enabled((os_log_t)_MergedGlobals_352, OS_LOG_TYPE_ERROR))
            goto LABEL_146;
        }
LABEL_147:
        v154 = -(v116 - v104 * *v138);
        *v138 = 0.0;
        v155 = (float32x2_t *)(v115 + 8 * v114);
        v156 = v114;
        while (1)
        {
          v157 = v154;
          if (v156 >= *v203 - 1 || v154 < 0.0)
            break;
          ++v156;
          v158 = vsub_f32(v155[-1], *v155);
          v159 = sqrtf(vaddv_f32(vmul_f32(v158, v158)));
          v154 = v157 - v159;
          ++v155;
          if (v159 > 0.0 && v154 <= 0.00001)
          {
            v160 = v157 / v159 + (double)(v156 - 1) - *v122;
            *v138 = v160;
            break;
          }
        }
        if (v154 <= 0.00001)
          goto LABEL_119;
        if (qword_1ECDBCDF8 == -1)
        {
          v161 = _MergedGlobals_352;
          if (!os_log_type_enabled((os_log_t)_MergedGlobals_352, OS_LOG_TYPE_ERROR))
            goto LABEL_119;
        }
        else
        {
          dispatch_once(&qword_1ECDBCDF8, &__block_literal_global_217);
          v161 = _MergedGlobals_352;
          if (!os_log_type_enabled((os_log_t)_MergedGlobals_352, OS_LOG_TYPE_ERROR))
            goto LABEL_119;
        }
        v117 = *(_QWORD *)&v112[32 * v113 + 8];
        v118 = *((unsigned __int16 *)a2 + 4);
        v119 = *a2;
        v120 = (*a2 >> 14) & 0x3FFFFFF;
        *(_DWORD *)buf = 134219264;
        *(_QWORD *)&buf[4] = v117;
        *(_WORD *)&buf[12] = 2048;
        *(double *)&buf[14] = v135;
        *(_WORD *)&buf[22] = 2048;
        v245 = v140;
        v246 = 1024;
        v247 = v120;
        v248 = 1024;
        v249 = ((v119 >> 40) | (v118 << 24)) & 0x3FFFFFF;
        v250 = 1024;
        v251 = (v119 >> 8) & 0x3F;
        _os_log_impl(&dword_1885A9000, v161, OS_LOG_TYPE_ERROR, "Cannot find vertex count: geoId = %lld, Vertex Begin = %f, Vertex End = %f, in traffic tile (%d, %d, %d).", buf, 0x32u);
LABEL_119:
        ++v113;
        v112 = v205;
        v121 = (v206 - v205) >> 5;
        if (v113 >= v121)
          goto LABEL_162;
      }
    }
    v121 = (v206 - v205) >> 5;
LABEL_162:
    if (v121)
    {
      v162 = 0;
      do
      {
        v163 = v205;
        v164 = (float *)&v205[v162];
        v165 = v205[v162 + 26];
        if (v165)
        {
          v166 = v164[1];
          *v164 = v166 + *v164;
          v164[1] = -v166;
        }
        if (!*((_BYTE *)v164 + 25))
        {
          v167 = (float32x2_t *)&v163[v162];
          *(_QWORD *)&buf[8] = -*(_QWORD *)&v167[1];
          v168 = v167->f32[1];
          *(float *)buf = v168 + v167->f32[0];
          *(float *)&buf[4] = -v168;
          LOWORD(v245) = v167[3].i8[0] == 0;
          *(int32x2_t *)&buf[16] = vrev64_s32((int32x2_t)vsub_f32(v201, v167[2]));
          BYTE2(v245) = v165;
          BYTE3(v245) = v167[3].i8[3];
          std::vector<GeoCodecsTrafficSkeletonRecord,geo::StdAllocator<GeoCodecsTrafficSkeletonRecord,geo::codec::Allocator>>::emplace_back<GeoCodecsTrafficSkeletonRecord&>((uint64_t)&v205, buf);
        }
        v162 += 32;
        --v121;
      }
      while (v121);
    }
    std::vector<GeoCodecsTrafficSkeleton,geo::StdAllocator<GeoCodecsTrafficSkeleton,geo::codec::Allocator>>::emplace_back<GeoCodecsTrafficSkeleton&>(v191, &v204);
    GeoCodecsTrafficSkeleton::~GeoCodecsTrafficSkeleton((GeoCodecsTrafficSkeleton *)&v204);
    v169 = 0;
    v170 = 1;
    if (v199 >= HIDWORD(v239))
      goto LABEL_183;
  }
  LODWORD(v59) = v196;
  v61 = v198;
  while (1)
  {
    v59 = (v59 + 1);
    if (v190 <= v59)
      break;
    v60 = v61;
    v61 += *(_DWORD *)(v197 + 168 * v59 + 100);
    if (v61 > v58)
      goto LABEL_68;
  }
  fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s:%d VMP4 Parse: Decode error here\n", "/Library/Caches/com.apple.xbs/Sources/GeoServices/geo/GeoCodecs/GeoCodecs/VMP4/VMP4Decoder.cpp", 10832);
  GeoCodecsTrafficSkeleton::~GeoCodecsTrafficSkeleton((GeoCodecsTrafficSkeleton *)&v204);
LABEL_182:
  v170 = 0;
  v169 = 0;
LABEL_183:
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v209);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v210);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)v211);
  if (__p)
  {
    v213 = __p;
    operator delete(__p);
  }
  if (v216)
  {
    v217 = v216;
    operator delete(v216);
  }
  if (v220)
  {
    v221 = v220;
    operator delete(v220);
  }
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  if (v228)
  {
    v229 = v228;
    operator delete(v228);
  }
  v21 = (geo::codec::Allocator *)v232;
  if (v232)
  {
    v233 = v232;
    operator delete(v232);
  }
  v20 = v170 | v169;
  if (a1)
  {
LABEL_29:
    if (*(_BYTE *)v10)
    {
      v22 = geo::codec::Allocator::instance(v21);
      v21 = (geo::codec::Allocator *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v22 + 40))(v22, v10[5], 0);
    }
    v23 = geo::codec::Allocator::instance(v21);
    (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v23 + 40))(v23, v10, 0);
  }
LABEL_32:
  v25 = (uint64_t)v240;
  v24 = v241;
  v26.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v27 = rep;
  v204 = v25;
  if (v25)
  {
    *(_QWORD *)buf = &v204;
    *((double *)std::__hash_table<std::__hash_value_type<char const*,DebugChapterInfo>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::hash<char const*>,std::equal_to<char const*>,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,DebugChapterInfo>,std::equal_to<char const*>,std::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,DebugChapterInfo>>>::__emplace_unique_key_args<char const*,std::piecewise_construct_t const&,std::tuple<char const* const&>,std::tuple<>>(v24 + 1912, &v204, (uint64_t)&std::piecewise_construct, (uint64_t **)buf)+ 4) = (double)((v26.__d_.__rep_ - v27) / 1000) * 0.001;
  }
  v28 = v242;
  if (v242)
  {
    v29 = (unint64_t *)&v242->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return v20;
}

void sub_188645308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  uint64_t a66;
  uint64_t v66;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;

  GeoCodecsTrafficSkeleton::~GeoCodecsTrafficSkeleton((GeoCodecsTrafficSkeleton *)&a28);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a33);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a37);
  mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor((uint64_t)&a41);
  if (__p)
  {
    a46 = (uint64_t)__p;
    operator delete(__p);
    v68 = a49;
    if (!a49)
    {
LABEL_3:
      v69 = a53;
      if (!a53)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    v68 = a49;
    if (!a49)
      goto LABEL_3;
  }
  a50 = (uint64_t)v68;
  operator delete(v68);
  v69 = a53;
  if (!a53)
  {
LABEL_4:
    v70 = a57;
    if (!a57)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  a54 = (uint64_t)v69;
  operator delete(v69);
  v70 = a57;
  if (!a57)
  {
LABEL_5:
    v71 = a61;
    if (!a61)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  a58 = (uint64_t)v70;
  operator delete(v70);
  v71 = a61;
  if (!a61)
  {
LABEL_6:
    v72 = a65;
    if (!a65)
    {
LABEL_14:
      geo::codec::ChapterDecodeTimer::~ChapterDecodeTimer((geo::codec::ChapterDecodeTimer *)(v66 - 256));
      _Unwind_Resume(a1);
    }
LABEL_13:
    a66 = (uint64_t)v72;
    operator delete(v72);
    goto LABEL_14;
  }
LABEL_12:
  a62 = (uint64_t)v71;
  operator delete(v71);
  v72 = a65;
  if (!a65)
    goto LABEL_14;
  goto LABEL_13;
}

uint64_t std::vector<GeoCodecsTrafficSkeletonRecord,geo::StdAllocator<GeoCodecsTrafficSkeletonRecord,geo::codec::Allocator>>::emplace_back<>(uint64_t result)
{
  uint64_t v1;
  _OWORD *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v1 = result;
  v2 = *(_OWORD **)(result + 8);
  v3 = *(_QWORD *)(result + 16);
  if ((unint64_t)v2 >= v3)
  {
    v4 = ((uint64_t)v2 - *(_QWORD *)result) >> 5;
    v5 = v4 + 1;
    if ((unint64_t)(v4 + 1) >> 59)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v6 = v3 - *(_QWORD *)result;
    if (v6 >> 4 > v5)
      v5 = v6 >> 4;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFE0)
      v5 = 0x7FFFFFFFFFFFFFFLL;
    if (v5)
    {
      v7 = 32 * v5;
      result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 32 * v5, 8);
      v8 = (_OWORD *)(result + 32 * v4);
      v5 = result + v7;
      if (result)
      {
        *v8 = 0u;
        v8[1] = 0u;
      }
      v9 = (uint64_t)(v8 + 2);
      v11 = *(_QWORD *)v1;
      v10 = *(_QWORD *)(v1 + 8);
      if (v10 == *(_QWORD *)v1)
      {
LABEL_14:
        *(_QWORD *)v1 = v8;
        *(_QWORD *)(v1 + 8) = v9;
        v12 = *(_QWORD *)(v1 + 16);
        *(_QWORD *)(v1 + 16) = v5;
        if (!v10)
        {
LABEL_15:
          *(_QWORD *)(v1 + 8) = v9;
          return result;
        }
LABEL_19:
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v1 + 24) + 40))(*(_QWORD *)(v1 + 24), v10, v12 - v10);
        goto LABEL_15;
      }
    }
    else
    {
      v8 = (_OWORD *)(32 * v4);
      v9 = 32 * v4 + 32;
      v11 = *(_QWORD *)result;
      v10 = *(_QWORD *)(result + 8);
      if (v10 == *(_QWORD *)result)
        goto LABEL_14;
    }
    do
    {
      v13 = *(_OWORD *)(v10 - 16);
      *(v8 - 2) = *(_OWORD *)(v10 - 32);
      *(v8 - 1) = v13;
      v8 -= 2;
      v10 -= 32;
    }
    while (v10 != v11);
    v10 = *(_QWORD *)v1;
    *(_QWORD *)v1 = v8;
    *(_QWORD *)(v1 + 8) = v9;
    v12 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v1 + 16) = v5;
    if (!v10)
      goto LABEL_15;
    goto LABEL_19;
  }
  if (v2)
  {
    *v2 = 0u;
    v2[1] = 0u;
  }
  *(_QWORD *)(result + 8) = v2 + 2;
  return result;
}

uint64_t *std::vector<GeoCodecsTrafficSkeleton,geo::StdAllocator<GeoCodecsTrafficSkeleton,geo::codec::Allocator>>::emplace_back<GeoCodecsTrafficSkeleton&>(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;

  v3 = result;
  v5 = (_QWORD *)result[1];
  v4 = result[2];
  if ((unint64_t)v5 < v4)
  {
    if (v5)
    {
      *v5 = *a2;
      result = std::vector<GeoCodecsTrafficSkeletonRecord,geo::StdAllocator<GeoCodecsTrafficSkeletonRecord,geo::codec::Allocator>>::vector(v5 + 1, a2 + 1);
    }
    v6 = v5 + 5;
    v3[1] = (uint64_t)(v5 + 5);
    goto LABEL_28;
  }
  v7 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v5 - *result) >> 3);
  if (v7 + 1 > 0x666666666666666)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *result) >> 3);
  v9 = 2 * v8;
  if (2 * v8 <= v7 + 1)
    v9 = v7 + 1;
  if (v8 >= 0x333333333333333)
    v10 = 0x666666666666666;
  else
    v10 = v9;
  v25 = result + 3;
  if (v10)
  {
    result = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)result[3] + 16))(result[3], 40 * v10, 8);
    v11 = (uint64_t)&result[5 * v7];
    v21 = v11;
    v22 = v11;
    v24 = &result[5 * v10];
    if (result)
    {
      *(_QWORD *)v11 = *a2;
      result = std::vector<GeoCodecsTrafficSkeletonRecord,geo::StdAllocator<GeoCodecsTrafficSkeletonRecord,geo::codec::Allocator>>::vector(&result[5 * v7 + 1], a2 + 1);
      v11 = v21;
      v6 = (_QWORD *)(v22 + 40);
      v23 = v22 + 40;
      v13 = *v3;
      v12 = v3[1];
      if (v12 != *v3)
        goto LABEL_14;
LABEL_19:
      v17 = v12;
      goto LABEL_20;
    }
  }
  else
  {
    result = 0;
    v11 = 40 * v7;
    v24 = 0;
  }
  v6 = (_QWORD *)(v11 + 40);
  v23 = v11 + 40;
  v13 = *v3;
  v12 = v3[1];
  if (v12 == *v3)
    goto LABEL_19;
LABEL_14:
  v14 = 0;
  do
  {
    v15 = v11 + v14;
    v16 = v12 + v14;
    *(_QWORD *)(v15 - 40) = *(_QWORD *)(v12 + v14 - 40);
    *(_QWORD *)(v15 - 32) = 0;
    *(_QWORD *)(v15 - 24) = 0;
    *(_QWORD *)(v15 - 16) = 0;
    *(_QWORD *)(v15 - 8) = *(_QWORD *)(v12 + v14 - 8);
    *(_OWORD *)(v15 - 32) = *(_OWORD *)(v12 + v14 - 32);
    *(_QWORD *)(v15 - 16) = *(_QWORD *)(v12 + v14 - 16);
    *(_QWORD *)(v16 - 32) = 0;
    *(_QWORD *)(v16 - 24) = 0;
    *(_QWORD *)(v16 - 16) = 0;
    v14 -= 40;
  }
  while (v12 + v14 != v13);
  v17 = *v3;
  v12 = v3[1];
  v11 += v14;
  v6 = (_QWORD *)v23;
LABEL_20:
  *v3 = v11;
  v3[1] = (uint64_t)v6;
  v18 = v3[2];
  v3[2] = (uint64_t)v24;
  if (v12 == v17)
  {
    if (!v12)
      goto LABEL_28;
    goto LABEL_27;
  }
  do
  {
    v19 = v12 - 40;
    v20 = *(_QWORD *)(v12 - 32);
    if (v20)
    {
      *(_QWORD *)(v12 - 24) = v20;
      result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v12 - 8) + 40))(*(_QWORD *)(v12 - 8), v20, *(_QWORD *)(v12 - 16) - v20);
    }
    v12 = v19;
  }
  while (v19 != v17);
  v12 = v17;
  if (v17)
LABEL_27:
    result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v25 + 40))(*v25, v12, v18 - v12);
LABEL_28:
  v3[1] = (uint64_t)v6;
  return result;
}

void sub_1886457E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<GeoCodecsTrafficSkeleton,geo::StdAllocator<GeoCodecsTrafficSkeleton,geo::codec::Allocator> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1886457FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::vector<GeoCodecsTrafficSkeletonRecord,geo::StdAllocator<GeoCodecsTrafficSkeletonRecord,geo::codec::Allocator>>::vector(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;

  *a1 = 0;
  a1[1] = 0;
  v3 = a2[3];
  a1[2] = 0;
  a1[3] = v3;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    if (v6 < 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v5 - *a2, 8);
    v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = v7 + 32 * (v6 >> 5);
    do
    {
      v9 = (_OWORD *)(v7 + v8);
      if (v7 + v8)
      {
        v10 = *(_OWORD *)(v4 + v8 + 16);
        *v9 = *(_OWORD *)(v4 + v8);
        v9[1] = v10;
      }
      v8 += 32;
    }
    while (v4 + v8 != v5);
    a1[1] = v7 + v8;
  }
  return a1;
}

void sub_1886458B0(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  if (*v1)
  {
    v1[1] = v3;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v1[3] + 40))(v1[3], v3, v1[2] - v3);
  }
  _Unwind_Resume(exception_object);
}

void GeoCodecsTrafficSkeleton::~GeoCodecsTrafficSkeleton(GeoCodecsTrafficSkeleton *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    *((_QWORD *)this + 2) = v1;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4), v1, *((_QWORD *)this + 3) - v1);
  }
}

uint64_t std::vector<GeoCodecsTrafficSkeletonRecord,geo::StdAllocator<GeoCodecsTrafficSkeletonRecord,geo::codec::Allocator>>::emplace_back<GeoCodecsTrafficSkeletonRecord&>(uint64_t result, _OWORD *a2)
{
  uint64_t v3;
  _OWORD *v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v3 = result;
  v4 = *(_OWORD **)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if ((unint64_t)v4 >= v5)
  {
    v7 = ((uint64_t)v4 - *(_QWORD *)result) >> 5;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 59)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v9 = v5 - *(_QWORD *)result;
    if (v9 >> 4 > v8)
      v8 = v9 >> 4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v8 = 0x7FFFFFFFFFFFFFFLL;
    if (v8)
    {
      v10 = 32 * v8;
      result = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(result + 24) + 16))(*(_QWORD *)(result + 24), 32 * v8, 8);
      v11 = (_OWORD *)(result + 32 * v7);
      v8 = result + v10;
      if (result)
      {
        v12 = a2[1];
        *v11 = *a2;
        v11[1] = v12;
      }
      v13 = (uint64_t)(v11 + 2);
      v15 = *(_QWORD *)v3;
      v14 = *(_QWORD *)(v3 + 8);
      if (v14 == *(_QWORD *)v3)
      {
LABEL_14:
        *(_QWORD *)v3 = v11;
        *(_QWORD *)(v3 + 8) = v13;
        v16 = *(_QWORD *)(v3 + 16);
        *(_QWORD *)(v3 + 16) = v8;
        if (!v14)
        {
LABEL_15:
          *(_QWORD *)(v3 + 8) = v13;
          return result;
        }
LABEL_19:
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v3 + 24) + 40))(*(_QWORD *)(v3 + 24), v14, v16 - v14);
        goto LABEL_15;
      }
    }
    else
    {
      v11 = (_OWORD *)(32 * v7);
      v13 = 32 * v7 + 32;
      v15 = *(_QWORD *)result;
      v14 = *(_QWORD *)(result + 8);
      if (v14 == *(_QWORD *)result)
        goto LABEL_14;
    }
    do
    {
      v17 = *(_OWORD *)(v14 - 16);
      *(v11 - 2) = *(_OWORD *)(v14 - 32);
      *(v11 - 1) = v17;
      v11 -= 2;
      v14 -= 32;
    }
    while (v14 != v15);
    v14 = *(_QWORD *)v3;
    *(_QWORD *)v3 = v11;
    *(_QWORD *)(v3 + 8) = v13;
    v16 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v8;
    if (!v14)
      goto LABEL_15;
    goto LABEL_19;
  }
  if (v4)
  {
    v6 = a2[1];
    *v4 = *a2;
    v4[1] = v6;
  }
  *(_QWORD *)(result + 8) = v4 + 2;
  return result;
}

uint64_t geo::codec::decodeIntCompressorArray<unsigned int>(_QWORD *a1, uint64_t *a2, char a3, char a4, uint64_t a5)
{
  int8x16_t *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int v16;

  v5 = *(int8x16_t **)a5;
  v6 = *(_QWORD *)(a5 + 8);
  v16 = 0;
  if (!a2)
    return 0;
  result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v16);
  if ((_DWORD)result)
  {
    v12 = v16;
    v13 = a1[6];
    v14 = v13 + v16;
    if (v14 <= a1[7])
    {
      v15 = (unsigned __int8 *)(a1[5] + v13);
      a1[6] = v14;
      return mgcl::ints::IntDecompressor<unsigned int>::decompress(a2, v15, v12, a3, a4, (v6 - (uint64_t)v5) >> 2, v5) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t mgcl::ints::IntDecompressor<unsigned int>::decompress(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, char a4, char a5, unint64_t a6, int8x16_t *a7)
{
  size_t v12;
  uint64_t result;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD **v40;
  _QWORD *v41;
  _QWORD *v42;
  void *v43;
  void *v44;
  BOOL v45;
  unsigned int v46;
  unsigned __int8 *v47;
  unsigned int v48;
  int v49;
  char *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  size_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  size_t v59;
  size_t v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  unsigned __int8 *v71;
  uint64_t v72;
  int v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD **v77;
  _QWORD *v78;
  _QWORD *v79;
  void *v80;
  void *v81;
  unsigned int v82;
  unsigned __int8 *v83;
  unsigned int v84;
  int v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  size_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  size_t v94;
  size_t v95;
  uint64_t *v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  _BYTE *v101;
  unint64_t v102;
  char *v103;
  _BYTE *v104;
  char *v105;
  char *v106;
  char *v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 *v115;
  int v116;
  unint64_t v117;
  __int32 v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  unsigned int v124;
  int v125;
  int v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  size_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  size_t v135;
  size_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  char *v140;
  char *v141;
  _BYTE *v142;
  unint64_t v143;
  char *v144;
  _BYTE *v145;
  char *v146;
  char *v147;
  char *v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unsigned __int8 *v156;
  int v157;
  unint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  unsigned int v163;
  int v164;
  int v165;
  unint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t *v171;
  size_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  size_t v176;
  size_t v177;
  uint64_t *v178;
  unint64_t v179;
  char *v180;
  char *v181;
  size_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  size_t v187;
  uint64_t *v188;
  unsigned int v189;
  size_t v190;
  char *v191;
  char *v192;
  _BYTE *v193;
  int v194;
  int v195;
  int v196;
  int v197;
  uint64_t i;
  int v199;
  uint64_t v200;
  uint64_t v201;
  __int32 v202;
  _BYTE *v203;
  int v204;
  int v205;
  int v206;
  int v207;
  uint64_t j;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  int v214;
  char v215;
  unsigned int v216;
  uint64_t v217;
  int v218;
  int v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unsigned int v223;
  int v224;
  uint64_t v225;
  BOOL v226;
  __int32 v227;
  char v228;
  int v229;
  char v230;
  char v231;
  unsigned int v232;
  unint64_t v233;
  int v234;
  int v235;
  int v236;
  int v237;
  char *v238;
  char *v239;
  int v240;
  unsigned int v241;
  uint64_t v242;
  char v243;
  int v244;
  char v245;
  unsigned int v246;
  uint64_t v247;
  int v248;
  int v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  unsigned int v253;
  int v254;
  uint64_t v255;
  char v256;
  int v257;
  char v258;
  char v259;
  unsigned int v260;
  unint64_t v261;
  int v262;
  int v263;
  int v264;
  int v265;
  int v266;
  BOOL v267;
  unsigned int v268;
  char *v269;
  int v270;
  unsigned int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  int v275;
  int v276;
  int8x16_t *v277;
  int v278;
  char *v279;
  unint64_t v280;
  unint64_t v281;
  unsigned int v282;
  int v283;
  unsigned int v284;
  int v285;
  int v286;
  int8x16_t *v287;
  unint64_t v288;
  char *v289;
  char *v290;
  unint64_t v291;
  unint64_t v292;
  char *v293;
  unint64_t v294;
  char *v295;
  _OWORD *v296;
  __int128 *v297;
  unint64_t v298;
  __int128 v299;
  _QWORD *v300;
  uint64_t *v301;
  unint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  _OWORD *v308;
  __int128 *v309;
  unint64_t v310;
  __int128 v311;
  _QWORD *v312;
  uint64_t *v313;
  unint64_t v314;
  uint64_t v315;
  char *v316;
  char *v317;
  unint64_t v318;
  __int128 v319;
  char *v320;
  char *v321;
  unint64_t v322;
  uint64_t v323;
  char *v324;
  char *v325;
  unint64_t v326;
  __int128 v327;
  char *v328;
  char *v329;
  unint64_t v330;
  uint64_t v331;
  char *v332;
  char *v333;
  unint64_t v334;
  __int128 v335;
  char *v336;
  char *v337;
  unint64_t v338;
  uint64_t v339;
  char *v340;
  char *v341;
  unint64_t v342;
  __int128 v343;
  char *v344;
  char *v345;
  unint64_t v346;
  uint64_t v347;
  char *v348;
  char *v349;
  unint64_t v350;
  __int128 v351;
  char *v352;
  char *v353;
  unint64_t v354;
  uint64_t v355;
  char *v356;
  char v357;
  uint64_t *v358;
  int8x16_t *v359;
  unint64_t v360;
  uint64_t v361;
  int v362;
  char *v363;
  char v364;
  uint64_t *v365;
  int8x16_t *v366;
  unint64_t v367;
  uint64_t v368;
  char *v369;
  char v370;
  unsigned __int8 *v371;
  uint64_t *v372;
  char v373;
  char v374;
  uint64_t v375;
  int8x16_t *v376;
  unint64_t v377;
  unsigned int v378;
  char *v379;
  char v380;
  uint64_t v381;
  uint64_t *v382;
  char v383;
  char v384;
  uint64_t v385;
  int8x16_t v386;
  unint64_t v387;
  uint64x2_t v388;
  unint64_t v389;
  uint64_t *v390;
  int8x16_t *v391;
  unint64_t v392;
  uint64_t v393;
  uint32x4_t v394;
  uint32x4_t v395;
  int8x16_t v396;
  int8x16_t v397;
  int32x2_t v398;
  int32x2_t v399;
  int8x16_t v400;
  int8x16_t v401;
  int32x2_t v402;
  int8x16_t v403;
  int8x16_t v404;
  int32x2_t v405;
  int8x16_t v406;
  unint64_t v407;
  int8x16_t *v408;
  int8x16_t *v409;
  int8x16_t v410;
  uint32x4_t v411;
  uint32x4_t v412;
  uint32x4_t v413;
  uint32x4_t v414;
  int8x16_t v415;
  int8x16_t v416;
  int8x16_t v417;
  int8x16_t v418;
  int32x2_t v419;
  int32x2_t v420;
  int32x2_t v421;
  int32x2_t v422;
  int32x2_t v423;
  int8x16_t v424;
  int8x16_t v425;
  int8x16_t v426;
  int32x2_t v427;
  int8x16_t v428;
  int8x16_t v429;
  int8x16_t v430;
  int32x2_t v431;
  int8x16_t v432;
  int8x16_t v433;
  int32x2_t v434;
  int8x16_t v435;
  unint64_t v436;
  int *v437;
  char *v438;
  char v439;
  char *v440;
  char v441;
  int32x4_t *v442;
  uint64_t *v443;
  char v444;
  char v445;
  uint64_t v446;
  int8x16_t *v447;
  unint64_t v448;
  __int32 v449;
  int v450;
  char *v451;
  char *v452;
  char *v453;
  char *v454;
  char *v455;
  size_t v456;
  unsigned int v457;
  char *v458;
  unsigned int v459;
  BOOL v460;
  char *v461;
  int v462;
  unsigned int v463;
  char *v464;
  char *v465;
  int v466;
  char *v467;
  char *v468;
  uint64_t v469;
  unint64_t v470;
  unint64_t v471;
  int v472;
  unint64_t v473;
  char *v474;
  int v475;
  unint64_t v476;
  uint64_t v477;
  size_t v480;
  unint64_t __sz;
  uint64_t v482;
  uint64_t *v483;
  unsigned __int8 *v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  __int128 v488;
  uint64_t v489;
  __int16 v490;
  char v491;
  int v492;
  char v493;
  char v494;
  uint64_t v495;
  uint64_t v496;
  _BYTE __dst[65];
  uint64_t v498;

  v498 = *MEMORY[0x1E0C80C00];
  if (!a6)
    return 0;
  v476 = 4 * a6;
  bzero(a7, 4 * a6);
  v12 = *a2;
  if ((v12 - 66) < 0xFFFFFFBF)
    return 3;
  if (v12 <= 0x40)
    v14 = 65 - v12;
  else
    v14 = 0;
  bzero(&__dst[v12], v14);
  memcpy(__dst, a2 + 1, v12);
  v15 = 0;
  v16 = v12 + 1;
  v471 = a6 & 0xFFFFFFFFFFFFFFF0;
  v477 = a3 - 1;
  v475 = a3 - 1;
  __sz = 8 * a6;
  v482 = 8 * a3 - 24;
  v469 = -(uint64_t)(a6 & 0xFFFFFFFFFFFFFFF8);
  v470 = a6 & 0xFFFFFFFFFFFFFFF8;
  v483 = a1;
  v484 = a2;
  v485 = a6;
  v17 = a2;
  v480 = v12;
  while (2)
  {
    v486 = v15;
    v487 = v16;
    v21 = __dst[v15];
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = &v17[v16 + 1];
    v26 = 1;
    if (__dst[v15])
    {
      v27 = v482 - 8 * v16;
      do
      {
        v28 = v26;
        v29 = v27;
        v30 = (char)v25[v23];
        v24 |= (unint64_t)(v25[v23] & 0x7F) << v22;
        if (v23 > 8)
          break;
        ++v23;
        v22 += 7;
        ++v26;
        v27 -= 8;
      }
      while (v30 < 0);
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v34 = &v17[v16];
      do
      {
        v35 = v29;
        v36 = (char)v34[v28 + 1];
        v33 |= (unint64_t)(v34[++v28] & 0x7F) << v31;
        if (v32 > 8)
          break;
        ++v32;
        v31 += 7;
        v29 -= 8;
      }
      while (v36 < 0);
      switch(v17[v16])
      {
        case 1u:
          if (!a1[3])
          {
            v37 = (_QWORD *)operator new();
            v38 = (_QWORD *)operator new();
            v39 = operator new();
            a1 = v483;
            v17 = v484;
            *(_QWORD *)(v39 + 20) = 0;
            *(_QWORD *)(v39 + 12) = 0;
            *(_DWORD *)(v39 + 36) = 0;
            *(_QWORD *)(v39 + 28) = 0;
            *(_WORD *)(v39 + 40) = 257;
            *(_QWORD *)(v39 + 44) = 0;
            *(_QWORD *)(v39 + 60) = 0;
            *(_QWORD *)(v39 + 52) = 0;
            *(_DWORD *)(v39 + 67) = 0;
            *(_DWORD *)(v39 + 72) = 0;
            *(_WORD *)(v39 + 76) = 257;
            *(_QWORD *)(v39 + 136) = 0;
            *(_OWORD *)(v39 + 80) = 0u;
            *(_OWORD *)(v39 + 96) = 0u;
            *(_OWORD *)(v39 + 112) = 0u;
            *v38 = v39;
            *v37 = v38;
            v40 = (_QWORD **)v483[3];
            v483[3] = (uint64_t)v37;
            if (v40)
            {
              v41 = *v40;
              *v40 = 0;
              if (v41)
              {
                v42 = (_QWORD *)*v41;
                *v41 = 0;
                if (v42)
                {
                  v43 = (void *)v42[13];
                  if (v43)
                  {
                    v42[14] = v43;
                    operator delete(v43);
                  }
                  v44 = (void *)v42[10];
                  if (v44)
                  {
                    v42[11] = v44;
                    operator delete(v44);
                  }
                  MEMORY[0x18D76437C](v42, 0x1070C40ADA6D0DELL);
                }
                MEMORY[0x18D76437C](v41, 0x20C4093837F09);
                a1 = v483;
              }
              MEMORY[0x18D76437C](v40, 0x20C4093837F09);
            }
          }
          v45 = v21 == 1;
          v46 = v33 - 2;
          if (v33 < 2)
            return 3;
          v47 = &v17[v487 + v28];
          v48 = v47[1];
          v49 = v47[2];
          v51 = *a1;
          v50 = (char *)a1[1];
          v52 = &v50[-*a1];
          if (v21 == 1)
          {
            LODWORD(v53) = v485;
            v54 = v485 - (_QWORD)v52;
            if (v485 <= (unint64_t)v52)
            {
              v61 = v483;
              if (v485 < (unint64_t)v52)
                v483[1] = v51 + v485;
LABEL_388:
              v381 = *v61;
              v382 = *(uint64_t **)v61[3];
              LODWORD(v488) = 0;
              BYTE4(v488) = a4;
              BYTE5(v488) = a5;
              WORD3(v488) = 0;
              v489 = 1;
              v490 = 0;
              v491 = v45;
              v492 = 0;
              if (v48 >= 4)
                v383 = 1;
              else
                v383 = v48;
              v493 = v383;
              if (v49 == 2)
                v384 = 4;
              else
                v384 = 1;
              if (!v49)
                v384 = 0;
              v494 = v384;
              *((_QWORD *)&v488 + 1) = __PAIR64__(v53, v46);
              v385 = *v382;
              v495 = (uint64_t)&v484[v487 + 3 + v28];
              v496 = v46;
              result = gcl::polyline::DecoderImpl::decompressAttributes(v385, (uint64_t)&v495, v381, 0, &v488);
              if ((_DWORD)result)
                goto LABEL_433;
              if (v485 < 8)
              {
                v387 = 0;
                a1 = v483;
                v17 = v484;
LABEL_409:
                v436 = v485 - v387;
                v437 = &a7->i32[v387];
                v438 = (char *)(v381 + v387);
                do
                {
                  v439 = *v438++;
                  *v437 = ((_BYTE)v24 + v439) & 1 | (2 * *v437);
                  ++v437;
                  --v436;
                }
                while (v436);
                goto LABEL_431;
              }
              v388 = (uint64x2_t)vdupq_n_s64(v24);
              a1 = v483;
              v17 = v484;
              if (v485 >= 0x10)
              {
                v407 = v471;
                v408 = a7;
                v409 = (int8x16_t *)v381;
                do
                {
                  v410 = *v409++;
                  v411 = (uint32x4_t)vqtbl1q_s8(v410, (int8x16_t)xmmword_189CFB5C0);
                  v412 = (uint32x4_t)vqtbl1q_s8(v410, (int8x16_t)xmmword_189CFB5D0);
                  v413 = (uint32x4_t)vqtbl1q_s8(v410, (int8x16_t)xmmword_189CFB5B0);
                  v414 = (uint32x4_t)vqtbl1q_s8(v410, (int8x16_t)xmmword_189CFB5A0);
                  v416 = v408[2];
                  v415 = v408[3];
                  v418 = *v408;
                  v417 = v408[1];
                  v419 = (int32x2_t)vextq_s8(v418, v418, 8uLL).u64[0];
                  v420 = (int32x2_t)vextq_s8(v417, v417, 8uLL).u64[0];
                  v421 = (int32x2_t)vextq_s8(v416, v416, 8uLL).u64[0];
                  v422 = (int32x2_t)vextq_s8(v415, v415, 8uLL).u64[0];
                  v423 = vadd_s32(v422, v422);
                  v424.i64[0] = v423.u32[0];
                  v424.i64[1] = v423.u32[1];
                  v425 = v424;
                  *(int32x2_t *)v415.i8 = vadd_s32(*(int32x2_t *)v415.i8, *(int32x2_t *)v415.i8);
                  v424.i64[0] = v415.u32[0];
                  v424.i64[1] = v415.u32[1];
                  v426 = v424;
                  v427 = vadd_s32(v421, v421);
                  v424.i64[0] = v427.u32[0];
                  v424.i64[1] = v427.u32[1];
                  v428 = v424;
                  *(int32x2_t *)v416.i8 = vadd_s32(*(int32x2_t *)v416.i8, *(int32x2_t *)v416.i8);
                  v424.i64[0] = v416.u32[0];
                  v424.i64[1] = v416.u32[1];
                  v429 = v424;
                  *(int32x2_t *)v417.i8 = vadd_s32(*(int32x2_t *)v417.i8, *(int32x2_t *)v417.i8);
                  v424.i64[0] = v417.u32[0];
                  v424.i64[1] = v417.u32[1];
                  v430 = v424;
                  v431 = vadd_s32(v420, v420);
                  v424.i64[0] = v431.u32[0];
                  v424.i64[1] = v431.u32[1];
                  v432 = v424;
                  *(int32x2_t *)v418.i8 = vadd_s32(*(int32x2_t *)v418.i8, *(int32x2_t *)v418.i8);
                  v424.i64[0] = v418.u32[0];
                  v424.i64[1] = v418.u32[1];
                  v433 = v424;
                  v434 = vadd_s32(v419, v419);
                  v424.i64[0] = v434.u32[0];
                  v424.i64[1] = v434.u32[1];
                  v435 = (int8x16_t)vdupq_n_s64(1uLL);
                  *(int32x4_t *)v408 = vuzp1q_s32((int32x4_t)vorrq_s8(v433, vandq_s8((int8x16_t)vaddw_u32(v388, *(uint32x2_t *)v411.i8), v435)), (int32x4_t)vorrq_s8(v424, vandq_s8((int8x16_t)vaddw_high_u32(v388, v411), v435)));
                  v408[1] = (int8x16_t)vuzp1q_s32((int32x4_t)vorrq_s8(v430, vandq_s8((int8x16_t)vaddw_u32(v388, *(uint32x2_t *)v412.i8), v435)), (int32x4_t)vorrq_s8(v432, vandq_s8((int8x16_t)vaddw_high_u32(v388, v412), v435)));
                  v386 = (int8x16_t)vuzp1q_s32((int32x4_t)vorrq_s8(v426, vandq_s8((int8x16_t)vaddw_u32(v388, *(uint32x2_t *)v414.i8), v435)), (int32x4_t)vorrq_s8(v425, vandq_s8((int8x16_t)vaddw_high_u32(v388, v414), v435)));
                  v408[2] = (int8x16_t)vuzp1q_s32((int32x4_t)vorrq_s8(v429, vandq_s8((int8x16_t)vaddw_u32(v388, *(uint32x2_t *)v413.i8), v435)), (int32x4_t)vorrq_s8(v428, vandq_s8((int8x16_t)vaddw_high_u32(v388, v413), v435)));
                  v408[3] = v386;
                  v408 += 4;
                  v407 -= 16;
                }
                while (v407);
                if (v471 == v485)
                  goto LABEL_431;
                v387 = v471;
                v389 = v471;
                if ((v485 & 8) == 0)
                  goto LABEL_409;
              }
              else
              {
                v389 = 0;
              }
              v390 = (uint64_t *)(v381 + v389);
              v391 = (int8x16_t *)((char *)a7 + 4 * v389);
              v392 = v469 + v389;
              do
              {
                v393 = *v390++;
                v386.i64[0] = v393;
                v394 = (uint32x4_t)vqtbl1q_s8(v386, (int8x16_t)xmmword_189CFB5C0);
                v395 = (uint32x4_t)vqtbl1q_s8(v386, (int8x16_t)xmmword_189CFB5D0);
                v397 = *v391;
                v396 = v391[1];
                v398 = (int32x2_t)vextq_s8(v397, v397, 8uLL).u64[0];
                v399 = (int32x2_t)vextq_s8(v396, v396, 8uLL).u64[0];
                *(int32x2_t *)v396.i8 = vadd_s32(*(int32x2_t *)v396.i8, *(int32x2_t *)v396.i8);
                v400.i64[0] = v396.u32[0];
                v400.i64[1] = v396.u32[1];
                v401 = v400;
                v402 = vadd_s32(v399, v399);
                v400.i64[0] = v402.u32[0];
                v400.i64[1] = v402.u32[1];
                v403 = v400;
                *(int32x2_t *)v397.i8 = vadd_s32(*(int32x2_t *)v397.i8, *(int32x2_t *)v397.i8);
                v400.i64[0] = v397.u32[0];
                v400.i64[1] = v397.u32[1];
                v404 = v400;
                v405 = vadd_s32(v398, v398);
                v400.i64[0] = v405.u32[0];
                v400.i64[1] = v405.u32[1];
                v406 = (int8x16_t)vdupq_n_s64(1uLL);
                v386 = (int8x16_t)vuzp1q_s32((int32x4_t)vorrq_s8(v401, vandq_s8((int8x16_t)vaddw_u32(v388, *(uint32x2_t *)v395.i8), v406)), (int32x4_t)vorrq_s8(v403, vandq_s8((int8x16_t)vaddw_high_u32(v388, v395), v406)));
                *(int32x4_t *)v391 = vuzp1q_s32((int32x4_t)vorrq_s8(v404, vandq_s8((int8x16_t)vaddw_u32(v388, *(uint32x2_t *)v394.i8), v406)), (int32x4_t)vorrq_s8(v400, vandq_s8((int8x16_t)vaddw_high_u32(v388, v394), v406)));
                v391[1] = v386;
                v391 += 2;
                v392 += 8;
              }
              while (v392);
              v387 = v470;
              if (v470 != v485)
                goto LABEL_409;
LABEL_431:
              v16 = v487 + v33 + v28 + 1;
              goto LABEL_12;
            }
            v55 = v483[2];
            if (v55 - (uint64_t)v50 >= v54)
            {
              v467 = &v50[v54];
              v266 = v49;
              v267 = v45;
              v268 = v48;
              bzero(v50, v485 - (_QWORD)v52);
              v48 = v268;
              v45 = v267;
              v49 = v266;
              v46 = v33 - 2;
              v483[1] = (uint64_t)v467;
              v61 = v483;
              LODWORD(v53) = v485;
              goto LABEL_388;
            }
            v457 = v48;
            v460 = v21 == 1;
            v462 = v49;
            if ((v485 & 0x8000000000000000) != 0)
              goto LABEL_437;
            v56 = (unint64_t)v52;
            v57 = v55 - v51;
            v58 = 2 * v57;
            if (2 * v57 <= v485)
              v58 = v485;
            if (v57 >= 0x3FFFFFFFFFFFFFFFLL)
              v59 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v59 = v58;
            v60 = v59;
            v454 = (char *)operator new(v59);
            v452 = &v454[v56];
            bzero(&v454[v56], v54);
            if (v50 == (char *)v51)
            {
              v61 = v483;
              v53 = v485;
              v46 = v33 - 2;
              v49 = v462;
              v45 = v460;
              v48 = v457;
              v293 = v452;
              v62 = v454;
              goto LABEL_386;
            }
            if (v56 < 8)
            {
              v61 = v483;
              v53 = v485;
              v46 = v33 - 2;
              v49 = v462;
              v45 = v460;
              v48 = v457;
              v63 = v452;
              v62 = v454;
              goto LABEL_383;
            }
            v304 = v56;
            v63 = &v454[v56];
            v62 = v454;
            v61 = v483;
            v53 = v485;
            v46 = v33 - 2;
            v49 = v462;
            v45 = v460;
            v48 = v457;
            if ((unint64_t)(v51 - (_QWORD)v454) >= 0x20)
            {
              if (v304 < 0x20)
              {
                v305 = 0;
                goto LABEL_324;
              }
              v305 = v304 & 0xFFFFFFFFFFFFFFE0;
              v340 = &v454[v304 - 16];
              v341 = v50 - 16;
              v342 = v304 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v343 = *(_OWORD *)v341;
                *((_OWORD *)v340 - 1) = *((_OWORD *)v341 - 1);
                *(_OWORD *)v340 = v343;
                v340 -= 32;
                v341 -= 32;
                v342 -= 32;
              }
              while (v342);
              if (v304 == v305)
                goto LABEL_385;
              if ((v304 & 0x18) != 0)
              {
LABEL_324:
                v63 = &v452[-(v304 & 0xFFFFFFFFFFFFFFF8)];
                v344 = &v50[-v305 - v51 - 8 + (_QWORD)v454];
                v345 = &v50[-v305 - 8];
                v346 = v305 - (v304 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v347 = *(_QWORD *)v345;
                  v345 -= 8;
                  *(_QWORD *)v344 = v347;
                  v344 -= 8;
                  v346 += 8;
                }
                while (v346);
                v50 -= v304 & 0xFFFFFFFFFFFFFFF8;
                if (v304 == (v304 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_385;
                goto LABEL_383;
              }
              v63 = &v452[-v305];
              v50 -= v305;
            }
LABEL_383:
            v379 = v63 - 1;
            do
            {
              v380 = *--v50;
              *v379-- = v380;
            }
            while (v50 != (char *)v51);
LABEL_385:
            v50 = (char *)v51;
            v293 = v62;
LABEL_386:
            *v61 = (uint64_t)v293;
            v61[1] = (uint64_t)&v62[v53];
            v61[2] = (uint64_t)&v62[v60];
            if (v50)
            {
              operator delete(v50);
              v48 = v457;
              v45 = v460;
              v49 = v462;
              v46 = v33 - 2;
            }
            goto LABEL_388;
          }
          v182 = v476 - (_QWORD)v52;
          if (v476 <= (unint64_t)v52)
          {
            v188 = v483;
            v189 = v485;
            if (v476 < (unint64_t)v52)
              v483[1] = v51 + v476;
            goto LABEL_418;
          }
          v183 = v483[2];
          if (v183 - (uint64_t)v50 >= v182)
          {
            v468 = &v50[v182];
            v269 = v50;
            v270 = v49;
            v271 = v48;
            bzero(v269, v476 - (_QWORD)v52);
            v48 = v271;
            v45 = v21 == 1;
            v49 = v270;
            v46 = v33 - 2;
            v483[1] = (uint64_t)v468;
            v188 = v483;
            v189 = v485;
LABEL_418:
            v442 = (int32x4_t *)*v188;
            v443 = *(uint64_t **)v188[3];
            LODWORD(v488) = 0;
            BYTE4(v488) = a4;
            BYTE5(v488) = a5;
            WORD3(v488) = 0;
            v489 = 1;
            v490 = 0;
            v491 = v45;
            v492 = 0;
            if (v48 >= 4)
              v444 = 1;
            else
              v444 = v48;
            v493 = v444;
            if (v49 == 2)
              v445 = 4;
            else
              v445 = 1;
            if (!v49)
              v445 = 0;
            v494 = v445;
            *((_QWORD *)&v488 + 1) = __PAIR64__(v189, v46);
            v446 = *v443;
            v495 = (uint64_t)&v484[v487 + 3 + v28];
            v496 = v46;
            result = gcl::polyline::DecoderImpl::decompressAttributes(v446, (uint64_t)&v495, v442, 0, &v488);
            if ((_DWORD)result)
              goto LABEL_433;
            v447 = a7;
            v17 = v484;
            v448 = v485;
            a1 = v483;
            do
            {
              while (1)
              {
                v449 = v442->i32[0];
                v442 = (int32x4_t *)((char *)v442 + 4);
                v450 = v24 + v449;
                if (v21 >= 0x40)
                  break;
                v447->i32[0] = ((unint64_t)v447->u32[0] << v21) | v450 & ~(-1 << v21);
                v447 = (int8x16_t *)((char *)v447 + 4);
                if (!--v448)
                  goto LABEL_431;
              }
              v447->i32[0] = v450;
              v447 = (int8x16_t *)((char *)v447 + 4);
              --v448;
            }
            while (v448);
            goto LABEL_431;
          }
          v459 = v48;
          v466 = v49;
          if ((v476 & 0x8000000000000000) != 0)
LABEL_437:
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          v184 = (unint64_t)v52;
          v185 = v183 - v51;
          v186 = 2 * v185;
          if (2 * v185 <= v476)
            v186 = v476;
          if (v185 >= 0x3FFFFFFFFFFFFFFFLL)
            v187 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v187 = v186;
          v456 = v187;
          v453 = (char *)operator new(v187);
          v451 = &v453[v184];
          bzero(&v453[v184], v182);
          if (v50 == (char *)v51)
          {
            v188 = v483;
            v189 = v485;
            v46 = v33 - 2;
            v49 = v466;
            v45 = v21 == 1;
            v48 = v459;
            v191 = v453;
            v190 = v456;
            v295 = v451;
            goto LABEL_416;
          }
          if (v184 < 8)
          {
            v188 = v483;
            v189 = v485;
            v46 = v33 - 2;
            v49 = v466;
            v45 = v21 == 1;
            v48 = v459;
            v191 = v453;
            v190 = v456;
            v192 = v451;
            goto LABEL_413;
          }
          v306 = v184;
          v191 = v453;
          v190 = v456;
          v188 = v483;
          v189 = v485;
          v46 = v33 - 2;
          v49 = v466;
          v45 = v21 == 1;
          v48 = v459;
          v192 = v451;
          if ((unint64_t)(v51 - (_QWORD)v453) < 0x20)
            goto LABEL_413;
          if (v306 >= 0x20)
          {
            v307 = v306 & 0xFFFFFFFFFFFFFFE0;
            v348 = &v453[v306 - 16];
            v349 = v50 - 16;
            v350 = v306 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v351 = *(_OWORD *)v349;
              *((_OWORD *)v348 - 1) = *((_OWORD *)v349 - 1);
              *(_OWORD *)v348 = v351;
              v348 -= 32;
              v349 -= 32;
              v350 -= 32;
            }
            while (v350);
            if (v306 == v307)
              goto LABEL_415;
            if ((v306 & 0x18) == 0)
            {
              v192 = &v451[-v307];
              v50 -= v307;
LABEL_413:
              v440 = v192 - 1;
              do
              {
                v441 = *--v50;
                *v440-- = v441;
              }
              while (v50 != (char *)v51);
LABEL_415:
              v50 = (char *)v51;
              v295 = v191;
LABEL_416:
              *v188 = (uint64_t)v295;
              v188[1] = (uint64_t)&v191[v476];
              v188[2] = (uint64_t)&v191[v190];
              if (v50)
              {
                operator delete(v50);
                v48 = v459;
                v45 = v21 == 1;
                v49 = v466;
                v46 = v33 - 2;
              }
              goto LABEL_418;
            }
          }
          else
          {
            v307 = 0;
          }
          v192 = &v451[-(v306 & 0xFFFFFFFFFFFFFFF8)];
          v352 = &v50[-v307 - v51 - 8 + (_QWORD)v453];
          v353 = &v50[-v307 - 8];
          v354 = v307 - (v306 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v355 = *(_QWORD *)v353;
            v353 -= 8;
            *(_QWORD *)v352 = v355;
            v352 -= 8;
            v354 += 8;
          }
          while (v354);
          v50 -= v306 & 0xFFFFFFFFFFFFFFF8;
          if (v306 == (v306 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_415;
          goto LABEL_413;
        case 2u:
          v129 = (char *)*a1;
          v128 = (char *)a1[1];
          v130 = &v128[-*a1];
          v131 = __sz - (_QWORD)v130;
          if (__sz <= (unint64_t)v130)
          {
            v137 = v485;
            if (__sz < (unint64_t)v130)
              a1[1] = (uint64_t)&v129[__sz];
LABEL_344:
            v358 = (uint64_t *)*a1;
            result = mgcl::muid::decompress((mgcl::muid *)&v484[v487 + 1 + v28], (const char *)v33, 0, 0, *a1, (unint64_t *)8, v137);
            if ((_DWORD)result)
              return result;
            v359 = a7;
            v17 = v484;
            v360 = v485;
            do
            {
              while (1)
              {
                v361 = *v358++;
                v362 = v361 + v24;
                if (v21 >= 0x40)
                  break;
                v359->i32[0] = ((unint64_t)v359->u32[0] << v21) | v362 & ~(-1 << v21);
                v359 = (int8x16_t *)((char *)v359 + 4);
                if (!--v360)
                  goto LABEL_349;
              }
              v359->i32[0] = v362;
              v359 = (int8x16_t *)((char *)v359 + 4);
              --v360;
            }
            while (v360);
LABEL_349:
            v16 = v487 + v33 + v28 + 1;
            a1 = v483;
            goto LABEL_12;
          }
          v132 = a1[2];
          if (v132 - (uint64_t)v128 >= v131)
          {
            bzero((void *)a1[1], __sz - (_QWORD)v130);
            a1[1] = (uint64_t)&v128[v131];
            v137 = v485;
            goto LABEL_344;
          }
          v473 = (unint64_t)&v128[-*a1];
          if ((__sz & 0x8000000000000000) != 0)
            goto LABEL_437;
          v133 = v132 - (_QWORD)v129;
          v134 = 2 * v133;
          if (2 * v133 <= __sz)
            v134 = __sz;
          if (v133 >= 0x3FFFFFFFFFFFFFFFLL)
            v135 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v135 = v134;
          v464 = (char *)operator new(v135);
          v461 = &v464[v473];
          bzero(&v464[v473], v131);
          v136 = v135;
          if (v128 == v129)
          {
            a1 = v483;
            v137 = v485;
            v279 = &v464[v473];
            v138 = v464;
            goto LABEL_342;
          }
          if (v473 < 8)
          {
            a1 = v483;
            v137 = v485;
            v139 = &v464[v473];
            v138 = v464;
            goto LABEL_339;
          }
          v139 = &v464[v473];
          v138 = v464;
          a1 = v483;
          v137 = v485;
          if ((unint64_t)(v129 - v464) < 0x20)
            goto LABEL_339;
          if (v473 >= 0x20)
          {
            v281 = v473 & 0xFFFFFFFFFFFFFFE0;
            v316 = &v464[v473 - 16];
            v317 = v128 - 16;
            v318 = v473 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v319 = *(_OWORD *)v317;
              *((_OWORD *)v316 - 1) = *((_OWORD *)v317 - 1);
              *(_OWORD *)v316 = v319;
              v316 -= 32;
              v317 -= 32;
              v318 -= 32;
            }
            while (v318);
            if (v473 == v281)
              goto LABEL_341;
            if ((v473 & 0x18) == 0)
            {
              v139 = &v461[-v281];
              v128 -= v281;
LABEL_339:
              v356 = v139 - 1;
              do
              {
                v357 = *--v128;
                *v356-- = v357;
              }
              while (v128 != v129);
LABEL_341:
              v128 = v129;
              v279 = v138;
LABEL_342:
              *a1 = (uint64_t)v279;
              a1[1] = (uint64_t)&v138[__sz];
              a1[2] = (uint64_t)&v138[v136];
              if (v128)
                operator delete(v128);
              goto LABEL_344;
            }
          }
          else
          {
            v281 = 0;
          }
          v139 = &v461[-(v473 & 0xFFFFFFFFFFFFFFF8)];
          v320 = &v464[&v128[-v281] - v129 - 8];
          v321 = &v128[-v281 - 8];
          v322 = v281 - (v473 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v323 = *(_QWORD *)v321;
            v321 -= 8;
            *(_QWORD *)v320 = v323;
            v320 -= 8;
            v322 += 8;
          }
          while (v322);
          v128 -= v473 & 0xFFFFFFFFFFFFFFF8;
          if (v473 == (v473 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_341;
          goto LABEL_339;
        case 3u:
          v99 = (char *)*a1;
          v100 = (char *)a1[1];
          if (v100 != (char *)*a1)
          {
            a1[1] = (uint64_t)v99;
            v100 = v99;
          }
          if (a1[2] - (uint64_t)v99 >= __sz)
            goto LABEL_89;
          if ((__sz & 0x8000000000000000) != 0)
            goto LABEL_437;
          v101 = operator new(__sz);
          v102 = v100 - v99;
          v103 = &v101[v100 - v99];
          v104 = v103;
          a1 = v483;
          v17 = v484;
          if (v100 == v99)
            goto LABEL_87;
          v104 = v101;
          if (v102 < 8 || (unint64_t)(v99 - v101) < 0x20)
          {
            v105 = v100;
            v106 = &v101[v100 - v99];
            goto LABEL_85;
          }
          if (v102 >= 0x20)
          {
            v280 = v102 & 0xFFFFFFFFFFFFFFE0;
            v296 = &v101[v102 - 16];
            v297 = (__int128 *)(v100 - 16);
            v298 = v102 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v299 = *v297;
              *(v296 - 1) = *(v297 - 1);
              *v296 = v299;
              v296 -= 2;
              v297 -= 2;
              v298 -= 32;
            }
            while (v298);
            if (v102 == v280)
            {
LABEL_87:
              *v483 = (uint64_t)v104;
              v483[1] = (uint64_t)v103;
              v483[2] = (uint64_t)&v101[__sz];
              if (v99)
                operator delete(v99);
LABEL_89:
              v109 = 0;
              v110 = v487 + v28 + 1;
              v12 = v480;
              do
              {
                while (1)
                {
                  v111 = 0;
                  v112 = 0;
                  v113 = 0;
                  v114 = v110;
                  v115 = &v17[v110];
                  do
                  {
                    v116 = (char)v115[v112];
                    v113 |= (unint64_t)(v115[v112] & 0x7F) << v111;
                    v117 = v112 + 1;
                    if (v112 > 8)
                      break;
                    v111 += 7;
                    ++v112;
                  }
                  while (v116 < 0);
                  v118 = v113 + v24;
                  if (v21 >= 0x40)
                    break;
                  a7->i32[v109] = ((unint64_t)a7->u32[v109] << v21) | v118 & ~(-1 << v21);
                  v110 = v114 + v117;
                  if (++v109 == v485)
                    goto LABEL_96;
                }
                a7->i32[v109] = v118;
                v110 = v114 + v117;
                ++v109;
              }
              while (v109 != v485);
LABEL_96:
              v16 = v114 + v117;
              goto LABEL_13;
            }
            if ((v102 & 0x18) == 0)
            {
              v106 = &v103[-v280];
              v105 = &v100[-v280];
LABEL_85:
              v107 = v106 - 1;
              do
              {
                v108 = *--v105;
                *v107-- = v108;
              }
              while (v105 != v99);
              goto LABEL_87;
            }
          }
          else
          {
            v280 = 0;
          }
          v105 = &v100[-(v102 & 0xFFFFFFFFFFFFFFF8)];
          v106 = &v103[-(v102 & 0xFFFFFFFFFFFFFFF8)];
          v300 = &v101[&v100[-v280] - v99 - 8];
          v301 = (uint64_t *)&v100[-v280 - 8];
          v302 = v280 - (v102 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v303 = *v301--;
            *v300-- = v303;
            v302 += 8;
          }
          while (v302);
          if (v102 != (v102 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_85;
          goto LABEL_87;
        case 4u:
          v119 = (uint64_t *)operator new();
          v120 = v119;
          v121 = v477 - v16 - v28;
          v17 = v484;
          *v119 = (uint64_t)&v484[v16 + 1 + v28];
          v119[1] = v121;
          v119[2] = 0;
          v122 = 8 * v121;
          if (!v122)
          {
            v18 = 0;
            goto LABEL_102;
          }
          v123 = (char *)*v119;
          v124 = *(unsigned __int8 *)*v119;
          v119[2] = 1;
          v125 = (v124 >> 6) & 2 | (*v123 >> 6) & 1;
          v119[2] = 2;
          v126 = (*v123 >> 5) & 1 | (2 * v125);
          v119[2] = 3;
          if (v126 != 2)
          {
            if (v126 != 1)
            {
              v18 = 3;
              if (v126)
                goto LABEL_436;
              if (v122 >= 8)
              {
                v193 = (_BYTE *)*v119;
                v194 = *(unsigned __int8 *)*v119 >> 4;
                v119[2] = 4;
                v195 = (*v193 >> 3) & 1 | (2 * (v194 & 1));
                v119[2] = 5;
                v196 = *v193 >> 2;
                v119[2] = 6;
                v197 = (4 * v195) | (2 * (v196 & 1)) | (*v193 >> 1) & 1;
                v119[2] = 7;
                LODWORD(v193) = *v193 & 1;
                v119[2] = 8;
                v127 = (v193 | (2 * v197)) + 1;
                v18 = 8;
LABEL_166:
                a1 = v483;
                for (i = 0; i != v485; ++i)
                {
                  while (1)
                  {
                    if (v18 + v127 <= v122)
                    {
                      v199 = 0;
                      v200 = *v119;
                      v201 = v127;
                      do
                      {
                        v199 = (*(unsigned __int8 *)(v200 + (v18 >> 3)) >> (~(_BYTE)v18 & 7)) & 1 | (2 * v199);
                        v119[2] = ++v18;
                        --v201;
                      }
                      while (v201);
                    }
                    else
                    {
                      v199 = 0;
                    }
                    v202 = v199 + v24;
                    if (v21 >= 0x40)
                      break;
                    a7->i32[i] = ((unint64_t)a7->u32[i] << v21) | v202 & ~(-1 << v21);
                    if (++i == v485)
                      goto LABEL_9;
                  }
                  a7->i32[i] = v202;
                }
LABEL_9:
                v19 = v18 >> 3;
                if ((v18 & 7) != 0)
                  ++v19;
                v16 = v487 + v28 + v19 + 1;
                MEMORY[0x18D76437C](v120, 0x1050C40E4AAA758);
LABEL_12:
                v12 = v480;
LABEL_13:
                v20 = v486;
                goto LABEL_14;
              }
LABEL_102:
              v127 = 1;
              goto LABEL_166;
            }
            v212 = 0;
            v213 = *v123;
            v119[2] = 4;
            v214 = v213 & 0x10 | *v123 & 0xF;
            v119[2] = 5;
            v215 = *v123;
            v119[2] = 6;
            v216 = v214 & 0xFFFFFFF8 | v215 & 4 | *v123 & 3;
            v119[2] = 7;
            v217 = v216 & 0xFFFFFFFE | *v123 & 1;
            v119[2] = 8;
            v18 = 8;
            a1 = v483;
            while (v18 + 1 > v122)
            {
              v218 = 0;
              v219 = 0;
              if ((_DWORD)v217)
                goto LABEL_205;
LABEL_209:
              v227 = v24 + (v219 | (v218 << v217));
              if (v21 < 0x40)
              {
                a7->i32[v212] = ((unint64_t)a7->u32[v212] << v21) | v227 & ~(-1 << v21);
                if (++v212 == v485)
                  goto LABEL_9;
              }
              else
              {
                a7->i32[v212++] = v227;
                if (v212 == v485)
                  goto LABEL_9;
              }
            }
            v220 = 0;
            v218 = 8 * (v475 - v16 - v28) - v18;
            v221 = v35 - v18;
            while (1)
            {
              v222 = v18++;
              v223 = v123[v222 >> 3];
              v120[2] = v18;
              if (((v223 >> (~(_BYTE)v222 & 7)) & 1) == 0)
                break;
              if (v221 == ++v220)
              {
                v18 = v222 + 1;
                v219 = 0;
                if ((_DWORD)v217)
                  goto LABEL_205;
                goto LABEL_209;
              }
            }
            v218 = v220;
            v18 = v222 + 1;
            v219 = 0;
            if (!(_DWORD)v217)
              goto LABEL_209;
LABEL_205:
            if (v18 + v217 <= v122)
            {
              v224 = 0;
              v225 = -v217;
              do
              {
                v219 = (v123[v18 >> 3] >> (~(_BYTE)v18 & 7)) & 1 | (2 * v224);
                v120[2] = ++v18;
                v224 = v219;
                v226 = __CFADD__(v225++, 1);
              }
              while (!v226);
            }
            goto LABEL_209;
          }
          v228 = *v123;
          v119[2] = 4;
          v229 = v228 & 0x10 | *v123 & 0xF;
          v119[2] = 5;
          v230 = *v123;
          v119[2] = 6;
          v231 = *v123;
          v119[2] = 7;
          v232 = v229 & 0xFFFFFFF8 | v230 & 4 | v231 & 2 | *v123 & 1;
          v119[2] = 8;
          LODWORD(v488) = v232;
          if (v122 >= 0xD)
          {
            v272 = v123[1];
            v119[2] = 9;
            v273 = (v272 >> 6) & 2 | (v123[1] >> 6) & 1;
            v119[2] = 10;
            v274 = v123[1];
            v119[2] = 11;
            v275 = (4 * v273) | (v274 >> 4) & 2 | (v123[1] >> 4) & 1;
            v119[2] = 12;
            v276 = (2 * v275) | (v123[1] >> 3) & 1;
            v119[2] = 13;
            v233 = v485;
            DWORD1(v488) = v276;
            if (v122 >= 0x12)
            {
              v234 = v123[1] >> 2;
              v119[2] = 14;
              v235 = (v123[1] >> 1) & 1 | (2 * (v234 & 1));
              v119[2] = 15;
              LOBYTE(v234) = v123[1];
              v119[2] = 16;
              v236 = (4 * v235) | (2 * (v234 & 1)) | (v123[2] >> 7) & 1;
              v119[2] = 17;
              v237 = (v123[2] >> 6) & 1 | (2 * v236);
              v119[2] = 18;
              goto LABEL_241;
            }
          }
          else
          {
            v233 = v485;
            DWORD1(v488) = 0;
          }
          v237 = 0;
LABEL_241:
          DWORD2(v488) = v237;
          v277 = a7;
          do
          {
            while (1)
            {
              v278 = v24 + geo::ReadBitstream::unpackRice2(v120, &v488);
              if (v21 >= 0x40)
                break;
              v277->i32[0] = ((unint64_t)v277->u32[0] << v21) | v278 & ~(-1 << v21);
              v277 = (int8x16_t *)((char *)v277 + 4);
              if (!--v233)
                goto LABEL_8;
            }
            v277->i32[0] = v278;
            v277 = (int8x16_t *)((char *)v277 + 4);
            --v233;
          }
          while (v233);
LABEL_8:
          v18 = v120[2];
          a1 = v483;
          goto LABEL_9;
        default:
          return 3;
      }
    }
    v64 = v482 - 8 * v16;
    do
    {
      v65 = v26;
      v66 = v64;
      v67 = (char)v25[v23];
      v24 |= (unint64_t)(v25[v23] & 0x7F) << v22;
      if (v23 > 8)
        break;
      ++v23;
      v22 += 7;
      ++v26;
      v64 -= 8;
    }
    while (v67 < 0);
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v71 = &v17[v16];
    do
    {
      v72 = v66;
      v73 = (char)v71[v65 + 1];
      v70 |= (unint64_t)(v71[++v65] & 0x7F) << v68;
      if (v69 > 8)
        break;
      ++v69;
      v68 += 7;
      v66 -= 8;
    }
    while (v73 < 0);
    switch(v17[v16])
    {
      case 1u:
        if (!a1[3])
        {
          v74 = (_QWORD *)operator new();
          v75 = (_QWORD *)operator new();
          v76 = operator new();
          a1 = v483;
          v17 = v484;
          *(_QWORD *)(v76 + 20) = 0;
          *(_QWORD *)(v76 + 12) = 0;
          *(_DWORD *)(v76 + 36) = 0;
          *(_QWORD *)(v76 + 28) = 0;
          *(_WORD *)(v76 + 40) = 257;
          *(_QWORD *)(v76 + 44) = 0;
          *(_QWORD *)(v76 + 60) = 0;
          *(_QWORD *)(v76 + 52) = 0;
          *(_DWORD *)(v76 + 67) = 0;
          *(_DWORD *)(v76 + 72) = 0;
          *(_WORD *)(v76 + 76) = 257;
          *(_QWORD *)(v76 + 136) = 0;
          *(_OWORD *)(v76 + 80) = 0u;
          *(_OWORD *)(v76 + 96) = 0u;
          *(_OWORD *)(v76 + 112) = 0u;
          *v75 = v76;
          *v74 = v75;
          v77 = (_QWORD **)v483[3];
          v483[3] = (uint64_t)v74;
          if (v77)
          {
            v78 = *v77;
            *v77 = 0;
            if (v78)
            {
              v79 = (_QWORD *)*v78;
              *v78 = 0;
              if (v79)
              {
                v80 = (void *)v79[13];
                if (v80)
                {
                  v79[14] = v80;
                  operator delete(v80);
                }
                v81 = (void *)v79[10];
                if (v81)
                {
                  v79[11] = v81;
                  operator delete(v81);
                }
                MEMORY[0x18D76437C](v79, 0x1070C40ADA6D0DELL);
              }
              MEMORY[0x18D76437C](v78, 0x20C4093837F09);
              a1 = v483;
            }
            MEMORY[0x18D76437C](v77, 0x20C4093837F09);
          }
        }
        v82 = v70 - 2;
        if (v70 < 2)
          return 3;
        v83 = &v17[v487 + v65];
        v84 = v83[1];
        v85 = v83[2];
        v87 = *a1;
        v86 = (char *)a1[1];
        v88 = (unint64_t)&v86[-*a1];
        v89 = (unint64_t)a1;
        v90 = v485 - v88;
        if (v485 > v88)
        {
          v91 = *(_QWORD *)(v89 + 16);
          if (v91 - (uint64_t)v86 >= v90)
          {
            v238 = &v86[v90];
            v239 = v86;
            v240 = v85;
            v241 = v84;
            bzero(v239, v485 - v88);
            v82 = v70 - 2;
            v84 = v241;
            v85 = v240;
            *(_QWORD *)(v89 + 8) = v238;
            v96 = (uint64_t *)v89;
            LODWORD(v89) = v485;
            goto LABEL_368;
          }
          v463 = v84;
          v472 = v85;
          if ((v485 & 0x8000000000000000) != 0)
            goto LABEL_438;
          v92 = v91 - v87;
          v93 = 2 * v92;
          if (2 * v92 <= v485)
            v93 = v485;
          if (v92 >= 0x3FFFFFFFFFFFFFFFLL)
            v94 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v94 = v93;
          v458 = (char *)operator new(v94);
          v455 = &v458[v88];
          bzero(&v458[v88], v90);
          v95 = v94;
          if (v86 == (char *)v87)
          {
            v96 = v483;
            v89 = v485;
            v85 = v472;
            v84 = v463;
            v290 = &v458[v88];
            v97 = v458;
            goto LABEL_366;
          }
          if (v88 < 8)
          {
            v96 = v483;
            v89 = v485;
            v85 = v472;
            v84 = v463;
            v98 = &v458[v88];
            v97 = v458;
            goto LABEL_363;
          }
          v98 = &v458[v88];
          v97 = v458;
          v96 = v483;
          v89 = v485;
          v85 = v472;
          v84 = v463;
          if ((unint64_t)(v87 - (_QWORD)v458) >= 0x20)
          {
            if (v88 < 0x20)
            {
              v294 = 0;
              goto LABEL_316;
            }
            v294 = v88 & 0xFFFFFFFFFFFFFFE0;
            v332 = &v458[v88 - 16];
            v333 = v86 - 16;
            v334 = v88 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v335 = *(_OWORD *)v333;
              *((_OWORD *)v332 - 1) = *((_OWORD *)v333 - 1);
              *(_OWORD *)v332 = v335;
              v332 -= 32;
              v333 -= 32;
              v334 -= 32;
            }
            while (v334);
            if (v88 == v294)
              goto LABEL_365;
            if ((v88 & 0x18) != 0)
            {
LABEL_316:
              v98 = &v455[-(v88 & 0xFFFFFFFFFFFFFFF8)];
              v336 = &v86[-v294 - v87 - 8 + (_QWORD)v458];
              v337 = &v86[-v294 - 8];
              v338 = v294 - (v88 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v339 = *(_QWORD *)v337;
                v337 -= 8;
                *(_QWORD *)v336 = v339;
                v336 -= 8;
                v338 += 8;
              }
              while (v338);
              v86 -= v88 & 0xFFFFFFFFFFFFFFF8;
              if (v88 == (v88 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_365;
              goto LABEL_363;
            }
            v98 = &v455[-v294];
            v86 -= v294;
          }
LABEL_363:
          v369 = v98 - 1;
          do
          {
            v370 = *--v86;
            *v369-- = v370;
          }
          while (v86 != (char *)v87);
LABEL_365:
          v86 = (char *)v87;
          v290 = v97;
LABEL_366:
          v82 = v70 - 2;
          *v96 = (uint64_t)v290;
          v96[1] = (uint64_t)&v97[v89];
          v96[2] = (uint64_t)&v97[v95];
          if (v86)
          {
            operator delete(v86);
            v82 = v70 - 2;
            v84 = v463;
            v85 = v472;
          }
          goto LABEL_368;
        }
        v96 = (uint64_t *)v89;
        LODWORD(v89) = v485;
        if (v485 < v88)
          v96[1] = v87 + v485;
LABEL_368:
        v371 = (unsigned __int8 *)*v96;
        v372 = *(uint64_t **)v96[3];
        LODWORD(v488) = 0;
        BYTE4(v488) = a4;
        BYTE5(v488) = a5;
        WORD3(v488) = 0;
        v489 = 1;
        v490 = 0;
        v491 = 1;
        v492 = 0;
        if (v84 >= 4)
          v373 = 1;
        else
          v373 = v84;
        v493 = v373;
        if (v85 == 2)
          v374 = 4;
        else
          v374 = 1;
        if (!v85)
          v374 = 0;
        v494 = v374;
        *((_QWORD *)&v488 + 1) = __PAIR64__(v89, v82);
        v375 = *v372;
        v495 = (uint64_t)&v484[v487 + 3 + v65];
        v496 = v82;
        result = gcl::polyline::DecoderImpl::decompressAttributes(v375, (uint64_t)&v495, (uint64_t)v371, 0, &v488);
        v12 = v480;
        if (!(_DWORD)result)
        {
          v376 = a7;
          v17 = v484;
          v377 = v485;
          do
          {
            v378 = *v371++;
            if (v24 + v378)
              v376->i32[0] = -v376->i32[0];
            v376 = (int8x16_t *)((char *)v376 + 4);
            --v377;
          }
          while (v377);
          v16 = v487 + v70 + v65 + 1;
          a1 = v483;
          goto LABEL_13;
        }
LABEL_433:
        if ((result - 1) >= 4)
          return 5;
        return result;
      case 2u:
        v169 = *a1;
        v168 = (char *)a1[1];
        v170 = (unint64_t)&v168[-*a1];
        v171 = a1;
        v172 = __sz - v170;
        if (__sz > v170)
        {
          v173 = v171[2];
          if (v173 - (uint64_t)v168 >= v172)
          {
            bzero(v168, __sz - v170);
            v171[1] = (uint64_t)&v168[v172];
            v178 = v171;
            v179 = v485;
            goto LABEL_356;
          }
          if ((__sz & 0x8000000000000000) != 0)
LABEL_438:
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          v174 = v173 - v169;
          v175 = 2 * v174;
          if (2 * v174 <= __sz)
            v175 = __sz;
          if (v174 >= 0x3FFFFFFFFFFFFFFFLL)
            v176 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v176 = v175;
          v474 = (char *)operator new(v176);
          v465 = &v474[v170];
          bzero(&v474[v170], v172);
          v177 = v176;
          if (v168 == (char *)v169)
          {
            v178 = v483;
            v179 = v485;
            v180 = v474;
            v289 = &v474[v170];
          }
          else
          {
            if (v170 < 8)
            {
              v178 = v483;
              v179 = v485;
              v180 = v474;
              v181 = &v474[v170];
              goto LABEL_351;
            }
            v180 = v474;
            v178 = v483;
            v179 = v485;
            v181 = &v474[v170];
            if ((unint64_t)(v169 - (_QWORD)v474) < 0x20)
              goto LABEL_351;
            if (v170 >= 0x20)
            {
              v292 = v170 & 0xFFFFFFFFFFFFFFE0;
              v324 = &v474[v170 - 16];
              v325 = v168 - 16;
              v326 = v170 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v327 = *(_OWORD *)v325;
                *((_OWORD *)v324 - 1) = *((_OWORD *)v325 - 1);
                *(_OWORD *)v324 = v327;
                v324 -= 32;
                v325 -= 32;
                v326 -= 32;
              }
              while (v326);
              if (v170 != v292)
              {
                if ((v170 & 0x18) == 0)
                {
                  v181 = &v465[-v292];
                  v168 -= v292;
                  goto LABEL_351;
                }
                goto LABEL_308;
              }
            }
            else
            {
              v292 = 0;
LABEL_308:
              v181 = &v465[-(v170 & 0xFFFFFFFFFFFFFFF8)];
              v328 = &v168[-v292 - v169 - 8 + (_QWORD)v474];
              v329 = &v168[-v292 - 8];
              v330 = v292 - (v170 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v331 = *(_QWORD *)v329;
                v329 -= 8;
                *(_QWORD *)v328 = v331;
                v328 -= 8;
                v330 += 8;
              }
              while (v330);
              v168 -= v170 & 0xFFFFFFFFFFFFFFF8;
              if (v170 != (v170 & 0xFFFFFFFFFFFFFFF8))
              {
LABEL_351:
                v363 = v181 - 1;
                do
                {
                  v364 = *--v168;
                  *v363-- = v364;
                }
                while (v168 != (char *)v169);
              }
            }
            v168 = (char *)v169;
            v289 = v180;
          }
          *v178 = (uint64_t)v289;
          v178[1] = (uint64_t)&v180[__sz];
          v178[2] = (uint64_t)&v180[v177];
          if (v168)
            operator delete(v168);
          goto LABEL_356;
        }
        v178 = v171;
        v179 = v485;
        if (__sz < v170)
          v178[1] = v169 + __sz;
LABEL_356:
        v365 = (uint64_t *)*v178;
        result = mgcl::muid::decompress((mgcl::muid *)&v484[v487 + 1 + v65], (const char *)v70, 0, 0, *v178, (unint64_t *)8, v179);
        if ((_DWORD)result)
          return result;
        v366 = a7;
        v17 = v484;
        v367 = v485;
        v12 = v480;
        v20 = v486;
        do
        {
          v368 = *v365++;
          if (v368 != -(uint64_t)v24)
            v366->i32[0] = -v366->i32[0];
          v366 = (int8x16_t *)((char *)v366 + 4);
          --v367;
        }
        while (v367);
        v16 = v487 + v70 + v65 + 1;
        a1 = v483;
LABEL_14:
        v15 = v20 + 1;
        if (v15 == v12)
          return 0;
        continue;
      case 3u:
        v140 = (char *)*a1;
        v141 = (char *)a1[1];
        if (v141 != (char *)*a1)
        {
          a1[1] = (uint64_t)v140;
          v141 = v140;
        }
        if (a1[2] - (uint64_t)v140 >= __sz)
          goto LABEL_126;
        if ((__sz & 0x8000000000000000) != 0)
          goto LABEL_438;
        v142 = operator new(__sz);
        v143 = v141 - v140;
        v144 = &v142[v141 - v140];
        v145 = v144;
        a1 = v483;
        v17 = v484;
        v12 = v480;
        if (v141 == v140)
          goto LABEL_124;
        v145 = v142;
        if (v143 < 8 || (unint64_t)(v140 - v142) < 0x20)
        {
          v146 = v141;
          v147 = &v142[v141 - v140];
          goto LABEL_122;
        }
        if (v143 >= 0x20)
        {
          v291 = v143 & 0xFFFFFFFFFFFFFFE0;
          v308 = &v142[v143 - 16];
          v309 = (__int128 *)(v141 - 16);
          v310 = v143 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v311 = *v309;
            *(v308 - 1) = *(v309 - 1);
            *v308 = v311;
            v308 -= 2;
            v309 -= 2;
            v310 -= 32;
          }
          while (v310);
          if (v143 == v291)
          {
LABEL_124:
            *v483 = (uint64_t)v145;
            v483[1] = (uint64_t)v144;
            v483[2] = (uint64_t)&v142[__sz];
            if (v140)
              operator delete(v140);
LABEL_126:
            v150 = 0;
            v20 = v486;
            v151 = v487 + v65 + 1;
            do
            {
              v152 = 0;
              v153 = 0;
              v154 = 0;
              v155 = v151;
              v156 = &v17[v151];
              do
              {
                v157 = (char)v156[v153];
                v154 |= (unint64_t)(v156[v153] & 0x7F) << v152;
                v158 = v153 + 1;
                if (v153 > 8)
                  break;
                v152 += 7;
                ++v153;
              }
              while (v157 < 0);
              if (v154 != -(uint64_t)v24)
                a7->i32[v150] = -a7->i32[v150];
              v151 = v155 + v158;
              ++v150;
            }
            while (v150 != v485);
            v16 = v155 + v158;
            goto LABEL_14;
          }
          if ((v143 & 0x18) == 0)
          {
            v147 = &v144[-v291];
            v146 = &v141[-v291];
LABEL_122:
            v148 = v147 - 1;
            do
            {
              v149 = *--v146;
              *v148-- = v149;
            }
            while (v146 != v140);
            goto LABEL_124;
          }
        }
        else
        {
          v291 = 0;
        }
        v146 = &v141[-(v143 & 0xFFFFFFFFFFFFFFF8)];
        v147 = &v144[-(v143 & 0xFFFFFFFFFFFFFFF8)];
        v312 = &v142[&v141[-v291] - v140 - 8];
        v313 = (uint64_t *)&v141[-v291 - 8];
        v314 = v291 - (v143 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v315 = *v313--;
          *v312-- = v315;
          v314 += 8;
        }
        while (v314);
        if (v143 != (v143 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_122;
        goto LABEL_124;
      case 4u:
        v159 = (uint64_t *)operator new();
        v120 = v159;
        v160 = v477 - v16 - v65;
        v17 = v484;
        *v159 = (uint64_t)&v484[v16 + 1 + v65];
        v159[1] = v160;
        v159[2] = 0;
        v161 = 8 * v160;
        if (!v161)
        {
          v166 = 0;
          v12 = v480;
          goto LABEL_138;
        }
        v162 = (char *)*v159;
        v163 = *(unsigned __int8 *)*v159;
        v159[2] = 1;
        v164 = (v163 >> 6) & 2 | (*v162 >> 6) & 1;
        v159[2] = 2;
        v165 = (*v162 >> 5) & 1 | (2 * v164);
        v159[2] = 3;
        v12 = v480;
        if (v165 != 2)
        {
          if (v165 != 1)
          {
            v166 = 3;
            if (v165)
            {
LABEL_436:
              MEMORY[0x18D76437C](v120, 0x1050C40E4AAA758);
              return 3;
            }
            if (v161 >= 8)
            {
              v203 = (_BYTE *)*v159;
              v204 = *(unsigned __int8 *)*v159 >> 4;
              v159[2] = 4;
              v205 = (*v203 >> 3) & 1 | (2 * (v204 & 1));
              v159[2] = 5;
              v206 = *v203 >> 2;
              v159[2] = 6;
              v207 = (4 * v205) | (2 * (v206 & 1)) | (*v203 >> 1) & 1;
              v159[2] = 7;
              LODWORD(v203) = *v203 & 1;
              v159[2] = 8;
              v167 = (v203 | (2 * v207)) + 1;
              v166 = 8;
LABEL_186:
              a1 = v483;
              for (j = 0; j != v485; ++j)
              {
                if (v166 + v167 <= v161)
                {
                  v209 = 0;
                  v210 = *v159;
                  v211 = v167;
                  do
                  {
                    v209 = (*(unsigned __int8 *)(v210 + (v166 >> 3)) >> (~(_BYTE)v166 & 7)) & 1 | (2 * v209);
                    v159[2] = ++v166;
                    --v211;
                  }
                  while (v211);
                }
                else
                {
                  v209 = 0;
                }
                if (v209 != -(uint64_t)v24)
                  a7->i32[j] = -a7->i32[j];
              }
LABEL_259:
              v288 = v166 >> 3;
              if ((v166 & 7) != 0)
                ++v288;
              v16 = v487 + v65 + v288 + 1;
              MEMORY[0x18D76437C](v120, 0x1050C40E4AAA758);
              goto LABEL_13;
            }
LABEL_138:
            v167 = 1;
            goto LABEL_186;
          }
          v242 = 0;
          v243 = *v162;
          v159[2] = 4;
          v244 = v243 & 0x10 | *v162 & 0xF;
          v159[2] = 5;
          v245 = *v162;
          v159[2] = 6;
          v246 = v244 & 0xFFFFFFF8 | v245 & 4 | *v162 & 3;
          v159[2] = 7;
          v247 = v246 & 0xFFFFFFFE | *v162 & 1;
          v159[2] = 8;
          v166 = 8;
          a1 = v483;
          while (v166 + 1 > v161)
          {
            v248 = 0;
            v249 = 0;
            if ((_DWORD)v247)
              goto LABEL_228;
LABEL_232:
            if (v24 + (v249 | (v248 << v247)))
              a7->i32[v242] = -a7->i32[v242];
            if (++v242 == v485)
              goto LABEL_259;
          }
          v250 = 0;
          v248 = 8 * (v475 - v16 - v65) - v166;
          v251 = v72 - v166;
          while (1)
          {
            v252 = v166++;
            v253 = v162[v252 >> 3];
            v120[2] = v166;
            if (((v253 >> (~(_BYTE)v252 & 7)) & 1) == 0)
              break;
            if (v251 == ++v250)
            {
              v166 = v252 + 1;
              v249 = 0;
              if ((_DWORD)v247)
                goto LABEL_228;
              goto LABEL_232;
            }
          }
          v248 = v250;
          v166 = v252 + 1;
          v249 = 0;
          if (!(_DWORD)v247)
            goto LABEL_232;
LABEL_228:
          if (v166 + v247 <= v161)
          {
            v254 = 0;
            v255 = -v247;
            do
            {
              v249 = (v162[v166 >> 3] >> (~(_BYTE)v166 & 7)) & 1 | (2 * v254);
              v120[2] = ++v166;
              v254 = v249;
              v226 = __CFADD__(v255++, 1);
            }
            while (!v226);
          }
          goto LABEL_232;
        }
        v256 = *v162;
        v159[2] = 4;
        v257 = v256 & 0x10 | *v162 & 0xF;
        v159[2] = 5;
        v258 = *v162;
        v159[2] = 6;
        v259 = *v162;
        v159[2] = 7;
        v260 = v257 & 0xFFFFFFF8 | v258 & 4 | v259 & 2 | *v162 & 1;
        v159[2] = 8;
        LODWORD(v488) = v260;
        if (v161 >= 0xD)
        {
          v282 = v162[1];
          v159[2] = 9;
          v283 = (v282 >> 6) & 2 | (v162[1] >> 6) & 1;
          v159[2] = 10;
          v284 = v162[1];
          v159[2] = 11;
          v285 = (4 * v283) | (v284 >> 4) & 2 | (v162[1] >> 4) & 1;
          v159[2] = 12;
          v286 = (2 * v285) | (v162[1] >> 3) & 1;
          v159[2] = 13;
          a1 = v483;
          v261 = v485;
          DWORD1(v488) = v286;
          if (v161 >= 0x12)
          {
            v262 = v162[1] >> 2;
            v159[2] = 14;
            v263 = (v162[1] >> 1) & 1 | (2 * (v262 & 1));
            v159[2] = 15;
            LOBYTE(v262) = v162[1];
            v159[2] = 16;
            v264 = (4 * v263) | (2 * (v262 & 1)) | (v162[2] >> 7) & 1;
            v159[2] = 17;
            v265 = (v162[2] >> 6) & 1 | (2 * v264);
            v159[2] = 18;
            goto LABEL_254;
          }
        }
        else
        {
          a1 = v483;
          v261 = v485;
          DWORD1(v488) = 0;
        }
        v265 = 0;
LABEL_254:
        DWORD2(v488) = v265;
        v287 = a7;
        do
        {
          if (v24 + geo::ReadBitstream::unpackRice2(v120, &v488))
            v287->i32[0] = -v287->i32[0];
          v287 = (int8x16_t *)((char *)v287 + 4);
          --v261;
        }
        while (v261);
        v166 = v120[2];
        goto LABEL_259;
      default:
        return 3;
    }
  }
}

void sub_188647FEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x18D76437C](v2, 0x20C4093837F09);
  MEMORY[0x18D76437C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t mgcl::ints::IntDecompressor<unsigned short>::~IntDecompressor(uint64_t a1)
{
  _QWORD **v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *(_QWORD ***)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = (_QWORD *)*v3;
      *v3 = 0;
      if (v4)
      {
        v5 = (void *)v4[13];
        if (v5)
        {
          v4[14] = v5;
          operator delete(v5);
        }
        v6 = (void *)v4[10];
        if (v6)
        {
          v4[11] = v6;
          operator delete(v6);
        }
        MEMORY[0x18D76437C](v4, 0x1070C40ADA6D0DELL);
      }
      MEMORY[0x18D76437C](v3, 0x20C4093837F09);
    }
    MEMORY[0x18D76437C](v2, 0x20C4093837F09);
  }
  v7 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t geo::codec::decodeIntCompressorArray<long long>(_QWORD *a1, uint64_t *a2, char a3, char a4, uint64_t a5)
{
  uint64x2_t *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int v16;

  v5 = *(uint64x2_t **)a5;
  v6 = *(_QWORD *)(a5 + 8);
  v16 = 0;
  if (!a2)
    return 0;
  result = geo::codec::chapterReadVarUint32(a1, (unsigned int *)&v16);
  if ((_DWORD)result)
  {
    v12 = v16;
    v13 = a1[6];
    v14 = v13 + v16;
    if (v14 <= a1[7])
    {
      v15 = (unsigned __int8 *)(a1[5] + v13);
      a1[6] = v14;
      return mgcl::ints::IntDecompressor<long long>::decompress(a2, v15, v12, a3, a4, (v6 - (uint64_t)v5) >> 3, v5) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_18864849C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

